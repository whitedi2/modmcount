
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	
	//НастройкиДляКомпоновкиМакета = КомпоновщикНастроек.ПолучитьНастройки();
	//КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	//МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиДляКомпоновкиМакета, ДанныеРасшифровки, Неопределено, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	//
	//ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	//ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, Неопределено, ДанныеРасшифровки, Истина);
	////Результат = Новый ТаблицаЗначений;
	//ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	////ПроцессорВывода.УстановитьОбъект(Результат);
	//Табл = ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	//СтандартнаяОбработка = Ложь;

	//ЗаполнитьТаблицу(Табл);
	//
	//ДокументРезультат.Очистить();
	//
	//ПараметрКоманды = Новый Структура;
	//
	//ПараметрКоманды.Вставить("Сценарий1", Справочники.СценарииПланирования.Факт);
	//ПараметрКоманды.Вставить("Период",  КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Значение);
	//ПараметрКоманды.Вставить("СравнитьПоСчету", КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[2].Значение);
	//ПараметрКоманды.Вставить("ПоСубсчетам", КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[3].Значение);
	//
	//МассивДоступныхПП = ПараметрыСеанса.ДоступныеПредприятия;
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//|	Предприятия.Ссылка
	//|ИЗ
	//|	Справочник.Предприятия КАК Предприятия";
	//
	//Результат = Запрос.Выполнить();
	//Выборка = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	//
	//ПараметрыСеанса.ДоступныеПредприятия = Новый ФиксированныйМассив(Выборка);
	//
	//МассивПредприятий = Новый Массив;
	//Если НЕ ТипЗнч(КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[1].Значение) = Тип("СписокЗначений") Тогда
	//	МассивПредприятий.Добавить(КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[1].Значение);
	//Иначе
	//	МассивПредприятий = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[1].Значение.ВыгрузитьЗначения();	
	//КонецЕсли;
	//
	//Для Каждого ТекЗавод Из МассивПредприятий Цикл
	//	ПараметрКоманды.Вставить("Предприятие", ТекЗавод);
	//	ЗаполнитьТаблицу(ДокументРезультат, ПараметрКоманды);
	//КонецЦикла;
	//
	//ПараметрыСеанса.ДоступныеПредприятия = МассивДоступныхПП;
	//
	//ДокументРезультат.ОтображатьСетку = Ложь;
	//ДокументРезультат.Защита = Ложь;
	//ДокументРезультат.ТолькоПросмотр = Истина;
	//ДокументРезультат.ОтображатьЗаголовки = Истина;
	//ДокументРезультат.ОтображатьГруппировки = Истина;
	//ДокументРезультат.АвтоМасштаб = Истина;
	//
	//СтандартнаяОбработка = Ложь;
КонецПроцедуры


Процедура ЗаполнитьТаблицу(ТабДок, ПараметрКоманды) Экспорт
	
	
	Макет = Отчеты.УЧ_ВнутрихолдинговыеРасчеты.ПолучитьМакет("Макет");
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьСчет = Макет.ПолучитьОбласть("Счет");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьИтого = Макет.ПолучитьОбласть("Итого");
	ОбластьВсего = Макет.ПолучитьОбласть("Всего");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА Свой.Субконто1 ЕСТЬ NULL 
	               |			ТОГДА Чужой.Предприятия
	               |		ИНАЧЕ Свой.Субконто1
	               |	КОНЕЦ КАК Предприятие,
	               |	СУММА(-Чужой.СуммаНачальныйОстаток) КАК СуммаНачальныйОстатокЧужой,
	               |	СУММА(Чужой.СуммаОборотДт) КАК СуммаОборотДтЧужой,
	               |	СУММА(Чужой.СуммаОборотКт) КАК СуммаОборотКтЧужой,
	               |	СУММА(-Чужой.СуммаКонечныйОстаток) КАК СуммаКонечныйОстатокЧужой,
	               |	СУММА(Свой.СуммаНачальныйОстаток) КАК СуммаНачальныйОстатокСвой,
	               |	СУММА(Свой.СуммаОборотДт) КАК СуммаОборотДтСвой,
	               |	СУММА(Свой.СуммаОборотКт) КАК СуммаОборотКтСвой,
	               |	СУММА(Свой.СуммаКонечныйОстаток) КАК СуммаКонечныйОстатокСвой,
	               |	ВЫБОР
	               |		КОГДА &ПоСубсчетам
	               |			ТОГДА ВЫБОР
	               |					КОГДА Свой.Счет ЕСТЬ NULL 
	               |						ТОГДА Чужой.Счет
	               |					ИНАЧЕ Свой.Счет
	               |				КОНЕЦ
	               |		ИНАЧЕ &Счет79
	               |	КОНЕЦ КАК Счет
	               |ИЗ
	               |	РегистрБухгалтерии.Учетный.ОстаткиИОбороты(&Дата1, &Дата2, , , Счет В ИЕРАРХИИ (&ВНХСчет), , Предприятия = &Предприятие) КАК Свой
	               |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Учетный.ОстаткиИОбороты(&Дата1, &Дата2, , , Счет В ИЕРАРХИИ (&ВНХСчет), , Субконто1 = &Предприятие) КАК Чужой
	               |		ПО Свой.Субконто1 = Чужой.Предприятия
	               |			И Свой.Счет = Чужой.Счет
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВЫБОР
	               |		КОГДА Свой.Субконто1 ЕСТЬ NULL 
	               |			ТОГДА Чужой.Предприятия
	               |		ИНАЧЕ Свой.Субконто1
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА &ПоСубсчетам
	               |			ТОГДА ВЫБОР
	               |					КОГДА Свой.Счет ЕСТЬ NULL 
	               |						ТОГДА Чужой.Счет
	               |					ИНАЧЕ Свой.Счет
	               |				КОНЕЦ
	               |		ИНАЧЕ &Счет79
	               |	КОНЕЦ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Счет,
	               |	Предприятие
	               |АВТОУПОРЯДОЧИВАНИЕ";
				   
	МассивВНХСчетов = Новый Массив;
	МассивВНХСчетов.Добавить(ПараметрКоманды.СравнитьПоСчету);
	//Сож+
	//МассивВНХСчетов.Добавить(ПланыСчетов.Учетный.УсловеноВнутренниеВзаиморасчеты);
	МассивВНХСчетов.Добавить(ПланыСчетов.Учетный.Счет79());
	//Сож-
	Запрос.УстановитьПараметр("Дата1", ПараметрКоманды.Период.ДатаНачала);
	Запрос.УстановитьПараметр("Дата2", ПараметрКоманды.Период.ДатаОкончания);
	Запрос.УстановитьПараметр("ВНХСчет", МассивВНХСчетов);
	Запрос.УстановитьПараметр("Счет79", ПараметрКоманды.СравнитьПоСчету);
	Запрос.УстановитьПараметр("Предприятие", ПараметрКоманды.Предприятие);
	Запрос.УстановитьПараметр("ПоСубсчетам", ПараметрКоманды.ПоСубсчетам);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();
	
	ОбластьШапка.Параметры.Период = ПараметрКоманды.Период;
	ОбластьШапка.Параметры.Предприятие = ПараметрКоманды.Предприятие;
	ТабДок.Вывести(ОбластьШапка);
	
	Если Выборка.Количество() Тогда
		ТабДок.Вывести(ОбластьЗаголовок);	
	КонецЕсли;
	
	ТаблицаСчетов = Выборка.Скопировать();
	ТаблицаСчетов.Свернуть("Счет", "СуммаНачальныйОстатокЧужой, СуммаОборотДтЧужой, СуммаОборотКтЧужой, СуммаКонечныйОстатокЧужой, СуммаНачальныйОстатокСвой, СуммаОборотДтСвой, СуммаОборотКтСвой, СуммаКонечныйОстатокСвой");
	
	СписСценарий = Новый СписокЗначений;
	СписСценарий.Добавить(Справочники.СценарииПланирования.Факт);
	
	
	Для каждого ТекСтрока Из ТаблицаСчетов Цикл
		ОбластьСчет.Параметры.Заполнить(ТекСтрока);
		ТабДок.Вывести(ОбластьСчет);
		
		СтруктураПоиска = Новый Структура("Счет", ТекСтрока.Счет); 
		
		МассивСтрок = Выборка.НайтиСтроки(СтруктураПоиска);
		Для каждого ТекСтрока2 Из МассивСтрок Цикл
			
			СтруктураРасшифровки = Новый Структура;
			СтруктураРасшифровки.Вставить("Счет", ТекСтрока.Счет);
			СтруктураРасшифровки.Вставить("Предприятие", ПараметрКоманды.Предприятие);
			СтруктураРасшифровки.Вставить("Субконто1", ТекСтрока2.Предприятие);
			СтруктураРасшифровки.Вставить("Субконто2", "");
			СтруктураРасшифровки.Вставить("Сценарий1", СписСценарий);
			СтруктураРасшифровки.Вставить("Дата1", ПараметрКоманды.Период.ДатаНачала);
			СтруктураРасшифровки.Вставить("Дата2", ПараметрКоманды.Период.ДатаОкончания);
			
			СтруктураРасшифровки2 = Новый Структура;
			СтруктураРасшифровки2.Вставить("Счет", ТекСтрока.Счет);
			СтруктураРасшифровки2.Вставить("Предприятие", ТекСтрока2.Предприятие);
			СтруктураРасшифровки2.Вставить("Субконто1", ПараметрКоманды.Предприятие);
			СтруктураРасшифровки2.Вставить("Субконто2", "");
			СтруктураРасшифровки2.Вставить("Сценарий1", СписСценарий);
			СтруктураРасшифровки2.Вставить("Дата1", ПараметрКоманды.Период.ДатаНачала);
			СтруктураРасшифровки2.Вставить("Дата2", ПараметрКоманды.Период.ДатаОкончания);
			
			ОбластьСтрока.Параметры.Заполнить(ТекСтрока2);
			ОбластьСтрока.Параметры.Расшифровка = СтруктураРасшифровки;
			ОбластьСтрока.Параметры.Расшифровка2 = СтруктураРасшифровки2;
			
			ТабДок.Вывести(ОбластьСтрока);
		КонецЦикла;
		
		ОбластьИтого.Параметры.Заполнить(ТекСтрока);
		ТабДок.Вывести(ОбластьИтого);
		
	
	КонецЦикла; 

	
	
	
КонецПроцедуры

Функция ПолучитьСтруктуруРасшифровки(Отчет, Расшифровка, ДанныеРасшифровки) Экспорт

	ДР = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	Эл = ДР.Элементы.Получить(Расшифровка);
	ИмяПоля = Эл.ПолучитьПоля()[0].Поле;   
	Строка = Эл.ПолучитьРодителей()[0];
	
	СтруктураРасшифровки = Новый Структура;
	СтруктураРасшифровки.Вставить("Период",Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Значение);
	
	Ошибка = Ложь;
	Пока НЕ Ошибка Цикл
		
		Если ТипЗнч(Строка) <> Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка")Тогда
			
			Если ТипЗнч(Строка.ПолучитьПоля()[0].Значение) = Тип("СправочникСсылка.Предприятия") Тогда
				Если СтрНайти(ИмяПоля, "Корр") Тогда
					Если Строка.ПолучитьПоля()[0].Поле = "ПредприятиеСубконто1" Тогда
						СтруктураРасшифровки.Вставить("Предприятие",Строка.ПолучитьПоля()[0].Значение);
					Иначе
						СтруктураРасшифровки.Вставить("Субконто1",Строка.ПолучитьПоля()[0].Значение);
					КонецЕсли;
				Иначе
					Если Строка.ПолучитьПоля()[0].Поле = "ПредприятиеСубконто1" Тогда
						
						СтруктураРасшифровки.Вставить("Субконто1",Строка.ПолучитьПоля()[0].Значение);
					Иначе
						СтруктураРасшифровки.Вставить("Предприятие",Строка.ПолучитьПоля()[0].Значение);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ТипЗнч(Строка.ПолучитьПоля()[0].Значение) = Тип("ПланСчетовСсылка.Учетный") Тогда
				СтруктураРасшифровки.Вставить("Счет",Строка.ПолучитьПоля()[0].Значение);
				Если СтрНайти(ИмяПоля, "Дт") Тогда
					Если СтрНайти(ИмяПоля, "Корр") Тогда
						СтруктураРасшифровки.Вставить("СчетКт",Строка.ПолучитьПоля()[0].Значение);
					Иначе			
						СтруктураРасшифровки.Вставить("СчетДт",Строка.ПолучитьПоля()[0].Значение);
					КонецЕсли;
				Иначе
					Если СтрНайти(ИмяПоля, "Корр") Тогда
						СтруктураРасшифровки.Вставить("СчетДт",Строка.ПолучитьПоля()[0].Значение);
					Иначе			
						СтруктураРасшифровки.Вставить("СчетКт",Строка.ПолучитьПоля()[0].Значение);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ТипЗнч(Строка.ПолучитьПоля()[0].Значение) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
				СтруктураРасшифровки.Вставить("ПредприятиеСубконто1",Строка.ПолучитьПоля()[0].Значение);
			КонецЕсли;
			
		КонецЕсли;
		
		Попытка
			Строка = Строка.ПолучитьРодителей()[0];       	
		Исключение
			Ошибка = Истина;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат СтруктураРасшифровки;

КонецФункции // ()
