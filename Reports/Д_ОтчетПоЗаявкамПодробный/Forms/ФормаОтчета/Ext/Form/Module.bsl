
&НаСервере
Процедура ЗаполнитьТаблицу(Парам)
	
	ТабДок.Очистить();
	
	Макет = Отчеты.Д_ОтчетПоЗаявкамПодробный.ПолучитьМакет("Макет");
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	//Шапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьЗаявкаБезналШапка = Макет.ПолучитьОбласть("ЗаявкаБезналШапка");
	ОбластьЗаявкаБезнал = Макет.ПолучитьОбласть("ЗаявкаБезнал");
	ОбластьИтого = Макет.ПолучитьОбласть("Итого");
	ОбластьВсего = Макет.ПолучитьОбласть("Всего");
	//ОбластьЗаявкаРасшифровка = Макет.ПолучитьОбласть("ЗаявкаРасшифровка");
	
	Дата1 = Отчет.Период.ДатаНачала;
	Дата2 = Отчет.Период.ДатаОкончания;
	
	ТабДок.Очистить();
	
	
	ОбластьЗаголовок.Параметры.Период = Отчет.Период;
	ТабДок.Вывести(ОбластьЗаголовок);
	
	СписокПредприятий = Новый Массив;
	
	Для каждого Т Из Отчет.Предприятие Цикл
		Если Т.Пометка Тогда
			СписокПредприятий.Добавить(Т.Значение);
		КонецЕсли; 
	КонецЦикла;
	
	//доступность плана для финансиста кс и снабжения
	//Если ПараметрыСеанса.ТекущийПользователь = Константы.БП_ФинансистКС.Получить() ИЛИ ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.ФинансистСнабжение Тогда
	//	ДоступностьПредприятия = Истина;
	//Иначе
		ДоступностьПредприятия = Ложь;
	//КонецЕсли; 
	
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Учетный.Счет5001());
	МассивСчетов.Добавить(ПланыСчетов.Учетный.Счет5101());
	МассивСчетов.Добавить(ПланыСчетов.Учетный.Счет5501());
	
	СтруктураБюджетов = БюджетныйНаСервере.ПолучитьВидыБюджетовНаДату(Отчет.Период.ДатаНачала);
	
	МассивСостояний = Новый Массив;
	
	Для каждого ТекСостояние Из Отчет.Состояния Цикл
		
		Если ТекСостояние.Пометка Тогда
			МассивСостояний.Добавить(ТекСостояние.Значение);		
		КонецЕсли;	
		
	КонецЦикла; 
	
	НаПроверке = Перечисления.Д_СостоянияДокументов.НаПроверке;
	
	//массив состояний оплаченных и на оплате
	//МассивСостояний3 = БПСервер.ВернутьСтадиюИсполнения();
	
	МассивСценариев = Новый Массив;
	МассивСценариев.Добавить(Справочники.СценарииПланирования.ПланПоСЗ);
	МассивСценариев.Добавить(БюджетныйНаСервере.ПолучитьАктуальныйСценарий(Отчет.Период.ДатаНачала));
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТекущаяЗаявка.СтатьяДДС,
	               |	ТекущаяЗаявка.СтатьяДДС.Код,
	               |	ЕСТЬNULL(ТекущаяЗаявка.СуммаДДС, 0) КАК СуммаДДС,
	               |	ТекущаяЗаявка.ЦФО КАК ЦФО,
	               |	ТекущаяЗаявка.Ссылка.ТипИсточника КАК ТипИсточника,
	               |	ТекущаяЗаявка.Ссылка КАК Регистратор,
	               |	ТекущаяЗаявка.Ссылка.Дата КАК ДатаЗаявки,
	               |	ТекущаяЗаявка.Основание,
	               |	ТекущаяЗаявка.Ссылка.Предприятие,
	               |	ТекущаяЗаявка.Ссылка.Представление,
	               |	ТекущаяЗаявка.Ссылка.Дата,
	               |	ТекущаяЗаявка.Ссылка.Номер,
	               |	ВЫБОР
	               |		КОГДА ВложенныйЗапрос.Ссылка.ТочкаМаршрута = ЗНАЧЕНИЕ(БизнесПроцесс.Согласование1.ТочкаМаршрута.Действие1)
	               |				ИЛИ ВложенныйЗапрос.Ссылка.ТочкаМаршрута ЕСТЬ NULL 
	               |					И НЕ Согласование1.Завершен = ИСТИНА
	               |			ТОГДА ""На подготовке""
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ВложенныйЗапрос.Ссылка.ТочкаМаршрута = ЗНАЧЕНИЕ(БизнесПроцесс.Согласование1.ТочкаМаршрута.Действие2)
	               |					ТОГДА ""На согласовании""
	               |				ИНАЧЕ ВЫБОР
	               |						КОГДА ВложенныйЗапрос.Ссылка.ТочкаМаршрута = ЗНАЧЕНИЕ(БизнесПроцесс.Согласование1.ТочкаМаршрута.Действие3)
	               |							ТОГДА ""На проверке""
	               |						ИНАЧЕ ВЫБОР
	               |								КОГДА ВложенныйЗапрос.Ссылка.ТочкаМаршрута = ЗНАЧЕНИЕ(БизнесПроцесс.Согласование1.ТочкаМаршрута.Действие5)
	               |									ТОГДА ""На исполнении""
	               |								ИНАЧЕ ВЫБОР
	               |										КОГДА Согласование1.Завершен = ИСТИНА
	               |											ТОГДА ""Исполнено""
	               |										ИНАЧЕ ""На результирующем согласовании""
	               |									КОНЕЦ
	               |							КОНЕЦ
	               |					КОНЕЦ
	               |			КОНЕЦ
	               |	КОНЕЦ КАК СостояниеДокумента,
	               |	ТекущаяЗаявка.НазначениеПлатежа,
	               |	ТекущаяЗаявка.Ссылка.ДатаОплаты,
	               |	ТекущаяЗаявка.Контрагент,
	               |	ТекущаяЗаявка.Источник,
	               |	ТекущаяЗаявка.Комментарии,
	               |	ТекущаяЗаявка.Примечание,
	               |	ТекущаяЗаявка.ОтменаОплаты,
	               |	ТекущаяЗаявка.ПлатежноеПоручение,
	               |	ТекущаяЗаявка.Подразделение,
	               |	ТекущаяЗаявка.Организация
	               |ИЗ
	               |	Документ.Д_ЗаявкаНаОплату.ЗаявкаБезнал КАК ТекущаяЗаявка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			МАКСИМУМ(Задача.Ссылка) КАК Ссылка,
	               |			Задача.Заявка КАК Заявка
	               |		ИЗ
	               |			Задача.Задача КАК Задача
	               |		ГДЕ
	               |			Задача.Выполнена = ЛОЖЬ
	               |			И Задача.ПометкаУдаления = ЛОЖЬ
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			Задача.Заявка) КАК ВложенныйЗапрос
	               |		ПО ТекущаяЗаявка.Ссылка = ВложенныйЗапрос.Заявка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.Согласование1 КАК Согласование1
	               |		ПО ТекущаяЗаявка.Ссылка = Согласование1.Заявка
	               |			И (Согласование1.ПометкаУдаления = ЛОЖЬ)
	               |ГДЕ
	               |	ТекущаяЗаявка.Ссылка.ПометкаУдаления = ЛОЖЬ
	               |	И ТекущаяЗаявка.ОтменаОплаты = ЛОЖЬ
	               |	И ВЫБОР
	               |			КОГДА ТекущаяЗаявка.Ссылка.ДатаОплаты < ТекущаяЗаявка.Ссылка.Дата
	               |				ТОГДА ТекущаяЗаявка.Ссылка.Дата
	               |			ИНАЧЕ ТекущаяЗаявка.Ссылка.ДатаОплаты
	               |		КОНЕЦ МЕЖДУ &ДатаНачала И &ДатаОкончания
	               |	И ВЫБОР
	               |			КОГДА &ДоступностьПредприятия
	               |				ТОГДА ТекущаяЗаявка.Ссылка.Предприятие В ИЕРАРХИИ (&Предприятия)
	               |			ИНАЧЕ ТекущаяЗаявка.ЦФО В ИЕРАРХИИ (&Предприятия)
	               |		КОНЕЦ
	               |	И НЕ ТекущаяЗаявка.СуммаДДС = 0
	               |	И НЕ Согласование1.Ссылка ЕСТЬ NULL 
	               |	И ВЫБОР
	               |			КОГДА &Подразделение ЕСТЬ NULL 
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ТекущаяЗаявка.Подразделение В ИЕРАРХИИ (&Подразделение)
	               |		КОНЕЦ
	               |	И ВЫБОР
	               |			КОГДА &Организация ЕСТЬ NULL 
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ТекущаяЗаявка.Организация В (&Организация)
	               |		КОНЕЦ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЦФО,
	               |	ДатаЗаявки
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	
	Запрос.УстановитьПараметр("ДатаНачала", Отчет.Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", Отчет.Период.ДатаОкончания);
	//Запрос.УстановитьПараметр("СостояниеДокумента", МассивСостояний);
	Запрос.УстановитьПараметр("Предприятия", ?(Константы.сабИспользоватьНесколькоПредприятий.Получить(), СписокПредприятий, ПараметрыСеанса.ТекущееПредприятие));
	Запрос.УстановитьПараметр("Подразделение", ?(Отчет.Подразделение.Количество(), Отчет.Подразделение.ВыгрузитьЗначения(), Null));
	Запрос.УстановитьПараметр("Организация", ?(Отчет.Организация.Количество(), Отчет.Организация.ВыгрузитьЗначения(), Null));
	//Запрос.УстановитьПараметр("СостояниеДокумента3", МассивСостояний3);
	Запрос.УстановитьПараметр("ДоступностьПредприятия", ДоступностьПредприятия);
	РезультатЗаявки = Запрос.Выполнить();
	
		
	//ОбластьЗаявкаБезналШапка.Параметры.План1 = СтруктураБюджетов.ГодовойБюджет;
	//ОбластьЗаявкаБезналШапка.Параметры.План2 = СтруктураБюджетов.КвартальныйБюджет;
	//ОбластьЗаявкаБезналШапка.Параметры.План3 = СтруктураБюджетов.МесячныйБюджет;
	//Шапка.Параметры.План4 = СтруктураБюджетов.КорректировочныйБюджет;
	
	//ТабДок.Вывести(Шапка);
	
	//ТабДок.Вывести(ОбластьЗаявкаБезналШапка);
	
	
	
	НомерСтроки = 1;
	СуммаИтого = 0;
	СуммаВсего = 0;
	
	СуммаТекВыпИтого = 0;
	СуммаТекВыпВсего = 0;
	
	СуммаФактИтого = 0;
	СуммаФактВсего = 0;
	
	
	ТабДок.Вывести(ОбластьЗаявкаБезналШапка);
	
	
	ТабДок.НачатьАвтогруппировкуСтрок();
	
	
	ТекПП = Справочники.Предприятия.ПустаяСсылка();
	
	//выводим список заявок
	ВыборкаЗаявок = РезультатЗаявки.Выбрать();
	НомерСтроки = 0; СуммаИтого = 0;
	
	Пока ВыборкаЗаявок.Следующий() Цикл
		
		Если ТекПП.Пустая() Тогда
			ТекПП = ВыборкаЗаявок.ЦФО;
		Иначе
			
			Если НЕ ТекПП = ВыборкаЗаявок.ЦФО Тогда
				ОбластьИтого.Параметры.ЦФО = ТекПП;
				ОбластьИтого.Параметры.СуммаИтого = СуммаИтого;
				СуммаИтого = 0;
				ТекПП = ВыборкаЗаявок.ЦФО;
				ТабДок.Вывести(ОбластьИтого, 1);
			КонецЕсли;
			
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		СуммаИтого = СуммаИтого + ВыборкаЗаявок.СуммаДДС;
		ОбластьЗаявкаБезнал.Параметры.Заполнить(ВыборкаЗаявок);		
		ОбластьЗаявкаБезнал.Параметры.НомерСтроки = НомерСтроки;
		
		Если ТипЗнч(ВыборкаЗаявок.ПлатежноеПоручение) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
			ОбластьЗаявкаБезнал.Параметры.ПлатежноеПоручение = ВыборкаЗаявок.ПлатежноеПоручение;
			ОбластьЗаявкаБезнал.Параметры.ДвижениеДС = "";
			ОбластьЗаявкаБезнал.Параметры.ДвижениеДС1 = "";
		Иначе
			ОбластьЗаявкаБезнал.Параметры.ДвижениеДС1 = ВыборкаЗаявок.ПлатежноеПоручение;
			ОбластьЗаявкаБезнал.Параметры.ПлатежноеПоручение = "";
			ОбластьЗаявкаБезнал.Параметры.ДвижениеДС = "";
		КонецЕсли;
		
		////расшифровка
		//СтруктураРасшифровки = Новый Структура;
		//СтруктураРасшифровки.Вставить("Регистратор", ВыборкаЗаявок.Регистратор);
		//СтруктураРасшифровки.Вставить("НаПроверке", ?(ВыборкаЗаявок.СостояниеДокумента = НаПроверке, ВыборкаЗаявок.СостояниеДокумента, Неопределено));
		//ОбластьЗаявкаРасшифровка.Параметры.РасшифровкаЗаявки = СтруктураРасшифровки;
		//
		ТабДок.Вывести(ОбластьЗаявкаБезнал, 2, , );
	КонецЦикла; 
	
	
	//
	////итого последнее ПП в списке
	//Если ВыборкаДанные.Количество() Тогда
	//	ОбластьИтого.Параметры.ИтогоЗаявлено = СуммаИтого;
	//	ОбластьИтого.Параметры.ИтогоТекВып = СуммаТекВыпИтого;
	//	ОбластьИтого.Параметры.ИтогоФакт = СуммаФактВсего;
	//	ОбластьИтого.Параметры.ЦФО = ТекПП;
	//	ТабДок.Вывести(ОбластьИтого, 0);
	//	СуммаИтого = 0;
	//	ТекПП = ВыборкаДанные.ЦФО
	//КонецЕсли;
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	
	
	//ОбластьВсего.Параметры.ВсегоЗаявлено = СуммаВсего;
	//ОбластьВсего.Параметры.ВсегоТекВып = СуммаТекВыпВсего;
	//ОбластьВсего.Параметры.ВсегоФакт = СуммаФактВсего;
	//ТабДок.Вывести(ОбластьВсего);
	
	
	
	//таблицу на экран
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Ложь;
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ФиксацияСверху = 5;
	
	Элементы.ТабДок.Видимость = Истина;
		
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	
	ЗаполнитьТаблицу(0);
	//ТабДок.Показать();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСостояния()
	
	НоваяСтрока = Отчет.Состояния.Добавить();
	НоваяСтрока.Значение = Перечисления.Д_СостоянияДокументов.НаПодготовке;
	НоваяСтрока = Отчет.Состояния.Добавить();
	НоваяСтрока.Значение = Перечисления.Д_СостоянияДокументов.НаДоработке;
	НоваяСтрока = Отчет.Состояния.Добавить();
	НоваяСтрока.Значение = Перечисления.Д_СостоянияДокументов.НаСогласовании;
	НоваяСтрока.Пометка = Истина;
	НоваяСтрока = Отчет.Состояния.Добавить();
	НоваяСтрока.Значение = Перечисления.Д_СостоянияДокументов.НаПроверке;
	НоваяСтрока.Пометка = Истина;
	НоваяСтрока = Отчет.Состояния.Добавить();
	НоваяСтрока.Значение = Перечисления.Д_СостоянияДокументов.НаИсполнении;
	НоваяСтрока.Пометка = Истина;
	НоваяСтрока = Отчет.Состояния.Добавить();
	НоваяСтрока.Значение = Перечисления.Д_СостоянияДокументов.Исполнен;
	НоваяСтрока.Пометка = Истина;
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	Если БПСервер.ПолучитьКонстантуНаСервере("сабИспользоватьНесколькоПредприятий") Тогда
		Элементы.Группа2.Видимость = Истина;
		БюджетныйНаСервере.ЗаполнитьСписокПредприятия(Отчет.Предприятие, 0);
	Иначе
		Элементы.Группа2.Видимость = Ложь;
	КонецЕсли;  
		
	//ЗаполнитьСостояния();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Сценарий1") Тогда //вызван отчет извне с параметрами
		Отчет.Сценарий1 = Параметры.Сценарий1;
		Отчет.Сценарий2 = Параметры.Сценарий2;
		Отчет.Период = Параметры.Период;
		//Элементы.Группа.Видимость = Параметры.НастройкиВидимость;
		БюджетныйНаСервере.ЗаполнитьСписокПредприятия(Отчет.Предприятие, 0);
		Отчет.Предприятие.НайтиПоЗначению(Параметры.Предприятие).Пометка = 1;
		ЗаполнитьТаблицу(0);
	КонецЕсли;
	
	МассивТиповПодр = Новый Массив;
	МассивТиповПодр.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	
	Отчет.Подразделение.ТипЗначения = Новый ОписаниеТипов(МассивТиповПодр);
	
	МассивТиповОрг = Новый Массив;
	МассивТиповОрг.Добавить(Тип("СправочникСсылка.Организации"));
	
	Отчет.Организация.ТипЗначения = Новый ОписаниеТипов(МассивТиповОрг);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьВсе(Команда)
	
	Отчет.Предприятие.ЗаполнитьПометки(1);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	Отчет.Предприятие.ЗаполнитьПометки(0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройки(Команда)
	
	Элементы.Группа.Видимость = 1 - Элементы.Группа.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабДокОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Расшифровка.Свойство("План1") Тогда
		БюджетныйНаКлиенте.РасшифроватьСумму(Элемент, Расшифровка);
		Возврат;	
	КонецЕсли; 	
	
	МассивЗаявок = Новый Массив;
	МассивЗаявок.Добавить(Расшифровка.Регистратор);
	
	Меню = Новый СписокЗначений;
	Меню.Добавить("Открыть документ");
	Меню.Добавить("Печать");
	Меню.Добавить("Отчет о выполнении бизнес-процесса");
	
	Если НЕ Расшифровка.НаПроверке = Неопределено Тогда
		Меню.Добавить("Согласовать заявку");
	КонецЕсли;
	
	Результат = ВыбратьИзМеню(Меню, Элемент);
	
	Если НЕ Результат = Неопределено Тогда
		
		Если Результат.Значение = "Открыть документ" Тогда
			ОткрытьЗначение(Расшифровка.Регистратор);		
		КонецЕсли;
		
		Если Результат.Значение = "Печать" Тогда
			БюджетныйНаКлиенте.УниверсальноеВыполнениеКоманды(МассивЗаявок, "");
		КонецЕсли;
		
		Если Результат.Значение = "Отчет о выполнении бизнес-процесса" Тогда
			ТабДок2 = Новый ТабличныйДокумент;
			ПечатьВыполнение(ТабДок2, МассивЗаявок);
			
			ТабДок2.ОтображатьСетку = Ложь;
			ТабДок2.Защита = Ложь;
			ТабДок2.ТолькоПросмотр = Ложь;
			ТабДок2.ОтображатьЗаголовки = Ложь;
			ТабДок2.Показать();		
		КонецЕсли;
		
		Если Результат.Значение = "Согласовать заявку" Тогда
			
			ТекЗадача = ПолучитьТекЗадачу(Расшифровка.Регистратор);
			
			ПараметрыФормы = ОпределитьНужнуюФорму(ТекЗадача);
			
			ИмяФормыВыполненияЗадачи = "";
			РезультатФорма = ПараметрыФормы.Свойство("ИмяФормы", ИмяФормыВыполненияЗадачи);
			
			Если РезультатФорма Тогда
				ОткрытьФорму(ИмяФормыВыполненияЗадачи, ПараметрыФормы.ПараметрыФормы);
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура Печать(ТабДок2, ПараметрКоманды)
	
	Документы.Д_ЗаявкаНаОплату.Печать(ТабДок2, ПараметрКоманды);
	
КонецПроцедуры

&НаСервере
Процедура ПечатьВыполнение(ТабДок2, ПараметрКоманды)
	
	Документы.Д_ЗаявкаНаОплату.ОтчетОВыполнении(ТабДок2, ПараметрКоманды);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекЗадачу(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Д_ЗаявкаНаОплату.Дата КАК Дата,
	|	Д_ЗаявкаНаОплату.Ссылка,
	|	Д_ЗаявкаНаОплату.Предприятие,
	|	ВЫБОР
	|		КОГДА Согласование1.Завершен = ИСТИНА
	|			ТОГДА ""Заявка оплачена""
	|		ИНАЧЕ Задача.Наименование
	|	КОНЕЦ КАК Задача,
	|	ВЫБОР
	|		КОГДА Задача.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|			ТОГДА Задача.Должность
	|		ИНАЧЕ Задача.Исполнитель
	|	КОНЕЦ КАК Исполнитель,
	|	Задача.Ссылка КАК ЗадачаСсылка
	|ИЗ
	|	Документ.Д_ЗаявкаНаОплату КАК Д_ЗаявкаНаОплату
	|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.Задача КАК Задача
	|		ПО (ВЫБОР
	|				КОГДА Задача.БизнесПроцесс.Завершен
	|					ТОГДА NULL
	|				ИНАЧЕ Д_ЗаявкаНаОплату.Ссылка = Задача.Заявка
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.Согласование1 КАК Согласование1
	|		ПО Д_ЗаявкаНаОплату.Ссылка = Согласование1.Заявка
	|ГДЕ
	|	Д_ЗаявкаНаОплату.Ссылка = &Ссылка
	|	И ВЫБОР
	|			КОГДА Задача.Ссылка ЕСТЬ NULL 
	|					ИЛИ Согласование1.Завершен = ИСТИНА
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ Задача.Выполнена = ЛОЖЬ
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.ЗадачаСсылка;	
		
	КонецЕсли;
	
	Возврат Задачи.Задача.ПустаяСсылка();
	
КонецФункции // ()


&НаСервере
Функция ОпределитьНужнуюФорму(ЗадачаСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.БизнесПроцесс,
	|	Таблица.ТочкаМаршрута,
	|	Таблица.Должность,
	|	Таблица.Исполнитель
	|ИЗ
	|	Задача.Задача КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ЗадачаСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Реквизиты = Новый Структура("БизнесПроцесс,ТочкаМаршрута");
	ЗаполнитьЗначенияСвойств(Реквизиты, Выборка);
	
	Если Реквизиты.БизнесПроцесс = Неопределено ИЛИ Реквизиты.БизнесПроцесс.Пустая() Тогда
		Возврат Новый Структура();
	КонецЕсли;
	
	ТипБизнесПроцесса = Метаданные.НайтиПоТипу(ТипЗнч(Реквизиты.БизнесПроцесс));
	
	ПараметрыФормы = БизнесПроцессы[ТипБизнесПроцесса.Имя].ФормаВыполненияЗадачи(ЗадачаСсылка,
	Реквизиты.ТочкаМаршрута, Выборка);
	
	Возврат ПараметрыФормы;
	
КонецФункции


