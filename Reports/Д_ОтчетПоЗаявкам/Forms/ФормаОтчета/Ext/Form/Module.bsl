&НаКлиенте
Процедура Сформировать(Команда) Экспорт
	
	ЭтаФорма.СкомпоноватьРезультат();
	Отчет.ТабДок.Область("C5:C7").Сгруппировать("План подробно", РасположениеЗаголовкаГруппировкиТабличногоДокумента.Начало);
	Отчет.ТабДок.Область("C10:C11").Сгруппировать("Факт заявок подробно");
	Отчет.ТабДок.ПоказатьУровеньГруппировокКолонок(0);
	
КонецПроцедуры

 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//ВидимостьСпискаПредприятий = ?(БюджетныйНаСервере.ПолучитьПредприятия().Количество() > 1, 1, 0);
	//Элементы.Группа2.Видимость = ВидимостьСпискаПредприятий;
	//
	//БюджетныйНаСервере.ЗаполнитьСписокПредприятия(Отчет.Предприятие, 0, Истина);
	//
	//ЗаполнитьСостояния();
	//ЗаполнитьПодразделения();
	//Элементы.Подразделения.Видимость = БПСервер.ЕстьУчетПоПодразделениям();
	//Элементы.Группа9.Видимость = БПСервер.ЕстьУчетПоПодразделениям();
КонецПроцедуры


&НаСервере
Процедура ПараметрыРасшифровкиФакта(Расшифровка, РезультатОтчет)

	
	СхемаКомпоновкиДанных = Документы.Д_ЗаявкаНаОплату.ПолучитьМакет("РасшифровкаФакта");
	
	//Из схемы возьмем настройки по умолчанию
    Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	Настройки.ПараметрыДанных.Элементы[0].Значение.ДатаНачала = Расшифровка.Дата1;
	Настройки.ПараметрыДанных.Элементы[0].Значение.ДатаОкончания = Расшифровка.Дата2;
	Настройки.ПараметрыДанных.Элементы[1].Значение = Расшифровка.ЦФО;
	Настройки.ПараметрыДанных.Элементы[2].Значение = Расшифровка.Подразделение;
	Настройки.ПараметрыДанных.Элементы[3].Значение = Расшифровка.СтатьяДДС;
	Настройки.ПараметрыДанных.Элементы[4].Значение = Расшифровка.ИнвПроект;
	

	//Помещаем в переменную данные о расшифровке данных
	//ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	//Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

    //Передаем в макет компоновки схему, настройки и данные расшифровки
    МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
    Настройки,);

    //Выполним компоновку с помощью процессора компоновки
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,
    ,Истина);
	
	//Очищаем поле табличного документа
	РезультатОтчет.Очистить();
	
	//Выводим результат в табличный документ
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессорВывода.УстановитьДокумент(РезультатОтчет);

    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	
	
	
	
	
КонецПроцедуры

&НаСервере
Процедура ПараметрыРасшифровкиПлана(Расшифровка, РезультатОтчет)
	

	
	//СхемаКомпоновкиДанных = РеквизитФормыВЗначение("Отчет").ПолучитьМакет("РасшифровкаПлана");   //Русаков
	СхемаКомпоновкиДанных = Документы.Д_ЗаявкаНаОплату.ПолучитьМакет("РасшифровкаПлана");

	
	//Из схемы возьмем настройки по умолчанию
    Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	Настройки.ПараметрыДанных.Элементы[0].Значение.ДатаНачала = Расшифровка.Дата1;
	Настройки.ПараметрыДанных.Элементы[0].Значение.ДатаОкончания = Расшифровка.Дата2;
	Настройки.ПараметрыДанных.Элементы[1].Значение = Расшифровка.СтатьяДДС;
	Настройки.ПараметрыДанных.Элементы[2].Значение = Расшифровка.ЦФО;
	Настройки.ПараметрыДанных.Элементы[3].Значение = Расшифровка.Подразделение;
	Настройки.ПараметрыДанных.Элементы[4].Значение = Расшифровка.ИнвПроект;
	
	//Помещаем в переменную данные о расшифровке данных
	//ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	//Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

    //Передаем в макет компоновки схему, настройки и данные расшифровки
    МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
    Настройки,);

    //Выполним компоновку с помощью процессора компоновки
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,
    ,Истина);
	
	//Очищаем поле табличного документа
	РезультатОтчет.Очистить();
	
	//Выводим результат в табличный документ
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессорВывода.УстановитьДокумент(РезультатОтчет);

    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	
	
	
	
	
КонецПроцедуры



&НаКлиенте
Процедура ТабДокОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Расшифровка.Свойство("Признак") Тогда
				Тд = Новый ТабличныйДокумент;
		Если Расшифровка.Признак = "План" Тогда
			ПараметрыРасшифровкиПлана(Расшифровка, Тд);
		Иначе
			ПараметрыРасшифровкиФакта(Расшифровка, Тд);
		КонецЕсли;
		Тд.Защита = Истина;
		Тд.ОтображатьСетку = Ложь;
		Тд.ТолькоПросмотр = Истина;
		Тд.Показать();

		Возврат;	
	КонецЕсли; 	
	
	МассивЗаявок = Новый Массив;
	МассивЗаявок.Добавить(Расшифровка.Регистратор);
	
	Меню = Новый СписокЗначений;
	Меню.Добавить("Открыть документ");
	Меню.Добавить("Печать");
	Меню.Добавить("Отчет о выполнении бизнес-процесса");
	Результат = Неопределено;

	ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ТабДокОбработкаРасшифровкиЗавершение", ЭтаФорма, Новый Структура("МассивЗаявок, Расшифровка", МассивЗаявок, Расшифровка)), Меню, Элемент);	
	
КонецПроцедуры

&НаКлиенте
Процедура ТабДокОбработкаРасшифровкиЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	МассивЗаявок = ДополнительныеПараметры.МассивЗаявок;
	Расшифровка = ДополнительныеПараметры.Расшифровка;
	
	//Если НЕ Расшифровка.НаПроверке = Неопределено Тогда
	//	Меню.Добавить("Согласовать заявку");
	//КонецЕсли;
	
	Результат = ВыбранныйЭлемент;
	
	Если НЕ Результат = Неопределено Тогда
		
		Если Результат.Значение = "Открыть документ" Тогда
			ПоказатьЗначение(Новый ОписаниеОповещения("ТабДокОткрытьЗначениеЗавершение", ЭтаФорма, Новый Структура("МассивЗаявок, Расшифровка, Результат", МассивЗаявок, Расшифровка, Результат)), Расшифровка.Регистратор);
            Возврат;		
		КонецЕсли;
		
		ТабДокОбработкаРасшифровкиЗавершениеФрагмент(МассивЗаявок, Расшифровка, Результат);	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТабДокОткрытьЗначениеЗавершение(ДополнительныеПараметры1) Экспорт
	
	МассивЗаявок = ДополнительныеПараметры1.МассивЗаявок;
	Расшифровка = ДополнительныеПараметры1.Расшифровка;
	Результат = ДополнительныеПараметры1.Результат;
	
	ТабДокОбработкаРасшифровкиЗавершениеФрагмент(МассивЗаявок, Расшифровка, Результат);

КонецПроцедуры

&НаКлиенте
Процедура ТабДокОбработкаРасшифровкиЗавершениеФрагмент(МассивЗаявок, Знач Расшифровка, Знач Результат)
	
	Перем ИмяФормыВыполненияЗадачи, ПараметрыФормы, РезультатФорма, ТекЗадача;
	
	Если Результат.Значение = "Печать" Тогда
		БюджетныйНаКлиенте.УниверсальноеВыполнениеКоманды(МассивЗаявок, "");
	КонецЕсли;
	
	Если Результат.Значение = "Отчет о выполнении бизнес-процесса" Тогда
		Отчет.ТабДок2 = Новый ТабличныйДокумент;
		ПечатьВыполнение(Отчет.ТабДок2, МассивЗаявок);
		
		Отчет.ТабДок2.ОтображатьСетку = Ложь;
		Отчет.ТабДок2.Защита = Ложь;
		Отчет.ТабДок2.ТолькоПросмотр = Ложь;
		Отчет.ТабДок2.ОтображатьЗаголовки = Ложь;
		Отчет.ТабДок2.Показать();		
	КонецЕсли;
	
	Если Результат.Значение = "Согласовать заявку" Тогда
		
		ТекЗадача = ПолучитьТекЗадачу(Расшифровка.Регистратор);
		
		ПараметрыФормы = ОпределитьНужнуюФорму(ТекЗадача);
		
		ИмяФормыВыполненияЗадачи = "";
		РезультатФорма = ПараметрыФормы.Свойство("ИмяФормы", ИмяФормыВыполненияЗадачи);
		Если РезультатФорма Тогда
			
			ОткрытьФорму(ИмяФормыВыполненияЗадачи, ПараметрыФормы.ПараметрыФормы);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура Печать(ТабДок2, ПараметрКоманды)
	Документы.Д_ЗаявкаНаОплату.Печать(Отчет.ТабДок2, ПараметрКоманды);
КонецПроцедуры

&НаСервере
Процедура ПечатьВыполнение(ТабДок2, ПараметрКоманды)
	Документы.Д_ЗаявкаНаОплату.ОтчетОВыполнении(Отчет.ТабДок2, ПараметрКоманды);
КонецПроцедуры

&НаСервере
Функция ПолучитьТекЗадачу(Ссылка)
	
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
               |	Д_ЗаявкаНаОплату.Дата КАК Дата,
               |	Д_ЗаявкаНаОплату.Ссылка,
               |	Д_ЗаявкаНаОплату.Предприятие,
               |	ВЫБОР
               |		КОГДА Согласование1.Завершен = ИСТИНА
               |			ТОГДА ""Заявка оплачена""
               |		ИНАЧЕ Задача.Наименование
               |	КОНЕЦ КАК Задача,
               |	ВЫБОР
               |		КОГДА Задача.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
               |			ТОГДА Задача.Должность
               |		ИНАЧЕ Задача.Исполнитель
               |	КОНЕЦ КАК Исполнитель,
               |	Задача.Ссылка КАК ЗадачаСсылка
               |ИЗ
               |	Документ.Д_ЗаявкаНаОплату КАК Д_ЗаявкаНаОплату
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Задача КАК Задача
               |		ПО (ВЫБОР
               |				КОГДА Задача.БизнесПроцесс.Завершен
               |					ТОГДА NULL
               |				ИНАЧЕ Д_ЗаявкаНаОплату.Ссылка = Задача.Заявка
               |			КОНЕЦ)
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Согласование1 КАК Согласование1
               |		ПО Д_ЗаявкаНаОплату.Ссылка = Согласование1.Заявка
               |ГДЕ
               |	Д_ЗаявкаНаОплату.Ссылка = &Ссылка
               |	И ВЫБОР
               |			КОГДА Задача.Ссылка ЕСТЬ NULL 
               |					ИЛИ Согласование1.Завершен = ИСТИНА
               |				ТОГДА ИСТИНА
               |			ИНАЧЕ Задача.Выполнена = ЛОЖЬ
               |		КОНЕЦ";

Запрос.УстановитьПараметр("Ссылка", Ссылка);

Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();

Если Выборка.Следующий() Тогда

	Возврат Выборка.ЗадачаСсылка;	

КонецЕсли;

Возврат Задачи.Задача.ПустаяСсылка();

КонецФункции // ()
 

&НаСервере
Функция ОпределитьНужнуюФорму(ЗадачаСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Таблица.БизнесПроцесс,
		|	Таблица.ТочкаМаршрута,
		|	Таблица.Должность,
		|	Таблица.Исполнитель
		|ИЗ
		|	Справочник.Задача КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ЗадачаСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Реквизиты = Новый Структура("БизнесПроцесс,ТочкаМаршрута");
	ЗаполнитьЗначенияСвойств(Реквизиты, Выборка);
	
	Если Реквизиты.БизнесПроцесс = Неопределено ИЛИ Реквизиты.БизнесПроцесс.Пустая() Тогда
		Возврат Новый Структура();
	КонецЕсли;
	
	ТипБизнесПроцесса = Метаданные.НайтиПоТипу(ТипЗнч(Реквизиты.БизнесПроцесс));
		
	ПараметрыФормы = БизнесПроцессы[ТипБизнесПроцесса.Имя].ФормаВыполненияЗадачи(ЗадачаСсылка,
		Реквизиты.ТочкаМаршрута, Выборка);
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура ПредприятиеПриАктивизацииСтроки(Элемент)
	Стр = Новый ФиксированнаяСтруктура(Новый Структура("Предпр", Отчет.Предприятие[Элементы.Предприятие.ТекущаяСтрока].Значение));
	Элементы.Подразделения.ОтборСтрок = Стр;
КонецПроцедуры

&НаКлиенте
Процедура Сумма(Команда)
	БюджетныйНаКлиенте.КопироватьВБуфер(ИтогоСумма);
КонецПроцедуры

&НаКлиенте
Процедура ТабДокПриАктивизацииОбласти(Элемент)
		ИтогоСумма = Формат(БюджетныйНаКлиенте.Просуммировать(Отчет.ТабДок), "ЧДЦ=2");
КонецПроцедуры
