Перем НаборПоказателей Экспорт;
Перем ВысотаШапки;

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Возврат Новый Структура("ИспользоватьПередКомпоновкойМакета,
							|ИспользоватьПослеКомпоновкиМакета,
							|ИспользоватьПослеВыводаРезультата,
							|ИспользоватьДанныеРасшифровки",
							Истина, Истина, Истина, Истина);
							
КонецФункции

Функция ПолучитьТекстЗаголовка(ОрганизацияВНачале = Истина, ОбъектОтчет) Экспорт 
	
	ЭквВалюта = ?(ЗначениеЗаполнено(ОбъектОтчет.ЭквивалентнаяВалюта), ОбъектОтчет.ЭквивалентнаяВалюта, УЧ_Сервер.НациональнаяВалюта());
	
	Возврат "Анализ счета " + Счет + СтандартныеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ОбъектОтчет.НачалоПериода, ОбъектОтчет.КонецПериода)+ "
	|Валюта: " + ЭквВалюта;
	
КонецФункции

Процедура СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, Схема = Неопределено, ВыводитьПолностью = Истина) Экспорт
	
	УправленческийУчетПовтИсп.ВывестиОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, Схема, ВыводитьПолностью); 
	
КонецПроцедуры

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(Схема, ОбъектОтчет) Экспорт
	
	//ТекНастройки = ОбъектОтчет.КомпоновщикНастроек;
	//
	//Если ТипЗнч(ОбъектОтчет) = Тип("Структура") Тогда
	//	КомпоновщикНастроекПроизвольный = Новый КомпоновщикНастроекКомпоновкиДанных;
	//	КомпоновщикНастроекПроизвольный.ЗагрузитьНастройки(ТекНастройки);
	//Иначе	
		КомпоновщикНастроекПроизвольный = ОбъектОтчет.КомпоновщикНастроек;
	//КонецЕсли; 
	
	
	//КомпоновщикНастроекПроизвольный.Настройки.Структура.Очистить();
	//КомпоновщикНастроекПроизвольный.Настройки.Выбор.Элементы.Очистить();
	
	СтандартныеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроекПроизвольный, "Счет"         , ОбъектОтчет.Счет);
	СтандартныеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроекПроизвольный, "Периодичность", ОбъектОтчет.Периодичность);
	СтандартныеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроекПроизвольный, "ЭквивалентнаяВалюта", ?(ЗначениеЗаполнено(ОбъектОтчет.ЭквивалентнаяВалюта), ОбъектОтчет.ЭквивалентнаяВалюта, УЧ_Сервер.НациональнаяВалюта()));
	
	ДатаКон = ?(ЗначениеЗаполнено(ОбъектОтчет.КонецПериода), ОбъектОтчет.КонецПериода, ТекущаяДата());
	СтандартныеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроекПроизвольный, "ДатаКурса", ДатаКон);
	
	Если ЗначениеЗаполнено(ОбъектОтчет.НачалоПериода) Тогда
		СтандартныеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроекПроизвольный, "НачалоПериода", НачалоДня(ОбъектОтчет.НачалоПериода));
	КонецЕсли;
	Если ЗначениеЗаполнено(ОбъектОтчет.КонецПериода) Тогда
		СтандартныеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроекПроизвольный, "КонецПериода", КонецДня(ОбъектОтчет.КонецПериода));
		СтандартныеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроекПроизвольный, "ПараметрПериод", КонецДня(ОбъектОтчет.КонецПериода));
	Иначе
		СтандартныеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроекПроизвольный, "ПараметрПериод", КонецДня(ТекущаяДата()));
	КонецЕсли;
	Если ЗначениеЗаполнено(ОбъектОтчет.Организация) Тогда
		СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(КомпоновщикНастроекПроизвольный, "Организация", ОбъектОтчет.Организация,,, Истина);
	КонецЕсли;
	Если ЗначениеЗаполнено(ОбъектОтчет.СценарийПлана) Тогда
		СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(КомпоновщикНастроекПроизвольный, "СценарийПлана", ОбъектОтчет.СценарийПлана,,, Истина);
	КонецЕсли;

	Если ЗначениеЗаполнено(ОбъектОтчет.Подразделение) Тогда
		СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(КомпоновщикНастроекПроизвольный, "Подразделение", ОбъектОтчет.Подразделение,,, Истина);
	КонецЕсли;
		
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("БУ");
	//МассивПоказателей.Добавить("НУ");
	//МассивПоказателей.Добавить("ПР");
	//МассивПоказателей.Добавить("ВР");
	//МассивПоказателей.Добавить("Контроль");
	МассивПоказателей.Добавить("ВалютнаяСумма");
	МассивПоказателей.Добавить("Количество");
	МассивПоказателей.Добавить("Крахмал");
		
	КоличествоПоказателей = УправленческийУчетПовтИсп.КоличествоПоказателей(ОбъектОтчет);
	
	Если КоличествоПоказателей > 1 Тогда
		//Если ТипЗнч(ОбъектОтчет) = Тип("Структура") Тогда
		//	ГруппаПоказатели = ОбъектОтчет.КомпоновщикНастройкиВыбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		//Иначе	
			ГруппаПоказатели = КомпоновщикНастроекПроизвольный.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		//КонецЕсли; 
		ГруппаПоказатели.Заголовок     = "Показатели";
		ГруппаПоказатели.Использование = Истина;
		ГруппаПоказатели.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		
		Для Индекс = 1 По 3 Цикл
			Если Индекс = 1 Тогда
					ЗначениеПодстановки = "НачальныйОстаток";
				ИначеЕсли Индекс = 2 Тогда 
					ЗначениеПодстановки = "Оборот";
				Иначе
					ЗначениеПодстановки = "КонечныйОстаток";
				КонецЕсли;
			Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
				Если ОбъектОтчет["Показатель" + ?(ТипЗнч(ИмяПоказателя) = Тип("КлючИЗначение"), ИмяПоказателя.Ключ, ИмяПоказателя)] Тогда 
					СтандартныеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаПоказатели, "Показатели." + ИмяПоказателя + ЗначениеПодстановки);
				КонецЕсли;
			КонецЦикла;	
		КонецЦикла;
	КонецЕсли;
	
	//Если ТипЗнч(ОбъектОтчет) = Тип("Структура") Тогда
	//	ГруппаДт = ОбъектОтчет.КомпоновщикНастройкиВыбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"))
	//Иначе
		ГруппаДт = КомпоновщикНастроекПроизвольный.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	//КонецЕсли;
	ГруппаДт.Заголовок     = "Дебет";
	ГруппаДт.Использование = Истина;
	ГруппаДт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	//Если ТипЗнч(ОбъектОтчет) = Тип("Структура") Тогда
	//	ГруппаКт = ОбъектОтчет.КомпоновщикНастройкиВыбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"))
	//Иначе
		ГруппаКт = КомпоновщикНастроекПроизвольный.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	//КонецЕсли;
	ГруппаКт.Заголовок     = "Кредит";
	ГруппаКт.Использование = Истина;
	ГруппаКт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;	
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("БУ");
	//МассивПоказателей.Добавить("НУ");
	//МассивПоказателей.Добавить("ПР");
	//МассивПоказателей.Добавить("ВР");	
	
	МассивПоказателейДоп = Новый Массив;
	//МассивПоказателейДоп.Добавить("Контроль");
	МассивПоказателейДоп.Добавить("ВалютнаяСумма");
	МассивПоказателейДоп.Добавить("Количество");
	МассивПоказателейДоп.Добавить("Крахмал");
	
	ВидОстатков = ?(ОбъектОтчет.РазвернутоеСальдо, "Развернутый", "");
	
	Для Каждого ИмяПоказателия Из МассивПоказателей Цикл
		Если ОбъектОтчет["Показатель" + ИмяПоказателия] Тогда 
			СтандартныеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаДт, "СальдоНаНачалоПериода." + ИмяПоказателия + "Начальный" + ВидОстатков + "ОстатокДт");
			СтандартныеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаКт, "СальдоНаНачалоПериода." + ИмяПоказателия + "Начальный" + ВидОстатков + "ОстатокКт");
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИмяПоказателия Из МассивПоказателейДоп Цикл
		Если ОбъектОтчет["Показатель" + ИмяПоказателия] Тогда 
			СтандартныеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаДт, "СальдоНаНачалоПериода." + ИмяПоказателия + "НачальныйОстатокДт");
			СтандартныеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаКт, "СальдоНаНачалоПериода." + ИмяПоказателия + "НачальныйОстатокКт");
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИмяПоказателия Из МассивПоказателей Цикл
		Если ОбъектОтчет["Показатель" + ИмяПоказателия] Тогда 
			СтандартныеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаДт,        "ОборотыЗаПериод."       + ИмяПоказателия + "ОборотДт");
			СтандартныеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаКт,        "ОборотыЗаПериод."       + ИмяПоказателия + "ОборотКт");
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИмяПоказателия Из МассивПоказателейДоп Цикл
		Если ОбъектОтчет["Показатель" + ИмяПоказателия] Тогда 
			СтандартныеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаДт,        "ОборотыЗаПериод."       + ИмяПоказателия + "ОборотДт");
			СтандартныеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаКт,        "ОборотыЗаПериод."       + ИмяПоказателия + "ОборотКт");
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИмяПоказателия Из МассивПоказателей Цикл
		Если ОбъектОтчет["Показатель" + ИмяПоказателия] Тогда 
			СтандартныеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаДт,  "СальдоНаКонецПериода."  + ИмяПоказателия + "Конечный"  + ВидОстатков + "ОстатокДт");
			СтандартныеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаКт,  "СальдоНаКонецПериода."  + ИмяПоказателия + "Конечный"  + ВидОстатков + "ОстатокКт");
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИмяПоказателия Из МассивПоказателейДоп Цикл
		Если ОбъектОтчет["Показатель" + ИмяПоказателия] Тогда 
			СтандартныеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаДт,  "СальдоНаКонецПериода."  + ИмяПоказателия + "КонечныйОстатокДт");
			СтандартныеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаКт,  "СальдоНаКонецПериода."  + ИмяПоказателия + "КонечныйОстатокКт");
		КонецЕсли;
	КонецЦикла;
	
	// Дополнительные данные	
	//наименование к счету
	НайденныеДопПоляНаименоваиня = ОбъектОтчет.ДополнительныеПоля.НайтиСтроки(Новый Структура("Поле", "Кор. Счет.Наименование"));
	Если НЕ НайденныеДопПоляНаименоваиня.Количество() Тогда
		НоваяСтрока = ОбъектОтчет.ДополнительныеПоля.Добавить();
		НоваяСтрока.Поле = "Кор. Счет.Наименование";
		НоваяСтрока.Использование = Истина;
		ОбъектОтчет.РазмещениеДополнительныхПолей = 1;
	Иначе
		НайденныеДопПоляНаименоваиня[0].Использование = Истина;
		ОбъектОтчет.РазмещениеДополнительныхПолей = 1;
	КонецЕсли;

	УправленческийУчетПовтИсп.ДобавитьДополнительныеПоля(ОбъектОтчет);
  
	Структура = КомпоновщикНастроекПроизвольный.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		
	ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Использование  = Истина;
	ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Счет");
	ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
	Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных")); 
	СтандартныеОтчетыКлиентСервер.УстановитьПараметрВывода(Структура, "РасположениеГруппировки", РасположениеГруппировкиКомпоновкиДанных.НачалоИКонец); 
	
	Если Не ОбъектОтчет.ПоСубсчетам Тогда
		ЗначениеОтбора = СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(Структура.Отбор, "SystemFields.LevelInGroup", 1);
		ЗначениеОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Иерархия;
		
		СтандартныеОтчетыКлиентСервер.УстановитьПараметрВывода(Структура, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	КонецЕсли;
	
	Для Каждого ПолеВыбраннойГруппировки Из ОбъектОтчет.Группировка Цикл 
		Если ПолеВыбраннойГруппировки.Использование Тогда
			Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			
			ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
			
			Если ПолеВыбраннойГруппировки.ТипГруппировки = 1 Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
			ИначеЕсли ПолеВыбраннойГруппировки.ТипГруппировки = 2 Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
			Иначе
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			КонецЕсли;
			
			Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			СтандартныеОтчетыКлиентСервер.УстановитьПараметрВывода(Структура, "РасположениеГруппировки", РасположениеГруппировкиКомпоновкиДанных.НачалоИКонец);
		КонецЕсли;
	КонецЦикла;
	
	// Период
	УправленческийУчетПовтИсп.ДобавитьГруппировкуПоПериоду(ОбъектОтчет, Структура);
	СтандартныеОтчетыКлиентСервер.УстановитьПараметрВывода(Структура, "РасположениеГруппировки", РасположениеГруппировкиКомпоновкиДанных.НачалоИКонец);
	
	// Валюта
	Если ОбъектОтчет.ПоказательВалютнаяСумма Тогда
		Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование  = Истина;
		ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Валюта");		
		Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));	
		СтандартныеОтчетыКлиентСервер.УстановитьПараметрВывода(Структура, "РасположениеГруппировки", РасположениеГруппировкиКомпоновкиДанных.НачалоИКонец);
	КонецЕсли;
	
	// Кор счет
	Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Использование  = Истина;
	ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("КорСчет");	
	ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
	Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));	
	СтандартныеОтчетыКлиентСервер.УстановитьПараметрВывода(Структура, "ВыводитьОтбор"               , ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	СтандартныеОтчетыКлиентСервер.УстановитьПараметрВывода(Структура, "РасположениеПолейГруппировки", РасположениеПолейГруппировкиКомпоновкиДанных.ОтдельноИТолькоВИтогах); 
	
	Если Не ОбъектОтчет.ПоСубсчетамКорСчетов Тогда
		// Установка отбора на выводимый уровень иерархии счета
		ГруппаЭлементовОтбора = Структура.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаЭлементовОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Иерархия;
		ГруппаЭлементовОтбора.ТипГруппы  = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаЭлементовОтбора, "СистемныеПоля.УровеньВГруппировке", 1);
		СписокСчетовПоСубсчетам = УправленческийУчетПовтИсп.ПолучитьСписокСчетовПоСубсчетам(ОбъектОтчет.ГруппировкаКор);;
		СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаЭлементовОтбора, "КорСчет", СписокСчетовПоСубсчетам, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии, СписокСчетовПоСубсчетам.Количество() > 0);
	КонецЕсли;
	
	//КорСубконто 
	КоличествоКорГруппировок = 0;
	Для Каждого СтрокаГруппировки Из ОбъектОтчет.ГруппировкаКор Цикл
		Если СтрокаГруппировки.Использование Тогда
			КоличествоКорСубконто = СтрЧислоВхождений(СтрокаГруппировки.ПоСубконто, "+");
			КоличествоКорГруппировок = Макс(КоличествоКорГруппировок, КоличествоКорСубконто);
		КонецЕсли;
	КонецЦикла;
	
	Для Индекс = 1 По КоличествоКорГруппировок Цикл 
		Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование  = Истина;
		ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("КорСубконто" + Индекс);		
		Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));	
	КонецЦикла;
	
	УправленческийУчетПовтИсп.ДобавитьОтборПоОрганизации(ОбъектОтчет);
	УправленческийУчетПовтИсп.ДобавитьОтборДляПоказателяКонтроль(ОбъектОтчет);
	
	Если ТипЗнч(ОбъектОтчет) = Тип("Структура") Тогда
		ОбъектОтчет.КомпоновщикНастроек = КомпоновщикНастроекПроизвольный;
	КонецЕсли; 	
	
КонецПроцедуры

Процедура ПослеКомпоновкиМакета(МакетКомпоновки, ОбъектОтчет) Экспорт
		
	КорСчетаВсе = Новый СписокЗначений;
	
	// Корректировка запроса для группировка по кор. счетам
	ИсходныйТекстЗапроса = МакетКомпоновки.НаборыДанных.НаборДанных1.Элементы.Обороты.Запрос;
	КонечныйТекстЗапроса = "";
	ЗавершающаяЧастьЗапроса = ") КАК УчетныйОбороты";
	ДляПоискаПозиции = ") КАК УчетныйОбороты";
	
	//ЗавершающаяЧастьЗапроса = ") КАК УчетныйОбороты
	//	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КроссКурсыВалют.СрезПоследних(&П2, Валюта2 = &ЭквивалентнаяВалюта) КАК КроссКурсыВалютСрезПоследних
	//	|ПО УчетныйОбороты.Предприятия.ОсновнаяВалютаУчета = КроссКурсыВалютСрезПоследних.Валюта1
	//	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&П2, ) КАК КурсыВалютСрезПоследних
	//	|ПО УчетныйОбороты.Предприятия.ОсновнаяВалютаУчета = КурсыВалютСрезПоследних.Валюта,
	//|РегистрСведений.КурсыВалют.СрезПоследних(&П2, Валюта = &ЭквивалентнаяВалюта) КАК КурсыЭквивалентнойВалюты";
	
	ПозицияКорсчета = Найти(ИсходныйТекстЗапроса, ", " + ДляПоискаПозиции);//Найти(ИсходныйТекстЗапроса, ", " + ЗавершающаяЧастьЗапроса);//
	ПостояннаяЧастьЗапроса = Лев(ИсходныйТекстЗапроса, ПозицияКорСчета - 1);
	ЗавершающаяЧастьЗапроса = Сред(ИсходныйТекстЗапроса, ПозицияКорСчета + 1);
	
	// Поиск условия по кор. счету
	Индекс = СтрДлина(ПостояннаяЧастьЗапроса);
	Символ = Сред(ПостояннаяЧастьЗапроса, Индекс, 1); 
	УсловиеКорСчета = "";
	Пока Индекс > 0 Цикл
		Индекс = Индекс - 1;
		Символ = Сред(ПостояннаяЧастьЗапроса, Индекс, 1);		
		Если Символ = "," Тогда
			УсловиеКорСчета = Сред(ПостояннаяЧастьЗапроса, Индекс + 1);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Формируем запрос-объединение для детализации корсчетов
	Индекс = 1;
	Для Каждого СтрокаТаблицы Из ОбъектОтчет.ГруппировкаКор Цикл 
		Если СтрокаТаблицы.Использование И ЗначениеЗаполнено(СтрокаТаблицы.Счет) Тогда
			КорСчетаВсе.Добавить(СтрокаТаблицы.Счет);
			
			Если Не ПустаяСтрока(УсловиеКорСчета) Тогда
				ТекстУсловияКорСчета = " И КорСчет В ИЕРАРХИИ(&КорСчет" + Индекс + ")";
			Иначе
				ТекстУсловияКорСчета = " КорСчет В ИЕРАРХИИ(&КорСчет" + Индекс + ")";
			КонецЕсли;
			
			//Добавим значение корсчета
			НовоеЗначение = МакетКомпоновки.ЗначенияПараметров.Добавить();
			НовоеЗначение.Имя = "КорСчет" + Индекс;
			НовоеЗначение.Значение = СтрокаТаблицы.Счет;
						
			//Добавим значение корсубконто
			СписокКорСубконто = Новый СписокЗначений;
			
			ЕстьПодразделение = Ложь;
			
			ДанныеСчета = УправленческийУчетПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.Счет);
			СписокВидовСубконто = Новый СписокЗначений;
			КоличествоСубконто = СтрДлина(СтрокаТаблицы.ПоСубконто) / 2;
			Для ИндексСубконто = 1 По КоличествоСубконто Цикл
				СписокВидовСубконто.Добавить(ДанныеСчета["ВидСубконто" + Сред(СтрокаТаблицы.ПоСубконто, ИндексСубконто*2, 1)], ДанныеСчета["ВидСубконто" + Сред(СтрокаТаблицы.ПоСубконто, ИндексСубконто*2, 1) + "Наименование"], ?(Сред(СтрокаТаблицы.ПоСубконто, ИндексСубконто * 2 - 1, 1) = "+", Истина, Ложь));
			КонецЦикла;
			
			ПромежуточныйТекстЗапроса = ПостояннаяЧастьЗапроса;
			ЗавершающаяЧастьЗапроса = Сред(ИсходныйТекстЗапроса, ПозицияКорСчета + 1);
			
			ТекИндексСубконто = 1;
			РеалИндекс = 1;
			СоответствиеСКорСубконто = Новый Соответствие;
			Для Каждого ВидКорСубконто Из СписокВидовСубконто Цикл
				Если ВидКорСубконто.Пометка И ТипЗнч(ВидКорСубконто.Значение) = Тип("ПланВидовХарактеристикСсылка.ВидыСубконто") Тогда
					СписокКорСубконто.Добавить(ВидКорСубконто.Значение);
					СоответствиеСКорСубконто.Вставить("УчетныйОбороты.КорСубконто" + РеалИндекс, "УчетныйОбороты.КорСубконто" + ТекИндексСубконто);
					РеалИндекс = РеалИндекс + 1;
				Иначе
					ЕстьПодразделение = Истина;
				КонецЕсли;
				ТекИндексСубконто = ТекИндексСубконто + 1;
			КонецЦикла;
			
			Для ТекРеал = РеалИндекс По 3 Цикл
				СоответствиеСКорСубконто.Вставить("УчетныйОбороты.КорСубконто" + ТекРеал, "NULL");			
			КонецЦикла; 
			
			НовоеЗначение = МакетКомпоновки.ЗначенияПараметров.Добавить();
			НовоеЗначение.Имя = "КорСубконто" + Индекс;
			НовоеЗначение.Значение = СписокКорСубконто;			
			
			Если СписокКорСубконто.Количество() = 0 Тогда 
				ТекстУсловияКорСубконто = "";                 
				НачальныйИндексКор = 0;
			Иначе
				ТекстУсловияКорСубконто = "";
				//ТекстУсловияКорСубконто = "&КорСубконто" + Индекс;
				НачальныйИндексКор = СписокКорСубконто.Количество();
			КонецЕсли;
			
			//Для ИндексКор = НачальныйИндексКор + 1 По 3 Цикл
			//	НачалоСтроки = Найти(ПромежуточныйТекстЗапроса, "УчетныйОбороты.КорСубконто" + ИндексКор);
			//	Пока НачалоСтроки <> 0 Цикл
			//		ВременныйТекст = Сред(ПромежуточныйТекстЗапроса, НачалоСтроки);
			//		КонецСтроки = Найти(ВременныйТекст, " КАК ");
			//		СтрокаЗамены = Сред(ВременныйТекст, 1, КонецСтроки - 1) + " КАК "; 
			//		ПромежуточныйТекстЗапроса = СтрЗаменить(ПромежуточныйТекстЗапроса, СтрокаЗамены, "NULL КАК ");
			//		НачалоСтроки = Найти(ПромежуточныйТекстЗапроса, "УчетныйОбороты.КорСубконто" + ИндексКор);
			//	КонецЦикла;
			//КонецЦикла;
			
			ПромежуточныйТекстЗапроса = СтрЗаменить(ПромежуточныйТекстЗапроса, "УчетныйОбороты.КорСубконто1", "_УчетныйОбороты.КорСубконто1");
			ПромежуточныйТекстЗапроса = СтрЗаменить(ПромежуточныйТекстЗапроса, "УчетныйОбороты.КорСубконто2", "_УчетныйОбороты.КорСубконто2");
			ПромежуточныйТекстЗапроса = СтрЗаменить(ПромежуточныйТекстЗапроса, "УчетныйОбороты.КорСубконто3", "_УчетныйОбороты.КорСубконто3");
			ЗавершающаяЧастьЗапроса = СтрЗаменить(ЗавершающаяЧастьЗапроса, "УчетныйОбороты.КорСубконто1", "_УчетныйОбороты.КорСубконто1");
			ЗавершающаяЧастьЗапроса = СтрЗаменить(ЗавершающаяЧастьЗапроса, "УчетныйОбороты.КорСубконто2", "_УчетныйОбороты.КорСубконто2");
			ЗавершающаяЧастьЗапроса = СтрЗаменить(ЗавершающаяЧастьЗапроса, "УчетныйОбороты.КорСубконто3", "_УчетныйОбороты.КорСубконто3");
			Для каждого ТекСоотв Из СоответствиеСКорСубконто Цикл
				Если ТекСоотв.Ключ = "УчетныйОбороты.КорСубконто1" Тогда
					ПромежуточныйТекстЗапроса = СтрЗаменить(ПромежуточныйТекстЗапроса, "_УчетныйОбороты.КорСубконто1", ТекСоотв.Значение);
					ЗавершающаяЧастьЗапроса = СтрЗаменить(ЗавершающаяЧастьЗапроса, "_УчетныйОбороты.КорСубконто1", ТекСоотв.Значение);
				КонецЕсли;
				Если ТекСоотв.Ключ = "УчетныйОбороты.КорСубконто2" Тогда
					ПромежуточныйТекстЗапроса = СтрЗаменить(ПромежуточныйТекстЗапроса, "_УчетныйОбороты.КорСубконто2", ТекСоотв.Значение);
					ЗавершающаяЧастьЗапроса = СтрЗаменить(ЗавершающаяЧастьЗапроса, "_УчетныйОбороты.КорСубконто2", ТекСоотв.Значение);
				КонецЕсли;
				Если ТекСоотв.Ключ = "УчетныйОбороты.КорСубконто3" Тогда
					ПромежуточныйТекстЗапроса = СтрЗаменить(ПромежуточныйТекстЗапроса, "_УчетныйОбороты.КорСубконто3", ТекСоотв.Значение);
					ЗавершающаяЧастьЗапроса = СтрЗаменить(ЗавершающаяЧастьЗапроса, "_УчетныйОбороты.КорСубконто3", ТекСоотв.Значение);
				КонецЕсли;
			КонецЦикла;
			ПромежуточныйТекстЗапроса = СтрЗаменить(ПромежуточныйТекстЗапроса, "_УчетныйОбороты.КорСубконто1", "УчетныйОбороты.КорСубконто1");
			ПромежуточныйТекстЗапроса = СтрЗаменить(ПромежуточныйТекстЗапроса, "_УчетныйОбороты.КорСубконто2", "УчетныйОбороты.КорСубконто2");
			ПромежуточныйТекстЗапроса = СтрЗаменить(ПромежуточныйТекстЗапроса, "_УчетныйОбороты.КорСубконто3", "УчетныйОбороты.КорСубконто3");
			ЗавершающаяЧастьЗапроса = СтрЗаменить(ЗавершающаяЧастьЗапроса, "_УчетныйОбороты.КорСубконто1", "УчетныйОбороты.КорСубконто1");
			ЗавершающаяЧастьЗапроса = СтрЗаменить(ЗавершающаяЧастьЗапроса, "_УчетныйОбороты.КорСубконто2", "УчетныйОбороты.КорСубконто2");
			ЗавершающаяЧастьЗапроса = СтрЗаменить(ЗавершающаяЧастьЗапроса, "_УчетныйОбороты.КорСубконто3", "УчетныйОбороты.КорСубконто3");
			
			КонечныйТекстЗапроса = КонечныйТекстЗапроса + " " + ПромежуточныйТекстЗапроса + " " + ТекстУсловияКорСчета + ", " + ТекстУсловияКорСубконто + ЗавершающаяЧастьЗапроса;
			КонечныйТекстЗапроса = КонечныйТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ ";
			
					
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если Индекс > 1 Тогда 
		КонечныйТекстЗапроса = Сред(КонечныйТекстЗапроса, 0, СтрДлина(КонечныйТекстЗапроса) - 16);
	КонецЕсли;
	
	Для Индекс = 1 По 3 Цикл
		ПостояннаяЧастьЗапроса = СтрЗаменить(ПостояннаяЧастьЗапроса, "УчетныйОбороты.КорСубконто" + Индекс + " КАК", "NULL КАК");
	КонецЦикла;
	
	Если Индекс > 1 Тогда
		Если Не ПустаяСтрока(УсловиеКорСчета) Тогда
			ТекстУсловияКорСчета = " И КорСчет НЕ В ИЕРАРХИИ(&КорСчетВсе)";
		Иначе
			ТекстУсловияКорСчета = " КорСчет НЕ В ИЕРАРХИИ(&КорСчетВсе)";
		КонецЕсли;
		НовоеЗначение = МакетКомпоновки.ЗначенияПараметров.Добавить();
		НовоеЗначение.Имя      = "КорСчетВсе";
		НовоеЗначение.Значение = КорСчетаВсе;	
		
		ИсходныйТекстЗапроса = ПостояннаяЧастьЗапроса + ТекстУсловияКорСчета + ЗавершающаяЧастьЗапроса;
	КонецЕсли;
	
	Если Не ПустаяСтрока(КонечныйТекстЗапроса) Тогда
		КонечныйТекстЗапроса = ИсходныйТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ " + КонечныйТекстЗапроса;
	Иначе
		КонечныйТекстЗапроса = ИсходныйТекстЗапроса;
	КонецЕсли;
	
	КонечныйТекстЗапроса = СокрЛП(СтрЗаменить(КонечныйТекстЗапроса, "РАЗРЕШЕННЫЕ", ""));
	КонечныйТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ " + Сред(КонечныйТекстЗапроса, 8); 
	
	МакетКомпоновки.НаборыДанных.НаборДанных1.Элементы.Обороты.Запрос = КонечныйТекстЗапроса;
	
	
	
	// Обработка макета компоновки для вывода
	МакетШапкиОтчета = УправленческийУчетПовтИсп.ПолучитьМакетШапки(МакетКомпоновки);
		
	КолонкаКорСчета = 1;
	Для Каждого СтрокаМакета Из МакетШапкиОтчета.Макет Цикл
		КолонкаМакета = 0;
		Для Каждого Ячейка Из СтрокаМакета.Ячейки Цикл
			Если Ячейка.Элементы.Количество() = 1 Тогда
				Если ТипЗнч(Ячейка.Элементы[0].Значение) = Тип("Строка") 
					И ВРег(Строка(Ячейка.Элементы[0].Значение)) = "КОР. СЧЕТ" Тогда 
					КолонкаКорСчета = КолонкаМакета;
					Прервать;
				КонецЕсли;
			КонецЕсли;
			КолонкаМакета = КолонкаМакета + 1;
		КонецЦикла;
	КонецЦикла;
	
	КоличествоГруппировок = 1 + ?(ОбъектОтчет.Периодичность > 0, 1, 0);
	Для Каждого СтрокаТаблицы Из ОбъектОтчет.Группировка Цикл
		Если СтрокаТаблицы.Использование Тогда
			КоличествоГруппировок = КоличествоГруппировок + 1;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоОсновныхГруппировок = КоличествоГруппировок;
	
	КоличествоКорГруппировок = 0;
	Для Каждого СтрокаГруппировки Из ОбъектОтчет.ГруппировкаКор Цикл
		Если СтрокаГруппировки.Использование Тогда
			КоличествоКорГруппировок = КоличествоКорГруппировок + 1;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоКорГруппировок = 0;
	Для Каждого СтрокаГруппировки Из ОбъектОтчет.ГруппировкаКор Цикл
		Если СтрокаГруппировки.Использование Тогда
			КоличествоКорСубконто = СтрЧислоВхождений(СтрокаГруппировки.ПоСубконто, "+");
			КоличествоКорГруппировок = Макс(КоличествоКорГруппировок, КоличествоКорСубконто);
		КонецЕсли;
	КонецЦикла;
	
	КоличествоКорГруппировок = КоличествоКорГруппировок + 1;
	
	КоличествоСтрокШапки = Макс(КоличествоГруппировок, КоличествоКорГруппировок);
	ВысотаШапки = КоличествоСтрокШапки;
	
	Если ТипЗнч(ОбъектОтчет) = Тип("Структура") Тогда
		ОбъектОтчет.Вставить("ВысотаШапки", ВысотаШапки);
	КонецЕсли;
	
	
	МассивДляУдаления = Новый Массив;
	Для Индекс = КоличествоСтрокШапки По МакетШапкиОтчета.Макет.Количество() - 1 Цикл
		МассивДляУдаления.Добавить(МакетШапкиОтчета.Макет[Индекс]);
	КонецЦикла;
	
	КоличествоСтрок = МакетШапкиОтчета.Макет.Количество();
	Для ИндексСтроки = 1 По КоличествоСтрок - 1 Цикл
		СтрокаМакета = МакетШапкиОтчета.Макет[ИндексСтроки];
		
		КоличествоКолонок = СтрокаМакета.Ячейки.Количество();
		
		Для ИндексКолонки = КоличествоКолонок - 3 По КоличествоКолонок - 1 Цикл
			Ячейка = СтрокаМакета.Ячейки[ИндексКолонки];
			СтандартныеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
		КонецЦикла;
	КонецЦикла;
	
	КоличествоПоказателей = УправленческийУчетПовтИсп.КоличествоПоказателей(ОбъектОтчет);
	
	КоличествоКолонок = МакетШапкиОтчета.Макет[0].Ячейки.Количество();
	МаксимальныйИндексКорКолонки = ?(КоличествоПоказателей > 1, КоличествоКолонок - 4, КоличествоКолонок - 3);
	Для ИндексКолонки = КолонкаКорСчета По МаксимальныйИндексКорКолонки Цикл
		Если КоличествоОсновныхГруппировок > 1 Тогда
			Для ИндексСтроки = 0 По КоличествоКорГруппировок - 1 Цикл
				ЯчейкаПриемник = МакетШапкиОтчета.Макет[ИндексСтроки].Ячейки[ИндексКолонки];
				ЯчейкаИсточник = МакетШапкиОтчета.Макет[КоличествоОсновныхГруппировок + ИндексСтроки - 1].Ячейки[ИндексКолонки];
				
				ЯчейкаПриемник.Элементы.Очистить();
				Для Каждого Элемент Из ЯчейкаИсточник.Элементы Цикл
					НовыйЭлемент = ЯчейкаПриемник.Элементы.Добавить(ТипЗнч(Элемент));
					ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элемент);
				КонецЦикла; 
				
				Для Каждого Элемент Из ЯчейкаИсточник.Оформление.Элементы Цикл
					Индекс = ЯчейкаИсточник.Оформление.Элементы.Индекс(Элемент);
					ЗаполнитьЗначенияСвойств(ЯчейкаПриемник.Оформление.Элементы[Индекс], Элемент);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для ИндексКолонки = КолонкаКорСчета По МаксимальныйИндексКорКолонки Цикл 
		ЯчейкаИсточник = МакетШапкиОтчета.Макет[КоличествоКорГруппировок - 1].Ячейки[ИндексКолонки];
		Для ИндексСтроки = КоличествоКорГруппировок По КоличествоСтрокШапки - 1 Цикл
			Ячейка = МакетШапкиОтчета.Макет[ИндексСтроки].Ячейки[ИндексКолонки];
			Для Каждого Элемент Из ЯчейкаИсточник.Оформление.Элементы Цикл
				Индекс = ЯчейкаИсточник.Оформление.Элементы.Индекс(Элемент);
				ЗаполнитьЗначенияСвойств(Ячейка.Оформление.Элементы[Индекс], Элемент);
			КонецЦикла;
		КонецЦикла;
		Для ИндексСтроки = 0 По КоличествоКорГруппировок - 1 Цикл
			Ячейка = МакетШапкиОтчета.Макет[ИндексСтроки].Ячейки[ИндексКолонки];
			СтандартныеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Ложь);
		КонецЦикла;
		Для ИндексСтроки = КоличествоКорГруппировок По КоличествоСтрокШапки - 1 Цикл
			Ячейка = МакетШапкиОтчета.Макет[ИндексСтроки].Ячейки[ИндексКолонки];
			СтандартныеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
		КонецЦикла;
	КонецЦикла;
	
	Для ИндексКолонки = 0 По КолонкаКорСчета - 1 Цикл 
		Для ИндексСтроки = КоличествоОсновныхГруппировок По КоличествоСтрокШапки - 1 Цикл
			Ячейка = МакетШапкиОтчета.Макет[ИндексСтроки].Ячейки[ИндексКолонки];
			СтандартныеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
		КонецЦикла;
	КонецЦикла;
		
	МакетГруппировкиСчетЗаголовок = УправленческийУчетПовтИсп.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Счет", , "Заголовок");
	МакетГруппировкиСчетПодвал    = УправленческийУчетПовтИсп.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Счет", , "Подвал");
	
	МакетГруппировкиСубконтоЗаголовок = УправленческийУчетПовтИсп.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Субконто", , "Заголовок");
	МакетГруппировкиСубконтоПодвал    = УправленческийУчетПовтИсп.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Субконто", , "Подвал");
	
	МакетГруппировкиПодразделениеЗаголовок = УправленческийУчетПовтИсп.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Подразделение", , "Заголовок");
	МакетГруппировкиПодразделениеПодвал    = УправленческийУчетПовтИсп.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Подразделение", , "Подвал");

	МакетГруппировкиОрганизацияЗаголовок = УправленческийУчетПовтИсп.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Организация", , "Заголовок");
	МакетГруппировкиОрганизацияПодвал    = УправленческийУчетПовтИсп.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Организация", , "Подвал");

	МакетГруппировкиВалютаЗаголовок = УправленческийУчетПовтИсп.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Валюта", , "Заголовок");
	МакетГруппировкиВалютаПодвал    = УправленческийУчетПовтИсп.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Валюта", , "Подвал");

	МакетГруппировкиПериодЗаголовок = УправленческийУчетПовтИсп.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Период", , "Заголовок");
	МакетГруппировкиПериодПодвал    = УправленческийУчетПовтИсп.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Период", , "Подвал");

	
	МакетГруппировкиКорЗаголовок = УправленческийУчетПовтИсп.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Кор", , "Заголовок");

	Для Каждого Элемент Из МассивДляУдаления Цикл
		МакетШапкиОтчета.Макет.Удалить(Элемент);
	КонецЦикла;
	//
	Для Каждого Макет Из МакетКомпоновки.Макеты Цикл 
		МассивДляУдаления.Очистить();
		Если МакетГруппировкиСчетЗаголовок.Найти(Макет) <> Неопределено 
			ИЛИ МакетГруппировкиСубконтоЗаголовок.Найти(Макет) <> Неопределено
			ИЛИ МакетГруппировкиПодразделениеЗаголовок.Найти(Макет) <> Неопределено
			ИЛИ МакетГруппировкиОрганизацияЗаголовок.Найти(Макет) <> Неопределено
			ИЛИ МакетГруппировкиВалютаЗаголовок.Найти(Макет) <> Неопределено
			ИЛИ МакетГруппировкиПериодЗаголовок.Найти(Макет) <> Неопределено Тогда
			КоличествоПоказателей = Макет.Макет.Количество() / 3;
			Для Индекс = КоличествоПоказателей По Макет.Макет.Количество() - 1 Цикл
				МассивДляУдаления.Добавить(Макет.Макет[Индекс]);
			КонецЦикла;
			Для Индекс = 0 По КоличествоПоказателей - 1 Цикл
				Ячейка = Макет.Макет[Индекс].Ячейки[КолонкаКорСчета];
				СтандартныеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоГоризонтали", Ложь);	
			КонецЦикла;
			
			Ячейка00 = Макет.Макет[0].Ячейки[0];
			ПараметрОтступ = СтандартныеОтчетыКлиентСервер.ПолучитьПараметр(Ячейка00.Оформление.Элементы, "Отступ");
			Ячейка01 = Макет.Макет[0].Ячейки[КолонкаКорСчета];
			НовыйЭлемент = Ячейка01.Элементы.Добавить(Тип("ПолеОбластиКомпоновкиДанных"));
			НовыйЭлемент.Значение = "Начальное сальдо";
			СтандартныеОтчетыКлиентСервер.УстановитьПараметр(Ячейка01.Оформление.Элементы, "Отступ", ПараметрОтступ.Значение); 
			СтандартныеОтчетыКлиентСервер.УстановитьПараметр(Ячейка01.Оформление.Элементы, "Размещение", ТипРазмещенияТекстаКомпоновкиДанных.Переносить);
		КонецЕсли;
		
		Если МакетГруппировкиСчетПодвал.Найти(Макет) <> Неопределено 
			ИЛИ МакетГруппировкиСубконтоПодвал.Найти(Макет) <> Неопределено
			ИЛИ МакетГруппировкиПодразделениеПодвал.Найти(Макет) <> Неопределено
			ИЛИ МакетГруппировкиОрганизацияПодвал.Найти(Макет) <> Неопределено
			ИЛИ МакетГруппировкиВалютаПодвал.Найти(Макет) <> Неопределено
			ИЛИ МакетГруппировкиПериодПодвал.Найти(Макет) <> Неопределено Тогда
			КоличествоПоказателей = Макет.Макет.Количество() / 3;
			Для Индекс = 0 По КоличествоПоказателей - 1 Цикл
				МассивДляУдаления.Добавить(Макет.Макет[Индекс]);  
			КонецЦикла;
			Ячейка00 = Макет.Макет[0].Ячейки[0];
			ПараметрОтступ = СтандартныеОтчетыКлиентСервер.ПолучитьПараметр(Ячейка00.Оформление.Элементы, "Отступ");
			
			// Область итога "Оборот"
			Для Каждого Ячейка Из Макет.Макет[КоличествоПоказателей].Ячейки Цикл
				СтандартныеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Ложь);	
			КонецЦикла;
			
			ЯчейкаN1 = Макет.Макет[КоличествоПоказателей].Ячейки[КолонкаКорСчета];
			НовыйЭлемент = ЯчейкаN1.Элементы.Добавить(Тип("ПолеОбластиКомпоновкиДанных"));
			НовыйЭлемент.Значение = "Оборот";
			СтандартныеОтчетыКлиентСервер.УстановитьПараметр(ЯчейкаN1.Оформление.Элементы, "Отступ", ПараметрОтступ.Значение);
			СтандартныеОтчетыКлиентСервер.УстановитьПараметр(ЯчейкаN1.Оформление.Элементы, "Размещение", ТипРазмещенияТекстаКомпоновкиДанных.Переносить);
		
			Для Индекс = 0 По Макет.Макет.Количество() - 1 Цикл
				Ячейка = Макет.Макет[Индекс].Ячейки[КолонкаКорСчета];
				СтандартныеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоГоризонтали", Ложь);
			КонецЦикла;
			
			// Область итога "Конечное сальдо"
			Для Каждого Ячейка Из Макет.Макет[КоличествоПоказателей * 2].Ячейки Цикл
				СтандартныеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Ложь);	
			КонецЦикла;
			
			Ячейка2N1 = Макет.Макет[КоличествоПоказателей * 2].Ячейки[КолонкаКорСчета];
			НовыйЭлемент = Ячейка2N1.Элементы.Добавить(Тип("ПолеОбластиКомпоновкиДанных"));
			НовыйЭлемент.Значение = "Конечное сальдо";
			СтандартныеОтчетыКлиентСервер.УстановитьПараметр(Ячейка2N1.Оформление.Элементы, "Отступ", ПараметрОтступ.Значение);
			СтандартныеОтчетыКлиентСервер.УстановитьПараметр(Ячейка2N1.Оформление.Элементы, "Размещение", ТипРазмещенияТекстаКомпоновкиДанных.Переносить);
			
			
			Для ИндексКолонки = 1 По КолонкаКорСчета - 1 Цикл
				Для ИндексСтроки = КоличествоПоказателей По КоличествоПоказателей * 3 - 1 Цикл
					Ячейка = Макет.Макет[ИндексСтроки].Ячейки[ИндексКолонки];
					СтандартныеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоГоризонтали", Истина);
				КонецЦикла;
			КонецЦикла;
			Для ИндексКолонки = 0 По КолонкаКорСчета - 1 Цикл
				Для ИндексСтроки = КоличествоПоказателей + 1 По КоличествоПоказателей * 2 - 1 Цикл
					Ячейка = Макет.Макет[ИндексСтроки].Ячейки[ИндексКолонки];
					СтандартныеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
				КонецЦикла;
				Для ИндексСтроки = КоличествоПоказателей * 2 + 1 По КоличествоПоказателей * 3 - 1 Цикл
					Ячейка = Макет.Макет[ИндексСтроки].Ячейки[ИндексКолонки];
					СтандартныеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Если МакетГруппировкиКорЗаголовок.Найти(Макет) <> Неопределено Тогда
			КоличествоПоказателей = Макет.Макет.Количество() / 3;
			Для Индекс = 0 По КоличествоПоказателей - 1 Цикл
				МассивДляУдаления.Добавить(Макет.Макет[Индекс]);  
			КонецЦикла;
			Для Индекс = КоличествоПоказателей * 2 По КоличествоПоказателей * 3 - 1 Цикл
				МассивДляУдаления.Добавить(Макет.Макет[Индекс]);  
			КонецЦикла;
			
			КоличествоКолонок = Макет.Макет[0].Ячейки.Количество();
			МаксимальныйИндексКолонки = ?(КоличествоПоказателей > 1, КоличествоКолонок - 4, КоличествоКолонок - 3);
			Для ИндексКолонки = 0 По МаксимальныйИндексКолонки Цикл
				Ячейка = Макет.Макет[КоличествоПоказателей].Ячейки[ИндексКолонки];
				Ячейка01 = Макет.Макет[0].Ячейки[ИндексКолонки];
				Для Каждого Элемент Из Ячейка01.Элементы Цикл
					НовыйЭлемент = Ячейка.Элементы.Добавить(ТипЗнч(Элемент));
					ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элемент);
				КонецЦикла; 
				
				Для Каждого Элемент Из Ячейка01.Оформление.Элементы Цикл
					Индекс = Ячейка01.Оформление.Элементы.Индекс(Элемент);
					Приемник = Ячейка.Оформление.Элементы[Индекс];
					ЗаполнитьЗначенияСвойств(Приемник, Элемент);
				КонецЦикла;
				СтандартныеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Ложь);
			КонецЦикла;
			
			Для ИндексКолонки = 1 По КолонкаКорСчета - 1 Цикл
				Для ИндексСтроки = КоличествоПоказателей По КоличествоПоказателей * 2 - 1 Цикл
					Ячейка = Макет.Макет[ИндексСтроки].Ячейки[ИндексКолонки];
					СтандартныеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоГоризонтали", Истина);
				КонецЦикла;
			КонецЦикла;
			Для ИндексКолонки = 0 По КолонкаКорСчета - 1 Цикл
				Для ИндексСтроки = КоличествоПоказателей + 1 По КоличествоПоказателей * 2 - 1 Цикл
					Ячейка = Макет.Макет[ИндексСтроки].Ячейки[ИндексКолонки];
					СтандартныеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		//
		Для Каждого Элемент Из МассивДляУдаления Цикл
			Макет.Макет.Удалить(Элемент);
		КонецЦикла;
	//	
	КонецЦикла;
	
	Если Не ОбъектОтчет.ПоСубсчетам Тогда
		Для Каждого Макет Из МакетКомпоновки.Макеты Цикл
			Если ТипЗнч(Макет.Макет) = Тип("МакетГруппировкиДиаграммыОбластиКомпоновкиДанных")
				ИЛИ ТипЗнч(Макет.Макет) = Тип("МакетРесурсаДиаграммыОбластиКомпоновкиДанных") Тогда
				Для Каждого Параметр Из Макет.Параметры Цикл
					Если ТипЗнч(Параметр) = Тип("ПараметрОбластиРасшифровкаКомпоновкиДанных") Тогда
						ВыражениеПоля = Параметр.ВыраженияПолей.Добавить();	
						ВыражениеПоля.Поле      = "Счет";
						ВыражениеПоля.Выражение = "&Счет";
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(Результат, ОбъектОтчет) Экспорт
	
	УправленческийУчетПовтИсп.ОбработкаРезультатаОтчета(ОбъектОтчет, Результат);

	Если Результат.Области.Найти("Заголовок") = Неопределено Тогда
		Результат.ФиксацияСверху = ОбъектОтчет.ВысотаШапки;
	Иначе
		Результат.ФиксацияСверху = Результат.Области.Заголовок.Низ + ОбъектОтчет.ВысотаШапки;
	КонецЕсли;
	
	ВыводитьКолонкуСчет = Ложь;
	
	КоличествоГруппировок = 0;
	Для Каждого СтрокаГруппировки Из ОбъектОтчет.Группировка Цикл
		Если СтрокаГруппировки.Использование Тогда
			КоличествоГруппировок = КоличествоГруппировок + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если ОбъектОтчет.ПоСубсчетам ИЛИ ОбъектОтчет.ПоказательВалютнаяСумма ИЛИ ОбъектОтчет.Периодичность > 0 ИЛИ КоличествоГруппировок > 0 Тогда 
		ВыводитьКолонкуСчет = Истина;
	КонецЕсли;
	
	Если Не ВыводитьКолонкуСчет Тогда
		Результат.УдалитьОбласть(Результат.Область("C1"), ТипСмещенияТабличногоДокумента.ПоВертикали);	
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	УправленческийУчетПовтИсп.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ);
	
КонецПроцедуры

НаборПоказателей = Новый Массив;
НаборПоказателей.Добавить("БУ");
//НаборПоказателей.Добавить("НУ");
//НаборПоказателей.Добавить("ПР");
//НаборПоказателей.Добавить("ВР");
//НаборПоказателей.Добавить("Контроль");
НаборПоказателей.Добавить("ВалютнаяСумма");
НаборПоказателей.Добавить("Количество");
НаборПоказателей.Добавить("Крахмал");