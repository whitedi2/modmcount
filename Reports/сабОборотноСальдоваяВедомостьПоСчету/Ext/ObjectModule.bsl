Перем НаборПоказателей Экспорт;
Перем ВысотаШапки;

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Возврат Новый Структура("ИспользоватьПередКомпоновкойМакета,
							|ИспользоватьПослеКомпоновкиМакета,
							|ИспользоватьПослеВыводаРезультата,
							|ИспользоватьДанныеРасшифровки",
							Истина, Истина, Истина, Истина);
							
КонецФункции

Функция ПолучитьТекстЗаголовка(ОрганизацияВНачале = Истина, ОбъектОтчет) Экспорт 
	
	ЭквВалюта = ?(ЗначениеЗаполнено(ОбъектОтчет.ЭквивалентнаяВалюта), ОбъектОтчет.ЭквивалентнаяВалюта, УЧ_Сервер.НациональнаяВалюта());

	Возврат "Оборотно-сальдовая ведомость по счету " + ОбъектОтчет.Счет + СтандартныеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ОбъектОтчет.НачалоПериода, ОбъектОтчет.КонецПериода) + "
	|Валюта: " + ЭквВалюта;
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(Схема, ОбъектОтчет) Экспорт
	
	//Если ТипЗнч(ОбъектОтчет) = Тип("Структура") Тогда
	//	ТекНастройки = ОбъектОтчет.КомпоновщикНастроек;
	//	КомпоновщикНастроекПроизвольный = Новый КомпоновщикНастроекКомпоновкиДанных;
	//	КомпоновщикНастроекПроизвольный.ЗагрузитьНастройки(ТекНастройки);
	//Иначе	
		КомпоновщикНастроекПроизвольный = ОбъектОтчет.КомпоновщикНастроек;
	//КонецЕсли;
	
	КомпоновщикНастроекПроизвольный.Настройки.Структура.Очистить();
	КомпоновщикНастроекПроизвольный.Настройки.Выбор.Элементы.Очистить();
	
	СтандартныеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроекПроизвольный, "Счет"         , ОбъектОтчет.Счет);
	СтандартныеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроекПроизвольный, "Периодичность", ОбъектОтчет.Периодичность);
	СтандартныеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроекПроизвольный, "ЭквивалентнаяВалюта", ?(ЗначениеЗаполнено(ОбъектОтчет.ЭквивалентнаяВалюта), ОбъектОтчет.ЭквивалентнаяВалюта, УЧ_Сервер.НациональнаяВалюта()));
	ДатаКон = ?(ЗначениеЗаполнено(ОбъектОтчет.КонецПериода), ОбъектОтчет.КонецПериода, ТекущаяДата());
	СтандартныеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроекПроизвольный, "ДатаКурса", ДатаКон);
	СтандартныеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроекПроизвольный, "ВключенПривилегированныйРежим", ОбъектОтчет.ВключенПривилегированныйРежим);
    
    Если ЗначениеЗаполнено(ОбъектОтчет.НачалоПериода) Тогда
    	СтандартныеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроекПроизвольный, "НачалоПериода", НачалоДня(ОбъектОтчет.НачалоПериода));
    КонецЕсли;
    Если ЗначениеЗаполнено(ОбъектОтчет.КонецПериода) Тогда
    	СтандартныеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроекПроизвольный, "КонецПериода", КонецДня(ОбъектОтчет.КонецПериода));
    	СтандартныеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроекПроизвольный, "ПараметрПериод", КонецДня(ОбъектОтчет.КонецПериода));
    Иначе
    	СтандартныеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроекПроизвольный, "ПараметрПериод", КонецДня(ТекущаяДата()));
    КонецЕсли;
    Если ЗначениеЗаполнено(ОбъектОтчет.Подразделение) Тогда
    	СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(КомпоновщикНастроекПроизвольный, "Подразделение", ОбъектОтчет.Подразделение,,, );
    КонецЕсли;
    
	
	КоличествоПоказателей = УправленческийУчетПовтИсп.КоличествоПоказателей(ОбъектОтчет);
	
		//Если ТипЗнч(ОбъектОтчет) = Тип("Структура") Тогда
		//	КомпоновщикНастройкиВыбор = ОбъектОтчет.КомпоновщикНастройкиВыбор;
		//Иначе	
			КомпоновщикНастройкиВыбор = КомпоновщикНастроекПроизвольный.Настройки.Выбор;
		//КонецЕсли; 
	
	Если КоличествоПоказателей > 1 Тогда
		ГруппаПоказатели = КомпоновщикНастройкиВыбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ГруппаПоказатели.Заголовок     = "Показатели";
		ГруппаПоказатели.Использование = Истина;
    	ГруппаПоказатели.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
    	
    	Для Каждого ИмяПоказателя Из НаборПоказателей Цикл
    		Если ОбъектОтчет["Показатель" + ?(ТипЗнч(ИмяПоказателя) = Тип("КлючИЗначение"), ИмяПоказателя.Ключ ,ИмяПоказателя)] Тогда 
    			СтандартныеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаПоказатели, "Показатели." + ?(ТипЗнч(ИмяПоказателя) = Тип("КлючИЗначение"), ИмяПоказателя.Ключ ,ИмяПоказателя));
    		КонецЕсли;
    	КонецЦикла;	
    КонецЕсли;
    
    ГруппаСальдоНаНачало = КомпоновщикНастройкиВыбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
    ГруппаСальдоНаНачало.Заголовок     = "Сальдо на начало периода";
    ГруппаСальдоНаНачало.Использование = Истина;
    ГруппаСальдоНаНачалоДт = ГруппаСальдоНаНачало.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
    ГруппаСальдоНаНачалоДт.Заголовок     = "Дебет";
    ГруппаСальдоНаНачалоДт.Использование = Истина;
    ГруппаСальдоНаНачалоДт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
    ГруппаСальдоНаНачалоКт = ГруппаСальдоНаНачало.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
    ГруппаСальдоНаНачалоКт.Заголовок     = "Кредит";
    ГруппаСальдоНаНачалоКт.Использование = Истина;
    ГруппаСальдоНаНачалоКт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
    
    ГруппаОбороты = КомпоновщикНастройкиВыбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
    ГруппаОбороты.Заголовок     = "Обороты за период";
    ГруппаОбороты.Использование = Истина;
    ГруппаОборотыДт = ГруппаОбороты.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
    ГруппаОборотыДт.Заголовок     = "Дебет";
    ГруппаОборотыДт.Использование = Истина;
    ГруппаОборотыДт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
    ГруппаОборотыКт = ГруппаОбороты.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
    ГруппаОборотыКт.Заголовок     = "Кредит";
    ГруппаОборотыКт.Использование = Истина;
    ГруппаОборотыКт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
    
    ГруппаСальдоНаКонец = КомпоновщикНастройкиВыбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
    ГруппаСальдоНаКонец.Заголовок     = "Сальдо на конец периода";
    ГруппаСальдоНаКонец.Использование = Истина;
    ГруппаСальдоНаКонецДт = ГруппаСальдоНаКонец.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
    ГруппаСальдоНаКонецДт.Заголовок     = "Дебет";
    ГруппаСальдоНаКонецДт.Использование = Истина;
    ГруппаСальдоНаКонецДт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
    ГруппаСальдоНаКонецКт = ГруппаСальдоНаКонец.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
    ГруппаСальдоНаКонецКт.Заголовок     = "Кредит";
    ГруппаСальдоНаКонецКт.Использование = Истина;
    ГруппаСальдоНаКонецКт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
    	
    Для Каждого ИмяПоказателя Из НаборПоказателей Цикл
    	Если ОбъектОтчет["Показатель" + ?(ТипЗнч(ИмяПоказателя) = Тип("КлючИЗначение"), ИмяПоказателя.Ключ ,ИмяПоказателя)] Тогда 
    		Если ИмяПоказателя = "Контроль" Тогда
    			ВидОстатка = "";
    		Иначе
    			ВидОстатка = ?(ОбъектОтчет.РазвернутоеСальдо, "Развернутый", "");
    		КонецЕсли;
    		СтандартныеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаСальдоНаНачалоДт, "СальдоНаНачалоПериода." + ИмяПоказателя + "Начальный" + ВидОстатка + "ОстатокДт");
    		СтандартныеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаСальдоНаНачалоКт, "СальдоНаНачалоПериода." + ИмяПоказателя + "Начальный" + ВидОстатка + "ОстатокКт");
    		СтандартныеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаОборотыДт,        "ОборотыЗаПериод."       + ИмяПоказателя + "ОборотДт");
    		СтандартныеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаОборотыКт,        "ОборотыЗаПериод."       + ИмяПоказателя + "ОборотКт");
    		СтандартныеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаСальдоНаКонецДт,  "СальдоНаКонецПериода."  + ИмяПоказателя + "Конечный"  + ВидОстатка + "ОстатокДт");
    		СтандартныеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаСальдоНаКонецКт,  "СальдоНаКонецПериода."  + ИмяПоказателя + "Конечный"  + ВидОстатка + "ОстатокКт");
    	КонецЕсли;
    КонецЦикла;
    
    // Дополнительные данные
    УправленческийУчетПовтИсп.ДобавитьДополнительныеПоля(ОбъектОтчет, КомпоновщикНастроекПроизвольный);
  
    Структура = КомпоновщикНастроекПроизвольный.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
    
    ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
    ПолеГруппировки.Использование  = Истина;
    ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Счет");
    ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
    Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
    Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));  
    
    Если Не ОбъектОтчет.ПоСубсчетам Тогда
    	ЗначениеОтбора = СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(Структура.Отбор, "SystemFields.LevelInGroup", 1);
    	ЗначениеОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Иерархия;
    	СтандартныеОтчетыКлиентСервер.УстановитьПараметрВывода(Структура, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
    КонецЕсли;
    
    Для Каждого ПолеВыбраннойГруппировки Из ОбъектОтчет.Группировка Цикл 
    	Если ПолеВыбраннойГруппировки.Использование Тогда
    		Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
    		ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
    		ПолеГруппировки.Использование  = Истина;
    		ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
			//ПолеГруппировки.Представление  = ПолеВыбраннойГруппировки.Представление;
    		Если ПолеВыбраннойГруппировки.ТипГруппировки = 1 Тогда
    			ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
    		ИначеЕсли ПолеВыбраннойГруппировки.ТипГруппировки = 2 Тогда
    			ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
    		Иначе
    			ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
    		КонецЕсли;
    		Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
    		Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
    	КонецЕсли;
    КонецЦикла;
    
    // Период
    УправленческийУчетПовтИсп.ДобавитьГруппировкуПоПериоду(ОбъектОтчет, Структура);
    
	//БухгалтерскийУчетПовтИсп.ДобавитьОтборПоОрганизации(Отчет);
	
	Если ЗначениеЗаполнено(ОбъектОтчет.Организация) Тогда
		НовыйОтбор = СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(КомпоновщикНастроекПроизвольный, "Организация", ОбъектОтчет.Организация,,, );
		НовыйОтбор.Представление = "###ОтборПоОрганизации###"; 
	КонецЕсли;
	Если ЗначениеЗаполнено(ОбъектОтчет.СценарийПлана) Тогда
		НовыйОтбор = СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(КомпоновщикНастроекПроизвольный, "СценарийПлана", ОбъектОтчет.СценарийПлана,,, );
		НовыйОтбор.Представление = "###ОтборПоСценариюПлана###"; 
	КонецЕсли;
	
	//БухгалтерскийУчетПовтИсп.ДобавитьОтборДляПоказателяКонтроль(Отчет);
	Если ТипЗнч(ОбъектОтчет) = Тип("Структура") Тогда
		ОбъектОтчет.КомпоновщикНастроек = КомпоновщикНастроекПроизвольный;
	КонецЕсли; 	
КонецПроцедуры

Процедура ПослеКомпоновкиМакета(МакетКомпоновки, ОбъектОтчет) Экспорт
		
	МакетШапкиОтчета = УправленческийУчетПовтИсп.ПолучитьМакетШапки(МакетКомпоновки);
	
	КоличествоПоказателей = УправленческийУчетПовтИсп.КоличествоПоказателей(ОбъектОтчет);
	
	КоличествоГруппировок = 1;
	Для Каждого СтрокаГруппировки Из ОбъектОтчет.Группировка Цикл
		Если СтрокаГруппировки.Использование Тогда
			КоличествоГруппировок = КоличествоГруппировок + 1;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоСтрокШапки = Макс(КоличествоГруппировок, 2);
	ОбъектОтчет.ВысотаШапки = КоличествоСтрокШапки;
	
	МассивДляУдаления = Новый Массив;
	Для Индекс = КоличествоСтрокШапки По МакетШапкиОтчета.Макет.Количество() - 1 Цикл
		МассивДляУдаления.Добавить(МакетШапкиОтчета.Макет[Индекс]);
	КонецЦикла;
	
	КоличествоСтрок = МакетШапкиОтчета.Макет.Количество();
	Для ИндексСтроки = 2 По КоличествоСтрок - 1 Цикл
		СтрокаМакета = МакетШапкиОтчета.Макет[ИндексСтроки];
		
		КоличествоКолонок = СтрокаМакета.Ячейки.Количество();
		
		Для ИндексКолонки = КоличествоКолонок - 6 По КоличествоКолонок - 1 Цикл
			Ячейка = СтрокаМакета.Ячейки[ИндексКолонки];
			СтандартныеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
		КонецЦикла;
	КонецЦикла;
	
	Если КоличествоПоказателей > 1 Тогда
		Для ИндексСтроки = 1 По КоличествоСтрок - 1 Цикл
			СтрокаМакета = МакетШапкиОтчета.Макет[ИндексСтроки];
			
			КоличествоКолонок = СтрокаМакета.Ячейки.Количество();
			Ячейка = СтрокаМакета.Ячейки[КоличествоКолонок - 7];
			СтандартныеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
		КонецЦикла;
	КонецЕсли;
	
	МакетПодвалаОтчета            = УправленческийУчетПовтИсп.ПолучитьМакетПодвала(МакетКомпоновки);
	МакетГруппировкиОрганизация   = УправленческийУчетПовтИсп.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Организация");
	МакетГруппировкиСчет          = УправленческийУчетПовтИсп.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Счет");
	МакетГруппировкиПодразделение = УправленческийУчетПовтИсп.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Подразделение");
	МакетГруппировкиВалюта        = УправленческийУчетПовтИсп.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Валюта");
	
	Для Каждого Элемент Из МассивДляУдаления Цикл
		МакетШапкиОтчета.Макет.Удалить(Элемент);
	КонецЦикла;
	
	Для Каждого Макет Из МакетКомпоновки.Макеты Цикл 
		Если Макет = МакетШапкиОтчета Тогда
		Иначе
			Индекс = -1;
			МассивПоказателей = Новый Массив;
			МассивПоказателей.Добавить("БУ");
			//МассивПоказателей.Добавить("НУ");
			//МассивПоказателей.Добавить("ПР");
			//МассивПоказателей.Добавить("ВР");
			
			Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
				Если ОбъектОтчет["Показатель" + ИмяПоказателя] Тогда
					Индекс = Индекс + 1;
				КонецЕсли;
			КонецЦикла;
			//Если ПоказательКонтроль Тогда 
			//	Индекс = Индекс + 1;					
			//КонецЕсли;
			
			Если ОбъектОтчет.ПоказательВалютнаяСумма И КоличествоПоказателей = 1 Тогда 
				
			ИначеЕсли ОбъектОтчет.ПоказательВалютнаяСумма Тогда
				Индекс = Индекс + 1;				
				Если МакетГруппировкиВалюта.Найти(Макет) <> Неопределено Тогда
					//Иначе
					//Макет.Макет.Удалить(Макет.Макет[Индекс]);
					//	Индекс = Индекс - 1;
				КонецЕсли;
			КонецЕсли;
			
			Если ОбъектОтчет.ПоказательКоличество Тогда
				Индекс = Индекс + 1;
				Если МакетГруппировкиВалюта.Найти(Макет) <> Неопределено Тогда
					Макет.Макет.Удалить(Макет.Макет[Индекс]);
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	Если Не ОбъектОтчет.ПоСубсчетам Тогда
		Для Каждого Макет Из МакетКомпоновки.Макеты Цикл
			Если ТипЗнч(Макет.Макет) = Тип("МакетГруппировкиДиаграммыОбластиКомпоновкиДанных")
				ИЛИ ТипЗнч(Макет.Макет) = Тип("МакетРесурсаДиаграммыОбластиКомпоновкиДанных") Тогда
				Для Каждого Параметр Из Макет.Параметры Цикл
					Если ТипЗнч(Параметр) = Тип("ПараметрОбластиРасшифровкаКомпоновкиДанных") Тогда
						ВыражениеПоля = Параметр.ВыраженияПолей.Добавить();	
						ВыражениеПоля.Поле      = "Счет";
						ВыражениеПоля.Выражение = "&Счет";
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(Результат, ОбъектОтчет) Экспорт
	
	УправленческийУчетПовтИсп.ОбработкаРезультатаОтчета(ОбъектОтчет, Результат);

	Если Результат.Области.Найти("Заголовок") = Неопределено Тогда
		Результат.ФиксацияСверху = ОбъектОтчет.ВысотаШапки;
	Иначе
		Результат.ФиксацияСверху = Результат.Области.Заголовок.Низ + ОбъектОтчет.ВысотаШапки;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, Схема = Неопределено, ВыводитьПолностью = Истина) Экспорт
	
	УправленческийУчетПовтИсп.ВывестиОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, Схема, ВыводитьПолностью); 
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	//БухгалтерскийУчетПовтИсп.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ);
		
КонецПроцедуры

НаборПоказателей = Новый Массив;
НаборПоказателей.Добавить("БУ");
//НаборПоказателей.Добавить("НУ");
//НаборПоказателей.Добавить("ПР");
//НаборПоказателей.Добавить("ВР");
НаборПоказателей.Добавить("ВалютнаяСумма");
НаборПоказателей.Добавить("Количество");
НаборПоказателей.Добавить("Крахмал");
НаборПоказателей.Добавить("Цена");
НаборПоказателей.Добавить("Курс");