
&НаСервере
Процедура ЗаполнитьТЧ(ЗаявкаСсылка1)
	
	ЗаявкаСсылка = ЗаявкаСсылка1;
	
	ЗаявкиБезнал = Ложь;
	Если ТипЗнч(ЗаявкаСсылка) = Тип("Строка") Тогда
		ЗаявкиБезнал = ЗаявкаСсылка = "Заявки без реестра безналичные";	
		ЗаявкаСсылка = Новый Структура;
		ЗаявкаСсылка.Вставить("Дата", КонецДня(ТекущаяДата()));
	КонецЕсли;
	
	ЕстьНал = Ложь;
	ЕстьБезНал = Ложь;
	ЕстьВзаимозачеты = Ложь;
	ЕстьВНХНал = Ложь;
	
	//Заявки.Очистить();
	ЦФО.Очистить();
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка.Предприятие КАК Предприятие,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Организация КАК Организация,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Контрагент КАК Контрагент,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.НазначениеПлатежаБух КАК НазначениеПлатежаБух,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(сабГрафикПлатежей.Сумма, Д_ЗаявкаНаОплатуЗаявкаБезнал.СуммаДДС) < 0
	               |			ТОГДА -ЕСТЬNULL(сабГрафикПлатежей.Сумма, Д_ЗаявкаНаОплатуЗаявкаБезнал.СуммаДДС)
	               |		ИНАЧЕ ЕСТЬNULL(сабГрафикПлатежей.Сумма, Д_ЗаявкаНаОплатуЗаявкаБезнал.СуммаДДС)
	               |	КОНЕЦ КАК СуммаДокумента,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.БанковскийСчет КАК БанковскийСчет,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.СчетКонтрагента КАК СчетКонтрагента,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.ЦФО КАК ЦФО,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Источник КАК Плательщик,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.НазначениеПлатежа КАК НазначениеПлатежа,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Приложение КАК Приложение,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Примечание КАК Примечание,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка.Комментарий КАК Комментарий,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.СтавкаНДС КАК СтавкаНДС,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.ВидОперации КАК ВидОперации,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.КодБК КАК КодБК,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.КодОКАТО КАК КодОКАТО,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.ПоказательОснования КАК ПоказательОснования,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.СтатусСоставителя КАК СтатусСоставителя,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.ПоказательНомера КАК ПоказательНомера,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.ПоказательДаты КАК ПоказательДаты,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.ПоказательТипа КАК ПоказательТипа,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.ПоказательПериода КАК ПоказательПериода,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.ИнвПроект КАК ИнвПроект,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(сабГрафикПлатежей.СуммаНДС, Д_ЗаявкаНаОплатуЗаявкаБезнал.СуммаНДС) < 0
	               |			ТОГДА -ЕСТЬNULL(сабГрафикПлатежей.СуммаНДС, Д_ЗаявкаНаОплатуЗаявкаБезнал.СуммаНДС)
	               |		ИНАЧЕ ЕСТЬNULL(сабГрафикПлатежей.СуммаНДС, Д_ЗаявкаНаОплатуЗаявкаБезнал.СуммаНДС)
	               |	КОНЕЦ КАК СуммаНДС,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Договор КАК Договор,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.СчетВзаиморасчетов КАК СчетВзаиморасчетов,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Подразделение КАК Подразделение,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка.Подразделение КАК ПодразделениеШапка,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.УИДСтроки КАК УИДСтроки,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.НомерСтроки КАК НомерСтроки,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.КПППлательщика КАК КПППлательщика,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.ВыдачаВПодОтчет КАК ПодотчетИзЗаявки,
	               |	сабГрафикПлатежей.ДатаПлатежа КАК ДатаПлатежа,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.СтатьяДДС КАК СтатьяДДС,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.ЗаявкаНаФинансирование КАК ЗаявкаНаФинансирование,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.НомерСтроки КАК НомерСтроки1,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Источник.Предопределенный КАК ИсточникПредопределенный,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.ЗаявкаНаФинансирование.ДокОснование КАК Ведомость,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.ОчередностьПлатежа КАК ОчередностьПлатежа,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.УИН КАК УИН,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(сабГрафикПлатежей.ВалютнаяСумма, Д_ЗаявкаНаОплатуЗаявкаБезнал.ВалютнаяСумма) < 0
	               |			ТОГДА -ЕСТЬNULL(сабГрафикПлатежей.ВалютнаяСумма, Д_ЗаявкаНаОплатуЗаявкаБезнал.ВалютнаяСумма)
	               |		ИНАЧЕ ЕСТЬNULL(сабГрафикПлатежей.ВалютнаяСумма, Д_ЗаявкаНаОплатуЗаявкаБезнал.ВалютнаяСумма)
	               |	КОНЕЦ КАК Поле1,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(сабГрафикПлатежей.ВалютнаяСуммаКонтрагента, Д_ЗаявкаНаОплатуЗаявкаБезнал.ВалютнаяСуммаКонтрагента) < 0
	               |			ТОГДА -ЕСТЬNULL(сабГрафикПлатежей.ВалютнаяСуммаКонтрагента, Д_ЗаявкаНаОплатуЗаявкаБезнал.ВалютнаяСуммаКонтрагента)
	               |		ИНАЧЕ ЕСТЬNULL(сабГрафикПлатежей.ВалютнаяСуммаКонтрагента, Д_ЗаявкаНаОплатуЗаявкаБезнал.ВалютнаяСуммаКонтрагента)
	               |	КОНЕЦ КАК Поле2,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.ИсточникПолучатель КАК ИсточникПолучатель,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.КодВидаДохода КАК КодВидаДохода
	               |ПОМЕСТИТЬ Данные
	               |ИЗ
	               |	Документ.Д_ЗаявкаНаОплату.ЗаявкаБезнал КАК Д_ЗаявкаНаОплатуЗаявкаБезнал
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.сабГрафикПлатежей КАК сабГрафикПлатежей
	               |		ПО Д_ЗаявкаНаОплатуЗаявкаБезнал.УИДСтроки = сабГрафикПлатежей.УИДСтрокиДокумента
	               |			И (сабГрафикПлатежей.ВидОперации В (&ВидыОперацийРасходов))
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Д_ИсточникПП.СрезПоследних(
	               |				&ДатаЗаявки,
	               |				ОтветственноеЛицо В (&ТекущийПользователь)
	               |					ИЛИ ОтветственноеЛицо В
	               |						(ВЫБРАТЬ
	               |							ГруппыПользователей.Ссылка КАК Ссылка
	               |						ИЗ
	               |							Справочник.ГруппыПользователей КАК ГруппыПользователей
	               |						ГДЕ
	               |							ГруппыПользователей.Состав.Пользователь В (&ТекущийПользователь)
	               |						СГРУППИРОВАТЬ ПО
	               |							ГруппыПользователей.Ссылка)
	               |					ИЛИ &ОдинОтветственный) КАК Д_ИсточникППСрезПоследних
	               |		ПО (Д_ЗаявкаНаОплатуЗаявкаБезнал.Источник = Д_ИсточникППСрезПоследних.БанковскиеСчета
	               |				ИЛИ Д_ЗаявкаНаОплатуЗаявкаБезнал.БанковскийСчет = Д_ИсточникППСрезПоследних.БанковскиеСчета)
	               |ГДЕ
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка.Ссылка = &Ссылка
	               |	И НЕ Д_ЗаявкаНаОплатуЗаявкаБезнал.ОтменаОплаты = ИСТИНА
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	NULL,
	               |	сабГрафикПлатежей1.Организация,
	               |	сабГрафикПлатежей1.Контрагент,
	               |	сабГрафикПлатежей1.НазначениеПлатежа,
	               |	сабГрафикПлатежей1.Сумма,
	               |	сабГрафикПлатежей1.Источник,
	               |	сабГрафикПлатежей1.СчетКонтрагента,
	               |	сабГрафикПлатежей1.ЦФО,
	               |	сабГрафикПлатежей1.Источник,
	               |	сабГрафикПлатежей1.НазначениеПлатежа,
	               |	NULL,
	               |	NULL,
	               |	сабГрафикПлатежей1.Комментарий,
	               |	сабГрафикПлатежей1.СтавкаНДС,
	               |	сабГрафикПлатежей1.ВидОперации,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	ВЫБОР
	               |		КОГДА сабГрафикПлатежей1.СуммаНДС < 0
	               |			ТОГДА -сабГрафикПлатежей1.СуммаНДС
	               |		ИНАЧЕ сабГрафикПлатежей1.СуммаНДС
	               |	КОНЕЦ,
	               |	сабГрафикПлатежей1.Договор,
	               |	NULL,
	               |	сабГрафикПлатежей1.ПодразделениеЦФО,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	сабГрафикПлатежей1.ДатаПлатежа,
	               |	сабГрафикПлатежей1.СтатьяДДС,
	               |	сабГрафикПлатежей1.Документ,
	               |	NULL,
	               |	сабГрафикПлатежей1.Источник.Предопределенный,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	ВЫБОР
	               |		КОГДА сабГрафикПлатежей1.ВалютнаяСумма < 0
	               |			ТОГДА -сабГрафикПлатежей1.ВалютнаяСумма
	               |		ИНАЧЕ сабГрафикПлатежей1.ВалютнаяСумма
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА сабГрафикПлатежей1.ВалютнаяСуммаКонтрагента < 0
	               |			ТОГДА -сабГрафикПлатежей1.ВалютнаяСуммаКонтрагента
	               |		ИНАЧЕ сабГрафикПлатежей1.ВалютнаяСуммаКонтрагента
	               |	КОНЕЦ,
	               |	сабГрафикПлатежей1.ИсточникПолучатель,
	               |	NULL
	               |ИЗ
	               |	РегистрСведений.сабГрафикПлатежей КАК сабГрафикПлатежей1,
	               |	РегистрСведений.Д_ИсточникПП.СрезПоследних(
	               |			&ДатаЗаявки,
	               |			ОтветственноеЛицо В (&ТекущийПользователь)
	               |				ИЛИ ОтветственноеЛицо В
	               |					(ВЫБРАТЬ
	               |						ГруппыПользователей.Ссылка КАК Ссылка
	               |					ИЗ
	               |						Справочник.ГруппыПользователей КАК ГруппыПользователей
	               |					ГДЕ
	               |						ГруппыПользователей.Состав.Пользователь В (&ТекущийПользователь)
	               |					СГРУППИРОВАТЬ ПО
	               |						ГруппыПользователей.Ссылка)
	               |				ИЛИ &ОдинОтветственный) КАК Д_ИсточникППСрезПоследних
	               |ГДЕ
	               |	сабГрафикПлатежей1.УИДСтрокиДокумента = """"
	               |	И сабГрафикПлатежей1.ТочкаМаршрута = &ТочкаМаршрутаКОплате
	               |	И ВЫБОР
	               |			КОГДА НЕ &ЗаявкиБезНал
	               |				ТОГДА ТИПЗНАЧЕНИЯ(сабГрафикПлатежей1.Источник) = ТИП(Справочник.Кассы)
	               |			ИНАЧЕ ТИПЗНАЧЕНИЯ(сабГрафикПлатежей1.Источник) = ТИП(Справочник.БанковскиеСчета)
	               |		КОНЕЦ
	               |	И сабГрафикПлатежей1.ОснованиеПометкаУдаления = ЛОЖЬ
	               |	И сабГрафикПлатежей1.ДатаПлатежа <= &ДатаЗаявки
	               |	И сабГрафикПлатежей1.ВидОперации В(&ВидыОперацийРасходов)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Данные.УИДСтроки КАК УИДСтроки,
	               |	ЕСТЬNULL(ПлатежноеПоручение.Ссылка, УЧ_ДвижениеДС.Ссылка) КАК ПодчиненныйДокумент,
	               |	СУММА(ЕСТЬNULL(ЕСТЬNULL(ПлатежноеПоручение.СуммаДокумента, ЕСТЬNULL(РасходныйКассовыйОрдер.СуммаДокумента, УЧ_ДвижениеДС.СуммаДокумента)), 0)) КАК СуммаОплачено
	               |ИЗ
	               |	Данные КАК Данные
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	               |		ПО Данные.УИДСтроки = ПлатежноеПоручение.УИДСтроки
	               |			И (ПлатежноеПоручение.ПометкаУдаления = ЛОЖЬ)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_ДвижениеДС КАК УЧ_ДвижениеДС
	               |		ПО Данные.УИДСтроки = УЧ_ДвижениеДС.ГУИДОснования
	               |			И (УЧ_ДвижениеДС.ПометкаУдаления = ЛОЖЬ)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	               |		ПО Данные.УИДСтроки = РасходныйКассовыйОрдер.ГУИДОснования
	               |			И (РасходныйКассовыйОрдер.ПометкаУдаления = ЛОЖЬ)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Данные.УИДСтроки,
	               |	ЕСТЬNULL(ПлатежноеПоручение.Ссылка, УЧ_ДвижениеДС.Ссылка)";
	
	
	
	//Запрос.Текст = ?(ГруппироватьПлатежи, ?(УчитыватьНазначениеПриГруппировке, ЗапросГруппировкаСУчетомОснования, ЗапросаГруппировка), ЗапросБезГруппировки);
	Запрос.УстановитьПараметр("Ссылка", ?(ТипЗнч(ЗаявкаСсылка) = Тип("Структура"), Документы.Д_ЗаявкаНаОплату.ПустаяСсылка(), ЗаявкаСсылка));
	Запрос.УстановитьПараметр("ДатаЗаявки", ЗаявкаСсылка.Дата);
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ДоступныеПользователи);
	Запрос.УстановитьПараметр("ЧастичнаяОплата", Ложь);
	Запрос.УстановитьПараметр("ОплатаДо", ОплатаДо);
	Запрос.УстановитьПараметр("ВидыОперацийРасходов", ПП_Сервер.ЭтоРасходнаяОперация());
	Запрос.УстановитьПараметр("ТочкаМаршрутаКОплате", Перечисления.Согласование1ТочкиМаршрута.Действие4);
	Запрос.УстановитьПараметр("ЗаявкиБезНал", ЗаявкиБезНал);
	
	МассивОтветственных = Новый Массив;
	Если ТипЗнч(ЗаявкаСсылка) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") Тогда
		Для каждого ТекСтрокаЗаявки Из ЗаявкаСсылка.ЗаявкаБезнал Цикл
			Если ЗначениеЗаполнено(ТекСтрокаЗаявки.Источник) Тогда
				Ответственный = ТекСтрокаЗаявки.Источник.Ответственный;
				Если МассивОтветственных.Найти(Ответственный) = Неопределено И ЗначениеЗаполнено(Ответственный) Тогда
					МассивОтветственных.Добавить(Ответственный);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ОдинОтветственный", МассивОтветственных.Количество() < 2);
	
	МассивЗапросов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	ЗаявкиВР = МассивЗапросов[0].Выгрузить();
	ЗаявкиВР.Сортировать("НомерСтроки");
	РезультатПодчиненные = МассивЗапросов[1].Выгрузить();
			
	ИндексСтроки = 0;
	Для каждого ТекСтрока Из ЗаявкиВР Цикл
		Если Заявки.Количество() <= ИндексСтроки Тогда
			НоваяСтрока = Заявки.Добавить();
		Иначе
			НоваяСтрока = Заявки[ИндексСтроки];		
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		НоваяСтрока.СуммаОплачено = 0;
		ИндексСтроки = ИндексСтроки + 1;
		НоваяСтрока.СчетОрганизации = НоваяСтрока.БанковскийСчет;
	КонецЦикла; 
	
	СтрокиКУдалению = Новый Массив;
	Если Заявки.Количество() > ЗаявкиВР.Количество() Тогда
		Для ИндексСтроки = ЗаявкиВР.Количество() + 1 ПО Заявки.Количество()  Цикл
			СтрокиКУдалению.Добавить(Заявки[ИндексСтроки - 1]);
		КонецЦикла; 
		
		Для каждого ТекСтрока Из СтрокиКУдалению Цикл
			Заявки.Удалить(ТекСтрока);
		КонецЦикла; 
	КонецЕсли;
	
	Контроль10 = 0;
	ЕстьНераскиданные = истина;
	Пока ЕстьНераскиданные Цикл
		ЕстьНераскиданные = Ложь;
		Если Контроль10 = 10 Тогда
			Продолжить;
		Иначе
			Контроль10 = Контроль10 + 1;
		КонецЕсли;
		Для каждого ТекСтрока Из Заявки Цикл
			
			Если ТекСтрока.СуммаОплачено = ТекСтрока.СуммаДокумента Тогда
				Продолжить;
			КонецЕсли;
			
			Найденные = РезультатПодчиненные.НайтиСтроки(Новый Структура("УИДСтроки", ТекСтрока.УИДСтроки)); 
			Для каждого ТекПодчиненный Из Найденные Цикл
				ТекСтрока.СуммаОплачено = ТекСтрока.СуммаОплачено + ТекПодчиненный.СуммаОплачено;
				Если ТекСтрока.СуммаОплачено > ТекСтрока.СуммаДокумента Тогда
					ТекПодчиненный.СуммаОплачено = (ТекСтрока.СуммаОплачено - ТекСтрока.СуммаДокумента);
					ТекСтрока.СуммаОплачено = ТекСтрока.СуммаДокумента;
					ЕстьНераскиданные = Истина;
				Иначе
					ТекПодчиненный.СуммаОплачено = 0;
				КонецЕсли;				
			КонецЦикла; 
		КонецЦикла;
	КонецЦикла; 
	
	Для каждого ТекСтрока Из Заявки Цикл
		
		Если ЗначениеЗаполнено(ТекСтрока.ИсточникПолучатель) Тогда
			
			ТекСтрока.СуммаПоступление = 0;
			Найденные = РезультатПодчиненные.НайтиСтроки(Новый Структура("УИДСтроки", ТекСтрока.УИДСтроки)); 
			Для каждого ТекПодчиненный Из Найденные Цикл
				//поступление ВНХ
				
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	сабСоответствиеОбъектовИнформационнойБазы.Объект2 КАК СсылкаПоступление,
				|	сабСоответствиеОбъектовИнформационнойБазы.Объект2.СуммаДокумента КАК СуммаДокумента
				|ИЗ
				|	РегистрСведений.сабСоответствиеОбъектовИнформационнойБазы КАК сабСоответствиеОбъектовИнформационнойБазы
				|ГДЕ
				|	сабСоответствиеОбъектовИнформационнойБазы.Объект1 = &Ссылка";
				
				Запрос.УстановитьПараметр("Ссылка", ТекПодчиненный.ПодчиненныйДокумент);
				
				Результат = Запрос.Выполнить();
				Выборка = Результат.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					ТекСтрока.СуммаПоступление = ТекСтрока.СуммаПоступление + Выборка.СуммаДокумента;	
				КонецЦикла;
				
			КонецЦикла; 
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ Предприятие.Пустая() Тогда
		
		Для каждого ТекСтрока Из Заявки Цикл
			ТекСтрока.Предприятие = Предприятие;
		КонецЦикла; 
		
	КонецЕсли;
	
	ИндексЗаявки = 0;
	
	Для каждого Выборка Из ЗаявкиВР Цикл
	
		Если ГруппироватьПлатежи Тогда
			СтруктураПоиска = Новый Структура("Предприятие, ПодразделениеШапка, Контрагент, Договор, Организация, КПППлательщика, СчетКонтрагента, БанковскийСчет, СтавкаНДС, ВидОперации, ПодотчетИзЗаявки");
			
			Если ЗначениеЗаполнено(Выборка.КодБК) Тогда
				СтруктураПоиска.Вставить("КодБК");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.КодОКАТО) Тогда
				СтруктураПоиска.Вставить("КодОКАТО");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.СтатусСоставителя) Тогда
				СтруктураПоиска.Вставить("СтатусСоставителя");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.ПоказательПериода) Тогда
				СтруктураПоиска.Вставить("ПоказательПериода");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.ПоказательТипа) Тогда
				СтруктураПоиска.Вставить("ПоказательТипа");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.ПоказательДаты) Тогда
				СтруктураПоиска.Вставить("ПоказательДаты");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.ПоказательОснования) Тогда
				СтруктураПоиска.Вставить("ПоказательОснования");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.ПоказательНомера) Тогда
				СтруктураПоиска.Вставить("ПоказательНомера");
			КонецЕсли;
			
			//Если УчитыватьНазначениеПриГруппировке Тогда
			//	СтруктураПоиска.Вставить("НазначениеПлатежаБух");
			//КонецЕсли;
			
		Иначе
			СтруктураПоиска = Новый Структура("Предприятие, ПодразделениеШапка, Контрагент, Договор, Организация, КПППлательщика, СчетКонтрагента, БанковскийСчет, СтавкаНДС, НомерСтроки");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		
		НазначениеПлатежа = "";
		Комментарий = "";
		//СтатьяДДС 	= "";
		
		МассивДобавленныхНазначений = Новый Массив;
		//КоличествоСтрок = 0;
		
		Если ТипЗнч(ЗаявкаСсылка) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") Тогда
			СтрокиРасшифровки = ЗаявкаСсылка.РасшифровкиСтрок.НайтиСтроки(Новый Структура("УИДСтрокиЗаявки", Выборка.УИДСтроки));
			МассивСтрок = Новый Массив;
			Для каждого ВыборкаПодробно Из СтрокиРасшифровки Цикл
				
				Комментарий = Комментарий + Строка(ВыборкаПодробно.ЦФО) + 
				?(ВыборкаПодробно.ЦФО.УчетПоПодразделениям ИЛИ ВыборкаПодробно.ЦФО = Константы.сабПредприятиеКазна.Получить(), " (" + Строка(ВыборкаПодробно.Подразделение) + ") ", " ") + Строка(Формат(ВыборкаПодробно.Сумма, "ЧДЦ=2")) + "; ";
				
			КонецЦикла;			
		КонецЕсли;
			
		НазначениеПлатежа = Лев(НазначениеПлатежа, СтрДлина(НазначениеПлатежа) - 2);
		Комментарий = ?(Комментарий = "", "", Лев(Комментарий, СтрДлина(Комментарий) - 2) + ", ") + ?(Выборка.НазначениеПлатежа = Выборка.НазначениеПлатежаБух, Выборка.Примечание, Выборка.НазначениеПлатежа + " " + Выборка.Примечание);// +  Строка(". СтатьяДДС: ") + Строка(Выборка.СтатьяДДС);		
		Заявки[ИндексЗаявки].НазначениеПлатежа2 = Выборка.НазначениеПлатежа;
		//Заявки[ИндексЗаявки].НазначениеПлатежаБух = ?(УчитыватьНазначениеПриГруппировке, Выборка.НазначениеПлатежаБух, НазначениеПлатежа);
		Заявки[ИндексЗаявки].НазначениеПлатежа = Комментарий;
		//Заявки[ИндексЗаявки].ПлатежноеПоручение = КоличествоСтрок;
		ИндексЗаявки = ИндексЗаявки + 1;
		
		Если ТипЗнч(Выборка.Плательщик) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			ЕстьБезНал = Истина;
		ИначеЕсли ТипЗнч(Выборка.Плательщик) = Тип("СправочникСсылка.Кассы") Тогда
			Если Выборка.ИсточникПредопределенный Тогда
				ЕстьВзаимозачеты = Истина;
			Иначе
				ЕстьНал = Истина;			
			КонецЕсли; 
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ИсточникПолучатель) Тогда
			Если НЕ ПараметрыСеанса.ДоступныеПользователи.Найти(Выборка.ИсточникПолучатель.Ответственный) = Неопределено Тогда
				ЕстьВНХНал = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	//ЭтоВзаимозачет = Заявка.ТипИсточника = Перечисления.Д_ИсточникиСредств.Казна;
	//
	//Если ЭтоВзаимозачет Тогда
	//	Элементы.ЗаявкиСформироватьРКО.Заголовок = "Сформировать Взаимозачеты...";
	//Иначе	
	//	Элементы.ЗаявкиСформироватьРКО.Заголовок = "Сформировать РКО...";
	//КонецЕсли;
	
	//ПроводкиКазныПоУчетномуПлану = Константы.сабПроводкиКазныПоУчетномуРегистру.Получить();
	
	//Элементы.ЗаявкиСоздатьРКО.Видимость = Нальная И Не ПроводкиКазныПоУчетномуПлану;
	//Элементы.ЗаявкиЗаписатьРКО.Видимость = Нальная И Не ПроводкиКазныПоУчетномуПлану;
	//Элементы.ЗаявкиСоздатьРКО.КнопкаПоУмолчанию = Нальная И Не ПроводкиКазныПоУчетномуПлану;
	Элементы.СоздатьПлатежку.Видимость = ЕстьБезНал;
	Элементы.ЗаявкиСоздатьРКО_ДДС.Видимость = ЕстьНал;
	Элементы.ЗаявкиСоздатьПКО_ДДС.Видимость = ЕстьВНХНал;
	Элементы.ЗаявкиСоздатьВзаимозачет.Видимость = ЕстьВзаимозачеты;
	
	Элементы.ЗаявкиСформироватьПлатежиИОтправитьВБанк.Видимость = ЕстьБезНал;
	Элементы.ЗаявкиСформироватьРКО.Видимость = ЕстьНал;
	Элементы.ЗаявкиСформироватьВзаимозачеты.Видимость = ЕстьВзаимозачеты;
				 	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПроверкаЗаявкиПрочее();
	
	//Если НЕ ПустаяСтрока(Заявка) Тогда
	//	ЗаполнитьТЧ();
	//КонецЕсли;
	
	// группировка с учетом основания
	Элементы.УчитыватьНазначениеПриГруппировке.Доступность = ГруппироватьПлатежи;
	
	Если Не ГруппироватьПлатежи Тогда
		УчитыватьНазначениеПриГруппировке = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаЗаявкиПрочее()
	//Если Заявка.ТипИсточника = Перечисления.Д_ИсточникиСредств.Прочий Тогда
	//	Элементы.Предприятие.Видимость = Истина;
	//	Предприятие = ПараметрыСеанса.ТекущееПредприятие;
	//Иначе
	//	Элементы.Предприятие.Видимость = Ложь;	
	//КонецЕсли;
	//

КонецПроцедуры


&НаКлиенте
Процедура ЗаявкаПриИзменении(Элемент)
	Если НЕ ПустаяСтрока(Заявка) Тогда
		ЗаполнитьТЧ(Элементы.ЗаявкиТаблица.ТекущаяСтрока);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиПриАктивизацииСтроки(Элемент)
	ТекДанные = Элементы.Заявки.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Элементы.ЗаявкиОтменитьСтроку.Видимость = Ложь;
		Возврат;	
	КонецЕсли;
	
	Элементы.ЗаявкиОтменитьСтроку.Видимость = Истина;

	Элементы.Группа3.Видимость = ЗначениеЗаполнено(ТекДанные.Ведомость);
	Элементы.ЗаявкиСформироватьРКО.Доступность = Не ЗначениеЗаполнено(ТекДанные.Ведомость);
	//Ведомость = ТекДанные.Ведомость;
	
	Если ЗначениеЗаполнено(ТекДанные.Ведомость) Тогда
		СтруктураТЧВедомости = ЗаявкиПриАктивизацииСтрокиНаСервере(ТекДанные.Ведомость);	
		Ведомость.Очистить();
		Для каждого ТекСтрока Из СтруктураТЧВедомости Цикл
			НоваяСтрока = Ведомость.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);		
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаявкиПриАктивизацииСтрокиНаСервере(Ссылка)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	УЧ_ВыплатаЗПТабличнаяЧасть.Ссылка КАК Ссылка,
	|	УЧ_ВыплатаЗПТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|	УЧ_ВыплатаЗПТабличнаяЧасть.Сотрудник КАК Сотрудник,
	|	УЧ_ВыплатаЗПТабличнаяЧасть.Сумма КАК Сумма,
	|	УЧ_ВыплатаЗПТабличнаяЧасть.Предприятие КАК Предприятие,
	|	УЧ_ВыплатаЗПТабличнаяЧасть.Подразделение КАК Подразделение,
	|	УЧ_ВыплатаЗПТабличнаяЧасть.ВидНачисления КАК ВидНачисления,
	|	УЧ_ВыплатаЗПТабличнаяЧасть.Комментарий КАК Комментарий,
	|	УЧ_ВыплатаЗПТабличнаяЧасть.КорПодразделение КАК КорПодразделение,
	|	УЧ_ВыплатаЗПТабличнаяЧасть.ДокументВыплаты КАК ДокументВыплаты,
	|	УЧ_ВыплатаЗПТабличнаяЧасть.СуммаВыплачено КАК СуммаВыплачено
	|ИЗ
	|	Документ.УЧ_ВыплатаЗП.ТабличнаяЧасть КАК УЧ_ВыплатаЗПТабличнаяЧасть
	|ГДЕ
	|	УЧ_ВыплатаЗПТабличнаяЧасть.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Выборка);
		
КонецФункции

&НаКлиенте
Процедура СоздатьПлатежку(Команда)
	
	Для каждого ТекСтрока Из Элементы.Заявки.ВыделенныеСтроки Цикл
		ТекущаяСтрока =  Элементы.Заявки.ДанныеСтроки(ТекСтрока);
		
		Если ТекущаяСтрока.СуммаОплачено >= ТекущаяСтрока.СуммаДокумента Тогда
			Сообщить("Данная строка уже обработана!");
			Возврат;		
		КонецЕсли;
		
		Если Не ТипЗнч(ТекущаяСтрока.Плательщик) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			Сообщить("Данная строка не является безналичной оплатой!");
			Возврат;		
		КонецЕсли;
		
		СтруктураЗначений = Новый Структура;
		ИндексСтроки = Заявки.Индекс(Заявки.НайтиПоИдентификатору(ТекСтрока));
		ЗаполнитьСтруктуру(СтруктураЗначений, ИндексСтроки);
		СтруктураЗначений.Вставить("Заявка", ?(ЗначениеЗаполнено(Заявка), Заявка, Элементы.ЗаявкиТаблица.ДанныеСтроки(Элементы.ЗаявкиТаблица.ТекущаяСтрока).Ссылка));
		
		ОткрытьФорму("Документ.ПлатежноеПоручение.ФормаОбъекта", Новый Структура("Основание", СтруктураЗначений)); 
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуру(СтруктураЗначений, НомерСтроки)
	Для каждого ТекКолонка Из Заявки.Выгрузить().Колонки Цикл
		СтруктураЗначений.Вставить(ТекКолонка.Имя, Заявки[НомерСтроки][ТекКолонка.Имя]);	
	КонецЦикла;
	//СтруктураЗначений.Вставить("ЦФО", ЦФО.Выгрузить());
КонецПроцедуры // ()
  
&НаСервере
Функция Выгрузить(НомерСтроки, ЗаявкаСсылка)
	
	
	СтруктураОтбора = Новый Структура("НомерСтрокиЗаявки", НомерСтроки);
	МассивСтрок = ЦФО.НайтиСтроки(СтруктураОтбора);
	
	ТаблицаПлатежек = Новый ТаблицаЗначений;
	ТаблицаПлатежек.Колонки.Добавить("Платежка");
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Платежка");	
	ТЗ.Колонки.Добавить("Дата");
	ТЗ.Колонки.Добавить("Агент");
	ТЗ.Колонки.Добавить("ПодразделениеАгента");
	ТЗ.Колонки.Добавить("Предприятие");
	ТЗ.Колонки.Добавить("ПодразделениеПредприятия");
	ТЗ.Колонки.Добавить("ТипИсточника");
	ТЗ.Колонки.Добавить("Статья");
	ТЗ.Колонки.Добавить("Плательщик");
	ТЗ.Колонки.Добавить("Получатель");
	ТЗ.Колонки.Добавить("Подотчет");
	ТЗ.Колонки.Добавить("Через");
	ТЗ.Колонки.Добавить("Сумма");
	ТЗ.Колонки.Добавить("НомерСтроки");
	ТЗ.Колонки.Добавить("НазначениеПлатежа");
	ТЗВнутр = ТЗ.СкопироватьКолонки();
	
	Для каждого СтрокаВыгрузки Из МассивСтрок Цикл
		
		Если НЕ ПустаяСтрока(СтрокаВыгрузки.ПлатежноеПоручение) Тогда 
			Сообщить("Вы уже создали документы Движения ДС по данной заявке.");
			Возврат Ложь;
		КонецЕсли;
		СтрокаЗаявки = Заявки[СтрокаВыгрузки.НомерСтрокиЗаявки];
		
		
		
		РеальныйАгент = СтрокаЗаявки.Предприятие;
		НоваяСтрокаПлатежек = ТаблицаПлатежек.Добавить();
		НоваяСтрокаПлатежек.Платежка = ЗаявкаСсылка;
		Если ТипЗнч(СтрокаЗаявки.Плательщик)=Тип("СправочникСсылка.Кассы") И ТипЗнч(СтрокаЗаявки.Контрагент)=Тип("СправочникСсылка.Источники") Тогда
			НоваяСтрока = ТЗВнутр.Добавить();
		Иначе
			НоваяСтрока = ТЗ.Добавить();
		КонецЕсли;
		НоваяСтрока.Платежка = ЗаявкаСсылка;
		НоваяСтрока.Дата = НачалоДня(ТекущаяДата());
		НоваяСтрока.Агент = РеальныйАгент;
		НоваяСтрока.ПодразделениеАгента = СтрокаЗаявки.Подразделение;
		
		НоваяСтрока.Предприятие = СтрокаВыгрузки.ЦФО;
		НоваяСтрока.ПодразделениеПредприятия = СтрокаВыгрузки.Подразделение;
		
		НоваяСтрока.Статья = СтрокаВыгрузки.СтатьяДДС;
		НоваяСтрока.ТипИсточника = СтрокаЗаявки.Источник.ВидИсточника;
		НоваяСтрока.Плательщик = СтрокаЗаявки.Источник;
		НоваяСтрока.Получатель = СтрокаЗаявки.Контрагент;
		НоваяСтрока.Сумма = СтрокаВыгрузки.Сумма;
		НоваяСтрока.НомерСтроки = СтрокаВыгрузки.НомерСтрокиРеальный;
		НоваяСтрока.НазначениеПлатежа = СтрокаЗаявки.НазначениеПлатежа;
	КонецЦикла;
	
	
	ТаблицаПлатежек.Свернуть("Платежка");
	
	Фильтр = Новый Структура;
	НачатьТранзакцию();
	
	Для Каждого ТекСтрока Из ТаблицаПлатежек Цикл
		Фильтр.Вставить("Платежка",ТекСтрока.Платежка);	
		ТаблицаДокумента = ТЗ.НайтиСтроки(Фильтр);
		ТаблицаДокументаВнутр = ТЗВнутр.НайтиСтроки(Фильтр);
		БюджетныйНаСервере.ДокументыНов(ТаблицаДокумента,ТаблицаДокументаВнутр);
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура СоздатьДвижениеДС(Команда)
	Если Элементы.Предприятие.Видимость И Предприятие.Пустая() Тогда
		Предупреждение("Вы являетесь исполнителем оплаты по данной заявке. Укажите предприятие-плательщик.");
		Возврат;
	КонецЕсли;
	
	Для каждого ТекСтрока Из Элементы.Заявки.ВыделенныеСтроки Цикл
		//Предприятие = Элементы.Заявки.ТекущиеДанные.Предприятие;
		ТекущаяСтрока =  Заявки.НайтиПоИдентификатору(ТекСтрока);
		НомерСтроки = Заявки.Индекс(ТекущаяСтрока);
		УспешноСозданы = Выгрузить(НомерСтроки, ?(ЗначениеЗаполнено(Заявка), Заявка, Элементы.ЗаявкиТаблица.ДанныеСтроки(Элементы.ЗаявкиТаблица.ТекущаяСтрока).Ссылка));		
	КонецЦикла; 
	
	Если НЕ Элементы.Заявки.ВыделенныеСтроки.Количество() Тогда
		Предупреждение("Не выбрана заявка!");
	Иначе
		Если УспешноСозданы Тогда
			Предупреждение("Документы успешно созданы.");
		Иначе
			Предупреждение("Ошибка создания документов.");
		КонецЕсли; 
	КонецЕсли;
	
	//Если НЕ ПустаяСтрока(Заявка) Тогда
	//	ЗаполнитьТЧ();
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦФОВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Не ПустаяСтрока(Элементы.ЦФО.ТекущиеДанные.ПлатежноеПоручение) Тогда
		ОткрытьЗначение(Элементы.ЦФО.ТекущиеДанные.ПлатежноеПоручение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Документ.Д_ЗаявкаНаОплату.Форма.ФормаВыбораПоАдресату",, Элемент); 
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПриложение(Команда)
	ЭлементыДерева = Элементы.ЦФО.ТекущаяСтрока;
	ТекущаяСтрока =  ЦФО.НайтиПоИдентификатору(ЭлементыДерева);
	ОткрытьЗначение(ТекущаяСтрока.Приложение);
КонецПроцедуры

&НаКлиенте
Процедура ЦФОПриАктивизацииСтроки(Элемент)
	ЭлементыДерева = Элементы.ЦФО.ТекущаяСтрока;
	Если НЕ ЭлементыДерева = Неопределено И БюджетныйНаСервере.РольДоступнаСервер("РасчетныйОтдел") Тогда
		ТекущаяСтрока =  ЦФО.НайтиПоИдентификатору(ЭлементыДерева);
		Элементы.ЦФООткрытьПриложение.Доступность = 1 - ПустаяСтрока(ТекущаяСтрока.Приложение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГруппироватьПлатежиПриИзменении(Элемент)
	
	// группировка с учетом основания
	Элементы.УчитыватьНазначениеПриГруппировке.Доступность = ГруппироватьПлатежи;
	
	Если Не ГруппироватьПлатежи Тогда
		УчитыватьНазначениеПриГруппировке = Ложь;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Заявка) Тогда
		//Если ГруппироватьПлатежи Тогда
		//	Сообщить("Группировка будет произведена по следующим полям:
		//	| Предприятие, 
		//	| Контрагент, 
		//	| Плательщик, 
		//	| Счет контрагента, 
		//	| Банковский счет, 
		//	| Ставка НДС, 
		//	| Вид операции, 
		//	| Код БК, 
		//	| Код ОКАТО, 
		//	| Статус составителя");
		//КонецЕсли;
		ЗаполнитьТЧ(Элементы.ЗаявкиТаблица.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПредприятиеПриИзменении(Элемент)
	ЗаполнитьТЧ(Элементы.ЗаявкиТаблица.ТекущаяСтрока);
КонецПроцедуры


&НаКлиенте
Процедура СоздатьРКО(Команда)
	
	Для каждого ТекСтрока Из Элементы.Заявки.ВыделенныеСтроки Цикл
		
		//Предприятие = Элементы.Заявки.ТекущиеДанные.Предприятие;
		ТекущаяСтрока =  Заявки.НайтиПоИдентификатору(ТекСтрока);
		
		НомерСтроки = Заявки.Индекс(ТекущаяСтрока);
		СтруктураОтбора = Новый Структура("НомерСтрокиЗаявки", НомерСтроки);
		МассивСтрок = ЦФО.НайтиСтроки(СтруктураОтбора);
		
		
		ФормаПлатежки = ПолучитьФорму("Документ.УЧ_РК.ФормаОбъекта");
		
		ФормаПлатежки.Объект.Контрагент = ТекущаяСтрока.Контрагент;
		ФормаПлатежки.Объект.Источник = ТекущаяСтрока.Источник;
		ФормаПлатежки.Объект.Сумма = ТекущаяСтрока.СуммаДокумента - ТекущаяСтрока.СуммаОплачено;
		ФормаПлатежки.Объект.Описание = ТекущаяСтрока.НазначениеПлатежа2;
		ФормаПлатежки.Объект.ВидОперации = ?(ТипЗнч(ТекущаяСтрока.Контрагент) = Тип("СправочникСсылка.Организации"), ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ОплатаВНХ"), ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.Оплата"));
		ФормаПлатежки.Объект.ДокОснование = ?(ЗначениеЗаполнено(Заявка), Заявка, Элементы.ЗаявкиТаблица.ДанныеСтроки(Элементы.ЗаявкиТаблица.ТекущаяСтрока).Ссылка);
		
		ИспользуетсяМеханизмЧачтичнойОплаты = БПСервер.ИспользуетсяМеханизмЧастичнойОплаты(БюджетныйНаСервере.ВернутьРеквизит(?(ЗначениеЗаполнено(Заявка), Заявка, Элементы.ЗаявкиТаблица.ДанныеСтроки(Элементы.ЗаявкиТаблица.ТекущаяСтрока).Ссылка), "Предприятие"));
		
		Если ИспользуетсяМеханизмЧачтичнойОплаты Тогда
			ФормаПлатежки.Объект.НомерЗадачи = НомерЗадачи;
		КонецЕсли;	
		
		Для каждого ТекЦФО Из МассивСтрок Цикл
			
			Если ИспользуетсяМеханизмЧачтичнойОплаты Тогда
				
				Если Не БПСервер.НайтиПлатежкиНоНомеруЗадачи(НомерЗадачи) = Неопределено Тогда 
					Сообщить("Вы уже создали кассовый ордер по данной заявке.");
					Возврат;
				КонецЕсли;
				
			Иначе
								
				Если ЗначениеЗаполнено(ТекЦФО.ПлатежноеПоручение) Тогда 
					Сообщить("Вы уже создали кассовый ордер по данной заявке.");
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
			ТекПП = ВернутьПредприятиеИсточнику(ТекущаяДата(), ФормаПлатежки.Объект.Источник);
			
			Если НЕ ЗначениеЗаполнено(ТекПП) Тогда
				ТекПП = БюджетныйНаСервере.ВернутьРеквизит(?(ЗначениеЗаполнено(Заявка), Заявка, Элементы.ЗаявкиТаблица.ДанныеСтроки(Элементы.ЗаявкиТаблица.ТекущаяСтрока).Ссылка), "Предприятие");
			КонецЕсли; 
			
			//Если БюджетныйНаСервере.РольДоступнаСервер("Кассир") Тогда
			//	ТекПП = Казна();
			//	ФормаПлатежки.Объект.Источник = "";
			//Иначе
			
			// обращение № 3900 {
			//Если Строка(ФормаПлатежки.Объект.Источник) = "Казна" Тогда 
			//	ТекПП = Казна();
			//КонецЕсли;
			//}
				ДоступныеПредприятия = БюджетныйНаСервере.ПолучитьПредприятия();
				//Если ДоступныеПредприятия.Найти(ТекЦФО.ЦФО) = Неопределено Тогда
				//Если НЕ ДоступныеПредприятия.Найти(БюджетныйНаСервере.ВернутьРеквизит(Заявка, "Предприятие")) = Неопределено Тогда
				
				
				Если ДоступныеПредприятия.Найти(ТекПП) = Неопределено Тогда
					ТекПП = "";
					Предупреждение("Вы являетесь исполнителем оплаты. В заявке не указано с какого проекта производится оплата, поэтому проверьте реквизит ""предприятие"" в создаваемом документе.");
				КонецЕсли;
				
				//Иначе 
				ФормаПлатежки.Объект.ЦФО = ТекЦФО.ЦФО;
				ФормаПлатежки.Объект.ПодразделениеЦФО = ТекЦФО.Подразделение;
				ФормаПлатежки.Объект.ИнвПроект = ТекЦФО.ИнвПроект;
				
				Если НЕ ТекЦФО.ЦФО = ТекПП Тогда
					ФормаПлатежки.Объект.НепрямойПлатеж = Истина;				
				КонецЕсли;
				
				
				//КонецЕсли;
			//КонецЕсли;
			ФормаПлатежки.Объект.Предприятие = ТекПП;
			ФормаПлатежки.Объект.Счет = СчетКасса(ТекПП, ТекущаяСтрока.Источник, ТекущаяДата());
			//ФормаПлатежки.Объект.Подразделение = БюджетныйНаСервере.ВернутьРеквизит(ТекПП, "ВидДеятельности");
			Если ТекПП = ТекЦФО.ЦФО Тогда 
				ФормаПлатежки.Объект.Подразделение = ТекЦФО.Подразделение;
			Иначе
				ФормаПлатежки.Объект.Подразделение = БюджетныйНаСервере.ВернутьРеквизит(?(ЗначениеЗаполнено(Заявка), Заявка, Элементы.ЗаявкиТаблица.ДанныеСтроки(Элементы.ЗаявкиТаблица.ТекущаяСтрока).Ссылка), "Подразделение");
			КонецЕсли;
			
			ФормаПлатежки.Объект.Статья = ТекЦФО.СтатьяДДС;
			ФормаПлатежки.НомерСтроки.Добавить(ТекЦФО.НомерСтрокиРеальный);
		КонецЦикла; 
		
		Если ТекЦФО.ЦФО = Казна() Тогда
			
			Если ТипЗнч(ТекущаяСтрока.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				ФормаПлатежки.Объект.КорСчет = Вернуть710Счет();
				ФормаПлатежки.Объект.КорСубконто1 = ТекущаяСтрока.Контрагент;
			ИначеЕсли ПроверитьВладельцаПодразделения(ТекЦФО.Подразделение) Тогда
				ФормаПлатежки.Объект.КорСчет = Вернуть910Счет();
				ФормаПлатежки.Объект.КорСубконто1 = ТекЦФО.СтатьяДДС;
			КонецЕсли;
			
		ИначеЕсли ТекущаяСтрока.ПодотчетИзЗаявки Тогда
			
			Если ТипЗнч(ТекущаяСтрока.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				ФормаПлатежки.Объект.КорСчет = ПредопределенноеЗначение("ПланСчетов.Учетный.ПОКассаУч");
				ФормаПлатежки.Объект.КорСубконто1 = ТекущаяСтрока.Контрагент;
			КонецЕсли;
			
		Иначе	
			
			Если УЧ_Сервер.ПроводкиКассовыхОрдеровПоУчетуВключены() Тогда
				ТекКорСчет = ПредопределенноеЗначение("ПланСчетов.Учетный.ПрочиеВзаиморасчеты");
				
				//Если ЗначениеЗаполнено(ТекущаяСтрока.Договор) Тогда
				//	СчетДоговора = БюджетныйНаСервере.ВернутьРеквизит(ТекущаяСтрока.Договор, "СчетВзаиморасчетов");
				//	
				//	Если ЗначениеЗаполнено(СчетДоговора) Тогда
				//		ТекКорСчет = СчетДоговора
				//	Иначе
				//		ТекКорСчет = ТекущаяСтрока.СчетВзаиморасчетов
				//	КонецЕсли;
				//	
				//Иначе
				//	ТекКорСчет = ТекущаяСтрока.СчетВзаиморасчетов
				//КонецЕсли;
								
				ФормаПлатежки.Объект.КорСчет = ТекКорСчет; 
				ФормаПлатежки.Объект.КорСубконто1 = БюджетныйНаСервере.СправочникНайтиПоНаименованию("Контрагенты", "КО к разнесению", Истина); 
				ФормаПлатежки.Объект.КорСубконто2 = ТекущаяСтрока.Договор;
			Иначе
				ФормаПлатежки.Объект.КорСчет = Вернуть100Счет(ТекущаяСтрока.Источник, ТекПП);
				ФормаПлатежки.Объект.КорСубконто1 = ТекЦФО.ЦФО;
				ФормаПлатежки.Объект.КорСубконто2 = ТекЦФО.Подразделение;
			КонецЕсли;
			
		КонецЕсли;		
		
		// ТЧ КЗ_РК обращение №987 {
		НомерСтроки = Заявки.Индекс(ТекущаяСтрока);
		СтруктураОтбора = Новый Структура("НомерСтрокиЗаявки", НомерСтроки);
		МассивСтрок = ЦФО.НайтиСтроки(СтруктураОтбора);		
		ТЧ = ФормаПлатежки.Объект.Проводки;
		
		Для каждого ТекЦФО Из МассивСтрок Цикл
			
			Если ИспользуетсяМеханизмЧачтичнойОплаты Тогда
				
				Если Не БПСервер.НайтиПлатежкиНоНомеруЗадачи(НомерЗадачи) = Неопределено Тогда 
					Сообщить("Вы уже создали платежное поручение по данной заявке.");
					Возврат;
				КонецЕсли;
				
			Иначе
				
				Если ЗначениеЗаполнено(ТекЦФО.ПлатежноеПоручение) Тогда 
					Сообщить("Вы уже создали платежное поручение по данной заявке.");
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
			НоваяСтрока = ТЧ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекЦФО);
			НоваяСтрока.ФинЦФО = ТекЦФО.ЦФО;
			НоваяСтрока.ФинПодразделение = ТекЦФО.Подразделение;
			НоваяСтрока.ФинСтатья = ТекЦФО.СтатьяДДС;
			НоваяСтрока.УИДСтрокиЗаявки = ТекЦФО.УИДСтроки;	
			
			// остальные реквизиты по умолчанию заполняем из шапки
			НоваяСтрока.КорСчет = ФормаПлатежки.Объект.КорСчет;
			НоваяСтрока.КорСубконто1 = ФормаПлатежки.Объект.КорСубконто1;
			НоваяСтрока.КорСубконто2 = ФормаПлатежки.Объект.КорСубконто2;
			НоваяСтрока.Содержание = ФормаПлатежки.Объект.Описание;
			
			ФормаПлатежки.НомерСтроки.Добавить(ТекЦФО.НомерСтрокиРеальный);
		КонецЦикла; 
		//}
		
		ФормаПлатежки.Открыть();
		//ПриОткрытии(0);
	КонецЦикла;
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция СчетКасса(ТекПП, ТекИсточник, ТекДата)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Д_ИсточникППСрезПоследних.Предприятие
	               |ИЗ
	               |	РегистрСведений.Д_ИсточникПП.СрезПоследних(&Дата, БанковскиеСчета = &Источник) КАК Д_ИсточникППСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", ТекДата);
	Запрос.УстановитьПараметр("Источник", ТекИсточник);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ПредприятиеИсточника = Неопределено;
	Пока Выборка.Следующий() Цикл
		ПредприятиеИсточника = Выборка.Предприятие;	
	КонецЦикла;
	
	Если УЧ_Сервер.ПроводкиКассовыхОрдеровПоУчетуВключены() Тогда
		Возврат ПланыСчетов.Учетный.Счет5001();	
	Иначе
		Если НЕ ТекИсточник.Местный ИЛИ НЕ ПредприятиеИсточника = Константы.сабПредприятиеКазна.Получить() Тогда
			Возврат ПланыСчетов.Казна.Касса;	
		Иначе	
			Возврат ПланыСчетов.Казна._001_03;	
		КонецЕсли;
	КонецЕсли;
КонецФункции // ()

&НаСервереБезКонтекста
Функция Казна()

	Возврат Константы.сабПредприятиеКазна.Получить();

КонецФункции // ()

&НаКлиенте
Процедура ЗаписатьРКО(Команда)
	ЗаписатьРКСервер(?(ЗначениеЗаполнено(Заявка), Заявка, Элементы.ЗаявкиТаблица.ДанныеСтроки(Элементы.ЗаявкиТаблица.ТекущаяСтрока).Ссылка));
	ПриОткрытии(0);
КонецПроцедуры

&НаСервере
Процедура ЗаписатьРКСервер(ЗаявкаСсылка)
	
	НачатьТранзакцию();
	
	Для каждого ТекСтрока Из Элементы.Заявки.ВыделенныеСтроки Цикл
		НомерСтрокиДока.Очистить();
		//Предприятие = Элементы.Заявки.ТекущиеДанные.Предприятие;
		ТекущаяСтрока =  Заявки.НайтиПоИдентификатору(ТекСтрока);
		
		НомерСтроки = Заявки.Индекс(ТекущаяСтрока);
		СтруктураОтбора = Новый Структура("НомерСтрокиЗаявки", НомерСтроки);
		МассивСтрок = ЦФО.НайтиСтроки(СтруктураОтбора);
		
		
		ФормаПлатежки = Документы.УЧ_РК.СоздатьДокумент();
		ФормаПлатежки.Дата = ТекущаяДата();
		ФормаПлатежки.Контрагент = ТекущаяСтрока.Контрагент;
		
		ФормаПлатежки.Источник = ТекущаяСтрока.Источник;
		ФормаПлатежки.Сумма = ТекущаяСтрока.СуммаДокумента - ТекущаяСтрока.СуммаОплачено;
		ФормаПлатежки.Описание = ТекущаяСтрока.НазначениеПлатежа2;
		ФормаПлатежки.Объект.ВидОперации = ?(ТипЗнч(ТекущаяСтрока.Контрагент) = Тип("СправочникСсылка.Организации"), ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ОплатаВНХ"), ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.Оплата"));
		ФормаПлатежки.ДокОснование = ?(ЗначениеЗаполнено(Заявка), Заявка, Элементы.ЗаявкиТаблица.ДанныеСтроки(Элементы.ЗаявкиТаблица.ТекущаяСтрока).Ссылка);
		ИспользуетсяМеханизмЧачтичнойОплаты = БПСервер.ИспользуетсяМеханизмЧастичнойОплаты(БюджетныйНаСервере.ВернутьРеквизит(?(ЗначениеЗаполнено(Заявка), Заявка, Элементы.ЗаявкиТаблица.ДанныеСтроки(Элементы.ЗаявкиТаблица.ТекущаяСтрока).Ссылка), "Предприятие"));
		
		Если ИспользуетсяМеханизмЧачтичнойОплаты Тогда
			ФормаПлатежки.Объект.НомерЗадачи = НомерЗадачи;
		КонецЕсли;	
		
		Для каждого ТекЦФО Из МассивСтрок Цикл
			
			Если ИспользуетсяМеханизмЧачтичнойОплаты Тогда
				
				Если Не БПСервер.НайтиПлатежкиНоНомеруЗадачи(НомерЗадачи) = Неопределено Тогда 
					Сообщить("Вы уже создали кассовый ордер по данной заявке.");
					Возврат;
				КонецЕсли;
				
			Иначе
								
				Если ЗначениеЗаполнено(ТекЦФО.ПлатежноеПоручение) Тогда 
					Сообщить("Вы уже создали кассовый ордер по данной заявке.");
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
			ТекПП = ВернутьПредприятиеИсточнику(ТекущаяДата(), ФормаПлатежки.Объект.Источник);
			
			Если НЕ ЗначениеЗаполнено(ТекПП) Тогда
				ТекПП = БюджетныйНаСервере.ВернутьРеквизит(?(ЗначениеЗаполнено(Заявка), Заявка, Элементы.ЗаявкиТаблица.ДанныеСтроки(Элементы.ЗаявкиТаблица.ТекущаяСтрока).Ссылка), "Предприятие");
			КонецЕсли; 
			
			
			//Если БюджетныйНаСервере.РольДоступнаСервер("Кассир") Тогда
			//	ТекПП = Казна();
			//	ФормаПлатежки.Источник = "";
			//Иначе
				ДоступныеПредприятия = БюджетныйНаСервере.ПолучитьПредприятия();
				Если ДоступныеПредприятия.Найти(ТекПП) = Неопределено Тогда
					ТекПП = ДоступныеПредприятия[0];
					Сообщить("Вы являетесь исполнителем оплаты. В заявке не указано с какого проекта производится оплата, поэтому проверьте реквизит ""предприятие"" в созданных документах.");
				КонецЕсли;
				ФормаПлатежки.ЦФО = ТекЦФО.ЦФО;
				ФормаПлатежки.ПодразделениеЦФО = ТекЦФО.Подразделение;
				ФормаПлатежки.ИнвПроект = ТекЦФО.ИнвПроект;
				Если НЕ ТекЦФО.ЦФО = ТекПП Тогда
					ФормаПлатежки.НепрямойПлатеж = Истина;				
				КонецЕсли;
			//КонецЕсли;
			ФормаПлатежки.Предприятие = ТекПП;
			ФормаПлатежки.Счет = СчетКасса(ТекПП, ТекущаяСтрока.Источник, ТекущаяДата());
			Если ТекПП = ТекЦФО.ЦФО Тогда 
				ФормаПлатежки.Подразделение = ТекЦФО.Подразделение;
			Иначе
				ФормаПлатежки.Подразделение = БюджетныйНаСервере.ВернутьРеквизит(?(ЗначениеЗаполнено(Заявка), Заявка, Элементы.ЗаявкиТаблица.ДанныеСтроки(Элементы.ЗаявкиТаблица.ТекущаяСтрока).Ссылка), "Подразделение");
			КонецЕсли;
			ФормаПлатежки.Статья = ТекЦФО.СтатьяДДС;
			НомерСтрокиДока.Добавить(ТекЦФО.НомерСтрокиРеальный);
		КонецЦикла;
		
		Если ТекЦФО.ЦФО = Казна() Тогда
			Если ТипЗнч(ТекущаяСтрока.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				ФормаПлатежки.КорСчет = Вернуть710Счет();
				ФормаПлатежки.КорСубконто1 = ТекущаяСтрока.Контрагент;
			ИначеЕсли ПроверитьВладельцаПодразделения(ТекЦФО.Подразделение) Тогда
				ФормаПлатежки.КорСчет = Вернуть910Счет();
				ФормаПлатежки.КорСубконто1 = ТекЦФО.СтатьяДДС;
			КонецЕсли;	
		Иначе
			ФормаПлатежки.КорСчет = Вернуть100Счет(ТекущаяСтрока.Источник, ТекПП);
			ФормаПлатежки.КорСубконто1 = ТекЦФО.ЦФО;
			ФормаПлатежки.КорСубконто2 = ТекЦФО.Подразделение;
		КонецЕсли;		
		ФормаПлатежки.Записать();
		
		ЗаявкаОбъект = ЗаявкаСсылка.ПолучитьОбъект();
		Записывать = Ложь;
		Для каждого ТекСтрока Из НомерСтрокиДока Цикл
			Если НЕ ЗаявкаОбъект.ЗаявкаБезнал[ТекСтрока.Значение - 1].ПлатежноеПоручение = ФормаПлатежки.Ссылка Тогда
				Записывать = Истина;
				ЗаявкаОбъект.ЗаявкаБезнал[ТекСтрока.Значение - 1].ПлатежноеПоручение = ФормаПлатежки.Ссылка;		
			КонецЕсли;
		КонецЦикла;
		Если Записывать Тогда
			ЗаявкаОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаСервере
Функция Вернуть710Счет()
	
	Возврат ПланыСчетов.Казна.Подотчет;
	
КонецФункции 

&НаСервере
Функция Вернуть100Счет(Источник, ТекПП) 
	
	//Если Источник.Местный И ТекПП.ПредприятиеСпиртовогоКонтура Тогда
	//	Счет = ПланыСчетов.Казна.ТекущиеВнеконтурныеСчета
	//Иначе
	Счет = ПланыСчетов.Казна.ТекущиеСчета;
	//КонецЕсли;
	
	Возврат Счет;
	
КонецФункции 	

&НаСервере
Функция Вернуть910Счет()
	
	Возврат ПланыСчетов.Казна.НовыйПрибыльИУбытки;
	
КонецФункции 

&НаСервере
Функция ПроверитьВладельцаПодразделения(Подразделение)
	
	Если Подразделение.Владелец = Константы.сабПредприятиеКазна.Получить() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции	

&НаСервере
Функция ВернутьСтатью(СтатьяДДС)
	
	Возврат Справочники.КЗ_СтатьиДоходовИРасходов.НайтиПоРеквизиту("СтатьяДДС", СтатьяДДС);
	
КонецФункции	

&НаСервереБезКонтекста
Функция ВернутьПредприятиеИсточнику(Дата, Источник)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Д_ИсточникППСрезПоследних.Предприятие
	|ИЗ
	|	РегистрСведений.Д_ИсточникПП.СрезПоследних(&Период, БанковскиеСчета = &Источник) КАК Д_ИсточникППСрезПоследних";
	
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Источник", Источник);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Возврат Выборка.Предприятие;	
		
	КонецЦикла;
	
	
КонецФункции // ()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьОбработкуЗаявок" ИЛИ ИмяСобытия = "сабОбноватьПлатежныйКалендарь" Тогда
		ПриОткрытии(Неопределено);
		ЗаявкиТаблицаПриАктивизацииСтроки(Неопределено);
		Элементы.ЗаявкиТаблица.Обновить();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРКО_ДДС(Команда)
	
	Для каждого ТекСтрока Из Элементы.Заявки.ВыделенныеСтроки Цикл
		ТекущаяСтрока =  Элементы.Заявки.ДанныеСтроки(ТекСтрока);
		
		Если ТекущаяСтрока.СуммаОплачено >= ТекущаяСтрока.СуммаДокумента Тогда
			Сообщить("Данная строка уже обработана!");
			Возврат;		
		КонецЕсли;
		
		Если Не ТипЗнч(ТекущаяСтрока.Плательщик) = Тип("СправочникСсылка.Кассы") Тогда
			Сообщить("Данная строка не является наличной оплатой!");
			Возврат;		
		КонецЕсли;
		
		СтруктураЗначений = Новый Структура;
		ИндексСтроки = Заявки.Индекс(Заявки.НайтиПоИдентификатору(ТекСтрока));
		ЗаполнитьСтруктуру(СтруктураЗначений, ИндексСтроки);
		СтруктураЗначений.Вставить("Заявка", ?(ЗначениеЗаполнено(Заявка), Заявка, Элементы.ЗаявкиТаблица.ДанныеСтроки(Элементы.ЗаявкиТаблица.ТекущаяСтрока).Ссылка));
		СтруктураЗначений.Вставить("ЗаявкаНаФинансирование", ТекущаяСтрока.ЗаявкаНаФинансирование);
		
		РеквизитыКассы = БюджетныйНаСервере.ВернутьРеквизиты(ТекущаяСтрока.Плательщик, "ВидИсточника");
		ЭтоУчетнаяКасса = РеквизитыКассы.ВидИсточника = ПредопределенноеЗначение("Перечисление.ГД_ВидыИсточников.КассаУчет");
		Если ЭтоУчетнаяКасса Тогда
			ОткрытьФорму("Документ.УЧ_ДвижениеДС.ФормаОбъекта", Новый Структура("Основание", СтруктураЗначений)); 
		Иначе
			ОткрытьФорму("Документ.РасходныйКассовыйОрдер.ФормаОбъекта", Новый Структура("Основание", СтруктураЗначений)); 
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаявкиТаблица.Параметры.УстановитьЗначениеПараметра("ТочкаМаршрута", Перечисления.Согласование1ТочкиМаршрута.Действие5);
	ОплатаДо = ТекущаяДата();
	Элементы.Группа3.Видимость = Ложь;
	Элементы.ЗаявкиОтменитьСтроку.Видимость = Ложь;
	
	Если Параметры.Свойство("Заявка") Тогда
		Элементы.ЗаявкиТаблица.Видимость = Ложь;
		ЗаполнитьТЧ(Параметры.Заявка);
	Иначе
		Элементы.Заявка.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура СформироватьПлатежиИОтправитьВБанк(Команда)
		
	Для каждого ТекСтрока Из Заявки Цикл
		
		Если ЗначениеЗаполнено(ТекСтрока.Ведомость) Тогда
			Сообщить("Строка содержит ведомость по сотрудникам, автоматическое создание документа оплаты невозможно.");
			Продолжить;		
		КонецЕсли;
		
		Если ТекСтрока.СуммаОплачено >= ТекСтрока.СуммаДокумента ИЛИ Не ТипЗнч(ТекСтрока.Плательщик) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			Продолжить;		
		КонецЕсли;
		Состояние("Создание платежных поручений", (Заявки.Индекс(ТекСтрока) + 1) / Заявки.Количество() * 100, "Строка " + (Заявки.Индекс(ТекСтрока) + 1));
		СоздатьПлатежкуНаСервере(Заявки.Индекс(ТекСтрока), ?(ЗначениеЗаполнено(Заявка), Заявка, Элементы.ЗаявкиТаблица.ДанныеСтроки(Элементы.ЗаявкиТаблица.ТекущаяСтрока).Ссылка));
		
	КонецЦикла;
		
	ОткрытьФорму("Обработка.сабКлиентБанк.Форма", Новый Структура("РеестрЗаявок", ?(ЗначениеЗаполнено(Заявка), Заявка, Элементы.ЗаявкиТаблица.ДанныеСтроки(Элементы.ЗаявкиТаблица.ТекущаяСтрока).Ссылка)));
	
	Обновить(Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПлатежкуНаСервере(НомерСтроки, ЗаявкаСсылка)
	
	ТекСтрока = Заявки[НомерСтроки];
	
	СтруктураЗначений = Новый Структура;
	ЗаполнитьСтруктуру(СтруктураЗначений, НомерСтроки);
	СтруктураЗначений.Вставить("Заявка", ЗаявкаСсылка);
	
	НовыйДокумент = Документы.ПлатежноеПоручение.СоздатьДокумент();
	НовыйДокумент.Заполнить(СтруктураЗначений);
	НовыйДокумент.Дата = ТекущаяДата();
	НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);

КонецПроцедуры

&НаКлиенте
Процедура СформироватьРКО(Команда)
	
	Для каждого ТекСтрока Из Заявки Цикл
		
		Если ЗначениеЗаполнено(ТекСтрока.Ведомость) Тогда
			Сообщить("Строка содержит ведомость по сотрудникам, автоматическое создание документа оплаты невозможно.");
			Продолжить;		
		КонецЕсли;
		
		Объект1 = Неопределено;
		Если НЕ (ТекСтрока.СуммаОплачено >= ТекСтрока.СуммаДокумента ИЛИ НЕ ТипЗнч(ТекСтрока.Плательщик) = Тип("СправочникСсылка.Кассы") Или ТекСтрока.ИсточникПредопределенный) Тогда
			Состояние("Создание кассовых ордеров", (Заявки.Индекс(ТекСтрока) + 1) / Заявки.Количество() * 100, "Строка " + (Заявки.Индекс(ТекСтрока) + 1));
			СоздатьРКОНаСервере(Заявки.Индекс(ТекСтрока), Объект1, ?(ЗначениеЗаполнено(Заявка), Заявка, Элементы.ЗаявкиТаблица.ДанныеСтроки(Элементы.ЗаявкиТаблица.ТекущаяСтрока).Ссылка));
		КонецЕсли;
				
		Если НЕ ТекСтрока.СуммаПоступление = ТекСтрока.СуммаДокумента И ЗначениеЗаполнено(ТекСтрока.ИсточникПолучатель) Тогда
			СоздатьПКОНаСервере(Заявки.Индекс(ТекСтрока), Объект1, ТекСтрока.ИсточникПолучатель, ?(ЗначениеЗаполнено(Заявка), Заявка, Элементы.ЗаявкиТаблица.ДанныеСтроки(Элементы.ЗаявкиТаблица.ТекущаяСтрока).Ссылка));
		КонецЕсли;
		
	КонецЦикла;
	
	ПриОткрытии(Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПКОНаСервере(НомерСтроки, Объект1, ИсточникПолучатель, ЗаявкаСсылка)
	
	Если ПараметрыСеанса.ДоступныеПользователи.Найти(ИсточникПолучатель.Ответственный) = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекСтрока = Заявки[НомерСтроки];
	
	СтруктураЗначений = Новый Структура;
	ЗаполнитьСтруктуру(СтруктураЗначений, НомерСтроки);
	СтруктураЗначений.Вставить("Заявка", ЗаявкаСсылка);
	СтруктураЗначений.Вставить("ЗаявкаНаФинансирование", ТекСтрока.ЗаявкаНаФинансирование);
	СтруктураЗначений.Вставить("ЭтоПКО", Истина);
		
	НовыйДокумент = Документы.УЧ_ДвижениеДС.СоздатьДокумент();
	НовыйДокумент.Заполнить(СтруктураЗначений);
	НовыйДокумент.Дата = ТекущаяДата();
	НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);//с проведением
	
	Если ЗначениеЗаполнено(Объект1) Тогда
		НоваяЗапись = РегистрыСведений.сабСоответствиеОбъектовИнформационнойБазы.СоздатьМенеджерЗаписи();
		НоваяЗапись.Объект1 = Объект1;
		НоваяЗапись.Объект2 = НовыйДокумент.Ссылка;
		//НоваяЗапись.Период = ТекущаяДата();
		НоваяЗапись.Записать();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СоздатьРКОНаСервере(НомерСтроки, Объект1, ЗаявкаСсылка)
	
	ТекСтрока = Заявки[НомерСтроки];
	
	СтруктураЗначений = Новый Структура;
	ЗаполнитьСтруктуру(СтруктураЗначений, НомерСтроки);
	СтруктураЗначений.Вставить("Заявка", ЗаявкаСсылка);
	
	НовыйДокумент = Документы.УЧ_ДвижениеДС.СоздатьДокумент();
	НовыйДокумент.Заполнить(?(ЗначениеЗаполнено(ТекСтрока.ЗаявкаНаФинансирование), ТекСтрока.ЗаявкаНаФинансирование, СтруктураЗначений));
	НовыйДокумент.Дата = ТекущаяДата();
	НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);//с проведением
	
	Объект1 = НовыйДокумент.Ссылка;

КонецПроцедуры

&НаКлиенте
Процедура СформироватьВзаимозачеты(Команда)
	
	Для каждого ТекСтрока Из Заявки Цикл
		
		Если ТекСтрока.СуммаОплачено >= ТекСтрока.СуммаДокумента Или НЕ ТекСтрока.ИсточникПредопределенный Тогда
			Продолжить;		
		КонецЕсли;
		Состояние("Создание взаимозачетов", (Заявки.Индекс(ТекСтрока) + 1) / Заявки.Количество() * 100, "Строка " + (Заявки.Индекс(ТекСтрока) + 1));
		СоздатьРКОНаСервере(Заявки.Индекс(ТекСтрока), Неопределено, ?(ЗначениеЗаполнено(Заявка), Заявка, Элементы.ЗаявкиТаблица.ДанныеСтроки(Элементы.ЗаявкиТаблица.ТекущаяСтрока).Ссылка));
		
	КонецЦикла;

	ПриОткрытии(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСтроку(Команда)
	
	ТекСтрока = Элементы.Заявки.ТекущаяСтрока;
	ТекстСтроки = "";
	ДанныеСтроки = Элементы.Заявки.ДанныеСтроки(ТекСтрока);
	ЕстьПППоЗаявке = БПСервер.ПолучитьПППоЗаявке(ДанныеСтроки.ЗаявкаНаФинансирование);
	Если ЕстьПППоЗаявке Тогда
		Сообщить("По данной строке уже создан документ оплаты. Действие невозможно.");
		Возврат;
	КонецЕсли;
	//Если ДанныеСтроки.ОтменаОплаты Тогда
	//	Сообщить("Строка " + ДанныеСтроки.НомерСтроки + ?(ДанныеСтроки.ОтменаОплаты, " восстановлена к оплате.", ?(ЗначениеЗаполнено(ТекСтрока.ЗаявкаНаФинансирование), " будет возвращена на доработку после записи текущего Реестра.", " исключена из оплаты.")));
	//	ДанныеСтроки.ОтменаОплаты = НЕ ДанныеСтроки.ОтменаОплаты;
	//	ДанныеСтроки.Рецензент = Неопределено;
	//	ДанныеСтроки.Комментарии = "";
	//Иначе
	Если ЗначениеЗаполнено(ДанныеСтроки.ЗаявкаНаФинансирование) Тогда
		ПоказатьВводСтроки(Новый ОписаниеОповещения("ОтменитьСтрокуЗавершение", ЭтотОбъект, Новый Структура("ТекСтрока, ТекстСтроки", ТекСтрока, ТекстСтроки)), ТекстСтроки, "Укажите причину возврата на доработку",,Истина);
	Иначе
		Сообщить("Данная строка не содержит заявку на оплату. Возврат на доработку невозможен!");		
	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСтрокуЗавершение(Строка, ДополнительныеПараметры) Экспорт
	
	ТекСтрока = ДополнительныеПараметры.ТекСтрока;
	ТекстСтроки = ?(Строка = Неопределено, ДополнительныеПараметры.ТекстСтроки, Строка);
	
	Если ТипЗнч(ТекСтрока) = Тип("Число") И НЕ Строка = Неопределено Тогда
		Модифицированность = Истина;
		ДанныеСтроки = Элементы.Заявки.ДанныеСтроки(ТекСтрока);
		
		Если Строка = "" Тогда
			Сообщить("Строка не отменена. Укажите причину отмена строки.");
			Возврат;		
		КонецЕсли;
		
		ОткрепитьЗаявку(ДанныеСтроки.ЗаявкаНаФинансирование, Строка, ?(ЗначениеЗаполнено(Заявка), Заявка, Элементы.ЗаявкиТаблица.ДанныеСтроки(Элементы.ЗаявкиТаблица.ТекущаяСтрока).Ссылка));
		
	КонецЕсли;
	
	ПриОткрытии(Неопределено);
	
	Оповестить("ОбновитьПечатнуюФорму");
	
	Оповестить("сабОбноватьПлатежныйКалендарь");
	
	Оповестить("ОбновитьСписокЗадач");
	
КонецПроцедуры

&НаСервере
Процедура ОткрепитьЗаявку(ЗаявкаНаФинансирование, Строка, ЗаявкаСсылка)
	
	НачатьТранзакцию();
	
	ТекОб = ЗаявкаНаФинансирование.ПолучитьОбъект();
	ТекОб.РеестрЗаявок = Неопределено;
	ТекОб.Записать();
	
	ТекРеестрОб = ЗаявкаСсылка.ПолучитьОбъект();
	НайденныеСтроки = ТекРеестрОб.ЗаявкаБезнал.НайтиСтроки(Новый Структура("ЗаявкаНаФинансирование", ЗаявкаНаФинансирование)); 
	Для каждого ТекСтрокаРеестра Из НайденныеСтроки Цикл
		БПСервер.ОтправитьНаДоработкуБПЗаявки(ТекСтрокаРеестра);
		ТекСтрокаРеестра.ЗаявкаНаФинансирование = Неопределено;
		ТекСтрокаРеестра.ОтменаОплаты = Истина;
	КонецЦикла;
	ТекРеестрОб.Записать();
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//|	Задача.Ссылка КАК Задача,
	//|	Задача.Выполнена КАК Выполнена,
	//|	Задача.БизнесПроцесс КАК БизнесПроцесс
	//|ИЗ
	//|	Справочник.Задача КАК Задача
	//|ГДЕ
	//|	Задача.Заявка = &Заявка";
	//
	//Запрос.УстановитьПараметр("Заявка", ЗаявкаНаФинансирование);
	//
	//Результат = Запрос.Выполнить();
	//Выборка = Результат.Выгрузить();
	//
	//НевыполненныеЗадачи = Выборка.НайтиСтроки(Новый Структура("Выполнена", Ложь));
	//Для каждого ТекСтрокаВыборки Из НевыполненныеЗадачи Цикл
	//	БПСервер.ИзменитьЗадачу(ТекСтрокаВыборки.БизнесПроцесс, ЗаявкаНаФинансирование, Ложь, Строка);
	//	ЗафиксироватьТранзакцию();
	//	Возврат;
	//КонецЦикла;
	//
	//Если Выборка.Количество() Тогда
	//	ТекБП = Выборка[0].БизнесПроцесс;
	//	ТекБПОб = ТекБП.ПолучитьОбъект();
	//	ТекБПОб.Стартован = Ложь;
	//	ТекБПОб.Завершен = Ложь;
	//	Для каждого ТекСтрокаИсп Из ТекБПОб.ДопИсполнение Цикл
	//		ТекСтрокаИсп.Исполнено = Ложь;	
	//	КонецЦикла; 
	//	ТекБПОб.Записать();
	//	
	//	Задача = БПСервер.НоваяЗадача(
	//	ТекБП.Автор, 
	//	"Доработать", 
	//	ТекБП, 
	//	Перечисления.СогласованиеОбщееТочкиМаршрута.Действие1);
	//КонецЕсли;
	
	ЗафиксироватьТранзакцию();

КонецПроцедуры

#Область РКОПоВедомости

&НаКлиенте
Процедура СоздатьВыплату(Команда)
	
	ТекДанные = Элементы.ЗаявкиВедомостьТабличнаяЧасть.ДанныеСтроки(Элементы.ЗаявкиВедомостьТабличнаяЧасть.ТекущаяСтрока);
	Если ТекДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДанные.ДокументВыплаты) Тогда
		Сообщить("Документ выплаты уже создан для данной строки.");
		Возврат;	
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СоздатьВыплатуЗавершение(КодВозвратаДиалога.Да, Новый Структура("ТекДанные, Записать", ТекДанные, Ложь));
	//Иначе
	//	ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьВыплатуЗавершение", ЭтотОбъект, Новый Структура("ТекДанные, Записать", ТекДанные, Истина)), "Документ должен быть записан. Записать?", РежимДиалогаВопрос.ДаНет);	
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВыплатуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	//Если ДополнительныеПараметры.Записать Тогда
	//	Если Объект.Проведен Тогда
	//		Записать(РежимЗаписиДокумента.Проведение);	
	//	Иначе
	//		Записать();	
	//	КонецЕсли;		
	//КонецЕсли;
	
	ТекДанные = ДополнительныеПараметры.ТекДанные;
	
	//Если РезультатВопроса = КодВозвратаДиалога.Да  Тогда
		СтруктураПараметров = Новый Структура("Основание", Новый Структура("ДокументВыплаты, Сотрудник, ВидНачисления, Сумма, Комментарий, Подразделение, ЗаявкаНаФинансированиеПоВедомости, НомерСтроки, УИДСтроки", 
		Элементы.Заявки.ТекущиеДанные.Ведомость, ТекДанные.Сотрудник, ТекДанные.ВидНачисления, ТекДанные.Сумма, ТекДанные.Комментарий, ТекДанные.Подразделение, Элементы.Заявки.ТекущиеДанные.ЗаявкаНаФинансирование, ТекДанные.НомерСтроки, Элементы.Заявки.ТекущиеДанные.УИДСтроки));
		ОткрытьФорму("Документ.УЧ_ДвижениеДС.ФормаОбъекта", СтруктураПараметров, ЭтаФорма,,,,Новый ОписаниеОповещения("ПослеЗаписиДС", ЭтотОбъект, СтруктураПараметров) ,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиДС(Результат, ДополнительныеПараметры) Экспорт
	//ДополнительныеПараметры.Вставить("Ссылка", Элементы.Заявки.ТекущиеДанные.Ведомость);
	СтруктураВыплаты = ЗаполнитьСтрокуДокументомВыплаты(ДополнительныеПараметры);
	Если Не СтруктураВыплаты = Неопределено Тогда
		ПерезаписатьУчВыплатуНаСервере(СтруктураВыплаты, ДополнительныеПараметры);
		Элементы.ЗаявкиВедомостьТабличнаяЧасть.ТекущиеДанные.ДокументВыплаты = СтруктураВыплаты.Документ;
		Элементы.ЗаявкиВедомостьТабличнаяЧасть.ТекущиеДанные.СуммаВыплачено = СтруктураВыплаты.СуммаДокумента;
		//Элементы.ЗаявкиВедомостьТабличнаяЧасть.Обновить();
		//Элементы.Заявки.ТекущиеДанные.СуммаОплачено = Элементы.Заявки.ТекущиеДанные.СуммаОплачено + СтруктураВыплаты.СуммаДокумента;
		//ПриОткрытии(Ложь);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПерезаписатьУчВыплатуНаСервере(СтруктураВыплаты, ДополнительныеПараметры)
	ТекДокВыплатыОб = ДополнительныеПараметры.Основание.ДокументВыплаты.ПолучитьОбъект();
	ТекДокВыплатыОб.ТабличнаяЧасть[ДополнительныеПараметры.Основание.НомерСтроки - 1].ДокументВыплаты = СтруктураВыплаты.Документ;
	ТекДокВыплатыОб.ТабличнаяЧасть[ДополнительныеПараметры.Основание.НомерСтроки - 1].СуммаВыплачено = СтруктураВыплаты.СуммаДокумента;
	ТекДокВыплатыОб.Записать(); //фиксируем результат
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьСтрокуДокументомВыплаты(ДополнительныеПараметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УЧ_ДвижениеДС.Ссылка КАК Ссылка,
	               |	УЧ_ДвижениеДС.СуммаДокумента КАК СуммаДокумента
	               |ИЗ
	               |	Документ.УЧ_ДвижениеДС КАК УЧ_ДвижениеДС
	               |ГДЕ
	               |	УЧ_ДвижениеДС.ДокОснование = &ДокОснование
	               |	И УЧ_ДвижениеДС.Проводки.КорСубконто1 = &КорСубконто1
	               |	И УЧ_ДвижениеДС.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ДокОснование", ДополнительныеПараметры.Основание.ЗаявкаНаФинансированиеПоВедомости);
	Запрос.УстановитьПараметр("КорСубконто1", ДополнительныеПараметры.Основание.Сотрудник);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Новый Структура("Документ, СуммаДокумента", Выборка.Ссылка, Выборка.СуммаДокумента);		
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции


&НаКлиенте
Процедура ЗаявкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ЗаявкиСуммаОплачено" ИЛИ Поле.Имя = "ЗаявкиСуммаПоступление" Тогда
		СтандартнаяОбработка = Ложь;
		Если ТипЗнч(Элементы.Заявки.ТекущиеДанные.Плательщик) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			СтандартнаяОбработка = Ложь;
			ТекФорма = ПолучитьФорму("Документ.ПлатежноеПоручение.ФормаСписка", Новый Структура("ОтключитьОжиданиеПриОткрытииФорм", Истина));
			ТекФорма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			НовыйОтбор = ТекФорма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Заявка");
			НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			НовыйОтбор.ПравоеЗначение = Элементы.Заявки.ТекущиеДанные.ЗаявкаНаФинансирование;
			ТекФорма.Открыть();
		Иначе
			СтандартнаяОбработка = Ложь;
			ТекФорма = ПолучитьФорму("Документ.УЧ_ДвижениеДС.ФормаСписка", Новый Структура("ОтключитьОжиданиеПриОткрытииФорм", Истина));
			ТекФорма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			НовыйОтбор = ТекФорма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДокОснование");
			НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			НовыйОтбор.ПравоеЗначение = Элементы.Заявки.ТекущиеДанные.ЗаявкаНаФинансирование;
			ТекФорма.Открыть();
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Элементы.Заявки.ТекущиеДанные.ЗаявкаНаФинансирование) Тогда
		ПоказатьЗначение(, Элементы.Заявки.ТекущиеДанные.ЗаявкаНаФинансирование);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти 

&НаКлиенте
Процедура СоздатьПКО_ДДС(Команда)
		
	Для каждого ТекСтрока Из Элементы.Заявки.ВыделенныеСтроки Цикл
		ТекущаяСтрока =  Элементы.Заявки.ДанныеСтроки(ТекСтрока);
		
		//Если ТекущаяСтрока.СуммаОплачено >= ТекущаяСтрока.СуммаДокумента Тогда
		//	Сообщить("Данная строка уже обработана!");
		//	Возврат;		
		//КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.ИсточникПолучатель) Тогда
			Сообщить("Не указан источник-получатель!");
			Возврат;		
		КонецЕсли;
		
		СтруктураЗначений = Новый Структура;
		ИндексСтроки = Заявки.Индекс(Заявки.НайтиПоИдентификатору(ТекСтрока));
		ЗаполнитьСтруктуру(СтруктураЗначений, ИндексСтроки);
		СтруктураЗначений.Вставить("Заявка", ?(ЗначениеЗаполнено(Заявка), Заявка, Элементы.ЗаявкиТаблица.ДанныеСтроки(Элементы.ЗаявкиТаблица.ТекущаяСтрока).Ссылка));
		СтруктураЗначений.Вставить("ЗаявкаНаФинансирование", ТекущаяСтрока.ЗаявкаНаФинансирование);
		СтруктураЗначений.Вставить("ЭтоПКО", Истина);
		
		ОткрытьФорму("Документ.УЧ_ДвижениеДС.ФормаОбъекта", Новый Структура("Основание", СтруктураЗначений)); 
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиТаблицаПриАктивизацииСтроки(Элемент)
	ТекДанные = Элементы.ЗаявкиТаблица.ДанныеСтроки(Элементы.ЗаявкиТаблица.ТекущаяСтрока);
	Если Не ТекДанные = Неопределено Тогда
		ЗаполнитьТЧ(ТекДанные.Ссылка);
		ЗаявкаОснование = ТипЗнч(ТекДанные.Ссылка) = Тип("Строка");
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура Обновить(Команда)
	ПриОткрытии(Неопределено);
	ЗаявкиТаблицаПриАктивизацииСтроки(Неопределено);
	Элементы.ЗаявкиТаблица.Обновить();
КонецПроцедуры

