
&НаКлиенте
Процедура ИсточникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекФорма = ПолучитьФорму("Справочник.БанковскиеСчета.Форма.ФормаВыбораОбработкаПлатежей", Новый Структура("Предприятия, ТекущаяСтрока, ТипИсточника", Объект.Предприятие, Объект.Источник, МассивТипов(Истина)) , Элемент); 
	ТекФорма.Открыть();
КонецПроцедуры

&НаСервереБезКонтекста
Функция МассивТипов(ТекСтраница)
	
	Масс = Новый Массив;
	Масс.Добавить(Перечисления.ГД_ВидыИсточников.ВалютныйРасчетныйСчет);
	Масс.Добавить(Перечисления.ГД_ВидыИсточников.РассчетныйСчет);
	Масс.Добавить(Перечисления.ГД_ВидыИсточников.ДепозитныйСчет);
	Масс.Добавить(Перечисления.ГД_ВидыИсточников.ВалютныйДепозитныйСчет);
	Масс.Добавить(Перечисления.ГД_ВидыИсточников.ЛицевойСчетРКП);
	Масс.Добавить(Перечисления.ГД_ВидыИсточников.ЛицевойСчетРКПВал);
	
	Масс2 = Новый Массив;
	Масс2.Добавить(Перечисления.ГД_ВидыИсточников.Касса);
	Масс2.Добавить(Перечисления.ГД_ВидыИсточников.КассаУчет);
	Масс2.Добавить(Перечисления.ГД_ВидыИсточников.ВалютнаяКасса);
	Масс2.Добавить(Перечисления.ГД_ВидыИсточников.ВалютнаяКассаУчет);
		
	Возврат ?(ТекСтраница, Масс, Масс2);
	
КонецФункции // ()


//&НаСервере
//Процедура ПриСозданииНаСервере2(Отказ, СтандартнаяОбработка)
//	Список.Параметры.УстановитьЗначениеПараметра("ДатаНачала", Объект.Период.ДатаНачала);
//	Список.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", Объект.Период.ДатаОкончания);
//	СписокКазны.Параметры.УстановитьЗначениеПараметра("ДатаНачала", Объект.Период.ДатаНачала);
//	СписокКазны.Параметры.УстановитьЗначениеПараметра("ДатаНачала", Объект.Период.ДатаОкончания);
//	Список.Параметры.УстановитьЗначениеПараметра("Дата1", ТекущаяДата());
//	Список.Параметры.УстановитьЗначениеПараметра("Источник", Объект.Источник);
//	СписокКассы.Параметры.УстановитьЗначениеПараметра("Предприятия", Объект.Предприятие);
//	СписокКассы.Параметры.УстановитьЗначениеПараметра("Источник", Объект.ИсточникКасс);
//	СписокКазны.Параметры.УстановитьЗначениеПараметра("Предприятия", Объект.Предприятие);
//	СписокКассы.Параметры.УстановитьЗначениеПараметра("ДатаНачала", Объект.Период.ДатаНачала);
//	СписокКассы.Параметры.УстановитьЗначениеПараметра("ДатаНачала", Объект.Период.ДатаОкончания);
//КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеПриИзменении(Элемент)
	ОбновитьДинСписок()
КонецПроцедуры

&НаСервере
Процедура ОбновитьДинСписок()
	//Адрес = ПоместитьВоВременноеХранилище(Объект.Источник, Новый УникальныйИдентификатор);
	
	//ТТ = ТекущаяДата();
	//Если НЕ ЗначениеЗаполнено(Объект.Период.ДатаНачала) ИЛИ Объект.Период.ДатаНачала < Дата('20120501000000') Тогда
	//	ТТ1 = Дата('20120501000000');
	//Иначе
	//	ТТ1 = Объект.Период.ДатаНачала;
	//КонецЕсли;
	//Если НЕ ЗначениеЗаполнено(Объект.Период.ДатаОкончания) ИЛИ Объект.Период.ДатаОкончания < Дата('20120501000000') Тогда
	//	ТТ2 = ТекущаяДата();
	//Иначе
	//	ТТ2 = Объект.Период.ДатаОкончания;
	//КонецЕсли;
	
	
	Если Элементы.Группа2.ТекущаяСтраница = Элементы.РасчетныеСчета Тогда
		//Список.Параметры.УстановитьЗначениеПараметра("ДатаНачала", Дата('20120501000000'));
		//Список.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", ТТ2);
		//Список.Параметры.УстановитьЗначениеПараметра("Дата1", ТекущаяДата());
		Список.Параметры.УстановитьЗначениеПараметра("Источник", ?(ЗначениеЗаполнено(Объект.Источник),Объект.Источник, Неопределено));
	ИначеЕсли Элементы.Группа2.ТекущаяСтраница = Элементы.Кассы Тогда
		СписокКассы.Параметры.УстановитьЗначениеПараметра("Предприятия", Объект.Предприятие);
		СписокКассы.Параметры.УстановитьЗначениеПараметра("Источник", ?(ЗначениеЗаполнено(Объект.ИсточникКасс),Объект.ИсточникКасс, Неопределено));
		//СписокКазны.Параметры.УстановитьЗначениеПараметра("Предприятия", Объект.Предприятие);
		//СписокКазны.Параметры.УстановитьЗначениеПараметра("ДатаНачала", Дата('20120501000000'));
	ИначеЕсли Элементы.Группа2.ТекущаяСтраница = Элементы.Казна Тогда
		//СписокКазны.Параметры.УстановитьЗначениеПараметра("Предприятия", Объект.Предприятие);
		//СписокКазны.Параметры.УстановитьЗначениеПараметра("ДатаНачала", Дата('20120501000000'));
		СписокКассы.Параметры.УстановитьЗначениеПараметра("Предприятия", Объект.Предприятие);
		СписокКассы.Параметры.УстановитьЗначениеПараметра("Источник", ?(ЗначениеЗаполнено(Объект.ИсточникКасс),Объект.ИсточникКасс, Неопределено));
	ИначеЕсли Элементы.Группа2.ТекущаяСтраница = Элементы.Переводы Тогда
		СписокПереводов.Параметры.УстановитьЗначениеПараметра("Предприятия", Объект.Предприятие);
	ИначеЕсли Элементы.Группа2.ТекущаяСтраница = Элементы.ОпознаниеПриходов Тогда
		ДоступныеПредприятия = ПараметрыСеанса.ДоступныеПредприятия;
		Если ДоступныеПредприятия.Найти(Объект.Предприятие) <> Неопределено Тогда
			ДоступныеПредприятия = Новый Массив;
			ДоступныеПредприятия.Добавить(Объект.Предприятие);
		КонецЕсли;	
		Опознавания.Параметры.УстановитьЗначениеПараметра("ДоступныеПредприятия", ДоступныеПредприятия);
	КонецЕсли;
	
КонецПроцедуры



&НаКлиенте
Процедура ИсточникПриИзменении(Элемент)
	ОбновитьДинСписок();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ЗначениеЗаполнено(Объект.Источник) ИЛИ ЗначениеЗаполнено(Объект.Предприятие) Тогда
		ОбновитьДинСписок();
		Если Элементы.Группа2.ТекущаяСтраница = Элементы.РасчетныеСчета Тогда
			Если ЗначениеЗаполнено(Объект.Источник) Тогда
				Элементы.СписокНеобработанные.Пометка = Истина;
				ОбновитьСписокРсч(Истина);
				
				//Элементы.Список.Обновить();;
			КонецЕсли;
		ИначеЕсли Элементы.Группа2.ТекущаяСтраница = Элементы.Кассы Тогда
			Если ЗначениеЗаполнено(Объект.ИсточникКасс) Тогда
				Элементы.СписокКассы.Обновить();
			КонецЕсли;
		ИначеЕсли Элементы.Группа2.ТекущаяСтраница = Элементы.Казна Тогда
			Элементы.СписокКазны.Обновить();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ДвижениеДС(Команда)
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	ВыделеноНесколькоСтрок = (ВыделенныеСтроки.Количество() > 1);
	
	ТекСтрока = Элементы.Список.ТекущаяСтрока;	
	ТекДанные = Элементы.Список.ТекущиеДанные;
	//проверка, есть ли уже созданные на основании документы и правильность выделенных
	Сообщение = "";
	Если ВыделеноНесколькоСтрок И Не ЕстьВозможностьМассовойОбработки(ВыделенныеСтроки, Сообщение) Тогда
		Предупреждение(Сообщение);
		Возврат;			
	ИначеЕсли НЕ ТекДанные.ДвижениеДС.Пустая() Тогда
		Предупреждение("На основании текущего документа уже есть движение ДС.");
		Возврат;
	КонецЕсли;
		
	//Если ТекДанные.ВидОперации = "Приход (ВНХ движение)" И АвтоВНХ() Тогда
	//	Предупреждение("Запрещено создавать движение ДС на основании ВНХ прихода при разнесении Платежки. Обработайте движения по казне. Если вы уже обработали движения по казне, то вы можете найти его в списке.");
	//	ТекФорма = ПолучитьФорму("Документ.УЧ_ДвижениеДС.Форма.ФормаВыбора");
	//	//НовыйОтбор = ТекФорма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//	//НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДокОснование2");
	//	//НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//	////НовыйОтбор.ПравоеЗначение = "";
	//	НовыйОтбор = ТекФорма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Субконто2");
	//	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//	НовыйОтбор.ПравоеЗначение = Казна();
	//	НовыйОтбор = ТекФорма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДокОснование");
	//	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	//	//НовыйОтбор.ПравоеЗначение = "";
	//	НовыйОтбор = ТекФорма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СуммаДокумента");
	//	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//	НовыйОтбор.ПравоеЗначение = ТекДанные.СуммаДокумента;
	//	ТекДокумент = ТекФорма.ОткрытьМодально();
	//	//	Если НЕ ТекДокумент = Неопределено Тогда
	//	//		Если Вопрос("Вы уверены что документ " + Строка(ТекДокумент) + " соответствует " + Строка(Элементы.Список.ТекущаяСтрока) + "?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да  Тогда
	//	//			ЗаписатьДокОснование2(ТекДокумент, Элементы.Список.ТекущаяСтрока);
	//	//			ОповеститьОбИзменении(Элементы.Список.ТекущаяСтрока);
	//	//		КонецЕсли;
	//	//	КонецЕсли;
	//	//	Возврат;
	//Иначе
	
	Если ВыделеноНесколькоСтрок Тогда  //Все выделенные платежки одного типа Приход или Расход по одному контрагенту
		Форма = ПолучитьФорму("Обработка.УЧ_ОбработкаПлатежей.Форма.ГрупповоеЗаполнениеУчетчиком",,ЭтаФорма);
		
		Если ТекДанные.ВидОперации = "Приход" Тогда
			Форма.КорСчет = ПредопределенноеЗначение("ПланСчетов.Учетный.ПокупателиОсн");
			Форма.КорСубконто1 = ТекДанные.Организация;
		ИначеЕсли ТекДанные.ВидОперации = "Расход" Тогда
			Форма.КорСчет = ПредопределенноеЗначение("ПланСчетов.Учетный.ПоставщикиОсн");
			Форма.КорСубконто1 = ТекДанные.Контрагент;
		КонецЕсли;
		
		СтруктураВведенныеДанные = Форма.ОткрытьМодально();
		
		Если СтруктураВведенныеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого ТекПлатежка Из ВыделенныеСтроки Цикл
			СоздатьДвижениеДС(ТекПлатежка, СтруктураВведенныеДанные);
		КонецЦикла;
		
		ОповеститьОбИзменении(Тип("ДокументСсылка.ПлатежноеПоручение"));
	Иначе
		//СтруктураЗаполнения = Новый Структура();
		//СтруктураЗаполнения.Вставить("Основание", ТекСтрока);
		//СтруктураЗаполнения.Вставить("Субконто2", Объект.Источник);
		//
		//ОткрытьФорму("Документ.УЧ_ДвижениеДС.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения",СтруктураЗаполнения) );

	
		
		ОткрытьФорму("Документ.УЧ_ДвижениеДС.ФормаОбъекта", Новый Структура("Основание", Новый Структура("Ссылка, Субконто2", ТекСтрока, Объект.Источник) )); 
		//Форма = ПолучитьФорму("Документ.УЧ_ДвижениеДС.ФормаОбъекта"); 
		//ДанныеФормы = Форма.Объект;
		//ЗаполнитьНаСервере(ДанныеФормы, ТекСтрока);
		//КопироватьДанныеФормы(ДанныеФормы, Форма.Объект);
		//Форма.ТипОбъектаОбновления = "ДокументСсылка.ПлатежноеПоручение";
		//Форма.Открыть();
	КонецЕсли;
	//КонецЕсли;
	
	//ОповеститьОбИзменении(ТекСтрока);
	
КонецПроцедуры

&НаСервере
Функция ЕстьВозможностьМассовойОбработки(Массив, Сообщение);
	
	//Кусок запроса из дин. списка
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
				   |    ПлатежноеПоручение.Организация,
				   |    ПлатежноеПоручение.Контрагент,
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(ПлатежноеПоручение.Организация) = ТИП(Справочник.Организации)
	               |			ТОГДА ВЫБОР
	               |					КОГДА ТИПЗНАЧЕНИЯ(ПлатежноеПоручение.Контрагент) = ТИП(Справочник.Организации)
	               |						ТОГДА ВЫБОР
	               |								КОГДА &Источник = ПлатежноеПоручение.БанковскийСчет
	               |									ТОГДА ""Расход (ВНХ движение)""
	               |								ИНАЧЕ ""Приход (ВНХ движение)""
	               |							КОНЕЦ
	               |					ИНАЧЕ ""Расход""
	               |				КОНЕЦ
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА НЕ ТИПЗНАЧЕНИЯ(ПлатежноеПоручение.Контрагент) = ТИП(Справочник.Организации)
	               |					ТОГДА ""Прочее""
	               |				ИНАЧЕ ""Приход""
	               |			КОНЕЦ
	               |	КОНЕЦ КАК ВидОперации,
	               |	ВЫБОР
	               |		КОГДА УЧ_ДвижениеДС.Ссылка ЕСТЬ NULL 
	               |			ТОГДА ВЫБОР
	               |					КОГДА КЗ_Выписка.Ссылка ЕСТЬ NULL 
	               |						ТОГДА НЕОПРЕДЕЛЕНО
	               |					ИНАЧЕ КЗ_Выписка.Ссылка
	               |				КОНЕЦ
	               |		ИНАЧЕ УЧ_ДвижениеДС.Ссылка
	               |	КОНЕЦ КАК ДвижениеДС
	               |ИЗ
	               |	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_ДвижениеДС КАК УЧ_ДвижениеДС
	               |		ПО ПлатежноеПоручение.Ссылка = УЧ_ДвижениеДС.ДокОснование
	               |			И (УЧ_ДвижениеДС.ПометкаУдаления = ЛОЖЬ)
	               |			И (УЧ_ДвижениеДС.Субконто2 = &Источник
	               |				ИЛИ УЧ_ДвижениеДС.Источник2 = &Источник)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КЗ_Выписка КАК КЗ_Выписка
	               |		ПО (КЗ_Выписка.ПометкаУдаления = ЛОЖЬ)
	               |			И ПлатежноеПоручение.Ссылка = КЗ_Выписка.ДокОснование
	               |			И (КЗ_Выписка.Источник = &Источник
	               |				ИЛИ КЗ_Выписка.Источник2 = &Источник)
	               |ГДЕ
	               |	ПлатежноеПоручение.Ссылка В(&Массив)";
	Запрос.УстановитьПараметр("Массив", Массив);
	Запрос.УстановитьПараметр("Источник", ?(ЗначениеЗаполнено(Объект.Источник),Объект.Источник, Неопределено));
	Выборка = Запрос.Выполнить().Выбрать();
	ПерваяОрганизация = Неопределено;
	ПервыйКонтрагент  = Неопределено;
	ПервыйВидОперации = Неопределено;
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ДвижениеДС) Тогда
			Сообщение = "На основании хотя бы одного из выбранных документов уже есть движение ДС.";
			Возврат Ложь;
		ИначеЕсли Выборка.ВидОперации <> "Приход" И Выборка.ВидОперации <> "Расход" Тогда
			Сообщение = "Массово можно обрабатывать только приходы.";
			Возврат Ложь;
		ИначеЕсли Выборка.ВидОперации <> ПервыйВидОперации И ПервыйВидОперации <> Неопределено Тогда
			Сообщение = "Нельзя одновременно обработать приходы и расходы.";
			Возврат Ложь;
		ИначеЕсли (Выборка.Организация <> ПерваяОрганизация Или Выборка.Контрагент <> ПервыйКонтрагент) И ПерваяОрганизация <> Неопределено Тогда
			Сообщение = "Массово можно обрабатывать только одного контрагента.";
			Возврат Ложь;
		КонецЕсли;
		ПерваяОрганизация = Выборка.Организация;
		ПервыйКонтрагент  = Выборка.Контрагент;
		ПервыйВидОперации = Выборка.ВидОперации;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура СоздатьДвижениеДС(ПлатежноеПоручение, СтруктураВведенныеДанные)
	
	ДвижениеДСОбъект = Документы.УЧ_ДвижениеДС.СоздатьДокумент();
	ЗаполнитьНаСервере(ДвижениеДСОбъект, ПлатежноеПоручение);
	Если ДвижениеДСОбъект.Проводки.Количество() = 0 Тогда
		НоваяСтрокаПроводки = ДвижениеДСОбъект.Проводки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПроводки, СтруктураВведенныеДанные);
		НоваяСтрокаПроводки.Сумма 		= ДвижениеДСОбъект.СуммаДокумента;
		НоваяСтрокаПроводки.Содержание 	= ДвижениеДСОбъект.Содержание;
		НоваяСтрокаПроводки.ГУИДСтроки 	= новый УникальныйИдентификатор;
	Иначе
		Для Каждого ТекСтрокаПроводки Из ДвижениеДСОбъект.Проводки Цикл
			ЗаполнитьЗначенияСвойств(ТекСтрокаПроводки, СтруктураВведенныеДанные);
		КонецЦикла;
	КонецЕсли;
	ДвижениеДСОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ЗаписатьДокОснование2(ТекДокумент, ТекПлатежка)
	ТекДокументОбъект = ТекДокумент.ПолучитьОбъект();
	ТекДокументОбъект.ДокОснование2 = ТекПлатежка;
	ТекДокументОбъект.Записать();	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьНаСервере(ТекОбъект, ДанныеЗаполнения)
	
	
	
КонецПроцедуры


&НаКлиенте
Процедура Необработанные(Команда)
	Элементы.СписокНеобработанные.Пометка = 1 - Элементы.СписокНеобработанные.Пометка;
	ОбновитьСписокРсч(Элементы.СписокНеобработанные.Пометка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокРсч(Признак)
	
	Если Признак Тогда
		НовыйОтбор = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДвижениеДС");
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		НовыйОтбор.ПравоеЗначение = Документы.УЧ_ДвижениеДС.ПустаяСсылка();
		//НовыйОтбор = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		//НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("БанкВыписка");
		//НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		//НовыйОтбор.ПравоеЗначение = Документы.КЗ_Выписка.ПустаяСсылка();
		
	Иначе
		Для каждого ТекСтрокаОтбора Из Список.Отбор.Элементы Цикл
			Если ТекСтрокаОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДвижениеДС") Тогда
				Список.Отбор.Элементы.Удалить(ТекСтрокаОтбора);
			КонецЕсли;
		КонецЦикла;
		
		//Для каждого ТекСтрокаОтбора Из Список.Отбор.Элементы Цикл
		//	Если ТекСтрокаОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("БанкВыписка") Тогда
		//		Список.Отбор.Элементы.Удалить(ТекСтрокаОтбора);
		//	КонецЕсли;
		//КонецЦикла; 
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокКасс(Признак)
	
	Если Признак Тогда
		СписокКассы.ТекстЗапроса = "ВЫБРАТЬ
		|	УЧ_РК.ВерсияДанных,
		|	УЧ_РК.ПометкаУдаления,
		|	УЧ_РК.Номер,
		|	УЧ_РК.Дата,
		|	УЧ_РК.Проведен,
		|	УЧ_РК.Предприятие,
		|	УЧ_РК.Доступна,
		|	УЧ_РК.Ссылка,
		|	МАКСИМУМ(ЕСТЬNULL(УЧ_ДвижениеДС.Ссылка, ЗНАЧЕНИЕ(Документ.УЧ_ДвижениеДС.ПустаяСсылка))) КАК ДвижениеДС,
		|	УЧ_РК.Статья,
		|	УЧ_РК.Источник,
		|	УЧ_РК.Сумма,
		|	ПОДСТРОКА(УЧ_РК.Описание, 1, 250) КАК Комментарий,
		|	УЧ_РК.ВидОперации,
		|	УЧ_ДвижениеДС.Ссылка КАК Ссылка1
		|ИЗ
		|	Документ.УЧ_РК КАК УЧ_РК
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_ДвижениеДС КАК УЧ_ДвижениеДС
		|		ПО УЧ_РК.Ссылка = УЧ_ДвижениеДС.ДокОснование
		|			И (УЧ_ДвижениеДС.ПометкаУдаления = ЛОЖЬ)
		|ГДЕ
		|	УЧ_РК.Предприятие В(&Предприятия)
		|	И УЧ_РК.Источник В(&Источник)
		|	И УЧ_ДвижениеДС.Ссылка ЕСТЬ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	УЧ_РК.ВерсияДанных,
		|	УЧ_РК.ПометкаУдаления,
		|	УЧ_РК.Номер,
		|	УЧ_РК.Дата,
		|	УЧ_РК.Проведен,
		|	УЧ_РК.Предприятие,
		|	УЧ_РК.Доступна,
		|	УЧ_РК.Ссылка,
		|	ПОДСТРОКА(УЧ_РК.Описание, 1, 250),
		|	УЧ_РК.Статья,
		|	УЧ_РК.Источник,
		|	УЧ_РК.Сумма,
		|	УЧ_РК.ВидОперации,
		|	УЧ_ДвижениеДС.Ссылка";	
		
	Иначе
		СписокКассы.ТекстЗапроса = "ВЫБРАТЬ
		|	УЧ_РК.ВерсияДанных,
		|	УЧ_РК.ПометкаУдаления,
		|	УЧ_РК.Номер,
		|	УЧ_РК.Дата,
		|	УЧ_РК.Проведен,
		|	УЧ_РК.Предприятие,
		|	УЧ_РК.Доступна,
		|	УЧ_РК.Ссылка,
		|	МАКСИМУМ(ЕСТЬNULL(УЧ_ДвижениеДС.Ссылка, ЗНАЧЕНИЕ(Документ.УЧ_ДвижениеДС.ПустаяСсылка))) КАК ДвижениеДС,
		|	УЧ_РК.Статья,
		|	УЧ_РК.Источник,
		|	УЧ_РК.Сумма,
		|	ПОДСТРОКА(УЧ_РК.Описание, 1, 250) КАК Комментарий,
		|	УЧ_РК.ВидОперации,
		|	УЧ_ДвижениеДС.Ссылка КАК Ссылка1
		|ИЗ
		|	Документ.УЧ_РК КАК УЧ_РК
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_ДвижениеДС КАК УЧ_ДвижениеДС
		|		ПО УЧ_РК.Ссылка = УЧ_ДвижениеДС.ДокОснование
		|			И (УЧ_ДвижениеДС.ПометкаУдаления = ЛОЖЬ)
		|ГДЕ
		|	УЧ_РК.Предприятие В(&Предприятия)
		|	И УЧ_РК.Источник В(&Источник)
		|
		|СГРУППИРОВАТЬ ПО
		|	УЧ_РК.ВерсияДанных,
		|	УЧ_РК.ПометкаУдаления,
		|	УЧ_РК.Номер,
		|	УЧ_РК.Дата,
		|	УЧ_РК.Проведен,
		|	УЧ_РК.Предприятие,
		|	УЧ_РК.Доступна,
		|	УЧ_РК.Ссылка,
		|	ПОДСТРОКА(УЧ_РК.Описание, 1, 250),
		|	УЧ_РК.Статья,
		|	УЧ_РК.Источник,
		|	УЧ_РК.Сумма,
		|	УЧ_РК.ВидОперации,
		|	УЧ_ДвижениеДС.Ссылка";	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокКазны(Признак)
	
	//Если Признак Тогда
		//НовыйОтборГруппа = СписокКазны.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		//НовыйОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		//
		//НовыйОтбор = НовыйОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		//НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПодчиненныйДокумент");
		//НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		//НовыйОтбор.ПравоеЗначение = Документы.УЧ_ДвижениеДС.ПустаяСсылка();
		//
		//НовыйОтбор = НовыйОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		//НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПодчиненныйДокумент.ПометкаУдаления");
		//НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		//НовыйОтбор.ПравоеЗначение = Истина;
	//Иначе
		//Для каждого ТекСтрокаОтбора Из СписокКазны.Отбор.Элементы Цикл
		//	Если ТипЗнч(ТекСтрокаОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") И ТекСтрокаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли Тогда
		//		СписокКазны.Отбор.Элементы.Удалить(ТекСтрокаОтбора);
		//	КонецЕсли;
		//	СписокКазны.Отбор.Элементы.Очистить();
		//КонецЦикла; 
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДвижениеДСПриИзменении(Элемент)
	а = 1;
КонецПроцедуры

&НаКлиенте
Процедура БанковскаяВыписка(Команда)
	ТекСтрока = Элементы.Список.ТекущаяСтрока;
	
	ТекДанные = Элементы.Список.ТекущиеДанные;
	Если НЕ ТекДанные.ДвижениеДС.Пустая() Тогда
		//Если Вопрос("На основании текущей платежки уже есть движение ДС. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет  Тогда
		//	Возврат;		
		//КонецЕсли;
		Предупреждение("На основании текущей платежки уже есть банковская выписка.");
		Возврат;
	КонецЕсли;
	
	Форма = ПолучитьФорму("Документ.КЗ_Выписка.ФормаОбъекта"); ;
	ДанныеФормы = Форма.Объект;
	ЗаполнитьНаСервереВыписку(ДанныеФормы, ТекСтрока);
	КопироватьДанныеФормы(ДанныеФормы, Форма.Объект);
	Форма.ОбрабатыватьОпознавания = Истина;
	Форма.Открыть();
	//ОповеститьОбИзменении(ТекСтрока);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервереВыписку(ТекОбъект, ДанныеЗаполнения)
	
	//Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = ТекстЗапросаПоПлатежке();
	//	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	//	Запрос.УстановитьПараметр("Источник", Объект.Источник);
	//	Выборка = Запрос.Выполнить().Выбрать();
	//	
	//	Пока Выборка.Следующий() Цикл
	//		// Заполнение шапки
	//		ТекОбъект.Описание 		= Выборка.Комментарий;
	//		
	//		// костыль на подразделение "если это Казна, то подразделение ставить в любом случае (даже если в док основании оно не заполнено)?да. ставить" #НеДляЯдра
	//		Если Строка(Объект.Предприятие) = "Казна" Тогда
	//			ТекОбъект.Подразделение = ?(Не ЗначениеЗаполнено(Выборка.Подразделение) И ЗначениеЗаполнено(Объект.Предприятие.ВидДеятельности), Объект.Предприятие.ВидДеятельности, Выборка.Подразделение);
	//		Иначе
	//			ТекОбъект.Подразделение = Выборка.Подразделение;
	//		КонецЕсли;
	//	
	//		ТекОбъект.Предприятие 	= Объект.Предприятие;
	//		ТекОбъект.Сумма 		= Выборка.СуммаДокумента;
	//		ТекОбъект.Дата 			= Выборка.Дата;
	//		ТекОбъект.ДокОснование 	= ДанныеЗаполнения;
	//		ТекОбъект.Источник = Выборка.БанковскийСчет;
	//		ТекОбъект.Контрагент = Выборка.Контрагент;

	//		//приход или расход?
	//		Если ПП_Сервер.ЭтоРасходнаяОперация(Выборка.ВидОперации) Тогда
	//			//ТекОбъект.ВидОперации = "Расход";
	//			ТекОбъект.ВидОперации = ?(Выборка.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога, Выборка.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Оплата, Выборка.ВидОперации);
	//			
	//			Если ПлатежМеждуПроектамиСРазнойВалютой(Выборка) Тогда
	//				Курс = УЧ_Сервер.ПолучитьКурсВалют(Выборка.БанковскийСчетВалюта, Объект.Предприятие.ОсновнаяВалютаУчета, Выборка.Дата);
	//				ТекОбъект.Сумма = Выборка.СуммаВВалютеПлательщика * Курс;
	//			Иначе
	//				ТекОбъект.Сумма = Выборка.СуммаДокумента;
	//			КонецЕсли;
	//			
	//			ТекПризнакВал = Выборка.ВидИсточникаБанкоскийСчет;
	//			
	//			Если ТекПризнакВал = Перечисления.ГД_ВидыИсточников.ВалютныйРасчетныйСчет Тогда
	//				ТекОбъект.Счет = ПланыСчетов.Казна.КорреспондентскийСчетВалюта;
	//				ТекОбъект.ВалютнаяСумма = Выборка.СуммаВВалютеПлательщика;
	//				ТекОбъект.Валюта = Выборка.БанковскийСчетВалюта;
	//				ТекОбъект.Курс = ?(ТекОбъект.ВалютнаяСумма, ТекОбъект.Сумма / ТекОбъект.ВалютнаяСумма, 0);
	//			ИначеЕсли ТекПризнакВал = Перечисления.ГД_ВидыИсточников.ЛицевойСчетРКПВал Тогда
	//				ТекОбъект.Счет = ПланыСчетов.Казна.КорреспондентскийСчетВалюта;
	//				ТекОбъект.ВалютнаяСумма = Выборка.СуммаВВалютеПлательщика;
	//				ТекОбъект.Валюта = Выборка.БанковскийСчетВалюта;
	//				ТекОбъект.Курс = ?(ТекОбъект.ВалютнаяСумма, ТекОбъект.Сумма / ТекОбъект.ВалютнаяСумма, 0);
	//			ИначеЕсли ТекПризнакВал = Перечисления.ГД_ВидыИсточников.ДепозитныйСчет Тогда
	//				ТекОбъект.Счет = ПланыСчетов.Казна.ДепозитныйСчет;	
	//			ИначеЕсли ТекПризнакВал = Перечисления.ГД_ВидыИсточников.ВалютныйДепозитныйСчет Тогда
	//                ТекОбъект.Счет = ПланыСчетов.Казна.ДепозитныйСчетВалюта;
	//				ТекОбъект.ВалютнаяСумма = Выборка.СуммаВВалютеПлательщика;
	//				ТекОбъект.Валюта = Выборка.БанковскийСчетВалюта;
	//				ТекОбъект.Курс = ?(ТекОбъект.ВалютнаяСумма, ТекОбъект.Сумма / ТекОбъект.ВалютнаяСумма, 0);	
	//			Иначе
	//				ТекОбъект.Счет = ПланыСчетов.Казна.КорреспондентскийСчет;
	//			КонецЕсли;
	//			
	//			//ТекОбъект.Описание = ТекОбъект.Описание + " / " + Строка(ДанныеЗаполнения.Контрагент);
	//		Иначе
	//			//ТекОбъект.ВидОперации = "Приход";
	//			ТекОбъект.ВидОперации = Выборка.ВидОперации;
	//			
	//			Если ПлатежМеждуПроектамиСРазнойВалютой(Выборка) Тогда
	//				Курс = УЧ_Сервер.ПолучитьКурсВалют(Выборка.СчетКонтрагентаВалюта, Объект.Предприятие.ОсновнаяВалютаУчета, Выборка.Дата);
	//				ТекОбъект.Сумма = Выборка.СуммаВВалютеПолучателя * Курс;
	//			Иначе
	//				ТекОбъект.Сумма = Выборка.СуммаДокумента;
	//			КонецЕсли;
	//			
	//			ТекПризнакВал = Выборка.ВидИсточникаСчетКонтрагента;
	//			
	//			Если ТекПризнакВал = Перечисления.ГД_ВидыИсточников.ВалютныйРасчетныйСчет Тогда
	//				ТекОбъект.Счет = ПланыСчетов.Казна.КорреспондентскийСчетВалюта;
	//				ТекОбъект.ВалютнаяСумма = Выборка.СуммаВВалютеПолучателя;
	//				ТекОбъект.Валюта = Выборка.СчетКонтрагентаВалюта;
	//				ТекОбъект.Курс = ?(ТекОбъект.ВалютнаяСумма, ТекОбъект.Сумма / ТекОбъект.ВалютнаяСумма, 0);
	//			ИначеЕсли ТекПризнакВал = Перечисления.ГД_ВидыИсточников.ДепозитныйСчет Тогда
	//				ТекОбъект.Счет = ПланыСчетов.Казна.ДепозитныйСчет;	
	//			ИначеЕсли ТекПризнакВал = Перечисления.ГД_ВидыИсточников.ВалютныйДепозитныйСчет Тогда
	//                ТекОбъект.Счет = ПланыСчетов.Казна.ДепозитныйСчетВалюта;
	//				ТекОбъект.ВалютнаяСумма = Выборка.СуммаВВалютеПолучателя;
	//				ТекОбъект.Валюта = Выборка.СчетКонтрагентаВалюта;
	//				ТекОбъект.Курс = ?(ТекОбъект.ВалютнаяСумма, ТекОбъект.Сумма / ТекОбъект.ВалютнаяСумма, 0);	
	//			Иначе
	//				ТекОбъект.Счет = ПланыСчетов.Казна.КорреспондентскийСчет;
	//			КонецЕсли;
	//			
	//			//ТекОбъект.Описание = ТекОбъект.Описание + " / " + Строка(ДанныеЗаполнения.Организация);
	//		КонецЕсли;
	//		
	//		ЗапросПоТЧ = Новый Запрос;
	//		ЗапросПоТЧ.Текст = 
	//		"ВЫБРАТЬ
	//		|	ПлатежноеПоручениеТабличнаяЧасть.Предприятие,
	//		|	ПлатежноеПоручениеТабличнаяЧасть.СтатьяДДС,
	//		|	ПлатежноеПоручениеТабличнаяЧасть.Сумма,
	//		|	ПлатежноеПоручениеТабличнаяЧасть.ВалСумма,
	//		|	ПлатежноеПоручениеТабличнаяЧасть.Подразделение,
	//		|	ПлатежноеПоручениеТабличнаяЧасть.ИнвПроект,
	//		|	ПлатежноеПоручениеТабличнаяЧасть.УИДСтрокиЗаявки,
	//		|	ПлатежноеПоручениеТабличнаяЧасть.Курс,
	//		|	ПлатежноеПоручениеТабличнаяЧасть.Валюта
	//		|ИЗ
	//		|	Документ.ПлатежноеПоручение.ТабличнаяЧасть КАК ПлатежноеПоручениеТабличнаяЧасть
	//		|ГДЕ
	//		|	ПлатежноеПоручениеТабличнаяЧасть.Ссылка = &Ссылка";
	//		ЗапросПоТЧ.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	//		ТекСтрока = ЗапросПоТЧ.Выполнить().Выбрать();
	//		
	//		Пока ТекСтрока.Следующий() Цикл
	//			НоваяСтрока = ТекОбъект.ТабличнаяЧасть1.Добавить();
	//			//Если ТекСтрока.Предприятие.Родитель.Пустая() Тогда
	//			//	ТекПП = ТекСтрока.Предприятие;
	//			//Иначе
	//			//	ТекПП = ТекСтрока.Предприятие.Родитель;			
	//			//КонецЕсли;
	//			ТекПП = ТекСтрока.Предприятие;
	//			Если Выборка.БанковскийСчетПредприятие = Выборка.СчетКонтрагентаПредприятие Тогда
	//				Если Выборка.ВидИсточникаСчетКонтрагента = Перечисления.ГД_ВидыИсточников.ВалютныйРасчетныйСчет Тогда
	//					НоваяСтрока.КорСчет = ПланыСчетов.Казна.КорреспондентскийСчетВалюта;
	//				ИначеЕсли Выборка.ВидИсточникаСчетКонтрагента = Перечисления.ГД_ВидыИсточников.ЛицевойСчетРКПВал Тогда
	//					НоваяСтрока.КорСчет = ПланыСчетов.Казна.КорреспондентскийСчетВалюта;
	//				ИначеЕсли Выборка.ВидИсточникаСчетКонтрагента = Перечисления.ГД_ВидыИсточников.ДепозитныйСчет Тогда
	//					НоваяСтрока.КорСчет = ПланыСчетов.Казна.ДепозитныйСчет;	
	//				ИначеЕсли Выборка.ВидИсточникаСчетКонтрагента = Перечисления.ГД_ВидыИсточников.ВалютныйДепозитныйСчет Тогда
	//					НоваяСтрока.КорСчет = ПланыСчетов.Казна.ДепозитныйСчетВалюта;
	//				Иначе
	//					НоваяСтрока.КорСчет = ПланыСчетов.Казна.КорреспондентскийСчет;
	//				КонецЕсли;
	//				НоваяСтрока.КорСубконто1 = Выборка.СчетКонтрагентаИсточник;
	//			Иначе	
	//				НоваяСтрока.КорСчет 		= ПланыСчетов.Казна.ТекущиеСчета;
	//				НоваяСтрока.КорСубконто1 	= ТекПП;
	//			КонецЕсли; 
	//			НоваяСтрока.Описание 		= СтрПолучитьСтроку(Выборка.НазначениеПлатежа, 1);
	//			// обращение № 3919
	//			НоваяСтрока.ВалСумма		= ТекСтрока.ВалСумма;
	//			НоваяСтрока.Валюта = ТекСтрока.Валюта;
	//			НоваяСтрока.Курс = ТекСтрока.Курс;
	//			
	//			Если ЗначениеЗаполнено(ТекСтрока.Сумма) Тогда
	//				НоваяСтрока.Сумма = ТекСтрока.Сумма
	//			Иначе	
	//				
	//				Если ЗначениеЗаполнено(ТекСтрока.ВалСумма) Тогда
	//					//Курс = УЧ_Сервер.ПолучитьКурсВалют(ТекОбъект.Валюта, ТекОбъект.Предприятие.ОсновнаяВалютаУчета, Выборка.Дата);
	//					НоваяСтрока.Сумма = ТекСтрока.ВалСумма * ТекСтрока.Курс;
	//				Иначе
	//					НоваяСтрока.Сумма 			= ТекСтрока.Сумма;
	//				КонецЕсли;
	//				
	//			КонецЕсли;
	//			
	//			ТекОбъект.Статья 			= ТекСтрока.СтатьяДДС;		
	//			//ТекОбъект.УИДСтрокиЗаявки 	= ТекСтрока.УИДСтрокиЗаявки;		
	//		КонецЦикла;
	//		
	//		Если НЕ ДанныеЗаполнения.ТабличнаяЧасть.Количество() Тогда //если почему-то ТЧ платежки пустая
	//			НоваяСтрока 				= ТекОбъект.ТабличнаяЧасть1.Добавить();
	//			НоваяСтрока.КорСчет 		= ПланыСчетов.Казна.ТекущиеСчета;
	//			НоваяСтрока.КорСубконто1 	= Константы.сабПредприятиеКазна.Получить();
	//			НоваяСтрока.Описание 		= СтрПолучитьСтроку(Выборка.НазначениеПлатежа, 1);
	//			// обращение № 3919
	//			НоваяСтрока.ВалСумма		= Выборка.ВалютнаяСумма;
	//			Курс = УЧ_Сервер.ПолучитьКурсВалют(ТекОбъект.Валюта, ТекОбъект.Предприятие.ОсновнаяВалютаУчета, Выборка.Дата);
	//            НоваяСтрока.Курс = Курс;
	//			
	//			Если Объект.Источник = Выборка.БанковскийСчетИсточник Тогда
	//				НоваяСтрока.Валюта = Выборка.БанковскийСчетВалюта 
	//			Иначе
	//				НоваяСтрока.Валюта = Выборка.СчетКонтрагентаВалюта
	//			КонецЕсли;
	//			
	//			Если ЗначениеЗаполнено(ТекСтрока.ВалСумма) Тогда
	//				НоваяСтрока.Сумма = ТекСтрока.ВалСумма * Курс;
	//			Иначе
	//				НоваяСтрока.Сумма 			= ТекСтрока.Сумма;
	//			КонецЕсли;
	//			
	//			ТекОбъект.Статья 			= ТекСтрока.СтатьяДДС;		
	//			//ТекОбъект.Статья = ТекСтрока.СтатьяДДС;		
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	
	//КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура НеобработанныеКассы(Команда)
	Элементы.СписокНеобработанные1.Пометка = 1 - Элементы.СписокНеобработанные1.Пометка;
	ОбновитьСписокКасс(Элементы.СписокНеобработанные1.Пометка);
КонецПроцедуры

&НаКлиенте
Процедура ИсточникКассНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекФорма = ПолучитьФорму("Справочник.Кассы.Форма.ФормаВыбораОбработкаПлатежей", Новый Структура("Предприятия, ТекущаяСтрока, ТипИсточника", Объект.Предприятие, Объект.ИсточникКасс, МассивТипов(Ложь)) , Элемент); 
	ТекФорма.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ИсточникКассПриИзменении(Элемент)
	ОбновитьДинСписок();
КонецПроцедуры

&НаКлиенте
Процедура ДвижениеДС2(Команда)
	ТекСтрока = Элементы.СписокКассы.ТекущаяСтрока;
	
	ТекДанные = Элементы.СписокКассы.ТекущиеДанные;
	Если НЕ ТекДанные.ДвижениеДС.Пустая() Тогда
		//Если Вопрос("На основании текущей платежки уже есть движение ДС. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет  Тогда
		//	Возврат;		
		//КонецЕсли;
		Предупреждение("На основании текущего документа уже есть движение ДС.");
		Возврат;
	КонецЕсли;
	
	Форма = ПолучитьФорму("Документ.УЧ_ДвижениеДС.ФормаОбъекта"); ;
	ДанныеФормы = Форма.Объект;
	ЗаполнитьНаСервереКасса(ДанныеФормы, ТекСтрока);
	КопироватьДанныеФормы(ДанныеФормы, Форма.Объект);
	Форма.ТипОбъектаОбновления = "ДокументСсылка.УЧ_РК";
	Форма.Открыть();
	//ОповеститьОбИзменении(ТекСтрока);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервереКасса(ТекОбъект, ДанныеЗаполнения)
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.УЧ_РК") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УЧ_РК.Описание,
		|	УЧ_РК.Выдать,
		|	УЧ_РК.Подразделение,
		|	УЧ_РК.Предприятие,
		|	УЧ_РК.Сумма,
		|	УЧ_РК.Дата,
		|	УЧ_РК.Статья,
		|	УЧ_РК.ВидОперации,
		|	УЧ_РК.Источник,
		|	УЧ_РК.Контрагент,
		|	УЧ_РК.ИнвПроект,
		|	УЧ_РК.ЦФО,
		|	УЧ_РК.ПодразделениеЦФО,
		|	УЧ_РК.ВалютнаяСумма,
		|	УЧ_РК.Валюта,
		|	УЧ_РК.Курс
		|ИЗ
		|	Документ.УЧ_РК КАК УЧ_РК
		|ГДЕ
		|	УЧ_РК.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			// Заполнение шапки
			ТекОбъект.Содержание 		= Выборка.Описание + ?(ПустаяСтрока(Выборка.Выдать), "", " ч/з " + Выборка.Выдать);
			ТекОбъект.Подразделение 	= Выборка.Подразделение;
			ТекОбъект.Предприятие 		= Объект.Предприятие;
			ТекОбъект.СуммаДокумента 	= Выборка.Сумма;

			Если Выборка.Источник.ВидИсточника = Перечисления.ГД_ВидыИсточников.ВалютнаяКасса ИЛИ Выборка.Источник.ВидИсточника = Перечисления.ГД_ВидыИсточников.ВалютнаяКассаУчет Тогда
				ТекОбъект.Счет = ПланыСчетов.Учетный.Счет5002();
				ТекОбъект.ВалютнаяСумма1 = Выборка.ВалютнаяСумма;
				ТекОбъект.Валюта1 = Выборка.Валюта;
				ТекОбъект.Курс1 = ?(ТекОбъект.ВалютнаяСумма1, ТекОбъект.СуммаДокумента / ТекОбъект.ВалютнаяСумма1, 0);
			Иначе
				ТекОбъект.Счет = ПланыСчетов.Учетный.Счет5001();
			КонецЕсли;
			
			ТекОбъект.Дата 				= Выборка.Дата;
			ТекОбъект.ДокОснование 		= ДанныеЗаполнения;
			ТекОбъект.Субконто1 		= Выборка.Статья;		
			ТекОбъект.ПриходРасход 		= Выборка.ВидОперации;
			ТекОбъект.Субконто2 		= Выборка.Источник;
			ТекОбъект.Контрагент 		= Выборка.Контрагент;
			ТекОбъект.ИнвПроект 		= Выборка.ИнвПроект;
			
			Если НЕ Выборка.Предприятие = Выборка.ЦФО Тогда
				НоваяСтрока 				= ТекОбъект.Проводки.Добавить();
				НоваяСтрока.КорСчет 		= ПланыСчетов.Учетный.Счет7901();
				НоваяСтрока.КорСубконто1 	= Выборка.ЦФО;
				НоваяСтрока.Содержание 		= ТекОбъект.Содержание;
				НоваяСтрока.Сумма 			= Выборка.Сумма;
				НоваяСтрока.ФинСтатья 		= Выборка.Статья;
				НоваяСтрока.ФинЦФО 			= Выборка.ЦФО;
				НоваяСтрока.ФинПодразделение = Выборка.ПодразделениеЦФО;
				НоваяСтрока.ГУИДСтроки 		= Новый УникальныйИдентификатор;
				//ТекОбъект.Субконто1 = ТекСтрока.СтатьяДДС;	
			Иначе
				НоваяСтрока 				= ТекОбъект.Проводки.Добавить();
				НоваяСтрока.Содержание 		= ТекОбъект.Содержание;
				НоваяСтрока.Сумма 			= Выборка.Сумма;
				НоваяСтрока.ФинЦФО 			= Выборка.Предприятие;
				НоваяСтрока.ФинСтатья 		= Выборка.Статья;
				НоваяСтрока.ФинПодразделение = Выборка.Подразделение;
				НоваяСтрока.ГУИДСтроки 		= Новый УникальныйИдентификатор;
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Операция(Команда)
	ТекСтрока = Элементы.Опознавания.ТекущаяСтрока;
	ТекДанные = Элементы.Опознавания.ТекущиеДанные;
	Обработана = БюджетныйНаСервере.ВернутьРеквизит(ТекСтрока, "ОбработанОператоромКазныСразу") ИЛИ
	НЕ ПустаяСтрока(ТекДанные.ПодчиненныйДокумент);
	
	Если Обработана  Тогда
		//Если Вопрос("На основании текущей платежки уже есть движение ДС. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет  Тогда
		//	Возврат;		
		//КонецЕсли;
		Предупреждение("Опознавание уже обработано.");
		Возврат;
	КонецЕсли;
	
	Форма = ПолучитьФорму("Документ.КЗ_ОпознаваниеПрихода.ФормаОбъекта"); ;
	ДанныеФормы = Форма.Объект;
	ЗаполнитьНаСервереОперацию(ДанныеФормы, ТекСтрока);
	КопироватьДанныеФормы(ДанныеФормы, Форма.Объект);
	Форма.Открыть();
	//ОповеститьОбИзменении(ТекСтрока);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервереОперацию(ТекОбъект, ДанныеЗаполнения)
	ТекОбъект.Счет = ПланыСчетов.Казна.СчетаНевыясненныхСумм;	
	ТекОбъект.Предприятие = Константы.сабПредприятиеКазна.Получить();	
	ТекОбъект.Источник = ДанныеЗаполнения.СчетКонтрагента.Источник;
	ТекОбъект.Описание = ДанныеЗаполнения.Комментарий;
	ТекОбъект.ДокОснование = ДанныеЗаполнения.Ссылка;
	ТекОбъект.Сумма = ДанныеЗаполнения.СуммаДокумента;
	Для каждого ТекСтрока Из ДанныеЗаполнения.ТабличнаяЧасть Цикл
		НоваяСтрока = ТекОбъект.ТабличнаяЧасть1.Добавить();
		НоваяСтрока.Контрагент = ТекСтрока.Контрагент;
		НоваяСтрока.Предприятие = ТекСтрока.Предприятие;
		НоваяСтрока.Описание = ТекСтрока.Примечание;
		НоваяСтрока.Сумма = ТекСтрока.Сумма;
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура НеобработанныеКазна(Команда)
	Элементы.СписокКазныНеобработанныеКазна.Пометка = 1 - Элементы.СписокКазныНеобработанныеКазна.Пометка;
	ОбновитьСписокКазны(Элементы.СписокКазныНеобработанныеКазна.Пометка);
КонецПроцедуры

&НаКлиенте
Процедура ДвижениеДС3(Команда)
	ТекСтрока = Элементы.СписокКазны.ДанныеСтроки(Элементы.СписокКазны.ТекущаяСтрока);
	
	Если НЕ ТекСтрока.ПодчиненныйДокумент.Пустая() И НЕ БюджетныйНаСервере.ВернутьРеквизит(ТекСтрока.ПодчиненныйДокумент, "ПометкаУдаления") Тогда
		//Если Вопрос("На основании текущей платежки уже есть движение ДС. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет  Тогда
		//	Возврат;		
		//КонецЕсли;
		Предупреждение("На основании текущего документа уже есть движение ДС.");
		Возврат;
	КонецЕсли;
	
	Если ПроверкаВНХДвижения(ТекСтрока.Регистратор) Тогда
		Предупреждение("Данный перевод является возмещение ВНХ платежа. Разнесите все движения по кассам и расчетным счетам, относящимся к предприятию " + Строка(Объект.Предприятие) + " для обработки данного перевода.");	
		Возврат;
	КонецЕсли;
	
	Форма = ПолучитьФорму("Документ.УЧ_ДвижениеДС.ФормаОбъекта");
	ДанныеФормы = Форма.Объект;
	ЗаполнитьНаСервереКазна(ДанныеФормы, ТекСтрока);
	КопироватьДанныеФормы(ДанныеФормы, Форма.Объект);
	Форма.ТипОбъектаОбновления = "ДокументСсылка.КЗ_Перевод";
	Форма.Открыть();
	//ОповеститьОбИзменении(ТекСтрока);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверкаВНХДвижения(Регистратор)
	
	Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.КЗ_Перевод") И (Регистратор.ДокОснование.ПриходРасход = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ")) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
		
		
	КонецЕсли;
	
	
КонецФункции // ()



&НаСервере
Процедура ЗаполнитьНаСервереКазна(ТекОбъект, ДанныеЗаполнения)
		
	НаборЗаписей = РегистрыБухгалтерии.Казна.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ДанныеЗаполнения.Регистратор);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 Тогда
		
		ТекЗапись = НаборЗаписей[ДанныеЗаполнения.НомерСтроки - 1];
		
		ВалютаПроекта = Объект.Предприятие.ОсновнаяВалютаУчета;
		Если ВалютаПроекта = УЧ_Сервер.НациональнаяВалюта() Или ВалютаПроекта = Справочники.Валюты.ПустаяСсылка() Тогда
			СуммаДокумента = ТекЗапись.Сумма;
		ИначеЕсли ТекЗапись.ВалютаДт = ВалютаПроекта И ЗначениеЗаполнено(ТекЗапись.ВалютнаяСуммаДт) Тогда
			СуммаДокумента = ТекЗапись.ВалютнаяСуммаДт;
			СуммаДокументаРуб = ТекЗапись.Сумма;
		ИначеЕсли ТекЗапись.ВалютаКт = ВалютаПроекта И ЗначениеЗаполнено(ТекЗапись.ВалютнаяСуммаКт) Тогда
			СуммаДокумента = ТекЗапись.ВалютнаяСуммаКт;
			СуммаДокументаРуб = ТекЗапись.Сумма;
		Иначе
			СуммаДокумента = ТекЗапись.Сумма * УЧ_Сервер.ПолучитьКурсВалют(УЧ_Сервер.НациональнаяВалюта(), ВалютаПроекта, ТекЗапись.Период);
			СуммаДокументаРуб = ТекЗапись.Сумма;
		КонецЕсли;
		
		ТекОбъект.СуммаДокумента = СуммаДокумента;
		ТекОбъект.СуммаДокументаРуб = СуммаДокументаРуб;
		ТекОбъект.Содержание = ТекЗапись.Содержание;
		ТекОбъект.ДокОснование = ДанныеЗаполнения.Регистратор;
		Попытка
			ТекОбъект.ДокОснование2 = ДанныеЗаполнения.Регистратор.ДокОснование;	
		Исключение
		КонецПопытки;
		
		ТекОбъект.НомерСтроки = ДанныеЗаполнения.НомерСтроки;
		ТекОбъект.Подразделение = Объект.Предприятие.ВидДеятельности;
		ТекОбъект.Предприятие = Объект.Предприятие;
		ТекОбъект.Счет = ?(Объект.Предприятие = Справочники.Предприятия.НайтиПоНаименованию("Отель (Брюссель)"), ПланыСчетов.Учетный.КраткосрочныеКредиты, ПланыСчетов.Учетный.Счет5501());
		ТекОбъект.Дата = ТекЗапись.Период;
		ТекОбъект.ГУИДОснования = ТекЗапись.ГУИДСтроки;
		Если ТипЗнч(ДанныеЗаполнения.Регистратор) = Тип("ДокументСсылка.КЗ_Перевод") Тогда
			ТекОбъект.Видимость79 = Истина;
		КонецЕсли;
		
		//ТекОбъект.Субконто1 = ДанныеЗаполнения.Статья;		
		ТекОбъект.Субконто2 = Справочники.Кассы.Виртуальный;
		//ТекОбъект.Контрагент = ДанныеЗаполнения.Контрагент;
		НоваяСтрока = ТекОбъект.Проводки.Добавить();
		НоваяСтрока.Содержание = ТекОбъект.Содержание;
		НоваяСтрока.Сумма = СуммаДокумента;
		НоваяСтрока.ГУИДСтроки = Новый УникальныйИдентификатор;
		Если ТекЗапись.СчетДт = ПланыСчетов.Казна.ТекущиеСчета Тогда
			Если ТекЗапись.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Предприятия", Истина)] = Объект.Предприятие Тогда
				ТекОбъект.ПриходРасход = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.Оплата");
				Если ТекЗапись.СчетКт = ПланыСчетов.Казна.ТекущиеСчета Тогда
					ТекОбъект.Счет79 = ПланыСчетов.Учетный.Счет7901();
					ТекОбъект.Субконто179 = ТекЗапись.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Предприятия", Истина)];
					//НоваяСтрока.Субконто279 = НоваяСтрока.КорСубконто179.ВидДеятельности;
				КонецЕсли;
			Иначе
				ТекОбъект.ПриходРасход = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.Поступление");
				ТекОбъект.Счет79 = ПланыСчетов.Учетный.Счет7901();
				ТекОбъект.Субконто179 = ТекЗапись.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Предприятия", Истина)];
				//НоваяСтрока.КорСубконто279 = НоваяСтрока.КорСубконто179.ВидДеятельности;					
			КонецЕсли;
		Иначе
			ТекОбъект.ПриходРасход = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.Поступление");
			//НоваяСтрока.КорСубконто179 = ТекЗапись.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Предприятия", Истина)];
		КонецЕсли;
	КонецЕсли;
	//КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКазныВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "СписокКазныПодчиненныйДокумент" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьЗначение(Элементы.СписокКазны.ТекущиеДанные.ПодчиненныйДокумент);
	Иначе
		Если ТипЗнч(Элементы.СписокКазны.ТекущиеДанные.Регистратор) = Тип("ДокументСсылка.КЗ_Операция") Тогда
			СтандартнаяОбработка = Ложь;
			ОткрытьФорму("Документ.КЗ_Операция.ФормаОбъекта", Новый Структура("Ключ, НомерСтроки", Элементы.СписокКазны.ТекущиеДанные.Регистратор, Элементы.СписокКазны.ТекущиеДанные.НомерСтроки) ); 
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокКассыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "СписокКассыДвижениеДС" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьЗначение(Элементы.СписокКассы.ТекущиеДанные.ДвижениеДС);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "СписокДвижениеДС" Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(,Элементы.Список.ТекущиеДанные.ДвижениеДС);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Группа2ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ОбновитьДинСписок();
КонецПроцедуры

&НаКлиенте
Процедура ОбработаноВручную(Команда)
	аа = ПолучитьФорму("Документ.УЧ_ДвижениеДС.ФормаВыбора");
	НовыйОтбор = аа.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Предприятие");
	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	НовыйОтбор.ПравоеЗначение = Объект.Предприятие;
	НовыйОтбор = аа.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Субконто2");
	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	НовыйОтбор.ПравоеЗначение = Казна();
	ТекДокумент = аа.ОткрытьМодально();
	
	//ТекДокумент = ОткрытьФормуМодально("Документ.УЧ_ДвижениеДС.ФормаВыбора");
	Если НЕ ТекДокумент = Неопределено Тогда
		
		ТекСтрока = Элементы.СписокКазны.ТекущаяСтрока;
		
		ТекДанные = Элементы.СписокКазны.ТекущиеДанные;
		
		Если НЕ ТекДанные.ПодчиненныйДокумент.Пустая() Тогда
			Предупреждение("На основании текущего документа уже есть движение ДС.");
			Возврат;
		КонецЕсли;
		
		ВыбратьНаСервереКазна(ТекДокумент, ТекСтрока);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция Казна()
	
	Возврат Справочники.Кассы.Виртуальный;	
	
КонецФункции // ()


&НаСервере
Процедура ВыбратьНаСервереКазна(ТекДокумент, ДанныеЗаполнения)
	
	ТекДокументОбъект = ТекДокумент.ПолучитьОбъект();
	
	
	НаборЗаписей = РегистрыБухгалтерии.Казна.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ДанныеЗаполнения.Регистратор);
	НаборЗаписей.Прочитать();
	Для каждого ТекЗапись Из НаборЗаписей Цикл
		Если ТекЗапись.НомерСтроки = ДанныеЗаполнения.НомерСтроки Тогда
			ТекДокументОбъект.ДокОснование = ДанныеЗаполнения.Регистратор;
			ТекДокументОбъект.НомерСтроки = ДанныеЗаполнения.НомерСтроки;
		КонецЕсли;
	КонецЦикла;
	ТекДокументОбъект.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура НеобработанныеОпознавания(Команда)
	Элементы.ОпознаванияНеобработанныеОпознавания.Пометка = 1 - Элементы.ОпознаванияНеобработанныеОпознавания.Пометка;
	ОбновитьСписокОпознаваний(Элементы.ОпознаванияНеобработанныеОпознавания.Пометка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокОпознаваний(Признак)
	
	Если Признак Тогда
		НовыйОтборГруппа = Опознавания.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		НовыйОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
		НовыйОтборГруппа2 = НовыйОтборГруппа.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		НовыйОтборГруппа2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		НовыйОтбор = НовыйОтборГруппа2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПодчиненныйДокумент");
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		НовыйОтбор = НовыйОтборГруппа2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбработанОператоромКазныСразу");
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		НовыйОтбор.ПравоеЗначение = Ложь;
		
		НовыйОтбор = НовыйОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПодчиненныйДокумент.ПометкаУдаления");
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		НовыйОтбор.ПравоеЗначение = Истина;
	Иначе
		Для каждого ТекСтрокаОтбора Из Опознавания.Отбор.Элементы Цикл
			Если ТипЗнч(ТекСтрокаОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") И ТекСтрокаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли Тогда
				Опознавания.Отбор.Элементы.Удалить(ТекСтрокаОтбора);
			КонецЕсли;
			Опознавания.Отбор.Элементы.Очистить();
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Список.Параметры.УстановитьЗначениеПараметра("ДатаНачала", Дата('20120501000000'));
	//Список.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", ТТ2);
	//Список.Параметры.УстановитьЗначениеПараметра("Дата1", ТекущаяДата());
	Список.Параметры.УстановитьЗначениеПараметра("Источник", Неопределено);
	
	//СписокКазны.Параметры.УстановитьЗначениеПараметра("Предприятия", Неопределено);
	//СписокКазны.Параметры.УстановитьЗначениеПараметра("ДатаНачала", Дата('20120501000000'));
	//СписокКазны.Параметры.УстановитьЗначениеПараметра("Предприятия", Справочники.Предприятия.ПустаяСсылка());
	//СписокКазны.Параметры.УстановитьЗначениеПараметра("ДоступныеПредприятия", ПараметрыСеанса.ДоступныеПредприятия);
	//СписокКазны.Параметры.УстановитьЗначениеПараметра("ДатаНачала", Дата('20120501000000'));
	СписокКассы.Параметры.УстановитьЗначениеПараметра("Предприятия", Неопределено);
	СписокКассы.Параметры.УстановитьЗначениеПараметра("Источник", Неопределено);
	Опознавания.Параметры.УстановитьЗначениеПараметра("ДоступныеПредприятия", Неопределено);
	
	СписокПереводов.Параметры.УстановитьЗначениеПараметра("Предприятия", Справочники.Предприятия.ПустаяСсылка());
	СписокПереводов.Параметры.УстановитьЗначениеПараметра("ДоступныеПредприятия", ПараметрыСеанса.ДоступныеПредприятия);
	
	Если Константы.УЧ_ВНХМодуль.Получить() И Константы.сабУЧ_ИспользоватьПереводы.Получить() Тогда
		Элементы.Переводы.Видимость = Ложь;
		Элементы.Казна.Видимость = Истина;
	Иначе
		Элементы.Переводы.Видимость = Истина;
		Элементы.Казна.Видимость = Ложь;
	КонецЕсли;
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.БанковскиеСчета"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив);
	Элементы.Источник.ОграничениеТипа = ОписаниеТиповС;
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.Кассы"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив);
	Элементы.ИсточникКасс.ОграничениеТипа = ОписаниеТиповС;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиНаОснованииОпознаваниеПрихода(Команда)
	
	ТекСтрока 	= Элементы.Опознавания.ТекущаяСтрока;
	ТекДанные 	= Элементы.Опознавания.ТекущиеДанные;
	Обработана 	= БюджетныйНаСервере.ВернутьРеквизит(ТекСтрока, "ОбработанОператоромКазныСразу") ИЛИ НЕ ПустаяСтрока(ТекДанные.ПодчиненныйДокумент);
	
	Если Обработана  Тогда
		Предупреждение("Опознавание уже обработано.");
		Возврат;
	КонецЕсли;
	
	Форма = ПолучитьФорму("Документ.УЧ_ОпознаваниеПрихода.ФормаОбъекта"); ;
	ДанныеФормы = Форма.Объект;
	ЗаполнитьНаСервереОпознаваниеПрихода(ДанныеФормы, ТекСтрока);
	КопироватьДанныеФормы(ДанныеФормы, Форма.Объект);
	Форма.Открыть();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервереОпознаваниеПрихода(ТекОбъект, ДанныеЗаполнения)
	
	ТекОбъект.Счет 			= ПланыСчетов.Казна.СчетаНевыясненныхСумм;	
	ТекОбъект.Предприятие 	= Константы.сабПредприятиеКазна.Получить();	
	ТекОбъект.Источник 		= ДанныеЗаполнения.СчетКонтрагента.Источник;
	ТекОбъект.Описание 		= ДанныеЗаполнения.Комментарий;
	ТекОбъект.ДокОснование 	= ДанныеЗаполнения.Ссылка;
	ТекОбъект.Сумма 		= ДанныеЗаполнения.СуммаДокумента;
	
	Для Каждого ТекСтрока Из ДанныеЗаполнения.ТабличнаяЧасть Цикл
		НоваяСтрока 			 = ТекОбъект.Опознавание.Добавить();
		НоваяСтрока.КорСчет		 = ПланыСчетов.Учетный.Счет6201();
		НоваяСтрока.КорСубконто1 = ТекСтрока.Контрагент;
		НоваяСтрока.Контрагент 	 = ТекСтрока.Контрагент;
		НоваяСтрока.Предприятие  = ТекСтрока.Предприятие;
		НоваяСтрока.Описание 	 = ТекСтрока.Примечание;
		НоваяСтрока.Сумма 		 = ТекСтрока.Сумма;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДвижениеДС4(Команда)
	ТекСтрока = Элементы.СписокПереводов.ДанныеСтроки(Элементы.СписокПереводов.ТекущаяСтрока);
	
	Если НЕ ТекСтрока.ПодчиненныйДокумент.Пустая() И НЕ БюджетныйНаСервере.ВернутьРеквизит(ТекСтрока.ПодчиненныйДокумент, "ПометкаУдаления") Тогда
		//Если Вопрос("На основании текущей платежки уже есть движение ДС. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет  Тогда
		//	Возврат;		
		//КонецЕсли;
		Предупреждение("На основании текущего документа уже есть движение ДС.");
		Возврат;
	КонецЕсли;
	
	//Если ПроверкаВНХДвижения(ТекСтрока.Регистратор) Тогда
	//	Предупреждение("Данный перевод является возмещение ВНХ платежа. Разнесите все движения по кассам и расчетным счетам, относящимся к предприятию " + Строка(Объект.Предприятие) + " для обработки данного перевода.");	
	//	Возврат;
	//КонецЕсли;
	
	ОткрытьФорму("Документ.УЧ_ДвижениеДС.ФормаОбъекта", Новый Структура("Основание", Новый Структура("Ссылка, Субконто2", ТекСтрока, Объект.Источник) )); 
	
	//ОповеститьОбИзменении(ТекСтрока);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервереПеревод(ТекОбъект, ДанныеЗаполнения)
	
	ТекОбъект.ВидДвижения = "Прямое";
	ТекОбъект.СуммаДокумента = ДанныеЗаполнения.Сумма;
	ТекОбъект.Содержание = ДанныеЗаполнения.Содержание;
	ТекОбъект.ДокОснование2 = ДанныеЗаполнения.Регистратор;
	ТекОбъект.Контрагент = ДанныеЗаполнения.Контрагент;
	
	ТекОбъект.ГУИДОснования = ДанныеЗаполнения.ГУИДСтроки;
	ТекОбъект.Подразделение = Объект.Предприятие.ВидДеятельности;
	ТекОбъект.Предприятие = Объект.Предприятие;
	ТекОбъект.Счет = ПланыСчетов.Учетный.Счет5501();
	ТекОбъект.Дата = ДанныеЗаполнения.Дата;
	
	//Если ТипЗнч(ДанныеЗаполнения.Регистратор) = Тип("ДокументСсылка.КЗ_Перевод") Тогда
	//КонецЕсли;
	
	//ТекОбъект.Субконто1 = ДанныеЗаполнения.Статья;		
	ТекОбъект.Субконто2 = Справочники.Кассы.Виртуальный;
	//ТекОбъект.Контрагент = ДанныеЗаполнения.Контрагент;
	НоваяСтрока = ТекОбъект.Проводки.Добавить();
	НоваяСтрока.Содержание = ТекОбъект.Содержание;
	НоваяСтрока.Сумма = ДанныеЗаполнения.Сумма;
	НоваяСтрока.ГУИДСтроки = Новый УникальныйИдентификатор;
	//Если ТекЗапись.СчетДт = ПланыСчетов.Казна.ТекущиеСчета Тогда

	ТекОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийДвиженияДС.Взаимозачет");
	
	Если ДанныеЗаполнения.ПриходРасход = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ВозмещениеОплат") Тогда
		ТекОбъект.ПриходРасход = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ВозмещениеПоступлений");
	ИначеЕсли ДанныеЗаполнения.ПриходРасход = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ВозмещениеПоступлений") Тогда
		ТекОбъект.ПриходРасход = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ВозмещениеОплат");
	ИначеЕсли ПП_Сервер.ЭтоРасходнаяОперация(ДанныеЗаполнения.ПриходРасход) Тогда	
		ТекОбъект.ПриходРасход = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ВозмещениеПоступлений");
	Иначе
		ТекОбъект.ПриходРасход = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ВозмещениеОплат");
	КонецЕсли;
	
	Если УЧ_Сервер.ВНХСчет(ДанныеЗаполнения.КорСчет) Тогда
		//	ТекОбъект.Видимость79 = Истина;
		//	ТекОбъект.Счет79 = ПланыСчетов.Учетный.Счет7901();
		//	ТекОбъект.Субконто179 = ДанныеЗаполнения.Предприятие;
		НоваяСтрока.КорСчет = ДанныеЗаполнения.КорСчет;
		НоваяСтрока.КорСубконто1 = ДанныеЗаполнения.Предприятие;
	КонецЕсли;
	
	//Иначе
	//	ТекОбъект.ПриходРасход = "Приход";
	//	//НоваяСтрока.КорСубконто179 = ТекЗапись.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Предприятия", Истина)];
		//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбновитьОбработкуПлатежей" Тогда
		ОбновитьДинСписок();		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НеобработанныеПереводы(Команда)
	Элементы.СписокПереводовНеобработанныеПереводы.Пометка = 1 - Элементы.СписокПереводовНеобработанныеПереводы.Пометка;
	ОбновитьСписокПереводов(Элементы.СписокПереводовНеобработанныеПереводы.Пометка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокПереводов(Признак)
	
	Если Признак Тогда
		НовыйОтборГруппа = СписокПереводов.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		НовыйОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
		НовыйОтбор = НовыйОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПодчиненныйДокумент");
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		//НовыйОтбор.ПравоеЗначение = Документы.УЧ_ДвижениеДС.ПустаяСсылка();
		
		НовыйОтбор = НовыйОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПодчиненныйДокумент.ПометкаУдаления");
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		НовыйОтбор.ПравоеЗначение = Истина;
	Иначе
		Для каждого ТекСтрокаОтбора Из СписокПереводов.Отбор.Элементы Цикл
			Если ТипЗнч(ТекСтрокаОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") И ТекСтрокаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли Тогда
				СписокПереводов.Отбор.Элементы.Удалить(ТекСтрокаОтбора);
			КонецЕсли;
			СписокПереводов.Отбор.Элементы.Очистить();
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

Функция ПлатежМеждуПроектамиСРазнойВалютой(Выборка)
	
	ПредприятиеПлательщик = ПП_Сервер.ПолучитьПредприятие(Выборка.Дата, Выборка.БанковскийСчетИсточник);
	ПредприятиеПолучатель = ПП_Сервер.ПолучитьПредприятие(Выборка.Дата, Выборка.СчетКонтрагентаИсточник);
	Если Не ЗначениеЗаполнено(ПредприятиеПлательщик) Или Не ЗначениеЗаполнено(ПредприятиеПолучатель) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВалютаПредприятияПлательщика = ?(ЗначениеЗаполнено(ПредприятиеПлательщик.ОсновнаяВалютаУчета), ПредприятиеПлательщик.ОсновнаяВалютаУчета, УЧ_Сервер.НациональнаяВалюта());
	ВалютаПредприятияПолучателя  = ?(ЗначениеЗаполнено(ПредприятиеПолучатель.ОсновнаяВалютаУчета), ПредприятиеПолучатель.ОсновнаяВалютаУчета, УЧ_Сервер.НациональнаяВалюта());
	
	Возврат ВалютаПредприятияПлательщика <> ВалютаПредприятияПолучателя;
	
КонецФункции

&НаКлиенте
Процедура СписокПереводовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "СписокПереводовПодчиненныйДокумент" Тогда
		СтандартнаяОбработка = Ложь;
		ТекДанные = Элементы.СписокПереводов.ДанныеСтроки(Элементы.СписокПереводов.ТекущаяСтрока);
		ПоказатьЗначение(, ТекДанные.ПодчиненныйДокумент);
	КонецЕсли;
	// Вставить содержимое обработчика.
КонецПроцедуры



