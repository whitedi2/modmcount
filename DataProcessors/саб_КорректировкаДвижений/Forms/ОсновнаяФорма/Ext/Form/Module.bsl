
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если НЕ Параметры.Свойство("ДокументСсылка") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	ДокументСсылка = Параметры.ДокументСсылка;
	
	Заголовок = "Движения документа: " + Строка(ДокументСсылка);

	МетаданныеДокумента = ДокументСсылка.Метаданные();

	ЗаполнитьСтруктуруШапкиДокумента(МетаданныеДокумента);

	СтруктураШапки.Проведен = ДокументСсылка.Проведен;

	Если НЕ СтруктураШапки.Проведен 
		 И (НЕ СтруктураШапки.Свойство("РучнаяКорректировка") ИЛИ НЕ СтруктураШапки.РучнаяКорректировка) Тогда
		Возврат;
	КонецЕсли;

	Если СтруктураШапки.Свойство("РучнаяКорректировка") Тогда
		Объект.РучнаяКорректировка = СтруктураШапки.РучнаяКорректировка;
	Иначе
		Элементы.РучнаяКорректировка.Видимость    = Ложь;
		Элементы.КнопкаЗаписатьИЗакрыть.Видимость = Ложь;
	КонецЕсли;

	ЗаполнитьТаблицуРегистров(МетаданныеДокумента);
	СоздатьРеквизитыФормы();
	ПрочитатьЗаписиРегистров();
	СоздатьЭлементыФормы();
	 
	УстановитьВозможностьРедактированияЗаписей();
	
	//Если (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВводНачальныхОстатков")) Тогда
	//	Период = КонецМесяца(СтруктураШапки.Дата) + 1;
	//Иначе
	//	Период = СтруктураШапки.Дата;
	//КонецЕсли;
	
	//Если СтруктураШапки.Свойство("Организация") Тогда 
	//	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрОрганизацияФункциональныхОпцийФормы(
	//		ЭтаФорма,
	//		СтруктураШапки.Организация,
	//		Период);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если НЕ СтруктураШапки.Проведен 
		И (НЕ СтруктураШапки.Свойство("РучнаяКорректировка") ИЛИ НЕ СтруктураШапки.РучнаяКорректировка) Тогда 
		
		//Если БухгалтерскийУчетКлиентСерверПереопределяемый.ЭтоРегламентнаяОперация(ДокументСсылка) Тогда
		//	ТекстПредупреждения = НСтр("ru='Регламентная операция не выполнена.
		//		|Для получения информации о результатах проведения регламентную операцию необходимо выполнить.'");
		//ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОперацияБух") Тогда
		//	ТекстПредупреждения = НСтр("ru='Операция (БУ и НУ) помечена на удаление.
		//		|Для получения информации о движениях, необходимо снять пометку на удаление'");
		//Иначе
			ТекстПредупреждения = НСтр("ru='Документ не проведен.
				|Для получения информации о результатах проведения документ необходимо провести.'");
		//КонецЕсли;

		Предупреждение(ТекстПредупреждения);

		Отказ = Истина;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()

	ПовторноеОткрытиеСервер();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Если ЭтаФорма.Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Сохранить изменения движений?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, ,КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЗаписатьДвижения(Отказ);
		ИначеЕсли Ответ <> КодВозвратаДиалога.Нет Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура РучнаяКорректировкаПриИзменении(Элемент)

	ВыполнитьДействияПриИзмененииРучнойКорректировки();

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Хозрасчетный

&НаКлиенте
Процедура ХозрасчетныйСчетДтПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Учетный.ТекущиеДанные;

	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3, Организация",
								 "СубконтоДт1", "СубконтоДт2", "СубконтоДт3", СтрокаТаблицы.Организация);

	//!!БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетДт, СтрокаТаблицы, ПоляОбъекта, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоДт1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Дт", 1, Элемент, ДанныеВыбора, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоДт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Дт", 2, Элемент, ДанныеВыбора, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоДт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Дт", 3, Элемент, ДанныеВыбора, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСчетКтПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Учетный.ТекущиеДанные;

	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3, Организация",
								 "СубконтоКт1", "СубконтоКт2", "СубконтоКт3", СтрокаТаблицы.Организация);

	//!!БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетКт, СтрокаТаблицы, ПоляОбъекта, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоКт1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Кт", 1, Элемент, ДанныеВыбора, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоКт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Кт", 2, Элемент, ДанныеВыбора, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоКт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Кт", 3, Элемент, ДанныеВыбора, СтандартнаяОбработка);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)

	Отказ = Ложь;

	ИзмененаРучнаяКорректировка = СтруктураШапки.Свойство("РучнаяКорректировка")
		И (СтруктураШапки.РучнаяКорректировка <> Объект.РучнаяКорректировка);

	Если СтруктураШапки.Свойство("РучнаяКорректировка")
			И СтруктураШапки.РучнаяКорректировка
			И НЕ Объект.РучнаяКорректировка Тогда

		ТекстВопроса = НСтр("ru='Ручная корректировка движений документа отменена.
			|Восстановить движения, сформированные автоматически?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Объект.РучнаяКорректировка = Истина;
			УстановитьВозможностьРедактированияЗаписей();
			Возврат;
		КонецЕсли;

	КонецЕсли;

	ЗаписатьДвижения(Отказ);

	Если НЕ Отказ Тогда

		Если ИзмененаРучнаяКорректировка Тогда
			ОповеститьОбИзменении(ДокументСсылка);
		КонецЕсли;

		ЭтаФорма.Модифицированность = Ложь;
		
		Оповестить("ВыполненаЗаписьДокумента",Новый Структура("ДокументСсылка",ДокументСсылка));

		Закрыть();
		
		ЭтаФорма.ВладелецФормы.Закрыть();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьУчетный(Команда)
	
	ОбновитьУчетныйНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройку(Команда)

	СписокДвижений  = Новый СписокЗначений;
	СписокРегистров = Новый СписокЗначений;
	Для каждого СтрокаРегистра Из Объект.Регистры Цикл
		СписокДвижений.Добавить(СтрокаРегистра.Имя, , СтрокаРегистра.ЕстьДвижения);
		СписокРегистров.Добавить(СтрокаРегистра.Имя, СтрокаРегистра.Синоним, СтрокаРегистра.Отображение);
	КонецЦикла;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СписокДвижений", СписокДвижений);
	СтруктураПараметров.Вставить("СписокРегистров", СписокРегистров);

	СписокРезультат = ОткрытьФормуМодально("Обработка.КорректировкаДвижений.Форма.ФормаНастройки", СтруктураПараметров, ЭтаФорма);

	Если ТипЗнч(СписокРезультат) = Тип("СписокЗначений") Тогда

		БылиИзменения = Ложь;
		Для каждого СтрокаРегистра Из Объект.Регистры Цикл
			СтрокаСписка = СписокРезультат.НайтиПоЗначению(СтрокаРегистра.Имя);
			Если СтрокаРегистра.Отображение <> СтрокаСписка.Пометка Тогда
				БылиИзменения = Истина;
				СтрокаРегистра.Отображение = СтрокаСписка.Пометка;
			КонецЕсли;
		КонецЦикла;

		Если БылиИзменения Тогда

			ВыполнитьДействияПриИзмененииСоставаРегистров();

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПараметров(Форма, ТекущиеДанные, ШаблонИмяПоляОбъекта)

	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ТекущиеДанные[ИмяПоля]);
		//!!ИначеЕсли БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора().СодержитТип(ТипЗнч(ТекущиеДанные[ИмяПоля])) Тогда
		//	СписокПараметров.Вставить("ДоговорКонтрагента", ТекущиеДанные[ИмяПоля]);
		ИначеЕсли ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ТекущиеДанные[ИмяПоля]);
		ИначеЕсли ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ТекущиеДанные[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("ОстаткиОбороты", "Кт");
	СписокПараметров.Вставить("Организация"   , ТекущиеДанные["Организация"]);

	Возврат СписокПараметров;

КонецФункции

&НаКлиенте
Процедура ОбработатьНачалоВыбораСубконто(ДтКт, НомерСубконто, Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ТекущиеДанные     = Элементы.Учетный.ТекущиеДанные;
	ПараметрыДокумента = ПолучитьСписокПараметров(ЭтаФорма, ТекущиеДанные, "Субконто" + ДтКт + "%Индекс%");

	// Выбор партии или документа расчетов

	ПараметрыДокумента.Вставить("СчетУчета", ТекущиеДанные["Счет" + ДтКт]);
	//!!ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, СтандартнаяОбработка, ПараметрыДокумента);

	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;

	// Выбор других типов, связанных с организацией / контрагентом
	ЗначениеСубконто = ТекущиеДанные["Субконто" + ДтКт + НомерСубконто];
	ТипСубконто      = ТипЗнч(ЗначениеСубконто);

	//!!Если ТипСубконто = БухгалтерскийУчетКлиентСерверПереопределяемый.ТипЗначенияБанковскогоСчетаОрганизации() Тогда

	//	СтандартнаяОбработка = Ложь;
	//	Отбор = Новый Структура;
	//	Отбор.Вставить("Владелец", ПараметрыДокумента.Организация);
	//	ПараметрыФормы = Новый Структура("Отбор,ТекущаяСтрока", Отбор, ЗначениеСубконто);
	//	БухгалтерскийУчетКлиентПереопределяемый.ОткрытьФормуВыбораБанковскогоСчетОрганизации(ПараметрыФормы, Элемент);

	//ИначеЕсли ТипСубконто = БухгалтерскийУчетКлиентСерверПереопределяемый.ТипПодразделения() Тогда

	//	СтандартнаяОбработка = Ложь;
	//	Отбор = Новый Структура;
	//	ИмяРеквизитаОрганизации = БухгалтерскийУчетКлиентСерверПереопределяемый.ИмяРеквизитаОрганизацияПодразделения();
	//	Если ЗначениеЗаполнено(ИмяРеквизитаОрганизации) Тогда
	//		Отбор.Вставить(ИмяРеквизитаОрганизации, ПараметрыДокумента.Организация);
	//	КонецЕсли;
	//	ПараметрыФормы = Новый Структура("Отбор,ТекущаяСтрока", Отбор, ЗначениеСубконто);
	//	БухгалтерскийУчетКлиентПереопределяемый.ОткрытьФормуВыбораПодразделения(ПараметрыФормы, Элемент);

	//ИначеЕсли БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора().СодержитТип(ТипСубконто) Тогда

	//	СтандартнаяОбработка = Ложь;
	//	ПараметрыФормы = Новый Структура;
	//	Отбор = Новый Структура;
	//	Отбор.Вставить("Организация", ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(ПараметрыДокумента.Организация));
	//	Если ПараметрыДокумента.Свойство("Контрагент") Тогда
	//		Отбор.Вставить(БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаКонтрагентДоговора(), ПараметрыДокумента.Контрагент);
	//	КонецЕсли;
	//	ПараметрыФормы = Новый Структура("Отбор,ТекущаяСтрока", Отбор, ЗначениеСубконто);
	//	БухгалтерскийУчетКлиентПереопределяемый.ОткрытьФормуВыбораДоговора(ПараметрыФормы, Элемент);

	//ИначеЕсли ТипСубконто = Тип("СправочникСсылка.РегистрацииВНалоговомОргане") Тогда

	//	СтандартнаяОбработка = Ложь;
	//	Отбор = Новый Структура;
	//	Отбор.Вставить("Владелец", ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(ПараметрыДокумента.Организация));
	//	ПараметрыФормы = Новый Структура("Отбор,ТекущаяСтрока", Отбор, ЗначениеСубконто);
	//	ОткрытьФорму("Справочник.РегистрацииВНалоговомОргане.ФормаВыбора", ПараметрыФормы, Элемент);

	//КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаписатьДвижения(Отказ)

	Если Объект.РучнаяКорректировка Тогда

		Попытка
			НачатьТранзакцию();
				Если НЕ СтруктураШапки.РучнаяКорректировка Тогда
					ДокОбъект = ДокументСсылка.ПолучитьОбъект();
					ДокОбъект.РучнаяКорректировка = Истина;
					ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;

				СтрокиСДвижениями = Объект.Регистры.НайтиСтроки(Новый Структура("ЕстьДвижения", Истина));
				
				Для каждого СтрокаРегистра Из Объект.Регистры Цикл
					ЗаписыватьНабор = СтрокаРегистра.ЕстьДвижения ИЛИ (ЭтаФорма[СтрокаРегистра.Имя].Количество() > 0);
					Если ЗаписыватьНабор Тогда
						НаборЗаписей = РеквизитФормыВЗначение(СтрокаРегистра.Имя);
						НаборЗаписей.УстановитьАктивность(НЕ СтруктураШапки.ПометкаУдаления);
						Если НЕ (СтрокаРегистра.ТипРегистра = "РегистрСведений" 
							И Метаданные.РегистрыСведений[СтрокаРегистра.Имя].ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический) Тогда
							Для каждого Запись Из НаборЗаписей Цикл
								Если Запись.Период = '00010101' Тогда
									Запись.Период = СтруктураШапки.Дата;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						НаборЗаписей.Записать(Истина);
					КонецЕсли;
				КонецЦикла;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстОшибки = НСтр("ru='Не удалось записать движения документа %1: %2'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка(ДокументСсылка), ОписаниеОшибки());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументСсылка);
			ИмяСобытия = НСтр("ru = 'Ошибка записи движений документа'");
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,, ДокументСсылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;

	Иначе

		Попытка
			ДокОбъект = ДокументСсылка.ПолучитьОбъект();
			Если СтруктураШапки.РучнаяКорректировка Тогда
				ДокОбъект.РучнаяКорректировка = Ложь;
			КонецЕсли;
			//Если БухгалтерскийУчетКлиентСерверПереопределяемый.ЭтоРегламентнаяОперация(ДокументСсылка) Тогда
			//	ДокОбъект.ВыполнитьОперацию();
			//Иначе
				ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			//КонецЕсли;
		Исключение
			//Если БухгалтерскийУчетКлиентСерверПереопределяемый.ЭтоРегламентнаяОперация(ДокументСсылка) Тогда
			//	
			//	ТекстОшибки = НСтр("ru='Не удалось выполнить операцию %1: %2'") + Символы.ПС + НСтр("ru='Регламентная операция отменена.'");
			//	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка(ДокументСсылка), ОписаниеОшибки());
			//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументСсылка);
			//	
			//	ДокОбъект.ОтменитьОперацию();
			//	
			//	ИмяСобытия = НСтр("ru = 'Ошибка выполнения регламентной операции'");
			//	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,, ДокументСсылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			//Иначе
				
				ТекстОшибки = НСтр("ru='Не удалось перепровести документ %1: %2'") + Символы.ПС + НСтр("ru='Проведение документа отменено.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка(ДокументСсылка),  ОписаниеОшибки());
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументСсылка);
				
				ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				ИмяСобытия = НСтр("ru = 'Ошибка перепроведения документа'");
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,, ДокументСсылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			//КонецЕсли;
			ВызватьИсключение;
		КонецПопытки;

		УстановитьДоступностьСубконто();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВыполнитьДействияПриИзмененииСоставаРегистров()

	СоздатьЭлементыФормы();

	УстановитьВозможностьРедактированияЗаписей();

КонецПроцедуры

&НаСервере
Процедура ОбновитьУчетныйНаСервере()
	
	ИмяРегистра = "Учетный";
	МассивРегистров = Объект.Регистры.НайтиСтроки(Новый Структура("Имя", ИмяРегистра));
	Если МассивРегистров.Количество() = 1 Тогда
		СтрокаРегистра = МассивРегистров[0];
	Иначе
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапки.Свойство("РучнаяКорректировка") ИЛИ НЕ СтруктураШапки.РучнаяКорректировка Тогда
		НаборЗаписей = РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);

		Если СтрокаРегистра.ЕстьДвижения Тогда
			НаборЗаписей.Прочитать();
		КонецЕсли;

		ЗначениеВРеквизитФормы(НаборЗаписей, ИмяРегистра);
		ЭтаФорма.Модифицированность = Ложь;
	КонецЕсли;
	
	УстановитьДоступностьСубконто();
	
КонецПроцедуры

&НаСервере
Функция ОпределитьНаличиеДвижений(МетаданныеДокумента = Неопределено)

	Если МетаданныеДокумента = Неопределено Тогда
		МетаданныеДокумента = ДокументСсылка.Метаданные();
	КонецЕсли;

	Если МетаданныеДокумента.Движения.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;

	ТекстЗапроса = "";

	Для Каждого Движение ИЗ МетаданныеДокумента.Движения Цикл
		// в запросе получаем имена регистров, по которым есть хотя бы одно движение
		// например,
		// ВЫБРАТЬ Первые 1 «РегистрНакопления.ТоварыНаСкладах»
		// ИЗ РегистрНакопления.ТоварыНаСкладах
		// ГДЕ Регистратор = &Регистратор

		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 """ + Движение.ПолноеИмя() +  """ КАК Имя ИЗ "
		+ Движение.ПолноеИмя() + " ГДЕ Регистратор = &Регистратор";

	КонецЦикла;

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();

	Возврат ТаблицаЗапроса;

КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуРегистров(МетаданныеДокумента = Неопределено)

	Если МетаданныеДокумента = Неопределено Тогда
		МетаданныеДокумента = ДокументСсылка.Метаданные();
	КонецЕсли;

	ТаблицаДвижений = ОпределитьНаличиеДвижений(МетаданныеДокумента);
	ТаблицаДвижений.Индексы.Добавить("Имя");

	Объект.Регистры.Очистить();

	Для каждого МетаданныеРегистра Из МетаданныеДокумента.Движения Цикл

		Строка = Объект.Регистры.Добавить();
		Строка.Имя = МетаданныеРегистра.Имя;

		ПолноеИмя = МетаданныеРегистра.ПолноеИмя();

		ПозицияТочки = Найти(ПолноеИмя, ".");
		ТипРегистра = Лев(ПолноеИмя, ПозицияТочки - 1);
		Строка.ТипРегистра = ТипРегистра;
		Строка.Синоним = МетаданныеРегистра.Синоним;

		Строка.ЕстьДвижения = ТаблицаДвижений.Найти(ПолноеИмя, "Имя") <> Неопределено;
		Строка.Отображение = Строка.ЕстьДвижения;

	КонецЦикла;

	// Первым показывается регистр бухгалтерии, затем регистры накопления, затем - сведений
	Объект.Регистры.Сортировать("ТипРегистра, Синоним");

КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыФормы()

	ПоказатьУчетный = Ложь;
	ПоказатьКазну = Ложь;
    ПоказатьПлатежки = Ложь;
	ПоказатьЗаявкиНаОплату = Ложь;
	
	Для каждого СтрокаРегистра Из Объект.Регистры Цикл

		Если СтрокаРегистра.Имя = "Учетный" Тогда
			ПоказатьУчетный = СтрокаРегистра.Отображение;
			Продолжить;
		ИначеЕсли СтрокаРегистра.Имя = "Казна" Тогда
			ПоказатьКазну = СтрокаРегистра.Отображение;
			Продолжить;
		ИначеЕсли СтрокаРегистра.Имя = "Платежки" Тогда
			ПоказатьПлатежки = СтрокаРегистра.Отображение;
			Продолжить;
		ИначеЕсли СтрокаРегистра.Имя = "ЗаявкиНаОплату" Тогда
			ПоказатьЗаявкиНаОплату = СтрокаРегистра.Отображение;
			Продолжить;
		КонецЕсли;

		// Создаем страницу для регистра в "правильном" месте между "предопределенными" закладками
		ИмяГруппы = "Группа" + СтрокаРегистра.Имя;
		ТекГруппа = Элементы.Найти(ИмяГруппы);
		Если ТекГруппа = Неопределено Тогда
			Если СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
				ТекГруппа = Элементы.Вставить(
					ИмяГруппы,
					Тип("ГруппаФормы"),
					Элементы.ГруппаДвиженияРегистров);
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
				ТекГруппа = Элементы.Вставить(
					ИмяГруппы,
					Тип("ГруппаФормы"),
					Элементы.ГруппаДвиженияРегистров);
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
				ТекГруппа = Элементы.Вставить(
					ИмяГруппы,
					Тип("ГруппаФормы"),
					Элементы.ГруппаДвиженияРегистров);
			Иначе
				Продолжить;
			КонецЕсли;
			ТекГруппа.Заголовок = СтрокаРегистра.Синоним;
		КонецЕсли;

		// Делаем страницу регистра невидимой, если она не нужна
		ТекГруппа.Видимость = СтрокаРегистра.Отображение;
		Если НЕ СтрокаРегистра.Отображение Тогда
			Продолжить;
		КонецЕсли;

		// На странице регистра создаем таблицу
		ИмяТаблицы = СтрокаРегистра.Имя;
		ТекТаблица = Элементы.Найти(ИмяТаблицы);
		Если ТекТаблица <> Неопределено Тогда
			Элементы.Удалить(ТекТаблица);
		КонецЕсли;
		ТекТаблица = Элементы.Добавить(ИмяТаблицы, Тип("ТаблицаФормы"), ТекГруппа);
		ТекТаблица.ПутьКДанным = СтрокаРегистра.Имя;

		ТекТаблица.ПутьКДаннымКартинкиСтроки = СтрокаРегистра.Имя + ".Активность";
		Если СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
			ТекТаблица.КартинкаСтрок = БиблиотекаКартинок.АктивностьПоРБ;
		ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
			ТекТаблица.КартинкаСтрок = БиблиотекаКартинок.АктивностьПоРН;
			ТекТаблица.ПутьКДаннымКартинкиСтроки = СтрокаРегистра.Имя + ".КартинкаСтроки";
		ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
			ТекТаблица.КартинкаСтрок = БиблиотекаКартинок.АктивностьПоРС;
		КонецЕсли;
		
		// В командной панели страницы создаем кнопку "Найти в списке"
		ТекКоманда = Команды.Найти(ИмяТаблицы + "НайтиВСписке");
		Если ТекКоманда = Неопределено Тогда
			ТекКоманда = Команды.Добавить(ИмяТаблицы + "НайтиВСписке");
			ТекКоманда.Действие 		= "РегистрНайтиВСписке";
			ТекКоманда.Заголовок 		= НСтр("ru='Найти в списке'");
			ТекКоманда.Картинка 		= БиблиотекаКартинок.НайтиВСписке;
			ТекКоманда.Отображение		= ОтображениеКнопки.Картинка;
		КонецЕсли;
		ТекГруппаКнопок = Элементы.Добавить("Группа" + ИмяТаблицы + "НайтиВСписке", Тип("ГруппаФормы"), ТекТаблица.КоманднаяПанель);
		ТекГруппаКнопок.Вид 		= ВидГруппыФормы.ГруппаКнопок;
		ТекГруппаКнопок.Заголовок 	= НСтр("ru='Найти в списке'");
		ТекКнопка = Элементы.Добавить(ИмяТаблицы + "НайтиВСписке", Тип("КнопкаФормы"), ТекГруппаКнопок);
		ТекКнопка.ИмяКоманды 		= ТекКоманда.Имя;  
		ТекКнопка.Заголовок			= НСтр("ru='Найти в списке'");
			
		// Назначаем общий обработчик
		ТекТаблица.УстановитьДействие("ПриНачалеРедактирования", "ТаблицаРегистраПриНачалеРедактирования");
		
		// Определяем набор колонок для таблицы, соответствующих метаданным регистра
		Если СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
			НаборЗаписей = РегистрыНакопления[СтрокаРегистра.Имя].СоздатьНаборЗаписей();
		ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
			НаборЗаписей = РегистрыСведений[СтрокаРегистра.Имя].СоздатьНаборЗаписей();
		ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
			НаборЗаписей = РегистрыБухгалтерии[СтрокаРегистра.Имя].СоздатьНаборЗаписей();
		КонецЕсли;
		РеквизитыНабораЗаписей = НаборЗаписей.ВыгрузитьКолонки();

		// Некоторые колонки не надо показывать
		РеквизитыНабораЗаписей.Колонки.Удалить("Регистратор");
		РеквизитыНабораЗаписей.Колонки.Удалить("Активность");
		Если РеквизитыНабораЗаписей.Колонки.Найти("МоментВремени") <> Неопределено Тогда
			РеквизитыНабораЗаписей.Колонки.Удалить("МоментВремени");
		КонецЕсли;
		Если РеквизитыНабораЗаписей.Колонки.Найти("Организация") <> Неопределено Тогда
			РеквизитыНабораЗаписей.Колонки.Удалить("Организация");
		КонецЕсли;

		// Создаем колонки таблицы
		Для каждого КолонкаРеквизита Из РеквизитыНабораЗаписей.Колонки Цикл
			ИмяКолонки = СтрокаРегистра.Имя + КолонкаРеквизита.Имя;
			ТекКолонка = Элементы.Найти(ИмяКолонки);
			Если ТекКолонка = Неопределено Тогда
				ТекКолонка = Элементы.Добавить(ИмяКолонки, Тип("ПолеФормы"), ТекТаблица);
				
				Если КолонкаРеквизита.Имя = "ВидДвижения"
					И КолонкаРеквизита.ТипЗначения.Типы()[0] = Тип("ВидДвиженияНакопления") Тогда
					ТекКолонка.УстановитьДействие("ПриИзменении", "ВидДвиженияПриИзменении");
				КонецЕсли;
			КонецЕсли;
			ТекКолонка.ПутьКДанным = СтрокаРегистра.Имя + "." + КолонкаРеквизита.Имя;
			ТекКолонка.Вид = ВидПоляФормы.ПолеВвода;
		КонецЦикла;

	КонецЦикла;

	Элементы.ГруппаУчетный.Видимость = ПоказатьУчетный;
	Элементы.ГруппаКазна.Видимость = ПоказатьКазну;
	Элементы.ГруппаПлатежки.Видимость = ПоказатьПлатежки;
	Элементы.ГруппаЗаявкиНаОплату.Видимость = ПоказатьЗаявкиНаОплату;

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСубконто()
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Табл.СчетДт КАК Счет,
	               |	Табл.Предприятия КАК Предприятие,
	               |	Табл.СчетКт КАК СчетКт
	               |ПОМЕСТИТЬ Врем
	               |ИЗ
	               |	&Табл КАК Табл
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Предприятия.УчетПоПодразделениям КАК УчетПоПодразделениям,
	               |	Врем.Счет КАК Счет,
	               |	Предприятия.Ссылка КАК Предприятие
	               |ПОМЕСТИТЬ УчетПоПодразделениямПредприятия
	               |ИЗ
	               |	Врем КАК Врем
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Предприятия КАК Предприятия
	               |		ПО Врем.Предприятие = Предприятия.Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Врем.Счет,
	               |	Предприятия.УчетПоПодразделениям,
	               |	Предприятия.Ссылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Предприятия.УчетПоПодразделениям,
	               |	Врем.СчетКт,
	               |	Предприятия.Ссылка
	               |ИЗ
	               |	Врем КАК Врем
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Предприятия КАК Предприятия
	               |		ПО Врем.Предприятие = Предприятия.Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Предприятия.УчетПоПодразделениям,
	               |	Врем.СчетКт,
	               |	Предприятия.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(Учетный.Количественный, ЛОЖЬ) КАК Количественный,
	               |	ЕСТЬNULL(Учетный.Ссылка, УчетПоПодразделениямПредприятия.Счет) КАК Счет,
	               |	ЕСТЬNULL(Учетный.Валютный, ЛОЖЬ) КАК Валютный,
	               |	УчетПоПодразделениямПредприятия.УчетПоПодразделениям КАК УчетПоПодразделениям,
	               |	УчетПоПодразделениямПредприятия.Предприятие КАК Предприятие,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УчетныйВидыСубконто.ВидСубконто) КАК КоличествоСубконто
	               |ИЗ
	               |	УчетПоПодразделениямПредприятия КАК УчетПоПодразделениямПредприятия
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Учетный КАК Учетный
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Учетный.ВидыСубконто КАК УчетныйВидыСубконто
	               |			ПО Учетный.Ссылка = УчетныйВидыСубконто.Ссылка
	               |		ПО УчетПоПодразделениямПредприятия.Счет = Учетный.Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	УчетПоПодразделениямПредприятия.УчетПоПодразделениям,
	               |	ЕСТЬNULL(Учетный.Количественный, ЛОЖЬ),
	               |	ЕСТЬNULL(Учетный.Валютный, ЛОЖЬ),
	               |	ЕСТЬNULL(Учетный.Ссылка, УчетПоПодразделениямПредприятия.Счет),
	               |	УчетПоПодразделениямПредприятия.Предприятие";
	
	Запрос.УстановитьПараметр("Табл", Учетный.Выгрузить());
	//Запрос.УстановитьПараметр("Предприятие", Учетный[0].Предприятие);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();
	
	//Соотв = Новый Соответствие;
	//Пока Выборка.Следующий() Цикл
	//	Соотв.Вставить(Выборка.Счет, Новый Структура("Количественный, Валютный, УчетПоПодразделениям, КоличествоСубконто, Предприятие", Выборка.Количественный, Выборка.Валютный, Выборка.УчетПоПодразделениям, Выборка.Счет.ВидыСубконто.Количество(), Выборка.Предприятие)); 		
	//КонецЦикла;
	
	
	Для Каждого СтрокаТаблицы Из Учетный Цикл
		УчетЦФОДт = Ложь;
		УчетЦФОКт = Ложь;
		СтрокаПоискаДт = Выборка.НайтиСтроки(Новый Структура("Счет, Предприятие", СтрокаТаблицы.СчетДт, СтрокаТаблицы.Предприятия));
		Для каждого ТекСтрока Из СтрокаПоискаДт Цикл
			Для Индекс = 1 По 3 Цикл
				СтрокаТаблицы["СубконтоДт"   + Индекс + "Доступность"] = (Индекс <= ТекСтрока.КоличествоСубконто);
			КонецЦикла;
			СтрокаТаблицы["ПодразделениеДтДоступность"] = ТекСтрока.УчетПоПодразделениям;
			СтрокаТаблицы["ВалютаДтДоступность"] = ТекСтрока.Валютный;
			СтрокаТаблицы["КоличествоДтДоступность"] = ТекСтрока.Количественный;
			//УчетЦФОДт = ТекСтрока.УчетПоЦФО;
		КонецЦикла; 
		
		СтрокаПоискаКт = Выборка.НайтиСтроки(Новый Структура("Счет, Предприятие", СтрокаТаблицы.СчетКт, СтрокаТаблицы.Предприятия));
		Для каждого ТекСтрока Из СтрокаПоискаКт Цикл
			Для Индекс = 1 По 3 Цикл
				СтрокаТаблицы["СубконтоКт"   + Индекс + "Доступность"] = (Индекс <= ТекСтрока.КоличествоСубконто);
			КонецЦикла;
			СтрокаТаблицы["ПодразделениеКт"   + "Доступность"] = ТекСтрока.УчетПоПодразделениям;
			СтрокаТаблицы["ВалютаКтДоступность"] = ТекСтрока.Валютный;
			СтрокаТаблицы["КоличествоКтДоступность"] = ТекСтрока.Количественный;
			//УчетЦФОКт = ТекСтрока.УчетПоЦФО;
		КонецЦикла;
		
		//СтрокаТаблицы["УчетЦФОДоступность"] = УчетЦФОДт ИЛИ УчетЦФОКт;
		
		
	КонецЦикла;
	


КонецПроцедуры

&НаСервере
Процедура УстановитьВозможностьРедактированияЗаписей()

	Для каждого ЭлементФормы Из Элементы.ГруппаДвиженияРегистров.ПодчиненныеЭлементы Цикл
		ЭлементФормы.ТолькоПросмотр = НЕ Объект.РучнаяКорректировка;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СоздатьРеквизитыФормы()

	НовыеРеквизиты        = Новый Массив;
	УдаляемыеРеквизиты    = Новый Массив;
	СуществующиеРеквизиты = ПолучитьРеквизиты();

	Для каждого СтрокаРегистра Из Объект.Регистры Цикл
		
		Если СтрокаРегистра.Имя = "Учетный" Тогда
			Продолжить;
		ИначеЕсли СтрокаРегистра.Имя = "Казна" Тогда
			Продолжить;
		ИначеЕсли СтрокаРегистра.Имя = "Платежки" Тогда
			Продолжить;
		ИначеЕсли СтрокаРегистра.Имя = "ЗаявкиНаОплату" Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого Реквизит Из СуществующиеРеквизиты Цикл
			Если Реквизит.Имя = СтрокаРегистра.Имя Тогда
				УдаляемыеРеквизиты.Добавить(СтрокаРегистра.Имя);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ТипРеквизита = Новый ОписаниеТипов(СтрокаРегистра.ТипРегистра + "НаборЗаписей." + СтрокаРегистра.Имя);
		
		НовыеРеквизиты.Добавить(Новый РеквизитФормы(СтрокаРегистра.Имя, ТипРеквизита, , , Истина));
		
		Если СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
			КартинкаСтроки = Новый РеквизитФормы("КартинкаСтроки", Новый ОписаниеТипов("Число"), СтрокаРегистра.Имя);
			НовыеРеквизиты.Добавить(КартинкаСтроки);
		КонецЕсли;
	КонецЦикла;
	
	ИзменитьРеквизиты(НовыеРеквизиты, УдаляемыеРеквизиты);

КонецПроцедуры

&НаСервере
Процедура ПрочитатьЗаписиРегистров()

	Для Каждого СтрокаРегистра Из Объект.Регистры Цикл

		Если СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
			НаборЗаписей = РегистрыНакопления[СтрокаРегистра.Имя].СоздатьНаборЗаписей();
		ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
			НаборЗаписей = РегистрыСведений[СтрокаРегистра.Имя].СоздатьНаборЗаписей();
		ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
			НаборЗаписей = РегистрыБухгалтерии[СтрокаРегистра.Имя].СоздатьНаборЗаписей();
		КонецЕсли;

		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);

		Если СтрокаРегистра.ЕстьДвижения Тогда
			НаборЗаписей.Прочитать();
		КонецЕсли;

		ЗначениеВРеквизитФормы(НаборЗаписей, СтрокаРегистра.Имя);
		
		Если СтрокаРегистра.ТипРегистра = "РегистрНакопления"
			И СтрокаРегистра.Имя <> "КнигаУчетаДоходовИРасходов"
			И СтрокаРегистра.Имя <> "РасшифровкаКУДиР" Тогда
			Если Метаданные.РегистрыНакопления[СтрокаРегистра.Имя].ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Обороты Тогда
				Для Каждого Запись Из ЭтаФорма[СтрокаРегистра.Имя] Цикл
					Запись.КартинкаСтроки = ?(Запись.Активность, 0, 1);
				КонецЦикла;
			Иначе 
				Для Каждого Запись Из ЭтаФорма[СтрокаРегистра.Имя] Цикл
					Если Запись.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
						
						Попытка
							Запись.КартинкаСтроки = 2 + ?(Запись.Активность, 0, 1);
						Исключение
						КонецПопытки;
						
					Иначе
						
						Попытка
							Запись.КартинкаСтроки = 4 + ?(Запись.Активность, 0, 1);
						Исключение
						КонецПопытки;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	УстановитьДоступностьСубконто();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруШапкиДокумента(МетаданныеДокумента = Неопределено)

	Если МетаданныеДокумента = Неопределено Тогда
		МетаданныеДокумента = ДокументСсылка.Метаданные();
	КонецЕсли;

	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номер,
	|	Дата,
	|	Проведен,
	|	ПометкаУдаления";
	Для каждого РеквизитДокумента Из МетаданныеДокумента.Реквизиты Цикл
		ТекстЗапроса = ТекстЗапроса + ",
		|" + РеквизитДокумента.Имя;
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ
	|	Документ." + МетаданныеДокумента.Имя + " КАК Док
	|ГДЕ
	|	Ссылка = &ДокументСсылка";
	Запрос.Текст = ТекстЗапроса;

	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	ТаблицаШапки = Запрос.Выполнить().Выгрузить();
	СтруктураШапки = Новый Структура;
	Для каждого Колонка Из ТаблицаШапки.Колонки Цикл
		СтруктураШапки.Вставить(Колонка.Имя, ТаблицаШапки[0][Колонка.Имя]);
	КонецЦикла;
		
	Если НЕ СтруктураШапки.Свойство("РучнаяКорректировка") 
		И сабОбщегоНазначения.ЕстьРеквизитИлиОбщийРеквизитДокумента("РучнаяКорректировка", ДокументСсылка.Метаданные()) тогда
		СтруктураШапки.Вставить("РучнаяКорректировка", ДокументСсылка.РучнаяКорректировка);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПовторноеОткрытиеСервер()

	МетаданныеДокумента = ДокументСсылка.Метаданные();

	ЗаполнитьСтруктуруШапкиДокумента(МетаданныеДокумента);

	Если СтруктураШапки.Свойство("РучнаяКорректировка") Тогда
		Объект.РучнаяКорректировка = СтруктураШапки.РучнаяКорректировка;
	Иначе
		Элементы.РучнаяКорректировка.Видимость    = Ложь;
		Элементы.КнопкаЗаписатьИЗакрыть.Видимость = Ложь;
	КонецЕсли;

	ЗаполнитьТаблицуРегистров(МетаданныеДокумента);
	СоздатьРеквизитыФормы();
	ПрочитатьЗаписиРегистров();
	СоздатьЭлементыФормы();

	УстановитьВозможностьРедактированияЗаписей();

КонецПроцедуры

&НаСервере
Процедура ВыполнитьДействияПриИзмененииРучнойКорректировки()

	УстановитьВозможностьРедактированияЗаписей();

	Если СтруктураШапки.РучнаяКорректировка = Объект.РучнаяКорректировка Тогда
		ПрочитатьЗаписиРегистров();
		ЭтаФорма.Модифицированность = Ложь;
	КонецЕсли;

КонецПроцедуры // ВыполнитьДействияПриИзмененииРучнойКорректировки()
  
// Общая процедура для всех регистров. Устанавливает организацию в добавляемых строках.
//
&НаКлиенте
Процедура ТаблицаРегистраПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если НоваяСтрока И НЕ Копирование Тогда
		Если ТекущиеДанные.Свойство("Организация")
			И СтруктураШапки.Свойство("Организация") Тогда
			ТекущиеДанные.Организация = СтруктураШапки.Организация;
		КонецЕсли;
		Если ТекущиеДанные.Свойство("Период")
			И СтруктураШапки.Свойство("Дата") Тогда
			ТекущиеДанные.Период = СтруктураШапки.Дата;
		КонецЕсли;
		Если ТекущиеДанные.Свойство("ХарактерДеятельности")
			И СтруктураШапки.Свойство("ХарактерДеятельности")
			И ТекущиеДанные.Свойство("НоменклатурнаяГруппа")
			И СтруктураШапки.Свойство("НоменклатурнаяГруппа") Тогда
			ТекущиеДанные.ХарактерДеятельности = СтруктураШапки.ХарактерДеятельности;
			ТекущиеДанные.НоменклатурнаяГруппа = СтруктураШапки.НоменклатурнаяГруппа;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанные.Свойство("КартинкаСтроки")Тогда
		Если ТекущиеДанные.Свойство("ВидДвижения") Тогда 
			Если ТекущиеДанные.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
				ТекущиеДанные.КартинкаСтроки = 2 + ?(ТекущиеДанные.Активность, 0, 1);
			Иначе
				ТекущиеДанные.КартинкаСтроки = 4 + ?(ТекущиеДанные.Активность, 0, 1);
			КонецЕсли;
		Иначе
			ТекущиеДанные.КартинкаСтроки = ?(ТекущиеДанные.Активность, 0, 1);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВидДвиженияПриИзменении(Элемент)
	
	Если ТипЗнч(ТекущийЭлемент) = Тип("ТаблицаФормы")
		И ТекущийЭлемент.ТекущиеДанные.Свойство("КартинкаСтроки") Тогда
		ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
		Если ТекущиеДанные.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
			ТекущиеДанные.КартинкаСтроки = 2 + ?(ТекущиеДанные.Активность, 0, 1);
		Иначе
			ТекущиеДанные.КартинкаСтроки = 4 + ?(ТекущиеДанные.Активность, 0, 1);
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыКлючаЗаписи(ПараметрыЗаписи)
	
	ПараметрыКлючаЗаписи = Новый Структура("КлючЗаписи, ТипРегистра");
	
	ИмяРегистра = ПараметрыЗаписи.ИмяРегистра;
	
	Если НЕ Метаданные.РегистрыБухгалтерии.Найти(ИмяРегистра) = Неопределено Тогда
		
		ПараметрыКлючаЗаписи.ТипРегистра = "РегистрБухгалтерии";

		Если ПараметрыЗаписи.Свойство("Регистратор") И ПараметрыЗаписи.Свойство("НомерСтроки") Тогда
			ЗначениеКлючаЗаписи = Новый Структура;
			ЗначениеКлючаЗаписи.Вставить("Регистратор", ПараметрыЗаписи.Регистратор);
			ЗначениеКлючаЗаписи.Вставить("НомерСтроки", ПараметрыЗаписи.НомерСтроки);
			ПараметрыКлючаЗаписи.КлючЗаписи = РегистрыБухгалтерии[ИмяРегистра].СоздатьКлючЗаписи(ЗначениеКлючаЗаписи);	
		КонецЕсли;
		
	ИначеЕсли НЕ Метаданные.РегистрыНакопления.Найти(ИмяРегистра) = Неопределено Тогда
		
		ПараметрыКлючаЗаписи.ТипРегистра = "РегистрНакопления";
		
		Если ПараметрыЗаписи.Свойство("Регистратор") И ПараметрыЗаписи.Свойство("НомерСтроки") Тогда
			ЗначениеКлючаЗаписи = Новый Структура;
			ЗначениеКлючаЗаписи.Вставить("Регистратор", ПараметрыЗаписи.Регистратор);
			ЗначениеКлючаЗаписи.Вставить("НомерСтроки", ПараметрыЗаписи.НомерСтроки);
			ПараметрыКлючаЗаписи.КлючЗаписи = РегистрыНакопления[ИмяРегистра].СоздатьКлючЗаписи(ЗначениеКлючаЗаписи);	
		КонецЕсли;
		
	ИначеЕсли НЕ Метаданные.РегистрыСведений.Найти(ИмяРегистра) = Неопределено Тогда
		
		ПараметрыКлючаЗаписи.ТипРегистра = "РегистрСведений";
		
		ЗначениеКлючаЗаписи = Новый Структура;
		Если НЕ Метаданные.РегистрыСведений[ИмяРегистра].ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический 
			И ПараметрыЗаписи.Свойство("Период") Тогда
			ЗначениеКлючаЗаписи.Вставить("Период", 		ПараметрыЗаписи.Период); 	
		КонецЕсли;
		Если Метаданные.РегистрыСведений[ИмяРегистра].РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору
			И ПараметрыЗаписи.Свойство("Регистратор") Тогда
			ЗначениеКлючаЗаписи.Вставить("Регистратор", ПараметрыЗаписи.Регистратор); 	
		КонецЕсли;
		Для Каждого ИзмерениеРегистра ИЗ Метаданные.РегистрыСведений[ИмяРегистра].Измерения Цикл
			Если ПараметрыЗаписи.Свойство(ИзмерениеРегистра.Имя) Тогда
				ЗначениеКлючаЗаписи.Вставить(ИзмерениеРегистра.Имя, ПараметрыЗаписи[ИзмерениеРегистра.Имя]); 		
			КонецЕсли;
		КонецЦикла;
		ПараметрыКлючаЗаписи.КлючЗаписи = РегистрыСведений[ИмяРегистра].СоздатьКлючЗаписи(ЗначениеКлючаЗаписи);
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПараметрыКлючаЗаписи;

КонецФункции

&НаКлиенте
Процедура РегистрНайтиВСписке(Команда)
	
	ИмяРегистра = СтрЗаменить(Команда.Имя, "НайтиВСписке", "");
	
	// Проверим, что таблица регистра добавлена на форму
	Если Элементы.Найти(ИмяРегистра) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы[ИмяРегистра].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	// установим отбор по организации документа (в противном случае, в некоторых формах установится отбор по основной организации)
	Если СтруктураШапки.Свойство("Организация") Тогда
		ПараметрыОтбора = Новый Структура("Организация", СтруктураШапки.Организация);
		ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора); 
	КонецЕсли;
	
	// Подготовим ключ записи для позиционирования в форме списка
	ПараметрыТекущейЗаписи = Новый Структура;
	ПараметрыТекущейЗаписи.Вставить("ИмяРегистра", 			ИмяРегистра);
	ПараметрыТекущейЗаписи.Вставить("Регистратор",    		ДокументСсылка);
	Если СтруктураШапки.Свойство("Организация") Тогда
		ПараметрыТекущейЗаписи.Вставить("Организация",		СтруктураШапки.Организация);
	КонецЕсли;
	Для Каждого ЭлементФормыТабПоля ИЗ Элементы[ИмяРегистра].ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ЭлементФормыТабПоля) = Тип("ПолеФормы") Тогда
			ИмяСвойства = СтрЗаменить(ЭлементФормыТабПоля.Имя, ИмяРегистра, "");
			Если ИмяСвойства = "Регистратор" ИЛИ ИмяСвойства = "Организация" Тогда
				Продолжить;
			КонецЕсли;
			ПараметрыТекущейЗаписи.Вставить(ИмяСвойства, 	ТекущиеДанные[ИмяСвойства]);			
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыКлючаЗаписи = ПолучитьПараметрыКлючаЗаписи(ПараметрыТекущейЗаписи);
	Если ПараметрыКлючаЗаписи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипРегистра = ПараметрыКлючаЗаписи.ТипРегистра;
	ПараметрыФормы.Вставить("ТекущаяСтрока", 	ПараметрыКлючаЗаписи.КлючЗаписи);

	ОткрытьФорму(ТипРегистра + "." + ИмяРегистра + ".ФормаСписка", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

//  *** Из общих модулей Бух ***

// Процедура установки доступности субконто в зависимости от выбранного счета
//
Процедура Общий_УстановитьДоступностьСубконто(Счет, Объект, ПоляОбъекта) Экспорт
	
	ДанныеСчета = Общий_ПолучитьСвойстваСчета(Счет);
	
	Для Индекс = 1 По 3 Цикл
		Если ПоляОбъекта.Свойство("Субконто" + Индекс) Тогда
			Объект[ПоляОбъекта["Субконто" + Индекс] + "Доступность"] = (Индекс <= ДанныеСчета.КоличествоСубконто);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция Общий_ПолучитьСвойстваСчета(Знач Счет) Экспорт

	ДанныеСчета = Новый Структура;
	ДанныеСчета.Вставить("Ссылка"                         , ПланыСчетов.Учетный.ПустаяСсылка());
	ДанныеСчета.Вставить("Наименование"                   , "");
	ДанныеСчета.Вставить("Код"                            , "");
	ДанныеСчета.Вставить("Родитель"                       , ПланыСчетов.Учетный.ПустаяСсылка());
	ДанныеСчета.Вставить("Вид"                            , Неопределено);
	ДанныеСчета.Вставить("Забалансовый"                   , Ложь);
	ДанныеСчета.Вставить("ЗапретитьИспользоватьВПроводках", Ложь);
	ДанныеСчета.Вставить("Валютный"                       , Ложь);
	ДанныеСчета.Вставить("Количественный"                 , Ложь);
	ДанныеСчета.Вставить("УчетПоПодразделениям"           , Ложь);
	ДанныеСчета.Вставить("НалоговыйУчет"                  , Ложь);
	ДанныеСчета.Вставить("КоличествоСубконто"             , 0);
	
	МаксКоличествоСубконто	= ПолучитьМаксКоличествоСубконто();
	
	Для ИндексСубконто = 1 По МаксКоличествоСубконто Цикл
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто,                   Неопределено);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "Наименование",  Неопределено);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТипЗначения",   Неопределено);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "Суммовой",      Ложь);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТолькоОбороты", Ложь);
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		Возврат ДанныеСчета;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", Счет);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка,
	|	Хозрасчетный.Родитель,
	|	Хозрасчетный.Код,
	|	Хозрасчетный.Наименование,
	|	Хозрасчетный.Вид,
	|	Хозрасчетный.Забалансовый,
	|	Хозрасчетный.ЗапретитьИспользоватьВПроводках,
	|	Хозрасчетный.Валютный,
	|	Хозрасчетный.Количественный,
	|	Хозрасчетный.УчетПоПодразделениям
	|ИЗ
	|	ПланСчетов.Учетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка = &Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.НомерСтроки КАК НомерСтроки,
	|	ХозрасчетныйВидыСубконто.ВидСубконто КАК ВидСубконто,
	|	ХозрасчетныйВидыСубконто.ВидСубконто.Наименование КАК Наименование,
	|	ХозрасчетныйВидыСубконто.ВидСубконто.ТипЗначения КАК ТипЗначения,
	|	ХозрасчетныйВидыСубконто.ТолькоОбороты КАК ТолькоОбороты
	|ИЗ
	|	ПланСчетов.Учетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.Ссылка = &Счет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйВидыСубконто.НомерСтроки";
	
	МассивРезультатов	= Запрос.ВыполнитьПакет();
	
	Выборка = МассивРезультатов[0].Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеСчета, Выборка);
	КонецЕсли;
		
	ВыборкаВидыСубконто	= МассивРезультатов[1].Выбрать();
		
	ДанныеСчета.КоличествоСубконто	= ВыборкаВидыСубконто.Количество();
		
	ИндексСубконто	= 0;
		
	Пока ВыборкаВидыСубконто.Следующий() Цикл
		
		ИндексСубконто	= ИндексСубконто + 1;
		
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто,                   ВыборкаВидыСубконто.ВидСубконто);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "Наименование",  ВыборкаВидыСубконто.Наименование);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТипЗначения",   ВыборкаВидыСубконто.ТипЗначения);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТолькоОбороты", ВыборкаВидыСубконто.ТолькоОбороты);
		
	КонецЦикла;
	
	Возврат ДанныеСчета;
	
КонецФункции

// Процедура установки типа и доступности субконто в зависимости от выбранного счета
//
Процедура ПриИзмененииСчета(Счет, Объект, ПоляОбъекта, ЭтоТаблица = Ложь) Экспорт
	
	ДанныеСчета = Общий_ПолучитьСвойстваСчета(Счет);
	
	Для Индекс = 1 По 3 Цикл
		Если ПоляОбъекта.Свойство("Субконто" + Индекс) Тогда
			Если Индекс <= ДанныеСчета.КоличествоСубконто Тогда
				Объект[ПоляОбъекта["Субконто" + Индекс]] = ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"].ПривестиЗначение(Объект[ПоляОбъекта["Субконто" + Индекс]]);
			Иначе 
				Объект[ПоляОбъекта["Субконто" + Индекс]] = Неопределено;
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
	
	Если ЭтоТаблица Тогда
		Общий_УстановитьДоступностьСубконто(Счет, Объект, ПоляОбъекта);
	КонецЕсли;	

КонецПроцедуры

Функция ПолучитьМаксКоличествоСубконто() Экспорт

	Возврат Метаданные.ПланыСчетов.Учетный.МаксКоличествоСубконто;

КонецФункции

