&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(Объект.АдресСервера) Тогда
		Объект.АдресСервера = "ftp-supp.rigla.ru/";
	КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(Объект.ИмяПользователя) Тогда
		Объект.ИмяПользователя = "profitfarm";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ПарольПользователя) Тогда
		Объект.ПарольПользователя = "Sf3ff4";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ПортСервера) Тогда
		Объект.ПортСервера = "21";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ПутьПрайсы) Тогда
		Объект.ПутьПрайсы = "/POZ/Price/";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ПутьЗаказы) Тогда
		Объект.ПутьЗаказы = "/POZ/Orders/";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ПутьНакладные) Тогда
		Объект.ПутьНакладные = "/POZ/Invoices/";
	КонецЕсли;
	
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьПрайсЛистНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПрайсЛист(Команда)
	ВыгрузитьПрайсЛистНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаказГотовНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ЗаказГотов(Команда)
	ЗаказГотовНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаказОтказНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ЗаказОтказ(Команда)
	ЗаказОтказНаСервере();
КонецПроцедуры

&НаКлиенте
Функция ПодключитьсяКFTPСерверу()
	
	Соединение = Новый FTPСоединение(
	Объект.АдресСервера, // адрес ftp сервера
	Объект.ПортСервера, // порт сервера
	Объект.ИмяПользователя, // имя пользователя
	Объект.ПарольПользователя, // пароль пользователя
	Неопределено, // прокси не используется
	Истина, // пассивный режим работы
	0, // таймаут (0 - без ограничений)
	Неопределено // незащищенное соединение
	);
	
	// Для случаев, когда у ftp сервера нет возможности
	// обращаться к нам (мы находимся за межсетевым экраном)
	// следует использовать пассивный режим работы.
	
	Возврат Соединение;
	
КонецФункции

&НаКлиенте
Функция ЗагрузитьЗаказыКлиентов(Команда)
	
	// Функция подключения определена выше.
	Соединение = ПодключитьсяКFTPСерверу();
	
	//// Установим текущий каталог.
	//Соединение.УстановитьТекущийКаталог(Объект.ПутьЗаказы);
	
	// Найдём все папки и файлы в корневом каталоге
	НайденныеФайлы = Соединение.НайтиФайлы(
	Объект.ПутьЗаказы, // ищём в корневом каталоге
	"*.dbf" // любые файлы (здесь можно задать маску)
	);
	Для Каждого Файл Из НайденныеФайлы Цикл
		
		ИмяПромежуточногоФайла = ПолучитьИмяВременногоФайла("dbf");
		
		Генератор = Новый ГенераторСлучайныхЧисел;
		ЧастьИмениФайла = Формат(Генератор.СлучайноеЧисло(10000,99999), "ЧГ=");
		ИмяПромежуточногоФайла = Лев(ИмяПромежуточногоФайла,СтрНайти(ИмяПромежуточногоФайла,"v8_")+2)+ЧастьИмениФайла+".dbf";
		
		Соединение.Получить(
		Файл.ПолноеИмя, // что качаем
		ИмяПромежуточногоФайла // куда качаем
		);
		
		ФайлDBF = Новый XBase;
		
		ФайлDBF.Кодировка = КодировкаXBase.OEM;
		
		ФайлDBF.ОткрытьФайл(
		ИмяПромежуточногоФайла, // путь к базе
		, // путь к индексу
		Истина // только чтение
		);
		
		Заказ = НайтиЗаказ(СтрЗаменить(Строка(ФайлDBF.NUMZ), Символы.НПП, ""));
		Если Заказ <> Неопределено Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Ключ", Заказ);
			
			ОткрытьФорму("Документ.ЗаказКлиента.ФормаОбъекта", ПараметрыФормы);
			
			Сообщить("Загружаемый заказ уже создан:"+Заказ);
			
			Продолжить;			
		КонецЕсли;
		//Документы.ЗаказКлиента.НайтиПоРеквизиту("НомерПоДаннымКлиента",СтрЗаменить(Строка(ФайлDBF.NUMZ), Символы.НПП, ""));
		
		Форма=ПолучитьФорму("Документ.ЗаказКлиента.Форма.ФормаДокумента"); 
		ДанныеФормы=Форма.Объект;
		//ДанныеФормы=СоздатьЗаказКлиентаНаСервере(ДанныеФормы);
		КопироватьДанныеФормы(ДанныеФормы,Форма.Объект);
		Форма.Открыть();
		ФайлDBF.Первая(); // перешли к первой записи
		Пока Не ФайлDBF.ВКонце() Цикл
			Если Не ФайлDBF.ЗаписьУдалена() Тогда
				СтруктураНоменклатуры = НайтиНоменклатуру(ФайлDBF.CODEPST,ФайлDBF.NAME);
				Если СтруктураНоменклатуры.Номенклатура = Неопределено Тогда
					ФайлDBF.Следующая();
					Продолжить;					
				КонецЕсли;
				СтрЗаказ = ДанныеФормы.ТабличнаяЧасть.Добавить();
				СтрЗаказ.Номенклатура = СтруктураНоменклатуры.Номенклатура;
				
				//СтрЗаказ.ЕдиницаИзмерения = СтруктураНоменклатуры.ЕдиницаИзмерения;
				//СтрЗаказ.Количество = ФайлDBF.QNT;
				СтрЗаказ.КоличествоУпаковок = ФайлDBF.QNT;
				
				Форма.УстановитьЗависимыеДанныеВТЧ(СтрЗаказ);
				СтрЗаказ.Цена = ФайлDBF.PRICE;
				СтрЗаказ.Сумма = СтрЗаказ.Количество*СтрЗаказ.Цена;
				ТекРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(СтрЗаказ.СтавкаНДС, "Ставка");
				СтрЗаказ.СуммаНДС = СтрЗаказ.Сумма / ((100+ТекРеквизиты.Ставка)/100) * (ТекРеквизиты.Ставка/100);
				
				СтрЗаказ.Склад = РеквизитыЗаказаСклад;
				
				Форма.Объект.НомерПоДаннымКлиента = СтрЗаменить(Строка(ФайлDBF.NUMZ), Символы.НПП, "");

				Форма.Объект.Предприятие = РеквизитыЗаказаПредприятие;
				Форма.Объект.Подразделение = РеквизитыЗаказаПодразделение;
				Форма.Объект.Склад = РеквизитыЗаказаСклад;
				Форма.Объект.Организация = РеквизитыЗаказаОрганизация;
				Форма.Объект.Контрагент = РеквизитыЗаказаКонтрагент;
				Форма.Объект.Договор = РеквизитыЗаказаДоговор;
				Форма.Объект.ПодразделениеКонтрагента = РеквизитыЗаказаПодразделениеКонтрагента;
				Форма.Объект.Дата = ФайлDBF.DATEZ;
				
				
				
				//Форма.РассчитатьСумму(СтрЗаказ);
				
				//Заказы.НомерЗаказа = Таблица.NUMZ;
				//Заказы.ДатаЗаказа = Таблица.DATEZ;
				
				//Заказы.КодНоменклатуры = Таблица.CODEPST;
				//Заказы.Наименование = Таблица.NAME;
				
				//Заказы.КодПлатежа = Таблица.PAYID;
				//Заказы.ДатаПолученияОтМенеджера = Таблица.DATE;
				//Заказы.Подразделение = Таблица.PODR;
				
				//Заказы.ЗаказанноеКоличество = Таблица.QNT;
				//Заказы.Цена = Таблица.PRICE;
				
				//Заказы.КодГрузополучателя = Таблица.PODRCD;
				//Заказы.КодПлательщика = Таблица.PAYERID;
				//Заказы.ДатаПрайсЛиста = Таблица.PRDATE;
			КонецЕсли;
			ФайлDBF.Следующая(); // переходим к следующей записи
		КонецЦикла;    
		
		ФайлDBF.ЗакрытьФайл();
		
		//Заказ.Записать();
		
	КонецЦикла;
	
	Возврат НайденныеФайлы;
	
КонецФункции

&НаСервере
Функция НайтиЗаказ(Номер)
	Заказ = Документы.ЗаказКлиента.НайтиПоРеквизиту("НомерПоДаннымКлиента",Номер);	
	Если Заказ = Документы.ЗаказКлиента.ПустаяСсылка() Тогда
		Возврат Неопределено;
	Иначе 
		Возврат Заказ;
		
	КонецЕсли;
КонецФункции

&НаСервере
Функция СоздатьЗаказКлиентаНаСервере()
	Возврат Документы.ЗаказКлиента.СоздатьДокумент();
КонецФункции

Функция ТаблицаЗначенийИзDBF(Кодировка = Неопределено, ПутьКФайлу = Неопределено) Экспорт
	
	Если Кодировка = Неопределено Тогда 
		Кодировка = КодировкаXBase.OEM;
	КонецЕсли;
	
	//Если ПутьКФайлу = Неопределено Тогда
	//	ПутьКФайлу = ПутьКФайлу("Выберите dbf-файл","(*.dbf)|*.dbf",РежимДиалогаВыбораФайла.Открытие);
	//КонецЕсли;
	
	//// Открытие файла данных
	//ФайлДанных = Новый XBase(ПутьКФайлу);
	//ФайлДанных.Кодировка = Кодировка;
	
	ФайлДанных = Новый XBase;
	ФайлДанных.ОткрытьФайл(
	ПутьКФайлу, // путь к базе
	, // путь к индексу
	Истина // только чтение
	);
	
	
	//Если Не ФайлДанных.Открыта() Тогда
	//	Сообщение = Новый СообщениеПользователю;
	//	Сообщение.Текст = "Не удалось открыть файл " + ПутьКФайлу;
	//	Сообщение.Сообщить();
	//	Возврат Неопределено;
	//КонецЕсли;
	
	// Переменные и объекты, что бы не создавать постоянно в цикле
	ОписаниеБулево = Новый ОписаниеТипов("Булево");
	ОписаниеДаты = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	
	// Создание таблицы значений
	ТаблицаЗначений = Новый ТаблицаЗначений;
	Для Каждого Поле из ФайлДанных.Поля Цикл
		Если Поле.Тип = "L" Тогда
			Тип = ОписаниеБулево;
		ИначеЕсли Поле.Тип = "D" Тогда
			Тип = ОписаниеДаты;
		ИначеЕсли (Поле.Тип = "N") ИЛИ (Поле.Тип = "F") Тогда
			Тип = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(Поле.Длина, Поле.Точность));
		Иначе
			Тип = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(Поле.Длина));
		КонецЕсли;
		ТаблицаЗначений.Колонки.Добавить(Поле.Имя, Тип);
	КонецЦикла;
	
	// Заполнение строк таблицы
	Работаем = ФайлДанных.Первая();
	Пока Работаем Цикл
		СтрокаТаблицы = ТаблицаЗначений.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ФайлДанных);
		Работаем = ФайлДанных.Следующая();
	КонецЦикла;
	
	ФайлДанных.ЗакрытьФайл();
	Возврат ТаблицаЗначений;
КонецФункции

Функция НайтиНоменклатуру(Код,Наименование)
	
	ЕдИзм = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
	
	Номенклатура = Справочники.Номенклатура.НайтиПоКоду(Код);
	Если Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
		Номенклатура = Справочники.Номенклатура.НайтиПоНаименованию(Наименование);
	КонецЕсли;
	Если Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
		Номенклатура = Неопределено;
	Иначе
		ЕдИзм	= Номенклатура.ЕдиницаИзмерения;	
	КонецЕсли;
	
	Структура = Новый Структура;
	Структура.Вставить("Номенклатура", Номенклатура);
	Структура.Вставить("ЕдиницаИзмерения", ЕдИзм);
	
	Возврат Структура;
	
КонецФункции

&НаСервере
Процедура СоздатьЗаказ(Таблица)
	//Заказы = ЗначениеИзСтрокиВнутр(ПодготовитьТЗЗаказов());
	
	Заказ = Документы.ЗаказКлиента.СоздатьДокумент();
	
	Таблица.Первая(); // перешли к первой записи
	Пока Не Таблица.ВКонце() Цикл
		Если Не Таблица.ЗаписьУдалена() Тогда
			Номенклатура = НайтиНоменклатуру(Таблица.CODEPST,Таблица.NAME);
			Если Номенклатура = Неопределено Тогда
				Продолжить;					
			КонецЕсли;
			СтрЗаказ = Заказ.Товары.Добавить();
			СтрЗаказ.Номенклатура = Номенклатура;
			СтрЗаказ.Количество = Таблица.QNT;
			СтрЗаказ.Цена = Таблица.PRICE;
			СтрЗаказ.Сумма = СтрЗаказ.Количество*СтрЗаказ.Цена;
			
			//Заказы.НомерЗаказа = Таблица.NUMZ;
			//Заказы.ДатаЗаказа = Таблица.DATEZ;
			
			//Заказы.КодНоменклатуры = Таблица.CODEPST;
			//Заказы.Наименование = Таблица.NAME;
			
			//Заказы.КодПлатежа = Таблица.PAYID;
			//Заказы.ДатаПолученияОтМенеджера = Таблица.DATE;
			//Заказы.Подразделение = Таблица.PODR;
			
			//Заказы.ЗаказанноеКоличество = Таблица.QNT;
			//Заказы.Цена = Таблица.PRICE;
			
			//Заказы.КодГрузополучателя = Таблица.PODRCD;
			//Заказы.КодПлательщика = Таблица.PAYERID;
			//Заказы.ДатаПрайсЛиста = Таблица.PRDATE;
		КонецЕсли;
		Таблица.Следующая(); // переходим к следующей записи
	КонецЦикла;    
	
	Таблица.ЗакрытьФайл();
	
	Заказ.Записать();
КонецПроцедуры

Функция ПодготовитьТЗЗаказов()
	//Заказы = Новый ТаблицаЗначений;
	//Заказы.Колонки.Добавить("НомерЗаказа");
	//Заказы.Колонки.Добавить("ДатаЗаказа");
	//Заказы.Колонки.Добавить("КодНоменклатуры");
	//Заказы.Колонки.Добавить("КодПлатежа");
	//Заказы.Колонки.Добавить("ДатаПолученияОтМенеджера");
	//Заказы.Колонки.Добавить("Подразделение");
	//Заказы.Колонки.Добавить("ЗаказанноеКоличество");
	//Заказы.Колонки.Добавить("Цена");
	//Заказы.Колонки.Добавить("КодГрузополучателя");
	//Заказы.Колонки.Добавить("Наименование");
	//Заказы.Колонки.Добавить("КодПлательщика");
	//Заказы.Колонки.Добавить("ДатаПрайсЛиста");
	//
	//Возврат ЗначениеВСтрокуВнутр(Заказы);
КонецФункции

&НаКлиенте
Процедура ПроверитьЗаказы(Команда)
	// Функция подключения определена выше.
	Соединение = ПодключитьсяКFTPСерверу();
	
	//// Установим текущий каталог.
	//Соединение.УстановитьТекущийКаталог(Объект.ПутьЗаказы);
	
	// Найдём все папки и файлы в корневом каталоге
	НайденныеФайлы = Соединение.НайтиФайлы(
	Объект.ПутьЗаказы, // ищём в корневом каталоге
	"*.dbf" // любые файлы (здесь можно задать маску)
	);
	
	Для Каждого Файл Из НайденныеФайлы Цикл
		НомерЗаказаРиглы = СтрЗаменить(Файл.ИмяБезРасширения, "zak", "");
		Заказ = НайтиЗаказ(НомерЗаказаРиглы);
		Если Заказ <> Неопределено Тогда
			Сообщить(Заказ+" с номером заказа (в нумерации Ригла) "+НомерЗаказаРиглы+" уже создан.");
			Продолжить;
		КонецЕсли;
		
		Сообщить("Не создан заказ клиента с номером заказа (в нумерации Ригла) "+НомерЗаказаРиглы);
		
	КонецЦикла;
	
КонецПроцедуры
