///
//  Уникальный алгоритм выгрузки данных на портал BCS Sell-Out
//  (C) FlintSoft, май-октябрь, 2023.
//

Перем гПараметры;   // Глобальная структура, где хранятся параметры выгрузки

#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации				 = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(СтандартныеПодсистемыСервер.ВерсияБиблиотеки());
	ПараметрыРегистрации.Вид			 = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Версия			 = "1.00";
	ПараметрыРегистрации.Наименование	 = НСтр("ru = 'Выгрузка данных Союзпищепром'");
	ПараметрыРегистрации.Информация		 = НСтр("ru = 'Обработка для выгрузки данных Союзпищепром'");    
	ПараметрыРегистрации.БезопасныйРежим = Истина;
		
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = НСтр("ru = 'Настройка выгрузки данных Союзпищепром и интерактивный запуск'");
	НоваяКоманда.Идентификатор = "Союзпищепром_ИнтерактивнаяНастройка";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	НоваяКоманда.ПоказыватьОповещение = Истина;
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = НСтр("ru = 'Запуск выгрузки данных BSC Sell-Out'");
	НоваяКоманда.Идентификатор = "Союзпищепром_АвтоматическаяВыгрузка";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	НоваяКоманда.ПоказыватьОповещение = Ложь;
	
	
	ПараметрыРегистрации.Разрешения.Добавить(
		РаботаВБезопасномРежиме.РазрешениеНаИспользованиеКаталогаВременныхФайлов(Истина, Истина));
		
	//ПараметрыРегистрации.Разрешения.Добавить(
	//	РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса("HTTPS", "distr.new-terra.ru", 443, "Портал производителя УМК (BSC Sell-Out)"));   
	
	
	Возврат ПараметрыРегистрации;

КонецФункции

// Интерфейс для запуска логики обработки.
Процедура ВыполнитьКоманду(ИмяКоманды, ПараметрыВыполнения) Экспорт

	// РежимВыгрузки:
	//  Истина  - выгрузка и отправка на сервер
	//  Ложь	- только выгрузка в файл
	ВыполнитьВыгрузкуНаСервере(Истина, Ложь);
	
КонецПроцедуры

#КонецОбласти
 
Функция ПолучитьНоменклатуруДляОтбора()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура
	|			ИЗ
	|				Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|			ГДЕ
	|				ПоступлениеТоваровУслугТовары.Ссылка.Контрагент = &Контрагент
	|				И ПоступлениеТоваровУслугТовары.Ссылка.Проведен";
	
	Запрос.УстановитьПараметр("Контрагент", гПараметры.Производитель);
	РезультатЗапроса = Запрос.Выполнить();
	НоменклатураДляОтбора = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Номенклатура");  
	Возврат НоменклатураДляОтбора;
	
КонецФункции    
	
#Область ВыгрузкаДанных

/// Головная процедура
Процедура ВыполнитьВыгрузкуНаСервере(РежимВыгрузки, Интерактивно = Истина, ПериодВыгрузки = Неопределено, АдресВх = Ложь) Экспорт   
	
	Результат = ПрочитатьНастройкиВыгрузкиИЗаполнитьГлПеременные(ПериодВыгрузки);
	Если НЕ(Результат) Тогда   
		ТекстСообщения =  "Выгрузка невозможна. Невозвожно прочитать настройки выгрузки!"; 
		ВывестиСообщениеВЛог(ТекстСообщения, Интерактивно);
		Возврат;
	КонецЕсли;
	
	НоменклатураДляОтбора = ПолучитьНоменклатуруДляОтбора();
	// Cобираем массив с адрессами файлов
	мМассив = Новый Массив;	
	мМассив = ВыгрузитьПродажиКлиентыТоргТочки(мМассив,НоменклатураДляОтбора); // S-, M-, P-, C-файлы
	мМассив = ВыгрузитьНоменклатуру(мМассив,НоменклатураДляОтбора); 			 // Q-файл
	мМассив = ВыгрузитьСклады(мМассив);					 // L-файл
	мМассив = ВыгрузитьЗапасы(мМассив,НоменклатураДляОтбора);					 // R-файл
	мМассив = ВыгрузитьПриход(мМассив,НоменклатураДляОтбора); 				 // I-файл
		
	Архив = Новый ЗаписьZIPФайла("" +  гПараметры.КаталогВыгрузки+"\batch.zip") ;
	Для Каждого Путь Из мМассив Цикл
		Архив.Добавить(Путь, РежимСохраненияПутейZIP.СохранятьОтносительныеПути);
	КонецЦикла;
	Архив.Записать();
	Для Каждого Путь Из мМассив Цикл
		УдалитьФайлы(Путь);
	КонецЦикла;
	Если АдресВх Тогда
		АдресВх = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(гПараметры.КаталогВыгрузки+"\batch.zip"));	
	КонецЕсли;
	// Отправка файла
	#Область ОтправкаФайла
	Попытка
		ИмяФайлаОтвета 	 = гПараметры.КаталогВыгрузки + "answer.txt"; // Определяем имя файла ответа от веб-сервера.
	    ИмяФайлаДанных 	 = гПараметры.КаталогВыгрузки + "batch.zip"; // Подготовим .zip-файл с данными для отправки
		имяФайлаОтправки = гПараметры.КаталогВыгрузки + "batch.txt"; // Файл (времнный) с телом сообщения HTTP-запроса
		// Откроем разделитель
		Boundary = "MESSAGE_ID_" + СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "") + "_ANTON_PULYAEV_FLINTSOFT";   // Максимум 70 символов		
		
		ЗаписьТекста = Новый ЗаписьТекста(имяФайлаОтправки); 
		
		/// !! Никакой самодеятельности - всё строго по спецификации !!
		ЗаписьТекста.ЗаписатьСтроку("--" + Boundary);
		ЗаписьТекста.ЗаписатьСтроку("Content-Disposition: form-data; name=""@file""; filename=""batch.zip""" + Символы.ПС + "Content-Type: multipart/x-zip" + Символы.ПС);
		ЗаписьТекста.Записать(СтрЗаменить(СтрЗаменить(Base64Строка(Новый ДвоичныеДанные(ИмяФайлаДанных)),Символы.ПС,""),Символы.ВК,""));		
		// Закроем разделитель
		ЗаписьТекста.ЗаписатьСтроку(Символы.ПС + "--" + Boundary + "--");		
		ЗаписьТекста.Закрыть();
			
		ФайлОтправки = Новый Файл(имяФайлаОтправки);
		РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер());
		
		ЗаголовокHTTP = Новый Соответствие();
		ЗаголовокHTTP.Вставить("Content-Length", РазмерФайлаОтправки);
		ЗаголовокHTTP.Вставить("Content-Type", "multipart/form-data; boundary=" + Boundary);
		
		Если (РежимВыгрузки) Тогда	
			
			//SSL = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows(), Новый СертификатыУдостоверяющихЦентровWindows());
			//SSL = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаLinux(), Новый СертификатыУдостоверяющихЦентровLinux());
			SSL = Новый ЗащищенноеСоединениеOpenSSL();
			
			НТТР = Новый HTTPСоединение(гПараметры.АдресСервера, 443,,,,,SSL,Истина);			

			HTTPОтвет = НТТР.ОтправитьДляОбработки(имяФайлаОтправки, гПараметры.ПутьКСервису + "?@flag1=0&@flag2=1&@email=" + гПараметры.Логин +"&@password=" + гПараметры.Пароль + "&@base64=1", имяФайлаОтвета, ЗаголовокHTTP);
			стрКодОтвета  = " Код состояния " + HTTPОтвет.КодСостояния;
			//стрКодОтвета  = " Код состояния " + HTTPОтвет.КодСостояния;
			
			УдалитьФайлы(ИмяФайлаДанных);    
			ТекстСообщения = "Отчет отправлен! " + РасшифроватьОтветСервера(ИмяФайлаОтвета) + Символы.ПС +
							 "Период выгрузки: " + НачалоДня(ПериодВыгрузки.НачалоПериода) + "-" + КонецДня(ПериодВыгрузки.КонецПериода) +
							 стрКодОтвета; 
			ВывестиСообщениеВЛог(ТекстСообщения, Интерактивно);			
			
			HTTPОтвет 	= Неопределено;
			НТТР 		= Неопределено;
			SSL 		= Неопределено;
			
		Иначе 
			Если ЭтоАдресВременногоХранилища(АдресВх) Тогда
				УдалитьФайлы(ИмяФайлаДанных);	
			Иначе
				ТекстСообщения = "Отчет сформирован в файле: " + ИмяФайлаДанных + ";" + Символы.ПС +
				"Период выгрузки: " + НачалоДня(ПериодВыгрузки.НачалоПериода) + "-" + КонецДня(ПериодВыгрузки.КонецПериода); ; 
				ВывестиСообщениеВЛог(ТекстСообщения, Интерактивно);	
			КонецЕсли;
		КонецЕсли;	   			
		УдалитьФайлы(ИмяФайлаОтвета);                            
		УдалитьФайлы(имяФайлаОтправки);
	Исключение		
		ТекстСообщения =  "Все плохо:" + ИнформацияОбОшибке().Описание;	
		ВывестиСообщениеВЛог(ТекстСообщения, Интерактивно);	
		ТекстСообщения =  "Отчет не выгружен! Причина: " + ИнформацияОбОшибке().Описание;
		ВывестиСообщениеВЛог(ТекстСообщения, Интерактивно);	
		//		
		УдалитьФайлы(ИмяФайлаДанных);
		УдалитьФайлы(ИмяФайлаОтвета);
	КонецПопытки;       
 		
	#КонецОбласти
	
КонецПроцедуры

/// Q-Файл
Функция ВыгрузитьНоменклатуру(мМассив,НоменклатураДляОтбора)
	 
	Имя = гПараметры.КаталогВыгрузки + "Q.xml";
	Запрос = Новый Запрос; 
	Запрос.Текст = ПолучитьТекстЗапроса("Запрос_Q_Файл");
	Запрос.УстановитьПараметр("НоменклатураДляОтбора", НоменклатураДляОтбора);
	тзНом = Запрос.Выполнить().Выгрузить();
	
	ХМЛ = Новый ЗаписьXML;
	ХМЛ.ОткрытьФайл(Имя, "UTF-8");
	ХМЛ.ЗаписатьОбъявлениеXML(); 	
	ХМЛ.ЗаписатьНачалоЭлемента("request");//request
		ХМЛ.ЗаписатьНачалоЭлемента("entities");//entities		
		Для Каждого стрНом Из тзНом	Цикл
			ХМЛ.ЗаписатьНачалоЭлемента("entity"); //entity		
				ХМЛ.ЗаписатьНачалоЭлемента("attributes"); //attributes	
					ЗаписатьАтрибут(ХМЛ, "userGroupKey", гПараметры.КодДистрибьютора);
				    ЗаписатьАтрибут(ХМЛ, "extID", 		 стрНом.extId);
					ЗаписатьАтрибут(ХМЛ, "eanCode", 	 стрНом.eanCode);			// Отладка
					ЗаписатьАтрибут(ХМЛ, "name", 		 стрНом.name); 			
		            ЗаписатьАтрибут(ХМЛ, "shortName", 	 стрНом.shortName);		                                        
				    ЗаписатьАтрибут(ХМЛ, "isActive", 	 стрНом.isActive);
					ЗаписатьАтрибут(ХМЛ, "comments", 	 стрНом.comments); 	
				ХМЛ.ЗаписатьКонецЭлемента();//attributes  	
			ХМЛ.ЗаписатьКонецЭлемента();//entity
		КонецЦикла;	
		ХМЛ.ЗаписатьКонецЭлемента();//entities
	ХМЛ.ЗаписатьКонецЭлемента();//request 
	ХМЛ.Закрыть(); 	
	мМассив.Добавить(Имя);
	Возврат мМассив;
	
КонецФункции

// L-файл
Функция ВыгрузитьСклады(мМассив)
	
	Имя =  гПараметры.КаталогВыгрузки + "L.xml";
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапроса("Запрос_L_Файл");	
	тзСклады = Запрос.Выполнить().Выгрузить();	
		
	ХМЛ = Новый ЗаписьXML;
	ХМЛ.ОткрытьФайл(Имя, "UTF-8");
	ХМЛ.ЗаписатьОбъявлениеXML(); 	
	ХМЛ.ЗаписатьНачалоЭлемента("request");//request
		ХМЛ.ЗаписатьНачалоЭлемента("entities");//entities
		Для Каждого стрСклад Из тзСклады	Цикл
			ХМЛ.ЗаписатьНачалоЭлемента("entity");//entity  
                // Заполнение атрибутов
				ЗаписатьАтрибут(ХМЛ, "distribId",	гПараметры.КодДистрибьютора);
				ЗаписатьАтрибут(ХМЛ, "locId", 		стрСклад.locId);
				ЗаписатьАтрибут(ХМЛ, "locName",		стрСклад.locName);				
				ЗаписатьАтрибут(ХМЛ, "kladr");    
				//ЗаписатьАтрибут(ХМЛ, "locAddr", 	"-"); 
				ЗаписатьАтрибут(ХМЛ, "dateLoad",	ТекущаяДата(),	 "ДФ=dd.MM.yyyy");
			ХМЛ.ЗаписатьКонецЭлемента();//entity
		КонецЦикла;		
		ХМЛ.ЗаписатьКонецЭлемента();//entities
	ХМЛ.ЗаписатьКонецЭлемента();//request 
	ХМЛ.Закрыть();	
	мМассив.Добавить(Имя);
	Возврат мМассив;
	
КонецФункции

// S-файл и др.
//  Возвращает массив
//  Продажи + Клиенты + ТорговыеТочки
//
Функция ВыгрузитьПродажиКлиентыТоргТочки(мМассив,НоменклатураДляОтбора)
	
	Имя = гПараметры.КаталогВыгрузки + "S.xml"; //продажи  
	ДатаВыгрузки = КонецДня(КонецДня(ТекущаяДата() - 60*60*24)); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапроса("Запрос_S_Файл"); 
	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);  
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС);  
	МассивСубконтоСписание = Новый Массив;
	МассивСубконтоСписание.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);

	Запрос.УстановитьПараметр("НачалоПериода",			НачалоДня(гПараметры.НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода",			КонецДня(гПараметры.КонецПериода));	
	Запрос.УстановитьПараметр("НоменклатураДляОтбора",	НоменклатураДляОтбора);	
	Запрос.УстановитьПараметр("МассивСубконто",			МассивСубконто); 
	Запрос.УстановитьПараметр("МассивСубконтоСписание",			МассивСубконтоСписание); 
	Запрос.УстановитьПараметр("Организация",			гПараметры.Организация);
	Запрос.УстановитьПараметр("Счет4101",				ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);
	Запрос.УстановитьПараметр("Счет90011",				ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД);
	//Запрос.УстановитьПараметр("Счет94",					ПланыСчетов.Хозрасчетный.НедостачиИПотериОтПорчиЦенностей);
	Запрос.УстановитьПараметр("Счет90012",				ПланыСчетов.Хозрасчетный.ВыручкаЕНВД);
	
	тзПродажи = Запрос.Выполнить().Выгрузить();
	// Заодно получить массив торговых представителей, контрагентов и партнеров
	мКонтрагенты	   = ОбщегоНазначенияКлиентСервер.СвернутьМассив(тзПродажи.ВыгрузитьКолонку("Контрагент"));
	ХМЛ = Новый ЗаписьXML;
	ХМЛ.ОткрытьФайл(Имя, "UTF-8");
	ХМЛ.ЗаписатьОбъявлениеXML(); 	
	ХМЛ.ЗаписатьНачалоЭлемента("request");//request
		ХМЛ.ЗаписатьНачалоЭлемента("entities");//entities		
		Для Каждого стрПродажи Из тзПродажи Цикл
			ХМЛ.ЗаписатьНачалоЭлемента("entity");		//entity
				ХМЛ.ЗаписатьНачалоЭлемента("attributes"); 	// attributes
				    // Вычисление выражений   
					СтавкаНДС			= СтрЗаменить(Строка(стрПродажи.tax), "%", "");
					//ЗначениеСтавкиНДС   = ?(ЗначениеЗаполнено(СтавкаНДС), СтавкаНДС, "0");
					ЗначениеСтавкиНДС   = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(стрПродажи.tax);
					Если НЕ(ЗначениеЗаполнено(стрПродажи.sumNSV)) ИЛИ (0 = стрПродажи.sumNSV) Тогда
						СуммаNSV = 	стрПродажи.sumGSV;  
					Иначе
						СуммаNSV = 	стрПродажи.sumNSV; 
					КонецЕсли;					
					///
					//clientId	= стрПродажи.client.Код; 
					//pointId		= стрПродажи.client.Код;   
					//locid 		= стрПродажи.docReg.Склад.Код; 
					//dateApplied = стрПродажи.docReg.Дата;
					//dateApplied = стрПродажи.docReg.Дата;   
					//TTNNum		= ?(ЗначениеЗаполнено(стрПродажи.docReg.Номер), СокрЛП(стрПродажи.docReg.Номер), "-");      
					//product		= стрПродажи.product.Наименование;
					//productId	= стрПродажи.product.Код;
					
					// Заполнение атрибутов
					ЗаписатьАтрибут(ХМЛ, "distribId",	гПараметры.КодДистрибьютора);
					ЗаписатьАтрибут(ХМЛ, "clientId",	стрПродажи.clientId);
					ЗаписатьАтрибут(ХМЛ, "pointId",		стрПродажи.pointId);
					ЗаписатьАтрибут(ХМЛ, "dateApplied",	стрПродажи.dateApplied,				"ДФ=dd.MM.yyyy");
					ЗаписатьАтрибут(ХМЛ, "productId",	стрПродажи.productId);
					ЗаписатьАтрибут(ХМЛ, "quantity",	стрПродажи.quantity,		"ЧЦ=9;  ЧДЦ=0; ЧГ=");
					ЗаписатьАтрибут(ХМЛ, "weight",		"1",						"ЧЦ=12; ЧДЦ=3; ЧГ=");					
					ЗаписатьАтрибутЧисло(ХМЛ, "sumNSV",	СуммаNSV,					"ЧЦ=12; ЧДЦ=2; ЧРД=,; ЧН=0; ЧГ=0"); 	
					ЗаписатьАтрибутЧисло(ХМЛ, "sumGSV",	стрПродажи.sumGSV,			"ЧЦ=12; ЧДЦ=2; ЧРД=,; ЧН=0; ЧГ=0");
					ЗаписатьАтрибутЧисло(ХМЛ, "sumRP",	стрПродажи.sumRP,			"ЧЦ=12; ЧДЦ=2; ЧРД=,; ЧН=0; ЧГ=0");
					ЗаписатьАтрибутЧисло(ХМЛ, "tax",	ЗначениеСтавкиНДС,  		"ЧЦ=12; ЧДЦ=2; ЧРД=,; ЧН=0; ЧГ=0");
					ЗаписатьАтрибут(ХМЛ, "rashNum",		стрПродажи.rashNum);					// ТОРГ-12 Номер накл.
					ЗаписатьАтрибут(ХМЛ, "invNum",		стрПродажи.invNum);		
					ЗаписатьАтрибут(ХМЛ, "TTNNum",		стрПродажи.rashNum);		
					ЗаписатьАтрибут(ХМЛ, "locId",		стрПродажи.locId);					// стрПродажи.locId);							
					ЗаписатьАтрибут(ХМЛ, "manId",		стрПродажи.manId);							
					ЗаписатьАтрибут(ХМЛ, "product",		стрПродажи.product);												
					ЗаписатьАтрибут(ХМЛ, "dateLoad",	ДатаВыгрузки,				"ДФ=dd.MM.yyyy");
					ЗаписатьАтрибут(ХМЛ, "operType",	стрПродажи.operType);
				ХМЛ.ЗаписатьКонецЭлемента();//attributes			
			ХМЛ.ЗаписатьКонецЭлемента();//entity
		КонецЦикла;		
		ХМЛ.ЗаписатьКонецЭлемента();//entities
	ХМЛ.ЗаписатьКонецЭлемента();//request 
	ХМЛ.Закрыть();

	мМассив.Добавить(Имя);		

	// Создаем файл с торговыми представителями   
	// М-файл
	мТорговыеПредставители = ОбщегоНазначенияКлиентСервер.СвернутьМассив(тзПродажи.ВыгрузитьКолонку("ОтветственныйФиз"));
	мМассив = ВыгрузитьТП(мМассив,мТорговыеПредставители);       
	
	// Создаем файл с клиентами, передаем всех что были в предыдущей выборке
	// C-файл                                                               
	мМассив = ВыгрузитьКлиентов(мМассив, мКонтрагенты);
	
	// Создаем файл с точками, передаем всех что были в предыдущей выборке
	/// P-файл 
	тзПродажи.Свернуть("Контрагент,ПодразделениеКонтрагента,ОтветственныйФИО,manId");
	мМассив = (ВыгрузитьТочки(мМассив, тзПродажи)); 	
	тзПродажи = Неопределено;              
	Возврат мМассив;
	
КонецФункции

// M-Файл
Функция ВыгрузитьТП(мМассив,мТорговыеПредставители)
	
	Имя = гПараметры.КаталогВыгрузки + "M.xml";	  
	ДатаВыгрузки = КонецДня(КонецДня(ТекущаяДата() - 60*60*24)); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка КАК Ссылка,
		|	ФизическиеЛица.Фамилия КАК Фамилия,
		|	ФизическиеЛица.Имя КАК Имя,
		|	ФизическиеЛица.Отчество КАК Отчество,
		|	ФизическиеЛица.ФИО КАК ФИО,
		|	ФизическиеЛица.ПометкаУдаления КАК ПометкаУдаления,
		|	ФизическиеЛица.Код КАК Код
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка В(&мТорговыеПредставители)";
	
	Запрос.УстановитьПараметр("мТорговыеПредставители", мТорговыеПредставители);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	ХМЛ = Новый ЗаписьXML;
	ХМЛ.ОткрытьФайл(Имя, "UTF-8");
	ХМЛ.ЗаписатьОбъявлениеXML(); 	
	ХМЛ.ЗаписатьНачалоЭлемента("request");		// request
		ХМЛ.ЗаписатьНачалоЭлемента("entities");	// entities		
//		Для Каждого стрТП Из мТоргПредставители Цикл
			Пока Выборка.Следующий() Цикл
			ХМЛ.ЗаписатьНачалоЭлемента("entity"); 		// entity			
				ХМЛ.ЗаписатьНачалоЭлемента("attributes");   // atributes 
   					// Вычисление выражений
					//стрФ = "-";
					//стрИ = "-";
					//стрО = "-";
					//ИдентПользователя =  "";
					//// Извлечь из ФИО фамилию, имя и отчество отдельно
					//Если НЕ(стрТП = Справочники.Пользователи.ПустаяСсылка()) Тогда	
					//	КомпонентыФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(стрТП.Наименование, " "); 
					//	ИдентПользователя = СокрЛП(стрТП.ИдентификаторПользователяИБ);  
					//	стрИ = 	КомпонентыФИО[0];
					//	Попытка 
					//		стрО = КомпонентыФИО[2];
					//	Исключение // Если индекс массива за пределами
					//	КонецПопытки; 
					//	Попытка 
					//		стррФ =	КомпонентыФИО[1];
					//	Исключение// Если индекс массива за пределами
					//	КонецПопытки;	
					//КонецЕсли;				
					
					// Заполнение атрибутов					
					ЗаписатьАтрибут(ХМЛ, "distribId",	гПараметры.КодДистрибьютора);	
					ЗаписатьАтрибут(ХМЛ, "manId",		Выборка.Код); 
					ЗаписатьАтрибут(ХМЛ, "firstName", 	Выборка.Имя);
					ЗаписатьАтрибут(ХМЛ, "middleName",	Выборка.Отчество);
					ЗаписатьАтрибут(ХМЛ, "lastName",	Выборка.Фамилия);
					//ЗаписатьАтрибут(ХМЛ, "manChiefId");
					ЗаписатьАтрибут(ХМЛ, "exTeam",		"0");					
					//ЗаписатьАтрибут(ХМЛ, "dateBegin");
					//ЗаписатьАтрибут(ХМЛ, "dateEnd");
					ЗаписатьАтрибут(ХМЛ, "dateLoad",	ДатаВыгрузки,	"ДФ=dd.MM.yyyy");
				ХМЛ.ЗаписатьКонецЭлемента();//attributes			
			ХМЛ.ЗаписатьКонецЭлемента();//entity			
		КонецЦикла;		
		ХМЛ.ЗаписатьКонецЭлемента();//entities
	ХМЛ.ЗаписатьКонецЭлемента();//request 
	ХМЛ.Закрыть();	
	мМассив.Добавить(Имя);
	Возврат мМассив;
	
КонецФункции

// C-файл
Функция ВыгрузитьКлиентов(мМассив, мКонтрагенты);
	
	Имя = гПараметры.КаталогВыгрузки + "C.xml"; 
	ДатаВыгрузки = КонецДня(КонецДня(ТекущаяДата() - 60*60*24)); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Контрагенты.Ссылка КАК Ссылка,
	               |	Контрагенты.Код КАК Код,
	               |	Контрагенты.ИНН КАК ИНН,
	               |	Контрагенты.Наименование КАК Наименование,
	               |	Контрагенты.НаименованиеПолное КАК НаименованиеПолное
	               |ИЗ
	               |	Справочник.Контрагенты КАК Контрагенты
	               |ГДЕ
	               |	Контрагенты.Ссылка В(&мКонтрагенты)";
	Запрос.УстановитьПараметр("мКонтрагенты",мКонтрагенты); 
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	ХМЛ = Новый ЗаписьXML;
	ХМЛ.ОткрытьФайл(Имя, "UTF-8");
	ХМЛ.ЗаписатьОбъявлениеXML(); 	
	ХМЛ.ЗаписатьНачалоЭлемента("request");		// request
		ХМЛ.ЗаписатьНачалоЭлемента("entities");	// entities  
		УжеВыгружен = Ложь;
		//Для Каждого стрКлиент Из мКонтрагенты Цикл
		Пока Выборка.Следующий() Цикл
		    // Вычисление выражений
			// Выяснить ипостась контрагента: юр.лицо или физ.лицо  ?         
			
			// Клиент не ведёт в базе БП учёт клиентов физ.лиц - код схлопывания выпиливаем!
			
			//Если (Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо = стрКлиент.ЮридическоеФизическоеЛицо)
			//	 //И  НЕ(ЗначениеЗаполнено(стрКлиент.РегистрационныйНомер))  
			//	 Тогда  
			//	 // ОГРНИП = РегистрационныйНомер. Будем считать физ.лицами, тех у кого не заполнен РегистрационныйНомер
			//	 
			//	Если УжеВыгружен Тогда
			//		Продолжить;
			//	КонецЕсли;
			//	// Физ.лицо.   
			//	// Всех физ лиц объединим в одно виртуальное, не персонифицированное существо. 	 
			//	// Так требуется по регламенту.
			//	сlientId 	 = "Physic001";
			//	clientName	 = "Физические лица";
			//	clientINN	 = "000000000000";
			//	clientAddr   = "default физические лица";  
			//	УжеВыгружен  = Истина; 
			//Иначе
				// Юр.лицо 
				сlientId	 =  Выборка.Код; 
				clientName	 =  ?(ЗначениеЗаполнено(СокрЛП(Выборка.НаименованиеПолное)), Выборка.НаименованиеПолное, Выборка.Наименование);
				clientINN	 = 	?(ЗначениеЗаполнено(Выборка.ИНН), Выборка.ИНН, "000000000000");
				АдресКлиента =	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
					Выборка.Ссылка,
					Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента,
					ТекущаяДатаСеанса(),
					Ложь); 
				clientAddr	 =  ?(0 = АдресКлиента.Количество(), "без адреса", АдресКлиента[0].Представление);
			// КонецЕсли;		
			
			ХМЛ.ЗаписатьНачалоЭлемента("entity");			// entity 		
				ХМЛ.ЗаписатьНачалоЭлемента("attributes");   // attributes 	
					
                    // Заполнение атрибутов  
					ЗаписатьАтрибут(ХМЛ, "distribId",	гПараметры.КодДистрибьютора);
					ЗаписатьАтрибут(ХМЛ, "clientId",	сlientId);
					ЗаписатьАтрибут(ХМЛ, "clientName",	clientName);
					ЗаписатьАтрибут(ХМЛ, "clientINN",	clientINN);
					ЗаписатьАтрибут(ХМЛ, "clientAddr",	clientAddr);
					ЗаписатьАтрибут(ХМЛ, "kladr"); 		//,		АдресКлиента[0].ЗначенияПолей);
					ЗаписатьАтрибут(ХМЛ, "clientType");	
					ЗаписатьАтрибут(ХМЛ, "dateBegin");	
					ЗаписатьАтрибут(ХМЛ, "dateLoad", 	ДатаВыгрузки,	"ДФ=dd.MM.yyyy");	
				ХМЛ.ЗаписатьКонецЭлемента();//attributes			
			ХМЛ.ЗаписатьКонецЭлемента();//entity
		КонецЦикла;	
		Если мКонтрагенты.Найти("Physic001") <> Неопределено Тогда
			ХМЛ.ЗаписатьНачалоЭлемента("entity");			// entity 		
			ХМЛ.ЗаписатьНачалоЭлемента("attributes");   // attributes 	
				// Заполнение атрибутов  
				ЗаписатьАтрибут(ХМЛ, "distribId",	гПараметры.КодДистрибьютора);
				ЗаписатьАтрибут(ХМЛ, "clientId",	"Physic001");
				ЗаписатьАтрибут(ХМЛ, "clientName",	"Физические лица");
				ЗаписатьАтрибут(ХМЛ, "clientINN",	"000000000000");
				ЗаписатьАтрибут(ХМЛ, "clientAddr",	"default физические лица");
				ЗаписатьАтрибут(ХМЛ, "kladr"); 		//,		АдресКлиента[0].ЗначенияПолей);
				ЗаписатьАтрибут(ХМЛ, "clientType");	
				ЗаписатьАтрибут(ХМЛ, "dateBegin");	
				ЗаписатьАтрибут(ХМЛ, "dateLoad", 	ДатаВыгрузки,	"ДФ=dd.MM.yyyy");	
			ХМЛ.ЗаписатьКонецЭлемента();//attributes			
			ХМЛ.ЗаписатьКонецЭлемента();//entity
		КонецЕсли;    
		Если мКонтрагенты.Найти("Waste001") <> Неопределено Тогда
			ХМЛ.ЗаписатьНачалоЭлемента("entity");			// entity 		
			ХМЛ.ЗаписатьНачалоЭлемента("attributes");   // attributes 	
				// Заполнение атрибутов  
				ЗаписатьАтрибут(ХМЛ, "distribId",	гПараметры.КодДистрибьютора);
				ЗаписатьАтрибут(ХМЛ, "clientId",	"Waste001");
				ЗаписатьАтрибут(ХМЛ, "clientName",	"Списание продукции");
				ЗаписатьАтрибут(ХМЛ, "clientINN",	"9999999999");
				ЗаписатьАтрибут(ХМЛ, "clientAddr",	"default списание продукции");
				ЗаписатьАтрибут(ХМЛ, "kladr"); 		//,		АдресКлиента[0].ЗначенияПолей);
				ЗаписатьАтрибут(ХМЛ, "clientType");	
				ЗаписатьАтрибут(ХМЛ, "dateBegin");	
				ЗаписатьАтрибут(ХМЛ, "dateLoad", 	ДатаВыгрузки,	"ДФ=dd.MM.yyyy");	
			ХМЛ.ЗаписатьКонецЭлемента();//attributes			
			ХМЛ.ЗаписатьКонецЭлемента();//entity
		КонецЕсли;

		ХМЛ.ЗаписатьКонецЭлемента();//entities
	ХМЛ.ЗаписатьКонецЭлемента();//request 
	ХМЛ.Закрыть();
	мМассив.Добавить(Имя);
	Возврат мМассив;
	
КонецФункции

// P-файл
Функция ВыгрузитьТочки(мМассив, ТЗТорговыеТочки);
	
	Имя = гПараметры.КаталогВыгрузки + "P.xml";
	ДатаВыгрузки = КонецДня(КонецДня(ТекущаяДата() - 60*60*24)); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗТорговыеТочки.Контрагент КАК Контрагент,
		|	ТЗТорговыеТочки.ПодразделениеКонтрагента КАК ПодразделениеКонтрагента,
		|	ТЗТорговыеТочки.manId КАК manId,
		|	ТЗТорговыеТочки.ОтветственныйФИО КАК ОтветственныйФИО
		|ПОМЕСТИТЬ ВТТорговыеТочкиБезОтбора
		|ИЗ
		|	&ТЗТорговыеТочки КАК ТЗТорговыеТочки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТТорговыеТочкиБезОтбора.Контрагент КАК Контрагент,
		|	ВТТорговыеТочкиБезОтбора.ПодразделениеКонтрагента КАК ПодразделениеКонтрагента,
		|	ВТТорговыеТочкиБезОтбора.manId КАК manId,
		|	ВТТорговыеТочкиБезОтбора.ОтветственныйФИО КАК ОтветственныйФИО
		|ПОМЕСТИТЬ ВТТорговыеТочки
		|ИЗ
		|	ВТТорговыеТочкиБезОтбора КАК ВТТорговыеТочкиБезОтбора 
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(ВТТорговыеТочкиБезОтбора.ПодразделениеКонтрагента) = ТИП(Справочник.Контрагенты)
		|			И ВТТорговыеТочкиБезОтбора.ПодразделениеКонтрагента <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТТорговыеТочки.Контрагент КАК Контрагент,
		|	ВТТорговыеТочки.Контрагент.Код КАК КонтрагентКод,
		|	ВТТорговыеТочки.manId КАК manId,
		|	ВТТорговыеТочки.ОтветственныйФИО КАК ОтветственныйФИО,
		|	ВТТорговыеТочки.ПодразделениеКонтрагента КАК ПодразделениеКонтрагента,
		|	ВТТорговыеТочки.ПодразделениеКонтрагента.Код КАК ПодразделениеКонтрагентаКод,
		|	ВТТорговыеТочки.ПодразделениеКонтрагента.Наименование КАК ПодразделениеКонтрагентаНаименование,
		|	ВТТорговыеТочки.ПодразделениеКонтрагента.НаименованиеПолное КАК ПодразделениеКонтрагентаНаименованиеПолное,
		|	ВТТорговыеТочки.ПодразделениеКонтрагента.КатегорияКлиента КАК КатегорияКлиента,
		|	ВТТорговыеТочки.ПодразделениеКонтрагента.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	ВТТорговыеТочки КАК ВТТорговыеТочки";
	Запрос.УстановитьПараметр("ТЗТорговыеТочки",ТЗТорговыеТочки);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();

	ХМЛ = Новый ЗаписьXML;
	ХМЛ.ОткрытьФайл(Имя, "UTF-8");
	ХМЛ.ЗаписатьОбъявлениеXML(); 	
	ХМЛ.ЗаписатьНачалоЭлемента("request");		// request
		ХМЛ.ЗаписатьНачалоЭлемента("entities");	// entities		
		
		ВидКИТлф = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;					
		ВидКИ 	= Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;    
		
		Пока Выборка.Следующий() Цикл			
			ХМЛ.ЗаписатьНачалоЭлемента("entity");		// entity			
				ХМЛ.ЗаписатьНачалоЭлемента("attributes");   // attributes       
					// Вычисление выражений                          		
					тзАдрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Выборка.ПодразделениеКонтрагента, ВидКИ, ТекущаяДатаСеанса(), Ложь);	  
					Если НЕ(0 = тзАдрес.Количество()) Тогда 
						АдресСтрокой	= ?(ЗначениеЗаполнено(тзАдрес[0].Представление), тзАдрес[0].Представление, "-");    
						ГородАдреса		= РаботаСАдресами.ГородАдресаКонтактнойИнформации(тзАдрес[0].Значение);  
						ИндексАдреса    = РаботаСАдресами.СведенияОбАдресе(тзАдрес[0].Значение).Индекс;
					Иначе
						АдресСтрокой	= "-";  
						ГородАдреса 	= "";   
						ИндексАдреса	= "";
					КонецЕсли;					
					тзТелефон		= УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Выборка.ПодразделениеКонтрагента, ВидКИТлф, ТекущаяДатаСеанса(), Ложь);											
					ТелефонСтрокой	= ?(0 = тзТелефон.Количество(), "", тзТелефон[0].Представление);										
					ТТАктивна		= ?(Выборка.ПометкаУдаления, "0", "1");
					Если Выборка.КатегорияКлиента = Перечисления.КатегорииКлиентов.ХоРеСа Тогда
						КодТипаТТ       = "ttt0000004";
						НазваниеТипаТТ  =  "HORECA";
					ИначеЕсли Выборка.КатегорияКлиента = Перечисления.КатегорииКлиентов.Опт Тогда
						КодТипаТТ       = "ttt0000005";
						НазваниеТипаТТ  =  "Опт";
					ИначеЕсли Выборка.КатегорияКлиента = Перечисления.КатегорииКлиентов.Розница Тогда
						КодТипаТТ       = "ttt0000002";
						НазваниеТипаТТ  =  "Традиционная розница";
					Иначе
						КодТипаТТ       = "ttt0000001";
						НазваниеТипаТТ  =  "Тип не определен";
					КонецЕсли;
				    // Заполнение атрибутов
					ЗаписатьАтрибут(ХМЛ, "distribId",	гПараметры.КодДистрибьютора);
					ЗаписатьАтрибут(ХМЛ, "clientId",	Выборка.КонтрагентКод);
					ЗаписатьАтрибут(ХМЛ, "pointId",		Выборка.ПодразделениеКонтрагентаКод); 
					ЗаписатьАтрибут(ХМЛ, "pointName",	Выборка.ПодразделениеКонтрагентаНаименование); 
					ЗаписатьАтрибут(ХМЛ, "city",		ГородАдреса);
					ЗаписатьАтрибут(ХМЛ, "zipCode",		ИндексАдреса);
					ЗаписатьАтрибут(ХМЛ, "pointAddr",	АдресСтрокой);
					ЗаписатьАтрибут(ХМЛ, "pointType",	КодТипаТТ);
					ЗаписатьАтрибут(ХМЛ, "typeName",	НазваниеТипаТТ);
					ЗаписатьАтрибут(ХМЛ, "placeType",	гПараметры.ТипТТпоМесторасположению);			
					//ЗаписатьАтрибут(ХМЛ, "phone",		ТелефонСтрокой);
					//ЗаписатьАтрибут(ХМЛ, "contact");
					ЗаписатьАтрибут(ХМЛ, "IsActive",	ТТАктивна);
					//ЗаписатьАтрибут(ХМЛ, "comments",	этТоргТочка.Комментарий);
					ЗаписатьАтрибут(ХМЛ, "shopBoard",	Выборка.ПодразделениеКонтрагентаНаименованиеПолное); 
					//ЗаписатьАтрибут(ХМЛ, "legalAddr"); - Юр. адрес
					ЗаписатьАтрибут(ХМЛ, "manId",		Выборка.manId); 
					ЗаписатьАтрибут(ХМЛ, "empName", 	Выборка.ОтветственныйФИО);
					ЗаписатьАтрибут(ХМЛ, "kladr");		//,		АдресKlAdr);
					//ЗаписатьАтрибут(ХМЛ, "dateBegin");
					//ЗаписатьАтрибут(ХМЛ, "dateEnd");
					ЗаписатьАтрибут(ХМЛ, "dateLoad",	ДатаВыгрузки,"ДФ=dd.MM.yyyy");			
				ХМЛ.ЗаписатьКонецЭлемента();//attributes			
			ХМЛ.ЗаписатьКонецЭлемента();//entity
		КонецЦикла;
		Если ТЗТорговыеТочки.НайтиСтроки(Новый Структура("ПодразделениеКонтрагента","Physic001")).Количество() > 0 Тогда
			ХМЛ.ЗаписатьНачалоЭлемента("entity");			// entity 		
			ХМЛ.ЗаписатьНачалоЭлемента("attributes");   // attributes 	
			// Заполнение атрибутов 
			ЗаписатьАтрибут(ХМЛ, "distribId",	гПараметры.КодДистрибьютора);
			ЗаписатьАтрибут(ХМЛ, "clientId",	"Physic001");
			ЗаписатьАтрибут(ХМЛ, "pointId",		"Physic001"); 
			ЗаписатьАтрибут(ХМЛ, "pointName",	"Физические лица"); 
			ЗаписатьАтрибут(ХМЛ, "city",		"default физические лица");
			ЗаписатьАтрибут(ХМЛ, "pointAddr",	"default физические лица");
			ЗаписатьАтрибут(ХМЛ, "pointType",	"ttt0000001");
			ЗаписатьАтрибут(ХМЛ, "typeName",	"Тип не определен");
			ЗаписатьАтрибут(ХМЛ, "placeType",	гПараметры.ТипТТпоМесторасположению);			
			//ЗаписатьАтрибут(ХМЛ, "phone",		ТелефонСтрокой);
			//ЗаписатьАтрибут(ХМЛ, "contact");
			ЗаписатьАтрибут(ХМЛ, "IsActive",	"1");
			//ЗаписатьАтрибут(ХМЛ, "comments",	этТоргТочка.Комментарий);
			ЗаписатьАтрибут(ХМЛ, "shopBoard",	"Физические лица"); 
			//ЗаписатьАтрибут(ХМЛ, "legalAddr"); - Юр. адрес
			ЗаписатьАтрибут(ХМЛ, "manId"); 
			ЗаписатьАтрибут(ХМЛ, "empName");
			ЗаписатьАтрибут(ХМЛ, "kladr");		//,		АдресKlAdr);
			//ЗаписатьАтрибут(ХМЛ, "dateBegin");
			//ЗаписатьАтрибут(ХМЛ, "dateEnd");
			ЗаписатьАтрибут(ХМЛ, "dateLoad",	ДатаВыгрузки,"ДФ=dd.MM.yyyy");				ХМЛ.ЗаписатьКонецЭлемента();//attributes			
			ХМЛ.ЗаписатьКонецЭлемента();//entity
		КонецЕсли;
		Если ТЗТорговыеТочки.НайтиСтроки(Новый Структура("ПодразделениеКонтрагента","Waste001")).Количество() > 0 Тогда
			ХМЛ.ЗаписатьНачалоЭлемента("entity");			// entity 		
			ХМЛ.ЗаписатьНачалоЭлемента("attributes");   // attributes 	
			// Заполнение атрибутов 
			ЗаписатьАтрибут(ХМЛ, "distribId",	гПараметры.КодДистрибьютора);
			ЗаписатьАтрибут(ХМЛ, "clientId",	"Waste001");
			ЗаписатьАтрибут(ХМЛ, "pointId",		"Waste001"); 
			ЗаписатьАтрибут(ХМЛ, "pointName",	"Списание продукции"); 
			ЗаписатьАтрибут(ХМЛ, "city",		"default списание продукции");
			ЗаписатьАтрибут(ХМЛ, "pointAddr",	"default списание продукции");
			ЗаписатьАтрибут(ХМЛ, "pointType",	"ttt0000001");
			ЗаписатьАтрибут(ХМЛ, "typeName",	"Тип не определен");
			ЗаписатьАтрибут(ХМЛ, "placeType",	гПараметры.ТипТТпоМесторасположению);			
			//ЗаписатьАтрибут(ХМЛ, "phone",		ТелефонСтрокой);
			//ЗаписатьАтрибут(ХМЛ, "contact");
			ЗаписатьАтрибут(ХМЛ, "IsActive",	"1");
			//ЗаписатьАтрибут(ХМЛ, "comments",	этТоргТочка.Комментарий);
			ЗаписатьАтрибут(ХМЛ, "shopBoard",	"Списание продукции"); 
			//ЗаписатьАтрибут(ХМЛ, "legalAddr"); - Юр. адрес
			ЗаписатьАтрибут(ХМЛ, "manId"); 
			ЗаписатьАтрибут(ХМЛ, "empName");
			ЗаписатьАтрибут(ХМЛ, "kladr");		//,		АдресKlAdr);
			//ЗаписатьАтрибут(ХМЛ, "dateBegin");
			//ЗаписатьАтрибут(ХМЛ, "dateEnd");
			ЗаписатьАтрибут(ХМЛ, "dateLoad",	ДатаВыгрузки,"ДФ=dd.MM.yyyy");				ХМЛ.ЗаписатьКонецЭлемента();//attributes			
			ХМЛ.ЗаписатьКонецЭлемента();//entity
		КонецЕсли;    
		ХМЛ.ЗаписатьКонецЭлемента();//entities
	ХМЛ.ЗаписатьКонецЭлемента();//request 
	ХМЛ.Закрыть();
	мМассив.Добавить(Имя);
	Возврат мМассив;
	
КонецФункции

// R-файл. Запасы.
Функция ВыгрузитьЗапасы(мМассив,НоменклатураДляОтбора)
	
	Имя = гПараметры.КаталогВыгрузки + "R.xml"; 
	ДатаВыгрузки = КонецДня(КонецДня(ТекущаяДата() - 60*60*24));
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапроса("Запрос_R_Файл");
	Запрос.УстановитьПараметр("НачалоПериода",			НачалоДня(гПараметры.НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода",			КонецДня(гПараметры.КонецПериода));
	Запрос.УстановитьПараметр("НоменклатураДляОтбора",			НоменклатураДляОтбора);
	Запрос.УстановитьПараметр("Организация",			гПараметры.Организация);
	Запрос.УстановитьПараметр("Счет4101",			ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);
	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
    Запрос.УстановитьПараметр("МассивСубконто",			МассивСубконто);  
    РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	//тзЗапасы = Запрос.Выполнить().Выгрузить();
	
	ХМЛ = Новый ЗаписьXML;
	ХМЛ.ОткрытьФайл(Имя, "UTF-8");
	ХМЛ.ЗаписатьОбъявлениеXML(); 	
	ХМЛ.ЗаписатьНачалоЭлемента("request");			//request
		ХМЛ.ЗаписатьНачалоЭлемента("entities");		//entities

		//Запрос = Новый Запрос;
		//Запрос.Текст = ПолучитьТекстЗапроса("Запрос_R_Файл");
		//Запрос.УстановитьПараметр("НачалоПериода",			НачалоДня(гПараметры.НачалоПериода));
		//Запрос.УстановитьПараметр("КонецПериода",			КонецДня(гПараметры.КонецПериода));
		//Запрос.УстановитьПараметр("НоменклатураДляОтбора",			НоменклатураДляОтбора);  
					
		тзЗапасы = Запрос.Выполнить().Выгрузить();
		
		Пока Выборка.Следующий() Цикл
		//Для Каждого стрЗапасы Из тзЗапасы Цикл                            
			
			// Записи без движений не отбирать
			Если  Выборка.quantityIn = 0 И Выборка.quantityO = 0  Тогда
				Продолжить;
			КонецЕсли;

			ХМЛ.ЗаписатьНачалоЭлемента("entity");		//entity			
				ХМЛ.ЗаписатьНачалоЭлемента("attributes");	// attributes 			
					
				    // Вычисление выражений   
					//productId	=  стрЗапасы.product.Код;
					//product		=  стрЗапасы.product.Наименование;
					//locId		=	стрЗапасы.loc.Код;	
					
					// Поменять местами Дт и Кт и убрать знак "-" для ВозвратовТоваров
					Если Выборка.quantityIn < 0 И Выборка.quantityO < 0 Тогда
						quantityIn = - Выборка.quantityO;
						quantityO = - Выборка.quantityIn;
					ИначеЕсли Выборка.quantityIn < 0 Тогда
						quantityIn = 0;
						quantityO = ((-1) * Выборка.quantityIn) + Выборка.quantityO;
					ИначеЕсли Выборка.quantityO < 0 Тогда
						quantityO = 0;
						quantityIn = ((-1) * Выборка.quantityIn) + Выборка.quantityIn;
					Иначе
						quantityIn  = Выборка.quantityIn;
						quantityO = Выборка.quantityO;
					КонецЕсли;	
					//Если стрЗапасы.quantityIn < 0 Тогда
					//	quantityIn = 0;
					//	quantityO = (-1) * стрЗапасы.quantityIn; 
					//Иначе
					//	quantityIn  = стрЗапасы.quantityIn;	
					//КонецЕсли;
					//Если стрЗапасы.quantityO < 0 Тогда
					//	quantityO = 0;
					//	quantityIn = (-1) * стрЗапасы.quantityIn; 
					//Иначе
					//	quantityO = стрЗапасы.quantityO;
					//КонецЕсли;   
					
					// Костыль-заплатка! 
					// Ошибка из протокола загрузки: Поле "Стоимость" должно быть нулевым при нулевом исходящем остатке
					sum = ?(0 = Выборка.quantityE, 0, Выборка.sum);   
									
					//
					
					// Заполнение атрибутов  
					ЗаписатьАтрибут(ХМЛ, "distribId",		гПараметры.КодДистрибьютора);
					ЗаписатьАтрибут(ХМЛ, "locId",			Выборка.locId);
					ЗаписатьАтрибут(ХМЛ, "dateApplied",		Выборка.dateApplied,		"ДФ=dd.MM.yyyy");
					ЗаписатьАтрибут(ХМЛ, "productId",		Выборка.productId);
					ЗаписатьАтрибут(ХМЛ, "quantityE",		Выборка.quantityE,		"ЧЦ=9;  ЧДЦ=2; ЧГ=0");
					ЗаписатьАтрибут(ХМЛ, "quantityS",		Выборка.quantityS,		"ЧЦ=9;  ЧДЦ=2; ЧГ=0");
					ЗаписатьАтрибут(ХМЛ, "quantityIn",		quantityIn,					"ЧЦ=9;  ЧДЦ=2; ЧГ=0");
					ЗаписатьАтрибут(ХМЛ, "quantityO",		quantityO,					"ЧЦ=9;  ЧДЦ=2; ЧГ=0");
					//ЗаписатьАтрибут(ХМЛ, "weight",			1,						"ЧЦ=12; ЧДЦ=3; ЧГ=0");
					ЗаписатьАтрибут(ХМЛ, "sum",				sum,						"ЧЦ=12; ЧДЦ=2; ЧГ=0");					
					ЗаписатьАтрибут(ХМЛ, "product",			Выборка.product);					
					ЗаписатьАтрибут(ХМЛ, "dateLoad",		ДатаВыгрузки,				"ДФ=dd.MM.yyyy");									
					ЗаписатьАтрибут(ХМЛ, "currency",		"RUB");									
				ХМЛ.ЗаписатьКонецЭлемента();//attributes			
			ХМЛ.ЗаписатьКонецЭлемента();//entity
		КонецЦикла;  
		
		ХМЛ.ЗаписатьКонецЭлемента();//entities                                
	ХМЛ.ЗаписатьКонецЭлемента();//request 
	ХМЛ.Закрыть();
	мМассив.Добавить(Имя);
	Возврат мМассив;
	
КонецФункции

// I-файл. Поступления (приходы и возвраты)
Функция ВыгрузитьПриход(мМассив,НоменклатураДляОтбора)
	
	Имя = гПараметры.КаталогВыгрузки + "I.xml";  
	ДатаВыгрузки = КонецДня(КонецДня(ТекущаяДата() - 60*60*24));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапроса("Запрос_I_Файл");
	Запрос.УстановитьПараметр("НачалоПериода",			НачалоДня(гПараметры.НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода",			КонецДня(гПараметры.КонецПериода));
	Запрос.УстановитьПараметр("НоменклатураДляОтбора",			НоменклатураДляОтбора);
	Запрос.УстановитьПараметр("Организация",			гПараметры.Организация);
	Запрос.УстановитьПараметр("Счет4101",			ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);
	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
    Запрос.УстановитьПараметр("МассивСубконто",			МассивСубконто);  
	тзПриход = Запрос.Выполнить().Выгрузить();
	
	ХМЛ = Новый ЗаписьXML;
	ХМЛ.ОткрытьФайл(Имя, "UTF-8");
	ХМЛ.ЗаписатьОбъявлениеXML(); 	
	ХМЛ.ЗаписатьНачалоЭлемента("request");  //request
		ХМЛ.ЗаписатьНачалоЭлемента("entities"); //entities		
			Для Каждого стрПриход Из тзПриход	Цикл
				ХМЛ.ЗаписатьНачалоЭлемента("entity");			// entity		
					ХМЛ.ЗаписатьНачалоЭлемента("attributes");		// attributes  
						 // Вычисление выражений  
						//productId	=  стрПриход.product.Код;
						//product		=  стрПриход.product.Наименование;
						//MTTNNum 	=  СокрЛП(стрПриход.docReg.Номер);
						//mInvNum     =  СокрЛП(стрПриход.docReg.Номер);
						//locId		=  стрПриход.docReg.Склад.Код;
												
						// Заполнение атрибутов  
						ЗаписатьАтрибут(ХМЛ, "distribId",		гПараметры.КодДистрибьютора);
						ЗаписатьАтрибут(ХМЛ, "dateApplied",		стрПриход.dateApplied,	"ДФ=dd.MM.yyyy");
						ЗаписатьАтрибут(ХМЛ, "productId",		стрПриход.productId);
						ЗаписатьАтрибут(ХМЛ, "quantity",		стрПриход.quantity,		"ЧЦ=9;  ЧДЦ=0; ЧГ=0");						
						ЗаписатьАтрибут(ХМЛ, "mInvNum",			СокрЛП(стрПриход.mInvNum));						
						ЗаписатьАтрибут(ХМЛ, "MTTNNum",			СокрЛП(стрПриход.MTTNNum));
                        ЗаписатьАтрибут(ХМЛ, "locId",			стрПриход.locId);
                        ЗаписатьАтрибут(ХМЛ, "product",			стрПриход.product);
                        ЗаписатьАтрибут(ХМЛ, "dateLoad",		ДатаВыгрузки,			"ДФ=dd.MM.yyyy");
					ХМЛ.ЗаписатьКонецЭлемента();//attributes					
				ХМЛ.ЗаписатьКонецЭлемента();//entity
			КонецЦикла;		
		ХМЛ.ЗаписатьКонецЭлемента();//entities
	ХМЛ.ЗаписатьКонецЭлемента();//request 
	ХМЛ.Закрыть();	
	мМассив.Добавить(Имя);
	Возврат мМассив;
	
КонецФункции

#КонецОбласти

#Область _Хелперы_ 
/// Helper: Улучшение читаемости кода.
//  Запись атрибута вынесена в отдельную процедуру 
//  
Процедура ЗаписатьАтрибут(ХМЛ, ИмяАтрибута, ЗначениеАтрибута="", СтрокаФормата = Неопределено) 
	
	Значение = ?((Неопределено = ЗначениеАтрибута) ИЛИ НЕ(ЗначениеЗаполнено(ЗначениеАтрибута)), "", ЗначениеАтрибута); 
	ХМЛ.ЗаписатьНачалоЭлемента("attribute");
	ХМЛ.ЗаписатьАтрибут("name", ИмяАтрибута); 
	Если (Неопределено = СтрокаФормата) Тогда  
		Попытка
			ХМЛ.ЗаписатьТекст(Значение);      			
		Исключение
			ХМЛ.ЗаписатьТекст(Строка(Значение));  
		КонецПопытки;		
	Иначе                   
		ХМЛ.ЗаписатьТекст(Формат(Значение, СтрокаФормата));
	КонецЕсли;	
	ХМЛ.ЗаписатьКонецЭлемента();//attribute
	
КонецПроцедуры 

Процедура ЗаписатьАтрибутЧисло(ХМЛ, ИмяАтрибута, ЗначениеАтрибута="", СтрокаФормата = Неопределено) 
	
	Значение = ?(Неопределено = ЗначениеАтрибута, "", ЗначениеАтрибута); 
	ХМЛ.ЗаписатьНачалоЭлемента("attribute");
	ХМЛ.ЗаписатьАтрибут("name", ИмяАтрибута); 
	Если (Неопределено = СтрокаФормата) Тогда  
		Попытка
			ХМЛ.ЗаписатьТекст(Значение);      			
		Исключение
			ХМЛ.ЗаписатьТекст(Строка(Значение));  
		КонецПопытки;		
	Иначе                   
		ХМЛ.ЗаписатьТекст(Формат(Значение, СтрокаФормата));
	КонецЕсли;	
	ХМЛ.ЗаписатьКонецЭлемента();//attribute
	
КонецПроцедуры


// А.К. 23.05.2023
/// Воздращает структуру с контактной информацией ВидКИ (Справочник.ВидыКонтактнойИнформации) для объекта Объект
&НаСервере
Функция ПолучитьАдресныеСведенияОбъекта(Объект, ВидАдреса, наДату = Неопределено)
	
	Если Неопределено = наДату Тогда
		наДату = ТекущаяДата();
	КонецЕсли;	
	АдресСтрокой 	= УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(Объект, ВидАдреса, , наДату);    
	АдресСтрокой 	= УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(АдресСтрокой, ВидАдреса);
	Сведения 		= РаботаСАдресами.СведенияОбАдресе(АдресСтрокой);
	Возврат(Сведения);
	
КонецФункции

&НаСервере
Функция ПолучитьПредставлениеКИОбъекта(Объект, ВидКИ, наДату = Неопределено)
	
	Если Неопределено = наДату Тогда
		наДату = ТекущаяДата();
	КонецЕсли;	
	ПредставлениеСтрокой 	= УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(Объект, ВидКИ, , наДату);    
	Возврат(ПредставлениеСтрокой);
	
КонецФункции

// Получить макет
&НаСервере
Функция ПолучитьТекстЗапроса(ИмяМакета) 
	Возврат ПолучитьМакет(ИмяМакета).ПолучитьТекст();
КонецФункции

&НаСервере
Функция ВернутьГородКонтрагентаПоПартнеру(Партнер) 
	
	ВидКИ  = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента");
    Сведения = ПолучитьАдресныеСведенияОбъекта(Партнер, ВидКИ);
	Возврат (Сведения.Город);

КонецФункции

&НаСервере
Функция РасшифроватьОтветСервера(имяФайлаОтвета)
	
	// Прочитать код из файла ответа сервиса
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(имяФайлаОтвета);              
	ст = СокрЛП(Текст.ПрочитатьСтроку());	
	Если СтрДлина(ст) = 1 Тогда
		ст = Лев(ст, 1);
		стрРезультат = "Ответ сервера: Ошибка при отправке файла.";
		Если ст = "0" Тогда
			стрРезультат = "Ответ сервера: Файл успешно принят. [Код ответа = 0]"
		ИначеЕсли ст = "1" Тогда
			стрРезультат = стрРезультат + "Не указан логин (е-mail). [Код ответа = 1]";
		ИначеЕсли ст = "2" Тогда
			стрРезультат = стрРезультат + "Не указан пароль. [Код ответа = 2]";
		ИначеЕсли ст = "3" Тогда
			стрРезультат = стрРезультат + "Логин введен не верно или такой пользователь не существует в системе. [Код ответа = 3]";
		ИначеЕсли ст = "4" Тогда
			стрРезультат = стрРезультат + "Пароль введен не верно. [Код ответа = 4]";
		ИначеЕсли ст = "5" Тогда
			стрРезультат = стрРезультат + "Ошибка при обработке файла (файл не соответствует регламенту). [Код ответа = 5]";
		КонецЕсли;			
	КонецЕсли; 			
	Текст.Закрыть();
	Возврат(стрРезультат);
	
КонецФункции

#КонецОбласти

///
// Прочитать настройки выгрузки из безопасного хранилища и заполнить ими 
// глобальную структуру гПараметры для дальнейшего использования
&НаСервере  
Функция ПрочитатьНастройкиВыгрузкиИЗаполнитьГлПеременные(ПериодВыгрузки)  
	
	/// Прочитать настройки из безопасного хранилища
	ПространствоИмен = "BSC_SellOut_Upload_Союзпищепром";
	КлючНастроек	 = "Parameters_Союзпищепром";
	
	// Установить глобальные параметры
	гПараметры = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ПространствоИмен, КлючНастроек);
		
	Если Неопределено = гПараметры Тогда
		// Либо ещё настройки не записывались, либо невозможно их прочитать
		Возврат (Ложь);		
    Иначе
		Если НЕ(ТипЗнч(гПараметры) = Тип("Структура")) Тогда
			Возврат (Ложь);
		КонецЕсли;	
	КонецЕсли;
	
	// Дозаполнить поля	
	Если Неопределено = ПериодВыгрузки Тогда
		//гПараметры.Вставить("НачалоПериода",	ДобавитьМесяц(НачалоДня(ТекущаяДата() - 60*60*24), -1));
		//гПараметры.Вставить("КонецПериода", 	КонецДня(КонецДня(ТекущаяДата() - 60*60*24)));   
		гПараметры.Вставить("НачалоПериода",	НачалоДня(ТекущаяДата() - 60*60*24*31));
		гПараметры.Вставить("КонецПериода", 	КонецДня(ТекущаяДата() - 60*60*24));
	Иначе  
		// Выгрузка происходит интерактивно, период выгрузки взять из параметров
	 	гПараметры.Вставить("НачалоПериода",	НачалоДня(ПериодВыгрузки.НачалоПериода));
		гПараметры.Вставить("КонецПериода", 	КонецДня(ПериодВыгрузки.КонецПериода));		
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(ПапкаДляВыгрузки) Тогда
	//	гПараметры.КаталогВыгрузки = ПапкаДляВыгрузки + "\";
	//Иначе
		гПараметры.КаталогВыгрузки	=  КаталогВременныхФайлов(); 
	//КонецЕсли;
	гПараметры.Вставить("ТипТорговойТочки", 		"ttt0000002");	
	гПараметры.Вставить("ТипТТпоМесторасположению", "tttm000000"); 

	Возврат(Истина);
	
КонецФункции	

// Запись сообщения в журнал регистрации
//
&НаСервере 
Процедура СоздатьСообщениеВЖР(ТекстСообщения)
	
	СообщениеЖР = Строка(ТекущаяДата()) + "; Обработка 'BSC-SellOut. Autorun mode' : " +  ТекстСообщения;
	ЗаписьЖурналаРегистрации(СообщениеЖР,
	УровеньЖурналаРегистрации.Информация, , ,                       
	"Обработка 'BSC-SellOut. Autorun mode'"
	); 	
КонецПроцедуры 

&НаСервере
Процедура ВывестиСообщениеВЛог(ТекстСообщения, РежимВывода)			
	
	Если РежимВывода Тогда   // Интерактивно
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
			, //   "ПолеВРеквизитеФормыОбъект",
			"Объект");
	Иначе
		СоздатьСообщениеВЖР(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры;	
       
