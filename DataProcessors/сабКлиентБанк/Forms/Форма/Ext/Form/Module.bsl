////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
// Сохраняет настройки формы.
Процедура СохранитьНастройкиФормы()
	
	Настройки = Новый Соответствие;
	Настройки.Вставить("ФайлВыгрузки", Объект.ФайлВыгрузки);
	Настройки.Вставить("КаталогВыгрузки", Объект.КаталогВыгрузки);
	Настройки.Вставить("ФайлЗагрузки", Объект.ФайлЗагрузки);
	Настройки.Вставить("Программа", Объект.Программа);
	Настройки.Вставить("СтатьяДДСИсходяший", Объект.СтатьяДДСИсходяший);
	Настройки.Вставить("СтатьяДДСВходящий", Объект.СтатьяДДСВходящий);
	Настройки.Вставить("ПроводитьЗагружаемые", Объект.ПроводитьЗагружаемые);
	Настройки.Вставить("Кодировка", Объект.Кодировка);
	ХранилищеСистемныхНастроек.Сохранить("Обработка.КлиентБанк.Форма.ОсновнаяФорма", "ВыгрузкаВСбербанк", Настройки);
	
КонецПроцедуры // СохранитьНастройкиФормы()

&НаСервере
// Загружает настройки формы.
Процедура ЗагрузитьНастройкиФормы()
	
	Настройки = ХранилищеСистемныхНастроек.Загрузить("Обработка.КлиентБанк.Форма.ОсновнаяФорма", "ВыгрузкаВСбербанк");
	
	Если Настройки <> Неопределено Тогда
		Объект.ФайлВыгрузки = Настройки.Получить("ФайлВыгрузки");
		Объект.КаталогВыгрузки = Настройки.Получить("КаталогВыгрузки");
		Объект.ФайлЗагрузки = Настройки.Получить("ФайлЗагрузки");
		Объект.Программа = Настройки.Получить("Программа");
		Объект.СтатьяДДСИсходяший = Настройки.Получить("СтатьяДДСИсходяший");
		Объект.СтатьяДДСВходящий = Настройки.Получить("СтатьяДДСВходящий");
		Объект.ПроводитьЗагружаемые = Настройки.Получить("ПроводитьЗагружаемые");
		Объект.Кодировка = Настройки.Получить("Кодировка");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Программа) Тогда
		Объект.Программа = "Клиент-Банк РФК";
	КонецЕсли;
	
	Если НЕ ЕстьСохраненныеНастройки Тогда
		КонстантаПлатежка = Ложь;
		Объект.ПроводитьЗагружаемые = Истина; 
		Объект.СозданиеНенайденыхЭлементов = НЕ КонстантаПлатежка;
		Объект.СоздаватьБанковскиеВыписки = НЕ КонстантаПлатежка;
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьНастройкиФормы()

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
Функция ПолучитьДанныеОрганизацияПриИзменении(Организация, БанковскийСчет)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
	"БанковскийСчет",
	?(БанковскийСчет.Владелец = Организация, БанковскийСчет, Организация.ОсновнойБанковскийСчет)
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

&НаКлиенте
// Процедура открывает файл для просмотра.
//
Процедура ОткрытьФайлДляПросмотра(ФайлВыгрузки, Кодировка, Заголовок)
	
	Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда		
		ТекстСообщения = НСтр(
		"ru='Для данной операции необходимо
		|установить расширение работы с файлами!
		|Установка выполняется в разделе
		|""Сервис и администрирование""/
		|""Настройка сервисных функций"".'"
		);
		Предупреждение(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ФайлНаДиске = Новый Файл(ФайлВыгрузки);
	Если НЕ ФайлНаДиске.Существует() Тогда
		Предупреждение(НСтр("ru = 'Не найден файл!'"));
		Возврат;
	КонецЕсли;
	Текст = Новый ТекстовыйДокумент();
	Если Кодировка = "DOS" Тогда
		Кодир = КодировкаТекста.OEM;
	ИначеЕсли Кодировка = "UTF-8" Тогда
		Кодир = КодировкаТекста.UTF8;
	ИначеЕсли Кодировка = "Авто" Тогда
		Кодир = Неопределено;
	Иначе
		Кодир = КодировкаТекста.ANSI;
	КонецЕсли;
	Текст.Прочитать(ФайлВыгрузки, Кодир);
	Текст.Показать(Заголовок, ФайлВыгрузки);
	
КонецПроцедуры // ОткрытьФайлДляПросмотра()

&НаКлиенте
// Функция проверяет правильность заполнения реквизитов формы.
//
Функция ПроверитьЗаполнениеРеквизитовФормы(ЭтоВыгрузка)
	
	Ошибка = Ложь;
	
	// Проверка заполненности реквизитов.
	Если НЕ ЗначениеЗаполнено(Объект.Кодировка) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена кодировка!'");
		ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения, , , "Кодировка", Ошибка);
	КонецЕсли;
	Если ЭтоВыгрузка И НЕ ЗначениеЗаполнено(Объект.НачПериода) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен начальный период!'");
		ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения, , , "НачПериода", Ошибка);
	КонецЕсли;
	Если ЭтоВыгрузка И НЕ ЗначениеЗаполнено(Объект.КонПериода) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен конечный период!'");
		ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения, , , "КонПериода", Ошибка);
	КонецЕсли;
	Если ЭтоВыгрузка И НЕ ЗначениеЗаполнено(Объект.Программа) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена программа %Тип%!'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Тип%", ?(ЭтоВыгрузка, "приемник'", "источник'"));
		ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения, , , "Программа", Ошибка);		
	КонецЕсли;
	Если ЭтоВыгрузка И НЕ ЗначениеЗаполнено(Объект.КаталогВыгрузки) Тогда
		ТекстСообщения = НСтр("ru = 'Не выбран каталог выгрузки!'");
		ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения, , , "КаталогВыгрузки", Ошибка);
	КонецЕсли;
	Если НЕ ЭтоВыгрузка И НЕ ЗначениеЗаполнено(Объект.ФайлЗагрузки) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено имя файла загрузки!'");
		ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения, , , "ФайлЗагрузки", Ошибка);
	КонецЕсли; 	
	
	// + Ничуговская 17.04.2018
	//Если ЭтоВыгрузка и Элементы.БанковскиеСчетаВыгрузка.Текущиеданные.Организация = "Все организации и счета" Тогда
	//	ТекстСообщения = НСтр("ru = 'Выберите организацию, выгрузка по всем организациям невозможна!'");
	//	ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения,"БанковскиеСчетаВыгрузка", Элементы.БанковскиеСчетаВыгрузка.ТекущаяСтрока, "Организация", Ошибка);		
	//КонецЕсли;
	// - Ничуговская 
	
	Возврат Ошибка;
	
КонецФункции // ПроверитьЗаполнениеРеквизитовФормы()

&НаСервере
// Функция проверяет корректность данных для выгрузки.
//
Функция ПроверитьНаКорректностьИПустоеЗначениеЭкспорта(СтрокаДокумента)
	
	ПеречислениеНалога          = Ложь;
	НепрямыеРасчетыУПлательщика = Ложь;
	НепрямыеРасчетыУПолучателя  = Ложь;
	ПеречислениеНалога          = (СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога) ИЛИ (СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога);
	НепрямыеРасчетыУПлательщика = ЗначениеЗаполнено(СтрокаДокумента.ОрганизацияБанкДляРасчетов);
	НепрямыеРасчетыУПолучателя  = ЗначениеЗаполнено(СтрокаДокумента.КонтрагентБанкДляРасчетов);
	Плательщик = "Организация";
	Получатель = "Контрагент";
	РеквизитыПлДокЭксОсновные = "Номер,Дата,СуммаДокумента";
	РеквизитыПлДокЭксПлательщик = Плательщик + "Счет," + Плательщик + "," + Плательщик + "ИНН";
	РеквизитыПлДокЭксПлательщикНПР = Плательщик + "РасчСчет," + Плательщик + "БанкДляРасчетов," + Плательщик + "ГородБанка," + Плательщик + "БИКРЦБанка";
	РеквизитыПлДокЭксПолучатель = Получатель + "Счет," + Получатель + "," + Получатель + "ИНН";
	РеквизитыПлДокЭксПолучательНПР = Получатель + "РасчСчет," + Получатель + "БанкДляРасчетов," + Получатель + "ГородБанка," + Получатель + "БИКРЦБанка";
	РеквизитыПлДокЭксБюджетПлатеж = "СтатусСоставителя,КПППлательщика,КПППолучателя,КодБК,КодОКАТО,ПоказательОснования,ПоказательПериода,ПоказательНомера,ПоказательДаты,ПоказательТипа";
	
	СтрокаРеквизиты = "%РеквизитыПлДокЭксОсновные%,%РеквизитыПлДокЭксПлательщик%,%РеквизитыПлДокЭксПлательщикНПР%%РеквизитыПлДокЭксПолучатель%,%РеквизитыПлДокЭксПолучательНПР%";
	СтрокаРеквизиты = СтрЗаменить(СтрокаРеквизиты, "%РеквизитыПлДокЭксОсновные%", РеквизитыПлДокЭксОсновные);
	СтрокаРеквизиты = СтрЗаменить(СтрокаРеквизиты, "%РеквизитыПлДокЭксПлательщик%", РеквизитыПлДокЭксПлательщик);
	СтрокаРеквизиты = СтрЗаменить(СтрокаРеквизиты, "%РеквизитыПлДокЭксПлательщикНПР%", ?(НепрямыеРасчетыУПлательщика, РеквизитыПлДокЭксПлательщикНПР + ",", ""));
	СтрокаРеквизиты = СтрЗаменить(СтрокаРеквизиты, "%РеквизитыПлДокЭксПолучатель%", РеквизитыПлДокЭксПолучатель);
	СтрокаРеквизиты = СтрЗаменить(СтрокаРеквизиты, "%РеквизитыПлДокЭксПолучательНПР%", ?(НепрямыеРасчетыУПолучателя, РеквизитыПлДокЭксПолучательНПР + ",", ""));
	
	ЭкспортНеПустые = СоздатьСоответствиеИзСтроки(СтрокаРеквизиты);
	
	Для каждого Свойство Из ЭкспортНеПустые Цикл
		ПроверитьНаПустоеЗначениеЭкспорта(СтрокаДокумента, Свойство.Ключ);
	КонецЦикла;
	Если ПеречислениеНалога Тогда
		ПроверитьЗаполнениеНалоговыхРеквизитов(СтрокаДокумента);
	КонецЕсли;
	ПроверитьНаКорректностьНомераПриВыгрузке(СтрокаДокумента);
	
КонецФункции // ПроверитьНаКорректностьИПустоеЗначениеЭкспорта()

&НаСервере
// Процедура проверяет пустое значение данных для выгрузки.
//
Процедура ПроверитьНаПустоеЗначениеЭкспорта(СтрокаЭкспорта, ИмяСвойства)
	
	Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта[СокрЛП(ИмяСвойства)]) Тогда
		СтрокаЗамечание = НСтр("ru = 'Не заполнено ""%ИмяСвойства%""!'");
		СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ИмяСвойства%", ИмяСвойства);
		ДобавитьЗамечание(СтрокаЭкспорта, 3, СтрокаЗамечание);
		УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьНаПустоеЗначениеЭкспорта()

&НаСервере
// Процедура проверяет корректность номера для выгрузки.
//
Процедура ПроверитьНаКорректностьНомераПриВыгрузке(СтрокаЭкспорта)
	
	Значение = СокрЛП(СтрокаЭкспорта.Номер);
	Если Число(Строка(Число(Прав(Значение, 3)))) = 0 Тогда
		ДобавитьЗамечание(СтрокаЭкспорта, 4, НСтр("ru = 'Номер должен оканчиваться на три цифры и не на ""000""!'"));
	КонецЕсли;
	
КонецПроцедуры // ПроверитьНаКорректностьНомераПриВыгрузке()

&НаСервере
// Функция проверяет правильность заполнения налоговых реквизитов.
//
Функция ПроверитьЗаполнениеНалоговыхРеквизитов(СтрокаЭкспорта)
	
	Ошибка = Новый СписокЗначений();
	П101 = СокрЛП(СтрокаЭкспорта.СтатусСоставителя);
	П104 = СокрЛП(СтрокаЭкспорта.КодБК);
	П105 = СокрЛП(СтрокаЭкспорта.КодОКАТО);
	П106 = СокрЛП(СтрокаЭкспорта.ПоказательОснования);
	П107 = ?(
	ПустаяСтрока(СокрЛП(СтрЗаменить(СтрокаЭкспорта.ПоказательПериода , ".", ""))) = 1,
	"",
	СтрокаЭкспорта.ПоказательПериода
	);
	П107 = ?(
	СокрЛП(СтрЗаменить(СтрокаЭкспорта.ПоказательПериода, ".", "")) = "0",
	"",
	СтрокаЭкспорта.ПоказательПериода
	);
	П108 = СокрЛП(СтрокаЭкспорта.ПоказательНомера);
	П109 = ?(
	НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПоказательДаты),
	"0",
	Строка(СтрокаЭкспорта.ПоказательДаты)
	);
	П110 = СокрЛП(СтрокаЭкспорта.ПоказательТипа);
	Если (Найти("01,02,03,04,05,06,07,08,09,10,11,12,13,14,15", П101) = 0)
		ИЛИ (ПустаяСтрока(СокрЛП(П101))) Тогда
		ДобавитьЗамечание(
		СтрокаЭкспорта,
		3,
		НСтр("ru = 'Не заполнено поле ""Статус составителя"" на закладке ""Реквизиты для перечисления налогов"".'")
		);
		УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
	КонецЕсли;
	Если (СтрЗаменить(П104, "0", "") = "")
		И (Найти("06,07", П101) = 0) Тогда
		ДобавитьЗамечание(
		СтрокаЭкспорта,
		3,
		НСтр("ru = 'Не заполнено поле ""КБК"" на закладке ""Реквизиты для перечисления налогов"".'")
		);
		УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
	КонецЕсли;
	Если ПустаяСтрока(П105) Тогда
		ДобавитьЗамечание(
		СтрокаЭкспорта,
		3,
		НСтр("ru = 'Не заполнено поле ""Код ОКАТО"" на закладке ""Реквизиты для перечисления налогов"".'")
		);
		УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
	КонецЕсли;
	
	// Проверяем в зависимости от статуса составителя.
	Если П101 = "08" Тогда
		Если СтрЗаменить(П106, "0", "") <> "" Тогда 
			ДобавитьЗамечание(
			СтрокаЭкспорта,
			3,
			НСтр("ru = 'При статусе составителя ""08"" следует указать ""0"" в поле ""Основание платежа"" на закладке ""Реквизиты для перечисления налогов"".'")
			);
			УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
		Если СтрЗаменить(П107, "0", "") <> "" Тогда
			ДобавитьЗамечание(
			СтрокаЭкспорта,
			3,
			НСтр("ru = 'При статусе составителя ""08"" следует указать ""0"" в поле ""Налоговый период"" на закладке ""Реквизиты для перечисления налогов"".'")
			);
			УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
		Если СтрЗаменить(П108, "0", "") <> "" Тогда
			ДобавитьЗамечание(
			СтрокаЭкспорта,
			3,
			НСтр("ru = 'При статусе составителя ""08"" не следует заполнять поле ""Номер документа"" на закладке ""Реквизиты для перечисления налогов"".'")
			);
			УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
		Если СтрЗаменить(П109, "0", "") <> "" Тогда
			ДобавитьЗамечание(
			СтрокаЭкспорта,
			3,
			НСтр("ru = 'При статусе составителя ""08"" не следует заполнять поле ""Дата документа"" на закладке ""Реквизиты для перечисления налогов"".'")
			);
			УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
		//Если СтрЗаменить(П110, "0", "") <> "" Тогда
		//	ДобавитьЗамечание(
		//	СтрокаЭкспорта,
		//	3,
		//	НСтр("ru = 'При статусе составителя ""08"" следует указать ""0"" в поле ""Тип платежа"" на закладке ""Реквизиты для перечисления налогов"".'")
		//	);
		//	УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		//КонецЕсли;
	Иначе
		// Проверяем в зависимости от основания платежа.
		Если СтрЗаменить(СокрЛП(П106), "0", "") = "" Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				Если НЕ ЗначениеЗаполнено(П107) Тогда
					ДобавитьЗамечание(
					СтрокаЭкспорта,
					3,
					НСтр("ru = 'Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""Реквизиты для перечисления налогов"".'")
					);
					УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрДлина(П106) <> 2 Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				Если НЕ ЗначениеЗаполнено(П107) Тогда
					ДобавитьЗамечание(
					СтрокаЭкспорта,
					3,
					НСтр("ru = 'Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""Реквизиты для перечисления налогов"".'")
					);
					УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Найти("АП, АР", П106) > 0 Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				ДобавитьЗамечание(
				СтрокаЭкспорта,
				3,
				НСтр("ru = 'При основании платежа ""АП"" или ""АР"" следует указать ""0"" в поле ""Налоговый период"" на закладке ""Реквизиты для перечисления налогов"".'")
				);
				УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
			КонецЕсли;
		ИначеЕсли Найти("ТР, РС, ОТ, РТ, ВУ, ПР", П106) > 0 Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				Если НЕ ЗначениеЗаполнено(П107) Тогда
					ДобавитьЗамечание(
					СтрокаЭкспорта,
					3,
					НСтр("ru = 'Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""Реквизиты для перечисления налогов"".'")
					);
					УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Найти("ТП ,ЗД ", П106) > 0 Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				ДД = Сред((П107), 1, 2);
				ММ = Сред((П107), 4, 2);
				ГГ = Сред((П107), 7, 4);
				Если НЕ ММ = "" Тогда
					ММ = Число(Сред((П107), 4, 2));
				Иначе
					ММ = 0;
				КонецЕсли;
				Если НЕ ГГ = "" Тогда
					ГГ = Число(Сред((П107), 7, 4));
				Иначе
					ГГ = 0;
				КонецЕсли;
				Если (Найти("Д1, Д2, Д3, МС", ДД) > 0) Тогда
					Если (ММ < 1)
						ИЛИ (ММ > 12)
						ИЛИ (ГГ < 2000)
						ИЛИ (СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						ДобавитьЗамечание(
						СтрокаЭкспорта,
						3,
						НСтр("ru = 'Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""Реквизиты для перечисления налогов"".'")
						);
						УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
					КонецЕсли;
				ИначеЕсли (Найти("КВ", ДД) > 0) Тогда
					Если (ММ < 1)
						ИЛИ (ММ > 4)
						ИЛИ (ГГ < 2000)
						ИЛИ (СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						ДобавитьЗамечание(
						СтрокаЭкспорта,
						3,
						НСтр("ru = 'Неверно указано значение в поле ""Налоговый период"" на закладке ""Реквизиты для перечисления налогов"".'")
						);
						УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
					КонецЕсли;
				ИначеЕсли (Найти("ПЛ", ДД) > 0) Тогда
					Если (ММ < 1)
						ИЛИ (ММ > 2)
						ИЛИ (ГГ < 2000)
						ИЛИ (СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						ДобавитьЗамечание(
						СтрокаЭкспорта,
						3,
						НСтр("ru = 'Неверно указано значение в поле ""Налоговый период"" на закладке ""Реквизиты для перечисления налогов"".'")
						);
						УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
					КонецЕсли;
				ИначеЕсли (Найти("ГД", ДД) > 0) Тогда
					Если (ММ <> 0)
						ИЛИ (ГГ < 2000)
						ИЛИ (СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						ДобавитьЗамечание(
						СтрокаЭкспорта,
						3,
						НСтр("ru = 'Неверно указано значение в поле ""Налоговый период"" на закладке ""Реквизиты для перечисления налогов"".'")
						);
						УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
					КонецЕсли;
				Иначе
					Если НЕ ЗначениеЗаполнено(П107) Тогда
						ДобавитьЗамечание(
						СтрокаЭкспорта,
						3,
						НСтр("ru = 'Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""Реквизиты для перечисления налогов"".'")
						); 
						УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если СтрЗаменить(П108, "0", "") <> "" Тогда
				ДобавитьЗамечание(
				СтрокаЭкспорта,
				3,
				НСтр("ru = 'При основании платежа ""ТП"" или ""ЗД"" необходимо указывать ""0"" в поле ""Номер документа"" на закладке ""Реквизиты для перечисления налогов"".'")
				);
				УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
			КонецЕсли;
			Если Найти("ЗД ", П106) > 0 Тогда
				Если СтрЗаменить(П109, "0", "") <> "" Тогда
					ДобавитьЗамечание(
					СтрокаЭкспорта,
					3,
					НСтр("ru = 'При основании платежа ""ЗД"" не должно заполняться поле ""Дата документа"" на закладке ""Реквизиты для перечисления налогов"".'")
					);
					УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Найти("БФ", П106) > 0 Тогда
		Иначе
			ДобавитьЗамечание(
			СтрокаЭкспорта,
			3,
			НСтр("ru = 'Неверно указано значение в поле ""Основание платежа"" на закладке ""Реквизиты для перечисления налогов"".'")
			);
			УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
		Если СтрЗаменить(П110, "0", "") = "" Тогда
		ИначеЕсли Найти("НС, АВ, ПЕ, ПЦ, СА, АШ, ИШ, ПЛ, ГП, ВЗ", П110) > 0 Тогда
		Иначе
			ДобавитьЗамечание(
			СтрокаЭкспорта,
			3,
			НСтр("ru = 'Неверно указано значение в поле ""Тип платежа"" на закладке ""Реквизиты для перечисления налогов"".'")
			);
			УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
	КонецЕсли;
	
	// Выводим список найденых ошибок.
	Для Ном = 0 По Ошибка.Количество() - 1 Цикл
		ТекстСообщения = Ошибка.Получить(Ном);
		ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);
	КонецЦикла;
	
	Возврат Ошибка;
	
КонецФункции // ПроверитьЗаполнениеНалоговыхРеквизитов()

&НаСервере
// Процедура проверяет устанавливает готовность.
//
Процедура УстановитьГотовность(ТекущаяГотовность, НоваяГотовность)
	
	Если ЗначениеЗаполнено(ТекущаяГотовность)
		И ТекущаяГотовность < НоваяГотовность Тогда
		ТекущаяГотовность = НоваяГотовность;
	ИначеЕсли НЕ ЗначениеЗаполнено(ТекущаяГотовность) Тогда
		ТекущаяГотовность = НоваяГотовность;
	КонецЕсли;
	
КонецПроцедуры // УстановитьГотовность()

&НаСервере
// Процедура добавляет замечание.
//
Процедура ДобавитьЗамечание(СтруктураДокумента, НоваяГотовность, ТекстЗамечания)
	
	УстановитьГотовность(СтруктураДокумента.Готовность, НоваяГотовность);
	ДобавитьВСтроку(СтруктураДокумента.ОписаниеОшибок, ТекстЗамечания);
	
КонецПроцедуры // ДобавитьЗамечание()

&НаСервере
// Процедура добавляет переданное значение в строку
//
Процедура ДобавитьВСтроку(Буфер, НоваяСтрока)
	
	Если ПустаяСтрока(Буфер) Тогда
		Буфер = НоваяСтрока;
	Иначе
		УжеЕстьФразаОшибкаВФайле = Найти(Буфер, "Ошибка в файле. ") > 0;
		Если УжеЕстьФразаОшибкаВФайле Тогда
			НоваяСтрока = СтрЗаменить(НоваяСтрока, "Ошибка в файле. ", "");
		КонецЕсли;
		
		Буфер = Буфер + Символы.ПС + НоваяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Функция создает соответствие из строки.
//
Функция СоздатьСоответствиеИзСтроки(Знач СтрокаЧерезЗапятую)
	
	НовоеСоответствие = Новый Соответствие;
	ПозицияРазделителя = Найти(СтрокаЧерезЗапятую, ",");
	Пока ПозицияРазделителя > 0 Цикл
		ИмяИтема = Лев(СтрокаЧерезЗапятую, ПозицияРазделителя - 1);
		НовоеСоответствие.Вставить(ИмяИтема, Истина);
		СтрокаЧерезЗапятую = Сред(СтрокаЧерезЗапятую, ПозицияРазделителя + 1);
		ПозицияРазделителя = Найти(СтрокаЧерезЗапятую, ",");
	КонецЦикла;
	Если СтрДлина(СтрокаЧерезЗапятую) > 0 Тогда
		НовоеСоответствие.Вставить(СтрокаЧерезЗапятую, Истина);
	КонецЕсли;
	
	Возврат НовоеСоответствие;
	
КонецФункции // СоздатьСоответствиеИзСтроки()

&НаСервере
// Процедура заполняет таблицу для выгрузки.
//
Процедура ЗаполнитьВыбВыгрузка()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Д_ЗаявкаНаОплатуЗаявкаБезнал.УИДСтроки КАК УИДСтроки
	|ПОМЕСТИТЬ СтрокиЗаявки
	|ИЗ
	|	Документ.Д_ЗаявкаНаОплату.ЗаявкаБезнал КАК Д_ЗаявкаНаОплатуЗаявкаБезнал
	|ГДЕ
	|	Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка В(&РеестрЗаявок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлатежноеПоручение.Дата КАК Дата,
	|	ПлатежноеПоручение.Номер КАК Номер,
	|	ПлатежноеПоручение.НазначениеПлатежа КАК НазначениеПлатежа,
	|	ПлатежноеПоручение.ВидПлатежа КАК ВидПлатежа,
	|	ПлатежноеПоручение.Ссылка КАК Документ,
	|	ПлатежноеПоручение.ПоказательДаты КАК ПоказательДаты,
	|	ПлатежноеПоручение.ПоказательНомера КАК ПоказательНомера,
	|	ПлатежноеПоручение.ПоказательОснования КАК ПоказательОснования,
	|	ПлатежноеПоручение.ПоказательТипа КАК ПоказательТипа,
	|	ПлатежноеПоручение.ПоказательПериода КАК ПоказательПериода,
	|	ПлатежноеПоручение.СтатусСоставителя КАК СтатусСоставителя,
	|	ПлатежноеПоручение.СуммаДокумента КАК СуммаДокумента,
	|	ПлатежноеПоручение.Контрагент КАК Контрагент,
	|	Выбор Когда ПлатежноеПоручение.ВидОперации = Значение(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога) Тогда Значение(Перечисление.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога) Иначе Значение(Перечисление.ВидыОперацийПлатежноеПоручение.Оплата) Конец КАК ВидОперации,
	|	ПлатежноеПоручение.ОчередностьПлатежа КАК ОчередностьПлатежа,
	|	ПлатежноеПоручение.ТекстПлательщика КАК ТекстПлательщика,
	|	ПлатежноеПоручение.ТекстПолучателя КАК ТекстПолучателя,
	|	ПлатежноеПоручение.ИННПлательщика КАК ИННПлательщика,
	|	ПлатежноеПоручение.КПППлательщика КАК КПППлательщика,
	|	ПлатежноеПоручение.ИННПолучателя КАК ИННПолучателя,
	|	ПлатежноеПоручение.КПППолучателя КАК КПППолучателя,
	|	ПлатежноеПоручение.КодБК КАК КодБК,
	|	ПлатежноеПоручение.КодОКАТО КАК КодОКАТО,
	|	ПлатежноеПоручение.Организация КАК ОрганизацияСсылка,
	|	ПлатежноеПоручение.Организация.НаименованиеПолное КАК Организация,
	|	ПлатежноеПоручение.Организация.НаименованиеПолное КАК ОрганизацияПеречислениеНалога,
	|	ПлатежноеПоручение.Организация.ИНН КАК ОрганизацияИНН,
	|	ПлатежноеПоручение.Организация.КПП КАК ОрганизацияКПП,
	|	ПлатежноеПоручение.СчетОрганизации КАК ОрганизацияСчет,
	|	ПлатежноеПоручение.СчетОрганизации.НомерСчета КАК ОрганизацияНомерСчета,
	|	ПлатежноеПоручение.СчетОрганизации.Банк.Код КАК ОрганизацияБИКБанка,
	|	ПлатежноеПоручение.СчетОрганизации.Банк КАК ОрганизацияБанк,
	|	ПлатежноеПоручение.СчетОрганизации.Банк КАК ОрганизацияБанкСсылка,
	|	ПлатежноеПоручение.СчетОрганизации.Банк.КоррСчет КАК ОрганизацияРасчСчет,
	|	ПлатежноеПоручение.СчетОрганизации.Банк.Город КАК ОрганизацияГородБанка,
	|	ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов КАК ОрганизацияБанкДляРасчетов,
	|	ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов.Город КАК ОрганизацияГородРЦБанка,
	|	ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов.Код КАК ОрганизацияБИКРЦБанка,
	|	ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов.КоррСчет КАК ОрганизацияКоррСчетРЦБанка,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ПлатежноеПоручение.Контрагент) = ТИП(Справочник.Сотрудники)
	|			ТОГДА ПлатежноеПоручение.Контрагент.ИНН
	|		ИНАЧЕ ПлатежноеПоручение.Контрагент.ИНН
	|	КОНЕЦ КАК КонтрагентИНН,
	|	ПлатежноеПоручение.Контрагент.КПП КАК КонтрагентКПП,
	|	ПлатежноеПоручение.СчетКонтрагента КАК КонтрагентСчет,
	|	ПлатежноеПоручение.СчетКонтрагента.НомерСчета КАК КонтрагентНомерСчета,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк КАК КонтрагентБанк,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.КоррСчет КАК КонтрагентРасчСчет,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.Город КАК КонтрагентГородБанка,
	|	ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов КАК КонтрагентБанкДляРасчетов,
	|	ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов.Город КАК КонтрагентГородРЦБанка,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.Код КАК КонтрагентБИКБанка,
	|	ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов.Код КАК КонтрагентБИКРЦБанка,
	|	ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов.КоррСчет КАК КонтрагентКоррСчетРЦБанка,
	|	""Платежное поручение"" КАК ВидДокумента,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(255)) КАК ОписаниеОшибок,
	|	0 КАК Готовность,
	|	0 КАК НомерКартинки,
	|	Не ПлатежноеПоручение.СтатусВКлиентБанке = Значение(Перечисление.СтатусыПлатежныхПорученийВКлиентБанке.ВыгруженВКлиентБанк) КАК Выгружать,
	|	ПлатежноеПоручение.УИН КАК Код,
	|	ПлатежноеПоручение.Акцептован КАК Акцептован,
	|	ПлатежноеПоручение.СтатусВКлиентБанке КАК СтатусВКлиентБанке,
	|	ПлатежноеПоручение.СчетКонтрагента.саб_Закрыт КАК СтатусСчетаПолучателя,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.сабСтатусБанка КАК СтатусБанкаПолучателя,
	|	ЛОЖЬ КАК СчетПолучателяНенадежен,
	|	1 КАК КоличествоПлатежей,
	|	ПлатежноеПоручение.СчетОрганизации КАК БанковскийСчет,
	|	ПлатежноеПоручение.КодВидаДохода КАК КодВидаДохода,
	|	ВЫРАЗИТЬ(""РасходСоСчета"" КАК СТРОКА(255)) КАК ТипДокумента
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Д_ИсточникПП.СрезПоследних(
	|				,
	|				&ОдинОтветственный ИЛИ ОтветственноеЛицо В (&МассивПользователей)
	|					ИЛИ ОтветственноеЛицо В
	|						(ВЫБРАТЬ
	|							ГруппыПользователей.Ссылка КАК Ссылка
	|						ИЗ
	|							Справочник.ГруппыПользователей КАК ГруппыПользователей
	|						ГДЕ
	|							ГруппыПользователей.Состав.Пользователь В (&МассивПользователей)
	|						СГРУППИРОВАТЬ ПО
	|							ГруппыПользователей.Ссылка)) КАК Д_ИсточникППСрезПоследних
	|		ПО ПлатежноеПоручение.СчетОрганизации = Д_ИсточникППСрезПоследних.БанковскиеСчета
	|ГДЕ
	|	ПлатежноеПоручение.Проведен = ИСТИНА
	|	И ВЫБОР
	|			КОГДА ЗНАЧЕНИЕ(Документ.Д_ЗаявкаНаОплату.ПустаяСсылка) В (&РеестрЗаявок)
	|				ТОГДА ПлатежноеПоручение.Дата МЕЖДУ &НачПериода И &КонПериода
	|			ИНАЧЕ (ПлатежноеПоручение.УИДСтроки В
	|					(ВЫБРАТЬ
	|						СтрокиЗаявки.УИДСтроки КАК УИДСтроки
	|					ИЗ
	|						СтрокиЗаявки КАК СтрокиЗаявки) ИЛИ ПлатежноеПоручение.Заявка В(&Заявка))
	|		КОНЕЦ
	|	И НЕ Д_ИсточникППСрезПоследних.ОтветственноеЛицо ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПлатежноеПоручение.Дата,
	|	Документ");
	
		
	МассивОперацийДока1 = Новый Массив;
	МассивОперацийДока1.Добавить(Перечисления.ВидыОперацийПлатежноеПоручение.Оплата);
	МассивОперацийДока1.Добавить(Перечисления.ВидыОперацийПлатежноеПоручение.ОплатаВНХ);
	МассивОперацийДока1.Добавить(Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога);
	МассивОперацийДока1.Добавить(Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеСотруднику);
	МассивОперацийДока1.Добавить(Перечисления.ВидыОперацийПлатежноеПоручение.СнятиеНаличных);
	
	Для каждого ТекСтрока Из Перечисления.ВидыОперацийСписаниеДенежныхСредств Цикл
		МассивОперацийДока1.Добавить(ТекСтрока);
	КонецЦикла; 
	
	//Запрос.УстановитьПараметр("Организация", Организация);                       
	//Запрос.УстановитьПараметр("Банк", Банк);
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(Объект.НачПериода));
	Запрос.УстановитьПараметр("КонПериода", КонецДня(Объект.КонПериода));
	Запрос.УстановитьПараметр("РеестрЗаявок", РеестрЗаявок);
	Запрос.УстановитьПараметр("Заявка", РеестрЗаявок.ЗаявкаБезнал.Выгрузить(,"ЗаявкаНаФинансирование"));
	Запрос.УстановитьПараметр("МассивПользователей", ПараметрыСеанса.ДоступныеПользователи);
	Запрос.УстановитьПараметр("ВидОперации", МассивОперацийДока1);
	
	МассивОтветственных = Новый Массив;
	Если ЗначениеЗаполнено(РеестрЗаявок) Тогда
		Для каждого ТекСтрокаЗаявки Из РеестрЗаявок.ЗаявкаБезнал Цикл
			Если ЗначениеЗаполнено(ТекСтрокаЗаявки.Источник) Тогда
				Ответственный = ТекСтрокаЗаявки.Источник.Ответственный;
				Если МассивОтветственных.Найти(Ответственный) = Неопределено И ЗначениеЗаполнено(Ответственный) Тогда
					МассивОтветственных.Добавить(Ответственный);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ОдинОтветственный", МассивОтветственных.Количество() < 2);
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	ЗаполнитьКоличествоПлатежей(Выгрузка);
	
	СтатусБУОтправлено = Перечисления.СостоянияБанковскихДокументов.Отправлено;
	
	МассивСтрокПоступлений = Новый Массив;
	Для каждого СтрокаДокумента Из Выгрузка Цикл
		ПроверитьНаКорректностьИПустоеЗначениеЭкспорта(СтрокаДокумента);
		СтрокаДокумента.Выгружать = ?(СтрокаДокумента.Акцептован, Ложь, ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок));
		СтрокаДокумента.НазначениеПлатежа = СокрЛП(СтрокаДокумента.НазначениеПлатежа);
		СтрокаДокумента.НомерКартинки = ?(ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок), 0, 1);
		
		//Если СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		//	СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога;		
		//КонецЕсли;
		
		//д1 24.05.16
		СтрокаДокумента.СчетПолучателяНенадежен = сабОбщегоНазначения.СчетНеработающий(СтрокаДокумента.СтатусСчетаПолучателя) ИЛИ сабОбщегоНазначения.БанкНеработающий(СтрокаДокумента.СтатусБанкаПолучателя);
		//д1
		
		Если Выгрузка.Индекс(СтрокаДокумента) < Объект.ВыбВыгрузка.Количество() Тогда
			ТекСтрока = Объект.ВыбВыгрузка[Выгрузка.Индекс(СтрокаДокумента)];
		Иначе
			ТекСтрока = Объект.ВыбВыгрузка.Добавить();		
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТекСтрока, СтрокаДокумента);
		
		РегистрыСведений.СостоянияБанковскихДокументов.УстановитьСостояниеДокумента(
		СтрокаДокумента.Документ, СтатусБУОтправлено);
		
	КонецЦикла;
	
	//удаляем поступления
	//Для каждого ТекУд Из МассивСтрокПоступлений Цикл
	//	Выгрузка.Удалить(ТекУд);
	//КонецЦикла; 
	
	//Объект.ВыбВыгрузка.Загрузить(Выгрузка);
	
	Если Не СтрокаДокумента = Неопределено И Выгрузка.Индекс(СтрокаДокумента) < Объект.ВыбВыгрузка.Количество() - 1 Тогда
		
		МассивЛишних = Новый Массив;
		Для ТекИндекс = Выгрузка.Индекс(СтрокаДокумента) По Объект.ВыбВыгрузка.Количество() - 1 Цикл
			МассивЛишних.Добавить(Объект.ВыбВыгрузка[ТекИндекс]);			
		КонецЦикла; 
		
		Для каждого ТекСтрока Из МассивЛишних Цикл
			Объект.ВыбВыгрузка.Удалить(ТекСтрока);		
		КонецЦикла; 
		
	КонецЕсли;
		
КонецПроцедуры // ЗаполнитьВыгрузка()

&НаСервере
// Процедура заполняет таблицу для выгрузки.
//
Процедура ЗаполнитьВыгрузка()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлатежноеПоручение.Дата КАК Дата,
	|	ПлатежноеПоручение.Номер КАК Номер,
	|	ПлатежноеПоручение.НазначениеПлатежа КАК НазначениеПлатежа,
	|	ПлатежноеПоручение.ВидПлатежа КАК ВидПлатежа,
	|	ПлатежноеПоручение.Ссылка КАК Документ,
	|	ПлатежноеПоручение.ПоказательДаты КАК ПоказательДаты,
	|	ПлатежноеПоручение.ПоказательНомера КАК ПоказательНомера,
	|	ПлатежноеПоручение.ПоказательОснования КАК ПоказательОснования,
	|	ПлатежноеПоручение.ПоказательТипа КАК ПоказательТипа,
	|	ПлатежноеПоручение.ПоказательПериода КАК ПоказательПериода,
	|	ПлатежноеПоручение.СтатусСоставителя КАК СтатусСоставителя,
	|	ПлатежноеПоручение.СуммаДокумента КАК СуммаДокумента,
	|	ПлатежноеПоручение.Контрагент КАК Контрагент,
	|	ПлатежноеПоручение.ВидОперации КАК ВидОперации,
	|	ПлатежноеПоручение.ОчередностьПлатежа КАК ОчередностьПлатежа,
	|	ПлатежноеПоручение.ТекстПлательщика КАК ТекстПлательщика,
	|	ПлатежноеПоручение.ТекстПолучателя КАК ТекстПолучателя,
	|	ПлатежноеПоручение.ИННПлательщика КАК ИННПлательщика,
	|	ПлатежноеПоручение.КПППлательщика КАК КПППлательщика,
	|	ПлатежноеПоручение.ИННПолучателя КАК ИННПолучателя,
	|	ПлатежноеПоручение.КПППолучателя КАК КПППолучателя,
	|	ПлатежноеПоручение.КодБК КАК КодБК,
	|	ПлатежноеПоручение.КодОКАТО КАК КодОКАТО,
	|	ПлатежноеПоручение.Организация.НаименованиеПолное КАК Организация,
	|	ПлатежноеПоручение.Организация.НаименованиеПолное КАК ОрганизацияПеречислениеНалога,
	|	ПлатежноеПоручение.Организация.ИНН КАК ОрганизацияИНН,
	|	ПлатежноеПоручение.Организация.КПП КАК ОрганизацияКПП,
	|	ПлатежноеПоручение.СчетОрганизации КАК ОрганизацияСчет,
	|	ПлатежноеПоручение.СчетОрганизации.НомерСчета КАК ОрганизацияНомерСчета,
	|	ПлатежноеПоручение.СчетОрганизации.Банк.Код КАК ОрганизацияБИКБанка,
	|	ПлатежноеПоручение.СчетОрганизации.Банк КАК ОрганизацияБанк,
	|	ПлатежноеПоручение.СчетОрганизации.Банк.КоррСчет КАК ОрганизацияРасчСчет,
	|	ПлатежноеПоручение.СчетОрганизации.Банк.Город КАК ОрганизацияГородБанка,
	|	ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов КАК ОрганизацияБанкДляРасчетов,
	|	ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов.Город КАК ОрганизацияГородРЦБанка,
	|	ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов.Код КАК ОрганизацияБИКРЦБанка,
	|	ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов.КоррСчет КАК ОрганизацияКоррСчетРЦБанка,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ПлатежноеПоручение.Контрагент) = ТИП(Справочник.ФизическиеЛица) ИЛИ ТИПЗНАЧЕНИЯ(ПлатежноеПоручение.Контрагент) = ТИП(Справочник.Сотрудники)
	|			ТОГДА ПлатежноеПоручение.Контрагент.ИНН
	|		ИНАЧЕ ПлатежноеПоручение.Контрагент.ИНН
	|	КОНЕЦ КАК КонтрагентИНН,
	|	ПлатежноеПоручение.Контрагент.КПП КАК КонтрагентКПП,
	|	ПлатежноеПоручение.СчетКонтрагента КАК КонтрагентСчет,
	|	ПлатежноеПоручение.СчетКонтрагента.НомерСчета КАК КонтрагентНомерСчета,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк КАК КонтрагентБанк,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.КоррСчет КАК КонтрагентРасчСчет,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.Город КАК КонтрагентГородБанка,
	|	ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов КАК КонтрагентБанкДляРасчетов,
	|	ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов.Город КАК КонтрагентГородРЦБанка,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.Код КАК КонтрагентБИКБанка,
	|	ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов.Код КАК КонтрагентБИКРЦБанка,
	|	ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов.КоррСчет КАК КонтрагентКоррСчетРЦБанка,
	|	""Платежное поручение"" КАК ВидДокумента,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(255)) КАК ОписаниеОшибок,
	|	0 КАК Готовность,
	|	0 КАК НомерКартинки,
	|	Не ПлатежноеПоручение.СтатусВКлиентБанке = Значение(Перечисление.СтатусыПлатежныхПорученийВКлиентБанке.ВыгруженВКлиентБанк) КАК Выгружать,
	|	ПлатежноеПоручение.УИН КАК Код,
	|	ПлатежноеПоручение.КодВидаДохода КАК КодВидаДохода
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|ГДЕ
	|	ПлатежноеПоручение.Организация = &Организация
	|	И ПлатежноеПоручение.СчетОрганизации = &БанковскийСчет
	|	И ПлатежноеПоручение.Дата МЕЖДУ &НачПериода И &КонПериода
	|	И ПлатежноеПоручение.ПометкаУдаления = ЛОЖЬ
	|	И ПлатежноеПоручение.Проведен = ИСТИНА
	|	И ПлатежноеПоручение.СчетОрганизации.Предприятие В(&ДоступныеПредприятия)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПлатежноеПоручение.Дата,
	|	Документ");
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("БанковскийСчет", Объект.БанковскийСчет);
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(Объект.НачПериода));
	Запрос.УстановитьПараметр("КонПериода", КонецДня(Объект.КонПериода));
	Запрос.УстановитьПараметр("ДоступныеПредприятия", ПараметрыСеанса.ДоступныеПредприятия);
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаДокумента Из Выгрузка Цикл
		ПроверитьНаКорректностьИПустоеЗначениеЭкспорта(СтрокаДокумента);
		СтрокаДокумента.Выгружать = ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок);
		СтрокаДокумента.НазначениеПлатежа = СокрЛП(СтрокаДокумента.НазначениеПлатежа);
		СтрокаДокумента.НомерКартинки = ?(ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок), 0, 1);
	КонецЦикла;
	
	Объект.Выгрузка.Загрузить(Выгрузка);
	
КонецПроцедуры // ЗаполнитьВыгрузка()

&НаСервере
// Процедура выгружает данные в файл.
//
Функция ВыгрузитьДанныеВФайл(ОбъектСтруктура)
	
	//ПотокВыгрузки = РеквизитФормыВЗначение("Объект").Выгрузить();
	//ОбъектСтруктура.Вставить("Выгрузка", Объект.Выгрузка.Выгрузить());
	ПотокВыгрузки = Выгрузить(ОбъектСтруктура, Объект.Выгрузка.Выгрузить());
	Возврат ПотокВыгрузки;
	
КонецФункции // ВыгрузитьДанныеВФайл()

&НаКлиенте
// Функция сохраняет файл выгрузки.
//
Процедура СохранитьФайлВыгрузки(ПотокВыгрузки)
	
	Попытка
		Если Объект.Кодировка = "DOS" Тогда
			ПотокВыгрузки.Записать(Объект.ФайлВыгрузки, КодировкаТекста.OEM);
		ИначеЕсли Объект.Кодировка = "UTF-8" Тогда
			ПотокВыгрузки.Записать(Объект.ФайлВыгрузки, КодировкаТекста.UTF8);
		//ИначеЕсли Объект.Кодировка = "Авто" Тогда
		//	ПотокВыгрузки.Записать(Объект.ФайлВыгрузки);
		Иначе
			ПотокВыгрузки.Записать(Объект.ФайлВыгрузки, КодировкаТекста.ANSI);
		КонецЕсли;
		
		// Отметим те документы которые успешно выгрузились.
		Для каждого СтрокаСекции Из Объект.Выгрузка Цикл
			Если СтрокаСекции.Готовность = - 2 Тогда
				СтрокаСекции.Готовность = - 1;
			КонецЕсли;
		КонецЦикла;
		
		ТекстСообщения = НСтр("ru = 'Данные успешно выгружены в файл %ФайлВыгрузки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ФайлВыгрузки%", Объект.ФайлВыгрузки);
		ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось записать данные в файл. Возможно, отсутствует каталог. %ФайлВыгрузки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ФайлВыгрузки%", Объект.ФайлВыгрузки);
		ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);
	КонецПопытки
	
КонецПроцедуры // СохранитьФайлВыгрузки()

&НаКлиенте
// Процедура загружает данные из файла.
//
Процедура ЗагрузитьДанныеИзФайла()
	
	ОбъектСтруктура = Новый Структура;
	ОбъектСтруктура.Вставить("Кодировка", Объект.Кодировка);
	ОбъектСтруктура.Вставить("НачПериода", Объект.НачПериода);
	ОбъектСтруктура.Вставить("КонПериода", Объект.КонПериода);
	ОбъектСтруктура.Вставить("Организация", Объект.Организация);
	ОбъектСтруктура.Вставить("БанковскийСчет", Объект.БанковскийСчет);
	ОбъектСтруктура.Вставить("ФайлВыгрузки", Объект.ФайлВыгрузки);
	ОбъектСтруктура.Вставить("ФайлЗагрузки", Объект.ФайлЗагрузки);
	ОбъектСтруктура.Вставить("ДатаГраницыОбработки", Объект.ДатаГраницыОбработки);
	ОбъектСтруктура.Вставить("Программа", Объект.Программа);
	ОбъектСтруктура.Вставить("ИспользоватьГраницуОбработки", Объект.ИспользоватьГраницуОбработки);
	ОбъектСтруктура.Вставить("СтатьяДДСИсходяший", Объект.СтатьяДДСИсходяший);
	ОбъектСтруктура.Вставить("СтатьяДДСВходящий", Объект.СтатьяДДСВходящий);
	ОбъектСтруктура.Вставить("ПроводитьЗагружаемые", Объект.ПроводитьЗагружаемые);
	ОбъектСтруктура.Вставить("ВыбБанк", Объект.ВыбБанк);
	ОбъектСтруктура.Вставить("ВыбОрганизация", Объект.ВыбОрганизация);
	ОбъектСтруктура.Вставить("КаталогВыгрузки", Объект.КаталогВыгрузки);
	ОбъектСтруктура.Вставить("СозданиеНенайденыхЭлементов", Объект.СозданиеНенайденыхЭлементов);
	ОбъектСтруктура.Вставить("СоздаватьБанковскиеВыписки", Объект.СоздаватьБанковскиеВыписки);
	
	ДокументыКИмпорту = ПолучитьСтруктуруТЧЗагрузки();
	НачалоИнтервалаЗагрузки = Дата("00010101");
	КонецИнтервалаЗагрузки  = Дата("00010101");
	Результат = ПолучитьДатуИзСтроки(НачалоИнтервалаЗагрузки, ИмпортЗаголовок.ДатаНачала);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		ТекстСообщения  = НСтр("ru = 'В заголовке файла загрузки неверно указана дата начала интервала! Файл не может быть загружен!'");
		ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Результат = ПолучитьДатуИзСтроки(КонецИнтервалаЗагрузки, ИмпортЗаголовок.ДатаКонца);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		ТекстСообщения = НСтр("ru = 'В заголовке файла импорта неверно указана дата окончания интервала!'");
		ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);
	КонецЕсли;
	
	счСтроки = 0;
	ВремяНачала = ТекущаяДата();
	ЧислоСтрок  = ДокументыКИмпорту.Количество();

	// Загружаем отмеченные секции документов.
	Для каждого СтрокаСекции Из ДокументыКИмпорту Цикл
		
		счСтроки = счСтроки + 1;
		СкоростьЗагрузки = ?(ТекущаяДата() - ВремяНачала = 0, 0, Окр(счСтроки / (ТекущаяДата() - ВремяНачала), 2));
		ОсталосьВремени = Окр((ТекущаяДата() - ВремяНачала) / счСтроки * (ЧислоСтрок - счСтроки) / 60, 2);
		
		Если счСтроки / 100 = Окр(счСтроки / 100, 0) ИЛИ СкоростьЗагрузки < 20 ИЛИ ЧислоСтрок < 100 Тогда
			Состояние("Загрузка..." + " Осталось " + Строка(ОсталосьВремени) + " мин." + " Скорость " + Строка(СкоростьЗагрузки) + " стр/сек",
			счСтроки / ЧислоСтрок * 100, "№ дока: " +  Строка(СтрокаСекции.Номер) +
			" (" + Строка(счСтроки) + "/" + Строка(ЧислоСтрок) + ")" );
		КонецЕсли;
		
		ОбработкаПрерыванияПользователя();
		
		Если Не СтрокаСекции.Загружать Тогда
			Продолжить;		
		КонецЕсли;
		
		ЗагрузитьДанныеИзФайлаНаСервере(СтрокаСекции, ОбъектСтруктура);
		
		СтрокаЗагрузки = Объект.Загрузка[счСтроки - 1];
		ЗаполнитьЗначенияСвойств(СтрокаЗагрузки, СтрокаСекции);
	КонецЦикла;
	
	// Платежные поручения исходящие, отсутствующие в списке загруженным помечаем
	// на удаление.
	СинхронизироватьДокументыПоСчетамНаСервере(ДокументыКИмпорту, "ПлатежноеПоручение", "ПлатежноеПоручение", НачалоИнтервалаЗагрузки, КонецИнтервалаЗагрузки, ОбъектСтруктура);
	
КонецПРоцедуры // ЗагрузитьДанныеИзФайла()

&НаСервере
Функция ПолучитьСтруктуруТЧЗагрузки()

	ДокументыКИмпорту = Объект.Загрузка.Выгрузить(); 
	ДокументыКИмпорту.Индексы.Добавить("Документ");
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ДокументыКИмпорту);	

КонецФункции // ()

&НаСервереБезКонтекста
Процедура ЗагрузитьДанныеИзФайлаНаСервере(СтрокаСекции, ОбъектСтруктура)
	
	//ТекОбъект = РеквизитФормыВЗначение("Объект");
	//ТекОбъект.Загрузить(СтрокаСекции);	
	Загрузить(СтрокаСекции, ОбъектСтруктура);
	
КонецПроцедуры

&НаСервере
Процедура СинхронизироватьДокументыПоСчетамНаСервере(ДокументыКИмпорту, ВидДокументовИсходящих, ВидДокументовВходящих, НачалоИнтервалаЗагрузки, КонецИнтервалаЗагрузки, ОбъектСтруктура)
	
	ТЧКИмпорту = Объект.Загрузка.Выгрузить();
	ТЧКИмпорту.Очистить();
	Для каждого ТекСтрока Из ДокументыКИмпорту Цикл
		НоваяСтрока = ТЧКИмпорту.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);	
	КонецЦикла; 
	
	//ТекОбъект = РеквизитФормыВЗначение("Объект");
	//ТекОбъект.СинхронизироватьДокументыПоСчетам(
	//ТЧКИмпорту,
	//ВидДокументовИсходящих,
	//ВидДокументовВходящих,
	//НачалоИнтервалаЗагрузки,
	//КонецИнтервалаЗагрузки,
	//Объект.ИмпортРасчетныеСчета.Выгрузить()
	//);
	
	СинхронизироватьДокументыПоСчетам(
	ТЧКИмпорту,
	ВидДокументовИсходящих,
	ВидДокументовВходящих,
	НачалоИнтервалаЗагрузки,
	КонецИнтервалаЗагрузки,
	Объект.ИмпортРасчетныеСчета.Выгрузить(),
	ОбъектСтруктура);
	
КонецПроцедуры
 
	
	&НаКлиенте
// Процедура устанавливает флаги.
//
Процедура УстановитьФлаги(Таблица, Поле, ЗначениеФлага)
	
	Для каждого Строка Из Таблица Цикл
		Строка[Поле] = ЗначениеФлага;
	КонецЦикла;
	
КонецПроцедуры // УстановитьФлаги()

&НаСервере
// Функция получает дату из строки.
//
Функция ПолучитьДатуИзСтроки(Приемник, Источник)
	
	Буфер = Источник;
	ПозицияТочки = Найти(Буфер, ".");
	Если ПозицияТочки = 0 Тогда
		Возврат НСтр("ru = 'Неверный формат строки с датой'");
	КонецЕсли;
	ЧислоДаты = Лев(Буфер, ПозицияТочки - 1);
	Буфер = Сред(Буфер, ПозицияТочки + 1);
	ПозицияТочки = Найти(Буфер, ".");
	Если ПозицияТочки = 0 Тогда
		Возврат НСтр("ru = 'Неверный формат строки с датой'");
	КонецЕсли;
	МесяцДаты = Лев(Буфер, ПозицияТочки - 1);
	ГодДаты = Сред(Буфер, ПозицияТочки + 1);
	Если СтрДлина(ГодДаты) = 2 Тогда
		Если Число(ГодДаты) < 50 Тогда
			ГодДаты = "20" + ГодДаты;
		Иначе
			ГодДаты = "19" + ГодДаты ;
		КонецЕсли;
	КонецЕсли;
	Попытка
		Приемник = Дата(Число(ГодДаты), Число(МесяцДаты), Число(ЧислоДаты));
	Исключение
		Возврат НСтр("ru = 'Не удалось преобразовать строку в дату'");
	КонецПопытки;
	
	Возврат Приемник;
	
КонецФункции // ПолучитьДатуИзСтроки()

&НаСервере
// Функция определяет является ли организация плательщиком.
//
Функция ОрганизацияПлательщик(ВидДокумента)
	
	Если ВидДокумента = "Поступление на счет" Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // ОрганизацияПлательщик()

&НаСервере
// Функция находит договор контрагента.
//
Функция НайтиДоговор(ВладелецДоговора, ОрганизацияДоговора, СписокВидовДоговора = Неопределено)
	
	НовыйДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка,
	|	ВЫБОР
	|		КОГДА СправочникВладелец.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК СправочникВладелец
	|		ПО ДоговорыКонтрагентов.Владелец = СправочникВладелец.Ссылка
	|			И ДоговорыКонтрагентов.Ссылка = СправочникВладелец.ДоговорПоУмолчанию
	|ГДЕ
	|	&ТекстФильтра
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.УстановитьПараметр("ВладелецДоговора", ВладелецДоговора);
	Запрос.УстановитьПараметр("ОрганизацияДоговора", ОрганизацияДоговора.Предприятие);
	Запрос.УстановитьПараметр("СписокВидовДоговора", СписокВидовДоговора);
	
	ТекстФильтра = 
	"	ДоговорыКонтрагентов.Владелец = &ВладелецДоговора
	|	И ДоговорыКонтрагентов.Предприятие = &ОрганизацияДоговора
	|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ"
	+ ?(СписокВидовДоговора <> Неопределено, "
	|	И ДоговорыКонтрагентов.ВидДоговора В (&СписокВидовДоговора)", "");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстФильтра", ТекстФильтра);
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	Иначе
		Возврат НСтр("ru = 'Не найден'");
	КонецЕсли;
	
КонецФункции // НайтиДоговор()

&НаСервере
// Функция формирует соответствие загружаемых.
//
Функция СформироватьСоответствиеЗагружаемых()
	
	ИмпортЗагружаемые = СоздатьСоответствиеИзСтроки(
	ВРег("Номер,Дата,Сумма,ВидПлатежа,ВидОплаты,КвитанцияДата,КвитанцияВремя,КвитанцияСодержание,ДатаСписано,ДатаПоступило,"
	+ "ПлательщикСчет,Плательщик,ПлательщикИНН,Плательщик1,ПлательщикРасчСчет,ПлательщикБанк1,ПлательщикБанк2,ПлательщикБИК,ПлательщикКорсчет,Плательщик2,Плательщик3,Плательщик4,"
	+ "ПолучательСчет,Получатель,ПолучательИНН,Получатель1,ПолучательРасчСчет,ПолучательБанк1,ПолучательБанк2,ПолучательБИК,ПолучательКорсчет,Получатель2,Получатель3,Получатель4,"
	+ "СтатусСоставителя,ПлательщикКПП,ПолучательКПП,ПоказательКБК,ОКАТО,ПоказательОснования,КодВидаВалютнойОперации,ПоказательПериода,ПоказательНомера,ПоказательДаты,ПоказательТипа,"
	+ "НазначениеПлатежа,НазначениеПлатежа1,НазначениеПлатежа2,НазначениеПлатежа3,НазначениеПлатежа4,НазначениеПлатежа5,НазначениеПлатежа6,"
	+ "Очередность,СрокПлатежа,Код,КодНазПлатежа,"
	+ "ДатаОтсылкиДок,СрокАкцепта,УсловиеОплаты1,УсловиеОплаты2,УсловиеОплаты3,НомерСчетаПоставщика,ВидАккредитива,"
	+ "ПлатежПоПредст,ДополнУсловия" 
	)
	);
	
	Возврат ИмпортЗагружаемые;
	
КонецФункции // СформироватьСоответствиеЗагружаемых()

&НаСервере
// Процедура формирует соответствие непустых при загрузке.
//
Процедура СформироватьСоответствияНеПустыхПриИмпорте(ИмпортНеПустые, ИмпортНеПустыеПлатежноеПоручение, ИмпортНеПустыеПлатежноеПоручениеБюджет)
	
	ИмпортНеПустыеПлатежноеПоручение = СоздатьСоответствиеИзСтроки(
	"Номер,Дата,Сумма,ПлательщикСчет,ПлательщикИНН,ПолучательСчет,ПолучательИНН"
	);
	
	// По наличию статуса составителя определяется что платеж - налоговый.
	ИмпортНеПустыеПлатежноеПоручениеБюджет = СоздатьСоответствиеИзСтроки(
	"Номер,Дата,Сумма,ПлательщикСчет,ПлательщикИНН,ПолучательСчет,ПолучательИНН,"
	+ "СтатусСоставителя,ПлательщикКПП,ПолучательКПП,ПоказательКБК,ОКАТО,ПоказательОснования,"
	+ "ПоказательПериода,ПоказательНомера,ПоказательДаты,ПоказательТипа"
	);
	
	ИмпортНеПустые = Новый Массив;
	ИмпортНеПустые.Добавить(ИмпортНеПустыеПлатежноеПоручение);
	ИмпортНеПустые.Добавить(ИмпортНеПустыеПлатежноеПоручениеБюджет);
	
КонецПроцедуры // СформироватьСоответствияНеПустыхПриИмпорте()

&НаСервере
// Функция получает строку импорта.
//
Функция ПолучитьСтрокуИмпорта(ИмпортТекущаяСтрока, ИмпортКоличествоСтрок, ИмпортТекстДляРазбора)
	
	Буфер = "";
	Пока ПустаяСтрока(Буфер)
		ИЛИ Лев(Буфер, 2) = "//" Цикл
		Если ИмпортТекущаяСтрока > ИмпортКоличествоСтрок Тогда
			Возврат "";
		КонецЕсли;
		Буфер = СокрЛП(СтрПолучитьСтроку(ИмпортТекстДляРазбора, ИмпортТекущаяСтрока));
		ИмпортТекущаяСтрока = ИмпортТекущаяСтрока + 1;
	КонецЦикла;
	
	Возврат Буфер;
	
КонецФункции // ПолучитьСтрокуИмпорта()

&НаСервере
// Функция разбирает теговую строку.
//
Функция РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение)
	
	ПозицияПрисваивания = Найти(СтрокаРазбора, "=");
	Если ПозицияПрисваивания = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Тег = ВРег(СокрЛП(Лев(СтрокаРазбора, ПозицияПрисваивания - 1)));
	Значение = СокрЛП(Сред(СтрокаРазбора, ПозицияПрисваивания + 1));
	
	Возврат НЕ ПустаяСтрока(Тег);
	
КонецФункции // РазобратьТеговуюСтроку()

// Функция загружает секцию документа
//
&НаСервере
Функция ЗагрузитьСекциюДокумента(СтрокаДокумента, ИмпортТекущаяСтрока, ИмпортКоличествоСтрок, ИмпортТекстДляРазбора, ИмпортЗагружаемые)
	
	СтрокаРазбора = ПолучитьСтрокуИмпорта(ИмпортТекущаяСтрока, ИмпортКоличествоСтрок, ИмпортТекстДляРазбора);
	Пока Лев(Врег(СокрЛП(СтрокаРазбора)), 14) <> "КОНЕЦДОКУМЕНТА" Цикл
		Значение = "";
		Тег = "";
		Если РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение) Тогда
			Если ИмпортЗагружаемые[Тег] = Истина Тогда
				СтрокаДокумента[Тег] = Значение;
			Иначе
				
				// Неправиьный реквизит заголовка.
				ТекстСообщения = НСтр(
				"ru = 'Неверный реквизит платежного документа, строка %Импорт%: %СтрокаРазбора%'"
				);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Импорт%", (ИмпортТекущаяСтрока - 1));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтрокаРазбора%", СтрокаРазбора);
				ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);
				//Возврат Ложь;
				
			КонецЕсли;
		Иначе
			
			// Неправиьный реквизит заголовка.
			ТекстСообщения = НСтр(
			"ru = 'Нарушена структура платежного документа, строка %Импорт%: %СтрокаРазбора%'"
			);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Импорт%", (ИмпортТекущаяСтрока - 1));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтрокаРазбора%", СтрокаРазбора);
			ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);
			Возврат Ложь;
			
		КонецЕсли;
		СтрокаРазбора = ПолучитьСтрокуИмпорта(ИмпортТекущаяСтрока, ИмпортКоличествоСтрок, ИмпортТекстДляРазбора);
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ЗагрузитьСекциюДокумента()

// Функция загружает секции расчетного счета.
//
&НаСервере
Функция ЗагрузитьСекциюРасчСчета(СтрокаРССчета, ИмпортТекущаяСтрока, ИмпортКоличествоСтрок, ИмпортТекстДляРазбора, ТегиРасчетногоСчета)
	
	СтрокаРазбора = ПолучитьСтрокуИмпорта(ИмпортТекущаяСтрока, ИмпортКоличествоСтрок, ИмпортТекстДляРазбора);
	Значение = "";
	Тег = "";
	Пока РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение) Цикл
		Если ТегиРасчетногоСчета[Тег] = Истина Тогда
			СтрокаРССчета[Тег] = Значение;
		Иначе
			// Неправиьный реквизит заголовка.
			ТекстСообщения = НСтр(
			"ru = 'Неверный реквизит в секции описания расчетного счета, строка %Импорт%: %СтрокаРазбора%'"
			);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Импорт%", (ИмпортТекущаяСтрока - 1));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтрокаРазбора%", СтрокаРазбора);
			ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
		СтрокаРазбора = ПолучитьСтрокуИмпорта(ИмпортТекущаяСтрока, ИмпортКоличествоСтрок, ИмпортТекстДляРазбора);
		Значение = "";
		Тег = "";
	КонецЦикла;
	
	Если ВРЕГ(Лев(СокрЛП(СтрокаРазбора), 13)) = "КОНЕЦРАСЧСЧЕТ" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ЗагрузитьСекциюРасчСчета()

&НаСервере
// Функция определяет принадлежность счета организации.
//
Функция СчетПринадлежитОрганизации(НомерСчета)
	
	ЗапросПоСчету = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.Владелец,
	|	БанковскиеСчета.НомерСчета,
	|	БанковскиеСчета.Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Организация
	|	И БанковскиеСчета.НомерСчета = &НомерСчета");
	
	ЗапросПоСчету.УстановитьПараметр("НомерСчета", НомерСчета);
	ЗапросПоСчету.УстановитьПараметр("Организация", Объект.Организация);
	ВыборкаЗапроса = ЗапросПоСчету.Выполнить().Выбрать();
	
	Возврат ВыборкаЗапроса.Следующий();
	
КонецФункции // СчетПринадлежитОрганизации()

&НаСервере
// Процедура проверяет на пустое значение при импорте.
//
Процедура ПроверитьНаПустоеЗначениеИмпорта(СтрокаИмпорта, ИмяСвойства, ПредставлениеСвойства, ИмпортНеПустые)
	
	Если ИмпортНеПустые[0][ИмяСвойства] = Истина Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаИмпорта[ИмяСвойства]) Тогда
			СтрокаЗамечание = НСтр("ru = 'Не заполнено ""%ИмяСвойства%""!'");
			СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ИмяСвойства%", ИмяСвойства);
			ДобавитьЗамечание(СтрокаИмпорта, 3, СтрокаЗамечание);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьНаПустоеЗначениеИмпорта()

&НаСервере
// Функция загружает заголовок файла обмена.
//
Функция ЗагрузитьСтрокуЗаголовка(ТекстСтрокиЗаголовка, ТегиЗаголовка, ИмпортЗаголовок, ИмпортТекущаяСтрока)
	
	Значение = "";
	Тег = "";
	РазобратьТеговуюСтроку(ТекстСтрокиЗаголовка, Тег, Значение);
	Если ТегиЗаголовка[Тег] = Истина Тогда
		ИмпортЗаголовок[Тег] = Значение;
	Иначе
		
		// Неправиьный реквизит заголовка.
		ТекстСообщения = НСтр("ru = 'Неверный реквизит заголовка, строка %Импорт%: %ТекстСтрокиЗаголовка%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Импорт%", (ИмпортТекущаяСтрока - 1));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекстСтрокиЗаголовка%", ТекстСтрокиЗаголовка);
		ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);
		
	КонецЕсли;
	
КонецФункции // ЗагрузитьСтрокуЗаголовка()

// Функция проверяет наличие в строке только цифр.
//
// Параметры
//  СтрокаПроверки - Строка для проверки только цифр
//
// Возвращаемое значение:
//   Булево
//
&НаСервереБезКонтекста
Функция ЕстьНеЦифры(СтрокаПроверки) Экспорт
	
	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		Возврат Истина;
	КонецЕсли;
	СтрокаПроверки = СокрЛП(СтрокаПроверки);
	Длина = СтрДлина(СтрокаПроверки);
	Для Сч = 1 По Длина Цикл
		Позиция = Найти("0123456789", Сред(СтрокаПроверки, Сч, 1));
		Если Позиция = 0 Тогда
			
			СтрокаПроверки = Лев(СтрокаПроверки , сч -1  ) + Прав(СтрокаПроверки ,СтрДлина(СтрокаПроверки)- сч );
			//Возврат Истина;
			
		Иначе 		
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции // ЕстьНеЦифры()

&НаСервере
// Процедура распознает данные в строке документа.
//
Процедура РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, ТЧЗагрузки)
	
	ПустаяДата = Дата("00010101");
	
	// 1) Определим вид платежа – входящий или исходящий.
	ПлатежноеПоручение = ВРег(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")) = "ПЛАТЕЖНОЕПОРУЧЕНИЕ";
	//Исходяший = (СтрокаДокумента.ПлательщикСчет = Объект.ИмпортРасчетныеСчета[0].РасчСчет);
	
	
	СтруктураПоиска = Новый Структура("РасчСчет",СтрокаДокумента.ПлательщикСчет);
	МассивСчетов = Объект.ИмпортРасчетныеСчета.НайтиСтроки(СтруктураПоиска);
	Если МассивСчетов.Количество()>0 И Не ЗначениеЗаполнено(СтрокаДокумента.ДатаПоступило) Тогда 		
		СтрокаДокумента.Исходяший = Истина;
	Иначе
		СтрокаДокумента.Исходяший = Ложь;
		СтруктураПоиска = Новый Структура("РасчСчет",СтрокаДокумента.ПолучательСчет);
		МассивСчетов = Объект.ИмпортРасчетныеСчета.НайтиСтроки(СтруктураПоиска);
	КонецЕсли;

	РасчетныйСчет = Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка();
	Для Каждого ЭлементМассива Из МассивСчетов Цикл
		Если ЗначениеЗаполнено(ЭлементМассива.РасчетныйСчет) Тогда
			РасчетныйСчет = ЭлементМассива.РасчетныйСчет;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	//РасчСчет = ?(Исходяший,СтрокаДокумента.ПлательщикСчет,СтрокаДокумента.ПолучательСчет);


	// 2) Определим вид документа в программе.
	ВидДокумента = ?(СтрокаДокумента.Исходяший, "ПлатежноеПоручение", "ПлатежноеПоручение");
	ИмяДокумента = ?(СтрокаДокумента.Исходяший, "Расход со счета", "Поступление на счет");
	
	//МассивОперацийДока = Новый Массив;
	//
	//Если ИмяДокумента = "Расход со счета" Тогда
	//	МассивОперацийДока.Добавить(Перечисления.ВидыОперацийПлатежноеПоручение.Оплата);
	//	МассивОперацийДока.Добавить(Перечисления.ВидыОперацийПлатежноеПоручение.ОплатаВНХ);
	//	МассивОперацийДока.Добавить(Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога);
	//	МассивОперацийДока.Добавить(Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеСотруднику);
	//Иначе
	//	МассивОперацийДока.Добавить(Перечисления.ВидыОперацийПлатежноеПоручение.Поступление);
	//	МассивОперацийДока.Добавить(Перечисления.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ);
	//	МассивОперацийДока.Добавить(Перечисления.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ);
	//КонецЕсли;
	
	СтрокаДокумента.ИмяДокумента = ИмяДокумента;
	СтрокаДокумента.ВидДокумента = ВидДокумента;
	РеквизитСчета = ?(СтрокаДокумента.Исходяший, "БанковскийСчет", "СчетКонтрагента");
	
	// 3) Найдем ранее загруженный (введенный вручную) документ.
	// Реквизиты для поиска: Вид документа, Дата, Номер, Номер счета.
	
	// Распознаем дату документа.
	ДатаДок = ПустаяДата;
	//+СТ Изменяем дату на дату поступления, если было поступление и на дату списания, если было списание
	Результат = ПолучитьДатуИзСтроки(ДатаДок, ?(ПустаяСтрока(СтрокаДокумента.ДатаСписано), ?(ПустаяСтрока(СтрокаДокумента.ДатаПоступило), СтрокаДокумента.Дата, СтрокаДокумента.ДатаПоступило), СтрокаДокумента.ДатаСписано));
	Если ЗначениеЗаполнено(Результат) Тогда
		СтрокаДокумента.ДатаДок = Результат;
		//Если СтрокаДокумента.ИмяДокумента = "Расход со счета" Тогда
			Если Не ЕстьНеЦифры(СтрокаДокумента.Номер) Тогда
				Попытка
					НомерДок = Число(Прав(СтрокаДокумента.Номер, 3));
					СтрокаДокумента.НомерДляПоискаДок = Формат(НомерДок, "ЧЦ=3; ЧН=");
					ВсеРеквизитыПоискаЕсть = Истина;
				Исключение
					НомерДок = Число(Прав(СтрокаДокумента.Номер, 2));
					СтрокаДокумента.НомерДляПоискаДок = Формат(НомерДок,"ЧЦ=3; ЧС=0; ЧН=; ЧВН=");
					ВсеРеквизитыПоискаЕсть = Истина;
				КонецПопытки;
			Иначе
				СтрокаЗамечание = НСтр("ru = 'Указан неправильный номер документа(%Номер%)!'");
				СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%Номер%", СтрокаДокумента.Номер);
				ДобавитьЗамечание(СтрокаДокумента, 4, СтрокаЗамечание);
				ВсеРеквизитыПоискаЕсть = Ложь;
			КонецЕсли;
			РеквизитДаты = "Дата";
			РеквизитНомера = "Номер";
		//Иначе // ПоступлениеНаСчет.
		//	ЕстьНеЦифры(СтрокаДокумента.Номер);
		//	НомерДляПоискаДок = СтрокаДокумента.Номер;
		//	РеквизитДаты = "ДатаВходящегоДокумента";
		//	РеквизитНомера = "НомерВходящегоДокумента";
		//	ВсеРеквизитыПоискаЕсть = Истина;
		//КонецЕсли;
	КонецЕсли;
	
	СтрокаДокумента.НомерДок = СтрокаДокумента.Номер;
	
	
	
	// 4) Определяем вид операции документа.
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.ВидОперации) Тогда
		Если СтрокаДокумента.Исходяший Тогда
			Если ЗначениеЗаполнено(СтрокаДокумента.ПоказательКБК) Тогда//ЗначениеЗаполнено(СтрокаДокумента.СтатусСоставителя) Тогда // перечисление налога 
				ВидОперацииДокумента = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога;				
			ИначеЕсли Справочники.БанковскиеСчетаОрганизаций.НайтиПоРеквизиту("НомерСчета", СтрокаДокумента.ПолучательСчет).Владелец = Объект.ИмпортРасчетныеСчета[0].РасчетныйСчет.Владелец Тогда // перевод на другой счет
				//ВидОперацииДокумента = Перечисления.ВидыОперацийРасходСоСчета.Прочее;
				ВидОперацииДокумента = Перечисления.ВидыОперацийПлатежноеПоручение.Оплата;
			Иначе // оплата поставщику
				ВидОперацииДокумента = Перечисления.ВидыОперацийПлатежноеПоручение.Оплата;
			КонецЕсли; 
		Иначе
			ВидОперацииДокумента = Перечисления.ВидыОперацийПлатежноеПоручение.Оплата;
		КонецЕсли;
		СтрокаДокумента.ВидОперации = ВидОперацииДокумента;
	Иначе
		ВидОперацииДокумента = СтрокаДокумента.ВидОперации;
	КонецЕсли;
	
	// 5) Определяем банковский счет организации
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.БанковскийСчет) Тогда
		//СтрокаДокумента.БанковскийСчет = Объект.ИмпортРасчетныеСчета[0].РасчетныйСчет;
		СтрокаДокумента.БанковскийСчет = РасчетныйСчет;
	КонецЕсли;
	
	// 6) Определяем банковский счет контрагента
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) Тогда
		ЗапросПоискаСчета = Новый Запрос;
		
		Если ОрганизацияПлательщик(ИмяДокумента) Тогда
			СчетКонтрагента = СтрокаДокумента.ПолучательСчет;
			ИННКонтрагента = СтрокаДокумента.ПолучательИНН;
			КППКонтрагента = СтрокаДокумента.ПолучательКПП;
			
			Если ЗначениеЗаполнено(СтрокаДокумента.Получатель1) Тогда
				ИмяКонтрагента = СтрокаДокумента.Получатель1;
			Иначе
				ИмяКонтрагента = СтрокаДокумента.Получатель;
			КонецЕсли;
			
			ЗапросПоискаСчета.УстановитьПараметр("НомерСчета", СтрокаДокумента.ПолучательСчет);
		Иначе
			ЗапросПоискаСчета.УстановитьПараметр("НомерСчета", СтрокаДокумента.ПлательщикСчет);
			СчетКонтрагента = СтрокаДокумента.ПлательщикСчет;
			ИННКонтрагента = СтрокаДокумента.ПлательщикИНН;
			КППКонтрагента = СтрокаДокумента.ПлательщикКПП;
			
			Если СтрокаДокумента.Плательщик1 <> "" Тогда
				ИмяКонтрагента = СтрокаДокумента.Плательщик1;
			Иначе
				ИмяКонтрагента = СтрокаДокумента.Плательщик;
			КонецЕсли;
			
		КонецЕсли;
		
		ЗапросПоискаСчета.УстановитьПараметр("ИННКонтрагента", ИННКонтрагента);
		ЗапросПоискаСчета.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БанковскиеСчетаОрганизаций.Владелец КАК Владелец,
		|	БанковскиеСчетаОрганизаций.Ссылка КАК Ссылка,
		|	БанковскиеСчетаОрганизаций.НомерСчета КАК НомерСчета
		|ИЗ
		|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
		|ГДЕ
		|	БанковскиеСчетаОрганизаций.Владелец.ИНН = &ИННКонтрагента
		|	И БанковскиеСчетаОрганизаций.НомерСчета = &НомерСчета
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	БанковскиеСчета.Владелец,
		|	БанковскиеСчета.Ссылка,
		|	БанковскиеСчета.НомерСчета
		|ИЗ
		|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчета
		|ГДЕ
		|	(БанковскиеСчета.Владелец.ИНН = &ИННКонтрагента
		|			ИЛИ БанковскиеСчета.Владелец.ФизическоеЛицо.ИНН = &ИННКонтрагента)
		|	И БанковскиеСчета.НомерСчета = &НомерСчета";
		
		ВыборкаПоиска = ЗапросПоискаСчета.Выполнить().Выбрать();
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		
		//Если ВыборкаПоиска.Количество() > 1 Тогда
		//	СтрокаЗамечание = НСтр("ru = 'В информационной базе найдено несколько(%Количество%) одинаковых банковских счетов!'");
		//	СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%Количество%", ВыборкаПоиска.Количество());
		//	ДобавитьЗамечание(СтрокаДокумента, 1, СтрокаЗамечание);
		//	СтрокаСчетКонтрагента = НСтр("ru = ' Не найден (%СчетКонтрагента%).'");
		//	СтрокаСчетКонтрагента = СтрЗаменить(СтрокаСчетКонтрагента, "%СчетКонтрагента%", СчетКонтрагента);
		//	СтрокаДокумента.СчетКонтрагента = СтрокаСчетКонтрагента;
		//	
		//	Пока ВыборкаПоиска.Следующий() Цикл
		//		СтрокаБанковскиеСчета = БанковскиеСчета.Добавить();
		//		СтрокаБанковскиеСчета.УИД = СтрокаДокумента.УИД;
		//		СтрокаБанковскиеСчета.Счет = ВыборкаПоиска.Ссылка;
		//	КонецЦикла;	
		//	
		//Иначе
		
		Если ВыборкаПоиска.Следующий() Тогда
			СтрокаДокумента.СчетКонтрагента = ВыборкаПоиска.Ссылка;
			Контрагент = ВыборкаПоиска.Владелец;
		Иначе  
			СтрокаЗамечание = НСтр("ru = 'Не найден счет контрагента (%СчетКонтрагента%).'");
			СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%СчетКонтрагента%", СчетКонтрагента);
			
			Если ИмяДокумента = "Расход со счета" Тогда 
				ДобавитьЗамечание(СтрокаДокумента, 2, СтрокаЗамечание);
			КонецЕсли;
			
			СтрокаСчетКонтрагента = НСтр("ru = ' Не найден (%СчетКонтрагента%).'");
			СтрокаСчетКонтрагента = СтрЗаменить(СтрокаСчетКонтрагента, "%СчетКонтрагента%", СчетКонтрагента);
			СтрокаДокумента.СчетКонтрагента = СтрокаСчетКонтрагента;
		КонецЕсли;
			
		//КонецЕсли;
		
	КонецЕсли;
	
	// 7) Определим контрагента.
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
		Если ЗначениеЗаполнено(Контрагент) Тогда
			СтрокаДокумента.Контрагент = Контрагент;
		ИначеЕсли НЕ ПустаяСтрока(ИННКонтрагента) И Не ВсеЦифрыЯвляютсяНулями(ИННКонтрагента) Тогда
			
			// Сначала Поищем среди ЮрЛиц
			СтрокаДокумента.Контрагент = Контрагент;
			ЗапросПоискаКонтрагента = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Организации.Ссылка,
			|	Организации.ИНН,
			|	Организации.Наименование,
			|	Организации.КПП,
			|	Организации.ПометкаУдаления
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.ИНН = &ЮрЛицоИНН");
			
			ЗапросПоискаКонтрагента.УстановитьПараметр("ЮрЛицоИНН", ИННКонтрагента);
			ВыборкаПоиска = ЗапросПоискаКонтрагента.Выполнить().Выгрузить();
			
			// Ищем контрагента по ИНН, если указан КПП то и по нему.
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ИНН", ИННКонтрагента);
			ПараметрыОтбора.Вставить("ПометкаУдаления", Ложь);
			
			Если НЕ ПустаяСтрока(КППКонтрагента) Тогда
				ПараметрыОтбора.Вставить("КПП", КППКонтрагента);
			КонецЕсли;
			
			НайденныеКонтрагенты = ВыборкаПоиска.НайтиСтроки(ПараметрыОтбора);
			
			// Если не нашли и по ИНН и по КПП то попробуем поискать только по ИНН.
			Если НайденныеКонтрагенты.Количество() = 0
				И НЕ ПустаяСтрока(КППКонтрагента) Тогда
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("ИНН", ИННКонтрагента);
				НайденныеКонтрагенты = ВыборкаПоиска.НайтиСтроки(ПараметрыОтбора);
			КонецЕсли;
			
			Если НайденныеКонтрагенты.Количество() = 1 Тогда
				СтрокаДокумента.Контрагент = НайденныеКонтрагенты[0].Ссылка;		
			КонецЕсли;
			
			Если НайденныеКонтрагенты.Количество() > 1  Тогда
				СтрокаЗамечание = НСтр("ru = 'В информационной базе найдено несколько(%Количество%) ЮрЛиц с одинаковым ИНН %ИННКонтрагента%!'");
				СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%Количество%", НайденныеКонтрагенты.Количество());
				СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ИННКонтрагента%", ИННКонтрагента);
				ДобавитьЗамечание(СтрокаДокумента, 2, СтрокаЗамечание);
				СтрокаКонтрагент = НСтр("ru = ' Не найден (%ИмяКонтрагента%, ИНН %ИННКонтрагента%).'");
				СтрокаКонтрагент = СтрЗаменить(СтрокаКонтрагент, "%ИмяКонтрагента%", ИмяКонтрагента);
				СтрокаКонтрагент = СтрЗаменить(СтрокаКонтрагент, "%ИННКонтрагента%", ИННКонтрагента);
				СтрокаДокумента.Контрагент = СтрокаКонтрагент;
				
				Для Каждого НайденныйКонтрагент Из НайденныеКонтрагенты Цикл
					СтрокаКонтрагенты = Контрагенты.Добавить();
					СтрокаКонтрагенты.УИД = СтрокаДокумента.УИД;
					СтрокаКонтрагенты.Контрагент = НайденныйКонтрагент.Ссылка;
				КонецЦикла;	

			ИначеЕсли НайденныеКонтрагенты.Количество() = 0 Тогда
				// Если не нашли среди ЮрЛиц, ищем среди КОНТРАГЕНТОВ
				СтрокаДокумента.Контрагент = Контрагент;
				ЗапросПоискаКонтрагента = Новый Запрос(
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Контрагенты.Ссылка КАК Ссылка,
				|	Контрагенты.ИНН КАК ИНН,
				|	Контрагенты.Наименование КАК Наименование,
				|	Контрагенты.КПП КАК КПП,
				|	Контрагенты.ПометкаУдаления КАК ПометкаУдаления
				|ИЗ
				|	Справочник.Контрагенты КАК Контрагенты
				|ГДЕ
				|	Контрагенты.ИНН = &КонтрагентИНН
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	Сотрудники.Ссылка,
				|	Сотрудники.ФизическоеЛицо.ИНН,
				|	Сотрудники.Наименование,
				|	"""",
				|	Сотрудники.ПометкаУдаления
				|ИЗ
				|	Справочник.Сотрудники КАК Сотрудники
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ФизическиеЛица.Ссылка,
				|	ФизическиеЛица.ИНН,
				|	ФизическиеЛица.Наименование,
				|	"""",
				|	ФизическиеЛица.ПометкаУдаления
				|ИЗ
				|	Справочник.ФизическиеЛица КАК ФизическиеЛица");
				
				ЗапросПоискаКонтрагента.УстановитьПараметр("КонтрагентИНН", ИННКонтрагента);
				ВыборкаПоиска = ЗапросПоискаКонтрагента.Выполнить().Выгрузить();
				
				// Ищем контрагента по ИНН, если указан КПП то и по нему.
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("ИНН", ИННКонтрагента);
				ПараметрыОтбора.Вставить("ПометкаУдаления", Ложь);
				
				Если НЕ ПустаяСтрока(КППКонтрагента) Тогда
					ПараметрыОтбора.Вставить("КПП", КППКонтрагента);
				КонецЕсли;
				
				НайденныеКонтрагенты = ВыборкаПоиска.НайтиСтроки(ПараметрыОтбора);
				
				// Если не нашли и по ИНН и по КПП то попробуем поискать только по ИНН.
				Если НайденныеКонтрагенты.Количество() = 0
					И НЕ ПустаяСтрока(КППКонтрагента) Тогда
					ПараметрыОтбора = Новый Структура;
					ПараметрыОтбора.Вставить("ИНН", ИННКонтрагента);
					НайденныеКонтрагенты = ВыборкаПоиска.НайтиСтроки(ПараметрыОтбора);
				КонецЕсли;
				
				Если НайденныеКонтрагенты.Количество() Тогда
					СтрокаДокумента.Контрагент = НайденныеКонтрагенты[0].Ссылка;
					//КонецЕсли;
					
					//Если НайденныеКонтрагенты.Количество() > 1 Тогда
					//	СтрокаЗамечание = НСтр("ru = 'В информационной базе найдено несколько(%Количество%) контрагентов с одинаковым ИНН %ИННКонтрагента%!'");
					//	СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%Количество%", НайденныеКонтрагенты.Количество());
					//	СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ИННКонтрагента%", ИННКонтрагента);
					//	ДобавитьЗамечание(СтрокаДокумента, 2, СтрокаЗамечание);
					//	СтрокаКонтрагент = НСтр("ru = ' Не найден (%ИмяКонтрагента%, ИНН %ИННКонтрагента%).'");
					//	СтрокаКонтрагент = СтрЗаменить(СтрокаКонтрагент, "%ИмяКонтрагента%", ИмяКонтрагента);
					//	СтрокаКонтрагент = СтрЗаменить(СтрокаКонтрагент, "%ИННКонтрагента%", ИННКонтрагента);
					//	СтрокаДокумента.Контрагент = СтрокаКонтрагент;
					//	
					//	Для Каждого НайденныйКонтрагент Из НайденныеКонтрагенты Цикл
					//		СтрокаКонтрагенты = Контрагенты.Добавить();
					//		СтрокаКонтрагенты.УИД = СтрокаДокумента.УИД;
					//		СтрокаКонтрагенты.Контрагент = НайденныйКонтрагент.Ссылка;
					//	КонецЦикла;	
					//	
					//ИначеЕсли НайденныеКонтрагенты.Количество() = 0 Тогда
				Иначе  
					СтрокаЗамечание = НСтр("ru = 'Не найден контрагент (%ИмяКонтрагента%, ИНН %ИННКонтрагента%).'");
					СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ИмяКонтрагента%", ИмяКонтрагента);
					СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ИННКонтрагента%", ИННКонтрагента);
					ДобавитьЗамечание(СтрокаДокумента, 2, СтрокаЗамечание);
					СтрокаКонтрагент = НСтр("ru = ' Не найден (%ИмяКонтрагента%, ИНН %ИННКонтрагента%).'");
					СтрокаКонтрагент = СтрЗаменить(СтрокаКонтрагент, "%ИмяКонтрагента%", ИмяКонтрагента);
					СтрокаКонтрагент = СтрЗаменить(СтрокаКонтрагент, "%ИННКонтрагента%", ИННКонтрагента);
					СтрокаДокумента.Контрагент = СтрокаКонтрагент;
				КонецЕсли;			
				
			КонецЕсли;   
			
		Иначе
			СтрокаЗамечание =  НСтр("ru = 'Не указан ИНН контрагента. '");
			ДобавитьЗамечание(СтрокаДокумента, 2, СтрокаЗамечание);
			СтрокаКонтрагент = НСтр("ru = ' Не найден (%ИмяКонтрагента%, не указан ИНН).'");
			СтрокаКонтрагент = СтрЗаменить(СтрокаКонтрагент, "%ИмяКонтрагента%", ИмяКонтрагента);
			СтрокаДокумента.Контрагент = СтрокаКонтрагент;
			СтрокаДокумента.ОшибкаКритическая = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// 8) Определим договор контрагента
	//Если СтрокаДокумента.ВидОперации <> Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога Тогда
	//	СтрокаДокумента.Договор = НайтиДоговор(СтрокаДокумента.Контрагент, Объект.Организация);
	//	Если СтрокаДокумента.Договор = НСтр("ru = 'Не найден'") Тогда
	//		ДобавитьЗамечание(СтрокаДокумента, 2, НСтр("ru = 'Не найден договор контрагента. '"));
	//	КонецЕсли;
	//КонецЕсли;
	
	// 9) Определим Статью ДДС по умолчанию.
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СтатьяДДС) Тогда
		Если СтрокаДокумента.Исходяший Тогда
			СтрокаДокумента.СтатьяДДС = Объект.СтатьяДДСИсходяший;
		Иначе
			СтрокаДокумента.СтатьяДДС = Объект.СтатьяДДСВходящий;
		КонецЕсли;
	КонецЕсли;
	
	// 10) Определим сумму.
	
	// Преобразуем из строки в число.
	Буфер = СокрЛП(СтрЗаменить(СтрокаДокумента.Сумма, " ", ""));
	
	Если Не ЕстьНеЦифры(СтрЗаменить(СтрЗаменить(СтрЗаменить(Буфер, ".", ""), "-", ""), ",", "")) Тогда
		Сумма = Число(Буфер);
		Если Сумма < 0 Тогда
			Сумма = - Сумма;
		КонецЕсли;
		СтрокаДокумента.СуммаДокумента = Сумма;
		Если СтрокаДокумента.Исходяший Тогда
			СтрокаДокумента.СуммаСписано = Сумма;
		Иначе
			СтрокаДокумента.СуммаПоступило = Сумма;
		КонецЕсли;
	Иначе
		СтрокаЗамечание = НСтр("ru = 'Указана неверная сумма документа(%Буфер%)!'");
		СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%Буфер%", Буфер);
		ДобавитьЗамечание(СтрокаДокумента, 4, СтрокаЗамечание);
	КонецЕсли;
	
	// 11) Определим очередность платежа.
	
	// Преобразуем из строки в число
	Буфер = СокрЛП(СтрокаДокумента.Очередность);
	Если Буфер <> "" И НЕ ЕстьНеЦифры(Буфер) Тогда
		СтрокаДокумента.ОчередностьПлатежа = Число(Буфер);
	Иначе
		СтрокаДокумента.ОчередностьПлатежа = 0;
	КонецЕсли;
	
	// 12) Определим ПоказательДатыДок (для Платежного поручения исхожящего при
	// перечислении налогов).
	
	// Преобразуем в дату из строки, если не пустая
	Если НЕ ПустаяСТрока(СтрокаДокумента.ПоказательДаты) Тогда
		Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.ПоказательДатыДок, СтрокаДокумента.ПоказательДаты);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			СтрокаДокумента.ПоказательДатыДок = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	// 13) ДатаСписано и ДатаПоступило, ДатаПроведения.
	
	// Преобразуем в дату из строки, если не пустая
	Если НЕ ПустаяСТрока(СтрокаДокумента.ДатаСписано) Тогда
		Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.Списано, СтрокаДокумента.ДатаСписано);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			СтрокаДокумента.Списано = ПустаяДата;
		Иначе
			СтрокаДокумента.ДатаПроведения = СтрокаДокумента.Списано;
		КонецЕсли;
	Иначе
		СтрокаДокумента.Списано = ПустаяДата;
	КонецЕсли;
	
	// Преобразуем в дату из строки, если не пустая.
	Если НЕ ПустаяСТрока(СтрокаДокумента.ДатаПоступило) Тогда
		Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.Поступило, СтрокаДокумента.ДатаПоступило);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			СтрокаДокумента.Поступило = ПустаяДата;
		Иначе
			СтрокаДокумента.ДатаПроведения = СтрокаДокумента.Поступило;
		КонецЕсли;
	Иначе
		СтрокаДокумента.Поступило = ПустаяДата;
	КонецЕсли;
	
КонецПроцедуры // РаспознатьДанныеВСтрокеДокумента()

&НаСервере
Процедура ЗаполнитьСозданнымиДокументами(ТЧЗагрузки)

	
	МассивОперацийДока1 = Новый Массив;
	МассивОперацийДока2 = Новый Массив;
	МассивОперацийДока1.Добавить(Перечисления.ВидыОперацийПлатежноеПоручение.Оплата);
	МассивОперацийДока1.Добавить(Перечисления.ВидыОперацийПлатежноеПоручение.ОплатаВНХ);
	МассивОперацийДока1.Добавить(Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога);
	МассивОперацийДока1.Добавить(Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеСотруднику);
	МассивОперацийДока1.Добавить(Перечисления.ВидыОперацийПлатежноеПоручение.СнятиеНаличных);
	МассивОперацийДока2.Добавить(Перечисления.ВидыОперацийПлатежноеПоручение.Поступление);
	МассивОперацийДока2.Добавить(Перечисления.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ);
	МассивОперацийДока2.Добавить(Перечисления.ВидыОперацийПлатежноеПоручение.ПоступлениеОтСотрудника);
	МассивОперацийДока2.Добавить(Перечисления.ВидыОперацийПлатежноеПоручение.ПоступленияПоЭквайрингу);
	
	Для каждого СтрокаДокумента Из ТЧЗагрузки Цикл
		
		СтруктураПоиска = Новый Структура("РасчСчет",СтрокаДокумента.ПлательщикСчет);
		МассивСчетов = Объект.ИмпортРасчетныеСчета.НайтиСтроки(СтруктураПоиска);
		Если МассивСчетов.Количество()>0 И Не ЗначениеЗаполнено(СтрокаДокумента.ДатаПоступило) Тогда 		
			СтрокаДокумента.Исходяший = Истина;
		Иначе
			СтрокаДокумента.Исходяший = Ложь;
			СтруктураПоиска = Новый Структура("РасчСчет",СтрокаДокумента.ПолучательСчет);
			МассивСчетов = Объект.ИмпортРасчетныеСчета.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;
		
		РасчетныйСчет = Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка();
		Для Каждого ЭлементМассива Из МассивСчетов Цикл
			Если ЗначениеЗаполнено(ЭлементМассива.РасчетныйСчет) Тогда
				РасчетныйСчет = ЭлементМассива.РасчетныйСчет;
				Прервать;
			КонецЕсли;	
		КонецЦикла;
		
		ВидДокумента = ?(СтрокаДокумента.Исходяший, "ПлатежноеПоручение", "ПлатежноеПоручение");
		ИмяДокумента = ?(СтрокаДокумента.Исходяший, "Расход со счета", "Поступление на счет");
		Если ИмяДокумента = "Расход со счета" Тогда
			МассивОперацийДока  = МассивОперацийДока1;
		Иначе
			МассивОперацийДока  = МассивОперацийДока2;
		КонецЕсли;
		
		Сумма = Число(СокрЛП(СтрЗаменить(СтрокаДокумента.Сумма, " ", "")));
		// При наличии нескольких предпочтение отдается первому, с совпадающим
		// номером счета.
		ЗапросПоискаДокумента = Новый Запрос;
		ЗапросПоискаДокумента.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПлатежныеДокументы.Ссылка КАК Ссылка,
		|	ПлатежныеДокументы.Проведен КАК Проведен,
		|	ВЫБОР
		|		КОГДА ПлатежныеДокументы.Проведен
		|			ТОГДА 1
		|		КОГДА ПлатежныеДокументы.ПометкаУдаления
		|			ТОГДА 2
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПлатежноеПоручениеПроведен,
		|	ПлатежныеДокументы.Акцептован КАК Акцептован,
		|	ПлатежныеДокументы.Номер КАК Номер,
		|	ПлатежныеДокументы.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
		|	ПлатежныеДокументы.Дата КАК Дата,
		|	ПлатежныеДокументы.Организация КАК Организация,
		|	МАКСИМУМ(ЕСТЬNULL(ВЫБОР
		|				КОГДА УЧ_ДвижениеДС.Проведен
		|					ТОГДА 1
		|				КОГДА УЧ_ДвижениеДС.ПометкаУдаления
		|					ТОГДА 2
		|				ИНАЧЕ 0
		|			КОНЕЦ, 0)) КАК БанковскаяВыпискаПроведен,
		|	МАКСИМУМ(УЧ_ДвижениеДС.Ссылка) КАК БанковскаяВыписка,
		|	ПлатежныеДокументы.НазначениеПлатежа КАК НазначениеПлатежа,
		|	ПлатежныеДокументы.СуммаДокумента КАК СуммаДокумента,
		|	ПлатежныеДокументы.Контрагент КАК Контрагент,
		|	ПлатежныеДокументы.СчетКонтрагента КАК СчетКонтрагента
		|ИЗ
		|	Документ.ПлатежноеПоручение КАК ПлатежныеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_ДвижениеДС КАК УЧ_ДвижениеДС
		|		ПО ПлатежныеДокументы.Ссылка = УЧ_ДвижениеДС.ДокОснование
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ИмяДокумента = ""Расход со счета""
		|				ТОГДА НАЧАЛОПЕРИОДА(ПлатежныеДокументы.Дата, ДЕНЬ) <= &ДатаДок
		|						И НАЧАЛОПЕРИОДА(ПлатежныеДокументы.Дата, ДЕНЬ) >= ДОБАВИТЬКДАТЕ(&ДатаДок, ДЕНЬ, -3)
		|			ИНАЧЕ НАЧАЛОПЕРИОДА(ПлатежныеДокументы.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаДок, ДЕНЬ)
		|		КОНЕЦ
		|	И ПлатежныеДокументы.БанковскийСчет = &БанковскийСчет
		|	И ПлатежныеДокументы.ВидОперации В(&ВидОперацииДока)
		|	И ПлатежныеДокументы.СуммаДокумента = &Сумма
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлатежныеДокументы.Ссылка,
		|	ПлатежныеДокументы.Проведен,
		|	ПлатежныеДокументы.Акцептован,
		|	ПлатежныеДокументы.Номер,
		|	ПлатежныеДокументы.НомерВходящегоДокумента,
		|	ПлатежныеДокументы.Дата,
		|	ПлатежныеДокументы.Организация,
		|	ВЫБОР
		|		КОГДА ПлатежныеДокументы.Проведен
		|			ТОГДА 1
		|		КОГДА ПлатежныеДокументы.ПометкаУдаления
		|			ТОГДА 2
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ПлатежныеДокументы.НазначениеПлатежа,
		|	ПлатежныеДокументы.СуммаДокумента,
		|	ПлатежныеДокументы.Контрагент,
		|	ПлатежныеДокументы.СчетКонтрагента
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
		ЗапросПоискаДокумента.УстановитьПараметр("ДатаДок", СтрокаДокумента.ДатаДок);
		//ЗапросПоискаДокумента.УстановитьПараметр("Организация", Объект.Организация);
		//ЗапросПоискаДокумента.УстановитьПараметр("БанковскийСчет", Объект.ИмпортРасчетныеСчета[0].РасчетныйСчет);
		ЗапросПоискаДокумента.УстановитьПараметр("БанковскийСчет", РасчетныйСчет);
		ЗапросПоискаДокумента.УстановитьПараметр("ВидОперацииДока", МассивОперацийДока);
		ЗапросПоискаДокумента.УстановитьПараметр("Сумма", Сумма);
		ЗапросПоискаДокумента.УстановитьПараметр("ИмяДокумента", ИмяДокумента);
		
		
		//РЗ = ЗапросПоискаДокумента.Выполнить();
		//Если РЗ.Пустой() Тогда
		//	НомерПозиции = СтрНайти(СтрокаДокумента.НазначениеПлатежа,"реестру №"); 			
		//	НомерРеестра = Сред(СтрокаДокумента.НазначениеПлатежа,НомерПозиции+9,3);
		//КонецЕсли;
		
		Результат = ЗапросПоискаДокумента.Выполнить().Выгрузить();//ЗапросПоискаДокумента.Выполнить().Выбрать();
		СчетДляПоискаДок = ?(СтрокаДокумента.Исходяший, СтрокаДокумента.ПолучательСчет, СтрокаДокумента.ПлательщикСчет);
		ДлинаНомера = СтрДлина(СтрокаДокумента.НомерДок);
		КоличествоДок = 0;
		
		//Пока Результат.Следующий() Цикл
		//	ВыборкаНомер = Прав(СокрЛП(Результат.Номер), ДлинаНомера); 
		//	ВыборкаНомерВходящий = Прав(СокрЛП(Результат.НомерВходящегоДокумента), ДлинаНомера);
		//	
		//	Если ВыборкаНомер = НомерДляПоискаДок или ВыборкаНомерВходящий = НомерДляПоискаДок Тогда
		//		Если КоличествоДок = 0 Тогда
		//			ЗаполнитьЗначенияСвойств(СтрокаДокумента, Результат);
		//			СтрокаДокумента.Документ = Результат.Ссылка;
		//			СтрокаДокумента.НомерДок = Результат.Номер;
		//			СтрокаДокумента.ДатаДок = Результат.Дата;
		//		КонецЕсли;
		//		КоличествоДок = КоличествоДок + 1;
		//	КонецЕсли;
		//КонецЦикла;
		
		Для Каждого ТекДок Из Результат Цикл
			ВыборкаНомер = Прав(СокрЛП(ТекДок.Номер), ДлинаНомера); 
			ВыборкаНомерВходящий = Прав(СокрЛП(ТекДок.НомерВходящегоДокумента), ДлинаНомера);
			
			НомерСовпадает = ВыборкаНомер = СтрокаДокумента.НомерДок или ВыборкаНомерВходящий = СтрокаДокумента.НомерДок;
			НазначениеСовпадает = ТекДок.НазначениеПлатежа = СтрокаДокумента.НазначениеПлатежа;
			
			Если НомерСовпадает И НазначениеСовпадает Тогда
				Если КоличествоДок = 0 Тогда
					ЗаполнитьЗначенияСвойств(СтрокаДокумента, ТекДок);
					СтрокаДокумента.Документ = ТекДок.Ссылка;
					//СтрокаДокумента.НомерДок = ТекДок.Номер;
					//СтрокаДокумента.ДатаДок = ТекДок.Дата;
				КонецЕсли;
				КоличествоДок = КоличествоДок + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Документ) Тогда
			Для Каждого ТекДок Из Результат Цикл
				ВыборкаНомер = Прав(СокрЛП(ТекДок.Номер), ДлинаНомера); 
				ВыборкаНомерВходящий = Прав(СокрЛП(ТекДок.НомерВходящегоДокумента), ДлинаНомера);
				
				НомерСовпадает = ВыборкаНомер = СтрокаДокумента.НомерДок или ВыборкаНомерВходящий = СтрокаДокумента.НомерДок;
				
				Если НомерСовпадает И НЕ ТЧЗагрузки.НайтиСтроки(Новый Структура("Документ", ТекДок.Ссылка)).Количество() Тогда
					Если КоличествоДок = 0 Тогда
						ЗаполнитьЗначенияСвойств(СтрокаДокумента, ТекДок);
						СтрокаДокумента.Документ = ТекДок.Ссылка;
						//СтрокаДокумента.НомерДок = ТекДок.Номер;
						//СтрокаДокумента.ДатаДок = ТекДок.Дата;
					КонецЕсли;
					КоличествоДок = КоличествоДок + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		//+Ничуговская 08.05.19
		Если КоличествоДок = 0 И ИмяДокумента = "Расход со счета" Тогда			
			НомерПозиции = СтрНайти(СтрокаДокумента.НазначениеПлатежа,"по реестру №"); 
			Если НомерПозиции <> 0 Тогда 
				//СтрокаПоиска = Сред(СтрокаДокумента.НазначениеПлатежа,НомерПозиции,15);
				СтрокаДляПоиска = Прав(СтрокаДокумента.НазначениеПлатежа, СтрДлина(СтрокаДокумента.НазначениеПлатежа)-НомерПозиции-11); 				
				СтрокаДляПоиска = СтрЗаменить(СтрокаДляПоиска,Символы.ВК," ");
				СтрокаДляПоиска = СтрЗаменить(СтрокаДляПоиска,Символы.ВТаб," ");
				СтрокаДляПоиска = СтрЗаменить(СтрокаДляПоиска,Символы.НПП," ");
				СтрокаДляПоиска = СтрЗаменить(СтрокаДляПоиска,Символы.ПС," ");
				СтрокаДляПоиска = СтрЗаменить(СтрокаДляПоиска,Символы.ПФ," ");
				СтрокаДляПоиска = СтрЗаменить(СтрокаДляПоиска,Символы.Таб," ");
				СтрокаДляПоиска = СокрЛ(СтрокаДляПоиска);
				НомерРеестра = Лев(СтрокаДляПоиска,СтрНайти(СтрокаДляПоиска," "));
				Для Каждого ТекДок Из Результат Цикл
					НП = СтрНайти(ТекДок.НазначениеПлатежа,"по реестру №"); 
					Если НП>0 Тогда
						СтрокаДляПоискаДок = Прав(ТекДок.НазначениеПлатежа, СтрДлина(ТекДок.НазначениеПлатежа)-НП-11);
						СтрокаДляПоискаДок = СтрЗаменить(СтрокаДляПоискаДок,Символы.ВК," ");
						СтрокаДляПоискаДок = СтрЗаменить(СтрокаДляПоискаДок,Символы.ВТаб," ");
						СтрокаДляПоискаДок = СтрЗаменить(СтрокаДляПоискаДок,Символы.НПП," ");
						СтрокаДляПоискаДок = СтрЗаменить(СтрокаДляПоискаДок,Символы.ПС," ");
						СтрокаДляПоискаДок = СтрЗаменить(СтрокаДляПоискаДок,Символы.ПФ," ");
						СтрокаДляПоискаДок = СтрЗаменить(СтрокаДляПоискаДок,Символы.Таб," ");
						СтрокаДляПоискаДок = СокрЛ(СтрокаДляПоискаДок);
						НомерРеестраПП = Лев(СтрокаДляПоискаДок,СтрНайти(СтрокаДляПоискаДок," "));
						Если НомерРеестраПП = НомерРеестра Тогда
							Если КоличествоДок = 0 Тогда
								ЗаполнитьЗначенияСвойств(СтрокаДокумента, ТекДок);
								СтрокаДокумента.Документ = ТекДок.Ссылка;
								//СтрокаДокумента.НомерДок = ТекДок.Номер;
								//СтрокаДокумента.ДатаДок = ТекДок.Дата;
							КонецЕсли;
							КоличествоДок = КоличествоДок + 1;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		//-Ничуговская
		
		//++д1 06.08.19 сопоставление по дате, счету и сумме, если одна платежка, то берем
		Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Документ) Тогда
			КоличествоОдинаковыхПлатежекКонтрагентСумма = 0;
			
			Для Каждого ТекДок Из Результат Цикл
				
				Если ТекДок.СуммаДокумента = СтрокаДокумента.СуммаДокумента И ТекДок.СчетКонтрагента = СтрокаДокумента.СчетКонтрагента И НачалоДня(СтрокаДокумента.ДатаДок) = НачалоДня(ТекДок.Дата) И НЕ ТЧЗагрузки.НайтиСтроки(Новый Структура("Документ", ТекДок.Ссылка)).Количество() Тогда
					КоличествоОдинаковыхПлатежекКонтрагентСумма = КоличествоОдинаковыхПлатежекКонтрагентСумма + 1;
					ЗаполнитьЗначенияСвойств(СтрокаДокумента, ТекДок);
					СтрокаДокумента.Документ = ТекДок.Ссылка;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			//Если КоличествоОдинаковыхПлатежекКонтрагентСумма = 1 Тогда
			//	ЗаполнитьЗначенияСвойств(СтрокаДокумента, ТекДок);
			//	СтрокаДокумента.Документ = ТекДок.Ссылка;
			//	//СтрокаДокумента.НомерДок = ТекДок.Номер;
			//	//СтрокаДокумента.ДатаДок = ТекДок.Дата;
			//КонецЕсли;
		КонецЕсли;
		//--д1

		Если КоличествоДок > 1 Тогда
			СтрокаЗамечание = НСтр("ru = 'В информационной базе найдено несколько(%КоличествоДок%) соответствующих документов!'");
			СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%КоличествоДок%", КоличествоДок);
			ДобавитьЗамечание(СтрокаДокумента, 1, СтрокаЗамечание);
		КонецЕсли;
				
		// Если документ уже есть в ИБ, то берем все данные из него.
		ДокументНайден = ЗначениеЗаполнено(СтрокаДокумента.Документ);
		Если ДокументНайден Тогда
			Документ = СтрокаДокумента.Документ; 
			СтрокаДокумента.ВидОперации = Документ.ВидОперации; 
			//СтрокаДокумента.СтатьяДДС = Документ.Статья; 
			//СтрокаДокумента.БанковскийСчет = Объект.ИмпортРасчетныеСчета[0].РасчетныйСчет;
			СтрокаДокумента.БанковскийСчет = РасчетныйСчет;
			СтрокаДокумента.Контрагент = ?(Документ.Контрагент = Объект.Организация, Документ.Организация,Документ.Контрагент );
			//Если Документ.РасшифровкаПлатежа.Количество() <> 0 Тогда
			//	СтрокаДокумента.Договор = Документ.РасшифровкаПлатежа[0].Договор;
			//	СтрокаДокумента.ПризнакАванса = Документ.РасшифровкаПлатежа[0].ПризнакАванса;
			//	СтрокаДокумента.Заказ = Документ.РасшифровкаПлатежа[0].Заказ;
			//КонецЕсли;	
		КонецЕсли;
		
	КонецЦикла; 

КонецПроцедуры


&НаСервере
// Процедура заполняет документы на импорт.
//
Процедура ЗаполнитьДокументыНаИмпорт(ИмпортТекстДляРазбора)
	
	// Подготавливаем структуры обработки данных.
	ДокументыКИмпорту = Объект.Загрузка.Выгрузить();
	ИмпортЗагружаемые = СформироватьСоответствиеЗагружаемых();
	ИмпортНеПустые = Неопределено;
	ИмпортНеПустыеПлатежноеПоручение = Неопределено;
	ИмпортНеПустыеПлатежноеПоручениеБюджет = Неопределено;
	
	//РасчетныеСчетаКИмпорту = Объект.ИмпортРасчетныеСчета.Выгрузить();
	
	СформироватьСоответствияНеПустыхПриИмпорте(
	ИмпортНеПустые,
	ИмпортНеПустыеПлатежноеПоручение,
	ИмпортНеПустыеПлатежноеПоручениеБюджет
	);
	ТегиРасчетногоСчета = СоздатьСоответствиеИзСтроки(
	ВРег("ДатаНачала,ДатаКонца,РасчСчет,НачальныйОстаток,ВсегоПоступило,ВсегоСписано,КонечныйОстаток,КонецРасчСчет")
	);
	ТегиЗаголовка = СоздатьСоответствиеИзСтроки(
	ВРег("ВерсияФормата,Кодировка,Отправитель,Получатель,ДатаСоздания,ВремяСоздания,ДатаНачала,ДатаКонца")
	);
	СтруктураЗаголовок = Новый Структура(
	ВРег("ВерсияФормата,Кодировка,Отправитель,Получатель,ДатаСоздания,ВремяСоздания,ДатаНачала,ДатаКонца")
	);
	ИмпортЗаголовок = СтруктураЗаголовок;
	ИмпортПризнакОбмена = Ложь;
	НайденКонецФайла = Ложь;
	ИмпортВидыДокументов = Новый Массив;
	Объект.ИмпортРасчетныеСчета.Очистить();
	ДокументыКИмпорту.Очистить();
	//ДокументыКИмпорту.Колонки.Добавить("LineNumber");
	
	// Заполняем первичные структуры данных.
	ИмпортКоличествоСтрок = СтрЧислоСтрок(ИмпортТекстДляРазбора);
	ИмпортТекущаяСтрока = 1;
	Пока ИмпортТекущаяСтрока <= ИмпортКоличествоСтрок Цикл
		Стр = ПолучитьСтрокуИмпорта(ИмпортТекущаяСтрока, ИмпортКоличествоСтрок, ИмпортТекстДляРазбора);
		
		// СЕКЦИЯДОКУМЕНТ.
		Если Лев(ВРег(СокрЛП(Стр)), 14) = "СЕКЦИЯДОКУМЕНТ" Тогда
			Значение = "";
			Тег = "";
			РазобратьТеговуюСтроку(Стр, Тег, Значение);
			Если Тег = "СЕКЦИЯДОКУМЕНТ" Тогда
				НоваяСтрокаДокументов = ДокументыКИмпорту.Добавить();
				НоваяСтрокаДокументов.Операция = Значение;
				Если НЕ ЗагрузитьСекциюДокумента(НоваяСтрокаДокументов, ИмпортТекущаяСтрока, ИмпортКоличествоСтрок, ИмпортТекстДляРазбора, ИмпортЗагружаемые) Тогда
					Возврат;
				КонецЕсли;
			Иначе
				ТекстСообщения = НСтр("ru = 'Нарушена структура файла импорта, строка %Импорт%: %Стр%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Импорт%", (ИмпортТекущаяСтрока - 1));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Стр%", Стр);
				ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);
				Возврат;
			КонецЕсли;
			
			// СЕКЦИЯРАСЧСЧЕТ.
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 14) = "СЕКЦИЯРАСЧСЧЕТ" Тогда
			
			СтрокаРССчетов = Объект.ИмпортРасчетныеСчета.Добавить();
			Если НЕ ЗагрузитьСекциюРасчСчета(СтрокаРССчетов, ИмпортТекущаяСтрока, ИмпортКоличествоСтрок, ИмпортТекстДляРазбора, ТегиРасчетногоСчета) Тогда
				ТекстСообщения = НСтр("ru = 'Нарушена структура файла импорта в секции описания расчетного счета! Строка: %Импорт%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Импорт%", (ИмпортТекущаяСтрока - 1));
				ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);
				Возврат;
			КонецЕсли;
			//Если Объект.БанковскийСчет.НомерСчета <> СтрокаРССчетов.РасчСчет Тогда
			//	РасчетныеСчетаКИмпорту.Удалить(СтрокаРССчетов);
			//КонецЕсли;
			
			// РАСЧСЧЕТ.
		ИначеЕсли Лев(ВРег(СокрЛП(Стр)), 8) = "РАСЧСЧЕТ" Тогда
			
			Значение = "";
			Тег = "";
			РазобратьТеговуюСтроку(Стр, Тег, Значение);
			
			Если Тег = "РАСЧСЧЕТ" Тогда
				//Если СчетПринадлежитОрганизации(Значение) Тогда
				//	Если Объект.БанковскийСчет.НомерСчета = Значение Тогда
				СтрокаРССчетов = Объект.ИмпортРасчетныеСчета.НайтиСтроки(Новый Структура("РасчСчет", Значение));
				Если НЕ СтрокаРССчетов.Количество() Тогда
					СтрокаРССчетов = Объект.ИмпортРасчетныеСчета.Добавить();
					СтрокаРССчетов.РасчСчет = Значение;
					//СтрокаРССчетов.РасчетныйСчет = Справочники.БанковскиеСчетаОрганизаций.НайтиПоРеквизиту("НомерСчета", Значение);
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	БанковскиеСчетаОрганизаций.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
					|ГДЕ
					|	БанковскиеСчетаОрганизаций.НомерСчета = &НомерСчета
					|	И БанковскиеСчетаОрганизаций.ПометкаУдаления = ЛОЖЬ";
					
					Запрос.УстановитьПараметр("НомерСчета", Значение);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					Если ВыборкаДетальныеЗаписи.Следующий() Тогда
						СтрокаРССчетов.РасчетныйСчет = ВыборкаДетальныеЗаписи.Ссылка;
					Иначе
						СтрокаРССчетов.РасчетныйСчет = Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка();
					КонецЕсли; 					
										
				КонецЕсли;
				//	Иначе
				//		ТекстСообщения = НСтр("ru = 'В заголовке файла указан счет (%Значение%) отличный от указанного, расчеты по которому загружаться не будут!'");
				//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Значение%", Значение);
				//		ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);
				//	КонецЕсли;
				//Иначе
				//	ТекстСообщения = НСтр("ru = 'В заголовке файла указан счет, не принадлежащий организации: %Значение%!'");
				//	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Значение%", Значение);
				//	ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);
				//	Возврат;
				//КонецЕсли;
			КонецЕсли;
			
			// ДОКУМЕНТ.
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 8) = "ДОКУМЕНТ" Тогда
			ИмпортВидыДокументов.Добавить(Значение);
			
			// КОНЕЦФАЙЛА.
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 10) = "КОНЕЦФАЙЛА" Тогда
			Если НЕ ИмпортПризнакОбмена Тогда
				ТекстСообщения = НСтр("ru = 'В файле импорта отсутствует признак обмена ""1CClientBankExchange""!'");
				ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);
				Возврат;
			КонецЕсли;
			
			НайденКонецФайла = Истина;
			НомерСтроки = 0;
			
			// Последовательно обрабатываем каждую загруженную строку.
			Для каждого СтрокаДокумента Из ДокументыКИмпорту Цикл
				
				// Распознаем реквизиты.
				// Если в файле находятся выписка пл. документов по нескольким счетам, то
				// распознаем и отображаем только те которые выгружены по указанному
				// банковскому счету.
				//Если СтрокаДокумента.ПлательщикСчет = Объект.БанковскийСчет.НомерСчета
				//	ИЛИ СтрокаДокумента.ПолучательСчет = Объект.БанковскийСчет.НомерСчета Тогда
					СтрокаДокумента.УИД = Строка(Новый УникальныйИдентификатор);
					РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, ДокументыКИмпорту);
					НомерСтроки = НомерСтроки + 1;
					СтрокаДокумента.НомерСтроки = НомерСтроки;
					
					// Для каждого реквизита (= колонка) надо проверить на пустое значение.
					Для каждого КолонкаИмпорта Из ДокументыКИмпорту.Колонки Цикл
						ПроверитьНаПустоеЗначениеИмпорта(
						СтрокаДокумента,
						КолонкаИмпорта.Имя,
						КолонкаИмпорта.Заголовок,
						ИмпортНеПустые
						);
					КонецЦикла;
					
				//Иначе
					
					// Остальные помечаем для последующего удаления.
					//СтрокаДокумента.НомерСтроки = 0;
					
				//КонецЕсли;
			КонецЦикла;
			
			ЗаполнитьСозданнымиДокументами(ДокументыКИмпорту);
			
			// Удалим ненужные строки из таблицы.
			Количество = ДокументыКИмпорту.Количество() - 1;
			Для Сч = 0 по Количество Цикл
				Если ДокументыКИмпорту[Количество - Сч].НомерСтроки = 0 Тогда
					ДокументыКИмпорту.Удалить(Количество - Сч);
				КонецЕсли;
			КонецЦикла;
			
			// 1CCLIENTBANKEXCHANGE.
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 20) = "1CCLIENTBANKEXCHANGE" Тогда
			ИмпортПризнакОбмена = Истина;
		Иначе
			ЗагрузитьСтрокуЗаголовка(
			Стр,
			ТегиЗаголовка,
			ИмпортЗаголовок,
			ИмпортТекущаяСтрока
			);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ НайденКонецФайла Тогда
		Объект.ИмпортРасчетныеСчета.Очистить();
		ДокументыКИмпорту.Очистить();
		ТекстСообщения = НСтр("ru = 'Файл загрузки не соответствует стандарту (не найдена секция КонецФайла)!'");
		ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);
	КонецЕсли;
	
	Для каждого СтрокаДокумента Из ДокументыКИмпорту Цикл
		СтрокаДокумента.Загружать = (ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок) ИЛИ Объект.СозданиеНенайденыхЭлементов) И НЕ СтрокаДокумента.Акцептован И НЕ СтрокаДокумента.ОшибкаКритическая;
		СтрокаДокумента.НазначениеПлатежа = СокрЛП(СтрокаДокумента.НазначениеПлатежа);
		СтрокаДокумента.НомерКартинки = ?(СтрокаДокумента.СуммаПоступило, 28, 29);
	КонецЦикла;
	
	Объект.Загрузка.Очистить();
	Объект.Загрузка.Загрузить(ДокументыКИмпорту);
	
	//Объект.ИмпортРасчетныеСчета.Очистить();
	//Объект.ИмпортРасчетныеСчета.Загрузить(РасчетныеСчетаКИмпорту);
	
КонецПроцедуры // ЗаполнитьДокументыНаИмпорт()

&НаКлиенте
// Функция читает файл.
//
Функция ПрочитатьФайл(Файл)
	
	ФайлЗагр = Новый Файл(Файл);
	Если ФайлЗагр.Существует() = Ложь Тогда
		ТекстСообщения = НСтр("ru = 'Файла %Файл% не существует!'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Файл%", Файл);
		ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	ПотокЧтения = Новый ТекстовыйДокумент();
	Попытка
		ПотокЧтения.Прочитать(Файл);
	Исключение
		ТекстСообщения = НСтр("ru = 'Файл не прочитан.'");
		ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	Если Объект.Кодировка = "DOS" Тогда
		Кодир = КодировкаТекста.OEM;
	ИначеЕсли Объект.Кодировка = "UTF-8" Тогда
		Кодир = КодировкаТекста.UTF8;
	ИначеЕсли Объект.Кодировка = "Авто" Тогда
		Кодир = Неопределено;
	Иначе
		Кодир = КодировкаТекста.ANSI;
	Конецесли;
	ПотокЧтения.Прочитать(Файл,Кодир);
	Если ПотокЧтения.КоличествоСтрок() < 1 Тогда
		ТекстСообщения = НСтр("ru = 'В файл нет данных!'");
		ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	Если СокрЛП(ПотокЧтения.ПолучитьСтроку(1)) <> "1CClientBankExchange" Тогда
		ТекстСообщения = НСтр("ru = 'Указанный файл не является файлом обмена или неверно указана кодировка!'");
		ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаКодировки = ПотокЧтения.ПолучитьСтроку(3);
	Если НЕ СтрНайти(СтрокаКодировки, Объект.Кодировка) Тогда //если неверная кодировка, то ищем верную автоматом
		Если СтрНайти(СтрокаКодировки, "DOS") Тогда
			ПотокЧтения.Прочитать(Файл, КодировкаТекста.OEM);
		ИначеЕсли СтрНайти(СтрокаКодировки, "UTF-8") Тогда
			ПотокЧтения.Прочитать(Файл, КодировкаТекста.UTF8);
		ИначеЕсли СтрНайти(СтрокаКодировки, "Windows") Тогда
			ПотокЧтения.Прочитать(Файл, КодировкаТекста.ANSI);
		КонецЕсли;
	КонецЕсли;	
	
	Возврат ПотокЧтения.ПолучитьТекст();
	
КонецФункции // ПрочитатьФайл()

&НаКлиенте
// Функция читает данные из файла.
//
Процедура ПрочитатьДанныеИзФайла()
	
	// Получаем исходные данные.
	ИмпортТекстДляРазбора = ПрочитатьФайл(Объект.ФайлЗагрузки);
	Если ИмпортТекстДляРазбора = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Файл загрузки не содержит данных!'");
		ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);
		ЗаписатьДатуИВремяЗагрузки();
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДокументыНаИмпорт(ИмпортТекстДляРазбора);
	
КонецПроцедуры // ПрочитатьДанныеИзФайла()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
// Процедура - обработчик события ПриСозданииНаСервере.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = Справочники.Организации;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		Объект.БанковскийСчет = Объект.Организация.ОсновнойБанковскийСчет;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.НачПериода) Тогда
		Объект.НачПериода = ТекущаяДата();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.КонПериода) Тогда
		Объект.КонПериода = ТекущаяДата();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ФайлВыгрузки) Тогда
		Объект.ФайлВыгрузки = "c:\1c_to_kl.txt";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ФайлЗагрузки) Тогда
		Объект.ФайлЗагрузки = "c:\kl_to_1c.txt";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Кодировка) Тогда
		Объект.Кодировка = "Авто";
	КонецЕсли;
	
	Если Параметры.Свойство("РеестрЗаявок") Тогда
		РеестрЗаявок = Параметры.РеестрЗаявок;	
	КонецЕсли;
	
	ЗаполнитьВыгрузка();
	
	ЗагрузитьНастройкиФормы();
	
	ЗаполнитьВыбВыгрузка();
	
КонецПроцедуры // ПриСозданииНаСервере() 

&НаКлиенте
// Процедура - обработчик события ПриЗакрытии.
//
Процедура ПриЗакрытии()
	
	//СохранитьНастройкиФормы();
	
КонецПроцедуры // ПриЗакрытии()

&НаСервере
Процедура СформироватьТаблицу()
	ФирмыСчета2 = Объект.ВыбВыгрузка.Выгрузить(,"ОрганизацияБанкСсылка,ОрганизацияСсылка,ОрганизацияСчет");
	ФирмыСчета2.Свернуть("ОрганизацияБанкСсылка,ОрганизацияСсылка,ОрганизацияСчет",);
	ФирмыСчета.Загрузить(ФирмыСчета2);
КонецПроцедуры

&НаСервере
Процедура СформироватьТаблицу2(Фильтр)
	ТекТаблица = Объект.ВыбВыгрузка.Выгрузить(Фильтр,);
	Объект.Выгрузка.Загрузить(ТекТаблица);
КонецПроцедуры


&НаКлиенте
Процедура ВыгрузитьВыполнитьСервер(СтруктураОтбора, ОбъектСтруктура)
	
	Если СтруктураОтбора = Неопределено Тогда
		СтрокиФирм = ФирмыСчета;	
	Иначе	
		СтрокиФирм = ФирмыСчета.НайтиСтроки(Новый Структура("ОрганизацияСчет", СтруктураОтбора.ОрганизацияСчет));
	КонецЕсли;
	
	Для Каждого ТекОрганизация Из СтрокиФирм Цикл
		ТекФирма = ТекОрганизация.ОрганизацияСсылка;
		ТекСчет =  ТекОрганизация.ОрганизацияСчет;
		ТекБанк =  ТекОрганизация.ОрганизацияБанкСсылка;
		
		Объект.Организация = ТекФирма;
		Объект.БанковскийСчет = ТекСчет;
		ТекБанкСтр = СтрЗаменить(Строка(БюджетныйНаСервере.ВернутьРеквизит(ТекБанк, "Наименование")),"""","");
		ТекБанкСтр = СтрЗаменить(ТекБанкСтр," ","");
		ТекБанкСтр = СтрЗаменить(ТекБанкСтр,".","");
		
		ОбъектСтруктура.БанковскийСчет = ТекСчет;
		ОбъектСтруктура.ВыбОрганизация = ТекФирма;
		ОбъектСтруктура.ВыбБанк = ТекБанк;
		
		ТекФирмаНаим = СтрЗаменить(Строка(ТекФирма), """", "");
		ТекФирмаНаим = СтрЗаменить(ТекФирмаНаим, Символы.НПП,"");
		
		ИмяФайла = ТекФирмаНаим + "_" + ТекБанкСтр + "_" + Прав(Строка(БюджетныйНаСервере.ВернутьРеквизит(ТекСчет, "НомерСчета")),4);
		Объект.ФайлВыгрузки = Объект.КаталогВыгрузки + "\" + ИмяФайла + ".txt";
		Фильтр = Новый Структура("ОрганизацияБанкСсылка,ОрганизацияСсылка,ОрганизацияСчет,Выгружать",ТекБанк,ТекФирма,ТекСчет,Истина);
		СформироватьТаблицу2(Фильтр);
		
		Если Объект.Выгрузка.Количество() > 0 Тогда
			ПотокВыгрузки = ВыгрузитьДанныеВФайл(ОбъектСтруктура);
			
			Попытка
				Если Объект.Кодировка = "DOS" Тогда
					ПотокВыгрузки.Записать(Объект.ФайлВыгрузки, КодировкаТекста.OEM);
				ИначеЕсли Объект.Кодировка = "UTF-8" Тогда
					ПотокВыгрузки.Записать(Объект.ФайлВыгрузки, КодировкаТекста.UTF8);
				//ИначеЕсли Объект.Кодировка = "Авто" Тогда
				//	ПотокВыгрузки.Записать(Объект.ФайлВыгрузки);
				Иначе
					ПотокВыгрузки.Записать(Объект.ФайлВыгрузки, КодировкаТекста.ANSI);
				КонецЕсли;
				
				// Отметим те документы которые успешно выгрузились.
				Для каждого СтрокаСекции Из Объект.Выгрузка Цикл
					Если СтрокаСекции.Готовность = - 2 Тогда
						СтрокаСекции.Готовность = - 1;
					КонецЕсли;
				КонецЦикла;
				
				ТекстСообщения = НСтр("ru = 'Данные успешно выгружены в файл %ФайлВыгрузки%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ФайлВыгрузки%", Объект.ФайлВыгрузки);
				Сообщить(ТекстСообщения);
				
				ИзменитьСтатусПлатежекКБ();
				
			Исключение
				ТекстСообщения = НСтр("ru = 'Не удалось записать данные в файл. Возможно, отсутствует каталог. %ФайлВыгрузки%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ФайлВыгрузки%", Объект.ФайлВыгрузки);
				Сообщить(ТекстСообщения);
			КонецПопытки;
			
		Иначе
			Сообщить("Список документов для выгрузки пуст.
			|Проверьте правильность указанного банковского счета и периода выгрузки.'");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ИзменитьСтатусПлатежекКБ()
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого ТекСтрока Из Объект.Выгрузка Цикл
		
		ПлатежкаОбъект = ТекСтрока.Документ.ПолучитьОбъект();   
		ПлатежкаОбъект.СтатусВКлиентБанке = Перечисления.СтатусыПлатежныхПорученийВКлиентБанке.ВыгруженВКлиентБанк;
		ПлатежкаОбъект.Записать();
		
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаКлиенте
// Процедура - обработчик команды Выгрузить.
//
Процедура ВыгрузитьВыполнить()
	Если  ПроверитьЗаполнениеРеквизитовФормы(Истина) Тогда
		Возврат;
	КонецЕсли;
	 	
	
	//д1 проверка на статусы счетов
	НенадежныеОплаты = Новый Массив;
	Для каждого ТекСтрока Из Объект.ВыбВыгрузка Цикл
		Если ТекСтрока.СчетПолучателяНенадежен Тогда
			НенадежныеОплаты.Добавить(ТекСтрока);	
		КонецЕсли;
	КонецЦикла; 
	Если НенадежныеОплаты.Количество() Тогда
		Если НЕ Вопрос("В списке для выгрузки есть оплаты на ненадежные счета: всего " + Строка(НенадежныеОплаты.Количество()) + ". Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да  Тогда
			Возврат;		
		КонецЕсли;
	КонецЕсли;
	//д1
	
	СформироватьТаблицу();
	
	ОбъектСтруктура = Новый Структура;
	ОбъектСтруктура.Вставить("Кодировка", Объект.Кодировка);
	ОбъектСтруктура.Вставить("НачПериода", Объект.НачПериода);
	ОбъектСтруктура.Вставить("КонПериода", Объект.КонПериода);
	ОбъектСтруктура.Вставить("Организация", Объект.Организация);
	ОбъектСтруктура.Вставить("БанковскийСчет", Объект.БанковскийСчет);
	ОбъектСтруктура.Вставить("ФайлВыгрузки", Объект.ФайлВыгрузки);
	ОбъектСтруктура.Вставить("ФайлЗагрузки", Объект.ФайлЗагрузки);
	ОбъектСтруктура.Вставить("ДатаГраницыОбработки", Объект.ДатаГраницыОбработки);
	ОбъектСтруктура.Вставить("Программа", Объект.Программа);
	ОбъектСтруктура.Вставить("ИспользоватьГраницуОбработки", Объект.ИспользоватьГраницуОбработки);
	ОбъектСтруктура.Вставить("СтатьяДДСИсходяший", Объект.СтатьяДДСИсходяший);
	ОбъектСтруктура.Вставить("СтатьяДДСВходящий", Объект.СтатьяДДСВходящий);
	ОбъектСтруктура.Вставить("ПроводитьЗагружаемые", Объект.ПроводитьЗагружаемые);
	ОбъектСтруктура.Вставить("ВыбБанк", Объект.ВыбБанк);
	ОбъектСтруктура.Вставить("ВыбОрганизация", Объект.ВыбОрганизация);
	ОбъектСтруктура.Вставить("КаталогВыгрузки", Объект.КаталогВыгрузки);
	ОбъектСтруктура.Вставить("СозданиеНенайденыхЭлементов", Объект.СозданиеНенайденыхЭлементов);
	ОбъектСтруктура.Вставить("СоздаватьБанковскиеВыписки", Объект.СоздаватьБанковскиеВыписки);

	ВыгрузитьВыполнитьСервер(Элементы.ВыбВыгрузка.ОтборСтрок, ОбъектСтруктура);
	
	ЗаполнитьВыбВыгрузка();
	
	Сообщить("Выгрузка платежных документов завершена.")
	
КонецПроцедуры // ВыгрузитьВыполнить()

&НаКлиенте
// Процедура - обработчик команды ВыгрузкаОбновить.
//
Процедура ВыгрузкаОбновитьВыполнить()
	
	ЗаполнитьВыбВыгрузка();
	
КонецПроцедуры // ВыгрузкаОбновитьВыполнить()

&НаКлиенте
// Процедура - обработчик команды ВыгрузкаОтметитьВсе.
//
Процедура ВыгрузкаОтметитьВсеВыполнить()
	
	УстановитьФлаги(Объект.ВыбВыгрузка, "Выгружать", Истина);
	
КонецПроцедуры // ВыгрузкаОтметитьВсеВыполнить()

&НаКлиенте
// Процедура - обработчик команды ВыгрузкаСнятьОтметкуУВсех.
//
Процедура ВыгрузкаСнятьОтметкуУВсехВыполнить()
	
	УстановитьФлаги(Объект.ВыбВыгрузка, "Выгружать", Ложь);
	
КонецПроцедуры // ВыгрузкаСнятьОтметкуУВсехВыполнить()

&НаКлиенте
// Процедура - обработчик команды ЗагрузкаОтметитьВсе.
//
Процедура ЗагрузкаОтметитьВсеВыполнить()
	
	УстановитьФлаги(Объект.Загрузка, "Загружать", Истина);
	
КонецПроцедуры // ЗагрузкаОтметитьВсеВыполнить()

&НаКлиенте
// Процедура - обработчик команды ЗагрузкаСнятьОтметкуУВсех.
//
Процедура ЗагрузкаСнятьОтметкуУВсехВыполнить()
	
	УстановитьФлаги(Объект.Загрузка, "Загружать", Ложь);
	
КонецПроцедуры // ЗагрузкаСнятьОтметкуУВсехВыполнить()

&НаКлиенте
// Процедура - обработчик команды ПрочитатьДанныеИзФайла.
//
Процедура ПрочитатьДанныеИзФайлаВыполнить()
	
	Если  ПроверитьЗаполнениеРеквизитовФормы(Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	ПрочитатьДанныеИзФайла();
	
КонецПроцедуры // ПрочитатьДанныеИзФайлаВыполнить()

&НаКлиенте
// Процедура - обработчик команды ЗагрузкаОбновить.
//
Процедура ЗагрузкаОбновитьВыполнить()
	
	Если НЕ ПроверитьЗаполнениеРеквизитовФормы(Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	ПрочитатьДанныеИзФайла();
	
КонецПроцедуры // ЗагрузкаОбновитьВыполнить()

&НаКлиенте
// Процедура - обработчик команды Загрузить.
//
Процедура ЗагрузитьВыполнить()
	
	Если Объект.СозданиеНенайденыхЭлементов Тогда
		СоздатьНенайденныеЭлементы();	
	КонецЕсли;
	
	Если ПроверитьЗаполнениеРеквизитовФормы(Ложь) Тогда
		Возврат;
	КонецЕсли;
	Если Объект.Загрузка.Количество() > 0 Тогда
		ЗагрузитьДанныеИзФайла();
		//ПрочитатьДанныеИзФайла(); // обновим ТЗ.
		ЗаписатьДатуИВремяЗагрузки();
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Загрузка платежных документов завершена.'"));
	Иначе
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Список документов для загрузки пуст.'"));
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьВыполнить()

&НаСервере
Процедура СоздатьНенайденныеЭлементы()
	
	ЕстьНовые = Ложь;
	
	Для каждого ТекСтрока Из Объект.Загрузка Цикл
		Если ТекСтрока.Загружать Тогда
			
			Если ТипЗнч(ТекСтрока.Контрагент) = Тип("Строка") Тогда
				СоздатьНовогоКонтрагента(ТекСтрока);
				ЕстьНовые = Истина;
			КонецЕсли;
			Если ТипЗнч(ТекСтрока.СчетКонтрагента) = Тип("Строка") Тогда
				СоздатьНовыйСчет(ТекСтрока);		
				ЕстьНовые = Истина;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьНовые Тогда
		ЗаполнитьСозданнымиДокументами(Объект.Загрузка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьНовогоКонтрагента(ТекСтрока)
	
	НачатьТранзакцию();
	
	НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
	СтрокаКонтрагент = ?(ТекСтрока.СуммаПоступило, "Плательщик", "Получатель");
	СтрокаКонтрагент1 = ?(ТекСтрока.СуммаПоступило, "Плательщик1", "Получатель1");
	НовыйКонтрагент.Наименование =  ?(ЗначениеЗаполнено(ТекСтрока[СтрокаКонтрагент]), ТекСтрока[СтрокаКонтрагент], ТекСтрока[СтрокаКонтрагент1]);
	НовыйКонтрагент.НаименованиеПолное =  ?(ЗначениеЗаполнено(ТекСтрока[СтрокаКонтрагент1]), ТекСтрока[СтрокаКонтрагент1], ТекСтрока[СтрокаКонтрагент]);
	НовыйКонтрагент.ИНН = ТекСтрока[СтрокаКонтрагент + "ИНН"];
	НовыйКонтрагент.КПП = ТекСтрока[СтрокаКонтрагент + "КПП"];
	Если СтрДлина(ТекСтрока[СтрокаКонтрагент + "ИНН"]) = 12 Тогда 
		НовыйКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
	Иначе
		НовыйКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	КонецЕсли;
	НовыйКонтрагент.Записать();
	Если СтрНайти(СокрЛП(ТекСтрока.СчетКонтрагента),"Не найден") <> 0    Тогда
		Если ТипЗнч(НовыйКонтрагент) = Тип("СправочникСсылка.Организации") Тогда //создаем банковский счет организации
			НовыйБанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.СоздатьЭлемент();	
			НовыйБанковскийСчет.Владелец = НовыйКонтрагент.Ссылка;
			НовыйБанковскийСчет.НомерСчета = ТекСтрока[СтрокаКонтрагент + "РасчСчет"];
			НовыйБанковскийСчет.Наименование = ТекСтрока[СтрокаКонтрагент + "РасчСчет"];
			НовыйБанковскийСчет.ВалютаДенежныхСредств = УЧ_Сервер.НациональнаяВалюта();
			НовыйБанковскийСчет.ВидСчета = Перечисления.ГД_ВидыИсточников.РассчетныйСчет;
			НовыйБанковскийСчет.Предприятие = НовыйКонтрагент.Предприятие;
			СоздатьНовыйБанк(ТекСтрока, НовыйБанковскийСчет, СтрокаКонтрагент);
			НовыйБанковскийСчет.Записать();	
			НовыйКонтрагент.ОсновнойБанковскийСчет = НовыйБанковскийСчет.Ссылка;
		Иначе	
			НовыйБанковскийСчет = Справочники.БанковскиеСчетаКонтрагентов.СоздатьЭлемент();	
			НовыйБанковскийСчет.Владелец = НовыйКонтрагент.Ссылка;
			НовыйБанковскийСчет.НомерСчета = ТекСтрока[СтрокаКонтрагент + "РасчСчет"];
			НовыйБанковскийСчет.Наименование = ТекСтрока[СтрокаКонтрагент + "РасчСчет"];
			НовыйБанковскийСчет.ВалютаДенежныхСредств = УЧ_Сервер.НациональнаяВалюта();
			НовыйБанковскийСчет.ВидСчета = Перечисления.ГД_ВидыИсточников.РассчетныйСчет;
			СоздатьНовыйБанк(ТекСтрока, НовыйБанковскийСчет, СтрокаКонтрагент);
			НовыйБанковскийСчет.Записать();	
			НовыйКонтрагент.ОсновнойБанковскийСчет = НовыйБанковскийСчет.Ссылка;
		КонецЕсли;
	КонецЕсли;
	НовыйКонтрагент.Записать();
	
	ЗафиксироватьТранзакцию();
	
	Для каждого СтрокаДокумента Из Объект.Загрузка Цикл
		Если СтрокаДокумента.Загружать Тогда
			Если ЗначениеЗаполнено(ТекСтрока[СтрокаКонтрагент1]) И ТекСтрока[СтрокаКонтрагент1] = СтрокаДокумента[СтрокаКонтрагент1]
				ИЛИ ЗначениеЗаполнено(ТекСтрока[СтрокаКонтрагент]) И ТекСтрока[СтрокаКонтрагент] = СтрокаДокумента[СтрокаКонтрагент] Тогда
					СтрокаДокумента.СчетКонтрагента = "";
					СтрокаДокумента.Контрагент = "";
					РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, Объект.Загрузка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьНовыйСчет(ТекСтрока)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтрокаКонтрагент = ?(ТекСтрока.СуммаПоступило, "Плательщик", "Получатель");
	НовыйКонтрагент = ТекСтрока.Контрагент;
	
	Если ТипЗнч(НовыйКонтрагент) = Тип("СправочникСсылка.Организации") Тогда //создаем банковский счет организации
		НовыйБанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.СоздатьЭлемент();	
		НовыйБанковскийСчет.Владелец = НовыйКонтрагент.Ссылка;
		НовыйБанковскийСчет.НомерСчета = ТекСтрока[СтрокаКонтрагент + "РасчСчет"];
		Если НЕ ЗначениеЗаполнено(НовыйБанковскийСчет.НомерСчета) Тогда
			НовыйБанковскийСчет.НомерСчета = ТекСтрока[СтрокаКонтрагент + "Счет"];
		КонецЕсли;
		НовыйБанковскийСчет.Наименование = ТекСтрока[СтрокаКонтрагент + "РасчСчет"];
		НовыйБанковскийСчет.ВалютаДенежныхСредств = УЧ_Сервер.НациональнаяВалюта();
		НовыйБанковскийСчет.ВидСчета = Перечисления.ГД_ВидыИсточников.РассчетныйСчет;
		НовыйБанковскийСчет.Предприятие = НовыйКонтрагент.Предприятие;
		СоздатьНовыйБанк(ТекСтрока, НовыйБанковскийСчет, СтрокаКонтрагент);
		НовыйБанковскийСчет.Записать();	
	Иначе
		НовыйБанковскийСчет = Справочники.БанковскиеСчетаКонтрагентов.СоздатьЭлемент();	
		НовыйБанковскийСчет.Владелец = НовыйКонтрагент.Ссылка;
		НовыйБанковскийСчет.НомерСчета = ТекСтрока[СтрокаКонтрагент + "РасчСчет"];
		Если НЕ ЗначениеЗаполнено(НовыйБанковскийСчет.НомерСчета) Тогда
			НовыйБанковскийСчет.НомерСчета = ТекСтрока[СтрокаКонтрагент + "Счет"];
		КонецЕсли;
		НовыйБанковскийСчет.Наименование = НовыйБанковскийСчет.НомерСчета;
		НовыйБанковскийСчет.ВалютаДенежныхСредств = УЧ_Сервер.НациональнаяВалюта();
		НовыйБанковскийСчет.ВидСчета = Перечисления.ГД_ВидыИсточников.РассчетныйСчет;
		СоздатьНовыйБанк(ТекСтрока, НовыйБанковскийСчет, СтрокаКонтрагент);
		НовыйБанковскийСчет.Записать();	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	//НовыйКонтрагент.БанковскийСчетПоУмолчанию = НовыйБанковскийСчет.Ссылка;
	
	Для каждого СтрокаДокумента Из Объект.Загрузка Цикл
		Если ЗначениеЗаполнено(ТекСтрока[СтрокаКонтрагент + "РасчСчет"]) И ТекСтрока[СтрокаКонтрагент + "РасчСчет"] = СтрокаДокумента[СтрокаКонтрагент + "РасчСчет"]
			ИЛИ ЗначениеЗаполнено(ТекСтрока[СтрокаКонтрагент + "Счет"]) И ТекСтрока[СтрокаКонтрагент + "Счет"] = СтрокаДокумента[СтрокаКонтрагент + "Счет"] Тогда
				СтрокаДокумента.СчетКонтрагента = "";
				РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, Объект.Загрузка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьНовыйБанк(ТекСтрока, НовыйСчет, СтрокаКонтрагент)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КлассификаторБанковРФ.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КлассификаторБанковРФ КАК КлассификаторБанковРФ
	|ГДЕ
	|	КлассификаторБанковРФ.Код = &Код";
	
	Запрос.УстановитьПараметр("Код", ТекСтрока.ПолучательБИК);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НовыйСчет.Банк = Выборка.Ссылка;
		Возврат;	
	КонецЦикла;
	
	//создаем банк
	НовыйБанкСпр = Справочники.КлассификаторБанковРФ.СоздатьЭлемент();
	НовыйБанкСпр.Код = ТекСтрока[СтрокаКонтрагент + "БИК"];
	НовыйБанкСпр.Наименование = ТекСтрока.ПолучательБанк2  + " " + ТекСтрока[СтрокаКонтрагент + "Банк1"];
	НовыйБанкСпр.КоррСчет = ТекСтрока[СтрокаКонтрагент + "Корсчет"];
	НовыйБанкСпр.Записать();
	
	НовыйСчет.Банк = НовыйБанкСпр.Ссылка;
	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

&НаКлиенте
// Процедура - обработчик события Открытие поля ввода Организация.
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗаполнитьВыгрузка();
	
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении(Объект.Организация, Объект.БанковскийСчет);
	Объект.БанковскийСчет = СтруктураДанные.БанковскийСчет;
	ЗагрузитьНастройкиФормы();
	
КонецПроцедуры // ОрганизацияПриИзменении()

&НаКлиенте
// Процедура - обработчик события Открытие поля ввода БанковскийСчет.
//
Процедура БанковскийСчетПриИзменении(Элемент)
	
	ЗаполнитьВыгрузка();
	ЗагрузитьНастройкиФормы();
	
КонецПроцедуры // БанковскийСчетПриИзменении()

&НаКлиенте
// Процедура - обработчик события Открытие поля ввода НачПериода.
//
Процедура НачПериодаПриИзменении(Элемент)
	
	ЗаполнитьВыбВыгрузка();
	
КонецПроцедуры // НачПериодаПриИзменении()

&НаКлиенте
// Процедура - обработчик события Открытие поля ввода КонПериода.
//
Процедура КонПериодаПриИзменении(Элемент)
	
	ЗаполнитьВыбВыгрузка();
	
КонецПроцедуры // КонПериодаПриИзменении()

&НаКлиенте
// Процедура - обработчик события Открытие поля ввода ФайлВыгрузки.
//
Процедура ФайлВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФайлДляПросмотра(Объект.ФайлВыгрузки, Объект.Кодировка, НСтр("ru = 'Файл выгрузки'"));
	
КонецПроцедуры // ФайлВыгрузкиОткрытие()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ЧАСТЕЙ

&НаКлиенте
// Процедура - обработчик события Выбор табличной части Выгрузка.
//
Процедура ВыбВыгрузкаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Поле.Имя = "ВыгрузкаВыгружать" Тогда
		Элементы.ВыбВыгрузка.ТекущиеДанные.Выгружать = НЕ (Элементы.ВыбВыгрузка.ТекущиеДанные.Выгружать);		
	ИначеЕсли Поле.Имя = "ВыгрузкаНомерКартинки" Тогда 
		Если ЗначениеЗаполнено(Элементы.ВыбВыгрузка.ТекущиеДанные.ОписаниеОшибок) Тогда
			Предупреждение(Элементы.ВыбВыгрузка.ТекущиеДанные.ОписаниеОшибок);
		Иначе
			Предупреждение(НСтр("ru = 'Документ готов к выгрузке!'"));
		КонецЕсли;
	ИначеЕсли Поле.Имя = "ВыгрузкаНазначениеПлатежа" Тогда
		Предупреждение(Элементы.ВыбВыгрузка.ТекущиеДанные.НазначениеПлатежа);
	Иначе
		ОткрытьФорму("Документ.ПлатежноеПоручение.ФормаОбъекта",
		Новый Структура("Ключ", Элементы.ВыбВыгрузка.ТекущиеДанные.Документ),
		Элементы.ВыбВыгрузка.ТекущиеДанные.Документ
		);
	КонецЕсли;
	
КонецПроцедуры // ВыгрузкаВыбор()

&НаКлиенте
// Процедура - обработчик события Выбор табличной части Выгрузка.
//
Процедура ВыгрузкаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Поле.Имя = "ВыгрузкаВыгружать" Тогда
		Элементы.Выгрузка.ТекущиеДанные.Выгружать = НЕ (Элементы.Выгрузка.ТекущиеДанные.Выгружать);		
	ИначеЕсли Поле.Имя = "ВыгрузкаНомерКартинки" Тогда 
		Если ЗначениеЗаполнено(Элементы.Выгрузка.ТекущиеДанные.ОписаниеОшибок) Тогда
			Предупреждение(Элементы.Выгрузка.ТекущиеДанные.ОписаниеОшибок);
		Иначе
			Предупреждение(НСтр("ru = 'Документ готов к выгрузке!'"));
		КонецЕсли;
	ИначеЕсли Поле.Имя = "ВыгрузкаНазначениеПлатежа" Тогда
		Предупреждение(Элементы.Выгрузка.ТекущиеДанные.НазначениеПлатежа);
	Иначе
		ОткрытьФорму("Документ.ПлатежноеПоручение.ФормаОбъекта",
		Новый Структура("Ключ", Элементы.Выгрузка.ТекущиеДанные.Документ),
		Элементы.Выгрузка.ТекущиеДанные.Документ
		);
	КонецЕсли;
	
КонецПроцедуры // ВыгрузкаВыбор()

&НаКлиенте
// Процедура - обработчик события НачалоВыбора  поля ввода ФайлВыгрузки.
Процедура ФайлВыгрузкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда		
		ТекстСообщения = НСтр(
		"ru='Для данной операции необходимо
		|установить расширение работы с файлами!
		|Установка выполняется в разделе
		|""Сервис и администрирование""/
		|""Настройка сервисных функций"".'"
		);
		Предупреждение(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = Объект.ФайлВыгрузки;
	Фильтр = "Текстовый файл(*.txt)|*.txt";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл'");
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		Объект.ФайлВыгрузки = ДиалогОткрытияФайла.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры // ФайлВыгрузкиНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события НачалоВыбора  поля ввода ФайлЗагрузки
// табличной части Загрузка.
//
Процедура ФайлЗагрузкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда		
		ТекстСообщения = НСтр(
		"ru='Для данной операции необходимо
		|установить расширение работы с файлами!
		|Установка выполняется в разделе
		|""Сервис и администрирование""/
		|""Настройка сервисных функций"".'"
		);
		Предупреждение(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = Объект.ФайлВыгрузки;
	Фильтр = "Текстовый файл(*.txt)|*.txt";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл'");
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		Объект.ФайлЗагрузки = ДиалогОткрытияФайла.ПолноеИмяФайла;
		ПрочитатьДанныеИзФайлаВыполнить();
	КонецЕсли;
	
КонецПроцедуры // ФайлЗагрузкиНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события Открытие поля ввода ФайлЗагрузки
// табличной части Загрузка.
//
Процедура ФайлЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ложь;
	ОткрытьФайлДляПросмотра(Объект.ФайлЗагрузки, Объект.Кодировка, НСтр("ru = 'Файл загрузки'"));
	
КонецПроцедуры // ФайлЗагрузкиОткрытие()

&НаКлиенте
// Процедура - обработчик события Выбор табличной части Загрузка.
//
Процедура ЗагрузкаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ЗагрузкаЗагружать" Тогда
		СтандартнаяОбработка = Ложь;
		Элементы.Загрузка.ТекущиеДанные.Загружать = НЕ (Элементы.Загрузка.ТекущиеДанные.Загружать);
	ИначеЕсли Поле.Имя = "ЗагрузкаНомерКартинки" Тогда 
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(Элементы.Загрузка.ТекущиеДанные.ОписаниеОшибок) Тогда
			Предупреждение(Элементы.Загрузка.ТекущиеДанные.ОписаниеОшибок);
		Иначе
			Предупреждение(НСтр("ru = 'Документ готов к загрузке!'"));
		КонецЕсли;
	ИначеЕсли Поле.Имя = "ЗагрузкаНазначениеПлатежа" Тогда
		СтандартнаяОбработка = Ложь;
		Предупреждение(Элементы.Загрузка.ТекущиеДанные.НазначениеПлатежа);
	ИначеЕсли Поле.Имя = "ЗагрузкаДокумент" И ЗначениеЗаполнено(Элементы.Загрузка.ТекущиеДанные.Документ) Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Документ." + Элементы.Загрузка.ТекущиеДанные.ВидДокумента + ".ФормаОбъекта",
		Новый Структура("Ключ", Элементы.Загрузка.ТекущиеДанные.Документ),
		Элементы.Загрузка.ТекущиеДанные.Документ
		);
	ИначеЕсли Поле.Имя = "ЗагрузкаБанковскаяВыписка" И ЗначениеЗаполнено(Элементы.Загрузка.ТекущиеДанные.БанковскаяВыписка) Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Документ.УЧ_ДвижениеДС.ФормаОбъекта",
		Новый Структура("Ключ", Элементы.Загрузка.ТекущиеДанные.БанковскаяВыписка),
		Элементы.Загрузка.ТекущиеДанные.БанковскаяВыписка
		);      
	КонецЕсли;
	
КонецПроцедуры // ЗагрузкаВыбор()

&НаКлиенте
Процедура ВыгрузкаБанкПриИзменении(Элемент)
	ЗаполнитьВыбВыгрузка();
КонецПроцедуры

&НаКлиенте
Процедура КаталогВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда		
		ТекстСообщения = НСтр(
		"ru='Для данной операции необходимо
		|установить расширение работы с файлами!
		|Установка выполняется в разделе
		|""Сервис и администрирование""/
		|""Настройка сервисных функций"".'"
		);
		ПоказатьПредупреждение(Неопределено, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(Режим);
	ДиалогВыбораКаталога.Каталог = Объект.КаталогВыгрузки;
	ДиалогВыбораКаталога.МножественныйВыбор = Ложь;
	ДиалогВыбораКаталога.Заголовок = НСтр("ru = 'Выберите каталог'");
	Если ДиалогВыбораКаталога.Выбрать() Тогда
		Объект.КаталогВыгрузки = ДиалогВыбораКаталога.Каталог;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Функция проверяет наличие в строке только цифр.
//
// Параметры
//  СтрокаПроверки - Строка для проверки только цифр
//
// Возвращаемое значение:
//   Булево
//
Функция ВсеЦифрыЯвляютсяНулями(СтрокаПроверки) 
	
	Если Не ЗначениеЗаполнено(СтрокаПроверки) Тогда
		Возврат Истина;
	КонецЕсли;
	СтрокаПроверки = СокрЛП(СтрокаПроверки);
	Длина = СтрДлина(СтрокаПроверки);
	Для Сч = 1 По Длина Цикл
		Позиция = Найти("123456789", Сред(СтрокаПроверки, Сч, 1));
		Если Не Позиция = 0 Тогда
		//	СтрокаПроверки = Лев(СтрокаПроверки , сч -1  ) + Прав(СтрокаПроверки ,СтрДлина(СтрокаПроверки)- сч );
		//Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ЕстьНеЦифры()

&НаКлиенте
Процедура ЗагрузкаСчетКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НайденныеСчета = БанковскиеСчета.НайтиСтроки(Новый Структура("УИД", Элементы.Загрузка.ТекущиеДанные.УИД));
	Если НЕ НайденныеСчета.Количество() = 0 Тогда
		СтандартнаяОбработка = Ложь;
		СписокСчетов = Новый СписокЗначений;
		Для Каждого Счет Из НайденныеСчета Цикл
			СписокСчетов.Добавить(Счет.Счет);
		КонецЦикла;	
		ОткрытьФорму("Справочник.БанковскиеСчетаОрганизаций.ФормаВыбора", Новый Структура("Отбор", Новый Структура("Ссылка", СписокСчетов)), Элемент);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаКонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НайденныеКонтрагенты = Контрагенты.НайтиСтроки(Новый Структура("УИД", Элементы.Загрузка.ТекущиеДанные.УИД));
	Если НЕ НайденныеКонтрагенты.Количество() = 0 Тогда
		СтандартнаяОбработка = Ложь;
		СписокКонтрагентов = Новый СписокЗначений;
		Для Каждого Контрагент Из НайденныеКонтрагенты Цикл
			СписокКонтрагентов.Добавить(Контрагент.Контрагент);
		КонецЦикла;
		Если ТипЗнч(Контрагент.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			Форма = ПолучитьФорму("Справочник.Контрагенты.ФормаВыбора", Новый Структура("Отбор", Новый Структура("Ссылка", СписокКонтрагентов)), Элемент);
			Форма.Элементы.Список.Отображение =  ОтображениеТаблицы.Список;
			Форма.Открыть();
		Иначе
			ОткрытьФорму("Справочник.Организации.ФормаВыбора", Новый Структура("Отбор", Новый Структура("Ссылка", СписокКонтрагентов)), Элемент);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоНовые(Команда)
	
	//Элементы.ВыбВыгрузка.ОтборСтрок
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДатуИВремяЗагрузки()
	
	Попытка 
		НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(Объект.БанковскийСчет);
		НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДатаПоследнейЗагрузкиИзКлиентБанка);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		Запись = НаборЗаписей.Добавить();
		Запись.Объект = Объект.БанковскийСчет;
		Запись.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДатаПоследнейЗагрузкиИзКлиентБанка;
		Запись.Значение = ТекущаяДата();
		НаборЗаписей.Записать(Истина);
	Исключение
	КонецПопытки;	
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьКоличествоПлатежей(Выгрузка)
	
	НоваяВыгрузка = Выгрузка.Скопировать();
	
	НоваяВыгрузка.Свернуть("ОрганизацияСсылка, БанковскийСчет, СтатусВКлиентБанке", "КоличествоПлатежей, СуммаДокумента");
	НоваяВыгрузка.Колонки.Добавить("КоличествоВыгружено");
	
	//БанковскиеСчетаВыгрузка.Очистить();
	
	Если НЕ БанковскиеСчетаВыгрузка.Количество() Тогда
		НоваяСтрока = БанковскиеСчетаВыгрузка.Добавить();
		НоваяСтрока.Организация = "Все организации и счета";
	КонецЕсли;
	ВсегоПлатежей = 0;
	ВсегоПлатежейСВыгруженными = 0;
	ВсегоСумма = 0;
	НовыйСтатус = Перечисления.СтатусыПлатежныхПорученийВКлиентБанке.Новый;
	ВыгруженСтатус = Перечисления.СтатусыПлатежныхПорученийВКлиентБанке.ВыгруженВКлиентБанк;
	Для каждого ТекСтрока Из БанковскиеСчетаВыгрузка Цикл
		ТекСтрока.КоличествоПлатежей = 0;
		ТекСтрока.КоличествоВыгружено = 0;
		ТекСтрока.СуммаДокумента = 0;
	КонецЦикла;
	
	Для каждого ТекСтрока Из НоваяВыгрузка Цикл
		НайденныеСтроки = БанковскиеСчетаВыгрузка.НайтиСтроки(Новый Структура("БанковскийСчет", ТекСтрока.БанковскийСчет));
		Если НайденныеСтроки.Количество() Тогда
			НоваяСтрока = НайденныеСтроки[0];
		Иначе
			НоваяСтрока = БанковскиеСчетаВыгрузка.Добавить();
			//ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЕсли;
		Если ТекСтрока.СтатусВКлиентБанке = НовыйСтатус Или Не ЗначениеЗаполнено(ТекСтрока.СтатусВКлиентБанке) Тогда
			НоваяСтрока.КоличествоПлатежей = НоваяСтрока.КоличествоПлатежей + ТекСтрока.КоличествоПлатежей;	
			НоваяСтрока.СуммаДокумента = НоваяСтрока.СуммаДокумента + ТекСтрока.СуммаДокумента;
			ВсегоСумма = ВсегоСумма + ТекСтрока.СуммаДокумента;
			НоваяСтрока.КоличествоВыгружено = НоваяСтрока.КоличествоВыгружено + ТекСтрока.КоличествоПлатежей;		
			ВсегоПлатежей = ВсегоПлатежей + ТекСтрока.КоличествоПлатежей;
			ВсегоПлатежейСВыгруженными = ВсегоПлатежейСВыгруженными + ТекСтрока.КоличествоПлатежей;
		ИначеЕсли ТекСтрока.СтатусВКлиентБанке = ВыгруженСтатус Тогда
			НоваяСтрока.КоличествоВыгружено = НоваяСтрока.КоличествоВыгружено + ТекСтрока.КоличествоПлатежей;		
			ВсегоПлатежейСВыгруженными = ВсегоПлатежейСВыгруженными + ТекСтрока.КоличествоПлатежей;
		КонецЕсли;
		НоваяСтрока.БанковскийСчет = ТекСтрока.БанковскийСчет;
		НоваяСтрока.Организация = ТекСтрока.ОрганизацияСсылка;
	КонецЦикла;
	БанковскиеСчетаВыгрузка[0].КоличествоПлатежей = ВсегоПлатежей;
	БанковскиеСчетаВыгрузка[0].КоличествоВыгружено = ВсегоПлатежейСВыгруженными;
	БанковскиеСчетаВыгрузка[0].СуммаДокумента = ВсегоСумма;
	
	МассивЛишних = Новый Массив;
	Для каждого ТекСтрока Из БанковскиеСчетаВыгрузка Цикл
		Если НЕ НоваяВыгрузка.НайтиСтроки(Новый Структура("БанковскийСчет", ТекСтрока.БанковскийСчет)).Количество() И НЕ ТекСтрока.Организация = "Все организации и счета" Тогда
			МассивЛишних.Добавить(ТекСтрока);		
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого ТекСтрока Из МассивЛишних Цикл
		БанковскиеСчетаВыгрузка.Удалить(ТекСтрока);
	КонецЦикла;
	
	БанковскиеСчетаВыгрузка.Сортировать("Организация");
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскиеСчетаВыгрузкаПриАктивизацииСтроки(Элемент)
	ТекДанные = Элементы.БанковскиеСчетаВыгрузка.ТекущиеДанные;
	Если Не ТекДанные = Неопределено И ТипЗнч(ТекДанные.Организация) = Тип("СправочникСсылка.Организации") Тогда
		Элементы.ВыбВыгрузка.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("ОрганизацияСчет", ТекДанные.БанковскийСчет));
	Иначе
		Элементы.ВыбВыгрузка.ОтборСтрок = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	ЕстьСохраненныеНастройки = Истина;
КонецПроцедуры
 
#Область ПроцедурыОбъекта
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАГРУЗКИ

// Функция проверяет документ для загрузки.
//
&НаСервереБезКонтекста
Функция ПроверитьДокументДляЗагрузки(СтруктураДокумента)
	
	Результат = "";
	
	Если СтруктураДокумента.Готовность > 3 Тогда
		Результат = СтруктураДокумента.ОписаниеОшибок;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПроверитьДокументДляЗагрузки()

// Процедура устанавливает свойство.
//
&НаСервереБезКонтекста
Процедура УстановитьСвойство(Объект, ИмяСвойства, ЗначениеСвойства, ОбязательнаяЗаменаСтарогоЗначения = ложь, ЭтоНовыйДокумент)
	
	Если ЗначениеСвойства <> Неопределено
	   И Объект[ИмяСвойства] <> ЗначениеСвойства Тогда
		Если ЭтоНовыйДокумент
		 ИЛИ (НЕ ЗначениеЗаполнено(Объект[ИмяСвойства])
		 ИЛИ ОбязательнаяЗаменаСтарогоЗначения)
		 ИЛИ ТипЗнч(Объект[ИмяСвойства]) = Тип("Булево")
		 ИЛИ ТипЗнч(Объект[ИмяСвойства]) = Тип("Дата") Тогда
			Объект[ИмяСвойства] = ЗначениеСвойства;
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры // УстановитьСвойство()

// Процедура рассчитывает курс и сумму документа.
//
Процедура РассчитатьКурсИСуммуРасчетов(СтрокаПлатеж, ВалютаРасчетов, ДатаКурса, ОбъектДокумента, ЭтоНовыйДокумент)
	
	СтруктураКурсаРасчетов = ПолучитьКурсВалюты(ВалютаРасчетов, ДатаКурса);
	УстановитьСвойство(
		СтрокаПлатеж,
		"Курс",
		СтруктураКурсаРасчетов.Курс,
		,
		ЭтоНовыйДокумент
	);
	УстановитьСвойство(
		СтрокаПлатеж,
		"Кратность",
		СтруктураКурсаРасчетов.Кратность,
		,
		ЭтоНовыйДокумент
	);
	СтруктураКурсаДокумента = ПолучитьКурсВалюты(ОбъектДокумента.ВалютаДенежныхСредств, ДатаКурса);
	
	СуммаРасчетов = ПересчитатьИзВалютыВВалюту(
		СтрокаПлатеж.СуммаПлатежа,
		СтруктураКурсаДокумента.Курс,
		СтруктураКурсаРасчетов.Курс,
		СтруктураКурсаДокумента.Кратность,
		СтруктураКурсаРасчетов.Кратность
	);
	
	УстановитьСвойство(
		СтрокаПлатеж,
		"СуммаРасчетов",
		СуммаРасчетов,
		Истина,
		ЭтоНовыйДокумент
	);
	
КонецПроцедуры // РассчитатьКурсИСуммуРасчетов()

// Функция получает представление объекта.
//
&НаСервереБезКонтекста
Функция ПолучитьПредставлениеОбъекта(Объект)
	
	Если НЕ ПП_Сервер.ЭтоРасходнаяОперация(Объект.ВидОперации) Тогда
		НазваниеОбъекта = НСтр(
			"ru = 'документ ""Поступление на счет"" № %Номер% от %Дата%'"
		);
		НазваниеОбъекта = СтрЗаменить(НазваниеОбъекта, "%Номер%", Строка(СокрЛП(Объект.Номер)));
		НазваниеОбъекта = СтрЗаменить(НазваниеОбъекта, "%Дата%", Строка(Объект.Дата));
	ИначеЕсли ТипЗнч(Объект.Организация) = Тип("СправочникСсылка.Организации") Тогда
		НазваниеОбъекта = НСтр(
			"ru = 'документ ""Расход со счета"" № %Номер% от %Дата%'"
		);
		НазваниеОбъекта = СтрЗаменить(НазваниеОбъекта, "%Номер%", Строка(СокрЛП(Объект.Номер)));
		НазваниеОбъекта = СтрЗаменить(НазваниеОбъекта, "%Дата%", Строка(Объект.Дата));
	Иначе
		НазваниеОбъекта = НСтр("ru = 'объект'");
	КонецЕсли;
	
	Возврат НазваниеОбъекта;
	
КонецФункции // ПолучитьПредставлениеОбъекта()
               
// Процедура заполняет реквизиты документа РасходСоСчета.
//
&НаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыРасходСоСчета(ОбъектДокумента, ИсходныеДанные, ЭтоНовыйДокумент, ОбъектСтруктура)
	
	// Заполнение шапки документа.
	
	УстановитьСвойство(
		ОбъектДокумента,
		"НомерВходящегоДокумента",
		ИсходныеДанные.НомерДок,
		,
		ЭтоНовыйДокумент
	);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"Дата",
		ИсходныеДанные.ДатаДок,
		,
		ЭтоНовыйДокумент
	);
	
	Если ИсходныеДанные.ИмяДокумента = "Поступление на счет" Тогда
		УстановитьСвойство(
		ОбъектДокумента,
		"ВидОперации",
		?(ТипЗнч(ИсходныеДанные.Контрагент) = Тип("СправочникСсылка.Организации"), Перечисления.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ, Перечисления.ВидыОперацийПлатежноеПоручение.Поступление),
		,
		ЭтоНовыйДокумент
		);
	Иначе
		Если ИсходныеДанные.ВидОперации = "Перечисление налога" Тогда 			
			ВидОперацииДляПодстановкиВДокумент = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога;
		ИначеЕсли ТипЗнч(ИсходныеДанные.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
			ВидОперацииДляПодстановкиВДокумент = Перечисления.ВидыОперацийПлатежноеПоручение.ОплатаВНХ;
		Иначе
			ВидОперацииДляПодстановкиВДокумент = Перечисления.ВидыОперацийПлатежноеПоручение.Оплата;
		КонецЕсли;
		УстановитьСвойство(
		ОбъектДокумента,
		"ВидОперации",
		ВидОперацииДляПодстановкиВДокумент,//?(ТипЗнч(ИсходныеДанные.Контрагент) = Тип("СправочникСсылка.Организации"), Перечисления.ВидыОперацийПлатежноеПоручение.ОплатаВНХ, Перечисления.ВидыОперацийПлатежноеПоручение.Оплата),
		,
		ЭтоНовыйДокумент
		);
	КонецЕсли;
	
	ТекПредприятие = ПП_Сервер.ПолучитьПредприятие(ИсходныеДанные.ДатаДок, ИсходныеДанные.БанковскийСчет);
	ТекПредприятие2 = ПП_Сервер.ПолучитьПредприятие(ИсходныеДанные.ДатаДок, ИсходныеДанные.СчетКонтрагента);
	Если НЕ ПустаяСтрока(ТекПредприятие) Тогда
		Предприятие = ТекПредприятие;
		РеквизитыПредприятия = БюджетныйНаСервере.ВернутьРеквизиты(ТекПредприятие, "ВидДеятельности, УчетПоПодразделениям");
		Если НЕ РеквизитыПредприятия.УчетПоПодразделениям Тогда
			Подразделение = РеквизитыПредприятия.ВидДеятельности;
		КонецЕсли;
	ИначеЕсли НЕ ПустаяСтрока(ТекПредприятие2) Тогда
		Предприятие = ТекПредприятие2;
		Подразделение = БюджетныйНаСервере.ВернутьРеквизит(ТекПредприятие2, "ВидДеятельности");
	Конецесли;
	
	Если Не ЗначениеЗаполнено(ОбъектСтруктура.Организация) Тогда
		Организация = ИсходныеДанные.БанковскийСчет.Владелец;
	Иначе
		Организация = ОбъектСтруктура.Организация;
	КонецЕсли;
	
	УстановитьСвойство(ОбъектДокумента,"Предприятие",Предприятие,,ЭтоНовыйДокумент);
	УстановитьСвойство(ОбъектДокумента,"Подразделение",Подразделение,,ЭтоНовыйДокумент);    		
	УстановитьСвойство(ОбъектДокумента,"Организация", Организация ,,ЭтоНовыйДокумент);  	
	
	ТекстПлательщика = ?(ЗначениеЗаполнено(Организация.ОсновнойБанковскийСчет) И ЗначениеЗаполнено(Организация.ОсновнойБанковскийСчет.ТекстКорреспондента),Организация.ОсновнойБанковскийСчет.ТекстКорреспондента, Организация.НаименованиеПолное);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"ТекстПлательщика",
		ТекстПлательщика,
		,
		ЭтоНовыйДокумент
	);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"ИННПлательщика",
		?(ЗначениеЗаполнено(Организация.ИНН),Организация.ИНН,""),
		,
		ЭтоНовыйДокумент
	);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"КПППлательщика",
		?(ЗначениеЗаполнено(Организация.КПП),Организация.КПП,""),
		,
		ЭтоНовыйДокумент
	);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"БанковскийСчет",
		ИсходныеДанные.БанковскийСчет,
		,
		ЭтоНовыйДокумент
	);
	
	//Если ЗначениеЗаполнено(ИсходныеДанные.БанковскийСчет) Тогда
	//	УстановитьСвойство(
	//		ОбъектДокумента,
	//		"ВалютныйПлатеж",
	//		ИсходныеДанные.БанковскийСчет.ВалютаДенежныхСредств<>УЧ_Сервер.НациональнаяВалюта(),
	//		,
	//		ЭтоНовыйДокумент
	//	);
	//КонецЕсли;
	
	УстановитьСвойство(
		ОбъектДокумента,
		"Контрагент",
		ИсходныеДанные.Контрагент,
		,
		ЭтоНовыйДокумент);
		
	РеквизитыДоговора = сабОперОбщегоНазначения.ПолучитьДоговорКонтрагентаПоУмолчанию(ИсходныеДанные.Контрагент, Организация, ИсходныеДанные.ИмяДокумента = "Поступление на счет",?(ТипЗнч(ИсходныеДанные.БанковскийСчет) = Тип("СправочникСсылка.БанковскиеСчета"), ИсходныеДанные.БанковскийСчет.Предприятие, Неопределено));
	УстановитьСвойство(ОбъектДокумента,"Договор",РеквизитыДоговора.Договор, Истина, ЭтоНовыйДокумент);

		
	Если ТипЗнч(ИсходныеДанные.Контрагент) = ТИп("СправочникСсылка.Контрагенты") ИЛИ ТипЗнч(ИсходныеДанные.Контрагент) = Тип("СправочникСсылка.Организации") Тогда 
		ТекстПолучателя = ?(ЗначениеЗаполнено(ИсходныеДанные.Контрагент.ОсновнойБанковскийСчет) И ЗначениеЗаполнено(ИсходныеДанные.Контрагент.ОсновнойБанковскийСчет.ТекстКорреспондента),ИсходныеДанные.Контрагент.ОсновнойБанковскийСчет.ТекстКорреспондента, ИсходныеДанные.Контрагент.НаименованиеПолное);
		
		УстановитьСвойство(
		ОбъектДокумента,
		"ТекстПолучателя",
		ТекстПолучателя,
		,
		ЭтоНовыйДокумент);
		
		УстановитьСвойство(
		ОбъектДокумента,
		"ИННПолучателя",
		?(ЗначениеЗаполнено(ИсходныеДанные.Контрагент.ИНН),ИсходныеДанные.Контрагент.ИНН,""),
		,
		ЭтоНовыйДокумент);
		
		УстановитьСвойство(
		ОбъектДокумента,
		"КПППолучателя",
		?(ЗначениеЗаполнено(ИсходныеДанные.Контрагент.КПП),ИсходныеДанные.Контрагент.КПП,""),
		,
		ЭтоНовыйДокумент);
	ИначеЕсли ТипЗнч(ИсходныеДанные.Контрагент) = ТИп("СправочникСсылка.Сотрудники") Тогда
		РеквизитыКонтрагента = БюджетныйНаСервере.ВернутьРеквизиты(ИсходныеДанные.Контрагент, "Наименование, ФизическоеЛицо.ИНН");
		ТекстПолучателя = РеквизитыКонтрагента.Наименование;
		
		УстановитьСвойство(
		ОбъектДокумента,
		"ТекстПолучателя",
		ТекстПолучателя,
		,
		ЭтоНовыйДокумент);
		
		УстановитьСвойство(
		ОбъектДокумента,
		"ИННПолучателя",
		РеквизитыКонтрагента.ФизическоеЛицоИНН,
		,
		ЭтоНовыйДокумент);
		
	ИначеЕсли ТипЗнч(ИсходныеДанные.Контрагент) = ТИп("СправочникСсылка.ФизическиеЛица") Тогда
		РеквизитыКонтрагента = БюджетныйНаСервере.ВернутьРеквизиты(ИсходныеДанные.Контрагент, "Наименование, ИНН");
		ТекстПолучателя = РеквизитыКонтрагента.Наименование;
		
		УстановитьСвойство(
		ОбъектДокумента,
		"ТекстПолучателя",
		ТекстПолучателя,
		,
		ЭтоНовыйДокумент);
		
		УстановитьСвойство(
		ОбъектДокумента,
		"ИННПолучателя",
		РеквизитыКонтрагента.ИНН,
		,
		ЭтоНовыйДокумент);
		
	КонецЕсли;  		
	
	
	УстановитьСвойство(ОбъектДокумента, "СчетКонтрагента",
		ИсходныеДанные.СчетКонтрагента,
		, ЭтоНовыйДокумент);     	
	
	УстановитьСвойство(
		ОбъектДокумента,
		"СуммаДокумента",
		ИсходныеДанные.СуммаДокумента,
		Истина,
		ЭтоНовыйДокумент
	);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"ВидПлатежа",
		ИсходныеДанные.ВидПлатежа,
		Истина,
		ЭтоНовыйДокумент
	);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"Акцептован",
		Истина,
		Истина,
		ЭтоНовыйДокумент
	);
	
	УстановитьСвойство(ОбъектДокумента, "ОчередностьПлатежа", ИсходныеДанные.Очередность, Истина, ЭтоНовыйДокумент);
	
	УстановитьСвойство(ОбъектДокумента, "КодВидаДохода", ИсходныеДанные.КодНазПлатежа, Истина, ЭтоНовыйДокумент);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"НазначениеПлатежа",
		ИсходныеДанные.НазначениеПлатежа,
		Истина,
		ЭтоНовыйДокумент
	);
	
	НачалоПодстрокиНДС = Найти(ИсходныеДанные.НазначениеПлатежа ,"НДС");
	СтрокаНДС = Сред(ИсходныеДанные.НазначениеПлатежа, НачалоПодстрокиНДС, 8);
	
	Если Найти(СтрокаНДС , "18")  Тогда
		СтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("18%");
	ИначеЕсли Найти(СтрокаНДС , "10") Тогда
		СтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("10%");
	Иначе
		СтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("Без НДС");
	КонецЕсли;
	
	УстановитьСвойство(
		ОбъектДокумента,
		"СтавкаНДС",
		СтавкаНДС,
		Истина,
		ЭтоНовыйДокумент
	);
	
	СуммаНДС = ИсходныеДанные.СуммаДокумента - (ИсходныеДанные.СуммаДокумента) / ((?(СтавкаНДС.НеОблагается,0,СтавкаНДС.Ставка) + 100) / 100);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"СуммаНДС",
		СуммаНДС,
		Истина,
		ЭтоНовыйДокумент
	);
	
	Если ИсходныеДанные.ВидОперации = "Перечисление налога" Тогда
		УстановитьСвойство(ОбъектДокумента,"КодБК",ИсходныеДанные.ПоказательКБК,,ЭтоНовыйДокумент);
		УстановитьСвойство(ОбъектДокумента,"КодОКАТО",ИсходныеДанные.ОКАТО,,ЭтоНовыйДокумент);
		УстановитьСвойство(ОбъектДокумента,"СтатусСоставителя",ИсходныеДанные.СтатусСоставителя,,ЭтоНовыйДокумент);
		УстановитьСвойство(ОбъектДокумента,"УИН",ИсходныеДанные.Код,,ЭтоНовыйДокумент);
		УстановитьСвойство(ОбъектДокумента,"ПоказательОснования",ИсходныеДанные.ПоказательОснования,,ЭтоНовыйДокумент);
		УстановитьСвойство(ОбъектДокумента,"ПоказательТипа",ИсходныеДанные.ПоказательТипа,,ЭтоНовыйДокумент);
		УстановитьСвойство(ОбъектДокумента,"ПоказательНомера",ИсходныеДанные.ПоказательНомера,,ЭтоНовыйДокумент);
		УстановитьСвойство(ОбъектДокумента,"ПоказательДаты",ИсходныеДанные.ПоказательДаты,,ЭтоНовыйДокумент);
		УстановитьСвойство(ОбъектДокумента,"ПоказательПериода",ИсходныеДанные.ПоказательПериода,,ЭтоНовыйДокумент);
	КонецЕсли;	
	
	Если ЭтоНовыйДокумент Тогда
		ОбъектДокумента.УстановитьНовыйНомер();
		Если НЕ ЕстьНеЦифры(ИсходныеДанные.Номер) Тогда
			ОкончаниеНомера = Формат(Число(СокрЛП(ИсходныеДанные.Номер)), "ЧН=; ЧГ=0");
			ДлинаОкончания = СтрДлина(ОкончаниеНомера);
			ДлинаНомера = СтрДлина(СокрЛП(ОбъектДокумента.Номер));
			Если ДлинаОкончания < 3 Тогда
				ДлинаОкончания = 3;
			КонецЕсли;
			ОбъектДокумента.Номер = Лев(ОбъектДокумента.Номер, ДлинаНомера - ДлинаОкончания) + Формат(Число(ОкончаниеНомера), "ЧЦ=" + ДлинаОкончания + "; ЧВН=; ЧГ=0");
		КонецЕсли;
	КонецЕсли;   						   
	
КонецПроцедуры // ЗаполнитьРеквизитыРасходСоСчета()

// Процедура заполняет реквизиты документа ПоступлениеНаСчет.
//
Процедура ЗаполнитьРеквизитыПоступлениеНаСчет(ОбъектДокумента, ИсходныеДанные, ЭтоНовыйДокумент, ОбъектСтруктура)
	
	УстановитьСвойство(
		ОбъектДокумента,
		"ДатаВходящегоДокумента",
		ИсходныеДанные.ДатаДок,
		,
		ЭтоНовыйДокумент
	);
	УстановитьСвойство(
		ОбъектДокумента,
		"ВидОперации",
		?(ТипЗнч(ИсходныеДанные.Контрагент) = Тип("СправочникСсылка.Организации"), Перечисления.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ, Перечисления.ВидыОперацийПлатежноеПоручение.Поступление),
		,
		ЭтоНовыйДокумент
	);
	
	ТекПредприятие = ПП_Сервер.ПолучитьПредприятие(ИсходныеДанные.ДатаДок, ИсходныеДанные.БанковскийСчет);
	ТекПредприятие2 = ПП_Сервер.ПолучитьПредприятие(ИсходныеДанные.ДатаДок, ИсходныеДанные.СчетКонтрагента);
	Если НЕ ПустаяСтрока(ТекПредприятие) Тогда
		Предприятие = ТекПредприятие;
		РеквизитыПредприятия = БюджетныйНаСервере.ВернутьРеквизиты(ТекПредприятие, "ВидДеятельности, УчетПоПодразделениям");
		Если НЕ РеквизитыПредприятия.УчетПоПодразделениям Тогда
			Подразделение = РеквизитыПредприятия.ВидДеятельности;
		КонецЕсли;
	ИначеЕсли НЕ ПустаяСтрока(ТекПредприятие2) Тогда
		Предприятие = ТекПредприятие2;
		Подразделение = БюджетныйНаСервере.ВернутьРеквизит(ТекПредприятие2, "ВидДеятельности");
	Конецесли;			
	
	////если не найдено, то офис
	//Если НЕ ЗначениеЗаполнено(Предприятие) Тогда
	//	Предприятие = ВернутьОфис();	
	//КонецЕсли;
	
	УстановитьСвойство(ОбъектДокумента,"Предприятие",Предприятие,,ЭтоНовыйДокумент);
	УстановитьСвойство(ОбъектДокумента,"Подразделение",Подразделение,,ЭтоНовыйДокумент);
	
	Если ТипЗнч(ИсходныеДанные.Контрагент) = Тип("СправочникСсылка.Контрагенты") ИЛИ ТипЗнч(ИсходныеДанные.Контрагент) = Тип("СправочникСсылка.Организации") Тогда 
		УстановитьСвойство(ОбъектДокумента,"Организация",ИсходныеДанные.Контрагент,,ЭтоНовыйДокумент);
		
		РеквизитыДоговора = сабОперОбщегоНазначения.ПолучитьДоговорКонтрагентаПоУмолчанию(ИсходныеДанные.Контрагент);
		УстановитьСвойство(ОбъектДокумента,"Договор",РеквизитыДоговора.Договор, Истина, ЭтоНовыйДокумент);
		
		УстановитьСвойство(
			ОбъектДокумента,
			"ИННПлательщика",
			?( ЗначениеЗаполнено(ИсходныеДанные.Контрагент.ИНН),ИсходныеДанные.Контрагент.ИНН,"" ),
			,
			ЭтоНовыйДокумент
		);
	
		УстановитьСвойство(
			ОбъектДокумента,
			"КПППлательщика",
			?( ЗначениеЗаполнено(ИсходныеДанные.Контрагент.КПП),ИсходныеДанные.Контрагент.КПП,""),
			,
			ЭтоНовыйДокумент
		);
		
		ТекстПлательщика = ?(ЗначениеЗаполнено(ИсходныеДанные.Контрагент.ОсновнойБанковскийСчет) И ЗначениеЗаполнено(ИсходныеДанные.Контрагент.ОсновнойБанковскийСчет.ТекстКорреспондента),ИсходныеДанные.Контрагент.ОсновнойБанковскийСчет.ТекстКорреспондента, ИсходныеДанные.Контрагент.НаименованиеПолное);
			
			УстановитьСвойство(
			ОбъектДокумента,
			"ТекстПлательщика",
			ТекстПлательщика,
			,
			ЭтоНовыйДокумент);
	КонецЕсли;
	
	ТекстПолучателя = ?(ЗначениеЗаполнено(ОбъектСтруктура.Организация.ОсновнойБанковскийСчет) И ЗначениеЗаполнено(ОбъектСтруктура.Организация.ОсновнойБанковскийСчет.ТекстКорреспондента),ОбъектСтруктура.Организация.ОсновнойБанковскийСчет.ТекстКорреспондента, ОбъектСтруктура.Организация.НаименованиеПолное);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"ТекстПолучателя",
		ТекстПолучателя,
		,
		ЭтоНовыйДокумент
	);    	
		
		
		   
	
	
	УстановитьСвойство(
		ОбъектДокумента,
		"БанковскийСчет",
		ИсходныеДанные.СчетКонтрагента,
		,
		ЭтоНовыйДокумент
	);
	
	//Если ЗначениеЗаполнено(ИсходныеДанные.БанковскийСчет) Тогда
	//	УстановитьСвойство(
	//		ОбъектДокумента,
	//		"ВалютныйПлатеж",
	//		ИсходныеДанные.БанковскийСчет.ВалютаДенежныхСредств<>УЧ_Сервер.НациональнаяВалюта(),
	//		,
	//		ЭтоНовыйДокумент
	//	);
	//КонецЕсли;

	УстановитьСвойство(
		ОбъектДокумента,
		"СуммаДокумента",
		ИсходныеДанные.СуммаДокумента,
		Истина,
		ЭтоНовыйДокумент
	);
	УстановитьСвойство(
		ОбъектДокумента,
		"НомерВходящегоДокумента",
		ИсходныеДанные.НомерДок,
		,
		ЭтоНовыйДокумент
	);
	УстановитьСвойство(
		ОбъектДокумента,
		"Дата",
		ИсходныеДанные.ДатаДок,
		,
		ЭтоНовыйДокумент
	);
	УстановитьСвойство(
		ОбъектДокумента,
		"ДатаВходящегоДокумента",
		ИсходныеДанные.ДатаДок,
		,
		ЭтоНовыйДокумент
	);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"НазначениеПлатежа",
		ИсходныеДанные.НазначениеПлатежа,
		Истина,
		ЭтоНовыйДокумент
	);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"Акцептован",
		Истина,
		Истина,
		ЭтоНовыйДокумент
	);
	
	НачалоПодстрокиНДС = Найти(ИсходныеДанные.НазначениеПлатежа ,"НДС");
	СтрокаНДС = Сред(ИсходныеДанные.НазначениеПлатежа, НачалоПодстрокиНДС, 8);
	
	Если Найти(СтрокаНДС , "18")  Тогда
		СтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("18%");
	ИначеЕсли Найти(СтрокаНДС , "10") Тогда
		СтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("10%");
	Иначе
		СтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("Без НДС");
	КонецЕсли;
	
	УстановитьСвойство(
		ОбъектДокумента,
		"СтавкаНДС",
		СтавкаНДС,
		Истина,
		ЭтоНовыйДокумент
	);
	
	СуммаНДС = ИсходныеДанные.СуммаДокумента - (ИсходныеДанные.СуммаДокумента) / ((?(СтавкаНДС.НеОблагается,0,СтавкаНДС.Ставка) + 100) / 100);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"СуммаНДС",
		СуммаНДС,
		Истина,
		ЭтоНовыйДокумент
	);  
	
	Если ЭтоНовыйДокумент Тогда
		ОбъектДокумента.УстановитьНовыйНомер();
		Если НЕ ЕстьНеЦифры(ИсходныеДанные.Номер) Тогда
			ОкончаниеНомера = Формат(Число(СокрЛП(ИсходныеДанные.Номер)), "ЧН=; ЧГ=0");
			ДлинаОкончания = СтрДлина(ОкончаниеНомера);
			ДлинаНомера = СтрДлина(СокрЛП(ОбъектДокумента.Номер));
			Если ДлинаОкончания < 3 Тогда
				ДлинаОкончания = 3;
			КонецЕсли;
			ОбъектДокумента.Номер = Лев(ОбъектДокумента.Номер, ДлинаНомера - ДлинаОкончания) + Формат(Число(ОкончаниеНомера), "ЧЦ=" + ДлинаОкончания + "; ЧВН=; ЧГ=0");			
			ОбъектДокумента.НомерВходящегоДокумента = ОкончаниеНомера;
		КонецЕсли;
	КонецЕсли;

	
		УстановитьСвойство(ОбъектДокумента, "Контрагент",
		ОбъектСтруктура.Организация,
		, ЭтоНовыйДокумент);		
		
		УстановитьСвойство(
			ОбъектДокумента,
			"ИННПолучателя",
			?(ЗначениеЗаполнено(ОбъектСтруктура.Организация.ИНН),ОбъектСтруктура.Организация.ИНН, ""),
			,
			ЭтоНовыйДокумент
			);
			
		УстановитьСвойство(
			ОбъектДокумента,
			"КПППолучателя",
			?(ЗначениеЗаполнено(ОбъектСтруктура.Организация.КПП),ОбъектСтруктура.Организация.КПП,""),
			,
			ЭтоНовыйДокумент
			);
		
		УстановитьСвойство(ОбъектДокумента, "СчетКонтрагента",
		ИсходныеДанные.БанковскийСчет ,
		, ЭтоНовыйДокумент);
	
		
	// Заполнение табличной части документа.
	//Если ИсходныеДанные.ВидОперации = Строка(Перечисления.ВидыОперацийПлатежноеПоручение.Оплата) Тогда
	
			
КонецПроцедуры // ЗаполнитьРеквизитыПоступлениеНаСчет()

// Процедура задает пометку на удаление.
//
&НаСервереБезКонтекста
Процедура ЗадатьПометкуНаУдаление(ОбъектДляПометки, Пометка)
	
	НазваниеОбъекта = ПолучитьПредставлениеОбъекта(ОбъектДляПометки);
	НазваниеДействия = ?(Пометка, НСтр("ru = ' помечен на удаление'"), НСтр("ru = ' отменена пометка на удаление'"));
	Попытка
		ОбъектДляПометки.Записать(РежимЗаписиДокумента.Запись);
		ОбъектДляПометки.УстановитьПометкуУдаления(Пометка);
		ТекстСообщения = НСтр("ru = '%НазваниеОбъектаЛев% %НазваниеОбъектаСред%: %НазваниеДействия%.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаЛев%", ВРег(Лев(НазваниеОбъекта, 1)));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаСред%", Сред(НазваниеОбъекта, 2));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеДействия%", НазваниеДействия);		
		ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);		
	Исключение		
		ТекстСообщения = НСтр("ru = '%НазваниеОбъектаЛев% %НазваниеОбъектаСред%: не %НазваниеДействия%! Произошли ошибки при записи!'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаЛев%", ВРег(Лев(НазваниеОбъекта, 1)));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаСред%", Сред(НазваниеОбъекта, 2));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеДействия%", НазваниеДействия);
		ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);
	КонецПопытки
	
КонецПроцедуры // ЗадатьПометкуНаУдаление()

// Процедура записывает объект.
//
&НаСервереБезКонтекста
Процедура ЗаписатьОбъект(ОбъектДляЗаписи, СтрокаСекции, ЭтоНовыйДокумент, ОбъектСтруктура)
	
	ТипДокумента = ОбъектДляЗаписи.Метаданные().Имя;
	Если ТипДокумента = "РасходСоСчета" Тогда
		ИмяДокумента = "Расход со счета";
	ИначеЕсли ТипДокумента = "ПоступлениеНаСчет" Тогда
		ИмяДокумента = "Поступление на счет";
	КонецЕсли;
	//УстановитьСвойство(
	//	ОбъектДляЗаписи,
	//	"Комментарий",
	//	"Загружен из Клиент-Банка",
	//	,
	//	ЭтоНовыйДокумент
	//);
	ОбъектМодифицирован = ОбъектДляЗаписи.Модифицированность();
	ОбъектПроведен = ОбъектДляЗаписи.Проведен;
	НазваниеОбъекта = ПолучитьПредставлениеОбъекта(ОбъектДляЗаписи);
	
	Если ОбъектМодифицирован Тогда
		Попытка
			Если ОбъектПроведен Тогда
				ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				СтрокаСекции.Проведен = ОбъектДляЗаписи.Проведен;
				СтрокаСекции.ПлатежноеПоручениеПроведен = ОбъектДляЗаписи.Проведен;
			Иначе
				ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли; 			
			ТекстСообщения = НСтр("ru = '%Статус% %НазваниеОбъекта%.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%" , ?(ЭтоНовыйДокумент, НСтр("ru = 'Создан '"), НСтр("ru = 'Перезаписан '")));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъекта%", НазваниеОбъекта);
            ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);
		Исключение
			ТекстСообщения = НСтр("ru = '%НазваниеОбъектаЛев% %НазваниеОбъектаСред% %Статус%! Произошли ошибки при записи!'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаЛев%", ВРег(Лев(НазваниеОбъекта, 1)));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаСред%", Сред(НазваниеОбъекта, 2));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%", ?(ОбъектДляЗаписи.ЭтоНовый(), НСтр("ru = ' не создан'"), НСтр("ru = ' не записан'")));
			ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);
			Возврат;
		КонецПопытки;
	Иначе
		ТекстСообщения = НСтр("ru = 'Уже существует %НазваниеОбъекта%. Возможно загрузка производилась ранее.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъекта%", НазваниеОбъекта);
        ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);
	КонецЕсли;
	
	Если ОбъектСтруктура.ПроводитьЗагружаемые И (ОбъектМодифицирован ИЛИ НЕ ОбъектПроведен) Тогда
		Попытка
			ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Проведение);
			ТекстСообщения = НСтр("ru = '%Статус% %НазваниеОбъекта% %Статус%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%", ?(ОбъектПроведен, НСтр("ru = 'Перепроведен '"), НСтр("ru = 'Проведен '")));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъекта%", НазваниеОбъекта);
			ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);
			СтрокаСекции.Проведен = ОбъектДляЗаписи.Проведен;
			СтрокаСекции.ПлатежноеПоручениеПроведен = ОбъектДляЗаписи.Проведен;
		Исключение
			ТекстСообщения = НСтр("ru = '%НазваниеОбъектаЛев% %НазваниеОбъектаСред% не проведен! Произошли ошибки при проведении!'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаЛев%", ВРег(Лев(НазваниеОбъекта, 1)));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаСред%", Сред(НазваниеОбъекта, 2));
			ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);
		КонецПопытки
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьОбъект()

// Процедура синхронизирует документы по счетам.
//
Процедура СинхронизироватьДокументыПоСчетам(ДокументыКИмпорту, ВидДокументовИсходящих, ВидДокументовВходящих, НачалоИнтервалаЗагрузки, КонецИнтервалаЗагрузки, ИмпортРасчетныеСчета, ОбъектСтруктура) Экспорт
	
	// Составляем список счетов.
	СписокСчетов = Новый СписокЗначений;
	Для каждого СтрокаСчета Из ИмпортРасчетныеСчета Цикл
		СписокСчетов.Добавить(СокрЛП(СтрокаСчета.РасчСчет));
	КонецЦикла;
	
	ДокументыНаУдаление = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	" + ВидДокументовИсходящих + ".Ссылка,
	|	" + ВидДокументовИсходящих + ".ДатаВходящегоДокумента,
	|	" + ВидДокументовИсходящих + ".БанковскийСчет.НомерСчета
	|ИЗ
	|	Документ." + ВидДокументовИсходящих + " КАК " + ВидДокументовИсходящих + "
	|ГДЕ
	|	" + ВидДокументовИсходящих + ".Дата >= &ДатаНач
	| И " + ВидДокументовИсходящих + ".Дата <= &ДатаКон
	| И " + ВидДокументовИсходящих + ".БанковскийСчет.НомерСчета В(&НомераСчетов)
	| И " + ВидДокументовИсходящих + ".Организация = &Организация");
	
	ДокументыНаУдаление.УстановитьПараметр("ДатаНач", НачалоИнтервалаЗагрузки);
	ДокументыНаУдаление.УстановитьПараметр("ДатаКон", КонецИнтервалаЗагрузки);
	ДокументыНаУдаление.УстановитьПараметр("НомераСчетов", СписокСчетов);
	ДокументыНаУдаление.УстановитьПараметр("Организация", ОбъектСтруктура.Организация);
	ВыборкаДокументов = ДокументыНаУдаление.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		СтрокаВТаблицеИмпорта = ДокументыКИмпорту.Найти(ВыборкаДокументов.Ссылка, "Документ"); 		
		Если СтрокаВТаблицеИмпорта = Неопределено Тогда
			ОбъектДокументаКУдаление = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
			Если ОбъектСтруктура.ИспользоватьГраницуОбработки Тогда
				Если ЗначениеЗаполнено(ОбъектСтруктура.ДатаГраницыОбработки) Тогда
					Если НачалоДня(ОбъектДокументаКУдаление.Дата) <= НачалоДня(ОбъектСтруктура.ДатаГраницыОбработки) Тогда
						ТекстСообщения = НСтр("ru = 'Платежный документ ""%ОбъектДокументаКУдаление%"" не помечен на удаление, так как имеет дату равной или меньшей границы обработки!'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбъектДокументаКУдаление%", ОбъектДокументаКУдаление);
						ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			//ЗадатьПометкуНаУдаление(ОбъектДокументаКУдаление, Истина);
		КонецЕсли;
	КонецЦикла;
	
	// Поступления на счет, отсутствующие в списке загруженным помечаем
	// на удаление.
	ДокументыНаУдаление = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	" + ВидДокументовВходящих + ".Ссылка,
	|	" + ВидДокументовВходящих + ".ДатаВходящегоДокумента,
	|	" + ВидДокументовВходящих + ".БанковскийСчет.НомерСчета
	|ИЗ
	|	Документ." + ВидДокументовВходящих + " КАК " + ВидДокументовВходящих + "
	|ГДЕ
	|	" + ВидДокументовВходящих + ".ДатаВходящегоДокумента >= &ДатаНач
	| И " + ВидДокументовВходящих + ".ДатаВходящегоДокумента <= &ДатаКон
	| И " + ВидДокументовВходящих + ".БанковскийСчет.НомерСчета В(&НомераСчетов)");
	
	ДокументыНаУдаление.УстановитьПараметр("ДатаНач", НачалоИнтервалаЗагрузки);
	ДокументыНаУдаление.УстановитьПараметр("ДатаКон", КонецИнтервалаЗагрузки);
	ДокументыНаУдаление.УстановитьПараметр("НомераСчетов", СписокСчетов);
	ВыборкаДокументов = ДокументыНаУдаление.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		СтрокаВТаблицеИмпорта = ДокументыКИмпорту.Найти(ВыборкаДокументов.Ссылка, "Документ");
		Если СтрокаВТаблицеИмпорта = Неопределено Тогда
			ОбъектДокументаКУдаление = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
			Если ОбъектСтруктура.ИспользоватьГраницуОбработки Тогда
				Если ЗначениеЗаполнено(ОбъектСтруктура.ДатаГраницыОбработки) Тогда
					Если НачалоДня(ОбъектДокументаКУдаление.Дата) <= НачалоДня(ОбъектСтруктура.ДатаГраницыОбработки) Тогда
						ТекстСообщения = НСтр("ru = 'Платежный документ ""%ОбъектДокументаКУдаление%"" не помечен на удаление, так как имеет дату равной или меньшей границы обработки!'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбъектДокументаКУдаление%", ОбъектДокументаКУдаление);
						ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			//ЗадатьПометкуНаУдаление(ОбъектДокументаКУдаление, Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // СинхронизироватьДокументыПоСчетам()

// Процедура загружает банковские выписки.
//
&НаСервереБезКонтекста
Процедура Загрузить(СтрокаСекции, ОбъектСтруктура) Экспорт
	
	//ДокументыКИмпорту = Загрузка.Выгрузить();
	//НачалоИнтервалаЗагрузки = Дата("00010101");
	//КонецИнтервалаЗагрузки  = Дата("00010101");
	//ДокументыКИмпорту.Индексы.Добавить("Документ");
	//Результат = ПолучитьДатуИзСтроки(НачалоИнтервалаЗагрузки, ИмпортЗаголовок.ДатаНачала);
	//
	//Если НЕ ЗначениеЗаполнено(Результат) Тогда
	//	ТекстСообщения  = НСтр("ru = 'В заголовке файла загрузки неверно указана дата начала интервала! Файл не может быть загружен!'");
	//	ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);
	//	Возврат;
	//КонецЕсли;
	//
	//Результат = ПолучитьДатуИзСтроки(КонецИнтервалаЗагрузки, ИмпортЗаголовок.ДатаКонца);
	//
	//Если НЕ ЗначениеЗаполнено(Результат) Тогда
	//	ТекстСообщения = НСтр("ru = 'В заголовке файла импорта неверно указана дата окончания интервала!'");
	//	ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);
	//КонецЕсли;
	//
	//// Загружаем отмеченные секции документов.
	//Для каждого СтрокаСекции Из ДокументыКИмпорту Цикл
		
		Если СтрокаСекции.Загружать Тогда
			РезультатПроверки = ПроверитьДокументДляЗагрузки(СтрокаСекции);
			
			Если ПустаяСтрока(РезультатПроверки) Тогда
				
				Если НЕ ЗначениеЗаполнено(СтрокаСекции.Документ) Тогда
					
					// В ИБ не найден документ, необходимо создать новый.
					ОбъектДокумента = Документы[СтрокаСекции.ВидДокумента].СоздатьДокумент();
					ЭтоНовыйДокумент = Истина;
					
				Иначе
					
					// В ИБ найден документ, необходимо получить его объект.
					ОбъектДокумента = СтрокаСекции.Документ.ПолучитьОбъект();
					
					Если ОбъектДокумента = Неопределено Тогда
						Сообщить("Исключение!!! Вероятно, перед повторной загрузкой был удален документ!");
						ОбъектДокумента = Документы[СтрокаСекции.ВидДокумента].СоздатьДокумент();
						ЭтоНовыйДокумент = Истина;
					Иначе
						ЭтоНовыйДокумент = Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
				// Заполняем все реквизиты документа.
				ТипДокумента = ОбъектДокумента.Метаданные().Имя;
				
				Если СтрокаСекции.ИмяДокумента = "Расход со счета" Тогда
					//ЗаполнитьРеквизитыРасходСоСчета(ОбъектДокумента, СтрокаСекции, ЭтоНовыйДокумент);
					//Запрос = Новый Запрос;
					//Запрос.Текст = "ВЫБРАТЬ
					//               |	ПлатежноеПоручение.Ссылка
					//               |ИЗ
					//               |	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
					//               |ГДЕ
					//               |	ПлатежноеПоручение.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
					//               |	И (ПлатежноеПоручение.Номер ПОДОБНО &Номер
					//               |			ИЛИ ПлатежноеПоручение.НомерВходящегоДокумента ПОДОБНО &Номер)
					//               |	И ПлатежноеПоручение.БанковскийСчет = &БанковскийСчет
					//               |	И ПлатежноеПоручение.СуммаДокумента = &СуммаДокумента"; 								   
					//Запрос.УстановитьПараметр("ДатаНачала",НачалоДня(СтрокаСекции.ДатаДок));
					//Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(СтрокаСекции.ДатаДок));
					//Запрос.УстановитьПараметр("Номер", СтрокаСекции.НомерДок);
					//Запрос.УстановитьПараметр("БанковскийСчет", СтрокаСекции.БанковскийСчет);
					//Запрос.УстановитьПараметр("СуммаДокумента", СтрокаСекции.СуммаДокумента);
					//Выборка = Запрос.Выполнить().Выбрать();
					//ДокументНайден = ложь; 
					
					Если НЕ ЭтоНовыйДокумент Тогда
						
						//Если НЕ ДокументНайден Тогда 
						
						Если НЕ ОбъектДокумента.Акцептован Тогда
							//ДокументОбъект = Выборка.ссылка.ПолучитьОбъект();
							Если НЕ НачалоДня(ОбъектДокумента.Дата) = НачалоДня(СтрокаСекции.ДатаДок) Тогда
								ОбъектДокумента.Дата = СтрокаСекции.ДатаДок;								
							КонецЕсли;
							ОбъектДокумента.НомерВходящегоДокумента = СтрокаСекции.НомерДок;
							ОбъектДокумента.ДатаВходящегоДокумента = СтрокаСекции.ДатаДок;
							ОбъектДокумента.Акцептован = истина;
							ОбъектДокумента.Записать();
							//ДокументНайден = Истина;
							СтрокаСекции.Акцептован = Истина;
							
							Попытка
								БПСервер.АкцептоватьЗаявкиНаОплату(СтрокаСекции.Документ);
							Исключение
							КонецПопытки;
							
							Сообщить("Документ " + СтрокаСекции.Документ + " акцептован.");
							//Иначе
							//Сообщить("Документ №" + Выборка.Ссылка.Номер + " от " + Выборка.Ссылка.Дата + " уже акцептован. Возможно загрузка выполняется повторно.");
							//ДокументНайден = Истина;
						КонецЕсли;
						
						//ОбъектДокумент = СтрокаСекции.Документ.ПолучитьОбъект();
						//
						//Если Не ЗначениеЗаполнено(ОбъектДокумента.СчетКонтрагента) И ТипЗнч(СтрокаСекции.СчетКонтрагента)= Тип("СправочникСсылка.БанковскиеСчетаОрганизаций") Тогда
						//	ОбъектДокумент.СчетКонтрагента = СтрокаСекции.СчетКонтрагента;
						//	ОбъектДокумент.Контрагент	   = СтрокаСекции.СчетКонтрагента.Владелец;
						//	ОбъектДокумент.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
						//КонецЕсли;
						
						
						//						Иначе
						//							Сообщить("Найден дублирующий документ № "  + СтрокаСекции.НомерДок + " от " + СтрокаСекции.ДатаДок);
						//						КонецЕсли;
					Иначе
						
						//КонецЕсли;
						//
						//Если НЕ ДокументНайден Тогда
						
						ЗаявкаОснование = ПодобратьЗаявку(СтрокаСекции);
						
						Если ЗначениеЗаполнено(ЗаявкаОснование) Тогда
							ОбъектДокумента.Заполнить(ЗаявкаОснование);
							ОбъектДокумента.Проведен = Ложь;
						КонецЕсли;
						
						ЗаполнитьРеквизитыРасходСоСчета(ОбъектДокумента, СтрокаСекции, ЭтоНовыйДокумент, ОбъектСтруктура);
						
						Если ОбъектДокумента.ПометкаУдаления Тогда
							ЗадатьПометкуНаУдаление(ОбъектДокумента, Ложь);
						КонецЕсли;
						
						ЗаписатьОбъект(ОбъектДокумента, СтрокаСекции, ЭтоНовыйДокумент, ОбъектСтруктура);
						
						Если НЕ ОбъектДокумента.ЭтоНовый() Тогда
							
							Если НЕ ЗначениеЗаполнено(СтрокаСекции.Документ) Тогда
								
								СтрокаСекции.Документ = ОбъектДокумента.Ссылка;
								
							КонецЕсли;
							
						КонецЕсли;
						
						Если ЗначениеЗаполнено(ЗаявкаОснование) Тогда
							Попытка
								БПСервер.АкцептоватьЗаявкиНаОплату(СтрокаСекции.Документ);
							Исключение
							КонецПопытки;
						КонецЕсли;
						
						//Сообщить("Для акцептации не найден документ номер " + СтрокаСекции.НомерДок + " от " + СтрокаСекции.ДатаДок);
					КонецЕсли;
					
				ИначеЕсли СтрокаСекции.ИмяДокумента = "Поступление на счет" Тогда
					
					Если ЭтоНовыйДокумент ТОгда
						ЗаполнитьРеквизитыРасходСоСчета(ОбъектДокумента, СтрокаСекции, ЭтоНовыйДокумент, ОбъектСтруктура);
						
						// 26.05.16 поступлениевнх на основании оплатывнх
						Если ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ Тогда
							ДокОснование = ПП_Сервер.НайтиОснованиеДляПоступленияВНХ(ОбъектДокумента);
							
							Если ЗначениеЗаполнено(ДокОснование) Тогда
								ОбъектДокумента.Заявка = ДокОснование;
							КонецЕсли;
							
						КонецЕсли;
						
						//++д1 07.11.18 подставляем счет счет
						Если НЕ ПП_Сервер.ЭтоРасходнаяОперация(ОбъектДокумента.ВидОперации) И Не ЗначениеЗаполнено(ОбъектДокумента.Заявка) Тогда
							ОбъектДокумента.Заявка = ПП_Сервер.ПодобратьСчетПоПлатежномуПоручению(СтрокаСекции.Контрагент, СтрокаСекции.НазначениеПлатежа);
						КонецЕсли;
						//--д1
					
						Если ОбъектДокумента.ПометкаУдаления Тогда
							ЗадатьПометкуНаУдаление(ОбъектДокумента, Ложь);
						КонецЕсли;
						
						ЗаписатьОбъект(ОбъектДокумента, СтрокаСекции, ЭтоНовыйДокумент, ОбъектСтруктура);
						
						Если НЕ ОбъектДокумента.ЭтоНовый() Тогда
							
							Если НЕ ЗначениеЗаполнено(СтрокаСекции.Документ) Тогда
								СтрокаСекции.Документ = ОбъектДокумента.Ссылка;
								
								Если СтрокаСекции.ВидДокумента = "РасходСоСчета" Тогда
									РеквизитДаты = "ДатаОплаты";
									РеквизитНомера = "Номер";
								Иначе
									РеквизитДаты = "ДатаВходящегоДокумента";
									РеквизитНомера = "НомерВходящегоДокумента";
								КонецЕсли;
								
								СтрокаСекции.НомерДок = ОбъектДокумента[РеквизитНомера];
							КонецЕсли;
							
						КонецЕсли;
						
					Иначе 						
						
						ОбъектДокумент = СтрокаСекции.Документ.ПолучитьОбъект();
						
						// 26.05.16 поступлениевнх на основании оплатывнх
						Если ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ Тогда
							ДокОснование = ПП_Сервер.НайтиОснованиеДляПоступленияВНХ(ОбъектДокумента);
							
							Если ЗначениеЗаполнено(ДокОснование) Тогда
								ОбъектДокумент.Заявка = ДокОснование;
							КонецЕсли;
							
						КонецЕсли;
						
						Если Не ЗначениеЗаполнено(ОбъектДокумента.СчетКонтрагента) И ТипЗнч(СтрокаСекции.СчетКонтрагента)= Тип("СправочникСсылка.БанковскиеСчетаОрганизаций") Тогда
							ОбъектДокумент.БанковскийСчет = СтрокаСекции.СчетКонтрагента;
							ОбъектДокумент.Организация	   = СтрокаСекции.СчетКонтрагента.Владелец;
							ОбъектДокумент.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
						КонецЕсли;
												
						ОбъектДокумента.Акцептован = истина;
						ОбъектДокумента.Записать();
						ДокументНайден = Истина;
						СтрокаСекции.Акцептован = Истина;
						
						Попытка
							БПСервер.АкцептоватьЗаявкиНаОплату(ОбъектДокумента.Ссылка);
						Исключение
						КонецПопытки;
						
						Сообщить("Документ " + ОбъектДокумента.Ссылка + " акцептован.");   
					КонецЕсли;
					
				КонецЕсли;
				
				//создаем БанкВыписку
				СоздатьБанковскуюВыписку(ОбъектДокумента, СтрокаСекции, ОбъектСтруктура);
				
				СтрокаСекции.Загружать = НЕ ЗначениеЗаполнено(СтрокаСекции.Документ) ИЛИ (НЕ ЗначениеЗаполнено(СтрокаСекции.БанковскаяВыписка) И ОбъектСтруктура.СоздаватьБанковскиеВыписки);
				
			Иначе
				ТекстСообщения = НСтр(
					"ru = 'Платежный документ ""%Операция%"" №%Номер% от %Дата% не может быть загружен:
					|%РезультатПроверки%!'"
				);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Операция%", СтрокаСекции.Операция);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номер%", СтрокаСекции.Номер);                                                                     
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Дата%", СтрокаСекции.Дата);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РезультатПроверки%", РезультатПроверки);
				ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);
			КонецЕсли;
						
		КонецЕсли;
		
	//КонецЦикла;
	
	//// Платежные поручения исходящие, отсутствующие в списке загруженным помечаем
	//// на удаление.
	//СинхронизироватьДокументыПоСчетам(
	//	ДокументыКИмпорту,
	//	"ПлатежноеПоручение",
	//	"ПлатежноеПоручение",
	//	НачалоИнтервалаЗагрузки,
	//	КонецИнтервалаЗагрузки,
	//	ИмпортРасчетныеСчета
	//);
	
КонецПроцедуры // Загрузить()

&НаСервереБезКонтекста
Процедура СоздатьБанковскуюВыписку(ОбъектДокумента, СтрокаСекции, ОбъектСтруктура)
	Если НЕ ОбъектСтруктура.СоздаватьБанковскиеВыписки Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	УЧ_ДвижениеДС.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УЧ_ДвижениеДС КАК УЧ_ДвижениеДС
	|ГДЕ
	|	УЧ_ДвижениеДС.ДокОснование = &ДокОснование";
	
	Запрос.УстановитьПараметр("ДокОснование", ОбъектДокумента.Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если НЕ Выборка.Количество() Тогда
		
		НовыйДокумент = Документы.УЧ_ДвижениеДС.СоздатьДокумент();
		НовыйДокумент.Заполнить(Новый Структура("Ссылка, Субконто2", ОбъектДокумента.Ссылка, ОбъектДокумента.БанковскийСчет));
		
		Попытка
			НовыйДокумент.Записать(?(ОбъектСтруктура.ПроводитьЗагружаемые,РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		Исключение
			НовыйДокумент.Записать();
		КонецПопытки;
		СтрокаСекции.БанковскаяВыписка = НовыйДокумент.Ссылка;
		СтрокаСекции.БанковскаяВыпискаПроведен = НовыйДокумент.Проведен;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодобратьЗаявку(СтрокаСекции)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Д_ЗаявкаНаФинансирование.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.Д_ЗаявкаНаФинансирование КАК Д_ЗаявкаНаФинансирование
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	               |		ПО Д_ЗаявкаНаФинансирование.Ссылка = ПлатежноеПоручение.Заявка
	               |ГДЕ
	               |	Д_ЗаявкаНаФинансирование.ПометкаУдаления = ЛОЖЬ
	               |	И Д_ЗаявкаНаФинансирование.Сумма = &Сумма
	               |	И Д_ЗаявкаНаФинансирование.БанковскийСчет = &БанковскийСчет
	               |	И Д_ЗаявкаНаФинансирование.СчетКонтрагента = &СчетКонтрагента
	               |	И Д_ЗаявкаНаФинансирование.Дата >= ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, -3)
	               |	И Д_ЗаявкаНаФинансирование.Дата <= КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
	               |	И ПлатежноеПоручение.Ссылка ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("Дата", СтрокаСекции.ДатаДок);
	Запрос.УстановитьПараметр("БанковскийСчет", СтрокаСекции.БанковскийСчет);
	Запрос.УстановитьПараметр("СчетКонтрагента", СтрокаСекции.СчетКонтрагента);
	Запрос.УстановитьПараметр("Сумма", СтрокаСекции.СуммаДокумента);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество() > 1 Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции // ()


// ПРОЦЕДУРЫ И ФУНКЦИИ ВЫГРУЗКИ

// Процедура заполняет значения таблицы для экспорта.
//
Процедура ЗаполнитьЗначениеЭкспорта(СтрокаЭкспорта, ВыборкаДляЭкспорта, ОбъектСтруктура)
	
	Плательщик = "Организация";
	Получатель = "Контрагент";
	НепрямыеРасчетыУПолучателя  = ЗначениеЗаполнено(ВыборкаДляЭкспорта[Получатель + "БанкДляРасчетов"]);
	ТекстПолучателя = "";
	
	Если НепрямыеРасчетыУПолучателя Тогда
		ПозицияРС = найти(ВыборкаДляЭкспорта["ТекстПолучателя"], "р/с");
		
		Если ПозицияРС = 0 Тогда
			ТекстПолучателя = ВыборкаДляЭкспорта["ТекстПолучателя"];
		Иначе
			ТекстПолучателя = СокрЛП((Лев(ВыборкаДляЭкспорта["ТекстПолучателя"], ПозицияРС-1)));
		КонецЕсли;
		
	Иначе
		ТекстПолучателя = ВыборкаДляЭкспорта["ТекстПолучателя"];
	КонецЕсли;
	
	
	ЗамененныеДанные = Новый Структура;
	
	
	ЗамененныеДанные.Вставить(Получатель + "НомерСчета", ВыборкаДляЭкспорта[Получатель + "НомерСчета"]);
	
	Значение = ВыборкаДляЭкспорта.ИННПолучателя;
	
	Если ПустаяСтрока(Значение) Тогда
		Значение = ВыборкаДляЭкспорта[Получатель + "ИНН"];
	КонецЕсли;
	
	ЗамененныеДанные.Вставить(Получатель + "ИНН", Значение);
	
	// Получатель1.
	ЗамененныеДанные.Вставить("Получатель1", ТекстПолучателя);
	ЗамененныеДанные.Вставить("Получатель", "ИНН " + Значение + " " + ТекстПолучателя); //По просьбе Маши 13.09.12
	ЗамененныеДанные.Вставить(Получатель + "НомерСчета", ВыборкаДляЭкспорта[Получатель + "НомерСчета"]);
	ЗамененныеДанные.Вставить(Получатель + "Банк", ВыборкаДляЭкспорта[Получатель + "Банк"]);
	ЗамененныеДанные.Вставить(Получатель + "ГородБанка", ВыборкаДляЭкспорта[Получатель + "ГородБанка"]);
	ЗамененныеДанные.Вставить(Получатель + "БИКБанка", ВыборкаДляЭкспорта[Получатель + "БИКБанка"]);
	ЗамененныеДанные.Вставить(Получатель + "РасчСчет", ВыборкаДляЭкспорта[Получатель + "РасчСчет"]);
	ЗамененныеДанные.Вставить("ПолучательКПП", ВыборкаДляЭкспорта.КонтрагентКПП);
	ЗамененныеДанные.Вставить("КПППолучателя", ВыборкаДляЭкспорта.КПППолучателя);
	ЗамененныеДанные.Вставить("НазначениеПлатежа", ВыборкаДляЭкспорта.НазначениеПлатежа);
	
	
	СтрокаЭкспорта.Номер = ПолучитьНомерВФорматеОбмена(ВыборкаДляЭкспорта.Номер, РегистрыСведений.Д_ИсточникПП.СрезПоследних(,Новый Структура("БанковскиеСчета",ВыборкаДляЭкспорта.ОрганизацияСчет))[0].Предприятие.ПрефиксПредприятия);
	СтрокаЭкспорта.Дата = ВыборкаДляЭкспорта.Дата;
	СтрокаЭкспорта.Сумма = Формат(ВыборкаДляЭкспорта.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧГ=0");
	СтрокаЭкспорта.ПлательщикСчет = ВыборкаДляЭкспорта[Плательщик + "НомерСчета"];
	СтрокаЭкспорта.ПолучательСчет = ЗамененныеДанные[Получатель + "НомерСчета"];
	СтрокаЭкспорта.ВидПлатежа = ВыборкаДляЭкспорта.ВидПлатежа;
	НепрямыеРасчетыУПлательщика = ЗначениеЗаполнено(ВыборкаДляЭкспорта[Плательщик + "БанкДляРасчетов"]);
	
	// ВидОплаты.
	СтрокаЭкспорта.ВидПлатежа = "";
	СтрокаЭкспорта.ВидОплаты = "01";
	
	// Плательщик1.
	ТекстПлательщика = "";
	
	Если НепрямыеРасчетыУПлательщика Тогда
		ПозицияРС = Найти(ВыборкаДляЭкспорта["ТекстПлательщика"], "р/с"); 
		
		Если ПозицияРС = 0 Тогда
			ТекстПлательщика = ВыборкаДляЭкспорта["ТекстПлательщика"];
		Иначе
			ТекстПлательщика = СокрЛП((Лев(ВыборкаДляЭкспорта["ТекстПлательщика"], ПозицияРС - 1)));
		КонецЕсли;
		
	Иначе
		ТекстПлательщика = ВыборкаДляЭкспорта["ТекстПлательщика"];
	КонецЕсли;
	
	СтрокаЭкспорта.Плательщик1 = ТекстПлательщика;
	
	// Плательщик, ПлательщикИНН.
	Значение = ВыборкаДляЭкспорта.ИННПлательщика;
	
	Если ПустаяСтрока(Значение) Тогда
		Значение = ВыборкаДляЭкспорта[Плательщик + "ИНН"];
	КонецЕсли;
	
	СтрокаЭкспорта.ПлательщикИНН = Значение;
	СтрокаЭкспорта.Плательщик = "ИНН " + Значение + " " + СтрокаЭкспорта.Плательщик1;
	
	// ПлательщикРасчСчет, ПлательщикБанк1, ПлательщикБанк2, ПлательщикБИК,
	// ПлательщикКорсчет, Плательщик2, Плательщик3, Плательщик4.
	Если НепрямыеРасчетыУПлательщика Тогда
		СтрокаЭкспорта.Плательщик2 		  = ВыборкаДляЭкспорта[Плательщик + "НомерСчета"];
		СтрокаЭкспорта.Плательщик3 		  = ВыборкаДляЭкспорта[Плательщик + "Банк"];
		СтрокаЭкспорта.Плательщик4 		  = ВыборкаДляЭкспорта[Плательщик + "ГородБанка"];
		СтрокаЭкспорта.Плательщик 		  = СтрокаЭкспорта.Плательщик + " р/с " + СтрокаЭкспорта.Плательщик2 + " в " + СтрокаЭкспорта.Плательщик3 + " " + СтрокаЭкспорта.Плательщик4;
		СтрокаЭкспорта.ПлательщикРасчСчет = ВыборкаДляЭкспорта[Плательщик + "РасчСчет"];
		СтрокаЭкспорта.ПлательщикБанк1    = ВыборкаДляЭкспорта[Плательщик + "БанкДляРасчетов"];
		СтрокаЭкспорта.ПлательщикБанк2    = ВыборкаДляЭкспорта[Плательщик + "ГородРЦБанка"];
		СтрокаЭкспорта.ПлательщикБИК      = ВыборкаДляЭкспорта[Плательщик + "БИКРЦБанка"];
		СтрокаЭкспорта.ПлательщикКорсчет  = ВыборкаДляЭкспорта[Плательщик + "КоррСчетРЦБанка"];
	Иначе
		СтрокаЭкспорта.ПлательщикРасчСчет = ВыборкаДляЭкспорта[Плательщик + "НомерСчета"];
		СтрокаЭкспорта.ПлательщикБанк1    = ВыборкаДляЭкспорта[Плательщик + "Банк"];
		СтрокаЭкспорта.ПлательщикБанк2    = ВыборкаДляЭкспорта[Плательщик + "ГородБанка"];
		СтрокаЭкспорта.ПлательщикБИК      = ВыборкаДляЭкспорта[Плательщик + "БИКБанка"];
		СтрокаЭкспорта.ПлательщикКорсчет  = ВыборкаДляЭкспорта[Плательщик + "РасчСчет"];
	КонецЕсли;
	
	СтрокаЭкспорта.Получатель1 = ТекстПолучателя;
	
	// Получатель, ПолучательИНН.
	СтрокаЭкспорта.ПолучательИНН = ЗамененныеДанные[Получатель + "ИНН"];
	СтрокаЭкспорта.Получатель = "ИНН " + ЗамененныеДанные[Получатель + "ИНН"] + " " + СтрокаЭкспорта.Получатель1;
	
	// ПолучательРасчСчет, ПолучательБанк1, ПолучательБанк2, ПолучательБИК,
	// ПолучательКорсчет, Получатель2, Получатель3, Получатель4.
	Если НепрямыеРасчетыУПолучателя Тогда
		СтрокаЭкспорта.Получатель2 		  = ВыборкаДляЭкспорта[Получатель + "НомерСчета"];
		СтрокаЭкспорта.Получатель3 		  = ВыборкаДляЭкспорта[Получатель + "Банк"];
		СтрокаЭкспорта.Получатель4 		  = ВыборкаДляЭкспорта[Получатель + "ГородБанка"];
		СтрокаЭкспорта.Получатель 		  = СтрокаЭкспорта.Получатель	  + " р/с " + СтрокаЭкспорта.Получатель2 + " в " + СтрокаЭкспорта.Получатель3 + " " + СтрокаЭкспорта.Получатель4;
		СтрокаЭкспорта.ПолучательРасчСчет = ВыборкаДляЭкспорта[Получатель + "РасчСчет"];
		СтрокаЭкспорта.ПолучательБанк1    = ВыборкаДляЭкспорта[Получатель + "БанкДляРасчетов"];
		СтрокаЭкспорта.ПолучательБанк2    = ВыборкаДляЭкспорта[Получатель + "ГородРЦБанка"];
		СтрокаЭкспорта.ПолучательБИК      = ВыборкаДляЭкспорта[Получатель + "БИКРЦБанка"];
		СтрокаЭкспорта.ПолучательКорсчет  = ВыборкаДляЭкспорта[Получатель + "КоррСчетРЦБанка"];
	Иначе
		СтрокаЭкспорта.ПолучательРасчСчет = ЗамененныеДанные[Получатель + "НомерСчета"];
		СтрокаЭкспорта.ПолучательБанк1    = ЗамененныеДанные[Получатель + "Банк"];
		СтрокаЭкспорта.ПолучательБанк2    = ЗамененныеДанные[Получатель + "ГородБанка"];
		СтрокаЭкспорта.ПолучательБИК      = ЗамененныеДанные[Получатель + "БИКБанка"];
		СтрокаЭкспорта.ПолучательКорсчет  = ЗамененныеДанные[Получатель + "РасчСчет"];
	КонецЕсли;
	
	// ПлательщикКПП.
	Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПлательщикКПП) Тогда
		СтрокаЭкспорта.ПлательщикКПП = ВыборкаДляЭкспорта.КПППлательщика;
	КонецЕсли;
	
	// ПолучательКПП.
	//Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПолучательКПП) Тогда
		СтрокаЭкспорта.ПолучательКПП = ЗамененныеДанные.ПолучательКПП;
	//КонецЕсли;
	
	// СтатусСоставителя, ПлательщикКПП, ПолучательКПП, ПоказательКБК, ОКАТО
	// ПоказательОснования, ПоказательПериода, ПоказательНомера, ПоказательДаты,
	// ПоказательТипа.
	Если ВыборкаДляЭкспорта.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога ИЛИ ВыборкаДляЭкспорта.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		СтрокаЭкспорта.СтатусСоставителя = ВыборкаДляЭкспорта.СтатусСоставителя;
		
		Если ПустаяСтрока(СтрокаЭкспорта.СтатусСоставителя) Тогда
			СтрокаЭкспорта.СтатусСоставителя = "0";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПлательщикКПП) Тогда
			СтрокаЭкспорта.ПлательщикКПП = ВыборкаДляЭкспорта.КПППлательщика;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПлательщикКПП) Тогда
			СтрокаЭкспорта.ПлательщикКПП = "0";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПолучательКПП) Тогда
			СтрокаЭкспорта.ПолучательКПП = ЗамененныеДанные.КПППолучателя;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПолучательКПП) Тогда
			СтрокаЭкспорта.ПолучательКПП = "0";
		КонецЕсли;
		
		СтрокаЭкспорта.ПоказательКБК = ВыборкаДляЭкспорта.КодБК;
		
		// закомментированно 07.08.2018, неактуально с 2014 года {
		//Если ВыборкаДляЭкспорта.ОрганизацияСчет.Банк.ОКТМО Тогда
		//	СтрокаЭкспорта.ОКТМО         = ВыборкаДляЭкспорта.КодПоОКТМО;
		//Иначе
		//	СтрокаЭкспорта.ОКАТО         = ВыборкаДляЭкспорта.КодОКАТО;
		//КонецЕсли;
		//}
				
		//СтрокаЭкспорта.ОКТМО         = ВыборкаДляЭкспорта.КодОКАТО;
		СтрокаЭкспорта.ОКАТО         = ВыборкаДляЭкспорта.КодОКАТО;
		
		Если ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательОснования) Тогда
			СтрокаЭкспорта.ПоказательОснования = "0";
		Иначе
			СтрокаЭкспорта.ПоказательОснования = ВыборкаДляЭкспорта.ПоказательОснования;
		КонецЕсли;
		
		Если ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательПериода) ИЛИ (ВыборкаДляЭкспорта.ПоказательПериода = "  .  .    ") Тогда
			СтрокаЭкспорта.ПоказательПериода = "0";
		Иначе
			СтрокаЭкспорта.ПоказательПериода = ВыборкаДляЭкспорта.ПоказательПериода;
		КонецЕсли;
		
		Если ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательНомера) Тогда
			СтрокаЭкспорта.ПоказательНомера = "0";
		Иначе
			СтрокаЭкспорта.ПоказательНомера = ВыборкаДляЭкспорта.ПоказательНомера;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаДляЭкспорта.ПоказательДаты) Тогда
			СтрокаЭкспорта.ПоказательДаты = "0";
		Иначе
			СтрокаЭкспорта.ПоказательДаты = Формат(ВыборкаДляЭкспорта.ПоказательДаты,"ДЛФ=Д");
		КонецЕсли;
		
		Если ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательТипа) Тогда
			// Указание ЦБ РФ от 6 ноября 2015 г. № 3844-У
			// "О внесении изменений в Положение Банка России от 19 июня 2012 года № 383-П".
	
			// Совпадает с датой вступления в силу Приказа Минфина России от 23 сентября 2015 г. № 148н
			// "О внесении изменений в приказ Министерства финансов Российской Федерации от 12 ноября 2013 г. № 107н".

			СтрокаЭкспорта.ПоказательТипа = "";
		Иначе
			СтрокаЭкспорта.ПоказательТипа = ВыборкаДляЭкспорта.ПоказательТипа;
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ВыборкаДляЭкспорта.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога ИЛИ ВыборкаДляЭкспорта.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога) И ПустаяСтрока(ВыборкаДляЭкспорта.Код) Тогда
		СтрокаЭкспорта.Код = "0"; // требования 107н
	Иначе
		СтрокаЭкспорта.Код = ВыборкаДляЭкспорта.Код; // только требования 383-П
	КонецЕсли;
	
	// Очередность.
	СтрокаЭкспорта.Очередность = "" + ВыборкаДляЭкспорта.ОчередностьПлатежа;
	
	//КодНазПлатежа
	Если НЕ ВыборкаДляЭкспорта.КодВидаДохода = "" Тогда
	    СтрокаЭкспорта.КодНазПлатежа = ВыборкаДляЭкспорта.КодВидаДохода;
	Иначе
		СтрокаЭкспорта.Удалить("КодНазПлатежа");
	КонецЕсли;
	
	// НазначениеПлатежа, НазначениеПлатежа1, НазначениеПлатежа2, НазначениеПлатежа3,
	// НазначениеПлатежа4, НазначениеПлатежа5, НазначениеПлатежа6.
	СтрокаЭкспорта.НазначениеПлатежа = СтрЗаменить(
		СтрЗаменить(
			СтрЗаменить(
				ЗамененныеДанные.НазначениеПлатежа,
				Символы.ПС,
				" "),
			Символы.ВК,
			""),
		Символы.ПФ,
		""
	);
	КоличествоСтрокНП = СтрЧислоСтрок(ЗамененныеДанные.НазначениеПлатежа);
	
	Если КоличествоСтрокНП > 6 Тогда
		КоличествоСтрокНП = 6;
	КонецЕсли;
	
	Для Сч = 1 По КоличествоСтрокНП Цикл
		СтрокаЭкспорта["НазначениеПлатежа" + Сч] = СтрПолучитьСтроку(ЗамененныеДанные.НазначениеПлатежа, Сч);
	КонецЦикла;
	
	Для Сч = (КоличествоСтрокНП + 1) По 6 Цикл
		СтрокаЭкспорта["НазначениеПлатежа" + Сч] = "";
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьЗначениеЭкспорта()

// Функция получает секцию документ.
//
Функция ПолучитьСекциюДокумент(СтруктураДокумента, КоллекцияРеквизитов, ОбъектСтруктура)
	
	Буфер = "";
	Реквизит = "";
	СтруктураДляЗаписи = СформироватьСтруктуруЭкспорта();
	ЗаполнитьЗначениеЭкспорта(СтруктураДляЗаписи, СтруктураДокумента, ОбъектСтруктура);
	ДобавитьВСтроку(Буфер, "СекцияДокумент=" + СтруктураДокумента.ВидДокумента);
	
	Для каждого ВыгружаемыйРеквизит Из СтруктураДляЗаписи Цикл
		Значение = ПривестиЗначение(ВыгружаемыйРеквизит.Значение);
		
		Если НЕ ПустаяСтрока(Значение) Тогда
			Если ВыгружаемыйРеквизит.Ключ = "ПоказательТипа" Тогда
				//ВНИМАНИЕ. Изменено назначение поля ПоказательТипа (поле 110 Платежного Поручения) в соответствии с Указанием ЦБР от 5 июля 2017 г. N 4449-У
				//В поле ПоказательТипа при переводе денежных средств физическим лицам в целях осуществления выплат за счет средств бюджетов бюджетной системы Российской Федерации, указывается "1". В иных случаях значение реквизита не указывается.
				Значение = "";
			КонецЕсли;
			ДобавитьВСтроку(Буфер, ВыгружаемыйРеквизит.Ключ + "=" + Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьВСтроку(Буфер, "КонецДокумента");
	
	Возврат Буфер;
	
КонецФункции // ПолучитьСекциюДокумент()

// Процедура выгружает платежные поручения.
//
Функция Выгрузить(ОбъектСтруктура, ДокументыНаЭкспорт) Экспорт
	
	//ДокументыНаЭкспорт = Выгрузка.Выгрузить();
	//ДокументыНаЭкспорт = ОбъектСтруктура.Выгрузка;
	ПотокВыгрузки = Новый ТекстовыйДокумент();
	
	// Формируем заголовок.
	ПотокВыгрузки.ДобавитьСтроку("1CClientBankExchange");
	ПотокВыгрузки.ДобавитьСтроку("ВерсияФормата=1.02");
	ПотокВыгрузки.ДобавитьСтроку("Кодировка=" + ?(ОбъектСтруктура.Кодировка = "Авто", "Windows", ОбъектСтруктура.Кодировка));
	ПотокВыгрузки.ДобавитьСтроку("Отправитель=" + Метаданные.Синоним);
	ПотокВыгрузки.ДобавитьСтроку("Получатель=" + ОбъектСтруктура.Программа);
	ПотокВыгрузки.ДобавитьСтроку("ДатаСоздания=" + Формат(ТекущаяДата(), "ДЛФ=Д"));
	ПотокВыгрузки.ДобавитьСтроку("ВремяСоздания=" + Формат(ТекущаяДата(), "ДЛФ=В"));
	ПотокВыгрузки.ДобавитьСтроку("ДатаНачала=" + Формат(ОбъектСтруктура.НачПериода, "ДЛФ=Д"));
	ПотокВыгрузки.ДобавитьСтроку("ДатаКонца=" + Формат(ОбъектСтруктура.КонПериода, "ДЛФ=Д"));
	ПотокВыгрузки.ДобавитьСтроку("РасчСчет=" + ОбъектСтруктура.БанковскийСчет.НомерСчета);
	ПотокВыгрузки.ДобавитьСтроку("Документ=Платежное поручение");
	
	// Выводим отмеченные секции документов.
	Для каждого СтрокаСекции Из ДокументыНаЭкспорт Цикл
		
		Если НЕ(СтрокаСекции.Выгружать)Тогда
			Продолжить;
		КонецЕсли;
		
		Буфер = ПолучитьСекциюДокумент(СтрокаСекции, ДокументыНаЭкспорт.Колонки, ОбъектСтруктура);
		КоличествоСрокСекции = СтрЧислоСтрок(Буфер);
		
		Для Сч = 1 По КоличествоСрокСекции Цикл
			ПотокВыгрузки.ДобавитьСтроку(СтрПолучитьСтроку(Буфер, Сч));
		КонецЦикла;
		
		СтрокаСекции.Готовность = - 2;
	КонецЦикла;
	
	ПотокВыгрузки.ДобавитьСтроку("КонецФайла");
	
	Возврат ПотокВыгрузки;
	
КонецФункции // Выгрузить()

// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция пересчитывает сумму из одной валюты в другую
//
// Параметры:      
//	Сумма         - Число - сумма, которую следует пересчитать.
// 	КурсНач       - Число - курс из которого надо пересчитать.
// 	КурсКон       - Число - курс в который надо пересчитать.
// 	КратностьНач  - Число - кратность из которого надо пересчитать 
//                  (по умолчанию = 1).
// 	КратностьКон  - Число - кратность в который надо пересчитать 
//                  (по умолчанию = 1).
//
// Возвращаемое значение: 
//  Число - сумма, пересчитанная в другую валюту.
//
Функция ПересчитатьИзВалютыВВалюту(Сумма, КурсНач, КурсКон,	КратностьНач = 1, КратностьКон = 1) Экспорт
	
	Если (КурсНач = КурсКон) И (КратностьНач = КратностьКон) Тогда
		Возврат Сумма;
	КонецЕсли;
	
	Если КурсНач = 0
	 ИЛИ КурсКон = 0
	 ИЛИ КратностьНач = 0
	 ИЛИ КратностьКон = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Обнаружен нулевой курс валюты. Пересчет не выполнен.'");
        ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);
		Возврат Сумма;
	КонецЕсли;
	
	СуммаПересчитанная = Окр((Сумма * КурсНач * КратностьКон) / (КурсКон * КратностьНач), 2);
	
	Возврат СуммаПересчитанная;
	
КонецФункции // ПересчитатьИзВалютыВВалюту()

// Возвращает курс валюты на дату.
//
Функция ПолучитьКурсВалюты(Валюта, ДатаКурса)
	
	Структура = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта, БазоваяВалюта", Валюта, УЧ_Сервер.НациональнаяВалюта()));
	
	Возврат Структура;
	
КонецФункции // ПолучитьКурсВалюты()

// Функция формирует структуру экспорта.
//
Функция СформироватьСтруктуруЭкспорта()
	
	СтруктураЭкспорта = Новый структура;
	СтруктураЭкспорта.Вставить( "Выгружать",             ""); // "_",
	СтруктураЭкспорта.Вставить( "Готовность",            ""); // "Готовность",
	СтруктураЭкспорта.Вставить( "НомерДок",              ""); // "№ Документа",
	СтруктураЭкспорта.Вставить( "Номер",                 ""); // "Номер",
	СтруктураЭкспорта.Вставить( "Дата",                  ""); // "Дата",
	СтруктураЭкспорта.Вставить( "Операция",              ""); // "Операция",
	СтруктураЭкспорта.Вставить( "БанковскийСчет",        ""); // "Эл. Р/с организации",
	СтруктураЭкспорта.Вставить( "НомерСчетаОрганизации", ""); // "Р/с организации",
	СтруктураЭкспорта.Вставить( "Сумма",                 ""); // "Сумма",
	СтруктураЭкспорта.Вставить( "Контрагент",            ""); // "Контрагент",
	СтруктураЭкспорта.Вставить( "СчетКонтрагента",       ""); // "Р/с контрагента",
	СтруктураЭкспорта.Вставить( "НомерСчетаКонтрагента", ""); // "Эл. Р/с контрагента",
	СтруктураЭкспорта.Вставить( "КвитанцияДата",         ""); // "Дата форм. квитанции",
	СтруктураЭкспорта.Вставить( "КвитанцияВремя",        ""); // "Время форм. квитанции",
	СтруктураЭкспорта.Вставить( "КвитанцияСодержание",   ""); // "Содержание квитанции",
	СтруктураЭкспорта.Вставить( "ПлательщикСчет",        ""); // "Расчетный счет плательщика",
	СтруктураЭкспорта.Вставить( "Плательщик",            ""); // "Плательщик",
	СтруктураЭкспорта.Вставить( "ПлательщикИНН",         ""); // "ИНН плательщика",
	СтруктураЭкспорта.Вставить( "Плательщик1",           ""); // "Наименование плательщика",
	СтруктураЭкспорта.Вставить( "Плательщик2",           ""); // "Расчетный счет плательщика",
	СтруктураЭкспорта.Вставить( "Плательщик3",           ""); // "Банк плательщика",
	СтруктураЭкспорта.Вставить( "Плательщик4",           ""); // "Город банка плательщика",
	СтруктураЭкспорта.Вставить( "ПлательщикРасчСчет",    ""); // "Корсчет банка плательщика",
	СтруктураЭкспорта.Вставить( "ПлательщикБанк1",       ""); // "РЦ банка плательщика",
	СтруктураЭкспорта.Вставить( "ПлательщикБанк2",       ""); // "Город РЦ банка плательщика",
	СтруктураЭкспорта.Вставить( "ПлательщикБИК",         ""); // "БИК РЦ банка плательщика",
	СтруктураЭкспорта.Вставить( "ПлательщикКорсчет",     ""); // "Корсчет РЦ банка плат.",
	СтруктураЭкспорта.Вставить( "ПолучательСчет",        ""); // "Расчетный счет получателя",
	СтруктураЭкспорта.Вставить( "Получатель",            ""); // "Получатель",
	СтруктураЭкспорта.Вставить( "ПолучательИНН",         ""); // "ИНН получателя",
	СтруктураЭкспорта.Вставить( "Получатель1",           ""); // "Наименование получателя",
	СтруктураЭкспорта.Вставить( "Получатель2",           ""); // "Расчетный счет получателя",
	СтруктураЭкспорта.Вставить( "Получатель3",           ""); // "Банк получателя",
	СтруктураЭкспорта.Вставить( "Получатель4",           ""); // "Город банка получателя",
	СтруктураЭкспорта.Вставить( "ПолучательРасчСчет",    ""); // "Корсчет банка получателя",
	СтруктураЭкспорта.Вставить( "ПолучательБанк1",       ""); // "РЦ банка получателя",
	СтруктураЭкспорта.Вставить( "ПолучательБанк2",       ""); // "Город РЦ банка получателя",
	СтруктураЭкспорта.Вставить( "ПолучательБИК",         ""); // "БИК РЦ банка получателя",
	СтруктураЭкспорта.Вставить( "ПолучательКорсчет",     ""); // "Корсчет РЦ банка пол.",
	СтруктураЭкспорта.Вставить( "ВидПлатежа",            ""); // "Вид платежа",
	СтруктураЭкспорта.Вставить( "ВидОплаты",             ""); // "Вид оплаты",
	СтруктураЭкспорта.Вставить( "СтатусСоставителя",     ""); // "Статус составителя",
	СтруктураЭкспорта.Вставить( "ПлательщикКПП",         ""); // "КПП плательщика",
	СтруктураЭкспорта.Вставить( "ПолучательКПП",         ""); // "КПП получателя",
	СтруктураЭкспорта.Вставить( "ПоказательКБК",         ""); // "Показатель КБК",
	СтруктураЭкспорта.Вставить( "ОКАТО",                 ""); // "ОКАТО", // закомментированно 07.08.2018, неактуально с 2014 года
	//СтруктураЭкспорта.Вставить( "ОКТМО",                 ""); // "ОКТМО",  //30.01.2019 вернула ОКАТО
	СтруктураЭкспорта.Вставить( "ПоказательОснования",   ""); // "Показатель основания",
	СтруктураЭкспорта.Вставить( "ПоказательПериода",     ""); // "Показатель нал. периода",
	СтруктураЭкспорта.Вставить( "ПоказательНомера",      ""); // "Показатель номера док.",
	СтруктураЭкспорта.Вставить( "ПоказательДаты",        ""); // "Показатель даты док.",
	СтруктураЭкспорта.Вставить( "ПоказательТипа",        ""); // "Показатель типа платежа",
	СтруктураЭкспорта.Вставить( "Очередность",           ""); // "Очередность платежа",
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа",     ""); // "Назначение платежа",
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа1",    ""); // "Назначение платежа, стр. 1",
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа2",    ""); // "Назначение платежа, стр. 2",
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа3",    ""); // "Назначение платежа, стр. 3",
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа4",    ""); // "Назначение платежа, стр. 4",
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа5",    ""); // "Назначение платежа, стр. 5",
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа6",    ""); // "Назначение платежа, стр. 6",
	СтруктураЭкспорта.Вставить( "Документ",              ""); // "Источник",
	СтруктураЭкспорта.Вставить( "СекцияДокумент",        ""); // "Выгрузка",
	СтруктураЭкспорта.Вставить( "ОписаниеОшибок",        ""); // "Замечания",
	СтруктураЭкспорта.Вставить( "ТипДокумента",          ""); // "Тип пл. документа"
	СтруктураЭкспорта.Вставить("Код",					 ""); // "Уникальный идентификатор платежа"
	СтруктураЭкспорта.Вставить("КодНазПлатежа",			 ""); // "Назначение платежа кодовое"
	
	Возврат СтруктураЭкспорта;
	
КонецФункции // СформироватьСтруктуруЭкспорта()

// Функция получает номер в формате обмена.
//
Функция ПолучитьНомерВФорматеОбмена(НомерДокумента, Знач ПрефиксОрганизации)
	
	Номер = СокрЛП(НомерДокумента);
	
	ПолныйПрефиксОрганизации = ПрефиксОрганизации + "";
	ВхождениеМинуса = Найти(Номер, "-");
	
	Если Найти(Номер, ПолныйПрефиксОрганизации) = 1 И НЕ ПрефиксОрганизации = "" Тогда // попытка удаления полного префикса
		Номер = Сред(Номер, СтрДлина(ПолныйПрефиксОрганизации) + 1);
	ИначеЕсли Найти(Номер, ПрефиксОрганизации) = 1 И НЕ ПрефиксОрганизации = "" Тогда // попытка удаление префикса из номера документа
		Номер = Сред(Номер, СтрДлина(ПрефиксОрганизации) + 1);
	ИначеЕсли ВхождениеМинуса <> 0 Тогда // попытка удаления любого префикса
		Номер = Сред(Номер, ВхождениеМинуса + 1);
	КонецЕсли;
	
	// Так же, может остаться "минус" впереди.
	Если Лев(Номер, 1) = "-" Тогда
		Номер = Сред(Номер, 2);
	КонецЕсли;
	
	// Удаление ведущих нулей.
	Пока Лев(Номер, 1) = "0" Цикл
		Номер = Сред(Номер, 2);
	КонецЦикла;
	
	Возврат Номер;
	
КонецФункции // ПолучитьНомерВФорматеОбмена()

// Функция приводит значения.
//
Функция ПривестиЗначение(Значение)
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Возврат СокрЛП(Значение);		
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		Возврат Формат(Значение, "ЧРД=.; ЧРГ=' '; ЧГ=0");
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		Возврат Формат(Значение, "ДФ=dd.MM.yyyy");
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции // ПривестиЗначение()

#КонецОбласти

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбновитьОбработкуЗаявок" Тогда
		ЗаполнитьВыбВыгрузка();	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеестр(Команда)
	РеестрЗаявок = Неопределено;
	ЗаполнитьВыбВыгрузка();
	Элементы.ОиститьРеестр.Видимость = Ложь;
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Элементы.ОиститьРеестр.Видимость = ЗначениеЗаполнено(РеестрЗаявок);
КонецПроцедуры

