// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАГРУЗКИ

// Функция проверяет документ для загрузки.
//
Функция ПроверитьДокументДляЗагрузки(СтруктураДокумента)
	
	Результат = "";
	
	Если СтруктураДокумента.Готовность > 3 Тогда
		Результат = СтруктураДокумента.ОписаниеОшибок;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПроверитьДокументДляЗагрузки()

// Процедура устанавливает свойство.
//
Процедура УстановитьСвойство(Объект, ИмяСвойства, ЗначениеСвойства, ОбязательнаяЗаменаСтарогоЗначения = ложь, ЭтоНовыйДокумент)
	
	Если ЗначениеСвойства <> Неопределено
	   И Объект[ИмяСвойства] <> ЗначениеСвойства Тогда
		Если ЭтоНовыйДокумент
		 ИЛИ (НЕ ЗначениеЗаполнено(Объект[ИмяСвойства])
		 ИЛИ ОбязательнаяЗаменаСтарогоЗначения)
		 ИЛИ ТипЗнч(Объект[ИмяСвойства]) = Тип("Булево")
		 ИЛИ ТипЗнч(Объект[ИмяСвойства]) = Тип("Дата") Тогда
			Объект[ИмяСвойства] = ЗначениеСвойства;
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры // УстановитьСвойство()

// Процедура рассчитывает курс и сумму документа.
//
Процедура РассчитатьКурсИСуммуРасчетов(СтрокаПлатеж, ВалютаРасчетов, ДатаКурса, ОбъектДокумента, ЭтоНовыйДокумент)
	
	СтруктураКурсаРасчетов = ПолучитьКурсВалюты(ВалютаРасчетов, ДатаКурса);
	УстановитьСвойство(
		СтрокаПлатеж,
		"Курс",
		СтруктураКурсаРасчетов.Курс,
		,
		ЭтоНовыйДокумент
	);
	УстановитьСвойство(
		СтрокаПлатеж,
		"Кратность",
		СтруктураКурсаРасчетов.Кратность,
		,
		ЭтоНовыйДокумент
	);
	СтруктураКурсаДокумента = ПолучитьКурсВалюты(ОбъектДокумента.ВалютаДенежныхСредств, ДатаКурса);
	
	СуммаРасчетов = ПересчитатьИзВалютыВВалюту(
		СтрокаПлатеж.СуммаПлатежа,
		СтруктураКурсаДокумента.Курс,
		СтруктураКурсаРасчетов.Курс,
		СтруктураКурсаДокумента.Кратность,
		СтруктураКурсаРасчетов.Кратность
	);
	
	УстановитьСвойство(
		СтрокаПлатеж,
		"СуммаРасчетов",
		СуммаРасчетов,
		Истина,
		ЭтоНовыйДокумент
	);
	
КонецПроцедуры // РассчитатьКурсИСуммуРасчетов()

// Функция получает представление объекта.
//
Функция ПолучитьПредставлениеОбъекта(Объект)
	
	Если НЕ ПП_Сервер.ЭтоРасходнаяОперация(Объект.ВидОперации) Тогда
		НазваниеОбъекта = НСтр(
			"ru = 'документ ""Поступление на счет"" № %Номер% от %Дата%'"
		);
		НазваниеОбъекта = СтрЗаменить(НазваниеОбъекта, "%Номер%", Строка(СокрЛП(Объект.Номер)));
		НазваниеОбъекта = СтрЗаменить(НазваниеОбъекта, "%Дата%", Строка(Объект.Дата));
	ИначеЕсли ТипЗнч(Объект.Организация) = Тип("СправочникСсылка.Организации") Тогда
		НазваниеОбъекта = НСтр(
			"ru = 'документ ""Расход со счета"" № %Номер% от %Дата%'"
		);
		НазваниеОбъекта = СтрЗаменить(НазваниеОбъекта, "%Номер%", Строка(СокрЛП(Объект.Номер)));
		НазваниеОбъекта = СтрЗаменить(НазваниеОбъекта, "%Дата%", Строка(Объект.Дата));
	Иначе
		НазваниеОбъекта = НСтр("ru = 'объект'");
	КонецЕсли;
	
	Возврат НазваниеОбъекта;
	
КонецФункции // ПолучитьПредставлениеОбъекта()
               
// Процедура заполняет реквизиты документа РасходСоСчета.
//
Процедура ЗаполнитьРеквизитыРасходСоСчета(ОбъектДокумента, ИсходныеДанные, ЭтоНовыйДокумент)
	
	// Заполнение шапки документа.
	
	УстановитьСвойство(
		ОбъектДокумента,
		"НомерВходящегоДокумента",
		ИсходныеДанные.НомерДок,
		,
		ЭтоНовыйДокумент
	);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"Дата",
		ИсходныеДанные.ДатаДок,
		,
		ЭтоНовыйДокумент
	);
	
	Если ИсходныеДанные.ИмяДокумента = "Поступление на счет" Тогда
		УстановитьСвойство(
		ОбъектДокумента,
		"ВидОперации",
		?(ТипЗнч(ИсходныеДанные.Контрагент) = Тип("СправочникСсылка.Организации"), Перечисления.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ, Перечисления.ВидыОперацийПлатежноеПоручение.Поступление),
		,
		ЭтоНовыйДокумент
		);
	Иначе
		Если ИсходныеДанные.ВидОперации = "Перечисление налога" Тогда 			
			ВидОперацииДляПодстановкиВДокумент = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога;
		ИначеЕсли ТипЗнч(ИсходныеДанные.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
			ВидОперацииДляПодстановкиВДокумент = Перечисления.ВидыОперацийПлатежноеПоручение.ОплатаВНХ;
		Иначе
			ВидОперацииДляПодстановкиВДокумент = Перечисления.ВидыОперацийПлатежноеПоручение.Оплата;
		КонецЕсли;
		УстановитьСвойство(
		ОбъектДокумента,
		"ВидОперации",
		ВидОперацииДляПодстановкиВДокумент,//?(ТипЗнч(ИсходныеДанные.Контрагент) = Тип("СправочникСсылка.Организации"), Перечисления.ВидыОперацийПлатежноеПоручение.ОплатаВНХ, Перечисления.ВидыОперацийПлатежноеПоручение.Оплата),
		,
		ЭтоНовыйДокумент
		);
	КонецЕсли;
	
	ТекПредприятие = ПП_Сервер.ПолучитьПредприятие(ИсходныеДанные.ДатаДок, ИсходныеДанные.БанковскийСчет);
	ТекПредприятие2 = ПП_Сервер.ПолучитьПредприятие(ИсходныеДанные.ДатаДок, ИсходныеДанные.СчетКонтрагента);
	Если НЕ ПустаяСтрока(ТекПредприятие) Тогда
		Предприятие = ТекПредприятие;
		Подразделение = БюджетныйНаСервере.ВернутьРеквизит(ТекПредприятие, "ВидДеятельности");
	ИначеЕсли НЕ ПустаяСтрока(ТекПредприятие2) Тогда
		Предприятие = ТекПредприятие2;
		Подразделение = БюджетныйНаСервере.ВернутьРеквизит(ТекПредприятие2, "ВидДеятельности");
	Конецесли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Организация = ИсходныеДанные.БанковскийСчет.Владелец;
	КонецЕсли;
	
	УстановитьСвойство(ОбъектДокумента,"Предприятие",Предприятие,,ЭтоНовыйДокумент);
	УстановитьСвойство(ОбъектДокумента,"Подразделение",Подразделение,,ЭтоНовыйДокумент);    		
	УстановитьСвойство(ОбъектДокумента,"Организация", Организация ,,ЭтоНовыйДокумент);  	
	
	ТекстПлательщика = ?(ЗначениеЗаполнено(Организация.ОсновнойБанковскийСчет) И ЗначениеЗаполнено(Организация.ОсновнойБанковскийСчет.ТекстКорреспондента),Организация.ОсновнойБанковскийСчет.ТекстКорреспондента, Организация.НаименованиеПолное);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"ТекстПлательщика",
		ТекстПлательщика,
		,
		ЭтоНовыйДокумент
	);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"ИННПлательщика",
		?(ЗначениеЗаполнено(Организация.ИНН),Организация.ИНН,""),
		,
		ЭтоНовыйДокумент
	);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"КПППлательщика",
		?(ЗначениеЗаполнено(Организация.КПП),Организация.КПП,""),
		,
		ЭтоНовыйДокумент
	);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"БанковскийСчет",
		ИсходныеДанные.БанковскийСчет,
		,
		ЭтоНовыйДокумент
	);
	
	//Если ЗначениеЗаполнено(ИсходныеДанные.БанковскийСчет) Тогда
	//	УстановитьСвойство(
	//		ОбъектДокумента,
	//		"ВалютныйПлатеж",
	//		ИсходныеДанные.БанковскийСчет.ВалютаДенежныхСредств<>УЧ_Сервер.НациональнаяВалюта(),
	//		,
	//		ЭтоНовыйДокумент
	//	);
	//КонецЕсли;
	
	УстановитьСвойство(
		ОбъектДокумента,
		"Контрагент",
		ИсходныеДанные.Контрагент,
		,
		ЭтоНовыйДокумент);
		
	РеквизитыДоговора = сабОперОбщегоНазначения.ПолучитьДоговорКонтрагентаПоУмолчанию(ИсходныеДанные.Контрагент, Организация, ИсходныеДанные.ИмяДокумента = "Поступление на счет",?(ТипЗнч(ИсходныеДанные.БанковскийСчет) = Тип("СправочникСсылка.БанковскиеСчетаОрганизаций"), ИсходныеДанные.БанковскийСчет.Предприятие, Неопределено));
	УстановитьСвойство(ОбъектДокумента,"Договор",РеквизитыДоговора.Договор, Истина, ЭтоНовыйДокумент);

		
	Если ТипЗнч(ИсходныеДанные.Контрагент) = ТИп("СправочникСсылка.Контрагенты") ИЛИ ТипЗнч(ИсходныеДанные.Контрагент) = Тип("СправочникСсылка.Организации") Тогда 
			ТекстПолучателя = ?(ЗначениеЗаполнено(ИсходныеДанные.Контрагент.ОсновнойБанковскийСчет) И ЗначениеЗаполнено(ИсходныеДанные.Контрагент.ОсновнойБанковскийСчет.ТекстКорреспондента),ИсходныеДанные.Контрагент.ОсновнойБанковскийСчет.ТекстКорреспондента, ИсходныеДанные.Контрагент.НаименованиеПолное);
		
		
		УстановитьСвойство(
			ОбъектДокумента,
			"ТекстПолучателя",
			ТекстПолучателя,
			,
			ЭтоНовыйДокумент);
		
		УстановитьСвойство(
		ОбъектДокумента,
		"ИННПолучателя",
		?(ЗначениеЗаполнено(ИсходныеДанные.Контрагент.ИНН),ИсходныеДанные.Контрагент.ИНН,""),
		,
		ЭтоНовыйДокумент);
		
		УстановитьСвойство(
		ОбъектДокумента,
		"КПППолучателя",
		?(ЗначениеЗаполнено(ИсходныеДанные.Контрагент.КПП),ИсходныеДанные.Контрагент.КПП,""),
		,
		ЭтоНовыйДокумент);
	  КонецЕсли;  		
		
		
	УстановитьСвойство(ОбъектДокумента, "СчетКонтрагента",
		ИсходныеДанные.СчетКонтрагента,
		, ЭтоНовыйДокумент);     	
	
	УстановитьСвойство(
		ОбъектДокумента,
		"СуммаДокумента",
		ИсходныеДанные.СуммаДокумента,
		Истина,
		ЭтоНовыйДокумент
	);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"ВидПлатежа",
		ИсходныеДанные.ВидПлатежа,
		Истина,
		ЭтоНовыйДокумент
	);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"Акцептован",
		Истина,
		Истина,
		ЭтоНовыйДокумент
	);
	
	УстановитьСвойство(ОбъектДокумента, "ОчередностьПлатежа", ИсходныеДанные.Очередность, Истина, ЭтоНовыйДокумент);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"НазначениеПлатежа",
		ИсходныеДанные.НазначениеПлатежа,
		Истина,
		ЭтоНовыйДокумент
	);
	
	НачалоПодстрокиНДС = Найти(ИсходныеДанные.НазначениеПлатежа ,"НДС");
	СтрокаНДС = Сред(ИсходныеДанные.НазначениеПлатежа, НачалоПодстрокиНДС, 8);
	
	Если Найти(СтрокаНДС , "18")  Тогда
		СтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("18%");
	ИначеЕсли Найти(СтрокаНДС , "10") Тогда
		СтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("10%");
	Иначе
		СтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("Без НДС");
	КонецЕсли;
	
	УстановитьСвойство(
		ОбъектДокумента,
		"СтавкаНДС",
		СтавкаНДС,
		Истина,
		ЭтоНовыйДокумент
	);
	
	СуммаНДС = ИсходныеДанные.СуммаДокумента - (ИсходныеДанные.СуммаДокумента) / ((?(СтавкаНДС.НеОблагается,0,СтавкаНДС.Ставка) + 100) / 100);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"СуммаНДС",
		СуммаНДС,
		Истина,
		ЭтоНовыйДокумент
	);
	
	Если ИсходныеДанные.ВидОперации = "Перечисление налога" Тогда
		УстановитьСвойство(ОбъектДокумента,"КодБК",ИсходныеДанные.ПоказательКБК,,ЭтоНовыйДокумент);
		УстановитьСвойство(ОбъектДокумента,"КодОКАТО",ИсходныеДанные.ОКАТО,,ЭтоНовыйДокумент);
		УстановитьСвойство(ОбъектДокумента,"СтатусСоставителя",ИсходныеДанные.СтатусСоставителя,,ЭтоНовыйДокумент);
		УстановитьСвойство(ОбъектДокумента,"УИН",ИсходныеДанные.Код,,ЭтоНовыйДокумент);
		УстановитьСвойство(ОбъектДокумента,"ПоказательОснования",ИсходныеДанные.ПоказательОснования,,ЭтоНовыйДокумент);
		УстановитьСвойство(ОбъектДокумента,"ПоказательТипа",ИсходныеДанные.ПоказательТипа,,ЭтоНовыйДокумент);
		УстановитьСвойство(ОбъектДокумента,"ПоказательНомера",ИсходныеДанные.ПоказательНомера,,ЭтоНовыйДокумент);
		УстановитьСвойство(ОбъектДокумента,"ПоказательДаты",ИсходныеДанные.ПоказательДаты,,ЭтоНовыйДокумент);
		УстановитьСвойство(ОбъектДокумента,"ПоказательПериода",ИсходныеДанные.ПоказательПериода,,ЭтоНовыйДокумент);
	КонецЕсли;	
	
	Если ЭтоНовыйДокумент Тогда
		ОбъектДокумента.УстановитьНовыйНомер();
		Если НЕ ЕстьНеЦифры(ИсходныеДанные.Номер) Тогда
			ОкончаниеНомера = Формат(Число(СокрЛП(ИсходныеДанные.Номер)), "ЧН=; ЧГ=0");
			ДлинаОкончания = СтрДлина(ОкончаниеНомера);
			ДлинаНомера = СтрДлина(СокрЛП(ОбъектДокумента.Номер));
			Если ДлинаОкончания < 3 Тогда
				ДлинаОкончания = 3;
			КонецЕсли;
			ОбъектДокумента.Номер = Лев(ОбъектДокумента.Номер, ДлинаНомера - ДлинаОкончания) + Формат(Число(ОкончаниеНомера), "ЧЦ=" + ДлинаОкончания + "; ЧВН=; ЧГ=0");
		КонецЕсли;
	КонецЕсли;   						   
	
КонецПроцедуры // ЗаполнитьРеквизитыРасходСоСчета()

// Процедура заполняет реквизиты документа ПоступлениеНаСчет.
//
Процедура ЗаполнитьРеквизитыПоступлениеНаСчет(ОбъектДокумента, ИсходныеДанные, ЭтоНовыйДокумент)
	
	УстановитьСвойство(
		ОбъектДокумента,
		"ДатаВходящегоДокумента",
		ИсходныеДанные.ДатаДок,
		,
		ЭтоНовыйДокумент
	);
	УстановитьСвойство(
		ОбъектДокумента,
		"ВидОперации",
		?(ТипЗнч(ИсходныеДанные.Контрагент) = Тип("СправочникСсылка.Организации"), Перечисления.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ, Перечисления.ВидыОперацийПлатежноеПоручение.Поступление),
		,
		ЭтоНовыйДокумент
	);
	
	ТекПредприятие = ПП_Сервер.ПолучитьПредприятие(ИсходныеДанные.ДатаДок, ИсходныеДанные.БанковскийСчет);
	ТекПредприятие2 = ПП_Сервер.ПолучитьПредприятие(ИсходныеДанные.ДатаДок, ИсходныеДанные.СчетКонтрагента);
	Если НЕ ПустаяСтрока(ТекПредприятие) Тогда
		Предприятие = ТекПредприятие;
		Подразделение = БюджетныйНаСервере.ВернутьРеквизит(ТекПредприятие, "ВидДеятельности");
	ИначеЕсли НЕ ПустаяСтрока(ТекПредприятие2) Тогда
		Предприятие = ТекПредприятие2;
		Подразделение = БюджетныйНаСервере.ВернутьРеквизит(ТекПредприятие2, "ВидДеятельности");
	Конецесли;			
	
	////если не найдено, то офис
	//Если НЕ ЗначениеЗаполнено(Предприятие) Тогда
	//	Предприятие = ВернутьОфис();	
	//КонецЕсли;
	
	УстановитьСвойство(ОбъектДокумента,"Предприятие",Предприятие,,ЭтоНовыйДокумент);
	УстановитьСвойство(ОбъектДокумента,"Подразделение",Подразделение,,ЭтоНовыйДокумент);
	
	Если ТипЗнч(ИсходныеДанные.Контрагент) = Тип("СправочникСсылка.Контрагенты") ИЛИ ТипЗнч(ИсходныеДанные.Контрагент) = Тип("СправочникСсылка.Организации") Тогда 
		УстановитьСвойство(ОбъектДокумента,"Организация",ИсходныеДанные.Контрагент,,ЭтоНовыйДокумент);
		
		РеквизитыДоговора = сабОперОбщегоНазначения.ПолучитьДоговорКонтрагентаПоУмолчанию(ИсходныеДанные.Контрагент);
		УстановитьСвойство(ОбъектДокумента,"Договор",РеквизитыДоговора.Договор, Истина, ЭтоНовыйДокумент);
		
		УстановитьСвойство(
			ОбъектДокумента,
			"ИННПлательщика",
			?( ЗначениеЗаполнено(ИсходныеДанные.Контрагент.ИНН),ИсходныеДанные.Контрагент.ИНН,"" ),
			,
			ЭтоНовыйДокумент
		);
	
		УстановитьСвойство(
			ОбъектДокумента,
			"КПППлательщика",
			?( ЗначениеЗаполнено(ИсходныеДанные.Контрагент.КПП),ИсходныеДанные.Контрагент.КПП,""),
			,
			ЭтоНовыйДокумент
		);
		
		ТекстПлательщика = ?(ЗначениеЗаполнено(ИсходныеДанные.Контрагент.ОсновнойБанковскийСчет) И ЗначениеЗаполнено(ИсходныеДанные.Контрагент.ОсновнойБанковскийСчет.ТекстКорреспондента),ИсходныеДанные.Контрагент.ОсновнойБанковскийСчет.ТекстКорреспондента, ИсходныеДанные.Контрагент.НаименованиеПолное);
			
			УстановитьСвойство(
			ОбъектДокумента,
			"ТекстПлательщика",
			ТекстПлательщика,
			,
			ЭтоНовыйДокумент);
	КонецЕсли;
	
	ТекстПолучателя = ?(ЗначениеЗаполнено(Организация.ОсновнойБанковскийСчет) И ЗначениеЗаполнено(Организация.ОсновнойБанковскийСчет.ТекстКорреспондента),Организация.ОсновнойБанковскийСчет.ТекстКорреспондента, Организация.НаименованиеПолное);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"ТекстПолучателя",
		ТекстПолучателя,
		,
		ЭтоНовыйДокумент
	);    	
		
		
		   
	
	
	УстановитьСвойство(
		ОбъектДокумента,
		"БанковскийСчет",
		ИсходныеДанные.СчетКонтрагента,
		,
		ЭтоНовыйДокумент
	);
	
	//Если ЗначениеЗаполнено(ИсходныеДанные.БанковскийСчет) Тогда
	//	УстановитьСвойство(
	//		ОбъектДокумента,
	//		"ВалютныйПлатеж",
	//		ИсходныеДанные.БанковскийСчет.ВалютаДенежныхСредств<>УЧ_Сервер.НациональнаяВалюта(),
	//		,
	//		ЭтоНовыйДокумент
	//	);
	//КонецЕсли;

	УстановитьСвойство(
		ОбъектДокумента,
		"СуммаДокумента",
		ИсходныеДанные.СуммаДокумента,
		Истина,
		ЭтоНовыйДокумент
	);
	УстановитьСвойство(
		ОбъектДокумента,
		"НомерВходящегоДокумента",
		ИсходныеДанные.НомерДок,
		,
		ЭтоНовыйДокумент
	);
	УстановитьСвойство(
		ОбъектДокумента,
		"Дата",
		ИсходныеДанные.ДатаДок,
		,
		ЭтоНовыйДокумент
	);
	УстановитьСвойство(
		ОбъектДокумента,
		"ДатаВходящегоДокумента",
		ИсходныеДанные.ДатаДок,
		,
		ЭтоНовыйДокумент
	);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"НазначениеПлатежа",
		ИсходныеДанные.НазначениеПлатежа,
		Истина,
		ЭтоНовыйДокумент
	);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"Акцептован",
		Истина,
		Истина,
		ЭтоНовыйДокумент
	);
	
	НачалоПодстрокиНДС = Найти(ИсходныеДанные.НазначениеПлатежа ,"НДС");
	СтрокаНДС = Сред(ИсходныеДанные.НазначениеПлатежа, НачалоПодстрокиНДС, 8);
	
	Если Найти(СтрокаНДС , "18")  Тогда
		СтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("18%");
	ИначеЕсли Найти(СтрокаНДС , "10") Тогда
		СтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("10%");
	Иначе
		СтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("Без НДС");
	КонецЕсли;
	
	УстановитьСвойство(
		ОбъектДокумента,
		"СтавкаНДС",
		СтавкаНДС,
		Истина,
		ЭтоНовыйДокумент
	);
	
	СуммаНДС = ИсходныеДанные.СуммаДокумента - (ИсходныеДанные.СуммаДокумента) / ((?(СтавкаНДС.НеОблагается,0,СтавкаНДС.Ставка) + 100) / 100);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"СуммаНДС",
		СуммаНДС,
		Истина,
		ЭтоНовыйДокумент
	);  
	
	Если ЭтоНовыйДокумент Тогда
		ОбъектДокумента.УстановитьНовыйНомер();
		Если НЕ ЕстьНеЦифры(ИсходныеДанные.Номер) Тогда
			ОкончаниеНомера = Формат(Число(СокрЛП(ИсходныеДанные.Номер)), "ЧН=; ЧГ=0");
			ДлинаОкончания = СтрДлина(ОкончаниеНомера);
			ДлинаНомера = СтрДлина(СокрЛП(ОбъектДокумента.Номер));
			Если ДлинаОкончания < 3 Тогда
				ДлинаОкончания = 3;
			КонецЕсли;
			ОбъектДокумента.Номер = Лев(ОбъектДокумента.Номер, ДлинаНомера - ДлинаОкончания) + Формат(Число(ОкончаниеНомера), "ЧЦ=" + ДлинаОкончания + "; ЧВН=; ЧГ=0");			
			ОбъектДокумента.НомерВходящегоДокумента = ОкончаниеНомера;
		КонецЕсли;
	КонецЕсли;

	
		УстановитьСвойство(ОбъектДокумента, "Контрагент",
		Организация,
		, ЭтоНовыйДокумент);		
		
		УстановитьСвойство(
			ОбъектДокумента,
			"ИННПолучателя",
			?(ЗначениеЗаполнено(Организация.ИНН),Организация.ИНН, ""),
			,
			ЭтоНовыйДокумент
			);
			
		УстановитьСвойство(
			ОбъектДокумента,
			"КПППолучателя",
			?(ЗначениеЗаполнено(Организация.КПП),Организация.КПП,""),
			,
			ЭтоНовыйДокумент
			);
		
		УстановитьСвойство(ОбъектДокумента, "СчетКонтрагента",
		ИсходныеДанные.БанковскийСчет ,
		, ЭтоНовыйДокумент);
	
		
	// Заполнение табличной части документа.
	//Если ИсходныеДанные.ВидОперации = Строка(Перечисления.ВидыОперацийПлатежноеПоручение.Оплата) Тогда
	
			
КонецПроцедуры // ЗаполнитьРеквизитыПоступлениеНаСчет()

// Процедура задает пометку на удаление.
//
Процедура ЗадатьПометкуНаУдаление(ОбъектДляПометки, Пометка)
	
	НазваниеОбъекта = ПолучитьПредставлениеОбъекта(ОбъектДляПометки);
	НазваниеДействия = ?(Пометка, НСтр("ru = ' помечен на удаление'"), НСтр("ru = ' отменена пометка на удаление'"));
	Попытка
		ОбъектДляПометки.Записать(РежимЗаписиДокумента.Запись);
		ОбъектДляПометки.УстановитьПометкуУдаления(Пометка);
		ТекстСообщения = НСтр("ru = '%НазваниеОбъектаЛев% %НазваниеОбъектаСред%: %НазваниеДействия%.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаЛев%", ВРег(Лев(НазваниеОбъекта, 1)));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаСред%", Сред(НазваниеОбъекта, 2));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеДействия%", НазваниеДействия);		
		ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);		
	Исключение		
		ТекстСообщения = НСтр("ru = '%НазваниеОбъектаЛев% %НазваниеОбъектаСред%: не %НазваниеДействия%! Произошли ошибки при записи!'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаЛев%", ВРег(Лев(НазваниеОбъекта, 1)));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаСред%", Сред(НазваниеОбъекта, 2));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеДействия%", НазваниеДействия);
		ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);
	КонецПопытки
	
КонецПроцедуры // ЗадатьПометкуНаУдаление()

// Процедура записывает объект.
//
Процедура ЗаписатьОбъект(ОбъектДляЗаписи, СтрокаСекции, ЭтоНовыйДокумент)
	
	ТипДокумента = ОбъектДляЗаписи.Метаданные().Имя;
	Если ТипДокумента = "РасходСоСчета" Тогда
		ИмяДокумента = "Расход со счета";
	ИначеЕсли ТипДокумента = "ПоступлениеНаСчет" Тогда
		ИмяДокумента = "Поступление на счет";
	КонецЕсли;
	//УстановитьСвойство(
	//	ОбъектДляЗаписи,
	//	"Комментарий",
	//	"Загружен из Клиент-Банка",
	//	,
	//	ЭтоНовыйДокумент
	//);
	ОбъектМодифицирован = ОбъектДляЗаписи.Модифицированность();
	ОбъектПроведен = ОбъектДляЗаписи.Проведен;
	НазваниеОбъекта = ПолучитьПредставлениеОбъекта(ОбъектДляЗаписи);
	
	Если ОбъектМодифицирован Тогда
		Попытка
			Если ОбъектПроведен Тогда
				ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				СтрокаСекции.Проведен = ОбъектДляЗаписи.Проведен;
			Иначе
				ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли; 			
			ТекстСообщения = НСтр("ru = '%Статус% %НазваниеОбъекта%.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%" , ?(ЭтоНовыйДокумент, НСтр("ru = 'Создан '"), НСтр("ru = 'Перезаписан '")));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъекта%", НазваниеОбъекта);
            ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);
		Исключение
			ТекстСообщения = НСтр("ru = '%НазваниеОбъектаЛев% %НазваниеОбъектаСред% %Статус%! Произошли ошибки при записи!'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаЛев%", ВРег(Лев(НазваниеОбъекта, 1)));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаСред%", Сред(НазваниеОбъекта, 2));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%", ?(ОбъектДляЗаписи.ЭтоНовый(), НСтр("ru = ' не создан'"), НСтр("ru = ' не записан'")));
			ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);
			Возврат;
		КонецПопытки;
	Иначе
		ТекстСообщения = НСтр("ru = 'Уже существует %НазваниеОбъекта%. Возможно загрузка производилась ранее.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъекта%", НазваниеОбъекта);
        ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);
	КонецЕсли;
	
	Если ПроводитьЗагружаемые И (ОбъектМодифицирован ИЛИ НЕ ОбъектПроведен) Тогда
		Попытка
			ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Проведение);
			ТекстСообщения = НСтр("ru = '%Статус% %НазваниеОбъекта% %Статус%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%", ?(ОбъектПроведен, НСтр("ru = 'Перепроведен '"), НСтр("ru = 'Проведен '")));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъекта%", НазваниеОбъекта);
			ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);
			СтрокаСекции.Проведен = ОбъектДляЗаписи.Проведен;
		Исключение
			ТекстСообщения = НСтр("ru = '%НазваниеОбъектаЛев% %НазваниеОбъектаСред% не проведен! Произошли ошибки при проведении!'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаЛев%", ВРег(Лев(НазваниеОбъекта, 1)));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаСред%", Сред(НазваниеОбъекта, 2));
			ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);
		КонецПопытки
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьОбъект()

// Процедура синхронизирует документы по счетам.
//
Процедура СинхронизироватьДокументыПоСчетам(ДокументыКИмпорту, ВидДокументовИсходящих, ВидДокументовВходящих, НачалоИнтервалаЗагрузки, КонецИнтервалаЗагрузки, ИмпортРасчетныеСчета) Экспорт
	
	// Составляем список счетов.
	СписокСчетов = Новый СписокЗначений;
	Для каждого СтрокаСчета Из ИмпортРасчетныеСчета Цикл
		СписокСчетов.Добавить(СокрЛП(СтрокаСчета.РасчСчет));
	КонецЦикла;
	
	ДокументыНаУдаление = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	" + ВидДокументовИсходящих + ".Ссылка,
	|	" + ВидДокументовИсходящих + ".ДатаВходящегоДокумента,
	|	" + ВидДокументовИсходящих + ".БанковскийСчет.НомерСчета
	|ИЗ
	|	Документ." + ВидДокументовИсходящих + " КАК " + ВидДокументовИсходящих + "
	|ГДЕ
	|	" + ВидДокументовИсходящих + ".Дата >= &ДатаНач
	| И " + ВидДокументовИсходящих + ".Дата <= &ДатаКон
	| И " + ВидДокументовИсходящих + ".БанковскийСчет.НомерСчета В(&НомераСчетов)
	| И " + ВидДокументовИсходящих + ".Организация = &Организация");
	
	ДокументыНаУдаление.УстановитьПараметр("ДатаНач", НачалоИнтервалаЗагрузки);
	ДокументыНаУдаление.УстановитьПараметр("ДатаКон", КонецИнтервалаЗагрузки);
	ДокументыНаУдаление.УстановитьПараметр("НомераСчетов", СписокСчетов);
	ДокументыНаУдаление.УстановитьПараметр("Организация", Организация);
	ВыборкаДокументов = ДокументыНаУдаление.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		СтрокаВТаблицеИмпорта = ДокументыКИмпорту.Найти(ВыборкаДокументов.Ссылка, "Документ"); 		
		Если СтрокаВТаблицеИмпорта = Неопределено Тогда
			ОбъектДокументаКУдаление = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
			Если ИспользоватьГраницуОбработки Тогда
				Если ЗначениеЗаполнено(ДатаГраницыОбработки) Тогда
					Если НачалоДня(ОбъектДокументаКУдаление.Дата) <= НачалоДня(ДатаГраницыОбработки) Тогда
						ТекстСообщения = НСтр("ru = 'Платежный документ ""%ОбъектДокументаКУдаление%"" не помечен на удаление, так как имеет дату равной или меньшей границы обработки!'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбъектДокументаКУдаление%", ОбъектДокументаКУдаление);
						ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			//ЗадатьПометкуНаУдаление(ОбъектДокументаКУдаление, Истина);
		КонецЕсли;
	КонецЦикла;
	
	// Поступления на счет, отсутствующие в списке загруженным помечаем
	// на удаление.
	ДокументыНаУдаление = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	" + ВидДокументовВходящих + ".Ссылка,
	|	" + ВидДокументовВходящих + ".ДатаВходящегоДокумента,
	|	" + ВидДокументовВходящих + ".БанковскийСчет.НомерСчета
	|ИЗ
	|	Документ." + ВидДокументовВходящих + " КАК " + ВидДокументовВходящих + "
	|ГДЕ
	|	" + ВидДокументовВходящих + ".ДатаВходящегоДокумента >= &ДатаНач
	| И " + ВидДокументовВходящих + ".ДатаВходящегоДокумента <= &ДатаКон
	| И " + ВидДокументовВходящих + ".БанковскийСчет.НомерСчета В(&НомераСчетов)");
	
	ДокументыНаУдаление.УстановитьПараметр("ДатаНач", НачалоИнтервалаЗагрузки);
	ДокументыНаУдаление.УстановитьПараметр("ДатаКон", КонецИнтервалаЗагрузки);
	ДокументыНаУдаление.УстановитьПараметр("НомераСчетов", СписокСчетов);
	ВыборкаДокументов = ДокументыНаУдаление.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		СтрокаВТаблицеИмпорта = ДокументыКИмпорту.Найти(ВыборкаДокументов.Ссылка, "Документ");
		Если СтрокаВТаблицеИмпорта = Неопределено Тогда
			ОбъектДокументаКУдаление = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
			Если ИспользоватьГраницуОбработки Тогда
				Если ЗначениеЗаполнено(ДатаГраницыОбработки) Тогда
					Если НачалоДня(ОбъектДокументаКУдаление.Дата) <= НачалоДня(ДатаГраницыОбработки) Тогда
						ТекстСообщения = НСтр("ru = 'Платежный документ ""%ОбъектДокументаКУдаление%"" не помечен на удаление, так как имеет дату равной или меньшей границы обработки!'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбъектДокументаКУдаление%", ОбъектДокументаКУдаление);
						ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			//ЗадатьПометкуНаУдаление(ОбъектДокументаКУдаление, Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // СинхронизироватьДокументыПоСчетам()

// Процедура загружает банковские выписки.
//
Процедура Загрузить(СтрокаСекции) Экспорт
	
	//ДокументыКИмпорту = Загрузка.Выгрузить();
	//НачалоИнтервалаЗагрузки = Дата("00010101");
	//КонецИнтервалаЗагрузки  = Дата("00010101");
	//ДокументыКИмпорту.Индексы.Добавить("Документ");
	//Результат = ПолучитьДатуИзСтроки(НачалоИнтервалаЗагрузки, ИмпортЗаголовок.ДатаНачала);
	//
	//Если НЕ ЗначениеЗаполнено(Результат) Тогда
	//	ТекстСообщения  = НСтр("ru = 'В заголовке файла загрузки неверно указана дата начала интервала! Файл не может быть загружен!'");
	//	ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);
	//	Возврат;
	//КонецЕсли;
	//
	//Результат = ПолучитьДатуИзСтроки(КонецИнтервалаЗагрузки, ИмпортЗаголовок.ДатаКонца);
	//
	//Если НЕ ЗначениеЗаполнено(Результат) Тогда
	//	ТекстСообщения = НСтр("ru = 'В заголовке файла импорта неверно указана дата окончания интервала!'");
	//	ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);
	//КонецЕсли;
	//
	//// Загружаем отмеченные секции документов.
	//Для каждого СтрокаСекции Из ДокументыКИмпорту Цикл
		
		Если СтрокаСекции.Загружать Тогда
			РезультатПроверки = ПроверитьДокументДляЗагрузки(СтрокаСекции);
			
			Если ПустаяСтрока(РезультатПроверки) Тогда
				
				Если НЕ ЗначениеЗаполнено(СтрокаСекции.Документ) Тогда
					
					// В ИБ не найден документ, необходимо создать новый.
					ОбъектДокумента = Документы[СтрокаСекции.ВидДокумента].СоздатьДокумент();
					ЭтоНовыйДокумент = Истина;
					
				Иначе
					
					// В ИБ найден документ, необходимо получить его объект.
					ОбъектДокумента = СтрокаСекции.Документ.ПолучитьОбъект();
					
					Если ОбъектДокумента = Неопределено Тогда
						Сообщить("Исключение!!! Вероятно, перед повторной загрузкой был удален документ!");
						ОбъектДокумента = Документы[СтрокаСекции.ВидДокумента].СоздатьДокумент();
						ЭтоНовыйДокумент = Истина;
					Иначе
						ЭтоНовыйДокумент = Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
				// Заполняем все реквизиты документа.
				ТипДокумента = ОбъектДокумента.Метаданные().Имя;
				
				Если СтрокаСекции.ИмяДокумента = "Расход со счета" Тогда
					//ЗаполнитьРеквизитыРасходСоСчета(ОбъектДокумента, СтрокаСекции, ЭтоНовыйДокумент);
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					               |	ПлатежноеПоручение.Ссылка
					               |ИЗ
					               |	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
					               |ГДЕ
					               |	ПлатежноеПоручение.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
					               |	И (ПлатежноеПоручение.Номер ПОДОБНО &Номер
					               |			ИЛИ ПлатежноеПоручение.НомерВходящегоДокумента ПОДОБНО &Номер)
					               |	И ПлатежноеПоручение.БанковскийСчет = &БанковскийСчет
					               |	И ПлатежноеПоручение.СуммаДокумента = &СуммаДокумента"; 								   
					Запрос.УстановитьПараметр("ДатаНачала",НачалоДня(СтрокаСекции.ДатаДок));
					Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(СтрокаСекции.ДатаДок));
					Запрос.УстановитьПараметр("Номер", СтрокаСекции.НомерДок);
					Запрос.УстановитьПараметр("БанковскийСчет", СтрокаСекции.БанковскийСчет);
					Запрос.УстановитьПараметр("СуммаДокумента", СтрокаСекции.СуммаДокумента);
					Выборка = Запрос.Выполнить().Выбрать();
					ДокументНайден = ложь; 
					
					Пока Выборка.Следующий() Цикл
						
						Если НЕ ДокументНайден Тогда 
							
							Если НЕ Выборка.Ссылка.Акцептован Тогда
								ДокументОбъект = Выборка.ссылка.ПолучитьОбъект();
								ДокументОбъект.Акцептован = истина;
								ДокументОбъект.Записать();
								ДокументНайден = Истина;
								СтрокаСекции.Акцептован = Истина;
								
								Попытка
									АкцептоватьЗаявкиНаОплату(ОбъектДокумента.Ссылка);
								Исключение
								КонецПопытки;
								
								Сообщить("Документ " + Выборка.Ссылка + " акцептован.");
							Иначе
								Сообщить("Документ №" + Выборка.Ссылка.Номер + " от " + Выборка.Ссылка.Дата + " уже акцептован. Возможно загрузка выполняется повторно.");
								ДокументНайден = Истина;
							КонецЕсли;
							
							ОбъектДокумент = СтрокаСекции.Документ.ПолучитьОбъект();
							
							Если Не ЗначениеЗаполнено(ОбъектДокумента.СчетКонтрагента) И ТипЗнч(СтрокаСекции.СчетКонтрагента)= Тип("СправочникСсылка.БанковскиеСчетаОрганизаций") Тогда
								ОбъектДокумент.СчетКонтрагента = СтрокаСекции.СчетКонтрагента;
								ОбъектДокумент.Контрагент	   = СтрокаСекции.СчетКонтрагента.Владелец;
								ОбъектДокумент.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
							КонецЕсли;
						

						Иначе
							Сообщить("Найден дублирующий документ № "  + СтрокаСекции.НомерДок + " от " + СтрокаСекции.ДатаДок);
						КонецЕсли;
						
					КонецЦикла;
					
					Если НЕ ДокументНайден Тогда
						
						ЗаполнитьРеквизитыРасходСоСчета(ОбъектДокумента, СтрокаСекции, ЭтоНовыйДокумент);
						
						Если ОбъектДокумента.ПометкаУдаления Тогда
							ЗадатьПометкуНаУдаление(ОбъектДокумента, Ложь);
						КонецЕсли;
						
						ЗаписатьОбъект(ОбъектДокумента, СтрокаСекции, ЭтоНовыйДокумент);
												
						Если НЕ ОбъектДокумента.ЭтоНовый() Тогда
							
							Если НЕ ЗначениеЗаполнено(СтрокаСекции.Документ) Тогда
								
								СтрокаСекции.Документ = ОбъектДокумента.Ссылка;
								
							КонецЕсли;
							
						КонецЕсли;

						//Сообщить("Для акцептации не найден документ номер " + СтрокаСекции.НомерДок + " от " + СтрокаСекции.ДатаДок);
					КонецЕсли;
					
				ИначеЕсли СтрокаСекции.ИмяДокумента = "Поступление на счет" Тогда
					
					Если ЭтоНовыйДокумент ТОгда
						ЗаполнитьРеквизитыРасходСоСчета(ОбъектДокумента, СтрокаСекции, ЭтоНовыйДокумент);
						
						// 26.05.16 поступлениевнх на основании оплатывнх
						Если ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ Тогда
							ДокОснование = ПП_Сервер.НайтиОснованиеДляПоступленияВНХ(ОбъектДокумента);
							
							Если ЗначениеЗаполнено(ДокОснование) Тогда
								ОбъектДокумента.Заявка = ДокОснование;
							КонецЕсли;
							
						КонецЕсли;
						
						//++д1 07.11.18 подставляем счет счет
						Если НЕ ПП_Сервер.ЭтоРасходнаяОперация(ОбъектДокумента.ВидОперации) И Не ЗначениеЗаполнено(ОбъектДокумента.Заявка) Тогда
							ОбъектДокумента.Заявка = ПП_Сервер.ПодобратьСчетПоПлатежномуПоручению(СтрокаСекции.Контрагент, СтрокаСекции.НазначениеПлатежа);
						КонецЕсли;
						//--д1
					
						Если ОбъектДокумента.ПометкаУдаления Тогда
							ЗадатьПометкуНаУдаление(ОбъектДокумента, Ложь);
						КонецЕсли;
						
						ЗаписатьОбъект(ОбъектДокумента, СтрокаСекции, ЭтоНовыйДокумент);
						
						Если НЕ ОбъектДокумента.ЭтоНовый() Тогда
							
							Если НЕ ЗначениеЗаполнено(СтрокаСекции.Документ) Тогда
								СтрокаСекции.Документ = ОбъектДокумента.Ссылка;
								
								Если СтрокаСекции.ВидДокумента = "РасходСоСчета" Тогда
									РеквизитДаты = "ДатаОплаты";
									РеквизитНомера = "Номер";
								Иначе
									РеквизитДаты = "ДатаВходящегоДокумента";
									РеквизитНомера = "НомерВходящегоДокумента";
								КонецЕсли;
								
								СтрокаСекции.НомерДок = ОбъектДокумента[РеквизитНомера];
							КонецЕсли;
							
						КонецЕсли;
						
					Иначе 						
						
						ОбъектДокумент = СтрокаСекции.Документ.ПолучитьОбъект();
						
						// 26.05.16 поступлениевнх на основании оплатывнх
						Если ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ Тогда
							ДокОснование = ПП_Сервер.НайтиОснованиеДляПоступленияВНХ(ОбъектДокумента);
							
							Если ЗначениеЗаполнено(ДокОснование) Тогда
								ОбъектДокумент.Заявка = ДокОснование;
							КонецЕсли;
							
						КонецЕсли;
						
						Если Не ЗначениеЗаполнено(ОбъектДокумента.СчетКонтрагента) И ТипЗнч(СтрокаСекции.СчетКонтрагента)= Тип("СправочникСсылка.БанковскиеСчетаОрганизаций") Тогда
							ОбъектДокумент.БанковскийСчет = СтрокаСекции.СчетКонтрагента;
							ОбъектДокумент.Организация	   = СтрокаСекции.СчетКонтрагента.Владелец;
							ОбъектДокумент.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
						КонецЕсли;
												
						ОбъектДокумента.Акцептован = истина;
						ОбъектДокумента.Записать();
						ДокументНайден = Истина;
						СтрокаСекции.Акцептован = Истина;
						
						Попытка
							АкцептоватьЗаявкиНаОплату(ОбъектДокумента.Ссылка);
						Исключение
						КонецПопытки;
						
						Сообщить("Документ " + ОбъектДокумента.Ссылка + " акцептован.");   
					КонецЕсли;
					
				КонецЕсли;
				
				//создаем БанкВыписку
				СоздатьБанковскуюВыписку(ОбъектДокумента, СтрокаСекции);
				
			Иначе
				ТекстСообщения = НСтр(
					"ru = 'Платежный документ ""%Операция%"" №%Номер% от %Дата% не может быть загружен:
					|%РезультатПроверки%!'"
				);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Операция%", СтрокаСекции.Операция);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номер%", СтрокаСекции.Номер);                                                                     
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Дата%", СтрокаСекции.Дата);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РезультатПроверки%", РезультатПроверки);
				ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);
			КонецЕсли;
						
		КонецЕсли;
		
	//КонецЦикла;
	
	//// Платежные поручения исходящие, отсутствующие в списке загруженным помечаем
	//// на удаление.
	//СинхронизироватьДокументыПоСчетам(
	//	ДокументыКИмпорту,
	//	"ПлатежноеПоручение",
	//	"ПлатежноеПоручение",
	//	НачалоИнтервалаЗагрузки,
	//	КонецИнтервалаЗагрузки,
	//	ИмпортРасчетныеСчета
	//);
	
КонецПроцедуры // Загрузить()

Процедура СоздатьБанковскуюВыписку(ОбъектДокумента, СтрокаСекции)
	Если НЕ СоздаватьБанковскиеВыписки Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	УЧ_ДвижениеДС.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УЧ_ДвижениеДС КАК УЧ_ДвижениеДС
	|ГДЕ
	|	УЧ_ДвижениеДС.ДокОснование = &ДокОснование";
	
	Запрос.УстановитьПараметр("ДокОснование", ОбъектДокумента.Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если НЕ Выборка.Количество() Тогда
		
		НовыйДокумент = Документы.УЧ_ДвижениеДС.СоздатьДокумент();
		НовыйДокумент.Заполнить(Новый Структура("Ссылка, Субконто2", ОбъектДокумента.Ссылка, ОбъектДокумента.БанковскийСчет));
		
		Попытка
			НовыйДокумент.Записать(?(ПроводитьЗагружаемые,РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		Исключение
			НовыйДокумент.Записать();
		КонецПопытки;
		СтрокаСекции.БанковскаяВыписка = НовыйДокумент.Ссылка;
	КонецЕсли;
	
КонецПроцедуры


// ПРОЦЕДУРЫ И ФУНКЦИИ ВЫГРУЗКИ

// Процедура заполняет значения таблицы для экспорта.
//
Процедура ЗаполнитьЗначениеЭкспорта(СтрокаЭкспорта, ВыборкаДляЭкспорта)
	
	Плательщик = "Организация";
	Получатель = "Контрагент";
	НепрямыеРасчетыУПолучателя  = ЗначениеЗаполнено(ВыборкаДляЭкспорта[Получатель + "БанкДляРасчетов"]);
	ТекстПолучателя = "";
	
	Если НепрямыеРасчетыУПолучателя Тогда
		ПозицияРС = найти(ВыборкаДляЭкспорта["ТекстПолучателя"], "р/с");
		
		Если ПозицияРС = 0 Тогда
			ТекстПолучателя = ВыборкаДляЭкспорта["ТекстПолучателя"];
		Иначе
			ТекстПолучателя = СокрЛП((Лев(ВыборкаДляЭкспорта["ТекстПолучателя"], ПозицияРС-1)));
		КонецЕсли;
		
	Иначе
		ТекстПолучателя = ВыборкаДляЭкспорта["ТекстПолучателя"];
	КонецЕсли;
	
	
	ЗамененныеДанные = Новый Структура;
	
	Если ВыборкаДляЭкспорта.КонтрагентСчет.АрксМск Тогда
		НовоеЮрЛицо = Справочники.Организации.НайтиПоНаименованию("Арксбанк ОАО", Истина);
		НовыйСчет = НовоеЮрЛицо.ОсновнойБанковскийСчет; 
		
		ЗамененныеДанные.Вставить(Получатель + "НомерСчета", НовыйСчет.НомерСчета);
		ЗамененныеДанные.Вставить(Получатель + "ИНН", НовоеЮрЛицо.ИНН);
		//ЗамененныеДанные.Вставить("Получатель", "ИНН " + НовоеЮрЛицо.ИНН + " " + НовоеЮрЛицо.НаименованиеПолное);  По просьбе Маши 13.09.12
		ЗамененныеДанные.Вставить("Получатель",НовоеЮрЛицо.НаименованиеПолное);
		ЗамененныеДанные.Вставить(Получатель + "НомерСчета", НовыйСчет.НомерСчета);
		ЗамененныеДанные.Вставить(Получатель + "Банк", НовыйСчет.Банк);
		ЗамененныеДанные.Вставить(Получатель + "ГородБанка", НовыйСчет.Банк.Город);
		ЗамененныеДанные.Вставить(Получатель + "БИКБанка", НовыйСчет.Банк.Код);
		ЗамененныеДанные.Вставить(Получатель + "РасчСчет", НовыйСчет.Банк.КоррСчет);
		ЗамененныеДанные.Вставить("ПолучательКПП", НовоеЮрЛицо.КПП);
		ЗамененныеДанные.Вставить("КПППолучателя", НовоеЮрЛицо.КПП);
		
		Значение = ВыборкаДляЭкспорта.ИННПолучателя;
		
		Если ПустаяСтрока(Значение) Тогда
			Значение = ВыборкаДляЭкспорта[Получатель + "ИНН"];
		КонецЕсли;
		
		// Получатель1.
		ЗамененныеДанные.Вставить("Получатель1", НовоеЮрЛицо.НаименованиеПолное);
		//ЗамененныеДанные.Вставить("Получатель", "ИНН " + Значение + " " + НовоеЮрЛицо.НаименованиеПолное);
		
		ЗамененныеДанные.Вставить("НазначениеПлатежа", "ИНН " + Значение + " " + ТекстПолучателя + " " + ВыборкаДляЭкспорта[Получатель + "НомерСчета"] + " " +
		ВыборкаДляЭкспорта.НазначениеПлатежа);
	Иначе
		ЗамененныеДанные.Вставить(Получатель + "НомерСчета", ВыборкаДляЭкспорта[Получатель + "НомерСчета"]);
		
		Значение = ВыборкаДляЭкспорта.ИННПолучателя;
		
		Если ПустаяСтрока(Значение) Тогда
			Значение = ВыборкаДляЭкспорта[Получатель + "ИНН"];
		КонецЕсли;
		
		ЗамененныеДанные.Вставить(Получатель + "ИНН", Значение);
		
		// Получатель1.
		ЗамененныеДанные.Вставить("Получатель1", ТекстПолучателя);
		//ЗамененныеДанные.Вставить("Получатель", "ИНН " + Значение + " " + ТекстПолучателя); По просьбе Маши 13.09.12
		ЗамененныеДанные.Вставить("Получатель",ТекстПолучателя);
		ЗамененныеДанные.Вставить(Получатель + "НомерСчета", ВыборкаДляЭкспорта[Получатель + "НомерСчета"]);
		ЗамененныеДанные.Вставить(Получатель + "Банк", ВыборкаДляЭкспорта[Получатель + "Банк"]);
		ЗамененныеДанные.Вставить(Получатель + "ГородБанка", ВыборкаДляЭкспорта[Получатель + "ГородБанка"]);
		ЗамененныеДанные.Вставить(Получатель + "БИКБанка", ВыборкаДляЭкспорта[Получатель + "БИКБанка"]);
		ЗамененныеДанные.Вставить(Получатель + "РасчСчет", ВыборкаДляЭкспорта[Получатель + "РасчСчет"]);
		ЗамененныеДанные.Вставить("ПолучательКПП", ВыборкаДляЭкспорта.КонтрагентКПП);
		ЗамененныеДанные.Вставить("КПППолучателя", ВыборкаДляЭкспорта.КПППолучателя);
		ЗамененныеДанные.Вставить("НазначениеПлатежа", ВыборкаДляЭкспорта.НазначениеПлатежа);
		
	КонецЕсли;
	
	СтрокаЭкспорта.Номер = ПолучитьНомерВФорматеОбмена(ВыборкаДляЭкспорта.Номер, РегистрыСведений.Д_ИсточникПП.СрезПоследних(,Новый Структура("БанковскиеСчета",БанковскийСчет))[0].Предприятие.ПрефиксПредприятия);
	СтрокаЭкспорта.Дата = ВыборкаДляЭкспорта.Дата;
	СтрокаЭкспорта.Сумма = Формат(ВыборкаДляЭкспорта.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧГ=0");
	СтрокаЭкспорта.ПлательщикСчет = ВыборкаДляЭкспорта[Плательщик + "НомерСчета"];
	СтрокаЭкспорта.ПолучательСчет = ЗамененныеДанные[Получатель + "НомерСчета"];
	СтрокаЭкспорта.ВидПлатежа = ВыборкаДляЭкспорта.ВидПлатежа;
	НепрямыеРасчетыУПлательщика = ЗначениеЗаполнено(ВыборкаДляЭкспорта[Плательщик + "БанкДляРасчетов"]);
	
	// ВидОплаты.
	СтрокаЭкспорта.ВидПлатежа = "";
	СтрокаЭкспорта.ВидОплаты = "01";
	
	// Плательщик1.
	ТекстПлательщика = "";
	
	Если НепрямыеРасчетыУПлательщика Тогда
		ПозицияРС = Найти(ВыборкаДляЭкспорта["ТекстПлательщика"], "р/с"); 
		
		Если ПозицияРС = 0 Тогда
			ТекстПлательщика = ВыборкаДляЭкспорта["ТекстПлательщика"];
		Иначе
			ТекстПлательщика = СокрЛП((Лев(ВыборкаДляЭкспорта["ТекстПлательщика"], ПозицияРС - 1)));
		КонецЕсли;
		
	Иначе
		ТекстПлательщика = ВыборкаДляЭкспорта["ТекстПлательщика"];
	КонецЕсли;
	
	СтрокаЭкспорта.Плательщик1 = ТекстПлательщика;
	
	// Плательщик, ПлательщикИНН.
	Значение = ВыборкаДляЭкспорта.ИННПлательщика;
	
	Если ПустаяСтрока(Значение) Тогда
		Значение = ВыборкаДляЭкспорта[Плательщик + "ИНН"];
	КонецЕсли;
	
	СтрокаЭкспорта.ПлательщикИНН = Значение;
	СтрокаЭкспорта.Плательщик = "ИНН " + Значение + " " + СтрокаЭкспорта.Плательщик1;
	
	// ПлательщикРасчСчет, ПлательщикБанк1, ПлательщикБанк2, ПлательщикБИК,
	// ПлательщикКорсчет, Плательщик2, Плательщик3, Плательщик4.
	Если НепрямыеРасчетыУПлательщика Тогда
		СтрокаЭкспорта.Плательщик2 		  = ВыборкаДляЭкспорта[Плательщик + "НомерСчета"];
		СтрокаЭкспорта.Плательщик3 		  = ВыборкаДляЭкспорта[Плательщик + "Банк"];
		СтрокаЭкспорта.Плательщик4 		  = ВыборкаДляЭкспорта[Плательщик + "ГородБанка"];
		СтрокаЭкспорта.Плательщик 		  = СтрокаЭкспорта.Плательщик + " р/с " + СтрокаЭкспорта.Плательщик2 + " в " + СтрокаЭкспорта.Плательщик3 + " " + СтрокаЭкспорта.Плательщик4;
		СтрокаЭкспорта.ПлательщикРасчСчет = ВыборкаДляЭкспорта[Плательщик + "РасчСчет"];
		СтрокаЭкспорта.ПлательщикБанк1    = ВыборкаДляЭкспорта[Плательщик + "БанкДляРасчетов"];
		СтрокаЭкспорта.ПлательщикБанк2    = ВыборкаДляЭкспорта[Плательщик + "ГородРЦБанка"];
		СтрокаЭкспорта.ПлательщикБИК      = ВыборкаДляЭкспорта[Плательщик + "БИКРЦБанка"];
		СтрокаЭкспорта.ПлательщикКорсчет  = ВыборкаДляЭкспорта[Плательщик + "КоррСчетРЦБанка"];
	Иначе
		СтрокаЭкспорта.ПлательщикРасчСчет = ВыборкаДляЭкспорта[Плательщик + "НомерСчета"];
		СтрокаЭкспорта.ПлательщикБанк1    = ВыборкаДляЭкспорта[Плательщик + "Банк"];
		СтрокаЭкспорта.ПлательщикБанк2    = ВыборкаДляЭкспорта[Плательщик + "ГородБанка"];
		СтрокаЭкспорта.ПлательщикБИК      = ВыборкаДляЭкспорта[Плательщик + "БИКБанка"];
		СтрокаЭкспорта.ПлательщикКорсчет  = ВыборкаДляЭкспорта[Плательщик + "РасчСчет"];
	КонецЕсли;
	
	СтрокаЭкспорта.Получатель1 = ЗамененныеДанные.Получатель1;
	
	// Получатель, ПолучательИНН.
	СтрокаЭкспорта.ПолучательИНН = ЗамененныеДанные[Получатель + "ИНН"];
	СтрокаЭкспорта.Получатель = ЗамененныеДанные.Получатель;
	
	// ПолучательРасчСчет, ПолучательБанк1, ПолучательБанк2, ПолучательБИК,
	// ПолучательКорсчет, Получатель2, Получатель3, Получатель4.
	Если НепрямыеРасчетыУПолучателя Тогда
		СтрокаЭкспорта.Получатель2 		  = ВыборкаДляЭкспорта[Получатель + "НомерСчета"];
		СтрокаЭкспорта.Получатель3 		  = ВыборкаДляЭкспорта[Получатель + "Банк"];
		СтрокаЭкспорта.Получатель4 		  = ВыборкаДляЭкспорта[Получатель + "ГородБанка"];
		СтрокаЭкспорта.Получатель 		  = СтрокаЭкспорта.Получатель	  + " р/с " + СтрокаЭкспорта.Получатель2 + " в " + СтрокаЭкспорта.Получатель3 + " " + СтрокаЭкспорта.Получатель4;
		СтрокаЭкспорта.ПолучательРасчСчет = ВыборкаДляЭкспорта[Получатель + "РасчСчет"];
		СтрокаЭкспорта.ПолучательБанк1    = ВыборкаДляЭкспорта[Получатель + "БанкДляРасчетов"];
		СтрокаЭкспорта.ПолучательБанк2    = ВыборкаДляЭкспорта[Получатель + "ГородРЦБанка"];
		СтрокаЭкспорта.ПолучательБИК      = ВыборкаДляЭкспорта[Получатель + "БИКРЦБанка"];
		СтрокаЭкспорта.ПолучательКорсчет  = ВыборкаДляЭкспорта[Получатель + "КоррСчетРЦБанка"];
	Иначе
		СтрокаЭкспорта.ПолучательРасчСчет = ЗамененныеДанные[Получатель + "НомерСчета"];
		СтрокаЭкспорта.ПолучательБанк1    = ЗамененныеДанные[Получатель + "Банк"];
		СтрокаЭкспорта.ПолучательБанк2    = ЗамененныеДанные[Получатель + "ГородБанка"];
		СтрокаЭкспорта.ПолучательБИК      = ЗамененныеДанные[Получатель + "БИКБанка"];
		СтрокаЭкспорта.ПолучательКорсчет  = ЗамененныеДанные[Получатель + "РасчСчет"];
	КонецЕсли;
	
	// ПлательщикКПП.
	Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПлательщикКПП) Тогда
		СтрокаЭкспорта.ПлательщикКПП = ВыборкаДляЭкспорта.КПППлательщика;
	КонецЕсли;
	
	// ПолучательКПП.
	//Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПолучательКПП) Тогда
		СтрокаЭкспорта.ПолучательКПП = ЗамененныеДанные.ПолучательКПП;
	//КонецЕсли;
	
	// СтатусСоставителя, ПлательщикКПП, ПолучательКПП, ПоказательКБК, ОКАТО
	// ПоказательОснования, ПоказательПериода, ПоказательНомера, ПоказательДаты,
	// ПоказательТипа.
	Если ВыборкаДляЭкспорта.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога Тогда
		СтрокаЭкспорта.СтатусСоставителя = ВыборкаДляЭкспорта.СтатусСоставителя;
		
		Если ПустаяСтрока(СтрокаЭкспорта.СтатусСоставителя) Тогда
			СтрокаЭкспорта.СтатусСоставителя = "0";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПлательщикКПП) Тогда
			СтрокаЭкспорта.ПлательщикКПП = ВыборкаДляЭкспорта.КПППлательщика;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПлательщикКПП) Тогда
			СтрокаЭкспорта.ПлательщикКПП = "0";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПолучательКПП) Тогда
			СтрокаЭкспорта.ПолучательКПП = ЗамененныеДанные.КПППолучателя;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПолучательКПП) Тогда
			СтрокаЭкспорта.ПолучательКПП = "0";
		КонецЕсли;
		
		СтрокаЭкспорта.ПоказательКБК = ВыборкаДляЭкспорта.КодБК;
		
		// закомментированно 07.08.2018, неактуально с 2014 года {
		//Если ВыборкаДляЭкспорта.ОрганизацияСчет.Банк.ОКТМО Тогда
		//	СтрокаЭкспорта.ОКТМО         = ВыборкаДляЭкспорта.КодПоОКТМО;
		//Иначе
		//	СтрокаЭкспорта.ОКАТО         = ВыборкаДляЭкспорта.КодОКАТО;
		//КонецЕсли;
		//}
				
		//СтрокаЭкспорта.ОКТМО         = ВыборкаДляЭкспорта.КодОКАТО;
		СтрокаЭкспорта.ОКАТО         = ВыборкаДляЭкспорта.КодОКАТО;
		
		Если ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательОснования) Тогда
			СтрокаЭкспорта.ПоказательОснования = "0";
		Иначе
			СтрокаЭкспорта.ПоказательОснования = ВыборкаДляЭкспорта.ПоказательОснования;
		КонецЕсли;
		
		Если ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательПериода) ИЛИ (ВыборкаДляЭкспорта.ПоказательПериода = "  .  .    ") Тогда
			СтрокаЭкспорта.ПоказательПериода = "0";
		Иначе
			СтрокаЭкспорта.ПоказательПериода = ВыборкаДляЭкспорта.ПоказательПериода;
		КонецЕсли;
		
		Если ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательНомера) Тогда
			СтрокаЭкспорта.ПоказательНомера = "0";
		Иначе
			СтрокаЭкспорта.ПоказательНомера = ВыборкаДляЭкспорта.ПоказательНомера;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаДляЭкспорта.ПоказательДаты) Тогда
			СтрокаЭкспорта.ПоказательДаты = "0";
		Иначе
			СтрокаЭкспорта.ПоказательДаты = Формат(ВыборкаДляЭкспорта.ПоказательДаты,"ДЛФ=Д");
		КонецЕсли;
		
		Если ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательТипа) Тогда
			// Указание ЦБ РФ от 6 ноября 2015 г. № 3844-У
			// "О внесении изменений в Положение Банка России от 19 июня 2012 года № 383-П".
	
			// Совпадает с датой вступления в силу Приказа Минфина России от 23 сентября 2015 г. № 148н
			// "О внесении изменений в приказ Министерства финансов Российской Федерации от 12 ноября 2013 г. № 107н".

			СтрокаЭкспорта.ПоказательТипа = "";
		Иначе
			СтрокаЭкспорта.ПоказательТипа = ВыборкаДляЭкспорта.ПоказательТипа;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыборкаДляЭкспорта.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога И ПустаяСтрока(ВыборкаДляЭкспорта.Код) Тогда
		СтрокаЭкспорта.Код = "0"; // требования 107н
	Иначе
		СтрокаЭкспорта.Код = ВыборкаДляЭкспорта.Код; // только требования 383-П
	КонецЕсли;
	
	// Очередность.
	СтрокаЭкспорта.Очередность = "" + ВыборкаДляЭкспорта.ОчередностьПлатежа;
	
	// НазначениеПлатежа, НазначениеПлатежа1, НазначениеПлатежа2, НазначениеПлатежа3,
	// НазначениеПлатежа4, НазначениеПлатежа5, НазначениеПлатежа6.
	СтрокаЭкспорта.НазначениеПлатежа = СтрЗаменить(
		СтрЗаменить(
			СтрЗаменить(
				ЗамененныеДанные.НазначениеПлатежа,
				Символы.ПС,
				" "),
			Символы.ВК,
			""),
		Символы.ПФ,
		""
	);
	КоличествоСтрокНП = СтрЧислоСтрок(ЗамененныеДанные.НазначениеПлатежа);
	
	Если КоличествоСтрокНП > 6 Тогда
		КоличествоСтрокНП = 6;
	КонецЕсли;
	
	Для Сч = 1 По КоличествоСтрокНП Цикл
		СтрокаЭкспорта["НазначениеПлатежа" + Сч] = СтрПолучитьСтроку(ЗамененныеДанные.НазначениеПлатежа, Сч);
	КонецЦикла;
	
	Для Сч = (КоличествоСтрокНП + 1) По 6 Цикл
		СтрокаЭкспорта["НазначениеПлатежа" + Сч] = "";
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьЗначениеЭкспорта()

// Функция получает секцию документ.
//
Функция ПолучитьСекциюДокумент(СтруктураДокумента, КоллекцияРеквизитов)
	
	Буфер = "";
	Реквизит = "";
	СтруктураДляЗаписи = СформироватьСтруктуруЭкспорта();
	ЗаполнитьЗначениеЭкспорта(СтруктураДляЗаписи, СтруктураДокумента);
	ДобавитьВСтроку(Буфер, "СекцияДокумент=" + СтруктураДокумента.ВидДокумента);
	
	Для каждого ВыгружаемыйРеквизит Из СтруктураДляЗаписи Цикл
		Значение = ПривестиЗначение(ВыгружаемыйРеквизит.Значение);
		
		Если НЕ ПустаяСтрока(Значение) Тогда
			ДобавитьВСтроку(Буфер, ВыгружаемыйРеквизит.Ключ + "=" + Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьВСтроку(Буфер, "КонецДокумента");
	
	Возврат Буфер;
	
КонецФункции // ПолучитьСекциюДокумент()

// Процедура выгружает платежные поручения.
//
Функция Выгрузить() Экспорт
	
	ДокументыНаЭкспорт = Выгрузка.Выгрузить();
	ПотокВыгрузки = Новый ТекстовыйДокумент();
	
	// Формируем заголовок.
	ПотокВыгрузки.ДобавитьСтроку("1CClientBankExchange");
	ПотокВыгрузки.ДобавитьСтроку("ВерсияФормата=1.01");
	ПотокВыгрузки.ДобавитьСтроку("Кодировка=" + Кодировка);
	ПотокВыгрузки.ДобавитьСтроку("Отправитель=" + Метаданные.Синоним);
	ПотокВыгрузки.ДобавитьСтроку("Получатель=" + Программа);
	ПотокВыгрузки.ДобавитьСтроку("ДатаСоздания=" + Формат(ТекущаяДата(), "ДЛФ=Д"));
	ПотокВыгрузки.ДобавитьСтроку("ВремяСоздания=" + Формат(ТекущаяДата(), "ДЛФ=В"));
	ПотокВыгрузки.ДобавитьСтроку("ДатаНачала=" + Формат(НачПериода, "ДЛФ=Д"));
	ПотокВыгрузки.ДобавитьСтроку("ДатаКонца=" + Формат(КонПериода, "ДЛФ=Д"));
	ПотокВыгрузки.ДобавитьСтроку("РасчСчет=" + БанковскийСчет.НомерСчета);
	ПотокВыгрузки.ДобавитьСтроку("Документ=Платежное поручение");
	
	// Выводим отмеченные секции документов.
	Для каждого СтрокаСекции Из ДокументыНаЭкспорт Цикл
		
		Если НЕ(СтрокаСекции.Выгружать)Тогда
			Продолжить;
		КонецЕсли;
		
		Буфер = ПолучитьСекциюДокумент(СтрокаСекции, ДокументыНаЭкспорт.Колонки);
		КоличествоСрокСекции = СтрЧислоСтрок(Буфер);
		
		Для Сч = 1 По КоличествоСрокСекции Цикл
			ПотокВыгрузки.ДобавитьСтроку(СтрПолучитьСтроку(Буфер, Сч));
		КонецЦикла;
		
		СтрокаСекции.Готовность = - 2;
	КонецЦикла;
	
	ПотокВыгрузки.ДобавитьСтроку("КонецФайла");
	
	Возврат ПотокВыгрузки;
	
КонецФункции // Выгрузить()

// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция пересчитывает сумму из одной валюты в другую
//
// Параметры:      
//	Сумма         - Число - сумма, которую следует пересчитать.
// 	КурсНач       - Число - курс из которого надо пересчитать.
// 	КурсКон       - Число - курс в который надо пересчитать.
// 	КратностьНач  - Число - кратность из которого надо пересчитать 
//                  (по умолчанию = 1).
// 	КратностьКон  - Число - кратность в который надо пересчитать 
//                  (по умолчанию = 1).
//
// Возвращаемое значение: 
//  Число - сумма, пересчитанная в другую валюту.
//
Функция ПересчитатьИзВалютыВВалюту(Сумма, КурсНач, КурсКон,	КратностьНач = 1, КратностьКон = 1) Экспорт
	
	Если (КурсНач = КурсКон) И (КратностьНач = КратностьКон) Тогда
		Возврат Сумма;
	КонецЕсли;
	
	Если КурсНач = 0
	 ИЛИ КурсКон = 0
	 ИЛИ КратностьНач = 0
	 ИЛИ КратностьКон = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Обнаружен нулевой курс валюты. Пересчет не выполнен.'");
        ПП_Сервер.СообщитьОбОшибке(, ТекстСообщения);
		Возврат Сумма;
	КонецЕсли;
	
	СуммаПересчитанная = Окр((Сумма * КурсНач * КратностьКон) / (КурсКон * КратностьНач), 2);
	
	Возврат СуммаПересчитанная;
	
КонецФункции // ПересчитатьИзВалютыВВалюту()

// Возвращает курс валюты на дату.
//
Функция ПолучитьКурсВалюты(Валюта, ДатаКурса)
	
	Структура = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта, БазоваяВалюта", Валюта, УЧ_Сервер.НациональнаяВалюта()));
	
	Возврат Структура;
	
КонецФункции // ПолучитьКурсВалюты()

// Функция формирует структуру экспорта.
//
Функция СформироватьСтруктуруЭкспорта()
	
	СтруктураЭкспорта = Новый структура;
	СтруктураЭкспорта.Вставить( "Выгружать",             ""); // "_",
	СтруктураЭкспорта.Вставить( "Готовность",            ""); // "Готовность",
	СтруктураЭкспорта.Вставить( "НомерДок",              ""); // "№ Документа",
	СтруктураЭкспорта.Вставить( "Номер",                 ""); // "Номер",
	СтруктураЭкспорта.Вставить( "Дата",                  ""); // "Дата",
	СтруктураЭкспорта.Вставить( "Операция",              ""); // "Операция",
	СтруктураЭкспорта.Вставить( "БанковскийСчет",        ""); // "Эл. Р/с организации",
	СтруктураЭкспорта.Вставить( "НомерСчетаОрганизации", ""); // "Р/с организации",
	СтруктураЭкспорта.Вставить( "Сумма",                 ""); // "Сумма",
	СтруктураЭкспорта.Вставить( "Контрагент",            ""); // "Контрагент",
	СтруктураЭкспорта.Вставить( "СчетКонтрагента",       ""); // "Р/с контрагента",
	СтруктураЭкспорта.Вставить( "НомерСчетаКонтрагента", ""); // "Эл. Р/с контрагента",
	СтруктураЭкспорта.Вставить( "КвитанцияДата",         ""); // "Дата форм. квитанции",
	СтруктураЭкспорта.Вставить( "КвитанцияВремя",        ""); // "Время форм. квитанции",
	СтруктураЭкспорта.Вставить( "КвитанцияСодержание",   ""); // "Содержание квитанции",
	СтруктураЭкспорта.Вставить( "ПлательщикСчет",        ""); // "Расчетный счет плательщика",
	СтруктураЭкспорта.Вставить( "Плательщик",            ""); // "Плательщик",
	СтруктураЭкспорта.Вставить( "ПлательщикИНН",         ""); // "ИНН плательщика",
	СтруктураЭкспорта.Вставить( "Плательщик1",           ""); // "Наименование плательщика",
	СтруктураЭкспорта.Вставить( "Плательщик2",           ""); // "Расчетный счет плательщика",
	СтруктураЭкспорта.Вставить( "Плательщик3",           ""); // "Банк плательщика",
	СтруктураЭкспорта.Вставить( "Плательщик4",           ""); // "Город банка плательщика",
	СтруктураЭкспорта.Вставить( "ПлательщикРасчСчет",    ""); // "Корсчет банка плательщика",
	СтруктураЭкспорта.Вставить( "ПлательщикБанк1",       ""); // "РЦ банка плательщика",
	СтруктураЭкспорта.Вставить( "ПлательщикБанк2",       ""); // "Город РЦ банка плательщика",
	СтруктураЭкспорта.Вставить( "ПлательщикБИК",         ""); // "БИК РЦ банка плательщика",
	СтруктураЭкспорта.Вставить( "ПлательщикКорсчет",     ""); // "Корсчет РЦ банка плат.",
	СтруктураЭкспорта.Вставить( "ПолучательСчет",        ""); // "Расчетный счет получателя",
	СтруктураЭкспорта.Вставить( "Получатель",            ""); // "Получатель",
	СтруктураЭкспорта.Вставить( "ПолучательИНН",         ""); // "ИНН получателя",
	СтруктураЭкспорта.Вставить( "Получатель1",           ""); // "Наименование получателя",
	СтруктураЭкспорта.Вставить( "Получатель2",           ""); // "Расчетный счет получателя",
	СтруктураЭкспорта.Вставить( "Получатель3",           ""); // "Банк получателя",
	СтруктураЭкспорта.Вставить( "Получатель4",           ""); // "Город банка получателя",
	СтруктураЭкспорта.Вставить( "ПолучательРасчСчет",    ""); // "Корсчет банка получателя",
	СтруктураЭкспорта.Вставить( "ПолучательБанк1",       ""); // "РЦ банка получателя",
	СтруктураЭкспорта.Вставить( "ПолучательБанк2",       ""); // "Город РЦ банка получателя",
	СтруктураЭкспорта.Вставить( "ПолучательБИК",         ""); // "БИК РЦ банка получателя",
	СтруктураЭкспорта.Вставить( "ПолучательКорсчет",     ""); // "Корсчет РЦ банка пол.",
	СтруктураЭкспорта.Вставить( "ВидПлатежа",            ""); // "Вид платежа",
	СтруктураЭкспорта.Вставить( "ВидОплаты",             ""); // "Вид оплаты",
	СтруктураЭкспорта.Вставить( "СтатусСоставителя",     ""); // "Статус составителя",
	СтруктураЭкспорта.Вставить( "ПлательщикКПП",         ""); // "КПП плательщика",
	СтруктураЭкспорта.Вставить( "ПолучательКПП",         ""); // "КПП получателя",
	СтруктураЭкспорта.Вставить( "ПоказательКБК",         ""); // "Показатель КБК",
	СтруктураЭкспорта.Вставить( "ОКАТО",                 ""); // "ОКАТО", // закомментированно 07.08.2018, неактуально с 2014 года
	//СтруктураЭкспорта.Вставить( "ОКТМО",                 ""); // "ОКТМО",  //30.01.2019 вернула ОКАТО
	СтруктураЭкспорта.Вставить( "ПоказательОснования",   ""); // "Показатель основания",
	СтруктураЭкспорта.Вставить( "ПоказательПериода",     ""); // "Показатель нал. периода",
	СтруктураЭкспорта.Вставить( "ПоказательНомера",      ""); // "Показатель номера док.",
	СтруктураЭкспорта.Вставить( "ПоказательДаты",        ""); // "Показатель даты док.",
	СтруктураЭкспорта.Вставить( "ПоказательТипа",        ""); // "Показатель типа платежа",
	СтруктураЭкспорта.Вставить( "Очередность",           ""); // "Очередность платежа",
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа",     ""); // "Назначение платежа",
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа1",    ""); // "Назначение платежа, стр. 1",
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа2",    ""); // "Назначение платежа, стр. 2",
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа3",    ""); // "Назначение платежа, стр. 3",
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа4",    ""); // "Назначение платежа, стр. 4",
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа5",    ""); // "Назначение платежа, стр. 5",
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа6",    ""); // "Назначение платежа, стр. 6",
	СтруктураЭкспорта.Вставить( "Документ",              ""); // "Источник",
	СтруктураЭкспорта.Вставить( "СекцияДокумент",        ""); // "Выгрузка",
	СтруктураЭкспорта.Вставить( "ОписаниеОшибок",        ""); // "Замечания",
	СтруктураЭкспорта.Вставить( "ТипДокумента",          ""); // "Тип пл. документа"
	СтруктураЭкспорта.Вставить("Код",					 ""); // "Уникальный идентификатор платежа"
	
	Возврат СтруктураЭкспорта;
	
КонецФункции // СформироватьСтруктуруЭкспорта()

// Функция получает номер в формате обмена.
//
Функция ПолучитьНомерВФорматеОбмена(НомерДокумента, Знач ПрефиксОрганизации)
	
	Номер = СокрЛП(НомерДокумента);
	
	ПолныйПрефиксОрганизации = ПрефиксОрганизации + "";
	ВхождениеМинуса = Найти(Номер, "-");
	
	Если Найти(Номер, ПолныйПрефиксОрганизации) = 1 И НЕ ПрефиксОрганизации = "" Тогда // попытка удаления полного префикса
		Номер = Сред(Номер, СтрДлина(ПолныйПрефиксОрганизации) + 1);
	ИначеЕсли Найти(Номер, ПрефиксОрганизации) = 1 И НЕ ПрефиксОрганизации = "" Тогда // попытка удаление префикса из номера документа
		Номер = Сред(Номер, СтрДлина(ПрефиксОрганизации) + 1);
	ИначеЕсли ВхождениеМинуса <> 0 Тогда // попытка удаления любого префикса
		Номер = Сред(Номер, ВхождениеМинуса + 1);
	КонецЕсли;
	
	// Так же, может остаться "минус" впереди.
	Если Лев(Номер, 1) = "-" Тогда
		Номер = Сред(Номер, 2);
	КонецЕсли;
	
	// Удаление ведущих нулей.
	Пока Лев(Номер, 1) = "0" Цикл
		Номер = Сред(Номер, 2);
	КонецЦикла;
	
	Возврат Номер;
	
КонецФункции // ПолучитьНомерВФорматеОбмена()

// Процедура добавляет строку в строку.
//
Процедура ДобавитьВСтроку(Буфер, НоваяСтрока)
	
	Если ПустаяСтрока(Буфер) Тогда
		Буфер = НоваяСтрока;
	Иначе
		Буфер = Буфер + Символы.ПС + НоваяСтрока;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьВСтроку()

// Функция приводит значения.
//
Функция ПривестиЗначение(Значение)
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Возврат СокрЛП(Значение);		
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		Возврат Формат(Значение, "ЧРД=.; ЧРГ=' '; ЧГ=0");
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		Возврат Формат(Значение, "ДФ=dd.MM.yyyy");
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции // ПривестиЗначение()

// Функция получает дату из строки.
//
Функция ПолучитьДатуИзСтроки(Приемник, Источник)
	
	Буфер = Источник;
	ПозицияТочки = Найти(Буфер, ".");
	Если ПозицияТочки = 0 Тогда
		Возврат НСтр("ru = 'Неверный формат строки с датой'");
	КонецЕсли;
	ЧислоДаты = Лев(Буфер, ПозицияТочки - 1);
	Буфер = Сред(Буфер, ПозицияТочки + 1);
	ПозицияТочки = Найти(Буфер, ".");
	Если ПозицияТочки = 0 Тогда
		Возврат НСтр("ru = 'Неверный формат строки с датой'");
	КонецЕсли;
	МесяцДаты = Лев(Буфер, ПозицияТочки - 1);
	ГодДаты = Сред(Буфер, ПозицияТочки + 1);
	Если СтрДлина(ГодДаты) = 2 Тогда
		Если Число(ГодДаты) < 50 Тогда
			ГодДаты = "20" + ГодДаты;
		Иначе
			ГодДаты = "19" + ГодДаты ;
		КонецЕсли;
	КонецЕсли;
	Попытка
		Приемник = Дата(Число(ГодДаты), Число(МесяцДаты), Число(ЧислоДаты));
	Исключение
		Возврат НСтр("ru = 'Не удалось преобразовать строку в дату'");
	КонецПопытки;
	
	Возврат Приемник;
	
КонецФункции // ПолучитьДатуИзСтроки()

// Функция определяет наличие не цифр в строке.
//
Функция ЕстьНеЦифры(Знач СтрокаПроверки) Экспорт
	
	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		Возврат Истина;
	КонецЕсли;
	СтрокаПроверки = СокрЛП(СтрокаПроверки);
	Длина = СтрДлина(СтрокаПроверки);
	Для Сч = 1 По Длина Цикл
		Если Найти("0123456789", Сред(СтрокаПроверки, Сч, 1)) = 0 Тогда
			Возврат Истина;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции // ЕстьНеЦифры()

Процедура АкцептоватьЗаявкиНаОплату(ТекущееПП)
	
	Для Каждого Строка Из ТекущееПП.СтрокиЗаявкиНаОплату Цикл
		
		СтрокаРеестра = Строка.ДокОснование.ЗаявкаБезнал.Найти(Строка.УИДСтрокиДокОснования, "УИДСтроки");
		
		Если СтрокаРеестра = Неопределено Тогда
			Продолжить;			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаРеестра.ЗаявкаНаФинансирование) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаявкаНаОплатуОбъект = СтрокаРеестра.ЗаявкаНаФинансирование.ПолучитьОбъект();
		ЗаявкаНаОплатуОбъект.Акцептован = Истина;
		ЗаявкаНаОплатуОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры
