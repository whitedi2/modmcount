
&НаКлиенте
Процедура СоздатьРеестр(Команда)
	ТекДанные = Элементы.ОрганизацииТЧ.ТекущиеДанные;
	Если Не ТекДанные = Неопределено И Не ЗначениеЗаполнено(ТекДанные.Реестр) Тогда
		
		МассивДоков = Новый Массив;
		Для каждого ТекСтрока Из ЗаявкиНаОплату Цикл
			Если ТекСтрока.Предприятие = ТекДанные.Предприятие Тогда
				МассивДоков.Добавить(ТекСтрока.ЗаявкаНаОплату);
			КонецЕсли;
		КонецЦикла;
		
		ДанныеТЗ = ПолучитьИзВременногоХранилища(АдресТЗ);
		
		ОткрытьФорму("Документ.Д_ЗаявкаНаОплату.ФормаОбъекта", Новый Структура("Основание", Новый Структура("ДатаГрафика, ВидОплаты, РежимРаботы, ПоказыватьГрафикПоБюджету, МассивДоков, ДанныеТЗ", ТекущаяДата(), Неопределено, РежимРаботы, Ложь, МассивДоков, ДанныеТЗ)), ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты)
  Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты);
КонецФункции // ()

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	МассивДоков = Параметры.МассивДоков;
	ДанныеТЗ = Параметры.ДанныеТЗ;
	ДатаГрафика = Параметры.ДатаГрафика;
	ВариантГруппировки = Параметры.ВариантГруппировки;
	РежимРаботы = Параметры.РежимРаботы;
	АдресТЗ = ПоместитьВоВременноеХранилище(Параметры.ДанныеТЗ, ЭтаФорма.УникальныйИдентификатор);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	сабГрафикПлатежей.Документ КАК ЗаявкаНаОплату,
	               |	сабГрафикПлатежей.Предприятие КАК Предприятие,
	               |	сабГрафикПлатежей.ЦФО КАК ЦФО,
	               |	сабГрафикПлатежей.ПодразделениеЦФО КАК ПодразделениеЦФО,
	               |	сабГрафикПлатежей.ДатаПлатежа КАК ДатаПлатежа,
	               |	сабГрафикПлатежей.ВидОперации КАК ВидОперации,
	               |	сабГрафикПлатежей.Источник КАК БанковскийСчет,
	               |	сабГрафикПлатежей.Источник КАК Источник,
	               |	сабГрафикПлатежей.СтатьяДДС КАК СтатьяДДС,
	               |	сабГрафикПлатежей.СтавкаНДС КАК СтавкаНДС,
	               |	сабГрафикПлатежей.Контрагент КАК Контрагент,
	               |	сабГрафикПлатежей.Договор КАК Договор,
	               |	сабГрафикПлатежей.СчетКонтрагента КАК СчетКонтрагента,
	               |	сабГрафикПлатежей.Валюта КАК Валюта,
	               |	сабГрафикПлатежей.УИДСтрокиДокумента КАК УИДСтроки,
	               |	сабГрафикПлатежей.ТочкаМаршрута КАК ТочкаМаршрута,
	               |	сабГрафикПлатежей.Организация КАК Организация,
	               |	ВЫБОР
	               |		КОГДА сабГрафикПлатежей.Сумма < 0
	               |			ТОГДА -сабГрафикПлатежей.Сумма
	               |		ИНАЧЕ сабГрафикПлатежей.Сумма
	               |	КОНЕЦ КАК СуммаПлатежа,
	               |	ВЫБОР
	               |		КОГДА сабГрафикПлатежей.СуммаНДС < 0
	               |			ТОГДА -сабГрафикПлатежей.СуммаНДС
	               |		ИНАЧЕ сабГрафикПлатежей.СуммаНДС
	               |	КОНЕЦ КАК СуммаНДС,
	               |	ВЫБОР
	               |		КОГДА сабГрафикПлатежей.СуммаНДС < 0
	               |			ТОГДА -сабГрафикПлатежей.СуммаНДС
	               |		ИНАЧЕ сабГрафикПлатежей.СуммаНДС
	               |	КОНЕЦ КАК СуммаНДСАвтоматическийРасчет,
	               |	ВЫБОР
	               |		КОГДА сабГрафикПлатежей.ВалютнаяСумма < 0
	               |			ТОГДА -сабГрафикПлатежей.ВалютнаяСумма
	               |		ИНАЧЕ сабГрафикПлатежей.ВалютнаяСумма
	               |	КОНЕЦ КАК ВалютнаяСумма,
	               |	сабГрафикПлатежей.Курс КАК Курс,
	               |	сабГрафикПлатежей.НазначениеПлатежа КАК НазначениеПлатежаБух,
	               |	сабГрафикПлатежей.НазначениеПлатежаУчет КАК НазначениеПлатежа,
	               |	сабГрафикПлатежей.Комментарий КАК Примечание,
	               |	1 КАК Количество
	               |ИЗ
	               |	РегистрСведений.сабГрафикПлатежей КАК сабГрафикПлатежей
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Д_ЗаявкаНаОплату.ЗаявкаБезнал КАК Д_ЗаявкаНаОплатуЗаявкаБезнал
	               |		ПО сабГрафикПлатежей.Документ = Д_ЗаявкаНаОплатуЗаявкаБезнал.ЗаявкаНаФинансирование
	               |			И (Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка.ПометкаУдаления = ЛОЖЬ)
	               |			И сабГрафикПлатежей.УИДСтрокиДокумента = Д_ЗаявкаНаОплатуЗаявкаБезнал.УИДСтроки
	               |ГДЕ
	               |	сабГрафикПлатежей.ДатаПлатежа <= &ДатаПлатежа
	               |	И (ТИПЗНАЧЕНИЯ(сабГрафикПлатежей.Документ) = ТИП(Документ.Д_ЗаявкаНаФинансирование)
	               |			ИЛИ ТИПЗНАЧЕНИЯ(сабГрафикПлатежей.Документ) = ТИП(Документ.Д_Бюджет))
	               |	И Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка ЕСТЬ NULL
	               |	И сабГрафикПлатежей.Предприятие В ИЕРАРХИИ(&ДоступныеПредприятия)
	               |	И сабГрафикПлатежей.ОснованиеПометкаУдаления = ЛОЖЬ
	               |	И сабГрафикПлатежей.Документ.ПометкаУдаления = ЛОЖЬ
	               |	И (сабГрафикПлатежей.Сценарий = ЗНАЧЕНИЕ(Справочник.СценарииПланирования.ПустаяСсылка)
	               |			ИЛИ &ПоказыватьГрафикПоБюджету)
	               |	И ВЫБОР
	               |			КОГДА НЕОПРЕДЕЛЕНО В (&МассивДоков)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ сабГрафикПлатежей.Документ В (&МассивДоков)
	               |		КОНЕЦ
	               |	И сабГрафикПлатежей.ВидОперации В(&ВидыОперацийРасходов)
	               |	И (сабГрафикПлатежей.Сценарий = ЗНАЧЕНИЕ(Справочник.СценарииПланирования.ПустаяСсылка)
	               |			ИЛИ сабГрафикПлатежей.Сценарий = &СценарийФакт)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Предприятие,
	               |	Источник
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ДатаПлатежа", КонецДня(ДатаГрафика));
	//Запрос.УстановитьПараметр("ТипИсточника", ТипИсточника);
	//Запрос.УстановитьПараметр("РежимОплаты", ДанныеЗаполнения.РежимРаботы);
	Запрос.УстановитьПараметр("ПоказыватьГрафикПоБюджету", Ложь);
	Запрос.УстановитьПараметр("ДоступныеПредприятия", ПараметрыСеанса.ДоступныеПредприятия);
	Запрос.УстановитьПараметр("МассивДоков", ?(МассивДоков.Количество(), МассивДоков, Неопределено));
	Запрос.УстановитьПараметр("ВидыОперацийРасходов", ПП_Сервер.ЭтоРасходнаяОперация());
	Запрос.УстановитьПараметр("СценарийФакт", Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	МассивПредприятий = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ЗаявкиНаОплату.Добавить();
		//ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка.ЗаявкаНаОплату);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
	ТЧОрг = ЗаявкиНаОплату.Выгрузить();
	ТЧОрг.Свернуть("Предприятие", "СуммаПлатежа, Количество");
	ОрганизацииТЧ.Загрузить(ТЧОрг);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацииТЧПриАктивизацииСтроки(Элемент)
	ТекДанные = Элементы.ОрганизацииТЧ.ТекущиеДанные;
	Если Не ТекДанные = Неопределено Тогда
		Элементы.ЗаявкиНаОплату.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("Предприятие", ТекДанные.Предприятие));
	Иначе
		Элементы.ЗаявкиНаОплату.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("Предприятие", Неопределено));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Оповестить("сабОбноватьПлатежныйКалендарь");
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "сабОбноватьПлатежныйКалендарь" Тогда
		ТекДанные = Элементы.ОрганизацииТЧ.ТекущиеДанные;
		Если Не ТекДанные = Неопределено Тогда
			ТекДанные.Реестр = Источник;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацииТЧВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекДанные = Элементы.ОрганизацииТЧ.ТекущиеДанные;
	Если Не ТекДанные = Неопределено И ЗначениеЗаполнено(ТекДанные.Реестр) Тогда
		ПоказатьЗначение(, ТекДанные.Реестр);
	КонецЕсли;
КонецПроцедуры

