&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОтборТочкиЗаявок = "Все";
	ДеревоРазвернуто = Истина;
	//Выходные = Истина;
	ЗаполнитьОтборы();
	ИнициализироватьКомпоновкуДанных();
	//ОбновитьНаСервере();
	
	Если Не Элементы.Найти("ФормаГрафикПлатежей") = Неопределено Тогда
		Элементы.ФормаГрафикПлатежей.Видимость = БюджетныйНаСервере.РольАдминаДоступнаСервер();	
	КонецЕсли;
	
	//добавляем дни
	МассТип = Новый Массив;
	МассТип.Добавить(Тип("Число"));
	ТипРеквизита = Новый ОписаниеТипов(МассТип);
	ДобавляемыеРеквизиты = Новый Массив;
	Для День = 32 По 365 Цикл
		Реквизит_1 = Новый РеквизитФормы("День" + Строка(День), ТипРеквизита, "Данные", "День" + Строка(День));
		ДобавляемыеРеквизиты.Добавить(Реквизит_1);
		Реквизит_1 = Новый РеквизитФормы("День" + Строка(День), ТипРеквизита, "ДанныеДерево", "День" + Строка(День));
		ДобавляемыеРеквизиты.Добавить(Реквизит_1);
		Реквизит_1 = Новый РеквизитФормы("День" + Строка(День), ТипРеквизита, "ДанныеПоИсточникам", "День" + Строка(День));
		ДобавляемыеРеквизиты.Добавить(Реквизит_1);
	КонецЦикла;
	ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Объект.ГоризонтПланирования = 0 Тогда
		Объект.ГоризонтПланирования = 7;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.РежимРаботы) Тогда
		Объект.РежимРаботы = "Календарь";	
	КонецЕсли;
	
	Если Объект.ВариантГруппировки = "" Тогда
		Объект.ВариантГруппировки = "Предприятия";	
	КонецЕсли;
	
	//Если Не ЗначениеЗаполнено(Объект.ЭквивалентнаяВалюта) Тогда
	//	Объект.ЭквивалентнаяВалюта = ПредопределенноеЗначение("Справочник.Валюты.НациональнаяВалюта");
	//КонецЕсли;
	
	РежимРаботыПриИзменении(Неопределено);
	
	ОбновитьНаКлиенте();
	ПодключитьОбработчикОжидания("ОбновитьНаКлиенте", 180);
	//Обновить(Неопределено);
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКомпоновкуДанных()
	
	Попытка
		ЭтотОбъект2 = ВнешниеОбработки.Создать("сабПлатежныйКалендарь");	
	Исключение
		ЭтотОбъект2 = Обработки.сабПлатежныйКалендарь;
	КонецПопытки;
	
	СхемаКомпоновкиДанных = ЭтотОбъект2.ПолучитьМакет("МакетЗаполнения");
	
	Для Индекс = 0 По 364 Цикл
		ПараметрПериод = СхемаКомпоновкиДанных.Параметры.Добавить(); 
		ПараметрПериод.Имя = "Дата" + Строка(Индекс) + "День";
		ПараметрПериод.Заголовок = "Дата" + Строка(Индекс) + "День";
		ПараметрПериод.ТипЗначения = Новый ОписаниеТипов("Дата");
		ПараметрПериод.ОграничениеИспользования = Истина;
		ПараметрПериод.ВключатьВДоступныеПоля = Ложь;	
	КонецЦикла;
		
	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	
	Отбор.Инициализировать(ИсточникНастроек);
	
	Отбор.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	Отбор.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтборы()
	
	Для каждого ТекСтрока Из БюджетныйНаСервере.ПолучитьПредприятия() Цикл
		ОтборПредприятия.Добавить(ТекСтрока);
	КонецЦикла; 
	
	ДоступныеОрганизации = ДоступныеОрганизации(ОтборПредприятия.ВыгрузитьЗначения());
	Для каждого ТекОрг Из ДоступныеОрганизации Цикл
		ОтборОрганизации.Добавить(ТекОрг);	
	КонецЦикла;
	
	//МассивТочекНаСогласовании = Новый Массив;
	ОтборТочкиСогласования.Добавить(Перечисления.Согласование1ТочкиМаршрута.Действие3);	
	ОтборТочкиСогласования.Добавить(Перечисления.Согласование1ТочкиМаршрута.Действие2);
	ОтборТочкиСогласования.Добавить(Перечисления.Согласование1ТочкиМаршрута.Действие4);
	ОтборТочкиСогласования.Добавить(Перечисления.Согласование1ТочкиМаршрута.ПроверкаКонтрагентов);
	
	//МассивТочекКОплате = Новый Массив;
	ОтборТочкиОплаты.Добавить(Перечисления.Согласование1ТочкиМаршрута.Действие5);
	ОтборТочкиОплаты.Добавить(Перечисления.Согласование1ТочкиМаршрута.Действие4);
	
	ОтборТочкиЗавершение.Добавить(Перечисления.Согласование1ТочкиМаршрута.Завершение);
	ОтборТочкиЗавершение.Добавить(Перечисления.Согласование1ТочкиМаршрута.Действие5);
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДоступныеОрганизации(ОтборПредприятия)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Значение(Справочник.Организации.ПустаяСсылка) КАК Ссылка
	               |ГДЕ
	               |	ЛОЖЬ В
	               |			(ВЫБРАТЬ
	               |				Пользователи.ОграничениеИсточников КАК ОграничениеИсточников
	               |			ИЗ
	               |				Справочник.Пользователи КАК Пользователи
	               |			ГДЕ
	               |				Пользователи.Ссылка В (&ТекущиеПользователи))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(ПользователиДоступныеИсточники.Источник) = ТИП(Справочник.Организации)
	               |			ТОГДА ПользователиДоступныеИсточники.Источник
	               |		КОГДА ТИПЗНАЧЕНИЯ(ПользователиДоступныеИсточники.Источник) = ТИП(Справочник.БанковскиеСчета)
	               |			ТОГДА ВЫРАЗИТЬ(ПользователиДоступныеИсточники.Источник КАК Справочник.БанковскиеСчета).Владелец
	               |		ИНАЧЕ ПользователиДоступныеИсточники.Источник
	               |	КОНЕЦ
	               |ИЗ
	               |	Справочник.Пользователи.ДоступныеИсточники КАК ПользователиДоступныеИсточники
	               |ГДЕ
	               |	ПользователиДоступныеИсточники.Ссылка В(&ТекущиеПользователи)";
	
	Запрос.УстановитьПараметр("Предприятие", ОтборПредприятия);
	Запрос.УстановитьПараметр("ТекущиеПользователи", ПараметрыСеанса.ДоступныеПользователи);
	
	Результат = Запрос.Выполнить();
	МассивОрганизаций = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ТекДоступные = УправлениеДоступомБП.ОрганизацииДанныеКоторыхДоступныПользователю("РегистрБухгалтерии.Хозрасчетный", Ложь, ПараметрыСеанса.ТекущийПользователь);
	Для каждого ТекДоступныяОрг Из ТекДоступные Цикл
		МассивОрганизаций.Добавить(ТекДоступныяОрг);
	КонецЦикла;	
	
	Возврат МассивОрганизаций;
	
КонецФункции // ()


&НаСервереБезКонтекста
Функция ЧислоРабочихДнейВПериоде(Дата1, Дата2 = Неопределено)
	
	Если Дата2 = Неопределено Тогда
		Дата2 = КонецМесяца(Дата1);	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КалендарныеГрафики.ДатаГрафика) КАК ДатаГрафика
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|ГДЕ
	|	КалендарныеГрафики.ДатаГрафика <= КОНЕЦПЕРИОДА(&Дата2, День)
	|	И КалендарныеГрафики.ДатаГрафика >= НАЧАЛОПЕРИОДА(&Дата1, День)
	|	И КалендарныеГрафики.ДеньВключенВГрафик = ИСТИНА";
	
	Запрос.УстановитьПараметр("Дата1", Дата1);
	Запрос.УстановитьПараметр("Дата2", Дата2);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Возврат Выборка.ДатаГрафика;
		
	КонецЦикла;
	
	Возврат 0;	
	

КонецФункции // ()

&НаСервере
Процедура ОбновитьНаСервере()
	
	СтруктураЗаполненияПК = ВернутьТаблицуНачальногоЗаполненияПК(Объект.ВариантГруппировки, Объект.РежимРаботы, Объект.КорректировкаОстатковПоНеоплаченнымЗаявкам);
	
	РезультатВыборка = СтруктураЗаполненияПК.ТаблицаНачальногоЗаполнения;
	Индекс = СтруктураЗаполненияПК.ТекущийИндекс; 
	ДнейПланирования = СтруктураЗаполненияПК.КоличествоДнейПланирования;
	
	ЗаполнитьТаблицуДанныхПКНаФорме(Данные, РезультатВыборка, Индекс, ДнейПланирования, Объект.ВариантГруппировки, Объект.РежимРаботы, Объект.КорректировкаОстатковПоНеоплаченнымЗаявкам);
	
	//СтруктураЗаполненияПК = ВернутьТаблицуНачальногоЗаполненияПК("Источники", "Календарь", Истина);
	//
	//РезультатВыборка = СтруктураЗаполненияПК.ТаблицаНачальногоЗаполнения;
	//Индекс = СтруктураЗаполненияПК.ТекущийИндекс; 
	//ДнейПланирования = СтруктураЗаполненияПК.КоличествоДнейПланирования;
	//
	//ЗаполнитьТаблицуДанныхПКНаФорме(ДанныеПоИсточникам, РезультатВыборка, Индекс, ДнейПланирования, "Источники", "Календарь", Истина);
	
	//МассивЗапросов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	//
	//РезультатВыборка = МассивЗапросов[5].Выгрузить();
		
	//удалим строки остатков на начало физически
	//Если Не Объект.ОстаткиНаНачало Тогда
	//	НайденныеСтроки = Данные.НайтиСтроки(Новый Структура("СтатьяДДС", "Остаток на начало"));
	//	Для каждого ТекСтрока Из НайденныеСтроки Цикл
	//		Данные.Удалить(ТекСтрока);
	//	КонецЦикла; 
	//КонецЕсли;
	
	ЗаполнитьДерево();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКолонку(Элементы, ИмяКолонки, ТипКолонки, Владелец, ЭлементРодитель, ПутьКДанным)
	Тк = Элементы.Найти(ИмяКолонки);
	Если Тк = Неопределено Тогда
		Тк = Элементы.Вставить(ИмяКолонки, ТипКолонки, Владелец, ЭлементРодитель);
		Тк.ПутьКДанным = ПутьКДанным;
	Иначе
		//Элементы.Удалить(Тк);
		//Тк = Элементы.Вставить(ИмяКолонки, ТипКолонки, Владелец, ЭлементРодитель);
	КонецЕсли;
	Возврат Тк;
	
КонецФункции // ()

&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьНаКлиенте();	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНаКлиенте() Экспорт
	
	ОбновитьНаСервере();
	
	РасшифровкаГрафика.Параметры.УстановитьЗначениеПараметра("ЭквивалентнаяВалюта", Объект.ЭквивалентнаяВалюта);
	РасшифровкаГрафика.Параметры.УстановитьЗначениеПараметра("АктуальныйСценарий", АктуальныйСценарий);
	
	Если ДеревоРазвернуто Тогда
		РазвернутьВсе(Неопределено);
	КонецЕсли;

КонецПроцедуры


&НаСервере
Функция ОстаткиПоИсточникам()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПлатежкиОстатки.БанковскиеСчета КАК БанковскиеСчета,
	|	ПлатежкиОстатки.СуммаОстаток КАК СуммаОстаток
	|ИЗ
	|	РегистрНакопления.Платежки.Остатки(&ТекущаяДата, ) КАК ПлатежкиОстатки";
	
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДата()));
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить();
	
КонецФункции // ()

&НаСервереБезКонтекста
Функция ПолучитьРасшифровку(ЦФО, ПодразделениеЦФО, СтатьяДДС, Источник)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.СтатьяДДС КАК СтатьяДДС,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.ЦФО КАК ЦФО,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Подразделение КАК ПодразделениеЦФО,
	               |	ВЫБОР
	               |		КОГДА Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка.ДатаОплаты < НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
	               |			ТОГДА Д_ЗаявкаНаОплатуЗаявкаБезнал.СуммаДДС
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Просрочено,
	               |	ВЫБОР
	               |		КОГДА НАЧАЛОПЕРИОДА(Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка.ДатаОплаты, ДЕНЬ) <= НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
	               |			ТОГДА Д_ЗаявкаНаОплатуЗаявкаБезнал.СуммаДДС
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Сегодня,
	               |	ВЫБОР
	               |		КОГДА НАЧАЛОПЕРИОДА(Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка.ДатаОплаты, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата1День, ДЕНЬ)
	               |			ТОГДА Д_ЗаявкаНаОплатуЗаявкаБезнал.СуммаДДС
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Завтра,
	               |	ВЫБОР
	               |		КОГДА НАЧАЛОПЕРИОДА(Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка.ДатаОплаты, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата2День, ДЕНЬ)
	               |			ТОГДА Д_ЗаявкаНаОплатуЗаявкаБезнал.СуммаДДС
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Послезавтра,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Источник КАК Источник,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.СтатьяДДС.Код КАК СтатьяДДСКод,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.НазначениеПлатежа КАК НазначениеПлатежа,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Контрагент КАК Контрагент,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.СчетКонтрагента КАК СчетКонтрагента,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Договор КАК Договор,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка КАК Заявка
	               |ИЗ
	               |	Документ.Д_ЗаявкаНаОплату.ЗаявкаБезнал КАК Д_ЗаявкаНаОплатуЗаявкаБезнал
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение.СтрокиЗаявкиНаОплату КАК ПлатежноеПоручениеСтрокиЗаявкиНаОплату
	               |		ПО Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка = ПлатежноеПоручениеСтрокиЗаявкиНаОплату.ДокОснование
	               |			И Д_ЗаявкаНаОплатуЗаявкаБезнал.НомерСтроки = ПлатежноеПоручениеСтрокиЗаявкиНаОплату.НомерСтроки
	               |			И (ПлатежноеПоручениеСтрокиЗаявкиНаОплату.Ссылка.Проведен = ИСТИНА)
	               |ГДЕ
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка.Дата >= &ДатаНачала
				   //|	И Д_ЗаявкаНаОплатуЗаявкаБезнал.ЦФО = &ЦФО
	               |	И Д_ЗаявкаНаОплатуЗаявкаБезнал.Источник = &Источник
	               |	И Д_ЗаявкаНаОплатуЗаявкаБезнал.СтатьяДДС = &СтатьяДДС
	               |	И ПлатежноеПоручениеСтрокиЗаявкиНаОплату.Ссылка ЕСТЬ NULL
	               |	И Д_ЗаявкаНаОплатуЗаявкаБезнал.ПлатежноеПоручение = НЕОПРЕДЕЛЕНО
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""Доход ВНХ"",
	               |	Д_ИсточникППСрезПоследних.Предприятие,
	               |	НЕОПРЕДЕЛЕНО,
	               |	ВЫБОР
	               |		КОГДА Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка.ДатаОплаты < НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
	               |			ТОГДА Д_ЗаявкаНаОплатуЗаявкаБезнал.СуммаДДС
	               |		ИНАЧЕ 0
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА НАЧАЛОПЕРИОДА(Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка.ДатаОплаты, ДЕНЬ) <= НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
	               |			ТОГДА Д_ЗаявкаНаОплатуЗаявкаБезнал.СуммаДДС
	               |		ИНАЧЕ 0
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА НАЧАЛОПЕРИОДА(Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка.ДатаОплаты, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата1День, ДЕНЬ)
	               |			ТОГДА Д_ЗаявкаНаОплатуЗаявкаБезнал.СуммаДДС
	               |		ИНАЧЕ 0
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА НАЧАЛОПЕРИОДА(Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка.ДатаОплаты, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата2День, ДЕНЬ)
	               |			ТОГДА Д_ЗаявкаНаОплатуЗаявкаБезнал.СуммаДДС
	               |		ИНАЧЕ 0
	               |	КОНЕЦ,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.СчетКонтрагента,
	               |	""0000001"",
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.НазначениеПлатежа,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Организация,
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Источник,
	               |	""Неопределено"",
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка
	               |ИЗ
	               |	Документ.Д_ЗаявкаНаОплату.ЗаявкаБезнал КАК Д_ЗаявкаНаОплатуЗаявкаБезнал
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение.СтрокиЗаявкиНаОплату КАК ПлатежноеПоручениеСтрокиЗаявкиНаОплату
	               |		ПО Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка = ПлатежноеПоручениеСтрокиЗаявкиНаОплату.ДокОснование
	               |			И Д_ЗаявкаНаОплатуЗаявкаБезнал.НомерСтроки = ПлатежноеПоручениеСтрокиЗаявкиНаОплату.НомерСтроки
	               |			И (ПлатежноеПоручениеСтрокиЗаявкиНаОплату.Ссылка.Проведен = ИСТИНА)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Д_ИсточникПП.СрезПоследних КАК Д_ИсточникППСрезПоследних
	               |		ПО Д_ЗаявкаНаОплатуЗаявкаБезнал.СчетКонтрагента = Д_ИсточникППСрезПоследних.БанковскиеСчета
	               |ГДЕ
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка.Дата >= &ДатаНачала
				   |	И &СтатьяДДС = ""Доход ВНХ""
	               |	И Д_ЗаявкаНаОплатуЗаявкаБезнал.СчетКонтрагента = &Источник
	               |	И ПлатежноеПоручениеСтрокиЗаявкиНаОплату.Ссылка ЕСТЬ NULL
	               |	И Д_ЗаявкаНаОплатуЗаявкаБезнал.ПлатежноеПоручение = НЕОПРЕДЕЛЕНО";
	
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ДатаНачала", Дата("20171201"));
	Запрос.УстановитьПараметр("Дата1День", НачалоДня(ТекущаяДата() + 24*60*60));
	Запрос.УстановитьПараметр("Дата2День", НачалоДня(ТекущаяДата() + 48*60*60));
	Запрос.УстановитьПараметр("ЦФО", ЦФО);
	Запрос.УстановитьПараметр("ПодразделениеЦФО", ПодразделениеЦФО);
	Запрос.УстановитьПараметр("СтатьяДДС", СтатьяДДС);
	Запрос.УстановитьПараметр("Источник", Источник);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Выборка);
	
КонецФункции // ()

&НаКлиенте
Процедура ДанныеПриАктивизацииСтроки(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура ДнейПланированияПриИзменении(Элемент)
	Объект.ГоризонтПланирования = МИН(Объект.ГоризонтПланирования, 365);
	Обновить(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПриАктивизацииЯчейки(Элемент)
	Если СтрНайти(Элемент.Имя, "ДанныеДерево") Тогда
		ТекДанные = Элементы.ДанныеДерево.ТекущиеДанные;
		ТекЭлемент = Элементы.ДанныеДерево.ТекущийЭлемент;
		ДанныеИмя = "ДанныеДерево";
	Иначе	
		ТекДанные = Элементы.Данные.ТекущиеДанные;
		ТекЭлемент = Элементы.Данные.ТекущийЭлемент;
		ДанныеИмя = "Данные";
	КонецЕсли;
	Если НЕ ТекДанные = Неопределено Тогда
		
		РасшифровкаГрафика.Отбор.Элементы.Очистить();
		
		ЕстьОтбор = Ложь;

		Если ТипЗнч(ТекДанные.Источник) = Тип("СправочникСсылка.БанковскиеСчета") ИЛИ ТипЗнч(ТекДанные.Источник) = Тип("СправочникСсылка.Кассы") Тогда
			НовыйОтбор = РасшифровкаГрафика.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.ЛевоеЗначение = ?(Объект.ВариантГруппировки = "Объекты", Новый ПолеКомпоновкиДанных("ПодразделениеЦФО"), Новый ПолеКомпоновкиДанных("Источник"));
			НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			НовыйОтбор.ПравоеЗначение = ТекДанные.Источник;
			ЕстьОтбор = Истина;
		КонецЕсли;
				
		Если ЗначениеЗаполнено(ТекДанные.Предприятие) И (ТипЗнч(ТекДанные.Предприятие) = Тип("СправочникСсылка.Предприятия") ИЛИ ТипЗнч(ТекДанные.Предприятие) = Тип("СправочникСсылка.Организации")) Тогда //отбор при незаполненных источниках
			НовыйОтбор = РасшифровкаГрафика.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(?(Объект.ВариантГруппировки = "Источники" И ТипЗнч(ТекДанные.Предприятие) = Тип("СправочникСсылка.Организации"), "Организация", "Предприятие"));
			НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			НовыйОтбор.ПравоеЗначение = ТекДанные.Предприятие;
			ЕстьОтбор = Истина;
		КонецЕсли;
		
		Если ТекДанные.СтатьяДДС = "Поступления" ИЛИ ТекДанные.СтатьяДДС = "Поступления ВНХ" ИЛИ ТекДанные.СтатьяДДС = "Поступление" Тогда
			НовыйОтбор = РасшифровкаГрафика.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатьяДДС.Доход");
			НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			НовыйОтбор.ПравоеЗначение = Истина;
			ЕстьОтбор = Истина;
		ИначеЕсли ТекДанные.СтатьяДДС = "Оплата" Тогда
			
			НовыйОтборГруппа = РасшифровкаГрафика.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			НовыйОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			
			НовыйОтбор = НовыйОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатьяДДС.Доход");
			НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			НовыйОтбор.ПравоеЗначение = Ложь;
			НовыйОтбор = НовыйОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатьяДДС");
			НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			
			ЕстьОтбор = Истина;
		ИначеЕсли ТипЗнч(ТекДанные.СтатьяДДС) = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств") Тогда	
			НовыйОтбор = РасшифровкаГрафика.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатьяДДС");
			НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			НовыйОтбор.ПравоеЗначение = ТекДанные.СтатьяДДС;
			ЕстьОтбор = Истина;
		КонецЕсли;
		
		Если СтрНайти(ТекЭлемент.Имя, ДанныеИмя + "День") ИЛИ СтрНайти(ТекЭлемент.Имя, ДанныеИмя + "Значение") Тогда
			Если Объект.РежимРаботы = "Календарь" Тогда
				День = Сред(ТекЭлемент.Заголовок,1,2);
				Месяц = Сред(ТекЭлемент.Заголовок,4,2);
				Год = Сред(ТекЭлемент.Заголовок,7,4);
			Иначе	
				День = День(ТекущаяДата());
				Месяц = Месяц(ТекущаяДата());
				Год = Год(ТекущаяДата());
			КонецЕсли;
			
			ГодКалендаря = Год(ТекущаяДата());		
			СегодняРабочийДень = БПСервер.ПолучитьПризнакРабочегоДня(Неопределено, ГодКалендаря, НачалоДня(ТекущаяДата()));
			Если СегодняРабочийДень = Неопределено Тогда
				СегодняРабочийДень = Истина;
			КонецЕсли;
			
			НовыйОтбор = РасшифровкаГрафика.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаПлатежа");
			Если СтрНайти(ТекЭлемент.Имя, ДанныеИмя + "День0") ИЛИ СтрНайти(ТекЭлемент.Имя, ДанныеИмя + "Значение") Тогда
				НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
				НовыйОтбор.ПравоеЗначение = ?(Объект.УчитыватьВыходные ИЛИ СегодняРабочийДень, КонецДня(ТекущаяДата()), БПСервер.ВернутьСледующийРабочийДень(КонецДня(ТекущаяДата())));
			Иначе	
				НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				НовыйОтбор.ПравоеЗначение = НачалоДня(Дата(Год, Месяц, День));
			КонецЕсли; 
			
			НовыйОтбор = РасшифровкаГрафика.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТочкаМаршрута");
			НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
			НовыйОтбор.ПравоеЗначение = ОтборТочкиЗавершение;
		ИначеЕсли СтрНайти(ТекЭлемент.Имя, ДанныеИмя + "Просрочено") Тогда
			НовыйОтбор = РасшифровкаГрафика.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаПлатежа");
			НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
			НовыйОтбор.ПравоеЗначение = НачалоДня(ТекущаяДата());
			
			НовыйОтбор = РасшифровкаГрафика.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТочкаМаршрута");
			НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
			НовыйОтбор.ПравоеЗначение = ОтборТочкиЗавершение;
		ИначеЕсли СтрНайти(ТекЭлемент.Имя, ДанныеИмя + "БудущиеПлатежи") Тогда
			НовыйОтбор = РасшифровкаГрафика.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаПлатежа");
			НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
			НовыйОтбор.ПравоеЗначение = НачалоДня(ТекущаяДата());
			НовыйОтбор = РасшифровкаГрафика.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТочкаМаршрута");
			НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
			НовыйОтбор.ПравоеЗначение = ОтборТочкиЗавершение;
		ИначеЕсли СтрНайти(ТекЭлемент.Имя, ДанныеИмя + "ПлатежиПоРеестрам") Тогда
			НовыйОтбор = РасшифровкаГрафика.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТочкаМаршрута");
			НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			НовыйОтбор.ПравоеЗначение = ОтборТочкиЗавершение;
		Иначе
			НовыйОтбор = РасшифровкаГрафика.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТочкаМаршрута");
			НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			НовыйОтбор.ПравоеЗначение = Неопределено;
		КонецЕсли;
		
		Если ОтборТочкиЗаявок = "На согласовании" Тогда
			НовыйОтборГруппа = РасшифровкаГрафика.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			НовыйОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			
			НовыйОтбор = НовыйОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТочкаМаршрута");
			НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			НовыйОтбор.ПравоеЗначение = ОтборТочкиСогласования;
			НовыйОтбор = НовыйОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТочкаМаршрута");
			НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			НовыйОтбор.ПравоеЗначение = ОтборТочкиОплаты;
			
		ИначеЕсли ОтборТочкиЗаявок = "К оплате" Тогда
			НовыйОтбор = РасшифровкаГрафика.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТочкаМаршрута");
			НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			НовыйОтбор.ПравоеЗначение = ОтборТочкиОплаты;
		Иначе
			//НовыйОтбор = РасшифровкаГрафика.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			//НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТочкаМаршрута");
			//НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			//НовыйОтбор.ПравоеЗначение = ОтборТочкиЗавершение;
		КонецЕсли;
		
		Если Не ЕстьОтбор Тогда
			НовыйОтбор = РасшифровкаГрафика.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Документ");
			НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			НовыйОтбор.ПравоеЗначение = ПолучитьМассивЗаявокПоОтборам();
		КонецЕсли;
	
	Иначе
		РасшифровкаГрафика.Отбор.Элементы.Очистить();
		НовыйОтбор = РасшифровкаГрафика.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Источник");
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		НовыйОтбор.ПравоеЗначение = Неопределено;
	КонецЕсли;
	
	СуммаВерх = 0;
	Для каждого ТекСтрока Из Элементы[ДанныеИмя].ВыделенныеСтроки Цикл
		СуммаВерх = СуммаВерх + Элементы[ДанныеИмя].ДанныеСтроки(ТекСтрока).День0;	
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикПеренестиВперед(Команда)
	ПеренестиЗаявкуНаКлиенте("+1");
КонецПроцедуры

&НаКлиенте
Процедура ГрафикПеренестиНазад(Команда)
	ПеренестиЗаявкуНаКлиенте("-1");
КонецПроцедуры

&НаКлиенте
Процедура ГрафикПеренестиНаДату(Команда)
	
	ТекДанные = Элементы.РасшифровкаГрафика.ТекущаяСтрока;
	Если НЕ ТекДанные = Неопределено Тогда
		НоваяДата = Элементы.РасшифровкаГрафика.ТекущиеДанные.ДатаПлатежа;
		ПоказатьВводДаты(Новый ОписаниеОповещения("ГрафикПеренестиНаДатуЗавершение", ЭтаФорма, Новый Структура("НоваяДата", НоваяДата)), НоваяДата, "Введите дату платежа", ЧастиДаты.Дата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикПеренестиНаДатуЗавершение(Дата, ДополнительныеПараметры) Экспорт
	
	НоваяДата = ?(Дата = Неопределено, ДополнительныеПараметры.НоваяДата, Дата);
	
	
	Если (Дата <> Неопределено) Тогда
		
		Если НоваяДата < ТекущаяДата() Тогда
			Сообщить("Дата платежа меньше текущей даты!");
			Возврат;		
		КонецЕсли;
		
		ПеренестиЗаявкуНаКлиенте(НоваяДата);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиЗаявкуНаКлиенте(НоваяДата, НоваяСуммаСтруктура = 0, НовыйИсточник = Неопределено, ВыдСтроки = Неопределено, Поле = Неопределено)
	
	Если ВыдСтроки = Неопределено Тогда
		Если НЕ Элементы.РасшифровкаГрафика.ВыделенныеСтроки.Количество() Тогда
			Сообщить("Нет выделенных строк для перемещения.");
			Возврат;
		Иначе
			ВыделенныеСтроки = Элементы.РасшифровкаГрафика.ВыделенныеСтроки;	
		КонецЕсли;
	Иначе
		ВыделенныеСтроки = ВыдСтроки;	
	КонецЕсли;
	
	Если ТипЗнч(НоваяСуммаСтруктура) = Тип("Структура") Тогда
		НоваяСумма = НоваяСуммаСтруктура.Сумма;
	Иначе
		НоваяСумма = НоваяСуммаСтруктура;
		НоваяСуммаСтруктура = Новый Структура("Сумма, ВалютнаяСумма, ВалютнаяСуммаКонтрагента",НоваяСумма, 0, 0);
	КонецЕсли;
	
	Если Элементы.Данные.Видимость Тогда
		ТекЭлемент = Элементы.Данные.ТекущийЭлемент;
		ТекДанные = Элементы.Данные.ТекущиеДанные;
		ДанныеИмя = "Данные";
		ОбновлятьДанные = Ложь;
	Иначе	
		ТекЭлемент = Элементы.ДанныеДерево.ТекущийЭлемент;
		ТекДанные = Элементы.ДанныеДерево.ТекущиеДанные;
		ДанныеИмя = "ДанныеДерево";
		ОбновлятьДанные = Истина;
	КонецЕсли;
	
	ЧислоДней = 0;
	Если НоваяДата = "+1" Тогда
		ЧислоДней = 1;
		НоваяДата = ?(Объект.УчитыватьВыходные, Элементы.РасшифровкаГрафика.ТекущиеДанные.ДатаПлатежа + 24*60*60, МАКС(БПСервер.ВернутьСледующийРабочийДень(Элементы.РасшифровкаГрафика.ТекущиеДанные.ДатаПлатежа), ТекущаяДата()));
	ИначеЕсли НоваяДата = "-1" Тогда 	
		ЧислоДней = -1;
		//Если Элементы.РасшифровкаГрафика.ТекущиеДанные.ДатаПлатежа <= КонецДня(ТекущаяДата()) Тогда
		//	Сообщить("Дата платежа не может быть ранее текущей даты.");
		//	Возврат;
		//КонецЕсли;
		НоваяДата = ?(Объект.УчитыватьВыходные, Элементы.РасшифровкаГрафика.ТекущиеДанные.ДатаПлатежа - 24*60*60, БПСервер.ВернутьСледующийРабочийДень(Элементы.РасшифровкаГрафика.ТекущиеДанные.ДатаПлатежа, -1))
	ИначеЕсли ТипЗнч(НоваяДата) = Тип("Дата") Тогда
		Если ВыдСтроки = Неопределено Тогда
			ЧислоДней = Окр((НоваяДата - Элементы.РасшифровкаГрафика.ТекущиеДанные.ДатаПлатежа) / (24*60*60), 0);
		Иначе
			ЧислоДней = Окр((НоваяДата - ТекущаяДата()) / (24*60*60), 0);
		КонецЕсли;
		ОбновлятьДанные = Истина;
	КонецЕсли;
	
	Если ВыдСтроки = Неопределено И Элементы.РасшифровкаГрафика.ТекущиеДанные.ДатаПлатежа < НачалоДня(ТекущаяДата()) Тогда
		ЧислоДней = Окр((НачалоДня(ТекущаяДата()) - Элементы.РасшифровкаГрафика.ТекущиеДанные.ДатаПлатежа) / (24*60*60), 0);
		НоваяДата = Макс(НачалоДня(ТекущаяДата()), НоваяДата);
	КонецЕсли;	
	
	//Если ЧислоДней = 0 Тогда
	//	Сообщить("Дата переноса платежа не может быть равна текущей дате.");
	//	Возврат;
	//КонецЕсли;

	ВидВНХ = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ");
	СуммаПереноса = НоваяСумма;
	Для каждого ТекСтрокаГрафика Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.РасшифровкаГрафика.ДанныеСтроки(ТекСтрокаГрафика);
		
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;		
		КонецЕсли;
		
		Если ВыдСтроки = Неопределено Тогда
			Если ДанныеСтроки.ВидОперации = ВидВНХ Тогда
				Сообщить("Невозможно перемещать строки ВНХ поступлений.");
				Возврат;		
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(НоваяДата) = Тип("Дата") И НачалоДня(НоваяДата) = НачалоДня(ДанныеСтроки.ДатаПлатежа) И НЕ НоваяСумма = ДанныеСтроки.Сумма И НовыйИсточник = Неопределено Тогда //пытается исправить текущую сумму в текущей дате((
			Сообщить("Дата при разбиении суммы должна отличаться от текущей.");
			Возврат;
		КонецЕсли;

		ПеренестиЗаписьНаСервере(ТекСтрокаГрафика, НоваяДата, НоваяСуммаСтруктура, НовыйИсточник);
		Если Не ОбновлятьДанные Тогда
			//ДанныеСтроки = Элементы.РасшифровкаГрафика.ДанныеСтроки(ТекСтрокаГрафика);
			//Если НЕ СуммаПереноса Тогда
			СуммаПереноса = ДанныеСтроки.Сумма;
			//КонецЕсли;
			ИмяПоля = СтрЗаменить(ТекЭлемент.Имя, ДанныеИмя, "");
			ТекДанные[ИмяПоля] = ТекДанные[ИмяПоля] - СуммаПереноса;
			Если СтрНайти(ИмяПоля, "День") И ТекДанные.Свойство("День" + Строка(Число(СтрЗаменить(ИмяПоля, "День", ""))+ЧислоДней)) Тогда
				ТекДанные["День" + Строка(Число(СтрЗаменить(ИмяПоля, "День", ""))+ЧислоДней)] = ТекДанные["День" + Строка(Число(СтрЗаменить(ИмяПоля, "День", ""))+ЧислоДней)] + СуммаПереноса;
			КонецЕсли;
			
			//пересчет остатков
			МассивСтруктур = Новый Массив;
			МассивСтруктур.Добавить(Новый Структура("Источник, СтатьяДДС", ТекДанные.Источник,"Остаток на конец"));
			МассивСтруктур.Добавить(Новый Структура("СтатьяДДС", "Денежный поток итого"));
			МассивСтруктур.Добавить(Новый Структура("СтатьяДДС", "Остаток на конец итого"));
			МассивСтруктур.Добавить(Новый Структура("СтатьяДДС", "Остаток на начало итого"));
			СтатьяДоход = БюджетныйНаСервере.ВернутьРеквизит(ТекДанные.СтатьяДДС, "Доход");
			//ИндексДня = ?(ЧислоДней >= 0, Число(СтрЗаменить(ИмяПоля, "День", "")), -Число(СтрЗаменить(ИмяПоля, "День", "")));
			//Для ТекДень = ИндексДня По ИндексДня + ЧислоДней - 1 Цикл
			ТекДень = ЧислоДней;
			СуммаПереноса = ?(СтатьяДоход, -СуммаПереноса, СуммаПереноса);
			
			Для каждого ТекСтркутура Из МассивСтруктур Цикл
				НайденныеСтроки = Данные.НайтиСтроки(ТекСтркутура);
				Для каждого ТекСтрокаСтатьи Из НайденныеСтроки Цикл
					
					Если ИмяПоля = "Просрочено" Тогда
						Продолжить;				
					КонецЕсли;
					
					Если ТекСтрокаСтатьи.СтатьяДДС = "Остаток на начало итого" Тогда
						Если ЧислоДней > 0 Тогда
							Если СтрНайти(ИмяПоля, "День") Тогда
								ТекСтрокаСтатьи["День" + Строка(Число(СтрЗаменить(ИмяПоля, "День", ""))+ТекДень)] = ТекСтрокаСтатьи["День" + Строка(Число(СтрЗаменить(ИмяПоля, "День", ""))+ТекДень)] + СуммаПереноса;
							КонецЕсли;
						Иначе
							ТекСтрокаСтатьи[ИмяПоля] = ТекСтрокаСтатьи[ИмяПоля] - СуммаПереноса;
						КонецЕсли;
					Иначе
						Если (ЧислоДней > 0) ИЛИ ТекСтрокаСтатьи.СтатьяДДС = "Денежный поток итого" Тогда
							ТекСтрокаСтатьи[ИмяПоля] = ТекСтрокаСтатьи[ИмяПоля] + СуммаПереноса;
						КонецЕсли;
						
						Если (ЧислоДней < 0) ИЛИ ТекСтрокаСтатьи.СтатьяДДС = "Денежный поток итого" Тогда
							Если СтрНайти(ИмяПоля, "День") Тогда
								Если ИмяПоля = "День0" Тогда
									ТекСтрокаСтатьи["Просрочено"] = ТекСтрокаСтатьи["Просрочено"] - СуммаПереноса;					
								Иначе	
									ТекСтрокаСтатьи["День" + Строка(Число(СтрЗаменить(ИмяПоля, "День", ""))+ТекДень)] = ТекСтрокаСтатьи["День" + Строка(Число(СтрЗаменить(ИмяПоля, "День", ""))+ТекДень)] - СуммаПереноса;					
								КонецЕсли;
							КонецЕсли;					
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла; 
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	//МассивВыделенныхСтрок = Новый Массив;
	//Для каждого ТекСТрока Из Элементы.РасшифровкаГрафика.ВыделенныеСтроки Цикл
	//	МассивВыделенныхСтрок.Добавить(ТекСТрока);
	//КонецЦикла; 
	
	Если ВыделенныеСтроки.Количество() И Не НоваяСумма Тогда
		Элементы.РасшифровкаГрафика.Обновить();
		//Если СтрНайти(ИмяПоля, "День") Тогда
		//	Если Элементы.Найти(ДанныеИмя + "День" + Строка(Число(СтрЗаменить(ИмяПоля, "День", ""))+ЧислоДней)) = Неопределено Тогда //выход за границу горизонта
		//		Объект.ГоризонтПланирования = НачалоДня(Объект.ГоризонтПланирования + 24*60*60);
		//		ДнейПланированияРегулирование(Неопределено, 1, Истина);
		//		//Возврат;
		//	КонецЕсли;
		//	Если Элементы.Данные.Видимость Тогда
		//		Элементы.Данные.ТекущийЭлемент = Элементы[ДанныеИмя + "День" + Строка(Число(СтрЗаменить(ИмяПоля, "День", ""))+ЧислоДней)];
		//	Иначе
		Если Не Поле = Неопределено Тогда
			Элементы.ДанныеДерево.ТекущийЭлемент = Поле;
		КонецЕсли;
		//	КонецЕсли;
		//Иначе
		//	Если Элементы.Данные.Видимость Тогда
		//		Элементы.Данные.ТекущийЭлемент = Элементы[ДанныеИмя + "День0"];
		//	Иначе
		//		Элементы.ДанныеДерево.ТекущийЭлемент = Элементы[ДанныеИмя + "День0"];
		//	КонецЕсли;	
		//КонецЕсли;
		Если Элементы.Данные.Видимость Тогда
			ДанныеПриАктивизацииЯчейки(Элементы.Данные.ТекущийЭлемент);
		Иначе
			ДанныеПриАктивизацииЯчейки(Элементы.ДанныеДерево.ТекущийЭлемент);
		КонецЕсли;
		//Для каждого ТекСтрока Из МассивВыделенныхСтрок Цикл
		//	Элементы.РасшифровкаГрафика.ВыделенныеСтроки.Добавить(ТекСтрока);		
		//КонецЦикла; 
	КонецЕсли;
	
	Если ОбновлятьДанные Тогда
		Обновить(Неопределено);
		Возврат;
	КонецЕсли;
	

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПеренестиЗаписьНаСервере(КлючЗаписи, НоваяДата, НоваяСуммаСтруктура, НовыйИсточник, НомерИтерации = 1) Экспорт
	
	Если ТипЗнч(НоваяСуммаСтруктура) = Тип("Структура") Тогда
		НоваяСумма = НоваяСуммаСтруктура.Сумма;
	Иначе
		НоваяСумма = НоваяСуммаСтруктура;
		НоваяСуммаСтруктура = Новый Структура("Сумма, ВалютнаяСумма, ВалютнаяСуммаКонтрагента", НоваяСумма, 0, 0);
	КонецЕсли;
	
	МенеджерЗаписи1 = РегистрыСведений.сабГрафикПлатежей.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи1, КлючЗаписи);
	МенеджерЗаписи1.Прочитать();
	ВалютнаяСуммаТекущая = МенеджерЗаписи1.ВалютнаяСумма;
	ВалютнаяСуммаКонтрагентаТекущая = МенеджерЗаписи1.ВалютнаяСуммаКонтрагента;
	СуммаТекущая = МенеджерЗаписи1.Сумма;
	ДатаТекущая = МенеджерЗаписи1.ДатаПлатежа; 
	СтавкаНДС = сабОбщегоНазначения.ПолучитьСтавкуНДС(МенеджерЗаписи1.СтавкаНДС);
	
	Если НачалоДня(НоваяДата) = НачалоДня(ДатаТекущая) Тогда //вероятно перенос между источниками
		МенеджерЗаписи2 = РегистрыСведений.сабГрафикПлатежей.СоздатьМенеджерЗаписи();	
	Иначе
		МенеджерЗаписи2 = РегистрыСведений.сабГрафикПлатежей.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи2, КлючЗаписи);
		МенеджерЗаписи2.ДатаПлатежа = НоваяДата;
		МенеджерЗаписи2.Прочитать();
		
		Если НЕ МенеджерЗаписи2.Выбран() Тогда //ищем другой УИД
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	*
			               |ИЗ
			               |	РегистрСведений.сабГрафикПлатежей КАК сабГрафикПлатежей
			               |ГДЕ
			               |	НЕ сабГрафикПлатежей.УИДСтрокиДокумента = &УИДСтрокиДокумента
			               |	И сабГрафикПлатежей.Документ = &Документ
			               |	И сабГрафикПлатежей.ДатаПлатежа = &ДатаПлатежа
			               |	И сабГрафикПлатежей.ТочкаМаршрута = &ТочкаМаршрута
			               |	И сабГрафикПлатежей.СтатьяДДС = &СтатьяДДС
			               |	И сабГрафикПлатежей.ВидОперации = &ВидОперации";
			
			Запрос.УстановитьПараметр("УИДСтрокиДокумента", КлючЗаписи.УИДСтрокиДокумента);
			Запрос.УстановитьПараметр("Документ", КлючЗаписи.Документ);
			Запрос.УстановитьПараметр("ДатаПлатежа", НоваяДата);
			Запрос.УстановитьПараметр("ТочкаМаршрута", КлючЗаписи.ТочкаМаршрута);
			Запрос.УстановитьПараметр("СтатьяДДС", КлючЗаписи.СтатьяДДС);
			Запрос.УстановитьПараметр("ВидОперации", КлючЗаписи.ВидОперации);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи2, Выборка);	
				МенеджерЗаписи2.Прочитать();
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ МенеджерЗаписи2.Выбран() Тогда
		МенеджерЗаписи1.ДатаПлатежа = НоваяДата;
		
		Если НоваяСумма Тогда
			//МенеджерЗаписи1.ВалютнаяСумма = МенеджерЗаписи1.ВалютнаяСумма * (?(МенеджерЗаписи1.Сумма, НоваяСумма / МенеджерЗаписи1.Сумма, 0));
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи1, НоваяСуммаСтруктура);
			МенеджерЗаписи1.СуммаНДС = НоваяСуммаСтруктура.Сумма - (НоваяСуммаСтруктура.Сумма) / ((СтавкаНДС + 100) / 100);
		КонецЕсли;
		
		Если НЕ НовыйИсточник = Неопределено Тогда
			МенеджерЗаписи1.Источник = НовыйИсточник;
			Если ТипЗнч(НовыйИсточник) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
				МенеджерЗаписи1.Организация = НовыйИсточник.Владелец;
				МенеджерЗаписи1.Предприятие = НовыйИсточник.Предприятие;
			ИначеЕсли ТипЗнч(НовыйИсточник) = Тип("СправочникСсылка.Кассы") Тогда
				МенеджерЗаписи1.Предприятие = НовыйИсточник.Предприятие;
			КонецЕсли;
		КонецЕсли;
		
		МенеджерЗаписи1.Записать();

	Иначе
		МенеджерЗаписи2.ВалютнаяСумма = МенеджерЗаписи2.ВалютнаяСумма + ?(НоваяСуммаСтруктура.ВалютнаяСумма, НоваяСуммаСтруктура.ВалютнаяСумма, ВалютнаяСуммаТекущая);
		МенеджерЗаписи2.ВалютнаяСуммаКонтрагента = МенеджерЗаписи2.ВалютнаяСуммаКонтрагента + ?(НоваяСуммаСтруктура.ВалютнаяСуммаКонтрагента, НоваяСуммаСтруктура.ВалютнаяСуммаКонтрагента, ВалютнаяСуммаКонтрагентаТекущая);
		МенеджерЗаписи2.Сумма = МенеджерЗаписи2.Сумма + ?(НоваяСуммаСтруктура.Сумма, НоваяСуммаСтруктура.Сумма, СуммаТекущая);
		МенеджерЗаписи2.СуммаНДС = МенеджерЗаписи2.Сумма - (МенеджерЗаписи2.Сумма) / ((СтавкаНДС + 100) / 100);

		Если НЕ НовыйИсточник = Неопределено Тогда
			МенеджерЗаписи2.Источник = НовыйИсточник;
			Если ТипЗнч(НовыйИсточник) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
				МенеджерЗаписи1.Организация = НовыйИсточник.Владелец;
				МенеджерЗаписи1.Предприятие = НовыйИсточник.Предприятие;
			ИначеЕсли ТипЗнч(НовыйИсточник) = Тип("СправочникСсылка.Кассы") Тогда
				МенеджерЗаписи1.Предприятие = НовыйИсточник.Предприятие;
			КонецЕсли;
		КонецЕсли;
		
		МенеджерЗаписи2.Записать();
	КонецЕсли;
	
	Если НоваяСумма Тогда
		МенеджерЗаписи = РегистрыСведений.сабГрафикПлатежей.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, КлючЗаписи);
		МенеджерЗаписи.Прочитать();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, МенеджерЗаписи1);
		МенеджерЗаписи.ВалютнаяСумма = ВалютнаяСуммаТекущая - НоваяСуммаСтруктура.ВалютнаяСумма;
		МенеджерЗаписи.ВалютнаяСуммаКонтрагента = ВалютнаяСуммаКонтрагентаТекущая - НоваяСуммаСтруктура.ВалютнаяСуммаКонтрагента;
		МенеджерЗаписи.Сумма = СуммаТекущая - НоваяСумма;
		МенеджерЗаписи.СуммаНДС = МенеджерЗаписи.Сумма - (МенеджерЗаписи.Сумма) / ((СтавкаНДС + 100) / 100);
		МенеджерЗаписи.ДатаПлатежа = ДатаТекущая;
		МенеджерЗаписи.Записать();
		
		Если МенеджерЗаписи1.Выбран() И ЗначениеЗаполнено(МенеджерЗаписи1.УИДСтрокиДокумента) Тогда
			МенеджерЗаписи1.УИДСтрокиДокумента = Новый УникальныйИдентификатор; //создаем новые УИД для новой строки
		КонецЕсли;
        МенеджерЗаписи1.Записать();
		
	ИначеЕсли МенеджерЗаписи2.Выбран() И НЕ НоваяСумма Тогда 
		МенеджерЗаписи1.Удалить();	
	КонецЕсли;
	
	//перенос для ВНХ заявки
	Если НомерИтерации = 1 Тогда
		НаборЗаписей2 = РегистрыСведений.сабГрафикПлатежей.СоздатьНаборЗаписей();
		ТекМенеджер = ?(ЗначениеЗаполнено(МенеджерЗаписи1.Документ), МенеджерЗаписи1, МенеджерЗаписи2);
		НаборЗаписей2.Отбор.Документ.Установить(ТекМенеджер.Документ);
		НаборЗаписей2.Прочитать();
		НоваяСтрока = Неопределено;
		Для каждого ТекЗаписьНабора Из НаборЗаписей2 Цикл
			Если (ТекМенеджер.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ И
				(ТекЗаписьНабора.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ОплатаВНХ
				ИЛИ ТекЗаписьНабора.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.СнятиеНаличных)) ИЛИ 
				((ТекМенеджер.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ОплатаВНХ ИЛИ ТекМенеджер.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.СнятиеНаличных) И
				ТекЗаписьНабора.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ)
				И ТекЗаписьНабора.ДатаПлатежа = ДатаТекущая Тогда
				Если ТекЗаписьНабора.УИДСтрокиДокумента = "" ИЛИ ТекЗаписьНабора.УИДСтрокиДокумента = ТекЗаписьНабора.УИДСтрокиДокумента Тогда
					НоваяСтрока = ТекЗаписьНабора;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;					
		
		Если Не НоваяСтрока = Неопределено Тогда
			ПеренестиЗаписьНаСервере(НоваяСтрока, НоваяДата, НоваяСумма, НоваяСтрока.Источник, 2)
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикРазбить(Команда)
	ТекДанные = Элементы.РасшифровкаГрафика.ТекущиеДанные;
	
	Если НЕ ТекДанные = Неопределено Тогда
		ЭтоМногострочнаяЗаявка = ЭтоМногострочнаяЗаявка(ТекДанные.Документ);
		Если ЭтоМногострочнаяЗаявка Тогда
			Сообщить("Заявка по данной строке графика имеет в расшифровке более 1 строки. Разбивка платежа невозможна.");
			Возврат;		
		КонецЕсли;
		ТекФорма = ПолучитьФорму("Обработка.сабПлатежныйКалендарь.Форма.ФормаРазбивкиПлатежа");
		ТекФорма.ИмяФормыВладельца = ЭтаФорма.ИмяФормы;
		
		Если ТекДанные.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ") Тогда
			Сообщить("Это ВНХ поступление. Разбивка данной строки графика невозможна.");
			Возврат;		
		КонецЕсли;
		
		Если ТекДанные.ДатаПлатежа <= НачалоДня(ТекущаяДата()) Тогда
			ТекФорма.Дата = ТекущаяДата() + 24*60*60;
		Иначе
			ТекФорма.Дата = ТекущаяДата();
		КонецЕсли;
		
		ТекФорма.Курс = Элементы.РасшифровкаГрафика.ТекущиеДанные.Курс;
		ТекФорма.КурсКонтрагента = Элементы.РасшифровкаГрафика.ТекущиеДанные.КурсКонтрагента;
		ТекФорма.Валюта = Элементы.РасшифровкаГрафика.ТекущиеДанные.Валюта;
		ТекФорма.ВалютаКонтрагента = Элементы.РасшифровкаГрафика.ТекущиеДанные.ВалютаКонтрагента;
		ТекФорма.СуммаИсходная = Элементы.РасшифровкаГрафика.ТекущиеДанные.Сумма;
		ТекФорма.ВалютнаяСуммаИсходная = Элементы.РасшифровкаГрафика.ТекущиеДанные.ВалютнаяСумма;
		ТекФорма.ВалютнаяСуммаКонтрагентаИсходная = Элементы.РасшифровкаГрафика.ТекущиеДанные.ВалютнаяСуммаКонтрагента;
		ТекФорма.Открыть();
		//ТекФорма.КлючЗаписи = ТекДанные;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоМногострочнаяЗаявка(Заявка)
	Если ЗначениеЗаполнено(Заявка) И ТипЗнч(Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаФинансирование") Тогда
		Возврат Заявка.ТабличнаяЧасть.Количество() > 1;
	КонецЕсли;
КонецФункции // ()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "сабРазбитьПлатеж" И Параметр.ИмяФормыВладельца = ЭтаФорма.ИмяФормы Тогда
		ПеренестиЗаявкуНаКлиенте(Параметр.Дата, Параметр);	
	КонецЕсли;
	Если ИмяСобытия = "сабОбноватьПлатежныйКалендарь" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(Объект, Параметр);		
		КонецЕсли;
		//ДанныеДерево.ПолучитьЭлементы().Очистить();
		Обновить(Неопределено);
		Элементы.РасшифровкаГрафика.Обновить();		
	КонецЕсли;
	Если ИмяСобытия = "сабОтборВыбрать" Тогда
		ПерезаполнитьОтборы(Параметр);
		Элементы.РасшифровкаГрафика.Обновить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГрафикСобратьПлатеж(Команда)
	Если Элементы.Данные.Видимость Тогда
		ТекЭлемент = Элементы.Данные.ТекущийЭлемент;
		ТекДанные = Элементы.Данные.ТекущиеДанные;
		ДанныеИмя = "Данные";
	Иначе	
		ТекЭлемент = Элементы.ДанныеДерево.ТекущийЭлемент;
		ТекДанные = Элементы.ДанныеДерево.ТекущиеДанные;
		ДанныеИмя = "ДанныеДерево";
	КонецЕсли;
	
	ТекДанныеГрафика = Элементы.РасшифровкаГрафика.ТекущаяСтрока;
	Если НЕ ТекДанныеГрафика = Неопределено Тогда
		МассивДат = Новый Массив;
		СобратьПлатежНаСервере(ТекДанныеГрафика, МассивДат);
		
		//Для каждого СтруктураДня Из МассивДат Цикл
		//	ИмяПоля = СтрЗаменить(ТекЭлемент.Имя, ДанныеИмя, "");
		//	ТекДанные["День" + Строка(Число(СтрЗаменить(ИмяПоля, "День", "")))] = ТекДанные["День" + Строка(Число(СтрЗаменить(ИмяПоля, "День", "")))] + СтруктураДня.Сумма;
		//	Если ТекДанные.Свойство("День" + Строка(Число(СтрЗаменить(ИмяПоля, "День", ""))+СтруктураДня.ЧислоДней)) Тогда
		//		ТекДанные["День" + Строка(Число(СтрЗаменить(ИмяПоля, "День", ""))+СтруктураДня.ЧислоДней)] = ТекДанные["День" + Строка(Число(СтрЗаменить(ИмяПоля, "День", ""))+СтруктураДня.ЧислоДней)] - СтруктураДня.Сумма;
		//	КонецЕсли;
		//КонецЦикла;
		
		Обновить(Неопределено);
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СобратьПлатежНаСервере(КлючЗаписи, МассивДат) Экспорт
	
	//ПустойИД = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	МенеджерЗаписи = РегистрыСведений.сабГрафикПлатежей.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, КлючЗаписи);
	МенеджерЗаписи.Прочитать();
	
	МенеджерЗаписи2 = Неопределено;
	
	//Если ЗначениеЗаполнено(МенеджерЗаписи.УИДСтрокиДокумента) Тогда
	НоваяСуммаРасход = 0;
	НоваяСуммаНДСРасход = 0;
	НоваяВалСуммаРасход = 0;
	НоваяСуммаПриход = 0;
	НоваяСуммаНДСПриход = 0;
	НоваяВалСуммаПриход = 0;
	НаборЗаписей = РегистрыСведений.сабГрафикПлатежей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(МенеджерЗаписи.Документ);
	НаборЗаписей.Прочитать();
	
	Для каждого ТекЗапись Из НаборЗаписей Цикл
		Если ТекЗапись.ТочкаМаршрута = МенеджерЗаписи.ТочкаМаршрута Тогда
			
			Если ТекЗапись.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ Тогда
				МенеджерЗаписи2 = РегистрыСведений.сабГрафикПлатежей.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи2, ТекЗапись);
				НоваяСуммаПриход = НоваяСуммаПриход + ТекЗапись.Сумма;
				НоваяСуммаНДСПриход = НоваяСуммаНДСПриход + ТекЗапись.СуммаНДС;
				НоваяВалСуммаПриход = НоваяВалСуммаПриход + ТекЗапись.ВалютнаяСумма;
			Иначе
				НоваяСуммаРасход = НоваяСуммаРасход + ТекЗапись.Сумма;
				НоваяСуммаНДСРасход = НоваяСуммаНДСРасход + ТекЗапись.СуммаНДС;
				НоваяВалСуммаРасход = НоваяВалСуммаРасход + ТекЗапись.ВалютнаяСумма;
			КонецЕсли;
			
			Если МенеджерЗаписи.ВидОперации = ТекЗапись.ВидОперации ИЛИ НЕ МенеджерЗаписи.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ Тогда
				МенеджерЗаписи3 = РегистрыСведений.сабГрафикПлатежей.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи3, ТекЗапись);
				МенеджерЗаписи3.Удалить();
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла; 
	
	Если НоваяСуммаРасход ИЛИ НоваяВалСуммаРасход Тогда
		МенеджерЗаписи.Сумма = НоваяСуммаРасход;
		МенеджерЗаписи.СуммаНДС = НоваяСуммаНДСРасход;
		МенеджерЗаписи.ВалютнаяСумма = НоваяВалСуммаРасход;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
	Если НЕ МенеджерЗаписи2 = Неопределено Тогда
		МенеджерЗаписи2.ДатаПлатежа = МенеджерЗаписи.ДатаПлатежа;	
		МенеджерЗаписи2.Сумма = НоваяСуммаПриход;
		МенеджерЗаписи2.СуммаНДС = НоваяСуммаНДСПриход;
		МенеджерЗаписи2.ВалютнаяСумма = НоваяВалСуммаПриход;
		МенеджерЗаписи2.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаГрафикаПриАктивизацииСтроки(Элемент)
	СуммаНиз = 0;
	Для каждого ТекСтрокаГрафика Из Элементы.РасшифровкаГрафика.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.РасшифровкаГрафика.ДанныеСтроки(ТекСтрокаГрафика);
		СуммаНиз = СуммаНиз + ДанныеСтроки.Сумма;	
	КонецЦикла; 
	//ТекДанные = Элементы.РасшифровкаГрафика.ТекущиеДанные;
	//Элементы.РасшифровкаГрафикаГруппа1.Доступность = (НЕ ТекДанные = Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаГрафикаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекДанные = Элементы.РасшифровкаГрафика.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.Документ) Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(Неопределено, ТекДанные.Документ);
	Иначе
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("РегистрСведений.сабГрафикПлатежей.Форма.ФормаЗаписиПростая", Новый Структура("Ключ", Элементы.РасшифровкаГрафика.ТекущаяСтрока)); 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Поступление(Команда)
	
	Если Элементы.Данные.Видимость Тогда
		ТекЭлемент = Элементы.Данные.ТекущийЭлемент;
		ТекДанные = Элементы.Данные.ТекущиеДанные;
		ДанныеИмя = "Данные";
	Иначе	
		ТекЭлемент = Элементы.ДанныеДерево.ТекущийЭлемент;
		ТекДанные = Элементы.ДанныеДерево.ТекущиеДанные;
		ДанныеИмя = "ДанныеДерево";
	КонецЕсли;

	ТекФорма = ПолучитьФорму("РегистрСведений.сабГрафикПлатежей.Форма.ФормаЗаписиПростая");
	Если НЕ ТекДанные = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ТекФорма.Запись, ТекДанные);
		Если ТипЗнч(ТекДанные.Источник) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			РеквизитыИсточника = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.Источник, "Предприятие, Владелец");
			ТекФорма.Запись.Организация = РеквизитыИсточника.Владелец;
		Иначе	
			РеквизитыИсточника = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.Источник, "Предприятие");
		КонецЕсли;
		Если НЕ РеквизитыИсточника = Неопределено Тогда
			ТекФорма.Запись.Предприятие = РеквизитыИсточника.Предприятие;
			ТекФорма.Запись.ЦФО = РеквизитыИсточника.Предприятие;
		КонецЕсли;
		ТекФорма.Запись.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.Поступление");
		ТекФорма.Запись.СтатьяДДС = СтатьяПоступления();
		
		Если СтрНайти(ТекЭлемент.Имя, ДанныеИмя + "День") Тогда
			День = Сред(ТекЭлемент.Заголовок,1,2);
			Месяц = Сред(ТекЭлемент.Заголовок,4,2);
			Год = Сред(ТекЭлемент.Заголовок,7,4);
			
			ТекФорма.Запись.ДатаПлатежа = Дата(Год, Месяц, День);
		КонецЕсли;
		
		
	КонецЕсли;
	ТекФорма.Открыть();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтатьяПоступления()

	Возврат Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Оплата от покупателей", Истина);

КонецФункции // ()


&НаКлиенте
Процедура ПоступлениеВНХ(Команда)
	
	Если Элементы.Данные.Видимость Тогда
		ЭлементыДанные = Элементы.Данные;
		ТекЭлемент = Элементы.Данные.ТекущийЭлемент;
		ТекДанные = Элементы.Данные.ТекущиеДанные;
		ТекВыделенныеСтроки = Элементы.Данные.ВыделенныеСтроки;
		ДанныеИмя = "Данные";
	Иначе
		ЭлементыДанные = Элементы.ДанныеДерево;
		ТекЭлемент = Элементы.ДанныеДерево.ТекущийЭлемент;
		ТекДанные = Элементы.ДанныеДерево.ТекущиеДанные;
		ТекВыделенныеСтроки = Элементы.ДанныеДерево.ВыделенныеСтроки;
		ДанныеИмя = "ДанныеДерево";
	КонецЕсли;

	
	Если ТекВыделенныеСтроки.Количество() > 1 Тогда //выделено более 1 источника, делаем хитрое пополнение
		СуммаПрофицит = 0;
		СуммаДефицит = 0;
		ТекСтрокаПрофицит = Неопределено;
		ТекСтрокаДефицит = Неопределено;
		Для каждого ТекСтрока Из ТекВыделенныеСтроки Цикл
			ТекДанныеСтроки = ЭлементыДанные.ДанныеСтроки(ТекСтрока);
			ИмяПоля = СтрЗаменить(ЭлементыДанные.ТекущийЭлемент.Имя, ДанныеИмя, "");
			Если ТекДанныеСтроки[ИмяПоля] > СуммаПрофицит Тогда
				СуммаПрофицит = ТекДанныеСтроки[ИмяПоля];
				ТекСтрокаПрофицит = ТекДанныеСтроки;
			Иначе
				СуммаДефицит = ТекДанныеСтроки[ИмяПоля];
				ТекСтрокаДефицит = ТекДанныеСтроки;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	Если ТекСтрокаПрофицит = Неопределено Тогда
		ТекДанные = ТекДанные;
	Иначе	
		ТекДанные = ТекСтрокаПрофицит;		
	КонецЕсли;
	Если Не ТекДанные = Неопределено Тогда
		ТекФорма = ПолучитьФорму("Документ.Д_ЗаявкаНаОплату.ФормаОбъекта");
		Если ТипЗнч(ТекДанные.Источник) = Тип("СправочникСсылка.Кассы") Тогда
			РеквизитыИсточника = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.Источник, "Предприятие, Предприятие.ВидДеятельности");
			ТекФорма.Объект.ТипИсточника = ПредопределенноеЗначение("Перечисление.Д_ИсточникиСредств.Нал");
		Иначе
			РеквизитыИсточника = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.Источник, "Предприятие, Предприятие.ВидДеятельности, Владелец");
			ТекФорма.Объект.Организация = РеквизитыИсточника.Владелец;
		КонецЕсли;
		ТекФорма.Объект.Предприятие = РеквизитыИсточника.Предприятие;
		ТекФорма.Объект.Подразделение = РеквизитыИсточника.ПредприятиеВидДеятельности;
		ТекФорма.Объект.Источник = ТекДанные.Источник;
		ТекФорма.Объект.ЦФО = РеквизитыИсточника.Предприятие;
		ТекФорма.Объект.Комментарий = "перемещение м/ду источниками";
		
		НоваяСтрока = ТекФорма.Объект.ЗаявкаБезнал.Добавить();
		НоваяСтрока.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ОплатаВНХ");
		НоваяСтрока.СтатьяДДС = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенежныхСредств.РасходыМеждуИсточниками");
		Если НЕ ТекСтрокаДефицит = Неопределено Тогда
			Если ТипЗнч(ТекСтрокаДефицит.Источник) = Тип("СправочникСсылка.Кассы") Тогда
				РеквизитыИсточникаДефицит = БюджетныйНаСервере.ВернутьРеквизиты(ТекСтрокаДефицит.Источник, "Предприятие, Предприятие.ВидДеятельности");
			Иначе	
				РеквизитыИсточникаДефицит = БюджетныйНаСервере.ВернутьРеквизиты(ТекСтрокаДефицит.Источник, "Предприятие, Предприятие.ВидДеятельности, Владелец");
				НоваяСтрока.Контрагент = РеквизитыИсточникаДефицит.Владелец;
			КонецЕсли;
			НоваяСтрока.СчетКонтрагента = ТекСтрокаДефицит.Источник;
			НоваяСтрока.СуммаДДС = -СуммаДефицит;
		Иначе	
			НоваяСтрока.Контрагент = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
			НоваяСтрока.СчетКонтрагента = ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");
		КонецЕсли;
		
		Если СтрНайти(ТекЭлемент.Имя, ДанныеИмя + "День") Тогда
			День = Сред(ТекЭлемент.Заголовок,1,2);
			Месяц = Сред(ТекЭлемент.Заголовок,4,2);
			Год = Сред(ТекЭлемент.Заголовок,7,4);
			
			ТекФорма.Объект.ДатаОплаты = Дата(Год, Месяц, День);
		КонецЕсли;
	КонецЕсли;
	ТекФорма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредпрятияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Предприятия = БюджетныйНаСервере.ПолучитьПредприятия();
	ФормаОтбора = ПолучитьФорму("Обработка.сабПлатежныйКалендарь.Форма.ФормаВыбораОтборов");
	Для каждого ТекСтрока Из Предприятия Цикл
		НоваяСтрока = ФормаОтбора.Таблица.Добавить();
		НоваяСтрока.Значение = ТекСтрока;
		Если НЕ ОтборПредприятия.НайтиПоЗначению(ТекСтрока) = Неопределено Тогда
			НоваяСтрока.Пометка = Истина;		
		КонецЕсли;	
	КонецЦикла;
	ФормаОтбора.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьОтборы(МассивСтруктурыОтборов)
	Если МассивСтруктурыОтборов.Количество() Тогда
		Если ТипЗнч(МассивСтруктурыОтборов[0].Значение) = Тип("СправочникСсылка.Предприятия") Тогда
			ОтборПредприятия.Очистить();
			Для каждого ТекСтрока Из МассивСтруктурыОтборов Цикл
				Если ТекСтрока.Пометка Тогда
					ОтборПредприятия.Добавить(ТекСтрока.Значение);
				КонецЕсли;
			КонецЦикла;
			ОтборОрганизации.Очистить();
			ДоступныеОрганизации = ДоступныеОрганизации(ОтборПредприятия.ВыгрузитьЗначения());
			Для каждого ТекОрг Из ДоступныеОрганизации Цикл
				ОтборОрганизации.Добавить(ТекОрг);	
			КонецЦикла;
		Иначе
			ОтборОрганизации.Очистить();
			Для каждого ТекСтрока Из МассивСтруктурыОтборов Цикл
				Если ТекСтрока.Пометка Тогда
					ОтборОрганизации.Добавить(ТекСтрока.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Обновить(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Организации = ДоступныеОрганизации(ОтборПредприятия.ВыгрузитьЗначения());
	ФормаОтбора = ПолучитьФорму("Обработка.сабПлатежныйКалендарь.Форма.ФормаВыбораОтборов");
	Для каждого ТекСтрока Из Организации Цикл
		НоваяСтрока = ФормаОтбора.Таблица.Добавить();
		НоваяСтрока.Значение = ТекСтрока;
		Если НЕ ОтборОрганизации.НайтиПоЗначению(ТекСтрока) = Неопределено Тогда
			НоваяСтрока.Пометка = Истина;		
		КонецЕсли;	
	КонецЦикла;
	ФормаОтбора.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ДнейПланированияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	//Объект.ГоризонтПланирования = НачалоДня(Объект.ГоризонтПланирования + (Направление*24*60*60 - 2*Направление));
	//Обновить(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОтборТочкиЗаявокПриИзменении(Элемент)
	Обновить(Неопределено);
	ДанныеПриАктивизацииЯчейки(Элемент);
	Элементы.РасшифровкаГрафика.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеПриИзменении(Элемент)
	Обновить(Неопределено);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеПоКдючуЗаписи(КлючЗаписи)
	Возврат Новый Структура("Источник, ДатаПлатежа, Документ, УИДСтрокиДокумента, ВидОперации", КлючЗаписи.Источник, КлючЗаписи.ДатаПлатежа, КлючЗаписи.Документ, КлючЗаписи.УИДСтрокиДокумента, КлючЗаписи.ВидОперации); 
	//МенеджерЗаписи = РегистрыСведений.сабГрафикПлатежей.СоздатьМенеджерЗаписи();
	//ЗаполнитьЗначенияСвойств(МенеджерЗаписи, КлючЗаписи);
	//МенеджерЗаписи.Записать();
КонецФункции

&НаКлиенте
Процедура ДанныеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	//ТекДанныеИсточник = Элементы.Расшифровка.ДанныеСтроки(ПараметрыПеретаскивания.Значение);
	Если Элемент.Имя = "ДанныеДерево" Тогда
		ТекДанныеПриемник = Элементы.ДанныеДерево.ДанныеСтроки(Строка);
	Иначе
		ТекДанныеПриемник = Элементы.Данные.ДанныеСтроки(Строка);
	КонецЕсли;
	
	Если (ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Число") ИЛИ ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("РегистрСведенийКлючЗаписи.сабГрафикПлатежей")) И НЕ ТекДанныеПриемник = Неопределено Тогда
		//Если ЗначениеЗаполнено(ТекДанныеПриемник.Источник) Тогда
			СтандартнаяОбработка = Ложь;
		//КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокиРасшифровки()
	
	Схема = Элементы.РасшифровкаГрафика.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	
	//Получаем настройки пользователя (отборы, сортировки и т.п.)
	Настройки = Элементы.РасшифровкаГрафика.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	НовоеПоле = Настройки.Структура[0].Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	НовоеПоле.Использование = Истина;    
	НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("УИДСтрокиДокумента");
	НовоеПоле.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	
	НовоеПоле = Настройки.Структура[0].Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	НовоеПоле.Использование = Истина;    
	НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("УИДСтрокиБюджета");
	НовоеПоле.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;

	
	НовоеПоле = Настройки.Структура[0].Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	НовоеПоле.Использование = Истина;    
	НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("Организация");
	НовоеПоле.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	
	НовоеПоле = Настройки.Структура[0].Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	НовоеПоле.Использование = Истина;    
	НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДопПризнак");
	НовоеПоле.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	
	НовоеПоле = Настройки.Структура[0].Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	НовоеПоле.Использование = Истина;    
	НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ИсточникПолучатель");
	НовоеПоле.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	
	НовоеПоле = Настройки.Структура[0].Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	НовоеПоле.Использование = Истина;    
	НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ОснованиеПометкаУдаления");
	НовоеПоле.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	
	НовоеПоле = Настройки.Структура[0].Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	НовоеПоле.Использование = Истина;    
	НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("Сценарий");
	НовоеПоле.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	
	//НовоеПоле = Настройки.Структура[0].Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	//НовоеПоле.Использование = Истина;    
	//НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ПодразделениеЦФО");
	//НовоеПоле.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	
	Выбор = Настройки.Структура[0].Выбор;
	Для Каждого поле из выбор.ДоступныеПоляВыбора.Элементы Цикл
		Если поле.Заголовок = "Системные поля" ИЛИ поле.Заголовок = "Параметры" Тогда
			Продолжить;
		КонецЕсли;
		поле1 = Неопределено;
		фл = Ложь;
		Для Каждого поле1 из выбор.Элементы Цикл
			Если поле1.поле = поле.поле Тогда
				фл = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не фл Тогда
			поле1 = выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(поле1, поле);
			поле1.Заголовок = "";
		КонецЕсли;
	КонецЦикла;

	//Выводим динамический список в таблицу значений
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , ,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	//Возвращаем полученную таблицу значений
	МассивКлючей = Новый Массив;
	Для Каждого Выборка Из Результат Цикл
		СтрОтбор = Новый Структура;
		Для каждого ТекКолонка Из Результат.Колонки Цикл
			СтрОтбор.Вставить(ТекКолонка.Имя, Выборка[ТекКолонка.Имя]);
		КонецЦикла;
		
		ФОпоЦФО = СтрОтбор.Свойство("ПодразделениеЦФО");

		НовыйКлючЗаписи = РегистрыСведений.сабГрафикПлатежей.СоздатьКлючЗаписи(СтрОтбор);
		МассивКлючей.Добавить(НовыйКлючЗаписи);
		
		Если Не ФОпоЦФО  Тогда
			СтрОтбор.Вставить("ПодразделениеЦФО", Выборка.ЦФО.ВидДеятельности);
			НовыйКлючЗаписи = РегистрыСведений.сабГрафикПлатежей.СоздатьКлючЗаписи(СтрОтбор);
			МассивКлючей.Добавить(НовыйКлючЗаписи);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивКлючей;

КонецФункции // ()


&НаКлиенте
Процедура ДанныеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если Элемент.Имя = "ДанныеДерево" Тогда
		ТекДанныеПриемник = Элементы.ДанныеДерево.ДанныеСтроки(Строка);
	Иначе
		ТекДанныеПриемник = Элементы.Данные.ДанныеСтроки(Строка);
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("РегистрСведенийКлючЗаписи.сабГрафикПлатежей") Тогда
		МассивСтрок = ПараметрыПеретаскивания.Значение;
		ЭтоВерхняяТЧ = Ложь;
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Число") Тогда
		МассивСтрок = ПолучитьСтрокиРасшифровки();
		ЭтоВерхняяТЧ = Истина;
	КонецЕсли;
	
	Если СтрНайти(Поле.Имя, Элемент.Имя + "День") ИЛИ СтрНайти(Поле.Имя, Элемент.Имя + "БудущиеПлатежи") Тогда
		
		ДанныеСтрокиРегистра = ПолучитьДанныеПоКдючуЗаписи(МассивСтрок[0]); 
		
		ЕстьИсточникПриемник = ЗначениеЗаполнено(ТекДанныеПриемник.Источник);
		
		Если ДанныеСтрокиРегистра.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ") Тогда
			Сообщить("Невозможно перемещать строки ВНХ поступлений.");
			Возврат;		
		КонецЕсли;
		
		Если ЕстьИсточникПриемник И НЕ ДанныеСтрокиРегистра.Источник = Неопределено И НЕ ТипЗнч(ДанныеСтрокиРегистра.Источник) = ТипЗнч(ТекДанныеПриемник.Источник) Тогда
			Сообщить("Невозможно перемещать между типами источников нал/безнал.");
			Возврат;		
		КонецЕсли;
		
		Если ЕстьИсточникПриемник И ТипЗнч(ДанныеСтрокиРегистра.Документ) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") И НЕ ДанныеСтрокиРегистра.Источник = ТекДанныеПриемник.Источник Тогда
			ИзменитьИсточникОплатыВЗаявке(ДанныеСтрокиРегистра.Документ, ДанныеСтрокиРегистра.УИДСтрокиДокумента, ТекДанныеПриемник.Источник);
		КонецЕсли;
		
		Если Поле.Заголовок = "Текущие" Тогда
			Если ЭтоВерхняяТЧ Тогда
				ПеренестиЗаявкуНаКлиенте(ТекущаяДата(),, ?(ЕстьИсточникПриемник, ТекДанныеПриемник.Источник, Неопределено), МассивСтрок, Поле);
			Иначе
				ПеренестиЗаявкуНаКлиенте(ТекущаяДата(),, ТекДанныеПриемник.Источник);
			КонецЕсли;
		ИначеЕсли СтрНайти(Поле.Имя, Элемент.Имя + "БудущиеПлатежи") Тогда
			Если ЭтоВерхняяТЧ Тогда
				ПеренестиЗаявкуНаКлиенте(ТекущаяДата() + 24*60*60,, ?(ЕстьИсточникПриемник, ТекДанныеПриемник.Источник, Неопределено), МассивСтрок, Поле);	
			Иначе	
				ПеренестиЗаявкуНаКлиенте(ТекущаяДата() + 24*60*60,, ТекДанныеПриемник.Источник);	
			КонецЕсли;
		Иначе
			День = Сред(Поле.Заголовок,1,2);
			Месяц = Сред(Поле.Заголовок,4,2);
			Год = Сред(Поле.Заголовок,7,4);
			Если ЭтоВерхняяТЧ Тогда
				ПеренестиЗаявкуНаКлиенте(Дата(Год, Месяц, День),, ?(ЕстьИсточникПриемник, ТекДанныеПриемник.Источник, Неопределено), МассивСтрок, Поле);
			Иначе	
				ПеренестиЗаявкуНаКлиенте(Дата(Год, Месяц, День),, ТекДанныеПриемник.Источник);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьИсточникОплатыВЗаявке(Заявка, УИДСтроки, НовыйИсточник)
	ТекОб = Заявка.ПолучитьОбъект();
	НАйденныеСтроки = ТекОб.ЗаявкаБезнал.НайтиСтроки(Новый Структура("УИДСтроки", УИДСтроки));
	Для каждого ТекСтрока Из НАйденныеСтроки Цикл
		Если ТипЗнч(НовыйИсточник) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			ТекСтрока.Организация = НовыйИсточник.Владелец;		
		КонецЕсли;	
		ТекСтрока.Источник = НовыйИсточник;
		ТекСтрока.БанковскийСчет = НовыйИсточник;
	КонецЦикла;
	Если ЗначениеЗаполнено(Заявка.Источник) Тогда
		ТекОб.Организация = НовыйИсточник.Владелец;
		ТекОб.Источник = НовыйИсточник;	
	КонецЕсли;
	ТекОб.ДополнительныеСвойства.Вставить("Модифицирован", Ложь);
	ТекОб.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ГрафикПлатежей(Команда)
	ОткрытьФорму("Обработка.сабПлатежныйКалендарь.Форма.ФормаСпискаГрафикПлатежей");
КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда)
	ОткрытьФорму("Обработка.сабПлатежныйКалендарь.Форма.ФормаНастроек", Новый Структура("ОстаткиПоПлатежке, ОстаткиНаНачало, УчитыватьВыходные", Объект.ОстаткиПоПлатежке, Объект.ОстаткиНаНачало, Объект.УчитыватьВыходные));
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиПоПлатежкеПриИзменении(Элемент)
	Обновить(Неопределено);
	Элементы.РасшифровкаГрафика.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРеестрОплат(Команда)
	МассивДоков = ПолучитьМассивЗаявокПоОтборам();	
	ОткрытьФорму("Документ.Д_ЗаявкаНаОплату.ФормаОбъекта", Новый Структура("Основание", Новый Структура("ДатаГрафика, ВидОплаты, РежимРаботы, ПоказыватьГрафикПоБюджету, МассивДоков, ДанныеТЗ", ТекущаяДата(), ПредопределенноеЗначение("Перечисление.Д_ИсточникиСредств.БезНал"), Объект.РежимРаботы, Объект.ПоказыватьГрафикПоБюджету, МассивДоков, ПолучитьСтруктуруДанныхТЗ())));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРеестрОплатНал(Команда)
	МассивДоков = ПолучитьМассивЗаявокПоОтборам();	
	ОткрытьФорму("Документ.Д_ЗаявкаНаОплату.ФормаОбъекта", Новый Структура("Основание", Новый Структура("ДатаГрафика, ВидОплаты, РежимРаботы, ПоказыватьГрафикПоБюджету, МассивДоков, ДанныеТЗ", ТекущаяДата(), ПредопределенноеЗначение("Перечисление.Д_ИсточникиСредств.Нал"), Объект.РежимРаботы, Объект.ПоказыватьГрафикПоБюджету, МассивДоков, ПолучитьСтруктуруДанныхТЗ())));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРеестрОплатВзаимозачет(Команда)
	МассивДоков = ПолучитьМассивЗаявокПоОтборам();	
	ОткрытьФорму("Документ.Д_ЗаявкаНаОплату.ФормаОбъекта", Новый Структура("Основание", Новый Структура("ДатаГрафика, ВидОплаты, РежимРаботы, ПоказыватьГрафикПоБюджету, МассивДоков, ДанныеТЗ", ТекущаяДата(), ПредопределенноеЗначение("Перечисление.ВидыОперацийДвиженияДС.Взаимозачет"), Объект.РежимРаботы, Объект.ПоказыватьГрафикПоБюджету, МассивДоков, ПолучитьСтруктуруДанныхТЗ())));
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоОплатам(Команда)
	ТекФорма = ПолучитьФорму("Отчет.Д_ОтчетПоЗаявкам.Форма.ФормаОтчета");
	ТекФорма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Значение.Вариант = ВариантСтандартногоПериода.Сегодня;
	ТекФорма.Сформировать(Неопределено);
	ТекФорма.Открыть();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДерево()
	
	//Очистка сумм
	Для каждого ТекСтрока Из Данные Цикл
		Если ТекСтрока.СтатьяДДС = "Остаток на начало итого" Тогда
			ТекЭлемент = ЕстьЭлемент(ДанныеДерево.ПолучитьЭлементы(), Неопределено, "Остаток на начало итого");
			Если ТекЭлемент = Неопределено Тогда
				Раздел1 = ДанныеДерево.ПолучитьЭлементы().Добавить();
			Иначе
				Раздел1 = ТекЭлемент;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(Раздел1, ТекСтрока);
			Раздел1.Значение = Раздел1.СтатьяДДС;
		КонецЕсли;
		
		Если ТекСтрока.СтатьяДДС = "Остаток на начало" ИЛИ ТекСтрока.СтатьяДДС = "Остаток на конец" Тогда
			ТекЭлемент = ЕстьЭлемент(Раздел1.ПолучитьЭлементы(), Неопределено, ТекСтрока.Предприятие);
			Если ТекЭлемент = Неопределено Тогда
				Раздел2 = Раздел1.ПолучитьЭлементы().Добавить();
			Иначе
				Раздел2 = ТекЭлемент;
			КонецЕсли;
			//ЗаполнитьЗначенияСвойств(Раздел2, ТекСтрока);
			Раздел2.СтатьяДДС = "Остаток на конец (предприятие)";
			Раздел2.Предприятие = ТекСтрока.Предприятие;
			Раздел2.Источник = Неопределено;
			Раздел2.Значение = ТекСтрока.Предприятие;
			Если ТекСтрока.СтатьяДДС = "Остаток на конец" Тогда
				Для т = 0 По 365 Цикл
					Раздел2["День" + Строка(т)] = 0;
				КонецЦикла;
				Раздел2["ОстатокНаНачало"] = 0;
				Раздел2["ОстатокНаНачалоРабочий"] = 0;
				Раздел2["ПлатежиПоРеестрам"] = 0;
				Раздел2["ОстатокНаКонец"] = 0;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;	
	
	Для каждого ТекСтрока Из Данные Цикл
		Если ТекСтрока.СтатьяДДС = "Остаток на начало итого" Тогда
			ТекЭлемент = ЕстьЭлемент(ДанныеДерево.ПолучитьЭлементы(), Неопределено, "Остаток на начало итого");
			Если ТекЭлемент = Неопределено Тогда
				Раздел1 = ДанныеДерево.ПолучитьЭлементы().Добавить();
			Иначе
				Раздел1 = ТекЭлемент;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(Раздел1, ТекСтрока);
			Раздел1.Значение = ?(Объект.РежимРаботы = "Календарь", Раздел1.СтатьяДДС, "Итого");
			Раздел1.НомерКартинки = 33;
		КонецЕсли;
		
		Если ТекСтрока.СтатьяДДС = "Остаток на начало" ИЛИ ТекСтрока.СтатьяДДС = "Остаток на конец" Тогда
			ТекЭлемент = ЕстьЭлемент(Раздел1.ПолучитьЭлементы(), Неопределено, ТекСтрока.Предприятие);
			Если ТекЭлемент = Неопределено Тогда
				Раздел2 = Раздел1.ПолучитьЭлементы().Добавить();
			Иначе
				Раздел2 = ТекЭлемент;
			КонецЕсли;
			//ЗаполнитьЗначенияСвойств(Раздел2, ТекСтрока);
			Раздел2.СтатьяДДС = "Остаток на конец (предприятие)";
			Раздел2.Предприятие = ТекСтрока.Предприятие;
			Раздел2.Источник = Неопределено;
			Раздел2.Значение = ТекСтрока.Предприятие;
			Если ТекСтрока.СтатьяДДС = "Остаток на конец" Тогда
				Для т = 0 По 365 Цикл
					Раздел2["День" + Строка(т)] = Раздел2["День" + Строка(т)] + ТекСтрока["День" + Строка(т)];
				КонецЦикла;
				Раздел2["ОстатокНаНачало"] = Раздел2["ОстатокНаНачало"] + ТекСтрока["ОстатокНаНачало"];
				Раздел2["ОстатокНаНачалоРабочий"] = Раздел2["ОстатокНаНачалоРабочий"] + ТекСтрока["ОстатокНаНачалоРабочий"];
				Раздел2["ПлатежиПоРеестрам"] = Раздел2["ПлатежиПоРеестрам"] + ТекСтрока["ПлатежиПоРеестрам"];
				Раздел2["ОстатокНаКонец"] = Раздел2["ОстатокНаКонец"] + ТекСтрока["ОстатокНаКонец"];
			КонецЕсли; 
		КонецЕсли;
		
		Если ТекСтрока.СтатьяДДС = "Остаток на начало" ИЛИ ТекСтрока.СтатьяДДС = "Остаток на конец" Тогда
			ТекЭлемент = ЕстьЭлемент(Раздел2.ПолучитьЭлементы(), ТекСтрока.Источник, ТекСтрока.Предприятие);
			Если ТекЭлемент = Неопределено Тогда
				Раздел3 = Раздел2.ПолучитьЭлементы().Добавить();
			Иначе
				Раздел3 = ТекЭлемент;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(Раздел3, ТекСтрока);
			Раздел3.СтатьяДДС = "Остаток на конец";
			Раздел3.Значение = ТекСтрока.Источник;
			Раздел3.НомерКартинки = 3;
			Раздел3.Просрочено = 0;
			Если ТекСтрока.СтатьяДДС = "Остаток на начало" И Объект.ОстаткиНаНачало Тогда
				ТекЭлемент = ЕстьЭлемент(Раздел3.ПолучитьЭлементы(), ТекСтрока.Источник, ТекСтрока.СтатьяДДС);
				Если ТекЭлемент = Неопределено Тогда
					Раздел4 = Раздел3.ПолучитьЭлементы().Вставить(0);
				Иначе
					Раздел4 = ТекЭлемент;
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(Раздел4, ТекСтрока);
				Раздел4.Значение = "Остаток на начало";
				//Раздел4.СтатьяДДС = "Остаток на начало";
				Раздел4.НомерКартинки = 28;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(ТекСтрока.СтатьяДДС) = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств") ИЛИ ТекСтрока.СтатьяДДС = "Поступление"  ИЛИ ТекСтрока.СтатьяДДС = "Оплата" Тогда
			
			Если Раздел3 = Неопределено Тогда //нет счета на остатках
				ТекЭлемент = ЕстьЭлемент(Раздел2.ПолучитьЭлементы(), ТекСтрока.Источник, ТекСтрока.Предприятие);
				Если ТекЭлемент = Неопределено Тогда
					Раздел3 = Раздел2.ПолучитьЭлементы().Добавить();
				Иначе
					Раздел3 = ТекЭлемент;
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(Раздел3, ТекСтрока);
				Раздел3.СтатьяДДС = "Остаток на конец";
				Раздел3.Значение = ТекСтрока.Источник;
				Раздел3.НомерКартинки = 3;
				Раздел3.Просрочено = 0;
				Если Объект.ОстаткиНаНачало Тогда
					ТекЭлемент = ЕстьЭлемент(Раздел3.ПолучитьЭлементы(), ТекСтрока.Источник, ТекСтрока.СтатьяДДС);
					Если ТекЭлемент = Неопределено Тогда
						Раздел4 = Раздел3.ПолучитьЭлементы().Вставить(0);
					Иначе
						Раздел4 = ТекЭлемент;
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(Раздел4, ТекСтрока);
					Раздел4.Значение = "Остаток на начало";
					//Раздел4.СтатьяДДС = "Остаток на начало";
					Раздел4.НомерКартинки = 28;
				КонецЕсли;
			КонецЕсли;

			
			//Если Объект.СворачиватьСтатьиДДС Тогда
			//	ТекСтрока.СтатьяДДС = ?(Раздел4.НомерКартинки = 28, "Поступление", "Оплата");	
			//КонецЕсли;
			ТекЭлемент = ЕстьЭлемент(Раздел3.ПолучитьЭлементы(), ТекСтрока.Источник, ТекСтрока.СтатьяДДС);
			Если ТекЭлемент = Неопределено Тогда
				Раздел4 = Раздел3.ПолучитьЭлементы().Добавить();
			Иначе
				Раздел4 = ТекЭлемент;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(Раздел4, ТекСтрока,, "ДатаПоследнегоДокумента");
			Раздел4.Значение = ТекСтрока.СтатьяДДС;
		КонецЕсли;
		
		Если ТекСтрока.СтатьяДДС = "Денежный поток итого" ИЛИ ТекСтрока.СтатьяДДС = "Остаток на конец итого" Тогда
			ТекЭлемент = ЕстьЭлемент(ДанныеДерево.ПолучитьЭлементы(), Неопределено, ТекСтрока.СтатьяДДС);
			Если ТекЭлемент = Неопределено Тогда
				Раздел5 = ДанныеДерево.ПолучитьЭлементы().Добавить();
			Иначе
				Раздел5 = ТекЭлемент;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(Раздел5, ТекСтрока);
			Раздел5.Предприятие = Неопределено;
			Раздел5.Источник = Неопределено;
			Раздел5.ЦФО = Неопределено;
			Раздел5.Просрочено = 0;
			Раздел5.Значение = Раздел5.СтатьяДДС;
			Раздел5.НомерКартинки = 33;
		КонецЕсли;
		
	КонецЦикла;
	
	//алгоритм удаления лишних строк дерева
	МассивУдаленных00 = Новый Массив;
	ПервыйУровень = ДанныеДерево.ПолучитьЭлементы();
	Для каждого ТекЭл1Ур Из ПервыйУровень Цикл
		ВторойУровень = ТекЭл1Ур.ПолучитьЭлементы();
		МассивУдаленных0 = новый Массив;
		Для каждого ТекЭл2Ур Из ВторойУровень Цикл
			ТретийУровень = ТекЭл2Ур.ПолучитьЭлементы();
			МассивУдаленных = новый Массив;
			Для каждого ТекЭл3Ур Из ТретийУровень Цикл
				ЧетвертыйУровень = ТекЭл3Ур.ПолучитьЭлементы();
				МассивУдаленных2 = новый Массив;
				Для каждого ТекЭл4Ур Из ЧетвертыйУровень Цикл
					ОтобранныеСтроки = Данные.НайтиСтроки(Новый Структура("Источник, Предприятие, СтатьяДДС", ТекЭл4Ур.Источник, ТекЭл4Ур.Предприятие, ТекЭл4Ур.СтатьяДДС));
					Если НЕ ОтобранныеСтроки.Количество() ИЛИ (НЕ Объект.ОстаткиНаНачало И ТекЭл4Ур.СтатьяДДС = "Остаток на начало") Тогда
						МассивУдаленных2.Добавить(ТекЭл4Ур);			
					КонецЕсли;
				КонецЦикла; 
				//удаляем лишние
				Для каждого ТекУд Из МассивУдаленных2 Цикл
					ЧетвертыйУровень.Удалить(ТекУд);
				КонецЦикла;
				
				ОтобранныеСтроки = Данные.НайтиСтроки(Новый Структура("Источник, Предприятие", ТекЭл3Ур.Источник, ТекЭл3Ур.Предприятие));
				Если НЕ ОтобранныеСтроки.Количество() Тогда
					МассивУдаленных.Добавить(ТекЭл3Ур);			
				КонецЕсли;
				
			КонецЦикла;
			//удаляем лишние
			Для каждого ТекУд Из МассивУдаленных Цикл
				ТретийУровень.Удалить(ТекУд);
			КонецЦикла;
			
			ОтобранныеСтроки = Данные.НайтиСтроки(Новый Структура("Предприятие", ТекЭл2Ур.Предприятие));
			Если НЕ ОтобранныеСтроки.Количество() Тогда
				МассивУдаленных0.Добавить(ТекЭл2Ур);			
			КонецЕсли;
			
		КонецЦикла;
		
		//удаляем лишние
		Для каждого ТекУд Из МассивУдаленных0 Цикл
			ВторойУровень.Удалить(ТекУд);
		КонецЦикла;
		
		Если Не Объект.РежимРаботы = "Календарь" Тогда
			Если ТекЭл1Ур.Значение = "Денежный поток итого" ИЛИ ТекЭл1Ур.Значение = "Остаток на конец итого" Тогда
				МассивУдаленных00.Добавить(ТекЭл1Ур);
			КонецЕсли; 
		КонецЕсли;
		
	КонецЦикла;
		
	//удаляем лишние
	Для каждого ТекУд Из МассивУдаленных00 Цикл
		ПервыйУровень.Удалить(ТекУд);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЕстьЭлемент(КоллекцияЭлементов, НаименованиеПункта, НаименованиеПункта2)
	Для каждого ТекЭлемент Из КоллекцияЭлементов Цикл
		Если ТекЭлемент.Источник = НаименованиеПункта И (ТекЭлемент.СтатьяДДС = НаименованиеПункта2 ИЛИ ТекЭлемент.Предприятие = НаименованиеПункта2)  Тогда
			Возврат ТекЭлемент;	
		КонецЕсли;	
	КонецЦикла; 
	Возврат Неопределено;	

КонецФункции // ()

&НаКлиенте
Процедура РасходВНХЗаявка(Команда)
	Если Элементы.Данные.Видимость Тогда
		ЭлементыДанные = Элементы.Данные;
		ТекЭлемент = Элементы.Данные.ТекущийЭлемент;
		ТекДанные = Элементы.Данные.ТекущиеДанные;
		ТекВыделенныеСтроки = Элементы.Данные.ВыделенныеСтроки;
		ДанныеИмя = "Данные";
	Иначе
		ЭлементыДанные = Элементы.ДанныеДерево;
		ТекЭлемент = Элементы.ДанныеДерево.ТекущийЭлемент;
		ТекДанные = Элементы.ДанныеДерево.ТекущиеДанные;
		ТекВыделенныеСтроки = Элементы.ДанныеДерево.ВыделенныеСтроки;
		ДанныеИмя = "ДанныеДерево";
	КонецЕсли;

	
	Если ТекВыделенныеСтроки.Количество() > 1 Тогда //выделено более 1 источника, делаем хитрое пополнение
		СуммаПрофицит = 0;
		СуммаДефицит = 0;
		ТекСтрокаПрофицит = Неопределено;
		ТекСтрокаДефицит = Неопределено;
		Для каждого ТекСтрока Из ТекВыделенныеСтроки Цикл
			ТекДанныеСтроки = ЭлементыДанные.ДанныеСтроки(ТекСтрока);
			ИмяПоля = СтрЗаменить(ЭлементыДанные.ТекущийЭлемент.Имя, ДанныеИмя, "");
			Если Не СтрНайти(ИмяПоля, "День") Тогда
				ИмяПоля = "День0";			
			КонецЕсли;
			Если ТекДанныеСтроки[ИмяПоля] > СуммаПрофицит И НЕ СуммаПрофицит Тогда
				СуммаПрофицит = ТекДанныеСтроки[ИмяПоля];
				ТекСтрокаПрофицит = ТекДанныеСтроки;
			Иначе
				СуммаДефицит = ТекДанныеСтроки[ИмяПоля];
				ТекСтрокаДефицит = ТекДанныеСтроки;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	Если ТекСтрокаПрофицит = Неопределено Тогда
		ТекДанные = ТекДанные;
	Иначе	
		ТекДанные = ТекСтрокаПрофицит;		
	КонецЕсли;
	Если Не ТекДанные = Неопределено Тогда
		ТекФорма = ПолучитьФорму("Документ.Д_ЗаявкаНаФинансирование.ФормаОбъекта");
		Если ТипЗнч(ТекДанные.Источник) = Тип("СправочникСсылка.Кассы") Тогда
			РеквизитыИсточника = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.Источник, "Предприятие, Предприятие.ВидДеятельности, Предприятие.УчетнаяПолитика.СтатьяВНХОплата");
			ТекФорма.Объект.ТипИсточника = ПредопределенноеЗначение("Перечисление.Д_ИсточникиСредств.Нал");
		Иначе
			РеквизитыИсточника = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.Источник, "Предприятие, Предприятие.ВидДеятельности, Владелец, Предприятие.УчетнаяПолитика.СтатьяВНХОплата");
			ТекФорма.Объект.Организация = РеквизитыИсточника.Владелец;
			ТекФорма.Объект.БанковскийСчет = ТекДанные.Источник;
		КонецЕсли;
		ТекФорма.Объект.Предприятие = РеквизитыИсточника.Предприятие;
		ТекФорма.Объект.Подразделение = РеквизитыИсточника.ПредприятиеВидДеятельности;
		ТекФорма.Объект.Источник = ТекДанные.Источник;
		//ТекФорма.Объект.ЦФО = РеквизитыИсточника.Предприятие;
		ТекФорма.Объект.Комментарий = "перемещение м/ду источниками";
		
		//НоваяСтрока = ТекФорма.Объект.ЗаявкаБезнал.Добавить();
		ТекФорма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ОплатаВНХ");
		ТекФорма.Объект.СтатьяДДС = РеквизитыИсточника.ПредприятиеУчетнаяПолитикаСтатьяВНХОплата;
		Если НЕ ТекСтрокаДефицит = Неопределено Тогда
			Если ТипЗнч(ТекСтрокаДефицит.Источник) = Тип("СправочникСсылка.Кассы") Тогда
				РеквизитыИсточникаДефицит = БюджетныйНаСервере.ВернутьРеквизиты(ТекСтрокаДефицит.Источник, "Предприятие, Предприятие.ВидДеятельности");
			Иначе	
				РеквизитыИсточникаДефицит = БюджетныйНаСервере.ВернутьРеквизиты(ТекСтрокаДефицит.Источник, "Предприятие, Предприятие.ВидДеятельности, Владелец");
				ТекФорма.Объект.Контрагент = РеквизитыИсточникаДефицит.Владелец;
			КонецЕсли;
			ТекФорма.Объект.СчетКонтрагента = ТекСтрокаДефицит.Источник;
			ТекФорма.Объект.Сумма = ?(СуммаДефицит < 0, -СуммаДефицит, СуммаДефицит);
		Иначе	
			ТекФорма.Объект.Контрагент = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
			ТекФорма.Объект.СчетКонтрагента = ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");
		КонецЕсли;
		
		Если СтрНайти(ТекЭлемент.Имя, ДанныеИмя + "День") Тогда
			День = Сред(ТекЭлемент.Заголовок,1,2);
			Месяц = Сред(ТекЭлемент.Заголовок,4,2);
			Год = Сред(ТекЭлемент.Заголовок,7,4);
			
			ТекФорма.Объект.ДатаОплаты = Дата(Год, Месяц, День);
		КонецЕсли;
	КонецЕсли;
	БюджетныйНаКлиенте.СформироватьНазначениеПлатежа(ТекФорма.Объект, ТекФорма.Объект.НазначениеПлатежа, Ложь,,Новый Структура("СуммаДокумента", "Сумма"));
	ТекФорма.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура СворачиватьСтатьиДДСПриИзменении(Элемент)
	Обновить(Неопределено);
	ДанныеПриАктивизацииЯчейки(Элемент);
	Элементы.РасшифровкаГрафика.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура РежимРаботыПриИзменении(Элемент)
	//Элементы.ДанныеДеревоПросрочено.Заголовок = ?(Объект.РежимРаботы = "Календарь", "Просрочено", "Платежи");
	Элементы.ДанныеДеревоДень0.Заголовок = ?(Объект.РежимРаботы = "Календарь", "День0", "Текущие");
	Если НЕ Элемент = Неопределено Тогда
		Обновить(Элемент);
	КонецЕсли;
	
	Элементы.ДанныеДерево.Подвал = НЕ Объект.РежимРаботы = "Календарь";
	
КонецПроцедуры

&НаКлиенте
Процедура стр_ВариантГруппировкиПриИзменении(Элемент)
	ДанныеДерево.ПолучитьЭлементы().Очистить();
	Обновить(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОтборНастройкиОтборПриИзменении(Элемент)
	ОбновитьНаСервере();
КонецПроцедуры

Процедура УстановитьЗначениеПараметраНастроек(Настройки, ИмяПараметра, Значение)
	
	Параметр = Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
	
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = Значение;
		Параметр.Использование = Истина;
	Иначе
	//	Параметр = Настройки.ПараметрыДанных.Элементы.Добавить();
	//	Параметр.Значение = Значение;
	//	Параметр.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда, ТекСтрока = Неопределено, Уровень = 0)
	
	Если ТекСтрока = Неопределено Тогда
		КоллекцияЭлементовДерева = ДанныеДерево.ПолучитьЭлементы();
	Иначе
		КоллекцияЭлементовДерева = ТекСтрока;	
	КонецЕсли;
	Для Каждого Строка Из КоллекцияЭлементовДерева Цикл
		ЭлементыСтроки = Строка.ПолучитьЭлементы();
		Если ЭлементыСтроки.Количество() Тогда
			Уровень = Уровень + 1;
			Если Уровень < 3 Тогда
				СвернутьВсе(Команда, ЭлементыСтроки, Уровень);
			КонецЕсли;
		КонецЕсли;
		Если Уровень > 2 Тогда
			ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
			Если Элементы.ДанныеДерево.Развернут(ИдентификаторСтроки) Тогда
				Элементы.ДанныеДерево.Свернуть(ИдентификаторСтроки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если Уровень > 2 Тогда
		Уровень = 1;
	КонецЕсли;
	ДеревоРазвернуто = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда, ТекСтрока = Неопределено)
	
	Если ТекСтрока = Неопределено Тогда
		КоллекцияЭлементовДерева = ДанныеДерево.ПолучитьЭлементы();
	Иначе
		КоллекцияЭлементовДерева = ТекСтрока;	
	КонецЕсли;
	Для Каждого Строка Из КоллекцияЭлементовДерева Цикл
		ЭлементыСтроки = Строка.ПолучитьЭлементы();
		Если ЭлементыСтроки.Количество() Тогда
			РазвернутьВсе(Команда, ЭлементыСтроки);
		КонецЕсли;
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		Если НЕ Элементы.ДанныеДерево.Развернут(ИдентификаторСтроки) Тогда
			Элементы.ДанныеДерево.Развернуть(ИдентификаторСтроки);
		КонецЕсли;
	КонецЦикла;
	ДеревоРазвернуто = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПечатьНаСервере(ДокументРезультат, ДанныеРасшифровки, ИмяКомандыПечати)
	
	СтруктураЗаполненияПК = ВернутьТаблицуНачальногоЗаполненияПК("Источники", "Календарь", Истина);
	
	РезультатВыборка = СтруктураЗаполненияПК.ТаблицаНачальногоЗаполнения;
	Индекс = СтруктураЗаполненияПК.ТекущийИндекс; 
	ДнейПланирования = СтруктураЗаполненияПК.КоличествоДнейПланирования;
	
	ЗаполнитьТаблицуДанныхПКНаФорме(ДанныеПоИсточникам, РезультатВыборка, Индекс, ДнейПланирования, "Источники", "Календарь", Истина);
	
	ДокументРезультат.Очистить(); //очищаем результат
	
	Если ИмяКомандыПечати = "ПечатьОбщий" Тогда	
		ДанныеТЧ = ДанныеПоИсточникам.Выгрузить();
		КорректировкаОстатковПоНеоплаченнымЗаявкам = Истина;
	Иначе
		ДанныеТЧ = Данные.Выгрузить();
		КорректировкаОстатковПоНеоплаченнымЗаявкам = Объект.КорректировкаОстатковПоНеоплаченнымЗаявкам;
	КонецЕсли;
	
	МассивКУдалению = Новый Массив;
	СтатьяСдо = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Сальдо на начало периода", Истина);
	
	Для каждого ТекСтрока Из ДанныеТЧ Цикл
		ТекСтрока.ОстатокНаНачало = ?(КорректировкаОстатковПоНеоплаченнымЗаявкам, ТекСтрока.ОстатокНаНачалоРабочий, ТекСтрока.ОстатокНаНачало);
		
		Если ТекСтрока.СтатьяДДС = "Остаток на конец" Тогда
			ТекСтрока.ОстатокНаНачало = 0;
			ТекСтрока.ОстатокНаНачалоРабочий = 0;
			ТекСтрока.День0 = 0;
			ТекСтрока.Просрочено = 0;
			ТекСтрока.СтатьяДДС = СтатьяСдо;
		КонецЕсли;   
		
		Если Не ИмяКомандыПечати = "ПечатьОбщий" Или ТипЗнч(ТекСтрока.Источник) = Тип("СправочникСсылка.Кассы") Тогда
			
			Если ТекСтрока.СтатьяДДС = "Остаток на начало" Тогда
				ТекСтрока.ОстатокНаКонец = 0;
				ТекСтрока.День0 = 0;
				ТекСтрока.Просрочено = 0;
				ТекСтрока.СтатьяДДС = СтатьяСдо;
			КонецЕсли;	
			
		КонецЕсли;
		
		Если ТекСтрока.СтатьяДДС = "Остаток на начало итого" Тогда
			МассивКУдалению.Добавить(ТекСтрока);
		КонецЕсли;
		
		Если ТекСтрока.СтатьяДДС = "Остаток на конец итого" Тогда
			МассивКУдалению.Добавить(ТекСтрока);
		КонецЕсли;
		
		Если ТекСтрока.СтатьяДДС = "Денежный поток итого" Тогда
			МассивКУдалению.Добавить(ТекСтрока);
		КонецЕсли;
		
		Если ТипЗнч(ТекСтрока.СтатьяДДС) = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств") И НЕ СтатьяСдо = ТекСтрока.СтатьяДДС Тогда
			ПустаяСтрока = Истина;
			
			Если ТекСтрока.ПлатежиПоРеестрам > 0 Тогда
				ПустаяСтрока = Ложь;
			КонецЕсли;
			
			Если ПустаяСтрока Тогда
				
				Для т = 0 По 365 Цикл
					
					Если ТекСтрока["День" + Строка(т)] Тогда
						ПустаяСтрока = Ложь;					
					КонецЕсли;
					
				КонецЦикла; 
				
			КонецЕсли;
			
			Если ПустаяСтрока Тогда
				МассивКУдалению.Добавить(ТекСтрока);				
			КонецЕсли;    
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Для каждого ТекСтрока Из МассивКУдалению Цикл
		ДанныеТЧ.Удалить(ТекСтрока);	
	КонецЦикла; 
	
	Попытка
		ЭтотОбъект2 = ВнешниеОбработки.Создать("сабПлатежныйКалендарь");	
	Исключение
		ЭтотОбъект2 = Обработки.сабПлатежныйКалендарь;
	КонецПопытки;
	
	Если ИмяКомандыПечати = "ПечатьОбщий" Тогда	
		СхемаКомпоновкиДанных = ЭтотОбъект2.ПолучитьМакет("МакетСКДПечать2");
	Иначе
		СхемаКомпоновкиДанных = ЭтотОбъект2.ПолучитьМакет("МакетСКД");
	КонецЕсли;
	
	//настройки СКД
	НастройкиСКД = Новый КомпоновщикНастроекКомпоновкиДанных;
	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	НастройкиСКД.Инициализировать(ИсточникНастроек);
	
	Если ИмяКомандыПечати = "ПечатьОбщий" Тогда
		НастройкиСКД.ЗагрузитьНастройки(СхемаКомпоновкиДанных.ВариантыНастроек.Общий.Настройки); 
	Иначе
		НастройкиСКД.ЗагрузитьНастройки(СхемаКомпоновкиДанных.ВариантыНастроек.Основной.Настройки); 
	КонецЕсли;
	  
	//НастройкиСКД.ЗагрузитьНастройки(СхемаКомпоновкиДанных.ВариантыНастроек.Общий.Настройки);
	НастройкиСКД.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	УстановитьЗначениеПараметраНастроек(НастройкиСКД.Настройки, "ТочкиНаСогласовании", ОтборТочкиСогласования.ВыгрузитьЗначения());
	УстановитьЗначениеПараметраНастроек(НастройкиСКД.Настройки, "ТочкиКОплате", ОтборТочкиОплаты.ВыгрузитьЗначения());
	УстановитьЗначениеПараметраНастроек(НастройкиСКД.Настройки, "ОтборТочкиЗаявок", ОтборТочкиЗаявок); 
	
	Если ИмяКомандыПечати = "ПечатьОбщий" Тогда
		УстановитьЗначениеПараметраНастроек(НастройкиСКД.Настройки, "ПоОбъектам", "Источники");
	Иначе
		УстановитьЗначениеПараметраНастроек(НастройкиСКД.Настройки, "ПоОбъектам", Объект.ВариантГруппировки);
	КонецЕсли;
	
	Счета51 = Новый Массив;
	Счета51.Добавить(ПланыСчетов.Учетный.НайтиПоКоду("51"));
	Счета51БУ = Новый Массив;
	Счета51БУ.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("51"));
	Счета51БУ.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("52"));
	Счета50 = Новый Массив;
	Счета50.Добавить(ПланыСчетов.Учетный.НайтиПоКоду("50"));
	Счета50БУ = Новый Массив;
	Счета50БУ.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("50"));
	
	ПерваяКасса = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Кассы.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Кассы КАК Кассы
	               |ГДЕ
	               |	НЕ Кассы.ВидИсточника = ЗНАЧЕНИЕ(Перечисление.ГД_ВидыИсточников.КассаУчет)";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ПерваяКасса = Выборка.Ссылка;	
	КонецЦикла;

	УстановитьЗначениеПараметраНастроек(НастройкиСКД.Настройки, "Счет50", Счета50);
    УстановитьЗначениеПараметраНастроек(НастройкиСКД.Настройки, "Счет50БУ", Счета50БУ);
    УстановитьЗначениеПараметраНастроек(НастройкиСКД.Настройки, "Счет51", Счета51);
	УстановитьЗначениеПараметраНастроек(НастройкиСКД.Настройки, "Счет51БУ", Счета51БУ);
	УстановитьЗначениеПараметраНастроек(НастройкиСКД.Настройки, "СчетКазна", ПланыСчетов.Учетный.НайтиПоКоду("55.01"));	
	УстановитьЗначениеПараметраНастроек(НастройкиСКД.Настройки, "ИспользоватьПлатежку", Объект.ОстаткиПоПлатежке);
	УстановитьЗначениеПараметраНастроек(НастройкиСКД.Настройки, "ПерваяКасса", ПерваяКасса);
	
	Если ИмяКомандыПечати = "ПечатьОбщий" Тогда
		УстановитьЗначениеПараметраНастроек(НастройкиСКД.Настройки, "ОтборТочкиЗаявок", ОтборТочкиЗаявок);
	КонецЕсли;
	
	//Макет компоновки
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	//НастройкиСКД = Новый НастройкиКомпоновкиДанных;
	ДанныеРасшифровкиСКД = Новый ДанныеРасшифровкиКомпоновкиДанных;
    МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиСКД.ПолучитьНастройки(), ДанныеРасшифровкиСКД);
	КомпоновщикНастроек = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
    
    //Компоновка данных 
    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, Новый Структура("Таблица", ДанныеТЧ), ДанныеРасшифровкиСКД);
	
	ДанныеРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровкиСКД,Новый УникальныйИдентификатор);
    
    //Вывод результата ДокументРезультат.Очистить();
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ДокументРезультат.Очистить();
    ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
    ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	ФормаПечати = ПолучитьФорму("ОбщаяФорма.ФормаПечатиДокумента");
	ПечатьНаСервере(ФормаПечати.Результат, ФормаПечати.ДанныеРасшифровки, Команда.Имя);
	ФормаПечати.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КорректировкаОстатковПоНеоплаченнымРестрамПриИзменении(Элемент)
	Обновить(Неопределено);
	Элементы.РасшифровкаГрафика.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРеестрОплатОбщий(Команда)
	МассивДоков = ПолучитьМассивЗаявокПоОтборам();	
	ОткрытьФорму("Документ.Д_ЗаявкаНаОплату.ФормаОбъекта", Новый Структура("Основание", Новый Структура("ДатаГрафика, ВидОплаты, РежимРаботы, ПоказыватьГрафикПоБюджету, МассивДоков, ДанныеТЗ", ТекущаяДата(), Неопределено, Объект.РежимРаботы, Объект.ПоказыватьГрафикПоБюджету, МассивДоков, ПолучитьСтруктуруДанныхТЗ())));
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруДанныхТЗ()
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Данные.Выгрузить());
КонецФункции // ()


&НаСервере
Функция ПолучитьМассивЗаявокПоОтборам()
	
	ДокументРезультат = Новый ДеревоЗначений;
	
	ДанныеТЧ = Данные.Выгрузить();
		
	Попытка
		ЭтотОбъект2 = ВнешниеОбработки.Создать("сабПлатежныйКалендарь");	
	Исключение
		ЭтотОбъект2 = Обработки.сабПлатежныйКалендарь;
	КонецПопытки;
	
	СхемаКомпоновкиДанных = ЭтотОбъект2.ПолучитьМакет("МакетСКД");
	
	//настройки СКД
	НастройкиСКД = Новый КомпоновщикНастроекКомпоновкиДанных;
	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	НастройкиСКД.Инициализировать(ИсточникНастроек);
	НастройкиСКД.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	НастройкиСКД.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	УстановитьЗначениеПараметраНастроек(НастройкиСКД.Настройки, "ТочкиНаСогласовании", ОтборТочкиСогласования.ВыгрузитьЗначения());
	УстановитьЗначениеПараметраНастроек(НастройкиСКД.Настройки, "ТочкиКОплате", ОтборТочкиОплаты.ВыгрузитьЗначения());
	УстановитьЗначениеПараметраНастроек(НастройкиСКД.Настройки, "ОтборТочкиЗаявок", ОтборТочкиЗаявок);
	УстановитьЗначениеПараметраНастроек(НастройкиСКД.Настройки, "ПоОбъектам", Объект.ВариантГруппировки);
	УстановитьЗначениеПараметраНастроек(НастройкиСКД.Настройки, "СворачиватьСтатьиДДС", Объект.СворачиватьСтатьиДДС);
	
	//Макет компоновки
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиСКД.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	КомпоновщикНастроек = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	//Компоновка данных 
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, Новый Структура("Таблица", ДанныеТЧ));
	
	//Вывод результата ДокументРезультат.Очистить();
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ТЗВрем = ВыгрузитьДеревоЗначенийВТаблицуЗначений(ДокументРезультат);
	
	МассивДоков = Новый Массив;
	Для каждого ТекСтрока Из ТЗВрем Цикл
		Если ЗначениеЗаполнено(ТекСтрока.Документ) И (ТипЗнч(ТекСтрока.Документ) = Тип("ДокументСсылка.Д_ЗаявкаНаФинансирование") ИЛИ ТипЗнч(ТекСтрока.Документ) = Тип("ДокументСсылка.Д_Бюджет"))  Тогда
			МассивДоков.Добавить(ТекСтрока.Документ);		
		КонецЕсли;
	КонецЦикла; 
	
	Возврат МассивДоков;

КонецФункции

// Процедура выгружает данные из дерева значений в таблицу значений 
// 
Функция ВыгрузитьДеревоЗначенийВТаблицуЗначений(Дерево, Таблица = Неопределено) Экспорт 
	
	Если Таблица = Неопределено Тогда 
		Таблица = Новый ТаблицаЗначений; 
		Для Каждого Колонка Из Дерево.Колонки Цикл 
			Таблица.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения); 
		КонецЦикла; 
	КонецЕсли; 
	
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл 
		ЗаполнитьЗначенияСвойств(Таблица.Добавить(), СтрокаДерева); 
		ВыгрузитьДеревоЗначенийВТаблицуЗначений(СтрокаДерева, Таблица); 
	КонецЦикла; 
	Возврат Таблица; 
	
КонецФункции //ВыгрузитьДеревоЗначенийВТаблицуЗначений() 

&НаКлиенте
Процедура Сумма(Команда)
	ОбъектКопирования = Новый COMОбъект("htmlfile"); 
	ОбъектКопирования.ParentWindow.ClipboardData.SetData("Text", Строка(СуммаВерх));
КонецПроцедуры

&НаКлиенте
Процедура СуммаНиз(Команда)
	ОбъектКопирования = Новый COMОбъект("htmlfile"); 
	ОбъектКопирования.ParentWindow.ClipboardData.SetData("Text", Строка(СуммаНиз));
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьГрафикПоБюджетуПриИзменении(Элемент)
	Обновить(Неопределено);
	ДанныеПриАктивизацииЯчейки(Элемент);
	Элементы.РасшифровкаГрафика.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ГрафикПеренестиВсеНаДату(Команда)
	
	//ТекДанные = Элементы.РасшифровкаГрафика.ТекущаяСтрока;
	//Если НЕ ТекДанные = Неопределено Тогда
	НоваяДата = ТекущаяДата() + 24*60*60;
	ПоказатьВводДаты(Новый ОписаниеОповещения("ГрафикПеренестиВсеНаДатуЗавершение", ЭтаФорма, Новый Структура("НоваяДата", НоваяДата)), НоваяДата, "Введите дату платежа", ЧастиДаты.Дата);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикПеренестиВсеНаДатуЗавершение(Дата, ДополнительныеПараметры) Экспорт
	
	НоваяДата = ?(Дата = Неопределено, ДополнительныеПараметры.НоваяДата, Дата);
	
	
	Если (Дата <> Неопределено) Тогда
		
		Если НоваяДата < ТекущаяДата() Тогда
			Сообщить("Дата платежа меньше текущей даты!");
			Возврат;		
		КонецЕсли;
		
		
		МассивВсехДоступныхЗаявок = ВернутьМассивВсехКлючейСтрокГрафика();
		
		ПеренестиЗаявкуНаКлиенте(НоваяДата,,,МассивВсехДоступныхЗаявок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВернутьМассивВсехКлючейСтрокГрафика()
	
	МассивДоков = ПолучитьМассивЗаявокПоОтборам();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	сабГрафикПлатежей.Документ КАК Документ,
	               |	сабГрафикПлатежей.Предприятие КАК Предприятие,
	               |	сабГрафикПлатежей.ЦФО КАК ЦФО,
	               |	сабГрафикПлатежей.ПодразделениеЦФО КАК ПодразделениеЦФО,
	               |	сабГрафикПлатежей.ДатаПлатежа КАК ДатаПлатежа,
	               |	сабГрафикПлатежей.ВидОперации КАК ВидОперации,
	               |	сабГрафикПлатежей.Источник КАК Источник,
	               |	сабГрафикПлатежей.СтатьяДДС КАК СтатьяДДС,
	               |	сабГрафикПлатежей.СтавкаНДС КАК СтавкаНДС,
	               |	сабГрафикПлатежей.Контрагент КАК Контрагент,
	               |	сабГрафикПлатежей.Договор КАК Договор,
	               |	сабГрафикПлатежей.СчетКонтрагента КАК СчетКонтрагента,
	               |	сабГрафикПлатежей.Валюта КАК Валюта,
	               |	сабГрафикПлатежей.УИДСтрокиДокумента КАК УИДСтрокиДокумента,
	               |	сабГрафикПлатежей.ТочкаМаршрута КАК ТочкаМаршрута,
	               |	сабГрафикПлатежей.Организация КАК Организация,
	               |	сабГрафикПлатежей.ДопПризнак КАК ДопПризнак,
	               |	сабГрафикПлатежей.ИсточникПолучатель КАК ИсточникПолучатель,
	               |	сабГрафикПлатежей.ОснованиеПометкаУдаления КАК ОснованиеПометкаУдаления,
	               |	сабГрафикПлатежей.Сценарий КАК Сценарий,
	               |	сабГрафикПлатежей.УИДСтрокиБюджета КАК УИДСтрокиБюджета
	               |ИЗ
	               |	РегистрСведений.сабГрафикПлатежей КАК сабГрафикПлатежей
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Д_ЗаявкаНаОплату.ЗаявкаБезнал КАК Д_ЗаявкаНаОплатуЗаявкаБезнал
	               |		ПО сабГрафикПлатежей.Документ = Д_ЗаявкаНаОплатуЗаявкаБезнал.ЗаявкаНаФинансирование
	               |			И (Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка.ПометкаУдаления = ЛОЖЬ)
	               |			И сабГрафикПлатежей.УИДСтрокиДокумента = Д_ЗаявкаНаОплатуЗаявкаБезнал.УИДСтроки
	               |ГДЕ
	               |	сабГрафикПлатежей.ДатаПлатежа <= &ДатаПлатежа
	               |	И (ТИПЗНАЧЕНИЯ(сабГрафикПлатежей.Документ) = ТИП(Документ.Д_ЗаявкаНаФинансирование)
	               |			ИЛИ ТИПЗНАЧЕНИЯ(сабГрафикПлатежей.Документ) = ТИП(Документ.Д_Бюджет))
	               |	И Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка ЕСТЬ NULL
	               |	И сабГрафикПлатежей.Предприятие В ИЕРАРХИИ(&ДоступныеПредприятия)
	               |	И сабГрафикПлатежей.ОснованиеПометкаУдаления = ЛОЖЬ
	               |	И НЕ сабГрафикПлатежей.ТочкаМаршрута = ЗНАЧЕНИЕ(Перечисление.Согласование1ТочкиМаршрута.Действие1)
	               |	И сабГрафикПлатежей.Документ.ПометкаУдаления = ЛОЖЬ
	               |	И (сабГрафикПлатежей.Сценарий = ЗНАЧЕНИЕ(Справочник.СценарииПланирования.ПустаяСсылка)
	               |			ИЛИ &ПоказыватьГрафикПоБюджету)
	               |	И ВЫБОР
	               |			КОГДА НЕОПРЕДЕЛЕНО В (&МассивДоков)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ сабГрафикПлатежей.Документ В (&МассивДоков)
	               |		КОНЕЦ
	               |	И НЕ сабГрафикПлатежей.Сумма = 0
	               |	И (сабГрафикПлатежей.Сценарий = ЗНАЧЕНИЕ(Справочник.СценарииПланирования.ПустаяСсылка)
	               |			ИЛИ сабГрафикПлатежей.Сценарий = &СценарийФакт)
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ДатаПлатежа", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ПоказыватьГрафикПоБюджету", Истина);
	Запрос.УстановитьПараметр("ДоступныеПредприятия", ПараметрыСеанса.ДоступныеПредприятия);
	Запрос.УстановитьПараметр("МассивДоков", МассивДоков);
	Запрос.УстановитьПараметр("СценарийФакт", Справочники.СценарииПланирования.СценарийФакт());
	
	Результат = Запрос.Выполнить();
	ВыборкаТЗ = Результат.Выгрузить();
	
	МассивКлючей = Новый Массив;
	
	Для Каждого Выборка Из ВыборкаТЗ Цикл
		СтрОтбор = Новый Структура;
		Для каждого ТекКолонка Из ВыборкаТЗ.Колонки Цикл
			СтрОтбор.Вставить(ТекКолонка.Имя, Выборка[ТекКолонка.Имя]);
		КонецЦикла; 
		НовыйКлючЗаписи = РегистрыСведений.сабГрафикПлатежей.СоздатьКлючЗаписи(СтрОтбор);
		МассивКлючей.Добавить(НовыйКлючЗаписи);
	КонецЦикла;
	
	Возврат МассивКлючей;

КонецФункции // ()

&НаКлиенте
Процедура ГрафикУдалитьПлатеж(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ГрафикУдалитьПлатежЗавершение", ЭтотОбъект), "После удаления возврат платежа или его части обратно в платежный календарь будет невозможен. Продолжить?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикУдалитьПлатежЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если НЕ Элементы.РасшифровкаГрафика.ВыделенныеСтроки.Количество() Тогда
		Сообщить("Нет выделенных строк для перемещения.");
		Возврат;
	Иначе
		ВыделенныеСтроки = Элементы.РасшифровкаГрафика.ВыделенныеСтроки;	
	КонецЕсли;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да  Тогда
		Для каждого ТекСтрокаГрафика Из ВыделенныеСтроки Цикл
			ГрафикУдалитьПлатежНаСервере(ТекСтрокаГрафика);
		КонецЦикла;
		Обновить(Неопределено);
	КонецЕсли;

КонецПроцедуры

Процедура ГрафикУдалитьПлатежНаСервере(КлючЗаписи)
	МенеджерЗаписи1 = РегистрыСведений.сабГрафикПлатежей.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи1, КлючЗаписи);
	МенеджерЗаписи1.Прочитать();
	МенеджерЗаписи1.Удалить();
КонецПроцедуры

&НаКлиенте
Процедура КОплатеВыделенные(Команда)
	
	УстановитьКОплатеНаКлиенте();	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКОплатеНаКлиенте(ВыдСтроки = Неопределено)
	
	Если ВыдСтроки = Неопределено Тогда
		Если НЕ Элементы.РасшифровкаГрафика.ВыделенныеСтроки.Количество() Тогда
			Сообщить("Нет выделенных строк для перемещения.");
			Возврат;
		Иначе
			ВыделенныеСтроки = Элементы.РасшифровкаГрафика.ВыделенныеСтроки;	
		КонецЕсли;
	Иначе
		ВыделенныеСтроки = ВыдСтроки;	
	КонецЕсли;
	
	Если Элементы.Данные.Видимость Тогда
		ТекЭлемент = Элементы.Данные.ТекущийЭлемент;
		ТекДанные = Элементы.Данные.ТекущиеДанные;
		ДанныеИмя = "Данные";
		ОбновлятьДанные = Ложь;
	Иначе	
		ТекЭлемент = Элементы.ДанныеДерево.ТекущийЭлемент;
		ТекДанные = Элементы.ДанныеДерево.ТекущиеДанные;
		ДанныеИмя = "ДанныеДерево";
		ОбновлятьДанные = Истина;
	КонецЕсли;	
	
	ТекИндекс = 1;
	Для каждого ТекСтрокаГрафика Из ВыделенныеСтроки Цикл
		Состояние("Установка статуса К оплате", ТекИндекс/ВыделенныеСтроки.Количество()*100, ТекСтрокаГрафика); 
		УстанвитьКОплате(ТекСтрокаГрафика);
		ТекИндекс = ТекИндекс + 1;
	КонецЦикла;
	ОповеститьОбИзменении(Тип("ДокументСсылка.Д_ЗаявкаНаФинансирование"));
	Обновить(Неопределено);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстанвитьКОплате(КлючЗаписи)
	
	МенеджерЗаписи = РегистрыСведений.сабГрафикПлатежей.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, КлючЗаписи);
	МенеджерЗаписи.Прочитать();
	Если ТипЗнч(МенеджерЗаписи.Документ) = Тип("ДокументСсылка.Д_ЗаявкаНаФинансирование") И НЕ МенеджерЗаписи.ТочкаМаршрута = Перечисления.Согласование1ТочкиМаршрута.Действие5 И НЕ МенеджерЗаписи.ТочкаМаршрута = Перечисления.Согласование1ТочкиМаршрута.Завершение Тогда
		МенеджерЗаписи.ТочкаМаршрута = Перечисления.Согласование1ТочкиМаршрута.Действие4;
		Если МенеджерЗаписи.Документ.Сумма = МенеджерЗаписи.Сумма Тогда
			Об = МенеджерЗаписи.Документ.ПолучитьОбъект();
			Об.Статус = Перечисления.СтатусыЗаявокНаОплату.КОплате;
			Об.Записать();		
		КонецЕсли;
	КонецЕсли;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура КОплатеВыделенныеВсеСегодняшние(Команда)
	
	МассивВсехДоступныхЗаявок = ВернутьМассивВсехКлючейСтрокГрафика();
	
	УстановитьКОплатеНаКлиенте(МассивВсехДоступныхЗаявок);
	
КонецПроцедуры

&НаКлиенте
Процедура КонструкторРеестров(Команда)
	
	МассивДоков = ПолучитьМассивЗаявокПоОтборам();	
	
	ТекФорма = ПолучитьФорму("Обработка.сабПлатежныйКалендарь.Форма.ФормаСозданияРеестров", 
		Новый Структура("ДатаГрафика, ВидОплаты, РежимРаботы, ПоказыватьГрафикПоБюджету, МассивДоков, ДанныеТЗ, ВариантГруппировки", 
		ТекущаяДата(), Неопределено, Объект.РежимРаботы, Объект.ПоказыватьГрафикПоБюджету, МассивДоков, ПолучитьСтруктуруДанныхТЗ(), Объект.ВариантГруппировки));
	
	ТекФорма.Открыть();
	
КонецПроцедуры

//&НаКлиенте
//Процедура ДнейПланированияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
//	СтандартнаяОбработка = Ложь;
//	Список = Новый СписокЗначений;
//	Список.Добавить("До конца недели");
//	Список.Добавить("До конца седующей недели");
//	Список.Добавить("До конца месяца");
//	
//	ТекЗнч = Неопределено;
//	
//	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ДнейПланированияНачалоВыбораИзСпискаЗавершение", ЭтаФорма), Список, Элемент);
//КонецПроцедуры

//&НаКлиенте
//Процедура ДнейПланированияНачалоВыбораИзСпискаЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
//	
//	ТекЗнч = ВыбранныйЭлемент;
//	Если НЕ ТекЗнч = Неопределено Тогда
//		Если ТекЗнч.Значение = "До конца недели" Тогда
//			Объект.ГоризонтПланирования = КонецНедели(ТекущаяДата());
//		ИначеЕсли ТекЗнч.Значение = "До конца седующей недели" Тогда
//			Объект.ГоризонтПланирования = КонецНедели(ТекущаяДата()+7*24*60*60);
//		ИначеЕсли ТекЗнч.Значение = "До конца месяца" Тогда
//			Объект.ГоризонтПланирования = КонецМесяца(ТекущаяДата());
//		КонецЕсли;
//	КонецЕсли;
//	Обновить(Неопределено);
//КонецПроцедуры

&НаСервере
Функция ВернутьТаблицуНачальногоЗаполненияПК(ВариантГруппировкиПК, РежимРаботыПК, КорректировкаОстатковПоНеоплаченнымЗаявкам)

	Попытка
		ЭтотОбъект2 = ВнешниеОбработки.Создать("сабПлатежныйКалендарь");	
	Исключение
		ЭтотОбъект2 = Обработки.сабПлатежныйКалендарь;
	КонецПопытки;
	
	СхемаКомпоновкиДанных = ЭтотОбъект2.ПолучитьМакет("МакетЗаполнения");
	ЗапросТекст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	Д_ЗаявкаНаОплатуЗаявкаБезнал.СтатьяДДС КАК СтатьяДДС,
	              |	Д_ЗаявкаНаОплатуЗаявкаБезнал.ЦФО КАК ЦФО,
	              |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Подразделение КАК ПодразделениеЦФО,
	              |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Источник КАК Источник,
	              |	Д_ЗаявкаНаОплатуЗаявкаБезнал.СтатьяДДС.Код КАК СтатьяДДСКод,
	              |	ВЫБОР
	              |		КОГДА Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка.ДатаОплаты = НАЧАЛОПЕРИОДА(&Дата0День, ДЕНЬ)
	              |			ТОГДА Д_ЗаявкаНаОплатуЗаявкаБезнал.СуммаДДС * ЕСТЬNULL(Б_ПлановыеКурсыВалютСрезПоследних.Курс, 1)
	              |		ИНАЧЕ 0
	              |	КОНЕЦ КАК Просрочено,
	              |	ВЫБОР
	              |		КОГДА НАЧАЛОПЕРИОДА(Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка.ДатаОплаты, ДЕНЬ) <= НАЧАЛОПЕРИОДА(&Дата0День, ДЕНЬ)
	              |			ТОГДА Д_ЗаявкаНаОплатуЗаявкаБезнал.СуммаДДС * ЕСТЬNULL(Б_ПлановыеКурсыВалютСрезПоследних.Курс, 1)
	              |		ИНАЧЕ 0
	              |	КОНЕЦ КАК День0,
	              |	ВЫБОР
	              |		КОГДА Д_ЗаявкаНаОплатуЗаявкаБезнал.ВидОперации В (&РасходныеОперации)
	              |			ТОГДА ЛОЖЬ
	              |		ИНАЧЕ ИСТИНА
	              |	КОНЕЦ КАК СтатьяДДСДоход,
	              |	NULL КАК Порядок,
	              |	NULL КАК УИДСтрокиДокумента,
	              |	NULL КАК ДатаПлатежа,
	              |	NULL КАК ТочкаМаршрута,
	              |	NULL КАК БудущиеПлатежи,
	              |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка.Предприятие КАК Предприятие,
	              |	NULL КАК Организация,
	              |	""#ПеременноеПоле1"" КАК ПеременноеПоле
	              |ПОМЕСТИТЬ Заявки
	              |ИЗ
	              |	Документ.Д_ЗаявкаНаОплату.ЗаявкаБезнал КАК Д_ЗаявкаНаОплатуЗаявкаБезнал
	              |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение.СтрокиЗаявкиНаОплату КАК ПлатежноеПоручениеСтрокиЗаявкиНаОплату
	              |		ПО Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка = ПлатежноеПоручениеСтрокиЗаявкиНаОплату.ДокОснование
	              |			И Д_ЗаявкаНаОплатуЗаявкаБезнал.НомерСтроки = ПлатежноеПоручениеСтрокиЗаявкиНаОплату.НомерСтроки
	              |			И (ПлатежноеПоручениеСтрокиЗаявкиНаОплату.Ссылка.Проведен = ИСТИНА)
	              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Б_ПлановыеКурсыВалют.СрезПоследних(
	              |				,
	              |				Валюта2 = &ЭквивалентнаяВалюта
	              |					И Сценарий = &АктуальныйСценарий) КАК Б_ПлановыеКурсыВалютСрезПоследних
	              |		ПО Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка.Предприятие.ОсновнаяВалютаУчета = Б_ПлановыеКурсыВалютСрезПоследних.Валюта1
	              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Б_ПлановыеКурсыВалют.СрезПоследних(
	              |				,
	              |				Валюта1 = &ЭквивалентнаяВалюта
	              |					И Сценарий = &АктуальныйСценарий) КАК ПлановыйКурсЭквивалентнойВалюты
	              |		ПО Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка.Предприятие.ОсновнаяВалютаУчета = ПлановыйКурсЭквивалентнойВалюты.Валюта2
	              |ГДЕ
	              |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка.Дата >= &ДатаНачала
	              |	И ПлатежноеПоручениеСтрокиЗаявкиНаОплату.Ссылка ЕСТЬ NULL
	              |	И Д_ЗаявкаНаОплатуЗаявкаБезнал.ПлатежноеПоручение = НЕОПРЕДЕЛЕНО
	              |	И Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка.ПометкаУдаления = ЛОЖЬ
	              |	И ЛОЖЬ
	              |
	              |ОБЪЕДИНИТЬ ВСЕ
	              |
	              |ВЫБРАТЬ
	              |	сабГрафикПлатежей.СтатьяДДС,
	              |	сабГрафикПлатежей.ЦФО,
	              |	сабГрафикПлатежей.ПодразделениеЦФО,
	              |	сабГрафикПлатежей.Источник,
	              |	сабГрафикПлатежей.СтатьяДДС.Код,
	              |	ВЫБОР
	              |		КОГДА сабГрафикПлатежей.ДатаПлатежа < НАЧАЛОПЕРИОДА(&Дата0День, ДЕНЬ)
	              |			ТОГДА сабГрафикПлатежей.Сумма * ЕСТЬNULL(Б_ПлановыеКурсыВалютСрезПоследних.Курс, 1)
	              |		ИНАЧЕ 0
	              |	КОНЕЦ,
	              |	ВЫБОР
	              |		КОГДА НАЧАЛОПЕРИОДА(сабГрафикПлатежей.ДатаПлатежа, ДЕНЬ) <= НАЧАЛОПЕРИОДА(&Дата0День, ДЕНЬ)
	              |			ТОГДА сабГрафикПлатежей.Сумма * ЕСТЬNULL(Б_ПлановыеКурсыВалютСрезПоследних.Курс, 1)
	              |		ИНАЧЕ 0
	              |	КОНЕЦ,
	              |	ВЫБОР
	              |		КОГДА сабГрафикПлатежей.ВидОперации В (&РасходныеОперации)
	              |			ТОГДА ЛОЖЬ
	              |		ИНАЧЕ ИСТИНА
	              |	КОНЕЦ,
	              |	ВЫБОР
	              |		КОГДА НЕ сабГрафикПлатежей.ВидОперации В (&РасходныеОперации)
	              |			ТОГДА 1
	              |		ИНАЧЕ 2
	              |	КОНЕЦ,
	              |	сабГрафикПлатежей.УИДСтрокиДокумента,
	              |	сабГрафикПлатежей.ДатаПлатежа,
	              |	сабГрафикПлатежей.ТочкаМаршрута,
	              |	ВЫБОР
	              |		КОГДА НАЧАЛОПЕРИОДА(сабГрафикПлатежей.ДатаПлатежа, ДЕНЬ) > НАЧАЛОПЕРИОДА(&Дата0День, ДЕНЬ)
	              |			ТОГДА сабГрафикПлатежей.Сумма * ЕСТЬNULL(Б_ПлановыеКурсыВалютСрезПоследних.Курс, 1)
	              |		ИНАЧЕ 0
	              |	КОНЕЦ,
	              |	сабГрафикПлатежей.Предприятие,
	              |	сабГрафикПлатежей.Организация,
	              |	""#ПеременноеПоле2""
	              |ИЗ
	              |	РегистрСведений.сабГрафикПлатежей КАК сабГрафикПлатежей
	              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Б_ПлановыеКурсыВалют.СрезПоследних(
	              |				,
	              |				Валюта2 = &ЭквивалентнаяВалюта
	              |					И Сценарий = &АктуальныйСценарий) КАК Б_ПлановыеКурсыВалютСрезПоследних
	              |		ПО сабГрафикПлатежей.Предприятие.ОсновнаяВалютаУчета = Б_ПлановыеКурсыВалютСрезПоследних.Валюта1
	              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Б_ПлановыеКурсыВалют.СрезПоследних(
	              |				,
	              |				Валюта1 = &ЭквивалентнаяВалюта
	              |					И Сценарий = &АктуальныйСценарий) КАК ПлановыйКурсЭквивалентнойВалюты
	              |		ПО сабГрафикПлатежей.Предприятие.ОсновнаяВалютаУчета = ПлановыйКурсЭквивалентнойВалюты.Валюта2
	              |ГДЕ
	              |	ВЫБОР
	              |			КОГДА &ОтборТочкиЗаявок = ""На согласовании""
	              |				ТОГДА сабГрафикПлатежей.ТочкаМаршрута В (&ТочкиНаСогласовании)
	              |						ИЛИ сабГрафикПлатежей.ТочкаМаршрута В (&ТочкиКОплате)
	              |			КОГДА &ОтборТочкиЗаявок = ""К оплате""
	              |				ТОГДА сабГрафикПлатежей.ТочкаМаршрута В (&ТочкиКОплате)
	              |			ИНАЧЕ ИСТИНА
	              |		КОНЕЦ
	              |	И сабГрафикПлатежей.ОснованиеПометкаУдаления = ЛОЖЬ
	              |	И НЕ сабГрафикПлатежей.ТочкаМаршрута = ЗНАЧЕНИЕ(Перечисление.Согласование1ТочкиМаршрута.Действие1)
	              |	И (сабГрафикПлатежей.Сценарий = ЗНАЧЕНИЕ(Справочник.СценарииПланирования.ПустаяСсылка)
	              |			ИЛИ &ПоказыватьГрафикПоБюджету)
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	""Доход ВНХ"" КАК СтатьяДДС,
	              |	Д_ИсточникППСрезПоследних.Предприятие КАК ЦФО,
	              |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Подразделение КАК ПодразделениеЦФО,
	              |	ВЫБОР
	              |		КОГДА Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка.ДатаОплаты < НАЧАЛОПЕРИОДА(&Дата0День, ДЕНЬ)
	              |			ТОГДА Д_ЗаявкаНаОплатуЗаявкаБезнал.СуммаДДС * ЕСТЬNULL(Б_ПлановыеКурсыВалютСрезПоследних.Курс, 1)
	              |		ИНАЧЕ 0
	              |	КОНЕЦ КАК Просрочено,
	              |	Д_ЗаявкаНаОплатуЗаявкаБезнал.СчетКонтрагента КАК Источник,
	              |	""0000001"" КАК СтатьяДДСКод,
	              |	ВЫБОР
	              |		КОГДА НАЧАЛОПЕРИОДА(Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка.ДатаОплаты, ДЕНЬ) <= НАЧАЛОПЕРИОДА(&Дата0День, ДЕНЬ)
	              |			ТОГДА Д_ЗаявкаНаОплатуЗаявкаБезнал.СуммаДДС * ЕСТЬNULL(Б_ПлановыеКурсыВалютСрезПоследних.Курс, 1)
	              |		ИНАЧЕ 0
	              |	КОНЕЦ КАК День0,
	              |	NULL КАК БудущиеПлатежи,
	              |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка.Предприятие КАК Предприятие,
	              |	NULL КАК Организация,
	              |	""#ПеременноеПоле3"" КАК ПеременноеПоле
	              |ПОМЕСТИТЬ ДоходыВНХ
	              |ИЗ
	              |	Документ.Д_ЗаявкаНаОплату.ЗаявкаБезнал КАК Д_ЗаявкаНаОплатуЗаявкаБезнал
	              |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение.СтрокиЗаявкиНаОплату КАК ПлатежноеПоручениеСтрокиЗаявкиНаОплату
	              |		ПО Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка = ПлатежноеПоручениеСтрокиЗаявкиНаОплату.ДокОснование
	              |			И Д_ЗаявкаНаОплатуЗаявкаБезнал.НомерСтроки = ПлатежноеПоручениеСтрокиЗаявкиНаОплату.НомерСтроки
	              |			И (ПлатежноеПоручениеСтрокиЗаявкиНаОплату.Ссылка.Проведен = ИСТИНА)
	              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Д_ИсточникПП.СрезПоследних КАК Д_ИсточникППСрезПоследних
	              |		ПО Д_ЗаявкаНаОплатуЗаявкаБезнал.СчетКонтрагента = Д_ИсточникППСрезПоследних.БанковскиеСчета
	              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Б_ПлановыеКурсыВалют.СрезПоследних(
	              |				,
	              |				Валюта2 = &ЭквивалентнаяВалюта
	              |					И Сценарий = &АктуальныйСценарий) КАК Б_ПлановыеКурсыВалютСрезПоследних
	              |		ПО Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка.Предприятие.ОсновнаяВалютаУчета = Б_ПлановыеКурсыВалютСрезПоследних.Валюта1
	              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Б_ПлановыеКурсыВалют.СрезПоследних(
	              |				,
	              |				Валюта1 = &ЭквивалентнаяВалюта
	              |					И Сценарий = &АктуальныйСценарий) КАК ПлановыйКурсЭквивалентнойВалюты
	              |		ПО Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка.Предприятие.ОсновнаяВалютаУчета = ПлановыйКурсЭквивалентнойВалюты.Валюта2
	              |ГДЕ
	              |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка.Дата >= &ДатаНачала
	              |	И ПлатежноеПоручениеСтрокиЗаявкиНаОплату.Ссылка ЕСТЬ NULL
	              |	И Д_ЗаявкаНаОплатуЗаявкаБезнал.ПлатежноеПоручение = НЕОПРЕДЕЛЕНО
	              |	И ТИПЗНАЧЕНИЯ(Д_ЗаявкаНаОплатуЗаявкаБезнал.Контрагент) = ТИП(Справочник.Организации)
	              |	И ЛОЖЬ
	              |
	              |ОБЪЕДИНИТЬ ВСЕ
	              |
	              |ВЫБРАТЬ
	              |	""Поступления ВНХ"",
	              |	Д_ИсточникППСрезПоследних.Предприятие,
	              |	сабГрафикПлатежей.ПодразделениеЦФО,
	              |	ВЫБОР
	              |		КОГДА сабГрафикПлатежей.ДатаПлатежа < НАЧАЛОПЕРИОДА(&Дата0День, ДЕНЬ)
	              |			ТОГДА сабГрафикПлатежей.Сумма * ЕСТЬNULL(Б_ПлановыеКурсыВалютСрезПоследних.Курс, 1)
	              |		ИНАЧЕ 0
	              |	КОНЕЦ,
	              |	сабГрафикПлатежей.СчетКонтрагента,
	              |	""0000001"",
	              |	ВЫБОР
	              |		КОГДА НАЧАЛОПЕРИОДА(сабГрафикПлатежей.ДатаПлатежа, ДЕНЬ) <= НАЧАЛОПЕРИОДА(&Дата0День, ДЕНЬ)
	              |			ТОГДА сабГрафикПлатежей.Сумма * ЕСТЬNULL(Б_ПлановыеКурсыВалютСрезПоследних.Курс, 1)
	              |		ИНАЧЕ 0
	              |	КОНЕЦ,
	              |	ВЫБОР
	              |		КОГДА НАЧАЛОПЕРИОДА(сабГрафикПлатежей.ДатаПлатежа, ДЕНЬ) > НАЧАЛОПЕРИОДА(&Дата0День, ДЕНЬ)
	              |			ТОГДА сабГрафикПлатежей.Сумма * ЕСТЬNULL(Б_ПлановыеКурсыВалютСрезПоследних.Курс, 1)
	              |		ИНАЧЕ 0
	              |	КОНЕЦ,
	              |	сабГрафикПлатежей.Предприятие,
	              |	сабГрафикПлатежей.Организация,
	              |	""#ПеременноеПоле4""
	              |ИЗ
	              |	РегистрСведений.сабГрафикПлатежей КАК сабГрафикПлатежей
	              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Д_ИсточникПП.СрезПоследних КАК Д_ИсточникППСрезПоследних
	              |		ПО сабГрафикПлатежей.СчетКонтрагента = Д_ИсточникППСрезПоследних.БанковскиеСчета
	              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Б_ПлановыеКурсыВалют.СрезПоследних(
	              |				,
	              |				Валюта2 = &ЭквивалентнаяВалюта
	              |					И Сценарий = &АктуальныйСценарий) КАК Б_ПлановыеКурсыВалютСрезПоследних
	              |		ПО сабГрафикПлатежей.Предприятие.ОсновнаяВалютаУчета = Б_ПлановыеКурсыВалютСрезПоследних.Валюта1
	              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Б_ПлановыеКурсыВалют.СрезПоследних(
	              |				,
	              |				Валюта1 = &ЭквивалентнаяВалюта
	              |					И Сценарий = &АктуальныйСценарий) КАК ПлановыйКурсЭквивалентнойВалюты
	              |		ПО сабГрафикПлатежей.Предприятие.ОсновнаяВалютаУчета = ПлановыйКурсЭквивалентнойВалюты.Валюта2
	              |ГДЕ
	              |	ТИПЗНАЧЕНИЯ(сабГрафикПлатежей.Контрагент) = ТИП(Справочник.Организации)
	              |	И ЛОЖЬ
	              |	И сабГрафикПлатежей.ОснованиеПометкаУдаления = ЛОЖЬ
	              |	И НЕ сабГрафикПлатежей.ТочкаМаршрута = ЗНАЧЕНИЕ(Перечисление.Согласование1ТочкиМаршрута.Действие1)
	              |	И (сабГрафикПлатежей.Сценарий = ЗНАЧЕНИЕ(Справочник.СценарииПланирования.ПустаяСсылка)
	              |			ИЛИ &ПоказыватьГрафикПоБюджету)
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	ВЫБОР
	              |		КОГДА УчетныйОстатки.Счет = &СчетКазна
	              |			ТОГДА ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)
	              |		ИНАЧЕ УчетныйОстатки.Субконто2
	              |	КОНЕЦ КАК Источник,
	              |	УчетныйОстатки.СуммаОстаток * ЕСТЬNULL(Б_ПлановыеКурсыВалютСрезПоследних.Курс, 1) КАК День0,
	              |	""Остаток на начало"" КАК СтатьяДДС,
	              |	""0"" КАК СтатьяДДСКод,
	              |	НЕОПРЕДЕЛЕНО КАК ПодразделениеЦФО,
	              |	УчетныйОстатки.Предприятия КАК Предприятия,
	              |	УчетныйОстатки.Субконто2.Владелец КАК Организация
	              |ПОМЕСТИТЬ Остатки
	              |ИЗ
	              |	РегистрБухгалтерии.Учетный.Остатки(
	              |			,
	              |			ВЫБОР
	              |					КОГДА &ИспользоватьПлатежку
	              |						ТОГДА Счет В ИЕРАРХИИ (&Счет50) И НЕ Счет.Код = ""50.03""
	              |					ИНАЧЕ (Счет В ИЕРАРХИИ (&Счет51) ИЛИ Счет В ИЕРАРХИИ (&Счет50)) И НЕ Счет.Код = ""50.03""
	              |				КОНЕЦ
	              |				,
	              |			,
	              |			НЕ &ПоОбъектам = ""Объекты"") КАК УчетныйОстатки
	              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Б_ПлановыеКурсыВалют.СрезПоследних(
	              |				,
	              |				Валюта2 = &ЭквивалентнаяВалюта
	              |					И Сценарий = &АктуальныйСценарий) КАК Б_ПлановыеКурсыВалютСрезПоследних
	              |		ПО УчетныйОстатки.Предприятия.ОсновнаяВалютаУчета = Б_ПлановыеКурсыВалютСрезПоследних.Валюта1
	              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Б_ПлановыеКурсыВалют.СрезПоследних(
	              |				,
	              |				Валюта1 = &ЭквивалентнаяВалюта
	              |					И Сценарий = &АктуальныйСценарий) КАК ПлановыйКурсЭквивалентнойВалюты
	              |		ПО УчетныйОстатки.Предприятия.ОсновнаяВалютаУчета = ПлановыйКурсЭквивалентнойВалюты.Валюта2
	              |
	              |ОБЪЕДИНИТЬ ВСЕ
	              |
	              |ВЫБРАТЬ
	              |	НЕОПРЕДЕЛЕНО,
	              |	0,
	              |	""Остаток на начало"",
	              |	""0"",
	              |	Заявки.ПодразделениеЦФО,
	              |	Заявки.Предприятие,
	              |	Заявки.Организация
	              |ИЗ
	              |	Заявки КАК Заявки
	              |ГДЕ
	              |	&ПоОбъектам = ""Объекты""
	              |
	              |ОБЪЕДИНИТЬ ВСЕ
	              |
	              |ВЫБРАТЬ
	              |	Выбор Когда УчетныйОстатки.Счет В ИЕРАРХИИ (&Счет50БУ) Тогда &ПерваяКасса Иначе УчетныйОстатки.Субконто1 Конец,
	              |	УчетныйОстатки.СуммаОстаток,
	              |	""Остаток на начало"",
	              |	""0"",
	              |	НЕОПРЕДЕЛЕНО,
	              |	Выбор Когда УчетныйОстатки.Счет В ИЕРАРХИИ (&Счет50БУ) Тогда УчетныйОстатки.Организация.Предприятие Иначе УчетныйОстатки.Субконто1.Предприятие Конец,
	              |	УчетныйОстатки.Организация
	              |ИЗ
	              |	РегистрБухгалтерии.Хозрасчетный.Остатки(
	              |			,
	              |			ВЫБОР
	              |					КОГДА НЕ &ИспользоватьПлатежку
	              |						ТОГДА ЛОЖЬ
	              |					ИНАЧЕ (Счет В ИЕРАРХИИ (&Счет51БУ) ИЛИ Счет В ИЕРАРХИИ (&Счет50БУ)) И НЕ Счет.Код = ""50.03""
	              |				КОНЕЦ
	              |				,
	              |			,
	              |			НЕ &ПоОбъектам = ""Объекты"") КАК УчетныйОстатки
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	Заявки.СтатьяДДС КАК СтатьяДДС,
	              |	Заявки.ЦФО КАК ЦФО,
	              |	Заявки.ПодразделениеЦФО КАК ПодразделениеЦФО,
	              |	Заявки.Просрочено КАК Просрочено,
	              |	Заявки.Источник КАК Источник,
	              |	Заявки.СтатьяДДСКод КАК СтатьяДДСКод,
	              |	Заявки.День0 КАК День0,
	              |	Заявки.СтатьяДДСДоход КАК СтатьяДоход,
	              |	Заявки.Порядок КАК Порядок,
	              |	0 КАК ОстатокНаНачало,
	              |	Заявки.БудущиеПлатежи КАК БудущиеПлатежи,
	              |	0 КАК ПлатежиПоРеестрам,
	              |	Заявки.Предприятие КАК Предприятие,
	              |	0 КАК ОстатокНаНачалоРабочий,
	              |	Заявки.Организация КАК Организация,
	              |	Заявки.СтатьяДДС.Наименование КАК СтатьяДДСНаименование,
	              |	""#ПеременноеПоле5"" КАК ПеременноеПоле
	              |ПОМЕСТИТЬ Общее
	              |ИЗ
	              |	Заявки КАК Заявки
	              |ГДЕ
	              |	НЕ Заявки.ТочкаМаршрута = ЗНАЧЕНИЕ(Перечисление.Согласование1ТочкиМаршрута.Завершение)
	              |	И НЕ Заявки.ТочкаМаршрута = ЗНАЧЕНИЕ(Перечисление.Согласование1ТочкиМаршрута.действие5)
	              |
	              |ОБЪЕДИНИТЬ ВСЕ
	              |
	              |ВЫБРАТЬ
	              |	Остатки.СтатьяДДС,
	              |	NULL,
	              |	Остатки.ПодразделениеЦФО,
	              |	0,
	              |	Остатки.Источник,
	              |	Остатки.СтатьяДДСКод,
	              |	Остатки.День0,
	              |	ЛОЖЬ,
	              |	0,
	              |	Остатки.День0,
	              |	0,
	              |	0,
	              |	Остатки.Предприятия,
	              |	Остатки.День0,
	              |	Остатки.Организация,
	              |	Остатки.СтатьяДДС,
	              |	""#ПеременноеПоле6""
	              |ИЗ
	              |	Остатки КАК Остатки
	              |
	              |ОБЪЕДИНИТЬ ВСЕ
	              |
	              |ВЫБРАТЬ
	              |	""Остаток на начало"",
	              |	NULL,
	              |	Заявки.ПодразделениеЦФО,
	              |	0,
	              |	Заявки.Источник,
	              |	""0"",
	              |	0,
	              |	ЛОЖЬ,
	              |	0,
	              |	0,
	              |	0,
	              |	0,
	              |	Заявки.Предприятие,
	              |	0,
	              |	Заявки.Организация,
	              |	Заявки.СтатьяДДС.Наименование,
	              |	""#ПеременноеПоле6""
	              |ИЗ
	              |	Заявки КАК Заявки
	              |ГДЕ
	              |	НЕ Заявки.ТочкаМаршрута = ЗНАЧЕНИЕ(Перечисление.Согласование1ТочкиМаршрута.Завершение)
	              |	И НЕ Заявки.ТочкаМаршрута = ЗНАЧЕНИЕ(Перечисление.Согласование1ТочкиМаршрута.действие5)
	              |
	              |ОБЪЕДИНИТЬ ВСЕ
	              |
	              |ВЫБРАТЬ
	              |	ДоходыВНХ.СтатьяДДС,
	              |	ДоходыВНХ.ЦФО,
	              |	ДоходыВНХ.ПодразделениеЦФО,
	              |	ДоходыВНХ.Просрочено,
	              |	ДоходыВНХ.Источник,
	              |	ДоходыВНХ.СтатьяДДСКод,
	              |	ДоходыВНХ.День0,
	              |	ЛОЖЬ,
	              |	1,
	              |	0,
	              |	ДоходыВНХ.БудущиеПлатежи,
	              |	0,
	              |	ДоходыВНХ.Предприятие,
	              |	0,
	              |	ДоходыВНХ.Организация,
	              |	ДоходыВНХ.СтатьяДДС,
	              |	""#ПеременноеПоле7""
	              |ИЗ
	              |	ДоходыВНХ КАК ДоходыВНХ
	              |
	              |ОБЪЕДИНИТЬ ВСЕ
	              |
	              |ВЫБРАТЬ
	              |	""Остаток на начало"",
	              |	NULL,
	              |	Заявки.ПодразделениеЦФО,
	              |	0,
	              |	Заявки.Источник,
	              |	""0"",
	              |	1 + 1 + 1,
	              |	ЛОЖЬ,
	              |	0,
	              |	1 + 1 + 1,
	              |	0,
	              |	0,
	              |	Заявки.Предприятие,
	              |	0,
	              |	Заявки.Организация,
	              |	Заявки.СтатьяДДС.Наименование,
	              |	""#ПеременноеПоле6""
	              |ИЗ
	              |	Заявки КАК Заявки
	              |ГДЕ
	              |	(Заявки.ТочкаМаршрута = ЗНАЧЕНИЕ(Перечисление.Согласование1ТочкиМаршрута.Завершение)
	              |			ИЛИ Заявки.ТочкаМаршрута = ЗНАЧЕНИЕ(Перечисление.Согласование1ТочкиМаршрута.Действие5))
	              |	И &КорректировкаОстатковПоНеоплаченнымЗаявкам = ЛОЖЬ
	              |
	              |ОБЪЕДИНИТЬ ВСЕ
	              |
	              |ВЫБРАТЬ
	              |	Заявки.СтатьяДДС,
	              |	Заявки.ЦФО,
	              |	Заявки.ПодразделениеЦФО,
	              |	0,
	              |	Заявки.Источник,
	              |	Заявки.СтатьяДДСКод,
	              |	0,
	              |	Заявки.СтатьяДДСДоход,
	              |	Заявки.Порядок,
	              |	0,
	              |	Заявки.БудущиеПлатежи,
	              |	Заявки.День0,
	              |	Заявки.Предприятие,
	              |	0,
	              |	Заявки.Организация,
	              |	Заявки.СтатьяДДС.Наименование,
	              |	""#ПеременноеПоле6""
	              |ИЗ
	              |	Заявки КАК Заявки
	              |ГДЕ
	              |	&КорректировкаОстатковПоНеоплаченнымЗаявкам = ИСТИНА
	              |	И (Заявки.ТочкаМаршрута = ЗНАЧЕНИЕ(Перечисление.Согласование1ТочкиМаршрута.Завершение)
	              |			ИЛИ Заявки.ТочкаМаршрута = ЗНАЧЕНИЕ(Перечисление.Согласование1ТочкиМаршрута.действие5))
	              |
	              |ОБЪЕДИНИТЬ ВСЕ
	              |
	              |ВЫБРАТЬ
	              |	""Остаток на начало"",
	              |	NULL,
	              |	Заявки.ПодразделениеЦФО,
	              |	0,
	              |	Заявки.Источник,
	              |	""0"",
	              |	0,
	              |	ЛОЖЬ,
	              |	0,
	              |	0,
	              |	0,
	              |	0,
	              |	Заявки.Предприятие,
	              |	1 + 1 + 1,
	              |	Заявки.Организация,
	              |	Заявки.СтатьяДДС.Наименование,
	              |	""#ПеременноеПоле6""
	              |ИЗ
	              |	Заявки КАК Заявки
	              |ГДЕ
	              |	(Заявки.ТочкаМаршрута = ЗНАЧЕНИЕ(Перечисление.Согласование1ТочкиМаршрута.Завершение)
	              |			ИЛИ Заявки.ТочкаМаршрута = ЗНАЧЕНИЕ(Перечисление.Согласование1ТочкиМаршрута.Действие5))
	              |	И &КорректировкаОстатковПоНеоплаченнымЗаявкам = ИСТИНА
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	ЕСТЬNULL(ЕСТЬNULL(ПлатежноеПоручение.СуммаДокумента, УЧ_ДвижениеДС.СуммаДокумента), 0) КАК СуммаДокумента,
	              |	Заявки.Источник КАК Источник,
	              |	Заявки.СтатьяДДС КАК СтатьяДДС
	              |ПОМЕСТИТЬ ПодчиненныеДоки
	              |ИЗ
	              |	Заявки КАК Заявки
	              |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	              |		ПО Заявки.УИДСтрокиДокумента = ПлатежноеПоручение.УИДСтроки
	              |			И (ПлатежноеПоручение.ПометкаУдаления = ЛОЖЬ)
	              |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_ДвижениеДС КАК УЧ_ДвижениеДС
	              |		ПО Заявки.УИДСтрокиДокумента = УЧ_ДвижениеДС.ГУИДОснования
	              |			И (УЧ_ДвижениеДС.ПометкаУдаления = ЛОЖЬ)
	              |ГДЕ
	              |	НЕ Заявки.УИДСтрокиДокумента = """"
	              |	И НЕ ЕСТЬNULL(ЕСТЬNULL(ПлатежноеПоручение.СуммаДокумента, УЧ_ДвижениеДС.СуммаДокумента), 0) = 0
	              |
	              |СГРУППИРОВАТЬ ПО
	              |	Заявки.Источник,
	              |	Заявки.СтатьяДДС,
	              |	ЕСТЬNULL(ЕСТЬNULL(ПлатежноеПоручение.СуммаДокумента, УЧ_ДвижениеДС.СуммаДокумента), 0)
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	ВЫБОР
	              |		КОГДА &СворачиватьПоСтатьямДДС
	              |				И НЕ ТИПЗНАЧЕНИЯ(Общее.СтатьяДДС) = ТИП(СТРОКА)
	              |			ТОГДА ВЫБОР
	              |					КОГДА ЕСТЬNULL(Общее.СтатьяДоход, ЛОЖЬ) = ИСТИНА
	              |						ТОГДА ""Поступление""
	              |					ИНАЧЕ ""Оплата""
	              |				КОНЕЦ
	              |		ИНАЧЕ Общее.СтатьяДДС
	              |	КОНЕЦ КАК СтатьяДДС,
	              |	СУММА(Общее.Просрочено) КАК Просрочено,
	              |	ВЫБОР
	              |		КОГДА &ПоОбъектам = ""Объекты""
	              |			ТОГДА Общее.ПодразделениеЦФО
	              |		ИНАЧЕ Общее.Источник
	              |	КОНЕЦ КАК Источник,
	              |	ВЫБОР
	              |		КОГДА &СворачиватьПоСтатьямДДС
	              |			ТОГДА ВЫБОР
	              |					КОГДА ЕСТЬNULL(Общее.СтатьяДоход, ЛОЖЬ) = ИСТИНА
	              |						ТОГДА 100
	              |					ИНАЧЕ 200
	              |				КОНЕЦ
	              |		ИНАЧЕ Общее.СтатьяДДСКод
	              |	КОНЕЦ КАК СтатьяДДСКод,
	              |	СУММА(Общее.День0) КАК День0,
	              |	ЕСТЬNULL(Общее.СтатьяДоход, ЛОЖЬ) КАК СтатьяДоход,
	              |	Общее.Порядок КАК Порядок,
	              |	НЕОПРЕДЕЛЕНО КАК ЦФО,
	              |	ВЫБОР
	              |		КОГДА &ПоОбъектам = ""Источники""
	              |				И ТИПЗНАЧЕНИЯ(Общее.Источник) = ТИП(Справочник.БанковскиеСчета)
	              |			ТОГДА Общее.Организация
	              |		КОГДА &ПоОбъектам = ""Объекты""
	              |			ТОГДА НЕОПРЕДЕЛЕНО
	              |		ИНАЧЕ ВЫБОР
	              |				КОГДА Общее.Источник = ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)
	              |					ТОГДА НЕОПРЕДЕЛЕНО
	              |				ИНАЧЕ Общее.Предприятие
	              |			КОНЕЦ
	              |	КОНЕЦ КАК Предприятие,
	              |	ВЫБОР
	              |		КОГДА ЕСТЬNULL(Общее.СтатьяДоход, ЛОЖЬ) = ИСТИНА
	              |			ТОГДА 28
	              |		ИНАЧЕ 29
	              |	КОНЕЦ КАК НомерКартинки,
	              |	СУММА(Общее.ОстатокНаНачало) КАК ОстатокНаНачало,
	              |	СУММА(Общее.БудущиеПлатежи) КАК БудущиеПлатежи,
	              |	СУММА(Общее.ПлатежиПоРеестрам) КАК ПлатежиПоРеестрам,
	              |	СУММА(Общее.ОстатокНаНачалоРабочий) КАК ОстатокНаНачалоРабочий,
	              |	ВЫБОР
	              |		КОГДА &ПоОбъектам = ""Источники""
	              |				И ТИПЗНАЧЕНИЯ(Общее.Источник) = ТИП(Справочник.БанковскиеСчета)
	              |			ТОГДА 1
	              |		ИНАЧЕ 0
	              |	КОНЕЦ КАК ПорядокПредприятий,
	              |	Общее.СтатьяДДСНаименование КАК СтатьяДДСНаименование,
	              |	МАКСИМУМ(Д_ИсточникППСрезПоследних.ОтветственноеЛицо) КАК ОтветственноеЛицо,
	              |	МАКСИМУМ(Д_ИсточникППСрезПоследних.ДатаПоследнегоДокумента) КАК ДатаПоследнегоДокумента,
	              |	""#ПеременноеПоле8"" КАК ПеременноеПоле
	              |ИЗ
	              |	Общее КАК Общее
	              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Д_ИсточникПП.СрезПоследних КАК Д_ИсточникППСрезПоследних
	              |		ПО Общее.Источник = Д_ИсточникППСрезПоследних.БанковскиеСчета
	              |ГДЕ
	              |	Общее.Предприятие В ИЕРАРХИИ(&ОтборПредприятия)
	              |	И (Общее.Организация В (&ОтборОрганизации)
	              |			ИЛИ Общее.Источник В (&ОтборОрганизации)
	              |			ИЛИ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) В (&ОтборОрганизации))
	              |
	              |СГРУППИРОВАТЬ ПО
	              |	Общее.Порядок,
	              |	ЕСТЬNULL(Общее.СтатьяДоход, ЛОЖЬ),
	              |	ВЫБОР
	              |		КОГДА ЕСТЬNULL(Общее.СтатьяДоход, ЛОЖЬ) = ИСТИНА
	              |			ТОГДА 28
	              |		ИНАЧЕ 29
	              |	КОНЕЦ,
	              |	ВЫБОР
	              |		КОГДА &СворачиватьПоСтатьямДДС
	              |			ТОГДА ВЫБОР
	              |					КОГДА ЕСТЬNULL(Общее.СтатьяДоход, ЛОЖЬ) = ИСТИНА
	              |						ТОГДА 100
	              |					ИНАЧЕ 200
	              |				КОНЕЦ
	              |		ИНАЧЕ Общее.СтатьяДДСКод
	              |	КОНЕЦ,
	              |	ВЫБОР
	              |		КОГДА &СворачиватьПоСтатьямДДС
	              |				И НЕ ТИПЗНАЧЕНИЯ(Общее.СтатьяДДС) = ТИП(СТРОКА)
	              |			ТОГДА ВЫБОР
	              |					КОГДА ЕСТЬNULL(Общее.СтатьяДоход, ЛОЖЬ) = ИСТИНА
	              |						ТОГДА ""Поступление""
	              |					ИНАЧЕ ""Оплата""
	              |				КОНЕЦ
	              |		ИНАЧЕ Общее.СтатьяДДС
	              |	КОНЕЦ,
	              |	ВЫБОР
	              |		КОГДА &ПоОбъектам = ""Объекты""
	              |			ТОГДА Общее.ПодразделениеЦФО
	              |		ИНАЧЕ Общее.Источник
	              |	КОНЕЦ,
	              |	ВЫБОР
	              |		КОГДА &ПоОбъектам = ""Источники""
	              |				И ТИПЗНАЧЕНИЯ(Общее.Источник) = ТИП(Справочник.БанковскиеСчета)
	              |			ТОГДА 1
	              |		ИНАЧЕ 0
	              |	КОНЕЦ,
	              |	ВЫБОР
	              |		КОГДА &ПоОбъектам = ""Источники""
	              |				И ТИПЗНАЧЕНИЯ(Общее.Источник) = ТИП(Справочник.БанковскиеСчета)
	              |			ТОГДА Общее.Организация
	              |		КОГДА &ПоОбъектам = ""Объекты""
	              |			ТОГДА НЕОПРЕДЕЛЕНО
	              |		ИНАЧЕ ВЫБОР
	              |				КОГДА Общее.Источник = ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)
	              |					ТОГДА НЕОПРЕДЕЛЕНО
	              |				ИНАЧЕ Общее.Предприятие
	              |			КОНЕЦ
	              |	КОНЕЦ,
	              |	Общее.СтатьяДДСНаименование
	              |
	              |УПОРЯДОЧИТЬ ПО
	              |	ПорядокПредприятий,
	              |	Предприятие,
	              |	Источник,
	              |	СтатьяДДСНаименование,
	              |	Порядок";

	ДниДоСрока = 0;
	РабочийДень = Ложь;
	ДатаНачала = НачалоДня(ТекущаяДата());
	СоотвПараметров = Новый Соответствие;
	Индекс = 0;
	Текст1 = "";
	Текст2 = "";
	Текст3 = "";
	Текст4 = "";
	Текст5 = "";
	Текст6 = "";
	Текст7 = "";
	Текст8 = "";
	Текст51 = "Выбор Когда Заявки.СтатьяДДСДоход Тогда Заявки.День0 Иначе -Заявки.День0 Конец";
	
	ДнейПланирования = ЧислоРабочихДнейВПериоде(ТекущаяДата(), ТекущаяДата() + Объект.ГоризонтПланирования*60*60*24);
	Если Объект.УчитыватьВыходные ИЛИ Не ДнейПланирования Тогда
		ДнейПланирования = Объект.ГоризонтПланирования;	
	КонецЕсли;
	
	Пока НЕ РабочийДень = Истина ИЛИ Индекс < ДнейПланирования Цикл
						
		ГодКалендаря = Год(ДатаНачала);		
		Календарь = Справочники.Календари.НайтиПоНаименованию("Российская Федерация", Истина);
		РабочийДень = БПСервер.ПолучитьПризнакРабочегоДня(Календарь,ГодКалендаря,НачалоДня(ДатаНачала + ДниДоСрока * 24 * 60 * 60));
		Если РабочийДень = Неопределено Тогда
			РабочийДень = Истина;
		КонецЕсли;
		РабочийДень = МАКС(РабочийДень, Объект.УчитыватьВыходные);
		Если НЕ РабочийДень Тогда
			ДниДоСрока = ДниДоСрока + 1;
			Продолжить;	
		КонецЕсли;
		//СоотвПараметров.Вставить("Дата" + Строка(ДниДоСрока) + "День", НачалоДня(ТекущаяДата() + (ДниДоСрока + 1)*24*60*60));
		
		//ПараметрПериод = Отбор.Настройки.ПараметрыДанных.Элементы.Добавить(); 
		//ПараметрПериод.Имя = "Дата" + Строка(Индекс) + "День";
		//ПараметрПериод.Заголовок = "Дата" + Строка(Индекс) + "День";
		//ПараметрПериод.ТипЗначения = Новый ОписаниеТипов("Дата");
		//ПараметрПериод.ОграничениеИспользования = Истина;
		//ПараметрПериод.ВключатьВДоступныеПоля = Ложь;
		УстановитьЗначениеПараметраНастроек(Отбор.Настройки, "Дата" + Строка(Индекс) + "День", НачалоДня(ТекущаяДата() + ДниДоСрока*24*60*60));
		
		Если Индекс > 0 Тогда
			
			//добавляем элементы на форму
			Если РежимРаботыПК = "Календарь" Тогда
				Колонка3 = ПолучитьКолонку(Элементы, "ДанныеДень" + Строка(Индекс), Тип("ПолеФормы"), Элементы.Данные, Элементы.ДанныеСлужебноеКонец, "Данные.День" + Строка(Индекс));
				Колонка3.Ширина = 12;
				Колонка4 = ПолучитьКолонку(Элементы, "ДанныеДеревоДень" + Строка(Индекс), Тип("ПолеФормы"), Элементы.ДанныеДерево, Элементы.ДанныеДеревоСлужебноеКонец, "ДанныеДерево.День" + Строка(Индекс));
				Колонка4.Ширина = 12;
			КонецЕсли;
			
			//собираем запрос
			Текст1 = Текст1 + "
			|	ВЫБОР
			|		КОГДА НАЧАЛОПЕРИОДА(Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка.ДатаОплаты, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата" + Строка(Индекс) + "День, ДЕНЬ)
			|			ТОГДА Д_ЗаявкаНаОплатуЗаявкаБезнал.СуммаДДС * ЕСТЬNULL(Б_ПлановыеКурсыВалютСрезПоследних.Курс, 1)
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК День" + Строка(Индекс) + ",";
			
			Текст2 = Текст2 + "
			|	ВЫБОР
			|		КОГДА НАЧАЛОПЕРИОДА(сабГрафикПлатежей.ДатаПлатежа, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата" + Строка(Индекс) + "День, ДЕНЬ)
			|			ТОГДА сабГрафикПлатежей.Сумма * ЕСТЬNULL(Б_ПлановыеКурсыВалютСрезПоследних.Курс, 1)
			|		ИНАЧЕ 0
			|	КОНЕЦ,";
			
			Текст3 = Текст3 + "
			|	ВЫБОР
			|		КОГДА НАЧАЛОПЕРИОДА(Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка.ДатаОплаты, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата" + Строка(Индекс) + "День, ДЕНЬ)
			|			ТОГДА Д_ЗаявкаНаОплатуЗаявкаБезнал.СуммаДДС * ЕСТЬNULL(Б_ПлановыеКурсыВалютСрезПоследних.Курс, 1)
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК День" + Строка(Индекс) + ",";
			
			Текст4 = Текст4 + "
			|	ВЫБОР
			|		КОГДА НАЧАЛОПЕРИОДА(сабГрафикПлатежей.ДатаПлатежа, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата" + Строка(Индекс) + "День, ДЕНЬ)
			|			ТОГДА сабГрафикПлатежей.Сумма * ЕСТЬNULL(Б_ПлановыеКурсыВалютСрезПоследних.Курс, 1)
			|		ИНАЧЕ 0
			|	КОНЕЦ,";
			
			Текст5 = Текст5 + "
			|	Заявки.День" + Строка(Индекс) + " КАК День" + Строка(Индекс) + ",";
			
			Текст51 = Текст51 + " - Выбор Когда Заявки.СтатьяДДСДоход Тогда -Заявки.День" + Строка(Индекс) + " Иначе Заявки.День" + Строка(Индекс) + " Конец";
			
			Текст6 = Текст6 + "
			|	0,";
			
			Текст7 = Текст7 + "
			|	ДоходыВНХ.День" + Строка(Индекс) + ",";
			
			Текст8 = Текст8 + "
			|	СУММА(Общее.День" + Строка(Индекс) + ") КАК День" + Строка(Индекс) + ",";	//собрали

		КонецЕсли;
		
		Если РежимРаботыПК = "Календарь" Тогда
			Элементы["ДанныеДень" + Строка(Индекс)].Заголовок = Формат(НачалоДня(ТекущаяДата() + ДниДоСрока*24*60*60), "ДФ=dd.MM.yyyy");
			Элементы["ДанныеДеревоДень" + Строка(Индекс)].Заголовок = Формат(НачалоДня(ТекущаяДата() + ДниДоСрока*24*60*60), "ДФ=dd.MM.yyyy");
		КонецЕсли;
		
		ВыбранноеПоле = Отбор.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Заголовок     = "День" + Строка(Индекс);
		ВыбранноеПоле.Использование = Истина; 
		ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("День" + Строка(Индекс));		
		
		ДниДоСрока = ДниДоСрока + 1;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	СрокВыполнения = ДатаНачала + ДниДоСрока * 24*60*60;  
		
	Если ЗначениеЗаполнено(Текст1) Тогда
		
		Текст1 = ЛЕВ(Текст1, СтрДлина(Текст1) - 1);
		Текст2 = ЛЕВ(Текст2, СтрДлина(Текст2) - 1);
		Текст3 = ЛЕВ(Текст3, СтрДлина(Текст3) - 1);
		Текст4 = ЛЕВ(Текст4, СтрДлина(Текст4) - 1);
		Текст5 = ЛЕВ(Текст5, СтрДлина(Текст5) - 1);
		Текст6 = ЛЕВ(Текст6, СтрДлина(Текст6) - 1);
		Текст7 = ЛЕВ(Текст7, СтрДлина(Текст7) - 1);
		Текст8 = ЛЕВ(Текст8, СтрДлина(Текст8) - 1);
		Текст51 = Текст51;
		
		ЗапросТекст = СтрЗаменить(ЗапросТекст, """#ПеременноеПоле1"" КАК ПеременноеПоле", Текст1);
		ЗапросТекст = СтрЗаменить(ЗапросТекст, """#ПеременноеПоле2""", Текст2);
		ЗапросТекст = СтрЗаменить(ЗапросТекст, """#ПеременноеПоле3"" КАК ПеременноеПоле", Текст3);
		ЗапросТекст = СтрЗаменить(ЗапросТекст, """#ПеременноеПоле4""", Текст4);
		ЗапросТекст = СтрЗаменить(ЗапросТекст, """#ПеременноеПоле5"" КАК ПеременноеПоле", Текст5);
		ЗапросТекст = СтрЗаменить(ЗапросТекст, "1 + 1 + 1", Текст51);
		ЗапросТекст = СтрЗаменить(ЗапросТекст, """#ПеременноеПоле6""", Текст6);
		ЗапросТекст = СтрЗаменить(ЗапросТекст, """#ПеременноеПоле7""", Текст7);
		//ЗапросТекст = Лев(ЗапросТекст, СтрНайти(ЗапросТекст, """#ПеременноеПоле8"" КАК ПеременноеПоле") + 36);
		ЗапросТекст = СтрЗаменить(ЗапросТекст, """#ПеременноеПоле8"" КАК ПеременноеПоле", Текст8);
	
	КонецЕсли;
		
	СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Запрос = ЗапросТекст;
	
	АктуальныйСценарий = БюджетныйНаСервере.ПолучитьАктуальныйСценарий(ТекущаяДата(), Ложь);
	УстановитьЗначениеПараметраНастроек(Отбор.Настройки, "ДатаНачала", Дата("20171201"));
	УстановитьЗначениеПараметраНастроек(Отбор.Настройки, "ДатаНачалаДня", НачалоДня(ТекущаяДата()));
	УстановитьЗначениеПараметраНастроек(Отбор.Настройки, "ОтборПредприятия", ОтборПредприятия.ВыгрузитьЗначения());
	УстановитьЗначениеПараметраНастроек(Отбор.Настройки, "ОтборОрганизации", ОтборОрганизации.ВыгрузитьЗначения());
	УстановитьЗначениеПараметраНастроек(Отбор.Настройки, "ТочкиНаСогласовании", ОтборТочкиСогласования.ВыгрузитьЗначения());
	УстановитьЗначениеПараметраНастроек(Отбор.Настройки, "ТочкиКОплате", ОтборТочкиОплаты.ВыгрузитьЗначения());
	УстановитьЗначениеПараметраНастроек(Отбор.Настройки, "ОтборТочкиЗаявок", ОтборТочкиЗаявок);
	УстановитьЗначениеПараметраНастроек(Отбор.Настройки, "ИспользоватьПлатежку", Объект.ОстаткиПоПлатежке);
	УстановитьЗначениеПараметраНастроек(Отбор.Настройки, "СворачиватьПоСтатьямДДС", Объект.СворачиватьСтатьиДДС);
	//УстановитьЗначениеПараметраНастроек(Отбор.Настройки, "РежимРаботы", Объект.РежимРаботы);
	УстановитьЗначениеПараметраНастроек(Отбор.Настройки, "ПоОбъектам", ВариантГруппировкиПК);
	УстановитьЗначениеПараметраНастроек(Отбор.Настройки, "КорректировкаОстатковПоНеоплаченнымЗаявкам", КорректировкаОстатковПоНеоплаченнымЗаявкам);
	УстановитьЗначениеПараметраНастроек(Отбор.Настройки, "ЭквивалентнаяВалюта", ?(ЗначениеЗаполнено(Объект.ЭквивалентнаяВалюта), Объект.ЭквивалентнаяВалюта, УЧ_Сервер.НациональнаяВалюта()));
	УстановитьЗначениеПараметраНастроек(Отбор.Настройки, "АктуальныйСценарий", АктуальныйСценарий);
	УстановитьЗначениеПараметраНастроек(Отбор.Настройки, "ПоказыватьГрафикПоБюджету", Объект.ПоказыватьГрафикПоБюджету);
	УстановитьЗначениеПараметраНастроек(Отбор.Настройки, "СчетКазна", ПланыСчетов.Учетный.НайтиПоКоду("55.01"));
	УстановитьЗначениеПараметраНастроек(Отбор.Настройки, "РасходныеОперации", ПП_Сервер.ЭтоРасходнаяОперация());
	
	Счета51 = Новый Массив;
	Счета51.Добавить(ПланыСчетов.Учетный.НайтиПоКоду("51"));
	Счета51БУ = Новый Массив;
	Счета51БУ.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("51"));
	Счета51БУ.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("52"));
	Счета50 = Новый Массив;
	Счета50.Добавить(ПланыСчетов.Учетный.НайтиПоКоду("50"));
	Счета50БУ = Новый Массив;
	Счета50БУ.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("50"));
	
	ПерваяКасса = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Кассы.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Кассы КАК Кассы
	               |ГДЕ
	               |	НЕ Кассы.ВидИсточника = ЗНАЧЕНИЕ(Перечисление.ГД_ВидыИсточников.КассаУчет)";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ПерваяКасса = Выборка.Ссылка;	
	КонецЦикла;
	
	УстановитьЗначениеПараметраНастроек(Отбор.Настройки, "Счет50", Счета50);
	УстановитьЗначениеПараметраНастроек(Отбор.Настройки, "Счет51", Счета51);
	УстановитьЗначениеПараметраНастроек(Отбор.Настройки, "Счет50БУ", Счета50БУ);
	УстановитьЗначениеПараметраНастроек(Отбор.Настройки, "Счет51БУ", Счета51БУ);
	УстановитьЗначениеПараметраНастроек(Отбор.Настройки, "ПерваяКасса", ПерваяКасса);
	//Для каждого ИмяКолонки из Отбор.Настройки.Выбор.ДоступныеПоляВыбора.Элементы цикл
	//	
	//	Если ИмяКолонки.Поле = Новый ПолеКомпоновкиДанных("СистемныеПоля") ИЛИ ИмяКолонки.Поле = Новый ПолеКомпоновкиДанных("ПараметрыДанных") Тогда
	//		Продолжить;		
	//	КонецЕсли;
	//	
	//	ВыбранноеПоле = Отбор.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	//	ВыбранноеПоле.Заголовок     = ИмяКолонки.Заголовок;
	//	ВыбранноеПоле.Использование = Истина; 
	//	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных(ИмяКолонки.Поле);
	//	
	//КонецЦикла;

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Отбор.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	Возврат Новый Структура("ТаблицаНачальногоЗаполнения, ТекущийИндекс, КоличествоДнейПланирования", ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных), Индекс, ДнейПланирования);

КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуДанныхПКНаФорме(ЗаполняемаяТаблица, РезультатВыборка, Индекс, ДнейПланирования, ВариантГруппировкиПК, РежимРаботыПК, КорректировкаОстатковПоНеоплаченнымЗаявкам)
	
	КоличествоСтрокДо = ЗаполняемаяТаблица.Количество() - 1;

	ИндексСтроки = 0;
	
	Если ИндексСтроки > КоличествоСтрокДо Тогда
		НоваяСтрока = ЗаполняемаяТаблица.Вставить(ИндексСтроки);	
	Иначе	
		НоваяСтрока = ЗаполняемаяТаблица[ИндексСтроки];
	КонецЕсли;
	
	НоваяСтрока.СтатьяДДС = "Остаток на начало итого";
	
	ТекИсточник = Неопределено;
	ТекПредприятие = Неопределено;
	ИндексСтрокиОстатковНаНачало = 0;
	
	ТекСумма = Новый Массив;
	ТекСуммаПоРеестрам = 0;
	ТекОстатокКонец = Новый Массив;
	ТекОстатокПоРеестрамКонец = 0;
	ДенежныйПотокИтого = Новый Массив;
	
	ДнейПланирования = ДнейПланирования - 1;
	
	Для т = 0 По ДнейПланирования Цикл
		ТекСумма.Добавить(0);
		ТекОстатокКонец.Добавить(0);
		ДенежныйПотокИтого.Добавить(0);
		ЗаполняемаяТаблица[0]["День" + Строка(т)] = 0;
	КонецЦикла;
	
	Для Каждого Выборка Из РезультатВыборка Цикл
		
		Для т = 0 По ДнейПланирования Цикл
			ТекСумма[т] = ?(Выборка.СтатьяДоход ИЛИ Выборка.СтатьяДДС = "Доход ВНХ" ИЛИ Выборка.СтатьяДДС = "Поступления ВНХ" ИЛИ Выборка.СтатьяДДС = "Поступления" ИЛИ Выборка.СтатьяДДС = "Доходы", -Выборка["День" + Строка(т)], Выборка["День" + Строка(т)]);
		КонецЦикла;
		
		ТекСуммаПоРеестрам = ?(Выборка.СтатьяДоход ИЛИ Выборка.СтатьяДДС = "Доход ВНХ" ИЛИ Выборка.СтатьяДДС = "Поступления ВНХ" ИЛИ Выборка.СтатьяДДС = "Поступления" ИЛИ Выборка.СтатьяДДС = "Доходы", -Выборка["ПлатежиПоРеестрам"], Выборка["ПлатежиПоРеестрам"]);
		
		Если ТекИсточник = Неопределено Тогда
			ТекИсточник = Выборка.Источник;
			ТекПредприятие = Выборка.Предприятие;
			Для т = 0 По ДнейПланирования Цикл
				ТекОстатокКонец[т] = ТекСумма[т];
				ЗаполняемаяТаблица[0]["День" + Строка(т)] = ЗаполняемаяТаблица[0]["День" + Строка(т)] + ТекСумма[т];
				ЗаполняемаяТаблица[0]["БудущиеПлатежи"] = 0;
				ЗаполняемаяТаблица[0]["ПлатежиПоРеестрам"] = 0;
			КонецЦикла;
		ИначеЕсли НЕ ТекИсточник = Выборка.Источник ИЛИ НЕ ТекПредприятие = Выборка.Предприятие Тогда
			ИндексСтроки = ИндексСтроки + 1;
			Если ИндексСтроки > КоличествоСтрокДо Тогда
				НоваяСтрока = ЗаполняемаяТаблица.Вставить(ИндексСтроки);	
			Иначе	
				НоваяСтрока = ЗаполняемаяТаблица[ИндексСтроки];
			КонецЕсли;
			НоваяСтрока.Источник = ТекИсточник;
			НоваяСтрока.ДатаПоследнегоДокумента = ЗаполняемаяТаблица[ИндексСтрокиОстатковНаНачало].ДатаПоследнегоДокумента;
			НоваяСтрока.СтатьяДДС = "Остаток на конец";
			НоваяСтрока.ЦФО = ЗаполняемаяТаблица[ИндексСтрокиОстатковНаНачало].ЦФО;
			НоваяСтрока.Предприятие = ЗаполняемаяТаблица[ИндексСтрокиОстатковНаНачало].Предприятие;
			
			НоваяСтрока["БудущиеПлатежи"] = 0;
			
			Для т = 0 По ДнейПланирования Цикл
				Если т > 0 Тогда
					ЗаполняемаяТаблица[ИндексСтрокиОстатковНаНачало]["День" + Строка(т)] = ?(ВариантГруппировкиПК = "Объекты", 0, ТекОстатокКонец[т-1]);
					ТекОстатокКонец[т] = ?(ВариантГруппировкиПК = "Объекты", 0, ТекОстатокКонец[т]) + ЗаполняемаяТаблица[ИндексСтрокиОстатковНаНачало]["День" + Строка(т)];
				КонецЕсли;
				Если РежимРаботыПК = "Календарь" Тогда
					НоваяСтрока["День" + Строка(т)] = ТекОстатокКонец[т];
				Иначе
					НоваяСтрока["День" + Строка(т)] = -(ТекОстатокКонец[т] - ЗаполняемаяТаблица[ИндексСтрокиОстатковНаНачало]["День" + Строка(т)]);
				КонецЕсли;
			КонецЦикла;

			Для т = 0 По ДнейПланирования Цикл
				//НоваяСтрока["День" + Строка(т)] = ТекОстатокКонец[т];
				ТекОстатокКонец[т] = ТекСумма[т];
				ЗаполняемаяТаблица[0]["День" + Строка(т)] = ЗаполняемаяТаблица[0]["День" + Строка(т)] + ТекСумма[т];
			КонецЦикла;
			
			ТекИсточник = Выборка.Источник;
			ТекПредприятие = Выборка.Предприятие;
			
			ЗаполняемаяТаблица[0].ПлатежиПоРеестрам = ЗаполняемаяТаблица[0].ПлатежиПоРеестрам + ТекОстатокПоРеестрамКонец;
			НоваяСтрока.ПлатежиПоРеестрам = ТекОстатокПоРеестрамКонец;
			
			ЗаполняемаяТаблица[0].ОстатокНаНачало = ЗаполняемаяТаблица[0]["День0"];
			НоваяСтрока.ОстатокНаНачало = ЗаполняемаяТаблица[ИндексСтрокиОстатковНаНачало]["День0"];
			
			ЗаполняемаяТаблица[0].ОстатокНаНачалоРабочий = ЗаполняемаяТаблица[0].ОстатокНаНачало + ЗаполняемаяТаблица[0].ПлатежиПоРеестрам;
			НоваяСтрока.ОстатокНаНачалоРабочий = НоваяСтрока.ОстатокНаНачало + ТекОстатокПоРеестрамКонец;
			
			ЗаполняемаяТаблица[0].ОстатокНаКонец = ЗаполняемаяТаблица[0]["День1"]  + ?(КорректировкаОстатковПоНеоплаченнымЗаявкам, ЗаполняемаяТаблица[0].ПлатежиПоРеестрам, 0);
			НоваяСтрока.ОстатокНаКонец = ЗаполняемаяТаблица[ИндексСтрокиОстатковНаНачало]["День1"] + ?(КорректировкаОстатковПоНеоплаченнымЗаявкам, ТекОстатокПоРеестрамКонец, 0);
			
			ТекОстатокПоРеестрамКонец = 0;

		Иначе
			Для т = 0 По ДнейПланирования Цикл
				ТекОстатокКонец[т] = ТекОстатокКонец[т] - ТекСумма[т];
				ДенежныйПотокИтого[т] = ДенежныйПотокИтого[т] - ТекСумма[т];
			КонецЦикла;
			ТекОстатокПоРеестрамКонец = ТекОстатокПоРеестрамКонец - ТекСуммаПоРеестрам;
		КонецЕсли;
		ИндексСтроки = ИндексСтроки + 1;
		Если ИндексСтроки > КоличествоСтрокДо Тогда
			НоваяСтрока = ЗаполняемаяТаблица.Вставить(ИндексСтроки);	
		Иначе	
			НоваяСтрока = ЗаполняемаяТаблица[ИндексСтроки];
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ОстатокНаКонец = 0;
		
		Если Выборка.СтатьяДДС = "Остаток на начало" Тогда
			ИндексСтрокиОстатковНаНачало = ЗаполняемаяТаблица.Индекс(НоваяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Если РезультатВыборка.Количество() Тогда
		ИндексСтроки = ИндексСтроки + 1;
		Если ИндексСтроки > КоличествоСтрокДо Тогда
			НоваяСтрока = ЗаполняемаяТаблица.Вставить(ИндексСтроки);	
		Иначе	
			НоваяСтрока = ЗаполняемаяТаблица[ИндексСтроки];
		КонецЕсли;
		НоваяСтрока.Источник = ТекИсточник;
		НоваяСтрока.ДатаПоследнегоДокумента = ЗаполняемаяТаблица[ИндексСтрокиОстатковНаНачало].ДатаПоследнегоДокумента;
		НоваяСтрока.СтатьяДДС = "Остаток на конец";
		НоваяСтрока.ЦФО = ЗаполняемаяТаблица[ИндексСтрокиОстатковНаНачало].ЦФО;
		НоваяСтрока.Предприятие = ЗаполняемаяТаблица[ИндексСтрокиОстатковНаНачало].Предприятие;
		
		НоваяСтрока["БудущиеПлатежи"] = 0;
		
		Для т = 0 По ДнейПланирования Цикл
			Если т > 0 Тогда
				ЗаполняемаяТаблица[ИндексСтрокиОстатковНаНачало]["День" + Строка(т)] = ?(ВариантГруппировкиПК = "Объекты", 0, ТекОстатокКонец[т-1]);
				ТекОстатокКонец[т] = ?(ВариантГруппировкиПК = "Объекты", 0, ТекОстатокКонец[т]) + ЗаполняемаяТаблица[ИндексСтрокиОстатковНаНачало]["День" + Строка(т)];
			КонецЕсли;
			Если РежимРаботыПК = "Календарь" Тогда
				НоваяСтрока["День" + Строка(т)] = ТекОстатокКонец[т];
			Иначе
				НоваяСтрока["День" + Строка(т)] = -(ТекОстатокКонец[т] - ЗаполняемаяТаблица[ИндексСтрокиОстатковНаНачало]["День" + Строка(т)]);
			КонецЕсли;
		КонецЦикла;
		
		Для т = 0 По ДнейПланирования Цикл
			//НоваяСтрока["День" + Строка(т)] = ТекОстатокКонец[т];
			ТекОстатокКонец[т] = ТекСумма[т];
			//ЗаполняемаяТаблица[0]["День" + Строка(т)] = ЗаполняемаяТаблица[0]["День" + Строка(т)] + ТекСумма[т];
		КонецЦикла;
		
		//ТекИсточник = Выборка.Источник;
		
		ЗаполняемаяТаблица[0].ПлатежиПоРеестрам = ЗаполняемаяТаблица[0].ПлатежиПоРеестрам + ТекОстатокПоРеестрамКонец;
		НоваяСтрока.ПлатежиПоРеестрам = ТекОстатокПоРеестрамКонец;
		
		ЗаполняемаяТаблица[0].ОстатокНаНачало = ЗаполняемаяТаблица[0]["День0"];
		НоваяСтрока.ОстатокНаНачало = ЗаполняемаяТаблица[ИндексСтрокиОстатковНаНачало]["День0"];
		
		ЗаполняемаяТаблица[0].ОстатокНаНачалоРабочий = ЗаполняемаяТаблица[0].ОстатокНаНачало + ЗаполняемаяТаблица[0].ПлатежиПоРеестрам;
		НоваяСтрока.ОстатокНаНачалоРабочий = НоваяСтрока.ОстатокНаНачало + ТекОстатокПоРеестрамКонец;
		
		ЗаполняемаяТаблица[0].ОстатокНаКонец = ЗаполняемаяТаблица[0]["День1"]  + ?(КорректировкаОстатковПоНеоплаченнымЗаявкам, ЗаполняемаяТаблица[0].ПлатежиПоРеестрам, 0);
		НоваяСтрока.ОстатокНаКонец = ЗаполняемаяТаблица[ИндексСтрокиОстатковНаНачало]["День1"] + ?(КорректировкаОстатковПоНеоплаченнымЗаявкам, ТекОстатокПоРеестрамКонец, 0);
		
		ТекОстатокПоРеестрамКонец = 0;
		
		
	КонецЕсли;
	
	Если РежимРаботыПК = "Календарь" Тогда
		ИндексСтроки = ИндексСтроки + 1;
		Если ИндексСтроки > КоличествоСтрокДо Тогда
			НоваяСтрока = ЗаполняемаяТаблица.Вставить(ИндексСтроки);	
		Иначе	
			НоваяСтрока = ЗаполняемаяТаблица[ИндексСтроки];
		КонецЕсли;
		НоваяСтрока.СтатьяДДС = "Денежный поток итого";
		Для т = 0 По ДнейПланирования Цикл
			НоваяСтрока["День" + Строка(т)] = ДенежныйПотокИтого[т];
		КонецЦикла;
		
		ИндексСтроки = ИндексСтроки + 1;
		Если ИндексСтроки > КоличествоСтрокДо Тогда
			НоваяСтрока = ЗаполняемаяТаблица.Вставить(ИндексСтроки);	
		Иначе	
			НоваяСтрока = ЗаполняемаяТаблица[ИндексСтроки];
		КонецЕсли;
		НоваяСтрока.СтатьяДДС = "Остаток на конец итого";
	КонецЕсли;	
	Для т = 0 По ДнейПланирования Цикл
		Если т > 0 Тогда
			ЗаполняемаяТаблица[0]["День" + Строка(т)] = НоваяСтрока["День" + Строка(т-1)];
		ИначеЕсли НЕ РежимРаботыПК = "Календарь" Тогда
			ЗаполняемаяТаблица[0]["День" + Строка(т)] = - ДенежныйПотокИтого[т];
		КонецЕсли;
		Если РежимРаботыПК = "Календарь" Тогда
			НоваяСтрока["День" + Строка(т)] = ЗаполняемаяТаблица[0]["День" + Строка(т)] + ДенежныйПотокИтого[т];
		КонецЕсли;
	КонецЦикла;
	
	ЗаполняемаяТаблица[0].ОстатокНаКонец = ЗаполняемаяТаблица[0]["ОстатокНаНачалоРабочий"] - ЗаполняемаяТаблица[0]["День0"];
	
	МассивСтрокКУдалению = Новый Массив;
	Если КоличествоСтрокДо > ИндексСтроки Тогда
		Для ТекСтрокаИндекс = ИндексСтроки + 1 По КоличествоСтрокДо Цикл
			МассивСтрокКУдалению.Добавить(ЗаполняемаяТаблица[ТекСтрокаИндекс]);
		КонецЦикла;
	КонецЕсли;
	
	Для каждого ТекСтрока Из МассивСтрокКУдалению Цикл
		ЗаполняемаяТаблица.Удалить(ТекСтрока);	
	КонецЦикла;
	
	Если Индекс < 365 Тогда
		Для ТекСтрокаИндекс = Индекс По 365 Цикл
			Если Не Элементы.Найти("ДанныеДень"+ТекСтрокаИндекс) = Неопределено Тогда
				Элементы.Удалить(Элементы["ДанныеДень"+ТекСтрокаИндекс]);			
			КонецЕсли;
			Если Не Элементы.Найти("ДанныеДеревоДень"+ТекСтрокаИндекс) = Неопределено Тогда
				Элементы.Удалить(Элементы["ДанныеДеревоДень"+ТекСтрокаИндекс]);			
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не РежимРаботыПК = "Календарь" Тогда
		Для ТекСтрокаИндекс = 1 По Индекс Цикл
			Если Не Элементы.Найти("ДанныеДень"+ТекСтрокаИндекс) = Неопределено Тогда
				Элементы.Удалить(Элементы["ДанныеДень"+ТекСтрокаИндекс]);			    
			КонецЕсли;
			Если Не Элементы.Найти("ДанныеДеревоДень"+ТекСтрокаИндекс) = Неопределено Тогда
				Элементы.Удалить(Элементы["ДанныеДеревоДень"+ТекСтрокаИндекс]);			    
			КонецЕсли;
		КонецЦикла;
	Иначе
		МассивСтрокКУдалению = Новый Массив;

		Для ТекСтрокаИндекс = 1 По ИндексСтроки Цикл
			Если РежимРаботыПК = "Календарь" Тогда // удаляем пустые строки
				ПустаяСтрока = Истина;
				Для т = 0 По ДнейПланирования Цикл
					Если ЗаполняемаяТаблица[ТекСтрокаИндекс]["День" + Строка(т)] Тогда
						ПустаяСтрока = Ложь;					
					КонецЕсли;
				КонецЦикла;
				Если ПустаяСтрока Тогда
					МассивСтрокКУдалению.Добавить(ЗаполняемаяТаблица[ТекСтрокаИндекс]);				
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ТекСтрока Из МассивСтрокКУдалению Цикл
			ЗаполняемаяТаблица.Удалить(ТекСтрока);	
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

//&НаКлиенте
//Процедура ДнейПланированияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
//	СтандартнаяОбработка = Ложь;
//	Список = Новый СписокЗначений;
//	Список.Добавить("До конца недели");
//	Список.Добавить("До конца седующей недели");
//	Список.Добавить("До конца месяца");
//	
//	ТекЗнч = Неопределено;
//	
//	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ДнейПланированияНачалоВыбораИзСпискаЗавершение", ЭтаФорма), Список, Элемент);
//КонецПроцедуры

//&НаКлиенте
//Процедура ДнейПланированияНачалоВыбораИзСпискаЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
//	
//	ТекЗнч = ВыбранныйЭлемент;
//	Если НЕ ТекЗнч = Неопределено Тогда
//		Если ТекЗнч.Значение = "До конца недели" Тогда
//			Объект.ГоризонтПланирования = КонецНедели(ТекущаяДата());
//		ИначеЕсли ТекЗнч.Значение = "До конца седующей недели" Тогда
//			Объект.ГоризонтПланирования = КонецНедели(ТекущаяДата()+7*24*60*60);
//		ИначеЕсли ТекЗнч.Значение = "До конца месяца" Тогда
//			Объект.ГоризонтПланирования = КонецМесяца(ТекущаяДата());
//		КонецЕсли;
//	КонецЕсли;
//	Обновить(Неопределено);
//КонецПроцедуры


