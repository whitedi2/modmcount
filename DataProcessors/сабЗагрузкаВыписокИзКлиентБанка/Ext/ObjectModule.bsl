
Функция НастройкиВнешнейОбработки()
	
	НастройкиОбработки = Новый Структура();
	
	НастройкиОбработки.Вставить("ВидОбработки", "ДополнительнаяОбработка");
	НастройкиОбработки.Вставить("ОбъектыРазмещения", Неопределено);
	НастройкиОбработки.Вставить("ЗаголовокОбработки", "(Загрузка выписок из клиент-банка");
	НастройкиОбработки.Вставить("ВерсияОбработки", "1.0");
	НастройкиОбработки.Вставить("БезопасныйРежим", Ложь);
	НастройкиОбработки.Вставить("ОписаниеОбработки", "Загрузка выписок из клиент-банка");
	
	// Представление – описание команды
	// Идентификатор – любая строка (идентификатор команды)
	// Использование – режим запуска обработки:
	// 	 ОткрытиеФормы – Открывает форму обработки.
	// 	 ВызовКлиентскогоМетода – будет вызвана клиентская процедура из модуля формы обработки.
	// 	 ВызовСерверногоМетода  - будет вызвана серверная процедура из модуля обработки.
	// 	 СценарийВБезопасномРежиме – тоже будет вызвана серверная процедура из модуля обработки в безопасном режиме
	// ПоказыватьОповещение – окно оповещение будет появляться перед началом и после окончание выполнения (для команд клиентских и серверных без формы)
	// Модификатор -  строка (используется для дополнительных печатных форм)
	ТаблицаКоманд = СоздатьТаблицуКоманд();
    ТаблицаКоманд = ДобавитьКомандуВТаблицу(ТаблицаКоманд, 
		"Загрузка выписок из клиент-банка",	// Представление
		"сабЗагрузкаВыписокИзКлиентБанка",		// Идентификатор
		"ВызовСерверногоМетода", 			// Использование
		Ложь,						// ПоказыватьОповещение
		""); 						// Модификатор
	НастройкиОбработки.Вставить("ТаблицаКоманд", ТаблицаКоманд);
	
	Возврат НастройкиОбработки;
	
КонецФункции

#Область РЕГИСТРАЦИЯ_ВНЕШНЕЙ_ОБРАБОТКИ

Функция СведенияОВнешнейОбработке() Экспорт
	
	НастройкиОбработки = НастройкиВнешнейОбработки();
	
	// Структура обработки
	ПараметрыРегистрации = Новый Структура; 
	ПараметрыРегистрации.Вставить("Вид", НастройкиОбработки.ВидОбработки);
	ПараметрыРегистрации.Вставить("Назначение", НастройкиОбработки.ОбъектыРазмещения);
	ПараметрыРегистрации.Вставить("Наименование", НастройкиОбработки.ЗаголовокОбработки); 
	ПараметрыРегистрации.Вставить("Версия", НастройкиОбработки.ВерсияОбработки); 
	ПараметрыРегистрации.Вставить("БезопасныйРежим", НастройкиОбработки.БезопасныйРежим);
	ПараметрыРегистрации.Вставить("Информация", НастройкиОбработки.ОписаниеОбработки);
    ПараметрыРегистрации.Вставить("Команды", НастройкиОбработки.ТаблицаКоманд);
	//ПараметрыРегистрации.Вставить("ВерсияБСП", "2.3.2.59");
	
    Возврат ПараметрыРегистрации; 
	
КонецФункции

Функция СоздатьТаблицуКоманд()

	ТаблицаКоманд = Новый ТаблицаЗначений; 
	ТаблицаКоманд.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 
	ТаблицаКоманд.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка")); 
	ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка")); 
	ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево")); 
	ТаблицаКоманд.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка")); 
	возврат ТаблицаКоманд; 

КонецФункции

Функция ДобавитьКомандуВТаблицу(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
		
	НоваяКоманда = ТаблицаКоманд.Добавить(); 
	НоваяКоманда.Представление = Представление; 
	НоваяКоманда.Идентификатор = Идентификатор;  
	НоваяКоманда.Использование = Использование; 
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение; 
	НоваяКоманда.Модификатор = Модификатор;
	возврат ТаблицаКоманд;
	
КонецФункции

#КонецОбласти

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыВыполненияКоманды = Неопределено) Экспорт
  
	Если ИдентификаторКоманды = "сабЗагрузкаВыписокИзКлиентБанка" Тогда
    	ВыполнитьЗагрузкуВыписок();
	КонецЕсли;
	
КонецПроцедуры

#Область ФУНКЦИИ_ОБРАБОТКИ

Процедура ВыполнитьЗагрузкуВыписок()
			
	Настройка = Константы.сабЗагрузкаВыписокИзКлиентБанка.Получить().Получить();
	Если Настройка <> Неопределено Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Отправитель", Настройка.Отправитель);
		Отбор.Вставить("ПослеДатыОтправления", НачалоДня(ТекущаяДата() - 86400 * Настройка.КоличествоДней) );
		
		НаборСообщений = ЗагрузитьСообщения(Настройка.УчетнаяЗапись, Отбор);
		
		ВыполнитьЗагрузкуВыписокИзСообщений(НаборСообщений);
	КонецЕсли;		
КонецПроцедуры

Функция ЗагрузитьСообщения(Знач УчетнаяЗапись, Отбор)
			
	УстановитьОтключениеБезопасногоРежима(Истина);
	Профиль = ИнтернетПочтовыйПрофиль(УчетнаяЗапись, Истина);
	УстановитьОтключениеБезопасногоРежима(Ложь);
		
	Протокол = ПротоколИнтернетПочты.POP3;
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "ПротоколВходящейПочты") = "IMAP" Тогда
		Протокол = ПротоколИнтернетПочты.IMAP;
	КонецЕсли;
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	Соединение = Новый ИнтернетПочта;
	Соединение.Подключиться(Профиль, Протокол);
	
	МассивНовыеСообщений = Соединение.ПолучитьИдентификаторы(,Отбор); 
	
	Попытка
		НаборСообщений = Соединение.Выбрать(Ложь, МассивНовыеСообщений,Ложь);
	Исключение КонецПопытки;
	
	Попытка
		Соединение.Отключиться();
	Исключение КонецПопытки;
		
	УстановитьОтключениеБезопасногоРежима(Ложь);
	
	Если НаборСообщений.Количество() = 0 Тогда
		
	    ЗаписьЖурналаРегистрации(
			"сабЗагрузкаКлиентБанка", 
	        УровеньЖурналаРегистрации.Информация,
	        ,, "Нет сообщений для загрузки");
		
	КонецЕсли;
	
	Возврат НаборСообщений;
	
КонецФункции

// Создает профиль переданной учетной записи для подключения к почтовому серверу.
//
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - учетная запись.
//
// Возвращаемое значение:
//  ИнтернетПочтовыйПрофиль - профиль учетной записи;
//  Неопределено - не удалось получить учетную запись по ссылке.
//
Функция ИнтернетПочтовыйПрофиль(УчетнаяЗапись, ДляПолучения = Ложь) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетныеЗаписиЭлектроннойПочты.СерверВходящейПочты КАК АдресСервераIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.ПортСервераВходящейПочты КАК ПортIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьЗащищенноеСоединениеДляВходящейПочты КАК ИспользоватьSSLIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.Пользователь КАК ПользовательIMAP,
	// |	УчетныеЗаписиЭлектроннойПочты.ИспользоватьБезопасныйВходНаСерверВходящейПочты КАК ТолькоЗащищеннаяАутентификацияIMAP,
	|	Ложь КАК ТолькоЗащищеннаяАутентификацияIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.СерверВходящейПочты КАК АдресСервераPOP3,
	|	УчетныеЗаписиЭлектроннойПочты.ПортСервераВходящейПочты КАК ПортPOP3,
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьЗащищенноеСоединениеДляВходящейПочты КАК ИспользоватьSSLPOP3,
	|	УчетныеЗаписиЭлектроннойПочты.Пользователь КАК Пользователь,
	//|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьБезопасныйВходНаСерверВходящейПочты КАК ТолькоЗащищеннаяАутентификацияPOP3,
	|	Ложь КАК ТолькоЗащищеннаяАутентификацияPOP3,
	|	УчетныеЗаписиЭлектроннойПочты.СерверИсходящейПочты КАК АдресСервераSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ПортСервераИсходящейПочты КАК ПортSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьЗащищенноеСоединениеДляИсходящейПочты КАК ИспользоватьSSLSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ТребуетсяВходНаСерверПередОтправкой КАК POP3ПередSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ПользовательSMTP КАК ПользовательSMTP,
	//|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьБезопасныйВходНаСерверИсходящейПочты КАК ТолькоЗащищеннаяАутентификацияSMTP,
	|	Истина КАК ТолькоЗащищеннаяАутентификацияSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ВремяОжидания КАК Таймаут,
	|	УчетныеЗаписиЭлектроннойПочты.ПротоколВходящейПочты КАК Протокол
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", УчетнаяЗапись);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Неопределено;
	Если Выборка.Следующий() Тогда
		СписокСвойствIMAP = "АдресСервераIMAP,ПортIMAP,ИспользоватьSSLIMAP,ПользовательIMAP,ТолькоЗащищеннаяАутентификацияIMAP";
		СписокСвойствPOP3 = "АдресСервераPOP3,ПортPOP3,ИспользоватьSSLPOP3,Пользователь,ТолькоЗащищеннаяАутентификацияPOP3";
		СписокСвойствSMTP = "АдресСервераSMTP,ПортSMTP,ИспользоватьSSLSMTP,ПользовательSMTP,ТолькоЗащищеннаяАутентификацияSMTP";
		
		УстановитьПривилегированныйРежим(Истина);
		Пароли = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(УчетнаяЗапись, "Пароль,ПарольSMTP");
		УстановитьПривилегированныйРежим(Ложь);
		
		Результат = Новый ИнтернетПочтовыйПрофиль;
		Если ДляПолучения Тогда
			Если Выборка.Протокол = "IMAP" Тогда
				ТребуемыеСвойства = СписокСвойствIMAP;
				Результат.ПарольIMAP = Пароли.Пароль;
			Иначе
				ТребуемыеСвойства = СписокСвойствPOP3;
				Результат.Пароль = Пароли.Пароль;
			КонецЕсли;
		Иначе
			ТребуемыеСвойства = СписокСвойствSMTP;
			Результат.ПарольSMTP = Пароли.ПарольSMTP;
			Если Выборка.Протокол <> "IMAP" И Выборка.POP3ПередSMTP Тогда
				ТребуемыеСвойства = ТребуемыеСвойства + ",POP3ПередSMTP," + СписокСвойствPOP3;
				Результат.Пароль = Пароли.Пароль;
			КонецЕсли;
			Если Выборка.Протокол = "IMAP" Тогда
				ТребуемыеСвойства = ТребуемыеСвойства + "," + СписокСвойствIMAP;
				Результат.ПарольIMAP =Пароли.Пароль;
			КонецЕсли;
		КонецЕсли;
		ТребуемыеСвойства = ТребуемыеСвойства + ",Таймаут";
		ЗаполнитьЗначенияСвойств(Результат, Выборка, ТребуемыеСвойства);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ВыполнитьЗагрузкуВыписокИзСообщений(НаборСообщений)
	
	Для каждого Сообщение Из НаборСообщений Цикл
		
		Для каждого Вложение Из Сообщение.Вложения цикл		   
			
			Если Вложение.ТипСодержимого = "application/zip" Тогда  
				КаталогДляРаспаковки = КаталогВременныхФайлов() + "/src/";
				СоздатьКаталог(КаталогДляРаспаковки);
				
				ВременныйФайлАрхив = ПолучитьИмяВременногоФайла(".zip");
				Вложение.Данные.Записать(ВременныйФайлАрхив);
				
				АрхивZip = Новый ЧтениеZipФайла(ВременныйФайлАрхив); 
				АрхивZip.ИзвлечьВсе(КаталогДляРаспаковки); 
				АрхивZip.Закрыть();
												
				НайденныеФайлыЗагрузкиКБ = НайтиФайлы(КаталогДляРаспаковки, "*.txt");  
				
				Для Каждого ТекЭлементНайденныйТекстовыйФайл Из НайденныеФайлыЗагрузкиКБ Цикл 
					ЗагрузитьБанковскуюВыпискуНаСервере(Новый ДвоичныеДанные(ТекЭлементНайденныйТекстовыйФайл.ПолноеИмя), "windows-1251");
				КонецЦикла;
				
				Попытка										
					УдалитьФайлы(КаталогДляРаспаковки, "*.txt"); 										
				Исключение	
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
				
			Иначе
				ЗагрузитьБанковскуюВыпискуНаСервере(Вложение.Данные, "windows-1251"); 
			КонецЕсли;
			
		КонецЦикла; 
		
	КонецЦикла; 
	
КонецПроцедуры                                                   

// модификация функции Обработки.КлиентБанк.ЗагрузитьБанковскуюВыпискуНаСервере
Функция ЗагрузитьБанковскуюВыпискуНаСервере(ДвоичныеДанные, Кодировка)
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
		
	СтруктураПараметров = Новый Структура;
	
	// СтруктураПараметров.Вставить("ФайлЗагрузки", ОписаниеФайла.ПолноеИмя);
	СтруктураПараметров.Вставить("ФайлЗагрузки", "ИмяФайла");
	
	СтруктураПараметров.Вставить("АдресХранилищаРаспознанныеДанныеИзБанка", ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор));
	СтруктураПараметров.Вставить("Кодировка",                               Кодировка);
	СтруктураПараметров.Вставить("ДвоичныеДанные", ДвоичныеДанные);
	
	СведенияОВладельцеБанковскогоСчетаИзКонтекста = Новый Структура;
	СведенияОВладельцеБанковскогоСчетаИзКонтекста.Вставить("Организация",               Новый Массив);
	СведенияОВладельцеБанковскогоСчетаИзКонтекста.Вставить("БанковскийСчетОрганизации", Новый Массив);
	
	// СведенияОВладельцеБанковскогоСчетаИзКонтекста = НовыйСведенияОВладельцеБанковскогоСчетаИзКонтекста();
	//Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
	//	СведенияОВладельцеБанковскогоСчетаИзКонтекста.Организация.Добавить(ОтборОрганизация);
	//	Если ИнтеграцияСБанкамиПодключена И ЕстьБанковскиеСчетаБезИнтеграции Тогда
	//		СведенияОВладельцеБанковскогоСчетаИзКонтекста.БанковскийСчетОрганизации.Добавить(БанковскиеСчетаБезИнтеграции.Счета);
	//	КонецЕсли;
	//КонецЕсли;
	
	СтруктураПараметров.Вставить("СведенияОВладельцеБанковскогоСчетаИзКонтекста", СведенияОВладельцеБанковскогоСчетаИзКонтекста);
	//Если ИнтеграцияСБанкамиПодключена И ЕстьБанковскиеСчетаБезИнтеграции Тогда
		СтруктураПараметров.Вставить("РежимИнтеграцииОграничиватьПериодВыписки", Истина);
	//КонецЕсли;
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка выписки из банка'");
	НастройкиЗапуска.ЗапуститьВФоне = Истина;
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	НастройкиЗапуска.КлючФоновогоЗадания = Обработки.КлиентБанк.КлючФоновогоЗаданияЗагрузкаВыписки();
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.КлиентБанк.ФоноваяЗагрузкаБанковскойВыпискиИзЖурнала",
		СтруктураПараметров,
		НастройкиЗапуска);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьОписаниеХранилищаНастроек()
	
	возврат Новый Структура("НазваниеОбъекта, ИмяПользователя, НазваниеНастройки",
		"сабЗагрузкаВыписокИзКлиентБанка", "Загрузка выписок из клиент банка", "ДанныеПросмотраУчетнойЗаписи");
	
КонецФункции

Процедура ПоместитьНастройкуВХранилище(Настройка) Экспорт
	ОписаниеНастроек = ПолучитьОписаниеХранилищаНастроек();
	ХранилищеОбщихНастроек.Сохранить(
		ОписаниеНастроек.НазваниеОбъекта, ОписаниеНастроек.НазваниеНастройки, Настройка, , ОписаниеНастроек.ИмяПользователя);
КонецПроцедуры

Функция ИзвлечьНастройкуИзХранилища() Экспорт
	ОписаниеНастроек = ПолучитьОписаниеХранилищаНастроек();
	Настройки = ХранилищеОбщихНастроек.Загрузить(
		ОписаниеНастроек.НазваниеОбъекта, ОписаниеНастроек.НазваниеНастройки, , ОписаниеНастроек.ИмяПользователя);
	возврат Настройки;	
КонецФункции

#КонецОбласти