&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	//КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, Новый Структура("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты") );
	//КонецЕсли;
	
	//++саб
	сабПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	//--саб
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	//КонецЕсли;
	
	//++саб
	сабПриОткрытии(Отказ);
	//--саб
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	Если МодульУправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
	//		ОбновитьЭлементыДополнительныхРеквизитов();
	//		МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	//КонецЕсли;
	
	//++саб
	сабПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи);
	//--саб
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	МодульУправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
	//КонецЕсли;
	
КонецПроцедуры


// СтандартныеПодсистемы.КонтактнаяИнформация

// Поддержка дополнительных реквизитов.

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	//КонецЕсли;
	
КонецПроцедуры




// Конец СтандартныеПодсистемы.КонтактнаяИнформация



&НаКлиенте
Процедура сабПриОткрытии(Отказ)
	УчетПоПодразделениямПриИзменении(0);
	ИспользоватьТранзитныйСчетПриИзменении(Неопределено);
	
	УстановитьВидимость();
	
	//Элементы.ВД_Бюджет.Видимость = (БюджетныйНаСервере.РольДоступнаСервер("Администратор") ИЛИ БюджетныйНаСервере.РольДоступнаСервер("БюджетныйОтдел"));
			
КонецПроцедуры

&НаКлиенте
Процедура УчетПоПодразделениямПриИзменении(Элемент)
	//Элементы.ВидДеятельности.АвтоОтметкаНезаполненного = 1 - Объект.УчетПоПодразделениям;
	//Элементы.СписокДокументовПодразделения.Видимость = 1 - Объект.УчетПоПодразделениям;
	//Элементы.ПодразделениеНаименование.Видимость = 1 - Объект.УчетПоПодразделениям И НЕ ЗначениеЗаполнено(Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура РельсыПриИзменении(Элемент)
	
	// логистика 19.04.2012 
	Если Объект.Рельсы Тогда
		Если Объект.СтанцииОтгрузки.Количество() > 0 Тогда
			Для каждого Строка Из Объект.СтанцииОтгрузки Цикл
				Объект.СтанцииОтгрузки.Удалить(Строка);
			КонецЦикла;
		КонецЕсли;
		Элементы.СтанцииОтгрузки.Видимость = Ложь;
		Элементы.СтанцииОтгрузки.Доступность = Ложь;
	Иначе
		Элементы.СтанцииОтгрузки.Видимость = Истина;
		Элементы.СтанцииОтгрузки.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	//Отказ = 1 - ПроверитьЗаполнение();
	//Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
	//	Если НЕ Объект.УчетПоПодразделениям Тогда
	//		Если Не ЗначениеЗаполнено(Объект.ВидДеятельности) Тогда
	//			сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(
	//			ЭтотОбъект,
	//			"Выберите подразделение по-умолчанию.",
	//			,
	//			,
	//			"ВидДеятельности",
	//			Отказ);
	//		КонецЕсли;
	//	КонецЕсли;
	//Иначе
	//	Если НЕ Объект.УчетПоПодразделениям Тогда
	//		Если Не ЗначениеЗаполнено(Подразделение.Наименование) Тогда
	//			сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(
	//			Подразделение,
	//			"Укажите подразделение по-умолчанию.",
	//			,
	//			,
	//			"Подразделение.Наименование",
	//			Отказ);
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокДокументов(Команда)
	СформироватьСписокСервер();
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокСервер()

	Для каждого ТекОбъект Из Документы Цикл
		Добавлять = Ложь;
		//Если ТипЗнч(ТекОбъект) = Тип("ДокументМенеджер.ГД_ДвиженияОбщий") ИЛИ ТипЗнч(ТекОбъект) = Тип("ДокументМенеджер.ГД_ДвиженияОбщийВторичный") Тогда
		//	Добавлять = Истина;
		//КонецЕсли;
		ТекИмя = Прав(Строка(ТекОбъект), СтрДлина(Строка(ТекОбъект)) - Найти(Строка(ТекОбъект), "."));
		
		Если Лев(ТекИмя, 3) = "УЧ_" Или Лев(ТекИмя, 3) = "Уч_" Или Лев(ТекИмя, 2) = "Д_" Или Лев(ТекИмя, 2) = "Б_" Тогда
			Добавлять = Истина;
		КонецЕсли;
		Если Добавлять Тогда
			УжеСуществует = Объект.СписокДокументовПодразделения.НайтиСтроки(Новый Структура("Документ", ТекИмя));
			Если Не УжеСуществует.Количество() Тогда
				НоваяСтрока = Объект.СписокДокументовПодразделения.Добавить();
				НоваяСтрока.Наименование = Документы[ТекИмя].ПустаяСсылка().Метаданные().Синоним;
				НоваяСтрока.Документ = ТекИмя;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура ТранзитныйСчетПриИзменении(Элемент)
	БюджетныйНаКлиенте.НазначитьСубконто(Элементы, ЭтаФорма, "ТранзитноеСубконто1", "ТранзитноеСубконто2", "ТранзитноеСубконто3", Объект.ТранзитныйСчет, "ТранзитноеПодразделение",, НЕ Элемент = Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеАдресаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

КонецПроцедуры

&НаКлиенте
Процедура АдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		СтандартнаяОбработка = Ложь;
	
	//СтрДанные = ПолучитьСтрокуДополнительныхЗначений(ЭтаФорма, Элемент);
	ВременныйСписок = Новый СписокЗначений;
	
	ВременныйСписок = АдресныйКлассификаторКлиент.ПреобразоватьСтрокуВСписокПолей(Объект.ЗначениеАдреса);
	
	Пар = Новый Структура;
	Пар.Вставить("ЗначенияПолей",                ВременныйСписок);
	Пар.Вставить("Вид",                          "Адрес");
	Пар.Вставить("БылиВнесеныИзменения",         Ложь);
	Пар.Вставить("Представление",                Объект.Адрес);
	Пар.Вставить("РедактированиеТолькоВДиалоге", Не Элемент.РедактированиеТекста);
	Пар.Вставить("АдресТолькоРоссийский",        Ложь);
	
	Результат = ОткрытьФормуМодально("ОбщаяФорма.ВводАдреса", Пар);
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Объект.ЗначениеАдреса = АдресныйКлассификаторКлиент.ПреобразоватьСписокПолейВСтроку(Результат.ЗначенияПолей);
		Объект.Адрес = Результат.Представление;
		Модифицированность      = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьТранзитныйСчетПриИзменении(Элемент)
	Элементы.Группа11.Доступность = Объект.ИспользоватьТранзитныйСчет;
КонецПроцедуры

&НаСервере
Процедура сабПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)	
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ЗначениеЗаполнено(Подразделение.Наименование) Тогда
			ТекущийОбъект.ВидДеятельности = Справочники.СтруктураПредприятия.ПолучитьСсылку();
			ОбъектРегистрации = Справочники.СтруктураПредприятия.СоздатьЭлемент();
			ОбъектРегистрации.УстановитьСсылкуНового(ТекущийОбъект.ВидДеятельности);
			ОбъектРегистрации.Наименование = Подразделение.Наименование;
			ЗначениеВРеквизитФормы(ОбъектРегистрации, "Подразделение");
			сабПриСозданииНаСервере(Ложь, Истина);
		Иначе
			ТекущийОбъект.ВидДеятельности = Справочники.СтруктураПредприятия.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//{ логистика 19.04.2012
	//Если ТекущийОбъект.Рельсы Тогда  
	//	Если ЗначениеЗаполнено(Справочники.Л_Станции.НайтиПоНаименованию(ТекущийОбъект.Наименование)) = Ложь Тогда	
	//		Станция =Справочники.Л_Станции.СоздатьЭлемент();
	//		Станция.Наименование = ТекущийОбъект.Наименование;
	//		НовСтрЗавод = Станция.Заводы.Добавить();
	//		НовСтрЗавод.Завод = ТекущийОбъект.Ссылка;
	//		Станция.Регион = ТекущийОбъект.Регион;
	//		Станция.Записать()
	//	Иначе
	//		Станция = Справочники.Л_Станции.НайтиПоНаименованию(ТекущийОбъект.Наименование).ПолучитьОбъект();
	//		Если Станция.ПометкаУдаления Тогда
	//			Станция.ПометкаУдаления = Ложь;
	//		КонецЕсли;
	//		Если ЗначениеЗаполнено(Станция.Заводы.Найти(ТекущийОбъект.Ссылка)) = Ложь Тогда
	//			НовСтрЗавод = Станция.Заводы.Добавить();
	//			НовСтрЗавод.Завод = ТекущийОбъект.Ссылка;
	//		КонецЕсли;
	//		Станция.Записать()
	//	КонецЕсли;
	//Иначе
	//	//Если ЗначениеЗаполнено(Справочники.Л_Станции.НайтиПоНаименованию(ТекущийОбъект.Наименование)) Тогда
	//	//	Станция = Справочники.Л_Станции.НайтиПоНаименованию(ТекущийОбъект.Наименование).ПолучитьОбъект();
	//	//	Станция.УстановитьПометкуУдаления(Истина, Истина);
	//	//КонецЕсли;
	//КонецЕсли;
	
	//Если ТекущийОбъект.СтанцииОтгрузки.Количество() > 0 Тогда 
	//	Для Каждого СтрСтанция Из ТекущийОбъект.СтанцииОтгрузки Цикл
	//		Если ЗначениеЗаполнено(Справочники.Л_Станции.НайтиПоНаименованию(СтрСтанция.Станция)) = Ложь Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		// добавление завода в табличную часть "Заводы" станции
	//		Станция = Справочники.Л_Станции.НайтиПоНаименованию(СтрСтанция.Станция).ПолучитьОбъект();
	//		НайденнаяСтрока = Станция.Заводы.Найти(ТекущийОбъект.Ссылка, "Завод");
	//		Если НайденнаяСтрока = Неопределено Тогда
	//			НовСтрока = Станция.Заводы.Добавить();
	//			НовСтрока.Завод = ТекущийОбъект.Ссылка;
	//		КонецЕсли;
	//		Станция.Записать();
	//	КонецЦикла;
	//КонецЕсли;
    //}
	
	Если ПараметрыСеанса.ДоступныеПредприятия.Найти(ТекущийОбъект.Ссылка) = Неопределено Тогда
		ДоступныеПредприятияМассив = Новый Массив;
		Для каждого ТекЭлемент Из ПараметрыСеанса.ДоступныеПредприятия Цикл
			ДоступныеПредприятияМассив.Добавить(ТекЭлемент);
		КонецЦикла; 
		ДоступныеПредприятияМассив.Добавить(ТекущийОбъект.Ссылка);
		ПараметрыСеанса.ДоступныеПредприятия = новый ФиксированныйМассив(ДоступныеПредприятияМассив);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ЗначениеЗаполнено(Подразделение.Наименование)  Тогда
			ЗаписатьОсновноеПодразделение(ТекущийОбъект);
		КонецЕсли;
	КонецЕсли;
	
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Предприятие = ЗНАЧЕНИЕ(Справочник.Предприятия.ПустаяСсылка)";
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Об = РегистрыСведений.сабСоответствияОрганизацийПредприятиям.СоздатьМенеджерЗаписи();
		Об.Организация = Выборка.Ссылка;
		Об.Записать();
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	БанковскиеСчета.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.БанковскиеСчета КАК БанковскиеСчета
	               |ГДЕ
	               |	БанковскиеСчета.Предприятие = ЗНАЧЕНИЕ(Справочник.Предприятия.ПустаяСсылка)
	               |	И ТипЗначения(БанковскиеСчета.Владелец) = Тип(Справочник.Организации)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Кассы.Ссылка
	               |ИЗ
	               |	Справочник.Кассы КАК Кассы
	               |ГДЕ
	               |	Кассы.Предприятие = ЗНАЧЕНИЕ(Справочник.Предприятия.ПустаяСсылка)";
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Об = РегистрыСведений.Д_ИсточникПП.СоздатьМенеджерЗаписи();
		Об.БанковскиеСчета = Выборка.Ссылка;
		Об.Период = НачалоМесяца(ТекущаяДата());
		Об.Записать();
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СтанцииОтгрузкиПередУдалением(Элемент, Отказ)
	
	УбратьПривязку(Элемент.ТекущиеДанные.Станция);
	
КонецПроцедуры

&НаСервере
Процедура УбратьПривязку(СтанцияОтгрузки)
	
	СтанцияОбъект = СтанцияОтгрузки.ПолучитьОбъект();
	НайденнаяСтрока = СтанцияОбъект.Заводы.Найти(Объект.Ссылка);
	Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
		СтанцияОбъект.Заводы.Удалить(НайденнаяСтрока);
	КонецЕсли;
	СтанцияОбъект.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОсновнуюДолжность(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Перед тем как устанавливать основную должность предприятие необходимо записать!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;	
	
	ФормаОснДолжностей = ПолучитьФорму("РегистрСведений.ОсновныеДолжностиПредприятия.ФормаЗаписи");
	ФормаОснДолжностей.Запись.Предприятие = Объект.Ссылка;
	ФормаОснДолжностей.Элементы.Предприятие.ТолькоПросмотр = Истина;
	ФормаОснДолжностей.Открыть();
	
КонецПроцедуры

&НаСервере
Процедура сабПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// di лимит 200000
	Объект.Лимит = 200000;
	
	ОсновныеДолжностиПредприятия.Параметры.УстановитьЗначениеПараметра("Предприятие", Объект.Ссылка);
	
	// Получение списка доступных наборов свойств.
	//НаборыСвойств = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(Объект.Ссылка);
	//Для каждого Строка Из НаборыСвойств Цикл
	//	ДоступныеНаборыСвойств.Добавить(Строка.Набор);
	//КонецЦикла;
	
	
	//Элементы.ПодразделениеНаименование.Видимость = НЕ ЗначениеЗаполнено(Объект.Ссылка);
	//Элементы.ВидДеятельности.Видимость = ЗначениеЗаполнено(Объект.Ссылка);
	//
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПроцентнуюСтавку(Команда)
	
	ОткрытьФормуМодально("РегистрСведений.КЗ_ПроцентнаяСтавкаПредприятия.ФормаСписка", Новый Структура("Отбор", Новый Структура("Предприятие", Объект.Ссылка)));
	
	ПроцентнаяСтавка = ПолучитьПроцентнуюСтавкуПредприятия();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПроцентнуюСтавкуПредприятия() 

 	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КЗ_ПроцентнаяСтавкаПредприятияСрезПоследних.ПроцентнаяСтавка
	|ИЗ
	|	РегистрСведений.КЗ_ПроцентнаяСтавкаПредприятия.СрезПоследних(&Период, Предприятие = &Предприятие) КАК КЗ_ПроцентнаяСтавкаПредприятияСрезПоследних";
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("Предприятие", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.ПроцентнаяСтавка;
	КонецЦикла;	
	
КонецФункции	

&НаКлиенте
Процедура ОсновныеДолжностиПредприятияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	Форма = ПолучитьФорму("РегистрСведений.ОсновныеДолжностиПредприятия.Форма.ФормаЗаписи");
	Форма.Запись.Предприятие = Объект.Ссылка;
	//Форма.Запись.Должность = Элемент.ТекущиеДанные.Должность;
	//Форма.Запись.Сотрудник = Элемент.ТекущиеДанные.Сотрудник;
	Форма.Открыть()

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	
	//{ логистика 19.04.2012 
	//Если Объект.Рельсы Тогда
	//	Элементы.СтанцииОтгрузки.Видимость = Ложь;
	//	Элементы.СтанцииОтгрузки.Доступность = Ложь;
	//Иначе
	//	Элементы.СтанцииОтгрузки.Видимость = Истина;
	//	Элементы.СтанцииОтгрузки.Доступность = Истина;
	//КонецЕсли;
	//}
	
	//Элементы.СтатьяЗакрытияЗатрат.Видимость = (Объект.СчетЗакрытияЗатрат = ПредопределенноеЗначение("ПланСчетов.Учетный.ДоходыИРасходы"));
	
КонецПроцедуры	

&НаКлиенте
Процедура СчетЗакрытияЗатратПриИзменении(Элемент)

	Элементы.СтатьяЗакрытияЗатрат.Видимость = Истина;
	
КонецПроцедуры

// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ДОП. СВОЙСТВАМИ

&НаКлиенте
Процедура ЗаписатьЗначенияСвойств()
	
	// Запись значений свойств в регистр сведений.
	ЗначенияСвойств = Новый Массив;
	
	Для каждого Строка Из ТаблицаЗначенийСвойств Цикл
		
		Если ЗначениеЗаполнено(Строка.Значение)
		  И (Строка.Значение <> Ложь) Тогда
			
			Значение = Новый Структура("Свойство, Значение", Строка.Свойство, Строка.Значение);
			ЗначенияСвойств.Добавить(Значение);
		КонецЕсли;
	КонецЦикла;
	
	ЗаписатьНаборСвойствВРегистр(Объект.Ссылка, ЗначенияСвойств);
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьНаборСвойствВРегистр(Знач Ссылка, Знач ЗначенияСвойств)
	
	Набор = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	Набор.Отбор.Объект.Установить(Ссылка);
	
	Для каждого Строка Из ЗначенияСвойств Цикл
		Запись = Набор.Добавить();
		Запись.Свойство = Строка.Свойство;
		Запись.Значение = Строка.Значение;
		Запись.Объект   = Ссылка;
	КонецЦикла;
	
	Набор.Записать();
	
КонецПроцедуры

&НаСервере
Функция ПрочитатьЗначенияСвойствИзРегистраСведений()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДополнительныеСведения.Свойство,
	|	ДополнительныеСведения.Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Объект = &Объект";
	Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция ПолучитьТекущиеЗначенияСвойств()
	
	ЗначенияСвойств = Новый ТаблицаЗначений;
	ЗначенияСвойств.Колонки.Добавить("Свойство");
	ЗначенияСвойств.Колонки.Добавить("Значение");
	
	Для каждого Строка Из ТаблицаЗначенийСвойств Цикл
		
		Если ЗначениеЗаполнено(Строка.Значение) И (Строка.Значение <> Ложь) Тогда
			НоваяСтрока = ЗначенияСвойств.Добавить();
			НоваяСтрока.Свойство = Строка.Свойство;
			НоваяСтрока.Значение = Строка.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗначенияСвойств;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаЗначенийСвойствПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗначенийСвойствПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Элемент.ПодчиненныеЭлементы.ТаблицаЗначенийСвойствЗначение.ОграничениеТипа
	= Элемент.ТекущиеДанные.ТипЗначения;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаписатьЗначенияСвойств();
	КонецЕсли;
	
КонецПроцедуры

//КОНЕЦ РАБОТЫ С ДОП. СВОЙСТВАМИ	

&НаСервере
Процедура ЗаписатьОсновноеПодразделение(ТекущийОбъект)

	Если ЗначениеЗаполнено(ТекущийОбъект.ВидДеятельности) Тогда		
		
		ОбъектРегистрации = РеквизитФормыВЗначение("Подразделение");
		
		Если НЕ ЗначениеЗаполнено(ОбъектРегистрации.Ссылка) Тогда
			ОбъектРегистрации.УстановитьСсылкуНового(ТекущийОбъект.ВидДеятельности);
			ОбъектРегистрации.Заполнить(Новый Структура("Предприятие", ТекущийОбъект.Ссылка));
			ОбъектРегистрации.Предприятие = ТекущийОбъект.Ссылка;
		КонецЕсли;
		
		ОбъектРегистрации.Записать();
		
		ЗначениеВРеквизитФормы(ОбъектРегистрации, "Подразделение");
		
		//Если БанковскийСчетЗаблокирован Тогда
		//	РазблокироватьДанныеДляРедактирования(ТекущийОбъект.БанковскийСчетПоУмолчанию, УникальныйИдентификатор);
		//	БанковскийСчетЗаблокирован = Ложь;
		//КонецЕсли; 
		
	конецесли;

КонецПроцедуры
