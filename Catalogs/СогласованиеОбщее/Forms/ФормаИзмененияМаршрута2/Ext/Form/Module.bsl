
&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	//трансформируем дерево в ТЧ
	Если ВариантСогласования = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Смешанно") Тогда
		МасивСтрокСогл = Новый Массив;
		Для каждого ТекСтрока Из ДопСогласование Цикл
			МасивСтрокСогл.Добавить(ТекСтрока);	
		КонецЦикла;
		МасивСтрокИсп = Новый Массив;
		Для каждого ТекСтрока Из ДопИсполнение Цикл
			МасивСтрокИсп.Добавить(ТекСтрока);	
		КонецЦикла;
		МассивСтрокОзн = Новый Массив;
		Для каждого ТекСтрока Из ДопОповещение Цикл
			МассивСтрокОзн.Добавить(ТекСтрока);	
		КонецЦикла;
		
		ТекЭлементы = МаршрутДерево.ПолучитьЭлементы();
		Для каждого ТекЭлемент Из ТекЭлементы Цикл
			ДобавитьУровеньНаЗапись(ТекЭлемент.ПолучитьЭлементы(), ТекЭлемент.Пользователь);	
		КонецЦикла;
		
		Для каждого ТекСтрока Из МасивСтрокСогл Цикл
			ДопСогласование.Удалить(ТекСтрока);	
		КонецЦикла; 
		Для каждого ТекСтрока Из МасивСтрокИсп Цикл
			ДопИсполнение.Удалить(ТекСтрока);	
		КонецЦикла; 
		Для каждого ТекСтрока Из МассивСтрокОзн Цикл
			ДопОповещение.Удалить(ТекСтрока);	
		КонецЦикла;
	КонецЕсли;
	
	
	ОбновлятьСписокЗадач = Ложь;
	ЗаписатьНаСервере(ОбновлятьСписокЗадач);
	Если ОбновлятьСписокЗадач Тогда
		Оповестить("ОбновитьСписокЗадач");
	КонецЕсли;
	Оповестить("ОбновитьМаршрут");	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУровеньНаЗапись(ТекЭлементы,  ТекТЧ)
	Для каждого ТекЭл Из ТекЭлементы Цикл
		Если ТекЭл.ПолучитьЭлементы().Количество() Тогда
			ДобавитьУровеньНаЗапись(ТекЭл.ПолучитьЭлементы(), ТекТЧ);	
		Иначе
			Если ТекТЧ = "Согласование" Тогда
				
				НоваяСтрока = ДопСогласование.Добавить();
				//НайденныеСтроки = ДопСогласование.НайтиСтроки(Новый Структура("СубъектСогласования",  ТекЭл.Пользователь));
				//Для каждого ТекНайденнаяСтрока Из НайденныеСтроки Цикл
				//	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекНайденнаяСтрока);
				//КонецЦикла; 
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекЭл,,"Пользователь");
				НоваяСтрока.СубъектСогласования = ТекЭл.Пользователь;
				НоваяСтрока.Пользователь = ТекЭл.Согласователь;
				НоваяСтрока.Согласовано = ТекЭл.Согласовано;
				НоваяСтрока.Пройден = ТекЭл.Пройден;
			ИначеЕсли ТекТЧ = "Исполнение" Тогда
				НоваяСтрока = ДопИсполнение.Добавить();
				//НайденныеСтроки = ДопИсполнение.НайтиСтроки(Новый Структура("Исполнитель",  ТекЭл.Пользователь));
				//Для каждого ТекНайденнаяСтрока Из НайденныеСтроки Цикл
				//	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекНайденнаяСтрока);
				//КонецЦикла; 
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекЭл,,"Пользователь");
				НоваяСтрока.Исполнитель = ТекЭл.Пользователь;
				НоваяСтрока.Пользователь = ТекЭл.Согласователь;
				НоваяСтрока.Исполнено = ТекЭл.Согласовано;
				НоваяСтрока.Пройдено = ТекЭл.Пройден;
			Иначе
				НоваяСтрока = ДопОповещение.Добавить();
				//НайденныеСтроки = ДопОповещение.НайтиСтроки(Новый Структура("Пользователь",  ТекЭл.Пользователь));
				//Для каждого ТекНайденнаяСтрока Из НайденныеСтроки Цикл
				//	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекНайденнаяСтрока);
				//КонецЦикла; 
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекЭл);
				НоваяСтрока.Оповещен = ТекЭл.Согласовано;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаСервере(ОбновлятьСписокЗадач)	
	
	БизнесПроцесс = ТекБп.Метаданные();
	ИсполнительУстановлен = Ложь;
	
	Если НЕ БизнесПроцесс.ТабличныеЧасти.Найти("ДопСогласование") = Неопределено Тогда
		
		Для Каждого СтрокаСогл Из ДопСогласование Цикл
			Если СтрокаСогл.Пройден Тогда
				Продолжить;
			КонецЕсли;	
			Если Не ИсполнительУстановлен Тогда 
				СтрокаСогл.ТекущийИсполнитель = Истина;
				ИсполнительУстановлен = Истина;
			Иначе
				СтрокаСогл.ТекущийИсполнитель = Ложь;
			КонецЕсли;	
		КонецЦикла;
		
		БПОбъект = ТекБП.ПолучитьОбъект();
		БПОбъект.ДопСогласование.Загрузить(ДопСогласование.Выгрузить());
		БПОбъект.ДопИсполнение.Загрузить(ДопИсполнение.Выгрузить());
		БПОбъект.Записать();
		
		МассивСтрок = ДопСогласование.НайтиСтроки(Новый Структура("ТекущийИсполнитель", Истина));
		Для Каждого Строка Из МассивСтрок Цикл
			ТекИсполнитель = Строка.СубъектСогласования;	
		КонецЦикла;	
		
		МассивСтрокПервоначальное = ДопСогласованиеПервоначальное.НайтиСтроки(Новый Структура("ТекущийИсполнитель", Истина));
		Для Каждого СтрокаПервоначальное Из МассивСтрокПервоначальное Цикл
			ТекИсполнительПервоначальный = СтрокаПервоначальное.СубъектСогласования;	
		КонецЦикла;	
		
		Если Не ТекИсполнитель = ТекИсполнительПервоначальный Тогда
			Если ТипЗнч(ТекБп) = Тип("СправочникСсылка.СогласованиеОбщее") И НЕ ТекБп.ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно Тогда
				БПСервер.СкорректироватьЗадачиПриИзмененииМаршрута(БПОбъект);
			Иначе
				ИзменитьЗадачу(БПОбъект.Ссылка, ТекИсполнительПервоначальный, ТекИсполнитель);		
			КонецЕсли;
			ОбновлятьСписокЗадач = Истина;
		КонецЕсли;	
		
		//Оповестим автора об изменении маршрута бизнес-процесса
		БПСервер.СообщитьОбИзмененииМаршрута(БПОбъект.Ссылка, ДопСогласование, ДопСогласованиеПервоначальное);
		
	КонецЕсли;
	
	Если НЕ БизнесПроцесс.ТабличныеЧасти.Найти("ДопИсполнение") = Неопределено И Не ТипЗнч(ТекБП) = Тип("СправочникСсылка.Согласование1") Тогда
		
		//Если ТипЗнч(ТекБП) = Тип("СправочникСсылка.Согласование3") И БПСервер.ПолучитьТекущуюТочкуМаршрута(ТекБп.Заявка) = Перечисления.Согласование3ТочкиМаршрута.Действие4 Тогда
		//	БПОбъект = ТекБП.ПолучитьОбъект();
		//	БПОбъект.ДопИсполнение.Загрузить(ДопИсполнение.Выгрузить());
		//	БПОбъект.Записать();

		//	Запрос = Новый Запрос;
		//	Запрос.Текст = 
		//	"ВЫБРАТЬ
		//	|	ДопИсполнение.Исполнитель
		//	|ПОМЕСТИТЬ ВТ_Исполнение
		//	|ИЗ
		//	|	&ДопИсполнение КАК ДопИсполнение
		//	|;
		//	|
		//	|////////////////////////////////////////////////////////////////////////////////
		//	|ВЫБРАТЬ
		//	|	ДопИсполнениеПервоначальное.Исполнитель
		//	|ПОМЕСТИТЬ ВТ_ИсполнениеПервоначальное
		//	|ИЗ
		//	|	&ДопИсполнениеПервоначальное КАК ДопИсполнениеПервоначальное
		//	|;
		//	|
		//	|////////////////////////////////////////////////////////////////////////////////
		//	|ВЫБРАТЬ
		//	|	ВЫБОР
		//	|		КОГДА ВТ_ИсполнениеПервоначальное.Исполнитель ЕСТЬ NULL 
		//	|			ТОГДА ВТ_Исполнение.Исполнитель
		//	|		ИНАЧЕ ВТ_ИсполнениеПервоначальное.Исполнитель
		//	|	КОНЕЦ КАК Пользователь,
		//	|	ВЫБОР
		//	|		КОГДА ВТ_Исполнение.Исполнитель ЕСТЬ NULL 
		//	|				И НЕ ВТ_ИсполнениеПервоначальное.Исполнитель ЕСТЬ NULL 
		//	|			ТОГДА ""Удален""
		//	|		КОГДА НЕ ВТ_Исполнение.Исполнитель ЕСТЬ NULL 
		//	|				И ВТ_ИсполнениеПервоначальное.Исполнитель ЕСТЬ NULL 
		//	|			ТОГДА ""Добавлен""
		//	|		ИНАЧЕ """"
		//	|	КОНЕЦ КАК Статус
		//	|ИЗ
		//	|	ВТ_Исполнение КАК ВТ_Исполнение
		//	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ИсполнениеПервоначальное КАК ВТ_ИсполнениеПервоначальное
		//	|		ПО ВТ_Исполнение.Исполнитель = ВТ_ИсполнениеПервоначальное.Исполнитель";
		//	Запрос.УстановитьПараметр("ДопИсполнение", ДопИсполнение.Выгрузить());
		//	Запрос.УстановитьПараметр("ДопИсполнениеПервоначальное", ДопИсполнениеПервоначальное.Выгрузить());
		//	ТаблицаПоПользователям = Запрос.Выполнить().Выгрузить();
		//	МассивПользователейУдалить = ТаблицаПоПользователям.НайтиСтроки(Новый Структура("Статус", "Удален"));
		//	Для Каждого ПользовательУдалить Из МассивПользователейУдалить Цикл
		//		СоздатьУдалитьЗадачу(БПОбъект.Ссылка, ПользовательУдалить.Пользователь, ТекИсполнитель, Истина);
		//	КонецЦикла;	
		//	МассивПользователейДобавить = ТаблицаПоПользователям.НайтиСтроки(Новый Структура("Статус", "Добавлен"));
		//	Для Каждого ПользовательДобавить Из МассивПользователейДобавить Цикл
		//		СоздатьУдалитьЗадачу(БПОбъект.Ссылка, ПользовательДобавить.Пользователь, ПользовательДобавить.Пользователь, Ложь);
		//	КонецЦикла;	
		//Иначе	
			Для Каждого СтрокаИсполнения Из ДопИсполнение Цикл
				Если СтрокаИсполнения.Пройдено Тогда
					Продолжить;
				КонецЕсли;	
				Если Не ИсполнительУстановлен Тогда 
					СтрокаИсполнения.ТекущийИсполнитель = Истина;
					ИсполнительУстановлен = Истина;
				Иначе
					СтрокаИсполнения.ТекущийИсполнитель = Ложь;
				КонецЕсли;	
			КонецЦикла;
			
			Если НЕ БизнесПроцесс.ТабличныеЧасти.Найти("ДопОповещение") = Неопределено Тогда
				Для Каждого СтрокаИсполнения Из ДопОповещение Цикл
					Если СтрокаИсполнения.Оповещен Тогда
						Продолжить;
					КонецЕсли;	
					Если Не ИсполнительУстановлен Тогда 
						СтрокаИсполнения.ТекущийИсполнитель = Истина;
						ИсполнительУстановлен = Истина;
					Иначе
						СтрокаИсполнения.ТекущийИсполнитель = Ложь;
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;	
			
			БПОбъект = ТекБП.ПолучитьОбъект();
			БПОбъект.ДопИсполнение.Загрузить(ДопИсполнение.Выгрузить());
			Если НЕ БизнесПроцесс.ТабличныеЧасти.Найти("ДопОповещение") = Неопределено Тогда
				БПОбъект.ДопОповещение.Загрузить(ДопОповещение.Выгрузить());
			КонецЕсли;
			БПОбъект.Записать();
			
			МассивСтрок = ДопИсполнение.НайтиСтроки(Новый Структура("ТекущийИсполнитель", Истина));
			Для Каждого Строка Из МассивСтрок Цикл
				ТекИсполнитель = Строка.Исполнитель;	
			КонецЦикла;	
			
			МассивСтрокПервоначальное = ДопИсполнениеПервоначальное.НайтиСтроки(Новый Структура("ТекущийИсполнитель", Истина));
			Для Каждого СтрокаПервоначальное Из МассивСтрокПервоначальное Цикл
				ТекИсполнительПервоначальный = СтрокаПервоначальное.Исполнитель;	
			КонецЦикла;	
			
			Если ИсполнительУстановлен Тогда
				Если Не ТекИсполнитель = ТекИсполнительПервоначальный Тогда
					ИзменитьЗадачу(БПОбъект.Ссылка, ТекИсполнительПервоначальный, ТекИсполнитель);
					ОбновлятьСписокЗадач = Истина;
				КонецЕсли;	
			КонецЕсли;
		//КонецЕсли;	
		
	КонецЕсли;
		
КонецПроцедуры	

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекБп = Параметры.ТекущийБизнесПроцесс;
	
	Попытка
		ВариантСогласования = ТекБп.ВариантСогласования;
		СложныйМаршрут = ВариантСогласования = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Смешанно");
	Исключение
		СложныйМаршрут = Ложь;
	КонецПопытки;
		
	БизнесПроцессСсылка = ТекБп;
	
	БизнесПроцесс = ТекБп.Метаданные();
		
	ТекДокумент = Параметры.ТекущийДокумент;
	
	Если НЕ БизнесПроцесс.ТабличныеЧасти.Найти("ДопСогласование") = Неопределено Тогда
		Элементы.ДопСогласование.Видимость = Истина;
		ТЗ = ТекБп.ДопСогласование.Выгрузить();
		ДопСогласование.Загрузить(ТЗ);
		ДопСогласованиеПервоначальное.Загрузить(ТЗ);
				
		МассивСтрок = ДопСогласование.НайтиСтроки(Новый Структура("Пройден", Ложь));
		Элементы.ДопСогласование.ТолькоПросмотр = (МассивСтрок.Количество() = 0);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Задача.Исполнитель КАК Исполнитель
		               |ИЗ
		               |	Справочник.Задача КАК Задача
		               |ГДЕ
		               |	Задача.БизнесПроцесс = &БизнесПроцесс
		               |	И Задача.Выполнена = ЛОЖЬ
		               |	И Задача.ПометкаУдаления = ЛОЖЬ
		               |	И Задача.ТочкаМаршрута В(&ТочкаМаршрута)";
		Запрос.УстановитьПараметр("БизнесПроцесс", ТекБп);
		Запрос.УстановитьПараметр("ТочкаМаршрута", БПСервер.ТочкиПроцессов("согласование"));
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НайденныеИсполнители = ДопСогласование.НайтиСтроки(Новый Структура("СубъектСогласования", Выборка.Исполнитель));
			Для Каждого ТекСтрока Из НайденныеИсполнители Цикл
				ТекСтрока.ТекущийИсполнитель = Истина;		
			КонецЦикла;
			НайденныеИсполнителиНач = ДопСогласованиеПервоначальное.НайтиСтроки(Новый Структура("СубъектСогласования", Выборка.Исполнитель));
			Для Каждого ТекСтрокаНач Из НайденныеИсполнителиНач Цикл
				ТекСтрокаНач.ТекущийИсполнитель = Истина;		
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ БизнесПроцесс.ТабличныеЧасти.Найти("ДопИсполнение") = Неопределено Тогда
		
		Элементы.ДопИсполнение.Видимость = Истина;
		ТЗИсполнение = ТекБп.ДопИсполнение.Выгрузить();
		ДопИсполнение.Загрузить(ТЗИсполнение);
		ДопИсполнениеПервоначальное.Загрузить(ТЗИсполнение);
				
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Задача.Исполнитель КАК Исполнитель
		               |ИЗ
		               |	Справочник.Задача КАК Задача
		               |ГДЕ
		               |	Задача.БизнесПроцесс = &БизнесПроцесс
		               |	И Задача.Выполнена = ЛОЖЬ
		               |	И Задача.ПометкаУдаления = ЛОЖЬ
		               |	И Задача.ТочкаМаршрута В(&ТочкаМаршрута)";
		Запрос.УстановитьПараметр("БизнесПроцесс", ТекБп);
		Запрос.УстановитьПараметр("ТочкаМаршрута", БПСервер.ТочкиПроцессов("исполнение"));
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НайденныеИсполнители = ДопИсполнение.НайтиСтроки(Новый Структура("Исполнитель", Выборка.Исполнитель));
			Для Каждого ТекСтрока Из НайденныеИсполнители Цикл
				ТекСтрока.ТекущийИсполнитель = Истина;		
			КонецЦикла;
			НайденныеИсполнителиНач = ДопИсполнениеПервоначальное.НайтиСтроки(Новый Структура("Исполнитель", Выборка.Исполнитель));
			Для Каждого ТекСтрокаНач Из НайденныеИсполнителиНач Цикл
				ТекСтрокаНач.ТекущийИсполнитель = Истина;		
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ БизнесПроцесс.ТабличныеЧасти.Найти("ДопОповещение") = Неопределено Тогда
		
		//Элементы.ДопИсполнение.Видимость = Истина;
		ТЗОповещение = ТекБп.ДопОповещение.Выгрузить();
		ДопОповещение.Загрузить(ТЗОповещение);
		ДопИсполнениеПервоначальное.Загрузить(ТЗОповещение);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Задача.Исполнитель
		               |ИЗ
		               |	Справочник.Задача КАК Задача
		               |ГДЕ
		               |	Задача.БизнесПроцесс = &БизнесПроцесс
		               |	И Задача.Выполнена = ЛОЖЬ
		               |	И Задача.ПометкаУдаления = ЛОЖЬ
		               |	И Задача.ТочкаМаршрута В(&ТочкаМаршрута)";
		Запрос.УстановитьПараметр("БизнесПроцесс", ТекБп);
		Запрос.УстановитьПараметр("ТочкаМаршрута", БПСервер.ТочкиПроцессов("ознакомление"));
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НайденныеИсполнители = ДопОповещение.НайтиСтроки(Новый Структура("Пользователь", Выборка.Исполнитель));
			Для Каждого ТекСтрока Из НайденныеИсполнители Цикл
				ТекСтрока.ТекущийИсполнитель = Истина;		
			КонецЦикла;
			НайденныеИсполнителиНач = ДопОповещениеПервоначальное.НайтиСтроки(Новый Структура("Пользователь", Выборка.Исполнитель));
			Для Каждого ТекСтрокаНач Из НайденныеИсполнителиНач Цикл
				ТекСтрокаНач.ТекущийИсполнитель = Истина;		
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Для каждого ТекСтрока Из ДопСогласование Цикл
		ТекСтрока.Согласователь = ТекСтрока.Пользователь;	
	КонецЦикла;
	Для каждого ТекСтрока Из ДопСогласование Цикл
		ТекСтрока.Согласователь = ТекСтрока.Пользователь;	
	КонецЦикла; 
	
	Если СложныйМаршрут Тогда
		ЗаполнитьСложныйМаршрут();
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ДопСогласованиеПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные.Пройден Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.Обязателен Тогда
		Сообщить("Cубъект согласования " + Строка(Элемент.ТекущиеДанные.СубъектСогласования) + " обязателен в маршруте! Перенаправление и редактирование невозможно!");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДопСогласованиеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Элемент.ТекущиеДанные.Пройден Тогда
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДопИсполнениеПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные.Пройдено Тогда
		Отказ = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДопИсполнениеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Элемент.ТекущиеДанные.Пройден Тогда
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьЗадачу(ТекБп, ИсходныйПользователь, КонечныйПользователь)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Задача.Ссылка
	               |ИЗ
	               |	Справочник.Задача КАК Задача
	               |ГДЕ
	               |	Задача.БизнесПроцесс = &БизнесПроцесс
	               |	И Задача.Выполнена = ЛОЖЬ
	               |	И Задача.ПометкаУдаления = ЛОЖЬ
	               |	И Задача.Исполнитель = &Исполнитель";
	
	Запрос.УстановитьПараметр("БизнесПроцесс", ТекБп);
	Запрос.УстановитьПараметр("Исполнитель", ИсходныйПользователь);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	//выполняем задачу у исходного пользователя с комментариями "перенаправлено"
	Пока Выборка.Следующий() Цикл
		Если ПустаяСтрока(КонечныйПользователь) Тогда
			КомментарийСправочники = "Пользователь " + Строка(ПараметрыСеанса.ТекущийПользователь) + " удалил из маршрута пользователя " + Строка(ИсходныйПользователь) + ". " + Комментарий;
		Иначе
			КомментарийСправочники = "Пользователь " + Строка(ПараметрыСеанса.ТекущийПользователь) + " перенаправил бизнес процесс на " + Строка(КонечныйПользователь) + ". " + Комментарий;
		КонецЕсли;
		БПСервер.ВыполнитьЗадачу(Выборка.Ссылка, 0, "", КомментарийСправочники);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура СоздатьУдалитьЗадачу(ТекБп, ИсходныйПользователь, КонечныйПользователь, Удалить)

	Если Удалить Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Задача.Ссылка
		|ИЗ
		|	Справочник.Задача КАК Задача
		|ГДЕ
		|	Задача.БизнесПроцесс = &БизнесПроцесс
		|	И Задача.Выполнена = ЛОЖЬ
		|	И Задача.ПометкаУдаления = ЛОЖЬ
		|	И Задача.Исполнитель = &Исполнитель";
		
		Запрос.УстановитьПараметр("БизнесПроцесс", ТекБп);
		Запрос.УстановитьПараметр("Исполнитель", ИсходныйПользователь);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		//выполняем задачу у исходного пользователя с комментариями "перенаправлено"
		Пока Выборка.Следующий() Цикл
			
			Если ПустаяСтрока(КонечныйПользователь) Тогда
				КомментарийСправочники = "Пользователь " + Строка(ПараметрыСеанса.ТекущийПользователь) + " удалил из маршрута пользователя " + Строка(ИсходныйПользователь) + ". " + Комментарий;
			Иначе
				КомментарийСправочники = "Пользователь " + Строка(ПараметрыСеанса.ТекущийПользователь) + " перенаправил бизнес процесс на " + Строка(КонечныйПользователь) + ". " + Комментарий;
			КонецЕсли;
			
			//ТекЗадача = Выборка.Ссылка;
			//ТекЗадачаОбъект = ТекЗадача.ПолучитьОбъект();
			//ТекЗадачаОбъект.Выполнена = Истина;
			//ТекЗадачаОбъект.Комментарии = КомментарийСправочники;
			//ТекЗадачаОбъект.Записать();
			БПСервер.ВыполнитьЗадачу(Выборка.Ссылка, 0, "", КомментарийСправочники);
			Прервать;
		КонецЦикла; 
	Иначе
		Задача = БПСервер.НоваяЗадача(
		КонечныйПользователь, 
		"Принять к исполнению " + ТекБп.Заявка.Метаданные().Синоним, 
		ТекБп, 
		Перечисления.Согласование3ТочкиМаршрута.Действие4,
		,
		ТекБп.Предприятие);
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура ДопСогласованиеТекущийИсполнительПриИзменении(Элемент)
	
	ТекДанные = Элементы.ДопСогласование.ТекущиеДанные;
	Если ТекДанные.ТекущийИсполнитель Тогда
		МассивСтрок = ДопСогласование.НайтиСтроки(Новый Структура("ТекущийИсполнитель", Истина));
		Для Каждого Строка Из МассивСтрок Цикл
			Если Строка.СубъектСогласования = ТекДанные.СубъектСогласования Тогда
				Продолжить;
			Иначе
				Строка.ТекущийИсполнитель = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДопСогласованиеПередУдалением(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные.Пройден Тогда
		Отказ = Истина;
	КонецЕсли;	
	
	//Если ЯвляетсяЗаявкойНаОтгрузку(ТекБп) Тогда
	//	Если Элемент.ТекущиеДанные.СубъектСогласования = ПроверкаНаДивизионера() Или Элемент.ТекущиеДанные.СубъектСогласования = ПроверкаНаЗамДивизионера() Тогда
	//		Сообщение = Новый СообщениеПользователю;
	//		Сообщение.Текст = "Невозможно удалить дивизионера/зам.дивизионера предприятия из маршрута согласования!";
	//		Сообщение.Сообщить();
	//		Отказ = Истина;
	//	КонецЕсли;
	//КонецЕсли;
	
	Если Элемент.ТекущиеДанные.Обязателен Тогда
		Сообщить("Cубъект согласования " + Строка(Элемент.ТекущиеДанные.СубъектСогласования) + " обязателен в маршруте! Удаление невозможно!");
		Отказ = Истина;
	КонецЕсли;
	
	
	
	ТекстСообщения = "";
	Если Не ПользователюРазрешеноУдалятьСогласователей(Элемент.ТекущиеДанные.СубъектСогласования, ТекстСообщения) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДопИсполнениеПередУдалением(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные.Пройдено Тогда
		Отказ = Истина;
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ДопИсполнениеТекущийИсполнительПриИзменении(Элемент)
	
	ТекДанные = Элементы.ДопИсполнение.ТекущиеДанные;
	Если ТекДанные.ТекущийИсполнитель Тогда
		МассивСтрок = ДопИсполнение.НайтиСтроки(Новый Структура("ТекущийИсполнитель", Истина));
		Для Каждого Строка Из МассивСтрок Цикл
			Если Строка.Исполнитель = ТекДанные.Исполнитель Тогда
				Продолжить;
			Иначе
				Строка.ТекущийИсполнитель = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ПроверкаНаДивизионера()

	Возврат БПСервер.ПолучитьСотрудникаПоОсновнойДолжности(ТекБП.Заявка.Предприятие, Перечисления.ОсновныеДолжностиПредприятия.Дивизионер);
	
КонецФункции	

&НаСервере
Функция ПроверкаНаЗамДивизионера()

	Возврат БПСервер.ПолучитьСотрудникаПоОсновнойДолжности(ТекБП.Заявка.Предприятие, Перечисления.ОсновныеДолжностиПредприятия.ЗамДивизионера);
	
КонецФункции	

&НаСервере
Функция ЯвляетсяЗаявкойНаОтгрузку(ТекБП)

	//Возврат ТипЗнч(ТекБП.Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаОтгрузку");
	Возврат Ложь;

КонецФункции	

&НаСервере
Функция ПользователюРазрешеноУдалятьСогласователей(СубъектСогласования, ТекстСообщения)
	
	//Проверка на дивизионера/замдивизионера
	//Если ТипЗнч(ТекБП.Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаОтгрузку")
	//		И (СубъектСогласования = БПСервер.ПолучитьСотрудникаПоОсновнойДолжности(ТекБП.Заявка.Предприятие, Перечисления.ОсновныеДолжностиПредприятия.Дивизионер)
	//			Или СубъектСогласования = БПСервер.ПолучитьСотрудникаПоОсновнойДолжности(ТекБП.Заявка.Предприятие, Перечисления.ОсновныеДолжностиПредприятия.ЗамДивизионера)) Тогда
	//	ТекстСообщения = "Невозможно удалить дивизионера/зам.дивизионера предприятия из маршрута согласования!";
	//	Возврат Ложь;
	//КонецЕсли;
	
	//Проверка на сотрудника ОФК
	// ГУК 23.09.2015 
	//Если СубъектСогласования = БПСервер.ПолучитьКонстантуНаСервере("СотрудникОФК") И ТекБП.КонтрольСогласованияОФК Тогда
	//	ТекстСообщения = "Невозможно удалить сотрудника ОФК из маршрута согласования!";
	//	Возврат Ложь;
	//КонецЕсли;
	                                          
	//Запрет, если заявка уже прошла через ОФК    
	//Если ТипЗнч(ТекБП) = Тип("СправочникСсылка.Согласование1") Или ТипЗнч(ТекБП) = Тип("СправочникСсылка.СогласованиеОбщее") И ТекБП.КонтрольСогласованияОФК Тогда
	//	Если Не БюджетныйНаСервере.РольАдминаДоступнаСервер() И Не РольДоступна("ОФК") И ТекБП.ДопСогласование.Найти(СубъектСогласования, "СубъектСогласования") <> Неопределено Тогда 
	//		
	//		Для Каждого ТекСтрока Из ДопСогласование Цикл
	//			Если ТекСтрока.Пройден И Текстрока.СубъектСогласования = Константы.СотрудникОФК.Получить() Тогда
	//				ТекстСообщения = "Невозможно удалить пользователя из маршрута согласования, так как заявка уже прошла через ОФК.";
	//				Возврат Ложь;
	//			КонецЕсли;;
	//		КонецЦикла;
	//		
	//	КонецЕсли;
	//КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

///////////////////////////////генерирование дерева маршрутов///////////////////////
#Область ГенерированиеДереваМаршрутов
	
&НаКлиенте
Процедура Реквизит1ПередНачаломИзменения(Элемент, Отказ)
	Если Элемент.ТекущиеДанные.Пользователь = "Согласование" ИЛИ Элемент.ТекущиеДанные.Пользователь = "Исполнение" ИЛИ Элемент.ТекущиеДанные.Пользователь = "Ознакомление" Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если Элемент.ТекущиеДанные.Пользователь = "Группа И" ИЛИ Элемент.ТекущиеДанные.Пользователь = "Группа ИЛИ" Тогда
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТиповС = Новый ОписаниеТипов(Массив);
		Элементы.Колонка1.ОграничениеТипа = ОписаниеТиповС;
		
		Элементы.Колонка1.РежимВыбораИзСписка = Истина;
		ТекСписок = Новый СписокЗначений;
		Элементы.Колонка1.СписокВыбора.Добавить("Группа И");
		Элементы.Колонка1.СписокВыбора.Добавить("Группа ИЛИ");
	КонецЕсли;
	//Элементы.Колонка1.ВыбиратьТип = Ложь;
	//Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Пользователь) Тогда
	//	Элемент.ТекущиеДанные.Пользователь = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	//КонецЕсли;
	
	Если Элемент.ТекущиеДанные.Обязателен Тогда
		Сообщить("Cубъект согласования " + Строка(Элемент.ТекущиеДанные.Пользователь) + " обязателен в маршруте! Перенаправление и редактирование невозможно!");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Реквизит1ПриАктивизацииСтроки(Элемент)
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		Если ТипЗнч(Элемент.ТекущиеДанные.Пользователь) = Тип("Строка") Тогда
			ТекущаяСтрокаГруппы = Элемент.ТекущиеДанные.ИдГруппы;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Реквизит1ПередУдалением(Элемент, Отказ)
	Если Элемент.ТекущиеДанные.Пользователь = "Согласование" ИЛИ Элемент.ТекущиеДанные.Пользователь = "Исполнение" ИЛИ Элемент.ТекущиеДанные.Пользователь = "Ознакомление" Тогда
		Отказ = Истина;	
	КонецЕсли;
	Если Элемент.ТекущиеДанные.Обязателен Тогда
		Сообщить("Cубъект согласования " + Строка(Элемент.ТекущиеДанные.Пользователь) + " обязателен в маршруте! Удаление невозможно!");
		Отказ = Истина;
	КонецЕсли;
	Если Элемент.ТекущиеДанные.Согласовано Тогда
		Сообщить("Cубъект согласования " + Строка(Элемент.ТекущиеДанные.Пользователь) + " уже участвовал в маршруте! Удаление невозможно!");
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГруппу(Команда)
	
	Элементы.Колонка1.СписокВыбора.Очистить();
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив);
	Элементы.Колонка1.ОграничениеТипа = ОписаниеТиповС;

	
	Элементы.ТаблицаФормы123.ДобавитьСтроку();
	Элементы.Колонка1.РежимВыбораИзСписка = Истина;
	ТекСписок = Новый СписокЗначений;
	Элементы.Колонка1.СписокВыбора.Добавить("Группа И");
	Элементы.Колонка1.СписокВыбора.Добавить("Группа ИЛИ");
КонецПроцедуры

&НаКлиенте
Процедура Реквизит1ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Элементы.Колонка1.СписокВыбора.Очистить();
	Элементы.Колонка1.РежимВыбораИзСписка = Ложь;
	Если Элемент.ТекущиеДанные.Пользователь = "Группа И" ИЛИ Элемент.ТекущиеДанные.Пользователь = "Группа ИЛИ" Тогда
		Элемент.ТекущиеДанные.ЭтоГруппа = Истина;
		ТекущаяСтрокаГруппы = Новый УникальныйИдентификатор;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.ИДГруппы) Тогда
		Элемент.ТекущиеДанные.ИДГруппы = ТекущаяСтрокаГруппы;
	КонецЕсли;
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.Пользователи"));
	//Массив.Добавить(Тип("ПеречислениеСсылка.ОсновныеДолжностиПредприятия"));
	//Массив.Добавить(Тип("СправочникСсылка.Д_Должности"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив);
	
	Элементы.Колонка1.ОграничениеТипа = ОписаниеТиповС;
	
	
	Уровень = 0;
	ТекЭлемент = Элемент.ТекущиеДанные.ПолучитьРодителя();
	Пока НЕ ТекЭлемент = Неопределено Цикл
		Уровень = Уровень + 1;
		ТекЭлемент = ТекЭлемент.ПолучитьРодителя();
	КонецЦикла;
	Элемент.ТекущиеДанные.Уровень = Уровень;
	
	Если Уровень = 1 Тогда
		Элемент.ТекущиеДанные.ТипГруппы = "Группа И";
	Иначе
		ТекРодитель = Элемент.ТекущиеДанные.ПолучитьРодителя();
		Если НЕ ТекРодитель = Неопределено Тогда
			Элемент.ТекущиеДанные.ТипГруппы = ТекРодитель.Пользователь;
		КонецЕсли;
	КонецЕсли;
	
	//работа с ТЧ
	//УстановитьИдСтроки(Элемент);
	

КонецПроцедуры

&НаКлиенте
Процедура Реквизит1ПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если НЕ Копирование Тогда
		Если НЕ ТипЗнч(Элемент.ТекущиеДанные.Пользователь) =  Тип("Строка") Тогда
			Отказ = Истина;
			Элемент.ТекущаяСтрока = МаршрутДерево.НайтиПоИдентификатору(Элемент.ТекущаяСтрока).ПолучитьРодителя().ПолучитьИдентификатор();
			Элемент.ДобавитьСтроку();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Реквизит1ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Согласовано = Ложь;
		Элемент.ТекущиеДанные.Пройден = Ложь;
		Элемент.ТекущиеДанные.Комментарии = "";
		Элемент.ТекущиеДанные.Согласователь = Неопределено;
		Элемент.ТекущиеДанные.ТекущийИсполнитель = Ложь;
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура Реквизит1ДопУсловияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОткрытьФормуМодально("Справочник.МаршрутыДвиженияЗаявок.Форма.ФормаДопУсловий", Новый Структура("ИД", Элемент.Родитель.ТекущиеДанные.ИДСтроки), ЭтаФорма);

КонецПроцедуры

&НаКлиенте                                                                     
Процедура Реквизит1Перетаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	а = 1;
	ЗначениеКуда = МаршрутДерево.НайтиПоИдентификатору(Строка);
	ЗначениеЧто = МаршрутДерево.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);	
	Если НЕ ЗначениеКуда.ИдГруппы = Элемент.ТекущиеДанные.ИдГруппы Тогда
		Вставка = Ложь;
		Если НЕ ТипЗнч(ЗначениеКуда.Пользователь) = Тип("Строка") Тогда
			Вставка = Истина;
			Пока НЕ ТипЗнч(ЗначениеКуда.Пользователь) = Тип("Строка") Цикл
				ЗначениеКуда = ЗначениеКуда.ПолучитьРодителя();			
			КонецЦикла;		
		КонецЕсли;
		
		Элемент.ТекущиеДанные.ИдГруппы = ЗначениеКуда.ИдГруппы;
		Уровень = 1; //т.к. получаем родителя у группы
		ТекЭлемент = ЗначениеКуда.ПолучитьРодителя();
		Пока НЕ ТекЭлемент = Неопределено Цикл
			Уровень = Уровень + 1;
			ТекЭлемент = ТекЭлемент.ПолучитьРодителя();
		КонецЦикла;
		Элемент.ТекущиеДанные.Уровень = Уровень;
		
		Если Уровень = 1 Тогда
			Элемент.ТекущиеДанные.ТипГруппы = "Группа И";
		Иначе
			Элемент.ТекущиеДанные.ТипГруппы = ЗначениеКуда.Пользователь;
		КонецЕсли;
		
		ЭлементыКуда = ЗначениеКуда.ПолучитьЭлементы();
		//Если Вставка Тогда
		//	НовыйЭлемент = ЭлементыКуда.Вставить(МаршрутДерево.НайтиПоИдентификатору(Строка).ПолучитьИдентификатор());
		//Иначе
		НовыйЭлемент = ЭлементыКуда.Добавить();
		//КонецЕсли;
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элемент.ТекущиеДанные);
		
		РодительЧто = ЗначениеЧто.ПолучитьРодителя();
		РодительЧто.ПолучитьЭлементы().Удалить(ЗначениеЧто);
		
	КонецЕсли;

	//Элемент.ТекущаяСтрока = Строка;                                              
	//Если НЕ ТипЗнч(Элемент.ТекущиеДанные.Пользователь) =  Тип("Строка") Тогда
	//	СтандартнаяОбработка = Ложь;
	//КонецЕсли;
КонецПроцедуры

#КонецОбласти 


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ВариантСогласованияПриИзменении(Неопределено);
КонецПроцедуры


&НаКлиенте
Процедура ВариантСогласованияПриИзменении(Элемент)
	
	
	Элементы.Согласование.Видимость = НЕ СложныйМаршрут;
	Элементы.Исполнение.Видимость = НЕ СложныйМаршрут;
	//Элементы.Группа1.Видимость = НЕ СложныйМаршрут;
	//Элементы.Группа8.Видимость = НЕ СложныйМаршрут;
	Элементы.НовыйВидМаршрута.Видимость = СложныйМаршрут;
	Элементы.Группа1.ОтображениеСтраниц = ?(СложныйМаршрут, ОтображениеСтраницФормы.Нет, ОтображениеСтраницФормы.ЗакладкиСверху);
	Если ВариантСогласования = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Смешанно") Тогда
		сабБПКлиентСервер.РазвернутьГруппировкиДерева(Элементы, МаршрутДерево);
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьСложныйМаршрут()
	
	//очищаем тек маршрут
	Тек = МаршрутДерево.ПолучитьЭлементы();
	Тек.Очистить();
	
	ТекМассМаршрутов = Новый Массив;
	ТекМассМаршрутов.Добавить(ЭтаФорма);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Колонка6");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Колонка7");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Колонка8");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Колонка81");
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МаршрутДерево.Пройден");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Неопределено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Колонка81");
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МаршрутДерево.Пройден");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Неопределено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	
	Для каждого ТекМаршрутСтрока Из ТекМассМаршрутов Цикл
		сабБПКлиентСервер.ДобавитьДеревоМаршрута(Элементы, Команды, ТекущаяСтрокаГруппы, МаршрутДерево, ТекМаршрутСтрока, УсловноеОформление, Новый Структура("ДопУсловияВидимость, ВремяНаВыполнение, ДоступенТипПользователи, ТекущийИсполнитель, Согласовано, Согласователь", Ложь, Истина, Истина, Истина, Истина, Истина) );
	КонецЦикла;

КонецПроцедуры

