Функция ФормаВыполненияСправочники(ЗадачаСсылка, ТочкаМаршрутаСсылка, Выборка) Экспорт
	
	//Если ТочкаМаршрутаСсылка = Перечисления.СогласованиеОбщееТочкиМаршрута.Действие1 Тогда 
	//	ИмяФормы = "Справочник.СогласованиеОбщее.Форма.ФормаПодготовки";
	//	
	//ИначеЕсли ТочкаМаршрутаСсылка = Перечисления.СогласованиеОбщееТочкиМаршрута.Действие5 Тогда 
	//	ИмяФормы = "Справочник.СогласованиеОбщее.Форма.ФормаОплаты";
	//ИначеЕсли ТочкаМаршрутаСсылка = Перечисления.СогласованиеОбщееТочкиМаршрута.Действие3 Тогда 
	//	ИмяФормы = "Справочник.СогласованиеОбщее.Форма.ФормаИсполнения";
	//Иначе
	//	Если ТипЗнч(ЗадачаСсылка.Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаОтгрузку") Тогда
	//		ИмяФормы = "Справочник.СогласованиеОбщее.Форма.ФормаСогласованияОтгрузка";		
	//	Иначе	
	//		ИмяФормы = "Справочник.СогласованиеОбщее.Форма.ФормаСогласования";		
	//	КонецЕсли;
	//КонецЕсли;
	
	ИмяФормы = "Справочник.СогласованиеОбщее.Форма." + ИмяФормыВыполненияСправочники(ТочкаМаршрутаСсылка, ЗадачаСсылка.Заявка);
		
	Результат = Новый Структура;
	Результат.Вставить("ПараметрыФормы", Новый Структура("Ключ, ТочкаМаршрута, Исполнитель, Должность",
			ЗадачаСсылка, ТочкаМаршрутаСсылка.Имя, Выборка.Исполнитель, Выборка.Должность));
	Результат.Вставить("ИмяФормы", ИмяФормы);
	Возврат Результат;
	
КонецФункции

Функция ИмяФормыВыполненияСправочники(ТочкаМаршрутаСсылка, Заявка = Неопределено) Экспорт
	
	Если ТочкаМаршрутаСсылка = Перечисления.СогласованиеОбщееТочкиМаршрута.Действие1 Тогда 
		Возврат "ФормаПодготовки";
		
	ИначеЕсли ТочкаМаршрутаСсылка = Перечисления.СогласованиеОбщееТочкиМаршрута.Действие5 ИЛИ ТочкаМаршрутаСсылка = Перечисления.СогласованиеОбщееТочкиМаршрута.Действие4 Тогда 
		Возврат "ФормаОплаты";
	ИначеЕсли ТочкаМаршрутаСсылка = Перечисления.СогласованиеОбщееТочкиМаршрута.Действие3 Тогда 
		Возврат "ФормаИсполнения";
	Иначе
		//Если Заявка <> Неопределено и  ТипЗнч(Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаОтгрузку") Тогда
		//	Возврат "ФормаСогласованияОтгрузка";		
		//Иначе	
			Возврат "ФормаСогласования";		
		//КонецЕсли;
	КонецЕсли;	
	
КонецФункции

Процедура ОтчетОВыполнении(ТабДок, Ссылка) Экспорт
	//{{_КОНСТРУКТОР_ПЕЧАТИ(Печать)
	
	
	Макет = Справочники.СогласованиеОбщее.ПолучитьМакет("ВыполненныеСправочники");
	Если Ссылка.Количество() Тогда
		ТекБп = БПСервер.НайтиТекущийБПСервер(Ссылка[0]);
		Если НЕ ТекБп = Неопределено Тогда
			ТекБпМетаданные = ТекБп.Метаданные().Имя;
		ИначеЕсли ТипЗнч(Ссылка[0]) = Тип("ДокументСсылка.БП_Поручение") ИЛИ ТипЗнч(Ссылка[0]) = Тип("ДокументСсылка.БП_Оповещение") ИЛИ ТипЗнч(Ссылка[0]) = Тип("СправочникСсылка.Контрагенты") Тогда
			ТекБпМетаданные = "СогласованиеОбщее";	
		ИначеЕсли ТипЗнч(Ссылка[0]) = Тип("ЗадачаСсылка.Задача") Тогда
			ТекБпМетаданные = Ссылка[0].БизнесПроцесс.Метаданные().Имя;
			МассивЗадач = Ссылка;
			Ссылка = Новый Массив;
			Для каждого ТекЭлемент Из МассивЗадач Цикл
				Ссылка.Добавить(ТекЭлемент.Заявка); //неоптимально, через точку цикл, но лениво и редко больше 1 элемента
			КонецЦикла; 
		Иначе	
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СогласованиеОбщее.Ссылка КАК БизнесПроцесс,
	|	СогласованиеОбщее.ДатаНачала КАК ДатаНачала,
	|	СогласованиеОбщее.ДатаЗавершения,
	|	СогласованиеОбщее.Описание,
	|	ВЫБОР
	|		КОГДА СогласованиеОбщее.Завершен = ЛОЖЬ
	|			ТОГДА РАЗНОСТЬДАТ(СогласованиеОбщее.ДатаНачала, &ТекДата, МИНУТА) / 60
	|		ИНАЧЕ РАЗНОСТЬДАТ(СогласованиеОбщее.ДатаНачала, СогласованиеОбщее.ДатаЗавершения, МИНУТА) / 60
	|	КОНЕЦ КАК ДлительностьЧас,
	|	ВЫБОР
	|		КОГДА СогласованиеОбщее.Завершен = ЛОЖЬ
	|			ТОГДА ""(в процессе)""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ВПроцессе,
	|	ВЫБОР
	|		КОГДА СогласованиеОбщее.Завершен = ЛОЖЬ
	|			ТОГДА РАЗНОСТЬДАТ(СогласованиеОбщее.ДатаНачала, &ТекДата, МИНУТА)
	|		ИНАЧЕ РАЗНОСТЬДАТ(СогласованиеОбщее.ДатаНачала, СогласованиеОбщее.ДатаЗавершения, МИНУТА)
	|	КОНЕЦ КАК ДлительностьМин,
	|	СогласованиеОбщее.Заявка
	|ИЗ
	|	БизнесПроцесс." + ТекБпМетаданные + " КАК СогласованиеОбщее
	|ГДЕ
	|	СогласованиеОбщее.Заявка.Ссылка В(&Заявка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БП_Поручение.Ссылка,
	|	БП_Поручение.ДатаНачала,
	|	БП_Поручение.ДатаЗавершения,
	|	БП_Поручение.Описание,
	|	ВЫБОР
	|		КОГДА БП_Поручение.Завершен = ЛОЖЬ
	|			ТОГДА РАЗНОСТЬДАТ(БП_Поручение.ДатаНачала, &ТекДата, МИНУТА) / 60
	|		ИНАЧЕ РАЗНОСТЬДАТ(БП_Поручение.ДатаНачала, БП_Поручение.ДатаЗавершения, МИНУТА) / 60
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА БП_Поручение.Завершен = ЛОЖЬ
	|			ТОГДА ""(в процессе)""
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА БП_Поручение.Завершен = ЛОЖЬ
	|			ТОГДА РАЗНОСТЬДАТ(БП_Поручение.ДатаНачала, &ТекДата, МИНУТА)
	|		ИНАЧЕ РАЗНОСТЬДАТ(БП_Поручение.ДатаНачала, БП_Поручение.ДатаЗавершения, МИНУТА)
	|	КОНЕЦ,
	|	БП_Поручение.Ссылка
	|ИЗ
	|	Документ.БП_Поручение КАК БП_Поручение
	|ГДЕ
	|	БП_Поручение.Ссылка В(&Заявка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БП_Оповещение.Ссылка,
	|	БП_Оповещение.ДатаНачала,
	|	БП_Оповещение.ДатаЗавершения,
	|	БП_Оповещение.Описание,
	|	ВЫБОР
	|		КОГДА БП_Оповещение.Завершен = ЛОЖЬ
	|			ТОГДА РАЗНОСТЬДАТ(БП_Оповещение.ДатаНачала, &ТекДата, МИНУТА) / 60
	|		ИНАЧЕ РАЗНОСТЬДАТ(БП_Оповещение.ДатаНачала, БП_Оповещение.ДатаЗавершения, МИНУТА) / 60
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА БП_Оповещение.Завершен = ЛОЖЬ
	|			ТОГДА ""(в процессе)""
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА БП_Оповещение.Завершен = ЛОЖЬ
	|			ТОГДА РАЗНОСТЬДАТ(БП_Оповещение.ДатаНачала, &ТекДата, МИНУТА)
	|		ИНАЧЕ РАЗНОСТЬДАТ(БП_Оповещение.ДатаНачала, БП_Оповещение.ДатаЗавершения, МИНУТА)
	|	КОНЕЦ,
	|	БП_Оповещение.Ссылка
	|ИЗ
	|	Документ.БП_Оповещение КАК БП_Оповещение
	|ГДЕ
	|	БП_Оповещение.Ссылка В(&Заявка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка,
	|	NULL,
	|	NULL,
	|	Контрагенты.Описание,
	|	0,
	|	ВЫБОР
	|		КОГДА НЕ ПроверкаОбъектовБД.Проверен
	|			ТОГДА ""(в процессе)""
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	0,
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроверкаОбъектовБД КАК ПроверкаОбъектовБД
	|		ПО (Контрагенты.Ссылка = (ВЫРАЗИТЬ(ПроверкаОбъектовБД.Объект КАК Справочник.Контрагенты)))
	|ГДЕ
	|	Контрагенты.Ссылка В(&Заявка)";
	Запрос.Параметры.Вставить("Заявка", Ссылка);
	Запрос.Параметры.Вставить("ТекДата", ТекущаяДата());
	Результат = Запрос.Выполнить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Задача.Наименование КАК Задача,
	               |	Задача.ДатаНачала КАК ДатаНачала,
	               |	Задача.ДатаИсполнения,
	               |	ВЫБОР
	               |		КОГДА Задача.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	               |			ТОГДА Задача.Должность
	               |		ИНАЧЕ Задача.Исполнитель
	               |	КОНЕЦ КАК Исполнитель,
	               |	Задача.Комментарии,
	               |	ВЫБОР
	               |		КОГДА Задача.Выполнена = ЛОЖЬ
	               |			ТОГДА РАЗНОСТЬДАТ(Задача.ДатаНачала, &ТекДата, МИНУТА) / 60
	               |		ИНАЧЕ РАЗНОСТЬДАТ(Задача.ДатаНачала, Задача.ДатаИсполнения, МИНУТА) / 60
	               |	КОНЕЦ КАК ДлительностьЧас,
	               |	ВЫБОР
	               |		КОГДА Задача.Выполнена = ЛОЖЬ
	               |			ТОГДА ""(в процессе)""
	               |		ИНАЧЕ """"
	               |	КОНЕЦ КАК ВПроцессе,
	               |	ВЫБОР
	               |		КОГДА Задача.Выполнена = ЛОЖЬ
	               |			ТОГДА РАЗНОСТЬДАТ(Задача.ДатаНачала, &ТекДата, МИНУТА)
	               |		ИНАЧЕ РАЗНОСТЬДАТ(Задача.ДатаНачала, Задача.ДатаИсполнения, МИНУТА)
	               |	КОНЕЦ КАК ДлительностьМин,
	               |	Задача.РезультатВыполнения,
	               |	Задача.Заявка,
	               |	Задача.Пользователь,
	               |	ВЫБОР
	               |		КОГДА Задача.Выполнена = ЛОЖЬ
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Порядок,
	               |	ДАТАВРЕМЯ(1, 1, 1) КАК ФактическаяДата,
	               |	Задача.СрокВыполнения
	               |ИЗ
	               |	Справочник.Задача КАК Задача
	               |ГДЕ
	               |	Задача.Заявка В(&Заявка)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Задача.Наименование,
	               |	Задача.ДатаНачала,
	               |	Задача.ДатаИсполнения,
	               |	ВЫБОР
	               |		КОГДА Задача.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	               |			ТОГДА Задача.Должность
	               |		ИНАЧЕ Задача.Исполнитель
	               |	КОНЕЦ,
	               |	Задача.Комментарии,
	               |	ВЫБОР
	               |		КОГДА Задача.Выполнена = ЛОЖЬ
	               |			ТОГДА РАЗНОСТЬДАТ(Задача.ДатаНачала, &ТекДата, МИНУТА) / 60
	               |		ИНАЧЕ РАЗНОСТЬДАТ(Задача.ДатаНачала, Задача.ДатаИсполнения, МИНУТА) / 60
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА Задача.Выполнена = ЛОЖЬ
	               |			ТОГДА ""(в процессе)""
	               |		ИНАЧЕ """"
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА Задача.Выполнена = ЛОЖЬ
	               |			ТОГДА РАЗНОСТЬДАТ(Задача.ДатаНачала, &ТекДата, МИНУТА)
	               |		ИНАЧЕ РАЗНОСТЬДАТ(Задача.ДатаНачала, Задача.ДатаИсполнения, МИНУТА)
	               |	КОНЕЦ,
	               |	Задача.РезультатВыполнения,
	               |	ВЫРАЗИТЬ(Задача.БизнесПроцесс КАК Справочник.Согласование1).Заявка,
	               |	Задача.Пользователь,
	               |	ВЫБОР
	               |		КОГДА Задача.Выполнена = ЛОЖЬ
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ,
	               |	Задача.Дата,
	               |	Задача.СрокВыполнения
	               |ИЗ
	               |	Справочник.Задача КАК Задача
	               |ГДЕ
	               |	Задача.БизнесПроцесс ССЫЛКА Справочник.Согласование1
	               |	И Задача.ТочкаМаршрута = ЗНАЧЕНИЕ(Перечисление.Согласование1ТочкиМаршрута.ПроверкаКонтрагентов)
	               |	И ВЫРАЗИТЬ(Задача.БизнесПроцесс КАК Справочник.Согласование1).Заявка В (&Заявка)
	               |	И НЕ Задача.ПометкаУдаления
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Порядок,
	               |	ДатаНачала";
	
	Запрос.УстановитьПараметр("Заявка", Ссылка);        
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	
	РезультатСправочники = Запрос.Выполнить();
	
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	Шапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьЗаявкаБезналШапка = Макет.ПолучитьОбласть("ЗаявкаБезналШапка");
	ОбластьЗаявкаБезнал = Макет.ПолучитьОбласть("ЗаявкаБезнал");
	ОбластьИтого = Макет.ПолучитьОбласть("Итого");
	
	ТабДок.Очистить();
	
	ВставлятьРазделительСтраниц = Ложь;
	
	Для каждого ТекСсылка Из Ссылка Цикл
		НомерСтроки = 0;
		СтруктураОтбора = Новый Структура("Заявка", ТекСсылка); 
		Выборка = Результат.Выбрать();
		Пока Выборка.НайтиСледующий(СтруктураОтбора) Цикл
			Если ВставлятьРазделительСтраниц Тогда
				ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ОбластьЗаголовок.Параметры.Заполнить(Выборка);
			ТабДок.Вывести(ОбластьЗаголовок);
			
			Шапка.Параметры.Заполнить(Выборка);
			Шапка.Параметры.ДлительностьЧас = Цел(Выборка.ДлительностьЧас);
			Шапка.Параметры.ДлительностьМин = Окр((Выборка.ДлительностьЧас - Цел(Выборка.ДлительностьЧас)) * 60, 0);
			
			ТабДок.Вывести(Шапка, Выборка.Уровень());
			
			ТабДок.Вывести(ОбластьЗаявкаБезналШапка);
			
			СуммаВсего = 0;
			ВыборкаСправочники = РезультатСправочники.Выбрать();
			Пока ВыборкаСправочники.НайтиСледующий(СтруктураОтбора) Цикл
				НомерСтроки = НомерСтроки + 1;
				ОбластьЗаявкаБезнал.Параметры.Заполнить(ВыборкаСправочники);
				КомментарииКЗадаче = ОбластьЗаявкаБезнал.Параметры.Комментарии;
				ОбластьЗаявкаБезнал.Параметры.Комментарии = КомментарииКЗадаче + ?(ЗначениеЗаполнено(ВыборкаСправочники.ФактическаяДата), " (Фактическая дата Справочники " + ВыборкаСправочники.ФактическаяДата + ")", "");
				ОбластьЗаявкаБезнал.Параметры.ДлительностьЧас = Цел(ВыборкаСправочники.ДлительностьЧас);
				
				ОбластьЗаявкаБезнал.Параметры.ДлительностьМин = Окр((ВыборкаСправочники.ДлительностьЧас - Цел(ВыборкаСправочники.ДлительностьЧас)) * 60, 0);
				ОбластьЗаявкаБезнал.Параметры.НомерСтроки = НомерСтроки;
				ТабДок.Вывести(ОбластьЗаявкаБезнал, ВыборкаСправочники.Уровень());
			КонецЦикла;
			
			//ТабДок.Вывести(ОбластьИтого);
			ВставлятьРазделительСтраниц = Истина;
		КонецЦикла;
	КонецЦикла; 
	
	//}}
КонецПроцедуры

Процедура ДобавитьСтрокуДопСогласование(ТекОбъект, ТекПользователь, РольПользователя, Добавлять) Экспорт

	Если Не ПустаяСтрока(ТекПользователь) И Добавлять Тогда
		ОтобранныеСтроки = ТекОбъект.ДопСогласование.НайтиСтроки(Новый Структура("СубъектСогласования", ТекПользователь));
		Если НЕ ОтобранныеСтроки.Количество() Тогда
			НоваяСтрока = ТекОбъект.ДопСогласование.Добавить();
			НоваяСтрока.СубъектСогласования = ТекПользователь;
			НоваяСтрока.РольПользователя = РольПользователя;
		КонецЕсли;
	КонецЕсли;
	

КонецПроцедуры

