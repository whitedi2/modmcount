
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	БюджетныйНаСервере.ДействияПриСозданииФормыСправочника(ЭтаФорма);
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	Для каждого ТекПользователь Из ПараметрыСеанса.ДоступныеПользователи Цикл
		ДоступныеПользователи.Добавить(ТекПользователь);
	КонецЦикла; 
	ЭтоАдминистратор = БюджетныйНаСервере.РольАдминаДоступнаСервер();
	
	//заполняем доступные пользователи и заголовок АРМ
	ЗаполнитьДоступныеПользователи();
	
	//заполняем статус пользователя
	ОбновитьКомментарийПоСтатусу();
	
	УстановитьПривилегированныйРежим(Истина);
	//СеансыИнформационнойБазы = ПолучитьСеансыИнформационнойБазы();
	//ТекПользователиМассив = Новый Массив;
	//ВсегоOnLine = 0;
	//
	//Для Каждого СеансИБ Из СеансыИнформационнойБазы Цикл
	//	ТекПользователиМассив.Добавить(СеансИБ.Пользователь.Имя);
	//	ВсегоOnLine = ВсегоOnLine + 1;
	//КонецЦикла;
	
	ПоказыватьВсехПодчиненныхИзХранилища = ХранилищеНастроекДанныхФорм.Загрузить("Справочник.Пользователи.Форма.ФормаМоиПодчиненные", "ПоказыватьВсехПодчиненных",  Новый Структура("ПоказыватьВсехПодчиненных", ПоказыватьВсехПодчиненных), Строка(ПараметрыСеанса.ТекущийПользователь.Наименование));
	
	УстановитьПривилегированныйРежим(Ложь);
		
	Если ПоказыватьВсехПодчиненныхИзХранилища = Неопределено Тогда
		НепрямоеПодчинение = Ложь;
		ПоказыватьТолькоНевыполненныеЗадания = Истина;
	Иначе
		НепрямоеПодчинение = ПоказыватьВсехПодчиненныхИзХранилища.ПоказыватьВсехПодчиненных;
		Если ПоказыватьВсехПодчиненныхИзХранилища.Свойство("ПоказыватьТолькоНевыполненныеЗадания") Тогда
			ПоказыватьТолькоНевыполненныеЗадания = ПоказыватьВсехПодчиненныхИзХранилища.ПоказыватьТолькоНевыполненныеЗадания;
		Иначе
			ПоказыватьТолькоНевыполненныеЗадания = Истина;
		КонецЕсли;
	КонецЕсли;	  
	
	
	ГруппировкаЗаданий = "По заданиям";
	
	ЗаполнитьВидыОпераций();
	
	//доступность кнопок спиртовой базы
	
	//ТекИБ = Константы.ТекущаяИБ.Получить();
	//
	//КнопкаЗапуска1 = сабОбщегоНазначения.ПолучитьЗначениеСвойства(ТекИБ, "Показывать команду ""Запуск 1С:УК"" на Начальной странице");
	//КнопкаЗапуска2 = сабОбщегоНазначения.ПолучитьЗначениеСвойства(ТекИБ, "Показывать команду ""Запуск 1С:Спирты"" на Начальной странице");
	//КнопкаЗапуска3 = сабОбщегоНазначения.ПолучитьЗначениеСвойства(ТекИБ, "Показывать команду ""Запуск 1С:ГУК"" на Начальной странице");
	//КнопкаЗапуска4 = сабОбщегоНазначения.ПолучитьЗначениеСвойства(ТекИБ, "Показывать команду ""Запуск 1С:УК-нью"" на Начальной странице");
	//КнопкаЗапуска5 = сабОбщегоНазначения.ПолучитьЗначениеСвойства(ТекИБ, "Показывать команду ""Запуск 1С:ЛП"" на Начальной странице");
	//КнопкаЗапуска6 = сабОбщегоНазначения.ПолучитьЗначениеСвойства(ТекИБ, "Показывать команду ""Запуск 1С:Сеть"" на Начальной странице");
	//
	//Если КнопкаЗапуска1 = Неопределено Тогда
	//	КнопкаЗапуска1 = Ложь;
	//КонецЕсли;
	//
	//КнопкаЗапускаПользователя4 = сабОбщегоНазначения.ПолучитьЗначениеСвойства(ПараметрыСеанса.ТекущийПользователь, "Показывать команду ""Запуск 1С:УК-нью"" на Начальной странице");
	//КнопкаЗапускаПользователя5 = сабОбщегоНазначения.ПолучитьЗначениеСвойства(ПараметрыСеанса.ТекущийПользователь, "Показывать команду ""Запуск 1С:ЛП"" на Начальной странице");
	//
	//Если КнопкаЗапуска1 = Неопределено Тогда
	//	КнопкаЗапуска1 = Ложь;
	//КонецЕсли;
	//Если КнопкаЗапуска2 = Неопределено Тогда
	//	КнопкаЗапуска2 = Ложь;
	//КонецЕсли;
	//Если КнопкаЗапуска3 = Неопределено Тогда
	//	КнопкаЗапуска3 = Ложь;
	//КонецЕсли;
	//Если КнопкаЗапуска4 = Неопределено Тогда
	//	КнопкаЗапуска4 = Ложь;
	//КонецЕсли;
	//Если КнопкаЗапуска5 = Неопределено Тогда
	//	КнопкаЗапуска5 = Ложь;
	//КонецЕсли;
	//Если КнопкаЗапуска6 = Неопределено Тогда
	//	КнопкаЗапуска6 = Ложь;
	//КонецЕсли;
	//Если КнопкаЗапускаПользователя4 = Неопределено Тогда
	//	КнопкаЗапускаПользователя4 = Ложь;
	//КонецЕсли;
	//Если КнопкаЗапускаПользователя5 = Неопределено Тогда
	//	КнопкаЗапускаПользователя5 = Ложь;
	//КонецЕсли;
	//
	////ДоступВСпиртовуюБазу = ПараметрыСеанса.ТекущийПользователь.ДоступВСпиртовуюБазу;
	//
	//Элементы.Запустить1С.Видимость = КнопкаЗапуска1;
	//Элементы.Запустить1С1.Видимость = КнопкаЗапуска2;
	//Элементы.Запустить1С3.Видимость = КнопкаЗапуска3;
	//Элементы.Запустить1С2.Видимость = КнопкаЗапуска4 И КнопкаЗапускаПользователя4;
	//Элементы.Запустить1С4.Видимость = КнопкаЗапуска5 И КнопкаЗапускаПользователя5;
	//Элементы.Запустить1С5.Видимость = КнопкаЗапуска6;
	//
	//Если НЕ Элементы.Запустить1С.Видимость И НЕ Элементы.Запустить1С1.Видимость И НЕ Элементы.Запустить1С3.Видимость И НЕ Элементы.Запустить1С2.Видимость И НЕ Элементы.Запустить1С4.Видимость Тогда
	//	Элементы.Декорация6.Видимость = Ложь;	
	//КонецЕсли;
	
	МодульТехподдержкиИспользуется = Ложь;
	
	Если МодульТехподдержкиИспользуется Тогда
		Элементы.ПользователиЧатОбращениеВТехподдержку.Видимость = ЭтоАдминистратор;	
		Элементы.ГруппаОбсуждения.Видимость = Истина;
	Иначе
		Элементы.ГруппаОбсуждения.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.Группа1.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПодключитьОбработчикОжидания("ЗаполнитьТЧКлиент", 180);
	ЗаполнитьТЧЗадач(1);
	//ЗаполнитьЗаданиями();
	ЗаполнитьДеревоНавигации();
	
	
	Если Элементы.Группа1.Видимость И Элементы.Навигация.Видимость Тогда
		Элементы.Навигация.Развернуть(ИдентификаторЗаданий);
		Элементы.Навигация.Развернуть(1);
	КонецЕсли;
	
	//Элементы.Навигация.ТекущаяСтрока = 0;
	
	//работа с чатом
	//Если МодульТехподдержкиИспользуется Тогда
	//	сабВнутреннийЧатКлиент.ЗапуститьНачальныеПроцедурыЧата(ПользователиЧат, чатПредметОбсуждения, СтрокаИстории, ИсторияЧатHTML, Элементы);
	//	ПодключитьОбработчикОжидания("ОбновитьЧат", 15);
	//КонецЕсли;
	
	ВидимостьДляМобильногоКлиента();
	//ПредупреждениеНовогоСообщенияЧата();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьДляМобильногоКлиента()
	#Если МобильныйКлиент ИЛИ МобильноеПриложениеКлиент Тогда
		Элементы.Группа1.Видимость = Ложь;
		Элементы.УниверсальнаяФормаЗадачи.Видимость = Ложь;
		Элементы.ГруппаОбсуждения.Видимость = Ложь;
		Элементы.ТекЗадачиКомандаСписка.Видимость = Ложь;
		Элементы.ТекЗадачи.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("Пункт", "Входящие"));
	#КонецЕсли	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьДоступныеПользователи()
	
	Если Параметры.Свойство("ЗадачиПодчиненных") Тогда
		ЗадачиПодчиненных = Истина;
	КонецЕсли;	
	
	
	Элементы.ПоказатьЗадачиПользователя.СписокВыбора.Очистить();
	Элементы.ПоказатьЗадачиПользователя.СписокВыбора.Добавить("Все доступные");
	
	Если ЗадачиПодчиненных Тогда
		Заголовок = "Задачи подчиненных: " + ТекущийПользователь;
		Руководитель = ТекущийПользователь;
		МассивПользователей = Новый СписокЗначений;
		ВыбратьПодчиненных(МассивПользователей, Руководитель);
	Иначе
		Заголовок = "Задачи: " + ТекущийПользователь;
		МассивПользователей = ДоступныеПользователи;
	КонецЕсли;
	
	
	Для Каждого ТекПользователь Из МассивПользователей Цикл
		Элементы.ПоказатьЗадачиПользователя.СписокВыбора.Добавить(ТекПользователь.Значение);
	КонецЦикла;
	
	Если ЗадачиПодчиненных Тогда    
		Если ПоказатьЗадачиПользователя = Неопределено Тогда
			Если Параметры.Свойство("КонкретныйПодчиненный") Тогда
				ПоказатьЗадачиПользователя = Параметры.КонкретныйПодчиненный;
			Иначе	
				ПоказатьЗадачиПользователя = "Все доступные";
			КонецЕсли;
		КонецЕсли;	
	Иначе	
		ПоказатьЗадачиПользователя = ПараметрыСеанса.АктивныйПользователь;
	КонецЕсли;
	
	Элементы.ПоказатьЗадачиПользователя.Видимость = (Элементы.ПоказатьЗадачиПользователя.СписокВыбора.Количество() > 2);
	
	
КонецПроцедуры

#Область РаботаСДеревомНавигации

&НаКлиенте
Функция ЕстьЭлементТекзадания(КоллекцияЭлементов, НаименованиеПункта)
	Для каждого ТекЭлемент Из КоллекцияЭлементов Цикл
		Если ТекЭлемент.Ссылка = НаименованиеПункта Тогда
			Возврат ТекЭлемент;	
		КонецЕсли;
		Если ТекЭлемент.Исполнитель = НаименованиеПункта Тогда
			Возврат ТекЭлемент;	
		КонецЕсли;	
		
	КонецЦикла; 
	Возврат Неопределено;	
	
КонецФункции // ()

&НаКлиенте
Процедура ЗаполнитьДеревоНавигации()
	
	
	сабОбщегоНазначенияКлиентПереопределяемый.ЗаполнитьДеревоНавигации(Навигация, ТекЗадачи, ТекЗадачиУр1, ТекЗадачиУр2, ТекЗадачиУр3, ТекЗаданияУр2, КоличествоСтрок);
	
	КоличествоНовыхСообщенийЧата = КоличествоНовыхСообщенийЧата();
	
	ЗаполнитьДеревоЗаданий();	
	
	
КонецПроцедуры

#КонецОбласти 

&НаСервере
Процедура заполнитьТЧЗадач(ИндексТекСтроки)
	КоличествоНовыхЗадач = ?(ЕстьАктивностьПользователяЗадач, 0, ПараметрыСеанса.МассивНевыполненныхЗадач);
	
	Если ЗадачиПодчиненных Тогда
		Руководитель = ПараметрыСеанса.ТекущийПользователь;
		МассивПользователей = Новый Массив;
		ВыбратьПодчиненных(МассивПользователей, Руководитель);
	Иначе
		МассивПользователей = ПараметрыСеанса.ДоступныеПользователи;
	КонецЕсли;
	
	
	//Запрос.УстановитьПараметр("Входящие", ТекНавигация);
	
	//ТочкиИсполнения = Новый Массив;
	//ТочкиИсполнения.Добавить(Перечисления.Согласование1ТочкиМаршрута.Действие5);
	//ТочкиИсполнения.Добавить(Перечисления.Согласование2ТочкиМаршрута.Действие5);
	//ТочкиИсполнения.Добавить(Перечисления.Согласование3ТочкиМаршрута.Действие5);
	//ТочкиИсполнения.Добавить(Перечисления.Согласование3ТочкиМаршрута.Действие6);
	//ТочкиИсполнения.Добавить(Перечисления.ЗаявкиАдминистраторуТочкиМаршрута.Действие4);
	//ТочкиИсполнения.Добавить(Перечисления.ЗаявкиАдминистраторуТочкиМаршрута.Действие5);
	//ТочкиИсполнения.Добавить(Перечисления.ЗаявкиАдминистраторуТочкиМаршрута.Действие6);
	//ТочкиИсполнения.Добавить(Перечисления.СогласованиеОбщееТочкиМаршрута.Действие5);
	
	Запрос = БПСервер.СоздатьЗапросСписокМоихЗадач();   // !! При изменении параметров запроса необходимо изменить их и в модуле веб-сервиса Mobile !!
	Запрос.УстановитьПараметр("Испол", ?(ПоказатьЗадачиПользователя = "Все доступные", МассивПользователей, ПоказатьЗадачиПользователя));
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ТекущийПользователь", ?(ПоказатьЗадачиПользователя = "Все доступные", ПараметрыСеанса.ТекущийПользователь, ПоказатьЗадачиПользователя));
	Запрос.УстановитьПараметр("ВсеИсходящиеЗадачи", ПоказатьВсеИсходящиеЗадачи);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();
	КоличествоСтрок = Выборка.Количество();
	//ТекИдентификатор = ТекИдентификатор + КоличествоСтрок;
	
	
	Если ИндексТекСтроки = Неопределено Тогда
		ТекИндексТекЗадач = 0;	
	Иначе	
		ТекИндексТекЗадач = ТекЗадачи.Индекс(ТекЗадачи.НайтиПоИдентификатору(ИндексТекСтроки));
	КонецЕсли;
	
	Если ТекИндексТекЗадач = -1 Тогда // позиционируемся на первой строке
		ТекЗадачи.Очистить();
		Обновление = Ложь;
		Элементы.ТекЗадачи.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("Пункт2", "Входящие"));
	Иначе
		Обновление = ТекЗадачи.Количество();
	КонецЕсли;
	
	//30 исходящих задач
	КоличествоИсходящих = 0;
	
	//ТекПункт = Неопределено;
	
	Для каждого ТекЗадача Из Выборка Цикл
		
		//Если НЕ ТекПункт = ТекЗадача.Пункт Тогда
		//	НоваяСтрока = ТекЗадачи.Добавить();
		//	НоваяСтрока.Наименование = ТекЗадача.Пункт;			
		//	НоваяСтрока.Пункт = "Входящие";
		//	ТекПункт = ТекЗадача.Пункт;
		//КонецЕсли;
		//
		//
		//Если ТекЗадача.Пункт = "В работе" ИЛИ ТекЗадача.Пункт = "Делегированные мне" Тогда
		//	ТекЗадача.Пункт = "Входящие";
		//КонецЕсли;
		
		
		//Если ТекЗадача.Пункт = "Исходящие" Тогда
		//	Если КоличествоИсходящих > 30 Тогда
		//		Продолжить;			
		//	КонецЕсли;
		//	КоличествоИсходящих = КоличествоИсходящих + 1;			
		//КонецЕсли;

		
		НайденнаяЗадача = ТекЗадачи.НайтиСтроки(Новый Структура("Ссылка, Пункт", ТекЗадача.Ссылка, ТекЗадача.Пункт));
		Если НЕ НайденнаяЗадача.Количество() Тогда
			Если Обновление Тогда
				НоваяСтрока = ТекЗадачи.Вставить(0);
			Иначе	
				НоваяСтрока = ТекЗадачи.Добавить();
			КонецЕсли;		
		Иначе
			НоваяСтрока = НайденнаяЗадача[0];
		КонецЕсли;
		
		////проверка на необходимость обновления
		Если НЕ НоваяСтрока["Описание"] = ТекЗадача["Описание"] ИЛИ
			НЕ НоваяСтрока["Ссылка"] = ТекЗадача["Ссылка"]  ИЛИ
			НЕ НоваяСтрока["СрокВыполнения"] = ТекЗадача["СрокВыполнения"] ИЛИ 
			НЕ НоваяСтрока["Пункт"] = ТекЗадача["Пункт"] ИЛИ
			НЕ НоваяСтрока["Делегирование"] = ТекЗадача["Делегирование"] ИЛИ
			НЕ НоваяСтрока["Новая"] = ТекЗадача["Новая"] ИЛИ 
			НЕ НоваяСтрока["Дата"] = ТекЗадача["Дата"] ИЛИ
			НЕ НоваяСтрока["КомандаСписка"] = ТекЗадача["КомандаСписка"] ИЛИ
			НЕ НоваяСтрока["ВРаботе"] = ТекЗадача["ВРаботе"]
			Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекЗадача);
			//НоваяСтрока.ОсталосьДней = ?(ТекЗадача.ОсталосьДней, "(" + Строка(ТекЗадача.ОсталосьДней) + ")", "");
		КонецЕсли;
		//КонецЕсли;
		Если ТекЗадача.Пункт = "На контроле" Тогда
			НоваяСтрока.НаКонтроле = Истина;
		КонецЕсли;	
	КонецЦикла;
	
	МассивЛишних = Новый Массив;
	Для каждого ТекСтрока Из ТекЗадачи Цикл
		Если Не ЗначениеЗаполнено(ТекСтрока.Ссылка) Тогда
			Продолжить;		
		КонецЕсли;
		Если НЕ Выборка.НайтиСтроки(Новый Структура("Ссылка, Пункт", ТекСтрока.Ссылка, ТекСтрока.Пункт)).Количество()  Тогда
			МассивЛишних.Добавить(ТекСтрока);		
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого ТекСТрока Из МассивЛишних Цикл
		ТекЗадачи.Удалить(ТекСТрока);
	КонецЦикла;
	
	//сворачиваем ткзадачи
	СвернутьЗадачи();

	//заполняем заданиями
	ЗаполнитьЗаданиями();
	
КонецПроцедуры

&НаСервере
Процедура СвернутьЗадачи()

	
	ТЗ = ТекЗадачи.Выгрузить();
	ТЗ.Свернуть("ТипДокумента, Пункт, Проект", "Колич, КоличНовая");
	ТекЗадачиУр1.Загрузить(ТЗ);
	
	ТЗ0 = ТЗ.Скопировать();
	ТЗ0.Свернуть("Пункт, Проект", "Колич, КоличНовая");
	ТЗ0.Сортировать("Пункт, Проект");
	ТекЗадачиУр3.Загрузить(ТЗ0);
	
	ТЗ2 = ТЗ.Скопировать();
	ТЗ2.Свернуть("Пункт", "Колич, КоличНовая");
	ТЗ.Сортировать("ТипДокумента Возр");
	ТекЗадачиУр2.Загрузить(ТЗ2);


КонецПроцедуры


&НаСервере
Процедура ОбновитьКомментарийПоСтатусу(ТекОтпуск = Неопределено)
	
	ТекСтатус = БПСервер.ПолучитьТекущийСтатус();
	Текотпуск = ПолучитьТекущийОтпуск();
	Если Не ТекСтатус = Неопределено Тогда
		ТекущийСтатус = "Ваш текущий статус: " + Строка(ТекСтатус.ТекущийСтатус);
	Иначе
		ТекущийСтатус = "Ваш текущий статус: На работе";
	КонецЕсли;

	
	Если ТекущийСтатус = "Ваш текущий статус: На работе" Тогда
		Элементы.ТекущийСтатус.Подсказка = "Задачи не делегируются на подчиненных.";
	ИначеЕсли ТекущийСтатус = "Ваш текущий статус: В отпуске" И НЕ ТекОтпуск = Неопределено Тогда
		Элементы.ТекущийСтатус.Подсказка = "Замещающий: " + ?(ЗначениеЗаполнено(ТекОтпуск.Замещающий), ТекОтпуск.Замещающий, "отсутствует") + ". Делегирование задач между подчиненными: " + ?(ТекОтпуск.ДелегироватьЗадачиНаПодчиненных, "Да", "Нет") ;	
	Иначе
		Элементы.ТекущийСтатус.Подсказка = "Внимание! Ваши задачи, по возможности, будут делегированы межды прямыми подчиненными.";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьДеревоЗадач" Тогда
		ЗаполнитьДеревоНавигации();
	ИначеЕсли ИмяСобытия = "ОбновитьСписокЗадач" Тогда
		//Если Параметр.Свойство("ТекЗадача") Тогда
		//	ОтобранныеКУдалению = ТекЗадачи.НайтиСтроки(Новый Структура("Ссылка", Параметр.ТекЗадача)); 
		//	Для каждого ТекЗадача Из ОтобранныеКУдалению Цикл
		//		ТекЗадачи.Удалить(ТекЗадача);
		//	КонецЦикла;
		//Иначе
			ЗаполнитьТЧКлиент();
		//КонецЕсли;
	ИначеЕсли ИмяСобытия = "ПрочитатьТекущуюЗадачу" Тогда
		
		ОтобранныеСТроки = ТекЗадачи.НайтиСтроки(Новый Структура("Ссылка", Параметр.ПредыдущаяСсылка)); 
		Для каждого ТекСтрока Из ОтобранныеСТроки Цикл
			ТекСтрока.Новая = Ложь;
			ТекСтрока.КоличНовая = 0;
		КонецЦикла;
		Если ОтобранныеСТроки.Количество() Тогда
			СвернутьЗадачи();
			ЗаполнитьДеревоНавигации();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ЗаписьНовойГруппыСПредметомОбсуждения" Тогда //для чата
		ОбработатьОповещениеПоПредмету(Параметр);
	ИначеЕсли ИмяСобытия = "ТекущееОбращение" Тогда //для чата
		СпозиционироватьсяНаДокументе(Параметр);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СпозиционироватьсяНаДокументе(Документ)
	НайденныеСтроки = ТекЗадачи.НайтиСтроки(Новый Структура("Документ", Документ));
	Для каждого ТекНайденнаяСтрока Из НайденныеСтроки Цикл
		Элементы.ТекЗадачи.ТекущаяСтрока = ТекНайденнаяСтрока.ПолучитьИдентификатор();	
	КонецЦикла;	
КонецПроцедуры


&НаСервереБезКонтекста
Функция КоличествоНовыхСообщенийЧата()
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	Ч_СообщенияЧата.Текст,
	//               |	Ч_СообщенияЧата.ДатаВремя,
	//               |	Ч_СообщенияЧата.ИдентификаторСообщения,
	//               |	Ч_СообщенияЧата.Автор,
	//               |	Ч_СообщенияЧата.Кому
	//               |ИЗ
	//               |	РегистрСведений.Ч_СообщенияЧата КАК Ч_СообщенияЧата
	//               |ГДЕ
	//               |	Ч_СообщенияЧата.Кому В(&Кому)
	//               |	И Ч_СообщенияЧата.Прочитано = ЛОЖЬ";
	//
	//			   
	//МассивПользователей = Новый Массив;
	//МассивПользователей.Добавить(ПараметрыСеанса.ТекущийПользователь);
	//Если БюджетныйНаСервере.РольАдминаДоступнаСервер() Тогда
	//	МассивПользователей.Добавить(Справочники.Пользователи.Администратор);
	//КонецЕсли;
	//Запрос.УстановитьПараметр("Кому", МассивПользователей);
	//
	//Результат = Запрос.Выполнить();
	//Выборка = Результат.Выбрать();
	//
	//Возврат Выборка.Количество();
	Возврат 0;	
	
КонецФункции // ()

&НаСервереБезКонтекста
Функция КоличествоНовыхСообщенийЧатаТехподдержки()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Ч_СообщенияЧата.Текст,
	               |	Ч_СообщенияЧата.ДатаВремя,
	               |	Ч_СообщенияЧата.ИдентификаторСообщения,
	               |	Ч_СообщенияЧата.Автор,
	               |	Ч_СообщенияЧата.Кому
	               |ИЗ
	               |	РегистрСведений.Ч_СообщенияЧата КАК Ч_СообщенияЧата
	               |ГДЕ
	               |	Ч_СообщенияЧата.СообщениеТехподдержки = ИСТИНА
	               |	И Ч_СообщенияЧата.Кому = &Кому
	               |	И Ч_СообщенияЧата.Прочитано = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Кому", ?(БюджетныйНаСервере.РольАдминаДоступнаСервер(), Справочники.Пользователи.Администратор,ПараметрыСеанса.ТекущийПользователь));
	//Запрос.УстановитьПараметр("ЭтоАдмин", );
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Возврат Выборка.Количество();
	
	
КонецФункции // ()

&НаСервереБезКонтекста
Процедура  АкцептоватьСервер(МассивДокументов)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Справочник.Ссылка,
	               |	Справочник.Заявка
	               |ИЗ
	               |	Справочник.Задача КАК Задача
	               |ГДЕ
	               |	Справочник.Ссылка В(&МассивДокументов)
	               |	И ТИПЗНАЧЕНИЯ(Справочник.Заявка) = ТИП(Документ.Д_ЗаявкаНаОплату)
	               |	И (Справочник.ТочкаМаршрута = ЗНАЧЕНИЕ(Перечисление.Согласование1ТочкиМаршрута.Действие2)
	               |			ИЛИ Справочник.ТочкаМаршрута = ЗНАЧЕНИЕ(Перечисление.Согласование1ТочкиМаршрута.Действие4))
	               |	И НЕ Справочник.Выполнена
	               |
	               |ДЛЯ ИЗМЕНЕНИЯ
	               |	Справочник.Задача";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	НачатьТранзакцию();                       
	
	Пока Выборка.Следующий() Цикл
		Если Не БПСервер.ПроверкаЗадачи(Выборка.Ссылка) Тогда
			Результат = ВыполненоСервер(1, 1, Выборка.Ссылка.ПолучитьОбъект());
			Результат = Истина;
			Если Результат Тогда
				Сообщить(Строка(Выборка.Заявка) + " успешно согласована.");
				БПСервер.ЗаписатьДействиеПользователяВЛог(Выборка.Ссылка, "Акцептовать");
			Иначе
				Сообщить(Строка(Выборка.Заявка) + " не может быть согласована.");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаКлиенте
Процедура Акцептовать(Команда)
	
	Если НЕ ТекПункт = "Входящие" И НЕ ТекПункт = "" Тогда
		Сообщить("Пакетно выполнять можно только задачи в папке ""Входящие"".");
		Возврат;	
	КонецЕсли;
	
	ВыдСтроки = Элементы.ТекЗадачи.ТекущиеДанные;
	//АкцептоватьСервер(ВыдСтроки);
	МассивДокументов = Новый Массив;
	//Для каждого ТекСтрока Из ВыдСтроки Цикл
	//ТекДанныеСтроки = Элементы.ТекЗадачи.ДанныеСтроки(ТекСтрока).Заявка;
	МассивДокументов.Добавить(ТипЗнч(ВыдСтроки.Документ));
	
	ТекТочкаМаршрута = БюджетныйНаСервере.ВернутьРеквизит(ВыдСтроки.Ссылка, "ТочкаМаршрута");
	
	ВсегоЗадач = 0;
	Для каждого ТекСтрока Из ТекЗадачи Цикл
		Если НЕ МассивДокументов.Найти(ТипЗнч(ТекСтрока.Документ)) = Неопределено И ТекСтрока.Пункт = "Входящие" Тогда
			ТочкаМаршрута = БюджетныйНаСервере.ВернутьРеквизит(ТекСтрока.Ссылка, "ТочкаМаршрута");
			Если ТекТочкаМаршрута = ТочкаМаршрута Тогда
				ВсегоЗадач = ВсегоЗадач + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	НомерЗадачи = 1;
	Для каждого ТекСтрока Из ТекЗадачи Цикл
		Если НЕ МассивДокументов.Найти(ТипЗнч(ТекСтрока.Документ)) = Неопределено И ТекСтрока.Пункт = "Входящие" Тогда
			ТочкаМаршрута = БюджетныйНаСервере.ВернутьРеквизит(ТекСтрока.Ссылка, "ТочкаМаршрута");
			Если ТекТочкаМаршрута = ТочкаМаршрута Тогда
				БПСервер.ВыполнитьКомандуЗадачиБП(ТекСтрока.Ссылка, ЗадачаТекИмяКоманды1, ПолучитьСтруктуруРеквизитовФормы(), Ложь, "ФормаУниверсальная");
				Состояние("Выполняется " + Строка(НомерЗадачи) + "/" + Строка(ВсегоЗадач), НомерЗадачи / ВсегоЗадач * 100, ТекСтрока.Ссылка);
				НомерЗадачи = НомерЗадачи + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ОповеститьОбИзменении(Задача);
	Оповестить("ОбновитьСписокЗадач");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыполненоСервер(ПроверкаУспешно, ВставлятьКомм, ЗадачаОбъект)
	БП = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
	Заявка = БП.Заявка.ПолучитьОбъект();
	
	//провереям отсутствие статьи Расходы других подразделений и Расходы не относящиеся
	//Если ПараметрыСеанса.ТекущийПользователь.ПринадлежитЭлементу(Справочники.Пользователи.НайтиПоНаименованию("Финансовый", Истина)) Тогда
	//	ДоступныеПредприятия = БюджетныйНаСервере.ПолучитьПредприятия();
	//	ПроверкаСтатьи = Новый Массив;
	//	Для каждого ТекСтрока Из БП.Заявка.ЗаявкаБезнал Цикл
	//		Если НЕ ДоступныеПредприятия.Найти(ТекСтрока.ЦФО) = Неопределено Тогда
	//			Если ТекСтрока.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.РасходыДругихПодразделений Тогда
	//				ПроверкаСтатьи.Добавить(ТекСтрока.НомерСтроки);
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЦикла; 
	//	Если ПроверкаСтатьи.Количество() Тогда
	//		Сообщить("Вы должны указать целевые статьи расходов в данной заявке.");
	//		//Для каждого ТекСтрока Из ПроверкаСтатьи Цикл
	//		//	Сообщить("Строка: " + ТекСтрока);			
	//		//КонецЦикла;
	//		Возврат Ложь;
	//	КонецЕсли;
	//КонецЕсли;
	
	//добавляем комментарии в историю переписки	
	Если ВставлятьКомм Тогда
		ЗадачаОбъект.Комментарии = Строка(ТекущаяДата()) + ": " + ПараметрыСеанса.ТекущийПользователь + " согласовал(а) заявку:
		|" + "";
		БП.Комментарии = БП.Комментарии + ?(ПустаяСтрока(БП.Комментарии), "", "
		|") + ЗадачаОбъект.Комментарии;
	КонецЕсли;
	
	//ТЗ = ДопСогласование.Выгрузить();
	//БП.ДопСогласование.Загрузить(ТЗ);
	
	НаДоработке = 0;
	
	Если ВставлятьКомм Тогда // если заявка согласована или нет
		Для каждого ТекСтрока Из БП.ДопСогласование Цикл
			Если НЕ ТекСтрока.Пройден Тогда
				ТекСтрока.Пройден = 1;
				ТекСтрока.Согласовано = ПроверкаУспешно;
				ТекСтрока.Комментарии = "";
				ТекСтрока.Пользователь = ПараметрыСеанса.ТекущийПользователь;
				НаДоработке = 1 - ПроверкаУспешно;
				Прервать;		
			КонецЕсли;	
		КонецЦикла;
	Иначе //если заявка отменена
		СтруктураПоиска = Новый Структура("Пользователь", ПараметрыСеанса.ТекущийПользователь);
		МассивСтрок = БП.ДопСогласование.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрок.Количество() Тогда //если отменяет один из рецензентов
			Для каждого ТекСтрока Из МассивСтрок Цикл
				ТекСтрока.Пройден = 0;
				ТекСтрока.Согласовано = 0;
				ТекСтрока.Комментарии = "Отменил(а) заявку. " + Строка("");
				Комментарий = "Отменил(а) заявку. " +  Комментарий;
				ТекСтрока.Пользователь = ПараметрыСеанса.ТекущийПользователь;
			КонецЦикла;
		Иначе //если отменяет не рецензент
			Для каждого ТекСтрока Из БП.ДопСогласование Цикл
				Если НЕ ТекСтрока.Пройден Тогда
					ТекСтрока.Пройден = 1;
					ТекСтрока.Комментарии =  "Отменил(а) заявку. " + Строка(Комментарий);
					Комментарий = "Отменил(а) заявку. " +  Комментарий;
					НаДоработке = 1;
					//ТекСтрока.Пользователь = ПараметрыСеанса.ТекущийПользователь;
					Прервать;
				КонецЕсли;			
			КонецЦикла; 		
		КонецЕсли;
	КонецЕсли;
	
	
	Заявка.Записать();
	
	
	БП.Записать();
	БПСервер.ВыполнитьЗадачу(ЗадачаОбъект.Ссылка,0, ?(ПроверкаУспешно, "Да.", "Нет."), Комментарий);
	
	//БПСервер.ИзменитьСостояниеДокумента(ЗадачаОбъект.Заявка, НаДоработке);
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ПечатьКарточкиКонтрагента(Контрагент)

	ТабДокКарточка = ПечатьКарточкиКонтрагентаНаСервере(Контрагент);
	
	ФормаПечати = ПолучитьФорму("ОбщаяФорма.ФормаПечатиДокумента",);
	ФормаПечати.Результат = ТабДокКарточка;
	ФормаПечати.Открыть();
	
КонецПроцедуры

Функция ПечатьКарточкиКонтрагентаНаСервере(Контрагент)
	
	МассивСсылок = новый Массив;
	МассивСсылок.Добавить(Контрагент);
	
	ТабДокКарточка = Новый ТабличныйДокумент;
	ТабДокКарточка.ОтображатьСетку = Ложь;
	ТабДокКарточка.Защита = Ложь;
	ТабДокКарточка.ТолькоПросмотр = Истина;
	ТабДокКарточка.ОтображатьЗаголовки = Истина;
	ТабДокКарточка.ОтображатьГруппировки = Истина;
	ТабДокКарточка.АвтоМасштаб = Истина;
	
	Справочники.Контрагенты.ПечатьКарточки(МассивСсылок, ТабДокКарточка);
	
	Возврат ТабДокКарточка;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьЗадачиПользователяПриИзменении(Элемент)
	
	Если НЕ ЗадачиПодчиненных Тогда
		УстановитьАктивногоПользователя();
	КонецЕсли;
	
	ЗаполнитьТЧКлиент();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьАктивногоПользователя()
	ПараметрыСеанса.АктивныйПользователь = ПоказатьЗадачиПользователя;
КонецПроцедуры

&НаКлиенте
Процедура ТипПриИзменении(Элемент)
	//Элементы.Исполнитель.Видимость = (НЕ Тип = "Входящие");
	//ОбновитьСписокПоТипу();
	заполнитьТЧЗадач(1);
	//ЗаполнитьЗаданиями();
	ЗаполнитьДеревоНавигации();

КонецПроцедуры


Функция ЭтоСогласование(ТекСостояние)
	
	Если ТекСостояние = Перечисления.Согласование2ТочкиМаршрута.Действие2 ИЛИ
		ТекСостояние = Перечисления.Согласование2ТочкиМаршрута.Действие4 ИЛИ 
		ТекСостояние = БизнесПроцессы.Согласование3.ТочкиМаршрута.Действие2 Тогда
		Возврат Истина
	Иначе
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции	

&НаСервереБезКонтекста
Процедура ВыбратьПодчиненных(МассивПодчиненных, Руководитель)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДолжностиПользователяСрезПоследних.Пользователь,
	|	ДолжностиПользователяСрезПоследних.Должность
	|ИЗ
	|	РегистрСведений.ДолжностиПользователя.СрезПоследних(&Период, Руководитель = &Руководитель) КАК ДолжностиПользователяСрезПоследних";
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("Руководитель", Руководитель);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		МассивПодчиненных.Добавить(Выборка.Пользователь);
		//ВыбратьПодчиненных(МассивПодчиненных, Выборка.Пользователь);
	КонецЦикла;
	
	//в случае замещения должностей добавляеюся пользователи-отпускники и их должности
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	сабОтпускаСотрудников.Пользователь,
	|	сабОтпускаСотрудников.Замещающий
	|ИЗ
	|	Справочник.сабОтпускаСотрудников КАК сабОтпускаСотрудников
	|ГДЕ
	|	сабОтпускаСотрудников.ПользовательСогласовал = ИСТИНА
	|	И сабОтпускаСотрудников.ЗамещающийСогласовал = ИСТИНА
	|	И НАЧАЛОПЕРИОДА(сабОтпускаСотрудников.ДатаНачала, ДЕНЬ) <= &ТекДата
	|	И КОНЕЦПЕРИОДА(сабОтпускаСотрудников.ДатаОкончания, ДЕНЬ) >= &ТекДата
	|	И сабОтпускаСотрудников.Замещающий В (&Испол)
	|	И сабОтпускаСотрудников.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Испол", МассивПодчиненных);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Отпускник = Выборка.Пользователь;
		МассивПодчиненных.Добавить(Отпускник);
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ИсторияВыполненныхЗадач(Команда)
	ОткрытьФорму("Справочник.Задача.Форма.ФормаИсторииВыполненных"); 
КонецПроцедуры


&НаСервереБезКонтекста
Функция ВернутьСетевойСтатус(НачСтатус)
	Сп = Новый СписокЗначений;
	Для каждого ТекСтатус Из Перечисления.БП_ТекущийСтатус Цикл
		Если ТекСтатус = Перечисления.БП_ТекущийСтатус.Уволен Тогда
			Продолжить
		КонецЕсли;
		Сп.Добавить(ТекСтатус);
		Если НачСтатус = ТекСтатус Тогда
			Сп.НайтиПоЗначению(ТекСтатус).Пометка = Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Сп;
КонецФункции // ()

&НаКлиенте
Процедура ТекущийСтатусНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекСтатус = БПСервер.ПолучитьТекущийСтатус();
	Если НЕ ТекСтатус = Неопределено Тогда
		СписокЗнч = ВернутьСетевойСтатус(ТекСтатус.ТекущийСтатус);
	Иначе	
		СписокЗнч = ВернутьСетевойСтатус(Неопределено);
	КонецЕсли;
	ТекЗнач = Неопределено;

	ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ТекущийСтатусНажатиеЗавершение", ЭтотОбъект), СписокЗнч, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТекущийСтатусНажатиеЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ТекЗнач = ВыбранныйЭлемент;
	Текотпуск = Неопределено;
	ДействителенДо = Неопределено;
	Если НЕ ТекЗнач = Неопределено Тогда
		Если Строка(ТекЗнач.Значение) = "В отпуске" Тогда
			Текотпуск = ПолучитьТекущийОтпуск();
			Если Текотпуск = Неопределено Тогда
				ОткрытьФорму("Справочник.сабОтпускаСотрудников.ФормаОбъекта");
				Возврат;
			ИначеЕсли НЕ Текотпуск.ЗамещающийСогласовал Тогда
				ПоказатьПредупреждение(Неопределено, "Ваш отпуск еще не согласован! Статус изменится автоматически после согласования отпуска.");
				Возврат;
			КонецЕсли;
		ИначеЕсли НЕ Строка(ТекЗнач.Значение) = "На работе" Тогда
			ДействителенДо = ОткрытьФормуМодально("ОбщаяФорма.ФормаВыбораДатыИВремени", Новый Структура("ЗаголовокФОрмы", "Укажите примерную дату, до которой вы будете недоступны")); 
			Если ДействителенДо = Неопределено Тогда
				Возврат;			
			КонецЕсли;
		КонецЕсли;
		ТекущийСтатус = "Ваш текущий статус: " + Строка(ТекЗнач);
		БПСервер.ЗаписатьТекущийСтатус(ТекЗнач.Значение,, ДействителенДо);
		Если НЕ Строка(ТекЗнач.Значение) = "На работе" И НЕ Строка(ТекЗнач.Значение) = "В отпуске" Тогда
			БПСервер.ЗаписатьТекущийСтатус(СтатусНаРаботе(), , , ДействителенДо);
		КонецЕсли; 
		
		
		
		//ЗаписатьОтветственногоПоЗадачам(, ДействителенДо); 
		ОбновитьКомментарийПоСтатусу(Текотпуск);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция СтатусНаРаботе()
	Возврат Перечисления.БП_ТекущийСтатус.НаРаботе; 
КонецФункции // ()


&НаСервереБезКонтекста
Функция ПолучитьТекущийОтпуск()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	сабОтпускаСотрудников.Ссылка,
	|	сабОтпускаСотрудников.Замещающий,
	|	сабОтпускаСотрудников.Пользователь,
	|	сабОтпускаСотрудников.Наименование,
	|	сабОтпускаСотрудников.ДатаНачала,
	|	сабОтпускаСотрудников.ДатаОкончания,
	|	сабОтпускаСотрудников.ДелегироватьЗадачиНаПодчиненных,
	|	сабОтпускаСотрудников.ПометкаУдаления,
	|	сабОтпускаСотрудников.ПользовательСогласовал,
	|	сабОтпускаСотрудников.ЗамещающийСогласовал
	|ИЗ
	|	Справочник.сабОтпускаСотрудников КАК сабОтпускаСотрудников
	|ГДЕ
	|	сабОтпускаСотрудников.Пользователь = &Пользователь
	|	И сабОтпускаСотрудников.ДатаНачала <= &ТекДата
	|	И сабОтпускаСотрудников.ДатаОкончания >= &ТекДата
	|	И сабОтпускаСотрудников.ПользовательСогласовал = ИСТИНА
	|	И сабОтпускаСотрудников.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Возврат Новый Структура("Ссылка, Замещающий, Пользователь, Наименование, ДатаНачала, ДатаОкончания, ДелегироватьЗадачиНаПодчиненных, ПометкаУдаления, ПользовательСогласовал, ЗамещающийСогласовал", Выборка.Ссылка, Выборка.Замещающий, Выборка.Пользователь, Выборка.Наименование, Выборка.ДатаНачала, Выборка.ДатаОкончания, Выборка.ДелегироватьЗадачиНаПодчиненных, Выборка.ПометкаУдаления, Выборка.ПользовательСогласовал, Выборка.ЗамещающийСогласовал) 	
		
	КонецЦикла;
	
	
	
КонецФункции // ()

&НаКлиенте
Процедура ИндексКартинкиНажатие(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаСервере
Процедура ЗаписатьОтветственногоПоЗадачам(Пользователь = Неопределено, ДатаОкончания = Неопределено)
	
	ТекПользователь = ?(Пользователь = Неопределено, ПараметрыСеанса.ТекущийПользователь, Пользователь);
	
	МассивТекПользователь = Новый Массив;
	МассивТекПользователь.Добавить(ТекПользователь);
	ТаблицаПоТекПользователю = ПроверкаПользователяНаРабочемМесте(МассивТекПользователь, Новый Граница(ТекущаяДата(), ВидГраницы.Включая));
	ТекСтатус = ТаблицаПоТекПользователю[0].Статус;
	
	Если ТекСтатус = Перечисления.БП_ТекущийСтатус.НаРаботе Тогда
		НаборЗаписейДелигирование = РегистрыСведений.БП_ДелегированиеЗадач.СоздатьНаборЗаписей();
		НаборЗаписейДелигирование.Отбор.Пользователь.Установить(ТекПользователь);
		НаборЗаписейДелигирование.Отбор.Делигирована.Установить(Истина);
		НаборЗаписейДелигирование.Прочитать();
		НаборЗаписейДелигирование.Очистить();
		НаборЗаписейДелигирование.Записать();
	ИначеЕсли Не ТекСтатус = Перечисления.БП_ТекущийСтатус.ВОтпуске Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Справочник.Ссылка,
		|	Справочник.Предприятие,
		|	Справочник.Автор
		|ИЗ
		|	Справочник.Задача КАК Задача
		|ГДЕ
		|	Справочник.Исполнитель = &Исполнитель
		|	И НЕ Справочник.Выполнена
		|	И НЕ Справочник.ПометкаУдаления";
		Запрос.УстановитьПараметр("Исполнитель", ТекПользователь);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МассивПользователей = Новый Массив;
			МассивПользователей.Добавить(ТекПользователь);
			Замещающий = ПолучитьЗамещающего(МассивПользователей, Выборка.Предприятие, Выборка.Автор);
			НаборЗаписейДелигирование = РегистрыСведений.БП_ДелегированиеЗадач.СоздатьНаборЗаписей();
			НаборЗаписейДелигирование.Отбор.Пользователь.Установить(ТекПользователь);
			НаборЗаписейДелигирование.Отбор.Задача.Установить(Выборка.Ссылка);
			НаборЗаписейДелигирование.Отбор.Делигирована.Установить(Истина);
			ЗаписьДелигирование 				= НаборЗаписейДелигирование.Добавить();
			ЗаписьДелигирование.Замещающий 		= Замещающий;
			ЗаписьДелигирование.Задача 			= Выборка.Ссылка;
			ЗаписьДелигирование.Пользователь 	= ТекПользователь;
			ЗаписьДелигирование.Делигирована 	= Истина;
			НаборЗаписейДелигирование.Записать(Ложь);
			Сообщить("Задача " + Выборка.Ссылка + " на пользователя " + Замещающий + " Автор: " + Выборка.Автор);
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьЗамещающего(МассивПользователей, Предприятие, Автор, Дата = Неопределено)
	
	ТекДата = ?(Дата = Неопределено, ТекущаяДата(), Дата);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДолжностиПользователяСрезПоследних.Пользователь,
	|	ДолжностиПользователяСрезПоследних.Должность,
	|	ЕСТЬNULL(БП_ТекущиеСтатусыСрезПоследних.ТекущийСтатус, ЗНАЧЕНИЕ(Перечисление.БП_ТекущийСтатус.НаРаботе)) КАК Статус,
	|	БП_ТекущиеСтатусыСрезПоследних.Период,
	|	БП_ТекущиеСтатусыСрезПоследних.ДействителенДо
	|ПОМЕСТИТЬ ВТ_ПервоначальныеДанные
	|ИЗ
	|	РегистрСведений.ДолжностиПользователя.СрезПоследних(&Период, ) КАК ДолжностиПользователяСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БП_ТекущиеСтатусы.СрезПоследних(&Период, ) КАК БП_ТекущиеСтатусыСрезПоследних
	|		ПО ДолжностиПользователяСрезПоследних.Пользователь = БП_ТекущиеСтатусыСрезПоследних.Пользователь
	|ГДЕ
	|	ДолжностиПользователяСрезПоследних.Руководитель В(&МассивРуководителей)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПервоначальныеДанные.Пользователь,
	|	ОсновныеДолжностиПредприятияСрезПоследних.Предприятие КАК Предприятие
	|ПОМЕСТИТЬ ВТ_ДоступныеПредприятия
	|ИЗ
	|	ВТ_ПервоначальныеДанные КАК ВТ_ПервоначальныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДолжностиПредприятия КАК ОсновныеДолжностиПредприятияСрезПоследних
	|		ПО ВТ_ПервоначальныеДанные.Пользователь = ОсновныеДолжностиПредприятияСрезПоследних.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПервоначальныеДанные.Пользователь,
	|	ВТ_ПервоначальныеДанные.Должность,
	|	ВТ_ПервоначальныеДанные.Статус,
	|	ВТ_ПервоначальныеДанные.Период,
	|	ВТ_ПервоначальныеДанные.ДействителенДо,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НЕ ВТ_ПервоначальныеДанные.Пользователь.ДоступныПредприятияИзСписка
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВЫБОР
	|					КОГДА &Предприятие = ВТ_ДоступныеПредприятия.Предприятие
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОНЕЦ) КАК ПредприятиеВСписке
	|ПОМЕСТИТЬ ВТ_ПользователиИПредприятия
	|ИЗ
	|	ВТ_ПервоначальныеДанные КАК ВТ_ПервоначальныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДоступныеПредприятия КАК ВТ_ДоступныеПредприятия
	|		ПО ВТ_ПервоначальныеДанные.Пользователь = ВТ_ДоступныеПредприятия.Пользователь
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ПервоначальныеДанные.Статус,
	|	ВТ_ПервоначальныеДанные.Период,
	|	ВТ_ПервоначальныеДанные.Должность,
	|	ВТ_ПервоначальныеДанные.Пользователь,
	|	ВТ_ПервоначальныеДанные.ДействителенДо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(1) КАК КоличествоСДоступнымиПредприятиями
	|ПОМЕСТИТЬ ВТ_КоличествоСДоступнымиПредприятиями
	|ИЗ
	|	ВТ_ПользователиИПредприятия КАК ВТ_ПользователиИПредприятия
	|ГДЕ
	|	ВТ_ПользователиИПредприятия.ПредприятиеВСписке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПользователиИПредприятия.Пользователь,
	|	ВТ_ПользователиИПредприятия.Должность,
	|	ВТ_ПользователиИПредприятия.Статус,
	|	ВТ_ПользователиИПредприятия.Период,
	|	ВТ_ПользователиИПредприятия.ДействителенДо,
	|	ВТ_ПользователиИПредприятия.ПредприятиеВСписке
	|ИЗ
	|	ВТ_ПользователиИПредприятия КАК ВТ_ПользователиИПредприятия,
	|	ВТ_КоличествоСДоступнымиПредприятиями КАК ВТ_КоличествоСДоступнымиПредприятиями
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ЕСТЬNULL(ВТ_КоличествоСДоступнымиПредприятиями.КоличествоСДоступнымиПредприятиями, 0) > 0
	|				ТОГДА ВТ_ПользователиИПредприятия.ПредприятиеВСписке
	|			ИНАЧЕ НЕ ВТ_ПользователиИПредприятия.ПредприятиеВСписке
	|		КОНЕЦ";
	Запрос.УстановитьПараметр("Период", ТекДата);
	Запрос.УстановитьПараметр("МассивРуководителей", МассивПользователей);
	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	ТаблицаПользователей = Запрос.Выполнить().Выгрузить();	
	КоличествоПользователей = ТаблицаПользователей.Количество();
	Если КоличествоПользователей = 0 Тогда  
		Возврат Автор;
	ИначеЕсли КоличествоПользователей = 1 И ТаблицаПользователей[0].ПредприятиеВСписке Тогда
		НайденныйПользователь = ТаблицаПользователей[0].Пользователь;
		ТЗПроверка = ПроверкаПользователяНаРабочемМесте(НайденныйПользователь, Дата);
		Если ТЗПроверка.Найти(НайденныйПользователь, "Пользователь").Статус = Перечисления.БП_ТекущийСтатус.НаРаботе  Тогда
			Возврат НайденныйПользователь;
		Иначе
			МассивДляПоиска = Новый Массив;
			МассивДляПоиска.Добавить(НайденныйПользователь);
			Возврат ПолучитьЗамещающего(МассивДляПоиска, Предприятие, Автор, Дата = Неопределено);
		КонецЕсли;	
	ИначеЕсли КоличествоПользователей = 1 И Не ТаблицаПользователей[0].ПредприятиеВСписке Тогда
		МассивРуководителейДляПоиска = Новый Массив;
		МассивРуководителейДляПоиска.Добавить(ТаблицаПользователей[0].Пользователь);
		НайденныйРуководитель = ПоискРуководителя(МассивРуководителейДляПоиска, Автор, Дата);
		Если ЗначениеЗаполнено(НайденныйРуководитель) Тогда 
			Возврат НайденныйРуководитель;
		Иначе
			Возврат Автор;
		КонецЕсли;	
	ИначеЕсли КоличествоПользователей > 1 И Не ТаблицаПользователей[0].ПредприятиеВСписке Тогда
		Возврат Автор;
	Иначе	
		МассивРуководителей = ТаблицаПользователей.ВыгрузитьКолонку("Пользователь");
		ТЗПроверка = ПроверкаПользователяНаРабочемМесте(МассивРуководителей, Дата);
		МассивСтрокПроверки = ТЗПроверка.НайтиСтроки(Новый Структура("Статус", Перечисления.БП_ТекущийСтатус.НаРаботе));
		Если МассивСтрокПроверки.Количество() = 0 Тогда
			Возврат ПолучитьЗамещающего(МассивРуководителей, Предприятие, Автор, Дата);	
		ИначеЕсли МассивСтрокПроверки.Количество() = 1 Тогда
			Возврат МассивСтрокПроверки[0].Пользователь;	
		Иначе
			МассивРуководителейДляПоиска = Новый Массив;
			Для Каждого ПользовательМассива Из МассивСтрокПроверки Цикл
				МассивРуководителейДляПоиска.Добавить(ПользовательМассива.Пользователь);
			КонецЦикла;	
			НайденныйРуководитель = ПоискРуководителя(МассивРуководителейДляПоиска, Автор, Дата);
			Если ЗначениеЗаполнено(НайденныйРуководитель) Тогда 
				Возврат НайденныйРуководитель;
			Иначе
				Возврат Автор;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
КонецФункции	

&НаСервере
Функция ПроверкаПользователяНаРабочемМесте(МассивПользователей, Дата);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(БП_ТекущиеСтатусыСрезПоследних.ТекущийСтатус, ЗНАЧЕНИЕ(Перечисление.БП_ТекущийСтатус.НаРаботе)) КАК Статус,
	|	Пользователи.Ссылка КАК Пользователь
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БП_ТекущиеСтатусы.СрезПоследних(&Период, ) КАК БП_ТекущиеСтатусыСрезПоследних
	|		ПО (БП_ТекущиеСтатусыСрезПоследних.Пользователь = Пользователи.Ссылка)
	|ГДЕ
	|	Пользователи.Ссылка В(&МассивПользователей)";
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("МассивПользователей", МассивПользователей);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция ПоискРуководителя(МассивРуководителейДляПоиска, Пользователь, Дата)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДолжностиПользователяСрезПоследних.Руководитель
	|ИЗ
	|	РегистрСведений.ДолжностиПользователя.СрезПоследних(&Период, ) КАК ДолжностиПользователяСрезПоследних
	|ГДЕ
	|	ДолжностиПользователяСрезПоследних.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Руководитель = Выборка.Руководитель;
	КонецЦикла;
	
	Для Каждого ТекРуководитель Из МассивРуководителейДляПоиска Цикл
		Если Руководитель = ТекРуководитель Тогда
			Возврат Руководитель;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат ПоискРуководителя(МассивРуководителейДляПоиска, Руководитель, Дата)
	
КонецФункции	

&НаКлиенте
Процедура ЗапретДелегированияЗадачи(Команда)
	ТекДанные = Элементы.ТекЗадачи.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		Делегпрована = ЗапретитьДелегированиеНаСервере(Элементы.ТекЗадачи.ТекущиеДанные.Ссылка);
		Состояние("Делегирование для " + Строка(Элементы.ТекЗадачи.ТекущиеДанные.Ссылка) + ?(Делегпрована, " ЗАПРЕЩЕНО.", " РАЗРЕШЕНО."));
		Оповестить("ОбновитьСписокЗадач");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗапретитьДелегированиеНаСервере(ПараметрКоманды)
	ТекОбъект = ПараметрКоманды.ПолучитьОбъект();
	ТекОбъект.НеДелегировать = 1 -ТекОбъект.НеДелегировать;
	ТекОбъект.Записать();
	Возврат ТекОбъект.НеДелегировать;
КонецФункции

&НаКлиенте
Процедура ОчиститьКЕШ(Команда)
	
	Если Вопрос("Вы действительно хотите очистить КЕШ?. 
		|Программа будет завершена. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;  
	
	ОчиститьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьНаСервере()
	#Если Не ВебКлиент И Не МобильныйКлиент И Не МобильноеПриложениеКлиент Тогда
		WSH = Новый COMobject("wscript.shell"); 
		ПрофильПользователя = WSH.ExpandEnvironmentStrings("%APPDATA%");//Возвращает используемое по умолчанию размещение данных приложений
		
		Каталог1CEStart = ПрофильПользователя + "\1C\1CEStart\";    
		КаталогСуществует = КаталогИлиФайлСуществует(Каталог1CEStart);    
		
		Если КаталогСуществует  = Ложь Тогда
			Сообщить("Не найден каталог инфрормационной базы. Очистка кэша невозможна.");
			Возврат;
		КонецЕсли;
		
		ОбновитьGUID = Истина;
		
		// Заменим GUID в списке баз на новый
		Файлibases = Каталог1CEStart + "ibases.v8i"; // путь к списку информационных баз пользователя
		Если КаталогИлиФайлСуществует(Файлibases) Тогда
			
			// найдём GUID текущей базы
			СписокБаз = Новый ТекстовыйДокумент;
			СписокБаз.Прочитать(Файлibases);
			
			ТекстФайла = СписокБаз.ПолучитьТекст();
			
			Позиция = Найти(ТекстФайла, СтрокаСоединенияИнформационнойБазы());
			Если Позиция = 0 Тогда
				Сообщить("Информационная база не найдена в ibases.v8i. Очистка кэша невозможна.");
				Возврат;
			Иначе    
				ТекстФайлаCut = Прав(ТекстФайла, СтрДлина(ТекстФайла) - Позиция + 1);
				Позиция = Найти(ТекстФайлаCut, "ID=");
				GUID = Сред(ТекстФайлаCut, Позиция + 3, 36);
				
				// Если надо обновить GUID
				Если ОбновитьGUID Тогда
					НовыйGUID = Новый УникальныйИдентификатор;
					
					// Если такой идентификатор уже есть - получим новый и снова проверим
					Пока Найти(ТекстФайла, НовыйGUID) > 0 Цикл
						НовыйGUID = Новый УникальныйИдентификатор;
					КонецЦикла;    
					
					//Если Вопрос("Будет обновлён список баз.
					//	|Актуально только для баз из пользовательского списка баз!
					//	|Базы из общего списка баз не меняются!
					//	|Текущий GUID " + GUID + ".
					//	|Новый GUID " + НовыйGUID + ".
					//	|Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
					//	Возврат;
					//КонецЕсли;    
					
					//Присвоим базе новый идентификатор
					ТекстФайлаНовый = СтрЗаменить(ТекстФайла, GUID, НовыйGUID);
					СписокБаз.УстановитьТекст(ТекстФайлаНовый);
					СписокБаз.Записать(Файлibases);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Сообщить("Файл " + Файлibases + " не найден. Очистка кэша невозможна.");
			Возврат;
		КонецЕсли;
		
		// Создадим и запустим bat-файл, очищающий папку со старым кэшем
		// При этом, если обновляем GUID, то очистку делаем вне зависимости от ответа, чтобы не оставались ненужные папки
		Если Не ОбновитьGUID Тогда
			//Если Вопрос("Будет очищена папка " + GUID + ". 
			//	|Программа будет завершена. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			//	Возврат;
			//КонецЕсли;    
		КонецЕсли;    
		
		КаталогGUIDПроверка = ПрофильПользователя + "\1C\1cv8\" + GUID;
		КаталогGUIDПроверка2 = ПрофильПользователя + "\1C\1Cv82\" + GUID + "\";
		Если КаталогИлиФайлСуществует(КаталогGUIDПроверка) Тогда
			КаталогGUID = КаталогGUIDПроверка;
		ИначеЕсли КаталогИлиФайлСуществует(КаталогGUIDПроверка2) Тогда
			КаталогGUID = КаталогGUIDПроверка2;
		Иначе
			Сообщить("Каталог """ + КаталогGUID + """ не найден. Очистка кэша невозможна.");
			Возврат;
		КонецЕсли;
		
		ПутьКФайлуLck = КаталогGUID + "\1Cv8.lck";
		
		ТекстBatФайла = "@echo off
		|cls
		|cd \
		|Echo Ожидание снятия блокировки с файла 1Cv8.lck...
		|rem Файл работает следующим образом.
		|rem Сначала ждем 5х8=40 с., пока удалится файл 1Cv8.lck (удаляется при закрытии 1С), затем удаляем папку с кэшем.
		|rem Если файл не удаляется - завершаем работу программы.
		|set /a count=1
		|:flag
		|rem Если count > 8
		|if %count% gtr 8 goto end
		|if Not exist """ + ПутьКФайлуLck + """ goto go
		|ping -n 5 127.0.0.1 > NUL
		|call set /a count+=1
		|goto flag
		|:go
		//|rem Удаляем только файлы
		//|Del /F /Q """ + КаталогGUID + "\*.*""
		//|rem Удаляем только каталоги внутри
		//|for /d %%i in ("""+ КаталогGUID + "\*"") do rmDir /s /q ""%%i""
		|rem Удаляем основной каталог и всё, что в нём
		//|Echo Удаление папки " + КаталогGUID + "...
		//|rmDir """ + КаталогGUID + """ + /s /q
		|rmdir ""%AppData%\1C\1Cv8"" /S /Q
		|rmdir ""%LOCALAPPDATA%\1C\1Cv8"" /S /Q 
		|:end
		// Если надо после очистки запустить 1С, то убрать комментарий в следующих 2 строках и 2-х модулей в конце модуля, но при этом будет появлятся папка 00000000-0000-0000-0000-000000000000
		//|Echo Запускаем 1С
		//|start """" " + ПолучитьСтрокуЗапуска1С() + "
		|rem Удаляем этот файл
		|del %0
		|";
		
		БатФайл = Новый ТекстовыйДокумент;
		БатФайл.УстановитьТекст(ТекстBatФайла);
		БатФайл.Записать(КаталогВременныхФайлов() + "\ClearCache.bat", КодировкаТекста.OEM);
		ЗапуститьПриложение("""" + КаталогВременныхФайлов() + "\ClearCache.bat""");            
		ЗавершитьРаботуСистемы(Ложь);
		
	#Иначе
		Возврат;
	#КонецЕсли
	
КонецПроцедуры

// Проверяет существование каталога
// Параметры
//         Путь - путь к проверяемому каталогу
//
// Возвращаемое значение
//      Булево. Истина, если каталог существует, Ложь, если каталог не существует
//
&НаКлиенте
Функция КаталогИлиФайлСуществует(Путь)
	
	КаталогНаДиске = Новый Файл(Путь);
	
	Если КаталогНаДиске.Существует() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;    
	
КонецФункции

&НаКлиенте
Процедура НавигацияПриАктивизацииСтроки(Элемент)
	//Элементы.Отправить.Видимость = Ложь;
	Если НЕ Элементы.Навигация.ТекущиеДанные = Неопределено  Тогда
		//Если НЕ Элементы.Найти("ГруппаГруппы") = Неопределено Тогда
		//	Элементы.ГруппаГруппы.Видимость = Ложь;
		//КонецЕсли;
		//Элементы.ГруппаГруппы.Скрыть();
		//ПослСтрока = Элементы.Навигация.ТекущаяСтрока;
		//ОтключитьОбработчикОжидания("ОбновитьЧат");
		Если Элементы.Навигация.ТекущиеДанные.Пункт = "Новости" Тогда
			//ЗаполнитьНовости(НовостиHTML);
			//НеОтображать(Истина);
			//Элементы.Группа2.ТекущаяСтраница = Элементы.Новости;
		ИначеЕсли Элементы.Навигация.ТекущиеДанные.Пункт = "Выполненные" Тогда
			СписокВыполненные.Параметры.УстановитьЗначениеПараметра("Исполнитель", ДоступныеПользователи);
			Элементы.СписокВыполненные.Видимость = Истина;
			Элементы.Группа2.ТекущаяСтраница = Элементы.Выполненные; 
		ИначеЕсли Элементы.Навигация.ТекущиеДанные.Пункт = "Изменения в 1С" Тогда
			//СписокПодсистем.Параметры.УстановитьЗначениеПараметра("ЭтоАдминистратор", ЭтоАдминистратор);
			//СписокПодсистем.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", ТекущийПользователь);
			//Элементы.СписокПодсистем.Видимость = Истина;
			//Элементы.Группа2.ТекущаяСтраница = Элементы.Подсистемы;
		ИначеЕсли Элементы.Навигация.ТекущиеДанные.Пункт = "Мои подчиненные" Тогда
			СписокПодчиненных.Параметры.УстановитьЗначениеПараметра("ТекДата", ТекущаяДата());
			СписокПодчиненных.Параметры.УстановитьЗначениеПараметра("МассивАктивных", ТекПользователиМассив);
			СписокПодчиненных.Параметры.УстановитьЗначениеПараметра("Руководитель", ДоступныеПользователи.ВыгрузитьЗначения());
			СписокПодчиненных.Параметры.УстановитьЗначениеПараметра("НепрямоеПодчинение", НепрямоеПодчинение);
			СписокПодчиненных.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", ТекущийПользователь);
			Элементы.СписокПодчиненных.Видимость = Истина;
			Элементы.Группа2.ТекущаяСтраница = Элементы.Подчиненные;
		ИначеЕсли Элементы.Навигация.ТекущиеДанные.Пункт = "Мои задания" ИЛИ Элементы.Навигация.ТекущиеДанные.Пункт = "Мне" ИЛИ Элементы.Навигация.ТекущиеДанные.Пункт = "От меня" Тогда
			////ЗаполнитьЗаданиями();
			//Если Элементы.Навигация.ТекущиеДанные.Пункт = "Мои задания" Тогда
			//	Кому = "";
			//Иначе
			//	Кому = Элементы.Навигация.ТекущиеДанные.Пункт;
			//КонецЕсли;
			//ЗаполнитьДеревоЗаданий();
			//Элементы.Группа2.ТекущаяСтраница = Элементы.Задания;
		Иначе
			Элементы.Группа2.ТекущаяСтраница = Элементы.Задачи;
			ТекРодитель = Неопределено;
			сабОбщегоНазначенияКлиентПереопределяемый.НавигацияПриАктивизацииСтрокиЧастный(Элемент, Элементы, ТекРодитель);
			//Элементы.ТекЗадачиКомандаСписка.Видимость = Ложь;
			//Элементы.ТекЗадачиДатаНачалаРабот.Видимость = Ложь;
			//Элементы.ТекЗадачиДатаОкончанияРабот.Видимость = Ложь;
			Если Не Элементы.Найти("ТекЗадачиКонтекстноеМенюЗадачаЗадачаВзятьЗадачуВРаботу") = Неопределено Тогда
				Элементы.ТекЗадачиКонтекстноеМенюЗадачаЗадачаВзятьЗадачуВРаботу.Видимость = Истина;
			КонецЕсли;
			Если Не Элементы.Найти("ТекЗадачиКонтекстноеМенюЗадачаЗадачаОтложитьВыполнение") = Неопределено Тогда
				Элементы.ТекЗадачиКонтекстноеМенюЗадачаЗадачаОтложитьВыполнение.Видимость = Ложь;
			КонецЕсли;
			Если Не Элементы.Найти("ТекЗадачиКонтекстноеМенюЗадачаЗадачаВзятьЗадачуВРаботу1") = Неопределено Тогда
				Элементы.ТекЗадачиКонтекстноеМенюЗадачаЗадачаВзятьЗадачуВРаботу1.Видимость = Истина;
			КонецЕсли;
			Если Не Элементы.Найти("ЗадачаЗадачаОтложитьВыполнение") = Неопределено Тогда
				Элементы.ЗадачаЗадачаОтложитьВыполнение.Видимость = Ложь;
			КонецЕсли;
			Если (ТекРодитель = "Входящие") И НЕ ЗадачиПодчиненных Тогда
				ТекПункт = "Входящие";
				//Элементы.ТекЗадачиИсполнитель.Видимость = Ложь;
				//Элементы.ТекЗадачиКомментарийДелегирования.Видимость = Ложь;
				//Элементы.ТекЗадачиЗадачаОт.Видимость = Истина;
			ИначеЕсли ТекРодитель = "В работе" Тогда
				ТекПункт = "В работе";
				//Если НЕ Элементы.Найти("ГруппаГруппы") = Неопределено Тогда
				//	Элементы.ГруппаГруппы.Видимость = Истина;
				//КонецЕсли;
				//Элементы.ГруппаГруппы.Показать();
				//Элементы.ТекЗадачиИсполнитель.Видимость = Ложь;
				//Элементы.ТекЗадачиКомментарийДелегирования.Видимость = Ложь;
				//Элементы.ТекЗадачиКомандаСписка.Видимость = Истина;
				//Элементы.ТекЗадачиДатаНачалаРабот.Видимость = Истина;
				//Элементы.ТекЗадачиДатаОкончанияРабот.Видимость = Истина;
				Если Не Элементы.Найти("ТекЗадачиКонтекстноеМенюЗадачаЗадачаВзятьЗадачуВРаботу") = Неопределено Тогда
					Элементы.ТекЗадачиКонтекстноеМенюЗадачаЗадачаВзятьЗадачуВРаботу.Видимость = Ложь;
				КонецЕсли;
				Если Не Элементы.Найти("ТекЗадачиКонтекстноеМенюЗадачаЗадачаОтложитьВыполнение") = Неопределено Тогда
					Элементы.ТекЗадачиКонтекстноеМенюЗадачаЗадачаОтложитьВыполнение.Видимость = Истина;
				КонецЕсли;
				Если Не Элементы.Найти("ТекЗадачиКонтекстноеМенюЗадачаЗадачаВзятьЗадачуВРаботу1") = Неопределено Тогда
					Элементы.ТекЗадачиКонтекстноеМенюЗадачаЗадачаВзятьЗадачуВРаботу1.Видимость = Ложь;
				КонецЕсли;
				Если Не Элементы.Найти("ЗадачаЗадачаОтложитьВыполнение") = Неопределено Тогда
					Элементы.ЗадачаЗадачаОтложитьВыполнение.Видимость = Истина;
				КонецЕсли;
			ИначеЕсли ТекРодитель = "Исходящие" Тогда
				ТекПункт = "Исходящие";
				//Элементы.ТекЗадачиИсполнитель.Видимость = Истина;
				//Элементы.ТекЗадачиЗадачаОт.Видимость = Ложь;
				//Элементы.ТекЗадачиКомментарийДелегирования.Видимость = Ложь;
			ИначеЕсли ТекРодитель = "Делегированные мне" Тогда
				ТекПункт = "Входящие";
				//Элементы.ТекЗадачиИсполнитель.Видимость = Истина;
				//Элементы.ТекЗадачиКомментарийДелегирования.Видимость = Ложь;
				//Элементы.ТекЗадачиЗадачаОт.Видимость = Истина;
			Иначе
				ТекПункт = Элементы.Навигация.ТекущиеДанные.Пункт;
				//Элементы.ТекЗадачиИсполнитель.Видимость = Истина;
				//Элементы.ТекЗадачиКомментарийДелегирования.Видимость = Истина;
			КонецЕсли;
			ТекПроект = Элементы.Навигация.ТекущиеДанные.Проект;
		КонецЕсли;
		ТекИерархия = Элементы.Навигация.ТекущиеДанные.Иерархия;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТекЗадачиПриАктивизацииСтроки(Элемент)
	//Сообщить(Элементы.ТекЗадачи.ТекущаяСтрока);
	//Сообщить(ТекСтрока);
	
	ТипыСовпадают = Истина;
	Если Элемент.ВыделенныеСтроки.Количество() > 1 Тогда
		ТекТочка = Неопределено;
		ТекТип = Неопределено;
		Для каждого ТекВыделеннаяСтрока Из Элемент.ВыделенныеСтроки Цикл
			ДанныеВыдСтроки = Элемент.ДанныеСтроки(ТекВыделеннаяСтрока);
			ДанныеЗадачи = БюджетныйНаСервере.ВернутьРеквизиты(ДанныеВыдСтроки.Ссылка, "ТочкаМаршрута");
			Если ТекТочка = Неопределено Тогда
				ТекТочка = ДанныеЗадачи.ТочкаМаршрута;
				ТекТип = ТипЗнч(ДанныеВыдСтроки.Документ);
			КонецЕсли;
			Если НЕ ДанныеЗадачи.ТочкаМаршрута = ТекТочка ИЛИ НЕ ТекТип = ТипЗнч(ДанныеВыдСтроки.Документ) Тогда
				ТипыСовпадают = Ложь;		
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	ТекДанные = Элемент.ТекущиеДанные;
	
	Если ТипыСовпадают И НЕ ТекДанные = Неопределено И ЗначениеЗаполнено(ТекДанные.Ссылка) Тогда
		                             
		//Элементы.ТекЗадачиКонтекстноеМенюБизнесПроцессСогласованиеОбщееОтслеживатьДокумент.Пометка = Элемент.ТекущиеДанные.Отслеживается;
		//Оповестить("ОткрытьФормуЗадачи",  Новый Структура("Новая, Ссылка, ПредыдущаяНовая, ПредыдущаяСсылка", Элемент.ТекущиеДанные.Новая, Элемент.ТекущиеДанные.Ссылка, ПредыдущаяНовая, ПредыдущаяСсылка)); 
		
		//Элементы.СписокКонтекстноеМенюЗадачаЗадачаЗапретДелегирования1.Пометка = НЕ (Элемент.ТекущиеДанные.Делегирование = "Разрешено");
		//
		//Элементы.ТекЗадачиКонтекстноеМенюЗадачаЗадачаВзятьЗадачуВРаботу.Заголовок = ?(Элемент.ТекущиеДанные.ВРаботе, "Отложить выполнение задачи", "Взять задачу в работу");
		Задача = ТекДанные.Ссылка;
		//
		ПредыдущаяНовая = Элемент.ТекущиеДанные.Новая;
		
		//заполняем дополнительную информацию и команды
		ВидимостьРазрешенияРедактирования = Ложь;
		БПСервер.НастроитьДоступностьКнопок(Задача, ЗадачаТекКоманда1, ЗадачаТекКоманда2, ЗадачаТекИмяКоманды1, ЗадачаТекИмяКоманды2, ВидимостьРазрешенияРедактирования);
		
		//заполняем группу команд Печать
		Если НЕ ПредыдущаяСсылка = ТекДанные.Ссылка Тогда
			//ПодключитьОбработчикОжидания("ОбновитьКомандуПечатьКлиент", 0.1, Истина);
		КонецЕсли;
		
		ПредыдущаяСсылка = ТекДанные.Ссылка;
		
		//заполняем вопросы по документу
		//ПоказатьВопросыПоОбъекту(Задача, ЗадачаВопросыПоДокументу);
		
		//заполняем обсуждение документа
		//ПоказатьОбсуждениеОбъекта(Задача, ЗадачаОбсуждениеДокумента);
		
		//заполняем цикл обхода
		//ПоказатьРанееПройденныеПользователем(Задача, РанееВыполненныеЗадачи);
		
		//заполняем прикрепленные файлы
		//ОбщегоНазначенияКлиентСервер.ОбновитьКоличествоПрикрепленныхФайлов(Задача, ПрикрепленныеФайлы, Истина);	
		
		//заполняем заметки по документу
		//ПоказатьЗаметкиПоОбъекту(Задача, ЗаметкиПоДокументу);
		
		
		
		Элементы.ЗадачаКомментарий.Доступность = Истина;		
	Иначе
		Оповестить("ОткрытьФормуЗадачи", Новый Структура);
		ЗадачаТекКоманда1 = ""; ЗадачаТекКоманда2 = ""; ЗадачаВопросыПоДокументу = ""; ЗадачаОбсуждениеДокумента = "";
		Элементы.ЗадачаКомментарий.Доступность = Ложь;
	КонецЕсли;
	ЕстьАктивностьПользователяЗадач = Истина;//для трея
	
	
	//Элементы.ТекКоманда1.Видимость = ЗначениеЗаполнено(ЗадачаТекКоманда1);
	//Элементы.ТекКоманда2.Видимость = ЗначениеЗаполнено(ЗадачаТекКоманда2);
	//Элементы.ТекКоманда3.Видимость = ЗначениеЗаполнено(ЗадачаТекКоманда3);
	
	
	Если НЕ ЗначениеЗаполнено(ЗадачаТекКоманда1) И НЕ ЗначениеЗаполнено(ЗадачаТекКоманда2) И НЕ ЗначениеЗаполнено(ЗадачаТекКоманда3) Тогда
		Элементы.ЗадачаКомментарий.ТолькоПросмотр = Истина;
		//Элементы.ТекКоманда1.Видимость = Истина;
	Иначе
		Элементы.ЗадачаКомментарий.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(ЗадачаОбсуждениеДокумента) И НЕ ЗначениеЗаполнено(ЗадачаВопросыПоДокументу) Тогда
		//Элементы.ЗадачаВопросыПоДокументу.Видимость = Ложь;
	Иначе
		//Элементы.ЗадачаВопросыПоДокументу.Видимость = Истина;
	КонецЕсли;
	
	ЗадачаКомментарий = "";
	
	Если НЕ ТекДанные = Неопределено Тогда
		ТекПунктСписка = ТекДанные.Пункт;
		ТекПроектСписка = ТекДанные.Проект;
		Оповестить("ВыбратьПроект", Новый Структура("Проект", ТекПроектСписка));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТекЗадачиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКомандуПечатьКлиент()
	ОбновитьКомандуПечатьСервер();
КонецПроцедуры


&НаСервере
Процедура ОбновитьКомандуПечатьСервер()
	сабБПКлиентСервер.ЗаполнитьГруппуКнопокПечать(Элементы, Команды, СписокКоманд, Задача);
КонецПроцедуры

&НаКлиенте
Процедура ИндивидуальнаяКоманда(Команда)
	БюджетныйНаКлиенте.УниверсальноеВыполнениеКоманды(БюджетныйНаСервере.ВернутьРеквизиты(Задача, "Заявка").Заявка, Команда);
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	Если Элементы.Группа2.ТекущаяСтраница = Элементы.Задачи ИЛИ Элементы.Группа2.ТекущаяСтраница = Элементы.Задания Тогда
		ТекСтрокаЗадача = Элементы.ТекЗадачи.ТекущаяСтрока;
		ЗаполнитьТЧЗадач(ТекСтрокаЗадача);
		//Элементы.ТекЗадачи.НачальноеОтображениеСписка = НачальноеОтображениеСписка.Начало;
		//Элементы.Текзадачи.Обновить();
		//Элементы.ТекЗадачи.НачальноеОтображениеСписка = НачальноеОтображениеСписка.Авто;
		//ЗаполнитьЗаданиями();
	ИначеЕсли Элементы.Группа2.ТекущаяСтраница = Элементы.Подсистемы Тогда
		//ПометитьИзмененияВ1СКакПрочитанные();
		//Элементы.СписокПодсистем.Обновить();
	КонецЕсли;
	ЗаполнитьДеревоНавигации();
	ТекЗадачиПриАктивизацииСтроки(Элементы.ТекЗадачи);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТЧКлиент()
	//п = Навигация.ПолучитьЭлементы().Получить(0).ПолучитьИдентификатор();
	
	ТекСтрокаЗадача = Элементы.ТекЗадачи.ТекущаяСтрока;
	//ТекЗадачи.Очистить();
	//
	
	//Если ЕстьАктивностьПользователяЗадач И НЕ Трей = Неопределено Тогда //при  активности обнуляем иконку
	//	ЕстьАктивностьПользователяЗадач = Ложь;
	//	Трей.Иконка(ТекПолноеНаим + "\icon.ico");
	//	БПСервер.ОчиститьПоступившиеЗадачи();
	//КонецЕсли;
	
	ЗаполнитьТЧЗадач(?(ТекСтрокаЗадача = Неопределено, 1, ТекСтрокаЗадача));
	//ЗаполнитьЗаданиями();
	ЗаполнитьДеревоНавигации();
	
	//разворачиваем мои задания
	Если Элементы.Группа1.Видимость И Элементы.Навигация.Видимость Тогда
		Элементы.Навигация.Развернуть(ИдентификаторЗаданий);
	КонецЕсли;
	
	//Элементы.Навигация.ТекущаяСтрока = Аа + КоличествоСтрок + 3;
	//Элементы.ТекЗадачи.ТекущаяСтрока = ТекСтрокаЗадача;
КонецПроцедуры

&НаКлиенте
Процедура ТекЗадачиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ЕстьАктивностьПользователяЗадач = Истина;
	
	//снимаем блокировку с отдельной формы
	Оповестить("СнятьБлокировкуСФормы");
	
	ТекДанные = Элементы.ТекЗадачи.ДанныеСтроки(Элементы.ТекЗадачи.ТекущаяСтрока);
	Если Поле.Имя = "ТекЗадачиЗаявка" ИЛИ Поле.Имя = "ТекЗадачиТипДокумента" ИЛИ Поле.Имя = "ТекЗадачиОтступ" Тогда
		Если ТипЗнч(ТекДанные.Документ) = Тип("ДокументСсылка.Д_Бюджет") Тогда
			БПП = БюджетныйНаСервере.ВернутьРеквизит(ТекДанные.Ссылка, "БизнесПроцесс");	
			БюджетныйНаКлиенте.УниверсальнаяПечать(БПП, Истина);
		ИначеЕсли ТипЗнч(ТекДанные.Документ) = Тип("СправочникСсылка.Контрагенты") Тогда
			ПечатьКарточкиКонтрагента(ТекДанные.Документ);
		Иначе
			#Если НЕ МобильныйКлиент И НЕ МобильноеПриложениеКлиент Тогда
				СписокКоманд = Новый СписокЗначений;
				СписокКоманд.Добавить("Печать", "Печать");
				ЗаполнитьПечать(ТекДанные.Документ, СписокКоманд);
				Если СписокКоманд.Количество() > 1 Тогда
					ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ТекЗадачиВыборЗавершение", ЭтотОбъект), СписокКоманд);
				Иначе	
					БюджетныйНаКлиенте.УниверсальнаяПечать(ТекДанные.Документ, Истина);	
				КонецЕсли;
			#КонецЕсли
		КонецЕсли;
		
	ИначеЕсли Поле.Имя = "ТекЗадачиИнициатор" Тогда
		ПоказатьЗначение(Неопределено, Элементы.ТекЗадачи.ТекущиеДанные.Инициатор);
	ИначеЕсли Поле.Имя = "ТекЗадачиИсполнитель" Тогда
		ПоказатьЗначение(Неопределено, Элементы.ТекЗадачи.ТекущиеДанные.Исполнитель);
	ИначеЕсли Поле.Имя = "ТекЗадачиЗадачаОт" Тогда
		ПоказатьЗначение(Неопределено, Элементы.ТекЗадачи.ТекущиеДанные.ЗадачаОт);
	ИначеЕсли Поле.Имя = "ТекЗадачиСрокВыполнения" И Не ТекДанные.Наконтроле Тогда
		Если НЕ БПСервер.ТекПользовательИсполнительЗадачи(ТекДанные.Ссылка, Истина) Тогда
			ПоказатьПредупреждение(Неопределено, "Вы не являетесь исполнителем по данной задаче! Установка срока и взятие в работу невозможно!");
			Возврат;
		Иначе	
			ОткрытьФорму("Справочник.Задача.Форма.ФормаУстановкиСрока", Новый Структура("Ключ, ЭтоУстановкаСрока", ТекДанные.Ссылка, Истина)); 
		КонецЕсли;
		
	ИначеЕсли Поле.Имя = "ТекЗадачиКомментарий" Тогда // комментарий
		СтандартнаяОбработка = Истина;
		
	ИначеЕсли Поле.Имя = "ТекЗадачиКомандаСписка" Тогда
		ПрошлоеСостояние = ТекДанные.КомандаСписка;
		БПСервер.ПаузаСтартХронометраж(ТекДанные.Период, ?(ЗначениеЗаполнено(ТекДанные.Документ), ТекДанные.Документ, ТекДанные.Ссылка), ТекДанные.КомандаСписка);
		//Элементы.ХронометражСписок.Обновить();
		ЗаполнитьТЧКлиент();
		//ТекДанные.КомандаСписка = ?(ПрошлоеСостояние = "Старт", "Пауза", "Старт");
		СтандартнаяОбработка = Ложь;
	ИначеЕсли Поле.Имя = "ТекЗадачиДатаНачалаРабот" ИЛИ Поле.Имя = "ТекЗадачиДатаОкончанияРабот" Тогда
		СтандартнаяОбработка = Истина;
	ИначеЕсли ТекДанные.НаКонтроле Тогда
		Если ТипЗнч(ТекДанные.Документ) = Тип("ДокументСсылка.Д_Бюджет") Тогда
			БПП = БюджетныйНаСервере.ВернутьРеквизит(ТекДанные.Ссылка, "БизнесПроцесс");	
		Иначе
			БПП = ТекДанные.Документ;	
		КонецЕсли;
		БюджетныйНаКлиенте.УниверсальнаяПечать(БПП, Истина);
	Иначе
		ПоказатьЗначение(Неопределено, Элементы.ТекЗадачи.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
	//снимаем пометку новой
	//ОбновлятьСписокЗадач = Ложь;
	//БПСервер.СнятьПометкуНовая(ТекДанные.Ссылка, ОбновлятьСписокЗадач);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекЗадачиВыборЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ТекЗнч = ВыбранныйЭлемент;
	Если НЕ ТекЗнч = Неопределено Тогда
		ИндивидуальнаяКоманда(ТекЗнч.Значение);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПечать(ТекЗаявка, СписокКоманд)
	
	ТекДокумент = ТекЗаявка;
	
	СписокКоманд.Очистить();
	//Метаданные.Документы.Д_ЗаявкаНаОплату.Команды.ПечатьБезНал.ИзменяетДанные
	
	МассивКоманд = Новый Массив;
	
	СписокКоманды = ТекДокумент.Метаданные().Команды;
	Для каждого ТекКоманда Из СписокКоманды Цикл
		Если Найти(Строка(ТекКоманда.Группа), "Печать") И ПравоДоступа("Просмотр", ТекКоманда) Тогда
			МассивКоманд.Добавить(ТекКоманда);		
		КонецЕсли;
	КонецЦикла;
	ВремСп = Новый СписокЗначений;
	ВремСп.ЗагрузитьЗначения(МассивКоманд);
	ВремСп.СортироватьПоЗначению();
	МассивКоманд = ВремСп.ВыгрузитьЗначения();	
	Для каждого ТекСтрока Из МассивКоманд Цикл
		СписокКоманд.Добавить(ТекСтрока.ПолноеИмя(), ?(ЗначениеЗаполнено(ТекСтрока.Синоним), ТекСтрока.Синоним, ТекСтрока.Имя));
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТекЗадачиОтступНажатие(Элемент, СтандартнаяОбработка)
	ТекДанные = Элементы.ТекЗадачи.ДанныеСтроки(Элементы.ТекЗадачи.ТекущаяСтрока);
	Если ТипЗнч(ТекДанные.Документ) = Тип("ДокументСсылка.Д_Бюджет") Тогда
		БПП = БюджетныйНаСервере.ВернутьРеквизит(ТекДанные.Ссылка, "БизнесПроцесс");	
		БюджетныйНаКлиенте.УниверсальнаяПечать(БПП, Истина);
	ИначеЕсли ТипЗнч(ТекДанные.Документ) = Тип("СправочникСсылка.Контрагенты") Тогда
		ПечатьКарточкиКонтрагента(ТекДанные.Документ);
	Иначе
		БюджетныйНаКлиенте.УниверсальнаяПечать(ТекДанные.Документ, Истина);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура СтарыйВидТекущихЗадач(Команда)
	ПараметрыФормы = Новый Структура("", );
	ОткрытьФорму("Справочник.Задача.Форма.СписокМоихЗадач", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура РасширенноеОписаниеПриИзменении(Элемент)
	Элементы.ТекЗадачиОписание.АвтоВысотаЯчейки = РасширенноеОписание;
КонецПроцедуры

&НаКлиенте
Процедура ТекЗадачиСрокВыполненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекДанные = Элементы.ТекЗадачи.ДанныеСтроки(Элементы.ТекЗадачи.ТекущаяСтрока);
	Если НЕ БПСервер.ТекПользовательИсполнительЗадачи(ТекДанные.Ссылка, Истина) Тогда
		ПоказатьПредупреждение(Неопределено, "Вы не являетесь исполнителем по данной задаче! Установка срока и взятие в работу невозможно!");
		Возврат;
	Иначе	
		ОткрытьФорму("Справочник.Задача.Форма.ФормаУстановкиСрока", Новый Структура("Ключ", ТекДанные.Ссылка)); 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НавигацияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	ТекДанныеИсточник = Элементы.Навигация.ДанныеСтроки(Элемент.ТекущаяСтрока);
	ТекДанныеПриемник = Элементы.Навигация.ДанныеСтроки(Строка);
	Если НЕ ТекДанныеИсточник = Неопределено И НЕ ТекДанныеПриемник = Неопределено Тогда
		Если ТекДанныеИсточник.Пункт = "Входящие" И ТекДанныеПриемник.Пункт = "В работе" Тогда
			СтандартнаяОбработка = Ложь;
		ИначеЕсли ТекДанныеИсточник.Пункт = "В работе" И ТекДанныеПриемник.Пункт = "Входящие" Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НавигацияОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	а = 1;
КонецПроцедуры

&НаКлиенте
Процедура НавигацияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	ТекЗадача =ПараметрыПеретаскивания.Значение[0].Ссылка;
	ТекДанныеИсточник = Элементы.Навигация.ДанныеСтроки(Элемент.ТекущаяСтрока);
	ТекДанныеПриемник = Элементы.Навигация.ДанныеСтроки(Строка);
	Если НЕ ТекДанныеИсточник = Неопределено И НЕ ТекДанныеПриемник = Неопределено Тогда
		Если ТекДанныеИсточник.Пункт = "Входящие" И ТекДанныеПриемник.Пункт = "В работе" Тогда
			БюджетныйНаСервере.ПрисвоитьРеквизит(ТекЗадача, "ВРаботе", Истина);
		ИначеЕсли ТекДанныеИсточник.Пункт = "В работе" И ТекДанныеПриемник.Пункт = "Входящие" Тогда
			БюджетныйНаСервере.ПрисвоитьРеквизит(ТекЗадача, "ВРаботе", Ложь);
		КонецЕсли;
	КонецЕсли;
	Обновить(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ТекЗадачиОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	//Тащится = "";
КонецПроцедуры

&НаКлиенте
Процедура ТекЗадачиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	//ТекДанныеИсточник = Элементы.Навигация.ДанныеСтроки(Элементы.Навигация.ТекущаяСтрока);
	//Если НЕ ТекДанныеИсточник = Неопределено Тогда
	//	Если ТекДанныеИсточник.Пункт = "Входящие" Тогда
	//		Тащится = "В работе";
	//	ИначеЕсли ТекДанныеИсточник.Пункт = "В работе" Тогда
	//		Тащится = "Входящие";
	//	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НовоеОкно(Команда)
	ОткрытьФорму("Справочник.Задача.Форма.СписокМоихЗадач7");
КонецПроцедуры

&НаКлиенте
Процедура СписокПодчиненныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "МоиЗадания" Тогда
	//	СтандартнаяОбработка = Ложь;
	//	Список1.Параметры.УстановитьЗначениеПараметра("Исполнитель", Элементы.Список.ТекущаяСтрока);
	//	Фильтр = Элементы.Список.ТекущаяСтрока;
	//	//Элементы.Группа5.Видимость = Истина;
	//	//ОткрытьФорму("Документ.БП_Поручение.Форма.ФормаСпискаОтМеняТекущих", Новый Структура("Исполнитель", Элементы.Список.ТекущаяСтрока)); 
	ИначеЕсли Поле.Имя = "СписокПодчиненныхТекущиеЗадачи" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура("ЗадачиПодчиненных, КонкретныйПодчиненный", Истина, Элементы.СписокПодчиненных.ДанныеСтроки(Элементы.СписокПодчиненных.ТекущаяСтрока).Ссылка);
		ОткрытьФорму("Справочник.Задача.Форма.СписокМоихЗадач7", ПараметрыФормы,,Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НепрямоеПодчинениеПриИзменении(Элемент)
	СохранитьВХранилищеНастроек();
	СписокПодчиненных.Параметры.УстановитьЗначениеПараметра("НепрямоеПодчинение", НепрямоеПодчинение);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьВХранилищеНастроек()
	
	ОписаниеНастроек = Новый ОписаниеНастроек;
	ОписаниеНастроек.Представление = "ПоказыватьВсехПодчиненных";
	ХранилищеНастроекДанныхФорм.УстановитьОписание("Справочник.Пользователи.Форма.ФормаМоиПодчиненные", "ПоказыватьВсехПодчиненных", ОписаниеНастроек, Строка(ПараметрыСеанса.ТекущийПользователь.Наименование));
	ХранилищеНастроекДанныхФорм.Сохранить("Справочник.Пользователи.Форма.ФормаМоиПодчиненные", "ПоказыватьВсехПодчиненных", Новый Структура("ПоказыватьВсехПодчиненных, ПоказыватьТолькоНевыполненныеЗадания", НепрямоеПодчинение, ПоказыватьТолькоНевыполненныеЗадания), , Строка(ПараметрыСеанса.ТекущийПользователь.Наименование));
	
КонецПроцедуры	


&НаКлиенте
Процедура ПоказыватьТолькоНевыполненныеЗаданияПриИзменении(Элемент)
	СохранитьВХранилищеНастроек();
	ЗаполнитьЗаданиями();	
КонецПроцедуры

&НаКлиенте
Процедура Группа2ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	//Если ТекущаяСтраница.Имя = "Подсистемы" Тогда
	//	ИзмененияВ1СПрочитаны = Истина;
	//Иначе
	//	Если ИзмененияВ1СПрочитаны Тогда
	//		ПометитьИзмененияВ1СКакПрочитанные();
	//	КонецЕсли;
	//КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПометитьИзмененияВ1СКакПрочитанные()
	
	//НаборЗаписей = РегистрыСведений.Новости.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.Пользователь.Установить(ПараметрыСеанса.ТекущийПользователь);
	//НаборЗаписей.Прочитать();
	//Для Каждого ЗаписьНовостей Из НаборЗаписей Цикл
	//	Если Не ТипЗнч(ЗаписьНовостей.Новость) = Тип("Строка") Тогда
	//		Продолжить;
	//	КонецЕсли;	
	//	ЗаписьНовостей.НовостьПрочитана = ИзмененияВ1СПрочитаны;
	//КонецЦикла;
	//НаборЗаписей.Записать();		
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПодсистемПриАктивизацииСтроки(Элемент)
	
	//Если Не ИзмененияВ1СПрочитаны Тогда
	//	ИзмененияВ1СПрочитаны = Истина;
	//	ПометитьИзмененияВ1СКакПрочитанные();
	//	//Элементы.СписокПодсистем.Обновить();
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПодсистемВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "СписокПодсистемЕстьФорматируемыйДокумент" Тогда
		СтандартнаяОбработка = Ложь;
		ТекФорма = ПолучитьФорму("РегистрСведений.ИзмененияВ1С.ФормаЗаписи", Новый Структура("Ключ", Элемент.ТекущаяСтрока));
		ТекФорма.Элементы.Группа3.ТекущаяСтраница = ТекФорма.Элементы.Группа5;
		ТекФорма.Открыть();	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтслеживатьДокумент(Команда)
	БюджетныйНаКлиенте.УстановитьОтслеживаниеДокумента(Элементы.ТекЗадачи.ТекущиеДанные.Ссылка, Элементы);
КонецПроцедуры

#Область РаботаСЗаданиями

&НаКлиенте
Процедура ЗаполнитьДеревоЗаданий()

	Если Кому = "" Тогда
		МассивСтрокЗаданий = ТекЗадания;
	Иначе
		МассивСтрокЗаданий = ТекЗадания.НайтиСтроки(Новый Структура("Пункт", Кому));	
	КонецЕсли;
	
	//заполняем дерево ТекЗаданий
	
	ТекЗаданияДерево.ПолучитьЭлементы().Очистить();
	
	Для каждого ТекСтрока Из МассивСтрокЗаданий Цикл
		ТекЭлемент = ЕстьЭлементТекзадания(ТекЗаданияДерево.ПолучитьЭлементы(), ?(ГруппировкаЗаданий = "По пользователям", ТекСтрока.Исполнитель, ТекСтрока.Ссылка));
		Если ТекЭлемент = Неопределено Тогда
			Раздел1 = ТекЗаданияДерево.ПолучитьЭлементы().Добавить();
		Иначе
			Раздел1 = ТекЭлемент;
		КонецЕсли;
		
		
		Если ГруппировкаЗаданий = "По пользователям" Тогда
			//Раздел1.Ссылка = ТекСтрока.Ссылка;
			Раздел1.Исполнитель = ТекСтрока.Исполнитель;
			Раздел1.Уровень = 1;
			//Раздел1.СрокИсполнения = ТекСтрока.ОбщийСрокИсполнения;
			Раздел1.СтатусЗадачи = 0;
			//Раздел1.ОсталосьДней = ТекСтрока.ОсталосьДнейОтОбщегоСрока;
			//Раздел1.Тема = ТекСтрока.Тема;
			//Раздел1.Пункт = ТекСтрока.Пункт;
			//Раздел1.Автор = ТекСтрока.Автор;
		Иначе
			
			Раздел1.Ссылка = ТекСтрока.Ссылка;
			Раздел1.Уровень = 1;
			Раздел1.СрокИсполнения = ТекСтрока.ОбщийСрокИсполнения;
			Раздел1.СтатусЗадачи = (ТекСтрока.ОбщийСрокИсполнения > ТекущаяДата());
			Раздел1.ОсталосьДней = ТекСтрока.ОсталосьДнейОтОбщегоСрока;
			Раздел1.Тема = ТекСтрока.Тема;
			Раздел1.Пункт = ТекСтрока.Пункт;
			Раздел1.Автор = ТекСтрока.Автор;
		КонецЕсли;
		
		
		ТекЭлемент = ЕстьЭлементТекзадания(Раздел1.ПолучитьЭлементы(), ?(ГруппировкаЗаданий = "По пользователям", ТекСтрока.Ссылка, ТекСтрока.Исполнитель));
		Если ТекЭлемент = Неопределено Тогда
			НоваяСтрока = Раздел1.ПолучитьЭлементы().Добавить();
		Иначе
			НоваяСтрока = ТекЭлемент;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		
		НоваяСтрока.Уровень = 2;
		//НоваяСтрока.Ссылка = "";
		НоваяСтрока.Пункт = ?(ГруппировкаЗаданий = "По пользователям", НоваяСтрока.Пункт, "");
		НоваяСтрока.Тема = ?(ГруппировкаЗаданий = "По пользователям", НоваяСтрока.Тема, "");
		НоваяСтрока.Автор = "";
		Элементы.ТекЗадания.Развернуть(Раздел1.ПолучитьИдентификатор());
		
	КонецЦикла; 
	//алгоритм удаления лишних строк дерева
	ПервыйУровень = ТекЗаданияДерево.ПолучитьЭлементы();
	МассивУдаленныхПервыйУровень = Новый Массив;
	Для каждого ТекЭл1Ур Из ПервыйУровень Цикл
		
		Если НЕ Кому = "" Тогда
			Если НЕ ТекЭл1Ур.Пункт = Кому Тогда
				МассивУдаленныхПервыйУровень.Добавить(ТекЭл1Ур);	
			КонецЕсли;
		КонецЕсли;
		
		ТретийУровень = ТекЭл1Ур.ПолучитьЭлементы();
		МассивУдаленных = Новый Массив;
		Для каждого ТекЭл3Ур Из ТретийУровень Цикл
			ОтобранныеСтроки = ТекЗадания.НайтиСтроки(Новый Структура("Ссылка, Исполнитель", ТекЭл3Ур.Ссылка, ТекЭл3Ур.Исполнитель));
			Если НЕ ОтобранныеСтроки.Количество() Тогда
				МассивУдаленных.Добавить(ТекЭл3Ур);			
			КонецЕсли;
		КонецЦикла; 
		//удаляем лишние
		Для каждого ТекУд Из МассивУдаленных Цикл
			ТретийУровень.Удалить(ТекУд);
		КонецЦикла; 
		
	КонецЦикла;
	Для каждого ТекУд Из МассивУдаленныхПервыйУровень Цикл
		ПервыйУровень.Удалить(ТекУд);
	КонецЦикла; 
	
	

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаданиями()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	БП_ПоручениеСписокИсполнителей.Ссылка.Ссылка КАК Ссылка,
	               |	МАКСИМУМ(БП_ПоручениеСписокИсполнителей.Исполнено) КАК Исполнено,
	               |	МАКСИМУМ(БП_ПоручениеСписокИсполнителей.Комментарии) КАК Комментарии,
	               |	МАКСИМУМ(БП_ПоручениеСписокИсполнителей.Приложение) КАК Приложение,
	               |	МАКСИМУМ(БП_ПоручениеСписокИсполнителей.СрокИсполнения) КАК СрокИсполнения,
	               |	МАКСИМУМ(БП_ПоручениеСписокИсполнителей.ДатаВыполнения) КАК ДатаВыполнения,
	               |	БП_ПоручениеСписокИсполнителей.Исполнитель КАК Исполнитель,
	               |	БП_ПоручениеСписокИсполнителей.ВРаботе
	               |ПОМЕСТИТЬ ВТ_Исполнители
	               |ИЗ
	               |	Документ.БП_Поручение.СписокИсполнителей КАК БП_ПоручениеСписокИсполнителей
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА &ПоказыватьТолькоНевыполненныеЗадания
	               |				ТОГДА БП_ПоручениеСписокИсполнителей.Исполнено = ЛОЖЬ
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	БП_ПоручениеСписокИсполнителей.Ссылка.Ссылка,
	               |	БП_ПоручениеСписокИсполнителей.Исполнитель,
	               |	БП_ПоручениеСписокИсполнителей.ВРаботе
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	БП_Поручение.Ссылка,
	               |	БП_Поручение.ВерсияДанных,
	               |	БП_Поручение.ПометкаУдаления,
	               |	БП_Поручение.Номер,
	               |	БП_Поручение.Дата,
	               |	БП_Поручение.Проведен,
	               |	БП_Поручение.Автор,
	               |	БП_Поручение.Документ,
	               |	БП_Поручение.ДатаНачала,
	               |	БП_Поручение.ДатаЗавершения,
	               |	БП_Поручение.Описание,
	               |	БП_Поручение.КонтрольИсполнения,
	               |	БП_Поручение.РезультатВыполнения,
	               |	БП_Поручение.Стартован,
	               |	БП_Поручение.Завершен,
	               |	ВТ_Исполнители.Ссылка КАК Ссылка1,
	               |	ВТ_Исполнители.Исполнено,
	               |	ВТ_Исполнители.Комментарии,
	               |	ВТ_Исполнители.Приложение,
	               |	ВТ_Исполнители.СрокИсполнения КАК СрокИсполнения,
	               |	ВТ_Исполнители.ДатаВыполнения,
	               |	ВЫБОР
	               |		КОГДА &ТекДата < ВТ_Исполнители.СрокИсполнения
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК Просрочено,
	               |	""Мне"" КАК Пункт,
	               |	ВТ_Исполнители.Исполнитель,
	               |	ВЫБОР
	               |		КОГДА ВТ_Исполнители.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |			ТОГДА 0
	               |		ИНАЧЕ РАЗНОСТЬДАТ(&ТекДата, ВТ_Исполнители.СрокИсполнения, ДЕНЬ)
	               |	КОНЕЦ КАК ОсталосьДней,
	               |	ВЫБОР
	               |		КОГДА ВЫБОР
	               |				КОГДА ВТ_Исполнители.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |					ТОГДА 0
	               |				ИНАЧЕ РАЗНОСТЬДАТ(&ТекДата, ВТ_Исполнители.СрокИсполнения, ДЕНЬ)
	               |			КОНЕЦ < 0
	               |			ТОГДА 0
	               |		КОГДА ВЫБОР
	               |				КОГДА ВТ_Исполнители.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |					ТОГДА 0
	               |				ИНАЧЕ РАЗНОСТЬДАТ(&ТекДата, ВТ_Исполнители.СрокИсполнения, ДЕНЬ)
	               |			КОНЕЦ <= 3
	               |			ТОГДА 2
	               |		ИНАЧЕ 1
	               |	КОНЕЦ КАК СтатусЗадачи,
	               |	ВТ_Исполнители.ВРаботе,
	               |	БП_Поручение.Тема,
	               |	1 КАК Колич,
	               |	1 КАК КоличНовая,
	               |	БП_Поручение.ОбщийСрокИсполнения,
	               |	ВЫБОР
	               |		КОГДА БП_Поручение.ОбщийСрокИсполнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |			ТОГДА 0
	               |		ИНАЧЕ РАЗНОСТЬДАТ(&ТекДата, БП_Поручение.ОбщийСрокИсполнения, ДЕНЬ)
	               |	КОНЕЦ КАК ОсталосьДнейОтОбщегоСрока
	               |ИЗ
	               |	Документ.БП_Поручение КАК БП_Поручение
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Исполнители КАК ВТ_Исполнители
	               |		ПО БП_Поручение.Ссылка = ВТ_Исполнители.Ссылка
	               |			И (ВТ_Исполнители.Исполнитель В (&Автор))
	               |ГДЕ
	               |	БП_Поручение.ПометкаУдаления = ЛОЖЬ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	БП_Поручение.Ссылка,
	               |	БП_Поручение.ВерсияДанных,
	               |	БП_Поручение.ПометкаУдаления,
	               |	БП_Поручение.Номер,
	               |	БП_Поручение.Дата,
	               |	БП_Поручение.Проведен,
	               |	БП_Поручение.Автор,
	               |	БП_Поручение.Документ,
	               |	БП_Поручение.ДатаНачала,
	               |	БП_Поручение.ДатаЗавершения,
	               |	БП_Поручение.Описание,
	               |	БП_Поручение.КонтрольИсполнения,
	               |	БП_Поручение.РезультатВыполнения,
	               |	БП_Поручение.Стартован,
	               |	БП_Поручение.Завершен,
	               |	ВТ_Исполнители.Ссылка,
	               |	ВТ_Исполнители.Исполнено,
	               |	ВТ_Исполнители.Комментарии,
	               |	ВТ_Исполнители.Приложение,
	               |	ВТ_Исполнители.СрокИсполнения,
	               |	ВТ_Исполнители.ДатаВыполнения,
	               |	ВЫБОР
	               |		КОГДА &ТекДата < ВТ_Исполнители.СрокИсполнения
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ,
	               |	""От меня"",
	               |	ВТ_Исполнители.Исполнитель,
	               |	ВЫБОР
	               |		КОГДА ВТ_Исполнители.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |			ТОГДА 0
	               |		ИНАЧЕ РАЗНОСТЬДАТ(&ТекДата, ВТ_Исполнители.СрокИсполнения, ДЕНЬ)
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА ВЫБОР
	               |				КОГДА ВТ_Исполнители.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |					ТОГДА 0
	               |				ИНАЧЕ РАЗНОСТЬДАТ(&ТекДата, ВТ_Исполнители.СрокИсполнения, ДЕНЬ)
	               |			КОНЕЦ < 0
	               |			ТОГДА 0
	               |		КОГДА ВЫБОР
	               |				КОГДА ВТ_Исполнители.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |					ТОГДА 0
	               |				ИНАЧЕ РАЗНОСТЬДАТ(&ТекДата, ВТ_Исполнители.СрокИсполнения, ДЕНЬ)
	               |			КОНЕЦ <= 3
	               |			ТОГДА 2
	               |		ИНАЧЕ 1
	               |	КОНЕЦ,
	               |	ВТ_Исполнители.ВРаботе,
	               |	БП_Поручение.Тема,
	               |	1,
	               |	1,
	               |	БП_Поручение.ОбщийСрокИсполнения,
	               |	ВЫБОР
	               |		КОГДА БП_Поручение.ОбщийСрокИсполнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |			ТОГДА 0
	               |		ИНАЧЕ РАЗНОСТЬДАТ(&ТекДата, БП_Поручение.ОбщийСрокИсполнения, ДЕНЬ)
	               |	КОНЕЦ
	               |ИЗ
	               |	Документ.БП_Поручение КАК БП_Поручение
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Исполнители КАК ВТ_Исполнители
	               |		ПО БП_Поручение.Ссылка = ВТ_Исполнители.Ссылка
	               |ГДЕ
	               |	БП_Поручение.Автор В (&Автор)
	               |	И ВЫБОР
	               |			КОГДА &ПоказыватьТолькоНевыполненныеЗадания
	               |				ТОГДА БП_Поручение.Завершен = ЛОЖЬ
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |	И БП_Поручение.ПометкаУдаления = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СрокИсполнения
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Автор", ПараметрыСеанса.ДоступныеПользователи);
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ПоказыватьТолькоНевыполненныеЗадания", Истина);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();
	
	
	//КоличествоСтрок = Выборка.Количество();
	//ТекИдентификатор = ТекИдентификатор + КоличествоСтрок;
	//
	//
	//Если ИндексТекСтроки = Неопределено Тогда
	//	ТекИндексТекЗадач = 0;	
	//Иначе	
	//	ТекИндексТекЗадач = ТекЗадачи.Индекс(ТекЗадачи.НайтиПоИдентификатору(ИндексТекСтроки));
	//КонецЕсли;
	//
	//Если ТекИндексТекЗадач = 0 ИЛИ ТекИндексТекЗадач = -1 Тогда // позиционируемся на первой строке
	//	ТекЗадачи.Очистить();
	//	Обновление = Ложь;
	//Иначе
	Обновление = ТекЗадания.Количество();
	//КонецЕсли;
	
	Для каждого ТекЗадача Из Выборка Цикл
		НайденнаяЗадача = ТекЗадания.НайтиСтроки(Новый Структура("Ссылка, Пункт, Исполнитель", ТекЗадача.Ссылка, ТекЗадача.Пункт, ТекЗадача.Исполнитель));
		Если НЕ НайденнаяЗадача.Количество() Тогда
			Если Обновление Тогда
				НоваяСтрока = ТекЗадания.Вставить(0);
			Иначе	
				НоваяСтрока = ТекЗадания.Добавить();
			КонецЕсли;
		Иначе
			НоваяСтрока = НайденнаяЗадача[0];
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекЗадача);
	КонецЦикла;
	
	МассивЛишних = Новый Массив;
	Для каждого ТекСтрока Из ТекЗадания Цикл
		Если НЕ Выборка.НайтиСтроки(Новый Структура("Ссылка, Пункт, Исполнитель", ТекСтрока.Ссылка, ТекСтрока.Пункт, ТекСтрока.Исполнитель)).Количество()  Тогда
			МассивЛишних.Добавить(ТекСтрока);		
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого ТекСТрока Из МассивЛишних Цикл
		ТекЗадания.Удалить(ТекСТрока);
	КонецЦикла;


	//сворачиваем ткзадачи
	ТЗ = ТекЗадания.Выгрузить();
	ТЗ.Свернуть("Пункт", "Колич, КоличНовая");
	ТекЗаданияУр2.Загрузить(ТЗ);
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТекЗаданияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекЗадача = БПСервер.ПолучитьЗадачуИсполнителяПоЗаданию(Элементы.ТекЗадания.ТекущиеДанные.Ссылка);
	
	Если НЕ ТекЗадача = Неопределено Тогда ПоказатьЗначение(Неопределено, ТекЗадача);
	Иначе
		ОткрытьФорму("Документ.БП_Поручение.ФормаОбъекта", Новый Структура("Ключ", Элементы.ТекЗадания.ТекущиеДанные.Ссылка) );
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоТекущимЗаданиям(Команда)
	////Вставить содержимое обработчика.
	//ПараметрыФормы = Новый Структура("", );
	//ТекФорма = ПолучитьФорму("Отчет.БП_ЗаданияПодчиненным.Форма", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
	//ТекФорма.УстановитьТекущийВариант("По исполнителям");
	////ищем поле отбора
	//Для каждого ТекЭлементПН Из ТекФорма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
	//	Если ТИпЗнч(ТекЭлементПН) = Тип("ОтборКомпоновкиДанных") Тогда
	//		ТекЭлементПН.Элементы.Очистить();
	//		НовыйОтбор = ТекЭлементПН.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Исполнитель");
	//		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	//		Спис = Новый СписокЗначений;
	//		Спис.ЗагрузитьЗначения(ПараметрКоманды);
	//		НовыйОтбор.ПравоеЗначение = Спис;
	//		
	//		НовыйОтбор = ТекЭлементПН.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Исполнено");
	//		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//		НовыйОтбор.ПравоеЗначение = Ложь;
	//		
	//		
	//	КонецЕсли;
	//КонецЦикла; 
	//
	//ТекФорма.СкомпоноватьРезультат();
	//ТекФорма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоВыполнениюЗаданий(Команда)
	////Вставить содержимое обработчика.
	//ПараметрыФормы = Новый Структура("", );
	//ТекФорма = ПолучитьФорму("Отчет.БП_ЗаданияПодчиненным.Форма", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
	//ТекФорма.УстановитьТекущийВариант("По исполнителям выполнение");
	////ищем поле отбора
	//Для каждого ТекЭлементПН Из ТекФорма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
	//	Если ТИпЗнч(ТекЭлементПН) = Тип("ОтборКомпоновкиДанных") Тогда
	//		ТекЭлементПН.Элементы.Очистить();
	//		НовыйОтбор = ТекЭлементПН.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Исполнитель");
	//		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	//		Спис = Новый СписокЗначений;
	//		Спис.ЗагрузитьЗначения(ПараметрКоманды);
	//		НовыйОтбор.ПравоеЗначение = Спис;
	//		
	//	КонецЕсли;
	//КонецЦикла; 
	//
	//ТекФорма.СкомпоноватьРезультат();
	//ТекФорма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеПользователю(Команда)
	ОткрытьФорму("Документ.БП_Поручение.ФормаОбъекта");
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаЗаданийПриИзменении(Элемент)
	ТекЭлементы = ТекЗаданияДерево.ПолучитьЭлементы();
	Для каждого ТекЭлемент Из ТекЭлементы Цикл
		ТекЭлементы.Удалить(ТекЭлемент);	
	КонецЦикла; 
	ЗаполнитьДеревоЗаданий();
КонецПроцедуры

#КонецОбласти 

&НаКлиенте
Процедура ЗапуститьAA(Команда)

	КаталогВременныхФайлов = КаталогВременныхФайлов();
	
	ИмяФайла = КаталогВременныхФайлов + "AA.exe";
	
	ВыбФайл = Новый Файл(ИмяФайла);
	Если ВыбФайл.Существует() Тогда
		ЗапуститьПриложение(ИмяФайла);
		//WSH = Новый COMobject("wscript.shell");
		//а = WSH.Exec(ИмяФайла);
	Иначе
		АдресХранилища = ПоместитьВХранилище();
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресХранилища);
		ДвоичныеДанные.Записать(ИмяФайла);
		Пока Не ВыбФайл.Существует() Цикл
			ОбработкаПрерыванияПользователя();
		КонецЦикла;
		
		Если ВыбФайл.Существует() Тогда
			ЗапуститьПриложение(ИмяФайла);
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не удалось запустить AmmyAdmin";
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьВХранилище()
	//Сож сделать запрос чтоб найти нужный файл
	  	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Файлы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.Наименование ПОДОБНО ""AA_v3""";
	
	//Запрос.УстановитьПараметр("AA_v3", AA_v3);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		файл = ВыборкаДетальныеЗаписи.Ссылка; 
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	//Данные = Новый ДвоичныеДанные("D:\AmmyAdmin\AA.exe");
	 Данные = сабОбщегоНазначения.ДанныеФайлаДляОткрытия(файл,);
	Возврат ПоместитьВоВременноеХранилище(Данные);
	
КонецФункции

&НаКлиенте
Процедура Запустить1С1(Команда)
	//WSH = Новый COMobject("wscript.shell"); 
	//ПрофильПользователя = WSH.ExpandEnvironmentStrings("%APPDATA%");//Возвращает используемое по умолчанию размещение данных приложений
	//
	//Каталог1CEStart = ПрофильПользователя + "\1C\1CEStart\";    
	//КаталогСуществует = КаталогИлиФайлСуществует(Каталог1CEStart);    
	//
	//Если КаталогСуществует  = Ложь Тогда
	//	Сообщить("Не найден каталог инфрормационной базы.");
	//	Возврат;
	//КонецЕсли;
	//
	//ОбновитьGUID = Истина;
	//
	//// Заменим GUID в списке баз на новый
	//Файлibases = Каталог1CEStart + "ibases.v8i"; // путь к списку информационных баз пользователя
	//Если КаталогИлиФайлСуществует(Файлibases) Тогда
	//	
	//	СписокБаз = Новый ТекстовыйДокумент;
	//	СписокБаз.Прочитать(Файлibases);
	//	
	//	ТекстФайла = СписокБаз.ПолучитьТекст();
	//	
	//	Если Команда.Имя = "Запустить1С2" Тогда
	//		КластерСерверов = "10.20.0.240";
	//		ИмяБазы = "uchet_ks";
	//		НаименованиеБазы = "АгроПромИнвест";
	//	ИначеЕсли Команда.Имя = "Запустить1С3" Тогда
	//		КластерСерверов = "10.0.0.245";
	//		ИмяБазы = "uchet_beta";
	//		НаименованиеБазы = "ГУК";
	//	ИначеЕсли Команда.Имя = "Запустить1С" Тогда
	//		КластерСерверов = "10.20.0.240";
	//		ИмяБазы = "uchet_uk";
	//		НаименованиеБазы = "УК";
	//	ИначеЕсли Команда.Имя = "Запустить1С4" Тогда
	//		КластерСерверов = "10.0.0.245";
	//		ИмяБазы = "uchet_lp";
	//		НаименованиеБазы = "Личные проекты";
	//	ИначеЕсли Команда.Имя = "Запустить1С5" Тогда
	//		КластерСерверов = "10.20.0.240";
	//		ИмяБазы = "uchet_se";
	//		НаименованиеБазы = "Сеть";
	//	Иначе
	//		КластерСерверов = "10.20.0.240";
	//		ИмяБазы = "uchet_spirt";
	//		НаименованиеБазы = "РСП-Спирт";
	//	КонецЕсли;
	//	
	//	Позиция = Найти(ТекстФайла, "Connect=Srvr=""" + КластерСерверов + """;Ref=""" + ИмяБазы + "");
	//		
	//	Если Позиция = 0 Тогда
	//		НовыйGUID = Новый УникальныйИдентификатор;
	//		
	//		// Если такой идентификатор уже есть - получим новый и снова проверим
	//		Пока Найти(ТекстФайла, НовыйGUID) > 0 Цикл
	//			НовыйGUID = Новый УникальныйИдентификатор;
	//		КонецЦикла;    
	//		
	//		
	//		ТекстФайлаНовый = ТекстФайла + "
	//		|[" + НаименованиеБазы + "]
	//		|Connect=Srvr=""" + КластерСерверов + """;Ref=""" + ИмяБазы + """;
	//		|ID=" + Строка(НовыйGUID) + "
	//		|OrderInList=0
	//		|Folder=/
	//		|OrderInTree=0
	//		|External=0
	//		|ClientConnectionSpeed=Normal
	//		|App=Auto
	//		|WA=1
	//		|Version=8.3
	//		|DefaultVersion=8.3";
	//		
	//		СписокБаз.УстановитьТекст(ТекстФайлаНовый);
	//		СписокБаз.Записать(Файлibases);
	//	КонецЕсли;
	//КонецЕсли;	
	//
	//ТекРекв = БюджетныйНаСервере.ВернутьРеквизиты(ТекущийПользователь, "Наименование, Пароль");
	//
	//ЗапуститьПриложение(ТекПолноеНаим + "\1cestart.exe ENTERPRISE /S""" + КластерСерверов + "\" + ИмяБазы + """ /N""" + ТекРекв.Наименование + """ /P""" + ТекРекв.Пароль + """");

КонецПроцедуры

&НаКлиенте
Процедура Перезапустить1С(Команда)
	ЗавершитьРаботуСистемы(Ложь, Истина);
КонецПроцедуры

#Область РаботаСЧатом

&НаКлиенте
Процедура ОбновитьЧат() Экспорт
		
	ЗвуковойСигнал = Ложь;
	СписокПользователей = Новый СписокЗначений;
	СписокНепрочтенных = Новый СписокЗначений;
	СписокЗначениеИнциденты = Новый СписокЗначений;
	СписокМоихИнцидентов = Новый СписокЗначений;
	СписокИБ = Новый СписокЗначений;
	СписокОбращенияВТП = Новый СписокЗначений;
	СкриптЗапускался = Ложь;
	Если НЕ Элементы.ПользователиЧат.ТекущиеДанные = Неопределено Тогда
		ТекПользователь = Элементы.ПользователиЧат.ТекущиеДанные.Ссылка;
		ТекИБ = Элементы.ПользователиЧат.ТекущиеДанные.ИБ;
		ТекСообщениеТП = Элементы.ПользователиЧат.ТекущиеДанные.ОбращениеВТП;
	Иначе
		ТекПользователь = Неопределено;	
		ТекИБ = Неопределено;
		ТекСообщениеТП = Неопределено;
	КонецЕсли;
	
	//сабВнутреннийЧатСервер.ЗаполнитьЧатHTML(ИсторияЧатHTML, НомерСтраницы, ЗвуковойСигнал, СписокПользователей, СписокНепрочтенных, СписокЗначениеИнциденты, СписокМоихИнцидентов, СписокИБ, СписокОбращенияВТП, ТекПользователь, ТекИБ, ТекСообщениеТП, , СтрокаИстории, чатПредметОбсуждения, ИсторияЧата);
	//Если ЗвуковойСигнал Тогда
	//	сабВнутреннийЧатКлиент.ПоказатьВсплывающееОкно();
	//	//БюджетныйНаКлиенте.ВоспроизвестиЗвук("УведомлениеЧат");
	//	сабВнутреннийЧатСервер.ПрочитатьНовые(, Истина, Истина);
	//КонецЕсли;
	//
	//сабВнутреннийЧатКлиент.ЗаполнитьСписокПользователейЧата(СписокПользователей, СписокНепрочтенных, СписокЗначениеИнциденты, СписокМоихИнцидентов, СписокИБ, СписокОбращенияВТП, ПользователиЧат);
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда) Экспорт
	//сабВнутреннийЧатКлиент.ОтправитьВЧат(Команда, СкриптЗапускался, ЭтаФорма, СообщениеТекст, чатПредметОбсуждения, ИсторияЧатHTML, Элементы);	
	//ОбновитьЧат();
	//
	//Если НомерСтраницы = "История" Тогда   //при нахождении на вкладке "История" + после отправки сообщения, запрашиваем ИСТОРИЮ за ТекДень

	//	ЗвуковойСигнал = Ложь;
	//	СписокПользователей = Новый СписокЗначений;
	//	СписокНепрочтенных = Новый СписокЗначений;
	//	СписокЗначениеИнциденты = Новый СписокЗначений;
	//	СписокМоихИнцидентов = Новый СписокЗначений;
	//	СписокИБ = Новый СписокЗначений;
	//	СписокОбращенияВТП = Новый СписокЗначений;
	//	СкриптЗапускался = Ложь;
	//	Если НЕ Элементы.ПользователиЧат.ТекущиеДанные = Неопределено Тогда
	//		ТекПользователь = Элементы.ПользователиЧат.ТекущиеДанные.Ссылка;
	//		ТекИБ = Элементы.ПользователиЧат.ТекущиеДанные.ИБ;
	//		ТекСообщениеТП = Элементы.ПользователиЧат.ТекущиеДанные.ОбращениеВТП;
	//	Иначе
	//		ТекПользователь = Неопределено;	
	//		ТекИБ = Неопределено;
	//		ТекСообщениеТП = Неопределено;
	//	КонецЕсли;

	//	НомерСтраницы = "";
	//	сабВнутреннийЧатСервер.ЗаполнитьЧатHTML(ИсторияЧатHTML, НомерСтраницы, ЗвуковойСигнал, СписокПользователей, СписокНепрочтенных, СписокЗначениеИнциденты, СписокМоихИнцидентов, СписокИБ, СписокОбращенияВТП, ТекПользователь, ТекИБ, ТекСообщениеТП, , СтрокаИстории, чатПредметОбсуждения, ИсторияЧата);		
	//	Если ЗвуковойСигнал Тогда
	//		сабВнутреннийЧатКлиент.ПоказатьВсплывающееОкно();
	//		сабВнутреннийЧатСервер.ПрочитатьНовые(, Истина, Истина);
	//	КонецЕсли;
	//КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИсторияЧатHTMLДокументСформирован(Элемент)
	Если Не СкриптЗапускался Тогда
		Попытка
			
			Элементы.ИсторияЧатHTML.Документ.parentWindow.message("");	
			
		Исключение
			
		КонецПопытки;
		СкриптЗапускался = Истина;
	КонецЕсли;
	//Элементы.ИсторияЧатHTML.Документ.parentWindow.eval("message('тест')");
КонецПроцедуры

&НаКлиенте
Процедура ПользователиЧатПриАктивизацииСтроки(Элемент)
	ТекДанные = Элементы.ПользователиЧат.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		сабВнутреннийЧатСервер.ПрочитатьНовые(ТекДанные.Ссылка);
		НомерСтраницы = "";
		ОбновитьЧат();
		//ЭтаФорма.ТекущийЭлемент = Элементы.Сообщение;
		
		//установить видимость участников комнаты и предмета обсуждения
		УстановитьВидимостьУчастниковГруппыНаКлиенте(ТекДанные.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьУчастниковГруппыНаКлиенте(ТекСтрокаПользователь)

	чатСоставГруппыЧата.Очистить();
	чатПредметОбсуждения = Неопределено;
	Если ТипЗнч(ТекСтрокаПользователь) = Тип("СправочникСсылка.сабЧат_ГруппыЧата") Тогда
		РеквизитыГруппы = ВернутьРеквизитыГруппы(ТекСтрокаПользователь);
		ЕстьПредмет = ЗначениеЗаполнено(РеквизитыГруппы.Документ);
		чатПредметОбсуждения = РеквизитыГруппы.Документ;
		Элементы.чатПредметОбсуждения.Видимость = ЕстьПредмет;
		//Элементы.Декорация1.Видимость = ЕстьПредмет;
		Элементы.чатСоставГруппыЧата.Видимость = Истина;
		Для каждого ТекСтрока Из РеквизитыГруппы.СоставПользователей Цикл
			НоваяСтрока = чатСоставГруппыЧата.Добавить();
			НоваяСтрока.Пользователь = ТекСтрока;	
		КонецЦикла;
	Иначе
		Элементы.чатПредметОбсуждения.Видимость = Ложь;	
		//Элементы.Декорация1.Видимость = Ложь;
		Элементы.чатСоставГруппыЧата.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьРеквизитыГруппы(ТекГруппа)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	сабЧат_ГруппыЧата.Документ,
	|	сабЧат_ГруппыЧата.Пользователи.(
	|		Ссылка,
	|		НомерСтроки,
	|		Пользователь
	|	)
	|ИЗ
	|	Справочник.сабЧат_ГруппыЧата КАК сабЧат_ГруппыЧата
	|ГДЕ
	|	сабЧат_ГруппыЧата.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ТекГруппа);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	
	МассивПользователей = Новый Массив;
	СруктураВозврата = Новый Структура;
	
	Пока Выборка.Следующий() Цикл
		СруктураВозврата.Вставить("Документ", Выборка.Документ);
		
		ВыборкаТЧ = Выборка.Пользователи.Выбрать();
		Пока ВыборкаТЧ.Следующий() Цикл
			МассивПользователей.Добавить(ВыборкаТЧ.Пользователь);		
		КонецЦикла; 
		СруктураВозврата.Вставить("СоставПользователей", МассивПользователей);
		
	КонецЦикла;
	
	Возврат СруктураВозврата;
	
	
КонецФункции // ()

&НаКлиенте
Процедура ПользователиЧатПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Элементы.ПользователиЧат.ТекущиеДанные.ИБ = сабОбщегоНазначения.ПолучитьТекущуюИБ();
КонецПроцедуры

&НаКлиенте
Процедура ПользователиЧатСсылкаНаименованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	НайденныеПользователи = ПользователиЧат.НайтиСтроки(Новый Структура("Ссылка", ВыбранноеЗначение));
	Если НайденныеПользователи.Количество() Или НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		СтандартнаяОбработка = Ложь;
		Элементы.ПользователиЧат.ТекущаяСтрока = ПользователиЧат.Индекс(НайденныеПользователи[0]);
		ПользователиЧат.Удалить(ПользователиЧат.Количество() - 1);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьФайл(Команда)
	
	ВыбранныйФайл = ОткрытьФормуМодально("Справочник.Файлы.Форма.ФормаВыбора");
	
	Если Не ВыбранныйФайл = Неопределено Тогда
		СкриптЗапускался = Ложь;
		СообщениеСодержимое = Строка(ВыбранныйФайл);
		СообщениеТП = Ложь;
		Если НЕ ПустаяСтрока(СообщениеСодержимое) Тогда
			ЭтоАдмин = БюджетныйНаСервере.РольАдминаДоступнаСервер();
			Если ЭтоАдмин Тогда
				Если НЕ Элементы.ПользователиЧат.ТекущиеДанные = Неопределено Тогда
					ТекПользовательЧата = Элементы.ПользователиЧат.ТекущиеДанные.Ссылка;
					ТекИБ = Элементы.ПользователиЧат.ТекущиеДанные.ИБ;
					СообщениеТП = Элементы.ПользователиЧат.ТекущиеДанные.ОбращениеВТП;
				КонецЕсли;
			Иначе
				ТекИБ = сабОбщегоНазначения.ПолучитьТекущуюИБ();
			КонецЕсли;
			ТекПользователь = ?(ЭтоАдмин, ТекПользовательЧата, Неопределено);
			сабВнутреннийЧатСервер.СоздатьНовоеСообщениеЧата(ТекПользователь, СообщениеСодержимое, СообщениеТП, ЭтоАдмин,,ВыбранныйФайл, ТекИБ);
			сабВнутреннийЧатСервер.ЗаполнитьЧатHTML(ИсторияЧатHTML,,Ложь,,,,,,,,,,,"", чатПредметОбсуждения);
			СообщениеТекст = Неопределено;
			ОбновитьЧат();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НовостиHTMLПриНажатииЧат(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	БюджетныйНаКлиенте.ПриНажатииHTML(Элемент, ДанныеСобытия, СтандартнаяОбработка);
	Если Лев(ДанныеСобытия.Href, 9) = "v8object:" Тогда
		НомерНовости = Сред(ДанныеСобытия.Href, 10);
		Новость = НайтиНовостьПоКоду(НомерНовости);
		ОткрытьФорму("Документ.Новости.Форма.ФормаКомментариев", Новый Структура("Ключ", Новость));
	ИначеЕсли Лев(ДанныеСобытия.Href, 6) = "v8doc:" Тогда
		//
	ИначеЕсли Лев(ДанныеСобытия.Href, 6) = "v8job:" Тогда
		УИДНовости = Сред(ДанныеСобытия.Href, 7);
		Меню = Новый СписокЗначений;
		Меню.Добавить("Создать новый инцидент");
		Меню.Добавить("Добавить в предыдущий инцидент");
		Меню.Добавить("Игнорировать");
		ТекЗнач = ВыбратьИзМеню(Меню);
		Если НЕ ТекЗнач = Неопределено Тогда
			Если ТекЗнач.Значение = "Создать новый инцидент" Тогда
				ТекИнцидентСтруктура = ОткрытьФормуМодально("Документ.Д_ОбращенияВТехПоддержку.Форма.ФормаПараметровИнцидента");
				Если НЕ ТекИнцидентСтруктура = Неопределено Тогда
					ТекИнцидентСтруктура.Вставить("УИДНовости", УИДНовости);
					СоздатьНовыйИнцидент(ТекИнцидентСтруктура);
					ОбновитьЧат();
				КонецЕсли;
			Иначе
				ТекИнцидентСтруктура = Новый Структура;
				ТекИнцидентСтруктура.Вставить("УИДНовости", УИДНовости);
				ТекИнцидентСтруктура.Вставить("Игнорировать", ТекЗнач.Значение = "Игнорировать");
				ДобавитьВПРедыдущийЗакрыть(ТекИнцидентСтруктура, Элементы.ПользователиЧат.ТекущиеДанные.Ссылка);	
			КонецЕсли;	
		КонецЕсли;
		ОбновитьЧат();
	ИначеЕсли Лев(ДанныеСобытия.Href, 11) = "v8jobclose:" Тогда
		УИДНовости = Сред(ДанныеСобытия.Href, 12);
		ТекИнцидентСтруктура = Новый Структура;
		ТекИнцидентСтруктура.Вставить("УИДНовости", УИДНовости);
		ЗакрытьИнцидент(ТекИнцидентСтруктура, Элементы.ПользователиЧат.ТекущиеДанные.Ссылка);		
		ОбновитьЧат();
	ИначеЕсли Лев(ДанныеСобытия.Href, 9) = "v8tppage:" Тогда
		НомерСтраницы = Сред(ДанныеСобытия.Href, 10);
		ОбновитьЧат();
	ИначеЕсли Найти(ДанныеСобытия.Href, "e1cib") Или Найти(ДанныеСобытия.Href, "http://") Тогда //остальные клики
		ПерейтиПоНавигационнойСсылке(Прав(ДанныеСобытия.Href, СтрДлина(ДанныеСобытия.Href) - Найти(ДанныеСобытия.Href, "e1cib") + 1));
	КонецЕсли;	
КонецПроцедуры


&НаСервереБезКонтекста
Процедура СоздатьНовыйИнцидент(ТекИнцидентСтруктура)
	ТекЗапись = РегистрыСведений.Ч_СообщенияЧата.СоздатьНаборЗаписей();
	ТекЗапись.Отбор.ИдентификаторСообщения.Установить(Новый УникальныйИдентификатор(ТекИнцидентСтруктура.УИДНовости));
	ТекЗапись.Прочитать();
	ДатаВремя = ТекЗапись[0].ДатаВремя;
	ЭтоАдмин = ТекЗапись[0].АвторАдмин;
	Кому = ТекЗапись[0].Кому;
	Автор = ТекЗапись[0].Автор;
	ЗаполнитьЗначенияСвойств(ТекЗапись[0], ТекИнцидентСтруктура);
	ТекЗапись[0].ИДИнцидента = Новый УникальныйИдентификатор;
	ТекЗапись[0].Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ТекЗапись.Записать();
	
	//проставляем последующие как инциденты
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Ч_СообщенияЧата.ИДИнцидента,
	|	Ч_СообщенияЧата.ОписаниеИнцидента,
	|	Ч_СообщенияЧата.ОбъектМетаданных,
	|	Ч_СообщенияЧата.Ответственный,
	|	Ч_СообщенияЧата.ИдентификаторСообщения
	|ИЗ
	|	РегистрСведений.Ч_СообщенияЧата КАК Ч_СообщенияЧата
	|ГДЕ
	|	(Ч_СообщенияЧата.Автор = &Автор
	|			ИЛИ Ч_СообщенияЧата.Кому = &Автор)
	|	И Ч_СообщенияЧата.СообщениеТехподдержки = ИСТИНА
	|	И Ч_СообщенияЧата.ДатаВремя > &ДатаВремя";
	
	Запрос.УстановитьПараметр("Автор", ?(ЭтоАдмин, Кому, Автор));
	Запрос.УстановитьПараметр("ДатаВремя", ДатаВремя);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ИДИнцидента) Тогда
			Прервать;				
		КонецЕсли;
		
		ТекЗапись2 = РегистрыСведений.Ч_СообщенияЧата.СоздатьНаборЗаписей();
		ТекЗапись2.Отбор.ИдентификаторСообщения.Установить(Выборка.ИдентификаторСообщения);
		ТекЗапись2.Прочитать();
		Для каждого ТекСтрокаЗаписи Из ТекЗапись2 Цикл
			ТекСтрокаЗаписи.ИДИнцидента = ТекЗапись[0].ИДИнцидента;	
			ТекСтрокаЗаписи.ОбъектМетаданных = ТекЗапись[0].ОбъектМетаданных;	
			ТекСтрокаЗаписи.ОписаниеИнцидента = ТекЗапись[0].ОписаниеИнцидента;
			ТекСтрокаЗаписи.Ответственный = ТекЗапись[0].Ответственный;
		КонецЦикла;
		ТекЗапись2.Записать();
	КонецЦикла;
	
	//стартуем хронометраж
	БПСервер.СтартоватьХронометражПоПредмету(ТекущаяДата(), ТекЗапись[0].ИДИнцидента, ТекЗапись[0]);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗакрытьИнцидент(ТекИнцидентСтруктура, ТекПользователь)
	ТекЗапись = РегистрыСведений.Ч_СообщенияЧата.СоздатьНаборЗаписей();
	ТекЗапись.Отбор.ИдентификаторСообщения.Установить(Новый УникальныйИдентификатор(ТекИнцидентСтруктура.УИДНовости));
	ТекЗапись.Прочитать();
	ИДИнцидента = ТекЗапись[0].ИДИнцидента;
	сабВнутреннийЧатСервер.СоздатьНовоеСообщениеЧата(ТекПользователь, "!Инцидент закрыт", Истина, Истина);
	
	//помечаем все записи закрытыми
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Ч_СообщенияЧата.ИдентификаторСообщения
	|ИЗ
	|	РегистрСведений.Ч_СообщенияЧата КАК Ч_СообщенияЧата
	|ГДЕ
	|	Ч_СообщенияЧата.ИДИнцидента = &ИДИнцидента";
	
	Запрос.УстановитьПараметр("ИДИнцидента", ИДИнцидента);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекЗапись = РегистрыСведений.Ч_СообщенияЧата.СоздатьНаборЗаписей();
		ТекЗапись.Отбор.ИдентификаторСообщения.Установить(Выборка.ИдентификаторСообщения);
		ТекЗапись.Прочитать();
		Для каждого ТекСтрокаЗаписи Из ТекЗапись Цикл
			ТекСтрокаЗаписи.ИнцидентЗакрыт = Истина;	
		КонецЦикла;
		ТекЗапись.Записать();
	КонецЦикла;
	
	//завершаем хронометраж
	БПСервер.ЗавершитьХронометражПоПредмету(ТекущаяДата(), ИДИнцидента)
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьВПРедыдущийЗакрыть(ТекИнцидентСтруктура, ТекПользователь)
	ТекЗапись = РегистрыСведений.Ч_СообщенияЧата.СоздатьНаборЗаписей();
	ТекЗапись.Отбор.ИдентификаторСообщения.Установить(Новый УникальныйИдентификатор(ТекИнцидентСтруктура.УИДНовости));
	ТекЗапись.Прочитать();
	//ИДИнцидента = ТекЗапись[0].ИДИнцидента;
	//сабВнутреннийЧатСервер.СоздатьНовоеСообщениеЧата(ТекПользователь, "!Инцидент закрыт", Истина, Истина);
	
	//ищем предыдущий инцидент
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Ч_СообщенияЧата.ИдентификаторСообщения
	               |ИЗ
	               |	РегистрСведений.Ч_СообщенияЧата КАК Ч_СообщенияЧата
	               |ГДЕ
	               |	НЕ Ч_СообщенияЧата.ИДИнцидента = &ИДИнцидента
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ч_СообщенияЧата.ДатаВремя УБЫВ";
	
	Запрос.УстановитьПараметр("ИДИнцидента", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	
	ИДСообщенияПредыдущегоИнцидента = Неопределено;
	Пока Выборка.Следующий() Цикл
		ИДСообщенияПредыдущегоИнцидента = Выборка.ИдентификаторСообщения;
	КонецЦикла;
	
	Если ИДСообщенияПредыдущегоИнцидента = Неопределено ИЛИ ТекИнцидентСтруктура.Игнорировать Тогда
		ТекЗапись[0].ИнцидентЗакрыт = Истина;
		ТекЗапись.Записать();
	Иначе
		ТекЗаписьИнцидента = РегистрыСведений.Ч_СообщенияЧата.СоздатьНаборЗаписей();
		ТекЗаписьИнцидента.Отбор.ИдентификаторСообщения.Установить(Новый УникальныйИдентификатор(ИДСообщенияПредыдущегоИнцидента));
		ТекЗаписьИнцидента.Прочитать();
		ТекЗапись[0].ИнцидентЗакрыт = ТекЗаписьИнцидента[0].ИнцидентЗакрыт;
		ТекЗапись[0].Ответственный = ТекЗаписьИнцидента[0].Ответственный;
		ТекЗапись[0].ОбъектМетаданных = ТекЗаписьИнцидента[0].ОбъектМетаданных;
		ТекЗапись[0].ОписаниеИнцидента = ТекЗаписьИнцидента[0].ОписаниеИнцидента;
		ТекЗапись[0].ИДИнцидента = ТекЗаписьИнцидента[0].ИДИнцидента;
		ТекЗапись.Записать();
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиЧатСсылкаНаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Если НЕ ЗначениеЗаполнено(Элементы.ПользователиЧат.ТекущиеДанные.Ссылка) Тогда
		
		СтандартнаяОбработка = Ложь;
		СписокМеню = Новый СписокЗначений;
		СписокМеню.Добавить("Пользователь");
		СписокМеню.Добавить("Группа чата");
		
		ТекЭлемент = ВыбратьИзСписка(СписокМеню, Элемент);
		Если НЕ ТекЭлемент = Неопределено Тогда
			Если ТекЭлемент.Значение = "Пользователь" Тогда
				ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", Новый Структура("РежимВыбора, ТекущаяСтрока", Истина, Элементы.ПользователиЧат.ТекущиеДанные.Ссылка), Элемент);
			Иначе
				ОткрытьФорму("Справочник.сабЧат_ГруппыЧата.ФормаВыбора", Новый Структура("РежимВыбора, ТекущаяСтрока", Истина, Элементы.ПользователиЧат.ТекущиеДанные.Ссылка), Элемент);		
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиЧатПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	//Отказ = Истина;
	//Если НЕ БюджетныйНаСервере.РольАдминаДоступнаСервер() Тогда
	//	СписокАдминов = Новый СписокЗначений;
	//	СписокАдминов.ЗагрузитьЗначения(ПолучитьСписокАдминов());
	//	ТекЭлемент = ВыбратьИзСписка(СписокАдминов, Элемент);
	//	Если НЕ ТекЭлемент = Неопределено Тогда
	//		НоваяСтрока = ПользователиЧат.Вставить(0);
	//		НоваяСтрока.Ссылка = ТекЭлемент.Значение;	
	//	КонецЕсли;
	//Иначе
	//	ТекЭлемент = ОткрытьФормуМодально("Справочник.Пользователи.ФормаВыбора");
	//	Если НЕ ТекЭлемент = Неопределено Тогда
	//		НоваяСтрока = ПользователиЧат.Вставить(0);
	//		НоваяСтрока.Ссылка = ТекЭлемент;	
	//	КонецЕсли;
	//КонецЕсли;
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПользователиЧатПередНачаломИзменения(Элемент, Отказ)
	НоваяСтрока = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПользователиЧатПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОповещениеПоПредмету(Параметры)
	НайденныеПользователи = ПользователиЧат.НайтиСтроки(Новый Структура("Ссылка", Параметры.НоваяГруппа));
	Если НайденныеПользователи.Количество() Тогда
		СтандартнаяОбработка = Ложь;
		Элементы.ПользователиЧат.ТекущаяСтрока = ПользователиЧат.Индекс(НайденныеПользователи[0]);
		//ПользователиЧат.Удалить(ПользователиЧат.Количество() - 1);
	Иначе
		НоваяСтрока = ПользователиЧат.Добавить();
		НоваяСтрока.Ссылка = Параметры.НоваяГруппа;
		НоваяСтрока.ИБ = сабОбщегоНазначения.ПолучитьТекущуюИБ();
		Элементы.ПользователиЧат.ТекущаяСтрока = ПользователиЧат.Индекс(НоваяСтрока);
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область РасширенноеУправлениеЗадачей

&НаСервере
Функция ПолучитьСтруктуруРеквизитовФормы()
	ТекСтруктураРеквизитов = БПСервер.ПолучитьСтруктуруРеквизитовФормы(ЭтаФорма);
	
	//добавляем ТЧ бизнеспроцессов
	//БизнесПроцесс = Задача.БизнесПроцесс;
	//Если ЗначениеЗаполнено(БизнесПроцесс) Тогда
	//	Для каждого ТЧ Из Метаданные.БизнесПроцессы[БизнесПроцесс.Метаданные().Имя].ТабличныеЧасти Цикл
	//		ТекСтруктураРеквизитов.Вставить(ТЧ.Имя, БизнесПроцесс[ТЧ.Имя].Выгрузить());			
	//	КонецЦикла; 
	//КонецЕсли;
	
	
	Возврат  ТекСтруктураРеквизитов;
КонецФункции

#КонецОбласти

#Область РаботаСНовостями

&НаСервереБезКонтекста
Процедура ЗаполнитьНовости(НовостиHTML, НомерСтраницы = 1)
	Документы.Новости.ЗаполнитьНовости(НовостиHTML, НомерСтраницы);
	
	//НовостиHTML = "<HTML><HEAD>
	//|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type><LINK rel=stylesheet type=text/css href=""__STYLE__""><BASE href=""v8config://26d610bd-8712-4000-956d-0edbe58646d8/mdobject/idcf715f2f-493b-44cc-8c21-3424f7d402ea/8eb4fad1-1fa6-403e-970f-2c12dbb43e23"">
	//|<META name=GENERATOR content=""MSHTML 11.00.9600.17041""></HEAD>
	//|<BODY><font face=""Tahoma, Geneva, sans-serif"">";
	//НовостиHTML = НовостиHTML + "<script type=""text/javascript"">function message() {location = ""https://sab2up.ru/%D0%BD%D0%BE%D0%B2%D0%BE%D1%81%D1%82%D0%B8-%D1%84%D0%B8%D1%80%D0%BC%D1%8B/new-year2019/"";}</script>";
	//НовостиHTML = НовостиHTML + "</font></BODY></HTML>";
		
КонецПроцедуры

&НаКлиенте
Процедура НовостиHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	БюджетныйНаКлиенте.ПриНажатииHTML(Элемент, ДанныеСобытия, СтандартнаяОбработка, НовостиHTML);
	Если Лев(ДанныеСобытия.Href, 9) = "v8object:" Тогда
		НомерНовости = Сред(ДанныеСобытия.Href, 10);
		Новость = НайтиНовостьПоКоду(НомерНовости);
		ОткрытьФорму("Документ.Новости.Форма.ФормаКомментариев", Новый Структура("Ключ", Новость));
	ИначеЕсли Лев(ДанныеСобытия.Href, 6) = "v8doc:" Тогда
		//
		
	ИначеЕсли Лев(ДанныеСобытия.Href, 11) = "v8newspage:" Тогда
		БПСервер.ЗаполнитьНовости(НовостиHTML, Число(Сред(ДанныеСобытия.Href, 12)));
	ИначеЕсли Найти(ДанныеСобытия.Href, "e1cib") Или Найти(ДанныеСобытия.Href, "http://") Тогда //остальные клики
		ПерейтиПоНавигационнойСсылке(Прав(ДанныеСобытия.Href, СтрДлина(ДанныеСобытия.Href) - Найти(ДанныеСобытия.Href, "e1cib") + 1));
	КонецЕсли;	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиНовостьПоКоду(НомерНовости)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Новости.Ссылка
	|ИЗ
	|	Документ.Новости КАК Новости
	|ГДЕ
	|	Новости.Номер = &Номер";
	
	Запрос.УстановитьПараметр("Номер", НомерНовости);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Возврат Выборка.Ссылка;	
		
	КонецЦикла;
	
	
	
КонецФункции // ()

&НаСервере
Процедура НеОтображать(НеОтображать)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Новости.НовостьПрочитана
	               |ИЗ
	               |	РегистрСведений.Новости КАК Новости
	               |ГДЕ
	               |	Новости.Пользователь = &Пользователь
	               |	И Новости.НовостьПрочитана = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ЕстьНовыеНовости = Ложь;
	Пока Выборка.Следующий() Цикл
		ЕстьНовыеНовости = Истина;		
	КонецЦикла;
	
	
	Если НеОтображать И ЕстьНовыеНовости Тогда
		НаборЗаписей = РегистрыСведений.Новости.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(ПараметрыСеанса.ТекущийПользователь);
		НаборЗаписей.Прочитать();
		Для Каждого ЗаписьНовостей Из НаборЗаписей Цикл
			Если Не ТипЗнч(ЗаписьНовостей.Новость) = Тип("ДокументСсылка.Новости") Тогда
				Продолжить;
			КонецЕсли;	
			ЗаписьНовостей.НовостьПрочитана = НеОтображать;
		КонецЦикла;
		НаборЗаписей.Записать();		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Открыть2(Команда)
	ТекДанные = Элементы.ТекЗадачи.ТекущиеДанные;
	Если Не ТекДанные = Неопределено Тогда
		//ОткрытьФорму("Справочник.Задача.Форма.ФормаУниверсальнаяНовая", Новый Структура("Ключ", ТекДанные.Ссылка)); 
		ПоказатьЗначение(Неопределено, ТекДанные.Ссылка);	
	КонецЕсли;
КонецПроцедуры
/////////////////////конец работы с HTML новостями/////////////////////
#КонецОбласти 

#Область РаботаСКнопкойСоздать
	
&НаСервере
Процедура ЗаполнитьВидыОпераций(Родитель = Неопределено)
	
	СтруктураДоков = СписокВидовСЗ(Родитель);
	
	//заполняем фильтр
	Для каждого ТекСтрока Из СтруктураДоков Цикл
		СписокТиповДокументов.Добавить(ТекСтрока.Ссылка, ТекСтрока.Наименование);	
	КонецЦикла;//конец заполнения фильтра 
	
	ИндексКоманды = 0;
	Для Каждого ВидОперации Из СтруктураДоков Цикл
		Если ВидОперации.ЭтоРодитель Тогда
			НоваяКнопка = Элементы.Добавить("Команда" + ВидОперации.Код, Тип("ГруппаФормы"), ?(Родитель = Неопределено, Элементы.Создать, Элементы["Команда" + ВидОперации.РодительКод]));
			НоваяКнопка.Заголовок = ВидОперации.Наименование;
			ЗаполнитьВидыОпераций(ВидОперации.Ссылка);
		Иначе
			НоваяКоманда = Команды.Добавить("Команда" + ВидОперации.Код);
			НоваяКоманда.Действие  = "ВыборВидаОперации";
			НоваяКнопка = Элементы.Добавить("Команда" + ВидОперации.Код, Тип("КнопкаФормы"),?(Родитель = Неопределено, Элементы.Создать, Элементы["Команда" + ВидОперации.РодительКод]));
			НоваяКнопка.Заголовок = ВидОперации.Наименование;
			НоваяКнопка.ИмяКоманды = "Команда" + ВидОперации.Код;
		КонецЕсли;
    КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыборВидаОперации(Команда)
	
	СтруктураТиповДокументов = ПодобратьТипДокумента(Прав(Команда.Имя, СтрДлина(Команда.Имя) - 7));
	Если СтруктураТиповДокументов.Количество() Тогда
		Если ЗначениеЗаполнено(СтруктураТиповДокументов[0].РодительИмяДокумента) Тогда
			ТекФорма = ПолучитьФорму("Документ." + СтруктураТиповДокументов[0].РодительИмяДокумента + ".ФормаОбъекта");
		    ТекФорма.Объект.ВидСЗ = СтруктураТиповДокументов[0].Ссылка;
			ТекФорма.Открыть();
		Иначе
			ТекФорма = ПолучитьФорму("Документ." + СтруктураТиповДокументов[0].ИмяДокумента + ".ФормаОбъекта");
			ТекФорма.Открыть();
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(Неопределено, "Документ не найден!");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодобратьТипДокумента(КодЭлемента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Д_ВидыВнутреннихДокументов.Ссылка,
	|	Д_ВидыВнутреннихДокументов.ИмяДокумента,
	|	Д_ВидыВнутреннихДокументов.Родитель.ИмяДокумента
	|ИЗ
	|	Справочник.Д_ВидыВнутреннихДокументов КАК Д_ВидыВнутреннихДокументов
	|ГДЕ
	|	Д_ВидыВнутреннихДокументов.Код = &Код";
	
	Запрос.УстановитьПараметр("Код", КодЭлемента);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	МассивДанных = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		Стр = Новый Структура;
		Стр.Вставить("Ссылка", Выборка.Ссылка);
		Стр.Вставить("ИмяДокумента", Выборка.ИмяДокумента);
		Стр.Вставить("РодительИмяДокумента", Выборка.РодительИмяДокумента);
		МассивДанных.Добавить(Стр);
		
	КонецЦикла;
	Возврат МассивДанных;
	
КонецФункции

&НаСервереБезКонтекста
Функция СписокВидовСЗ(Родитель)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Д_ВидыВнутреннихДокументов.Ссылка КАК Ссылка,
	               |	Д_ВидыВнутреннихДокументов.Наименование,
	               |	Д_ВидыВнутреннихДокументов.Код,
	               |	ВЫБОР
	               |		КОГДА Д_ВидыВнутреннихДокументов.Ссылка В
	               |				(ВЫБРАТЬ
	               |					Д_ВидыВнутреннихДокументов.Родитель
	               |				ИЗ
	               |					Справочник.Д_ВидыВнутреннихДокументов КАК Д_ВидыВнутреннихДокументов)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ЭтоРодитель,
	               |	Д_ВидыВнутреннихДокументов.Родитель.Код,
	               |	Д_ВидыВнутреннихДокументов.ИмяДокумента
	               |ИЗ
	               |	Справочник.Д_ВидыВнутреннихДокументов КАК Д_ВидыВнутреннихДокументов
	               |ГДЕ
	               |	Д_ВидыВнутреннихДокументов.Родитель = &Родитель
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Родитель", ?(Родитель = Неопределено, Справочники.Д_ВидыВнутреннихДокументов.ПустаяСсылка(), Родитель));
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	МассивСтруктуры = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Попытка
			Если НЕ ПравоДоступа("Добавление", Метаданные.Документы[Выборка.ИмяДокумента]) Тогда
				Продолжить;	
			КонецЕсли;
		Исключение
			Продолжить;
		КонецПопытки;
		СтруктураДоков = Новый Структура;
		СтруктураДоков.Вставить("Ссылка", Выборка.Ссылка);
		СтруктураДоков.Вставить("Наименование", Выборка.Наименование);
		СтруктураДоков.Вставить("Код", Выборка.Код);
		СтруктураДоков.Вставить("ЭтоРодитель", Выборка.ЭтоРодитель);
		СтруктураДоков.Вставить("РодительКод", Выборка.РодительКод);
		МассивСтруктуры.Добавить(СтруктураДоков);
	КонецЦикла;
	Возврат МассивСтруктуры;
	
КонецФункции // ()

#КонецОбласти 

#Область РаботаСУниверсальнойФормойЗадачи

&НаСервереБезКонтекста
Процедура ПоказатьВопросыПоОбъекту(Задача, ТекЗаголовокВопросов)
	ТекЗаголовокВопросов = "";
	КоличВопросов = 0;
	Если НЕ ЗначениеЗаполнено(Задача.Заявка) Тогда
		Возврат;	
	КонецЕсли;
	БПСервер.ВывестиВопросыПоДокументу(Неопределено, Задача.Заявка, Истина, КоличВопросов);
	Если КоличВопросов Тогда
		ТекЗаголовокВопросов = Строка(КоличВопросов);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПоказатьЗаметкиПоОбъекту(Задача, ТекЗаголовокВопросов)
	ТекЗаголовокВопросов = "";
	КоличВопросов = 0;
	БПСервер.ВывестиЗаметкиПоДокументу(Неопределено, ?(ЗначениеЗаполнено(Задача.Заявка), Задача.Заявка, Задача), Истина, КоличВопросов);
	Если КоличВопросов Тогда
		ТекЗаголовокВопросов = Строка(КоличВопросов);
	КонецЕсли;
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ПоказатьОбсуждениеОбъекта(Задача, ТекЗаголовокОбсуждений)
	ТекЗаголовокОбсуждений = "";
	КоличОбсуждений = 0;
	
	Если НЕ ЗначениеЗаполнено(Задача.Заявка) Тогда
		Возврат;	
	КонецЕсли;
	
	БПСервер.ВывестиОбсужденияПоДокументу(Неопределено, Задача.Заявка, Истина, КоличОбсуждений);
	Если КоличОбсуждений Тогда
		ТекЗаголовокОбсуждений = Строка(КоличОбсуждений);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПоказатьРанееПройденныеПользователем(Задача, РанееВыполненныеЗадачи, ТекПользователь = Неопределено)
	Если ТекПользователь = Неопределено Тогда
		ТекПользователь = ПараметрыСеанса.ТекущийПользователь;	
	КонецЕсли;
	РанееВыполненныеЗадачи = "";
	КоличРанееВыполненных = 0;
	
	Если НЕ ЗначениеЗаполнено(Задача.Заявка) Тогда
		Возврат;	
	КонецЕсли;
	
	БПСервер.ВывестиРанееВыполненныеВамиЗадачиПоДокументу(Неопределено, Задача.Заявка, Истина, КоличРанееВыполненных, РанееВыполненныеЗадачи, ТекПользователь);
	Если ЗначениеЗаполнено(РанееВыполненныеЗадачи) Тогда
		РанееВыполненныеЗадачи = "Вы уже согласовывали этот документ";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаВопросыПоДокументуНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	БюджетныйНаКлиенте.УниверсальноеВыполнениеКоманды(БюджетныйНаСервере.ВернутьРеквизиты(Задача, "Заявка").Заявка, "ОбщаяПечатьВопросовПоДокументу");
КонецПроцедуры

&НаКлиенте
Процедура ОбсуждениеДокументаНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	БюджетныйНаКлиенте.УниверсальноеВыполнениеКоманды(БюджетныйНаСервере.ВернутьРеквизиты(Задача, "Заявка").Заявка, "ОбщаяПечатьОбсужденийПоДокументу");
КонецПроцедуры

&НаКлиенте
Процедура РанееВыполненныеЗадачиНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	БюджетныйНаКлиенте.УниверсальноеВыполнениеКоманды(БюджетныйНаСервере.ВернутьРеквизиты(Задача, "Заявка").Заявка, "Справочник.СогласованиеОбщее.Команда.ОтчетПоВыполнению");
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепленныеФайлыНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Владелец", БюджетныйНаСервере.ВернутьРеквизиты(Задача, "Заявка").Заявка);
	ТекФорма = ПолучитьФорму("РегистрСведений.ПрикрепленныеОбъекты.ФормаСписка", ПараметрыФормы, , Истина);
	ТекФорма.Открыть();
КонецПроцедуры


&НаКлиенте
Процедура ТекКоманда1Нажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.ТекЗадачи.ВыделенныеСтроки.Количество() > 1 Тогда
		
		НужныПодтвержденияКнопок = БюджетныйНаСервере.ВернутьРеквизит(БюджетныйНаСервере.ПолучитьПользователя(), "ДопПодтверждениеНажатияКнопок");
		Если НужныПодтвержденияКнопок Тогда
			СтруктураВопростов = БПСервер.ПолучитьТекстыВопросов(Задача, 1);
			ПоказатьВопрос(Новый ОписаниеОповещения("СогласоватьБизнесПроцессЗавершениеБезВопросов", ЭтотОбъект, Новый Структура("ВыделенныеСтроки", Элементы.ТекЗадачи.ВыделенныеСтроки)), СтруктураВопростов.Вопрос, РежимДиалогаВопрос.ДаНет);
		Иначе
			СогласоватьБизнесПроцессЗавершениеБезВопросов(КодВозвратаДиалога.Да, Новый Структура("ВыделенныеСтроки", Элементы.ТекЗадачи.ВыделенныеСтроки)); 	
		КонецЕсли;
		
	Иначе
		НужныПодтвержденияКнопок = БюджетныйНаСервере.ВернутьРеквизит(БюджетныйНаСервере.ПолучитьПользователя(), "ДопПодтверждениеНажатияКнопок");
		Если НужныПодтвержденияКнопок Тогда
			СтруктураВопростов = БПСервер.ПолучитьТекстыВопросов(Задача, 1);
			ПоказатьВопрос(Новый ОписаниеОповещения("СогласоватьБизнесПроцессЗавершение", ЭтотОбъект, Новый Структура("НужныПодтвержденияКнопок, СтруктураВопростов", НужныПодтвержденияКнопок, СтруктураВопростов)), СтруктураВопростов.Вопрос, РежимДиалогаВопрос.ДаНет);
		Иначе
			СогласоватьБизнесПроцессЗавершение(КодВозвратаДиалога.Да, Новый Структура("НужныПодтвержденияКнопок, СтруктураВопростов", НужныПодтвержденияКнопок, СтруктураВопростов)); 	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьБизнесПроцессЗавершениеБезВопросов(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВсегоЗадач = ДополнительныеПараметры.ВыделенныеСтроки.Количество();
	НомерЗадачи = 1;
	Для каждого ТекВыдСтрока Из ДополнительныеПараметры.ВыделенныеСтроки Цикл
		ТекСтрока = Элементы.ТекЗадачи.ДанныеСтроки(ТекВыдСтрока);
		БПСервер.ВыполнитьКомандуЗадачиБП(ТекСтрока.Ссылка, ЗадачаТекИмяКоманды1, ПолучитьСтруктуруРеквизитовФормы(), Ложь, "ФормаУниверсальная");
		Состояние("Выполняется " + Строка(НомерЗадачи) + "/" + Строка(ВсегоЗадач), НомерЗадачи / ВсегоЗадач * 100, ТекСтрока.Ссылка);
		НомерЗадачи = НомерЗадачи + 1;
	КонецЦикла;
	
	ОповеститьОбИзменении(Задача);
	Оповестить("ОбновитьСписокЗадач");
	
КонецПроцедуры


&НаКлиенте
Процедура СогласоватьБизнесПроцессЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	ТекДанные = Элементы.ТекЗадачи.ТекущиеДанные;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да ИЛИ НЕ ДополнительныеПараметры.НужныПодтвержденияКнопок Тогда
		Если ЗадачаТекИмяКоманды1 = "ПринятьОбращение" Тогда
			Если Не ЗначениеЗаполнено(ТекДанные.СрокОкончания) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Введите примерный срок окончания работ";
				Сообщение.Поле = "СрокОкончания";
				//Сообщение.УстановитьДанные();
				Сообщение.Сообщить(); 
				Возврат;
			ИначеЕсли ТекДанные.СрокОкончания < ТекущаяДата() Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Срок окончания работ не может быть мешьше текущей даты";
				Сообщение.Поле = "СрокОкончания";
				//Сообщение.УстановитьДанные();
				Сообщение.Сообщить();
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		//проверка в случае точки исполнения
		НуженВозврат = Ложь;
		ТекстПредупреждения = "";
		БюджетныйНаКлиенте.ПроверкаИсполнения(Задача, ПодчиненныеДокументы, НуженВозврат, ТекстПредупреждения);
		Если НуженВозврат = Неопределено Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ПроверкаИсполненияЗавершение", ЭтотОбъект, ), ТекстПредупреждения + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
		ИначеЕсли НуженВозврат = Истина Тогда	
			Возврат;		
		КонецЕсли;
		
		//проверка на исполнителя маршрута
		БПСервер.ПроверитьИсполнителейЗаявки(Задача, ТекстПредупреждения, НуженВозврат);
		Если НуженВозврат = Истина Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("СогласоватьБизнесПроцессЗавершениеЗавершение", ЭтотОбъект), ТекстПредупреждения, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		
		Если Не БПСервер.ПроверкаЗадачи(Задача) И НуженВозврат = Ложь Тогда
			БПСервер.ВыполнитьКомандуЗадачиБП(Задача, ЗадачаТекИмяКоманды1, ПолучитьСтруктуруРеквизитовФормы(), Ложь, "ФормаУниверсальная");
			ОповеститьОбИзменении(Задача);
			Оповестить("ОбновитьСписокЗадач");
			//Закрыть();
		КонецЕсли;
		
	Иначе
		Возврат;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьБизнесПроцессЗавершениеЗавершение(РезультатВопроса1, ДополнительныеПараметры1) Экспорт
	
	Если РезультатВопроса1 = КодВозвратаДиалога.Да  Тогда
		ПересчитатьМаршрутНаСервере(Задача);
		Если Не БПСервер.ПроверкаЗадачи(Задача) Тогда
			БПСервер.ВыполнитьКомандуЗадачиБП(Задача, ЗадачаТекИмяКоманды1, ПолучитьСтруктуруРеквизитовФормы(), Ложь, "ФормаУниверсальная");
			ОповеститьОбИзменении(Задача);
			Оповестить("ОбновитьСписокЗадач");
			//Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьМаршрутНаСервере(Задача)
	Если ТипЗнч(Задача.Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") Тогда
		ТекБПОб = Задача.БизнесПроцесс.ПолучитьОбъект();
		ТекБПОб.ДопИсполнение.Очистить();
		БизнесПроцессы.Согласование1.ДобавитьСтрокуДопИсполнение(ТекБПОб, Задача.Заявка);
		БПСервер.ДобавитьРецензентовВМаршрут(ТекБПОб, "ДопИсполнение", Задача.Заявка);	
		ТекБПОб.Записать();
	ИначеЕсли ТипЗнч(Задача.Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаАвансовыйОтчет") Тогда
		ТекБПОб = Задача.БизнесПроцесс.ПолучитьОбъект();
		ТекБПОб.ДопИсполнение.Очистить();
		ТекБПОб.ЗаполнитьНаСервереАвансовыйОтчет(ТекБПОб, Задача.Заявка, Истина);	
		ТекБПОб.Записать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаИсполненияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		БПСервер.ВыполнитьКомандуЗадачиБП(Задача, ЗадачаТекИмяКоманды1, ПолучитьСтруктуруРеквизитовФормы(), Ложь, "ФормаУниверсальная");
		ОповеститьОбИзменении(Задача);
		Оповестить("ОбновитьСписокЗадач");
		//Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверкаИсполненияДоработкаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		БПСервер.УдалитьПППоЗаявке(Задача);
		
		БПСервер.ВыполнитьКомандуЗадачиБП(Задача, ЗадачаТекИмяКоманды2, ПолучитьСтруктуруРеквизитовФормы(), Ложь,"ФормаУниверсальная");
		ОповеститьОбИзменении(Задача);
		Оповестить("ОбновитьСписокЗадач");
		//Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТекКоманда2Нажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	НужныПодтвержденияКнопок = БюджетныйНаСервере.ВернутьРеквизит(БюджетныйНаСервере.ПолучитьПользователя(), "ДопПодтверждениеНажатияКнопок");
	СтруктураВопростов = БПСервер.ПолучитьТекстыВопросов(Задача, 2);
	Если НужныПодтвержденияКнопок Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("СогласоватьБизнесПроцессЗавершение2", ЭтотОбъект, Новый Структура("НужныПодтвержденияКнопок, СтруктураВопростов", НужныПодтвержденияКнопок, СтруктураВопростов)), СтруктураВопростов.Вопрос, РежимДиалогаВопрос.ДаНет);
	Иначе
		СогласоватьБизнесПроцессЗавершение2(КодВозвратаДиалога.Да, Новый Структура("НужныПодтвержденияКнопок, СтруктураВопростов", НужныПодтвержденияКнопок, СтруктураВопростов)); 	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьБизнесПроцессЗавершение2(РезультатВопроса, ДополнительныеПараметры) Экспорт
	ТекДанные = Элементы.ТекЗадачи.ТекущиеДанные;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да ИЛИ НЕ ДополнительныеПараметры.НужныПодтвержденияКнопок Тогда
		ТекДанные = Элементы.ТекЗадачи.ТекущиеДанные;
		Если ПустаяСтрока(ЗадачаКомментарий) И НЕ ДополнительныеПараметры.СтруктураВопростов.СообщениеОбОшибке = "" Тогда
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана причина возврата на доработку", ,"Комментарий", ,Истина);
			сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(
			ЭтаФорма,
			ДополнительныеПараметры.СтруктураВопростов.СообщениеОбОшибке,
			,
			,
			"ЗадачаКомментарий",
			);
			Возврат;
		КонецЕсли;
		
		//проверка в случае точки исполнения
		НуженВозврат = Ложь;
		ТекстПредупреждения = "";
		БюджетныйНаКлиенте.ПроверкаИсполненияДоработка(Задача, ПодчиненныеДокументы, НуженВозврат, ТекстПредупреждения);
		Если НуженВозврат = Неопределено Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ПроверкаИсполненияДоработкаЗавершение", ЭтотОбъект, ), ТекстПредупреждения + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
		ИначеЕсли НуженВозврат = Истина Тогда	
			Возврат;		
		КонецЕсли;
		
		Если Не БПСервер.ПроверкаЗадачи(Задача) И НуженВозврат = Ложь Тогда
			БПСервер.ВыполнитьКомандуЗадачиБП(Задача, ЗадачаТекИмяКоманды2, ПолучитьСтруктуруРеквизитовФормы(), Ложь,"ФормаУниверсальная");
			ОповеститьОбИзменении(Задача);
			Оповестить("ОбновитьСписокЗадач");
			//Закрыть();
		КонецЕсли;
		
		
	Иначе
		Возврат;		
	КонецЕсли;
	
	
	
КонецПроцедуры


#КонецОбласти 

&НаКлиенте
Процедура СообщениеПриИзменении(Элемент)   
	
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаметку(Команда)
	Если НЕ Элементы.ТекЗадачи.ТекущиеДанные = Неопределено Тогда
		ПараметрыФормы = Новый Структура("Предмет", Элементы.ТекЗадачи.ТекущиеДанные.Документ);
		ОткрытьФорму("Справочник.Заметки.Форма.ЗаметкиПоПредмету", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ТекЗадачиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекДанные = Элементы.ТекЗадачи.ДанныеСтроки(Элементы.ТекЗадачи.ТекущаяСтрока);
	СтруктураДанныхКЗамене = Новый Структура;
	СтруктураДанныхКЗамене.Вставить("ДатаНачалаРабот", ТекДанные.ДатаНачалаРабот); 
	СтруктураДанныхКЗамене.Вставить("ДатаОкончанияРабот", ТекДанные.ДатаОкончанияРабот);
	БПСервер.ОбновитьТекущуюЗаписьХронометража(ТекДанные.Период, ?(ЗначениеЗаполнено(ТекДанные.Документ), ТекДанные.Документ, ТекДанные.Ссылка), СтруктураДанныхКЗамене);
КонецПроцедуры


&НаКлиенте
Процедура ЗаметкиПоДокументуНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекЗ = БюджетныйНаСервере.ВернутьРеквизиты(Задача, "Заявка").Заявка;
	БюджетныйНаКлиенте.УниверсальноеВыполнениеКоманды(?(ЗначениеЗаполнено(ТекЗ), ТекЗ, Задача), "ОбщаяПечатьЗаметокПоДокументу");
КонецПроцедуры


&НаКлиенте
Процедура СортировкаПоСроку(Команда)
	ТекЗадачи.Сортировать("СрокВыполнения");
КонецПроцедуры


&НаКлиенте
Процедура TeamViewer(Команда)
	КаталогВременныхФайлов = КаталогВременныхФайлов();
	
	ИмяФайла = КаталогВременныхФайлов + "TeamViewerQS.exe";
	
	ВыбФайл = Новый Файл(ИмяФайла);
	Если ВыбФайл.Существует() Тогда
		ЗапуститьПриложение(ИмяФайла);
	Иначе
		АдресХранилища = ПоместитьВХранилищеТ();
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресХранилища);
		ДвоичныеДанные.Записать(ИмяФайла);
		Пока Не ВыбФайл.Существует() Цикл
			ОбработкаПрерыванияПользователя();
		КонецЦикла;
		
		Если ВыбФайл.Существует() Тогда
			ЗапуститьПриложение(ИмяФайла);
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не удалось запустить TeamViewerQS";
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	

КонецПроцедуры	
&НаСервере
Функция ПоместитьВХранилищеТ()
	//Сож сделать запрос чтоб найти нужный файл
	  	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Файлы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.Наименование ПОДОБНО ""TeamViewerQS""";
	
	//Запрос.УстановитьПараметр("AA_v3", AA_v3);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		файл = ВыборкаДетальныеЗаписи.Ссылка; 
	КонецЦикла;
	
	 Данные = сабОбщегоНазначения.ДанныеФайлаДляОткрытия(файл,);
	Возврат ПоместитьВоВременноеХранилище(Данные);
	
КонецФункции

&НаКлиенте
Процедура НовостиHTMLДокументСформирован(Элемент)
	Попытка
		
		Элементы.НовостиHTML.Документ.parentWindow.message("");	
		
	Исключение
		
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНавигацию(Команда)
	Элементы.Группа1.Видимость = НЕ Элементы.Группа1.Видимость;
	Если НЕ Элементы.Группа1.Видимость Тогда	
		Элементы.ПоказатьНавигацию.Картинка = БиблиотекаКартинок.ПерейтиВперед;		
	Иначе
		Элементы.ПоказатьНавигацию.Картинка = БиблиотекаКартинок.ПерейтиНазад;	
	КонецЕсли;
КонецПроцедуры



