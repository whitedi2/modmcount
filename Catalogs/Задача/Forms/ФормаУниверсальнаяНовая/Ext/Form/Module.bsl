&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Сообщить(Элементы.ТекСправочники.ТекущаяСтрока);
	//Сообщить(ТекСтрока);
	
	//заполняем дополнительную информацию и команды
	ВидимостьРазрешенияРедактирования = Ложь;
	//ЗоголовокЗаявкаСогласована = "";
	Элементы.СоздатьДвиженияДС.Видимость = Ложь;
	Элементы.ОткрытьПлатежныйКалендарь.Видимость = Ложь;
	БПСервер.НастроитьДоступностьКнопок(Объект.Ссылка, Элементы.ЗаявкаСогласована.Заголовок, Элементы.ОтправитьДалее.Заголовок, Элементы.НаДоработку.Заголовок, ЗадачаТекИмяКоманды1, ЗадачаТекИмяКоманды2, ЗадачаТекИмяКоманды3, ВидимостьРазрешенияРедактирования);
	Если Элементы.ЗаявкаСогласована.Заголовок = "Принять в реестр" Тогда
		Элементы.ОткрытьПлатежныйКалендарь.Видимость = Истина;
	ИначеЕсли Элементы.ЗаявкаСогласована.Заголовок = "Принять к оплате" Тогда
		Элементы.СоздатьДвиженияДС.Видимость = Истина;
	КонецЕсли;
	Элементы.РазрещитьРедактировать.Видимость = ВидимостьРазрешенияРедактирования И Объект.БизнесПроцесс.ОснованиеЗаблокирован;
	
	Если НЕ ЗначениеЗаполнено(Элементы.ЗаявкаСогласована.Заголовок) Тогда
		Элементы.ЗаявкаСогласована.Заголовок = "Согласовано"; 
	КонецЕсли; 
	
	//Если Не Объект.ТочкаМаршрута = Перечисления.Согласование1ТочкиМаршрута.Действие6 Тогда
				
		//Если НЕ ЗначениеЗаполнено(Элементы.ОтправитьДалее.Заголовок) Тогда
		//	Элементы.ОтправитьДалее.Заголовок = "Согласовано с замечаниями"; 
		//КонецЕсли; 
		
		//Если НЕ ЗначениеЗаполнено(Элементы.НаДоработку.Заголовок) Тогда
		//	Элементы.НаДоработку.Заголовок = "Не согласовано"; 
		//КонецЕсли; 
		
	//КонецЕсли;

	Элементы.ЗаявкаСогласована.Видимость = ЗначениеЗаполнено(Элементы.ЗаявкаСогласована.Заголовок);
	Элементы.ОтправитьДалее.Видимость = ЗначениеЗаполнено(Элементы.ОтправитьДалее.Заголовок);
	Элементы.НаДоработку.Видимость = ЗначениеЗаполнено(Элементы.НаДоработку.Заголовок);
	
	//заполняем группу команд Печать
	ОбновитьКомандуПечатьСервер();
	
	//заполняем вопросы по документу
	ПоказатьВопросыПоОбъекту(Объект.Ссылка, ЗадачаВопросыПоДокументу);
	Элементы.ЗадачаВопросыПоДокументу.Видимость = ЗначениеЗаполнено(ЗадачаВопросыПоДокументу);
	
	//заполняем обсуждение документа
	ПоказатьОбсуждениеОбъекта(Объект.Ссылка, ЗадачаОбсуждениеДокумента);
	Элементы.ОбсуждениеДокумента.Видимость = ЗначениеЗаполнено(ЗадачаОбсуждениеДокумента);
	
	//заполняем цикл обхода
	ПоказатьРанееПройденныеПользователем(Объект.Ссылка, РанееВыполненныеЗадачи);
	Элементы.РанееВыполненныеЗадачи.Видимость = ЗначениеЗаполнено(РанееВыполненныеЗадачи);
	
	//заполняем заметки по документу
	ПоказатьЗаметкиПоОбъекту(Объект.Ссылка, ЗаметкиПоДокументу);
	Элементы.ЗаметкиПоДокументу.Видимость = ЗначениеЗаполнено(ЗаметкиПоДокументу);
	
	
	//берем имяКоманд из роли исполнителя. д1 14.11.17
	Если ЗначениеЗаполнено(Объект.РольИсполнителя) И ТипЗнч(Объект.РольИсполнителя) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		ИмяКомандыУтвердительно = Объект.РольИсполнителя.ИмяКомандыУтвердительно;
		ЦветКомандыУтвердительно = Объект.РольИсполнителя.ЦветКомандыУтвердительно.Получить();
		Если ЗначениеЗаполнено(ИмяКомандыУтвердительно) Тогда
			Элементы.ЗаявкаСогласована.Заголовок = ИмяКомандыУтвердительно;
		КонецЕсли;
		Если НЕ ЦветКомандыУтвердительно = Неопределено Тогда
			Элементы.ЗаявкаСогласована.ЦветТекста = ЦветКомандыУтвердительно;
		КонецЕсли;
		ИмяКомандыОтрицательно = Объект.РольИсполнителя.ИмяКомандыОтрицательно;
		ЦветКомандыОтрицательно = Объект.РольИсполнителя.ЦветКомандыОтрицательно.Получить();
		Если ЗначениеЗаполнено(ИмяКомандыОтрицательно) Тогда
			Элементы.НаДоработку.Заголовок = ИмяКомандыОтрицательно;
		КонецЕсли;
		Если НЕ ЦветКомандыОтрицательно = Неопределено Тогда
			Элементы.НаДоработку.ЦветТекста = ЦветКомандыОтрицательно;
		КонецЕсли;
		ИмяКомандыСЗамечаниями = Объект.РольИсполнителя.ИмяКомандыСЗамечаниями;
		ЦветКомандыСЗамечаниями = Объект.РольИсполнителя.ЦветКомандыСЗамечаниями.Получить();
		Если ЗначениеЗаполнено(ИмяКомандыСЗамечаниями) Тогда
			Элементы.ОтправитьДалее.Заголовок = ИмяКомандыСЗамечаниями;
		Иначе
			Элементы.ОтправитьДалее.Видимость = Ложь; // для пустого реквизита прячем команду	
		КонецЕсли;
		Если НЕ ЦветКомандыСЗамечаниями = Неопределено Тогда
			Элементы.ОтправитьДалее.ЦветТекста = ЦветКомандыСЗамечаниями;
		КонецЕсли;
		
		
	КонецЕсли;
	//конец имяКоманд
	
	//меняем заголовок Справочники. д1 18.11.17
	БПСервер.ЗаголовокЗадачиИзЗаявки(Объект, ЭтаФорма);
	
	ПроверкаВозможностиРедактированияДокумента();
	
	Если ТипЗнч(Объект.БизнесПроцесс) = Тип("СправочникСсылка.СогласованиеОбщее") Тогда
		Объект.Комментарии = Объект.БизнесПроцесс.ИсторияСогласования;
	ИначеЕсли ЗначениеЗаполнено(Объект.БизнесПроцесс) Тогда	
		Объект.Комментарии = Объект.БизнесПроцесс.Комментарии;
	КонецЕсли;
	
	//подчиненные
	ЗаполнитьПодчиненнымиОбщая();
	
	//html
	//СформироватьHTML(Объект.Заявка, ТекстПредварительныйПросмотр);
	Если Не Элементы.Найти("ТекСправочникиКонтекстноеМенюЗадачаЗадачаВзятьЗадачуВРаботу1") = Неопределено Тогда
		Элементы.ТекСправочникиКонтекстноеМенюЗадачаЗадачаВзятьЗадачуВРаботу1.Видимость = Не Объект.ВРаботе;	
	КонецЕсли;
	Если Не Элементы.Найти("ЗадачаЗадачаОтложитьВыполнение") = Неопределено Тогда
		Элементы.ЗадачаЗадачаОтложитьВыполнение.Видимость = Объект.ВРаботе;	
	КонецЕсли;
	
	//установить видимость элементов по типам документов
	УстановитьВидимостьПоТипамДокументов();
	
	//Конвертирование в pdf +++  
	
	
	Если ЗначениеЗаполнено(Объект.РольИсполнителя) И ТипЗнч(Объект.РольИсполнителя) = Тип("СправочникСсылка.РолиИсполнителей") И
		ЗначениеЗаполнено(Объект.Заявка) Тогда
		Если Объект.РольИсполнителя.Вид = "Конвертирование" Тогда 
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ(ПрикрепленныеОбъекты.Объект КАК Справочник.Файлы).Ссылка КАК СсылкаТекстовыйФайл,
			|	ВЫРАЗИТЬ(ПрикрепленныеОбъекты.Объект КАК Справочник.Файлы).Наименование КАК Наименование,
			|	ПрикрепленныеОбъекты1.Объект КАК СсылкаPDF
			|ИЗ
			|	РегистрСведений.ПрикрепленныеОбъекты КАК ПрикрепленныеОбъекты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрикрепленныеОбъекты КАК ПрикрепленныеОбъекты1
			|		ПО (ВЫРАЗИТЬ(ПрикрепленныеОбъекты.Объект КАК Справочник.Файлы).Наименование = ВЫРАЗИТЬ(ПрикрепленныеОбъекты1.Объект КАК Справочник.Файлы).Наименование)
			|			И (ВЫРАЗИТЬ(ПрикрепленныеОбъекты.Объект КАК Справочник.Файлы).Служебный)
			|			И (ВЫРАЗИТЬ(ПрикрепленныеОбъекты1.Объект КАК Справочник.Файлы).Расширение = ""pdf"")
			|			И (ВЫРАЗИТЬ(ПрикрепленныеОбъекты.Объект КАК Справочник.Файлы).Расширение = ""docx""
			|				ИЛИ ВЫРАЗИТЬ(ПрикрепленныеОбъекты.Объект КАК Справочник.Файлы).Расширение = ""doc""
			|				ИЛИ ВЫРАЗИТЬ(ПрикрепленныеОбъекты.Объект КАК Справочник.Файлы).Расширение = ""rtf"")
			|ГДЕ
			|	ПрикрепленныеОбъекты.Владелец = &Владелец
			|	И ПрикрепленныеОбъекты1.Владелец = &Владелец";
			Запрос.УстановитьПараметр("Владелец",Объект.Заявка);
			РезультатЗапроса = Запрос.Выполнить();
			Если (НЕ РезультатЗапроса.Пустой() И Элементы.ЗаявкаСогласована.Видимость) ИЛИ (НЕ РезультатЗапроса.Пустой() И Элементы.НаДоработку.Видимость) Тогда
				Элементы.КонвертироватьВПДФ.Видимость = Истина;
				Элементы.КонвертироватьВПДФ.Доступность = Истина; 
				Элементы.КонвертироватьВПДФ.Заголовок = "Конвертировать в текстовый формат";
			Иначе
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ВЫРАЗИТЬ(ПрикрепленныеОбъекты.Объект КАК Справочник.Файлы).Ссылка КАК Ссылка,
				|	ВЫРАЗИТЬ(ПрикрепленныеОбъекты.Объект КАК Справочник.Файлы).Наименование КАК Наименование
				|ИЗ
				|	РегистрСведений.ПрикрепленныеОбъекты КАК ПрикрепленныеОбъекты
				|ГДЕ
				|	(ВЫРАЗИТЬ(ПрикрепленныеОбъекты.Объект КАК Справочник.Файлы).Расширение = ""doc""
				|			ИЛИ ВЫРАЗИТЬ(ПрикрепленныеОбъекты.Объект КАК Справочник.Файлы).Расширение = ""docx""
				|			ИЛИ ВЫРАЗИТЬ(ПрикрепленныеОбъекты.Объект КАК Справочник.Файлы).Расширение = ""rtf"")
				|	И НЕ ВЫРАЗИТЬ(ПрикрепленныеОбъекты.Объект КАК Справочник.Файлы).Служебный
				|	И ПрикрепленныеОбъекты.Владелец = &Владелец";
				Запрос.УстановитьПараметр("Владелец",Объект.Заявка);
				РезультатЗапроса = Запрос.Выполнить();
				Если (НЕ РезультатЗапроса.Пустой() И Элементы.ЗаявкаСогласована.Видимость) ИЛИ (НЕ РезультатЗапроса.Пустой() И Элементы.НаДоработку.Видимость) Тогда
					Элементы.КонвертироватьВПДФ.Видимость = Истина;
					Элементы.КонвертироватьВПДФ.Доступность = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	//Конвертирование в pdf ---
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СформироватьHTML(Заявка, ТекстПредварительныйПросмотр)
	
	Если Не ЗначениеЗаполнено(Заявка) Или Заявка.ПолучитьОбъект() = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	МассивЗаявок = Новый Массив;
	МассивЗаявок.Добавить(Заявка);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	БюджетныйНаСервере.УниверсальнаяПечатьСервер(ТабличныйДокумент, МассивЗаявок);
	
	ВременныйФайл = Новый Файл(КаталогВременныхФайлов()+ "task_prinf.html");
	
	ТабличныйДокумент.Записать(ВременныйФайл.ПолноеИмя, ТипФайлаТабличногоДокумента.HTML);
	
	ФайлВХранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ВременныйФайл.ПолноеИмя), Новый СжатиеДанных(9));
	
	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.ОткрытьФайл(ВременныйФайл.ПолноеИмя,"UTF-8");
	ПостроительDOM = Новый ПостроительDOM;
	ДокументHTML = ПостроительDOM.Прочитать(ЧтениеHTML);
	
	//Теперь собственно вывод на форму
	
	ЗаписьDOM = Новый ЗаписьDOM;    
	ЗаписьHTML = Новый ЗаписьHTML;
	ЗаписьHTML.УстановитьСтроку();
	ЗаписьDOM.Записать(ДокументHTML,ЗаписьHTML);
	ТекстПредварительныйПросмотр = СокрЛП(ЗаписьHTML.Закрыть());
	
	//НовостиHTML = "<HTML><HEAD>
	//|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type><LINK rel=stylesheet type=text/css href=""__STYLE__""><BASE href=""v8config://26d610bd-8712-4000-956d-0edbe58646d8/mdobject/idcf715f2f-493b-44cc-8c21-3424f7d402ea/8eb4fad1-1fa6-403e-970f-2c12dbb43e23"">
	//|<META name=GENERATOR content=""MSHTML 11.00.9600.17041""></HEAD>
	//|<BODY><font face=""Times New Roman, Tahoma, Geneva, sans-serif""><style>p {text-indent: 20px;}</style>";
	//
	//
	//НовостиHTML = НовостиHTML + "<script type=""text/javascript"">function message() {window.scroll(0,100000);}</script>";
	//НовостиHTML = НовостиHTML +  "
	//|<table style=""width: 18cm; font-size: 10pt""><tbody>";
	//
	//НовостиHTML = НовостиHTML + "<tr>
	//|<th style=""width: 50%""></th>
	//|<th style=""width: 50%""></th>
	//|</tr>";
	//
	//НовостиHTML = НовостиHTML  + "<tr><td   colspan=""2"" style=""width: 100%;text-align: center; margin-bottom: 1em ""><b>ДОГОВОР ИНФОРМАЦИОННОГО СОПРОВОЖДЕНИЯ №" + РеквизитыШапки.Код + "</b></td></tr>";
	//
	//НовостиHTML = НовостиHTML  + "<tr><td style=""width: 50%;text-align: left; "">#ГородДоговора#</td>";
	//НовостиHTML = НовостиHTML  + "<td style=""width: 50%;text-align: right; "">" + Формат(РеквизитыШапки.ДатаДоговора, "ДФ='дд ММММ гггг'") + "</td></tr>";
	//
	//НовостиHTML = НовостиHTML + "</tbody></table>";
	//НовостиHTML = НовостиHTML + "<a name = ""forScroll""></a>";
	//НовостиHTML = НовостиHTML + "</font></BODY></HTML>";
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//заполняем прикрепленные файлы
	сабОбщегоНазначенияКлиент.ОбновитьКоличествоПрикрепленныхФайлов(Объект.Ссылка, ПрикрепленныеФайлы);
	Элементы.ПрикрепленныеФайлы.Видимость = ЗначениеЗаполнено(ПрикрепленныеФайлы);
	//Если Не ЗначениеЗаполнено(ПрикрепленныеФайлы) Тогда
	//	ПрикрепленныеФайлы = "Прикрепленные файлы(0)";	
	//КонецЕсли;
	
	ЗаполнитьСложныйМаршрут();
	сабБПКлиентСервер.РазвернутьГруппировкиДерева(Элементы, МаршрутДерево);
	
	//табДок
	#Если МобильныйКлиент Или МобильноеПриложениеКлиент Тогда
		ЭтоМобильныйКлиент = Истина;
	#Иначе
		ЭтоМобильныйКлиент = Ложь;
	#КонецЕсли
	
	ВывестиФормуПредварительногоПросмотра(ЭтоМобильныйКлиент);
	
	ПереместитьЭлеметы(ЭтоМобильныйКлиент);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиФормуПредварительногоПросмотра(ЭтоМобильныйКлиент)
	
	Если Не ЗначениеЗаполнено(Объект.Заявка) Или Объект.Заявка.ПолучитьОбъект() = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	МассивЗаявок = Новый Массив;
	МассивЗаявок.Добавить(Объект.Заявка);
	
	ТабДок = Новый ТабличныйДокумент;	
	БюджетныйНаСервере.УниверсальнаяПечатьСервер(ТабДок, МассивЗаявок, ЭтоМобильныйКлиент);
	ТабДокПредварительныйПросмотр = ТабДок;
	ЭтоФормДок = ТипЗнч(ТабДок) = Тип("ФорматированныйДокумент"); 
	Если ЭтоФормДок Тогда
		ТекстПредварительныйПросмотр = ТабДок;	
	Иначе	
		ТабДокПредварительныйПросмотр = ТабДок;
	КонецЕсли;
	Элементы.ТекстПредварительныйПросмотр.Видимость = ЭтоФормДок;
	Элементы.Группа22.Видимость = ЭтоФормДок;
	Элементы.Группа26.Видимость = ЭтоФормДок;
	Элементы.ТабДокПредварительныйПросмотр.Видимость = НЕ ЭтоФормДок;
	Элементы.Группа24.Видимость = НЕ ЭтоФормДок;
	
КонецПроцедуры


&НаСервере
Процедура ПереместитьЭлеметы(ЭтоМобильныйКлиент)
	Если ЭтоМобильныйКлиент Тогда
		Если НЕ Элементы.Найти("СоздатьДвиженияДС") = Неопределено И НЕ Элементы.Найти("Группа18") = Неопределено И НЕ Элементы.Найти("Группа19") = Неопределено Тогда
			Элементы.Переместить(Элементы.Группа19, Элементы.Группа18, Элементы.СоздатьДвиженияДС);
		КонецЕсли;
		//Если Не Элементы.Найти("Группа20") = Неопределено И Не Элементы.Найти("Группа9") = Неопределено И Не Элементы.Найти("ЗадачаЗадачаПеренаправить") = Неопределено Тогда
		//	Элементы.Переместить(Элементы.Группа20, Элементы.Группа9, Элементы.ЗадачаЗадачаПеренаправить);
		//КонецЕсли;
		
		//Если Не Элементы.Найти("Группа4") = Неопределено И Не Элементы.Найти("Группа17") = Неопределено И Не Элементы.Найти("Группа19") = Неопределено Тогда
		//	Элементы.Переместить(Элементы.Группа4, Элементы.Группа17, Элементы.Группа19);
		//КонецЕсли;
		//Если Не Элементы.Найти("Группа2") = Неопределено И Не Элементы.Найти("Группа17") = Неопределено И Не Элементы.Найти("Группа19") = Неопределено Тогда
		//	Элементы.Переместить(Элементы.Группа2, Элементы.Группа17, Элементы.Группа19);
		//КонецЕсли;
		
		
		Элементы.Группа22.Видимость = Ложь;
		Элементы.Группа24.Видимость = Ложь;
		Элементы.Группа26.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура ПроверкаВозможностиРедактированияДокумента()
	
	ВозможностьРедактированияИзАвтомаршрута = Ложь;
	Если ЗначениеЗаполнено(Объект.Заявка) Тогда
		ТекБП = БПСервер.НайтиТекущийБПСервер(Объект.Заявка);
		Если НЕ ТекБП = Неопределено Тогда
			ВозможностьРедактированияИзАвтомаршрута = БПСервер.ТекПользовательИсполнительДокумента(Объект.Заявка, Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если ВозможностьРедактированияИзАвтомаршрута Тогда
		Элементы.Заявка.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	Иначе
		Элементы.Заявка.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	КонецЕсли;
	
КонецПроцедуры

#Область РаботаСПодчиненными

&НаСервере
Процедура ЗаполнитьПодчиненнымиОбщая()
	
	//играемся с видимостью команд на создание подчиненных документов
	//Если Объект.ВРаботе Тогда
	
	СтруктураНеобходимостиПодчиненного = БПСервер.НуженПодчиненный(Объект.Ссылка, Объект.ТочкаМаршрута);
	Элементы.ПодчиненныеДокументы.Видимость = СтруктураНеобходимостиПодчиненного.ИсполнительДолженСоздатьНаОсновании;
	Если СтруктураНеобходимостиПодчиненного.ИсполнительДолженСоздатьНаОсновании Тогда
		ТипЗаявки = "";
		ТипЗаявкиКУ="";
		
		Если СтруктураНеобходимостиПодчиненного.РольИсполнителя = "Кассир" Или СтруктураНеобходимостиПодчиненного.РольИсполнителя = "КассирПредприятия" Тогда
			Массив = Новый Массив;
			
			Массив.Добавить(Тип("ДокументСсылка.УЧ_АвансовыйОтчет"));
			ТипЗаявки = "УЧ_АвансовыйОтчет";
			
			ОписаниеТиповЧ = Новый ОписаниеТипов(Массив);
			Элементы.ПодчиненныеДокументыДокумент.ОграничениеТипа = ОписаниеТиповЧ;
			Элементы.ПодчиненныеДокументыДокумент.ВыбиратьТип = Ложь;
			
		ИначеЕсли СтруктураНеобходимостиПодчиненного.РольИсполнителя ="Учетчик" Тогда
			ТипЗаявки = "УЧ_АвансовыйОтчет";
			Массив = Новый Массив;
			Массив.Добавить(Тип("ДокументСсылка.УЧ_АвансовыйОтчет"));
			ОписаниеТиповЧ = Новый ОписаниеТипов(Массив);
			Элементы.ПодчиненныеДокументыДокумент.ОграничениеТипа = ОписаниеТиповЧ;
			Элементы.ПодчиненныеДокументыДокумент.ВыбиратьТип = Ложь;
			
		ИначеЕсли СтруктураНеобходимостиПодчиненного.РольИсполнителя ="КУ" Тогда
			ТипЗаявки = "УЧ_АвансовыйОтчет";
			ТипЗаявкиКУ="УЧ_АвансовыйОтчет";
			Массив = Новый Массив;
			Массив.Добавить(Тип("ДокументСсылка.УЧ_АвансовыйОтчет"));
			//Массив.Добавить(Тип("ДокументСсылка.КЗ_АвансовыйОтчет"));
			
			ОписаниеТиповЧ = Новый ОписаниеТипов(Массив);
			Элементы.ПодчиненныеДокументыДокумент.ОграничениеТипа = ОписаниеТиповЧ;
			Элементы.ПодчиненныеДокументыДокумент.ВыбиратьТип = Ложь;			
			//ИначеЕсли СтруктураНеобходимостиПодчиненного.РольИсполнителя = "ЗавЛаб" Тогда
			//	ТипЗаявки = "ПР_Отгрузка";
			//	Массив = Новый Массив;
			//	Массив.Добавить(Тип("ДокументСсылка.ПР_Отгрузка"));
			//	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив);
			//	Элементы.ПодчиненныеДокументыДокумент.ОграничениеТипа = ОписаниеТиповЧ;
			//	Элементы.ПодчиненныеДокументыДокумент.ВыбиратьТип = Ложь;
		ИначеЕсли СтруктураНеобходимостиПодчиненного.РольИсполнителя = "Кадровик" Тогда
			ТипЗаявки = "КадровыеДвижения";
			Массив = Новый Массив;
			Массив.Добавить(Тип("ДокументСсылка.КадровыеДвижения"));
			ОписаниеТиповЧ = Новый ОписаниеТипов(Массив);
			Элементы.ПодчиненныеДокументыДокумент.ОграничениеТипа = ОписаниеТиповЧ;
			Элементы.ПодчиненныеДокументыДокумент.ВыбиратьТип = Ложь;
		ИначеЕсли СтруктураНеобходимостиПодчиненного.РольИсполнителя = "УчетчикСоздательДоговора" Тогда
			ТипЗаявки = "ДоговорыКонтрагентов";
			Массив = Новый Массив;
			Массив.Добавить(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
			ОписаниеТиповЧ = Новый ОписаниеТипов(Массив);
			Элементы.ПодчиненныеДокументыДокумент.ОграничениеТипа = ОписаниеТиповЧ;
			Элементы.ПодчиненныеДокументыДокумент.ВыбиратьТип = Ложь;
			Элементы.ПодчиненныеДокументыДобавить.Заголовок = "Создать договор"; 
			Контрагент = Объект.Заявка.Контрагент;
			Организация = Объект.Заявка.ЮрЛицоКомпании; 
		ИначеЕсли СтруктураНеобходимостиПодчиненного.РольИсполнителя = "УчетчикСоздательДопСоглашения" Тогда
			ТипЗаявки = "ДополнительныеСоглашенияДоговоров";
			Массив = Новый Массив;
			Массив.Добавить(Тип("СправочникСсылка.ДополнительныеСоглашенияДоговоров"));
			ОписаниеТиповЧ = Новый ОписаниеТипов(Массив);
			Элементы.ПодчиненныеДокументыДокумент.ОграничениеТипа = ОписаниеТиповЧ;
			Элементы.ПодчиненныеДокументыДокумент.ВыбиратьТип = Ложь;
			Элементы.ПодчиненныеДокументыДобавить.Заголовок = "Создать доп. соглашение"; 
			Контрагент = Объект.Заявка.Контрагент;
			Организация = Объект.Заявка.ЮрЛицоКомпании;
		КонецЕсли;
		
		Если ТипЗаявкиКУ="" тогда
			ЗаполнитьПодчиненными(ТипЗаявки);
		Иначе
			ЗаполнитьПодчиненными(ТипЗаявки);
			ЗаполнитьПодчиненнымиКУ(ТипЗаявкиКУ);
		КонецЕсли;
		//Иначе
		//	Элементы.СоздатьНаОсновании.Видимость = Ложь;
	КонецЕсли;
	//Иначе
	//	Элементы.ПодчиненныеДокументы.Видимость = Ложь;
	//	//Элементы.СоздатьНаОсновании.Видимость = Ложь;
	//КонецЕсли;
	
	//Если ЗначениеЗаполнено(Объект.ДокументОбязательныйКПрикреплению) Тогда
	//	ЗаполнитьПодчиненными("");
	//КонецЕсли;
	КоличествоПодчиненных = ПодчиненныеДокументы.Количество();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодчиненными(ТипЗаявки)
	ПодчиненныеДокументы.Очистить();
	ПодчиненныеДоки = БПСервер.ЕстьПоискПодчиненныеДокументы(ИмяДокумента(Объект.Заявка), Объект.Заявка, ТипЗаявки, "");
	//ПодчиненныеДоки = БПСервер.ЕстьПоискПодчиненныеДокументы(ИмяДокумента(Объект.Заявка), Объект.Заявка, ВернутьТипПодчиненногоДокументаНаСервере(), ?(ТипЗнч(Объект.Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаОтгрузку") И НЕ ТипЗаявки = "Д_УведомлениеРАР" И НЕ ТипЗаявки = "Л_ОтправкаВагонов", Объект.Предприятие, ""));
	Для каждого ТекДок Из ПодчиненныеДоки Цикл
		НоваяСтрока = ПодчиненныеДокументы.Добавить();
		НоваяСтрока.Документ = ТекДок;
	КонецЦикла; 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяДокумента(ТекСсылка)
	
	Возврат ТекСсылка.Метаданные().Имя;
	
КонецФункции // ()

&НаСервере
Процедура ЗаполнитьПодчиненнымиКУ(ТипЗаявкиКУ)
	ПодчиненныеДоки = БПСервер.ЕстьПоискПодчиненныеДокументы(ИмяДокумента(Объект.Заявка), Объект.Заявка, ТипЗаявкиКУ, "");
	//ПодчиненныеДоки = БПСервер.ЕстьПоискПодчиненныеДокументы(ИмяДокумента(Объект.Заявка), Объект.Заявка, ВернутьТипПодчиненногоДокументаНаСервере(), ?(ТипЗнч(Объект.Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаОтгрузку") И НЕ ТипЗаявки = "Д_УведомлениеРАР" И НЕ ТипЗаявки = "Л_ОтправкаВагонов", Объект.Предприятие, ""));
	Для каждого ТекДок Из ПодчиненныеДоки Цикл
		НоваяСтрока = ПодчиненныеДокументы.Добавить();
		НоваяСтрока.Документ = ТекДок;
	КонецЦикла; 
КонецПроцедуры

&НаСервере
Процедура УстановитьДокОснованиеНаСервере(ДокументСсылка)
	
	//Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.Л_ОтправкаВагонов") И НЕ ЗначениеЗаполнено(ДокументСсылка.ДокОснование) Тогда
	//	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	//	ДокументОбъект.ДокОснование = Объект.Заявка;
	//	ДокументОбъект.Записать();
	//КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПодчиненныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьЗначение(Неопределено, Элементы.ПодчиненныеДокументы.ТекущиеДанные.Документ);
КонецПроцедуры

&НаКлиенте
Процедура ПодчиненныеДокументыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	
	//ТипДокументаНаОсновании = ВернутьТипПодчиненногоДокументаНаСервере();
	//
	//Если ТипДокументаНаОсновании = "" Тогда
	//	Возврат
	//ИначеЕсли ТипДокументаНаОсновании = "ПР_Отгрузка" Тогда
	//	ОтгрузкаФакт(Неопределено);
	//ИначеЕсли ТипДокументаНаОсновании = "Л_ПутевойЛист" Тогда
	//	АвтоТранспорт(Неопределено); 
	//Иначе	
	//	ОткрытьФорму("Документ." + ТипДокументаНаОсновании + ".ФормаОбъекта", Новый Структура("Основание", Объект.Заявка), Элемент);
	//КонецЕсли;	
	
	Если Элементы.ПодчиненныеДокументыДокумент.ОграничениеТипа.СодержитТип(Тип("ДокументСсылка.УЧ_АвансовыйОтчет")) Тогда
		
		ОткрытьФорму("Документ.УЧ_АвансовыйОтчет.ФормаОбъекта", Новый Структура("Основание", Объект.Заявка), Элемент);
		
	ИначеЕсли Элементы.ПодчиненныеДокументыДокумент.ОграничениеТипа.СодержитТип(Тип("ДокументСсылка.КадровыеДвижения"))	Тогда
		
		РеквизитыЗаявки = БюджетныйНаСервере.ВернутьРеквизиты(Объект.Заявка, "Сотрудник, ДолжностьРегл, ДолжностьУпр, Фамилия, Имя, Отчество, ПредприятиеУпр, ПредприятиеУпр.НаправлениеДеятельности, Договор", Ложь);
		
		НовыйСотрудник = РеквизитыЗаявки.Сотрудник;
		Если ТипЗнч(РеквизитыЗаявки.Сотрудник) = Тип("Строка") Тогда
			НовыйСотрудник = НайтиСотрудника(РеквизитыЗаявки);
			Если НовыйСотрудник = Неопределено Тогда
				Если Вопрос("Сотрудник """ + Строка(РеквизитыЗаявки.Сотрудник) + """ в заявке не является элементом справочника ""Сотрудники"". Создать сотрудника в папке Кадрового учета?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да  Тогда
					НовыйСотрудникФорма = ПолучитьФорму("Справочник.Сотрудники.ФормаОбъекта");
					ЗаполнитьЗначенияСвойств(НовыйСотрудникФорма.Объект, РеквизитыЗаявки);
					НовыйСотрудникФорма.Объект.Родитель = ПредопределенноеЗначение("Справочник.Сотрудники.ПЕРСОНАЛ");
					
					Если ЗначениеЗаполнено(РеквизитыЗаявки.ПредприятиеУпр) Тогда
						НоваяСтрока = НовыйСотрудникФорма.Объект.Предприятия.Добавить();
						НоваяСтрока.Предприятие = РеквизитыЗаявки.ПредприятиеУпр;
						НовыйСотрудникФорма.Объект.НаправлениеДеятельности = РеквизитыЗаявки.ПредприятиеУпрНаправлениеДеятельности;					
						НовыйСотрудникФорма.Объект.ОсновноеПредприятие = РеквизитыЗаявки.ПредприятиеУпр;
					КонецЕсли;
					
					НовыйСотрудникФорма.ОткрытьМодально();
					НовыйСотрудник = НовыйСотрудникФорма.Объект.Ссылка;
				КонецЕсли;		
			КонецЕсли;
		КонецЕсли;
		
		ДолжностиСовпадают = (РеквизитыЗаявки.ДолжностьУпр = РеквизитыЗаявки.ДолжностьРегл);
		НоваяДолжностьУпр = РеквизитыЗаявки.ДолжностьУпр;
		НоваяДолжностьРегл = РеквизитыЗаявки.ДолжностьРегл;
		Если ТипЗнч(РеквизитыЗаявки.ДолжностьУпр) = Тип("Строка") Тогда
			НоваяДолжностьУпр = НайтиДолжность(РеквизитыЗаявки.ДолжностьУпр);
			Если НоваяДолжностьУпр = Неопределено Тогда
				Если Вопрос("Управленческая должность """ + Строка(РеквизитыЗаявки.ДолжностьУпр) + """ в заявке не является элементом справочника ""Должности"". Создать должность в папке Кадрового учета?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да  Тогда
					НоваяДолжностьУпрФорма = ПолучитьФорму("Справочник.Должности.ФормаОбъекта");
					//НоваяДолжностьУпрФорма.Объект.Родитель = ПредопределенноеЗначение("Справочник.Д_Должности.ДолжностиКадровогоУчета");
					НоваяДолжностьУпрФорма.Объект.Наименование = РеквизитыЗаявки.ДолжностьУпр;
					НоваяДолжностьУпрФорма.ОткрытьМодально();
					НоваяДолжностьУпр = НоваяДолжностьУпрФорма.Объект.Ссылка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(РеквизитыЗаявки.ДолжностьРегл) = Тип("Строка") И НЕ ДолжностиСовпадают  Тогда 
			НоваяДолжностьРегл = НайтиДолжность(РеквизитыЗаявки.ДолжностьРегл);
			Если НоваяДолжностьРегл = Неопределено Тогда
				Если Вопрос("Регламентная должность """ + Строка(РеквизитыЗаявки.ДолжностьРегл) + """ в заявке не является элементом справочника ""Должности"". Создать должность в папке Кадрового учета?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да  Тогда
					НоваяДолжностьРеглФорма = ПолучитьФорму("Справочник.Должности.ФормаОбъекта");
					//НоваяДолжностьРеглФорма.Объект.Родитель = ПредопределенноеЗначение("Справочник.Д_Должности.ДолжностиКадровогоУчета");
					НоваяДолжностьРеглФорма.Объект.Наименование = РеквизитыЗаявки.ДолжностьРегл;
					НоваяДолжностьРеглФорма.ОткрытьМодально();
					НоваяДолжностьРегл = НоваяДолжностьРеглФорма.Объект.Ссылка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ТекФорма = ПолучитьФорму("Документ.КадровыеДвижения.ФормаОбъекта", Новый Структура("Основание", Объект.Заявка), Элемент);
		ТекФорма.Объект.Сотрудник = НовыйСотрудник;
		
		Для каждого ТекСТрока Из ТекФорма.Объект.УчетныеДанныеПрежние Цикл
			ТекСТрока.Должность = НоваяДолжностьУпр;
		КонецЦикла;
		Для каждого ТекСТрока Из ТекФорма.Объект.УчетныеДанные Цикл
			ТекСТрока.Должность = НоваяДолжностьУпр;
		КонецЦикла;
		Для каждого ТекСТрока Из ТекФорма.Объект.РегламентированныеДанныеПрежние Цикл
			ТекСТрока.Должность = НоваяДолжностьРегл;
		КонецЦикла; 
		Для каждого ТекСТрока Из ТекФорма.Объект.РегламентированныеДанные Цикл
			ТекСТрока.Должность = НоваяДолжностьРегл;
		КонецЦикла; 
		
		ТекФорма.Открыть();
	ИначеЕсли Элементы.ПодчиненныеДокументыДокумент.ОграничениеТипа.СодержитТип(Тип("СправочникСсылка.ДоговорыКонтрагентов"))	Тогда 
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПодчиненныеДокументыПередНачаломДобавленияЗавершение", ЭтаФорма, Новый Структура("Элемент", Элемент)), "Вы хотите создать новый договор?", РежимДиалогаВопрос.ДаНет);	
		
	ИначеЕсли Элементы.ПодчиненныеДокументыДокумент.ОграничениеТипа.СодержитТип(Тип("СправочникСсылка.ДополнительныеСоглашенияДоговоров"))	Тогда
		//РеквизитыЗаявки = БюджетныйНаСервере.ВернутьРеквизиты(Объект.Заявка, "Договор", Ложь);
		ОткрытьФорму("Справочник.ДополнительныеСоглашенияДоговоров.ФормаОбъекта", Новый Структура("Основание", Объект.Заявка), Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодчиненныеДокументыПередНачаломДобавленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	
	
	Если РезультатВопроса = КодВозвратаДиалога.Да  Тогда
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", Новый Структура("Основание", Объект.Заявка), Элемент);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиСотрудника(РеквизитыЗаявки)
	
	//поиск совпадений
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Сотрудники.Ссылка
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Имя = &Имя
	|	И Сотрудники.Фамилия = &Фамилия
	|	И Сотрудники.Отчество = &Отчество";
	
	Запрос.УстановитьПараметр("Фамилия", РеквизитыЗаявки.Фамилия);
	Запрос.УстановитьПараметр("Имя", РеквизитыЗаявки.Имя);
	Запрос.УстановитьПараметр("Отчество", РеквизитыЗаявки.Отчество);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	
КонецФункции // ()

&НаСервереБезКонтекста
Функция НайтиДолжность(Наименование)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Д_Должности.Ссылка
	|ИЗ
	|	Справочник.Должности КАК Д_Должности
	|ГДЕ
	|	Д_Должности.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
КонецФункции // ()

&НаСервере
Функция ПолучитьРольПользователя()
	
	//Если (рольдоступна("сабУчетчик")) и не РольДоступна("Кассир") тогда
	//	Возврат "Учетчик";
	//ИначеЕсли (РольДоступна("Кассир") ИЛИ РольДоступна("КассирПредприятия")) и не (рольдоступна("сабУчетчик")) тогда
	Возврат "Кассир";
	//ИначеЕсли РольДоступна("Кассир") и (рольдоступна("сабУчетчик")) тогда
	//	Возврат "КУ";
	//Иначе
	//	Возврат "Учетчик";	
	//КонецЕсли;
	
	
КонецФункции

&НаСервере
Функция ВернутьТипПодчиненногоДокументаНаСервере()
	
	Возврат Справочники.Д_ТипыПрикрепляемыхДокументов.ПолучитьИмяПредопределенного(Объект.ДокументОбязательныйКПрикреплению);		
	
КонецФункции	

&НаКлиенте
Процедура ПодчиненныеДокументыДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элементы.ПодчиненныеДокументыДокумент.ОграничениеТипа.СодержитТип(Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда                                 
		//СтандартнаяОбработка = Ложь;
		//ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", Новый Структура("Организация, Владелец", Объект.Организация, Объект.Контрагент), ЭтаФорма);
		//ОпределитьСвязиПараметровВыбораДоговора();
	Иначе
		СтандартнаяОбработка = Ложь;       		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область РаботаСУниверсальнойФормойСправочники

&НаСервереБезКонтекста
Процедура ПоказатьВопросыПоОбъекту(Задача, ТекЗаголовокВопросов)
	ТекЗаголовокВопросов = "";
	КоличВопросов = 0;
	Если НЕ ЗначениеЗаполнено(Задача.Заявка) Тогда
		Возврат;	
	КонецЕсли;
	БПСервер.ВывестиВопросыПоДокументу(Неопределено, Задача.Заявка, Истина, КоличВопросов);
	Если КоличВопросов Тогда
		ТекЗаголовокВопросов = "Вопросы" + ?(КоличВопросов, " (" + Строка(КоличВопросов) + ")", "");
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПоказатьЗаметкиПоОбъекту(Задача, ТекЗаголовокВопросов)
	ТекЗаголовокВопросов = "";
	КоличВопросов = 0;
	БПСервер.ВывестиЗаметкиПоДокументу(Неопределено, ?(ЗначениеЗаполнено(Задача.Заявка), Задача.Заявка, Задача.Ссылка), Истина, КоличВопросов);
	Если КоличВопросов Тогда
		ТекЗаголовокВопросов = "Замеки" + ?(КоличВопросов, " (" + Строка(КоличВопросов) + ")", "");
	КонецЕсли;
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ПоказатьОбсуждениеОбъекта(Задача, ТекЗаголовокОбсуждений)
	ТекЗаголовокОбсуждений = "";
	КоличОбсуждений = 0;
	
	Если НЕ ЗначениеЗаполнено(Задача.Заявка) Тогда
		Возврат;	
	КонецЕсли;
	
	БПСервер.ВывестиОбсужденияПоДокументу(Неопределено, Задача.Заявка, Истина, КоличОбсуждений);
	Если КоличОбсуждений Тогда
		ТекЗаголовокОбсуждений = "Обсуждение документа" + ?(КоличОбсуждений, " (" + Строка(КоличОбсуждений) + ")", "");
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПоказатьРанееПройденныеПользователем(Задача, РанееВыполненныеЗадачи, ТекПользователь = Неопределено)
	Если ТекПользователь = Неопределено Тогда
		ТекПользователь = ПараметрыСеанса.ТекущийПользователь;	
	КонецЕсли;
	РанееВыполненныеЗадачи = "";
	КоличРанееВыполненных = 0;
	
	Если НЕ ЗначениеЗаполнено(Задача.Заявка) Тогда
		Возврат;	
	КонецЕсли;
	
	БПСервер.ВывестиРанееВыполненныеВамиЗадачиПоДокументу(Неопределено, Задача.Заявка, Истина, КоличРанееВыполненных, РанееВыполненныеЗадачи, ТекПользователь);
	Если ЗначениеЗаполнено(РанееВыполненныеЗадачи) Тогда
		РанееВыполненныеЗадачи = "Вы уже согласовывали этот документ";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаВопросыПоДокументуНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	БюджетныйНаКлиенте.УниверсальноеВыполнениеКоманды(Объект.Заявка, "ОбщаяПечатьВопросовПоДокументу");
КонецПроцедуры

&НаКлиенте
Процедура ОбсуждениеДокументаНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	БюджетныйНаКлиенте.УниверсальноеВыполнениеКоманды(Объект.Заявка, "ОбщаяПечатьОбсужденийПоДокументу");
КонецПроцедуры

&НаКлиенте
Процедура РанееВыполненныеЗадачиНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	БюджетныйНаКлиенте.УниверсальноеВыполнениеКоманды(Объект.Заявка, "Справочник.СогласованиеОбщее.Команда.ОтчетПоВыполнению");
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепленныеФайлыНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Владелец", Объект.Заявка);
	ТекФорма = ПолучитьФорму("РегистрСведений.ПрикрепленныеОбъекты.ФормаСписка", ПараметрыФормы, , Истина);
	ТекФорма.Открыть();
КонецПроцедуры


&НаКлиенте
Процедура ТекКоманда1Нажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Элементы.КонвертироватьВПДФ.Заголовок = "Конвертировать в pdf" Тогда
		Если ЗначениеЗаполнено(Объект.РольИсполнителя) И ТипЗнч(Объект.РольИсполнителя) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			Если Элементы.КонвертироватьВПДФ.Доступность = Истина Тогда
				ПоказатьПредупреждение(,"Имеются прикрепленные документы формата doc/docx/rtf. Перед согласованием необходимо конвертировать файлы в формат ""pdf"". Для этого нажмите команду ""Конвертировать в pdf"" на форме.");
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	НужныПодтвержденияКнопок = БюджетныйНаСервере.ВернутьРеквизит(БюджетныйНаСервере.ПолучитьПользователя(), "ДопПодтверждениеНажатияКнопок");
	СтруктураВопростов = БПСервер.ПолучитьТекстыВопросов(Объект.Ссылка, 1);
	Если НужныПодтвержденияКнопок Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("СогласоватьБизнесПроцессЗавершение", ЭтотОбъект, Новый Структура("НужныПодтвержденияКнопок, СтруктураВопростов", НужныПодтвержденияКнопок, СтруктураВопростов)), СтруктураВопростов.Вопрос, РежимДиалогаВопрос.ДаНет);
	Иначе
		СогласоватьБизнесПроцессЗавершение(КодВозвратаДиалога.Да, Новый Структура("НужныПодтвержденияКнопок, СтруктураВопростов", НужныПодтвержденияКнопок, СтруктураВопростов)); 	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьБизнесПроцессЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	ТекДанные = Объект;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да ИЛИ НЕ ДополнительныеПараметры.НужныПодтвержденияКнопок Тогда
		Если ЗадачаТекИмяКоманды1 = "ПринятьОбращение" Тогда
			Если Не ЗначениеЗаполнено(ТекДанные.СрокОкончания) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Введите примерный срок окончания работ";
				Сообщение.Поле = "СрокОкончания";
				//Сообщение.УстановитьДанные();
				Сообщение.Сообщить(); 
				Возврат;
			ИначеЕсли ТекДанные.СрокОкончания < ТекущаяДата() Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Срок окончания работ не может быть мешьше текущей даты";
				Сообщение.Поле = "СрокОкончания";
				//Сообщение.УстановитьДанные();
				Сообщение.Сообщить();
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		//проверка в случае точки исполнения
		НуженВозврат = Ложь;
		ТекстПредупреждения = "";
		БюджетныйНаКлиенте.ПроверкаИсполнения(Объект.Ссылка, ПодчиненныеДокументы, НуженВозврат, ТекстПредупреждения);
		Если НуженВозврат = Неопределено Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ПроверкаИсполненияЗавершение", ЭтотОбъект, ), ТекстПредупреждения + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
		ИначеЕсли НуженВозврат = Истина Тогда	
			Возврат;		
		КонецЕсли;
		
		//проверка на исполнителя маршрута
		БПСервер.ПроверитьИсполнителейЗаявки(Объект.Ссылка, ТекстПредупреждения, НуженВозврат);
		Если НуженВозврат = Истина Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("СогласоватьБизнесПроцессЗавершениеЗавершение", ЭтотОбъект), ТекстПредупреждения, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		
		Если Не БПСервер.ПроверкаЗадачи(Объект.Ссылка) И НуженВозврат = Ложь Тогда
			ДобавитьКомментарий(Неопределено);
			БПСервер.ВыполнитьКомандуЗадачиБП(Объект.Ссылка, ЗадачаТекИмяКоманды1, ПолучитьСтруктуруРеквизитовФормы(), Ложь, "ФормаУниверсальная");
			ОповеститьОбИзменении(Объект.Ссылка);
			Оповестить("ОбновитьСписокЗадач");
			Закрыть();
		КонецЕсли;
		
		
	Иначе
		Возврат;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьБизнесПроцессЗавершениеЗавершение(РезультатВопроса1, ДополнительныеПараметры1) Экспорт
	
	Если РезультатВопроса1 = КодВозвратаДиалога.Да  Тогда
		ПересчитатьМаршрутНаСервере(Объект.Ссылка);
		Оповестить("ОбновитьМаршрут");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьМаршрутНаСервере(Задача)
	Если ТипЗнч(Задача.Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") Тогда
		ТекБПОб = Задача.БизнесПроцесс.ПолучитьОбъект();
		ТекБПОб.ДопИсполнение.Очистить();
		Справочники.Согласование1.ДобавитьСтрокуДопИсполнение(ТекБПОб, Задача.Заявка);
		БПСервер.ДобавитьРецензентовВМаршрут(ТекБПОб, "ДопИсполнение", Задача.Заявка);	
		ТекБПОб.Записать();
	ИначеЕсли ТипЗнч(Задача.Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаАвансовыйОтчет") Тогда
		ТекБПОб = Задача.БизнесПроцесс.ПолучитьОбъект();
		ТекБПОб.ДопИсполнение.Очистить();
		ТекБПОб.ЗаполнитьНаСервереАвансовыйОтчет(ТекБПОб, Задача.Заявка, Истина);	
		ТекБПОб.Записать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаИсполненияДоработкаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		БПСервер.УдалитьПППоЗаявке(Объект.Ссылка);
		
		БПСервер.ВыполнитьКомандуЗадачиБП(Объект.Ссылка, ЗадачаТекИмяКоманды3, ПолучитьСтруктуруРеквизитовФормы(), Ложь, "ФормаУниверсальная");
		ОповеститьОбИзменении(Объект.Ссылка);
		Оповестить("ОбновитьСписокЗадач");
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаИсполненияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		БПСервер.ВыполнитьКомандуЗадачиБП(Объект.Ссылка, ЗадачаТекИмяКоманды1, ПолучитьСтруктуруРеквизитовФормы(), Ложь, "ФормаУниверсальная");
		ОповеститьОбИзменении(Объект.Ссылка);
		Оповестить("ОбновитьСписокЗадач");
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаИсполненияЗавершение2(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СтруктураРеквизитовФормы = ПолучитьСтруктуруРеквизитовФормы();
		БПСервер.ВыполнитьКомандуЗадачиБП(Объект.Ссылка, ЗадачаТекИмяКоманды2, СтруктураРеквизитовФормы, Ложь, "ФормаУниверсальная");
		ОповеститьОбИзменении(Объект.Ссылка);
		Оповестить("ОбновитьСписокЗадач");
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ТекКоманда2Нажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Элементы.КонвертироватьВПДФ.Заголовок = "Конвертировать в текстовый формат" Тогда
		Если ЗначениеЗаполнено(Объект.РольИсполнителя) И ТипЗнч(Объект.РольИсполнителя) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			Если Элементы.КонвертироватьВПДФ.Доступность = Истина Тогда
				ПоказатьПредупреждение(,"Имеются конвертированные файлы формата ""pdf"". Перед продолжением необходимо конвертировать файлы в исходный формат. Для этого нажмите команду ""Конвертировать в текстовый формат"" на форме.");
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	НужныПодтвержденияКнопок = БюджетныйНаСервере.ВернутьРеквизит(БюджетныйНаСервере.ПолучитьПользователя(), "ДопПодтверждениеНажатияКнопок");
	
	СтруктураВопростов = БПСервер.ПолучитьТекстыВопросов(Объект.Ссылка, 2);
	Если НужныПодтвержденияКнопок Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("СогласоватьБизнесПроцессЗавершение2", ЭтотОбъект, Новый Структура("НужныПодтвержденияКнопок, СтруктураВопростов", НужныПодтвержденияКнопок, СтруктураВопростов)), СтруктураВопростов.Вопрос, РежимДиалогаВопрос.ДаНет);
	Иначе
		СогласоватьБизнесПроцессЗавершение2(КодВозвратаДиалога.Да, Новый Структура("НужныПодтвержденияКнопок, СтруктураВопростов", НужныПодтвержденияКнопок, СтруктураВопростов)); 	
	КонецЕсли; 
	
		
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьБизнесПроцессЗавершение2(РезультатВопроса, ДополнительныеПараметры) Экспорт
	ТекДанные = Объект;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да ИЛИ НЕ ДополнительныеПараметры.НужныПодтвержденияКнопок Тогда
		Если ПустаяСтрока(ЗадачаКомментарий) И НЕ ДополнительныеПараметры.СтруктураВопростов.СообщениеОбОшибке = "" Тогда
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана причина возврата на доработку", ,"Комментарий", ,Истина);
			сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(
			ЭтаФорма,
			ДополнительныеПараметры.СтруктураВопростов.СообщениеОбОшибке,
			,
			,
			"ЗадачаКомментарий",
			);
			Возврат;
		КонецЕсли;
		
		//проверка в случае точки исполнения
		НуженВозврат = Ложь;
		ТекстПредупреждения = "";
		БюджетныйНаКлиенте.ПроверкаИсполненияДоработка(Объект.Ссылка, ПодчиненныеДокументы, НуженВозврат, ТекстПредупреждения);
		Если НуженВозврат = Неопределено Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ПроверкаИсполненияДоработкаЗавершение", ЭтотОбъект, ), ТекстПредупреждения + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
		ИначеЕсли НуженВозврат = Истина Тогда	
			Возврат;		
		КонецЕсли;
		
		Если Не БПСервер.ПроверкаЗадачи(Объект.Ссылка) И НуженВозврат = Ложь Тогда
			ДобавитьКомментарий(Неопределено);;
			БПСервер.ВыполнитьКомандуЗадачиБП(Объект.Ссылка, ЗадачаТекИмяКоманды3, ПолучитьСтруктуруРеквизитовФормы(), Ложь,"ФормаУниверсальная");
			ОповеститьОбИзменении(Объект.Ссылка);
			Оповестить("ОбновитьСписокЗадач");
			Закрыть();
		КонецЕсли;
		
		
	Иначе
		Возврат;		
	КонецЕсли;
	
	Если Элементы.КонвертироватьВПДФ.Заголовок <> "Конвертировать в текстовый формат" Тогда
		ДопПараметры = Новый Структура("КонвертированиеИсполнителя",Истина);
		ВыполнитьКорректировкуПослеОтвета(КодВозвратаДиалога.Да,ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти 

#Область РасширенноеУправлениеЗадачей

&НаСервере
Функция ПолучитьСтруктуруРеквизитовФормы()
	ТекСтруктураРеквизитов = БПСервер.ПолучитьСтруктуруРеквизитовФормы(ЭтаФорма);
	
	//добавляем ТЧ бизнеспроцессов
	//БизнесПроцесс = Задача.БизнесПроцесс;
	//Если ЗначениеЗаполнено(БизнесПроцесс) Тогда
	//	Для каждого ТЧ Из Метаданные.Справочники[БизнесПроцесс.Метаданные().Имя].ТабличныеЧасти Цикл
	//		ТекСтруктураРеквизитов.Вставить(ТЧ.Имя, БизнесПроцесс[ТЧ.Имя].Выгрузить());			
	//	КонецЦикла; 
	//КонецЕсли;
	
	
	Возврат  ТекСтруктураРеквизитов;
КонецФункции

&НаСервере
Процедура ОбновитьКомандуПечатьСервер()
	сабБПКлиентСервер.ЗаполнитьГруппуКнопокПечать(Элементы, Команды, СписокКоманд, Объект.Ссылка);
КонецПроцедуры


#КонецОбласти

&НаСервере
Процедура ЗаполнитьСложныйМаршрут()
	
	//очищаем тек маршрут
	Тек = МаршрутДерево.ПолучитьЭлементы();
	Тек.Очистить();
	
	ТекМассМаршрутов = Новый Массив;
	
	//Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда //опрашиваем автомаршруты при открытии заполненного нового
	//	Для каждого ТекСтрока Из Объект.ДопСогласование Цикл
	//		Если ЗначениеЗаполнено(ТекСтрока.МаршрутДвижения) И ТекМассМаршрутов.Найти(ТекСтрока.МаршрутДвижения) = Неопределено Тогда
	//			ТекМассМаршрутов.Добавить(ТекСтрока.МаршрутДвижения);
	//		КонецЕсли;
	//	КонецЦикла; 
	//КонецЕсли;
	
	Если НЕ ТекМассМаршрутов.Количество() Тогда
		///для формирования дерева маршрута (неоптимально, двойной запрос маршрутов, ну да пох)
		ТекМассМаршрутов.Добавить(Объект.БизнесПроцесс);
	КонецЕсли;
	
	Для каждого ТекМаршрутСтрока Из ТекМассМаршрутов Цикл
		сабБПКлиентСервер.ДобавитьДеревоМаршрута(Элементы, Команды, ТекущаяСтрокаГруппы, МаршрутДерево, ТекМаршрутСтрока, УсловноеОформление, Новый Структура("КнопкиУправления, ДопУсловияВидимость, ТолькоПросмотр, Согласовано, СкрытьПанель", Ложь, Ложь, Истина, Истина, Истина));
	КонецЦикла;
	
	
КонецПроцедуры

///////////////////////////////генерирование дерева маршрутов///////////////////////
#Область ГенерированиеДереваМаршрутов

&НаКлиенте
Процедура Реквизит1ПередНачаломИзменения(Элемент, Отказ)
	Если Элемент.ТекущиеДанные.Пользователь = "Согласование" ИЛИ Элемент.ТекущиеДанные.Пользователь = "Исполнение" ИЛИ Элемент.ТекущиеДанные.Пользователь = "Ознакомление"  Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если Элемент.ТекущиеДанные.Пользователь = "Группа И" ИЛИ Элемент.ТекущиеДанные.Пользователь = "Группа ИЛИ" Тогда
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТиповС = Новый ОписаниеТипов(Массив);
		Элементы.Колонка1.ОграничениеТипа = ОписаниеТиповС;
		
		Элементы.Колонка1.РежимВыбораИзСписка = Истина;
		ТекСписок = Новый СписокЗначений;
		Элементы.Колонка1.СписокВыбора.Добавить("Группа И");
		Элементы.Колонка1.СписокВыбора.Добавить("Группа ИЛИ");
	КонецЕсли;
	//Элементы.Колонка1.ВыбиратьТип = Ложь;
	//Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Пользователь) Тогда
	//	Элемент.ТекущиеДанные.Пользователь = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Реквизит1ПриАктивизацииСтроки(Элемент)
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		Если ТипЗнч(Элемент.ТекущиеДанные.Пользователь) = Тип("Строка") Тогда
			ТекущаяСтрокаГруппы = Элемент.ТекущиеДанные.ИдГруппы;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Реквизит1ПередУдалением(Элемент, Отказ)
	Если Элемент.ТекущиеДанные.Пользователь = "Согласование" ИЛИ Элемент.ТекущиеДанные.Пользователь = "Исполнение" ИЛИ Элемент.ТекущиеДанные.Пользователь = "Ознакомление" Тогда
		Отказ = Истина;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГруппу(Команда)
	
	Элементы.Колонка1.СписокВыбора.Очистить();
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив);
	Элементы.Колонка1.ОграничениеТипа = ОписаниеТиповС;
	
	
	Элементы.ТаблицаФормы123.ДобавитьСтроку();
	//Элементы.ТаблицаФормы123.ТекущиеДанные.Пользователь = "";
	Элементы.Колонка1.РежимВыбораИзСписка = Истина;
	ТекСписок = Новый СписокЗначений;
	Элементы.Колонка1.СписокВыбора.Добавить("Группа И");
	Элементы.Колонка1.СписокВыбора.Добавить("Группа ИЛИ");
КонецПроцедуры

&НаКлиенте
Процедура Реквизит1ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Элементы.Колонка1.СписокВыбора.Очистить();
	Элементы.Колонка1.РежимВыбораИзСписка = Ложь;
	Если Элемент.ТекущиеДанные.Пользователь = "Группа И" ИЛИ Элемент.ТекущиеДанные.Пользователь = "Группа ИЛИ" Тогда
		Элемент.ТекущиеДанные.ЭтоГруппа = Истина;
		ТекущаяСтрокаГруппы = Новый УникальныйИдентификатор;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.ИДГруппы) Тогда
		Элемент.ТекущиеДанные.ИДГруппы = ТекущаяСтрокаГруппы;
	КонецЕсли;
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.Пользователи"));
	//Массив.Добавить(Тип("ПеречислениеСсылка.ОсновныеДолжностиПредприятия"));
	//Массив.Добавить(Тип("СправочникСсылка.Д_Должности"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив);
	
	Элементы.Колонка1.ОграничениеТипа = ОписаниеТиповС;
	
	
	Уровень = 0;
	ТекЭлемент = Элемент.ТекущиеДанные.ПолучитьРодителя();
	Пока НЕ ТекЭлемент = Неопределено Цикл
		Уровень = Уровень + 1;
		ТекЭлемент = ТекЭлемент.ПолучитьРодителя();
	КонецЦикла;
	Элемент.ТекущиеДанные.Уровень = Уровень;
	
	Если Уровень = 1 Тогда
		Элемент.ТекущиеДанные.ТипГруппы = "Группа И";
	Иначе
		ТекРодитель = Элемент.ТекущиеДанные.ПолучитьРодителя();
		Если НЕ ТекРодитель = Неопределено Тогда
			Элемент.ТекущиеДанные.ТипГруппы = ТекРодитель.Пользователь;
		КонецЕсли;
	КонецЕсли;
	
	//работа с ТЧ
	//УстановитьИдСтроки(Элемент);
	
	
КонецПроцедуры

&НаКлиенте
Процедура Реквизит1ПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если НЕ Копирование Тогда
		Если НЕ ТипЗнч(Элемент.ТекущиеДанные.Пользователь) =  Тип("Строка") Тогда
			Отказ = Истина;
			Элемент.ТекущаяСтрока = МаршрутДерево.НайтиПоИдентификатору(Элемент.ТекущаяСтрока).ПолучитьРодителя().ПолучитьИдентификатор();
			Элемент.ДобавитьСтроку();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Реквизит1ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НЕ Элементы.Колонка1.ОграничениеТипа.СодержитТип(Тип("Строка")) Тогда
		
		Если Элементы.ТаблицаФормы123.ТекущиеДанные.Пользователь = Неопределено Тогда
			Элементы.ТаблицаФормы123.ТекущиеДанные.Пользователь  = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура Реквизит1ДопСогласованиеСубъектСогласованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если НЕ Элементы.Колонка1.ОграничениеТипа.СодержитТип(Тип("Строка")) Тогда
		СтандартнаяОбработка = Ложь;
		ТекущийПользователь = ?(Элементы.ТаблицаФормы123.ТекущиеДанные = Неопределено,
		Неопределено, Элементы.ТаблицаФормы123.ТекущиеДанные.Пользователь);
		ВыбратьПользователей(ТекущийПользователь, Элемент);
	КонецЕсли	
КонецПроцедуры


&НаКлиенте
Процедура Реквизит1ДопУсловияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОткрытьФормуМодально("Справочник.МаршрутыДвиженияЗаявок.Форма.ФормаДопУсловий", Новый Структура("ИД", Элемент.Родитель.ТекущиеДанные.ИДСтроки), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте                                                                     
Процедура Реквизит1Перетаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	а = 1;
	ЗначениеКуда = МаршрутДерево.НайтиПоИдентификатору(Строка);
	ЗначениеЧто = МаршрутДерево.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);	
	Если НЕ ЗначениеКуда.ИдГруппы = Элемент.ТекущиеДанные.ИдГруппы Тогда
		Вставка = Ложь;
		Если НЕ ТипЗнч(ЗначениеКуда.Пользователь) = Тип("Строка") Тогда
			Вставка = Истина;
			Пока НЕ ТипЗнч(ЗначениеКуда.Пользователь) = Тип("Строка") Цикл
				ЗначениеКуда = ЗначениеКуда.ПолучитьРодителя();			
			КонецЦикла;		
		КонецЕсли;
		
		Элемент.ТекущиеДанные.ИдГруппы = ЗначениеКуда.ИдГруппы;
		Уровень = 1; //т.к. получаем родителя у группы
		ТекЭлемент = ЗначениеКуда.ПолучитьРодителя();
		Пока НЕ ТекЭлемент = Неопределено Цикл
			Уровень = Уровень + 1;
			ТекЭлемент = ТекЭлемент.ПолучитьРодителя();
		КонецЦикла;
		Элемент.ТекущиеДанные.Уровень = Уровень;
		
		Если Уровень = 1 Тогда
			Элемент.ТекущиеДанные.ТипГруппы = "Группа И";
		Иначе
			Элемент.ТекущиеДанные.ТипГруппы = ЗначениеКуда.Пользователь;
		КонецЕсли;
		
		ЭлементыКуда = ЗначениеКуда.ПолучитьЭлементы();
		//Если Вставка Тогда
		//	НовыйЭлемент = ЭлементыКуда.Вставить(МаршрутДерево.НайтиПоИдентификатору(Строка).ПолучитьИдентификатор());
		//Иначе
		НовыйЭлемент = ЭлементыКуда.Добавить();
		//КонецЕсли;
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элемент.ТекущиеДанные);
		
		РодительЧто = ЗначениеЧто.ПолучитьРодителя();
		РодительЧто.ПолучитьЭлементы().Удалить(ЗначениеЧто);
		
	КонецЕсли;
	
	//Элемент.ТекущаяСтрока = Строка;                                              
	//Если НЕ ТипЗнч(Элемент.ТекущиеДанные.Пользователь) =  Тип("Строка") Тогда
	//	СтандартнаяОбработка = Ложь;
	//КонецЕсли;
КонецПроцедуры

#КонецОбласти 

#Область УниверсальныйВыборПользователя

&НаКлиенте
Процедура ВыбратьПользователей(ТекущийПользователь, Элемент)
	
	//Если ЗначениеЗаполнено(ТекущийПользователь)
	//   И (    ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.Пользователи")
	//      ИЛИ ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.ГруппыПользователей") ) Тогда
	//	
	//	ВыборИПодборВнешнихПользователей = Ложь;
	
	//ИначеЕсли ИспользоватьВнешнихПользователей
	//        И ЗначениеЗаполнено(ТекущийПользователь)
	//        И (    ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.ВнешниеПользователи")
	//           ИЛИ ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") ) Тогда
	//
	//	ВыборИПодборВнешнихПользователей = Истина;
	//Иначе
	//	ПоказатьВыборТипаПользователиИлиВнешниеПользователи(
	//		Новый ОписаниеОповещения("ВыбратьПользователейЗавершение", ЭтотОбъект));
	//	Возврат;
	//КонецЕсли;
	
	ВыбратьПользователейЗавершение(Ложь, Элемент, ТекущийПользователь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВыборТипаПользователиИлиВнешниеПользователи(ОбработкаПродолжения)
	
	ВыборИПодборВнешнихПользователей = Ложь;
	
	//Если ИспользоватьВнешнихПользователей Тогда
	//	
	//	СписокТиповПользователей.ПоказатьВыборЭлемента(
	//		Новый ОписаниеОповещения(
	//			"ПоказатьВыборТипаПользователиИлиВнешниеПользователиЗавершение",
	//			ЭтотОбъект,
	//			ОбработкаПродолжения),
	//		НСтр("ru = 'Выбор типа данных'"),
	//		СписокТиповПользователей[0]);
	//Иначе
	ВыполнитьОбработкуОповещения(ОбработкаПродолжения, ВыборИПодборВнешнихПользователей);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПользователейЗавершение(ВыборИПодборВнешнихПользователей, Элемент, ТекущийПользователь = Неопределено) Экспорт
	
	Если ВыборИПодборВнешнихПользователей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ТекущаяСтрока", ?(
	Элементы.ДопСогласование.ТекущиеДанные = Неопределено,
	?(ТекущийПользователь = Неопределено, Неопределено, ТекущийПользователь),
	Элементы.ДопСогласование.ТекущиеДанные.СубъектСогласования));
	
	Если ВыборИПодборВнешнихПользователей Тогда
		ПараметрыФормы.Вставить("ВыборГруппВнешнихПользователей", Истина);
	Иначе
		ПараметрыФормы.Вставить("ВыборГруппПользователей", Истина);
	КонецЕсли;
	
	Если ВыборИПодборВнешнихПользователей Тогда
		
		ОткрытьФорму(
		"Справочник.ВнешниеПользователи.ФормаВыбора",
		ПараметрыФормы,
		Элемент);
	Иначе
		ОткрытьФорму(
		"Справочник.Пользователи.ФормаВыбора",
		ПараметрыФормы,
		Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьДанныеВыбораПользователя(Текст)
	
	Возврат Пользователи.СформироватьДанныеВыбораПользователя(Текст);
	
КонецФункции

&НаКлиенте
Процедура ДопСогласованиеСубъектСогласованияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СформироватьДанныеВыбораПользователя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДопСогласованиеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Элементы.ДопСогласование.ТекущиеДанные.СубъектСогласования = Неопределено Тогда
		Элементы.ДопСогласование.ТекущиеДанные.СубъектСогласования  = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		//Элементы.ГруппыПрав.ТекущиеДанные.НомерКартинки = -1;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДопИсполнениеСубъектСогласованияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СформироватьДанныеВыбораПользователя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДопИсполнениеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Элементы.ДопИсполнение.ТекущиеДанные.Исполнитель = Неопределено Тогда
		Элементы.ДопИсполнение.ТекущиеДанные.Исполнитель  = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДопОповещениеСубъектСогласованияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СформироватьДанныеВыбораПользователя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДопОповещениеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Элементы.ДопОповещение.ТекущиеДанные.Пользователь = Неопределено Тогда
		Элементы.ДопОповещение.ТекущиеДанные.Пользователь  = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДопСогласованиеСубъектСогласованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущийПользователь = ?(Элементы.ДопСогласование.ТекущиеДанные = Неопределено,
	Неопределено, Элементы.ДопСогласование.ТекущиеДанные.СубъектСогласования);
	ВыбратьПользователей(ТекущийПользователь, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДопИсполнениеИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущийПользователь = ?(Элементы.ДопИсполнение.ТекущиеДанные = Неопределено,
	Неопределено, Элементы.ДопИсполнение.ТекущиеДанные.Исполнитель);
	ВыбратьПользователей(ТекущийПользователь, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДопОповещениеПользовательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущийПользователь = ?(Элементы.ДопОповещение.ТекущиеДанные = Неопределено,
	Неопределено, Элементы.ДопОповещение.ТекущиеДанные.Пользователь);
	ВыбратьПользователей(ТекущийПользователь, Элемент);
КонецПроцедуры

#КонецОбласти 

&НаКлиенте
Процедура ОтправитьДалее(Команда)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.КонвертироватьВПДФ.Заголовок = "Конвертировать в pdf" Тогда
		Если ЗначениеЗаполнено(Объект.РольИсполнителя) И ТипЗнч(Объект.РольИсполнителя) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			Если Элементы.КонвертироватьВПДФ.Доступность = Истина Тогда
				ПоказатьПредупреждение(,"Имеются прикрепленные документы формата doc/docx/rtf. Перед согласованием необходимо конвертировать файлы в формат ""pdf"". Для этого нажмите команду ""Конвертировать в pdf"" на форме.");
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	НужныПодтвержденияКнопок = БюджетныйНаСервере.ВернутьРеквизит(БюджетныйНаСервере.ПолучитьПользователя(), "ДопПодтверждениеНажатияКнопок");
	СтруктураВопростов = БПСервер.ПолучитьТекстыВопросов(Объект.Ссылка, 3);
	Если НужныПодтвержденияКнопок Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("СогласоватьБизнесПроцессЗавершение3", ЭтотОбъект, Новый Структура("НужныПодтвержденияКнопок, СтруктураВопростов", НужныПодтвержденияКнопок, СтруктураВопростов)), СтруктураВопростов.Вопрос, РежимДиалогаВопрос.ДаНет);
	Иначе
		СогласоватьБизнесПроцессЗавершение3(КодВозвратаДиалога.Да, Новый Структура("НужныПодтвержденияКнопок, СтруктураВопростов", НужныПодтвержденияКнопок, СтруктураВопростов)); 	
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьБизнесПроцессЗавершение3(РезультатВопроса, ДополнительныеПараметры) Экспорт
	ТекДанные = Объект;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да ИЛИ НЕ ДополнительныеПараметры.НужныПодтвержденияКнопок Тогда
		
		Если ПустаяСтрока(ЗадачаКомментарий) И НЕ ДополнительныеПараметры.СтруктураВопростов.СообщениеОбОшибке = "" Тогда
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана причина возврата на доработку", ,"Комментарий", ,Истина);
			сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(
			ЭтаФорма,
			ДополнительныеПараметры.СтруктураВопростов.СообщениеОбОшибке,
			,
			,
			"ЗадачаКомментарий",
			);
			Возврат;
		КонецЕсли;
		
		
		//проверка в случае точки исполнения
		НуженВозврат = Ложь;
		ТекстПредупреждения = "";
		БюджетныйНаКлиенте.ПроверкаИсполнения(Объект.Ссылка, ПодчиненныеДокументы, НуженВозврат, ТекстПредупреждения);
		Если НуженВозврат = Неопределено Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ПроверкаИсполненияЗавершение2", ЭтотОбъект, ), ТекстПредупреждения + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
		ИначеЕсли НуженВозврат = Истина Тогда	
			Возврат;		
		КонецЕсли;
		
		Если Не БПСервер.ПроверкаЗадачи(Объект.Ссылка) И НуженВозврат = Ложь Тогда
			ДобавитьКомментарий(Неопределено);
			//ДопКомментарий = "";
			СтруктураРеквизитовФормы = ПолучитьСтруктуруРеквизитовФормы();
			//СтруктураРеквизитовФормы.Вставить("ДопКомментарийОтправитьДалее", ДопКомментарий);
			
			БПСервер.ВыполнитьКомандуЗадачиБП(Объект.Ссылка, ЗадачаТекИмяКоманды2, СтруктураРеквизитовФормы, Ложь, "ФормаУниверсальная");
			ОповеститьОбИзменении(Объект.Ссылка);
			Оповестить("ОбновитьСписокЗадач");
			Закрыть();
		КонецЕсли;
		
	Иначе
		Возврат;		
	КонецЕсли;
	
	
	
КонецПроцедуры

&НаСервере
Процедура НастроитьДоступностьКнопок(Задача, Заголовок1, Заголовок2, Заголовок3, ИмяКоманды1, ИмяКоманды2, ИмяКоманды3, ВидимостьРазрешенияРедактирования) Экспорт
	Заголовок1 = "";
	Заголовок2 = "";
	Заголовок3 = "";
	ИмяКоманды1 = "";
	ИмяКоманды2 = "";
	ИмяКоманды3 = "";
	
	ВидимостьРазрешенияРедактирования = Ложь;
	
	ЭтоИсполнитель = БПСервер.ТекПользовательИсполнительЗадачи(Задача);
	//Объект = БюджетныйНаСервере.ВернутьРеквизиты(Задача, "БизнесПроцесс, ТочкаМаршрута, Заявка, Заявка.Автор, Автор, Ссылка, РольИсполнителя");
	
	Если ТипЗнч(Объект.РольИсполнителя) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		СвойстваРолиИсполнителя = БюджетныйНаСервере.ВернутьРеквизиты(Объект.РольИсполнителя, "ИмяКомандыУтвердительно, ИмяКомандыОтрицательно, ИмяКомандыСЗамечаниями, НаименованиеЗадачи"); 
	Иначе
		СвойстваРолиИсполнителя = Неопределено;	
	КонецЕсли;
	
	
	//согласование1, согласование2, согласованиеОбщее
	Если ТипЗнч(Объект.БизнесПроцесс) = Тип("СправочникСсылка.Согласование1") 
		ИЛИ ТипЗнч(Объект.БизнесПроцесс) = Тип("СправочникСсылка.Согласование2")
		//ИЛИ ТипЗнч(Объект.БизнесПроцесс) = Тип("СправочникСсылка.Согласование3")
		ИЛИ ТипЗнч(Объект.БизнесПроцесс) = Тип("СправочникСсылка.СогласованиеОбщее") Тогда
		
		//берем имяКоманд из роли исполнителя. д1 14.11.17
		Если ЗначениеЗаполнено(Задача.РольИсполнителя) И ТипЗнч(Задача.РольИсполнителя) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			ИмяКомандыУтвердительно = Задача.РольИсполнителя.ИмяКомандыУтвердительно;
			ИмяКомандыОтрицательно = Задача.РольИсполнителя.ИмяКомандыОтрицательно;
			ИмяКомандыСЗамечаниями = Задача.РольИсполнителя.ИмяКомандыСЗамечаниями;
		Иначе
			ИмяКомандыУтвердительно = "Согласовано";
			ИмяКомандыОтрицательно = "Не согласовано";
			ИмяКомандыСЗамечаниями = "Согласовано с замечаниями";
		КонецЕсли;
		//конец имяКоманд
		
		
		Если НЕ БПСервер.ТочкиПроцессов("доработка").Найти(Объект.ТочкаМаршрута) = Неопределено Тогда //наДоработке
			Заголовок1 = ?(ЭтоИсполнитель, "Отправить повторно", "");
			Заголовок3 = ?(ЭтоИсполнитель, "Завершить", "");
			ИмяКоманды1 = "ОтправитьИЗакрыть";
			ИмяКоманды3 = ?(ЭтоИсполнитель, "ЗаявкаОплачена", "");
			ВидимостьРазрешенияРедактирования = Истина;
		ИначеЕсли НЕ БПСервер.ТочкиПроцессов("согласование").Найти(Объект.ТочкаМаршрута) = Неопределено Тогда //согласование, утверждение
			Заголовок1 = ?(ЭтоИсполнитель, ИмяКомандыУтвердительно, "");
			Заголовок2 = ?(ЭтоИсполнитель, ИмяКомандыСЗамечаниями, "");
			Заголовок3 = ?(ЭтоИсполнитель, ИмяКомандыОтрицательно, "Отменить");
			ИмяКоманды1 = "ЗаявкаСогласована";
			ИмяКоманды2 = "ОтправитьДалее";
			ИмяКоманды3 = ?(ЭтоИсполнитель, "НаДоработку", "ОтменаЗаявки");
		ИначеЕсли Объект.ТочкаМаршрута = Перечисления.Согласование1ТочкиМаршрута.Действие5 Тогда
			Заголовок1 = ?(ЭтоИсполнитель, "Принять к оплате", "");
			Заголовок3 = ?(ЭтоИсполнитель, "Вернуть на доработку", "Отменить");
			ИмяКоманды1 = "ЗаявкаОплачена";
			ИмяКоманды3 = ?(ЭтоИсполнитель, "НаДоработку", "ОтменаЗаявки");
		ИначеЕсли Объект.ТочкаМаршрута = Перечисления.Согласование1ТочкиМаршрута.Действие3 Тогда
			Заголовок1 = ?(ЭтоИсполнитель, "Проверить", "");
			Заголовок3 = ?(ЭтоИсполнитель, "Вернуть на доработку", "Отменить");
			ИмяКоманды1 = "ЗаявкаСогласована";
			ИмяКоманды3 = "НаДоработку";
		ИначеЕсли НЕ БПСервер.ТочкиПроцессов("исполнение").Найти(Объект.ТочкаМаршрута) = Неопределено Тогда
			Заголовок1 = ?(ЭтоИсполнитель, "Выполнить", "");
			Заголовок3 = ?(ЭтоИсполнитель, "Вернуть на доработку", "Отменить");
			ИмяКоманды1 = "ЗаявкаОплачена";
			ИмяКоманды3 = ?(ЭтоИсполнитель, "НаДоработку", "ОтменаЗаявки");
			Если ТипЗнч(Объект.Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаФинансирование") Тогда 
				//Если НЕ Константы.ИспользоватьРеестрыЗаявокНаОплату.Получить() Тогда
				//	Элементы.СоздатьДвиженияДС.Видимость = Истина;
				//	Элементы.СоздатьДвиженияДС.Заголовок = "Создать документ оплаты";
				//	Заголовок1 = ?(ЭтоИсполнитель, "Принять к оплате", "");
				//Иначе
				Заголовок1 = ?(ЭтоИсполнитель, "Принять в реестр", "");
				////КонецЕсли;
			КонецЕсли;
		ИначеЕсли НЕ БПСервер.ТочкиПроцессов("ознакомление").Найти(Объект.ТочкаМаршрута) = Неопределено Тогда
			Заголовок1 = ?(ЭтоИсполнитель, "Ознакомиться", "");
			ИмяКоманды1 = "ЗаявкаОплачена";
			
			Если Не Объект.ТочкаМаршрута = Перечисления.Согласование1ТочкиМаршрута.Действие6 Тогда
				Заголовок3 = ?(ЭтоИсполнитель, "Вернуть на доработку", "Отменить");
				ИмяКоманды3 = ?(ЭтоИсполнитель, "НаДоработку", "ОтменаЗаявки");			
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	//БПОповещение, БПЗадание
	Если ТипЗнч(Объект.Заявка) = Тип("ДокументСсылка.БП_Оповещение") Тогда
		Заголовок1 = ?(ЭтоИсполнитель, "Прочитано", "");
		Заголовок3 = "";
		ИмяКоманды1 = "Выполнено";
		ИмяКоманды3 = "Отказаться";
	КонецЕсли;
	
	Если ТипЗнч(Объект.Заявка) = Тип("ДокументСсылка.БП_Поручение") Тогда
		Заголовок1 = ?(ЭтоИсполнитель, "Выполнено", "");
		Заголовок3 = "Отменить";
		ИмяКоманды1 = "Выполнено";
		ИмяКоманды3 = "";
		
		ТекМассивПользователей = ПараметрыСеанса.ДоступныеПользователи;
		Если НЕ ТекМассивПользователей.Найти(Объект.ЗаявкаАвтор) = Неопределено Тогда
			Если НЕ (не ТекМассивПользователей.Найти(Объект.Автор) = Неопределено И БПСервер.ТекПользовательИсполнительЗадачи(Объект.Ссылка)) Тогда //в случае если автор сам ставит себе Справочники
				Заголовок1 = ?(ЭтоИсполнитель, "Проверено", "");
				Заголовок3 = "";
				ИмяКоманды1 = "ЗаявкаСогласована";
				ИмяКоманды3 = "НаДоработку";
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Заявка) Тогда
		Заголовок1 = ?(ЭтоИсполнитель, "Выполнено", "");
		Заголовок3 = "";
		ИмяКоманды1 = "Выполнено";
		ИмяКоманды3 = "";
	КонецЕсли;
	
	//заявки в ТехПоддержку
	Если ТипЗнч(Объект.БизнесПроцесс) = Тип("СправочникСсылка.ЗаявкиАдминистратору") Тогда 
		Если Объект.ТочкаМаршрута = Перечисления.ЗаявкиАдминистраторуТочкиМаршрута.Действие3 Тогда
			//Элементы.СрокОкончания.Доступность = Истина;	
			Заголовок1 = ?(ЭтоИсполнитель, "Принято", "");
			Заголовок3 = ?(ЭтоИсполнитель, "Вернуть на доработку", "Отменить");
			ИмяКоманды1 = "ЗаявкаОплачена";
			ИмяКоманды3 = "НаДоработку";
		ИначеЕсли Объект.ТочкаМаршрута = Перечисления.ЗаявкиАдминистраторуТочкиМаршрута.Действие4 Тогда
			//Элементы.СрокОкончания.Доступность = Истина;	
			Заголовок1 = ?(ЭтоИсполнитель, "Выполнено", "");
			Заголовок3 = ?(ЭтоИсполнитель, "", "Отменить");
			ИмяКоманды1 = "ЗаявкаОплачена";
			ИмяКоманды3 = "НаДоработку";
		ИначеЕсли Объект.ТочкаМаршрута = Перечисления.ЗаявкиАдминистраторуТочкиМаршрута.Действие6 Тогда
			//Элементы.СрокОкончания.Доступность = Истина;	
			Заголовок1 = ?(ЭтоИсполнитель, "Проверено", "");
			Заголовок3 = ?(ЭтоИсполнитель, "Вернуть на доработку", "Отменить");
			ИмяКоманды1 = "ЗаявкаОплачена";
			ИмяКоманды3 = "НаДоработку";
		ИначеЕсли Объект.ТочкаМаршрута = Перечисления.ЗаявкиАдминистраторуТочкиМаршрута.Действие5 Тогда
			//Элементы.СрокОкончания.Доступность = Истина;	
			Заголовок1 = ?(ЭтоИсполнитель, "Ознакомиться", "");
			Заголовок3 = ?(ЭтоИсполнитель, "Вернуть на доработку", "Отменить");
			ИмяКоманды1 = "ЗаявкаОплачена";
			ИмяКоманды3 = "НаДоработку";
		ИначеЕсли Объект.ТочкаМаршрута = Перечисления.ЗаявкиАдминистраторуТочкиМаршрута.Действие1 Тогда //наДоработке
			Заголовок1 = ?(ЭтоИсполнитель, "Отправить повторно", "");
			Заголовок3 = ?(ЭтоИсполнитель, "Завершить", "");
			ИмяКоманды1 = "ЗаявкаОплачена";
			ИмяКоманды3 = "Завершить";
			ВидимостьРазрешенияРедактирования = Истина;
		ИначеЕсли Объект.ТочкаМаршрута = Перечисления.ЗаявкиАдминистраторуТочкиМаршрута.Действие2 Тогда //согласование
			Заголовок1 = ?(ЭтоИсполнитель, "Согласовано", "");
			Заголовок3 = ?(ЭтоИсполнитель, "Вернуть на доработку", "");
			ИмяКоманды1 = "ЗаявкаОплачена";
			ИмяКоманды3 = "НаДоработку";
		КонецЕсли;
	КонецЕсли;
	
	Если Не СвойстваРолиИсполнителя = Неопределено Тогда
		Если ЗначениеЗаполнено(СвойстваРолиИсполнителя.ИмяКомандыУтвердительно) Тогда
			Заголовок1 = ?(ЭтоИсполнитель, СвойстваРолиИсполнителя.ИмяКомандыУтвердительно, "");
		КонецЕсли;
		Если ЗначениеЗаполнено(СвойстваРолиИсполнителя.ИмяКомандыСЗамечаниями) Тогда
			Заголовок2 = ?(ЭтоИсполнитель, СвойстваРолиИсполнителя.ИмяКомандыСЗамечаниями, "");
		КонецЕсли;
		Если ЗначениеЗаполнено(СвойстваРолиИсполнителя.ИмяКомандыОтрицательно) Тогда
			Заголовок3 = ?(ЭтоИсполнитель, СвойстваРолиИсполнителя.ИмяКомандыОтрицательно, "Отменить");
		КонецЕсли;
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьРедактирование(Команда)
	ПоказатьВопрос(Новый ОписаниеОповещения("РазрешитьРедактированиеЗавершение", ЭтотОбъект), "Разрешение редактирования автоматически отменяет все согласования.
	|Вы уверены, что хотите редактировать?", РежимДиалогаВопрос.ДаНет); 
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьРедактированиеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да  Тогда
		Элементы.РазрещитьРедактировать.Видимость = Ложь;
		ОтменитьСогласования();
		
		ЗаполнитьСложныйМаршрут();
		Коллекция = МаршрутДерево.ПолучитьЭлементы();
		
		Для каждого ТекЭлемент Из Коллекция Цикл
			сабБПКлиентСервер.РазвернутьГруппировкиДерева(Элементы, МаршрутДерево);	
		КонецЦикла;
		
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьСогласования()
	НачатьТранзакцию();
	Если ЗначениеЗаполнено(Объект.БизнесПроцесс) Тогда
		
		ТекБП = Объект.БизнесПроцесс.ПолучитьОбъект();
		
		Для каждого ТекСтрока Из ТекБП.ДопСогласование Цикл
			ТекСтрока.Пройден = 0;	
			ТекСтрока.Согласовано = 0;
		КонецЦикла;
		
		Для каждого ТекСтрока Из ТекБП.ДопИсполнение Цикл
			ТекСтрока.Пройдено = 0;	
			ТекСтрока.Исполнено = 0;
		КонецЦикла;
		
		ТекБП.ОснованиеЗаблокирован = Ложь;
		
		ТекБП.Записать();
		ТекЗаявка = Объект.Заявка.ПолучитьОбъект();
		ТекЗаявка.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;
	ЗафиксироватьТранзакцию();	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДвиженияДС(Команда)
	Если ТипЗнч(Объект.Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") Тогда
		ОбработкаПлатежек = ПолучитьФорму("Обработка.Д_ЗаявкиВПлатежки.Форма", Новый Структура("Заявка", Объект.Заявка),,Истина);
		ОбработкаПлатежек.Заявка = Объект.Заявка;
		//ОбработкаПлатежек.НомерСправочники = Объект.Номер;
		ОбработкаПлатежек.Открыть();
	ИначеЕсли ТипЗнч(Объект.Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаФинансирование") Тогда
		РеквизитыЗаявки = БюджетныйНаСервере.ВернутьРеквизиты(Объект.Заявка, "ТипИсточника");
		Если РеквизитыЗаявки.ТипИсточника = ПредопределенноеЗначение("Перечисление.Д_ИсточникиСредств.БезНал") Тогда
			ОбработкаПлатежек = ПолучитьФорму("Документ.ПлатежноеПоручение.ФормаОбъекта", Новый Структура("Основание", Объект.Заявка));
			ОбработкаПлатежек.Открыть();
		Иначе
			ОбработкаПлатежек = ПолучитьФорму("Документ.УЧ_ДвижениеДС.ФормаОбъекта", Новый Структура("Основание", Объект.Заявка));
			ОбработкаПлатежек.Открыть();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИндивидуальнаяКоманда(Команда)
	БюджетныйНаКлиенте.УниверсальноеВыполнениеКоманды(Объект.Заявка, СписокКоманд[Число(Прав(Команда.Имя, 1))].Значение);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "Пересчитать" Тогда
		ЗаполнитьПодчиненными(ТипЗаявки);
	ИначеЕсли ИмяСобытия = "ЗакрытьФормуСправочники" Тогда
		Закрыть();
	ИначеЕсли ИмяСобытия = "ОбновитьМаршрут" Тогда
		ПриСозданииНаСервере(Ложь, Истина);	
		ПриОткрытии(Ложь);
	ИначеЕсли ИмяСобытия = "сабЗакрытьСправочникиВыполненияЗаявок" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			Если НЕ Параметр.Заявки.Найти(Объект.Заявка) = Неопределено Тогда
				Закрыть();
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ОбновитьПечатнуюФорму" Тогда
		ПриСозданииНаСервере(Ложь, Истина);
		ПриОткрытии(Ложь);
	ИначеЕсли ИмяСобытия = "ЗакрытьЗадачу" И Параметр = Объект.Ссылка Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабДокПредварительныйПросмотрОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	ТекФорма = ПолучитьФорму("ОбщаяФорма.ФормаПечатиДокумента");
	ТекФорма.РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомментарий(Команда)
	Если Комментарий.Элементы.Количество() Тогда
		БПСервер.ДобавитьКомментарийСервер(Комментарий, Объект.Заявка);
		Комментарий = "";
		ПриОткрытии(Ложь);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПоТипамДокументов()
	
	Если ТипЗнч(Объект.Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") ИЛИ ТипЗнч(Объект.Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаФинансирование") Тогда
		Если Объект.ТочкаМаршрута = Перечисления.Согласование1ТочкиМаршрута.Действие5
			Или Объект.ТочкаМаршрута = Перечисления.Согласование1ТочкиМаршрута.Действие2
			Или Объект.ТочкаМаршрута = Перечисления.Согласование1ТочкиМаршрута.Действие3 
			Или Объект.ТочкаМаршрута = Перечисления.Согласование1ТочкиМаршрута.Действие4
			Или Объект.ТочкаМаршрута = Перечисления.СогласованиеОбщееТочкиМаршрута.Действие2
			Тогда
			//Объект = БюджетныйНаСервере.ВернутьРеквизиты(Задача, "Автор, Ссылка, ТочкаМаршрута, СрокВыполнения, БизнесПроцесс.ИсторияСогласования, БизнесПроцесс.Комментарии, Заявка, Описание, БизнесПроцесс, БизнесПроцесс.СтандартныйМаршрут, Предприятие");
			Элементы.Группа28.Видимость = Истина;
			ЗаполнитьКонтроль();
		КонецЕсли;
	Иначе
		Элементы.Группа28.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#Область Контроль
&НаСервере
Процедура ЗаполнитьКонтроль()
	Контроль.ПолучитьЭлементы().Очистить();
	
	Если ТипЗнч(Объект.Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") ИЛИ ТипЗнч(Объект.Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаФинансирование") Тогда
		//Элементы.СтраницаКонтроля.Доступность = Истина;
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатПоЛимитам = Документы.Д_ЗаявкаНаОплату.РасчитатьЛимиты(Объект.Заявка);
		Превышение = Ложь;
		ВыборкаПоЛимитам = РезультатПоЛимитам.Выбрать();
		Пока ВыборкаПоЛимитам.Следующий() Цикл
			Если ВыборкаПоЛимитам.ОсталосьПоСтатье < 0 Тогда 
				Превышение = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;
		УстановитьПривилегированныйРежим(Ложь);
		
		КоличествоОшибок = 0;
		ПерваяСтрока = Контроль.ПолучитьЭлементы().Добавить();
		ПерваяСтрока.Показатель = "Общий результат проверки";
		
		//строка контроля бюджета
		НоваяСтрока = ПерваяСтрока.ПолучитьЭлементы().Добавить();
		НоваяСтрока.Показатель = "Проверка соответствия бюджету";
		НоваяСтрока.Проверка = Превышение;
		НоваяСтрока.Уровень = 1;
		КоличествоОшибок = КоличествоОшибок + ?(НоваяСтрока.Проверка, 1, 0);
		
		////проверка маршрута
		//НоваяСтрока = ПерваяСтрока.ПолучитьЭлементы().Добавить();
		//НоваяСтрока.Показатель = "Автомаршрут";
		//НоваяСтрока.Проверка = НЕ Объект.БизнесПроцессСтандартныйМаршрут;
		//НоваяСтрока.Уровень = 1;
		//КоличествоОшибок = КоличествоОшибок + ?(НоваяСтрока.Проверка, 1, 0);
		
		//проверка верхов
		//ТЧ = БюджетныйНаСервере.ПроверкаНаличияВерхов(Объект);
		//Если ТЧ.Количество() Тогда
		//	НоваяСтрока = ПерваяСтрока.ПолучитьЭлементы().Добавить();
		//	НоваяСтрока.Показатель = "Наличие в реестре верхов";
		//	НоваяСтрока.Проверка = Истина;
		//	
		//	Для каждого ТекСтрока Из ТЧ Цикл
		//		НоваяСтрока2 = НоваяСтрока.ПолучитьЭлементы().Добавить();
		//		ЗаполнитьЗначенияСвойств(НоваяСтрока2, ТекСтрока);
		//		Если ТекСтрока.Показатель = "Верх" И ЗначениеЗаполнено(ТекСтрока.Значение) Тогда
		//			НоваяСтрока.Проверка = Ложь;
		//		КонецЕсли;
		//		НоваяСтрока2.Уровень = 2;
		//	КонецЦикла;
		//	НоваяСтрока.Уровень = 1;
		//	КоличествоОшибок = КоличествоОшибок + ?(НоваяСтрока.Проверка, 1, 0);
		//	
		//КонецЕсли;
		
		
		//ПерваяСтрока.Значение = КоличествоОшибок;
		ПерваяСтрока.Проверка = КоличествоОшибок;
		КоличествоОшибокСтрока = ?(КоличествоОшибок, "Ошибок: " + Строка(КоличествоОшибок), "Ошибок: нет");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКонтроль(Команда)
	ЗаполнитьКонтроль();
КонецПроцедуры

#КонецОбласти 

&НаКлиенте
Процедура ОткрытьПлатежныйКалендарь(Команда)
	ОткрытьФорму("Обработка.сабПлатежныйКалендарь.Форма");
КонецПроцедуры

&НаКлиенте
Процедура ПодборДоговора(Команда)
	
	ПараметрыФормы = Новый Структура("РежимВыбора",Истина);
	ОбработкаВыбора = Новый ОписаниеОповещения("ПриЗакрытииФормыВыбораДоговора", ЭтаФорма, "Подбор");
	
	НастройкиКомпоновки = Новый НастройкиКомпоновкиДанных;
	ГруппаОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Владелец");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ПравоеЗначение = Контрагент;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Организация");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ПравоеЗначение = Организация;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФиксированныеНастройки", НастройкиКомпоновки);
	ПараметрыФормы.Вставить("РежимВыбора",Истина);
	
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора",ПараметрыФормы,ЭтаФорма,,,,ОбработкаВыбора);
	
КонецПроцедуры   

&НаКлиенте
Процедура ПриЗакрытииФормыВыбораДоговора(Значение, ДопПараметры) Экспорт
	
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПодчиненныеДокументы.Количество() Тогда
		ПодчиненныеДокументы[0].Документ = Значение;
	Иначе
		НоваяСтрокаПД = ПодчиненныеДокументы.Добавить();
		НоваяСтрокаПД.Документ = Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КорректироватьВПДФНаСервере(ЭтоОбратнаяКонвертация)
	
	Если ЭтоОбратнаяКонвертация Тогда
		МассивФайлов = Новый Массив; 
		Если ЗначениеЗаполнено(Объект.Заявка) Тогда 
		//Если ЗначениеЗаполнено(Объект.РольИсполнителя) И ТипЗнч(Объект.РольИсполнителя) = Тип("СправочникСсылка.РолиИсполнителей") И
		//	ЗначениеЗаполнено(Объект.Заявка) Тогда
		//	Если Объект.РольИсполнителя.Вид = "Конвертирование" Тогда 
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ВЫРАЗИТЬ(ПрикрепленныеОбъекты.Объект КАК Справочник.Файлы).Ссылка КАК СсылкаТекстовыйФайл,
				|	ВЫРАЗИТЬ(ПрикрепленныеОбъекты.Объект КАК Справочник.Файлы).Наименование КАК Наименование,
				|	ПрикрепленныеОбъекты1.Объект КАК СсылкаPDF
				|ИЗ
				|	РегистрСведений.ПрикрепленныеОбъекты КАК ПрикрепленныеОбъекты
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрикрепленныеОбъекты КАК ПрикрепленныеОбъекты1
				|		ПО (ВЫРАЗИТЬ(ПрикрепленныеОбъекты.Объект КАК Справочник.Файлы).Наименование = ВЫРАЗИТЬ(ПрикрепленныеОбъекты1.Объект КАК Справочник.Файлы).Наименование)
				|			И (ВЫРАЗИТЬ(ПрикрепленныеОбъекты.Объект КАК Справочник.Файлы).Служебный)
				|			И (ВЫРАЗИТЬ(ПрикрепленныеОбъекты1.Объект КАК Справочник.Файлы).Расширение = ""pdf"")
				|			И (ВЫРАЗИТЬ(ПрикрепленныеОбъекты.Объект КАК Справочник.Файлы).Расширение = ""docx""
				|				ИЛИ ВЫРАЗИТЬ(ПрикрепленныеОбъекты.Объект КАК Справочник.Файлы).Расширение = ""doc""
				|				ИЛИ ВЫРАЗИТЬ(ПрикрепленныеОбъекты.Объект КАК Справочник.Файлы).Расширение = ""rtf"")
				|ГДЕ
				|	ПрикрепленныеОбъекты.Владелец = &Владелец
				|	И ПрикрепленныеОбъекты1.Владелец = &Владелец";
				Запрос.УстановитьПараметр("Владелец",Объект.Заявка);
				РезультатЗапроса = Запрос.Выполнить();
				
				Если НЕ РезультатЗапроса.Пустой() Тогда
					Элементы.КонвертироватьВПДФ.Видимость = Истина;
					Элементы.КонвертироватьВПДФ.Доступность = Истина;
					Выборка = РезультатЗапроса.Выбрать();
					Пока Выборка.Следующий() Цикл
						СтруктураДанныхВыборки = Новый Структура("СсылкаТекстовыйФайл, СсылкаPDF",Выборка.СсылкаТекстовыйФайл, Выборка.СсылкаPDF);
						МассивФайлов.Добавить(СтруктураДанныхВыборки);
					КонецЦикла;
				Иначе
					Элементы.КонвертироватьВПДФ.Доступность = Ложь;
				КонецЕсли; 
			//КонецЕсли;
		КонецЕсли;
		Возврат МассивФайлов;
	Иначе
		МассивФайлов = Новый Массив;
		Если ЗначениеЗаполнено(Объект.РольИсполнителя) И ТипЗнч(Объект.РольИсполнителя) = Тип("СправочникСсылка.РолиИсполнителей") И
			ЗначениеЗаполнено(Объект.Заявка) Тогда
			Если Объект.РольИсполнителя.Вид = "Конвертирование" Тогда 
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ВЫРАЗИТЬ(ПрикрепленныеОбъекты.Объект КАК Справочник.Файлы).Ссылка КАК Ссылка,
				|	ВЫРАЗИТЬ(ПрикрепленныеОбъекты.Объект КАК Справочник.Файлы).Наименование КАК Наименование,
				|	ВЫРАЗИТЬ(ПрикрепленныеОбъекты.Объект КАК Справочник.Файлы).Расширение КАК Расширение
				|ИЗ
				|	РегистрСведений.ПрикрепленныеОбъекты КАК ПрикрепленныеОбъекты
				|ГДЕ
				|	(ВЫРАЗИТЬ(ПрикрепленныеОбъекты.Объект КАК Справочник.Файлы).Расширение = ""doc""
				|			ИЛИ ВЫРАЗИТЬ(ПрикрепленныеОбъекты.Объект КАК Справочник.Файлы).Расширение = ""docx""
				|			ИЛИ ВЫРАЗИТЬ(ПрикрепленныеОбъекты.Объект КАК Справочник.Файлы).Расширение = ""rtf"")
				|			И НЕ ВЫРАЗИТЬ(ПрикрепленныеОбъекты.Объект КАК Справочник.Файлы).Служебный
				|	И ПрикрепленныеОбъекты.Владелец = &Владелец";
				Запрос.УстановитьПараметр("Владелец",Объект.Заявка);
				РезультатЗапроса = Запрос.Выполнить();
				Если НЕ РезультатЗапроса.Пустой() Тогда
					Элементы.КонвертироватьВПДФ.Видимость = Истина;
					Элементы.КонвертироватьВПДФ.Доступность = Истина;
					Выборка = РезультатЗапроса.Выбрать();
					Пока Выборка.Следующий() Цикл
						СтруктураДанныхВыборки = Новый Структура("Ссылка, Наименование, Расширение",Выборка.Ссылка, Выборка.Наименование, Выборка.Расширение);
						СтруктураДанныхВыборки.Вставить("ДД",РаботаСФайлами.ДвоичныеДанныеФайла(Выборка.Ссылка));
						МассивФайлов.Добавить(СтруктураДанныхВыборки);
					КонецЦикла;
				Иначе
					Элементы.КонвертироватьВПДФ.Доступность = Ложь;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
		Возврат МассивФайлов;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура КорректироватьВПДФ(Команда) 
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьКорректировкуПослеОтвета",ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения,"Выполнить конвертирование файлов",РежимДиалогаВопрос.ДаНет); 
	
КонецПроцедуры  

&НаКлиенте
Процедура ВыполнитьКорректировкуПослеОтвета(Результат,ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ТипЗнч(ДопПараметры) = Тип("Структура") И ДопПараметры.Свойство("КонвертированиеИсполнителя") Тогда
			ЭтоОбратнаяКонвертация = Истина;
		ИначеЕсли Элементы.КонвертироватьВПДФ.Заголовок = "Конвертировать в текстовый формат" Тогда 
			ЭтоОбратнаяКонвертация = Истина;
		Иначе
			ЭтоОбратнаяКонвертация = Ложь;
		КонецЕсли;
		МассивФайлов = КорректироватьВПДФНаСервере(ЭтоОбратнаяКонвертация); 
		Если ЭтоОбратнаяКонвертация Тогда
			ВернутьТекстовыеФайла(МассивФайлов);	
		Иначе 
			Для Каждого СтруктураДанныхВыборки Из МассивФайлов Цикл
				FileDOC = КаталогВременныхФайлов() + "\" + СтруктураДанныхВыборки.Наименование + "." + СтруктураДанныхВыборки.Расширение;
				СтруктураДанныхВыборки.ДД.Записать(FileDOC);
				Попытка
					FilePDF = КаталогВременныхФайлов() + "\" + СтруктураДанныхВыборки.Наименование + ".pdf";
					MSWordApp = Новый COMОбъект("Word.Application");
					MSWordApp.Visible = False;                     
					MSWordApp.Documents.Open(FileDOC);
					WordDocument = MSWordApp.Application.Documents(1);
					WordDocument.Activate();
					WordDocument.SaveAs(FilePDF, 17);
					MSWordApp.Documents.close();
					MSWordApp.Application.Quit();
					УдалитьФайлы(FileDOC);
				Исключение	
					Сообщить("Не удаслось сконвертировать файлы. " + ОписаниеОшибки() + ". Возможно не установлен пакет microsoft office. На данный момент согласование возможно без конвертации. Обратитесь к системному администратору.");
					Элементы.КонвертироватьВПДФ.Доступность = Ложь;
					Возврат;
				КонецПопытки;	
				СоздатьPDFФайл(СтруктураДанныхВыборки.Ссылка, Новый ДвоичныеДанные(FilePDF));
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ВернутьТекстовыеФайла(МассивФайлов)  
	
	УстановитьПривилегированныйРежим(Истина); 
	Если МассивФайлов.Количество() > 0 Тогда
	Для каждого СтркутураФаловВМассиве Из МассивФайлов Цикл
		НаборЗаписей = РегистрыСведений.ПрикрепленныеОбъекты.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Владелец.Установить(Объект.Заявка);
		НаборЗаписей.Прочитать(); 
		ТекстовыйФайлОбъект = СтркутураФаловВМассиве.СсылкаТекстовыйФайл.ПолучитьОбъект();
		ТекстовыйФайлОбъект.Служебный = Ложь; 
		ТекстовыйФайлОбъект.Записать();
		ФайлPDF = СтркутураФаловВМассиве.СсылкаPDF;
		Для Каждого Запись Из НаборЗаписей Цикл
			Если Запись.Объект = ФайлPDF Тогда 
				ИсхФайлОбъект = ФайлPDF.ПолучитьОбъект();
				НаборЗаписей.Удалить(Запись);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	НаборЗаписей.Записать(); 
	Элементы.КонвертироватьВПДФ.Доступность = Ложь; 
	Если Элементы.КонвертироватьВПДФ.Заголовок = "Конвертировать в текстовый формат" Тогда
		Сообщить("Файлы успешно сконвертированы");    
	КонецЕсли;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь); 
	
КонецПроцедуры 


&НаСервере
Процедура СоздатьPDFФайл(ИсхФайл, ДвоичныеДанныеPDF);
	
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		ПутьКФайлуНаДиске = КаталогВременныхФайлов() + "\" + ИсхФайл.Наименование + ".pdf"; 
		ДвоичныеДанныеPDF.Записать(ПутьКФайлуНаДиске);
		ВладелецФайлов = ИсхФайл.ВладелецФайла;
		Результат = РаботаСФайлами.ДобавитьФайлСДиска(ВладелецФайлов, ПутьКФайлуНаДиске); 
		УдалитьФайлы(ПутьКФайлуНаДиске);
		НаборЗаписей = РегистрыСведений.ПрикрепленныеОбъекты.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Владелец.Установить(Объект.Заявка);
		НаборЗаписей.Прочитать();
		Для Каждого Запись Из НаборЗаписей Цикл
			Если Запись.Объект = ИсхФайл Тогда 
				ИсхФайлОбъект = ИсхФайл.ПолучитьОбъект(); 
				ИсхФайлОбъект.Служебный  = Истина; 
				ИсхФайлОбъект.Записать();
				НоваяЗапись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись,Запись);
				НоваяЗапись.Объект = Результат;
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Записать();
		Сообщить("Файлы успешно сконвертированы");
		Элементы.КонвертироватьВПДФ.Доступность = Ложь;
	Исключение
		Сообщить("Не удалось сконвертировать файлы. " + ОписаниеОшибки() + ". На данный момент согласование возможно без конвертации");
		Элементы.КонвертироватьВПДФ.Доступность = Ложь;
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

