
&НаСервере
Процедура УУ_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	
	Группа = Элементы.Добавить(
	"УпрГруппа",
	Тип("ГруппаФормы"),
	ЭтаФорма);
	
	
	
	Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Группа.Поведение  = ПоведениеОбычнойГруппы.Свертываемая;
	Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Группа.ОтображениеУправления = ОтображениеУправленияОбычнойГруппы.Картинка;
	Группа.Отображение = ОтображениеОбычнойГруппы.Нет; 
	
	ГруппаПероваяСтрока = Элементы.Добавить(
	"УпрГруппаПерваяСтрока",
	Тип("ГруппаФормы"),
	Группа);
	
	ГруппаПероваяСтрока.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаПероваяСтрока.Поведение  = ПоведениеОбычнойГруппы.Обычное;
	ГруппаПероваяСтрока.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаПероваяСтрока.Отображение = ОтображениеОбычнойГруппы.Нет; 
	
	ГруппаВтораяСтрокаСтрока = Элементы.Добавить(
	"УпрГруппаВтораяСтрока",
	Тип("ГруппаФормы"),
	Группа);
	
	ГруппаВтораяСтрокаСтрока.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаВтораяСтрокаСтрока.Поведение  = ПоведениеОбычнойГруппы.Обычное;
	ГруппаВтораяСтрокаСтрока.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаВтораяСтрокаСтрока.Отображение = ОтображениеОбычнойГруппы.Нет;
	
	
	
	Группа.Заголовок = "Реквизиты (Управленка):";
	
	ПолеВвода = Элементы.Добавить("Вес", Тип("ПолеФормы"), ГруппаПероваяСтрока);
	ПолеВвода.Вид = ВидПоляФормы.ПолеВвода;
	ПолеВвода.ПутьКДанным = "Объект.Вес";
	
	ПолеВвода = Элементы.Добавить("ВесНетто", Тип("ПолеФормы"), ГруппаПероваяСтрока);
	ПолеВвода.Вид = ВидПоляФормы.ПолеВвода;
	ПолеВвода.ПутьКДанным = "Объект.ВесНетто";
	
	ПолеВвода = Элементы.Добавить("Объем", Тип("ПолеФормы"), ГруппаПероваяСтрока);
	ПолеВвода.Вид = ВидПоляФормы.ПолеВвода;
	ПолеВвода.ПутьКДанным = "Объект.Объем";
	
	ПолеВвода = Элементы.Добавить("Кратность", Тип("ПолеФормы"), ГруппаПероваяСтрока);
	ПолеВвода.Вид = ВидПоляФормы.ПолеВвода;
	ПолеВвода.ПутьКДанным = "Объект.Кратность";
	
	ПолеВвода = Элементы.Добавить("МинимальнаяПартия", Тип("ПолеФормы"), ГруппаПероваяСтрока);
	ПолеВвода.Вид = ВидПоляФормы.ПолеВвода;
	ПолеВвода.ПутьКДанным = "Объект.МинимальнаяПартия";
	
	ПолеВвода = Элементы.Добавить("СрокГодности", Тип("ПолеФормы"), ГруппаПероваяСтрока);
	ПолеВвода.Вид = ВидПоляФормы.ПолеВвода;
	ПолеВвода.ПутьКДанным = "Объект.СрокГодности";
	
	ПолеВвода = Элементы.Добавить("Весовой", Тип("ПолеФормы"), ГруппаПероваяСтрока);
	ПолеВвода.Вид = ВидПоляФормы.ПолеФлажка;
	ПолеВвода.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	ПолеВвода.ПутьКДанным = "Объект.Весовой"; 
	
	ПолеВвода = Элементы.Добавить("ВыгружатьВСмарт", Тип("ПолеФормы"), ГруппаПероваяСтрока);
	ПолеВвода.Вид = ВидПоляФормы.ПолеФлажка;
	ПолеВвода.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	ПолеВвода.ПутьКДанным = "Объект.ВыгружатьВСмарт";
	
	ПолеВвода = Элементы.Добавить("ХранитсяПриОтрицательнойТемпературе", Тип("ПолеФормы"), ГруппаВтораяСтрокаСтрока);
	ПолеВвода.Вид = ВидПоляФормы.ПолеФлажка;
	ПолеВвода.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	ПолеВвода.ПутьКДанным = "Объект.ХранитсяПриОтрицательнойТемпературе";   
	
	ВключенаНастройкаДляФормы2 = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("КонтрольНоменклатурыДляФормы2ВЗаказеКлиента");
	Если ВключенаНастройкаДляФормы2 Тогда
		ПолеВвода = Элементы.Добавить("Форма2", Тип("ПолеФормы"), ГруппаВтораяСтрокаСтрока);
		ПолеВвода.Вид = ВидПоляФормы.ПолеФлажка;
		ПолеВвода.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		ПолеВвода.ПутьКДанным = "Объект.Форма2"; 
	КонецЕсли;
	
	ДобавитьПросмотрИзображений();
	
КонецПроцедуры

&НаКлиенте
Процедура УУ_ПриОткрытииПосле(Отказ)
	
	ОграничениеПрав = Бюджетныйнасервере.СправочникНайтиПоНаименованию("сабМониторВнедрения", "ОграничениеПравРедактированияКлючевыхСправочников", Истина);
	
	Если ЗначениеЗаполнено(ОграничениеПрав) И БюджетныйНаСервере.ВернутьРеквизит(ОграничениеПрав, "Значение") = "Да" Тогда
		
		Если Не БюджетныйНаСервере.РольДоступнаСервер("АдминистраторСистемы") Тогда
			ЭтаФорма.ТолькоПросмотр = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УУ_ПередЗаписьюПеред(Отказ, ПараметрыЗаписи)
	
	КонтролироватьУникальностьАртикулов = НайтиКонтролироватьУникальностьАртикулов();
	Если КонтролироватьУникальностьАртикулов = Неопределено ИЛИ КонтролироватьУникальностьАртикулов = ЛОЖЬ Тогда
	Иначе
		Если СокрЛП(Объект.Артикул) <> "" Тогда
			
			ЕстьДубль = ПоискАртикула(СокрЛП(Объект.Артикул));
			
			Если ЕстьДубль Тогда
				Оповещение = Новый ОписаниеОповещения();
				ПоказатьПредупреждение(Оповещение, "Указанный артикул уже используется. Введите другой.");
				Отказ = ЕстьДубль;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиКонтролироватьУникальностьАртикулов()
	Возврат Справочники.сабМониторВнедрения.НайтиПоНаименованию("КонтролироватьУникальностьАртикулов", Истина).Значение;
КонецФункции

&НаСервере
Функция ПоискАртикула(Артикул)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.Артикул КАК Артикул
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	СОКРЛП(Номенклатура.Артикул) = &Артикул
	|	И Номенклатура.Ссылка <> &ЭтаСсылка";
	
	Запрос.УстановитьПараметр("Артикул", Артикул);
	Запрос.УстановитьПараметр("ЭтаСсылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат Истина;			
	КонецЦикла;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

// Процедура добавления изображения для номенклатуры
//
&НаКлиенте
Процедура ДобавитьИзображениеНаКлиенте()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеНаКлиентеЗавершение", ЭтотОбъект), ТекстВопроса,
		РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ДобавитьИзображениеНаКлиентеФрагмент();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Записать();
	Иначе
		Возврат;
	КонецЕсли;
	
	ДобавитьИзображениеНаКлиентеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеФрагмент()
	
	Перем ИдентификаторФайла, Фильтр;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ИдентификаторФайла = Новый УникальныйИдентификатор;
		
		Фильтр = сабРаботаСФайламиКлиентСервер.ФильтрФайловИзображений();
		
		РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла, Фильтр);
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьИзображениеНаКлиенте()

// Процедура - обработчик события Нажатие поля АдресКартинки.
//
&НаКлиенте
Процедура Подключаемый_АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//Если НЕ РазрешеноРедактированиеНоменклатуры Тогда
	//	Возврат;
	//КонецЕсли;
	
	Если ТекущееИзображение >= 0 Тогда
		ПросмотретьПрисоединенныйФайл();
	Иначе
		ЗаблокироватьДанныеФормыДляРедактирования();
		ДобавитьИзображениеНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры // АдресКартинкиНажатие()

// Процедура просмотра картинки
//
&НаКлиенте
Процедура ПросмотретьПрисоединенныйФайл()
	
	ОчиститьСообщения();
	
	Если ТекущееИзображение < 0 Тогда
		Возврат
	КонецЕсли;
	
	Файл = Изображения[ТекущееИзображение].Ссылка;
	ДанныеФайла = ПолучитьДанныеФайла(Файл, УникальныйИдентификатор);
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
	
КонецПроцедуры // ПросмотретьПрисоединенныйФайл()

// Выводит на форму картинки из присоединенных файлов.
//
&НаСервере
Процедура ДобавитьПросмотрИзображений()
	
	Изображения.Очистить();
	
	// Присоединенный файл записанный в Объект.ФайлКартинки показываем первым.
	Если НЕ Объект.ФайлКартинки.Пустая() И НЕ Объект.ФайлКартинки.ПометкаУдаления Тогда
		ДвоичныеДанныеКартинки = ПолучитьДанныеФайла(Объект.ФайлКартинки, УникальныйИдентификатор).СсылкаНаДвоичныеДанныеФайла;
		Если ДвоичныеДанныеКартинки <> Неопределено Тогда
			НоваяСтрока = Изображения.Вставить(0);
			НоваяСтрока.Ссылка = Объект.ФайлКартинки;
			НоваяСтрока.Адрес = ДвоичныеДанныеКартинки;
		КонецЕсли;
	КонецЕсли;
	
	// После присоединенного файла из Объект.ФайлКартинки показываем все остальные подходящие.
	Файлы = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(Объект.Ссылка, Файлы);
	Для каждого Файл Из Файлы Цикл
		
		Если НЕ ОтображатьФайлНаФорме(Файл)
			ИЛИ Файл = Объект.ФайлКартинки Тогда
			Продолжить;
		КонецЕсли;
		
		Если Файл.ПометкаУдаления Тогда
			Продолжить;			
		КонецЕсли;
		ДвоичныеДанныеКартинки = ПолучитьДанныеФайла(Файл, УникальныйИдентификатор).СсылкаНаДвоичныеДанныеФайла;
		Если ДвоичныеДанныеКартинки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Изображения.Добавить();
		НоваяСтрока.Ссылка = Файл;
		НоваяСтрока.Адрес = ДвоичныеДанныеКартинки;
	КонецЦикла;
	
	КоличествоИзображений = Элементы.Изображение.ПодчиненныеЭлементы.Количество();
	ОтображаемоеИзображение = Элементы.Изображение.ПодчиненныеЭлементы[КоличествоИзображений - 1];
	ОтображаемоеИзображение.ТекстНевыбраннойКартинки = Элементы.АдресКартинки.ТекстНевыбраннойКартинки;
	Если Изображения.Количество() = 0 Тогда
		ТекущееИзображение = -1;
		ОтображаемоеИзображение.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная);
	Иначе
		ТекущееИзображение = 0;
		ОтображаемоеИзображение.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	КонецЕсли;
	
	УстановитьПрокруткуИзображения();
	ИзображениеВидимостьКоманднойПанели();
	
КонецПроцедуры

// Функция - Ссылка на двоичные данные файла.
//
// Параметры:
//  ПрисоединенныйФайл - СправочникСсылка - ссылка на справочник с именем "*ПрисоединенныеФайлы".
//  ИдентификаторФормы - УникальныйИдентификатор - идентификатор формы, который
//                       используется при получении двоичных данных файла.
// 
// Возвращаемое значение:
//   Строка, Неопределено - адрес во временном хранилище или Неопределено, если не удалось получить данные.
//
Функция СсылкаНаДвоичныеДанныеФайла(ПрисоединенныйФайл, ИдентификаторФормы) Экспорт
	
	Попытка
		
		ДополнительныеПараметры = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
		ДополнительныеПараметры.ИдентификаторФормы = ИдентификаторФормы;
		
		Возврат РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл, ДополнительныеПараметры).СсылкаНаДвоичныеДанныеФайла;
		
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

// Функция возвращает данные файла
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеФайла(ФайлКартинки, УникальныйИдентификатор)
	
	ДополнительныеПараметры = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
	ДополнительныеПараметры.ИдентификаторФормы = УникальныйИдентификатор;
	
	Возврат РаботаСФайлами.ДанныеФайла(ФайлКартинки, ДополнительныеПараметры);
	
КонецФункции // ПолучитьДанныеФайла()

&НаКлиенте
Процедура УдалитьИзображение(Команда)
	
	Если ТекущееИзображение < 0 Тогда
		Возврат
	КонецЕсли;
	
	ПрисоединенныйФайл = Изображения[ТекущееИзображение].Ссылка;
	Если НЕ ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
		Возврат;
	КонецЕсли;
	
	ПометитьНаУдалениеПрисоединенныйФайл(ПрисоединенныйФайл);
	
	ОповеститьОбИзменении(ПрисоединенныйФайл);
	Оповестить("Запись_Файл", Новый Структура, ПрисоединенныйФайл);
	
КонецПроцедуры

&НаСервере
Процедура ПометитьНаУдалениеПрисоединенныйФайл(ПрисоединенныйФайл)
	
	Если НЕ ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
		Возврат;
	КонецЕсли;
	
	ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
	ПрисоединенныйФайлОбъект.УстановитьПометкуУдаления(Истина);
	ПрисоединенныйФайлОбъект.Записать();
	
	
	
КонецПроцедуры

// Устанавливает видимость и доступность кнопок перелистывания изображения.
//
&НаСервере
Процедура УстановитьПрокруткуИзображения()
	
	Если Изображения.Количество() <= 1 Тогда
		Элементы.ДекорацияПрокруткаИзображенийВлево.Видимость = Ложь;
		Элементы.ДекорацияПрокруткаИзображенийВправо.Видимость = Ложь;
		Элементы.ДекорацияПрокруткаИзображенийВлевоОтступ.Видимость = Истина;
		Элементы.ДекорацияПрокруткаИзображенийВправоОтступ.Видимость = Истина;
		Возврат;
	Иначе
		Элементы.ДекорацияПрокруткаИзображенийВлево.Видимость = Истина;
		Элементы.ДекорацияПрокруткаИзображенийВправо.Видимость = Истина;
		Элементы.ДекорацияПрокруткаИзображенийВлевоОтступ.Видимость = Ложь;
		Элементы.ДекорацияПрокруткаИзображенийВправоОтступ.Видимость = Ложь;
	КонецЕсли;
	
	Если ТекущееИзображение = 0 Тогда
		Элементы.ДекорацияПрокруткаИзображенийВлево.Доступность = Ложь;
		Элементы.ДекорацияПрокруткаИзображенийВправо.Доступность = Истина;
	ИначеЕсли ТекущееИзображение = Изображения.Количество() - 1 Тогда
		Элементы.ДекорацияПрокруткаИзображенийВлево.Доступность = Истина;
		Элементы.ДекорацияПрокруткаИзображенийВправо.Доступность = Ложь;
	Иначе
		Элементы.ДекорацияПрокруткаИзображенийВлево.Доступность = Истина;
		Элементы.ДекорацияПрокруткаИзображенийВправо.Доступность = Истина
	КонецЕсли;
	
	ЭлементАдресКартинки = Элементы.Найти("АдресКартинки1");
	Если ЭлементАдресКартинки <> Неопределено Тогда
		ТекущийЭлемент = ЭлементАдресКартинки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПрокруткаИзображенийВправоНажатие(Элемент)
	
	СдвигИзображения(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПрокруткаИзображенийВлевоНажатие(Элемент)
	
	СдвигИзображения(-1);
	
КонецПроцедуры

// Показывает соседнее с текущим изображение.
// 
// Параметры:
//  Направление - Число - Если = -1 - сдивиг влево; Если = 1 - сдвиг вправо.
//
&НаСервере
Процедура СдвигИзображения(Направление)
	
	НомерЭлемента = ТекущееИзображение + Направление;
	Если НомерЭлемента < 0 ИЛИ НомерЭлемента >= Изображения.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКДанным = СтрШаблон("Изображения[%1].Адрес", НомерЭлемента);
	
	КоличествоИзображений = Элементы.Изображение.ПодчиненныеЭлементы.Количество();
	Если КоличествоИзображений = 1 Тогда
		ПредыдущееИзображение = Элементы.АдресКартинки;
		НовоеИзображениеНомер = 1;
	Иначе
		ПредыдущееИзображение = Элементы.Изображение.ПодчиненныеЭлементы[КоличествоИзображений - 1];
		НовоеИзображениеНомер = Число(СтрЗаменить(ПредыдущееИзображение.Имя, "АдресКартинки", "")) + 1;
	КонецЕсли;
	
	НовоеИзображение = Элементы.Добавить("АдресКартинки" + НовоеИзображениеНомер, Тип("ПолеФормы"), Элементы.Изображение);
	НовоеИзображение.Вид = ВидПоляФормы.ПолеКартинки;
	НовоеИзображение.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовоеИзображение.Гиперссылка = Истина;
	НовоеИзображение.РазмерКартинки = РазмерКартинки.Пропорционально;
	НовоеИзображение.АвтоМаксимальнаяШирина = Ложь;
	НовоеИзображение.МаксимальнаяШирина = 21;
	НовоеИзображение.Высота = 7;
	НовоеИзображение.РастягиватьПоВертикали = Ложь;
	НовоеИзображение.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	НовоеИзображение.ПутьКДанным = ПутьКДанным;
	НовоеИзображение.УстановитьДействие("Нажатие", "Подключаемый_АдресКартинкиНажатие");
	ТекущееИзображение = НомерЭлемента;
	
	Элементы.Переместить(ПредыдущееИзображение.КонтекстноеМеню.ПодчиненныеЭлементы["АдресКартинкиКонтекстноеМенюКнопкаСортировкаФайловНаСайте"],
	НовоеИзображение.КонтекстноеМеню);
	
	Элементы.Переместить(ПредыдущееИзображение.КонтекстноеМеню.ПодчиненныеЭлементы["АдресКартинкиКонтекстноеМенюПросмотретьИзображение"],
	НовоеИзображение.КонтекстноеМеню, НовоеИзображение.КонтекстноеМеню.ПодчиненныеЭлементы[0]);
	
	Элементы.Переместить(ПредыдущееИзображение.КонтекстноеМеню.ПодчиненныеЭлементы["АдресКартинкиКонтекстноеМенюУдалитьИзображение"],
	НовоеИзображение.КонтекстноеМеню, НовоеИзображение.КонтекстноеМеню.ПодчиненныеЭлементы[0]);
	
	Элементы.Переместить(ПредыдущееИзображение.КонтекстноеМеню.ПодчиненныеЭлементы["АдресКартинкиКонтекстноеМенюУстановитьИзображениеОсновным"],
	НовоеИзображение.КонтекстноеМеню, НовоеИзображение.КонтекстноеМеню.ПодчиненныеЭлементы[0]);
	
	Элементы.Переместить(ПредыдущееИзображение.КонтекстноеМеню.ПодчиненныеЭлементы["АдресКартинкиКонтекстноеМенюДобавитьИзображение"],
	НовоеИзображение.КонтекстноеМеню, НовоеИзображение.КонтекстноеМеню.ПодчиненныеЭлементы[0]);
	
	Если КоличествоИзображений = 1 Тогда
		ПредыдущееИзображение.Видимость = Ложь;
	Иначе
		Элементы.Удалить(ПредыдущееИзображение);
	КонецЕсли;
	УстановитьПрокруткуИзображения();
	ИзображениеВидимостьКоманднойПанели();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИзображениеОсновнымСервер(ПрисоединенныйФайл)
	
	ФайлКартинки = Неопределено;
	
	Если ТипЗнч(ПрисоединенныйФайл) = Тип("Массив") Тогда
		Для каждого Эл Из ПрисоединенныйФайл Цикл
			Если ОтображатьФайлНаФорме(Эл, Ложь) Тогда
				ФайлКартинки = Эл;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ОтображатьФайлНаФорме(ПрисоединенныйФайл, Ложь) Тогда
		ФайлКартинки = ПрисоединенныйФайл;
	КонецЕсли;
	
	Если ФайлКартинки = Неопределено ИЛИ Объект.ФайлКартинки = ФайлКартинки Тогда
		Объект.ФайлКартинки = Неопределено;
	Иначе
		Объект.ФайлКартинки = ФайлКартинки;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ИзображениеВидимостьКоманднойПанели();
	
КонецПроцедуры

// Устанавливает видимость кнопок контекстного меню изображения.
//
&НаСервере
Процедура ИзображениеВидимостьКоманднойПанели()
	
	ЕстьИзображения = Изображения.Количество();
	Элементы.АдресКартинкиКонтекстноеМенюУстановитьИзображениеОсновным.Видимость = ЕстьИзображения;
	Элементы.АдресКартинкиКонтекстноеМенюУдалитьИзображение.Видимость = ЕстьИзображения;
	Элементы.АдресКартинкиКонтекстноеМенюПросмотретьИзображение.Видимость = ЕстьИзображения;
	ЭтоОсновноеИзображение = Ложь;
	Если ЕстьИзображения Тогда
		ЭтоОсновноеИзображение = (Изображения[ТекущееИзображение].Ссылка = Объект.ФайлКартинки);
	КонецЕсли;
	
	Элементы.АдресКартинкиКонтекстноеМенюУстановитьИзображениеОсновным.Пометка = ЭтоОсновноеИзображение;
	
	Элементы.АдресКартинкиКонтекстноеМенюКнопкаСортировкаФайловНаСайте.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ОтображатьФайлНаФорме(ПрисоединенныйФайл, ПроверятьПометкуУдаления = Истина)
	
	ДопустимыеРасширения = Новый Массив;
	ДопустимыеРасширения.Добавить("png");
	ДопустимыеРасширения.Добавить("jpeg");
	ДопустимыеРасширения.Добавить("jpg");
	
	СвойстваФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрисоединенныйФайл, "ВладелецФайла,ПометкаУдаления,Расширение");
	
	Если ПроверятьПометкуУдаления И СвойстваФайла.ПометкаУдаления
		ИЛИ СвойстваФайла.ВладелецФайла <> Объект.Ссылка
		ИЛИ ДопустимыеРасширения.Найти(СвойстваФайла.Расширение) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура УУ_КнопкаСортировкаФайловНаСайтеВместо(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура УУ_ПросмотретьИзображениеПосле(Команда)
	ПросмотретьПрисоединенныйФайл();
КонецПроцедуры

&НаКлиенте
Процедура УУ_УстановитьИзображениеОсновнымПосле(Команда)
	Если ТекущееИзображение < 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьИзображениеОсновнымСервер(Изображения[ТекущееИзображение].Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура УУ_ОбработкаОповещенияПосле(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "Запись_Файл" Тогда
		
		Если Параметр.Свойство("ВладелецФайла") И Параметр.ВладелецФайла = Объект.Ссылка
			ИЛИ НЕ Параметр.Свойство("ВладелецФайла") Тогда
			
			ОбновитьПросмотрИзображений(Источник);
			
			Если Параметр.Свойство("ЭтоНовый") И Параметр.ЭтоНовый
				И НЕ ЗначениеЗаполнено(Объект.ФайлКартинки) Тогда
				
				Если ТипЗнч(Источник) = Тип("Массив") Тогда
					ИзображениеДляПроверки = Источник[0];
				Иначе
					ИзображениеДляПроверки = Источник;
				КонецЕсли;
				Строки = Изображения.НайтиСтроки(Новый Структура("Ссылка", ИзображениеДляПроверки));
				Если Строки.Количество() <> 0 Тогда
					УстановитьИзображениеОсновнымСервер(ИзображениеДляПроверки);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Вызывается при изменении присоединенного файла.
//
&НаСервере
Процедура ОбновитьПросмотрИзображений(Знач ИзмененныеФайлы = Неопределено)
	
	ОбновитьПросмотрИзображений = (ИзмененныеФайлы = Неопределено);
	
	Если ИзмененныеФайлы <> Неопределено Тогда
		Если ТипЗнч(ИзмененныеФайлы) <> Тип("Массив") Тогда
			ИзмененныеФайлы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИзмененныеФайлы);
		КонецЕсли;
		
		Для каждого Файл Из ИзмененныеФайлы Цикл
			ОбновитьПросмотрИзображений = ОтображатьФайлНаФорме(Файл, Ложь);
			Если ОбновитьПросмотрИзображений Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ОбновитьПросмотрИзображений Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ФайлКартинки)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ФайлКартинки, "ПометкаУдаления") Тогда
		Объект.ФайлКартинки = Неопределено;
		Модифицированность = Истина;
	КонецЕсли;
	
	ДобавитьПросмотрИзображений();
	СдвигИзображения(0);
	
КонецПроцедуры
