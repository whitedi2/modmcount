
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДанныеЛицензии = РегистрыСведений.сабСоответствияОрганизацийПредприятиям.ПроверитьУстановкуКлюча();
	//КлючУстановлен = Ложь;
	
	Если НЕ ДанныеЛицензии.КлючЛицензии Тогда
		Элементы.Группа23.Видимость = Истина;
		Элементы.Группа20.Видимость = Ложь;
		Элементы.НавигацияМеню.Доступность = Ложь;
		//Элементы.Группа8.Видимость = Ложь;
	Иначе	
		Элементы.Группа23.Видимость = Ложь;
		Элементы.Группа20.Видимость = Истина;
		Элементы.НавигацияМеню.Доступность = Истина;
		//Элементы.Группа8.Видимость = Ложь;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЛицензии);
		Элементы.ПробныйПериод.Видимость = ДанныеЛицензии.Свойство("Ограничение") И ЗначениеЗаполнено(ДанныеЛицензии.Ограничение);		
		Элементы.Группа10.Видимость = Элементы.ПробныйПериод.Видимость;
		
		Элементы.Декорация5.Видимость = Ложь;
		//Элементы.Декорация6.Видимость = Ложь;
		Элементы.УстановитьИПерезапустить.Видимость = Ложь;
		Элементы.СписокИзменений.Видимость = Ложь;
		Элементы.Перезапустить1С.Видимость = Ложь;
		
		Расширение = Метаданные.Справочники.сабМониторВнедрения.РасширениеКонфигурации();
		Результат = Новый Структура;
		ТекущаяВерсия = Расширение.Версия;
		
		ЗаполнитьКомандыНастроек();
		
	КонецЕсли;
	
	Элементы.СкачатьНовуюВерсию.Доступность = ОбщегоНазначенияКлиентСервер.СтрокаВДату(ПодпискаНаОбновления) >= НачалоДня(ТекущаяДата());
	
	НастройкиПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	
	Если Не ЗначениеЗаполнено(Справочники.сабМониторВнедрения.НайтиПоНаименованию("сабИспользоватьПодразделенияКонтрагента", Истина)) Тогда
		сабПодсистемаУправленческийУчет = Истина;
		сабПодсистемаКазначейство = Истина;
		сабПодсистемаБюджетирование = Истина;
		сабПодсистемаДокументооборот = Истина;
		сабПодсистемаОперативныйУчет = Истина;
	КонецЕсли;
	
	НавигацияМеню.Параметры.УстановитьЗначениеПараметра("УправленческийУчет", сабПодсистемаУправленческийУчет);
	НавигацияМеню.Параметры.УстановитьЗначениеПараметра("Казначейство", сабПодсистемаКазначейство);
	НавигацияМеню.Параметры.УстановитьЗначениеПараметра("Бюджетирование", сабПодсистемаБюджетирование);
	НавигацияМеню.Параметры.УстановитьЗначениеПараметра("Документооборот", сабПодсистемаДокументооборот);
	НавигацияМеню.Параметры.УстановитьЗначениеПараметра("ОперативныйУчет", сабПодсистемаОперативныйУчет);
	
	УстановитьДоступностьКоманд();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКоманд()
	
	Элементы.ВыполнитьПервоначальнуюНастройкуМодуля.Доступность = НЕ ПервоначальнаяНастрокаВыполнена;
	Элементы.Декорация17.Видимость = ПервоначальнаяНастрокаВыполнена;
	
	Элементы.Группа15.Видимость = сабПодсистемаУправленческийУчет;
	
	Элементы.Группа30.Видимость = Не ПервоначальнаяНастрокаВыполнена;
	Элементы.Группа31.Видимость = Не ПервоначальнаяНастрокаВыполнена;
	
КонецПроцедуры


&НаКлиенте
Процедура НаименованиеНажатие(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Поле.Имя = "Наименование" Тогда
		Если Элементы.Список.ТекущиеДанные.Наименование = "1. Настройка технических данных" Тогда
			ОткрытьФорму("Справочник.сабМониторВнедрения.Форма.Форма1", Новый Структура("Ключ", Элементы.Список.ТекущаяСтрока));
		ИначеЕсли Элементы.Список.ТекущиеДанные.Наименование = "2. Настройка констант" Тогда
			ОткрытьФорму("Справочник.сабМониторВнедрения.Форма.Форма1", Новый Структура("Ключ", Элементы.Список.ТекущаяСтрока));
		ИначеЕсли Элементы.Список.ТекущиеДанные.Наименование = "2. Настройка структуры предприятия" Тогда
			ОткрытьФорму("Справочник.сабМониторВнедрения.Форма.Форма2", Новый Структура("Ключ", Элементы.Список.ТекущаяСтрока));
		ИначеЕсли Элементы.Список.ТекущиеДанные.Наименование = "3. Настройки соответствия документов" Тогда
			ОткрытьФорму("Справочник.сабМониторВнедрения.Форма.Форма3", Новый Структура("Ключ", Элементы.Список.ТекущаяСтрока));
		ИначеЕсли Элементы.Список.ТекущиеДанные.Наименование = "4. Настройка соответствия плана счетов" Тогда
			ОткрытьФорму("Справочник.сабМониторВнедрения.Форма.Форма4", Новый Структура("Ключ", Элементы.Список.ТекущаяСтрока));
		ИначеЕсли Элементы.Список.ТекущиеДанные.Наименование = "6. Настройка документооборота" Тогда
			ОткрытьФорму("Справочник.сабМониторВнедрения.Форма.Форма5", Новый Структура("Ключ", Элементы.Список.ТекущаяСтрока));
		ИначеЕсли Элементы.Список.ТекущиеДанные.Наименование = "5. Ввод остатков на начало" Тогда
			ОткрытьФорму("Справочник.сабМониторВнедрения.Форма.Форма5", Новый Структура("Ключ", Элементы.Список.ТекущаяСтрока));		
		ИначеЕсли Элементы.Список.ТекущиеДанные.Наименование = "6. Начало работы" Тогда
			ОткрытьФорму("Справочник.сабМониторВнедрения.Форма.Форма", Новый Структура("Ключ", Элементы.Список.ТекущаяСтрока));		
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	СтандартнаяОбработка = Ложь;
	Если Элементы.Список.ТекущиеДанные.Код = 0 Тогда
		ОткрытьФорму("Справочник.сабМониторВнедрения.Форма.Форма0");		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВвестиКлюч(Команда)
	Если Не ЗначениеЗаполнено(КлючПрограммы) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнен ключ программы.";
		Сообщение.Поле = "КлючПрограммы";
		//Сообщение.УстановитьДанные();
		Сообщение.Сообщить();	
		Возврат;	
	КонецЕсли;
	ВвестиКлючНаСервере(КлючПрограммы);
КонецПроцедуры

&НаКлиенте
Процедура ВвестиКлючЛицензии(Команда)
	ПоказатьВводСтроки(Новый ОписаниеОповещения("ВвестиКлючЛицензииЗавершение", ЭтотОбъект, Новый Структура("КлючПрограммы", КлючПрограммы)), КлючПрограммы, "Введите ключ лицензии");
КонецПроцедуры

&НаКлиенте
Процедура ВвестиКлючЛицензииЗавершение(Строка, ДополнительныеПараметры) Экспорт
	
	Ключ = ?(Строка = Неопределено, ДополнительныеПараметры.КлючПрограммы, Строка);
	
	Если НЕ Ключ = "" Тогда
		ВвестиКлючНаСервере(Ключ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВвестиКлючНаСервере(Ключ, Пробный = Ложь)
	
	Ответ = РегистрыСведений.сабСоответствияОрганизацийПредприятиям.ВвестиКлючНаСервере(Ключ, Пробный);
	
	Если НЕ СтрНайти(Ответ, "Ключ лицензии успешно установлен.") Тогда
		Сообщить(Ответ);
		Возврат;
	КонецЕсли;
	
	Сообщить("Ключ лицензии успешно установлен.");
	
	ПриСозданииНаСервере(Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьПробныйПериод(Команда)
	ВвестиКлючНаСервере("", Истина);
КонецПроцедуры

&НаКлиенте
Процедура Команда1(Команда)
	ОткрытьФорму("Справочник.сабМониторВнедрения.Форма.ФормаСписка1");
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЭлементНастройки(Наименование)

	Возврат Справочники.сабМониторВнедрения.НайтиПоНаименованию(Наименование, Истина);

КонецФункции // ()

&НаСервере
Процедура ЗаполнитьКомандыНастроек()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СправочниксабМониторВнедрения.Ссылка КАК Ссылка,
	               |	СправочниксабМониторВнедрения.ПометкаУдаления КАК ПометкаУдаления,
	               |	СправочниксабМониторВнедрения.Код КАК Код,
	               |	СправочниксабМониторВнедрения.Наименование КАК Наименование,
	               |	СправочниксабМониторВнедрения.Выполнено КАК Выполнено,
	               |	СправочниксабМониторВнедрения.Описание КАК Описание,
	               |	СправочниксабМониторВнедрения.Комментарии КАК Комментарии,
	               |	СправочниксабМониторВнедрения.Заполнено КАК Заполнено,
	               |	СправочниксабМониторВнедрения.Значение КАК Значение,
	               |	СправочниксабМониторВнедрения.ТипСтроки КАК ТипСтроки,
	               |	СправочниксабМониторВнедрения.Предопределенный КАК Предопределенный,
	               |	СправочниксабМониторВнедрения.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
	               |ИЗ
	               |	Справочник.сабМониторВнедрения КАК СправочниксабМониторВнедрения
	               |ГДЕ
	               |	СправочниксабМониторВнедрения.ТипСтроки = ""Пункт""
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Код
	               |АВТОУПОРЯДОЧИВАНИЕ";
		
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ИндексРеква = 1;
	Пока Выборка.Следующий() Цикл
		ЭтотОбъект["Реквизит" + Строка(ИндексРеква)] = Выборка.Наименование;
		Элементы["Реквизит" + Строка(ИндексРеква)].Подсказка = Выборка.Описание;
		Элементы["ДекорацияГалка" + Строка(ИндексРеква)].Видимость = Выборка.Выполнено;
		Элементы["ДекорацияГалкаВык" + Строка(ИндексРеква)].Видимость = НЕ Выборка.Выполнено;
		ИндексРеква = ИндексРеква + 1;
	КонецЦикла;
	
	//Реквизит5 = "Помощник ввода остатков";

КонецПроцедуры

&НаКлиенте
Процедура Реквизит1Нажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ИндексКоманды = СтрЗаменить(Элемент.Имя, "Реквизит", "");
	ТекЭл = ПолучитьЭлементНастройки(ЭтотОбъект[Элемент.Имя]);
	ОткрытьФорму("Справочник.сабМониторВнедрения.Форма.Форма" + Строка(ИндексКоманды), Новый Структура("Ключ", ТекЭл));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбновитьСтатусыНастроек" Тогда
		Для ИндексРеква = 1 По 6 Цикл
			Если ЭтотОбъект["Реквизит" + Строка(ИндексРеква)] = Параметр.Наименование Тогда
				Элементы["ДекорацияГалка" + Строка(ИндексРеква)].Видимость = Параметр.Выполнено;
				Элементы["ДекорацияГалкаВык" + Строка(ИндексРеква)].Видимость = НЕ Параметр.Выполнено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры


#Область Обновление

&НаКлиенте
Процедура СкачатьНовуюВерсию(Команда)
	ПодключитьОбработчикОжидания("_ОбновитьСостояниеНаКлиенте", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояние(Команда)

	_ОбновитьСостояниеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОбновление(Команда)

	Установлено = _УстановитьОбновление();	
	Если Установлено Тогда
		ЗавершитьРаботуСистемы(Ложь, Истина);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Перезапустить1С(Команда)

	ЗавершитьРаботуСистемы(Ложь, Истина);

КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура _ОбновитьСостояниеНаКлиенте()

	_ОбновитьСостояниеНаСервере();
		
КонецПроцедуры

&НаСервере
Процедура _ОбновитьСостояниеНаСервере()
	
	Элементы.Декорация5.Видимость = Истина;
	
	Обсуживание = Справочники.сабМониторВнедрения.СоздатьЭлемент();
	АктуальнаяВерсия = Новый ФиксированнаяСтруктура(Обсуживание.ПолучитьАктивнуюВерсию());	
	УстановленнаяВерсия = Новый ФиксированнаяСтруктура(Обсуживание.ПолучитьУстановленнуюВерсию());
	Если ПоследняяВерсия = Неопределено Тогда
		ПоследняяВерсия = Обсуживание.ПолучитьПоследнююВерсию();	
	КонецЕсли;

	_ОбновитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура _ОбновитьФормуНаСервере()
	
	НужнаПерезагрузка = УстановленнаяВерсия.Версия <> АктуальнаяВерсия.Версия;
	НужнаУстановка = ПоследняяВерсия <> Неопределено И ПоследняяВерсия.Версия <> УстановленнаяВерсия.Версия;	
	
	Элементы.Декорация5.Видимость = Ложь;
	Элементы.СкачатьНовуюВерсию.Видимость = Ложь;
	
	Если НужнаПерезагрузка Тогда	
		Элементы.Перезапустить1С.Видимость = Истина;
		Элементы.Декорация6.Заголовок = "Необходимо перезапустить текущий сеанс 1С";
	ИначеЕсли НужнаУстановка Тогда
		Элементы.УстановитьИПерезапустить.Видимость = Истина;
		Элементы.СписокИзменений.Видимость = Истина;
		Элементы.Декорация6.Заголовок = "Доступна версия " + Строка(ПоследняяВерсия.Версия);
	Иначе
		Элементы.Декорация6.Заголовок = "У вас установлена актуальная версия модуля";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция _УстановитьОбновление() 

	Обсуживание = Справочники.сабМониторВнедрения.СоздатьЭлемент();
    Возврат Обсуживание.УстановитьВерсию(ПоследняяВерсия.Версия);
		
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура РасширенныеНастройкиДоступа(Команда)
	ОткрытьФорму("Справочник.сабМониторВнедрения.Форма.Форма8");
КонецПроцедуры

&НаКлиенте
Процедура СписокИзменений(Команда)
	Форма = ПолучитьФорму("Справочник.сабМониторВнедрения.Форма.ФормаСписокИзменений");
	Форма.СписокИзменений.УстановитьТекст(СписокИзмененийСервер());
	Форма.Открыть();
КонецПроцедуры

&НаСервере
Функция СписокИзмененийСервер()
	Обслуживание = Справочники.сабМониторВнедрения.СоздатьЭлемент();
	Возврат Обслуживание.ПолучитьПоследнююВерсию().СписокИзменений;
КонецФункции

&НаКлиенте
Процедура ОбновитьЛицензию(Команда)
	ОбновитьЛицензиюНаСервере();
КонецПроцедуры                  

&НаСервере
Процедура ОбновитьЛицензиюНаСервере()
	
	Ограничение = Справочники.сабМониторВнедрения.НайтиПоНаименованию("Ограничение", Истина);
	
	ТекСтрокаЛицензии = Справочники.сабМониторВнедрения.НайтиПоНаименованию("Ключ лицензии", Истина);
	СтрокаОтвет = РегистрыСведений.сабСоответствияОрганизацийПредприятиям.ВвестиКлючНаСервере(ТекСтрокаЛицензии.Значение, ЗначениеЗаполнено(Ограничение), Истина);
	
	СтараяДата = ОбщегоНазначенияКлиентСервер.СтрокаВДату(ПодпискаНаОбновления);
	НоваяДата = ОбщегоНазначенияКлиентСервер.СтрокаВДату(Сред(СтрокаОтвет, СтрНайти(СтрокаОтвет, "Подписка1:") + 10, 10));
	
	СтараяДата2 = ОбщегоНазначенияКлиентСервер.СтрокаВДату(ПробныйПериод);
	НоваяДата2 = ОбщегоНазначенияКлиентСервер.СтрокаВДату(Сред(СтрокаОтвет, СтрНайти(СтрокаОтвет, "Ограничение:") + 10, 10));
	
	Если НоваяДата > СтараяДата ИЛИ НоваяДата2 > СтараяДата2 Тогда
		Сообщить("Лицензия успешно обновлена.");
		ПриСозданииНаСервере(Ложь, Истина);
	Иначе
		Сообщить("Изменний для лицензии не найдено.");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НавигацияМенюПриАктивизацииСтроки(Элемент)
	Если НЕ Элементы.НавигацияМеню.ТекущиеДанные = Неопределено Тогда
		ТекДанные = Элементы.НавигацияМеню.ДанныеСтроки(Элементы.НавигацияМеню.ТекущаяСтрока);
		Если ТекДанные.Значение = "Лицензия" Тогда
			Элементы.Группа19.ТекущаяСтраница = Элементы.Группа7;
		ИначеЕсли ТекДанные.Значение = "Внедрение" Тогда
			Элементы.Группа19.ТекущаяСтраница = Элементы.Группа5;
		ИначеЕсли ТекДанные.Значение = "Общие настройки" Тогда
			Элементы.Группа19.ТекущаяСтраница = Элементы.Общее;
		ИначеЕсли ТекДанные.Значение = "Документооборот" Тогда
			Элементы.Группа19.ТекущаяСтраница = Элементы.Документооборот;
		ИначеЕсли ТекДанные.Значение = "Бюджетирование" Тогда
			Элементы.Группа19.ТекущаяСтраница = Элементы.Бюджетирование;
		ИначеЕсли ТекДанные.Значение = "Казначейство" Тогда
			Элементы.Группа19.ТекущаяСтраница = Элементы.Казначейство;
		ИначеЕсли ТекДанные.Значение = "Управленческий учет" Тогда
			Элементы.Группа19.ТекущаяСтраница = Элементы.УправленческийУчет;
		ИначеЕсли ТекДанные.Значение = "Оперативный учет" Тогда
			Элементы.Группа19.ТекущаяСтраница = Элементы.ОперативныйУчет;
		ИначеЕсли ТекДанные.Значение = "Бухгалтерский учет" Тогда
			Элементы.Группа19.ТекущаяСтраница = Элементы.БухгалтерскийУчет;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

 &НаКлиенте
Процедура Декорация1Нажатие(Элемент)
	ПерейтиПоНавигационнойСсылке("https://sab2up.ru");
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыРегламентныхЗаданийРасширения(Команда)
	ОткрытьФорму("РегистрСведений.ПараметрыРегламентныхЗаданийРасширения.Форма.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ВвестиТокенТелеграм(Команда)
	
	Если Элементы.ВвестиТокенТелеграм.Заголовок = "Удалить токен телеграм" Тогда 
		ОписаниеОповещенияОчисткаТокена = Новый ОписаниеОповещения("ВыполнитьПослеОтветаОчисткаТокенаТелеграм",ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияОчисткаТокена,"Удалить токен из хранилища",РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		ОписаниеОповещенияВводТокена = Новый ОписаниеОповещения("ВыполнитьПослеВводаТокена",ЭтотОбъект);
		ПоказатьВводЗначения(ОписаниеОповещенияВводТокена,"",,Тип("Строка")); 
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура сабПодсистемаДокументооборотПриИзменении(Элемент)
	ИспользоватьБизнесПроцессы = сабПодсистемаДокументооборот;
	ЗаписатьИЗакрытьНаСервере(Элемент.Имя);
	ЗаписатьИЗакрытьНаСервере("ИспользоватьБизнесПроцессы");
КонецПроцедуры


&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ЗаписатьИЗакрытьНаСервере();
	ОбновитьИнтерфейсПриИзмененииФункциональныхОпций();
	//Закрыть();
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИЗакрытьНаСервере(ТекРеквизит = Неопределено)
	
	Если ТекРеквизит = Неопределено Тогда
		МассивРеквизитовФормы = ПолучитьРеквизиты(); 
	Иначе	
		МассивРеквизитовФормы = Новый Массив; 
		МассивРеквизитовФормы.Добавить(Новый Структура("Имя", ТекРеквизит));
	КонецЕсли;
	
	МассивРеквизитовДляСправочника = Новый Массив;
	Для Каждого РеквизитФормы Из МассивРеквизитовФормы Цикл
	ИмяКонстанты = ?(РеквизитФормы.Имя = "ВключитьСправочникПодразделения","ИспользоватьБизнесПроцессыЗаявокСотрудников",РеквизитФормы.Имя);
		Если Метаданные.Константы.Найти(ИмяКонстанты) <> Неопределено Тогда
			ИмяРеквизита = ?(ИмяКонстанты = "ИспользоватьБизнесПроцессыЗаявокСотрудников","ВключитьСправочникПодразделения",ИмяКонстанты);
			Константы[ИмяКонстанты].Установить(ЭтотОбъект[ИмяРеквизита]);
		Иначе
			МассивРеквизитовДляСправочника.Добавить(РеквизитФормы);
		КонецЕсли; 
	КонецЦикла; 
	Константы.ИспользоватьБизнесПроцессыИЗадачи.Установить(ИспользоватьБизнесПроцессы);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	сабМониторВнедрения.Ссылка КАК Ссылка,
	|	сабМониторВнедрения.Наименование КАК Наименование,
	|	сабМониторВнедрения.Значение КАК Значение
	|ИЗ
	|	Справочник.сабМониторВнедрения КАК сабМониторВнедрения";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкасабМониторВнедрения = РезультатЗапроса.Выбрать(); 
	Для Каждого РеквизитФормы Из МассивРеквизитовДляСправочника Цикл
		СтруктураПоискасабМониторВнедрения = Новый Структура("Наименование",РеквизитФормы.Имя);
		ВыборкасабМониторВнедрения.Сбросить();	
		Если ВыборкасабМониторВнедрения.НайтиСледующий(СтруктураПоискасабМониторВнедрения) Тогда
			ТекЭлОб = ВыборкасабМониторВнедрения.Ссылка.ПолучитьОбъект();
		Иначе
			ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
		КонецЕсли;
		ТекЭлОб.Наименование = РеквизитФормы.Имя;
		ТекЭлОб.Значение = ЭтотОбъект[РеквизитФормы.Имя];
		ТекЭлОб.Записать();
	КонецЦикла;  
	
	ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ИспользоватьФО", Истина);
	
	Если ЗначениеЗаполнено(ТекЭл) Тогда
		ТекЭлОб = ТекЭл.ПолучитьОбъект();
	Иначе
		ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
	КонецЕсли;
	
	ТекЭлОб.Наименование = "ИспользоватьФО";
	ТекЭлОб.Значение = Истина;
	ТекЭлОб.Записать(); 
	
	#Область ИсходныйКод	
	//  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("СпособДоставкиПоУмолчанию", Истина);
	//  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "СпособДоставкиПоУмолчанию";
  //  ТекЭлОб.Значение = СпособДоставкиПоУмолчанию;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ОграничениеПравРедактированияКлючевыхСправочников", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "ОграничениеПравРедактированияКлючевыхСправочников";
  //  ТекЭлОб.Значение = ОграничениеПравРедактированияКлючевыхСправочников;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ПроверятьЗаполнениеГоденДо", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "ПроверятьЗаполнениеГоденДо";
  //  ТекЭлОб.Значение = ПроверятьЗаполнениеГоденДо;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ФормироватьНачисленияПоЗОтчетам", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "ФормироватьНачисленияПоЗОтчетам";
  //  ТекЭлОб.Значение = ФормироватьНачисленияПоЗОтчетам;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ИспользоватьКлючиАналитикиБюджета", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "ИспользоватьКлючиАналитикиБюджета";
  //  ТекЭлОб.Значение = ИспользоватьКлючиАналитикиБюджета;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("сабИгнорироватьБлокировкуАвтообновленийДокументов", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "сабИгнорироватьБлокировкуАвтообновленийДокументов";
  //  ТекЭлОб.Значение = сабИгнорироватьБлокировкуАвтообновленийДокументов;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ФормироватьСтрокиГрафикаОплат", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "ФормироватьСтрокиГрафикаОплат";
  //  ТекЭлОб.Значение = ФормироватьСтрокиГрафикаОплат;
  //  ТекЭлОб.Записать();

  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("КонтрольМинимальнойЦеныПоТипуЦен", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "КонтрольМинимальнойЦеныПоТипуЦен";
  //  ТекЭлОб.Значение = КонтрольМинимальнойЦеныПоТипуЦен;
  //  ТекЭлОб.Записать();

  //ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ФоноваяОбработкаБУДокументов", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "ФоноваяОбработкаБУДокументов";
  //  ТекЭлОб.Значение = ФоноваяОбработкаБУДокументов;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ФоноваяОбработкаУУДокументов", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "ФоноваяОбработкаУУДокументов";
  //  ТекЭлОб.Значение = ФоноваяОбработкаУУДокументов;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ИспользованиеГТД", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "ИспользованиеГТД";
  //  ТекЭлОб.Значение = ИспользованиеГТД;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ОбрабатыватьНепроведенныеБУДокументы", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "ОбрабатыватьНепроведенныеБУДокументы";
  //  ТекЭлОб.Значение = ОбрабатыватьНепроведенныеБУДокументы;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ОбрабатыватьНепроведенныеУУДокументы", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "ОбрабатыватьНепроведенныеУУДокументы";
  //  ТекЭлОб.Значение = ОбрабатыватьНепроведенныеУУДокументы;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ФоноваяПроверкаБУДокументов", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "ФоноваяПроверкаБУДокументов";
  //  ТекЭлОб.Значение = ФоноваяПроверкаБУДокументов;
  //  ТекЭлОб.Записать();

  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ИспользоватьБизнесПроцессы", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "ИспользоватьБизнесПроцессы";
  //  ТекЭлОб.Значение = ИспользоватьБизнесПроцессы;
  //  ТекЭлОб.Записать();
  //  Константы.ИспользоватьБизнесПроцессыИЗадачи.Установить(ИспользоватьБизнесПроцессы);
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ПроверятьЗаполнениеДоговоровВДокументах", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "ПроверятьЗаполнениеДоговоровВДокументах";
  //  ТекЭлОб.Значение = ПроверятьЗаполнениеДоговоровВДокументах;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ИспользоватьФО", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "ИспользоватьФО";
  //  ТекЭлОб.Значение = Истина;
  //  ТекЭлОб.Записать(); 
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("СоздаватьСчетаПокупателямСДатойРеализации", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "СоздаватьСчетаПокупателямСДатойРеализации";
  //  ТекЭлОб.Значение = СоздаватьСчетаПокупателямСДатойРеализации;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов";
  //  ТекЭлОб.Значение = НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("СрезОстатковНаДатуЗаказа", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "СрезОстатковНаДатуЗаказа";
  //  ТекЭлОб.Значение = СрезОстатковНаДатуЗаказа;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ВозможноЧастичноеИсполнениеЗаказов", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "ВозможноЧастичноеИсполнениеЗаказов";
  //  ТекЭлОб.Значение = ВозможноЧастичноеИсполнениеЗаказов;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("КонтролироватьУникальностьАртикулов", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "КонтролироватьУникальностьАртикулов";
  //  ТекЭлОб.Значение = КонтролироватьУникальностьАртикулов;
  //  ТекЭлОб.Записать();

  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("АльтернативнаяФормаЗаказов", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "АльтернативнаяФормаЗаказов";
  //  ТекЭлОб.Значение = АльтернативнаяФормаЗаказов;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("РассчитыватьСебестоимостьПоСериям", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "РассчитыватьСебестоимостьПоСериям";
  //  ТекЭлОб.Значение = РассчитыватьСебестоимостьПоСериям;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("КорректироватьСебестоимостьПриВыходеОстаткаИзМинуса", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "КорректироватьСебестоимостьПриВыходеОстаткаИзМинуса";
  //  ТекЭлОб.Значение = КорректироватьСебестоимостьПриВыходеОстаткаИзМинуса;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ЗапретПроведенияЗаказаПокупателяСПустымПодразделением", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "ЗапретПроведенияЗаказаПокупателяСПустымПодразделением";
  //  ТекЭлОб.Значение = ЗапретПроведенияЗаказаПокупателяСПустымПодразделением;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ОграничитьСписокКомандПечатиВРеализации", Истина);
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  ТекЭлОб.Наименование = "ОграничитьСписокКомандПечатиВРеализации";
  //  ТекЭлОб.Значение = ОграничитьСписокКомандПечатиВРеализации;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("КонтролироватьЗаполнениеОбязательныхПолейВПоступлении", Истина);
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  ТекЭлОб.Наименование = "КонтролироватьЗаполнениеОбязательныхПолейВПоступлении";
  //  ТекЭлОб.Значение = КонтролироватьЗаполнениеОбязательныхПолейВПоступлении;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ВнутрихолдинговоеДвижение", Истина);
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  ТекЭлОб.Наименование = "ВнутрихолдинговоеДвижение";
  //  ТекЭлОб.Значение = ВнутрихолдинговоеДвижение;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ОрганизацияПродажи", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "ОрганизацияПродажи";
  //  ТекЭлОб.Значение = ОрганизацияПродажи;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("СкладПродажи", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "СкладПродажи";
  //  ТекЭлОб.Значение = СкладПродажи;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("КонтрольНоменклатурыДляФормы2ВЗаказеКлиента", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "КонтрольНоменклатурыДляФормы2ВЗаказеКлиента";
  //  ТекЭлОб.Значение = КонтрольНоменклатурыДляФормы2ВЗаказеКлиента;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("РучнаяКорректировкаРасходаВВыпускахПоСпецификации", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "РучнаяКорректировкаРасходаВВыпускахПоСпецификации";
  //  ТекЭлОб.Значение = РучнаяКорректировкаРасходаВВыпускахПоСпецификации;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ОчищатьСтатьюДДСПриСозданииПлатежногоПоручения", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "ОчищатьСтатьюДДСПриСозданииПлатежногоПоручения";
  //  ТекЭлОб.Значение = ОчищатьСтатьюДДСПриСозданииПлатежногоПоручения;
  //  ТекЭлОб.Записать();
  //  

	//Константы.сабПодсистемаКазначейство.Установить(сабПодсистемаКазначейство);
	//Константы.сабПодсистемаБюджетирование.Установить(сабПодсистемаБюджетирование);
	//Константы.сабПодсистемаДокументооборот.Установить(сабПодсистемаДокументооборот);
	//Константы.сабПодсистемаОперативныйУчет.Установить(сабПодсистемаОперативныйУчет);
	//Константы.сабОперативныйРежимРаботы.Установить(сабОперативныйРежимРаботы);
	//
	//Константы.ИспользоватьБизнесПроцессыЗаявокСотрудников.Установить(ВключитьСправочникПодразделения);
	//Константы.сабОбменСЛогистическимиПрограммами.Установить(сабОбменСЛогистическимиПрограммами);
	//Константы.сабКонтрольПоСрокамГодности.Установить(сабКонтрольПоСрокамГодности); 
	#КонецОбласти
КонецПроцедуры

&НаСервере
Процедура НастройкиПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	сабМониторВнедрения.Наименование КАК Наименование,
	|	сабМониторВнедрения.Значение КАК Значение
	|ИЗ
	|	Справочник.сабМониторВнедрения КАК сабМониторВнедрения";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкасабМониторВнедрения = РезультатЗапроса.Выбрать(); 
	МассивРеквизитовФормы = ПолучитьРеквизиты();
	Для Каждого РеквизитФормы Из МассивРеквизитовФормы Цикл
		СтруктураПоискасабМониторВнедрения = Новый Структура("Наименование",РеквизитФормы.Имя);
		ВыборкасабМониторВнедрения.Сбросить();	
		Если ВыборкасабМониторВнедрения.НайтиСледующий(СтруктураПоискасабМониторВнедрения) Тогда
			ЭтотОбъект[РеквизитФормы.Имя] = ВыборкасабМониторВнедрения.Значение;	
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапросаКонстанты = "Выбрать ";
	ЭтоПерваяСтрока = Истина;
	ВыполняемЗапроНаКонстанты = Ложь;
	РеквизитыКонстанты = Новый Массив; 
	Для Каждого РеквизитФормы Из МассивРеквизитовФормы Цикл
		ИмяКонстанты = ?(РеквизитФормы.Имя = "ВключитьСправочникПодразделения","ИспользоватьБизнесПроцессыЗаявокСотрудников",РеквизитФормы.Имя);
		Если Метаданные.Константы.Найти(ИмяКонстанты) <> Неопределено Тогда
			ТекстЗапросаКонстанты = ТекстЗапросаКонстанты + ?(ЭтоПерваяСтрока, ИмяКонстанты, ", " +  ИмяКонстанты);
			ЭтоПерваяСтрока = Ложь;
			ВыполняемЗапроНаКонстанты = Истина; 
		КонецЕсли; 
	КонецЦикла;
	Если ВыполняемЗапроНаКонстанты Тогда
		ТекстЗапросаКонстанты = ТекстЗапросаКонстанты + " Из Константы";
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаКонстанты;
		РезультатЗапросаКонстанты = Запрос.Выполнить();
		ВыборкаЗапросаКонстанты = РезультатЗапросаКонстанты.Выбрать();
		Если ВыборкаЗапросаКонстанты.Следующий() Тогда
			Для Каждого КолонкаКонстанта Из РезультатЗапросаКонстанты.Колонки Цикл 
				ИмяРеквизита = ?(КолонкаКонстанта.Имя = "ИспользоватьБизнесПроцессыЗаявокСотрудников","ВключитьСправочникПодразделения",КолонкаКонстанта.Имя);
				ЭтотОбъект[ИмяРеквизита] = ВыборкаЗапросаКонстанты[КолонкаКонстанта.Имя];
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	#Область ИсходныйКод	
	//СпособДоставкиПоУмолчанию = Справочники.сабМониторВнедрения.НайтиПоНаименованию("СпособДоставкиПоУмолчанию", Истина).Значение; 
	//ОграничениеПравРедактированияКлючевыхСправочников = справочники.сабМониторВнедрения.НайтиПоНаименованию("ОграничениеПравРедактированияКлючевыхСправочников", Истина).Значение;
	//ПроверятьЗаполнениеГоденДо = справочники.сабМониторВнедрения.НайтиПоНаименованию("ПроверятьЗаполнениеГоденДо", Истина).Значение;
	//ФормироватьНачисленияПоЗОтчетам = справочники.сабМониторВнедрения.НайтиПоНаименованию("ФормироватьНачисленияПоЗОтчетам", Истина).Значение;
	//ИспользоватьКлючиАналитикиБюджета = справочники.сабМониторВнедрения.НайтиПоНаименованию("ИспользоватьКлючиАналитикиБюджета", Истина).Значение;
	//сабИгнорироватьБлокировкуАвтообновленийДокументов = справочники.сабМониторВнедрения.НайтиПоНаименованию("сабИгнорироватьБлокировкуАвтообновленийДокументов", Истина).Значение;
	//ФормироватьСтрокиГрафикаОплат = справочники.сабМониторВнедрения.НайтиПоНаименованию("ФормироватьСтрокиГрафикаОплат", Истина).Значение;
	//ФоноваяОбработкаБУДокументов = справочники.сабМониторВнедрения.НайтиПоНаименованию("ФоноваяОбработкаБУДокументов", Истина).Значение;
	//ФоноваяОбработкаУУДокументов = справочники.сабМониторВнедрения.НайтиПоНаименованию("ФоноваяОбработкаУУДокументов", Истина).Значение;
	//ИспользованиеГТД = справочники.сабМониторВнедрения.НайтиПоНаименованию("ИспользованиеГТД", Истина).Значение;
	//ФоноваяПроверкаБУДокументов = справочники.сабМониторВнедрения.НайтиПоНаименованию("ФоноваяПроверкаБУДокументов", Истина).Значение;
	//ОбрабатыватьНепроведенныеБУДокументы = справочники.сабМониторВнедрения.НайтиПоНаименованию("ОбрабатыватьНепроведенныеБУДокументы", Истина).Значение;
	//ОбрабатыватьНепроведенныеУУДокументы = справочники.сабМониторВнедрения.НайтиПоНаименованию("ОбрабатыватьНепроведенныеУУДокументы", Истина).Значение;
	//ИспользоватьБизнесПроцессы = справочники.сабМониторВнедрения.НайтиПоНаименованию("ИспользоватьБизнесПроцессы", Истина).Значение;
	//ПроверятьЗаполнениеДоговоровВДокументах = справочники.сабМониторВнедрения.НайтиПоНаименованию("ПроверятьЗаполнениеДоговоровВДокументах", Истина).Значение;
	//КонтрольМинимальнойЦеныПоТипуЦен = справочники.сабМониторВнедрения.НайтиПоНаименованию("КонтрольМинимальнойЦеныПоТипуЦен", Истина).Значение;
	//СоздаватьСчетаПокупателямСДатойРеализации = справочники.сабМониторВнедрения.НайтиПоНаименованию("СоздаватьСчетаПокупателямСДатойРеализации", Истина).Значение;
	//НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов = справочники.сабМониторВнедрения.НайтиПоНаименованию("НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов", Истина).Значение;
	//СрезОстатковНаДатуЗаказа = справочники.сабМониторВнедрения.НайтиПоНаименованию("СрезОстатковНаДатуЗаказа", Истина).Значение;
	//ВозможноЧастичноеИсполнениеЗаказов = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ВозможноЧастичноеИсполнениеЗаказов", Истина).Значение;
	//КонтролироватьУникальностьАртикулов = Справочники.сабМониторВнедрения.НайтиПоНаименованию("КонтролироватьУникальностьАртикулов", Истина).Значение;
	//АльтернативнаяФормаЗаказов = Справочники.сабМониторВнедрения.НайтиПоНаименованию("АльтернативнаяФормаЗаказов", Истина).Значение;
	//РассчитыватьСебестоимостьПоСериям = Справочники.сабМониторВнедрения.НайтиПоНаименованию("РассчитыватьСебестоимостьПоСериям", Истина).Значение;
	//КорректироватьСебестоимостьПриВыходеОстаткаИзМинуса = Справочники.сабМониторВнедрения.НайтиПоНаименованию("КорректироватьСебестоимостьПриВыходеОстаткаИзМинуса", Истина).Значение;
	//ЗапретПроведенияЗаказаПокупателяСПустымПодразделением = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ЗапретПроведенияЗаказаПокупателяСПустымПодразделением", Истина).Значение;
	//ОграничитьСписокКомандПечатиВРеализации = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ОграничитьСписокКомандПечатиВРеализации", Истина).Значение;
	//КонтролироватьЗаполнениеОбязательныхПолейВПоступлении = Справочники.сабМониторВнедрения.НайтиПоНаименованию("КонтролироватьЗаполнениеОбязательныхПолейВПоступлении", Истина).Значение;
	//ВнутрихолдинговоеДвижение = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ВнутрихолдинговоеДвижение", Истина).Значение;
	//ОрганизацияПродажи = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ОрганизацияПродажи", Истина).Значение; 
	//СкладПродажи = Справочники.сабМониторВнедрения.НайтиПоНаименованию("СкладПродажи", Истина).Значение;
	//КонтрольНоменклатурыДляФормы2ВЗаказеКлиента = Справочники.сабМониторВнедрения.НайтиПоНаименованию("КонтрольНоменклатурыДляФормы2ВЗаказеКлиента", Истина).Значение;
	//РучнаяКорректировкаРасходаВВыпускахПоСпецификации = Справочники.сабМониторВнедрения.НайтиПоНаименованию("РучнаяКорректировкаРасходаВВыпускахПоСпецификации", Истина).Значение;
	//ОчищатьСтатьюДДСПриСозданииПлатежногоПоручения = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ОчищатьСтатьюДДСПриСозданииПлатежногоПоручения", Истина).Значение;
	
	//сабПодсистемаКазначейство = Константы.сабПодсистемаКазначейство.Получить();
	//сабПодсистемаБюджетирование = Константы.сабПодсистемаБюджетирование.Получить();
	//сабОперативныйРежимРаботы = Константы.сабОперативныйРежимРаботы.Получить();
	//сабПодсистемаДокументооборот = Константы.сабПодсистемаДокументооборот.Получить();
	//сабПодсистемаОперативныйУчет = Константы.сабПодсистемаОперативныйУчет.Получить();
	//сабОбменСЛогистическимиПрограммами = Константы.сабОбменСЛогистическимиПрограммами.Получить();
	//сабКонтрольПоСрокамГодности = Константы.сабКонтрольПоСрокамГодности.Получить();
	//
	//
	//ВключитьСправочникПодразделения = Константы.ИспользоватьБизнесПроцессыЗаявокСотрудников.Получить();
	#КонецОбласти
	ФоноваяОбработкаБУДокументовПриИзмененииНаСервере();
	ФоноваяОбработкаУУДокументовПриИзмененииНаСервере();
	сабОперативныйРежимРаботыПриИзмененииНаСервере();
	ВключитьСправочникПодразделенияПриИзмененииНаСервере();
	РазрешитьРедактированиеДокументовНаСогласованииАдминистраторуНаСервере(Ложь);
	
	ТекСтрокаЛицензии = Справочники.сабМониторВнедрения.НайтиПоНаименованию("Ключ лицензии", Истина);
	СтруктураЛицензий = РегистрыСведений.сабСоответствияОрганизацийПредприятиям.ПроверитьЛицензиюМодуля();
	//Если СтруктураЛицензий.ПолныеЛицензии.Найти(ТекСтрокаЛицензии.Значение) = Неопределено Тогда
	//	//Элементы.ИспользоватьБизнесПроцессы.Доступность = Ложь;
	//	//Элементы.ВключитьСправочникПодразделения.Доступность = Ложь;
	//	//Элементы.сабПодсистемаДокументооборот.Доступность = Ложь;
	//Иначе
		Элементы.Декорация1.Видимость = Ложь;
	//КонецЕсли;
	
	ИспользоватьКлючиАналитикиБюджетаПриИзмененииСервер(Неопределено);

	УстановитьПривилегированныйРежим(Истина);
	Пароли = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("ТокенТелеграмДляБота", "Токен");
	УстановитьПривилегированныйРежим(Ложь);
	Если Пароли <> Неопределено Тогда
		Элементы.ВвестиТокенТелеграм.Заголовок = "Удалить токен телеграм";	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ФоноваяОбработкаБУДокументовПриИзмененииНаСервере()
	Элементы.ФоноваяПроверкаБУДокументов.Доступность = ФоноваяОбработкаБУДокументов;
	Если Не ФоноваяОбработкаБУДокументов Тогда
		ФоноваяПроверкаБУДокументов = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ФоноваяОбработкаУУДокументовПриИзмененииНаСервере()
	//Элементы.ФоноваяПроверкаУУДокументов.Доступность = ФоноваяОбработкаУУДокументов;
	Если Не ФоноваяОбработкаУУДокументов Тогда
		//ФоноваяПроверкаУУДокументов = Ложь;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ФоноваяОбработкаБУДокументовПриИзменении(Элемент)
	ФоноваяОбработкаБУДокументовПриИзмененииНаСервере();
	ЗаписатьИЗакрытьНаСервере(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ФоноваяОбработкаУУДокументовПриИзменении(Элемент)
	ФоноваяОбработкаУУДокументовПриИзмененииНаСервере();
	ЗаписатьИЗакрытьНаСервере(Элемент.Имя);
КонецПроцедуры


&НаСервере
Процедура сабОперативныйРежимРаботыПриИзмененииНаСервере()
	Элементы.ФоноваяОбработкаУУДокументов.Доступность = сабОперативныйРежимРаботы;
	Если Не сабОперативныйРежимРаботы Тогда
	 ФоноваяОбработкаУУДокументов = Ложь;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура сабОперативныйРежимРаботыПриИзменении(Элемент)
	сабОперативныйРежимРаботыПриИзмененииНаСервере();
	ЗаписатьИЗакрытьНаСервере(Элемент.Имя);
	ОбновитьИнтерфейсПриИзмененииФункциональныхОпций();
КонецПроцедуры


&НаСервере
Процедура ВключитьСправочникПодразделенияПриИзмененииНаСервере()
	Элементы.ЗапретПроведенияЗаказаПокупателяСПустымПодразделением.Доступность = ВключитьСправочникПодразделения;
	Если Не ВключитьСправочникПодразделения Тогда
	 ЗапретПроведенияЗаказаПокупателяСПустымПодразделением = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВключитьСправочникПодразделенияПриИзменении(Элемент)
	ВключитьСправочникПодразделенияПриИзмененииНаСервере();
	ЗаписатьИЗакрытьНаСервере(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКлючиАналитикиБюджетаПриИзменении(Элемент)
	ИспользоватьКлючиАналитикиБюджетаПриИзмененииСервер(НЕ Элемент = Неопределено);
КонецПроцедуры

&НаСервере
Процедура ИспользоватьКлючиАналитикиБюджетаПриИзмененииСервер(Изменять)
	ДополнительнаяАналитикаУчета = ?(ИспользоватьКлючиАналитикиБюджета, 1, ?(ИспользоватьПроекты, 2, Ложь));
КонецПроцедуры


&НаКлиенте
Процедура ДополнительнаяАналитикаУчетаПриИзменении(Элемент)
	ИспользоватьКлючиАналитикиБюджета = ?(ДополнительнаяАналитикаУчета = 1, Истина, Ложь);
	ИспользоватьПроекты = ?(ДополнительнаяАналитикаУчета = 2, Истина, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеОтветаОчисткаТокенаТелеграм(Результат,ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		УдалитьТокенИзБезопасногоХранилища();
		Элементы.ВвестиТокенТелеграм.Заголовок = "Ввести токен телеграм";	
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ВыполнитьПослеВводаТокена(Результат,ДопПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ПоместитьТокенВБезопасноеХранилище(Результат);
		Элементы.ВвестиТокенТелеграм.Заголовок = "Удалить токен телеграм";
	КонецЕсли;
	
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ПоместитьТокенВБезопасноеХранилище(Токен)
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("ТокенТелеграмДляБота", Токен, "Токен");
	УстановитьПривилегированныйРежим(Ложь);	
	
КонецПроцедуры     

&НаСервереБезКонтекста
Процедура УдалитьТокенИзБезопасногоХранилища()

	ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища("ТокенТелеграмДляБота","Токен");

КонецПроцедуры

&НаКлиенте
Процедура сабПодсистемаКазначействоПриИзменении(Элемент)
	ЗаписатьИЗакрытьНаСервере(Элемент.Имя);
	УстановитьДоступностьКоманд();
	
	Если Элемент.Имя = "РазрешитьРедактированиеДокументовНаСогласованииАдминистратору" Тогда
		РазрешитьРедактированиеДокументовНаСогласованииАдминистраторуНаСервере(Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РазрешитьРедактированиеДокументовНаСогласованииАдминистраторуНаСервере(Изменять)

	Элементы.РазрешитьРедактированиеДокументовПослеОплатыАдминистратору.Доступность = РазрешитьРедактированиеДокументовНаСогласованииАдминистратору;
	Если Изменять И Не Элементы.РазрешитьРедактированиеДокументовПослеОплатыАдминистратору.Доступность Тогда
		РазрешитьРедактированиеДокументовПослеОплатыАдминистратору = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура сабПодсистемаКазначействоПриИзмененииФО(Элемент)
	
	ЗаписатьИЗакрытьНаСервере(Элемент.Имя);
	ТекСтрока = Элементы.НавигацияМеню.ТекущаяСтрока;
	ОбновитьИнтерфейсПриИзмененииФункциональныхОпций();
	Элементы.НавигацияМеню.ТекущаяСтрока = ТекСтрока;
	
	НавигацияМеню.Параметры.УстановитьЗначениеПараметра("УправленческийУчет", сабПодсистемаУправленческийУчет);
	НавигацияМеню.Параметры.УстановитьЗначениеПараметра("Казначейство", сабПодсистемаКазначейство);
	НавигацияМеню.Параметры.УстановитьЗначениеПараметра("Бюджетирование", сабПодсистемаБюджетирование);
	НавигацияМеню.Параметры.УстановитьЗначениеПараметра("Документооборот", сабПодсистемаДокументооборот);
	НавигацияМеню.Параметры.УстановитьЗначениеПараметра("ОперативныйУчет", сабПодсистемаОперативныйУчет);
	
	УстановитьДоступностьКоманд();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	//ЗаписатьИЗакрытьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НастройкиCоответствияLокументов(Команда)
	ОткрытьФорму("РегистрСведений.сабСоответствиеТиповДокументов.ФормаСписка",,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтруктуруПредприятия(Команда)
	ОткрытьФорму("РегистрСведений.сабСоответствиеСчетовИСубконто.ФормаСписка",,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбразецЗатрат(Команда)
	ОткрытьФорму("Справочник.сабМониторВнедрения.Форма.ФормаПримерЗатрат");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбразецДДС(Команда)
	ОткрытьФорму("Справочник.сабМониторВнедрения.Форма.ФормаПримерДДС");
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПервоначальнуюНастройкуМодуля(Команда)
	ВыполнитьАвтозаполение();
	ВыполнитьАвтозаполениеДокументы();
	
	ВыполнитьАвтозаполениеСчета();
	ДополнитьЗаписи();
	ПроверкаНаПустыеЗаписи();
	
	ПервоначальнаяНастрокаВыполнена = Истина;
	ЗаписатьИЗакрытьНаСервере("ПервоначальнаяНастрокаВыполнена");
	УстановитьДоступностьКоманд();
КонецПроцедуры

#Область ПервоначальныеНастройки

&НаСервере
Процедура ВыполнитьАвтозаполение()
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	
	//субконто
	ЗаполнитьСубконто();
	
	//план счетов
	ЗаполнитьПланСчетовУчетный();
	
	//план счетов
	ЗаполнитьПланСчетовБюджетный();
	
	//общее заполнение
	БюджетныйНаСервере.НачальноеЗаполнениеИБ();
	
	//учетная политика
	Если Не ЗначениеЗаполнено(Справочники.УчетныеПолитики.НайтиПоНаименованию("Общая", Истина)) Тогда
		УчетнаяПолитикаУмолч = Справочники.УчетныеПолитики.СоздатьЭлемент();
		УчетнаяПолитикаУмолч.Наименование = "Общая";
		УчетнаяПолитикаУмолч.УчетНДС = УчетнаяПолитикаУчетНДС;
		УчетнаяПолитикаУмолч.РаспределятьПроводкиПоДокументамТоварооборота = УчетнаяПолитикаРаспределитьПроводкиПоДокументамТоварооборота;
		УчетнаяПолитикаУмолч.КорСчетПоУмолчанию = ПланыСчетов.Учетный.НайтиПоКоду("76.01");
		УчетнаяПолитикаУмолч.СчетКорректировкиСебестоимости = ПланыСчетов.Учетный.НайтиПоКоду("94");
		УчетнаяПолитикаУмолч.СтатьяВНХПоступление = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Внутреннее перемещение денежных средств", Истина);
		УчетнаяПолитикаУмолч.СтатьяВНХОплата = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Внутреннее перемещение денежных средств", Истина);
		УчетнаяПолитикаУмолч.Записать();
	КонецЕсли;
	
	//сценарий
	Если НЕ ЗначениеЗаполнено(Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина)) Тогда
		УчетнаяПолитикаУмолч = Справочники.СценарииПланирования.СоздатьЭлемент();
		УчетнаяПолитикаУмолч.Наименование = "Факт";
		УчетнаяПолитикаУмолч.Записать();
	КонецЕсли;
	
	//ставки НДС
	ЗаполнитьСтавкиНДС();
	
	//кассы
	ЗаполнитьКассы();
	
	//статьи затрат
	Если ЗаполнитьКлассификаторСтатейЗатрат Тогда
		ЗаполнитьСтатьиЗатрат();
	КонецЕсли;
	
	//статьи ДДС
	Если ЗаполнитьКлассификаторСтатейДДС Тогда
		ЗаполнитьСтатьиДДС();
	КонецЕсли;
	
	//фин.показатели
	сабОбщегоНазначенияБУХ.АвтозаполнениеПоказателейНаСервере();
	
	//Виды внутр документв
	ЗаполнитьВидыВнутрДокументов();;
	
	//записи регистра
	ЗаполнитьСоотвОрганизаций();
	
	ЗафиксироватьТранзакцию();
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоотвОрганизаций()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Предприятие = ЗНАЧЕНИЕ(Справочник.Предприятия.ПустаяСсылка)";
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Об = РегистрыСведений.сабСоответствияОрганизацийПредприятиям.СоздатьМенеджерЗаписи();
		Об.Организация = Выборка.Ссылка;
		Об.Записать();
	КонецЦикла;
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьВидыВнутрДокументов()
	
	Если Не ЗначениеЗаполнено(Справочники.Д_ВидыВнутреннихДокументов.НайтиПоНаименованию("Заявка на авансовый отчет", Истина)) Тогда
		НовыйЭлемент = Справочники.Д_ВидыВнутреннихДокументов.СоздатьЭлемент();
		НовыйЭлемент.Наименование = "Заявка на авансовый отчет";
		НовыйЭлемент.ИмяПредопределенного = "ЗаявкаНаАвансовыйОтчет";
		НовыйЭлемент.ИмяДокумента = "Д_ЗаявкаНаАвансовыйОтчет";
		НовыйЭлемент.ИмяСписка = "Заявки на авансовый отчет";
		НовыйЭлемент.Записать();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Справочники.Д_ВидыВнутреннихДокументов.НайтиПоНаименованию("Заявка на корректировку бюджета", Истина)) Тогда
		НовыйЭлемент = Справочники.Д_ВидыВнутреннихДокументов.СоздатьЭлемент();
		НовыйЭлемент.Наименование = "Заявка на корректировку бюджета";
		НовыйЭлемент.ИмяПредопределенного = "КорректировкаБюджета";
		НовыйЭлемент.ИмяДокумента = "Д_ЗаявкаНаКорректировкуБюджета";
		НовыйЭлемент.ИмяСписка = "Заявки на корректировку бюджета";
		НовыйЭлемент.Записать();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Справочники.Д_ВидыВнутреннихДокументов.НайтиПоНаименованию("Заявка на оплату", Истина)) Тогда
		НовыйЭлемент = Справочники.Д_ВидыВнутреннихДокументов.СоздатьЭлемент();
		НовыйЭлемент.Наименование = "Заявка на оплату";
		НовыйЭлемент.ИмяПредопределенного = "ЗаявкаНаФинансирование";
		НовыйЭлемент.ИмяДокумента = "Д_ЗаявкаНаФинансирование";
		НовыйЭлемент.ИмяСписка = "Заявки на оплату";
		НовыйЭлемент.Записать();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Справочники.Д_ВидыВнутреннихДокументов.НайтиПоНаименованию("Заявка на согласование договора", Истина)) Тогда
		НовыйЭлемент = Справочники.Д_ВидыВнутреннихДокументов.СоздатьЭлемент();
		НовыйЭлемент.Наименование = "Заявка на согласование договора";
		НовыйЭлемент.ИмяПредопределенного = "ЗаявкаНаСогласованиеДоговора";
		НовыйЭлемент.ИмяДокумента = "Д_ЗаявкаНаСогласованиеДоговора";
		НовыйЭлемент.ИмяСписка = "Заявки на согласования договоров";
		НовыйЭлемент.Записать();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Справочники.Д_ВидыВнутреннихДокументов.НайтиПоНаименованию("Реестр платежей", Истина)) Тогда
		НовыйЭлемент = Справочники.Д_ВидыВнутреннихДокументов.СоздатьЭлемент();
		НовыйЭлемент.Наименование = "Реестр платежей";
		НовыйЭлемент.ИмяПредопределенного = "ЗаявкаНаОплату";
		НовыйЭлемент.ИмяДокумента = "Д_ЗаявкаНаОплату";
		НовыйЭлемент.ИмяСписка = "Реестры платежей";
		НовыйЭлемент.Записать();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Справочники.Д_ВидыВнутреннихДокументов.НайтиПоНаименованию("Служебная записка", Истина)) Тогда
		НовыйЭлемент = Справочники.Д_ВидыВнутреннихДокументов.СоздатьЭлемент();
		НовыйЭлемент.Наименование = "Служебная записка";
		НовыйЭлемент.ИмяПредопределенного = "СлужебнаяЗаписка";
		НовыйЭлемент.ИмяДокумента = "Д_СлужебнаяЗаписка";
		НовыйЭлемент.ИмяСписка = "Служебные записки";
		НовыйЭлемент.Записать();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СоздатьГруппуСтатейЗатрат(Наименование, Код, РодительСтатьи)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СтатьиЗатрат.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|ГДЕ
	|	(СтатьиЗатрат.Наименование = &Наименование ИЛИ СтатьиЗатрат.Код = &Код)
	|	И СтатьиЗатрат.ЭтоГруппа = Истина";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("Код", Код);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ОбРодирель = Выборка.Ссылка.ПолучитьОбъект();
	Иначе
		ОбРодирель = Справочники.СтатьиЗатрат.СоздатьГруппу();
	КонецЕсли;
	ОбРодирель.Наименование = Наименование;
	ОбРодирель.Код = Код;
	ОбРодирель.Записать();
	
	РодительСтатьи = ОбРодирель.Ссылка;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьСтатьюЗатрат(Наименование, Код, РодительСтатьи, ВидРасходовНУ = Неопределено, СоздаватьНовый = Истина)

	Если ВидРасходовНУ = Неопределено Тогда
		ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ПрочиеРасходы;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СтатьиЗатрат.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|ГДЕ
	|	(СтатьиЗатрат.Наименование = &Наименование ИЛИ СтатьиЗатрат.Код = &Код)
	|	И СтатьиЗатрат.ЭтоГруппа = Ложь";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("Код", Код);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Об = Выборка.Ссылка.ПолучитьОбъект();
	Иначе
		Если НЕ СоздаватьНовый Тогда
			Возврат;		
		КонецЕсли;
		Об = Справочники.СтатьиЗатрат.СоздатьЭлемент();
	КонецЕсли;
	Об.Наименование = Наименование;
	Об.Код = Код;
	Об.Родитель = РодительСтатьи;
	Если Не Об.Предопределенный Тогда
		Об.ВидРасходовНУ = ВидРасходовНУ;
	КонецЕсли;
	Об.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатьиЗатрат()
	
	ОбРодирель = Неопределено;
	СоздатьГруппуСтатейЗатрат("Выручка", "1000.", ОбРодирель);
	СоздатьСтатьюЗатрат("Выручка от реализации", "1000.01", ОбРодирель);
	
	ОбРодирель = Неопределено;
	СоздатьГруппуСтатейЗатрат("Затраты основные", "2011.", ОбРодирель);
	СоздатьСтатьюЗатрат("Затраты на основное сырье", "2011.01", ОбРодирель, Перечисления.ВидыРасходовНУ.МатериальныеРасходы);
	СоздатьСтатьюЗатрат("Затраты на вспомогательные материалы", "2011.02", ОбРодирель, Перечисления.ВидыРасходовНУ.МатериальныеРасходы);
	
	ОбРодирель = Неопределено;
	СоздатьГруппуСтатейЗатрат("Газ, электроэнергия и прочая энергетика", "2050.", ОбРодирель);
	СоздатьСтатьюЗатрат("Газ, мазут, пар потребление", "2050.01", ОбРодирель);
	СоздатьСтатьюЗатрат("Электроэнергия потребление", "2050.02", ОбРодирель);

	ОбРодирель = Неопределено;
	СоздатьГруппуСтатейЗатрат("Общепроизводственные расходы", "2060.", ОбРодирель);
	СоздатьСтатьюЗатрат("Содержание и ремонт зданий и сооружений", "2060.01", ОбРодирель, Перечисления.ВидыРасходовНУ.РемонтОсновныхСредств);
	СоздатьСтатьюЗатрат("Содержание и ремонт оборудования", "2060.02", ОбРодирель, Перечисления.ВидыРасходовНУ.РемонтОсновныхСредств);
	СоздатьСтатьюЗатрат("Содержание ж/д и автотранспорта, ГСМ", "2060.03", ОбРодирель);
	СоздатьСтатьюЗатрат("Аренда офисов, складов", "2060.04", ОбРодирель);
	СоздатьСтатьюЗатрат("Расходы по оформлению тех. документации", "2060.05", ОбРодирель);
	СоздатьСтатьюЗатрат("Малоценное оборудование и запасы", "2060.06", ОбРодирель, Перечисления.ВидыРасходовНУ.МатериальныеРасходы);
	
	ОбРодирель = Неопределено;
	СоздатьГруппуСтатейЗатрат("Заработная плата", "2070.", ОбРодирель);
	СоздатьСтатьюЗатрат("Оплата труда", "2070.01", ОбРодирель, Перечисления.ВидыРасходовНУ.ОплатаТруда);
	СоздатьСтатьюЗатрат("Оплата труда дополнительная", "2070.02", ОбРодирель, Перечисления.ВидыРасходовНУ.ОплатаТруда);
	СоздатьСтатьюЗатрат("Страховые взносы", "2070.03", ОбРодирель, Перечисления.ВидыРасходовНУ.СтраховыеВзносы);
	СоздатьСтатьюЗатрат("НДФЛ на зарплату", "2070.04", ОбРодирель, Перечисления.ВидыРасходовНУ.НалогиИСборы);
	СоздатьСтатьюЗатрат("Премии", "2070.05", ОбРодирель, Перечисления.ВидыРасходовНУ.ОплатаТруда);
	СоздатьСтатьюЗатрат("Оплата больничного", "2070.06", ОбРодирель);
	СоздатьСтатьюЗатрат("Оплата труда (ЕНВД)", "2070.07", ОбРодирель,,Ложь);
	СоздатьСтатьюЗатрат("Страховые взносы (ЕНВД)", "2070.08", ОбРодирель, Перечисления.ВидыРасходовНУ.СтраховыеВзносы, Ложь);
	
	ОбРодирель = Неопределено;
	СоздатьГруппуСтатейЗатрат("Общехозяйственные расходы", "2080.", ОбРодирель);
	СоздатьСтатьюЗатрат("Хозяйственные расходы", "2080.01", ОбРодирель);
	СоздатьСтатьюЗатрат("Канцтовары, литература", "2080.02", ОбРодирель);
	СоздатьСтатьюЗатрат("Питание сотрудников", "2080.03", ОбРодирель);
	СоздатьСтатьюЗатрат("Командировочные и затраты на проживание сотрудников", "2080.04", ОбРодирель, Перечисления.ВидыРасходовНУ.КомандировочныеРасходы);
	СоздатьСтатьюЗатрат("Охрана, пожарная сигнализация", "2080.05", ОбРодирель);
	СоздатьСтатьюЗатрат("Представительские расходы", "2080.06", ОбРодирель, Перечисления.ВидыРасходовНУ.ПредставительскиеРасходы);
	
	ОбРодирель = Неопределено;
	СоздатьГруппуСтатейЗатрат("Услуги сторонних организаций", "2090.", ОбРодирель);
	СоздатьСтатьюЗатрат("Аудиторские услуги", "2090.01", ОбРодирель);
	СоздатьСтатьюЗатрат("Услуги связи, Интернет", "2090.02", ОбРодирель);
	СоздатьСтатьюЗатрат("Юридические, нотариальные и страховые услуги", "2090.03", ОбРодирель);
	СоздатьСтатьюЗатрат("Банковские расходы", "2090.04", ОбРодирель);
	СоздатьСтатьюЗатрат("Услуги обучения сотрудников", "2090.05", ОбРодирель);
	СоздатьСтатьюЗатрат("Компьютерное сопровождение", "2090.06", ОбРодирель);
	СоздатьСтатьюЗатрат("Услуги разработки ПО", "2090.07", ОбРодирель);
	
	ОбРодирель = Неопределено;
	СоздатьГруппуСтатейЗатрат("Налоги", "2120.", ОбРодирель);
	СоздатьСтатьюЗатрат("Налог на имущество", "2120.01", ОбРодирель, Перечисления.ВидыРасходовНУ.НалогиИСборы);
	СоздатьСтатьюЗатрат("Земельный налог", "2120.02", ОбРодирель, Перечисления.ВидыРасходовНУ.НалогиИСборы);
	СоздатьСтатьюЗатрат("Пени и штрафы по налогам", "2120.03", ОбРодирель, Перечисления.ВидыРасходовНУ.НалогиИСборы);
	СоздатьСтатьюЗатрат("Налог УСН", "2120.04", ОбРодирель, Перечисления.ВидыРасходовНУ.НалогиИСборы);
	СоздатьСтатьюЗатрат("Прочие налоги и сборы", "2120.05", ОбРодирель, Перечисления.ВидыРасходовНУ.НалогиИСборы);
	
	ОбРодирель = Неопределено;
	СоздатьГруппуСтатейЗатрат("Затраты по реализации", "2133.", ОбРодирель);
	СоздатьСтатьюЗатрат("Агентское возраграждение", "2133.01", ОбРодирель);
	СоздатьСтатьюЗатрат("Бонусы коммерсантам", "2133.02", ОбРодирель);
	СоздатьСтатьюЗатрат("Реклама и маркетинговые исследования", "2133.03", ОбРодирель);
	СоздатьСтатьюЗатрат("Транспортные услуги", "2133.04", ОбРодирель, Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);
	СоздатьСтатьюЗатрат("Акциз", "2133.05", ОбРодирель);
	СоздатьСтатьюЗатрат("НДС", "2133.06", ОбРодирель);
	СоздатьСтатьюЗатрат("Прочие коммерческие расходы", "2133.07", ОбРодирель);
	СоздатьСтатьюЗатрат("Услуги комиссионеров", "2133.08", ОбРодирель);
	
	ОбРодирель = Неопределено;
	СоздатьГруппуСтатейЗатрат("Прочие расходы", "2140.", ОбРодирель);
	СоздатьСтатьюЗатрат("Амортизационная премия", "2140.01", ОбРодирель, Перечисления.ВидыРасходовНУ.АмортизационнаяПремия);
	СоздатьСтатьюЗатрат("Амортизация", "2140.02", ОбРодирель, Перечисления.ВидыРасходовНУ.Амортизация, Ложь);
	СоздатьСтатьюЗатрат("Проценты по кредитам", "2140.03", ОбРодирель);
	СоздатьСтатьюЗатрат("Списание материалов", "2140.04", ОбРодирель, Перечисления.ВидыРасходовНУ.МатериальныеРасходы);
	СоздатьСтатьюЗатрат("Списание НДС", "2140.05", ОбРодирель);
	СоздатьСтатьюЗатрат("Торговый сбор", "2140.06", ОбРодирель, Перечисления.ВидыРасходовНУ.ТорговыйСбор);
	СоздатьСтатьюЗатрат("Прочие затраты", "2140.07", ОбРодирель);
	СоздатьСтатьюЗатрат("Списание НДС (ЕНВД)", "2140.08", ОбРодирель,,Ложь);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьГруппуСтатейДДС(Наименование, Код, РодительСтатьи)
	
	ТекСтатья = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(Наименование, Истина);
	Если Не ЗначениеЗаполнено(ТекСтатья) Тогда
		ОбРодирель = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьГруппу();
	Иначе
		ОбРодирель = ТекСтатья.ПолучитьОбъект();
	КонецЕсли;
	ОбРодирель.Наименование = Наименование;
	ОбРодирель.Код = Код;
	ОбРодирель.Родитель = РодительСтатьи;
	ОбРодирель.Записать();
	
	РодительСтатьи = ОбРодирель.Ссылка;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьСтатьюДДС(Наименование, Код, ВидДвиженияДенежныхСредств = Неопределено, ВидДвиженияУУ = Неопределено, РодительСтатьи, ЭтоДоход = Ложь)

	Если ВидДвиженияДенежныхСредств = Неопределено Тогда
		ВидДвиженияДенежныхСредств = Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности;
	КонецЕсли;
	Если ВидДвиженияУУ = Неопределено Тогда
		ВидДвиженияУУ = Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности;
	КонецЕсли;
	
	Если Наименование = "Выручка от реализации основной продукции и услуг" Тогда
		ТекСтатья = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Оплата от покупателей", Истина);
		Если Не ЗначениеЗаполнено(ТекСтатья) Тогда
			ТекСтатья = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(Наименование, Истина);
		КонецЕсли;
	Иначе	
		ТекСтатья = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(Наименование, Истина);
	КонецЕсли;	
	Если Не ЗначениеЗаполнено(ТекСтатья) Тогда
		Об = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
	Иначе
		Об = ТекСтатья.ПолучитьОбъект();
	КонецЕсли;
	Об.Наименование = Наименование;
	Об.Код = Код;
	Об.Родитель = РодительСтатьи;
	Если Не Об.Предопределенный Тогда
		Об.ВидДвиженияДенежныхСредств = ВидДвиженияДенежныхСредств;	
	КонецЕсли;
	Об.ВидДеятельности = ВидДвиженияУУ;
	Об.Доход = ЭтоДоход;
	Об.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатьиДДС()
	
	ОбРодирель = Неопределено;
	СоздатьГруппуСтатейДДС("Доходы", "1000.", ОбРодирель);
	ОбРодирель1 = ОбРодирель;
	СоздатьГруппуСтатейДДС("Выручка от реализации", "1100.", ОбРодирель);
	СоздатьСтатьюДДС("Выручка от реализации основной продукции и услуг", "1100.01",
		Перечисления.ВидыДвиженийДенежныхСредств.СредстваПолученныеОтПокупателейИЗаказчиков,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель, Истина);
	СоздатьСтатьюДДС("Выручка от реализации товаров", "1100.02",
		Перечисления.ВидыДвиженийДенежныхСредств.СредстваПолученныеОтПокупателейИЗаказчиков,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель, Истина);
	СоздатьСтатьюДДС("Выручка от прочей реализации", "1100.03",
		Перечисления.ВидыДвиженийДенежныхСредств.СредстваПолученныеОтПокупателейИЗаказчиков,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель, Истина);
	СоздатьСтатьюДДС("Оплата от факторинговой компании", "1100.04",
		Перечисления.ВидыДвиженийДенежныхСредств.СредстваПолученныеОтПокупателейИЗаказчиков,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель, Истина);
	СоздатьСтатьюДДС("Розничная выручка", "1100.05",
		Перечисления.ВидыДвиженийДенежныхСредств.СредстваПолученныеОтПокупателейИЗаказчиков,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель, Истина);
		
	ОбРодирель = ОбРодирель1;
	СоздатьГруппуСтатейДДС("Приход ВНХ/ВГО", "5100.", ОбРодирель);
	СоздатьСтатьюДДС("Поступления в рамках перемещения между источниками", "5100.01",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеПоступленияПоФинансовойДеятельности,
		Перечисления.саб_Фин_ВидыДеятельности.ВХП,
		ОбРодирель, Истина);
		
	ОбРодирель = ОбРодирель1;	
	СоздатьГруппуСтатейДДС("Займы, поступления", "7100.", ОбРодирель);
	СоздатьСтатьюДДС("Займы полученные", "7100.01",
		Перечисления.ВидыДвиженийДенежныхСредств.ПоступленияОтЗаймовИКредитовПредоставленныхДругимиОрганизациями,
		Перечисления.саб_Фин_ВидыДеятельности.Займы,
		ОбРодирель, Истина);
	СоздатьСтатьюДДС("Поступления от погашения займов", "7100.02",
		Перечисления.ВидыДвиженийДенежныхСредств.ПоступленияОтПогашенияЗаймовПредоставленныхДругимОрганизациям,
		Перечисления.саб_Фин_ВидыДеятельности.Займы,
		ОбРодирель, Истина);
	СоздатьСтатьюДДС("Проценты по займам полученные", "7100.03",
		Перечисления.ВидыДвиженийДенежныхСредств.ПоступленияОтПогашенияЗаймовПредоставленныхДругимОрганизациям,
		Перечисления.саб_Фин_ВидыДеятельности.Займы,
		ОбРодирель, Истина);
		
	ОбРодирель = ОбРодирель1;
	СоздатьГруппуСтатейДДС("Прочие доходы", "1500.", ОбРодирель);
	СоздатьСтатьюДДС("Прочие поступления", "1500.01",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеПоступленияПоТекущейДеятельности,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель, Истина);
	СоздатьСтатьюДДС("Возврат от поставщиков", "1500.02",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеПоступленияПоТекущейДеятельности,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель, Истина);
	СоздатьСтатьюДДС("Возврат подотчетных сумм", "1500.03",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеПоступленияПоТекущейДеятельности,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель, Истина);

	ОбРодирель = ОбРодирель1;	
	СоздатьСтатьюДДС("Получение кредитов и займов", "1600.01",
		Перечисления.ВидыДвиженийДенежныхСредств.ПоступленияОтЗаймовИКредитовПредоставленныхДругимиОрганизациями,
		Перечисления.саб_Фин_ВидыДеятельности.ФД,
		ОбРодирель, Истина);
		
	ОбРодирель = ОбРодирель1;	
	СоздатьСтатьюДДС("Поступления от учредителей", "1700.01",
		Перечисления.ВидыДвиженийДенежныхСредств.ПоступлениеДенежныхВкладовСобственников,
		Перечисления.саб_Фин_ВидыДеятельности.ФД,
		ОбРодирель, Истина);
		
	ОбРодирель = ОбРодирель1;	
	СоздатьСтатьюДДС("Курсовые разницы (доход)", "1800.01",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеПоступленияПоФинансовойДеятельности,
		Перечисления.саб_Фин_ВидыДеятельности.ФД,
		ОбРодирель, Истина);
		
	ОбРодирель = ОбРодирель1;	
	СоздатьСтатьюДДС("Поступления от реализации ОС", "3100.01",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоИнвестиционнойДеятельности,
		Перечисления.саб_Фин_ВидыДеятельности.ИД,
		ОбРодирель, Истина);
		
	ОбРодирель = ОбРодирель1;	
	СоздатьСтатьюДДС("Доход от продажи долей, акций", "4100.01",
		Перечисления.ВидыДвиженийДенежныхСредств.ПоступленияОтПродажиАкцийДругихОрганизаций,
		Перечисления.саб_Фин_ВидыДеятельности.ФД,
		ОбРодирель, Истина);

	ОбРодирель = Неопределено;
	СоздатьГруппуСтатейДДС("Расходы", "2000.", ОбРодирель);
	ОбРодирель1 = ОбРодирель;
	СоздатьГруппуСтатейДДС("Основное сырье и товары", "2011.", ОбРодирель);
	ОбРодирель2 = ОбРодирель;
	СоздатьСтатьюДДС("Закупка основного сырья", "2011.01",
		Перечисления.ВидыДвиженийДенежныхСредств.ОплатаОборотныхАктивов,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
	СоздатьСтатьюДДС("Закупка товаров для перепродажи", "2011.02",
		Перечисления.ВидыДвиженийДенежныхСредств.ОплатаОборотныхАктивов,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
	СоздатьСтатьюДДС("Оплата поставщикам (подрядчикам)", "2011.03",
		Перечисления.ВидыДвиженийДенежныхСредств.ОплатаОборотныхАктивов,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
		
	ОбРодирель = ОбРодирель1;
	СоздатьГруппуСтатейДДС("Затраты на вспомогательные материалы", "2030.", ОбРодирель);
	СоздатьСтатьюДДС("Закупка вспомогательного сырья", "2030.01",
		Перечисления.ВидыДвиженийДенежныхСредств.ОплатаОборотныхАктивов,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);

	ОбРодирель = ОбРодирель1;
	СоздатьГруппуСтатейДДС("Расходы на газ, энергетику", "2050.", ОбРодирель);
	СоздатьСтатьюДДС("Газ, пар, прочее топливо для отопления", "2050.01",
		Перечисления.ВидыДвиженийДенежныхСредств.ОплатаОборотныхАктивов,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
	СоздатьСтатьюДДС("Расходы на энергетику", "2050.02",
		Перечисления.ВидыДвиженийДенежныхСредств.ОплатаОборотныхАктивов,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
		
	ОбРодирель = ОбРодирель1;
	СоздатьГруппуСтатейДДС("Общепроизводственные расходы", "2060.", ОбРодирель);
	СоздатьСтатьюДДС("Расходы на содержание зданий и сооружений", "2060.01",
		Перечисления.ВидыДвиженийДенежныхСредств.ОплатаОборотныхАктивов,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
	СоздатьСтатьюДДС("Расходы на содержание оборудования", "2060.02",
		Перечисления.ВидыДвиженийДенежныхСредств.ОплатаОборотныхАктивов,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
	СоздатьСтатьюДДС("Аренда офисов, складов", "2060.03",
		Перечисления.ВидыДвиженийДенежныхСредств.ОплатаОборотныхАктивов,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
	СоздатьСтатьюДДС("Расходы на текущее содержание автотранспорта", "2060.04",
		Перечисления.ВидыДвиженийДенежныхСредств.ОплатаОборотныхАктивов,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
	СоздатьСтатьюДДС("Расходы по оформлению техдокументации, сертификации, лицензирования", "2060.05",
		Перечисления.ВидыДвиженийДенежныхСредств.ОплатаОборотныхАктивов,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
	СоздатьСтатьюДДС("Малоценное оборудование и запасы", "2060.06",
		Перечисления.ВидыДвиженийДенежныхСредств.ОплатаОборотныхАктивов,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
		
	ОбРодирель = ОбРодирель1;
	СоздатьГруппуСтатейДДС("Заработная плата, взносы, НДФЛ", "2070.", ОбРодирель);
	СоздатьСтатьюДДС("Выплата заработной платы", "2070.01",
		Перечисления.ВидыДвиженийДенежныхСредств.ОплатаТруда,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
	СоздатьСтатьюДДС("Выплата заработной платы дополнительно", "2070.02",
		Перечисления.ВидыДвиженийДенежныхСредств.ОплатаТруда,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
	СоздатьСтатьюДДС("Страховые взносы", "2070.03",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
	СоздатьСтатьюДДС("НДФЛ с зарплаты", "2070.04",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
	СоздатьСтатьюДДС("Премии", "2070.05",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
		
	ОбРодирель = ОбРодирель1;
	СоздатьГруппуСтатейДДС("Общехозяйственные расходы", "2080.", ОбРодирель);
	СоздатьСтатьюДДС("Хозяйственные расходы", "2080.01",
		Перечисления.ВидыДвиженийДенежныхСредств.ОплатаОборотныхАктивов,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
	СоздатьСтатьюДДС("Канцтовары, литература", "2080.02",
		Перечисления.ВидыДвиженийДенежныхСредств.ОплатаОборотныхАктивов,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
	СоздатьСтатьюДДС("Питание сотрудников", "2080.03",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
	СоздатьСтатьюДДС("Командировочные, оплата за проживание сотрудников", "2080.04",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
	СоздатьСтатьюДДС("Охрана и пожарная сигнализация", "2080.05",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
	СоздатьСтатьюДДС("Представительские расходы", "2080.06",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
		
	ОбРодирель = ОбРодирель1;
	СоздатьГруппуСтатейДДС("Услуги сторонних организаций", "2100.", ОбРодирель);
	СоздатьСтатьюДДС("Аудиторские и консалтинговые услуги", "2100.01",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
	СоздатьСтатьюДДС("Услуги связи, Интернет", "2100.02",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
	СоздатьСтатьюДДС("Юридические и нотариальные", "2100.03",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
	СоздатьСтатьюДДС("Расходы на услуги банков", "2100.04",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
	СоздатьСтатьюДДС("Обучение сотрудников", "2100.05",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
	СоздатьСтатьюДДС("Компьютерное сопровождение", "2100.06",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
	СоздатьСтатьюДДС("Услуги разработки ПО", "2100.07",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
	СоздатьСтатьюДДС("Прочие услуги", "2100.08",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
		
	ОбРодирель = ОбРодирель1;
	СоздатьГруппуСтатейДДС("Проценты по кредитам", "2110.", ОбРодирель);
	СоздатьСтатьюДДС("Выплата процентов по кредитам и займам", "2110.01",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
	СоздатьСтатьюДДС("Проценты по прочим кредитам", "2110.02",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);

	ОбРодирель = ОбРодирель1;
	СоздатьГруппуСтатейДДС("Налоги", "2120.", ОбРодирель);
	СоздатьСтатьюДДС("Налог на имущество", "2120.01",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
	СоздатьСтатьюДДС("Земельный налог", "2120.02",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
	СоздатьСтатьюДДС("Пени и штрафы по налогам", "2120.03",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
	СоздатьСтатьюДДС("Налог УСН", "2120.04",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
	СоздатьСтатьюДДС("Прочие налоги и сборы", "2120.05",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
	СоздатьСтатьюДДС("Налог на прибыль", "2120.06",
		Перечисления.ВидыДвиженийДенежныхСредств.НалогНаПрибыль,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
	СоздатьСтатьюДДС("НДФЛ с дивидендов", "2120.07",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
		
	ОбРодирель = ОбРодирель1;
	СоздатьГруппуСтатейДДС("Коммерческие расходы", "2133.", ОбРодирель);
	СоздатьСтатьюДДС("Агентское вознаграждение", "2133.01",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
	СоздатьСтатьюДДС("Бонусы коммерсантам", "2133.02",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
	СоздатьСтатьюДДС("Транспортые расходы по реализации", "2133.03",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
	СоздатьСтатьюДДС("Прочие коммерческие расходы", "2133.04",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
	СоздатьСтатьюДДС("Реклама и маркетинговые исследования", "2133.05",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
	СоздатьСтатьюДДС("Акциз", "2133.06",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
	СоздатьСтатьюДДС("НДС", "2133.07",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
		
	ОбРодирель = ОбРодирель1;
	СоздатьГруппуСтатейДДС("Прочие управленческие расходы", "2210.", ОбРодирель);
	СоздатьСтатьюДДС("Представительские расходы (свыше лимита)", "2210.01",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
	СоздатьСтатьюДДС("Возврат покупателям", "2210.02",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
	СоздатьСтатьюДДС("Выдача подотчетных сумм", "2210.03",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
	СоздатьСтатьюДДС("Прочие расходы", "2210.04",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности,
		Перечисления.саб_Фин_ВидыДеятельности.ТД,
		ОбРодирель);
		
	ОбРодирель = ОбРодирель1;
	СоздатьСтатьюДДС("Погашение кредитов и займов", "2220.01",
		Перечисления.ВидыДвиженийДенежныхСредств.ПогашениеЗаймовИКредитов,
		Перечисления.саб_Фин_ВидыДеятельности.ФД,
		ОбРодирель);
		
	ОбРодирель = ОбРодирель1;
	СоздатьСтатьюДДС("Выкуп долей, акций", "4300.01",
		Перечисления.ВидыДвиженийДенежныхСредств.ПриобретениеАкцийДругихОрганизаций,
		Перечисления.саб_Фин_ВидыДеятельности.ФД,
		ОбРодирель);
		
	ОбРодирель = ОбРодирель1;
	СоздатьСтатьюДДС("Выплата дивидендов", "4400.01",
		Перечисления.ВидыДвиженийДенежныхСредств.ВыплатаДивидендов,
		Перечисления.саб_Фин_ВидыДеятельности.ФД,
		ОбРодирель);
		
	ОбРодирель = ОбРодирель1;
	СоздатьСтатьюДДС("Рентные платежи", "4600.01",
		Перечисления.ВидыДвиженийДенежныхСредств.ВыплатаДивидендов,
		Перечисления.саб_Фин_ВидыДеятельности.ФД,
		ОбРодирель);
		
	ОбРодирель = ОбРодирель1;
	СоздатьГруппуСтатейДДС("Расход ВНХ/ВГО", "5200.", ОбРодирель);
	СоздатьСтатьюДДС("Расходы в рамках перемещения между источниками", "5200.01",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности,
		Перечисления.саб_Фин_ВидыДеятельности.ВХП,
		ОбРодирель);
		
	ОбРодирель = ОбРодирель1;
	СоздатьГруппуСтатейДДС("Выплаты по займам", "7200.", ОбРодирель);
	СоздатьСтатьюДДС("Возврат займов полученных", "7200.01",
		Перечисления.ВидыДвиженийДенежныхСредств.ПогашениеЗаймовИКредитов,
		Перечисления.саб_Фин_ВидыДеятельности.ФД,
		ОбРодирель);
	СоздатьСтатьюДДС("Предоставление займов", "7200.02",
		Перечисления.ВидыДвиженийДенежныхСредств.ПриобретениеДолговыхЦенныхБумагПредоставлениеЗаймов,
		Перечисления.саб_Фин_ВидыДеятельности.ФД,
		ОбРодирель);
		
	ОбРодирель = ОбРодирель1;
	СоздатьСтатьюДДС("Курсовые разницы (расход)", "1900.01",
		Перечисления.ВидыДвиженийДенежныхСредств.ВыплатаДивидендов,
		Перечисления.саб_Фин_ВидыДеятельности.ФД,
		ОбРодирель);

	ОбРодирель = ОбРодирель1;
	СоздатьСтатьюДДС("Приобретение ОС", "3200.01",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоИнвестиционнойДеятельности,
		Перечисления.саб_Фин_ВидыДеятельности.ИД,
		ОбРодирель); 
		
	ОбРодирель = ОбРодирель1;
	СоздатьСтатьюДДС("Кап. ремонт зданий и оборудования", "3300.01",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоИнвестиционнойДеятельности,
		Перечисления.саб_Фин_ВидыДеятельности.ИД,
		ОбРодирель);
		
	ОбРодирель = ОбРодирель1;
	СоздатьСтатьюДДС("Неклассифицировано", "0000.00",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности,
		,
		);
		
	ОбРодирель = ОбРодирель1;
	СоздатьСтатьюДДС("Неклассифицировано", "0000.00",
		Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности,
		,
		); 
			

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтавкиНДС()
	
	Если Не ЗначениеЗаполнено(Справочники.СтавкиНДС.НайтиПоНаименованию("10%", Истина)) Тогда
		Об = Справочники.СтавкиНДС.СоздатьЭлемент();
		Об.Наименование = "10%";
		Об.Ставка = 10;
		Об.Записать();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Справочники.СтавкиНДС.НайтиПоНаименованию("18%(до 2019)", Истина)) Тогда
		Об = Справочники.СтавкиНДС.СоздатьЭлемент();
		Об.Наименование = "18%(до 2019)";
		Об.Ставка = 18;
		Об.Записать();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Справочники.СтавкиНДС.НайтиПоНаименованию("20%", Истина)) Тогда
		Об = Справочники.СтавкиНДС.СоздатьЭлемент();
		Об.Наименование = "20%";
		Об.Ставка = 20;
		Об.Записать();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Справочники.СтавкиНДС.НайтиПоНаименованию("Без НДС", Истина)) Тогда
		Об = Справочники.СтавкиНДС.СоздатьЭлемент();
		Об.Наименование = "Без НДС";
		об.НеОблагается = Истина;
		Об.Записать();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Справочники.СтавкиНДС.НайтиПоНаименованию("Произвольная", Истина)) Тогда
		Об = Справочники.СтавкиНДС.СоздатьЭлемент();
		Об.Наименование = "Произвольная";
		Об.Записать();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКассы()
	
	Если Не ЗначениеЗаполнено(Справочники.Кассы.НайтиПоНаименованию("Касса", Истина)) Тогда
		Об = Справочники.Кассы.СоздатьЭлемент();
		Об.Наименование = "Касса";
		Об.ВидИсточника = Перечисления.ГД_ВидыИсточников.Касса;
		Об.СчетУчета = ПланыСчетов.Учетный.НайтиПоКоду("50.01");
		Об.ВалютаДенежныхСредств = Справочники.Валюты.НайтиПоКоду("643");
		Об.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСубконто()
	
	СоздатьСубконто("Банковские счета", "СправочникСсылка.БанковскиеСчета");
	СоздатьСубконто("Ведомости", "ДокументСсылка.УЧ_ВыплатаЗП");
	СоздатьСубконто("Виды начислений оплаты труда", "СправочникСсылка.ВидыНачисленийОплатыТруда");
	СоздатьСубконто("Внеоборотные активы", "СправочникСсылка.ОбъектыСтроительства");
	Типы = Новый Массив;
	Типы.Добавить("СправочникСсылка.ДоговорыКонтрагентов");
	Типы.Добавить("СправочникСсылка.ВнутренниеДоговоры");
	СоздатьСубконто("Внутренние договоры", Типы);
	СоздатьСубконто("Договоры", "СправочникСсылка.ДоговорыКонтрагентов");
	Типы = Новый Массив;
	Типы.Добавить("ДокументСсылка.УЧ_ДвижениеДС");
	Типы.Добавить("ДокументСсылка.УЧ_КорректировкаРеализации");
	Типы.Добавить("ДокументСсылка.УЧ_ПоступлениеТоваров");
	Типы.Добавить("ДокументСсылка.УЧ_Реализация");
	Типы.Добавить("СправочникСсылка.сабСтрокиГрафиковДоговоров");
	Типы.Добавить("ДокументСсылка.УЧ_ВыпускПродукции");
	СоздатьСубконто("Документ", Типы);
	СоздатьСубконто("Заказы клиентов", "ДокументСсылка.ЗаказКлиента");
	СоздатьСубконто("Заказы поставщикам", "ДокументСсылка.ЗаказПоставщику");
	Типы = Новый Массив;
	Типы.Добавить("ДокументСсылка.ЗаказКлиента");
	Типы.Добавить("ДокументСсылка.ЗаказПоставщику");
	Типы.Добавить("ДокументСсылка.ЗаказНаПроизводство");
	Типы.Добавить("ДокументСсылка.ЗаказНаВозвратОтКлиента");
	Типы.Добавить("ДокументСсылка.ЗаказНаПеремещение");
	СоздатьСубконто("Заказы", Типы);
	Типы = Новый Массив;
	//Типы.Добавить("ДокументСсылка.Д_ЗаявкаНаОтгрузку");
	Типы.Добавить("СправочникСсылка.ДоговорыКонтрагентов");
	Типы.Добавить("СправочникСсылка.Контрагенты");
	СоздатьСубконто("Контрагент", Типы);
	Типы = Новый Массив;
	Типы.Добавить("СправочникСсылка.Кассы");
	Типы.Добавить("СправочникСсылка.БанковскиеСчета");
	СоздатьСубконто("Источники финансирования", Типы);
	СоздатьСубконто("Кассы", "СправочникСсылка.Кассы");
	
	Типы = Новый Массив;
	Типы.Добавить("СправочникСсылка.КлючиАналитикиБюджетов");
	//Типы.Добавить("СправочникСсылка.Проекты");
	СоздатьСубконто("Ключи аналитики", Типы);
	
	СоздатьСубконто("Контрагенты", "СправочникСсылка.Контрагенты");
	Типы = Новый Массив;
	Типы.Добавить("СправочникСсылка.СтатьиДвиженияДенежныхСредств");
	//Типы.Добавить("СправочникСсылка.СтатьиДоходовРасходов");
	Типы.Добавить("Строка");
	Типы.Добавить("СправочникСсылка.Контрагенты");
	Типы.Добавить("СправочникСсылка.СтатьиЗатрат");
	СоздатьСубконто("Контрагенты бюджет", Типы);
	Типы = Новый Массив;
	Типы.Добавить("СправочникСсылка.Организации");
	Типы.Добавить("СправочникСсылка.Контрагенты");
	СоздатьСубконто("Контрагенты и организации", Типы);
	Типы = Новый Массив;
	Типы.Добавить("СправочникСсылка.Организации");
	Типы.Добавить("СправочникСсылка.Предприятия");
	СоздатьСубконто("Организации и предприятия", Типы);
	СоздатьСубконто("Кредиты и займы", "СправочникСсылка.ДоговорыКредитовИДепозитов");
	СоздатьСубконто("Материалы", "СправочникСсылка.Номенклатура");
	Типы = Новый Массив;
	Типы.Добавить("ПеречислениеСсылка.ВидыПлатежейВГосБюджет");
	Типы.Добавить("СправочникСсылка.СтатьиЗатрат");
	Типы.Добавить("Строка");
	СоздатьСубконто("Налоги бюджет", Типы);
	СоздатьСубконто("Виды налогов и сборов", "ПеречислениеСсылка.ВидыПлатежейВГосБюджет");
	СоздатьСубконто("Налоги и сборы", "СправочникСсылка.ВидыНалоговИПлатежейВБюджет");
	СоздатьСубконто("Номенклатура", "СправочникСсылка.Номенклатура");
	СоздатьСубконто("Номенклатурная группа", "СправочникСсылка.НоменклатурныеГруппы");
	Типы = Новый Массив;
	Типы.Добавить("СправочникСсылка.Номенклатура");
	Типы.Добавить("СправочникСсылка.НоменклатурныеГруппы");
	СоздатьСубконто("Номенклатура / Ном.группа", Типы);
	СоздатьСубконто("Серии номенклатуры", "СправочникСсылка.СерииНоменклатуры");
	СоздатьСубконто("Организации", "СправочникСсылка.Организации");
	СоздатьСубконто("Основные средства", "СправочникСсылка.ОсновныеСредства");
	СоздатьСубконто("Нематериальные активы", "СправочникСсылка.НематериальныеАктивы");
	СоздатьСубконто("Подразделения", "СправочникСсылка.СтруктураПредприятия");
	СоздатьСубконто("Предприятия", "СправочникСсылка.Предприятия");
	СоздатьСубконто("Предприятия холдинга", "СправочникСсылка.сабПредприятияХолдинга");
	СоздатьСубконто("Представительские расходы", "СправочникСсылка.ПредставительскиеРасходы");
	СоздатьСубконто("Проекты", "СправочникСсылка.Проекты");
	СоздатьСубконто("Доходы будущих периодов", "СправочникСсылка.ДоходыБудущихПериодов");
	СоздатьСубконто("Расходы будущих периодов", "СправочникСсылка.РасходыБудущихПериодов");
	СоздатьСубконто("Склады", "СправочникСсылка.Склады");
	Типы = Новый Массив;
	Типы.Добавить("СправочникСсылка.Сотрудники");
	Типы.Добавить("СправочникСсылка.ФизическиеЛица");
	СоздатьСубконто("Сотрудники", Типы);
	СоздатьСубконто("Статьи ДДС", "СправочникСсылка.СтатьиДвиженияДенежныхСредств");
	//СоздатьСубконто("Статьи доходов и расходов", "СправочникСсылка.СтатьиДоходовРасходов");
	СоздатьСубконто("Статьи затрат", "СправочникСсылка.СтатьиЗатрат");
	СоздатьСубконто("Статьи оборотного баланса", "СправочникСсылка.Д_СтатьиОборотки");
	Типы = Новый Массив;
	Типы.Добавить("СправочникСсылка.Учредители");
	Типы.Добавить("СправочникСсылка.ФизическиеЛица");
	//Типы.Добавить("СправочникСсылка.Контрагенты");
	СоздатьСубконто("Учредители", Типы);
	СоздатьСубконто("Фонды", "СправочникСсылка.Фонды");
	СоздатьСубконто("Ценные бумаги", "СправочникСсылка.ЦенныеБумаги");
	СоздатьСубконто("Прочие доходы и расходы", "СправочникСсылка.ПрочиеДоходыИРасходы");

КонецПроцедуры

&НаСервере
Процедура СоздатьСубконто(Наименование, Типы)
	
	Если Не ЗначениеЗаполнено(ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию(Наименование, Истина)) Тогда
		Об = ПланыВидовХарактеристик.ВидыСубконто.СоздатьЭлемент();	
	Иначе
		//Об = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию(Наименование, Истина).ПолучитьОбъект();
		Возврат;
	КонецЕсли;
	
	Массив = Новый Массив;
	Если ТипЗнч(Типы) = Тип("Массив") Тогда
		Для каждого ТекТип Из Типы Цикл
			Массив.Добавить(Тип(ТекТип));
		КонецЦикла; 
	Иначе
		Массив.Добавить(Тип(Типы));
	КонецЕсли;
	ОписаниеТиповС = Новый ОписаниеТипов(Массив);
	
	Об.Наименование = Наименование;
	Об.ТипЗначения = ОписаниеТиповС;
	Об.Записать();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПланСчетовУчетный()
	
	СоздатьУчетныйСчет("00",
	"Вспомогательный",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	Неопределено,
	Неопределено,
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	Неопределено);
	
	СоздатьУчетныйСчет("001",
	"ОС арендованные, на отв. хранении",
	ВидСчета.Активный,
	Истина,
	Истина,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Основные средства", Истина),
	Неопределено,
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	Неопределено);
	
	СоздатьУчетныйСчет("002",
	"ТМЦ на отв. хранении, неликвиды",
	ВидСчета.Активный,
	Истина,
	Истина,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Материалы", Истина),
	Неопределено,
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	Неопределено);
	
	СоздатьУчетныйСчет("004",
	"ТМЦ, списаные за баланс",
	ВидСчета.Активный,
	Истина,
	Истина,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Материалы", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	Неопределено);
	
	СоздатьУчетныйСчет("005",
	"Списанная деб. задолженность",
	ВидСчета.АктивноПассивный,
	Истина,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Договоры", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	Неопределено);
	
	СоздатьУчетныйСчет("006",
	"Списанная кред. задолженность",
	ВидСчета.АктивноПассивный,
	Истина,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Договоры", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	Неопределено);

	СоздатьУчетныйСчет("01",
	"Основные средства",
	ВидСчета.Активный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Основные средства", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	Неопределено);
	
	СоздатьУчетныйСчет("04",
	"Нематериальные активы",
	ВидСчета.Активный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Нематериальные активы", Истина),
	Неопределено,
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	Неопределено);
	
	СоздатьУчетныйСчет("02",
	"Амортизация основных средств",
	ВидСчета.Пассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Основные средства", Истина),
	Неопределено,
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	Неопределено);
	
	СоздатьУчетныйСчет("08",
	"Вложения во внеоборотные активы",
	ВидСчета.Активный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Внеоборотные активы", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	Неопределено);
	
	СоздатьУчетныйСчет("08.03",
	"Строительство/ремонт объектов основных средств",
	ВидСчета.Активный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Внеоборотные активы", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("08"));
	
	СоздатьУчетныйСчет("08.04",
	"Приобретение объектов основных средств",
	ВидСчета.Активный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Внеоборотные активы", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("08"));
	
	СоздатьУчетныйСчет("10",
	"Материалы",
	ВидСчета.Активный,
	Ложь,
	Истина,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Материалы", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	Неопределено);
	
	СоздатьУчетныйСчет("10.01",
	"Сырье и материалы",
	ВидСчета.Активный,
	Ложь,
	Истина,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Материалы", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("10"));
	
	СоздатьУчетныйСчет("10.02",
	"Вспомогательное сырье",
	ВидСчета.Активный,
	Ложь,
	Истина,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Материалы", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("10"));
	
	СоздатьУчетныйСчет("10.03",
	"Топливо",
	ВидСчета.Активный,
	Ложь,
	Истина,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Материалы", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("10"));
	
	СоздатьУчетныйСчет("10.04",
	"Тара и тарные материалы",
	ВидСчета.Активный,
	Ложь,
	Истина,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Материалы", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("10"));
	
	СоздатьУчетныйСчет("10.05",
	"ТМЦ для текущей деятельности",
	ВидСчета.Активный,
	Ложь,
	Истина,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Материалы", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("10"));
	
	СоздатьУчетныйСчет("10.06",
	"ТМЦ для инвестиционной деятельности",
	ВидСчета.Активный,
	Ложь,
	Истина,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Материалы", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Внеоборотные активы", Истина),
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("10"));
	
	СоздатьУчетныйСчет("10.07",
	"ТМЦ, переданные в переработку на сторону",
	ВидСчета.Активный,
	Ложь,
	Истина,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Материалы", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("10"));

	
	СоздатьУчетныйСчет("10.08",
	"ТМЦ для продажи (неликвиды)",
	ВидСчета.Активный,
	Ложь,
	Истина,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Материалы", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("10"));
	
	СоздатьУчетныйСчет("10.09",
	"Инвентарь и хозяйственные принадлежности",
	ВидСчета.Активный,
	Ложь,
	Истина,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Материалы", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("10"));
	
	СоздатьУчетныйСчет("20",
	"Основное производство",
	ВидСчета.Активный,
	Ложь,
	Ложь,
	Ложь,
	Истина,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура / Ном.группа", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	Неопределено);
	
	СоздатьУчетныйСчет("25",
	"Общепроизводственные расходы",
	ВидСчета.Активный,
	Ложь,
	Ложь,
	Ложь,
	Истина,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина),
	Неопределено,
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	Неопределено);
	
	СоздатьУчетныйСчет("40",
	"Выпуск продукции",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Истина,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура / Ном.группа", Истина),
	Неопределено,
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	Неопределено);
	
	СоздатьУчетныйСчет("41",
	"Товары на складах",
	ВидСчета.Активный,
	Ложь,
	Истина,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	Неопределено);
	
	СоздатьУчетныйСчет("0041",
	"Резервы товаров на складах",
	ВидСчета.Активный,
	Истина,
	Истина,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Заказы", Истина),
	Ложь,
	Ложь,
	Ложь,
	Неопределено);

	
	СоздатьУчетныйСчет("43",
	"Готовая продукция",
	ВидСчета.Активный,
	Ложь,
	Истина,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	Неопределено);
	
	СоздатьУчетныйСчет("44",
	"Расходы на продажу",
	ВидСчета.Активный,
	Ложь,
	Ложь,
	Ложь,
	Истина,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина),
	Неопределено,
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	Неопределено);
	
	СоздатьУчетныйСчет("45",
	"Товары отгруженные",
	ВидСчета.Активный,
	Ложь,
	Истина,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина),
	Неопределено,
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	Неопределено);
	
	СоздатьУчетныйСчет("45.01",
	"Товары в пути",
	ВидСчета.Активный,
	Ложь,
	Истина,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты и организации", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("45"));
	
	СоздатьУчетныйСчет("45.02",
	"Товары на комиссии",
	ВидСчета.Активный,
	Ложь,
	Истина,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("45"));
	
	СоздатьУчетныйСчет("50",
	"Касса",
	ВидСчета.Активный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи ДДС", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Кассы", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Ключи аналитики", Истина),
	Истина,
	Ложь,
	Истина,
	Неопределено);
	
	СоздатьУчетныйСчет("50.01",
	"Касса организации",
	ВидСчета.Активный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи ДДС", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Кассы", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Ключи аналитики", Истина),
	Истина,
	Ложь,
	Истина,
	ПланыСчетов.Учетный.НайтиПоКоду("50"));
	
	СоздатьУчетныйСчет("50.02",
	"Касса организации (в валюте)",
	ВидСчета.Активный,
	Ложь,
	Ложь,
	Истина,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи ДДС", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Кассы", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Ключи аналитики", Истина),
	Истина,
	Ложь,
	Истина,
	ПланыСчетов.Учетный.НайтиПоКоду("50"));
	
	//СоздатьУчетныйСчет("50.03",
	//"Касса магазина",
	//ВидСчета.Активный,
	//Ложь,
	//Ложь,
	//Ложь,
	//Ложь,
	//ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи ДДС", Истина),
	//ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Кассы", Истина),
	//ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Ключи аналитики", Истина),
	//Истина,
	//Ложь,
	//Истина,
	//ПланыСчетов.Учетный.НайтиПоКоду("50"));
	
	СоздатьУчетныйСчет("51",
	"Расчетные счета",
	ВидСчета.Активный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи ДДС", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Банковские счета", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Ключи аналитики", Истина),
	Истина,
	Ложь,
	Истина,
	Неопределено);
	
	СоздатьУчетныйСчет("51.01",
	"Расчетные счета",
	ВидСчета.Активный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи ДДС", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Банковские счета", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Ключи аналитики", Истина),
	Истина,
	Ложь,
	Истина,
	ПланыСчетов.Учетный.НайтиПоКоду("51"));
	
	СоздатьУчетныйСчет("51.02",
	"Валютные счета",
	ВидСчета.Активный,
	Ложь,
	Ложь,
	Истина,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи ДДС", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Банковские счета", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Ключи аналитики", Истина),
	Истина,
	Ложь,
	Истина,
	ПланыСчетов.Учетный.НайтиПоКоду("51"));
	
	СоздатьУчетныйСчет("51.09",
	"Виртуальные расчетные счета",
	ВидСчета.Активный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи ДДС", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Банковские счета", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Ключи аналитики", Истина),
	Истина,
	Ложь,
	Истина,
	ПланыСчетов.Учетный.НайтиПоКоду("51"));
	
	СоздатьУчетныйСчет("55",
	"Казна",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	Неопределено,
	Неопределено,
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	Неопределено);
	
	СоздатьУчетныйСчет("55.01",
	"Казна",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи ДДС", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Предприятия", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Подразделения", Истина),
	Истина,
	Истина,
	Истина,
	ПланыСчетов.Учетный.НайтиПоКоду("55"));
	
	СоздатьУчетныйСчет("55.02",
	"Казна неденежная",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Предприятия", Истина),
	Неопределено,
	Неопределено,
	Истина,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("55"));
	
	СоздатьУчетныйСчет("57",
	"Переводы в пути",
	ВидСчета.Активный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты и организации", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Внутренние договоры", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	Неопределено);
	
	СоздатьУчетныйСчет("57.01",
	"Переводы в пути",
	ВидСчета.Активный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты и организации", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Внутренние договоры", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("57"));
	
	СоздатьУчетныйСчет("57.03",
	"Продажи по платежным картам",
	ВидСчета.Активный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Договоры", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("57"));
	
	СоздатьУчетныйСчет("58",
	"Финансовые вложения",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	Неопределено,
	Неопределено,
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	Неопределено);
	
	СоздатьУчетныйСчет("58.01",
	"Долговые ценные бумаги",
	ВидСчета.АктивноПассивный,
	Ложь,
	Истина,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Ценные бумаги", Истина),
	Неопределено,
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("58"));
	
	СоздатьУчетныйСчет("58.02",
	"Предоставленные займы",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Кредиты и займы", Истина),
	Неопределено,
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("58"));
	
	СоздатьУчетныйСчет("58.03",
	"Проценты по предоставленным займам",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Кредиты и займы", Истина),
	Неопределено,
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("58"));
	
	СоздатьУчетныйСчет("60",
	"Расчеты с поставщиками и подрядчиками",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Договоры", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	Неопределено);
	
	СоздатьУчетныйСчет("60.01",
	"Поставщики основного сырья",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Договоры", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Документ", Истина),
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("60"));
	
	СоздатьУчетныйСчет("60.02",
	"Поставщики вспомогательного сырья",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Договоры", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("60"));
	
	СоздатьУчетныйСчет("60.03",
	"Поставщики услуг",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Договоры", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("60"));
	
	СоздатьУчетныйСчет("60.04",
	"Поставщики МБП",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Договоры", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("60"));
	
	СоздатьУчетныйСчет("60.05",
	"Поставщики инвестиций",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Договоры", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Внеоборотные активы", Истина),
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("60"));
	
	СоздатьУчетныйСчет("62",
	"Расчеты с покупателями и заказчиками",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Договоры", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	Неопределено);
	
	СоздатьУчетныйСчет("62.01",
	"Расчеты с покупателями основной продукции",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Договоры", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Документ", Истина),
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("62"));
	
	СоздатьУчетныйСчет("62.02",
	"Расчеты с покупателями побочной продукции",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Договоры", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("62"));
	
	СоздатьУчетныйСчет("62.03",
	"Расчеты с прочими покупателями",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Договоры", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("62"));
	
	СоздатьУчетныйСчет("66",
	"Расчеты по краткосрочным кредитам и займам",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Кредиты и займы", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	Неопределено);
	
	СоздатьУчетныйСчет("66.01",
	"Краткосрочные кредиты и займы",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Кредиты и займы", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("66"));
	
	СоздатьУчетныйСчет("66.02",
	"Проценты по краткосрочным кредитам и займам",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Кредиты и займы", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("66"));
	
	СоздатьУчетныйСчет("67",
	"Расчеты по долгосрочным кредитам и займам",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Кредиты и займы", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	Неопределено);
	
	СоздатьУчетныйСчет("67.01",
	"Кредиты",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Кредиты и займы", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("67"));
	
	СоздатьУчетныйСчет("67.02",
	"Проценты по кредитам",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Кредиты и займы", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("67"));
	
	СоздатьУчетныйСчет("67.03",
	"Займы",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Кредиты и займы", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("67"));
	
	СоздатьУчетныйСчет("67.04",
	"Проценты по займам",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Кредиты и займы", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("67"));
	
	СоздатьУчетныйСчет("68",
	"Расчеты по налогам и сборам",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Налоги и сборы", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Организации", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	Неопределено);
	
	СоздатьУчетныйСчет("68.01",
	"Расчеты по налогам и сборам",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Налоги и сборы", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Организации", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("68"));
	
	СоздатьУчетныйСчет("68.02",
	"НДФЛ при исполнении обязанностей налогового агента",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Налоги и сборы", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Организации", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Сотрудники", Истина),
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("68"));
	
	СоздатьУчетныйСчет("68.03",
	"Расчеты по налогам на основные средства",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Налоги и сборы", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Организации", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Основные средства", Истина),
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("68"));
	
	СоздатьУчетныйСчет("69",
	"Расчеты по социальному страхованию и обеспечению",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Налоги и сборы", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Организации", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Сотрудника", Истина),
	Ложь,
	Ложь,
	Ложь,
	Неопределено);
	
	СоздатьУчетныйСчет("70",
	"Расчеты по оплате труда",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Истина,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Сотрудники", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Виды начислений оплаты труда", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Ведомости", Истина),
	Ложь,
	Ложь,
	Истина,
	Неопределено);
	
	СоздатьУчетныйСчет("71",
	"Расчеты с подотчетными лицами",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Сотрудники", Истина),
	Неопределено,
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	Неопределено);
	
	СоздатьУчетныйСчет("71.01",
	"Подотчет касса",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Сотрудники", Истина),
	Неопределено,
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("71"));
	
	СоздатьУчетныйСчет("71.02",
	"Подотчет управленческая касса",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Сотрудники", Истина),
	Неопределено,
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("71"));

	СоздатьУчетныйСчет("73",
	"Расчеты с персоналом по прочим операциям",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Сотрудники", Истина),
	Неопределено,
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	Неопределено);
	
	СоздатьУчетныйСчет("73.01",
	"Расчеты по предоставленным займам",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Сотрудники", Истина),
	Неопределено,
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("73"));
	
	СоздатьУчетныйСчет("73.02",
	"Расчеты по возмещению материального ущерба",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Сотрудники", Истина),
	Неопределено,
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("73"));
	
	СоздатьУчетныйСчет("73.03",
	"Расчеты по прочим операциям",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Сотрудники", Истина),
	Неопределено,
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("73"));
	
	СоздатьУчетныйСчет("75",
	"Расчеты с учредителями",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Учредители", Истина),
	Неопределено,
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	Неопределено);
	
	СоздатьУчетныйСчет("75.01",
	"Расчеты по вкладам в уставный капитал",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Учредители", Истина),
	Неопределено,
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("75"));
	
	СоздатьУчетныйСчет("75.02",
	"Расчеты по выплате доходов",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Учредители", Истина),
	Неопределено,
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("75"));
	
	СоздатьУчетныйСчет("76",
	"Расчеты с разными дебиторами и кредиторами",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Договоры", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	Неопределено);
	
	СоздатьУчетныйСчет("76.01",
	"Прочие расчеты с разными дебиторами и кредиторами",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Договоры", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("76"));
	
	СоздатьУчетныйСчет("79",
	"Внутрихозяйственные расчеты",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Организации и предприятия", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Внутренние договоры", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	Неопределено);
	
	СоздатьУчетныйСчет("79.01",
	"Внутрихозяйственные денежные взаиморасчеты",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Организации и предприятия", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Внутренние договоры", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("79"));
	
	СоздатьУчетныйСчет("79.02",
	"Внутрихозяйственные товарные взаиморасчеты",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Организации и предприятия", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Внутренние договоры", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("79"));
	
	СоздатьУчетныйСчет("79.03",
	"Внутрихозяйственные с внешними предприятиями",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Организации и предприятия", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Внутренние договоры", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("79"));
	
	СоздатьУчетныйСчет("82",
	"Резервный капитал",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Фонды", Истина),
	Неопределено,
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	Неопределено);
	
	СоздатьУчетныйСчет("83",
	"Добавочный капитал",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Учрелители", Истина),
	Неопределено,
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	Неопределено);
	
	СоздатьУчетныйСчет("84",
	"Нераспределенная прибыль (непокрытый убыток)",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	Неопределено,
	Неопределено,
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	Неопределено);
	
	СоздатьУчетныйСчет("90",
	"Продажи",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Истина,
	Неопределено,
	Неопределено,
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	Неопределено);
	
	СоздатьУчетныйСчет("90.01",
	"Выручка от реализации",
	ВидСчета.АктивноПассивный,
	Ложь,
	Истина,
	Ложь,
	Истина,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты и организации", Истина),
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("90"));
	
	СоздатьУчетныйСчет("90.02",
	"Себестоимость",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Истина,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты и организации", Истина),
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("90"));
	
	СоздатьУчетныйСчет("90.03",
	"Расходы по реализации",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Истина,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты и организации", Истина),
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("90"));
	
	СоздатьУчетныйСчет("90.04",
	"Реализация материалов",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Истина,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Материалы", Истина),
	Неопределено,
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("90"));
	
	СоздатьУчетныйСчет("90.05",
	"Реализация основных средств",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Истина,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Основные средства", Истина),
	Неопределено,
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("90"));
	
	СоздатьУчетныйСчет("90.09",
	"Прибыль/убыток от продаж",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Истина,
	Неопределено,
	Неопределено,
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	ПланыСчетов.Учетный.НайтиПоКоду("90"));
	
	СоздатьУчетныйСчет("91",
	"Прочие доходы и расходы",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Истина,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Прочие доходы и расходы", Истина),
	Неопределено,
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	Неопределено);
	
	СоздатьУчетныйСчет("94",
	"Недостачи и потери от порчи ценностей",
	ВидСчета.Активный,
	Ложь,
	Истина,
	Ложь,
	Истина,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина),
	Неопределено,
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	Неопределено);
	
	СоздатьУчетныйСчет("97",
	"Расходы будущих периодов",
	ВидСчета.Активный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Расходы будущих периодов", Истина),
	Неопределено,
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	Неопределено);
	
	СоздатьУчетныйСчет("98",
	"Доходы будущих периодов",
	ВидСчета.Пассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Доходы будущих периодов", Истина),
	Неопределено,
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	Неопределено);
	
	СоздатьУчетныйСчет("99",
	"Прибыли и убытки",
	ВидСчета.АктивноПассивный,
	Ложь,
	Ложь,
	Ложь,
	Ложь,
	Неопределено,
	Неопределено,
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	Неопределено);
	
	СоздатьУчетныйСчет("ВСП",
	"Служебный",
	ВидСчета.АктивноПассивный,
	Истина,
	Ложь,
	Ложь,
	Ложь,
	Неопределено,
	Неопределено,
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	Неопределено);
	
	СоздатьУчетныйСчет("КАЗ",
	"Расчеты между предприятиями",
	ВидСчета.АктивноПассивный,
	Истина,
	Ложь,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Предприятия", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Подразделения", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Документ", Истина),
	Ложь,
	Ложь,
	Ложь,
	Неопределено);
	
	СоздатьУчетныйСчет("НЗВ",
	"Незавершенное производство",
	ВидСчета.АктивноПассивный,
	Истина,
	Истина,
	Ложь,
	Ложь,
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина),
	ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Материалы", Истина),
	Неопределено,
	Ложь,
	Ложь,
	Ложь,
	Неопределено);	
	
КонецПроцедуры

&НаСервере
Процедура СоздатьУчетныйСчет(Код, Наименование, Вид, Забалансовый, Количественнй, Валютный, УчетПоПодразделениям, Субконто1, Субконто2, Субконто3, Субконто1Оборотное, Субконто2Оборотное, Субконто3Оборотное, Родитель = Неопределено)
	
	Если Родитель = Неопределено Тогда
		Родитель = ПланыСчетов.Учетный.ПустаяСсылка();	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПланыСчетов.Учетный.НайтиПоКоду(Код)) Тогда
		Об = ПланыСчетов.Учетный.СоздатьСчет();
		Об.Код = Код;
		Об.Наименование = Наименование;
		Об.Вид = Вид;
		Об.Забалансовый = Забалансовый;
		Об.Количественный = Количественнй;
		Об.Валютный = Валютный;
		Об.УчетПоПодразделениям = УчетПоПодразделениям;
		Об.Родитель = Родитель;
		Если ЗначениеЗаполнено(Субконто1) Тогда
			ОбСтрока = Об.ВидыСубконто.Добавить();
			ОбСтрока.ВидСубконто = Субконто1;
			//ОбСтрока.Валютный = Истина;
			//ОбСтрока.Количественный = Истина;
			//ОбСтрока.Крахмал = Истина;
			ОбСтрока.ТолькоОбороты = Субконто1Оборотное;
		КонецЕсли;
		Если ЗначениеЗаполнено(Субконто2) Тогда
			ОбСтрока = Об.ВидыСубконто.Добавить();
			ОбСтрока.ВидСубконто = Субконто2;
			//ОбСтрока.Валютный = Истина;
			//ОбСтрока.Количественный = Истина;
			//ОбСтрока.Крахмал = Истина;
			ОбСтрока.ТолькоОбороты = Субконто2Оборотное;
		КонецЕсли;
		Если ЗначениеЗаполнено(Субконто3) Тогда
			ОбСтрока = Об.ВидыСубконто.Добавить();
			ОбСтрока.ВидСубконто = Субконто3;
			//ОбСтрока.Валютный = Истина;
			//ОбСтрока.Количественный = Истина;
			//ОбСтрока.Крахмал = Истина;
			ОбСтрока.ТолькоОбороты = Субконто3Оборотное;
		КонецЕсли;
		Об.Записать();
	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПланСчетовБюджетный()

	

КонецПроцедуры

&НаСервере
Процедура СоздатьБюджетныйСчет(Код, Наименование, Вид, Забалансовый, Количественнй, Валютный, УчетПоПодразделениям, Субконто1, Субконто2, Субконто3, Субконто1Оборотное, Субконто2Оборотное, Субконто3Оборотное, Родитель = Неопределено)
	
	Если Родитель = Неопределено Тогда
		Родитель = ПланыСчетов.Учетный.ПустаяСсылка();	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПланыСчетов.Учетный.НайтиПоКоду(Код)) Тогда
		Об = ПланыСчетов.Учетный.СоздатьСчет();
		Об.Код = Код;
		Об.Наименование = Наименование;
		Об.Вид = Вид;
		Об.Забалансовый = Забалансовый;
		Об.Количественный = Количественнй;
		Об.Валютный = Валютный;
		Об.УчетПоПодразделениям = УчетПоПодразделениям;
		Об.Родитель = Родитель;
		Если ЗначениеЗаполнено(Субконто1) Тогда
			ОбСтрока = Об.ВидыСубконто.Добавить();
			ОбСтрока.ВидСубконто = Субконто1;
			//ОбСтрока.Валютный = Истина;
			//ОбСтрока.Количественный = Истина;
			//ОбСтрока.Крахмал = Истина;
			ОбСтрока.ТолькоОбороты = Субконто1Оборотное;
		КонецЕсли;
		Если ЗначениеЗаполнено(Субконто2) Тогда
			ОбСтрока = Об.ВидыСубконто.Добавить();
			ОбСтрока.ВидСубконто = Субконто2;
			//ОбСтрока.Валютный = Истина;
			//ОбСтрока.Количественный = Истина;
			//ОбСтрока.Крахмал = Истина;
			ОбСтрока.ТолькоОбороты = Субконто2Оборотное;
		КонецЕсли;
		Если ЗначениеЗаполнено(Субконто3) Тогда
			ОбСтрока = Об.ВидыСубконто.Добавить();
			ОбСтрока.ВидСубконто = Субконто3;
			//ОбСтрока.Валютный = Истина;
			//ОбСтрока.Количественный = Истина;
			//ОбСтрока.Крахмал = Истина;
			ОбСтрока.ТолькоОбороты = Субконто3Оборотное;
		КонецЕсли;
		Об.Записать();
	
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОткрытьСоответствиеПредприятий(Команда)
	ОткрытьФорму("РегистрСведений.сабСоответствияОрганизацийПредприятиям.ФормаСписка",,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиТайминга(Команда)
	ОткрытьФорму("Справочник.СабНастройкиТайминга.ФормаСписка");
КонецПроцедуры

&НаСервере
Процедура ВыполнитьАвтозаполениеДокументы()
	
	УстановитьПривилегированныйРежим(Истина);

	НоваяЗапись = РегистрыСведений.сабСоответствиеТиповДокументов.СоздатьМенеджерЗаписи();
	НоваяЗапись.ТипДокументаБУ = "РеализацияТоваровУслуг";
	НоваяЗапись.ТипДокументаУУ = "УЧ_Реализация";
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеТиповДокументов.СоздатьМенеджерЗаписи();
	НоваяЗапись.ТипДокументаБУ = "ПоступлениеТоваровУслуг";
	НоваяЗапись.ТипДокументаУУ = "УЧ_ПоступлениеТоваров";
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеТиповДокументов.СоздатьМенеджерЗаписи();
	НоваяЗапись.ТипДокументаБУ = "СписаниеТоваров";
	НоваяЗапись.ТипДокументаУУ = "УЧ_СписаниеТоваров";
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеТиповДокументов.СоздатьМенеджерЗаписи();
	НоваяЗапись.ТипДокументаБУ = "ПередачаТоваров";
	НоваяЗапись.ТипДокументаУУ = "УЧ_СписаниеТоваров";
	НоваяЗапись.ВидОперацииБУ = Перечисления.ВидыОперацийПередачаТоваров.БезвозмезднаяПередача;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеТиповДокументов.СоздатьМенеджерЗаписи();
	НоваяЗапись.ТипДокументаБУ = "ПередачаТоваров";
	НоваяЗапись.ТипДокументаУУ = "УЧ_ПеремещениеМатериаловВПроизводство";
	НоваяЗапись.ВидОперацииБУ = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку;
	НоваяЗапись.Записать();

	НоваяЗапись = РегистрыСведений.сабСоответствиеТиповДокументов.СоздатьМенеджерЗаписи();
	НоваяЗапись.ТипДокументаБУ = "ПередачаМатериаловВЭксплуатацию";
	НоваяЗапись.ТипДокументаУУ = "УЧ_ПеремещениеМатериаловВПроизводство";
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеТиповДокументов.СоздатьМенеджерЗаписи();
	НоваяЗапись.ТипДокументаБУ = "ТребованиеНакладная";
	НоваяЗапись.ТипДокументаУУ = "УЧ_ПеремещениеМатериаловВПроизводство";
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеТиповДокументов.СоздатьМенеджерЗаписи();
	НоваяЗапись.ТипДокументаБУ = "ПеремещениеТоваров";
	НоваяЗапись.ТипДокументаУУ = "УЧ_ПеремещениеТоваров";
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеТиповДокументов.СоздатьМенеджерЗаписи();
	НоваяЗапись.ТипДокументаБУ = "СписаниеСРасчетногоСчета";
	НоваяЗапись.ТипДокументаУУ = "УЧ_ДвижениеДС";
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеТиповДокументов.СоздатьМенеджерЗаписи();
	НоваяЗапись.ТипДокументаБУ = "ОтчетПроизводстваЗаСмену";
	НоваяЗапись.ТипДокументаУУ = "УЧ_ВыпускПродукции";
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеТиповДокументов.СоздатьМенеджерЗаписи();
	НоваяЗапись.ТипДокументаБУ = "ПоступлениеИзПереработки";
	НоваяЗапись.ТипДокументаУУ = "УЧ_ВыпускПродукции";
	НоваяЗапись.Записать();

	НоваяЗапись = РегистрыСведений.сабСоответствиеТиповДокументов.СоздатьМенеджерЗаписи();
	НоваяЗапись.ТипДокументаБУ = "ПоступлениеНаРасчетныйСчет";
	НоваяЗапись.ТипДокументаУУ = "УЧ_ДвижениеДС";
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеТиповДокументов.СоздатьМенеджерЗаписи();
	НоваяЗапись.ТипДокументаБУ = "ПриходныйКассовыйОрдер";
	НоваяЗапись.ТипДокументаУУ = "УЧ_ДвижениеДС";
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеТиповДокументов.СоздатьМенеджерЗаписи();
	НоваяЗапись.ТипДокументаБУ = "РасходныйКассовыйОрдер";
	НоваяЗапись.ТипДокументаУУ = "УЧ_ДвижениеДС";
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеТиповДокументов.СоздатьМенеджерЗаписи();
	НоваяЗапись.ТипДокументаБУ = "ОперацияБух";
	НоваяЗапись.ТипДокументаУУ = "УЧ_Операция";
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеТиповДокументов.СоздатьМенеджерЗаписи();
	НоваяЗапись.ТипДокументаБУ = "РегламентнаяОперация";
	НоваяЗапись.ТипДокументаУУ = "Исключено";
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеТиповДокументов.СоздатьМенеджерЗаписи();
	НоваяЗапись.ТипДокументаБУ = "РегламентнаяОперация";
	НоваяЗапись.ТипДокументаУУ = "УЧ_Операция";
	НоваяЗапись.ВидОперацииБУ = Перечисления.ВидыРегламентныхОпераций.РасчетНалогаНаПрибыль;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеТиповДокументов.СоздатьМенеджерЗаписи();
	НоваяЗапись.ТипДокументаБУ = "УведомлениеОбИсчисленныхСуммахНалогов";
	НоваяЗапись.ТипДокументаУУ = "Исключено";
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеТиповДокументов.СоздатьМенеджерЗаписи();
	НоваяЗапись.ТипДокументаБУ = "ОперацияПоЕдиномуНалоговомуСчету";
	НоваяЗапись.ТипДокументаУУ = "Исключено";
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеТиповДокументов.СоздатьМенеджерЗаписи();
	НоваяЗапись.ТипДокументаБУ = "ФормированиеЗаписейКнигиПокупок";
	НоваяЗапись.ТипДокументаУУ = "Исключено";
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеТиповДокументов.СоздатьМенеджерЗаписи();
	НоваяЗапись.ТипДокументаБУ = "ФормированиеЗаписейКнигиПродаж";
	НоваяЗапись.ТипДокументаУУ = "Исключено";
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеТиповДокументов.СоздатьМенеджерЗаписи();
	НоваяЗапись.ТипДокументаБУ = "СчетФактураВыданный";
	НоваяЗапись.ТипДокументаУУ = "Исключено";
	НоваяЗапись.Записать();

	НоваяЗапись = РегистрыСведений.сабСоответствиеТиповДокументов.СоздатьМенеджерЗаписи();
	НоваяЗапись.ТипДокументаБУ = "СчетФактураПолученный";
	НоваяЗапись.ТипДокументаУУ = "Исключено";
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеТиповДокументов.СоздатьМенеджерЗаписи();
	НоваяЗапись.ТипДокументаБУ = "АвансовыйОтчет";
	НоваяЗапись.ТипДокументаУУ = "УЧ_АвансовыйОтчет";
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеТиповДокументов.СоздатьМенеджерЗаписи();
	НоваяЗапись.ТипДокументаБУ = "ВозвратТоваровОтПокупателя";
	НоваяЗапись.ТипДокументаУУ = "УЧ_Возврат";
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеТиповДокументов.СоздатьМенеджерЗаписи();
	НоваяЗапись.ТипДокументаБУ = "ВозвратТоваровПоставщику";
	НоваяЗапись.ТипДокументаУУ = "УЧ_ВозвратТоваровПоставщику";
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеТиповДокументов.СоздатьМенеджерЗаписи();
	НоваяЗапись.ТипДокументаБУ = "КорректировкаПоступления";
	НоваяЗапись.ТипДокументаУУ = "УЧ_КорректировкаПоступления";
	НоваяЗапись.Записать();

	НоваяЗапись = РегистрыСведений.сабСоответствиеТиповДокументов.СоздатьМенеджерЗаписи();
	НоваяЗапись.ТипДокументаБУ = "ОприходованиеТоваров";
	НоваяЗапись.ТипДокументаУУ = "УЧ_ОприходованиеТоваров";
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеТиповДокументов.СоздатьМенеджерЗаписи();
	НоваяЗапись.ТипДокументаБУ = "НачислениеЗарплаты";
	НоваяЗапись.ТипДокументаУУ = "УЧ_НачислениеЗП";
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеТиповДокументов.СоздатьМенеджерЗаписи();
	НоваяЗапись.ТипДокументаБУ = "ОтражениеЗарплатыВБухучете";
	НоваяЗапись.ТипДокументаУУ = "УЧ_НачислениеЗП";
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеТиповДокументов.СоздатьМенеджерЗаписи();
	НоваяЗапись.ТипДокументаБУ = "ВедомостьНаВыплатуЗарплаты";
	НоваяЗапись.ТипДокументаУУ = "УЧ_ВыплатаЗП";
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеТиповДокументов.СоздатьМенеджерЗаписи();
	НоваяЗапись.ТипДокументаБУ = "ВедомостьНаВыплатуЗарплатыВБанк";
	НоваяЗапись.ТипДокументаУУ = "УЧ_ВыплатаЗП";
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеТиповДокументов.СоздатьМенеджерЗаписи();
	НоваяЗапись.ТипДокументаБУ = "ВедомостьНаВыплатуЗарплатыВКассу";
	НоваяЗапись.ТипДокументаУУ = "УЧ_ВыплатаЗП";
	НоваяЗапись.Записать();

	
	//НоваяЗапись = РегистрыСведений.сабСоответствиеТиповДокументов.СоздатьМенеджерЗаписи();
	//НоваяЗапись.ТипДокументаБУ = "КорректировкаРеализации";
	//НоваяЗапись.ТипДокументаУУ = "УЧ_КорректировкаРеализации";
	//НоваяЗапись.Записать();
	
	//НоваяЗапись = РегистрыСведений.сабСоответствиеТиповДокументов.СоздатьМенеджерЗаписи();
	//НоваяЗапись.ТипДокументаБУ = "НачислениеДивидендов";
	//НоваяЗапись.ТипДокументаУУ = "Исключено";
	//НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеТиповДокументов.СоздатьМенеджерЗаписи();
	НоваяЗапись.ТипДокументаБУ = "ПрочиеДокументы";
	НоваяЗапись.ТипДокументаУУ = "УЧ_Операция";
	НоваяЗапись.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#Область ЗаполнениеСчета
&НаСервере
Процедура ВыполнитьАвтозаполениеСчета()
	
	УстановитьПривилегированныйРежим(Истина);
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("000");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("00");
	НоваяЗапись.СубконтоБУ1 = Неопределено;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = Неопределено;
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("01.01");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("01");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Основные средства", Истина);
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("01.03");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("01");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Основные средства", Истина);
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("01.08");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("01");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Основные средства", Истина);
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("01.09");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("01");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Основные средства", Истина);
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("01.К");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("01");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Основные средства", Истина);
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("02.01");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("02");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Основные средства", Истина);
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("02.02");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("02");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Основные средства", Истина);
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("02.03");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("02");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Основные средства", Истина);
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("07");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("08.03");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Внеоборотные активы", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("08.01.1");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("08.04");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Внеоборотные активы", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("08.02");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("08.04");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Внеоборотные активы", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("08.03");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("08.03");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Внеоборотные активы", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("10.01");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("10.01");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Материалы", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("10.02");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("10.02");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Материалы", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("10.03.1");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("10.03");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Материалы", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("10.03.2");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("10.03");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Материалы", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("10.04");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("10.04");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Материалы", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("10.05");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("10.05");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Материалы", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("10.06");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("10.06");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Материалы", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("10.05");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("10.07");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Материалы", Истина);
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("10.08");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("10.05");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Материалы", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("10.09");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("10.09");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Материалы", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("10.10");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("10.09");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Материалы", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("10.11.1");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("10.09");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Материалы", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("10.11.2");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("10.09");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Материалы", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("11");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("11");
	НоваяЗапись.СубконтоБУ1 = Неопределено;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = Неопределено;
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("20.01");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("20");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("20.02");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("20");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("21");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("10.01");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Материалы", Истина);
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("23");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("25");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина);
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("25");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("25");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина);
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("26");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("25");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина);
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("40");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("40");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина);
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("41.01");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("41");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("41.02");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("41");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("41.03");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("41");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("41.04");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("41");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("41.11");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("41");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("41.12");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("41");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("41.К");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("41");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("43");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("43");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("44.01");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("44");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина);
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("44.02");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("44");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина);
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("45.02");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("45.02");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("50.01");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("50.01");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи ДДС", Истина);
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("51");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("51.01");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Банковские счета", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи ДДС", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("52");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("51.02");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Банковские счета", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи ДДС", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("57.01");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("57.01");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты и организации", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Внутренние договоры", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("57.02");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("57.03");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Договоры", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("57.03");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("57.03");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Договоры", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.01");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("60.01");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Договоры", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.02");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("60.01");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Договоры", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.01");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("62.01");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Договоры", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.02");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("62.02");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Договоры", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("66.01");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("66.01");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Кредиты и займы", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("66.02");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("66.02");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Кредиты и займы", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("66.03");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("66.01");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Кредиты и займы", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("66.04");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("66.02");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Кредиты и займы", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("67.01");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("67.01");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Кредиты и займы", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("67.02");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("67.02");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Кредиты и займы", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("67.03");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("67.03");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Кредиты и займы", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("67.04");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("67.04");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Кредиты и займы", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("68.01");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("68.01");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Налоги и сборы", Истина);
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("68.02");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("68.01");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Налоги и сборы", Истина);
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("68.03");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("68.01");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Налоги и сборы", Истина);
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("68.04.1");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("68.01");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Налоги и сборы", Истина);
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("68.04.2");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("68.01");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Налоги и сборы", Истина);
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("68.10");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("68.01");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УровниБюджетов;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Налоги и сборы", Истина);
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.01");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("69");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Налоги и сборы", Истина);
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.02.1");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("69");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Налоги и сборы", Истина);
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.02.2");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("69");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Налоги и сборы", Истина);
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.02.3");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("69");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Налоги и сборы", Истина);
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.02.4");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("69");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Налоги и сборы", Истина);
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.02.5");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("69");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Налоги и сборы", Истина);
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.02.6");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("69");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Налоги и сборы", Истина);
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.02.7");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("69");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Налоги и сборы", Истина);
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.03.1");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("69");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Налоги и сборы", Истина);
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.03.2");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("69");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Налоги и сборы", Истина);
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.04");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("69");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Налоги и сборы", Истина);
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.11");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("69");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Налоги и сборы", Истина);
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("70");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("70");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидНачисленийОплатыТрудаПоСтатье255НК;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Сотрудники", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Виды начислений оплаты труда", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("71.01");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("71.01");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Сотрудники", Истина);
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("73.01");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("73.01");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Сотрудники", Истина);
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.06");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("76.01");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	НоваяЗапись.СубконтоБУ2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина);
	НоваяЗапись.СубконтоУУ2 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Договоры", Истина);
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("80.09");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("75.01");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Учредители;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Учредители", Истина);
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("75.01");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("75.01");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Учредители;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Учредители", Истина);
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("75.02");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("75.02");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Учредители;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Учредители", Истина);
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("84.01");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("84");
	НоваяЗапись.СубконтоБУ1 = Неопределено;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = Неопределено;
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.01.1");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("90.01");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина);
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.02.1");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("90.02");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина);
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.09");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("90.09");
	НоваяЗапись.СубконтоБУ1 = Неопределено;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = Неопределено;
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("91.01");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("91");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Прочие доходы и расходы", Истина);
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("91.02");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("91");
	НоваяЗапись.СубконтоБУ1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Прочие доходы и расходы", Истина);
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	//НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	//НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("91.09");
	//НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("00");
	//НоваяЗапись.СубконтоБУ1 = Неопределено;
	//НоваяЗапись.СубконтоБУ2 = Неопределено;
	//НоваяЗапись.СубконтоБУ3 = Неопределено;
	//НоваяЗапись.СубконтоУУ1 = Неопределено;
	//НоваяЗапись.СубконтоУУ2 = Неопределено;
	//НоваяЗапись.СубконтоУУ3 = Неопределено;
	//НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("94");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("94");
	НоваяЗапись.СубконтоБУ1 = Неопределено;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = Неопределено;
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
	НоваяЗапись.СчетБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("99.01.1");
	НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.НайтиПоКоду("99");
	НоваяЗапись.СубконтоБУ1 = Неопределено;
	НоваяЗапись.СубконтоБУ2 = Неопределено;
	НоваяЗапись.СубконтоБУ3 = Неопределено;
	НоваяЗапись.СубконтоУУ1 = Неопределено;
	НоваяЗапись.СубконтоУУ2 = Неопределено;
	НоваяЗапись.СубконтоУУ3 = Неопределено;
	НоваяЗапись.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьЗаписи()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет КАК Счет
	|ПОМЕСТИТЬ ВтСчета
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты КАК ХозрасчетныйОбороты
	
	|ОБЪЕДИНИТЬ ВСЕ
	
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.КорСчет
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты КАК ХозрасчетныйОбороты
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВтСчета.Счет КАК Счет
	|ИЗ
	|	ВтСчета КАК ВтСчета
	|ГДЕ
	|	ВтСчета.Счет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	
	|УПОРЯДОЧИТЬ ПО
	|	ВтСчета.Счет.Код";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Набор = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьНаборЗаписей();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Набор.Отбор.СчетБУ.Установить(ВыборкаДетальныеЗаписи.Счет);
		Набор.Прочитать();
		Если Набор.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяЗапись = РегистрыСведений.сабСоответствиеСчетовИСубконто.СоздатьМенеджерЗаписи();
		НоваяЗапись.СчетБУ = ВыборкаДетальныеЗаписи.Счет;
		НоваяЗапись.СчетУУ = ПланыСчетов.Учетный.ПустаяСсылка();
		
		МаксКоличествоСубконто = Метаданные.ПланыСчетов.Хозрасчетный.МаксКоличествоСубконто;
		СчетВидыСубконто = НоваяЗапись.СчетБУ.ВидыСубконто;
		Для Индекс = 1 По МаксКоличествоСубконто Цикл
			Если Индекс <= СчетВидыСубконто.Количество() Тогда
				НоваяЗапись["СубконтоБУ" + Индекс] = СчетВидыСубконто[Индекс - 1].ВидСубконто;
			Иначе
				НоваяЗапись["СубконтоБУ" + Индекс] = Неопределено;
			КонецЕсли;
		КонецЦикла;
			
		НоваяЗапись.СубконтоУУ1 = Неопределено;
		НоваяЗапись.СубконтоУУ2 = Неопределено;
		НоваяЗапись.СубконтоУУ3 = Неопределено;
		НоваяЗапись.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаНаПустыеЗаписи()
	Если ПустыеЗаписиСуществуют() Тогда
		Оповещение = Новый ОписаниеОповещения("ОткрытьФормуСОтборомПоПустомуСчетуУУ",ЭтотОбъект);
		ПоказатьПредупреждение(Оповещение,"Внимание! Автоматическая настройка сопоставила не все счета. Нажмите ""ОК"" и сопоставьте счета вручную.",,);
	КонецЕсли;
	//Объект.Выполнено = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСОтборомПоПустомуСчетуУУ(Результат) Экспорт 
	//Объект.Выполнено = Ложь;
	
	стрОтбор = Новый Структура("СчетУУ", ПланыСчетовУчетныйПустаяСсылка());
	ПараметрыФормы = Новый Структура("Отбор", стрОтбор);
	ОткрытьФорму ("РегистрСведений.сабСоответствиеСчетовИСубконто.ФормаСписка", ПараметрыФормы);
КонецПроцедуры

&НаСервере
Функция ПланыСчетовУчетныйПустаяСсылка()
	Возврат ПланыСчетов.Учетный.ПустаяСсылка();
КонецФункции

&НаСервере
Функция ПустыеЗаписиСуществуют()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	сабСоответствиеСчетовИСубконто.СчетБУ КАК СчетБУ,
	|	сабСоответствиеСчетовИСубконто.СчетУУ КАК СчетУУ
	|ИЗ
	|	РегистрСведений.сабСоответствиеСчетовИСубконто КАК сабСоответствиеСчетовИСубконто
	|ГДЕ
	|	сабСоответствиеСчетовИСубконто.СчетУУ = &СчетУУ";
	
	Запрос.УстановитьПараметр("СчетУУ", ПланыСчетов.Учетный.ПустаяСсылка());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗРезультатЗапроса = РезультатЗапроса.Выгрузить();
	
	Если ТЗРезультатЗапроса.Количество() > 0 Тогда
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
КонецФункции


#КонецОбласти

&НаКлиенте
Процедура УчатнаяПолитика(Команда)
	ОткрытьФорму("Справочник.УчетныеПолитики.ФормаСписка");
КонецПроцедуры
