
&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ЗаписатьИЗакрытьНаСервере();
	ОбновитьИнтерфейсПриИзмененииФункциональныхОпций();
	Закрыть();
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИЗакрытьНаСервере()

	МассивРеквизитовФормы = ПолучитьРеквизиты(); 
	МассивРеквизитовДляСправочника = Новый Массив;
	Для Каждого РеквизитФормы Из МассивРеквизитовФормы Цикл
	ИмяКонстанты = ?(РеквизитФормы.Имя = "ВключитьСправочникПодразделения","ИспользоватьБизнесПроцессыЗаявокСотрудников",РеквизитФормы.Имя);
		Если Метаданные.Константы.Найти(ИмяКонстанты) <> Неопределено Тогда
			ИмяРеквизита = ?(ИмяКонстанты = "ИспользоватьБизнесПроцессыЗаявокСотрудников","ВключитьСправочникПодразделения",ИмяКонстанты);
			Константы[ИмяКонстанты].Установить(ЭтотОбъект[ИмяРеквизита]);
		Иначе
			МассивРеквизитовДляСправочника.Добавить(РеквизитФормы);
		КонецЕсли; 
	КонецЦикла; 
	Константы.ИспользоватьБизнесПроцессыИЗадачи.Установить(ИспользоватьБизнесПроцессы);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	сабМониторВнедрения.Ссылка КАК Ссылка,
	|	сабМониторВнедрения.Наименование КАК Наименование,
	|	сабМониторВнедрения.Значение КАК Значение
	|ИЗ
	|	Справочник.сабМониторВнедрения КАК сабМониторВнедрения";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкасабМониторВнедрения = РезультатЗапроса.Выбрать(); 
	Для Каждого РеквизитФормы Из МассивРеквизитовДляСправочника Цикл
		СтруктураПоискасабМониторВнедрения = Новый Структура("Наименование",РеквизитФормы.Имя);
		ВыборкасабМониторВнедрения.Сбросить();	
		Если ВыборкасабМониторВнедрения.НайтиСледующий(СтруктураПоискасабМониторВнедрения) Тогда
			ТекЭлОб = ВыборкасабМониторВнедрения.Ссылка.ПолучитьОбъект();
		Иначе
			ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
		КонецЕсли;
		ТекЭлОб.Наименование = РеквизитФормы.Имя;
		ТекЭлОб.Значение = ЭтотОбъект[РеквизитФормы.Имя];
		ТекЭлОб.Записать();
	КонецЦикла;  
	
	ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ИспользоватьФО", Истина);
	
	Если ЗначениеЗаполнено(ТекЭл) Тогда
		ТекЭлОб = ТекЭл.ПолучитьОбъект();
	Иначе
		ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
	КонецЕсли;
	
	ТекЭлОб.Наименование = "ИспользоватьФО";
	ТекЭлОб.Значение = Истина;
	ТекЭлОб.Записать(); 
	
	#Область ИсходныйКод	
	//  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("СпособДоставкиПоУмолчанию", Истина);
	//  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "СпособДоставкиПоУмолчанию";
  //  ТекЭлОб.Значение = СпособДоставкиПоУмолчанию;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ОграничениеПравРедактированияКлючевыхСправочников", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "ОграничениеПравРедактированияКлючевыхСправочников";
  //  ТекЭлОб.Значение = ОграничениеПравРедактированияКлючевыхСправочников;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ПроверятьЗаполнениеГоденДо", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "ПроверятьЗаполнениеГоденДо";
  //  ТекЭлОб.Значение = ПроверятьЗаполнениеГоденДо;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ФормироватьНачисленияПоЗОтчетам", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "ФормироватьНачисленияПоЗОтчетам";
  //  ТекЭлОб.Значение = ФормироватьНачисленияПоЗОтчетам;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ИспользоватьКлючиАналитикиБюджета", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "ИспользоватьКлючиАналитикиБюджета";
  //  ТекЭлОб.Значение = ИспользоватьКлючиАналитикиБюджета;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("сабИгнорироватьБлокировкуАвтообновленийДокументов", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "сабИгнорироватьБлокировкуАвтообновленийДокументов";
  //  ТекЭлОб.Значение = сабИгнорироватьБлокировкуАвтообновленийДокументов;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ФормироватьСтрокиГрафикаОплат", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "ФормироватьСтрокиГрафикаОплат";
  //  ТекЭлОб.Значение = ФормироватьСтрокиГрафикаОплат;
  //  ТекЭлОб.Записать();

  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("КонтрольМинимальнойЦеныПоТипуЦен", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "КонтрольМинимальнойЦеныПоТипуЦен";
  //  ТекЭлОб.Значение = КонтрольМинимальнойЦеныПоТипуЦен;
  //  ТекЭлОб.Записать();

  //ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ФоноваяОбработкаБУДокументов", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "ФоноваяОбработкаБУДокументов";
  //  ТекЭлОб.Значение = ФоноваяОбработкаБУДокументов;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ФоноваяОбработкаУУДокументов", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "ФоноваяОбработкаУУДокументов";
  //  ТекЭлОб.Значение = ФоноваяОбработкаУУДокументов;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ИспользованиеГТД", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "ИспользованиеГТД";
  //  ТекЭлОб.Значение = ИспользованиеГТД;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ОбрабатыватьНепроведенныеБУДокументы", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "ОбрабатыватьНепроведенныеБУДокументы";
  //  ТекЭлОб.Значение = ОбрабатыватьНепроведенныеБУДокументы;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ОбрабатыватьНепроведенныеУУДокументы", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "ОбрабатыватьНепроведенныеУУДокументы";
  //  ТекЭлОб.Значение = ОбрабатыватьНепроведенныеУУДокументы;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ФоноваяПроверкаБУДокументов", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "ФоноваяПроверкаБУДокументов";
  //  ТекЭлОб.Значение = ФоноваяПроверкаБУДокументов;
  //  ТекЭлОб.Записать();

  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ИспользоватьБизнесПроцессы", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "ИспользоватьБизнесПроцессы";
  //  ТекЭлОб.Значение = ИспользоватьБизнесПроцессы;
  //  ТекЭлОб.Записать();
  //  Константы.ИспользоватьБизнесПроцессыИЗадачи.Установить(ИспользоватьБизнесПроцессы);
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ПроверятьЗаполнениеДоговоровВДокументах", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "ПроверятьЗаполнениеДоговоровВДокументах";
  //  ТекЭлОб.Значение = ПроверятьЗаполнениеДоговоровВДокументах;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ИспользоватьФО", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "ИспользоватьФО";
  //  ТекЭлОб.Значение = Истина;
  //  ТекЭлОб.Записать(); 
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("СоздаватьСчетаПокупателямСДатойРеализации", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "СоздаватьСчетаПокупателямСДатойРеализации";
  //  ТекЭлОб.Значение = СоздаватьСчетаПокупателямСДатойРеализации;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов";
  //  ТекЭлОб.Значение = НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("СрезОстатковНаДатуЗаказа", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "СрезОстатковНаДатуЗаказа";
  //  ТекЭлОб.Значение = СрезОстатковНаДатуЗаказа;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ВозможноЧастичноеИсполнениеЗаказов", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "ВозможноЧастичноеИсполнениеЗаказов";
  //  ТекЭлОб.Значение = ВозможноЧастичноеИсполнениеЗаказов;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("КонтролироватьУникальностьАртикулов", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "КонтролироватьУникальностьАртикулов";
  //  ТекЭлОб.Значение = КонтролироватьУникальностьАртикулов;
  //  ТекЭлОб.Записать();

  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("АльтернативнаяФормаЗаказов", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "АльтернативнаяФормаЗаказов";
  //  ТекЭлОб.Значение = АльтернативнаяФормаЗаказов;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("РассчитыватьСебестоимостьПоСериям", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "РассчитыватьСебестоимостьПоСериям";
  //  ТекЭлОб.Значение = РассчитыватьСебестоимостьПоСериям;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("КорректироватьСебестоимостьПриВыходеОстаткаИзМинуса", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "КорректироватьСебестоимостьПриВыходеОстаткаИзМинуса";
  //  ТекЭлОб.Значение = КорректироватьСебестоимостьПриВыходеОстаткаИзМинуса;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ЗапретПроведенияЗаказаПокупателяСПустымПодразделением", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "ЗапретПроведенияЗаказаПокупателяСПустымПодразделением";
  //  ТекЭлОб.Значение = ЗапретПроведенияЗаказаПокупателяСПустымПодразделением;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ОграничитьСписокКомандПечатиВРеализации", Истина);
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  ТекЭлОб.Наименование = "ОграничитьСписокКомандПечатиВРеализации";
  //  ТекЭлОб.Значение = ОграничитьСписокКомандПечатиВРеализации;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("КонтролироватьЗаполнениеОбязательныхПолейВПоступлении", Истина);
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  ТекЭлОб.Наименование = "КонтролироватьЗаполнениеОбязательныхПолейВПоступлении";
  //  ТекЭлОб.Значение = КонтролироватьЗаполнениеОбязательныхПолейВПоступлении;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ВнутрихолдинговоеДвижение", Истина);
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  ТекЭлОб.Наименование = "ВнутрихолдинговоеДвижение";
  //  ТекЭлОб.Значение = ВнутрихолдинговоеДвижение;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ОрганизацияПродажи", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "ОрганизацияПродажи";
  //  ТекЭлОб.Значение = ОрганизацияПродажи;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("СкладПродажи", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "СкладПродажи";
  //  ТекЭлОб.Значение = СкладПродажи;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("КонтрольНоменклатурыДляФормы2ВЗаказеКлиента", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "КонтрольНоменклатурыДляФормы2ВЗаказеКлиента";
  //  ТекЭлОб.Значение = КонтрольНоменклатурыДляФормы2ВЗаказеКлиента;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("РучнаяКорректировкаРасходаВВыпускахПоСпецификации", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "РучнаяКорректировкаРасходаВВыпускахПоСпецификации";
  //  ТекЭлОб.Значение = РучнаяКорректировкаРасходаВВыпускахПоСпецификации;
  //  ТекЭлОб.Записать();
  //  
  //  ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ОчищатьСтатьюДДСПриСозданииПлатежногоПоручения", Истина);
  //  
  //  Если ЗначениеЗаполнено(ТекЭл) Тогда
  //  	ТекЭлОб = ТекЭл.ПолучитьОбъект();
  //  Иначе
  //  	ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
  //  КонецЕсли;
  //  
  //  ТекЭлОб.Наименование = "ОчищатьСтатьюДДСПриСозданииПлатежногоПоручения";
  //  ТекЭлОб.Значение = ОчищатьСтатьюДДСПриСозданииПлатежногоПоручения;
  //  ТекЭлОб.Записать();
  //  

	//Константы.сабПодсистемаКазначейство.Установить(сабПодсистемаКазначейство);
	//Константы.сабПодсистемаБюджетирование.Установить(сабПодсистемаБюджетирование);
	//Константы.сабПодсистемаДокументооборот.Установить(сабПодсистемаДокументооборот);
	//Константы.сабПодсистемаОперативныйУчет.Установить(сабПодсистемаОперативныйУчет);
	//Константы.сабОперативныйРежимРаботы.Установить(сабОперативныйРежимРаботы);
	//
	//Константы.ИспользоватьБизнесПроцессыЗаявокСотрудников.Установить(ВключитьСправочникПодразделения);
	//Константы.сабОбменСЛогистическимиПрограммами.Установить(сабОбменСЛогистическимиПрограммами);
	//Константы.сабКонтрольПоСрокамГодности.Установить(сабКонтрольПоСрокамГодности); 
	#КонецОбласти
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	сабМониторВнедрения.Наименование КАК Наименование,
	|	сабМониторВнедрения.Значение КАК Значение
	|ИЗ
	|	Справочник.сабМониторВнедрения КАК сабМониторВнедрения";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкасабМониторВнедрения = РезультатЗапроса.Выбрать(); 
	МассивРеквизитовФормы = ПолучитьРеквизиты();
	Для Каждого РеквизитФормы Из МассивРеквизитовФормы Цикл
		СтруктураПоискасабМониторВнедрения = Новый Структура("Наименование",РеквизитФормы.Имя);
		ВыборкасабМониторВнедрения.Сбросить();	
		Если ВыборкасабМониторВнедрения.НайтиСледующий(СтруктураПоискасабМониторВнедрения) Тогда
			ЭтотОбъект[РеквизитФормы.Имя] = ВыборкасабМониторВнедрения.Значение;	
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапросаКонстанты = "Выбрать ";
	ЭтоПерваяСтрока = Истина;
	ВыполняемЗапроНаКонстанты = Ложь;
	РеквизитыКонстанты = Новый Массив; 
	Для Каждого РеквизитФормы Из МассивРеквизитовФормы Цикл
		ИмяКонстанты = ?(РеквизитФормы.Имя = "ВключитьСправочникПодразделения","ИспользоватьБизнесПроцессыЗаявокСотрудников",РеквизитФормы.Имя);
		Если Метаданные.Константы.Найти(ИмяКонстанты) <> Неопределено Тогда
			ТекстЗапросаКонстанты = ТекстЗапросаКонстанты + ?(ЭтоПерваяСтрока, ИмяКонстанты, ", " +  ИмяКонстанты);
			ЭтоПерваяСтрока = Ложь;
			ВыполняемЗапроНаКонстанты = Истина; 
		КонецЕсли; 
	КонецЦикла;
	Если ВыполняемЗапроНаКонстанты Тогда
		ТекстЗапросаКонстанты = ТекстЗапросаКонстанты + " Из Константы";
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаКонстанты;
		РезультатЗапросаКонстанты = Запрос.Выполнить();
		ВыборкаЗапросаКонстанты = РезультатЗапросаКонстанты.Выбрать();
		Если ВыборкаЗапросаКонстанты.Следующий() Тогда
			Для Каждого КолонкаКонстанта Из РезультатЗапросаКонстанты.Колонки Цикл 
				ИмяРеквизита = ?(КолонкаКонстанта.Имя = "ИспользоватьБизнесПроцессыЗаявокСотрудников","ВключитьСправочникПодразделения",КолонкаКонстанта.Имя);
				ЭтотОбъект[ИмяРеквизита] = ВыборкаЗапросаКонстанты[КолонкаКонстанта.Имя];
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	#Область ИсходныйКод	
	//СпособДоставкиПоУмолчанию = Справочники.сабМониторВнедрения.НайтиПоНаименованию("СпособДоставкиПоУмолчанию", Истина).Значение; 
	//ОграничениеПравРедактированияКлючевыхСправочников = справочники.сабМониторВнедрения.НайтиПоНаименованию("ОграничениеПравРедактированияКлючевыхСправочников", Истина).Значение;
	//ПроверятьЗаполнениеГоденДо = справочники.сабМониторВнедрения.НайтиПоНаименованию("ПроверятьЗаполнениеГоденДо", Истина).Значение;
	//ФормироватьНачисленияПоЗОтчетам = справочники.сабМониторВнедрения.НайтиПоНаименованию("ФормироватьНачисленияПоЗОтчетам", Истина).Значение;
	//ИспользоватьКлючиАналитикиБюджета = справочники.сабМониторВнедрения.НайтиПоНаименованию("ИспользоватьКлючиАналитикиБюджета", Истина).Значение;
	//сабИгнорироватьБлокировкуАвтообновленийДокументов = справочники.сабМониторВнедрения.НайтиПоНаименованию("сабИгнорироватьБлокировкуАвтообновленийДокументов", Истина).Значение;
	//ФормироватьСтрокиГрафикаОплат = справочники.сабМониторВнедрения.НайтиПоНаименованию("ФормироватьСтрокиГрафикаОплат", Истина).Значение;
	//ФоноваяОбработкаБУДокументов = справочники.сабМониторВнедрения.НайтиПоНаименованию("ФоноваяОбработкаБУДокументов", Истина).Значение;
	//ФоноваяОбработкаУУДокументов = справочники.сабМониторВнедрения.НайтиПоНаименованию("ФоноваяОбработкаУУДокументов", Истина).Значение;
	//ИспользованиеГТД = справочники.сабМониторВнедрения.НайтиПоНаименованию("ИспользованиеГТД", Истина).Значение;
	//ФоноваяПроверкаБУДокументов = справочники.сабМониторВнедрения.НайтиПоНаименованию("ФоноваяПроверкаБУДокументов", Истина).Значение;
	//ОбрабатыватьНепроведенныеБУДокументы = справочники.сабМониторВнедрения.НайтиПоНаименованию("ОбрабатыватьНепроведенныеБУДокументы", Истина).Значение;
	//ОбрабатыватьНепроведенныеУУДокументы = справочники.сабМониторВнедрения.НайтиПоНаименованию("ОбрабатыватьНепроведенныеУУДокументы", Истина).Значение;
	//ИспользоватьБизнесПроцессы = справочники.сабМониторВнедрения.НайтиПоНаименованию("ИспользоватьБизнесПроцессы", Истина).Значение;
	//ПроверятьЗаполнениеДоговоровВДокументах = справочники.сабМониторВнедрения.НайтиПоНаименованию("ПроверятьЗаполнениеДоговоровВДокументах", Истина).Значение;
	//КонтрольМинимальнойЦеныПоТипуЦен = справочники.сабМониторВнедрения.НайтиПоНаименованию("КонтрольМинимальнойЦеныПоТипуЦен", Истина).Значение;
	//СоздаватьСчетаПокупателямСДатойРеализации = справочники.сабМониторВнедрения.НайтиПоНаименованию("СоздаватьСчетаПокупателямСДатойРеализации", Истина).Значение;
	//НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов = справочники.сабМониторВнедрения.НайтиПоНаименованию("НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов", Истина).Значение;
	//СрезОстатковНаДатуЗаказа = справочники.сабМониторВнедрения.НайтиПоНаименованию("СрезОстатковНаДатуЗаказа", Истина).Значение;
	//ВозможноЧастичноеИсполнениеЗаказов = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ВозможноЧастичноеИсполнениеЗаказов", Истина).Значение;
	//КонтролироватьУникальностьАртикулов = Справочники.сабМониторВнедрения.НайтиПоНаименованию("КонтролироватьУникальностьАртикулов", Истина).Значение;
	//АльтернативнаяФормаЗаказов = Справочники.сабМониторВнедрения.НайтиПоНаименованию("АльтернативнаяФормаЗаказов", Истина).Значение;
	//РассчитыватьСебестоимостьПоСериям = Справочники.сабМониторВнедрения.НайтиПоНаименованию("РассчитыватьСебестоимостьПоСериям", Истина).Значение;
	//КорректироватьСебестоимостьПриВыходеОстаткаИзМинуса = Справочники.сабМониторВнедрения.НайтиПоНаименованию("КорректироватьСебестоимостьПриВыходеОстаткаИзМинуса", Истина).Значение;
	//ЗапретПроведенияЗаказаПокупателяСПустымПодразделением = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ЗапретПроведенияЗаказаПокупателяСПустымПодразделением", Истина).Значение;
	//ОграничитьСписокКомандПечатиВРеализации = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ОграничитьСписокКомандПечатиВРеализации", Истина).Значение;
	//КонтролироватьЗаполнениеОбязательныхПолейВПоступлении = Справочники.сабМониторВнедрения.НайтиПоНаименованию("КонтролироватьЗаполнениеОбязательныхПолейВПоступлении", Истина).Значение;
	//ВнутрихолдинговоеДвижение = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ВнутрихолдинговоеДвижение", Истина).Значение;
	//ОрганизацияПродажи = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ОрганизацияПродажи", Истина).Значение; 
	//СкладПродажи = Справочники.сабМониторВнедрения.НайтиПоНаименованию("СкладПродажи", Истина).Значение;
	//КонтрольНоменклатурыДляФормы2ВЗаказеКлиента = Справочники.сабМониторВнедрения.НайтиПоНаименованию("КонтрольНоменклатурыДляФормы2ВЗаказеКлиента", Истина).Значение;
	//РучнаяКорректировкаРасходаВВыпускахПоСпецификации = Справочники.сабМониторВнедрения.НайтиПоНаименованию("РучнаяКорректировкаРасходаВВыпускахПоСпецификации", Истина).Значение;
	//ОчищатьСтатьюДДСПриСозданииПлатежногоПоручения = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ОчищатьСтатьюДДСПриСозданииПлатежногоПоручения", Истина).Значение;
	
	//сабПодсистемаКазначейство = Константы.сабПодсистемаКазначейство.Получить();
	//сабПодсистемаБюджетирование = Константы.сабПодсистемаБюджетирование.Получить();
	//сабОперативныйРежимРаботы = Константы.сабОперативныйРежимРаботы.Получить();
	//сабПодсистемаДокументооборот = Константы.сабПодсистемаДокументооборот.Получить();
	//сабПодсистемаОперативныйУчет = Константы.сабПодсистемаОперативныйУчет.Получить();
	//сабОбменСЛогистическимиПрограммами = Константы.сабОбменСЛогистическимиПрограммами.Получить();
	//сабКонтрольПоСрокамГодности = Константы.сабКонтрольПоСрокамГодности.Получить();
	//
	//
	//ВключитьСправочникПодразделения = Константы.ИспользоватьБизнесПроцессыЗаявокСотрудников.Получить();
	#КонецОбласти
	ФоноваяОбработкаБУДокументовПриИзмененииНаСервере();
	ФоноваяОбработкаУУДокументовПриИзмененииНаСервере();
	сабОперативныйРежимРаботыПриИзмененииНаСервере();
	ВключитьСправочникПодразделенияПриИзмененииНаСервере();
	
	ТекСтрокаЛицензии = Справочники.сабМониторВнедрения.НайтиПоНаименованию("Ключ лицензии", Истина);
	СтруктураЛицензий = РегистрыСведений.сабСоответствияОрганизацийПредприятиям.ПроверитьЛицензиюМодуля();
	Если СтруктураЛицензий.ПолныеЛицензии.Найти(ТекСтрокаЛицензии.Значение) = Неопределено Тогда
		Элементы.ИспользоватьБизнесПроцессы.Доступность = Ложь;
		//Элементы.ВключитьСправочникПодразделения.Доступность = Ложь;
		Элементы.сабПодсистемаДокументооборот.Доступность = Ложь;
	Иначе
		Элементы.Декорация1.Видимость = Ложь;
	КонецЕсли;
	
	ИспользоватьКлючиАналитикиБюджетаПриИзмененииСервер(Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ФоноваяОбработкаБУДокументовПриИзмененииНаСервере()
	Элементы.ФоноваяПроверкаБУДокументов.Доступность = ФоноваяОбработкаБУДокументов;
	Если Не ФоноваяОбработкаБУДокументов Тогда
		ФоноваяПроверкаБУДокументов = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ФоноваяОбработкаУУДокументовПриИзмененииНаСервере()
	//Элементы.ФоноваяПроверкаУУДокументов.Доступность = ФоноваяОбработкаУУДокументов;
	Если Не ФоноваяОбработкаУУДокументов Тогда
		//ФоноваяПроверкаУУДокументов = Ложь;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ФоноваяОбработкаБУДокументовПриИзменении(Элемент)
	ФоноваяОбработкаБУДокументовПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ФоноваяОбработкаУУДокументовПриИзменении(Элемент)
	ФоноваяОбработкаУУДокументовПриИзмененииНаСервере();
КонецПроцедуры


&НаСервере
Процедура сабОперативныйРежимРаботыПриИзмененииНаСервере()
	Элементы.ФоноваяОбработкаУУДокументов.Доступность = сабОперативныйРежимРаботы;
	Если Не сабОперативныйРежимРаботы Тогда
	 ФоноваяОбработкаУУДокументов = Ложь;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура сабОперативныйРежимРаботыПриИзменении(Элемент)
	сабОперативныйРежимРаботыПриИзмененииНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура ПараметрыРегламентныхЗаданийРасширения(Команда)
	ОткрытьФорму("РегистрСведений.ПараметрыРегламентныхЗаданийРасширения.Форма.ФормаСписка");
КонецПроцедуры

&НаСервере
Процедура ВключитьСправочникПодразделенияПриИзмененииНаСервере()
	Элементы.ЗапретПроведенияЗаказаПокупателяСПустымПодразделением.Доступность = ВключитьСправочникПодразделения;
	Если Не ВключитьСправочникПодразделения Тогда
	 ЗапретПроведенияЗаказаПокупателяСПустымПодразделением = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВключитьСправочникПодразделенияПриИзменении(Элемент)
	ВключитьСправочникПодразделенияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКлючиАналитикиБюджетаПриИзменении(Элемент)
	ИспользоватьКлючиАналитикиБюджетаПриИзмененииСервер(НЕ Элемент = Неопределено);
КонецПроцедуры

&НаСервере
Процедура ИспользоватьКлючиАналитикиБюджетаПриИзмененииСервер(Изменять)
	ДополнительнаяАналитикаУчета = ?(ИспользоватьКлючиАналитикиБюджета, 1, ?(ИспользоватьПроекты, 2, Ложь));
КонецПроцедуры


&НаКлиенте
Процедура ДополнительнаяАналитикаУчетаПриИзменении(Элемент)
	ИспользоватьКлючиАналитикиБюджета = ?(ДополнительнаяАналитикаУчета = 1, Истина, Ложь);
	ИспользоватьПроекты = ?(ДополнительнаяАналитикаУчета = 2, Истина, Ложь);
КонецПроцедуры

