&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	
	//++саб
	сабПриЧтенииНаСервере(ТекущийОбъект);
	//--саб
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, Новый Структура("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты") );
	КонецЕсли;
	
	//++саб
	сабПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	//--саб
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	//++саб
	сабПриОткрытии(Отказ);
	//--саб
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		Если МодульУправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбновитьЭлементыДополнительныхРеквизитов();
			МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
	//++саб
	сабОбработкаОповещения(ИмяСобытия, Параметр, Источник);
	//--саб
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	//КонецЕсли;
	
	//++саб
	сабПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	//--саб
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры


// СтандартныеПодсистемы.КонтактнаяИнформация

// Поддержка дополнительных реквизитов.

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

&НаСервереБезКонтекста
Функция ПроверкаДоговора(ДокументДоговор)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.ДокументОснование = &ДокументОснование
	|	И НЕ ДоговорыКонтрагентов.ДокументОснование = &ПустойДокумент";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументДоговор);
	Запрос.УстановитьПараметр("ПустойДокумент", Документы.Д_ЗаявкаНаСогласованиеДоговора.ПустаяСсылка());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат  ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		Возврат  "Чисто";
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура сабПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Если БюджетныйНаСервере.РольДоступнаСервер("Коммерсант") или БюджетныйНаСервере.РольДоступнаСервер("КоммерсантПредприятия") ИЛИ БюджетныйНаСервере.РольАдминаДоступнаСервер() Тогда
	//	Если Объект.Ссылка.Пустая() Тогда
	//		Объект.СозданКоммерсантом = Истина;
	//		Объект.ВидДоговора = ПокупательОсновнойПродукции();
	//		Элементы.Наименование.Доступность = Ложь;
	//	КонецЕсли;
	//Иначе
	Если ЗначениеЗаполнено(ПараметрыСеанса.ТекущееПредприятие) Тогда
		Объект.Предприятие = ПараметрыСеанса.ТекущееПредприятие;		
	КонецЕсли; 
	
	БюджетныйНаСервере.ДействияПриСозданииФормыСправочника(ЭтаФорма);
	//КонецЕсли;
	//СформироватьHTMLПоТабличнойЧасти(Объект.ТекстДоговора);
	ИзмененияВДоговоре.Параметры.УстановитьЗначениеПараметра("Объект", Объект.Ссылка);
	ЗаполнитьСписокФорматируемыхДоков();
	ЗаполнитьРасшифровкиСоответствий(Ложь);
	
	Если Параметры.Свойство("Владелец") Тогда
		Объект.Владелец = Параметры.Владелец;
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(Объект.ШаблонДоговора) Тогда
	//	ШаблонДоговораПриИзмененииНаСервере(Истина);
	//КонецЕсли;
	
	//ШаблонДоговораПриИзмененииНаСервере(Ложь);
			
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьРасшифровкиСоответствий(Изменять = Ложь)

	СоответствияРеквизитов = ЗаполнитьСоответствия(); 
	Для каждого ТекСтрока Из Объект.СоответствиеПеременных Цикл
		Если НЕ СоответствияРеквизитов[СтрЗаменить(ТекСтрока.ИмяПеременной, "#", "")] = Неопределено Тогда
			Если Изменять Тогда
				ТекСтрока.ЗначениеПеременной = СтрЗаменить(ТекСтрока.ИмяПеременной, "#", "");
				ТекСтрока.Расшифровка = СоответствияРеквизитов[ТекСтрока.ЗначениеПеременной];
			КонецЕсли;
			ТекСтрока.ЭтаПредопределеннаяПеременная = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьСписокФорматируемыхДоков()
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Для каждого ТекСтрока Из Объект.Ссылка.ПолучитьОбъект().СодержаниеДоговора Цикл
			ЗначХранилища = ТекСтрока.ТекстФорматированный.Получить();
			СписокФорматируемыхДоков.Добавить(ЗначХранилища);
		КонецЦикла; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокФорматируемыхДоковНовых()
	Для каждого ТекСтрока Из Объект.СодержаниеДоговора Цикл
		ЗначХранилища = Новый ФорматированныйДокумент;
		ЗначХранилища.Вставить(ЗначХранилища.ПолучитьЗакладкуНачала(), ТекСтрока.Текст);
		СписокФорматируемыхДоков.Добавить(ЗначХранилища);
	КонецЦикла; 
КонецПроцедуры



&НаКлиенте
Процедура сабПриОткрытии(Отказ)
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если СтрНайти(Объект.Наименование, "##УжеСоздан") Тогда
			Предупреждение("На основании заявки уже был создан договор " + Сред(Объект.Наименование, 12) + "!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если СтрНайти(Объект.Наименование, "##НеПроведен") Тогда
			Предупреждение("Документ-основание не проведен!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		        		
		СуществующийДоговор = ПроверкаДоговора(Объект.ДокументОснование);
		Если СуществующийДоговор = "Чисто" Тогда
			Отказ = Ложь;
		Иначе
			Отказ = Истина;
			ПараметрыФормы = Новый Структура("Ключ",СуществующийДоговор);
			ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта",ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.Независимый);
			//ОткрытьЗначение(СуществующийДоговор);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьРеквизиты()
	
	Если ПравоДоступа("Изменение", Метаданные.Справочники.ДоговорыКонтрагентов) Тогда
		Если Объект.УсловияКонтрагента.Количество() Тогда
			
			Объект.Отсрочка = Объект.УсловияКонтрагента[0].Отсрочка;	
			Объект.Предоплата = Объект.УсловияКонтрагента[0].ПроцентПредоплаты;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры



&НаКлиенте
Процедура УсловияКонтрагентаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	СтандартнаяОбработка = Ложь;
	ДоляСуммы = Объект.УсловияКонтрагента.Итог("ДоляСуммы");
	Если НЕ Элемент.ТекущиеДанные.ДоляСуммы Тогда
		Элемент.ТекущиеДанные.ДоляСуммы = 100 - ДоляСуммы;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УсловияКонтрагентаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	//Если Объект.УсловияКонтрагента.Итог("ДоляСуммы") = 100 Тогда
	//	Отказ = Истина;	
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтсрочкаДоКонцаМесяцаПриИзменении(Элемент)
	Элементы.УсловияКонтрагентаОтсрочка.Видимость = 1 - Объект.ОтсрочкаДоКонцаМесяца;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	//Если ТипОтсрочки ="Простая" Тогда
	//	Объект.УсловияКонтрагента.Очистить();
	//	НоваяСтрока = Объект.УсловияКонтрагента.Добавить();
	//	НоваяСтрока.Отсрочка = Объект.Отсрочка;
	//	НоваяСтрока.ПроцентПредоплаты = Объект.Предоплата;
	//	НоваяСтрока.ДоляСуммы = 100;
	//КонецЕсли;
	//Если НЕ Объект.УсловияКонтрагента.Количество() И НЕ ТипПокупатели(Объект.ВидДоговора) = Неопределено Тогда
	//	Если Вопрос("По Договору " + Объект.Наименование + " не заданы условия. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет  Тогда
	//		Отказ = Истина;		
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Объект.СуммаДоговора = ?(ТипОтсрочки = "Сложная" И Объект.УсловияКонтрагента.Итог("Сумма"), Объект.УсловияКонтрагента.Итог("Сумма"), Объект.СуммаДоговора);
	
	//ЗаполнитьРасшифровкиСоответствий();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДоговораПриИзменении(Элемент)
	//Если ПокупательОсновнойПродукции(Объект.ВидДоговора) Тогда
	//Элементы.Группа4.Доступность = Истина;
	//Элементы.Группа6.Доступность = Истина;
	//Элементы.Группа7.Доступность = Истина;
	//Элементы.Группа4.Видимость = ПокупательОсновнойПродукции(Объект.ВидДоговора);
	//Иначе
	//	Элементы.Группа4.Видимость = Ложь;
	//	Элементы.Группа6.Видимость = Ложь;
	//	Элементы.Группа7.Видимость = Ложь;
	//КонецЕсли;
	Если Не Элемент = Неопределено ИЛИ Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.СчетВзаиморасчетов = сабОбщегоНазначенияПовтИсп.ПолучитьСоответвиеВидовДоговоров().Получить(Объект.ВидДоговора);
	КонецЕсли;
	
	ВидДоговораПриИзмененииНаСервере();
	
	
КонецПроцедуры

&НаСервере
Процедура ВидДоговораПриИзмененииНаСервере()
	
	НовыйМассив = Новый Массив();
	
	Если НЕ сабОбщегоНазначенияПовтИсп.МассивДоговоровСПокупателем().Найти(Объект.ВидДоговора) = Неопределено Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Доход", Истина);
		НовыйМассив.Добавить(НовыйПараметр);
	ИначеЕсли НЕ сабОбщегоНазначенияПовтИсп.МассивДоговоровСПоставщиком().Найти(Объект.ВидДоговора) = Неопределено Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Доход", Ложь);
		НовыйМассив.Добавить(НовыйПараметр);
	КонецЕсли;
	
	Если ЕстьСтатьиДляДоговоров Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ИспользуетсяВДоговорах", Истина);
		НовыйМассив.Добавить(НовыйПараметр);
	КонецЕсли;
	
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.СтатьяДДС.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПокупательОсновнойПродукции(ВидДоговора = Неопределено)
	Если ВидДоговора = Неопределено Тогда
		Возврат Перечисления.ВидыДоговоровКонтрагентов.ПокупательОсновнойПродукции;
	Иначе
		Возврат ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.ПокупательОсновнойПродукции ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.ПокупателиБарды ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.ПокупателиСпиртаЗаНаличныйРасчет;
	КонецЕсли;
КонецФункции // ()

&НаКлиенте
Процедура ТипОтсрочкиПриИзменении(Элемент)
	Если ТипОтсрочки = "Простая"  Тогда
		Элементы.Группа8.ТекущаяСтраница = Элементы.Простая;
	Иначе
		Элементы.Группа8.ТекущаяСтраница = Элементы.Сложная;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЮрЛицоПриИзменении(Элемент)
	
	ПредприятиеОрганизации = БюджетныйНаСервере.ВернутьРеквизит(Объект.Организация, "Предприятие");
	РСОрганизации = БюджетныйНаСервере.ВернутьРеквизит(Объект.Организация, "ОсновнойБанковскийСчет");
	
	Если ЗначениеЗаполнено(ПредприятиеОрганизации) Тогда
		Объект.Предприятие = ПредприятиеОрганизации;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РСОрганизации) Тогда
		Объект.РасчетныйСчетЮрЛица = РСОрганизации;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.РасчетныйСчетЮрЛица) И НЕ ЗначениеЗаполнено(Объект.Предприятие) Тогда
		РасчетныйСчетЮрЛицаПриИзменении(0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетныйСчетЮрЛицаПриИзменении(Элемент)
	
	ПредприятиеРС = ВернутьПредприятие(Объект.РасчетныйСчетЮрЛица);
	
	Если ЗначениеЗаполнено(ПредприятиеРС) Тогда
		Объект.Предприятие = ПредприятиеРС;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьПредприятие(РасчетныйСчетЮрЛица)
	ПоследнееПредприятие = Справочники.Предприятия.ПустаяСсылка();
	Если ЗначениеЗаполнено(РасчетныйСчетЮрЛица.Источник) Тогда
		ТекИсточник = РасчетныйСчетЮрЛица.Источник;
		ОТБ = Новый Структура("БанковскиеСчета",ТекИсточник);
		ТП = РегистрыСведений.Д_ИсточникПП.СрезПоследних(ТекущаяДата(),ОТБ);
		Если ТП.Количество() Тогда
			ПоследнееПредприятие = ТП[0].Предприятие;	
		КонецЕсли;
	КонецЕсли;
	Возврат ПоследнееПредприятие;
КонецФункции // ()

&НаСервереБезКонтекста
Функция ТипПокупатели(ТекТип)
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Перечисления.ВидыДоговоровКонтрагентов.ПокупательОсновнойПродукции);
	МассивТипов.Добавить(Перечисления.ВидыДоговоровКонтрагентов.ПокупательПрочейПродукции);
	
	Возврат МассивТипов.Найти(ТекТип);
КонецФункции // ()

&НаКлиенте
Процедура ПредприятиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Объект.СозданКоммерсантом Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.Предприятия.Форма.ФормаВыбора",,Элемент); 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПСПриИзменении(Элемент)
	
	Элементы.ПаспортСделки.Доступность = Объект.ИспользоватьПС;
	
КонецПроцедуры

&НаСервере
Процедура сабПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Для каждого ТекСтрока Из ТекущийОбъект.СодержаниеДоговора Цикл
		ТекСтрока.ТекстФорматированный = Новый ХранилищеЗначения(СписокФорматируемыхДоков[ТекущийОбъект.СодержаниеДоговора.Индекс(ТекСтрока)].Значение, Новый СжатиеДанных(9));	
	КонецЦикла; 
	//ТекущийОбъект.ТекстДоговора = Новый ХранилищеЗначения(ТекстДоговораФД, Новый СжатиеДанных(9));
КонецПроцедуры

&НаСервере
Процедура сабПриЧтенииНаСервере(ТекущийОбъект)
КонецПроцедуры

&НаСервере
Процедура СформироватьПеременные(ТекОбъект = Неопределено)
	Если ТекОбъект = Неопределено Тогда
		ТекОбъект = Объект;
	КонецЕсли;
	
	Для каждого ТекСтрока Из ТекОбъект.СодержаниеДоговора Цикл
		МассивИменПеременных = ПолучитьИменаПеременныхИзТекста(ТекСтрока.Текст);
		Для каждого ИмяПеременной Из МассивИменПеременных Цикл
			Если НЕ ТекОбъект.СоответствиеПеременных.НайтиСтроки(Новый Структура("ИмяПеременной", ИмяПеременной)).Количество()  Тогда
				НоваяСтрокаПеременная = ТекОбъект.СоответствиеПеременных.Добавить();	
				НоваяСтрокаПеременная.ИмяПеременной = ИмяПеременной;
			КонецЕсли;
		КонецЦикла; 		
	КонецЦикла; 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИменаПеременныхИзТекста(Текст)
	МассивИменПеременных = Новый Массив;
	Для ИндексСимволаНачало = 1 по СтрДлина(Текст) Цикл
		Если Сред(Текст, ИндексСимволаНачало, 1) = "#" Тогда
			ИндексСимволаКонец = ИндексСимволаНачало + 1;
			ТекСимвол = Сред(Текст, ИндексСимволаКонец, 1);
			Пока НЕ ТекСимвол = "#" И ИндексСимволаКонец <= СтрДлина(Текст) Цикл
				ТекСимвол = Сред(Текст, ИндексСимволаКонец, 1);
				ИндексСимволаКонец = ИндексСимволаКонец + 1;
			КонецЦикла;
			Если НЕ ИндексСимволаНачало + 1 = ИндексСимволаКонец Тогда
				ИмяПеременной = СреД(Текст, ИндексСимволаНачало, ИндексСимволаКонец - ИндексСимволаНачало);
				Если МассивИменПеременных.Найти(ИмяПеременной) = Неопределено Тогда
					МассивИменПеременных.Добавить(ИмяПеременной);
				КонецЕсли;
			КонецЕсли;
			ИндексСимволаНачало = ИндексСимволаКонец;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивИменПеременных;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИменаПеременныхИзТекстаНаКлиенте(Текст)
	МассивИменПеременных = Новый Массив;
	Для ИндексСимволаНачало = 1 по СтрДлина(Текст) Цикл
		Если Сред(Текст, ИндексСимволаНачало, 1) = "#" Тогда
			ИндексСимволаКонец = ИндексСимволаНачало + 1;
			ТекСимвол = Сред(Текст, ИндексСимволаКонец, 1);
			Пока НЕ ТекСимвол = "#" И ИндексСимволаКонец <= СтрДлина(Текст) Цикл
				ТекСимвол = Сред(Текст, ИндексСимволаКонец, 1);
				ИндексСимволаКонец = ИндексСимволаКонец + 1;
			КонецЦикла;
			Если НЕ ИндексСимволаНачало + 1 = ИндексСимволаКонец Тогда
				ИмяПеременной = СреД(Текст, ИндексСимволаНачало, ИндексСимволаКонец - ИндексСимволаНачало);
				Если МассивИменПеременных.Найти(ИмяПеременной) = Неопределено Тогда
					МассивИменПеременных.Добавить(ИмяПеременной);
				КонецЕсли;
			КонецЕсли;
			ИндексСимволаНачало = ИндексСимволаКонец;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивИменПеременных;
	
КонецФункции


&НаСервереБезКонтекста
Процедура СформироватьHTML(НовостиHTML, Выборка, СоответствиеПеременных, РеквизитыШапки, ЗагрузкаШаблона = Ложь)
	
	
	НовостиHTML = "<HTML><HEAD>
	|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type><LINK rel=stylesheet type=text/css href=""__STYLE__""><BASE href=""v8config://26d610bd-8712-4000-956d-0edbe58646d8/mdobject/idcf715f2f-493b-44cc-8c21-3424f7d402ea/8eb4fad1-1fa6-403e-970f-2c12dbb43e23"">
	|<META name=GENERATOR content=""MSHTML 11.00.9600.17041""></HEAD>
	|<BODY><font face=""Times New Roman, Tahoma, Geneva, sans-serif""><style>p {text-indent: 20px;}</style>";
	
	
	НовостиHTML = НовостиHTML + "<script type=""text/javascript"">function message() {window.scroll(0,100000);}</script>";
	НовостиHTML = НовостиHTML +  "
	|<table style=""width: 18cm; font-size: 10pt""><tbody>";
	
	НовостиHTML = НовостиHTML + "<tr>
	|<th style=""width: 50%""></th>
	|<th style=""width: 50%""></th>
	|</tr>";
	
	
	НовостиHTML = НовостиHTML  + "<tr><td   colspan=""2"" style=""width: 100%;text-align: center; margin-bottom: 1em ""><b>ДОГОВОР ИНФОРМАЦИОННОГО СОПРОВОЖДЕНИЯ №" + РеквизитыШапки.Код + "</b></td></tr>";
	//НовостиHTML = НовостиHTML + "</tbody></table>";
	
	//НовостиHTML = НовостиHTML +  "
	//|<table style=""width: 17.5cm; font-size: 12pt; margin-bottom: 1em ""><tbody>";	
	НовостиHTML = НовостиHTML  + "<tr><td style=""width: 50%;text-align: left; "">#ГородДоговора#</td>";
	НовостиHTML = НовостиHTML  + "<td style=""width: 50%;text-align: right; "">" + Формат(РеквизитыШапки.ДатаДоговора, "ДФ='дд ММММ гггг'") + "</td></tr>";
	//НовостиHTML = НовостиHTML + "</tbody></table>";
	
	//НовостиHTML = НовостиHTML +  "
	//|<table style=""width: 17.5cm; font-size: 12pt""><tbody>";
	//НовостиHTML = НовостиHTML  + "<tr><td style=""width: 100%;text-align: justify; ""><p>" + РеквизитыШапки.Преамбула + "</p></td></tr>";
	
	НовостьВывода = 0;
	
	СодержаниеПодвал1 = "";
	СодержаниеПодвал2 = "";
	ПодписьПодвалСторона1 = "";
	ПодписьПодвалСторона2 = "";
	
	Для каждого ТекСтрокаШаблона Из Выборка Цикл
		
		ЭтоПодвал = ТекСтрокаШаблона.ТипРаздела = "Сторона1Подвал" ИЛИ ТекСтрокаШаблона.ТипРаздела = "Сторона2Подвал" ИЛИ ТекСтрокаШаблона.Номер = "ПодписьПодвалСторона1" ИЛИ ТекСтрокаШаблона.Номер = "ПодписьПодвалСторона2";
		
		Содержание = "";
		
		НачалоСодержания = Найти(ТекСтрокаШаблона.ТекстHTML, "<body>");
		КонецСодержания = Найти(ТекСтрокаШаблона.ТекстHTML, "</body>");
		Содержание = Сред(ТекСтрокаШаблона.ТекстHTML, НачалоСодержания + 7, КонецСодержания-НачалоСодержания-8);
		Если Содержание = "" Тогда
			Содержание = ТекСтрокаШаблона.Текст;		
		КонецЕсли; 
		
		//присваеваем значения переменным
		Для каждого ТекСтрокаСоотв Из СоответствиеПеременных Цикл
			
			Содержание = СтрЗаменить(Содержание, ТекСтрокаСоотв.ИмяПеременной, ТекСтрокаСоотв.ЗначениеПеременной);
			
		КонецЦикла;
	
		
		//добавляем номер пункта
		
		Если НЕ ЭтоПодвал Тогда
			Для ТекСимвИндекс = 1 по СтрДлина(Содержание) Цикл
				ТекСимв = Сред(Содержание, ТекСимвИндекс, 1);
				Если ТекСимв = "<" Тогда //ищем закрытую скобку
					Пока НЕ ТекСимв = ">" И ТекСимвИндекс <= СтрДлина(Содержание) Цикл
						ТекСимвИндекс = ТекСимвИндекс + 1;						
						ТекСимв = Сред(Содержание, ТекСимвИндекс, 1);
					КонецЦикла;
				Иначе //нашли какой-то текст наконец-то
					Содержание = Сред(Содержание,1 , ТекСимвИндекс - 1) + ТекСтрокаШаблона.Номер + " " + Сред(Содержание, ТекСимвИндекс, СтрДлина(Содержание) - ТекСимвИндекс + 1);
					Прервать;
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
		
		
		
		//Для Счетчик = 1 По СтрЧислоСтрок(ТекСтрокаШаблона.Текст) Цикл
		//	ТекСтрока = СтрПолучитьСтроку(ТекСтрокаШаблона.Текст, Счетчик);
		//	Содержание = Содержание + ТекСтрока + "<br>";
		//КонецЦикла;
		
		//СсылкаАвтор = ПолучитьНавигационнуюСсылку(ТекНовость.Автор);
		
		//заменяем несколько <p></p> на <br>. Абзац д.б. один
		ТекИндексСимвола = 1;
		КоличествоТэговР = 0;
		ЕстьТэг = Ложь;
		Пока ТекИндексСимвола <= СтрДлина(Содержание) Цикл
			Если Сред(Содержание, ТекИндексСимвола, 2) = "<p" Тогда //нашли начало тэга
				ЕстьТэг = Истина;
				КоличествоТэговР = КоличествоТэговР + 1;
				Если КоличествоТэговР > 1 Тогда //первый тэг <p> пропускаем
					ТекИндексСимвола2 = ТекИндексСимвола;
					Пока ТекИндексСимвола2 <= СтрДлина(Содержание) Цикл
						Если Сред(Содержание, ТекИндексСимвола2, 1) = ">" Тогда // нашли конец
							Содержание = Сред(Содержание, 1, ТекИндексСимвола - 1) + Сред(Содержание, ТекИндексСимвола2 + 1, СтрДлина(Содержание) - ТекИндексСимвола2);
							ТекИндексСимвола = ТекИндексСимвола2 - 1;
							Прервать;
						КонецЕсли;
						ТекИндексСимвола2 = ТекИндексСимвола2 + 1;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			ТекИндексСимвола = ТекИндексСимвола + 1;
		КонецЦикла;
		Содержание = СтрЗаменить(Содержание, "</p>", "<br>
		|");
		Содержание = ?(ЕстьТэг, "", "<p>") + Содержание + "</p>";
		
		
		
		Если ТекСтрокаШаблона.ТипРаздела = "Раздел" Тогда
			Содержание = СтрЗаменить(Содержание, "p style='", "p style='margin-top: 0.5em; margin-bottom: 1em; text-align: center;");
			Содержание = СтрЗаменить(Содержание, "<p>", "<p style='margin-top: 0.5em; margin-bottom: 1em; text-align: center;'>");
			НовостиHTML = НовостиHTML  + "<tr><td  colspan=""2"" style=""width: 100%;text-align: center;"">" + Содержание + "</td></tr>";
		ИначеЕсли ТекСтрокаШаблона.ТипРаздела = "Пункт" Тогда
			Содержание = СтрЗаменить(Содержание, "p style='", "p style='text-align: justify;");
			Содержание = СтрЗаменить(Содержание, "<p>", "<p style='text-align: justify;'>");
			НовостиHTML = НовостиHTML  + "<tr><td  colspan=""2"" style=""width: 100%;text-align: justify;"">" + Содержание + "</td></tr>";
		ИначеЕсли ТекСтрокаШаблона.ТипРаздела = "Сторона1Подвал" Тогда
			СодержаниеПодвал1 = Содержание;	
		ИначеЕсли ТекСтрокаШаблона.ТипРаздела = "Сторона2Подвал" Тогда
			СодержаниеПодвал2 = Содержание;
		ИначеЕсли ТекСтрокаШаблона.ТипРаздела = "ПодписьПодвалСторона1" Тогда
			ПодписьПодвалСторона1 = Содержание;
		ИначеЕсли ТекСтрокаШаблона.ТипРаздела = "ПодписьПодвалСторона2" Тогда
			ПодписьПодвалСторона2 = Содержание;
		ИначеЕсли ТекСтрокаШаблона.ТипРаздела = "Город" Тогда
			НовостиHTML = СтрЗаменить(НовостиHTML, "#ГородДоговора#", Содержание);	
		Иначе
			//Если ЭтоПодвал Тогда
			//	НовостиHTML = НовостиHTML  + "<tr><td style=""width: 100%;text-align: left;"">" + Содержание + "</td></tr>";
			//Иначе
			НовостиHTML = НовостиHTML  + "<tr><td colspan=""2"" style=""width: 100%;text-align: justify;"">" + Содержание + "</td></tr>";
			//КонецЕсли;
			
			
		КонецЕсли;
		
		//НовостиHTML = НовостиHTML  + "<td style=""width: 10px;text-align: center;""><A href=v8object:" + ТекСтрокаШаблона.Номер + ">Редактировать пункт</A></td></tr>";
		
		
	КонецЦикла;
	
	//стороны подвал
	//НовостиHTML = НовостиHTML +  "
	//|<table style=""width: 17.5cm; font-size: 12pt; margin-bottom: 1em ""><tbody>";	
	НовостиHTML = НовостиHTML  + "<tr><td valign=""top"" style=""width: 50%;text-align: left; "">" + СодержаниеПодвал1 + "</td>";
	НовостиHTML = НовостиHTML  + "<td valign=""top"" style=""width: 50%;text-align: left; "">" + СодержаниеПодвал2 + "</td></tr>";
	
	НовостиHTML = НовостиHTML  + "<tr><td valign=""top"" style=""width: 50%;text-align: left; "">" + ПодписьПодвалСторона1 + "</td>";
	НовостиHTML = НовостиHTML  + "<td valign=""top"" style=""width: 50%;text-align: left; "">" + ПодписьПодвалСторона2 + "</td></tr>";
	//НовостиHTML = НовостиHTML + "</tbody></table>";

	
	НовостиHTML = НовостиHTML + "</tbody></table>";
	НовостиHTML = НовостиHTML + "<a name = ""forScroll""></a>";
	НовостиHTML = НовостиHTML + "</font></BODY></HTML>";
	
	//НовостиHTML = СтрЗаменить(НовостиHTML, "<span>", "");
	//НовостиHTML = СтрЗаменить(НовостиHTML, "</span>", "");
	//НовостиHTML = "";
КонецПроцедуры

&НаКлиенте
Процедура ТекстДоговораФДПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	БюджетныйНаКлиенте.ПриНажатииHTML(Элемент, ДанныеСобытия, СтандартнаяОбработка);
	Если Лев(ДанныеСобытия.Href, 9) = "v8object:" Тогда
		//НомерНовости = Сред(ДанныеСобытия.Href, 10);
		//Новость = НайтиНовостьПоКоду(НомерНовости);
		//ОткрытьФорму("Документ.Новости.Форма.ФормаКомментариев", Новый Структура("Ключ", Новость));
	ИначеЕсли Лев(ДанныеСобытия.Href, 11) = "v8newspage:" Тогда
		//БПСервер.ЗаполнитьНовости(Объект.ТекстДоговора, Число(Сред(ДанныеСобытия.Href, 12)));
	ИначеЕсли Найти(ДанныеСобытия.Href, "e1cib") Или Найти(ДанныеСобытия.Href, "http://") Тогда //остальные клики
		ПерейтиПоНавигационнойСсылке(Прав(ДанныеСобытия.Href, СтрДлина(ДанныеСобытия.Href) - Найти(ДанныеСобытия.Href, "e1cib") + 1));
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СодержаниеДоговораТекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Редактировать("");
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	//Если Не ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
	//	Если НЕ Вопрос("Перед редактированием данные должны быть записаны. Продолжить?", РежимДиалогаВопрос.ДаНетОтмена) = КодВозвратаДиалога.Да  Тогда
	//		Возврат;	
	//	Иначе
	//		Записать();
	//	КонецЕсли;
	//КонецЕсли;
	Если НЕ Элементы.СодержаниеДоговора.ТекущиеДанные = Неопределено Тогда
		ИндексСтроки = Объект.СодержаниеДоговора.Индекс(Объект.СодержаниеДоговора.НайтиПоИдентификатору(Элементы.СодержаниеДоговора.ТекущаяСтрока));
		ТекФорматируемыйТекстХранилище = СписокФорматируемыхДоков[ИндексСтроки].Значение;
		ОткрытьФорму("Справочник.сабШаблоныДоговоров.Форма.ФормаФорматирования", Новый Структура("Текст, ХранилищеТекста, ИндексСтроки, ВладелецУИД", Элементы.СодержаниеДоговора.ТекущиеДанные.Текст, ТекФорматируемыйТекстХранилище, ИндексСтроки, ЭтаФорма.УникальныйИдентификатор));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВернутьФорматированныйДокумент(ИндексСтроки)
	
	Возврат Объект.Ссылка.СодержаниеДоговора[ИндексСтроки].ТекстФорматированный;
	
КонецФункции // ()

&НаКлиенте
Процедура СодержаниеДоговораВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "СодержаниеДоговораТекст" Тогда
		СтандартнаяОбработка = Ложь;
		Редактировать("");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура сабОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПередатьФорматируемыйТекст" И Параметр.ВладелецУИД = ЭтаФорма.УникальныйИдентификатор Тогда
		ОбновитьФорматируемыйДокументВСписке(Параметр, Элементы.СодержаниеДоговора.ТекущаяСтрока);
		СформироватьHTMLПоТабличнойЧасти(Объект.ТекстДоговора);
		Модифицированность = Истина;
	ИначеЕсли ИмяСобытия = "ПрикрепленныеФайлы" Тогда	
		сабОбщегоНазначенияКлиент.ОбновитьКоличествоПрикрепленныхФайлов(ЭтаФорма);	
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФорматируемыйДокументВСписке(Параметр, ТекСтрока)
	ИндексСтроки = Объект.СодержаниеДоговора.Индекс(Объект.СодержаниеДоговора.НайтиПоИдентификатору(ТекСтрока));
	СписокФорматируемыхДоков[ИндексСтроки].Значение = Параметр.ФорматируемыйТекст;
	Объект.СодержаниеДоговора[ИндексСтроки].Текст = Параметр.ФорматируемыйТекст.ПолучитьТекст();

	Объект.СодержаниеДоговора[ИндексСтроки].ТекстHTML = "";
	СтруктураКартинок = Новый Структура;
	СписокФорматируемыхДоков[ИндексСтроки].Значение.ПолучитьHTML(Объект.СодержаниеДоговора[ИндексСтроки].ТекстHTML, СтруктураКартинок);
	
	//Выгрузка картинок и корректировка ХТМЛ
	Для Каждого ТекКартинка Из СтруктураКартинок Цикл
		ФорматТекущейКартинки = Строка(ТекКартинка.Значение.Формат());
		Если Не ФорматТекущейКартинки = ФорматКартинки.НеизвестныйФормат Тогда
			ФорматТекущейКартинкиСтрока = Строка(ФорматТекущейКартинки);
			Объект.СодержаниеДоговора[ИндексСтроки].ТекстHTML = СтрЗаменить(Объект.СодержаниеДоговора[ИндексСтроки].ТекстHTML,ТекКартинка.Ключ,ТекКартинка.Ключ+ "." + ФорматТекущейКартинкиСтрока);
		КонецЕсли;
	КонецЦикла;

	
	
КонецПроцедуры


&НаСервере
Процедура ЗаписатьНаСервереБезКонтекста(Параметр, ТекСтрока)
	ИндексСтроки = Объект.СодержаниеДоговора.Индекс(Объект.СодержаниеДоговора.НайтиПоИдентификатору(ТекСтрока));
	ТекОбъект = Объект.Ссылка.ПолучитьОбъект();
	ТекОбъект.СодержаниеДоговора[ИндексСтроки].ТекстФорматированный = Новый ХранилищеЗначения(Параметр.ФорматируемыйТекст, Новый СжатиеДанных(9));
	ТекОбъект.СодержаниеДоговора[ИндексСтроки].Текст = Параметр.ФорматируемыйТекст.ПолучитьТекст();
	
	
	ТекОбъект.СодержаниеДоговора[ИндексСтроки].ТекстHTML = "";
	СтруктураКартинок = Новый Структура;
	ТекОбъект.СодержаниеДоговора[ИндексСтроки].ТекстФорматированный.Получить().ПолучитьHTML(ТекОбъект.СодержаниеДоговора[ИндексСтроки].ТекстHTML, СтруктураКартинок);
	
	//Выгрузка картинок и корректировка ХТМЛ
	Для Каждого ТекКартинка Из СтруктураКартинок Цикл
		ФорматТекущейКартинки = Строка(ТекКартинка.Значение.Формат());
		Если Не ФорматТекущейКартинки = ФорматКартинки.НеизвестныйФормат Тогда
			ФорматТекущейКартинкиСтрока = Строка(ФорматТекущейКартинки);
			ТекОбъект.СодержаниеДоговора[ИндексСтроки].ТекстHTML = СтрЗаменить(ТекОбъект.СодержаниеДоговора[ИндексСтроки].ТекстHTML,ТекКартинка.Ключ,ТекКартинка.Ключ+ "." + ФорматТекущейКартинкиСтрока);
		КонецЕсли;
	КонецЦикла;
	
	
	ТекОбъект.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПеременные(Команда)
	ПолучитьПеременныеИзФайла();
	ЗаполнитьРасшифровкиСоответствий(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПеременныеИзФайла()
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаИДвоичныеДанные(Объект.ФайлШаблонаДоговора);
	ВремФайлИмя = ПолучитьимяВременногоФайла();
	ДанныеФайла.ДвоичныеДанные.Записать(ВремФайлИмя);
	
	Wk = Новый COMОбъект("Word.Application"); 
	Wk.Documents.Open(ВремФайлИмя); 
	Документ = Wk.ActiveDocument(); 
	Для н = 1 по Документ.Paragraphs.Count Цикл
		Текст=СокрЛП(Строка(Документ.Paragraphs(н).Range.Text));
		
		//удаляем спецсимволы
		Для ТекИндекс = 1 По СтрДлина(Текст) Цикл
			Если КодСимвола(Сред(Текст, ТекИндекс, 1)) < 10 Тогда			
				Текст = СтрЗаменить(Текст, Символ(КодСимвола(Сред(Текст, ТекИндекс, 1))), "");	
			КонецЕсли;		
		КонецЦикла; 
		
		Если ЗначениеЗаполнено(Текст) Тогда //если что-то есть
			МассивИменПеременных = ПолучитьИменаПеременныхИзТекстаНаКлиенте(Текст);
			Для каждого ИмяПеременной Из МассивИменПеременных Цикл
				Если НЕ Объект.СоответствиеПеременных.НайтиСтроки(Новый Структура("ИмяПеременной", ИмяПеременной)).Количество()  Тогда
					НоваяСтрокаПеременная = Объект.СоответствиеПеременных.Добавить();	
					НоваяСтрокаПеременная.ИмяПеременной = ИмяПеременной;
				КонецЕсли;
			КонецЦикла; 		
		КонецЕсли;
		//Сообщить(Текст);
	КонецЦикла;
	//Документ.DisplayAlerts = Ложь;
	Документ.Close();
	Wk.DisplayAlerts = Ложь;
	Wk.Quit();
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствиеПеременныхЗначениеПеременнойПриИзменении(Элемент)
	ТекстДоговора = "";
	//СформироватьHTMLПоТабличнойЧасти(ТекстДоговора);
	//Объект.ТекстДоговора	= ТекстДоговора;
	
	Если НЕ Элемент = Неопределено Тогда
		Элементы.СоответствиеПеременных.ТекущиеДанные.Расшифровка = "";
		Элементы.СоответствиеПеременных.ТекущиеДанные.ЭтаПредопределеннаяПеременная = Ложь;	
	КонецЕсли;
	
	ЗаполнитьРасшифровкиСоответствий(Истина);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьHTMLПоТабличнойЧасти(ТекстДоговора)
	
	РеквизитыШапки = Новый Структура("Код, ДатаДоговора, Преамбула, ГородДоговора", Объект.Номер, Объект.Дата, Объект.Преамбула, Объект.ГородДоговора);
	
	Соответствия = Объект.СоответствиеПеременных.Выгрузить();
	ПредопределенныеСоответствия = ЗаполнитьСоответствия();
	Для каждого ТекСтрока Из Соответствия Цикл
		Если НЕ ПредопределенныеСоответствия.Получить(ТекСтрока.ЗначениеПеременной) = Неопределено Тогда
			ТекСтрока.ЗначениеПеременной = ПредопределенныеСоответствия.Получить(ТекСтрока.ЗначениеПеременной);			
		КонецЕсли;
	КонецЦикла; 
	
	СформироватьHTML(ТекстДоговора, Объект.СодержаниеДоговора.Выгрузить(), Соответствия, РеквизитыШапки);
	
	//Объект.ТекстДоговора = ТекстДоговора;
	

КонецПроцедуры

&НаКлиенте
Процедура СодержаниеДоговораПередУдалением(Элемент, Отказ)
	МассивУдаленных = Новый Массив;
	Для каждого ТекСтрока Из Элемент.ВыделенныеСтроки Цикл
		МассивУдаленных.Добавить(СписокФорматируемыхДоков[Объект.СодержаниеДоговора.Индекс(Объект.СодержаниеДоговора.НайтиПоИдентификатору(ТекСтрока))]);
	КонецЦикла; 
	
	Для каждого ТекЭл Из МассивУдаленных Цикл
		СписокФорматируемыхДоков.Удалить(ТекЭл);
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура СодержаниеДоговораПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	СписокФорматируемыхДоков.Добавить(Новый ФорматированныйДокумент);
КонецПроцедуры

&НаКлиенте
Процедура СоответствиеПеременныхЗначениеПеременнойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СоответствияРеквизитов = ЗаполнитьСоответствия();
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить("Ввести вручную...");
	Для каждого ТекСтрокаСоотв Из СоответствияРеквизитов Цикл
		СписокВыбора.Добавить(ТекСтрокаСоотв.Ключ);
	КонецЦикла;
	
	СтандартнаяОбработка = Ложь;
	
	ТекЗнач = Неопределено;

	
	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("СоответствиеПеременныхЗначениеПеременнойНачалоВыбораЗавершение", ЭтаФорма, Новый Структура("СоответствияРеквизитов", СоответствияРеквизитов)), СписокВыбора);
	
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствиеПеременныхЗначениеПеременнойНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	СоответствияРеквизитов = ДополнительныеПараметры.СоответствияРеквизитов;
	
	ТекЗнач = ВыбранныйЭлемент;
	Если Не ТекЗнач = Неопределено Тогда
		Если НЕ ТекЗнач.Значение = "Ввести вручную..." Тогда
			Элементы.СоответствиеПеременных.ТекущиеДанные.ЗначениеПеременной = ТекЗнач.Значение;
			Элементы.СоответствиеПеременных.ТекущиеДанные.Расшифровка = СоответствияРеквизитов[ТекЗнач.Значение];
			Элементы.СоответствиеПеременных.ТекущиеДанные.ЭтаПредопределеннаяПеременная = Истина;
			Модифицированность = Истина;
			СоответствиеПеременныхЗначениеПеременнойПриИзменении(Неопределено);
		Иначе
			Элементы.СоответствиеПеременных.ТекущиеДанные.Расшифровка = "";
			Элементы.СоответствиеПеременных.ТекущиеДанные.ЭтаПредопределеннаяПеременная = Ложь;	
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗаполнитьСоответствия()
	
	//АдресЭлектроннойПочтыКонтрагента
	//АдресЭлектроннойПочтыОрганизации
	//БанковскиеРеквизитыКонтрагента
	//БанковскиеРеквизитыКонтрагента.НомерСчета
	//БанковскиеРеквизитыКонтрагента.Банк
	//БанковскиеРеквизитыКонтрагента.БИК
	//БанковскиеРеквизитыКонтрагента.КоррСчет
	//БанковскиеРеквизитыОрганизации
	//БанковскиеРеквизитыОрганизации.НомерСчета
	//БанковскиеРеквизитыОрганизации.Банк
	//БанковскиеРеквизитыОрганизации.БИК
	//БанковскиеРеквизитыОрганизации.КоррСчет
	//ГородПоПочтовомуАдресуКонтрагента
	//ГородПоПочтовомуАдресуОрганизации
	//ГородПоФактическомуАдресуКонтрагента
	//ГородПоФактическомуАдресуОрганизации
	//ГородПоЮридическомуАдресуКонтрагента
	//ГородПоЮридическомуАдресуОрганизации
	//ДатаДоговора
	//ДокументУдостоверяющийЛичностьКонтрагента
	//ДолжностьРуководителяКонтрагента
	//ДолжностьРуководителяОрганизации
	//ИНН_КППКонтрагента
	//ИНН_КППКонтрагента.ИНН
	//ИНН_КППКонтрагента.КПП
	//ИНН_КППОрганизации
	//ИНН_КППОрганизации.ИНН
	//ИНН_КППОрганизации.КПП
	//НомерДоговора
	//ОГРНКонтрагента
	//ОГРНКонтрагента.ОГРН
	//ОГРНОрганизации
	//ОГРНОрганизации.ОГРН
	//ОснованиеПолномочийРуководителяКонтрагента
	//ОснованиеПолномочийРуководителяОрганизации
	//ПолноеНаименованиеОрганизации
	//ПолноеНаименованиеКонтрагента
	//ПочтовыйАдресКонтрагента
	//ПочтовыйАдресОрганизации
	//ПредставительКонтрагента
	//ПредставительОрганизации
	//РуководительКонтрагента
	//РуководительОрганизации
	//СвидетельствоКонтрагента
	//СвидетельствоОрганизации
	//СловоИменуемоеДляКонтрагента
	//СловоИменуемоеДляОрганизации
	//СрокДействияДоговора
	//СрокОплатыПоДоговору
	//СуммаДокумента
	//СуммаДокументаПрописью
	//СуммаДокументаБезНДС
	//СуммаДокументаБезНДСПрописью
	//СуммаНДС
	//СуммаНДСПрописью
	//ТелефонКонтрагента
	//ТелефонОрганизации
	//ФаксКонтрагента
	//ФаксОрганизации
	//ФактическийАдресКонтрагента
	//ФактическийАдресОрганизации
	//ЮридическийАдресКонтрагента
	//ЮридическийАдресОрганизации
	//УсловиеОплаты
	//ДатаОплатыПоДоговору
	//СуммаДоговора
	//СуммаДоговораПрописью
	//СуммаДоговораБезНДС
	//СуммаДоговораБезНДСПрописью
	//СуммаНДСДоговора
	//СуммаНДСДоговораПрописью
	//СтавкаНДСДоговора
	//СтавкаНДСДоговораПрописью
	//СуммаСНДСДоговораПрописью
	
	Соотв = Новый Соответствие;
	
	СведенияОДоговоре = ПечатьДоговоров.СведенияОСделке(Объект.Ссылка, Неопределено);
	
	ЗначенияСоставногоПараметра = Новый Массив;
	Соотв.Вставить("АдресЭлектроннойПочтыКонтрагента", ПечатьДоговоров.ЗначениеПараметра("АдресЭлектроннойПочтыКонтрагента", 
			СведенияОДоговоре, ЗначенияСоставногоПараметра, Истина));

	ЗначенияСоставногоПараметра = Новый Массив;
	Соотв.Вставить("АдресЭлектроннойПочтыОрганизации", ПечатьДоговоров.ЗначениеПараметра("АдресЭлектроннойПочтыОрганизации", 
			СведенияОДоговоре, ЗначенияСоставногоПараметра, Истина));
			
	ЗначенияСоставногоПараметра = Новый Массив;
	Значение = ПечатьДоговоров.ЗначениеПараметра("БанковскиеРеквизитыКонтрагента", 
			СведенияОДоговоре, ЗначенияСоставногоПараметра, Истина);
	Значение = СтрЗаменить(Значение, "%1%", ЗначенияСоставногоПараметра[0]); 
	Значение = СтрЗаменить(Значение, "%2%", ЗначенияСоставногоПараметра[1]);
	Значение = СтрЗаменить(Значение, "%3%", ЗначенияСоставногоПараметра[2]);
	Значение = СтрЗаменить(Значение, "%4%", ЗначенияСоставногоПараметра[3]);
	Соотв.Вставить("БанковскиеРеквизитыКонтрагента", Значение);
	Соотв.Вставить("БанковскиеРеквизитыКонтрагентаНомерСчета", ЗначенияСоставногоПараметра[0]);
	Соотв.Вставить("БанковскиеРеквизитыКонтрагентаБанк", ЗначенияСоставногоПараметра[1]);
	Соотв.Вставить("БанковскиеРеквизитыКонтрагентаБИК", ЗначенияСоставногоПараметра[2]);
	Соотв.Вставить("БанковскиеРеквизитыКонтрагентаКоррСчет", ЗначенияСоставногоПараметра[3]);
			
	ЗначенияСоставногоПараметра = Новый Массив;
	Значение = ПечатьДоговоров.ЗначениеПараметра("БанковскиеРеквизитыОрганизации", 
			СведенияОДоговоре, ЗначенияСоставногоПараметра, Истина);
	Значение = СтрЗаменить(Значение, "%1%", ЗначенияСоставногоПараметра[0]); 
	Значение = СтрЗаменить(Значение, "%2%", ЗначенияСоставногоПараметра[1]);
	Значение = СтрЗаменить(Значение, "%3%", ЗначенияСоставногоПараметра[2]);
	Значение = СтрЗаменить(Значение, "%4%", ЗначенияСоставногоПараметра[3]);
	Соотв.Вставить("БанковскиеРеквизитыОрганизации", Значение);
	Соотв.Вставить("БанковскиеРеквизитыОрганизацииНомерСчета", ЗначенияСоставногоПараметра[0]);
	Соотв.Вставить("БанковскиеРеквизитыОрганизацииБанк", ЗначенияСоставногоПараметра[1]);
	Соотв.Вставить("БанковскиеРеквизитыОрганизацииБИК", ЗначенияСоставногоПараметра[2]);
	Соотв.Вставить("БанковскиеРеквизитыОрганизацииКоррСчет", ЗначенияСоставногоПараметра[3]);
			
	ЗначенияСоставногоПараметра = Новый Массив;
	Соотв.Вставить("ГородПоПочтовомуАдресуКонтрагента", ПечатьДоговоров.ЗначениеПараметра("ГородПоПочтовомуАдресуКонтрагента", 
			СведенияОДоговоре, ЗначенияСоставногоПараметра, Истина));
			
	ЗначенияСоставногоПараметра = Новый Массив;
	Соотв.Вставить("ГородПоПочтовомуАдресуОрганизации", ПечатьДоговоров.ЗначениеПараметра("ГородПоПочтовомуАдресуОрганизации", 
			СведенияОДоговоре, ЗначенияСоставногоПараметра, Истина));
			
	ЗначенияСоставногоПараметра = Новый Массив;
	Соотв.Вставить("ГородПоФактическомуАдресуКонтрагента", ПечатьДоговоров.ЗначениеПараметра("ГородПоФактическомуАдресуКонтрагента", 
			СведенияОДоговоре, ЗначенияСоставногоПараметра, Истина));
			
	ЗначенияСоставногоПараметра = Новый Массив;
	Соотв.Вставить("ГородПоФактическомуАдресуОрганизации", ПечатьДоговоров.ЗначениеПараметра("ГородПоФактическомуАдресуОрганизации", 
			СведенияОДоговоре, ЗначенияСоставногоПараметра, Истина));
			
	ЗначенияСоставногоПараметра = Новый Массив;
	Соотв.Вставить("ГородПоЮридическомуАдресуКонтрагента", ПечатьДоговоров.ЗначениеПараметра("ГородПоЮридическомуАдресуКонтрагента", 
			СведенияОДоговоре, ЗначенияСоставногоПараметра, Истина));
			
	ЗначенияСоставногоПараметра = Новый Массив;
	Соотв.Вставить("ГородПоЮридическомуАдресуОрганизации", ПечатьДоговоров.ЗначениеПараметра("ГородПоЮридическомуАдресуОрганизации", 
			СведенияОДоговоре, ЗначенияСоставногоПараметра, Истина));
			
	ЗначенияСоставногоПараметра = Новый Массив;
	Соотв.Вставить("ДатаДоговора", ПечатьДоговоров.ЗначениеПараметра("ДатаДоговора", 
			СведенияОДоговоре, ЗначенияСоставногоПараметра, Истина));
			
	ЗначенияСоставногоПараметра = Новый Массив;
	Соотв.Вставить("ДокументУдостоверяющийЛичностьКонтрагента", ПечатьДоговоров.ЗначениеПараметра("ДокументУдостоверяющийЛичностьКонтрагента", 
			СведенияОДоговоре, ЗначенияСоставногоПараметра, Истина));
			
	ЗначенияСоставногоПараметра = Новый Массив;
	Соотв.Вставить("ДолжностьРуководителяКонтрагента", ПечатьДоговоров.ЗначениеПараметра("ДолжностьРуководителяКонтрагента", 
			СведенияОДоговоре, ЗначенияСоставногоПараметра, Истина));
			
	ЗначенияСоставногоПараметра = Новый Массив;
	Соотв.Вставить("ДолжностьРуководителяОрганизации", ПечатьДоговоров.ЗначениеПараметра("ДолжностьРуководителяОрганизации", 
			СведенияОДоговоре, ЗначенияСоставногоПараметра, Истина));
			
	ЗначенияСоставногоПараметра = Новый Массив;
	Значение = ПечатьДоговоров.ЗначениеПараметра("ИНН_КППКонтрагента", 
			СведенияОДоговоре, ЗначенияСоставногоПараметра, Истина);
	Значение = СтрЗаменить(Значение, "%1%", ЗначенияСоставногоПараметра[0]); 
	Значение = СтрЗаменить(Значение, "%2%", ЗначенияСоставногоПараметра[1]);
	Соотв.Вставить("ИНН_КППКонтрагента", Значение);
	Соотв.Вставить("ИНН_КППКонтрагентаИНН", ЗначенияСоставногоПараметра[0]);
	Соотв.Вставить("ИНН_КППКонтрагентаКПП", ЗначенияСоставногоПараметра[1]);
			
	ЗначенияСоставногоПараметра = Новый Массив;
	Значение = ПечатьДоговоров.ЗначениеПараметра("ИНН_КППОрганизации", 
			СведенияОДоговоре, ЗначенияСоставногоПараметра, Истина);
	Значение = СтрЗаменить(Значение, "%1%", ЗначенияСоставногоПараметра[0]); 
	Значение = СтрЗаменить(Значение, "%2%", ЗначенияСоставногоПараметра[1]);
	Соотв.Вставить("ИНН_КППОрганизации", Значение);
	Соотв.Вставить("ИНН_КППОрганизацииИНН", ЗначенияСоставногоПараметра[0]);
	Соотв.Вставить("ИНН_КППОрганизацииКПП", ЗначенияСоставногоПараметра[1]);
			
	ЗначенияСоставногоПараметра = Новый Массив;
	Соотв.Вставить("НомерДоговора", ПечатьДоговоров.ЗначениеПараметра("НомерДоговора", 
			СведенияОДоговоре, ЗначенияСоставногоПараметра, Истина));

	ЗначенияСоставногоПараметра = Новый Массив;
	Значение = ПечатьДоговоров.ЗначениеПараметра("ОГРНКонтрагента", 
			СведенияОДоговоре, ЗначенияСоставногоПараметра, Истина);
	Значение = СтрЗаменить(Значение, "%1%", ЗначенияСоставногоПараметра[0]); 
	Соотв.Вставить("ОГРНКонтрагента", Значение);
	Соотв.Вставить("ОГРНКонтрагентаОГРН", ЗначенияСоставногоПараметра[0]);
			
	ЗначенияСоставногоПараметра = Новый Массив;
	Значение = ПечатьДоговоров.ЗначениеПараметра("ОГРНОрганизации", 
			СведенияОДоговоре, ЗначенияСоставногоПараметра, Истина);
	Значение = СтрЗаменить(Значение, "%1%", ЗначенияСоставногоПараметра[0]); 
	Соотв.Вставить("ОГРНОрганизации", Значение);
	Соотв.Вставить("ОГРНОрганизацииОГРН", ЗначенияСоставногоПараметра[0]);
			
	ЗначенияСоставногоПараметра = Новый Массив;
	Соотв.Вставить("ОснованиеПолномочийРуководителяКонтрагента", ПечатьДоговоров.ЗначениеПараметра("ОснованиеПолномочийРуководителяКонтрагента", 
			СведенияОДоговоре, ЗначенияСоставногоПараметра, Истина));
			
	ЗначенияСоставногоПараметра = Новый Массив;
	Соотв.Вставить("ОснованиеПолномочийРуководителяОрганизации", ПечатьДоговоров.ЗначениеПараметра("ОснованиеПолномочийРуководителяОрганизации", 
			СведенияОДоговоре, ЗначенияСоставногоПараметра, Истина));
			
	ЗначенияСоставногоПараметра = Новый Массив;
	Соотв.Вставить("ПолноеНаименованиеОрганизации", ПечатьДоговоров.ЗначениеПараметра("ПолноеНаименованиеОрганизации", 
			СведенияОДоговоре, ЗначенияСоставногоПараметра, Истина));
			
	ЗначенияСоставногоПараметра = Новый Массив;
	Соотв.Вставить("ПолноеНаименованиеКонтрагента", ПечатьДоговоров.ЗначениеПараметра("ПолноеНаименованиеКонтрагента", 
			СведенияОДоговоре, ЗначенияСоставногоПараметра, Истина));
			
	ЗначенияСоставногоПараметра = Новый Массив;
	Соотв.Вставить("ПочтовыйАдресКонтрагента", ПечатьДоговоров.ЗначениеПараметра("ПочтовыйАдресКонтрагента", 
			СведенияОДоговоре, ЗначенияСоставногоПараметра, Истина));

	ЗначенияСоставногоПараметра = Новый Массив;
	Соотв.Вставить("ПочтовыйАдресОрганизации", ПечатьДоговоров.ЗначениеПараметра("ПочтовыйАдресОрганизации", 
			СведенияОДоговоре, ЗначенияСоставногоПараметра, Истина));
			
	ЗначенияСоставногоПараметра = Новый Массив;
	Значение = ПечатьДоговоров.ЗначениеПараметра("ПредставительКонтрагента", 
	СведенияОДоговоре, ЗначенияСоставногоПараметра, Истина);
	Если Не Значение = "" Тогда
		Значение = СтрЗаменить(Значение, "%1%", ЗначенияСоставногоПараметра[0]); 
		Значение = СтрЗаменить(Значение, "%2%", ЗначенияСоставногоПараметра[1]);
		Значение = СтрЗаменить(Значение, "%3%", ЗначенияСоставногоПараметра[2]);
		Значение = СтрЗаменить(Значение, "%4%", ЗначенияСоставногоПараметра[3]);
	КонецЕсли;
	Соотв.Вставить("ПредставительКонтрагента", Значение);
			
	ЗначенияСоставногоПараметра = Новый Массив;
	Значение = ПечатьДоговоров.ЗначениеПараметра("ПредставительОрганизации", 
		СведенияОДоговоре, ЗначенияСоставногоПараметра, Истина);
	Если Не Значение = "" Тогда
		Значение = СтрЗаменить(Значение, "%1%", ЗначенияСоставногоПараметра[0]); 
		Значение = СтрЗаменить(Значение, "%2%", ЗначенияСоставногоПараметра[1]);
		Значение = СтрЗаменить(Значение, "%3%", ЗначенияСоставногоПараметра[2]);
		Значение = СтрЗаменить(Значение, "%4%", ЗначенияСоставногоПараметра[3]);
	КонецЕсли;
	Соотв.Вставить("ПредставительОрганизации", Значение);
			
	ЗначенияСоставногоПараметра = Новый Массив;
	Соотв.Вставить("РуководительКонтрагента", ПечатьДоговоров.ЗначениеПараметра("РуководительКонтрагента", 
			СведенияОДоговоре, ЗначенияСоставногоПараметра, Истина));
			
	ЗначенияСоставногоПараметра = Новый Массив;
	Соотв.Вставить("РуководительОрганизации", ПечатьДоговоров.ЗначениеПараметра("РуководительОрганизации", 
			СведенияОДоговоре, ЗначенияСоставногоПараметра, Истина));
			
	ЗначенияСоставногоПараметра = Новый Массив;
	Соотв.Вставить("СловоИменуемоеДляКонтрагента", ПечатьДоговоров.ЗначениеПараметра("СловоИменуемоеДляКонтрагента", 
			СведенияОДоговоре, ЗначенияСоставногоПараметра, Истина));
			
	ЗначенияСоставногоПараметра = Новый Массив;
	Соотв.Вставить("СловоИменуемоеДляОрганизации", ПечатьДоговоров.ЗначениеПараметра("СловоИменуемоеДляОрганизации", 
			СведенияОДоговоре, ЗначенияСоставногоПараметра, Истина));
			
	ЗначенияСоставногоПараметра = Новый Массив;
	Соотв.Вставить("СрокДействияДоговора", ПечатьДоговоров.ЗначениеПараметра("СрокДействияДоговора", 
			СведенияОДоговоре, ЗначенияСоставногоПараметра, Истина));
			
	ЗначенияСоставногоПараметра = Новый Массив;
	Соотв.Вставить("СрокОплатыПоДоговору", ПечатьДоговоров.ЗначениеПараметра("СрокОплатыПоДоговору", 
			СведенияОДоговоре, ЗначенияСоставногоПараметра, Истина));

	ЗначенияСоставногоПараметра = Новый Массив;
	Соотв.Вставить("ТелефонКонтрагента", ПечатьДоговоров.ЗначениеПараметра("ТелефонКонтрагента", 
			СведенияОДоговоре, ЗначенияСоставногоПараметра, Истина));
			
	ЗначенияСоставногоПараметра = Новый Массив;
	Соотв.Вставить("ТелефонОрганизации", ПечатьДоговоров.ЗначениеПараметра("ТелефонОрганизации", 
			СведенияОДоговоре, ЗначенияСоставногоПараметра, Истина));
			
	ЗначенияСоставногоПараметра = Новый Массив;
	Соотв.Вставить("ФактическийАдресКонтрагента", ПечатьДоговоров.ЗначениеПараметра("ФактическийАдресКонтрагента", 
			СведенияОДоговоре, ЗначенияСоставногоПараметра, Истина));
			
	ЗначенияСоставногоПараметра = Новый Массив;
	Соотв.Вставить("ФактическийАдресОрганизации", ПечатьДоговоров.ЗначениеПараметра("ФактическийАдресОрганизации", 
			СведенияОДоговоре, ЗначенияСоставногоПараметра, Истина));
			
	ЗначенияСоставногоПараметра = Новый Массив;
	Соотв.Вставить("ЮридическийАдресКонтрагента", ПечатьДоговоров.ЗначениеПараметра("ЮридическийАдресКонтрагента", 
			СведенияОДоговоре, ЗначенияСоставногоПараметра, Истина));
			
	ЗначенияСоставногоПараметра = Новый Массив;
	Соотв.Вставить("ЮридическийАдресОрганизации", ПечатьДоговоров.ЗначениеПараметра("ЮридическийАдресОрганизации", 
			СведенияОДоговоре, ЗначенияСоставногоПараметра, Истина));
			
	ЗначенияСоставногоПараметра = Новый Массив;
	Соотв.Вставить("СуммаДоговора", ПечатьДоговоров.ЗначениеПараметра("СуммаДоговора", 
			СведенияОДоговоре, ЗначенияСоставногоПараметра, Истина));
			
	ЗначенияСоставногоПараметра = Новый Массив;
	Соотв.Вставить("СуммаДоговораПрописью", ПечатьДоговоров.ЗначениеПараметра("СуммаДоговораПрописью", 
			СведенияОДоговоре, ЗначенияСоставногоПараметра, Истина));
			
	Возврат Соотв;
КонецФункции

&НаКлиенте
Процедура ОчиститьФормат(Команда)
	ИндексСтроки = Объект.СодержаниеДоговора.Индекс(Объект.СодержаниеДоговора.НайтиПоИдентификатору(Элементы.СодержаниеДоговора.ТекущаяСтрока));
	ФорматируемыйДок = Новый ФорматированныйДокумент;
	ФорматируемыйДок.Вставить(ФорматируемыйДок.ПолучитьЗакладкуНачала(), Элементы.СодержаниеДоговора.ТекущиеДанные.Текст);
	СписокФорматируемыхДоков[ИндексСтроки].Значение = ФорматируемыйДок;
КонецПроцедуры

&НаКлиенте
Процедура СодержаниеДоговораНомерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//СтандартнаяОбработка = Ложь;
	//СписокВыбора = Новый СписокЗначений;
	//СписокВыбора.Добавить("Сторона1");
	//СписокВыбора.Добавить("Сторона2");
	//СписокВыбора.Добавить("ПодвалСторона1");
	//СписокВыбора.Добавить("ПодвалСторона2");
	//ТекЗнач = ВыбратьИзСписка(СписокВыбора);
	//Если НЕ ТекЗнач = Неопределено Тогда
	//	Элементы.СодержаниеДоговора.ТекущиеДанные.Номер = ТекЗнач.Значение;
	//	Модифицированность = Истина;
	//КонецЕсли;
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Пересчитать", Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВWord(Команда)
	//Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	//Диалог.Фильтр = "Формат MS Word (*.doc;*.doc)|*.docx;*.docx|";
	//Если Диалог.Выбрать() Тогда
	//	ПутьКФайлу = Диалог.ПолноеИмяФайла;
	//Иначе
	//	Возврат;
	//КонецЕсли;
	//Если Элементы.ТекстДоговораФД.Видимость Тогда
	//	ПутьКФайлу = КаталогВременныхФайлов() + Объект.Наименование + " (" + Строка(Объект.Организация) + " - " + Строка(Объект.Владелец) + ")";
	//	Элементы.ТекстДоговораФД.Документ.ExecCommand("SaveAs", Истина,ПутьКФайлу);
	//Иначе
		Попытка
			
			ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаИДвоичныеДанные(Объект.ФайлШаблонаДоговора);
			ВремФайлИмя = ПолучитьимяВременногоФайла();
			ДанныеФайла.ДвоичныеДанные.Записать(ВремФайлИмя);

			Wk = Новый COMОбъект("Word.Application");
			Wk.Documents.Add(ВремФайлИмя);
			//ШаблонВорд = Wk.ActiveDocument;
			//Wk.Documents.Open(ВремФайлИмя); 
			Документ = Wk.ActiveDocument(); 
			Для каждого ТекПеременная Из Объект.СоответствиеПеременных Цикл
				Документ.Content.Find.Execute(ТекПеременная.ИмяПеременной,,,,,,,,,?(ТекПеременная.ЭтаПредопределеннаяПеременная, ТекПеременная.Расшифровка, ТекПеременная.ЗначениеПеременной),2)
			КонецЦикла;
			
			//Wk.SaveAs(Объект.Наименование + " (" + Строка(Объект.Организация) + " - " + Строка(Объект.Владелец) + ")");
			Wk.Application.Visible = Истина;
			Wk.Activate();
			
			//Документ.SaveAs(Объект.Наименование + " (" + Строка(Объект.Организация) + " - " + Строка(Объект.Владелец) + ")", 0);
			//Документ.Close();
			//Wk.DisplayAlerts = Ложь;
			//Wk.Quit();
			
			//Wk.Quit();
		Исключение
			
		КонецПопытки;
	
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотр(Команда)
	ТекФорма = ПолучитьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаПредварительногоПросмотра");
	СформироватьHTMLПоТабличнойЧасти(ТекФорма.ТекстДоговора);
	ТекФорма.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзWord(Команда)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр = "Формат MS Word (*.doc;*.docx)|*.doc;*.docx|";
	Если Диалог.Выбрать() Тогда
		ПутьКФайлу = Диалог.ПолноеИмяФайла;
	Иначе
		Возврат;
	КонецЕсли;
	Wk = Новый COMОбъект("Word.Application"); 
	Wk.Documents.Open(ПутьКФайлу); 
	Документ = Wk.ActiveDocument(); 
	Для н = 1 по Документ.Paragraphs.Count Цикл
		Текст=СокрЛП(Строка(Документ.Paragraphs(н).Range.Text));
		
		//удаляем спецсимволы
		Для ТекИндекс = 1 По СтрДлина(Текст) Цикл
			Если КодСимвола(Сред(Текст, ТекИндекс, 1)) < 10 Тогда			
				Текст = СтрЗаменить(Текст, Символ(КодСимвола(Сред(Текст, ТекИндекс, 1))), "");	
			КонецЕсли;		
		КонецЦикла; 
		
		
		Если ЗначениеЗаполнено(Текст) Тогда //если что-то есть
			Если СтрДлина(Текст) < 8 Тогда //подозрение что это нумерация
				ТекПункт = КодСимвола(Текст);
			Иначе
				НоваяСтрока = Объект.СодержаниеДоговора.Добавить();
				Если ЗначениеЗаполнено(ТекПункт) Тогда
					НоваяСтрока.Номер = ТекПункт;
					ТекПункт = "";
				КонецЕсли;
				НоваяСтрока.Текст = Текст;
				НоваяСтрока.ТипРаздела = ?(СтрДлина(Текст) < 60, "Раздел", "Пункт");
				Для ТекСимв = 1 По Мин(СтрДлина(Текст), 10)  Цикл
					Если Сред(Текст, ТекСимв, 1) = "." Тогда //нашли первую точку в 10 символах, значит это номер раздела
						Для ТекСимв2 = ТекСимв + 1 По Мин(СтрДлина(Текст), 10) Цикл
							Если Сред(Текст, ТекСимв2, 1)= " " Тогда
								НоваяСтрока.Номер = Сред(Текст, 1, ТекСимв2 - 1);
								НоваяСтрока.Текст = Сред(Текст, ТекСимв2, СтрДлина(Текст));
							КонецЕсли;							
						КонецЦикла;  
					КонецЕсли;
				КонецЦикла; 
			КонецЕсли;
		КонецЕсли;
		//Сообщить(Текст);
	КонецЦикла;
	//Документ.DisplayAlerts = Ложь;
	Документ.Close();
	Wk.DisplayAlerts = Ложь;
	Wk.Quit();
	ЗаполнитьСписокФорматируемыхДоковНовых();
КонецПроцедуры

&НаКлиенте
Процедура ОбъединитьСтроки(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьАвтоНаименование()
	Наименование = "Договор " + ?(Объект.Номер = "", "б/н", "№" + Строка(Объект.Номер)) + " от " + Формат(Объект.Дата, "ДФ=dd.MM.yy") + ?(Объект.Отсрочка, " (отсрочка " + Строка(Объект.Отсрочка) + " дн.)", ""); 
	Если Элементы.Наименование.СписокВыбора.Количество() Тогда
		Элементы.Наименование.СписокВыбора[0].Значение = Наименование;
	Иначе
		Элементы.Наименование.СписокВыбора.Добавить(Наименование);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КодПриИзменении(Элемент)
	ОбновитьАвтоНаименование()
КонецПроцедуры

&НаКлиенте
Процедура ДатаДоговораПриИзменении(Элемент)
	ОбновитьАвтоНаименование();
КонецПроцедуры

&НаКлиенте
Процедура ОтсрочкаПриИзменении(Элемент)
	
	// либо острочка либо предоплата. Нужно для корректной работы отчета о пдз {
	Если ЗначениеЗаполнено(Объект.Отсрочка) Тогда
		Объект.Предоплата = 0;
	КонецЕсли;
	//}

	ОбновитьАвтоНаименование();
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаПриИзменении(Элемент)
	
	// либо острочка либо предоплата. Нужно для корректной работы отчета о пдз {
	Если ЗначениеЗаполнено(Объект.Предоплата) Тогда
		Объект.Отсрочка = 0;
		Объект.ВидОтсрочки = "";
		Объект.ОтсрочкаДоКонцаМесяца = Ложь;
	КонецЕсли;
	//}
	
	ОбновитьАвтоНаименование();
КонецПроцедуры

&НаКлиенте
Процедура НомерПриИзменении(Элемент)
	
	ОбновитьАвтоНаименование();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетВзаиморасчетовПриИзменении(Элемент)
	
	Элементы.ВнутрихолдинговыйДоговор.Видимость = (Объект.СчетВзаиморасчетов = ПредопределенноеЗначение("ПланСчетов.Учетный.ВНХТоварные"));
	
КонецПроцедуры

&НаКлиенте
Процедура СодержаниеДоговораПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ЗаполнитьСписокФорматируемыхДоковНовых();
	СформироватьHTMLПоТабличнойЧасти(Объект.ТекстДоговора);
	СформироватьПеременные();
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуШаблонаДоговораНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр = "Формат MS Word (*.doc;*.docx)|*.doc;*.docx|";
	Если Диалог.Выбрать() Тогда
		ВыбратьИЗагрузитьШаблонДоговора = Диалог.ПолноеИмяФайла;
		Объект.СоответствиеПеременных.Очистить();
	Иначе
		Возврат;
	КонецЕсли;
	Wk = Новый COMОбъект("Word.Application"); 
	Wk.Documents.Open(ВыбратьИЗагрузитьШаблонДоговора); 
	Документ = Wk.ActiveDocument(); 
	Для н = 1 по Документ.Paragraphs.Count Цикл
		Текст=СокрЛП(Строка(Документ.Paragraphs(н).Range.Text));
		
		//удаляем спецсимволы
		Для ТекИндекс = 1 По СтрДлина(Текст) Цикл
			Если КодСимвола(Сред(Текст, ТекИндекс, 1)) < 10 Тогда			
				Текст = СтрЗаменить(Текст, Символ(КодСимвола(Сред(Текст, ТекИндекс, 1))), "");	
			КонецЕсли;		
		КонецЦикла; 
		
		Если ЗначениеЗаполнено(Текст) Тогда //если что-то есть
			МассивИменПеременных = ПолучитьИменаПеременныхИзТекстаНаКлиенте(Текст);
			Для каждого ИмяПеременной Из МассивИменПеременных Цикл
				Если НЕ Объект.СоответствиеПеременных.НайтиСтроки(Новый Структура("ИмяПеременной", ИмяПеременной)).Количество()  Тогда
					НоваяСтрокаПеременная = Объект.СоответствиеПеременных.Добавить();	
					НоваяСтрокаПеременная.ИмяПеременной = ИмяПеременной;
				КонецЕсли;
			КонецЦикла; 		
		КонецЕсли;
		//Сообщить(Текст);
	КонецЦикла;
	//Документ.DisplayAlerts = Ложь;
	Документ.Close();
	Wk.DisplayAlerts = Ложь;
	Wk.Quit();
	


КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьЗначения(Команда)
	Попытка
		Wk = Новый COMОбъект("Word.Application"); 
		Wk.Documents.Open(ВыбратьИЗагрузитьШаблонДоговора); 
		Документ = Wk.ActiveDocument(); 
		Для каждого ТекПеременная Из Объект.СоответствиеПеременных Цикл
			Документ.Content.Find.Execute(ТекПеременная.ИмяПеременной,,,,,,,,,ТекПеременная.ЗначениеПеременной,2)
		КонецЦикла;
		Документ.Save();
		Документ.Close();
		Wk.DisplayAlerts = Ложь;
		Wk.Quit();
		Сообщить("Замена переменных выполнена!");
	Исключение
		
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура УсловияКонтрагентаПроцентОтСуммыПриИзменении(Элемент)
	Элементы.УсловияКонтрагента.ТекущиеДанные.Сумма = Объект.УсловияКонтрагента.Итог("Сумма") * (Элементы.УсловияКонтрагента.ТекущиеДанные.ДоляСуммы / 100);	
КонецПроцедуры

&НаКлиенте
Процедура УсловияКонтрагентаСуммаПриИзменении(Элемент)
	Для каждого ТекСтрока Из Объект.УсловияКонтрагента Цикл
		ТекСтрока.ДоляСуммы = ?(Объект.УсловияКонтрагента.Итог("Сумма"), ТекСтрока.Сумма / Объект.УсловияКонтрагента.Итог("Сумма") * 100, 0);
	КонецЦикла; 
	Если НЕ Объект.УсловияКонтрагента.Итог("ДоляСуммы") = 100 Тогда
		ТекСтрока.ДоляСуммы = ТекСтрока.ДоляСуммы + (100 - Объект.УсловияКонтрагента.Итог("ДоляСуммы"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ШаблонДоговораПриИзменении(Элемент)
	ШаблонДоговораПриИзмененииНаСервере(Не Элемент = Неопределено);
	Если Не Элемент = Неопределено Тогда
		ЗаполнитьСписокФорматируемыхДоковНовых();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ШаблонДоговораПриИзмененииНаСервере(Изменять, ОбновлитьПеременных = Истина)
	
	//ШаблонПоФайлу = Объект.ШаблонДоговора.ВидШаблона = "Шаблон по файлу";
	//Элементы.ТекстДоговораФД.Видимость = Не ШаблонПоФайлу;
	//Элементы.СоответствиеПеременных.Видимость = Истина;
	//Элементы.РедактироватьШаблон.Видимость = Не ШаблонПоФайлу;
	//Элементы.СодержаниеДоговора.Видимость = Объект.РедактироватьШаблон И Не ШаблонПоФайлу;
	//Если Изменять Тогда
	//	Объект.СодержаниеДоговора.Загрузить(Объект.ШаблонДоговора.СодержаниеДоговора.Выгрузить());
	//	Если ОбновлитьПеременных Тогда
	//		Объект.СоответствиеПеременных.Загрузить(Объект.ШаблонДоговора.СоответствиеПеременных.Выгрузить());
	//		СоответствияРеквизитов = ЗаполнитьСоответствия();
	//		Для каждого ТекСтрока Из Объект.СоответствиеПеременных Цикл
	//			ТекСтрока.Расшифровка = СоответствияРеквизитов.Получить(ТекСтрока.ЗначениеПеременной);
	//		КонецЦикла;
	//	КонецЕсли;
	//	СформироватьHTMLПоТабличнойЧасти(Объект.ТекстДоговора);
	//КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура СоответствиеПеременныхПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	СформироватьHTMLПоТабличнойЧасти(Объект.ТекстДоговора);
КонецПроцедуры


&НаКлиенте
Процедура РедактироватьШаблонПриИзменении(Элемент)
	Элементы.СодержаниеДоговора.Видимость = Объект.РедактироватьШаблон;
	Если НЕ Объект.РедактироватьШаблон Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("РедактироватьШаблонПриИзмененииЗавершение", ЭтотОбъект), "Текст будет обновлен из шаблона. Продолжить?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьШаблонПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да  Тогда
		ШаблонДоговораПриИзмененииНаСервере(Истина, Ложь);
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура СодержаниеДоговораПослеУдаления(Элемент)
	ЗаполнитьСписокФорматируемыхДоковНовых();
	СформироватьHTMLПоТабличнойЧасти(Объект.ТекстДоговора);
КонецПроцедуры

