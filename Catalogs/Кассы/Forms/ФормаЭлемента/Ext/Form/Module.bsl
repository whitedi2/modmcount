&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	//КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, Новый Структура("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты") );
	//КонецЕсли;
	сабПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	
	//обновить дату
	ОбновитьДатуПринадлежности();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	//КонецЕсли;
	
	//++саб
	сабПриОткрытии(Отказ);
	//--саб
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	Если МодульУправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
	//		ОбновитьЭлементыДополнительныхРеквизитов();
	//		МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	//КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	МодульУправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
	//КонецЕсли;
	
КонецПроцедуры


// СтандартныеПодсистемы.КонтактнаяИнформация

// Поддержка дополнительных реквизитов.

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	//КонецЕсли;
	
КонецПроцедуры




// Конец СтандартныеПодсистемы.КонтактнаяИнформация

&НаСервере
Процедура сабПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Ответственный) И ПравоДоступа("Редактирование", Метаданные.Справочники.Кассы) Тогда
		Объект.Ответственный  = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДатуПринадлежности()

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Д_ИсточникППСрезПоследних.Период КАК Период
		|ИЗ
		|	РегистрСведений.Д_ИсточникПП.СрезПоследних(, БанковскиеСчета = &БанковскийСчет) КАК Д_ИсточникППСрезПоследних";
		
		Запрос.УстановитьПараметр("БанковскийСчет", Объект.Ссылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ДатаЗаписи = Выборка.Период;
			ПоследняяДатаЗаписиРегистра = Выборка.Период;
		КонецЦикла;
	Иначе
		ДатаЗаписи = ТекущаяДата();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьПредприятие(Дата1)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Источники.Ссылка КАК Ссылка,
	               |	Д_ИсточникППСрезПоследних.Предприятие КАК Предприятие,
	               |	Д_ИсточникППСрезПоследних.ОтветственноеЛицо КАК Ответственный,
	               |	Д_ИсточникППСрезПоследних.Подразделение КАК Подразделение
	               |ИЗ
	               |	Справочник.Кассы КАК Источники
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Д_ИсточникПП.СрезПоследних(&Дата1, ) КАК Д_ИсточникППСрезПоследних
	               |		ПО Источники.Ссылка = Д_ИсточникППСрезПоследних.БанковскиеСчета
	               |ГДЕ
	               |	Источники.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Дата1", Дата1);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("Предприятие, Ответственный, Подразделение", Выборка.Предприятие, Выборка.Ответственный, Выборка.Подразделение);
	Иначе
		Возврат Новый Структура("Предприятие, Ответственный, Подразделение", "", "", "");
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура сабПриОткрытии(Отказ)
	//ДатаЗаписи = ТекущаяДата();
	МассивПП = БюджетныйНаСервере.ПолучитьПредприятия();
	Если МассивПП.Количество() = 1 Тогда
		Если ПустаяСтрока(Предприятие) Тогда
			Предприятие = МассивПП[0];
		КонецЕсли;	
		Элементы.Предприятие.Доступность = 0;
		Элементы.Предприятие.Видимость = 0;
	Иначе
		Если НЕ ПустаяСтрока(Предприятие) Тогда
			Элементы.Предприятие.Доступность = 0;		
		КонецЕсли;
	КонецЕсли;
	ИсточникЗакрытПриИзменении(Неопределено);
	ДатаЗаписиПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ДатаЗаписиПриИзменении(Элемент)
	ТекЗначенияРегистра = ПолучитьПредприятие(ДатаЗаписи);
	Предприятие = ТекЗначенияРегистра.Предприятие;
	Ответственный = ТекЗначенияРегистра.Ответственный;
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗаписьВРегистр()
	//получение тек значения	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Д_ИсточникППСрезПоследних.Предприятие КАК Предприятие,
	               |	Д_ИсточникППСрезПоследних.ОтветственноеЛицо КАК ОтветственноеЛицо,
	               |	Д_ИсточникППСрезПоследних.Подразделение КАК Подразделение,
	               |	Д_ИсточникППСрезПоследних.Период КАК Период
	               |ИЗ
	               |	РегистрСведений.Д_ИсточникПП.СрезПоследних(, БанковскиеСчета = &БанковскийСчет) КАК Д_ИсточникППСрезПоследних";
	
	Запрос.УстановитьПараметр("БанковскийСчет", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ТекПредприятие = Неопределено;
	ТекОтв = Неопределено;
	ТекПодр = Неопределено;
	ТекДата = Неопределено;
	Пока Выборка.Следующий() Цикл
		ТекПредприятие = Выборка.Предприятие;
		ТекОтв = Выборка.ОтветственноеЛицо;
		ТекПодр = Выборка.Подразделение;
		ТекДата = Выборка.Период;
	КонецЦикла;
	
	//запись в регистр
	Если НЕ ТекПредприятие = Объект.Предприятие ИЛИ НЕ ТекОтв = Объект.Ответственный ИЛИ НЕ ТекПодр = Объект.Подразделение ИЛИ ДатаЗаписи < ТекДата Тогда
		НаборЗаписей = РегистрыСведений.Д_ИсточникПП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.БанковскиеСчета.Установить(Объект.Ссылка);
		НаборЗаписей.Отбор.Период.Установить(ДатаЗаписи);
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.БанковскиеСчета = Объект.Ссылка;
		НоваяЗапись.Предприятие = Объект.Предприятие;
		НоваяЗапись.Подразделение = Объект.Подразделение;
		НоваяЗапись.ОтветственноеЛицо = Объект.Ответственный;
		НоваяЗапись.Период = ДатаЗаписи;
		НоваяЗапись.ДатаПоследнегоДокумента = Документы.УЧ_ДвижениеДС.ПоследнийДокументПоИсточнику(Объект.Ссылка).Дата;
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ТекЗначенияРегистра = ПолучитьПредприятие(ДатаЗаписи);
	Если НЕ Объект.Предприятие = ТекЗначенияРегистра.Предприятие ИЛИ НЕ Объект.Ответственный = ТекЗначенияРегистра.Ответственный Тогда
		ДобавитьЗаписьВРегистр();
	КонецЕсли;;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	//Если Объект.Ссылка.Пустая() Тогда
	//	Если НЕ ЗначениеЗаполнено(Предприятие) Тогда 
	//		Предприятие = БюджетныйНаСервере.ПолучитьПредприятие();
	//	КонецЕсли;
	//	Если ПустаяСтрока(ПолучитьПредприятие(ТекущаяДата()).Предприятие) И Предприятие.Пустая() Тогда
	//		Отказ = Истина;
	//		Сообщить("Укажите предприятие.");
	//	КонецЕсли;		
	//КонецЕсли;
	
	Если Объект.Предопределенный Тогда
		Отказ = Истина;
		Сообщить("Источник является предопределенным. Изменение невозможно.");	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ответственный) Тогда
		сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(
		Объект,
		"Не указан ответственный.",
		,
		,
		"Объект.Ответственный",
		Отказ);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВидИсточникаПриИзменении(Элемент)
	//ВидимостьБрокера = (Объект.ВидИсточника = ЛицевойСчет());
	//Элементы.Группа2.Видимость = ВидимостьБрокера;
	ВидИсточникаПриИзмененииСервер();
КонецПроцедуры

&НаСервере
Процедура ВидИсточникаПриИзмененииСервер()

	Если Объект.ВидИсточника = Перечисления.ГД_ВидыИсточников.Касса Или Объект.ВидИсточника = Перечисления.ГД_ВидыИсточников.КассаУчет  Тогда
		Объект.СчетУчета = ПланыСчетов.Учетный.Счет5001();
	ИначеЕсли Объект.ВидИсточника = Перечисления.ГД_ВидыИсточников.ВалютнаяКасса Или Объект.ВидИсточника = Перечисления.ГД_ВидыИсточников.ВалютнаяКассаУчет Тогда
		Объект.СчетУчета = ПланыСчетов.Учетный.Счет5002();
	КонецЕсли;
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ЛицевойСчет()
	Возврат Перечисления.ГД_ВидыИсточников.ЛицевойСчетРКП;	
КонецФункции // ()

&НаКлиенте
Процедура ИсточникЗакрытПриИзменении(Элемент)
			
	Если Элемент <> Неопределено И ПроверитьОстаткиНаИсточнике(Объект.Ссылка) Тогда
		Сообщить("По закрываемому источнику еще имеются остатки");
	КонецЕсли;
	
	Элементы.ДатаЗакрытия.Видимость = Объект.ИсточникЗакрыт;
	
КонецПроцедуры

//Возвращаемое значение: Истина = остатки есть
&НаСервереБезКонтекста
Функция ПроверитьОстаткиНаИсточнике(Источник)
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УчетныйОстатки.Субконто2,
	               |	УчетныйОстатки.СуммаОстаток
	               |ИЗ
	               |	РегистрБухгалтерии.Учетный.Остатки(
	               |			,
	               |			Счет В ИЕРАРХИИ (&Счет50),
	               |			,
	               |			Субконто2 = &Источник) КАК УчетныйОстатки";
	Запрос.УстановитьПараметр("Источник", Источник);
	Запрос.УстановитьПараметр("Счет50", ПланыСчетов.Учетный.Счет50());
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

&НаКлиенте
Процедура ОтветственныйАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СформироватьДанныеВыбораПользователя(Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущийПользователь = Объект.Ответственный;
	ВыбратьПользователей(ТекущийПользователь, Элемент);
КонецПроцедуры

#Область УниверсальныйВыборПользователя

&НаКлиенте
Процедура ВыбратьПользователей(ТекущийПользователь, Элемент)
		
	//Если ЗначениеЗаполнено(ТекущийПользователь)
	//   И (    ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.Пользователи")
	//      ИЛИ ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.ГруппыПользователей") ) Тогда
	//	
	//	ВыборИПодборВнешнихПользователей = Ложь;
		
	//ИначеЕсли ИспользоватьВнешнихПользователей
	//        И ЗначениеЗаполнено(ТекущийПользователь)
	//        И (    ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.ВнешниеПользователи")
	//           ИЛИ ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") ) Тогда
	//
	//	ВыборИПодборВнешнихПользователей = Истина;
	//Иначе
	//	ПоказатьВыборТипаПользователиИлиВнешниеПользователи(
	//		Новый ОписаниеОповещения("ВыбратьПользователейЗавершение", ЭтотОбъект));
	//	Возврат;
	//КонецЕсли;
	
	ВыбратьПользователейЗавершение(Ложь, Элемент, ТекущийПользователь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВыборТипаПользователиИлиВнешниеПользователи(ОбработкаПродолжения)
	
	ВыборИПодборВнешнихПользователей = Ложь;
	
	//Если ИспользоватьВнешнихПользователей Тогда
	//	
	//	СписокТиповПользователей.ПоказатьВыборЭлемента(
	//		Новый ОписаниеОповещения(
	//			"ПоказатьВыборТипаПользователиИлиВнешниеПользователиЗавершение",
	//			ЭтотОбъект,
	//			ОбработкаПродолжения),
	//		НСтр("ru = 'Выбор типа данных'"),
	//		СписокТиповПользователей[0]);
	//Иначе
		ВыполнитьОбработкуОповещения(ОбработкаПродолжения, ВыборИПодборВнешнихПользователей);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПользователейЗавершение(ВыборИПодборВнешнихПользователей, Элемент, ТекущийПользователь = Неопределено) Экспорт
	
	Если ВыборИПодборВнешнихПользователей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.Ответственный);
	
	Если ВыборИПодборВнешнихПользователей Тогда
		ПараметрыФормы.Вставить("ВыборГруппВнешнихПользователей", Истина);
	Иначе
		ПараметрыФормы.Вставить("ВыборГруппПользователей", Истина);
	КонецЕсли;
	
	Если ВыборИПодборВнешнихПользователей Тогда
		
		ОткрытьФорму(
			"Справочник.ВнешниеПользователи.ФормаВыбора",
			ПараметрыФормы,
			Элемент);
	Иначе
		ОткрытьФорму(
			"Справочник.Пользователи.ФормаВыбора",
			ПараметрыФормы,
			Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьДанныеВыбораПользователя(Текст)
	
	Возврат Пользователи.СформироватьДанныеВыбораПользователя(Текст);
	
КонецФункции

#КонецОбласти 
