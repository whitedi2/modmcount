
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаголовокПоказателей = "Финансовые показатели";
	ЗаголовокДинамика = "Динамика";
	ЗаголовокНорматив = "Норматив";
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыФормы()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	сабФинансовыеПоказатели.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.сабФинансовыеПоказатели КАК сабФинансовыеПоказатели
	               |ГДЕ
	               |	сабФинансовыеПоказатели.ЭтоГруппа = ИСТИНА
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	сабФинансовыеПоказатели.Порядок
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СоздатьЭлементГруппу(Элементы.Группа7, Строка(Выборка.Ссылка));	
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	сабФинансовыеПоказатели.Ссылка КАК Ссылка,
	               |	сабФинансовыеПоказатели.Родитель КАК Родитель
	               |ИЗ
	               |	Справочник.сабФинансовыеПоказатели КАК сабФинансовыеПоказатели
	               |ГДЕ
	               |	сабФинансовыеПоказатели.ЭтоГруппа = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	сабФинансовыеПоказатели.Порядок
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СоздатьЭлементыГруппы(Строка(Выборка.Родитель), Строка(Выборка.Ссылка));
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементГруппу(Родитель, ИмяГруппы)
	
	ЗагодовокГруппы = ИмяГруппы;
	ИмяГруппы = СтрЗаменить(ИмяГруппы, " ", "");
	
	НоваяКнопка0 = Элементы.Найти("ГруппаФормы" + ИмяГруппы);
	Если НоваяКнопка0 = Неопределено Тогда
		НоваяКнопка0 = Элементы.Добавить("ГруппаФормы" + ИмяГруппы, Тип("ГруппаФормы"), Родитель);
	КонецЕсли;
	НоваяКнопка0.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяКнопка0.Заголовок = ЗагодовокГруппы;
	НоваяКнопка0.ОтображатьЗаголовок = Истина;
	НоваяКнопка0.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	НоваяКнопка0.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяКнопка0.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
	НоваяКнопка0.ОтображениеУправления = ОтображениеУправленияОбычнойГруппы.Картинка;
	
	НоваяКнопка = Элементы.Найти("ГруппаФормы1" + ИмяГруппы);
	Если НоваяКнопка = Неопределено Тогда
		НоваяКнопка = Элементы.Добавить("ГруппаФормы1" + ИмяГруппы, Тип("ГруппаФормы"), НоваяКнопка0);
	КонецЕсли;
	НоваяКнопка.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	//НоваяКнопка.Заголовок = ЗагодовокГруппы;
	НоваяКнопка.ОтображатьЗаголовок = Ложь;
	НоваяКнопка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НоваяКнопка.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяКнопка.Ширина = 30;
	
	НоваяКнопка = Элементы.Найти("ГруппаФормы2" + ИмяГруппы);
	Если НоваяКнопка = Неопределено Тогда
		НоваяКнопка = Элементы.Добавить("ГруппаФормы2" + ИмяГруппы, Тип("ГруппаФормы"), НоваяКнопка0);
	КонецЕсли;
	НоваяКнопка.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	//НоваяКнопка.Заголовок = ИмяГруппы;
	НоваяКнопка.ОтображатьЗаголовок = Ложь;
	НоваяКнопка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НоваяКнопка.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяКнопка.Ширина = 20;
	
	НоваяКнопка = Элементы.Найти("ГруппаФормы3" + ИмяГруппы);
	Если НоваяКнопка = Неопределено Тогда
		НоваяКнопка = Элементы.Добавить("ГруппаФормы3" + ИмяГруппы, Тип("ГруппаФормы"), НоваяКнопка0);
	КонецЕсли;
	НоваяКнопка.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	//НоваяКнопка.Заголовок = ИмяГруппы;
	НоваяКнопка.ОтображатьЗаголовок = Ложь;
	НоваяКнопка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НоваяКнопка.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяКнопка.Ширина = 20;
	
	НоваяКнопка = Элементы.Найти("ГруппаФормы4" + ИмяГруппы);
	Если НоваяКнопка = Неопределено Тогда
		НоваяКнопка = Элементы.Добавить("ГруппаФормы4" + ИмяГруппы, Тип("ГруппаФормы"), НоваяКнопка0);
	КонецЕсли;
	НоваяКнопка.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	//НоваяКнопка.Заголовок = ИмяГруппы;
	НоваяКнопка.ОтображатьЗаголовок = Ложь;
	НоваяКнопка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НоваяКнопка.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяКнопка.Ширина = 10;
	
	НоваяКнопка = Элементы.Найти("ГруппаФормы5" + ИмяГруппы);
	Если НоваяКнопка = Неопределено Тогда
		НоваяКнопка = Элементы.Добавить("ГруппаФормы5" + ИмяГруппы, Тип("ГруппаФормы"), НоваяКнопка0);
	КонецЕсли;
	НоваяКнопка.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	//НоваяКнопка.Заголовок = ИмяГруппы;
	НоваяКнопка.ОтображатьЗаголовок = Ложь;
	НоваяКнопка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НоваяКнопка.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяКнопка.Ширина = 10;

	
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыГруппы(ИмяГруппы, ИмяЭлемента)
	
	ЗагодовокЭлемента = ИмяЭлемента;
	ИмяГруппы = СтрЗаменить(ИмяГруппы, " ", "");
	ИмяГруппы = СтрЗаменить(ИмяГруппы, ".", "");
	ИмяГруппы = СтрЗаменить(ИмяГруппы, ",", "");
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, " ", "");
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, ".", "");
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, ",", "");
	
	ДобавляемыеРеквизиты = Новый Массив; 
	Реквизит = Новый РеквизитФормы("Реквизит1" + ИмяЭлемента, Новый ОписаниеТипов("Строка")); 
	ДобавляемыеРеквизиты.Добавить(Реквизит); 
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	НоваяКнопка = Элементы.Найти("ПолеФормы1" + ИмяЭлемента);
	Родитель = Элементы.Найти("ГруппаФормы1" + ИмяГруппы);
	Если НоваяКнопка = Неопределено Тогда
		НоваяКнопка = Элементы.Добавить("ПолеФормы1" + ИмяЭлемента, Тип("ПолеФормы"),Родитель);
		НоваяКнопка.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		//НоваяКнопка.Заголовок = ЗагодовокЭлемента;
		НоваяКнопка.ПутьКДанным  = "Реквизит1" + ИмяЭлемента;
		ЭтотОбъект["Реквизит1" + ИмяЭлемента] = ЗагодовокЭлемента;
	КонецЕсли;
	
	ДобавляемыеРеквизиты = Новый Массив; 
	Реквизит = Новый РеквизитФормы("Реквизит2" + ИмяЭлемента, Новый ОписаниеТипов("Строка")); 
	ДобавляемыеРеквизиты.Добавить(Реквизит); 
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	НоваяКнопка = Элементы.Найти("ПолеФормы2" + ИмяЭлемента);
	Родитель = Элементы.Найти("ГруппаФормы2" + ИмяГруппы);
	Если НоваяКнопка = Неопределено Тогда
		НоваяКнопка = Элементы.Добавить("ПолеФормы2" + ИмяЭлемента, Тип("ПолеФормы"),Родитель);
		НоваяКнопка.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		НоваяКнопка.Заголовок = ЗагодовокЭлемента;
		НоваяКнопка.ПутьКДанным  = "Реквизит2" + ИмяЭлемента;
		//ЭтотОбъект["Реквизит" + ИмяКоманды] = ВидОперации.Комментарий;
	КонецЕсли;
	
	ДобавляемыеРеквизиты = Новый Массив; 
	Реквизит = Новый РеквизитФормы("Реквизит3" + ИмяЭлемента, Новый ОписаниеТипов("Строка")); 
	ДобавляемыеРеквизиты.Добавить(Реквизит); 
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	НоваяКнопка = Элементы.Найти("ПолеФормы3" + ИмяЭлемента);
	Родитель = Элементы.Найти("ГруппаФормы3" + ИмяГруппы);
	Если НоваяКнопка = Неопределено Тогда
		НоваяКнопка = Элементы.Добавить("ПолеФормы3" + ИмяЭлемента, Тип("ПолеФормы"),Родитель);
		НоваяКнопка.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		НоваяКнопка.ПутьКДанным  = "Реквизит3" + ИмяЭлемента;
	КонецЕсли;
	
	ДобавляемыеРеквизиты = Новый Массив; 
	Реквизит = Новый РеквизитФормы("Реквизит4" + ИмяЭлемента, Новый ОписаниеТипов("Строка")); 
	ДобавляемыеРеквизиты.Добавить(Реквизит); 
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	НоваяКнопка = Элементы.Найти("ПолеФормы4" + ИмяЭлемента);
	Родитель = Элементы.Найти("ГруппаФормы4" + ИмяГруппы);
	Если НоваяКнопка = Неопределено Тогда
		НоваяКнопка = Элементы.Добавить("ПолеФормы4" + ИмяЭлемента, Тип("ПолеФормы"),Родитель);
		НоваяКнопка.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		НоваяКнопка.ПутьКДанным  = "Реквизит4" + ИмяЭлемента;
	КонецЕсли;
	
	ДобавляемыеРеквизиты = Новый Массив; 
	Реквизит = Новый РеквизитФормы("Реквизит5" + ИмяЭлемента, Новый ОписаниеТипов("Строка")); 
	ДобавляемыеРеквизиты.Добавить(Реквизит); 
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	НоваяКнопка = Элементы.Найти("ПолеФормы5" + ИмяЭлемента);
	Родитель = Элементы.Найти("ГруппаФормы5" + ИмяГруппы);
	Если НоваяКнопка = Неопределено Тогда
		НоваяКнопка = Элементы.Добавить("ПолеФормы5" + ИмяЭлемента, Тип("ПолеФормы"),Родитель);
		НоваяКнопка.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		НоваяКнопка.ПутьКДанным  = "Реквизит5" + ИмяЭлемента;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанные()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	сабФинансовыеПоказатели.Ссылка КАК Показатель,
	               |	СУММА(ЕСТЬNULL(сабЗначенияФинПоказателей.Значение, 0)) КАК ЗначениеСумм,
	               |	СРЕДНЕЕ(ЕСТЬNULL(сабЗначенияФинПоказателей.Значение, 0)) КАК ЗначениеСред,
	               |	сабФинансовыеПоказатели.ПоказыватьНаФорме КАК ПоказыватьНаФорме,
	               |	сабФинансовыеПоказатели.РасчетПромежуточныхЗначений КАК РасчетПромежуточныхЗначений,
	               |	сабФинансовыеПоказатели.НормаЗнак КАК НормаЗнак,
	               |	сабФинансовыеПоказатели.НормаЧисло КАК НормаЧисло
	               |ИЗ
	               |	Справочник.сабФинансовыеПоказатели КАК сабФинансовыеПоказатели
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.сабЗначенияФинПоказателей КАК сабЗначенияФинПоказателей
	               |		ПО сабФинансовыеПоказатели.Ссылка = сабЗначенияФинПоказателей.Показатель
	               |			И (сабЗначенияФинПоказателей.Период МЕЖДУ &ДатаНачала И &ДатаОкончания)
	               |			И (сабЗначенияФинПоказателей.Сценарий = &Сценарий)
	               |			И (сабЗначенияФинПоказателей.Предприятие = &Предприятие)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	сабФинансовыеПоказатели.Ссылка,
	               |	сабФинансовыеПоказатели.ПоказыватьНаФорме,
	               |	сабФинансовыеПоказатели.РасчетПромежуточныхЗначений";
	
	Запрос.УстановитьПараметр("Сценарий", Сценарий1);
	Запрос.УстановитьПараметр("ДатаНачала", Период1.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", Период1.ДатаОкончания);
	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Суммовой = Перечисления.сабСуммСред.Сумма;
	Пока Выборка.Следующий() Цикл
		ИмяРеква = Строка(Выборка.Показатель);
		ИмяРеква = СтрЗаменить(ИмяРеква, " ", "");
		ЕстьРеквизит = НЕ ЭтаФорма.Элементы.Найти("ПолеФормы2" + Строка(ИмяРеква)) = Неопределено;
		Если ЕстьРеквизит Тогда
			Если Выборка.РасчетПромежуточныхЗначений = Суммовой Тогда
				ЭтотОбъект["Реквизит2" + Строка(ИмяРеква)] = Выборка.ЗначениеСумм;
			Иначе
				ЭтотОбъект["Реквизит2" + Строка(ИмяРеква)] = Выборка.ЗначениеСред;
			КонецЕсли;
			
			Если Выборка.НормаЗнак = ">" Тогда
				Если Число(ЭтотОбъект["Реквизит2" + Строка(ИмяРеква)]) < Выборка.НормаЧисло Тогда	
					ЭтаФорма.Элементы.Найти("ПолеФормы2" + Строка(ИмяРеква)).ЦветТекста = Новый Цвет(255,0,0);
				КонецЕсли;
			ИначеЕсли Выборка.НормаЗнак = "<" Тогда
				Если Число(ЭтотОбъект["Реквизит2" + Строка(ИмяРеква)]) > Выборка.НормаЧисло Тогда	
					ЭтаФорма.Элементы.Найти("ПолеФормы2" + Строка(ИмяРеква)).ЦветТекста = Новый Цвет(255,0,0);				
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	сабФинансовыеПоказатели.Ссылка КАК Показатель,
	               |	СУММА(ЕСТЬNULL(сабЗначенияФинПоказателей.Значение, 0)) КАК ЗначениеСумм,
	               |	СРЕДНЕЕ(ЕСТЬNULL(сабЗначенияФинПоказателей.Значение, 0)) КАК ЗначениеСред,
	               |	сабФинансовыеПоказатели.ПоказыватьНаФорме КАК ПоказыватьНаФорме,
	               |	сабФинансовыеПоказатели.РасчетПромежуточныхЗначений КАК РасчетПромежуточныхЗначений,
	               |	сабФинансовыеПоказатели.НормаЗнак КАК НормаЗнак,
	               |	сабФинансовыеПоказатели.НормаЧисло КАК НормаЧисло
	               |ИЗ
	               |	Справочник.сабФинансовыеПоказатели КАК сабФинансовыеПоказатели
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.сабЗначенияФинПоказателей КАК сабЗначенияФинПоказателей
	               |		ПО сабФинансовыеПоказатели.Ссылка = сабЗначенияФинПоказателей.Показатель
	               |			И (сабЗначенияФинПоказателей.Период МЕЖДУ &ДатаНачала И &ДатаОкончания)
	               |			И (сабЗначенияФинПоказателей.Сценарий = &Сценарий)
	               |			И (сабЗначенияФинПоказателей.Предприятие = &Предприятие)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	сабФинансовыеПоказатели.Ссылка,
	               |	сабФинансовыеПоказатели.ПоказыватьНаФорме,
	               |	сабФинансовыеПоказатели.РасчетПромежуточныхЗначений";
	
	Запрос.УстановитьПараметр("Сценарий", Сценарий2);
	Запрос.УстановитьПараметр("ДатаНачала", Период2.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", Период2.ДатаОкончания);
	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Суммовой = Перечисления.сабСуммСред.Сумма;
	Пока Выборка.Следующий() Цикл
		ИмяРеква = Строка(Выборка.Показатель);
		ИмяРеква = СтрЗаменить(ИмяРеква, " ", "");
		ЕстьРеквизит = НЕ ЭтаФорма.Элементы.Найти("ПолеФормы3" + Строка(ИмяРеква)) = Неопределено;
		Если ЕстьРеквизит Тогда
			Если Выборка.РасчетПромежуточныхЗначений = Суммовой Тогда
				ЭтотОбъект["Реквизит3" + Строка(ИмяРеква)] = Выборка.ЗначениеСумм;
			Иначе
				ЭтотОбъект["Реквизит3" + Строка(ИмяРеква)] = Выборка.ЗначениеСред;
			КонецЕсли;
			
			Если Выборка.НормаЗнак = ">" Тогда
				Если Число(ЭтотОбъект["Реквизит3" + Строка(ИмяРеква)]) < Выборка.НормаЧисло Тогда	
					ЭтаФорма.Элементы.Найти("ПолеФормы3" + Строка(ИмяРеква)).ЦветТекста = Новый Цвет(255,0,0);
				КонецЕсли;
			ИначеЕсли Выборка.НормаЗнак = "<" Тогда
				Если Число(ЭтотОбъект["Реквизит3" + Строка(ИмяРеква)]) > Выборка.НормаЧисло Тогда	
					ЭтаФорма.Элементы.Найти("ПолеФормы3" + Строка(ИмяРеква)).ЦветТекста = Новый Цвет(255,0,0);				
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;
	КонецЦикла;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ИмяРеква = Строка(Выборка.Показатель);
		ИмяРеква = СтрЗаменить(ИмяРеква, " ", "");
		ЕстьРеквизит = НЕ ЭтаФорма.Элементы.Найти("ПолеФормы4" + Строка(ИмяРеква)) = Неопределено;
		Если ЕстьРеквизит Тогда
			Если Число(ЭтотОбъект["Реквизит3" + Строка(ИмяРеква)]) > 0 Тогда
				ЭтотОбъект["Реквизит4" + Строка(ИмяРеква)] = ?(Число(ЭтотОбъект["Реквизит3" + Строка(ИмяРеква)]), 
				Формат((Число(ЭтотОбъект["Реквизит3" + Строка(ИмяРеква)]) - Число(ЭтотОбъект["Реквизит2" + Строка(ИмяРеква)])) / Число(ЭтотОбъект["Реквизит3" + Строка(ИмяРеква)]) * 100, "ЧДЦ=2"), ?(Число(ЭтотОбъект["Реквизит2" + Строка(ИмяРеква)]), 100, 0));
			Иначе
				ЭтотОбъект["Реквизит4" + Строка(ИмяРеква)] = ?(Число(ЭтотОбъект["Реквизит3" + Строка(ИмяРеква)]), 
				Формат((Число(ЭтотОбъект["Реквизит3" + Строка(ИмяРеква)]) - Число(ЭтотОбъект["Реквизит2" + Строка(ИмяРеква)])) / -Число(ЭтотОбъект["Реквизит3" + Строка(ИмяРеква)]) * 100, "ЧДЦ=2"), ?(Число(ЭтотОбъект["Реквизит2" + Строка(ИмяРеква)]), 100, 0));
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ЭтотОбъект["Реквизит4" + Строка(ИмяРеква)]) Тогда
				ЭтотОбъект["Реквизит4" + Строка(ИмяРеква)] = 0;			
			КонецЕсли;
			Если Число(ЭтотОбъект["Реквизит4" + Строка(ИмяРеква)]) > 0 Тогда
				ЭтаФорма.Элементы.Найти("ПолеФормы4" + Строка(ИмяРеква)).ЦветТекста = Новый Цвет(51,153,102);
			ИначеЕсли Число(ЭтотОбъект["Реквизит4" + Строка(ИмяРеква)]) < 0 Тогда	
				ЭтаФорма.Элементы.Найти("ПолеФормы4" + Строка(ИмяРеква)).ЦветТекста = Новый Цвет(255,0,0);
			КонецЕсли;
			ЭтотОбъект["Реквизит4" + Строка(ИмяРеква)] = ЭтотОбъект["Реквизит4" + Строка(ИмяРеква)] + "%";
		КонецЕсли;
		
		ИмяРеква = Строка(Выборка.Показатель);
		ИмяРеква = СтрЗаменить(ИмяРеква, " ", "");
		ЕстьРеквизит = НЕ ЭтаФорма.Элементы.Найти("ПолеФормы5" + Строка(ИмяРеква)) = Неопределено;
		Если ЕстьРеквизит Тогда
			ЭтотОбъект["Реквизит5" + Строка(ИмяРеква)] = Строка(Выборка.НормаЗнак) + Строка(Формат(Выборка.НормаЧисло, "ЧДЦ=2"));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Сценарий1ПриИзменении(Элемент)
	ЗаполнитьДанные();
	ЗаполнитьДиаграммы();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(Период1) Тогда
		Период1.Вариант = ВариантСтандартногоПериода.ПрошлыйМесяц;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Период2) Тогда
		Период2.Вариант = ВариантСтандартногоПериода.ЭтотМесяц;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Сценарий1) Тогда
		Сценарий1 = СценарийФакт();	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Сценарий2) Тогда
		Сценарий2 = СценарийФакт();	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПоказательДиаграммы1) Тогда
		ПоказательДиаграммы1 = ПоказательВыручка();	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПоказательДиаграммы2) Тогда
		ПоказательДиаграммы2 = ПоказательПрибыль();	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПоказательДиаграммы3) Тогда
		ПоказательДиаграммы3 = ПоказательРентабельность();	
	КонецЕсли;

	ЗаполнитьРеквизитыФормы();
	ЗаполнитьДанные();
	ЗаполнитьДиаграммы();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СценарийФакт()
	Возврат Справочники.СценарииПланирования.СценарийФакт();	
КонецФункции // ()

&НаСервереБезКонтекста
Функция ПоказательВыручка()
	Возврат Справочники.сабФинансовыеПоказатели.НайтиПоНаименованию("Выручка", Истина);	
КонецФункции // ()

&НаСервереБезКонтекста
Функция ПоказательПрибыль()
	Возврат Справочники.сабФинансовыеПоказатели.НайтиПоНаименованию("Прибыль", Истина);	
КонецФункции // ()

&НаСервереБезКонтекста
Функция ПоказательРентабельность()
	Возврат Справочники.сабФинансовыеПоказатели.НайтиПоНаименованию("Рентабельность продаж", Истина);	
КонецФункции // ()

&НаСервере
Процедура ЗаполнитьДиаграммы()
	
	Суммовой = Перечисления.сабСуммСред.Сумма;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(сабЗначенияФинПоказателей.Значение) КАК ЗначениеСумм,
	               |	НАЧАЛОПЕРИОДА(сабЗначенияФинПоказателей.Период, МЕСЯЦ) КАК Период,
	               |	СРЕДНЕЕ(сабЗначенияФинПоказателей.Значение) КАК ЗначениеСред,
	               |	сабЗначенияФинПоказателей.Показатель.РасчетПромежуточныхЗначений КАК ПоказательРасчетПромежуточныхЗначений,
	               |	сабЗначенияФинПоказателей.Показатель КАК Показатель
	               |ИЗ
	               |	РегистрСведений.сабЗначенияФинПоказателей КАК сабЗначенияФинПоказателей
	               |ГДЕ
	               |	сабЗначенияФинПоказателей.Сценарий = &Сценарий1
	               |	И сабЗначенияФинПоказателей.Показатель В (&Показатель1, &Показатель2, &Показатель3)
	               |	И сабЗначенияФинПоказателей.Период >= НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекДата, МЕСЯЦ, -6), МЕСЯЦ)
	               |	И сабЗначенияФинПоказателей.Предприятие = &Предприятие
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	сабЗначенияФинПоказателей.Показатель.РасчетПромежуточныхЗначений,
	               |	НАЧАЛОПЕРИОДА(сабЗначенияФинПоказателей.Период, МЕСЯЦ),
	               |	сабЗначенияФинПоказателей.Показатель
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Сценарий1", Сценарий1);
	Запрос.УстановитьПараметр("Показатель1", ПоказательДиаграммы1);
	Запрос.УстановитьПараметр("Показатель2", ПоказательДиаграммы2);
	Запрос.УстановитьПараметр("Показатель3", ПоказательДиаграммы3);
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();
	
	Диаграмма1.Очистить();
	Диаграмма1.АвтоТранспонирование = Ложь;
	Диаграмма1.Обновление 			= Ложь;
	
	Диаграмма2.Очистить();
	Диаграмма2.АвтоТранспонирование = Ложь;
	Диаграмма2.Обновление 			= Ложь;

	Диаграмма3.Очистить();
	Диаграмма3.АвтоТранспонирование = Ложь;
	Диаграмма3.Обновление 			= Ложь;

	Диаграмма1.Серии.Добавить(ПоказательДиаграммы1);
	Диаграмма2.Серии.Добавить(ПоказательДиаграммы2);
	Диаграмма3.Серии.Добавить(ПоказательДиаграммы3);
	
	Для Каждого ТекСтрока Из Выборка Цикл
		
		Если ТекСтрока.Показатель = ПоказательДиаграммы1 Тогда
			Точка = Диаграмма1.УстановитьТочку(Формат(ТекСтрока.Период,"ДФ='ММММ гггг'"));
			Диаграмма1.УстановитьЗначение(Точка
			, Диаграмма1.Серии[0]
			, ?(Суммовой = ТекСтрока.ПоказательРасчетПромежуточныхЗначений, ТекСтрока.ЗначениеСумм, ТекСтрока.ЗначениеСред)
			, Неопределено
			, ПоказательДиаграммы1);
		ИначеЕсли ТекСтрока.Показатель = ПоказательДиаграммы2 Тогда
			Точка = Диаграмма2.УстановитьТочку(Формат(ТекСтрока.Период,"ДФ='ММММ гггг'"));
			Диаграмма2.УстановитьЗначение(Точка
			, Диаграмма2.Серии[0]
			, ?(Суммовой = ТекСтрока.ПоказательРасчетПромежуточныхЗначений, ТекСтрока.ЗначениеСумм, ТекСтрока.ЗначениеСред)
			, Неопределено
			, ПоказательДиаграммы2);
			
		ИначеЕсли ТекСтрока.Показатель = ПоказательДиаграммы3 Тогда
			Точка = Диаграмма3.УстановитьТочку(Формат(ТекСтрока.Период,"ДФ='ММММ гггг'"));
			Диаграмма3.УстановитьЗначение(Точка
			, Диаграмма3.Серии[0]
			, ?(Суммовой = ТекСтрока.ПоказательРасчетПромежуточныхЗначений, ТекСтрока.ЗначениеСумм, ТекСтрока.ЗначениеСред)
			, Неопределено
			, ПоказательДиаграммы3);
		КонецЕсли;
		
	КонецЦикла;
	
	//Диаграмма1.ОбластьЗаголовка.Текст 	= ПоказательДиаграммы1;
	Диаграмма1.АвтоТранспонирование 	= Истина;
	Диаграмма1.Обновление		= Истина;
	
	//Диаграмма2.ОбластьЗаголовка.Текст 	= ПоказательДиаграммы2;
	Диаграмма2.АвтоТранспонирование 	= Истина;
	Диаграмма2.Обновление		= Истина;
	
	//Диаграмма3.ОбластьЗаголовка.Текст 	= ПоказательДиаграммы3;
	Диаграмма3.АвтоТранспонирование 	= Истина;
	Диаграмма3.Обновление		= Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказательДиаграммы1ПриИзменении(Элемент)
	ЗаполнитьДиаграммы();
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьНаСервере(Сценарий1, Период1, Предприятие);
	ОбновитьНаСервере(Сценарий2, Период2, Предприятие);
	
	ЗаполнитьДанные();
	ЗаполнитьДиаграммы();

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьНаСервере(Сценарий1, Период1, Предприятие)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Учетный.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ Счета
	               |ИЗ
	               |	ПланСчетов.Учетный КАК Учетный
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""СчетЧА""
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Д_СтатьиОборотки.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ СтатьяЧА
	               |ИЗ
	               |	Справочник.Д_СтатьиОборотки КАК Д_СтатьиОборотки
	               |ГДЕ
	               |	Д_СтатьиОборотки.РазницаЧА = ИСТИНА
	               |	И Д_СтатьиОборотки.Ссылка В ИЕРАРХИИ(&ВидСтатейБаланса)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Д_СтатьиОбороткиСчета.Ссылка КАК Статья,
	               |	Д_СтатьиОбороткиСчета.ВидОстатка КАК ВидОстатка,
	               |	Счета.Ссылка КАК Счет,
	               |	""БезЧА"" КАК ЧА,
	               |	Д_СтатьиОбороткиСчета.РасшифровкаСубконто1 КАК РасшифровкаСубконто1,
	               |	Д_СтатьиОбороткиСчета.РасшифровкаПоПредприятиям КАК РасшифровкаПоПредприятиям
	               |ПОМЕСТИТЬ ВТ_ИтогПоТЧСтатей
	               |ИЗ
	               |	Счета КАК Счета
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Д_СтатьиОборотки.Счета КАК Д_СтатьиОбороткиСчета
	               |		ПО (Счета.Ссылка = Д_СтатьиОбороткиСчета.Счет
	               |				ИЛИ Счета.Ссылка.Родитель = Д_СтатьиОбороткиСчета.Счет
	               |				ИЛИ Счета.Ссылка.Родитель.Родитель = Д_СтатьиОбороткиСчета.Счет)
	               |ГДЕ
	               |	Д_СтатьиОбороткиСчета.Ссылка В ИЕРАРХИИ(&ВидСтатейБаланса)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	СтатьяЧА.Ссылка,
	               |	Д_СтатьиОбороткиСчета.ВидОстатка,
	               |	Счета.Ссылка,
	               |	""ЧА"",
	               |	Д_СтатьиОбороткиСчета.РасшифровкаСубконто1,
	               |	Д_СтатьиОбороткиСчета.РасшифровкаПоПредприятиям
	               |ИЗ
	               |	Счета КАК Счета
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Д_СтатьиОборотки.Счета КАК Д_СтатьиОбороткиСчета
	               |		ПО (Счета.Ссылка = Д_СтатьиОбороткиСчета.Счет
	               |				ИЛИ Счета.Ссылка.Родитель = Д_СтатьиОбороткиСчета.Счет
	               |				ИЛИ Счета.Ссылка.Родитель.Родитель = Д_СтатьиОбороткиСчета.Счет),
	               |	СтатьяЧА КАК СтатьяЧА
	               |ГДЕ
	               |	Д_СтатьиОбороткиСчета.Ссылка В ИЕРАРХИИ(&ВидСтатейБаланса)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ИтогПоТЧСтатей.Статья КАК Статья,
	               |	ВТ_ИтогПоТЧСтатей.ВидОстатка КАК ВидОстатка,
	               |	ВТ_ИтогПоТЧСтатей.Счет КАК Счет,
	               |	ВТ_ИтогПоТЧСтатей.ЧА КАК ЧА,
	               |	ВТ_ИтогПоТЧСтатей.РасшифровкаСубконто1 КАК РасшифровкаСубконто1,
	               |	ВТ_ИтогПоТЧСтатей.РасшифровкаПоПредприятиям КАК РасшифровкаПоПредприятиям
	               |ПОМЕСТИТЬ ВТ_ОбщаяСтатьиСчета
	               |ИЗ
	               |	ВТ_ИтогПоТЧСтатей КАК ВТ_ИтогПоТЧСтатей
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Д_СтатьиОборотки.Ссылка,
	               |	NULL,
	               |	NULL,
	               |	ВЫБОР
	               |		КОГДА Д_СтатьиОборотки.РазницаЧА
	               |			ТОГДА ""ЧА""
	               |		ИНАЧЕ ""БезЧА""
	               |	КОНЕЦ,
	               |	NULL,
	               |	NULL
	               |ИЗ
	               |	Справочник.Д_СтатьиОборотки КАК Д_СтатьиОборотки
	               |ГДЕ
	               |	Д_СтатьиОборотки.Ссылка В ИЕРАРХИИ(&ВидСтатейБаланса)
	               |	И Д_СтатьиОборотки.ЭтоГруппа = ЛОЖЬ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СУММА(ЕСТЬNULL(УчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт, 0)) КАК СНД,
	               |	СУММА(ЕСТЬNULL(УчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт, 0)) КАК СНК,
	               |	СУММА(ЕСТЬNULL(УчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт, 0)) КАК СКД,
	               |	СУММА(ЕСТЬNULL(УчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт, 0)) КАК СКК,
	               |	ВЫБОР
	               |		КОГДА &Сводный
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.Предприятия.ПустаяСсылка)
	               |		ИНАЧЕ УчетныйОстаткиИОбороты.Предприятия
	               |	КОНЕЦ КАК Предприятия,
	               |	УчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	СУММА(0) КАК СНДРС,
	               |	СУММА(0) КАК СНКРС,
	               |	СУММА(0) КАК СКДРС,
	               |	СУММА(0) КАК СККРС,
	               |	НЕОПРЕДЕЛЕНО КАК Субконто1,
	               |	УчетныйОстаткиИОбороты.Предприятия КАК Предприятие,
	               |	0 КАК ДО,
	               |	0 КАК КО
	               |ПОМЕСТИТЬ ВТ_ОстаткиПоСчетам
	               |ИЗ
	               |	РегистрБухгалтерии.Учетный.ОстаткиИОбороты(
	               |			&НачалоПериода,
	               |			&КонецПериода,
	               |			,
	               |			,
	               |			,
	               |			,
	               |			СценарийПлана = &Сценарий
	               |				И Предприятия В (&Предприятия)) КАК УчетныйОстаткиИОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних({(&ДатаКурса)}, ) КАК КурсыВалютСрезПоследних
	               |		ПО УчетныйОстаткиИОбороты.Предприятия.ОсновнаяВалютаУчета = КурсыВалютСрезПоследних.Валюта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних({(&ДатаКурса)}, Валюта = &ЭквивалентнаяВалюта) КАК КурсЭквивалентнойВалюты
	               |		ПО (УчетныйОстаткиИОбороты.Предприятия.ОсновнаяВалютаУчета = НЕОПРЕДЕЛЕНО)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	УчетныйОстаткиИОбороты.Счет,
	               |	ВЫБОР
	               |		КОГДА &Сводный
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.Предприятия.ПустаяСсылка)
	               |		ИНАЧЕ УчетныйОстаткиИОбороты.Предприятия
	               |	КОНЕЦ,
	               |	УчетныйОстаткиИОбороты.Предприятия
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	СУММА(0),
	               |	СУММА(0),
	               |	СУММА(0),
	               |	СУММА(0),
	               |	ВЫБОР
	               |		КОГДА &Сводный
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.Предприятия.ПустаяСсылка)
	               |		ИНАЧЕ УчетныйОстаткиИОбороты.Предприятия
	               |	КОНЕЦ,
	               |	УчетныйОстаткиИОбороты.Счет,
	               |	СУММА(ЕСТЬNULL(УчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт, 0)),
	               |	СУММА(ЕСТЬNULL(УчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокКт, 0)),
	               |	СУММА(ЕСТЬNULL(УчетныйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокДт, 0)),
	               |	СУММА(ЕСТЬNULL(УчетныйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокКт, 0)),
	               |	УчетныйОстаткиИОбороты.Субконто1,
	               |	УчетныйОстаткиИОбороты.Предприятия,
	               |	0,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.Учетный.ОстаткиИОбороты(
	               |			&НачалоПериода,
	               |			&КонецПериода,
	               |			,
	               |			,
	               |			,
	               |			,
	               |			СценарийПлана = &Сценарий
	               |				И Предприятия В (&Предприятия)) КАК УчетныйОстаткиИОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних({(&ДатаКурса)}, ) КАК КурсыВалютСрезПоследних
	               |		ПО УчетныйОстаткиИОбороты.Предприятия.ОсновнаяВалютаУчета = КурсыВалютСрезПоследних.Валюта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних({(&ДатаКурса)}, Валюта = &ЭквивалентнаяВалюта) КАК КурсЭквивалентнойВалюты
	               |		ПО (УчетныйОстаткиИОбороты.Предприятия.ОсновнаяВалютаУчета = НЕОПРЕДЕЛЕНО)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	УчетныйОстаткиИОбороты.Счет,
	               |	ВЫБОР
	               |		КОГДА &Сводный
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.Предприятия.ПустаяСсылка)
	               |		ИНАЧЕ УчетныйОстаткиИОбороты.Предприятия
	               |	КОНЕЦ,
	               |	УчетныйОстаткиИОбороты.Субконто1,
	               |	УчетныйОстаткиИОбороты.Предприятия
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	ВЫБОР
	               |		КОГДА &Сводный
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.Предприятия.ПустаяСсылка)
	               |		ИНАЧЕ УчетныйОбороты.Предприятия
	               |	КОНЕЦ,
	               |	УчетныйОбороты.Счет,
	               |	СУММА(0),
	               |	СУММА(0),
	               |	СУММА(0),
	               |	СУММА(0),
	               |	НЕОПРЕДЕЛЕНО,
	               |	УчетныйОбороты.Предприятия,
	               |	ЕСТЬNULL(УчетныйОбороты.СуммаОборотДт, 0),
	               |	ЕСТЬNULL(УчетныйОбороты.СуммаОборотКт, 0)
	               |ИЗ
	               |	РегистрБухгалтерии.Учетный.Обороты(
	               |			&НачалоПериода,
	               |			&КонецПериода,
	               |			,
	               |			,
	               |			,
	               |			СценарийПлана = &Сценарий
	               |				И Предприятия В (&Предприятия),
	               |			НЕ КорСчет В ИЕРАРХИИ (&Счета9091),
	               |			) КАК УчетныйОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних({(&ДатаКурса)}, ) КАК КурсыВалютСрезПоследних
	               |		ПО УчетныйОбороты.Предприятия.ОсновнаяВалютаУчета = КурсыВалютСрезПоследних.Валюта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних({(&ДатаКурса)}, Валюта = &ЭквивалентнаяВалюта) КАК КурсЭквивалентнойВалюты
	               |		ПО (УчетныйОбороты.Предприятия.ОсновнаяВалютаУчета = НЕОПРЕДЕЛЕНО)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	УчетныйОбороты.Счет,
	               |	ВЫБОР
	               |		КОГДА &Сводный
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.Предприятия.ПустаяСсылка)
	               |		ИНАЧЕ УчетныйОбороты.Предприятия
	               |	КОНЕЦ,
	               |	УчетныйОбороты.Предприятия,
	               |	ЕСТЬNULL(УчетныйОбороты.СуммаОборотДт, 0),
	               |	ЕСТЬNULL(УчетныйОбороты.СуммаОборотКт, 0)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ОстаткиПоСчетам.Счет КАК Счет,
	               |	ВТ_ОстаткиПоСчетам.СНД КАК СуммаНачало,
	               |	ВТ_ОстаткиПоСчетам.СКД КАК СуммаКонец,
	               |	ЗНАЧЕНИЕ(Перечисление.УЧ_ВидОстаткаПоСчету.Дебет) КАК ВидОстатка,
	               |	ВТ_ОстаткиПоСчетам.Предприятия КАК Предприятия,
	               |	ВТ_ОстаткиПоСчетам.СНД КАК ЧАНачало,
	               |	ВТ_ОстаткиПоСчетам.СКД КАК ЧАКонец,
	               |	NULL КАК Субконто1,
	               |	ВТ_ОстаткиПоСчетам.Предприятие КАК Предприятие,
	               |	ВТ_ОстаткиПоСчетам.ДО КАК Оборот
	               |ПОМЕСТИТЬ ВТ_ОстаткиВидОстатка
	               |ИЗ
	               |	ВТ_ОстаткиПоСчетам КАК ВТ_ОстаткиПоСчетам
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_ОстаткиПоСчетам.Счет,
	               |	ВТ_ОстаткиПоСчетам.СНК,
	               |	ВТ_ОстаткиПоСчетам.СКК,
	               |	ЗНАЧЕНИЕ(Перечисление.УЧ_ВидОстаткаПоСчету.Кредит),
	               |	ВТ_ОстаткиПоСчетам.Предприятия,
	               |	-ВТ_ОстаткиПоСчетам.СНК,
	               |	-ВТ_ОстаткиПоСчетам.СКК,
	               |	NULL,
	               |	ВТ_ОстаткиПоСчетам.Предприятие,
	               |	ВТ_ОстаткиПоСчетам.КО
	               |ИЗ
	               |	ВТ_ОстаткиПоСчетам КАК ВТ_ОстаткиПоСчетам
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_ОстаткиПоСчетам.Счет,
	               |	ВТ_ОстаткиПоСчетам.СНД - ВТ_ОстаткиПоСчетам.СНК,
	               |	ВТ_ОстаткиПоСчетам.СКД - ВТ_ОстаткиПоСчетам.СКК,
	               |	ЗНАЧЕНИЕ(Перечисление.УЧ_ВидОстаткаПоСчету.ДебетСвернутый),
	               |	ВТ_ОстаткиПоСчетам.Предприятия,
	               |	ВТ_ОстаткиПоСчетам.СНД - ВТ_ОстаткиПоСчетам.СНК,
	               |	ВТ_ОстаткиПоСчетам.СКД - ВТ_ОстаткиПоСчетам.СКК,
	               |	NULL,
	               |	ВТ_ОстаткиПоСчетам.Предприятие,
	               |	ВТ_ОстаткиПоСчетам.ДО - ВТ_ОстаткиПоСчетам.КО
	               |ИЗ
	               |	ВТ_ОстаткиПоСчетам КАК ВТ_ОстаткиПоСчетам
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_ОстаткиПоСчетам.Счет,
	               |	ВТ_ОстаткиПоСчетам.СНК - ВТ_ОстаткиПоСчетам.СНД,
	               |	ВТ_ОстаткиПоСчетам.СКК - ВТ_ОстаткиПоСчетам.СКД,
	               |	ЗНАЧЕНИЕ(Перечисление.УЧ_ВидОстаткаПоСчету.КредитСвернутый),
	               |	ВТ_ОстаткиПоСчетам.Предприятия,
	               |	-(ВТ_ОстаткиПоСчетам.СНК - ВТ_ОстаткиПоСчетам.СНД),
	               |	-(ВТ_ОстаткиПоСчетам.СКК - ВТ_ОстаткиПоСчетам.СКД),
	               |	NULL,
	               |	ВТ_ОстаткиПоСчетам.Предприятие,
	               |	ВТ_ОстаткиПоСчетам.КО - ВТ_ОстаткиПоСчетам.ДО
	               |ИЗ
	               |	ВТ_ОстаткиПоСчетам КАК ВТ_ОстаткиПоСчетам
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_ОстаткиПоСчетам.Счет,
	               |	ВТ_ОстаткиПоСчетам.СНДРС,
	               |	ВТ_ОстаткиПоСчетам.СКДРС,
	               |	ЗНАЧЕНИЕ(Перечисление.УЧ_ВидОстаткаПоСчету.ДебетРазвернутый),
	               |	ВТ_ОстаткиПоСчетам.Предприятия,
	               |	ВТ_ОстаткиПоСчетам.СНДРС,
	               |	ВТ_ОстаткиПоСчетам.СКДРС,
	               |	ВТ_ОстаткиПоСчетам.Субконто1,
	               |	ВТ_ОстаткиПоСчетам.Предприятие,
	               |	ВТ_ОстаткиПоСчетам.ДО
	               |ИЗ
	               |	ВТ_ОстаткиПоСчетам КАК ВТ_ОстаткиПоСчетам
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_ОстаткиПоСчетам.Счет,
	               |	ВТ_ОстаткиПоСчетам.СНКРС,
	               |	ВТ_ОстаткиПоСчетам.СККРС,
	               |	ЗНАЧЕНИЕ(Перечисление.УЧ_ВидОстаткаПоСчету.КредитРазвернутый),
	               |	ВТ_ОстаткиПоСчетам.Предприятия,
	               |	-ВТ_ОстаткиПоСчетам.СНКРС,
	               |	-ВТ_ОстаткиПоСчетам.СККРС,
	               |	ВТ_ОстаткиПоСчетам.Субконто1,
	               |	ВТ_ОстаткиПоСчетам.Предприятие,
	               |	ВТ_ОстаткиПоСчетам.КО
	               |ИЗ
	               |	ВТ_ОстаткиПоСчетам КАК ВТ_ОстаткиПоСчетам
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_ОстаткиПоСчетам.Счет,
	               |	ВТ_ОстаткиПоСчетам.СНДРС - ВТ_ОстаткиПоСчетам.СНКРС,
	               |	ВТ_ОстаткиПоСчетам.СКДРС - ВТ_ОстаткиПоСчетам.СККРС,
	               |	ЗНАЧЕНИЕ(Перечисление.УЧ_ВидОстаткаПоСчету.ДебетСвернутыйСубконто1),
	               |	ВТ_ОстаткиПоСчетам.Предприятия,
	               |	ВТ_ОстаткиПоСчетам.СНДРС - ВТ_ОстаткиПоСчетам.СНКРС,
	               |	ВТ_ОстаткиПоСчетам.СКДРС - ВТ_ОстаткиПоСчетам.СККРС,
	               |	ВТ_ОстаткиПоСчетам.Субконто1,
	               |	ВТ_ОстаткиПоСчетам.Предприятие,
	               |	ВТ_ОстаткиПоСчетам.ДО - ВТ_ОстаткиПоСчетам.КО
	               |ИЗ
	               |	ВТ_ОстаткиПоСчетам КАК ВТ_ОстаткиПоСчетам
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_ОстаткиПоСчетам.Счет,
	               |	ВТ_ОстаткиПоСчетам.СНКРС - ВТ_ОстаткиПоСчетам.СНДРС,
	               |	ВТ_ОстаткиПоСчетам.СККРС - ВТ_ОстаткиПоСчетам.СКДРС,
	               |	ЗНАЧЕНИЕ(Перечисление.УЧ_ВидОстаткаПоСчету.КредитСвернутыйСубконто1),
	               |	ВТ_ОстаткиПоСчетам.Предприятия,
	               |	-(ВТ_ОстаткиПоСчетам.СНКРС - ВТ_ОстаткиПоСчетам.СНДРС),
	               |	-(ВТ_ОстаткиПоСчетам.СККРС - ВТ_ОстаткиПоСчетам.СКДРС),
	               |	ВТ_ОстаткиПоСчетам.Субконто1,
	               |	ВТ_ОстаткиПоСчетам.Предприятие,
	               |	ВТ_ОстаткиПоСчетам.КО - ВТ_ОстаткиПоСчетам.ДО
	               |ИЗ
	               |	ВТ_ОстаткиПоСчетам КАК ВТ_ОстаткиПоСчетам
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ОстаткиВидОстатка.Счет КАК Счет,
	               |	ВТ_ОстаткиВидОстатка.СуммаНачало КАК СуммаНачало,
	               |	ВТ_ОстаткиВидОстатка.СуммаКонец КАК СуммаКонец,
	               |	ВТ_ОстаткиВидОстатка.Предприятия КАК Предприятия,
	               |	ВТ_ОстаткиВидОстатка.Субконто1 КАК Субконто1,
	               |	ВТ_ОстаткиВидОстатка.ВидОстатка КАК ВидОстатка,
	               |	""БезЧА"" КАК ЧА,
	               |	ВТ_ОстаткиВидОстатка.Предприятие КАК Предприятие,
	               |	ВТ_ОстаткиВидОстатка.Оборот КАК Оборот
	               |ПОМЕСТИТЬ ВТ_ИтоговоеСальдо
	               |ИЗ
	               |	ВТ_ОстаткиВидОстатка КАК ВТ_ОстаткиВидОстатка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ИтоговоеСальдо.Счет КАК Счет,
	               |	ВТ_ИтоговоеСальдо.СуммаНачало КАК СуммаНачало,
	               |	ВТ_ИтоговоеСальдо.СуммаКонец КАК СуммаКонец,
	               |	ВТ_ИтоговоеСальдо.Предприятия КАК Предприятия,
	               |	ВЫБОР
	               |		КОГДА &Сводный = ЛОЖЬ
	               |				И ВТ_ОбщаяСтатьиСчета.РасшифровкаСубконто1 = ИСТИНА
	               |			ТОГДА ВТ_ИтоговоеСальдо.Субконто1
	               |		ИНАЧЕ NULL
	               |	КОНЕЦ КАК Субконто1,
	               |	ВТ_ОбщаяСтатьиСчета.Статья КАК Статья,
	               |	ВЫБОР
	               |		КОГДА &Сводный = ИСТИНА
	               |				И ВТ_ОбщаяСтатьиСчета.РасшифровкаПоПредприятиям = ИСТИНА
	               |			ТОГДА ВТ_ИтоговоеСальдо.Предприятие
	               |		ИНАЧЕ NULL
	               |	КОНЕЦ КАК Предприятие,
	               |	ВТ_ИтоговоеСальдо.Оборот КАК Оборот
	               |ИЗ
	               |	ВТ_ОбщаяСтатьиСчета КАК ВТ_ОбщаяСтатьиСчета
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИтоговоеСальдо КАК ВТ_ИтоговоеСальдо
	               |		ПО ВТ_ОбщаяСтатьиСчета.Счет = ВТ_ИтоговоеСальдо.Счет
	               |			И ВТ_ОбщаяСтатьиСчета.ВидОстатка = ВТ_ИтоговоеСальдо.ВидОстатка
	               |			И ВТ_ОбщаяСтатьиСчета.ЧА = ВТ_ИтоговоеСальдо.ЧА
	               |ГДЕ
	               |	(НЕ ЕСТЬNULL(ВТ_ИтоговоеСальдо.СуммаНачало, 0) = 0
	               |			ИЛИ НЕ ЕСТЬNULL(ВТ_ИтоговоеСальдо.СуммаКонец, 0) = 0)";
	
	Запрос.УстановитьПараметр("Сводный", ЗначениеЗаполнено(Предприятие));
	Запрос.УстановитьПараметр("ВидСтатейБаланса", Справочники.Д_СтатьиОборотки.НайтиПоНаименованию("Статьи учетного баланса", Истина));
	Запрос.УстановитьПараметр("ЭквивалентнаяВалюта", УЧ_Сервер.НациональнаяВалюта());
	Запрос.УстановитьПараметр("ДатаКурса", Период1.ДатаНачала);
	Запрос.УстановитьПараметр("Предприятия", ?(НЕ ЗначениеЗаполнено(Предприятие), БюджетныйНаСервере.ПолучитьПредприятия(), Предприятие));
	Запрос.УстановитьПараметр("Сценарий", Сценарий1);
	Запрос.УстановитьПараметр("НачалоПериода", Период1.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", Период1.ДатаОкончания);
	Счета9091 = Новый Массив;
	Счета9091.Добавить(ПланыСчетов.Учетный.Счет90());
	Счета9091.Добавить(ПланыСчетов.Учетный.Счет91());
	Счета9091.Добавить(ПланыСчетов.Учетный.Счет99());
	Запрос.УстановитьПараметр("Счета9091", Счета9091);
	
	Результат = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	ВыборкаДанныеБаланса = Результат[7].Выгрузить();
	
	Оборот = Перечисления.сабТипыДанныхПоСчету.Обороты;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	сабФинансовыеПоказатели.Ссылка КАК Ссылка,
	               |	сабФинансовыеПоказатели.РасчетныеДанные.(
	               |		Ссылка КАК Ссылка,
	               |		НомерСтроки КАК НомерСтроки,
	               |		Источник КАК Источник,
	               |		ТипДанных КАК ТипДанных,
	               |		ВидОстатка КАК ВидОстатка,
	               |		РасшифровкаСубконто1 КАК РасшифровкаСубконто1,
	               |		РасшифровкаПоПредприятиям КАК РасшифровкаПоПредприятиям
	               |	) КАК РасчетныеДанные,
	               |	сабФинансовыеПоказатели.РасчетныеДанныеЗнаменатель.(
	               |		Ссылка КАК Ссылка,
	               |		НомерСтроки КАК НомерСтроки,
	               |		Источник КАК Источник,
	               |		ТипДанных КАК ТипДанных,
	               |		ВидОстатка КАК ВидОстатка,
	               |		РасшифровкаСубконто1 КАК РасшифровкаСубконто1,
	               |		РасшифровкаПоПредприятиям КАК РасшифровкаПоПредприятиям
	               |	) КАК РасчетныеДанныеЗнаменатель
	               |ИЗ
	               |	Справочник.сабФинансовыеПоказатели КАК сабФинансовыеПоказатели";
	
	РезультатСтатьи = Запрос.Выполнить();
	Выборка = РезультатСтатьи.Выбрать();
	
	МассивПоказателей = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		ПоказательРассчитан = Ложь;
		ТекЗначение1 = 0;
		ТекЗначение2 = 0;
		ВыборкаТЧ = Выборка.РасчетныеДанные.Выгрузить();
		Для каждого ТекСтрокаФин Из ВыборкаТЧ Цикл
			Если Не ТипЗнч(ТекСтрокаФин.Источник) = Тип("СправочникСсылка.Д_СтатьиОборотки") Тогда
				Продолжить;			
			КонецЕсли;
			НайденныеСтроки = ВыборкаДанныеБаланса.НайтиСтроки(Новый Структура("Статья", ТекСтрокаФин.Источник));
			Для каждого ТекСтрока Из НайденныеСтроки Цикл
				Если ТекСтрокаФин.ТипДанных = Оборот Тогда
					ТекЗначение1 = ТекЗначение1 + ТекСтрока.Оборот;
				Иначе
					ТекЗначение1 = ТекЗначение1 + ТекСтрока.СуммаНачало;
					ТекЗначение2 = ТекЗначение2 + ТекСтрока.СуммаКонец;
				КонецЕсли;
			КонецЦикла;
			ПоказательРассчитан = Истина;
		КонецЦикла;
		
		Если ПоказательРассчитан Тогда
			МассивПоказателей.Добавить(Выборка.Ссылка);		
		КонецЕсли;
		
		НоваяЗапись = РегистрыСведений.сабЗначенияФинПоказателей.СоздатьМенеджерЗаписи();
		НоваяЗапись.Сценарий = Сценарий1;
		НоваяЗапись.Показатель = Выборка.Ссылка;
		НоваяЗапись.Предприятие = Предприятие;
		НоваяЗапись.Период = Период1.ДатаНачала;
		НоваяЗапись.Значение = ТекЗначение1;
		НоваяЗапись.Записать();
		
		НоваяЗапись = РегистрыСведений.сабЗначенияФинПоказателей.СоздатьМенеджерЗаписи();
		НоваяЗапись.Сценарий = Сценарий1;
		НоваяЗапись.Показатель = Выборка.Ссылка;
		НоваяЗапись.Предприятие = Предприятие;
		НоваяЗапись.Период = Период1.ДатаОкончания;
		НоваяЗапись.Значение = ТекЗначение2;
		НоваяЗапись.Записать();
		
	КонецЦикла;
	
	ВыборкаДанныеСчетов = Результат[6].Выгрузить();
	
	Выборка = РезультатСтатьи.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не МассивПоказателей.Найти(Выборка.Ссылка) = Неопределено Тогда
			Продолжить;		
		КонецЕсли;
		
		ТекЗначение1 = 0;
		ТекЗначение2 = 0;
		ПоказательРассчитан = Ложь;
		ВыборкаТЧ = Выборка.РасчетныеДанные.Выгрузить();
		Для каждого ТекСтрокаФин Из ВыборкаТЧ Цикл
			Если Не ТипЗнч(ТекСтрокаФин.Источник) = Тип("ПланСчетовСсылка.Учетный") Тогда
				Продолжить;			
			КонецЕсли;
			НайденныеСтроки = ВыборкаДанныеСчетов.НайтиСтроки(Новый Структура("Счет, ВидОстатка", ТекСтрокаФин.Источник, ТекСтрокаФин.ВидОстатка));
			Для каждого ТекСтрока Из НайденныеСтроки Цикл
				Если ТекСтрокаФин.ТипДанных = Оборот Тогда
					ТекЗначение1 = ТекЗначение1 + ТекСтрока.Оборот;
				Иначе
					ТекЗначение1 = ТекЗначение1 + ТекСтрока.СуммаНачало;
					ТекЗначение2 = ТекЗначение2 + ТекСтрока.СуммаКонец;
				КонецЕсли;
			КонецЦикла;
			ПоказательРассчитан = Истина;
		КонецЦикла;
		
		Если ПоказательРассчитан Тогда
			МассивПоказателей.Добавить(Выборка.Ссылка);		
		КонецЕсли;
		
		НоваяЗапись = РегистрыСведений.сабЗначенияФинПоказателей.СоздатьМенеджерЗаписи();
		НоваяЗапись.Сценарий = Сценарий1;
		НоваяЗапись.Показатель = Выборка.Ссылка;
		НоваяЗапись.Предприятие = Предприятие;
		НоваяЗапись.Период = Период1.ДатаНачала;
		НоваяЗапись.Значение = ТекЗначение1;
		НоваяЗапись.Записать();
		
		НоваяЗапись = РегистрыСведений.сабЗначенияФинПоказателей.СоздатьМенеджерЗаписи();
		НоваяЗапись.Сценарий = Сценарий1;
		НоваяЗапись.Показатель = Выборка.Ссылка;
		НоваяЗапись.Предприятие = Предприятие;
		НоваяЗапись.Период = Период1.ДатаОкончания;
		НоваяЗапись.Значение = ТекЗначение2;
		НоваяЗапись.Записать();
		
	КонецЦикла;
	
	//расчитываем относительные показатели
	Суммовой = Перечисления.сабСуммСред.Сумма;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	сабФинансовыеПоказатели.Ссылка КАК Показатель,
	               |	СУММА(ЕСТЬNULL(сабЗначенияФинПоказателей.Значение, 0)) КАК ЗначениеСумм,
	               |	СРЕДНЕЕ(ЕСТЬNULL(сабЗначенияФинПоказателей.Значение, 0)) КАК ЗначениеСред,
	               |	сабФинансовыеПоказатели.ПоказыватьНаФорме КАК ПоказыватьНаФорме,
	               |	сабФинансовыеПоказатели.РасчетПромежуточныхЗначений КАК РасчетПромежуточныхЗначений
	               |ИЗ
	               |	Справочник.сабФинансовыеПоказатели КАК сабФинансовыеПоказатели
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.сабЗначенияФинПоказателей КАК сабЗначенияФинПоказателей
	               |		ПО сабФинансовыеПоказатели.Ссылка = сабЗначенияФинПоказателей.Показатель
	               |			И (сабЗначенияФинПоказателей.Период МЕЖДУ &ДатаНачала И &ДатаОкончания)
	               |			И (сабЗначенияФинПоказателей.Сценарий = &Сценарий)
	               |			И (сабЗначенияФинПоказателей.Предприятие = &Предприятие)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	сабФинансовыеПоказатели.Ссылка,
	               |	сабФинансовыеПоказатели.ПоказыватьНаФорме,
	               |	сабФинансовыеПоказатели.РасчетПромежуточныхЗначений";
	
	Запрос.УстановитьПараметр("Сценарий", Сценарий1);
	Запрос.УстановитьПараметр("ДатаНачала", Период1.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", Период1.ДатаОкончания);
	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	
	Результат = Запрос.Выполнить();
	ВыборкаЗначенияПоказателей = Результат.Выгрузить();
	
	Для каждого ТекСтрока Из ВыборкаЗначенияПоказателей Цикл
		Если НЕ ТекСтрока.РасчетПромежуточныхЗначений = Суммовой Тогда
			ТекСтрока.ЗначениеСумм = ТекСтрока.ЗначениеСред;
		КонецЕсли;
	КонецЦикла;
	
	Выборка = РезультатСтатьи.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не МассивПоказателей.Найти(Выборка.Ссылка) = Неопределено Тогда
			Продолжить;		
		КонецЕсли;
		
		ТекЗначение1 = 0;
		ВыборкаТЧ = Выборка.РасчетныеДанные.Выгрузить();
		Для каждого ТекСтрокаФин Из ВыборкаТЧ Цикл
			Если Не ТипЗнч(ТекСтрокаФин.Источник) = Тип("СправочникСсылка.сабФинансовыеПоказатели") Тогда
				Продолжить;			
			КонецЕсли;
			НайденныеСтроки = ВыборкаЗначенияПоказателей.НайтиСтроки(Новый Структура("Показатель", ТекСтрокаФин.Источник));
			Для каждого ТекСтрока Из НайденныеСтроки Цикл
				ТекЗначение1 = ТекЗначение1 + ТекСтрока.ЗначениеСумм;
			КонецЦикла;
		КонецЦикла;
		
		ТекЗначение2 = 0;
		ЕстьЗнаменатель = Ложь;
		ВыборкаТЧЗнаменатели = Выборка.РасчетныеДанныеЗнаменатель.Выгрузить();
		Для каждого ТекСтрокаФин Из ВыборкаТЧЗнаменатели Цикл
			Если Не ТипЗнч(ТекСтрокаФин.Источник) = Тип("СправочникСсылка.сабФинансовыеПоказатели") Тогда
				Продолжить;			
			КонецЕсли;
			НайденныеСтроки = ВыборкаЗначенияПоказателей.НайтиСтроки(Новый Структура("Показатель", ТекСтрокаФин.Источник));
			Для каждого ТекСтрока Из НайденныеСтроки Цикл
				ТекЗначение2 = ТекЗначение2 + ТекСтрока.ЗначениеСумм;
			КонецЦикла;
			ЕстьЗнаменатель = Истина;
		КонецЦикла;

		НоваяЗапись = РегистрыСведений.сабЗначенияФинПоказателей.СоздатьМенеджерЗаписи();
		НоваяЗапись.Сценарий = Сценарий1;
		НоваяЗапись.Показатель = Выборка.Ссылка;
		НоваяЗапись.Предприятие = Предприятие;
		НоваяЗапись.Период = Период1.ДатаНачала;
		НоваяЗапись.Значение = ?(ЕстьЗнаменатель, Формат(?(ТекЗначение2, ТекЗначение1 / ТекЗначение2, 0), "ЧДЦ=2"), ТекЗначение1);
		НоваяЗапись.Записать();
		
		НоваяЗапись = РегистрыСведений.сабЗначенияФинПоказателей.СоздатьМенеджерЗаписи();
		НоваяЗапись.Сценарий = Сценарий1;
		НоваяЗапись.Показатель = Выборка.Ссылка;
		НоваяЗапись.Предприятие = Предприятие;
		НоваяЗапись.Период = Период1.ДатаОкончания;
		НоваяЗапись.Значение = ?(ЕстьЗнаменатель, Формат(?(ТекЗначение2, ТекЗначение1 / ТекЗначение2, 0), "ЧДЦ=2"), ТекЗначение1);
		НоваяЗапись.Записать();

	КонецЦикла;
		
КонецПроцедуры


&НаКлиенте
Процедура Настройка(Команда)
	ОткрытьФорму("Справочник.сабФинансовыеПоказатели.Форма.ФормаСписка");
КонецПроцедуры

