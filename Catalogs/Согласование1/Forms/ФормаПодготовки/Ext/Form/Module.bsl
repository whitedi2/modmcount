&НаСервере
Процедура ВыполненоСервер()
	
	НачатьТранзакцию();
	
	//добавляем комментарии в историю переписки
	БП = Объект.БизнесПроцесс.ПолучитьОбъект();
	Объект.Комментарии = Строка(ТекущаяДата()) + ": " + ПараметрыСеанса.ТекущийПользователь + " отправил(а) заявку:
		|" + Комментарий;
	БП.Комментарии = БП.Комментарии + ?(ПустаяСтрока(БП.Комментарии), "", "
		|") + Объект.Комментарии;
	
	
	//делаем несогласованных непройденными при повторном согласовании	
	Для каждого ТекСтрока Из ДопСогласование Цикл
		Если ТекСтрока.Пройден И НЕ текСтрока.Согласовано Тогда
			ТекСтрока.Пройден = 0;		
		КонецЕсли;	
	КонецЦикла; 
	ТЗ = ДопСогласование.Выгрузить();
	БП.ДопСогласование.Загрузить(ТЗ);
	ТЗИсполнение = ДопИсполнение.Выгрузить();
	БП.ДопИсполнение.Загрузить(ТЗИсполнение);
	//БП.МаршрутЗаявки = МаршрутЗаявки;
	БП.Описание = Объект.Описание;
	БП.ОснованиеЗаблокирован = Истина;
	БП.Записать();
	
	
	БПСервер.ВыполнитьЗадачу(Объект.Ссылка, 0, "", Комментарий);
	
	//БПСервер.ИзменитьСостояниеДокумента(Объект.Заявка, Ложь, Истина); //Истина - делаем документ заявка недоступным
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьИЗакрыть(Команда)
	
	Если НЕ ДопСогласование.Количество() Тогда
		Если Вопрос("Не выбран маршрут заявки! Вы уверены, что хотите отправить заявку без маршрута (только на проверку ОФК)?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Элементы.Группа2.ТекущаяСтраница = Элементы.Группа4;
			Возврат;
		Конецесли;
	КонецЕсли;
	
	ИсполнительВведенКорректно = ПроверитьКорректностьИсполнителя();
	
	Если Не ИсполнительВведенКорректно Тогда
		Возврат;
	КонецЕсли;	
	
	//Если Записать() Тогда
		Если Не БПСервер.ПроверкаЗадачи(Объект.Ссылка) Тогда
			ВыполненоСервер();
			ОповеститьОбИзменении(Объект.Ссылка);
			Оповестить("ОбновитьСписокЗадач");
			Закрыть();
		КонецЕсли;
	//КонецЕсли;
	
	БПСервер.ЗаписатьДействиеПользователяВЛог(Объект.Ссылка, "ОтправитьИЗакрыть");
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	БПСтру = БюджетныйНаСервере.ВернутьРеквизиты(Объект.БизнесПроцесс, "Комментарии, Описание, ОснованиеЗаблокирован");
	ТЗ = Объект.БизнесПроцесс.ДопСогласование.Выгрузить();
	ДопСогласование.Загрузить(ТЗ);
	
	Для каждого ТекСтрока Из ДопСогласование Цикл
		ТекСтрока.ТипАдресации = ТипЗнч(ТекСтрока.СубъектСогласования);	
	КонецЦикла;
	
	ТЗИсполнение = Объект.БизнесПроцесс.ДопИсполнение.Выгрузить();
	ДопИсполнение.Загрузить(ТЗИсполнение);
	
	//МассивПользователей = БПСервер.ПолучитьМассивПользователей();
	Если НЕ БПСервер.ТекПользовательИсполнительЗадачи(Объект.Ссылка) Тогда
		Элементы.ФормаОтправитьИЗакрыть.Видимость = 0;
	КонецЕсли;
	
	
	
	Объект.Комментарии = БПСтру.Комментарии;
	Объект.Описание = БПСтру.Описание;
	Элементы.РазрешитьРедактирование.Видимость = БПСтру.ОснованиеЗаблокирован;
	
	
КонецПроцедуры


&НаКлиенте
Процедура ДопСогласованиеПередУдалением(Элемент, Отказ)
		ТекСтрока = Элементы.ДопСогласование.ТекущиеДанные;
		Если ТекСтрока.Согласовано Тогда
			Предупреждение("Невозможно удалить строку, т.к. субъект " + Строка(ТекСтрока.СубъектСогласования) + " уже согласовал заявку.");
			Отказ = Истина;
		ИначеЕсли НЕ ТекСтрока.Автор = БюджетныйНаСервере.ПолучитьПользователя() Тогда
			//Если ПустаяСтрока(ТекСтрока.Автор) Тогда
			//	Предупреждение("Невозможно удалить строку, т.к. тип заявки требует согласование с указанным рецензентом.");		
			//Иначе
			//	Предупреждение("Невозможно удалить строку, т.к. ее добавил пользователь " + ТекСтрока.Автор  + ".");		
			//КонецЕсли;		
			//Отказ = Истина;
		КонецЕсли;
КонецПроцедуры

 
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЭтаФорма.ЗаблокироватьДанныеФормыДляРедактирования();		
	БПСервер.ЗаписатьДействиеПользователяВЛог(Объект.Ссылка, "ПриОткрытии");
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьСогласования()
	Для каждого ТекСтрока Из ДопСогласование Цикл
		ТекСтрока.Пройден = 0;	
		ТекСтрока.Согласовано = 0;
	КонецЦикла; 
КонецПроцедуры

Процедура ЗаписатьИзм()
	БП = Объект.БизнесПроцесс.ПолучитьОбъект();
	ТЗ = ДопСогласование.Выгрузить();
	БП.ДопСогласование.Загрузить(ТЗ);
	БП.ОснованиеЗаблокирован = Ложь;
	БП.Записать();
КонецПроцедуры
 
&НаКлиенте
Процедура РазрешитьРедактирование(Команда)
	Если Вопрос("Разрешение редактирования заявки автоматически отменяет все согласования по ней.
		|Вы уверены, что хотите редактировать заявку?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да  Тогда
		БюджетныйНаСервере.ПрисвоитьРеквизит(Объект.Заявка, "Доступность", 0);
		ПриСозданииНаСервере(Ложь, Истина);
		//ПриОткрытии(0);
		ОтменитьСогласования();
		ЗаписатьИзм();
	КонецЕсли; 
КонецПроцедуры


&НаКлиенте
Процедура ДопСогласованиеПередНачаломИзменения(Элемент, Отказ)
	ТекСтрока = Элементы.ДопСогласование.ТекущиеДанные;
	Если ТекСтрока.Пройден ИЛИ НЕ ТекСтрока.Автор = БюджетныйНаСервере.ПолучитьПользователя() И НЕ ПустаяСтрока(ТекСтрока.СубъектСогласования) Тогда
		Предупреждение("Невозможно редактирование строки.");		
		Отказ = Истина;
	КонецЕсли;
	
	//Если Элемент.ТекущийЭлемент.Имя = "ДопСогласованиеРезультирующееСогласование"  Тогда
	//	Если НЕ УСУК(ТекСтрока.СубъектСогласования) Тогда
	//		Отказ = Истина;		
	//	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

 

&НаКлиенте
Процедура ДопСогласованиеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекСтрока = Элементы.ДопСогласование.ТекущиеДанные;
	ТекСтрока.Автор = БюджетныйНаСервере.ПолучитьПользователя();
КонецПроцедуры

&НаСервере
Процедура ДобавитьМаршрут(ВыбранныйМаршрут)
	
	Для каждого ТекСтрока Из ВыбранныйМаршрут.МаршрутЗаявки Цикл
		НоваяСтрока = ДопСогласование.Добавить();	
	    НоваяСтрока.Автор = БюджетныйНаСервере.ПолучитьПользователя();;
		Если ТипЗнч(ТекСтрока.СубъектСогласования) = Тип("СправочникСсылка.Пользователи") Тогда
			НоваяСтрока.СубъектСогласования = ТекСтрока.СубъектСогласования;
		Иначе
			//Если ТекСтрока.СубъектСогласования = Справочники.Д_Должности.Директор ИЛИ ТекСтрока.СубъектСогласования = Справочники.Д_Должности.Дивизионер Тогда
			//	Если ТекСтрока.СубъектСогласования = Справочники.Д_Должности.Директор Тогда
			//		Должность = "Директор";
			//	Иначе
			//		Должность = "Дивизионер";				
			//	КонецЕсли;
			//	НоваяСтрока.СубъектСогласования = Объект.Предприятие[Должность];
			//	Если ПустаяСтрока(НоваяСтрока.СубъектСогласования) Тогда
			//		ДопСогласование.Удалить(НоваяСтрока);					
			//	КонецЕсли;
			//Иначе
				ДопСогласование.Удалить(НоваяСтрока);
			//КонецЕсли;			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
  

//&НаКлиенте
//Процедура МаршрутЗаявкиПриИзменении(Элемент)
//	Если НЕ ПустаяСтрока(МаршрутЗаявки) Тогда
//		ДобавитьМаршрут(ВыбранныйМаршрут);
//	КонецЕсли; 

//КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	ОткрытьФормумодально("Справочник.Пользователи.ФормаВыбора", Новый Структура("РежимВыбора, РасширенныйПодбор, ЗакрыватьПриВыборе", Истина, Истина, Ложь),Элементы.ДопСогласование); 
КонецПроцедуры

&НаКлиенте
Процедура ДопСогласованиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Если Копирование Тогда
		Отказ = Истина;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДопСогласованиеСубъектСогласованияПриИзменении(Элемент)
	ТекПользователь = Элементы.ДопСогласование.ТекущиеДанные.СубъектСогласования;
	Если НЕ ПустаяСтрока(ТекПользователь) И Не Элементы.ДопСогласование.ТекущиеДанные.РезультирующееСогласование Тогда
		Элементы.ДопСогласование.ТекущиеДанные.РезультирующееСогласование = БюджетныйНаСервере.ВернутьРеквизит(ТекПользователь, "РезультирующееСогласование");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьМаршрут(Команда)
	ВыбранныйМаршрут = ОткрытьФормуМодально("Справочник.Д_МаршрутыЗаявки.ФормаВыбора");
	МассивПользователей = ПолучитьПОьзователейМаршрута(ВыбранныйМаршрут);
	Если НЕ ВыбранныйМаршрут = Неопределено Тогда
		МассивПредприятий = Новый Массив;
		МассивПредприятий.Добавить(БюджетныйНаСервере.ВернутьРеквизиты(Объект.Заявка, "Предприятие").Предприятие);
		БюджетныйНаКлиенте.ДобавитьМаршрут(МассивПользователей, ДопСогласование, "СубъектСогласования", МассивПредприятий);	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьПОьзователейМаршрута(ВыбранныйМаршрут)

	Возврат ВыбранныйМаршрут.МаршрутЗаявки.ВыгрузитьКолонку("СубъектСогласования");	

КонецФункции // ()

&НаКлиенте
Процедура ЗаявкаОплачена(Команда)
	Объект.Комментарии = "Не согласовано";
	Объект.Выполнена = Истина;
	Если Не БПСервер.ПроверкаЗадачи(Объект.Ссылка) Тогда
		//ВыполненоСервер(Истина, Истина, Объект.Исполнитель);
		БПСервер.ВыполнитьКомандуЗадачиБП(Объект.Ссылка, Команда.Имя, ПолучитьСтруктуруРеквизитовФормы());
		ОповеститьОбИзменении(Объект.Ссылка);
		Оповестить("ОбновитьСписокЗадач");
		Закрыть();
	КонецЕсли;
	
	БПСервер.ЗаписатьДействиеПользователяВЛог(Объект.Ссылка, "ОзнакомитьсяИЗавершитьБП");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруРеквизитовФормы()
	Возврат БПСервер.ПолучитьСтруктуруРеквизитовФормы(ЭтаФорма);
КонецФункции

Процедура ВыполненоСерверЗавершитьБП()
	
	НачатьТранзакцию();
	
	//добавляем комментарии в историю переписки
	ТекБП = Объект.БизнесПроцесс.ПолучитьОбъект();
	ТекБП.ДатаЗавершения = ТекущаяДата();
	ТекБП.Завершен = Истина;
	ТекБП.НеСогласовано = Истина;
	ТекБП.ОснованиеЗаблокирован = Истина;
	ТекБП.Записать();
	
	ТекЗаявка = Объект.Заявка.ПолучитьОбъект();
	ТекЗаявка.УстановитьПометкуУдаления(Истина);
	ТекЗаявка.Записать();
	БПСервер.ОповеститьОНеутвержденииДокумента(Объект.Заявка, Объект.БизнесПроцесс);
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаКлиенте
Процедура ДопИсполнениеПередНачаломИзменения(Элемент, Отказ)
	
	ТекСтрока = Элементы.ДопИсполнение.ТекущиеДанные;
	Если ТекСтрока.Пройдено Тогда
		Предупреждение("Невозможно редактирование строки.");		
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДопИсполнениеПередУдалением(Элемент, Отказ)
	
	ТекСтрока = Элементы.ДопИсполнение.ТекущиеДанные;
	Если ТекСтрока.Исполнено Или ТекСтрока.Пройдено Тогда
		Предупреждение("Невозможно удалить строку.");
		Отказ = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДопИсполнениеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекСтрока = Элементы.ДопИсполнение.ТекущиеДанные;
	ТекСтрока.Автор = БюджетныйНаСервере.ПолучитьПользователя();
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьКорректностьИсполнителя()	
		
	Если БПСервер.ИспользуетсяМеханизмЧастичнойОплаты(Объект.Предприятие) Тогда
		Если ДопИсполнение.НайтиСтроки(Новый Структура("РольПользователя", "РешениеОбОплате")) = Неопределено И ДопИсполнение.НайтиСтроки(Новый Структура("РольПользователя", ПредопределенноеЗначение("Справочник.РолиИсполнителей.РешениеОбОплате"))) = Неопределено Тогда
			сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(
			ЭтотОбъект,
			"Не указана роль исполнителя ""Решение об оплате""",
			"ДопИсполнение",
			ДопИсполнение.Количество(),
			"Исполнитель");
			Возврат Ложь;
		КонецЕсли;
		Если ДопИсполнение.НайтиСтроки(Новый Структура("РольПользователя", "ДопПроверка")) = Неопределено И ДопИсполнение.НайтиСтроки(Новый Структура("РольПользователя", ПредопределенноеЗначение("Справочник.РолиИсполнителей.ДопПроверка"))) = Неопределено Тогда
			сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(
			ЭтотОбъект,
			"Не указана роль исполнителя ""Дополнительная проверка""",
			"ДопИсполнение",
			ДопИсполнение.Количество(),
			"Исполнитель");
			Возврат Ложь;
		КонецЕсли;
		Если ДопИсполнение.НайтиСтроки(Новый Структура("РольПользователя", "ИсполнительОплаты")) = Неопределено И ДопИсполнение.НайтиСтроки(Новый Структура("РольПользователя", ПредопределенноеЗначение("Справочник.РолиИсполнителей.ИсполнительОплаты"))) = Неопределено Тогда
			сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(
			ЭтотОбъект,
			"Не указана роль исполнителя ""Исполнитель оплаты""",
			"ДопИсполнение",
			ДопИсполнение.Количество(),
			"Исполнитель");
			Возврат Ложь;
		КонецЕсли;	
	ИначеЕсли БПСервер.МеханизмСНесколькимиИсполнителями(Объект.Предприятие) Тогда
		Если ДопИсполнение.НайтиСтроки(Новый Структура("РольПользователя", ПредопределенноеЗначение("Справочник.РолиИсполнителей.ИсполнительОплаты"))) = Неопределено Тогда
			сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(
			ЭтотОбъект,
			"Не указана роль исполнителя ""Исполнитель оплаты""",
			"ДопИсполнение",
			ДопИсполнение.Количество(),
			"Исполнитель");
			Возврат Ложь;
		КонецЕсли;	
	Иначе	
		Если ДопИсполнение.Количество() = 0 Тогда
			сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(
			ЭтотОбъект,
			"Не указан исполнитель оплаты.",
			"ДопИсполнение",
			ДопИсполнение.Количество(),
			"Исполнитель");
			Возврат Ложь;
		КонецЕсли;
		Если ДопИсполнение.Количество() > 1 Тогда
			сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(
			ЭтотОбъект,
			"Исполнитель оплаты должен быть один.",
			"ДопИсполнение",
			ДопИсполнение.Количество(),
			"Исполнитель");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	

