&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Объект.ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПараметрКоманды = Объект.Заявка;
		
		БП = БПСервер.ПоискБП("Согласование1", ПараметрКоманды);
		Если НЕ БП = Неопределено Тогда
			Если БюджетныйНаСервере.ВернутьРеквизит(БП, "Стартован") Тогда
				Если БюджетныйНаСервере.ВернутьРеквизит(БП, "ОснованиеЗаблокирован") Тогда
					ПоказатьПредупреждение(Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект), "Бизнес-процесс согласования уже запущен.");
					Отказ = Истина;
					Возврат;
				КонецЕсли;
				//Иначе
				//	ОткрытьФорму(БПСервер.ПолучитьПолноеИмяФормы(БП), Новый Структура("Ключ", БП));
				//	Возврат;
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если ОбщегоНазначенияПовтИсп.ЭтоБазаСпирт() И Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.КонтрольСогласованияОФК = Истина;
	КонецЕсли;	
	
	//Элементы.ПроверкаПодотчетчиков.Видимость = ВидимостьКнопкиПроверкиПодотчетчиков(Объект.Заявка);
	БюджетныйНаКлиенте.ФормаТолькоПросмотр(Объект, ЭтаФорма, Объект.Стартован И Объект.ОснованиеЗаблокирован, Истина);
	//Если Объект.ТолькоИсполнение Тогда
	//	Элементы.Согласование.Видимость = Ложь;
	//	Элементы.КонтролироватьИсполнение.Видимость = Ложь;
	//КонецЕсли;
	ОбновитьЗаголовки();
	СрочностьПроцессаПриИзменении(Неопределено);
	СтандартныйМаршрутПриИзменении(Неопределено);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ОбщийСрок = БюджетныйНаСервере.ВернутьРеквизит(Объект.Заявка, "ДатаОплаты");
	КонецЕсли;
	
	//Элементы.КонтрольСогласованияОФК.Видимость = БюджетныйНаСервере.ВернутьРеквизит(БюджетныйНаСервере.ВернутьРеквизит(Объект.Заявка, "Предприятие"), "НеКонтролироватьОФК");
	
	//суперБОБ на Финансиста З или предприятие Офис
	ТекИмяПольз = БюджетныйНаСервере.ВернутьРеквизит(БюджетныйНаСервере.ПолучитьПользователя(), "Наименование");
	//Если (ТекИмяПольз = "Финансист З") Тогда //Или (ТекИмяПольз = "Финансист Офис") Тогда
	//	Элементы.СтандартныйМаршрут.Доступность = Ложь;	
	//	Элементы.ЗаполнитьМаршрутИзСтарого.Доступность = Ложь;
	//КонецЕсли;
	
	БюджетныйНаКлиенте.ПоказатьСтарыйМаршрут(Элементы, МаршрутЗаявкиОснования);
	//ЗаполнитьМаршрутИзСтарогоСервер();
	
	ВариантСогласованияПриИзменении(Неопределено);
	
	Если ЕстьПравоУстановкиРезультирующего() Тогда
		Элементы.ДопСогласованиеРезультирующееСогласование.ТолькоПросмотр = Ложь;
		Элементы.ДопСогласованиеРезультирующееСогласование.Доступность = Истина;
	КонецЕсли;
	
	//Если БПСервер.ИспользуетсяМеханизмЧастичнойОплаты(Объект.Предприятие) Или БПСервер.МеханизмСНесколькимиИсполнителями(Объект.Предприятие) Тогда
	//	Элементы.ДопИсполнениеРольПользователя.Видимость = Истина;
	//	Элементы.Декорация3.Видимость = Ложь;
	//КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(ДополнительныеПараметры) Экспорт
	
	Отказ = Истина;

КонецПроцедуры

&НаСервере
Процедура ДобавитьМаршрут(ВыбранныйМаршрут)
	
	Для каждого ТекСтрока Из ВыбранныйМаршрут.МаршрутЗаявки Цикл
		НоваяСтрока = Объект.ДопСогласование.Добавить();	
	    НоваяСтрока.Автор = БюджетныйНаСервере.ПолучитьПользователя();;
		Если ТипЗнч(ТекСтрока.СубъектСогласования) = Тип("СправочникСсылка.Пользователи") ИЛИ ТипЗнч(ТекСтрока.СубъектСогласования) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
			НоваяСтрока.СубъектСогласования = ТекСтрока.СубъектСогласования;
		Иначе
			//Если ТекСтрока.СубъектСогласования = Справочники.Д_Должности.Директор ИЛИ ТекСтрока.СубъектСогласования = Справочники.Д_Должности.Дивизионер Тогда
			//	Если ТекСтрока.СубъектСогласования = Справочники.Д_Должности.Директор Тогда
			//		Должность = "Директор";
			//	Иначе
			//		Должность = "Дивизионер";				
			//	КонецЕсли;
			//	НоваяСтрока.СубъектСогласования = Объект.Предприятие[Должность];
			//	Если ПустаяСтрока(НоваяСтрока.СубъектСогласования) Тогда
			//		Объект.ДопСогласование.Удалить(НоваяСтрока);					
			//	КонецЕсли;
			//КонецЕсли;			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
  
&НаКлиенте
Процедура Подбор(Команда)
	ВыбранныйМаршрут = ОткрытьФормуМодально("Справочник.Д_МаршрутыЗаявки.ФормаВыбора");
	Если НЕ ВыбранныйМаршрут = Неопределено Тогда
		ДобавитьМаршрут(ВыбранныйМаршрут);	
	КонецЕсли;
КонецПроцедуры


&НаСервере
Функция ПроверитьНаличиеБП()
    Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СогласованиеОбщее.Ссылка
	|ИЗ
	|	Справочник.СогласованиеОбщее КАК СогласованиеОбщее
	|ГДЕ
	|	СогласованиеОбщее.Заявка = &Заявка";
	
	Запрос.УстановитьПараметр("Заявка", Объект.Заявка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество() Тогда
		Сообщить("По данному основанию уже есть запущеный бизнес-процесс. Старт невозможен.");
	КонецЕсли;
	Возврат Выборка.Количество();
КонецФункции // ()

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Объект.Наименование = "Согласование и оплата " + Строка(Объект.Заявка);;
	
	// если это заявка по сырью
	Если ЗаявкаПоСырью(Объект.Заявка) Тогда
		УчетчикПредприятия = ПолучитьУчетчикаПредприятия(Объект.Заявка, Объект.Дата);
		// переадресация на учетчика сырья
		СтрУчПр = Объект.ДопСогласование.НайтиСтроки(Новый Структура("СубъектСогласования", УчетчикПредприятия));
		Если СтрУчПр.Количество() Тогда
			УчетчикНеВСети = ОпределитьСтатусУчетчикаПредприятия(СтрУчПр[0].СубъектСогласования);
			Если УчетчикНеВСети Тогда
				УчПР = СтрУчПр[0].СубъектСогласования;
				СтрУчПр[0].СубъектСогласования = ПолучитьУчетчикаСырья(); 
				Сообщить("Пользователь "+ Строка(УчПР) +" будет заменен на пользователя " + Строка(СтрУчПр[0].СубъектСогласования) + " в связи с его отсутствием.");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	Если НЕ БюджетныйНаСервере.РольАдминаДоступнаСервер() Тогда
		Если ПроверитьНаличиеБП() Тогда
			Отказ = Истина;	
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// неактуальный алгоритм вставки ОФК в начало {
	//Если Не ОбщегоНазначенияПовтИсп.ЭтоБазаСпирт() Тогда
	//	ПроверитьНаСоответствиеБюджету();
	//Иначе
	//	ЗаменитьПлатонову();
	//КонецЕсли;
	//}
	
	// новый алгоритм обращение № 637 ОФК в самом начале при проверке бюджета{
	//СотрудникОФК = БПСервер.ПолучитьКонстантуНаСервере("СотрудникОФК");
	//НоваяСтрока = Объект.ДопСогласование.Вставить(0);
	//НоваяСтрока.СубъектСогласования = СотрудникОФК;
	//}
	
	Если Объект.ВариантСогласования = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Смешанно") Тогда
		ТрансформируемСложныйМаршрутВПлоский();
	КонецЕсли;
	
	
	Если БПСервер.ИспользуетсяМеханизмЧастичнойОплаты(Объект.Предприятие) Тогда
		Для Каждого СтрокаИсполнения Из Объект.ДопИсполнение Цикл
			Если (СтрокаИсполнения.РольПользователя = "РешениеОбОплате" Или СтрокаИсполнения.РольПользователя = ПредопределенноеЗначение("Справочник.РолиИсполнителей.РешениеОбОплате")) И Объект.ДопИсполнение.Количество() >= 1 Тогда
				Объект.ДопИсполнение.Сдвинуть(Объект.ДопИсполнение.Индекс(СтрокаИсполнения), -Объект.ДопИсполнение.Индекс(СтрокаИсполнения));
			ИначеЕсли (СтрокаИсполнения.РольПользователя = "ДопПроверка" Или СтрокаИсполнения.РольПользователя = ПредопределенноеЗначение("Справочник.РолиИсполнителей.ДопПроверка")) И Объект.ДопИсполнение.Количество() >= 2 Тогда
				Объект.ДопИсполнение.Сдвинуть(Объект.ДопИсполнение.Индекс(СтрокаИсполнения), 1-Объект.ДопИсполнение.Индекс(СтрокаИсполнения));
			ИначеЕсли (СтрокаИсполнения.РольПользователя = "ИсполнительОплаты" Или СтрокаИсполнения.РольПользователя = ПредопределенноеЗначение("Справочник.РолиИсполнителей.ИсполнительОплаты")) И Объект.ДопИсполнение.Количество() >= 3 Тогда
				Объект.ДопИсполнение.Сдвинуть(Объект.ДопИсполнение.Индекс(СтрокаИсполнения), 2-Объект.ДопИсполнение.Индекс(СтрокаИсполнения));
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
	Если БПСервер.МеханизмСНесколькимиИсполнителями(Объект.Предприятие) Тогда
		Для Каждого СтрокаИсполнения Из Объект.ДопИсполнение Цикл
			Если СтрокаИсполнения.РольПользователя = ПредопределенноеЗначение("Справочник.РолиИсполнителей.ИсполнительОплаты") И Объект.ДопИсполнение.Количество() >= 1 Тогда
				Объект.ДопИсполнение.Сдвинуть(Объект.ДопИсполнение.Индекс(СтрокаИсполнения), Объект.ДопИсполнение.Количество() - Объект.ДопИсполнение.Индекс(СтрокаИсполнения) - 1);
			КонецЕсли;
		КонецЦикла;
	Иначе // исполнитель в заявке и бизнес-процессе должны совпадать, берем исполнителя из бизнес-процесса
		
		
		
	КонецЕсли;
	
	ДозаполнитьРолиСогласователей();
	
	Если Не ПараметрыЗаписи.Свойство("ПроверятьСогласованностьЗаявок") И ТипЗнч(Объект.Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") Тогда
		
		//проверка на согласованность заявок на оплату
		
		ЗаявкиНаСогласовании = ПолучитьСписокЗаявокНаСогласовании(ЗаявкиПоРеестру(Объект.Заявка));
		Если ЗаявкиНаСогласовании.Количество() Тогда
			Отказ = Истина;
			ТекстВопроса = "Реестр содержит стартованные но несогласованные Заявки на оплату:";
			Для Каждого ТекНесоглЗаявка Из ЗаявкиНаСогласовании Цикл
				ТекстВопроса = ТекстВопроса + "
				|" + Строка(ТекНесоглЗаявка.Заявка) + " на согласовании " + Строка(ТекНесоглЗаявка.Исполнитель);
			КонецЦикла;
			ТекстВопроса = ТекстВопроса + "
			|В случае продолжения данные заявки согласуются автоматически текущим пользователем. Продолжить?";
			ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗаписьюЗавершение1", ЭтаФорма), ТекстВопроса, РежимДиалогаВопрос.ДаНет);			
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаявкиПоРеестру(Реестр)
	
	МассивЗаявок = Новый Массив;
	Для каждого ТекСтрока Из Реестр.ЗаявкаБезнал Цикл
		
		Если ЗначениеЗаполнено(ТекСтрока.ЗаявкаНаФинансирование) Тогда
			МассивЗаявок.Добавить(ТекСтрока.ЗаявкаНаФинансирование);
		КонецЕсли;
	КонецЦикла;
	Возврат МассивЗаявок;
	
КонецФункции
	
&НаСервереБезКонтекста
Функция ПолучитьСписокЗаявокНаСогласовании(МассивЗаявок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Задача.Ссылка КАК Ссылка,
	               |	Задача.Заявка КАК Заявка,
	               |	Д_ТекущаяЗадача.Исполнители КАК Исполнитель
	               |ИЗ
	               |	Справочник.Задача КАК Задача
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Д_ТекущаяЗадача КАК Д_ТекущаяЗадача
	               |		ПО Задача.Заявка = Д_ТекущаяЗадача.Документ
	               |ГДЕ
	               |	Задача.Заявка В(&Заявки)
	               |	И Задача.ТочкаМаршрута = &ТочкаМаршрута
	               |	И Задача.Выполнена = ЛОЖЬ
	               |	И Задача.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Заявки", МассивЗаявок);
	Запрос.УстановитьПараметр("ТочкаМаршрута", Перечисления.СогласованиеОбщееТочкиМаршрута.Действие2);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	МассивЗаявокНаСогласовании = Новый Массив;
	Пока Выборка.Следующий() Цикл
		МассивЗаявокНаСогласовании.Добавить(Новый Структура("Заявка, Исполнитель", Выборка.Заявка, Выборка.Исполнитель));	
	КонецЦикла;
	
	Возврат МассивЗаявокНаСогласовании;

КонецФункции
	
&НаКлиенте
Процедура ПередЗаписьюЗавершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Записать(Новый Структура("ПроверятьСогласованностьЗаявок", Ложь));;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДозаполнитьРолиСогласователей()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	РолиИсполнителей.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РолиИсполнителей КАК РолиИсполнителей
	|ГДЕ
	|	РолиИсполнителей.РольПоУмолчанию = ИСТИНА";
	
	Запрос.УстановитьПараметр("", );
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Для каждого ТекСтрока Из Объект.ДопСогласование Цикл
			Если Не ЗначениеЗаполнено(ТекСтрока.РольПользователя) Тогда
				ТекСтрока.РольПользователя = Выборка.Ссылка;
			КонецЕсли;
		КонецЦикла; 	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТрансформируемСложныйМаршрутВПлоский()
	//трансформируем дерево в ТЧ
		МасивСтрокСогл = Новый Массив;
		Для каждого ТекСтрока Из Объект.ДопСогласование Цикл
			МасивСтрокСогл.Добавить(ТекСтрока);	
		КонецЦикла;
		МасивСтрокИсп = Новый Массив;
		Для каждого ТекСтрока Из Объект.ДопИсполнение Цикл
			МасивСтрокИсп.Добавить(ТекСтрока);	
		КонецЦикла;
		МассивСтрокОзн = Новый Массив;
		Для каждого ТекСтрока Из Объект.ДопОповещение Цикл
			МассивСтрокОзн.Добавить(ТекСтрока);	
		КонецЦикла;
		
		ТекЭлементы = МаршрутДерево.ПолучитьЭлементы();
		Для каждого ТекЭлемент Из ТекЭлементы Цикл
			ДобавитьУровеньНаЗапись(ТекЭлемент.ПолучитьЭлементы(), ТекЭлемент.Пользователь);	
		КонецЦикла;
		
		Для каждого ТекСтрока Из МасивСтрокСогл Цикл
			Объект.ДопСогласование.Удалить(ТекСтрока);	
		КонецЦикла; 
		Для каждого ТекСтрока Из МасивСтрокИсп Цикл
			Объект.ДопИсполнение.Удалить(ТекСтрока);	
		КонецЦикла; 
		Для каждого ТекСтрока Из МассивСтрокОзн Цикл
			Объект.ДопОповещение.Удалить(ТекСтрока);	
		КонецЦикла; 
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьУровеньНаЗапись(ТекЭлементы,  ТекТЧ)
	Для каждого ТекЭл Из ТекЭлементы Цикл
		Если ТекЭл.ПолучитьЭлементы().Количество() Тогда
			ДобавитьУровеньНаЗапись(ТекЭл.ПолучитьЭлементы(), ТекТЧ);	
		Иначе
			Если ТекТЧ = "Согласование" Тогда
				
				НоваяСтрока = Объект.ДопСогласование.Добавить();
				НайденныеСтроки = Объект.ДопСогласование.НайтиСтроки(Новый Структура("СубъектСогласования",  ТекЭл.Пользователь));
				Для каждого ТекНайденнаяСтрока Из НайденныеСтроки Цикл
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекНайденнаяСтрока);
				КонецЦикла; 
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекЭл);
				НоваяСтрока.СубъектСогласования = ТекЭл.Пользователь;
				
				
			ИначеЕсли ТекТЧ = "Исполнение" Тогда
				НоваяСтрока = Объект.ДопИсполнение.Добавить();
				НайденныеСтроки = Объект.ДопИсполнение.НайтиСтроки(Новый Структура("Исполнитель",  ТекЭл.Пользователь));
				Для каждого ТекНайденнаяСтрока Из НайденныеСтроки Цикл
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекНайденнаяСтрока);
				КонецЦикла; 
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекЭл);
				НоваяСтрока.Исполнитель = ТекЭл.Пользователь;
			Иначе
				НоваяСтрока = Объект.ДопОповещение.Добавить();
				НайденныеСтроки = Объект.ДопОповещение.НайтиСтроки(Новый Структура("Пользователь",  ТекЭл.Пользователь));
				Для каждого ТекНайденнаяСтрока Из НайденныеСтроки Цикл
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекНайденнаяСтрока);
				КонецЦикла; 
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекЭл);
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Пересчитать");
	Оповестить("ОбновитьСписокЗадач");
	Оповестить("сабОбноватьПлатежныйКалендарь");
	ОповеститьОбИзменении(Объект.Заявка);
	АдресХранилищаМаршрута = Неопределено;
КонецПроцедуры        

&НаКлиенте
Процедура ЗаполнитьСложныйМаршрутНаКлиенте()
	
	//заполнение маршрута с группировками
	Если Объект.ВариантСогласования = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Смешанно") Тогда
		ЗаполнитьСложныйМаршрут();
		сабБПКлиентСервер.РазвернутьГруппировкиДерева(Элементы, МаршрутДерево);
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьСложныйМаршрут()
	
	//очищаем тек маршрут
	Тек = МаршрутДерево.ПолучитьЭлементы();
	Тек.Очистить();
	
	ТекМассМаршрутов = Новый Массив;
	
	//Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда //опрашиваем автомаршруты при открытии заполненного нового
	//	Для каждого ТекСтрока Из Объект.ДопСогласование Цикл
	//		Если ЗначениеЗаполнено(ТекСтрока.МаршрутДвижения) И ТекМассМаршрутов.Найти(ТекСтрока.МаршрутДвижения) = Неопределено Тогда
	//			ТекМассМаршрутов.Добавить(ТекСтрока.МаршрутДвижения);
	//		КонецЕсли;
	//	КонецЦикла; 
	//КонецЕсли;
	
	Если НЕ ТекМассМаршрутов.Количество() Тогда
		///для формирования дерева маршрута (неоптимально, двойной запрос маршрутов, ну да пох)
		ТекМассМаршрутов.Добавить(Объект);
	КонецЕсли;
	
	Для каждого ТекМаршрутСтрока Из ТекМассМаршрутов Цикл
		сабБПКлиентСервер.ДобавитьДеревоМаршрута(Элементы, Команды, ТекущаяСтрокаГруппы, МаршрутДерево, ТекМаршрутСтрока, УсловноеОформление, Новый Структура("ДопУсловияВидимость, ВремяНаВыполнение, ДоступенТипПользователи, ГруппаИИсполнителей", Ложь, Истина, Истина, Объект.ДопИсполнение.Количество() > 1) );
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПодборМаршрута1(Команда)
	ВыбранныйМаршрут = ОткрытьФормуМодально("Справочник.Д_МаршрутыЗаявки.ФормаВыбора");
	Если НЕ ВыбранныйМаршрут = Неопределено Тогда
		ДобавитьМаршрут(ВыбранныйМаршрут);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодборПользователя1(Команда)
	ОткрытьФормумодально("Справочник.Пользователи.ФормаВыбора", Новый Структура("РежимВыбора, РасширенныйПодбор, ЗакрыватьПриВыборе", Истина, Истина, Ложь),Элементы.ДопСогласование); 
КонецПроцедуры

&НаКлиенте
Процедура ПодборПользователя2(Команда)
	ОткрытьФормумодально("Справочник.Пользователи.ФормаВыбора", Новый Структура("РежимВыбора, РасширенныйПодбор, ЗакрыватьПриВыборе", Истина, Истина, Ложь),Элементы.ДопИсполнение); 
КонецПроцедуры



&НаКлиенте
Процедура ПодборПользователя3(Команда)
	ОткрытьФормумодально("Справочник.Пользователи.ФормаВыбора", Новый Структура("РежимВыбора, РасширенныйПодбор, ЗакрыватьПриВыборе", Истина, Истина, Ложь),Элементы.ДопОповещение); 
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовки()
	//Элементы.Согласование.Заголовок = "Согласование";
	КоличествоПользователей1 = Объект.ДопСогласование.Количество();
	//Если Объект.ДопСогласование.Количество() Тогда
	//	Элементы.Согласование.Заголовок = Элементы.Согласование.Заголовок + " (" + Объект.ДопСогласование.Количество() + ")";	
	//КонецЕсли;
	
	//Элементы.Исполнение.Заголовок = "Исполнение";
	КоличествоПользователей2 = Объект.ДопИсполнение.Количество();
	//Если Объект.ДопИсполнение.Количество() Тогда
	//	Элементы.Исполнение.Заголовок = Элементы.Исполнение.Заголовок + " (" + Объект.ДопИсполнение.Количество() + ")";	
	//КонецЕсли;
	
	//Элементы.Группа1.Заголовок = "Ознакомление";
	КоличествоПользователей3 = Объект.ДопОповещение.Количество();
	//Если Объект.ДопОповещение.Количество() Тогда
	//	Элементы.Группа1.Заголовок = Элементы.Группа1.Заголовок + " (" + Объект.ДопОповещение.Количество() + ")";	
	//КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ДопСогласованиеПослеУдаления(Элемент)
		ОбновитьЗаголовки();
КонецПроцедуры


&НаКлиенте
Процедура ДопИсполнениеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
		ОбновитьЗаголовки();

КонецПроцедуры


&НаКлиенте
Процедура ДопИсполнениеПослеУдаления(Элемент)
		ОбновитьЗаголовки();

КонецПроцедуры


&НаКлиенте
Процедура ДопОповещениеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
		ОбновитьЗаголовки();

КонецПроцедуры


&НаКлиенте
Процедура ДопОповещениеПослеУдаления(Элемент)
		ОбновитьЗаголовки();

КонецПроцедуры


&НаКлиенте
Процедура ДопСогласованиеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекСтрока = Элементы.ДопСогласование.ТекущиеДанные;
	Если НЕ ТекСтрока = Неопределено Тогда
		
		ТекСтрока.Автор = БюджетныйНаСервере.ПолучитьПользователя();
		
	КонецЕсли;
	
	//Объект.ДопСогласование.Сортировать("РезультирующееСогласование Возр, НомерСтроки Возр");
	УстановитьПерсональныеСроки();
	ОбновитьЗаголовки();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьСтатусУчетчикаПредприятия(Уч)
	
	СеансыИнформационнойБазы = ПолучитьСеансыИнформационнойБазы();
	ТекПользователиМассив = Новый Массив;
	Для Каждого СеансИБ Из СеансыИнформационнойБазы Цикл
		ТекПользователиМассив.Добавить(СеансИБ.Пользователь.Имя);
	КонецЦикла;
	
	Если НЕ ТекПользователиМассив.Найти(Уч.Наименование) = Неопределено Тогда
		Возврат Ложь;                  
	Иначе
		Возврат Истина;                      
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция  ПолучитьУчетчикаСырья()
	Возврат Справочники.Пользователи.ПустаяСсылка();	//нужно исправить!!! на основную должость предприятия
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьУчетчикаПредприятия(Заявка, Дата)
	
	ТекСотрудник = БПСервер.ПолучитьСотрудникаПоОсновнойДолжности(Заявка.Предприятие, Перечисления.ОсновныеДолжностиПредприятия.Учетчик);
	
	Возврат ТекСотрудник;
	
КонецФункции	

&НаСервереБезКонтекста
Функция ЗаявкаПоСырью(Заявка)
	
	ПоСырью = Ложь;	
	Возврат ПоСырью;
	
КонецФункции	

&НаКлиенте
Процедура СрочностьПроцессаПриИзменении(Элемент)
	Если Строка(Объект.СрочностьПроцесса) = "Несрочный" Тогда
		Объект.ОбщийСрок = Дата('00010101000000');
		Элементы.ОбщийСрок.Доступность = Ложь;
	ИначеЕсли Строка(Объект.СрочностьПроцесса) = "Нормальный" Тогда
		Объект.ОбщийСрок = ТекущаяДата() + 60*60*6;
		Элементы.ОбщийСрок.Доступность = Ложь;
	ИначеЕсли Строка(Объект.СрочностьПроцесса) = "Срочный" Тогда
		Объект.ОбщийСрок = ТекущаяДата() + 60*60*3;
		Элементы.ОбщийСрок.Доступность = Ложь;
	ИначеЕсли Строка(Объект.СрочностьПроцесса) = "Немедленный" Тогда
		Объект.ОбщийСрок = ТекущаяДата() + 60*60;
		Элементы.ОбщийСрок.Доступность = Ложь;
	Иначе
		Для каждого ТекСтрока Из Объект.ДопСогласование Цикл
			ТекСтрока.СрокВыполнения = Дата('00010101000000');		
		КонецЦикла; 
		Элементы.ОбщийСрок.Доступность = Истина;
	КонецЕсли;
	УстановитьПерсональныеСроки();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПерсональныеСроки()

	//Если Элементы.ОбщийСрок.Доступность = Ложь Тогда
		РазницаДат = Объект.ОбщийСрок - ТекущаяДата();
		ТекСрок = ТекущаяДата();
		Для каждого ТекСтрока Из Объект.ДопСогласование Цикл
			ТекСрок = ТекСрок +  + РазницаДат / Объект.ДопСогласование.Количество();
			ТекСтрока.СрокВыполнения = ?(ЗначениеЗаполнено(Объект.ОбщийСрок), ТекСрок, Дата('00010101000000'));		
		КонецЦикла; 	
	//КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ДопСогласованиеСрокВыполненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекСтруктураДаты = ОткрытьФормуМодально("ОбщаяФорма.ФормаВыбораДатыИВремени");
	Если НЕ ТекСтруктураДаты = Неопределено Тогда
		Элементы.ДопСогласование.ТекущиеДанные.СрокВыполнения = ТекСтруктураДаты;
		Если Элементы.ДопСогласование.ТекущиеДанные.СрокВыполнения > Объект.ОбщийСрок Тогда
			Предупреждение("Персональный срок выполнения не может превышать общий срок выполнения бизнес-процесса!");
			Элементы.ДопСогласование.ТекущиеДанные.СрокВыполнения = Объект.ОбщийСрок;
		ИначеЕсли  ТекСтруктураДаты < ТекущаяДата() + 15 * 60 Тогда
			Предупреждение("Слишком короткий срок!");
			Элементы.ДопСогласование.ТекущиеДанные.СрокВыполнения = ТекущаяДата() + 15 * 60;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДопСогласованиеСрокВыполненияПриИзменении(Элемент)
КонецПроцедуры

&НаКлиенте
Процедура ОбщийСрокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекСтруктураДаты = ОткрытьФормуМодально("ОбщаяФорма.ФормаВыбораДатыИВремени");
	Если НЕ ТекСтруктураДаты = Неопределено Тогда
		Если ТекСтруктураДаты < ТекущаяДата() + 15 * 60 Тогда
			Предупреждение("Слишком короткий срок!");
			Возврат;
		КонецЕсли;
		Объект.ОбщийСрок = ТекСтруктураДаты;
		УстановитьПерсональныеСроки();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтандартныйМаршрутПриИзменении(Элемент)
	Элементы.Группа2.ТолькоПросмотр = Объект.СтандартныйМаршрут;
	Элементы.ДопСогласованиеГруппа1.Доступность = 1 - Объект.СтандартныйМаршрут;
	Элементы.ДопСогласованиеГруппа3.Доступность = 1 - Объект.СтандартныйМаршрут;
	Элементы.СтандартныйМаршрут.Доступность = Объект.СтандартныйМаршрут;
	Элементы.ВариантСогласования.Доступность = НЕ Объект.СтандартныйМаршрут;
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПодотчетчиков(Команда)
	ТабДок = Новый ТабличныйДокумент;
	МассивЗаявок = новый Массив;
	МассивЗаявок.Добавить(ЭтаФорма.Объект.Заявка);
	ПечатьПодотчетчиков(ТабДок, МассивЗаявок);
	
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Ложь;
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.ОтображатьЗаголовки = Истина;
	ТабДок.ОтображатьГруппировки = Истина;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДок.АвтоМасштаб = Истина;
	ФормаПечати = ПолучитьФорму("ОбщаяФорма.ФормаПечатиДокумента");
	ФормаПечати.ТабДок = ТабДок;
	ФормаПечати.Открыть();
КонецПроцедуры

&НаСервере
Процедура ПечатьПодотчетчиков(ТабДок, МассивЗаявок)
	Документы.Д_ЗаявкаНаОплату.ПроверкаЗадолженности(ТабДок, МассивЗаявок);
КонецПроцедуры

&НаСервере
Функция ВидимостьКнопкиПроверкиПодотчетчиков(Заявка)
	
	Если ТипЗнч(Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") и Заявка.ТипИсточника = Перечисления.Д_ИсточникиСредств.Нал тогда
		если Заявка.ЗаявкаБезнал.Итог("ВыдачаВПодотчет") > 0 тогда //есть хоть один подотчетчик
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьМаршрутИзСтарого(Команда)
	Если ЗначениеЗаполнено(МаршрутЗаявкиОснования) Тогда
		Если Вопрос("Внимание! Данные текущего запроса будут заменены. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			ЗаполнитьМаршрутИзСтарогоСервер();
			СтандартныйМаршрутПриИзменении(Неопределено);
		КонецЕсли;
	Иначе
		Предупреждение("Не найден маршрут-основание!");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМаршрутИзСтарогоСервер()
	
	Если Не ЗначениеЗаполнено(МаршрутЗаявкиОснования) ИЛИ НЕ ТипЗнч(МаршрутЗаявкиОснования) = Тип("СправочникСсылка.Согласование1") Тогда
		Возврат;	
	КонецЕсли;
	
	Для каждого ТЧ Из МаршрутЗаявкиОснования.Метаданные().ТабличныеЧасти Цикл
		
		Если ТЧ.Имя = "ДопСогласование" Тогда
			КолвоСтрок = Объект[ТЧ.Имя].Количество();
			
			Для ОбрИнд = 1 По КолвоСтрок Цикл
				
				Если Объект[ТЧ.Имя][КолвоСтрок - ОбрИнд].Обязателен Тогда
					Продолжить;
				КонецЕсли;
				
				Объект[ТЧ.Имя].Удалить(КолвоСтрок - ОбрИнд);
			КонецЦикла;
			
		Иначе	
			Объект[ТЧ.Имя].Очистить();
		КонецЕсли;
		
		Для каждого ТекСтрока Из МаршрутЗаявкиОснования[ТЧ.Имя] Цикл
			
			Если ТЧ.Имя = "ДопСогласование" И Объект[ТЧ.Имя].НайтиСтроки(Новый Структура("СубъектСогласования", ТекСтрока.СубъектСогласования)).Количество() Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Объект[ТЧ.Имя].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			
			//боб1
			Если ТЧ.Имя = "ДопСогласование" Тогда
				НоваяСтрока.Согласовано = Ложь;
				НоваяСтрока.Пройден = Ложь;
				НоваяСтрока.Пользователь = "";
				НоваяСтрока.Комментарии = "";
				НоваяСтрока.Автор = ПараметрыСеанса.ТекущийПользователь;
				НоваяСтрока.ДатаВыполнения = Дата('00010101000000');
			КонецЕсли;
			
			//боб2
			Если ТЧ.Имя = "ДопОповещение" Тогда
				НоваяСтрока.Оповещен = Ложь;
			КонецЕсли;

			//боб3
			Если ТЧ.Имя = "ДопИсполнение" Тогда
				НоваяСтрока.Исполнено = Ложь;
				НоваяСтрока.Пройдено = Ложь;
				НоваяСтрока.Пользователь = "";
				НоваяСтрока.Комментарии = "";
				НоваяСтрока.Автор = ПараметрыСеанса.ТекущийПользователь;
				НоваяСтрока.ПринятоКИсполнению = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Объект.СтандартныйМаршрут = Ложь;
	ЗаполнитьСложныйМаршрут();	

КонецПроцедуры

&НаСервере
Процедура ПроверитьНаСоответствиеБюджету()
	
	Если (Не ОбщегоНазначенияПовтИсп.ЭтоБазаСпирт()) И Не Объект.КонтрольСогласованияОФК Тогда 
		Возврат;
	КонецЕсли;
		
	//СотрудникОФК = ПолучитьОФК();
	СотрудникОФК = Справочники.Согласование1.ПолучитьСотрудникаОФК(Объект.Заявка);
	
	ПолныйПросмотрЛимитов = сабОбщегоНазначения.ПолучитьЗначениеСвойства(ПараметрыСеанса.ТекущийПользователь, ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПривилегированныйПросмотрЛимитов);

	Если ПолныйПросмотрЛимитов = Истина Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	РезультатЗапросаПоЛимитам = Документы.Д_ЗаявкаНаОплату.РасчитатьЛимиты(Объект.Заявка);
	Выборка = РезультатЗапросаПоЛимитам.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ОсталосьПоСтатье < 0 Тогда 
			//проверим статью
			//Если Выборка.СтатьяДДС.Родитель = Справочники.СтатьиДвиженияДенежныхСредств.РасходыВХ Или Выборка.СтатьяДДС.Доход Тогда
			//	Продолжить;
			//КонецЕсли;	
			СтрокиСОФК = Объект.ДопСогласование.НайтиСтроки(Новый Структура("СубъектСогласования", СотрудникОФК));
			Если СтрокиСОФК.Количество() = 0 Тогда
				НоваяСтрока = Объект.ДопСогласование.Вставить(0);
				НоваяСтрока.СубъектСогласования = СотрудникОФК;
			Иначе
				НомерСтроки = СтрокиСОФК[0].НомерСтроки;
				Объект.ДопСогласование.Сдвинуть(НомерСтроки - 1, - (НомерСтроки - 1));
			КонецЕсли;	
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ВариантСогласованияПриИзменении(Элемент)
	СложныйМаршрут = Объект.ВариантСогласования = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Смешанно");
	Элементы.Согласование.Видимость = НЕ СложныйМаршрут;
	Элементы.Исполнение.Видимость = НЕ СложныйМаршрут;
	Элементы.Группа1.Видимость = НЕ СложныйМаршрут;
	//Элементы.Группа8.Видимость = НЕ СложныйМаршрут;
	Элементы.НовыйВидМаршрута.Видимость = СложныйМаршрут;
	
	Если СложныйМаршрут Тогда
		ЗаполнитьСложныйМаршрутНаКлиенте();
	КонецЕсли;
КонецПроцедуры

///////////////////////////////генерирование дерева маршрутов///////////////////////
#Область ГенерированиеДереваМаршрутов
	
&НаКлиенте
Процедура Реквизит1ПередНачаломИзменения(Элемент, Отказ)
	Если Элемент.ТекущиеДанные.Пользователь = "Согласование" ИЛИ Элемент.ТекущиеДанные.Пользователь = "Исполнение" ИЛИ Элемент.ТекущиеДанные.Пользователь = "Ознакомление" Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если Элемент.ТекущиеДанные.Пользователь = "Группа И" ИЛИ Элемент.ТекущиеДанные.Пользователь = "Группа ИЛИ" Тогда
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТиповС = Новый ОписаниеТипов(Массив);
		Элементы.Колонка1.ОграничениеТипа = ОписаниеТиповС;
		
		Элементы.Колонка1.РежимВыбораИзСписка = Истина;
		ТекСписок = Новый СписокЗначений;
		Элементы.Колонка1.СписокВыбора.Добавить("Группа И");
		Элементы.Колонка1.СписокВыбора.Добавить("Группа ИЛИ");
	КонецЕсли;
	//Элементы.Колонка1.ВыбиратьТип = Ложь;
	//Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Пользователь) Тогда
	//	Элемент.ТекущиеДанные.Пользователь = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	//КонецЕсли;
	
	Если Элемент.ТекущиеДанные.Обязателен И Не БюджетныйНаСервере.РольАдминаДоступнаСервер() Тогда
		Сообщить("Cубъект согласования " + Строка(Элемент.ТекущиеДанные.Пользователь) + " обязателен в маршруте! Редактирование невозможно!");
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Реквизит1ПриАктивизацииСтроки(Элемент)
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		Если ТипЗнч(Элемент.ТекущиеДанные.Пользователь) = Тип("Строка") Тогда
			ТекущаяСтрокаГруппы = Элемент.ТекущиеДанные.ИдГруппы;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Реквизит1ПередУдалением(Элемент, Отказ)
	Если Элемент.ТекущиеДанные.Пользователь = "Согласование" ИЛИ Элемент.ТекущиеДанные.Пользователь = "Исполнение" ИЛИ Элемент.ТекущиеДанные.Пользователь = "Ознакомление" Тогда
		Отказ = Истина;	
	КонецЕсли;
	Если Элемент.ТекущиеДанные.Обязателен И Не БюджетныйНаСервере.РольАдминаДоступнаСервер() Тогда
		Сообщить("Cубъект согласования " + Строка(Элемент.ТекущиеДанные.Пользователь) + " обязателен в маршруте! Удаление невозможно!");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГруппу(Команда)
	
	Элементы.Колонка1.СписокВыбора.Очистить();
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив);
	Элементы.Колонка1.ОграничениеТипа = ОписаниеТиповС;

	
	Элементы.ТаблицаФормы123.ДобавитьСтроку();
	//Элементы.ТаблицаФормы123.ТекущиеДанные.Пользователь = "";
	Элементы.Колонка1.РежимВыбораИзСписка = Истина;
	ТекСписок = Новый СписокЗначений;
	Элементы.Колонка1.СписокВыбора.Добавить("Группа И");
	Элементы.Колонка1.СписокВыбора.Добавить("Группа ИЛИ");
КонецПроцедуры

&НаКлиенте
Процедура Реквизит1ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Элементы.Колонка1.СписокВыбора.Очистить();
	Элементы.Колонка1.РежимВыбораИзСписка = Ложь;
	Если Элемент.ТекущиеДанные.Пользователь = "Группа И" ИЛИ Элемент.ТекущиеДанные.Пользователь = "Группа ИЛИ" Тогда
		Элемент.ТекущиеДанные.ЭтоГруппа = Истина;
		ТекущаяСтрокаГруппы = Новый УникальныйИдентификатор;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.ИДГруппы) Тогда
		Элемент.ТекущиеДанные.ИДГруппы = ТекущаяСтрокаГруппы;
	КонецЕсли;
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.Пользователи"));
	Массив.Добавить(Тип("СправочникСсылка.ГруппыПользователей"));
	//Массив.Добавить(Тип("ПеречислениеСсылка.ОсновныеДолжностиПредприятия"));
	//Массив.Добавить(Тип("СправочникСсылка.Д_Должности"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив);
	
	Элементы.Колонка1.ОграничениеТипа = ОписаниеТиповС;
	
	
	Уровень = 0;
	ТекЭлемент = Элемент.ТекущиеДанные.ПолучитьРодителя();
	Пока НЕ ТекЭлемент = Неопределено Цикл
		Уровень = Уровень + 1;
		ТекЭлемент = ТекЭлемент.ПолучитьРодителя();
	КонецЦикла;
	Элемент.ТекущиеДанные.Уровень = Уровень;
	
	Если Уровень = 1 Тогда
		Элемент.ТекущиеДанные.ТипГруппы = "Группа И";
	Иначе
		ТекРодитель = Элемент.ТекущиеДанные.ПолучитьРодителя();
		Если НЕ ТекРодитель = Неопределено Тогда
			Элемент.ТекущиеДанные.ТипГруппы = ТекРодитель.Пользователь;
		КонецЕсли;
	КонецЕсли;
	
	//работа с ТЧ
	//УстановитьИдСтроки(Элемент);
	

КонецПроцедуры

&НаКлиенте
Процедура Реквизит1ПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если НЕ Копирование Тогда
		Если НЕ ТипЗнч(Элемент.ТекущиеДанные.Пользователь) =  Тип("Строка") Тогда
			Отказ = Истина;
			Элемент.ТекущаяСтрока = МаршрутДерево.НайтиПоИдентификатору(Элемент.ТекущаяСтрока).ПолучитьРодителя().ПолучитьИдентификатор();
			Элемент.ДобавитьСтроку();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Реквизит1ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НЕ Элементы.Колонка1.ОграничениеТипа.СодержитТип(Тип("Строка")) Тогда
		
		Если Элементы.ТаблицаФормы123.ТекущиеДанные.Пользователь = Неопределено Тогда
			Элементы.ТаблицаФормы123.ТекущиеДанные.Пользователь  = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Реквизит1ДопСогласованиеСубъектСогласованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ Элементы.Колонка1.ОграничениеТипа.СодержитТип(Тип("Строка")) Тогда
		СтандартнаяОбработка = Ложь;
		ТекущийПользователь = ?(Элементы.ТаблицаФормы123.ТекущиеДанные = Неопределено,
		Неопределено, Элементы.ТаблицаФормы123.ТекущиеДанные.Пользователь);
		ВыбратьПользователей(ТекущийПользователь, Элемент);
	КонецЕсли	
КонецПроцедуры

&НаКлиенте
Процедура Реквизит1ДопИсполнениеСубъектСогласованияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СформироватьДанныеВыбораПользователя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Реквизит1ДопУсловияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОткрытьФормуМодально("Справочник.МаршрутыДвиженияЗаявок.Форма.ФормаДопУсловий", Новый Структура("ИД", Элемент.Родитель.ТекущиеДанные.ИДСтроки), ЭтаФорма);

КонецПроцедуры

&НаКлиенте                                                                     
Процедура Реквизит1Перетаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	а = 1;
	ЗначениеКуда = МаршрутДерево.НайтиПоИдентификатору(Строка);
	ЗначениеЧто = МаршрутДерево.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);	
	Если НЕ ЗначениеКуда.ИдГруппы = Элемент.ТекущиеДанные.ИдГруппы Тогда
		Вставка = Ложь;
		Если НЕ ТипЗнч(ЗначениеКуда.Пользователь) = Тип("Строка") Тогда
			Вставка = Истина;
			Пока НЕ ТипЗнч(ЗначениеКуда.Пользователь) = Тип("Строка") Цикл
				ЗначениеКуда = ЗначениеКуда.ПолучитьРодителя();			
			КонецЦикла;		
		КонецЕсли;
		
		Элемент.ТекущиеДанные.ИдГруппы = ЗначениеКуда.ИдГруппы;
		Уровень = 1; //т.к. получаем родителя у группы
		ТекЭлемент = ЗначениеКуда.ПолучитьРодителя();
		Пока НЕ ТекЭлемент = Неопределено Цикл
			Уровень = Уровень + 1;
			ТекЭлемент = ТекЭлемент.ПолучитьРодителя();
		КонецЦикла;
		Элемент.ТекущиеДанные.Уровень = Уровень;
		
		Если Уровень = 1 Тогда
			Элемент.ТекущиеДанные.ТипГруппы = "Группа И";
		Иначе
			Элемент.ТекущиеДанные.ТипГруппы = ЗначениеКуда.Пользователь;
		КонецЕсли;
		
		ЭлементыКуда = ЗначениеКуда.ПолучитьЭлементы();
		//Если Вставка Тогда
		//	НовыйЭлемент = ЭлементыКуда.Вставить(МаршрутДерево.НайтиПоИдентификатору(Строка).ПолучитьИдентификатор());
		//Иначе
		НовыйЭлемент = ЭлементыКуда.Добавить();
		//КонецЕсли;
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элемент.ТекущиеДанные);
		
		РодительЧто = ЗначениеЧто.ПолучитьРодителя();
		РодительЧто.ПолучитьЭлементы().Удалить(ЗначениеЧто);
		
	КонецЕсли;

	//Элемент.ТекущаяСтрока = Строка;                                              
	//Если НЕ ТипЗнч(Элемент.ТекущиеДанные.Пользователь) =  Тип("Строка") Тогда
	//	СтандартнаяОбработка = Ложь;
	//КонецЕсли;
КонецПроцедуры

#КонецОбласти 

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	//выполняем заявки на оплату
	БПСервер.ВыполнитьЗадачиИсполненияЗаявокаОплату(Объект.Заявка, "Автовыполнение при старте оплаты Реестра");
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутЗаявкиОснованияНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(МаршрутЗаявкиОснования) Тогда
		Если Вопрос("Внимание! Данные текущего запроса будут заменены. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			ЗаполнитьМаршрутИзСтарогоСервер();
			СтандартныйМаршрутПриИзменении(Неопределено);
		КонецЕсли;
	Иначе
		Предупреждение("Не найден маршрут-основание!");
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьПравоУстановкиРезультирующего()
	
	Если сабОбщегоНазначения.ПолучитьЗначениеСвойства(БюджетныйНаСервере.ПолучитьПользователя(), "Право установки результирующего согласования") = Истина Тогда
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции	

#Область УниверсальныйВыборПользователя

&НаКлиенте
Процедура ВыбратьПользователей(ТекущийПользователь, Элемент)
		
	//Если ЗначениеЗаполнено(ТекущийПользователь)
	//   И (    ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.Пользователи")
	//      ИЛИ ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.ГруппыПользователей") ) Тогда
	//	
	//	ВыборИПодборВнешнихПользователей = Ложь;
	//	
	////ИначеЕсли ИспользоватьВнешнихПользователей
	////        И ЗначениеЗаполнено(ТекущийПользователь)
	////        И (    ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.ВнешниеПользователи")
	////           ИЛИ ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") ) Тогда
	////
	////	ВыборИПодборВнешнихПользователей = Истина;
	//Иначе
	//	ПоказатьВыборТипаПользователиИлиВнешниеПользователи(
	//		Новый ОписаниеОповещения("ВыбратьПользователейЗавершение", ЭтотОбъект, Новый Структура("Элемент", Элемент)));
	//	Возврат;
	//КонецЕсли;
	
	ВыбратьПользователейЗавершение(Ложь, Элемент, ТекущийПользователь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВыборТипаПользователиИлиВнешниеПользователи(ОбработкаПродолжения)
	
	ВыборИПодборВнешнихПользователей = Ложь;
	
	//Если ИспользоватьВнешнихПользователей Тогда
	//	
	//	СписокТиповПользователей.ПоказатьВыборЭлемента(
	//		Новый ОписаниеОповещения(
	//			"ПоказатьВыборТипаПользователиИлиВнешниеПользователиЗавершение",
	//			ЭтотОбъект,
	//			ОбработкаПродолжения),
	//		НСтр("ru = 'Выбор типа данных'"),
	//		СписокТиповПользователей[0]);
	//Иначе
		ВыполнитьОбработкуОповещения(ОбработкаПродолжения, ВыборИПодборВнешнихПользователей);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПользователейЗавершение(ВыборИПодборВнешнихПользователей, Элемент, ТекущийПользователь = Неопределено) Экспорт
	
	Если ВыборИПодборВнешнихПользователей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ТекущаяСтрока", ?(
		Элементы.ДопСогласование.ТекущиеДанные = Неопределено,
		?(ТекущийПользователь = Неопределено, Неопределено, ТекущийПользователь),
		Элементы.ДопСогласование.ТекущиеДанные.СубъектСогласования));
	
	Если ВыборИПодборВнешнихПользователей Тогда
		ПараметрыФормы.Вставить("ВыборГруппВнешнихПользователей", Истина);
	Иначе
		ПараметрыФормы.Вставить("ВыборГруппПользователей", Истина);
	КонецЕсли;
	
	Если ВыборИПодборВнешнихПользователей Тогда
		
		ОткрытьФорму(
			"Справочник.ВнешниеПользователи.ФормаВыбора",
			ПараметрыФормы,
			Элемент);
	Иначе
		ОткрытьФорму(
			"Справочник.Пользователи.ФормаВыбора",
			ПараметрыФормы,
			Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьДанныеВыбораПользователя(Текст)
	
	Возврат Пользователи.СформироватьДанныеВыбораПользователя(Текст);
	
КонецФункции

&НаКлиенте
Процедура ДопСогласованиеСубъектСогласованияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СформироватьДанныеВыбораПользователя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДопСогласованиеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Элементы.ДопСогласование.ТекущиеДанные.СубъектСогласования = Неопределено Тогда
		Элементы.ДопСогласование.ТекущиеДанные.СубъектСогласования  = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		//Элементы.ГруппыПрав.ТекущиеДанные.НомерКартинки = -1;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ДопИсполнениеСубъектСогласованияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СформироватьДанныеВыбораПользователя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДопИсполнениеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Элементы.ДопИсполнение.ТекущиеДанные.Исполнитель = Неопределено Тогда
		Элементы.ДопИсполнение.ТекущиеДанные.Исполнитель  = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДопОповещениеСубъектСогласованияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СформироватьДанныеВыбораПользователя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДопОповещениеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Элементы.ДопОповещение.ТекущиеДанные.Пользователь = Неопределено Тогда
		Элементы.ДопОповещение.ТекущиеДанные.Пользователь  = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДопСогласованиеСубъектСогласованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущийПользователь = ?(Элементы.ДопСогласование.ТекущиеДанные = Неопределено,
	Неопределено, Элементы.ДопСогласование.ТекущиеДанные.СубъектСогласования);
	ВыбратьПользователей(ТекущийПользователь, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДопИсполнениеИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущийПользователь = ?(Элементы.ДопИсполнение.ТекущиеДанные = Неопределено,
	Неопределено, Элементы.ДопИсполнение.ТекущиеДанные.Исполнитель);
	ВыбратьПользователей(ТекущийПользователь, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДопОповещениеПользовательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущийПользователь = ?(Элементы.ДопОповещение.ТекущиеДанные = Неопределено,
	Неопределено, Элементы.ДопОповещение.ТекущиеДанные.Пользователь);
	ВыбратьПользователей(ТекущийПользователь, Элемент);
КонецПроцедуры


#КонецОбласти 


&НаКлиенте
Процедура ДопСогласованиеПередНачаломИзменения(Элемент, Отказ)
	Если Элементы.ДопСогласование.ТекущиеДанные.Обязателен И Не БюджетныйНаСервере.РольАдминаДоступнаСервер() Тогда
		Сообщить("Cубъект согласования " + Строка(Элемент.ТекущиеДанные.СубъектСогласования) + " обязателен в маршруте! Редактирование невозможно!");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ДопСогласованиеПередУдалением(Элемент, Отказ)
	Если Элементы.ДопСогласование.ТекущиеДанные.Обязателен И Не БюджетныйНаСервере.РольАдминаДоступнаСервер() Тогда
		Сообщить("Cубъект согласования " + Строка(Элемент.ТекущиеДанные.СубъектСогласования) + " обязателен в маршруте! Удаление невозможно!");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры


