////////////////////////////////////////
// Обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Список.Параметры.УстановитьЗначениеПараметра("МассивДоступныхПользователей", БюджетныйНаСервере.ПолучитьПользователя());
	
	Если Параметры.Свойство("Владелец") Тогда
		
		Владелец = Параметры.Владелец;
		Список.Отбор.Элементы.Очистить();
		НовыйОтбор = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Владелец");
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		НовыйОтбор.ПравоеЗначение = Владелец;
		
		АвтоЗаголовок = Ложь;
		Заголовок = "Прикрепленные объекты: " + Строка(Владелец);
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		
		
	ИначеЕсли Параметры.Свойство("ВладелецБезОтбора") Тогда
		
		Список.Отбор.Элементы.Очистить();
		
		МассивВладельцев = Новый Массив;
		МассивВладельцев.Добавить(Владелец);
		МассивВладельцев.Добавить(Параметры.ВладелецБезОтбора.ВладелецФайла);
		Если Параметры.Свойство("ЗаявкаНаФинансирование") Тогда
			МассивВладельцев.Добавить(Параметры.ЗаявкаНаФинансирование);
		КонецЕсли;
		
		НовыйОтбор = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Владелец");
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		НовыйОтбор.ПравоеЗначение = Параметры.ВладелецБезОтбора.ВладелецФайла;
		
		НовыйОтбор = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВладелецИмяТЧ");
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		НовыйОтбор.ПравоеЗначение = Параметры.ВладелецБезОтбора.ИмяТЧ;
		
		НовыйОтбор = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВладелецСтрокаТЧ");
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		НовыйОтбор.ПравоеЗначение = Параметры.ВладелецБезОтбора.НомерСтрокиТЧ;
		
		Заголовок = "Прикрепленные объекты: " + Строка(Параметры.ВладелецБезОтбора.ВладелецФайла);
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		
	КонецЕсли;	
	
	//УстановитьДоступностьМеню();	
		
	Если Параметры.Свойство("СписокФайлов") Тогда		
		НовыйОтбор = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект");
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		НовыйОтбор.ПравоеЗначение = Параметры.СписокФайлов;
	КонецЕсли;
	
	Если Параметры.Свойство("ПараметрыОтправки") Тогда
		ПараметрыОтправки = Параметры.ПараметрыОтправки;
	Иначе
		ПараметрыОтправки = РаботаСФайламиСлужебный.ПодготовитьСтруктуруПараметровОтправки();
	КонецЕсли;

	ВозможностьРедактированияИзАвтомаршрута = БПСервер.ТекПользовательИсполнительДокумента(Владелец, Ложь);
	УстановитьДоступностьМеню(Ложь, Ложь, ВозможностьРедактированияИзАвтомаршрута);
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьМеню(ФайлДоступен, ФайлНовый, ВозможностьРедактированияИзАвтомаршрута)
	
	Если Параметры.Свойство("Владелец") ИЛИ ЗначениеЗаполнено(Владелец) Тогда
		
		Владелец = ?(Не ЗначениеЗаполнено(Владелец), Параметры.Владелец, Владелец);
		ЗапрещеноПрикреплятьОбъекты = РегистрыСведений.ПрикрепленныеОбъекты.ПроверитьВладельца(Владелец, Ложь, ВозможностьРедактированияИзАвтомаршрута);
		
		//Элементы.ФормаПодобратьДокумент.Доступность = Не ЗапрещеноПрикреплятьОбъекты;
		//Элементы.ФормаПодобратьФайл.Доступность = Не ЗапрещеноПрикреплятьОбъекты;
		//Элементы.ФормаСоздатьФайл.Доступность	  = Не ЗапрещеноПрикреплятьОбъекты;
		//Элементы.Изменить.Доступность	          = Не ЗапрещеноПрикреплятьОбъекты ИЛИ ФайлНовый;
		Элементы.Удалить.Доступность	          = (Не ЗапрещеноПрикреплятьОбъекты ИЛИ ФайлНовый) И ВозможностьРедактированияИзАвтомаршрута;
		
		Элементы.Создать.Видимость = Ложь;
		//Элементы.Скопировать.Видимость = Ложь;
		Элементы.ФормаГруппаПодобрать.Видимость = ВозможностьРедактированияИзАвтомаршрута;
		Элементы.ФормаСоздатьФайл.Видимость = ВозможностьРедактированияИзАвтомаршрута;	
		Элементы.ФормаПодтвердитьИЗакрыть.Видимость = ВозможностьРедактированияИзАвтомаршрута;
		
	ИначеЕсли Параметры.Свойство("ВладелецБезОтбора") Тогда
		Владелец = Параметры.ВладелецБезОтбора.ВладелецФайла;
		ЗапрещеноПрикреплятьОбъекты = РегистрыСведений.ПрикрепленныеОбъекты.ПроверитьВладельца(Владелец, Ложь, ВозможностьРедактированияИзАвтомаршрута);
		//Элементы.ФормаПодобратьДокумент.Доступность = Не ЗапрещеноПрикреплятьОбъекты;
		//Элементы.ФормаПодобратьФайл.Доступность = Не ЗапрещеноПрикреплятьОбъекты;
		//Элементы.ФормаСоздатьФайл.Доступность	  = Не ЗапрещеноПрикреплятьОбъекты;
		//Элементы.Изменить.Доступность	          = Не ЗапрещеноПрикреплятьОбъекты ИЛИ ФайлНовый;
		Элементы.Удалить.Доступность	          = (Не ЗапрещеноПрикреплятьОбъекты ИЛИ ФайлНовый) И ВозможностьРедактированияИзАвтомаршрута;
		
		Элементы.Создать.Видимость = Ложь;
		//Элементы.Скопировать.Видимость = Ложь;
		Элементы.ФормаГруппаПодобрать.Видимость = ВозможностьРедактированияИзАвтомаршрута;
		Элементы.ФормаСоздатьФайл.Видимость = ВозможностьРедактированияИзАвтомаршрута;	
		Элементы.ФормаПодтвердитьИЗакрыть.Видимость = ВозможностьРедактированияИзАвтомаршрута;
	КонецЕсли;


КонецПроцедуры


////////////////////////////////////////
// Обработчики событий элементов формы

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле.Имя = "ВидОбъекта" Тогда
		СтандартнаяОбработка = Ложь;
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.ЗагрузитьЗначения(ПолучитьСписокВидовОбъектов());
		ТекЗнач = Неопределено;

		ПоказатьВыборИзСписка(Новый ОписаниеОповещения("СписокВыборЗавершение", ЭтаФорма), СписокЗначений, , СписокЗначений.НайтиПоЗначению(Элементы.Список.ТекущиеДанные.ВидОбъекта));
		Возврат;
	КонецЕсли;
	
	ВыбранныйОбъект = Элемент.ТекущиеДанные.Объект;
	Если ТипЗнч(ВыбранныйОбъект) = Тип("СправочникСсылка.Файлы") Тогда
		СтруктураФайла = РаботаСGDrive.ПолучитьИмяФайлаНаСервере(ВыбранныйОбъект);
		
		Если РаботаСGDrive.ЕстьПараметрыGDrive() И СтруктураФайла.ФайлСуществует Тогда
			БюджетныйНаКлиенте.ОткрытьВФормеHTML(СтруктураФайла);	
		Иначе
			Если ТипЗнч(ВыбраннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				Возврат;
			КонецЕсли;
			

			КакОткрывать = РаботаСФайламиСлужебныйКлиент.ПерсональныеНастройкиРаботыСФайлами().ДействиеПоДвойномуЩелчкуМыши;
			
			Если КакОткрывать = "ОткрыватьКарточку" Тогда
				ПоказатьЗначение(, ВыбранныйОбъект);
				Возврат;
			КонецЕсли;
			
			ИмяКаталога = РаботаСФайламиСлужебныйКлиент.РабочийКаталогПользователя();
			Если ИмяКаталога = Неопределено Или ПустаяСтрока(ИмяКаталога) Тогда
				Возврат;
			КонецЕсли;
			
			ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(ВыбранныйОбъект, Неопределено,
			УникальныйИдентификатор, Неопределено, ПредыдущийАдресФайла);
			
			ПараметрыОбработчика = Новый Структура;
			ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
			Обработчик = Новый ОписаниеОповещения("СписокВыборПослеВыбораРежимаРедактирования", ЭтотОбъект, ПараметрыОбработчика);
			
			ВыбратьРежимИРедактироватьФайл(Обработчик, ДанныеФайла, ВозможностьРедактированияИзАвтомаршрута);
		КонецЕсли;
	Иначе
		ОткрытьЗначение(Элемент.ТекущиеДанные.Объект);
	КонецЕсли;
	//запишем факт просмотра файла пользователем
	сабОбщегоНазначения.ЗаписатьИспользованиеФайловНаСервере(ВыбранныйОбъект, "Просмотр");
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ТекЗнач = ВыбранныйЭлемент;
	Если Не ТекЗнач = Неопределено Тогда
		ЗаписатьВидОбъекта(Элементы.Список.ТекущаяСтрока, ТекЗнач.Значение);
		Элементы.Список.Обновить();
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьВидОбъекта(ЗаписьРегистра, НовыйВид)

	МенеджерЗаписи1 = РегистрыСведений.ПрикрепленныеОбъекты.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи1, ЗаписьРегистра);
	МенеджерЗаписи1.Прочитать();
    МенеджерЗаписи1.ВидОбъекта = НовыйВид;
	МенеджерЗаписи1.Записать();

КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьСписокВидовОбъектов()
	
	МассивОбъектов = Новый Массив;
	Для каждого ТекВид Из Перечисления.ВидыПрикрепленныхОбъектов Цикл
		МассивОбъектов.Добавить(ТекВид);	
	КонецЦикла;
	
	Возврат МассивОбъектов;

КонецФункции // ()


&НаКлиенте
Процедура ВыбратьРежимИРедактироватьФайл(ОбработчикРезультата, ДанныеФайла, ДоступностьКомандыРедактировать) Экспорт
	// Выбрать режим открытия файла и начать редактирование.
	РезультатОткрыть = "Открыть";
	РезультатРедактировать = "Редактировать";
	РезультатОтмена = "Отмена";
	
	ПерсональныеНастройки = РаботаСФайламиСлужебныйКлиент.ПерсональныеНастройкиРаботыСФайлами();
	
	СпособОткрытия = ПерсональныеНастройки.ТекстовыеФайлыСпособОткрытия;
	Если СпособОткрытия = ПредопределенноеЗначение("Перечисление.СпособыОткрытияФайлаНаПросмотр.ВоВстроенномРедакторе") Тогда
		
		РасширениеВСписке = РаботаСФайламиСлужебныйКлиентСервер.РасширениеФайлаВСписке(
			ПерсональныеНастройки.ТекстовыеФайлыРасширение,
			ДанныеФайла.Расширение);
		
		Если РасширениеВСписке Тогда
			РаботаСФайламиСлужебныйКлиент.ВернутьРезультат(ОбработчикРезультата, РезультатОткрыть);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	СпособОткрытия = ПерсональныеНастройки.ГрафическиеСхемыСпособОткрытия;
	Если СпособОткрытия = ПредопределенноеЗначение("Перечисление.СпособыОткрытияФайлаНаПросмотр.ВоВстроенномРедакторе") Тогда
		
		РасширениеВСписке = РаботаСФайламиСлужебныйКлиентСервер.РасширениеФайлаВСписке(
			ПерсональныеНастройки.ГрафическиеСхемыРасширение,
			ДанныеФайла.Расширение);
		
		Если РасширениеВСписке Тогда
			РаботаСФайламиСлужебныйКлиент.ВернутьРезультат(ОбработчикРезультата, РезультатОткрыть);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Если уже занят для редактирования, то не спрашивать - сразу открывать.
	Если Не ЗначениеЗаполнено(ДанныеФайла.Редактирует)
		И ПерсональныеНастройки.СпрашиватьРежимРедактированияПриОткрытииФайла = Истина
		И ДоступностьКомандыРедактировать Тогда
		
		ПараметрыВыполнения = Новый Структура;
		ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
		Обработчик = Новый ОписаниеОповещения("ВыбратьРежимИРедактироватьФайлЗавершение", ЭтотОбъект, ПараметрыВыполнения);
		
		ОткрытьФорму("Справочник.Файлы.Форма.ФормаВыбораРежимаОткрытия", , , , , , Обработчик, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиСлужебныйКлиент.ВернутьРезультат(ОбработчикРезультата, РезультатОткрыть);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеВыбораРежимаРедактирования(Результат, ПараметрыВыполнения) Экспорт
	РезультатОткрыть = "Открыть";
	РезультатРедактировать = "Редактировать";
	
	Если Результат = РезультатРедактировать Тогда
		Обработчик = Новый ОписаниеОповещения("СписокВыборПослеРедактированияФайла", ЭтотОбъект, ПараметрыВыполнения);
		РаботаСФайламиСлужебныйКлиент.РедактироватьФайл(Обработчик, ПараметрыВыполнения.ДанныеФайла);
	ИначеЕсли Результат = РезультатОткрыть Тогда
		РаботаСФайламиСлужебныйКлиент.ОткрытьФайлСОповещением(Неопределено, ПараметрыВыполнения.ДанныеФайла, УникальныйИдентификатор); 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеРедактированияФайла(Результат, ПараметрыВыполнения) Экспорт
	
	ОповеститьОбИзменении(ПараметрыВыполнения.ДанныеФайла.Ссылка);
	
	УстановитьДоступностьФайловыхКоманд();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьФайловыхКоманд(Результат = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено
		И ТипЗнч(Элементы.Список.ТекущаяСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		
		//УстановитьДоступностьКоманд(
		//	ТекущиеДанные.РедактируетТекущийПользователь,
		//	ТекущиеДанные.Редактирует,
		//	ТекущиеДанные.ПодписанЭП,
		//	ТекущиеДанные.Зашифрован);
	Иначе
		//СделатьКомандыНедоступными();
	КонецЕсли;
	ОбновитьПредпросмотр();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредпросмотр()
	
	Если Не Предпросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И РасширенияПоддерживающиеПредпросмотр.НайтиПоЗначению(ТекущиеДанные.Расширение) <> Неопределено Тогда
		ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(ТекущиеДанные.Ссылка, Неопределено, УникальныйИдентификатор);
		АдресДанныхФайла = ДанныеФайла.НавигационнаяСсылкаТекущейВерсии;
	Иначе
		АдресДанныхФайла = Неопределено;
		Элементы.АдресДанныхФайла.ТекстНевыбраннойКартинки = НСтр("ru = 'Нет данных для предварительного просмотра'");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьРежимИРедактироватьФайлЗавершение(Результат, ПараметрыВыполнения) Экспорт
	РезультатОткрыть = "Открыть";
	РезультатРедактировать = "Редактировать";
	РезультатОтмена = "Отмена";
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		РаботаСФайламиСлужебныйКлиент.ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, РезультатОтмена);
		Возврат;
	КонецЕсли;
	
	Если Результат.КакОткрывать = 1 Тогда
		РаботаСФайламиСлужебныйКлиент.ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, РезультатРедактировать);
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиСлужебныйКлиент.ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, РезультатОткрыть);
КонецПроцедуры




&НаКлиенте
Процедура Печать(Команда)
	ТекДанные = Элементы.Список.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		Если ТипЗнч(ТекДанные.Объект) = Тип("СправочникСсылка.Файлы") Тогда
			ОткрытьЗначение(ТекДанные.Объект);
		Иначе
			БюджетныйНаКлиенте.УниверсальнаяПечать(ТекДанные.Объект, Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьДокумент(Команда)
	
	ОткрытьФорму("ЖурналДокументов.ВнутренниеДокументы.ФормаСписка", Новый Структура("РежимВыбора", Истина), ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//Если ЗначениеЗаполнено(ПодобранныйДокумент) Тогда
	//	СоздатьЗаписьВРегистре(ПодобранныйДокумент);
	//	Элементы.Список.Обновить();
	//	//Оповестить("ПрикрепленныеФайлы");
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьФайл(Команда)
	
	ОткрытьФорму("Справочник.Файлы.ФормаВыбора", Новый Структура("РежимВыбора", Истина), ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	
	//ФормаВыбора = ПолучитьФорму("Справочник.Файлы.ФормаВыбора");
	//ФормаВыбора.Элементы.Список.МножественныйВыбор = Истина;
	//ПодобранныеФайлы = ФормаВыбора.ОткрытьМодально();
	//Если ТипЗнч(ПодобранныеФайлы) = Тип("СправочникСсылка.Файлы") И ЗначениеЗаполнено(ПодобранныеФайлы) Тогда
	//	СоздатьЗаписьВРегистре(ПодобранныеФайлы);
	//ИначеЕсли ТипЗнч(ПодобранныеФайлы) = Тип("Массив") Тогда
	//	Для Каждого ТекФайл Из ПодобранныеФайлы Цикл
	//		СоздатьЗаписьВРегистре(ТекФайл);
	//	КонецЦикла;
	//КонецЕсли;
	//
	//Элементы.Список.Обновить();
	//Оповестить("ПрикрепленныеФайлы");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайл(Команда)

	//ПараметрыВыбора = ОткрытьФормуМодально("Справочник.Файлы.Форма.ФормаВыбораТипаФайла"); 
	//
	//Если ПараметрыВыбора = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	
	//ПараметрыВыбора = Новый Структура("ВидФайла, Ссылка, НормативныйДокумент, Предприятие", "", Ложь, Неопределено, Неопределено);
	//
	//
	//ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	//
	//ДиалогОткрытияФайла.МножественныйВыбор = Истина;
	//Если ПараметрыВыбора.ВидФайла = "Картинка" ИЛИ ПараметрыВыбора.ВидФайла = "Оттиск" Тогда
	//	ДиалогОткрытияФайла.Заголовок 		   = "Выберите картинку";
	//Иначе
	//	ДиалогОткрытияФайла.Заголовок 		   = "Выберите Файл";
	//КонецЕсли;	
	//
	//Если ДиалогОткрытияФайла.Выбрать() Тогда
	//	Для Каждого ВыбранныйФайл Из ДиалогОткрытияФайла.ВыбранныеФайлы Цикл
	//		ЗагруженныйФайл = сабОбщегоНазначенияКлиент.СохранитьФайлВБазе(ПараметрыВыбора, ВыбранныйФайл, Владелец, Ложь);
	//		СоздатьЗаписьВРегистре(ЗагруженныйФайл);
	//	КонецЦикла;				
	//КонецЕсли;
	
	
	//ЗначениеПараметраКД = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Владелец"));
	//Если ЗначениеПараметраКД = Неопределено Тогда
	//	ВладелецФайла = Неопределено;
	//Иначе
	//	ВладелецФайла = ЗначениеПараметраКД.Значение;
	//КонецЕсли;
	ТекВладелец = ПолучитьВладельца(Владелец);
	
	РаботаСФайламиСлужебныйКлиент.ДобавитьФайл(Неопределено, ТекВладелец, ЭтотОбъект, 2, Истина);
	
	//СоздатьЗаписьВРегистре(ЗагруженныйФайл);
	
	
	//Оповестить("ПрикрепленныеФайлы");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВладельца(Владелец)
	
	Если ЗначениеЗаполнено(Владелец) Тогда
		ГруппаФайлов = Справочники.ПапкиФайлов.НайтиПоНаименованию(Строка(Владелец), Истина);
		Если ЗначениеЗаполнено(ГруппаФайлов) Тогда
			Возврат ГруппаФайлов;	
		КонецЕсли;		
	КонецЕсли;
	
	ПапкаОбщие = Справочники.ПапкиФайлов.НайтиПоНаименованию("Общие файлы", Истина);
	Если Не ЗначениеЗаполнено(ПапкаОбщие) Тогда
		УстановитьПривилегированныйРежим(Истина);
		НоваяПапка = Справочники.ПапкиФайлов.СоздатьЭлемент(); 
		НоваяПапка.Наименование = "Общие файлы";
		НоваяПапка.Записать();
		УстановитьПривилегированныйРежим(Ложь);	
	КонецЕсли;
	
	Возврат ПапкаОбщие;	

КонецФункции // ()


////////////////////////////////////////

// Служебные

&НаСервере
Процедура СоздатьЗаписьВРегистре(ПрикрепленныйОбъект)
	
	Если ЗначениеЗаполнено(Владелец) Тогда
		НовыеВремФайлы.Добавить(ПрикрепленныйОбъект);
		Адрес = ПоместитьВоВременноеХранилище(НовыеВремФайлы, Новый УникальныйИдентификатор); 
		
		МенеджерЗаписи = РегистрыСведений.ПрикрепленныеОбъекты.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Владелец = Владелец;
		МенеджерЗаписи.Объект	= ПрикрепленныйОбъект;
		МенеджерЗаписи.Автор	= сабОбщегоНазначения.ТекущийПользователь();
		МенеджерЗаписи.АдресВремХранилища = Адрес;
		МенеджерЗаписи.ВидОбъекта = НайтиВидОбъекта(ПрикрепленныйОбъект);
		МенеджерЗаписи.Записать();
	Иначе
		Сообщить("Не заполнен владелец формы");
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиВидОбъекта(ИмяОбъекта)
	ИмяОбъекта = Строка(ИмяОбъекта);
	Если СтрНайти(Нрег(ИмяОбъекта), "акт ") Тогда
		Возврат Перечисления.ВидыПрикрепленныхОбъектов.АктОказанияУслуг;
	ИначеЕсли СтрНайти(Нрег(ИмяОбъекта), "счет ") Тогда
		Возврат Перечисления.ВидыПрикрепленныхОбъектов.СчетНаОплату;
	ИначеЕсли СтрНайти(Нрег(ИмяОбъекта), "договор ") Тогда
		Возврат Перечисления.ВидыПрикрепленныхОбъектов.Договор;
	ИначеЕсли СтрНайти(Нрег(ИмяОбъекта), "заказ ") Тогда
		Возврат Перечисления.ВидыПрикрепленныхОбъектов.Заказ;
	Иначе
		Возврат Перечисления.ВидыПрикрепленныхОбъектов.ПрочаяИнформация;	
	КонецЕсли;
КонецФункции // ()

&НаКлиенте
Процедура ПодтвердитьИЗакрыть(Команда)
	Закрыть();	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	Оповестить("ПрикрепленныеФайлы");
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	
	Если ИмяСобытия = "Запись_Файл" Тогда
		Если Параметр.Свойство("Файл") Тогда
			//#Если Не ВебКлиент И Не МобильныйКлиент И Не МобильноеПриложениеКлиент Тогда
			Если Параметр.Свойство("ФормаВладелецУИД") И Параметр.ФормаВладелецУИД = ЭтаФорма.УникальныйИдентификатор Тогда
				СоздатьЗаписьВРегистре(Параметр.Файл);
				Элементы.Список.Обновить();
			КонецЕсли;
			//#иначе
			//#КонецЕсли
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ИмпортКаталоговЗавершен" Тогда
		Если Параметр.Свойство("ФормаВладелецУИД") И Параметр.ФормаВладелецУИД = ЭтаФорма.УникальныйИдентификатор Тогда
			Если Параметр.Свойство("МассивФайлов") Тогда
				Для каждого ТекФайл Из Параметр.МассивСтруктурВсехФайлов Цикл
					СоздатьЗаписьВРегистре(ТекФайл.Файл);
				КонецЦикла;
				Элементы.Список.Обновить();
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	ТекСтрока = Элементы.Список.ТекущиеДанные;
	Если Не ТекСтрока = Неопределено Тогда
		
		ВозможностьРедактированияИзАвтомаршрута = БПСервер.ТекПользовательИсполнительДокумента(ТекСтрока.Владелец, Ложь);
			
		УстановитьДоступностьМеню(ТекСтрока.ФайлДоступен, НЕ НовыеВремФайлы.НайтиПоЗначению(ТекСтрока.Объект) = Неопределено, ВозможностьРедактированияИзАвтомаршрута);
		
		Попытка //может не хватать прав на владельца
			РазрешитьРедактированиеПрикрепленныхФайлов = ТекСтрока.РазрешитьРедактированиеПрикрепленныхФайлов;
		Исключение
			РазрешитьРедактированиеПрикрепленныхФайлов = Ложь;
		КонецПопытки;
		
		УстановитьДоступностьКоманд(
		ТекСтрока.РедактируетТекущийПользователь,
		ТекСтрока.Редактирует,
		ТекСтрока.ПодписанЭП,
		ТекСтрока.Зашифрован,
		РазрешитьРедактированиеПрикрепленныхФайлов И ВозможностьРедактированияИзАвтомаршрута);
		
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКоманд(РедактируетТекущийПользователь, Редактирует, ПодписанЭП, Зашифрован, РазрешитьРедактированиеПрикрепленныхФайлов)
	
	РедактируетДругой = ЗначениеЗаполнено(Редактирует) И НЕ РедактируетТекущийПользователь;
	ИзменениеФайлов = РазрешитьРедактированиеПрикрепленныхФайлов; //вот здесь глобальное свойство типов документов
	
	Элементы.ФормаЗакончитьРедактирование.Доступность = ИзменениеФайлов И РедактируетТекущийПользователь;
	Элементы.СписокКонтекстноеМенюЗакончитьРедактирование.Доступность = ИзменениеФайлов И РедактируетТекущийПользователь;
	
	Элементы.ФормаСохранитьИзменения.Доступность = ИзменениеФайлов И РедактируетТекущийПользователь;
	Элементы.СписокКонтекстноеМенюСохранитьИзменения.Доступность = ИзменениеФайлов И РедактируетТекущийПользователь;
	
	//Элементы.ФормаОсвободить.Доступность = ИзменениеФайлов И ЗначениеЗаполнено(Редактирует);
	//Элементы.СписокКонтекстноеМенюОсвободить.Доступность = ИзменениеФайлов И ЗначениеЗаполнено(Редактирует);
	
	//Элементы.ФормаЗанять.Доступность = ИзменениеФайлов И Не ЗначениеЗаполнено(Редактирует) И НЕ ПодписанЭП;
	//Элементы.СписокКонтекстноеМенюЗанять.Доступность = ИзменениеФайлов И Не ЗначениеЗаполнено(Редактирует) И НЕ ПодписанЭП;
	
	Элементы.ФормаРедактировать.Доступность = ИзменениеФайлов И НЕ ПодписанЭП И НЕ РедактируетДругой;
	Элементы.СписокКонтекстноеМенюРедактировать.Доступность = ИзменениеФайлов И НЕ ПодписанЭП И НЕ РедактируетДругой;
	
	//Элементы.ФормаПеренестиВПапку.Доступность = ИзменениеФайлов И НЕ ПодписанЭП;
	//Элементы.СписокКонтекстноеМенюПеренестиВПапку.Доступность = ИзменениеФайлов И НЕ ПодписанЭП;
	
	//Элементы.ФормаПодписать.Доступность = ИзменениеФайлов И Не ЗначениеЗаполнено(Редактирует);
	//Элементы.СписокКонтекстноеМенюПодписать.Доступность = ИзменениеФайлов И Не ЗначениеЗаполнено(Редактирует);
	
	//Элементы.ФормаСохранитьВместеСПодписью.Доступность = ПодписанЭП;
	//Элементы.СписокКонтекстноеМенюСохранитьВместеСПодписью.Доступность = ПодписанЭП;
	
	//Элементы.ФормаЗашифровать.Доступность = ИзменениеФайлов И Не ЗначениеЗаполнено(Редактирует) И НЕ Зашифрован;
	//Элементы.СписокКонтекстноеМенюЗашифровать.Доступность = ИзменениеФайлов И Не ЗначениеЗаполнено(Редактирует) И НЕ Зашифрован;
	
	//Элементы.ФормаРасшифровать.Доступность = ИзменениеФайлов И Зашифрован;
	//Элементы.СписокКонтекстноеМенюРасшифровать.Доступность = ИзменениеФайлов И Зашифрован;
	
	//Элементы.ФормаДобавитьПодписьИзФайла.Доступность = ИзменениеФайлов И Не ЗначениеЗаполнено(Редактирует);
	//Элементы.СписокКонтекстноеМенюДобавитьПодписьИзФайла.Доступность = ИзменениеФайлов И ЗначениеЗаполнено(Редактирует);
	
	Элементы.ФормаОбновитьИзФайлаНаДиске.Доступность = ИзменениеФайлов И Не ПодписанЭП;
	Элементы.СписокКонтекстноеМенюОбновитьИзФайлаНаДиске.Доступность = ИзменениеФайлов И Не ПодписанЭП;
	
	//Элементы.ФормаСохранитьКак.Доступность = Истина;
	//Элементы.СписокКонтекстноеМенюСохранитьКак.Доступность = Истина;
	
	//Элементы.ФормаОткрытьКаталогФайла.Доступность = Истина;
	//Элементы.СписокКонтекстноеМенюОткрытьКаталогФайла.Доступность = Истина;
	
	//Элементы.ФормаОткрыть.Доступность = Истина;
	//Элементы.СписокКонтекстноеМенюОткрыть.Доступность = Истина;
	
	//Элементы.Печать.Доступность = Истина;
	//Элементы.СписокКонтекстноеМенюПечать.Доступность = Истина;
	
	//Элементы.Отправить.Доступность = Истина;
	//Элементы.СписокКонтекстноеМенюОтправить.Доступность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ Элементы.Список.ТекущиеДанные = Неопределено Тогда
		ТекФайл = Элементы.Список.ТекущиеДанные.Объект;
		Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьФайловыхКоманд", ЭтотОбъект);
		РаботаСФайламиСлужебныйКлиент.РедактироватьСОповещением(Обработчик, ТекФайл);
		Элементы.Список.Обновить();
		СписокПриАктивизацииСтроки(Неопределено);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ Элементы.Список.ТекущиеДанные = Неопределено Тогда
		ТекФайл = Элементы.Список.ТекущиеДанные.Объект;
		
		Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьФайловыхКоманд", ЭтотОбъект);
		
		РаботаСФайламиСлужебныйКлиент.СохранитьИзмененияФайлаСОповещением(
		Обработчик,
		ТекФайл,
		УникальныйИдентификатор);
		Элементы.Список.Обновить();
		СписокПриАктивизацииСтроки(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ Элементы.Список.ТекущиеДанные = Неопределено Тогда
		ТекФайл = Элементы.Список.ТекущиеДанные.Объект;
		СтрокаТаблицы = Элементы.Список.ТекущиеДанные;
		Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьФайловыхКоманд", ЭтотОбъект);
		ПараметрыОбновленияФайла = РаботаСФайламиСлужебныйКлиент.ПараметрыОбновленияФайла(Обработчик, ТекФайл, УникальныйИдентификатор);
		ПараметрыОбновленияФайла.ХранитьВерсии = СтрокаТаблицы.ХранитьВерсии;
		ПараметрыОбновленияФайла.РедактируетТекущийПользователь = СтрокаТаблицы.РедактируетТекущийПользователь;
		ПараметрыОбновленияФайла.Редактирует = СтрокаТаблицы.Редактирует;
		ПараметрыОбновленияФайла.АвторТекущейВерсии = СтрокаТаблицы.Автор;
		ПараметрыОбновленияФайла.Кодировка = СтрокаТаблицы.Кодировка;
		РаботаСФайламиСлужебныйКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
		Элементы.Список.Обновить();
		СписокПриАктивизацииСтроки(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	Если НЕ Элементы.Список.ТекущиеДанные = Неопределено Тогда
		ТекФайл = Элементы.Список.ТекущиеДанные.Объект;
		ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаИРабочийКаталог(ТекФайл);
		РаботаСФайламиСлужебныйКлиент.ОбновитьИзФайлаНаДискеСОповещением(Неопределено, ДанныеФайла, УникальныйИдентификатор);
		Элементы.Список.Обновить();
		СписокПриАктивизацииСтроки(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	МассивФайлов = Новый Массив;
	Для каждого ТекСтрока Из Элементы.Список.ВыделенныеСтроки Цикл
		МассивФайлов.Добавить(ПолучитьОбъектРегистра(ТекСтрока, "Объект"));
	КонецЦикла; 
	
	РаботаСФайламиСлужебныйКлиент.ОтправитьФайлыПоПочте(
		МассивФайлов, УникальныйИдентификатор, ПараметрыОтправки, Истина);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбъектРегистра(КлючЗаписи, ИмяРеквизита)
	
	МенеджерЗаписи1 = РегистрыСведений.ПрикрепленныеОбъекты.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи1, КлючЗаписи);
	МенеджерЗаписи1.Прочитать();
	
	Возврат МенеджерЗаписи1[ИмяРеквизита];

КонецФункции // ()


&НаКлиенте
Функция ФайловыеКомандыДоступны(ФайлСсылка = Неопределено)
	// Доступны файловые команды - есть хотя бы одна строка в списке и выделена не группировка.
	
	Если ФайлСсылка = Неопределено Тогда 
		ФайлСсылка = Элементы.Список.ТекущаяСтрока;
	КонецЕсли;
	
	Если ФайлСсылка = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Элементы.Список.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	ОткрытьЗначение(Элементы.Список.ТекущиеДанные.Объект);
КонецПроцедуры

&НаКлиенте
Процедура СписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	Если ВозможностьРедактированияИзАвтомаршрута Тогда
		ПеретаскиваниеВПапку(Неопределено, ПараметрыПеретаскивания.Значение, ПараметрыПеретаскивания.Действие);
	Иначе
		Сообщить("Невозможно прикрепить файл!");	
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПеретаскиваниеВПапку(ПапкаДляДобавления, ЗначениеПеретаскивания, Действие)
	//Если ПапкаДляДобавления = Неопределено Тогда
	//	ПапкаДляДобавления = Элементы.Папки.ТекущаяСтрока;
	//	Если ПапкаДляДобавления = Неопределено Тогда
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	
	ПапкаДляДобавления = ПолучитьВладельца(Владелец);
	
	Если ПапкаДляДобавления.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТипЗначения = ТипЗнч(ЗначениеПеретаскивания);
	Если ТипЗначения = Тип("Файл") Тогда
		Если ЗначениеПеретаскивания.ЭтоФайл() Тогда
			ПараметрыДобавления = Новый Структура;
			ПараметрыДобавления.Вставить("ОбработчикРезультата", Неопределено);
			ПараметрыДобавления.Вставить("ПолноеИмяФайла", ЗначениеПеретаскивания.ПолноеИмя);
			ПараметрыДобавления.Вставить("ВладелецФайла", ПапкаДляДобавления);
			ПараметрыДобавления.Вставить("ФормаВладелец", ЭтотОбъект);
			ПараметрыДобавления.Вставить("ИмяСоздаваемогоФайла", Неопределено);
			ПараметрыДобавления.Вставить("НеОткрыватьКарточкуПослеСозданияИзФайла", Истина);
			РаботаСФайламиСлужебныйКлиент.ДобавитьИзФайловойСистемыСРасширением(ПараметрыДобавления);
		Иначе
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ФормаВладелец", ЭтаФорма.УникальныйИдентификатор);
			
			МассивИменФайлов = Новый Массив;
			МассивИменФайлов.Добавить(ЗначениеПеретаскивания.ПолноеИмя);
			РаботаСФайламиСлужебныйКлиент.ОткрытьФормуПеретаскиванияИзвне(ПапкаДляДобавления, МассивИменФайлов, ДопПараметры);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") Тогда
		ИндексПапки = ЗначениеПеретаскивания.Найти(ПапкаДляДобавления);
		Если ИндексПапки <> Неопределено Тогда
			ЗначениеПеретаскивания.Удалить(ИндексПапки);
		КонецЕсли;
		
		Если ЗначениеПеретаскивания.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ТипЗначения = ТипЗнч(ЗначениеПеретаскивания[0]);
		Если ТипЗначения = Тип("Файл") Тогда
			
			МассивИменФайлов = Новый Массив;
			Для Каждого ФайлПринятый Из ЗначениеПеретаскивания Цикл
				МассивИменФайлов.Добавить(ФайлПринятый.ПолноеИмя);
			КонецЦикла; 
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ФормаВладелец", ЭтаФорма.УникальныйИдентификатор);
			
			РаботаСФайламиСлужебныйКлиент.ОткрытьФормуПеретаскиванияИзвне(ПапкаДляДобавления, МассивИменФайлов, ДопПараметры);
			
		ИначеЕсли ТипЗначения = Тип("СправочникСсылка.Файлы") Тогда
			
			Если Действие = ДействиеПеретаскивания.Копирование Тогда
				
				РаботаСФайламиСлужебныйВызовСервера.СкопироватьФайлы(
					ЗначениеПеретаскивания,
					ПапкаДляДобавления);
				
				Элементы.Папки.Обновить();
				Элементы.Список.Обновить();
				
				Если ЗначениеПеретаскивания.Количество() = 1 Тогда
					ОповещениеЗаголовок = НСтр("ru = 'Файл скопирован.'");
					ОповещениеТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Файл ""%1""
						           |скопирован в папку ""%2""'"),
						ЗначениеПеретаскивания[0],
						Строка(ПапкаДляДобавления));
				Иначе
					ОповещениеЗаголовок = НСтр("ru = 'Файлы скопированы.'");
					ОповещениеТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Файлы (%1 шт.) скопированы в папку ""%2""'"),
						ЗначениеПеретаскивания.Количество(),
						Строка(ПапкаДляДобавления));
				КонецЕсли;
				ПоказатьОповещениеПользователя(ОповещениеЗаголовок, , ОповещениеТекст, БиблиотекаКартинок.Информация32);
			Иначе
				
				ВладелецУстановлен = РаботаСФайламиСлужебныйВызовСервера.УстановитьВладельцаФайла(ЗначениеПеретаскивания, ПапкаДляДобавления);
				Если ВладелецУстановлен <> Истина Тогда
					Возврат;
				КонецЕсли;
				
				Элементы.Папки.Обновить();
				Элементы.Список.Обновить();
				
				Если ЗначениеПеретаскивания.Количество() = 1 Тогда
					ОповещениеЗаголовок = НСтр("ru = 'Файл перенесен.'");
					ОповещениеТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Файл ""%1""
						           |перенесен в папку ""%2""'"),
						Строка(ЗначениеПеретаскивания[0]),
						Строка(ПапкаДляДобавления));
				Иначе
					ОповещениеЗаголовок = НСтр("ru = 'Файлы перенесены.'");
					ОповещениеТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Файлы (%1 шт.) перенесены в папку ""%2""'"),
						Строка(ЗначениеПеретаскивания.Количество()),
						Строка(ПапкаДляДобавления));
				КонецЕсли;
				ПоказатьОповещениеПользователя(ОповещениеЗаголовок, , ОповещениеТекст, БиблиотекаКартинок.Информация32);
			КонецЕсли;
			
		ИначеЕсли ТипЗначения = Тип("СправочникСсылка.ПапкиФайлов") Тогда
			НайденоЗацикливание = Ложь;
			РодительСменен = РаботаСФайламиСлужебныйВызовСервера.СменитьРодителяПапок(ЗначениеПеретаскивания, ПапкаДляДобавления, НайденоЗацикливание);
			Если РодительСменен <> Истина Тогда
				Если НайденоЗацикливание = Истина Тогда
					ПоказатьПредупреждение(, НСтр("ru = 'Зацикливание уровней.'"));
				КонецЕсли;
				Возврат;
			КонецЕсли;
			
			Элементы.Папки.Обновить();
			Элементы.Список.Обновить();
			
			Если ЗначениеПеретаскивания.Количество() = 1 Тогда
				Элементы.Папки.ТекущаяСтрока = ЗначениеПеретаскивания[0];
				ОповещениеЗаголовок = НСтр("ru = 'Папка перенесена.'");
				ОповещениеТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Папка ""%1""
					           |перенесена в папку ""%2""'"),
					Строка(ЗначениеПеретаскивания[0]),
					Строка(ПапкаДляДобавления));
			Иначе
				ОповещениеЗаголовок = НСтр("ru = 'Папки перенесены.'");
				ОповещениеТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Папки (%1 шт.) перенесены в папку ""%2""'"),
					Строка(ЗначениеПеретаскивания.Количество()),
					Строка(ПапкаДляДобавления));
			КонецЕсли;
			ПоказатьОповещениеПользователя(ОповещениеЗаголовок, , ОповещениеТекст, БиблиотекаКартинок.Информация32);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Попытка
		
		СоздатьЗаписьВРегистре(ВыбранноеЗначение);	
		Элементы.Список.Обновить();
	Исключение
		
	КонецПопытки;
	//Вставить содержимое обработчика
КонецПроцедуры

&НаКлиенте
Процедура СкачатьФайл(Команда)
	
	МассивФайлов = Новый Массив;
	Для каждого ТекСтрока Из Элементы.Список.ВыделенныеСтроки Цикл
		МассивФайлов.Добавить(ПолучитьОбъектРегистра(ТекСтрока, "Объект"));
	КонецЦикла; 
	
	Если МассивФайлов.Количество() Тогда
		ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляСохранения(МассивФайлов[0],, Новый УникальныйИдентификатор);
		РаботаСФайламиСлужебныйКлиент.СохранитьКак(Неопределено, ДанныеФайла, Неопределено);
	КонецЕсли;
	
КонецПроцедуры


