
////////////////////////////////////////////////////////////////////////////////
// БЛОК ОБРАБОТЧИКОВ СОБЫТИЙ
//

&НаСервере
// Обработчик события "при создании на сервере" формы.
// Заполняет список выбора адресных объектов для загрузки.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьТаблицуАдресныхОбъектов(АдресныеОбъектыДляЗагрузки);
	
	ИсточникДанныхДляЗагрузки = 1;
	ПутьКФайламДанныхНаДиске = "";
	ДискИТС = "";
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "при открытии" формы
// Вызывает функциональность обновления интерфейса
//
Процедура ПриОткрытии(Отказ)
	
	УстановитьИзмененияВИнтерфейсе();
	
КонецПроцедуры

&НаКлиенте
// Обработчик нажатия на "кнопку "Выбор" командной панели формы
// Формирует список выбранных адресных объектов и закрывает форму, устанавливая
// список выбранных адресных объектов в качестве возвращаемого значения.
// Формат возвращаемой таблицы:
// НомерАдресногоОбъекта - строка, 2 символа
// НаименованиеАдресногоОбъекта - строка
// Сокращение - строка
//
Процедура ПродолжитьЗагрузкуВыполнить()
	
	Если      ИсточникДанныхДляЗагрузки = 1 Тогда
		// продолжаем
	ИначеЕсли ИсточникДанныхДляЗагрузки = 2 Тогда
		Если НЕ АдресныйКлассификаторКлиент.ПроверитьНаличиеФайловНаДискеИТС(ДискИТС) Тогда
			ТекстСообщенияОбОшибке = 
			   НСтр("ru = 'Файлы данных ""%1"" не обнаружены на диске ИТС.
			              |Проверьте правильность указанного пути.'");
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			                         ТекстСообщенияОбОшибке, ДискИТС );
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			              ТекстСообщенияОбОшибке,
			              ЭтаФорма,
			              "ДискИТС");
			Возврат;
		КонецЕсли;
	ИначеЕсли ИсточникДанныхДляЗагрузки = 3 Тогда
		Если НЕ АдресныйКлассификаторКлиент.ПроверитьНаличиеФайловДанныхВКаталоге(ПутьКФайламДанныхНаДиске) Тогда
			ТекстСообщенияОбОшибке = НСтр("ru = 'Файлы данных не найдены в каталоге ""%1"".'");
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			                         ТекстСообщенияОбОшибке,
			                         ПутьКФайламДанныхНаДиске );
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			              ТекстСообщенияОбОшибке,
			              ЭтаФорма,
			              "ПутьКФайламДанныхНаДиске");
			Возврат;
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		              НСтр("ru = 'Не выбран источник загрузки'"),
		              ЭтаФорма,
		              "ИсточникДанныхДляЗагрузки");
		Возврат;
	КонецЕсли;
	
	Если КоличествоВыделенныхАдресныхОбъектов() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		              НСтр("ru = 'Для загрузки адресных сведений необходимо выбрать как минимум один адресный объект'"),
		              ЭтаФорма,
		              "АдресныеОбъектыДляЗагрузки");
	Иначе
		Результат = СформироватьПараметры();
		Закрыть(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик нажатия на "кнопку "ВыделитьВсе"
// командной панели элемента управления "АдресныеОбъектыДляЗагрузки"
// Выделяет все адресные объекты в списке адресных объектов для загрузки
//
Процедура ВыделитьВсеВыполнить()
	
	Для Каждого ЭлементАдресныйОбъект Из АдресныеОбъектыДляЗагрузки Цикл
		ЭлементАдресныйОбъект.Пометка = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Обработчик нажатия на "кнопку "ОтменитьВыделитьВсе"
// командной панели элемента управления "АдресныеОбъектыДляЗагрузки"
// Снимает выделение со всех адресных объектов в списке
// адресных объектов для загрузки
//
Процедура ОтменитьВыделитьВсеВыполнить()
	
	Для Каждого ЭлементАдресныйОбъект Из АдресныеОбъектыДляЗагрузки Цикл
		ЭлементАдресныйОбъект.Пометка = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "окончание ввода текста" элемента формы ПутьКФайламДанныхНаДиске.
// Проверяет, что путь к файлам КЛАДР на диске ИТС корректен.
//
Процедура ДискИТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ДискИТС = Текст;
	УстановитьИзмененияВИнтерфейсе();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "окончание ввода текста" элемента формы ПутьКФайламДанныхНаДиске.
// Проверяет, что путь к файлам КЛАДР на диске корректен.
//
Процедура ПутьКФайламДанныхНаДискеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ПутьКФайламДанныхНаДиске = Текст;
	УстановитьИзмененияВИнтерфейсе();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события НачалоВыбора поля ввода формы ПутьКФайламДанныхНаДиске.
// Вызывает диалог выбора  директории, после выбора проверяет, существуют
// ли в выбранной директории файлы данных.
//
Процедура ПутьКФайламДанныхНаДискеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	#Если Не ВебКлиент И Не МобильныйКлиент И Не МобильноеПриложениеКлиент Тогда
	
	ПутьКФайламДанныхНаДиске = "";
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выбор каталога с файлами данных'");
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ПутьККаталогу = ДиалогОткрытияФайла.Каталог;
		
		ОчиститьСообщения();
		
		Если АдресныйКлассификаторКлиент.ПроверитьНаличиеФайловДанныхВКаталоге(ПутьККаталогу) Тогда
			ПутьКФайламДанныхНаДиске = ПутьККаталогу;
			УстановитьИзмененияВИнтерфейсе ();
		Иначе
			ТекстСообщенияОбОшибке = НСтр("ru = 'Файлы данных не найдены в каталоге ""%1"".'");
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			                         ТекстСообщенияОбОшибке,
			                         ПутьККаталогу );
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			              ТекстСообщенияОбОшибке,
			              ЭтаФорма,
			              "ПутьКФайламДанныхНаДиске");
		КонецЕсли;
	КонецЕсли;
	
	#Иначе
		Предупреждение(НСтр("ru = 'Функциональность не поддерживается на веб клиенте'"));
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
// Обработчик события НачалоВыбора поля ввода формы ДискИТС.
// Вызывает диалог выбора директории, после выбора проверяет, существуют
// ли в выбранной директории файлы архивов данных.
//
Процедура ДискИТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	#Если Не ВебКлиент И Не МобильныйКлиент И Не МобильноеПриложениеКлиент Тогда
	
	ДискИТС = "";
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Заголовок = "Выбор пути к диску ИТС";
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ПутьКДискуИТС = ДиалогОткрытияФайла.Каталог;
		
		ФайлыСуществуют = АдресныйКлассификаторКлиент.ПроверитьНаличиеФайловНаДискеИТС(ПутьКДискуИТС);
		
		ОчиститьСообщения();
		
		Если ФайлыСуществуют Тогда
			ДискИТС = ПутьКДискуИТС;
			УстановитьИзмененияВИнтерфейсе();
		Иначе
			ТекстСообщенияОбОшибке = 
			  НСтр("ru = 'Файлы данных КЛАДР не найдены: ""%1"".
						 |Проверьте правильность указанного пути к Диску ИТС.'");
			
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									   ТекстСообщенияОбОшибке, ПутьКДискуИТС);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						  ТекстСообщенияОбОшибке,
						  ЭтаФорма,
						  "ДискИТС");
		КонецЕсли;
	КонецЕсли;
	
	#Иначе
		Предупреждение(НСтр("ru = 'Функциональность не поддерживается на веб клиенте.'"));
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
// Обработчик события выбора поля таблицы "ЭлементАдресныйОбъект"
// Изменяет статус загрузки адресного объекта поля на противоположный
//
Процедура ТаблицаАдресныхОбъектовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Элемент.ТекущиеДанные.Пометка = НЕ Элемент.ТекущиеДанные.Пометка;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события ПриИзменении поля переключателя ИсточникДанныхДляЗагрузки
// Устанавливает параметры видимости элементов (параметров вида загрузки) 
// в зависимости от значения переключателя.
//
Процедура СпособЗагрузкиПриИзменении(Элемент)
	
	УстановитьИзмененияВИнтерфейсе();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// БЛОК СЕРВИСНЫХ ФУНКЦИЙ
//


&НаСервере
// Преобразует текст формата XML в таблицу значений,
// при этом колонки таблицы формируются на основе описания в XML.
//
// Параметры:
//  ТекстXML     - текст в формате XML.
//
// Схема XML:
//<?xml version="1.0" encoding="utf-8"?>
//<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
//  <xs:element name="Items">
//	<xs:complexType>
//	  <xs:sequence>
//		<xs:element maxOccurs="unbounded" name="Item">
//		  <xs:complexType>
//			<xs:attribute name="Code" type="xs:integer" use="required" />
//			<xs:attribute name="Name" type="xs:string" use="required" />
//			<xs:attribute name="Socr" type="xs:string" use="required" />
//			<xs:attribute name="Index" type="xs:string" use="required" />
//		  </xs:complexType>
//		</xs:element>
//	  </xs:sequence>
//	  <xs:attribute name="Description" type="xs:string" use="required" />
//	  <xs:attribute name="Columns" type="xs:string" use="required" />
//	</xs:complexType>
//  </xs:element>
//</xs:schema>
//
// Примеры XML-файлов см. в демонстрационной конфигурации.
// 
// Пример использования:
//   КлассификаторТаблица = ПрочитатьXMLВТаблицу(РегистрыСведений.АдресныйКлассификатор.
//       ПолучитьМакет("КлассификаторАдресныхОбъектовРоссии").ПолучитьТекст());
//
// Возвращаемое значение:
//  ТаблицаЗначений.
//
Функция ПрочитатьXMLВТаблицу(ТекстXML) Экспорт
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(ТекстXML);
	
	// Прочитаем первый узел и проверим его
	Если Не Чтение.Прочитать() Тогда
		ВызватьИсключение("Пустой XML");
	ИначеЕсли Чтение.Имя <> "Items" Тогда
		ВызватьИсключение("Ошибка в структуре XML");
	КонецЕсли;
	
	// Получим описание таблицы и создадим ее
	ИмяТаблицы = Чтение.ПолучитьАтрибут("Description");
	ИменаКолонок = СтрЗаменить(Чтение.ПолучитьАтрибут("Columns"), ",", Символы.ПС);
	Колонок = СтрЧислоСтрок(ИменаКолонок);
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	Для Сч = 1 По Колонок Цикл
		ТаблицаЗначений.Колонки.Добавить(СтрПолучитьСтроку(ИменаКолонок, Сч), Новый ОписаниеТипов("Строка"));
	КонецЦикла;
	
	// Заполним значения в таблице
	Пока Чтение.Прочитать() Цикл
		
		Если Чтение.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
			Продолжить;
		ИначеЕсли Чтение.Имя <> "Item" Тогда
			ВызватьИсключение("Ошибка в структуре XML");
		КонецЕсли;
		
		новСтр = ТаблицаЗначений.Добавить();
		Для Сч = 1 По Колонок Цикл
			ИмяКолонки = СтрПолучитьСтроку(ИменаКолонок, Сч);
			новСтр[Сч-1] = Чтение.ПолучитьАтрибут(ИмяКолонки);
		КонецЦикла;
		
	КонецЦикла;
	
	// Заполним результат
	Результат = Новый Структура;
	Результат.Вставить("ИмяТаблицы", ИмяТаблицы);
	Результат.Вставить("Данные", ТаблицаЗначений);
	
	Возврат Результат;
	
КонецФункции // ПрочитатьXMLВТаблицу()

&НаСервере
// Заполняет переданную таблицу значений по значениям таблицы адресных объектов.
// Выбирается код, наименование и сокращение типа объекта.
//
Процедура ЗаполнитьТаблицуАдресныхОбъектов(АдресныеОбъектыДляЗагрузки)
	
	АдресныеОбъектыДляЗагрузки.Очистить();
	
	КлассификаторАдресныхОбъектовXML =
	   РегистрыСведений.АдресныйКлассификатор.ПолучитьМакет("КлассификаторАдресныхОбъектовРоссии").ПолучитьТекст();
	
	КлассификаторТаблица = ПрочитатьXMLВТаблицу(КлассификаторАдресныхОбъектовXML).Данные;
	
	Для Каждого АдресныйОбъект Из КлассификаторТаблица Цикл
		
		Наименование = Лев(АдресныйОбъект.Code, 2)
		             + " - "
		             + АдресныйОбъект.Name
		             + " "
		             + АдресныйОбъект.Socr;
		
		НоваяСтрока = АдресныеОбъектыДляЗагрузки.Добавить();
		НоваяСтрока.Пометка             = Ложь;
		НоваяСтрока.НаименованиеАдресногоОбъекта = Наименование;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Формирует параметры загрузки адресного классификатора
//
// Возращаемый результат
//
// структура
//
// АдресныеОбъектыДляЗагрузки - ТаблицаЗначений - список загружаемых адресных объектов
//                   колонки:
//                   - НомерАдресногоОбъекта - строка (2)
//                   - НаименованиеАдресногоОбъекта - строка
//                   - Сокращение - строка
//
// СпособЗагрузки  - Структура
//            ИсточникЗагрузки - строка, может принимать следующие значения:
//                               - "ВебСервер"
//                               - "ДискИТС"
//                               - "ФайлыНаДиске"
//             Путь - строка - путь к файлам диска ИТС либо путь к файлам dbf
//
Функция СформироватьПараметры()
	
	// формируем таблицу выбранных адресных объектов
	
	ЗагружаемыеАдресныеОбъекты = Новый СписокЗначений;
	
	Для Каждого ЭлементАдресныйОбъект Из РеквизитФормыВЗначение("АдресныеОбъектыДляЗагрузки") Цикл
		Если ЭлементАдресныйОбъект.Пометка Тогда
			ЗагружаемыеАдресныеОбъекты.Добавить(Лев(ЭлементАдресныйОбъект.НаименованиеАдресногоОбъекта, 2));
		КонецЕсли;
	КонецЦикла;
	
	// формируем вид способа загрузки
	
	СпособЗагрузки = Новый Структура;
	Если      ИсточникДанныхДляЗагрузки = 1 Тогда
		СпособЗагрузки.Вставить("ИсточникЗагрузки", "ВебСервер");
	ИначеЕсли ИсточникДанныхДляЗагрузки = 2 Тогда
		СпособЗагрузки.Вставить("ИсточникЗагрузки", "ДискИТС");
		СпособЗагрузки.Вставить("Путь", ДискИТС);
	ИначеЕсли ИсточникДанныхДляЗагрузки = 3 Тогда
		СпособЗагрузки.Вставить("ИсточникЗагрузки", "ФайлыНаДиске");
		СпособЗагрузки.Вставить("Путь", ПутьКФайламДанныхНаДиске);
	КонецЕсли;
	
	// формируем возвращаемую структуру
	
	Результат = Новый Структура("СписокАдресныхОбъектов, СпособЗагрузки",
	                            ЗагружаемыеАдресныеОбъекты,
	                            СпособЗагрузки);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
// Возвращает количество помеченных адресных объектов
//
Функция КоличествоВыделенныхАдресныхОбъектов()
	
	КоличествоВыделенныхАдресныхОбъектов = 0;
	
	Для Каждого ЭлементАдресныйОбъект Из АдресныеОбъектыДляЗагрузки Цикл
		Если ЭлементАдресныйОбъект.Пометка Тогда
			КоличествоВыделенныхАдресныхОбъектов = КоличествоВыделенныхАдресныхОбъектов + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КоличествоВыделенныхАдресныхОбъектов;
	
КонецФункции

&НаКлиенте
// В зависимости от пользовательского выбора устанавалиет
// доступность тех или иных полей для пользователя
//
Процедура УстановитьИзмененияВИнтерфейсе()
	
	УстановитьДоступностьКнопкиВыбораСпособаЗагрузки();
	
	Если      ИсточникДанныхДляЗагрузки = 1 Тогда
		Элементы.СтраницыСпособаЗагрузки.ТекущаяСтраница = Элементы.ПустаяСтраница;
	ИначеЕсли ИсточникДанныхДляЗагрузки = 2 Тогда
		Элементы.СтраницыСпособаЗагрузки.ТекущаяСтраница = Элементы.СтраницаЗагрузкаСДискаИТС;
	ИначеЕсли ИсточникДанныхДляЗагрузки = 3 Тогда
		Элементы.СтраницыСпособаЗагрузки.ТекущаяСтраница = Элементы.СтраницаЗагрузкаФайлов;
	Иначе
		Элементы.СтраницыСпособаЗагрузки.ТекущаяСтраница = Элементы.ПустаяСтраница;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Устанаваливает доступность кнопки продолжения загрузки
// в зависимости от от корректности заполнения способа зугрузки,
// и путей к данным
//
Процедура УстановитьДоступностьКнопкиВыбораСпособаЗагрузки()
	
	ДоступностьКнопки = Ложь;
	
	Если     ИсточникДанныхДляЗагрузки = 1 Тогда
		//ДоступностьКнопки = Истина;
	ИначеЕсли ИсточникДанныхДляЗагрузки = 2 Тогда
		//Если АдресныйКлассификаторКлиент.ПроверитьНаличиеФайловНаДискеИТС(ДискИТС) Тогда
		//	ДоступностьКнопки = Истина;
		//КонецЕсли;
	ИначеЕсли ИсточникДанныхДляЗагрузки = 3 Тогда
		Если АдресныйКлассификаторКлиент.ПроверитьНаличиеФайловДанныхВКаталоге(ПутьКФайламДанныхНаДиске) Тогда
			ДоступностьКнопки = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.Продолжить.Доступность = ДоступностьКнопки;
	
КонецПроцедуры
