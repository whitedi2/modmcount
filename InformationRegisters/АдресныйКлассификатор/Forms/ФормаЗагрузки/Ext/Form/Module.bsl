
////////////////////////////////////////////////////////////////////////////////
// БЛОК ОБРАБОТЧИКОВ СОБЫТИЙ
//

&НаСервере
// Обработчик события ПриСозданииНаСервере формы
// Подготавливает компоновку загрузки
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОписаниеСпособаЗагрузки = Параметры.СпособЗагрузки;
	АдресныеОбъекты = Параметры.СписокАдресныхОбъектов.Скопировать();
	КомпоновкаИтоговЗагрузки();
	
КонецПроцедуры

&НаКлиенте
// Обработчик нажатия на кнопку "Загрузить" командной панели формы
// Релизация загрузки классификатора
//
Процедура ЗагрузитьВыполнить()
	
	УстановитьСтатусЗагрузкиАктивность();
	
	ИсточникДанныхДляЗагрузки = ОписаниеСпособаЗагрузки["ИсточникЗагрузки"];
	
	// Первый этап - загрузка адаптированной базы данных КЛАДР на сервер.
	// В зависимости от выбора метода загрузка осуществляется по разному.
	Если ИсточникДанныхДляЗагрузки = "ФайлыНаДиске" Тогда // Выбрал источник - загрузка файлов с диска
		
		ПутьКФайламДанныхНаДиске = ОписаниеСпособаЗагрузки["Путь"];
		
		Если ЗначениеЗаполнено(СокрЛП(ПутьКФайламДанныхНаДиске)) Тогда
			Если Прав(ПутьКФайламДанныхНаДиске, 1) <> "\" Тогда
				ПутьКФайламДанныхНаДиске = ПутьКФайламДанныхНаДиске + "\";
			КонецЕсли;
			Если АдресныйКлассификаторКлиент.ПроверитьНаличиеФайловДанныхВКаталоге(ПутьКФайламДанныхНаДиске) Тогда
				УстановитьСтатусЗагрузки(НСтр("ru = 'Производится сжатие файлов перед передачей на сервер'"));
				// Сжимаем файлы перед передачей на сервер
				#Если Не ВебКлиент И Не МобильныйКлиент И Не МобильноеПриложениеКлиент Тогда
				ПутьКДанным = СжатьФайлы(ПутьКФайламДанныхНаДиске);
				#Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Сжатие файлов не может быть выполнено на веб клиенте'"));
				Возврат;
				#КонецЕсли
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Файлы данных не найдены в каталоге'"));
				Возврат;
			КонецЕсли;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Необходимо выбрать путь к каталогу с файлами'"));
			Возврат;
		КонецЕсли;
	// Выбрал источник - загрузка файлов с диска ИТС
	ИначеЕсли ИсточникДанныхДляЗагрузки = "ДискИТС" Тогда
		ДискИТС = ОписаниеСпособаЗагрузки["Путь"];
		
		Если ЗначениеЗаполнено(СокрЛП(ДискИТС)) Тогда
			Если Прав(ДискИТС, 1) <> "\" Тогда
				ДискИТС = ДискИТС + "\";
			КонецЕсли;
			
			Если АдресныйКлассификаторКлиент.ПроверитьНаличиеФайловНаДискеИТС(ДискИТС) Тогда
				#Если Не ВебКлиент И Не МобильныйКлиент И Не МобильноеПриложениеКлиент Тогда
				ПутьКДанным = ПривестиКZIPАРхивамКЛАДР_С_ИТС(ДискИТС);
				#Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'В веб клиенте функциональность недоступна'"));
				Возврат;
				#КонецЕсли
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Файлы данных не найдены на диске ИТС'"));
			КонецЕсли;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Необходимо выбрать путь к диску ИТС'"));
			Возврат;
		КонецЕсли;
		
		// Выбрана загрузка файлов с Веб сервера 1с
	ИначеЕсли ИсточникДанныхДляЗагрузки = "ВебСервер" Тогда
		
		Результат = ОткрытьФормуМодально("РегистрСведений.АдресныйКлассификатор.Форма.АутентификацияНаПользовательскомСайте");
		
		Если Результат = Неопределено
		 Или ТипЗнч(Результат) = Тип("КодВозвратаДиалога") Тогда
			УстановитьСтатусЗагрузкиАктивность(Ложь);
			Возврат;
		Иначе
			ДанныеАутентификации = Результат;
		КонецЕсли;
		
		УстановитьСтатусЗагрузки(НСтр("ru = 'Производится загрузка файлов с веб сервера 1С'"));
		
		//получаем файлы КЛАДР с Веб сервера (получаем архивы)
		Результат = ЗагрузитьКЛАДРСВебСервера(ДанныеАутентификации);
		Если Не Результат.Статус Тогда
			УстановитьСтатусЗагрузки(НСтр("ru = 'Ошибка загрузки файлов с веб сервера 1С'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.СообщениеОбОшибке);
			Возврат;
		КонецЕсли;
		ПутьКДанным = Результат.ВремКаталог;
		
	Иначе // не выбран способ загрузки
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбран способ загрузки'"));
		Возврат;
	КонецЕсли;
	
	УстановитьСтатусЗагрузки(НСтр("ru = 'Производится передача файлов на сервер 1С:Предприятия'"));
	
	
	Если ИсточникДанныхДляЗагрузки = "ВебСервер" Тогда
		ПутьКДаннымНаСервере = ПередатьСжатыеФайлыДанныхКЛАДРНаСерверПоАдреснымОбъектам(ПутьКДанным,
		                                                                        АдресныеОбъекты);
	Иначе
		ПутьКДаннымНаСервере = ПередатьСжатыеФайлыДанныхКЛАДРНаСервер(ПутьКДанным);
		// Второй этам - занесение сведений в базу КЛАДР.
		// Предполагается что к текущему моменту на сервере в каталоге ПутьКДаннымНаСервере
		// содержатся все необходимые файлы данных
	КонецЕсли;
	
	Для Каждого АдресныйОбъект Из АдресныеОбъекты Цикл
		
		АдресныеСведения = АдресныйКлассификатор.ИнформацияПоАдресномуОбъекту(АдресныйОбъект.Значение);
		
		УстановитьСтатусЗагрузки("Загружается: " + АдресныеСведения.Наименование + " " + АдресныеСведения.Сокращение);
		АдресныйКлассификатор.ЗагрузитьКлассификаторПоАдресномуОбъекту(АдресныйОбъект.Значение,
		                                                               ПутьКДаннымНаСервере,
		                                                               ИсточникДанныхДляЗагрузки);
	КонецЦикла;
	
	#Если Не ВебКлиент И Не МобильныйКлиент И Не МобильноеПриложениеКлиент Тогда
	Если ИсточникДанныхДляЗагрузки = "ВебСервер" Тогда
		ПолучитьФайлВерсийИОбновитьВерсиюАдресныхСведений();
	КонецЕсли;
	#Иначе
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'В веб клиенте функциональность постановки на поддержку недоступна'"));
	Возврат;
	#КонецЕсли

	#Если Не ВебКлиент И Не МобильныйКлиент И Не МобильноеПриложениеКлиент Тогда
	Попытка
		УдалитьФайлы(ПутьКДанным, "*.*");
	Исключение
	КонецПопытки;
	#КонецЕсли
	УдалитьВременныеФайлыНаСервере(ПутьКДаннымНаСервере);
	
	Предупреждение(НСтр("ru = 'Адресный классификатор успешно загружен'"),,
	               НСтр("ru = 'Загрузка адресного классификатора'"));
	
	Закрыть(Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// БЛОК СЕРВИСНЫХ ФУНКЦИЙ
//

&НаСервере
// Выводит информацию о параметрах загрузки - список адресных объектов,
// а так же способ загрузки
//
Процедура КомпоновкаИтоговЗагрузки()
	
	ИсточникДанныхДляЗагрузки = ОписаниеСпособаЗагрузки["ИсточникЗагрузки"];
	
	// формируем "итоги" компоновки загрузки
	ИтогКомпоновкиЗагрузки = НСтр("ru = 'Список адресных объектов для загрузки:'") + Символы.ПС;
	
	Для Каждого АдресныйОбъект Из АдресныеОбъекты Цикл
		
		АдресныеСведения = АдресныйКлассификатор.ИнформацияПоАдресномуОбъекту(АдресныйОбъект.Значение);
		
		ИтогКомпоновкиЗагрузки = ИтогКомпоновкиЗагрузки 
		                       + Лев(АдресныеСведения.КодАдресногоОбъекта, 2)
		                       + " - "
		                       + АдресныеСведения.Наименование
		                       + " "
		                       + АдресныеСведения.Сокращение
		                       + Символы.ПС;
	КонецЦикла;
	
	Если ИсточникДанныхДляЗагрузки = "ФайлыНаДиске" Тогда
		ПутьКФайламДанныхНаДиске = ОписаниеСпособаЗагрузки["Путь"];
		ИтогКомпоновкиЗагрузки = ИтогКомпоновкиЗагрузки 
		                       + НСтр("ru = 'Загрузка будет произведена с каталога:'")
		                       + Символы.ПС
		                       + ПутьКФайламДанныхНаДиске;
	ИначеЕсли ИсточникДанныхДляЗагрузки = "ДискИТС" Тогда
		ИтогКомпоновкиЗагрузки = ИтогКомпоновкиЗагрузки + НСтр("ru = 'Загрузка будет произведена с диска ИТС'");
	ИначеЕсли ИсточникДанныхДляЗагрузки = "ВебСервер" Тогда
		ИтогКомпоновкиЗагрузки = ИтогКомпоновкиЗагрузки 
		                       + НСтр("ru = 'Загрузка будет произведена с сайта компании ""1С""'") + Символы.ПС;
	КонецЕсли;
	
	ИтогКомпоновкиЗагрузки = ИтогКомпоновкиЗагрузки + Символы.ПС + Символы.ПС
	                       + НСтр("ru = 'Внимание!!! Загрузка данных может занять значительное время.'");
КонецПроцедуры

&НаКлиенте
// Устанавливает видимой страницу со статусом загрузки
//
Процедура УстановитьСтатусЗагрузкиАктивность(знач Активность = Истина)
	
	Если Активность Тогда
		Элементы.ГруппаИнформацияОЗагрузке.ТекущаяСтраница = Элементы.ГруппаСтатус;
	Иначе
		Элементы.ГруппаИнформацияОЗагрузке.ТекущаяСтраница = Элементы.ПустаяГруппа;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Устанавливает текст статус загрузки
//
Процедура УстановитьСтатусЗагрузки(знач Сообщение = "")
	
	СтатусЗагрузки = Сообщение;
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// БЛОК ФУНКЦИЙ, ПЕРЕДАЧИ ФАЙЛОВ С КЛИЕНТА НА СЕРВЕР
//

&НаСервереБезКонтекста
// Удаляет временные файлы на сервере 1с:Предприятие
//
Процедура УдалитьВременныеФайлыНаСервере(ПутьКФайлам)
	
	УдалитьФайлы(ПутьКФайлам, "*.*");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьФайлИПередатьНаСервер(ИмяФайла, ПутьКФайламНаКлиенте, ПутьККаталогуНаСервере)

	ПутьКФайлуАрхива = ПутьКФайламНаКлиенте + "\" + ИмяФайла;
	ДвоичныеДанные = Новый ДвоичныеДанные (ПутьКФайлуАрхива);
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище (ДвоичныеДанные, ЭтаФорма.УникальныйИдентификатор);
	СохранитьФайлНаСервере(АдресВоВременномХранилище, ИмяФайла, ПутьККаталогуНаСервере);

КонецПроцедуры

&НаКлиенте
// Передает сжатые файлы КЛАДР на сервер. На стороне сервера файлы 
// разархивируются. Передаются неразбитые по адресным объектам файлы.
//
Функция ПередатьСжатыеФайлыДанныхКЛАДРНаСервер(ПутьКФайламНаКлиенте)
	
	ПутьККаталогуНаСервере = ПолучитьИмяКаталогаНаСервере();
	МассивФайловДляЗагрузки = АдресныйКлассификаторКлиент.СписокФайловДанных();
	
	Для Каждого ИмяФайла Из МассивФайловДляЗагрузки Цикл
		ПутьКФайлуАрхива = ПутьКФайламНаКлиенте
		                 + АдресныйКлассификаторКлиент.ЗаменитьРасширение_DBF_На_ZIP(ИмяФайла);
		Файл = Новый Файл(ПутьКФайлуАрхива);
		Если Файл.Существует() Тогда
			ДвоичныеДанные = Новый ДвоичныеДанные (ПутьКФайлуАрхива);
			АдресВоВременномХранилище = ПоместитьВоВременноеХранилище (ДвоичныеДанные, ЭтаФорма.УникальныйИдентификатор);
			СохранитьФайлНаСервере(АдресВоВременномХранилище, ИмяФайла, ПутьККаталогуНаСервере);
		КонецЕсли;
	КонецЦикла;
		
	Возврат ПутьККаталогуНаСервере;
	
КонецФункции

&НаСервереБезКонтекста
// Сохраняет файл из временного хранилища на сервере по переданному имени в
// переданном каталоге
//
Процедура СохранитьФайлНаСервере(АдресВоВременномХранилище, ИмяФайла, ПутьККаталогу)
	
	ИмяФайлаАрхива = Лев(ИмяФайла, СтрДлина(ИмяФайла)-3) + "zip";
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	ДвоичныеДанные.Записать(ПутьККаталогу + ИмяФайлаАрхива);
	
	ЧтениеZIP = Новый ЧтениеZipФайла(ПутьККаталогу+ИмяФайлаАрхива);
	ЧтениеZIP.ИзвлечьВсе(ПутьККаталогу,
	                     РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	ЧтениеZIP.Закрыть();
	УдалитьФайлы(ПутьККаталогу, ИмяФайлаАрхива);
	
КонецПроцедуры

&НаСервереБезКонтекста
// Генерирует имя временного каталога на сервере и возвращает его
//
Функция ПолучитьИмяКаталогаНаСервере()
	
	Индекс = 0;
	
	Пока Истина Цикл
		
		ПутьККаталогу = КаталогВременныхФайлов () + "kladr_files" + строка(Индекс) + "\";
		КаталогНаДиске = Новый Файл(ПутьККаталогу);
		Если НЕ КаталогНаДиске.Существует() Тогда
			СоздатьКаталог(ПутьККаталогу);
			Возврат ПутьККаталогу;
		КонецЕсли;
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
КонецФункции

#Если Не ВебКлиент И Не МобильныйКлиент И Не МобильноеПриложениеКлиент Тогда
&НаКлиенте
// Распаковывает файлы с диска ИТС и преобразует их к формату zip
//
Функция ПривестиКZIPАРхивамКЛАДР_С_ИТС(знач ДискИТС)
	
	TempКаталог = КаталогВременныхФайлов() + "kladr_files\";
	СоздатьКаталог(TempКаталог);
	
	Если Прав(ДискИТС, 1) = "\" Тогда
		ДискИТС = Лев(ДискИТС, СтрДлина(ДискИТС) - 1);
	КонецЕсли;
	
	ПутьКФайламНаДискеИТС = ДискИТС + АдресныйКлассификаторКлиент.ПутьККаталогуСДаннымиКЛАДРНаДискеИТС(ДискИТС);
	СписокФайловДанных = АдресныйКлассификаторКлиент.СписокФайловДанныхНаДискеИТС();
	
	Для Каждого ИмяФайла Из СписокФайловДанных Цикл
		ПолныйПутьКФайлуSource = ПутьКФайламНаДискеИТС + ИмяФайла;
		ПолныйПутьКФайлуDest   = TempКаталог + ИмяФайла;
		Файл = Новый Файл(ПолныйПутьКФайлуSource);
		Если Файл.Существует() Тогда
			КопироватьФайл(ПолныйПутьКФайлуSource, ПолныйПутьКФайлуDest);
			Файл = Новый Файл(ПолныйПутьКФайлуDest);
			Файл.УстановитьТолькоЧтение(Ложь);
			КомандаСистемы(ИмяФайла, TempКаталог);
		КонецЕсли;
	КонецЦикла;
	
	ПутьКДанным = СжатьФайлы (TempКаталог);
	
	Возврат ПутьКДанным;
	
КонецФункции

&НаКлиенте
// Сжимает файлы поставки адресного классификатора
//
Функция СжатьФайлы(ПутьКФайламДанныхНаДиске)
	
	TempКаталог = КаталогВременныхФайлов() + "kladr_files\";
	
	СоздатьКаталог(TempКаталог);
	
	МассивФайловДляЗагрузки = АдресныйКлассификаторКлиент.СписокФайловДанных();
	
	Для Каждого ИмяФайла Из МассивФайловДляЗагрузки Цикл
		ПутьКФайлуDBF = ПутьКФайламДанныхНаДиске + "\" + ИмяФайла;
		Файл = Новый Файл(ПутьКФайлуDBF);
		Если Файл.Существует() Тогда
			ПутьКФайлуАрхива = TempКаталог + АдресныйКлассификаторКлиент.ЗаменитьРасширение_DBF_На_ZIP(ИмяФайла);
			ZIPФайл = Новый ЗаписьZipФайла(ПутьКФайлуАрхива, , , 
			                               МетодСжатияZIP.Сжатие,
			                               УровеньСжатияZIP.Оптимальный);
			ZIPФайл.Добавить(ПутьКФайлуDBF);
			ZIPФайл.Записать();
		КонецЕсли;
	КонецЦикла;
	
	Возврат TempКаталог;

КонецФункции
#КонецЕсли

&НаКлиенте
// Передает сжатые файлы КЛАДР на сервер. На стороне сервера файлы 
// разархивируются. Передаются неразбитые по адресным объектам файлы.
// Параметры:
// АдресныеОбъекты - СписокЗначений - список адресных объектов для загрузки
//                   в свойстве "значение" передается код адресного объекта в формате NN
//
Функция ПередатьСжатыеФайлыДанныхКЛАДРНаСерверПоАдреснымОбъектам(ПутьКФайламНаКлиенте, АдресныеОбъекты)
	
	ПутьККаталогуНаСервере = ПолучитьИмяКаталогаНаСервере ();
	МассивФайловДляЗагрузки = АдресныйКлассификаторКлиент.СписокФайловДанных();
	
	Для Каждого АдресныйОбъект Из АдресныеОбъекты Цикл
		ПодготовитьФайлИПередатьНаСервер("base" + АдресныйОбъект.Значение + ".zip",
		                                 ПутьКФайламНаКлиенте,
		                                 ПутьККаталогуНаСервере);
	КонецЦикла;
	
	ПодготовитьФайлИПередатьНаСервер("altnames.zip",
	                                 ПутьКФайламНаКлиенте,
	                                 ПутьККаталогуНаСервере);
	
	ПодготовитьФайлИПередатьНаСервер("socrbase.zip",
	                                 ПутьКФайламНаКлиенте,
	                                 ПутьККаталогуНаСервере);
	
	Возврат ПутьККаталогуНаСервере;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// БЛОК ФУНКЦИЙ, ОБРАБАТЫВАЮЩИХ ФУНКЦИОНАЛЬНОСТЬ ЗАГРУЗКИ С ВЕБ СЕРВЕРА
//

&НаКлиенте
// Загружает файлы КЛАДР с Веб сервера
//
Функция ЗагрузитьКЛАДРСВебСервера(знач ДанныеАутентификации = Неопределено)
	
	#Если Не ВебКлиент И Не МобильныйКлиент И Не МобильноеПриложениеКлиент Тогда
	
	URLСтрока = АдресныйКлассификатор.ПутьКФайлуДанныхКЛАДР();
	
	ВремКаталог = КаталогВременныхФайлов() + "kladr_files";
	СоздатьКаталог(ВремКаталог);
	
	ПараметрыЗагрузкиФайла = Новый Структура;
	ПараметрыЗагрузкиФайла.Вставить("Пользователь", ДанныеАутентификации.КодПользователя);
	ПараметрыЗагрузкиФайла.Вставить("Пароль",  ДанныеАутентификации.Пароль);
	
	Для Каждого КодАдресногоОбъекта Из АдресныеОбъекты Цикл
		ИмяZIP = "base" + КодАдресногоОбъекта + ".zip";
		ПараметрыЗагрузкиФайла.Вставить("ПутьДляСохранения", ВремКаталог + "\" + ИмяZIP);
		Результат = ПолучениеФайловИзИнтернетаКлиент.СкачатьФайлНаКлиенте(URLСтрока + ИмяZIP,
		                                                           ПараметрыЗагрузкиФайла);
		Если Не Результат.Статус Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыЗагрузкиФайла.Вставить("ПутьДляСохранения", ВремКаталог + "\altnames.zip");
	Результат = ПолучениеФайловИзИнтернетаКлиент.СкачатьФайлНаКлиенте(URLСтрока + "altnames.zip",
	                                                           ПараметрыЗагрузкиФайла);
	Если Не Результат.Статус Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыЗагрузкиФайла.Вставить("ПутьДляСохранения", ВремКаталог + "\socrbase.zip");
	Результат = ПолучениеФайловИзИнтернетаКлиент.СкачатьФайлНаКлиенте(URLСтрока + "socrbase.zip",
	                                                           ПараметрыЗагрузкиФайла);
	Если Не Результат.Статус Тогда
		Возврат Результат;
	КонецЕсли;
	
	Возврат Новый Структура("Статус, ВремКаталог", Истина, ВремКаталог);
	
	#КонецЕсли
	
КонецФункции

&НаКлиенте
// Функция получает файл с данными по версиям адресных сведений.
//
Функция ПолучитьФайлВерсийИОбновитьВерсиюАдресныхСведений()
	
	Результат = ПолучениеФайловИзИнтернетаКлиент.СкачатьФайлНаКлиенте(АдресныйКлассификаторКлиент.ПутьКФайлуОписаниюДанныхКЛАДР());
	
	Если Не Результат.Статус Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДвоичныеДанные = Новый ДвоичныеДанные(Результат.Путь);
	
	УдалитьФайлы(Результат.Путь);
	
	ОбновитьВерсиюАдресныхСведений(ДвоичныеДанные);
	
	Возврат Новый Структура("Статус", Истина);
	
КонецФункции

&НаСервере
// Функция ставит на поддержку адресные объекты. Фактически происходит заполнение
// регистра сведений соответсвием кодов адресных объектов датами актуальности
//
Процедура ОбновитьВерсиюАдресныхСведений(ДвоичныеДанные)
	
	ПутьКФайлуВерсий = ПолучитьИмяВременногоФайла();
	
	ДвоичныеДанные.Записать(ПутьКФайлуВерсий);
	
	Сведения = АдресныйКлассификатор.ПолучитьВерсииАдресныхСведений(ПутьКФайлуВерсий);
	
	Для Каждого АдресныйОбъект Из АдресныеОбъекты Цикл
		АдресныеСведения = АдресныйКлассификатор.ИнформацияПоАдресномуОбъекту(АдресныйОбъект.Значение);
		
		ВерсияСведенийПоАдесномуОбъекту = Сведения[АдресныйОбъект.Значение];
		АдресныйКлассификатор.УстановитьВерсиюКлассификатора(
		                               АдресныйОбъект.Значение,
		                               АдресныеСведения.Наименование + " " + АдресныеСведения.Сокращение,
		                               ВерсияСведенийПоАдесномуОбъекту);
	КонецЦикла;
	
	УдалитьФайлы(ПутьКФайлуВерсий);
	
КонецПроцедуры
