
&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОсуществитьВыбор();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыбратьВыполнить()
	
	ОсуществитьВыбор();
	
КонецПроцедуры

&НаКлиенте
Процедура ОсуществитьВыбор()
	
	текДанные = Элементы.Список.ТекущиеДанные;
	Если текДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура("Наименование,Сокращение", текДанные.Наименование, текДанные.Сокращение);
	Закрыть(Результат);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПоляПоУровню(Уровень)
	
	Поля = Новый Структура;
	Поля.Вставить("Область",         ?(Уровень <= 1, "", Параметры.Область));
	Поля.Вставить("Регион",          ?(Уровень <= 2, "", Параметры.Регион));
	Поля.Вставить("Район",           ?(Уровень <= 3, "", Параметры.Район));
	Поля.Вставить("Город",           ?(Уровень <= 4, "", Параметры.Город));
	Поля.Вставить("НаселенныйПункт", ?(Уровень <= 5, "", Параметры.НаселенныйПункт));
	Поля.Вставить("Улица",           ?(Уровень <= 6, "", Параметры.Улица));
	
	Возврат Поля;
	
КонецФункции

&НаСервере
Функция ПолучитьОграниченияПоУровню(Уровень)
	
	Поля = ПолучитьПоляПоУровню(Уровень);
	Ограничения = ВернутьСтруктуруОграниченийПоРодителю(Поля.Область, Поля.Регион, Поля.Район, Поля.Город, Поля.НаселенныйПункт, Поля.Улица, 0);
	Ограничения.Вставить("ТипАдресногоЭлемента", Параметры.Уровень);
	
	Возврат Ограничения;
	
КонецФункции

Функция МаскаОбласти()
	Возврат 1000000000000000000000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаРегиона()
	Возврат 10000000000000000000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаРайона()
	Возврат 10000000000000000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаГорода()
	Возврат 10000000000000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаНасПункта()
	Возврат 10000000000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаУлицы()
	Возврат 1000000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаДома()
	Возврат 100;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаКвартиры()
	Возврат 100;
КонецФункции


// Функция ставит в соответствие типу адресного элемента маску,
// через которую выделяется его значимый код
//
// Параметры:
//  ТипАдресногоЭлемента -  число - тип адресного элемента.
//
// Возвращаемое значение:
// Число - маска, при делении на которую выделяется значимый код
// адресного элемента
//
Функция ПолучитьМаскуПоТипу(ТипАдресногоЭлемента)

	Если ТипАдресногоЭлемента = 1 Тогда
		Возврат МаскаРегиона();

	ИначеЕсли ТипАдресногоЭлемента = 2 Тогда
		Возврат МаскаРайона();

	ИначеЕсли ТипАдресногоЭлемента = 3 Тогда
		Возврат МаскаГорода();

	ИначеЕсли ТипАдресногоЭлемента = 4 Тогда
		Возврат МаскаНасПункта();

	ИначеЕсли ТипАдресногоЭлемента = 5 Тогда
		Возврат МаскаУлицы();

	ИначеЕсли ТипАдресногоЭлемента = 6 Тогда
		Возврат МаскаДома();

	Иначе
		Возврат МаскаКвартиры();

	КонецЕсли;

КонецФункции


// Функция возвращает структуру ограничений по переданным параметрам
// уже заполненным адресным полям
//
// Параметры: 
// Параметры: 
//  НазваниеРегиона - название региона( с сокращением)
//  НазваниеРайона - название района( с сокращением)
//  НазваниеГорода - название города( с сокращением)
//  НазваниеНаселенногоПункта - название населенного пункта( с сокращением)
//
Функция ВернутьСтруктуруОграниченийПоРодителю(Знач НазваниеОбласти,Знач НазваниеРегиона, Знач НазваниеРайона, Знач НазваниеГорода, 
											Знач НазваниеНаселенногоПункта, Знач НазваниеУлицы, КодРодителя) Экспорт
	
	СтруктураОграничений = Новый Структура();
	РодительскийЭлемент = ВернутьСтрокуАдресногоКлассификатораПоАдреснымЭлементам(НазваниеОбласти, НазваниеРегиона, НазваниеРайона, НазваниеГорода, 
											НазваниеНаселенногоПункта, НазваниеУлицы);
	
	КодРодителя = РодительскийЭлемент.Код;
	
	// по коду определяем уровень элемента
	ТипЭлемента = ПолучитьТипАдресногоЭлемента(КодРодителя);
	ДобавитьКодВСтруктуру(СтруктураОграничений, "КодОбластиВКоде", Цел(КодРодителя / МаскаОбласти()), ТипЭлемента, 1);
	ДобавитьКодВСтруктуру(СтруктураОграничений, "КодРегионаВКоде", Цел(КодРодителя / МаскаРегиона()), ТипЭлемента, 2);
    ДобавитьКодВСтруктуру(СтруктураОграничений, "КодРайонаВКоде", Цел(КодРодителя / МаскаРайона()) % 1000, ТипЭлемента, 3);
	ДобавитьКодВСтруктуру(СтруктураОграничений, "КодГородаВКоде", Цел(КодРодителя / МаскаГорода()) % 1000, ТипЭлемента, 4);
	ДобавитьКодВСтруктуру(СтруктураОграничений, "КодНаселенногоПунктаВКоде", Цел(КодРодителя / МаскаНасПункта()) % 1000, ТипЭлемента, 5);
	ДобавитьКодВСтруктуру(СтруктураОграничений, "КодУлицыВКоде", Цел(КодРодителя / МаскаУлицы())% 10000, ТипЭлемента, 6);
	
	Возврат СтруктураОграничений;
	
КонецФункции

// Процедура добавляет не нулевое значение кода в структуру
Процедура ДобавитьКодВСтруктуру(ДанныеСтруктуры, ИмяЭлемента, КодЭлемента, УровеньРодителя, УровеньЭлемента)
	
	Если (КодЭлемента <> 0) ИЛИ (УровеньРодителя >= УровеньЭлемента) Тогда
		ДанныеСтруктуры.Вставить(ИмяЭлемента, КодЭлемента);
    КонецЕсли;
	
КонецПроцедуры

// Функция ставит в соответствие типу адресного элемента маску,
// через которую выделяется его значимый код
//
// Параметры:
//  ТипАдресногоЭлемента -  число - тип адресного элемента.
//
// Возвращаемое значение:
// Число - маска, при делении на которую выделяется значимый код
// адресного элемента
//
Функция ПолучитьТипАдресногоЭлемента(КодЭлемента)
	
	Если КодЭлемента = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Если КодЭлемента % МаскаОбласти() < 100  Тогда
		Возврат 1
		
	ИначеЕсли КодЭлемента % МаскаРегиона() < 100  Тогда // регион 21 ноль и АА
		Возврат 2;
		
	ИначеЕсли КодЭлемента % МаскаРайона() < 100 Тогда // район 18 ноль и АА
		Возврат 3;
		
	ИначеЕсли КодЭлемента % МаскаГорода() < 100 Тогда // город 15 ноль и АА
		Возврат 4;
		
	ИначеЕсли КодЭлемента % МаскаНасПункта() < 100 Тогда // населнныйп ункт 12 ноль и АА
		Возврат 5;
		
	ИначеЕсли КодЭлемента % МаскаУлицы() < 100 Тогда // улица 8 ноль и АА
		Возврат 6;
		
	ИначеЕсли КодЭлемента % МаскаДома() < 100 Тогда // дом 4 ноль и АА
		Возврат 7;
		
	Иначе // квартира
		Возврат 8;
		
	КонецЕсли;
	
КонецФункции

// Функция возвращает структуру с набором полей как у записи регистра сведений
//  АдресныйКлассификатор с пустым набором значений
//
// Параметры:
// Нет.
//
// Возвращаемое значение:
// Струтктура - структуру с набором полей как у записи регистра сведений
//  АдресныйКлассификатор с пустым набором значений
//
Функция ПолучитьПустуюСтруктуруАдреса()
	
	Возврат Новый Структура("Код,Наименование,Сокращение,ТипАдресногоЭлемента,Индекс,КодОбластиВКоде,КодРегионаВКоде,КодРайонаВКоде,КодГородаВКоде,КодНаселенногоПунктаВКоде,КодУлицыВКоде", 0, "", "", 0, "", 0, 0, 0, 0, 0, 0);
	
КонецФункции

// Функция по полному наименованию адресного элемента выдает отдельно его имя, и отдельно его адресное сокращение
Функция ПолучитьИмяИАдресноеСокращение(Знач СтрокаЭлемента, АдресноеСокращение)

	Буфер = СокрП(СтрокаЭлемента);
	ПозицияПослПробела = Найти(Буфер, " ");

	Если ПозицияПослПробела = 0 Тогда
		Возврат СтрокаЭлемента;
	КонецЕсли;
	
	Пока  СтрЧислоВхождений(Буфер, " ") > 1 Цикл
		Буфер = Лев(Буфер, ПозицияПослПробела - 1) + "_" + Сред(Буфер, ПозицияПослПробела + 1);
		ПозицияПослПробела = Найти(Буфер, " ");
	КонецЦикла;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	АдресныеСокращения.Сокращение
	|ИЗ
	|	РегистрСведений.АдресныеСокращения КАК АдресныеСокращения
	|ГДЕ
	|	АдресныеСокращения.Сокращение = &Сокращение";
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Сокращение", Сред(СтрокаЭлемента, ПозицияПослПробела + 1));
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Если ПустаяСтрока(СокрЛП(Лев(СтрокаЭлемента, ПозицияПослПробела - 1))) Тогда
			Возврат СтрокаЭлемента;
		Иначе
			АдресноеСокращение = Сред(СтрокаЭлемента, ПозицияПослПробела + 1);
			Возврат Лев(СтрокаЭлемента, ПозицияПослПробела - 1);
		КонецЕсли;
	Иначе
		Возврат СтрокаЭлемента;
	КонецЕсли;
  	
КонецФункции

// Процедура раскладывает код адресного элемента на составляющие:
// Код Региона, код района, код города, код населенного пункта, код улицы и код дома
Процедура РазложитькодАдресногоЭлементаНаСоставляющие(Знач Код, КодРегиона, КодРайона, КодГорода, КодНаселенногоПункта, КодУлицы, КодДома)
	
	КодЭлемента = Код;
	
	КодРегиона = Цел(КодЭлемента / МаскаРегиона());
	КодЭлемента = КодЭлемента % МаскаРегиона();

	КодРайона = Цел(КодЭлемента / МаскаРайона());
	КодЭлемента = КодЭлемента % МаскаРайона();

	КодГорода = Цел(КодЭлемента / МаскаГорода());
	КодЭлемента = КодЭлемента % МаскаГорода();

	КодНаселенногоПункта = Цел(КодЭлемента / МаскаНасПункта());
	КодЭлемента = КодЭлемента % МаскаНасПункта();

	КодУлицы = Цел(КодЭлемента / МаскаУлицы());
	КодЭлемента = КодЭлемента % МаскаУлицы();

	КодДома = Цел(КодЭлемента / МаскаДома());

КонецПроцедуры // РазложитькодАдресногоЭлементаНаСоставляющие()

// Функция ищет требуемый адресный элемент по названию и типу 
// и возвращает первый найденный. В качестве дополнения может 
// быть задан элемент "родитель"
//
// Параметры:
//  НазваниеЭлемента - название адресного элемента ( с сокращением)
//  ТипЭлемента - тип искомого адресного элемента
//  ЭлементРодитель - элемент "родитель"
//
// Возвращаемое значение:
//  Найденный элемент справоника Адресный классификатор или пустая ссылка в случае неудачи
//
Функция ПолучитьАдресныйЭлемент(НазваниеЭлемента, ТипЭлемента, КодЭлементаРодителя = 0)

	Перем КодРегиона, КодРайона, КодГорода, КодНаселенногоПункта, КодУлицы, КодДома;
	
	Если (СокрЛП(НазваниеЭлемента) = "") ИЛИ (ТипЭлемента = 0) Тогда
		Возврат ПолучитьПустуюСтруктуруАдреса();
	КонецЕсли;
	
	// смотрим есть ли в имени адресное сокращение этого уровня
	// если есть, то ищем по наименованию и адресному сокращению
	АдресноеСокращение = "";
	НазваниеЭлемента = ПолучитьИмяИАдресноеСокращение(НазваниеЭлемента, АдресноеСокращение);

	Запрос = Новый Запрос();
	
	ОграничениеПоКоду = "";
	Если КодЭлементаРодителя > 0 Тогда // проверка на соответствие подчинению родителю
		ТипАдрЭлемента = ПолучитьТипАдресногоЭлемента(КодЭлементаРодителя);
		МаскаРодителя = ПолучитьМаскуПоТипу(ТипАдрЭлемента);
		
		Если ТипАдрЭлемента <= 5 Тогда
			
			КодЭлемента = КодЭлементаРодителя;
			
			РазложитькодАдресногоЭлементаНаСоставляющие(КодЭлемента, КодРегиона, КодРайона, КодГорода, КодНаселенногоПункта, КодУлицы, КодДома);

			Если КодРегиона <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС + "  И (АдресныйКлассификатор.КодРегионаВКоде = &КодРегионаВКоде)";
				Запрос.УстановитьПараметр("КодРегионаВКоде", КодРегиона);
			КонецЕсли;
			
			Если КодРайона <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС + "  И (АдресныйКлассификатор.КодРайонаВКоде = &КодРайонаВКоде)";
				Запрос.УстановитьПараметр("КодРайонаВКоде", КодРайона);
			КонецЕсли;
			
			Если КодГорода <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС + "  И (АдресныйКлассификатор.КодГородаВКоде = &КодГородаВКоде)";
				Запрос.УстановитьПараметр("КодГородаВКоде", КодГорода);
			КонецЕсли;
			
			Если КодНаселенногоПункта <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС + "  И (АдресныйКлассификатор.КодНаселенногоПунктаВКоде = &КодНаселенногоПунктаВКоде)";
				Запрос.УстановитьПараметр("КодНаселенногоПунктаВКоде", КодНаселенногоПункта);
			КонецЕсли;
			
			Если КодУлицы <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС + "  И (АдресныйКлассификатор.КодУлицыВКоде = &КодУлицыВКоде)";
				Запрос.УстановитьПараметр("КодУлицыВКоде", КодУлицы);
			КонецЕсли;
		
		Иначе
			// ограничиваем по коду элемента
			КонечноеЗначениеКода = КодЭлементаРодителя + МаскаРодителя - 1; 
			
			ОграничениеПоКоду = Символы.ПС + "  И (АдресныйКлассификатор.Код Между &НачальноеЗанчениеКода И &КонечноеЗначениеКода)";
			Запрос.УстановитьПараметр("НачальноеЗанчениеКода", КодЭлементаРодителя);
			Запрос.УстановитьПараметр("КонечноеЗначениеКода", КонечноеЗначениеКода);
		КонецЕсли;
		
	КонецЕсли;
	
	// ограничение на адресное сокращение
	Если АдресноеСокращение <> "" Тогда
		ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС + "  И (АдресныйКлассификатор.Сокращение = &АдресноеСокращение)";
		Запрос.УстановитьПараметр("АдресноеСокращение", АдресноеСокращение);
	КонецЕсли;
	
    Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				  |	АдресныйКлассификатор.Код,
	              |	АдресныйКлассификатор.КодАдресногоОбъектаВКоде,
	              |	АдресныйКлассификатор.Наименование,
	              |	АдресныйКлассификатор.Сокращение,
	              |	АдресныйКлассификатор.Индекс,
	              |	АдресныйКлассификатор.ТипАдресногоЭлемента,
	              |	АдресныйКлассификатор.КодРайонаВКоде,
	              |	АдресныйКлассификатор.КодГородаВКоде,
	              |	АдресныйКлассификатор.КодНаселенногоПунктаВКоде,
	              |	АдресныйКлассификатор.КодУлицыВКоде

	              |ИЗ
	              |	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	              |
	              |ГДЕ
	              |	АдресныйКлассификатор.Наименование = &Наименование И
	              |	АдресныйКлассификатор.ТипАдресногоЭлемента = &ТипАдресногоЭлемента " +
				  ОграничениеПоКоду;
	

	Запрос.УстановитьПараметр("Наименование", НазваниеЭлемента);
	Запрос.УстановитьПараметр("ТипАдресногоЭлемента", ТипЭлемента);
		
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Структура = СоздатьСтруктуруПоСтрокеВыборки(РезультатЗапроса, Выборка);
	Иначе 
		Структура =  ПолучитьПустуюСтруктуруАдреса();
	КонецЕсли;
	
	Возврат Структура;

КонецФункции

// Процедура переносит строку из запроса в Структуру
Процедура ПеренестиСтрокуВыборкиВСтруктуру(РезультатЗапроса, СтрокаВыборки, СтруктураЭлемента) 
	
	Если СтруктураЭлемента = Неопределено 
		ИЛИ РезультатЗапроса = Неопределено 
		ИЛИ СтрокаВыборки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЭлемента.Очистить();
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		СтруктураЭлемента.Вставить(Колонка.Имя, СтрокаВыборки[Колонка.Имя]);
	КонецЦикла;
	
КонецПроцедуры // ПеренестиСтрокуВыборкиВСтруктуру()

// Функция создает структуру по строке выборки
Функция СоздатьСтруктуруПоСтрокеВыборки(РезультатЗапроса, СтрокаВыборки)
	
	РезультирующаяСтруктура = Новый Структура;
	ПеренестиСтрокуВыборкиВСтруктуру(РезультатЗапроса, СтрокаВыборки, РезультирующаяСтруктура);
	Возврат РезультирующаяСтруктура; 
	
КонецФункции



// Функция возвращает строку адресного классификатора по значениям адресных элементов
Функция ВернутьСтрокуАдресногоКлассификатораПоАдреснымЭлементам(Знач НазваниеОбласти, Знач НазваниеРегиона, Знач НазваниеРайона, Знач НазваниеГорода, 
											Знач НазваниеНаселенногоПункта, Знач НазваниеУлицы) Экспорт
											
	РодительскийЭлемент = Неопределено;
	КодРодителяРодителя = 0;

	Область = ПолучитьАдресныйЭлемент(НазваниеОбласти,1);
	Если Область.Код > 0 Тогда
		РодительскийЭлемент = Область;
		КодРодителяРодителя = Область.код;
	КонецЕсли;
		
	Регион = ПолучитьАдресныйЭлемент(НазваниеРегиона, 2, КодРодителяРодителя);
	Если Регион.Код > 0 Тогда
		РодительскийЭлемент = Регион;
		КодРодителяРодителя = Регион.Код;
	КонецЕсли;
	
	Район = ПолучитьАдресныйЭлемент(НазваниеРайона, 3, КодРодителяРодителя);
	Если Район.Код > 0 Тогда
		РодительскийЭлемент = Район;
		КодРодителяРодителя = Район.Код;
	КонецЕсли;
	
	Город = ПолучитьАдресныйЭлемент(НазваниеГорода, 4, КодРодителяРодителя);
    Если Город.Код > 0 Тогда
		РодительскийЭлемент = Город;
		КодРодителяРодителя = Город.Код;
	КонецЕсли;
	
	НаселенныйПункт = ПолучитьАдресныйЭлемент(НазваниеНаселенногоПункта, 5, КодРодителяРодителя);
	Если НаселенныйПункт.Код > 0 Тогда
		РодительскийЭлемент = НаселенныйПункт;
		КодРодителяРодителя = НаселенныйПункт.Код;
	КонецЕсли;
	
	Улица = ПолучитьАдресныйЭлемент(НазваниеУлицы, 6, КодРодителяРодителя);
	Если Улица.Код > 0 Тогда
		РодительскийЭлемент = Улица;
		КодРодителяРодителя = Улица.Код;
	КонецЕсли;
	
	Если РодительскийЭлемент = Неопределено Тогда
		Возврат ПолучитьПустуюСтруктуруАдреса()
	Иначе
		Возврат РодительскийЭлемент;
	КонецЕсли;
										
КонецФункции


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установим отбор
	Параметры.Отбор = ПолучитьОграниченияПоУровню(Параметры.Уровень);
	
	// Установим текущую строку
	Поля = ПолучитьПоляПоУровню(Параметры.Уровень + 1);
	СтруктураОтбора = ВернутьСтрокуАдресногоКлассификатораПоАдреснымЭлементам(Поля.Область, Поля.Регион, Поля.Район, Поля.Город, Поля.НаселенныйПункт, Поля.Улица);
	Если СтруктураОтбора.ТипАдресногоЭлемента = Параметры.Уровень Тогда
		Параметры.ТекущаяСтрока = РегистрыСведений.АдресныйКлассификатор.СоздатьКлючЗаписи(СтруктураОтбора);
	КонецЕсли;
	
КонецПроцедуры

