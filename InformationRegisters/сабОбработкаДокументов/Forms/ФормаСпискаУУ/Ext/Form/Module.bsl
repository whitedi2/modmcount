&НаСервере
Перем МассивИсклТипов;

&НаСервереБезКонтекста
Процедура ОбработатьДокументыУУНаСервере(ТекДокументСтруктура, СтруктураВозврата = Неопределено)
	
	РегистрыСведений.сабОбработкаДокументов.ОбработатьДокументыУУНаСервере(ТекДокументСтруктура, СтруктураВозврата);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНеобработанныеДокументы()
	
	МассивИсклТипов = МассивИсклТипов();
	
	Схема = Элементы.СписокНеобработанных.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	
	Настройки = Элементы.СписокНеобработанных.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Дата", ДатаВводаОстатков);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("МассивИсклТипов", МассивИсклТипов);
	
	Выбор = Настройки.Структура[0].Выбор;
	Для Каждого поле из выбор.ДоступныеПоляВыбора.Элементы Цикл
		Если поле.Заголовок = "Системные поля" ИЛИ поле.Заголовок = "Параметры" Тогда
			Продолжить;
		КонецЕсли;
		поле1 = Неопределено;
		фл = Ложь;
		Для Каждого поле1 из выбор.Элементы Цикл
			Если поле1.поле = поле.поле Тогда
				фл = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не фл Тогда
			поле1 = выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(поле1, поле);
			поле1.Заголовок = "";
		КонецЕсли;
	КонецЦикла;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	СтруктураДоков = Новый Массив;
	Для каждого ТекСДок Из Результат Цикл
		СтруктураДоков.Добавить(Новый Структура("Ссылка", ТекСДок.Ссылка));
	КонецЦикла;
	
	Возврат СтруктураДоков;

КонецФункции // ()

&НаКлиенте
Процедура ОбработатьДокументыУУ(Команда)
	
	Если Команда.Имя = "ОбработатьВыделенныеДокументыУУ" Тогда
		ДокументыКОбработке = Новый Массив;
		Для каждого ТекСтрока Из Элементы.СписокНеобработанных.ВыделенныеСтроки Цикл
			//ДокументыКОбработке.Добавить(Новый Структура("Ссылка", ТекСтрока));
			ДокументыКОбработке.Добавить(Новый Структура("Ссылка", Элементы.СписокНеобработанных.ДанныеСтроки(ТекСтрока).Ссылка));
		КонецЦикла; 
	Иначе	
		ДокументыКОбработке = ПолучитьНеобработанныеДокументы();
	КонецЕсли;
	
	счСтроки = 0;
	ВремяНачала = ТекущаяДата();
	ЧислоСтрок  = ДокументыКОбработке.Количество();
	
	Для каждого ТекОбр Из ДокументыКОбработке Цикл
		счСтроки = счСтроки + 1;
		СкоростьЗагрузки = ?(ТекущаяДата() - ВремяНачала = 0, 0, Окр(счСтроки / (ТекущаяДата() - ВремяНачала), 2));
		ОсталосьВремени = Окр((ТекущаяДата() - ВремяНачала) / счСтроки * (ЧислоСтрок - счСтроки) / 60, 2);
		
		Если счСтроки / 100 = Окр(счСтроки / 100, 0) ИЛИ СкоростьЗагрузки < 20 ИЛИ ЧислоСтрок < 100 Тогда
			Состояние("Обработка..." + " Осталось " + Строка(ОсталосьВремени) + " мин." + " Скорость " + Строка(СкоростьЗагрузки) + " стр/сек",
			счСтроки / ЧислоСтрок * 100, "" +  Строка(ТекОбр.Ссылка) +
			" (" + Строка(счСтроки) + "/" + Строка(ЧислоСтрок) + ")" );
		КонецЕсли;
		ОбработкаПрерыванияПользователя();
		
		Попытка
			ОбработатьДокументыУУНаСервере(ТекОбр);	
		Исключение
			Сообщить(ОписаниеОшибки());
			Если Не НеПрерыватьПриОшибкеОбработки Тогда
				Прервать;	
			КонецЕсли;
		КонецПопытки;
		
	КонецЦикла;
	
	Элементы.СписокНеобработанных.Обновить();
	
	РасчитатьЗаголовки();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбрабатыватьНепроведенныеУУДокументы = справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("ОбрабатыватьНепроведенныеУУДокументы");
	
	ДатаВводаОстатков = Дата('00010101');
	ТекСтрока = Справочники.сабМониторВнедрения.НайтиПоНаименованию("Дата остатков", Истина);
	Если ЗначениеЗаполнено(ТекСтрока) Тогда
		ДатаВводаОстатков = ТекСтрока.Значение;
	КонецЕсли;
	
	СписокНеобработанных.ТекстЗапроса = РегистрыСведений.сабОбработкаДокументов.ТекстЗапросаНеобработанныхУУ(Неопределено);
	
	СписокНеобработанных.Параметры.УстановитьЗначениеПараметра("Дата", ДатаВводаОстатков);
	
	МассивИсклТипов = МассивИсклТипов();
	
	СписокНеобработанных.Параметры.УстановитьЗначениеПараметра("МассивИсклТипов", МассивИсклТипов);
	
	Если ОбрабатыватьНепроведенныеУУДокументы Тогда
		СписокНеобработанных.ТекстЗапроса = СтрЗаменить(СписокНеобработанных.ТекстЗапроса, ".Проведен = ИСТИНА", ".ПометкаУдаления = ЛОЖЬ");
		СписокНеобработанных.ТекстЗапроса = СтрЗаменить(СписокНеобработанных.ТекстЗапроса, ".Проведен = Истина", ".ПометкаУдаления = ЛОЖЬ");
		СписокНеобработанных.ТекстЗапроса = СтрЗаменить(СписокНеобработанных.ТекстЗапроса, "И НЕ Учетный.Регистратор ЕСТЬ NULL", "");
	КонецЕсли;
	
	РасчитатьЗаголовки();
	
КонецПроцедуры

&НаСервере
Функция МассивИсклТипов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	сабСоответствиеТиповДокументов.ТипДокументаУУ КАК ТипДокументаУУ,
	|	сабСоответствиеТиповДокументов.ТипДокументаБУ КАК ТипДокументаБУ
	|ИЗ
	|	РегистрСведений.сабСоответствиеТиповДокументов КАК сабСоответствиеТиповДокументов
	|ГДЕ
	|	сабСоответствиеТиповДокументов.ТипДокументаУУ = &ТипДокументаУУ";
	
	Запрос.УстановитьПараметр("ТипДокументаУУ", "Исключено");
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить().ВыгрузитьКолонку("ТипДокументаБУ");
	
	МассивИсклТипов = Новый Массив;
	Для каждого ТекСтрока Из Выборка Цикл
		МассивИсклТипов.Добавить(Тип("ДокументСсылка." + Строка(ТекСтрока)));	
	КонецЦикла;
    Возврат МассивИсклТипов;

КонецФункции // ()


&НаКлиенте
Процедура СоздатьНаОсновании(Команда)
	
	Если Элементы.Группа1.ТекущаяСтраница = Элементы.Необработанные Тогда
		ДокументыКОбработке = Новый Массив;
		Для каждого ТекСтрока Из Элементы.СписокНеобработанных.ВыделенныеСтроки Цикл
			//ДокументыКОбработке.Добавить(Новый Структура("Ссылка", ТекСтрока));		
			ДокументыКОбработке.Добавить(Новый Структура("Ссылка", Элементы.СписокНеобработанных.ДанныеСтроки(ТекСтрока).Ссылка));
		КонецЦикла; 
	КонецЕсли;
	
	Для каждого ТекОбр Из ДокументыКОбработке Цикл
		
		УУСсылка = ТекОбр.Ссылка;
		
		СтруктураДанных = Новый Структура;
		ОбработатьДокументыУУНаСервере(ТекОбр, СтруктураДанных);
		Если СтруктураДанных.Свойство("Ссылка") Тогда
			ТекОбр.Ссылка = СтруктураДанных.Ссылка;
		КонецЕсли;
		
		Если НЕ СтруктураДанных.Количество() Тогда
			Прервать;		
		КонецЕсли;
		
		ДопПараметр = Новый Структура("ДокументУУ", УУСсылка); 
		ТекФормаУУ = ПолучитьФорму("Документ." + СтруктураДанных.ИмяФормы +".ФормаОбъекта", Новый Структура("Основание, ДокументУУ, ЗначенияЗаполнения, ВидОперации", ТекОбр.Ссылка, УУСсылка, СтруктураДанных, СтруктураДанных.ВидОперации));
		ТекФормаУУ.РежимОткрытияОкна = РежимОткрытияОкнаФормы.Независимый;
		ДопПараметр.Вставить("ОбъектБУ", ТекФормаУУ);
		Оп = Новый ОписаниеОповещения("ВыполнитьПослеОкончания", ЭтотОбъект, ДопПараметр);
		ТекФормаУУ.ОписаниеОповещенияОЗакрытии = Оп;
		
		//ДобавитьРеквизит();
		
		ТекФормаУУ.Открыть();
		Прервать;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизит()
	//ДобавляемыеРеквизиты	= Новый Массив;
	//Реквизит_ДокументУУ = Новый РеквизитФормы("ДокументУУ",	Документы.ТипВсеСсылки(),	, "Документ УУ");
	//ДобавляемыеРеквизиты.Добавить(Реквизит_ДокументУУ);
	//ТекФормаУУ.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
КонецПроцедуры
	
&НаКлиенте
Процедура ВыполнитьПослеОкончания(Результат, Параметры) Экспорт
	
	//Если ЗначениеЗаполнено(Параметры.ОбъектУУ.Объект.Ссылка) Тогда
	//	Параметры.Вставить("ДокументУУ", Параметры.ОбъектУУ.Объект.Ссылка);
	//	Параметры.ОбъектУУ = Неопределено;
	//	СоздатьЗаписьРегистра(Параметры);
	//	Элементы.СписокНеобработанных.Обновить();
	//КонецЕсли;

КонецПроцедуры


&НаСервереБезКонтекста
Процедура СоздатьЗаписьРегистра(Параметры)
	
	Если ЗначениеЗаполнено(Параметры.ДокументБУ) Тогда
		НаборЗаписей = РегистрыСведений.сабОбработкаДокументов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументБУ.Установить(Параметры.ДокументБУ);
		НаборЗаписей.Отбор.ДокументУУ.Установить(Параметры.ДокументУУ);
		НаборЗаписей.Прочитать();
		Если НЕ НаборЗаписей.Количество() Тогда
			НаборЗаписей = РегистрыСведений.сабОбработкаДокументов.СоздатьМенеджерЗаписи();
			НаборЗаписей.ДокументБУ = Параметры.ДокументБУ;
			НаборЗаписей.ДокументУУ = Параметры.ДокументУУ;
			НаборЗаписей.Автор = ПараметрыСеанса.ТекущийПользователь;
			НаборЗаписей.ДатаОбработки = ТекущаяДата();
			НаборЗаписей.ПервичныйДокументУУ = Истина;
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОповеститьРегистрОбработанныхУУ" Тогда
		
		СоздатьЗаписьРегистра(Параметр);

		Элементы.СписокНеобработанных.Обновить();
		
		РасчитатьЗаголовки();
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПропуститьВсеДокументыУУ(Команда)
	Если Команда.Имя = "ПропуститьВыделенныеДокументыУУ" Тогда
		ДокументыКОбработке = Новый Массив;
		Для каждого ТекСтрока Из Элементы.СписокНеобработанных.ВыделенныеСтроки Цикл
			//ДокументыКОбработке.Добавить(Новый Структура("Ссылка", ТекСтрока));
			ДокументыКОбработке.Добавить(Новый Структура("Ссылка", Элементы.СписокНеобработанных.ДанныеСтроки(ТекСтрока).Ссылка));
		КонецЦикла; 
	Иначе	
		ДокументыКОбработке = ПолучитьНеобработанныеДокументы();
	КонецЕсли;
	
	счСтроки = 0;
	ВремяНачала = ТекущаяДата();
	ЧислоСтрок  = ДокументыКОбработке.Количество();
	
	Для каждого ТекОбр Из ДокументыКОбработке Цикл
		счСтроки = счСтроки + 1;
		СкоростьЗагрузки = ?(ТекущаяДата() - ВремяНачала = 0, 0, Окр(счСтроки / (ТекущаяДата() - ВремяНачала), 2));
		ОсталосьВремени = Окр((ТекущаяДата() - ВремяНачала) / счСтроки * (ЧислоСтрок - счСтроки) / 60, 2);
		
		Если счСтроки / 100 = Окр(счСтроки / 100, 0) ИЛИ СкоростьЗагрузки < 20 ИЛИ ЧислоСтрок < 100 Тогда
			Состояние("Обработка..." + " Осталось " + Строка(ОсталосьВремени) + " мин." + " Скорость " + Строка(СкоростьЗагрузки) + " стр/сек",
			счСтроки / ЧислоСтрок * 100, "" +  Строка(ТекОбр.Ссылка) +
			" (" + Строка(счСтроки) + "/" + Строка(ЧислоСтрок) + ")" );
		КонецЕсли;
		ОбработкаПрерыванияПользователя();
		
		Попытка
			ПропуститьДокументыУУНаСервере(ТекОбр);	
		Исключение
			Сообщить(ОписаниеОшибки());
			Прервать;	
		КонецПопытки;
		
	КонецЦикла;
	
	Элементы.СписокНеобработанных.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПропуститьДокументыУУНаСервере(ТекДокументСтруктура, СтруктураВозврата = Неопределено)
	
	РегистрыСведений.сабОбработкаДокументов.ПропуститьДокументыУУНаСервере(ТекДокументСтруктура, СтруктураВозврата);
	
КонецПроцедуры

&НаСервере
Процедура РасчитатьЗаголовки()
	
	МассивИсклТипов = МассивИсклТипов();
	
	Схема = Элементы.СписокНеобработанных.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	
	Настройки = Элементы.СписокНеобработанных.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Дата", ДатаВводаОстатков);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("МассивИсклТипов", МассивИсклТипов);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		
	КоличествоНеобработанных = Результат.Количество();
	

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПодключитьОбработчикОжидания("РасчитатьЗаголовкиКлиент", 180);
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьЗаголовкиКлиент()
	РасчитатьЗаголовки();
КонецПроцедуры

&НаСервере
Процедура ОбрабатыватьНерповеденныеУУДокументыПриИзмененииНаСервере()
	
	ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ОбрабатыватьНепроведенныеУУДокументы", Истина);
	
	Если ЗначениеЗаполнено(ТекЭл) Тогда
		ТекЭлОб = ТекЭл.ПолучитьОбъект();
	Иначе
		ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
	КонецЕсли;
	
	ТекЭлОб.Наименование = "ОбрабатыватьНепроведенныеУУДокументы";
	ТекЭлОб.Значение = ОбрабатыватьНепроведенныеУУДокументы;
	ТекЭлОб.Записать();

КонецПроцедуры

&НаКлиенте
Процедура ОбрабатыватьНерповеденныеУУДокументыПриИзменении(Элемент)
	ОбрабатыватьНерповеденныеУУДокументыПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СписокНеобработанныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьЗначение(,Элемент.ТекущиеДанные.Ссылка); 
КонецПроцедуры





