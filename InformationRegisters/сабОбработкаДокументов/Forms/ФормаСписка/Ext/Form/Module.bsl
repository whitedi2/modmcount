&НаСервере
Перем МассивИсклТипов;

&НаСервереБезКонтекста
Процедура ОбработатьДокументыБУНаСервере(ТекДокументСтруктура, СтруктураВозврата = Неопределено)
	
	РегистрыСведений.сабОбработкаДокументов.ОбработатьДокументыБУНаСервере(ТекДокументСтруктура, СтруктураВозврата);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНеобработанныеДокументы()
	
	Возврат РегистрыСведений.сабОбработкаДокументов.ПолучитьНеобработанныеДокументы();

КонецФункции // ()

&НаСервере
Функция ПолучитьНеобработанныеДокументыРозница()
	 
	Возврат РегистрыСведений.сабОбработкаДокументов.ПолучитьНеобработанныеДокументыРозница();
	
КонецФункции // ()


&НаКлиенте
Процедура ОбработатьДокументыБУ(Команда)
	
	Если Команда.Имя = "ОбработатьВыделенныеДокументыБУ" Тогда
		ДокументыКОбработке = Новый Массив;
		Для каждого ТекСтрока Из Элементы.СписокНеобработанных.ВыделенныеСтроки Цикл
			ДокументыКОбработке.Добавить(Новый Структура("Ссылка", ТекСтрока));		
		КонецЦикла; 
	Иначе	
		ДокументыКОбработке = ПолучитьНеобработанныеДокументы();
	КонецЕсли;
	
	счСтроки = 0;
	ВремяНачала = ТекущаяДата();
	ЧислоСтрок  = ДокументыКОбработке.Количество();
	
	Для каждого ТекОбр Из ДокументыКОбработке Цикл
		счСтроки = счСтроки + 1;
		СкоростьЗагрузки = ?(ТекущаяДата() - ВремяНачала = 0, 0, Окр(счСтроки / (ТекущаяДата() - ВремяНачала), 2));
		ОсталосьВремени = Окр((ТекущаяДата() - ВремяНачала) / счСтроки * (ЧислоСтрок - счСтроки) / 60, 2);
		
		Если счСтроки / 100 = Окр(счСтроки / 100, 0) ИЛИ СкоростьЗагрузки < 20 ИЛИ ЧислоСтрок < 100 Тогда
			Состояние("Обработка..." + " Осталось " + Строка(ОсталосьВремени) + " мин." + " Скорость " + Строка(СкоростьЗагрузки) + " стр/сек",
			счСтроки / ЧислоСтрок * 100, "" +  Строка(ТекОбр.Ссылка) +
			" (" + Строка(счСтроки) + "/" + Строка(ЧислоСтрок) + ")" );
		КонецЕсли;
		ОбработкаПрерыванияПользователя();
		
		Попытка
			ОбработатьДокументыБУНаСервере(ТекОбр);	
		Исключение
			Сообщить(ОписаниеОшибки());
			Если Не НеПрерыватьПриОшибкеОбработки Тогда
				Прервать;	
			КонецЕсли;
		КонецПопытки;
		
	КонецЦикла;
	
	Элементы.СписокНеобработанных.Обновить();
	Если Элементы.РозничныеПродажи.Видимость Тогда
		Элементы.СписокРозничныеПродажи.Обновить();
	КонецЕсли;
	
	РасчитатьЗаголовки();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДатаВводаОстатков = Дата('00010101');
	ТекСтрока = Справочники.сабМониторВнедрения.НайтиПоНаименованию("Дата остатков", Истина);
	Если ЗначениеЗаполнено(ТекСтрока) Тогда
		ДатаВводаОстатков = ТекСтрока.Значение;
	КонецЕсли;
	
	СписокНеобработанных.ТекстЗапроса = РегистрыСведений.сабОбработкаДокументов.ТекстЗапросаНеобработанных();
	
	СписокИзмененные.Параметры.УстановитьЗначениеПараметра("Дата", ДатаВводаОстатков);
	СписокНеобработанных.Параметры.УстановитьЗначениеПараметра("Дата", ДатаВводаОстатков);
	
	СписокРозничныеПродажи.ТекстЗапроса = РегистрыСведений.сабОбработкаДокументов.ТекстЗапросаНеобработанныхРозница();
	
	СписокРозничныеПродажи.Параметры.УстановитьЗначениеПараметра("Дата", ДатаВводаОстатков);
	
	МассивИсклТипов = МассивИсклТипов();
	
	СписокНеобработанных.Параметры.УстановитьЗначениеПараметра("МассивИсклТипов", МассивИсклТипов);
	СписокРозничныеПродажи.Параметры.УстановитьЗначениеПараметра("МассивИсклТипов", МассивИсклТипов);
	
	РасчитатьЗаголовки();
	
КонецПроцедуры

&НаСервере
Функция МассивИсклТипов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	сабСоответствиеТиповДокументов.ТипДокументаУУ КАК ТипДокументаУУ,
	|	сабСоответствиеТиповДокументов.ТипДокументаБУ КАК ТипДокументаБУ
	|ИЗ
	|	РегистрСведений.сабСоответствиеТиповДокументов КАК сабСоответствиеТиповДокументов
	|ГДЕ
	|	сабСоответствиеТиповДокументов.ТипДокументаУУ = &ТипДокументаУУ";
	
	Запрос.УстановитьПараметр("ТипДокументаУУ", "Исключено");
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить().ВыгрузитьКолонку("ТипДокументаБУ");
	
	МассивИсклТипов = Новый Массив;
	Для каждого ТекСтрока Из Выборка Цикл
		МассивИсклТипов.Добавить(Тип("ДокументСсылка." + Строка(ТекСтрока)));	
	КонецЦикла;
    Возврат МассивИсклТипов;

КонецФункции // ()


&НаКлиенте
Процедура СоздатьНаОсновании(Команда)
	
	Если Элементы.Группа1.ТекущаяСтраница = Элементы.РозничныеПродажи Тогда
		ДокументыКОбработке = Новый Массив;
		Для каждого ТекСтрока Из Элементы.СписокРозничныеПродажи.ВыделенныеСтроки Цикл
			ДокументыКОбработке.Добавить(Новый Структура("Ссылка", ТекСтрока.Ссылка));		
		КонецЦикла; 
	Иначе	
		ДокументыКОбработке = Новый Массив;
		Для каждого ТекСтрока Из Элементы.СписокНеобработанных.ВыделенныеСтроки Цикл
			ДокументыКОбработке.Добавить(Новый Структура("Ссылка", ТекСтрока));		
		КонецЦикла; 
	КонецЕсли;
	
	Для каждого ТекОбр Из ДокументыКОбработке Цикл
		
		БухСсылка = ТекОбр.Ссылка;
		
		СтруктураДанных = Новый Структура;
		ОбработатьДокументыБУНаСервере(ТекОбр, СтруктураДанных);
		Если СтруктураДанных.Свойство("Ссылка") Тогда
			ТекОбр.Ссылка = СтруктураДанных.Ссылка;
		КонецЕсли;
		
		Если НЕ СтруктураДанных.Количество() Тогда
			Прервать;		
		КонецЕсли;
		
		ДопПараметр = Новый Структура("ДокументБУ", БухСсылка); 
		ТекФормаБП = ПолучитьФорму("Документ." + СтруктураДанных.ИмяФормы +".ФормаОбъекта", Новый Структура("Основание", ТекОбр.Ссылка));
		ТекФормаБП.РежимОткрытияОкна = РежимОткрытияОкнаФормы.Независимый;
		ДопПараметр.Вставить("ОбъектУУ", ТекФормаБП);
		Оп = Новый ОписаниеОповещения("ВыполнитьПослеОкончания", ЭтотОбъект, ДопПараметр);
		ТекФормаБП.ОписаниеОповещенияОЗакрытии = Оп;
		
		//рекв ДокументБУ
		КлючУникальности   = Новый УникальныйИдентификатор;
		СтруктураРеквизита = Новый Структура("ДокументБУРекв", КлючУникальности);
		ЗаполнитьЗначенияСвойств(СтруктураРеквизита, ТекФормаБП);
		Если СтруктураРеквизита["ДокументБУРекв"] <> КлючУникальности Тогда
			ТекФормаБП.ДокументБУРекв = БухСсылка;		
		КонецЕсли;
		
		ТекФормаБП.Открыть();
		Прервать;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеОкончания(Результат, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(Параметры.ОбъектУУ.Объект.Ссылка) Тогда
		Параметры.Вставить("ДокументУУ", Параметры.ОбъектУУ.Объект.Ссылка);
		Параметры.ОбъектУУ = Неопределено;
		СоздатьЗаписьРегистра(Параметры);
		Элементы.СписокНеобработанных.Обновить();
		Если Элементы.РозничныеПродажи.Видимость Тогда
			Элементы.СписокРозничныеПродажи.Обновить();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


&НаСервереБезКонтекста
Процедура СоздатьЗаписьРегистра(Параметры)
	
	НаборЗаписей = РегистрыСведений.сабОбработкаДокументов.СоздатьМенеджерЗаписи();
	НаборЗаписей.ДокументБУ = Параметры.ДокументБУ;
	НаборЗаписей.ДокументУУ = Параметры.ДокументУУ;
	НаборЗаписей.Автор = ПараметрыСеанса.ТекущийПользователь;
	НаборЗаписей.ДатаОбработки = ТекущаяДата();
	НаборЗаписей.Записать();

КонецПроцедуры


&НаСервереБезКонтекста
Процедура ПровереноНаСервере(Документ)
	НаборЗаписей = РегистрыСведений.сабОбработкаДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументБУ.Установить(Документ);
	НаборЗаписей.Прочитать();
	Для каждого ТекСТрока Из НаборЗаписей Цикл
		ТекСТрока.Модифицирован = Ложь;
	КонецЦикла;
	НаборЗаписей.Записать();
КонецПроцедуры


&НаКлиенте
Процедура Проверено(Команда)
	ПровереноНаСервере(Элементы.СписокИзмененные.ТекущаяСтрока);
	Элементы.СписокИзмененные.Обновить();
	РасчитатьЗаголовки();
КонецПроцедуры


&НаКлиенте
Процедура СписокИзмененныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "СписокИзмененныеДокументУУ" Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(,Элементы.СписокИзмененные.ТекущиеДанные.ДокументУУ);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ОбработатьВсеДокументыБУРозница(Команда)
	
	Если Команда.Имя = "ОбработатьВыделенныеДокументыБУРозница" Тогда
		ДокументыКОбработке = Новый Массив;
		Для каждого ТекСтрока Из Элементы.СписокРозничныеПродажи.ВыделенныеСтроки Цикл
			ДокументыКОбработке.Добавить(Новый Структура("Ссылка", ТекСтрока.Ссылка));		
		КонецЦикла; 
	Иначе	
		ДокументыКОбработке = ПолучитьНеобработанныеДокументыРозница();
	КонецЕсли;
	
	счСтроки = 0;
	ВремяНачала = ТекущаяДата();
	ЧислоСтрок  = ДокументыКОбработке.Количество();
	
	Для каждого ТекОбр Из ДокументыКОбработке Цикл
		счСтроки = счСтроки + 1;
		СкоростьЗагрузки = ?(ТекущаяДата() - ВремяНачала = 0, 0, Окр(счСтроки / (ТекущаяДата() - ВремяНачала), 2));
		ОсталосьВремени = Окр((ТекущаяДата() - ВремяНачала) / счСтроки * (ЧислоСтрок - счСтроки) / 60, 2);
		
		Если счСтроки / 100 = Окр(счСтроки / 100, 0) ИЛИ СкоростьЗагрузки < 20 ИЛИ ЧислоСтрок < 100 Тогда
			Состояние("Обработка..." + " Осталось " + Строка(ОсталосьВремени) + " мин." + " Скорость " + Строка(СкоростьЗагрузки) + " стр/сек",
			счСтроки / ЧислоСтрок * 100, "" +  Строка(ТекОбр.Ссылка) +
			" (" + Строка(счСтроки) + "/" + Строка(ЧислоСтрок) + ")" );
		КонецЕсли;
		ОбработкаПрерыванияПользователя();
		
		Попытка
			ОбработатьДокументыБУНаСервере(ТекОбр);	
		Исключение
			Сообщить(ОписаниеОшибки());
			Если Не НеПрерыватьПриОшибкеОбработки Тогда
				Прервать;	
			КонецЕсли;
		КонецПопытки;
		
	КонецЦикла;
	
	Элементы.СписокРозничныеПродажи.Обновить();
	
	РасчитатьЗаголовки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОповеститьРегистрОбработанных" Тогда
		Элементы.СписокИзмененные.Обновить();
		РасчитатьЗаголовки();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокРозничныеПродажиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	 ПоказатьЗначение(,Элементы.СписокРозничныеПродажи.ТекущиеДанные.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПропуститьВсеДокументыБУ(Команда)
	Если Команда.Имя = "ПропуститьВыделенныеДокументыБУ" Тогда
		ДокументыКОбработке = Новый Массив;
		Для каждого ТекСтрока Из Элементы.СписокНеобработанных.ВыделенныеСтроки Цикл
			ДокументыКОбработке.Добавить(Новый Структура("Ссылка", ТекСтрока));		
		КонецЦикла; 
	Иначе	
		ДокументыКОбработке = ПолучитьНеобработанныеДокументы();
	КонецЕсли;
	
	счСтроки = 0;
	ВремяНачала = ТекущаяДата();
	ЧислоСтрок  = ДокументыКОбработке.Количество();
	
	Для каждого ТекОбр Из ДокументыКОбработке Цикл
		счСтроки = счСтроки + 1;
		СкоростьЗагрузки = ?(ТекущаяДата() - ВремяНачала = 0, 0, Окр(счСтроки / (ТекущаяДата() - ВремяНачала), 2));
		ОсталосьВремени = Окр((ТекущаяДата() - ВремяНачала) / счСтроки * (ЧислоСтрок - счСтроки) / 60, 2);
		
		Если счСтроки / 100 = Окр(счСтроки / 100, 0) ИЛИ СкоростьЗагрузки < 20 ИЛИ ЧислоСтрок < 100 Тогда
			Состояние("Обработка..." + " Осталось " + Строка(ОсталосьВремени) + " мин." + " Скорость " + Строка(СкоростьЗагрузки) + " стр/сек",
			счСтроки / ЧислоСтрок * 100, "" +  Строка(ТекОбр.Ссылка) +
			" (" + Строка(счСтроки) + "/" + Строка(ЧислоСтрок) + ")" );
		КонецЕсли;
		ОбработкаПрерыванияПользователя();
		
		Попытка
			ПропуститьДокументыБУНаСервере(ТекОбр);	
		Исключение
			Сообщить(ОписаниеОшибки());
			Прервать;	
		КонецПопытки;
		
	КонецЦикла;
	
	Элементы.СписокНеобработанных.Обновить();
	Если Элементы.РозничныеПродажи.Видимость Тогда
		Элементы.СписокРозничныеПродажи.Обновить();
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПропуститьДокументыБУНаСервере(ТекДокументСтруктура, СтруктураВозврата = Неопределено)
	
	РегистрыСведений.сабОбработкаДокументов.ПропуститьДокументыБУНаСервере(ТекДокументСтруктура, СтруктураВозврата);
	
КонецПроцедуры

&НаКлиенте
Процедура ПропуститьВсеДокументыБУРозница(Команда)
	
	Если Команда.Имя = "ПропуститьВыделенныеДокументыБУРозница" Тогда
		ДокументыКОбработке = Новый Массив;
		Для каждого ТекСтрока Из Элементы.СписокРозничныеПродажи.ВыделенныеСтроки Цикл
			ДокументыКОбработке.Добавить(Новый Структура("Ссылка", ТекСтрока.Ссылка));		
		КонецЦикла; 
	Иначе	
		ДокументыКОбработке = ПолучитьНеобработанныеДокументыРозница();
	КонецЕсли;
	
	счСтроки = 0;
	ВремяНачала = ТекущаяДата();
	ЧислоСтрок  = ДокументыКОбработке.Количество();
	
	Для каждого ТекОбр Из ДокументыКОбработке Цикл
		счСтроки = счСтроки + 1;
		СкоростьЗагрузки = ?(ТекущаяДата() - ВремяНачала = 0, 0, Окр(счСтроки / (ТекущаяДата() - ВремяНачала), 2));
		ОсталосьВремени = Окр((ТекущаяДата() - ВремяНачала) / счСтроки * (ЧислоСтрок - счСтроки) / 60, 2);
		
		Если счСтроки / 100 = Окр(счСтроки / 100, 0) ИЛИ СкоростьЗагрузки < 20 ИЛИ ЧислоСтрок < 100 Тогда
			Состояние("Обработка..." + " Осталось " + Строка(ОсталосьВремени) + " мин." + " Скорость " + Строка(СкоростьЗагрузки) + " стр/сек",
			счСтроки / ЧислоСтрок * 100, "" +  Строка(ТекОбр.Ссылка) +
			" (" + Строка(счСтроки) + "/" + Строка(ЧислоСтрок) + ")" );
		КонецЕсли;
		ОбработкаПрерыванияПользователя();
		
		Попытка
			ПропуститьДокументыБУНаСервере(ТекОбр);	
		Исключение
			Сообщить(ОписаниеОшибки());
			Прервать;	
		КонецПопытки;
		
	КонецЦикла;
	
	Элементы.СписокРозничныеПродажи.Обновить();

КонецПроцедуры

&НаСервере
Процедура РасчитатьЗаголовки()
	
	МассивИсклТипов = МассивИсклТипов();
	
	Схема = Элементы.СписокНеобработанных.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	
	Настройки = Элементы.СписокНеобработанных.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Дата", ДатаВводаОстатков);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("МассивИсклТипов", МассивИсклТипов);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		
	КоличествоНеобработанных = Результат.Количество();
	
	
	Схема = Элементы.СписокРозничныеПродажи.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	
	Настройки = Элементы.СписокРозничныеПродажи.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Дата", ДатаВводаОстатков);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("МассивИсклТипов", МассивИсклТипов);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	КоличествоНеобработанныхРозница = Результат.Количество();

	
	Схема = Элементы.СписокИзмененные.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	
	Настройки = Элементы.СписокИзмененные.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Дата", ДатаВводаОстатков);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	КоличествоИзмененные = Результат.Количество();


КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПодключитьОбработчикОжидания("РасчитатьЗаголовкиКлиент", 180);
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьЗаголовкиКлиент()
	РасчитатьЗаголовки();
КонецПроцедуры






