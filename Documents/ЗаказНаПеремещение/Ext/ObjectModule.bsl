
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ТЧСвернутая = ТабличнаяЧасть.Выгрузить();	
	
	ТЧСвернутая.Свернуть("Номенклатура, Склад, Цена, Доставка, ВидДоставки, СтавкаНДС, ВидЦеныПоставщика, ДатаПоступления, ЕдиницаИзмерения, ЦенаПодтвержденная, СтатусПодтвержденияПозиции", 
							"Количество, Сумма, СуммаДоставки, СуммаБезНДС, СуммаНДС, КоличествоУпаковок, КоличествоПодтвержденное");
							
	Если ТЧСвернутая.Количество() <> ТабличнаяЧасть.Количество() Тогда
		ТабличнаяЧасть.Загрузить(ТЧСвернутая);
		Сообщить("В строках обнаружены дубли номенклатур, была произведена свертка дублей!");
	КонецЕсли;	

	
	СуммаДокумента = ТабличнаяЧасть.Итог("Сумма");
	СуммаДокумента = СуммаДокумента;
	
	//Заказ помечен на удаление
	Если ПометкаУдаления = Истина И Ссылка.ПометкаУдаления = Ложь Тогда
		Запрос = новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	УЧ_ПоступлениеТоваров.Ссылка
		               |ИЗ
		               |	Документ.УЧ_ПоступлениеТоваров КАК УЧ_ПоступлениеТоваров
		               |ГДЕ
		               |	УЧ_ПоступлениеТоваров.ДокОснование = &ДокОснование
		               |	И НЕ УЧ_ПоступлениеТоваров.ПометкаУдаления
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	УЧ_ВозвратТоваровПоставщику.Ссылка
		               |ИЗ
		               |	Документ.УЧ_ВозвратТоваровПоставщику КАК УЧ_ВозвратТоваровПоставщику
		               |ГДЕ
		               |	УЧ_ВозвратТоваровПоставщику.ДокОснование = &ДокОснование
		               |	И НЕ УЧ_ВозвратТоваровПоставщику.ПометкаУдаления
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	УЧ_ПеремещениеТоваров.Ссылка
		               |ИЗ
		               |	Документ.УЧ_ПеремещениеТоваров КАК УЧ_ПеремещениеТоваров
		               |ГДЕ
		               |	УЧ_ПеремещениеТоваров.ДокОснование = &ДокОснование
		               |	И НЕ УЧ_ПеремещениеТоваров.ПометкаУдаления";
		Запрос.УстановитьПараметр("ДокОснование", Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Сообщить("Невозможно удалить заказ, поскольку есть подчиненные документы");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//формирование комментария
	//ПрочиеУсловия = Договор.ПрочиеУсловия;
	//Если ЗначениеЗаполнено(ПрочиеУсловия) Тогда
	//	НайденныйТекст = СтрНайти(Комментарий, " (ДопУсловия: ");
	//	Если НайденныйТекст Тогда
	//		Комментарий = Лев(Комментарий, НайденныйТекст - 1);		
	//	КонецЕсли;		
	//	Комментарий = Комментарий + " (ДопУсловия: " + ПрочиеУсловия + ")";
	//КонецЕсли;
	
	//из подписки на событие
	БюджетныйНаСервере.ДокументыПередЗаписьюПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧДокумента.Количество,
	|	ТЧДокумента.Номенклатура
	|ПОМЕСТИТЬ ВТ_ТЧДока
	|ИЗ
	|	&ТЧДокумента КАК ТЧДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТЧДока.Количество,
	|	ВТ_ТЧДока.Номенклатура,
	|	ЕСТЬNULL(ВТ_ТЧДока.Количество * ВТ_ТЧДока.Номенклатура.Вес, 0) КАК ВесТовара
	|ИЗ
	|	ВТ_ТЧДока КАК ВТ_ТЧДока";
	Запрос.УстановитьПараметр("ТЧДокумента", ТабличнаяЧасть.Выгрузить(, "Количество, Номенклатура"));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ВесТовара = 0;
	Пока Выборка.Следующий() Цикл
		ВесТовара = ВесТовара + Выборка.ВесТовара;		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
		
	ЕстьОшибки = Ложь;
	
	РеквизитДатаПоступления = ПроверяемыеРеквизиты.Найти("ДатаПоступления");
	
	Если Не ПоступлениеОднойДатой Тогда
		ПроверяемыеРеквизиты.Удалить(РеквизитДатаПоступления);
	КонецЕсли;	
			
	Если ЕстьОшибки Тогда
		Отказ = Истина;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	//{{__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	УЧ_ПоступлениеТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УЧ_ПоступлениеТоваров КАК УЧ_ПоступлениеТоваров
	|ГДЕ
	|	УЧ_ПоступлениеТоваров.ДокОснование = &ДокОснование
	|	И УЧ_ПоступлениеТоваров.Проведен = ИСТИНА";
	
	Запрос.УстановитьПараметр("ДокОснование", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ЕстьПоступление = Ложь;
	Пока Выборка.Следующий() Цикл
		ЕстьПоступление = Истина;
	КонецЦикла;

	// регистр Учетный 
	Движения.Учетный.Записывать = Истина;
	
	Если ЕстьПоступление Тогда //оичщаем проводки
		Возврат;
	КонецЕсли;
	
	СчетРезервов = ПланыСчетов.Учетный.СчетЗАК();
	УчетПоПодразделениям = СчетРезервов.УчетПоПодразделениям;
	
	Если Не ЗначениеЗаполнено(СчетРезервов) Тогда
		Возврат;	
	КонецЕсли;
	
	ЭтоМеждуПредприятиями = ВидОперации = Перечисления.ВидыЗаказовНаПеремещение.ВнутреннееПеремещение;
	
	Если НЕ Статус = Перечисления.СтатусыЗаказовПоставщикам.Отменен И НЕ Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт Тогда
		Для Каждого ТекСтрокаТабличнаяЧасть Из ТабличнаяЧасть Цикл
			
			Движение = Движения.Учетный.Добавить();
			Движение.СчетДт = СчетРезервов;
			Движение.Период = ДатаПоступления;
			Движение.Предприятия = ?(ЭтоМеждуПредприятиями, ПредприятиеПолучатель, Предприятие);
			Если УчетПоПодразделениям Тогда
				Движение.ПодразделениеДт = ?(ЭтоМеждуПредприятиями, ПодразделениеПолучатель, Подразделение);
			КонецЕсли;
			Движение.СценарийПлана = Справочники.СценарииПланирования.СценарийФакт();
			//Движение.Сумма = ТекСтрокаТабличнаяЧасть.Сумма;
			Движение.КоличествоДт = ТекСтрокаТабличнаяЧасть.Количество;
			Движение.Содержание = Комментарий;
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт, Движение.СчетДт, 1, ТекСтрокаТабличнаяЧасть.Номенклатура);
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт, Движение.СчетДт, 2, СкладПолучатель);
			
			Движение = Движения.Учетный.Добавить();
			Движение.СчетКт = СчетРезервов;
			Движение.Период = ДатаПоступления;
			Движение.Предприятия = Предприятие;
			Если УчетПоПодразделениям Тогда
				Движение.ПодразделениеКт = Подразделение;
			КонецЕсли;
			Движение.СценарийПлана = Справочники.СценарииПланирования.СценарийФакт();
			//Движение.Сумма = ТекСтрокаТабличнаяЧасть.Сумма;
			Движение.КоличествоКт = ТекСтрокаТабличнаяЧасть.Количество;
			Движение.Содержание = Комментарий;
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, Движение.СчетКт, 1, ТекСтрокаТабличнаяЧасть.Номенклатура);
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, Движение.СчетКт, 2, ТекСтрокаТабличнаяЧасть.Склад);

			
		КонецЦикла;
	КонецЕсли;

	//}}__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)

	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ВидОперации = ДанныеЗаполнения.ВидОперации;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		Отказ = сабОперОбщегоНазначения.ПроверкаСозданияНаОснованииНаСервере(ДанныеЗаполнения, Комментарий, СтандартнаяОбработка, ТипЗнч(Ссылка));
		Если Отказ.Признак = "##УжеСоздан" Тогда
			ВызватьИсключение "На основании Заказ поставщику уже введен документ " + Отказ.Ссылка;
		ИначеЕсли Отказ.Признак = "##НеПроведен" Тогда
			ВызватьИсключение "Документ-основание не проведен. Ввод на основании не возможен.";
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения, , "Дата, Номер, Проведен, РучнаяКорректировка, Статус");
		
		ДокументОснование = ДанныеЗаполнения.Ссылка;
		
		ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		//Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		//Договор = ДанныеЗаполнения.ДоговорКонтрагента;
		//Счет = ДанныеЗаполнения.ДоговорКонтрагента.СчетВзаиморасчетов;
		//Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации);
		//ПодразделениеКонтрагента = ДанныеЗаполнения.Заказ.ПодразделениеКонтрагента;
		УчитыватьНДС = Истина;
		
		ТабличнаяЧасть.Очистить();
		
		Для Каждого ТекСтрокаТабличнаяЧасть Из ДанныеЗаполнения.ТабличнаяЧасть Цикл
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаТабличнаяЧасть);
			
			Если НЕ ДанныеЗаполнения.СуммаВключаетНДС И НЕ ДанныеЗаполнения.УчитыватьНДС Тогда
				НоваяСтрока.Сумма = ТекСтрокаТабличнаяЧасть.Сумма + ТекСтрокаТабличнаяЧасть.СуммаНДС;
				НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
			КонецЕсли;
			НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрокаТабличнаяЧасть.СтавкаНДС);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	Статус = Перечисления.СтатусыЗаказовПоставщикам.Создан;
КонецПроцедуры


Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	БюджетныйНаСервере.ПриУстановкеНовогоНомераПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
КонецПроцедуры
	