&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Объект.ВидОстатка = "дебетовый";
	КонецЕсли;
	БюджетныйНаСервере.ДействияПриСозданииФормыДокумента(ЭтаФорма);
	СчетПриИзмененииНаСервере();
	ВидНачисленияПриИзмененииНаСервере();
	ЗаполнитьСчетаРасчетов();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаРасчетов(Перезаполнить = Ложь)
	Если Перезаполнить Тогда
		Объект.СчетаРасчета.Очистить();	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Перезаполнить Тогда //заполнение по-умолчанию
		НоваяСтрока = Объект.СчетаРасчета.Добавить();
		НоваяСтрока.Счет = ПланыСчетов.Учетный.НайтиПоКоду("58.02");
		НоваяСтрока.СчетНачисления = ПланыСчетов.Учетный.НайтиПоКоду("58.03");
		НоваяСтрока = Объект.СчетаРасчета.Добавить();
		НоваяСтрока.Счет = ПланыСчетов.Учетный.НайтиПоКоду("66.01");
		НоваяСтрока.СчетНачисления = ПланыСчетов.Учетный.НайтиПоКоду("66.02");
		НоваяСтрока = Объект.СчетаРасчета.Добавить();
		НоваяСтрока.Счет = ПланыСчетов.Учетный.НайтиПоКоду("67.01");
		НоваяСтрока.СчетНачисления = ПланыСчетов.Учетный.НайтиПоКоду("67.02");
		НоваяСтрока = Объект.СчетаРасчета.Добавить();
		НоваяСтрока.Счет = ПланыСчетов.Учетный.НайтиПоКоду("67.03");
		НоваяСтрока.СчетНачисления = ПланыСчетов.Учетный.НайтиПоКоду("67.04");
		НоваяСтрока = Объект.СчетаРасчета.Добавить();
		НоваяСтрока.Счет = ПланыСчетов.Учетный.НайтиПоКоду("67.05");
		НоваяСтрока.СчетНачисления = ПланыСчетов.Учетный.НайтиПоКоду("67.06");
		
		МассивУд = Новый Массив;
		
		Для каждого ТекСтрока Из Объект.СчетаРасчета Цикл
			Если Не ЗначениеЗаполнено(ТекСтрока.Счет) Тогда
				МассивУд.Добавить(ТекСтрока);			
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ТекУд Из МассивУд Цикл
			Объект.СчетаРасчета.Удалить(ТекУд);		
		КонецЦикла;
		
	//Иначе
		//Для каждого ТекСтрока Из Объект.СчетаРасчета Цикл
		//	СчетаСписок.Добавить(ТекСтрока.Счет);
		//КонецЦикла; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда 		
		ВидНачисленияПриИзменении(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	Если Объект.ПроцентныеНачисления.Количество() > 0 Тогда
		Ответ = Неопределено;
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект), "Перед заполнением табличная часть будет очищена. Продолжить?",РежимДиалогаВопрос.ДаНет);
        Возврат;
	Иначе
		ЗаполнитьНаСервере();
		КредитыИЗаймыПриАктивизацииСтроки(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.ПроцентныеНачисления.Очистить();
		Объект.КредитыИЗаймы.Очистить();
		ЗаполнитьНаСервере();
		КредитыИЗаймыПриАктивизацииСтроки(Неопределено);
	Иначе
		Возврат				
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	КоличествоДнейВГоду = Окр((КонецГода(Объект.Дата) - НачалоГода(Объект.Дата))/60/60/24);
	Отбор = Новый Структура;
	
	ОшибкиПоКонтрагентам.Очистить();
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПроцентыПоКредитам.ПроцентыПоКазне тогда 
		ТекДата = КонецДня(НачалоМесяца(Объект.Дата));
		Пока ТекДата <= КонецМесяца(Объект.Дата) Цикл
			Остатки = ПолучитьОстаткиПо55Счету(ТекДата);
			Для каждого РазрезОстатка Из Остатки Цикл
				Сумма = ?(Объект.ВидОстатка = "дебетовый", РазрезОстатка.СуммаОстатокДт, РазрезОстатка.СуммаОстатокКт);
				Если Сумма <> 0 Тогда
					ПроцентнаяСтавка = ПолучитьПроцентнуюСтавку(ТекДата, Объект.Предприятие, РазрезОстатка);
					Стр = Объект.ПроцентныеНачисления.Добавить();
					Стр.Предприятие 	 = Объект.Предприятие;
					Стр.Дата			 = ТекДата;
					Стр.Сумма = ПроцентнаяСтавка/КоличествоДнейВГоду*Сумма;
				КонецЕсли; 				
			КонецЦикла;
			ТекДата = ТекДата + 24 * 60 * 60;
		КонецЦикла;	
	Иначе
		
		ТекДата = НачалоДня(НачалоМесяца(Объект.Дата));
		Пока ТекДата <= КонецМесяца(Объект.Дата) Цикл
			Остатки = ПолучитьОстаткиПо6667Счету(ТекДата);
			Для каждого РазрезОстатка Из Остатки Цикл
				Сумма = РазрезОстатка.СуммаОстатокКт - РазрезОстатка.СуммаОстатокДт;
				Если Сумма <> 0 Тогда
					ПроцентнаяСтавка = РазрезОстатка.ПроцентнаяСтавка;
					Стр = Объект.ПроцентныеНачисления.Добавить();
					ЗаполнитьЗначенияСвойств(Стр, РазрезОстатка); 
					Стр.Дата  = ТекДата;
					Стр.Сумма = ПроцентнаяСтавка / КоличествоДнейВГоду * Сумма;
					Стр.СуммаКт = ?(КоличествоДнейВГоду * РазрезОстатка.СуммаКт, ПроцентнаяСтавка / КоличествоДнейВГоду * РазрезОстатка.СуммаКт, 0);
				КонецЕсли; 				
			КонецЦикла;
			ТекДата = ТекДата + 24 * 60 * 60;
		КонецЦикла;	
		
		ВремТЧ = Объект.ПроцентныеНачисления.Выгрузить();
		ВремТЧ.Свернуть("Счет, Субконто1, Субконто2", "Сумма, СуммаКт");
		Для каждого ТекСтрока Из ВремТЧ Цикл
			НоваяСтрока = Объект.КредитыИЗаймы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НайденныеСтроки = Объект.СчетаРасчета.НайтиСтроки(Новый Структура("Счет", ТекСтрока.Счет));
			Если НайденныеСтроки.Количество() Тогда
				НоваяСтрока.СчетНачисления = НайденныеСтроки[0].СчетНачисления;		
			КонецЕсли;
		КонецЦикла; 
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПредприятияНачисленияПриИзменении(Элемент)
	//Объект.ПроцентныеНачисления.Очистить();
	//ЗаполнитьНаСервере();
КонецПроцедуры

&НаСервере
Функция ПолучитьПредприятиеКазна()
	Возврат Константы.сабПредприятиеКазна.Получить();
КонецФункции

&НаКлиенте
Процедура ВидНачисленияПриИзменении(Элемент)

	Объект.ПроцентныеНачисления.Очистить();
	Объект.КредитыИЗаймы.Очистить();
	ВидНачисленияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВидНачисленияПриИзмененииНаСервере()

	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПроцентыПоКредитам.ПроцентыПоКазне") Тогда
		Элементы.ГруппаВидОстатка.Видимость = Истина;
		//Элементы.Предприятия.Видимость = Ложь;
		Элементы.Группа6.Видимость = Ложь;
		Элементы.Группа8.Видимость = Ложь;
		//Элементы.ПроцентныеНачисленияЗаполнить.Видимость = Ложь;
	Иначе	
		Элементы.ГруппаВидОстатка.Видимость = Ложь;
		//Элементы.Предприятия.Видимость = Истина;
		Элементы.Группа6.Видимость = Истина;
		Элементы.Группа8.Видимость = Истина;
		//Элементы.ПроцентныеНачисленияЗаполнить.Видимость = Истина;
	КонецЕсли;

КонецПроцедуры


&НаСервере
Функция ПолучитьОстаткиПо55Счету(ТекДата)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетныйОстатки.СуммаОстатокДт,
	|	УчетныйОстатки.Предприятия,
	|	УчетныйОстатки.СуммаОстатокКт
	|ИЗ
	|	РегистрБухгалтерии.Учетный.Остатки(&Период, Счет = &Счет, , Предприятия = &Предприятие) КАК УчетныйОстатки";
	Запрос.УстановитьПараметр("Период", 		ТекДата);
	Запрос.УстановитьПараметр("Счет", 			ПланыСчетов.Учетный.Счет5501());
	Запрос.УстановитьПараметр("Предприятие", 	Объект.Предприятие);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция ПолучитьОстаткиПо6667Счету(ТекДата)
	
	//Счета = Новый Массив;
	//Счета.Добавить(ПланыСчетов.Учетный.НайтиПоКоду("66"));
	//Счета.Добавить(ПланыСчетов.Учетный.НайтиПоКоду("67"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетныйОстатки.СуммаОстатокДт КАК СуммаОстатокДт,
	|	УчетныйОстатки.Предприятия КАК Предприятия,
	|	УчетныйОстатки.СуммаОстатокКт КАК СуммаОстатокКт,
	|	УчетныйОстатки.СуммаОстатокКт КАК СуммаКт,
	|	УчетныйОстатки.Субконто1 КАК Субконто1,
	|	УчетныйОстатки.Субконто2 КАК Субконто2,
	|	УчетныйОстатки.Счет КАК Счет,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(УчетныйОстатки.Субконто1) = ТИП(Справочник.ДоговорыКредитовИДепозитов)
	|				ИЛИ ТИПЗНАЧЕНИЯ(УчетныйОстатки.Субконто1) = ТИП(Справочник.ВнутренниеДоговоры)
	|			ТОГДА ЕстьNULL(УчетныйОстатки.Субконто1.ПроцентнаяСтавка / 100, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(УчетныйОстатки.Субконто2) = ТИП(Справочник.ДоговорыКредитовИДепозитов)
	|				ИЛИ ТИПЗНАЧЕНИЯ(УчетныйОстатки.Субконто2) = ТИП(Справочник.ВнутренниеДоговоры)
	|			ТОГДА ЕстьNULL(УчетныйОстатки.Субконто2.ПроцентнаяСтавка / 100, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПроцентнаяСтавка
	|ИЗ
	|	РегистрБухгалтерии.Учетный.Остатки(&Период, Счет В ИЕРАРХИИ (&Счета), , Предприятия = &Предприятие) КАК УчетныйОстатки";
	Запрос.УстановитьПараметр("Период", 		ТекДата);
	Запрос.УстановитьПараметр("Счета", 			Объект.СчетаРасчета.Выгрузить().ВыгрузитьКолонку("Счет"));
	Запрос.УстановитьПараметр("Предприятие", 	Объект.Предприятие);
	
	ТЧВыгрузки = Запрос.Выполнить().Выгрузить();
	
	Для каждого ТекСтрока Из ТЧВыгрузки Цикл
		Если НЕ ТекСтрока.ПроцентнаяСтавка Тогда
			Если Не ЗначениеЗаполнено(ТекСтрока.Субконто2) Тогда
				Если ОшибкиПоКонтрагентам.НайтиПоЗначению(ТекСтрока.Субконто1) = Неопределено Тогда
					ОшибкиПоКонтрагентам.Добавить(ТекСтрока.Субконто1);
					Сообщить("Не заполнен кредитный договор для контрагента <" + Строка(ТекСтрока.Субконто1) + ">, невозможно расчитать сумму процентов.");
				КонецЕсли;
			Иначе
				Если ОшибкиПоКонтрагентам.НайтиПоЗначению(ТекСтрока.Субконто2) = Неопределено Тогда
					ОшибкиПоКонтрагентам.Добавить(ТекСтрока.Субконто2);
					Сообщить("Не установлена процентная ставка для контрагента <" + Строка(ТекСтрока.Субконто1) + "> по договору <" + Строка(ТекСтрока.Субконто2) + ">, невозможно расчитать сумму процентов.");
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТЧВыгрузки;
	
КонецФункции

&НаСервере
Функция ПолучитьПроцентнуюСтавку(ТекДата, Предприятие, РазрезОстатка)
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПроцентыПоКредитам.ПроцентыПоКазне Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КЗ_ПроцентнаяСтавкаПредприятияСрезПоследних.ПроцентнаяСтавка
		|ИЗ
		|	РегистрСведений.КЗ_ПроцентнаяСтавкаПредприятия.СрезПоследних(&Период, Предприятие = &Предприятие) КАК КЗ_ПроцентнаяСтавкаПредприятияСрезПоследних";
		Запрос.УстановитьПараметр("Период", ТекДата);
		Запрос.УстановитьПараметр("Предприятие", Предприятие);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Возврат 0;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.ПроцентнаяСтавка/100;
		КонецЦикла;	
	Иначе	
		Возврат РазрезОстатка.Субконто2.ПроцентнаяСтавка/100;
	КонецЕсли;	
	
КонецФункции	

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	сабОбщегоНазначения.ОтобразитьСостояниеДокумента(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	сабОбщегоНазначения.ОтобразитьСостояниеДокумента(ЭтаФорма, ТекущийОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КоррСчетПриИзменении(Элемент)
	СчетПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СчетПриИзмененииНаСервере()
	
	ДанныеСчета = УправленческийУчетПовтИсп.ПолучитьСвойстваСчета(Объект.КоррСчет, Объект.Предприятие);
	
	Наименование1 = ДанныеСчета["ВидСубконто1Наименование"];
	Наименование2 = ДанныеСчета["ВидСубконто2Наименование"];
	Наименование3 = ДанныеСчета["ВидСубконто3Наименование"];
	УчетПоПодразделениям = ДанныеСчета["УчетПоПодразделениям"];
	
	//Элементы.Субконто1.Заголовок = Наименование1;
	//Элементы.Субконто2.Заголовок = Наименование2;
	//Элементы.Субконто3.Заголовок = Наименование3;
	
	Элементы.Субконто1.ПодсказкаВвода = Наименование1;
	Элементы.Субконто2.ПодсказкаВвода = Наименование2;
	Элементы.Субконто3.ПодсказкаВвода = Наименование3;
	//Элементы.КорПодразделение.ПодсказкаВвода = ?(УчетПоПодразделениям, "Подразделение затрат", "");
	
	Элементы.Субконто1.Видимость = ЗначениеЗаполнено(Наименование1);
	Элементы.Субконто2.Видимость = ЗначениеЗаполнено(Наименование2);
	Элементы.Субконто3.Видимость = ЗначениеЗаполнено(Наименование3);
	//Элементы.КорПодразделение.Видимость = УчетПоПодразделениям;
	
КонецПроцедуры


&НаКлиенте
Процедура КредитыИЗаймыПриАктивизацииСтроки(Элемент)
	ТекДанные = Элементы.КредитыИЗаймы.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		Элементы.ПроцентныеНачисления.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("Субконто1, Субконто2", ТекДанные.Субконто1, ТекДанные.Субконто2));
	Иначе
		Элементы.ПроцентныеНачисления.ОтборСтрок = Неопределено;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНастройки(Команда)
	ЗаполнитьСчетаРасчетов(Истина);
КонецПроцедуры

&НаКлиенте
Процедура КредитыИЗаймыПослеУдаления(Элемент)
	МассивСтрокКУдалению = Новый Массив;
	Для каждого ТекСтрока Из Объект.ПроцентныеНачисления Цикл
		НайденныйКредит = Объект.КредитыИЗаймы.НайтиСтроки(Новый Структура("Субконто1", ТекСтрока.Субконто1));
		Если НЕ НайденныйКредит.Количество() Тогда
			МассивСтрокКУдалению.Добавить(ТекСтрока);	
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекСтрока Из МассивСтрокКУдалению Цикл
		Объект.ПроцентныеНачисления.Удалить(ТекСтрока);	
	КонецЦикла; 
	
КонецПроцедуры
