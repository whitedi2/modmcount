&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоНовыйЧистый = Не ЗначениеЗаполнено(Объект.Ссылка);
	
	Если НЕ Объект.Проводки.Количество() Тогда
		НоваяСтрока = Объект.Проводки.Добавить();
	КонецЕсли;
	
	КоличествоСтрок = Объект.Проводки.Количество();
	
	Если Параметры.Свойство("ВидОперации") Тогда
		Объект.ВидОперации = Параметры.ВидОперации;	
	КонецЕсли;
	
	Если Параметры.Свойство("ПриходРасход") Тогда
		Объект.ПриходРасход = Параметры.ПриходРасход;	
	КонецЕсли;
	
	ВНХМодульРаботает = Ложь;
	УчетДДСПоЦФО = Истина;
	МодульОперУчет = Ложь;
	РасширенныйУчетВалюты = Ложь;
	
	Расшифровка = Объект.РасшифровкаОплаты;
	
	Если Параметры.Свойство("НомерСтроки") Тогда 
		Если Параметры.НомерСтроки >= Объект.Проводки.Количество() Тогда
			Элементы.Проводки.ТекущаяСтрока = Объект.Проводки.Количество() - 1;
		Иначе
			Элементы.Проводки.ТекущаяСтрока = Параметры.НомерСтроки - 1;
		КонецЕсли;
	Иначе
		Элементы.Проводки.ТекущаяСтрока = 0;
	КонецЕсли;
	
	БюджетныйНаСервере.ДействияПриСозданииФормыДокумента(ЭтаФорма);
	
	//ДобавитьСвязПараметровВыбораИсточника();
	
	//Элементы.Группа7.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	Расшифровка = Объект.РасшифровкаОплаты ИЛИ Объект.Проводки.Количество() > 1;
	Элементы.Группа7.ТекущаяСтраница = ?(Расшифровка, Элементы.Расшифровка, Элементы.СтраницаКор);
	
	Элементы.ВидОперации.Доступность = ПравоДоступа("Просмотр", Метаданные.Документы.УЧ_ДвижениеДС.Команды.БезналичныеПлатежи);	
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьДобавленныеКолонкиТаблиц();
	КонецЕсли;
	
	СчетВалютный = Объект.Счет.Валютный;
	
	ВидОперацииПриИзмененииНаСервере(Ложь);
	
	ОбновитьСвязиПоЦФОНаСервере(Ложь);
	
	Если ЗначениеЗаполнено(Объект.ДокОснование) И ТипЗнч(Объект.ДокОснование) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		СуммаОснования = Объект.ДокОснование.СуммаДокумента;
	ИначеЕсли ЗначениеЗаполнено(Объект.ДокОснование) И ТипЗнч(Объект.ДокОснование) = Тип("ДокументСсылка.УЧ_ДвижениеДС") Тогда
		СтрокаДокументаОснования = Объект.ДокОснование.Проводки.Найти(Объект.ГУИДОснования, "ГУИДСтроки");
		
		Если Не СтрокаДокументаОснования = Неопределено Тогда
			СуммаОснования = СтрокаДокументаОснования.Сумма;
		КонецЕсли;
		
	ИначеЕсли НЕ Элементы.Найти("СуммаОснования") = Неопределено Тогда
		Элементы.СуммаОснования.Видимость = Ложь;
	КонецЕсли;
	
	ЭтаФорма.Элементы.Доверенность.Видимость = (Объект.ВидОперации = Перечисления.ВидыОперацийДвиженияДС.КассовыйОрдер)и(Объект.ПриходРасход = Перечисления.ВидыОперацийПлатежноеПоручение.Поступление);
	
	// + Ничуговская 22.04.19 (+ 31.05.19 добавила проверку на галочку в учетной политике)
	ЗапрещатьИзменениеКО = ЗапрещеноИзменениеКОПрошлыхПериодов();
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийДвиженияДС.КассовыйОрдер") И ЗапрещатьИзменениеКО И НЕ (РольДоступна("Администратор") ИЛИ РольДоступна("ОФК")) Тогда
		
		КоличествоДнейВозможностиРедактирования = 0;
		ДатаОтркрытия = ТекущаяДата();
		ИндексДней = 0;
		КоличествоРабочихДней = 1;
		
		Пока КоличествоРабочихДней <= КоличествоДнейВозможностиРедактирования +1 Цикл
			
			ДатаПеребора = Объект.Дата + ИндексДней*24*60*60;
			ГодКалендаря = Год(ДатаПеребора);		
			Календарь = БюджетныйНаСервере.ПолучитьКалендарьнаСервере("Российская Федерация");
			РабочийДень = БюджетныйНаСервере.ПолучитьПризнакРабочегоДня(Календарь,ГодКалендаря,НачалоДня(ДатаПеребора));
			
			Если ТипЗнч(РабочийДень) = ТИп("Булево") Тогда
				
				Если РабочийДень Тогда 
					КоличествоРабочихДней = КоличествоРабочихДней + 1;
				КонецЕсли;
				
			Иначе 
				
				Сообщить("Не заполнен календарный график на " + ДатаПеребора);
				БюджетныйНаСервере.ФормаТолькоПросмотр(Объект.Ссылка, ЭтаФорма, Истина);
				Прервать;
				
			КонецЕсли;
			
			ИндексДней = ИндексДней + 1;
			
		КонецЦикла;
		
		Если НачалоДня(ДатаПеребора) < НачалоДня(ТекущаяДата()) Тогда 
			
			КоличествоДнейПросрочки = (ТекущаяДата() - ДатаПеребора)/24/60/60;
			
			Если (КоличествоДнейПросрочки >1)
				ИЛИ (КоличествоДнейПросрочки = 1 и Час(ТекущаяДата()) < 10) Тогда 
				БюджетныйНаСервере.ФормаТолькоПросмотр(Объект.Ссылка, ЭтаФорма, Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	// - Ничуговская
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Заголовок = Строка(Объект.ВидОперации) + " (создание)";
		АвтоЗаголовок = Ложь;
	КонецЕсли;
	
	ЗаполнитьОбратноеВНХ();
	
	Элементы.ИнвПроект.Видимость = ЗначениеЗаполнено(Объект.ИнвПроект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбратноеВНХ()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) И НЕ ПараметрыСеанса.ОграничиватьПредприятия Тогда
		УстановитьПривилегированныйРежим(Истина);
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	сабСоответствиеОбъектовИнформационнойБазы.Объект2 КАК Объект2,
		               |	сабСоответствиеОбъектовИнформационнойБазы.Объект1 КАК Объект1,
		               |	ВЫРАЗИТЬ(сабСоответствиеОбъектовИнформационнойБазы.Объект1 КАК Документ.УЧ_ДвижениеДС).Предприятие КАК Предприятие1,
		               |	ВЫРАЗИТЬ(сабСоответствиеОбъектовИнформационнойБазы.Объект2 КАК Документ.УЧ_ДвижениеДС).Предприятие КАК Предприятие2
		               |ИЗ
		               |	РегистрСведений.сабСоответствиеОбъектовИнформационнойБазы КАК сабСоответствиеОбъектовИнформационнойБазы
		               |ГДЕ
		               |	(сабСоответствиеОбъектовИнформационнойБазы.Объект1 = &ТекДокумент
		               |			ИЛИ сабСоответствиеОбъектовИнформационнойБазы.Объект2 = &ТекДокумент)";
		
		Запрос.УстановитьПараметр("ТекДокумент", Объект.Ссылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Объект.ПриходРасход = Перечисления.ВидыОперацийПлатежноеПоручение.ОплатаВНХ Тогда
				ОбратноеВНХДвижение = Выборка.Объект2;
				Если ПараметрыСеанса.ДоступныеПредприятия.Найти(Выборка.Предприятие2) = Неопределено Тогда
					Элементы.ОбратноеВНХДвижение.Видимость = Ложь;			
				КонецЕсли;
			ИначеЕсли Объект.ПриходРасход = Перечисления.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ Тогда
				ОбратноеВНХДвижение = Выборка.Объект1;
				Если ПараметрыСеанса.ДоступныеПредприятия.Найти(Выборка.Предприятие1) = Неопределено Тогда
					Элементы.ОбратноеВНХДвижение.Видимость = Ложь;			
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ОбратноеВНХДвижение_ДоУдаления = ОбратноеВНХДвижение;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗапрещеноИзменениеКОПрошлыхПериодов()
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетныеПолитики.ЗапретИзмененияКОПрошлыхПериодов КАК ЗапретИзмененияКОПрошлыхПериодов
		|ИЗ
		|	Справочник.Предприятия КАК Предприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеПолитики КАК УчетныеПолитики
		|		ПО Предприятия.УчетнаяПолитика = УчетныеПолитики.Ссылка
		|ГДЕ
		|	Предприятия.Ссылка = &Предприятие";
	
	Запрос.УстановитьПараметр("Предприятие", Объект.Предприятие);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Рез = Ложь;
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		 Рез = ВыборкаДетальныеЗаписи.ЗапретИзмененияКОПрошлыхПериодов;
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Отказ = сабОперОбщегоНазначенияНаКлиенте.ПроверкаСозданияНаОснованииНаКлиенте(Объект);
	Если Отказ Тогда
		Возврат;	
	КонецЕсли; 
	
	Если Объект.РасшифровкаОплаты Тогда
		ПроводкиСчетДебетПриИзменении(Неопределено);
		ПроводкиКорСчет79ПриИзменении(Неопределено);
	КонецЕсли;
	
	//добавлено д1 20.07.16. нужно удалить дублирование в присозданиинасервере
	сабОбщегоНазначенияКлиентСервер.СкрытьПодразделения(ЭтаФорма);
	
	//Если ЗапретРедактирования Тогда
	//	БюджетныйНаКлиенте.ФормаТолькоПросмотр(Объект.Ссылка, ЭтаФорма, Истина);
	//КонецЕсли;
	
	//Элементы.Группа7.ТекущаяСтраница = ?(Объект.РасшифровкаОплаты, Элементы.Расшифровка, Элементы.СтраницаКор);
	
		
	
КонецПроцедуры

&НаСервере
Процедура ПредприятиеПриИзмененииНаСервере()
	сабОбщегоНазначенияКлиентСервер.СкрытьПодразделения(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиСубконто1ДебетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//Если ТипЗнч(Элементы.Проводки.ТекущиеДанные.КорСубконто1) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
	//	ТекСубконто = ?(ЗначениеЗаполнено(Элементы.Проводки.ТекущиеДанные.КорСубконто1), Элементы.Проводки.ТекущиеДанные.КорСубконто1,
	//	БюджетныйНаСервере.ВернутьРеквизит(Объект.ДокОснование, "ИнвПроект"));
	//ИначеЕсли ТипЗнч(Элементы.Проводки.ТекущиеДанные.КорСубконто1) = Тип("СправочникСсылка.ДоговорыКредитовИДепозитов") И ПолучитьДопСвойствоОграниченияКредитов() И ЗначениеЗаполнено(Объект.Контрагент) Тогда
	//	СтандартнаяОбработка = Ложь;
	//	ОткрытьФорму("Справочник.ДоговорыКредитовИДепозитов.Форма.ФормаВыбора", Новый Структура("ТекКредитор", Объект.Контрагент),Элемент);
	//Иначе
	//	ТекСубконто = Элементы.Проводки.ТекущиеДанные.КорСубконто1;	
	//КонецЕсли;
	//
	//
	//БюджетныйНаКлиенте.НачалоВыбораСубконто(
	//Элементы.Проводки.ТекущиеДанные.КорСчет,
	//ТекСубконто,
	//1,
	//Элемент,
	//СтандартнаяОбработка,
	//);
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиСубконто2ДебетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//Если ТипЗнч(Элементы.Проводки.ТекущиеДанные.КорСубконто2) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
	//	ТекСубконто = ?(ЗначениеЗаполнено(Элементы.Проводки.ТекущиеДанные.КорСубконто2), Элементы.Проводки.ТекущиеДанные.КорСубконто2,
	//	БюджетныйНаСервере.ВернутьРеквизит(Объект.ДокОснование, "ИнвПроект"));
	//Иначе
	//	ТекСубконто = Элементы.Проводки.ТекущиеДанные.КорСубконто2;	
	//КонецЕсли;
	//
	//СтруктураДляПередачи = Новый Структура("ДатаДок,ПредприятиеДок",Объект.Дата,Объект.Предприятие);
	//БюджетныйНаКлиенте.НачалоВыбораСубконто(
	//Элементы.Проводки.ТекущиеДанные.КорСчет,
	//ТекСубконто,
	//2,
	//Элемент,
	//СтандартнаяОбработка,
	//,
	//СтруктураДляПередачи);		
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеПриИзменении(Элемент)
	
	ПредприятиеПриИзмененииНаСервере();
	ПриходРасходПриИзменении(Элемент);
	ЗаполнитьКурсНаКлиенте(НЕ Элемент = Неопределено);
	
	Если Объект.Проводки.Количество() = 1 Тогда
		Объект.Проводки[0].ФинЦФО = Объект.Предприятие;
		ПроводкиФинЦФО1ПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КорСчетПриИзменении(Элемент)
	
	МассивВалГрупп = Новый Массив;
	МассивВалГрупп.Добавить("Группа13");
	МассивВалГрупп.Добавить("ВалютнаяСумма2");
	
	БюджетныйНаКлиенте.НазначитьСубконто(Элементы, ЭтаФорма, "КорСубконто1", "КорСубконто2", "КорСубконто3", Объект.КорСчет, "ТранзитноеПодразделение", МассивВалГрупп, НЕ Элемент = Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура Субконто2ПриИзменении(Элемент)
	
	ПроводкиСчетДебетПриИзменении(Неопределено, Неопределено);
	Субконто2ПриИзмененииНаСервере(Не Элемент = Неопределено);	
	СчетЗатратПриИзмененииНаСервере();
	ПроводкиСубконто2ДебетПриИзменении(Элемент);
	
КонецПроцедуры

&НаСервере
Процедура Субконто2ПриИзмененииНаСервере(Изменять)
	
	//Счет66_Отель_Казна();
	Элементы.Видимость79.Доступность = ((ЗначениеЗаполнено(Объект.ДокОснование) И НЕ ТипЗнч(Объект.ДокОснование) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") И НЕ ТипЗнч(Объект.ДокОснование) = Тип("ДокументСсылка.ПлатежноеПоручение"))) ИЛИ Объект.Счет = ПланыСчетов.Учетный.НайтиПоКоду("55.01");
	
	Если Изменять ИЛИ ЭтоНовыйЧистый Тогда
		
		//Если НЕ Элементы.Видимость79.Доступность Тогда
		//	Объект.Видимость79 = Ложь;
		//	Видимость79ПриИзменении(Неопределено);
		//КонецЕсли;
		
		//подставим счет
		ИзменитьСчетСервер();
		
		// обращение №1 база ЛП, основная валюта учета берется из предприятия, к которому привязан источник
		//ПересчитатьПоКурсуНаДатуНаСервере();
		
	КонецЕсли;
	
	ЗаполнитьКурсНаСервере(Изменять);

КонецПроцедуры

&НаСервере
Процедура ИзменитьСчетСервер()
	
	Если ТипЗнч(Объект.Субконто2) = Тип("СправочникСсылка.Кассы") Тогда
		РеквизитыИсточника = БюджетныйНаСервере.ВернутьРеквизиты(Объект.Субконто2, "ВидИсточника, ВалютаДенежныхСредств"); 
		ТипИсточника = РеквизитыИсточника.ВидИсточника;
		Объект.Валюта1 = РеквизитыИсточника.ВалютаДенежныхСредств;
	ИначеЕсли ТипЗнч(Объект.Субконто2) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		РеквизитыИсточника = БюджетныйНаСервере.ВернутьРеквизиты(Объект.Субконто2, "ВидСчета, ВалютаДенежныхСредств, Владелец"); 
		ТипИсточника = РеквизитыИсточника.ВидСчета;
		Объект.Организация = ?(ЗначениеЗаполнено(Объект.Организация), Объект.Организация, РеквизитыИсточника.Владелец);
		Объект.Валюта1 = РеквизитыИсточника.ВалютаДенежныхСредств;
	Иначе		
		ТипИсточника = Перечисления.ГД_ВидыИсточников.РассчетныйСчет;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Субконто2) И ЗначениеЗаполнено(Объект.Субконто2.СчетУчета) Тогда
		СчетУчета = Объект.Субконто2.СчетУчета;
		Если ЗначениеЗаполнено(СчетУчета) Тогда
			СчетВалютный = СчетУчета.Валютный;
			Если Не СчетВалютный Тогда
				Объект.Курс1 = 0;
				Объект.ВалютнаяСумма1 = 0;
			КонецЕсли;
			Объект.Счет = СчетУчета;
		КонецЕсли;
	Иначе
		СчетВалютный = Ложь;
		
		Если ТипИсточника = Перечисления.ГД_ВидыИсточников.Касса Или ТипИсточника = Перечисления.ГД_ВидыИсточников.КассаУчет  Тогда
			Объект.Счет = ПланыСчетов.Учетный.Счет5001();
			Объект.Курс1 = 0;
			Объект.ВалютнаяСумма1 = 0;
		ИначеЕсли ТипИсточника = Перечисления.ГД_ВидыИсточников.РассчетныйСчет  Тогда
			Объект.Счет = ПланыСчетов.Учетный.Счет5101();
			Объект.Курс1 = 0;
			Объект.ВалютнаяСумма1 = 0;
		ИначеЕсли ТипИсточника = Перечисления.ГД_ВидыИсточников.ВалютнаяКасса Или ТипИсточника = Перечисления.ГД_ВидыИсточников.ВалютнаяКассаУчет Тогда
			Объект.Счет = ПланыСчетов.Учетный.Счет5002();
			СчетВалютный = Истина;
		ИначеЕсли ТипИсточника = Перечисления.ГД_ВидыИсточников.ВалютныйРасчетныйСчет  Тогда
			Объект.Счет = ПланыСчетов.Учетный.Счет5102();
			СчетВалютный = Истина;
		ИначеЕсли ТипИсточника = Перечисления.ГД_ВидыИсточников.ЛицевойСчетРКП  Тогда
			Объект.Счет = ПланыСчетов.Учетный.ЛицевыеСчета;
			Объект.Курс1 = 0;
			Объект.ВалютнаяСумма1 = 0;
		ИначеЕсли ТипИсточника = Перечисления.ГД_ВидыИсточников.ЛицевойСчетРКПВал  Тогда
			Объект.Счет = ПланыСчетов.Учетный.ЛицевыеСчетаВал;
			СчетВалютный = Истина;
		КонецЕсли;
		
		Если ТипЗнч(Объект.Субконто2) = Тип("СправочникСсылка.БанковскиеСчета") И (Объект.Субконто2.Валютный ИЛИ НЕ Объект.Субконто2.ВалютаДенежныхСредств = УЧ_Сервер.НациональнаяВалюта()) Тогда
			СчетВалютный = Истина;
			Объект.Счет = ПланыСчетов.Учетный.Счет5102();
		КонецЕсли;
		
		Если Объект.Субконто2 = сабОбщегоНазначенияПовтИсп.ПолучитьПредопределенныйИсточник() Тогда
			Объект.Счет = ПланыСчетов.Учетный.Счет5501();	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВалютнаяСумма1ПриИзменении(Элемент)
	
	ПересчитатьВалСумму(Не Элемент = Неопределено, "ВалютнаяСумма");
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	ПересчитатьВалСумму(Не Элемент = Неопределено, "Сумма");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиПослеУдаления(Элемент)
	//КоманднаяПанель.Доступность = ( Объект.Проводки.Итог("Сумма") =  Объект.СуммаДокумента);
	Если Объект.Проводки.Количество() = 1 Тогда
		Объект.Проводки[0].Сумма = Объект.СуммаДокумента;
		Объект.Проводки[0].ВалСумма = Объект.ВалютнаяСумма1;	
	КонецЕсли;
	УстановитьВидимостьСтолбцыСумм();
	//ОтображениеДекорации1();
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиСчетДебетПриИзменении(Элемент, ДанныеСчета = Неопределено)
	
	ТекСтрока = Элементы.Проводки.ТекущиеДанные;
	
	Если ТекСтрока = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Если ДанныеСчета = Неопределено Тогда
		ДанныеСчета = УправленческийУчетПовтИсп.ПолучитьСвойстваСчета(ТекСтрока.КорСчет, Объект.Предприятие);
	КонецЕсли;
	
	ПоЦФО = ВНХМодульРаботает И УчетДДСПоЦФО И ?(ЗначениеЗаполнено(ТекСтрока.ФинЦФО) И НЕ ТекСтрока.ФинЦФО = Объект.Предприятие, Истина, Ложь);
	
	Если УЧ_Сервер.ДенежныйСчет(ТекСтрока.КорСчет) И НЕ Элемент = Неопределено Тогда
		//ТекСтрока.КорСубконто1 = БюджетныйНаСервере.ОбратнаяВнутрихолдинговаяСтатья(ТекСтрока.ФинСтатья); 	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) И НЕ Элемент = Неопределено И НЕ ДанныеСчета = Неопределено И НЕ ДанныеСчета.ВидСубконто1ТипЗначения = Неопределено И ДанныеСчета.ВидСубконто1ТипЗначения.СодержитТип(Тип("СправочникСсылка.Контрагенты")) И НЕ ПоЦФО Тогда
		ТекСтрока.КорСубконто1 = Объект.Контрагент;
		
		Если ЗначениеЗаполнено(Объект.Договор) И НЕ Элемент = Неопределено И НЕ ДанныеСчета.ВидСубконто2ТипЗначения = Неопределено И ДанныеСчета.ВидСубконто2ТипЗначения.СодержитТип(Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
			ТекСтрока.КорСубконто2 = Объект.Договор;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Контрагент) И НЕ Элемент = Неопределено И НЕ ДанныеСчета = Неопределено И НЕ ДанныеСчета.ВидСубконто1ТипЗначения = Неопределено И ДанныеСчета.ВидСубконто1ТипЗначения.СодержитТип(Тип("СправочникСсылка.Сотрудники")) Тогда
		ТекСтрока.КорСубконто1 = Объект.Контрагент;
	ИначеЕсли ЗначениеЗаполнено(Объект.ИнвПроект) И НЕ Элемент = Неопределено И НЕ ДанныеСчета = Неопределено И НЕ ДанныеСчета.ВидСубконто1ТипЗначения = Неопределено И ДанныеСчета.ВидСубконто1ТипЗначения.СодержитТип(Тип("СправочникСсылка.ОбъектыСтроительства")) Тогда
		ТекСтрока.КорСубконто1 = Объект.ИнвПроект;
	КонецЕсли;
	
	Если ТипЗнч(ТекСтрока.КорСубконто2) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ВалютаТекДоговора = БюджетныйНаСервере.ВернутьРеквизит(ТекСтрока.КорСубконто2, "ВалютаДоговора");
		ТекСтрока.ДоговорВалютный = ЗначениеЗаполнено(ВалютаТекДоговора) И ЗначениеЗаполнено(Объект.Валюта1) И Не (ВалютаТекДоговора = Объект.Валюта1);
	Иначе
		ТекСтрока.ДоговорВалютный = БюджетныйНаСервере.ВернутьРеквизит(ТекСтрока.КорСчет, "ДенежныйСчет");
	КонецЕсли;
	
	Элементы.Проводки.ТекущиеДанные.КорВалСуммаДоступность = ТекСтрока.ДоговорВалютный И БюджетныйНаСервере.ВернутьРеквизит(ТекСтрока.КорСчет, "Валютный");
	
	ЭтоВНХСчет = УЧ_Сервер.ВНХСчет(ТекСтрока.КорСчет);
	
	//Если НЕ ЭтоВНХСчет Тогда
	//	ТекСтрока.ТипОплаты = Ложь;
	//ИначеЕсли ЭтоКазна(Объект.Субконто2) Тогда
	//	ТекСтрока.ТипОплаты = Истина;
	//	Если НЕ ЗначениеЗаполнено(Объект.ДокОснование) И НЕ ЗначениеЗаполнено(ТекСтрока.ФинСтатья) И НЕ Элемент = Неопределено Тогда //облегчалка для финика
	//		ТекСтрока.ФинСтатья = ВХСтатья(Объект.ПриходРасход);
	//	КонецЕсли;
	//ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ДокОснование) И НЕ ЗначениеЗаполнено(ТекСтрока.ФинСтатья) И НЕ Элемент = Неопределено Тогда //облегчалка для финика
	//КонецЕсли;
	
	Если ЭтоВНХСчет Тогда
		Массив = Новый Массив;
		Массив.Добавить(Тип("СправочникСсылка.Предприятия"));
		НовыйТип = Новый ОписаниеТипов(Массив);
		Элементы.ПроводкиСубконто1Дебет.ОграничениеТипа = НовыйТип;
		Элементы.ПроводкиСубконто1Дебет.ВыбиратьТип = Ложь;
		Если Не Элемент = Неопределено Тогда
			Если Не ЗначениеЗаполнено(ТекСтрока.КорСубконто1) Тогда
				Элементы.Проводки.ТекущиеДанные.КорСубконто1 = ПредопределенноеЗначение("Справочник.Предприятия.ПустаяСсылка");		
			КонецЕсли;
			
			ТекСтрока.КорСчет791 = "";	
			ТекСтрока.КорСубконто791 = "";
			ТекСтрока.КорСубконто792 = "";
			ТекСтрока.КорСубконто793 = "";
		КонецЕсли;
	Иначе
		Элементы.ПроводкиСубконто1Дебет.ВыбиратьТип = Истина;
	КонецЕсли;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3, Количество, Предприятие, КорСчет79, Подразделение, Элементы, ЭлементСубконто1, ЭлементСубконто2, ЭлементСубконто3, ЭлементПодразделение, Субконто2ВладелецРазличен, ЭлементСубконто2БезВладельца, ВалютаТолькоДенежныйСчет, ЕстьРасшифровкаСуммы, Договор, Источник",
	"КорСубконто1", "КорСубконто2", "КорСубконто3", "Количество", ?(ПоЦФО, Элементы.Проводки.ТекущиеДанные.ФинЦФО, Объект.Предприятие), УЧ_Сервер.ВНХСчет(Элементы.Проводки.ТекущиеДанные.КорСчет) И (НЕ ЭтоКазна(Объект.Субконто2) ИЛИ (НЕ ЗначениеЗаполнено(Объект.ДокОснование) И НЕ ЗначениеЗаполнено(Объект.ДокОснование2))), "Подразделение", Элементы, "ПроводкиСубконто1Дебет", "ПроводкиСубконто2Дебет", "ПроводкиСубконто3Дебет", "ПроводкиПодразделение", "КорСубконто2ВладелецРазличен", "ПроводкиКорСубконто2БезВладельца", Истина, Объект.Проводки.Количество() > 1, Объект.Договор, Объект.Субконто2);
	БюджетныйНаКлиенте.УстановитьДоступность(Элементы.Проводки.ТекущиеДанные, ПоляОбъекта);
	
	//ОтображениеДекорации1();
	
	//Если Не Элементы.Проводки.ТекущиеДанные.ВалютаДоступность Тогда
	//	Элементы.ПроводкиГруппа3.Видимость = Ложь;
	//	Элементы.Проводки.ТекущиеДанные.Валюта = "";
	//	Элементы.Проводки.ТекущиеДанные.КорВалСумма = 0;
	//Иначе
	//	Элементы.ПроводкиГруппа3.Видимость = Истина;
	//	Элементы.ПроводкиВалюта.Видимость = Истина;
	//	Элементы.ПроводкиВалСумма.Видимость = Истина;
	//КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция УчетВНесколькихБазах()
	Возврат Ложь;
КонецФункции // ()


&НаСервереБезКонтекста
Функция ВХСтатья(ПриходРасход)
	
	Возврат ?(НЕ ПП_Сервер.ЭтоРасходнаяОперация(ПриходРасход), Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("9300.01"), Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("9400.01"));	
	
КонецФункции // ()

&НаСервереБезКонтекста
Функция НПСтатья(ПриходРасход)
	
	//Возврат ?(НЕ ПП_Сервер.ЭтоРасходнаяОперация(ПриходРасход), Справочники.СтатьиДвиженияДенежныхСредств.ДоходыДругихПодразделений, Справочники.СтатьиДвиженияДенежныхСредств.РасходыДругихПодразделений);	
	
КонецФункции // ()

&НаКлиенте
Процедура КурсПриИзменении(Элемент)
	
	ПересчитатьВалСумму(Не Элемент = Неопределено, "Курс");
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьВалСумму(Изменять, ИмяРекв)

	ПересчитатьВалСуммуНаСервере(Изменять, ИмяРекв);

КонецПроцедуры

&НаСервере
Процедура ПересчитатьВалСуммуНаСервере(Изменять, ИмяРекв)

	Если НЕ Изменять Тогда
		Возврат;	
	КонецЕсли;
	
	Если СчетВалютный Тогда
		
		ВалютаПредприятия = БюджетныйНаСервере.ВернутьРеквизит(Объект.Предприятие, "ОсновнаяВалютаУчета");
		
		Если Не Объект.Валюта1 = ВалютаПредприятия Тогда
			
			//Объект.ВалютнаяСумма1 = 0;
			//Если Объект.КурсУстановленПользователем И Объект.Курс1 <> 0 Тогда
			//	Объект.СуммаДокумента = Объект.СуммаДокументаРуб / Объект.Курс1;
			//КонецЕсли;
			
		//Иначе
			
			Если Объект.ВалютнаяСумма1 И НЕ ИмяРекв = "Сумма" Тогда
				Объект.СуммаДокумента = Объект.ВалютнаяСумма1 * Объект.Курс1;
			ИначеЕсли Объект.СуммаДокумента И Объект.Курс1 И НЕ ИмяРекв = "ВалютнаяСумма" И НЕ ИмяРекв = "Сумма" Тогда
				Объект.ВалютнаяСумма1 = Объект.СуммаДокумента / Объект.Курс1;	
			ИначеЕсли НЕ ИмяРекв = "Курс" Тогда
				Объект.Курс1 = ?(Объект.ВалютнаяСумма1, Объект.СуммаДокумента / Объект.ВалютнаяСумма1,0);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Если НЕ Объект.РасшифровкаОплаты И Объект.Проводки.Количество() Тогда
		Объект.Проводки[0].Сумма = Объект.СуммаДокумента;
		Объект.Проводки[0].ВалСумма = Объект.ВалютнаяСумма1;
		Объект.Проводки[0].Валюта = Объект.Валюта1;
	КонецЕсли;

КонецПроцедуры



&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	ЗаполнитьКурсНаКлиенте(НЕ Элемент = Неопределено);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция Касса(ВыбИсточник)
	
	Если ТипЗнч(ВыбИсточник) = Тип("СправочникСсылка.Кассы") Тогда
		ВидИсточника = ВыбИсточник.ВидИсточника;
	ИначеЕсли ТипЗнч(ВыбИсточник) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		ВидИсточника = ВыбИсточник.ВидСчета;
	Иначе
		ВидИсточника = Перечисления.ГД_ВидыИсточников.ПустаяСсылка();
	КонецЕсли;	
	
	Если ВидИсточника = Перечисления.ГД_ВидыИсточников.ВалютнаяКасса Или ВидИсточника = Перечисления.ГД_ВидыИсточников.ВалютнаяКассаУчет Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции


&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	//заполняем список переводов
	//СписокПереводов.Очистить();
	//Для каждого ТекСтрока Из Объект.Проводки Цикл
	//	СписокПереводов.Добавить(ТекСтрока.Перевод);
	//	
	//	
	//	
	//КонецЦикла; 
	
	
	//Если Объект.Видимость79 Тогда
	//	Если ПроверкаПрогона() Тогда
	//		Если Вопрос("Вы используете 79 счет в табличной части и в то же время используете галочку ""Прогон ч/з 79"". Возможно задвоение оборотов по 79 счету. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет  Тогда
	//			Отказ = Истина;
	//			Возврат;		
	//		КонецЕсли;		
	//	КонецЕсли;
	//КонецЕсли;
	
	
	
	Для каждого ТекСтрока Из Объект.Проводки Цикл
		//Если ТекСтрока.ФинСтатья.Пустая() Тогда
		//	ТекСтрока.ФинСтатья = Объект.Субконто1;
		//КонецЕсли;
		//Если ТекСтрока.ФинПодразделение.Пустая() Тогда
		//	ТекСтрока.ФинПодразделение = Объект.Подразделение;
		//КонецЕсли;
		
		Если МодульОперУчет И ТипЗнч(ТекСтрока.КорСубконто2) = Тип("СправочникСсылка.ДоговорыКонтрагентов") и ЗначениеЗаполнено(ТекСтрока.КорСубконто2) Тогда 	
			
			Если ТипЗнч(Объект.Субконто2) = Тип("СправочникСсылка.Кассы") Тогда 
				Продолжить;
			КонецЕсли;
			
			Если БюджетныйНаСервере.ВернутьРеквизит(Объект.Субконто2, "Владелец")  <> БюджетныйНаСервере.ВернутьРеквизит(ТекСтрока.КорСубконто2, "Организация") Тогда 
				Отказ = Истина;                                      
				
				Если Отказ Тогда
					сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(ЭтотОбъект, "Организация в источнике отличяется от организации в договоре!", , , "Объект.Договор", Отказ);
				КонецЕсли;
				
			КонецЕсли;	 
		КонецЕсли;
		
		Если ТекСтрока.КорСубконто2ВладелецРазличен Тогда
			ТекСтрока.КорСубконто2 = ТекСтрока.КорСубконто2БезВладельца;
		КонецЕсли;
		
		
	КонецЦикла;  
		
	//д1 17.02.18
	ЗаполнитьСтатьиДДС();
	
	Если Не ЗначениеЗаполнено(Объект.Счет) Тогда
		ИзменитьСчетСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатьиДДС()
	
	ТекСодержание = "";
	
	Для каждого ТекСтрока Из Объект.Проводки Цикл
		
		Если ТипЗнч(Объект.ДокОснование) = Тип("ДокументСсылка.ПлатежноеПоручение") И Объект.Проводки.Количество() = Объект.ДокОснование.ТабличнаяЧасть.Количество() Тогда
			ИндексСтроки = Объект.Проводки.Индекс(ТекСтрока);
			
			Если Не ЗначениеЗаполнено(ТекСтрока.ФинЦФО) Тогда
				ТекСтрока.ФинЦФО = Объект.ДокОснование.ТабличнаяЧасть[ИндексСтроки].Предприятие;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ТекСтрока.ФинПодразделение) Тогда
				ТекСтрока.ФинПодразделение = Объект.ДокОснование.ТабличнаяЧасть[ИндексСтроки].Подразделение;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ТекСтрока.ФинСтатья) Тогда
				ТекСтрока.ФинСтатья = Объект.ДокОснование.ТабличнаяЧасть[ИндексСтроки].СтатьяДДС;
				
				Если УЧ_Сервер.ДенежныйСчет(ТекСтрока.КорСчет) И УЧ_Сервер.ЕстьВидСубконто(ТекСтрока.КорСчет, "СтатьиДДС") Тогда
					ТекСтрока.КорСубконто1 = БюджетныйНаСервере.ОбратнаяВнутрихолдинговаяСтатья(ТекСтрока.ФинСтатья); 	
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		//Если Объект.ПриходРасход = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ВозмещениеОплат") Тогда
		//	ТекСтрока.ФинСтатья = ""; //определить статью
		//ИначеЕсли Объект.ПриходРасход = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ВозмещениеПоступлений") Тогда 
		//	ТекСтрока.ФинСтатья = ""; //определить статью
		//КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьПодчиненныйДокумент(ТекДок)
	ТекДокОб = ТекДок.ПолучитьОбъект();
	ТекДокОб.УстановитьПометкуУдаления(Истина);
	Если ТекДокОб.ПометкаУдаления Тогда
		Сообщить("Документ " + Строка(ТекДок) + " помечен на удаление.");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Команда1(Команда)
	Элементы.Проводки.ИзменитьСтроку();
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиПодразделениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	БюджетныйНаКлиенте.НачалоВыбораПодразделения(Элементы.Проводки.ТекущиеДанные.КорСчет, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Если НЕ ПустаяСтрока(ТипОбъектаОбновления) Тогда
		ОповеститьОбИзменении(Тип(ТипОбъектаОбновления));
	КонецЕсли;
	
	Оповестить("ОбновитьОбработкуПлатежей");
	Оповестить("ОбновитьОбработкуЗаявок");
	Оповестить("сабОбноватьПлатежныйКалендарь");
	Оповестить("ОповеститьРегистрОбработанных");
	
	Заголовок = "";
	АвтоЗаголовок = Истина;
	
	//ОтображениеДекорации1(Истина);
	//ОбновитьОтображениеДанных();
	//ОтображениеДекорации1();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьПеревод(ТекСсылка, ТекПредприятие, ДатаПеревода = Неопределено)
	
	ТекОб = ТекСсылка.ПолучитьОбъект();
	Если НЕ ДатаПеревода = Неопределено Тогда
		ТекОб.Дата = ДатаПеревода;
	КонецЕсли;
	Если ТекОб.Проведен  Тогда
		ТекОб.Записать(РежимЗаписиДокумента.Проведение);
	Иначе
		ТекОб.Записать();
	КонецЕсли;
	Если НЕ ДатаПеревода = Неопределено Тогда
		Сообщить(Строка(ТекОб) + " синхронизирован по дате.");
		ПерезаписатьВторичныеДвиженияДС(ТекОб.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПерезаписатьВторичныеДвиженияДС(Перевод)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	УЧ_ДвижениеДС.Ссылка
	|ИЗ
	|	Документ.УЧ_ДвижениеДС КАК УЧ_ДвижениеДС
	|ГДЕ
	|	УЧ_ДвижениеДС.ДокОснование = &ДокОснование";
	
	Запрос.УстановитьПараметр("ДокОснование", Перевод);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекДСОб = Выборка.Ссылка.ПолучитьОбъект();
		ТекДСОб.Дата = Перевод.Дата;
		Если ТекДСОб.Проведен  Тогда
			ТекДСОб.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ТекДСОб.Записать();
		КонецЕсли;
		Сообщить(Строка(ТекДСОб) + " синхронизирован по дате.");
	КонецЦикла;
	
	
	
	
КонецПроцедуры



&НаКлиенте
Процедура ДокОснованиеНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекИмя = ПолучитьИмяМетаданных(Объект.ДокОснование);
	ОткрытьФорму("Документ." + ТекИмя + ".ФормаОбъекта", Новый Структура("Ключ", Объект.ДокОснование)); 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяМетаданных(ТекДок)
	
	Возврат ТекДок.Метаданные().Имя;	
	
КонецФункции // ()

&НаКлиенте
Процедура ПроводкиПередНачаломИзменения(Элемент, Отказ)
	РежимРедактированияТЧ = Истина;
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	//нужно срочно оптимизировать эту ересь! к исправлению
	
	УстановитьПривилегированныйРежим(Истина);
	ВедетсяВалютныйУчет = Объект.Предприятие.ВедетсяВалютныйУчет;
	ЭтоКазна = ЭтоКазна(Объект.Субконто2);
	
	Для Каждого СтрокаТаблицы Из Объект.Проводки Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.КорСчет) Тогда
			
			СчетВидыСубконто = СтрокаТаблицы.КорСчет.ВидыСубконто;
			Счет = БюджетныйНаСервере.ВернутьРеквизиты(СтрокаТаблицы.КорСчет, "Ссылка,Наименование,Код,Родитель,Вид,Забалансовый,Валютный,Количественный,Крахмал,УчетПоПодразделениям,ДенежныйСчет");
			
			КоличествоСубконто   = СчетВидыСубконто.Количество();
			Для Индекс = 1 По 3 Цикл
				СтрокаТаблицы["КорСубконто"   + Индекс + "Доступность"] = (Индекс <= КоличествоСубконто);
				
				//проверка владельца субконто2
				Если Индекс = 2 И КоличествоСубконто > 1 Тогда
					ВладелецРазличен = Истина;
					Для каждого ТипСубконто2 Из СчетВидыСубконто[Индекс - 1].ВидСубконто.ТипЗначения.Типы() Цикл
						Если ТипСубконто2 = ТипЗнч("Строка") Тогда
							Продолжить;				
						КонецЕсли;
						СубСсылка2 = Новый(ТипСубконто2);
						ЕстьВладелец = Ложь;
						Для каждого ТекСтандРекв Из СубСсылка2.Метаданные().СтандартныеРеквизиты Цикл
							Если ТекСтандРекв.Имя = "Владелец" Тогда
								ЕстьВладелец = Истина;
							КонецЕсли;
						КонецЦикла;
						Если ЕстьВладелец Тогда
							ТипыРеквВладельца = СубСсылка2.Метаданные().СтандартныеРеквизиты.Владелец.Тип.Типы();
							Для каждого ТипРеквВладельца Из ТипыРеквВладельца Цикл
								СубСсылкаВладельца = Новый(ТипРеквВладельца);
								Для каждого ТипСубконто1 Из СчетВидыСубконто[Индекс - 2].ВидСубконто.ТипЗначения.Типы() Цикл
									СубСсылка1 = Новый(ТипСубконто1);
									Если ТипЗнч(СубСсылкаВладельца) = ТипЗнч(СубСсылка1) Тогда
										ВладелецРазличен = Ложь;
									КонецЕсли;
								КонецЦикла;					
							КонецЦикла; 
						КонецЕсли;
					КонецЦикла;
					СтрокаТаблицы["КорСубконто" + Индекс + "ВладелецРазличен"] = ВладелецРазличен;
					СтрокаТаблицы["КорСубконто" + Индекс + "БезВладельца"] = СтрокаТаблицы["КорСубконто" + Индекс];
				КонецЕсли;
				
			КонецЦикла;
			
			ДенежныйСчет = УЧ_Сервер.ДенежныйСчет(Счет.Ссылка);
			СтрокаТаблицы["Количество"   + "Доступность"] = Счет.Количественный;
			Валютный = Счет.Валютный;
			ДоговорВалютный = Ложь;
			
			Если ТипЗнч(СтрокаТаблицы.КорСубконто2) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				ДоговорВалютный = ЗначениеЗаполнено(СтрокаТаблицы.КорСубконто2.ВалютаДоговора) И ЗначениеЗаполнено(Объект.Валюта1) И Не (СтрокаТаблицы.КорСубконто2.ВалютаДоговора = Объект.Валюта1);	
			Иначе
				ДоговорВалютный = Счет.ДенежныйСчет И Счет.Валютный;
			КонецЕсли;
			
			СтрокаТаблицы["КорВалСуммаДоступность"] = ДоговорВалютный И Валютный;
			СтрокаТаблицы["ВалютаДоступность"] = Объект.Счет.Валютный;
			СтрокаТаблицы["ВалСуммаДоступность"] =  Объект.Счет.Валютный;
			Счет79 = УЧ_Сервер.ВНХСчет(СтрокаТаблицы.КорСчет) И (НЕ ЭтоКазна ИЛИ (НЕ ЗначениеЗаполнено(Объект.ДокОснование) И НЕ ЗначениеЗаполнено(Объект.ДокОснование2)));
			СтрокаТаблицы["КорСчет79"] = Счет79;
			
			
			Если Счет79 И ТипЗнч(СтрокаТаблицы.КорСубконто2) = Тип("СправочникСсылка.ВнутренниеДоговоры") Тогда
				СтрокаТаблицы["БухгалтерскийДоговор"] = СтрокаТаблицы.КорСубконто2.БухгалтерскийДоговор;
			КонецЕсли;
			
			//Если Валютный = Ложь ИЛИ (ТипЗнч(СтрокаТаблицы.КорСубконто2) = Тип("СправочникСсылка.БанковскиеСчетаКонтрагентов") ИЛИ ТипЗнч(СтрокаТаблицы.КорСубконто2) = Тип("СправочникСсылка.БанковскиеСчетаОрганизаций") И СтрокаТаблицы.КорСубконто2.ВалютаДенежныхСредств = Объект.Предприятие.ОсновнаяВалютаУчета) Тогда
			//	СтрокаТаблицы["Валюта"] = "";
			//	СтрокаТаблицы["ВалСумма"] = 0;
			//	СтрокаТаблицы["Курс"] = 0;
			//КонецЕсли;
		КонецЕсли;
		
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.КорСчетУслуг) Тогда
			СчетВидыСубконто = СтрокаТаблицы.КорСчетУслуг.ВидыСубконто;
			Счет = БюджетныйНаСервере.ВернутьРеквизиты(СтрокаТаблицы.КорСчетУслуг, "Ссылка,Наименование,Код,Родитель,Вид,Забалансовый,Валютный,Количественный,Крахмал,УчетПоПодразделениям");
			
			КоличествоСубконто   = СчетВидыСубконто.Количество();
			Для Индекс = 1 По 3 Цикл
				СтрокаТаблицы["КорСубконтоУслуг"   + Индекс + "Доступность"] = (Индекс <= КоличествоСубконто);
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.КорСчет791) Тогда
			СчетВидыСубконто = СтрокаТаблицы.КорСчет791.ВидыСубконто;
			Счет = БюджетныйНаСервере.ВернутьРеквизиты(СтрокаТаблицы.КорСчет791, "Ссылка,Наименование,Код,Родитель,Вид,Забалансовый,Валютный,Количественный,Крахмал,УчетПоПодразделениям");
			
			КоличествоСубконто   = СчетВидыСубконто.Количество();
			Для Индекс = 1 По 3 Цикл
				СтрокаТаблицы["КорСубконто79"   + Индекс + "Доступность"] = (Индекс <= КоличествоСубконто);
			КонецЦикла;
		КонецЕсли;
		
		ПоЦФО = УчетДДСПоЦФО;
		Если ПоЦФО Тогда
			Если ЗначениеЗаполнено(СтрокаТаблицы.ФинЦФО) Тогда
				СтрокаТаблицы.ПодразделениеЦФОДоступность = СтрокаТаблицы.ФинЦФО.УчетПоПодразделениям;
				СтрокаТаблицы["ПодразделениеДоступность"] = МИН(СтрокаТаблицы.ПодразделениеДоступность, СтрокаТаблицы.ПодразделениеЦФОДоступность);
			Иначе
				СтрокаТаблицы.ПодразделениеЦФОДоступность = Объект.Предприятие.УчетПоПодразделениям;
				СтрокаТаблицы["ПодразделениеДоступность"] = МИН(СтрокаТаблицы.ПодразделениеДоступность, СтрокаТаблицы.ПодразделениеЦФОДоступность);
			КонецЕсли;
		Иначе
			СтрокаТаблицы["ПодразделениеДоступность"] = МИН(СтрокаТаблицы.ПодразделениеДоступность, Объект.Предприятие.УчетПоПодразделениям);
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры


&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ЗаполнитьДобавленныеКолонкиТаблиц();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоКазна(Источник)
	Возврат Источник = сабОбщегоНазначенияПовтИсп.ПолучитьПредопределенныйИсточник();
КонецФункции // ()

//&НаКлиенте
//Процедура Видимость79ПриИзменении(Элемент)
//	Элементы.Счет80.Видимость = Объект.Видимость79;
//	Элементы.Субконто179.Видимость = Объект.Видимость79;
//	Элементы.Субконто279.Видимость = Объект.Видимость79;
//	//Если НЕ Объект.Видимость79 Тогда
//	//	//Элементы.Группа7.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
//	//	Элементы.Группа7.ТекущаяСтраница = Элементы.Расшифровка;
//	//	//Элементы.Счет79.Доступность = Ложь;
//	//Иначе
//	//	//Элементы.Счет79.Доступность = Истина;
//	//	//Элементы.Группа7.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
//	//КонецЕсли;
//КонецПроцедуры

&НаКлиенте
Процедура ПроводкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		УстановитьВидимостьСтолбцыСумм();;
		Элемент.ТекущиеДанные.ГУИДСтроки = СоздатьГуидСтроки();
		Если Не Копирование Тогда
			Элемент.ТекущиеДанные.ФинЦФО = Объект.Предприятие;
			Элемент.ТекущиеДанные.ФинПодразделение = Объект.Подразделение;
		КонецЕсли;
	Иначе
		ОбновитьСвязиПоЦФОСтрокиНаСервере(Ложь, Элементы.Проводки.ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиФинСтатьяПриИзменении(Элемент)
	
	ТекСтрока = Элементы.Проводки.ТекущиеДанные;
	
	Если НЕ ТекСтрока = Неопределено Тогда
		РеквизитыСтатьи = БюджетныйНаСервере.ВернутьРеквизиты(ТекСтрока.ФинСтатья, "СтатьяЗатрат, СчетУчета");
		
		Если НЕ ЗначениеЗаполнено(ТекСтрока.КорСчет) Тогда
			ТекСтрока.КорСчет = РеквизитыСтатьи.СчетУчета;
			ПроводкиСчетДебетПриИзменении(Элемент);
			МассивСубконто = УЧ_Сервер.ПолучитьСубконтоМассив(ТекСтрока.КорСчет);
			Индекс = 1;
			
			Для каждого ТекСубконто Из МассивСубконто Цикл
				
				Если ТекСубконто.СодержитТип(Тип("СправочникСсылка.СтатьиЗатрат")) Тогда
					ТекСтрока["КорСубконто" + Индекс] = РеквизитыСтатьи.СтатьяЗатрат;
				КонецЕсли;
				
				Индекс = Индекс + 1;
			КонецЦикла; 
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Если УЧ_Сервер.ДенежныйСчет(ТекСтрока.КорСчет) И УЧ_Сервер.ЕстьВидСубконто(ТекСтрока.КорСчет, "СтатьиДДС") Тогда
		ТекСтрока.КорСубконто1 = БюджетныйНаСервере.ОбратнаяВнутрихолдинговаяСтатья(ТекСтрока.ФинСтатья); 	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если не Объект.ПометкаУдаления Тогда
		ЗаписатьСвязьОбратныхВНХ(ТекущийОбъект);
	ИначеЕсли ЗначениеЗаполнено(ОбратноеВНХДвижение) Тогда
		Сообщить("Связь с обратным ВНХ движением не будет записана, так как документ помечен на удаление");
	КонецЕсли;
	
	сабОбщегоНазначения.ОтобразитьСостояниеДокумента(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСвязьОбратныхВНХ(ТекущийОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	Если ЗначениеЗаполнено(ОбратноеВНХДвижение) Тогда
		Если Объект.ПриходРасход = Перечисления.ВидыОперацийПлатежноеПоручение.ОплатаВНХ Тогда
			НоваяЗапись = РегистрыСведений.сабСоответствиеОбъектовИнформационнойБазы.СоздатьНаборЗаписей();
			НоваяЗапись.Отбор.Объект1.Установить(ТекущийОбъект.Ссылка);
			НоваяЗапись.Записать();
			НоваяЗапись = РегистрыСведений.сабСоответствиеОбъектовИнформационнойБазы.СоздатьМенеджерЗаписи();
			НоваяЗапись.Объект1 = ТекущийОбъект.Ссылка;
			НоваяЗапись.Объект2 = ОбратноеВНХДвижение;
			НоваяЗапись.Записать();
		ИначеЕсли Объект.ПриходРасход = Перечисления.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ Тогда
			УдалитьСоответствияВНХПоступления(ТекущийОбъект.Ссылка);
			НоваяЗапись = РегистрыСведений.сабСоответствиеОбъектовИнформационнойБазы.СоздатьНаборЗаписей();
			НоваяЗапись.Отбор.Объект1.Установить(ОбратноеВНХДвижение);
			НоваяЗапись.Записать();
			НоваяЗапись = РегистрыСведений.сабСоответствиеОбъектовИнформационнойБазы.СоздатьМенеджерЗаписи();
			НоваяЗапись.Объект2 = ТекущийОбъект.Ссылка;
			НоваяЗапись.Объект1 = ОбратноеВНХДвижение;
			НоваяЗапись.Записать();
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ОбратноеВНХДвижение_ДоУдаления) Тогда
		Если Объект.ПриходРасход = Перечисления.ВидыОперацийПлатежноеПоручение.ОплатаВНХ Тогда
			НоваяЗапись = РегистрыСведений.сабСоответствиеОбъектовИнформационнойБазы.СоздатьНаборЗаписей();
			НоваяЗапись.Отбор.Объект1.Установить(ТекущийОбъект.Ссылка);
			//НоваяЗапись.Отбор.Объект2.Установить(ОбратноеВНХДвижение);
			НоваяЗапись.Записать();
		ИначеЕсли Объект.ПриходРасход = Перечисления.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ Тогда
			НоваяЗапись = РегистрыСведений.сабСоответствиеОбъектовИнформационнойБазы.СоздатьНаборЗаписей();
			//НоваяЗапись.Отбор.Объект2.Установить(ТекущийОбъект.Ссылка);
			НоваяЗапись.Отбор.Объект1.Установить(ОбратноеВНХДвижение_ДоУдаления);
			НоваяЗапись.Записать();
		КонецЕсли;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);	

КонецПроцедуры

&НаСервере
Процедура УдалитьСоответствияВНХПоступления(Объект2)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	сабСоответствиеОбъектовИнформационнойБазы.Объект1 КАК Объект1,
	|	сабСоответствиеОбъектовИнформационнойБазы.Объект2 КАК Объект2
	|ИЗ
	|	РегистрСведений.сабСоответствиеОбъектовИнформационнойБазы КАК сабСоответствиеОбъектовИнформационнойБазы
	|ГДЕ
	|	 сабСоответствиеОбъектовИнформационнойБазы.Объект2 = &Объект2";
	
	Запрос.УстановитьПараметр("Объект2", Объект2);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаписьРегистра = РегистрыСведений.сабСоответствиеОбъектовИнформационнойБазы.СоздатьМенеджерЗаписи();
		ЗаписьРегистра.Объект1 = ВыборкаДетальныеЗаписи.Объект1;
		ЗаписьРегистра.Объект2 = ВыборкаДетальныеЗаписи.Объект2;
		ЗаписьРегистра.Удалить();
	КонецЦикла;		

КонецПроцедуры	

&НаКлиенте
Процедура УстановитьВидимостьСтолбцыСумм()
	
	КоличествоСтрок = Объект.Проводки.Количество(); 
	
КонецПроцедуры


&НаКлиенте
Функция ПроверкаПрогона()
	Есть79ВПроводках = Ложь;
	Для каждого ТекСтрока Из Объект.Проводки Цикл
		Если УЧ_Сервер.ВНХСчет(ТекСтрока.КорСчет) Тогда
			Есть79ВПроводках = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла; 
	Возврат Есть79ВПроводках;	
	
КонецФункции

&НаСервере
Функция ПолучитьМетры(Квартира)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	стр_ЦеныЗа1КвМСрезПоследних.БезОтделки,
	|	стр_ЦеныЗа1КвМСрезПоследних.СОтделкой,
	|	стр_ЦеныЗа1КвМСрезПоследних.РасчетнаяДляПЭО
	|ИЗ
	|	РегистрСведений.стр_ЦеныЗа1КвМ.СрезПоследних(&ДатаКон, СамостоятельнаяЧастьОбъекта = &ВыбКвартира) КАК стр_ЦеныЗа1КвМСрезПоследних";
	
	Запрос.УстановитьПараметр("ВыбКвартира", Квартира);
	Запрос.УстановитьПараметр("ДатаКон", Объект.Дата);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	ЦенаМетра = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЦенаМетра = ВыборкаДетальныеЗаписи.БезОтделки;
	КонецЦикла;
	Возврат ЦенаМетра;
КонецФункции

&НаСервере
Функция СоздатьГуидСтроки()
	
	Возврат Новый УникальныйИдентификатор;
	
КонецФункции	

&НаКлиенте
Процедура ПриходРасходПриИзменении(Элемент)
	
	ПриходРасходПриИзмененииНаСервере(Не Элемент = Неопределено);	
	
	ПроводкиСчетДебетПриИзменении(Элемент);
	ПроводкиКорСчет79ПриИзменении(Элемент);
	
КонецПроцедуры


&НаСервере
Процедура ПриходРасходПриИзмененииНаСервере(Изменять)
	
	//ЗаполнитьКурсНаКлиенте(НЕ Элемент = Неопределено);
	
	ЭтоРасход = ПП_Сервер.ЭтоРасходнаяОперация(Объект.ПриходРасход);
	ЭтоБанковскаяВыписка = Ложь;
	
	СоответствияСчетов = сабОбщегоНазначенияПовтИсп.ПолучитьСоответвиеСчетов();
	
	ТипыВзаимозачеты = Новый Массив;
	ТипыВзаимозачеты.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ВозмещениеОплат"));	
	ТипыВзаимозачеты.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ВозмещениеПоступлений"));
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийДвиженияДС.Взаимозачет") Тогда
		//Если Не ЗначениеЗаполнено(Объект.ДокОснование2) Тогда
		Элементы.Контрагент.Видимость = Ложь;
		//Элементы.ПроводкиФинСтатья1.Видимость = Ложь;
		Элементы.Договор.Видимость = Ложь;
		Элементы.Субконто2.ОтметкаНезаполненного = Ложь;
		Элементы.Субконто2.АвтоОтметкаНезаполненного = Ложь;
		//КонецЕсли;
		Элементы.Субконто2.Видимость = Ложь;
		Элементы.Организация.Видимость = Ложь;
		Если ВНХМодульРаботает Тогда
			Массив = Новый Массив;
			Массив.Добавить(Тип("СправочникСсылка.Кассы"));
			НовыйТип = Новый ОписаниеТипов(Массив);
			Элементы.Субконто2.ОграничениеТипа = НовыйТип;
			//Если Изменять ИЛИ ЭтоНовыйЧистый Тогда
			//	//Элементы.Субконто2.Заголовок = "Банковский счет";
			//	Объект.Субконто2 = ПредопределенноеЗначение("Справочник.Кассы.Виртуальный");
			//КонецЕсли;
		КонецЕсли;
		
		//Если ТипЗнч(Объект.ДокОснование2) = Тип("ДокументСсылка.УЧ_ДвижениеДС") Тогда
		//	
		//	Если НЕ ЗначениеЗаполнено(Объект.ДокОснование2) ИЛИ НЕ ТипыВзаимозачеты.Найти(БюджетныйНаСервере.ВернутьРеквизит(Объект.ДокОснование2, "ПриходРасход")) = Неопределено Тогда
		//		МассивПараметровВыбора = Новый Массив;
		//		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Родитель", ПредопределенноеЗначение("ПланСчетов.Учетный.ВНХ")));
		//		Элементы.ПроводкиСчетДебет.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
		//		Элементы.ПроводкиКорСчет.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
		//		Если Изменять Тогда
		//			Для каждого ТекСтрока Из Объект.Проводки Цикл
		//				Если НЕ УЧ_Сервер.ВНХСчет(ТекСтрока.КорСчет) Тогда
		//					ТекСтрока.КорСчет = "";	
		//				КонецЕсли;
		//			КонецЦикла; 
		//		КонецЕсли;
		//	КонецЕсли;
		//	
		//КонецЕсли;
		
		
		Элементы.Группа22.Видимость = Ложь;
		//Элементы.Группа29.Видимость = Истина;
		
		Если Изменять Тогда
			Для каждого ТекСтрока Из Объект.Проводки Цикл
				ТекСтрока.КорСчетУслуг = "";
				ТекСтрока.КорСубконтоУслуг1 = "";
				ТекСтрока.КорСубконтоУслуг2 = "";
				ТекСтрока.КорСубконтоУслуг3 = "";
			КонецЦикла; 
		КонецЕсли;
		
		
	ИначеЕсли Объект.ПриходРасход = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПоступленияПоЭквайрингу") Тогда
		Элементы.Группа22.Видимость = Истина;
		//Элементы.Группа29.Видимость = Ложь;
		
		Если Изменять ИЛИ ЭтоНовыйЧистый Тогда
			Для каждого ТекСтрока Из Объект.Проводки Цикл
				ТекСтрока.КорСчет = ПланыСчетов.Учетный.НайтиПоКоду("57.03");
				ТекСтрока.КорСчетУслуг = ПланыСчетов.Учетный.Счет91();
			КонецЦикла; 
		КонецЕсли;
		СчетУслугПриИзмененииНаСервере();
		//Объект.Субконто2 = ПредопределенноеЗначение("Справочник.Кассы.Виртуальный");
	Иначе
		МассивПараметровВыбора = Новый Массив;
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
		Элементы.ПроводкиСчетДебет.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
		Элементы.ПроводкиКорСчет.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
		
		Элементы.Группа22.Видимость = Ложь;
		//Элементы.Группа29.Видимость = Ложь;
		Если Изменять ИЛИ ЭтоНовыйЧистый Тогда
			Для каждого ТекСтрока Из Объект.Проводки Цикл
				ТекСтрока.КорСчетУслуг = "";
				ТекСтрока.КорСубконтоУслуг1 = "";
				ТекСтрока.КорСубконтоУслуг2 = "";
				ТекСтрока.КорСубконтоУслуг3 = "";
				
				Если (НЕ ЗначениеЗаполнено(ТекСтрока.КорСубконто1) И НЕ ЗначениеЗаполнено(ТекСтрока.КорСубконто2)) И Изменять Тогда
					ТекСтрока.КорСчет = СоответствияСчетов.Получить(Объект.ПриходРасход);
				КонецЕсли;
				
			КонецЦикла; 
		КонецЕсли;
		//Если НЕ Элемент = Неопределено Тогда
		//	Объект.Субконто2 = ПредопределенноеЗначение("Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка");
		//КонецЕсли;
		Элементы.Субконто2.Видимость = Истина;
		Элементы.Организация.Видимость = НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийДвиженияДС.КассовыйОрдер");
		Элементы.Контрагент.Видимость = Истина;
		Элементы.Договор.Видимость = Истина;
		//Элементы.ПроводкиФинСтатья1.Видимость = Истина;
		Элементы.Субконто2.ОтметкаНезаполненного = Истина;
		Элементы.Субконто2.АвтоОтметкаНезаполненного = Истина;
		//Элементы.ИнвПроект.Видимость = Истина И НЕ Расшифровка;
		//Элементы.Счет1.Видимость = Истина;
		//Элементы.ПроводкиГруппа2.Видимость = Истина;
		
		МассивПараметровВыбора = Новый Массив;
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
		
		Элементы.ПроводкиСчетДебет.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
		Элементы.ПроводкиКорСчет.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);

		
	КонецЕсли;
	
	Если (Изменять ИЛИ ЭтоНовыйЧистый ИЛИ Объект.Контрагент = Неопределено) И ПравоДоступа("Редактирование", Метаданные.Документы.УЧ_ДвижениеДС) Тогда
		Если (Объект.ПриходРасход = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ОплатаВНХ") 
			ИЛИ Объект.ПриходРасход = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ")) Тогда
			
			Если НЕ ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
				Объект.Контрагент = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
				Объект.Договор = "";
			КонецЕсли;
			
		ИначеЕсли Объект.ПриходРасход = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПеречислениеСотруднику") ИЛИ Объект.ПриходРасход = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПоступлениеОтСотрудника") Тогда
			
			Если НЕ ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Сотрудники") Тогда
				Объект.Контрагент = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
				Объект.Договор = "";
				Элементы.Договор.Видимость = Ложь;
			КонецЕсли;	
			
		Иначе
			
			Если НЕ ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				Объект.Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
				Объект.Договор = "";
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьСвязиНаСервере();
	
	СчетЗатратПриИзмененииНаСервере();
	
	Счет79ПриИзмененииНаСервере();
	
	Субконто2ПриИзмененииНаСервере(Изменять);
	
	ЭтаФорма.Элементы.Доверенность.Видимость = (Объект.ВидОперации = Перечисления.ВидыОперацийДвиженияДС.КассовыйОрдер)и(Объект.ПриходРасход = Перечисления.ВидыОперацийПлатежноеПоручение.Поступление);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ЗаполнитьКурсНаКлиенте(НЕ Элемент = Неопределено);
	
КонецПроцедуры

#Область РаботаСВалютой
	
&НаКлиенте
Процедура ЗаполнитьКурсКнопка(Команда)
	
	Объект.КурсУстановленПользователем = Ложь;
	
	ЗаполнитьКурсНаКлиенте(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКурсНаКлиенте(Изменять)
	
	ЗаполнитьКурсНаСервере(Изменять);	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКурсНаСервере(Изменять)

	Элементы.Группа6.Видимость = СчетВалютный;
	
	Если СчетВалютный Тогда
		
		Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()) И ЭтоНовыйЧистый Тогда
			ДатаКурса = ТекущаяДата();
		Иначе
			ДатаКурса = Объект.Дата;	
		КонецЕсли;
		
		ОсновнаяВалютаПредприятия = БюджетныйНаСервере.ВернутьРеквизит(Объект.Предприятие, "ОсновнаяВалютаУчета");
		
		Если РасширенныйУчетВалюты Тогда
			Если Не Объект.КурсУстановленПользователем  Тогда
				Если Не ЗначениеЗаполнено(ОсновнаяВалютаПредприятия) Или ОсновнаяВалютаПредприятия = УЧ_Сервер.НациональнаяВалюта() Тогда
					СтруктураКурсов = сабРаботаСКурсамиВалют.ЗаполнитьДанныеЛокальногоКурсаДляВалюты(Объект.Валюта1, ОсновнаяВалютаПредприятия, ДатаКурса);
					Если Касса(Объект.Субконто2) И СтруктураКурсов.ЛокальныйКурс Тогда
						Объект.Курс1 = СтруктураКурсов.ЛокальныйКурс;
					Иначе
						Объект.Курс1 = СтруктураКурсов.Курс;
					КонецЕсли;
				Иначе
					Объект.Курс1 = сабРаботаСКурсамиВалют.ПолучитьКроссКурс(Объект.Валюта1, ОсновнаяВалютаПредприятия, ДатаКурса);	
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ПП_Сервер.ЭтоРасходнаяОперация(Объект.ПриходРасход) Тогда //если расход, то средневзвешенный курс
				ДоступностьВалСуммыНаСервере(Истина);
				Если Изменять Тогда
					Объект.Курс1 = УЧ_Сервер.СредневзвешенныйКурсУчет(?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, ДатаКурса), Объект.Субконто2, Объект.Валюта1).Курс;
				КонецЕсли;
			Иначе
				ДоступностьВалСуммыНаСервере(Ложь);
				Если Изменять Тогда
					//Объект.Курс1 = УЧ_Сервер.ПолучитьКурсВалют(Объект.Валюта1,, ДатаКурса);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ДоступностьВалСуммыНаСервере(Истина);
	КонецЕсли;

	ПересчитатьВалСуммуНаСервере(Изменять, "Курс");

КонецПроцедуры


&НаКлиенте
Процедура ДоступностьВалСуммы(ЭтоРасход = Неопределено)
	
	ДоступностьВалСуммыНаСервере(ЭтоРасход);	
	
КонецПроцедуры

&НаСервере
Процедура ДоступностьВалСуммыНаСервере(ЭтоРасход = Неопределено)
	
	Элементы.Группа6.Видимость = СчетВалютный;
	
	Если СчетВалютный Тогда
		
		Если ЭтоРасход = Неопределено Тогда
			ЭтоРасход = ПП_Сервер.ЭтоРасходнаяОперация(Объект.ПриходРасход);
		КонецЕсли;
		
		Если ЭтоРасход Тогда
			Элементы.Курс.ТолькоПросмотр = ?(Объект.КурсУстановленПользователем, Ложь, Истина);
			Элементы.СуммаДокумента.ТолькоПросмотр = ?(Объект.КурсУстановленПользователем, Ложь, Истина);
			Элементы.ЗаполнитьКурс.Видимость = ?(Объект.КурсУстановленПользователем, Истина, Ложь);
			Элементы.РедактироватьКурс.Видимость = ?(Объект.КурсУстановленПользователем, Ложь, Истина);
		Иначе
			Элементы.Курс.ТолькоПросмотр = Ложь;
			Элементы.СуммаДокумента.ТолькоПросмотр = Ложь;
			Элементы.РедактироватьКурс.Видимость = Ложь;
			Элементы.ЗаполнитьКурс.Видимость = Истина;
		КонецЕсли;
	Иначе
		Элементы.СуммаДокумента.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

&НаКлиенте
Процедура ПроводкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ПроводкиПеревод" И (НЕ (Объект.ПриходРасход = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ"))) Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьЗначение(Элементы.Проводки.ТекущиеДанные.Перевод);	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьДопСвойствоОграниченияКредитов()
	
	Возврат сабОбщегоНазначения.ПолучитьЗначениеСвойства(Объект.Предприятие, "Ограничение кредитов по контрагенту") = Истина;
	
КонецФункции

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	сабОбщегоНазначения.ОтобразитьСостояниеДокумента(ЭтаФорма);
	ЗаполнитьДобавленныеКолонкиТаблиц();
КонецПроцедуры

#Область ВалютныеПроцедурыИФункцииТабличнойЧасти

&НаКлиенте
Процедура ПроводкиВалютаПриИзменении(Элемент)
	
	ТекСтрока = Элементы.Проводки.ТекущиеДанные;
	
	// обращение №1 база ЛП, основная валюта учета берется из предприятия, к которому привязан источник
	ПредприятиеИсточника = ПолучитьПоследнееПредприятиеИсточника(Объект.Субконто2, Объект.Дата);
	ВалютаПроекта = БюджетныйНаСервере.ВернутьРеквизит(ПредприятиеИсточника, "ОсновнаяВалютаУчета");

	СтруктураВалютныхПоказателей = УЧ_Сервер.ПересчитатьИзВалютыВВалюту(ВалютаПроекта, ТекСтрока.Валюта, ТекСтрока.Сумма, Объект.Дата);
	ТекСтрока.КорВалСумма = СтруктураВалютныхПоказателей.СуммаВЭквивалентнойВалюте;
	ТекСтрока.Курс = СтруктураВалютныхПоказателей.КурсВал; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиСуммаПриИзменении(Элемент)
	
	ТекСтрока = Элементы.Проводки.ТекущиеДанные;
	
	Если ТекСтрока.Сумма <> 0 Тогда
		ТекСтрока.ВалСумма = ?(Объект.Курс1, ТекСтрока.Сумма / Объект.Курс1, ТекСтрока.ВалСумма);
	Иначе
		ТекСтрока.ВалСумма = 0;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиВалСуммаПриИзменении(Элемент)
	
	ТекСтрока = Элементы.Проводки.ТекущиеДанные;
		
	Если ТекСтрока.ВалСумма <> 0 Тогда
		ТекСтрока.Сумма = ?(Объект.Курс1, ТекСтрока.ВалСумма * Объект.Курс1, ТекСтрока.Сумма);
	Иначе
		ТекСтрока.Сумма = 0;
	КонецЕсли;
	
КонецПроцедуры

// обращение №1 база ЛП, основная валюта учета берется из предприятия, к которому привязан источник
//&НаКлиенте
//Процедура ПроводкиФинЦФОПриИзменении(Элемент)
//	
//	ПроводкиВалютаПриИзменении(Истина);
//	
//КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПоследнееПредприятиеИсточника(Источник, ДатаПолучения)
	
	Если ЗначениеЗаполнено(ДатаПолучения) Тогда
		ТекДата = КонецДня(ДатаПолучения)
	Иначе
		ТекДата = КонецДня(ТекущаяДата())
	КонецЕсли;
	
	СтруктураПП = РегистрыСведений.Д_ИсточникПП.ПолучитьПоследнее(ТекДата, Новый Структура("БанковскиеСчета", Источник));
	Возврат СтруктураПП.Предприятие;
	
КонецФункции


#КонецОбласти

#Область РаботаСРеквизитамиТЧ

&НаКлиенте
Процедура ПроводкиКорСчетПриИзменении(Элемент)
	
	ДанныеСчета = Неопределено;
	
	СчетЗатратПриИзмененииНаСервере(ДанныеСчета);
	
	ПроводкиСчетДебетПриИзменении(Элемент, ДанныеСчета);
	
КонецПроцедуры

&НаСервере
Процедура СчетЗатратПриИзмененииНаСервере(ДанныеСчета = Неопределено)
	
	ПоЦФО = ВНХМодульРаботает И УчетДДСПоЦФО И ?(ЗначениеЗаполнено(Объект.Проводки[0].ФинЦФО) И НЕ Объект.Проводки[0].ФинЦФО = Объект.Предприятие, Истина, Ложь);
	
	Если ДанныеСчета = Неопределено Тогда
		ДанныеСчета = УправленческийУчетПовтИсп.ПолучитьСвойстваСчета(Объект.Проводки[0].КорСчет, ?(ПоЦФО, Объект.Проводки[0].ФинЦФО, Объект.Предприятие));
	КонецЕсли;
	
	Наименование1 = ДанныеСчета["ВидСубконто1Наименование"];
	Наименование2 = ДанныеСчета["ВидСубконто2Наименование"];
	Наименование3 = ДанныеСчета["ВидСубконто3Наименование"];
	УчетПоПодразделениям = ДанныеСчета["УчетПоПодразделениям"];
	
	Элементы.ПроводкиКорСубконто1.ПодсказкаВвода = Наименование1;
	Элементы.ПроводкиКорСубконто2.ПодсказкаВвода = Наименование2;
	Элементы.ПроводкиКорСубконто2БезВладельца1.ПодсказкаВвода = Наименование2;
	Элементы.ПроводкиКорСубконто3.ПодсказкаВвода = Наименование3;
	Элементы.ПроводкиКорСубконто1.Заголовок = Наименование1;
	Элементы.ПроводкиКорСубконто2.Заголовок = Наименование2;
	Элементы.ПроводкиКорСубконто2БезВладельца1.Заголовок = Наименование2;
	Элементы.ПроводкиКорСубконто3.Заголовок = Наименование3;
	
	Элементы.ПроводкиПодразделение1.ПодсказкаВвода = ?(УчетПоПодразделениям, "Подразделение затрат", "");
	
	Элементы.ПроводкиКорСубконто1.Видимость = ЗначениеЗаполнено(Наименование1);
	Если ЗначениеЗаполнено(Наименование2) И ДанныеСчета.ВидСубконто2ВладелецРазличен Тогда
		Элементы.ПроводкиКорСубконто2.Видимость = Ложь;
		Элементы.ПроводкиКорСубконто2БезВладельца1.Видимость = Истина;
	Иначе
		Элементы.ПроводкиКорСубконто2БезВладельца1.Видимость = Ложь;
		Элементы.ПроводкиКорСубконто2.Видимость = ЗначениеЗаполнено(Наименование2);
	КонецЕсли;
	Элементы.ПроводкиКорСубконто3.Видимость = ЗначениеЗаполнено(Наименование3);
	Элементы.ПроводкиПодразделение1.Видимость = УчетПоПодразделениям;
	
	Элементы.ПроводкиВалюта1.Видимость = ДанныеСчета.Валютный ИЛИ ДоговорВалютный;
	Элементы.ПроводкиВалСумма1.Видимость = ДанныеСчета.Валютный ИЛИ ДоговорВалютный;
	//Элементы.ПроводкиВалюта.Видимость = ДанныеСчета.Валютный ИЛИ ДоговорВалютный;
	//Элементы.ПроводкиВалСумма.Видимость = ДанныеСчета.Валютный ИЛИ ДоговорВалютный;
	
	Элементы.ПроводкиКоличество1.Видимость = ДанныеСчета.Количественный;
	
	Если Объект.Проводки.Количество() Тогда
		ПоЦФО = ?(ЗначениеЗаполнено(Объект.Проводки[0].ФинЦФО) И НЕ Объект.Проводки[0].ФинЦФО = Объект.Предприятие, Истина, Ложь);
	Иначе
		ПоЦФО = Ложь;	
	КонецЕсли;
	
	Если НЕ ДанныеСчета.ВидСубконто1ТипЗначения = Неопределено И ДанныеСчета.ВидСубконто1ТипЗначения.СодержитТип(Тип("СправочникСсылка.Контрагенты")) И НЕ Объект.ВидОперации = Перечисления.ВидыОперацийДвиженияДС.Взаимозачет Тогда
		Элементы.ПроводкиКорСубконто1.Видимость = ПоЦФО;
	КонецЕсли;
	
	Если НЕ ДанныеСчета.ВидСубконто2ТипЗначения = Неопределено И ДанныеСчета.ВидСубконто2ТипЗначения.СодержитТип(Тип("СправочникСсылка.ДоговорыКонтрагентов")) И НЕ Объект.ВидОперации = Перечисления.ВидыОперацийДвиженияДС.Взаимозачет Тогда
		Элементы.ПроводкиКорСубконто2.Видимость = ПоЦФО;
		Элементы.ПроводкиКорСубконто2БезВладельца1.Видимость = Ложь;
		//Элементы.ПроводкиКорСубконто3.Видимость = Ложь;
	КонецЕсли;
	
	//Если ДанныеСчета.ВидСубконто1ТипЗначения = Неопределено Тогда
	//	Элементы.ПроводкиКорСубконто3.Видимость = Ложь;
	//КонецЕсли;
	
	Элементы.Группа29.Видимость = Объект.ВидОперации = Перечисления.ВидыОперацийДвиженияДС.Взаимозачет И НЕ УЧ_Сервер.ВНХСчет(Объект.Проводки[0].КорСчет);
	Элементы.ПроводкиКорСчет792.Видимость = Элементы.Группа29.Видимость;
	Элементы.ПроводкиКорСубконто794.Видимость = Элементы.Группа29.Видимость;
	Элементы.ПроводкиКорСубконто795.Видимость = Элементы.Группа29.Видимость;
	Элементы.ПроводкиКорСубконто796.Видимость = Элементы.Группа29.Видимость;
		
КонецПроцедуры

#КонецОбласти 

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	ВидОперацииПриИзмененииНаСервере(Не Элемент = Неопределено);	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере(Изменять)
	
	Элементы.ПриходРасход.СписокВыбора.Очистить();
	
	Если НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийДвиженияДС.Взаимозачет") Тогда
		Элементы.ПриходРасход.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.Оплата"));
		Элементы.ПриходРасход.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПеречислениеСотруднику"));
		Элементы.ПриходРасход.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ОплатаВНХ"));
		Элементы.ПриходРасход.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.Поступление"));
		Элементы.ПриходРасход.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПоступлениеОтСотрудника"));
		Элементы.ПриходРасход.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПоступленияПоЭквайрингу"));
		Элементы.ПриходРасход.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ"));
	Иначе	
		Элементы.ПриходРасход.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ВозмещениеОплат"));
		Элементы.ПриходРасход.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ВозмещениеПоступлений"));
		Если Изменять ИЛИ ЭтоНовыйЧистый Тогда
			Объект.ПриходРасход = Элементы.ПриходРасход.СписокВыбора[0].Значение;		
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Заголовок = Строка(Объект.ВидОперации) + " (создание)";
	Иначе
		Заголовок = Строка(Объект.ВидОперации) + " " + Строка(Объект.Номер) + " от " + Строка(Объект.Дата);
	КонецЕсли;
	
	Если (Изменять ИЛИ ЭтоНовыйЧистый) И Элементы.ПриходРасход.СписокВыбора.НайтиПоЗначению(Объект.ПриходРасход) = Неопределено Тогда
		Объект.ПриходРасход = "";		
	КонецЕсли;
	
	ПриходРасходПриИзмененииНаСервере(Изменять);
	
	ЭтаФорма.Элементы.Доверенность.Видимость = (Объект.ВидОперации = Перечисления.ВидыОперацийДвиженияДС.КассовыйОрдер)и(Объект.ПриходРасход = Перечисления.ВидыОперацийПлатежноеПоручение.Поступление);
	
КонецПроцедуры


&НаКлиенте
Процедура Расшифровка1ПриИзменении(Элемент)
	
	Если Объект.Проводки.Количество() > 1 И НЕ Расшифровка Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("Расшифровка1ПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("Элемент", Элемент)), "Табличная часть содержит более 1 строки. Продолжить?", РежимДиалогаВопрос.ДаНет);
	Иначе
		Расшифровка1ПриИзмененииПродолжить(Элемент);
	КонецЕсли;
	
	ОбновитьСвязиПоЦФОСтрокиНаСервере(Ложь, Элементы.Проводки.ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровка1ПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да  Тогда
		Для ТекИндекс = -Объект.Проводки.Количество() По -2 Цикл
			Объект.Проводки.Удалить(-ТекИндекс - 1);
		КонецЦикла;
		Расшифровка1ПриИзмененииПродолжить(ДополнительныеПараметры.Элемент);
		Элементы.Проводки.ТекущаяСтрока = 0;
	Иначе
		Расшифровка = 1;
	КонецЕсли;
	
	ПроводкиКорСчетПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровка1ПриИзмененииПродолжить(Элемент = Неопределено)
	
	Если НЕ Расшифровка Тогда
		Объект.СуммаДокумента = Объект.Проводки.Итог("Сумма");
		Объект.ВалютнаяСумма1 = Объект.Проводки.Итог("ВалСумма");	
	КонецЕсли;
	
	Объект.РасшифровкаОплаты = Расшифровка;
	Модифицированность = Истина;
	Элементы.Группа7.ТекущаяСтраница = ?(Объект.РасшифровкаОплаты, Элементы.Расшифровка, Элементы.СтраницаКор);
	Элементы.Группа2.Видимость = НЕ Объект.РасшифровкаОплаты;
	
	Если Расшифровка И Не Элемент = Неопределено Тогда
		ПроводкиСчетДебетПриИзменении(Неопределено, Неопределено);
		ПроводкиКорСчет79ПриИзменении(Неопределено);
	Иначе
		ПроводкиКорСчетПриИзменении(Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	Изменять = (НЕ Элемент = Неопределено);
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Если Изменять ИЛИ ЭтоНовыйЧистый Тогда
			РеквизитыДоговора = сабОперОбщегоНазначения.ПолучитьДоговорКонтрагентаПоУмолчанию(Объект.Контрагент);
			Объект.Договор = РеквизитыДоговора.Договор;
		КонецЕсли;
		
		МассивПараметровВыбора = Новый Массив;
		//Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		//	//МассивПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация", РежимИзмененияСвязанногоЗначения.Очищать));
		//	МассивПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Контрагент", РежимИзмененияСвязанногоЗначения.Очищать));
		//	Элементы.Договор.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
		//КонецЕсли;
	КонецЕсли;
	
	Если Изменять И ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
		ВладелецСчетаКонтрагента = БюджетныйНаСервере.ВернутьРеквизит(Объект.СчетКонтрагента, "Владелец");
		
		Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Организации") Или ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Или ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ОсновнойБСКонтрагента = БюджетныйНаСервере.ВернутьРеквизит(Объект.Контрагент, "ОсновнойБанковскийСчет");
			
			Если Не Объект.Контрагент = ВладелецСчетаКонтрагента Тогда
				Объект.СчетКонтрагента = ОсновнойБСКонтрагента;
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;

	//Если Изменять ИЛИ ЭтоНовыйЧистый Тогда
		ДоговорПриИзменении(Элемент);
	//КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	//СчетЗатратПриИзмененииНаСервере();
	//Если Не ЗначениеЗаполнено(Объект.Договор) Тогда
	//	Возврат;		
	//КонецЕсли;
	РеквизитыДоговора = БюджетныйНаСервере.ВернутьРеквизиты(Объект.Договор, "СчетВзаиморасчетов, Организация, СтатьяДДС, ВалютаДоговора");
	
	Если НЕ Элемент = Неопределено Тогда
		Объект.Организация = ?(ЗначениеЗаполнено(Объект.Организация), Объект.Организация, РеквизитыДоговора.Организация);
	КонецЕсли;
	
	Для каждого ТекСтрока Из Объект.Проводки Цикл
		
		Если НЕ Элемент = Неопределено Тогда
			
			Если ЗначениеЗаполнено(РеквизитыДоговора.СчетВзаиморасчетов) Тогда
				ТекСтрока.КорСчет = РеквизитыДоговора.СчетВзаиморасчетов;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ТекСтрока.ФинСтатья) Тогда
				ТекСтрока.ФинСтатья = РеквизитыДоговора.СтатьяДДС;			
			КонецЕсли;			
			
		КонецЕсли;
		
		ДанныеСчета = УправленческийУчетПовтИсп.ПолучитьСвойстваСчета(ТекСтрока.КорСчет, Объект.Предприятие);
		
		Если Объект.Проводки.Количество() Тогда
			ПоЦФО = ?(ЗначениеЗаполнено(ТекСтрока.ФинЦФО) И НЕ ТекСтрока.ФинЦФО = Объект.Предприятие, Истина, Ложь);
		Иначе
			ПоЦФО = Ложь;	
		КонецЕсли;
		
		Если НЕ ДанныеСчета.ВидСубконто1ТипЗначения = Неопределено И ДанныеСчета.ВидСубконто1ТипЗначения.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
			
			Если Не Элемент = Неопределено И НЕ ПоЦФО Тогда
				ТекСтрока.КорСубконто1 = Объект.Контрагент;
			КонецЕсли;
			
			Элементы.ПроводкиКорСубконто1.Видимость = ПоЦФО;
		КонецЕсли;
		
		Если НЕ ДанныеСчета.ВидСубконто2ТипЗначения = Неопределено И ДанныеСчета.ВидСубконто2ТипЗначения.СодержитТип(Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
			
			Если Не Элемент = Неопределено И НЕ ПоЦФО Тогда
				ТекСтрока.КорСубконто2 = Объект.Договор;
			КонецЕсли;
			
			Элементы.ПроводкиКорСубконто2.Видимость = ПоЦФО;
			Элементы.ПроводкиКорСубконто2БезВладельца1.Видимость = Ложь;
			//Элементы.ПроводкиКорСубконто3.Видимость = Ложь;
			ДоговорВалютный = ЗначениеЗаполнено(РеквизитыДоговора.ВалютаДоговора) И ЗначениеЗаполнено(Объект.Валюта1) И Не (РеквизитыДоговора.ВалютаДоговора = Объект.Валюта1);		
		КонецЕсли;			
			
	КонецЦикла; 	
	
	ПроводкиСчетДебетПриИзменении(Неопределено, Неопределено);
	СчетЗатратПриИзмененииНаСервере();
	
КонецПроцедуры


&НаКлиенте
Процедура ПроводкиКорСчетУслуг1ПриИзменении(Элемент)
	ПоляОбъекта = Новый Структура("Счет, Субконто1, Субконто2, Субконто3, Предприятие, Элементы, ЭлементСубконто1, ЭлементСубконто2, ЭлементСубконто3",
	"КорСчетУслуг", "КорСубконтоУслуг1", "КорСубконтоУслуг2", "КорСубконтоУслуг3", Объект.Предприятие, Элементы, "ПроводкиКорСубконтоУслугТЧ1", "ПроводкиКорСубконтоУслугТЧ2", "ПроводкиКорСубконтоУслугТЧ3");
	БюджетныйНаКлиенте.УстановитьДоступность(Элементы.Проводки.ТекущиеДанные, ПоляОбъекта);
	//ОтображениеДекорации1();
	
КонецПроцедуры


&НаКлиенте
Процедура ПроводкиКорСчетУслугПриИзменении(Элемент)
	ДанныеСчета = УправленческийУчетПовтИсп.ПолучитьСвойстваСчета(Объект.Проводки[0].КорСчетУслуг, Объект.Предприятие);
	
	СчетУслугПриИзмененииНаСервере(ДанныеСчета);
	
	ПроводкиКорСчетУслуг1ПриИзменении(Элемент);
	
КонецПроцедуры

&НаСервере
Процедура СчетУслугПриИзмененииНаСервере(ДанныеСчета = Неопределено)
	Если ДанныеСчета = Неопределено Тогда
		ДанныеСчета = УправленческийУчетПовтИсп.ПолучитьСвойстваСчета(Объект.Проводки[0].КорСчетУслуг, Объект.Предприятие);
	КонецЕсли;
	
	Наименование1 = ДанныеСчета["ВидСубконто1Наименование"];
	Наименование2 = ДанныеСчета["ВидСубконто2Наименование"];
	Наименование3 = ДанныеСчета["ВидСубконто3Наименование"];
	//УчетПоПодразделениям = ДанныеСчета["УчетПоПодразделениям"];
	
	Элементы.ПроводкиКорСубконтоУслугТЧ1.ПодсказкаВвода = Наименование1;
	Элементы.ПроводкиКорСубконтоУслугТЧ2.ПодсказкаВвода = Наименование2;
	//Элементы.ПроводкиКорСубконто2БезВладельца1.ПодсказкаВвода = Наименование2;
	Элементы.ПроводкиКорСубконтоУслугТЧ3.ПодсказкаВвода = Наименование3;
	Элементы.ПроводкиКорСубконтоУслуг1.Заголовок = Наименование1;
	Элементы.ПроводкиКорСубконтоУслуг2.Заголовок = Наименование2;
	//Элементы.ПроводкиКорСубконто2БезВладельца1.Заголовок = Наименование2;
	Элементы.ПроводкиКорСубконтоУслуг3.Заголовок = Наименование3;
	
	//Элементы.ПроводкиПодразделение1.ПодсказкаВвода = ?(УчетПоПодразделениям, "Подразделение затрат", "");
	
	Элементы.ПроводкиКорСубконтоУслуг1.Видимость = ЗначениеЗаполнено(Наименование1);
	Элементы.ПроводкиКорСубконтоУслуг2.Видимость = ЗначениеЗаполнено(Наименование2);
	Элементы.ПроводкиКорСубконтоУслуг3.Видимость = ЗначениеЗаполнено(Наименование3);
	//Элементы.ПроводкиПодразделение1.Видимость = УчетПоПодразделениям;
	//
	//Элементы.ПроводкиВалюта1.Видимость = ДанныеСчета.Валютный;
	//Элементы.ПроводкиВалСумма1.Видимость = ДанныеСчета.Валютный;
	//Элементы.ПроводкиКоличество1.Видимость = ДанныеСчета.Количественный;
	//
	//Если НЕ ДанныеСчета.ВидСубконто1ТипЗначения = Неопределено И ДанныеСчета.ВидСубконто1ТипЗначения.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
	//	Элементы.ПроводкиКорСубконто1.Видимость = Ложь;
	//КонецЕсли;
	//
	//Если НЕ ДанныеСчета.ВидСубконто2ТипЗначения = Неопределено И ДанныеСчета.ВидСубконто2ТипЗначения.СодержитТип(Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
	//	Элементы.ПроводкиКорСубконто2.Видимость = Ложь;
	//	Элементы.ПроводкиКорСубконто2БезВладельца.Видимость = Ложь;
	//	Элементы.ПроводкиКорСубконто3.Видимость = Ложь;
	//КонецЕсли;			
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиФинСтатья1ПриИзменении(Элемент)
	КорСчетБылПустой = Объект.Проводки.Количество() И Не ЗначениеЗаполнено(Объект.Проводки[0].КорСчет);
	ПроводкиФинСтатьяПриИзменении(Элемент);
	Если КорСчетБылПустой Тогда
		ПроводкиКорСчетПриИзменении(Элемент);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	Объект.Организация = ?(ЗначениеЗаполнено(Объект.Организация), Объект.Организация, БюджетныйНаСервере.ВернутьРеквизит(Объект.Подразделение, "Организация"));
	Если Объект.Проводки.Количество() = 1 Тогда
		Объект.Проводки[0].ФинПодразделение = Объект.Подразделение;
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура РедактироватьКурс(Команда)
	
	Объект.КурсУстановленПользователем = Истина;
	
	ДоступностьВалСуммы();
	
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьИзРеестра(Команда)
	
	ПутьКФайлу = ВыбратьФайл();
	
	Если НЕ ПутьКФайлу = Неопределено Тогда
		Реестр = Новый ТекстовыйДокумент;
		Реестр.Прочитать(ПутьКФайлу);
		СуммаВсего = 0;
		Для НомерСтроки =1 По Реестр.КоличествоСтрок()-1 Цикл
			
			Стр = Реестр.ПолучитьСтроку(НомерСтроки);
			МассивСтр = СтрРазделить(Стр,";");				
			НаименованиеКонтрагента = МассивСтр[6];
			ИННКонтрагента = "";
			Контрагент = НайтиКонтрагента(НаименованиеКонтрагента, ,Объект.Предприятие);
			
			Если Не ЗначениеЗаполнено(Контрагент) Тогда
				Текст = "Контрагент с наименованием " + НаименованиеКонтрагента + ",ИНН " + ИННКонтрагента + " не найден! Строка № "+НомерСтроки;		
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = Текст;
				Сообщение.Сообщить();
			КонецЕсли;
			
			НаименованиеДоговора = МассивСтр[5];
			Договор = НайтиДоговор(НаименованиеДоговора, Контрагент);
			
			Если Не ЗначениеЗаполнено(Договор) Тогда
				Текст = "Договор с наименованием (номером) " + НаименованиеДоговора + " не найден! Строка № "+НомерСтроки;		
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = Текст;
				Сообщение.Сообщить();
			КонецЕсли;
			
			СтруктураСтроки = Новый Структура;
			
			//СтруктураСтроки.Вставить("ФинСтатья", ?(Договор.Свойство("Договор"),Договор.СтатьяДДС,""));
			//СтруктураСтроки.Вставить("КорСчет", НайтиСчет("62.01"));
			СтруктураСтроки.Вставить("ФинСтатья", Объект.Проводки[0].ФинСтатья);
			СтруктураСтроки.Вставить("КорСчет", Объект.Проводки[0].КорСчет);
			СтруктураСтроки.Вставить("Подразделение", ?(Договор.Свойство("Подразделение"),Договор.Подразделение,""));
			
			СтруктураСтроки.Вставить("КорСубконто1", Контрагент);
			СтруктураСтроки.Вставить("КорСубконто2", ?(Договор.Свойство("Договор"),Договор.Договор,""));
			СтруктураСтроки.Вставить("Сумма", МассивСтр[9]);
			
			//добавляем запись в табличную часть
			НоваяСтрока = Объект.Проводки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураСтроки);
			СуммаВсего = СуммаВсего + МассивСтр[9];
			
		КонецЦикла;
		//Скорректируем на услуги банка
		Объект.Проводки[0].КорСчет = НайтиСчет("25");
		Объект.Проводки[0].Сумма = Объект.СуммаДокумента - СуммаВсего;
		Расшифровка = 1;
		Расшифровка1ПриИзмененииПродолжить();
		
		ЗаполнитьДобавленныеКолонкиТаблиц();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВыбратьФайл() 
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	
	ДиалогОткрытияФайла.ПолноеИмяФайла 	   = "";
	Фильтр = "Все файлы (*.*)|*.*";
	
	ДиалогОткрытияФайла.Фильтр 			   = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок 		   = "Выберите файл";
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ПутьКФайлу = ДиалогОткрытияФайла.ПолноеИмяФайла;
	КонецЕсли;
	Возврат ПутьКФайлу
КонецФункции // ВыбратьФайл()

&НаСервере
Функция НайтиКонтрагента(Источник, ТабДок, Предприятие)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Наименование = &Наименование";
	Запрос.УстановитьПараметр("Наименование", Источник);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции // (

&НаСервере
Функция НайтиДоговор(НаимДоговора, Контрагент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	(ДоговорыКонтрагентов.Наименование = &Наименование ИЛИ ДоговорыКонтрагентов.Номер = &Наименование)
	|	И ДоговорыКонтрагентов.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Наименование", НаимДоговора);
	Запрос.УстановитьПараметр("Владелец", Контрагент);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ПараметрыДоговора = Новый Структура;
	
	Если Выборка.Следующий() Тогда
		ТекОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ПараметрыДоговора.Вставить("Договор",Выборка.Ссылка);
		ПараметрыДоговора.Вставить("Подразделение",ТекОбъект.Подразделение);
		ПараметрыДоговора.Вставить("СтатьяДДС",ТекОбъект.СтатьяДДС);
	КонецЕсли;
	
	Возврат ПараметрыДоговора;
	
КонецФункции

&НаСервере
Функция НайтиСчет(КодСчета)
	Счет = ПланыСчетов.Учетный.НайтиПоКоду(КодСчета); 
	Если ПустаяСтрока(Счет) Тогда
		Сообщить("Счет " + КодСчета + " не найден!");
	КонецЕсли; 
	Возврат Счет;
КонецФункции

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОбновитьСвязиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьСвязиНаСервере()
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийДвиженияДС.БанковскаяВыписка") Тогда
		Массив = Новый Массив;
		Массив.Добавить(Тип("СправочникСсылка.БанковскиеСчета"));
		НовыйТип = Новый ОписаниеТипов(Массив);
		Элементы.Субконто2.ОграничениеТипа = НовыйТип;
		Элементы.Субконто2.Заголовок = "Банковский счет";
		
		МассивПараметровВыбора = Новый Массив;
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			МассивПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация"));
		КонецЕсли;
		МассивПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Предприятие", "Объект.Предприятие"));
		Элементы.Субконто2.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
		
		МассивПараметровВыбора = Новый Массив;
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Предопределенный", Ложь));
		Элементы.Субконто2.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
		
		Элементы.Группа28.Видимость = НЕ Объект.ПриходРасход = Перечисления.ВидыОперацийПлатежноеПоручение.ОплатаВНХ И НЕ Объект.ПриходРасход = Перечисления.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ;
		
		Элементы.ОбратноеВНХДвижение.Видимость = НЕ Элементы.Группа28.Видимость И НЕ ПараметрыСеанса.ОграничиватьПредприятия;
		Если Элементы.ОбратноеВНХДвижение.Видимость Тогда
			МассивПараметровВыбора = Новый Массив;
			МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ПриходРасход", ?(Объект.ПриходРасход = Перечисления.ВидыОперацийПлатежноеПоручение.ОплатаВНХ, Перечисления.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ, Перечисления.ВидыОперацийПлатежноеПоручение.ОплатаВНХ)));
			МассивСвязейПараметровВыбора = Новый Массив;
			МассивСвязейПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.СуммаДокумента", "Объект.СуммаДокумента"));
			Элементы.ОбратноеВНХДвижение.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
			Элементы.ОбратноеВНХДвижение.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязейПараметровВыбора);
		КонецЕсли;
		//Элементы.ПроводкиФинПодразделение1.Видимость = ВНХМодульРаботает;
		//Элементы.ПроводкиФинЦФО1.Видимость = Истина;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийДвиженияДС.Взаимозачет") Тогда
		Массив = Новый Массив;
		Массив.Добавить(Тип("СправочникСсылка.Предприятия"));
		НовыйТип = Новый ОписаниеТипов(Массив);
		Элементы.Субконто2.ОграничениеТипа = НовыйТип;
		Элементы.Субконто2.Заголовок = "КорПредприятие";
		
		МассивПараметровВыбора = Новый Массив;
		Элементы.Субконто2.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
		
		//МассивПараметровВыбора = Новый Массив;
		//МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Предопределенный", Истина));
		//Элементы.Субконто2.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
		
		Элементы.Группа28.Видимость = Ложь;
		//Элементы.ПроводкиФинЦФО1.Видимость = Ложь;
		//Элементы.ПроводкиФинПодразделение1.Видимость = Ложь;
		
	Иначе
		Массив = Новый Массив;
		Массив.Добавить(Тип("СправочникСсылка.Кассы"));
		НовыйТип = Новый ОписаниеТипов(Массив);
		Элементы.Субконто2.ОграничениеТипа = НовыйТип;
		Элементы.Субконто2.Заголовок = "Касса";
		
		МассивПараметровВыбора = Новый Массив;
		МассивПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Предприятие", "Объект.Предприятие"));
		Элементы.Субконто2.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
		
		МассивПараметровВыбора = Новый Массив;
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Предопределенный", Ложь));
		Элементы.Субконто2.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
		
		Элементы.Группа28.Видимость = НЕ Объект.ПриходРасход = Перечисления.ВидыОперацийПлатежноеПоручение.ОплатаВНХ И НЕ Объект.ПриходРасход = Перечисления.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ;		//Элементы.ПроводкиФинПодразделение1.Видимость = ВНХМодульРаботает;
		
		Элементы.ОбратноеВНХДвижение.Видимость = НЕ Элементы.Группа28.Видимость И НЕ ПараметрыСеанса.ОграничиватьПредприятия;
		Если Элементы.ОбратноеВНХДвижение.Видимость Тогда
			МассивПараметровВыбора = Новый Массив;
			МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ПриходРасход", ?(Объект.ПриходРасход = Перечисления.ВидыОперацийПлатежноеПоручение.ОплатаВНХ, Перечисления.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ, Перечисления.ВидыОперацийПлатежноеПоручение.ОплатаВНХ)));
			МассивСвязейПараметровВыбора = Новый Массив;
			МассивСвязейПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.СуммаДокумента", "Объект.СуммаДокумента"));
			Элементы.ОбратноеВНХДвижение.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
			Элементы.ОбратноеВНХДвижение.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязейПараметровВыбора);
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиФинЦФО1ПриИзменении(Элемент)
	ОбновитьСвязиПоЦФОНаСервере(Не Элемент = Неопределено);
	ДоговорПриИзменении(Элемент);
КонецПроцедуры

&НаСервере
Процедура ОбновитьСвязиПоЦФОНаСервере(Изменять)
	
	//субконто2 меняем связь по ЦФО
	Если Ложь Тогда
		
		
		Если Объект.Проводки.Количество() = 1 Тогда
			
			ПоЦФО = ?(ЗначениеЗаполнено(Объект.Проводки[0].ФинЦФО) И НЕ Объект.Проводки[0].ФинЦФО = Объект.Предприятие, Истина, Ложь);
			ЕстьРеквизитПредприятие1 = ?(ЗначениеЗаполнено(Объект.Проводки[0].КорСубконто1), Не Объект.Проводки[0].КорСубконто1.Метаданные().Реквизиты.Найти("Предприятие") = Неопределено, Ложь);
			ЕстьРеквизитПредприятие2 = ?(ЗначениеЗаполнено(Объект.Проводки[0].КорСубконто2), Не Объект.Проводки[0].КорСубконто2.Метаданные().Реквизиты.Найти("Предприятие") = Неопределено, Ложь);
			
			Если ЗначениеЗаполнено(Объект.Проводки[0].КорСубконто1) Тогда
				//Эл = Метаданные.ОбщиеРеквизиты.Предприятие.Состав.Найти(Объект.Проводки[0].КорСубконто1.Метаданные());
				Если НЕ Объект.Проводки[0].КорСубконто1.Метаданные().Реквизиты.Найти("Предприятие") = Неопределено Тогда
					ЕстьРеквизитПредприятие1 = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Объект.Проводки[0].КорСубконто2) Тогда
				//Эл = Метаданные.ОбщиеРеквизиты.Предприятие.Состав.Найти(Объект.Проводки[0].КорСубконто2.Метаданные());
				Если НЕ Объект.Проводки[0].КорСубконто2.Метаданные().Реквизиты.Найти("Предприятие") = Неопределено Тогда
					ЕстьРеквизитПредприятие2 = Истина;
				КонецЕсли; 
			КонецЕсли;
			
			ТекКорСуб1 = Объект.Проводки[0].КорСубконто1;
			ТекКорСуб2 = Объект.Проводки[0].КорСубконто2;
			
			МассивПараметровВыбора = Новый Массив;
			МассивПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Предприятие", ?(ПоЦФО, "Элементы.Проводки.ТекущиеДанные.ФинЦФО", "Объект.Предприятие"), РежимИзмененияСвязанногоЗначения.НеИзменять));
			Элементы.ПроводкиКорСубконто2БезВладельца1.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
			Элементы.ПроводкиКорСубконто1.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
			Если ЕстьРеквизитПредприятие1 И Изменять Тогда
				Объект.Проводки[0].КорСубконто1 = Неопределено;
			ИначеЕсли Изменять Тогда
				Объект.Проводки[0].КорСубконто1 = ТекКорСуб1;
			КонецЕсли;
			
			МассивПараметровВыбораПодр = Новый Массив;
			МассивПараметровВыбораПодр.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", ?(ПоЦФО, "Элементы.Проводки.ТекущиеДанные.ФинЦФО", "Объект.Предприятие"), РежимИзмененияСвязанногоЗначения.НеИзменять));
			Элементы.ПроводкиПодразделение1.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметровВыбораПодр);
			Если Изменять Тогда
				Объект.Проводки[0].Подразделение = Неопределено;
			КонецЕсли;
			
			МассивПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы.Проводки.ТекущиеДанные.КорСубконто1", РежимИзмененияСвязанногоЗначения.Очищать));
			Элементы.ПроводкиКорСубконто2.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
			Если ЕстьРеквизитПредприятие2 и Изменять Тогда
				Объект.Проводки[0].КорСубконто2 = Неопределено;
			ИначеЕсли Изменять Тогда
				Объект.Проводки[0].КорСубконто2 = ТекКорСуб2;
			КонецЕсли;
			
			Элементы.ПроводкиФинПодразделение1.Видимость = Объект.Проводки[0].ФинЦФО.УчетПоПодразделениям;
			Элементы.ПроводкиПодразделение1.Видимость = ?(ПоЦФО, Объект.Проводки[0].ФинЦФО.УчетПоПодразделениям, Элементы.ПроводкиПодразделение1.Видимость);
			
			Объект.Проводки[0].ПодразделениеЦФОДоступность = Элементы.ПроводкиФинПодразделение1.Видимость;
			
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиКорСчет791ПриИзменении(Элемент)
	//ДанныеСчета = БухгалтерскийУчетПовтИсп.ПолучитьСвойстваСчета(Объект.Проводки[0].КорСчет791, Объект.Предприятие);
	
	Счет79ПриИзмененииНаСервере();
	
	ПроводкиКорСчет79ПриИзменении(Элемент);	
	
КонецПроцедуры

&НаСервере
Процедура Счет79ПриИзмененииНаСервере(ДанныеСчета = Неопределено)
	Если ДанныеСчета = Неопределено Тогда
		ДанныеСчета = УправленческийУчетПовтИсп.ПолучитьСвойстваСчета(Объект.Проводки[0].КорСчет791, Объект.Предприятие);
	КонецЕсли;
	
	Наименование1 = ДанныеСчета["ВидСубконто1Наименование"];
	Наименование2 = ДанныеСчета["ВидСубконто2Наименование"];
	Наименование3 = ДанныеСчета["ВидСубконто3Наименование"];
	//УчетПоПодразделениям = ДанныеСчета["УчетПоПодразделениям"];
	
	Элементы.ПроводкиКорСубконто791.ПодсказкаВвода = Наименование1;
	Элементы.ПроводкиКорСубконто792.ПодсказкаВвода = Наименование2;
	//Элементы.ПроводкиКорСубконто2БезВладельца1.ПодсказкаВвода = Наименование2;
	Элементы.ПроводкиКорСубконто793.ПодсказкаВвода = Наименование3;
	Элементы.ПроводкиКорСубконто791.Заголовок = Наименование1;
	Элементы.ПроводкиКорСубконто792.Заголовок = Наименование2;
	//Элементы.ПроводкиКорСубконто2БезВладельца1.Заголовок = Наименование2;
	Элементы.ПроводкиКорСубконто793.Заголовок = Наименование3;
	Элементы.ПроводкиКорСубконто791.Видимость = ЗначениеЗаполнено(Наименование1);
	Элементы.ПроводкиКорСубконто792.Видимость = ЗначениеЗаполнено(Наименование2);
	Элементы.ПроводкиКорСубконто793.Видимость = ЗначениеЗаполнено(Наименование3);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиКорСчет79ПриИзменении(Элемент)
	ПоляОбъекта = Новый Структура("Счет, Субконто1, Субконто2, Субконто3, Предприятие, Элементы, ЭлементСубконто1, ЭлементСубконто2, ЭлементСубконто3",
	"КорСчет791", "КорСубконто791", "КорСубконто792", "КорСубконто793", Объект.Предприятие, Элементы, "ПроводкиКорСубконто794", "ПроводкиКорСубконто795", "ПроводкиКорСубконто796");
	БюджетныйНаКлиенте.УстановитьДоступность(Элементы.Проводки.ТекущиеДанные, ПоляОбъекта);
	//ОтображениеДекорации1();
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиСубконто2ДебетПриИзменении(Элемент)
	
	ТекДанные = Элементы.Проводки.ТекущиеДанные;
	
	Если ТипЗнч(ТекДанные.КорСубконто2) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ВалютаТекДоговора = БюджетныйНаСервере.ВернутьРеквизит(ТекДанные.КорСубконто2, "ВалютаДоговора");
		ТекДанные.ДоговорВалютный = ЗначениеЗаполнено(ВалютаТекДоговора) И ЗначениеЗаполнено(Объект.Валюта1) И Не (ВалютаТекДоговора = Объект.Валюта1);
		ПроводкиСчетДебетПриИзменении(Неопределено, Неопределено)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиФинЦФОПриИзменении(Элемент)
	ОбновитьСвязиПоЦФОСтрокиНаСервере(НЕ Элемент = Неопределено, Элементы.Проводки.ТекущиеДанные.ПолучитьИдентификатор());
	ПроводкиСчетДебетПриИзменении(Элемент);
	//Элементы.Проводки.ТекущийЭлемент = Элементы.ПроводкиФинПодраз1деление;
	//Элементы.Проводки.ИзменитьСтроку();
КонецПроцедуры

&НаСервере
Процедура ОбновитьСвязиПоЦФОСтрокиНаСервере(Изменять, ИдСтроки)
	
	//субконто2 меняем связь по ЦФО
	Если ВНХМодульРаботает И УчетДДСПоЦФО Тогда
		
		ТекДанные = Объект.Проводки.НайтиПоИдентификатору(ИдСтроки);
		
		ПоЦФО = ?(ЗначениеЗаполнено(ТекДанные.ФинЦФО) И НЕ ТекДанные.ФинЦФО = Объект.Предприятие, Истина, Ложь);
		ЕстьРеквизитПредприятие1 = ?(ЗначениеЗаполнено(ТекДанные.КорСубконто1), Не ТекДанные.КорСубконто1.Метаданные().Реквизиты.Найти("Предприятие") = Неопределено, Ложь);
		ЕстьРеквизитПредприятие2 = ?(ЗначениеЗаполнено(ТекДанные.КорСубконто2), Не ТекДанные.КорСубконто2.Метаданные().Реквизиты.Найти("Предприятие") = Неопределено, Ложь);
		
		Если ЗначениеЗаполнено(ТекДанные.КорСубконто1) Тогда
			//Эл = Метаданные.ОбщиеРеквизиты.Предприятие.Состав.Найти(ТекДанные.КорСубконто1.Метаданные());
			Если НЕ ТекДанные.КорСубконто1.Метаданные().Реквизиты.Найти("Предприятие") = Неопределено Тогда
				ЕстьРеквизитПредприятие1 = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекДанные.КорСубконто2) Тогда
			//Эл = Метаданные.ОбщиеРеквизиты.Предприятие.Состав.Найти(ТекДанные.КорСубконто2.Метаданные());
			Если НЕ ТекДанные.КорСубконто2.Метаданные().Реквизиты.Найти("Предприятие") = Неопределено Тогда
				ЕстьРеквизитПредприятие2 = Истина;
			КонецЕсли; 
		КонецЕсли;
		
		ТекКорСуб1 = ТекДанные.КорСубконто1;
		ТекКорСуб2 = ТекДанные.КорСубконто2;
		
		ТекущаяСвязьПоЦФО = Ложь;
		Для каждого ТекЭлементСвязи Из Элементы.ПроводкиСубконто1Дебет.СвязиПараметровВыбора Цикл
			Если НЕ ТекЭлементСвязи.ПутьКДанным = "Объект.Предприятие" Тогда
				ТекущаяСвязьПоЦФО = Истина;			
			КонецЕсли;		
		КонецЦикла; 
		
		Если НЕ ПоЦФО = ТекущаяСвязьПоЦФО Тогда
			МассивПараметровВыбора = Новый Массив;
			МассивПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Предприятие", ?(ПоЦФО, "Элементы.Проводки.ТекущиеДанные.ФинЦФО", "Объект.Предприятие"), РежимИзмененияСвязанногоЗначения.НеИзменять));
			Элементы.ПроводкиСубконто1Дебет.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
			Элементы.ПроводкиКорСубконто2БезВладельца.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
			Если ЕстьРеквизитПредприятие1  И Изменять Тогда
				ТекДанные.КорСубконто1 = Неопределено;
			ИначеЕсли Изменять Тогда
				ТекДанные.КорСубконто1 = ТекКорСуб1;
			КонецЕсли;
			
			МассивПараметровВыбораПодр = Новый Массив;
			МассивПараметровВыбораПодр.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", ?(ПоЦФО, "Элементы.Проводки.ТекущиеДанные.ФинЦФО", "Объект.Предприятие"), РежимИзмененияСвязанногоЗначения.НеИзменять));
			Элементы.ПроводкиПодразделение.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметровВыбораПодр);
			Если Изменять Тогда
				ТекДанные.Подразделение = Неопределено;
			КонецЕсли;
			
			МассивПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы.Проводки.ТекущиеДанные.КорСубконто1", РежимИзмененияСвязанногоЗначения.Очищать));
			Элементы.ПроводкиСубконто2Дебет.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
			Если ЕстьРеквизитПредприятие2 И Изменять Тогда
				ТекДанные.КорСубконто2 = Неопределено;
			ИначеЕсли Изменять Тогда
				ТекДанные.КорСубконто2 = ТекКорСуб2;
			КонецЕсли;
			
		КонецЕсли;
		
		ТекДанные.ПодразделениеЦФОДоступность = ТекДанные.ФинЦФО.УчетПоПодразделениям;
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПровереноПоУчету(Команда)
	Элементы.КомандаПроверено.Пометка = НЕ Элементы.КомандаПроверено.Пометка;
	Если Элементы.КомандаПроверено.Пометка Тогда
		БюджетныйНаСервере.УстановитьПроверкуДокумента(Объект.Ссылка, Истина);
	Иначе
		БюджетныйНаСервере.УдалитьПроверкуДокумента(Объект.Ссылка, Истина);
	КонецЕсли;
	ОповеститьОбИзменении(Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ИнвПроектПриИзменении(Элемент)
	
	Для каждого ТекСтрока Из Объект.Проводки Цикл
		
		ДанныеСчета = УправленческийУчетПовтИсп.ПолучитьСвойстваСчета(ТекСтрока.КорСчет, Объект.Предприятие);
		
		Если Объект.Проводки.Количество() Тогда
			ПоЦФО = ?(ЗначениеЗаполнено(ТекСтрока.ФинЦФО) И НЕ ТекСтрока.ФинЦФО = Объект.Предприятие, Истина, Ложь);
		Иначе
			ПоЦФО = Ложь;	
		КонецЕсли;
		
		//Если НЕ ДанныеСчета.ВидСубконто1ТипЗначения = Неопределено И ДанныеСчета.ВидСубконто1ТипЗначения.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
		//	
		//	Если Не Элемент = Неопределено И НЕ ПоЦФО Тогда
		//		ТекСтрока.КорСубконто1 = Объект.Контрагент;
		//	КонецЕсли;
		//	
		//	Элементы.ПроводкиКорСубконто1.Видимость = ПоЦФО;
		//КонецЕсли;
		
		Если НЕ ДанныеСчета.ВидСубконто3ТипЗначения = Неопределено И ДанныеСчета.ВидСубконто3ТипЗначения.СодержитТип(Тип("СправочникСсылка.Проекты")) Тогда
			
			Если Не Элемент = Неопределено И НЕ ПоЦФО Тогда
				ТекСтрока.КорСубконто3 = Объект.ИнвПроект;
			КонецЕсли;
			
		КонецЕсли;			
			
	КонецЦикла; 	
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбъектСоответствия = сабОбщегоНазначения.ПолучитьОбъектСоответствия(ОбратноеВНХДвижение);
	Если ОбъектСоответствия <> Неопределено и ОбъектСоответствия <> Объект.Ссылка Тогда
		 Отказ = Истина;
		 сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(ЭтотОбъект, "Обратное ВНХ движение уже связано с другим документом", , , "ОбратноеВНХДвижение", Отказ);
	КонецЕсли;
	
КонецПроцедуры


#Область КомандыИзменения

&НаКлиенте
Процедура ПоказатьИзмененияВерсий(ИмяКоманды)

	СсылкаНаОбъект = ЭтаФорма.ДокументБУ; 
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Ссылка",СсылкаНаОбъект);
	СтруктураКоличествВерсий = сабОбщегоНазначенияБУХ.ПолучитьКоличествоВерсий(СсылкаНаОбъект);
	КолВерсий = СтруктураКоличествВерсий.КоличествоИзмененныхВерсий;
	СравниваемыеВерсии = Новый СписокЗначений;  
	Пока КолВерсий > 0 Цикл
		СравниваемыеВерсии.Добавить(СтруктураКоличествВерсий.КоличествоВерсий, СтруктураКоличествВерсий.КоличествоВерсий);
		СтруктураКоличествВерсий.КоличествоВерсий = СтруктураКоличествВерсий.КоличествоВерсий - 1;
		КолВерсий = КолВерсий - 1;
	КонецЦикла;
	ПараметрыОтчета.Вставить("СравниваемыеВерсии",СравниваемыеВерсии); 
	
	ОткрытьФорму("РегистрСведений.ВерсииОбъектов.Форма.ОтчетПоВерсиямОбъекта", ПараметрыОтчета);

КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоДокументу(ИмяКоманды)

	ПерезаполнитьДокументНаОснованиинаСервере();

КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьДокументНаОснованиинаСервере()
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.ОбработкаЗаполненияСФормы(ЭтаФорма.ДокументБУ, Неопределено, Истина);
	ЗначениеВРеквизитФормы(ТекОбъект, "Объект");
	
	//ОбновленнаяЗапись = РегистрыСведений.сабОбработкаДокументов.СоздатьМенеджерЗаписи();
	//ОбновленнаяЗапись.ДокументБУ = ЭтаФорма.ДокументБУ;
	//ОбновленнаяЗапись.ДокументУУ = Объект.Ссылка;
	//ОбновленнаяЗапись.ДатаОбработки = ТекущаяДата();
	//ОбновленнаяЗапись.Автор = ПараметрыСеанса.ТекущийПользователь;
	//ОбновленнаяЗапись.Модифицирован = Ложь;
	//ОбновленнаяЗапись.Записать();
	Элементы.ЭлементПерезаполнитьПоДокументу.Доступность = Ложь;
	
	ПриСозданииНаСервере(Ложь, Истина);
	
КонецПроцедуры

#КонецОбласти


