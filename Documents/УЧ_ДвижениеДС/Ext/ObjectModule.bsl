Процедура НоваяСтрокаРегистраБух(
	Движения,
	Дата,
	Предприятие,
	Сценарий,
	Содержание,
	СчетДт,
	СубконтоДт1,
	СубконтоДт2,
	СубконтоДт3,
	ПодразделениеДт,
	КоличествоДт,
	ВалютаДт,
	ВалСуммаДт,
	СчетКт,
	СубконтоКт1,
	СубконтоКт2,
	СубконтоКт3,
	ПодразделениеКт,
	КоличествоКт,
	ВалютаКт,
	ВалСуммаКт,
	Сумма,
	Приход,
	ФинЦФО = Неопределено,
	ФинПодразделениеЦФО = Неопределено)	
	
	Условие_79_55 = (СчетДт = ПланыСчетов.Учетный.НайтиПоКоду("55.01") И СчетКт.Родитель = ПланыСчетов.Учетный.НайтиПоКоду("79.01")) ИЛИ (СчетКт = ПланыСчетов.Учетный.НайтиПоКоду("55.01") И СчетДт.Родитель = ПланыСчетов.Учетный.НайтиПоКоду("79.01"));
	
	Движение = Движения.Учетный.Добавить();
	Движение.Период = Дата;
	Движение.Предприятия = Предприятие;
	Движение.СценарийПлана = Сценарий;
	Движение.Содержание = Содержание;
	Если Приход Тогда
		
		Если ЗначениеЗаполнено(СчетДт) Тогда
			Движение.СчетДт = СчетДт;
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,СчетДт,1,СубконтоДт1);
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,СчетДт,2,СубконтоДт2);
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,СчетДт,3,СубконтоДт3);
			
			Если СчетДт.УчетПоПодразделениям Тогда
				Движение.ПодразделениеДт = ПодразделениеДт;	
			КонецЕсли;
			
			
			Если СчетДт.Количественный Тогда
				Движение.КоличествоДт = КоличествоДт;
			КонецЕсли;
			Если СчетДт.Валютный Тогда
				Движение.ВалютаДт = ВалютаДт;	
				Движение.ВалютнаяСуммаДт = ВалСуммаДт;	
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетКт) Тогда
			Движение.СчетКт = СчетКт;
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,СчетКт,1,СубконтоКт1);
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,СчетКт,2,СубконтоКт2);
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,СчетКт,3,СубконтоКт3);
			
			Если СчетКт.УчетПоПодразделениям Тогда
				Движение.ПодразделениеКт = ПодразделениеКт;	
			КонецЕсли;
			Если СчетКт.Количественный Тогда
				Движение.КоличествоКт = КоличествоКт;
			КонецЕсли;
			Если СчетКт.Валютный Тогда
				Движение.ВалютаКт = ВалютаКт;	
				Движение.ВалютнаяСуммаКт = ВалСуммаКт;	
			КонецЕсли;
		КонецЕсли;
		
		//Если Движение.СчетДт.УчетПоЦФО ИЛИ Движение.СчетКт.УчетПоЦФО Тогда
		//	Движение.ЦФО = ФинЦФО;
		//	Движение.ПодразделениеЦФО = ФинПодразделениеЦФО;
		//КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(СчетДт) Тогда
			Движение.СчетКт = СчетДт;
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,СчетДт,1,СубконтоДт1);
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,СчетДт,2,СубконтоДт2);
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,СчетДт,3,СубконтоДт3);
			
			Если СчетДт.УчетПоПодразделениям Тогда
				Движение.ПодразделениеКт = ПодразделениеДт;	
			КонецЕсли;
			Если СчетДт.Количественный Тогда
				Движение.КоличествоКт = КоличествоДт;
			КонецЕсли;
			Если СчетДт.Валютный Тогда
				Движение.ВалютаКт = ВалютаДт;	
				Движение.ВалютнаяСуммаКт = ВалСуммаДт;	
			КонецЕсли;
		КонецЕсли;
		
		
		Если ЗначениеЗаполнено(СчетКт) Тогда
			Движение.СчетДт = СчетКт;
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,СчетКт,1,СубконтоКт1);
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,СчетКт,2,СубконтоКт2);
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,СчетКт,3,СубконтоКт3);
			
			Если СчетКт.УчетПоПодразделениям Тогда
				Движение.ПодразделениеДт = ПодразделениеКт;	
			КонецЕсли;
			Если СчетКт.Количественный Тогда
				Движение.КоличествоДт = КоличествоКт;
			КонецЕсли;
			Если СчетКт.Валютный Тогда
				Движение.ВалютаДт = ВалютаКт;	
				Движение.ВалютнаяСуммаДт = ВалСуммаКт;	
			КонецЕсли;
		КонецЕсли;
		
		
		//Если Движение.СчетДт.УчетПоЦФО ИЛИ Движение.СчетКт.УчетПоЦФО Тогда
		//	Движение.ЦФО = ФинЦФО;
		//	Движение.ПодразделениеЦФО = ФинПодразделениеЦФО;
		//КонецЕсли;
		
	КонецЕсли;	
	Движение.Сумма = Сумма;
КонецПроцедуры

Процедура КурсовыеРазницы(ЭтоРасход, Счет, Субконто2, Валюта1, ВалютнаяСумма1, Курс1)
	
	//Если Константы.МодульВалютныеПроекты.Получить() Тогда //для валютных проектов сложный алгоритм в подписке
		Возврат;	
	//КонецЕсли;
	
	СтруктураКурса = УЧ_Сервер.СредневзвешенныйКурсУчет(Ссылка,Субконто2,Валюта1);
	СрКурс = СтруктураКурса.Курс;
	
	ТекСумма = 0;

	СрСумма = СтруктураКурса.Сумма;
	СрВалютнаяСумма = СтруктураКурса.ВалютнаяСумма;
	КурсЦБ = УЧ_Сервер.ПолучитьКурсВалют(Валюта1,, Дата);
	
	Если ЭтоРасход Тогда
		Если Окр(СрКурс, 4) И НЕ Окр(СрКурс, 4) = Окр(Курс1, 4) Тогда	
			ДвижениеКР = Движения.Учетный.Добавить();
			ДвижениеКР.Период = Дата;
			ДвижениеКР.Предприятия = Предприятие;
			ДвижениеКР.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
			
			Если Окр(Курс1, 4) > Окр(СрКурс, 4) Тогда //доход
				ДвижениеКР.СчетДт = Счет;
				
				УЧ_Сервер.УстановитьСубконто(ДвижениеКР.СубконтоДт,Счет,1,Предприятие.УчетнаяПолитика.КурсовыеРазницыДоход);
				УЧ_Сервер.УстановитьСубконто(ДвижениеКР.СубконтоДт,Счет,2,Субконто2);
				
				Если ДвижениеКР.СчетДт.УчетПоПодразделениям Тогда
					ДвижениеКР.ПодразделениеДт = Подразделение;	
				КонецЕсли;	
				
				ДвижениеКР.СчетКт = ПланыСчетов.Учетный.НайтиПоКоду("91");
				Если ДвижениеКР.СчетКт.УчетПоПодразделениям Тогда
					ДвижениеКР.ПодразделениеКт = Подразделение;	
				КонецЕсли;
				ДвижениеКР.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = Предприятие.УчетнаяПолитика.КурсовыеРазницы;
				
				ТекСумма = Окр(Курс1, 4) * ВалютнаяСумма1 - СрКурс * ВалютнаяСумма1;
				
				ДвижениеКР.ВалютаДт = Валюта1;
				
				Если ЭтоРасход И СрВалютнаяСумма = ВалютнаяСумма1 Тогда
					ТекСумма = Окр(Курс1, 4) * ВалютнаяСумма1 - СрСумма;
				КонецЕсли;
				
			Иначе //расход
				ДвижениеКР.СчетДт = ПланыСчетов.Учетный.НайтиПоКоду("91");
				Если ДвижениеКР.СчетДт.УчетПоПодразделениям Тогда
					ДвижениеКР.ПодразделениеДт = Подразделение;	
				КонецЕсли;
				ДвижениеКР.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = Предприятие.УчетнаяПолитика.КурсовыеРазницы;
				
				ДвижениеКР.СчетКт = Счет;
				УЧ_Сервер.УстановитьСубконто(ДвижениеКР.СубконтоКт,Счет,1,Предприятие.УчетнаяПолитика.КурсовыеРазницыРасход);
				УЧ_Сервер.УстановитьСубконто(ДвижениеКР.СубконтоКт,Счет,2,Субконто2);
				
				Если ДвижениеКР.СчетКт.УчетПоПодразделениям Тогда
					ДвижениеКР.ПодразделениеКт = Подразделение;	
				КонецЕсли;	
				
				ТекСумма = СрКурс * ВалютнаяСумма1 - Окр(Курс1, 4) * ВалютнаяСумма1 ;
				
				ДвижениеКР.ВалютаКт = Валюта1;
				
				Если ЭтоРасход И СрВалютнаяСумма = ВалютнаяСумма1 Тогда
					ТекСумма = СрСумма - Окр(Курс1, 4) * ВалютнаяСумма1;
				КонецЕсли;
				
			КонецЕсли;
			ДвижениеКР.Сумма = ТекСумма;
			ДвижениеКР.Содержание = "Списана курсовая разница: ПродКурс: " + Строка(Окр(СрКурс, 4)) + " СредКурс: " + Строка(Окр(Курс1, 4));
			
		КонецЕсли;
	Иначе
		Если Окр(КурсЦБ, 4) И НЕ Окр(КурсЦБ, 4) = Окр(Курс1, 4) Тогда
			ДвижениеКР = Движения.Учетный.Добавить();
			ДвижениеКР.Период = Дата;
			ДвижениеКР.Предприятия = Предприятие;
			ДвижениеКР.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
			
			Если Окр(Курс1, 4) < Окр(КурсЦБ, 4) Тогда //доход
				ДвижениеКР.СчетДт = Счет;
				
				УЧ_Сервер.УстановитьСубконто(ДвижениеКР.СубконтоДт,Счет,1,Предприятие.УчетнаяПолитика.КурсовыеРазницыДоход);
				УЧ_Сервер.УстановитьСубконто(ДвижениеКР.СубконтоДт,Счет,2,Субконто2);
				
				Если ДвижениеКР.СчетДт.УчетПоПодразделениям Тогда
					ДвижениеКР.ПодразделениеДт = Подразделение;	
				КонецЕсли;	
				
				ДвижениеКР.СчетКт = ПланыСчетов.Учетный.НайтиПоКоду("91");
				Если ДвижениеКР.СчетКт.УчетПоПодразделениям Тогда
					ДвижениеКР.ПодразделениеКт = Подразделение;	
				КонецЕсли;
				ДвижениеКР.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = Предприятие.УчетнаяПолитика.КурсовыеРазницы;
				
				ТекСумма = КурсЦБ * ВалютнаяСумма1 - Окр(Курс1, 4) * ВалютнаяСумма1;
				
				ДвижениеКР.ВалютаДт = Валюта1;
				
				//Если СрВалютнаяСумма = ВалютнаяСумма1 Тогда
				//	ТекСумма = СрСумма - Окр(Курс1, 4) * ВалютнаяСумма1;
				//КонецЕсли;
				
			Иначе //расход
				ДвижениеКР.СчетДт = ПланыСчетов.Учетный.НайтиПоКоду("91");
				Если ДвижениеКР.СчетДт.УчетПоПодразделениям Тогда
					ДвижениеКР.ПодразделениеДт = Подразделение;	
				КонецЕсли;
				ДвижениеКР.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = Предприятие.УчетнаяПолитика.КурсовыеРазницы;
				
				ДвижениеКР.СчетКт = Счет;
				УЧ_Сервер.УстановитьСубконто(ДвижениеКР.СубконтоКт,Счет,1,Предприятие.УчетнаяПолитика.КурсовыеРазницыРасход);
				УЧ_Сервер.УстановитьСубконто(ДвижениеКР.СубконтоКт,Счет,2,Субконто2);
				
				Если ДвижениеКР.СчетКт.УчетПоПодразделениям Тогда
					ДвижениеКР.ПодразделениеКт = Подразделение;	
				КонецЕсли;	
				
				ТекСумма = Окр(Курс1, 4) * ВалютнаяСумма1 - КурсЦБ * ВалютнаяСумма1;
				
				ДвижениеКР.ВалютаКт = Валюта1;
				
				//Если СрВалютнаяСумма = ВалютнаяСумма1 Тогда
				//	ТекСумма = Окр(Курс1, 4) * ВалютнаяСумма1 - СрСумма;
				//КонецЕсли;
				
			КонецЕсли;	
			
			ДвижениеКР.Сумма = ТекСумма;
			ДвижениеКР.Содержание = "Финансовый результат от покупки валюты: КурсЦБ: " + Строка(Окр(КурсЦБ, 4)) + " ПокКурс: " + Строка(Окр(Курс1, 4));
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

#Область Проведение

Процедура ОбработкаПроведения(Отказ, Режим)
	
	//ВиртСчет = ПланыСчетов.Учетный.ВиртуальныйРасчетныйСчет;
	//ВиртИсточник = сабОбщегоНазначенияПовтИсп.ПолучитьПредопределенныйИсточник(); 
	Если РучнаяКорректировка Тогда		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Движения документа %1 отредактированы вручную и не могут быть автоматически актуализированы'"), ЭтотОбъект);
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.КлючДанных = Ссылка;
		Сообщение.Сообщить();		
		
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СчетКазна = ПланыСчетов.Учетный.НайтиПоКоду("55.01");
	Счет791 = ПланыСчетов.Учетный.НайтиПоКоду("79.01");
	
	ИспользоватьВНХВзаимозачеты = Ложь;
	ИспользоватьТранзит79 = Ложь;
		
	ЭтоРасход = ПП_Сервер.ЭтоРасходнаяОперация(ПриходРасход);
	
	ЭтоЗваимозачет = ВидОперации = Перечисления.ВидыОперацийДвиженияДС.Взаимозачет;
	ЭтоВторичноеДС = ЗначениеЗаполнено(ДокОснование) И ТипЗнч(ДокОснование) = Тип("ДокументСсылка.УЧ_ДвижениеДС");
	
	Движения.Учетный.Записывать = Истина;
	Если Проводки.Количество() Тогда
		
		//ТекСчет = ?(Видимость79 И ЗначениеЗаполнено(Счет79), Счет79, Счет);
		
		Если  Проводки.Количество() = 1 И ТипЗнч(Проводки[0].КорСубконто3) = Тип("ДокументСсылка.УЧ_ВыплатаЗП") И ЗначениеЗаполнено(Проводки[0].КорСубконто3) И ТипЗнч(Проводки[0].КорСубконто1) = Тип("СправочникСсылка.Сотрудники") И Проводки[0].КорСубконто1.Предопределенный Тогда 
			
			//проводка в случае распределения ЗП по ведомости
			Для Каждого ТекСтрокаДока Из Проводки[0].КорСубконто3.ТабличнаяЧасть Цикл
				ПроводкаРаспределениеЗП(ЭтоРасход, Проводки[0], ТекСтрокаДока);
			КонецЦикла;	
			
		Иначе
			Для каждого ТекСтрока Из Проводки Цикл
				ЭтоКорСчетВНХ = УЧ_Сервер.ВНХСчет(ТекСтрока.КорСчет);
				
				Если ЭтоЗваимозачет И ЗначениеЗаполнено(ТекСтрока.КорСчет791) И ИспользоватьТранзит79 И НЕ ЭтоКорСчетВНХ Тогда
					//для взаимозачета и заполненного 79 рисуем проводка 79-55 и только потом 79-целевой
					ПроводкаПоУмолчанию79(ЭтоРасход, ТекСтрока, ЭтоЗваимозачет);
					//транзит 79-55 если включена! константа сабУЧ_ИспользоватьПереводы
					Если НЕ ЭтоКорСчетВНХ И ИспользоватьТранзит79 Тогда
						ПроводкаТранзит79_55_79(ЭтоРасход, ТекСтрока, СчетКазна);
					КонецЕсли;
				Иначе
					Если ИспользоватьВНХВзаимозачеты И ЗначениеЗаполнено(ТекСтрока.ФинЦФО) И НЕ ТекСтрока.ФинЦФО = Предприятие Тогда
						//обычная проводка, но с корсчетом казны
						ПроводкаПоУмолчанию55(ЭтоРасход, ТекСтрока, ЭтоЗваимозачет, ?(ИспользоватьТранзит79, Счет791, СчетКазна));
					Иначе
						//обычная проводка
						ПроводкаПоУмолчанию(ЭтоРасход, ТекСтрока, ЭтоЗваимозачет);
					КонецЕсли;
					
					//транзит 79-55 если включена! константа сабУЧ_ИспользоватьПереводы (в связке с обычной проводкой)
					Если НЕ ЭтоЗваимозачет И ЭтоКорСчетВНХ И ИспользоватьТранзит79 Тогда
						ПроводкаТранзит79_55(ЭтоРасход, ТекСтрока, СчетКазна);
					КонецЕсли; 
				КонецЕсли;
				
				//допуслуги
				Если ПриходРасход = Перечисления.ВидыОперацийПлатежноеПоручение.ПоступленияПоЭквайрингу И ТекСтрока.СуммаУслуг Тогда
					ПроводкаУслуги(ЭтоРасход, ТекСтрока);	
				КонецЕсли;
				
				//вторая проводка в самой казне
				ВторичноеДДС = ЗначениеЗаполнено(ДокОснование) И (ТипЗнч(ДокОснование) = Тип("ДокументСсылка.УЧ_АвансовыйОтчет")) 
								ИЛИ ЗначениеЗаполнено(ДокОснование2) И (ТипЗнч(ДокОснование2) = Тип("ДокументСсылка.УЧ_ДвижениеДС"));
								
				Если Не ВторичноеДДС Тогда
					ВторичноеДДС = (ПриходРасход = Перечисления.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ);
				КонецЕсли;
				
				ПредприятиеКазна = Неопределено;
				
				Если ЗначениеЗаполнено(ПредприятиеКазна) И ЭтоКорСчетВНХ И Не ТекСтрока.КорСубконто1 = ПредприятиеКазна И Не Предприятие = ПредприятиеКазна И Не ВторичноеДДС Тогда
					ПроводкаПоКазне(ЭтоРасход, ТекСтрока, ПредприятиеКазна);
				КонецЕсли;
				
				// проводка по предприятию-корреспонденту
				Если ИспользоватьВНХВзаимозачеты И НЕ ЗначениеЗаполнено(ДокОснование2) И ЗначениеЗаполнено(ТекСтрока.ФинЦФО) И НЕ ТекСтрока.ФинЦФО = Предприятие Тогда
					ПроводкаПоСтороннемуПредприятию(ЭтоРасход, ТекСтрока, СчетКазна);
				КонецЕсли;
				
			КонецЦикла;		
		КонецЕсли;

	КонецЕсли;
	
	//проводки по курсовым разницам
	Если Валюта1 <> Предприятие.ОсновнаяВалютаУчета Или Счет.Валютный Тогда
		КурсовыеРазницы(ЭтоРасход, Счет, Субконто2, Валюта1, ВалютнаяСумма1, Курс1);		
	КонецЕсли;

	Для Каждого ТекСтрокаПроводок Из Проводки Цикл
		
		Если Не ЗначениеЗаполнено(ТекСтрокаПроводок.КорСчет) Тогда
			Продолжить;		
		КонецЕсли;
		
		ДанныеСчета = УправленческийУчетПовтИсп.ПолучитьСвойстваСчета(ТекСтрокаПроводок.КорСчет, Предприятие);
		
		Если ТекСтрокаПроводок.КорВалСумма = 0 Или Не ДанныеСчета.Валютный Тогда
			Продолжить;
		КонецЕсли;
		
		КорКурс = ?(ТекСтрокаПроводок.КорВалСумма = 0, 0, ТекСтрокаПроводок.Сумма / ТекСтрокаПроводок.КорВалСумма);
		КурсовыеРазницы(Не ЭтоРасход, ТекСтрокаПроводок.КорСчет, ТекСтрокаПроводок.КорСубконто2, ТекСтрокаПроводок.Валюта, ТекСтрокаПроводок.КорВалСумма, КорКурс);	
	КонецЦикла;
	
	сабОперОбщегоНазначения.РаспределитьПроводкиПоДокументамОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведенияДокумента);
	
КонецПроцедуры

Процедура ПроводкаПоУмолчанию(ЭтоРасход, ТекСтрока, ЭтоЗваимозачет)
	
	КорСчетВалютный = ТекСтрока.КорСчет.Валютный;
	ВалютнаяПроводка = НЕ Предприятие.ОсновнаяВалютаУчета = Валюта1;
	КорСчетДенежный = ТекСтрока.КорСчет.ДенежныйСчет И КорСчетВалютный;
	ДоговорВалютный = ТипЗнч(ТекСтрока.КорСубконто2) = Тип("СправочникСсылка.ДоговорыКонтрагентов") И ЗначениеЗаполнено(ТекСтрока.КорСубконто2.ВалютаДоговора) И НЕ Валюта1 = ТекСтрока.КорСубконто2.ВалютаДоговора
						Или КорСчетДенежный;

	НоваяСтрокаРегистраБух(Движения,
	Дата, 								//дата
	Предприятие, 							//предприятие
	Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина), 	//сценарий
	?(ПустаяСтрока(Комментарий), ТекСтрока.Содержание, Комментарий + "
	|" + ТекСтрока.Содержание) +  ?(ЗначениеЗаполнено(Контрагент), "
	|" + Контрагент, ""),
	Счет, 							//счетДт
	?(ЗначениеЗаполнено(ТекСтрока.ФинСтатья), ТекСтрока.ФинСтатья, Субконто1), 						//СубконтоДт1
	?(ЭтоЗваимозачет И ТипЗнч(ТекСтрока.КорСубконто1) = Тип("СправочникСсылка.Предприятия"), ТекСтрока.КорСубконто1, Субконто2), 						//СубконтоДт2
	?(ЭтоЗваимозачет И ТипЗнч(ТекСтрока.КорСубконто1) = Тип("СправочникСсылка.Предприятия"), Неопределено, ТекСтрока.КлючАналитикиБюджета), 						//СубконтоДт3
	?(ЗначениеЗаполнено(ТекСтрока.ФинПодразделение), ТекСтрока.ФинПодразделение, Подразделение), 									//ПодразделениеДт
	, 									//КоличествоДт
	Валюта1, 							//ВалютаДт
	ТекСтрока.ВалСумма, 					//ВалСуммаДт
	ТекСтрока.КорСчет,						//счетКт
	ТекСтрока.КорСубконто1,				//СубконтоКт1	
	ТекСтрока.КорСубконто2,				//СубконтоКт2
	ТекСтрока.КорСубконто3,				//СубконтоКт3
	ТекСтрока.Подразделение,			//ПодразделениеКт
	ТекСтрока.Количество,									//КоличествоДт
	?(Предприятие.ОсновнаяВалютаУчета = Валюта1, ?(ДоговорВалютный, ТекСтрока.Валюта, Неопределено), ?(ДоговорВалютный, ТекСтрока.Валюта, Валюта1)),								//ВалютаКт
	?(Предприятие.ОсновнаяВалютаУчета = Валюта1, ?(ДоговорВалютный, ТекСтрока.КорВалСумма, 0), ?(ДоговорВалютный, ТекСтрока.КорВалСумма, ТекСтрока.ВалСумма)),                                   //ВалСуммаКт
	ТекСтрока.Сумма,                     //Сумма
	НЕ ЭтоРасход,
	ТекСтрока.ФинЦФО,
	ТекСтрока.ФинПодразделение);			//СчетДт = СчетДт (приход)

	

КонецПроцедуры


Процедура ПроводкаПоУмолчанию79(ЭтоРасход, ТекСтрока, ЭтоЗваимозачет)
	
	НоваяСтрокаРегистраБух(Движения,
	Дата, 								//дата
	Предприятие, 							//предприятие
	Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина), 	//сценарий
	?(ПустаяСтрока(Комментарий), ТекСтрока.Содержание, Комментарий + "
	|" + ТекСтрока.Содержание),
	ТекСтрока.КорСчет791, 							//счетДт
	ТекСтрока.КорСубконто791, 						//СубконтоДт1
	ТекСтрока.КорСубконто792, 						//СубконтоДт2
	ТекСтрока.КорСубконто793, 						//СубконтоДт3
	Подразделение, 									//ПодразделениеДт
	, 									//КоличествоДт
	Валюта1, 							//ВалютаДт
	ТекСтрока.ВалСумма, 					//ВалСуммаДт
	ТекСтрока.КорСчет,						//счетКт
	ТекСтрока.КорСубконто1,				//СубконтоКт1	
	ТекСтрока.КорСубконто2,				//СубконтоКт2
	ТекСтрока.КорСубконто3,				//СубконтоКт3
	ТекСтрока.Подразделение,			//ПодразделениеКт
	ТекСтрока.Количество,									//КоличествоДт
	ТекСтрока.Валюта,									//ВалютаКт
	ТекСтрока.КорВалСумма,                                   //ВалСуммаКт
	ТекСтрока.Сумма,                     //Сумма
	НЕ ЭтоРасход,
	ТекСтрока.ФинЦФО,
	ТекСтрока.ФинПодразделение);			//СчетДт = СчетДт (приход)

	

КонецПроцедуры

Процедура ПроводкаТранзит79_55(ЭтоРасход, ТекСтрока, СчетКазна)
	
	НоваяСтрокаРегистраБух(Движения,
	Дата, 								//дата
	Предприятие, 							//предприятие
	Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина), 	//сценарий
	?(ПустаяСтрока(Комментарий), ТекСтрока.Содержание, Комментарий + "
	|" + ТекСтрока.Содержание),
	ТекСтрока.КорСчет, 							//счетДт
	ТекСтрока.КорСубконто1, 						//СубконтоДт1
	ТекСтрока.КорСубконто2, 						//СубконтоДт2
	ТекСтрока.КорСубконто3, 						//СубконтоДт3
	Подразделение, 									//ПодразделениеДт
	, 									//КоличествоДт
	Валюта1, 							//ВалютаДт
	ТекСтрока.ВалСумма, 					//ВалСуммаДт
	СчетКазна,						//счетКт
	?(НЕ ЭтоРасход, Предприятие.УчетнаяПолитика.РасходыНеОтносящиесяКПредприятию, Предприятие.УчетнаяПолитика.ДоходыНеОтносящиесяКПредприятию),				//СубконтоКт1	
	ТекСтрока.КорСубконто1,				//СубконтоКт2
	,				//СубконтоКт3
	ТекСтрока.Подразделение,			//ПодразделениеКт
	ТекСтрока.Количество,									//КоличествоДт
	ТекСтрока.Валюта,									//ВалютаКт
	ТекСтрока.КорВалСумма,                                   //ВалСуммаКт
	ТекСтрока.Сумма,                     //Сумма
	НЕ ЭтоРасход,
	ТекСтрока.ФинЦФО,
	ТекСтрока.ФинПодразделение);			//СчетДт = СчетДт (приход)

КонецПроцедуры

Процедура ПроводкаТранзит79_55_79(ЭтоРасход, ТекСтрока, СчетКазна)
	
	НоваяСтрокаРегистраБух(Движения,
	Дата, 								//дата
	Предприятие, 							//предприятие
	Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина), 	//сценарий
	?(ПустаяСтрока(Комментарий), ТекСтрока.Содержание, Комментарий + "
	|" + ТекСтрока.Содержание),
	ТекСтрока.КорСчет791, 							//счетДт
	ТекСтрока.КорСубконто791, 						//СубконтоДт1
	ТекСтрока.КорСубконто792, 						//СубконтоДт2
	ТекСтрока.КорСубконто793, 						//СубконтоДт3
	Подразделение, 									//ПодразделениеДт
	, 									//КоличествоДт
	Валюта1, 							//ВалютаДт
	ТекСтрока.ВалСумма, 					//ВалСуммаДт
	СчетКазна,						//счетКт
	?(ЭтоРасход, Предприятие.УчетнаяПолитика.РасходыНеОтносящиесяКПредприятию, Предприятие.УчетнаяПолитика.ДоходыНеОтносящиесяКПредприятию),				//СубконтоКт1	
	ТекСтрока.КорСубконто791,				//СубконтоКт2
	,				//СубконтоКт3
	ТекСтрока.Подразделение,			//ПодразделениеКт
	ТекСтрока.Количество,									//КоличествоДт
	ТекСтрока.Валюта,									//ВалютаКт
	ТекСтрока.КорВалСумма,                                   //ВалСуммаКт
	ТекСтрока.Сумма,                     //Сумма
	ЭтоРасход,
	ТекСтрока.ФинЦФО,
	ТекСтрока.ФинПодразделение);			//СчетДт = СчетДт (приход)

КонецПроцедуры

Процедура ПроводкаУслуги(ЭтоРасход, ТекСтрока)

	НоваяСтрокаРегистраБух(Движения,
	Дата, 								//дата
	Предприятие, 							//предприятие
	Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина), 	//сценарий
	?(ПустаяСтрока(Комментарий), ТекСтрока.Содержание, Комментарий + "
	|Услуги комиссия"),
	ТекСтрока.КорСчетУслуг, 							//счетДт
	ТекСтрока.КорСубконтоУслуг1, 						//СубконтоДт1
	ТекСтрока.КорСубконтоУслуг2, 						//СубконтоДт2
	ТекСтрока.КорСубконтоУслуг3, 						//СубконтоДт3
	Подразделение, 									//ПодразделениеДт
	, 									//КоличествоДт
	, 							//ВалютаДт
	, 					//ВалСуммаДт
	ТекСтрока.КорСчет,						//счетКт
	ТекСтрока.КорСубконто1,				//СубконтоКт1	
	ТекСтрока.КорСубконто2,				//СубконтоКт2
	ТекСтрока.КорСубконто3,				//СубконтоКт3
	Подразделение,			//ПодразделениеКт
	,									//КоличествоДт
	,									//ВалютаКт
	,                                   //ВалСуммаКт
	ТекСтрока.СуммаУслуг,                     //Сумма
	НЕ ЭтоРасход,
	ТекСтрока.ФинЦФО,
	ТекСтрока.ФинПодразделение);			//СчетДт = СчетДт (приход)

КонецПроцедуры
 
Процедура ПроводкаРаспределениеЗП(ЭтоРасход, ТекСтрока, ТекСтрокаДока)
	
	НоваяСтрокаРегистраБух(Движения,
	Дата, 								//дата
	Предприятие, 							//предприятие
	Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина), 	//сценарий
	?(ПустаяСтрока(Комментарий), Содержание, Комментарий + "
	|" + Содержание),
	Счет, 							//счетДт
	?(ПустаяСтрока(ТекСтрока.ФинСтатья), Субконто1, ТекСтрока.ФинСтатья), 						//СубконтоДт1
	?(ЗначениеЗаполнено(ДокОснование2), ДокОснование2.Предприятие, Субконто2), 						//СубконтоДт2
	?(ЗначениеЗаполнено(ДокОснование2), ДокОснование2.Подразделение, Субконто3), 						//СубконтоДт3
	Подразделение, 									//ПодразделениеДт
	, 									//КоличествоДт
	Валюта1, 							//ВалютаДт
	ТекСтрока.ВалСумма, 					//ВалСуммаДт
	ТекСтрока.КорСчет,						//счетКт
	ТекСтрокаДока.Сотрудник,				//СубконтоКт1	
	ТекСтрокаДока.ВидНачисления,				//СубконтоКт2
	ТекСтрока.КорСубконто3,				//СубконтоКт3
	ТекСтрока.Подразделение,			//ПодразделениеКт
	ТекСтрока.Количество,									//КоличествоДт
	ТекСтрока.Валюта,									//ВалютаКт
	ТекСтрока.КорВалСумма,                                   //ВалСуммаКт
	ТекСтрокаДока.Сумма,                     //Сумма
	НЕ ЭтоРасход,
	ТекСтрока.ФинЦФО,
	ТекСтрока.ФинПодразделение);			//СчетДт = СчетДт (приход)	
	

КонецПроцедуры

Процедура ПроводкаПоКазне(ЭтоРасход, ТекСтрока, ПредприятиеКазна)
	
	НоваяСтрокаРегистраБух(Движения,
	Дата, 								//дата (поговорили с Валей) //дату беремиз дока
	ПредприятиеКазна, 							//предприятие
	Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина), 	//сценарий
	"(перевод в казне) " + ?(ПустаяСтрока(Комментарий), ТекСтрока.Содержание, Комментарий + "
	|" + ТекСтрока.Содержание),
	ПланыСчетов.Учетный.НайтиПоКоду("55.01"), 							//счетДт
	, 						//СубконтоДт1
	Предприятие, 						//СубконтоДт2
	, 						//СубконтоДт3
	, 									//ПодразделениеДт
	, 									//КоличествоДт
	, 							//ВалютаДт
	, 					//ВалСуммаДт
	ПланыСчетов.Учетный.НайтиПоКоду("55.01"),						//счетКт
	,				//СубконтоКт1	
	ТекСтрока.КорСубконто1,				//СубконтоКт2 //добавил д1 16.06.16
	,				//СубконтоКт3
	,			//ПодразделениеКт
	,									//КоличествоДт
	,									//ВалютаКт
	,                                   //ВалСуммаКт
	ТекСтрока.Сумма,                     //Сумма
	НЕ ЭтоРасход И НЕ Счет = ПланыСчетов.Учетный.НайтиПоКоду("55.01"),
	ПредприятиеКазна,
	ПредприятиеКазна.ВидДеятельности);			//СчетДт = СчетДт (приход)						


КонецПроцедуры
 
Процедура ПроводкаПоСтороннемуПредприятию(ЭтоРасход, ТекСтрока, СчетКазна)

	НоваяСтрокаРегистраБух(Движения,
	Дата, 								//дата
	ТекСтрока.ФинЦФО, 							//предприятие
	Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина), 	//сценарий
	?(ПустаяСтрока(Комментарий), ТекСтрока.Содержание, Комментарий + "
	|" + ТекСтрока.Содержание),
	СчетКазна, 							//счетДт
	?(ПустаяСтрока(ТекСтрока.ФинСтатья), Субконто1, ТекСтрока.ФинСтатья), 						//СубконтоДт1
	Предприятие, 						//СубконтоДт2
	Подразделение, 						//СубконтоДт3
	ТекСтрока.ФинПодразделение, 									//ПодразделениеДт
	, 									//КоличествоДт
	Валюта1, 							//ВалютаДт
	ТекСтрока.ВалСумма, 					//ВалСуммаДт
	ТекСтрока.КорСчет,						//счетКт
	ТекСтрока.КорСубконто1,				//СубконтоКт1	
	ТекСтрока.КорСубконто2,				//СубконтоКт2
	ТекСтрока.КорСубконто3,				//СубконтоКт3
	ТекСтрока.ФинПодразделение,			//ПодразделениеКт
	ТекСтрока.Количество,									//КоличествоДт
	ТекСтрока.Валюта,									//ВалютаКт
	ТекСтрока.КорВалСумма,                                   //ВалСуммаКт
	ТекСтрока.Сумма,                     //Сумма
	НЕ ЭтоРасход,
	ТекСтрока.ФинЦФО,
	ТекСтрока.ФинПодразделение);			//СчетДт = СчетДт (приход)
	
КонецПроцедуры

Процедура ПроводкаПоУмолчанию55(ЭтоРасход, ТекСтрока, ЭтоЗваимозачет, СчетКазна)
	
	СтатьяДохода = ?(ЭтоРасход, Предприятие.УчетнаяПолитика.ДоходыНеОтносящиесяКПредприятию, Предприятие.УчетнаяПолитика.РасходыНеОтносящиесяКПредприятию);
	СтатьяРасхода = ?(ЭтоРасход, Предприятие.УчетнаяПолитика.РасходыНеОтносящиесяКПредприятию, Предприятие.УчетнаяПолитика.ДоходыНеОтносящиесяКПредприятию);
	ЭтоСчетКазна = СчетКазна = ПланыСчетов.Учетный.НайтиПоКоду("55.01");
	
	НоваяСтрокаРегистраБух(Движения,
	Дата, 								//дата
	Предприятие, 							//предприятие
	Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина), 	//сценарий
	?(ПустаяСтрока(Комментарий), ТекСтрока.Содержание, Комментарий + "
	|" + ТекСтрока.Содержание) + " (взаимозачет)",
	Счет, 							//счетДт
	СтатьяРасхода, 						//СубконтоДт1
	?(ЭтоЗваимозачет, ТекСтрока.КорСубконто1, Субконто2), 						//СубконтоДт2
	?(ЭтоЗваимозачет, Неопределено, Субконто3), 						//СубконтоДт3
	Подразделение, 									//ПодразделениеДт
	, 									//КоличествоДт
	Валюта1, 							//ВалютаДт
	ТекСтрока.ВалСумма, 					//ВалСуммаДт
	СчетКазна,						//счетКт
	?(ЭтоСчетКазна, СтатьяДохода, ТекСтрока.ФинЦФО),				//СубконтоКт1
	?(ЭтоСчетКазна, ТекСтрока.ФинЦФО, ТекСтрока.КорСубконто2),				//СубконтоКт2
	?(ЭтоСчетКазна, ?(ТекСтрока.ФинЦФО.УчетПоПодразделениям, ТекСтрока.ФинПодразделение, ТекСтрока.ФинЦФО.ВидДеятельности), ТекСтрока.Подразделение),				//СубконтоКт3
	Подразделение,			//ПодразделениеКт
	ТекСтрока.Количество,									//КоличествоДт
	ТекСтрока.Валюта,									//ВалютаКт
	ТекСтрока.ВалСумма,                                   //ВалСуммаКт
	ТекСтрока.Сумма,                     //Сумма
	НЕ ЭтоРасход,
	Предприятие,
	Подразделение);			//СчетДт = СчетДт (приход)

КонецПроцедуры

#КонецОбласти 

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	//проверка на обработанность //д1 26.05.16
	//Если ЗначениеЗаполнено(ДокОснование) Тогда
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = "ВЫБРАТЬ
	//	               |	УЧ_ДвижениеДСПроводки.Ссылка КАК Ссылка
	//	               |ИЗ
	//	               |	Документ.УЧ_ДвижениеДС.Проводки КАК УЧ_ДвижениеДСПроводки
	//	               |ГДЕ
	//	               |	УЧ_ДвижениеДСПроводки.ГУИДСтроки = &ГУИДОснования
	//	               |	И УЧ_ДвижениеДСПроводки.Ссылка.ДокОснование = &ДокОснование
	//	               |	И (УЧ_ДвижениеДСПроводки.Ссылка.Субконто2 = &Источник
	//	               |			ИЛИ УЧ_ДвижениеДСПроводки.Ссылка.Источник2 = &Источник)
	//	               |	И УЧ_ДвижениеДСПроводки.Ссылка.ПометкаУдаления = ЛОЖЬ
	//	               |	И УЧ_ДвижениеДСПроводки.Ссылка.Предприятие = &Предприятие
	//	               |	И УЧ_ДвижениеДСПроводки.Ссылка.ВидОперации = УЧ_ДвижениеДСПроводки.Ссылка.ДокОснование.ВидОперации";
	//	
	//	Запрос.УстановитьПараметр("ДокОснование", ДокОснование);
	//	Запрос.УстановитьПараметр("ГУИДОснования", ГУИДОснования);
	//	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	//	Запрос.УстановитьПараметр("Источник", Источник2);
	//	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	//	
	//	Результат = Запрос.Выполнить();
	//	Выборка = Результат.Выбрать();
	//	
	//	Если ?(ЗначениеЗаполнено(Ссылка), Выборка.Количество() > 1, Выборка.Количество()) Тогда
	//		сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(
	//		ЭтотОбъект,
	//		"На основании документа уже существуют Движения ДС! Запись невозможна!",
	//		,
	//		,
	//		"ДокОснование",
	//		Отказ);
	//	КонецЕсли;
	//КонецЕсли;
	// конец проверки д1
	
	
	Если ВидОперации = Перечисления.ВидыОперацийДвиженияДС.Взаимозачет Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Субконто2"));	
	КонецЕсли;
	
	Если НЕ ПриходРасход = Перечисления.ВидыОперацийПлатежноеПоручение.ПоступленияПоЭквайрингу Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Проводки.КорСчетУслуг"));	
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(ДокОснование) И ТипЗнч(ДокОснование) = Тип("ДокументСсылка.УЧ_ДвижениеДС") Тогда		
	//	СтрокаДокументаОснования = ДокОснование.Проводки.Найти(ГУИДОснования, "ГУИДСтроки");
	//	
	//	Если Не СтрокаДокументаОснования = Неопределено Тогда
	//		СуммаОснования = СтрокаДокументаОснования.Сумма;
	//	КонецЕсли;
	//	
	//	Если Не Проводки.Итог("Сумма") = СуммаОснования Тогда
	//		сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(ЭтотОбъект,
	//		"Сумма в расшифровке не соответствует сумме документа-основания.",
	//		"Проводки",
	//		Проводки.Количество(),
	//		"Сумма",
	//		Отказ);
	//	КонецЕсли;
	//	
	//КонецЕсли;

	//Если ЗначениеЗаполнено(ДокОснование) И ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
	//	
	//	ТекСумма = Проводки.Итог("Сумма");
	//	
	//	Если Не Предприятие.ОсновнаяВалютаУчета = Валюта1 И ЗначениеЗаполнено(Предприятие.ОсновнаяВалютаУчета) И ЗначениеЗаполнено(Валюта1) Тогда
	//		ТекСумма = Проводки.Итог("ВалСумма");
	//	КонецЕсли;
	//	
	//	СуммаОснования = ДокОснование.СуммаДокумента;
	//	ПредприятиеИсточникаПП = ПП_Сервер.ПолучитьПредприятие(?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата()), ДокОснование.СчетОрганизации);
	//	ВалютаИсточникаОснования = ?(ЗначениеЗаполнено(ПредприятиеИсточникаПП.ОсновнаяВалютаУчета), ПредприятиеИсточникаПП.ОсновнаяВалютаУчета, УЧ_Сервер.НациональнаяВалюта());
	//	
	//	Если Не ДокОснование.СчетОрганизации.ВалютаДенежныхСредств = ВалютаИсточникаОснования Тогда
	//		СуммаОснования = ДокОснование.СуммаВВалютеПлательщика;
	//	КонецЕсли;
	//	
	//	Если НЕ ТекСумма = СуммаОснования Тогда
	//		сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(ЭтотОбъект,
	//		"Сумма в расшифровке не соответствует сумме документа-основания.",
	//		"Проводки",
	//		Проводки.Количество(),
	//		"Сумма",
	//		Отказ);
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
КонецПроцедуры

Функция ПодобратьСчет(ДанныеЗаполненияСсылка, ВыборкаЗапроса, Предприятие)
	
	//добавил помощника при выборе корсчета
	МассивСчетов = Новый Массив;
	Если НЕ ПП_Сервер.ЭтоРасходнаяОперация(ПриходРасход) Тогда
		МассивСчетов.Добавить(ПланыСчетов.Учетный.НайтиПоКоду("62"));
		ТекКонтрагент = ?(ВыборкаЗапроса = Неопределено, Контрагент, ВыборкаЗапроса.Организация);
	Иначе
		МассивСчетов.Добавить(ПланыСчетов.Учетный.НайтиПоКоду("60"));
		МассивСчетов.Добавить(ПланыСчетов.Учетный.НайтиПоКоду("76"));
		ТекКонтрагент = ?(ВыборкаЗапроса = Неопределено, Контрагент, ВыборкаЗапроса.Контрагент);
	КонецЕсли;
	
	Если НЕ ВыборкаЗапроса = Неопределено И ЗначениеЗаполнено(ВыборкаЗапроса.Договор) И ВыборкаЗапроса.Договор.Предприятие = Предприятие Тогда
		ДанныеДоговора = БюджетныйНаСервере.ВернутьРеквизиты(ВыборкаЗапроса.Договор, "Владелец, СчетВзаиморасчетов, СтатьяДДС, ВидДоговора, СтатьяДДС.СчетУчета, СтатьяДДС.СтатьяЗатрат"); 
		Если НЕ ДанныеДоговора = Неопределено И ЗначениеЗаполнено(ДанныеДоговора.СчетВзаиморасчетов) Тогда 
			ПомощьВВыбореСчета = Новый Структура;
			Если ЗначениеЗаполнено(ДанныеДоговора.СтатьяДДССчетУчета) И ДанныеДоговора.СтатьяДДССчетУчета = ПланыСчетов.Учетный.НайтиПоКоду("25") Тогда //приоритет корсчета в СтатьеДДС
				ПомощьВВыбореСчета.Вставить("КорСчет", ДанныеДоговора.СтатьяДДССчетУчета); 
				ПомощьВВыбореСчета.Вставить("КорСубконто1", ДанныеДоговора.СтатьяДДССтатьяЗатрат); 
			Иначе	
				ПомощьВВыбореСчета.Вставить("КорСчет", ДанныеДоговора.СчетВзаиморасчетов); 
				ПомощьВВыбореСчета.Вставить("КорСубконто1", ДанныеДоговора.Владелец);
				ПомощьВВыбореСчета.Вставить("КорСубконто2", ВыборкаЗапроса.Договор);
			КонецЕсли;
			Если ТипЗнч(ДанныеЗаполненияСсылка) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда //для ПП
				ПомощьВВыбореСчета.Вставить("ФинСтатья", ДанныеДоговора.СтатьяДДС);
			ИначеЕсли Не ЗначениеЗаполнено(ДанныеЗаполненияСсылка.СтатьяДДС) Тогда // для прочих источников данных
				ПомощьВВыбореСчета.Вставить("ФинСтатья", ДанныеДоговора.СтатьяДДС);
			КонецЕсли;
			Возврат ПомощьВВыбореСчета; // возвращаем сразу
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетныйОстатки.Счет,
	|	УчетныйОстатки.Субконто1,
	|	УчетныйОстатки.Субконто2,
	|	УчетныйОстатки.Субконто3
	|ИЗ
	|	РегистрБухгалтерии.Учетный.Остатки(
	|			&ДатаКон,
	|			Счет В ИЕРАРХИИ (&Счета),
	|			,
	|			Субконто1 = &Контрагент
	|				И Предприятия В (&Предприятия)) КАК УчетныйОстатки";
	//Запрос.УстановитьПараметр("Дата1", ДобавитьМесяц(ТекущаяДата(), -3));
	Запрос.УстановитьПараметр("Счета", МассивСчетов);
	Запрос.УстановитьПараметр("ДатаКон", ТекущаяДата());
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Предприятия", Предприятие);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	СтруктураВозврата = Новый Структура;
	
	//УсловноБезСуммы = Истина;
	Пока Выборка.Следующий() Цикл
		//Если УсловноБезСуммы ИЛИ Выборка.СуммаКонечныйОстаток Тогда
		СтруктураВозврата.Вставить("КорСчет", Выборка.Счет); 
		СтруктураВозврата.Вставить("КорСубконто1", Выборка.Субконто1);
		СтруктураВозврата.Вставить("КорСубконто2", ?(НЕ ВыборкаЗапроса = Неопределено И ЗначениеЗаполнено(ВыборкаЗапроса.Договор) И ВыборкаЗапроса.Договор.Предприятие = Предприятие, ВыборкаЗапроса.Договор, Выборка.Субконто2));
		СтруктураВозврата.Вставить("КорСубконто3", Выборка.Субконто3);
		//УсловноБезСуммы = Ложь;
		//КонецЕсли;
		Возврат СтруктураВозврата;
	КонецЦикла;
	
	УчетнаяПолитикаЗнач = Предприятие.УчетнаяПолитика;
	Если ЗначениеЗаполнено(УчетнаяПолитикаЗнач) Тогда
		//УчетнаяПолитикаЗнач = Справочники.УчетныеПолитики.Общая;
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("КорСчет", УчетнаяПолитикаЗнач.КорСчетПоУмолчанию); 
		СтруктураВозврата.Вставить("КорСубконто1", Контрагент);
		СтруктураВозврата.Вставить("КорСубконто2", ?(НЕ ВыборкаЗапроса = Неопределено, ?(ЗначениеЗаполнено(ВыборкаЗапроса.Договор) И ВыборкаЗапроса.Договор.Предприятие = Предприятие, ВыборкаЗапроса.Договор, Неопределено), Неопределено));
		Возврат СтруктураВозврата;
	КонецЕсли;
	//СтруктураВозврата.Вставить("КорСубконто2", Выборка.Субконто2);
	//СтруктураВозврата.Вставить("КорСубконто3", Выборка.Субконто3);

	Возврат Неопределено;
	
КонецФункции // ()

Функция ТекстЗапросаПоПлатежке()
	
	Возврат "ВЫБРАТЬ
	        |	ПлатежноеПоручение.НазначениеПлатежа КАК НазначениеПлатежа,
	        |	ПлатежноеПоручение.Комментарий КАК Комментарий,
	        |	ПлатежноеПоручение.Подразделение КАК Подразделение,
	        |	ПлатежноеПоручение.СуммаДокумента КАК СуммаДокумента,
	        |	ПлатежноеПоручение.Дата КАК Дата,
	        |	ВЫБОР
	        |		КОГДА ПлатежноеПоручение.СчетОрганизации = &Источник
	        |			ТОГДА ПлатежноеПоручение.СчетОрганизации
	        |		ИНАЧЕ ПлатежноеПоручение.СчетКонтрагента
	        |	КОНЕЦ КАК БанковскийСчетИсточник,
	        |	ВЫБОР
	        |		КОГДА ПлатежноеПоручение.СчетОрганизации = &Источник
	        |			ТОГДА ПлатежноеПоручение.Контрагент
	        |		ИНАЧЕ ПлатежноеПоручение.Организация
	        |	КОНЕЦ КАК Контрагент,
	        |	ВЫБОР
	        |		КОГДА ПлатежноеПоручение.СчетОрганизации = &Источник
	        |			ТОГДА ПлатежноеПоручение.СчетОрганизации.ВидСчета
	        |		ИНАЧЕ ПлатежноеПоручение.СчетКонтрагента.ВидСчета
	        |	КОНЕЦ КАК ВидИсточникаБанкоскийСчет,
	        |	ПлатежноеПоручение.СуммаДокумента КАК СуммаВВалютеПлательщика,
	        |	ВЫБОР
	        |		КОГДА ПлатежноеПоручение.СчетОрганизации = &Источник
	        |			ТОГДА ПлатежноеПоручение.СчетОрганизации.ВалютаДенежныхСредств
	        |		ИНАЧЕ ПлатежноеПоручение.СчетКонтрагента.ВалютаДенежныхСредств
	        |	КОНЕЦ КАК БанковскийСчетВалюта,
	        |	ВЫБОР
	        |		КОГДА ПлатежноеПоручение.СчетОрганизации = &Источник
	        |			ТОГДА ПлатежноеПоручение.Организация
	        |		ИНАЧЕ ПлатежноеПоручение.Контрагент
	        |	КОНЕЦ КАК Организация,
	        |	ВЫБОР
	        |		КОГДА ПлатежноеПоручение.СчетОрганизации = &Источник
	        |			ТОГДА ПлатежноеПоручение.СчетКонтрагента
	        |		ИНАЧЕ ПлатежноеПоручение.СчетОрганизации
	        |	КОНЕЦ КАК СчетКонтрагентаИсточник,
	        |	ВЫБОР
	        |		КОГДА ПлатежноеПоручение.СчетОрганизации = &Источник
	        |			ТОГДА ПлатежноеПоручение.СчетКонтрагента.ВидСчета
	        |		ИНАЧЕ ПлатежноеПоручение.СчетОрганизации.ВидСчета
	        |	КОНЕЦ КАК ВидИсточникаСчетКонтрагента,
	        |	ВЫБОР
	        |		КОГДА ПлатежноеПоручение.СчетОрганизации = &Источник
	        |			ТОГДА ПлатежноеПоручение.СчетКонтрагента.ВалютаДенежныхСредств
	        |		ИНАЧЕ ПлатежноеПоручение.СчетОрганизации.ВалютаДенежныхСредств
	        |	КОНЕЦ КАК СчетКонтрагентаВалюта,
	        |	ПлатежноеПоручение.СуммаДокумента КАК СуммаВВалютеПолучателя,
	        |	ПлатежноеПоручение.Предприятие КАК Предприятие,
	        |	ПлатежноеПоручение.СуммаДокумента КАК ВалютнаяСумма,
	        |	ВЫБОР
	        |		КОГДА ПлатежноеПоручение.СчетОрганизации = &Источник
	        |			ТОГДА ПлатежноеПоручение.ВидОперации
	        |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ)
	        |	КОНЕЦ КАК ВидОперации,
	        |	ВЫБОР
	        |		КОГДА ПлатежноеПоручение.СчетОрганизации = &Источник
	        |			ТОГДА ПлатежноеПоручение.СчетОрганизации
	        |		ИНАЧЕ ПлатежноеПоручение.СчетКонтрагента
	        |	КОНЕЦ КАК БанковскийСчет,
	        |	ВЫБОР
	        |		КОГДА ПлатежноеПоручение.СчетОрганизации = &Источник
	        |			ТОГДА ПлатежноеПоручение.СчетКонтрагента
	        |		ИНАЧЕ ПлатежноеПоручение.СчетОрганизации
	        |	КОНЕЦ КАК СчетКонтрагента,
	        |	Д_ИсточникППСрезПоследних.Предприятие КАК БанковскийСчетПредприятие,
	        |	Д_ИсточникППСрезПоследних1.Предприятие КАК СчетКонтрагентаПредприятие,
	        |	ПлатежноеПоручение.ДоговорКонтрагента КАК Договор
	        |ИЗ
	        |	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Д_ИсточникПП.СрезПоследних КАК Д_ИсточникППСрезПоследних
	        |		ПО (ВЫБОР
	        |				КОГДА ПлатежноеПоручение.СчетОрганизации = &Источник
	        |					ТОГДА ПлатежноеПоручение.СчетОрганизации
	        |				ИНАЧЕ ПлатежноеПоручение.СчетКонтрагента
	        |			КОНЕЦ = Д_ИсточникППСрезПоследних.БанковскиеСчета)
	        |			И ПлатежноеПоручение.Дата >= Д_ИсточникППСрезПоследних.Период
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Д_ИсточникПП.СрезПоследних КАК Д_ИсточникППСрезПоследних1
	        |		ПО (ВЫБОР
	        |				КОГДА ПлатежноеПоручение.СчетОрганизации = &Источник
	        |					ТОГДА ПлатежноеПоручение.СчетКонтрагента
	        |				ИНАЧЕ ПлатежноеПоручение.СчетОрганизации
	        |			КОНЕЦ = Д_ИсточникППСрезПоследних1.БанковскиеСчета)
	        |			И ПлатежноеПоручение.Дата >= Д_ИсточникППСрезПоследних1.Период
	        |ГДЕ
	        |	ПлатежноеПоручение.Ссылка = &Ссылка"	
	
КонецФункции // ()

Процедура ПриКопировании(ОбъектКопирования)
	Источник2 = "";
	ДокОснование = "";
	ДокОснование2 = "";
	Для каждого ТекСтрока Из Проводки Цикл
		//ТекСтрока.ФинПодразделение = "";
		//ТекСтрока.ФинСтатья = "";
		//ТекСтрока.ФинЦФО = "";
		ТекСтрока.ОснованиеВНХ = "";
		ТекСтрока.НомерСтрокиОснованиеВНХ = 0;
	КонецЦикла;
	//Видимость79 = Ложь;
	//Субконто1 = "";
	Автор = Неопределено;
	//ИсторияДокумента.Очистить();
	СинхронизироватьДатыПереводов = Ложь;
	РучнаяКорректировка = Ложь;
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	//НаборПроводок = РегистрыБухгалтерии.Учетный.СоздатьНаборЗаписей();
	//НаборПроводок.Отбор.Регистратор.Установить(Ссылка);
	//НаборПроводок.Прочитать();
	//УстановитьПривилегированныйРежим(Ложь);
	
	// закомментированно 31.05.16 {
	//ЕстьПроводки = НаборПроводок.Количество();
	//ПодчиненныйДокумент = ?(ЕстьПроводки, Ссылка, Документы.УЧ_ДвижениеДС.ПустаяСсылка());
	//}
	
	//Если Не НаборПроводок.Количество() Тогда
	//обновляем регистр казны
	//Если Ссылка.Проведен = Ложь Тогда
	//Если ПравоДоступа("Изменение", Метаданные.РегистрыБухгалтерии.Казна) Тогда
	//	УстановитьПривилегированныйРежим(Истина);
	//	Если ЗначениеЗаполнено(ДокОснование) И НЕ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") И НЕ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ПлатежноеПоручение") И ДокОснование.Предприятие = Константы.сабПредприятиеКазна.Получить() Тогда
	//		НаборЗаписей = РегистрыБухгалтерии.Казна.СоздатьНаборЗаписей();
	//		НаборЗаписей.Отбор.Регистратор.Установить(ДокОснование);
	//		
	//		НаборЗаписей.Прочитать();
	//		//Перезаписывать = ложь;
	//		Для каждого ТекЗапись Из НаборЗаписей Цикл
	//			Если ТекЗапись.ГУИДСтроки = ГУИДОснования Тогда
	//				Если НЕ ПП_Сервер.ЭтоРасходнаяОперация(ПриходРасход) Тогда
	//					Если Субконто2 = сабОбщегоНазначенияПовтИсп.ПолучитьПредопределенныйИсточник() Тогда
	//						ТекЗапись.ПодчиненныйДокументКт = Ссылка;
	//					Иначе
	//						ТекЗапись.ПодчиненныйДокументДт = Ссылка;
	//					КонецЕсли;
	//				Иначе
	//					Если Субконто2 = сабОбщегоНазначенияПовтИсп.ПолучитьПредопределенныйИсточник() Тогда
	//						ТекЗапись.ПодчиненныйДокументДт = Ссылка;
	//					Иначе
	//						ТекЗапись.ПодчиненныйДокументКт = Ссылка;
	//					КонецЕсли;
	//				КонецЕсли;
	//			КонецЕсли;
	//		КонецЦикла;
	//		НаборЗаписей.ДополнительныеСвойства.Вставить("НеПроверятьДатуЗапрета", Истина);
	//		НаборЗаписей.Записать();
	//	КонецЕсли;
	//	УстановитьПривилегированныйРежим(Ложь);
	//КонецЕсли;
	//КонецЕсли;
	//КонецЕсли;
	
	//удаляем связаные записи графика платежей
	Если Проведен Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	сабОбработкаДокументов.ДокументБУ КАК ДокументБУ
		|ИЗ
		|	РегистрСведений.сабОбработкаДокументов КАК сабОбработкаДокументов
		|ГДЕ
		|	сабОбработкаДокументов.ДокументУУ = &ДокументУУ";
		
		Запрос.УстановитьПараметр("ДокументУУ", Ссылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		БухДок = Неопределено;
		ЭтоПоступление = Ложь;
		Пока Выборка.Следующий() Цикл
			БухДок = Выборка.ДокументБУ;		
			ЭтоПоступление = ТипЗнч(Выборка.ДокументБУ) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет");
		КонецЦикла;
		
		Если ЭтоПоступление Тогда
			НаборЗаписей = РегистрыСведений.сабГрафикПлатежей.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Документ.Установить(БухДок.ДокументОснование);
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
			Для каждого ТекСтрока Из БухДок.РасшифровкаПлатежа Цикл
				Если ЗначениеЗаполнено(ТекСтрока.СчетНаОплату) И ТипЗнч(ТекСтрока.СчетНаОплату) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
					НаборЗаписей = РегистрыСведений.сабГрафикПлатежей.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Документ.Установить(ТекСтрока.СчетНаОплату);
					НаборЗаписей.Прочитать();
					НаборЗаписей.Очистить();
					НаборЗаписей.Записать();
				КонецЕсли;
			КонецЦикла;

		ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ПлатежноеПоручение") И ЗначениеЗаполнено(ДокОснование.Заявка) И (ТипЗнч(ДокОснование.Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") ИЛИ ТипЗнч(ДокОснование.Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаФинансирование"))
			ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.Д_ЗаявкаНаФинансирование") Тогда	
			
			Если (ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ПлатежноеПоручение") И ТипЗнч(ДокОснование.Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") И ДокОснование.Заявка.ЗаявкаБезнал.Количество() = 1) 
				ИЛИ (ТипЗнч(ДокОснование) = Тип("ДокументСсылка.Д_ЗаявкаНаФинансирование") И Ложь) Тогда
				НаборЗаписей = РегистрыСведений.сабГрафикПлатежей.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Документ.Установить(?(ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ПлатежноеПоручение"), ДокОснование.Заявка, ДокОснование));
				НаборЗаписей.Прочитать();
				НаборЗаписей.Очистить();
				НаборЗаписей.Записать();
			КонецЕсли;
			
			Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
				ТекДокОсн = ДокОснование.Заявка;
				ТекУИД = ДокОснование.УИДСтроки;
			Иначе	
				ТекДокОсн = ДокОснование;
				ТекУИД = ГУИДОснования;
			КонецЕсли;
			
			МассивУИД = Новый Массив;
			МассивУИД.Добавить(ТекУИД);
			Для Каждого ТекСтрока Из Проводки Цикл
				МассивУИД.Добавить(ТекСтрока.ГУИДСтроки);	
			КонецЦикла;
			
			Для Каждого ТекУИД Из МассивУИД Цикл
				
				Если Не ЗначениеЗаполнено(ТекУИД) Тогда
					Продолжить;
				КонецЕсли;
				
				НаборЗаписей = РегистрыСведений.сабГрафикПлатежей.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Документ.Установить(ТекДокОсн);
				НаборЗаписей.Прочитать();
				НомерСтрокиЗаявки = ТекУИД;
				МассивКУдалению = Новый Массив;
				Для каждого ТекСтрока Из НаборЗаписей Цикл
					Если ТекСтрока.УИДСтрокиДокумента = НомерСтрокиЗаявки Тогда
						МассивКУдалению.Добавить(ТекСтрока);	
					КонецЕсли;
				КонецЦикла;
				Для каждого ТекСтрокаУд Из МассивКУдалению Цикл
					НаборЗаписей.Удалить(ТекСтрокаУд);		
				КонецЦикла; 
				//НаборЗаписей.Очистить();
				НаборЗаписей.Записать();
				
				Если ЗначениеЗаполнено(ТекУИД) Тогда
					НаборЗаписей = РегистрыСведений.сабГрафикПлатежей.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.УИДСтрокиДокумента.Установить(ТекУИД);
					НаборЗаписей.Прочитать();
					МассивКУдалению = Новый Массив;
					Для каждого ТекСтрока Из НаборЗаписей Цикл
						МассивКУдалению.Добавить(ТекСтрока);	
					КонецЦикла;
					Для каждого ТекСтрокаУд Из МассивКУдалению Цикл
						НаборЗаписей.Удалить(ТекСтрокаУд);		
					КонецЦикла; 
					//НаборЗаписей.Очистить();
					НаборЗаписей.Записать();
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		//Акцептование Платежного поручения
		Если ЗначениеЗаполнено(ДокОснование) И ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ПлатежноеПоручение") И НЕ ДокОснование.Акцептован Тогда
			ППОбъект = ДокОснование.ПолучитьОбъект();
			ППОбъект.ОбменДанными.Загрузка = Истина;
			ППОбъект.Акцептован = Истина;
			ППОбъект.Записать();		
		КонецЕсли;
		
		//обновляем дату последнего документа по источнику
		НаборЗаписей = РегистрыСведений.Д_ИсточникПП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.БанковскиеСчета.Установить(Субконто2);
		НаборЗаписей.Прочитать();
		Для каждого ТекЗапись Из НаборЗаписей Цикл
			ТекЗапись.ДатаПоследнегоДокумента = МАКС(ТекЗапись.ДатаПоследнегоДокумента, Дата);
		КонецЦикла;
		НаборЗаписей.Записать();
		
	КонецЕсли;

	//оплачено в заявку на оплату
	БПСервер.АкцептоватьЗаявкиНаОплату(Ссылка);

	УстановитьПривилегированныйРежим(Ложь);		
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	РучнаяКорректировка = Ложь;
		
	//Если Константы.УЧ_ВНХМодуль.Получить() И Константы.сабУЧ_ИспользоватьПереводы.Получить() И Проведен Тогда
	//	//проверяем уже созданные
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = "ВЫБРАТЬ
	//	|	*
	//	|ИЗ
	//	|	Документ.КЗ_Перевод КАК КЗ_Перевод
	//	|ГДЕ
	//	|	КЗ_Перевод.ДокОснование = &ДокОснование
	//	|	И КЗ_Перевод.ПометкаУдаления = ЛОЖЬ";
	//	
	//	Запрос.УстановитьПараметр("ДокОснование", Ссылка);
	//	
	//	Результат = Запрос.Выполнить();
	//	Выборка = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	//	
	//	НачатьТранзакцию();
	//	Для каждого ТекСтрока Из Выборка Цикл
	//		ТекДокОб = ТекСтрока.ПолучитьОбъект();
	//		ТекДокОб.УстановитьПометкуУдаления(Истина);
	//		Сообщить("Документ " + Строка(ТекСтрока) + " помечен на удаление.");
	//	КонецЦикла;
	//	ЗафиксироватьТранзакцию();
	//	
	//КонецЕсли;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	СчетВалютный = Счет.Валютный;
	ТекСодержание = "";
	
	Если Проводки.Количество() Тогда //продублировано с формы
		ТекСтатья = Проводки[0].ФинСтатья;
		СтатьиОдинаковые = Истина;
		
		Для каждого ТекСтрока Из Проводки Цикл
			КорСчетВалютный = ТекСтрока.КорСчет.Валютный;
			
			Если НЕ ТекСтатья = ТекСтрока.ФинСтатья Тогда
				СтатьиОдинаковые = Ложь;			
			КонецЕсли;
			
			Если Не КорСчетВалютный Тогда
				ТекСтрока.КорВалСумма = 0;
				ТекСтрока.Валюта = "";		
			КонецЕсли;
			
			Если ПустаяСтрока(ТекСтрока.Содержание) И ЗначениеЗаполнено(Содержание) Тогда
				ТекСтрока.Содержание = Содержание;
			Иначе
				ТекСодержание = ТекСодержание + ТекСтрока.Содержание + "; ";	
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ТекСтрока.ГУИДСтроки) Тогда
				Текстрока.ГУИДСтроки = Новый УникальныйИдентификатор;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтатьиОдинаковые Тогда
			Субконто1 = ТекСтатья;		
		КонецЕсли;
		
		//Если НЕ РасшифровкаОплаты Тогда
		//	Проводки[0].Сумма = СуммаДокумента;
		//	Проводки[0].ВалСумма = ВалютнаяСумма1;
		//	Проводки[0].Валюта = Валюта1;
		//КонецЕсли;
		
	КонецЕсли;
	
	//Если НЕ ТекСодержание = "" Тогда
	Содержание = Лев(ТекСодержание, СтрДлина(ТекСодержание) - 2);
	//КонецЕсли;
	
	ВалютнаяСумма1 = Проводки.Итог("ВалСумма");
	СуммаДокумента = Проводки.Итог("Сумма");
	
	Если ПустаяСтрока(ВидДвижения) Тогда
		ВидДвижения = "Прямое";
	КонецЕсли;
	
	//УЧ_Сервер.СоздатьЛогИстории(ЭтотОбъект); //для истории документа
	
	Если Не ЗначениеЗаполнено(Ссылка) И НЕ ЗначениеЗаполнено(Автор) Тогда
		Автор = ПараметрыСеанса.ТекущийПользователь;	
	КонецЕсли;
	
	//обновляем курс и сумму документа
	ЭтоРасход = ПП_Сервер.ЭтоРасходнаяОперация(ПриходРасход);
	
	Если СчетВалютный И ВалютнаяСумма1 Тогда
		
		Если НЕ КурсУстановленПользователем И ЭтоРасход Тогда
			СтруктураКурса = УЧ_Сервер.СредневзвешенныйКурсУчет(?(ЗначениеЗаполнено(Ссылка), Ссылка, ?(Дата = Дата('00010101'), ТекущаяДата(), Дата)),Субконто2,Валюта1);
			Курс1 = СтруктураКурса.Курс;
			СуммаДокумента = ?(ВалютнаяСумма1 * Курс1 = 0, СуммаДокумента, ВалютнаяСумма1 * Курс1);
			Для каждого ТекСтрока Из Проводки Цикл
				ТекСтрока.Сумма = ?(ТекСтрока.ВалСумма * Курс1 = 0, ТекСтрока.Сумма, ТекСтрока.ВалСумма * Курс1);		
			КонецЦикла; 
		Иначе
			Курс1 = СуммаДокумента / ВалютнаяСумма1;			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПометкаУдаления Тогда 		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	сабСоответствиеОбъектовИнформационнойБазы.Объект1 КАК Объект1,
		|	сабСоответствиеОбъектовИнформационнойБазы.Объект2 КАК Объект2
		|ИЗ
		|	РегистрСведений.сабСоответствиеОбъектовИнформационнойБазы КАК сабСоответствиеОбъектовИнформационнойБазы
		|ГДЕ
		|	(сабСоответствиеОбъектовИнформационнойБазы.Объект1 = &ТекОбъект
		|			ИЛИ сабСоответствиеОбъектовИнформационнойБазы.Объект2 = &ТекОбъект)";
		
		Запрос.УстановитьПараметр("ТекОбъект", Ссылка);
		
		УстановитьПривилегированныйРежим(Истина);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЗаписьРегистра = РегистрыСведений.сабСоответствиеОбъектовИнформационнойБазы.СоздатьМенеджерЗаписи();
			ЗаписьРегистра.Объект1 = ВыборкаДетальныеЗаписи.Объект1;
			ЗаписьРегистра.Объект2 = ВыборкаДетальныеЗаписи.Объект2;
			ЗаписьРегистра.Удалить();
		КонецЦикла;		
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	//из подписки на событие
	БюджетныйНаСервере.ДокументыПередЗаписьюПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

Функция ЕстьПодчиненныеДоки(НомерСтроки)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КЗ_Перевод.Ссылка
	|ИЗ
	|	Документ.КЗ_Перевод КАК КЗ_Перевод
	|ГДЕ
	|	(КЗ_Перевод.ДокОснование = &ДокОснование
	|			ИЛИ КЗ_Перевод.ДокОснование = &ДокОснование2)
	|	И КЗ_Перевод.НомерСтроки = &НомерСтроки
	|	И КЗ_Перевод.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ДокОснование", Ссылка);
	Запрос.УстановитьПараметр("ДокОснование2", ?(ЗначениеЗаполнено(ДокОснование2), ДокОснование2, Неопределено));
	Запрос.УстановитьПараметр("НомерСтроки", НомерСтроки);
	Результат = Запрос.Выполнить();
	МассивПереводов = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	Если МассивПереводов.Количество() Тогда
		Возврат МассивПереводов[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ()

Процедура ПровестиПереводРетробонусов()
	
	СтатьяРетробонус = Справочники.СтатьиЗатрат.РетробонусИсходящий;
	СтатьяТММ = Справочники.СтатьиЗатрат.ТрейдМенеджментИМаркетинг;
	
	Для Каждого СтрокаПроводки Из Проводки Цикл
		Если СтрокаПроводки.КорСчет = ПланыСчетов.Учетный.НайтиПоКоду("62.01") Тогда
			ПроцентРетробонуса = ПолучитьПроцентРетробонуса(СтрокаПроводки.КорСубконто1, СтрокаПроводки.КорСубконто3, СтрокаПроводки.Сумма);
			Если ПроцентРетробонуса = 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			Движение = Движения.Учетный.Добавить();
			Движение.Период = Дата;
			Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
			Движение.Предприятия = Предприятие;
			
			Движение.СчетДт = ПланыСчетов.Учетный.НайтиПоКоду("76.01");
			Если Движение.СчетДт.УчетПоПодразделениям Тогда
				Движение.ПодразделениеДт = Подразделение;
			КонецЕсли;
			Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина)] = СтрокаПроводки.КорСубконто1;
			Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Документ", Истина)] = СтрокаПроводки.КорСубконто3;
			
			Движение.СчетКт = ПланыСчетов.Учетный.НайтиПоКоду("76.01");
			Если Движение.СчетКт.УчетПоПодразделениям Тогда
				Движение.ПодразделениеКт = Подразделение;
			КонецЕсли;
			Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина)] = СтрокаПроводки.КорСубконто1;
			
			Движение.Сумма = ПроцентРетробонуса;//СтрокаПроводки.Сумма * ПроцентРетробонуса / 100;
			//ИначеЕсли СтрокаПроводки.КорСчет = ПланыСчетов.Учетный.ПоставщикиПрочие И (СтрокаПроводки.КорСубконто3 = СтатьяРетробонус) Или СтрокаПроводки.КорСубконто3 = СтатьяТММ) Тогда
			//	Движение = Движения.Учетный.Добавить();
			//	Движение.Период = Дата;
			//	Движение.СценарийПлана = Справочники.СценарииПланирования.Факт;
			//	Движение.Предприятия = Предприятие;
			//	
			//	Если СтрокаПроводки.КорСубконто3 = СтатьяТММ Тогда
			//		Движение.СчетДт = ПланыСчетов.Учетный._76_14;
			//		Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Договоры", Истина)] = СтрокаПроводки.КорСубконто2;
			//	Иначе	
			//		Движение.СчетДт = ПланыСчетов.Учетный.ВерхПоОплате;
			//	КонецЕсли;	
			//	Если Движение.СчетДт.УчетПоПодразделениям Тогда
			//		Движение.ПодразделениеДт = Подразделение;
			//	КонецЕсли;
			//	Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина)] = СтрокаПроводки.КорСубконто1;
			//	
			//	Движение.СчетКт = ПланыСчетов.Учетный._97_02;
			//	Если Движение.СчетКт.УчетПоПодразделениям Тогда
			//		Движение.ПодразделениеКт = Подразделение;
			//	КонецЕсли;
			//	Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина)] = СтрокаПроводки.КорСубконто1;
			//	Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Договоры", Истина)] = СтрокаПроводки.КорСубконто2;
			//	Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = СтрокаПроводки.КорСубконто3;
			//	
			//	Если ПриходРасход = "Приход" Тогда 
			//		Движение.Сумма = - СтрокаПроводки.Сумма;
			//	Иначе
			//		Движение.Сумма = СтрокаПроводки.Сумма;
			//	КонецЕсли;	
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры	

Функция ПолучитьПроцентРетробонуса(ТекКонтрагент, ТекДокументОтгрузки, ТекСуммаОплаты)
	
	//Если Не ЗначениеЗаполнено(ТекДокументОтгрузки) Или ТипЗнч(ТекДокументОтгрузки) <> Тип("ДокументСсылка.УЧ_Реализация") Тогда
		Возврат 0;
	//Иначе
	//	ДатаРетро = ТекДокументОтгрузки.Дата;
	//КонецЕсли;	
	////Запрос = Новый Запрос;
	////Запрос.Текст = 
	////"ВЫБРАТЬ
	////|	ВД_РетробонусыСрезПоследних.БонусИсходящий
	////|ИЗ
	////|	РегистрСведений.ВД_Ретробонусы.СрезПоследних(
	////|			&Период,
	////|			Контрагент = &Контрагент
	////|				И Предприятие = &Предприятие) КАК ВД_РетробонусыСрезПоследних";
	////Запрос.УстановитьПараметр("Контрагент", ТекКонтрагент);
	////Запрос.УстановитьПараметр("Предприятие", Предприятие);
	////Запрос.УстановитьПараметр("Период", ДатаРетро);
	////РезультатЗапроса = Запрос.Выполнить();
	////Если РезультатЗапроса.Пустой() Тогда 
	////	Возврат 0;
	////Иначе
	////	Выборка = РезультатЗапроса.Выбрать();
	////	Пока Выборка.Следующий() Цикл
	////		Возврат Выборка.БонусИсходящий;
	////	КонецЦикла;
	////КонецЕсли;
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	-УчетныйОбороты.СуммаОборот КАК СуммаОборот
	//|ИЗ
	//|	РегистрБухгалтерии.Учетный.Обороты(
	//|			&Дата,
	//|			&Дата,
	//|			Регистратор,
	//|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ВерхПоОтгрузке),
	//|			,
	//|			КорСубконто2 = ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.РетробонусИсходящий)
	//|				ИЛИ КорСубконто2 = ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.РетробонусИсходящийУсловный),
	//|			КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Учетный.РасходыПоРеал),
	//|			) КАК УчетныйОбороты
	//|ГДЕ
	//|	УчетныйОбороты.Регистратор = &Регистратор";
	//Запрос.УстановитьПараметр("Дата", ДатаРетро);
	//Запрос.УстановитьПараметр("Регистратор", ТекДокументОтгрузки);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//Если РезультатЗапроса.Пустой() Тогда
	//	Возврат 0;
	//Иначе
	//	Выборка = РезультатЗапроса.Выбрать();
	//	Пока Выборка.Следующий() Цикл
	//		СуммаРетроПоПроводкам = Выборка.Суммаоборот;	
	//	КонецЦикла;	
	//КонецЕсли;
	//
	//Возврат (ТекСуммаОплаты / ТекДокументОтгрузки.Реализация.Итог("СуммаОтгрузки")) * СуммаРетроПоПроводкам;
	
КонецФункции	

Функция СчетаДляРаспределения() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Учетный.Ссылка КАК Ссылка
	               |ИЗ
	               |	ПланСчетов.Учетный КАК Учетный
	               |ГДЕ
	               |	Учетный.ВидыСубконто.ВидСубконто = &ВидСубконто
	               |	И Учетный.ЗапретитьИспользоватьВПроводках = ЛОЖЬ
	               |	И Учетный.Ссылка В(&Счета)";
	
	Запрос.УстановитьПараметр("Счета", Проводки.Выгрузить().ВыгрузитьКолонку("КорСчет"));
	Запрос.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Документ", Истина));
	
	Результат = Запрос.Выполнить();
	СчетаДляРаспределения = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Субконто1Массив = Новый Массив;
	Субконто2Массив = Новый Массив;
	
	Для каждого ТекСтрока Из Проводки Цикл
		Если НЕ СчетаДляРаспределения.Найти(ТекСтрока.КорСчет) = Неопределено Тогда
			Если Субконто1Массив.Найти(ТекСтрока.КорСубконто1) = Неопределено Тогда
				Субконто1Массив.Добавить(ТекСтрока.КорСубконто1);
			КонецЕсли;
			Если Субконто2Массив.Найти(ТекСтрока.КорСубконто2) = Неопределено Тогда
				Субконто2Массив.Добавить(ТекСтрока.КорСубконто2);
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Новый Структура("Субконто1Массив, Субконто2Массив, СчетаДляРаспределения, ЭтоОплата", Субконто1Массив, Субконто2Массив, СчетаДляРаспределения, Истина);
КонецФункции // ()


Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	БюджетныйНаСервере.ПриУстановкеНовогоНомераПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
КонецПроцедуры


Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	//{{__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	Если (ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Ссылка") И НЕ ТипЗнч(ДанныеЗаполнения.Ссылка) = Тип("ДанныеФормыСтруктура")) 
		ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда // из обработки платежей р/сч или из платежки
		ЭтоВНХПоступление = Ложь;
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
			РеквизитыДокумента = БюджетныйНаСервере.ВернутьРеквизиты(ДанныеЗаполнения, "Ссылка, СчетОрганизации, СчетКонтрагента");
			РеквизитыДокумента.Вставить("БанковскийСчет", РеквизитыДокумента.СчетОрганизации);
			ДанныеЗаполнения = Новый Структура("Ссылка, Субконто2, Организация", РеквизитыДокумента.Ссылка, РеквизитыДокумента.БанковскийСчет);
		ИначеЕсли ДанныеЗаполнения.Свойство("ТекДанные") И ДанныеЗаполнения.Свойство("Ссылка") И ТипЗнч(ДанныеЗаполнения.Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
			Если ДанныеЗаполнения.ТекДанные.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ Тогда
				ЭтоВНХПоступление = Истина;
				ДанныеЗаполнения = Новый Структура("Ссылка, Субконто2, Организация", ДанныеЗаполнения.Ссылка, ДанныеЗаполнения.Ссылка.СчетКонтрагента);
			КонецЕсли;
		КонецЕсли;
		
		ДанныеЗаполненияСсылка = ДанныеЗаполнения.Ссылка;
		Субконто2 = ДанныеЗаполнения.Субконто2;
		Организация = Субконто2.Владелец;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаПоПлатежке();
		Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполненияСсылка);
		Запрос.УстановитьПараметр("Источник", ?(ЗначениеЗаполнено(Субконто2), Субконто2, ДанныеЗаполненияСсылка.БанковскийСчет));
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			// Заполнение шапки
			Содержание = СтрПолучитьСтроку(Выборка.НазначениеПлатежа , 1) + " / " + Выборка.Комментарий;
			Подразделение = Выборка.Подразделение;
			Предприятие = ДанныеЗаполненияСсылка.Предприятие;
			Дата = Выборка.Дата;
			ДокОснование = ДанныеЗаполненияСсылка;
			
			//приход или расход?
			//Если Выборка.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Оплата Или Выборка.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ОплатаВНХ Или Выборка.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога Тогда
			Если Выборка.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.СнятиеНаличных Тогда
				ПриходРасход = Перечисления.ВидыОперацийПлатежноеПоручение.ОплатаВНХ;
			ИначеЕсли Выборка.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу ИЛИ Выборка.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику Тогда
				ПриходРасход = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеСотруднику;
			Иначе
				ПриходРасход = Перечисления.ВидыОперацийПлатежноеПоручение.Оплата;
			КонецЕсли;
			ВидДвижения  = ?(Выборка.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ОплатаВНХ, "ВНХ", "Прямое");
			СуммаДокумента = Выборка.СуммаДокумента;
			Субконто2 = Выборка.БанковскийСчетИсточник;
			Организация = Субконто2.Владелец;
			Если Не ЗначениеЗаполнено(Предприятие) Тогда
				Предприятие = ПП_Сервер.ПолучитьПредприятие(Дата, Субконто2);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Подразделение) И ЗначениеЗаполнено(Субконто2) Тогда
				ТЗПоследних = РегистрыСведений.Д_ИсточникПП.СрезПоследних(Дата, Новый Структура("БанковскиеСчета", Субконто2));
				Для каждого ТекСтрокаТЗ Из ТЗПоследних Цикл
					Подразделение = ТекСтрокаТЗ.Подразделение;				
				КонецЦикла; 				
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Подразделение) Тогда
				Подразделение = Справочники.СтруктураПредприятия.НайтиПоРеквизиту("Организация", Выборка.Организация);
			КонецЕсли;
			Контрагент = Выборка.Контрагент;
			Договор = Выборка.Договор;
			ТекПризнакВал = Выборка.ВидИсточникаБанкоскийСчет;
			
			ВалютнаяСумма1 = Выборка.СуммаВВалютеПлательщика;
			Курс1 = ?(ВалютнаяСумма1, СуммаДокумента / ВалютнаяСумма1, 0);
			
			Если ЗначениеЗаполнено(Субконто2) Тогда
				Счет = УЧ_Сервер.ВернутьСчетПоИсточнику(Субконто2);
				Если Счет.Валютный Тогда
					ВидимостьВалюты = Истина;
				КонецЕсли; 
				Валюта1 = Субконто2.ВалютаДенежныхСредств;
			КонецЕсли;
			
			ЗапросПоТЧ = Новый Запрос;
			ЗапросПоТЧ.Текст = 
			"ВЫБРАТЬ
			|	*
			|ИЗ
			|	Документ.ПлатежноеПоручение.ТабличнаяЧасть КАК ПлатежноеПоручениеТабличнаяЧасть
			|ГДЕ
			|	ПлатежноеПоручениеТабличнаяЧасть.Ссылка = &Ссылка";
			ЗапросПоТЧ.УстановитьПараметр("Ссылка", ДанныеЗаполненияСсылка);
			ТекСтрока = ЗапросПоТЧ.Выполнить().Выбрать();
			
			Пока ТекСтрока.Следующий() Цикл
				НоваяСтрока = Проводки.Добавить();
				НоваяСтрока.ГУИДСтроки = Новый УникальныйИдентификатор;
				НоваяСтрока.Содержание = Содержание;
				НоваяСтрока.КлючАналитикиБюджета = ТекСтрока.КлючАналитикиБюджета;
				
				ТекПП = ТекСтрока.Предприятие;
				//Если Не ЗначениеЗаполнено(ТекПП) Тогда
				//	ТекПП = Предприятие;				
				//КонецЕсли;
				
				Если ЗначениеЗаполнено(ТекПП) И НЕ ТекПП = Предприятие Тогда
					//Если Не Константы.сабУЧ_ИспользоватьПереводы.Получить() Тогда
					//	НоваяСтрока.КорСчет = ПланыСчетов.Учетный.Счет7901();
					//	НоваяСтрока.КорСубконто1 = ТекПП;
					//Иначе	
						НоваяСтрока.КорСчет = ПланыСчетов.Учетный.НайтиПоКоду("55.01");
						НоваяСтрока.КорСубконто2 = ТекПП;
						Если НЕ ТекПП.УчетПоПодразделениям Тогда
							НоваяСтрока.КорСубконто3 = ТекПП.ВидДеятельности;						
						КонецЕсли;
					//КонецЕсли;
					
				ИначеЕсли ЗначениеЗаполнено(ТекСтрока.ИнвПроект) Тогда
					Если ТипЗнч(ТекСтрока.ИнвПроект) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
						НоваяСтрока.КорСчет = ПланыСчетов.Учетный.НайтиПоКоду("60.05");
						НоваяСтрока.КорСубконто1 = Выборка.Контрагент;
						НоваяСтрока.КорСубконто2 = ТекСтрока.ИнвПроект;
					//ИначеЕсли ТипЗнч(ТекСтрока.ИнвПроект) = Тип("СправочникСсылка.ПредставительскиеРасходы") Тогда 	
					//	НоваяСтрока.КорСчет = ПланыСчетов.Учетный._76_13;
					//	НоваяСтрока.КорСубконто1 = ТекСтрока.Предприятие;
					//	НоваяСтрока.КорСубконто2 = ТекСтрока.ИнвПроект;
					ИначеЕсли ТипЗнч(ТекСтрока.ИнвПроект) = Тип("СправочникСсылка.Проекты") Тогда
						НоваяСтрока.КорСчет = ПланыСчетов.Учетный.НайтиПоКоду("60.01");
						НоваяСтрока.КорСубконто1 = Выборка.Контрагент;
						НоваяСтрока.КорСубконто2 = Договор;
						НоваяСтрока.КорСубконто3 = ТекСтрока.ИнвПроект;
					КонецЕсли;
					//в шапку последний
					ИнвПроект = ТекСтрока.ИнвПроект;
				Иначе
					Если ЗначениеЗаполнено(ТекПП) И НЕ ТекПП = Предприятие Тогда
						ПомощьВВыбореСчета = ПодобратьСчет(ДанныеЗаполненияСсылка, Выборка, ТекПП);
					Иначе
						ПомощьВВыбореСчета = ПодобратьСчет(ДанныеЗаполненияСсылка, Выборка, Предприятие);
					КонецЕсли;
					Если НЕ ПомощьВВыбореСчета = Неопределено Тогда
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ПомощьВВыбореСчета);
					ИначеЕсли ЗначениеЗаполнено(ТекСтрока.СтатьяДДС) Тогда
						РеквизитыСтатьи = БюджетныйНаСервере.ВернутьРеквизиты(ТекСтрока.СтатьяДДС, "СтатьяЗатрат, СчетУчета");
						Если НЕ ЗначениеЗаполнено(НоваяСтрока.КорСчет) Тогда
							НоваяСтрока.КорСчет = РеквизитыСтатьи.СчетУчета;
							МассивСубконто = УЧ_Сервер.ПолучитьСубконтоМассив(НоваяСтрока.КорСчет);
							Индекс = 1;
							Для каждого ТекСубконто Из МассивСубконто Цикл
								Если ТекСубконто.СодержитТип(Тип("СправочникСсылка.СтатьиЗатрат")) Тогда
									НоваяСтрока["КорСубконто" + Индекс] = РеквизитыСтатьи.СтатьяЗатрат;
								КонецЕсли;
								Индекс = Индекс + 1;
							КонецЦикла; 
						КонецЕсли;	
					КонецЕсли;
				КонецЕсли;
							
				Если ТипЗнч(Выборка.Организация) = Тип("СправочникСсылка.Организации") И ТипЗнч(Выборка.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
					
					ТекППКонтрагента = ПП_Сервер.ПолучитьПредприятие(Выборка.Дата, Выборка.СчетКонтрагентаИсточник);
					ТекППОрганизации = ПП_Сервер.ПолучитьПредприятие(Выборка.Дата, Выборка.БанковскийСчетИсточник);
					
					Если Не ЗначениеЗаполнено(ТекППКонтрагента) Тогда
						ТекППКонтрагента = Выборка.СчетКонтрагентаИсточник.Предприятие;
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(ТекППОрганизации) Тогда
						ТекППОрганизации = Выборка.БанковскийСчетИсточник.Предприятие;
					КонецЕсли;
					
					//ТекППП = ?(ТекПП = Объект.Предприятие, ТекПП2, ДанныеЗаполнения.Предприятие);
					Если ТекППКонтрагента = ТекППОрганизации Тогда
						Если Выборка.БанковскийСчет = Выборка.БанковскийСчетИсточник ИЛИ ЭтоВНХПоступление Тогда
							НоваяСтрока.КорСчет = ПланыСчетов.Учетный.НайтиПоКоду("57.01");
							НоваяСтрока.КорСубконто1 = Выборка.Организация;
							//НоваяСтрока.КорСубконто2 = Выборка.СчетКонтрагентаИсточник;
						Иначе
							НоваяСтрока.КорСчет = ПланыСчетов.Учетный.НайтиПоКоду("57.01");
							НоваяСтрока.КорСубконто1 = Выборка.Контрагент;
							//НоваяСтрока.КорСубконто2 = Выборка.БанковскийСчетИсточник;
						КонецЕсли;
					Иначе
						Если Выборка.БанковскийСчет = Выборка.БанковскийСчетИсточник ИЛИ ЭтоВНХПоступление Тогда
							//Если Константы.сабУЧ_ИспользоватьПереводы.Получить() Тогда
							//	НоваяСтрока.КорСчет = ПланыСчетов.Учетный.Счет7901();
							//	НоваяСтрока.КорСубконто1 = ТекППКонтрагента;
							//Иначе
								НоваяСтрока.КорСчет = ПланыСчетов.Учетный.НайтиПоКоду("55.01");
								НоваяСтрока.КорСубконто2 = ТекППКонтрагента;
								Если ЭтоВНХПоступление Тогда
									НоваяСтрока.КорСубконто1 = Предприятие.УчетнаяПолитика.РасходыНеОтносящиесяКПредприятию;
								Иначе
									НоваяСтрока.КорСубконто1 = Предприятие.УчетнаяПолитика.ДоходыНеОтносящиесяКПредприятию;
								КонецЕсли;
								Если ТипЗнч(НоваяСтрока.КорСубконто2) = Тип("СправочникСсылка.Предприятия") И НЕ НоваяСтрока.КорСубконто2.УчетПоПодразделениям Тогда
									НоваяСтрока.КорСубконто3 = НоваяСтрока.КорСубконто2.ВидДеятельности;						
								КонецЕсли;
							//КонецЕсли;
						Иначе
							//Если Константы.сабУЧ_ИспользоватьПереводы.Получить() Тогда
							//	НоваяСтрока.КорСчет = ПланыСчетов.Учетный.Счет7901();
							//	НоваяСтрока.КорСубконто1 = ТекППОрганизации;	
							//Иначе	
								НоваяСтрока.КорСчет = ПланыСчетов.Учетный.НайтиПоКоду("55.01");
								НоваяСтрока.КорСубконто2 = ТекППОрганизации;
								Если ЭтоВНХПоступление Тогда
									НоваяСтрока.КорСубконто1 = Предприятие.УчетнаяПолитика.РасходыНеОтносящиесяКПредприятию;
								Иначе
									НоваяСтрока.КорСубконто1 = Предприятие.УчетнаяПолитика.ДоходыНеОтносящиесяКПредприятию;
								КонецЕсли;
								Если ТипЗнч(НоваяСтрока.КорСубконто2) = Тип("СправочникСсылка.Предприятия") И НЕ НоваяСтрока.КорСубконто2.УчетПоПодразделениям Тогда
									НоваяСтрока.КорСубконто3 = НоваяСтрока.КорСубконто2.ВидДеятельности;						
								КонецЕсли;
							//КонецЕсли;
						КонецЕсли	
					КонецЕсли;
				КонецЕсли;
				НоваяСтрока.Содержание = Содержание;
				НоваяСтрока.Сумма = ТекСтрока.Сумма;
				// добавлено по обращению № 3919 {
				НоваяСтрока.ВалСумма = ТекСтрока.ВалСумма;
				
				////Если Объект.Источник = Выборка.БанковскийСчетИсточник Тогда
				//	НоваяСтрока.Валюта = Выборка.БанковскийСчетВалюта;
				//Иначе
				НоваяСтрока.Валюта = Выборка.СчетКонтрагентаВалюта;
				//КонецЕсли;
				
				НоваяСтрока.Курс = ?(НоваяСтрока.ВалСумма, НоваяСтрока.Сумма / НоваяСтрока.ВалСумма, 0);
				//}
				Если ПриходРасход = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ") Тогда
					НоваяСтрока.ФинСтатья = БюджетныйНаСервере.ОбратнаяВнутрихолдинговаяСтатья(ТекСтрока.СтатьяДДС);	
				ИначеЕсли ЗначениеЗаполнено(ТекСтрока.СтатьяДДС) Тогда	
					НоваяСтрока.ФинСтатья = ТекСтрока.СтатьяДДС;
				КонецЕсли;	
				
				Если ЭтоВНХПоступление Тогда
					НоваяСтрока.ФинЦФО = Предприятие;
				Иначе	
					НоваяСтрока.ФинЦФО = ТекСтрока.Предприятие;
					НоваяСтрока.ФинПодразделение = ?(ЗначениеЗаполнено(ТекСтрока.Подразделение), ТекСтрока.Подразделение, Подразделение);
				КонецЕсли;
				
				Субконто1 = ТекСтрока.СтатьяДДС;
				
				//+ Ничуговская 12.07.19 Заполнение подразделения затрат
				Если ЗначениеЗаполнено(НоваяСтрока.КорСчет) Тогда
					ДанныеСчета = УправленческийУчетПовтИсп.ПолучитьСвойстваСчета(НоваяСтрока.КорСчет, Предприятие);
					Если ДанныеСчета["УчетПоПодразделениям"] Тогда
						Если ТекСтрока.Количество() > 1 Тогда  
							НоваяСтрока.Подразделение = ТекСтрока.Подразделение;
						Иначе
							НоваяСтрока.Подразделение = Подразделение;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;	
				//- Ничуговская
			КонецЦикла;
			
		КонецЦикла;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И Не ДанныеЗаполнения.Свойство("Заявка") И Не ДанныеЗаполнения.Свойство("ДокументВыплаты") Тогда // из обработки платежей переводы
		
		ДанныеЗаполнения = ДанныеЗаполнения.Ссылка;
		
		СуммаДокумента = ДанныеЗаполнения.Сумма;
		Содержание = ДанныеЗаполнения.Содержание;
		ДокОснование = ДанныеЗаполнения.Регистратор;
		Контрагент = ДанныеЗаполнения.Контрагент;
		
		ГУИДОснования = ДанныеЗаполнения.ГУИДСтроки;
		Подразделение = Предприятие.ВидДеятельности;
		Счет = ПланыСчетов.Учетный.НайтиПоКоду("55.01");
		Дата = ДанныеЗаполнения.Дата;
		
		//ТекОбъект.Субконто1 = ДанныеЗаполнения.Статья;		
		Субконто2 = Справочники.Кассы.Виртуальный;
		//ТекОбъект.Контрагент = ДанныеЗаполнения.Контрагент;
		НоваяСтрока = Проводки.Добавить();
		НоваяСтрока.Содержание = Содержание;
		НоваяСтрока.Сумма = ДанныеЗаполнения.Сумма;
		НоваяСтрока.ГУИДСтроки = Новый УникальныйИдентификатор;
		НоваяСтрока.ФинЦФО = Предприятие;
		Если УЧ_Сервер.ВНХСчет(ДанныеЗаполнения.КорСчет) Тогда
			Предприятие = ДанныеЗаполнения.КорСубконто1;
			НоваяСтрока.КорСчет = ДанныеЗаполнения.КорСчет;
			НоваяСтрока.КорСубконто1 = ДанныеЗаполнения.Предприятие;
		ИначеЕсли ЗначениеЗаполнено(ДанныеЗаполнения.КорСубконто791) Тогда
			Предприятие = ДанныеЗаполнения.КорСубконто791;
			НоваяСтрока.КорСчет791 = ДанныеЗаполнения.КорСчет791;
			НоваяСтрока.КорСубконто791 = ДанныеЗаполнения.Предприятие;
		Иначе
			Предприятие = ДанныеЗаполнения.КорСубконто2;
			Субконто2 = ДанныеЗаполнения.Предприятие;
		КонецЕсли;
		
		ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийДвиженияДС.Взаимозачет");
		
		Если ДанныеЗаполнения.ПриходРасход = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ВозмещениеОплат") Тогда
			ПриходРасход = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ВозмещениеПоступлений");
		ИначеЕсли ДанныеЗаполнения.ПриходРасход = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ВозмещениеПоступлений") Тогда
			ПриходРасход = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ВозмещениеОплат");
		ИначеЕсли ПП_Сервер.ЭтоРасходнаяОперация(ДанныеЗаполнения.ПриходРасход) Тогда	
			ПриходРасход = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ВозмещениеПоступлений");
		Иначе
			ПриходРасход = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ВозмещениеОплат");
		КонецЕсли;
		
		//Счет79 = ДанныеЗаполнения.КорСчет;
		//Субконто179 = ДанныеЗаполнения.Предприятие;
		
		//Если УЧ_Сервер.ВНХСчет(ДанныеЗаполнения.КорСчет) Тогда
		//	//	ТекОбъект.Видимость79 = Истина;
		//	//	ТекОбъект.Счет79 = ПланыСчетов.Учетный.Счет7901();
		//	//	ТекОбъект.Субконто179 = ДанныеЗаполнения.Предприятие;
		//	НоваяСтрока.КорСчет = ДанныеЗаполнения.КорСчет;
		//	НоваяСтрока.КорСубконто1 = ДанныеЗаполнения.Предприятие;
		//КонецЕсли;
		
		
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.УЧ_Реализация") Тогда
		Предприятие = ДанныеЗаполнения.Предприятие;
		ПриходРасход = Перечисления.ВидыОперацийПлатежноеПоручение.Поступление;
		ВидОперации = Перечисления.ВидыОперацийДвиженияДС.КассовыйОрдер;
		
		ТекСтатьяДДС = ДанныеЗаполнения.СтатьяДДС;
		Если ЗначениеЗаполнено(ДанныеЗаполнения.Договор) Тогда
			Если ДанныеЗаполнения.Договор.ПриоритетныйПорядокРасчетов = Перечисления.Д_ИсточникиСредств.БезНал Тогда
				ВидОперации = Перечисления.ВидыОперацийДвиженияДС.БанковскаяВыписка;
				ТекСтатьяДДС = ДанныеЗаполнения.Договор.СтатьяДДС;
			КонецЕсли;
		КонецЕсли;
		
		Контрагент = ДанныеЗаполнения.Контрагент;
		ДокОснование = ДанныеЗаполнения.Ссылка;
		СуммаДокумента = ДанныеЗаполнения.СуммаДокумента;
		Субконто1 = ТекСтатьяДДС;
		Субконто2 = ДанныеЗаполнения.Касса;
		
		Договор = ДанныеЗаполнения.Договор;
		
		СчетУчетаДоговор = ?(ТипЗнч(ДанныеЗаполнения.Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов"), ДанныеЗаполнения.Договор.СчетВзаиморасчетов, Неопределено);
		
		НоваяСтрока = Проводки.Добавить();
		
		Если Не ЗначениеЗаполнено(СчетУчетаДоговор) Тогда
			НоваяСтрока.КорСчет = ДанныеЗаполнения.Счет;
		КонецЕсли;
		
		НоваяСтрока.КорСубконто1 = ДанныеЗаполнения.Контрагент;
		НоваяСтрока.КорСубконто2 = ДанныеЗаполнения.Договор;
		НоваяСтрока.ФинСтатья = ТекСтатьяДДС;
		НоваяСтрока.Сумма = ДанныеЗаполнения.СуммаДокумента;
		
		Если Не ЗначениеЗаполнено(Субконто2) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Кассы.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Кассы КАК Кассы
			|ГДЕ
			|	Кассы.Предприятие = &Предприятие";
			
			Запрос.УстановитьПараметр("Предприятие", ДанныеЗаполнения.Предприятие);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Если Выборка.Количество() = 1 Тогда
				Пока Выборка.Следующий() Цикл
					Субконто2 = Выборка.Ссылка;				
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.УЧ_ПоступлениеТоваров") Тогда
		Предприятие = ДанныеЗаполнения.Предприятие;
		ПриходРасход = Перечисления.ВидыОперацийПлатежноеПоручение.Оплата;
		ВидОперации = Перечисления.ВидыОперацийДвиженияДС.КассовыйОрдер;
		
		ТекСтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Оплата поставщикам (подрядчикам)", Истина);
		Если ЗначениеЗаполнено(ДанныеЗаполнения.Договор) Тогда
			Если ДанныеЗаполнения.Договор.ПриоритетныйПорядокРасчетов = Перечисления.Д_ИсточникиСредств.БезНал Тогда
				ВидОперации = Перечисления.ВидыОперацийДвиженияДС.БанковскаяВыписка;
				ТекСтатьяДДС = ДанныеЗаполнения.Договор.СтатьяДДС;
			КонецЕсли;
		КонецЕсли;
		
		Контрагент = ДанныеЗаполнения.Контрагент;
		ДокОснование = ДанныеЗаполнения.Ссылка;
		СуммаДокумента = ДанныеЗаполнения.СуммаДокумента;
		Субконто1 = ТекСтатьяДДС;
		//Субконто2 = ДанныеЗаполнения.Касса;
		
		Договор = ДанныеЗаполнения.Договор;
		
		СчетУчетаДоговор = ?(ТипЗнч(ДанныеЗаполнения.Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов"), ДанныеЗаполнения.Договор.СчетВзаиморасчетов, Неопределено);
		
		НоваяСтрока = Проводки.Добавить();
		
		Если Не ЗначениеЗаполнено(СчетУчетаДоговор) Тогда
			НоваяСтрока.КорСчет = ДанныеЗаполнения.СчетКонтрагента;
		КонецЕсли;
		
		НоваяСтрока.КорСубконто1 = ДанныеЗаполнения.Контрагент;
		НоваяСтрока.КорСубконто2 = ДанныеЗаполнения.Договор;
		НоваяСтрока.ФинСтатья = ТекСтатьяДДС;
		НоваяСтрока.Сумма = ДанныеЗаполнения.СуммаДокумента;
		
		Если ЗначениеЗаполнено(ДанныеЗаполнения.ДатаВходящегоДокумента) Тогда
			НоваяСтрока.Содержание = "Оплата по " + ?(ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги, "акту", " накладной")
			+ " №" + ДанныеЗаполнения.НомерВходящегоДокумента + " от " + Формат(ДанныеЗаполнения.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy");		
		Иначе
			НазначениеПлатежа = "Оплата по " + ?(ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги, "акту", " накладной")
			+ " №" + ДанныеЗаполнения.Номер + " от " + Формат(ДанныеЗаполнения.Дата, "ДФ=dd.MM.yyyy");		
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Субконто2) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Кассы.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Кассы КАК Кассы
			|ГДЕ
			|	Кассы.Предприятие = &Предприятие";
			
			Запрос.УстановитьПараметр("Предприятие", ДанныеЗаполнения.Предприятие);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Если Выборка.Количество() = 1 Тогда
				Пока Выборка.Следующий() Цикл
					Субконто2 = Выборка.Ссылка;				
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Д_ЗаявкаНаФинансирование") ИЛИ 
		(ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ЗаявкаНаФинансирование") И НЕ ДанныеЗаполнения.Свойство("ЭтоПКО")) Тогда
		
		//Отказ = сабОперОбщегоНазначения.ПроверкаСозданияНаОснованииНаСервере(ДанныеЗаполнения, Комментарий, СтандартнаяОбработка, ТипЗнч(Ссылка));
		//Если НЕ Отказ = Неопределено Тогда
		//	Возврат;		
		//КонецЕсли;

		// Заполнение шапки
		
		ЕстьСтруктура = Ложь;
		СуммаОстатка = 0;
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ЗаявкаНаФинансирование") 
			 И ЗначениеЗаполнено(ДанныеЗаполнения.ЗаявкаНаФинансирование) Тогда
			ЕстьСтруктура = Истина;
			СуммаОстатка = ДанныеЗаполнения.СуммаДокумента - ДанныеЗаполнения.СуммаОплачено;
			
			Если СуммаОстатка < 0 Тогда
				СуммаОстатка = 0;			
			КонецЕсли;
			
			ДанныеЗаполнения = ДанныеЗаполнения.ЗаявкаНаФинансирование;
			
		КонецЕсли;
		
		ЭтоДанныеРеестра = Ложь;
		Реестр = Неопределено;
		ДанныеЗаявки = ДанныеЗаполнения;
		
		Если (ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("РеестрЗаявок") И ЗначениеЗаполнено(ДанныеЗаполнения.РеестрЗаявок)) 
			ИЛИ (ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Д_ЗаявкаНаФинансирование")) Тогда //получаем данные из строки
			
			НайденныеСтрокиРеестра = ДанныеЗаполнения.РеестрЗаявок.ЗаявкаБезнал.НайтиСтроки(Новый Структура("ЗаявкаНаФинансирование", ДанныеЗаполнения.Ссылка));
			Если НайденныеСтрокиРеестра.Количество() Тогда
				Реестр = ДанныеЗаполнения.РеестрЗаявок; 
				ДанныеЗаполнения = НайденныеСтрокиРеестра[0];
				ЭтоДанныеРеестра = Истина;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ТипЗнч(ДанныеЗаполнения.Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") Тогда // реестр без заявок
			
			НайденныеСтрокиРеестра = ДанныеЗаполнения.Заявка.ЗаявкаБезнал.НайтиСтроки(Новый Структура("УИДСтроки", ДанныеЗаполнения.УИДСтроки));

			Если НайденныеСтрокиРеестра.Количество() Тогда
				Реестр = ДанныеЗаполнения.Заявка;
				ДанныеЗаполнения = НайденныеСтрокиРеестра[0];
				ЭтоДанныеРеестра = Истина;
				ДанныеЗаявки = Новый Структура;
				ДанныеЗаявки.Вставить("Комментарий", Реестр.Комментарий);
				ДанныеЗаявки.Вставить("Ссылка", Реестр);
				ДанныеЗаявки.Вставить("ТипИсточника", Реестр.ТипИсточника);
				ДанныеЗаявки.Вставить("ВидОперации", ДанныеЗаполнения.ВидОперации);
				ДанныеЗаявки.Вставить("НазначениеПлатежаУчет", ДанныеЗаполнения.НазначениеПлатежа);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Д_ЗаявкаНаФинансирование") Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения,,"Дата, Номер, Проведен");
		Иначе
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		КонецЕсли;
		
		Содержание = ДанныеЗаполнения.НазначениеПлатежа + " / " + ДанныеЗаявки.Комментарий;
		СуммаДокумента = ?(СуммаОстатка, СуммаОстатка, ?(ЭтоДанныеРеестра, ДанныеЗаполнения.СуммаДДС, ДанныеЗаполнения.Сумма));
		
		Субконто2 = ДанныеЗаполнения.Источник;
		Если ЗначениеЗаполнено(Субконто2) Тогда
			Счет = УЧ_Сервер.ВернутьСчетПоИсточнику(Субконто2);
			Валюта1 = Субконто2.ВалютаДенежныхСредств;
			Организация = Субконто2.Владелец;
			Если Не ЗначениеЗаполнено(Предприятие) Тогда
				Предприятие = ПП_Сервер.ПолучитьПредприятие(Дата, Субконто2);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Предприятие) Тогда
				Предприятие = ДанныеЗаполнения.ЦФО;
			КонецЕсли;
		КонецЕсли;
		ГУИДОснования = ?(ЭтоДанныеРеестра, ДанныеЗаполнения.УИДСтроки, Неопределено);
		ДокОснование = ДанныеЗаявки.Ссылка;
		Если ДанныеЗаявки.ТипИсточника = Перечисления.Д_ИсточникиСредств.Нал Тогда
			ВидОперации = Перечисления.ВидыОперацийДвиженияДС.КассовыйОрдер;
		ИначеЕсли ДанныеЗаявки.ТипИсточника = Перечисления.Д_ИсточникиСредств.Казна Тогда
			ВидОперации = Перечисления.ВидыОперацийДвиженияДС.Взаимозачет;
		Иначе	
			ВидОперации = Перечисления.ВидыОперацийДвиженияДС.БанковскаяВыписка;
		КонецЕсли;
		Если ВидОперации = Перечисления.ВидыОперацийДвиженияДС.Взаимозачет Тогда
			ПриходРасход = Перечисления.ВидыОперацийПлатежноеПоручение.ВозмещениеОплат;	
		Иначе	
			ПриходРасход = ДанныеЗаявки.ВидОперации;
		КонецЕсли;
		
		Если ЭтоДанныеРеестра Тогда
			ДанныеРасшифровки = Реестр.РасшифровкиСтрок.НайтиСтроки(Новый Структура("УИДСтрокиЗаявки", ДанныеЗаполнения.УИДСтроки));
			КоличествоСтрокРасшифровки = ДанныеРасшифровки.Количество();
			Если НЕ КоличествоСтрокРасшифровки Тогда
				Если ЗначениеЗаполнено(ДанныеЗаполнения.ЗаявкаНаФинансирование) Тогда
					НовыйДокШаблон = Документы.Д_ЗаявкаНаОплату.СоздатьДокумент();
					ДанныеРасшифровки = НовыйДокШаблон.РасшифровкиСтрок.Выгрузить();
					Если ДанныеЗаполнения.ЗаявкаНаФинансирование.РасшифровкаПлатежа Тогда
						Для каждого ТекСтрока Из ДанныеЗаполнения.ЗаявкаНаФинансирование.ТабличнаяЧасть Цикл
							НоваяСтрокаДока = ДанныеРасшифровки.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрокаДока, ТекСтрока);
							НоваяСтрокаДока.ЦФО = ТекСтрока.Предприятие;
							НоваяСтрокаДока.ВалютнаяСумма = ТекСтрока.ВалСумма;
							НоваяСтрокаДока.УИДСтрокиЗаявки = ДанныеЗаполнения.УИДСтроки;
						КонецЦикла; 
					КонецЕсли;
					КоличествоСтрокРасшифровки = ДанныеРасшифровки.Количество();
				КонецЕсли;
			КонецЕсли;
		Иначе	
			ДанныеРасшифровки = ДанныеЗаполнения.ТабличнаяЧасть;
			КоличествоСтрокРасшифровки = ?(ДанныеЗаполнения.РасшифровкаПлатежа, ДанныеЗаполнения.ТабличнаяЧасть.Количество(), 0);
		КонецЕсли;
		
		Для ТекИндексСтроки = 0 По МАКС(КоличествоСтрокРасшифровки, 1) - 1 Цикл
			Если КоличествоСтрокРасшифровки Тогда
				ТекСтрока = ДанныеРасшифровки[ТекИндексСтроки];
			Иначе
				ТекСтрока = ДанныеЗаполнения;			
			КонецЕсли;
			НоваяСтрока = Проводки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			Если ЭтоДанныеРеестра Тогда
				НоваяСтрока.Сумма = ?(СуммаОстатка И СуммаОстатка < ?(КоличествоСтрокРасшифровки < 1, ТекСтрока.СуммаДДС, ТекСтрока.Сумма), СуммаОстатка, ?(КоличествоСтрокРасшифровки < 1, ТекСтрока.СуммаДДС, ТекСтрока.Сумма));
			Иначе	
				НоваяСтрока.Сумма = ?(СуммаОстатка И СуммаОстатка < ТекСтрока.Сумма, СуммаОстатка, ТекСтрока.Сумма);
			КонецЕсли;
			Если СуммаОстатка > НоваяСтрока.Сумма Тогда
				СуммаОстатка = СуммаОстатка - НоваяСтрока.Сумма;
			Иначе
				СуммаОстатка = 0;
			КонецЕсли;
			НоваяСтрока.ФинСтатья = ТекСтрока.СтатьяДДС;
			НоваяСтрока.ФинЦФО = ТекСтрока.ЦФО;
			НоваяСтрока.ФинПодразделение = ТекСтрока.Подразделение;
			НоваяСтрока.КорСчет = Неопределено;
			НоваяСтрока.Содержание = ДанныеЗаявки.НазначениеПлатежаУчет;
			
			Если ТипЗнч(ДанныеЗаявки.Ссылка) = Тип("ДокументСсылка.Д_ЗаявкаНаФинансирование") Тогда
				Если КоличествоСтрокРасшифровки = 0 Тогда
					СтрокиБюджета = ДанныеЗаявки.Ссылка.СтрокиГрафикаБюджета.НайтиСтроки(Новый Структура("Использовать", Истина));
				Иначе	
					СтрокиБюджета =  ДанныеЗаявки.Ссылка.СтрокиГрафикаБюджета.НайтиСтроки(Новый Структура("УИДСтрокиРасшифровки, Использовать", ТекСтрока.УИДСтроки, Истина));
				КонецЕсли;
				Для каждого ТекСтрокаБюджета Из СтрокиБюджета Цикл
					НоваяСтрока.КлючАналитикиБюджета = Справочники.КлючиАналитикиБюджетов.НайтиПоРеквизиту("УИДСтроки", ТекСтрокаБюджета.УИДСтроки);
				КонецЦикла; 
			КонецЕсли;
			
			Если ВидОперации = Перечисления.ВидыОперацийДвиженияДС.Взаимозачет Тогда
				НоваяСтрока.КорСчет = ПланыСчетов.Учетный.НайтиПоКоду("79.01");
				НоваяСтрока.КорСубконто1 = ДанныеЗаполнения.Контрагент;
				НоваяСтрока.КорСубконто2 = ДанныеЗаполнения.Договор;
				
			ИначеЕсли ПриходРасход = Перечисления.ВидыОперацийПлатежноеПоручение.ОплатаВНХ Тогда
				ТекППКонтрагента = ПП_Сервер.ПолучитьПредприятие(ТекущаяДата(), ДанныеЗаполнения.ИсточникПолучатель);
				ТекППОрганизации = ПП_Сервер.ПолучитьПредприятие(ТекущаяДата(), ДанныеЗаполнения.Источник);
				
				//ТекППП = ?(ТекПП = Объект.Предприятие, ТекПП2, ДанныеЗаполнения.Предприятие);
				Если ТекППКонтрагента = ТекППОрганизации Тогда
					НоваяСтрока.КорСчет = ПланыСчетов.Учетный.НайтиПоКоду("57.01");
				Иначе
					//Если Константы.сабУЧ_ИспользоватьПереводы.Получить() Тогда
					//	НоваяСтрока.КорСчет = ПланыСчетов.Учетный.Счет7901();
					//	НоваяСтрока.КорСубконто1 = ТекППКонтрагента;	
					//Иначе	
						НоваяСтрока.КорСчет = ПланыСчетов.Учетный.НайтиПоКоду("55.01");
						НоваяСтрока.КорСубконто2 = ТекППКонтрагента;
						НоваяСтрока.КорСубконто1 = Предприятие.УчетнаяПолитика.ДоходыНеОтносящиесяКПредприятию;
						Если ТипЗнч(НоваяСтрока.КорСубконто2) = Тип("СправочникСсылка.Предприятия") И НЕ НоваяСтрока.КорСубконто2.УчетПоПодразделениям Тогда
							НоваяСтрока.КорСубконто3 = НоваяСтрока.КорСубконто2.ВидДеятельности;						
						КонецЕсли;
					//КонецЕсли;
				КонецЕсли	
			Иначе
				
				ПомощьВВыбореСчета = ПодобратьСчет(ДанныеЗаполнения, Неопределено, Предприятие);
				Если НЕ ПомощьВВыбореСчета = Неопределено Тогда
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ПомощьВВыбореСчета);
				Иначе
					Если НЕ ЗначениеЗаполнено(НоваяСтрока.КорСчет) Тогда
						РеквизитыСтатьи = БюджетныйНаСервере.ВернутьРеквизиты(ТекСтрока.СтатьяДДС, "СтатьяЗатрат, СчетУчета");
						
						НоваяСтрока.КорСчет = РеквизитыСтатьи.СчетУчета;
						МассивСубконто = УЧ_Сервер.ПолучитьСубконтоМассив(НоваяСтрока.КорСчет);
						Индекс = 1;
						Для каждого ТекСубконто Из МассивСубконто Цикл
							Если ТекСубконто.СодержитТип(Тип("СправочникСсылка.СтатьиЗатрат")) Тогда
								НоваяСтрока["КорСубконто" + Индекс] = РеквизитыСтатьи.СтатьяЗатрат;
							КонецЕсли;
							Индекс = Индекс + 1;
						КонецЦикла; 
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ЭтоПКО") Тогда
		
		ЕстьСтруктура = Ложь;
		СуммаОстатка = 0;
		
		ЭтоДанныеРеестра = Ложь;
		Реестр = Неопределено;
		ДанныеЗаявки = ДанныеЗаполнения;
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ТипЗнч(ДанныеЗаполнения.Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") Тогда // реестр без заявок
			
			НайденныеСтрокиРеестра = ДанныеЗаполнения.Заявка.ЗаявкаБезнал.НайтиСтроки(Новый Структура("УИДСтроки", ДанныеЗаполнения.УИДСтроки));

			Если НайденныеСтрокиРеестра.Количество() Тогда
				Реестр = ДанныеЗаполнения.Заявка;
				ДанныеЗаполнения = НайденныеСтрокиРеестра[0];
				ЭтоДанныеРеестра = Истина;
				ДанныеЗаявки = Новый Структура;
				ДанныеЗаявки.Вставить("Комментарий", Реестр.Комментарий);
				ДанныеЗаявки.Вставить("Ссылка", Реестр);
				ДанныеЗаявки.Вставить("ТипИсточника", Реестр.ТипИсточника);
				ДанныеЗаявки.Вставить("ВидОперации", ДанныеЗаполнения.ВидОперации);
				ДанныеЗаявки.Вставить("НазначениеПлатежаУчет", ДанныеЗаполнения.НазначениеПлатежа);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Д_ЗаявкаНаФинансирование") Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения,,"Дата, Номер, Проведен");
		Иначе
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		КонецЕсли;
		
		//Содержание = ДанныеЗаполнения.НазначениеПлатежа + " / " + ДанныеЗаявки.Комментарий;
		СуммаДокумента = ?(ЭтоДанныеРеестра, ДанныеЗаполнения.СуммаДДС, ДанныеЗаполнения.СуммаДокумента);
		
		Субконто2 = ДанныеЗаполнения.ИсточникПолучатель;
		Если ЗначениеЗаполнено(Субконто2) Тогда
			Счет = УЧ_Сервер.ВернутьСчетПоИсточнику(Субконто2);
			Валюта1 = Субконто2.ВалютаДенежныхСредств;
			Организация = Субконто2.Владелец;
			Если Не ЗначениеЗаполнено(Предприятие) Тогда
				Предприятие = ПП_Сервер.ПолучитьПредприятие(Дата, Субконто2);
			КонецЕсли;
		КонецЕсли;
		ГУИДОснования = ?(ЭтоДанныеРеестра, ДанныеЗаполнения.УИДСтроки, Неопределено);
		ДокОснование = ?(ЗначениеЗаполнено(ДанныеЗаполнения.ЗаявкаНаФинансирование), ДанныеЗаполнения.ЗаявкаНаФинансирование, ДанныеЗаявки.Ссылка);
		ВидОперации = Перечисления.ВидыОперацийДвиженияДС.КассовыйОрдер;
		ПриходРасход = Перечисления.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ;
		
		Если ЭтоДанныеРеестра Тогда
			ДанныеРасшифровки = Реестр.РасшифровкиСтрок.НайтиСтроки(Новый Структура("УИДСтрокиЗаявки", ДанныеЗаполнения.УИДСтроки));
			КоличествоСтрокРасшифровки = ДанныеРасшифровки.Количество();
		Иначе
			Если ДанныеЗаполнения.Свойство("ТабличнаяЧасть") Тогда
				ДанныеРасшифровки = ДанныеЗаполнения.ТабличнаяЧасть;
				КоличествоСтрокРасшифровки = ?(ДанныеЗаполнения.РасшифровкаПлатежа, ДанныеЗаполнения.ТабличнаяЧасть.Количество(), 0);
			Иначе
				КоличествоСтрокРасшифровки = 0;				
			КонецЕсли;			
		КонецЕсли;
		
		Для ТекИндексСтроки = 0 По МАКС(КоличествоСтрокРасшифровки, 1) - 1 Цикл
			Если КоличествоСтрокРасшифровки Тогда
				ТекСтрока = ДанныеРасшифровки[ТекИндексСтроки];
			Иначе
				ТекСтрока = ДанныеЗаполнения;			
			КонецЕсли;
			НоваяСтрока = Проводки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.Сумма = ?(СуммаОстатка, СуммаОстатка, ?(ЭтоДанныеРеестра, ТекСтрока.СуммаДДС, ТекСтрока.СуммаДокумента));
			НоваяСтрока.ФинСтатья = БюджетныйНаСервере.ОбратнаяВнутрихолдинговаяСтатья(ТекСтрока.СтатьяДДС);
			НоваяСтрока.ФинЦФО = Предприятие;
			//НоваяСтрока.ФинПодразделение = ТекСтрока.Подразделение;
			НоваяСтрока.КорСчет = Неопределено;
			НоваяСтрока.Содержание = ДанныеЗаявки.НазначениеПлатежаУчет;
			
			Если ПриходРасход = Перечисления.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ Тогда
				ТекППКонтрагента = ПП_Сервер.ПолучитьПредприятие(ТекущаяДата(), ДанныеЗаполнения.ИсточникПолучатель);
				ТекППОрганизации = ПП_Сервер.ПолучитьПредприятие(ТекущаяДата(), ДанныеЗаполнения.Источник);
				
				//ТекППП = ?(ТекПП = Объект.Предприятие, ТекПП2, ДанныеЗаполнения.Предприятие);
				Если ТекППКонтрагента = ТекППОрганизации Тогда
					НоваяСтрока.КорСчет = ПланыСчетов.Учетный.НайтиПоКоду("57.01");
				Иначе
					//Если Константы.сабУЧ_ИспользоватьПереводы.Получить() Тогда
					//	НоваяСтрока.КорСчет = ПланыСчетов.Учетный.Счет7901();
					//	НоваяСтрока.КорСубконто1 = ТекППОрганизации;	
					//Иначе	
						НоваяСтрока.КорСчет = ПланыСчетов.Учетный.НайтиПоКоду("55.01");
						НоваяСтрока.КорСубконто2 = ТекППОрганизации;
						НоваяСтрока.КорСубконто1 = Предприятие.УчетнаяПолитика.РасходыНеОтносящиесяКПредприятию;
						Если ТипЗнч(НоваяСтрока.КорСубконто2) = Тип("СправочникСсылка.Предприятия") И НЕ НоваяСтрока.КорСубконто2.УчетПоПодразделениям Тогда
							НоваяСтрока.КорСубконто3 = НоваяСтрока.КорСубконто2.ВидДеятельности;						
						КонецЕсли;
					//КонецЕсли;
				КонецЕсли	

			Иначе
				ПомощьВВыбореСчета = ПодобратьСчет(ДанныеЗаполнения, Неопределено, Предприятие);
				Если НЕ ПомощьВВыбореСчета = Неопределено Тогда
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ПомощьВВыбореСчета);
					Если НЕ ЗначениеЗаполнено(НоваяСтрока.КорСчет) Тогда
						РеквизитыСтатьи = БюджетныйНаСервере.ВернутьРеквизиты(ТекСтрока.СтатьяДДС, "СтатьяЗатрат, СчетУчета");
						
						НоваяСтрока.КорСчет = РеквизитыСтатьи.СчетУчета;
						МассивСубконто = УЧ_Сервер.ПолучитьСубконтоМассив(НоваяСтрока.КорСчет);
						Индекс = 1;
						Для каждого ТекСубконто Из МассивСубконто Цикл
							Если ТекСубконто.СодержитТип(Тип("СправочникСсылка.СтатьиЗатрат")) Тогда
								НоваяСтрока["КорСубконто" + Индекс] = РеквизитыСтатьи.СтатьяЗатрат;
							КонецЕсли;
							Индекс = Индекс + 1;
						КонецЦикла; 
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.УЧ_ВыплатаЗП") Тогда
		ВидОперации = Перечисления.ВидыОперацийДвиженияДС.КассовыйОрдер;
		ПриходРасход = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеСотруднику;
		Контрагент = Справочники.Сотрудники.НайтиПоНаименованию("Сотрудники обобщенное");
		ДокОснование = ДанныеЗаполнения.Ссылка; 
		// Заполнение шапки
		НоваяСтрока = Проводки.Добавить();
		НоваяСтрока.КорСчет = ПланыСчетов.Учетный.НайтиПоКоду("70");
		НоваяСтрока.КорСубконто1 = Контрагент;
		НоваяСтрока.КорСубконто2 =  Справочники.ВидыНачисленийОплатыТруда.НайтиПоНаименованию("Оклад");
		НоваяСтрока.КорСубконто3 = ДанныеЗаполнения.Ссылка;
		НоваяСтрока.Сумма = ДанныеЗаполнения.СуммаДокумента;
		//Автор = ДанныеЗаполнения.Автор;
		Комментарий = ДанныеЗаполнения.Комментарий;
		Подразделение = ДанныеЗаполнения.Подразделение;
		Предприятие = ДанныеЗаполнения.Предприятие;
		//Редактор = ДанныеЗаполнения.Редактор;
		СуммаДокумента = ДанныеЗаполнения.СуммаДокумента;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.УЧ_АвансовыйОтчет") Тогда
		// Заполнение шапки
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения,, "Дата, Номер");
		
		ДокОснование = ДанныеЗаполнения.Ссылка;

		ВидОперации = Перечисления.ВидыОперацийДвиженияДС.КассовыйОрдер;
		ПриходРасход = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеСотруднику;
		Контрагент = ДанныеЗаполнения.Сотрудник;
		//ВыдачаВПодОтчет = Истина;
		//СтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("Без НДС", Истина);
		Комментарий = "Перечисление в подотчет";
		Сумма = ДанныеЗаполнения.ТабличнаяЧасть.Итог("Сумма");
		
		НоваяСтрока = Проводки.Добавить();
		НоваяСтрока.КорСчет = ПланыСчетов.Учетный.НайтиПоКоду("71.01");
		НоваяСтрока.КорСубконто1 = Контрагент;
		НоваяСтрока.Сумма = Сумма;
		
		СуммаДокумента = Сумма;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ДокументВыплаты") Тогда
		ДокументВыплаты = ДанныеЗаполнения.ДокументВыплаты;
		ВидОперации = Перечисления.ВидыОперацийДвиженияДС.КассовыйОрдер;
		ПриходРасход = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеСотруднику;
		Контрагент = ДанныеЗаполнения.Сотрудник;
		ДокОснование = ДокументВыплаты; 
		// Заполнение шапки
		НоваяСтрока = Проводки.Добавить();
		НоваяСтрока.КорСчет = ПланыСчетов.Учетный.НайтиПоКоду("70");
		НоваяСтрока.КорСубконто1 = ДанныеЗаполнения.Сотрудник;
		НоваяСтрока.КорСубконто2 =  ДанныеЗаполнения.ВидНачисления;
		//НоваяСтрока.КорСубконто3 = ДанныеЗаполнения.Ссылка;
		//Автор = ДанныеЗаполнения.Автор;
		Комментарий = ДанныеЗаполнения.Комментарий;
		Подразделение = ?(ЗначениеЗаполнено(ДанныеЗаполнения.Подразделение), ДанныеЗаполнения.Подразделение, ДокументВыплаты.Подразделение);
		Предприятие = ДокументВыплаты.Предприятие;
		//Редактор = ДанныеЗаполнения.Редактор;
		СуммаДокумента = ДанныеЗаполнения.Сумма;
		НоваяСтрока.Сумма = СуммаДокумента;
		
		Если ДанныеЗаполнения.Свойство("ЗаявкаНаФинансированиеПоВедомости") Тогда
			ДокОснование = ДанныеЗаполнения.ЗаявкаНаФинансированиеПоВедомости;
			ГУИДОснования = ДанныеЗаполнения.УИДСтроки;
			РеквыЗаявки = БюджетныйНаСервере.ВернутьРеквизиты(ДанныеЗаполнения.ЗаявкаНаФинансированиеПоВедомости, "СтатьяДДС, Источник, ЦФО, Подразделение");
			Субконто1 = РеквыЗаявки.СтатьяДДС;
			Субконто2 = РеквыЗаявки.Источник;
			НоваяСтрока.ФинСтатья = РеквыЗаявки.СтатьяДДС;
			НоваяСтрока.ФинЦФО = РеквыЗаявки.ЦФО; 
			НоваяСтрока.ФинПодразделение = РеквыЗаявки.Подразделение;
		КонецЕсли;

	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда //заполняем из строки ТЧ заявки из Д_ЗаявкаВПлатежку
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка КАК Ссылка,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.НомерСтроки КАК НомерСтроки,
		               |	ЕСТЬNULL(Д_ЗаявкаНаОплатуРасшифровкиСтрок.СтатьяДДС, Д_ЗаявкаНаОплатуЗаявкаБезнал.СтатьяДДС) КАК СтатьяДДС,
		               |	ЕСТЬNULL(Д_ЗаявкаНаОплатуРасшифровкиСтрок.Сумма, Д_ЗаявкаНаОплатуЗаявкаБезнал.СуммаДДС) КАК СуммаДДС,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Контрагент КАК Контрагент,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.ПоПлану КАК ПоПлану,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.ПлатежноеПоручение КАК ПлатежноеПоручение,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.НазначениеПлатежа КАК НазначениеПлатежа,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Организация КАК Организация,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.БанковскийСчет КАК БанковскийСчет,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.СчетКонтрагента КАК СчетКонтрагента,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.НазначениеПлатежаБух КАК НазначениеПлатежаБух,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Основание КАК Основание,
		               |	ЕСТЬNULL(Д_ЗаявкаНаОплатуРасшифровкиСтрок.ЦФО, Д_ЗаявкаНаОплатуЗаявкаБезнал.ЦФО) КАК ЦФО,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.ОтменаОплаты КАК ОтменаОплаты,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Рецензент КАК Рецензент,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Комментарии КАК Комментарии,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Источник КАК Источник,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Ответственный КАК Ответственный,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Примечание КАК Примечание,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Приложение КАК Приложение,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.СтавкаНДС КАК СтавкаНДС,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.ВидОперации КАК ВидОперации,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.КодБК КАК КодБК,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.КодОКАТО КАК КодОКАТО,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.ПоказательОснования КАК ПоказательОснования,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.СтатусСоставителя КАК СтатусСоставителя,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.ПоказательНомера КАК ПоказательНомера,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.ПоказательДаты КАК ПоказательДаты,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.ПоказательТипа КАК ПоказательТипа,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.ПоказательПериода КАК ПоказательПериода,
		               |	ЕСТЬNULL(Д_ЗаявкаНаОплатуРасшифровкиСтрок.Подразделение, Д_ЗаявкаНаОплатуЗаявкаБезнал.Подразделение) КАК Подразделение,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.ЗаявкаНаЗакупку КАК ЗаявкаНаЗакупку,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.ПереносЛимита КАК ПереносЛимита,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.УчОснованиеДругое КАК УчОснованиеДругое,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.ИнвПроект КАК ИнвПроект,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.ВыдачаВПодОтчет КАК ВыдачаВПодОтчет,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.УИДСтроки КАК УИДСтроки,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.УИН КАК УИН,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.СуммаНДС КАК СуммаНДС,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.ЗаявкаНаФинансирование КАК ЗаявкаНаФинансирование,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Валюта КАК Валюта,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.СуммаЧастичнойОплаты КАК СуммаЧастичнойОплаты,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.УжеОплачено КАК УжеОплачено,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.ЗаявленнаяСумма КАК ЗаявленнаяСумма,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Договор КАК Договор,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.СчетВзаиморасчетов КАК СчетВзаиморасчетов,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.СуммаНДСАвтоматическийРасчет КАК СуммаНДСАвтоматическийРасчет,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.КПППлательщика КАК КПППлательщика,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.ВалютнаяСумма КАК ВалютнаяСумма,
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.ИсточникПолучатель КАК ИсточникПолучатель
		               |ИЗ
		               |	Документ.Д_ЗаявкаНаОплату.ЗаявкаБезнал КАК Д_ЗаявкаНаОплатуЗаявкаБезнал
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Д_ЗаявкаНаОплату.РасшифровкиСтрок КАК Д_ЗаявкаНаОплатуРасшифровкиСтрок
		               |		ПО Д_ЗаявкаНаОплатуЗаявкаБезнал.УИДСтроки = Д_ЗаявкаНаОплатуРасшифровкиСтрок.УИДСтрокиЗаявки
		               |			И (НЕ Д_ЗаявкаНаОплатуЗаявкаБезнал.УИДСтроки = """")
		               |ГДЕ
		               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.УИДСтроки = &УИДСтроки";
		
		Запрос.УстановитьПараметр("УИДСтроки", ДанныеЗаполнения.УИДСтроки);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			// Заполнение шапки
			Содержание = Выборка.НазначениеПлатежа + " / " + Выборка.Комментарии;
			Подразделение = Выборка.Подразделение;
			Предприятие = Выборка.Ссылка.Предприятие;
			СуммаДокумента = Выборка.СуммаДДС;
			РасшифровкаОплаты = Выборка.Количество() > 1;
			Субконто2 = Выборка.Источник;
			Если ЗначениеЗаполнено(Субконто2) Тогда
				Счет = УЧ_Сервер.ВернутьСчетПоИсточнику(Субконто2);
				Валюта1 = Субконто2.ВалютаДенежныхСредств;
			КонецЕсли;
			Организация = Субконто2.Владелец;
			Если Не ЗначениеЗаполнено(Предприятие) Тогда
				Предприятие = Субконто2.Предприятие;			
			КонецЕсли;
			Контрагент = Выборка.Контрагент;
			ДокОснование = Выборка.Ссылка;
			Если ТипЗнч(Выборка.Источник) = Тип("СправочникСсылка.Кассы") Тогда
				ВидОперации = Перечисления.ВидыОперацийДвиженияДС.КассовыйОрдер;
			ИначеЕсли Выборка.Источник = Справочники.Кассы.Виртуальный Тогда
				ВидОперации = Перечисления.ВидыОперацийДвиженияДС.Взаимозачет;
			Иначе	
				ВидОперации = Перечисления.ВидыОперацийДвиженияДС.БанковскаяВыписка;
			КонецЕсли;
			Если ВидОперации = Перечисления.ВидыОперацийДвиженияДС.Взаимозачет Тогда
				ПриходРасход = Перечисления.ВидыОперацийПлатежноеПоручение.ВозмещениеОплат;	
			Иначе	
				ПриходРасход = Выборка.ВидОперации;
			КонецЕсли;
			
			ГУИДОснования = ДанныеЗаполнения.УИДСтроки;
			
			//Если ДанныеЗаполнения.РасшифровкаПлатежа Тогда
			//	//приход или расход?
			//	РасшифровкаОплаты = Истина;
			//	
			//	Для каждого ТекСтрока Из ДанныеЗаполнения.ТабличнаяЧасть Цикл
			//		НоваяСтрока = Проводки.Добавить();
			//		//НоваяСтрока.Содержание = ТекСтрока.Содержание;
			//		НоваяСтрока.Сумма = ТекСтрока.Сумма;
			//		НоваяСтрока.ФинСтатья = ТекСтрока.СтатьяДДС;		
			//	КонецЦикла; 
			//Иначе
			РасшифровкаОплаты = Ложь;
			НоваяСтрока = Проводки.Добавить();
			//НоваяСтрока.Содержание = ТекСтрока.Содержание;
			НоваяСтрока.Сумма = Выборка.СуммаДДС;
			НоваяСтрока.ФинСтатья = Выборка.СтатьяДДС;
			//+ Ничуговская 01.11.2019
			//Если Константы.УчетДДСПоЦФО.Получить() Тогда
				ЦФОВыборка = Выборка.ЦФО;
				Если ЗначениеЗаполнено(ЦФОВыборка) Тогда 				
					НоваяСтрока.ФинЦФО = ЦФОВыборка;
					НоваяСтрока.ФинПодразделение = ЦФОВыборка.ВидДеятельности;
				Иначе
					НоваяСтрока.ФинЦФО = Предприятие;
					Если ЗначениеЗаполнено(Подразделение) Тогда
						НоваяСтрока.ФинПодразделение = Подразделение;
					ИначеЕсли ЗначениеЗаполнено(Предприятие) Тогда
						НоваяСтрока.ФинПодразделение = Предприятие.ВидДеятельности;
					КонецЕсли;
				КонецЕсли;
			//КонецЕсли;
			//-
			НоваяСтрока.Содержание = Выборка.НазначениеПлатежа;
			НоваяСтрока.КорСчет = Неопределено;
			Если ВидОперации = Перечисления.ВидыОперацийДвиженияДС.Взаимозачет Тогда
				НоваяСтрока.КорСчет = ПланыСчетов.Учетный.НайтиПоКоду("79.01");
				НоваяСтрока.КорСубконто1 = Выборка.Контрагент;
				НоваяСтрока.КорСубконто2 = Выборка.Договор;
			Иначе
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.КорСчет) Тогда
					РеквизитыСтатьи = БюджетныйНаСервере.ВернутьРеквизиты(Выборка.СтатьяДДС, "СтатьяЗатрат, СчетУчета");
					
					НоваяСтрока.КорСчет = РеквизитыСтатьи.СчетУчета;
					МассивСубконто = УЧ_Сервер.ПолучитьСубконтоМассив(НоваяСтрока.КорСчет);
					Индекс = 1;
					Для каждого ТекСубконто Из МассивСубконто Цикл
						Если ТекСубконто.СодержитТип(Тип("СправочникСсылка.СтатьиЗатрат")) Тогда
							НоваяСтрока["КорСубконто" + Индекс] = РеквизитыСтатьи.СтатьяЗатрат;
						КонецЕсли;
						Индекс = Индекс + 1;
					КонецЦикла; 
				КонецЕсли;	
			КонецЕсли;
			//КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//}}__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
	
	сабОбщегоНазначенияБУХ.сабОбработкиЗаполненияУчпетныхДокументовОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
КонецПроцедуры

Процедура ОбработкаЗаполненияСФормы(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт

	ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);	

КонецПроцедуры
