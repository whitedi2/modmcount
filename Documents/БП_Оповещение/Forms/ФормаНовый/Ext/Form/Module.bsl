&НаСервере
Функция ПроверкаГруппы(ВыбранноеЗначение)

	Возврат ВыбранноеЗначение.ЭтоГруппа;	

КонецФункции // ()

 &НаСервере
 Процедура ДобавитьГруппу(ВыбранноеЗначение)
  Запрос = Новый Запрос;
  Запрос.Текст = "ВЫБРАТЬ
                 |	Пользователи.Ссылка
                 |ИЗ
                 |	Справочник.Пользователи КАК Пользователи
                 |ГДЕ
                 |	Пользователи.Родитель = &Родитель
                 |	И Пользователи.ЭтоГруппа = ЛОЖЬ";
  
  Запрос.УстановитьПараметр("Родитель", ВыбранноеЗначение);
  
  Результат = Запрос.Выполнить();
  Выборка = Результат.Выбрать();
  
  Пока Выборка.Следующий() Цикл
  	НоваяСтрока = Объект.СписокИсполнителей.Добавить();
	НоваяСтрока.Исполнитель = Выборка.Ссылка;  
  КонецЦикла; 
 КонецПроцедуры
 
&НаКлиенте
Процедура СписокИсполнителейИсполнительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	//Если выбрана группа
	Если Не ВыбранноеЗначение = Неопределено Тогда
		Если ПроверкаГруппы(ВыбранноеЗначение) Тогда
			СтандартнаяОбработка = Ложь;
			ДобавитьГруппу(ВыбранноеЗначение);			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Автор = БюджетныйНаСервере.ПолучитьПользователя();	
	КонецЕсли;
	Если Объект.Стартован Тогда
		Элементы.Описание.ТолькоПросмотр = Истина;
		Элементы.СписокИсполнителей.ТолькоПросмотр = Истина;
		Элементы.Документ.ТолькоПросмотр = Истина;
	Иначе
		Элементы.СписокИсполнителейИсполнено.Видимость = Ложь;
		Элементы.СписокИсполнителейКомментарии.Видимость = Ложь;
		Элементы.СписокИсполнителейДатаВыполнения.Видимость = Ложь;
	КонецЕсли;
	
	АдресХранилища = ВХранилище(КлючУникальности);
	Если НЕ АдресХранилища = Неопределено Тогда
		ДанныеХранилища = ПолучитьИзВременногоХранилища(АдресХранилища);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеХранилища) Тогда
		Отчет = ДанныеХранилища.Заголовок;
	КонецЕсли;
	
	Элементы.Гиперссылка.Видимость = ЗначениеЗаполнено(Объект.Гиперссылка);
	Элементы.Отчет.Видимость = ЗначениеЗаполнено(Отчет);
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.Файлы"));
	Массив.Добавить(Тип("ДокументСсылка.Д_ЗаявкаНаОплату"));
	Массив.Добавить(Тип("ДокументСсылка.Д_СлужебнаяЗаписка"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив);
	
	Элементы.Документ.ОграничениеТипа = ОписаниеТиповЧ;
	
КонецПроцедуры

&НаСервере
Функция ВХранилище(КлючУникальности)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Данные = Объект.Ссылка.ПолучитьОбъект().СтруктураПараметров.Получить();
		Если Данные = Неопределено Или НЕ Данные.Свойство("Заголовок") Тогда
			Возврат Неопределено;
		КонецЕсли;	
		Возврат ПоместитьВоВременноеХранилище(Данные);
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;
КонецФункции


&НаКлиенте
Процедура СписокИсполнителейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Объект.Стартован Тогда
		СтандартнаяОбработка = Ложь;
		Если Не ПустаяСтрока(Элемент.ТекущиеДанные.Исполнитель) Тогда
			ПараметрыФормы = Новый Структура("ВладелецФайла", Объект.Ссылка);
			
			ВидимыеАвторыФайлов = Новый Массив;
			ВидимыеАвторыФайлов.Добавить(Элемент.ТекущиеДанные.Исполнитель);     
			ПараметрыФормы.Вставить("ВидимыеАвторыФайлов", ВидимыеАвторыФайлов);
			
			ОткрытьФорму("Справочник.Файлы.ФормаСписка", ПараметрыФормы);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ОтправитьИЗакрытьСервер()
	НачатьТранзакцию();
	Для каждого ТекИсполнитель Из Объект.СписокИсполнителей  Цикл
		
		Задача = Задачи.Задача.СоздатьЭлемент();		
		Задача.Заявка = Объект.Ссылка;
		Задача.Дата = ТекущаяДата();
		Задача.Наименование = Объект.Тема;
		
		//Задача.БизнесПроцесс  = ЭтотОбъект.Ссылка;
		//Задача.ТочкаМаршрута  = ТочкаМаршрутаБизнесПроцесса;
		
		Задача.Автор = Объект.Автор;
		Задача.Описание = Объект.Описание;
		Задача.Исполнитель = ТекИсполнитель.Исполнитель;
		Задача.Записать();
		
		//ФормируемыеЗадачи.Добавить(Задача);
		
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры



&НаКлиенте
Процедура ОтправитьИЗакрыть(Команда)
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;	
	КонецЕсли;
	Если Объект.Стартован Тогда
		Сообщить("Бизнес-процесс уже стартовал ранее.");
		Возврат;	
	КонецЕсли;
	Объект.Стартован = Истина;
	Если Записать() Тогда
		ОтправитьИЗакрытьСервер();
		//ОповеститьОбИзменении(Объект.Ссылка);
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиПоСсылке(Команда)
	ПерейтиПоНавигационнойСсылке(Объект.ГиперссылкаСтрока);
КонецПроцедуры

&НаКлиенте
Процедура СсылкаНажатие(Элемент, СтандартнаяОбработка)
	ПерейтиПоНавигационнойСсылке(Объект.ГиперссылкаСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ПодборПользователя(Команда)
	ОткрытьФормумодально("Справочник.Пользователи.ФормаВыбора", Новый Структура("РежимВыбора, РасширенныйПодбор, ЗакрыватьПриВыборе", Истина, Истина, Ложь),Элементы.СписокИсполнителей); 
КонецПроцедуры

&НаКлиенте
Процедура ОтчетНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	АдресХранилища = ВХранилище(КлючУникальности);
	Если НЕ АдресХранилища = Неопределено Тогда
		ДанныеХранилища = ПолучитьИзВременногоХранилища(АдресХранилища);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Сформировать", Истина);
	Если ДанныеХранилища.Свойство("ИмяОтчета") Тогда
		ТекФорма = ПолучитьФорму("Отчет." + ДанныеХранилища.ИмяОтчета + ".Форма", ПараметрыФормы);
		ТекФорма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Использование = Истина;
		ТекФорма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Значение = ДанныеХранилища.Параметр0;
		ТекФорма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[1].Использование = Истина;
		ТекФорма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[1].Значение = ДанныеХранилища.Параметр1;
		ТекФорма.Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[2].Использование = Истина;
		ТекФорма.Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[2].Значение = ДанныеХранилища.Параметр2;
		
		ТекФорма.СкомпоноватьРезультат();
		ТекФорма.Открыть();
		Оповестить("ОбъединитьЯчейки");
		
	ИначеЕсли ДанныеХранилища.Свойство("ИмяФормыДокумента") Тогда 
		
		ТекФорма = ПолучитьФорму("Документ." + ДанныеХранилища.ИмяФормыДокумента);
		ТекФорма.Открыть();
		
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьЗначение(Объект.Гиперссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ОбновитьСписокЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ПрикрепленныеФайлы" Тогда	
		сабОбщегоНазначенияКлиент.ОбновитьКоличествоПрикрепленныхФайлов(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепленныеФайлы(Команда)
	ПараметрыФормы = Новый Структура; 
	ПараметрыФормы.Вставить("ВладелецФайла", Объект.Ссылка);
	
	ВидимыеАвторы = Новый Массив;
	ВидимыеАвторы.Добавить(Объект.Автор);
	ВидимыеАвторы.Добавить(БюджетныйНаСервере.ПолучитьПользователя());
	ПараметрыФормы.Вставить("ВидимыеАвторы", ВидимыеАвторы);
	
	ОткрытьФорму("Справочник.Файлы.ФормаСписка", ПараметрыФормы, Объект.Ссылка);
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	сабОбщегоНазначения.ОбновитьКоличествоПрикрепленныхФайловСервер(ЭтаФорма);
	
	Элементы.ИсторияПереписки.Видимость = ЗначениеЗаполнено(Объект.Документ);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Если ЗначениеЗаполнено(Объект.Документ) И ТипЗнч(Объект.Документ) = Тип("СправочникСсылка.Файлы") Тогда
		Если Объект.Документ.ДокументыПоФайлу.Найти(Объект.Ссылка, "ВладелецФайла") = Неопределено Тогда
			ТекФайлОбъект = Объект.Документ.ПолучитьОбъект();
			НоваяСтрока = ТекФайлОбъект.ДокументыПоФайлу.Добавить();	
			НоваяСтрока.ВладелецФайла = Объект.Ссылка;
			ТекФайлОбъект.Записать();
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Группа5ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ИсторияПереписки И Объект.Документ <> Неопределено Тогда
		История = БПСервер.ЗаполнитьИсториюНаСервере(Объект.Документ);
	КонецЕсли;		
	
КонецПроцедуры

