///////////////////////////////////общие процедуры и функции
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//если уже есть БП по документу, то не отражаем кнопки запуска БП
	
		
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекБП = БПСервер.НайтиТекущийБПСервер(Объект.Ссылка);
		Если НЕ ТекБП = Неопределено Тогда
			ТекБПСтруРекв = БюджетныйНаСервере.ВернутьРеквизиты(ТекБП, "ОснованиеЗаблокирован, Стартован, ОтправлятьВсем");
		КонецЕсли;
	Иначе
		ТекБП = Неопределено;
		ТекБПСтруРекв = Новый Структура;
		ВсемСразу = Неопределено;
	КонецЕсли;
	
	Если НЕ БюджетныйНаСервере.РольДоступнаСервер("Администратор") И НЕ ТекБП = Неопределено Тогда
		ТекДоступность = ТекБПСтруРекв.ОснованиеЗаблокирован;
		Если ТекДоступность = Неопределено Тогда
			ТекДоступность = ТекБПСтруРекв.Стартован;
		КонецЕсли;
		БюджетныйНаКлиенте.ФормаТолькоПросмотр(Объект, ЭтаФорма, ТекДоступность);
		Элементы.ФормаДокументСогласовать.Заголовок = "Отправить и закрыть";
		Если ЗначениеЗаполнено(ТекБП) Тогда
			Элементы.ДобавитьКому.Доступность = 1 - ТекДоступность;
			Элементы.ФормаДокументСогласовать.Доступность = 1 - ТекДоступность;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ВидимостьВсем.Подсказка = "Документ будет отражаться в списке у всех пользователей, которым доступно предприятие.";
	//Элементы.ВидимостьВсем.Заголовок = "Доступен пользователям предприятиия: " + Строка(Объект.Предприятие);
	ПредприятиеПриИзменении(Неопределено);

	Если Не РежимВосстановления Тогда
		ЭтаФорма.ПодключитьОбработчикОжидания("АвтосохранениеРеквизитовФормыНаКлиенте", 30);
	КонецЕсли;
	
	//формируем красивые списки
	ДоступныеПредприятия = БюджетныйНаСервере.ПолучитьПредприятия();
	Если ДоступныеПредприятия.Количество() < 15 Тогда
		БюджетныйНаКлиенте.ЗаполнитьСписокРеквизитаДубль2(ЭтаФорма, "СписокВыбора_Предприятие", ДоступныеПредприятия, Объект.Предприятие);
	КонецЕсли;
	
	// заголовки показателей
	ЗаполнитьЗаголовкиПоказателейВЗависимостиОтЕдиницИзмерения(Истина);
		
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда
		Если ПустаяСтрока(Объект.Кому) Тогда
			Объект.Кому = Справочники.Пользователи.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Если Не Объект.Ссылка.Пустая() Тогда
		Элементы.ОтслеживатьЗаявку.Пометка = БПСервер.ПроверитьОтслеживаниеЗаявки(Объект.Ссылка, ПараметрыСеанса.ТекущийПользователь);
	КонецЕсли;
	
	
	сабОбщегоНазначения.ОбновитьКоличествоПрикрепленныхФайловСервер(ЭтаФорма);
	Если Параметры.Свойство("РежимВосстановления") и Параметры.РежимВосстановления Тогда
		сабОбщегоНазначения.ВосстановлениеРеквизитовФормы(ЭтаФорма);
		РежимВосстановления = Истина;
	Иначе 
		РежимВосстановления = Ложь;
	КонецЕсли;
		
	БюджетныйНаСервере.ДействияПриСозданииФормыДокумента(ЭтаФорма, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Объект.Комментарий = "Установка условий: ";
	Для каждого ТекСтрока Из Объект.УсловияКлиента Цикл
		Объект.Комментарий = Объект.Комментарий  + Строка(ТекСтрока.Контрагент) + ", "; 	
	КонецЦикла;
	Объект.Комментарий = Лев(Объект.Комментарий, СтрДлина(Объект.Комментарий) - 2);
	
	Отказ = 1 - ПроверитьЗаполнение();
	сабОбщегоНазначения.ОчиститьАвтосохраненияОбъекта(Объект.Ссылка);
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьКому(Команда)
	Если НЕ Объект.Рецензенты.Количество() И НЕ ПустаяСтрока(Объект.Кому) И ТипЗнч(Объект.Кому) = Тип("СправочникСсылка.Пользователи") Тогда
		НоваяСтрока = Объект.Рецензенты.Добавить();
		НоваяСтрока.Пользователь = Объект.Кому;
	КонецЕсли;
	
	ТекПользователь = ОткрытьФормуМодально("Справочник.Пользователи.ФормаВыбора");
	Если НЕ ТекПользователь = Неопределено Тогда
		
		НетВБазе = БюджетныйНаСервере.ВернутьРеквизит(ТекПользователь, "НеУчаствуетВДокументообороте");
		Если НетВБазе Тогда
			Если Вопрос("Пользователь " + Строка(ТекПользователь) + " не участвует в документообороте, т.к. не имеет доступа к базе. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				Возврат;	
			КонецЕсли;	
		КонецЕсли;	
		
		НоваяСтрока = Объект.Рецензенты.Добавить();
		НоваяСтрока.Пользователь = ТекПользователь;
	Иначе
		Возврат;
	КонецЕсли;
	СформироватьКому(ТекПользователь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомуПриИзменении(Элемент)
	//Проверяем пользователей по наименованию. разделитель ;
	Если ТипЗнч(Объект.Кому) = Тип("Строка") И НЕ ПустаяСтрока(Объект.Кому) Тогда
		ТекСтрока = СтрЗаменить(Объект.Кому, "; ", ";");
		МассивИмен = Новый Массив;
		ТекИмя = "";
		Для ТекСимвол = 1 По СтрДлина(ТекСтрока) Цикл
			
			Если Сред(ТекСтрока, ТекСимвол, 1) = ";" Тогда
				МассивИмен.Добавить(ТекИмя);
				ТекИмя = "";
			Иначе
				ТекИмя = ТекИмя + Сред(ТекСтрока, ТекСимвол, 1);			
			КонецЕсли;	
			
		КонецЦикла;
		МассивИмен.Добавить(ТекИмя);
		Для каждого ТекИмя Из МассивИмен Цикл	
			Если НайтиИмя(ТекИмя) = Неопределено Тогда
				Предупреждение("Пользователь " + Строка(ТекИмя) + " не найден в справочнике.");
				СформироватьКому();
				Возврат;
			КонецЕсли;		
		КонецЦикла;
		СформироватьТЧ(МассивИмен);
	Иначе
		НетВБазе = БюджетныйНаСервере.ВернутьРеквизит(Объект.Кому, "НеУчаствуетВДокументообороте");
		Если НетВБазе Тогда
			Если Вопрос("Пользователь " + Строка(Объект.Кому) + " не участвует в документообороте, т.к. не имеет доступа к базе. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				Объект.Кому = ПользовательПустаяСсылка();
				Возврат;	
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЕсли;
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьКому(ТекПользователь = Неопределено)
	
	//Если Объект.Рецензенты.Количество() > 1 Тогда
	//	СтрокаКому = "";
	//	Для каждого ТекРецензент Из Объект.Рецензенты Цикл
	//		СтрокаКому = СтрокаКому + Строка(ТекРецензент.Пользователь) + "; ";		
	//	КонецЦикла;
	//	СтрокаКому = Лев(СтрокаКому, СтрДлина(СтрокаКому) - 2);
	//	Объект.Кому = СтрокаКому;
	//Иначе
	//	Если НЕ ТекПользователь = Неопределено Тогда
	//		Объект.Кому = ТекПользователь;
	//	КонецЕсли;
	//КонецЕсли;
	
	Если Элементы.ДобавитьКому.Видимость Тогда
		СтрокаКому = "";
		Для каждого ТекРецензент Из Объект.Рецензенты Цикл
			СтрокаКому = СтрокаКому + Строка(ТекРецензент.Пользователь) + "; ";		
		КонецЦикла;
		СтрокаКому = Лев(СтрокаКому, СтрДлина(СтрокаКому) - 2);
		Объект.Кому = СтрокаКому;
	Иначе
		Объект.Кому = ТекПользователь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьТЧ(МассивИмен)
	Объект.Рецензенты.Очистить();
	Для каждого ТекПользователь Из МассивИмен Цикл
		НоваяСтрока = Объект.Рецензенты.Добавить();
		НоваяСтрока.Пользователь = НайтиИмя(ТекПользователь);	
	КонецЦикла; 
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиИмя(ТекИмя)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Пользователи.Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", ТекИмя);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции // ()

&НаКлиенте
Процедура КомуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.Кому = "" И Элементы.ДобавитьКому.Видимость = Ложь Тогда
		Объект.Кому = ПользовательПустаяСсылка();
	КонецЕсли;	
		
	Если ТипЗнч(Объект.Кому) = Тип("Строка") Тогда
		СтандартнаяОбработка = Ложь;
		МассивСтарыхРецензентов = Новый Массив;
		Для каждого ТекРецензент Из Объект.Рецензенты Цикл
			МассивСтарыхРецензентов.Добавить(ТекРецензент.Пользователь);		
		КонецЦикла; 
		
		МассивРецензентов = ОткрытьФормуМодально("Документ.Д_СлужебнаяЗаписка.Форма.ФормаРецензенты", Новый Структура("Рецензенты", МассивСтарыхРецензентов));
		Если НЕ МассивРецензентов = Неопределено Тогда
			Объект.Рецензенты.Очистить();
			Для каждого ТекРецензент Из МассивРецензентов Цикл
				НоваяСтрока = Объект.Рецензенты.Добавить();
				НоваяСтрока.Пользователь = ТекРецензент;			
			КонецЦикла;
			СформироватьКому();
		КонецЕсли;
	ИначеЕсли Объект.Кому = Неопределено Тогда
		Объект.Кому = ПользовательПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомуОчистка(Элемент, СтандартнаяОбработка)
	Объект.Рецензенты.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеПриИзменении(Элемент)
	Элементы.ВидимостьВсем.Подсказка = "Документ будет отражаться в списке у всех пользователей, которым доступно предприятие <" + Строка(Объект.Предприятие) + ">.";
	//Элементы.ВидимостьВсем.Заголовок = "Доступен пользователям предприятиия: " + Строка(Объект.Предприятие);
	
	СтруктураДанных = БюджетныйНаСервере.ВернутьРеквизиты(Объект.Предприятие, "УчетПоПодразделениям, ВидДеятельности"); 
	
	Если НЕ СтруктураДанных = Неопределено Тогда
		Элементы.Подразделение.Доступность = СтруктураДанных.УчетПоПодразделениям;
		Если НЕ Элемент = Неопределено Тогда 
			Если СтруктураДанных.УчетПоПодразделениям Тогда
				Объект.Подразделение = СтруктураДанных.ВидДеятельности;
			Иначе
				Объект.Подразделение = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если СписокВыбора_Предприятие.Количество() Тогда
		ТекЗначение = ВыбратьИзСписка(СписокВыбора_Предприятие, Элемент, СписокВыбора_Предприятие.НайтиПоЗначению(Объект.Предприятие));	
		БюджетныйНаКлиенте.ПриНачалеВыбораРеквизитаВСпискеДубль2(ЭтаФорма, "СписокВыбора_Предприятие", ТекЗначение, "Предприятия", Объект.Предприятие, СтандартнаяОбработка, Ложь);
		ПредприятиеПриИзменении(Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ЗакрытьФорму" Тогда
		//ЭтаФорма.Записать();
		ЭтаФорма.Закрыть();
	ИначеЕсли ИмяСобытия = "УстановитьДоступность" Тогда
		Объект.ТекущийБизнесПроцесс = Параметр.ТекущийБизнесПроцесс;
		Записать();
	ИначеЕсли ИмяСобытия = "Пересчитать" Тогда
		Закрыть();
	ИначеЕсли ИмяСобытия = "ПрикрепленныеФайлы" Тогда	
		сабОбщегоНазначенияКлиент.ОбновитьКоличествоПрикрепленныхФайлов(ЭтаФорма);
	ИначеЕсли ИмяСобытия = "РазрешитьРедактированиеФормы" Тогда	
		ПриОткрытии(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	сабОбщегоНазначенияКлиент.ПослеЗаписиАвтосохраняемойФормы(ЭтаФорма);
КонецПроцедуры

&НаСервереБезКонтекста
Функция  ПользовательПустаяСсылка()
	
	Возврат Справочники.Пользователи.ПустаяСсылка();
	
КонецФункции

&НаКлиенте
Процедура АвтосохранениеРеквизитовФормыНаКлиенте()
	
	Если НЕ Модифицированность Тогда
		Возврат;
	КонецЕсли;
		
	АвтосохранениеРеквизитовФормыНаСервере();		
	
КонецПроцедуры

&НаСервере 
Процедура АвтосохранениеРеквизитовФормыНаСервере()
	
	сабОбщегоНазначения.АвтосохранениеРеквизитовФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если НЕ ЗавершениеРаботы И Не РежимВосстановления Тогда
		сабОбщегоНазначения.ОчиститьАвтосохраненияОбъекта(Объект.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если СписокВыбора_Подразаделение.Количество() Тогда
		ТекЗначение = ВыбратьИзСписка(СписокВыбора_Подразаделение. Элемент, СписокВыбора_Подразаделение.НайтиПоЗначению(Объект.Подразделение));	
		БюджетныйНаКлиенте.ПриНачалеВыбораРеквизитаВСпискеДубль2(ЭтаФорма, "СписокВыбора_Подразаделение", ТекЗначение, "ВидыДеятельности", Объект.Подразделение, СтандартнаяОбработка, Ложь);
	КонецЕсли;

КонецПроцедуры

////////////////////конец общих процедур и функций


&НаКлиенте
Процедура Граница(Команда)
	Для Каждого Область Из ТабДок.ВыделенныеОбласти Цикл
		ЛинияНов = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		ЛинияНовОчистить = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
		Если Область.ГраницаСлева = ЛинияНов Тогда
			Область.ГраницаСлева = ЛинияНовОчистить;
		Иначе
			Область.ГраницаСлева = ЛинияНов;
		КонецЕсли;
		Если Область.ГраницаСправа = ЛинияНов Тогда
			Область.ГраницаСправа = ЛинияНовОчистить;
		Иначе
			Область.ГраницаСправа = ЛинияНов;
		КонецЕсли;
		Если Область.ГраницаСнизу = ЛинияНов Тогда
			Область.ГраницаСнизу = ЛинияНовОчистить;
		Иначе
			Область.ГраницаСнизу = ЛинияНов;
		КонецЕсли;
		Если Область.ГраницаСверху = ЛинияНов Тогда
			Область.ГраницаСверху = ЛинияНовОчистить;
		Иначе
			Область.ГраницаСверху = ЛинияНов;
		КонецЕсли;
		//Если ТипЗнч(Область) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		//	Для ИндексСтрока = Область.Верх По Область.Низ Цикл
		//		Для ИндексКолонка = Область.Лево По Область.Право Цикл
		//			Попытка
		//				Сумма = Сумма + Число(СтрЗаменить(Результат.Область("R" + Формат(ИндексСтрока, "ЧГ=0") + "C" + Формат(ИндексКолонка, "ЧГ=0")) .Текст, " ", ""));
		//			Исключение
		//			КонецПопытки;
		//		КонецЦикла;
		//	КонецЦикла;
		//КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязь()
	//Если Объект.ЦФОвТЧ Тогда
	//	Связь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы.СЗ.ТекущиеДанные.ЦФО");	
	//ИначеЕсли Объект.ЦФО.Пустая() Тогда
	//	Связь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Предприятие");
	//Иначе	
	//	Связь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.ЦФО");
	//КонецЕсли;
	//
	//МассивСвязей = Новый Массив;
	//МассивСвязей.Добавить(Связь);
	//Элементы.СЗПодразделение.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязей);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦФОПриИзменении(Элемент)
	УстановитьСвязь();
КонецПроцедуры

&НаКлиенте
Процедура СЗПодразделениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Строка(Элементы.СЗ.ТекущиеДанные.ЦФО) = "Казна" ИЛИ Строка(Объект.ЦФО) = "Казна" Тогда
		СтандартнаяОбработка = Ложь;
		ТекСтатья = Элементы.СЗ.ТекущиеДанные.СтатьяБДДС;
		ТекПодразделение = Элементы.СЗ.ТекущиеДанные.ВидДеятельности;
		
		аа = ПолучитьФорму("Справочник.СтруктураПредприятия.ФормаВыбора", Новый Структура("ТекущаяСтрока", ТекПодразделение), Элемент);
		НовыйОтбор = аа.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Владелец");
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		
		НовыйОтбор.ПравоеЗначение = ?(ПустаяСтрока(БюджетныйНаСервере.ВернутьРеквизит(Объект.Предприятие, "Родитель")), Объект.Предприятие, БюджетныйНаСервере.ВернутьРеквизит(Объект.Предприятие, "Родитель"));
		//Иначе
		//	ТекПП = ?(Строка(Элементы.СЗ.ТекущиеДанные.ЦФО) = "Банк оф.", БюджетныйНаСервере.ВернутьРеквизит(Элементы.СЗ.ТекущиеДанные.ЦФО, "Родитель"), Элементы.СЗ.ТекущиеДанные.ЦФО);
		//	
		//	НовыйОтбор.ПравоеЗначение = ТекПП;
		аа.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СЗЦФОНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекПП = ?(ПустаяСтрока(Элементы.СЗ.ТекущиеДанные.ЦФО), Объект.Предприятие, Элементы.СЗ.ТекущиеДанные.ЦФО);
	ТекПП = ?(ПустаяСтрока(БюджетныйНаСервере.ВернутьРеквизит(ТекПП, "Родитель")), ТекПП,БюджетныйНаСервере.ВернутьРеквизит(ТекПП, "Родитель")); 
	ФормаВыб = ПолучитьФорму("Справочник.Предприятия.Форма.ФормаВыбора", Новый Структура("ТекущаяСтрока", ТекПП) , Элемент);
	ФормаВыб.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	ОткрытьФормумодально("Справочник.Пользователи.ФормаВыбора", Новый Структура("РежимВыбора, РасширенныйПодбор, ЗакрыватьПриВыборе", Истина, Истина, Ложь),Элементы.Адресаты); 
КонецПроцедуры

&НаКлиенте


&НаКлиенте
Процедура ОтслеживатьЗаявку(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Перед тем как отслеживать заявку её нужно записать!";
		Сообщение.Сообщить();
	Иначе	
		ОтслеживатьСЗ = НЕ Элементы.ОтслеживатьЗаявку.Пометка;
		БПСервер.ОтслеживатьЗаявкуНаСервере(ОтслеживатьСЗ, Объект.Ссылка);
		Элементы.ОтслеживатьЗаявку.Пометка = ОтслеживатьСЗ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗамещенныеПриказыПриказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Форма = ПолучитьФорму("Документ.Д_СлужебнаяЗаписка.ФормаВыбора", , Элемент);
	ЭлементОтбора = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ВидСЗ");	
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ПравоеЗначение = ПредопределенноеЗначение("Справочник.Д_ВидыВнутреннихДокументов.Приказ");
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	ТекЗначения = БюджетныйНаСервере.ПолучитьТекущиеУсловияКонтрагента(Объект.Контрагент, Объект.Дата);
	ЗаполнитьЗначенияСвойств(Объект, ТекЗначения);
КонецПроцедуры



&НаКлиенте
Процедура ПрямоеУвеличениеБюджета(Команда)
	
	ТекДанные = Элементы.СЗ.ТекущиеДанные;
	ТекСтрока = Элементы.СЗ.ТекущаяСтрока;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ТекДанные.ЦФО) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Предприятие не заполнено";
		Сообщение.Поле = "Объект.СЗ[0].Предприятие";
		Сообщение.Сообщить();
	КонецЕсли;	
	
	Элементы.ПрямоеУвеличениеБюджетаНадпись.Заголовок = РассчитатьУвеличениеБюджетаНаСервере(ТекДанные.ЦФО);
	
КонецПроцедуры

&НаСервере
Функция РассчитатьУвеличениеБюджетаНаСервере(ТекПредприятие)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(Д_СлужебнаяЗапискаСЗ.СуммаБДДС, 0)) КАК Сумма,
	|	Д_СлужебнаяЗапискаСЗ.ЦФО
	|ИЗ
	|	Документ.Д_СлужебнаяЗаписка.СЗ КАК Д_СлужебнаяЗапискаСЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Д_ТекущаяЗадача КАК Д_ТекущаяЗадача
	|		ПО Д_СлужебнаяЗапискаСЗ.Ссылка = Д_ТекущаяЗадача.Документ
	|ГДЕ
	|	Д_СлужебнаяЗапискаСЗ.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И Д_СлужебнаяЗапискаСЗ.ЦФО = &Предприятие
	|	И Д_СлужебнаяЗапискаСЗ.ВидДвижения = ""Прямое увеличение""
	|	И НЕ Д_СлужебнаяЗапискаСЗ.Ссылка.ПометкаУдаления
	|	И НЕ ЕСТЬNULL(Д_ТекущаяЗадача.ТекущаяЗадача, """") = ""Отклонено!""
	|
	|СГРУППИРОВАТЬ ПО
	|	Д_СлужебнаяЗапискаСЗ.ЦФО";
	Запрос.УстановитьПараметр("ДатаНач", НачалоМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("Предприятие", ТекПредприятие);
	Выборка = Запрос.Выполнить().Выбрать();
	ЗначениеПрямогоУвеличения = 0;
	Пока Выборка.Следующий() Цикл
		ЗначениеПрямогоУвеличения = Выборка.Сумма;
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Предприятия.Лимит
	|ИЗ
	|	Справочник.Предприятия КАК Предприятия
	|ГДЕ
	|	Предприятия.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ТекПредприятие);
	Выборка = Запрос.Выполнить().Выбрать();
	МаксимальныйЛимит = 0;
	Пока Выборка.Следующий() Цикл
		МаксимальныйЛимит = Выборка.Лимит;
	КонецЦикла;	
	
	ВозможноеУвеличениеБюджета = МаксимальныйЛимит - ЗначениеПрямогоУвеличения;
	
	Возврат "Месячное значение прямого увеличения бюджета: " + ЗначениеПрямогоУвеличения + ". Возможно увеличение не более чем на " + ВозможноеУвеличениеБюджета;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДоговоры(Команда)
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ЗаполнитьДоговорыСервер();
	Иначе	
		Предупреждение("Укажите контрагента для заполнения таблицы договоров и протоколов.");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПротоколы()
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ЗаполнитьПротоколыСервер();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПротоколыСервер()
	СписокДоговоров = Объект.ДоговорыКонтрагента.Выгрузить().ВыгрузитьКолонку("ТекДоговор");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КС_ПротоколыСогласования.Ссылка КАК ТекПротокол,
	               |	КС_ПротоколыСогласования.Код,
	               |	КС_ПротоколыСогласования.Дата,
	               |	КС_ПротоколыСогласования.Цена,
	               |	КС_ПротоколыСогласования.СтавкаВерха,
	               |	КС_ПротоколыСогласования.Предприятие,
	               |	КС_ПротоколыСогласования.Владелец КАК ТекДоговор
	               |ИЗ
	               |	Справочник.КС_ПротоколыСогласования КАК КС_ПротоколыСогласования
	               |ГДЕ
	               |	КС_ПротоколыСогласования.Владелец В(&Владелец)";
	
	Запрос.УстановитьПараметр("Владелец", СписокДоговоров);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если НЕ Объект.ПротоколыДоговоров.НайтиСтроки(Новый Структура("ТекДоговор", Выборка.ТекДоговор)).Количество()  Тогда
			НоваяСтрока = Объект.ПротоколыДоговоров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		ИначеЕсли Выборка.Дата > НоваяСтрока.ТекПротокол.Дата И НЕ Выборка.Дата > ТекущаяДата() Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЕсли;
		
	КонецЦикла;
	
	
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьДоговорыСервер()
	Объект.ДоговорыКонтрагента.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК ТекДоговор,
	|	ДоговорыКонтрагентов.Предприятие,
	|	ДоговорыКонтрагентов.Отсрочка КАК ТекущаяОтсрочка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Владелец
	|	И ДоговорыКонтрагентов.ДатаОкончанияДоговора > &ДатаОкончанияДоговора";
	
	Запрос.УстановитьПараметр("Владелец", Объект.Контрагент);
	Запрос.УстановитьПараметр("ДатаОкончанияДоговора", ТекущаяДата());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.ДоговорыКонтрагента.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияКлиентаКонтрагентПриИзменении(Элемент)
	ТекДанные = Элементы.УсловияКлиента.ТекущиеДанные;
	ТекЗначения = БюджетныйНаСервере.ПолучитьТекущиеУсловияКонтрагента(ТекДанные.Контрагент, ТекДанные.Дата);
	ЗаполнитьЗначенияСвойств(ТекДанные, ТекЗначения);
	ТекДанные.ЦенаЗаголовок = "Цена, руб/" + ТекДанные.ТекЕдИзмерения;
	ТекДанные.ВерхЗаголовок = "Верх, руб/" + ТекДанные.ТекЕдИзмерения;
	Если ДатаНеКорректна(ТекДанные.Контрагент, ТекДанные.Дата) Тогда
		Предупреждение("Внимание! По контрагенту """ + Строка(ТекДанные.Контрагент) + """  есть условия позже даты " + Формат(ТекДанные.Дата, "ДФ=dd.MM.yyyy") + "!");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияКлиентаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекДанные = Элементы.УсловияКлиента.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекДанные.Дата) Тогда
		ТекДанные.Дата = Объект.Дата;	
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДатаНеКорректна(Контрагент, Дата)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КС_УсловияКонтрагента.ВнутреннийДокумент
	|ИЗ
	|	РегистрСведений.КС_УсловияКонтрагента КАК КС_УсловияКонтрагента
	|ГДЕ
	|	КС_УсловияКонтрагента.Период > &Период
	|	И КС_УсловияКонтрагента.Контрагент = &Контрагент";
	
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Возврат Выборка.Количество();
	
КонецФункции // ()

&НаКлиенте
Процедура СЗПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	//РассчитатьФактПоЗаявкам(); закоментил Д1 01.07.13. Перенес в команду "Расчитать"
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьФактПоЗаявкам()
	Элементы.СЗ.ТекущиеДанные.ФактПоЗаявкам = РассчитатьФактПоЗаявкамНаСервере(Элементы.СЗ.ТекущиеДанные.ЦФО, Элементы.СЗ.ТекущиеДанные.ВидДеятельности,Элементы.СЗ.ТекущиеДанные.СтатьяБДДС);	
КонецПроцедуры

&НаСервере
Функция РассчитатьФактПоЗаявкамНаСервере(ЦФО, Подразделение, СтатьяБДДС)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(Д_ЗаявкаНаОплатуЗаявкаБезнал.СуммаДДС) КАК СуммаДДС
	               |ПОМЕСТИТЬ таблицы
	               |ИЗ
	               |	Документ.Д_ЗаявкаНаОплату.ЗаявкаБезнал КАК Д_ЗаявкаНаОплатуЗаявкаБезнал
	               |ГДЕ
	               |	НЕ Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка.ПометкаУдаления
	               |	И Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	               |	И Д_ЗаявкаНаОплатуЗаявкаБезнал.ЦФО = &ЦФО
	               |	И Д_ЗаявкаНаОплатуЗаявкаБезнал.Подразделение = &Подразделение
	               |	И Д_ЗаявкаНаОплатуЗаявкаБезнал.СтатьяДДС = &СтатьяДДС
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Д_ЗаявкаНаАвансовыйОтчетЗатраты.Сумма
	               |ИЗ
	               |	Документ.Д_ЗаявкаНаАвансовыйОтчет.Затраты КАК Д_ЗаявкаНаАвансовыйОтчетЗатраты
	               |ГДЕ
	               |	Д_ЗаявкаНаАвансовыйОтчетЗатраты.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	               |	И Д_ЗаявкаНаАвансовыйОтчетЗатраты.Ссылка.ПометкаУдаления = ЛОЖЬ
	               |	И Д_ЗаявкаНаАвансовыйОтчетЗатраты.Предприятие = &ЦФО
	               |	И Д_ЗаявкаНаАвансовыйОтчетЗатраты.Подразделение = &Подразделение
	               |	И Д_ЗаявкаНаАвансовыйОтчетЗатраты.Статья = &СтатьяДДС
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СУММА(таблицы.СуммаДДС) КАК СуммаДДС
	               |ИЗ
	               |	таблицы КАК таблицы";
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаОкончания" ,КонецМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("ЦФО", ЦФО);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("СтатьяДДС",СтатьяБДДС);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.СуммаДДС
	Иначе 
		Возврат 0
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура НаправлятьНаУтверждениеПриИзменении(Элемент)
	Если НаправлятьНаУтверждение = "Всем сразу" Тогда
		Объект.ОтправлятьВсем = Истина;
	Иначе
		Объект.ОтправлятьВсем = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияКлиентаПриАктивизацииСтроки(Элемент)
	ТекДанные = Элементы.УсловияКлиента.ТекущиеДанные;
	Если Не ТекДанные = Неопределено Тогда
		ОтборКонтрагента = Новый ФиксированнаяСтруктура(Новый Структура("Контрагент", ТекДанные.Контрагент));
		Элементы.ДоговоренностиКлиента.ОтборСтрок = ОтборКонтрагента;
	Иначе
		Элементы.ДоговоренностиКлиента.ОтборСтрок = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УсловияКлиентаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекДанные = Элементы.УсловияКлиента.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		ЗаполнитьРеестрДоговоренностей(ТекДанные.Контрагент);
		ОтборКонтрагента = Новый ФиксированнаяСтруктура(Новый Структура("Контрагент", ТекДанные.Контрагент));
		Элементы.ДоговоренностиКлиента.ОтборСтрок = ОтборКонтрагента;
	Иначе
		Объект.ДоговоренностиКлиента.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеестрДоговоренностей(Контрагенты)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	*
	|ИЗ
	|	РегистрСведений.КС_РеестрДоговоренностей.СрезПоследних(, Контрагент В (&Контрагенты)) КАК КС_РеестрДоговоренностейСрезПоследних";
	
	Запрос.УстановитьПараметр("Контрагенты", Контрагенты);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Контрагент  = ?(ТипЗнч(Выборка.Контрагент) = Тип("СправочникСсылка.Контрагенты"), Выборка.Контрагент, Справочники.Контрагенты.ПустаяСсылка());
		Предприятие = ?(ТипЗнч(Выборка.Предприятие) = Тип("СправочникСсылка.Предприятия"), Выборка.Предприятие, Справочники.Предприятия.ПустаяСсылка());
		СтруктураПоиска = Новый Структура("Контрагент, Предприятие", Контрагент, Предприятие);
		Если НЕ Объект.ДоговоренностиКлиента.НайтиСтроки(СтруктураПоиска).Количество() Тогда
			НоваяСтрока = Объект.ДоговоренностиКлиента.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.ТекЦена = Выборка.Цена;
			НоваяСтрока.ТекВерх = Выборка.Верх;
			НоваяСтрока.Дата = Объект.Дата;
		КонецЕсли;
	КонецЦикла;
	
	//очищаем лишние
	МассивУдаленныхСтрок = Новый Массив;
	Для каждого ТекСтрока Из Объект.ДоговоренностиКлиента Цикл
		Если НЕ Объект.УсловияКлиента.НайтиСтроки(Новый Структура("Контрагент", ТекСтрока.Контрагент )).Количество()  Тогда
			МассивУдаленныхСтрок.Добавить(ТекСтрока);		
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого ТекСтрока Из МассивУдаленныхСтрок Цикл
		Объект.ДоговоренностиКлиента.Удалить(ТекСтрока);
	КонецЦикла; 

	// заголовки показателей
	ЗаполнитьЗаголовкиПоказателейВЗависимостиОтЕдиницИзмерения(Ложь);
	
КонецПроцедуры


&НаКлиенте
Процедура ДоговоренностиКлиентаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ТекДанные = Элементы.УсловияКлиента.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Предупреждение("Введите строку условий клиента!");
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ДоговоренностиКлиентаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОтменаРедактирования = Ложь;
	ТекДанные = Элементы.УсловияКлиента.ТекущиеДанные;
	ТекДанные2 = Элементы.ДоговоренностиКлиента.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено и Не ТекДанные2 = Неопределено Тогда
		ТекДанные2.Дата = Текданные.Дата;	
		ТекДанные2.Контрагент = Текданные.Контрагент;	
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ДоговоренностиКлиентаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекДанные = Элементы.УсловияКлиента.ТекущиеДанные;
	ТекДанные2 = Элементы.ДоговоренностиКлиента.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекДанные2.Дата) Тогда
		ТекДанные2.Дата = Объект.Дата;
		ТекДанные2.Контрагент = ТекДанные.Контрагент;	
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура УсловияКлиентаПослеУдаления(Элемент)
	ТекДанные = Элементы.УсловияКлиента.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		МассивУдаленныхСтрок = Новый Массив;
		Для каждого ТекСтрока Из Объект.ДоговоренностиКлиента Цикл
			Если НЕ Объект.УсловияКлиента.НайтиСтроки(Новый Структура("Контрагент", ТекСтрока.Контрагент )).Количество()  Тогда
				МассивУдаленныхСтрок.Добавить(ТекСтрока);		
			КонецЕсли;
		КонецЦикла; 
		
		Для каждого ТекСтрока Из МассивУдаленныхСтрок Цикл
			Объект.ДоговоренностиКлиента.Удалить(ТекСтрока);
		КонецЦикла;
	Иначе
		Объект.ДоговоренностиКлиента.Очистить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УсловияКлиентаЦенаПриИзменении(Элемент)
	
	РассчитатьЛимитыДЗ();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьЛимитыДЗ()
	
	ТекДанные = Элементы.УсловияКлиента.ТекущиеДанные;
	ТекДанные.ЛимитДЗ = ТекДанные.МесячнаяПотребность * (ТекДанные.Цена + ТекДанные.Верх) * ТекДанные.Отсрочка / 30;
	ТекДанные.ЛимитПДЗ = ТекДанные.МесячнаяПотребность * (ТекДанные.Цена + ТекДанные.Верх) * ТекДанные.МаксКоличествоДнейПросрочки / 30;

КонецПроцедуры

&НаКлиенте
Процедура УсловияКлиентаОтсрочкаПриИзменении(Элемент)
	
	РассчитатьЛимитыДЗ();
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияКлиентаМаксКоличествоДнейПросрочкиПриИзменении(Элемент)
	
	РассчитатьЛимитыДЗ();
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияКлиентаМесячнаяПотребностьПриИзменении(Элемент)
	
	РассчитатьЛимитыДЗ();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаголовкиПоказателейВЗависимостиОтЕдиницИзмерения(НачальноеЗаполнение)
	
	Для Каждого ТекСтрока Из Объект.УсловияКлиента Цикл
		Если НачальноеЗаполнение И ЗначениеЗаполнено(ТекСтрока.ЦенаЗаголовок) И ЗначениеЗаполнено(ТекСтрока.ВерхЗаголовок) Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрока.ЕдИзмерения) Тогда
			ТекСтрока.ЦенаЗаголовок = "Цена, руб/" + ТекСтрока.ЕдИзмерения;
			ТекСтрока.ВерхЗаголовок = "Верх, руб/" + ТекСтрока.ЕдИзмерения
		ИначеЕсли ЗначениеЗаполнено(ТекСтрока.ТекЕдИзмерения) Тогда
			ТекСтрока.ЦенаЗаголовок = "Цена, руб/" + ТекСтрока.ТекЕдИзмерения;
			ТекСтрока.ВерхЗаголовок = "Верх, руб/" + ТекСтрока.ТекЕдИзмерения
		Иначе
			ТекСтрока.ЦенаЗаголовок = "Цена, руб/дал";
			ТекСтрока.ВерхЗаголовок = "Верх, руб/дал"
		КонецЕсли;			
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	сабОбщегоНазначения.ОтобразитьСостояниеДокумента(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	сабОбщегоНазначения.ОтобразитьСостояниеДокумента(ЭтаФорма);
КонецПроцедуры
