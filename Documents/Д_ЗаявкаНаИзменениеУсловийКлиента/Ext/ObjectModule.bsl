
Процедура ОбработкаПроведения(Отказ, Режим)
	
	
	
	
	// регистр КС_УсловияКонтрагента
	Движения.КС_УсловияКонтрагента.Записывать = Истина;
	Для Каждого ТекСтрокаУсловияКлиента Из УсловияКлиента Цикл
		Движение = Движения.КС_УсловияКонтрагента.Добавить();
		Движение.Период = ТекСтрокаУсловияКлиента.Дата;
		Движение.Контрагент = ТекСтрокаУсловияКлиента.Контрагент;
		Движение.МесячнаяПотребность = ТекСтрокаУсловияКлиента.МесячнаяПотребность;
		Движение.Цена = ТекСтрокаУсловияКлиента.Цена;
		Движение.ЛимитДЗ = ТекСтрокаУсловияКлиента.ЛимитДЗ;
		Движение.ЛимитПДЗ = ТекСтрокаУсловияКлиента.ЛимитПДЗ;
		Движение.МаксКоличествоДнейПросрочки = ТекСтрокаУсловияКлиента.МаксКоличествоДнейПросрочки;
		Движение.Отсрочка = ТекСтрокаУсловияКлиента.Отсрочка;
		Движение.Предоплата = ТекСтрокаУсловияКлиента.Предоплата;
		Движение.Верх = ТекСтрокаУсловияКлиента.Верх;
		Движение.НДС = ТекСтрокаУсловияКлиента.НДС;
		Движение.ТипСпирта = ТекСтрокаУсловияКлиента.ТипСпирта;
		Движение.ВнутреннийДокумент = Ссылка;
		Движение.ЕдИзмерения = ТекСтрокаУсловияКлиента.ЕдИзмерения;
	КонецЦикла;
	
	// регистр КС_РеестрДоговоренностей
	Движения.КС_РеестрДоговоренностей.Записывать = Истина;
	Для Каждого ТекСтрокаДоговоренностиКлиента Из ДоговоренностиКлиента Цикл
		Движение = Движения.КС_РеестрДоговоренностей.Добавить();
		Движение.Период = ТекСтрокаДоговоренностиКлиента.Дата;
		Движение.Контрагент = ТекСтрокаДоговоренностиКлиента.Контрагент;
		Движение.Предприятие = ?(ЗначениеЗаполнено(ТекСтрокаДоговоренностиКлиента.Предприятие), ТекСтрокаДоговоренностиКлиента.Предприятие, "Все");
		Движение.Номенклатура = ?(ЗначениеЗаполнено(ТекСтрокаДоговоренностиКлиента.Номенклатура), ТекСтрокаДоговоренностиКлиента.Номенклатура, "Все");
		Движение.Цена = ТекСтрокаДоговоренностиКлиента.Цена;
		Движение.Верх = ТекСтрокаДоговоренностиКлиента.Верх;
		Движение.КтоОтдает = ТекСтрокаДоговоренностиКлиента.КтоОтдает;
	КонецЦикла;

	
		//{{__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!


	//}}__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ

	
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	Доступность = Ложь;
	ЛимитВручную = Ложь;
	ТекущаяЗадача = "";
	ТекущийБизнесПроцесс = "";
	Автор = "";
	ДоступнаПользователям = Истина; //по просьбе ИТ
	
	Для каждого ТекСтрока Из УсловияКлиента Цикл

		ТекЗначения = БюджетныйНаСервере.ПолучитьТекущиеУсловияКонтрагента(ТекСтрока.Контрагент, ТекущаяДата());
		
		ЗаполнитьЗначенияСвойств(ТекСтрока, ТекЗначения);
		ТекСтрока.Дата = ТекущаяДата();
	КонецЦикла; 
	
	ДоговоренностиКлиента.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	*
	|ИЗ
	|	РегистрСведений.КС_РеестрДоговоренностей.СрезПоследних(, Контрагент В (&Контрагенты)) КАК КС_РеестрДоговоренностейСрезПоследних";
	
	Запрос.УстановитьПараметр("Контрагенты", УсловияКлиента.ВыгрузитьКолонку("Контрагент"));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтруктураПоиска = Новый Структура("Контрагент, Предприятие", Выборка.Контрагент, Выборка.Предприятие);
		Если НЕ ДоговоренностиКлиента.НайтиСтроки(СтруктураПоиска).Количество() Тогда
			НоваяСтрока = ДоговоренностиКлиента.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Дата = ТекущаяДата();
			НоваяСтрока.ТекВерх = Выборка.Верх;
			НоваяСтрока.ТекЦена = Выборка.Цена;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	//Если НЕ Ссылка.Пустая() Тогда
	//	БПСервер.ЗаполнитьТекБПиЗадачу(ЭтотОбъект);
	//КонецЕсли;
	Если ТипЗнч(Кому) = Тип("СправочникСсылка.Пользователи") Тогда
		Рецензенты.Очистить();
		НоваяСтрока = Рецензенты.Добавить();
		НоваяСтрока.Пользователь = Кому;
	КонецЕсли;
	
	//из подписки на событие
	БюджетныйНаСервере.ДокументыПередЗаписьюПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Если Предприятие.УчетПоПодразделениям И НЕ ЗначениеЗаполнено(Подразделение) Тогда
		сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(
		ЭтотОбъект,
		"Не указано подразделение.",
		,
		,
		"Подразделение",
		Отказ);
	КонецЕсли;
	
	Для каждого ТекСтрока Из УсловияКлиента Цикл
		Родитель = ТекСтрока.Контрагент.Родитель;
		Если ЗначениеЗаполнено(Родитель) И Родитель.ГруппаКлиентов Тогда
			сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(
			ЭтотОбъект,
			"Контрагент """ + Строка(ТекСтрока.Контрагент) + """ входит в группу клиентов """ + Строка(Родитель) + """. Установка лимитов возможно только по группе.",
			"УсловияКлиента",
			ТекСтрока.НомерСтроки,
			"Контрагент",
			Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ УсловияКлиента.Количество() Тогда
		сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(
		ЭтотОбъект,
		"Таблица условий незаполнена.",
		,
		,
		"УсловияКлиента",
		Отказ);
	КонецЕсли;
	Если НЕ ДоговоренностиКлиента.Количество() Тогда
		сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(
		ЭтотОбъект,
		"Таблица договоренностей незаполнена.",
		,
		,
		"ДоговоренностиКлиента",
		Отказ);
	КонецЕсли;
	
	
	//проверяем на уникальность строк
	Для каждого ТекСтрока Из ДоговоренностиКлиента Цикл
		ОтобраннныеСтроки = ДоговоренностиКлиента.НайтиСтроки(Новый Структура("Контрагент, Дата, Предприятие, Номенклатура", ТекСтрока.Контрагент, ТекСтрока.Дата, ТекСтрока.Предприятие, ТекСтрока.Номенклатура));
		Если ОтобраннныеСтроки.Количество()>1 Тогда
			сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(
			ЭтотОбъект,
			"В таблице найдены дублирующиеся строки.",
			"ДоговоренностиКлиента",                  
			ДоговоренностиКлиента.Индекс(ТекСтрока ) + 1,
			"НомерСтроки",
			Отказ);
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	БюджетныйНаСервере.ПриУстановкеНовогоНомераПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
КонецПроцедуры



