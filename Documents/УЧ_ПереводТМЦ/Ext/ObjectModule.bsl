
Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если РучнаяКорректировка Тогда		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Движения документа %1 отредактированы вручную и не могут быть автоматически актуализированы'"), ЭтотОбъект);
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.КлючДанных = Ссылка;
		Сообщение.Сообщить();		
		
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Если ДополнительныеСвойства.Свойство("ДатаДокументаИзменена") Тогда
		Движения.Учетный.Записать();	
	КонецЕсли;	
	
	СтруктураИмен = УЧ_Сервер.СформироватьСтруктуруИмен(ЭтотОбъект);
	СтруктараИменНовая = СтруктураИменНовая();
	
	СтруктураСоответствий = УЧ_Сервер.ПоучитьСоответствияСчетовНоменклатуры(ЭтотОбъект, СтруктураИмен);
	СтруктураСоответствийНовая =  УЧ_Сервер.ПоучитьСоответствияСчетовНоменклатуры(ЭтотОбъект, СтруктараИменНовая);
	СоответствиеСчетаНовый = СтруктураСоответствийНовая.Соответствия;
	СоответствиеУчетаПоПодразделениямНовый = СтруктураСоответствийНовая.СоответствияУчетаПодразделений;
	СоответствиеСчета = СтруктураСоответствий.Соответствия;
	СоответствиеУчетаПоПодразделениям = СтруктураСоответствий.СоответствияУчетаПодразделений;
	
	ИспользоватьСерии = Справочники.СерииНоменклатуры.СерииНоменклатурыИспользуются();
	КорректироватьСебестоимостьПриВыходеОстаткаИзМинуса = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("КорректироватьСебестоимостьПриВыходеОстаткаИзМинуса");
	РассчитыватьСебестоимостьПоСериям = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("РассчитыватьСебестоимостьПоСериям");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УЧ_ПереводТМЦТабличнаяЧасть.Номенклатура КАК Номенклатура,
		|	УЧ_ПереводТМЦТабличнаяЧасть.СерияНоменклатуры КАК СерияНоменклатуры,
		|	СУММА(УЧ_ПереводТМЦТабличнаяЧасть.Количество) КАК Количество,
		|	УЧ_ПереводТМЦТабличнаяЧасть.Ссылка.Предприятие КАК Предприятие,
		|	УЧ_ПереводТМЦТабличнаяЧасть.Ссылка.Склад КАК Склад,
		|	ВЫБОР
		|		КОГДА (ВЫБОР
		|				КОГДА УЧ_ПереводТМЦТабличнаяЧасть.СчетУчетаБУ = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ПустаяСсылка)
		|					ТОГДА УЧ_ПереводТМЦТабличнаяЧасть.Номенклатура.Счет10
		|				ИНАЧЕ УЧ_ПереводТМЦТабличнаяЧасть.СчетУчетаБУ
		|			КОНЕЦ).УчетПоПодразделениям
		|			ТОГДА УЧ_ПереводТМЦТабличнаяЧасть.Ссылка.Подразделение
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК Подразделение,
		|	ВЫБОР
		|		КОГДА (ВЫБОР
		|				КОГДА УЧ_ПереводТМЦТабличнаяЧасть.НовыйСчетУчетаБУ = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ПустаяСсылка)
		|					ТОГДА УЧ_ПереводТМЦТабличнаяЧасть.Номенклатура.Счет10
		|				ИНАЧЕ УЧ_ПереводТМЦТабличнаяЧасть.НовыйСчетУчетаБУ
		|			КОНЕЦ).УчетПоПодразделениям
		|			ТОГДА УЧ_ПереводТМЦТабличнаяЧасть.Ссылка.ПодразделениеПолучатель
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК ПодразделениеПолучатель,
		|	СУММА(УЧ_ПереводТМЦТабличнаяЧасть.Сумма) КАК СуммаПолучатель,
		|	УЧ_ПереводТМЦТабличнаяЧасть.Ссылка.СкладПолучатель КАК СкладПолучатель,
		|	УЧ_ПереводТМЦТабличнаяЧасть.НоменклатураНовая КАК НоменклатураНовая,
		|	УЧ_ПереводТМЦТабличнаяЧасть.СерияНоменклатурыНовая КАК СерияНоменклатурыНовая,
		|	СУММА(УЧ_ПереводТМЦТабличнаяЧасть.КоличествоНовое) КАК КоличествоНовое,
		|	УЧ_ПереводТМЦТабличнаяЧасть.Номенклатура.Счет10 КАК ТоварСчет10,
		|	УЧ_ПереводТМЦТабличнаяЧасть.Ссылка.Предприятие.НеКонтролировать10 КАК ПредприятиеНеКонтролировать10,
		|	УЧ_ПереводТМЦТабличнаяЧасть.Ссылка.Предприятие.НеКонтролировать41 КАК ПредприятиеНеКонтролировать41,
		|	УЧ_ПереводТМЦТабличнаяЧасть.Ссылка.Предприятие.НеКонтролировать43 КАК ПредприятиеНеКонтролировать43
		|ПОМЕСТИТЬ ТЧДока
		|ИЗ
		|	Документ.УЧ_ПереводТМЦ.ТабличнаяЧасть КАК УЧ_ПереводТМЦТабличнаяЧасть
		|ГДЕ
		|	УЧ_ПереводТМЦТабличнаяЧасть.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	УЧ_ПереводТМЦТабличнаяЧасть.Номенклатура,
		|	УЧ_ПереводТМЦТабличнаяЧасть.СерияНоменклатуры,
		|	УЧ_ПереводТМЦТабличнаяЧасть.Ссылка.Предприятие,
		|	УЧ_ПереводТМЦТабличнаяЧасть.Ссылка.Склад,
		|	УЧ_ПереводТМЦТабличнаяЧасть.Ссылка.СкладПолучатель,
		|	УЧ_ПереводТМЦТабличнаяЧасть.НоменклатураНовая,
		|	УЧ_ПереводТМЦТабличнаяЧасть.СерияНоменклатурыНовая,
		|	УЧ_ПереводТМЦТабличнаяЧасть.Номенклатура.Счет10,
		|	УЧ_ПереводТМЦТабличнаяЧасть.Ссылка.Предприятие.НеКонтролировать10,
		|	УЧ_ПереводТМЦТабличнаяЧасть.Ссылка.Предприятие.НеКонтролировать41,
		|	УЧ_ПереводТМЦТабличнаяЧасть.Ссылка.Предприятие.НеКонтролировать43,
		|	ВЫБОР
		|		КОГДА (ВЫБОР
		|				КОГДА УЧ_ПереводТМЦТабличнаяЧасть.СчетУчетаБУ = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ПустаяСсылка)
		|					ТОГДА УЧ_ПереводТМЦТабличнаяЧасть.Номенклатура.Счет10
		|				ИНАЧЕ УЧ_ПереводТМЦТабличнаяЧасть.СчетУчетаБУ
		|			КОНЕЦ).УчетПоПодразделениям
		|			ТОГДА УЧ_ПереводТМЦТабличнаяЧасть.Ссылка.Подразделение
		|		ИНАЧЕ NULL
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА (ВЫБОР
		|				КОГДА УЧ_ПереводТМЦТабличнаяЧасть.НовыйСчетУчетаБУ = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ПустаяСсылка)
		|					ТОГДА УЧ_ПереводТМЦТабличнаяЧасть.Номенклатура.Счет10
		|				ИНАЧЕ УЧ_ПереводТМЦТабличнаяЧасть.НовыйСчетУчетаБУ
		|			КОНЕЦ).УчетПоПодразделениям
		|			ТОГДА УЧ_ПереводТМЦТабличнаяЧасть.Ссылка.ПодразделениеПолучатель
		|		ИНАЧЕ NULL
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(УчетныйОстатки.Субконто1, УчетныйОстаткиИОбороты.Субконто1) КАК Номенклатура,
		|	ЕСТЬNULL(УчетныйОстатки.Субконто2, УчетныйОстаткиИОбороты.Субконто2) КАК Склад,
		|	ЕСТЬNULL(УчетныйОстатки.СуммаОстаток, ЕСТЬNULL(УчетныйОстаткиИОбороты.СуммаНачальныйОстаток, 0) + ЕСТЬNULL(УчетныйОстаткиИОбороты.СуммаОборотДт, 0)) КАК Сумма,
		|	ЕСТЬNULL(УчетныйОстатки.КоличествоОстаток, ЕСТЬNULL(УчетныйОстаткиИОбороты.КоличествоНачальныйОстаток, 0) + ЕСТЬNULL(УчетныйОстаткиИОбороты.КоличествоОборотДт, 0)) КАК Количество,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(УчетныйОстатки.КоличествоОстаток, ЕСТЬNULL(УчетныйОстаткиИОбороты.КоличествоНачальныйОстаток, 0) + ЕСТЬNULL(УчетныйОстаткиИОбороты.КоличествоОборотДт, 0)) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(УчетныйОстатки.СуммаОстаток, ЕСТЬNULL(УчетныйОстаткиИОбороты.СуммаНачальныйОстаток, 0) + ЕСТЬNULL(УчетныйОстаткиИОбороты.СуммаОборотДт, 0)) / ЕСТЬNULL(УчетныйОстатки.КоличествоОстаток, ЕСТЬNULL(УчетныйОстаткиИОбороты.КоличествоНачальныйОстаток, 0) + ЕСТЬNULL(УчетныйОстаткиИОбороты.КоличествоОборотДт, 0))
		|	КОНЕЦ КАК Цена,
		|	ЕСТЬNULL(УчетныйОстатки.Счет, УчетныйОстаткиИОбороты.Счет) КАК Счет,
		|	ЕСТЬNULL(УчетныйОстатки.Предприятия, УчетныйОстаткиИОбороты.Предприятия) КАК Предприятия,
		|	ЕСТЬNULL(УчетныйОстатки.Подразделение, УчетныйОстаткиИОбороты.Подразделение) КАК Подразделение,
		|	ЕСТЬNULL(УчетныйОстатки.Субконто3, УчетныйОстаткиИОбороты.Субконто3) КАК СерияНоменклатуры,
		|	ЕСТЬNULL(УчетныйОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
		|	ЕСТЬNULL(УчетныйОстатки.СуммаОстаток, 0) КАК СуммаОстаток
		|ПОМЕСТИТЬ Остатки
		|ИЗ
		|	РегистрБухгалтерии.Учетный.Остатки(
		|			&ПозицияДокумента,
		|			Счет В ИЕРАРХИИ (&Счета),
		|			,
		|			Предприятия В (&Предприятия)
		|				И Субконто1 В (&Субконто1)
		|				И Субконто2 В (&Субконто2)
		|				И СценарийПлана = &СценарийФакт
		|				И ВЫБОР
		|					КОГДА &ИспользоватьСерии
		|						ТОГДА Субконто3 В
		|								(ВЫБРАТЬ
		|									ТЧДока.СерияНоменклатуры КАК СерияНоменклатуры
		|								ИЗ
		|									ТЧДока КАК ТЧДока)
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ) КАК УчетныйОстатки
		|		ПРАВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Учетный.ОстаткиИОбороты(
		|				&ДатаНач,
		|				&ДатаКон,
		|				Месяц,
		|				,
		|				Счет В ИЕРАРХИИ (&Счета),
		|				,
		|				Предприятия В (&Предприятия)
		|					И Субконто1 В (&Субконто1)
		|					И Субконто2 В (&Субконто2)
		|					И СценарийПлана = &СценарийФакт
		|					И ВЫБОР
		|						КОГДА &ИспользоватьСерии
		|							ТОГДА Субконто3 В
		|									(ВЫБРАТЬ
		|										ТЧДока.СерияНоменклатуры КАК СерияНоменклатуры
		|									ИЗ
		|										ТЧДока КАК ТЧДока)
		|						ИНАЧЕ ИСТИНА
		|					КОНЕЦ) КАК УчетныйОстаткиИОбороты
		|		ПО УчетныйОстатки.Субконто1 = УчетныйОстаткиИОбороты.Субконто1
		|			И УчетныйОстатки.Субконто2 = УчетныйОстаткиИОбороты.Субконто2
		|			И УчетныйОстатки.Счет = УчетныйОстаткиИОбороты.Счет
		|			И (НЕ &ИспользоватьСерии
		|				ИЛИ УчетныйОстатки.Субконто3 = УчетныйОстаткиИОбороты.Субконто3)
		|			И УчетныйОстатки.Предприятия = УчетныйОстаткиИОбороты.Предприятия
		|			И (УчетныйОстатки.КоличествоОстаток > 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.Номенклатура КАК Номенклатура,
		|	Остатки.Склад КАК Склад,
		|	СУММА(Остатки.Сумма) КАК Сумма,
		|	СУММА(Остатки.Количество) КАК Количество,
		|	СУММА(Остатки.Цена) КАК Цена,
		|	МИНИМУМ(Остатки.Счет) КАК Счет,
		|	Остатки.Предприятия КАК Предприятия,
		|	Остатки.Подразделение КАК Подразделение,
		|	МИНИМУМ(Остатки.Счет.УчетПоПодразделениям) КАК СчетУчетПоПодразделениям,
		|	Остатки.СерияНоменклатуры КАК СерияНоменклатуры,
		|	СУММА(Остатки.КоличествоОстаток) КАК КоличествоОстаток,
		|	СУММА(Остатки.СуммаОстаток) КАК СуммаОстаток
		|ПОМЕСТИТЬ ОстаткиСвернуто
		|ИЗ
		|	Остатки КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Склад,
		|	Остатки.Предприятия,
		|	Остатки.Подразделение,
		|	Остатки.Номенклатура,
		|	Остатки.СерияНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЧДока.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(ОстаткиСвернуто.КоличествоОстаток, 0) - ТЧДока.Количество КАК КоличествоМинус,
		|	ТЧДока.Предприятие КАК Предприятие,
		|	ТЧДока.Подразделение КАК Подразделение,
		|	ТЧДока.Склад КАК Склад,
		|	ТЧДока.Количество КАК КоличествоНужно,
		|	ЕСТЬNULL(ОстаткиСвернуто.КоличествоОстаток, 0) КАК КоличествоОстаток,
		|	ОстаткиСвернуто.СчетУчетПоПодразделениям КАК УчетПоПодразделениям,
		|	ТЧДока.ПредприятиеНеКонтролировать10 КАК ПредприятиеНеКонтролировать10,
		|	ТЧДока.ПредприятиеНеКонтролировать41 КАК ПредприятиеНеКонтролировать41,
		|	ТЧДока.ПредприятиеНеКонтролировать43 КАК ПредприятиеНеКонтролировать43,
		|	ТЧДока.СерияНоменклатуры КАК СерияНоменклатуры,
		|	ТЧДока.НоменклатураНовая КАК НоменклатураНовая
		|ПОМЕСТИТЬ КонтрольОстатков
		|ИЗ
		|	ТЧДока КАК ТЧДока
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиСвернуто КАК ОстаткиСвернуто
		|		ПО ТЧДока.Номенклатура = ОстаткиСвернуто.Номенклатура
		|			И ТЧДока.Предприятие = ОстаткиСвернуто.Предприятия
		|			И ТЧДока.Склад = ОстаткиСвернуто.Склад
		|			И (ВЫБОР
		|				КОГДА ОстаткиСвернуто.Подразделение ЕСТЬ NULL
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ТЧДока.Подразделение = ОстаткиСвернуто.Подразделение
		|			КОНЕЦ)
		|			И (ВЫБОР
		|				КОГДА &ИспользоватьСерии
		|					ТОГДА ТЧДока.СерияНоменклатуры = ОстаткиСвернуто.СерияНоменклатуры
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)
		|ГДЕ
		|	ЕСТЬNULL(ОстаткиСвернуто.КоличествоОстаток, 0) - ТЧДока.Количество < 0
		|	И ТЧДока.ПредприятиеНеКонтролировать10 = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЧДока.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(ОстаткиСвернуто.КоличествоОстаток, 0) + ТЧДока.Количество КАК КоличествоКонечное,
		|	ТЧДока.Предприятие КАК Предприятие,
		|	ТЧДока.Подразделение КАК Подразделение,
		|	ОстаткиСвернуто.Склад КАК Склад,
		|	ТЧДока.Количество КАК КоличествоНужно,
		|	ЕСТЬNULL(ОстаткиСвернуто.КоличествоОстаток, 0) КАК КоличествоОстаток,
		|	ЕСТЬNULL(ОстаткиСвернуто.СуммаОстаток, 0) КАК СуммаКонечное,
		|	ТЧДока.СкладПолучатель КАК СкладПолучатель,
		|	ТЧДока.ТоварСчет10 КАК Счет,
		|	ТЧДока.ПодразделениеПолучатель КАК ПодразделениеПолучатель,
		|	ОстаткиСвернуто.СчетУчетПоПодразделениям КАК УчетПоПодразделениям,
		|	ТЧДока.СерияНоменклатуры КАК СерияНоменклатуры,
		|	ТЧДока.НоменклатураНовая КАК НоменклатураНовая
		|ИЗ
		|	ТЧДока КАК ТЧДока
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиСвернуто КАК ОстаткиСвернуто
		|		ПО ТЧДока.Номенклатура = ОстаткиСвернуто.Номенклатура
		|			И ТЧДока.Предприятие = ОстаткиСвернуто.Предприятия
		|			И ТЧДока.СкладПолучатель = ОстаткиСвернуто.Склад
		|			И (ВЫБОР
		|				КОГДА ОстаткиСвернуто.Подразделение ЕСТЬ NULL
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ТЧДока.ПодразделениеПолучатель = ОстаткиСвернуто.Подразделение
		|			КОНЕЦ)
		|			И (ВЫБОР
		|				КОГДА &ИспользоватьСерии
		|					ТОГДА ТЧДока.СерияНоменклатуры = ОстаткиСвернуто.СерияНоменклатуры
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)
		|ГДЕ
		|	ЕСТЬNULL(ОстаткиСвернуто.КоличествоОстаток, 0) < 0";
		
	ВыбСчет = Новый Массив;
	ВыбТовары = Новый Массив;
	Для каждого ТекСтрока Из СоответствиеСчета Цикл
		Если ЗначениеЗаполнено(ТекСтрока.Ключ) Тогда
			ВыбТовары.Добавить(ТекСтрока.Ключ);
			Если ВыбСчет.Найти(ТекСтрока.Значение) = Неопределено Тогда
				ВыбСчет.Добавить(ТекСтрока.Значение);
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
	
	ВыбСклад = Новый Массив;
	ВыбСклад.Добавить(Склад);
	ВыбСклад.Добавить(СкладПолучатель);
	
	ВыбПодразделение = Новый Массив;
	ВыбПодразделение.Добавить(Подразделение);
	//ВыбПодразделение.Добавить(ПодразделениеПолучатель);
	
	МоментКонца = МоментВремени();
	
	Запрос.УстановитьПараметр("Счета", ВыбСчет);
	Запрос.УстановитьПараметр("Субконто1", ВыбТовары);
	Запрос.УстановитьПараметр("Субконто2", ВыбСклад);
	Запрос.УстановитьПараметр("Подразделения", ВыбПодразделение);
	Запрос.УстановитьПараметр("Предприятия", Предприятие);
	Запрос.УстановитьПараметр("ПозицияДокумента", МоментКонца);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Счет10", ПланыСчетов.Учетный.Счет10());
	Запрос.УстановитьПараметр("Счет41", ПланыСчетов.Учетный.Счет41());
	Запрос.УстановитьПараметр("Счет43", ПланыСчетов.Учетный.Счет43());
	Запрос.УстановитьПараметр("СценарийФакт", Справочники.СценарииПланирования.СценарийФакт());
	Запрос.УстановитьПараметр("ИспользоватьСерии", ИспользоватьСерии И РассчитыватьСебестоимостьПоСериям);
	Запрос.УстановитьПараметр("ДатаНач", НачалоМесяца(?(ЗначениеЗаполнено(Ссылка),МоментВремени().Дата, ТекущаяДата())));
	Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(?(ЗначениеЗаполнено(Ссылка),МоментВремени().Дата, ТекущаяДата())));
	Запрос.УстановитьПараметр("КорректироватьСебестоимостьПриВыходеОстаткаИзМинуса", КорректироватьСебестоимостьПриВыходеОстаткаИзМинуса);
	
	МассивЗапросов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	РезультатОстатки = МассивЗапросов[2].Выгрузить();
	РезультатКонтроль = МассивЗапросов[3].Выгрузить();
	РезультатКонтрольМинусов = МассивЗапросов[4].Выгрузить();
	
	//Если АвтоПереводНоменклатуры Тогда
	//	Для Каждого СтрокаРеал Из ТабличнаяЧасть Цикл
	//		Если СтрокаРеал.Номенклатура.ПризнакНоменклатуры = "Перевод в №2" И ЗначениеЗаполнено(СтрокаРеал.Номенклатура.НоменклатураПервичная) Тогда
	//			ВыбТовары.Добавить(СтрокаРеал.Номенклатура.НоменклатураПервичная);	
	//		КонецЕсли;
	//	КонецЦикла;	
	//КонецЕсли;
	
	Движения.Учетный.Записывать = Истина;
	
	
	ТЧ2 = ТабличнаяЧасть.Выгрузить();
	
	Для Каждого ТекСтрокаТабличнаяЧасть Из ТабличнаяЧасть Цикл
		Если АвтоПереводНоменклатуры И ТекСтрокаТабличнаяЧасть.Номенклатура.ПризнакНоменклатуры = "Перевод в №2" И ЗначениеЗаполнено(ТекСтрокаТабличнаяЧасть.Номенклатура.НоменклатураПервичная) Тогда
			ЕстьАвтоПереводНоменклатуры = Истина;
		Иначе
			ЕстьАвтоПереводНоменклатуры = Ложь;
		КонецЕсли;		
		
		Движение = Движения.Учетный.Добавить();
		Движение.Период = Дата;
		Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
		Движение.Предприятия = Предприятие;
		Движение.СчетДт = ?(ЗначениеЗаполнено(ТекСтрокаТабличнаяЧасть.НовыйСчетУчетаБУ), ТекСтрокаТабличнаяЧасть.НовыйСчетУчетаБУ, СоответствиеСчетаНовый.Получить(ТекСтрокаТабличнаяЧасть.НоменклатураНовая));
		Если Движение.СчетДт.УчетПоПодразделениям Тогда
			Движение.ПодразделениеДт = Подразделение;
		КонецЕсли;	
		Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина)] = СкладПолучатель;
		УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт, Движение.СчетДт, 1, ТекСтрокаТабличнаяЧасть.НоменклатураНовая);
		УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт, Движение.СчетДт, 3, ТекСтрокаТабличнаяЧасть.СерияНоменклатурыНовая);
		Движение.КоличествоДт = ТекСтрокаТабличнаяЧасть.КоличествоНовое;
		Движение.СчетКт = ?(ЗначениеЗаполнено(ТекСтрокаТабличнаяЧасть.СчетУчетаБУ), ТекСтрокаТабличнаяЧасть.СчетУчетаБУ, СоответствиеСчета.Получить(ТекСтрокаТабличнаяЧасть.Номенклатура));
		УчетПоподразделениямСчетУчета = СоответствиеУчетаПоПодразделениям.Получить(Движение.СчетКт);
		Если УчетПоподразделениямСчетУчета Тогда
			Движение.ПодразделениеКт = Подразделение;
		КонецЕсли;
		Если Движение.СчетКт = ПланыСчетов.Учетный.Счет91() Тогда
			Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = Справочники.СтатьиДоходовРасходов.НайтиПоНаименованию("Списание материалов и ГП (недостачи/излишки)", Истина);
		Иначе	
			Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина)] = Склад;
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, Движение.СчетКт, 1, ТекСтрокаТабличнаяЧасть.Номенклатура);
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, Движение.СчетКт, 3, ТекСтрокаТабличнаяЧасть.СерияНоменклатуры);
			Движение.КоличествоКт = ТекСтрокаТабличнаяЧасть.Количество;
		КонецЕсли;
		
		
		Если ЕстьАвтоПереводНоменклатуры Тогда
			СтруктураПоиска = Новый Структура("Номенклатура, Склад, Счет", ТекСтрокаТабличнаяЧасть.Номенклатура.НоменклатураПервичная, Склад, Движение.СчетКт);
		Иначе
			
			СтруктураПоиска = Новый Структура("Номенклатура, Склад", ТекСтрокаТабличнаяЧасть.Номенклатура, Склад);
			
			Если ЗначениеЗаполнено(ТекСтрокаТабличнаяЧасть.СчетУчетаБУ) Тогда
				СтруктураПоиска.Вставить("Счет", ТекСтрокаТабличнаяЧасть.СчетУчетаБУ);
			КонецЕсли;
			Если УчетПоподразделениямСчетУчета Тогда
				СтруктураПоиска.Вставить("Подразделение", Подразделение);
			КонецЕсли;
			Если ИспользоватьСерии И РассчитыватьСебестоимостьПоСериям Тогда
				СтруктураПоиска.Вставить("СерияНоменклатуры", ТекСтрокаТабличнаяЧасть.СерияНоменклатуры);
			КонецЕсли;
			
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи = РезультатОстатки.НайтиСтроки(СтруктураПоиска);
		
		ТекЦена = 0;
		ТекСумма = 0;
		КоличествоОстаток = 0;
		СуммаОстаток = 0;
		Для каждого ТекСтрока Из ВыборкаДетальныеЗаписи Цикл
			КоличествоОстаток = КоличествоОстаток +  ТекСтрока.Количество;	
			СуммаОстаток = СуммаОстаток +  ТекСтрока.Сумма;
			Если НЕ ЗначениеЗаполнено(ТекСтрокаТабличнаяЧасть.СчетУчетаБУ) Тогда
				СчетКт = ТекСтрока.Счет;
			КонецЕсли;
		КонецЦикла;
		ЦенаОстаток = ?(КоличествоОстаток, СуммаОстаток / КоличествоОстаток, 0);  
		
		Если ТекСтрокаТабличнаяЧасть.Количество = КоличествоОстаток Тогда
			ТекЦена = ЦенаОстаток;
			ТекСумма = СуммаОстаток;
		Иначе	
			ТекЦена = ЦенаОстаток;
			ТекСумма = ЦенаОстаток * ТекСтрокаТабличнаяЧасть.Количество;
		КонецЕсли;
		
		Движение.Сумма = ТекСумма;
		
		СчетДт = Движение.СчетДт;
		Движение.Содержание = Комментарий;
		
		ТекИндексСтроки = ТабличнаяЧасть.Индекс(ТекСтрокаТабличнаяЧасть);
		ТЧ2[ТекИндексСтроки].Сумма = ТекСумма;
		ТЧ2[ТекИндексСтроки].Цена = ТекЦена;
		
	КонецЦикла;
	
	
	СтатьяПоУмолчанию = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Списание недостач", Истина);
	СлужбаПоУмолчанию = Справочники.Субконто.НайтиПоНаименованию("Производство_общее");
	ПроизводственноеПодразделение = Подразделение.ПроизводственноеПодразделение;
	СчетЗатратыПроизводство = ПланыСчетов.Учетный.Счет25();//.ОсновноеПрво;
	СчетСебестоимость = Справочники.УчетныеПолитики.СчетКорректировкиСеб(Предприятие);//.Себестоимость;
	СтатьяФормальнаяСебестоимость = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Формальная себестоимость", Истина);
	
	//контроль выхода из минуса
	Если КорректироватьСебестоимостьПриВыходеОстаткаИзМинуса Тогда
		
		ТЧ2.Свернуть("НоменклатураНовая", "КоличествоНовое, Сумма");
		МассивУжеВыведенныхИзМинуса = Новый Массив;
		Для каждого ТекСтрокаТабличнаяЧасть Из ТЧ2 Цикл
			
			СтруктураПоискаМинусов = Новый Структура("НоменклатураНовая, СкладПолучатель", ТекСтрокаТабличнаяЧасть.НоменклатураНовая, СкладПолучатель); 
			НайденныеСтрокиМинусов = РезультатКонтрольМинусов.НайтиСтроки(СтруктураПоискаМинусов);
			Для каждого ТекСтрокаМинусов Из НайденныеСтрокиМинусов Цикл
				ТекЦена = ?(ТекСтрокаТабличнаяЧасть.КоличествоНовое, ТекСтрокаТабличнаяЧасть.Сумма / ТекСтрокаТабличнаяЧасть.КоличествоНовое, 0);
				ТекСумма = ТекСтрокаТабличнаяЧасть.Сумма;
				Если НЕ Окр(ТекСтрокаМинусов.СуммаКонечное + ТекСумма - ТекЦена * ТекСтрокаМинусов.КоличествоКонечное, 2) Тогда
					Продолжить;			
				КонецЕсли;
				Если МассивУжеВыведенныхИзМинуса.Найти(ТекСтрокаМинусов.НоменклатураНовая) = Неопределено Тогда
					МассивУжеВыведенныхИзМинуса.Добавить(ТекСтрокаМинусов.НоменклатураНовая);
				Иначе
					Продолжить;
				КонецЕсли;
				Движение = Движения.Учетный.Добавить();
				Движение.Период = Дата;
				Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
				Движение.Предприятия = Предприятие;
				//вставка на выбор счета (обр №00000000687 Сети)
				Если ПроизводственноеПодразделение Тогда
					Движение.СчетДт = СчетЗатратыПроизводство;
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,1,СтатьяПоУмолчанию);
					Если Движение.СчетДт.ВидыСубконто.Количество() >= 2 Тогда
						УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,2,СлужбаПоУмолчанию);
					КонецЕсли;
				Иначе	
					Движение.СчетДт = СчетСебестоимость;
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,1,ТекСтрокаМинусов.Номенклатура);
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,3,СтатьяФормальнаяСебестоимость);
				КонецЕсли;	
				//конец вставки
				Если Движение.СчетДт.УчетПоПодразделениям Тогда
					Движение.ПодразделениеДт = Подразделение;
				КонецЕсли;
				Движение.СчетКт = СоответствиеСчета.Получить(ТекСтрокаМинусов.НоменклатураНовая);
				Если Движение.СчетКт.УчетПоПодразделениям Тогда
					Движение.ПодразделениеКт = Подразделение;
				КонецЕсли;	
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт,1,ТекСтрокаМинусов.НоменклатураНовая);
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт,2,СкладПолучатель);
				//УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт,3,ТекСтрокаМинусов.СерияНоменклатурыНовая);
				
				Движение.Сумма = ТекСтрокаМинусов.СуммаКонечное + ТекСумма - ТекЦена * ТекСтрокаМинусов.КоличествоКонечное;
				Движение.Содержание = "Корректировка до с/с последнего перемещения " + Формат(ТекЦена, "ЧДЦ=2") ;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	
	// Контроль лтритцательных остатков
	//УЧ_Сервер.ПроверитьОтрицательныеОстатки(Ссылка,ПланыСчетов.Учетный.Счет41(),Отказ);
	
	//контроль остатков новый
	НеКонтролироватьОстатки = сабОбщегоНазначения.ПолучитьЗначениеСвойства(ПараметрыСеанса.ТекущийПользователь, "Разрешено проведение без контроля остатков");
	Если Не НеКонтролироватьОстатки = Истина Тогда
		Для каждого ТекСтрокаМинус Из РезультатКонтроль Цикл
			Отказ = Истина;
			Сообщить(?(ТекСтрокаМинус.УчетПоПодразделениям, "По Подразделению " + Строка(ТекСтрокаМинус.Подразделение) + " ", "") + "На Складе """ + Строка(ТекСтрокаМинус.Склад) + """ номенклатуры """ + Строка(ТекСтрокаМинус.Номенклатура) + " (" + Строка(ТекСтрокаМинус.Номенклатура.Код)  + ")"" из необходимых " + Строка(ТекСтрокаМинус.КоличествоНужно) + " присутствует только "  + Строка(ТекСтрокаМинус.КоличествоОстаток) );
		КонецЦикла;
		Если Отказ Тогда
			ДополнительныеСвойства.Вставить("НехваткаОстатков", Истина);		
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	СуммаИтог = ТабличнаяЧасть.Итог("Сумма");
	СуммаДокумента = ТабличнаяЧасть.Итог("Сумма");
	
	//проверка на изменение даты
	Если ЗначениеЗаполнено(Ссылка) И НЕ Дата = Ссылка.Дата Тогда
		ДополнительныеСвойства.Вставить("ИзмененаДатаДокумента", Истина);	
	КонецЕсли;
	
	//из подписки на событие
	БюджетныйНаСервере.ДокументыПередЗаписьюПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
		
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.УЧ_ПеремещениеТоваров") Тогда
		ЗапросПоТаблицеПеревода = Новый Запрос;
		ЗапросПоТаблицеПеревода.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПереводовВИнгредиентыСрезПоследних.Номенклатура,
		|	ТаблицаПереводовВИнгредиентыСрезПоследних.Ингридиент,
		|	ТаблицаПереводовВИнгредиентыСрезПоследних.КоэффициентПеревода
		|ИЗ
		|	РегистрСведений.ТаблицаПереводовВИнгредиенты.СрезПоследних(&Дата, Номенклатура В (&Номенклатуры)) КАК ТаблицаПереводовВИнгредиентыСрезПоследних";
		ЗапросПоТаблицеПеревода.УстановитьПараметр("Дата", ТекущаяДата());
		ЗапросПоТаблицеПеревода.УстановитьПараметр("Номенклатуры", ДанныеЗаполнения.ТабличнаяЧасть.ВыгрузитьКолонку("Номенклатура"));
		ТаблицаПереводов = ЗапросПоТаблицеПеревода.Выполнить().Выгрузить();
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения, ,"Номер, Дата, ВидОперации, ДокОснование");
		ЭтотОбъект.ДокОснование = ДанныеЗаполнения;
		Подразделение = ПодразделениеПолучатель;
		Склад = СкладПолучатель;
		Для Каждого СтрокаТовара Из ДанныеЗаполнения.ТабличнаяЧасть Цикл
			СтрокаПеревода = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПеревода, СтрокаТовара);
			СтрокиПереводов = ТаблицаПереводов.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТовара.Номенклатура));
			Если СтрокиПереводов.Количество() > 0 Тогда
				СтруктураПеревода = СтрокиПереводов[0];
				СтрокаПеревода.НоменклатураНовая = СтруктураПеревода.Ингридиент;
				СтрокаПеревода.КоэффициентПеревода = СтруктураПеревода.КоэффициентПеревода;
				СтрокаПеревода.НовыйСчетУчетаБУ = сабОбщегоНазначения.ПолучитьСчетУчетаНоменклатуры(СтрокаПеревода.НоменклатураНовая);
				Если Не СтрокаПеревода.КоэффициентПеревода = 0 Тогда
					СтрокаПеревода.КоличествоНовое = СтрокаПеревода.Количество * СтрокаПеревода.КоэффициентПеревода;
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;	
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.УЧ_ПоступлениеТоваров") Тогда
		ЗапросПоТаблицеПеревода = Новый Запрос;
		ЗапросПоТаблицеПеревода.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПереводовВИнгредиентыСрезПоследних.Номенклатура,
		|	ТаблицаПереводовВИнгредиентыСрезПоследних.Ингридиент,
		|	ТаблицаПереводовВИнгредиентыСрезПоследних.КоэффициентПеревода
		|ИЗ
		|	РегистрСведений.ТаблицаПереводовВИнгредиенты.СрезПоследних(&Дата, Номенклатура В (&Номенклатуры)) КАК ТаблицаПереводовВИнгредиентыСрезПоследних";
		ЗапросПоТаблицеПеревода.УстановитьПараметр("Дата", ТекущаяДата());
		ЗапросПоТаблицеПеревода.УстановитьПараметр("Номенклатуры", ДанныеЗаполнения.ТабличнаяЧасть.ВыгрузитьКолонку("Номенклатура"));
		ТаблицаПереводов = ЗапросПоТаблицеПеревода.Выполнить().Выгрузить();
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения, ,"Номер, Дата, ВидОперации, ДокОснование");
		ЭтотОбъект.ДокОснование = ДанныеЗаполнения;
		ПодразделениеПолучатель = Подразделение;
		СкладПолучатель = Склад;
		Для Каждого СтрокаТовара Из ДанныеЗаполнения.ТабличнаяЧасть Цикл
			СтрокаПеревода = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПеревода, СтрокаТовара);
			СтрокиПереводов = ТаблицаПереводов.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТовара.Номенклатура));
			Если СтрокиПереводов.Количество() > 0 Тогда
				СтруктураПеревода = СтрокиПереводов[0];
				СтрокаПеревода.НоменклатураНовая = СтруктураПеревода.Ингридиент;
				СтрокаПеревода.КоэффициентПеревода = СтруктураПеревода.КоэффициентПеревода;
				СтрокаПеревода.НовыйСчетУчетаБУ = сабОбщегоНазначения.ПолучитьСчетУчетаНоменклатуры(СтрокаПеревода.НоменклатураНовая);
				Если Не СтрокаПеревода.КоэффициентПеревода = 0 Тогда
					СтрокаПеревода.КоличествоНовое = СтрокаПеревода.Количество * СтрокаПеревода.КоэффициентПеревода;
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.УЧ_Инвентаризация") Тогда
		
		// Заполнение шапки
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения, ,"Дата, Номер, Комментарий");
		ДокОснование 	= ДанныеЗаполнения.Ссылка;
		//СуммаДокумента 	= ДанныеЗаполнения.СуммаДокумента;
		ВидОперации 	= Перечисления.ВидыПеремещений.Перемещение;
		СкладПолучатель = ДанныеЗаполнения.Склад; 
		Для Каждого ТекСтрокаТабличнаяЧасть Из ДанныеЗаполнения.Товары Цикл
			Если ТекСтрокаТабличнаяЧасть.КоличествоОтклонение <> 0 Тогда
				НоваяСтрока = ТабличнаяЧасть.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаТабличнаяЧасть);
				Если ТекСтрокаТабличнаяЧасть.КоличествоОтклонение < 0 Тогда
					НоваяСтрока.Количество = -1*ТекСтрокаТабличнаяЧасть.КоличествоОтклонение;
					НоваяСтрока.КоличествоНовое = -1*ТекСтрокаТабличнаяЧасть.КоличествоОтклонение;
				Иначе 
					НоваяСтрока.Количество = ТекСтрокаТабличнаяЧасть.КоличествоОтклонение;
					НоваяСтрока.КоличествоНовое = ТекСтрокаТабличнаяЧасть.КоличествоОтклонение;
				КонецЕсли;
				
				Если ТекСтрокаТабличнаяЧасть.СуммаОтклонение < 0 Тогда
					НоваяСтрока.Сумма = -1*ТекСтрокаТабличнаяЧасть.СуммаОтклонение;
				Иначе 
					НоваяСтрока.Сумма = ТекСтрокаТабличнаяЧасть.СуммаОтклонение;
				КонецЕсли;
				
				НоваяСтрока.НоменклатураНовая = ТекСтрокаТабличнаяЧасть.Номенклатура;
				НоваяСтрока.СерияНоменклатурыНовая = ТекСтрокаТабличнаяЧасть.СерияНоменклатуры;
				
				//НоваяСтрока.Сумма = ТекСтрокаТабличнаяЧасть.Сумма;
				//НоваяСтрока.Цена = ТекСтрокаТабличнаяЧасть.Цена;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	сабОбщегоНазначенияБУХ.сабОбработкиЗаполненияУчпетныхДокументовОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

Функция ПоучитьСоответствияСчетовНоменклатуры()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УЧ_ПереводТМЦТабличнаяЧасть.Номенклатура КАК Номенклатура,
	               |	ВЫБОР
	               |		КОГДА УЧ_ПереводТМЦТабличнаяЧасть.СчетУчетаБУ = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ПустаяСсылка)
	               |			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Учетный.Товары)
	               |		ИНАЧЕ УЧ_ПереводТМЦТабличнаяЧасть.СчетУчетаБУ
	               |	КОНЕЦ КАК Счет
	               |ПОМЕСТИТЬ ТТТ
	               |ИЗ
	               |	Документ.УЧ_ПереводТМЦ.ТабличнаяЧасть КАК УЧ_ПереводТМЦТабличнаяЧасть
	               |ГДЕ
	               |	УЧ_ПереводТМЦТабличнаяЧасть.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	УЧ_ПереводТМЦТабличнаяЧасть.Номенклатура,
	               |	ВЫБОР
	               |		КОГДА УЧ_ПереводТМЦТабличнаяЧасть.СчетУчетаБУ = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ПустаяСсылка)
	               |			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Учетный.Товары)
	               |		ИНАЧЕ УЧ_ПереводТМЦТабличнаяЧасть.СчетУчетаБУ
	               |	КОНЕЦ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	УЧ_ПереводТМЦТабличнаяЧасть.НоменклатураНовая,
	               |	ВЫБОР
	               |		КОГДА УЧ_ПереводТМЦТабличнаяЧасть.НовыйСчетУчетаБУ = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ПустаяСсылка)
	               |			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Учетный.Товары)
	               |		ИНАЧЕ УЧ_ПереводТМЦТабличнаяЧасть.НовыйСчетУчетаБУ
	               |	КОНЕЦ
	               |ИЗ
	               |	Документ.УЧ_ПереводТМЦ.ТабличнаяЧасть КАК УЧ_ПереводТМЦТабличнаяЧасть
	               |ГДЕ
	               |	УЧ_ПереводТМЦТабличнаяЧасть.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	УЧ_ПереводТМЦТабличнаяЧасть.НоменклатураНовая,
	               |	ВЫБОР
	               |		КОГДА УЧ_ПереводТМЦТабличнаяЧасть.НовыйСчетУчетаБУ = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ПустаяСсылка)
	               |			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Учетный.Товары)
	               |		ИНАЧЕ УЧ_ПереводТМЦТабличнаяЧасть.НовыйСчетУчетаБУ
	               |	КОНЕЦ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТТТ.Номенклатура КАК Номенклатура,
	               |	ТТТ.Счет КАК Счет,
	               |	ТТТ.Счет.УчетПоПодразделениям КАК УчетПоПодразделениям
	               |ИЗ
	               |	ТТТ КАК ТТТ";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ЭтоДокументДвиженияТМЦИОпцияВыключена = сабОбщегоНазначенияКлиентСервер.ЭтоДокументДвиженияТМЦИОпцияВыключена(Ссылка);
	
	Соответствия = Новый Соответствие;
	СоответствияУчетаПодразделений = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		Соответствия.Вставить(Выборка.Номенклатура, Выборка.Счет);
		СоответствияУчетаПодразделений.Вставить(Выборка.Счет, МИН(НЕ ЭтоДокументДвиженияТМЦИОпцияВыключена, Выборка.УчетПоПодразделениям));
	КонецЦикла;
	Соответствия.Вставить(Неопределено, ПланыСчетов.Учетный.Счет41());
	Соответствия.Вставить(Null, ПланыСчетов.Учетный.Счет41());
	Соответствия.Вставить(Справочники.Номенклатура.ПустаяСсылка(), ПланыСчетов.Учетный.Счет41());
	Возврат Новый Структура("Соответствия, СоответствияУчетаПодразделений", Соответствия, СоответствияУчетаПодразделений);	
	
КонецФункции // ()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	//Если Не Подразделение.ПроизводственноеПодразделение И Константы.сабМодульОперативныйУчет.Получить() Тогда
	//	ТЧДока = Новый ТаблицаЗначений;
	//	ТЧДока.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	//	ТЧДока.Колонки.Добавить("НоменклатураНовая", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	//	ТЧДока.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15,3)));
	//	
	//	Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
	//		СтрокаТЧДока = ТЧДока.Добавить();
	//		СтрокаТЧДока.Номенклатура = СтрокаТЧ.Номенклатура;
	//		СтрокаТЧДока.НоменклатураНовая = СтрокаТЧ.НоменклатураНовая;
	//		СтрокаТЧДока.НомерСтроки = СтрокаТЧ.НомерСтроки;
	//	КонецЦикла;	
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ТЧДокумента.НомерСтроки,
	//	|	ТЧДокумента.Номенклатура,
	//	|	ТЧДокумента.НоменклатураНовая
	//	|ПОМЕСТИТЬ ВТ_ТЧДока
	//	|ИЗ
	//	|	&ТЧДокумента КАК ТЧДокумента
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ВТ_ТЧДока.НомерСтроки,
	//	|	ВТ_ТЧДока.Номенклатура,
	//	|	ВТ_ТЧДока.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	//	|	ВТ_ТЧДока.НоменклатураНовая,
	//	|	ВТ_ТЧДока.НоменклатураНовая.ТипНоменклатуры КАК ТипНовойНоменклатуры,
	//	|   Выбор когда ВТ_ТЧДока.НоменклатураНовая.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.сабТипыНоменклатуры.Сырье) 
	//	|		ИЛИ ВТ_ТЧДока.НоменклатураНовая.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.сабТипыНоменклатуры.Материалы) Тогда
	//	|		Истина
	//	|	Иначе
	//	|		Ложь
	//	|	Конец КАК НеВернаяНоваяНоменклатура	
	//	|ИЗ
	//	|	ВТ_ТЧДока КАК ВТ_ТЧДока
	//	|ГДЕ
	//	|	(ВТ_ТЧДока.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.сабТипыНоменклатуры.Сырье)
	//	|			ИЛИ ВТ_ТЧДока.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.сабТипыНоменклатуры.Материалы)
	//	|			ИЛИ ВТ_ТЧДока.НоменклатураНовая.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.сабТипыНоменклатуры.Сырье)
	//	|			ИЛИ ВТ_ТЧДока.НоменклатураНовая.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.сабТипыНоменклатуры.Материалы))";
	//	Запрос.УстановитьПараметр("ТЧДокумента", ТЧДока);
	//	
	//	РезультатЗапроса = Запрос.Выполнить();
	//	
	//	Если Не РезультатЗапроса.Пустой() Тогда
	//		Отказ = Истина;
	//		Выборка = РезультатЗапроса.Выбрать();
	//		Пока Выборка.Следующий() Цикл
	//			Сообщение = Новый СообщениеПользователю();
	//			Сообщение.Поле = "ТабличнаяЧасть[" + Строка(Выборка.НомерСтроки - 1) + ?(Выборка.НеВернаяНоваяНоменклатура, "].НоменклатураНовая", "].Номенклатура");
	//			Сообщение.Текст = "В строке " + Выборка.НомерСтроки + " выбрана номенклатура с неправильным типом: " + ?(Выборка.НеВернаяНоваяНоменклатура, Выборка.ТипНовойНоменклатуры, Выборка.ТипНоменклатуры);
	//			Сообщение.УстановитьДанные(ЭтотОбъект);
	//			Сообщение.Сообщить();
	//		КонецЦикла;
	//	КонецЕсли; 
	//КонецЕсли;	
	
КонецПроцедуры

Функция СтруктураИменНовая()
		СтруктураИмен = Новый Структура;
		СтруктураИмен.Вставить("Предприятие", "Предприятие");
		СтруктураИмен.Вставить("Подразделение", "Подразделение");
		СтруктураИмен.Вставить("Склад", "Склад");
		СтруктураИмен.Вставить("Номенклатура", "НоменклатураНовая");
	    СтруктураИмен.Вставить("Количество", "КоличествоНовое");
	    СтруктураИмен.Вставить("Товары", "ТабличнаяЧасть");
		СтруктураИмен.Вставить("Счет10", "НовыйСчетУчетаБУ");
		Возврат СтруктураИмен; 
КонецФункции

Процедура ОбработкаУдаленияПроведения(Отказ)
		РучнаяКорректировка = Ложь;
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	РучнаяКорректировка = Ложь;
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	БюджетныйНаСервере.ПриУстановкеНовогоНомераПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
КонецПроцедуры

Процедура ОбработкаЗаполненияСФормы(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт

	ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);	

КонецПроцедуры
