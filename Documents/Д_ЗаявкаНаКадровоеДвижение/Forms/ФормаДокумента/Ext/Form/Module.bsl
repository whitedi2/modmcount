///////////////////////////////////общие процедуры и функции
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//если уже есть БП по документу, то не отражаем кнопки запуска БП
		
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекБП = БПСервер.НайтиТекущийБПСервер(Объект.Ссылка);
		Если НЕ ТекБП = Неопределено Тогда
			ТекБПСтруРекв = БюджетныйНаСервере.ВернутьРеквизиты(ТекБП, "ОснованиеЗаблокирован, Стартован, ОтправлятьВсем");
		КонецЕсли;
	Иначе
		ТекБП = Неопределено;
		ТекБПСтруРекв = Новый Структура;
		ВсемСразу = Неопределено;
	КонецЕсли;
	
	Если НЕ БюджетныйНаСервере.РольДоступнаСервер("Администратор") И НЕ ТекБП = Неопределено Тогда
		ТекДоступность = ТекБПСтруРекв.ОснованиеЗаблокирован;
		Если ТекДоступность = Неопределено Тогда
			ТекДоступность = ТекБПСтруРекв.Стартован;
		КонецЕсли;
		БюджетныйНаКлиенте.ФормаТолькоПросмотр(Объект, ЭтаФорма, ТекДоступность);
		Элементы.ФормаДокументД_ЗаявкаНаКадровоеДвижениеСогласовать.Заголовок = "Отправить и закрыть";
		Если ЗначениеЗаполнено(ТекБП) Тогда
			Элементы.ДобавитьКому.Доступность = 1 - ТекДоступность;
			Элементы.ФормаДокументД_ЗаявкаНаКадровоеДвижениеСогласовать.Доступность = 1 - ТекДоступность;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ВидимостьВсем.Подсказка = "Документ будет отражаться в списке у всех пользователей, которым доступно предприятие.";
	//Элементы.ВидимостьВсем.Заголовок = "Доступен пользователям предприятиия: " + Строка(Объект.Предприятие);
	ПредприятиеПриИзменении(Неопределено);

	Если Не РежимВосстановления Тогда
		ЭтаФорма.ПодключитьОбработчикОжидания("АвтосохранениеРеквизитовФормыНаКлиенте", 30);
	КонецЕсли;
	
	ВидКадровогоДвиженияПриИзменении(Неопределено);
	УправленческийУчетПриИзменении(Неопределено);
	РегламентированныйУчетПриИзменении(Неопределено);
	
	//формируем красивые списки
	ДоступныеПредприятия = БюджетныйНаСервере.ПолучитьПредприятия();
	Если ДоступныеПредприятия.Количество() < 15 Тогда
		БюджетныйНаКлиенте.ЗаполнитьСписокРеквизитаДубль2(ЭтаФорма, "СписокВыбора_Предприятие", ДоступныеПредприятия, Объект.Предприятие);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда
		Если ПустаяСтрока(Объект.Кому) Тогда
			Объект.Кому = Справочники.Пользователи.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	//Если Не Объект.Ссылка.Пустая() Тогда
	//	Элементы.ОтслеживатьЗаявку.Пометка = БПСервер.ПроверитьОтслеживаниеЗаявки(Объект.Ссылка, ПараметрыСеанса.ТекущийПользователь);
	//КонецЕсли;
	
	
	сабОбщегоНазначения.ОбновитьКоличествоПрикрепленныхФайловСервер(ЭтаФорма);
	Если Параметры.Свойство("РежимВосстановления") и Параметры.РежимВосстановления Тогда
		сабОбщегоНазначения.ВосстановлениеРеквизитовФормы(ЭтаФорма);
		РежимВосстановления = Истина;
	Иначе 
		РежимВосстановления = Ложь;
	КонецЕсли;
	ЗаполнитьТЧ();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) И НЕ ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		Объект.Сотрудник = Справочники.Сотрудники.ПустаяСсылка();
	КонецЕсли;
	
	БюджетныйНаСервере.ДействияПриСозданииФормыДокумента(ЭтаФорма, Ложь);
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	//Если НЕ ЗначениеЗаполнено(Объект.Комментарий) Тогда
		Объект.Комментарий = Строка(Объект.ВидКадровогоДвижения) + " " + Строка(Объект.Сотрудник);
	
	//КонецЕсли;
	Отказ = 1 - ПроверитьЗаполнение();
	сабОбщегоНазначения.ОчиститьАвтосохраненияОбъекта(Объект.Ссылка);
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКому(Команда)
	Если НЕ Объект.Рецензенты.Количество() И НЕ ПустаяСтрока(Объект.Кому) И ТипЗнч(Объект.Кому) = Тип("СправочникСсылка.Пользователи") Тогда
		НоваяСтрока = Объект.Рецензенты.Добавить();
		НоваяСтрока.Пользователь = Объект.Кому;
	КонецЕсли;
	
	ТекПользователь = ОткрытьФормуМодально("Справочник.Пользователи.ФормаВыбора");
	Если НЕ ТекПользователь = Неопределено Тогда
		
		НетВБазе = БюджетныйНаСервере.ВернутьРеквизит(ТекПользователь, "НеУчаствуетВДокументообороте");
		Если НетВБазе Тогда
			Если Вопрос("Пользователь " + Строка(ТекПользователь) + " не участвует в документообороте, т.к. не имеет доступа к базе. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				Возврат;	
			КонецЕсли;	
		КонецЕсли;	
		
		НоваяСтрока = Объект.Рецензенты.Добавить();
		НоваяСтрока.Пользователь = ТекПользователь;
	Иначе
		Возврат;
	КонецЕсли;
	СформироватьКому(ТекПользователь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомуПриИзменении(Элемент)
	//Проверяем пользователей по наименованию. разделитель ;
	Если ТипЗнч(Объект.Кому) = Тип("Строка") И НЕ ПустаяСтрока(Объект.Кому) Тогда
		ТекСтрока = СтрЗаменить(Объект.Кому, "; ", ";");
		МассивИмен = Новый Массив;
		ТекИмя = "";
		Для ТекСимвол = 1 По СтрДлина(ТекСтрока) Цикл
			
			Если Сред(ТекСтрока, ТекСимвол, 1) = ";" Тогда
				МассивИмен.Добавить(ТекИмя);
				ТекИмя = "";
			Иначе
				ТекИмя = ТекИмя + Сред(ТекСтрока, ТекСимвол, 1);			
			КонецЕсли;	
			
		КонецЦикла;
		МассивИмен.Добавить(ТекИмя);
		Для каждого ТекИмя Из МассивИмен Цикл	
			Если НайтиИмя(ТекИмя) = Неопределено Тогда
				Предупреждение("Пользователь " + Строка(ТекИмя) + " не найден в справочнике.");
				СформироватьКому();
				Возврат;
			КонецЕсли;		
		КонецЦикла;
		СформироватьТЧ(МассивИмен);
	Иначе
		НетВБазе = БюджетныйНаСервере.ВернутьРеквизит(Объект.Кому, "НеУчаствуетВДокументообороте");
		Если НетВБазе Тогда
			Если Вопрос("Пользователь " + Строка(Объект.Кому) + " не участвует в документообороте, т.к. не имеет доступа к базе. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				Объект.Кому = ПользовательПустаяСсылка();
				Возврат;	
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЕсли;
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьКому(ТекПользователь = Неопределено)
	
	//Если Объект.Рецензенты.Количество() > 1 Тогда
	//	СтрокаКому = "";
	//	Для каждого ТекРецензент Из Объект.Рецензенты Цикл
	//		СтрокаКому = СтрокаКому + Строка(ТекРецензент.Пользователь) + "; ";		
	//	КонецЦикла;
	//	СтрокаКому = Лев(СтрокаКому, СтрДлина(СтрокаКому) - 2);
	//	Объект.Кому = СтрокаКому;
	//Иначе
	//	Если НЕ ТекПользователь = Неопределено Тогда
	//		Объект.Кому = ТекПользователь;
	//	КонецЕсли;
	//КонецЕсли;
	
	Если Элементы.ДобавитьКому.Видимость Тогда
		СтрокаКому = "";
		Для каждого ТекРецензент Из Объект.Рецензенты Цикл
			СтрокаКому = СтрокаКому + Строка(ТекРецензент.Пользователь) + "; ";		
		КонецЦикла;
		СтрокаКому = Лев(СтрокаКому, СтрДлина(СтрокаКому) - 2);
		Объект.Кому = СтрокаКому;
	Иначе
		Объект.Кому = ТекПользователь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьТЧ(МассивИмен)
	Объект.Рецензенты.Очистить();
	Для каждого ТекПользователь Из МассивИмен Цикл
		НоваяСтрока = Объект.Рецензенты.Добавить();
		НоваяСтрока.Пользователь = НайтиИмя(ТекПользователь);	
	КонецЦикла; 
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиИмя(ТекИмя)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Пользователи.Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", ТекИмя);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции // ()

&НаКлиенте
Процедура КомуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.Кому = "" И Элементы.ДобавитьКому.Видимость = Ложь Тогда
		Объект.Кому = ПользовательПустаяСсылка();
	КонецЕсли;	
		
	Если ТипЗнч(Объект.Кому) = Тип("Строка") Тогда
		СтандартнаяОбработка = Ложь;
		МассивСтарыхРецензентов = Новый Массив;
		Для каждого ТекРецензент Из Объект.Рецензенты Цикл
			МассивСтарыхРецензентов.Добавить(ТекРецензент.Пользователь);		
		КонецЦикла; 
		
		МассивРецензентов = ОткрытьФормуМодально("Документ.Д_СлужебнаяЗаписка.Форма.ФормаРецензенты", Новый Структура("Рецензенты", МассивСтарыхРецензентов));
		Если НЕ МассивРецензентов = Неопределено Тогда
			Объект.Рецензенты.Очистить();
			Для каждого ТекРецензент Из МассивРецензентов Цикл
				НоваяСтрока = Объект.Рецензенты.Добавить();
				НоваяСтрока.Пользователь = ТекРецензент;			
			КонецЦикла;
			СформироватьКому();
		КонецЕсли;
	ИначеЕсли Объект.Кому = Неопределено Тогда
		Объект.Кому = ПользовательПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомуОчистка(Элемент, СтандартнаяОбработка)
	Объект.Рецензенты.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеПриИзменении(Элемент)
	Элементы.ВидимостьВсем.Подсказка = "Документ будет отражаться в списке у всех пользователей, которым доступно предприятие <" + Строка(Объект.Предприятие) + ">.";
	//Элементы.ВидимостьВсем.Заголовок = "Доступен пользователям предприятиия: " + Строка(Объект.Предприятие);
	
	СтруктураДанных = БюджетныйНаСервере.ВернутьРеквизиты(Объект.Предприятие, "УчетПоПодразделениям, ВидДеятельности"); 
	
	Если НЕ СтруктураДанных = Неопределено Тогда
		Элементы.Подразделение.Доступность = СтруктураДанных.УчетПоПодразделениям;
		Если НЕ Элемент = Неопределено Тогда 
			Если СтруктураДанных.УчетПоПодразделениям Тогда
				Объект.Подразделение = СтруктураДанных.ВидДеятельности;
			Иначе
				Объект.Подразделение = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если СписокВыбора_Предприятие.Количество() Тогда
		ТекЗначение = ВыбратьИзСписка(СписокВыбора_Предприятие, Элемент, СписокВыбора_Предприятие.НайтиПоЗначению(Объект.Предприятие));	
		БюджетныйНаКлиенте.ПриНачалеВыбораРеквизитаВСпискеДубль2(ЭтаФорма, "СписокВыбора_Предприятие", ТекЗначение, "Предприятия", Объект.Предприятие, СтандартнаяОбработка, Ложь);
		ПредприятиеПриИзменении(Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ЗакрытьФорму" Тогда
		//ЭтаФорма.Записать();
		ЭтаФорма.Закрыть();
	ИначеЕсли ИмяСобытия = "УстановитьДоступность" Тогда
		Объект.ТекущийБизнесПроцесс = Параметр.ТекущийБизнесПроцесс;
		Записать();
	ИначеЕсли ИмяСобытия = "Пересчитать" Тогда
		Закрыть();
	ИначеЕсли ИмяСобытия = "ПрикрепленныеФайлы" Тогда	
		сабОбщегоНазначенияКлиент.ОбновитьКоличествоПрикрепленныхФайлов(ЭтаФорма);
	ИначеЕсли ИмяСобытия = "РазрешитьРедактированиеФормы" Тогда	
		ПриОткрытии(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
		сабОбщегоНазначенияКлиент.ПослеЗаписиАвтосохраняемойФормы(ЭтаФорма);
		ЗаполнитьТЧ();
КонецПроцедуры

&НаСервереБезКонтекста
Функция  ПользовательПустаяСсылка()
	
	Возврат Справочники.Пользователи.ПустаяСсылка();
	
КонецФункции

&НаКлиенте
Процедура АвтосохранениеРеквизитовФормыНаКлиенте()
	
	Если НЕ Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	АвтосохранениеРеквизитовФормыНаСервере();		
	
КонецПроцедуры

&НаСервере 
Процедура АвтосохранениеРеквизитовФормыНаСервере()
	
	сабОбщегоНазначения.АвтосохранениеРеквизитовФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если НЕ ЗавершениеРаботы И Не РежимВосстановления Тогда
		сабОбщегоНазначения.ОчиститьАвтосохраненияОбъекта(Объект.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если СписокВыбора_Подразаделение.Количество() Тогда
		ТекЗначение = ВыбратьИзСписка(СписокВыбора_Подразаделение, Элемент, СписокВыбора_Подразаделение.НайтиПоЗначению(Объект.Подразделение));	
		БюджетныйНаКлиенте.ПриНачалеВыбораРеквизитаВСпискеДубль2(ЭтаФорма, "СписокВыбора_Подразаделение", ТекЗначение, "ВидыДеятельности", Объект.Подразделение, СтандартнаяОбработка, Ложь);
	КонецЕсли;

КонецПроцедуры

////////////////////конец общих процедур и функций


////////////////////частные процедуры и функции
&НаКлиенте
Процедура ОтслеживатьЗаявку(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Перед тем как отслеживать заявку её нужно записать!";
		Сообщение.Сообщить();
	Иначе	
		ОтслеживатьСЗ = НЕ Элементы.ОтслеживатьЗаявку.Пометка;
		БПСервер.ОтслеживатьЗаявкуНаСервере(ОтслеживатьСЗ, Объект.Ссылка);
		Элементы.ОтслеживатьЗаявку.Пометка = ОтслеживатьСЗ;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПоКадровымДвижениям()
	ДоступенКадровыйУчет = ПараметрыСеанса.ТекущийПользователь.ДоступенУправленческийУчет ИЛИ ПараметрыСеанса.ТекущийПользователь = Объект.Автор;
	
	Элементы.ГруппаУпрУчет.Видимость 	= Объект.УправленческийУчет;
	Элементы.ГруппаРеглУчет.Видимость 	= Объект.РегламентированныйУчет;
	
	ЭтоПрием 		= Ложь;
	ЭтоУвольнение 	= Ложь;
	ЭтоПеремещение 	= Ложь;
	
	Если Объект.ВидКадровогоДвижения = Перечисления.ВидыОперацийДвиженияКадров.ПриемНаРаботу Тогда
		ЭтоПрием = Истина;
	ИначеЕсли Объект.ВидКадровогоДвижения = Перечисления.ВидыОперацийДвиженияКадров.Перемещение Тогда
		ЭтоПеремещение = Истина;
	ИначеЕсли  Объект.ВидКадровогоДвижения = Перечисления.ВидыОперацийДвиженияКадров.Увольнение Тогда
		ЭтоУвольнение = Истина;	
	КонецЕсли;	
	
	Элементы.Период.Заголовок 				= ?(ЭтоУвольнение, "Дата увольнения", "Дата приема");
	Элементы.ДатаРегл.Заголовок 			= ?(ЭтоУвольнение, "Дата увольнения", "Дата приема");
	Элементы.РазмерУчетнойЗП.Видимость 		= ЭтоПрием ИЛИ ЭтоПеремещение;
	Элементы.РазмерОфициальнойЗП.Видимость 	= ЭтоПрием ИЛИ ЭтоПеремещение;
	Элементы.ГруппаЗП.Видимость 			= (ЭтоПрием ИЛИ ЭтоПеремещение) И ДоступенКадровыйУчет;
	Элементы.Группа36.Видимость 			= ЭтоПрием ИЛИ ЭтоПеремещение;
	
	Элементы.ГруппаВыплатыУвольнениеУпр.Видимость 	= (ЭтоУвольнение И Объект.УправленческийУчет);
	Элементы.ГруппаВыплатыУвольнениеРегл.Видимость 	= (ЭтоУвольнение И Объект.РегламентированныйУчет);
	
	Элементы.ВсегоВыплатПриУвольнени.Видимость 		= ЭтоУвольнение;
	Элементы.УчетныеДанныеПрежние.Видимость 	= (ЭтоУвольнение ИЛИ Объект.ВидКадровогоДвижения = Перечисления.ВидыОперацийДвиженияКадров.Перемещение);
	Элементы.РегламентированныеДанныеПрежние.Видимость 	= (ЭтоУвольнение ИЛИ Объект.ВидКадровогоДвижения = Перечисления.ВидыОперацийДвиженияКадров.Перемещение);
	
	Элементы.Группа30.Видимость 				= НЕ ЭтоУвольнение;
	Элементы.Группа32.Видимость 				= НЕ ЭтоУвольнение;
	Элементы.Группа33.Видимость 				= НЕ ЭтоУвольнение;
	Элементы.Группа34.Видимость 				= НЕ ЭтоУвольнение;
	
	Элементы.Группа6.Видимость 				= НЕ ЭтоПрием;
	Элементы.Группа7.Видимость 				= НЕ ЭтоПрием;
	
	Элементы.РазмерУчетнойЗП.Видимость = ДоступенКадровыйУчет;
	Элементы.РазмерОфициальнойЗП.Видимость = ДоступенКадровыйУчет;
	
	Элементы.Группа29.Видимость = ДоступенКадровыйУчет;
КонецПроцедуры	

&НаКлиенте
Процедура УправленческийУчетПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементовПоКадровымДвижениям();

КонецПроцедуры

&НаКлиенте
Процедура РегламентированныйУчетПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементовПоКадровымДвижениям();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидКадровогоДвиженияПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементовПоКадровымДвижениям();
	ЭтоПриемНаРаботу = (Объект.ВидКадровогоДвижения = ПредопределенноеЗначение("Перечисление.ВидыОперацийДвиженияКадров.ПриемНаРаботу"));
	ЭтоПеремещение = (Объект.ВидКадровогоДвижения = ПредопределенноеЗначение("Перечисление.ВидыОперацийДвиженияКадров.Перемещение"));
	Если ЭтоПриемНаРаботу ИЛИ ЭтоПеремещение Тогда
		Элементы.ДолжностьРегл.ВыбиратьТип = Истина;
		Элементы.ДолжностьУпр.ВыбиратьТип = Истина;
	Иначе
		Элементы.ДолжностьРегл.ВыбиратьТип = Ложь;
		Элементы.ДолжностьУпр.ВыбиратьТип = Ложь;
		Если НЕ Элемент = Неопределено Тогда
			Объект.ДолжностьРегл = ПредопределенноеЗначение("Справочник.Должности.ПустаяСсылка");
			Объект.ДолжностьУпр = ПредопределенноеЗначение("Справочник.Должности.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура РазмерУчетнойЗППриИзменении(Элемент)
	
	ПересчитатьСуммуЗП();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуЗП();

	Если Объект.ПолнаяСтавка = 0 Тогда
		Объект.ПроцентСтавки = 0;
	Иначе
		Объект.ПроцентСтавки = Объект.РазмерОфициальнойЗП / Объект.ПолнаяСтавка;
	КонецЕсли;	
	
	Объект.ОбщийРазмерЗП = Объект.РазмерОфициальнойЗП * 0.87 + Объект.РазмерУчетнойЗП;
		
КонецПроцедуры

&НаКлиенте
Процедура ПолнаяСтавкаПриИзменении(Элемент)
	
	ПересчитатьСуммуЗП();

КонецПроцедуры

&НаКлиенте
Процедура РазмерОфициальнойЗППриИзменении(Элемент)
	
	ПересчитатьСуммуЗП();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатыПриУвольненииПриИзменении(Элемент)
	
	Объект.ВсегоВыплатПриУвольнении = Объект.ВыплатыПриУвольнении + Объект.ВыплатыПриУвольненииОфициальные;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатыПриУвольненииОфициальныеПриИзменении(Элемент)
	
	Объект.ВсегоВыплатПриУвольнении = Объект.ВыплатыПриУвольнении + Объект.ВыплатыПриУвольненииОфициальные;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзТекущихМестРаботы(Команда)


	
КонецПроцедуры

&НаСервере
Функция ЭтоУвольнение()
	
	Возврат Объект.ВидКадровогоДвижения = Перечисления.ВидыОперацийДвиженияКадров.Увольнение;
	
КонецФункции	

&НаКлиенте
Процедура СотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;	
	ЭтоПриемНаРаботу = (Объект.ВидКадровогоДвижения = ПредопределенноеЗначение("Перечисление.ВидыОперацийДвиженияКадров.ПриемНаРаботу"));
	
	
	СписокВыбора = Новый СписокЗначений;
	Если ЭтоПриемНаРаботу Тогда
		СписокВыбора.Добавить("Ввести ФИО (новый сотрудник)...");
		СписокВыбора.Добавить("Выбрать сотрудника из справочника...");
	Иначе
		СписокВыбора.Добавить("Выбрать сотрудника из списка подчиненных...");
		СписокВыбора.Добавить("Выбрать сотрудника из справочника...");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		СписокВыбора.Добавить(Объект.Сотрудник, ?(ТипЗнч(Объект.Сотрудник) = Тип("Строка"), Объект.Сотрудник + " (Строка)", Строка(Объект.Сотрудник) + " (Справочник)"));
	КонецЕсли;
	
	ВыбранноеЗначение = ВыбратьИзСписка(СписокВыбора, Элемент);
	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		Если ВыбранноеЗначение.Значение = "Ввести ФИО (новый сотрудник)..." Тогда
			СтруктураФИО = ОткрытьФормуМодально("Документ.Д_ЗаявкаНаКадровоеДвижение.Форма.ФормаВводаФИО", Новый Структура("Фамилия, Имя, Отчество", Объект.Фамилия, Объект.Имя, Объект.Отчество));
			Если НЕ СтруктураФИО = Неопределено Тогда
				Объект.Фамилия = СтруктураФИО.Фамилия;
				Объект.Имя = СтруктураФИО.Имя;
				Объект.Отчество = СтруктураФИО.Отчество;
				СписокВыбора.Добавить(Объект.Сотрудник, ?(ТипЗнч(Объект.Сотрудник) = Тип("Строка"), Объект.Сотрудник + " (Строка)", Строка(Объект.Сотрудник) + " (Справочник)"));
				Объект.Сотрудник = Объект.Фамилия + " " + Объект.Имя + " " + Объект.Отчество;			
				СтруктураНайденных = НайтиПодобныхСотрудников(Объект.Фамилия, Объект.Имя, Объект.Отчество, Объект.Сотрудник);
				Если НЕ СтруктураНайденных = Неопределено Тогда
					НайденыСоответствия = "Найдены элементы в справочнике: " + СтруктураНайденных.Соответствие;
					СписокНайденныхСотрудников.ЗагрузитьЗначения(СтруктураНайденных.Пользователи);
					Элементы.НайденыСоответствия.Видимость = Истина;
					Элементы.ВыбратьИзНайденных.Видимость = Истина;
					Если СтруктураНайденных.Соответствие = "Точное соответствие" Тогда
						Элементы.ВыбратьИзНайденных.Заголовок = "Подставить значение";
					Иначе
						Элементы.ВыбратьИзНайденных.Заголовок = "Выбрать из найденных...";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВыбранноеЗначение.Значение = "Выбрать сотрудника из справочника..." Тогда
			ОткрытьФорму("Справочник.Сотрудники.ФормаВыбора", Новый Структура("ТекущаяСтрока", Объект.Сотрудник) ,Элемент);
		ИначеЕсли ВыбранноеЗначение.Значение = "Выбрать сотрудника из списка подчиненных..." Тогда
			Предупреждение("Временно недоступно");
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧ()
	Для каждого ТекСтрока Из Объект.РегламентированныеДанныеПрежние Цикл
		ТекСтрока.Удалить = "Удалить";	
	КонецЦикла; 
	Для каждого ТекСтрока Из Объект.УчетныеДанныеПрежние Цикл
		ТекСтрока.Удалить = "Удалить";	
	КонецЦикла; 
	

КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиПодобныхСотрудников(Фамилия, Имя, Отчество, Сотрудник)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Сотрудники.Ссылка,
	               |	""Точное соответствие"" КАК Поле1
	               |ИЗ
	               |	Справочник.Сотрудники КАК Сотрудники
	               |ГДЕ
	               |	Сотрудники.Имя = &Имя
	               |	И Сотрудники.Отчество = &Отчество
	               |	И Сотрудники.Фамилия = &Фамилия
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Сотрудники.Ссылка,
	               |	""Неточное соответствие""
	               |ИЗ
	               |	Справочник.Сотрудники КАК Сотрудники
	               |ГДЕ
	               |	Сотрудники.Наименование ПОДОБНО &Сотрудник
	               |	И НЕ(Сотрудники.Имя = &Имя
	               |				И Сотрудники.Фамилия = &Фамилия
	               |				И Сотрудники.Отчество = &Отчество)";
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("Фамилия", Фамилия);
	Запрос.УстановитьПараметр("Имя", Имя);
	Запрос.УстановитьПараметр("Отчество", Отчество);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	МассивНайденных = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		МассивНайденных.Добавить(Выборка.Ссылка);
		Если Выборка.Поле1 = "Точное соответствие" Тогда
			Возврат Новый Структура("Пользователи, Соответствие", МассивНайденных, Выборка.Поле1);
		КонецЕсли;	
	КонецЦикла;
	
	Если Выборка.Количество() Тогда
		Возврат Новый Структура("Пользователи, Соответствие", МассивНайденных, Выборка.Поле1);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВыбратьИзНайденных(Команда)
	Если Элементы.ВыбратьИзНайденных.Заголовок = "Подставить значение" Тогда
		Объект.Сотрудник = СписокНайденныхСотрудников[0].Значение;
		Элементы.НайденыСоответствия.Видимость = Ложь;
		Элементы.ВыбратьИзНайденных.Видимость = Ложь;
	Иначе	
		ВыбранноеЗначение = ВыбратьИзСписка(СписокНайденныхСотрудников, Элементы.Сотрудник);
		Если НЕ ВыбранноеЗначение = Неопределено Тогда
			Объект.Сотрудник = ВыбранноеЗначение.Значение;	
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьУпрНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ЭтоПриемНаРаботу = (Объект.ВидКадровогоДвижения = ПредопределенноеЗначение("Перечисление.ВидыОперацийДвиженияКадров.ПриемНаРаботу"));
	ЭтоПеремещение = (Объект.ВидКадровогоДвижения = ПредопределенноеЗначение("Перечисление.ВидыОперацийДвиженияКадров.Перемещение"));
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить("Ввести новую должность...");
	СписокВыбора.Добавить("Выбрать должность из справочника...");
	Если ЗначениеЗаполнено(Объект.ДолжностьУпр) Тогда
		СписокВыбора.Добавить(Объект.ДолжностьУпр, ?(ТипЗнч(Объект.ДолжностьУпр) = Тип("Строка"), Объект.ДолжностьУпр + " (Строка)", Строка(Объект.ДолжностьУпр) + " (Справочник)"));
	КонецЕсли;
	
	ВыбранноеЗначение = ВыбратьИзСписка(СписокВыбора, Элемент);
	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		Если ВыбранноеЗначение.Значение = "Ввести новую должность..."Тогда
			Объект.ДолжностьУпр = "";
		иначеЕсли ВыбранноеЗначение.Значение = "Выбрать должность из справочника..." Тогда
			ОткрытьФорму("Справочник.Должности.ФормаВыбора", Новый Структура("ТекущаяСтрока", Объект.ДолжностьУпр), Элемент) ;		
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьРеглНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ЭтоПриемНаРаботу = (Объект.ВидКадровогоДвижения = ПредопределенноеЗначение("Перечисление.ВидыОперацийДвиженияКадров.ПриемНаРаботу"));
	ЭтоПеремещение = (Объект.ВидКадровогоДвижения = ПредопределенноеЗначение("Перечисление.ВидыОперацийДвиженияКадров.Перемещение"));
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить("Ввести новую должность...");
	СписокВыбора.Добавить("Выбрать должность из справочника...");
	Если ЗначениеЗаполнено(Объект.ДолжностьРегл) Тогда
		СписокВыбора.Добавить(Объект.ДолжностьРегл, ?(ТипЗнч(Объект.ДолжностьРегл) = Тип("Строка"), Объект.ДолжностьРегл + " (Строка)", Строка(Объект.ДолжностьРегл) + " (Справочник)"));
	КонецЕсли;
	
	ВыбранноеЗначение = ВыбратьИзСписка(СписокВыбора, Элемент);
	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		Если ВыбранноеЗначение.Значение = "Ввести новую должность..." Тогда
			Объект.ДолжностьРегл = "";
		иначеЕсли ВыбранноеЗначение.Значение = "Выбрать должность из справочника..." Тогда
			ОткрытьФорму("Справочник.Должности.ФормаВыбора", Новый Структура("ТекущаяСтрока", Объект.ДолжностьРегл), Элемент) ;		
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	ЗаполнитьТекущиеМестаРаботы();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТекущиеМестаРаботы()

		Если Не ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не выбран сотрудник";
		Сообщение.Поле = "Объект.Сотрудник";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	КадровоеСостояниеСотрудниковРеглСрезПоследних.Регистратор,
	               |	КадровоеСостояниеСотрудниковРеглСрезПоследних.Регистратор.ПрочаяИнформация КАК ПрочаяИнформация,
	               |	КадровоеСостояниеСотрудниковРеглСрезПоследних.Регистратор.КомпенсацияАрендыЖилья КАК КомпенсацияАрендыЖилья,
	               |	КадровоеСостояниеСотрудниковРеглСрезПоследних.Регистратор.КомпенсацияСотовойСвязи КАК КомпенсацияСотовойСвязи,
	               |	КадровоеСостояниеСотрудниковРеглСрезПоследних.Регистратор.ОбщийРазмерЗП КАК ОбщийРазмерЗП
	               |ИЗ
	               |	РегистрСведений.КадровоеСостояниеСотрудниковРегл.СрезПоследних(&Период, ) КАК КадровоеСостояниеСотрудниковРеглСрезПоследних
	               |ГДЕ
	               |	КадровоеСостояниеСотрудниковРеглСрезПоследних.Сотрудник = &Сотрудник
	               |	И КадровоеСостояниеСотрудниковРеглСрезПоследних.Работает";
	
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("Сотрудник", Объект.Сотрудник);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Объект.РегламентированныеДанныеПрежние.Очистить();
	Объект.УчетныеДанныеПрежние.Очистить();
	
	Пока Выборка.Следующий() Цикл
		
		РеглТЧ = Выборка.Регистратор.РегламентированныеДанные;
		Для каждого ТекСтрока Из РеглТЧ Цикл
			НоваяСтрока = Объект.РегламентированныеДанныеПрежние.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Удалить = "Удалить";
		КонецЦикла;
		
		РеглУпр = Выборка.Регистратор.УчетныеДанные;
		Для каждого ТекСтрока Из РеглУпр Цикл
			НоваяСтрока = Объект.УчетныеДанныеПрежние.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Удалить = "Удалить";
		КонецЦикла; 

		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УчетныеДанныеПрежниеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "УчетныеДанныеПрежниеУдалить" Тогда
		ТекСтрока = Элементы.УчетныеДанныеПрежние.ТекущаяСтрока;
		ТекОбъектСтрока = Объект.УчетныеДанныеПрежние.НайтиПоИдентификатору(ТекСтрока);
		Объект.УчетныеДанныеПрежние.Удалить(ТекОбъектСтрока);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РегламентированныеДанныеПрежниеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "РегламентированныеДанныеПрежниеУдалить" Тогда
		ТекСтрока = Элементы.РегламентированныеДанныеПрежние.ТекущаяСтрока;
		ТекОбъектСтрока = Объект.РегламентированныеДанныеПрежние.НайтиПоИдентификатору(ТекСтрока);
		Объект.РегламентированныеДанныеПрежние.Удалить(ТекОбъектСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеУпрНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если СписокВыбора_Предприятие.Количество() Тогда
		ТекЗначение = ВыбратьИзСписка(СписокВыбора_Предприятие, Элемент, СписокВыбора_Предприятие.НайтиПоЗначению(Объект.ПредприятиеУпр));	
		БюджетныйНаКлиенте.ПриНачалеВыбораРеквизитаВСпискеДубль2(ЭтаФорма, "СписокВыбора_Предприятие", ТекЗначение, "Предприятия", Объект.ПредприятиеУпр, СтандартнаяОбработка, Ложь);
		ПредприятиеУпрПриИзменении(Элемент);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеУпрПриИзменении(Элемент)
	Объект.Подразделение = "";
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	сабОбщегоНазначения.ОтобразитьСостояниеДокумента(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	сабОбщегоНазначения.ОтобразитьСостояниеДокумента(ЭтаФорма, ТекущийОбъект);
КонецПроцедуры

//////////////////////////Конец частных процедур и функций
