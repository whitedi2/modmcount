&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	//КонецЕсли;
	
	//++саб
	сабПриЧтенииНаСервере(ТекущийОбъект);
	//--саб
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, Новый Структура("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты") );
	//КонецЕсли;
	
	//++саб
	сабПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	//--саб
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	//КонецЕсли;
	
	//++саб
	сабПриОткрытии(Отказ);
	//--саб
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	Если МодульУправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
	//		ОбновитьЭлементыДополнительныхРеквизитов();
	//		МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	//	КонецЕсли;
	//КонецЕсли;
	
	//++саб
	сабОбработкаОповещения(ИмяСобытия, Параметр, Источник);
	//--саб
	
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	//КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	МодульУправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
	//КонецЕсли;
	
КонецПроцедуры


// СтандартныеПодсистемы.КонтактнаяИнформация

// Поддержка дополнительных реквизитов.

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	//КонецЕсли;
	
КонецПроцедуры




// Конец СтандартныеПодсистемы.КонтактнаяИнформация


&НаКлиенте
Процедура сабПриОткрытии(Отказ)
				
	ФлагВалютыПриИзменении("");
	
	УстановитьВидимость();
	
	ВидЗаказаПриИзменении(Неопределено);
		
КонецПроцедуры

&НаКлиенте
Процедура сабОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "Запись_ЭлектронноеПисьмоИсходящее" Тогда
		Если Параметр.Свойство("Предмет") Тогда
			ТекСтатусПисьма = сабОперОбщегоНазначения.ПроверитьОтправкуПисьмаПоПредмету(Параметр.Предмет);
			Если НЕ ТекСтатусПисьма = Неопределено Тогда
				Если Не ЗначениеЗаполнено(Объект.Статус) ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.КОтгрузке") Тогда
					Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.КОтгрузке");
					Записать();
					сабПриСозданииНаСервере(Ложь, Истина);
				КонецЕсли;			
			КонецЕсли;
		КонецЕсли; 	 
	КонецЕсли;
	Если ИмяСобытия = "ОбновитьДанныеВЗаказе" Тогда
		Если Элементы.ПодразделениеКонтрагента.ТекстРедактирования = Источник Тогда
			АдресДоставкиОбработкаВыбораЗавершение(Объект.ПодразделениеКонтрагента, Новый Структура);	
		КонецЕсли;
	КонецЕсли;
	Если ИмяСобытия = "ОповеститьРегистрОбработанных" Тогда
		ЭтаФорма.Прочитать();
		сабПриСозданииНаСервере(Ложь, Истина);
	КонецЕсли;
КонецПроцедуры
 

&НаКлиенте
Процедура УстановитьВидимость()
				
	//Элементы.ДатаПоступления.Видимость = Объект.ОтгружатьОднойДатой;
	//Элементы.ТабличнаяЧастьДатаПоступления.Видимость = (Не Объект.ОтгружатьОднойДатой);
	//Элементы.ТабличнаяЧастьКоличествоВЗапайках.Видимость = (ЗначениеЗаполнено(Объект.ПредприятиеВн));
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьКоличествоПриИзменении(Элемент)
	
	РассчитатьКоличество();
	РассчитатьСумму();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьЦенаПриИзменении(Элемент)
	РассчитатьСумму();
	ЗаполнитьКонтрольМинЦены();
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьДоставкаПриИзменении(Элемент)
	Если Элементы.ТабличнаяЧасть.ТекущиеДанные.Доставка Тогда
		Элементы.ТабличнаяЧасть.ТекущиеДанные.СуммаДоставки = Элементы.ТабличнаяЧасть.ТекущиеДанные.Количество * Элементы.ТабличнаяЧасть.ТекущиеДанные.Доставка;
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьСуммаПриИзменении(Элемент)
	ТекКоличество = Элементы.ТабличнаяЧасть.ТекущиеДанные.Количество;
	Элементы.ТабличнаяЧасть.ТекущиеДанные.Цена = ?(ТекКоличество <> 0, Элементы.ТабличнаяЧасть.ТекущиеДанные.Сумма / ТекКоличество, 0);
	РассчитатьСумму();
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьСуммаДоставкиПриИзменении(Элемент)
	ТекКоличество = Элементы.ТабличнаяЧасть.ТекущиеДанные.Количество;
	Элементы.ТабличнаяЧасть.ТекущиеДанные.Доставка = ?(ТекКоличество <> 0, Элементы.ТабличнаяЧасть.ТекущиеДанные.СуммаДоставки / ТекКоличество, 0);
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеПриИзменении(Элемент)
	сабОбщегоНазначенияКлиентСервер.СкрытьПодразделения(ЭтаФорма);
	//УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("сабУчетПоПодразделениям", Объект.Предприятие));
КонецПроцедуры

&НаКлиенте
Процедура ФлагВалютыПриИзменении(Элемент)
	//Элементы.ГруппаВалюты.Видимость = Объект.ФлагВалюты;
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	Объект.Курс = БюджетныйНаСервере.ТекущийКурс(Объект.Валюта,Объект.Дата,Объект.Предприятие);
КонецПроцедуры

&НаКлиенте
Процедура РеализацияВидДоставкиПриИзменении(Элемент)
	
	Если Элементы.ТабличнаяЧасть.ТекущиеДанные.ВидДоставки = "Авто" Тогда
		Элементы.ТабличнаяЧасть.ТекущиеДанные.Статья = ПредопределенноеЗначение("Справочник.СтатьиЗатрат.ТранспортныеАвто");
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура сабПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	БюджетныйНаСервере.ДействияПриСозданииФормыДокумента(ЭтаФорма,,Новый Структура("ЗначениеКопирования", Параметры.ЗначениеКопирования));

	ЗаблокироватьРеквизитыЗаказа = РольДоступна("допЗаблокироватьРеквизитыЗаказа");
	УстановкаЗапретаРедактированияЦен(Ложь);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ОтгружатьОднойДатой = Истина;
		Если Не ЗначениеЗаполнено(Объект.Ответственный) Тогда
			 ЗаполнитьОтветственного();
		КонецЕсли;
		Объект.УчитыватьНДС = Истина;
		Объект.ЦенаВключаетНДС = Истина;
		ПодразделениеПриИзмененииСервер();
		Объект.Дата = ТекущаяДата();
		Объект.ДатаПоступления = КонецДня(ТекущаяДата()) + 1*24*60*60;
		Объект.ДатаДоставки = КонецДня(ТекущаяДата()) + 1*24*60*60;
		Если Не ЗначениеЗаполнено(Объект.СпособДоставки) Тогда
			ТекСпособДоставки = Справочники.сабМониторВнедрения.НайтиПоНаименованию("СпособДоставкиПоУмолчанию", Истина).Значение;
			Объект.СпособДоставки = ?(ЗначениеЗаполнено(ТекСпособДоставки), ТекСпособДоставки, Справочники.СпособыДоставки.Самовывоз);
		КонецЕсли;
	Иначе
		Если Объект.Склад = сабОперОбщегоНазначения.ПолучитьСкладПоДопСвойству(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Склад возврата (Склады)", Истина), Объект.Предприятие) Тогда
			Элементы.Склад.Доступность = Ложь;
		КонецЕсли; 
		РассчитатьКоэффициентУпаковкиПриСозданииНаСервере();
		
		ТекДоступность = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.Отгружен");
		БюджетныйНаСервере.ФормаТолькоПросмотр(Объект, ЭтаФорма, ТекДоступность);  
		
		Если РольДоступна("сабРуководительПоПродажам") Или РольДоступна("сабПолныеПрава") Тогда
			Элементы.Статус.ТолькоПросмотр = Ложь;
		КонецЕсли;                                        
		
	КонецЕсли;
	
	КонтрагентПриИзмененииСервер(Ложь);
	
	//заполнить артикулы
	ЗаполнитьАртикулы();
	
	//Заполним тару, если ведется уч тары
	ВедетсяУчетТары = Ложь;
	Если ВедетсяУчетТары Тогда
		ЗаполнитьТаблицуПоТаре();
		ЗаполнитьЗначенияТары();
	КонецЕсли;
	
	СпособДоставкиПриИзмененииНаСервере(Неопределено);
	
	ЗаполнитьОстаткиИРезервы();
	ЗаполнитьКонтрольМинЦены();
	
	БезвозмезднаяПередачаПриИзмененииНаСервере(Ложь);
	ПродажаВРозницуПриИзмененииНаСервере(Ложь);
	
	Элементы.Договор.АвтоОтметкаНезаполненного = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ПроверятьЗаполнениеДоговоровВДокументах", Истина).Значение;
	
КонецПроцедуры

&НаСервере
Процедура УстановкаЗапретаРедактированияЦен(Изменять)
	
	ЗапретРедактированияЦенВЗаказе = РольДоступна("допЗапретРедактированияЦенВЗаказе");
	
	Если Не ЗначениеЗаполнено(Объект.Договор.ТипЦен) Тогда
		ЗапретРедактированияЦенВЗаказе = Ложь;
	КонецЕсли;	
	
	Элементы.ТабличнаяЧастьОбновитьЦену.Доступность = Не ЗапретРедактированияЦенВЗаказе;
	
	Если Изменять И НЕ Объект.БезвозмезднаяПередача Тогда
		Объект.ПродажаВРозницу = Объект.Договор.ПриоритетныйПорядокРасчетов = Перечисления.Д_ИсточникиСредств.Нал;	
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьОстаткиИРезервы(РасчетПоСтроке = Ложь, СтруктураДанных = Неопределено)
	
	Возврат;//не нужно для заказов на возврат
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектМодуль = РеквизитФормыВЗначение("Объект");
	
	//остатки
	СтруктураИмен = УЧ_Сервер.СформироватьСтруктуруИмен(ОбъектМодуль);
	
	СтруктураСоответствий = УЧ_Сервер.ПоучитьСоответствияСчетовНоменклатуры(ОбъектМодуль, СтруктураИмен);
	СоответствиеСчета = СтруктураСоответствий.Соответствия;
	СоответствиеУчетаПоПодразделениям = СтруктураСоответствий.СоответствияУчетаПодразделений;
	
	ТаблицаОстатков = УЧ_Сервер.ПолучитьТаблицуОстатков(ОбъектМодуль, СтруктураИмен, СтруктураСоответствий);
	РезультатОстатки = ТаблицаОстатков.РезультатОстатки;
	РезультатКонтроль = ТаблицаОстатков.РезультатКонтроль;
	
	Если РасчетПоСтроке Тогда
			СтруктураДанных.КоличествоНаОстатках = 0; 
			НайденныеСтроки = РезультатОстатки.НайтиСтроки(Новый Структура("Номенклатура, Склад", СтруктураДанных.Номенклатура, ?(ЗначениеЗаполнено(Объект.Склад), Объект.Склад, СтруктураДанных.Склад)));
			Для каждого ТекСтрокаНайденная Из НайденныеСтроки Цикл
				СтруктураДанных.КоличествоНаОстатках = ТекСтрокаНайденная.Количество;		
			КонецЦикла;	
	Иначе
		Для каждого ТекСтрока Из Объект.ТабличнаяЧасть Цикл
			ТекСтрока.КоличествоНаОстатках = 0; 
			НайденныеСтроки = РезультатОстатки.НайтиСтроки(Новый Структура("Номенклатура, Склад", ТекСтрока.Номенклатура, ?(ЗначениеЗаполнено(Объект.Склад), Объект.Склад, ТекСтрока.Склад)));
			Для каждого ТекСтрокаНайденная Из НайденныеСтроки Цикл
				ТекСтрока.КоличествоНаОстатках = ТекСтрокаНайденная.Количество;		
			КонецЦикла;	
		КонецЦикла;
	КонецЕсли;
	
	//резервы
	ВремТЧЗаказы.Очистить();
	ВремТЧЗаказыПоставщикам.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УчетныйОбороты.Субконто1 КАК Номенклатура,
	               |	УчетныйОбороты.Субконто2 КАК Склад,
	               |	УчетныйОбороты.Предприятия КАК Предприятие,
	               |	УчетныйОбороты.КоличествоОборот КАК Оборот,
	               |	УчетныйОбороты.КоличествоОборотДт КАК КоличествоПоставка,
	               |	УчетныйОбороты.КоличествоОборотКт КАК Количество,
	               |	ВЫБОР
	               |		КОГДА УчетныйОбороты.Период < НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
	               |			ТОГДА НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
	               |		ИНАЧЕ НАЧАЛОПЕРИОДА(УчетныйОбороты.Период, ДЕНЬ)
	               |	КОНЕЦ КАК Дата,
	               |	УчетныйОбороты.Регистратор КАК Заказ
	               |ИЗ
	               |	РегистрБухгалтерии.Учетный.Обороты(
	               |			,
	               |			,
	               |			Регистратор,
	               |			Счет.Код = ""0041"",
	               |			,
	               |			Предприятия В (&Предприятие)
	               |				И Субконто1 В (&Номенклатура)
	               |				И Субконто2 В (&Склад),
	               |			,
	               |			) КАК УчетныйОбороты
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА &ВсеНезакрытыеЗаказы
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ УчетныйОбороты.Период >= НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
	               |		КОНЕЦ
	               |	И НЕ УчетныйОбороты.Регистратор = &ЭтаСсылка";
	
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	Запрос.УстановитьПараметр("Номенклатура", Объект.ТабличнаяЧасть.Выгрузить(,"Номенклатура"));
	Запрос.УстановитьПараметр("ВсеНезакрытыеЗаказы", Истина); //все заказы с проводками
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("Предприятие", Объект.Предприятие);
	//Статусы = Новый Массив;
	//Статусы.Добавить(Перечисления.СтатусыЗаказовКлиентов.Отгружен);
	//Статусы.Добавить(Перечисления.СтатусыЗаказовКлиентов.Отменен);
	//Запрос.УстановитьПараметр("Статус", Статусы);
	Запрос.УстановитьПараметр("ЭтаСсылка", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();
	
	Если РасчетПоСтроке Тогда
		
		СтруктураДанных.КоличествоВРезервах = 0;
		СтруктураДанных.КоличествоКПоставке = 0;
		НайденныеСтроки = Выборка.НайтиСтроки(Новый Структура("Номенклатура, Склад", СтруктураДанных.Номенклатура, ?(ЗначениеЗаполнено(Объект.Склад), Объект.Склад, СтруктураДанных.Склад)));
		Для каждого ТекСтрокаНайденная Из НайденныеСтроки Цикл
			СтруктураДанных.КоличествоВРезервах = СтруктураДанных.КоличествоВРезервах + ТекСтрокаНайденная.Количество;
			СтруктураДанных.КоличествоКПоставке = СтруктураДанных.КоличествоКПоставке + ТекСтрокаНайденная.КоличествоПоставка;
		КонецЦикла;	
		
		СтруктураДанных.КоличествоОстаток = СтруктураДанных.КоличествоНаОстатках + СтруктураДанных.КоличествоКПоставке - СтруктураДанных.КоличествоВРезервах - СтруктураДанных.КоличествоУпаковок;
		
	Иначе
		
		Для каждого ТекСтрока Из Объект.ТабличнаяЧасть Цикл
			ТекСтрока.КоличествоВРезервах = 0; 
			ТекСтрока.КоличествоКПоставке = 0;
			НайденныеСтроки = Выборка.НайтиСтроки(Новый Структура("Номенклатура, Склад", ТекСтрока.Номенклатура, ?(ЗначениеЗаполнено(Объект.Склад), Объект.Склад, ТекСтрока.Склад)));
			Для каждого ТекСтрокаНайденная Из НайденныеСтроки Цикл
				ТекСтрока.КоличествоВРезервах = ТекСтрока.КоличествоВРезервах + ТекСтрокаНайденная.Количество;
				ТекСтрока.КоличествоКПоставке = ТекСтрока.КоличествоКПоставке + ТекСтрокаНайденная.КоличествоПоставка;
			КонецЦикла;	
		КонецЦикла;
		
		Для каждого ТекСтрока Из Объект.ТабличнаяЧасть Цикл
			ТекСтрока.КоличествоОстаток = ТекСтрока.КоличествоНаОстатках + ТекСтрока.КоличествоКПоставке - ТекСтрока.КоличествоВРезервах - ТекСтрока.КоличествоУпаковок; 
		КонецЦикла;
		
	КонецЕсли;
	
	ВремТЧЗаказы.Очистить();
	ВремТЧЗаказыПоставщикам.Очистить();
	Для каждого ТекСтрока Из Выборка Цикл
		Если ТипЗнч(ТекСтрока.Заказ) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			НовВремСтрока = ВремТЧЗаказы.Добавить();
			ЗаполнитьЗначенияСвойств(НовВремСтрока, ТекСтрока);
		ИначеЕсли ТипЗнч(ТекСтрока.Заказ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			НовВремСтрока = ВремТЧЗаказыПоставщикам.Добавить();
			ЗаполнитьЗначенияСвойств(НовВремСтрока, ТекСтрока);
		КонецЕсли;
	КонецЦикла;

	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонтрольМинЦены(РасчетПоСтроке = Ложь, СтруктураДанных = Неопределено)
	
	Если Объект.БезвозмезднаяПередача Тогда
		Возврат;	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипМинЦены = справочники.сабМониторВнедрения.НайтиПоНаименованию("КонтрольМинимальнойЦеныПоТипуЦен", Истина).Значение;
	
	Если ЗначениеЗаполнено(ТипМинЦены) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЦеныНоменклатурыСрезПоследних.Период КАК Период,
		               |	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		               |	ЦеныНоменклатурыСрезПоследних.ТипЦен КАК ТипЦен,
		               |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
		               |ИЗ
		               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		               |			&Период,
		               |			ТипЦен = &ТипЦен
		               |				И Номенклатура В (&Номенклатура)) КАК ЦеныНоменклатурыСрезПоследних";
		
		Запрос.УстановитьПараметр("ТипЦен", ТипМинЦены);
		Запрос.УстановитьПараметр("Период", ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, ТекущаяДата()));
		Запрос.УстановитьПараметр("Номенклатура", Объект.ТабличнаяЧасть.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
		
		Результат = Запрос.Выполнить();
		ВыборкаЦен = Результат.Выгрузить();
		
		Для каждого ТекСтрока Из Объект.ТабличнаяЧасть Цикл
			ТекСтрока.НарушенКонтрольМинЦены = Ложь;
			НайденныеСтрокиЦен = ВыборкаЦен.НайтиСтроки(Новый Структура("Номенклатура", ТекСтрока.Номенклатура));
			ТекЦена = ?(Объект.ЦенаВключаетНДС, ТекСтрока.Цена, ТекСтрока.Цена / (1 - ТекСтрока.СтавкаНДС.Ставка/100)); 
			Для каждого ТекНайдСтрока Из НайденныеСтрокиЦен Цикл
				Если ТекНайдСтрока.Цена > ТекЦена Тогда
					ТекСтрока.НарушенКонтрольМинЦены = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАртикулы()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Код,
		|	Номенклатура.Ссылка КАК Номенклатура
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&Номенклатура)";
	
	Запрос.УстановитьПараметр("Номенклатура", Объект.ТабличнаяЧасть.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СоответствияНоменклатуры = Новый Соответствие;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СоответствияНоменклатуры.Вставить(ВыборкаДетальныеЗаписи.Номенклатура, ВыборкаДетальныеЗаписи.Код);
	КонецЦикла;
	
	Для каждого ТекСтрока Из Объект.ТабличнаяЧасть Цикл
		ТекСтрока.Код = СоответствияНоменклатуры[ТекСтрока.Номенклатура];
	КонецЦикла; 		
КонецПроцедуры
 

&НаСервере
Процедура сабПриЧтенииНаСервере(ТекущийОбъект)
	сабОбщегоНазначения.ОтобразитьСостояниеДокумента(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	сабОбщегоНазначения.ОтобразитьСостояниеДокумента(ЭтаФорма, ТекущийОбъект);
КонецПроцедуры

&НаСервере
Процедура РассчитатьКоэффициентУпаковкиПриСозданииНаСервере()
	
	ТЧ = Объект.ТабличнаяЧасть.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковкиНоменклатуры.Номенклатура,
	|	УпаковкиНоменклатуры.Упаковка,
	|	УпаковкиНоменклатуры.Коэффициент,
	|	УпаковкиНоменклатуры.ЕдиницаИзмерения
	|ИЗ
	|	РегистрСведений.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|ГДЕ
	|	УпаковкиНоменклатуры.Номенклатура В(&Номенклатура)
	|	И УпаковкиНоменклатуры.Упаковка В(&Упаковка)";
	Запрос.УстановитьПараметр("Номенклатура", ТЧ.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("Упаковка", ТЧ.ВыгрузитьКолонку("ЕдиницаИзмерения"));
	
	ТаблицаУпаковок = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЧ Из Объект.ТабличнаяЧасть Цикл
		НайденныеСтрокиУпаковок = ТаблицаУпаковок.НайтиСтроки(Новый Структура("Номенклатура, Упаковка, ЕдиницаИзмерения", СтрокаТЧ.Номенклатура, СтрокаТЧ.ЕдиницаИзмерения, СтрокаТЧ.Номенклатура.ЕдиницаИзмерения));
		Если НайденныеСтрокиУпаковок.Количество() = 0 Тогда
			СтрокаТЧ.КоэффициентПересчетаУпаковок = 1;
		Иначе
			СтрокаТЧ.КоэффициентПересчетаУпаковок = НайденныеСтрокиУпаковок[0].Коэффициент;
		КонецЕсли; 	
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура РассчитатьСумму(ТекДанные = Неопределено)
	
	Если ТекДанные = Неопределено Тогда
		ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	КонецЕсли;	
	
	Если Не ТекДанные = Неопределено Тогда
		ТекДанные.Сумма = ТекДанные.Количество * ТекДанные.Цена;
		
		//лишний запрос делаем
		ТекРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.СтавкаНДС, "Ставка");
		Если НЕ ТекРеквизиты = Неопределено Тогда
			ТекДанные.СуммаНДС = ТекДанные.Сумма / ((100+ТекРеквизиты.Ставка)/100) * (ТекРеквизиты.Ставка/100);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	РассчитатьСумму();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	//КонтрагентПодключенКСистемеEDI = ЭлектронныйДокументооборотСервер.КонтрагентПодключенКСистемеEDI(Объект.Контрагент);
	КонтрагентПодключенКСистемеEDI = Ложь;
	КоличествоПустыхСтрок = 0;
	
	Объект.НарушенКонтрольМинЦены = Ложь;
	НарушенаКратностьВСтроках = Новый Массив;
	НарушеноКоличествоВСтроках = Новый Массив;
	
	Для Каждого СтрокаТовары Из Объект.ТабличнаяЧасть Цикл
		
		Если Объект.ОтгружатьОднойДатой Тогда
			СтрокаТовары.ДатаПоступления = Объект.ДатаПоступления;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Склад) Тогда
			СтрокаТовары.Склад = Объект.Склад;
		КонецЕсли;
		
		Если СтрокаТовары.НарушенКонтрольМинЦены Тогда
		    Объект.НарушенКонтрольМинЦены = Истина;			
		КонецЕсли;
		
		Если Объект.БезвозмезднаяПередача Тогда
		    СтрокаТовары.Цена = 0;
			СтрокаТовары.Сумма = 0;
			СтрокаТовары.СуммаБезНДС = 0;
			СтрокаТовары.СуммаНДС = 0;
		КонецЕсли;
		
		//Если КонтрагентПодключенКСистемеEDI И ЭлектронныйДокументооборотСервер.НоменклатураБезШК(СтрокаТовары.Номенклатура) Тогда			
		//	сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(Объект, "Не заполнен штрихкод у номенклатуры. Обратитесь в ОСТТ.", "Объект.ТабличнаяЧасть", СтрокаТовары.НомерСтроки, "Номенклатура", Отказ);
		//КонецЕсли;
		
		//Если СтрокаТовары.Количество И СтрокаТовары.Цена И СтрокаТовары.Сумма Тогда       
		//	КоличествоПустыхСтрок = КоличествоПустыхСтрок + 1;			
		//КонецЕсли; 
		
		Если ЗначениеЗаполнено(СтрокаТовары.Кратность) Тогда
			
			Если НЕ СтрокаТовары.Количество / СтрокаТовары.Кратность = ЦЕЛ(СтрокаТовары.Количество / СтрокаТовары.Кратность) Тогда
				НарушенаКратностьВСтроках.Добавить(СтрокаТовары);
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТовары.КоличествоОстаток < 0 Тогда
			НарушеноКоличествоВСтроках.Добавить(СтрокаТовары);		
		КонецЕсли;

	КонецЦикла;
		
	Если Не ПараметрыЗаписи.Свойство("ПропуститьПроверкуКратности") И НарушенаКратностьВСтроках.Количество() Тогда
		Отказ = Истина;
		СтрокиТекст = "";
		Для каждого ТекСтрока Из НарушенаКратностьВСтроках Цикл
			СтрокиТекст = СтрокиТекст + Строка(ТекСтрока.НомерСтроки) + ", ";	
		КонецЦикла;
		СтрокиТекст = ЛЕВ(СтрокиТекст, СтрДлина(СтрокиТекст) - 2);
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтаФорма, ПараметрыЗаписи), "В строках " + СтрокиТекст + " нарушена кратность количества. Продолжить?", РежимДиалогаВопрос.ДаНет);
	ИначеЕсли Не ПараметрыЗаписи.Свойство("ПропуститьПроверкуОстатков") И  НарушеноКоличествоВСтроках.Количество() Тогда
		Отказ = Истина;
		СтрокиТекст = "";
		Для каждого ТекСтрока Из НарушеноКоличествоВСтроках Цикл
			СтрокиТекст = СтрокиТекст + Строка(ТекСтрока.НомерСтроки) + ", ";	
		КонецЦикла;
		СтрокиТекст = ЛЕВ(СтрокиТекст, СтрДлина(СтрокиТекст) - 2);
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗаписьюЗавершение2", ЭтаФорма, ПараметрыЗаписи), "В строках " + СтрокиТекст + " нарушен контроль текущих остатов на складе. Продолжить?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;			
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ДополнительныеПараметры.Вставить("ПропуститьПроверкуКратности", Истина);
		
		НарушеноКоличествоВСтроках = Новый Массив;
		Для Каждого СтрокаТовары Из Объект.ТабличнаяЧасть Цикл
			Если СтрокаТовары.КоличествоОстаток < 0 Тогда
				НарушеноКоличествоВСтроках.Добавить(СтрокаТовары);		
			КонецЕсли;
		КонецЦикла;
		
		Если Не ДополнительныеПараметры.Свойство("ПропуститьПроверкуОстатков") И  НарушеноКоличествоВСтроках.Количество() Тогда
			Отказ = Истина;
			СтрокиТекст = "";
			Для каждого ТекСтрока Из НарушеноКоличествоВСтроках Цикл
				СтрокиТекст = СтрокиТекст + Строка(ТекСтрока.НомерСтроки) + ", ";	
			КонецЦикла;
			СтрокиТекст = ЛЕВ(СтрокиТекст, СтрДлина(СтрокиТекст) - 2);
			ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗаписьюЗавершение2", ЭтаФорма, ДополнительныеПараметры), "В строках " + СтрокиТекст + " нарушен контроль текущих остатов на складе. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Иначе
			Записать(ДополнительныеПараметры);
			Если ЗакрытьДокумент Тогда
				Закрыть();		
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюЗавершение2(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ДополнительныеПараметры.Вставить("ПропуститьПроверкуОстатков", Истина);
		Записать(ДополнительныеПараметры);
		Если ЗакрытьДокумент Тогда
			Закрыть();		
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ПоступлениеОднойДатойПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьНоменклатураПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	
	ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	Если Не ТекДанные = Неопределено Тогда
		УстановитьЗависимыеДанныеВТЧ(ТекДанные);
		РассчитатьСумму(ТекДанные);
	КонецЕсли;
	
	ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	СтруктураДанных =Новый Структура("Номенклатура, Склад, КоличествоОстаток, КоличествоНаОстатках, КоличествоВРезервах, КоличествоКПоставке, КоличествоУпаковок", 
	ТекДанные.Номенклатура, ТекДанные.Склад, ТекДанные.КоличествоОстаток, ТекДанные.КоличествоНаОстатках,
	ТекДанные.КоличествоВРезервах, ТекДанные.КоличествоКПоставке, ТекДанные.КоличествоУпаковок);
	ЗаполнитьОстаткиИРезервы(Истина, СтруктураДанных);
	ЗаполнитьКонтрольМинЦены(Истина, СтруктураДанных);
	ЗаполнитьЗначенияСвойств(ТекДанные, СтруктураДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьВидЦеныПоставщикаПриИзменении(Элемент)
	
	//Установим вид цен и рассчитаем цены
	ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	
	ТекДанные.Цена = РассчитатьЦенуПоВидуЦен(ТекДанные.ВидЦеныПоставщика, ТекДанные.Номенклатура, Объект.Предприятие, Объект.Подразделение, Объект.Контрагент, ?(ЗначениеЗаполнено(Объект.ДатаПоступления), Объект.ДатаПоступления, ТекущаяДата()), Объект.ДатаПоступления, Объект.ВидОперации);
	
	РассчитатьСумму();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЕдИзмНоменклатуры(Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковкиНоменклатуры.Упаковка
	|ИЗ
	|	РегистрСведений.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|ГДЕ
	|	УпаковкиНоменклатуры.Номенклатура = &Номенклатура
	|	И УпаковкиНоменклатуры.ОсновнаяУпаковка";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Упаковка;		
	КонецЦикла;	
	
	Возврат Номенклатура.ЕдиницаИзмерения;	
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКоэффициентПересчетаУпаковок(Номенклатура, ЕдиницаИзмерения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковкиНоменклатуры.Коэффициент
	|ИЗ
	|	РегистрСведений.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|ГДЕ
	|	УпаковкиНоменклатуры.Номенклатура = &Номенклатура
	|	И УпаковкиНоменклатуры.Упаковка = &Упаковка
	|	И УпаковкиНоменклатуры.ЕдиницаИзмерения = &ЕдиницаИзмерения";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Упаковка", ЕдиницаИзмерения);
	Запрос.УстановитьПараметр("ЕдиницаИзмерения", Номенклатура.ЕдиницаИзмерения);
	
	Выборка = запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Коэффициент;		
	КонецЦикла;
	
	Возврат 1;
	
КонецФункции	

&НаСервереБезКонтекста
Функция ЗаполнитьВидЦен(Номенклатура, Предприятие, Подразделение, Контрагент, Дата)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.ТипЦен КАК ВидЦены
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Период,
	|			Номенклатура = &Номенклатура) КАК ЦеныНоменклатурыСрезПоследних";
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.ВидЦены;
	КонецЦикла;
	
	Возврат Справочники.ВидыЦен.ПустаяСсылка();
	
КонецФункции

&НаСервереБезКонтекста
Функция РассчитатьЦенуПоВидуЦен(ВидЦены, Номенклатура, Предприятие, Подразделение, Контрагент, Дата, ДатаПоставки, ВидОперации)

	//РаботаНаДатуПоставки = Ложь;
	//
	//Если Контрагент.УсловияЦенПоставки = Перечисления.УсловияЦенПоставки.НаДатуПоставки Тогда
	//	РаботаНаДатуПоставки = Истина;
	//КонецЕсли;
	//
	//Если РаботаНаДатуПоставки И Не ЗначениеЗаполнено(ДатаПоставки) Тогда
	//	Сообщить("Не указана дата поставки! Цена не может быть заполнена!");
	//	Возврат 0;
	//КонецЕсли;
	//
	//ЭтоЗаказНаВозврат = Ложь;
	//Если ВидОперации = Перечисления.ВидыЗаказов.ВозвратБрака Тогда
	//	ЭтоЗаказНаВозврат = Истина;
	//КонецЕсли;	
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	МаркетинговыеМероприятия.ЦенаПоступления,
	//|	МаркетинговыеМероприятия.Номенклатура,
	//|	МаркетинговыеМероприятия.Предприятие,
	//|	МаркетинговыеМероприятия.Подразделение,
	//|	МаркетинговыеМероприятия.ДатаДокумента
	//|ПОМЕСТИТЬ ВТ_МаркетинговыеМероприятия
	//|ИЗ
	//|	РегистрСведений.МаркетинговыеМероприятия КАК МаркетинговыеМероприятия
	//|ГДЕ
	//|	МаркетинговыеМероприятия.Предприятие = &Предприятие
	//|	И МаркетинговыеМероприятия.Подразделение = &Подразделение
	//|	И МаркетинговыеМероприятия.Номенклатура = &Номенклатура
	//|	И МаркетинговыеМероприятия.ДатаЗаказовНач <= &Период
	//|	И МаркетинговыеМероприятия.ДатаЗаказовКон >= &Период
	//|	И МаркетинговыеМероприятия.ЦенаПоступления <> 0
	//|	И ВЫБОР
	//|			КОГДА &ЭтоЗаказНаВозврат
	//|				ТОГДА ЛОЖЬ
	//|			ИНАЧЕ ИСТИНА
	//|		КОНЕЦ
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТ_МаркетинговыеМероприятия.Номенклатура,
	//|	ВТ_МаркетинговыеМероприятия.Предприятие,
	//|	ВТ_МаркетинговыеМероприятия.Подразделение,
	//|	МАКСИМУМ(ВТ_МаркетинговыеМероприятия.ДатаДокумента) КАК ДатаДокумента
	//|ПОМЕСТИТЬ ВТ_МаксДатаМаркетинговогоМероприятия
	//|ИЗ
	//|	ВТ_МаркетинговыеМероприятия КАК ВТ_МаркетинговыеМероприятия
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ВТ_МаркетинговыеМероприятия.Номенклатура,
	//|	ВТ_МаркетинговыеМероприятия.Предприятие,
	//|	ВТ_МаркетинговыеМероприятия.Подразделение
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТ_МаркетинговыеМероприятия.ЦенаПоступления,
	//|	ВТ_МаркетинговыеМероприятия.Номенклатура,
	//|	ВТ_МаркетинговыеМероприятия.Предприятие,
	//|	ВТ_МаркетинговыеМероприятия.Подразделение
	//|ПОМЕСТИТЬ ВТ_МаркетинговыеМероприятияИтог
	//|ИЗ
	//|	ВТ_МаксДатаМаркетинговогоМероприятия КАК ВТ_МаксДатаМаркетинговогоМероприятия
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаркетинговыеМероприятия КАК ВТ_МаркетинговыеМероприятия
	//|		ПО ВТ_МаксДатаМаркетинговогоМероприятия.Номенклатура = ВТ_МаркетинговыеМероприятия.Номенклатура
	//|			И ВТ_МаксДатаМаркетинговогоМероприятия.Предприятие = ВТ_МаркетинговыеМероприятия.Предприятие
	//|			И ВТ_МаксДатаМаркетинговогоМероприятия.Подразделение = ВТ_МаркетинговыеМероприятия.Подразделение
	//|			И ВТ_МаксДатаМаркетинговогоМероприятия.ДатаДокумента = ВТ_МаркетинговыеМероприятия.ДатаДокумента
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ЕСТЬNULL(ВТ_МаркетинговыеМероприятияИтог.ЦенаПоступления, ЦеныНоменклатурыСрезПоследних.Цена) КАК Цена
	//|ИЗ
	//|	ВТ_МаркетинговыеМероприятияИтог КАК ВТ_МаркетинговыеМероприятияИтог
	//|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	//|				&Период,
	//|				ВидЦены.Поставщик = &Контрагент
	//|					И Предприятие = &Предприятие
	//|					И Номенклатура = &Номенклатура
	//|					И ВидЦены = &ВидЦены
	//|					И Подразделение = &Подразделение) КАК ЦеныНоменклатурыСрезПоследних
	//|		ПО ВТ_МаркетинговыеМероприятияИтог.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	//|			И ВТ_МаркетинговыеМероприятияИтог.Предприятие = ЦеныНоменклатурыСрезПоследних.Предприятие
	//|			И ВТ_МаркетинговыеМероприятияИтог.Подразделение = ЦеныНоменклатурыСрезПоследних.Подразделение";
	//Запрос.УстановитьПараметр("Период", ?(РаботаНаДатуПоставки И Не ЭтоЗаказНаВозврат, ДатаПоставки, Дата));
	//Запрос.УстановитьПараметр("Контрагент", Контрагент);
	//Запрос.УстановитьПараметр("Предприятие", Предприятие);
	//Запрос.УстановитьПараметр("Подразделение", Подразделение);
	//Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	//Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	//Запрос.УстановитьПараметр("ЭтоЗаказНаВозврат", ЭтоЗаказНаВозврат);
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	Возврат Выборка.Цена;
	//КонецЦикла;
	
	Возврат 0;
	
КонецФункции

&НаКлиенте
Процедура ТабличнаяЧастьКоличествоУпаковокПриИзменении(Элемент)
		
	РассчитатьКоличество();
	РассчитатьСумму();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьКоличество(ТекДанные = Неопределено)
	
	Если ТекДанные = Неопределено Тогда
		ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	КонецЕсли;	
	
	ТекДанные.Количество = ТекДанные.КоличествоУпаковок * ?(ТекДанные.КоличествоВУпаковке, ТекДанные.КоличествоВУпаковке, 1); 
	
	Если ЗначениеЗаполнено(ТекДанные.Кратность) Тогда
		
		Если НЕ ТекДанные.Количество / ТекДанные.Кратность = ЦЕЛ(ТекДанные.Количество / ТекДанные.Кратность) Тогда
			СтрокаОшибка = "Для номенклатуры " + Строка(ТекДанные.Номенклатура) + " установлена кратность " + ТекДанные.Кратность + ". Количество " + ТекДанные.Количество + " не кратно " + ТекДанные.Кратность + ".";
			сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(Объект, СтрокаОшибка, "Объект.ТабличнаяЧасть", ТекДанные.НомерСтроки, "КоличествоУпаковок", Истина);
		КонецЕсли;      
	
	КонецЕсли;
	
	РассчитатьСумму(ТекДанные);
	
КонецПроцедуры	

&НаКлиенте
Процедура ТабличнаяЧастьЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	
	Если ТипЗнч(ТекДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") Тогда
		
		ТекДанные.КоэффициентПересчетаУпаковок = ПолучитьКоэффициентПересчетаУпаковок(ТекДанные.Номенклатура, ТекДанные.ЕдиницаИзмерения);
		
		РассчитатьКоличество(ТекДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	
	Если ТипЗнч(ТекДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") Тогда
		СтандартнаяОбработка = Ложь;
		
		МассивЕдИзмНоменклатуры = ПолучитьМассивВозможныхЕдиницИзмеренияНоменклатуры(ТекДанные.Номенклатура);
		
		Элементы.ТабличнаяЧастьЕдиницаИзмерения.СписокВыбора.Очистить();
		
		Для Каждого ЭлементВыборкаЕдИзм Из МассивЕдИзмНоменклатуры Цикл
			Элементы.ТабличнаяЧастьЕдиницаИзмерения.СписокВыбора.Добавить(ЭлементВыборкаЕдИзм);
		КонецЦикла;
	КонецЕсли;
			
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивВозможныхЕдиницИзмеренияНоменклатуры(Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковкиНоменклатуры.Упаковка
	|ИЗ
	|	РегистрСведений.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|ГДЕ
	|	УпаковкиНоменклатуры.Номенклатура = &Номенклатура";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	ТаблицаУпаковок = Запрос.Выполнить().Выгрузить();
	ТаблицаУпаковок.Свернуть("Упаковка");
	
	МассивУпаковок = ТаблицаУпаковок.ВыгрузитьКолонку("Упаковка");
	МассивУпаковок.Вставить(0, Номенклатура.ЕдиницаИзмерения);
	
	Возврат МассивУпаковок;
	
КонецФункции	

&НаКлиенте
Процедура ВидЗаказаПриИзменении(Элемент)
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыЗаказов.ВнутреннееПеремещение") Тогда
		
		Массив = Новый Массив;
		Массив.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
		ТекОписаниеТипов = Новый ОписаниеТипов(Массив);
		
		Элементы.Контрагент.ОграничениеТипа = ТекОписаниеТипов;
		Элементы.Контрагент.Заголовок = "Поставщик (внутр.)";
		
		//Элементы.Договор.ОтметкаНезаполненного = Ложь;
		Элементы.Договор.Видимость = Ложь;
		
		Если НЕ Элементы.Найти("ФормаДокументУЧ_ВозвратТоваровПоставщикуСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_ВозвратТоваровПоставщикуСоздатьНаОсновании.Видимость = Ложь;
		КонецЕсли;
		Если НЕ Элементы.Найти("ФормаДокументУЧ_ПоступлениеТоваровСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_ПоступлениеТоваровСоздатьНаОсновании.Видимость = Ложь;
		КонецЕсли;
		Если НЕ Элементы.Найти("ФормаДокументУЧ_ПеремещениеТоваровСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_ПеремещениеТоваровСоздатьНаОсновании.Видимость = Истина;
		КонецЕсли;
		Если НЕ Элементы.Найти("ФормаДокументУЧ_РеализацияСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_РеализацияСоздатьНаОсновании.Видимость = Истина;
		КонецЕсли;
				
	Иначе
		
		Массив = Новый Массив;
		Массив.Добавить(Тип("СправочникСсылка.Контрагенты"));
		ТекОписаниеТипов = Новый ОписаниеТипов(Массив);
		
		Элементы.Контрагент.ОграничениеТипа = ТекОписаниеТипов;
		Элементы.Контрагент.Заголовок = "Клиент";
		Элементы.ДатаПоступления.Заголовок = "Дата отгрузки";
		
		//Элементы.Договор.ОтметкаНезаполненного = Не ЗначениеЗаполнено(Объект.Договор);
		Элементы.Договор.Видимость = Истина;
		
		Если НЕ Элементы.Найти("ФормаДокументУЧ_ВозвратТоваровПоставщикуСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_ВозвратТоваровПоставщикуСоздатьНаОсновании.Видимость = Ложь;
		КонецЕсли;
		Если НЕ Элементы.Найти("ФормаДокументУЧ_ПеремещениеТоваровСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_ПеремещениеТоваровСоздатьНаОсновании.Видимость = Ложь;
		КонецЕсли;
		Если НЕ Элементы.Найти("ФормаДокументУЧ_ПоступлениеТоваровСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_ПоступлениеТоваровСоздатьНаОсновании.Видимость = Истина;
		КонецЕсли;
		Если НЕ Элементы.Найти("ФормаДокументУЧ_РеализацияСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_РеализацияСоздатьНаОсновании.Видимость = Истина;
		КонецЕсли;
		
		//Объект.ПредприятиеВн = ПредопределенноеЗначение("Справочник.Предприятия.ПустаяСсылка");
		//Элементы.ПредприятиеВн.Видимость = Ложь;
				
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыЗаказов.ВозвратБрака") Тогда
		Элементы.ДатаПоступления.Заголовок = "Дата возврата";
		
		Элементы.ТабличнаяЧастьЗаполнитьПоАссортименту.Заголовок = "Заполнить по товарам со склада возврата";
		Если НЕ Элементы.Найти("ФормаДокументУЧ_ПоступлениеТоваровСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_ПоступлениеТоваровСоздатьНаОсновании.Видимость = Ложь;
		КонецЕсли;
		Если НЕ Элементы.Найти("ФормаДокументУЧ_ПеремещениеТоваровСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_ПеремещениеТоваровСоздатьНаОсновании.Видимость = Ложь;
		КонецЕсли;
		Если НЕ Элементы.Найти("ФормаДокументУЧ_ВозвратТоваровПоставщикуСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_ВозвратТоваровПоставщикуСоздатьНаОсновании.Видимость = Истина;
		КонецЕсли;
		Если НЕ Элементы.Найти("ФормаДокументУЧ_РеализацияСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_РеализацияСоздатьНаОсновании.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ВидЗаказаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВидЗаказаПриИзмененииНаСервере()
	
	//Если Объект.ВидОперации = Перечисления.ВидыЗаказов.ВнутреннееПеремещение Тогда
	//	НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.ПредприятиеВн");
	//	НовыйМассив = Новый Массив();
	//	НовыйМассив.Добавить(НоваяСвязь);
	//	НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
	//	Элементы.Контрагент.СвязиПараметровВыбора = НовыеСвязи;
	//Иначе
	//	НовыеСвязи = Новый ФиксированныйМассив(Новый Массив);
	//	Элементы.Контрагент.СвязиПараметровВыбора = НовыеСвязи;
	//КонецЕсли;
	
КонецПроцедуры	

#Область ПоискПоШК

&НаКлиенте
Процедура ПодобратьНоменклатуруПоШК(Команда)
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	ИмяТЧ = "ТабличнаяЧасть";
	ИмяРеквизитаНоменклатуры = "Номенклатура";
	ИмяРеквизитаКоличества = "Количество";
	сабОперОбщегоНазначенияНаКлиенте.ОбработатьЗаполнениеПоШтрихкодуНаКлиенте(ЭтаФорма, ИмяТЧ, ИмяРеквизитаНоменклатуры, ИмяРеквизитаКоличества, Штрихкод);	
	ТабличнаяЧастьНоменклатураПриИзменении(Неопределено);
	
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт		
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Статус = ВыбранноеЗначениеСтатуса;
		Модифицированность = Истина;
		УстановитьДоступностьДокумента();
    КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьДокумента()
	
	ТекДоступность = НЕ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.Новый");
	БюджетныйНаСервере.ФормаТолькоПросмотр(Объект, ЭтаФорма, ТекДоступность);  
	
	Если РольДоступна("сабРуководительПоПродажам") Или БюджетныйНаСервере.РольАдминаДоступнаСервер() Тогда
		Элементы.Статус.ТолькоПросмотр = Ложь;
	КонецЕсли;                                        

КонецПроцедуры

&НаКлиенте
Процедура СтатусОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ВыбранноеЗначениеСтатуса = ВыбранноеЗначение;
	Если НЕ ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.Новый") Тогда
		СтандартнаяОбработка = Ложь;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса",
		ЭтотОбъект);	
		
		ПоказатьВопрос(Оповещение,
		"После изменения статуса заказа изменения станут невозможны. Продолжить?",
		РежимДиалогаВопрос.ДаНет,
		0, // таймаут в секундах
		КодВозвратаДиалога.Да, // (необ.) кнопка по умолчанию
		"Вопрос" // (необ.) заголовок
		);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	КонтрагентПриИзмененииСервер();	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтветственного()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОтветственныеСрезПоследних.Ответственный КАК Ответственный
	|ИЗ
	|	РегистрСведений.Ответственные.СрезПоследних(&ДатаНа, Контрагент = &Контрагент) КАК ОтветственныеСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаНа", ?(Объект.Дата = Дата('00010101'), ТекущаяДата(), Объект.Дата));
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Объект.Ответственный = Выборка.Ответственный;	
	КонецЦикла;


КонецПроцедуры


&НаСервере
Процедура КонтрагентПриИзмененииСервер(Изменять = Истина)
	
	ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
	ТекАдрес = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияНаДату(Объект.Контрагент, ВидКонтактнойИнформации).Представление;
	
	Если Изменять Тогда
		
		Если ЗначениеЗаполнено(Объект.Контрагент.СкладОтгрузкиПоУмолчанию) Тогда
			Объект.Склад = Объект.Контрагент.СкладОтгрузкиПоУмолчанию;
			
			Для Каждого ТекСтрокаТЧ Из Объект.ТабличнаяЧасть Цикл
				ТекСтрокаТЧ.Склад = Объект.Склад;
			КонецЦикла;

		КонецЕсли;
		
		Объект.ПродажаВРозницу = Объект.Контрагент.ПриоритетныйПорядокРасчетов = Перечисления.Д_ИсточникиСредств.Нал И НЕ Объект.БезвозмезднаяПередача;
		РеквизитыДоговора = сабОперОбщегоНазначения.ПолучитьДоговорКонтрагентаПоУмолчанию(Объект.Контрагент, ?(Объект.Подразделение.ПроизводственноеПодразделение, Неопределено, Объект.Организация));
		Объект.Договор = РеквизитыДоговора.Договор;
		УстановкаЗапретаРедактированияЦен(Изменять);
		
		Если ЗначениеЗаполнено(ТекАдрес) Тогда
			Объект.АдресДоставки = ТекАдрес;
		КонецЕсли;
		
		ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		ТекТелефон = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияНаДату(Объект.Контрагент, ВидКонтактнойИнформации).Представление;
		
		Если ЗначениеЗаполнено(ТекТелефон) Тогда
			Объект.Телефон = ТекТелефон;
		КонецЕсли;
		
		ЗаполнитьОтветственного();		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПодразделенияКонтрагентов.Ссылка КАК Ссылка,
	|	ПодразделенияКонтрагентов.Адрес КАК Адрес
	|ИЗ
	|	Справочник.ПодразделенияКонтрагентов КАК ПодразделенияКонтрагентов
	|ГДЕ
	|	ПодразделенияКонтрагентов.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", Объект.Контрагент);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Элементы.АдресДоставки.СписокВыбора.Очистить();
	
	Если ЗначениеЗаполнено(Объект.АдресДоставки) Тогда
		Элементы.АдресДоставки.СписокВыбора.Добавить(ТекАдрес);
	КонецЕсли;
	
	Если Элементы.АдресДоставки.СписокВыбора.НайтиПоЗначению(ТекАдрес) = Неопределено Тогда
		Элементы.АдресДоставки.СписокВыбора.Добавить(ТекАдрес);
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		Если Элементы.АдресДоставки.СписокВыбора.НайтиПоЗначению(Выборка.Адрес) = Неопределено Тогда
			Элементы.АдресДоставки.СписокВыбора.Добавить(Выборка.Адрес);
		КонецЕсли;
	КонецЦикла;
	
	Если Выборка.Количество() = 1 И Изменять Тогда
		Объект.ПодразделениеКонтрагента = Выборка.Ссылка;
		РеквыОбъекта = БюджетныйНаСервере.ВернутьРеквизиты(Выборка.Ссылка, "Адрес, Ответственный, Выразить(Спр.Ответственный КАК Справочник.СотрудникиКонтрагентов).Телефон КАК ОтветственныйТелефон, ДатаДоставки, ДатаДоставкиДо, МаршрутДоставки"); 
		Объект.АдресДоставки = РеквыОбъекта.Адрес;
		Объект.МаршрутДоставки = РеквыОбъекта.МаршрутДоставки;
		Объект.МенеджерКонтрагента = РеквыОбъекта.Ответственный;
		Объект.Телефон = РеквыОбъекта.ОтветственныйТелефон;
		Объект.ДатаДоставки = НачалоДня(Объект.ДатаДоставки) + (РеквыОбъекта.ДатаДоставки - НачалоДня(РеквыОбъекта.ДатаДоставки));
		Объект.ДатаДоставкиДо = НачалоДня(Объект.ДатаДоставкиДо) + (РеквыОбъекта.ДатаДоставкиДо - НачалоДня(РеквыОбъекта.ДатаДоставкиДо));
	КонецЕсли;
	
	Элементы.АдресДоставки.СписокВыбора.Добавить("Подразделения контрагента...");
	
	АдресДоставкиПриИзмененииНаСервере(Ложь);
	
КонецПроцедуры


&НаСервере
Функция ПолучитьСкладПоТипуНоменклатуры(ТекНоменклатура)
	
	//ТипНоменклатуры = ТекНоменклатура.ТипНоменклатуры;
	//Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Материалы Тогда
	//	Возврат Справочники.Склады.ПолучитьСкладПоЗначениюДопРеквизита("Склад производства", Объект.Предприятие);
	//Иначе
	//	Возврат Справочники.Склады.ПолучитьСкладПоЗначениюДопРеквизита("Торговый зал", Объект.Предприятие);
	//КонецЕсли;	
	
КонецФункции	

&НаСервере
Процедура ЗаполнитьПоАссортиментуНаСервере()

	Объект.ТабличнаяЧасть.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорзинаТорговТовары.Номенклатура,
	|	ТоргиСрезПоследних.ВыведенаИзТоргов КАК ВыведенаИзТоргов
	|ПОМЕСТИТЬ ВТ_Торги
	|ИЗ
	|	Справочник.КорзинаТоргов.Товары КАК КорзинаТорговТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Торги.СрезПоследних(&Период, ) КАК ТоргиСрезПоследних
	|		ПО КорзинаТорговТовары.Ссылка = ТоргиСрезПоследних.Корзина
	|			И КорзинаТорговТовары.Номенклатура = ТоргиСрезПоследних.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаркетинговыеМероприятия.ЦенаПоступления,
	|	МаркетинговыеМероприятия.Номенклатура,
	|	МаркетинговыеМероприятия.Предприятие,
	|	МаркетинговыеМероприятия.Подразделение,
	|	МаркетинговыеМероприятия.ДатаДокумента
	|ПОМЕСТИТЬ ВТ_МаркетинговыеМероприятия
	|ИЗ
	|	РегистрСведений.МаркетинговыеМероприятия КАК МаркетинговыеМероприятия
	|ГДЕ
	|	МаркетинговыеМероприятия.Предприятие = &Предприятие
	|	И МаркетинговыеМероприятия.Подразделение = &Подразделение
	|	И МаркетинговыеМероприятия.ДатаЗаказовНач <= &ПериодЦен
	|	И МаркетинговыеМероприятия.ДатаЗаказовКон >= &ПериодЦен
	|	И МаркетинговыеМероприятия.ЦенаПоступления <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_МаркетинговыеМероприятия.Номенклатура,
	|	ВТ_МаркетинговыеМероприятия.Предприятие,
	|	ВТ_МаркетинговыеМероприятия.Подразделение,
	|	МАКСИМУМ(ВТ_МаркетинговыеМероприятия.ДатаДокумента) КАК ДатаДокумента
	|ПОМЕСТИТЬ ВТ_МаксДатаМаркетинговогоМероприятия
	|ИЗ
	|	ВТ_МаркетинговыеМероприятия КАК ВТ_МаркетинговыеМероприятия
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_МаркетинговыеМероприятия.Номенклатура,
	|	ВТ_МаркетинговыеМероприятия.Предприятие,
	|	ВТ_МаркетинговыеМероприятия.Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_МаркетинговыеМероприятия.ЦенаПоступления,
	|	ВТ_МаркетинговыеМероприятия.Номенклатура,
	|	ВТ_МаркетинговыеМероприятия.Предприятие,
	|	ВТ_МаркетинговыеМероприятия.Подразделение
	|ПОМЕСТИТЬ ВТ_МаркетинговыеМероприятияИтог
	|ИЗ
	|	ВТ_МаксДатаМаркетинговогоМероприятия КАК ВТ_МаксДатаМаркетинговогоМероприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаркетинговыеМероприятия КАК ВТ_МаркетинговыеМероприятия
	|		ПО ВТ_МаксДатаМаркетинговогоМероприятия.Номенклатура = ВТ_МаркетинговыеМероприятия.Номенклатура
	|			И ВТ_МаксДатаМаркетинговогоМероприятия.Предприятие = ВТ_МаркетинговыеМероприятия.Предприятие
	|			И ВТ_МаксДатаМаркетинговогоМероприятия.Подразделение = ВТ_МаркетинговыеМероприятия.Подразделение
	|			И ВТ_МаксДатаМаркетинговогоМероприятия.ДатаДокумента = ВТ_МаркетинговыеМероприятия.ДатаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяБлокировкаНоменклатурыВЗаказах.Предприятие,
	|	ВременнаяБлокировкаНоменклатурыВЗаказах.Подразделение,
	|	ВременнаяБлокировкаНоменклатурыВЗаказах.Номенклатура
	|ПОМЕСТИТЬ ВТ_ЗаблокированныеЗаказы
	|ИЗ
	|	РегистрСведений.ВременнаяБлокировкаНоменклатурыВЗаказах КАК ВременнаяБлокировкаНоменклатурыВЗаказах
	|ГДЕ
	|	ВременнаяБлокировкаНоменклатурыВЗаказах.ДатаНач <= &Период
	|	И ВременнаяБлокировкаНоменклатурыВЗаказах.ДатаКон >= &Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура,
	|	ЕСТЬNULL(ВТ_МаркетинговыеМероприятияИтог.ЦенаПоступления, ЦеныНоменклатурыСрезПоследних.Цена) КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦены,
	|	ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура.Код КАК Код,
	|	ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	РегистрСведений.НоменклатураПоставщика.СрезПоследних(
	|			&Период,
	|			Предприятие = &Предприятие
	|				И Подразделение = &Подразделение) КАК НоменклатураПоставщикаСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ПериодЦен,
	|				Предприятие = &Предприятие
	|					И ВидЦены.ЦенаПоставщика
	|					И ВидЦены.Поставщик = &Контрагент
	|					И Подразделение = &Подразделение) КАК ЦеныНоменклатурыСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаркетинговыеМероприятияИтог КАК ВТ_МаркетинговыеМероприятияИтог
	|			ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = ВТ_МаркетинговыеМероприятияИтог.Номенклатура
	|				И ЦеныНоменклатурыСрезПоследних.Предприятие = ВТ_МаркетинговыеМероприятияИтог.Предприятие
	|				И ЦеныНоменклатурыСрезПоследних.Подразделение = ВТ_МаркетинговыеМероприятияИтог.Подразделение
	|		ПО НоменклатураПоставщикаСрезПоследних.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И НоменклатураПоставщикаСрезПоследних.Предприятие = ЦеныНоменклатурыСрезПоследних.Предприятие
	|			И НоменклатураПоставщикаСрезПоследних.Подразделение = ЦеныНоменклатурыСрезПоследних.Подразделение
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АссортиментнаяМатрица.СрезПоследних(
	|				&Период,
	|				Предприятие = &Предприятие
	|					И Подразделение = &Подразделение) КАК АссортиментнаяМатрицаСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыОбеспеченияПотребности.СрезПоследних(
	|					&Период,
	|					Предприятие = &Предприятие
	|						И Подразделение = &Подразделение) КАК ПараметрыОбеспеченияПотребностиСрезПоследних
	|			ПО АссортиментнаяМатрицаСрезПоследних.Номенклатура = ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура
	|				И АссортиментнаяМатрицаСрезПоследних.Предприятие = ПараметрыОбеспеченияПотребностиСрезПоследних.Предприятие
	|				И АссортиментнаяМатрицаСрезПоследних.Подразделение = ПараметрыОбеспеченияПотребностиСрезПоследних.Подразделение
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Торги КАК ВТ_Торги
	|			ПО АссортиментнаяМатрицаСрезПоследних.Номенклатура = ВТ_Торги.Номенклатура
	|		ПО НоменклатураПоставщикаСрезПоследних.Номенклатура = АссортиментнаяМатрицаСрезПоследних.Номенклатура
	|			И НоменклатураПоставщикаСрезПоследних.Подразделение = АссортиментнаяМатрицаСрезПоследних.Подразделение
	|			И НоменклатураПоставщикаСрезПоследних.Предприятие = АссортиментнаяМатрицаСрезПоследних.Предприятие
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗаблокированныеЗаказы КАК ВТ_ЗаблокированныеЗаказы
	|		ПО НоменклатураПоставщикаСрезПоследних.Предприятие = ВТ_ЗаблокированныеЗаказы.Предприятие
	|			И НоменклатураПоставщикаСрезПоследних.Подразделение = ВТ_ЗаблокированныеЗаказы.Подразделение
	|			И НоменклатураПоставщикаСрезПоследних.Номенклатура = ВТ_ЗаблокированныеЗаказы.Номенклатура
	|ГДЕ
	|	НЕ ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура ЕСТЬ NULL 
	|	И НоменклатураПоставщикаСрезПоследних.Контрагент = &Контрагент
	|	И АссортиментнаяМатрицаСрезПоследних.ВыведенИзАссортимента = ЛОЖЬ
	|	И ЕСТЬNULL(ВТ_Торги.ВыведенаИзТоргов, ЛОЖЬ) = ЛОЖЬ
	|	И ВТ_ЗаблокированныеЗаказы.Номенклатура ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";
	Запрос.УстановитьПараметр("Период", ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()));
	Запрос.УстановитьПараметр("ПериодЦен", ?(Объект.Контрагент.УсловияЦенПоставки = Перечисления.УсловияЦенПоставки.НаДатуПоставки, Объект.ДатаПоступления, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата())));
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("Предприятие", Объект.Предприятие);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаТЧ = Объект.ТабличнаяЧасть.Добавить();
		СтрокаТЧ.Номенклатура = Выборка.Номенклатура;
		СтрокаТЧ.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		СтрокаТЧ.ВидЦеныПоставщика = Выборка.ВидЦены;
		СтрокаТЧ.Цена = Выборка.Цена;
		СтрокаТЧ.СтавкаНДС = Выборка.СтавкаНДС;
		СтрокаТЧ.Склад = ПолучитьСкладПоТипуНоменклатуры(Выборка.Номенклатура);
		СтрокаТЧ.Код = Выборка.Код;
		СтрокаТЧ.КоэффициентПересчетаУпаковок = 1;
	КонецЦикла;	
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьПоОстаткамВозвратаНаСервере()

	Объект.ТабличнаяЧасть.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетныйОстатки.Субконто1 КАК Номенклатура,
	|	УчетныйОстатки.Предприятия КАК Предприятие,
	|	УчетныйОстатки.Подразделение,
	|	ЛОЖЬ КАК ВыведенИзАссортимента,
	|	УчетныйОстатки.КоличествоОстаток
	|ПОМЕСТИТЬ ВТ_ОстаткиПоставщика
	|ИЗ
	|	РегистрБухгалтерии.Учетный.Остатки(
	|			&Период,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Учетный.Товары),
	|			,
	|			Субконто2 = &Склад
	|				И Подразделение = &Подразделение) КАК УчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаркетинговыеМероприятия.ЦенаПоступления,
	|	МаркетинговыеМероприятия.Номенклатура,
	|	МаркетинговыеМероприятия.Предприятие,
	|	МаркетинговыеМероприятия.Подразделение,
	|	МаркетинговыеМероприятия.ДатаДокумента
	|ПОМЕСТИТЬ ВТ_МаркетинговыеМероприятия
	|ИЗ
	|	РегистрСведений.МаркетинговыеМероприятия КАК МаркетинговыеМероприятия
	|ГДЕ
	|	МаркетинговыеМероприятия.Предприятие = &Предприятие
	|	И МаркетинговыеМероприятия.Подразделение = &Подразделение
	|	И МаркетинговыеМероприятия.ДатаЗаказовНач <= &Период
	|	И МаркетинговыеМероприятия.ДатаЗаказовКон >= &Период
	|	И МаркетинговыеМероприятия.ЦенаПоступления <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_МаркетинговыеМероприятия.Номенклатура,
	|	ВТ_МаркетинговыеМероприятия.Предприятие,
	|	ВТ_МаркетинговыеМероприятия.Подразделение,
	|	МАКСИМУМ(ВТ_МаркетинговыеМероприятия.ДатаДокумента) КАК ДатаДокумента
	|ПОМЕСТИТЬ ВТ_МаксДатаМаркетинговогоМероприятия
	|ИЗ
	|	ВТ_МаркетинговыеМероприятия КАК ВТ_МаркетинговыеМероприятия
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_МаркетинговыеМероприятия.Номенклатура,
	|	ВТ_МаркетинговыеМероприятия.Предприятие,
	|	ВТ_МаркетинговыеМероприятия.Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_МаркетинговыеМероприятия.ЦенаПоступления,
	|	ВТ_МаркетинговыеМероприятия.Номенклатура,
	|	ВТ_МаркетинговыеМероприятия.Предприятие,
	|	ВТ_МаркетинговыеМероприятия.Подразделение
	|ПОМЕСТИТЬ ВТ_МаркетинговыеМероприятияИтог
	|ИЗ
	|	ВТ_МаксДатаМаркетинговогоМероприятия КАК ВТ_МаксДатаМаркетинговогоМероприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаркетинговыеМероприятия КАК ВТ_МаркетинговыеМероприятия
	|		ПО ВТ_МаксДатаМаркетинговогоМероприятия.Номенклатура = ВТ_МаркетинговыеМероприятия.Номенклатура
	|			И ВТ_МаксДатаМаркетинговогоМероприятия.Предприятие = ВТ_МаркетинговыеМероприятия.Предприятие
	|			И ВТ_МаксДатаМаркетинговогоМероприятия.Подразделение = ВТ_МаркетинговыеМероприятия.Подразделение
	|			И ВТ_МаксДатаМаркетинговогоМероприятия.ДатаДокумента = ВТ_МаркетинговыеМероприятия.ДатаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура,
	|	ЕСТЬNULL(ВТ_МаркетинговыеМероприятияИтог.ЦенаПоступления, ЦеныНоменклатурыСрезПоследних.Цена) КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦены,
	|	ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура.Код КАК Код,
	|	ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	ВТ_ОстаткиПоставщика.КоличествоОстаток,
	|	ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура.СтавкаНДС.Ставка КАК СтавкаНДССтавка
	|ИЗ
	|	РегистрСведений.НоменклатураПоставщика.СрезПоследних(
	|			&Период,
	|			Предприятие = &Предприятие
	|				И Подразделение = &Подразделение) КАК НоменклатураПоставщикаСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Период,
	|				Предприятие = &Предприятие
	|					И ВидЦены.ЦенаПоставщика
	|					И ВидЦены.Поставщик = &Контрагент
	|					И Подразделение = &Подразделение) КАК ЦеныНоменклатурыСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаркетинговыеМероприятияИтог КАК ВТ_МаркетинговыеМероприятияИтог
	|			ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = ВТ_МаркетинговыеМероприятияИтог.Номенклатура
	|				И ЦеныНоменклатурыСрезПоследних.Предприятие = ВТ_МаркетинговыеМероприятияИтог.Предприятие
	|				И ЦеныНоменклатурыСрезПоследних.Подразделение = ВТ_МаркетинговыеМероприятияИтог.Подразделение
	|		ПО НоменклатураПоставщикаСрезПоследних.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И НоменклатураПоставщикаСрезПоследних.Предприятие = ЦеныНоменклатурыСрезПоследних.Предприятие
	|			И НоменклатураПоставщикаСрезПоследних.Подразделение = ЦеныНоменклатурыСрезПоследних.Подразделение
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиПоставщика КАК ВТ_ОстаткиПоставщика
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыОбеспеченияПотребности.СрезПоследних(
	|					&Период,
	|					Предприятие = &Предприятие
	|						И Подразделение = &Подразделение) КАК ПараметрыОбеспеченияПотребностиСрезПоследних
	|			ПО ВТ_ОстаткиПоставщика.Номенклатура = ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура
	|				И ВТ_ОстаткиПоставщика.Предприятие = ПараметрыОбеспеченияПотребностиСрезПоследних.Предприятие
	|				И ВТ_ОстаткиПоставщика.Подразделение = ПараметрыОбеспеченияПотребностиСрезПоследних.Подразделение
	|		ПО НоменклатураПоставщикаСрезПоследних.Номенклатура = ВТ_ОстаткиПоставщика.Номенклатура
	|			И НоменклатураПоставщикаСрезПоследних.Подразделение = ВТ_ОстаткиПоставщика.Подразделение
	|			И НоменклатураПоставщикаСрезПоследних.Предприятие = ВТ_ОстаткиПоставщика.Предприятие
	|ГДЕ
	|	НЕ ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура ЕСТЬ NULL 
	|	И НоменклатураПоставщикаСрезПоследних.Контрагент = &Контрагент
	|	И ВТ_ОстаткиПоставщика.ВыведенИзАссортимента = ЛОЖЬ
	|	И ЕСТЬNULL(ВТ_ОстаткиПоставщика.КоличествоОстаток, 0) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";
	
	ТекДата = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата());
	Запрос.УстановитьПараметр("Период", ТекДата);
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("Предприятие", Объект.Предприятие);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если НЕ Выборка.Количество() Тогда
		Сообщить("На складе """ + Строка(Объект.Склад) + """ отсутствуют товары к возврату по поставщику """ + Строка(Объект.Контрагент) + """ на дату """ + Строка(ТекДата) + """. Возможно перед заказом необходимо сделать перемещение товара на данный склад.");	
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		СтрокаТЧ = Объект.ТабличнаяЧасть.Добавить();
		СтрокаТЧ.Номенклатура = Выборка.Номенклатура;
		СтрокаТЧ.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		СтрокаТЧ.ВидЦеныПоставщика = Выборка.ВидЦены;
		СтрокаТЧ.Цена = Выборка.Цена;
		СтрокаТЧ.СтавкаНДС = Выборка.СтавкаНДС;
		СтрокаТЧ.Склад = ПолучитьСкладПоТипуНоменклатуры(Выборка.Номенклатура);
		СтрокаТЧ.Код = Выборка.Код;
		СтрокаТЧ.КоэффициентПересчетаУпаковок = 1;
		СтрокаТЧ.Количество = Выборка.КоличествоОстаток;
		СтрокаТЧ.Сумма = СтрокаТЧ.Количество * СтрокаТЧ.Цена; 
		СтрокаТЧ.СуммаНДС = СтрокаТЧ.Сумма / ((100+Выборка.СтавкаНДССтавка)/100) * (Выборка.СтавкаНДССтавка/100);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоАссортименту(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указан поставщик!";
		Сообщение.Поле = "Контрагент";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;	
	
	Если Элементы.ТабличнаяЧастьЗаполнитьПоАссортименту.Заголовок = "Заполнить по товарам со склада возврата" Тогда
		ЗаполнитьПоОстаткамВозвратаНаСервере();
	Иначе
		ЗаполнитьПоАссортиментуНаСервере();
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	//ОрганизацияВДоговоре = БюджетныйНаСервере.ВернутьРеквизиты(Объект.Договор, "Организация");
	//Если ТипЗнч(ОрганизацияВДоговоре) = Тип("Структура") И ЗначениеЗаполнено(ОрганизацияВДоговоре.Организация) Тогда
	//	Объект.Организация = ОрганизацияВДоговоре.Организация;
	//КонецЕсли;  
	
	УстановитьДоступностьДокумента();
	УстановкаЗапретаРедактированияЦен(Не Элемент = Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПустыеСтроки(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВопроса", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, "Строки с пустым количеством будут очищены. Продолжить?",РежимДиалогаВопрос.ДаНет, 60);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		КУдалению = Новый Массив;
		Для каждого ТекСтрока Из Объект.ТабличнаяЧасть Цикл
			Если НЕ ТекСтрока.Количество Тогда
				КУдалению.Добавить(ТекСтрока);	
			КонецЕсли; 
		КонецЦикла; 
		
		Для каждого ТекУд Из КУдалению Цикл
			Объект.ТабличнаяЧасть.Удалить(ТекУд);	
			Модифицированность = Истина;
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры 


&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	//++саб
	сабПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи);
	//--саб
КонецПроцедуры

&НаСервере
Процедура УдалениеМаршрутаИзРегистра()
	НаборЗаписей = РегистрыСведений.ЗаказыПоМаршрутам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЗаказКлиента.Установить(Объект.Ссылка);
	НаборЗаписей.Прочитать();
	Если НЕ НаборЗаписей.Количество() = 0 Тогда
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина);
	КонецЕсли;	
КонецПроцедуры	

&НаСервере
Процедура ЗаписатьЗаказыПоМаршрутам()
		НоваяЗапись = РегистрыСведений.ЗаказыПоМаршрутам.СоздатьМенеджерЗаписи();	
		НоваяЗапись.ЗаказКлиента = Объект.Ссылка;
		НоваяЗапись.Маршрут = Маршрут;
		НоваяЗапись.Записать();
КонецПроцедуры

&НаСервере
Процедура сабПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьАртикулы();
	Если ВедетсяУчетТары Тогда
		ЗаполнитьЗначенияТары();
	КонецЕсли;
	
	ЗаполнитьОстаткиИРезервы();
	ЗаполнитьКонтрольМинЦены();

КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	ПодразделениеПриИзмененииСервер();
КонецПроцедуры

&НаСервере
Процедура ПодразделениеПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		РеквизитыПодразделения = БюджетныйНаСервере.ВернутьРеквизиты(Объект.Подразделение, "Склад, Организация");
		
		Если Объект.ВидОперации = Перечисления.ВидыЗаказов.ВозвратБрака Тогда
			Объект.Склад = сабОперОбщегоНазначения.ПолучитьСкладПоДопСвойству(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Склад возврата (Склады)", Истина), Объект.Предприятие);	
			Если ЗначениеЗаполнено(Объект.Склад) Тогда
				Элементы.Склад.Доступность = Ложь;
			Иначе
				Объект.Склад = РеквизитыПодразделения.Склад;
			КонецЕсли;
		Иначе
			Объект.Склад = РеквизитыПодразделения.Склад;
		КонецЕсли;
		
		Объект.Организация = РеквизитыПодразделения.Организация;
		КонтрагентПриИзмененииСервер();
	КонецЕсли; 
	
	
КонецПроцедуры



&НаКлиенте
Процедура ТабличнаяЧастьСтавкаНДСПриИзменении(Элемент)
	РассчитатьСумму();
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьЦену(Команда)
	
	Для Каждого ТекДанные Из Объект.ТабличнаяЧасть Цикл
		УстановитьЗависимыеДанныеВТЧ(ТекДанные);
		РассчитатьСуммуТовары(ТекДанные);
	КонецЦикла;
	Модифицированность = Истина;
	
	ЗаполнитьКонтрольМинЦены();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуТовары(ТекДанные = Неопределено)
	
	Если ТекДанные = Неопределено Тогда
		ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	КонецЕсли;	
	
	Если Не ТекДанные = Неопределено Тогда
		ТекДанные.Сумма = ТекДанные.Количество * ТекДанные.Цена;
		//ТекДанные.СуммаОтгрузки = ТекДанные.Количество * ТекДанные.Цена;
		
		ТекРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.СтавкаНДС, "Ставка");
		Если НЕ ТекРеквизиты = Неопределено Тогда
			ТекДанные.СуммаНДС = ТекДанные.Сумма / ((100+ТекРеквизиты.Ставка)/100) * (ТекРеквизиты.Ставка/100);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗависимыеДанныеВТЧ(ТекДанные)
	
	//Если Объект.Счет = УЧ_Сервер.СчетПоКоду("79.02") Тогда
	//	ЦенаКЗаполнению = РассчитатьЦенуВНХ(ТекДанные.Номенклатура, Объект.ПредприятиеПоставщик, Объект.ПодразделениеВн, Объект.Предприятие, Объект.Подразделение, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()));
	//	//ЦенаКЗаполнению = сабОперОбщегоНазначения.РассчитатьЦенуВНХ(ТекДанные.Наименование, Объект.Предприятие, Объект.Подразделение, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()));
	//	Если ЦенаКЗаполнению <> 0 Тогда
	//		ТекДанные.Цена = ЦенаКЗаполнению;
	//	КонецЕсли;
	//Иначе
		ЦенаКЗаполнению = РассчитатьЦену(ТекДанные.Номенклатура, Объект.Контрагент, Объект.Предприятие, Объект.Подразделение, ?(ЗначениеЗаполнено(Объект.ДатаПоступления), Объект.ДатаПоступления, ТекущаяДата()), Объект.Договор);
		//Если ЦенаКЗаполнению <> 0 Тогда
			ТекДанные.Цена = ЦенаКЗаполнению;
		//КонецЕсли;
	//КонецЕсли;	
	
	//Установим НДС и артикул
	Если ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
		ТекРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.Номенклатура, "СтавкаНДС, Код, Счет10, ВидСтавкиНДС, ЕдиницаИзмерения, Кратность, МинимальнаяПартия", Ложь);
		ТекДанные.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвВидовСтавокНДСБУХУУ().Получить(ТекРеквизиты.ВидСтавкиНДС);;
		ТекДанные.ЕдиницаИзмерения = ТекРеквизиты.ЕдиницаИзмерения;
		ТекДанные.Кратность = ТекРеквизиты.Кратность;
		ТекДанные.КоличествоВУпаковке = ТекРеквизиты.МинимальнаяПартия;
		//ТекДанные.Счет = ТекРеквизиты.Счет10;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьЦену(Номенклатура, Контрагент, Предприятие, Подразделение, Дата, Договор)
	
	Если Не ЗначениеЗаполнено(Договор.ТипЦен) Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Период, Номенклатура = &Номенклатура) КАК ЦеныНоменклатурыСрезПоследних
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦенНоменклатуры.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЦеныНоменклатурыСрезПоследних.ТипЦен = &ТипЦен
	|		КОНЕЦ";
	Запрос.УстановитьПараметр("Период", Дата);
	//Запрос.УстановитьПараметр("Предприятие", Предприятие);
	//Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ТипЦен", Договор.ТипЦен);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Цена;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции	


&НаСервереБезКонтекста
Функция РассчитатьЦенуВнутреннегоПеремещения(Номенклатура, Предприятие, Подразделение, ПодразделениеПолучатель, Дата)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Период,
	|			ВидЦены.ЦенаПродажи
	|				И Предприятие = &Предприятие
	|				И Номенклатура = &Номенклатура
	|				И Подразделение = &Подразделение) КАК ЦеныНоменклатурыСрезПоследних";
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат ?(Подразделение.Организация = ПодразделениеПолучатель.Организация, Выборка.Цена, Выборка.Цена/1.1);
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

//К удалению: перенесена в общий модуль
&НаСервереБезКонтекста
Функция РассчитатьЦенуВНХ(Номенклатура, Предприятие, Подразделение, Дата)
	
	Если Номенклатура.Счет10 = ПланыСчетов.Учетный.Счет43() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&Период,
		|			Предприятие = &Предприятие
		|				И Подразделение = &Подразделение
		|				И Номенклатура = &Номенклатура
		|				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних";
		Запрос.УстановитьПараметр("Период", Дата);
		Запрос.УстановитьПараметр("Предприятие", Предприятие);
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("ВидЦены", Справочники.ВидыЦен.НайтиПоНаименованию("Производство ВН", Истина));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Цена;
		КонецЦикла;
		
		Возврат 0;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Цена
		|ИЗ
		|	РегистрСведений.НоменклатураПоставщика.СрезПоследних(
		|			&Период,
		|			Предприятие = &Предприятие
		|				И Подразделение = &Подразделение
		|				И Номенклатура = &Номенклатура) КАК НоменклатураПоставщикаСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				&Период,
		|				Предприятие = &Предприятие
		|					И Подразделение = &Подразделение
		|					И Номенклатура = &Номенклатура
		|					И ВидЦены.ЦенаПоставщика) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО НоменклатураПоставщикаСрезПоследних.Предприятие = ЦеныНоменклатурыСрезПоследних.Предприятие
		|			И НоменклатураПоставщикаСрезПоследних.Подразделение = ЦеныНоменклатурыСрезПоследних.Подразделение
		|			И НоменклатураПоставщикаСрезПоследних.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И НоменклатураПоставщикаСрезПоследних.Контрагент = ЦеныНоменклатурыСрезПоследних.ВидЦены.Поставщик";
		Запрос.УстановитьПараметр("Период", Дата);
		Запрос.УстановитьПараметр("Предприятие", Предприятие);
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Цена;
		КонецЦикла;
		
		Возврат 0;
	КонецЕсли;	
	
КонецФункции	

&НаСервере
Процедура ПереопределитьСвязиПараметровВыбора()
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Контрагент"));
	НовыйМассив.Добавить(Новый СвязьПараметраВыбора("Отбор.Предприятие", "Объект.Предприятие"));
	
	Если Не Объект.Подразделение.ПроизводственноеПодразделение Тогда
		НовыйМассив.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));
	КонецЕсли;		
	
	НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
	
	Элементы.Договор.СвязиПараметровВыбора = НовыеСвязи;
	
	Если Объект.ПродажаВРозницу Тогда
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(Перечисления.Д_ИсточникиСредств.Нал);
		НовыеЗначения = Новый ФиксированныйМассив(НовыйМассив);
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ПриоритетныйПорядокРасчетов", НовыеЗначения);
		
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		
		Элементы.Договор.ПараметрыВыбора = НовыеПараметры;  
	Иначе    
		НовыйМассив = Новый Массив();		
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);

		Элементы.Договор.ПараметрыВыбора = НовыеПараметры;  
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПереопределитьСвязиПараметровВыбора();	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзExcel(Команда)
	
	ФормаЗагрузки = ПолучитьФорму("ОбщаяФорма.ФормаЗагрузкиИзExcel", Новый Структура("ВидЗагрузки", "ЗагрузкаВТЧЗаказКлиента"));
	
	ПутьКФайлу = ФормаЗагрузки.ОткрытьМодально();
	
	Если ЗначениеЗаполнено(ПутьКФайлу) Тогда
		СтруктураВозврата = ФормаЗагрузки.ПолучитьДанныеПоЗагрузке(ПутьКФайлу);
		Для Каждого ЭлементСтруктурыВозврата Из СтруктураВозврата Цикл
			ТекДанные = Объект.ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(ТекДанные, ЭлементСтруктурыВозврата.Значение);
			УстановитьЗависимыеДанныеВТЧ(ТекДанные);
			РассчитатьСумму(ТекДанные);
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ГУИДСтроки = Новый УникальныйИдентификатор; 
	КонецЕсли;	
		
КонецПроцедуры

Процедура ЗаполнитьТаблицуПоТаре()	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыВозвратнойТары.Наименование КАК Наименование,
	|	ВидыВозвратнойТары.Код КАК Код
	|ИЗ
	|	Справочник.ВидыВозвратнойТары КАК ВидыВозвратнойТары
	|ГДЕ
	|	НЕ ВидыВозвратнойТары.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	ТаблицаВидовТары = Запрос.Выполнить().Выгрузить();

	МассивРеквизитов = Новый Массив;

	Для Каждого СтрокаТары Из ТаблицаВидовТары Цикл
		МассивРеквизитов.Добавить(Новый РеквизитФормы("с" + СтрокаТары.Код, Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(2,0)), "Объект.ТабличнаяЧасть"));
	КонецЦикла;	
	ИзменитьРеквизиты(МассивРеквизитов, );      
	
	ЭлементРодитель = Элементы.Найти("ГруппаТара");
	
	Для Каждого СтрокаТары Из ТаблицаВидовТары Цикл
		НовыйЭлемент = Элементы.Добавить("с" + СтрокаТары.Код, Тип("ПолеФормы"), ЭлементРодитель); 
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = "Объект.ТабличнаяЧасть." + "с" + СтрокаТары.Код;
		НовыйЭлемент.Заголовок = СтрокаТары.Наименование;
		НовыйЭлемент.Ширина = 3;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", "ТараПриИзменении");
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ТараПриИзменении(Элемент)
		
	ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
		
	ТараПриИзмененииНаСервере(ТекДанные.ГУИДСтроки, Элемент.Имя, ТекДанные[Элемент.Имя]);
	
КонецПроцедуры

&НаСервере
Процедура ТараПриИзмененииНаСервере(ТекГУИД, ТекИмя, ТекЗначение)

	ВидТары = Справочники.ВидыВозвратнойТары.НайтиПоКоду(СтрЗаменить(ТекИмя, "с", "")); 
	
	НайденныеСтроки = Объект.ВозвратнаяТара.НайтиСтроки(Новый Структура("ГУИДСтроки, Вид", ТекГУИД, ВидТары));
	Если НайденныеСтроки.Количество() = 0 Тогда
		ТекСтрока = Объект.ВозвратнаяТара.Добавить();
		ТекСтрока.ГУИДСтроки = ТекГУИД;
	Иначе
		ТекСтрока = НайденныеСтроки[0];
		Если ТекЗначение = 0 Тогда
			Объект.ВозвратнаяТара.Удалить(ТекСтрока);
		КонецЕсли;	
	КонецЕсли;
	
	Если Не ТекЗначение = 0 Тогда
		ТекСтрока.Вид = ВидТары;
		ТекСтрока.Значение = ТекЗначение;
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ТабличнаяЧастьПередУдалением(Элемент, Отказ)
	
	ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
		
	ТараУдалить(ТекДанные.ГУИДСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ТараУдалить(ТекГУИД)
	
	НайденныеСтроки = Объект.ВозвратнаяТара.НайтиСтроки(Новый Структура("ГУИДСтроки", ТекГУИД));
	Для Каждого ТекСтрока Из НайденныеСтроки Цикл
		Объект.ВозвратнаяТара.Удалить(ТекСтрока);
	КонецЦикла;
		
КонецПроцедуры	

Процедура ЗаполнитьЗначенияТары()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыВозвратнойТары.Ссылка КАК Ссылка,
	|	ВидыВозвратнойТары.Код КАК Код
	|ИЗ
	|	Справочник.ВидыВозвратнойТары КАК ВидыВозвратнойТары
	|ГДЕ
	|	НЕ ВидыВозвратнойТары.ПометкаУдаления";
	ТаблицаВидов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекСтрока Из Объект.ТабличнаяЧасть Цикл
		Для Каждого СтрокаВидов Из ТаблицаВидов Цикл
			НайденныеСтрокиТары = Объект.ВозвратнаяТара.НайтиСтроки(Новый Структура("ГУИДСтроки, Вид", ТекСтрока.ГУИДСтроки, СтрокаВидов.Ссылка));
			Для Каждого СтрокаТары Из НайденныеСтрокиТары Цикл
				ТекСтрока["с" + СтрокаВидов.Код] = СтрокаТары.Значение;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла; 	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ФормированиеМаршрута");
	Если ЗакрытьДокумент Тогда
		ЗакрытьДокумент = Ложь;
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СпособДоставкиПриИзменении(Элемент)
	СпособДоставкиПриИзмененииНаСервере(Не Элемент = Неопределено);
КонецПроцедуры

&НаСервере
Процедура СпособДоставкиПриИзмененииНаСервере(Изменять)
	
	РеквзитыДоставкиДоступны = Объект.СпособДоставки = Справочники.СпособыДоставки.Самовывоз;
	
	Элементы.Группа6.Доступность = НЕ РеквзитыДоставкиДоступны;
	
	Элементы.АдресДоставки.ТолькоПросмотр = ЗаблокироватьРеквизитыЗаказа ИЛИ ТекДоступность;
	Элементы.МаршрутДоставки.ТолькоПросмотр = ЗаблокироватьРеквизитыЗаказа ИЛИ ТекДоступность;
	Элементы.МенеджерКонтрагента.ТолькоПросмотр = ЗаблокироватьРеквизитыЗаказа ИЛИ ТекДоступность;
	Элементы.Телефон.ТолькоПросмотр = ЗаблокироватьРеквизитыЗаказа ИЛИ ТекДоступность;
	Элементы.ДатаДоставки1.ТолькоПросмотр = ЗаблокироватьРеквизитыЗаказа ИЛИ ТекДоступность;
	Элементы.ДатаДоставкиДо.ТолькоПросмотр = ЗаблокироватьРеквизитыЗаказа ИЛИ ТекДоступность;
	
	Элементы.ДатаПоступления.Видимость = РеквзитыДоставкиДоступны;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	СкладПриИзмененииНаСервере(Не Элемент = Неопределено);
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере(Изменять)
	//ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.АдресТорговойТочки;
	//Объект.АдресОтправления = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияНаДату(Объект.Склад, ВидКонтактнойИнформации);
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение = "Подразделения контрагента..." Тогда
		Объект.АдресДоставки = "";
		ЗначениеОтбора = Новый Структура("Владелец", Объект.Контрагент);
		ПараметрыФормы = Новый Структура("Отбор, РежимВыбора", ЗначениеОтбора, Истина);
		ОткрытьФорму("Справочник.ПодразделенияКонтрагентов.ФормаВыбора", ПараметрыФормы,,,,, Новый ОписаниеОповещения("АдресДоставкиОбработкаВыбораЗавершение", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиОбработкаВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	РеквыОбъекта = БюджетныйНаСервере.ВернутьРеквизиты(Результат, "Адрес, Ответственный, Выразить(Спр.Ответственный КАК Справочник.СотрудникиКонтрагентов).Телефон КАК ОтветственныйТелефон, ДатаДоставки, ДатаДоставкиДо, МаршрутДоставки"); 
	Объект.АдресДоставки = РеквыОбъекта.Адрес;
	Объект.МаршрутДоставки = РеквыОбъекта.МаршрутДоставки;
	Объект.МенеджерКонтрагента = РеквыОбъекта.Ответственный;
	Объект.Телефон = РеквыОбъекта.ОтветственныйТелефон;
	Объект.ДатаДоставки = НачалоДня(Объект.ДатаДоставки) + (РеквыОбъекта.ДатаДоставки - НачалоДня(РеквыОбъекта.ДатаДоставки));
	Объект.ДатаДоставкиДо = НачалоДня(Объект.ДатаДоставки) + (РеквыОбъекта.ДатаДоставкиДо - НачалоДня(РеквыОбъекта.ДатаДоставкиДо));
КонецПроцедуры

&НаКлиенте
Процедура ДатаПоступленияПриИзменении(Элемент)
	Объект.ДатаДоставки = Объект.ДатаПоступления;
	
	Если ЗначениеЗаполнено(Объект.ПодразделениеКонтрагента) Тогда
		РеквыОбъекта = БюджетныйНаСервере.ВернутьРеквизиты(Объект.ПодразделениеКонтрагента, "Адрес, Ответственный, Выразить(Спр.Ответственный КАК Справочник.СотрудникиКонтрагентов).Телефон КАК ОтветственныйТелефон, ДатаДоставки, ДатаДоставкиДо, МаршрутДоставки"); 
		Объект.ДатаДоставки = НачалоДня(Объект.ДатаДоставки) + (РеквыОбъекта.ДатаДоставки - НачалоДня(РеквыОбъекта.ДатаДоставки));
		Объект.ДатаДоставкиДо = НачалоДня(Объект.ДатаДоставки) + (РеквыОбъекта.ДатаДоставкиДо - НачалоДня(РеквыОбъекта.ДатаДоставкиДо));
	Иначе
		Объект.ДатаДоставкиДо = Объект.ДатаДоставки;	
	КонецЕсли;
	
	ЗаполнитьОтветственного();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаДоставкиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ПодразделениеКонтрагента) Тогда
		РеквыОбъекта = БюджетныйНаСервере.ВернутьРеквизиты(Объект.ПодразделениеКонтрагента, "Адрес, Ответственный, Выразить(Спр.Ответственный КАК Справочник.СотрудникиКонтрагентов).Телефон КАК ОтветственныйТелефон, ДатаДоставки, ДатаДоставкиДо, МаршрутДоставки"); 
		Объект.ДатаДоставки = НачалоДня(Объект.ДатаДоставки) + (РеквыОбъекта.ДатаДоставки - НачалоДня(РеквыОбъекта.ДатаДоставки));
		Объект.ДатаДоставкиДо = НачалоДня(Объект.ДатаДоставки) + (РеквыОбъекта.ДатаДоставкиДо - НачалоДня(РеквыОбъекта.ДатаДоставкиДо));
	Иначе
		Объект.ДатаДоставкиДо = Объект.ДатаДоставки + 60*60*2;
	КонецЕсли;
	Объект.ДатаПоступления = Объект.ДатаДоставки;
	
	ЗаполнитьОтветственного();

КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиПриИзменении(Элемент)
	АдресДоставкиПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура АдресДоставкиПриИзмененииНаСервере(Изменять = Истина)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	*
	|ИЗ
	|	Справочник.ПодразделенияКонтрагентов КАК ПодразделенияКонтрагентов
	|ГДЕ
	|	ПодразделенияКонтрагентов.Адрес = &Адрес
	|	И ПодразделенияКонтрагентов.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Адрес", Объект.АдресДоставки);
	Запрос.УстановитьПараметр("Владелец", Объект.Контрагент);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Объект.АдресДоставки = ?(Изменять ИЛИ ЗначениеЗаполнено(Выборка.Адрес), Выборка.Адрес, Объект.АдресДоставки);
		Объект.МаршрутДоставки = ?(Изменять ИЛИ ЗначениеЗаполнено(Выборка.МаршрутДоставки), Выборка.МаршрутДоставки, Объект.МаршрутДоставки);
		Объект.МенеджерКонтрагента = ?(Изменять ИЛИ ЗначениеЗаполнено(Выборка.Ответственный), Выборка.Ответственный, Объект.МенеджерКонтрагента);
		Объект.Телефон = ?(Изменять ИЛИ ЗначениеЗаполнено(Выборка.Ответственный.Телефон), Выборка.Ответственный.Телефон, Объект.Телефон);
		Объект.ДатаДоставки = НачалоДня(Объект.ДатаДоставки) + (Выборка.ДатаДоставки - НачалоДня(Выборка.ДатаДоставки));
		Объект.ДатаДоставкиДо = НачалоДня(Объект.ДатаДоставкиДо) + (Выборка.ДатаДоставкиДо - НачалоДня(Выборка.ДатаДоставкиДо));
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ТабличнаяЧастьКоличествоНаОстатках" Тогда
		СтандартнаяОбработка = Ложь;
		ТекСпис = Новый СписокЗначений;
		ТекСпис.Добавить("Обновить");
		ТекВыбор = Неопределено;
		ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ТабличнаяЧастьВыборЗавершение", ЭтаФорма), ТекСпис, Элементы.ТабличнаяЧастьКоличествоНаОстатках);
	ИначеЕсли Поле.Имя = "ТабличнаяЧастьКоличествоВРезервах" Тогда
		СтандартнаяОбработка = Ложь;
		ТекСпис = Новый СписокЗначений;
		ТекСпис.Добавить("Обновить");
		ТекСпис.Добавить("Открыть список заказов");
		ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ТабличнаяЧастьВыборЗавершение1", ЭтаФорма), ТекСпис, Элементы.ТабличнаяЧастьКоличествоВРезервах);
	ИначеЕсли Поле.Имя = "ТабличнаяЧастьКоличествоКПоставке" Тогда
		СтандартнаяОбработка = Ложь;
		ТекСпис = Новый СписокЗначений;
		ТекСпис.Добавить("Обновить");
		ТекСпис.Добавить("Открыть список заказов");
		ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ТабличнаяЧастьВыборЗавершение2", ЭтаФорма), ТекСпис, Элементы.ТабличнаяЧастьКоличествоКПоставке);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьВыборЗавершение2(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ТекВыбор = ВыбранныйЭлемент;
	Если ТекВыбор = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТекВыбор.Значение = "Обновить" Тогда
		ЗаполнитьОстаткиИРезервы();
		ЗаполнитьКонтрольМинЦены();
	ИначеЕсли ТекВыбор.Значение = "Открыть список заказов" Тогда
		
		ЗаказыСсылки = Новый Массив;
		Для каждого ТекСтрока Из ВремТЧЗаказыПоставщикам Цикл
			Если ТекСтрока.Номенклатура = Элементы.ТабличнаяЧасть.ТекущиеДанные.Номенклатура И ТекСтрока.Склад = Элементы.ТабличнаяЧасть.ТекущиеДанные.Склад Тогда
				ЗаказыСсылки.Добавить(ТекСтрока.Заказ);			
			КонецЕсли;		
		КонецЦикла;
		
		ТекФорма = ПолучитьФорму("Документ.ЗаказПоставщику.ФормаСписка",,, Новый УникальныйИдентификатор);
		
		ТекФорма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		НовыйОтбор = ТекФорма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		НовыйОтбор.ПравоеЗначение = ЗаказыСсылки;
		
		ТекФорма.Открыть();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьВыборЗавершение1(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ТекВыбор = ВыбранныйЭлемент;
	Если ТекВыбор = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТекВыбор.Значение = "Обновить" Тогда
		ЗаполнитьОстаткиИРезервы();
		ЗаполнитьКонтрольМинЦены();
	ИначеЕсли ТекВыбор.Значение = "Открыть список заказов" Тогда
		
		ЗаказыСсылки = Новый Массив;
		Для каждого ТекСтрока Из ВремТЧЗаказы Цикл
			Если ТекСтрока.Номенклатура = Элементы.ТабличнаяЧасть.ТекущиеДанные.Номенклатура И ТекСтрока.Склад = Элементы.ТабличнаяЧасть.ТекущиеДанные.Склад Тогда
				ЗаказыСсылки.Добавить(ТекСтрока.Заказ);			
			КонецЕсли;		
		КонецЦикла;
		
		ТекФорма = ПолучитьФорму("Документ.ЗаказКлиента.ФормаСписка",,, Новый УникальныйИдентификатор);
		
		ТекФорма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		НовыйОтбор = ТекФорма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		НовыйОтбор.ПравоеЗначение = ЗаказыСсылки;
		
		ТекФорма.Открыть();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьВыборЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ТекВыбор = ВыбранныйЭлемент;
	Если ТекВыбор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекВыбор.Значение = "Обновить" Тогда
		ЗаполнитьОстаткиИРезервы();		
		ЗаполнитьКонтрольМинЦены();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Для каждого ТекСтрока Из Объект.ТабличнаяЧасть Цикл
		ТекСтрока.КоличествоОстаток = ТекСтрока.КоличествоНаОстатках + ТекСтрока.КоличествоКПоставке - ТекСтрока.КоличествоВРезервах - ТекСтрока.КоличествоУпаковок; 
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеКонтрагентаПриИзменении(Элемент)
	АдресДоставкиОбработкаВыбораЗавершение(Объект.ПодразделениеКонтрагента, Новый Структура);
КонецПроцедуры

&НаКлиенте
Процедура БезвозмезднаяПередачаПриИзменении(Элемент)
	БезвозмезднаяПередачаПриИзмененииНаСервере(Не Элемент = Неопределено);
КонецПроцедуры

&НаСервере
Процедура БезвозмезднаяПередачаПриИзмененииНаСервере(Изменять)
	Если Изменять Тогда
		Если Объект.БезвозмезднаяПередача Тогда
			Объект.ПродажаВРозницу = Ложь;
			Для каждого ТекСтрока Из Объект.ТабличнаяЧасть Цикл
				ТекСтрока.Цена = 0;
				ТекСтрока.Сумма = 0;
				ТекСтрока.СуммаНДС = 0;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Элементы.ПродажаВРозницу.ТолькоПросмотр = Объект.БезвозмезднаяПередача;
КонецПроцедуры

&НаКлиенте
Процедура ПродажаВРозницуПриИзменении(Элемент)
	ПродажаВРозницуПриИзмененииНаСервере(Не Элемент = Неопределено);
КонецПроцедуры

&НаСервере
Процедура ПродажаВРозницуПриИзмененииНаСервере(Изменять)
	
	Если Изменять Тогда
		Если Объект.ПродажаВРозницу Тогда
			Объект.БезвозмезднаяПередача = Ложь;
		КонецЕсли;
	КонецЕсли;
	Элементы.БезвозмезднаяПередача.ТолькоПросмотр = Объект.ПродажаВРозницу;
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	ЗакрытьДокумент = Истина;
	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
КонецПроцедуры

#Область ПодборТоваров

&НаКлиенте
Процедура Подобрать(Команда)
	
	ОписаниеОповещенияПослеПодбора = Новый ОписаниеОповещения("ЗаполтитьТоварыПоПодбору",ЭтотОбъект);
	СтруктураПараметров = Новый Структура("Склад,Предприятие,Заголовок",Объект.Склад,Объект.Предприятие, "Подбор товаров для документа " + Объект.Ссылка);
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаДляПодбора",СтруктураПараметров,ЭтотОбъект,УникальныйИдентификатор,,,ОписаниеОповещенияПослеПодбора,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполтитьТоварыПоПодбору(Результат,ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если ЭтоАдресВременногоХранилища(Результат) Тогда
			ЗаполнитьПоПодборуНаСервере(Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПодборуНаСервере(АдресВХ)
	
	ТЗДанныеПодбора = ПолучитьИзВременногоХранилища(АдресВХ);	
	Если ТипЗнч(ТЗДанныеПодбора) = Тип("ТаблицаЗначений") Тогда
		Для Каждого СтрокаТовара Из ТЗДанныеПодбора Цикл
			НайденныеСтроки = Объект.ТабличнаяЧасть.НайтиСтроки(Новый Структура("Номенклатура,Цена",СтрокаТовара.Номенклатура,СтрокаТовара.Цена));
			Если НайденныеСтроки.Количество() > 0 Тогда
				ТекДанные = НайденныеСтроки[0];
				ТекДанные.КоличествоУпаковок = ТекДанные.КоличествоУпаковок + СтрокаТовара.Количество; 
				ТекДанные.Количество = ТекДанные.КоличествоУпаковок * ТекДанные.КоэффициентПересчетаУпаковок; 
				ТекДанные.Сумма = ТекДанные.Количество * ТекДанные.Цена;
				ТекРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.СтавкаНДС, "Ставка");
				Если НЕ ТекРеквизиты = Неопределено Тогда
					ТекДанные.СуммаНДС = ТекДанные.Сумма / ((100+ТекРеквизиты.Ставка)/100) * (ТекРеквизиты.Ставка/100);
				КонецЕсли;
			Иначе
				НоваяСтрокаТовары = Объект.ТабличнаяЧасть.Добавить();
				НоваяСтрокаТовары.Номенклатура = СтрокаТовара.Номенклатура;
				НоваяСтрокаТовары.КоличествоУпаковок = СтрокаТовара.Количество;
				НоваяСтрокаТовары.Цена = СтрокаТовара.Цена;
				ТекДанные = НоваяСтрокаТовары; 
				//Установим единицу измерения по умолчанию
				ТекДанные.ЕдиницаИзмерения = ПолучитьЕдИзмНоменклатуры(ТекДанные.Номенклатура);
				МассивЕдИзмНоменклатуры = ПолучитьМассивВозможныхЕдиницИзмеренияНоменклатуры(ТекДанные.Номенклатура);
				Элементы.ТабличнаяЧастьЕдиницаИзмерения.СписокВыбора.Очистить();
				Для Каждого ЭлементВыборкаЕдИзм Из МассивЕдИзмНоменклатуры Цикл
					Элементы.ТабличнаяЧастьЕдиницаИзмерения.СписокВыбора.Добавить(ЭлементВыборкаЕдИзм);
				КонецЦикла;
				ТекДанные.КоэффициентПересчетаУпаковок = ПолучитьКоэффициентПересчетаУпаковок(ТекДанные.Номенклатура, ТекДанные.ЕдиницаИзмерения);
				ТекДанные.КоличествоВУпаковке = ТекДанные.КоэффициентПересчетаУпаковок;
				ТекДанные.Количество = ТекДанные.КоличествоУпаковок * ТекДанные.КоэффициентПересчетаУпаковок; 
				ТекДанные.Сумма = ТекДанные.Количество * ТекДанные.Цена;
				//Установим НДС и артикул
				Если ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
					ТекРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.Номенклатура, "СтавкаНДС, Код, Счет10, ВидСтавкиНДС, ЕдиницаИзмерения, Кратность, МинимальнаяПартия", Ложь);
					ТекДанные.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвВидовСтавокНДСБУХУУ().Получить(ТекРеквизиты.ВидСтавкиНДС);;
					ТекДанные.ЕдиницаИзмерения = ТекРеквизиты.ЕдиницаИзмерения;
					ТекДанные.Кратность = ТекРеквизиты.Кратность; 
					ТекРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.СтавкаНДС, "Ставка");
					Если НЕ ТекРеквизиты = Неопределено Тогда
						ТекДанные.СуммаНДС = ТекДанные.Сумма / ((100+ТекРеквизиты.Ставка)/100) * (ТекРеквизиты.Ставка/100);
					КонецЕсли;
				КонецЕсли;
				Если ЗначениеЗаполнено(Объект.Склад) Тогда
					ТекДанные.Склад = Объект.Склад;	
				КонецЕсли;
				СтруктураДанных =Новый Структура("Номенклатура, Склад, КоличествоОстаток, КоличествоНаОстатках, КоличествоВРезервах, КоличествоКПоставке, Количество", 
				ТекДанные.Номенклатура, ТекДанные.Склад, ТекДанные.КоличествоОстаток, ТекДанные.КоличествоНаОстатках,
				ТекДанные.КоличествоВРезервах, ТекДанные.КоличествоКПоставке, ТекДанные.Количество);
				ЗаполнитьОстаткиИРезервы(Истина, СтруктураДанных);
				ЗаполнитьКонтрольМинЦены(Истина, СтруктураДанных);
				ЗаполнитьЗначенияСвойств(ТекДанные, СтруктураДанных);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти



