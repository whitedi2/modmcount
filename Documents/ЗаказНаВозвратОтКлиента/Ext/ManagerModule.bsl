#Область СлужебныеПроцедурыИФункции

// Функция формирует печатную форму документа.

// Функция формирует табличный документ с печатной формой.
//
// Возвращаемое значение:
//  ТабличныйДокумент - печатная форма.
//
Функция ПечатьЗаказ(МассивОбъектов, ОбъектыПечати = Неопределено, ПечатьКомплекта = Ложь) Экспорт

	КолонкаКодов       = "Код";
	ВыводитьКоды       = Истина;
	//ВыводитьУпаковки   = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	ТабличныйДокумент  = Новый ТабличныйДокумент;
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
	СинонимДокумента   = НСтр("ru='Заказ на возврат от клиента'");
	
	//ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваров_Накладная";
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказНаВозвратОтКлиента.Ссылка КАК Ссылка,
	|	ЗаказНаВозвратОтКлиента.Номер КАК Номер,
	|	ЗаказНаВозвратОтКлиента.Дата КАК Дата,
	|	ЗаказНаВозвратОтКлиента.Подразделение КАК Магазин,
	|	ВЫБОР
	|		КОГДА ЗаказНаВозвратОтКлиента.Организация.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОрганизацияЮридическоеЛицо,
	|	ЗаказНаВозвратОтКлиента.Организация КАК Поставщик,
	|	ЗаказНаВозвратОтКлиента.СуммаДокумента КАК СуммаДокумента,
	|	ПРЕДСТАВЛЕНИЕ(ЗаказНаВозвратОтКлиента.Подразделение) КАК МагазинПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ЗаказНаВозвратОтКлиента.Организация) КАК ПредставлениеПоставщика,
	|	ЗаказНаВозвратОтКлиента.Автор КАК Ответственный,
	|	ЗаказНаВозвратОтКлиента.УчитыватьНДС КАК УчитыватьНДС,
	|	ЗаказНаВозвратОтКлиента.АдресДоставки КАК АдресДоставки,
	|	ЗаказНаВозвратОтКлиента.Предприятие.НаименованиеОрганизацииДляПечати КАК НаименованиеОрганизацииДляПечати,
	|	ЗаказНаВозвратОтКлиента.Контрагент КАК Получатель,
	|	ПРЕДСТАВЛЕНИЕ(ЗаказНаВозвратОтКлиента.Контрагент) КАК ПредставлениеПолучателя,
	|	ЗаказНаВозвратОтКлиента.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ЗаказНаВозвратОтКлиента КАК ЗаказНаВозвратОтКлиента
	|ГДЕ
	|	ЗаказНаВозвратОтКлиента.Ссылка В(&МассивОбъектов)
	|	И ЗаказНаВозвратОтКлиента.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказНаВозвратОтКлиентаТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|	ЗаказНаВозвратОтКлиентаТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ЗаказНаВозвратОтКлиентаТабличнаяЧасть.Номенклатура.Код КАК КолонкаКодов,
	|	ЗаказНаВозвратОтКлиентаТабличнаяЧасть.Номенклатура.Представление КАК Товар,
	|	ЗаказНаВозвратОтКлиентаТабличнаяЧасть.Номенклатура.Наименование КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ЗаказНаВозвратОтКлиентаТабличнаяЧасть.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
	|	ПРЕДСТАВЛЕНИЕ(ЗаказНаВозвратОтКлиентаТабличнаяЧасть.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|	ЗаказНаВозвратОтКлиентаТабличнаяЧасть.Количество КАК Количество,
	|	ЗаказНаВозвратОтКлиентаТабличнаяЧасть.Количество КАК КоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА ЗаказНаВозвратОтКлиентаТабличнаяЧасть.Количество = 0
	|			ТОГДА ЗаказНаВозвратОтКлиентаТабличнаяЧасть.Количество
	|		ИНАЧЕ ЗаказНаВозвратОтКлиентаТабличнаяЧасть.Сумма / ЗаказНаВозвратОтКлиентаТабличнаяЧасть.Количество
	|	КОНЕЦ КАК Цена,
	|	ЗаказНаВозвратОтКлиентаТабличнаяЧасть.Сумма КАК Сумма,
	|	ЗаказНаВозвратОтКлиентаТабличнаяЧасть.Ссылка КАК Ссылка,
	|	ЗаказНаВозвратОтКлиентаТабличнаяЧасть.Сумма КАК СуммаБезСкидки,
	|	0 КАК Скидка,
	|	ЗаказНаВозвратОтКлиентаТабличнаяЧасть.СуммаНДС КАК СуммаНДС,
	|	ЗаказНаВозвратОтКлиентаТабличнаяЧасть.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	Документ.ЗаказНаВозвратОтКлиента.ТабличнаяЧасть КАК ЗаказНаВозвратОтКлиентаТабличнаяЧасть
	|ГДЕ
	|	ЗаказНаВозвратОтКлиентаТабличнаяЧасть.Ссылка В(&МассивОбъектов)
	|	И ЗаказНаВозвратОтКлиентаТабличнаяЧасть.Ссылка.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка");
	
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("Счет7902", ПланыСчетов.Учетный.Счет7902());
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.УЧ_Реализация.ПФ_MXL_НакладнаяУпр");
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	
	ОбластьШапкаНомера         = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьШапкаКодов          = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьШапкаДанных         = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	//ОбластьШапкаСкидок         = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьШапкаСуммы          = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
	
	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
		                                  + Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	ОбластьСтрокаНомера         = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьСтрокаКодов          = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьСтрокаДанных         = Макет.ПолучитьОбласть("Строка|Данные");
	//ОбластьСтрокаСкидок         = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСтрокаСуммы          = Макет.ПолучитьОбласть("Строка|Сумма");
	
	ОбластьИтогоНДСНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
	ОбластьИтогоНДСКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
	ОбластьИтогоНДСДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
	//ОбластьИтогоНДССкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
	ОбластьИтогоНДССуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");
	
	// Вывести Итого.
	ОбластьИтогоНомера         = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьИтогоКодов          = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьИтогоДанных         = Макет.ПолучитьОбласть("Итого|Данные");
	//ОбластьИтогоСкидок         = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьИтогоСуммы          = Макет.ПолучитьОбласть("Итого|Сумма");
	
	ОбластьСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьПодписей      = Макет.ПолучитьОбласть("Подписи");
	
	
	ВыборкаПоДокументам = Результаты[0].Выбрать();
	ВыборкаПоТабличнымЧастям = Результаты[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если НЕ ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если НЕ ПервыйДокумент Тогда
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
		ОбластьЗаголовок.Параметры.Заполнить(ВыборкаПоДокументам);
		
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента);					
		Если ВыборкаПоДокументам.НаименованиеОрганизацииДляПечати = "" Тогда
			ПредставлениеПоставщика = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ВыборкаПоДокументам.Поставщик, ВыборкаПоДокументам.Дата), "ПолноеНаименование,");	
		Иначе
			ПредставлениеПоставщика = ВыборкаПоДокументам.НаименованиеОрганизацииДляПечати;	
		КонецЕсли;
		ОбластьЗаголовок.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;		
		ПредставлениеПолучателя = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ВыборкаПоДокументам.Получатель, ВыборкаПоДокументам.Дата), "ПолноеНаименование,");
		//Если ЗначениеЗаполнено(МассивОбъектов.АдресДоставки) Тогда
		//	АдресДоставки = МассивОбъектов.АдресДоставки; 
		//Иначе
		//	АдресДоставки = Справочники.СтруктураПредприятия.ПолучитьАдресИзКонтактнойИнформации(МассивОбъектов.ПодразделениеВн);
		//КонецЕсли;
		//ОбластьЗаголовок.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя + ", " + АдресДоставки;//Сож+ адрес доставки
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		// Шапка
		
		ЕстьСкидка 		  = Ложь;
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
			Если ВыборкаПоСтрокамТЧ.Скидка Тогда
				ЕстьСкидка = Истина;			
			КонецЕсли;	
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьШапкаНомера);
		Если ВыводитьКоды Тогда
			ОбластьШапкаКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов;
			ТабличныйДокумент.Присоединить(ОбластьШапкаКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьШапкаДанных);
		//Если ЕстьСкидка Тогда
		//	ТабличныйДокумент.Присоединить(ОбластьШапкаСкидок);
		//КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьШапкаСуммы);
		
		
		ВсегоНаименований = 0;
		Сумма             = 0;
		ВсегоСкидок       = 0;
		ВсегоБезСкидок    = 0;
		СуммаНДС          = 0;
		
		
		// СТРОКИ ТЧ
		ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамТЧ.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;

			ОбластьСтрокаНомера.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Вывести(ОбластьСтрокаНомера);

			Если ВыводитьКоды Тогда
				
				ОбластьСтрокаКодов.Параметры.Артикул = ВыборкаПоСтрокамТЧ["КолонкаКодов"];
				ТабличныйДокумент.Присоединить(ОбластьСтрокаКодов);
				
			КонецЕсли;

			ОбластьСтрокаДанных.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ОбластьСтрокаДанных.Параметры.Товар = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаПоСтрокамТЧ.НоменклатураПредставление);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаДанных);
			
			//Если ЕстьСкидка Тогда
			//	ОбластьСтрокаСкидок.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			//	ТабличныйДокумент.Присоединить(ОбластьСтрокаСкидок);
			//КонецЕсли;
			
			ОбластьСтрокаСуммы.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаСуммы);
			
			ВсегоНаименований = ВсегоНаименований + 1;
			
			Сумма          = Сумма       + ВыборкаПоСтрокамТЧ.Сумма;
			ВсегоСкидок    = ВсегоСкидок + ВыборкаПоСтрокамТЧ.Скидка;
			ВсегоБезСкидок = Сумма       + ВсегоСкидок;
			СуммаНДС       = СуммаНДС    + Окр(ВыборкаПоСтрокамТЧ.СуммаНДС, 2, 1);
			
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьИтогоНомера);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьИтогоКодов);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьИтогоДанных);
		//Если ЕстьСкидка Тогда
		//	ОбластьИтогоСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
		//	ОбластьИтогоСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
		//	ТабличныйДокумент.Присоединить(ОбластьИтогоСкидок);
		//КонецЕсли;
		ОбластьИтогоСуммы.Параметры.Всего = Сумма;
		ТабличныйДокумент.Присоединить(ОбластьИтогоСуммы);
		
		
		// Вывести ИтогоНДС
		ТабличныйДокумент.Вывести(ОбластьИтогоНДСНомера);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьИтогоНДСКодов);
		КонецЕсли;
		
		ОбластьИтогоНДСДанных.Параметры.НДС = ?(ВыборкаПоДокументам.ЦенаВключаетНДС, НСтр("ru = 'В том числе НДС:'"), НСтр("ru = 'Сумма НДС:'"));
		ТабличныйДокумент.Присоединить(ОбластьИтогоНДСДанных);
		
		//Если ЕстьСкидка Тогда
		//	ТабличныйДокумент.Присоединить(ОбластьИтогоНДССкидок);
		//КонецЕсли;
		
		Если НЕ ВыборкаПоДокументам.УчитыватьНДС Тогда
			СуммаНДССтрока = НСтр("ru = 'Без НДС'");
		Иначе
			СуммаНДССтрока = Строка(СуммаНДС);
		КонецЕсли;
		
		ОбластьИтогоНДССуммы.Параметры.ВсегоНДС = СуммаНДССтрока;
		ТабличныйДокумент.Присоединить(ОбластьИтогоНДССуммы);
		
		
		// Вывести Сумму прописью.
		
		ТекстИтоговойСтроки = НСтр("ru = 'Всего наименований %ВсегоНаименований%, на сумму %Итого%'");
		
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%ВсегоНаименований%", ВсегоНаименований);
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%Итого%", ФормированиеПечатныхФормСервер.ФорматСумм(Сумма));
		
		ОбластьСуммаПрописью.Параметры.ИтоговаяСтрока = ТекстИтоговойСтроки;
		ОбластьСуммаПрописью.Параметры.СуммаПрописью  = ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(Сумма);
		
		ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);
		
		// ПОДПИСИ
		ОбластьПодписей.Параметры.Заполнить(ВыборкаПоДокументам);
		ОбластьПодписей.Параметры.ОтветственныйПредставление = ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Ответственный);
		ТабличныйДокумент.Вывести(ОбластьПодписей);
		
		//УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
		Если ПечатьКомплекта И Не ОбъектыПечати = Неопределено Тогда 
			ФормированиеПечатныхФормСервер.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		КонецЕсли;
			
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатьРН(МассивОбъектов, ОбъектыПечати, ПараметрыПечати) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.КлючПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Накладная";
	
	ДополнительнаяКолонкаПечатныхФормДокументов = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если НЕ ЗначениеЗаполнено(ДополнительнаяКолонкаПечатныхФормДокументов) Тогда
		ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	КонецЕсли;
	ВыводитьКоды = ДополнительнаяКолонкаПечатныхФормДокументов <> Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", ДополнительнаяКолонкаПечатныхФормДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказНаВозвратОтКлиента.Ссылка КАК Ссылка,
	|	ЗаказНаВозвратОтКлиента.Номер КАК Номер,
	|	ЗаказНаВозвратОтКлиента.Дата КАК Дата,
	|	ЗаказНаВозвратОтКлиента.Договор КАК ДоговорКонтрагента,
	|	ЗаказНаВозвратОтКлиента.Контрагент КАК Получатель,
	|	ЗаказНаВозвратОтКлиента.Организация КАК Организация,
	|	ЗаказНаВозвратОтКлиента.Подразделение КАК ПодразделениеОрганизации,
	|	ЗаказНаВозвратОтКлиента.Организация КАК Поставщик,
	|	ЗаказНаВозвратОтКлиента.Ссылка.Склад КАК Склад,
	|	ЗаказНаВозвратОтКлиента.СуммаДокумента КАК СуммаДокумента,
	|	ЗаказНаВозвратОтКлиента.Валюта КАК ВалютаДокумента,
	|	ЗаказНаВозвратОтКлиента.ЦенаВключаетНДС КАК СуммаВключаетНДС,
	|	НЕОПРЕДЕЛЕНО КАК ОтпускПроизвел,
	|	ЗаказНаВозвратОтКлиентаТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ЗаказНаВозвратОтКлиентаТабличнаяЧасть.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказНаВозвратОтКлиентаТабличнаяЧасть.Цена КАК Цена,
	|	ЗаказНаВозвратОтКлиентаТабличнаяЧасть.СтавкаНДС КАК СтавкаНДС,
	|	НЕОПРЕДЕЛЕНО КАК СтранаПроисхождения,
	|	НЕОПРЕДЕЛЕНО КАК НомерГТД,
	|	СУММА(ЗаказНаВозвратОтКлиентаТабличнаяЧасть.Количество) КАК Количество,
	|	СУММА(0) КАК КоличествоМест,
	|	СУММА(ЗаказНаВозвратОтКлиентаТабличнаяЧасть.Сумма) КАК Сумма,
	|	СУММА(ЗаказНаВозвратОтКлиентаТабличнаяЧасть.СуммаНДС) КАК СуммаНДС,
	|	МИНИМУМ(ЗаказНаВозвратОтКлиентаТабличнаяЧасть.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_ВложенныйЗапросПоТоварам
	|ИЗ
	|	Документ.ЗаказНаВозвратОтКлиента КАК ЗаказНаВозвратОтКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаВозвратОтКлиента.ТабличнаяЧасть КАК ЗаказНаВозвратОтКлиентаТабличнаяЧасть
	|		ПО (ЗаказНаВозвратОтКлиентаТабличнаяЧасть.Ссылка = ЗаказНаВозвратОтКлиента.Ссылка)
	|ГДЕ
	|	ЗаказНаВозвратОтКлиента.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказНаВозвратОтКлиентаТабличнаяЧасть.Номенклатура,
	|	ЗаказНаВозвратОтКлиентаТабличнаяЧасть.ЕдиницаИзмерения,
	|	ЗаказНаВозвратОтКлиентаТабличнаяЧасть.Цена,
	|	ЗаказНаВозвратОтКлиентаТабличнаяЧасть.СтавкаНДС,
	|	ЗаказНаВозвратОтКлиента.Ссылка,
	|	ЗаказНаВозвратОтКлиента.Номер,
	|	ЗаказНаВозвратОтКлиента.Дата,
	|	ЗаказНаВозвратОтКлиента.Договор,
	|	ЗаказНаВозвратОтКлиента.Контрагент,
	|	ЗаказНаВозвратОтКлиента.Организация,
	|	ЗаказНаВозвратОтКлиента.Подразделение,
	|	ЗаказНаВозвратОтКлиента.СуммаДокумента,
	|	ЗаказНаВозвратОтКлиента.Валюта,
	|	ЗаказНаВозвратОтКлиента.ЦенаВключаетНДС,
	|	ЗаказНаВозвратОтКлиента.Ссылка.Склад,
	|	ЗаказНаВозвратОтКлиента.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапросПоТоварам.Ссылка КАК Ссылка,
	|	ВложенныйЗапросПоТоварам.Номер КАК Номер,
	|	ВложенныйЗапросПоТоварам.Дата КАК Дата,
	|	ВложенныйЗапросПоТоварам.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВложенныйЗапросПоТоварам.Получатель КАК Получатель,
	|	ВложенныйЗапросПоТоварам.Организация КАК Организация,
	|	ВложенныйЗапросПоТоварам.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ВложенныйЗапросПоТоварам.Организация КАК Поставщик,
	|	ВложенныйЗапросПоТоварам.Ссылка.Склад КАК Склад,
	|	НЕОПРЕДЕЛЕНО КАК ОтпускПроизвел,
	|	НЕОПРЕДЕЛЕНО КАК Получил,
	|	ВложенныйЗапросПоТоварам.СуммаДокумента КАК СуммаДокумента,
	|	ВложенныйЗапросПоТоварам.ВалютаДокумента КАК ВалютаДокумента,
	|	ВложенныйЗапросПоТоварам.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ВложенныйЗапросПоТоварам.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапросПоТоварам.Номенклатура.НаименованиеПолное КАК Товар,
	|	ВложенныйЗапросПоТоварам.Номенклатура.Код КАК Артикул,
	|	ВложенныйЗапросПоТоварам.Количество КАК Количество,
	|	ВложенныйЗапросПоТоварам.КоличествоМест КАК КоличествоМест,
	|	ВложенныйЗапросПоТоварам.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВложенныйЗапросПоТоварам.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаХранения,
	|	ВложенныйЗапросПоТоварам.Цена КАК Цена,
	|	ВложенныйЗапросПоТоварам.Сумма КАК Сумма,
	|	ВложенныйЗапросПоТоварам.СуммаНДС КАК СуммаНДС,
	|	ВложенныйЗапросПоТоварам.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВложенныйЗапросПоТоварам.НомерГТД КАК НомерГТД,
	|	ВложенныйЗапросПоТоварам.НомерСтроки КАК НомерСтроки,
	|	1 КАК ID
	|ИЗ
	|	ВТ_ВложенныйЗапросПоТоварам КАК ВложенныйЗапросПоТоварам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказНаВозвратОтКлиентаВозвратнаяТара.Ссылка,
	|	ЗаказНаВозвратОтКлиентаВозвратнаяТара.Ссылка.Номер,
	|	ЗаказНаВозвратОтКлиентаВозвратнаяТара.Ссылка.Дата,
	|	ЗаказНаВозвратОтКлиентаВозвратнаяТара.Ссылка.Договор,
	|	ЗаказНаВозвратОтКлиентаВозвратнаяТара.Ссылка.Контрагент,
	|	ЗаказНаВозвратОтКлиентаВозвратнаяТара.Ссылка.Организация,
	|	ЗаказНаВозвратОтКлиентаВозвратнаяТара.Ссылка.Подразделение,
	|	ЗаказНаВозвратОтКлиентаВозвратнаяТара.Ссылка.Организация,
	|	ЗаказНаВозвратОтКлиентаВозвратнаяТара.Ссылка.Склад,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗаказНаВозвратОтКлиентаВозвратнаяТара.Ссылка.СуммаДокумента,
	|	ЗаказНаВозвратОтКлиентаВозвратнаяТара.Ссылка.Валюта,
	|	ЗаказНаВозвратОтКлиентаВозвратнаяТара.Ссылка.ЦенаВключаетНДС,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	NULL,
	|	NULL,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	0,
	|	0,
	|	NULL,
	|	NULL,
	|	ЗаказНаВозвратОтКлиентаВозвратнаяТара.НомерСтроки,
	|	2
	|ИЗ
	|	Документ.ЗаказНаВозвратОтКлиента.ВозвратнаяТара КАК ЗаказНаВозвратОтКлиентаВозвратнаяТара
	|ГДЕ
	|	ЗаказНаВозвратОтКлиентаВозвратнаяТара.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка,
	|	ID,
	|	ВложенныйЗапросПоТоварам.НомерСтроки";
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ВозвратТоваровОтПокупателя.ПФ_MXL_Накладная");

		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Выводим шапку накладной

		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, "Накладная на возврат");
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		СведенияОбОрганизации   = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
		ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
		ОбластьМакета.Параметры.Поставщик 				= Шапка.Поставщик;
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		СведенияОКонтрагенте    = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
		ПредставлениеПолучателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм,");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
		ОбластьМакета.Параметры.Получатель = Шапка.Получатель;
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ЕстьСкидки = Ложь;

		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			Если ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
				ОбластьКодов.Параметры.ИмяКолонкиКодов = "Артикул";
			ИначеЕсли ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
				ОбластьКодов.Параметры.ИмяКолонкиКодов = "Код";
			КонецЕсли;
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		ТабличныйДокумент.Присоединить(ОбластьСуммы);

		ОбластьКолонкаТовар = Макет.Область("Товар");

		Если НЕ ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
												Макет.Область("КолонкаКодов").ШиринаКолонки;
		КонецЕсли;
		
		//Если НЕ ЕстьСкидки Тогда
		//	ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
		//										Макет.Область("СуммаБезСкидки").ШиринаКолонки +
		//										Макет.Область("СуммаСкидки").ШиринаКолонки;
		//КонецЕсли;

		ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

		Сумма    = 0;
		СуммаНДС = 0;
		ВсегоСкидок    = 0;
		ВсегоБезСкидок = 0;
        КоличествоСтрок = 0;

		НомерСтроки = 0;

		Пока Шапка.Следующий() Цикл 
			
			Если Шапка.Номенклатура = Null Тогда 
				Продолжить;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;

			ОбластьНомера.Параметры.НомерСтроки = НомерСтроки;
			ТабличныйДокумент.Вывести(ОбластьНомера);

			Если ВыводитьКоды Тогда
				ОбластьКодов.Параметры.Заполнить(Шапка);
				ТабличныйДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(Шапка);
			ОбластьДанных.Параметры.Товар = СокрЛП(Шапка.Товар);
			ТабличныйДокумент.Присоединить(ОбластьДанных);

			Скидка = 0;
			
			ОбластьСуммы.Параметры.Заполнить(Шапка);
			ТабличныйДокумент.Присоединить(ОбластьСуммы);
			Сумма          = Сумма       + ?(ЗначениеЗаполнено(Шапка.Сумма), Шапка.Сумма, 0);
			СуммаНДС       = СуммаНДС    + ?(ЗначениеЗаполнено(Шапка.СуммаНДС), Шапка.СуммаНДС, 0);
			ВсегоСкидок    = ВсегоСкидок + Скидка;
			ВсегоБезСкидок = Сумма       + ВсегоСкидок;
			
			КоличествоСтрок = КоличествоСтрок + 1;

		КонецЦикла;

		// Вывести Итого
		ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		ОбластьСуммы.Параметры.Всего = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Сумма);
		ТабличныйДокумент.Присоединить(ОбластьСуммы);
		
		// Вывести ИтогоНДС
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		Если СуммаНДС <> 0 Тогда
			ОбластьСуммы.Параметры.ВсегоНДС  = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаНДС);
			ОбластьДанных.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, "В том числе НДС", " Сумма НДС");
		Иначе
			ОбластьСуммы.Параметры.ВсегоНДС  = "-";
			ОбластьДанных.Параметры.НДС      = "Без налога (НДС)";
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		ТабличныйДокумент.Присоединить(ОбластьСуммы);
				
		// Вывести Сумму прописью
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
		ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + КоличествоСтрок
			+ ", на сумму " + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКПрописи, ?(ЗначениеЗаполнено(Шапка.ВалютаДокумента), Шапка.ВалютаДокумента, УЧ_Сервер.НациональнаяВалюта()));
		ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, ?(ЗначениеЗаполнено(Шапка.ВалютаДокумента), Шапка.ВалютаДокумента, УЧ_Сервер.НациональнаяВалюта()));
		ТабличныйДокумент.Вывести(ОбластьМакета);

		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		Если ЗначениеЗаполнено(Шапка.ОтпускПроизвел) Тогда
			ДанныеФизЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Шапка.Организация, Шапка.ОтпускПроизвел, Шапка.Дата);
			Представление = ?(ЗначениеЗаполнено(ДанныеФизЛица.Должность), Строка(ДанныеФизЛица.Должность) + " ", "");
			Представление = Представление + ?(ЗначениеЗаполнено(ДанныеФизЛица.Представление), Строка(ДанныеФизЛица.Представление), "");
			ОбластьМакета.Параметры.ПолучилПредставление = Представление;
		ИначеЕсли Шапка.Склад <> Справочники.Склады.ПустаяСсылка() Тогда 
			МОЛ = ОтветственныеЛицаБП.ОтветственноеЛицоНаСкладе(Шапка.Склад, Шапка.Дата);
			ДанныеФизЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Шапка.Организация, МОЛ, Шапка.Дата);
			Представление = ?(ЗначениеЗаполнено(ДанныеФизЛица.Должность), Строка(ДанныеФизЛица.Должность) + " ", "");
			Представление = Представление + ?(ЗначениеЗаполнено(ДанныеФизЛица.Представление), Строка(ДанныеФизЛица.Представление), "");
			ОбластьМакета.Параметры.ПолучилПредставление = Представление;
		КонецЕсли;

		ТабличныйДокумент.Вывести(ОбластьМакета);

		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);

		УправлениеПечатьюБП.ДополнитьДокументПодписьюИПечатью(ТабличныйДокумент, Шапка, ОбъектыПечати, ПараметрыПечати);
		
	КонецЦикла;

	Возврат ТабличныйДокумент;

КонецФункции

#КонецОбласти


Функция ПолучитьКонтакты(Ссылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтрагентыКонтактнаяИнформация.АдресЭП
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Ссылка = &Ссылка
	|	И КонтрагентыКонтактнаяИнформация.Вид = &Вид";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка.Контрагент);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailКонтрагентаДляЗаказов);
	
	НачатьТранзакцию();
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Результат = Неопределено;
		Иначе
			МассивКонтактов = Новый Массив;
			МассивКонтактов.Добавить(Новый Структура("Адрес, Контакт, Представление", РезультатЗапроса.Выгрузить()[0].АдресЭП));
			Результат = МассивКонтактов;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	//опасно, конечно. нужно проверять производительность
	//СтандартнаяОбработка = Ложь;
	//РеквизитыДокумента = БюджетныйНаСервере.ВернутьРеквизиты(Данные.Ссылка, "ВидОперации");
	//Если НЕ РеквизитыДокумента = Неопределено И ЗначениеЗаполнено(РеквизитыДокумента.ВидОперации) Тогда
	//	Представление = Строка(РеквизитыДокумента.ВидОперации) + " " + Строка(Данные.Номер) + " от " + Строка(Данные.Дата);	
	//КонецЕсли;
КонецПроцедуры

Функция КонтрольМинимальнойЦены(Ссылка) Экспорт
	//{{_КОНСТРУКТОР_ПЕЧАТИ(КонтрольМинимальнойЦены)
	
	ТабДок = Новый ТабличныйДокумент;
	
	Макет = Документы.ЗаказКлиента.ПолучитьМакет("КонтрольМинимальнойЦены");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказКлиента.Дата КАК Дата,
	|	ЗаказКлиента.Договор КАК Договор,
	|	ЗаказКлиента.Комментарий КАК Комментарий,
	|	ЗаказКлиента.Контрагент КАК Контрагент,
	|	ЗаказКлиента.Номер КАК Номер,
	|	ЗаказКлиента.Предприятие КАК Предприятие,
	|	ЗаказКлиента.ТабличнаяЧасть.(
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура КАК Номенклатура,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		0 КАК МинЦена,
	|		Сумма КАК Сумма,
	|		СтавкаНДС КАК СтавкаНДС,
	|		0 КАК ОтклонениеЦена,
	|		0 КАК ОтклонениеСумма
	|	) КАК ТабличнаяЧасть,
	|	ЗаказКлиента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ЗаказКлиента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка В(&Ссылка)";
	
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	Шапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьТабличнаяЧастьШапка = Макет.ПолучитьОбласть("ТабличнаяЧастьШапка");
	ОбластьТабличнаяЧасть = Макет.ПолучитьОбласть("ТабличнаяЧасть");
	ОбластьТабличнаяЧастьПодвал = Макет.ПолучитьОбласть("ТабличнаяЧастьПодвал");
	
	ТипМинЦены = справочники.сабМониторВнедрения.НайтиПоНаименованию("КонтрольМинимальнойЦеныПоТипуЦен", Истина).Значение;
	
	ВставлятьРазделительСтраниц = Ложь;
	Пока Выборка.Следующий() Цикл
		Если ВставлятьРазделительСтраниц Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ВыборкаЦен = Новый ТаблицаЗначений;
		
		Если ЗначениеЗаполнено(ТипМинЦены) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	ЦеныНоменклатурыСрезПоследних.Период КАК Период,
			               |	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
			               |	ЦеныНоменклатурыСрезПоследних.ТипЦен КАК ТипЦен,
			               |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
			               |ИЗ
			               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			               |			&Период,
			               |			ТипЦен = &ТипЦен
			               |				И Номенклатура В (&Номенклатура)) КАК ЦеныНоменклатурыСрезПоследних";
			
			Запрос.УстановитьПараметр("ТипЦен", ТипМинЦены);
			Запрос.УстановитьПараметр("Период", Выборка.Дата);
			Запрос.УстановитьПараметр("Номенклатура", Выборка.ТабличнаяЧасть.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
			
			Результат = Запрос.Выполнить();
			ВыборкаЦен = Результат.Выгрузить();
			
		КонецЕсли;

		ОбластьЗаголовок.Параметры.Заполнить(Выборка);
		ТабДок.Вывести(ОбластьЗаголовок);

		Шапка.Параметры.Заполнить(Выборка);
		ТабДок.Вывести(Шапка, Выборка.Уровень());
		
		ТабДок.Вывести(ОбластьТабличнаяЧастьШапка);
		ВыборкаТЧ = Выборка.ТабличнаяЧасть.Выгрузить();
		
		СуммаОтклонениеИтого = 0;
		
		Для каждого ВыборкаТабличнаяЧасть Из ВыборкаТЧ Цикл
			
			ВыборкаТабличнаяЧасть.Цена = ?(Выборка.ЦенаВключаетНДС, ВыборкаТабличнаяЧасть.Цена, ВыборкаТабличнаяЧасть.Цена / (1 - ВыборкаТабличнаяЧасть.СтавкаНДС.Ставка/100)); 
			
			Если ВыборкаЦен.Количество() Тогда
				НайденныеСтрокиЦен = ВыборкаЦен.НайтиСтроки(Новый Структура("Номенклатура", ВыборкаТабличнаяЧасть.Номенклатура));
				Для каждого ТекНайдСтрока Из НайденныеСтрокиЦен Цикл
					ВыборкаТабличнаяЧасть.МинЦена = ТекНайдСтрока.Цена;
					ВыборкаТабличнаяЧасть.ОтклонениеЦена = ВыборкаТабличнаяЧасть.Цена - ВыборкаТабличнаяЧасть.МинЦена;
					ВыборкаТабличнаяЧасть.ОтклонениеСумма = ВыборкаТабличнаяЧасть.Цена * ВыборкаТабличнаяЧасть.Количество - ВыборкаТабличнаяЧасть.МинЦена * ВыборкаТабличнаяЧасть.Количество; 
					СуммаОтклонениеИтого = СуммаОтклонениеИтого + ВыборкаТабличнаяЧасть.ОтклонениеСумма;
				КонецЦикла;
			КонецЕсли;
			
			ОбластьТабличнаяЧасть.Параметры.Заполнить(ВыборкаТабличнаяЧасть);
			ТабДок.Вывести(ОбластьТабличнаяЧасть);
		КонецЦикла;
		
		ОбластьТабличнаяЧастьПодвал.Параметры.Заполнить(Выборка);
		ОбластьТабличнаяЧастьПодвал.Параметры.ОтклонениеСуммаИтого = СуммаОтклонениеИтого;
		ТабДок.Вывести(ОбластьТабличнаяЧастьПодвал);
		
		ВставлятьРазделительСтраниц = Истина;
	КонецЦикла;
	
	Возврат ТабДок;
	
	//}}
КонецФункции

Функция КалькуляцияИМаржаЗаказа(Ссылка) Экспорт
	//{{_КОНСТРУКТОР_ПЕЧАТИ(КонтрольМинимальнойЦены)
	
	ТабДок = Новый ТабличныйДокумент;
	
	Макет = Документы.ЗаказКлиента.ПолучитьМакет("КалькуляцияИМаржаЗаказа");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказКлиента.Дата КАК Дата,
	|	ЗаказКлиента.Договор КАК Договор,
	|	ЗаказКлиента.Комментарий КАК Комментарий,
	|	ЗаказКлиента.Контрагент КАК Контрагент,
	|	ЗаказКлиента.Номер КАК Номер,
	|	ЗаказКлиента.Предприятие КАК Предприятие,
	|	ЗаказКлиента.ТабличнаяЧасть.(
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура КАК Номенклатура,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		0 КАК Себестоимость,   
	|		0 КАК ПоследняяЦенаЗакупки,
	|		Сумма КАК Сумма,
	|		СтавкаНДС КАК СтавкаНДС,
	|		0 КАК ОтклонениеЦенаОтСебестоимости,
	|		0 КАК ОтклонениеСуммаОтсебестоимости,
	|		0 КАК ОтклонениеЦенаОтЗакупки,
	|		0 КАК ОтклонениеСуммаОтЗакупки

	|	) КАК ТабличнаяЧасть,
	|	ЗаказКлиента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ЗаказКлиента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка В(&Ссылка)";
	
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	Шапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьТабличнаяЧастьШапка = Макет.ПолучитьОбласть("ТабличнаяЧастьШапка");
	ОбластьТабличнаяЧасть = Макет.ПолучитьОбласть("ТабличнаяЧасть");
	ОбластьТабличнаяЧастьПодвал = Макет.ПолучитьОбласть("ТабличнаяЧастьПодвал");
	
	
	ВставлятьРазделительСтраниц = Ложь;
	Пока Выборка.Следующий() Цикл
		Если ВставлятьРазделительСтраниц Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ВыборкаЦены = Новый ТаблицаЗначений;
		
			
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.КоличествоКонечныйОстаток > 0
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстаток / ХозрасчетныйОстаткиИОбороты.КоличествоКонечныйОстаток
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт > 0
		|					ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотДт / ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|	КОНЕЦ КАК Себестоимость,
		|	ВЫРАЗИТЬ(ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ПоследниеЦены.Цена КАК ПоследняяЦенаЗакупки
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПоследниеДокументыНоменклатуры.Номенклатура КАК Номенклатура,
		|		ПоследниеДокументыНоменклатуры.Цена КАК Цена
		|	ИЗ
		|		Документ.ПоступлениеТоваровУслуг.Товары КАК ПоследниеДокументыНоменклатуры
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				Документы.Номенклатура КАК Номенклатура,
		|				МАКСИМУМ(Документы.Ссылка.Дата) КАК ДатаПоследнегоДокумента
		|			ИЗ
		|				Документ.ПоступлениеТоваровУслуг.Товары КАК Документы
		|			ГДЕ
		|				Документы.Ссылка.Дата < &ДатаОкончания
		|			
		|			СГРУППИРОВАТЬ ПО
		|				Документы.Номенклатура) КАК ДатыПоследнихДокументовНоменклатуры
		|			ПО ПоследниеДокументыНоменклатуры.Номенклатура = ДатыПоследнихДокументовНоменклатуры.Номенклатура
		|				И ПоследниеДокументыНоменклатуры.Ссылка.Дата = ДатыПоследнихДокументовНоменклатуры.ДатаПоследнегоДокумента
		|	ГДЕ
		|		ПоследниеДокументыНоменклатуры.Номенклатура В(&Номенклатура)) КАК ПоследниеЦены
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, , , Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыНаСкладах), , Субконто1 В (&Номенклатура)) КАК ХозрасчетныйОстаткиИОбороты
		|		ПО ((ВЫРАЗИТЬ(ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Справочник.Номенклатура)) = ПоследниеЦены.Номенклатура)";
		
		Запрос.УстановитьПараметр("ДатаОкончания", Выборка.Дата); 
		Запрос.УстановитьПараметр("ДатаНачала", Выборка.Дата-60*24*60*60);
		
		Запрос.УстановитьПараметр("Номенклатура", Выборка.ТабличнаяЧасть.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
		
		Результат = Запрос.Выполнить();
		ВыборкаЦены = Результат.Выгрузить();
			

		ОбластьЗаголовок.Параметры.Заполнить(Выборка);
		ТабДок.Вывести(ОбластьЗаголовок);

		Шапка.Параметры.Заполнить(Выборка);
		ТабДок.Вывести(Шапка, Выборка.Уровень());
		
		ТабДок.Вывести(ОбластьТабличнаяЧастьШапка);
		ВыборкаТЧ = Выборка.ТабличнаяЧасть.Выгрузить();
		
		ОтклонениеСуммаОтСебестоимостиИтого = 0;  
		ОтклонениеСуммаОтЗакупкиИтого = 0;
		
		Для каждого ВыборкаТабличнаяЧасть Из ВыборкаТЧ Цикл
			
			ВыборкаТабличнаяЧасть.Цена = ?(Выборка.ЦенаВключаетНДС, ВыборкаТабличнаяЧасть.Цена, ВыборкаТабличнаяЧасть.Цена / (1 - ВыборкаТабличнаяЧасть.СтавкаНДС.Ставка/100)); 
			
			Если ВыборкаЦены.Количество() Тогда
				НайденныеСтрокиЦен = ВыборкаЦены.НайтиСтроки(Новый Структура("Номенклатура", ВыборкаТабличнаяЧасть.Номенклатура));
				Для каждого ТекНайдСтрока Из НайденныеСтрокиЦен Цикл
					ВыборкаТабличнаяЧасть.Себестоимость = ТекНайдСтрока.Себестоимость;
					ВыборкаТабличнаяЧасть.ОтклонениеЦенаОтСебестоимости = ВыборкаТабличнаяЧасть.Цена - ВыборкаТабличнаяЧасть.Себестоимость;
					ВыборкаТабличнаяЧасть.ОтклонениеСуммаОтСебестоимости = ВыборкаТабличнаяЧасть.ОтклонениеЦенаОтСебестоимости * ВыборкаТабличнаяЧасть.Количество; 
					ОтклонениеСуммаОтСебестоимостиИтого = ОтклонениеСуммаОтСебестоимостиИтого + ВыборкаТабличнаяЧасть.ОтклонениеСуммаОтСебестоимости;  
					
					ВыборкаТабличнаяЧасть.ПоследняяЦенаЗакупки = ТекНайдСтрока.ПоследняяЦенаЗакупки;
					ВыборкаТабличнаяЧасть.ОтклонениеЦенаОтЗакупки = ВыборкаТабличнаяЧасть.Цена - ВыборкаТабличнаяЧасть.ПоследняяЦенаЗакупки;
					ВыборкаТабличнаяЧасть.ОтклонениеСуммаОтЗакупки = ВыборкаТабличнаяЧасть.ОтклонениеЦенаОтЗакупки * ВыборкаТабличнаяЧасть.Количество; 
					ОтклонениеСуммаОтЗакупкиИтого = ОтклонениеСуммаОтЗакупкиИтого + ВыборкаТабличнаяЧасть.ОтклонениеСуммаОтЗакупки;

				КонецЦикла;
			КонецЕсли;
			
			ОбластьТабличнаяЧасть.Параметры.Заполнить(ВыборкаТабличнаяЧасть);
			ТабДок.Вывести(ОбластьТабличнаяЧасть);
		КонецЦикла;
		
		ОбластьТабличнаяЧастьПодвал.Параметры.Заполнить(Выборка);
		ОбластьТабличнаяЧастьПодвал.Параметры.ОтклонениеСуммаОтСебестоимостиИтого = ОтклонениеСуммаОтСебестоимостиИтого;   
		ОбластьТабличнаяЧастьПодвал.Параметры.ОтклонениеСуммаОтЗакупкиИтого = ОтклонениеСуммаОтЗакупкиИтого;

		ТабДок.Вывести(ОбластьТабличнаяЧастьПодвал);
		
		ВставлятьРазделительСтраниц = Истина;
	КонецЦикла;
	
	Возврат ТабДок;
	
	//}}
 КонецФункции