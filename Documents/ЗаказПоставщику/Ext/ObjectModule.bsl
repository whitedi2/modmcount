
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ТЧСвернутая = ТабличнаяЧасть.Выгрузить();	
	
	ТЧСвернутая.Свернуть("Номенклатура, Склад, Цена, Доставка, ВидДоставки, СтавкаНДС, ВидЦеныПоставщика, ДатаПоступления, ЕдиницаИзмерения, ЦенаПодтвержденная, СтатусПодтвержденияПозиции", 
							"Количество, Сумма, СуммаДоставки, СуммаБезНДС, СуммаНДС, КоличествоУпаковок, КоличествоПодтвержденное");
							
	Если ТЧСвернутая.Количество() <> ТабличнаяЧасть.Количество() Тогда
		ТабличнаяЧасть.Загрузить(ТЧСвернутая);
		Сообщить("В строках обнаружены дубли номенклатур, была произведена свертка дублей!");
	КонецЕсли;	

	
	СуммаДокумента = ТабличнаяЧасть.Итог("Сумма");
	СуммаДокумента = СуммаДокумента;
	
	//Заказ помечен на удаление
	Если ПометкаУдаления = Истина И Ссылка.ПометкаУдаления = Ложь Тогда
		Запрос = новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	УЧ_ПоступлениеТоваров.Ссылка
		               |ИЗ
		               |	Документ.УЧ_ПоступлениеТоваров КАК УЧ_ПоступлениеТоваров
		               |ГДЕ
		               |	УЧ_ПоступлениеТоваров.ДокОснование = &ДокОснование
		               |	И НЕ УЧ_ПоступлениеТоваров.ПометкаУдаления
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	УЧ_ВозвратТоваровПоставщику.Ссылка
		               |ИЗ
		               |	Документ.УЧ_ВозвратТоваровПоставщику КАК УЧ_ВозвратТоваровПоставщику
		               |ГДЕ
		               |	УЧ_ВозвратТоваровПоставщику.ДокОснование = &ДокОснование
		               |	И НЕ УЧ_ВозвратТоваровПоставщику.ПометкаУдаления
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	УЧ_ПеремещениеТоваров.Ссылка
		               |ИЗ
		               |	Документ.УЧ_ПеремещениеТоваров КАК УЧ_ПеремещениеТоваров
		               |ГДЕ
		               |	УЧ_ПеремещениеТоваров.ДокОснование = &ДокОснование
		               |	И НЕ УЧ_ПеремещениеТоваров.ПометкаУдаления";
		Запрос.УстановитьПараметр("ДокОснование", Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Сообщить("Невозможно удалить заказ, поскольку есть подчиненные документы");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//формирование комментария
	//ПрочиеУсловия = Договор.ПрочиеУсловия;
	//Если ЗначениеЗаполнено(ПрочиеУсловия) Тогда
	//	НайденныйТекст = СтрНайти(Комментарий, " (ДопУсловия: ");
	//	Если НайденныйТекст Тогда
	//		Комментарий = Лев(Комментарий, НайденныйТекст - 1);		
	//	КонецЕсли;		
	//	Комментарий = Комментарий + " (ДопУсловия: " + ПрочиеУсловия + ")";
	//КонецЕсли;
	
	//из подписки на событие
	БюджетныйНаСервере.ДокументыПередЗаписьюПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
		
	ЕстьОшибки = Ложь;
	
	РеквизитДатаПоступления = ПроверяемыеРеквизиты.Найти("ДатаПоступления");
	
	Если Не ПоступлениеОднойДатой Тогда
		ПроверяемыеРеквизиты.Удалить(РеквизитДатаПоступления);
	КонецЕсли;	
	
	Если ВидОперации = Перечисления.ВидыЗаказов.ВнутреннееПеремещение Или ВидОперации = Перечисления.ВидыЗаказов.ПеремещениеМеждуСкладами Тогда
		РеквизитЦена = ПроверяемыеРеквизиты.Найти("ТабличнаяЧасть.Цена");
		ПроверяемыеРеквизиты.Удалить(РеквизитЦена);
		РеквизитДоговор = ПроверяемыеРеквизиты.Найти("Договор");
		ПроверяемыеРеквизиты.Удалить(РеквизитДоговор);
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыЗаказов.ПеремещениеМеждуСкладами Тогда
		РеквизитКонтрагент = ПроверяемыеРеквизиты.Найти("Контрагент");
		ПроверяемыеРеквизиты.Удалить(РеквизитКонтрагент);
	КонецЕсли;
	
	Если Не ВидОперации = Перечисления.ВидыЗаказов.ПеремещениеМеждуСкладами Тогда
		РеквизитСкладОтправитель = ПроверяемыеРеквизиты.Найти("СкладОтправитель");
		ПроверяемыеРеквизиты.Удалить(РеквизитСкладОтправитель);
	КонецЕсли;
		
	//Проверим на правильность ассортимента
	//Если ВидОперации = Перечисления.ВидыЗаказов.ЗакупкаТоваров И Не Подразделение.ПроизводственноеПодразделение И Не Контрагент.Учетный Тогда
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	КорзинаТорговТовары.Номенклатура,
	//	|	ТоргиСрезПоследних.ВыведенаИзТоргов КАК ВыведенаИзТоргов
	//	|ПОМЕСТИТЬ ВТ_Торги
	//	|ИЗ
	//	|	Справочник.КорзинаТоргов.Товары КАК КорзинаТорговТовары
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Торги.СрезПоследних(&Период, ) КАК ТоргиСрезПоследних
	//	|		ПО КорзинаТорговТовары.Ссылка = ТоргиСрезПоследних.Корзина
	//	|			И КорзинаТорговТовары.Номенклатура = ТоргиСрезПоследних.Номенклатура
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура
	//	|ИЗ
	//	|	РегистрСведений.НоменклатураПоставщика.СрезПоследних(
	//	|			&Период,
	//	|			Предприятие = &Предприятие
	//	|				И Подразделение = &Подразделение) КАК НоменклатураПоставщикаСрезПоследних
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АссортиментнаяМатрица.СрезПоследних(
	//	|				&Период,
	//	|				Предприятие = &Предприятие
	//	|					И Подразделение = &Подразделение) КАК АссортиментнаяМатрицаСрезПоследних
	//	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыОбеспеченияПотребности.СрезПоследних(
	//	|					&Период,
	//	|					Предприятие = &Предприятие
	//	|						И Подразделение = &Подразделение) КАК ПараметрыОбеспеченияПотребностиСрезПоследних
	//	|			ПО АссортиментнаяМатрицаСрезПоследних.Номенклатура = ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура
	//	|				И АссортиментнаяМатрицаСрезПоследних.Предприятие = ПараметрыОбеспеченияПотребностиСрезПоследних.Предприятие
	//	|				И АссортиментнаяМатрицаСрезПоследних.Подразделение = ПараметрыОбеспеченияПотребностиСрезПоследних.Подразделение
	//	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Торги КАК ВТ_Торги
	//	|			ПО АссортиментнаяМатрицаСрезПоследних.Номенклатура = ВТ_Торги.Номенклатура
	//	|		ПО НоменклатураПоставщикаСрезПоследних.Номенклатура = АссортиментнаяМатрицаСрезПоследних.Номенклатура
	//	|			И НоменклатураПоставщикаСрезПоследних.Подразделение = АссортиментнаяМатрицаСрезПоследних.Подразделение
	//	|			И НоменклатураПоставщикаСрезПоследних.Предприятие = АссортиментнаяМатрицаСрезПоследних.Предприятие
	//	|ГДЕ
	//	|	НЕ ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура ЕСТЬ NULL 
	//	|	И НоменклатураПоставщикаСрезПоследних.Контрагент = &Контрагент
	//	|	И АссортиментнаяМатрицаСрезПоследних.ВыведенИзАссортимента = ЛОЖЬ
	//	|	И ЕСТЬNULL(ВТ_Торги.ВыведенаИзТоргов, ЛОЖЬ) = ЛОЖЬ";
	//	Запрос.УстановитьПараметр("Период", Дата);
	//	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	//	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	//	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	//	ТаблицаАссортимента = Запрос.Выполнить().Выгрузить();
	//	Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
	//		Если ТаблицаАссортимента.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТЧ.Номенклатура)).Количество() = 0 Тогда
	//			сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(ЭтотОбъект, "Номенклатура " + СтрокаТЧ.Номенклатура + " не входит в ассортимент", "ТабличнаяЧасть", СтрокаТЧ.НомерСтроки, "Номенклатура");
	//			ЕстьОшибки = Истина;
	//		КонецЕсли;	
	//	КонецЦикла;	
	//КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Отказ = Истина;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	//{{__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	// регистр Учетный 
	Движения.Учетный.Записывать = Истина;
	
	// не даем провести заказ если табличная часть пуста
	//Если Не ТабличнаяЧасть.Количество() Тогда
	//	Текст = "Не заполнена табличная часть документа. Проведение невозможно.";
	//	сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(ЭтотОбъект, Текст,,, "ТабличнаяЧасть", Отказ);
	//КонецЕсли;
	
	//не делаем проводки, т.к. и так большой регистр!
	//Если НЕ Статус = Перечисления.СтатусыЗаказовПоставщикам.Отменен Тогда
	//	Для Каждого ТекСтрокаТабличнаяЧасть Из ТабличнаяЧасть Цикл
	//		
	//		Если ТекСтрокаТабличнаяЧасть.Доставка Тогда
	//			Продолжить;		
	//		КонецЕсли;		
	//		
	//		//заказ поставщика
	//		Если ВидОперации = Перечисления.ВидыЗаказов.ВозвратБрака Тогда
	//			Движение = Движения.Учетный.Добавить();
	//			Движение.СчетКт = ПланыСчетов.Учетный.СчетЗАК();
	//			Движение.Период = Дата;
	//			Движение.Предприятия = Предприятие;
	//			Движение.ПодразделениеКт = Подразделение;
	//			Движение.СценарийПлана = Справочники.СценарииПланирования.Факт;
	//			Движение.Сумма = ТекСтрокаТабличнаяЧасть.Сумма;
	//			Движение.КоличествоКт = ТекСтрокаТабличнаяЧасть.Количество;
	//			Движение.Содержание = Комментарий;
	//			Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.ЗаказыПоставщикам] = Ссылка;
	//			Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина)] = ТекСтрокаТабличнаяЧасть.Номенклатура;
	//		Иначе	
	//			Движение = Движения.Учетный.Добавить();
	//			Движение.СчетДт = ПланыСчетов.Учетный.СчетЗАК();
	//			Движение.Период = Дата;
	//			Движение.Предприятия = Предприятие;
	//			Движение.ПодразделениеДт = Подразделение;
	//			Движение.СценарийПлана = Справочники.СценарииПланирования.Факт;
	//			Движение.Сумма = ТекСтрокаТабличнаяЧасть.Сумма;
	//			Движение.КоличествоДт = ТекСтрокаТабличнаяЧасть.Количество;
	//			Движение.Содержание = Комментарий;
	//			Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ЗаказыПоставщикам] = Ссылка;
	//			Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина)] = ТекСтрокаТабличнаяЧасть.Номенклатура;
	//		КонецЕсли;
	//		
	//		//заказ клиента
	//		Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
	//			Движение = Движения.Учетный.Добавить();
	//			Движение.СчетКт = ПланыСчетов.Учетный._ЗаказКлиентов;
	//			Движение.Период = Дата;
	//			Движение.Предприятия = Предприятие;
	//			Движение.ПодразделениеКт = Контрагент;
	//			Движение.СценарийПлана = Справочники.СценарииПланирования.Факт;
	//			Движение.Сумма = ТекСтрокаТабличнаяЧасть.Сумма;
	//			Движение.КоличествоКт = ТекСтрокаТабличнаяЧасть.Количество;
	//			Движение.Содержание = Комментарий;
	//			Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.ЗаказыПоставщикам] = Ссылка;
	//			Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина)] = ТекСтрокаТабличнаяЧасть.Номенклатура;
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;


	//}}__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)

	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ВидОперации = ДанныеЗаполнения.ВидОперации;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	Статус = Перечисления.СтатусыЗаказовПоставщикам.Создан;
КонецПроцедуры


Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	БюджетныйНаСервере.ПриУстановкеНовогоНомераПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
КонецПроцедуры
	