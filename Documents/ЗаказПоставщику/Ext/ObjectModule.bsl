
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ТЧСвернутая = ТабличнаяЧасть.Выгрузить();	
	
	ТЧСвернутая.Свернуть("Номенклатура, Склад, Цена, Доставка, ВидДоставки, СтавкаНДС, ВидЦеныПоставщика, ДатаПоступления, ЕдиницаИзмерения, ЦенаПодтвержденная, СтатусПодтвержденияПозиции", 
							"Количество, Сумма, СуммаДоставки, СуммаБезНДС, СуммаНДС, КоличествоУпаковок, КоличествоПодтвержденное");
							
	Если ТЧСвернутая.Количество() <> ТабличнаяЧасть.Количество() Тогда
		ТабличнаяЧасть.Загрузить(ТЧСвернутая);
		Сообщить("В строках обнаружены дубли номенклатур, была произведена свертка дублей!");
	КонецЕсли;	

	
	СуммаДокумента = ТабличнаяЧасть.Итог("Сумма");
	СуммаДокумента = СуммаДокумента;
	
	//Заказ помечен на удаление
	Если ПометкаУдаления = Истина И Ссылка.ПометкаУдаления = Ложь Тогда
		Запрос = новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	УЧ_ПоступлениеТоваров.Ссылка
		               |ИЗ
		               |	Документ.УЧ_ПоступлениеТоваров КАК УЧ_ПоступлениеТоваров
		               |ГДЕ
		               |	УЧ_ПоступлениеТоваров.ДокОснование = &ДокОснование
		               |	И НЕ УЧ_ПоступлениеТоваров.ПометкаУдаления
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	УЧ_ВозвратТоваровПоставщику.Ссылка
		               |ИЗ
		               |	Документ.УЧ_ВозвратТоваровПоставщику КАК УЧ_ВозвратТоваровПоставщику
		               |ГДЕ
		               |	УЧ_ВозвратТоваровПоставщику.ДокОснование = &ДокОснование
		               |	И НЕ УЧ_ВозвратТоваровПоставщику.ПометкаУдаления
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	УЧ_ПеремещениеТоваров.Ссылка
		               |ИЗ
		               |	Документ.УЧ_ПеремещениеТоваров КАК УЧ_ПеремещениеТоваров
		               |ГДЕ
		               |	УЧ_ПеремещениеТоваров.ДокОснование = &ДокОснование
		               |	И НЕ УЧ_ПеремещениеТоваров.ПометкаУдаления";
		Запрос.УстановитьПараметр("ДокОснование", Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Сообщить("Невозможно удалить заказ, поскольку есть подчиненные документы");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//формирование комментария
	//ПрочиеУсловия = Договор.ПрочиеУсловия;
	//Если ЗначениеЗаполнено(ПрочиеУсловия) Тогда
	//	НайденныйТекст = СтрНайти(Комментарий, " (ДопУсловия: ");
	//	Если НайденныйТекст Тогда
	//		Комментарий = Лев(Комментарий, НайденныйТекст - 1);		
	//	КонецЕсли;		
	//	Комментарий = Комментарий + " (ДопУсловия: " + ПрочиеУсловия + ")";
	//КонецЕсли;
	
	//из подписки на событие
	БюджетныйНаСервере.ДокументыПередЗаписьюПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧДокумента.КоличествоУпаковок,
	|	ТЧДокумента.Номенклатура
	|ПОМЕСТИТЬ ВТ_ТЧДока
	|ИЗ
	|	&ТЧДокумента КАК ТЧДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТЧДока.КоличествоУпаковок,
	|	ВТ_ТЧДока.Номенклатура,
	|	ЕСТЬNULL(ВТ_ТЧДока.КоличествоУпаковок * ВТ_ТЧДока.Номенклатура.Вес, 0) КАК ВесТовара
	|ИЗ
	|	ВТ_ТЧДока КАК ВТ_ТЧДока";
	Запрос.УстановитьПараметр("ТЧДокумента", ТабличнаяЧасть.Выгрузить(, "КоличествоУпаковок, Номенклатура"));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ВесТовара = 0;
	Пока Выборка.Следующий() Цикл
		ВесТовара = ВесТовара + Выборка.ВесТовара;		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
		
	ЕстьОшибки = Ложь;
	
	РеквизитДатаПоступления = ПроверяемыеРеквизиты.Найти("ДатаПоступления");
	
	Если Не ПоступлениеОднойДатой Тогда
		ПроверяемыеРеквизиты.Удалить(РеквизитДатаПоступления);
	КонецЕсли;	
	
	Если ВидОперации = Перечисления.ВидыЗаказов.ВнутреннееПеремещение Или ВидОперации = Перечисления.ВидыЗаказов.ПеремещениеМеждуСкладами Тогда
		РеквизитЦена = ПроверяемыеРеквизиты.Найти("ТабличнаяЧасть.Цена");
		ПроверяемыеРеквизиты.Удалить(РеквизитЦена);
		РеквизитДоговор = ПроверяемыеРеквизиты.Найти("Договор");
		ПроверяемыеРеквизиты.Удалить(РеквизитДоговор);
	Иначе
		НужнаПроверкаДоговора = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ПроверятьЗаполнениеДоговоровВДокументах", Истина).Значение;
		Если НЕ НужнаПроверкаДоговора = Неопределено И НужнаПроверкаДоговора Тогда
			РеквизитДоговор = ПроверяемыеРеквизиты.Найти("Договор");
			Если РеквизитДоговор = Неопределено Тогда
				ПроверяемыеРеквизиты.Добавить("Договор");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыЗаказов.ПеремещениеМеждуСкладами Тогда
		РеквизитКонтрагент = ПроверяемыеРеквизиты.Найти("Контрагент");
		ПроверяемыеРеквизиты.Удалить(РеквизитКонтрагент);
	КонецЕсли;
	
	Если Не ВидОперации = Перечисления.ВидыЗаказов.ПеремещениеМеждуСкладами Тогда
		РеквизитСкладОтправитель = ПроверяемыеРеквизиты.Найти("СкладОтправитель");
		ПроверяемыеРеквизиты.Удалить(РеквизитСкладОтправитель);
	КонецЕсли;
		
	//Проверим на правильность ассортимента
	//Если ВидОперации = Перечисления.ВидыЗаказов.ЗакупкаТоваров И Не Подразделение.ПроизводственноеПодразделение И Не Контрагент.Учетный Тогда
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	КорзинаТорговТовары.Номенклатура,
	//	|	ТоргиСрезПоследних.ВыведенаИзТоргов КАК ВыведенаИзТоргов
	//	|ПОМЕСТИТЬ ВТ_Торги
	//	|ИЗ
	//	|	Справочник.КорзинаТоргов.Товары КАК КорзинаТорговТовары
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Торги.СрезПоследних(&Период, ) КАК ТоргиСрезПоследних
	//	|		ПО КорзинаТорговТовары.Ссылка = ТоргиСрезПоследних.Корзина
	//	|			И КорзинаТорговТовары.Номенклатура = ТоргиСрезПоследних.Номенклатура
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура
	//	|ИЗ
	//	|	РегистрСведений.НоменклатураПоставщика.СрезПоследних(
	//	|			&Период,
	//	|			Предприятие = &Предприятие
	//	|				И Подразделение = &Подразделение) КАК НоменклатураПоставщикаСрезПоследних
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АссортиментнаяМатрица.СрезПоследних(
	//	|				&Период,
	//	|				Предприятие = &Предприятие
	//	|					И Подразделение = &Подразделение) КАК АссортиментнаяМатрицаСрезПоследних
	//	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыОбеспеченияПотребности.СрезПоследних(
	//	|					&Период,
	//	|					Предприятие = &Предприятие
	//	|						И Подразделение = &Подразделение) КАК ПараметрыОбеспеченияПотребностиСрезПоследних
	//	|			ПО АссортиментнаяМатрицаСрезПоследних.Номенклатура = ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура
	//	|				И АссортиментнаяМатрицаСрезПоследних.Предприятие = ПараметрыОбеспеченияПотребностиСрезПоследних.Предприятие
	//	|				И АссортиментнаяМатрицаСрезПоследних.Подразделение = ПараметрыОбеспеченияПотребностиСрезПоследних.Подразделение
	//	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Торги КАК ВТ_Торги
	//	|			ПО АссортиментнаяМатрицаСрезПоследних.Номенклатура = ВТ_Торги.Номенклатура
	//	|		ПО НоменклатураПоставщикаСрезПоследних.Номенклатура = АссортиментнаяМатрицаСрезПоследних.Номенклатура
	//	|			И НоменклатураПоставщикаСрезПоследних.Подразделение = АссортиментнаяМатрицаСрезПоследних.Подразделение
	//	|			И НоменклатураПоставщикаСрезПоследних.Предприятие = АссортиментнаяМатрицаСрезПоследних.Предприятие
	//	|ГДЕ
	//	|	НЕ ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура ЕСТЬ NULL 
	//	|	И НоменклатураПоставщикаСрезПоследних.Контрагент = &Контрагент
	//	|	И АссортиментнаяМатрицаСрезПоследних.ВыведенИзАссортимента = ЛОЖЬ
	//	|	И ЕСТЬNULL(ВТ_Торги.ВыведенаИзТоргов, ЛОЖЬ) = ЛОЖЬ";
	//	Запрос.УстановитьПараметр("Период", Дата);
	//	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	//	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	//	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	//	ТаблицаАссортимента = Запрос.Выполнить().Выгрузить();
	//	Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
	//		Если ТаблицаАссортимента.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТЧ.Номенклатура)).Количество() = 0 Тогда
	//			сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(ЭтотОбъект, "Номенклатура " + СтрокаТЧ.Номенклатура + " не входит в ассортимент", "ТабличнаяЧасть", СтрокаТЧ.НомерСтроки, "Номенклатура");
	//			ЕстьОшибки = Истина;
	//		КонецЕсли;	
	//	КонецЦикла;	
	//КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Отказ = Истина;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	//{{__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	УЧ_ПоступлениеТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УЧ_ПоступлениеТоваров КАК УЧ_ПоступлениеТоваров
	|ГДЕ
	|	УЧ_ПоступлениеТоваров.ДокОснование = &ДокОснование
	|	И УЧ_ПоступлениеТоваров.Проведен = ИСТИНА";
	
	Запрос.УстановитьПараметр("ДокОснование", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ЕстьПоступление = Ложь;
	Пока Выборка.Следующий() Цикл
		ЕстьПоступление = Истина;
	КонецЦикла;

	// регистр Учетный 
	Движения.Учетный.Записывать = Истина;
	
	Если ЕстьПоступление Тогда //оичщаем проводки
		Возврат;
	КонецЕсли;
	
	СчетРезервов = ПланыСчетов.Учетный.СчетЗАК();
	УчетПоПодразделениям = СчетРезервов.УчетПоПодразделениям;
	
	Если Не ЗначениеЗаполнено(СчетРезервов) Тогда
		Возврат;	
	КонецЕсли;
	
	Если НЕ Статус = Перечисления.СтатусыЗаказовПоставщикам.Отменен И НЕ Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт Тогда
		Для Каждого ТекСтрокаТабличнаяЧасть Из ТабличнаяЧасть Цикл
			
			//заказ поставщика
			Если ВидОперации = Перечисления.ВидыЗаказов.ВозвратБрака Тогда
				Движение = Движения.Учетный.Добавить();
				Движение.СчетКт = СчетРезервов;
				Движение.Период = ДатаПоступления;
				Движение.Предприятия = Предприятие;
				Если УчетПоПодразделениям Тогда
					Движение.ПодразделениеКт = Подразделение;
				КонецЕсли;
				Движение.СценарийПлана = Справочники.СценарииПланирования.СценарийФакт();
				//Движение.Сумма = ТекСтрокаТабличнаяЧасть.Сумма;
				Движение.КоличествоКт = ТекСтрокаТабличнаяЧасть.Количество;
				Движение.Содержание = Комментарий;
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, Движение.СчетКт, 1, ТекСтрокаТабличнаяЧасть.Номенклатура);
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, Движение.СчетКт, 2, ТекСтрокаТабличнаяЧасть.Склад);
			Иначе	
				Движение = Движения.Учетный.Добавить();
				Движение.СчетДт = СчетРезервов;
				Движение.Период = ДатаПоступления;
				Движение.Предприятия = Предприятие;
				Если УчетПоПодразделениям Тогда
					Движение.ПодразделениеДт = Подразделение;
				КонецЕсли;
				Движение.СценарийПлана = Справочники.СценарииПланирования.СценарийФакт();
				//Движение.Сумма = ТекСтрокаТабличнаяЧасть.Сумма;
				Движение.КоличествоДт = ТекСтрокаТабличнаяЧасть.Количество;
				Движение.Содержание = Комментарий;
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт, Движение.СчетДт, 1, ТекСтрокаТабличнаяЧасть.Номенклатура);
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт, Движение.СчетДт, 2, ТекСтрокаТабличнаяЧасть.Склад);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;

	//}}__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)

	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		
		Если ДанныеЗаполнения.Свойство("ВидОперации") Тогда
			ВидОперации = ДанныеЗаполнения.ВидОперации;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ТЧ") Тогда
			Для каждого ТекСтрока Из ДанныеЗаполнения.ТЧ Цикл
				НоваяСтрока = ТабличнаяЧасть.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				НоваяСтрока.Цена = ТекСтрока.ЦенаПоставки;
				НоваяСтрока.КоличествоУпаковок = ТекСтрока.Количество;
				
				Если ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
					ТекРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(ТекСтрока.Номенклатура, "СтавкаНДС, Код, ВидСтавкиНДС, ЕдиницаИзмерения");
					НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвВидовСтавокНДСБУХУУ().Получить(ТекРеквизиты.ВидСтавкиНДС);;
					
					НоваяСтрока.Сумма = ТекСтрока.Количество * НоваяСтрока.Цена;
					
					//лишний запрос делаем
					ТекРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(НоваяСтрока.СтавкаНДС, "Ставка");
					Если НЕ ТекРеквизиты = Неопределено Тогда
						НоваяСтрока.СуммаНДС = НоваяСтрока.Сумма / ((100+ТекРеквизиты.Ставка)/100) * (ТекРеквизиты.Ставка/100);
					КонецЕсли;
					
				КонецЕсли;

			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		
		//Отказ = сабОперОбщегоНазначения.ПроверкаСозданияНаОснованииНаСервере(ДанныеЗаполнения, Комментарий, СтандартнаяОбработка, ТипЗнч(Ссылка));
		//Если Отказ.Признак = "##УжеСоздан" Тогда
		//	ВызватьИсключение "На основании Заказ клиента уже введен документ " + Отказ.Ссылка;
		//ИначеЕсли Отказ.Признак = "##НеПроведен" Тогда
		//	ВызватьИсключение "Документ Заказ клиента не проведен. Ввод на основании не возможен.";
		//КонецЕсли;
		
		// Заполнение шапки
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения,,"Проведен, Номер, Дата, Контрагент, Договор");
		ДокОснование 	= ДанныеЗаполнения.Ссылка;
		УчитыватьНДС 	= Ложь;
		СуммаВключаетНДС = Истина;

		ТабличнаяЧасть.Очистить();
		
		Для Каждого ТекСтрокаТабличнаяЧасть Из ДанныеЗаполнения.ТабличнаяЧасть Цикл
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаТабличнаяЧасть, ,"Цена, Сумма, СуммаНДС"); 
		КонецЦикла;
		
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
		
		//Отказ = сабОперОбщегоНазначения.ПроверкаСозданияНаОснованииНаСервере(ДанныеЗаполнения, Комментарий, СтандартнаяОбработка, ТипЗнч(Ссылка));
		//Если Отказ.Признак = "##УжеСоздан" Тогда
		//	ВызватьИсключение "На основании Заказ клиента уже введен документ " + Отказ.Ссылка;
		//ИначеЕсли Отказ.Признак = "##НеПроведен" Тогда
		//	ВызватьИсключение "Документ Заказ клиента не проведен. Ввод на основании не возможен.";
		//КонецЕсли;
		
		// Заполнение шапки
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения,,"Проведен, Номер, Дата");
		ДокОснование 	= ДанныеЗаполнения.Ссылка;
		УчитыватьНДС 	= Ложь;
		СуммаВключаетНДС = Истина;
		
		ТабличнаяЧасть.Очистить();
		
		Для Каждого ТекСтрокаТабличнаяЧасть Из ДанныеЗаполнения.Материалы Цикл
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаТабличнаяЧасть); 
			НоваяСтрока.Номенклатура = ТекСтрокаТабличнаяЧасть.Материал;
			НоваяСтрока.КоличествоУпаковок = ТекСтрокаТабличнаяЧасть.Количество;
			Если Не ЗначениеЗаполнено(НоваяСтрока.ЕдиницаИзмерения) Тогда
				НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаИзмерения;			
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	Статус = Перечисления.СтатусыЗаказовПоставщикам.Создан;
	
	Для каждого строкаТ из ЭтотОбъект.ТабличнаяЧасть Цикл
		
		Если Не ЗначениеЗаполнено(строкаТ.ЕдиницаИзмерения) Тогда
			строкаТ.ЕдиницаИзмерения = строкаТ.Номенклатура.ЕдиницаИзмерения;
		КонецЕсли;
		
		//обновление цены
		//УстановитьЗависимыеДанныеВТЧ(строкаТ);
		//РассчитатьСуммуТовары(строкаТ);
		
		Если Не строкаТ.КоличествоУпаковок Тогда
			строкаТ.КоличествоУпаковок = строкаТ.Количество;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры


Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	БюджетныйНаСервере.ПриУстановкеНовогоНомераПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
КонецПроцедуры
	