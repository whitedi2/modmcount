#Область СлужебныеПроцедурыИФункции

// Функция формирует печатную форму документа.
//
Функция ПечатьЗаказПоставщику(МассивОбъектов) Экспорт
	
	КолонкаКодов       = "Код";//ФормированиеПечатныхФормСервер.ИмяДополнительнойКолонки();
	ВыводитьКоды       = НЕ ПустаяСтрока(КолонкаКодов);
	ВыводитьУпаковки   = Ложь;//ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	ТабличныйДокумент  = Новый ТабличныйДокумент;
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
	СинонимДокумента   = НСтр("ru='Заказ поставщику'");
	//Если БюджетныйНаСервере.РольАдминаДоступнаСервер() Тогда
		ВыводитьШтрихкод = Истина;
	//Иначе
	//	ВыводитьШтрихкод = Ложь;
	//КонецЕсли;	

	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПоставщику_ЗаказПоставщику";
	
	ЗапросПоШтрихкодам = Новый Запрос;
	ЗапросПоШтрихкодам.Текст = 
	"ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод,
	|	ШтрихкодыНоменклатуры.Номенклатура
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры";
	ТаблицаШтрихкодов = ЗапросПоШтрихкодам.Выполнить().Выгрузить();
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Номер КАК Номер,
	|	Документ.Дата КАК Дата,
	|	Документ.Организация КАК Покупатель,
	|	Документ.Контрагент КАК Поставщик,
	|	Документ.Ответственный КАК Ответственный,
	|	Документ.Организация.Код КАК Префикс,
	|	Документ.УчитыватьНДС КАК УчитыватьНДС,
	|	Документ.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Контрагент) КАК ПоставщикПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Организация) КАК ПокупательПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Ответственный) КАК ОтветственныйПредставление,
	|	Документ.Подразделение,
	|	Документ.ДатаПоступления,
	|	Документ.ВидОперации,
	|	Документ.ПредприятиеВн
	|ИЗ
	|	Документ.ЗаказПоставщику КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивОбъектов)
	|	И Документ.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Номенклатура.Код КАК КолонкаКодов,
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеЕдиницыИзмеренияУпаковки,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ТаблицаТовары.КоличествоВЗапайках
	|ИЗ
	|	Документ.ЗаказПоставщику.ТабличнаяЧасть КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&МассивОбъектов)
	|	И ТаблицаТовары.Ссылка.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Макет = Документы.ЗаказПоставщику.ПолучитьМакет("ПФ_MXL_ЗаказПоставщику");
	
	ОбластьЗаголовок 		= Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка 			= Макет.ПолучитьОбласть("Шапка");
	ОбластьШтрихкода 		= Макет.ПолучитьОбласть("ОбластьШтрихкода");
	
	ОбластьШапкаТаблицыНачало 	= Макет.ПолучитьОбласть("ШапкаТаблицы|НачалоСтроки");
	ОбластьСтрокаТаблицыНачало 	= Макет.ПолучитьОбласть("СтрокаТаблицы|НачалоСтроки");
	ОбластьПодвалТаблицыНачало 	= Макет.ПолучитьОбласть("ПодвалТаблицы|НачалоСтроки");
	
	ОбластьШапкаТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьСтрокаТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
	ОбластьПодвалТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
	
	ОбластьШапкаТаблицыШтрихкодов 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаШтрихкодов");
	ОбластьСтрокаТаблицыШтрихкодов 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаШтрихкодов");
	ОбластьПодвалТаблицыШтрихкодов 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаШтрихкодов");
	
	ОбластьШапкаТаблицыКолонкаКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов; 
	
	ОбластьШапкаТаблицыКолонкаУпаковок 		= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаУпаковок");
	ОбластьСтрокаТаблицыКолонкаУпаковок 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаУпаковок");
	ОбластьПодвалТаблицыКолонкаУпаковок		= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаУпаковок");
	
	ОбластьШапкаТаблицыКолонкаЗапайки 		= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаЗапайки");
	ОбластьСтрокаТаблицыКолонкаЗапайки 		= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаЗапайки");
	ОбластьПодвалТаблицыКолонкаЗапайки		= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаЗапайки");
	
	ОбластьКолонкаТоваров = Макет.Область("КолонкаТоваров");
	
	Если НЕ ВыводитьКоды Тогда
		
		ОбластьКолонкаТоваров.ШиринаКолонки = ОбластьКолонкаТоваров.ШиринаКолонки + Макет.Область("КолонкаКодов").ШиринаКолонки;
		
	КонецЕсли;
	
	Если НЕ ВыводитьУпаковки Тогда
		
		ОбластьКолонкаТоваров.ШиринаКолонки = ОбластьКолонкаТоваров.ШиринаКолонки + Макет.Область("КолонкаУпаковокКоличество").ШиринаКолонки
		+ Макет.Область("КолонкаУпаковокПредставление").ШиринаКолонки;
		
	КонецЕсли;
	
	ОбластьШапкаТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаТоваров");
	ОбластьСтрокаТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаТоваров");
	ОбластьПодвалТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаТоваров");
		
	ОбластьШапкаТаблицыКонец 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КонецСтроки");
	ОбластьСтрокаТаблицыКонец 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КонецСтроки");
	ОбластьПодвалТаблицыКонец 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КонецСтроки");
	
	ОбластьПодписей       = Макет.ПолучитьОбласть("Подписи");
	ОбластьИтого          = Макет.ПолучитьОбласть("Итого");
	ОбластьИтогоНДС       = Макет.ПолучитьОбласть("ИтогоНДС");
	ОбластьСуммаПрописью  = Макет.ПолучитьОбласть("СуммаПрописью");
	
	ВыборкаПоДокументам = Результаты[0].Выбрать();
	
	ВыборкаПоТабличнымЧастям = Результаты[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
	ПервыйДокумент = Истина;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если НЕ ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаПоДокументам.ПредприятиеВн) Тогда
			ВыводитьЗапайки = Истина;
		Иначе
			ВыводитьЗапайки = Ложь;
		КонецЕсли;	
		
		ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если НЕ ПервыйДокумент Тогда
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
				
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		//ШТРИХКОД
		ЗначениеШтрихкода = ВыборкаПоДокументам.Номер;
		Рисунок = ОбластьШтрихкода.Рисунки.КартинкаШтрихкода;
		
		КоличествоМиллиметровВПикселе = 0.26458;
		
		ПараметрыШтрихкода = Новый Структура;
		ПараметрыШтрихкода.Вставить("Ширина",	Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе));
		ПараметрыШтрихкода.Вставить("Высота",	Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе));
		
		//Если СтруктураШаблона.ТипКода = 16 Тогда
		//	МинСторона = Мин(ПараметрыШтрихкода.Ширина, ПараметрыШтрихкода.Высота);
		//	ПараметрыШтрихкода.Ширина = МинСторона;
		//	ПараметрыШтрихкода.Высота = МинСторона;
		//КонецЕсли;
		
		//Если СтруктураШаблона.Свойство("УровеньКоррекцииQR") Тогда
		//	ПараметрыШтрихкода.Вставить("УровеньКоррекцииQR", СтруктураШаблона.УровеньКоррекцииQR);
		//Иначе
			ПараметрыШтрихкода.Вставить("УровеньКоррекцииQR", 0);
		//КонецЕсли;
		
		ПараметрыШтрихкода.Вставить("Штрихкод",				ЗначениеШтрихкода);
		ПараметрыШтрихкода.Вставить("ТипКода",				99);//СтруктураШаблона.ТипКода);
		ПараметрыШтрихкода.Вставить("ОтображатьТекст",		Истина);//СтруктураШаблона.ОтображатьТекст);
		ПараметрыШтрихкода.Вставить("РазмерШрифта",			12);//СтруктураШаблона.РазмерШрифта);
		
		//Если СтруктураШаблона.Свойство("УголПоворота") Тогда
			ПараметрыШтрихкода.Вставить("УголПоворота", 0);//СтруктураШаблона.УголПоворота);
		//КонецЕсли;
		
		Рисунок.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
		
		ТабличныйДокумент.Вывести(ОбластьШтрихкода);
		
		// ЗАГОЛОВОК
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
		ОбластьЗаголовок.Параметры.Заполнить(ВыборкаПоДокументам);
		ОбластьЗаголовок.Параметры.ЗаголовокЗаказа = ?(ВыборкаПоДокументам.ВидОперации = Перечисления.ВидыЗаказов.ВозвратБрака, "Заказ на возрат поставщику", ?(ВыборкаПоДокументам.ВидОперации = Перечисления.ВидыЗаказов.ВнутреннееПеремещение, "Заказ на перемещение", "Заказ поставщику"));
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = "№ " + РеквизитыДокумента.Номер + " от " + Формат(РеквизитыДокумента.Дата, "ДФ='дд ММММ гггг'") + " г.";
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		// ШАПКА
		ОбластьШапка.Параметры.Заполнить(ВыборкаПоДокументам);
		Если ВыборкаПоДокументам.ДатаПоступления = НачалоДня(ВыборкаПоДокументам.ДатаПоступления) Тогда
			ОбластьШапка.Параметры.ДатаПоступления = Формат(ВыборкаПоДокументам.ДатаПоступления, "ДФ='dd ММММ yyyy ''г.'''");
		Иначе
			ОбластьШапка.Параметры.ДатаПоступления = Формат(ВыборкаПоДокументам.ДатаПоступления, "ДФ='dd ММММ yyyy ''г.'' ''в'' ЧЧ:мм '");
		КонецЕсли; 
		ОбластьШапка.Параметры.ПокупательПредставление = ВыборкаПоДокументам.ПокупательПредставление;
		ТабличныйДокумент.Вывести(ОбластьШапка);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицыНачало);
		
		Если ВыводитьКоды Тогда
			
			ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаКодов);
			
		КонецЕсли;
		
		Если ВыводитьШтрихкод Тогда
			ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыШтрихкодов);
		КонецЕсли;	
		
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаТоваров);
		
		Если ВыводитьУпаковки Тогда
			
			ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаУпаковок);
			
		КонецЕсли;
		
		Если ВыводитьЗапайки Тогда
			ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаЗапайки);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКонец);
		ВсегоНаименований  = 0;
		Итого              = 0;
		ИтогоНДС           = 0;
	
		// СТРОКИ ТЧ
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
			
			ОбластьСтрокаТаблицыНачало.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицыНачало);
			
			Если ВыводитьКоды Тогда
				
				ОбластьСтрокаТаблицыКолонкаКодов.Параметры.Артикул = ВыборкаПоСтрокамТЧ["КолонкаКодов"];
				ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаКодов);
				
			КонецЕсли;
			
			Если ВыводитьШтрихкод Тогда
				//ШТРИХКОД
				СтрокиШтрихкодов = ТаблицаШтрихкодов.НайтиСтроки(Новый Структура("Номенклатура", ВыборкаПоСтрокамТЧ.Номенклатура));
				
				Если СтрокиШтрихкодов.Количество() > 0 Тогда
					ЗначениеШтрихкода = СтрокиШтрихкодов[0].Штрихкод;
					
					Если СтрокиШтрихкодов.Количество() > 1 Тогда 
						
						Для Каждого СтрокаШК Из СтрокиШтрихкодов Цикл
							
							//Если Не СтрокаШК.Основной Тогда
							//	Продолжить;
							//КонецЕсли;
							
							ЗначениеШтрихкода = СтрокаШК.Штрихкод;
						КонецЦикла;
						
					КонецЕсли;
					
					Рисунок = ОбластьСтрокаТаблицыШтрихкодов.Рисунки.ШтрихкодНоменклатуры;
					
					КоличествоМиллиметровВПикселе = 0.26458;
					
					ПараметрыШтрихкода = Новый Структура;
					ПараметрыШтрихкода.Вставить("Ширина",	Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе));
					ПараметрыШтрихкода.Вставить("Высота",	Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе));
					
					//Если СтруктураШаблона.ТипКода = 16 Тогда
					//	МинСторона = Мин(ПараметрыШтрихкода.Ширина, ПараметрыШтрихкода.Высота);
					//	ПараметрыШтрихкода.Ширина = МинСторона;
					//	ПараметрыШтрихкода.Высота = МинСторона;
					//КонецЕсли;
					
					//Если СтруктураШаблона.Свойство("УровеньКоррекцииQR") Тогда
					//	ПараметрыШтрихкода.Вставить("УровеньКоррекцииQR", СтруктураШаблона.УровеньКоррекцииQR);
					//Иначе
					ПараметрыШтрихкода.Вставить("УровеньКоррекцииQR", 0);
					//КонецЕсли;
					
					ПараметрыШтрихкода.Вставить("Штрихкод",				ЗначениеШтрихкода);
					ПараметрыШтрихкода.Вставить("ТипКода",				99);//СтруктураШаблона.ТипКода);
					ПараметрыШтрихкода.Вставить("ОтображатьТекст",		Истина);//СтруктураШаблона.ОтображатьТекст);
					ПараметрыШтрихкода.Вставить("РазмерШрифта",			12);//СтруктураШаблона.РазмерШрифта);
					
					//Если СтруктураШаблона.Свойство("УголПоворота") Тогда
					ПараметрыШтрихкода.Вставить("УголПоворота", 0);//СтруктураШаблона.УголПоворота);
					//КонецЕсли;
					
					Рисунок.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
				КонецЕсли;
				
				ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыШтрихкодов);
			КонецЕсли;
		
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Товар = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаПоСтрокамТЧ.НоменклатураПредставление);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаТоваров);
			
			Если ВыводитьУпаковки Тогда
				
				ОбластьСтрокаТаблицыКолонкаУпаковок.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
				ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаУпаковок);
				
			КонецЕсли;
			
			Если ВыводитьЗапайки Тогда
				ОбластьСтрокаТаблицыКолонкаЗапайки.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
				ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаЗапайки);
			КонецЕсли;
						
			ОбластьСтрокаТаблицыКонец.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКонец);
			
			ВсегоНаименований = ВсегоНаименований + 1;
			Итого             = Итого + ВыборкаПоСтрокамТЧ.Сумма;
			ИтогоНДС          = ИтогоНДС + ВыборкаПоСтрокамТЧ.СуммаНДС;
	
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьПодвалТаблицыНачало);
		
		Если ВыводитьКоды Тогда
			
			ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаКодов);
			
		КонецЕсли;
		
		Если ВыводитьШтрихкод Тогда
			ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыШтрихкодов);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаТоваров);
		
		Если ВыводитьУпаковки Тогда
			
			ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаУпаковок);
			
		КонецЕсли;
		
		Если ВыводитьЗапайки Тогда
			ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаЗапайки);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКонец);
		
		// ИТОГО
		ТекстИтоговойСтроки = НСтр("ru = '%Итого%'");
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%Итого%",ФормированиеПечатныхФормСервер.ФорматСумм(Итого));
		ОбластьИтого.Параметры.Итого = ТекстИтоговойСтроки;
						
		ТекстИтоговойСтроки = НСтр("ru = '%Итого%'");
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%Итого%",ФормированиеПечатныхФормСервер.ФорматСумм(ИтогоНДС));
		
		Если НЕ ВыборкаПоДокументам.УчитыватьНДС Тогда
			ТекстИтоговойСтроки = НСтр("ru = 'Без НДС'");
		КонецЕсли;
		
		ОбластьИтогоНДС.Параметры.ИтогоНДС = ТекстИтоговойСтроки;
		ОбластьИтогоНДС.Параметры.НДС = ?(ВыборкаПоДокументам.ЦенаВключаетНДС, НСтр("ru='В том числе НДС:'"), НСтр("ru='Сумма НДС:'"));
		
		ТабличныйДокумент.Вывести(ОбластьИтого);
		ТабличныйДокумент.Вывести(ОбластьИтогоНДС);
		
		// СУММА ПРОПИСЬЮ
		
		ТекстИтоговойСтроки = НСтр("ru = 'Всего наименований %ВсегоНаименований%, на сумму %Итого%'");
		СуммаКПрописи = Итого + ?(ВыборкаПоДокументам.ЦенаВключаетНДС, 0, ИтогоНДС);
		
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%ВсегоНаименований%", ВсегоНаименований);
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%Итого%", ФормированиеПечатныхФормСервер.ФорматСумм(СуммаКПрописи));
				
		ОбластьСуммаПрописью.Параметры.ИтоговаяСтрока = ТекстИтоговойСтроки;
		ОбластьСуммаПрописью.Параметры.СуммаПрописью = ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(СуммаКПрописи);
			
		ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);
		
		
		// ПОДПИСИ
		ОбластьПодписей.Параметры.Заполнить(ВыборкаПоДокументам);
		ОбластьПодписей.Параметры.ОтветственныйПредставление = ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Ответственный);
		ТабличныйДокумент.Вывести(ОбластьПодписей);
		
		//УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ПечатьСпискаЗаказов(ТабДок, Ссылка) Экспорт
	//{{_КОНСТРУКТОР_ПЕЧАТИ(ПечатьСпискаЗаказов)
	Макет = Документы.ЗаказПоставщику.ПолучитьМакет("ПечатьСпискаЗаказов");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПоставщику.ДатаПоступления КАК ДатаПоступления,
	|	ЗаказПоставщику.Договор,
	|	ЗаказПоставщику.Контрагент КАК Контрагент,
	|	ЗаказПоставщику.Номер,
	|	ЗаказПоставщику.Подразделение КАК Подразделение,
	|	ЗаказПоставщику.Статус,
	|	ЗаказПоставщику.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка В(&Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Подразделение,
	|	ДатаПоступления,
	|	Контрагент,
	|	СуммаДокумента";
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	Результат = Запрос.Выполнить().Выгрузить();

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	Шапка = Макет.ПолучитьОбласть("Шапка");
	ТабДок.Очистить();
	
	Подразделения = Результат.Скопировать();
	Подразделения.Свернуть("Подразделение");
	Если Подразделения.Количество() = 1 Тогда
		ОбластьЗаголовок.Параметры.Магазин = "Магазин: " + Строка(Подразделения[0].Подразделение);
	КонецЕсли; 
	
	ТабДок.Вывести(ОбластьЗаголовок);
	
	ВставлятьРазделительСтраниц = Ложь;
	Для каждого Выборка Из Результат Цикл
		
		//Если ВставлятьРазделительСтраниц Тогда
		//	ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		//КонецЕсли;

		
		//ШТРИХКОД
		ЗначениеШтрихкода = Выборка.Номер;
		Рисунок = Шапка.Рисунки.КартинкаШтрихкода;
		
		КоличествоМиллиметровВПикселе = 0.26458;
		
		ПараметрыШтрихкода = Новый Структура;
		ПараметрыШтрихкода.Вставить("Ширина",	Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе));
		ПараметрыШтрихкода.Вставить("Высота",	Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе));
		
		ПараметрыШтрихкода.Вставить("УровеньКоррекцииQR", 0);
		
		ПараметрыШтрихкода.Вставить("Штрихкод",				ЗначениеШтрихкода);
		ПараметрыШтрихкода.Вставить("ТипКода",				99);//СтруктураШаблона.ТипКода);
		ПараметрыШтрихкода.Вставить("ОтображатьТекст",		Истина);//СтруктураШаблона.ОтображатьТекст);
		ПараметрыШтрихкода.Вставить("РазмерШрифта",			12);//СтруктураШаблона.РазмерШрифта);
		
		ПараметрыШтрихкода.Вставить("УголПоворота", 0);//СтруктураШаблона.УголПоворота);
		
		Рисунок.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
		
		//ТабличныйДокумент.Вывести(ОбластьШтрихкода);

		Шапка.Параметры.Заполнить(Выборка);
		
		Если  Выборка.ДатаПоступления = НачалоДня(Выборка.ДатаПоступления) Тогда
			Шапка.Параметры.ДатаПоступления = Формат(Выборка.ДатаПоступления, "ДФ='dd.ММ.yyyy'");
		Иначе
			Шапка.Параметры.ДатаПоступления = Формат(Выборка.ДатаПоступления, "ДФ='dd.ММММ.yyyy ''в'' ЧЧ:мм '");
		КонецЕсли; 
		
		
		ТабДок.Вывести(Шапка);

		//ВставлятьРазделительСтраниц = Истина;
	КонецЦикла;
	//}}
КонецПроцедуры

Функция КонтрольМинимальнойЦены(Ссылка) Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	
	Макет = Документы.ЗаказКлиента.ПолучитьМакет("КонтрольМинимальнойЦены");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПоставщику.Дата КАК Дата,
	|	ЗаказПоставщику.Договор КАК Договор,
	|	ЗаказПоставщику.Комментарий КАК Комментарий,
	|	ЗаказПоставщику.Контрагент КАК Контрагент,
	|	ЗаказПоставщику.Номер КАК Номер,
	|	ЗаказПоставщику.Предприятие КАК Предприятие,
	|	ЗаказПоставщику.ТабличнаяЧасть.(
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура КАК Номенклатура,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		0 КАК МинЦена,
	|		Сумма КАК Сумма,
	|		СтавкаНДС КАК СтавкаНДС,
	|		0 КАК ОтклонениеЦена,
	|		0 КАК ОтклонениеСумма
	|	) КАК ТабличнаяЧасть,
	|	ЗаказПоставщику.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ЗаказПоставщику.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка В(&Ссылка)";
	
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	Шапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьТабличнаяЧастьШапка = Макет.ПолучитьОбласть("ТабличнаяЧастьШапка");
	ОбластьТабличнаяЧасть = Макет.ПолучитьОбласть("ТабличнаяЧасть");
	ОбластьТабличнаяЧастьПодвал = Макет.ПолучитьОбласть("ТабличнаяЧастьПодвал");
	
	ТипМинЦены = справочники.сабМониторВнедрения.НайтиПоНаименованию("КонтрольМинимальнойЦеныПоТипуЦен", Истина).Значение;
	
	ВставлятьРазделительСтраниц = Ложь;
	Пока Выборка.Следующий() Цикл
		Если ВставлятьРазделительСтраниц Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ВыборкаЦен = Новый ТаблицаЗначений;
		
		Если ЗначениеЗаполнено(ТипМинЦены) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	ЦеныНоменклатурыСрезПоследних.Период КАК Период,
			               |	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
			               |	ЦеныНоменклатурыСрезПоследних.ТипЦен КАК ТипЦен,
			               |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
			               |ИЗ
			               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			               |			&Период,
			               |			ТипЦен = &ТипЦен
			               |				И Номенклатура В (&Номенклатура)) КАК ЦеныНоменклатурыСрезПоследних";
			
			Запрос.УстановитьПараметр("ТипЦен", ТипМинЦены);
			Запрос.УстановитьПараметр("Период", Выборка.Дата);
			Запрос.УстановитьПараметр("Номенклатура", Выборка.ТабличнаяЧасть.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
			
			Результат = Запрос.Выполнить();
			ВыборкаЦен = Результат.Выгрузить();
			
		КонецЕсли;

		ОбластьЗаголовок.Параметры.Заполнить(Выборка);
		ТабДок.Вывести(ОбластьЗаголовок);

		Шапка.Параметры.Заполнить(Выборка);
		ТабДок.Вывести(Шапка, Выборка.Уровень());
		
		ТабДок.Вывести(ОбластьТабличнаяЧастьШапка);
		ВыборкаТЧ = Выборка.ТабличнаяЧасть.Выгрузить();
		
		СуммаОтклонениеИтого = 0;
		
		Для каждого ВыборкаТабличнаяЧасть Из ВыборкаТЧ Цикл
			
			ВыборкаТабличнаяЧасть.Цена = ?(Выборка.ЦенаВключаетНДС, ВыборкаТабличнаяЧасть.Цена, ВыборкаТабличнаяЧасть.Цена / (1 - ВыборкаТабличнаяЧасть.СтавкаНДС.Ставка/100)); 
			
			Если ВыборкаЦен.Количество() Тогда
				НайденныеСтрокиЦен = ВыборкаЦен.НайтиСтроки(Новый Структура("Номенклатура", ВыборкаТабличнаяЧасть.Номенклатура));
				Для каждого ТекНайдСтрока Из НайденныеСтрокиЦен Цикл
					ВыборкаТабличнаяЧасть.МинЦена = ТекНайдСтрока.Цена;
					ВыборкаТабличнаяЧасть.ОтклонениеЦена = ВыборкаТабличнаяЧасть.Цена - ВыборкаТабличнаяЧасть.МинЦена;
					ВыборкаТабличнаяЧасть.ОтклонениеСумма = ВыборкаТабличнаяЧасть.Цена * ВыборкаТабличнаяЧасть.Количество - ВыборкаТабличнаяЧасть.МинЦена * ВыборкаТабличнаяЧасть.Количество; 
					СуммаОтклонениеИтого = СуммаОтклонениеИтого + ВыборкаТабличнаяЧасть.ОтклонениеСумма;
				КонецЦикла;
			КонецЕсли;
			
			ОбластьТабличнаяЧасть.Параметры.Заполнить(ВыборкаТабличнаяЧасть);
			ТабДок.Вывести(ОбластьТабличнаяЧасть);
		КонецЦикла;
		
		ОбластьТабличнаяЧастьПодвал.Параметры.Заполнить(Выборка);
		ОбластьТабличнаяЧастьПодвал.Параметры.ОтклонениеСуммаИтого = СуммаОтклонениеИтого;
		ТабДок.Вывести(ОбластьТабличнаяЧастьПодвал);
		
		ВставлятьРазделительСтраниц = Истина;
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции

#КонецОбласти


Функция ПолучитьКонтакты(Ссылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтрагентыКонтактнаяИнформация.АдресЭП
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Ссылка = &Ссылка
	|	И КонтрагентыКонтактнаяИнформация.Вид = &Вид";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка.Контрагент);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailКонтрагентаДляЗаказов);
	
	НачатьТранзакцию();
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Результат = Неопределено;
		Иначе
			МассивКонтактов = Новый Массив;
			МассивКонтактов.Добавить(Новый Структура("Адрес, Контакт, Представление", РезультатЗапроса.Выгрузить()[0].АдресЭП));
			Результат = МассивКонтактов;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	//опасно, конечно. нужно проверять производительность
	СтандартнаяОбработка = Ложь;
	РеквизитыДокумента = БюджетныйНаСервере.ВернутьРеквизиты(Данные.Ссылка, "ВидОперации");
	Если НЕ РеквизитыДокумента = Неопределено И ЗначениеЗаполнено(РеквизитыДокумента.ВидОперации) Тогда
		Представление = Строка(РеквизитыДокумента.ВидОперации) + " " + Строка(Данные.Номер) + " от " + Строка(Данные.Дата);	
	КонецЕсли;
КонецПроцедуры
