
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ТекущийЗаказ") Тогда
		ТекущийЗаказ = Параметры.ТекущийЗаказ;	
	КонецЕсли;

	ДатаНачала = ТекущаяДата();
	ДатаОкончания = ТекущаяДата();
	СписокЗаказы.Параметры.УстановитьЗначениеПараметра("ДатаНачала", НачалоДня(ДатаНачала));
	СписокЗаказы.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", КонецДня(ДатаОкончания));
	СписокЗаказы.Параметры.УстановитьЗначениеПараметра("ВсеКонтрагенты", Истина);
	СписокЗаказы.Параметры.УстановитьЗначениеПараметра("Контрагент", Неопределено);
	СписокЗаказы.Параметры.УстановитьЗначениеПараметра("ВсеЗаказы", Ложь);
	
	Элементы.ПоказыватьЗакрытые.Пометка = Истина;
	
	Скан_РежимРучногоВводаКоличества = Истина;
	ПринятьПоЦене = 2;
	
	Если ЗначениеЗаполнено(ПараметрыСеанса.ТекущееПодразделение) Тогда
		Элементы.СписокЗаказыПодразделение.Видимость = Ложь;		
	КонецЕсли;
	
	РеквизитыСчФСовпадают = Истина;
	
	ИспользоватьСерийныйУчет = Справочники.СерииНоменклатуры.СерииНоменклатурыИспользуются();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если МобильныйКлиент Или МобильноеПриложениеКлиент Тогда
		ЭтоМобильныйКлиент = Истина;
	#Иначе
		ЭтоМобильныйКлиент = Ложь;
	#КонецЕсли
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаЗаказы;
	ПринятьПоЦенеПриИзменении(Неопределено);
	УстановитьВидимость();
	
	РеквизитыСчФСовпадаютПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОбработкиПриИзменении(Элемент)
	
	//надо ли?
	
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда) Экспорт
	
	Если ЗначениеЗаполнено(ТекущийЗаказ) Тогда
		Если Элементы.СписокЗаказы.ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.Закрыт") Тогда
			ТекстВопроса = "Данный заказ имеет статус ""Закрыт"", вы уверены, что хотите повторно его обработать?
							|Это будет означать частичное поступление/возврат, если это не так, пометьте на удаление существующий подчиненный документ";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Проведен = БюджетныйНаСервере.ВернутьРеквизит(ТекущийЗаказ, "Проведен");
		Если Не Проведен Тогда
			Предупреждение("Заказ не проведен, создать поступление невозможно");
			Возврат;
		КонецЕсли;
		ОбрабатываемыйДокумент = ТекущийЗаказ;
	Иначе
		Возврат;
	КонецЕсли;
	
	ПриемкаВосстановленаИзЧерновика = Ложь;
	Если ЕстьЗаписьВЧерновике(ОбрабатываемыйДокумент) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ДалееЗавершение", ЭтаФорма, Новый Структура("ПриемкаВосстановленаИзЧерновика", ПриемкаВосстановленаИзЧерновика)), "Приемка данного документа была сохранена в черновик. Восстановить?", РежимДиалогаВопрос.ДаНет);
	Иначе
		ДалееПродолжить1(ПриемкаВосстановленаИзЧерновика);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДалееЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ДалееПродолжить1(Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДалееПродолжить1(ПриемкаВосстановленаИзЧерновика)
	
	Если ПриемкаВосстановленаИзЧерновика Тогда
		ВосстановитьИзЧерновикаНаСервере();
	КонецЕсли;
	
	ВидОперации = БюджетныйНаСервере.ВернутьРеквизит(ТекущийЗаказ, "ВидОперации");
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыЗаказов.ВозвратБрака") Тогда
		//Предупреждение("Механизм в разработке. На данный момент заказ обрабатывается управляющим/товароведом Заказ -> Создать на основании");
		//Возврат;
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСозданиеВозврата;
		Если Не ПриемкаВосстановленаИзЧерновика Тогда
			ЗаполнитьТаблицуВозврат();
		КонецЕсли;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыЗаказов.ВнутреннееПеремещение") Тогда
		//Предупреждение("Механизм в разработке. На данный момент заказ обрабатывается управляющим/товароведом Заказ -> Создать на основании");
		//Возврат;
		
		ПеремещениеИз = ПолучитьПеремещениеНаПодразделение(ОбрабатываемыйДокумент);
		Если ПеремещениеИз = Неопределено Тогда
			Предупреждение("Не найдена отгрузка на ОП по этому заказу, приемка невозможна");
			Возврат;
		КонецЕсли;
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСозданиеПеремещения;
		Если Не ПриемкаВосстановленаИзЧерновика Тогда
			ЗаполнитьТаблицуПеремещение();
		КонецЕсли;
		
	Иначе
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСозданиеПоступления;
		Если Не ПриемкаВосстановленаИзЧерновика Тогда
			ЗаполнитьПланФакт();
		КонецЕсли;
		ПодключитьОбработчикОжидания("СохранитьВЧерновикНаКлиенте", 90);
		
	КонецЕсли;
	
	//ЭтапСозданиеПоступления = Истина;
	БылВызовПечати = Ложь;
	ЗаполнитьПодвалТЗ();
	УстановитьВидимость();
	
	ЭтаФорма.ТекущийЭлемент = Элементы.Скан_Штрихкод;

КонецПроцедуры


&НаКлиенте
Процедура Назад(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСозданиеПоступления Тогда
		
		Если ЗначениеЗаполнено(СозданныйДокумент) И Не БылВызовПечати И Не ЭтоМобильныйКлиент Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("НазадЗавершение0", ЭтаФорма), "Созданный документ не выводился на печать. Выйти в список заказов?", РежимДиалогаВопрос.ДаНет);
		Иначе
			НазадЗавершение0(Неопределено, Новый Структура);	
		КонецЕсли;
		
	Иначе
		НазадПродолжить();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазадЗавершение0(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		НазадПродолжить0();	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НазадЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		СохранитьВЧерновикНаСервере();
	КонецЕсли;
	
	НазадПродолжить();

КонецПроцедуры

&НаКлиенте
Процедура НазадПродолжить0()
	Если  СозданныйДокумент = Неопределено И ТЗ_ПланФакт.Итог("Сумма") <> 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("НазадЗавершение", ЭтаФорма), "Документ поступления не создан. Сохранить в черновик введенные данные и перейти в список заказов?", РежимДиалогаВопрос.ДаНет);
	Иначе
		НазадЗавершение(Неопределено, Новый Структура);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НазадПродолжить()
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСозданиеПоступления Тогда
		Попытка
			ОтключитьОбработчикОжидания("СохранитьВЧерновикНаСервере");
		Исключение
		КонецПопытки;
		
		СуммаИтогоДок = "";
		НомерТТН = "";
		НомерСчФ = "";
		ДатаТТН = Дата('00010101');
		ДатаСчФ = Дата('00010101');
		ОбрабатываемыйДокумент = Неопределено;
		Элементы.ДекорацияСохранено.Видимость = Ложь;
		Элементы.СоздатьПоступление.Доступность = Истина;
	КонецЕсли;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаЗаказы;
	//ОповеститьОбИзменении(ОбрабатываемыйДокумент);
	
	СозданныйДокумент = Неопределено;
	УстановитьВидимость();

КонецПроцедуры


&НаКлиенте
Процедура ТЗ_ПланФактПриИзменении(Элемент)
	
	РассчитатьСуммуПланФакта();
	ЗаполнитьПодвалТЗ();
	Элементы.ДекорацияСохранено.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьПоЦенеПриИзменении(Элемент)
	
	ШрифтЖирный = новый Шрифт(,, Истина);
	ШрифтПоУмолчанию = новый Шрифт();	
	Элементы.ТЗ_ПланФактЦенаЗаказ.Шрифт 		= ?(ПринятьПоЦене = 2, ШрифтЖирный, ШрифтПоУмолчанию);
	Элементы.ТЗ_ПланФактЦенаЗаказ.ШрифтЗаголовка= ?(ПринятьПоЦене = 2, ШрифтЖирный, ШрифтПоУмолчанию);
	Элементы.ТЗ_ПланФактЦенаДок.Шрифт 			= ?(ПринятьПоЦене = 3, ШрифтЖирный, ШрифтПоУмолчанию);
	Элементы.ТЗ_ПланФактЦенаДок.ШрифтЗаголовка	= ?(ПринятьПоЦене = 3, ШрифтЖирный, ШрифтПоУмолчанию);
	Элементы.ТЗ_ПланФактЦенаДокБезНДС.Шрифт 			= ?(ПринятьПоЦене = 3, ШрифтЖирный, ШрифтПоУмолчанию);
	Элементы.ТЗ_ПланФактЦенаДокБезНДС.ШрифтЗаголовка	= ?(ПринятьПоЦене = 3, ШрифтЖирный, ШрифтПоУмолчанию);
	
	ЦветАвто = новый Цвет();
	ЦветСерый = новый Цвет(230, 230, 230);
	Элементы.ТЗ_ПланФактЦенаДок.ЦветФона 			= ?(ПринятьПоЦене = 1, ЦветСерый, ЦветАвто);
	Элементы.ТЗ_ПланФактЦенаДок.ЦветФонаЗаголовка 	= ?(ПринятьПоЦене = 1, ЦветСерый, ЦветАвто);
	Элементы.ТЗ_ПланФактЦенаДок.ЦветФонаПодвала 	= ?(ПринятьПоЦене = 1, ЦветСерый, ЦветАвто);
	Элементы.ТЗ_ПланФактЦенаДокБезНДС.ЦветФона 			= ?(ПринятьПоЦене = 1, ЦветСерый, ЦветАвто);
	Элементы.ТЗ_ПланФактЦенаДокБезНДС.ЦветФонаЗаголовка = ?(ПринятьПоЦене = 1, ЦветСерый, ЦветАвто);
	Элементы.ТЗ_ПланФактЦенаДокБезНДС.ЦветФонаПодвала 	= ?(ПринятьПоЦене = 1, ЦветСерый, ЦветАвто);
	
	Элементы.ТЗ_ПланФактЦенаДок.ТолькоПросмотр 		 = (ПринятьПоЦене = 1);
	Элементы.ТЗ_ПланФактЦенаДокБезНДС.ТолькоПросмотр = (ПринятьПоЦене = 1);
	
	РассчитатьСуммуПланФакта();
	
КонецПроцедуры

#КонецОбласти

#Область ПодключениеИЗапросы


	
#КонецОбласти

#Область ЭтапСозданияПоступления

&НаКлиенте
Процедура ЗаполнитьПланФакт() Экспорт
	
	ЗаполнитьФакт();
	ЗаполнитьТаблицуПланФакт();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПланФакт()
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ДокументПлан", ОбрабатываемыйДокумент);
	Запрос.УстановитьПараметр("ВТ_Факт", Товары.Выгрузить());
	Запрос.Текст = "ВЫБРАТЬ
	               |	МаркетинговыеМероприятия.Предприятие,
	               |	МаркетинговыеМероприятия.Подразделение,
	               |	МаркетинговыеМероприятия.Номенклатура,
	               |	МАКСИМУМ(МаркетинговыеМероприятия.ЦенаПоступления) КАК ЦенаПоступления
	               |ПОМЕСТИТЬ ВТ_МаркетинговыеМероприятия
	               |ИЗ
	               |	РегистрСведений.МаркетинговыеМероприятия КАК МаркетинговыеМероприятия
	               |ГДЕ
	               |	МаркетинговыеМероприятия.ДатаПоставокНач <= &ТекДата
	               |	И МаркетинговыеМероприятия.ДатаПоставокКон >= НАЧАЛОПЕРИОДА(&ТекДата, ДЕНЬ)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	МаркетинговыеМероприятия.Предприятие,
	               |	МаркетинговыеМероприятия.Подразделение,
	               |	МаркетинговыеМероприятия.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(ВТ_Факт.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	               |	ВТ_Факт.Штрихкод КАК Штрихкод,
	               |	ВТ_Факт.КоличествоФакт КАК Количество
	               |ПОМЕСТИТЬ ВТ_Факт
	               |ИЗ
	               |	&ВТ_Факт КАК ВТ_Факт
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(ЗаказПоставщикуТабличнаяЧасть.Номенклатура, ВТ_Факт.Номенклатура) КАК Номенклатура,
	               |	ЗаказПоставщикуТабличнаяЧасть.Номенклатура.Код КАК Артикул,
	               |	ЗаказПоставщикуТабличнаяЧасть.Номенклатура.Наименование КАК Наименование,
	               |	ЗаказПоставщикуТабличнаяЧасть.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ЗаказПоставщикуТабличнаяЧасть.СтавкаНДС,
	               |	ЗаказПоставщикуТабличнаяЧасть.СтавкаНДС.Ставка КАК СтавкаНДССтавка,
	               |	ЕСТЬNULL(ЗаказПоставщикуТабличнаяЧасть.Количество, 0) КАК КоличествоЗаказ,
	               |	0 КАК КоличествоДок,
	               |	ЕСТЬNULL(ВТ_МаркетинговыеМероприятия.ЦенаПоступления, ЕСТЬNULL(ЗаказПоставщикуТабличнаяЧасть.Цена, 0)) КАК ЦенаЗаказ,
	               |	ЕСТЬNULL(ВТ_МаркетинговыеМероприятия.ЦенаПоступления, ЕСТЬNULL(ЗаказПоставщикуТабличнаяЧасть.Цена, 0)) КАК ЦенаДок,
	               |	ЕСТЬNULL(ВТ_Факт.Количество, 0) КАК КоличествоФакт,
	               |	ЕСТЬNULL(ВТ_Факт.Количество, 0) КАК КоличествоКОформлению,
	               |	ЕСТЬNULL(ВТ_Факт.Количество, 0) * ЕСТЬNULL(ЗаказПоставщикуТабличнаяЧасть.Цена, 0) КАК Сумма,
	               |	ЕСТЬNULL(ВТ_Факт.Количество, 0) * ЕСТЬNULL(ЗаказПоставщикуТабличнаяЧасть.Цена, 0) КАК СуммаДок,
	               |	ЕСТЬNULL(ВТ_Факт.Штрихкод, """") КАК Штрихкод,
	               |	ЗаказПоставщикуТабличнаяЧасть.Склад,
	               |	ВЫБОР
	               |		КОГДА ВТ_МаркетинговыеМероприятия.ЦенаПоступления ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ЕстьМаркетинговыеМероприятия,
	               |	ВЫБОР
	               |		КОГДА ЗаказПоставщикуТабличнаяЧасть.Номенклатура ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ЕстьВЗаказе
	               |ИЗ
	               |	Документ.ЗаказПоставщику.ТабличнаяЧасть КАК ЗаказПоставщикуТабличнаяЧасть
	               |		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Факт КАК ВТ_Факт
	               |		ПО ЗаказПоставщикуТабличнаяЧасть.Номенклатура = ВТ_Факт.Номенклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаркетинговыеМероприятия КАК ВТ_МаркетинговыеМероприятия
	               |		ПО ЗаказПоставщикуТабличнаяЧасть.Ссылка.Предприятие = ВТ_МаркетинговыеМероприятия.Предприятие
	               |			И ЗаказПоставщикуТабличнаяЧасть.Ссылка.Подразделение = ВТ_МаркетинговыеМероприятия.Подразделение
	               |			И ЗаказПоставщикуТабличнаяЧасть.Номенклатура = ВТ_МаркетинговыеМероприятия.Номенклатура
	               |ГДЕ
	               |	ЗаказПоставщикуТабличнаяЧасть.Ссылка = &ДокументПлан";
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	ТЗ_ПланФакт.Загрузить(ТаблицаРезультат);
	
	Для Каждого ТекСтрока Из ТЗ_ПланФакт Цикл  //пока так, потом в запросе рассчитать
		ТекСтрока.ЦенаДокБезНДС = ТекСтрока.ЦенаДок / (1 + ТекСтрока.СтавкаНДССтавка/100);
		ТекСтрока.СуммаДок 		= ТекСтрока.КоличествоДок * ТекСтрока.ЦенаДок;
		ТекСтрока.СуммаНДСДок 	= ТекСтрока.СуммаДок / ((100+ТекСтрока.СтавкаНДССтавка)/100) * (ТекСтрока.СтавкаНДССтавка/100);
	КонецЦикла;
	
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФакт()
	
	Товары.Очистить();
	//Загрузка факта с ТСД
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуВозврат()
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказПоставщикуТабличнаяЧасть.Ссылка,
	               |	ЗаказПоставщикуТабличнаяЧасть.Номенклатура,
	               |	ЗаказПоставщикуТабличнаяЧасть.Склад,
	               |	ЗаказПоставщикуТабличнаяЧасть.Количество КАК КоличествоЗаказ,
	               |	ЗаказПоставщикуТабличнаяЧасть.Количество КАК КоличествоКОформлению,
	               |	ЗаказПоставщикуТабличнаяЧасть.Цена,
	               |	ЗаказПоставщикуТабличнаяЧасть.Сумма,
	               |	ЗаказПоставщикуТабличнаяЧасть.Доставка,
	               |	ЗаказПоставщикуТабличнаяЧасть.СуммаДоставки,
	               |	ЗаказПоставщикуТабличнаяЧасть.ВидДоставки,
	               |	ЗаказПоставщикуТабличнаяЧасть.СуммаБезНДС,
	               |	ЗаказПоставщикуТабличнаяЧасть.СтавкаНДС,
	               |	ЗаказПоставщикуТабличнаяЧасть.СуммаНДС,
	               |	ЗаказПоставщикуТабличнаяЧасть.СтавкаНДС.Ставка КАК СтавкаНДССтавка
	               |ИЗ
	               |	Документ.ЗаказПоставщику.ТабличнаяЧасть КАК ЗаказПоставщикуТабличнаяЧасть
	               |ГДЕ
	               |	ЗаказПоставщикуТабличнаяЧасть.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ОбрабатываемыйДокумент);
	ТЗ_ТоварыВозврат.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПеремещение() 
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказПоставщикуТабличнаяЧасть.Ссылка,
	               |	ЗаказПоставщикуТабличнаяЧасть.Номенклатура,
	               |	СУММА(ЗаказПоставщикуТабличнаяЧасть.Количество) КАК Количество,
	               |	СУММА(ЗаказПоставщикуТабличнаяЧасть.Сумма) КАК Сумма
	               |ПОМЕСТИТЬ ВТ_Заказ
	               |ИЗ
	               |	Документ.ЗаказПоставщику.ТабличнаяЧасть КАК ЗаказПоставщикуТабличнаяЧасть
	               |ГДЕ
	               |	ЗаказПоставщикуТабличнаяЧасть.Ссылка = &Заказ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказПоставщикуТабличнаяЧасть.Ссылка,
	               |	ЗаказПоставщикуТабличнаяЧасть.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УЧ_ПеремещениеТоваровТабличнаяЧасть.Ссылка КАК Ссылка,
	               |	УЧ_ПеремещениеТоваровТабличнаяЧасть.Номенклатура КАК Номенклатура,
	               |	УЧ_ПеремещениеТоваровТабличнаяЧасть.Количество КАК Количество,
	               |	ВЫБОР
	               |		КОГДА УЧ_ПеремещениеТоваровТабличнаяЧасть.Количество <> 0
	               |			ТОГДА УЧ_ПеремещениеТоваровТабличнаяЧасть.Сумма / УЧ_ПеремещениеТоваровТабличнаяЧасть.Количество
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Цена,
	               |	УЧ_ПеремещениеТоваровТабличнаяЧасть.Сумма КАК Сумма,
	               |	УЧ_ПеремещениеТоваровТабличнаяЧасть.СчетУчетаБУ КАК СчетУчетаБУ,
	               |	УЧ_ПеремещениеТоваровТабличнаяЧасть.НовыйСчетУчетаБУ КАК НовыйСчетУчетаБУ
	               |ПОМЕСТИТЬ ВТ_ПеремещениеИз
	               |ИЗ
	               |	Документ.УЧ_ПеремещениеТоваров.ТабличнаяЧасть КАК УЧ_ПеремещениеТоваровТабличнаяЧасть
	               |ГДЕ
	               |	УЧ_ПеремещениеТоваровТабличнаяЧасть.Ссылка.ДокОснование = &Заказ
	               |	И НЕ УЧ_ПеремещениеТоваровТабличнаяЧасть.Ссылка.ПометкаУдаления
	               |	И УЧ_ПеремещениеТоваровТабличнаяЧасть.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыПеремещений.ПеремещениеНаОбособленноеПодразделение)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ПеремещениеИз.Номенклатура,
	               |	ВТ_Заказ.Количество КАК КоличествоЗаказ,
	               |	ВТ_ПеремещениеИз.Количество КАК КоличествоОтправлено,
	               |	ВТ_ПеремещениеИз.Количество КАК КоличествоКОформлению,
	               |	ВТ_ПеремещениеИз.Цена,
	               |	ВТ_ПеремещениеИз.Количество * ВТ_ПеремещениеИз.Цена КАК Сумма,
	               |	ВТ_ПеремещениеИз.СчетУчетаБУ,
	               |	ВТ_ПеремещениеИз.НовыйСчетУчетаБУ
	               |ИЗ
	               |	ВТ_Заказ КАК ВТ_Заказ
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПеремещениеИз КАК ВТ_ПеремещениеИз
	               |		ПО ВТ_Заказ.Номенклатура = ВТ_ПеремещениеИз.Номенклатура";	
	Запрос.УстановитьПараметр("Заказ", ОбрабатываемыйДокумент);
	ТЗ_Перемещение.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступление(Команда)
	
	Если ТЗ_ПланФакт.Итог("Сумма") = 0 Тогда
		Сообщить("Таблица не заполнена");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СозданныйДокумент) Тогда
		Сообщить("Документ поступления уже был создан");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НомерТТН) Или Не ЗначениеЗаполнено(ДатаТТН) Тогда
		Сообщить("Заполните номер/сумму входящего документа");
		Возврат;
	КонецЕсли;
	
	Если Не (Год(ТекущаяДата()) = Год(ДатаТТН) + 1 Или Год(ТекущаяДата()) = Год(ДатаТТН)) Тогда
		СообщениеПользователю = новый СообщениеПользователю;
		СообщениеПользователю.Поле = "ДатаТТН";
		СообщениеПользователю.Текст = "Некорректный год";
		СообщениеПользователю.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НомерСчФ) Тогда
		Ответ = Вопрос("Не заполнена счет-фактура. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ТЗ_ПланФакт Цикл
		Если ТекСтрока.КоличествоКОформлению = 0 Тогда
			Ответ = Вопрос("отсутствуют некоторые позиции из заказа, Продолжить?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат;
			Иначе 
				Прервать;
			КонецЕсли;
		КонецЕсли;
		Если ?(ПринятьПоЦене = 3, ТекСтрока.ЦенаДок, ТекСтрока.ЦенаЗаказ) = 0 Или Не ТекСтрока.ЕстьВЗаказе Тогда
			Сообщить("В строке с номенклатурой " + ТекСтрока.Номенклатура + " не заполнена цена!");
			Возврат;
		КонецЕсли;
		Если ТекСтрока.КоличествоДок = 0 И ТекСтрока.КоличествоКОформлению <> 0 Тогда
			Сообщить("В строке с номенклатурой " + ТекСтрока.Номенклатура + " не заполнено количество по ТТН!");
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	СоздатьПоступлениеНаСервере();
	
	//ЭтапСозданиеПоступления = Ложь;
	УстановитьВидимость();
	
	Оповестить("ЗаказОбработан");
	
	Если ЭтоМобильныйКлиент Тогда
		Предупреждение("Документ " + СозданныйДокумент + " успешно создан!");
		Назад(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПоступлениеНаСервере()
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ОбрабатываемыйДокумент);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	*
	               |ИЗ
	               |	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	               |ГДЕ
	               |	ЗаказПоставщику.Ссылка = &Ссылка";
	РеквизитыЗаказа = Запрос.Выполнить().Выбрать();
	Если РеквизитыЗаказа.Следующий() = Ложь Тогда
		Сообщить("Не найден заказ");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбрабатываемыйДокумент.Организация) Тогда
		
		ПоступлениеОбъект = Документы.УЧ_ПоступлениеТоваров.СоздатьДокумент();
		ПоступлениеОбъект.Заполнить(ОбрабатываемыйДокумент);
		ПоступлениеОбъект.Дата = ДатаТТН;
		//ПоступлениеОбъект.Валюта = УЧ_Сервер.НациональнаяВалюта();
		//ПоступлениеОбъект.ДокОснование = ОбрабатываемыйДокумент;
		ПоступлениеОбъект.ВидОперации = Перечисления.ВидыПоступлений.Поступление;
		//ПоступлениеОбъект.СчетКонтрагента = ПланыСчетов.Учетный.Счет6001();
		ПоступлениеОбъект.НомерВходящегоДокумента = НомерТТН;
		ПоступлениеОбъект.НомерВходящегоСчФ 	  = НомерСчФ;
		ПоступлениеОбъект.ДатаВходящегоДокумента  = ДатаТТН;
		ПоступлениеОбъект.ДатаВходящегоСчФ		  = ДатаСчФ;
		//ПоступлениеОбъект.СуммаВходящегоДокумента = СуммаИтогоДок;
		//ПоступлениеОбъект.СуммаВключаетНДС = Истина;
		//ПоступлениеОбъект.ЦенаВключаетНДС = Истина;
		//ПоступлениеОбъект.УчитыватьНДС = Истина;
		//ЗаполнитьЗначенияСвойств(ПоступлениеОбъект, РеквизитыЗаказа, "Предприятие, Организация, Подразделение, Контрагент, Договор, Склад");
		
		ПоступлениеОбъект.ТабличнаяЧасть.Очистить();
		ПоступлениеОбъект.СерииНоменклатуры.Очистить();
		
		Для Каждого ТекСтрока Из ТЗ_ПланФакт Цикл
			Если ТекСтрока.КоличествоДок = 0 И ТекСтрока.КоличествоКОформлению = 0 Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрокаТЧ = ПоступлениеОбъект.ТабличнаяЧасть.Добавить();
			НоваяСтрокаТЧ.Склад 		= ПоступлениеОбъект.Склад;
			НоваяСтрокаТЧ.Номенклатура 	= ТекСтрока.Номенклатура;
			НоваяСтрокаТЧ.СрокГодности 	= ТекСтрока.СрокГодности;
			НоваяСтрокаТЧ.КоличествоПоПервичнымДокументам 	= ТекСтрока.КоличествоДок;
			НоваяСтрокаТЧ.Количество 						= ТекСтрока.КоличествоКОформлению;
			НоваяСтрокаТЧ.Цена 								= ?(ПринятьПоЦене = 3, ТекСтрока.ЦенаДок, ТекСтрока.ЦенаЗаказ);
			НоваяСтрокаТЧ.СтавкаНДС 						= сабОбщегоНазначенияБУХПовтИсп.СоотвВидовСтавокНДСБУХУУ().Получить(НоваяСтрокаТЧ.Номенклатура.ВидСтавкиНДС);
			НоваяСтрокаТЧ.Сумма 							= НоваяСтрокаТЧ.Количество * НоваяСтрокаТЧ.Цена;
			НоваяСтрокаТЧ.СуммаПоПервичнымДокументам		= ТекСтрока.СуммаДок;
			НоваяСтрокаТЧ.СуммаНДС							= ТекСтрока.Сумма / ((100+ТекСтрока.СтавкаНДССтавка)/100) * (ТекСтрока.СтавкаНДССтавка/100);
			НоваяСтрокаТЧ.СуммаНДСПоПервичнымДокументам		= ТекСтрока.СуммаНДСДок;
			
			Если ЗначениеЗаполнено(ТекСтрока.ЗначениеШтрихкода) И НЕ ПоступлениеОбъект.ШтрихкодыУпаковок.НайтиСтроки(Новый Структура("ЗначениеШтрихкода", ТекСтрока.ЗначениеШтрихкода)).Количество() Тогда
				НоваяСтрокаШК = ПоступлениеОбъект.ШтрихкодыУпаковок.Добавить();
				НоваяСтрокаШК.ЗначениеШтрихкода = ТекСтрока.ЗначениеШтрихкода;	
			КонецЕсли;
			
			Если Не ТекСтрока.СрокГодности = Дата('00010101') Тогда
				НоваяСтрокаТЧ.СерияНоменклатуры = Справочники.СерииНоменклатуры.СоздатьПолучитьСерию(НоваяСтрокаТЧ.Номенклатура, ТекСтрока.СрокГодности);	
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого ТекСтрокаСерия Из СерииНоменклатуры Цикл
			НоваяСтрокаТЧ = ПоступлениеОбъект.СерииНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, ТекСтрокаСерия);
			НоваяСтрокаТЧ.СерияНоменклатуры = Справочники.СерииНоменклатуры.СоздатьПолучитьСерию(ТекСтрокаСерия.Номенклатура, ТекСтрокаСерия.СерияНоменклатуры);	
		КонецЦикла;
		
	Иначе
		ПоступлениеОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		ПоступлениеОбъект.Заполнить(ОбрабатываемыйДокумент);
		ПоступлениеОбъект.НомерВходящегоДокумента = НомерТТН;
		ПоступлениеОбъект.ДатаВходящегоДокумента  = ДатаТТН;
		ПоступлениеОбъект.ЭтоУниверсальныйДокумент	= РеквизитыСчФСовпадают;
		
		ПоступлениеОбъект.Товары.Очистить();
		
		Для Каждого ТекСтрока Из ТЗ_ПланФакт Цикл
			Если ТекСтрока.КоличествоДок = 0 И ТекСтрока.КоличествоКОформлению = 0 Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрокаТЧ = ПоступлениеОбъект.Товары.Добавить();
			//НоваяСтрокаТЧ.Склад 		= ПоступлениеОбъект.Склад;
			НоваяСтрокаТЧ.Номенклатура 	= ТекСтрока.Номенклатура;
			//НоваяСтрокаТЧ.СрокГодности 	= ТекСтрока.СрокГодности;
			//НоваяСтрокаТЧ.КоличествоПоПервичнымДокументам 	= ТекСтрока.КоличествоДок;
			НоваяСтрокаТЧ.Количество 						= ТекСтрока.КоличествоКОформлению;
			НоваяСтрокаТЧ.Цена 								= ?(ПринятьПоЦене = 3, ТекСтрока.ЦенаДок, ТекСтрока.ЦенаЗаказ);
			НоваяСтрокаТЧ.СтавкаНДС 						= сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСУУБУХ().Получить(ТекСтрока.СтавкаНДС);
			НоваяСтрокаТЧ.Сумма 							= НоваяСтрокаТЧ.Количество * НоваяСтрокаТЧ.Цена;
			//НоваяСтрокаТЧ.СуммаПоПервичнымДокументам		= ТекСтрока.СуммаДок;
			НоваяСтрокаТЧ.СуммаНДС							= ТекСтрока.Сумма / ((100+ТекСтрока.СтавкаНДССтавка)/100) * (ТекСтрока.СтавкаНДССтавка/100);
			//НоваяСтрокаТЧ.СуммаНДСПоПервичнымДокументам		= ТекСтрока.СуммаНДСДок;
			
			Если ЗначениеЗаполнено(ТекСтрока.ЗначениеШтрихкода) И НЕ ПоступлениеОбъект.ШтрихкодыУпаковок.НайтиСтроки(Новый Структура("ЗначениеШтрихкода", ТекСтрока.ЗначениеШтрихкода)).Количество() Тогда
				НоваяСтрокаШК = ПоступлениеОбъект.ШтрихкодыУпаковок.Добавить();
				НоваяСтрокаШК.ЗначениеШтрихкода = ТекСтрока.ЗначениеШтрихкода;	
			КонецЕсли;
			
			Если Не ТекСтрока.СрокГодности = Дата('00010101') Тогда
				НоваяСтрокаТЧ.СерияНоменклатуры = Справочники.СерииНоменклатуры.СоздатьПолучитьСерию(НоваяСтрокаТЧ.Номенклатура, ТекСтрока.СрокГодности);	
			КонецЕсли;
			
		КонецЦикла;
		
		НовОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(НовОбъект, ПоступлениеОбъект,,"Дата, Номер");
		НовОбъект.ВидОперации = Перечисления.ВидыПоступлений.Поступление;
		НовОбъект.Заказ = ОбрабатываемыйДокумент;
		НовОбъект.СуммаВключаетНДС = Истина;
		//НовОбъект.ДокументБезНДС = Ложь;
		Для каждого ТекСтрока Из ПоступлениеОбъект.Товары Цикл
			НоваяСтрока = НовОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЦикла;
		
		ЗаполнениеДокументов.Заполнить(НовОбъект, ПоступлениеОбъект, Истина);
		
		ПоступлениеОбъект.Товары.Очистить();
		
		МассивНоменклатуры = Новый Массив;
		
		Для каждого ТекСтрока Из НовОбъект.Товары Цикл
			НоваяСтрока = ПоступлениеОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			МассивНоменклатуры.Добавить(НоваяСтрока.Номенклатура);
		КонецЦикла;
		
		Для каждого ТекСтрокаСерия Из СерииНоменклатуры Цикл
			НоваяСтрокаТЧ = ПоступлениеОбъект.СерииНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, ТекСтрокаСерия);
			НоваяСтрокаТЧ.СерияНоменклатуры = Справочники.СерииНоменклатуры.СоздатьПолучитьСерию(ТекСтрокаСерия.Номенклатура, ТекСтрокаСерия.СерияНоменклатуры);	
		КонецЦикла;

	КонецЕсли;

	//Попытка //на всякий случай
	//	ДопРеквизит = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Создан обработкой заказов");
	//	Если ЗначениеЗаполнено(ДопРеквизит) Тогда
	//		НоваяСтрока = ПоступлениеОбъект.ДополнительныеРеквизиты.Добавить();
	//		НоваяСтрока.Свойство = ДопРеквизит;
	//		НоваяСтрока.Значение = Истина;
	//	КонецЕсли;
	//Исключение
	//КонецПопытки;
	
	Попытка
		ПоступлениеОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Сообщить("Не удалось провести поступление! " + ОписаниеОшибки());
		//ПоступлениеОбъект.Записать(РежимЗаписиДокумента.Запись);
		Возврат;
	КонецПопытки;
	//Сообщить("Создан документ " + ПоступлениеОбъект.Ссылка);
	СозданныйДокумент = ПоступлениеОбъект.Ссылка;
	
	//создаем сч/ф
	Если НЕ РеквизитыСчФСовпадают Тогда
		НовыйСчФ = Документы.СчетФактураПолученный.СоздатьДокумент();
		НовыйСчФ.Заполнить(СозданныйДокумент);
		НовыйСчФ.НомерВходящегоДокумента = НомерСчФ;
		НовыйСчФ.ДатаВходящегоДокумента = ДатаСчФ;
		НовыйСчФ.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;

	//удаляем черновик
	УдалитьИзЧерновиковНаСервере();
		
	//меняем статус заказа
	//Если Не ОбрабатываемыйДокумент.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт Тогда		
	//	ЗаказОб = ОбрабатываемыйДокумент.ПолучитьОбъект();
	//	ЗаказОб.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт;
	//	ЗаказОб.Записать(РежимЗаписиДокумента.Запись);
	//КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.АвтосохранениеДанных.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	МенеджерЗаписи.Объект		= ОбрабатываемыйДокумент;
	МенеджерЗаписи.Прочитать();
	МенеджерЗаписи.Удалить();
	
	Элементы.СоздатьПоступление.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВозврат(Команда)

	Если ТЗ_ТоварыВозврат.Итог("Сумма") = 0 Тогда
		Предупреждение("Таблица не заполнена");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СозданныйДокумент) Тогда
		Сообщить("Документ поступления уже был создан");
		Возврат;
	КонецЕсли;
	
	СоздатьВозвратНаСервере();
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьВозвратНаСервере()
	
	ВозвратОбъект = Документы.УЧ_ВозвратТоваровПоставщику.СоздатьДокумент();
	
	ЗаполнитьЗначенияСвойств(ВозвратОбъект, ОбрабатываемыйДокумент, , "Дата, Номер");
	ВозвратОбъект.Дата = ТекущаяДата();
	ВозвратОбъект.СчетКонтрагента = ПланыСчетов.Учетный.ПоставщикиОсн;
	ВозвратОбъект.ДокОснование = ОбрабатываемыйДокумент;
	Для Каждого ТекСтрока Из ТЗ_ТоварыВозврат Цикл
		СтрокаТЧ = ВозвратОбъект.Товары.Добавить();
		СтрокаТЧ.Количество = ТекСтрока.КоличествоКОформлению;
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, ТекСтрока);
	КонецЦикла;	
	
	Попытка
		ВозвратОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Сообщить("Не удалось провести возврат! " + ОписаниеОшибки());
		//ВозвратОбъект.Записать(РежимЗаписиДокумента.Запись);
		Возврат;
	КонецПопытки;
	Сообщить("Создан документ " + ВозвратОбъект.Ссылка);
	СозданныйДокумент = ВозвратОбъект.Ссылка;
		
	//меняем статус заказа
	Если Не ОбрабатываемыйДокумент.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт Тогда		
		ЗаказОб = ОбрабатываемыйДокумент.ПолучитьОбъект();
		ЗаказОб.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт;
		ЗаказОб.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПеремещение(Команда)
	
	Если ТЗ_Перемещение.Итог("КоличествоКОформлению") = 0 Тогда
		Предупреждение("Таблица не заполнена");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СозданныйДокумент) Тогда
		Сообщить("Документ поступления уже был создан");
		Возврат;
	КонецЕсли;
	
	СоздатьПеремещениеНаСервере();
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПеремещениеНаСервере()
	
	ПеремещениеИз = ПолучитьПеремещениеНаПодразделение(ОбрабатываемыйДокумент);
	Если ПеремещениеИз = Неопределено Тогда
		Сообщить("Не найдена отгрузка по этому заказу");
		Возврат;
	КонецЕсли;
	
	ПеремещениеОбъект = Документы.УЧ_ПеремещениеТоваров.СоздатьДокумент();
	ПеремещениеОбъект.Дата = ТекущаяДата();
	ПеремещениеОбъект.ВидОперации = Перечисления.ВидыПеремещений.ПоступлениеСОбособленногоПодразделения;
	ПеремещениеОбъект.ДокОснование = ПеремещениеИз;

	ЗаполнитьЗначенияСвойств(ПеремещениеОбъект, ПеремещениеИз, ,"Дата, Номер, Комментарий, ДокОснование, ВидОперации");
	
	Для Каждого ТекСтрока Из ТЗ_Перемещение Цикл
		НоваяСтрока = ПеремещениеОбъект.ТабличнаяЧасть.Добавить();
		НоваяСтрока.Количество 		= ТекСтрока.КоличествоКОформлению;
		НоваяСтрока.Номенклатура	= ТекСтрока.Номенклатура;
		НоваяСтрока.Сумма 			= ТекСтрока.Сумма;
		НоваяСтрока.СчетУчетаБУ 	 = ТекСтрока.НовыйСчетУчетаБУ;
		НоваяСтрока.НовыйСчетУчетаБУ = ТекСтрока.СчетУчетаБУ;
	КонецЦикла;
	
	Попытка
		ПеремещениеОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Сообщить("Не удалось провести перемещение! " + ОписаниеОшибки());
		//ПеремещениеОбъект.Записать(РежимЗаписиДокумента.Запись);
		Возврат;
	КонецПопытки;
	Сообщить("Создан документ " + ПеремещениеОбъект.Ссылка);
	СозданныйДокумент = ПеремещениеОбъект.Ссылка;
		
	//меняем статус заказа
	Если Не ОбрабатываемыйДокумент.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт Тогда		
		ЗаказОб = ОбрабатываемыйДокумент.ПолучитьОбъект();
		ЗаказОб.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт;
		ЗаказОб.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
КонецПроцедуры

&НасервереБезКонтекста
Функция ПолучитьПеремещениеНаПодразделение(Заказ)
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Заказ);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ЗаказПоставщику.Ссылка КАК ЗаказСсылка,
	               |	УЧ_ПеремещениеТоваров.Ссылка КАК ПеремещениеСсылка
	               |ИЗ
	               |	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УЧ_ПеремещениеТоваров КАК УЧ_ПеремещениеТоваров
	               |		ПО ЗаказПоставщику.Ссылка = УЧ_ПеремещениеТоваров.ДокОснование
	               |ГДЕ
	               |	ЗаказПоставщику.Ссылка = &Ссылка
	               |	И НЕ УЧ_ПеремещениеТоваров.ПометкаУдаления
	               |	И УЧ_ПеремещениеТоваров.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыПеремещений.ПеремещениеНаОбособленноеПодразделение)";

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ПеремещениеСсылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийТЧ

&НаКлиенте
Процедура Скан_НоменклатураПриИзменении(Элемент)
	
	Если Скан_Количество = 0 Тогда
		Возврат;
	КонецЕсли;

	Если Скан_РежимРучногоВводаКоличества Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.Скан_Количество;
	Иначе
		ЭтаФорма.ТекущийЭлемент = Элементы.Скан_Штрихкод;
		Если ПроверкаНаличияСканНоменклатурыВЗаказе() Тогда
			ДобавитьСканНоменклатуруВТовары();
			РассчитатьСуммуПланФакта();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Скан_КоличествоПриИзменении(Элемент)
	
	Если Скан_Количество > 1000000 Тогда
		Скан_Количество = 0;
		Предупреждение("Слишком большое количество, введите еще раз");
		ПодключитьОбработчикОжидания("АктивироватьПолеСканКоличество", 0.1, Истина);		
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Скан_Штрихкод) И ПроверкаНаличияСканНоменклатурыВЗаказе() Тогда
		ДобавитьСканНоменклатуруВТовары();
		РассчитатьСуммуПланФакта();
		
		СтрокиШтрихкод = ТЗ_ПланФакт.НайтиСтроки(новый Структура("Штрихкод", Скан_Штрихкод));
		Если НЕ ЭтоМобильныйКлиент И СтрокиШтрихкод.Количество() > 0 Тогда
			Элементы.ТЗ_ПланФакт.ТекущаяСтрока = СтрокиШтрихкод[0].ПолучитьИдентификатор();
		КонецЕсли;
		ЗаполнитьПодвалТЗ();
		
		Скан_Штрихкод = "";
		Скан_Номенклатура = Неопределено;
		Скан_Количество	= 0;
		ДатаСерии = Дата('00010101');
		//Если ЭтоМобильныйКлиент Тогда
		//	Элементы.Скан_Номенклатура.Видимость = Ложь;
		//Иначе
			Элементы.Скан_Номенклатура.ТолькоПросмотр = Истина;		
		//КонецЕсли;
		ЭтаФорма.ТекущийЭлемент = Элементы.Скан_Штрихкод;

	КонецЕсли;
			
КонецПроцедуры

//&НаКлиенте
//Процедура ДатаСерииПриИзменении(Элемент)
//	
//	Если ЗначениеЗаполнено(Скан_Штрихкод) И ПроверкаНаличияСканНоменклатурыВЗаказе() Тогда
//		ДобавитьСканНоменклатуруВТовары();
//		РассчитатьСуммуПланФакта();
//		
//		СтрокиШтрихкод = ТЗ_ПланФакт.НайтиСтроки(новый Структура("Штрихкод", Скан_Штрихкод));
//		Если СтрокиШтрихкод.Количество() > 0 Тогда
//			Элементы.ТЗ_ПланФакт.ТекущаяСтрока = СтрокиШтрихкод[0].ПолучитьИдентификатор();
//		КонецЕсли;
//		ЭтаФорма.ТекущийЭлемент = Элементы.Скан_Штрихкод;
//		ЗаполнитьПодвалТЗ();
//		
//		Скан_Штрихкод = "";
//		Скан_Номенклатура = Неопределено;
//		Скан_Количество	= 0;
//		ДатаСерии = Дата('00010101');
//		//Если ЭтоМобильныйКлиент Тогда
//		//	Элементы.Скан_Номенклатура.Видимость = Ложь;
//		//Иначе
//			Элементы.Скан_Номенклатура.ТолькоПросмотр = Истина;		
//		//КонецЕсли;
//		
//	КонецЕсли;
//	
//КонецПроцедуры

&НаКлиенте
Процедура Скан_ВводКоличестваПриИзменении(Элемент)
	
	//Элементы.Скан_Количество.Видимость = Скан_РежимРучногоВводаКоличества;
	Если Скан_РежимРучногоВводаКоличества Тогда
		Элементы.Скан_Количество.Доступность = Истина;
		Скан_Количество = 0;
	Иначе
		Элементы.Скан_Количество.Доступность = Ложь;
		Скан_Количество = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Скан_ШтрихкодПриИзменении(Элемент)
	
	Если ЭтоМобильныйКлиент Тогда
		Элементы.НомерТТН.ПропускатьПриВводе = Истина;
		Элементы.ДатаТТН.ПропускатьПриВводе = Истина;
		Элементы.ТЗ_ПланФакт.ПропускатьПриВводе = Истина;
	КонецЕсли;
	
	Скан_ШтрихкодПервичный = Скан_Штрихкод;
	
	СтруктураНоменклатура = сабОперОбщегоНазначения.ПодобратНоменклатуруПоШК(Скан_Штрихкод);
	Если ТипЗнч(СтруктураНоменклатура) = Тип("Структура") Тогда
		Скан_Номенклатура = СтруктураНоменклатура.Номенклатура;
		Скан_Количество   = СтруктураНоменклатура.Количество;
	Иначе
		Скан_Номенклатура = СтруктураНоменклатура;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Скан_Номенклатура) Тогда
		//Если ЭтоМобильныйКлиент Тогда
		//	Элементы.Скан_Номенклатура.Видимость = Ложь;
		//Иначе
			Элементы.Скан_Номенклатура.ТолькоПросмотр = Истина;		
		//КонецЕсли;
		
		Если Скан_РежимРучногоВводаКоличества Тогда
			Если НЕ ЭтоМобильныйКлиент Тогда
				Если ИспользоватьСерийныйУчет Тогда
					ЭтаФорма.ТекущийЭлемент = Элементы.ДатаСерии;
				Иначе
					ЭтаФорма.ТекущийЭлемент = Элементы.Скан_Количество;
				КонецЕсли;
			КонецЕсли;			
		Иначе
			ПодключитьОбработчикОжидания("АктивироватьПолеСканШтрихкод", 0.1, Истина);		
			Если ПроверкаНаличияСканНоменклатурыВЗаказе() Тогда
				ДобавитьСканНоменклатуруВТовары();
				РассчитатьСуммуПланФакта();
				СтрокиШтрихкод = ТЗ_ПланФакт.НайтиСтроки(новый Структура("Штрихкод", Скан_Штрихкод));
				Если НЕ ЭтоМобильныйКлиент И СтрокиШтрихкод.Количество() > 0 Тогда
					Элементы.ТЗ_ПланФакт.ТекущаяСтрока = СтрокиШтрихкод[0].ПолучитьИдентификатор();
				КонецЕсли;
				ЭтаФорма.ТекущийЭлемент = Элементы.Скан_Штрихкод;
				ЗаполнитьПодвалТЗ();
				
				Скан_Штрихкод = "";
				Скан_Номенклатура = Неопределено;
				Скан_Количество	= 0;
			КонецЕсли;
		КонецЕсли;
		
		//Элементы.Скан_Номенклатура.ТолькоПросмотр = Истина;
		СтрокиНоменклатура = ТЗ_ПланФакт.НайтиСтроки(новый Структура("Номенклатура", Скан_Номенклатура));
		Если НЕ ЭтоМобильныйКлиент И СтрокиНоменклатура.Количество() > 0 Тогда
			Элементы.ТЗ_ПланФакт.ТекущаяСтрока = СтрокиНоменклатура[0].ПолучитьИдентификатор();
		КонецЕсли;
	Иначе 
		Сообщить("Не найдена номенклатура по штрихкоду " + Скан_Штрихкод);
		//Элементы.Скан_Номенклатура.ТолькоПросмотр = Ложь;
		//Если ЭтоМобильныйКлиент Тогда
		//	Элементы.Скан_Номенклатура.Видимость = Истина;
		//КонецЕсли;
		Элементы.Скан_Номенклатура.ТолькоПросмотр = Ложь;		

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьПолеСканКоличество()
	ЭтаФорма.ТекущийЭлемент = Элементы.Скан_Количество;		
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьПолеСканШтрихкод()
	ЭтаФорма.ТекущийЭлемент = Элементы.Скан_Штрихкод;		
КонецПроцедуры

&НаКлиенте
Процедура РежимСканирования(Команда)
	
	Элементы.ГруппаСкан.Видимость = Не Элементы.ГруппаСкан.Видимость;
	Если Элементы.ГруппаСкан.Видимость Тогда 
		ЭтаФорма.ТекущийЭлемент = Элементы.Скан_Штрихкод;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВводКоличества(Команда)
	
	ЗаполнитьТаблицуПланФакт();
	РассчитатьСуммуПланФакта();
	Элементы.ГруппаСкан.Видимость = Ложь;
	
КонецПроцедуры	

&НаКлиенте
Процедура ДатаПоступленияЗаказаПриИзменении(Элемент)

	СписокЗаказы.Параметры.УстановитьЗначениеПараметра("ДатаНачала", НачалоДня(ДатаНачала));
	СписокЗаказы.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", КонецДня(ДатаОкончания));
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ПланФактКоличествоЦенаДокПриИзменении(Элемент)
	
	РассчитатьСуммуДокПланФакта();
	ЗаполнитьПодвалТЗ();
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ПланФактЦенаДокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТЗ_ПланФакт.ТекущиеДанные;
	ТекущиеДанные.ЦенаДокБезНДС = ТекущиеДанные.ЦенаДок / (1 + ТекущиеДанные.СтавкаНДССтавка/100);
	
	РассчитатьСуммуДокПланФакта();
	ЗаполнитьПодвалТЗ();
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ПланФактЦенаДокБезНДСПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ТЗ_ПланФакт.ТекущиеДанные;
	ТекущиеДанные.ЦенаДок = ТекущиеДанные.ЦенаДокБезНДС * (1 + ТекущиеДанные.СтавкаНДССтавка/100);
	
	РассчитатьСуммуДокПланФакта();
	ЗаполнитьПодвалТЗ();
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ПланФактСуммаДокПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ТЗ_ПланФакт.ТекущиеДанные;
	ТекущиеДанные.ЦенаДок = ?(ТекущиеДанные.КоличествоДок = 0, 0, ТекущиеДанные.СуммаДок / ТекущиеДанные.КоличествоДок);
	ТекущиеДанные.ЦенаДокБезНДС = ТекущиеДанные.ЦенаДок / (1 + ТекущиеДанные.СтавкаНДССтавка/100);
	ТекущиеДанные.СуммаНДСДок 	= ТекущиеДанные.СуммаДок / ((100+ТекущиеДанные.СтавкаНДССтавка)/100) * (ТекущиеДанные.СтавкаНДССтавка/100);
	
	ЗаполнитьПодвалТЗ();
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ТоварыВозвратКоличествоКОформлениюПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ТЗ_ТоварыВозврат.ТекущиеДанные;
	ТекущиеДанные.Сумма 	= ТекущиеДанные.КоличествоКОформлению * ТекущиеДанные.Цена;
	ТекущиеДанные.СуммаНДС 	= ТекущиеДанные.Сумма / ((100+ТекущиеДанные.СтавкаНДССтавка)/100) * (ТекущиеДанные.СтавкаНДССтавка/100);
	ТекущиеДанные.СуммаБезНДС = ТекущиеДанные.Сумма - ТекущиеДанные.СуммаНДС;
	
КонецПроцедуры


&НаКлиенте
Процедура РассчитатьСуммуПланФакта()
	
	КолвоПозиций = 0;
	Для Каждого ТекСтрока Из ТЗ_ПланФакт Цикл
		ТекСтрока.Сумма = ТекСтрока.КоличествоКОформлению * ?(ПринятьПоЦене = 3, ТекСтрока.ЦенаДок, ТекСтрока.ЦенаЗаказ);
		ТекСтрока.СуммаНДСДок 	= ТекСтрока.СуммаДок / ((100+ТекСтрока.СтавкаНДССтавка)/100) * (ТекСтрока.СтавкаНДССтавка/100);
		КолвоПозиций = КолвоПозиций + ?(ТекСтрока.КоличествоКОформлению = 0, 0, 1);
	КонецЦикла;
	
	ЗаполнитьПодвалТЗ();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуДокПланФакта(ТекущиеДанные = Неопределено)
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные = Элементы.ТЗ_ПланФакт.ТекущиеДанные;
	КонецЕсли;
	
	ТекущиеДанные.СуммаДок 		= ТекущиеДанные.КоличествоДок * ТекущиеДанные.ЦенаДок;
	ТекущиеДанные.СуммаНДСДок 	= ТекущиеДанные.СуммаДок / ((100+ТекущиеДанные.СтавкаНДССтавка)/100) * (ТекущиеДанные.СтавкаНДССтавка/100);
	
	ЗаполнитьПодвалТЗ();
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодвалТЗ()
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСозданиеПоступления Тогда
		КолвоПозиций = 0;
		Для Каждого ТекСтрока Из ТЗ_ПланФакт Цикл
			КолвоПозиций = КолвоПозиций + ?(ТекСтрока.КоличествоКОформлению = 0, 0, 1);
		КонецЦикла;

		ТЗ_ПланФактНоменклатураТекстПодвала 	= "Заказано: " + ТЗ_ПланФакт.Количество() + " Принято: " + КолвоПозиций;
														  
		ТЗ_ПланФактКоличествоКОформлениюТекстПодвала = Формат(ТЗ_ПланФакт.Итог("КоличествоКОформлению"), "ЧДЦ=2");
		ТЗ_ПланФактКоличествоЗаказТекстПодвала 	= Формат(ТЗ_ПланФакт.Итог("КоличествоЗаказ"), "ЧДЦ=2");
		ТЗ_ПланФактКоличествоДокТекстПодвала 		= Формат(ТЗ_ПланФакт.Итог("КоличествоДок"), "ЧДЦ=2");
														  
		ТЗ_ПланФактСуммаТекстПодвала		 = Формат(ТЗ_ПланФакт.Итог("Сумма"), "ЧДЦ=2");  
		ТЗ_ПланФактСуммаДокТекстПодвала 	 = Формат(ТЗ_ПланФакт.Итог("СуммаДок"), "ЧДЦ=2");
		ТЗ_ПланФактСуммаНДСДокТекстПодвала = Формат(ТЗ_ПланФакт.Итог("СуммаНДСДок"), "ЧДЦ=2");
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСозданиеВозврата Тогда
		Элементы.ТЗ_ТоварыВозвратКоличествоЗаказ.ТекстПодвала 		= Формат(ТЗ_ТоварыВозврат.Итог("КоличествоЗаказ"));
		Элементы.ТЗ_ТоварыВозвратКоличествоКОформлению.ТекстПодвала = Формат(ТЗ_ТоварыВозврат.Итог("КоличествоКОформлению"));
		Элементы.ТЗ_ТоварыВозвратСумма.ТекстПодвала 				= Формат(ТЗ_ТоварыВозврат.Итог("Сумма"));
		Элементы.ТЗ_ТоварыВозвратСуммаНДС.ТекстПодвала 				= Формат(ТЗ_ТоварыВозврат.Итог("СуммаНДС"));
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСозданиеПеремещения Тогда
		Элементы.ТЗ_ПеремещениеКоличествоЗаказ.ТекстПодвала 		= Формат(ТЗ_Перемещение.Итог("КоличествоЗаказ"));
		Элементы.ТЗ_ПеремещениеКоличествоОтправлено.ТекстПодвала 	= Формат(ТЗ_Перемещение.Итог("КоличествоОтправлено"));
		Элементы.ТЗ_ПеремещениеКоличествоКОформлению.ТекстПодвала 	= Формат(ТЗ_Перемещение.Итог("КоличествоКОформлению"));
		Элементы.ТЗ_ПеремещениеСумма.ТекстПодвала 					= Формат(ТЗ_Перемещение.Итог("Сумма"));		
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Служебные
 
&НаКлиенте
Процедура УстановитьВидимость()
	
	Элементы.Назад.Видимость = Не (Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаЗаказы);
	Элементы.Далее.Видимость = Не Элементы.Назад.Видимость;	
	
	Элементы.Скан_Количество.Видимость = Скан_РежимРучногоВводаКоличества;
	
	СозданныйДокументЗаполнен = ЗначениеЗаполнено(СозданныйДокумент);
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСозданиеПоступления Тогда
		Если Элементы.Найти("ДокументУЧ_ПоступлениеТоваровПечатьТорг2") <> Неопределено Тогда
			Элементы.ДокументУЧ_ПоступлениеТоваровПечатьТорг2.Доступность = СозданныйДокументЗаполнен;
		КонецЕсли;
		Если Элементы.Найти("ДокументУЧ_ПоступлениеТоваровПечатьТорг4") <> Неопределено Тогда
			Элементы.ДокументУЧ_ПоступлениеТоваровПечатьТорг4.Доступность = СозданныйДокументЗаполнен;
		КонецЕсли;
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСозданиеВозврата Тогда
		Если Элементы.Найти("ДокументУЧ_ВозвратТоваровПоставщикуПечатьСчетФактура") <> Неопределено Тогда
			Элементы.ДокументУЧ_ВозвратТоваровПоставщикуПечатьСчетФактура.Доступность = СозданныйДокументЗаполнен;
		КонецЕсли;
		Если Элементы.Найти("ДокументУЧ_ВозвратТоваровПоставщикуПечатьТОРГ12") <> Неопределено Тогда
			Элементы.ДокументУЧ_ВозвратТоваровПоставщикуПечатьТОРГ12.Доступность = СозданныйДокументЗаполнен;
		КонецЕсли;
		Если Элементы.Найти("ДокументУЧ_ВозвратТоваровПоставщикуПечатьТТН") <> Неопределено Тогда
			Элементы.ДокументУЧ_ВозвратТоваровПоставщикуПечатьТТН.Доступность = СозданныйДокументЗаполнен;
		КонецЕсли;
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСозданиеПеремещения Тогда
		Если Элементы.Найти("ДокументУЧ_ПеремещениеТоваровПечатьНакладнойНаПеремещение") <> Неопределено Тогда
			Элементы.ДокументУЧ_ПеремещениеТоваровПечатьНакладнойНаПеремещение.Доступность 	= СозданныйДокументЗаполнен;
		КонецЕсли;
		Если Элементы.Найти("ДокументУЧ_ПеремещениеТоваровПечатьТорг2") <> Неопределено Тогда
			РеквизитыДокумента = БюджетныйНаСервере.ВернутьРеквизиты(СозданныйДокумент, "Организация, ОрганизацияПолучатель");
			Элементы.ДокументУЧ_ПеремещениеТоваровПечатьТорг2.Доступность = СозданныйДокументЗаполнен И РеквизитыДокумента.Организация <> РеквизитыДокумента.ОрганизацияПолучатель;				
		КонецЕсли;		
	КонецЕсли;
	
	Элементы.ГруппаНазадДалее.Видимость = Не ЭтоМобильныйКлиент;
	Элементы.Далее.Видимость = Не ЭтоМобильныйКлиент;
	//Элементы.СписокЗаказыДатаПоступления.Видимость = ЭтоМобильныйКлиент;
	Элементы.СписокЗаказыДата.Видимость = Не ЭтоМобильныйКлиент;
	Элементы.СписокЗаказыЧерновик.Видимость = Не ЭтоМобильныйКлиент;
	Элементы.СписокЗаказыПодразделение.Видимость = Не ЭтоМобильныйКлиент;
	Элементы.СписокЗаказыЕстьПоступление.Видимость = Не ЭтоМобильныйКлиент;
	
	Элементы.Группа2.Видимость = Не ЭтоМобильныйКлиент;
	Элементы.ДокументУЧ_ПоступлениеТоваровПечатьТорг2.Видимость = Не ЭтоМобильныйКлиент;
	Элементы.ДокументУЧ_ПоступлениеТоваровПечатьТорг4.Видимость = Не ЭтоМобильныйКлиент;
	ПринятьПоЦене = ?(ЭтоМобильныйКлиент, 1, 2) ;
	Элементы.ТЗ_ПланФактГруппаЦена.Видимость = Не ЭтоМобильныйКлиент;
	Элементы.ТЗ_ПланФактГруппаСумма.Видимость = Не ЭтоМобильныйКлиент;
	Элементы.Скан_ВводКоличества.Видимость = Не ЭтоМобильныйКлиент;
	//Элементы.РеквизитыСчФСовпадают.Видимость = Не ЭтоМобильныйКлиент;
	Элементы.ГруппаПодПланФактом.Видимость = Не ЭтоМобильныйКлиент;
	Элементы.ТЗ_ПланФактСрокГодности.Видимость = ИспользоватьСерийныйУчет;
	Элементы.ДатаСерии.Видимость = ИспользоватьСерийныйУчет;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьУсловноеОформление()
	
	//Оформление
	//
	//УсловноеОформление.Элементы.Добавить();
	
КонецПроцедуры

&НаКлиенте
Функция ПроверкаНаличияСканНоменклатурыВЗаказе() 
	
	Если ТЗ_ПланФакт.НайтиСтроки(новый Структура("Номенклатура", Скан_Номенклатура)).Количество() > 0 Тогда
		Возврат Истина;
	Иначе
		Ответ = Вопрос("Номенклатура " + Скан_Номенклатура + " отсутствует в заказе. Принять ее?", РежимДиалогаВопрос.ДаНет);
		Возврат Ответ = КодВозвратаДиалога.Да;
	КонецЕсли;
			
	
КонецФункции

//&НаСервере
&НаКлиенте
Процедура ДобавитьСканНоменклатуруВТовары()
	
	//ШтрихкодНайден = ЗначениеЗаполнено(НайтиНоменклатуруПоШтрихкоду(Скан_Штрихкод));
	
	//ТЗ Товары
	//НайденныеСтроки = Товары.НайтиСтроки(новый Структура("Номенклатура", Скан_Номенклатура));
	//Если НайденныеСтроки.Количество() > 0 Тогда
	//	ТекСтрока = НайденныеСтроки[0];
	//	ТекСтрока.КоличествоФакт = ТекСтрока.КоличествоФакт + ?(Скан_РежимРучногоВводаКоличества, Скан_Количество, 1);
	//Иначе
	//	НоваяСтрока = Товары.Добавить();
	//	НоваяСтрока.Номенклатура 	= Скан_Номенклатура;
	//	НоваяСтрока.Штрихкод 		= ?(ШтрихкодНайден, Скан_Штрихкод, "");
	//	НоваяСтрока.КоличествоФакт	= ?(Скан_РежимРучногоВводаКоличества, Скан_Количество, 1);
	//КонецЕсли;
	
	//ТЗ План-факт
	НайденныеСтроки = ТЗ_ПланФакт.НайтиСтроки(новый Структура("Номенклатура", Скан_Номенклатура));
	Если НайденныеСтроки.Количество() > 0 Тогда
		ТекСтрока = НайденныеСтроки[0];
		ТекСтрока.КоличествоФакт = ТекСтрока.КоличествоФакт + Скан_Количество;
		ТекСтрока.КоличествоДок	 = ТекСтрока.КоличествоДок + Скан_Количество;
		Если ТекСтрока.ЕстьВЗаказе Тогда
			ТекСтрока.КоличествоКОформлению = ТекСтрока.КоличествоКОформлению + Скан_Количество;
		КонецЕсли;
		ТекСтрока.Штрихкод = Скан_Штрихкод;
		ТекСтрока.ЗначениеШтрихкода = Скан_ШтрихкодПервичный;
		ТекСтрока.СрокГодности	= ДатаСерии;
		РассчитатьСуммуДокПланФакта(ТекСтрока);
	Иначе
		//Сообщить("Товар " + Скан_Номенклатура + " не был заказан, оприходовать невозможно");
		РеквизитыНоменклатуры = БюджетныйНаСервере.ВернутьРеквизиты(Скан_Номенклатура, "Код, Наименование, ЕдиницаИзмерения, СтавкаНДС, СтавкаНДС.Ставка");
		ТекСтрока = ТЗ_ПланФакт.Добавить();
		ТекСтрока.Номенклатура 		= Скан_Номенклатура;
		ТекСтрока.Штрихкод 			= Скан_Штрихкод;
		ТекСтрока.ЗначениеШтрихкода = Скан_ШтрихкодПервичный;
		//ТекСтрока.Артикул 			= РеквизитыНоменклатуры.Код;	
		ТекСтрока.Наименование		= РеквизитыНоменклатуры.Наименование;
		//ТекСтрока.ЕдиницаИзмерения	= РеквизитыНоменклатуры.ЕдиницаИзмерения;
		ТекСтрока.СтавкаНДС			= РеквизитыНоменклатуры.СтавкаНДС;
		ТекСтрока.СтавкаНДССтавка	= РеквизитыНоменклатуры.СтавкаНДССтавка;
		ТекСтрока.КоличествоФакт	= ?(Скан_РежимРучногоВводаКоличества, Скан_Количество, 1);
		ТекСтрока.СрокГодности	= ДатаСерии;
		ТекСтрока.КоличествоКОформлению	= 0;
		ТекСтрока.Склад = ТЗ_ПланФакт[0].Склад;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиНоменклатуруПоШтрихкоду(Штрихкод)
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ШтрихкодыНоменклатуры.Номенклатура
	               |ИЗ
	               |	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	               |ГДЕ
	               |	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Номенклатура;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПечатьТорг2(Команда)

	ТабДок = ПечатьТорг2НаСервере(СозданныйДокумент);
		
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Ложь;
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.ОтображатьЗаголовки = Истина;
	ТабДок.АвтоМасштаб = Истина;
	ФормаПечати = ПолучитьФорму("ОбщаяФорма.ФормаПечатиДокумента");
	ФормаПечати.Результат = ТабДок;
	ФормаПечати.Открыть();
	
	БылВызовПечати = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПечатьТорг2НаСервере(Документ)

	Возврат Документы.УЧ_ПоступлениеТоваров.ПечатьТОРГ2(Документ);
	
КонецФункции

&НаКлиенте
Процедура ПечатьТорг4(Команда)

	ТабДок = ПечатьТорг4НаСервере(СозданныйДокумент);
		
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Ложь;
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.ОтображатьЗаголовки = Истина;
	ТабДок.АвтоМасштаб = Истина;
	ФормаПечати = ПолучитьФорму("ОбщаяФорма.ФормаПечатиДокумента");
	ФормаПечати.Результат = ТабДок;
	ФормаПечати.Открыть();
	
	БылВызовПечати = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПечатьТорг4НаСервере(Документ)

	Возврат Документы.УЧ_ПоступлениеТоваров.ПечатьТОРГ4(Документ);
	
КонецФункции

&НаКлиенте
Процедура ТЗ_ПланФактКоличествоКОформлениюПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТЗ_ПланФакт.ТекущиеДанные;
	//Если ТекущиеДанные.КоличествоЗаказ = ТекущиеДанные.КоличествоКОформлению Тогда
		ТекущиеДанные.КоличествоДок = ТекущиеДанные.КоличествоКОформлению;
	//Иначе
	//	ТекущиеДанные.КоличествоДок = 0;
	//КонецЕсли;
	
	РассчитатьСуммуДокПланФакта();
	ЗаполнитьПодвалТЗ();
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ПеремещениеКоличествоКОформлениюПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТЗ_Перемещение.ТекущиеДанные;
	ТекущиеДанные.Сумма = ТекущиеДанные.Цена * ТекущиеДанные.КоличествоКОформлению;
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеньПредыдущий(Команда)
	
	ДатаНачала 		= ДатаНачала - 86400;
	ДатаОкончания 	= ДатаОкончания - 86400;
	
	СписокЗаказы.Параметры.УстановитьЗначениеПараметра("ДатаНачала", НачалоДня(ДатаНачала));
	СписокЗаказы.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", КонецДня(ДатаОкончания));
	
КонецПроцедуры

&НаКлиенте
Процедура ДеньСледующий(Команда)

	ДатаНачала 		= ДатаНачала + 86400;
	ДатаОкончания 	= ДатаОкончания + 86400;
	
	СписокЗаказы.Параметры.УстановитьЗначениеПараметра("ДатаНачала", НачалоДня(ДатаНачала));
	СписокЗаказы.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", КонецДня(ДатаОкончания));
	
КонецПроцедуры

&НаСервере
Процедура СохранитьВЧерновикНаСервере()

	СтруктураЧерновик = новый Структура;
	СтруктураЧерновик.Вставить("НомерТТН", НомерТТН);
	СтруктураЧерновик.Вставить("СуммаИтогоДок", СуммаИтогоДок);
	СтруктураЧерновик.Вставить("ДатаТТН", ДатаТТН);
	СтруктураЧерновик.Вставить("НомерСчФ", НомерСчФ);
	СтруктураЧерновик.Вставить("ДатаСчФ", ДатаСчФ);
	СтруктураЧерновик.Вставить("ИмяТаблицы", "ТЗ_ПланФакт");
	СтруктураЧерновик.Вставить("Таблица", ТЗ_ПланФакт.Выгрузить());
	СтруктураЧерновик.Вставить("Серии", СерииНоменклатуры.Выгрузить());
	
	Хранилище = новый ХранилищеЗначения(СтруктураЧерновик);
	
	МенеджерЗаписи = РегистрыСведений.АвтосохранениеДанных.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	МенеджерЗаписи.Объект 	= ОбрабатываемыйДокумент;
	МенеджерЗаписи.Данные 	= Хранилище;
	МенеджерЗаписи.Дата		= ТекущаяДата();
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьИзЧерновиковНаСервере()
	
	НаборЗаписей = РегистрыСведений.АвтосохранениеДанных.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ОбрабатываемыйДокумент);
	//НаборЗаписей.Отбор.Пользователь.Установить(ПараметрыСеанса.ТекущийПользователь);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() Тогда
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();	
	КонецЕсли; 
	
КонецПроцедуры


&НаКлиенте
Процедура СохранитьВЧерновикНаКлиенте()
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСозданиеПоступления Тогда
		СохранитьВЧерновикНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВЧерновик(Команда)
	
	СохранитьВЧерновикНаСервере();
	Элементы.ДекорацияСохранено.Видимость = Истина;
	//Сообщить("Текущая приемка сохранена в черновик.");
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьИзЧерновикаНаСервере()
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АвтосохранениеДанных.Данные
	               |ИЗ
	               |	РегистрСведений.АвтосохранениеДанных КАК АвтосохранениеДанных
	               |ГДЕ
	               |	АвтосохранениеДанных.Пользователь = &Пользователь
	               |	И АвтосохранениеДанных.Объект = &Объект";
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Объект", ОбрабатываемыйДокумент);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Хранилище = Выборка.Данные;
		СтруктураЧерновик = Хранилище.Получить();
		НомерТТН = СтруктураЧерновик.НомерТТН;
		Если СтруктураЧерновик.Свойство("СуммаИтогоДок") Тогда
			СуммаИтогоДок = СтруктураЧерновик.СуммаИтогоДок;
		КонецЕсли;
		ДатаТТН  = СтруктураЧерновик.ДатаТТН;
		НомерСчФ = СтруктураЧерновик.НомерСчФ;
		ДатаСчФ  = СтруктураЧерновик.ДатаСчФ;
		ТЗ_ПланФакт.Загрузить(СтруктураЧерновик.Таблица);
		Если СтруктураЧерновик.Свойство("Серии") Тогда
			СерииНоменклатуры.Загрузить(СтруктураЧерновик.Серии);
		КонецЕсли;
	Иначе
		Сообщить("Нет данных в черновике");
	КонецЕсли;
	
	//обновим статусы
	ЗаказаннаяНоменклатура = ОбрабатываемыйДокумент.ТабличнаяЧасть.ВыгрузитьКолонку("Номенклатура");
	Для Каждого ТекСтрока Из ТЗ_ПланФакт Цикл
		Если ЗаказаннаяНоменклатура.Найти(ТекСтрока.Номенклатура) <> Неопределено Тогда
			ТекСтрока.ЕстьВЗаказе = Истина;
		Иначе
			ТекСтрока.ЕстьВЗаказе = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьСерииВСтроках();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСерииВСтроках()
	
	НомерСтроки = 0;
	Для Каждого СтрокаТЧ Из ТЗ_ПланФакт Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		НайденныеСерии = СерииНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура, НомерСтрокиРеализации", СтрокаТЧ.Номенклатура, НомерСтроки));
		Если НайденныеСерии.Количество() > 1 Тогда
			СтрокаТЧ.НесколькоСерий = Истина;
			СтрокаТЧ.СрокГодности = Неопределено;
		КонецЕсли;
		
	КонецЦикла;	

КонецПроцедуры


&НаСервереБезКонтекста
Функция ЕстьЗаписьВЧерновике(Документ)
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АвтосохранениеДанных.Данные
	               |ИЗ
	               |	РегистрСведений.АвтосохранениеДанных КАК АвтосохранениеДанных
	               |ГДЕ
	               |	АвтосохранениеДанных.Пользователь = &Пользователь
	               |	И АвтосохранениеДанных.Объект = &Объект";
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Объект", Документ);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	СписокЗаказы.Параметры.УстановитьЗначениеПараметра("ВсеКонтрагенты", Не ЗначениеЗаполнено(Контрагент));
	СписокЗаказы.Параметры.УстановитьЗначениеПараметра("Контрагент", Контрагент);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПоказыватьЗакрытые(Команда)
	Элементы.ПоказыватьЗакрытые.Пометка = НЕ Элементы.ПоказыватьЗакрытые.Пометка;
	СписокЗаказы.Параметры.УстановитьЗначениеПараметра("ВсеЗаказы", НЕ Элементы.ПоказыватьЗакрытые.Пометка);
КонецПроцедуры

#Область НайтиПоШК
&НаКлиенте
Процедура НайтиЗаказПоШК(Команда)
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Штрихкод) Тогда
		Возврат;	
	КонецЕсли;
	
	ТекЗаказ = НайтиЗаказПоКоду(Штрихкод);
	Если Не ЗначениеЗаполнено(ТекЗаказ) Тогда
		Сообщить("Заказ с №" + Строка(Штрихкод) + " не найден!");
		Возврат;
	ИначеЕсли ТекЗаказ.Закрыт Тогда  
		Сообщить("Заказ с №" + Строка(Штрихкод) + " уже обработан!");
		Возврат;
	КонецЕсли; 
	
	Если ДатаНачала > ТекЗаказ.ДатаПоступления Тогда
		ДатаНачала = ТекЗаказ.ДатаПоступления;	
		СписокЗаказы.Параметры.УстановитьЗначениеПараметра("ДатаНачала", НачалоДня(ДатаНачала));
	КонецЕсли; 
	Элементы.СписокЗаказы.ТекущаяСтрока = ТекЗаказ.Заказ;
	Далее(Неопределено);
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиЗаказПоКоду(Штрихкод)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказПоставщику.Ссылка,
	|	ЗаказПоставщику.Статус,
	|	ЗаказПоставщику.ДатаПоступления
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Номер = &Номер";
	Запрос.УстановитьПараметр("Номер", Штрихкод);
	Запрос.УстановитьПараметр("ДоступныеПодразделения", ПараметрыСеанса.ДоступныеПодразделения);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	
	Для каждого ТекЗаказ Из РезультатЗапроса Цикл
		Возврат Новый Структура("Заказ, ТекСтатус, Закрыт, ДатаПоступления", ТекЗаказ.Ссылка, ТекЗаказ.Статус, ТекЗаказ.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт, ТекЗаказ.ДатаПоступления);
	КонецЦикла; 
	
	
	Возврат Неопределено;		
КонецФункции


#КонецОбласти 

&НаКлиенте
Процедура ПечатьСпискаЗаказов(Команда)
	СписокМеню = Новый СписокЗначений;
	СписокМеню.Добавить("Вывести список выделенных заказов");
	СписокМеню.Добавить("Вывести заказы с " + Формат(ДатаНачала, "ДФ=dd.MM.yyyy") + " по " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy"));
	ВыбранныйПункт = Неопределено;

	ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ПечатьСпискаЗаказовЗавершение", ЭтаФорма), СписокМеню,  Элементы.Группа11);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСпискаЗаказовЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ВыбранныйПункт = ВыбранныйЭлемент;
	
	Если ВыбранныйПункт = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	ТабДок = Новый ТабличныйДокумент;
	
	ПечатьСпискаЗаказовСервер(ТабДок, Новый Структура("ВыбранныйПункт, ВыделенныеЗаказы, ДатаНачала, ДатаОкончания, ВыводитьЗакрытые", ВыбранныйПункт.Значение, Элементы.СписокЗаказы.ВыделенныеСтроки, ДатаНачала, ДатаОкончания, НЕ Элементы.ПоказыватьЗакрытые.Пометка));
	
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Ложь;
	ТабДок.ТолькоПросмотр = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ФормаПечати = ПолучитьФорму("ОбщаяФорма.ФормаПечатиДокумента");
	ФормаПечати.Результат = ТабДок;
	ФормаПечати.Заголовок = "Список заказов: Печать";
	ФормаПечати.Автозаголовок = Ложь;
	ФормаПечати.Открыть();
	//}}

КонецПроцедуры
&НаСервере
Процедура ПечатьСпискаЗаказовСервер(ТабДок, ПараметрКоманды)
	Если ПараметрКоманды.ВыбранныйПункт = "Вывести список выделенных заказов" Тогда
		МассивЗаказов = ПараметрКоманды.ВыделенныеЗаказы;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказПоставщику.Ссылка
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
		|ГДЕ
		|	ЗаказПоставщику.ДатаПоступления МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ВЫБОР
		|			КОГДА &ВыводитьЗакрытые
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ НЕ ЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)
		|		КОНЕЦ";
		Запрос.УстановитьПараметр("ДатаНачала", ПараметрКоманды.ДатаНачала);
		Запрос.УстановитьПараметр("ВыводитьЗакрытые", ПараметрКоманды.ВыводитьЗакрытые);
		Запрос.УстановитьПараметр("ДатаОкончания", ПараметрКоманды.ДатаОкончания);
		МассивЗаказов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли; 
	Документы.ЗаказПоставщику.ПечатьСпискаЗаказов(ТабДок, МассивЗаказов);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеТТНПриИзменении(Элемент)
			
	Элементы.ДекорацияСохранено.Видимость = Ложь;
	Если РеквизитыСчФСовпадают Тогда
		НомерСчФ = НомерТТН;
		ДатаСчФ = ДатаТТН;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ПланФактПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	а = 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКолвоТТН(Команда)
	
	Ответ = Вопрос("Значения в колонке ""Кол-во по ТТН"" будут заменены значениями колонки ""Кол-во к оформлению"". Продолжить?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ТЗ_ПланФакт Цикл
		Если ТекСтрока.ЕстьВЗаказе Тогда
			ТекСтрока.КоличествоДок = ТекСтрока.КоличествоКОформлению;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаказыПриАктивизацииСтроки(Элемент)
	ТекущийЗаказ = Элементы.СписокЗаказы.ТекущаяСтрока;
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаказыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Далее(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыСчФСовпадаютПриИзменении(Элемент)
	Элементы.НомерСчФ.Видимость = Не РеквизитыСчФСовпадают;
	Элементы.ДатаСчФ.Видимость = Не РеквизитыСчФСовпадают;
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ПланФактПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ПланФактСрокГодностиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Список = Новый СписокЗначений;
	Список.Добавить("Одна серия");
	Список.Добавить("Несколько серий");
	
	ТекДанные = Элементы.ТЗ_ПланФакт.ТекущиеДанные;
	Если НЕ ТекДанные.НесколькоСерий Тогда
		ТекЗнач = Неопределено;
		ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ТЗ_ПланФактСрокГодностиНачалоВыбораЗавершение", ЭтаФорма, Новый Структура("Элемент", Элемент)), Список);
	Иначе
		ТекФорма = ПолучитьФорму("Документ.ЗаказПоставщику.Форма.ФормаПодбораСерийДата");
		ТекФорма.Номенклатура = ТекДанные.Номенклатура;
		ТекФорма.Количество = ТекДанные.КоличествоКОформлению;
		НомерСтроки = ТЗ_ПланФакт.Индекс(ТЗ_ПланФакт.НайтиПоИдентификатору(Элементы.ТЗ_ПланФакт.ТекущаяСтрока)) + 1;
		ТекФорма.НомерСтрокиРеализации = НомерСтроки;
		Для каждого ТекСтрока Из СерииНоменклатуры Цикл
			Если ТекСтрока.Номенклатура = ТекДанные.Номенклатура И ТекСтрока.НомерСтрокиРеализации = НомерСтроки Тогда
				НоваяСтрока = ТекФорма.СерииНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				//НоваяСтрока.СерияНоменклатуры = ТекСтрока.СрокГодности;
			КонецЕсли;
		КонецЦикла;
		ТекФорма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		Оп = Новый ОписаниеОповещения("ВыполнитьПослеОкончанияПодбора", ЭтотОбъект, Новый Структура);
		ТекФорма.ОписаниеОповещенияОЗакрытии = Оп;
		ТекФорма.Открыть();
	КонецЕсли;
	
	//ОткрытьФорму("Справочник.СерииНоменклатуры.ФормаВыбора",,Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ПланФактСрокГодностиНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	
	ТекЗнач = ВыбранныйЭлемент;
	Если Не ТекЗнач = Неопределено Тогда
		Если ТекЗнач.Значение = "Одна серия" Тогда
			//ОткрытьФорму("Справочник.СерииНоменклатуры.ФормаВыбора",,Элемент);
			Если ЭтоМобильныйКлиент Тогда
				ТекДата = Неопределено;
				ВвестиДату(ТекДата,,);
				Если Не ТекДата = Неопределено Тогда
					Элементы.ТЗ_ПланФакт.ТекущиеДанные.СрокГодности = ТекДата;
				КонецЕсли;
			Иначе	
				Элементы.ТЗ_ПланФакт.ИзменитьСтроку();
			КонецЕсли;
		Иначе
			ТекДанные = Элементы.ТЗ_ПланФакт.ТекущиеДанные;
			ТекФорма = ПолучитьФорму("Документ.ЗаказПоставщику.Форма.ФормаПодбораСерийДата");
			ТекФорма.Номенклатура = ТекДанные.Номенклатура;
			ТекФорма.Количество = ТекДанные.КоличествоКОформлению;
			НомерСтроки = ТЗ_ПланФакт.Индекс(ТЗ_ПланФакт.НайтиПоИдентификатору(Элементы.ТЗ_ПланФакт.ТекущаяСтрока)) + 1;
			ТекФорма.НомерСтрокиРеализации = НомерСтроки;
			Для каждого ТекСтрока Из СерииНоменклатуры Цикл
				Если ТекСтрока.Номенклатура = ТекДанные.Номенклатура И ТекСтрока.НомерСтрокиРеализации = НомерСтроки Тогда
					НоваяСтрока = ТекФорма.СерииНоменклатуры.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
					//НоваяСтрока.СерияНоменклатуры = ТекСтрока.СрокГодности;
				КонецЕсли;
			КонецЦикла;
			ТекФорма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			Оп = Новый ОписаниеОповещения("ВыполнитьПослеОкончанияПодбора", ЭтотОбъект, Новый Структура);
			ТекФорма.ОписаниеОповещенияОЗакрытии = Оп;
			ТекФорма.Открыть();
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеОкончанияПодбора(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.ТЗ_ПланФакт.ТекущиеДанные;
	НомерСтроки = ТЗ_ПланФакт.Индекс(ТЗ_ПланФакт.НайтиПоИдентификатору(Элементы.ТЗ_ПланФакт.ТекущаяСтрока)) + 1;
	МассивУдСерий = Новый Массив;
	Для каждого ТекСтрока Из СерииНоменклатуры Цикл
		Если ТекСтрока.Номенклатура = ТекДанные.Номенклатура И ТекСтрока.НомерСтрокиРеализации = НомерСтроки Тогда
			МассивУдСерий.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекУд Из МассивУдСерий Цикл
		СерииНоменклатуры.Удалить(ТекУд);
	КонецЦикла;
	
	НовоеКоличество = 0;
	Для каждого ТекСтрока Из Результат.СерииНоменклатуры Цикл
		НоваяСтрока = СерииНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		НоваяСтрока.НомерСтрокиРеализации = НомерСтроки;
		НовоеКоличество = НовоеКоличество + ТекСтрока.Количество;
	КонецЦикла;
	
	Если Результат.СерииНоменклатуры.Количество() = 1 Тогда
		ТекДанные.СрокГодности = ТекСтрока.СерияНоменклатуры;
		ТекДанные.НесколькоСерий = Ложь;
	ИначеЕсли Результат.СерииНоменклатуры.Количество() > 1 Тогда
		ТекДанные.СрокГодности = Дата('00010101');
		ТекДанные.НесколькоСерий = Истина;		
	КонецЕсли;
	
	ТекДанные.КоличествоКОформлению = НовоеКоличество;
	ТЗ_ПланФактКоличествоКОформлениюПриИзменении(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ПланФактСрокГодностиПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТЗ_ПланФакт.ТекущиеДанные;
	НомерСтроки = ТЗ_ПланФакт.Индекс(ТЗ_ПланФакт.НайтиПоИдентификатору(Элементы.ТЗ_ПланФакт.ТекущаяСтрока)) + 1;
	МассивУдСерий = Новый Массив;
	Для каждого ТекСтрока Из СерииНоменклатуры Цикл
		Если ТекСтрока.Номенклатура = ТекДанные.Номенклатура И ТекСтрока.НомерСтрокиРеализации = НомерСтроки Тогда
			МассивУдСерий.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекУд Из МассивУдСерий Цикл
		СерииНоменклатуры.Удалить(ТекУд);
	КонецЦикла;
	
	НовоеКоличество = 0;
	НоваяСтрока = СерииНоменклатуры.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекДанные);
	НоваяСтрока.НомерСтрокиРеализации = НомерСтроки;
	НоваяСтрока.СерияНоменклатуры = ТекДанные.СрокГодности; 
	НоваяСтрока.Количество = ТекДанные.КоличествоКОформлению;

КонецПроцедуры



