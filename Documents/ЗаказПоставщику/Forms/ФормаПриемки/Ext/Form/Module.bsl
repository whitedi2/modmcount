
&НаКлиенте
Процедура ОтборСтатусПриИзменении(Элемент)
	
	Элементы.Статус.Доступность = ОтборСтатус;
	СписокЗаказы.Параметры.УстановитьЗначениеПараметра("ОтборСтатус", ОтборСтатус);
	
КонецПроцедуры

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ТекущийЗаказ") Тогда
		ТекущийЗаказ = Параметры.ТекущийЗаказ;	
	КонецЕсли;
	Если Параметры.СозданаНаОснованииИзЗаказаПоставщику Тогда
		Если ЗначениеЗаполнено(ТекущийЗаказ) Тогда
			ДатаНачала = ?(ЗначениеЗаполнено(ТекущийЗаказ.ДатаПоступления),ТекущийЗаказ.ДатаПоступления,ТекущаяДата());
			ДатаОкончания = ?(ЗначениеЗаполнено(ТекущийЗаказ.ДатаПоступления),ТекущийЗаказ.ДатаПоступления,ТекущаяДата());
		Иначе
			ДатаНачала = ТекущаяДата();
			ДатаОкончания = ТекущаяДата();
		КонецЕсли; 
	Иначе
		ДатаНачала = ТекущаяДата();
		ДатаОкончания = ТекущаяДата(); 
	КонецЕсли;

	//ДатаНачала = ТекущаяДата();
	//ДатаОкончания = ТекущаяДата(); 
	Статус = Перечисления.СтатусыЗаказовПоставщикам.КПоступлению;
	СписокЗаказы.Параметры.УстановитьЗначениеПараметра("ДатаНачала", НачалоДня(ДатаНачала));
	СписокЗаказы.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", КонецДня(ДатаОкончания));
	СписокЗаказы.Параметры.УстановитьЗначениеПараметра("ВсеКонтрагенты", Истина);
	СписокЗаказы.Параметры.УстановитьЗначениеПараметра("Контрагент", Неопределено);
	СписокЗаказы.Параметры.УстановитьЗначениеПараметра("ВсеЗаказы", Ложь); 
	СписокЗаказы.Параметры.УстановитьЗначениеПараметра("Статус", Статус);
	СписокЗаказы.Параметры.УстановитьЗначениеПараметра("ОтборСтатус", ОтборСтатус);
	
	Элементы.ПоказыватьЗакрытые.Пометка = Истина;
	
	Скан_РежимРучногоВводаКоличества = Истина;
	ПринятьПоЦене = 2;
	
	Если ЗначениеЗаполнено(ПараметрыСеанса.ТекущееПодразделение) Тогда
		Элементы.СписокЗаказыПодразделение.Видимость = Ложь;		
	КонецЕсли;
	
	РеквизитыСчФСовпадают = Истина;
	
	ИспользоватьСерийныйУчет = Справочники.СерииНоменклатуры.СерииНоменклатурыИспользуются();
	
	ЗакрытьЗаказ = Истина;
	ПодтвердитьВЕТИС = Истина;
	ПодтвердитьЭДО = Истина; 
	
	Элементы.Статус.Доступность = ОтборСтатус; 
	Для Каждого СтрокаТЧ Из ТЗ_ПланФакт Цикл
		СтрокаТЧ.ИсходныйНомерСтрокиДляСерии = СтрокаТЧ.НомерСтроки;
		СтрокаТЧ.ВключатьВДокументОтгрузки = ЗначениеЗаполнено(СтрокаТЧ.КоличествоФакт); 
	КонецЦикла; 
	Кладовщик = РольДоступна("сабКладовщик");
	Элементы.Кладовщик.Доступность = Не Кладовщик; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если МобильныйКлиент Или МобильноеПриложениеКлиент Тогда
		ЭтоМобильныйКлиент = Истина;
	#Иначе
		ЭтоМобильныйКлиент = Ложь;
	#КонецЕсли
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаЗаказы;
	ПринятьПоЦенеПриИзменении(Неопределено);
	УстановитьВидимость();
	
	РеквизитыСчФСовпадаютПриИзменении(Неопределено);
	Если Параметры.СозданаНаОснованииИзЗаказаПоставщику Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСозданиеПоступления;
		Далее(Неопределено);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОбработкиПриИзменении(Элемент)
	
	//надо ли?
	
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда) Экспорт
	
	ЗаполнениДляВсейТЧ = 1;
	Если ЗначениеЗаполнено(ТекущийЗаказ) Тогда
		//Если Элементы.СписокЗаказы.ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.Закрыт") Тогда
		//	//ТекстВопроса = "Данный заказ имеет статус ""Закрыт"", вы уверены, что хотите повторно его обработать?
		//	//				|Это будет означать частичное поступление/возврат, если это не так, пометьте на удаление существующий подчиненный документ";
		//	//Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		//	//Если Ответ = КодВозвратаДиалога.Нет Тогда
		//	//	Возврат;
		//	//КонецЕсли; 
		//	ТекстВопроса = "Данный заказ имеет статус ""Закрыт"", вы уверены, что хотите повторно его обработать?
		//	|Это будет означать частичное поступление/возврат";
		//	
		//	ОписаниеОповещения = Новый ОписаниеОповещения("ДалееОтветПоЗакрытомуЗаказу",ЭтотОбъект);
		//	ПоказатьВопрос(ОписаниеОповещения,ТекстВопроса,РежимДиалогаВопрос.ДаНетОтмена);
		//Иначе		
			Проведен = БюджетныйНаСервере.ВернутьРеквизит(ТекущийЗаказ, "Проведен");
			Если Не Проведен Тогда
				Предупреждение("Заказ не проведен, создать поступление невозможно");
				Возврат;
			КонецЕсли;
			ОбрабатываемыйДокумент = ТекущийЗаказ; 
			Элементы.ВыделятьСерииОСГПроцент.Доступность = ВыделятьСерииОСГ;
			ВыделятьСерииОСГПроцент = 70;
			ПриемкаВосстановленаИзЧерновика = Ложь;
			Если ЕстьЗаписьВЧерновике(ОбрабатываемыйДокумент) Тогда
				СписокЗначенийКнопкиВопроса = Новый СписокЗначений;
				СписокЗначенийКнопкиВопроса.Добавить(КодВозвратаДиалога.Да,"Восстановить из черновика"); 
				СписокЗначенийКнопкиВопроса.Добавить(КодВозвратаДиалога.Нет,"Сформировать новый (черновик будет удален)");
				СписокЗначенийКнопкиВопроса.Добавить(КодВозвратаДиалога.Отмена);
				
				ПоказатьВопрос(Новый ОписаниеОповещения("ДалееЗавершение", ЭтаФорма, Новый Структура("ПриемкаВосстановленаИзЧерновика", ПриемкаВосстановленаИзЧерновика)), "Приемка данного документа была сохранена в черновик. Восстановить?", СписокЗначенийКнопкиВопроса);
			Иначе
				ДалееПродолжить1(ПриемкаВосстановленаИзЧерновика);
			КонецЕсли;
			
			УстановитьБезСФ();
			
		//КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	//ПриемкаВосстановленаИзЧерновика = Ложь;
	//Если ЕстьЗаписьВЧерновике(ОбрабатываемыйДокумент) Тогда
	//	СписокЗначенийКнопкиВопроса = Новый СписокЗначений;
	//	СписокЗначенийКнопкиВопроса.Добавить(КодВозвратаДиалога.Да,"Восстановить из черновика"); 
	//	СписокЗначенийКнопкиВопроса.Добавить(КодВозвратаДиалога.Нет,"Сформировать новый (черновик будет удален)");
	//	СписокЗначенийКнопкиВопроса.Добавить(КодВозвратаДиалога.Отмена);
	//	
	//	ПоказатьВопрос(Новый ОписаниеОповещения("ДалееЗавершение", ЭтаФорма, Новый Структура("ПриемкаВосстановленаИзЧерновика", ПриемкаВосстановленаИзЧерновика)), "Приемка данного документа была сохранена в черновик. Восстановить?", СписокЗначенийКнопкиВопроса);
	//Иначе
	//	ДалееПродолжить1(ПриемкаВосстановленаИзЧерновика);
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьБезСФ()
	БезСФ = Истина;
	Для Каждого Стр Из ОбрабатываемыйДокумент.ТабличнаяЧасть Цикл
		Если Стр.СтавкаНДС <> Справочники.СтавкиНДС.СтавкаБезНДС() Тогда
			БезСФ = Ложь;			
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

//&НаКлиенте
//Процедура ДалееОтветПоЗакрытомуЗаказу(Результат, ДопПараметры) Экспорт
//	
//	Если Результат = КодВозвратаДиалога.Да Тогда
//		//Если ЗначениеЗаполнено(ТекущийЗаказ) Тогда
//		Проведен = БюджетныйНаСервере.ВернутьРеквизит(ТекущийЗаказ, "Проведен");
//		Если Не Проведен Тогда
//			Предупреждение("Заказ не проведен, создать поступление невозможно");
//			Возврат;
//		КонецЕсли;
//		ОбрабатываемыйДокумент = ТекущийЗаказ;
//		//Иначе
//		//	Возврат;
//		//КонецЕсли;
//		ПриемкаВосстановленаИзЧерновика = Ложь;
//		Если ЕстьЗаписьВЧерновике(ОбрабатываемыйДокумент) Тогда
//			СписокЗначенийКнопкиВопроса = Новый СписокЗначений;
//			СписокЗначенийКнопкиВопроса.Добавить(КодВозвратаДиалога.Да,"Восстановить из черновика"); 
//			СписокЗначенийКнопкиВопроса.Добавить(КодВозвратаДиалога.Нет,"Сформировать новый (черновик будет удален)");
//			СписокЗначенийКнопкиВопроса.Добавить(КодВозвратаДиалога.Отмена);
//			
//			ПоказатьВопрос(Новый ОписаниеОповещения("ДалееЗавершение", ЭтаФорма, Новый Структура("ПриемкаВосстановленаИзЧерновика", ПриемкаВосстановленаИзЧерновика)), "Приемка данного документа была сохранена в черновик. Восстановить?", СписокЗначенийКнопкиВопроса);
//		Иначе
//			ДалееПродолжить1(ПриемкаВосстановленаИзЧерновика);
//		КонецЕсли;
//	КонецЕсли;  
//	
//КонецПроцедуры

&НаКлиенте
Процедура ДалееЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ДалееПродолжить1(Истина);
	КонецЕсли; 
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
    	УдалитьИзЧерновикаВыбранныйДокумент(Элементы.СписокЗаказы.ТекущаяСтрока);
		ДалееПродолжить1(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДалееПродолжить1(ПриемкаВосстановленаИзЧерновика)
	
	Если ПриемкаВосстановленаИзЧерновика Тогда
		ВосстановитьИзЧерновикаНаСервере();
	КонецЕсли;
	
	ВидОперации = БюджетныйНаСервере.ВернутьРеквизит(ТекущийЗаказ, "ВидОперации");
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыЗаказов.ВозвратБрака") Тогда
		//Предупреждение("Механизм в разработке. На данный момент заказ обрабатывается управляющим/товароведом Заказ -> Создать на основании");
		//Возврат;
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСозданиеВозврата;
		Если Не ПриемкаВосстановленаИзЧерновика Тогда
			ЗаполнитьТаблицуВозврат();
		КонецЕсли;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыЗаказов.ВнутреннееПеремещение") Тогда
		//Предупреждение("Механизм в разработке. На данный момент заказ обрабатывается управляющим/товароведом Заказ -> Создать на основании");
		//Возврат;
		
		ПеремещениеИз = ПолучитьПеремещениеНаПодразделение(ОбрабатываемыйДокумент);
		Если ПеремещениеИз = Неопределено Тогда
			Предупреждение("Не найдена отгрузка на ОП по этому заказу, приемка невозможна");
			Возврат;
		КонецЕсли;
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСозданиеПеремещения;
		Если Не ПриемкаВосстановленаИзЧерновика Тогда
			ЗаполнитьТаблицуПеремещение();
		КонецЕсли;
		
	Иначе
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСозданиеПоступления;
		Если Не ПриемкаВосстановленаИзЧерновика Тогда
			ЗаполнитьПланФакт();
			ВходящаяУПДЭДО = ПредопределенноеЗначение("Документ.ЭлектронныйДокументВходящийЭДО.ПустаяСсылка");
			НакладнаяВЕТИС = ПредопределенноеЗначение("Документ.ВходящаяТранспортнаяОперацияВЕТИС.ПустаяСсылка");
		КонецЕсли;  
		ПодключитьОбработчикОжидания("СохранитьВЧерновикНаКлиенте", 90);
		
	КонецЕсли;
	
	//Заполнение организации и склада
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Организация = БюджетныйНаСервере.ВернутьРеквизит(ТекущийЗаказ, "Организация");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Склад) Тогда
		Склад = БюджетныйНаСервере.ВернутьРеквизит(ТекущийЗаказ, "Склад");
	КонецЕсли;

	//
	
	//ЭтапСозданиеПоступления = Истина;
	БылВызовПечати = Ложь;
	ЗаполнитьПодвалТЗ();
	УстановитьВидимость();
	
	ЭтаФорма.ТекущийЭлемент = Элементы.Скан_Штрихкод; 
	
	

КонецПроцедуры


&НаКлиенте
Процедура Назад(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСозданиеПоступления Тогда
		
		Если ЗначениеЗаполнено(СозданныйДокумент) И Не БылВызовПечати И Не ЭтоМобильныйКлиент Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("НазадЗавершение0", ЭтаФорма), "Созданный документ не выводился на печать. Выйти в список заказов?", РежимДиалогаВопрос.ДаНет);
		Иначе
			НазадЗавершение0(Неопределено, Новый Структура);	
		КонецЕсли;
		
	Иначе
		НазадПродолжить();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазадЗавершение0(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		НазадПродолжить0();	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НазадЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		СохранитьВЧерновикНаСервере();
	КонецЕсли;
	
	НазадПродолжить();

КонецПроцедуры

&НаКлиенте
Процедура НазадПродолжить0()
	Если  СозданныйДокумент = Неопределено И ТЗ_ПланФакт.Итог("Сумма") <> 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("НазадЗавершение", ЭтаФорма), "Документ поступления не создан. Сохранить в черновик введенные данные и перейти в список заказов?", РежимДиалогаВопрос.ДаНет);
	Иначе
		НазадЗавершение(Неопределено, Новый Структура);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НазадПродолжить()
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСозданиеПоступления Тогда
		Попытка
			ОтключитьОбработчикОжидания("СохранитьВЧерновикНаСервере");
		Исключение
		КонецПопытки;
		
		СуммаИтогоДок = "";
		НомерТТН = "";
		НомерСчФ = "";
		ДатаТТН = Дата('00010101');
		ДатаСчФ = Дата('00010101');
		ОбрабатываемыйДокумент = Неопределено;
		Элементы.ДекорацияСохранено.Видимость = Ложь;
		Элементы.СоздатьПоступление.Доступность = Истина;
	КонецЕсли;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаЗаказы;
	//ОповеститьОбИзменении(ОбрабатываемыйДокумент);
	
	СозданныйДокумент = Неопределено;
	УстановитьВидимость();

КонецПроцедуры


&НаКлиенте
Процедура ТЗ_ПланФактПриИзменении(Элемент)
	
	Для Каждого СтрокаТЧ ИЗ ТЗ_ПланФакт Цикл
		СтрокаТЧ.НомерСтроки = ТЗ_ПланФакт.Индекс(СтрокаТЧ)+1;	
	КонецЦикла;
	
	Если Элемент.ТекущиеДанные.ИсходныйНомерСтрокиДляСерии <> 0 И Элемент.ТекущиеДанные.ИсходныйНомерСтрокиДляСерии <> Элемент.ТекущиеДанные.НомерСтроки Тогда
		Для Каждого СтрокаТЧ Из ТЗ_ПланФакт Цикл 
			СтруктураПоискаСерии = Новый Структура("Номенклатура, НомерСтрокиРеализации",СтрокаТЧ.Номенклатура, СтрокаТЧ.ИсходныйНомерСтрокиДляСерии);
			НайденныеСтрокаСерии = СерииНоменклатуры.НайтиСтроки(СтруктураПоискаСерии); 
			
			Для Каждого НайденнаяСтрока Из НайденныеСтрокаСерии Цикл
				НайденнаяСтрока.НомерСтрокиРеализации = СтрокаТЧ.НомерСтроки;	
			КонецЦикла;
			СтрокаТЧ.ИсходныйНомерСтрокиДляСерии = СтрокаТЧ.НомерСтроки; 
		КонецЦикла; 
		СерииНоменклатуры.Сортировать("НомерСтрокиРеализации");
	КонецЕсли;
	//РассчитатьСуммуПланФакта();
	ЗаполнитьПодвалТЗ();
	Элементы.ДекорацияСохранено.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьПоЦенеПриИзменении(Элемент)
	
	//ШрифтЖирный = новый Шрифт(,, Истина);
	//ШрифтПоУмолчанию = новый Шрифт();	
	//Элементы.ТЗ_ПланФактЦенаЗаказ.Шрифт 		= ?(ПринятьПоЦене = 2, ШрифтЖирный, ШрифтПоУмолчанию);
	//Элементы.ТЗ_ПланФактЦенаЗаказ.ШрифтЗаголовка= ?(ПринятьПоЦене = 2, ШрифтЖирный, ШрифтПоУмолчанию);
	//Элементы.ТЗ_ПланФактЦенаДок.Шрифт 			= ?(ПринятьПоЦене = 3, ШрифтЖирный, ШрифтПоУмолчанию);
	//Элементы.ТЗ_ПланФактЦенаДок.ШрифтЗаголовка	= ?(ПринятьПоЦене = 3, ШрифтЖирный, ШрифтПоУмолчанию);
	//Элементы.ТЗ_ПланФактЦенаДокБезНДС.Шрифт 			= ?(ПринятьПоЦене = 3, ШрифтЖирный, ШрифтПоУмолчанию);
	//Элементы.ТЗ_ПланФактЦенаДокБезНДС.ШрифтЗаголовка	= ?(ПринятьПоЦене = 3, ШрифтЖирный, ШрифтПоУмолчанию);
	//
	//ЦветАвто = новый Цвет();
	//ЦветСерый = новый Цвет(230, 230, 230);
	//Элементы.ТЗ_ПланФактЦенаДок.ЦветФона 			= ?(ПринятьПоЦене = 1, ЦветСерый, ЦветАвто);
	//Элементы.ТЗ_ПланФактЦенаДок.ЦветФонаЗаголовка 	= ?(ПринятьПоЦене = 1, ЦветСерый, ЦветАвто);
	//Элементы.ТЗ_ПланФактЦенаДок.ЦветФонаПодвала 	= ?(ПринятьПоЦене = 1, ЦветСерый, ЦветАвто);
	//Элементы.ТЗ_ПланФактЦенаДокБезНДС.ЦветФона 			= ?(ПринятьПоЦене = 1, ЦветСерый, ЦветАвто);
	//Элементы.ТЗ_ПланФактЦенаДокБезНДС.ЦветФонаЗаголовка = ?(ПринятьПоЦене = 1, ЦветСерый, ЦветАвто);
	//Элементы.ТЗ_ПланФактЦенаДокБезНДС.ЦветФонаПодвала 	= ?(ПринятьПоЦене = 1, ЦветСерый, ЦветАвто);
	//
	//Элементы.ТЗ_ПланФактЦенаДок.ТолькоПросмотр 		 = (ПринятьПоЦене = 1);
	//Элементы.ТЗ_ПланФактЦенаДокБезНДС.ТолькоПросмотр = (ПринятьПоЦене = 1);
	
	РассчитатьСуммуПланФакта();
	
КонецПроцедуры

#КонецОбласти

#Область ПодключениеИЗапросы


	
#КонецОбласти

#Область ЭтапСозданияПоступления

&НаКлиенте
Процедура ЗаполнитьПланФакт() Экспорт
	
	ЗаполнитьФакт();
	ЗаполнитьТаблицуПланФакт();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПланФакт()
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ДокументПлан", ОбрабатываемыйДокумент);
	Запрос.УстановитьПараметр("ВТ_Факт", Товары.Выгрузить());
	Запрос.Текст = "ВЫБРАТЬ
	               |	МаркетинговыеМероприятия.Предприятие КАК Предприятие,
	               |	МаркетинговыеМероприятия.Подразделение КАК Подразделение,
	               |	МаркетинговыеМероприятия.Номенклатура КАК Номенклатура,
	               |	МАКСИМУМ(МаркетинговыеМероприятия.ЦенаПоступления) КАК ЦенаПоступления
	               |ПОМЕСТИТЬ ВТ_МаркетинговыеМероприятия
	               |ИЗ
	               |	РегистрСведений.МаркетинговыеМероприятия КАК МаркетинговыеМероприятия
	               |ГДЕ
	               |	МаркетинговыеМероприятия.ДатаПоставокНач <= &ТекДата
	               |	И МаркетинговыеМероприятия.ДатаПоставокКон >= НАЧАЛОПЕРИОДА(&ТекДата, ДЕНЬ)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	МаркетинговыеМероприятия.Предприятие,
	               |	МаркетинговыеМероприятия.Подразделение,
	               |	МаркетинговыеМероприятия.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(ВТ_Факт.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	               |	ВТ_Факт.Штрихкод КАК Штрихкод,
	               |	ВТ_Факт.КоличествоФакт КАК Количество
	               |ПОМЕСТИТЬ ВТ_Факт
	               |ИЗ
	               |	&ВТ_Факт КАК ВТ_Факт
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(ЗаказПоставщикуТабличнаяЧасть.Номенклатура, ВТ_Факт.Номенклатура) КАК Номенклатура,
	               |	ЗаказПоставщикуТабличнаяЧасть.Номенклатура.Код КАК Артикул,
	               |	ЗаказПоставщикуТабличнаяЧасть.Номенклатура.Наименование КАК Наименование,
	               |	ЗаказПоставщикуТабличнаяЧасть.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ЗаказПоставщикуТабличнаяЧасть.СтавкаНДС КАК СтавкаНДС,
	               |	ЗаказПоставщикуТабличнаяЧасть.СтавкаНДС.Ставка КАК СтавкаНДССтавка,
	               |	ЕСТЬNULL(ЗаказПоставщикуТабличнаяЧасть.Количество, 0) КАК КоличествоЗаказ,
	               |	0 КАК КоличествоДок,
	               |	ЕСТЬNULL(ВТ_МаркетинговыеМероприятия.ЦенаПоступления, ЕСТЬNULL(ЗаказПоставщикуТабличнаяЧасть.Цена, 0)) КАК ЦенаЗаказ,
	               |	ЕСТЬNULL(ВТ_МаркетинговыеМероприятия.ЦенаПоступления, ЕСТЬNULL(ЗаказПоставщикуТабличнаяЧасть.Цена, 0)) КАК ЦенаДок,
	               |	ЕСТЬNULL(ВТ_Факт.Количество, 0) КАК КоличествоФакт,
	               |	ЕСТЬNULL(ВТ_Факт.Количество, 0) КАК КоличествоКОформлению,
	               |	ЕСТЬNULL(ВТ_Факт.Количество, 0) * ЕСТЬNULL(ЗаказПоставщикуТабличнаяЧасть.Цена, 0) КАК Сумма,
	               |	ЕСТЬNULL(ВТ_Факт.Количество, 0) * ЕСТЬNULL(ЗаказПоставщикуТабличнаяЧасть.Цена, 0) КАК СуммаДок,
	               |	ЕСТЬNULL(ВТ_Факт.Штрихкод, """") КАК Штрихкод,
	               |	ЗаказПоставщикуТабличнаяЧасть.Склад КАК Склад,
	               |	ВЫБОР
	               |		КОГДА ВТ_МаркетинговыеМероприятия.ЦенаПоступления ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ЕстьМаркетинговыеМероприятия,
	               |	ВЫБОР
	               |		КОГДА ЗаказПоставщикуТабличнаяЧасть.Номенклатура ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ЕстьВЗаказе,
	               |	ЗаказПоставщикуТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
				   |	ЗаказПоставщикуТабличнаяЧасть.НомерСтроки КАК ИсходныйНомерСтрокиДляСерии,
	               |	ЗаказПоставщикуТабличнаяЧасть.Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения
				  // |    Истина КАК ВключатьВДокументОтгрузки
	               |ИЗ
	               |	Документ.ЗаказПоставщику.ТабличнаяЧасть КАК ЗаказПоставщикуТабличнаяЧасть
	               |		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Факт КАК ВТ_Факт
	               |		ПО ЗаказПоставщикуТабличнаяЧасть.Номенклатура = ВТ_Факт.Номенклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаркетинговыеМероприятия КАК ВТ_МаркетинговыеМероприятия
	               |		ПО ЗаказПоставщикуТабличнаяЧасть.Ссылка.Предприятие = ВТ_МаркетинговыеМероприятия.Предприятие
	               |			И ЗаказПоставщикуТабличнаяЧасть.Ссылка.Подразделение = ВТ_МаркетинговыеМероприятия.Подразделение
	               |			И ЗаказПоставщикуТабличнаяЧасть.Номенклатура = ВТ_МаркетинговыеМероприятия.Номенклатура
	               |ГДЕ
	               |	ЗаказПоставщикуТабличнаяЧасть.Ссылка = &ДокументПлан
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки
	               |АВТОУПОРЯДОЧИВАНИЕ";
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	ТЗ_ПланФакт.Загрузить(ТаблицаРезультат);
	ЕстьСтрокиСПозициямиНеВключеннымиДляОтгрузки = Ложь;
	Для Каждого ТекСтрока Из ТЗ_ПланФакт Цикл  //пока так, потом в запросе рассчитать
		//ТекСтрока.ЦенаДокБезНДС = ТекСтрока.ЦенаДок / (1 + ТекСтрока.СтавкаНДССтавка/100);
		//ТекСтрока.СуммаДок 		= ТекСтрока.КоличествоДок * ТекСтрока.ЦенаДок;
		//ТекСтрока.СуммаНДСДок 	= ТекСтрока.СуммаДок / ((100+ТекСтрока.СтавкаНДССтавка)/100) * (ТекСтрока.СтавкаНДССтавка/100); 
		
		//Для новой формы
		//ТекСтрока.ЦенаДокБезНДС = ТекСтрока.ЦенаДок / (1 + ТекСтрока.СтавкаНДССтавка/100);
		ТекСтрока.СуммаЗаказ 		= ТекСтрока.КоличествоЗаказ * ТекСтрока.ЦенаЗаказ;
		ТекСтрока.СуммаНДСЗаказ 	= ТекСтрока.СуммаЗаказ / ((100+ТекСтрока.СтавкаНДССтавка)/100) * (ТекСтрока.СтавкаНДССтавка/100); 
		
		Если Не ТекСтрока.ВключатьВДокументОтгрузки Тогда
			ЕстьСтрокиСПозициямиНеВключеннымиДляОтгрузки = Истина; 
		КонецЕсли; 
		
		//ТекСтрока.КоличествоФакт = ТекСтрока.КоличествоЗаказ;
		//ТекСтрока.Сумма = ТекСтрока.СуммаЗаказ; 
		//ТекСтрока.СуммаНДСДок = ТекСтрока.СуммаНДСЗаказ;
	КонецЦикла; 
	Если ЕстьСтрокиСПозициямиНеВключеннымиДляОтгрузки Тогда
		Элементы.ТЗ_ПланФактСоздатьЗаказПоставщикуДляОтсутствующихТоваров.ЦветРамки = WebЦвета.ЗеленыйЛес;
		Элементы.ТЗ_ПланФактСоздатьЗаказПоставщикуДляОтсутствующихТоваров.ЦветТекста = WebЦвета.ЗеленыйЛес; 
	Иначе
		Элементы.ТЗ_ПланФактСоздатьЗаказПоставщикуДляОтсутствующихТоваров.ЦветРамки = WebЦвета.ТемноСерый;
		Элементы.ТЗ_ПланФактСоздатьЗаказПоставщикуДляОтсутствующихТоваров.ЦветТекста = WebЦвета.ТемноСерый; 
	КонецЕсли;
	ЗаполнитьДанныеГТД();
	Если ЗначениеЗаполнено(СозданныйДокумент) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВходящаяТранспортнаяОперацияВЕТИС.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ВходящаяТранспортнаяОперацияВЕТИС КАК ВходящаяТранспортнаяОперацияВЕТИС
		|ГДЕ
		|	ВходящаяТранспортнаяОперацияВЕТИС.ДокументОснование = &СозданныйДокумент И
		|	НЕ ВходящаяТранспортнаяОперацияВЕТИС.ПометкаУдаления";
		Запрос.УстановитьПараметр("СозданныйДокумент",СозданныйДокумент);
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			НакладнаяВЕТИС = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	УстановитьДоступностьКладовщика();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФакт()
	
	Товары.Очистить();
	//Загрузка факта с ТСД
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуВозврат()
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказПоставщикуТабличнаяЧасть.Ссылка,
	               |	ЗаказПоставщикуТабличнаяЧасть.Номенклатура,
	               |	ЗаказПоставщикуТабличнаяЧасть.Склад,
	               |	ЗаказПоставщикуТабличнаяЧасть.Количество КАК КоличествоЗаказ,
	               |	ЗаказПоставщикуТабличнаяЧасть.Количество КАК КоличествоКОформлению,
	               |	ЗаказПоставщикуТабличнаяЧасть.Цена,
	               |	ЗаказПоставщикуТабличнаяЧасть.Сумма,
	               |	ЗаказПоставщикуТабличнаяЧасть.Доставка,
	               |	ЗаказПоставщикуТабличнаяЧасть.СуммаДоставки,
	               |	ЗаказПоставщикуТабличнаяЧасть.ВидДоставки,
	               |	ЗаказПоставщикуТабличнаяЧасть.СуммаБезНДС,
	               |	ЗаказПоставщикуТабличнаяЧасть.СтавкаНДС,
	               |	ЗаказПоставщикуТабличнаяЧасть.СуммаНДС,
	               |	ЗаказПоставщикуТабличнаяЧасть.СтавкаНДС.Ставка КАК СтавкаНДССтавка
	               |ИЗ
	               |	Документ.ЗаказПоставщику.ТабличнаяЧасть КАК ЗаказПоставщикуТабличнаяЧасть
	               |ГДЕ
	               |	ЗаказПоставщикуТабличнаяЧасть.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ОбрабатываемыйДокумент);
	ТЗ_ТоварыВозврат.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПеремещение() 
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказПоставщикуТабличнаяЧасть.Ссылка,
	               |	ЗаказПоставщикуТабличнаяЧасть.Номенклатура,
	               |	СУММА(ЗаказПоставщикуТабличнаяЧасть.Количество) КАК Количество,
	               |	СУММА(ЗаказПоставщикуТабличнаяЧасть.Сумма) КАК Сумма
	               |ПОМЕСТИТЬ ВТ_Заказ
	               |ИЗ
	               |	Документ.ЗаказПоставщику.ТабличнаяЧасть КАК ЗаказПоставщикуТабличнаяЧасть
	               |ГДЕ
	               |	ЗаказПоставщикуТабличнаяЧасть.Ссылка = &Заказ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказПоставщикуТабличнаяЧасть.Ссылка,
	               |	ЗаказПоставщикуТабличнаяЧасть.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УЧ_ПеремещениеТоваровТабличнаяЧасть.Ссылка КАК Ссылка,
	               |	УЧ_ПеремещениеТоваровТабличнаяЧасть.Номенклатура КАК Номенклатура,
	               |	УЧ_ПеремещениеТоваровТабличнаяЧасть.Количество КАК Количество,
	               |	ВЫБОР
	               |		КОГДА УЧ_ПеремещениеТоваровТабличнаяЧасть.Количество <> 0
	               |			ТОГДА УЧ_ПеремещениеТоваровТабличнаяЧасть.Сумма / УЧ_ПеремещениеТоваровТабличнаяЧасть.Количество
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Цена,
	               |	УЧ_ПеремещениеТоваровТабличнаяЧасть.Сумма КАК Сумма,
	               |	УЧ_ПеремещениеТоваровТабличнаяЧасть.СчетУчетаБУ КАК СчетУчетаБУ,
	               |	УЧ_ПеремещениеТоваровТабличнаяЧасть.НовыйСчетУчетаБУ КАК НовыйСчетУчетаБУ
	               |ПОМЕСТИТЬ ВТ_ПеремещениеИз
	               |ИЗ
	               |	Документ.УЧ_ПеремещениеТоваров.ТабличнаяЧасть КАК УЧ_ПеремещениеТоваровТабличнаяЧасть
	               |ГДЕ
	               |	УЧ_ПеремещениеТоваровТабличнаяЧасть.Ссылка.ДокОснование = &Заказ
	               |	И НЕ УЧ_ПеремещениеТоваровТабличнаяЧасть.Ссылка.ПометкаУдаления
	               |	И УЧ_ПеремещениеТоваровТабличнаяЧасть.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыПеремещений.ПеремещениеНаОбособленноеПодразделение)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ПеремещениеИз.Номенклатура,
	               |	ВТ_Заказ.Количество КАК КоличествоЗаказ,
	               |	ВТ_ПеремещениеИз.Количество КАК КоличествоОтправлено,
	               |	ВТ_ПеремещениеИз.Количество КАК КоличествоКОформлению,
	               |	ВТ_ПеремещениеИз.Цена,
	               |	ВТ_ПеремещениеИз.Количество * ВТ_ПеремещениеИз.Цена КАК Сумма,
	               |	ВТ_ПеремещениеИз.СчетУчетаБУ,
	               |	ВТ_ПеремещениеИз.НовыйСчетУчетаБУ
	               |ИЗ
	               |	ВТ_Заказ КАК ВТ_Заказ
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПеремещениеИз КАК ВТ_ПеремещениеИз
	               |		ПО ВТ_Заказ.Номенклатура = ВТ_ПеремещениеИз.Номенклатура";	
	Запрос.УстановитьПараметр("Заказ", ОбрабатываемыйДокумент);
	ТЗ_Перемещение.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступление(Команда)
	ЕстьСтрокиВключатьВДокументОтгрузки = Ложь;	
	ЕстьНезаполненныеПоляДляКонтроля = Ложь;
	ЕстьВыделенныеОСГ = Ложь;
	Для каждого СтрокаТЗ Из ТЗ_ПланФакт Цикл
		Если СтрокаТЗ.ВключатьВДокументОтгрузки Тогда
			ЕстьСтрокиВключатьВДокументОтгрузки = Истина;
			Если СтрокаТЗ.ОСГ < ВыделятьСерииОСГПроцент Тогда
				ЕстьВыделенныеОСГ = Истина;	
			КонецЕсли;
		КонецЕсли;
		Если СтрокаТЗ.ВключатьВДокументОтгрузки И Не ЗначениеЗаполнено(СтрокаТЗ.КоличествоФакт) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Не заполнено количество для строки № " + СтрокаТЗ.НомерСтроки;
			Сообщение.Поле = "ТЗ_ПланФакт[" + Строка(СтрокаТЗ.НомерСтроки-1) + "].КоличествоФакт";
			Сообщение.Сообщить(); 
			ЕстьНезаполненныеПоляДляКонтроля = Истина;
		КонецЕсли; 
		
		Если СтрокаТЗ.ВключатьВДокументОтгрузки И Не ЗначениеЗаполнено(СтрокаТЗ.Сумма) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Не заполнена сумма для строки № " + СтрокаТЗ.НомерСтроки;
			Сообщение.Поле = "ТЗ_ПланФакт[" + Строка(СтрокаТЗ.НомерСтроки-1) + "].Сумма";
			Сообщение.Сообщить(); 
			ЕстьНезаполненныеПоляДляКонтроля = Истина;
		КонецЕсли;
		
		Если СтрокаТЗ.ВключатьВДокументОтгрузки И Не ЗначениеЗаполнено(СтрокаТЗ.СуммаНДСДок) Тогда
			Если ЗначениеЗаполнено(СтрокаТЗ.СтавкаНДС) Тогда
				РеквизитыСтавкиНДС = БюджетныйНаСервере.ВернутьРеквизиты(СтрокаТЗ.СтавкаНДС, "Ставка");  
				Если ЗначениеЗаполнено(РеквизитыСтавкиНДС.Ставка) Тогда
					Сообщение = Новый СообщениеПользователю();
					Сообщение.Текст = "Не заполнена сумма НДС  для строки № " + СтрокаТЗ.НомерСтроки;
					Сообщение.Поле = "ТЗ_ПланФакт[" + Строка(СтрокаТЗ.НомерСтроки-1) + "].СуммаНДСДок";
					Сообщение.Сообщить(); 
					ЕстьНезаполненныеПоляДляКонтроля = Истина;   
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	Если Не ЕстьСтрокиВключатьВДокументОтгрузки Тогда
		Сообщить("Нет отмеченных строк для включения в документ отгрузки.");
		Возврат;
	КонецЕсли;
	Если ЕстьНезаполненныеПоляДляКонтроля Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьНезаполненныеГТД = Ложь;
	Для каждого СтрокаТЗ Из ТЗ_ПланФакт Цикл
		Если СтрокаТЗ.ВключатьВДокументОтгрузки И СтрокаТЗ.ИмпортныйТовар И НЕ ЗначениеЗаполнено(СтрокаТЗ.ГТД) Тогда
			ЕстьНезаполненныеГТД = Истина;	
			Прервать;
		КонецЕсли;
	КонецЦикла;	 
	Если ЕстьНезаполненныеГТД Тогда
		СтруктураОСГ = Новый Структура("ЕстьВыделенныеОСГ",ЕстьВыделенныеОСГ);
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьПоступлениеПослеОтвета",ЭтотОбъект,СтруктураОСГ);
		ПоказатьВопрос(ОписаниеОповещения,"В табличной части есть импортный товар с незаполненной ГТД. Продолжить?",РежимДиалогаВопрос.ДаНет); 
	Иначе
		Если ВыделятьСерииОСГ И ЕстьВыделенныеОСГ Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьПоступлениеПослеОтветаОСГ",ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения,"В табличной части есть строки с остаточным сроком годности менее " + Строка(ВыделятьСерииОСГПроцент) +"%. Продолжить?",РежимДиалогаВопрос.ДаНет); 
		Иначе
			СоздатьПоступлениеПослеВопроса();
		КонецЕсли;
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеПослеОтветаОСГ(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СоздатьПоступлениеПослеВопроса();	
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура СоздатьПоступлениеПослеОтвета(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ВыделятьСерииОСГ И ДопПараметры.Свойство("ЕстьВыделенныеОСГ") И ДопПараметры.ЕстьВыделенныеОСГ Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьПоступлениеПослеОтветаОСГ",ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения,"В табличной части есть строки с остаточным сроком годности менее " + Строка(ВыделятьСерииОСГПроцент) +"%. Продолжить?",РежимДиалогаВопрос.ДаНет); 
		Иначе
			СоздатьПоступлениеПослеВопроса();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеПослеВопроса()
	
	Если ТЗ_ПланФакт.Итог("Сумма") = 0 Тогда
		Сообщить("Таблица не заполнена");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СозданныйДокумент) Тогда
		Сообщить("Документ поступления уже был создан");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НомерТТН) Или Не ЗначениеЗаполнено(ДатаТТН) Тогда
		Сообщить("Заполните номер/дату входящего документа");
		Возврат;
	КонецЕсли;
	
	Если Не (Год(ТекущаяДата()) = Год(ДатаТТН) + 1 Или Год(ТекущаяДата()) = Год(ДатаТТН)) Тогда
		СообщениеПользователю = новый СообщениеПользователю;
		СообщениеПользователю.Поле = "ДатаТТН";
		СообщениеПользователю.Текст = "Некорректный год";
		СообщениеПользователю.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если РеквизитыСчФСовпадают Тогда
		НомерСчФ = НомерТТН;
		ДатаСчФ =  ДатаТТН;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НомерСчФ) Тогда
		Ответ = Вопрос("Не заполнена счет-фактура. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Отказ = Ложь;
	
	Для Каждого ТекСтрока Из ТЗ_ПланФакт Цикл 
		 Если ТекСтрока.ВключатьВДокументОтгрузки И ТекСтрока.КоличествоФакт = 0 Тогда
			Ответ = Вопрос("отсутствуют некоторые позиции из заказа, Продолжить?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат;
			Иначе 
				Прервать;
			КонецЕсли;
		КонецЕсли;
		Если ТекСтрока.ВключатьВДокументОтгрузки И ТекСтрока.ЦенаДокБезНДС = 0  Тогда
			Сообщить("В строке с номенклатурой " + ТекСтрока.Номенклатура + " не заполнена цена!");
			Возврат;
		КонецЕсли;
		Если ИспользоватьСерийныйУчет Тогда
			ИндексСтроки = ТЗ_ПланФакт.Индекс(ТекСтрока);	
			
			Если ТекСтрока.ВключатьВДокументОтгрузки И Не ЗначениеЗаполнено(ТекСтрока.СерияНоменклатуры) И НЕ ТекСтрока.НесколькоСерий Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		ОписаниеОповедения = Новый ОписаниеОповещения("ВыполнитьПослеОтветаНеЗаполненныеСерии",ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповедения,"В табличной части есть строки с незаполненной Серией. Продолжить?",РежимДиалогаВопрос.ДаНет);
	Иначе 
		ВетисСформирован = Ложь;
		ДокументВетисСсылка = Неопределено;
		СтруктураСообщенийПриемки = Новый Структура("ДокументОтгрузки,Ветис,ЭДО",Новый Массив,Новый Массив,Новый Массив);
		СоздатьПоступлениеНаСервере(ДокументВетисСсылка,СтруктураСообщенийПриемки,ВетисСформирован);
		Если ВетисСформирован Тогда
			Если ПодтвердитьВЕТИС Тогда
				ПодтвердитьПодписатьВетис(ДокументВетисСсылка,СтруктураСообщенийПриемки); 
			КонецЕсли;
		КонецЕсли;
		Если ПодтвердитьЭДО Тогда
			ПодтвердитьПодписатьЭДО(СтруктураСообщенийПриемки);
		Иначе
		    ПараметрыФормыОтчета = Новый Структура("СтруктураСообщенийПриемки",СтруктураСообщенийПриемки);
			ОткрытьФорму("Документ.ЗаказПоставщику.Форма.ФормаОтчетаПриемки",ПараметрыФормыОтчета,ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
		УстановитьВидимость();
		
		Оповестить("ЗаказОбработан");
		Если ЭтоМобильныйКлиент Тогда
			Предупреждение("Документ " + СозданныйДокумент + " успешно создан!");
			Назад(Неопределено);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьПослеОтветаНеЗаполненныеСерии(Результат,ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ДокументВетисСсылка = Неопределено;
		СтруктураСообщенийПриемки = Новый Структура("ДокументОтгрузки,Ветис,ЭДО",Новый Массив,Новый Массив,Новый Массив);
		ВетисСформирован = Ложь;
		СоздатьПоступлениеНаСервере(ДокументВетисСсылка,СтруктураСообщенийПриемки,ВетисСформирован);
		Если ВетисСформирован Тогда
			ПодтвердитьПодписатьВетис(ДокументВетисСсылка,СтруктураСообщенийПриемки);	
		КонецЕсли;
		ПодтвердитьПодписатьЭДО(СтруктураСообщенийПриемки);
		
		//ЭтапСозданиеПоступления = Ложь;
		УстановитьВидимость();
		
		Оповестить("ЗаказОбработан");
		//ОтчетПриемки = Новый ТекстовыйДокумент;
		//ОтчетПриемки.Показать("Результат приемки"); 
			
		Если ЭтоМобильныйКлиент Тогда
			Предупреждение("Документ " + СозданныйДокумент + " успешно создан!");
			Назад(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры  

&НаСервереБезКонтекста
Функция ПолучитьЗначениеПроведен(Ссылка)
	
	Возврат Ссылка.Проведен;
	
КонецФункции

&НаКлиенте
Процедура ПодтвердитьПодписатьЭДО(СтруктураСообщенийПриемки)
	
	Если ЗначениеЗаполнено(ВходящаяУПДЭДО) Тогда
		Если СтатусСоответствуетПодписанию(ВходящаяУПДЭДО) Тогда
			НаборДействий = Новый Соответствие;	
			ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Утвердить"));
			ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.СформироватьОтвет"));
			ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Подписать"));
			ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
			ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Отправить"));
			ДопПараметры = Новый Структура("СтруктураСообщенийПриемки",СтруктураСообщенийПриемки);	
			Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект,ДопПараметры);
			ПараметрыВыполненияДействийПоЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
			ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;
			ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ЭлектронныеДокументы.Добавить(ВходящаяУПДЭДО);
			ЭлектронныеДокументыЭДОКлиент.НачатьВыполнениеДействийПоЭДО(Оповещение, ПараметрыВыполненияДействийПоЭДО);
		Иначе
			СтруктураСообщенийПриемки.ЭДО.Добавить("Подписание ЭДО не выполнено по причине: статус документа ЭДО не соответствует подписанию");
			ПараметрыФормыОтчета = Новый Структура("СтруктураСообщенийПриемки",СтруктураСообщенийПриемки);
			ОткрытьФорму("Документ.ЗаказПоставщику.Форма.ФормаОтчетаПриемки",ПараметрыФормыОтчета,ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	Иначе
		СтруктураСообщенийПриемки.ЭДО.Добавить("Подписание ЭДО не выполнено по причине: документ ЭДО не заполнен"); 
		ПараметрыФормыОтчета = Новый Структура("СтруктураСообщенийПриемки",СтруктураСообщенийПриемки);
		ОткрытьФорму("Документ.ЗаказПоставщику.Форма.ФормаОтчетаПриемки",ПараметрыФормыОтчета,ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры    

&НаКлиенте
Процедура ПослеВыполненияДействийПоЭДО(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		Если Результат.Свойство("КонтекстДиагностики")
			И ОбработкаНеисправностейБЭДКлиентСервер.ЕстьОшибки(Результат.КонтекстДиагностики) Тогда
			Если Результат.КонтекстДиагностики = Неопределено Или Результат.КонтекстДиагностики.ОшибкиОбработаны Тогда
				Если Результат.Итог.ОбработанныеДокументы.Количество > 0 Тогда
					ДополнительныеПараметры.СтруктураСообщенийПриемки.ЭДО.Добавить("Документ ЭДО подписан, сообщение обмена отправлено");
				Иначе
					ДополнительныеПараметры.СтруктураСообщенийПриемки.ЭДО.Добавить("Документ ЭДО не подписан по причине: ошибка не определена");
				КонецЕсли;
				ПараметрыФормыОтчета = Новый Структура("СтруктураСообщенийПриемки",ДополнительныеПараметры.СтруктураСообщенийПриемки);
				ОткрытьФорму("Документ.ЗаказПоставщику.Форма.ФормаОтчетаПриемки",ПараметрыФормыОтчета,ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				Возврат;
			КонецЕсли;
			Ошибки = ОбработкаНеисправностейБЭДКлиентСервер.ПолучитьОшибки(Результат.КонтекстДиагностики);
			//ВидыОшибок = ОбработкаНеисправностейБЭДКлиентСервер.ЗначенияСвойствОшибок(Ошибки, "ВидОшибки");
			Если Ошибки.Количество() = 0 Тогда
				Если Результат.Итог.ОбработанныеДокументы.Количество > 0 Тогда
					ДополнительныеПараметры.СтруктураСообщенийПриемки.ЭДО.Добавить("Документ ЭДО подписан, сообщение обмена отправлено");
				Иначе
					ДополнительныеПараметры.СтруктураСообщенийПриемки.ЭДО.Добавить("Документ ЭДО не подписан по причине: ошибка не определена");
				КонецЕсли;
				ПараметрыФормыОтчета = Новый Структура("СтруктураСообщенийПриемки",ДополнительныеПараметры.СтруктураСообщенийПриемки);
				ОткрытьФорму("Документ.ЗаказПоставщику.Форма.ФормаОтчетаПриемки",ПараметрыФормыОтчета,ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				Возврат;
			КонецЕсли;
			ТекстОшибкиЭДО = "Документ ЭДО не подписан по причине: ";
			Для Каждого Ошибка Из Ошибки Цикл
				ТекстОшибкиЭДО = ТекстОшибкиЭДО + Ошибка.ПодробноеПредставлениеОшибки  + Символы.ПС ;
			КонецЦикла;
			ДополнительныеПараметры.СтруктураСообщенийПриемки.ЭДО.Добавить(ТекстОшибкиЭДО);
		ИначеЕсли Результат.Свойство("ОшибкиФормирования") И Результат.ОшибкиФормирования.Количество() Тогда
			ДополнительныеПараметры.СтруктураСообщенийПриемки.ЭДО.Добавить("Документ ЭДО не подписан по причине: ошибка формирования документа");
		ИначеЕсли Результат.Итог.ОбработанныеДокументы.Количество > 0 Тогда
			ДополнительныеПараметры.СтруктураСообщенийПриемки.ЭДО.Добавить("Документ ЭДО подписан, сообщение обмена отправлено");
		Иначе
			Если Результат.Итог.ОбработанныеДокументы.Количество > 0 Тогда
				ДополнительныеПараметры.СтруктураСообщенийПриемки.ЭДО.Добавить("Документ ЭДО подписан, сообщение обмена отправлено");
			Иначе
				ДополнительныеПараметры.СтруктураСообщенийПриемки.ЭДО.Добавить("Документ ЭДО не подписан по причине: ошибка не определена");
			КонецЕсли;
		КонецЕсли;
	Иначе
		ДополнительныеПараметры.СтруктураСообщенийПриемки.ЭДО.Добавить("Документ ЭДО не подписан по причине: ошибка не определена");	
	КонецЕсли;
	ПараметрыФормыОтчета = Новый Структура("СтруктураСообщенийПриемки",ДополнительныеПараметры.СтруктураСообщенийПриемки);
	ОткрытьФорму("Документ.ЗаказПоставщику.Форма.ФормаОтчетаПриемки",ПараметрыФормыОтчета,ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры


&НаСервереБезКонтекста
Функция СтатусСоответствуетПодписанию(СсылкаЭДО)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостоянияДокументовЭДО.Состояние КАК Состояние
		|ИЗ
		|	РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
		|ГДЕ
		|	СостоянияДокументовЭДО.ЭлектронныйДокумент = &СсылкаЭДО";
	
	Запрос.УстановитьПараметр("СсылкаЭДО", СсылкаЭДО);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Если Выборка.Состояние = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Ложь;	
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ПодтвердитьПодписатьВетис(ДокументВетисСсылка,СтруктураСообщенийПриемки); 
	
	ТекстОшибки = "";
	НавигационнаяСсылкаФорматированнойСтроки = "";
	Если ДокументВетисСсылка <> Неопределено И ЗначениеЗаполнено(ДокументВетисСсылка) Тогда   
		Если Не ПолучитьЗначениеПроведен(ДокументВетисСсылка) Тогда
			СтруктураСообщенийПриемки.Ветис.Добавить("Подтверждение ВетИС не выполнено по причине: документ ВетИС не удалось провести");
			Возврат;
		КонецЕсли;
		//ДокументВетисОбъект = ДокументВетисСсылка.ПолучитьОбъект();
		ПараметрыФормы = Новый Структура("Ключ",ДокументВетисСсылка); 
		ФормаВетис = ПолучитьФорму("Документ.ВходящаяТранспортнаяОперацияВЕТИС.Форма.ФормаДокумента", ПараметрыФормы,ЭтотОбъект);
		НавигационнаяСсылкаФорматированнойСтроки =  ПолучитьСтатусВетисНаСервере(ФормаВетис.СтатусВЕТИСПредставление); 
		Если НавигационнаяСсылкаФорматированнойСтроки = "" Тогда
			ТекстОшибки = "навигационная ссылка статуса документа ВетИС не определена.";
		Иначе
			Если НавигационнаяСсылкаФорматированнойСтроки = "ПередатьДанные" Тогда
				
				ПараметрыПередачи = ИнтеграцияВЕТИСКлиентСервер.СтруктураПараметрыПередачи();
				ПараметрыПередачи.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные");
				
				ИнтеграцияВЕТИСКлиент.ПодготовитьКПередаче(ФормаВетис, ПараметрыПередачи);
				
			ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПроверитьКорректностьДанных" Тогда
				
				ПараметрыПередачи = ИнтеграцияВЕТИСКлиентСервер.СтруктураПараметрыПередачи();
				ПараметрыПередачи.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных");
				
				ИнтеграцияВЕТИСКлиент.ПодготовитьКПередаче(ФормаВетис, ПараметрыПередачи);
				
			ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПроверитьВозможностьПеремещения" Тогда
				
				ПараметрыПередачи = ИнтеграцияВЕТИСКлиентСервер.СтруктураПараметрыПередачи();
				ПараметрыПередачи.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеВозможностьПеремещения");
				
				ИнтеграцияВЕТИСКлиент.ПодготовитьКПередаче(ФормаВетис, ПараметрыПередачи);
				
			ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьФормуРегионализации"
				ИЛИ НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитеУсловияПеремещения" Тогда
				ТекстОшибки = "действие ""Указать номера транспортных средств"" доступно только в интерактивном режиме работы";
				
				//ОткрытьФормуРегионализации();
				
			ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьОперацию" Тогда
				
				ИнтеграцияВЕТИСКлиент.ОтменитьПоследнююОперацию(ДокументВетисСсылка);
				
			ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьПередачу" Тогда
				
				ИнтеграцияВЕТИСКлиент.ОтменитьПередачу(ДокументВетисСсылка);
				
			ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьПричинуОшибки" Тогда
				
				ТекстОшибки = "действие ""показать причину ошибки"" доступно только в интерактивном режиме работы";
				//ПараметрыОткрытияФормы = Новый Структура;
				//ПараметрыОткрытияФормы.Вставить("Документ", ДокументВетисСсылка);
				//ОткрытьФорму("Справочник.ВЕТИСПрисоединенныеФайлы.Форма.ФормаОшибки", ПараметрыОткрытияФормы, ФормаВетис);
				
			ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ВнестиНомераТранспортныхСредств" Тогда
				
				ПараметрыПередачи = ИнтеграцияВЕТИСКлиентСервер.СтруктураПараметрыПередачи();
				ПараметрыПередачи.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ВнеситеНомераТранспортныхСредств");
				
				ИнтеграцияВЕТИСКлиент.ПодготовитьКПередаче(ФормаВетис, ПараметрыПередачи);
				
			ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "УказатьНомераТранспортныхСредств" Тогда
				
				ТекстОшибки = "действие ""указать номера транспортных средств"" доступно только в интерактивном режиме работы";
				//ИмяОбщейФормы = "ПунктыМаршрутаВЕТИС";
				//ПараметрыФормы = ИнтеграцияВЕТИСКлиент.НастройкиОтображенияФормыМаршрута();
				//ПараметрыФормы.ТолькоПросмотр = ФормаВетис.ТолькоПросмотр Или ФормаВетис.РедактированиеФормыНедоступно;
				//ПараметрыФормы.АдресВоВременномХранилище = АдресВоВременномХранилищеТабличнойЧастиПунктыМаршрута();
				//ПараметрыФормы.РежимРаботыФормы.Вставить("ИзменятьСоставСтрок", Ложь);
				//ПараметрыФормы.РежимРаботыФормы.Вставить("ВидПунктаМаршрута", Новый Структура("ТолькоПросмотр", Истина));
				//ПараметрыФормы.РежимРаботыФормы.Вставить("ТипТранспорта", Новый Структура("ТолькоПросмотр", Истина));
				//
				//ПараметрыОповещения = "Маршрут";
				//ОбработкаОповещения = Новый ОписаниеОповещения("ОбновитьДанные", ФормаВетис, ПараметрыОповещения);
				//ОткрытьФорму("ОбщаяФорма." + ИмяОбщейФормы, ПараметрыФормы, ФормаВетис, УникальныйИдентификатор,,, ОбработкаОповещения);
				
			ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьАктОНесоответствии" Тогда
				
				ТекстОшибки = "действие ""открыть акт о несоответствии"" доступно только в интерактивном режиме работы";
				//ПараметрыОткрытияФормы = ИнтеграцияВЕТИСКлиентСервер.ПараметрыФормыАктаОНесоответствииВЕТИС();
				//ЗаполнитьЗначенияСвойств(ПараметрыОткрытияФормы,ФормаВетис.Объект);
				//ПараметрыОткрытияФормы.Основание = ФормаВетис.Объект.Ссылка;
				//Оповещение = Новый ОписаниеОповещения("ОбновитьДанные", ФормаВетис, "АктНесоответствия");
				//ПараметрыОбработчика = Новый Структура("Форма,ОповещениеПриЗавершении", ФормаВетис, Оповещение);
				//ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыАктаОНесоответствии",
				//	ИнтеграцияВЕТИССлужебныйКлиент, ПараметрыОбработчика);
				//ОткрытьФорму("Обработка.ЗаполнениеАктаОНесоответствииВЕТИС.Форма.Форма", ПараметрыОткрытияФормы,
				//	ЭтаФорма, ФормаВетис.УникальныйИдентификатор,,, ОписаниеОповещения, 
				//	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
			ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьКорректностьДокументаСозданногоЧерезWeb" Тогда
				
				ИнтеграцияВЕТИСКлиент.ПодтвердитьКорректностьДокументаСозданногоЧерезWeb(ФормаВетис.Объект.Ссылка);
				
			ИначеЕсли СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки, "НетДоступа") Тогда
				
				УточнениеГиперссылки = СтрЗаменить(НавигационнаяСсылкаФорматированнойСтроки,"НетДоступа","");
				Если ЗначениеЗаполнено(УточнениеГиперссылки) Тогда
					ТекстОшибки = УточнениеГиперссылки;
				Иначе
					ТекстОшибки = НСтр("ru='Действие недоступно текущему пользователю. Обратитесь к администратору.'");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекстОшибки = "ссылка на документ ВетИС не определена.";
	КонецЕсли;
	Если ТекстОшибки = "" Тогда 
		ТекстСообщения = "Подтверждение ВетИС выполнено. Запущено формирование сообщения";
	Иначе
		ТекстСообщения = "Подтверждение ВетИС не выполнено по причине: " + ТекстОшибки;
	КонецЕсли;
	СтруктураСообщенийПриемки.Ветис.Добавить(ТекстСообщения);
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьСтатусВетисНаСервере(СтатусФорматСтрока) 
	
	СсылкаФорматСтроки = "";	
	Статус = ЗначениеВСтрокуВнутр(СтатусФорматСтрока);
	поз = Найти(Статус, "<link");
	Если поз > 0 Тогда
		Статус = Сред(Статус, поз + 5);
		поз = Найти(Статус, ">");
		Если поз > 0 Тогда
			СсылкаФорматСтроки = СокрЛП(Лев(Статус, поз - 1));  
		КонецЕсли;
	КонецЕсли;
	Возврат СсылкаФорматСтроки; 
	
КонецФункции
 
&НаСервере
Процедура СоздатьПоступлениеНаСервере(ДокументВетисСсылка,СтруктураСообщенийПриемки,ВетисСформирован)
	МассивОснованийЭДО = Новый Массив;
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ОбрабатываемыйДокумент);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	*
	               |ИЗ
	               |	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	               |ГДЕ
	               |	ЗаказПоставщику.Ссылка = &Ссылка";
	РеквизитыЗаказа = Запрос.Выполнить().Выбрать();
	Если РеквизитыЗаказа.Следующий() = Ложь Тогда
		Сообщить("Не найден заказ");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбрабатываемыйДокумент.Организация) ИЛИ ОбрабатываемыйДокумент.ПокупкаВРозницу Тогда
		ПоступлениеОбъект = Документы.УЧ_ПоступлениеТоваров.СоздатьДокумент();
		ПоступлениеОбъект.Заполнить(ОбрабатываемыйДокумент);
		ПоступлениеОбъект.Дата = ?(ЗначениеЗаполнено(ДатаФактическогоПоступления), ДатаФактическогоПоступления,ДатаТТН);
		//ПоступлениеОбъект.Валюта = УЧ_Сервер.НациональнаяВалюта();
		//ПоступлениеОбъект.ДокОснование = ОбрабатываемыйДокумент;
		ПоступлениеОбъект.ВидОперации = Перечисления.ВидыПоступлений.Поступление; 
		//ПоступлениеОбъект.СчетКонтрагента = ПланыСчетов.Учетный.Счет6001();
		ПоступлениеОбъект.НомерВходящегоДокумента = НомерТТН;
		ПоступлениеОбъект.НомерВходящегоСчФ 	  = НомерСчФ;
		ПоступлениеОбъект.ДатаВходящегоДокумента  = ДатаТТН; //?(ЗначениеЗаполнено(ДатаФактическогоПоступления), ДатаФактическогоПоступления,ДатаТТН);
		ПоступлениеОбъект.ДатаВходящегоСчФ		  = ДатаСчФ;
		//Заполнение организации и склада из шапки
		Если ЗначениеЗаполнено(Организация) Тогда
			ПоступлениеОбъект.Организация = Организация;
		КонецЕсли;
		Если ЗначениеЗаполнено(Склад) Тогда
			ПоступлениеОбъект.Склад = Склад;
		КонецЕсли;
		//ПоступлениеОбъект.СуммаВходящегоДокумента = СуммаИтогоДок;
		//ПоступлениеОбъект.СуммаВключаетНДС = Истина;
		//ПоступлениеОбъект.ЦенаВключаетНДС = Истина;
		//ПоступлениеОбъект.УчитыватьНДС = Истина;
		//ЗаполнитьЗначенияСвойств(ПоступлениеОбъект, РеквизитыЗаказа, "Предприятие, Организация, Подразделение, Контрагент, Договор, Склад");
		
		ПоступлениеОбъект.ТабличнаяЧасть.Очистить();
		ПоступлениеОбъект.СерииНоменклатуры.Очистить();
		
		Для Каждого ТекСтрока Из ТЗ_ПланФакт Цикл  
			//Доработки для новой формы +++
			//Если ТекСтрока.КоличествоДок = 0 И ТекСтрока.КоличествоКОформлению = 0 Тогда
			//	Продолжить;
			//КонецЕсли;
			//НоваяСтрокаТЧ = ПоступлениеОбъект.ТабличнаяЧасть.Добавить();
			//НоваяСтрокаТЧ.Склад 		= ПоступлениеОбъект.Склад;
			//НоваяСтрокаТЧ.Номенклатура 	= ТекСтрока.Номенклатура;
			//НоваяСтрокаТЧ.СрокГодности 	= ТекСтрока.СрокГодности;
			//НоваяСтрокаТЧ.СерияНоменклатуры 	= ТекСтрока.СерияНоменклатуры;
			//НоваяСтрокаТЧ.КоличествоПоПервичнымДокументам 	= ТекСтрока.КоличествоДок;
			//НоваяСтрокаТЧ.Количество 						= ТекСтрока.КоличествоКОформлению;
			//НоваяСтрокаТЧ.Цена 								= ?(ПринятьПоЦене = 3, ТекСтрока.ЦенаДок, ТекСтрока.ЦенаЗаказ);
			//НоваяСтрокаТЧ.СтавкаНДС 						= сабОбщегоНазначенияБУХПовтИсп.СоотвВидовСтавокНДСБУХУУ().Получить(НоваяСтрокаТЧ.Номенклатура.ВидСтавкиНДС);
			//НоваяСтрокаТЧ.Сумма 							= НоваяСтрокаТЧ.Количество * НоваяСтрокаТЧ.Цена;
			//НоваяСтрокаТЧ.СуммаПоПервичнымДокументам		= ТекСтрока.СуммаДок;
			//НоваяСтрокаТЧ.СуммаНДС							= ТекСтрока.Сумма / ((100+ТекСтрока.СтавкаНДССтавка)/100) * (ТекСтрока.СтавкаНДССтавка/100);
			//НоваяСтрокаТЧ.СуммаНДСПоПервичнымДокументам		= ТекСтрока.СуммаНДСДок; 
			Если Не ТекСтрока.ВключатьВДокументОтгрузки Тогда
				Продолжить; 
			КонецЕсли;
			Если ТекСтрока.КоличествоЭДО = 0 И ТекСтрока.КоличествоФакт = 0 Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрокаТЧ = ПоступлениеОбъект.ТабличнаяЧасть.Добавить();
			НоваяСтрокаТЧ.Склад 		= ПоступлениеОбъект.Склад;
			НоваяСтрокаТЧ.Номенклатура 	= ТекСтрока.Номенклатура;
			НоваяСтрокаТЧ.СрокГодности 	= ТекСтрока.СрокГодности;
			НоваяСтрокаТЧ.СерияНоменклатуры 	= ТекСтрока.СерияНоменклатуры;
			НоваяСтрокаТЧ.КоличествоПоПервичнымДокументам 	= ТекСтрока.КоличествоЭДО;
			НоваяСтрокаТЧ.Количество 						= ТекСтрока.КоличествоФакт;
			НоваяСтрокаТЧ.Цена 								= ?(ПринятьПоЦене = 3, ТекСтрока.ЦенаДок, ТекСтрока.ЦенаЗаказ);
			НоваяСтрокаТЧ.СтавкаНДС 						= сабОбщегоНазначенияБУХПовтИсп.СоотвВидовСтавокНДСБУХУУ().Получить(НоваяСтрокаТЧ.Номенклатура.ВидСтавкиНДС);
			НоваяСтрокаТЧ.Сумма 							= ТекСтрока.Сумма;
			НоваяСтрокаТЧ.СуммаПоПервичнымДокументам		= ТекСтрока.СуммаЭДО;
			НоваяСтрокаТЧ.СуммаНДС							= ТекСтрока.СуммаНДСДок;
			НоваяСтрокаТЧ.СуммаНДСПоПервичнымДокументам		= ТекСтрока.СуммаНДСЭДО;
            //---
			Если ЗначениеЗаполнено(ТекСтрока.ЗначениеШтрихкода) И НЕ ПоступлениеОбъект.ШтрихкодыУпаковок.НайтиСтроки(Новый Структура("ЗначениеШтрихкода", ТекСтрока.ЗначениеШтрихкода)).Количество() Тогда
				НоваяСтрокаШК = ПоступлениеОбъект.ШтрихкодыУпаковок.Добавить();
				НоваяСтрокаШК.ЗначениеШтрихкода = ТекСтрока.ЗначениеШтрихкода;	
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ТекСтрока.СерияНоменклатуры) И Не ТекСтрока.НесколькоСерий Тогда 
				Если Не ТекСтрока.СрокГодности = Дата('00010101') Тогда
					НоваяСтрокаТЧ.СерияНоменклатуры = Справочники.СерииНоменклатуры.СоздатьПолучитьСерию(НоваяСтрокаТЧ.Номенклатура, ТекСтрока.СрокГодности, ТекСтрока.СрокГодности2, ТекСтрока.ГоденДо);	
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Для каждого ТекСтрокаСерия Из СерииНоменклатуры Цикл
			НоваяСтрокаТЧ = ПоступлениеОбъект.СерииНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, ТекСтрокаСерия);
			Если Не ЗначениеЗаполнено(ТекСтрокаСерия.СерияНоменклатуры) Тогда
				Если Не ТекСтрокаСерия.ДатаПроизводства = Дата('00010101') Тогда
					НоваяСтрокаТЧ.СерияНоменклатуры = Справочники.СерииНоменклатуры.СоздатьПолучитьСерию(ТекСтрокаСерия.Номенклатура, ТекСтрокаСерия.ДатаПроизводства, ТекСтрокаСерия.СрокГодности2, ТекСтрокаСерия.ГоденДо);
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		ПоступлениеОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент(); 
		//ПоступлениеОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары;
		ПоступлениеОбъект.Заполнить(ОбрабатываемыйДокумент);
		ПоступлениеОбъект.Дата = ?(ЗначениеЗаполнено(ДатаФактическогоПоступления), ДатаФактическогоПоступления,ДатаТТН);
		ПоступлениеОбъект.НомерВходящегоДокумента = НомерТТН;
		ПоступлениеОбъект.ДатаВходящегоДокумента  = ДатаТТН; //?(ЗначениеЗаполнено(ДатаФактическогоПоступления), ДатаФактическогоПоступления,ДатаТТН);
		ПоступлениеОбъект.ЭтоУниверсальныйДокумент	= РеквизитыСчФСовпадают;
		
		ПоступлениеОбъект.Товары.Очистить();
		Для Каждого ТекСтрока Из ТЗ_ПланФакт Цикл
			//Доработки для новой формы +++
			//Если ТекСтрока.КоличествоДок = 0 И ТекСтрока.КоличествоКОформлению = 0 Тогда
			//	Продолжить;
			//КонецЕсли;
			//НоваяСтрокаТЧ = ПоступлениеОбъект.Товары.Добавить();
			////НоваяСтрокаТЧ.Склад 		= ПоступлениеОбъект.Склад;
			//НоваяСтрокаТЧ.Номенклатура 	= ТекСтрока.Номенклатура;
			//НоваяСтрокаТЧ.СерияНоменклатуры 	= ТекСтрока.СерияНоменклатуры;
			////НоваяСтрокаТЧ.КоличествоПоПервичнымДокументам 	= ТекСтрока.КоличествоДок;
			//НоваяСтрокаТЧ.Количество 						= ТекСтрока.КоличествоКОформлению;
			//НоваяСтрокаТЧ.Цена 								= ?(ПринятьПоЦене = 3, ТекСтрока.ЦенаДок, ТекСтрока.ЦенаЗаказ);
			//НоваяСтрокаТЧ.СтавкаНДС 						= сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСУУБУХ().Получить(ТекСтрока.СтавкаНДС);
			//НоваяСтрокаТЧ.Сумма 							= НоваяСтрокаТЧ.Количество * НоваяСтрокаТЧ.Цена;
			////НоваяСтрокаТЧ.СуммаПоПервичнымДокументам		= ТекСтрока.СуммаДок;
			//НоваяСтрокаТЧ.СуммаНДС							= ТекСтрока.Сумма / ((100+ТекСтрока.СтавкаНДССтавка)/100) * (ТекСтрока.СтавкаНДССтавка/100);
			////НоваяСтрокаТЧ.СуммаНДСПоПервичнымДокументам		= ТекСтрока.СуммаНДСДок;
			Если Не ТекСтрока.ВключатьВДокументОтгрузки Тогда
				Продолжить; 
			КонецЕсли;
			Если ТекСтрока.КоличествоЭДО = 0 И ТекСтрока.КоличествоФакт = 0 Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрокаТЧ = ПоступлениеОбъект.Товары.Добавить();
			//НоваяСтрокаТЧ.Склад 		= ПоступлениеОбъект.Склад;
			НоваяСтрокаТЧ.Номенклатура 	= ТекСтрока.Номенклатура;
			НоваяСтрокаТЧ.СерияНоменклатуры 	= ТекСтрока.СерияНоменклатуры;
			//НоваяСтрокаТЧ.КоличествоПоПервичнымДокументам 	= ТекСтрока.КоличествоДок;
			НоваяСтрокаТЧ.Количество 						= ТекСтрока.КоличествоФакт;
			НоваяСтрокаТЧ.Цена 								= ТекСтрока.ЦенаДокБезНДС;
			НоваяСтрокаТЧ.СтавкаНДС 						= сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСУУБУХ().Получить(ТекСтрока.СтавкаНДС);
			НоваяСтрокаТЧ.Сумма 							= ТекСтрока.Сумма;
			//НоваяСтрокаТЧ.СуммаПоПервичнымДокументам		= ТекСтрока.СуммаДок;
			НоваяСтрокаТЧ.СуммаНДС							= ТекСтрока.СуммаНДСДок;
			//НоваяСтрокаТЧ.СуммаНДСПоПервичнымДокументам		= ТекСтрока.СуммаНДСДок;
            //---
			НоваяСтрокаТЧ.СтранаПроисхождения = ТекСтрока.СтранаПроисхождения;
			НоваяСтрокаТЧ.НомерГТД = ТекСтрока.ГТД;
			Если ЗначениеЗаполнено(ТекСтрока.ЗначениеШтрихкода) И НЕ ПоступлениеОбъект.ШтрихкодыУпаковок.НайтиСтроки(Новый Структура("ЗначениеШтрихкода", ТекСтрока.ЗначениеШтрихкода)).Количество() Тогда
				НоваяСтрокаШК = ПоступлениеОбъект.ШтрихкодыУпаковок.Добавить();
				НоваяСтрокаШК.ЗначениеШтрихкода = ТекСтрока.ЗначениеШтрихкода;	
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ТекСтрока.СерияНоменклатуры) И Не ТекСтрока.НесколькоСерий Тогда
				Если Не ТекСтрока.СрокГодности = Дата('00010101') Тогда
					НоваяСтрокаТЧ.СерияНоменклатуры = Справочники.СерииНоменклатуры.СоздатьПолучитьСерию(НоваяСтрокаТЧ.Номенклатура, ТекСтрока.СрокГодности, ТекСтрока.СрокГодности2, ТекСтрока.ГоденДо);	
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		НовОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(НовОбъект, ПоступлениеОбъект,,"Дата, Номер");
		//НовОбъект.ВидОперации = Перечисления.ВидыПоступлений.Поступление;
		//НовОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары;
		НовОбъект.Заказ = ОбрабатываемыйДокумент;
		НовОбъект.СуммаВключаетНДС = Истина;
		//НовОбъект.ДокументБезНДС = Ложь;
		Для каждого ТекСтрока Из ПоступлениеОбъект.Товары Цикл
			НоваяСтрока = НовОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЦикла;
		
		ЗаполнениеДокументов.Заполнить(НовОбъект, ПоступлениеОбъект, Истина);
		ПоступлениеОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары;
		ПоступлениеОбъект.Товары.Очистить();
		
		МассивНоменклатуры = Новый Массив;
		
		Для каждого ТекСтрока Из НовОбъект.Товары Цикл
			НоваяСтрока = ПоступлениеОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			МассивНоменклатуры.Добавить(НоваяСтрока.Номенклатура);
		КонецЦикла;
		
		Для каждого ТекСтрокаСерия Из СерииНоменклатуры Цикл
			НоваяСтрокаТЧ = ПоступлениеОбъект.СерииНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, ТекСтрокаСерия);
			Если Не ЗначениеЗаполнено(ТекСтрокаСерия.СерияНоменклатуры) Тогда
				Если Не ТекСтрокаСерия.ДатаПроизводства = Дата('00010101') Тогда
					НоваяСтрокаТЧ.СерияНоменклатуры = Справочники.СерииНоменклатуры.СоздатьПолучитьСерию(ТекСтрокаСерия.Номенклатура, ТекСтрокаСерия.ДатаПроизводства, ТекСтрокаСерия.СрокГодности2, ТекСтрокаСерия.ГоденДо);	
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	//Попытка //на всякий случай
	//	ДопРеквизит = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Создан обработкой заказов");
	//	Если ЗначениеЗаполнено(ДопРеквизит) Тогда
	//		НоваяСтрока = ПоступлениеОбъект.ДополнительныеРеквизиты.Добавить();
	//		НоваяСтрока.Свойство = ДопРеквизит;
	//		НоваяСтрока.Значение = Истина;
	//	КонецЕсли;
	//Исключение
	//КонецПопытки;
	Если ЗначениеЗаполнено(Организация) Тогда
			ПоступлениеОбъект.Организация = Организация;
		КонецЕсли;
		Если ЗначениеЗаполнено(Склад) Тогда
			ПоступлениеОбъект.Склад = Склад;
		КонецЕсли;

	Попытка
		ПоступлениеОбъект.Записать(РежимЗаписиДокумента.Проведение);
		МассивОснованийЭДО.Добавить(ПоступлениеОбъект.Ссылка);
		СтруктураСообщенийПриемки.ДокументОтгрузки.Добавить("Создан документ: " + ПоступлениеОбъект.Ссылка);
	Исключение
		//Сообщить("Не удалось провести поступление! " + ОписаниеОшибки());
		СтруктураСообщенийПриемки.ДокументОтгрузки.Добавить("Документ не создан по причине: " + ОписаниеОшибки());   
		СтруктураСообщенийПриемки.Ветис.Добавить("Документ не создан по причине: не удалось создать основной документ отгрузки");

		//ПоступлениеОбъект.Записать(РежимЗаписиДокумента.Запись);
		Возврат;
	КонецПопытки;
	//Сообщить("Создан документ " + ПоступлениеОбъект.Ссылка);
	СозданныйДокумент = ПоступлениеОбъект.Ссылка;
	
	Если НЕ БезСФ Тогда
		//создаем сч/ф
		Если НЕ РеквизитыСчФСовпадают Тогда
			НовыйСчФ = Документы.СчетФактураПолученный.СоздатьДокумент();
			НовыйСчФ.Заполнить(СозданныйДокумент);
			НовыйСчФ.НомерВходящегоДокумента = НомерСчФ;
			НовыйСчФ.ДатаВходящегоДокумента = ДатаСчФ;
			НовыйСчФ.Записать(РежимЗаписиДокумента.Проведение);
			СтруктураСообщенийПриемки.ДокументОтгрузки.Добавить("Создан документ: " + НовыйСчФ.Ссылка);
		Иначе
			НовыйСчФ = Документы.СчетФактураПолученный.СоздатьДокумент();
			НовыйСчФ.Заполнить(СозданныйДокумент);
			НовыйСчФ.НомерВходящегоДокумента = НомерТТН;
			НовыйСчФ.ДатаВходящегоДокумента = ДатаТТН;
			НовыйСчФ.Записать(РежимЗаписиДокумента.Проведение);
			СтруктураСообщенийПриемки.ДокументОтгрузки.Добавить("Создан документ: " + НовыйСчФ.Ссылка);
		КонецЕсли; 
		МассивОснованийЭДО.Добавить(НовыйСчФ.Ссылка);
		
	КонецЕсли;
	
	//Сопоставление документов учета с ЭДО  
	Если ЗначениеЗаполнено(ВходящаяУПДЭДО) Тогда
		ИнтеграцияЭДО.УстановитьСвязьЭлектронногоДокументаСОбъектомУчета(ВходящаяУПДЭДО,ПоступлениеОбъект.Ссылка);
		Если НЕ БезСФ Тогда
			ИнтеграцияЭДО.УстановитьСвязьЭлектронногоДокументаСОбъектомУчета(ВходящаяУПДЭДО,НовыйСчФ.Ссылка);
		КонецЕсли;
		СтруктураСообщенийПриемки.ЭДО.Добавить("Установлена связь документов отгрузки с документом ЭДО: " + ВходящаяУПДЭДО);
	КонецЕсли;
	//создаем ВетИС
	//Заполняем коэффициенты для ед. измерения ВетИС
	УстановитьПривилегированныйРежим(Истина);
	Для каждого СтрокаТЧ Из ТЗ_ПланФакт Цикл
		РезультатКоэффициент = ПолучитьКоэффициентЕдиницыИзмеренияВЕТИС(СтрокаТЧ.ЕдИзмВетис, СтрокаТЧ.Номенклатура,СтрокаТЧ.НоменклатураВетИС);
		Если РезультатКоэффициент = Неопределено Тогда	
			Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура)
				И ЗначениеЗаполнено(СтрокаТЧ.ЕдИзмВетис) Тогда
				КоличествоВЕТИС = 0;
				Для Каждого ЭлементСпрВСД Из СтрокаТЧ.НакладныеВетИС Цикл
					КоличествоВЕТИС = КоличествоВЕТИС + СправочникВСДПолучитьКоличество(ЭлементСпрВСД.Значение);
				КонецЦикла;
				НаборЗаписей = РегистрыСведений.КоэффициентыЕдиницИзмеренияВЕТИС.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаТЧ.Номенклатура, Истина);
				НаборЗаписей.Отбор.Продукция.Установить(СтрокаТЧ.НоменклатураВетИС, Истина);
				НаборЗаписей.Отбор.ЕдиницаИзмеренияВЕТИС.Установить(СтрокаТЧ.ЕдИзмВетис, Истина);
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.Номенклатура            = СтрокаТЧ.Номенклатура;
				НоваяЗапись.Продукция               = СтрокаТЧ.НоменклатураВетИС;
				НоваяЗапись.ЕдиницаИзмеренияВЕТИС   = СтрокаТЧ.ЕдИзмВетис;
				Количество                          = СтрокаТЧ.КоличествоФакт;
				НоваяЗапись.КоэффициентЕдиницыВЕТИС = ?(Количество = 0, 1, КоличествоВЕТИС/Количество);
				Попытка
					НаборЗаписей.Записать();
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	
	Если Не ЗначениеЗаполнено(НакладнаяВЕТИС) Тогда
		СтруктураНекорректныхДанных = ЕстьНекорректныеДанныеВСД(Ложь);	
		Если СтруктураНекорректныхДанных.ЕстьНекорректныеДанные Тогда
			СтруктураСообщенийПриемки.Ветис.Добавить("Документ ВетИС не сформирован по причине: Ветеринарно-сопроводительные документы в табличной части имеют разные ключевые данные (Номер ТТН, Дата ТТН, Контрагент)");
			//Сообщить("Документ ВетИС не создан по причине: Ветеринарно-сопроводительные документы в табличной части имеют разные ключевые данные (Номер ТТН, Дата ТТН, Контрагент)");
		Иначе
			МассивВСД = Новый Массив;	
			Для каждого СтрокаТЧ Из ТЗ_ПланФакт Цикл
				Если СтрокаТЧ.ВключатьВДокументОтгрузки Тогда
					Если СтрокаТЧ.НакладныеВетИС.Количество() = 0 Тогда
						Продолжить;
					Иначе
						Для Каждого ЭлементВСД ИЗ СтрокаТЧ.НакладныеВетИС Цикл
							МассивВСД.Добавить(ЭлементВСД.Значение);
						КонецЦикла;
					КонецЕсли; 
				КонецЕсли;
			КонецЦикла;
			Если МассивВСД.Количество() > 0 Тогда
				НоваяВхТТН_ВЕТИС = Документы.ВходящаяТранспортнаяОперацияВЕТИС.СоздатьДокумент(); 
				НоваяВхТТН_ВЕТИС.Дата = ?(ЗначениеЗаполнено(ДатаФактическогоПоступления),ДатаФактическогоПоступления,ДатаТТН);
				НоваяВхТТН_ВЕТИС.Заполнить(МассивВСД);
				НоваяВхТТН_ВЕТИС.ДокументОснование = СозданныйДокумент;
				НоваяВхТТН_ВЕТИС.ДатаПоступленияГрузаНачалоПериода = ДатаФактическогоПоступления;
				//НоваяВхТТН_ВЕТИС.ДатаПоступленияГрузаКонецПериода = ДатаФактическогоПоступления; 
				НоваяВхТТН_ВЕТИС.ДатаПоступленияГрузаТочностьЗаполнения = Перечисления.ТочностьЗаполненияПериодаВЕТИС.ДДММГГГГ;
				ЗаполнитьДанныеАдресовМаршрутаПоОснованиям(НоваяВхТТН_ВЕТИС, МассивВСД);
				Попытка 
					НоваяВхТТН_ВЕТИС.Записать(РежимЗаписиДокумента.Проведение);
					НакладнаяВЕТИС = НоваяВхТТН_ВЕТИС.Ссылка;
					СтруктураСообщенийПриемки.Ветис.Добавить("Сформирован документ ВетИС " + НоваяВхТТН_ВЕТИС.Ссылка + " (проведен)");
					//Сообщить("Сформирован документ ВетИС " + НоваяВхТТН_ВЕТИС.Ссылка);
					ДокументВетисСсылка = НоваяВхТТН_ВЕТИС.Ссылка;
					ВетисСформирован = Истина;
				Исключение
					Попытка
						НоваяВхТТН_ВЕТИС.Записать(РежимЗаписиДокумента.Запись);
						НакладнаяВЕТИС = НоваяВхТТН_ВЕТИС.Ссылка;
						СтруктураСообщенийПриемки.Ветис.Добавить("Сформирован документ ВетИС " + НоваяВхТТН_ВЕТИС.Ссылка + " (не проведен)");
						//Сообщить("Сформирован документ ВетИС " + НоваяВхТТН_ВЕТИС.Ссылка);
						ДокументВетисСсылка = НоваяВхТТН_ВЕТИС.Ссылка; 
						ВетисСформирован = Истина;
					Исключение
						СтруктураСообщенийПриемки.Ветис.Добавить("Документ ВетИС не был сформирован по причине: " + ОписаниеОшибки());
						//Сообщить("Документ ВетИС не был сформирован по причине: " + ОписаниеОшибки());  
					КонецПопытки;
				КонецПопытки;
			Иначе
				СтруктураСообщенийПриемки.Ветис.Добавить("Документ ВетИС не был сформирован по причине: не заполнены ВСД в табличной части");
				//Сообщить("Документ ВетИС не был сформирован по причине: не заполнены ВСД в табличной части.");
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	
	//удаляем черновик
	//УдалитьИзЧерновиковНаСервере();
	
	//меняем статус заказа
	//Если Не ОбрабатываемыйДокумент.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт Тогда		
	//	ЗаказОб = ОбрабатываемыйДокумент.ПолучитьОбъект();
	//	ЗаказОб.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт;
	//	ЗаказОб.Записать(РежимЗаписиДокумента.Запись);
	//КонецЕсли;
	
	//МенеджерЗаписи = РегистрыСведений.АвтосохранениеДанных.СоздатьМенеджерЗаписи();
	//МенеджерЗаписи.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	//МенеджерЗаписи.Объект		= ОбрабатываемыйДокумент;
	//МенеджерЗаписи.Прочитать();
	//МенеджерЗаписи.Удалить();
	СохранитьВЧерновикНаСервере();
	Элементы.СоздатьПоступление.Доступность = Ложь;
	
КонецПроцедуры

Функция ПолучитьКоэффициентЕдиницыИзмеренияВЕТИС(ЕдиницаИзмеренияВЕТИС, Номенклатура, Продукция)	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ЕдиницаИзмеренияВЕТИС", ЕдиницаИзмеренияВЕТИС);
	Запрос.УстановитьПараметр("Продукция", Продукция);
	запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КоэффициентыЕдиницИзмеренияВЕТИС.КоэффициентЕдиницыВЕТИС КАК КоэффициентЕдиницыВЕТИС
	|ИЗ
	|	РегистрСведений.КоэффициентыЕдиницИзмеренияВЕТИС КАК КоэффициентыЕдиницИзмеренияВЕТИС
	|ГДЕ
	|	КоэффициентыЕдиницИзмеренияВЕТИС.Номенклатура = &Номенклатура
	|	И КоэффициентыЕдиницИзмеренияВЕТИС.ЕдиницаИзмеренияВЕТИС = &ЕдиницаИзмеренияВЕТИС
	|	И КоэффициентыЕдиницИзмеренияВЕТИС.Продукция = &Продукция";
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат ?(ЗначениеЗаполнено(Результат.КоэффициентЕдиницыВЕТИС), Результат.КоэффициентЕдиницыВЕТИС, Неопределено);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СоздатьВозврат(Команда)

	Если ТЗ_ТоварыВозврат.Итог("Сумма") = 0 Тогда
		Предупреждение("Таблица не заполнена");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СозданныйДокумент) Тогда
		Сообщить("Документ поступления уже был создан");
		Возврат;
	КонецЕсли;
	
	СоздатьВозвратНаСервере();
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьВозвратНаСервере()
	
	ВозвратОбъект = Документы.УЧ_ВозвратТоваровПоставщику.СоздатьДокумент();
	
	ЗаполнитьЗначенияСвойств(ВозвратОбъект, ОбрабатываемыйДокумент, , "Дата, Номер"); 
	ВозвратОбъект.Дата = ТекущаяДата();
	ВозвратОбъект.СчетКонтрагента = ПланыСчетов.Учетный.ПоставщикиОсн;
	ВозвратОбъект.ДокОснование = ОбрабатываемыйДокумент;
	Для Каждого ТекСтрока Из ТЗ_ТоварыВозврат Цикл
		СтрокаТЧ = ВозвратОбъект.Товары.Добавить();
		СтрокаТЧ.Количество = ТекСтрока.КоличествоКОформлению;
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, ТекСтрока);
	КонецЦикла;	
	
	Попытка
		ВозвратОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Сообщить("Не удалось провести возврат! " + ОписаниеОшибки());
		//ВозвратОбъект.Записать(РежимЗаписиДокумента.Запись);
		Возврат;
	КонецПопытки;
	Сообщить("Создан документ " + ВозвратОбъект.Ссылка);
	СозданныйДокумент = ВозвратОбъект.Ссылка;
		
	//меняем статус заказа
	Если Не ОбрабатываемыйДокумент.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт Тогда		
		ЗаказОб = ОбрабатываемыйДокумент.ПолучитьОбъект();
		ЗаказОб.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт;
		ЗаказОб.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПеремещение(Команда)
	
	Если ТЗ_Перемещение.Итог("КоличествоКОформлению") = 0 Тогда
		Предупреждение("Таблица не заполнена");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СозданныйДокумент) Тогда
		Сообщить("Документ поступления уже был создан");
		Возврат;
	КонецЕсли;
	
	СоздатьПеремещениеНаСервере();
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПеремещениеНаСервере()
	
	ПеремещениеИз = ПолучитьПеремещениеНаПодразделение(ОбрабатываемыйДокумент);
	Если ПеремещениеИз = Неопределено Тогда
		Сообщить("Не найдена отгрузка по этому заказу");
		Возврат;
	КонецЕсли;
	
	ПеремещениеОбъект = Документы.УЧ_ПеремещениеТоваров.СоздатьДокумент();
	ПеремещениеОбъект.Дата = ТекущаяДата();
	ПеремещениеОбъект.ВидОперации = Перечисления.ВидыПеремещений.ПоступлениеСОбособленногоПодразделения;
	ПеремещениеОбъект.ДокОснование = ПеремещениеИз;

	ЗаполнитьЗначенияСвойств(ПеремещениеОбъект, ПеремещениеИз, ,"Дата, Номер, Комментарий, ДокОснование, ВидОперации");
	
	Для Каждого ТекСтрока Из ТЗ_Перемещение Цикл
		НоваяСтрока = ПеремещениеОбъект.ТабличнаяЧасть.Добавить();
		НоваяСтрока.Количество 		= ТекСтрока.КоличествоКОформлению;
		НоваяСтрока.Номенклатура	= ТекСтрока.Номенклатура;
		НоваяСтрока.Сумма 			= ТекСтрока.Сумма;
		НоваяСтрока.СчетУчетаБУ 	 = ТекСтрока.НовыйСчетУчетаБУ;
		НоваяСтрока.НовыйСчетУчетаБУ = ТекСтрока.СчетУчетаБУ;
	КонецЦикла;
	
	Попытка
		ПеремещениеОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Сообщить("Не удалось провести перемещение! " + ОписаниеОшибки());
		//ПеремещениеОбъект.Записать(РежимЗаписиДокумента.Запись);
		Возврат;
	КонецПопытки;
	Сообщить("Создан документ " + ПеремещениеОбъект.Ссылка);
	СозданныйДокумент = ПеремещениеОбъект.Ссылка;
		
	//меняем статус заказа
	Если Не ОбрабатываемыйДокумент.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт Тогда		
		ЗаказОб = ОбрабатываемыйДокумент.ПолучитьОбъект();
		ЗаказОб.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт;
		ЗаказОб.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
КонецПроцедуры

&НасервереБезКонтекста
Функция ПолучитьПеремещениеНаПодразделение(Заказ)
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Заказ);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ЗаказПоставщику.Ссылка КАК ЗаказСсылка,
	               |	УЧ_ПеремещениеТоваров.Ссылка КАК ПеремещениеСсылка
	               |ИЗ
	               |	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УЧ_ПеремещениеТоваров КАК УЧ_ПеремещениеТоваров
	               |		ПО ЗаказПоставщику.Ссылка = УЧ_ПеремещениеТоваров.ДокОснование
	               |ГДЕ
	               |	ЗаказПоставщику.Ссылка = &Ссылка
	               |	И НЕ УЧ_ПеремещениеТоваров.ПометкаУдаления
	               |	И УЧ_ПеремещениеТоваров.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыПеремещений.ПеремещениеНаОбособленноеПодразделение)";

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ПеремещениеСсылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийТЧ

&НаКлиенте
Процедура Скан_НоменклатураПриИзменении(Элемент)
	
	Если Скан_Количество = 0 Тогда
		Возврат;
	КонецЕсли;

	Если Скан_РежимРучногоВводаКоличества Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.Скан_Количество;
	Иначе
		ЭтаФорма.ТекущийЭлемент = Элементы.Скан_Штрихкод;
		Если ПроверкаНаличияСканНоменклатурыВЗаказе() Тогда
			ДобавитьСканНоменклатуруВТовары();
			РассчитатьСуммуПланФакта();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Скан_КоличествоПриИзменении(Элемент)
	
	Если Скан_Количество > 1000000 Тогда
		Скан_Количество = 0;
		Предупреждение("Слишком большое количество, введите еще раз");
		ПодключитьОбработчикОжидания("АктивироватьПолеСканКоличество", 0.1, Истина);		
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Скан_Штрихкод) ИЛИ ЗначениеЗаполнено(Скан_Номенклатура) И ПроверкаНаличияСканНоменклатурыВЗаказе() Тогда
		
		ДобавитьСканНоменклатуруВТовары();
		РассчитатьСуммуПланФакта();
		
		СтрокиШтрихкод = ТЗ_ПланФакт.НайтиСтроки(новый Структура("Штрихкод", Скан_Штрихкод));
		Если НЕ ЭтоМобильныйКлиент И СтрокиШтрихкод.Количество() > 0 Тогда
			Элементы.ТЗ_ПланФакт.ТекущаяСтрока = СтрокиШтрихкод[0].ПолучитьИдентификатор();
		КонецЕсли;
		ЗаполнитьПодвалТЗ();
		
		Скан_Штрихкод = "";
		Скан_Номенклатура = Неопределено;
		Скан_Количество	= 0;
		ДатаСерии = Дата('00010101');
		ГоденДо = Дата('00010101');
		СерияНоменклатуры = Неопределено;
		СрокГодности = 0;
		//Элементы.Скан_Номенклатура.ТолькоПросмотр = Истина;		
		ЭтаФорма.ТекущийЭлемент = Элементы.Скан_Штрихкод;

	КонецЕсли;
			
КонецПроцедуры

//&НаКлиенте
//Процедура ДатаСерииПриИзменении(Элемент)
//	
//	Если ЗначениеЗаполнено(Скан_Штрихкод) И ПроверкаНаличияСканНоменклатурыВЗаказе() Тогда
//		ДобавитьСканНоменклатуруВТовары();
//		РассчитатьСуммуПланФакта();
//		
//		СтрокиШтрихкод = ТЗ_ПланФакт.НайтиСтроки(новый Структура("Штрихкод", Скан_Штрихкод));
//		Если СтрокиШтрихкод.Количество() > 0 Тогда
//			Элементы.ТЗ_ПланФакт.ТекущаяСтрока = СтрокиШтрихкод[0].ПолучитьИдентификатор();
//		КонецЕсли;
//		ЭтаФорма.ТекущийЭлемент = Элементы.Скан_Штрихкод;
//		ЗаполнитьПодвалТЗ();
//		
//		Скан_Штрихкод = "";
//		Скан_Номенклатура = Неопределено;
//		Скан_Количество	= 0;
//		ДатаСерии = Дата('00010101');
//		//Если ЭтоМобильныйКлиент Тогда
//		//	Элементы.Скан_Номенклатура.Видимость = Ложь;
//		//Иначе
//			Элементы.Скан_Номенклатура.ТолькоПросмотр = Истина;		
//		//КонецЕсли;
//		
//	КонецЕсли;
//	
//КонецПроцедуры

&НаКлиенте
Процедура Скан_ВводКоличестваПриИзменении(Элемент)
	
	//Элементы.Скан_Количество.Видимость = Скан_РежимРучногоВводаКоличества;
	Если Скан_РежимРучногоВводаКоличества Тогда
		Элементы.Скан_Количество.Доступность = Истина;
		Скан_Количество = 0;
	Иначе
		Элементы.Скан_Количество.Доступность = Ложь;
		Скан_Количество = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Скан_ШтрихкодПриИзменении(Элемент)
	
	Если ЭтоМобильныйКлиент Тогда
		Элементы.НомерТТН.ПропускатьПриВводе = Истина;
		Элементы.ДатаТТН.ПропускатьПриВводе = Истина;
		Элементы.ТЗ_ПланФакт.ПропускатьПриВводе = Истина;
	КонецЕсли;
	
	Скан_ШтрихкодПервичный = Скан_Штрихкод;
	
	СтруктураНоменклатура = сабОперОбщегоНазначения.ПодобратНоменклатуруПоШК(Скан_Штрихкод);
	Если ТипЗнч(СтруктураНоменклатура) = Тип("Структура") Тогда
		Скан_Номенклатура = СтруктураНоменклатура.Номенклатура;
		Скан_Количество   = СтруктураНоменклатура.Количество;
	Иначе
		Скан_Номенклатура = СтруктураНоменклатура;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Скан_Номенклатура) Тогда
		//Если ЭтоМобильныйКлиент Тогда
		//	Элементы.Скан_Номенклатура.Видимость = Ложь;
		//Иначе
			//Элементы.Скан_Номенклатура.ТолькоПросмотр = Истина;		
		//КонецЕсли;
		
		Если Скан_РежимРучногоВводаКоличества Тогда
			Если НЕ ЭтоМобильныйКлиент Тогда
				Если ИспользоватьСерийныйУчет Тогда
					//ЭтаФорма.ТекущийЭлемент = Элементы.ДатаСерии;
					ЭтаФорма.ТекущийЭлемент = Элементы.СерияНоменклатуры;
				Иначе
					ЭтаФорма.ТекущийЭлемент = Элементы.Скан_Количество;
				КонецЕсли;
			КонецЕсли;			
		Иначе
			ПодключитьОбработчикОжидания("АктивироватьПолеСканШтрихкод", 0.1, Истина);		
			Если ПроверкаНаличияСканНоменклатурыВЗаказе() Тогда
				ДобавитьСканНоменклатуруВТовары();
				РассчитатьСуммуПланФакта();
				СтрокиШтрихкод = ТЗ_ПланФакт.НайтиСтроки(новый Структура("Штрихкод", Скан_Штрихкод));
				Если НЕ ЭтоМобильныйКлиент И СтрокиШтрихкод.Количество() > 0 Тогда
					Элементы.ТЗ_ПланФакт.ТекущаяСтрока = СтрокиШтрихкод[0].ПолучитьИдентификатор();
				КонецЕсли;
				ЭтаФорма.ТекущийЭлемент = Элементы.Скан_Штрихкод;
				ЗаполнитьПодвалТЗ();
				
				Скан_Штрихкод = "";
				Скан_Номенклатура = Неопределено;
				Скан_Количество	= 0;
			КонецЕсли;
		КонецЕсли;
		
		//Элементы.Скан_Номенклатура.ТолькоПросмотр = Истина;
		СтрокиНоменклатура = ТЗ_ПланФакт.НайтиСтроки(новый Структура("Номенклатура", Скан_Номенклатура));
		Если НЕ ЭтоМобильныйКлиент И СтрокиНоменклатура.Количество() > 0 Тогда
			Элементы.ТЗ_ПланФакт.ТекущаяСтрока = СтрокиНоменклатура[0].ПолучитьИдентификатор();
		КонецЕсли;
	Иначе 
		Сообщить("Не найдена номенклатура по штрихкоду " + Скан_Штрихкод);
		//Элементы.Скан_Номенклатура.ТолькоПросмотр = Ложь;
		//Если ЭтоМобильныйКлиент Тогда
		//	Элементы.Скан_Номенклатура.Видимость = Истина;
		//КонецЕсли;
		//Элементы.Скан_Номенклатура.ТолькоПросмотр = Ложь;		

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьПолеСканКоличество()
	ЭтаФорма.ТекущийЭлемент = Элементы.Скан_Количество;		
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьПолеСканШтрихкод()
	ЭтаФорма.ТекущийЭлемент = Элементы.Скан_Штрихкод;		
КонецПроцедуры

&НаКлиенте
Процедура РежимСканирования(Команда)
	
	Элементы.ГруппаСкан.Видимость = Не Элементы.ГруппаСкан.Видимость;
	Если Элементы.ГруппаСкан.Видимость Тогда 
		ЭтаФорма.ТекущийЭлемент = Элементы.Скан_Штрихкод;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВводКоличества(Команда)
	
	ЗаполнитьТаблицуПланФакт();
	РассчитатьСуммуПланФакта();
	Элементы.ГруппаСкан.Видимость = Ложь;
	
КонецПроцедуры	

&НаКлиенте
Процедура ДатаПоступленияЗаказаПриИзменении(Элемент)

	СписокЗаказы.Параметры.УстановитьЗначениеПараметра("ДатаНачала", НачалоДня(ДатаНачала));
	СписокЗаказы.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", КонецДня(ДатаОкончания));
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ПланФактКоличествоЦенаДокПриИзменении(Элемент)
	
	РассчитатьСуммуДокПланФакта();
	ЗаполнитьПодвалТЗ();
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ПланФактЦенаДокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТЗ_ПланФакт.ТекущиеДанные;
	ТекущиеДанные.ЦенаДокБезНДС = ТекущиеДанные.ЦенаДок / (1 + ТекущиеДанные.СтавкаНДССтавка/100);
	
	РассчитатьСуммуДокПланФакта();
	ЗаполнитьПодвалТЗ();
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ПланФактЦенаДокБезНДСПриИзменении(Элемент)

	//ТекущиеДанные = Элементы.ТЗ_ПланФакт.ТекущиеДанные;
	//ТекущиеДанные.ЦенаДок = ТекущиеДанные.ЦенаДокБезНДС * (1 + ТекущиеДанные.СтавкаНДССтавка/100);
	//
	//РассчитатьСуммуДокПланФакта();
	//ЗаполнитьПодвалТЗ(); 
	
	//Доработки для новой формы приемки 
	ТД = Элементы.ТЗ_ПланФакт.ТекущиеДанные;
	РассчитатьСуммуПоСтроке(ТД);
	ЗаполнитьПодвалТЗ(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ПланФактСуммаДокПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ТЗ_ПланФакт.ТекущиеДанные;
	ТекущиеДанные.ЦенаДок = ?(ТекущиеДанные.КоличествоДок = 0, 0, ТекущиеДанные.СуммаДок / ТекущиеДанные.КоличествоДок);
	ТекущиеДанные.ЦенаДокБезНДС = ТекущиеДанные.ЦенаДок / (1 + ТекущиеДанные.СтавкаНДССтавка/100);
	ТекущиеДанные.СуммаНДСДок 	= ТекущиеДанные.СуммаДок / ((100+ТекущиеДанные.СтавкаНДССтавка)/100) * (ТекущиеДанные.СтавкаНДССтавка/100);
	
	ЗаполнитьПодвалТЗ();
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ТоварыВозвратКоличествоКОформлениюПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ТЗ_ТоварыВозврат.ТекущиеДанные;
	ТекущиеДанные.Сумма 	= ТекущиеДанные.КоличествоКОформлению * ТекущиеДанные.Цена;
	ТекущиеДанные.СуммаНДС 	= ТекущиеДанные.Сумма / ((100+ТекущиеДанные.СтавкаНДССтавка)/100) * (ТекущиеДанные.СтавкаНДССтавка/100);
	ТекущиеДанные.СуммаБезНДС = ТекущиеДанные.Сумма - ТекущиеДанные.СуммаНДС;
	
КонецПроцедуры


&НаКлиенте
Процедура РассчитатьСуммуПланФакта()
	
	КолвоПозиций = 0;
	Для Каждого ТекСтрока Из ТЗ_ПланФакт Цикл
		//ТекСтрока.Сумма = ТекСтрока.КоличествоКОформлению * ?(ПринятьПоЦене = 3, ТекСтрока.ЦенаДок, ТекСтрока.ЦенаЗаказ);
		//ТекСтрока.СуммаНДСДок 	= ТекСтрока.СуммаДок / ((100+ТекСтрока.СтавкаНДССтавка)/100) * (ТекСтрока.СтавкаНДССтавка/100);
		//Доработки для новой формы
		РассчитатьСуммуПоСтроке(ТекСтрока);
		КолвоПозиций = КолвоПозиций + ?(ТекСтрока.КоличествоКОформлению = 0, 0, 1);
	КонецЦикла;
	
	ЗаполнитьПодвалТЗ();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуДокПланФакта(ТекущиеДанные = Неопределено)
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные = Элементы.ТЗ_ПланФакт.ТекущиеДанные;
	КонецЕсли;
	
	ТекущиеДанные.СуммаДок 		= ТекущиеДанные.КоличествоДок * ТекущиеДанные.ЦенаДок;
	ТекущиеДанные.СуммаНДСДок 	= ТекущиеДанные.СуммаДок / ((100+ТекущиеДанные.СтавкаНДССтавка)/100) * (ТекущиеДанные.СтавкаНДССтавка/100);
	
	ЗаполнитьПодвалТЗ();
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодвалТЗ()
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСозданиеПоступления Тогда
		КолвоПозиций = 0;
		Для Каждого ТекСтрока Из ТЗ_ПланФакт Цикл
			КолвоПозиций = КолвоПозиций + ?(ТекСтрока.КоличествоКОформлению = 0, 0, 1);
		КонецЦикла;

		ТЗ_ПланФактНоменклатураТекстПодвала 	= "Заказано: " + ТЗ_ПланФакт.Количество() + " Принято: " + КолвоПозиций;
		
		//Доработки для новой формы
		//ТЗ_ПланФактКоличествоКОформлениюТекстПодвала = Формат(ТЗ_ПланФакт.Итог("КоличествоКОформлению"), "ЧДЦ=2");
		ТЗ_ПланФактКоличествоКОформлениюТекстПодвала = Формат(ТЗ_ПланФакт.Итог("КоличествоФакт"), "ЧДЦ=2");
		ТЗ_ПланФактКоличествоЗаказТекстПодвала 	= Формат(ТЗ_ПланФакт.Итог("КоличествоЗаказ"), "ЧДЦ=2");
		ТЗ_ПланФактКоличествоДокТекстПодвала 		= Формат(ТЗ_ПланФакт.Итог("КоличествоДок"), "ЧДЦ=2");
														  
		ТЗ_ПланФактСуммаТекстПодвала		 = Формат(ТЗ_ПланФакт.Итог("Сумма"), "ЧДЦ=2");  
		ТЗ_ПланФактСуммаДокТекстПодвала 	 = Формат(ТЗ_ПланФакт.Итог("СуммаДок"), "ЧДЦ=2");
		ТЗ_ПланФактСуммаНДСДокТекстПодвала = Формат(ТЗ_ПланФакт.Итог("СуммаНДСДок"), "ЧДЦ=2");
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСозданиеВозврата Тогда
		Элементы.ТЗ_ТоварыВозвратКоличествоЗаказ.ТекстПодвала 		= Формат(ТЗ_ТоварыВозврат.Итог("КоличествоЗаказ"));
		Элементы.ТЗ_ТоварыВозвратКоличествоКОформлению.ТекстПодвала = Формат(ТЗ_ТоварыВозврат.Итог("КоличествоКОформлению"));
		Элементы.ТЗ_ТоварыВозвратСумма.ТекстПодвала 				= Формат(ТЗ_ТоварыВозврат.Итог("Сумма"));
		Элементы.ТЗ_ТоварыВозвратСуммаНДС.ТекстПодвала 				= Формат(ТЗ_ТоварыВозврат.Итог("СуммаНДС"));
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСозданиеПеремещения Тогда
		Элементы.ТЗ_ПеремещениеКоличествоЗаказ.ТекстПодвала 		= Формат(ТЗ_Перемещение.Итог("КоличествоЗаказ"));
		Элементы.ТЗ_ПеремещениеКоличествоОтправлено.ТекстПодвала 	= Формат(ТЗ_Перемещение.Итог("КоличествоОтправлено"));
		Элементы.ТЗ_ПеремещениеКоличествоКОформлению.ТекстПодвала 	= Формат(ТЗ_Перемещение.Итог("КоличествоКОформлению"));
		Элементы.ТЗ_ПеремещениеСумма.ТекстПодвала 					= Формат(ТЗ_Перемещение.Итог("Сумма"));		
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Служебные
 
&НаКлиенте
Процедура УстановитьВидимость()
	
	Элементы.Назад.Видимость = Не (Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаЗаказы);
	Элементы.Далее.Видимость = Не Элементы.Назад.Видимость;	
	
	Элементы.Скан_Количество.Видимость = Скан_РежимРучногоВводаКоличества;
	
	СозданныйДокументЗаполнен = ЗначениеЗаполнено(СозданныйДокумент);
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСозданиеПоступления Тогда
		Если Элементы.Найти("ДокументУЧ_ПоступлениеТоваровПечатьТорг2") <> Неопределено Тогда
			Если Кладовщик Тогда
				Элементы.ДокументУЧ_ПоступлениеТоваровПечатьТорг2.Доступность = Ложь;
            Иначе
			Элементы.ДокументУЧ_ПоступлениеТоваровПечатьТорг2.Доступность = СозданныйДокументЗаполнен;
			КонецЕсли;
		КонецЕсли;
		Если Элементы.Найти("ДокументУЧ_ПоступлениеТоваровПечатьТорг4") <> Неопределено Тогда
			Если Кладовщик Тогда
				Элементы.ДокументУЧ_ПоступлениеТоваровПечатьТорг4.Доступность = Ложь;
            Иначе
				Элементы.ДокументУЧ_ПоступлениеТоваровПечатьТорг4.Доступность = СозданныйДокументЗаполнен; 
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСозданиеВозврата Тогда
		Если Элементы.Найти("ДокументУЧ_ВозвратТоваровПоставщикуПечатьСчетФактура") <> Неопределено Тогда
			Элементы.ДокументУЧ_ВозвратТоваровПоставщикуПечатьСчетФактура.Доступность = СозданныйДокументЗаполнен;
		КонецЕсли;
		Если Элементы.Найти("ДокументУЧ_ВозвратТоваровПоставщикуПечатьТОРГ12") <> Неопределено Тогда
			Элементы.ДокументУЧ_ВозвратТоваровПоставщикуПечатьТОРГ12.Доступность = СозданныйДокументЗаполнен;
		КонецЕсли;
		Если Элементы.Найти("ДокументУЧ_ВозвратТоваровПоставщикуПечатьТТН") <> Неопределено Тогда
			Элементы.ДокументУЧ_ВозвратТоваровПоставщикуПечатьТТН.Доступность = СозданныйДокументЗаполнен;
		КонецЕсли;
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСозданиеПеремещения Тогда
		Если Элементы.Найти("ДокументУЧ_ПеремещениеТоваровПечатьНакладнойНаПеремещение") <> Неопределено Тогда
			Элементы.ДокументУЧ_ПеремещениеТоваровПечатьНакладнойНаПеремещение.Доступность 	= СозданныйДокументЗаполнен;
		КонецЕсли;
		Если Элементы.Найти("ДокументУЧ_ПеремещениеТоваровПечатьТорг2") <> Неопределено Тогда
			РеквизитыДокумента = БюджетныйНаСервере.ВернутьРеквизиты(СозданныйДокумент, "Организация, ОрганизацияПолучатель");
			Элементы.ДокументУЧ_ПеремещениеТоваровПечатьТорг2.Доступность = СозданныйДокументЗаполнен И РеквизитыДокумента.Организация <> РеквизитыДокумента.ОрганизацияПолучатель;				
		КонецЕсли;		
	КонецЕсли;
	
	Элементы.ГруппаНазадДалее.Видимость = Не ЭтоМобильныйКлиент;
	Элементы.Далее.Видимость = Не ЭтоМобильныйКлиент;
	//Элементы.СписокЗаказыДатаПоступления.Видимость = ЭтоМобильныйКлиент;
	Элементы.СписокЗаказыДата.Видимость = Не ЭтоМобильныйКлиент;
	Элементы.СписокЗаказыЧерновик.Видимость = Не ЭтоМобильныйКлиент;
	Элементы.СписокЗаказыПодразделение.Видимость = Не ЭтоМобильныйКлиент;
	Элементы.СписокЗаказыЕстьПоступление.Видимость = Не ЭтоМобильныйКлиент;
	
	Элементы.Группа2.Видимость = Не ЭтоМобильныйКлиент;
	Элементы.ДокументУЧ_ПоступлениеТоваровПечатьТорг2.Видимость = Не ЭтоМобильныйКлиент;
	Элементы.ДокументУЧ_ПоступлениеТоваровПечатьТорг4.Видимость = Не ЭтоМобильныйКлиент;
	ПринятьПоЦене = ?(ЭтоМобильныйКлиент, 1, 2) ;
	Элементы.ТЗ_ПланФактГруппаЦена.Видимость = Не ЭтоМобильныйКлиент;
	Элементы.ТЗ_ПланФактГруппаСумма.Видимость = Не ЭтоМобильныйКлиент;
	Элементы.Скан_ВводКоличества.Видимость = Не ЭтоМобильныйКлиент;
	//Элементы.РеквизитыСчФСовпадают.Видимость = Не ЭтоМобильныйКлиент;
	Элементы.ГруппаПодПланФактом.Видимость = Не ЭтоМобильныйКлиент;
	//Элементы.ТЗ_ПланФактСрокГодности.Видимость = ИспользоватьСерийныйУчет;
	Элементы.ГруппаСерии.Видимость = ИспользоватьСерийныйУчет;
	
	Если ЭтоМобильныйКлиент Тогда
		//Элементы.Скан_Номенклатура.Высота = 2;
		Элементы.Скан_Номенклатура.Шрифт = Новый Шрифт(, , , , , , 80);
		Элементы.ТЗ_ПланФактНоменклатура.Высота = 2;
		Элементы.ТЗ_ПланФактНоменклатура.Шрифт = Новый Шрифт(, , , , , , 80);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьУсловноеОформление()
	
	//Оформление
	//
	//УсловноеОформление.Элементы.Добавить();
	
КонецПроцедуры

&НаКлиенте
Функция ПроверкаНаличияСканНоменклатурыВЗаказе() 
	
	Если ТЗ_ПланФакт.НайтиСтроки(новый Структура("Номенклатура", Скан_Номенклатура)).Количество() > 0 Тогда
		Возврат Истина;
	Иначе
		Ответ = Вопрос("Номенклатура " + Скан_Номенклатура + " отсутствует в заказе. Принять ее?", РежимДиалогаВопрос.ДаНет);
		Возврат Ответ = КодВозвратаДиалога.Да;
	КонецЕсли;
			
	
КонецФункции

//&НаСервере
&НаКлиенте
Процедура ДобавитьСканНоменклатуруВТовары()
	
	//ШтрихкодНайден = ЗначениеЗаполнено(НайтиНоменклатуруПоШтрихкоду(Скан_Штрихкод));
	
	//ТЗ Товары
	//НайденныеСтроки = Товары.НайтиСтроки(новый Структура("Номенклатура", Скан_Номенклатура));
	//Если НайденныеСтроки.Количество() > 0 Тогда
	//	ТекСтрока = НайденныеСтроки[0];
	//	ТекСтрока.КоличествоФакт = ТекСтрока.КоличествоФакт + ?(Скан_РежимРучногоВводаКоличества, Скан_Количество, 1);
	//Иначе
	//	НоваяСтрока = Товары.Добавить();
	//	НоваяСтрока.Номенклатура 	= Скан_Номенклатура;
	//	НоваяСтрока.Штрихкод 		= ?(ШтрихкодНайден, Скан_Штрихкод, "");
	//	НоваяСтрока.КоличествоФакт	= ?(Скан_РежимРучногоВводаКоличества, Скан_Количество, 1);
	//КонецЕсли;
	
	//ТЗ План-факт
	НайденныеСтроки = ТЗ_ПланФакт.НайтиСтроки(новый Структура("Номенклатура", Скан_Номенклатура));
	Если НайденныеСтроки.Количество() > 0 Тогда
		ТекСтрока = НайденныеСтроки[0];
		ТекСтрока.КоличествоФакт = ТекСтрока.КоличествоФакт + Скан_Количество;
		ТекСтрока.КоличествоДок	 = ТекСтрока.КоличествоДок + Скан_Количество;
		Если ТекСтрока.ЕстьВЗаказе Тогда
			ТекСтрока.КоличествоКОформлению = ТекСтрока.КоличествоКОформлению + Скан_Количество;
		КонецЕсли;
		ТекСтрока.Штрихкод = Скан_Штрихкод;
		ТекСтрока.ЗначениеШтрихкода = Скан_ШтрихкодПервичный;
		Если (ЗначениеЗаполнено(ТекСтрока.СерияНоменклатуры) И Не ТекСтрока.СерияНоменклатуры = СерияНоменклатуры) Или ТекСтрока.НесколькоСерий Тогда
			ТекСтрока.НесколькоСерий = Истина;
			ТекСтрока.СрокГодности	= Дата('00010101');
			ТекСтрока.СрокГодности2	= 0;
			ТекСтрока.ГоденДо	= Дата('00010101');
			ТекСтрока.СерияНоменклатуры	= Неопределено;
			
			НомерСтроки = ТЗ_ПланФакт.Индекс(ТЗ_ПланФакт.НайтиПоИдентификатору(Элементы.ТЗ_ПланФакт.ТекущаяСтрока)) + 1;
			НоваяСтрока = СерииНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.НомерСтрокиРеализации = НомерСтроки;
			Если ЗначениеЗаполнено(СерияНоменклатуры) Тогда
				НоваяСтрока.СерияНоменклатуры = СерияНоменклатуры;	
			Иначе	
				НоваяСтрока.СерияНоменклатуры = ДатаСерии;
			КонецЕсли;
			НоваяСтрока.ГоденДо = ГоденДо; 
			НоваяСтрока.СрокГодности2 = СрокГодности; 
			НоваяСтрока.Количество = Скан_Количество;
			
		Иначе	
			ТекСтрока.СрокГодности	= ДатаСерии;
			ТекСтрока.СрокГодности2	= СрокГодности;
			ТекСтрока.ГоденДо	= ГоденДо;
			ТекСтрока.СерияНоменклатуры	= СерияНоменклатуры;
			
			ТЗ_ПланФактСрокГодностиПриИзменении(Неопределено);
			
		КонецЕсли;
		РассчитатьСуммуДокПланФакта(ТекСтрока);
	Иначе
		//Сообщить("Товар " + Скан_Номенклатура + " не был заказан, оприходовать невозможно");
		РеквизитыНоменклатуры = БюджетныйНаСервере.ВернутьРеквизиты(Скан_Номенклатура, "Код, Наименование, ЕдиницаИзмерения, СтавкаНДС, СтавкаНДС.Ставка");
		ТекСтрока = ТЗ_ПланФакт.Добавить();
		ТекСтрока.Номенклатура 		= Скан_Номенклатура;
		ТекСтрока.Штрихкод 			= Скан_Штрихкод;
		ТекСтрока.ЗначениеШтрихкода = Скан_ШтрихкодПервичный;
		//ТекСтрока.Артикул 			= РеквизитыНоменклатуры.Код;	
		ТекСтрока.Наименование		= РеквизитыНоменклатуры.Наименование;
		//ТекСтрока.ЕдиницаИзмерения	= РеквизитыНоменклатуры.ЕдиницаИзмерения;
		ТекСтрока.СтавкаНДС			= РеквизитыНоменклатуры.СтавкаНДС;
		ТекСтрока.СтавкаНДССтавка	= РеквизитыНоменклатуры.СтавкаНДССтавка;
		ТекСтрока.КоличествоФакт	= ?(Скан_РежимРучногоВводаКоличества, Скан_Количество, 1);
		Если (ЗначениеЗаполнено(ТекСтрока.СерияНоменклатуры) И Не ТекСтрока.СерияНоменклатуры = СерияНоменклатуры) Или ТекСтрока.НесколькоСерий Тогда
			ТекСтрока.НесколькоСерий = Истина;
			ТекСтрока.СрокГодности	= Дата('00010101');
			ТекСтрока.СрокГодности2	= 0;
			ТекСтрока.ГоденДо	= Дата('00010101');
			ТекСтрока.СерияНоменклатуры	= Неопределено;
			
			НомерСтроки = ТЗ_ПланФакт.Индекс(ТЗ_ПланФакт.НайтиПоИдентификатору(Элементы.ТЗ_ПланФакт.ТекущаяСтрока)) + 1;
			НоваяСтрока = СерииНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.НомерСтрокиРеализации = НомерСтроки;
			Если ЗначениеЗаполнено(СерияНоменклатуры) Тогда
				НоваяСтрока.СерияНоменклатуры = СерияНоменклатуры;	
			Иначе	
				НоваяСтрока.СерияНоменклатуры = ДатаСерии;
			КонецЕсли;
			НоваяСтрока.ГоденДо = ГоденДо; 
			НоваяСтрока.СрокГодности2 = СрокГодности; 
			НоваяСтрока.Количество = Скан_Количество;
			
		Иначе	
			ТекСтрока.СрокГодности	= ДатаСерии;
			ТекСтрока.СрокГодности2	= СрокГодности;
			ТекСтрока.ГоденДо	= ГоденДо;
			ТекСтрока.СерияНоменклатуры	= СерияНоменклатуры;
			
			ТЗ_ПланФактСрокГодностиПриИзменении(Неопределено);
			
		КонецЕсли;
		ТекСтрока.КоличествоКОформлению	= 0;
		ТекСтрока.Склад = ТЗ_ПланФакт[0].Склад;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиНоменклатуруПоШтрихкоду(Штрихкод)
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ШтрихкодыНоменклатуры.Номенклатура
	               |ИЗ
	               |	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	               |ГДЕ
	               |	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Номенклатура;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПечатьТорг2(Команда)

	ТабДок = ПечатьТорг2НаСервере(СозданныйДокумент);
		
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Ложь;
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.ОтображатьЗаголовки = Истина;
	ТабДок.АвтоМасштаб = Истина;
	ФормаПечати = ПолучитьФорму("ОбщаяФорма.ФормаПечатиДокумента");
	ФормаПечати.Результат = ТабДок;
	ФормаПечати.Открыть();
	
	БылВызовПечати = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПечатьТорг2НаСервере(Документ)

	Возврат Документы.УЧ_ПоступлениеТоваров.ПечатьТОРГ2(Документ);
	
КонецФункции

&НаКлиенте
Процедура ПечатьТорг4(Команда)

	ТабДок = ПечатьТорг4НаСервере(СозданныйДокумент);
		
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Ложь;
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.ОтображатьЗаголовки = Истина;
	ТабДок.АвтоМасштаб = Истина;
	ФормаПечати = ПолучитьФорму("ОбщаяФорма.ФормаПечатиДокумента");
	ФормаПечати.Результат = ТабДок;
	ФормаПечати.Открыть();
	
	БылВызовПечати = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПечатьТорг4НаСервере(Документ)

	Возврат Документы.УЧ_ПоступлениеТоваров.ПечатьТОРГ4(Документ);
	
КонецФункции

&НаКлиенте
Процедура ТЗ_ПланФактКоличествоКОформлениюПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТЗ_ПланФакт.ТекущиеДанные;
	//Если ТекущиеДанные.КоличествоЗаказ = ТекущиеДанные.КоличествоКОформлению Тогда
		ТекущиеДанные.КоличествоДок = ТекущиеДанные.КоличествоКОформлению;
	//Иначе
	//	ТекущиеДанные.КоличествоДок = 0;
	//КонецЕсли;
	
	РассчитатьСуммуДокПланФакта();
	ЗаполнитьПодвалТЗ();
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ПеремещениеКоличествоКОформлениюПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТЗ_Перемещение.ТекущиеДанные;
	ТекущиеДанные.Сумма = ТекущиеДанные.Цена * ТекущиеДанные.КоличествоКОформлению;
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеньПредыдущий(Команда)
	
	ДатаНачала 		= ДатаНачала - 86400;
	ДатаОкончания 	= ДатаОкончания - 86400;
	
	СписокЗаказы.Параметры.УстановитьЗначениеПараметра("ДатаНачала", НачалоДня(ДатаНачала));
	СписокЗаказы.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", КонецДня(ДатаОкончания));
	
КонецПроцедуры

&НаКлиенте
Процедура ДеньСледующий(Команда)

	ДатаНачала 		= ДатаНачала + 86400;
	ДатаОкончания 	= ДатаОкончания + 86400;
	
	СписокЗаказы.Параметры.УстановитьЗначениеПараметра("ДатаНачала", НачалоДня(ДатаНачала));
	СписокЗаказы.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", КонецДня(ДатаОкончания));
	
КонецПроцедуры

&НаСервере
Процедура СохранитьВЧерновикНаСервере()

	СтруктураЧерновик = новый Структура;
	СтруктураЧерновик.Вставить("НомерТТН", НомерТТН);
	СтруктураЧерновик.Вставить("СуммаИтогоДок", СуммаИтогоДок);
	СтруктураЧерновик.Вставить("ДатаТТН", ДатаТТН);
	СтруктураЧерновик.Вставить("НомерСчФ", НомерСчФ);
	СтруктураЧерновик.Вставить("ДатаСчФ", ДатаСчФ);
	СтруктураЧерновик.Вставить("ИмяТаблицы", "ТЗ_ПланФакт");
	СтруктураЧерновик.Вставить("Таблица", ТЗ_ПланФакт.Выгрузить());
	СтруктураЧерновик.Вставить("Серии", СерииНоменклатуры.Выгрузить());
	СтруктураЧерновик.Вставить("Организация", Организация);
    СтруктураЧерновик.Вставить("Склад", Склад);
	СтруктураЧерновик.Вставить("СозданныйДокумент", СозданныйДокумент);
	СтруктураЧерновик.Вставить("ДатаФактическогоПоступления", ДатаФактическогоПоступления); 
	СтруктураЧерновик.Вставить("ВходящаяУПДЭДО", ВходящаяУПДЭДО);
	СтруктураЧерновик.Вставить("НакладнаяВЕТИС", НакладнаяВЕТИС);


	Хранилище = новый ХранилищеЗначения(СтруктураЧерновик);
	
	НаборЗаписей = РегистрыСведений.АвтосохранениеДанных.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ОбрабатываемыйДокумент);  
	НаборЗаписей.Записать();

	МенеджерЗаписи = РегистрыСведений.АвтосохранениеДанных.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	МенеджерЗаписи.Объект 	= ОбрабатываемыйДокумент;
	МенеджерЗаписи.Данные 	= Хранилище;
	МенеджерЗаписи.Дата		= ТекущаяДата();
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьИзЧерновиковНаСервере()
	
	НаборЗаписей = РегистрыСведений.АвтосохранениеДанных.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ОбрабатываемыйДокумент);
	//НаборЗаписей.Отбор.Пользователь.Установить(ПараметрыСеанса.ТекущийПользователь);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() Тогда
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();	
	КонецЕсли; 
	
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура УдалитьИзЧерновикаВыбранныйДокумент(ВыбранныйДокумент)
	
	НаборЗаписей = РегистрыСведений.АвтосохранениеДанных.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ВыбранныйДокумент);
	//НаборЗаписей.Отбор.Пользователь.Установить(ПараметрыСеанса.ТекущийПользователь);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() Тогда
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();	
	КонецЕсли; 

КонецПроцедуры // ()



&НаКлиенте
Процедура СохранитьВЧерновикНаКлиенте()
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСозданиеПоступления Тогда
		СохранитьВЧерновикНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВЧерновик(Команда)
	
	СохранитьВЧерновикНаСервере();
	Элементы.ДекорацияСохранено.Видимость = Истина;
	//Сообщить("Текущая приемка сохранена в черновик.");
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьИзЧерновикаНаСервере()
	
	Элементы.ВыделятьСерииОСГПроцент.Доступность = ВыделятьСерииОСГ;
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АвтосохранениеДанных.Данные
	               |ИЗ
	               |	РегистрСведений.АвтосохранениеДанных КАК АвтосохранениеДанных
	               |ГДЕ 
				   |	АвтосохранениеДанных.Объект = &Объект";
				   //|	АвтосохранениеДанных.Пользователь = &Пользователь
				   //|	И АвтосохранениеДанных.Объект = &Объект";
	//Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Объект", ОбрабатываемыйДокумент);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Хранилище = Выборка.Данные;
		СтруктураЧерновик = Хранилище.Получить();
		НомерТТН = СтруктураЧерновик.НомерТТН;
		Если СтруктураЧерновик.Свойство("СуммаИтогоДок") Тогда
			СуммаИтогоДок = СтруктураЧерновик.СуммаИтогоДок;
		КонецЕсли;
		ДатаТТН  = СтруктураЧерновик.ДатаТТН;
		НомерСчФ = СтруктураЧерновик.НомерСчФ;
		ДатаСчФ  = СтруктураЧерновик.ДатаСчФ;
		Если СтруктураЧерновик.Свойство("СозданныйДокумент") Тогда
			СозданныйДокумент = СтруктураЧерновик.СозданныйДокумент;
		Иначе
			СозданныйДокумент = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка();
		КонецЕсли; 
		Если СтруктураЧерновик.Свойство("ДатаФактическогоПоступления") Тогда
			ДатаФактическогоПоступления = СтруктураЧерновик.ДатаФактическогоПоступления;
		Иначе 
			ДатаФактическогоПоступления = Дата(1,1,1);
		КонецЕсли;
		ТЗ_ПланФакт.Загрузить(СтруктураЧерновик.Таблица);
		Если СтруктураЧерновик.Свойство("Организация") Тогда
			Организация = СтруктураЧерновик.Организация;
		КонецЕсли;
		Если СтруктураЧерновик.Свойство("Склад") Тогда
			Склад = СтруктураЧерновик.Склад; 
		КонецЕсли; 
		Если СтруктураЧерновик.Свойство("ВходящаяУПДЭДО") Тогда
			ВходящаяУПДЭДО = СтруктураЧерновик.ВходящаяУПДЭДО; 
		КонецЕсли;
		Если СтруктураЧерновик.Свойство("НакладнаяВЕТИС") Тогда
			НакладнаяВЕТИС = СтруктураЧерновик.НакладнаяВЕТИС; 
		КонецЕсли;
		Если СтруктураЧерновик.Свойство("Серии") Тогда
			СерииНоменклатуры.Загрузить(СтруктураЧерновик.Серии);
		КонецЕсли;
	Иначе
		Сообщить("Нет данных в черновике");
	КонецЕсли;
	
	//обновим статусы
	ЗаказаннаяНоменклатура = ОбрабатываемыйДокумент.ТабличнаяЧасть.ВыгрузитьКолонку("Номенклатура"); 
	ЕстьСтрокиСПозициямиНеВключеннымиДляОтгрузки = Ложь;
	Для Каждого ТекСтрока Из ТЗ_ПланФакт Цикл
		Если ЗаказаннаяНоменклатура.Найти(ТекСтрока.Номенклатура) <> Неопределено Тогда
			ТекСтрока.ЕстьВЗаказе = Истина;
		Иначе
			ТекСтрока.ЕстьВЗаказе = Ложь;
		КонецЕсли; 
		Если Не ЗначениеЗаполнено(ТекСтрока.НомерСтроки) Тогда
			ТекСтрока.НомерСтроки = ТЗ_ПланФакт.Индекс(ТекСтрока) + 1;
			ТекСтрока.ИсходныйНомерСтрокиДляСерии = ТЗ_ПланФакт.Индекс(ТекСтрока) + 1;
		КонецЕсли;
		ТекСтрока.ИсходныйНомерСтрокиДляСерии = ТекСтрока.НомерСтроки;
		//Если ТекСтрока.ВключатьВДокументОтгрузки Тогда
		//	ЕстьЗаполненныеВключатьВДокументОтгрузки = Истина;
		//КонецЕсли;
		ТекСтрока.ВключатьВДокументОтгрузки = ЗначениеЗаполнено(ТекСтрока.КоличествоФакт); 
		
		
		Если Не ТекСтрока.ВключатьВДокументОтгрузки Тогда
			ЕстьСтрокиСПозициямиНеВключеннымиДляОтгрузки = Истина; 
		КонецЕсли; 
		
		//ТекСтрока.КоличествоФакт = ТекСтрока.КоличествоЗаказ;
		//ТекСтрока.Сумма = ТекСтрока.СуммаЗаказ; 
		//ТекСтрока.СуммаНДСДок = ТекСтрока.СуммаНДСЗаказ;
	КонецЦикла;  
	Если ЕстьСтрокиСПозициямиНеВключеннымиДляОтгрузки Тогда
		Элементы.ТЗ_ПланФактСоздатьЗаказПоставщикуДляОтсутствующихТоваров.ЦветРамки = WebЦвета.ЗеленыйЛес;
		Элементы.ТЗ_ПланФактСоздатьЗаказПоставщикуДляОтсутствующихТоваров.ЦветТекста = WebЦвета.ЗеленыйЛес; 
	Иначе
		Элементы.ТЗ_ПланФактСоздатьЗаказПоставщикуДляОтсутствующихТоваров.ЦветРамки = WebЦвета.ТемноСерый;
		Элементы.ТЗ_ПланФактСоздатьЗаказПоставщикуДляОтсутствующихТоваров.ЦветТекста = WebЦвета.ТемноСерый; 
	КонецЕсли;
	
	
	//Если Не ЕстьЗаполненныеВключатьВДокументОтгрузки Тогда
	//	Для Каждого ТекСтрока Из ТЗ_ПланФакт Цикл
	//		ТекСтрока.ВключатьВДокументОтгрузки = Истина; 
	//	КонецЦикла;
	//КонецЕсли;
	
	ОбновитьСерииВСтроках();
	ЗаполнитьДанныеГТД();
	Элементы.СоздатьПоступление.Доступность = Не ЗначениеЗаполнено(СозданныйДокумент); 
	УстановитьДоступностьКладовщика();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСерииВСтроках()
	
	НомерСтроки = 0;
	Для Каждого СтрокаТЧ Из ТЗ_ПланФакт Цикл 
		Если ЗначениеЗаполнено(СтрокаТЧ.СерияНоменклатуры) Тогда
			СтрокаТЧ.ОСГ = РассчитатьОСГНаСервере(СтрокаТЧ.СерияНоменклатуры);
		Иначе
			СтрокаТЧ.ОСГ = 0;
		КонецЕсли;
		НомерСтроки = НомерСтроки + 1;
		НайденныеСерии = СерииНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура, НомерСтрокиРеализации", СтрокаТЧ.Номенклатура, НомерСтроки));
		Если НайденныеСерии.Количество() > 1 Тогда
			СтрокаТЧ.НесколькоСерий = Истина;
			СтрокаТЧ.СрокГодности = Неопределено;
			МинимальныйОСГ = Неопределено;
			Для каждого НайденнаяСтрокаСерии Из НайденныеСерии Цикл
				Если ЗначениеЗаполнено(НайденнаяСтрокаСерии.СерияНоменклатуры) Тогда
					ОСГ = РассчитатьОСГНаСервере(НайденнаяСтрокаСерии.СерияНоменклатуры);
				Иначе
					ОСГ = 0;
				КонецЕсли;
				МинимальныйОСГ = ?(МинимальныйОСГ = Неопределено,ОСГ,Мин(МинимальныйОСГ,ОСГ));
			КонецЦикла;
			СтрокаТЧ.ОСГ = МинимальныйОСГ;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ЕстьЗаписьВЧерновике(Документ)
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	АвтосохранениеДанных.Данные
	|ИЗ
	|	РегистрСведений.АвтосохранениеДанных КАК АвтосохранениеДанных
	|ГДЕ 
	|	АвтосохранениеДанных.Объект = &Объект";
	//|	АвтосохранениеДанных.Пользователь = &Пользователь
	//|	И АвтосохранениеДанных.Объект = &Объект";
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Объект", Документ);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	СписокЗаказы.Параметры.УстановитьЗначениеПараметра("ВсеКонтрагенты", Не ЗначениеЗаполнено(Контрагент));
	СписокЗаказы.Параметры.УстановитьЗначениеПараметра("Контрагент", Контрагент);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПоказыватьЗакрытые(Команда)
	Элементы.ПоказыватьЗакрытые.Пометка = НЕ Элементы.ПоказыватьЗакрытые.Пометка;
	СписокЗаказы.Параметры.УстановитьЗначениеПараметра("ВсеЗаказы", НЕ Элементы.ПоказыватьЗакрытые.Пометка);
КонецПроцедуры

#Область НайтиПоШК
&НаКлиенте
Процедура НайтиЗаказПоШК(Команда)
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Штрихкод) Тогда
		Возврат;	
	КонецЕсли;
	
	ТекЗаказ = НайтиЗаказПоКоду(Штрихкод);
	Если Не ЗначениеЗаполнено(ТекЗаказ) Тогда
		Сообщить("Заказ с №" + Строка(Штрихкод) + " не найден!");
		Возврат;
	ИначеЕсли ТекЗаказ.Закрыт Тогда  
		Сообщить("Заказ с №" + Строка(Штрихкод) + " уже обработан!");
		Возврат;
	КонецЕсли; 
	
	Если ДатаНачала > ТекЗаказ.ДатаПоступления Тогда
		ДатаНачала = ТекЗаказ.ДатаПоступления;	
		СписокЗаказы.Параметры.УстановитьЗначениеПараметра("ДатаНачала", НачалоДня(ДатаНачала));
	КонецЕсли; 
	Элементы.СписокЗаказы.ТекущаяСтрока = ТекЗаказ.Заказ;
	Далее(Неопределено);
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиЗаказПоКоду(Штрихкод)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказПоставщику.Ссылка,
	|	ЗаказПоставщику.Статус,
	|	ЗаказПоставщику.ДатаПоступления
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Номер = &Номер";
	Запрос.УстановитьПараметр("Номер", Штрихкод);
	Запрос.УстановитьПараметр("ДоступныеПодразделения", ПараметрыСеанса.ДоступныеПодразделения);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	
	Для каждого ТекЗаказ Из РезультатЗапроса Цикл
		Возврат Новый Структура("Заказ, ТекСтатус, Закрыт, ДатаПоступления", ТекЗаказ.Ссылка, ТекЗаказ.Статус, ТекЗаказ.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт, ТекЗаказ.ДатаПоступления);
	КонецЦикла; 
	
	
	Возврат Неопределено;		
КонецФункции


#КонецОбласти 

&НаКлиенте
Процедура ПечатьСпискаЗаказов(Команда)
	СписокМеню = Новый СписокЗначений;
	СписокМеню.Добавить("Вывести список выделенных заказов");
	СписокМеню.Добавить("Вывести заказы с " + Формат(ДатаНачала, "ДФ=dd.MM.yyyy") + " по " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy"));
	ВыбранныйПункт = Неопределено;

	ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ПечатьСпискаЗаказовЗавершение", ЭтаФорма), СписокМеню,  Элементы.Группа11);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСпискаЗаказовЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ВыбранныйПункт = ВыбранныйЭлемент;
	
	Если ВыбранныйПункт = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	ТабДок = Новый ТабличныйДокумент;
	
	ПечатьСпискаЗаказовСервер(ТабДок, Новый Структура("ВыбранныйПункт, ВыделенныеЗаказы, ДатаНачала, ДатаОкончания, ВыводитьЗакрытые", ВыбранныйПункт.Значение, Элементы.СписокЗаказы.ВыделенныеСтроки, ДатаНачала, ДатаОкончания, НЕ Элементы.ПоказыватьЗакрытые.Пометка));
	
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Ложь;
	ТабДок.ТолькоПросмотр = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ФормаПечати = ПолучитьФорму("ОбщаяФорма.ФормаПечатиДокумента");
	ФормаПечати.Результат = ТабДок;
	ФормаПечати.Заголовок = "Список заказов: Печать";
	ФормаПечати.Автозаголовок = Ложь;
	ФормаПечати.Открыть();
	//}}

КонецПроцедуры
&НаСервере
Процедура ПечатьСпискаЗаказовСервер(ТабДок, ПараметрКоманды)
	Если ПараметрКоманды.ВыбранныйПункт = "Вывести список выделенных заказов" Тогда
		МассивЗаказов = ПараметрКоманды.ВыделенныеЗаказы;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказПоставщику.Ссылка
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
		|ГДЕ
		|	ЗаказПоставщику.ДатаПоступления МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ВЫБОР
		|			КОГДА &ВыводитьЗакрытые
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ НЕ ЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)
		|		КОНЕЦ";
		Запрос.УстановитьПараметр("ДатаНачала", ПараметрКоманды.ДатаНачала);
		Запрос.УстановитьПараметр("ВыводитьЗакрытые", ПараметрКоманды.ВыводитьЗакрытые);
		Запрос.УстановитьПараметр("ДатаОкончания", ПараметрКоманды.ДатаОкончания);
		МассивЗаказов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли; 
	Документы.ЗаказПоставщику.ПечатьСпискаЗаказов(ТабДок, МассивЗаказов);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеТТНПриИзменении(Элемент)
			
	Элементы.ДекорацияСохранено.Видимость = Ложь;
	Если РеквизитыСчФСовпадают Тогда
		НомерСчФ = НомерТТН;
		ДатаСчФ = ДатаТТН;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКолвоТТН(Команда)
	
	Ответ = Вопрос("Значения в колонке ""Кол-во по ТТН"" будут заменены значениями колонки ""Кол-во к оформлению"". Продолжить?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ТЗ_ПланФакт Цикл
		Если ТекСтрока.ЕстьВЗаказе Тогда
			ТекСтрока.КоличествоДок = ТекСтрока.КоличествоКОформлению;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаказыПриАктивизацииСтроки(Элемент)
	ТекущийЗаказ = Элементы.СписокЗаказы.ТекущаяСтрока;
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаказыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Далее(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыСчФСовпадаютПриИзменении(Элемент)
	Элементы.НомерСчФ.Видимость = Не РеквизитыСчФСовпадают;
	Элементы.ДатаСчФ.Видимость = Не РеквизитыСчФСовпадают;
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ПланФактСрокГодностиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Список = Новый СписокЗначений;
	Список.Добавить("Одна серия");
	Список.Добавить("Несколько серий");
	
	ТекДанные = Элементы.ТЗ_ПланФакт.ТекущиеДанные;
	Если НЕ ТекДанные.НесколькоСерий Тогда
		ТекЗнач = Неопределено;
		ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ТЗ_ПланФактСрокГодностиНачалоВыбораЗавершение", ЭтаФорма, Новый Структура("Элемент", Элемент)), Список);
	Иначе
		ТекФорма = ПолучитьФорму("Документ.ЗаказПоставщику.Форма.ФормаПодбораСерийДата");
		ТекФорма.Номенклатура = ТекДанные.Номенклатура;
		ТекФорма.Количество = ТекДанные.КоличествоКОформлению;
		НомерСтроки = ТЗ_ПланФакт.Индекс(ТЗ_ПланФакт.НайтиПоИдентификатору(Элементы.ТЗ_ПланФакт.ТекущаяСтрока)) + 1;
		ТекФорма.НомерСтрокиРеализации = НомерСтроки;
		Для каждого ТекСтрока Из СерииНоменклатуры Цикл
			Если ТекСтрока.Номенклатура = ТекДанные.Номенклатура И ТекСтрока.НомерСтрокиРеализации = НомерСтроки Тогда
				НоваяСтрока = ТекФорма.СерииНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				//НоваяСтрока.СерияНоменклатуры = ТекСтрока.СрокГодности;
			КонецЕсли;
		КонецЦикла;
		ТекФорма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		Оп = Новый ОписаниеОповещения("ВыполнитьПослеОкончанияПодбора", ЭтотОбъект, Новый Структура);
		ТекФорма.ОписаниеОповещенияОЗакрытии = Оп;
		ТекФорма.Открыть();
	КонецЕсли;
	
	//ОткрытьФорму("Справочник.СерииНоменклатуры.ФормаВыбора",,Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ПланФактСрокГодностиНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	
	ТекЗнач = ВыбранныйЭлемент;
	Если Не ТекЗнач = Неопределено Тогда
		Если ТекЗнач.Значение = "Одна серия" Тогда
			//ОткрытьФорму("Справочник.СерииНоменклатуры.ФормаВыбора",,Элемент);
			Если ЭтоМобильныйКлиент Тогда
				ТекДата = Неопределено;
				ВвестиДату(ТекДата,,);
				Если Не ТекДата = Неопределено Тогда
					Элементы.ТЗ_ПланФакт.ТекущиеДанные.СрокГодности = ТекДата;
				КонецЕсли;
			Иначе	
				Элементы.ТЗ_ПланФакт.ИзменитьСтроку();
			КонецЕсли;
		Иначе
			ТекДанные = Элементы.ТЗ_ПланФакт.ТекущиеДанные;
			ТекФорма = ПолучитьФорму("Документ.ЗаказПоставщику.Форма.ФормаПодбораСерийДата");
			ТекФорма.Номенклатура = ТекДанные.Номенклатура;
			ТекФорма.Количество = ТекДанные.КоличествоКОформлению;
			НомерСтроки = ТЗ_ПланФакт.Индекс(ТЗ_ПланФакт.НайтиПоИдентификатору(Элементы.ТЗ_ПланФакт.ТекущаяСтрока)) + 1;
			ТекФорма.НомерСтрокиРеализации = НомерСтроки;
			Для каждого ТекСтрока Из СерииНоменклатуры Цикл
				Если ТекСтрока.Номенклатура = ТекДанные.Номенклатура И ТекСтрока.НомерСтрокиРеализации = НомерСтроки Тогда
					НоваяСтрока = ТекФорма.СерииНоменклатуры.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
					//НоваяСтрока.СерияНоменклатуры = ТекСтрока.СрокГодности;
				КонецЕсли;
			КонецЦикла;
			ТекФорма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			Оп = Новый ОписаниеОповещения("ВыполнитьПослеОкончанияПодбора", ЭтотОбъект, Новый Структура);
			ТекФорма.ОписаниеОповещенияОЗакрытии = Оп;
			ТекФорма.Открыть();
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеОкончанияПодбора(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.ТЗ_ПланФакт.ТекущиеДанные;
	НомерСтроки = ТЗ_ПланФакт.Индекс(ТЗ_ПланФакт.НайтиПоИдентификатору(Элементы.ТЗ_ПланФакт.ТекущаяСтрока)) + 1;
	МассивУдСерий = Новый Массив;
	Для каждого ТекСтрока Из СерииНоменклатуры Цикл
		Если ТекСтрока.Номенклатура = ТекДанные.Номенклатура И ТекСтрока.НомерСтрокиРеализации = НомерСтроки Тогда
			МассивУдСерий.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекУд Из МассивУдСерий Цикл
		СерииНоменклатуры.Удалить(ТекУд);
	КонецЦикла;
	
	НовоеКоличество = 0;
	Для каждого ТекСтрока Из Результат.СерииНоменклатуры Цикл
		НоваяСтрока = СерииНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		НоваяСтрока.НомерСтрокиРеализации = НомерСтроки;
		НовоеКоличество = НовоеКоличество + ТекСтрока.Количество;
	КонецЦикла;
	
	Если Результат.СерииНоменклатуры.Количество() = 1 Тогда
		ТекДанные.СрокГодности = ТекСтрока.СерияНоменклатуры;
		ТекДанные.СрокГодности2 = ТекСтрока.СрокГодности2;
		ТекДанные.ГоденДо = ТекСтрока.ГоденДо;
		ТекДанные.СерияНоменклатуры = ТекСтрока.СерияНоменклатуры;
		ТекДанные.НесколькоСерий = Ложь;
		Если ЭтоМобильныйКлиент Тогда
			элементы.ТЗ_ПланФактКоличествоКОформлению.ТолькоПросмотр = Ложь;		
		КонецЕсли;		
	ИначеЕсли Результат.СерииНоменклатуры.Количество() > 1 Тогда
		ТекДанные.СрокГодности = Дата('00010101');
		ТекДанные.ГоденДо = Дата('00010101');
		ТекДанные.НесколькоСерий = Истина;
		ТекДанные.СерияНоменклатуры = Неопределено;
		Если ЭтоМобильныйКлиент Тогда
			элементы.ТЗ_ПланФактКоличествоКОформлению.ТолькоПросмотр = Истина;		
		КонецЕсли;		
	КонецЕсли;
	
	ТекДанные.КоличествоКОформлению = НовоеКоличество;
	ТЗ_ПланФактКоличествоКОформлениюПриИзменении(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ПланФактСрокГодностиПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТЗ_ПланФакт.ТекущиеДанные;
	ТекДанные.ГоденДо = ТекДанные.СрокГодности + 24*60*60*ТекДанные.СрокГодности2;

	НомерСтроки = ТЗ_ПланФакт.Индекс(ТЗ_ПланФакт.НайтиПоИдентификатору(Элементы.ТЗ_ПланФакт.ТекущаяСтрока)) + 1;
	МассивУдСерий = Новый Массив;
	Для каждого ТекСтрока Из СерииНоменклатуры Цикл
		Если ТекСтрока.Номенклатура = ТекДанные.Номенклатура И ТекСтрока.НомерСтрокиРеализации = НомерСтроки Тогда
			МассивУдСерий.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекУд Из МассивУдСерий Цикл
		СерииНоменклатуры.Удалить(ТекУд);
	КонецЦикла;
	
	НовоеКоличество = 0;
	НоваяСтрока = СерииНоменклатуры.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекДанные);
	НоваяСтрока.НомерСтрокиРеализации = НомерСтроки;
	Если ЗначениеЗаполнено(ТекДанные.СерияНоменклатуры) Тогда
		НоваяСтрока.СерияНоменклатуры = ТекДанные.СерияНоменклатуры;
	Иначе	
		НоваяСтрока.СерияНоменклатуры = ТекДанные.СрокГодности;
	КонецЕсли;
	НоваяСтрока.ГоденДо = ТекДанные.ГоденДо; 
	НоваяСтрока.СрокГодности2 = ТекДанные.СрокГодности2; 
	НоваяСтрока.Количество = ТекДанные.КоличествоКОформлению;

КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ПланФактГоденДоПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТЗ_ПланФакт.ТекущиеДанные;
	ТекДанные.СрокГодности2 = (ТекДанные.ГоденДо - ТекДанные.СрокГодности) / (24*60*60);
	
	НомерСтроки = ТЗ_ПланФакт.Индекс(ТЗ_ПланФакт.НайтиПоИдентификатору(Элементы.ТЗ_ПланФакт.ТекущаяСтрока)) + 1;
	МассивУдСерий = Новый Массив;
	Для каждого ТекСтрока Из СерииНоменклатуры Цикл
		Если ТекСтрока.Номенклатура = ТекДанные.Номенклатура И ТекСтрока.НомерСтрокиРеализации = НомерСтроки Тогда
			МассивУдСерий.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекУд Из МассивУдСерий Цикл
		СерииНоменклатуры.Удалить(ТекУд);
	КонецЦикла;
	
	НовоеКоличество = 0;
	НоваяСтрока = СерииНоменклатуры.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекДанные);
	НоваяСтрока.НомерСтрокиРеализации = НомерСтроки;
	НоваяСтрока.СерияНоменклатуры = ТекДанные.СрокГодности;
	НоваяСтрока.ГоденДо = ТекДанные.ГоденДо; 
	НоваяСтрока.СрокГодности2 = ТекДанные.СрокГодности2; 
	НоваяСтрока.Количество = ТекДанные.КоличествоКОформлению;
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ПланФактСрокГодности2ПриИзменении(Элемент)
	Элементы.ТЗ_ПланФакт.ТекущиеДанные.ГоденДо = Элементы.ТЗ_ПланФакт.ТекущиеДанные.СрокГодности + 24*60*60*Элементы.ТЗ_ПланФакт.ТекущиеДанные.СрокГодности2;
КонецПроцедуры

&НаКлиенте
Процедура СрокГодностиПриИзменении(Элемент)
	ГоденДо = ДатаСерии + 24*60*60*СрокГодности;
КонецПроцедуры

&НаКлиенте
Процедура ГоденДоПриИзменении(Элемент)
	СрокГодности = (ГоденДо - ДатаСерии) / (24*60*60);
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ПланФактСерияНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ТЗ_ПланФакт.ТекущиеДанные;
	Если ТекДанные.НесколькоСерий Тогда
		СтандартнаяОбработка = Ложь; 
		
		МассивПараметрыВыбора = Новый Массив; 
		Если ЗначениеЗаполнено(ДатаТТН) Тогда
			НовыйПараметрДата = Новый ПараметрВыбора("ДатаОтгрузки",ДатаТТН); 
			МассивПараметрыВыбора.Добавить(НовыйПараметрДата); 
		КонецЕсли;
		Если ЗначениеЗаполнено(Склад) Тогда
			НовыйПараметрСклад = Новый ПараметрВыбора("Склад",Склад);
			МассивПараметрыВыбора.Добавить(НовыйПараметрСклад);
		КонецЕсли;
        НовыеПараметры = Новый ФиксированныйМассив(МассивПараметрыВыбора);
		ТекФорма = ПолучитьФорму("Документ.УЧ_Реализация.Форма.ФормаПодбораСерий",Новый Структура("ОСГ,ПроцентОСГ",ВыделятьСерииОСГ,ВыделятьСерииОСГПроцент)); 
		ТекФорма.Элементы.СерииНоменклатуры.ПодчиненныеЭлементы.СерииНоменклатурыСерияНоменклатуры.ПараметрыВыбора = НовыеПараметры;
		ТекФорма.Номенклатура = ТекДанные.Номенклатура;
		ТекФорма.Количество = ТекДанные.КоличествоДок;
		ТекФорма.НомерСтрокиРеализации = ТекДанные.НомерСтроки;
		Для каждого ТекСтрока Из СерииНоменклатуры Цикл
			Если ТекСтрока.Номенклатура = ТекДанные.Номенклатура И ТекСтрока.НомерСтрокиРеализации = ТекДанные.НомерСтроки Тогда
				НоваяСтрока = ТекФорма.СерииНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				Если ЗначениеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
					НоваяСтрока.ОСГ = РассчитатьОСГНаСервере(НоваяСтрока.СерияНоменклатуры);
				Иначе
					НоваяСтрока.ОСГ = 0;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ТекФорма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца; 
		Оп = Новый ОписаниеОповещения("ВыполнитьПослеОкончанияПодбора2", ЭтотОбъект, Новый Структура);
		ТекФорма.ОписаниеОповещенияОЗакрытии = Оп;
		ТекФорма.Открыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеОкончанияПодбора2(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.ТЗ_ПланФакт.ТекущиеДанные;
	НомерСтроки = ТЗ_ПланФакт.Индекс(ТЗ_ПланФакт.НайтиПоИдентификатору(Элементы.ТЗ_ПланФакт.ТекущаяСтрока)) + 1;
	МассивУдСерий = Новый Массив;
	Для каждого ТекСтрока Из СерииНоменклатуры Цикл
		Если ТекСтрока.Номенклатура = ТекДанные.Номенклатура И ТекСтрока.НомерСтрокиРеализации = НомерСтроки Тогда
			МассивУдСерий.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекУд Из МассивУдСерий Цикл
		СерииНоменклатуры.Удалить(ТекУд);
	КонецЦикла;
	
	МинимальныйОСГ = Неопределено;
	НовоеКоличество = 0;
	Для каждого ТекСтрока Из Результат.СерииНоменклатуры Цикл
		НоваяСтрока = СерииНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		НоваяСтрока.НомерСтрокиРеализации = НомерСтроки;
		НоваяСтрока.ДатаПроизводства = ВернутьЗначениеРеквизитаСерии(ТекСтрока.СерияНоменклатуры,"ДатаПроизводства");
		НоваяСтрока.СрокГодности2 = ВернутьЗначениеРеквизитаСерии(ТекСтрока.СерияНоменклатуры,"СрокГодности");
		НоваяСтрока.ГоденДо = ВернутьЗначениеРеквизитаСерии(ТекСтрока.СерияНоменклатуры,"ГоденДо");
		НовоеКоличество = НовоеКоличество + ТекСтрока.Количество;
		МинимальныйОСГ = ?(МинимальныйОСГ = Неопределено, ТекСтрока.ОСГ,Мин(МинимальныйОСГ,ТекСтрока.ОСГ));
	КонецЦикла;
	ТекДанные.ОСГ = МинимальныйОСГ;
	Если Результат.СерииНоменклатуры.Количество() = 1 Тогда
		//ТекДанные.СрокГодности = ТекСтрока.СерияНоменклатуры;
		//ТекДанные.СрокГодности2 = ТекСтрока.СрокГодности2;
		//ТекДанные.ГоденДо = ТекСтрока.ГоденДо;
		ТекДанные.СерияНоменклатуры = ТекСтрока.СерияНоменклатуры;
		ТекДанные.НесколькоСерий = Ложь;
		Если ЭтоМобильныйКлиент Тогда
			элементы.ТЗ_ПланФактКоличествоКОформлению.ТолькоПросмотр = Ложь;		
		КонецЕсли;		
	ИначеЕсли Результат.СерииНоменклатуры.Количество() > 1 Тогда
		//ТекДанные.СрокГодности = Дата('00010101');
		//ТекДанные.ГоденДо = Дата('00010101');
		//ТекДанные.НесколькоСерий = Истина;
		ТекДанные.СерияНоменклатуры = Неопределено;
		Если ЭтоМобильныйКлиент Тогда
			элементы.ТЗ_ПланФактКоличествоКОформлению.ТолькоПросмотр = Истина;		
		КонецЕсли;		
	КонецЕсли;
	
	ТекДанные.КоличествоКОформлению = НовоеКоличество;
	ТЗ_ПланФактКоличествоКОформлениюПриИзменении(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ПланФактНесколькоСерийПриИзменении(Элемент)
	ТекДанные = Элементы.ТЗ_ПланФакт.ТекущиеДанные;
	Если ТекДанные.НесколькоСерий Тогда
		ТекДанные.СрокГодности = Дата('00010101');
		ТекДанные.ГоденДо = Дата('00010101');
		ТекДанные.СерияНоменклатуры = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЗаказу(Команда)
	ЗаполнитьПоЗаказуНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоЗаказуНаСервере()
	//Для каждого ТекСтрока Из ТЗ_ПланФакт Цикл
	//	ТекСтрока.КоличествоКОформлению = ТекСтрока.КоличествоЗаказ;
	//	ТекСтрока.КоличествоДок = ТекСтрока.КоличествоЗаказ;
	//	Если ПринятьПоЦене = 2 Тогда
	//		ТекСтрока.ЦенаДок = ТекСтрока.ЦенаЗаказ;
	//		ТекСтрока.Сумма = ТекСтрока.КоличествоКОформлению * ТекСтрока.ЦенаДок;
	//		ТекСтрока.СуммаДок = ТекСтрока.Сумма;
	//		//Добавление НДС на форму +++
	//		ТекСтрока.СуммаНДСДок 	= ТекСтрока.СуммаДок / ((100+ТекСтрока.СтавкаНДССтавка)/100) * (ТекСтрока.СтавкаНДССтавка/100); 
	//		//---
	//	КонецЕсли;
	//КонецЦикла;
	
	//Для обновленной формы
	Для каждого ТекСтрока Из ТЗ_ПланФакт Цикл
		ТекСтрока.КоличествоФакт = ТекСтрока.КоличествоЗаказ;
		ТекСтрока.ЦенаДокБезНДС = ТекСтрока.ЦенаЗаказ;
		ТекСтрока.Сумма = ТекСтрока.КоличествоФакт * ТекСтрока.ЦенаДокБезНДС;
        ТекСтрока.СуммаНДСДок 	= ТекСтрока.Сумма / ((100+ТекСтрока.СтавкаНДССтавка)/100) * (ТекСтрока.СтавкаНДССтавка/100);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоВЕТИС(Команда)
	
	ТекстВопроса = "Заполнить данные из Ветеринарно-сопроводительных документов в табличной части?";
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеПодтверждениеБезУсловий",ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения,ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры 


&НаКлиенте
Процедура ВыполнитьПослеПодтверждениеБезУсловий(Результат, ДопПараметры) Экспорт
	
	//Если Результат = КодВозвратаДиалога.Да Тогда
	//	Если ЗначениеЗаполнено(НакладнаяВЕТИС) Тогда
	//		ЗаполнитьПоВЕТИСНаСервере(Истина);
	//	Иначе
	//		СтруктураНекорректныхДанных = ЕстьНекорректныеДанныеВСД(Истина);	
	//		Если СтруктураНекорректныхДанных.ЕстьНекорректныеДанные Тогда
	//			ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеОтветаНекорректныеДанныеВСД",ЭтотОбъект);
	//			ПоказатьВопрос(ОписаниеОповещения,СтруктураНекорректныхДанных.ТекстВопроса,РежимДиалогаВопрос.ДаНетОтмена);
	//		Иначе
	//		ЗаполнитьПоВСДНаСервере();
	//		КонецЕсли;
	//	КонецЕсли; 
	//	ЗаполнитьПодвалТЗ();
	//КонецЕсли;

	Если Результат = КодВозвратаДиалога.Да Тогда
		СтруктураНекорректныхДанных = ЕстьНекорректныеДанныеВСД(Истина);	
		Если СтруктураНекорректныхДанных.ЕстьНекорректныеДанные Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеОтветаНекорректныеДанныеВСД",ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения,СтруктураНекорректныхДанных.ТекстВопроса,РежимДиалогаВопрос.ДаНетОтмена);
		Иначе
			ЗаполнитьПоВСДНаСервере();
		КонецЕсли;  
		ЗаполнитьПодвалТЗ();
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеОтветаНекорректныеДанныеВСД(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоВСДНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЕстьНекорректныеДанныеВСД(ПроверятьНаПустыеЗначания)
	
	ЕстьПустыеВСД = Ложь;
	КлючевыеДанныеВСДОтличаются = Ложь;
	ТЗВСД = Новый ТаблицаЗначений();
	ТЗВСД.Колонки.Добавить("ВСД", Новый ОписаниеТипов("СправочникСсылка.ВетеринарноСопроводительныйДокументВЕТИС"));
	Для каждого СтрокаТЧ Из ТЗ_ПланФакт Цикл
		Если СтрокаТЧ.НакладныеВетИС.Количество() = 0 Тогда
			Если ПроверятьНаПустыеЗначания Тогда
				ЕстьПустыеВСД = Истина;
			КонецЕсли;
		Иначе
			Для Каждого ЭлементВСД ИЗ СтрокаТЧ.НакладныеВетИС Цикл
				НоваяСтрокаТЗВСД = ТЗВСД.Добавить();
				НоваяСтрокаТЗВСД.ВСД = ЭлементВСД.Значение;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Если ТЗВСД.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗВСД.ВСД КАК ВСД
		|ПОМЕСТИТЬ ВТВСД
		|ИЗ
		|	&ТЗВСД КАК ТЗВСД
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|ВТВСД.ВСД.ДатаТТН,
		|	ВТВСД.ВСД.НомерТТН,
		|	ВТВСД.ВСД.ГрузополучательХозяйствующийСубъект.Контрагент
		|ИЗ
		|	ВТВСД КАК ВТВСД
		|СГРУППИРОВАТЬ ПО
		|	ВТВСД.ВСД.ДатаТТН,
		|	ВТВСД.ВСД.НомерТТН,
		|	ВТВСД.ВСД.ГрузополучательХозяйствующийСубъект.Контрагент";
		Запрос.УстановитьПараметр("ТЗВСД",ТЗВСД);
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Количество() > 1 Тогда
			КлючевыеДанныеВСДОтличаются = Истина;	
		КонецЕсли; 
		СтруктураВозврата = Новый Структура("ЕстьНекорректныеДанные,ТекстВопроса");
		Если ЕстьПустыеВСД И КлючевыеДанныеВСДОтличаются Тогда
			ТекстВопроса = "Не для всех строк табличной части заполнены Ветеринарно-сопроводительные документы. 
			|Так же в выбранных Ветеринарно-сопроводительных документах есть отличающиеся  ключевые данные (Номер ТТН, Дата ТТН, Контрагент). 
			|При различных ключевых данных не будет сформирован документ ВетИС при создании документов отгрузки. Продолжить заполнение?"; 
			СтруктураВозврата.ЕстьНекорректныеДанные = Истина;
			СтруктураВозврата.ТекстВопроса = ТекстВопроса;
		ИначеЕсли ЕстьПустыеВСД Тогда
			ТекстВопроса = "Не для всех строк табличной части заполнены Ветеринарно-сопроводительные документы. Продолжить заполнение?";
			СтруктураВозврата.ЕстьНекорректныеДанные = Истина;
			СтруктураВозврата.ТекстВопроса = ТекстВопроса;
		ИначеЕсли КлючевыеДанныеВСДОтличаются Тогда
			ТекстВопроса = "В выбранных Ветеринарно-сопроводительных документах есть отличающиеся  ключевые данные (Номер ТТН, Дата ТТН, Контрагент). 
			|При наличии различных ключевых данных не будет сформирован документ ВетИС при создании документов отгрузки. Продолжить заполнение?";
			СтруктураВозврата.ЕстьНекорректныеДанные = Истина;
			СтруктураВозврата.ТекстВопроса = ТекстВопроса;
		Иначе
			СтруктураВозврата.ЕстьНекорректныеДанные = Ложь;
			СтруктураВозврата.ТекстВопроса = "";
		КонецЕсли;
	Иначе
		СтруктураВозврата = Новый Структура("ЕстьНекорректныеДанные,ТекстВопроса");
		Если ЕстьПустыеВСД Тогда
			ТекстВопроса = "Не для всех строк табличной части заполнены Ветеринарно-сопроводительные документы. Продолжить заполнение?";
			СтруктураВозврата.ЕстьНекорректныеДанные = Истина;
			СтруктураВозврата.ТекстВопроса = ТекстВопроса;
		Иначе
			СтруктураВозврата.ЕстьНекорректныеДанные = Ложь;
			СтруктураВозврата.ТекстВопроса = "";
		КонецЕсли;
	КонецЕсли;
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоВСДНаСервере()
	
	ТЗ_Отбор = Новый ТаблицаЗначений;
	ТЗ_Отбор.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗ_Отбор.Колонки.Добавить("Продукция", Новый ОписаниеТипов("СправочникСсылка.ПродукцияВЕТИС"));
	ТЗ_Отбор.Колонки.Добавить("ЕдИзм", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмеренияВЕТИС"));
	Для Каждого СтрокаТЧ Из ТЗ_ПланФакт Цикл
	Если СтрокаТЧ.НакладныеВетИС.Количество() > 0 Тогда	
		Для каждого ЭлементСпискаЗначений Из СтрокаТЧ.НакладныеВетИС Цикл
			НоваяСтрокаТЗ_Отбора = ТЗ_Отбор.Добавить();
			НоваяСтрокаТЗ_Отбора.Номенклатура = СтрокаТЧ.Номенклатура;   
			НоваяСтрокаТЗ_Отбора.Продукция = ЭлементСпискаЗначений.Значение.Продукция;
			НоваяСтрокаТЗ_Отбора.ЕдИзм = ЭлементСпискаЗначений.Значение.ЕдиницаИзмеренияВЕТИС; 
			СтрокаТЧ.ЕдИзмВетис = ЭлементСпискаЗначений.Значение.ЕдиницаИзмеренияВЕТИС;
		КонецЦикла; 
	КонецЕсли;
	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КоэффициентыЕдиницИзмеренияВЕТИС.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(КоэффициентыЕдиницИзмеренияВЕТИС.КоэффициентЕдиницыВЕТИС) КАК КоэффициентЕдиницыВЕТИС,
	|	МАКСИМУМ(КоэффициентыЕдиницИзмеренияВЕТИС.ЕдиницаИзмеренияВЕТИС.ЕдиницаИзмерения) КАК ЕдиницаИзмерения
	|ИЗ
	|	РегистрСведений.КоэффициентыЕдиницИзмеренияВЕТИС КАК КоэффициентыЕдиницИзмеренияВЕТИС
	|ГДЕ
	|	(КоэффициентыЕдиницИзмеренияВЕТИС.Номенклатура, КоэффициентыЕдиницИзмеренияВЕТИС.Продукция, КоэффициентыЕдиницИзмеренияВЕТИС.ЕдиницаИзмеренияВЕТИС) В (&ТЗ_Отбор)
	|
	|СГРУППИРОВАТЬ ПО
	|	КоэффициентыЕдиницИзмеренияВЕТИС.Номенклатура";
	Запрос.УстановитьПараметр("ТЗ_Отбор",ТЗ_Отбор);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Для Каждого СтрокаТЧ Из ТЗ_ПланФакт Цикл
		Выборка.Сбросить(); 
		СтруктураПоискаДляВыборки = Новый Структура("Номенклатура",СтрокаТЧ.Номенклатура);
		Если Выборка.НайтиСледующий(СтруктураПоискаДляВыборки) Тогда
			Если ЗначениеЗаполнено(Выборка.КоэффициентЕдиницыВЕТИС) Тогда
				Коэффициент = Выборка.КоэффициентЕдиницыВЕТИС;
				КоэффициентЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
			Иначе
				Коэффициент = 0;	
				КоэффициентЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
			КонецЕсли;
		Иначе
			Коэффициент = 0;	
			КоэффициентЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
		КонецЕсли;
		
		Если СтрокаТЧ.НакладныеВетИС.Количество() = 1 Тогда 
			КоличествоВСД = СправочникВСДПолучитьКоличество(СтрокаТЧ.НакладныеВетИС[0].Значение); 
			Если Коэффициент > 0 Тогда
				СтрокаТЧ.КоличествоДок = ?(СтрокаТЧ.Номенклатура.ЕдиницаИзмерения = КоэффициентЕдиницаИзмерения,КоличествоВСД,КоличествоВСД / Коэффициент); 
			Иначе
				СтрокаТЧ.КоличествоДок = КоличествоВСД;
			КонецЕсли;
			СтруктураДанныхСерии = ПодобратьСериюНоменклатуры(Ложь,СтрокаТЧ.Номенклатура,,СтрокаТЧ.НакладныеВетИС[0].Значение); 
			Если СтруктураДанныхСерии <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТЧ,СтруктураДанныхСерии);	
			КонецЕсли;
			СтрокаТЧ.НесколькоСерий = Ложь; 
			СтруктураОтбора = Новый Структура("НомерСтрокиРеализации, Номенклатура",СтрокаТЧ.НомерСтроки,СтрокаТЧ.Номенклатура);
			СтрокиТЧСерииНоменклатуры = СерииНоменклатуры.НайтиСтроки(СтруктураОтбора);
			Для каждого СтрокаТЧСерииНоменклатуры Из СтрокиТЧСерииНоменклатуры Цикл
				СерииНоменклатуры.Удалить(СтрокаТЧСерииНоменклатуры);
			КонецЦикла;
			НоваяСтрокаТЧСерииНоменклатуры = СерииНоменклатуры.Добавить();
			НоваяСтрокаТЧСерииНоменклатуры.Номенклатура = СтрокаТЧ.Номенклатура;
			НоваяСтрокаТЧСерииНоменклатуры.СерияНоменклатуры = СтруктураДанныхСерии.СерияНоменклатуры; 
			НоваяСтрокаТЧСерииНоменклатуры.Количество = СтрокаТЧ.КоличествоДок;
			НоваяСтрокаТЧСерииНоменклатуры.ДатаПроизводства = СтруктураДанныхСерии.СрокГодности;
			НоваяСтрокаТЧСерииНоменклатуры.СрокГодности2 = СтруктураДанныхСерии.СрокГодности2;
			НоваяСтрокаТЧСерииНоменклатуры.ГоденДо = СтруктураДанныхСерии.ГоденДо;
			НоваяСтрокаТЧСерииНоменклатуры.НомерСтрокиРеализации = СтрокаТЧ.НомерСтроки;
			СерииНоменклатуры.Сортировать("НомерСтрокиРеализации");
		КонецЕсли;
		Если  СтрокаТЧ.НакладныеВетИС.Количество() > 1 Тогда
			ТЗСерийВСД = Новый ТаблицаЗначений;
			ТЗСерийВСД.Колонки.Добавить("СерияНоменклатуры",Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));				
			ТЗСерийВСД.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
			ТЗСерийВСД.Колонки.Добавить("ДатаПроизводства",Новый ОписаниеТипов("Дата"));
			ТЗСерийВСД.Колонки.Добавить("СрокГодности2",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(5,2)));
			ТЗСерийВСД.Колонки.Добавить("ГоденДо",Новый ОписаниеТипов("Дата"));
			ОбщееКоличество = 0;
			Для каждого ЭлементСпискаЗначений Из СтрокаТЧ.НакладныеВетИС Цикл
				СерияКоличество = СправочникВСДПолучитьКоличество(ЭлементСпискаЗначений.Значение);
				СтруктураДанныхСерии = ПодобратьСериюНоменклатуры(Ложь,СтрокаТЧ.Номенклатура,,ЭлементСпискаЗначений.Значение);
				Если СтруктураДанныхСерии <> Неопределено Тогда
					НоваяСтрокаТЗСерийВСД = ТЗСерийВСД.Добавить();
					НоваяСтрокаТЗСерийВСД.СерияНоменклатуры = СтруктураДанныхСерии.СерияНоменклатуры;
					Если Коэффициент > 0 Тогда
						НоваяСтрокаТЗСерийВСД.Количество = ?(СтрокаТЧ.Номенклатура.ЕдиницаИзмерения = КоэффициентЕдиницаИзмерения,СерияКоличество,СерияКоличество / Коэффициент); 
					Иначе	
						НоваяСтрокаТЗСерийВСД.Количество = СерияКоличество;
					КонецЕсли;
					НоваяСтрокаТЗСерийВСД.ДатаПроизводства = СтруктураДанныхСерии.СрокГодности;
					НоваяСтрокаТЗСерийВСД.СрокГодности2 = СтруктураДанныхСерии.СрокГодности2;
					НоваяСтрокаТЗСерийВСД.ГоденДо = СтруктураДанныхСерии.ГоденДо;
					ОбщееКоличество = ОбщееКоличество + СерияКоличество; 
				КонецЕсли;
			КонецЦикла;
			ТЗСерийВСД.Свернуть("СерияНоменклатуры,ДатаПроизводства,СрокГодности2,ГоденДо","Количество"); 
			Если ТЗСерийВСД.Количество() = 1 Тогда
				Если Коэффициент > 0 Тогда
					//СтрокаТЧ.КоличествоДок = ?(СтрокаТЧ.Номенклатура.ЕдиницаИзмерения = КоэффициентЕдиницаИзмерения,ТЗСерийВСД[0].Количество,ТЗСерийВСД[0].Количество / Коэффициент); 
					СтрокаТЧ.КоличествоДок = ?(СтрокаТЧ.Номенклатура.ЕдиницаИзмерения = КоэффициентЕдиницаИзмерения,ОбщееКоличество,ОбщееКоличество / Коэффициент); 
				Иначе
					СтрокаТЧ.КоличествоДок = ТЗСерийВСД[0].Количество;
				КонецЕсли;
				СтрокаТЧ.СрокГодности = ТЗСерийВСД[0].ДатаПроизводства;
				СтрокаТЧ.СрокГодности2 = ТЗСерийВСД[0].СрокГодности2;
				СтрокаТЧ.ГоденДо = ТЗСерийВСД[0].ГоденДо;
				СтрокаТЧ.СерияНоменклатуры = ТЗСерийВСД[0].СерияНоменклатуры;
				Если ЗначениеЗаполнено(СтрокаТЧ.СерияНоменклатуры) Тогда
					СтрокаТЧ.ОСГ = РассчитатьОСГНаСервере(СтрокаТЧ.СерияНоменклатуры);
				Иначе
					СтрокаТЧ.ОСГ = 0;
				КонецЕсли;
				СтрокаТЧ.НесколькоСерий = Ложь; 
				СтруктураОтбора = Новый Структура("НомерСтрокиРеализации, Номенклатура",СтрокаТЧ.НомерСтроки,СтрокаТЧ.Номенклатура);
				СтрокиТЧСерииНоменклатуры = СерииНоменклатуры.НайтиСтроки(СтруктураОтбора);
				Для каждого СтрокаТЧСерииНоменклатуры Из СтрокиТЧСерииНоменклатуры Цикл
					СерииНоменклатуры.Удалить(СтрокаТЧСерииНоменклатуры);
				КонецЦикла;
				НоваяСтрокаТЧСерииНоменклатуры = СерииНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧСерииНоменклатуры,ТЗСерийВСД[0]);
				НоваяСтрокаТЧСерииНоменклатуры.НомерСтрокиРеализации = СтрокаТЧ.НомерСтроки; 
				НоваяСтрокаТЧСерииНоменклатуры.Номенклатура = СтрокаТЧ.Номенклатура;
				СерииНоменклатуры.Сортировать("НомерСтрокиРеализации");
			ИначеЕсли  ТЗСерийВСД.Количество() > 1 Тогда
				СтруктураОтбора = Новый Структура("НомерСтрокиРеализации, Номенклатура",СтрокаТЧ.НомерСтроки,СтрокаТЧ.Номенклатура);
				СтрокиТЧСерииНоменклатуры = СерииНоменклатуры.НайтиСтроки(СтруктураОтбора);
				Для каждого СтрокаТЧСерииНоменклатуры Из СтрокиТЧСерииНоменклатуры Цикл
					СерииНоменклатуры.Удалить(СтрокаТЧСерииНоменклатуры);
				КонецЦикла;
				
				МинимумОСГ = Неопределено;
				Для каждого СтрокаТЗСерийВСД Из ТЗСерийВСД Цикл
					НоваяСтрокаТЧСерииНоменклатуры = СерииНоменклатуры.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧСерииНоменклатуры,СтрокаТЗСерийВСД);
					НоваяСтрокаТЧСерииНоменклатуры.НомерСтрокиРеализации = СтрокаТЧ.НомерСтроки;
					НоваяСтрокаТЧСерииНоменклатуры.Номенклатура = СтрокаТЧ.Номенклатура; 
					Если ЗначениеЗаполнено(СтрокаТЗСерийВСД.СерияНоменклатуры) Тогда
						ОСГ = РассчитатьОСГНаСервере(СтрокаТЗСерийВСД.СерияНоменклатуры);
					Иначе
						ОСГ = 0;
					КонецЕсли;
					МинимумОСГ = ?(МинимумОСГ = Неопределено,ОСГ,Мин(МинимумОСГ,ОСГ));
				КонецЦикла;  
				Если Коэффициент > 0 Тогда
					СтрокаТЧ.КоличествоДок = ?(СтрокаТЧ.Номенклатура.ЕдиницаИзмерения = КоэффициентЕдиницаИзмерения,ОбщееКоличество,ОбщееКоличество / Коэффициент); 
				Иначе
					СтрокаТЧ.КоличествоДок = ОбщееКоличество;
				КонецЕсли;
				СтрокаТЧ.НесколькоСерий = Истина;
				СтрокаТЧ.СерияНоменклатуры = Неопределено;
				СтрокаТЧ.ОСГ = МинимумОСГ;
				СерииНоменклатуры.Сортировать("НомерСтрокиРеализации");
			КонецЕсли;
		КонецЕсли;		 
	КонецЦикла;
	Модифицированность = Истина;
	
КонецПроцедуры


&НаКлиенте
Процедура ВыполнитьПослеОтветаЗаполдениеНомерТТНДатаТТНВЕТИС(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоВЕТИСНаСервере(Истина);
		ЗаполнитьПодвалТЗ();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		ЗаполнитьПоВЕТИСНаСервере(Ложь); 
		ЗаполнитьПодвалТЗ();
	КонецЕсли;

КонецПроцедуры


&НаСервере
Процедура ЗаполнитьПоВЕТИСНаСервере(ЗаполнятьНомерТТНДатаТТН)
	
	Если ЗначениеЗаполнено(НакладнаяВЕТИС) Тогда
		ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НакладнаяВЕТИС,"Товары,НомерТТН,ДатаТТН");
		Если ЗаполнятьНомерТТНДатаТТН Тогда
			НомерТТН = ДанныеДокумента.НомерТТН;
			ДатаТТН = ДанныеДокумента.ДатаТТН;
			Если РеквизитыСчФСовпадают Тогда
				НомерСчФ = НомерТТН;
				ДатаСчФ = ДатаТТН;
			КонецЕсли;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ 
		|	ЗапросТЧВетис.Номенклатура КАК Номенклатура,
		|	ЗапросТЧВетис.Продукция КАК Продукция,
		|	ЗапросТЧВетис.ЕдиницаИзмеренияВЕТИС КАК ЕдиницаИзмеренияВЕТИС
		|ПОМЕСТИТЬ ВТДанныеВетис
		|ИЗ &РезультатЗапросаТЧВетис КАК ЗапросТЧВетис	
		|;
		|//////////////////////////////////////////////////////////////////////////	
		|ВЫБРАТЬ
		|	КоэффициентыЕдиницИзмеренияВЕТИС.Номенклатура КАК Номенклатура,
		|	МАКСИМУМ(КоэффициентыЕдиницИзмеренияВЕТИС.КоэффициентЕдиницыВЕТИС) КАК КоэффициентЕдиницыВЕТИС
		|ИЗ
		|	РегистрСведений.КоэффициентыЕдиницИзмеренияВЕТИС КАК КоэффициентыЕдиницИзмеренияВЕТИС
		|ГДЕ
		|	(КоэффициентыЕдиницИзмеренияВЕТИС.Номенклатура, КоэффициентыЕдиницИзмеренияВЕТИС.Продукция, КоэффициентыЕдиницИзмеренияВЕТИС.ЕдиницаИзмеренияВЕТИС) В 
		|   (ВЫБРАТЬ ВТДанныеВетис.Номенклатура КАК Номенклатура,
		|			 ВТДанныеВетис.Продукция КАК Продукция,
		|			 ВТДанныеВетис.ЕдиницаИзмеренияВЕТИС КАК ЕдиницаИзмеренияВЕТИС 
		|			 ИЗ ВТДанныеВетис КАК ВТДанныеВетис)
		|
		|СГРУППИРОВАТЬ ПО
		|	КоэффициентыЕдиницИзмеренияВЕТИС.Номенклатура";
		Запрос.УстановитьПараметр("РезультатЗапросаТЧВетис",ДанныеДокумента.Товары);
		РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();

	ВыборкаСтрокНакладнаяВЕТИС = ДанныеДокумента.Товары.Выбрать();
		
		
	Для Каждого СтрокаТЧ Из ТЗ_ПланФакт Цикл
			Выборка.Сбросить();
			ВыборкаСтрокНакладнаяВЕТИС.Сбросить();
			СтруктураПоиска = Новый Структура("Номенклатура", СтрокаТЧ.Номенклатура);
			Если ВыборкаСтрокНакладнаяВЕТИС.НайтиСледующий(СтруктураПоиска) Тогда
				СтроктураПоискаДляВыборки = Новый Структура("Номенклатура",СтрокаТЧ.Номенклатура);
				Если Выборка.НайтиСледующий(СтроктураПоискаДляВыборки) Тогда
					Если ЗначениеЗаполнено(Выборка.КоэффициентЕдиницыВЕТИС) Тогда
						СтрокаТЧ.КоличествоДок = ВыборкаСтрокНакладнаяВЕТИС.Количество * Выборка.КоэффициентЕдиницыВЕТИС; 
					Иначе
					    СтрокаТЧ.КоличествоДок = ?(ЗначениеЗаполнено(СтрокаТЧ.Номенклатура.Вес),СтрокаТЧ.Номенклатура.Вес * ВыборкаСтрокНакладнаяВЕТИС.Количество,ВыборкаСтрокНакладнаяВЕТИС.Количество);
					КонецЕсли;
				Иначе
					СтрокаТЧ.КоличествоДок = ?(ЗначениеЗаполнено(СтрокаТЧ.Номенклатура.Вес),СтрокаТЧ.Номенклатура.Вес * ВыборкаСтрокНакладнаяВЕТИС.Количество,ВыборкаСтрокНакладнаяВЕТИС.Количество);	
				КонецЕсли;

				//СтрокаТЧ.КоличествоДок = ВыборкаСтрокНакладнаяВЕТИС.Количество;
				СтруктураДанныхСерии = ПодобратьСериюНоменклатуры(Истина,СтрокаТЧ.Номенклатура,ВыборкаСтрокНакладнаяВЕТИС.ЗаписьСкладскогоЖурнала,
				ВыборкаСтрокНакладнаяВЕТИС.ВетеринарноСопроводительныйДокумент); 
				Если СтруктураДанныхСерии <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(СтрокаТЧ,СтруктураДанныхСерии);	
				КонецЕсли;
				СтруктураОтбора = Новый Структура("НомерСтрокиРеализации, Номенклатура",СтрокаТЧ.НомерСтроки,СтрокаТЧ.Номенклатура);
				СтрокиТЧСерииНоменклатуры = СерииНоменклатуры.НайтиСтроки(СтруктураОтбора);
				Для каждого СтрокаТЧСерииНоменклатуры Из СтрокиТЧСерииНоменклатуры Цикл
					СерииНоменклатуры.Удалить(СтрокаТЧСерииНоменклатуры);
				КонецЦикла;
				НоваяСтрокаТЧСерииНоменклатуры = СерииНоменклатуры.Добавить(); 
				НоваяСтрокаТЧСерииНоменклатуры.Номенклатура = СтрокаТЧ.Номенклатура;
				НоваяСтрокаТЧСерииНоменклатуры.СерияНоменклатуры = СтруктураДанныхСерии.СерияНоменклатуры; 
				НоваяСтрокаТЧСерииНоменклатуры.Количество = СтрокаТЧ.КоличествоДок;
				НоваяСтрокаТЧСерииНоменклатуры.ДатаПроизводства = СтруктураДанныхСерии.СрокГодности;
				НоваяСтрокаТЧСерииНоменклатуры.СрокГодности2 = СтруктураДанныхСерии.СрокГодности2;
				НоваяСтрокаТЧСерииНоменклатуры.ГоденДо = СтруктураДанныхСерии.ГоденДо;
				НоваяСтрокаТЧСерииНоменклатуры.НомерСтрокиРеализации = СтрокаТЧ.НомерСтроки;
			КонецЕсли;
		КонецЦикла; 
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоУПДЭДО(Команда)
	
	ДокументЭДОНайден = Ложь;
	ПоказатьСписокЭДО = Ложь;
	СписокДокументовЭДО = Новый СписокЗначений;
	ЗаполнитьПоУПДЭДОНаСервере(ПоказатьСписокЭДО,СписокДокументовЭДО,ДокументЭДОНайден);
	Если ДокументЭДОНайден Тогда
		ПоляЗаполены = Ложь;
		Если ЗначениеЗаполнено(НомерТТН) И ЗначениеЗаполнено(ДатаТТН) Тогда
			ТекстВопроса = "Поля ""Номер ТТН"" и ""Дата ТТН"" заполнены. Перезаполнить данными из документа ЭДО?"; 
			ПоляЗаполены = Истина;
		ИначеЕсли ЗначениеЗаполнено(НомерТТН) Тогда
			ТекстВопроса = "Поле ""Номер ТТН"" заполнено. Перезаполнить данными из документа ЭДО?"; 
			ПоляЗаполены = Истина;
		ИначеЕсли ЗначениеЗаполнено(ДатаТТН) Тогда
			ТекстВопроса = "Поле ""Дата ТТН"" заполнено. Перезаполнить данными из документа ЭДО?"; 
			ПоляЗаполены = Истина;
		КонецЕсли;
		
		Если ПоляЗаполены Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеОтветаЗаполдениеНомерТТНДатаТТН",ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса,РежимДиалогаВопрос.ДаНетОтмена);
		Иначе
			СтруктураНомерТТНДатаТТН = ЗаполнитьНомерТТНДатаТТННаСервере(ВходящаяУПДЭДО);
			НомерТТН = СтруктураНомерТТНДатаТТН.НомерДокумента; 
			ДатаТТН = СтруктураНомерТТНДатаТТН.ДатаДокумента;
			Если РеквизитыСчФСовпадают Тогда
				НомерСчФ = НомерТТН;
				ДатаСчФ = ДатаТТН;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	Если ПоказатьСписокЭДО Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеВыбораИзСпискаЭДО",ЭтотОбъект);
		СписокДокументовЭДО.ПоказатьВыборЭлемента(ОписаниеОповещения, "Подходящие документы ЭДО для выбора",СписокДокументовЭДО[0]);
	КонецЕсли;
	Если ДокументЭДОНайден И Не ПоляЗаполены Тогда
		ЗаполнитьТЧЭДО(Неопределено);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьПослеВыбораИзСпискаЭДО(ВыбранныйЭлемент,ДопПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ВходящаяУПДЭДО = ВыбранныйЭлемент.Значение; 
		ПоляЗаполены = Ложь;
		Если ЗначениеЗаполнено(НомерТТН) И ЗначениеЗаполнено(ДатаТТН) Тогда
			ТекстВопроса = "Поля ""Номер ТТН"" и ""Дата ТТН"" заполнены. Перезаполнить данными из документа ЭДО?"; 
			ПоляЗаполены = Истина;
		ИначеЕсли ЗначениеЗаполнено(НомерТТН) Тогда
			ТекстВопроса = "Поле ""Номер ТТН"" заполнено. Перезаполнить данными из документа ЭДО?"; 
			ПоляЗаполены = Истина;
		ИначеЕсли ЗначениеЗаполнено(ДатаТТН) Тогда
			ТекстВопроса = "Поле ""Дата ТТН"" заполнено. Перезаполнить данными из документа ЭДО?"; 
			ПоляЗаполены = Истина;
		КонецЕсли;
		
		Если ПоляЗаполены Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеОтветаЗаполдениеНомерТТНДатаТТН",ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса,РежимДиалогаВопрос.ДаНетОтмена);
		Иначе
			СтруктураНомерТТНДатаТТН = ЗаполнитьНомерТТНДатаТТННаСервере(ВходящаяУПДЭДО);
			НомерТТН = СтруктураНомерТТНДатаТТН.НомерДокумента; 
			ДатаТТН = СтруктураНомерТТНДатаТТН.ДатаДокумента; 
			ЗаполнитьТЧЭДО(Неопределено);
		КонецЕсли; 
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоУПДЭДОНаСервере(ПоказатьСписокЭДО,СписокДокументовЭДО,ДокументЭДОНайден)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭлектронныйДокументВходящийЭДО.Ссылка КАК Ссылка,
	|	ЭлектронныйДокументВходящийЭДО.Представление КАК Представление,
	|	ЭлектронныйДокументВходящийЭДО.СуммаДокумента КАК СуммаДокумента
	|ПОМЕСТИТЬ ВТЭДО
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
	|ГДЕ
	|	ЭлектронныйДокументВходящийЭДО.ДатаДокумента МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ЭлектронныйДокументВходящийЭДО.Контрагент = &Контрагент
	|	И ЭлектронныйДокументВходящийЭДО.СуммаДокумента = &СуммаДокумента
	|	И НЕ ЭлектронныйДокументВходящийЭДО.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТЭДО.Ссылка КАК Ссылка,
	|	ВТЭДО.Представление КАК Представление,
	|	ВТЭДО.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	ВТЭДО КАК ВТЭДО
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
	|		ПО ВТЭДО.Ссылка = СостоянияДокументовЭДО.ЭлектронныйДокумент
	|ГДЕ
	|	ЕСТЬNULL(СостоянияДокументовЭДО.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.НеСформирован)) <> ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.Аннулирован)
	|   И ЕСТЬNULL(СостоянияДокументовЭДО.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.НеСформирован)) <> ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОбменЗавершен)";
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ОбрабатываемыйДокумент.Дата));
	Запрос.УстановитьПараметр("ДатаОкончания", ДобавитьМесяц(ОбрабатываемыйДокумент.Дата,1));
	Запрос.УстановитьПараметр("Контрагент", ОбрабатываемыйДокумент.Контрагент);
	Запрос.УстановитьПараметр("СуммаДокумента", ОбрабатываемыйДокумент.СуммаДокумента);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			ВходящаяУПДЭДО = Выборка.Ссылка;
			ДокументЭДОНайден = Истина;
		Иначе
			ПоказатьСписокЭДО = Истина;
			Пока Выборка.Следующий() Цикл
				СписокДокументовЭДО.Добавить(Выборка.Ссылка, Выборка.Представление + " Сумма документа: " + Строка(Выборка.СуммаДокумента));
			КонецЦикла;	
		КонецЕсли;
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭлектронныйДокументВходящийЭДО.Ссылка КАК Ссылка,
	|	ЭлектронныйДокументВходящийЭДО.СуммаДокумента КАК СуммаДокумента,
	|	ВЫБОР
	|		КОГДА ЭлектронныйДокументВходящийЭДО.СуммаДокумента - &СуммаЗаказа < 0
	|			ТОГДА -(ЭлектронныйДокументВходящийЭДО.СуммаДокумента - &СуммаЗаказа)
	|		ИНАЧЕ ЭлектронныйДокументВходящийЭДО.СуммаДокумента - &СуммаЗаказа
	|	КОНЕЦ КАК ОтклонениеОтСуммы,
	|	ЭлектронныйДокументВходящийЭДО.Представление КАК Представление
	|ПОМЕСТИТЬ ВТЭДО
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
	|ГДЕ
	|	ЭлектронныйДокументВходящийЭДО.ДатаДокумента МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ЭлектронныйДокументВходящийЭДО.Контрагент = &Контрагент
	|	И НЕ ЭлектронныйДокументВходящийЭДО.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТЭДО.Ссылка КАК Ссылка,
	|	ВТЭДО.СуммаДокумента КАК СуммаДокумента,
	|	ВТЭДО.ОтклонениеОтСуммы КАК ОтклонениеОтСуммы,
	|	ВТЭДО.Представление КАК Представление
	|ИЗ
	|	ВТЭДО КАК ВТЭДО
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
	|		ПО ВТЭДО.Ссылка = СостоянияДокументовЭДО.ЭлектронныйДокумент
	|ГДЕ
	|	ЕСТЬNULL(СостоянияДокументовЭДО.Состояние, Значение(Перечисление.СостоянияДокументовЭДО.НеСформирован)) <> Значение(Перечисление.СостоянияДокументовЭДО.Аннулирован)
	|   И ЕСТЬNULL(СостоянияДокументовЭДО.Состояние, Значение(Перечисление.СостоянияДокументовЭДО.НеСформирован)) <> Значение(Перечисление.СостоянияДокументовЭДО.ОбменЗавершен)
	|УПОРЯДОЧИТЬ ПО
	|	ОтклонениеОтСуммы";
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ОбрабатываемыйДокумент.Дата));
	Запрос.УстановитьПараметр("ДатаОкончания", ДобавитьМесяц(ОбрабатываемыйДокумент.Дата,1));
	Запрос.УстановитьПараметр("Контрагент", ОбрабатываемыйДокумент.Контрагент); 
	Запрос.УстановитьПараметр("СуммаЗаказа", ОбрабатываемыйДокумент.СуммаДокумента);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			ВходящаяУПДЭДО = Выборка.Ссылка;
			ДокументЭДОНайден = Истина;
		Иначе
			ПоказатьСписокЭДО = Истина;
			Пока Выборка.Следующий() Цикл
				СписокДокументовЭДО.Добавить(Выборка.Ссылка, Выборка.Представление + " Сумма документа: " + Строка(Выборка.СуммаДокумента));
			КонецЦикла;	
		КонецЕсли; 
	Иначе
		Сообщить("Подходящий документ ЭДО не найден");
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьДанныеГТД()
	
	МассивНоменклатуры = ТЗ_ПланФакт.Выгрузить(,"Номенклатура").ВыгрузитьКолонку("Номенклатура");
	ДанныеНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивНоменклатуры, "СтранаПроисхождения");
	Для каждого СтрокаТЗ Из ТЗ_ПланФакт Цикл
		СтрокаТЗ.ИмпортныйТовар = ?(ЗначениеЗаполнено(ДанныеНоменклатуры.Получить(СтрокаТЗ.Номенклатура).СтранаПроисхождения),
		НЕ ДанныеНоменклатуры.Получить(СтрокаТЗ.Номенклатура).СтранаПроисхождения.УчастникЕАЭС, Ложь);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьИмпортныйТовар(Номенклатура)
	
	ДанныеНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "СтранаПроисхождения");
	Результат = ?(ЗначениеЗаполнено(ДанныеНоменклатуры.СтранаПроисхождения),НЕ ДанныеНоменклатуры.СтранаПроисхождения.УчастникЕАЭС, Ложь);
	Возврат Результат;

КонецФункции
&НаКлиенте
Процедура ТЗ_ПланФактНоменклатураПриИзменении(Элемент)
	
	ТД = Элементы.ТЗ_ПланФакт.ТекущиеДанные;
	ТД.ИмпортныйТовар = ВернутьИмпортныйТовар(ТД.Номенклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура НакладнаяВЕТИСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = ПолучитьФорму("Документ.ВходящаяТранспортнаяОперацияВЕТИС.ФормаВыбора"); 
	ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ГрузоотправительХозяйствующийСубъект.Контрагент");
	ЭлементОтбора.ПравоеЗначение = БюджетныйНаСервере.ВернутьРеквизит(ОбрабатываемыйДокумент, "Контрагент");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина; 
	ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОповещениеПослеВыбора = Новый ОписаниеОповещения("ВыполнитьПослеОкончанияВыбораВЕТИС", ЭтотОбъект, Новый Структура);
	ФормаВыбора.ОписаниеОповещенияОЗакрытии = ОповещениеПослеВыбора;
	ФормаВыбора.Открыть();  
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеОкончанияВыбораВЕТИС(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	НакладнаяВЕТИС = Результат;
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящаяУПДЭДОПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ВходящаяУПДЭДО) Тогда
		ПоляЗаполены = Ложь;
		Если ЗначениеЗаполнено(НомерТТН) И ЗначениеЗаполнено(ДатаТТН) Тогда
			ТекстВопроса = "Поля ""Номер ТТН"" и ""Дата ТТН"" заполнены. Перезаполнить данными из документа ЭДО?"; 
			ПоляЗаполены = Истина;
		ИначеЕсли ЗначениеЗаполнено(НомерТТН) Тогда
			ТекстВопроса = "Поле ""Номер ТТН"" заполнено. Перезаполнить данными из документа ЭДО?"; 
			ПоляЗаполены = Истина;
		ИначеЕсли ЗначениеЗаполнено(ДатаТТН) Тогда
			ТекстВопроса = "Поле ""Дата ТТН"" заполнено. Перезаполнить данными из документа ЭДО?"; 
			ПоляЗаполены = Истина;
		КонецЕсли;
		
		Если ПоляЗаполены Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеОтветаЗаполдениеНомерТТНДатаТТН",ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса,РежимДиалогаВопрос.ДаНетОтмена);
		Иначе
			СтруктураНомерТТНДатаТТН = ЗаполнитьНомерТТНДатаТТННаСервере(ВходящаяУПДЭДО);
			НомерТТН = СтруктураНомерТТНДатаТТН.НомерДокумента; 
			ДатаТТН = СтруктураНомерТТНДатаТТН.ДатаДокумента;
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ВыполнитьПослеОтветаЗаполдениеНомерТТНДатаТТН(Результат,ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СтруктураНомерТТНДатаТТН = ЗаполнитьНомерТТНДатаТТННаСервере(ВходящаяУПДЭДО);
		НомерТТН = СтруктураНомерТТНДатаТТН.НомерДокумента; 
		ДатаТТН = СтруктураНомерТТНДатаТТН.ДатаДокумента;
		Если РеквизитыСчФСовпадают Тогда
			НомерСчФ = НомерТТН;
			ДатаСчФ = ДатаТТН;
		КонецЕсли;  
	КонецЕсли;
	ЗаполнитьТЧЭДО(Неопределено);
	
КонецПроцедуры 


&НаСервереБезКонтекста
Функция ЗаполнитьНомерТТНДатаТТННаСервере(ВходящаяУПДЭДО)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВходящаяУПДЭДО,"ДатаДокумента,НомерДокумента"); 
	
КонецФункции

&НаСервереБезКонтекста
Функция СправочникВСДПолучитьКоличество(СправочникВСД)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВетеринарноСопроводительныйДокументВЕТИС.КоличествоВЕТИС КАК КоличествоВЕТИС
	|ИЗ
	|	Справочник.ВетеринарноСопроводительныйДокументВЕТИС КАК ВетеринарноСопроводительныйДокументВЕТИС
	|ГДЕ
	|	ВетеринарноСопроводительныйДокументВЕТИС.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", СправочникВСД);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.КоличествоВЕТИС; 
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ТЗ_ПланФактНакладныеВетИСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТД = Элементы.ТЗ_ПланФакт.ТекущиеДанные;
	СтруктураПараметры = Новый Структура("Заказ, Номенклатура, НомерТТН, ДатаТТН", ОбрабатываемыйДокумент, ТД.Номенклатура, НомерТТН, ДатаТТН);
	ФормаВыбора = ПолучитьФорму("Документ.ЗаказПоставщику.Форма.ФормаПодбораВетис",СтруктураПараметры,ЭтотОбъект); 
	ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца; 
	Для Каждого СправочникВСД Из ТД.НакладныеВетИС Цикл
		НоваяСтрокаДокументы = ФормаВыбора.Документы.Добавить();
		НоваяСтрокаДокументы.Документ = СправочникВСД.Значение;  
		НоваяСтрокаДокументы.ДокументПредставление = СправочникВСД.Представление;
		НоваяСтрокаДокументы.Количество = СправочникВСДПолучитьКоличество(СправочникВСД.Значение);
		ФормаВыбора.Количество = ФормаВыбора.Количество + НоваяСтрокаДокументы.Количество;	
	КонецЦикла;
	ОповещениеПослеВыбора = Новый ОписаниеОповещения("ВыполнитьПослеПодбораВЕТИС", ЭтотОбъект);
	ФормаВыбора.ОписаниеОповещенияОЗакрытии = ОповещениеПослеВыбора;
	ФормаВыбора.Открыть();  
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеПодбораВЕТИС(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ТД = Элементы.ТЗ_ПланФакт.ТекущиеДанные;
		ТД.НакладныеВетИС.Очистить();
		Для Каждого ЭлементСЗ Из Результат.Документы Цикл
			Если ЗначениеЗаполнено(ЭлементСЗ.Значение) Тогда
				НовЭлементСЗ = ТД.НакладныеВетИС.Добавить();
				НовЭлементСЗ.Значение = ЭлементСЗ.Значение;
				НовЭлементСЗ.Представление = ЭлементСЗ.Представление; 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодобратьВЕТИСДляСтрокНаСервере(ЕстьПодобранныеВСД = Ложь)
	
	Для Каждого СтрокаТЧ ИЗ ТЗ_ПланФакт Цикл
		СтрокаТЧ.НакладныеВетИС.Очистить();
	КонецЦикла;
	ЗапросВСД = Новый Запрос;
	ЗапросВСД.Текст = "
	//|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	ВетеринарноСопроводительныйДокументВЕТИССвязанныеДокументы.Ссылка КАК Ссылка
	//|ПОМЕСТИТЬ ВТПодборПоТЧ
	//|ИЗ
	//|	Справочник.ВетеринарноСопроводительныйДокументВЕТИС.СвязанныеДокументы КАК ВетеринарноСопроводительныйДокументВЕТИССвязанныеДокументы
	//|ГДЕ
	//|	ВЫБОР
	//|			КОГДА ВетеринарноСопроводительныйДокументВЕТИССвязанныеДокументы.Ссылка.ГрузоотправительХозяйствующийСубъект.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	//|				ТОГДА ВетеринарноСопроводительныйДокументВЕТИССвязанныеДокументы.Ссылка.ГрузоотправительХозяйствующийСубъект.Контрагент = &Контрагент
	//|			ИНАЧЕ ВетеринарноСопроводительныйДокументВЕТИССвязанныеДокументы.Ссылка.ГрузоотправительХозяйствующийСубъект.ИНН = &ИНН
	//|		КОНЕЦ
	//|	И ВетеринарноСопроводительныйДокументВЕТИССвязанныеДокументы.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыВетеринарныхДокументовВЕТИС.Аннулирован)
	//|	И ВетеринарноСопроводительныйДокументВЕТИССвязанныеДокументы.Номер = &НомерТТН
	//|	И ВетеринарноСопроводительныйДокументВЕТИССвязанныеДокументы.Дата = &ДатаТТН
	//|;
	//
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВетеринарноСопроводительныйДокументВЕТИС.Продукция КАК Продукция,
	//|	ВетеринарноСопроводительныйДокументВЕТИС.Ссылка КАК Ссылка,
	//|	ВетеринарноСопроводительныйДокументВЕТИС.КоличествоВЕТИС КАК КоличествоВЕТИС,
	//|	ВетеринарноСопроводительныйДокументВЕТИС.ГрузоотправительХозяйствующийСубъект.Контрагент КАК ГрузоотправительХозяйствующийСубъектКонтрагент
	//|ИЗ
	//|	Справочник.ВетеринарноСопроводительныйДокументВЕТИС КАК ВетеринарноСопроводительныйДокументВЕТИС
	//|ГДЕ
	//|	ВЫБОР
	//|			КОГДА ВетеринарноСопроводительныйДокументВЕТИС.ГрузоотправительХозяйствующийСубъект.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	//|				ТОГДА ВетеринарноСопроводительныйДокументВЕТИС.ГрузоотправительХозяйствующийСубъект.Контрагент = &Контрагент
	//|			ИНАЧЕ ВетеринарноСопроводительныйДокументВЕТИС.ГрузоотправительХозяйствующийСубъект.ИНН = &ИНН
	//|		КОНЕЦ
	//|	И ВетеринарноСопроводительныйДокументВЕТИС.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыВетеринарныхДокументовВЕТИС.Аннулирован)
	//|	И ВЫБОР
	//|			КОГДА СОКРЛП(ВетеринарноСопроводительныйДокументВЕТИС.НомерТТН) = ""
	//|				ТОГДА ВетеринарноСопроводительныйДокументВЕТИС.Ссылка В
	//|						(ВЫБРАТЬ
	//|							ВТПодборПоТЧ.Ссылка
	//|						ИЗ
	//|							ВТПодборПоТЧ КАК ВТПодборПоТЧ)
	//|			ИНАЧЕ ВетеринарноСопроводительныйДокументВЕТИС.НомерТТН = &НомерТТН
	//|		КОНЕЦ
	//|	И ВЫБОР
	//|			КОГДА СОКРЛП(ВетеринарноСопроводительныйДокументВЕТИС.НомерТТН) = ""
	//|				ТОГДА ВетеринарноСопроводительныйДокументВЕТИС.Ссылка В
	//|						(ВЫБРАТЬ
	//|							ВТПодборПоТЧ.Ссылка
	//|						ИЗ
	//|							ВТПодборПоТЧ КАК ВТПодборПоТЧ)
	//|			ИНАЧЕ ВетеринарноСопроводительныйДокументВЕТИС.ДатаТТН = &ДатаТТН
	//|		КОНЕЦ";
	|ВЫБРАТЬ
	|	ВетеринарноСопроводительныйДокументВЕТИС.Продукция КАК Продукция,
	|	ВетеринарноСопроводительныйДокументВЕТИС.Ссылка КАК Ссылка,
	|	ВетеринарноСопроводительныйДокументВЕТИС.КоличествоВЕТИС КАК КоличествоВЕТИС,
	|ВетеринарноСопроводительныйДокументВЕТИС.ГрузоотправительХозяйствующийСубъект.Контрагент
	|ИЗ
	|	Справочник.ВетеринарноСопроводительныйДокументВЕТИС КАК ВетеринарноСопроводительныйДокументВЕТИС
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВетеринарноСопроводительныйДокументВЕТИС.ГрузоотправительХозяйствующийСубъект.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				ТОГДА ВетеринарноСопроводительныйДокументВЕТИС.ГрузоотправительХозяйствующийСубъект.Контрагент = &Контрагент
	|			ИНАЧЕ ВетеринарноСопроводительныйДокументВЕТИС.ГрузоотправительХозяйствующийСубъект.ИНН = &ИНН
	|		КОНЕЦ  
	|	И ВетеринарноСопроводительныйДокументВЕТИС.Статус <> Значение(Перечисление.СтатусыВетеринарныхДокументовВЕТИС.Аннулирован)
	|	И ВетеринарноСопроводительныйДокументВЕТИС.НомерТТН = &НомерТТН
	|	И ВетеринарноСопроводительныйДокументВЕТИС.ДатаТТН = &ДатаТТН";
	ЗапросВСД.УстановитьПараметр("Контрагент",ОбрабатываемыйДокумент.Контрагент); 
	ЗапросВСД.УстановитьПараметр("ИНН",СокрЛП(ОбрабатываемыйДокумент.Контрагент.ИНН));
	ЗапросВСД.УстановитьПараметр("НомерТТН",НомерТТН);
	ЗапросВСД.УстановитьПараметр("ДатаТТН",ДатаТТН);
	РезультатЗапросаВСД = ЗапросВСД.Выполнить(); 
	Если РезультатЗапросаВСД.Пустой() Тогда
		ЗапросВСД = Новый Запрос;
		ЗапросВСД.Текст = "
		|ВЫБРАТЬ
		|	ВетеринарноСопроводительныйДокументВЕТИС.Ссылка.Продукция КАК Продукция,
		|	ВетеринарноСопроводительныйДокументВЕТИС.Ссылка КАК Ссылка,
		|	ВетеринарноСопроводительныйДокументВЕТИС.Ссылка.КоличествоВЕТИС КАК КоличествоВЕТИС,
		|	ВетеринарноСопроводительныйДокументВЕТИС.Ссылка.ГрузоотправительХозяйствующийСубъект.Контрагент КАК ГрузоотправительХозяйствующийСубъектКонтрагент
		|ИЗ
		|	Справочник.ВетеринарноСопроводительныйДокументВЕТИС.СвязанныеДокументы КАК ВетеринарноСопроводительныйДокументВЕТИС
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ВетеринарноСопроводительныйДокументВЕТИС.Ссылка.ГрузоотправительХозяйствующийСубъект.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|				ТОГДА ВетеринарноСопроводительныйДокументВЕТИС.Ссылка.ГрузоотправительХозяйствующийСубъект.Контрагент = &Контрагент
		|			ИНАЧЕ ВетеринарноСопроводительныйДокументВЕТИС.Ссылка.ГрузоотправительХозяйствующийСубъект.ИНН = &ИНН
		|		КОНЕЦ
		|	И ВетеринарноСопроводительныйДокументВЕТИС.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыВетеринарныхДокументовВЕТИС.Аннулирован)
		|	И ВетеринарноСопроводительныйДокументВЕТИС.Номер = &НомерТТН
		|	И ВетеринарноСопроводительныйДокументВЕТИС.Дата = &ДатаТТН
		|
		|СГРУППИРОВАТЬ ПО
		|	ВетеринарноСопроводительныйДокументВЕТИС.Ссылка.Продукция,
		|	ВетеринарноСопроводительныйДокументВЕТИС.Ссылка,
		|	ВетеринарноСопроводительныйДокументВЕТИС.Ссылка.КоличествоВЕТИС,
		|	ВетеринарноСопроводительныйДокументВЕТИС.Ссылка.ГрузоотправительХозяйствующийСубъект.Контрагент";
		ЗапросВСД.УстановитьПараметр("Контрагент",ОбрабатываемыйДокумент.Контрагент); 
		ЗапросВСД.УстановитьПараметр("ИНН",СокрЛП(ОбрабатываемыйДокумент.Контрагент.ИНН));
		ЗапросВСД.УстановитьПараметр("НомерТТН",НомерТТН);
		ЗапросВСД.УстановитьПараметр("ДатаТТН",ДатаТТН);
		РезультатЗапросаВСД = ЗапросВСД.Выполнить(); 
	КонецЕсли;
	МассивПродукции = РезультатЗапросаВСД.Выгрузить().ВыгрузитьКолонку("Продукция");
	ЗапросСопоставлениеПродукции = Новый Запрос();
	//ЗапросСопоставлениеПродукции.Текст = Справочники.ПродукцияВЕТИС.ТекстЗапросаИнформацияОСопоставлении();
	ЗапросСопоставлениеПродукции.Текст = ТекстЗапросаИнформацияОСопоставлении();
	ЗапросСопоставлениеПродукции.УстановитьПараметр("Продукция", МассивПродукции);  
	ЗапросСопоставлениеПродукции.УстановитьПараметр("Номенклатура", ТЗ_ПланФакт.Выгрузить(,"Номенклатура").ВыгрузитьКолонку("Номенклатура"));  
	РезультатЗапросаСопоставлениеПродукции = ЗапросСопоставлениеПродукции.Выполнить();
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РезультатЗапросаСопоставлениеПродукции.Ссылка КАК ПродукцияСопоставления,
	|	РезультатЗапросаСопоставлениеПродукции.Номенклатура Как Номенклатура 
	|   Поместить ВТСопоставление
	|   ИЗ &РезультатЗапросаСопоставлениеПродукции КАК РезультатЗапросаСопоставлениеПродукции
	|;
	|ВЫБРАТЬ 
	|	РезультатЗапросаВСД.Ссылка, 
	|	РезультатЗапросаВСД.Продукция,
	|	РезультатЗапросаВСД.КоличествоВЕТИС
	|	Поместить ВТВСД
	|	Из &РезультатЗапросаВСД КАК РезультатЗапросаВСД
	|;
	|ВЫБРАТЬ
	|	ВТВСД.Ссылка,
	|	ВТВСД.Ссылка.Представление КАК Представление,
	|	ВТВСД.Ссылка.Идентификатор КАК Идентификатор,
	|	ВТВСД.Продукция КАК Продукция,
	|	ВТВСД.Продукция.Представление КАК ПродукцияПредставление,
	|	ВТВСД.КоличествоВЕТИС КАК КоличествоВЕТИС, 
	|	ВТСопоставление.ПродукцияСопоставления КАК ПродукцияСопоставления,
	|	ВТСопоставление.Номенклатура Как Номенклатура 
	|ИЗ ВТВСД КАК ВТВСД 
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСопоставление КАК ВТСопоставление
	|      ПО ВТВСД.Продукция = ВТСопоставление.ПродукцияСопоставления"; 
	Запрос.УстановитьПараметр("РезультатЗапросаСопоставлениеПродукции",РезультатЗапросаСопоставлениеПродукции);
	Запрос.УстановитьПараметр("РезультатЗапросаВСД",РезультатЗапросаВСД);
	РезультатЗапроса = Запрос.Выполнить();
	ВсеВСДПодораны = Истина;
	Если РезультатЗапроса.Пустой() Тогда
		Сообщить("Для поставщика: " + ОбрабатываемыйДокумент.Контрагент + " не найдены ВСД с указынным номером ТТН и датой ТТН");
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ПараметрыПоискаСтроки = Новый Структура("Номенклатура", Выборка.Номенклатура);
			МассивСтрок = ТЗ_ПланФакт.НайтиСтроки(ПараметрыПоискаСтроки);
			Если МассивСтрок.Количество() = 0 Тогда
				ТекстСообщения = "ВСД НЕ подобраны для продукции ВетИС: " + Выборка.ПродукцияПредставление + " по причине: не сопоставлена продукция с номенклатурой или сопоставлена неверно (не совпадает с номенклатурой в строке табличной части). Необходимо сопоставить вручную. Для быстрого перехода к данному элементу нажмите на это сообщение двойным кликом левой кнопки мыши."; 
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = НСтр("ru = '" + ТекстСообщения +"' ");
				Сообщение.КлючДанных = Выборка.Продукция;
				Сообщение.Сообщить();
				ВсеВСДПодораны = Ложь;
			Иначе
				МассивСтрок[0].НакладныеВетИС.Добавить(Выборка.Ссылка, СокрЛП(СтрЗаменить(Выборка.Представление,Выборка.Идентификатор,"")));
				МассивСтрок[0].НоменклатураВетис = Выборка.ПродукцияСопоставления;
				ЕстьПодобранныеВСД = Истина;
			КонецЕсли;
		КонецЦикла;
		Если ЕстьПодобранныеВСД Тогда
			НакладнаяВЕТИС = Документы.ВходящаяТранспортнаяОперацияВЕТИС.ПустаяСсылка(); 
		КонецЕсли;
		Если ВсеВСДПодораны Тогда
			Сообщить("ВСД подобраны успешно"); 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьВЕТИСДляСтрок(Команда)
	
	Если Не ЗначениеЗаполнено(НомерТТН) ИЛИ Не ЗначениеЗаполнено(ДатаТТН) Тогда
		ПоказатьПредупреждение(,"Для подбора данных ВетИС и заполнения табличной части поля ""Номер ТТН"" и ""Дата ТТН"" должны быть заполнены.");
		Возврат;
	КонецЕсли; 
	ЕстьЗаполненныеВетисВТЧ = Ложь;
	Для Каждого СтрокаТЧ Из ТЗ_ПланФакт Цикл
		Если СтрокаТЧ.НакладныеВетИС.Количество() > 0 Тогда
			ЕстьЗаполненныеВетисВТЧ = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(НакладнаяВЕТИС) И ЕстьЗаполненныеВетисВТЧ Тогда
		ТекстВопроса = "В шапке заполнена накладная ВетИС. При продолжении поле будет очищено. В строках табличной части есть заполненные данные ВетИС при продолжении данные будут очищены и перезаполнены. Продолжить?";
	ИначеЕсли ЗначениеЗаполнено(НакладнаяВЕТИС) Тогда
		ТекстВопроса = "В шапке заполнена накладная ВетИС. При продолжении поле будет очищено. Продолжить?";
	ИначеЕсли ЕстьЗаполненныеВетисВТЧ Тогда
		ТекстВопроса = "В строках табличной части есть заполненные данные ВетИС при продолжении данные будут очищены и перезаполнены. Продолжить?";	
	Иначе
		ТекстВопроса = "Заполнить табличную часть данными для накладной ВетИС (колонка ""Данные для ВетИС"")?";	
	КонецЕсли;
	ОписаниеОповощения = Новый ОписаниеОповещения("ВыполнитьПослеОтветаЗаполнениеТЧВетис",ЭтотОбъект); 
	ПоказатьВопрос(ОписаниеОповощения,ТекстВопроса,РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеОтветаЗаполнениеТЧВетис(Результат,ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		ЕстьПодобранныеВСД = Ложь;
		ПодобратьВЕТИСДляСтрокНаСервере(ЕстьПодобранныеВСД);
		Если ЕстьПодобранныеВСД Тогда
			ЗаполнитьПоВЕТИС(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция  ПодобратьСериюНоменклатуры(ДляШапки,Номенклатура, ПараметрОтбораСкладскогоЖурнала = Неопределено,ВСД)
	
	Запрос = Новый Запрос;
	Если ДляШапки Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаписиСкладскогоЖурналаВЕТИС.ДатаПроизводстваНачалоПериода КАК ДатаПроизводства,
		|	ЗаписиСкладскогоЖурналаВЕТИС.СрокГодностиНачалоПериода КАК СрокГодности,
		|	ЗаписиСкладскогоЖурналаВЕТИС.Ссылка КАК Ссылка,
		|	ЗаписиСкладскогоЖурналаВЕТИС.Предприятие КАК Предприятие,
		|	РАЗНОСТЬДАТ(ЗаписиСкладскогоЖурналаВЕТИС.ДатаПроизводстваНачалоПериода, ЗаписиСкладскогоЖурналаВЕТИС.СрокГодностиНачалоПериода, ДЕНЬ) КАК СрокГодностиДней
		|ИЗ
		|	Справочник.ЗаписиСкладскогоЖурналаВЕТИС КАК ЗаписиСкладскогоЖурналаВЕТИС
		|ГДЕ
		|	ЗаписиСкладскогоЖурналаВЕТИС.Ссылка = &ПараметрОтбораСкладскогоЖурнала";
		Запрос.УстановитьПараметр("ПараметрОтбораСкладскогоЖурнала", ПараметрОтбораСкладскогоЖурнала);
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗаписиСкладскогоЖурналаВЕТИСВетеринарноСопроводительныеДокументы.Ссылка КАК Ссылка,
		|	ЗаписиСкладскогоЖурналаВЕТИСВетеринарноСопроводительныеДокументы.Ссылка.ДатаПроизводстваНачалоПериода КАК ДатаПроизводства,
		|	ЗаписиСкладскогоЖурналаВЕТИСВетеринарноСопроводительныеДокументы.Ссылка.СрокГодностиНачалоПериода КАК СрокГодности,
		|	ЗаписиСкладскогоЖурналаВЕТИСВетеринарноСопроводительныеДокументы.Ссылка.Предприятие КАК Предприятие,
		|	РАЗНОСТЬДАТ(ЗаписиСкладскогоЖурналаВЕТИСВетеринарноСопроводительныеДокументы.Ссылка.ДатаПроизводстваНачалоПериода, ЗаписиСкладскогоЖурналаВЕТИСВетеринарноСопроводительныеДокументы.Ссылка.СрокГодностиНачалоПериода, ДЕНЬ) КАК СрокГодностиДней
		
		|ИЗ
		|	Справочник.ЗаписиСкладскогоЖурналаВЕТИС.ВетеринарноСопроводительныеДокументы КАК ЗаписиСкладскогоЖурналаВЕТИСВетеринарноСопроводительныеДокументы
		|ГДЕ
		|	ЗаписиСкладскогоЖурналаВЕТИСВетеринарноСопроводительныеДокументы.ВетеринарноСопроводительныйДокумент = &ВСД
		|	И НЕ ЗаписиСкладскогоЖурналаВЕТИСВетеринарноСопроводительныеДокументы.Ссылка.ПометкаУдаления";
		Запрос.УстановитьПараметр("ВСД", ВСД);
	КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаЗаписьСкладскогоЖурнала = РезультатЗапроса.Выбрать(); 
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|ВетеринарноСопроводительныйДокументВЕТИС.Ссылка КАК Ссылка,
		|ВетеринарноСопроводительныйДокументВЕТИС.ГрузополучательПредприятие КАК Предприятие,
		|ВетеринарноСопроводительныйДокументВЕТИС.ДатаПроизводстваНачалоПериода КАК ДатаПроизводства,
		|ВетеринарноСопроводительныйДокументВЕТИС.СрокГодностиНачалоПериода КАК СрокГодности,
		|	РАЗНОСТЬДАТ(ВетеринарноСопроводительныйДокументВЕТИС.ДатаПроизводстваНачалоПериода, ВетеринарноСопроводительныйДокументВЕТИС.СрокГодностиНачалоПериода, ДЕНЬ) КАК СрокГодностиДней
		|ИЗ
		|	Справочник.ВетеринарноСопроводительныйДокументВЕТИС КАК ВетеринарноСопроводительныйДокументВЕТИС
		|   ГДЕ ВетеринарноСопроводительныйДокументВЕТИС.Ссылка = &ВСД";
		Запрос.УстановитьПараметр("ВСД", ВСД);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаЗаписьСкладскогоЖурнала = РезультатЗапроса.Выбрать(); 
	КонецЕсли;
	Если ВыборкаЗаписьСкладскогоЖурнала.Следующий() Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СерииНоменклатуры.Владелец КАК Владелец,
		|	СерииНоменклатуры.Ссылка КАК Ссылка,
		|	СерииНоменклатуры.ГоденДо КАК ГоденДо,
		|	СерииНоменклатуры.ДатаПроизводства КАК ДатаПроизводства,
		|	СерииНоменклатуры.СрокГодности КАК СрокГодности
		|ИЗ
		|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
		|ГДЕ
		|	СерииНоменклатуры.Владелец = &Владелец
		|	И НЕ СерииНоменклатуры.ПометкаУдаления
		|	И СерииНоменклатуры.ДатаПроизводства = &ДатаПроизводства
		|	И СерииНоменклатуры.ГоденДо = &ГоденДо";  
		Запрос.УстановитьПараметр("Владелец", Номенклатура);
		Запрос.УстановитьПараметр("ДатаПроизводства", ВыборкаЗаписьСкладскогоЖурнала.ДатаПроизводства);
		Запрос.УстановитьПараметр("ГоденДо", ВыборкаЗаписьСкладскогоЖурнала.СрокГодности);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаСерия = РезультатЗапроса.Выбрать();
		СтруктураДанныхСерии = Новый Структура("СерияНоменклатуры,СрокГодности,ГоденДо,СрокГодности2");
		Если ВыборкаСерия.Следующий() Тогда
			СтруктураДанныхСерии.СерияНоменклатуры = ВыборкаСерия.Ссылка;
			СтруктураДанныхСерии.СрокГодности = ВыборкаСерия.ДатаПроизводства; //Дата производства
			СтруктураДанныхСерии.ГоденДо = ВыборкаСерия.ГоденДо;
			СтруктураДанныхСерии.СрокГодности2 = ВыборкаСерия.СрокГодности;
		Иначе
			НоваяСерияНоменклатуры = Справочники.СерииНоменклатуры.СоздатьЭлемент();
			НоваяСерияНоменклатуры.ДатаПроизводства = ВыборкаЗаписьСкладскогоЖурнала.ДатаПроизводства; 
			НоваяСерияНоменклатуры.Владелец = Номенклатура;
			НоваяСерияНоменклатуры.ГоденДо = ВыборкаЗаписьСкладскогоЖурнала.СрокГодности;
			НоваяСерияНоменклатуры.СрокГодности = ВыборкаЗаписьСкладскогоЖурнала.СрокГодностиДней;
			НоваяСерияНоменклатуры.ПроизводительВЕТИС = ВыборкаЗаписьСкладскогоЖурнала.Предприятие;
			НоваяСерияНоменклатуры.ЗаписьСкладскогоЖурналаВЕТИС = ВыборкаЗаписьСкладскогоЖурнала.Ссылка;
			Попытка
				НоваяСерияНоменклатуры.Записать();	
				СтруктураДанныхСерии.СерияНоменклатуры = НоваяСерияНоменклатуры.Ссылка;
				СтруктураДанныхСерии.СрокГодности = НоваяСерияНоменклатуры.ДатаПроизводства; //Дата производства
				СтруктураДанныхСерии.ГоденДо = НоваяСерияНоменклатуры.ГоденДо;
				СтруктураДанныхСерии.СрокГодности2 = НоваяСерияНоменклатуры.СрокГодности;
			Исключение 
				СтруктураДанныхСерии = Неопределено;
				Сообщить("Не удалось создать серию номенклатуры по причине: " + ОписаниеОшибки()); 
			КонецПопытки;
		КонецЕсли;
	Иначе
		Сообщить("Не найден элемент складского журнала для заполнения серий номенклатуры. Серии номенклатуры не были заполнены.");
		СтруктураДанныхСерии = Неопределено;	
	КонецЕсли;
	Возврат СтруктураДанныхСерии;
	
КонецФункции


&НаКлиенте
Процедура ТЗ_ПланФактСерияНоменклатурыПриИзменении(Элемент)
	
	ТД = Элементы.ТЗ_ПланФакт.ТекущиеДанные; 
	ПараметрыОтбораСерииНоменклатуры = Новый Структура("Номенклатура,НомерСтрокиРеализации",ТД.Номенклатура,ТД.НомерСтроки);
	МассивНайденныеСтрокиСерииНоменклатуры = СерииНоменклатуры.НайтиСтроки(ПараметрыОтбораСерииНоменклатуры);
	ИндексДляДобавления = Неопределено;
	Для каждого НайденнаяСтрокаСерииНоменклатуры Из МассивНайденныеСтрокиСерииНоменклатуры Цикл
		Если ИндексДляДобавления = Неопределено Тогда
			ИндексДляДобавления = СерииНоменклатуры.Индекс(НайденнаяСтрокаСерииНоменклатуры);
		КонецЕсли;
		СерииНоменклатуры.Удалить(НайденнаяСтрокаСерииНоменклатуры);
	КонецЦикла;
	Если ИндексДляДобавления = Неопределено Тогда
		ИндексДляДобавления = 0;
	КонецЕсли;
	НоваяСтрокаСерииНоменклатуры = СерииНоменклатуры.Вставить(ИндексДляДобавления);
	НоваяСтрокаСерииНоменклатуры.Номенклатура = ТД.Номенклатура;
	НоваяСтрокаСерииНоменклатуры.Количество = ТД.КоличествоДок;
	НоваяСтрокаСерииНоменклатуры.НомерСтрокиРеализации = ТД.НомерСтроки;
	НоваяСтрокаСерииНоменклатуры.СерияНоменклатуры = ТД.СерияНоменклатуры;
	НоваяСтрокаСерииНоменклатуры.ДатаПроизводства = сабОбщегоНазначенияБУХ.ПолучитьДатуПроизводстваДляСерииНоменклатуры(ТД.СерияНоменклатуры);
	НоваяСтрокаСерииНоменклатуры.СрокГодности2 = ВернутьЗначениеРеквизитаСерии(ТД.СерияНоменклатуры,"СрокГодности");
	НоваяСтрокаСерииНоменклатуры.ГоденДо = ВернутьЗначениеРеквизитаСерии(ТД.СерияНоменклатуры,"ГоденДо");
	СерииНоменклатуры.Сортировать("НомерСтрокиРеализации");
	
	Если ЗначениеЗаполнено(ТД.СерияНоменклатуры) Тогда
		ТД.ОСГ = РассчитатьОСГНаСервере(ТД.СерияНоменклатуры);
	Иначе
		ТД.ОСГ = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьОСГНаСервере(СерияНоменклатуры)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РАЗНОСТЬДАТ(&ТекущаяДата, СерииНоменклатуры.ГоденДо, ДЕНЬ) КАК ОсталосьДнейСрокаГодности,
		|	ВЫБОР
		|		КОГДА СерииНоменклатуры.СрокГодности = 0
		|			ТОГДА РАЗНОСТЬДАТ(СерииНоменклатуры.ДатаПроизводства, СерииНоменклатуры.ГоденДо, ДЕНЬ)
		|		ИНАЧЕ СерииНоменклатуры.СрокГодности
		|	КОНЕЦ КАК СрокГодности
		|ИЗ
		|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
		|ГДЕ
		|	СерииНоменклатуры.Ссылка = &Ссылка";  
	Запрос.УстановитьПараметр("Ссылка", СерияНоменклатуры);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
    Возврат Окр(Выборка.ОсталосьДнейСрокаГодности / Выборка.СрокГодности * 100,0,РежимОкругления.Окр15как20);
	
КонецФункции


&НаСервереБезКонтекста
Функция ВернутьЗначениеРеквизитаСерии(СерияНоменклатуры,РеквизитСтрока)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СерияНоменклатуры,РеквизитСтрока);
	
КонецФункции  

// Заполняет адреса маршрута
// 
// Параметры:
// 	Основания - Массив, СправочникСсылка.ВетеринарноСопроводительныйДокументВЕТИС - ВСД(1 или массив)-источник заполнения
&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеАдресовМаршрутаПоОснованиям(ОбъектЗаполнения, Основания)
	
	ВСДДляЗаполнения = Неопределено;
	Если ТипЗнч(Основания) = Тип("СправочникСсылка.ВетеринарноСопроводительныйДокументВЕТИС") Тогда
		ВСДДляЗаполнения = Основания;
	ИначеЕсли ТипЗнч(Основания) = Тип("Массив")
		И Основания.Количество() > 0
		И ТипЗнч(Основания[0]) = Тип("СправочникСсылка.ВетеринарноСопроводительныйДокументВЕТИС") Тогда
		ВСДДляЗаполнения = Основания[0];
	КонецЕсли;  
	Если НЕ ВСДДляЗаполнения = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ВСДДляЗаполнения", ВСДДляЗаполнения);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Маршрут.Предприятие КАК Предприятие,
		|	Маршрут.НомерСтроки КАК НомерСтроки,
		|	Маршрут.Адрес КАК Адрес,
		|	Маршрут.АдресПредставление КАК АдресПредставление,
		|	Маршрут.ДанныеАдреса КАК ДанныеАдреса
		|ИЗ
		|	Справочник.ВетеринарноСопроводительныйДокументВЕТИС.Маршрут КАК Маршрут
		|ГДЕ
		|	Маршрут.Ссылка = &ВСДДляЗаполнения
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		МаршрутыВСД = Запрос.Выполнить().Выбрать();
		Если МаршрутыВСД.Количество() = ОбъектЗаполнения.Маршрут.Количество() Тогда
			Пока МаршрутыВСД.Следующий() Цикл
				СтрокаТЧ = ОбъектЗаполнения.Маршрут[МаршрутыВСД.НомерСтроки - 1];
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Предприятие)
					И СтрокаТЧ.Адрес = МаршрутыВСД.Адрес
					И СтрокаТЧ.АдресПредставление = МаршрутыВСД.АдресПредставление Тогда
					СтрокаТЧ.ДанныеАдреса = МаршрутыВСД.ДанныеАдреса;
				КонецЕсли; 
			КонецЦикла;  
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящаяУПДЭДОНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Контрагент", БюджетныйНаСервере.ВернутьРеквизит(ОбрабатываемыйДокумент, "Контрагент"));
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.ВходящаяУПДЭДО.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	СписокЗаказы.Параметры.УстановитьЗначениеПараметра("Статус", Статус);
	//СписокЗаказы.Параметры.УстановитьЗначениеПараметра("ОтборСтатус", ОтборСтатус);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧЭДОНаСервере(НеСопоставленнаяНоменклатура)
	Если ЗначениеЗаполнено(ВходящаяУПДЭДО) Тогда
		
		
		СопоставитьНоменклатуруЭДОНаСервере(НеСопоставленнаяНоменклатура);
		Если НеСопоставленнаяНоменклатура.Количество() > 0 Тогда
			Возврат;
		КонецЕсли;
		ЭлектронныеДокументы = Новый Массив;
		ЭлектронныеДокументы.Добавить(ВходящаяУПДЭДО);
		ДанныеЭлектронногоДокумента = ЭлектронныеДокументыЭДО.ДанныеДокументовДляОтраженияВУчете(ЭлектронныеДокументы);	
		Если  ДанныеЭлектронногоДокумента.Количество() = 0 Тогда
			Сообщить("Не удалось получить данные из входящего электронного документа");
		Иначе
			ПараметрыПолучения = ЭлектронныеДокументыЭДО.НовыеПараметрыПолученияДанныхДокумента();
			ПараметрыПолучения.ОсновнойФайл = ДанныеЭлектронногоДокумента[0].ДанныеОсновногоФайла;
			ПараметрыПолучения.ДополнительныйФайл = ДанныеЭлектронногоДокумента[0].ДанныеДополнительногоФайла;	
			Результат = ЭлектронныеДокументыЭДО.ДанныеДокументаДляЗагрузкиПросмотра(ПараметрыПолучения);
			Если Не ЗначениеЗаполнено(Результат) Тогда 
				Сообщить("Не удалось получить данные из входящего электронного документа");
				Возврат;	
			КонецЕсли;
			Если НЕ Результат.Свойство("НовыйЭД") Тогда
				ИдентификаторДокумента = Неопределено;
				Результат.Свойство("ИдентификаторДокумента", ИдентификаторДокумента);
				ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось прочитать данные электронного документа. Неизвестный формат обмена.'"));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				Возврат;
			КонецЕсли;
			НовыйЭД = Результат.НовыйЭД;
			ДеревоРазбора = Результат.ДеревоРазбора;
			ДеревоЭД = НовыйЭД.ЗначениеРеквизита;
			СпособОбработки = Новый Структура("ПервичныйДокумент,СчетФактура","ПоступлениеТоваров","СчетФактураПолученный");
			ПараметрыОтражения = Новый Структура;
			ПараметрыОтражения.Вставить("ЭлектронныйДокумент", ДанныеЭлектронногоДокумента[0].ЭлектронныйДокумент);
			ПараметрыОтражения.Вставить("Контрагент", ДанныеЭлектронногоДокумента[0].Отправитель);
			ПараметрыОтражения.Вставить("СпособОбработки", СпособОбработки);
			ПараметрыОтражения.Вставить("ДеревоДокумента", НовыйЭД);
			Отказ = Ложь;
			ОписаниеОшибки = "";
			ИнтеграцияЭДО.ПриОтраженииВУчетеЭлектронногоДокументаСНоменклатурой(
			ПараметрыОтражения, Отказ, ОписаниеОшибки);
			Если Отказ Тогда
				Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
					ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки);
				КонецЕсли;
				Возврат;
			КонецЕсли;
			Попытка
				ДанныеЭДО = ОбменСКонтрагентамиБП.Расш_ПолучитьСтруктуруДляПоступленияТоваровУслугУПД_2019(ДеревоЭД,СпособОбработки);
			Исключение
				ПолучитьСообщенияПользователю(Истина);
				Сообщить("Ну удалось разобрать документ ЭДО для заполнения табличной части. Выбран документ не соответствующий поступлению товаров.");  
				Возврат;
			КонецПопытки;
			Если ДанныеЭДО.Свойство("ДанныеТабличныхЧастей") Тогда	
				Если ДанныеЭДО.ДанныеТабличныхЧастей.Свойство("Товары") Тогда
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	ТЗТоварыЭДО.НомерГТД КАК НомерГТД,
					|	ТЗТоварыЭДО.СтранаПроисхождения КАК СтранаПроисхождения,
					|	ТЗТоварыЭДО.Количество КАК Количество,
					|	ТЗТоварыЭДО.Цена КАК Цена,
					|	ТЗТоварыЭДО.Сумма КАК Сумма,
					|	ТЗТоварыЭДО.СуммаНДС КАК СуммаНДС,
					|	ТЗТоварыЭДО.Номенклатура КАК Номенклатура,
					|	ТЗТоварыЭДО.ЕдиницаИзмерения КАК ЕдиницаИзмерения
					|ПОМЕСТИТЬ ВТТоварыЭДО
					|ИЗ
					|	&ТЗТоварыЭДО КАК ТЗТоварыЭДО
					|;
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ВТТоварыЭДО.НомерГТД КАК НомерГТД,
					|	ВТТоварыЭДО.СтранаПроисхождения КАК СтранаПроисхождения,
					|	ВТТоварыЭДО.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
					|	СУММА(ВТТоварыЭДО.Количество) КАК Количество,
					|	ВТТоварыЭДО.Цена КАК Цена,
					|	СУММА(ВТТоварыЭДО.Сумма) КАК Сумма,
					|	СУММА(ВТТоварыЭДО.СуммаНДС) КАК СуммаНДС,
					|	Максимум(Выбор Когда ВТТоварыЭДО.Номенклатура.Кратность = 0 Тогда 1 Иначе ВТТоварыЭДО.Номенклатура.Кратность Конец) КАК КоличествоВПотребительскойУпаковке,
					|	ВТТоварыЭДО.Номенклатура КАК Номенклатура,
					|	ВТТоварыЭДО.Номенклатура.ЕдиницаИзмерения КАК НоменклатураЕдиницаИзмерения
					|ИЗ
					|	ВТТоварыЭДО КАК ВТТоварыЭДО
					|СГРУППИРОВАТЬ ПО
					|	ВТТоварыЭДО.НомерГТД,
					|	ВТТоварыЭДО.СтранаПроисхождения,
					|	ВТТоварыЭДО.Цена,
					|	ВТТоварыЭДО.Номенклатура,
					|	ВТТоварыЭДО.ЕдиницаИзмерения,
					|	ВТТоварыЭДО.Номенклатура.ЕдиницаИзмерения";
					Запрос.УстановитьПараметр("ТЗТоварыЭДО",ДанныеЭДО.ДанныеТабличныхЧастей.Товары);
					РезультатЗапроса = Запрос.Выполнить();
					Выборка = РезультатЗапроса.Выбрать();
					Для каждого СтрокаТЧ Из ТЗ_ПланФакт Цикл
						Выборка.Сбросить();
						СтруктураОтбораЭДО = Новый Структура("Номенклатура",СтрокаТЧ.Номенклатура);
						Если Выборка.НайтиСледующий(СтруктураОтбораЭДО) Тогда 
							СтрокаТЧ.ЕдИзмЭДО = Выборка.ЕдиницаИзмерения;
							Если Выборка.НоменклатураЕдиницаИзмерения <> Выборка.ЕдиницаИзмерения Тогда
								//СтрокаТЧ.КоличествоЭДО = Выборка.Количество * Выборка.КоличествоВПотребительскойУпаковке;
								//СтрокаТЧ.ЦенаЭДО = Выборка.Цена * ((100+СтрокаТЧ.СтавкаНДССтавка)/100) / Выборка.КоличествоВПотребительскойУпаковке;
								Если Выборка.КоличествоВПотребительскойУпаковке > 1 Тогда
									СтрокаТЧ.КоличествоЭДО = Выборка.Количество * Выборка.КоличествоВПотребительскойУпаковке;
									СтрокаТЧ.ЦенаЭДО = Выборка.Цена * ((100+СтрокаТЧ.СтавкаНДССтавка)/100) / Выборка.КоличествоВПотребительскойУпаковке;
								Иначе 
									СтрокаТЧ.КоличествоЭДО = Выборка.Количество / Выборка.КоличествоВПотребительскойУпаковке;
									СтрокаТЧ.ЦенаЭДО = Выборка.Цена * ((100+СтрокаТЧ.СтавкаНДССтавка)/100) * Выборка.КоличествоВПотребительскойУпаковке;
								КонецЕсли;
							Иначе
								СтрокаТЧ.КоличествоЭДО = Выборка.Количество;
								СтрокаТЧ.ЦенаЭДО = Выборка.Цена * ((100+СтрокаТЧ.СтавкаНДССтавка)/100);
							КонецЕсли;
							СтрокаТЧ.СуммаЭДО = ?(ДанныеЭДО.Шапка.СуммаВключаетНДС,Выборка.Сумма,Выборка.Сумма + Выборка.СуммаНДС);
							СтрокаТЧ.СуммаНДСЭДО = Выборка.СуммаНДС;
							Если ЗначениеЗаполнено(Выборка.СтранаПроисхождения) Тогда
								СтрокаТЧ.СтранаПроисхождения = Выборка.СтранаПроисхождения; 
							КонецЕсли;
							СтрокаТЧ.ГТД = Выборка.НомерГТД;
						КонецЕсли;	
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 
	Иначе
			//Сообщить("Табличная часть не заполнена данными ЭДО по причине: документ ЭДО не подобран"); 	
		Сообщить("Документ ЭДО не выбран"); 
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТЧЭДО(Команда) 
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеОтветаЗаполениеТЧДаннымиЭДО",ЭтотОбъект);
	ТекстВопроса = "Заполнить данные из ЭДО в табличной части?";
	ПоказатьВопрос(ОписаниеОповещения,ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеОтветаЗаполениеТЧДаннымиЭДО(Результат,ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		НеСопоставленнаяНоменклатура = Новый Массив;
		ЗаполнитьТЧЭДОНаСервере(НеСопоставленнаяНоменклатура);
		Если НеСопоставленнаяНоменклатура.Количество() > 0 Тогда
			ДопПараметры = Новый Структура("НеСопоставленнаяНоменклатура",НеСопоставленнаяНоменклатура);
			ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ВыполнитьПослеОтветаСопоставление",ЭтотОбъект,ДопПараметры);
			ПоказатьВопрос(ОписаниеОповещенияВопрос,"Для выбранного ЭДО документа есть не сопоставленная номенклатура. Для продолжения необходимо выполнить сопоставление. Открыть форму для сопоставления?",РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

Функция НоменклатураИБ(СведенияОТоваре, ПутьКДаннымСопоставления)
	
	Сопоставление = СведенияОТоваре.Строки.Найти(
	ПутьКДаннымСопоставления, "ПолныйПуть", Истина);
	
	Если Сопоставление <> Неопределено Тогда
		Номенклатура = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
		ПутьКДаннымСопоставления + ".НоменклатураИБ");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Номенклатура;
	Иначе
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции


Функция НомерТДПолучитьСсылку(НомерТД)
	
	Если Не ЗначениеЗаполнено(НомерТД) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НомерТД = СокрЛП(НомерТД);
	НомерТДСсылка = Справочники.НомераГТД.НайтиПоКоду(НомерТД);
	Если Не ЗначениеЗаполнено(НомерТДСсылка) Тогда
		
		НомерТДОбъект = Справочники.НомераГТД.СоздатьЭлемент();
		НомерТДОбъект.Код = НомерТД;
		НомерТДОбъект.РегистрационныйНомер = Справочники.НомераГТД.РегистрационныйНомер(НомерТД);
		НомерТДОбъект.Записать();
		НомерТДСсылка = НомерТДОбъект.Ссылка;
		
	КонецЕсли; 
	
	Возврат НомерТДСсылка;
	
КонецФункции


Функция СтранаПроисхожденияПолучитьСсылку(КодСтраныПроисхождения)
	
	Если Не ЗначениеЗаполнено(КодСтраныПроисхождения) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		СтранаПроисхожденияСсылка = УправлениеКонтактнойИнформацией.СтранаМираПоКодуИлиНаименованию(СокрЛП(КодСтраныПроисхождения));
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось найти страну происхождения в классификаторе стран мира.");
		Возврат Неопределено;
	КонецПопытки;
	
	Если ЗначениеЗаполнено(СтранаПроисхожденияСсылка) Тогда
		Возврат СтранаПроисхожденияСсылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции 	

&НаКлиенте
Процедура ТЗ_ПланФактПриАктивизацииСтроки(Элемент)
	//Элемент.ВыделенныеСтроки.Очистить(); 
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуПоСтроке(ТД)
	
	ТД.Сумма = ТД.КоличествоФакт * ТД.ЦенаДокБезНДС;
	Если ЗначениеЗаполнено(ТД.СтавкаНДССтавка) Тогда
		ТД.СуммаНДСДок = ТД.Сумма / ((100+ТД.СтавкаНДССтавка)/100) * (ТД.СтавкаНДССтавка/100); 
	Иначе
		ТД.СуммаНДСДок = 0;
	КонецЕсли;
	ТД.ВключатьВДокументОтгрузки = ЗначениеЗаполнено(ТД.КоличествоФакт);
	
КонецПроцедуры  

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьЦенуПоСтроке(ТД)
	
	ТД.ЦенаДокБезНДС = ?(ТД.КоличествоФакт = 0,0,ТД.Сумма / ТД.КоличествоФакт);
	
КонецПроцедуры


&НаКлиенте
Процедура ТЗ_ПланФактКоличествоФактПриИзменении(Элемент)
	
	ТД = Элементы.ТЗ_ПланФакт.ТекущиеДанные;
	РассчитатьСуммуПоСтроке(ТД);
	ЗаполнитьПодвалТЗ();
	ЕстьСтрокиСПозициямиНеВключеннымиДляОтгрузки = Ложь;
	Для Каждого СтрокаТЧ ИЗ ТЗ_ПланФакт Цикл
		Если Не СтрокаТЧ.ВключатьВДокументОтгрузки Тогда
			ЕстьСтрокиСПозициямиНеВключеннымиДляОтгрузки = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ЕстьСтрокиСПозициямиНеВключеннымиДляОтгрузки Тогда
		Элементы.ТЗ_ПланФактСоздатьЗаказПоставщикуДляОтсутствующихТоваров.ЦветРамки = WebЦвета.ЗеленыйЛес;
		Элементы.ТЗ_ПланФактСоздатьЗаказПоставщикуДляОтсутствующихТоваров.ЦветТекста = WebЦвета.ЗеленыйЛес; 
	Иначе
		Элементы.ТЗ_ПланФактСоздатьЗаказПоставщикуДляОтсутствующихТоваров.ЦветРамки = WebЦвета.ТемноСерый;
		Элементы.ТЗ_ПланФактСоздатьЗаказПоставщикуДляОтсутствующихТоваров.ЦветТекста = WebЦвета.ТемноСерый; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКоличествуЭДО(Команда)
	ЕстьСтрокиСПозициямиНеВключеннымиДляОтгрузки = Ложь;
	Если ЗначениеЗаполнено(ЗаполнениДляВсейТЧ) Тогда
		//Для всех строк
        ЗаполнитьКоличествоДляВсехСтрокТЧПланФакт("ЭДО",ЕстьСтрокиСПозициямиНеВключеннымиДляОтгрузки);
	Иначе 
		//Для текущей строки 
		ТД = Элементы.ТЗ_ПланФакт.ТекущиеДанные;
		ЗаполнитьКоличествоДляСтрокиТЧПланФакт(ТД, "ЭДО",ЕстьСтрокиСПозициямиНеВключеннымиДляОтгрузки);	
	КонецЕсли;
	ЗаполнитьПодвалТЗ(); 
	Если ЕстьСтрокиСПозициямиНеВключеннымиДляОтгрузки Тогда
		Элементы.ТЗ_ПланФактСоздатьЗаказПоставщикуДляОтсутствующихТоваров.ЦветРамки = WebЦвета.ЗеленыйЛес;
		Элементы.ТЗ_ПланФактСоздатьЗаказПоставщикуДляОтсутствующихТоваров.ЦветТекста = WebЦвета.ЗеленыйЛес; 
	Иначе
		Элементы.ТЗ_ПланФактСоздатьЗаказПоставщикуДляОтсутствующихТоваров.ЦветРамки = WebЦвета.ТемноСерый;
		Элементы.ТЗ_ПланФактСоздатьЗаказПоставщикуДляОтсутствующихТоваров.ЦветТекста = WebЦвета.ТемноСерый;   
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗполнитьПоКоличествуЗаказа(Команда)
	ЕстьСтрокиСПозициямиНеВключеннымиДляОтгрузки = Ложь;
	Если ЗначениеЗаполнено(ЗаполнениДляВсейТЧ) Тогда
		//Для всех строк
        ЗаполнитьКоличествоДляВсехСтрокТЧПланФакт("Заказ",ЕстьСтрокиСПозициямиНеВключеннымиДляОтгрузки);
	Иначе 
		//Для текущей строки
		ТД = Элементы.ТЗ_ПланФакт.ТекущиеДанные;
		ЗаполнитьКоличествоДляСтрокиТЧПланФакт(ТД, "Заказ",ЕстьСтрокиСПозициямиНеВключеннымиДляОтгрузки);	
	КонецЕсли;
    ЗаполнитьПодвалТЗ();
	Если ЕстьСтрокиСПозициямиНеВключеннымиДляОтгрузки Тогда
		Элементы.ТЗ_ПланФактСоздатьЗаказПоставщикуДляОтсутствующихТоваров.ЦветРамки = WebЦвета.ЗеленыйЛес;
		Элементы.ТЗ_ПланФактСоздатьЗаказПоставщикуДляОтсутствующихТоваров.ЦветТекста = WebЦвета.ЗеленыйЛес; 
	Иначе
		Элементы.ТЗ_ПланФактСоздатьЗаказПоставщикуДляОтсутствующихТоваров.ЦветРамки = WebЦвета.ТемноСерый;
		Элементы.ТЗ_ПланФактСоздатьЗаказПоставщикуДляОтсутствующихТоваров.ЦветТекста = WebЦвета.ТемноСерый;   
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКоличествуВетис(Команда)
	
	ЕстьСтрокиСПозициямиНеВключеннымиДляОтгрузки = Ложь;
	Если ЗначениеЗаполнено(ЗаполнениДляВсейТЧ) Тогда
		//Для всех строк
        ЗаполнитьКоличествоДляВсехСтрокТЧПланФакт("Ветис",ЕстьСтрокиСПозициямиНеВключеннымиДляОтгрузки);
	Иначе 
		//Для текущей строки
		ТД = Элементы.ТЗ_ПланФакт.ТекущиеДанные;
		ЗаполнитьКоличествоДляСтрокиТЧПланФакт(ТД, "Ветис",ЕстьСтрокиСПозициямиНеВключеннымиДляОтгрузки);
	КонецЕсли;
    ЗаполнитьПодвалТЗ();  
	Если ЕстьСтрокиСПозициямиНеВключеннымиДляОтгрузки Тогда
		Элементы.ТЗ_ПланФактСоздатьЗаказПоставщикуДляОтсутствующихТоваров.ЦветРамки = WebЦвета.ЗеленыйЛес;
		Элементы.ТЗ_ПланФактСоздатьЗаказПоставщикуДляОтсутствующихТоваров.ЦветТекста = WebЦвета.ЗеленыйЛес; 
	Иначе
		Элементы.ТЗ_ПланФактСоздатьЗаказПоставщикуДляОтсутствующихТоваров.ЦветРамки = WebЦвета.ТемноСерый;
		Элементы.ТЗ_ПланФактСоздатьЗаказПоставщикуДляОтсутствующихТоваров.ЦветТекста = WebЦвета.ТемноСерый;   
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКоличествоДляСтрокиТЧПланФакт(ТД, ВыбранноеЗначениеДляКоличества,ЕстьСтрокиСПозициямиНеВключеннымиДляОтгрузки)
	
	Если ВыбранноеЗначениеДляКоличества = "Заказ" Тогда
		ТД.КоличествоФакт = ТД.КоличествоЗаказ; 
	ИначеЕсли ВыбранноеЗначениеДляКоличества = "Ветис" Тогда
		ТД.КоличествоФакт = ТД.КоличествоДок;
	ИначеЕсли ВыбранноеЗначениеДляКоличества = "ЭДО" Тогда
		ТД.КоличествоФакт = ТД.КоличествоЭДО;
	КонецЕсли;
	РассчитатьСуммуПоСтроке(ТД);
	//ЗаполнитьПодвалТЗ();
	Для Каждого СтрокаТЧ Из ТЗ_ПланФакт Цикл
		Если Не СтрокаТЧ.ВключатьВДокументОтгрузки Тогда
			ЕстьСтрокиСПозициямиНеВключеннымиДляОтгрузки = Истина;  
			Прервать;
		КонецЕсли;
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКоличествоДляВсехСтрокТЧПланФакт(ВыбранноеЗначениеДляКоличества,ЕстьСтрокиСПозициямиНеВключеннымиДляОтгрузки)
	
		Для каждого СтрокаТЧ Из ТЗ_ПланФакт Цикл
		Если ВыбранноеЗначениеДляКоличества = "Заказ" Тогда
			СтрокаТЧ.КоличествоФакт = СтрокаТЧ.КоличествоЗаказ; 
		ИначеЕсли ВыбранноеЗначениеДляКоличества = "Ветис" Тогда
			СтрокаТЧ.КоличествоФакт = СтрокаТЧ.КоличествоДок;
		ИначеЕсли ВыбранноеЗначениеДляКоличества = "ЭДО" Тогда
			СтрокаТЧ.КоличествоФакт = СтрокаТЧ.КоличествоЭДО;
		КонецЕсли;
		РассчитатьСуммуПоСтроке(СтрокаТЧ);
		Если Не СтрокаТЧ.ВключатьВДокументОтгрузки Тогда
			ЕстьСтрокиСПозициямиНеВключеннымиДляОтгрузки = Истина;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры    

&НаКлиенте
Процедура ЗаполнитьЦенуДляСтрокиТЧПланФакт(ТД, ВыбранноеЗначениеДляЦены)
	
	Если ВыбранноеЗначениеДляЦены = "Заказ" Тогда
		ТД.ЦенаДокБезНДС = ТД.ЦенаЗаказ; 
	ИначеЕсли ВыбранноеЗначениеДляЦены = "ЭДО" Тогда
		ТД.ЦенаДокБезНДС = ТД.ЦенаЭДО;
	КонецЕсли;
	РассчитатьСуммуПоСтроке(ТД);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЦенуДляВсехСтрокТЧПланФакт(ВыбранноеЗначениеДляЦены)
	
	Для каждого СтрокаТЧ Из ТЗ_ПланФакт Цикл
		Если ВыбранноеЗначениеДляЦены = "Заказ" Тогда
			СтрокаТЧ.ЦенаДокБезНДС = СтрокаТЧ.ЦенаЗаказ; 
		ИначеЕсли ВыбранноеЗначениеДляЦены = "ЭДО" Тогда
			СтрокаТЧ.ЦенаДокБезНДС = СтрокаТЧ.ЦенаЭДО;
		КонецЕсли;
		РассчитатьСуммуПоСтроке(СтрокаТЧ);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСуммуДляСтрокиТЧПланФакт(ТД, ВыбранноеЗначениеДляСуммы)
	
	Если ВыбранноеЗначениеДляСуммы = "Заказ" Тогда
		ТД.Сумма = ТД.СуммаЗаказ;
		ТД.СуммаНДСДок = ТД.СуммаНДСЗаказ;
	ИначеЕсли ВыбранноеЗначениеДляСуммы = "ЭДО" Тогда
		ТД.Сумма = ТД.СуммаЭДО;
		ТД.СуммаНДСДок = ТД.СуммаНДСЭДО;
	КонецЕсли;
	РассчитатьЦенуПоСтроке(ТД);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСуммуДляВсехСтрокТЧПланФакт(ВыбранноеЗначениеДляСуммы)
	
	Для каждого СтрокаТЧ Из ТЗ_ПланФакт Цикл
		Если ВыбранноеЗначениеДляСуммы = "Заказ" Тогда
			СтрокаТЧ.Сумма = СтрокаТЧ.СуммаЗаказ;
			СтрокаТЧ.СуммаНДСДок = СтрокаТЧ.СуммаНДСЗаказ;
		ИначеЕсли ВыбранноеЗначениеДляСуммы = "ЭДО" Тогда
			СтрокаТЧ.Сумма = СтрокаТЧ.СуммаЭДО;
			СтрокаТЧ.СуммаНДСДок = СтрокаТЧ.СуммаНДСЭДО;
		КонецЕсли;
		РассчитатьЦенуПоСтроке(СтрокаТЧ);
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ЦенаЗаказ(Команда)
	
	Если ЗначениеЗаполнено(ЗаполнениДляВсейТЧ) Тогда
		//Для всех строк
        ЗаполнитьЦенуДляВсехСтрокТЧПланФакт("Заказ");
	Иначе 
		//Для текущей строки
		ТД = Элементы.ТЗ_ПланФакт.ТекущиеДанные;
		ЗаполнитьЦенуДляСтрокиТЧПланФакт(ТД, "Заказ");	
	КонецЕсли;
    ЗаполнитьПодвалТЗ(); 
	
КонецПроцедуры


&НаКлиенте
Процедура ЦенаЭДО(Команда)
	
	Если ЗначениеЗаполнено(ЗаполнениДляВсейТЧ) Тогда
		//Для всех строк
        ЗаполнитьЦенуДляВсехСтрокТЧПланФакт("ЭДО");
	Иначе 
		//Для текущей строки
		ТД = Элементы.ТЗ_ПланФакт.ТекущиеДанные;
		ЗаполнитьЦенуДляСтрокиТЧПланФакт(ТД, "ЭДО");	
	КонецЕсли;
	ЗаполнитьПодвалТЗ(); 
        
КонецПроцедуры


&НаКлиенте
Процедура СуммаЗаказ(Команда)
	
	Если ЗначениеЗаполнено(ЗаполнениДляВсейТЧ) Тогда
		//Для всех строк
        ЗаполнитьСуммуДляВсехСтрокТЧПланФакт("Заказ");
	Иначе 
		//Для текущей строки
		ТД = Элементы.ТЗ_ПланФакт.ТекущиеДанные;
		ЗаполнитьСуммуДляСтрокиТЧПланФакт(ТД, "Заказ");	
	КонецЕсли;
    ЗаполнитьПодвалТЗ(); 

КонецПроцедуры


&НаКлиенте
Процедура СуммаЭДО(Команда)
	
	Если ЗначениеЗаполнено(ЗаполнениДляВсейТЧ) Тогда
		//Для всех строк
        ЗаполнитьСуммуДляВсехСтрокТЧПланФакт("ЭДО");
	Иначе 
		//Для текущей строки
		ТД = Элементы.ТЗ_ПланФакт.ТекущиеДанные;
		ЗаполнитьСуммуДляСтрокиТЧПланФакт(ТД, "ЭДО");	
	КонецЕсли;
	ЗаполнитьПодвалТЗ(); 

КонецПроцедуры


&НаКлиенте
Процедура ТЗ_ПланФактСуммаПриИзменении(Элемент)
	
	ТД = Элементы.ТЗ_ПланФакт.ТекущиеДанные;
	РассчитатьЦенуПоСтроке(ТД); 
	Если ЗначениеЗаполнено(ТД.СтавкаНДССтавка) Тогда
		ТД.СуммаНДСДок = ТД.Сумма / ((100+ТД.СтавкаНДССтавка)/100) * (ТД.СтавкаНДССтавка/100); 
	Иначе
		ТД.СуммаНДСДок = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ПланФактКоличествоЭДОПриИзменении(Элемент)
	ТД = Элементы.ТЗ_ПланФакт.ТекущиеДанные;
	РассчитатьСуммуЭДОПоСтроке(ТД);
	ЗаполнитьПодвалТЗ(); 
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуЭДОПоСтроке(ТД)
	
	ТД.СуммаЭДО = ТД.КоличествоЭДО * ТД.ЦенаЭДО;
	Если ЗначениеЗаполнено(ТД.СтавкаНДССтавка) Тогда
		ТД.СуммаНДСЭДО = ТД.СуммаЭДО / ((100+ТД.СтавкаНДССтавка)/100) * (ТД.СтавкаНДССтавка/100); 
	Иначе
		ТД.СуммаНДСЭДО = 0;
	КонецЕсли;
	  
	
КонецПроцедуры  

&НаКлиенте
Процедура ТЗ_ПланФактЦенаЭДОПриИзменении(Элемент)
	
	ТД = Элементы.ТЗ_ПланФакт.ТекущиеДанные;
	РассчитатьСуммуЭДОПоСтроке(ТД);
	ЗаполнитьПодвалТЗ();
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ПланФактСуммаЭДОПриИзменении(Элемент)
	
	ТД = Элементы.ТЗ_ПланФакт.ТекущиеДанные;
	РассчитатьЦенуЭДОПоСтроке(ТД); 
	Если ЗначениеЗаполнено(ТД.СтавкаНДССтавка) Тогда
		ТД.СуммаНДСЭДО = ТД.СуммаЭДО / ((100+ТД.СтавкаНДССтавка)/100) * (ТД.СтавкаНДССтавка/100); 
	Иначе
		ТД.СуммаНДСЭДО = 0;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура РассчитатьЦенуЭДОПоСтроке(ТД)
	
	ТД.ЦенаЭДО = ?(ТД.КоличествоЭДО = 0,0,ТД.СуммаЭДО / ТД.КоличествоЭДО);
	
КонецПроцедуры


&НаКлиенте
Процедура СоздатьЗаказПоставщикуДляОтсутствующихТоваров(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеОтветаСоздатьЗаказПоставщику",ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения,"Создать заказ поставщику для отсутствующих товаров?",РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеОтветаСоздатьЗаказПоставщику(Результат,ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		ЕстьСтрокиДляЗаказа = Истина;
		АдресВХ = "";
		ЗаполнитьФормуЗаказаНаСервере(ЕстьСтрокиДляЗаказа,АдресВХ);
		Если ЕстьСтрокиДляЗаказа Тогда
			ПараметрыДляСозданияЗаказа = Новый Структура("АдресВХДляСозданияИзПриемки",АдресВХ);
			ОткрытьФорму("Документ.ЗаказПоставщику.Форма.ФормаДокумента",ПараметрыДляСозданияЗаказа,ЭтотОбъект);
		Иначе
			Сообщить("Нет не отгружаемых позиций для создания заказа поставщику");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФормуЗаказаНаСервере(ЕстьСтрокиДляЗаказа,АдресВХ); 
	
	ДокОбъектЗаказ = ОбрабатываемыйДокумент.Скопировать();
	Для Каждого СтрПланФакт Из ТЗ_ПланФакт Цикл
		Если СтрПланФакт.ВключатьВДокументОтгрузки Тогда 
			СтруктураДляОтбора = Новый Структура("Номенклатура,Количество,Цена",СтрПланФакт.Номенклатура,СтрПланФакт.КоличествоЗаказ,СтрПланФакт.ЦенаЗаказ);
			НайденныекСтроки = ДокОбъектЗаказ.ТабличнаяЧасть.НайтиСтроки(СтруктураДляОтбора);
			Если НайденныекСтроки.Количество() > 0 Тогда
				ДокОбъектЗаказ.ТабличнаяЧасть.Удалить(НайденныекСтроки[0]);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	Если ДокОбъектЗаказ.ТабличнаяЧасть.Количество() > 0 Тогда
		СтруктураСДокументомДляПередачи = Новый Структура("ДокументОбъектДляЧтения",ДокОбъектЗаказ);
		АдресВХ = ПоместитьВоВременноеХранилище(СтруктураСДокументомДляПередачи);
	Иначе
		ЕстьСтрокиДляЗаказа = Ложь;
	КонецЕсли;
	
КонецПроцедуры 


&НаКлиенте
Процедура ТЗ_ПланФактВключатьВДокументОтгрузкиПриИзменении(Элемент)
	
	ЕстьСтрокиСПозициямиНеВключеннымиДляОтгрузки = Ложь;
	Для Каждого СтрокаТЧ ИЗ ТЗ_ПланФакт Цикл
		Если Не СтрокаТЧ.ВключатьВДокументОтгрузки Тогда
			ЕстьСтрокиСПозициямиНеВключеннымиДляОтгрузки = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ЕстьСтрокиСПозициямиНеВключеннымиДляОтгрузки Тогда
		Элементы.ТЗ_ПланФактСоздатьЗаказПоставщикуДляОтсутствующихТоваров.ЦветРамки = WebЦвета.ЗеленыйЛес;
		Элементы.ТЗ_ПланФактСоздатьЗаказПоставщикуДляОтсутствующихТоваров.ЦветТекста = WebЦвета.ЗеленыйЛес; 
	Иначе
		Элементы.ТЗ_ПланФактСоздатьЗаказПоставщикуДляОтсутствующихТоваров.ЦветРамки = WebЦвета.ТемноСерый;
		Элементы.ТЗ_ПланФактСоздатьЗаказПоставщикуДляОтсутствующихТоваров.ЦветТекста = WebЦвета.ТемноСерый; 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКладовщика()
	
	Кладовщик = РольДоступна("сабКладовщик");
	Элементы.Кладовщик.Доступность = Не Кладовщик;
	Элементы.ВходящаяУПДЭДО.Доступность = Не Кладовщик;
	Элементы.НакладнаяВЕТИС.Доступность = Не Кладовщик;
	Элементы.СоздатьПоступление.Доступность = Не Кладовщик;
	Элементы.ДокументУЧ_ПоступлениеТоваровПечатьТорг2.Доступность = Не Кладовщик И ЗначениеЗаполнено(СозданныйДокумент);
	Элементы.ДокументУЧ_ПоступлениеТоваровПечатьТорг4.Доступность = Не Кладовщик И ЗначениеЗаполнено(СозданныйДокумент);
	Элементы.ТЗ_ПланФактКоличествоЭДО.Доступность = Не Кладовщик;
	Элементы.ТЗ_ПланФактКоличествоДок.Доступность = Не Кладовщик;
	Элементы.ТЗ_ПланФактЦенаЭДО.Доступность = Не Кладовщик;
	Элементы.ТЗ_ПланФактЦенаВетис.Доступность = Не Кладовщик; 
	Элементы.ТЗ_ПланФактСуммаЭДО.Доступность = Не Кладовщик;
	Элементы.ТЗ_ПланФактСуммаДок.Доступность = Не Кладовщик;
	Элементы.ТЗ_ПланФактСуммаНДСЭДО.Доступность = Не Кладовщик;
	Элементы.ТЗ_ПланФактСуммаНДСВетис.Доступность = Не Кладовщик;   
	Элементы.ТЗ_ПланФактНакладныеВетИС.Доступность = Не Кладовщик;
	Элементы.ЗаполнитьПоУПДЭДО.Доступность = Не Кладовщик; 
	Элементы.ЗаполнитьТЧЭДО.Доступность = Не Кладовщик;
	Элементы.ПодобратьВЕТИСДляСтрок.Доступность = Не Кладовщик;
	Элементы.ПодтвердитьЭДО.Доступность = Не Кладовщик;
	Элементы.ПодтвердитьВЕТИС.Доступность = Не Кладовщик;
	
КонецПроцедуры 

&НаКлиенте
Процедура КладовщикПриИзменении(Элемент)
	
	Элементы.ВходящаяУПДЭДО.Доступность = Не Кладовщик;
	Элементы.НакладнаяВЕТИС.Доступность = Не Кладовщик;
	Элементы.СоздатьПоступление.Доступность = Не Кладовщик;
	Элементы.ДокументУЧ_ПоступлениеТоваровПечатьТорг2.Доступность = Не Кладовщик И ЗначениеЗаполнено(СозданныйДокумент);
	Элементы.ДокументУЧ_ПоступлениеТоваровПечатьТорг4.Доступность = Не Кладовщик И ЗначениеЗаполнено(СозданныйДокумент);
	Элементы.ТЗ_ПланФактКоличествоЭДО.Доступность = Не Кладовщик;
	Элементы.ТЗ_ПланФактКоличествоДок.Доступность = Не Кладовщик;
	Элементы.ТЗ_ПланФактЦенаЭДО.Доступность = Не Кладовщик;
	Элементы.ТЗ_ПланФактЦенаВетис.Доступность = Не Кладовщик; 
	Элементы.ТЗ_ПланФактСуммаЭДО.Доступность = Не Кладовщик;
	Элементы.ТЗ_ПланФактСуммаДок.Доступность = Не Кладовщик;
	Элементы.ТЗ_ПланФактСуммаНДСЭДО.Доступность = Не Кладовщик;
	Элементы.ТЗ_ПланФактСуммаНДСВетис.Доступность = Не Кладовщик;   
	Элементы.ТЗ_ПланФактНакладныеВетИС.Доступность = Не Кладовщик;
	Элементы.ЗаполнитьПоУПДЭДО.Доступность = Не Кладовщик; 
	Элементы.ЗаполнитьТЧЭДО.Доступность = Не Кладовщик;
	Элементы.ПодобратьВЕТИСДляСтрок.Доступность = Не Кладовщик;
	Элементы.ПодтвердитьЭДО.Доступность = Не Кладовщик;
	Элементы.ПодтвердитьВЕТИС.Доступность = Не Кладовщик;
	
КонецПроцедуры

&НаСервере
Функция ДанныеДляОтраженияВУчете() 	
	
	ДанныеЭлектронногоДокумента = ЭлектронныеДокументыЭДО.ДанныеДокументовДляОтраженияВУчете(ВходящаяУПДЭДО)[0];
	
	Возврат ДанныеЭлектронногоДокумента;
	
КонецФункции  

&НаСервереБезКонтекста
Функция ОтключенКонтрольОтраженияВУчетеВНастройках(ДанныеДляОтраженияВУчете)
	Возврат ИнтеграцияЭДО.ОтключенКонтрольОтраженияВУчетеВНастройках(ДанныеДляОтраженияВУчете);
КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьКонтрольСопоставленияНоменклатуры(ДанныеДляОтраженияВУчете) 	
	Возврат ИнтеграцияЭДО.ВыполнитьКонтрольСопоставленияНоменклатуры(ДанныеДляОтраженияВУчете,, Ложь); 	
КонецФункции 

&НаСервереБезКонтекста
Функция НоменклатураКонтрагентовНаКонтролеПоЭлектронномуДокументу(ЭлектронныйДокумент)
	
	ОтборПоДокументу = ИнтеграцияЭДО.ОтборНоменклатурыКонтрагентовНаКонтроле(ЭлектронныйДокумент);
	НаКонтроле = ИнтеграцияЭДО.НоменклатураКонтрагентовНаКонтроле(ОтборПоДокументу);
	
	Возврат НаКонтроле;
	
КонецФункции


&НаКлиенте
Процедура СопоставитьНоменклатуруЭДО(Команда)
	
	ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ВыполнитьПослеОтветаКомандаСопоставление",ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещенияВопрос,"Выполнить сопоставление номенклатуры (ЭДО)?",РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры  


&НаКлиенте
 Процедура ВыполнитьПослеОтветаКомандаСопоставление(Результат,ДопПараметры) Экспорт
	 
	 Если Результат = КодВозвратаДиалога.Да Тогда
	НеСопоставленнаяНоменклатура = Новый Массив;
	СопоставитьНоменклатуруЭДОНаСервере(НеСопоставленнаяНоменклатура);
	Если НеСопоставленнаяНоменклатура.Количество() > 0 Тогда 
		ДопПараметры = Новый Структура("НеСопоставленнаяНоменклатура, ТолькоСопоставление",НеСопоставленнаяНоменклатура,Истина);
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ВыполнитьПослеОтветаСопоставление",ЭтотОбъект,ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещенияВопрос,"Для выбранного ЭДО документа есть строки с несопоставленной номенклатурой. Открыть форму для сопоставления?",РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	 КонецЕсли;
 	
 
 КонецПроцедуры 


&НаКлиенте
Процедура ВыполнитьПослеОтветаСопоставление(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		ДанныеДляОтраженияВУчете = ДанныеДляОтраженияВУчете();
		ОбработкаЗавершения = Новый ОписаниеОповещения("ЗавершитьСопоставлениеНоменклатуры", ЭтотОбъект, ДопПараметры);
		Если ОтключенКонтрольОтраженияВУчетеВНастройках(ДанныеДляОтраженияВУчете) Тогда
			НаборНоменклатурыКонтрагентовДляСопоставления = ВыполнитьКонтрольСопоставленияНоменклатуры(ДанныеДляОтраженияВУчете);
		Иначе
			ОбъектыКонтроля = ВходящаяУПДЭДО;
			НаборНоменклатурыКонтрагентовДляСопоставления = НоменклатураКонтрагентовНаКонтролеПоЭлектронномуДокументу(ОбъектыКонтроля);
		КонецЕсли;
		ОткрытьСопоставлениеНоменклатуры(НаборНоменклатурыКонтрагентовДляСопоставления,, ОбработкаЗавершения,ДопПараметры.НеСопоставленнаяНоменклатура);
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьНоменклатуруПоставщикаВОсновнойТЧ(МассивСтруктурНоменклатураПоставщика)
	
	Для каждого РезультатСтруктура Из МассивСтруктурНоменклатураПоставщика Цикл
		СтруктураПоиска = Новый Структура("Номенклатура",РезультатСтруктура.НоменклатураИБ.Номенклатура);
		МассивСтрок = ТЗ_ПланФакт.НайтиСтроки(СтруктураПоиска);	
		Для каждого СтрокаТЧ  Из МассивСтрок Цикл
			СтрокаТЧ.НоменклатураЭДО = РезультатСтруктура.НоменклатураКонтрагента.НоменклатураКонтрагента;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗавершитьСопоставлениеНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда 
		ТолькоСопоставление = Ложь;
		Если ДополнительныеПараметры.Свойство("ТолькоСопоставление") Тогда
			Если ДополнительныеПараметры.ТолькоСопоставление Тогда
				ТолькоСопоставление = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ТолькоСопоставление Тогда 
			ЗаполнитьНоменклатуруПоставщикаВОсновнойТЧ(Результат);
		Иначе			
			НеСопоставленнаяНоменклатура = Новый Массив;
			ЗаполнитьТЧЭДОНаСервере(НеСопоставленнаяНоменклатура);
			Если НеСопоставленнаяНоменклатура.Количество() > 0 Тогда
				Сообщить("В документе осталась не сопоставленная номенклатура (ЭДО). Для сопоставления можно воспользоваться соответствующей командой на форме");
			Иначе
				Сообщить("Вся номенклатура с ЭДО успешно сопоставлена");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СопоставитьНоменклатуруЭДОНаСервере(НеСопоставленнаяНоменклатура)
	
	МассивДокументЭДО = ЭлектронныеДокументыЭДО.ДанныеДокументовДляОтраженияВУчете(
	ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВходящаяУПДЭДО));
	Если ТипЗнч(МассивДокументЭДО) = Тип("Массив") Тогда
		Если МассивДокументЭДО.Количество() > 0 Тогда
			ДокументЭДОСтруктура = МассивДокументЭДО[0];
			ИнтеграцияЭДО.ВыполнитьКонтрольСопоставленияНоменклатуры(ДокументЭДОСтруктура);
			КонтрагентЭДО = ДокументЭДОСтруктура.Отправитель;
			ВладелецЭДО = СопоставлениеНоменклатурыКонтрагентовСлужебный.ВладелецНоменклатурыКонтрагента(КонтрагентЭДО);
			ПараметрыПолученияФайлы = ЭлектронныеДокументыЭДО.НовыеПараметрыПолученияДанныхДокумента();
			ПараметрыПолученияФайлы.ОсновнойФайл = ДокументЭДОСтруктура.ДанныеОсновногоФайла;
			ПараметрыПолученияФайлы.ДополнительныйФайл = ДокументЭДОСтруктура.ДанныеДополнительногоФайла;
			ИнформацияОТоваре = ЭлектронныеДокументыЭДО.ДанныеНоменклатурыДокумента(ПараметрыПолученияФайлы);
			НаборНоменклатурыКонтрагентов = ИнтеграцияЭДО.ЗаполнитьНаборНоменклатурыКонтрагентовПоТаблицеТоваров(ИнформацияОТоваре, ВладелецЭДО);
			ОтборПоНоменклатуреКонтрагента = Новый Структура("НоменклатураКонтрагента", НаборНоменклатурыКонтрагентов);
			РезультатСопоставления = СопоставлениеНоменклатурыКонтрагентов.НайтиСоответствиеНоменклатуры(ОтборПоНоменклатуреКонтрагента, Ложь);
		КонецЕсли;
	КонецЕсли; 
	ТЗСопоставленияДляОтбора = НоваяТаблицаСопоставленнойНоменклатуры();
	Для каждого ЭлементРезультат Из РезультатСопоставления Цикл 
		СтрокаТЗСопоставленияДляОтбора = ТЗСопоставленияДляОтбора.Добавить();
		СтрокаТЗСопоставленияДляОтбора.НомерСтроки = Строка(ТЗСопоставленияДляОтбора.Индекс(СтрокаТЗСопоставленияДляОтбора)+1);
		СтрокаТЗСопоставленияДляОтбора.Номенклатура = ?(ЭлементРезультат.НоменклатураИБ.Номенклатура = Неопределено, Справочники.Номенклатура.ПустаяСсылка(),ЭлементРезультат.НоменклатураИБ.Номенклатура);
		СтрокаТЗСопоставленияДляОтбора.Владелец = ЭлементРезультат.НоменклатураКонтрагента.Владелец;
		СтрокаТЗСопоставленияДляОтбора.Идентификатор = ЭлементРезультат.НоменклатураКонтрагента.Идентификатор;
		СтрокаТЗСопоставленияДляОтбора.Упаковка = ЭлементРезультат.НоменклатураИБ.Упаковка;
		СтрокаТЗСопоставленияДляОтбора.Характеристика = ЭлементРезультат.НоменклатураИБ.Характеристика;
	КонецЦикла;
	РезультатТаблицаСопоставление = РезультатЗапросаОднозначноСопоставленнойНоменклатурыКонтрагентаПоИдентификатору(ТЗСопоставленияДляОтбора);
	УстановитьПривилегированныйРежим(Истина);
	ОтборПоДокументу = ИнтеграцияЭДО.ОтборНоменклатурыКонтрагентовНаКонтроле(ВходящаяУПДЭДО);
	НаКонтроле = ИнтеграцияЭДО.НоменклатураКонтрагентовНаКонтроле(ОтборПоДокументу);  
	УстановитьПривилегированныйРежим(Ложь);
	Если ТипЗнч(НаКонтроле) = Тип("Массив") Тогда
		ДокументЭДОНаходитсяНаКонтроле = ?(НаКонтроле.Количество() > 0,Истина,Ложь) 
	Иначе
		ДокументЭДОНаходитсяНаКонтроле = Истина;
	КонецЕсли;
	
	Выборка = РезультатТаблицаСопоставление.Выбрать();
	Для каждого СтрокаТЗ_ПланФакт Из ТЗ_ПланФакт Цикл
		СтруктураПоиска = Новый Структура("Номенклатура",СтрокаТЗ_ПланФакт.Номенклатура);
		Выборка.Сбросить();
		Если Выборка.НайтиСледующий(СтруктураПоиска) Тогда
			СтрокаТЗ_ПланФакт.НоменклатураЭДО = Выборка.НоменклатураКонтрагента;
		Иначе
			Если ДокументЭДОНаходитсяНаКонтроле Тогда
				СтрокаТЗ_ПланФакт.НоменклатураЭДО = Справочники.НоменклатураКонтрагентов.ПустаяСсылка();
				НеСопоставленнаяНоменклатура.Добавить(СтрокаТЗ_ПланФакт.Номенклатура);
				СтрокаТЗ_ПланФакт.ОтсутствуетВЭДО = Ложь;
			Иначе
				СтрокаТЗ_ПланФакт.НоменклатураЭДО = Справочники.НоменклатураКонтрагентов.ПустаяСсылка();
				СтрокаТЗ_ПланФакт.ОтсутствуетВЭДО = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НоваяТаблицаСопоставленнойНоменклатуры()
	
	ТаблицаСопоставлений = Новый ТаблицаЗначений;
	ТаблицаСопоставлений.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(5)));
	ТаблицаСопоставлений.Колонки.Добавить("Владелец", СопоставлениеНоменклатурыКонтрагентовСлужебный.ОписаниеТиповВладельцаНоменклатурыСопоставленияБЭД());
	ТаблицаСопоставлений.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(300)));
	ТаблицаСопоставлений.Колонки.Добавить("Номенклатура", Метаданные.ОпределяемыеТипы.НоменклатураБЭД.Тип);
	ТаблицаСопоставлений.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатурыБЭД.Тип);
	ТаблицаСопоставлений.Колонки.Добавить("Упаковка", Метаданные.ОпределяемыеТипы.УпаковкаНоменклатурыБЭД.Тип);
	//ТаблицаСопоставлений.Колонки.Добавить("НоменклатураКонтрагента", Новый ОписаниеТипов("СправочникСсылка.НоменклатураКонтрагентов"));
	Возврат ТаблицаСопоставлений;

КонецФункции

&НаКлиенте
Процедура ОткрытьСопоставлениеНоменклатуры(Знач НоменклатураКонтрагентов, Знач Настройки = Неопределено, Знач ОповещениеОЗакрытии = Неопределено,НеСопоставленнаяНоменклатура)
	
	Если ТипЗнч(НоменклатураКонтрагентов) <> Тип("Массив") Тогда
		НоменклатураКонтрагентов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НоменклатураКонтрагентов);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НоменклатураКонтрагентов) Тогда
		ТекстСообщения = НСтр("ru = 'Данные для сопоставления номенклатуры отсутствуют.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ИсполняемыеНастройки = Новый Структура;
	ИсполняемыеНастройки.Вставить("РазрешитьСохранение", Истина);
	ИсполняемыеНастройки.Вставить("РежимОткрытияОкна"  , РежимОткрытияОкнаФормы.Независимый);
	ИсполняемыеНастройки.Вставить("Заголовок"          , Неопределено);
	ИсполняемыеНастройки.Вставить("ВладелецФормы"      , Неопределено);
	
	ПараметрыФормы = Новый Структура;
	
	Если Настройки <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ИсполняемыеНастройки, Настройки);
		
		Если Настройки.Свойство("ОграничениеТипаНоменклатуры") Тогда
			ПараметрыФормы.Вставить("ОграничениеТипаНоменклатуры", Настройки.ОграничениеТипаНоменклатуры);
		КонецЕсли;
		Если Настройки.Свойство("ОтключитьПоискПоНатуральнымКлючам") Тогда
			ПараметрыФормы.Вставить("ОтключитьПоискПоНатуральнымКлючам", Настройки.ОтключитьПоискПоНатуральнымКлючам);
		КонецЕсли;
		Если Настройки.Свойство("ОтключитьПоискПоШтрихкодамКомбинаций") Тогда
			ПараметрыФормы.Вставить("ОтключитьПоискПоШтрихкодамКомбинаций", Настройки.ОтключитьПоискПоШтрихкодамКомбинаций);
		КонецЕсли;
		Если Настройки.Свойство("ОтключитьПоискПоСловарю") Тогда
			ПараметрыФормы.Вставить("ОтключитьПоискПоСловарю", Настройки.ОтключитьПоискПоСловарю);
		КонецЕсли;
		Если Настройки.Свойство("ТочностьПоискаПоУмолчанию") Тогда
			ПараметрыФормы.Вставить("ТочностьПоискаПоУмолчанию", Настройки.ТочностьПоискаПоУмолчанию);
		КонецЕсли;
		Если Настройки.Свойство("ВидимостьКолонокСопоставления") Тогда
			ВидимостьКолонокСопоставления = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НовыеНастройкиВидимостиКолонокСопоставления();
			ЗаполнитьЗначенияСвойств(ВидимостьКолонокСопоставления, Настройки.ВидимостьКолонокСопоставления);
			ПараметрыФормы.Вставить("ВидимостьКолонокСопоставления", ВидимостьКолонокСопоставления);
		КонецЕсли;
		Если Настройки.Свойство("ДополнительныеРеквизитыСопоставления") Тогда
			ПараметрыФормы.Вставить("ДополнительныеРеквизитыСопоставления", Настройки.ДополнительныеРеквизитыСопоставления);
		КонецЕсли;
		Если Настройки.Свойство("ДополнительныеПараметрыПоиска") Тогда
			ПараметрыФормы.Вставить("ДополнительныеПараметрыПоиска", Настройки.ДополнительныеПараметрыПоиска);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("НоменклатураКонтрагентов", НоменклатураКонтрагентов);
	ПараметрыФормы.Вставить("РазрешитьСохранение", ИсполняемыеНастройки.РазрешитьСохранение);
	ПараметрыФормы.Вставить("СопоставлениеИзПриемкиМассивНоменклатуры", НеСопоставленнаяНоменклатура);
	Если ЗначениеЗаполнено(ИсполняемыеНастройки.Заголовок) Тогда
		ПараметрыФормы.Вставить("Заголовок", ИсполняемыеНастройки.Заголовок);
	КонецЕсли;
			
	ОткрытьФорму("Обработка.СопоставлениеНоменклатурыБЭД.Форма.Форма", 
		ПараметрыФормы, ИсполняемыеНастройки.ВладелецФормы, , , , ОповещениеОЗакрытии, ИсполняемыеНастройки.РежимОткрытияОкна);
		
КонецПроцедуры

Функция РезультатЗапросаОднозначноСопоставленнойНоменклатурыКонтрагентаПоИдентификатору(ТаблицаТоваров)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Владелец КАК Владелец,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Упаковка КАК Упаковка,
	|	ТаблицаТоваров.Идентификатор КАК Идентификатор,
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Владелец,
	|	Номенклатура,
	|	Характеристика,
	|	Упаковка,
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Владелец КАК Владелец,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Упаковка КАК Упаковка,
	|	ТаблицаТоваров.Идентификатор КАК Идентификатор,
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	МАКСИМУМ(ЕСТЬNULL(НоменклатураКонтрагентов.Ссылка, ЗНАЧЕНИЕ(Справочник.НоменклатураКонтрагентов.ПустаяСсылка))) КАК НоменклатураКонтрагента
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|		ПО ТаблицаТоваров.Владелец = НоменклатураКонтрагентов.ВладелецНоменклатуры
	|			И ТаблицаТоваров.Идентификатор = НоменклатураКонтрагентов.Идентификатор
	|			И (НЕ НоменклатураКонтрагентов.ПометкаУдаления)
	|			И ТаблицаТоваров.Номенклатура = НоменклатураКонтрагентов.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Владелец,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Упаковка,
	|	ТаблицаТоваров.Идентификатор,
	|	ТаблицаТоваров.НомерСтроки";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПослеОтветаСопоставлениеВетисДляСтроки(Результат, ДопПараметры) Экспорт
	
	ТекДанные = Элементы.ТЗ_ПланФакт.ТекущиеДанные;
	Если Результат = КодВозвратаДиалога.Да Тогда
		ТекФорма = ПолучитьФорму("РегистрСведений.СоответствиеНоменклатурыВЕТИС.ФормаЗаписи",,ЭтотОбъект);
		ТекФорма.Объект.Номенклатура = ТекДанные.Номенклатура;
		ТекФорма.Объект.Продукция = ТекДанные.НоменклатураВетис; 
		ТекФорма.Элементы.Номенклатура.ТолькоПросмотр = Истина;
		ТекФорма.Элементы.Продукция.ТолькоПросмотр = Истина;
		Оп = Новый ОписаниеОповещения("ВыполнитьПослеОкончанияПодбораВетисДляСтроки", ЭтотОбъект, Новый Структура);
		ТекФорма.ОписаниеОповещенияОЗакрытии = Оп;
		ТекФорма.Открыть();
	Иначе
		ТекДанные.НоменклатураВетис = ПредопределенноеЗначение("Справочник.ПродукцияВЕТИС.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьПослеОкончанияПодбораВетисДляСтроки(Результат, ДопПараметры) Экспорт
	
	ТекДанные = Элементы.ТЗ_ПланФакт.ТекущиеДанные;
	ПроверитьСопоставлениеНоменклатурыВетисИЗаполнитьСтроку(ТЗ_ПланФакт.Индекс(Элементы.ТЗ_ПланФакт.ТекущиеДанные));
	ЗаполнитьПоВСДДляТекущейСтрокиНаСервере(ТЗ_ПланФакт.Индекс(Элементы.ТЗ_ПланФакт.ТекущиеДанные));
	
КонецПроцедуры


&НаСервере
Процедура ПроверитьСопоставлениеНоменклатурыВетисИЗаполнитьСтроку(ИндексСтроки)
	
	ТекДанные = ТЗ_ПланФакт.Получить(ИндексСтроки);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоответствиеНоменклатурыВЕТИС.Продукция КАК Продукция,
	|	СоответствиеНоменклатурыВЕТИС.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК СоответствиеНоменклатурыВЕТИС
	|ГДЕ
	|	СоответствиеНоменклатурыВЕТИС.Номенклатура = &Номенклатура
	|	И СоответствиеНоменклатурыВЕТИС.Продукция = &Продукция"; 
	Запрос.УстановитьПараметр("Номенклатура",ТекДанные.Номенклатура);
	Запрос.УстановитьПараметр("Продукция",ТекДанные.НоменклатураВетис);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ТекДанные.НоменклатураВетис = Справочники.ПродукцияВЕТИС.ПустаяСсылка();
	Иначе
		ЗапросВСД = Новый Запрос;
		ЗапросВСД.Текст = "
		|ВЫБРАТЬ
		|	ВетеринарноСопроводительныйДокументВЕТИС.Продукция КАК Продукция,
		|	ВетеринарноСопроводительныйДокументВЕТИС.Ссылка КАК Ссылка,
		|	ВетеринарноСопроводительныйДокументВЕТИС.КоличествоВЕТИС КАК КоличествоВЕТИС,
		|ВетеринарноСопроводительныйДокументВЕТИС.ГрузоотправительХозяйствующийСубъект.Контрагент
		|ИЗ
		|	Справочник.ВетеринарноСопроводительныйДокументВЕТИС КАК ВетеринарноСопроводительныйДокументВЕТИС
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ВетеринарноСопроводительныйДокументВЕТИС.ГрузоотправительХозяйствующийСубъект.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|				ТОГДА ВетеринарноСопроводительныйДокументВЕТИС.ГрузоотправительХозяйствующийСубъект.Контрагент = &Контрагент
		|			ИНАЧЕ ВетеринарноСопроводительныйДокументВЕТИС.ГрузоотправительХозяйствующийСубъект.ИНН = &ИНН
		|		КОНЕЦ  
		|	И ВетеринарноСопроводительныйДокументВЕТИС.Продукция = &Продукция
		|	И ВетеринарноСопроводительныйДокументВЕТИС.НомерТТН = &НомерТТН
		|	И ВетеринарноСопроводительныйДокументВЕТИС.ДатаТТН = &ДатаТТН";
		ЗапросВСД.УстановитьПараметр("Контрагент",ОбрабатываемыйДокумент.Контрагент); 
		ЗапросВСД.УстановитьПараметр("ИНН",СокрЛП(ОбрабатываемыйДокумент.Контрагент.ИНН));
		ЗапросВСД.УстановитьПараметр("Продукция",ТекДанные.НоменклатураВетис); 
		ЗапросВСД.УстановитьПараметр("НомерТТН",НомерТТН);
		ЗапросВСД.УстановитьПараметр("ДатаТТН",ДатаТТН);
		РезультатЗапросаВСД = ЗапросВСД.Выполнить();
		МассивПродукции = РезультатЗапросаВСД.Выгрузить().ВыгрузитьКолонку("Продукция");
		ЗапросСопоставлениеПродукции = Новый Запрос();
		//ЗапросСопоставлениеПродукции.Текст = Справочники.ПродукцияВЕТИС.ТекстЗапросаИнформацияОСопоставлении(); 
		ЗапросСопоставлениеПродукции.Текст = ТекстЗапросаИнформацияОСопоставлении(); 
		ЗапросСопоставлениеПродукции.УстановитьПараметр("Продукция", МассивПродукции); 
		ЗапросСопоставлениеПродукции.УстановитьПараметр("Номенклатура", ТЗ_ПланФакт.Выгрузить(,"Номенклатура").ВыгрузитьКолонку("Номенклатура"));  
		РезультатЗапросаСопоставлениеПродукции = ЗапросСопоставлениеПродукции.Выполнить();
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	РезультатЗапросаСопоставлениеПродукции.Ссылка КАК ПродукцияСопоставления,
		|	РезультатЗапросаСопоставлениеПродукции.Номенклатура Как Номенклатура 
		|   Поместить ВТСопоставление
		|   ИЗ &РезультатЗапросаСопоставлениеПродукции КАК РезультатЗапросаСопоставлениеПродукции
		|;
		|ВЫБРАТЬ 
		|	РезультатЗапросаВСД.Ссылка, 
		|	РезультатЗапросаВСД.Продукция,
		|	РезультатЗапросаВСД.КоличествоВЕТИС
		|	Поместить ВТВСД
		|	Из &РезультатЗапросаВСД КАК РезультатЗапросаВСД
		|;
		|ВЫБРАТЬ
		|	ВТВСД.Ссылка,
		|	ВТВСД.Ссылка.Представление КАК Представление,
		|	ВТВСД.Ссылка.Идентификатор КАК Идентификатор,
		|	ВТВСД.Продукция КАК Продукция,
		|	ВТВСД.Продукция.Представление КАК ПродукцияПредставление,
		|	ВТВСД.КоличествоВЕТИС КАК КоличествоВЕТИС, 
		|	ВТСопоставление.ПродукцияСопоставления КАК ПродукцияСопоставления,
		|	ВТСопоставление.Номенклатура Как Номенклатура 
		|ИЗ ВТВСД КАК ВТВСД 
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСопоставление КАК ВТСопоставление
		|      ПО ВТВСД.Продукция = ВТСопоставление.ПродукцияСопоставления"; 
		Запрос.УстановитьПараметр("РезультатЗапросаСопоставлениеПродукции",РезультатЗапросаСопоставлениеПродукции);
		Запрос.УстановитьПараметр("РезультатЗапросаВСД",РезультатЗапросаВСД);
		РезультатЗапроса = Запрос.Выполнить();
		ВсеВСДПодораны = Истина;
		Если РезультатЗапроса.Пустой() Тогда
			Сообщить("Для поставщика: " + ОбрабатываемыйДокумент.Контрагент + " не найдены ВСД с указынным номером ТТН и датой ТТН для выбранной строки");
		Иначе
			ЕстьПодобранныеВСД = Ложь;
			ТекДанные.НакладныеВетИС.Очистить();
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл 
				Если Выборка.Номенклатура = ТекДанные.Номенклатура Тогда 
					ТекДанные.НакладныеВетИС.Добавить(Выборка.Ссылка, СокрЛП(СтрЗаменить(Выборка.Представление,Выборка.Идентификатор,"")));
					ЕстьПодобранныеВСД = Истина;
				КонецЕсли;
			КонецЦикла;
			Если ЕстьПодобранныеВСД Тогда
				НакладнаяВЕТИС = Документы.ВходящаяТранспортнаяОперацияВЕТИС.ПустаяСсылка();  
				Сообщить("ВСД для выбранной строки подобраны успешно");
			Иначе
				Сообщить("ВСД для выбранной строки не найдены"); 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьПоВСДДляТекущейСтрокиНаСервере(ИндексСтроки)
	
	ТЗ_Отбор = Новый ТаблицаЗначений;
	ТЗ_Отбор.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗ_Отбор.Колонки.Добавить("Продукция", Новый ОписаниеТипов("СправочникСсылка.ПродукцияВЕТИС"));
	ТЗ_Отбор.Колонки.Добавить("ЕдИзм", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмеренияВЕТИС"));
	СтрокаТЧ = ТЗ_ПланФакт.Получить(ИндексСтроки);
	Если СтрокаТЧ.НакладныеВетИС.Количество() > 0 Тогда	
		Для каждого ЭлементСпискаЗначений Из СтрокаТЧ.НакладныеВетИС Цикл
			НоваяСтрокаТЗ_Отбора = ТЗ_Отбор.Добавить();
			НоваяСтрокаТЗ_Отбора.Номенклатура = СтрокаТЧ.Номенклатура;   
			НоваяСтрокаТЗ_Отбора.Продукция = ЭлементСпискаЗначений.Значение.Продукция;
			НоваяСтрокаТЗ_Отбора.ЕдИзм = ЭлементСпискаЗначений.Значение.ЕдиницаИзмеренияВЕТИС;
			СтрокаТЧ.ЕдИзмВетис = ЭлементСпискаЗначений.Значение.ЕдиницаИзмеренияВЕТИС;
		КонецЦикла; 
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КоэффициентыЕдиницИзмеренияВЕТИС.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(КоэффициентыЕдиницИзмеренияВЕТИС.КоэффициентЕдиницыВЕТИС) КАК КоэффициентЕдиницыВЕТИС,
	|	МАКСИМУМ(КоэффициентыЕдиницИзмеренияВЕТИС.ЕдиницаИзмеренияВЕТИС.ЕдиницаИзмерения) КАК ЕдиницаИзмерения
	|ИЗ
	|	РегистрСведений.КоэффициентыЕдиницИзмеренияВЕТИС КАК КоэффициентыЕдиницИзмеренияВЕТИС
	|ГДЕ
	|	(КоэффициентыЕдиницИзмеренияВЕТИС.Номенклатура, КоэффициентыЕдиницИзмеренияВЕТИС.Продукция, КоэффициентыЕдиницИзмеренияВЕТИС.ЕдиницаИзмеренияВЕТИС) В (&ТЗ_Отбор)
	|
	|СГРУППИРОВАТЬ ПО
	|	КоэффициентыЕдиницИзмеренияВЕТИС.Номенклатура";
	Запрос.УстановитьПараметр("ТЗ_Отбор",ТЗ_Отбор);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	СтруктураПоискаДляВыборки = Новый Структура("Номенклатура",СтрокаТЧ.Номенклатура);
	Если Выборка.НайтиСледующий(СтруктураПоискаДляВыборки) Тогда
		Если ЗначениеЗаполнено(Выборка.КоэффициентЕдиницыВЕТИС) Тогда
			Коэффициент = Выборка.КоэффициентЕдиницыВЕТИС;
			КоэффициентЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		Иначе
			Коэффициент = 0;	
			КоэффициентЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
		КонецЕсли;
	Иначе
		Коэффициент = 0;	
		КоэффициентЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
	КонецЕсли;
	
	Если СтрокаТЧ.НакладныеВетИС.Количество() = 1 Тогда 
		КоличествоВСД = СправочникВСДПолучитьКоличество(СтрокаТЧ.НакладныеВетИС[0].Значение); 
		Если Коэффициент > 0 Тогда
			СтрокаТЧ.КоличествоДок = ?(СтрокаТЧ.Номенклатура.ЕдиницаИзмерения = КоэффициентЕдиницаИзмерения,КоличествоВСД,КоличествоВСД / Коэффициент); 
		Иначе
			СтрокаТЧ.КоличествоДок = КоличествоВСД;
		КонецЕсли;
		СтруктураДанныхСерии = ПодобратьСериюНоменклатуры(Ложь,СтрокаТЧ.Номенклатура,,СтрокаТЧ.НакладныеВетИС[0].Значение); 
		Если СтруктураДанныхСерии <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТЧ,СтруктураДанныхСерии);	
		КонецЕсли;
		СтрокаТЧ.НесколькоСерий = Ложь; 
		СтруктураОтбора = Новый Структура("НомерСтрокиРеализации, Номенклатура",СтрокаТЧ.НомерСтроки,СтрокаТЧ.Номенклатура);
		СтрокиТЧСерииНоменклатуры = СерииНоменклатуры.НайтиСтроки(СтруктураОтбора);
		Для каждого СтрокаТЧСерииНоменклатуры Из СтрокиТЧСерииНоменклатуры Цикл
			СерииНоменклатуры.Удалить(СтрокаТЧСерииНоменклатуры);
		КонецЦикла;
		НоваяСтрокаТЧСерииНоменклатуры = СерииНоменклатуры.Добавить();
		НоваяСтрокаТЧСерииНоменклатуры.Номенклатура = СтрокаТЧ.Номенклатура;
		НоваяСтрокаТЧСерииНоменклатуры.СерияНоменклатуры = СтруктураДанныхСерии.СерияНоменклатуры; 
		НоваяСтрокаТЧСерииНоменклатуры.Количество = СтрокаТЧ.КоличествоДок;
		НоваяСтрокаТЧСерииНоменклатуры.ДатаПроизводства = СтруктураДанныхСерии.СрокГодности;
		НоваяСтрокаТЧСерииНоменклатуры.СрокГодности2 = СтруктураДанныхСерии.СрокГодности2;
		НоваяСтрокаТЧСерииНоменклатуры.ГоденДо = СтруктураДанныхСерии.ГоденДо;
		НоваяСтрокаТЧСерииНоменклатуры.НомерСтрокиРеализации = СтрокаТЧ.НомерСтроки;
		СерииНоменклатуры.Сортировать("НомерСтрокиРеализации");
	КонецЕсли;
	Если  СтрокаТЧ.НакладныеВетИС.Количество() > 1 Тогда
		ТЗСерийВСД = Новый ТаблицаЗначений;
		ТЗСерийВСД.Колонки.Добавить("СерияНоменклатуры",Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));				
		ТЗСерийВСД.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
		ТЗСерийВСД.Колонки.Добавить("ДатаПроизводства",Новый ОписаниеТипов("Дата"));
		ТЗСерийВСД.Колонки.Добавить("СрокГодности2",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(5,2)));
		ТЗСерийВСД.Колонки.Добавить("ГоденДо",Новый ОписаниеТипов("Дата"));
		ОбщееКоличество = 0;
		Для каждого ЭлементСпискаЗначений Из СтрокаТЧ.НакладныеВетИС Цикл
			СерияКоличество = СправочникВСДПолучитьКоличество(ЭлементСпискаЗначений.Значение);
			СтруктураДанныхСерии = ПодобратьСериюНоменклатуры(Ложь,СтрокаТЧ.Номенклатура,,ЭлементСпискаЗначений.Значение);
			Если СтруктураДанныхСерии <> Неопределено Тогда
				НоваяСтрокаТЗСерийВСД = ТЗСерийВСД.Добавить();
				НоваяСтрокаТЗСерийВСД.СерияНоменклатуры = СтруктураДанныхСерии.СерияНоменклатуры;
				Если Коэффициент > 0 Тогда
					НоваяСтрокаТЗСерийВСД.Количество = ?(СтрокаТЧ.Номенклатура.ЕдиницаИзмерения = КоэффициентЕдиницаИзмерения,СерияКоличество,СерияКоличество / Коэффициент); 
				Иначе	
					НоваяСтрокаТЗСерийВСД.Количество = СерияКоличество;
				КонецЕсли;
				НоваяСтрокаТЗСерийВСД.ДатаПроизводства = СтруктураДанныхСерии.СрокГодности;
				НоваяСтрокаТЗСерийВСД.СрокГодности2 = СтруктураДанныхСерии.СрокГодности2;
				НоваяСтрокаТЗСерийВСД.ГоденДо = СтруктураДанныхСерии.ГоденДо;
				ОбщееКоличество = ОбщееКоличество + СерияКоличество; 
			КонецЕсли;
		КонецЦикла;
		ТЗСерийВСД.Свернуть("СерияНоменклатуры,ДатаПроизводства,СрокГодности2,ГоденДо","Количество"); 
		Если ТЗСерийВСД.Количество() = 1 Тогда
			Если Коэффициент > 0 Тогда
				СтрокаТЧ.КоличествоДок = ?(СтрокаТЧ.Номенклатура.ЕдиницаИзмерения = КоэффициентЕдиницаИзмерения,ТЗСерийВСД[0].Количество,ТЗСерийВСД[0].Количество / Коэффициент); 
			Иначе
				СтрокаТЧ.КоличествоДок = ТЗСерийВСД[0].Количество;
			КонецЕсли;
			СтрокаТЧ.СрокГодности = ТЗСерийВСД[0].ДатаПроизводства;
			СтрокаТЧ.СрокГодности2 = ТЗСерийВСД[0].СрокГодности2;
			СтрокаТЧ.ГоденДо = ТЗСерийВСД[0].ГоденДо;
			СтрокаТЧ.СерияНоменклатуры = ТЗСерийВСД[0].СерияНоменклатуры;
			СтрокаТЧ.НесколькоСерий = Ложь; 
			СтруктураОтбора = Новый Структура("НомерСтрокиРеализации, Номенклатура",СтрокаТЧ.НомерСтроки,СтрокаТЧ.Номенклатура);
			СтрокиТЧСерииНоменклатуры = СерииНоменклатуры.НайтиСтроки(СтруктураОтбора);
			Для каждого СтрокаТЧСерииНоменклатуры Из СтрокиТЧСерииНоменклатуры Цикл
				СерииНоменклатуры.Удалить(СтрокаТЧСерииНоменклатуры);
			КонецЦикла;
			НоваяСтрокаТЧСерииНоменклатуры = СерииНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧСерииНоменклатуры,ТЗСерийВСД[0]);
			НоваяСтрокаТЧСерииНоменклатуры.НомерСтрокиРеализации = СтрокаТЧ.НомерСтроки; 
			НоваяСтрокаТЧСерииНоменклатуры.Номенклатура = СтрокаТЧ.Номенклатура;
			СерииНоменклатуры.Сортировать("НомерСтрокиРеализации");
		ИначеЕсли  ТЗСерийВСД.Количество() > 1 Тогда
			СтруктураОтбора = Новый Структура("НомерСтрокиРеализации, Номенклатура",СтрокаТЧ.НомерСтроки,СтрокаТЧ.Номенклатура);
			СтрокиТЧСерииНоменклатуры = СерииНоменклатуры.НайтиСтроки(СтруктураОтбора);
			Для каждого СтрокаТЧСерииНоменклатуры Из СтрокиТЧСерииНоменклатуры Цикл
				СерииНоменклатуры.Удалить(СтрокаТЧСерииНоменклатуры);
			КонецЦикла;
			
			Для каждого СтрокаТЗСерийВСД Из ТЗСерийВСД Цикл
				НоваяСтрокаТЧСерииНоменклатуры = СерииНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧСерииНоменклатуры,СтрокаТЗСерийВСД);
				НоваяСтрокаТЧСерииНоменклатуры.НомерСтрокиРеализации = СтрокаТЧ.НомерСтроки;
				НоваяСтрокаТЧСерииНоменклатуры.Номенклатура = СтрокаТЧ.Номенклатура;
			КонецЦикла;  
			Если Коэффициент > 0 Тогда
				СтрокаТЧ.КоличествоДок = ?(СтрокаТЧ.Номенклатура.ЕдиницаИзмерения = КоэффициентЕдиницаИзмерения,ОбщееКоличество,ОбщееКоличество / Коэффициент); 
			Иначе
				СтрокаТЧ.КоличествоДок = ОбщееКоличество;
			КонецЕсли;
			СтрокаТЧ.НесколькоСерий = Истина;
			СтрокаТЧ.СерияНоменклатуры = Неопределено;
			СерииНоменклатуры.Сортировать("НомерСтрокиРеализации");
		КонецЕсли;
	КонецЕсли;		 
	Модифицированность = Истина;  
	
КонецПроцедуры 


&НаСервере
Процедура ЗаполнитьСписокВыбораНоменклатурыВетис(МассивПродукции)
	
	Элементы.ТЗ_ПланФактНоменклатураВетИС.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);	
	Если ЗначениеЗаполнено(НомерТТН) И ЗначениеЗаполнено(ДатаТТН) Тогда
		ЗапросВСД = Новый Запрос;
		ЗапросВСД.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВетеринарноСопроводительныйДокументВЕТИС.Продукция КАК Продукция
		|ИЗ
		|	Справочник.ВетеринарноСопроводительныйДокументВЕТИС КАК ВетеринарноСопроводительныйДокументВЕТИС
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ВетеринарноСопроводительныйДокументВЕТИС.ГрузоотправительХозяйствующийСубъект.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|				ТОГДА ВетеринарноСопроводительныйДокументВЕТИС.ГрузоотправительХозяйствующийСубъект.Контрагент = &Контрагент
		|			ИНАЧЕ ВетеринарноСопроводительныйДокументВЕТИС.ГрузоотправительХозяйствующийСубъект.ИНН = &ИНН
		|		КОНЕЦ 
		|	И ВетеринарноСопроводительныйДокументВЕТИС.НомерТТН = &НомерТТН
		|	И ВетеринарноСопроводительныйДокументВЕТИС.ДатаТТН = &ДатаТТН";
		ЗапросВСД.УстановитьПараметр("Контрагент",ОбрабатываемыйДокумент.Контрагент); 
		ЗапросВСД.УстановитьПараметр("ИНН",СокрЛП(ОбрабатываемыйДокумент.Контрагент.ИНН));
		ЗапросВСД.УстановитьПараметр("НомерТТН",НомерТТН);
		ЗапросВСД.УстановитьПараметр("ДатаТТН",ДатаТТН);
		РезультатЗапросаВСД = ЗапросВСД.Выполнить();
		Если Не РезультатЗапросаВСД.Пустой() Тогда 
			Выборка = РезультатЗапросаВСД.Выбрать();
			Пока Выборка.Следующий() Цикл
				МассивПродукции.Добавить(Выборка.Продукция);	
			КонецЦикла;
			НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", МассивПродукции);
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элементы.ТЗ_ПланФактНоменклатураВетИС.ПараметрыВыбора = НовыеПараметры;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ТЗ_ПланФактНоменклатураВетИСНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка) 
	
	СтандартнаяОбработка = Ложь;
	МассивПродукции = Новый СписокЗначений;
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеВыбораНоменклатурыВетисИзСписка",ЭтотОбъект);
	ЗаполнитьСписокВыбораНоменклатурыВетис(МассивПродукции); 
	МассивПродукции.ПоказатьВыборЭлемента(ОписаниеОповещения, Элементы.ТЗ_ПланФакт.ТекущиеДанные.Номенклатура);
	
КонецПроцедуры   

&НаКлиенте
Процедура ВыполнитьПослеВыбораНоменклатурыВетисИзСписка(Результат, ДопПараметры) Экспорт 
	
	Если Результат <> Неопределено Тогда 
		ТекДанные = Элементы.ТЗ_ПланФакт.ТекущиеДанные;
		ТекДанные.НоменклатураВетис = Результат.Значение;
		Если ЗначениеЗаполнено(ТекДанные.Номенклатура) И ЗначениеЗаполнено(ТекДанные.НоменклатураВетис) Тогда 
			НетСопоставления = ПроверитьДанныеВРегистреСопоставления(ТекДанные.Номенклатура,ТекДанные.НоменклатураВетис);
			Если НетСопоставления Тогда
				ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеОтветаСопоставлениеВетисДляСтроки", ЭтотОбъект);
				ПоказатьВопрос(ОписаниеОповещения,"Выполнить сопоставление номенклатуры и продолжить заполнение?",РежимДиалогаВопрос.ДаНет);
			Иначе
				ПроверитьСопоставлениеНоменклатурыВетисИЗаполнитьСтроку(ТЗ_ПланФакт.Индекс(Элементы.ТЗ_ПланФакт.ТекущиеДанные)); 
				ЗаполнитьПоВСДДляТекущейСтрокиНаСервере(ТЗ_ПланФакт.Индекс(Элементы.ТЗ_ПланФакт.ТекущиеДанные));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры  

&НаСервереБезКонтекста
Функция ПроверитьДанныеВРегистреСопоставления(Номенклатура,НоменклатураВетис);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоответствиеНоменклатурыВЕТИС.Продукция КАК Продукция,
	|	СоответствиеНоменклатурыВЕТИС.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК СоответствиеНоменклатурыВЕТИС
	|ГДЕ
	|	СоответствиеНоменклатурыВЕТИС.Номенклатура = &Номенклатура
	|	И СоответствиеНоменклатурыВЕТИС.Продукция = &Продукция"; 
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	Запрос.УстановитьПараметр("Продукция",НоменклатураВетис);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
    КонецЕсли;

КонецФункции

&НаСервере
Функция ТекстЗапросаИнформацияОСопоставлении()	
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеНоменклатурыВЕТИС.Продукция КАК Продукция,
	|	СоответствиеНоменклатурыВЕТИС.Номенклатура КАК Номенклатура 
	|ПОМЕСТИТЬ СопоставленоПозиций
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК СоответствиеНоменклатурыВЕТИС
	|ГДЕ
	|	СоответствиеНоменклатурыВЕТИС.Продукция В(&Продукция)
	|	И СоответствиеНоменклатурыВЕТИС.Номенклатура В(&Номенклатура)
	|ИНДЕКСИРОВАТЬ ПО
	|	Продукция
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(СопоставленоПозиций.Номенклатура,Значение(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура
	|ИЗ
	|	Справочник.ПродукцияВЕТИС КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ СопоставленоПозиций КАК СопоставленоПозиций
	|		ПО (СопоставленоПозиций.Продукция = Товары.Ссылка)
	|ГДЕ
	|	Товары.Ссылка В (&Продукция)";	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаКлиенте
Процедура ВыделятьСерииОСГПриИзменении(Элемент)
	
	Элементы.ВыделятьСерииОСГПроцент.Доступность = ВыделятьСерииОСГ;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСозданиеПоступления И Не ЗакрытиеФормыПоступленияПослеВопроса Тогда
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодтверждениеЗакрытияЗакладкаПоступления",ЭтотОбъект);
		КнопкиСписокЗначений = Новый СписокЗначений;
		КнопкиСписокЗначений.Добавить("ВернутьсяКСпискуЗаказов","Вернуться к списку заказов"); 
		КнопкиСписокЗначений.Добавить("ЗавершитьРаботуСПриемкой","Завершить работу с приёмкой");
        КнопкиСписокЗначений.Добавить("Отмена","Отмена");
		ПоказатьВопрос(ОписаниеОповещения,"Выберите действие",КнопкиСписокЗначений); 
	Иначе
		ЗакрытиеФормыПоступленияПослеВопроса = Ложь;
	КонецЕсли;
	
КонецПроцедуры

 &НаКлиенте
 Процедура ПодтверждениеЗакрытияЗакладкаПоступления(Результат,ДопПараметры) Экспорт
	 
	 Если Результат = "ЗавершитьРаботуСПриемкой" Тогда
		 СохранитьВЧерновикНаСервере();
		 ЗакрытиеФормыПоступленияПослеВопроса = Истина;
		 Закрыть();
	 ИначеЕсли Результат = "ВернутьсяКСпискуЗаказов" Тогда 
		 СохранитьВЧерновикНаСервере();
		 НазадПродолжить();
	 КонецЕсли;
	 
 КонецПроцедуры 

