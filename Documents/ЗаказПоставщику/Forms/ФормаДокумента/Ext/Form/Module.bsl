

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	//КонецЕсли;
	
	//++саб
	сабПриЧтенииНаСервере(ТекущийОбъект);
	//--саб
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, Новый Структура("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты") );
	//КонецЕсли;
	
	//++саб
	сабПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	//--саб
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	//КонецЕсли;
	
	//++саб
	сабПриОткрытии(Отказ);
	//--саб
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	Если МодульУправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
	//		ОбновитьЭлементыДополнительныхРеквизитов();
	//		МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	//	КонецЕсли;
	//КонецЕсли;
	
	//++саб
	сабОбработкаОповещения(ИмяСобытия, Параметр, Источник);
	//--саб
	
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	//КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	МодульУправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
	//КонецЕсли;
	
КонецПроцедуры


// СтандартныеПодсистемы.КонтактнаяИнформация

// Поддержка дополнительных реквизитов.

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	//КонецЕсли;
	
КонецПроцедуры




// Конец СтандартныеПодсистемы.КонтактнаяИнформация


&НаКлиенте
Процедура сабПриОткрытии(Отказ)
				
	ФлагВалютыПриИзменении("");
	
	УстановитьВидимость();
	
	ВидЗаказаПриИзменении(Неопределено);
	
	УстановитьДоступностьДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура сабОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "Запись_ЭлектронноеПисьмоИсходящее" Тогда
		Если Параметр.Свойство("Предмет") Тогда
			ТекСтатусПисьма = сабОперОбщегоНазначения.ПроверитьОтправкуПисьмаПоПредмету(Параметр.Предмет);
			Если НЕ ТекСтатусПисьма = Неопределено Тогда
				Если Не ЗначениеЗаполнено(Объект.Статус) ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.Создан") Тогда
					Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.Отправлен");
					Записать();
					сабПриСозданииНаСервере(Ложь, Истина);
				КонецЕсли;			
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ЗаказОбработан" Тогда
		ПриСозданииНаСервере(Ложь, Истина);
		ПриОткрытии(Ложь);
	КонецЕсли; 
КонецПроцедуры
 

&НаКлиенте
Процедура УстановитьВидимость()
				
	Элементы.ДатаПоступления.Видимость = Объект.ПоступлениеОднойДатой;
	Элементы.ТабличнаяЧастьДатаПоступления.Видимость = (Не Объект.ПоступлениеОднойДатой);
	Элементы.ТабличнаяЧастьКоличествоВЗапайках.Видимость = (ЗначениеЗаполнено(Объект.ПредприятиеВн));
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьКоличествоПриИзменении(Элемент)
	РассчитатьСуммуТовары();
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьЦенаПриИзменении(Элемент)
	РассчитатьСуммуТовары();
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьДоставкаПриИзменении(Элемент)
	Если Элементы.ТабличнаяЧасть.ТекущиеДанные.Доставка Тогда
		Элементы.ТабличнаяЧасть.ТекущиеДанные.СуммаДоставки = Элементы.ТабличнаяЧасть.ТекущиеДанные.Количество * Элементы.ТабличнаяЧасть.ТекущиеДанные.Доставка;
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьСуммаПриИзменении(Элемент)
	ТекКоличество = Элементы.ТабличнаяЧасть.ТекущиеДанные.Количество;
	Элементы.ТабличнаяЧасть.ТекущиеДанные.Цена = ?(ТекКоличество <> 0, Элементы.ТабличнаяЧасть.ТекущиеДанные.Сумма / ТекКоличество, 0);
	РассчитатьСуммуТовары();
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьСуммаДоставкиПриИзменении(Элемент)
	ТекКоличество = Элементы.ТабличнаяЧасть.ТекущиеДанные.Количество;
	Элементы.ТабличнаяЧасть.ТекущиеДанные.Доставка = ?(ТекКоличество <> 0, Элементы.ТабличнаяЧасть.ТекущиеДанные.СуммаДоставки / ТекКоличество, 0);
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеПриИзменении(Элемент)
	сабОбщегоНазначенияКлиентСервер.СкрытьПодразделения(ЭтаФорма);
	//УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("сабУчетПоПодразделениям", Объект.Предприятие));
КонецПроцедуры

&НаКлиенте
Процедура ФлагВалютыПриИзменении(Элемент)
	//Элементы.ГруппаВалюты.Видимость = Объект.ФлагВалюты;
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	Объект.Курс = БюджетныйНаСервере.ТекущийКурс(Объект.Валюта,Объект.Дата,Объект.Предприятие);
КонецПроцедуры

&НаКлиенте
Процедура РеализацияВидДоставкиПриИзменении(Элемент)
	
	Если Элементы.ТабличнаяЧасть.ТекущиеДанные.ВидДоставки = "Авто" Тогда
		Элементы.ТабличнаяЧасть.ТекущиеДанные.Статья = ПредопределенноеЗначение("Справочник.СтатьиЗатрат.ТранспортныеАвто");
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура сабПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	БюджетныйНаСервере.ДействияПриСозданииФормыДокумента(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ПоступлениеОднойДатой = Истина;
		Объект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		Объект.УчитыватьНДС = Истина;
		Объект.ЦенаВключаетНДС = Истина;
		ПодразделениеПриИзмененииСервер();
		Объект.Дата = ТекущаяДата();
		Объект.ДатаПоступления = КонецДня(ТекущаяДата()) + 1*24*60*60;
	Иначе
		Если Объект.Склад = сабОперОбщегоНазначения.ПолучитьСкладПоДопСвойству(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Склад возврата (Склады)", Истина), Объект.Предприятие) Тогда
			Элементы.Склад.Доступность = Ложь;
		КонецЕсли; 
		РассчитатьКоэффициентУпаковкиПриСозданииНаСервере();
	КонецЕсли;
	
	Элементы.Договор.АвтоОтметкаНезаполненного = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ПроверятьЗаполнениеДоговоровВДокументах", Истина).Значение;
	
	//заполнить артикулы
	ЗаполнитьАртикулы();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАртикулы()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Код,
		|	Номенклатура.Ссылка КАК Номенклатура
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&Номенклатура)";
	
	Запрос.УстановитьПараметр("Номенклатура", Объект.ТабличнаяЧасть.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СоответствияНоменклатуры = Новый Соответствие;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СоответствияНоменклатуры.Вставить(ВыборкаДетальныеЗаписи.Номенклатура, ВыборкаДетальныеЗаписи.Код);
	КонецЦикла;
	
	Для каждого ТекСтрока Из Объект.ТабличнаяЧасть Цикл
		ТекСтрока.Код = СоответствияНоменклатуры[ТекСтрока.Номенклатура];
	КонецЦикла; 		
КонецПроцедуры
 

&НаСервере
Процедура сабПриЧтенииНаСервере(ТекущийОбъект)
	сабОбщегоНазначения.ОтобразитьСостояниеДокумента(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	сабОбщегоНазначения.ОтобразитьСостояниеДокумента(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура РассчитатьКоэффициентУпаковкиПриСозданииНаСервере()
	
	ТЧ = Объект.ТабличнаяЧасть.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковкиНоменклатуры.Номенклатура,
	|	УпаковкиНоменклатуры.Упаковка,
	|	УпаковкиНоменклатуры.Коэффициент,
	|	УпаковкиНоменклатуры.ЕдиницаИзмерения
	|ИЗ
	|	РегистрСведений.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|ГДЕ
	|	УпаковкиНоменклатуры.Номенклатура В(&Номенклатура)
	|	И УпаковкиНоменклатуры.Упаковка В(&Упаковка)";
	Запрос.УстановитьПараметр("Номенклатура", ТЧ.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("Упаковка", ТЧ.ВыгрузитьКолонку("ЕдиницаИзмерения"));
	
	ТаблицаУпаковок = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЧ Из Объект.ТабличнаяЧасть Цикл
		НайденныеСтрокиУпаковок = ТаблицаУпаковок.НайтиСтроки(Новый Структура("Номенклатура, Упаковка, ЕдиницаИзмерения", СтрокаТЧ.Номенклатура, СтрокаТЧ.ЕдиницаИзмерения, СтрокаТЧ.Номенклатура.ЕдиницаИзмерения));
		Если НайденныеСтрокиУпаковок.Количество() = 0 Тогда
			СтрокаТЧ.КоэффициентПересчетаУпаковок = 1;
		Иначе
			СтрокаТЧ.КоэффициентПересчетаУпаковок = НайденныеСтрокиУпаковок[0].Коэффициент;
		КонецЕсли; 	
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура РассчитатьСуммуТовары(ТекДанные = Неопределено)
	
	Если ТекДанные = Неопределено Тогда
		ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	КонецЕсли;	
	
	Если Не ТекДанные = Неопределено Тогда
		ТекДанные.Сумма = ТекДанные.Количество * ТекДанные.Цена;
		
		//лишний запрос делаем
		ТекРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.СтавкаНДС, "Ставка");
		Если НЕ ТекРеквизиты = Неопределено Тогда
			ТекДанные.СуммаНДС = ТекДанные.Сумма / ((100+ТекРеквизиты.Ставка)/100) * (ТекРеквизиты.Ставка/100);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуТовары();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	//Если ЗначениеЗаполнено(Объект.Контрагент) Тогда 
	//	КонтрагентПодключенКСистемеEDI = ЭлектронныйДокументооборотСервер.КонтрагентПодключенКСистемеEDI(Объект.Контрагент);
	//Иначе
		КонтрагентПодключенКСистемеEDI = Ложь;
	//КонецЕсли;	
	КоличествоПустыхСтрок = 0;
	
	Для Каждого СтрокаТовары Из Объект.ТабличнаяЧасть Цикл
		
		Если Объект.ПоступлениеОднойДатой Тогда
			СтрокаТовары.ДатаПоступления = Объект.ДатаПоступления;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Склад) Тогда
			СтрокаТовары.Склад = Объект.Склад;
		КонецЕсли; 
		
		//Если КонтрагентПодключенКСистемеEDI И ЭлектронныйДокументооборотСервер.НоменклатураБезШК(СтрокаТовары.Номенклатура) Тогда			
		//	сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(Объект, "Не заполнен штрихкод у номенклатуры. Обратитесь в ОСТТ.", "Объект.ТабличнаяЧасть", СтрокаТовары.НомерСтроки, "Номенклатура", Отказ);
		//КонецЕсли;
		
		//Если СтрокаТовары.Количество И СтрокаТовары.Цена И СтрокаТовары.Сумма Тогда
		//	КоличествоПустыхСтрок = КоличествоПустыхСтрок + 1;			
		//КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоступлениеОднойДатойПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьНоменклатураПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	
	ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	Если Не ТекДанные = Неопределено Тогда
		УстановитьЗависимыеДанныеВТЧ(ТекДанные);
		РассчитатьСуммуТовары(ТекДанные);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗависимыеДанныеВТЧ(ТекДанные)
	
	//Установим единицу измерения по умолчанию
	//ТекДанные.ЕдиницаИзмерения = ПолучитьЕдИзмНоменклатуры(ТекДанные.Номенклатура);
	//ТекДанные.КоэффициентПересчетаУпаковок = ПолучитьКоэффициентПересчетаУпаковок(ТекДанные.Номенклатура, ТекДанные.ЕдиницаИзмерения);
	
	//РассчитатьКоличество(ТекДанные);
	
	//Установим вид цен и рассчитаем цены
	//Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыЗаказов.ВнутреннееПеремещение") Тогда
	//	Если Объект.Предприятие = Объект.ПредприятиеВн Тогда	
	//		ТекДанные.Цена = РассчитатьЦенуВнутреннегоПеремещения(ТекДанные.Номенклатура, Объект.Предприятие, Объект.Подразделение, Объект.Контрагент, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()));
	//	Иначе
	//		ТекДанные.Цена = сабОперОбщегоНазначения.РассчитатьЦенуВНХ(ТекДанные.Номенклатура, Объект.Предприятие, Объект.Подразделение, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()));
	//	КонецЕсли;	
	//Иначе
		ДанныеЦены = РассчитатьЦенуПоВидуЦен(ТекДанные.ВидЦеныПоставщика, ТекДанные.Номенклатура, Объект.Предприятие, Объект.Подразделение, Объект.Контрагент, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()), Объект.ДатаПоступления, Объект.ВидОперации, Объект.Договор);
		ТекДанные.ВидЦеныПоставщика = ДанныеЦены.ТипЦены;
		ТекДанные.Цена = ДанныеЦены.Цена;
	//КонецЕсли;
	
	//Установим НДС и артикул
	Если ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
		ТекРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.Номенклатура, "СтавкаНДС, Код, ВидСтавкиНДС, ЕдиницаИзмерения");
		ТекДанные.Код = ТекРеквизиты.Код;
		ТекДанные.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвВидовСтавокНДСБУХУУ().Получить(ТекРеквизиты.ВидСтавкиНДС);;
		ТекДанные.ЕдиницаИзмерения = ТекРеквизиты.ЕдиницаИзмерения;
	КонецЕсли;
	
	//Проставим склад исходя из типа номенклатуры
	//Если ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
	//	ТекДанные.Склад = ПолучитьСкладПоТипуНоменклатуры(ТекДанные.Номенклатура)
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьВидЦеныПоставщикаПриИзменении(Элемент)
	
	//Установим вид цен и рассчитаем цены
	ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	
	ТекДанные.Цена = РассчитатьЦенуПоВидуЦен(ТекДанные.ВидЦеныПоставщика, ТекДанные.Номенклатура, Объект.Предприятие, Объект.Подразделение, Объект.Контрагент, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()), Объект.ДатаПоступления, Объект.ВидОперации, Объект.Договор).Цена;
	
	РассчитатьСуммуТовары();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЕдИзмНоменклатуры(Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковкиНоменклатуры.Упаковка
	|ИЗ
	|	РегистрСведений.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|ГДЕ
	|	УпаковкиНоменклатуры.Номенклатура = &Номенклатура
	|	И УпаковкиНоменклатуры.ОсновнаяУпаковка";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Упаковка;		
	КонецЦикла;	
	
	Возврат Номенклатура.ЕдиницаИзмерения;	
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКоэффициентПересчетаУпаковок(Номенклатура, ЕдиницаИзмерения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковкиНоменклатуры.Коэффициент
	|ИЗ
	|	РегистрСведений.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|ГДЕ
	|	УпаковкиНоменклатуры.Номенклатура = &Номенклатура
	|	И УпаковкиНоменклатуры.Упаковка = &Упаковка
	|	И УпаковкиНоменклатуры.ЕдиницаИзмерения = &ЕдиницаИзмерения";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Упаковка", ЕдиницаИзмерения);
	Запрос.УстановитьПараметр("ЕдиницаИзмерения", Номенклатура.ЕдиницаИзмерения);
	
	Выборка = запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Коэффициент;		
	КонецЦикла;
	
	Возврат 1;
	
КонецФункции	

&НаСервереБезКонтекста
Функция РассчитатьЦенуПоВидуЦен(ВидЦены, Номенклатура, Предприятие, Подразделение, Контрагент, Дата, ДатаПоставки, ВидОперации, Договор)

	//РаботаНаДатуПоставки = Ложь;
	//
	//Если ЗначениеЗаполнено(Контрагент) И ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
	//	Если Контрагент.УсловияЦенПоставки = Перечисления.УсловияЦенПоставки.НаДатуПоставки Тогда
	//		РаботаНаДатуПоставки = Истина;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Если РаботаНаДатуПоставки И Не ЗначениеЗаполнено(ДатаПоставки) Тогда
	//	Сообщить("Не указана дата поставки! Цена не может быть заполнена!");
	//	Возврат 0;
	//КонецЕсли;
	//
	//ЭтоЗаказНаВозврат = Ложь;
	//Если ВидОперации = Перечисления.ВидыЗаказов.ВозвратБрака Тогда
	//	ЭтоЗаказНаВозврат = Истина;
	//КонецЕсли;	
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	МаркетинговыеМероприятия.ЦенаПоступления,
	//|	МаркетинговыеМероприятия.Номенклатура,
	//|	МаркетинговыеМероприятия.Предприятие,
	//|	МаркетинговыеМероприятия.Подразделение,
	//|	МаркетинговыеМероприятия.ДатаДокумента
	//|ПОМЕСТИТЬ ВТ_МаркетинговыеМероприятия
	//|ИЗ
	//|	РегистрСведений.МаркетинговыеМероприятия КАК МаркетинговыеМероприятия
	//|ГДЕ
	//|	МаркетинговыеМероприятия.Предприятие = &Предприятие
	//|	И МаркетинговыеМероприятия.Подразделение = &Подразделение
	//|	И МаркетинговыеМероприятия.Номенклатура = &Номенклатура
	//|	И МаркетинговыеМероприятия.ДатаЗаказовНач <= &Период
	//|	И МаркетинговыеМероприятия.ДатаЗаказовКон >= &Период
	//|	И МаркетинговыеМероприятия.ЦенаПоступления <> 0
	//|	И ВЫБОР
	//|			КОГДА &ЭтоЗаказНаВозврат
	//|				ТОГДА ЛОЖЬ
	//|			ИНАЧЕ ИСТИНА
	//|		КОНЕЦ
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТ_МаркетинговыеМероприятия.Номенклатура,
	//|	ВТ_МаркетинговыеМероприятия.Предприятие,
	//|	ВТ_МаркетинговыеМероприятия.Подразделение,
	//|	МАКСИМУМ(ВТ_МаркетинговыеМероприятия.ДатаДокумента) КАК ДатаДокумента
	//|ПОМЕСТИТЬ ВТ_МаксДатаМаркетинговогоМероприятия
	//|ИЗ
	//|	ВТ_МаркетинговыеМероприятия КАК ВТ_МаркетинговыеМероприятия
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ВТ_МаркетинговыеМероприятия.Номенклатура,
	//|	ВТ_МаркетинговыеМероприятия.Предприятие,
	//|	ВТ_МаркетинговыеМероприятия.Подразделение
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТ_МаркетинговыеМероприятия.ЦенаПоступления,
	//|	ВТ_МаркетинговыеМероприятия.Номенклатура,
	//|	ВТ_МаркетинговыеМероприятия.Предприятие,
	//|	ВТ_МаркетинговыеМероприятия.Подразделение
	//|ПОМЕСТИТЬ ВТ_МаркетинговыеМероприятияИтог
	//|ИЗ
	//|	ВТ_МаксДатаМаркетинговогоМероприятия КАК ВТ_МаксДатаМаркетинговогоМероприятия
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаркетинговыеМероприятия КАК ВТ_МаркетинговыеМероприятия
	//|		ПО ВТ_МаксДатаМаркетинговогоМероприятия.Номенклатура = ВТ_МаркетинговыеМероприятия.Номенклатура
	//|			И ВТ_МаксДатаМаркетинговогоМероприятия.Предприятие = ВТ_МаркетинговыеМероприятия.Предприятие
	//|			И ВТ_МаксДатаМаркетинговогоМероприятия.Подразделение = ВТ_МаркетинговыеМероприятия.Подразделение
	//|			И ВТ_МаксДатаМаркетинговогоМероприятия.ДатаДокумента = ВТ_МаркетинговыеМероприятия.ДатаДокумента
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ЕСТЬNULL(ВТ_МаркетинговыеМероприятияИтог.ЦенаПоступления, ЦеныНоменклатурыСрезПоследних.Цена) КАК Цена
	//|ИЗ
	//|	ВТ_МаркетинговыеМероприятияИтог КАК ВТ_МаркетинговыеМероприятияИтог
	//|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	//|				&Период,
	//|				ВидЦены.ЦенаПоставщика
	//|					И ВидЦены.Поставщик = &Контрагент
	//|					И Предприятие = &Предприятие
	//|					И Номенклатура = &Номенклатура
	//|					И ВидЦены = &ВидЦены
	//|					И Подразделение = &Подразделение) КАК ЦеныНоменклатурыСрезПоследних
	//|		ПО ВТ_МаркетинговыеМероприятияИтог.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	//|			И ВТ_МаркетинговыеМероприятияИтог.Предприятие = ЦеныНоменклатурыСрезПоследних.Предприятие
	//|			И ВТ_МаркетинговыеМероприятияИтог.Подразделение = ЦеныНоменклатурыСрезПоследних.Подразделение";
	//Запрос.УстановитьПараметр("Период", ?(РаботаНаДатуПоставки И Не ЭтоЗаказНаВозврат, ДатаПоставки, Дата));
	//Запрос.УстановитьПараметр("Контрагент", Контрагент);
	//Запрос.УстановитьПараметр("Предприятие", Предприятие);
	//Запрос.УстановитьПараметр("Подразделение", Подразделение);
	//Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	//Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	//Запрос.УстановитьПараметр("ЭтоЗаказНаВозврат", ЭтоЗаказНаВозврат);
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	Возврат Выборка.Цена;
	//КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Договор.ТипЦен) Тогда
		Возврат Новый Структура("Цена, ТипЦены", 0, Справочники.ТипыЦенНоменклатуры.ПустаяСсылка());
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.ТипЦен КАК ТипЦен
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Период, Номенклатура = &Номенклатура) КАК ЦеныНоменклатурыСрезПоследних
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦенНоменклатуры.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЦеныНоменклатурыСрезПоследних.ТипЦен = &ТипЦен
	|		КОНЕЦ";
	Запрос.УстановитьПараметр("Период", Дата);
	//Запрос.УстановитьПараметр("Предприятие", Предприятие);
	//Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ТипЦен", Договор.ТипЦен);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Новый Структура("Цена, ТипЦены", Выборка.Цена, Выборка.ТипЦен);
	КонецЦикла;
	
	Возврат Новый Структура("Цена, ТипЦены", 0, Справочники.ТипыЦенНоменклатуры.ПустаяСсылка());
	
КонецФункции

&НаКлиенте
Процедура ТабличнаяЧастьКоличествоУпаковокПриИзменении(Элемент)
		
	РассчитатьКоличество();
	РассчитатьСуммуТовары();	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьКоличество(ТекДанные = Неопределено)
	
	Если ТекДанные = Неопределено Тогда
		ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	КонецЕсли;	
	
	ТекДанные.Количество = ТекДанные.КоличествоУпаковок * ТекДанные.КоэффициентПересчетаУпаковок;
	
	РассчитатьСуммуТовары(ТекДанные);
	
КонецПроцедуры	

&НаКлиенте
Процедура ТабличнаяЧастьЕдиницаИзмеренияПриИзменении(Элемент)

	ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	
	ТекДанные.КоэффициентПересчетаУпаковок = ПолучитьКоэффициентПересчетаУпаковок(ТекДанные.Номенклатура, ТекДанные.ЕдиницаИзмерения);
	
	РассчитатьКоличество(ТекДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = Ложь;

	//ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	//
	//МассивЕдИзмНоменклатуры = ПолучитьМассивВозможныхЕдиницИзмеренияНоменклатуры(ТекДанные.Номенклатура);
	//
	////Элементы.ТабличнаяЧастьЕдиницаИзмерения.СписокВыбора.Очистить();
	//
	//Для Каждого ЭлементВыборкаЕдИзм Из МассивЕдИзмНоменклатуры Цикл
	//	Элементы.ТабличнаяЧастьЕдиницаИзмерения.СписокВыбора.Добавить(ЭлементВыборкаЕдИзм);
	//КонецЦикла;	
			
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивВозможныхЕдиницИзмеренияНоменклатуры(Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковкиНоменклатуры.Упаковка
	|ИЗ
	|	РегистрСведений.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|ГДЕ
	|	УпаковкиНоменклатуры.Номенклатура = &Номенклатура";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	ТаблицаУпаковок = Запрос.Выполнить().Выгрузить();
	ТаблицаУпаковок.Свернуть("Упаковка");
	
	МассивУпаковок = ТаблицаУпаковок.ВыгрузитьКолонку("Упаковка");
	МассивУпаковок.Вставить(0, Номенклатура.ЕдиницаИзмерения);
	
	Возврат МассивУпаковок;
	
КонецФункции	

&НаКлиенте
Процедура ВидЗаказаПриИзменении(Элемент)
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыЗаказов.ВнутреннееПеремещение") Тогда
		Массив = Новый Массив;
		Массив.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
		ТекОписаниеТипов = Новый ОписаниеТипов(Массив);
		
		Элементы.Контрагент.ОграничениеТипа = ТекОписаниеТипов;
		Элементы.Контрагент.Заголовок = "Поставщик (внутр.)";
		
		Элементы.Договор.ОтметкаНезаполненного = Ложь;
		Элементы.Договор.Видимость = Ложь;
		
		Если НЕ Элементы.Найти("ФормаДокументУЧ_ВозвратТоваровПоставщикуСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_ВозвратТоваровПоставщикуСоздатьНаОсновании.Видимость = Ложь;
		КонецЕсли;
		Если НЕ Элементы.Найти("ФормаДокументУЧ_ПоступлениеТоваровСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_ПоступлениеТоваровСоздатьНаОсновании.Видимость = Ложь;
		КонецЕсли;
		Если НЕ Элементы.Найти("ФормаДокументУЧ_ПеремещениеТоваровСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_ПеремещениеТоваровСоздатьНаОсновании.Видимость = Истина;
		КонецЕсли;
		Если НЕ Элементы.Найти("ФормаДокументУЧ_РеализацияСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_РеализацияСоздатьНаОсновании.Видимость = Истина;
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыЗаказов.ПеремещениеМеждуСкладами") Тогда
		Элементы.Контрагент.Видимость = Ложь;
		Элементы.СкладОтправитель.Видимость = Истина;
		Элементы.Договор.Видимость = Ложь;
		Элементы.ДатаПоступления.Заголовок = "Дата перемещения";
	Иначе
		Массив = Новый Массив;
		Массив.Добавить(Тип("СправочникСсылка.Контрагенты"));
		ТекОписаниеТипов = Новый ОписаниеТипов(Массив);
		
		Элементы.Контрагент.ОграничениеТипа = ТекОписаниеТипов;
		Элементы.Контрагент.Заголовок = "Поставщик";
		Элементы.ДатаПоступления.Заголовок = "Дата поступления";
		
		//Элементы.Договор.ОтметкаНезаполненного = Не ЗначениеЗаполнено(Объект.Договор);
		Элементы.Договор.Видимость = Истина;
		
		Если НЕ Элементы.Найти("ФормаДокументУЧ_ВозвратТоваровПоставщикуСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_ВозвратТоваровПоставщикуСоздатьНаОсновании.Видимость = Ложь;
		КонецЕсли;
		Если НЕ Элементы.Найти("ФормаДокументУЧ_ПеремещениеТоваровСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_ПеремещениеТоваровСоздатьНаОсновании.Видимость = Ложь;
		КонецЕсли;
		Если НЕ Элементы.Найти("ФормаДокументУЧ_ПоступлениеТоваровСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_ПоступлениеТоваровСоздатьНаОсновании.Видимость = Истина;
		КонецЕсли;
		Если НЕ Элементы.Найти("ФормаДокументУЧ_РеализацияСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_РеализацияСоздатьНаОсновании.Видимость = Истина;
		КонецЕсли;
		
		//Объект.ПредприятиеВн = ПредопределенноеЗначение("Справочник.Предприятия.ПустаяСсылка");
		//Элементы.ПредприятиеВн.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыЗаказов.ВозвратБрака") Тогда
		Элементы.ДатаПоступления.Заголовок = "Дата возврата";
		
		Элементы.ТабличнаяЧастьЗаполнитьПоАссортименту.Заголовок = "Заполнить по товарам со склада возврата";
		Если НЕ Элементы.Найти("ФормаДокументУЧ_ПоступлениеТоваровСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_ПоступлениеТоваровСоздатьНаОсновании.Видимость = Ложь;
		КонецЕсли;
		Если НЕ Элементы.Найти("ФормаДокументУЧ_ПеремещениеТоваровСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_ПеремещениеТоваровСоздатьНаОсновании.Видимость = Ложь;
		КонецЕсли;
		Если НЕ Элементы.Найти("ФормаДокументУЧ_ВозвратТоваровПоставщикуСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_ВозвратТоваровПоставщикуСоздатьНаОсновании.Видимость = Истина;
		КонецЕсли;
		Если НЕ Элементы.Найти("ФормаДокументУЧ_РеализацияСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_РеализацияСоздатьНаОсновании.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ВидЗаказаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВидЗаказаПриИзмененииНаСервере()
	
	//Если Объект.ВидОперации = Перечисления.ВидыЗаказов.ВнутреннееПеремещение Тогда
	//	НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.ПредприятиеВн");
	//	НовыйМассив = Новый Массив();
	//	НовыйМассив.Добавить(НоваяСвязь);
	//	НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
	//	Элементы.Контрагент.СвязиПараметровВыбора = НовыеСвязи;
	//Иначе
	//	НовыеСвязи = Новый ФиксированныйМассив(Новый Массив);
	//	Элементы.Контрагент.СвязиПараметровВыбора = НовыеСвязи;
	//КонецЕсли;
	
КонецПроцедуры	

#Область ПоискПоШК

&НаКлиенте
Процедура ПодобратьНоменклатуруПоШК(Команда)
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	ИмяТЧ = "ТабличнаяЧасть";
	ИмяРеквизитаНоменклатуры = "Номенклатура";
	ИмяРеквизитаКоличества = "Количество";
	сабОперОбщегоНазначенияНаКлиенте.ОбработатьЗаполнениеПоШтрихкодуНаКлиенте(ЭтаФорма, ИмяТЧ, ИмяРеквизитаНоменклатуры, ИмяРеквизитаКоличества, Штрихкод);	
	ТабличнаяЧастьНоменклатураПриИзменении(Неопределено);
	
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт		
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Статус = ВыбранноеЗначениеСтатуса;
		Модифицированность = Истина;
		УстановитьДоступностьДокумента();
    КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьДокумента()
	
	//РольОСТТДоступна = БюджетныйНаСервере.РольДоступнаСервер("сабСопровождающийТТ");
	
	//ТекДоступность = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.Создан") ИЛИ НЕ ЗначениеЗаполнено(Объект.Статус);
	//БюджетныйНаКлиенте.ФормаТолькоПросмотр(Объект, ЭтаФорма, НЕ ТекДоступность);
	//Элементы.ТабличнаяЧастьКод.ТолькоПросмотр = Истина;//боб
	//
	//Если Не БюджетныйНаСервере.РольАдминаДоступнаСервер() И Не сабОбщегоНазначения.ПолучитьЗначениеСвойства(БюджетныйНаСервере.ПолучитьПользователя(), "Возможность менять цену в заказах (Пользователь)") = Истина Тогда
	//	Элементы.ТабличнаяЧастьВидЦеныПоставщика.ТолькоПросмотр = Истина;
	//	Элементы.ТабличнаяЧастьЦена.ТолькоПросмотр = Истина;
	//	Элементы.ТабличнаяЧастьСумма.ТолькоПросмотр = Истина;
	//	Элементы.ТабличнаяЧастьСтавкаНДС.ТолькоПросмотр = Истина;
	//	Элементы.ТабличнаяЧастьСуммаНДС.ТолькоПросмотр = Истина;
	//	Элементы.ТабличнаяЧастьОбновитьЦену.Видимость = Ложь;
	//КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ВыбранноеЗначениеСтатуса = ВыбранноеЗначение;
	Если НЕ ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.Создан") Тогда
		СтандартнаяОбработка = Ложь;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса",
		ЭтотОбъект);	
		
		ПоказатьВопрос(Оповещение,
		"После изменения статуса заказа изменения станут невозможны. Продолжить?",
		РежимДиалогаВопрос.ДаНет,
		0, // таймаут в секундах
		КодВозвратаДиалога.Да, // (необ.) кнопка по умолчанию
		"Вопрос" // (необ.) заголовок
		);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	КонтрагентПриИзмененииСервер();	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	ПроизводственноеПодразделение = Ложь;
	РеквизитыДоговора = сабОперОбщегоНазначения.ПолучитьДоговорКонтрагентаПоУмолчанию(Объект.Контрагент, ?(ПроизводственноеПодразделение, Неопределено, Объект.Организация));
	Объект.Договор = РеквизитыДоговора.Договор;
	
	//Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
	//	ВнПредприятиеКонтрагента = Объект.Контрагент.ПредприятиеХодлинга;
	//	Если ЗначениеЗаполнено(ВнПредприятиеКонтрагента) Тогда
	//		Если ТипЗнч(ВнПредприятиеКонтрагента) = Тип("СправочникСсылка.Предприятия") Тогда
	//			Объект.ПредприятиеВн = ВнПредприятиеКонтрагента;
	//		Иначе	
	//			Объект.ПредприятиеВн = ВнПредприятиеКонтрагента.Предприятие;
	//		КонецЕсли;	
	//	Иначе
	//		Объект.ПредприятиеВн = Справочники.Предприятия.ПустаяСсылка();
	//	КонецЕсли;
	//КонецЕсли;
	
	//Элементы.ТабличнаяЧастьКоличествоВЗапайках.Видимость = (ЗначениеЗаполнено(Объект.ПредприятиеВн));
	//Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
	//	Объект.Организация = РеквизитыДоговора.Организация;	
	//КонецЕсли;
	
КонецПроцедуры


&НаСервере
Функция ПолучитьСкладПоТипуНоменклатуры(ТекНоменклатура)
	
	ТипНоменклатуры = ТекНоменклатура.ТипНоменклатуры;
	Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Материалы Тогда
		Возврат Справочники.Склады.ПолучитьСкладПоЗначениюДопРеквизита("Склад производства", Объект.Предприятие);
	Иначе
		Возврат Справочники.Склады.ПолучитьСкладПоЗначениюДопРеквизита("Торговый зал", Объект.Предприятие);
	КонецЕсли;	
	
КонецФункции	

&НаСервере
Процедура ЗаполнитьПоАссортиментуНаСервере()

	Объект.ТабличнаяЧасть.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорзинаТорговТовары.Номенклатура,
	|	ТоргиСрезПоследних.ВыведенаИзТоргов КАК ВыведенаИзТоргов
	|ПОМЕСТИТЬ ВТ_Торги
	|ИЗ
	|	Справочник.КорзинаТоргов.Товары КАК КорзинаТорговТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Торги.СрезПоследних(&Период, ) КАК ТоргиСрезПоследних
	|		ПО КорзинаТорговТовары.Ссылка = ТоргиСрезПоследних.Корзина
	|			И КорзинаТорговТовары.Номенклатура = ТоргиСрезПоследних.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаркетинговыеМероприятия.ЦенаПоступления,
	|	МаркетинговыеМероприятия.Номенклатура,
	|	МаркетинговыеМероприятия.Предприятие,
	|	МаркетинговыеМероприятия.Подразделение,
	|	МаркетинговыеМероприятия.ДатаДокумента
	|ПОМЕСТИТЬ ВТ_МаркетинговыеМероприятия
	|ИЗ
	|	РегистрСведений.МаркетинговыеМероприятия КАК МаркетинговыеМероприятия
	|ГДЕ
	|	МаркетинговыеМероприятия.Предприятие = &Предприятие
	|	И МаркетинговыеМероприятия.Подразделение = &Подразделение
	|	И МаркетинговыеМероприятия.ДатаЗаказовНач <= &ПериодЦен
	|	И МаркетинговыеМероприятия.ДатаЗаказовКон >= &ПериодЦен
	|	И МаркетинговыеМероприятия.ЦенаПоступления <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_МаркетинговыеМероприятия.Номенклатура,
	|	ВТ_МаркетинговыеМероприятия.Предприятие,
	|	ВТ_МаркетинговыеМероприятия.Подразделение,
	|	МАКСИМУМ(ВТ_МаркетинговыеМероприятия.ДатаДокумента) КАК ДатаДокумента
	|ПОМЕСТИТЬ ВТ_МаксДатаМаркетинговогоМероприятия
	|ИЗ
	|	ВТ_МаркетинговыеМероприятия КАК ВТ_МаркетинговыеМероприятия
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_МаркетинговыеМероприятия.Номенклатура,
	|	ВТ_МаркетинговыеМероприятия.Предприятие,
	|	ВТ_МаркетинговыеМероприятия.Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_МаркетинговыеМероприятия.ЦенаПоступления,
	|	ВТ_МаркетинговыеМероприятия.Номенклатура,
	|	ВТ_МаркетинговыеМероприятия.Предприятие,
	|	ВТ_МаркетинговыеМероприятия.Подразделение
	|ПОМЕСТИТЬ ВТ_МаркетинговыеМероприятияИтог
	|ИЗ
	|	ВТ_МаксДатаМаркетинговогоМероприятия КАК ВТ_МаксДатаМаркетинговогоМероприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаркетинговыеМероприятия КАК ВТ_МаркетинговыеМероприятия
	|		ПО ВТ_МаксДатаМаркетинговогоМероприятия.Номенклатура = ВТ_МаркетинговыеМероприятия.Номенклатура
	|			И ВТ_МаксДатаМаркетинговогоМероприятия.Предприятие = ВТ_МаркетинговыеМероприятия.Предприятие
	|			И ВТ_МаксДатаМаркетинговогоМероприятия.Подразделение = ВТ_МаркетинговыеМероприятия.Подразделение
	|			И ВТ_МаксДатаМаркетинговогоМероприятия.ДатаДокумента = ВТ_МаркетинговыеМероприятия.ДатаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяБлокировкаНоменклатурыВЗаказах.Предприятие,
	|	ВременнаяБлокировкаНоменклатурыВЗаказах.Подразделение,
	|	ВременнаяБлокировкаНоменклатурыВЗаказах.Номенклатура
	|ПОМЕСТИТЬ ВТ_ЗаблокированныеЗаказы
	|ИЗ
	|	РегистрСведений.ВременнаяБлокировкаНоменклатурыВЗаказах КАК ВременнаяБлокировкаНоменклатурыВЗаказах
	|ГДЕ
	|	ВременнаяБлокировкаНоменклатурыВЗаказах.ДатаНач <= &Период
	|	И ВременнаяБлокировкаНоменклатурыВЗаказах.ДатаКон >= &Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура,
	|	ЕСТЬNULL(ВТ_МаркетинговыеМероприятияИтог.ЦенаПоступления, ЦеныНоменклатурыСрезПоследних.Цена) КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦены,
	|	ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура.Код КАК Код,
	|	ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	РегистрСведений.НоменклатураПоставщика.СрезПоследних(
	|			&Период,
	|			Предприятие = &Предприятие
	|				И Подразделение = &Подразделение) КАК НоменклатураПоставщикаСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ПериодЦен,
	|				Предприятие = &Предприятие
	|					И ВидЦены.ЦенаПоставщика
	|					И ВидЦены.Поставщик = &Контрагент
	|					И Подразделение = &Подразделение) КАК ЦеныНоменклатурыСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаркетинговыеМероприятияИтог КАК ВТ_МаркетинговыеМероприятияИтог
	|			ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = ВТ_МаркетинговыеМероприятияИтог.Номенклатура
	|				И ЦеныНоменклатурыСрезПоследних.Предприятие = ВТ_МаркетинговыеМероприятияИтог.Предприятие
	|				И ЦеныНоменклатурыСрезПоследних.Подразделение = ВТ_МаркетинговыеМероприятияИтог.Подразделение
	|		ПО НоменклатураПоставщикаСрезПоследних.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И НоменклатураПоставщикаСрезПоследних.Предприятие = ЦеныНоменклатурыСрезПоследних.Предприятие
	|			И НоменклатураПоставщикаСрезПоследних.Подразделение = ЦеныНоменклатурыСрезПоследних.Подразделение
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АссортиментнаяМатрица.СрезПоследних(
	|				&Период,
	|				Предприятие = &Предприятие
	|					И Подразделение = &Подразделение) КАК АссортиментнаяМатрицаСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыОбеспеченияПотребности.СрезПоследних(
	|					&Период,
	|					Предприятие = &Предприятие
	|						И Подразделение = &Подразделение) КАК ПараметрыОбеспеченияПотребностиСрезПоследних
	|			ПО АссортиментнаяМатрицаСрезПоследних.Номенклатура = ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура
	|				И АссортиментнаяМатрицаСрезПоследних.Предприятие = ПараметрыОбеспеченияПотребностиСрезПоследних.Предприятие
	|				И АссортиментнаяМатрицаСрезПоследних.Подразделение = ПараметрыОбеспеченияПотребностиСрезПоследних.Подразделение
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Торги КАК ВТ_Торги
	|			ПО АссортиментнаяМатрицаСрезПоследних.Номенклатура = ВТ_Торги.Номенклатура
	|		ПО НоменклатураПоставщикаСрезПоследних.Номенклатура = АссортиментнаяМатрицаСрезПоследних.Номенклатура
	|			И НоменклатураПоставщикаСрезПоследних.Подразделение = АссортиментнаяМатрицаСрезПоследних.Подразделение
	|			И НоменклатураПоставщикаСрезПоследних.Предприятие = АссортиментнаяМатрицаСрезПоследних.Предприятие
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗаблокированныеЗаказы КАК ВТ_ЗаблокированныеЗаказы
	|		ПО НоменклатураПоставщикаСрезПоследних.Предприятие = ВТ_ЗаблокированныеЗаказы.Предприятие
	|			И НоменклатураПоставщикаСрезПоследних.Подразделение = ВТ_ЗаблокированныеЗаказы.Подразделение
	|			И НоменклатураПоставщикаСрезПоследних.Номенклатура = ВТ_ЗаблокированныеЗаказы.Номенклатура
	|ГДЕ
	|	НЕ ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура ЕСТЬ NULL 
	|	И НоменклатураПоставщикаСрезПоследних.Контрагент = &Контрагент
	|	И АссортиментнаяМатрицаСрезПоследних.ВыведенИзАссортимента = ЛОЖЬ
	|	И ЕСТЬNULL(ВТ_Торги.ВыведенаИзТоргов, ЛОЖЬ) = ЛОЖЬ
	|	И ВТ_ЗаблокированныеЗаказы.Номенклатура ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";
	Запрос.УстановитьПараметр("Период", ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()));
	Запрос.УстановитьПараметр("ПериодЦен", ?(Объект.Контрагент.УсловияЦенПоставки = Перечисления.УсловияЦенПоставки.НаДатуПоставки, Объект.ДатаПоступления, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата())));
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("Предприятие", Объект.Предприятие);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаТЧ = Объект.ТабличнаяЧасть.Добавить();
		СтрокаТЧ.Номенклатура = Выборка.Номенклатура;
		СтрокаТЧ.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		СтрокаТЧ.ВидЦеныПоставщика = Выборка.ВидЦены;
		СтрокаТЧ.Цена = Выборка.Цена;
		СтрокаТЧ.СтавкаНДС = Выборка.СтавкаНДС;
		СтрокаТЧ.Склад = ПолучитьСкладПоТипуНоменклатуры(Выборка.Номенклатура);
		СтрокаТЧ.Код = Выборка.Код;
		СтрокаТЧ.КоэффициентПересчетаУпаковок = 1;
	КонецЦикла;	
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьПоОстаткамВозвратаНаСервере()

	Объект.ТабличнаяЧасть.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетныйОстатки.Субконто1 КАК Номенклатура,
	|	УчетныйОстатки.Предприятия КАК Предприятие,
	|	УчетныйОстатки.Подразделение,
	|	ЛОЖЬ КАК ВыведенИзАссортимента,
	|	УчетныйОстатки.КоличествоОстаток
	|ПОМЕСТИТЬ ВТ_ОстаткиПоставщика
	|ИЗ
	|	РегистрБухгалтерии.Учетный.Остатки(
	|			&Период,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Учетный.Товары),
	|			,
	|			Субконто2 = &Склад
	|				И Подразделение = &Подразделение) КАК УчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаркетинговыеМероприятия.ЦенаПоступления,
	|	МаркетинговыеМероприятия.Номенклатура,
	|	МаркетинговыеМероприятия.Предприятие,
	|	МаркетинговыеМероприятия.Подразделение,
	|	МаркетинговыеМероприятия.ДатаДокумента
	|ПОМЕСТИТЬ ВТ_МаркетинговыеМероприятия
	|ИЗ
	|	РегистрСведений.МаркетинговыеМероприятия КАК МаркетинговыеМероприятия
	|ГДЕ
	|	МаркетинговыеМероприятия.Предприятие = &Предприятие
	|	И МаркетинговыеМероприятия.Подразделение = &Подразделение
	|	И МаркетинговыеМероприятия.ДатаЗаказовНач <= &Период
	|	И МаркетинговыеМероприятия.ДатаЗаказовКон >= &Период
	|	И МаркетинговыеМероприятия.ЦенаПоступления <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_МаркетинговыеМероприятия.Номенклатура,
	|	ВТ_МаркетинговыеМероприятия.Предприятие,
	|	ВТ_МаркетинговыеМероприятия.Подразделение,
	|	МАКСИМУМ(ВТ_МаркетинговыеМероприятия.ДатаДокумента) КАК ДатаДокумента
	|ПОМЕСТИТЬ ВТ_МаксДатаМаркетинговогоМероприятия
	|ИЗ
	|	ВТ_МаркетинговыеМероприятия КАК ВТ_МаркетинговыеМероприятия
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_МаркетинговыеМероприятия.Номенклатура,
	|	ВТ_МаркетинговыеМероприятия.Предприятие,
	|	ВТ_МаркетинговыеМероприятия.Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_МаркетинговыеМероприятия.ЦенаПоступления,
	|	ВТ_МаркетинговыеМероприятия.Номенклатура,
	|	ВТ_МаркетинговыеМероприятия.Предприятие,
	|	ВТ_МаркетинговыеМероприятия.Подразделение
	|ПОМЕСТИТЬ ВТ_МаркетинговыеМероприятияИтог
	|ИЗ
	|	ВТ_МаксДатаМаркетинговогоМероприятия КАК ВТ_МаксДатаМаркетинговогоМероприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаркетинговыеМероприятия КАК ВТ_МаркетинговыеМероприятия
	|		ПО ВТ_МаксДатаМаркетинговогоМероприятия.Номенклатура = ВТ_МаркетинговыеМероприятия.Номенклатура
	|			И ВТ_МаксДатаМаркетинговогоМероприятия.Предприятие = ВТ_МаркетинговыеМероприятия.Предприятие
	|			И ВТ_МаксДатаМаркетинговогоМероприятия.Подразделение = ВТ_МаркетинговыеМероприятия.Подразделение
	|			И ВТ_МаксДатаМаркетинговогоМероприятия.ДатаДокумента = ВТ_МаркетинговыеМероприятия.ДатаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура,
	|	ЕСТЬNULL(ВТ_МаркетинговыеМероприятияИтог.ЦенаПоступления, ЦеныНоменклатурыСрезПоследних.Цена) КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦены,
	|	ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура.Код КАК Код,
	|	ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	ВТ_ОстаткиПоставщика.КоличествоОстаток,
	|	ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура.СтавкаНДС.Ставка КАК СтавкаНДССтавка
	|ИЗ
	|	РегистрСведений.НоменклатураПоставщика.СрезПоследних(
	|			&Период,
	|			Предприятие = &Предприятие
	|				И Подразделение = &Подразделение) КАК НоменклатураПоставщикаСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Период,
	|				Предприятие = &Предприятие
	|					И ВидЦены.ЦенаПоставщика
	|					И ВидЦены.Поставщик = &Контрагент
	|					И Подразделение = &Подразделение) КАК ЦеныНоменклатурыСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаркетинговыеМероприятияИтог КАК ВТ_МаркетинговыеМероприятияИтог
	|			ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = ВТ_МаркетинговыеМероприятияИтог.Номенклатура
	|				И ЦеныНоменклатурыСрезПоследних.Предприятие = ВТ_МаркетинговыеМероприятияИтог.Предприятие
	|				И ЦеныНоменклатурыСрезПоследних.Подразделение = ВТ_МаркетинговыеМероприятияИтог.Подразделение
	|		ПО НоменклатураПоставщикаСрезПоследних.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И НоменклатураПоставщикаСрезПоследних.Предприятие = ЦеныНоменклатурыСрезПоследних.Предприятие
	|			И НоменклатураПоставщикаСрезПоследних.Подразделение = ЦеныНоменклатурыСрезПоследних.Подразделение
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиПоставщика КАК ВТ_ОстаткиПоставщика
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыОбеспеченияПотребности.СрезПоследних(
	|					&Период,
	|					Предприятие = &Предприятие
	|						И Подразделение = &Подразделение) КАК ПараметрыОбеспеченияПотребностиСрезПоследних
	|			ПО ВТ_ОстаткиПоставщика.Номенклатура = ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура
	|				И ВТ_ОстаткиПоставщика.Предприятие = ПараметрыОбеспеченияПотребностиСрезПоследних.Предприятие
	|				И ВТ_ОстаткиПоставщика.Подразделение = ПараметрыОбеспеченияПотребностиСрезПоследних.Подразделение
	|		ПО НоменклатураПоставщикаСрезПоследних.Номенклатура = ВТ_ОстаткиПоставщика.Номенклатура
	|			И НоменклатураПоставщикаСрезПоследних.Подразделение = ВТ_ОстаткиПоставщика.Подразделение
	|			И НоменклатураПоставщикаСрезПоследних.Предприятие = ВТ_ОстаткиПоставщика.Предприятие
	|ГДЕ
	|	НЕ ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура ЕСТЬ NULL 
	|	И НоменклатураПоставщикаСрезПоследних.Контрагент = &Контрагент
	|	И ВТ_ОстаткиПоставщика.ВыведенИзАссортимента = ЛОЖЬ
	|	И ЕСТЬNULL(ВТ_ОстаткиПоставщика.КоличествоОстаток, 0) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";
	
	ТекДата = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата());
	Запрос.УстановитьПараметр("Период", ТекДата);
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("Предприятие", Объект.Предприятие);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если НЕ Выборка.Количество() Тогда
		Сообщить("На складе """ + Строка(Объект.Склад) + """ отсутствуют товары к возврату по поставщику """ + Строка(Объект.Контрагент) + """ на дату """ + Строка(ТекДата) + """. Возможно перед заказом необходимо сделать перемещение товара на данный склад.");	
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		СтрокаТЧ = Объект.ТабличнаяЧасть.Добавить();
		СтрокаТЧ.Номенклатура = Выборка.Номенклатура;
		СтрокаТЧ.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		СтрокаТЧ.ВидЦеныПоставщика = Выборка.ВидЦены;
		СтрокаТЧ.Цена = Выборка.Цена;
		СтрокаТЧ.СтавкаНДС = Выборка.СтавкаНДС;
		СтрокаТЧ.Склад = ПолучитьСкладПоТипуНоменклатуры(Выборка.Номенклатура);
		СтрокаТЧ.Код = Выборка.Код;
		СтрокаТЧ.КоэффициентПересчетаУпаковок = 1;
		СтрокаТЧ.Количество = Выборка.КоличествоОстаток;
		СтрокаТЧ.Сумма = СтрокаТЧ.Количество * СтрокаТЧ.Цена; 
		СтрокаТЧ.СуммаНДС = СтрокаТЧ.Сумма / ((100+Выборка.СтавкаНДССтавка)/100) * (Выборка.СтавкаНДССтавка/100);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоАссортименту(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указан поставщик!";
		Сообщение.Поле = "Контрагент";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;	
	
	Если Элементы.ТабличнаяЧастьЗаполнитьПоАссортименту.Заголовок = "Заполнить по товарам со склада возврата" Тогда
		ЗаполнитьПоОстаткамВозвратаНаСервере();
	Иначе
		ЗаполнитьПоАссортиментуНаСервере();
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	//ОрганизацияВДоговоре = БюджетныйНаСервере.ВернутьРеквизиты(Объект.Договор, "Организация");
	//Если ТипЗнч(ОрганизацияВДоговоре) = Тип("Структура") И ЗначениеЗаполнено(ОрганизацияВДоговоре.Организация) Тогда
	//	Объект.Организация = ОрганизацияВДоговоре.Организация;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПустыеСтроки(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВопроса", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, "Строки с пустым количеством будут очищены. Продолжить?",РежимДиалогаВопрос.ДаНет, 60);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		КУдалению = Новый Массив;
		Для каждого ТекСтрока Из Объект.ТабличнаяЧасть Цикл
			Если НЕ ТекСтрока.Количество Тогда
				КУдалению.Добавить(ТекСтрока);	
			КонецЕсли; 
		КонецЦикла; 
		
		Для каждого ТекУд Из КУдалению Цикл
			Объект.ТабличнаяЧасть.Удалить(ТекУд);	
			Модифицированность = Истина;
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры 


&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	//++саб
	сабПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи);
	//--саб
	ЗаполнитьАртикулы();
КонецПроцедуры

&НаСервере
Процедура сабПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ЗаполнитьАртикулы();
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	ПодразделениеПриИзмененииСервер();
КонецПроцедуры

&НаСервере
Процедура ПодразделениеПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		РеквизитыПодразделения = БюджетныйНаСервере.ВернутьРеквизиты(Объект.Подразделение, "Склад, Организация");
		
		Если Объект.ВидОперации = Перечисления.ВидыЗаказов.ВозвратБрака Тогда
			Объект.Склад = сабОперОбщегоНазначения.ПолучитьСкладПоДопСвойству(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Склад возврата (Склады)", Истина), Объект.Предприятие);	
			Если ЗначениеЗаполнено(Объект.Склад) Тогда
				Элементы.Склад.Доступность = Ложь;
			Иначе
				Объект.Склад = РеквизитыПодразделения.Склад;
			КонецЕсли;
		Иначе
			Объект.Склад = РеквизитыПодразделения.Склад;
		КонецЕсли;
		
		Объект.Организация = РеквизитыПодразделения.Организация;
		КонтрагентПриИзмененииСервер();
	КонецЕсли; 
	
	
КонецПроцедуры



&НаКлиенте
Процедура ТабличнаяЧастьСтавкаНДСПриИзменении(Элемент)
	РассчитатьСуммуТовары();
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьЦену(Команда)
	
	Для Каждого ТекДанные Из Объект.ТабличнаяЧасть Цикл
		УстановитьЗависимыеДанныеВТЧ(ТекДанные);
		РассчитатьСуммуТовары(ТекДанные);
	КонецЦикла;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьЦенуВнутреннегоПеремещения(Номенклатура, Предприятие, Подразделение, ПодразделениеПолучатель, Дата)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Период,
	|			ВидЦены.ЦенаПродажи
	|				И Предприятие = &Предприятие
	|				И Номенклатура = &Номенклатура
	|				И Подразделение = &Подразделение) КАК ЦеныНоменклатурыСрезПоследних";
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат ?(Подразделение.Организация = ПодразделениеПолучатель.Организация, Выборка.Цена, Выборка.Цена/1.1);
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

//К удалению: перенесено в общий модуль
&НаСервереБезКонтекста
Функция РассчитатьЦенуВНХ(Номенклатура, Предприятие, Подразделение, Дата)
	
	Если Номенклатура.Счет10 = ПланыСчетов.Учетный.Счет43() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&Период,
		|			Предприятие = &Предприятие
		|				И Подразделение = &Подразделение
		|				И Номенклатура = &Номенклатура
		|				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних";
		Запрос.УстановитьПараметр("Период", Дата);
		Запрос.УстановитьПараметр("Предприятие", Предприятие);
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("ВидЦены", Справочники.ВидыЦен.НайтиПоНаименованию("Производство ВН", Истина));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Цена;
		КонецЦикла;
		
		Возврат 0;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Цена
		|ИЗ
		|	РегистрСведений.НоменклатураПоставщика.СрезПоследних(
		|			&Период,
		|			Предприятие = &Предприятие
		|				И Подразделение = &Подразделение
		|				И Номенклатура = &Номенклатура) КАК НоменклатураПоставщикаСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				&Период,
		|				Предприятие = &Предприятие
		|					И Подразделение = &Подразделение
		|					И Номенклатура = &Номенклатура
		|					И ВидЦены.ЦенаПоставщика) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО НоменклатураПоставщикаСрезПоследних.Предприятие = ЦеныНоменклатурыСрезПоследних.Предприятие
		|			И НоменклатураПоставщикаСрезПоследних.Подразделение = ЦеныНоменклатурыСрезПоследних.Подразделение
		|			И НоменклатураПоставщикаСрезПоследних.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И НоменклатураПоставщикаСрезПоследних.Контрагент = ЦеныНоменклатурыСрезПоследних.ВидЦены.Поставщик";
		Запрос.УстановитьПараметр("Период", Дата);
		Запрос.УстановитьПараметр("Предприятие", Предприятие);
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Цена;
		КонецЦикла;
		
		Возврат 0;
	КонецЕсли;	
	
КонецФункции	

&НаСервере
Процедура ПереопределитьСвязиПараметровВыбора()
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Контрагент"));
	НовыйМассив.Добавить(Новый СвязьПараметраВыбора("Отбор.Предприятие", "Объект.Предприятие"));
	Если Не Объект.Подразделение.ПроизводственноеПодразделение Тогда
		НовыйМассив.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));
	КонецЕсли;		
	
	НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
	
	Элементы.Договор.СвязиПараметровВыбора = НовыеСвязи;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПереопределитьСвязиПараметровВыбора();	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзExcel(Команда)
	
	ФормаЗагрузки = ПолучитьФорму("ОбщаяФорма.ФормаЗагрузкиИзExcel", Новый Структура("ВидЗагрузки", "ЗагрузкаВТЧТовары"));
	
	ПутьКФайлу = ФормаЗагрузки.ОткрытьМодально();
	
	Если ЗначениеЗаполнено(ПутьКФайлу) Тогда
		СтруктураВозврата = ФормаЗагрузки.ПолучитьДанныеПоЗагрузке(ПутьКФайлу);
		Для Каждого ЭлементСтруктурыВозврата Из СтруктураВозврата Цикл
			ТекДанные = Объект.ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(ТекДанные, ЭлементСтруктурыВозврата.Значение);
			УстановитьЗависимыеДанныеВТЧ(ТекДанные);
			РассчитатьСуммуТовары(ТекДанные);
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры
	
