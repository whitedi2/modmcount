

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	//КонецЕсли;
	
	//++саб
	сабПриЧтенииНаСервере(ТекущийОбъект);
	//--саб
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, Новый Структура("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты") );
	//КонецЕсли;
		//++саб
	сабПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	//--саб  
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМаршрутныйЛист()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда	
		МаршрутныйЛист = Документы.сабМаршрутныйЛист.ПолучитьМаршрутныйЛистПоЗаказу(Объект.Ссылка);			
	КонецЕсли;
	
	Элементы.МаршрутныйЛист.Видимость = ЗначениеЗаполнено(МаршрутныйЛист);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	//КонецЕсли;
	
	//++саб
	сабПриОткрытии(Отказ);
	//--саб
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	Если МодульУправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
	//		ОбновитьЭлементыДополнительныхРеквизитов();
	//		МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	//	КонецЕсли;
	//КонецЕсли;
	
	//++саб
	сабОбработкаОповещения(ИмяСобытия, Параметр, Источник);
	//--саб
	
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	//КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	МодульУправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
	//КонецЕсли;
	
КонецПроцедуры


// СтандартныеПодсистемы.КонтактнаяИнформация

// Поддержка дополнительных реквизитов.

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	//КонецЕсли;
	
КонецПроцедуры




// Конец СтандартныеПодсистемы.КонтактнаяИнформация


&НаКлиенте
Процедура сабПриОткрытии(Отказ)
				
	ФлагВалютыПриИзменении("");
	
	УстановитьВидимость();
	
	ВидЗаказаПриИзменении(Неопределено);
	
	//УстановитьДоступностьДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура сабОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "Запись_ЭлектронноеПисьмоИсходящее" Тогда
		Если Параметр.Свойство("Предмет") Тогда
			ТекСтатусПисьма = сабОперОбщегоНазначения.ПроверитьОтправкуПисьмаПоПредмету(Параметр.Предмет);
			Если НЕ ТекСтатусПисьма = Неопределено Тогда
				Если Не ЗначениеЗаполнено(Объект.Статус) ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.Создан") Тогда
					Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.Отправлен");
					Записать();
					сабПриСозданииНаСервере(Ложь, Истина);
				КонецЕсли;			
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ЗаказОбработан" Тогда
		ПриСозданииНаСервере(Ложь, Истина);
		ПриОткрытии(Ложь);
	КонецЕсли;
	Если ИмяСобытия = "ОповеститьРегистрОбработанных" Тогда
		ЭтаФорма.Прочитать();
		сабПриСозданииНаСервере(Ложь, Истина);
	КонецЕсли;
КонецПроцедуры
 

&НаКлиенте
Процедура УстановитьВидимость()
				
	Элементы.ДатаПоступления.Видимость = Объект.ПоступлениеОднойДатой;
	Элементы.ТабличнаяЧастьДатаПоступления.Видимость = (Не Объект.ПоступлениеОднойДатой);
	Элементы.ТабличнаяЧастьКоличествоВЗапайках.Видимость = (ЗначениеЗаполнено(Объект.ПредприятиеВн));
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьКоличествоПриИзменении(Элемент)
	
	РассчитатьКоличество();
	РассчитатьСуммуТовары();
	ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	Если АльтернативнаяФорма Тогда
		 ЗаполнитьПредставлениеУпаковок(ТекДанные)
    КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьЦенаПриИзменении(Элемент)
	РассчитатьСуммуТовары();
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьДоставкаПриИзменении(Элемент)
	Если Элементы.ТабличнаяЧасть.ТекущиеДанные.Доставка Тогда
		Элементы.ТабличнаяЧасть.ТекущиеДанные.СуммаДоставки = Элементы.ТабличнаяЧасть.ТекущиеДанные.Количество * Элементы.ТабличнаяЧасть.ТекущиеДанные.Доставка;
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьСуммаПриИзменении(Элемент)
	ТекКоличество = Элементы.ТабличнаяЧасть.ТекущиеДанные.Количество;
	Элементы.ТабличнаяЧасть.ТекущиеДанные.Цена = ?(ТекКоличество <> 0, Элементы.ТабличнаяЧасть.ТекущиеДанные.Сумма / ТекКоличество, 0);
	РассчитатьСуммуТовары();
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьСуммаДоставкиПриИзменении(Элемент)
	ТекКоличество = Элементы.ТабличнаяЧасть.ТекущиеДанные.Количество;
	Элементы.ТабличнаяЧасть.ТекущиеДанные.Доставка = ?(ТекКоличество <> 0, Элементы.ТабличнаяЧасть.ТекущиеДанные.СуммаДоставки / ТекКоличество, 0);
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеПриИзменении(Элемент)
	сабОбщегоНазначенияКлиентСервер.СкрытьПодразделения(ЭтаФорма);
	//УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("сабУчетПоПодразделениям", Объект.Предприятие));
КонецПроцедуры

&НаКлиенте
Процедура ФлагВалютыПриИзменении(Элемент)
	//Элементы.ГруппаВалюты.Видимость = Объект.ФлагВалюты;
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	Объект.Курс = БюджетныйНаСервере.ТекущийКурс(Объект.Валюта,Объект.Дата,Объект.Предприятие);
КонецПроцедуры

&НаКлиенте
Процедура РеализацияВидДоставкиПриИзменении(Элемент)
	
	Если Элементы.ТабличнаяЧасть.ТекущиеДанные.ВидДоставки = "Авто" Тогда
		Элементы.ТабличнаяЧасть.ТекущиеДанные.Статья = ПредопределенноеЗначение("Справочник.СтатьиЗатрат.ТранспортныеАвто");
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура сабПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АдресВХДляСозданияИзПриемки") Тогда
		Если ЭтоАдресВременногоХранилища(Параметры.АдресВХДляСозданияИзПриемки) Тогда
			 ДокументОбъектДляЧтения = ПолучитьИзВременногоХранилища(Параметры.АдресВХДляСозданияИзПриемки).ДокументОбъектДляЧтения;
			 ЗначениеВДанныеФормы(ДокументОбъектДляЧтения,Объект);
		КонецЕсли;
	КонецЕсли;

	АльтернативнаяФорма = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("АльтернативнаяФормаЗаказов");

	БюджетныйНаСервере.ДействияПриСозданииФормыДокумента(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ПоступлениеОднойДатой = Истина;
		Объект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		Объект.УчитыватьНДС = Истина;
		Объект.ЦенаВключаетНДС = Истина;
		ПодразделениеПриИзмененииСервер();
		Объект.Дата = ТекущаяДата();
		Если Параметры.Свойство("ЗначениеКопирования") Тогда
			Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда 
				Объект.ДатаПоступления = КонецДня(ТекущаяДата()) + 1*24*60*60;
				//Объект.ДатаДоставки = НачалоДня(ТекущаяДата() + (1*24*60*60)) + (Объект.ПодразделениеКонтрагента.ДатаДоставки - НачалоДня(Объект.ПодразделениеКонтрагента.ДатаДоставки));
			Иначе
				Объект.ДатаПоступления = КонецДня(ТекущаяДата()) + 1*24*60*60;
				Объект.ДатаДоставки = КонецДня(ТекущаяДата()) + 1*24*60*60;
			КонецЕсли;
		Иначе
			Объект.ДатаПоступления = КонецДня(ТекущаяДата()) + 1*24*60*60;
			Объект.ДатаДоставки = КонецДня(ТекущаяДата()) + 1*24*60*60;
		КонецЕсли;
		//Объект.ДатаПоступления = КонецДня(ТекущаяДата()) + 1*24*60*60; 
		//Объект.ДатаДоставки = КонецДня(ТекущаяДата()) + 1*24*60*60;

	Иначе
		//Если Объект.Склад = сабОперОбщегоНазначения.ПолучитьСкладПоДопСвойству(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Склад возврата (Склады)", Истина), Объект.Предприятие) Тогда
		//	Элементы.Склад.Доступность = Ложь;
		//КонецЕсли; 
		
		УстановитьДоступностьДокумента();
		
	КонецЕсли;
	
	Элементы.Договор.АвтоОтметкаНезаполненного = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ПроверятьЗаполнениеДоговоровВДокументах", Истина).Значение;
	
	//заполнить артикулы и ед.изм
	ЗаполнитьАртикулы();

	ЗаполнитьМаршрутныйЛист();
	ОрганизацияПриИзмененииСервер(); 
	
	//Получение документов для которых заказ является основанием
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	ПоступлениеТоваровУслуг.Заказ = &Заказ
		|	И НЕ ПоступлениеТоваровУслуг.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УЧ_ПоступлениеТоваров.Ссылка
		|ИЗ
		|	Документ.УЧ_ПоступлениеТоваров КАК УЧ_ПоступлениеТоваров
		|ГДЕ
		|	УЧ_ПоступлениеТоваров.ДокОснование = &Заказ
		|	И НЕ УЧ_ПоступлениеТоваров.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказНаПеремещение.Ссылка
		|ИЗ
		|	Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
		|ГДЕ
		|	ЗаказНаПеремещение.ДокОснование = &Заказ
		|	И НЕ ЗаказНаПеремещение.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Д_ЗаявкаНаФинансирование.Ссылка
		|ИЗ
		|	Документ.Д_ЗаявкаНаФинансирование КАК Д_ЗаявкаНаФинансирование
		|ГДЕ
		|	Д_ЗаявкаНаФинансирование.ДокОснование = &Заказ
		|	И НЕ Д_ЗаявкаНаФинансирование.ПометкаУдаления";  
		Запрос.УстановитьПараметр("Заказ", Объект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Количество() = 1 Тогда
				Выборка.Следующий();
				ОснованиеДляДокумента = Выборка.Ссылка;	
			Иначе
				СписокДокументовВведенныхНаОсновании = Новый СписокЗначений; 
				Пока Выборка.Следующий() Цикл
					СписокДокументовВведенныхНаОсновании.Добавить(Выборка.Ссылка);
				КонецЦикла;
				ОснованиеДляДокументаСписок = СписокДокументовВведенныхНаОсновании;
				ОснованиеДляДокумента = "Несколько документов >>>";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ТабличнаяЧастьКоличествоВУпаковке.Видимость = Не АльтернативнаяФорма; 
	Элементы.ТабличнаяЧастьКоличествоВУпаковкеПредставление.Видимость = АльтернативнаяФорма;
	Элементы.ТабличнаяЧастьКоличествоУпаковок.Видимость = Не АльтернативнаяФорма;
	Элементы.ТабличнаяЧастьКоличествоУпаковокПредставление.Видимость = АльтернативнаяФорма;
	Элементы.ТабличнаяЧастьКоличество.ТолькоПросмотр = Не АльтернативнаяФорма;
	Элементы.ТабличнаяЧастьГруппаЕдиницаИзмерения.ОтображатьВШапке = АльтернативнаяФорма;
    Элементы.ТабличнаяЧастьЕдиницаИзмерения.ОтображатьВШапке = Не АльтернативнаяФорма;
	
	Если АльтернативнаяФорма Тогда 
		Элементы.ТабличнаяЧастьКоличество.Заголовок = "Количество";
		Для каждого СтрокаТовары Из Объект.ТабличнаяЧасть Цикл
			ЗаполнитьПредставлениеУпаковок(СтрокаТовары);
		КонецЦикла;
	КонецЕсли;
	//Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 	
	//	Если Параметры.Свойство("ЗначениеКопирования") Тогда
	//		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда 
	//			Объект.ДатаПоступления = КонецДня(ТекущаяДата()) + 1*24*60*60;
	//			//Объект.ДатаДоставки = НачалоДня(ТекущаяДата() + (1*24*60*60)) + (Объект.ПодразделениеКонтрагента.ДатаДоставки - НачалоДня(Объект.ПодразделениеКонтрагента.ДатаДоставки));
	//		Иначе
	//			Объект.ДатаПоступления = КонецДня(ТекущаяДата()) + 1*24*60*60;
	//			Объект.ДатаДоставки = КонецДня(ТекущаяДата()) + 1*24*60*60;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАртикулы()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТЧТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураСпр.Ссылка КАК Номенкклатура,
	|	НоменклатураСпр.ЕдиницаИзмерения КАК ОсновнаяЕдиница,
	|	НоменклатураСпр.Наименование КАК Наименование,
	|	НоменклатураСпр.Код КАК Код,
	|	ТЧТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТЧТовары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ НомЕд
	|ИЗ
	|	Справочник.Номенклатура КАК НоменклатураСпр
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТЧТовары КАК ТЧТовары
	|		ПО НоменклатураСпр.Ссылка = ТЧТовары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(УпаковкиНоменклатуры.Коэффициент, 1) КАК Коэффициент,
	|	НомЕд.Код КАК Код,
	|	НомЕд.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.Коэффициент, 1) КАК КоличествоВУпаковке
	|ИЗ
	|	НомЕд КАК НомЕд
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|		ПО НомЕд.Номенкклатура = УпаковкиНоменклатуры.Номенклатура
	|			И НомЕд.ОсновнаяЕдиница = УпаковкиНоменклатуры.ЕдиницаИзмерения
	|			И НомЕд.ЕдиницаИзмерения = УпаковкиНоменклатуры.Упаковка";
	
	
	
	ТЧ = Объект.ТабличнаяЧасть.Выгрузить(,"Номенклатура, ЕдиницаИзмерения, НомерСтроки");
	Запрос.УстановитьПараметр("Товары", ТЧ);
	
	ТаблицаУпаковок = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЧ Из Объект.ТабличнаяЧасть Цикл
		НайденныеСтрокиУпаковок = ТаблицаУпаковок.НайтиСтроки(Новый Структура("НомерСтроки", СтрокаТЧ.НомерСтроки));
		Если НайденныеСтрокиУпаковок.Количество() Тогда
			СтрокаТЧ.КоэффициентПересчетаУпаковок = НайденныеСтрокиУпаковок[0].Коэффициент;
			СтрокаТЧ.Код = НайденныеСтрокиУпаковок[0].Код;
			СтрокаТЧ.КоличествоВУпаковке = НайденныеСтрокиУпаковок[0].КоличествоВУпаковке;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
 

&НаСервере
Процедура сабПриЧтенииНаСервере(ТекущийОбъект)
	сабОбщегоНазначения.ОтобразитьСостояниеДокумента(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	сабОбщегоНазначения.ОтобразитьСостояниеДокумента(ЭтаФорма, ТекущийОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуТовары(ТекДанные = Неопределено)
	
	Если ТекДанные = Неопределено Тогда
		ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	КонецЕсли;	
	
	Если Не ТекДанные = Неопределено Тогда
		ТекДанные.Сумма = ТекДанные.Количество * ТекДанные.Цена;
		
		//лишний запрос делаем
		ТекРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.СтавкаНДС, "Ставка");
		Если НЕ ТекРеквизиты = Неопределено Тогда
			ТекДанные.СуммаНДС = ТекДанные.Сумма / ((100+ТекРеквизиты.Ставка)/100) * (ТекРеквизиты.Ставка/100);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуТовары();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	//Если ЗначениеЗаполнено(Объект.Контрагент) Тогда 
	//	КонтрагентПодключенКСистемеEDI = ЭлектронныйДокументооборотСервер.КонтрагентПодключенКСистемеEDI(Объект.Контрагент);
	//Иначе
		КонтрагентПодключенКСистемеEDI = Ложь;
	//КонецЕсли;	
	КоличествоПустыхСтрок = 0;
	
	Для Каждого СтрокаТовары Из Объект.ТабличнаяЧасть Цикл
		
		Если Объект.ПоступлениеОднойДатой Тогда
			СтрокаТовары.ДатаПоступления = Объект.ДатаПоступления;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Склад) Тогда
			СтрокаТовары.Склад = Объект.Склад;
		КонецЕсли; 
		
		//Если КонтрагентПодключенКСистемеEDI И ЭлектронныйДокументооборотСервер.НоменклатураБезШК(СтрокаТовары.Номенклатура) Тогда			
		//	сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(Объект, "Не заполнен штрихкод у номенклатуры. Обратитесь в ОСТТ.", "Объект.ТабличнаяЧасть", СтрокаТовары.НомерСтроки, "Номенклатура", Отказ);
		//КонецЕсли;
		
		//Если СтрокаТовары.Количество И СтрокаТовары.Цена И СтрокаТовары.Сумма Тогда
		//	КоличествоПустыхСтрок = КоличествоПустыхСтрок + 1;			
		//КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоступлениеОднойДатойПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьНоменклатураПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	Если Не ТекДанные = Неопределено Тогда
		УстановитьЗависимыеДанныеВТЧ(ТекДанные);
		РассчитатьСуммуТовары(ТекДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗависимыеДанныеВТЧ(ТекДанные)
	
	//Установим единицу измерения по умолчанию
	Если АльтернативнаяФорма Тогда
		Если ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
			ТекДанные.ЕдиницаИзмерения = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.Номенклатура, "ЕдиницаИзмерения").ЕдиницаИзмерения; 
		КонецЕсли;
	Иначе
		ТекДанные.ЕдиницаИзмерения = ПолучитьЕдИзмНоменклатуры(ТекДанные.Номенклатура);
	КонецЕсли;
	МассивЕдИзмНоменклатуры = ПолучитьМассивВозможныхЕдиницИзмеренияНоменклатуры(ТекДанные.Номенклатура);
	
	Элементы.ТабличнаяЧастьЕдиницаИзмерения.СписокВыбора.Очистить();
	
	Для Каждого ЭлементВыборкаЕдИзм Из МассивЕдИзмНоменклатуры Цикл
		Элементы.ТабличнаяЧастьЕдиницаИзмерения.СписокВыбора.Добавить(ЭлементВыборкаЕдИзм);
	КонецЦикла;
	Если АльтернативнаяФорма Тогда 
		ЗаполнитьПредставлениеУпаковок(ТекДанные);	
	Иначе
		ТекДанные.КоэффициентПересчетаУпаковок = ПолучитьКоэффициентПересчетаУпаковок(ТекДанные.Номенклатура, ТекДанные.ЕдиницаИзмерения);
	КонецЕсли;
	//ТекДанные.КоэффициентПересчетаУпаковок = ПолучитьКоэффициентПересчетаУпаковок(ТекДанные.Номенклатура, ТекДанные.ЕдиницаИзмерения);
		
	РассчитатьКоличество(ТекДанные);
	
	//Установим вид цен и рассчитаем цены
	//Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыЗаказов.ВнутреннееПеремещение") Тогда
	//	Если Объект.Предприятие = Объект.ПредприятиеВн Тогда	
	//		ТекДанные.Цена = РассчитатьЦенуВнутреннегоПеремещения(ТекДанные.Номенклатура, Объект.Предприятие, Объект.Подразделение, Объект.Контрагент, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()));
	//	Иначе
	//		ТекДанные.Цена = сабОперОбщегоНазначения.РассчитатьЦенуВНХ(ТекДанные.Номенклатура, Объект.Предприятие, Объект.Подразделение, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()));
	//	КонецЕсли;	
	//Иначе
		ДанныеЦены = РассчитатьЦенуПоВидуЦен(ТекДанные.ВидЦеныПоставщика, ТекДанные.Номенклатура, Объект.Предприятие, Объект.Подразделение, Объект.Контрагент, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()), Объект.ДатаПоступления, Объект.ВидОперации, Объект.Договор);
		ТекДанные.ВидЦеныПоставщика = ДанныеЦены.ТипЦены;
		ТекДанные.Цена = ДанныеЦены.Цена;
	//КонецЕсли;
	
	//Установим НДС и артикул
	Если ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
		ТекРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.Номенклатура, "СтавкаНДС, Код, ВидСтавкиНДС, ЕдиницаИзмерения");
		ТекДанные.Код = ТекРеквизиты.Код;
		ТекДанные.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвВидовСтавокНДСБУХУУ().Получить(ТекРеквизиты.ВидСтавкиНДС);;
		ТекДанные.ЕдиницаИзмерения = ТекРеквизиты.ЕдиницаИзмерения;
	КонецЕсли;
	
	//Проставим склад исходя из типа номенклатуры
	//Если ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
	//	ТекДанные.Склад = ПолучитьСкладПоТипуНоменклатуры(ТекДанные.Номенклатура)
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьВидЦеныПоставщикаПриИзменении(Элемент)
	
	//Установим вид цен и рассчитаем цены
	ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	
	ТекДанные.Цена = РассчитатьЦенуПоВидуЦен(ТекДанные.ВидЦеныПоставщика, ТекДанные.Номенклатура, Объект.Предприятие, Объект.Подразделение, Объект.Контрагент, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()), Объект.ДатаПоступления, Объект.ВидОперации, Объект.Договор).Цена;
	
	РассчитатьСуммуТовары();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЕдИзмНоменклатуры(Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковкиНоменклатуры.Упаковка
	|ИЗ
	|	РегистрСведений.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|ГДЕ
	|	УпаковкиНоменклатуры.Номенклатура = &Номенклатура
	|	И УпаковкиНоменклатуры.ОсновнаяУпаковка";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Упаковка;		
	КонецЦикла;	
	
	Возврат Номенклатура.ЕдиницаИзмерения;	
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКоэффициентПересчетаУпаковок(Номенклатура, ЕдиницаИзмерения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковкиНоменклатуры.Коэффициент
	|ИЗ
	|	РегистрСведений.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|ГДЕ
	|	УпаковкиНоменклатуры.Номенклатура = &Номенклатура
	|	И УпаковкиНоменклатуры.Упаковка = &Упаковка
	|	И УпаковкиНоменклатуры.ЕдиницаИзмерения = &ЕдиницаИзмерения";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Упаковка", ЕдиницаИзмерения);
	Запрос.УстановитьПараметр("ЕдиницаИзмерения", Номенклатура.ЕдиницаИзмерения);
	
	Выборка = запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Коэффициент;		
	КонецЦикла;
	
	Возврат 1;
	
КонецФункции	

&НаСервереБезКонтекста
Функция РассчитатьЦенуПоВидуЦен(ВидЦены, Номенклатура, Предприятие, Подразделение, Контрагент, Дата, ДатаПоставки, ВидОперации, Договор)

	//РаботаНаДатуПоставки = Ложь;
	//
	//Если ЗначениеЗаполнено(Контрагент) И ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
	//	Если Контрагент.УсловияЦенПоставки = Перечисления.УсловияЦенПоставки.НаДатуПоставки Тогда
	//		РаботаНаДатуПоставки = Истина;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Если РаботаНаДатуПоставки И Не ЗначениеЗаполнено(ДатаПоставки) Тогда
	//	Сообщить("Не указана дата поставки! Цена не может быть заполнена!");
	//	Возврат 0;
	//КонецЕсли;
	//
	//ЭтоЗаказНаВозврат = Ложь;
	//Если ВидОперации = Перечисления.ВидыЗаказов.ВозвратБрака Тогда
	//	ЭтоЗаказНаВозврат = Истина;
	//КонецЕсли;	
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	МаркетинговыеМероприятия.ЦенаПоступления,
	//|	МаркетинговыеМероприятия.Номенклатура,
	//|	МаркетинговыеМероприятия.Предприятие,
	//|	МаркетинговыеМероприятия.Подразделение,
	//|	МаркетинговыеМероприятия.ДатаДокумента
	//|ПОМЕСТИТЬ ВТ_МаркетинговыеМероприятия
	//|ИЗ
	//|	РегистрСведений.МаркетинговыеМероприятия КАК МаркетинговыеМероприятия
	//|ГДЕ
	//|	МаркетинговыеМероприятия.Предприятие = &Предприятие
	//|	И МаркетинговыеМероприятия.Подразделение = &Подразделение
	//|	И МаркетинговыеМероприятия.Номенклатура = &Номенклатура
	//|	И МаркетинговыеМероприятия.ДатаЗаказовНач <= &Период
	//|	И МаркетинговыеМероприятия.ДатаЗаказовКон >= &Период
	//|	И МаркетинговыеМероприятия.ЦенаПоступления <> 0
	//|	И ВЫБОР
	//|			КОГДА &ЭтоЗаказНаВозврат
	//|				ТОГДА ЛОЖЬ
	//|			ИНАЧЕ ИСТИНА
	//|		КОНЕЦ
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТ_МаркетинговыеМероприятия.Номенклатура,
	//|	ВТ_МаркетинговыеМероприятия.Предприятие,
	//|	ВТ_МаркетинговыеМероприятия.Подразделение,
	//|	МАКСИМУМ(ВТ_МаркетинговыеМероприятия.ДатаДокумента) КАК ДатаДокумента
	//|ПОМЕСТИТЬ ВТ_МаксДатаМаркетинговогоМероприятия
	//|ИЗ
	//|	ВТ_МаркетинговыеМероприятия КАК ВТ_МаркетинговыеМероприятия
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ВТ_МаркетинговыеМероприятия.Номенклатура,
	//|	ВТ_МаркетинговыеМероприятия.Предприятие,
	//|	ВТ_МаркетинговыеМероприятия.Подразделение
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТ_МаркетинговыеМероприятия.ЦенаПоступления,
	//|	ВТ_МаркетинговыеМероприятия.Номенклатура,
	//|	ВТ_МаркетинговыеМероприятия.Предприятие,
	//|	ВТ_МаркетинговыеМероприятия.Подразделение
	//|ПОМЕСТИТЬ ВТ_МаркетинговыеМероприятияИтог
	//|ИЗ
	//|	ВТ_МаксДатаМаркетинговогоМероприятия КАК ВТ_МаксДатаМаркетинговогоМероприятия
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаркетинговыеМероприятия КАК ВТ_МаркетинговыеМероприятия
	//|		ПО ВТ_МаксДатаМаркетинговогоМероприятия.Номенклатура = ВТ_МаркетинговыеМероприятия.Номенклатура
	//|			И ВТ_МаксДатаМаркетинговогоМероприятия.Предприятие = ВТ_МаркетинговыеМероприятия.Предприятие
	//|			И ВТ_МаксДатаМаркетинговогоМероприятия.Подразделение = ВТ_МаркетинговыеМероприятия.Подразделение
	//|			И ВТ_МаксДатаМаркетинговогоМероприятия.ДатаДокумента = ВТ_МаркетинговыеМероприятия.ДатаДокумента
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ЕСТЬNULL(ВТ_МаркетинговыеМероприятияИтог.ЦенаПоступления, ЦеныНоменклатурыСрезПоследних.Цена) КАК Цена
	//|ИЗ
	//|	ВТ_МаркетинговыеМероприятияИтог КАК ВТ_МаркетинговыеМероприятияИтог
	//|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	//|				&Период,
	//|				ВидЦены.ЦенаПоставщика
	//|					И ВидЦены.Поставщик = &Контрагент
	//|					И Предприятие = &Предприятие
	//|					И Номенклатура = &Номенклатура
	//|					И ВидЦены = &ВидЦены
	//|					И Подразделение = &Подразделение) КАК ЦеныНоменклатурыСрезПоследних
	//|		ПО ВТ_МаркетинговыеМероприятияИтог.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	//|			И ВТ_МаркетинговыеМероприятияИтог.Предприятие = ЦеныНоменклатурыСрезПоследних.Предприятие
	//|			И ВТ_МаркетинговыеМероприятияИтог.Подразделение = ЦеныНоменклатурыСрезПоследних.Подразделение";
	//Запрос.УстановитьПараметр("Период", ?(РаботаНаДатуПоставки И Не ЭтоЗаказНаВозврат, ДатаПоставки, Дата));
	//Запрос.УстановитьПараметр("Контрагент", Контрагент);
	//Запрос.УстановитьПараметр("Предприятие", Предприятие);
	//Запрос.УстановитьПараметр("Подразделение", Подразделение);
	//Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	//Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	//Запрос.УстановитьПараметр("ЭтоЗаказНаВозврат", ЭтоЗаказНаВозврат);
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	Возврат Выборка.Цена;
	//КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Договор.ТипЦен) Тогда
		Возврат Новый Структура("Цена, ТипЦены", 0, Справочники.ТипыЦенНоменклатуры.ПустаяСсылка());
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.ТипЦен КАК ТипЦен
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Период, Номенклатура = &Номенклатура) КАК ЦеныНоменклатурыСрезПоследних
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦенНоменклатуры.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЦеныНоменклатурыСрезПоследних.ТипЦен = &ТипЦен
	|		КОНЕЦ";
	Запрос.УстановитьПараметр("Период", Дата);
	//Запрос.УстановитьПараметр("Предприятие", Предприятие);
	//Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ТипЦен", Договор.ТипЦен);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Новый Структура("Цена, ТипЦены", Выборка.Цена, Выборка.ТипЦен);
	КонецЦикла;
	
	Возврат Новый Структура("Цена, ТипЦены", 0, Справочники.ТипыЦенНоменклатуры.ПустаяСсылка());
	
КонецФункции

&НаКлиенте
Процедура ТабличнаяЧастьКоличествоУпаковокПриИзменении(Элемент)
		
	РассчитатьКоличество();
	РассчитатьСуммуТовары();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьКоличество(ТекДанные = Неопределено)
	
	Если ТекДанные = Неопределено Тогда
		ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	КонецЕсли;	
	
	ТекДанные.КоличествоВУпаковке = ТекДанные.КоэффициентПересчетаУпаковок;
	//ТекДанные.Количество = ТекДанные.КоличествоУпаковок * ТекДанные.КоэффициентПересчетаУпаковок; 
	
	
	
	Если Не АльтернативнаяФорма Тогда
		ТекДанные.Количество = ТекДанные.КоличествоУпаковок * ТекДанные.КоэффициентПересчетаУпаковок; 
	КонецЕсли;
	РассчитатьСуммуТовары(ТекДанные); 
	
КонецПроцедуры	

&НаКлиенте
Процедура ТабличнаяЧастьЕдиницаИзмеренияПриИзменении(Элемент)

	ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	//Если ТипЗнч(ТекДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") Тогда
	Если АльтернативнаяФорма Тогда
		ЗаполнитьПредставлениеУпаковок(ТекДанные);
	Иначе		
		ТекДанные.КоэффициентПересчетаУпаковок = ПолучитьКоэффициентПересчетаУпаковок(ТекДанные.Номенклатура, ТекДанные.ЕдиницаИзмерения);
	КонецЕсли;  
	РассчитатьКоличество(ТекДанные); 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивВозможныхЕдиницИзмеренияНоменклатуры(Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковкиНоменклатуры.Упаковка
	|ИЗ
	|	РегистрСведений.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|ГДЕ
	|	УпаковкиНоменклатуры.Номенклатура = &Номенклатура"; 
	АльтернативнаяФорма = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("АльтернативнаяФормаЗаказов");
	Если АльтернативнаяФорма Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УпаковкиНоменклатуры.ЕдиницаИзмерения КАК Упаковка
		|ИЗ
		|	РегистрСведений.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
		|ГДЕ
		|	УпаковкиНоменклатуры.Номенклатура = &Номенклатура
		|	И УпаковкиНоменклатуры.ЕдиницаИзмерения <> &ЕдиницаИзмерения"; 
		Запрос.УстановитьПараметр("ЕдиницаИзмерения", Номенклатура.ЕдиницаИзмерения);
	КонецЕсли;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	ТаблицаУпаковок = Запрос.Выполнить().Выгрузить();
	ТаблицаУпаковок.Свернуть("Упаковка");
	
	МассивУпаковок = ТаблицаУпаковок.ВыгрузитьКолонку("Упаковка");
	МассивУпаковок.Вставить(0, Номенклатура.ЕдиницаИзмерения);
	
	Возврат МассивУпаковок;
	
КонецФункции	

&НаКлиенте
Процедура ВидЗаказаПриИзменении(Элемент)
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыЗаказов.ВнутреннееПеремещение") Тогда
		Массив = Новый Массив;
		Массив.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
		ТекОписаниеТипов = Новый ОписаниеТипов(Массив);
		
		Элементы.Контрагент.ОграничениеТипа = ТекОписаниеТипов;
		Элементы.Контрагент.Заголовок = "Поставщик (внутр.)";
		
		Элементы.Договор.ОтметкаНезаполненного = Ложь;
		Элементы.Договор.Видимость = Ложь;
		
		Если НЕ Элементы.Найти("ФормаДокументУЧ_ВозвратТоваровПоставщикуСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_ВозвратТоваровПоставщикуСоздатьНаОсновании.Видимость = Ложь;
		КонецЕсли;
		Если НЕ Элементы.Найти("ФормаДокументУЧ_ПоступлениеТоваровСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_ПоступлениеТоваровСоздатьНаОсновании.Видимость = Ложь;
		КонецЕсли;
		Если НЕ Элементы.Найти("ФормаДокументУЧ_ПеремещениеТоваровСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_ПеремещениеТоваровСоздатьНаОсновании.Видимость = Истина;
		КонецЕсли;
		Если НЕ Элементы.Найти("ФормаДокументУЧ_РеализацияСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_РеализацияСоздатьНаОсновании.Видимость = Истина;
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыЗаказов.ПеремещениеМеждуСкладами") Тогда
		Элементы.Контрагент.Видимость = Ложь;
		Элементы.СкладОтправитель.Видимость = Истина;
		Элементы.Договор.Видимость = Ложь;
		Элементы.ДатаПоступления.Заголовок = "Дата перемещения";
	Иначе
		Массив = Новый Массив;
		Массив.Добавить(Тип("СправочникСсылка.Контрагенты"));
		ТекОписаниеТипов = Новый ОписаниеТипов(Массив);
		
		Элементы.Контрагент.ОграничениеТипа = ТекОписаниеТипов;
		Элементы.Контрагент.Заголовок = "Поставщик";
		Элементы.ДатаПоступления.Заголовок = "Дата поступления";
		
		//Элементы.Договор.ОтметкаНезаполненного = Не ЗначениеЗаполнено(Объект.Договор);
		Элементы.Договор.Видимость = Истина;
		
		Если НЕ Элементы.Найти("ФормаДокументУЧ_ВозвратТоваровПоставщикуСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_ВозвратТоваровПоставщикуСоздатьНаОсновании.Видимость = Ложь;
		КонецЕсли;
		Если НЕ Элементы.Найти("ФормаДокументУЧ_ПеремещениеТоваровСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_ПеремещениеТоваровСоздатьНаОсновании.Видимость = Ложь;
		КонецЕсли;
		Если НЕ Элементы.Найти("ФормаДокументУЧ_ПоступлениеТоваровСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_ПоступлениеТоваровСоздатьНаОсновании.Видимость = Истина;
		КонецЕсли;
		Если НЕ Элементы.Найти("ФормаДокументУЧ_РеализацияСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_РеализацияСоздатьНаОсновании.Видимость = Истина;
		КонецЕсли;
		
		//Объект.ПредприятиеВн = ПредопределенноеЗначение("Справочник.Предприятия.ПустаяСсылка");
		//Элементы.ПредприятиеВн.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыЗаказов.ВозвратБрака") Тогда
		Элементы.ДатаПоступления.Заголовок = "Дата возврата";
		
		Элементы.ТабличнаяЧастьЗаполнитьПоАссортименту.Заголовок = "Заполнить по товарам со склада возврата";
		Если НЕ Элементы.Найти("ФормаДокументУЧ_ПоступлениеТоваровСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_ПоступлениеТоваровСоздатьНаОсновании.Видимость = Ложь;
		КонецЕсли;
		Если НЕ Элементы.Найти("ФормаДокументУЧ_ПеремещениеТоваровСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_ПеремещениеТоваровСоздатьНаОсновании.Видимость = Ложь;
		КонецЕсли;
		Если НЕ Элементы.Найти("ФормаДокументУЧ_ВозвратТоваровПоставщикуСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_ВозвратТоваровПоставщикуСоздатьНаОсновании.Видимость = Истина;
		КонецЕсли;
		Если НЕ Элементы.Найти("ФормаДокументУЧ_РеализацияСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_РеализацияСоздатьНаОсновании.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ВидЗаказаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВидЗаказаПриИзмененииНаСервере()
	
	//Если Объект.ВидОперации = Перечисления.ВидыЗаказов.ВнутреннееПеремещение Тогда
	//	НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.ПредприятиеВн");
	//	НовыйМассив = Новый Массив();
	//	НовыйМассив.Добавить(НоваяСвязь);
	//	НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
	//	Элементы.Контрагент.СвязиПараметровВыбора = НовыеСвязи;
	//Иначе
	//	НовыеСвязи = Новый ФиксированныйМассив(Новый Массив);
	//	Элементы.Контрагент.СвязиПараметровВыбора = НовыеСвязи;
	//КонецЕсли;
	
КонецПроцедуры	

#Область ПоискПоШК

&НаКлиенте
Процедура ПодобратьНоменклатуруПоШК(Команда)
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	ИмяТЧ = "ТабличнаяЧасть";
	ИмяРеквизитаНоменклатуры = "Номенклатура";
	ИмяРеквизитаКоличества = "Количество";
	сабОперОбщегоНазначенияНаКлиенте.ОбработатьЗаполнениеПоШтрихкодуНаКлиенте(ЭтаФорма, ИмяТЧ, ИмяРеквизитаНоменклатуры, ИмяРеквизитаКоличества, Штрихкод);	
	ТабличнаяЧастьНоменклатураПриИзменении(Неопределено);
	
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт		
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Статус = ВыбранноеЗначениеСтатуса;
		Модифицированность = Истина;
		УстановитьДоступностьДокумента();
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьДокумента()
	
	ТекДоступность = НЕ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.Создан");
	БюджетныйНаСервере.ФормаТолькоПросмотр(Объект, ЭтаФорма, ТекДоступность);  
	
	Если БюджетныйНаСервере.РольАдминаДоступнаСервер() Тогда
		Элементы.Статус.ТолькоПросмотр = Ложь;
	КонецЕсли;                                        
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ВыбранноеЗначениеСтатуса = ВыбранноеЗначение;
	Если НЕ ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.Создан") Тогда
		СтандартнаяОбработка = Ложь;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса",
		ЭтотОбъект);	
		
		ПоказатьВопрос(Оповещение,
		"После изменения статуса заказа изменения станут невозможны. Продолжить?",
		РежимДиалогаВопрос.ДаНет,
		0, // таймаут в секундах
		КодВозвратаДиалога.Да, // (необ.) кнопка по умолчанию
		"Вопрос" // (необ.) заголовок
		);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	КонтрагентПриИзмененииСервер();	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер(Изменять = Истина)
	
	//ПроизводственноеПодразделение = Ложь;
	//РеквизитыДоговора = сабОперОбщегоНазначения.ПолучитьДоговорКонтрагентаПоУмолчанию(Объект.Контрагент, ?(ПроизводственноеПодразделение, Неопределено, Объект.Организация));
	//Объект.Договор = РеквизитыДоговора.Договор;
	
	//Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
	//	ВнПредприятиеКонтрагента = Объект.Контрагент.ПредприятиеХодлинга;
	//	Если ЗначениеЗаполнено(ВнПредприятиеКонтрагента) Тогда
	//		Если ТипЗнч(ВнПредприятиеКонтрагента) = Тип("СправочникСсылка.Предприятия") Тогда
	//			Объект.ПредприятиеВн = ВнПредприятиеКонтрагента;
	//		Иначе	
	//			Объект.ПредприятиеВн = ВнПредприятиеКонтрагента.Предприятие;
	//		КонецЕсли;	
	//	Иначе
	//		Объект.ПредприятиеВн = Справочники.Предприятия.ПустаяСсылка();
	//	КонецЕсли;
	//КонецЕсли;
	
	//Элементы.ТабличнаяЧастьКоличествоВЗапайках.Видимость = (ЗначениеЗаполнено(Объект.ПредприятиеВн));
	//Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
	//	Объект.Организация = РеквизитыДоговора.Организация;	
	//КонецЕсли;  
	
	Если ЗначениеЗаполнено(Объект.ПодразделениеКонтрагента.Адрес) Тогда
		ТекАдрес = Объект.ПодразделениеКонтрагента.Адрес;
	Иначе
		//	ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
		//	ТекАдрес = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияНаДату(Объект.Контрагент, ВидКонтактнойИнформации).Представление;
		ТекАдрес = "";
	КонецЕсли;
	
	Если Изменять Тогда
		
		//Если ЗначениеЗаполнено(Объект.Контрагент.СкладОтгрузкиПоУмолчанию) Тогда
		//	Объект.Склад = Объект.Контрагент.СкладОтгрузкиПоУмолчанию;
		//	
		//	Для Каждого ТекСтрокаТЧ Из Объект.ТабличнаяЧасть Цикл
		//		ТекСтрокаТЧ.Склад = Объект.Склад;
		//	КонецЦикла;
		
		//КонецЕсли;
		
		РеквизитыДоговора = сабОперОбщегоНазначения.ПолучитьДоговорКонтрагентаПоУмолчанию(Объект.Контрагент, ?(Объект.Подразделение.ПроизводственноеПодразделение, Неопределено, Объект.Организация));
		Объект.Договор = РеквизитыДоговора.Договор;
		
		Если ЗначениеЗаполнено(ТекАдрес) Тогда
			Объект.АдресДоставки = ТекАдрес;
		КонецЕсли;
		
		ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		ТекТелефон = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияНаДату(Объект.Контрагент, ВидКонтактнойИнформации).Представление;
		
		Если ЗначениеЗаполнено(ТекТелефон) Тогда
			Объект.Телефон = ТекТелефон;
		КонецЕсли;
		
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПодразделенияКонтрагентов.Ссылка КАК Ссылка,
	|	ПодразделенияКонтрагентов.Адрес КАК Адрес,
	|	ПодразделенияКонтрагентов.Склад КАК Склад,
	|	ПодразделенияКонтрагентов.ВремяПоДнямНеделиПереключатель КАК ВремяПоДнямНеделиПереключатель
	|ИЗ
	|	Справочник.ПодразделенияКонтрагентов КАК ПодразделенияКонтрагентов
	|ГДЕ
	|	ПодразделенияКонтрагентов.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", Объект.Контрагент);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Элементы.АдресДоставки.СписокВыбора.Очистить();
	
	Если ЗначениеЗаполнено(Объект.АдресДоставки) Тогда
		Элементы.АдресДоставки.СписокВыбора.Добавить(ТекАдрес);
	КонецЕсли;
	
	Если Элементы.АдресДоставки.СписокВыбора.НайтиПоЗначению(ТекАдрес) = Неопределено Тогда
		Элементы.АдресДоставки.СписокВыбора.Добавить(ТекАдрес);
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		Если Элементы.АдресДоставки.СписокВыбора.НайтиПоЗначению(Выборка.Адрес) = Неопределено Тогда
			Элементы.АдресДоставки.СписокВыбора.Добавить(Выборка.Адрес);
		КонецЕсли;
	КонецЦикла;
	
	Если Изменять Тогда
		//Если Выборка.Количество() = 1 И Изменять Тогда 
		Если Выборка.Количество() = 1 Тогда 
			Объект.ПодразделениеКонтрагента = Выборка.Ссылка;
			РеквыОбъекта = БюджетныйНаСервере.ВернутьРеквизиты(Выборка.Ссылка, "Адрес, Ответственный, Выразить(Спр.Ответственный КАК Справочник.СотрудникиКонтрагентов).Телефон КАК ОтветственныйТелефон, ДатаДоставки, ДатаДоставкиДо, МаршрутДоставки"); 
			Объект.АдресДоставки = РеквыОбъекта.Адрес;
			Объект.МаршрутДоставки = РеквыОбъекта.МаршрутДоставки;
			Объект.МенеджерКонтрагента = РеквыОбъекта.Ответственный;
			Объект.Телефон = РеквыОбъекта.ОтветственныйТелефон; 
			Если Выборка.ВремяПоДнямНеделиПереключатель Тогда
				ЗаполнитьВремяДоставкиПоДнямНедели(Выборка.Ссылка,Объект.ДатаДоставки,Объект.ДатаДоставкиДо);	
			Иначе
				Объект.ДатаДоставки = НачалоДня(Объект.ДатаДоставки) + (РеквыОбъекта.ДатаДоставки - НачалоДня(РеквыОбъекта.ДатаДоставки));
				Объект.ДатаДоставкиДо = НачалоДня(Объект.ДатаДоставкиДо) + (РеквыОбъекта.ДатаДоставкиДо - НачалоДня(РеквыОбъекта.ДатаДоставкиДо));
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.Склад) Тогда
				Объект.Склад = Выборка.Склад;
				Для Каждого ТекСтрокаТЧ Из Объект.ТабличнаяЧасть Цикл
					ТекСтрокаТЧ.Склад =  Выборка.Склад;
				КонецЦикла;
			ИначеЕсли ЗначениеЗаполнено(Объект.Контрагент) Тогда
				СкладКонтрагента = Объект.Контрагент.СкладОтгрузкиПоУмолчанию;
				Объект.Склад = СкладКонтрагента;
				Для Каждого ТекСтрокаТЧ Из Объект.ТабличнаяЧасть Цикл
					ТекСтрокаТЧ.Склад = СкладКонтрагента;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Объект.ПодразделениеКонтрагента) Тогда
			РеквыОбъекта = БюджетныйНаСервере.ВернутьРеквизиты(Объект.ПодразделениеКонтрагента, "Адрес, Ответственный, Выразить(Спр.Ответственный КАК Справочник.СотрудникиКонтрагентов).Телефон КАК ОтветственныйТелефон, ДатаДоставки, ДатаДоставкиДо, МаршрутДоставки, ВремяПоДнямНеделиПереключатель"); 
			Объект.АдресДоставки = РеквыОбъекта.Адрес;
			Объект.МаршрутДоставки = РеквыОбъекта.МаршрутДоставки;
			Объект.МенеджерКонтрагента = РеквыОбъекта.Ответственный;
			Объект.Телефон = РеквыОбъекта.ОтветственныйТелефон;
			Если РеквыОбъекта.ВремяПоДнямНеделиПереключатель Тогда
					ЗаполнитьВремяДоставкиПоДнямНедели(Объект.ПодразделениеКонтрагента,Объект.ДатаДоставки,Объект.ДатаДоставкиДо);	
				Иначе
					Объект.ДатаДоставки = НачалоДня(Объект.ДатаДоставки) + (РеквыОбъекта.ДатаДоставки - НачалоДня(РеквыОбъекта.ДатаДоставки));
					Объект.ДатаДоставкиДо = НачалоДня(Объект.ДатаДоставкиДо) + (РеквыОбъекта.ДатаДоставкиДо - НачалоДня(РеквыОбъекта.ДатаДоставкиДо));
				КонецЕсли;
			Если ЗначениеЗаполнено(Объект.ПодразделениеКонтрагента.Склад) Тогда
				Объект.Склад = Объект.ПодразделениеКонтрагента.Склад;
				Для Каждого ТекСтрокаТЧ Из Объект.ТабличнаяЧасть Цикл
					ТекСтрокаТЧ.Склад = Объект.ПодразделениеКонтрагента.Склад;
				КонецЦикла;
			ИначеЕсли ЗначениеЗаполнено(Объект.Контрагент) Тогда
				СкладКонтрагента = Объект.Контрагент.СкладОтгрузкиПоУмолчанию;
				Объект.Склад = СкладКонтрагента;
				Для Каждого ТекСтрокаТЧ Из Объект.ТабличнаяЧасть Цикл
					ТекСтрокаТЧ.Склад = СкладКонтрагента;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Объект.АдресДоставки = "";
			Объект.МаршрутДоставки = Справочники.МаршрутыДоставки.ПустаяСсылка();
			Объект.МенеджерКонтрагента = Справочники.СотрудникиКонтрагентов.ПустаяСсылка();
			Объект.Телефон = "";
			Объект.ДатаДоставки = НачалоДня(Объект.ДатаДоставки);
			Объект.ДатаДоставкиДо = НачалоДня(Объект.ДатаДоставки); 
			Если ЗначениеЗаполнено(Объект.Контрагент.СкладОтгрузкиПоУмолчанию) Тогда
				СкладКонтрагента = Объект.Контрагент.СкладОтгрузкиПоУмолчанию;
				Объект.Склад = СкладКонтрагента;
				Для Каждого ТекСтрокаТЧ Из Объект.ТабличнаяЧасть Цикл
					ТекСтрокаТЧ.Склад = СкладКонтрагента;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Элементы.АдресДоставки.СписокВыбора.Добавить("Подразделения контрагента...");
	
КонецПроцедуры


&НаСервере
Функция ПолучитьСкладПоТипуНоменклатуры(ТекНоменклатура)

ТипНоменклатуры = ТекНоменклатура.ТипНоменклатуры;
Если ТипНоменклатуры = Перечисления.сабТипыНоменклатуры.Материалы Тогда
	Возврат Справочники.Склады.ПолучитьСкладПоЗначениюДопРеквизита("Склад производства", Объект.Предприятие);
Иначе
	Возврат Справочники.Склады.ПолучитьСкладПоЗначениюДопРеквизита("Торговый зал", Объект.Предприятие);
КонецЕсли;	

КонецФункции	

&НаСервере
Процедура ЗаполнитьПоАссортиментуНаСервере()

Объект.ТабличнаяЧасть.Очистить();

Запрос = Новый Запрос;
Запрос.Текст = 
"ВЫБРАТЬ
|	КорзинаТорговТовары.Номенклатура,
|	ТоргиСрезПоследних.ВыведенаИзТоргов КАК ВыведенаИзТоргов
|ПОМЕСТИТЬ ВТ_Торги
|ИЗ
|	Справочник.КорзинаТоргов.Товары КАК КорзинаТорговТовары
|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Торги.СрезПоследних(&Период, ) КАК ТоргиСрезПоследних
|		ПО КорзинаТорговТовары.Ссылка = ТоргиСрезПоследних.Корзина
|			И КорзинаТорговТовары.Номенклатура = ТоргиСрезПоследних.Номенклатура
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	МаркетинговыеМероприятия.ЦенаПоступления,
|	МаркетинговыеМероприятия.Номенклатура,
|	МаркетинговыеМероприятия.Предприятие,
|	МаркетинговыеМероприятия.Подразделение,
|	МаркетинговыеМероприятия.ДатаДокумента
|ПОМЕСТИТЬ ВТ_МаркетинговыеМероприятия
|ИЗ
|	РегистрСведений.МаркетинговыеМероприятия КАК МаркетинговыеМероприятия
|ГДЕ
|	МаркетинговыеМероприятия.Предприятие = &Предприятие
|	И МаркетинговыеМероприятия.Подразделение = &Подразделение
|	И МаркетинговыеМероприятия.ДатаЗаказовНач <= &ПериодЦен
|	И МаркетинговыеМероприятия.ДатаЗаказовКон >= &ПериодЦен
|	И МаркетинговыеМероприятия.ЦенаПоступления <> 0
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВТ_МаркетинговыеМероприятия.Номенклатура,
|	ВТ_МаркетинговыеМероприятия.Предприятие,
|	ВТ_МаркетинговыеМероприятия.Подразделение,
|	МАКСИМУМ(ВТ_МаркетинговыеМероприятия.ДатаДокумента) КАК ДатаДокумента
|ПОМЕСТИТЬ ВТ_МаксДатаМаркетинговогоМероприятия
|ИЗ
|	ВТ_МаркетинговыеМероприятия КАК ВТ_МаркетинговыеМероприятия
|
|СГРУППИРОВАТЬ ПО
|	ВТ_МаркетинговыеМероприятия.Номенклатура,
|	ВТ_МаркетинговыеМероприятия.Предприятие,
|	ВТ_МаркетинговыеМероприятия.Подразделение
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВТ_МаркетинговыеМероприятия.ЦенаПоступления,
|	ВТ_МаркетинговыеМероприятия.Номенклатура,
|	ВТ_МаркетинговыеМероприятия.Предприятие,
|	ВТ_МаркетинговыеМероприятия.Подразделение
|ПОМЕСТИТЬ ВТ_МаркетинговыеМероприятияИтог
|ИЗ
|	ВТ_МаксДатаМаркетинговогоМероприятия КАК ВТ_МаксДатаМаркетинговогоМероприятия
|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаркетинговыеМероприятия КАК ВТ_МаркетинговыеМероприятия
|		ПО ВТ_МаксДатаМаркетинговогоМероприятия.Номенклатура = ВТ_МаркетинговыеМероприятия.Номенклатура
|			И ВТ_МаксДатаМаркетинговогоМероприятия.Предприятие = ВТ_МаркетинговыеМероприятия.Предприятие
|			И ВТ_МаксДатаМаркетинговогоМероприятия.Подразделение = ВТ_МаркетинговыеМероприятия.Подразделение
|			И ВТ_МаксДатаМаркетинговогоМероприятия.ДатаДокумента = ВТ_МаркетинговыеМероприятия.ДатаДокумента
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВременнаяБлокировкаНоменклатурыВЗаказах.Предприятие,
|	ВременнаяБлокировкаНоменклатурыВЗаказах.Подразделение,
|	ВременнаяБлокировкаНоменклатурыВЗаказах.Номенклатура
|ПОМЕСТИТЬ ВТ_ЗаблокированныеЗаказы
|ИЗ
|	РегистрСведений.ВременнаяБлокировкаНоменклатурыВЗаказах КАК ВременнаяБлокировкаНоменклатурыВЗаказах
|ГДЕ
|	ВременнаяБлокировкаНоменклатурыВЗаказах.ДатаНач <= &Период
|	И ВременнаяБлокировкаНоменклатурыВЗаказах.ДатаКон >= &Период
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура,
|	ЕСТЬNULL(ВТ_МаркетинговыеМероприятияИтог.ЦенаПоступления, ЦеныНоменклатурыСрезПоследних.Цена) КАК Цена,
|	ЦеныНоменклатурыСрезПоследних.ВидЦены,
|	ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура.Код КАК Код,
|	ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
|	ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура.СтавкаНДС КАК СтавкаНДС
|ИЗ
|	РегистрСведений.НоменклатураПоставщика.СрезПоследних(
|			&Период,
|			Предприятие = &Предприятие
|				И Подразделение = &Подразделение) КАК НоменклатураПоставщикаСрезПоследних
|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
|				&ПериодЦен,
|				Предприятие = &Предприятие
|					И ВидЦены.ЦенаПоставщика
|					И ВидЦены.Поставщик = &Контрагент
|					И Подразделение = &Подразделение) КАК ЦеныНоменклатурыСрезПоследних
|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаркетинговыеМероприятияИтог КАК ВТ_МаркетинговыеМероприятияИтог
|			ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = ВТ_МаркетинговыеМероприятияИтог.Номенклатура
|				И ЦеныНоменклатурыСрезПоследних.Предприятие = ВТ_МаркетинговыеМероприятияИтог.Предприятие
|				И ЦеныНоменклатурыСрезПоследних.Подразделение = ВТ_МаркетинговыеМероприятияИтог.Подразделение
|		ПО НоменклатураПоставщикаСрезПоследних.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
|			И НоменклатураПоставщикаСрезПоследних.Предприятие = ЦеныНоменклатурыСрезПоследних.Предприятие
|			И НоменклатураПоставщикаСрезПоследних.Подразделение = ЦеныНоменклатурыСрезПоследних.Подразделение
|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АссортиментнаяМатрица.СрезПоследних(
|				&Период,
|				Предприятие = &Предприятие
|					И Подразделение = &Подразделение) КАК АссортиментнаяМатрицаСрезПоследних
|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыОбеспеченияПотребности.СрезПоследних(
|					&Период,
|					Предприятие = &Предприятие
|						И Подразделение = &Подразделение) КАК ПараметрыОбеспеченияПотребностиСрезПоследних
|			ПО АссортиментнаяМатрицаСрезПоследних.Номенклатура = ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура
|				И АссортиментнаяМатрицаСрезПоследних.Предприятие = ПараметрыОбеспеченияПотребностиСрезПоследних.Предприятие
|				И АссортиментнаяМатрицаСрезПоследних.Подразделение = ПараметрыОбеспеченияПотребностиСрезПоследних.Подразделение
|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Торги КАК ВТ_Торги
|			ПО АссортиментнаяМатрицаСрезПоследних.Номенклатура = ВТ_Торги.Номенклатура
|		ПО НоменклатураПоставщикаСрезПоследних.Номенклатура = АссортиментнаяМатрицаСрезПоследних.Номенклатура
|			И НоменклатураПоставщикаСрезПоследних.Подразделение = АссортиментнаяМатрицаСрезПоследних.Подразделение
|			И НоменклатураПоставщикаСрезПоследних.Предприятие = АссортиментнаяМатрицаСрезПоследних.Предприятие
|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗаблокированныеЗаказы КАК ВТ_ЗаблокированныеЗаказы
|		ПО НоменклатураПоставщикаСрезПоследних.Предприятие = ВТ_ЗаблокированныеЗаказы.Предприятие
|			И НоменклатураПоставщикаСрезПоследних.Подразделение = ВТ_ЗаблокированныеЗаказы.Подразделение
|			И НоменклатураПоставщикаСрезПоследних.Номенклатура = ВТ_ЗаблокированныеЗаказы.Номенклатура
|ГДЕ
|	НЕ ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура ЕСТЬ NULL 
|	И НоменклатураПоставщикаСрезПоследних.Контрагент = &Контрагент
|	И АссортиментнаяМатрицаСрезПоследних.ВыведенИзАссортимента = ЛОЖЬ
|	И ЕСТЬNULL(ВТ_Торги.ВыведенаИзТоргов, ЛОЖЬ) = ЛОЖЬ
|	И ВТ_ЗаблокированныеЗаказы.Номенклатура ЕСТЬ NULL 
|
|УПОРЯДОЧИТЬ ПО
|	Код";
Запрос.УстановитьПараметр("Период", ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()));
Запрос.УстановитьПараметр("ПериодЦен", ?(Объект.Контрагент.УсловияЦенПоставки = Перечисления.УсловияЦенПоставки.НаДатуПоставки, Объект.ДатаПоступления, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата())));
Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
Запрос.УстановитьПараметр("Предприятие", Объект.Предприятие);
Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);

Выборка = Запрос.Выполнить().Выбрать();

Пока Выборка.Следующий() Цикл
	СтрокаТЧ = Объект.ТабличнаяЧасть.Добавить();
	СтрокаТЧ.Номенклатура = Выборка.Номенклатура;
	СтрокаТЧ.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
	СтрокаТЧ.ВидЦеныПоставщика = Выборка.ВидЦены;
	СтрокаТЧ.Цена = Выборка.Цена;
	СтрокаТЧ.СтавкаНДС = Выборка.СтавкаНДС;
	СтрокаТЧ.Склад = ПолучитьСкладПоТипуНоменклатуры(Выборка.Номенклатура);
	СтрокаТЧ.Код = Выборка.Код;
	СтрокаТЧ.КоэффициентПересчетаУпаковок = 1;
КонецЦикла;	

КонецПроцедуры


&НаСервере
Процедура ЗаполнитьПоОстаткамВозвратаНаСервере()

	Объект.ТабличнаяЧасть.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетныйОстатки.Субконто1 КАК Номенклатура,
	|	УчетныйОстатки.Предприятия КАК Предприятие,
	|	УчетныйОстатки.Подразделение,
	|	ЛОЖЬ КАК ВыведенИзАссортимента,
	|	УчетныйОстатки.КоличествоОстаток
	|ПОМЕСТИТЬ ВТ_ОстаткиПоставщика
	|ИЗ
	|	РегистрБухгалтерии.Учетный.Остатки(
	|			&Период,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Учетный.Товары),
	|			,
	|			Субконто2 = &Склад
	|				И Подразделение = &Подразделение) КАК УчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаркетинговыеМероприятия.ЦенаПоступления,
	|	МаркетинговыеМероприятия.Номенклатура,
	|	МаркетинговыеМероприятия.Предприятие,
	|	МаркетинговыеМероприятия.Подразделение,
	|	МаркетинговыеМероприятия.ДатаДокумента
	|ПОМЕСТИТЬ ВТ_МаркетинговыеМероприятия
	|ИЗ
	|	РегистрСведений.МаркетинговыеМероприятия КАК МаркетинговыеМероприятия
	|ГДЕ
	|	МаркетинговыеМероприятия.Предприятие = &Предприятие
	|	И МаркетинговыеМероприятия.Подразделение = &Подразделение
	|	И МаркетинговыеМероприятия.ДатаЗаказовНач <= &Период
	|	И МаркетинговыеМероприятия.ДатаЗаказовКон >= &Период
	|	И МаркетинговыеМероприятия.ЦенаПоступления <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_МаркетинговыеМероприятия.Номенклатура,
	|	ВТ_МаркетинговыеМероприятия.Предприятие,
	|	ВТ_МаркетинговыеМероприятия.Подразделение,
	|	МАКСИМУМ(ВТ_МаркетинговыеМероприятия.ДатаДокумента) КАК ДатаДокумента
	|ПОМЕСТИТЬ ВТ_МаксДатаМаркетинговогоМероприятия
	|ИЗ
	|	ВТ_МаркетинговыеМероприятия КАК ВТ_МаркетинговыеМероприятия
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_МаркетинговыеМероприятия.Номенклатура,
	|	ВТ_МаркетинговыеМероприятия.Предприятие,
	|	ВТ_МаркетинговыеМероприятия.Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_МаркетинговыеМероприятия.ЦенаПоступления,
	|	ВТ_МаркетинговыеМероприятия.Номенклатура,
	|	ВТ_МаркетинговыеМероприятия.Предприятие,
	|	ВТ_МаркетинговыеМероприятия.Подразделение
	|ПОМЕСТИТЬ ВТ_МаркетинговыеМероприятияИтог
	|ИЗ
	|	ВТ_МаксДатаМаркетинговогоМероприятия КАК ВТ_МаксДатаМаркетинговогоМероприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаркетинговыеМероприятия КАК ВТ_МаркетинговыеМероприятия
	|		ПО ВТ_МаксДатаМаркетинговогоМероприятия.Номенклатура = ВТ_МаркетинговыеМероприятия.Номенклатура
	|			И ВТ_МаксДатаМаркетинговогоМероприятия.Предприятие = ВТ_МаркетинговыеМероприятия.Предприятие
	|			И ВТ_МаксДатаМаркетинговогоМероприятия.Подразделение = ВТ_МаркетинговыеМероприятия.Подразделение
	|			И ВТ_МаксДатаМаркетинговогоМероприятия.ДатаДокумента = ВТ_МаркетинговыеМероприятия.ДатаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура,
	|	ЕСТЬNULL(ВТ_МаркетинговыеМероприятияИтог.ЦенаПоступления, ЦеныНоменклатурыСрезПоследних.Цена) КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦены,
	|	ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура.Код КАК Код,
	|	ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	ВТ_ОстаткиПоставщика.КоличествоОстаток,
	|	ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура.СтавкаНДС.Ставка КАК СтавкаНДССтавка
	|ИЗ
	|	РегистрСведений.НоменклатураПоставщика.СрезПоследних(
	|			&Период,
	|			Предприятие = &Предприятие
	|				И Подразделение = &Подразделение) КАК НоменклатураПоставщикаСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Период,
	|				Предприятие = &Предприятие
	|					И ВидЦены.ЦенаПоставщика
	|					И ВидЦены.Поставщик = &Контрагент
	|					И Подразделение = &Подразделение) КАК ЦеныНоменклатурыСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаркетинговыеМероприятияИтог КАК ВТ_МаркетинговыеМероприятияИтог
	|			ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = ВТ_МаркетинговыеМероприятияИтог.Номенклатура
	|				И ЦеныНоменклатурыСрезПоследних.Предприятие = ВТ_МаркетинговыеМероприятияИтог.Предприятие
	|				И ЦеныНоменклатурыСрезПоследних.Подразделение = ВТ_МаркетинговыеМероприятияИтог.Подразделение
	|		ПО НоменклатураПоставщикаСрезПоследних.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И НоменклатураПоставщикаСрезПоследних.Предприятие = ЦеныНоменклатурыСрезПоследних.Предприятие
	|			И НоменклатураПоставщикаСрезПоследних.Подразделение = ЦеныНоменклатурыСрезПоследних.Подразделение
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиПоставщика КАК ВТ_ОстаткиПоставщика
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыОбеспеченияПотребности.СрезПоследних(
	|					&Период,
	|					Предприятие = &Предприятие
	|						И Подразделение = &Подразделение) КАК ПараметрыОбеспеченияПотребностиСрезПоследних
	|			ПО ВТ_ОстаткиПоставщика.Номенклатура = ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура
	|				И ВТ_ОстаткиПоставщика.Предприятие = ПараметрыОбеспеченияПотребностиСрезПоследних.Предприятие
	|				И ВТ_ОстаткиПоставщика.Подразделение = ПараметрыОбеспеченияПотребностиСрезПоследних.Подразделение
	|		ПО НоменклатураПоставщикаСрезПоследних.Номенклатура = ВТ_ОстаткиПоставщика.Номенклатура
	|			И НоменклатураПоставщикаСрезПоследних.Подразделение = ВТ_ОстаткиПоставщика.Подразделение
	|			И НоменклатураПоставщикаСрезПоследних.Предприятие = ВТ_ОстаткиПоставщика.Предприятие
	|ГДЕ
	|	НЕ ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура ЕСТЬ NULL 
	|	И НоменклатураПоставщикаСрезПоследних.Контрагент = &Контрагент
	|	И ВТ_ОстаткиПоставщика.ВыведенИзАссортимента = ЛОЖЬ
	|	И ЕСТЬNULL(ВТ_ОстаткиПоставщика.КоличествоОстаток, 0) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";
	
	ТекДата = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата());
	Запрос.УстановитьПараметр("Период", ТекДата);
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("Предприятие", Объект.Предприятие);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если НЕ Выборка.Количество() Тогда
		Сообщить("На складе """ + Строка(Объект.Склад) + """ отсутствуют товары к возврату по поставщику """ + Строка(Объект.Контрагент) + """ на дату """ + Строка(ТекДата) + """. Возможно перед заказом необходимо сделать перемещение товара на данный склад.");	
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		СтрокаТЧ = Объект.ТабличнаяЧасть.Добавить();
		СтрокаТЧ.Номенклатура = Выборка.Номенклатура;
		СтрокаТЧ.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		СтрокаТЧ.ВидЦеныПоставщика = Выборка.ВидЦены;
		СтрокаТЧ.Цена = Выборка.Цена;
		СтрокаТЧ.СтавкаНДС = Выборка.СтавкаНДС;
		СтрокаТЧ.Склад = ПолучитьСкладПоТипуНоменклатуры(Выборка.Номенклатура);
		СтрокаТЧ.Код = Выборка.Код;
		СтрокаТЧ.КоэффициентПересчетаУпаковок = 1;
		СтрокаТЧ.Количество = Выборка.КоличествоОстаток;
		СтрокаТЧ.Сумма = СтрокаТЧ.Количество * СтрокаТЧ.Цена; 
		СтрокаТЧ.СуммаНДС = СтрокаТЧ.Сумма / ((100+Выборка.СтавкаНДССтавка)/100) * (Выборка.СтавкаНДССтавка/100);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоАссортименту(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указан поставщик!";
		Сообщение.Поле = "Контрагент";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;	
	
	Если Элементы.ТабличнаяЧастьЗаполнитьПоАссортименту.Заголовок = "Заполнить по товарам со склада возврата" Тогда
		ЗаполнитьПоОстаткамВозвратаНаСервере();
	Иначе
		ЗаполнитьПоАссортиментуНаСервере();
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	//ОрганизацияВДоговоре = БюджетныйНаСервере.ВернутьРеквизиты(Объект.Договор, "Организация");
	//Если ТипЗнч(ОрганизацияВДоговоре) = Тип("Структура") И ЗначениеЗаполнено(ОрганизацияВДоговоре.Организация) Тогда
	//	Объект.Организация = ОрганизацияВДоговоре.Организация;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПустыеСтроки(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВопроса", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, "Строки с пустым количеством будут очищены. Продолжить?",РежимДиалогаВопрос.ДаНет, 60);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		КУдалению = Новый Массив;
		Для каждого ТекСтрока Из Объект.ТабличнаяЧасть Цикл
			Если НЕ ТекСтрока.Количество Тогда
				КУдалению.Добавить(ТекСтрока);	
			КонецЕсли; 
		КонецЦикла; 
		
		Для каждого ТекУд Из КУдалению Цикл
			Объект.ТабличнаяЧасть.Удалить(ТекУд);	
			Модифицированность = Истина;
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры 


&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	//++саб
	сабПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи);
	//--саб
	ЗаполнитьАртикулы();
КонецПроцедуры

&НаСервере
Процедура сабПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ЗаполнитьАртикулы(); 
	
	Если АльтернативнаяФорма Тогда 
		Для каждого СтрокаТовары Из Объект.ТабличнаяЧасть Цикл
			ЗаполнитьПредставлениеУпаковок(СтрокаТовары); 
		КонецЦикла;
	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	ПодразделениеПриИзмененииСервер();
КонецПроцедуры

&НаСервере
Процедура ПодразделениеПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		РеквизитыПодразделения = БюджетныйНаСервере.ВернутьРеквизиты(Объект.Подразделение, "Склад, Организация");
		
		//Если Объект.ВидОперации = Перечисления.ВидыЗаказов.ВозвратБрака Тогда
		//	Объект.Склад = сабОперОбщегоНазначения.ПолучитьСкладПоДопСвойству(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Склад возврата (Склады)", Истина), Объект.Предприятие);	
		//	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		//		Элементы.Склад.Доступность = Ложь;
		//	Иначе
		//		Объект.Склад = РеквизитыПодразделения.Склад;
		//	КонецЕсли;
		//Иначе
		//	Объект.Склад = РеквизитыПодразделения.Склад;
		//КонецЕсли;
		
		Объект.Организация = РеквизитыПодразделения.Организация;
		КонтрагентПриИзмененииСервер();
	КонецЕсли; 
	
	
КонецПроцедуры



&НаКлиенте
Процедура ТабличнаяЧастьСтавкаНДСПриИзменении(Элемент)
	РассчитатьСуммуТовары();
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьЦену(Команда)
	
	Для Каждого ТекДанные Из Объект.ТабличнаяЧасть Цикл
		УстановитьЗависимыеДанныеВТЧ(ТекДанные);
		РассчитатьСуммуТовары(ТекДанные);
	КонецЦикла;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьЦенуВнутреннегоПеремещения(Номенклатура, Предприятие, Подразделение, ПодразделениеПолучатель, Дата)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Период,
	|			ВидЦены.ЦенаПродажи
	|				И Предприятие = &Предприятие
	|				И Номенклатура = &Номенклатура
	|				И Подразделение = &Подразделение) КАК ЦеныНоменклатурыСрезПоследних";
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат ?(Подразделение.Организация = ПодразделениеПолучатель.Организация, Выборка.Цена, Выборка.Цена/1.1);
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

//К удалению: перенесено в общий модуль
&НаСервереБезКонтекста
Функция РассчитатьЦенуВНХ(Номенклатура, Предприятие, Подразделение, Дата)
	
	Если Номенклатура.Счет10 = ПланыСчетов.Учетный.Счет43() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&Период,
		|			Предприятие = &Предприятие
		|				И Подразделение = &Подразделение
		|				И Номенклатура = &Номенклатура
		|				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних";
		Запрос.УстановитьПараметр("Период", Дата);
		Запрос.УстановитьПараметр("Предприятие", Предприятие);
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("ВидЦены", Справочники.ВидыЦен.НайтиПоНаименованию("Производство ВН", Истина));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Цена;
		КонецЦикла;
		
		Возврат 0;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Цена
		|ИЗ
		|	РегистрСведений.НоменклатураПоставщика.СрезПоследних(
		|			&Период,
		|			Предприятие = &Предприятие
		|				И Подразделение = &Подразделение
		|				И Номенклатура = &Номенклатура) КАК НоменклатураПоставщикаСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				&Период,
		|				Предприятие = &Предприятие
		|					И Подразделение = &Подразделение
		|					И Номенклатура = &Номенклатура
		|					И ВидЦены.ЦенаПоставщика) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО НоменклатураПоставщикаСрезПоследних.Предприятие = ЦеныНоменклатурыСрезПоследних.Предприятие
		|			И НоменклатураПоставщикаСрезПоследних.Подразделение = ЦеныНоменклатурыСрезПоследних.Подразделение
		|			И НоменклатураПоставщикаСрезПоследних.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И НоменклатураПоставщикаСрезПоследних.Контрагент = ЦеныНоменклатурыСрезПоследних.ВидЦены.Поставщик";
		Запрос.УстановитьПараметр("Период", Дата);
		Запрос.УстановитьПараметр("Предприятие", Предприятие);
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Цена;
		КонецЦикла;
		
		Возврат 0;
	КонецЕсли;	
	
КонецФункции	

&НаСервере
Процедура ПереопределитьСвязиПараметровВыбора()
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Контрагент"));
	НовыйМассив.Добавить(Новый СвязьПараметраВыбора("Отбор.Предприятие", "Объект.Предприятие"));
	Если Не Объект.Подразделение.ПроизводственноеПодразделение Тогда
		НовыйМассив.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));
	КонецЕсли;		
	
	НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
	
	Элементы.Договор.СвязиПараметровВыбора = НовыеСвязи;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПереопределитьСвязиПараметровВыбора();	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзExcel(Команда)
	
	ФормаЗагрузки = ПолучитьФорму("ОбщаяФорма.ФормаЗагрузкиИзExcel", Новый Структура("ВидЗагрузки", "ЗагрузкаВТЧТовары"));
	
	ПутьКФайлу = ФормаЗагрузки.ОткрытьМодально();
	
	Если ЗначениеЗаполнено(ПутьКФайлу) Тогда
		СтруктураВозврата = ФормаЗагрузки.ПолучитьДанныеПоЗагрузке(ПутьКФайлу);
		Для Каждого ЭлементСтруктурыВозврата Из СтруктураВозврата Цикл
			ТекДанные = Объект.ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(ТекДанные, ЭлементСтруктурыВозврата.Значение);
			УстановитьЗависимыеДанныеВТЧ(ТекДанные);
			РассчитатьСуммуТовары(ТекДанные);
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ТабличнаяЧастьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ТабличнаяЧастьЕдиницаИзмерения" Тогда
		//СтандартнаяОбработка = Ложь;
		ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
		МассивЕдИзмНоменклатуры = ПолучитьМассивВозможныхЕдиницИзмеренияНоменклатуры(ТекДанные.Номенклатура);
		Элементы.ТабличнаяЧастьЕдиницаИзмерения.СписокВыбора.Очистить();
		Для Каждого ЭлементВыборкаЕдИзм Из МассивЕдИзмНоменклатуры Цикл
			Элементы.ТабличнаяЧастьЕдиницаИзмерения.СписокВыбора.Добавить(ЭлементВыборкаЕдИзм);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ФормированиеМаршрута");
КонецПроцедуры


&НаКлиенте
Процедура ДатаДоставкиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ПодразделениеКонтрагента) Тогда
		РеквыОбъекта = БюджетныйНаСервере.ВернутьРеквизиты(Объект.ПодразделениеКонтрагента, "ВремяПоДнямНеделиПереключатель, ДатаДоставки, ДатаДоставкиДо");
		Если РеквыОбъекта.ВремяПоДнямНеделиПереключатель Тогда
			ЗаполнитьВремяДоставкиПоДнямНедели(Объект.ПодразделениеКонтрагента,Объект.ДатаДоставки,Объект.ДатаДоставкиДо);	
		//Иначе
		//	Объект.ДатаДоставки = НачалоДня(Объект.ДатаДоставки) + (РеквыОбъекта.ДатаДоставки - НачалоДня(РеквыОбъекта.ДатаДоставки));
		//	Объект.ДатаДоставкиДо = НачалоДня(Объект.ДатаДоставки) + (РеквыОбъекта.ДатаДоставкиДо - НачалоДня(РеквыОбъекта.ДатаДоставкиДо)); 
		КонецЕсли;
    КонецЕсли;
	//Объект.ДатаДоставкиДо = Объект.ДатаДоставки + 60*60*2; 
	Объект.ДатаПоступления = Объект.ДатаДоставки;
	
КонецПроцедуры


&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()

	ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
	ТекАдрес = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияНаДату(Объект.Организация, ВидКонтактнойИнформации).Представление;
	
	Элементы.АдресДоставки.СписокВыбора.Очистить();
	
	Если ЗначениеЗаполнено(ТекАдрес) Тогда
		Элементы.АдресДоставки.СписокВыбора.Добавить(ТекАдрес);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Объект.АдресДоставки) Тогда
		Элементы.АдресДоставки.СписокВыбора.Добавить(Объект.АдресДоставки);
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура ОснованиеДляДокументаНажатие(Элемент, СтандартнаяОбработка)
	
	Если ТипЗнч(ОснованиеДляДокумента) = Тип("Строка") Тогда
		СтандартнаяОбработка = Ложь; 
		ОписаниОповещения = Новый ОписаниеОповещения("ВыборЗначенияДокументаОснования",ЭтотОбъект);
		ПоказатьВыборИзМеню(ОписаниОповещения,ОснованиеДляДокументаСписок, Элементы.ОснованиеДляДокумента);
	КонецЕсли; 
	
КонецПроцедуры


&НаКлиенте
Процедура ВыборЗначенияДокументаОснования(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ПоказатьЗначение(,Результат.Значение);
	КонецЕсли;
	
КонецПроцедуры  

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");
	СписокСвойств = Неопределено;
	Если ЭтоВставкаИзБуфера Тогда
		
		ТаблицаТоваров = ВыбранноеЗначение.Данные;
		СписокСвойств = ВыбранноеЗначение.СписокСвойств;
		
	Иначе
		
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
		
	КонецЕсли;
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СтрокиДляЗаполненияСчетов = Новый Массив;
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара, СписокСвойств);
		СтрокиДляЗаполненияСчетов.Добавить(СтрокаТабличнойЧасти);
		
		сабОбщегоНазначенияБУХКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
		
	КонецЦикла;
	
	//СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляЗаполненияСчетов, ИмяТаблицы, Объект, Документы.СписаниеТоваров);
	
	Если ЭтоВставкаИзБуфера Тогда
		
		ВыбранноеЗначение.КоличествоДобавленныхСтрок = СтрокиДляЗаполненияСчетов.Количество();
		
	КонецЕсли;
	
	//ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаКлиенте
Процедура СкопироватьСтроки(Команда)

	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы.Форма].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	ИмяТекущейСтраницы = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	ИмяТаблицы = "";
	Если ИмяТекущейСтраницы = "ГруппаОсновное" Тогда
		
		ИмяТаблицы = Новый Структура;
    ИмяТаблицы.Вставить("Форма","ТабличнаяЧасть");
    ИмяТаблицы.Вставить("Документ","ТабличнаяЧасть");
		
	КонецЕсли;
	
	Возврат ИмяТаблицы;
	
КонецФункции

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы.Документ], 
		Элементы[ИмяТаблицы.Форма].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

	КонецПроцедуры
	
&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы.Документ);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)
	
	СписокСвойств = Новый Массив;
	
	Если ПараметрыВставки.ИмяТаблицы = "ТабличнаяЧасть" Тогда
		
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("Склад");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("Цена");
		СписокСвойств.Добавить("Сумма");
		СписокСвойств.Добавить("Доставка");
		СписокСвойств.Добавить("СуммаДоставки");
		СписокСвойств.Добавить("ВидДоставки");
		СписокСвойств.Добавить("СуммаБезНДС");
		СписокСвойств.Добавить("СтавкаНДС");
		СписокСвойств.Добавить("СуммаНДС");
		СписокСвойств.Добавить("ВидЦеныПоставщика");
		СписокСвойств.Добавить("ДатаПоступления");
		СписокСвойств.Добавить("ЕдиницаИзмерения");
		СписокСвойств.Добавить("КоличествоУпаковок");
		СписокСвойств.Добавить("ЦенаПодтвержденная");
		СписокСвойств.Добавить("КоличествоПодтвержденное");
		СписокСвойств.Добавить("СтатусПодтвержденияПозиции");
		СписокСвойств.Добавить("КоличествоВЗапайках");
		СписокСвойств.Добавить("КоличествоВУпаковке");
		
	КонецЕсли;
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
	ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)

	Доступность = Не Форма.ТолькоПросмотр И Доступность;
	Элементы = Форма.Элементы;
	Элементы.ТоварыВставитьСтроки.Доступность						 = Доступность;
	Элементы.ТоварыКонтекстноеМенюВставитьСтроки.Доступность		 = Доступность;
	Элементы.УслугиВставитьСтроки.Доступность						 = Доступность;
	Элементы.УслугиКонтекстноеМенюВставитьСтроки.Доступность		 = Доступность;
	
КонецПроцедуры

#КонецОбласти

#Область ПодборТоваров

&НаКлиенте
Процедура Подобрать(Команда)
	
	ОписаниеОповещенияПослеПодбора = Новый ОписаниеОповещения("ЗаполтитьТоварыПоПодбору",ЭтотОбъект);
	СтруктураПараметров = Новый Структура("Склад,Предприятие,Заголовок",Объект.Склад,Объект.Предприятие, "Подбор товаров для документа " + Объект.Ссылка);
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаДляПодбора",СтруктураПараметров,ЭтотОбъект,УникальныйИдентификатор,,,ОписаниеОповещенияПослеПодбора,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполтитьТоварыПоПодбору(Результат,ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если ЭтоАдресВременногоХранилища(Результат) Тогда
			ЗаполнитьПоПодборуНаСервере(Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПодборуНаСервере(АдресВХ)
	
	ТЗДанныеПодбора = ПолучитьИзВременногоХранилища(АдресВХ);	
	Если ТипЗнч(ТЗДанныеПодбора) = Тип("ТаблицаЗначений") Тогда
		Для Каждого СтрокаТовара Из ТЗДанныеПодбора Цикл
			НайденныеСтроки = Объект.ТабличнаяЧасть.НайтиСтроки(Новый Структура("Номенклатура,Цена",СтрокаТовара.Номенклатура,СтрокаТовара.Цена));
			Если НайденныеСтроки.Количество() > 0 Тогда
				ТекДанные = НайденныеСтроки[0];
				Если АльтернативнаяФорма Тогда
					ТекДанные.Количество = ТекДанные.Количество + СтрокаТовара.Количество; 
				Иначе
					ТекДанные.КоличествоУпаковок = ТекДанные.КоличествоУпаковок + СтрокаТовара.Количество; 
					ТекДанные.Количество = ТекДанные.КоэффициентПересчетаУпаковок * ТекДанные.КоличествоУпаковок;
				КонецЕсли;
				ТекДанные.Сумма = ТекДанные.Количество * ТекДанные.Цена;
				ТекРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.СтавкаНДС, "Ставка");
				Если НЕ ТекРеквизиты = Неопределено Тогда
					ТекДанные.СуммаНДС = ТекДанные.Сумма / ((100+ТекРеквизиты.Ставка)/100) * (ТекРеквизиты.Ставка/100);
				КонецЕсли;   
				Если АльтернативнаяФорма Тогда 
					Если ТипЗнч(ТекДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
						СтруктураВозврата = ПолучитьКоличествоВУпаковкеПоУмолчаниюДляНоменклатуры(ТекДанные.Номенклатура);
						ТекДанные.КоэффициентПересчетаУпаковок = СтруктураВозврата.Коэффициент;
						ПредставлениеУпаковки = СтруктураВозврата.Упаковка;
						ПредставлениеЕдИзмерения = ТекДанные.ЕдиницаИзмерения; 
					Иначе
						ТекДанные.КоэффициентПересчетаУпаковок = ПолучитьКоэффициентПересчетаУпаковок(ТекДанные.Номенклатура, ТекДанные.ЕдиницаИзмерения);
						ПредставлениеУпаковки = ТекДанные.ЕдиницаИзмерения; 
						ПредставлениеЕдИзмерения = ПолучитьПредставлениеЕдиницыУпаковки(ТекДанные.Номенклатура,ТекДанные.ЕдиницаИзмерения);
					КонецЕсли;
					ТекДанные.КоличествоВУпаковке = ТекДанные.КоэффициентПересчетаУпаковок;
					ТекДанные.КоличествоУпаковок = Цел(?(ТекДанные.КоэффициентПересчетаУпаковок = 0,0,ТекДанные.Количество / ТекДанные.КоэффициентПересчетаУпаковок)); 
					Если ТекДанные.КоличествоВУпаковке = 0 ИЛИ ТекДанные.КоличествоВУпаковке = 1 Тогда
						КолУпаковок = 0;
						КолЕдиниц = ТекДанные.Количество;
						ТекДанные.КоличествоУпаковокПредставление = "" + КолУпаковок + " " + ПредставлениеУпаковки + ","  +
						КолЕдиниц + " " + ПредставлениеЕдИзмерения;
					Иначе
						КолУпаковок = Цел(ТекДанные.Количество / ТекДанные.КоличествоВУпаковке);
						КолЕдиниц = ТекДанные.Количество - (КолУпаковок * ТекДанные.КоличествоВУпаковке);
						ТекДанные.КоличествоУпаковокПредставление = "" + КолУпаковок + " " + ПредставлениеУпаковки + ", " +
						КолЕдиниц + " " + ПредставлениеЕдИзмерения;
					КонецЕсли;
				КонецЕсли;
			Иначе
				НоваяСтрокаТовары = Объект.ТабличнаяЧасть.Добавить();
				НоваяСтрокаТовары.Номенклатура = СтрокаТовара.Номенклатура;
				Если АльтернативнаяФорма Тогда
					НоваяСтрокаТовары.Количество = СтрокаТовара.Количество; 
				Иначе
					НоваяСтрокаТовары.КоличествоУпаковок = СтрокаТовара.Количество; 
					НоваяСтрокаТовары.Количество = ТекДанные.КоэффициентПересчетаУпаковок * ТекДанные.КоличествоУпаковок;
				КонецЕсли;
				НоваяСтрокаТовары.Цена = СтрокаТовара.Цена;
				ТекДанные = НоваяСтрокаТовары; 
				Если АльтернативнаяФорма Тогда
					ТекДанные.ЕдиницаИзмерения = НоваяСтрокаТовары.Номенклатура.ЕдиницаИзмерения;
				Иначе
					ТекДанные.ЕдиницаИзмерения = ПолучитьЕдИзмНоменклатуры(ТекДанные.Номенклатура);
				КонецЕсли;

				МассивЕдИзмНоменклатуры = ПолучитьМассивВозможныхЕдиницИзмеренияНоменклатуры(ТекДанные.Номенклатура);
				Элементы.ТабличнаяЧастьЕдиницаИзмерения.СписокВыбора.Очистить();
				Для Каждого ЭлементВыборкаЕдИзм Из МассивЕдИзмНоменклатуры Цикл
					Элементы.ТабличнаяЧастьЕдиницаИзмерения.СписокВыбора.Добавить(ЭлементВыборкаЕдИзм);
				КонецЦикла;
				ТекДанные.КоэффициентПересчетаУпаковок = ПолучитьКоэффициентПересчетаУпаковок(ТекДанные.Номенклатура, ТекДанные.ЕдиницаИзмерения);
				ТекДанные.КоличествоВУпаковке = ТекДанные.КоэффициентПересчетаУпаковок;  
				Если АльтернативнаяФорма Тогда 
					ТекДанные.Количество = СтрокаТовара.Количество;
					ЗаполнитьПредставлениеУпаковок(ТекДанные);
				Иначе 
					ТекДанные.КоэффициентПересчетаУпаковок = ПолучитьКоэффициентПересчетаУпаковок(ТекДанные.Номенклатура, ТекДанные.ЕдиницаИзмерения);
					ТекДанные.КоличествоУпаковок = СтрокаТовара.Количество; 
					ТекДанные.Количество = ТекДанные.КоэффициентПересчетаУпаковок * ТекДанные.КоличествоУпаковок;
				КонецЕсли; 
				ТекДанные.КоличествоВУпаковке = ТекДанные.КоэффициентПересчетаУпаковок;  
				ТекДанные.Сумма = ТекДанные.Количество * ТекДанные.Цена;  
				Если ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
					ТекРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.Номенклатура, "СтавкаНДС, Код, Счет10, ВидСтавкиНДС, ЕдиницаИзмерения, Кратность, МинимальнаяПартия", Ложь);
					ТекДанные.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвВидовСтавокНДСБУХУУ().Получить(ТекРеквизиты.ВидСтавкиНДС);;
					ТекДанные.ЕдиницаИзмерения = ТекРеквизиты.ЕдиницаИзмерения;
					ТекРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.СтавкаНДС, "Ставка");
					Если НЕ ТекРеквизиты = Неопределено Тогда
						ТекДанные.СуммаНДС = ТекДанные.Сумма / ((100+ТекРеквизиты.Ставка)/100) * (ТекРеквизиты.Ставка/100);
					КонецЕсли;
				КонецЕсли;
				Если ЗначениеЗаполнено(Объект.Склад) Тогда
					ТекДанные.Склад = Объект.Склад;	
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеЕдиницыУпаковки(Номенклатура = Неопределено, ЕдиницаИзмерения = Неопределено, ДляОднойНоменклатуры = Истина, ТЗДанные = Неопределено)
	
	Если ДляОднойНоменклатуры Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УпаковкиНоменклатуры.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения 
		|ИЗ
		|	РегистрСведений.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
		|ГДЕ
		|	УпаковкиНоменклатуры.Номенклатура = &Номенклатура
		|	И УпаковкиНоменклатуры.Упаковка = &Упаковка";
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("Упаковка", ЕдиницаИзмерения);
		
		Выборка = запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.ЕдиницаИзмерения;		
		КонецЦикла;
		
		Возврат ЕдиницаИзмерения.Наименование;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗНоменклатураУпаковки.Номенклатура КАК Номенклатура,
		|	ТЗНоменклатураУпаковки.ЕдиницаИзмерения КАК Упаковка
		|ПОМЕСТИТЬ ВТНоменклатураУпаковка
		|ИЗ
		|	&ТЗНоменклатураУпаковки КАК ТЗНоменклатураУпаковки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(УпаковкиНоменклатуры.ЕдиницаИзмерения.Представление, ВТНоменклатураУпаковка.Упаковка) КАК ЕдиницаИзмерения, 
		|	ВТНоменклатураУпаковка.Упаковка КАК Упаковка,
		|	ВТНоменклатураУпаковка.Упаковка.Представление КАК УпаковкаПредставление,
		|	ВТНоменклатураУпаковка.Номенклатура КАК Номенклатура
		|ИЗ
		|	ВТНоменклатураУпаковка КАК ВТНоменклатураУпаковка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
		|		ПО ВТНоменклатураУпаковка.Номенклатура = УпаковкиНоменклатуры.Номенклатура
		|			И ВТНоменклатураУпаковка.Упаковка = УпаковкиНоменклатуры.Упаковка";
		Запрос.УстановитьПараметр("ТЗНоменклатураУпаковки",ТЗДанные);
		
		Выборка = запрос.Выполнить().Выбрать();
		Возврат Выборка;
	КонецЕсли;
	
КонецФункции	


&НаКлиенте
Процедура ПодразделениеКонтрагентаПриИзменении(Элемент)  
	
	АдресДоставкиОбработкаВыбораЗавершение(Объект.ПодразделениеКонтрагента, Новый Структура); 
	Если ЗначениеЗаполнено(Объект.ПодразделениеКонтрагента) Тогда
		РеквыОбъекта = БюджетныйНаСервере.ВернутьРеквизиты(Объект.ПодразделениеКонтрагента, "Склад"); 
		Если ЗначениеЗаполнено(РеквыОбъекта.Склад) Тогда
			Объект.Склад = РеквыОбъекта.Склад;
			Для Каждого ТекСтрокаТЧ Из Объект.ТабличнаяЧасть Цикл
				ТекСтрокаТЧ.Склад = РеквыОбъекта.Склад;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура АдресДоставкиОбработкаВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт  
	

	Если Результат = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	Если ЗначениеЗаполнено(Результат) Тогда 
		
		
		РеквыОбъекта = БюджетныйНаСервере.ВернутьРеквизиты(Результат, "Адрес, Ответственный, Выразить(Спр.Ответственный КАК Справочник.СотрудникиКонтрагентов).Телефон КАК ОтветственныйТелефон, ДатаДоставки, ДатаДоставкиДо, МаршрутДоставки, ВремяПоДнямНеделиПереключатель"); 
		Объект.АдресДоставки = РеквыОбъекта.Адрес;
		Объект.МаршрутДоставки = РеквыОбъекта.МаршрутДоставки;
		Объект.МенеджерКонтрагента = РеквыОбъекта.Ответственный;
		Объект.Телефон = РеквыОбъекта.ОтветственныйТелефон;
		Если РеквыОбъекта.ВремяПоДнямНеделиПереключатель Тогда
			ЗаполнитьВремяДоставкиПоДнямНедели(Результат,Объект.ДатаДоставки,Объект.ДатаДоставкиДо);	
		Иначе
			Объект.ДатаДоставки = НачалоДня(Объект.ДатаДоставки) + (РеквыОбъекта.ДатаДоставки - НачалоДня(РеквыОбъекта.ДатаДоставки));
			Объект.ДатаДоставкиДо = НачалоДня(Объект.ДатаДоставки) + (РеквыОбъекта.ДатаДоставкиДо - НачалоДня(РеквыОбъекта.ДатаДоставкиДо));
		КонецЕсли;

	Иначе
		Объект.АдресДоставки = "";
		Объект.МаршрутДоставки = ПредопределенноеЗначение("Справочник.МаршрутыДоставки.ПустаяСсылка");
		Объект.МенеджерКонтрагента = ПредопределенноеЗначение("Справочник.СотрудникиКонтрагентов.ПустаяСсылка");
		Объект.Телефон = "";
		//Объект.ДатаДоставки = Дата(1,1,1);
		//Объект.ДатаДоставкиДо = Дата(1,1,1);
	КонецЕсли;
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьВремяДоставкиПоДнямНедели(Результат,ДатаДоставки,ДатаДоставкиДо)
	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.ПодразделенияКонтрагентов") Тогда
		РеквыОбъекта = БюджетныйНаСервере.ВернутьРеквизиты(Результат, "ПонедельникДатаДоставки, ПонедельникДатаДоставкиДо, 
		|ВторникДатаДоставки, ВторникДатаДоставкиДо, СредаДатаДоставки, СредаДатаДоставкиДо,ЧетвергДатаДоставки,ЧетвергДатаДоставкиДо,
		|ПятницаДатаДоставки,ПятницаДатаДоставкиДо,СубботаДатаДоставки,СубботаДатаДоставкиДо,ВоскресеньеДатаДоставки,ВоскресеньеДатаДоставкиДо");
		Если ЗначениеЗаполнено(ДатаДоставки) Тогда
			ДеньНеделиДатыДоставки = ДеньНедели(ДатаДоставки);
			Если ДеньНеделиДатыДоставки = 1 Тогда
				ДатаДоставки = НачалоДня(ДатаДоставки) + (РеквыОбъекта.ПонедельникДатаДоставки - НачалоДня(РеквыОбъекта.ПонедельникДатаДоставки));
				ДатаДоставкиДо = НачалоДня(ДатаДоставки) + (РеквыОбъекта.ПонедельникДатаДоставкиДо - НачалоДня(РеквыОбъекта.ПонедельникДатаДоставкиДо)); 
			ИначеЕсли ДеньНеделиДатыДоставки = 2 Тогда
				ДатаДоставки = НачалоДня(ДатаДоставки) + (РеквыОбъекта.ВторникДатаДоставки - НачалоДня(РеквыОбъекта.ВторникДатаДоставки));
				ДатаДоставкиДо = НачалоДня(ДатаДоставки) + (РеквыОбъекта.ВторникДатаДоставкиДо - НачалоДня(РеквыОбъекта.ВторникДатаДоставкиДо)); 
			ИначеЕсли ДеньНеделиДатыДоставки = 3 Тогда
				ДатаДоставки = НачалоДня(ДатаДоставки) + (РеквыОбъекта.СредаДатаДоставки - НачалоДня(РеквыОбъекта.СредаДатаДоставки));
				ДатаДоставкиДо = НачалоДня(ДатаДоставки) + (РеквыОбъекта.СредаДатаДоставкиДо - НачалоДня(РеквыОбъекта.СредаДатаДоставкиДо));
			ИначеЕсли ДеньНеделиДатыДоставки = 4 Тогда
				ДатаДоставки = НачалоДня(ДатаДоставки) + (РеквыОбъекта.ЧетвергДатаДоставки - НачалоДня(РеквыОбъекта.ЧетвергДатаДоставки));
				ДатаДоставкиДо = НачалоДня(ДатаДоставки) + (РеквыОбъекта.ЧетвергДатаДоставкиДо - НачалоДня(РеквыОбъекта.ЧетвергДатаДоставкиДо));
			ИначеЕсли ДеньНеделиДатыДоставки = 5 Тогда
				ДатаДоставки = НачалоДня(ДатаДоставки) + (РеквыОбъекта.ПятницаДатаДоставки - НачалоДня(РеквыОбъекта.ПятницаДатаДоставки));
				ДатаДоставкиДо = НачалоДня(ДатаДоставки) + (РеквыОбъекта.ПятницаДатаДоставкиДо - НачалоДня(РеквыОбъекта.ПятницаДатаДоставкиДо));
			ИначеЕсли ДеньНеделиДатыДоставки = 6 Тогда
				ДатаДоставки = НачалоДня(ДатаДоставки) + (РеквыОбъекта.СубботаДатаДоставки - НачалоДня(РеквыОбъекта.СубботаДатаДоставки));
				ДатаДоставкиДо = НачалоДня(ДатаДоставки) + (РеквыОбъекта.СубботаДатаДоставкиДо - НачалоДня(РеквыОбъекта.СубботаДатаДоставкиДо));
			ИначеЕсли ДеньНеделиДатыДоставки = 7 Тогда
				ДатаДоставки = НачалоДня(ДатаДоставки) + (РеквыОбъекта.ВоскресеньеДатаДоставки - НачалоДня(РеквыОбъекта.ВоскресеньеДатаДоставки));
				ДатаДоставкиДо = НачалоДня(ДатаДоставки) + (РеквыОбъекта.ВоскресеньеДатаДоставкиДо - НачалоДня(РеквыОбъекта.ВоскресеньеДатаДоставкиДо));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКоличествоВУпаковкеПоУмолчаниюДляНоменклатуры(Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковкиНоменклатуры.Коэффициент КАК Коэффициент,
	|	УпаковкиНоменклатуры.ОсновнаяУпаковка КАК ОсновнаяУпаковка,
	|	УпаковкиНоменклатуры.Упаковка.Представление КАК Упаковка
	|ИЗ
	|	РегистрСведений.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|ГДЕ
	|	УпаковкиНоменклатуры.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	СтруктураВозврата = Новый Структура("Упаковка,Коэффициент");
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Количество() > 1 Тогда
		Пока Выборка.Следующий() Цикл
			Если Выборка.ОсновнаяУпаковка Тогда
				СтруктураВозврата.Упаковка = Выборка.Упаковка;
				СтруктураВозврата.Коэффициент = Выборка.Коэффициент;
				Возврат СтруктураВозврата; 
			КонецЕсли;
		КонецЦикла;
		Выборка.Сбросить();
		Выборка.Следующий(); 
		СтруктураВозврата.Упаковка = Выборка.Упаковка;
		СтруктураВозврата.Коэффициент = Выборка.Коэффициент;
		Возврат СтруктураВозврата; 
	Иначе
		Если Выборка.Следующий() Тогда
			СтруктураВозврата.Упаковка = Выборка.Упаковка;
			СтруктураВозврата.Коэффициент = Выборка.Коэффициент;
			Возврат СтруктураВозврата; 
		КонецЕсли;
	КонецЕсли; 
	СтруктураВозврата.Упаковка = "уп.";
	СтруктураВозврата.Коэффициент = 1;
	Возврат СтруктураВозврата; 
	
КонецФункции


&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеУпаковок(ТекДанные)
	
	Если ТипЗнч(ТекДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		СтруктураВозврата = ПолучитьКоличествоВУпаковкеПоУмолчаниюДляНоменклатуры(ТекДанные.Номенклатура);
		ТекДанные.КоэффициентПересчетаУпаковок = СтруктураВозврата.Коэффициент;
		ПредставлениеУпаковки = СтруктураВозврата.Упаковка;
		ПредставлениеЕдИзмерения = ТекДанные.ЕдиницаИзмерения; 
	Иначе
		ТекДанные.КоэффициентПересчетаУпаковок = ПолучитьКоэффициентПересчетаУпаковок(ТекДанные.Номенклатура, ТекДанные.ЕдиницаИзмерения);
		ПредставлениеУпаковки = ТекДанные.ЕдиницаИзмерения; 
		ПредставлениеЕдИзмерения = ПолучитьПредставлениеЕдиницыУпаковки(ТекДанные.Номенклатура,ТекДанные.ЕдиницаИзмерения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДанные.ЕдиницаИзмерения) И ЗначениеЗаполнено(ТекДанные.КоэффициентПересчетаУпаковок) Тогда
		ТекДанные.КоличествоВУпаковкеПредставление = "(" +  Строка(ТекДанные.КоэффициентПересчетаУпаковок) + " " + ПредставлениеЕдИзмерения +")";
	Иначе
		ТекДанные.КоличествоВУпаковкеПредставление = Строка(ТекДанные.КоэффициентПересчетаУпаковок);
	КонецЕсли;
	Если ТекДанные.КоэффициентПересчетаУпаковок = 0 ИЛИ ТекДанные.КоэффициентПересчетаУпаковок = 1 Тогда
		КолУпаковок = 0;
		КолЕдиниц = ТекДанные.Количество;
		ТекДанные.КоличествоУпаковокПредставление = "" + КолУпаковок + " "  + ПредставлениеУпаковки + "," +
		КолЕдиниц + " " + ПредставлениеЕдИзмерения;
	Иначе
		КолУпаковок = Цел(ТекДанные.Количество / ТекДанные.КоэффициентПересчетаУпаковок);
		КолЕдиниц = ТекДанные.Количество - (КолУпаковок * ТекДанные.КоэффициентПересчетаУпаковок);
		ТекДанные.КоличествоУпаковокПредставление = "" + КолУпаковок + " " + ПредставлениеУпаковки + ", " +
		КолЕдиниц + " " + ПредставлениеЕдИзмерения;
	КонецЕсли; 
	ТекДанные.КоличествоУпаковок = Цел(?(ТекДанные.КоэффициентПересчетаУпаковок = 0,0,ТекДанные.Количество / ТекДанные.КоэффициентПересчетаУпаковок)); 
    ТекДанные.КоличествоВУпаковке = ТекДанные.КоэффициентПересчетаУпаковок;  
	
КонецПроцедуры


