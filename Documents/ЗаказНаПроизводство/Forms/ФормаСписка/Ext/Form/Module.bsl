
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	БюджетныйНаСервере.ДействияПриСозданииФормыДокумента(ЭтаФорма);
	
	Если Параметры.Свойство("ВидЗаказа") Тогда
		ЭлементыДляУдаления = Новый Массив;
		
		ЭлементыОтбора = Список.Отбор.Элементы;
		ПолеКомпоновки = Новый ПолеКомпоновкиДанных("ВидОперации");
		Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
			Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
				И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки Тогда
				ЭлементыДляУдаления.Добавить(ЭлементОтбора);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ЭлементОтбораДляУдаления Из ЭлементыДляУдаления Цикл
			ЭлементыОтбора.Удалить(ЭлементОтбораДляУдаления);
		КонецЦикла;	
		
		ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ВидОперации");	
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование  = Истина;
		//Если Параметры.ВидЗаказа = "ЗаказНаПеремещение" Тогда
		//	ЭлементОтбора.ПравоеЗначение = Перечисления.ВидыЗаказов.ВнутреннееПеремещение;
		//	Если НЕ Элементы.Найти("ФормаДокументУЧ_ВозвратТоваровПоставщикуСоздатьНаОсновании") = Неопределено Тогда
		//		Элементы.ФормаДокументУЧ_ВозвратТоваровПоставщикуСоздатьНаОсновании.Видимость = Ложь;
		//	КонецЕсли;
		//	Если НЕ Элементы.Найти("ФормаДокументУЧ_ПоступлениеТоваровСоздатьНаОсновании") = Неопределено Тогда
		//		Элементы.ФормаДокументУЧ_ПоступлениеТоваровСоздатьНаОсновании.Видимость = Ложь;
		//	КонецЕсли;
		//ИначеЕсли Параметры.ВидЗаказа = "ЗаказПоставщику" Тогда
		//	ЭлементОтбора.ПравоеЗначение = Перечисления.ВидыЗаказов.ЗакупкаТоваров;
		//	Если НЕ Элементы.Найти("ФормаДокументУЧ_ВозвратТоваровПоставщикуСоздатьНаОсновании") = Неопределено Тогда
		//		Элементы.ФормаДокументУЧ_ВозвратТоваровПоставщикуСоздатьНаОсновании.Видимость = Ложь;
		//	КонецЕсли;
		//	Если НЕ Элементы.Найти("ФормаДокументУЧ_ПеремещениеТоваровСоздатьНаОсновании") = Неопределено Тогда
		//		Элементы.ФормаДокументУЧ_ПеремещениеТоваровСоздатьНаОсновании.Видимость = Ложь;
		//	КонецЕсли;
		//	Если НЕ Элементы.Найти("ФормаДокументУЧ_РеализацияСоздатьНаОсновании") = Неопределено Тогда
		//		Элементы.ФормаДокументУЧ_РеализацияСоздатьНаОсновании.Видимость = Истина;
		//	КонецЕсли;
		//ИначеЕсли Параметры.ВидЗаказа = "ЗаказНаВозврат" Тогда
		//	ЭлементОтбора.ПравоеЗначение = Перечисления.ВидыЗаказов.ВозвратБрака;
		//	Если НЕ Элементы.Найти("ФормаДокументУЧ_ПоступлениеТоваровСоздатьНаОсновании") = Неопределено Тогда
		//		Элементы.ФормаДокументУЧ_ПоступлениеТоваровСоздатьНаОсновании.Видимость = Ложь;
		//	КонецЕсли;
		//	Если НЕ Элементы.Найти("ФормаДокументУЧ_ПеремещениеТоваровСоздатьНаОсновании") = Неопределено Тогда
		//		Элементы.ФормаДокументУЧ_ПеремещениеТоваровСоздатьНаОсновании.Видимость = Ложь;
		//	КонецЕсли;
		//	Если НЕ Элементы.Найти("ФормаДокументУЧ_РеализацияСоздатьНаОсновании") = Неопределено Тогда
		//		Элементы.ФормаДокументУЧ_РеализацияСоздатьНаОсновании.Видимость = Ложь;
		//	КонецЕсли;
		//КонецЕсли;	
	КонецЕсли;
	
	//Элементы.ФормаЗагрузитьЗаказыИзExcel.Видимость = (ПравоДоступа("Использование", Метаданные.Обработки.ЗагрузкаКарточкиExcel));		
	Элементы.Список.РежимВыбора = Параметры.РежимВыбора;
	
	Если РольДоступна("сабМенеждерПоПроизводству") Тогда
		ТолькоМои = Истина;
		//Элементы.ТолькоМои.Доступность = РольДоступна("сабРуководительПоПродажам");
		ТолькоОткрытые = Истина;
	КонецЕсли;
	Список.Параметры.УстановитьЗначениеПараметра("ТолькоМои", ТолькоМои);
	Список.Параметры.УстановитьЗначениеПараметра("ТолькоОткрытые", ТолькоОткрытые);
	Список.Параметры.УстановитьЗначениеПараметра("Пользователи", БПСервер.ПолучитьМассивПользователей());
	
	ВидимостьПредприятия = БюджетныйНаСервере.ПолучитьПредприятия().Количество() > 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗаказыИзExcel(Команда)
	ОткрытьФорму("Обработка.ЗагрузкаЗаказовПоставщикуИзExcel.Форма.Форма");
КонецПроцедуры

&НаКлиенте
Процедура СтатусСогласовано(Команда)
	ВыдСтроки = Элементы.Список.ВыделенныеСтроки;  
	МЗаказыСОдинПартиями = Новый Массив;
	ТекстЗаказыСОдинПартиями = "";
	Точка = Неопределено;
	СтатусСогласованоНаСервере(ВыдСтроки, Команда.Имя,МЗаказыСОдинПартиями,ТекстЗаказыСОдинПартиями,Точка);
	Если МЗаказыСОдинПартиями.Количество() > 0 Тогда
		 ВопросДляИзмененияСтатусаЗаказовСОдинаковымЛотом(МЗаказыСОдинПартиями,ТекстЗаказыСОдинПартиями,Точка);	
	Иначе
		Элементы.Список.Обновить();
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СтатусСогласованоНаСервере(Заявки, ИмяКоманды, МЗаказыСОдинПартиями,ТекстЗаказыСОдинПартиями,Точка)
	
	Если ИмяКоманды = "СтатусСогласовано" Тогда
		Точка = Перечисления.СтатусыЗаказовНаПроизводство.КПроизводству;
	ИначеЕсли ИмяКоманды = "СтатусВПроизводстве" Тогда
		Точка = Перечисления.СтатусыЗаказовНаПроизводство.ВРаботе;
	ИначеЕсли ИмяКоманды = "СтатусНеСогласовано" Тогда
		Точка = Перечисления.СтатусыЗаказовНаПроизводство.Новый;
	ИначеЕсли ИмяКоманды = "СтатусКОплате" Тогда
		Точка = Перечисления.СтатусыЗаказовНаПроизводство.Произведен;
	ИначеЕсли ИмяКоманды = "СтатусОтменено" Тогда
		Точка = Перечисления.СтатусыЗаказовНаПроизводство.Отменен;
	Иначе
		Точка = Перечисления.СтатусыЗаказовНаПроизводство.Новый;
	КонецЕсли;
	
	МСсылокТекЗаказов = Новый Массив;

	Для каждого ТекЗаявка Из Заявки Цикл
		Об = ТекЗаявка.ПолучитьОбъект(); 
		Если Об.Статус <> Точка Тогда
			МСсылокТекЗаказов.Добавить(ТекЗаявка);
		КонецЕсли;
		Об.Статус = Точка;
		Если Об.Проведен Тогда
			Об.Записать(РежимЗаписиДокумента.Проведение);
		Иначе	
			Об.Записать();
		КонецЕсли;
	КонецЦикла;  
	//Поиск заказов с таким же лотом
	Если МСсылокТекЗаказов.Количество() > 0 Тогда
		ЗаполнитьМассивЗаказыСОдинаковымиПартиями(МЗаказыСОдинПартиями,ТекстЗаказыСОдинПартиями,МСсылокТекЗаказов,Точка);	
    КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоМоиПриИзменении(Элемент)
	Список.Параметры.УстановитьЗначениеПараметра("ТолькоМои", ТолькоМои);
	Список.Параметры.УстановитьЗначениеПараметра("ТолькоОткрытые", ТолькоОткрытые);
КонецПроцедуры

&НаКлиенте
Процедура ТолькоОткрытыеПриИзменении(Элемент)
	Список.Параметры.УстановитьЗначениеПараметра("ТолькоМои", ТолькоМои);
	Список.Параметры.УстановитьЗначениеПараметра("ТолькоОткрытые", ТолькоОткрытые);
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Не Элементы.Список.РежимВыбора Тогда
		Если Поле.Имя = "Статус" Тогда
			СтандартнаяОбработка = Ложь;
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.ЗагрузитьЗначения(ПолучитьСписокСтатусовЗаказа());
			ТекЗнач = Неопределено;

			ПоказатьВыборИзСписка(Новый ОписаниеОповещения("СписокВыборЗавершение", ЭтаФорма), СписокЗначений, , СписокЗначений.НайтиПоЗначению(Элементы.Список.ТекущиеДанные.Статус));
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокВыборЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ТекЗнач = ВыбранныйЭлемент;
	Если Не ТекЗнач = Неопределено Тогда
		МЗаказыСОдинПартиями = Новый Массив; 
		ТекстЗаказыСОдинПартиями = "";
		ЗаписатьНовыйСтатусЗаказа(Элементы.Список.ТекущаяСтрока, ТекЗнач.Значение,МЗаказыСОдинПартиями,ТекстЗаказыСОдинПартиями);
		Если МЗаказыСОдинПартиями.Количество() > 0 Тогда
            ВопросДляИзмененияСтатусаЗаказовСОдинаковымЛотом(МЗаказыСОдинПартиями,ТекстЗаказыСОдинПартиями,ТекЗнач.Значение);
		Иначе
			Элементы.Список.Обновить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ВопросДляИзмененияСтатусаЗаказовСОдинаковымЛотом(МЗаказыСОдинПартиями,ТекстЗаказыСОдинПартиями,НовыйСтатус)
	
	Обещание = ВопросАсинх(ТекстЗаказыСОдинПартиями, РежимДиалогаВопрос.ДаНет);
	Результат = Ждать Обещание;	
	Если Результат = КодВозвратаДиалога.Да Тогда
		РезультатИзмененияСтатусаЗаказовТекст = "";
		УстановитьСтатусДляЗаказовСОдинаковымЛотом(МЗаказыСОдинПартиями,НовыйСтатус,РезультатИзмененияСтатусаЗаказовТекст); 
		ПоказатьПредупреждение(,РезультатИзмененияСтатусаЗаказовТекст);
	КонецЕсли;
	Элементы.Список.Обновить();
	
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура УстановитьСтатусДляЗаказовСОдинаковымЛотом(МЗаказыСОдинПартиями,НовыйСтатусЗаказа,РезультатИзмененияСтатусаЗаказовТекст)

	Документы.ЗаказНаПроизводство.УстановитьСтатусДляЗаказовСОдинаковымЛотом(МЗаказыСОдинПартиями,НовыйСтатусЗаказа,РезультатИзмененияСтатусаЗаказовТекст);
	//РезультатИзмененияСтатусаЗаказовТекст = "Результат обновления статуса """ + НовыйСтатусЗаказа + """ для заказов с одинаковыми лотами:";
	//УстановитьПривилегированныйРежим(Истина);
	//Для каждого ЗаказНаПеремещениеСсылка Из МЗаказыСОдинПартиями Цикл
	//	ЗаказНаПеремещениеОбъект = ЗаказНаПеремещениеСсылка.ПолучитьОбъект();
	//	ЗаказНаПеремещениеОбъект.Статус	= НовыйСтатусЗаказа;
	//	Попытка
	//		Если ЗаказНаПеремещениеОбъект.Проведен Тогда
	//			ЗаказНаПеремещениеОбъект.Записать(РежимЗаписиДокумента.Проведение);
	//		Иначе	
	//			ЗаказНаПеремещениеОбъект.Записать();
	//		КонецЕсли;
	//		РезультатИзмененияСтатусаЗаказовТекст = РезультатИзмененияСтатусаЗаказовТекст + Символы.ПС + ЗаказНаПеремещениеСсылка.Номер
	//		+ " от " + Формат(ЗаказНаПеремещениеСсылка.Дата,"ДФ=dd.MM.yyyy") + " - установлен";
	//	Исключение
	//		РезультатИзмененияСтатусаЗаказовТекст = РезультатИзмененияСтатусаЗаказовТекст + Символы.ПС + ЗаказНаПеремещениеСсылка.Номер
	//		+ " от " + Формат(ЗаказНаПеремещениеСсылка.Дата,"ДФ=dd.MM.yyyy") + " - не установлен (" + ОписаниеОшибки() + ")";
	//	КонецПопытки;
	//КонецЦикла;
	//УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокСтатусовЗаказа()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СтатусыЗаказовНаПроизводство.Ссылка КАК Ссылка
	|ИЗ
	|	Перечисление.СтатусыЗаказовНаПроизводство КАК СтатусыЗаказовНаПроизводство";
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции // ()

&НаСервереБезКонтекста
Процедура ЗаписатьНовыйСтатусЗаказа(Документ, НовыйСтатусЗаказа, МЗаказыСОдинПартиями,ТекстЗаказыСОдинПартиями)
	ТекБанкОб = Документ.ПолучитьОбъект();
	Если ТекБанкОб.Статус <> НовыйСтатусЗаказа Тогда
		СтатусИзменен = Истина; 
	Иначе
		СтатусИзменен = Ложь;
	КонецЕсли;
	ТекБанкОб.Статус = НовыйСтатусЗаказа;
	Если ТекБанкОб.Проведен Тогда
		ТекБанкОб.Записать(РежимЗаписиДокумента.Проведение);
	Иначе	
		ТекБанкОб.Записать();
	КонецЕсли;
	//Поиск заказов с таким же лотом
	Если СтатусИзменен Тогда
		МСсылокТекЗаказов = Новый Массив;
		МСсылокТекЗаказов.Добавить(ТекБанкОб.Ссылка);
		ЗаполнитьМассивЗаказыСОдинаковымиПартиями(МЗаказыСОдинПартиями,ТекстЗаказыСОдинПартиями,МСсылокТекЗаказов,НовыйСтатусЗаказа);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьМассивЗаказыСОдинаковымиПартиями(МЗаказыСОдинПартиями,ТекстЗаказыСОдинПартиями,МСсылокТекЗаказов,НовыйСтатусЗаказа)
	
	Документы.ЗаказНаПроизводство.ЗаполнитьМассивЗаказыСОдинаковымиПартиями(МЗаказыСОдинПартиями,ТекстЗаказыСОдинПартиями,МСсылокТекЗаказов,НовыйСтатусЗаказа);
	//УстановитьПривилегированныйРежим(Истина);
	//МПартий = Новый Массив;
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	ЗаказНаПроизводство.Партия КАК Партия
	//|ИЗ
	//|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	//|ГДЕ
	//|	ЗаказНаПроизводство.Ссылка В(&МСсылокТекЗаказов)
	//|	И СОКРЛП(ЗаказНаПроизводство.Партия) <> """"";
	//
	//Запрос.УстановитьПараметр("МСсылокТекЗаказов", МСсылокТекЗаказов);
	//РезультатЗапросаПартии = Запрос.Выполнить();
	//ВыборкаПартии = РезультатЗапросаПартии.Выбрать();
	//Пока ВыборкаПартии.Следующий() Цикл
	//	МПартий.Добавить(ВыборкаПартии.Партия);
	//КонецЦикла;
	//
	//Если МПартий.Количество() > 0 Тогда
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ЗаказНаПроизводство.Ссылка КАК Ссылка,
	//	|	ЗаказНаПроизводство.Представление КАК Представление
	//	|ИЗ
	//	|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	//	|ГДЕ
	//	|	НЕ ЗаказНаПроизводство.Ссылка В (&МассивСсылкиТекЗаказов)
	//	|	И НЕ ЗаказНаПроизводство.ПометкаУдаления
	//	|	И СОКРЛП(ЗаказНаПроизводство.Партия) В (&МассивПартий)
	//	|	И ЗаказНаПроизводство.Статус <> &Статус";
	//	
	//	Запрос.УстановитьПараметр("Статус", НовыйСтатусЗаказа);
	//	Запрос.УстановитьПараметр("МассивПартий", МПартий);
	//	Запрос.УстановитьПараметр("МассивСсылкиТекЗаказов", МСсылокТекЗаказов);
	//	
	//	РезультатЗапроса = Запрос.Выполнить();
	//	Если Не РезультатЗапроса.Пустой() Тогда
	//		ТекстЗаказыСОдинПартиями = ТекстЗаказыСОдинПартиями + "Установить новый статус для заказов с одинаковым лотом: ";	
	//	КонецЕсли;
	//	Выборка = РезультатЗапроса.Выбрать();
	//	Пока Выборка.Следующий() Цикл
	//		МЗаказыСОдинПартиями.Добавить(Выборка.Ссылка);
	//		ТекстЗаказыСОдинПартиями = ТекстЗаказыСОдинПартиями + Символы.ПС + Выборка.Представление;
	//	КонецЦикла; 
	//КонецЕсли;
	//УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОповеститьРегистрОбработанных" Тогда
		Элементы.Список.Обновить();;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
КонецПроцедуры





