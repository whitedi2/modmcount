
&Вместо("ОбработкаЗаполнения")
Процедура УУ_ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказКлиента") Тогда 
		
		//+lud 17/10/22 Проверка повторного создания документов из заказа по обр. №7861 от 12.10.2022 {
		Отказ = сабОперОбщегоНазначения.ПроверкаСозданияНаОснованииНаСервере(ДанныеЗаполнения, "", СтандартнаяОбработка, ТипЗнч(Ссылка));
		Если Отказ.Признак = "##УжеСоздан" Тогда
			ВызватьИсключение "На основании заказа уже введен документ " + Отказ.Ссылка;
		ИначеЕсли Отказ.Признак = "##НеПроведен" Тогда
			ВызватьИсключение "Документ заказ клиента не проведен. Ввод на основании не возможен.";
		КонецЕсли;
		//}
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения,,"Дата, Номер, Проведен");
		ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Продажа;
		ЭтотОбъект.Заказ = ДанныеЗаполнения;
		ЭтотОбъект.СуммаВключаетНДС = Истина;
		ЭтотОбъект.ДокументБезНДС = Ложь;
		ЭтотОбъект.Дата = ДанныеЗаполнения.ДатаПоступления;
		//Ответственным текущий пользователь
		ЭтотОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		//
		Если Не ЗначениеЗаполнено(ЭтотОбъект.ВалютаДокумента) Тогда
			ЭтотОбъект.ВалютаДокумента = УЧ_Сервер.НациональнаяВалюта();
		КонецЕсли;
		//ЭтотОбъект.Комментарий = Строка(ДанныеЗаполнения.Контрагент) + ?(ЗначениеЗаполнено(ДанныеЗаполнения.ПодразделениеКонтрагента), " (" + Строка(ДанныеЗаполнения.ПодразделениеКонтрагента) + ")", "");
		//ЭтотОбъект.СчетКасса = ПланыСчетов.Хозрасчетный.НайтиПоКоду("50.01");
		//ЭтотОбъект.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Розничная выручка", Истина);
		//ЭтотОбъект.ДоговорКонтрагента = ДанныеЗаполнения.Договор;
		ЭтотОбъект.ТипЦен = ДанныеЗаполнения.Договор.ТипЦен;
		Для каждого ТекСтрока Из ДанныеЗаполнения.ТабличнаяЧасть Цикл
			НоваяСтрока = ЭтотОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСУУБУХ().Получить(ТекСтрока.СтавкаНДС);
		КонецЦикла;
		
		НовОбъект = Документы.РозничнаяПродажа.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(НовОбъект, ДанныеЗаполнения,,"Дата, Номер");
		НовОбъект.ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Продажа;
		НовОбъект.Заказ = ДанныеЗаполнения;
		НовОбъект.СуммаВключаетНДС = Истина;
		НовОбъект.ДокументБезНДС = Ложь;
		Для каждого ТекСтрока Из ДанныеЗаполнения.ТабличнаяЧасть Цикл
			НоваяСтрока = НовОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСУУБУХ().Получить(ТекСтрока.СтавкаНДС);
		КонецЦикла;
		
		ЗаполнениеДокументов.Заполнить(НовОбъект, ДанныеЗаполнения);
		
		ЭтотОбъект.Товары.Очистить();
		Для каждого ТекСтрока Из НовОбъект.Товары Цикл
			НоваяСтрока = ЭтотОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЦикла;
	Иначе
		ПродолжитьВызов();
	КонецЕсли;
КонецПроцедуры

&Перед("ПередЗаписью")
Процедура УУ_ПередЗаписью1(Отказ, РежимЗаписи, РежимПроведения) 

	Если Модифицированность() Тогда
		Если ДополнительныеСвойства.Свойство("НеДобавлятьЗаписьВРегистрИзмененных") Тогда
			Если Не ДополнительныеСвойства.НеДобавлятьЗаписьВРегистрИзмененных Тогда
				сабОбщегоНазначенияБУХ.УстановитьМодифицированностьБУДокумента(ЭтотОбъект, Ссылка, РежимЗаписи);
			КонецЕсли;
		Иначе
			сабОбщегоНазначенияБУХ.УстановитьМодифицированностьБУДокумента(ЭтотОбъект, Ссылка, РежимЗаписи);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&После("ПередЗаписью")
Процедура УУ_ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	//меняем статус заказа
	Если НЕ ДополнительныеСвойства.Свойство("НеИзменятьСтатусЗаказа") И ЗначениеЗаполнено(Заказ) И ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказКлиента") И Не Заказ.Статус = Перечисления.СтатусыЗаказовКлиентов.Отгружен Тогда		
		ЗаказОб = Заказ.ПолучитьОбъект();
		ЗаказОб.Статус = Перечисления.СтатусыЗаказовКлиентов.Отгружен;
		Если ЗаказОб.Проведен Тогда
			ЗаказОб.Записать(РежимЗаписиДокумента.Проведение);
		Иначе	
			ЗаказОб.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	КонецЕсли;    
	
//	Если Не Отказ Тогда
//	Если сабОбщегоНазначенияПовтИсп.ПолучитьСерийныйУчет() Тогда
//		Если ДополнительныеСвойства.Свойство("СинхронизироватьТЧСерииДокументаУУ") Тогда
//			ТЗСерии = СерииНоменклатуры.Выгрузить();
//			ТЗСерии.Свернуть("Номенклатура,ДатаПроизводства,СерияНоменклатуры","Количество");
//			ТЗСерии.Сортировать("Номенклатура,ДатаПроизводства"); 
//			СерииНоменклатуры.Очистить();
//			Для Каждого СтрокаТовары ИЗ Товары Цикл
//				СтруктураОтбора = Новый Структура("Номенклатура",СтрокаТовары.Номенклатура);
//				НайденыеСтроки = ТЗСерии.НайтиСтроки(СтруктураОтбора);
//				//удаляем элементы с пустой серией (для сортировки)
//				Для каждого ЭлМассива Из НайденыеСтроки Цикл
//					Если НЕ ЗначениеЗаполнено(ЭлМассива.СерияНоменклатуры) Тогда
//						ТекИндекс = НайденыеСтроки.Найти(ЭлМассива);
//						НайденыеСтроки.Удалить(ТекИндекс);
//					КонецЕсли;
//				КонецЦикла;  
//				//добавляем элементы с пустой серией в конец массива(для сортировки)
//				СтруктураОтбора = Новый Структура("Номенклатура,СерияНоменклатуры,",СтрокаТовары.Номенклатура, Справочники.СерииНоменклатуры.ПустаяСсылка());
//				МассивПустыхСерий = ТЗСерии.НайтиСтроки(СтруктураОтбора);
//				Для каждого ЭлМассива Из МассивПустыхСерий Цикл
//					НайденыеСтроки.Добавить(ЭлМассива);
//				КонецЦикла;
//				ОсталосьРаспределить = СтрокаТовары.Количество;
//				НоваяСтрокаСерий = Неопределено;
//				Если ОсталосьРаспределить > 0 Тогда 
//					СтрокаСПустойСерией = Неопределено;
//					Для Каждого СтрокаСерии Из НайденыеСтроки Цикл 
//						Распределить = Мин(ОсталосьРаспределить,СтрокаСерии.Количество);
//						ОсталосьРаспределить = ОсталосьРаспределить - Распределить;
//						НоваяСтрокаСерий = СерииНоменклатуры.Добавить();
//						ЗаполнитьЗначенияСвойств(НоваяСтрокаСерий, СтрокаСерии,,"Количество,ДатаПроизводства");
//						НоваяСтрокаСерий.Количество = Распределить;
//						НоваяСтрокаСерий.НомерСтрокиРеализации = СтрокаТовары.НомерСтроки; 
//						НоваяСтрокаСерий.ДатаПроизводства = ?(ЗначениеЗаполнено(НоваяСтрокаСерий.СерияНоменклатуры),НоваяСтрокаСерий.СерияНоменклатуры.ДатаПроизводства,Дата(1,1,1));
//						СтрокаТовары.СерияНоменклатуры = НоваяСтрокаСерий.СерияНоменклатуры;	
//						Если СтрокаСерии.Количество < Распределить Тогда
//							ТзСерии.Удалить(СтрокаСерии);
//						КонецЕсли;
//						Если ОсталосьРаспределить = 0 Тогда
//							Прервать;
//						КонецЕсли;
//					КонецЦикла;
//					Если ОсталосьРаспределить > 0 Тогда 
//						Если НоваяСтрокаСерий <> Неопределено И НЕ ЗначениеЗаполнено(НоваяСтрокаСерий.СерияНоменклатуры) Тогда
//							НоваяСтрокаСерий.Количество = НоваяСтрокаСерий.Количество + ОсталосьРаспределить;
//						Иначе
//							НоваяСтрокаСерий = СерииНоменклатуры.Добавить();
//							НоваяСтрокаСерий.Номенклатура = СтрокаТовары.Номенклатура;
//							НоваяСтрокаСерий.Количество = ОсталосьРаспределить;
//							НоваяСтрокаСерий.НомерСтрокиРеализации = СтрокаТовары.НомерСтроки;
//							НоваяСтрокаСерий.ДатаПроизводства = Дата(1,1,1);
//						КонецЕсли;
//					КонецЕсли;
//				КонецЕсли;
//			КонецЦикла; 
//			СерииНоменклатуры.Свернуть("Номенклатура,ДатаПроизводства,ИдентификаторСтрокиРеализации,НомерСтрокиРеализации,СерияНоменклатуры,","Количество");
//		КонецЕсли;
//	КонецЕсли;
//КонецЕсли;  

Если Не ЭтоНовый() Тогда
		Если ПометкаУдаления И НЕ Ссылка.ПометкаУдаления Тогда 
			УстановитьПривилегированныйРежим(Истина);
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	сабМаршрутныйЛистТабличнаяЧасть.Ссылка.Представление КАК МаршрутныйЛист,
			|	сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента.Представление КАК Заказ,
			|	сабМаршрутныйЛистТабличнаяЧасть.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.сабМаршрутныйЛист.ТабличнаяЧасть КАК сабМаршрутныйЛистТабличнаяЧасть
			|ГДЕ
			|	сабМаршрутныйЛистТабличнаяЧасть.Реализация = &Реализация
			|	И НЕ сабМаршрутныйЛистТабличнаяЧасть.Ссылка.ПометкаУдаления";
			
			Запрос.УстановитьПараметр("Реализация", Ссылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				Отказ = Истина;  
				ТекстСообщения = "";
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					ТекстСообщения = ?(ТекстСообщения = "",
					"В документе " + ВыборкаДетальныеЗаписи.МаршрутныйЛист + " для заказа " + ВыборкаДетальныеЗаписи.Заказ +
					" данный документ выбран в поле ""реализация"". Перед установкой пометки удаления необходимо очистить соответствующее поле для указанного заказа. " + 
					"Для быстрого перехода к документу ""Маршрутный лист"" нажмите на это сообщение двойным кликом левой кнопки мыши.",
					Символы.ПС + "В документе " + ВыборкаДетальныеЗаписи.МаршрутныйЛист + " для заказа " + ВыборкаДетальныеЗаписи.Заказ +
					" данный документ выбран в поле ""реализация"". Перед установкой пометки удаления необходимо очистить соответствующее поле для указанного заказа. " + 
					"Для быстрого перехода к документу ""Маршрутный лист"" нажмите на это сообщение двойным кликом левой кнопки мыши."); 
				КонецЦикла;
				Сообщение = Новый СообщениеПользователю();
    			Сообщение.Текст = НСтр("ru = '" + ТекстСообщения +"' ");
     		    Сообщение.КлючДанных = ВыборкаДетальныеЗаписи.Ссылка;
    			Сообщение.Сообщить();
				//Сообщить(ТекстСообщения);
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//Синхронизация серий
	Если сабОбщегоНазначенияПовтИсп.ПолучитьСерийныйУчет() Тогда 
		Если Не ЭтоНовый() Тогда 
			сабОперОбщегоНазначения.СинхронизацияНомераСтрокиОсновнойТЧССериямиБух(Товары,Ссылка.Товары,СерииНоменклатуры,ЭтотОбъект);
		КонецЕсли;
		сабОперОбщегоНазначения.ПерезаполнитьТЧСерииНоменклатурыПередЗаписью(Товары,СерииНоменклатуры,Истина);
	КонецЕсли;

КонецПроцедуры

&Перед("ОбработкаПроверкиЗаполнения")
Процедура УУ_ОбработкаПроверкиЗаполнения1(Отказ, ПроверяемыеРеквизиты)
	
	Если Не ЗначениеЗаполнено(Касса) Тогда 
		ТекстОписаниеОшибки = НСтр("ru = 'Не заполнена управленческая касса, оплата не может быть принята.'");
		ТекстСообщения      = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле",, "Касса",,, ТекстОписаниеОшибки);

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Касса", "Объект", Отказ);
	КонецЕсли;

КонецПроцедуры

&После("ПриКопировании")
Процедура УУ_ПриКопировании(ОбъектКопирования)
	
	ОплатаФорма2 = Ложь;
	СуммаДокументаФорма2 = 0;
	Для Каждого СтрокаТЧ Из Товары Цикл
		СтрокаТЧ.ЦенаФорма2 = 0;
		СтрокаТЧ.СуммаНДСФорма2 = 0;
		СтрокаТЧ.СуммаФорма2 = 0;
	КонецЦикла; 
	
КонецПроцедуры

//&ИзменениеИКонтроль("ОбработкаПроверкиЗаполнения")
//Процедура УУ_ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
//	
//	#Вставка
//	Если Не ЗначениеЗаполнено(Касса) Тогда 
//		ТекстОписаниеОшибки = НСтр("ru = 'Не заполнена управленческая касса, оплата не может быть принята.'");
//		ТекстСообщения      = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле",, "Касса",,, ТекстОписаниеОшибки);

//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Касса", "Объект", Отказ);
//	КонецЕсли;
//	#КонецВставки
//	
//	МассивНепроверяемыхРеквизитов = Новый Массив;

//	Если ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Продажа Тогда
//		МассивНепроверяемыхРеквизитов.Добавить("Основание");
//	КонецЕсли;

//	МассивНепроверяемыхРеквизитов.Добавить("Товары.Количество");

//	// Проверка: сумма безналичных оплат не должна превышать сумму по реализации товаров и услуг
//	СуммаВыручки = Товары.Итог("Сумма") + ?(СуммаВключаетНДС, 0, Товары.Итог("СуммаНДС"))
//	+ АгентскиеУслуги.Итог("Сумма") + ?(СуммаВключаетНДС, 0, АгентскиеУслуги.Итог("СуммаНДС"))
//	+ ПодарочныеСертификаты.Итог("Сумма");

//	Если Оплата.Итог("Сумма") > СуммаВыручки  Тогда

//		ТекстОписаниеОшибки = НСтр("ru = 'Сумма безналичных оплат превышает сумму выручки от реализации!'");
//		ТекстСообщения      = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Список", "Корректность",,, НСтр("ru = 'Безналичные оплаты'"), ТекстОписаниеОшибки);

//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Оплата", "Объект", Отказ);

//	КонецЕсли;

//	НужноПроверятьОстаткиТоваров = ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Возврат
//	И НЕ Проведен // Есть смысл проверять остатки пока не пробит чек (документ не проведен)
//	И НЕ Основание.Пустая();

//	Если НужноПроверятьОстаткиТоваров Тогда

//		ОстаткиТоваровКВозврату = Документы.РозничнаяПродажа.ОстаткиТовараКВозвратуПоДокументу(Основание);
//		ОстаткиТоваровКВозврату.Индексы.Добавить("Номенклатура");

//	КонецЕсли;

//	МассивНоменклатуры    = ОбщегоНазначения.ВыгрузитьКолонку(Товары, "Номенклатура", Истина);

//	ОбщегоНазначенияБПКлиентСервер.УдалитьНеЗаполненныеЭлементыМассива(МассивНоменклатуры);

//	РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивНоменклатуры, "Услуга");

//	ИмяСписка = "Товары";
//	Для каждого СтрокаТовары Из Товары Цикл

//		СвойстваНоменклатуры = РеквизитыНоменклатуры[СтрокаТовары.Номенклатура];
//		Если  СвойстваНоменклатуры <> Неопределено 
//			И СвойстваНоменклатуры.Услуга Тогда

//			Продолжить;
//		КонецЕсли;

//		Если СтрокаТовары.Количество = 0 Тогда

//			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяСписка, СтрокаТовары.НомерСтроки, "Количество");

//			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", , 
//			НСтр("ru = 'Количество'"), СтрокаТовары.НомерСтроки, ИмяСписка);

//			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "Объект", Отказ);
//		КонецЕсли;

//		Если СтрокаТовары.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
//			// Не допускается ставка 0% по реализации товаров в рознице.
//			Пояснение = НСтр("ru='Ставка 0% не применяется при реализации товаров в рознице'");
//			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяСписка, СтрокаТовары.НомерСтроки, "СтавкаНДС");
//			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка","Корректность",
//			НСтр("ru = '% НДС'"), СтрокаТовары.НомерСтроки, ИмяСписка, Пояснение);

//			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "Объект", Отказ);
//		КонецЕсли; 

//		Если НужноПроверятьОстаткиТоваров Тогда
//			СтруктураПоиска = Новый Структура("Номенклатура, Цена", СтрокаТовары.Номенклатура, СтрокаТовары.Цена);
//			НайденыеСтроки = ОстаткиТоваровКВозврату.НайтиСтроки(СтруктураПоиска);

//			Если НайденыеСтроки.Количество() = 0 Тогда
//				КоличествоОснование = 0;
//			Иначе
//				КоличествоОснование = НайденыеСтроки[0].Количество;
//			КонецЕсли;

//			Если СтрокаТовары.Количество > КоличествоОснование Тогда 
//				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяСписка, СтрокаТовары.НомерСтроки, "Количество");

//				ТекстСообщения = НСтр("ru = 'Документом ""%1"" было реализовано ""%2"" по цене %3 %4 на ""%5"" ед. меньше, чем возвращается.'");
//				ТекстСообщения = СтрШаблон(
//				ТекстСообщения,
//				СокрЛП(Основание),
//				СтрокаТовары.Номенклатура,
//				СтрокаТовары.Цена,
//				ВалютаДокумента,
//				(СтрокаТовары.Количество - КоличествоОснование));

//				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность", 
//				НСтр("ru = 'Количество'"), СтрокаТовары.НомерСтроки, ИмяСписка, ТекстСообщения);

//				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "Объект", Отказ);
//			КонецЕсли;

//			Если НайденыеСтроки.Количество() <> 0 Тогда
//				НайденыеСтроки[0].Количество = Макс(НайденыеСтроки[0].Количество - СтрокаТовары.Количество, 0);
//			КонецЕсли;

//		КонецЕсли;
//	КонецЦикла; 

//	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
//КонецПроцедуры


//&После("ПриЗаписи")
//Процедура УУ_ПриЗаписи(Отказ)
//	
//	Если Не Отказ Тогда
//		Если ДополнительныеСвойства.Свойство("СинхронизироватьТЧСерииДокументаУУ") Тогда
//			Если ДополнительныеСвойства.СинхронизироватьТЧСерииДокументаУУ Тогда
//				УстановитьПривилегированныйРежим(Истина);
//				ЗапросДокУУ = Новый Запрос;
//				ЗапросДокУУ.Текст = 
//				"ВЫБРАТЬ ПЕРВЫЕ 1
//				|	сабОбработкаДокументов.ДокументУУ КАК ДокументУУ,
//				|	сабОбработкаДокументов.ДатаОбработки КАК ДатаОбработки,
//				|	сабОбработкаДокументов.АвтообновленияЗаблокированы КАК АвтообновленияЗаблокированы
//				|ИЗ
//				|	РегистрСведений.сабОбработкаДокументов КАК сабОбработкаДокументов
//				|ГДЕ
//				|	сабОбработкаДокументов.ДокументБУ = &ДокБУ
//				|	И сабОбработкаДокументов.ДокументУУ.Дата ЕСТЬ НЕ NULL 
//				|
//				|УПОРЯДОЧИТЬ ПО
//				|	ДатаОбработки УБЫВ";
//				
//				ЗапросДокУУ.УстановитьПараметр("ДокБУ", Ссылка);
//				
//				РезультатЗапросаДокУУ = ЗапросДокУУ.Выполнить();
//				Если НЕ РезультатЗапросаДокУУ.Пустой() Тогда
//					ВыборкаДокУУ = РезультатЗапросаДокУУ.Выбрать();
//					ВыборкаДокУУ.Следующий();
//					ДокУУ = ВыборкаДокУУ.ДокументУУ;
//					Если ВыборкаДокУУ.АвтообновленияЗаблокированы Тогда
//						Возврат;
//					КонецЕсли;
//					ДокОбъектУУ = ДокУУ.ПолучитьОбъект(); 
//					сабОбщегоНазначенияБУХ.сабОбработкиЗаполненияУчпетныхДокументовОбработкаЗаполнения(ДокОбъектУУ, ЭтотОбъект, Неопределено, Истина); 
//					ДокОбъектУУ.СерииНоменклатуры.Очистить();  
//					Для Каждого СтрокаСерииНоменклатуры ИЗ СерииНоменклатуры Цикл
//						НоваяСтрока = ДокОбъектУУ.СерииНоменклатуры.Добавить(); 
//						ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаСерииНоменклатуры);
//					КонецЦикла;
//					Если ДокОбъектУУ.Проведен Тогда
//						Попытка
//							ДокОбъектУУ.Записать(РежимЗаписиДокумента.Проведение); 
//						Исключение
//							Сообщить("Не удалось синхронизировать документ управленческого учета по причине: " + ОписаниеОшибки());
//						КонецПопытки;
//					Иначе 
//						Попытка
//							ДокОбъектУУ.Записать(); 
//						Исключение
//							Сообщить("Не удалось синхронизировать документ управленческого учета по причине: " + ОписаниеОшибки());
//						КонецПопытки;
//					КонецЕсли;
//				КонецЕсли;
//				УстановитьПривилегированныйРежим(Ложь);
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;
//	
//КонецПроцедуры


