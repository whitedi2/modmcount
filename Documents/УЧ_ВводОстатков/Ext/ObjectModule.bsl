

Функция ОпределитьДтСчет (Задолженность1, ТекСтрокаВводОстатковСырья, ТекСчет)
	Если Задолженность1 = Перечисления.Д_ДтКт.Дебет Тогда
		СчетДт = ТекСтрокаВводОстатковСырья.Счет;
	иначе
		Если ТекСчет.Забалансовый Тогда
			СчетДт = Неопределено;
		Иначе
			СчетДт = ПланыСчетов.Учетный.НайтиПоКоду("00");
		КонецЕсли;
	конецесли;
	возврат СчетДт
КонецФункции

Функция ОпределитьКтСчет (Задолженность1, ТекСтрокаВводОстатковСырья, ТекСчет)
	Если Задолженность1 = Перечисления.Д_ДтКт.Дебет Тогда
		Если ТекСчет.Забалансовый Тогда
			СчетКт = Неопределено;
		Иначе
			СчетКт = ПланыСчетов.Учетный.НайтиПоКоду("00");		
		КонецЕсли;		
	иначе
		СчетКт = ТекСтрокаВводОстатковСырья.Счет;
	конецесли;
	возврат СчетКт
КонецФункции

Процедура ИспользоватьКоличество(Движение, СчетДт, СчетКт, ТекСтрокаВводОстатковСырья)
	Движение.КоличествоДт = 0;
	Движение.КоличествоКт = 0;
	Если СчетДт.Количественный Тогда
		Движение.КоличествоДт = ТекСтрокаВводОстатковСырья.Количество;
	иначеесли СчетКт.Количественный тогда
		Движение.КоличествоКт = ТекСтрокаВводОстатковСырья.Количество;
	КонецЕсли;
	Если СчетДт.Крахмал Тогда
		Движение.КоличествоКРХДт = ТекСтрокаВводОстатковСырья.Крахмал;
	иначеесли СчетКт.Крахмал тогда
		Движение.КоличествоКРХКт = ТекСтрокаВводОстатковСырья.Крахмал;
	КонецЕсли; 

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если РучнаяКорректировка Тогда		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Движения документа %1 отредактированы вручную и не могут быть автоматически актуализированы'"), ЭтотОбъект);
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.КлючДанных = Ссылка;
		Сообщение.Сообщить();		
		
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Движения.Учетный.Записывать = Истина;
	
	МассивТабличныхПолей = Новый Массив;
	МассивТабличныхПолей.Добавить(ВводОстатковПрочее);
	
	Для каждого ТабличноеПоле Из МассивТабличныхПолей Цикл
		Для Каждого ТекСтрокаВводОстатковСырья Из ТабличноеПоле Цикл
						
			СчетДт = ОпределитьДтСчет(ТекСтрокаВводОстатковСырья.Задолженность, ТекСтрокаВводОстатковСырья, ТекСтрокаВводОстатковСырья.Счет);
			СчетКт = ОпределитьКтСчет(ТекСтрокаВводОстатковСырья.Задолженность, ТекСтрокаВводОстатковСырья, ТекСтрокаВводОстатковСырья.Счет);
			
			Если СчетДт = ПланыСчетов.Учетный.НайтиПоКоду("00") Тогда
				СчетСубконто = СчетКт;
			иначе
				СчетСубконто = СчетДт;
			Конецесли;
			
			Движение = Движения.Учетный.Добавить();
			Движение.Период = Дата;
			Движение.СчетДт = СчетДт;
			Если НЕ СчетДт = Неопределено Тогда
				Если СчетДт.УчетПоПодразделениям Тогда
					Движение.ПодразделениеДт = ТекСтрокаВводОстатковСырья.Подразделение;	
				КонецЕсли;
				Если СчетДт.Валютный Тогда
					Движение.ВалютаДт = ТекСтрокаВводОстатковСырья.Валюта;
					Движение.ВалютнаяСуммаДт = ТекСтрокаВводОстатковСырья.ВалютнаяСумма;
				КонецЕсли;	
			КонецЕсли;
			
			Движение.СчетКт = СчетКт;
			Если НЕ СчетКт = Неопределено Тогда
				Если СчетКт.УчетПоПодразделениям Тогда
					Движение.ПодразделениеКт = ТекСтрокаВводОстатковСырья.Подразделение;	
				КонецЕсли;
				Если СчетКт.Валютный Тогда
					Движение.ВалютаКт = ТекСтрокаВводОстатковСырья.Валюта;
					Движение.ВалютнаяСуммаКт = ТекСтрокаВводОстатковСырья.ВалютнаяСумма;
				КонецЕсли;	
			КонецЕсли;
			Движение.Предприятия = Предприятие;
			Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
			ИспользоватьКоличество(Движение, Движение.СчетДт, Движение.СчетКт, ТекСтрокаВводОстатковСырья);//проверяет количественный признак на счетах 
			Движение.Сумма = ТекСтрокаВводОстатковСырья.Сумма;
			Движение.Содержание = ТекСтрокаВводОстатковСырья.Содержание + " " + Комментарий;
			
			//СписокСубконто = Новый Массив;
			//СписокСубконто.Добавить(ТекСтрокаВводОстатковСырья.Субконто1);
			//СписокСубконто.Добавить(ТекСтрокаВводОстатковСырья.Субконто2);
			//СписокСубконто.Добавить(ТекСтрокаВводОстатковСырья.Субконто3);
			//
			//Для НомерСубконто = 0 По СчетСубконто.ВидыСубконто.Количество() - 1 Цикл
			//	Если СчетДт = ПланыСчетов.Учетный.Счет00() Тогда
			//		Движение.СубконтоКт[СчетСубконто.ВидыСубконто[НомерСубконто].ВидСубконто] = СписокСубконто[НомерСубконто];
			//	иначе
			//		Движение.СубконтоДт[СчетСубконто.ВидыСубконто[НомерСубконто].ВидСубконто] = СписокСубконто[НомерСубконто];
			//	КонецЕсли;
			//КонецЦикла;
						
			Если СчетДт = ПланыСчетов.Учетный.НайтиПоКоду("00") Или СчетДт = Неопределено Тогда
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, СчетКт,1,ТекСтрокаВводОстатковСырья.Субконто1);
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,СчетКт,2,ТекСтрокаВводОстатковСырья.Субконто2);
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,СчетКт,3,ТекСтрокаВводОстатковСырья.Субконто3);
			Иначе
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,СчетДт,1,ТекСтрокаВводОстатковСырья.Субконто1);
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,СчетДт,2,ТекСтрокаВводОстатковСырья.Субконто2);
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,СчетДт,3,ТекСтрокаВводОстатковСырья.Субконто3);
			КонецЕсли;
			
			// неактуально {
			//Если ТекСтрокаВводОстатковСырья.Счет = ПланыСчетов.Учетный.Счет01()  И НЕ ТекСтрокаВводОстатковСырья.Субконто1 = Справочники.Сотрудники.ПустаяСсылка() Тогда
			//	//Создание МОЛ
			//	ОС = ТекСтрокаВводОстатковСырья.Субконто1;
			//	МОЛ = ТекСтрокаВводОстатковСырья.МОЛ;
			//	РегистрМОЛ = РегистрыСведений.МолДляОС.СоздатьНаборЗаписей();
			//	РегистрМОЛ.Отбор.Период.Установить(Дата);
			//	РегистрМОЛ.Отбор.ОС.Установить(ОС);
			//	ЗаписьРегистра = РегистрМОЛ.Добавить();
			//	ЗаписьРегистра.Период = Дата;
			//	ЗаписьРегистра.ОС = ОС;
			//	ЗаписьРегистра.МОЛ = МОЛ;
			//	РегистрМОЛ.Записать();
			//	//Заполнение МОЛом ОС
			//	ОбъектОС = ОС.ПолучитьОбъект();
			//	Если ОбъектОС.ТекущийМол = Справочники.Сотрудники.ПустаяСсылка() Тогда
			//		ОбъектОС.ТекущийМол = Мол;
			//		ОбъектОС.Записать();
			//	КонецЕсли;
			//КонецЕсли
			//}
			
		КонецЦикла;
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПодразделениеЗаполнено = ЗначениеЗаполнено(Подразделение);
	Для Каждого Строка Из ВводОстатковПрочее Цикл
		ТипыЗначенийСубконтоСчета = ПолучитьТипыЗначенийСубконтоСчета(Строка.Счет);
		Для Инд = 0 По ТипыЗначенийСубконтоСчета.Количество() - 1 Цикл
			Если Не ТипыЗначенийСубконтоСчета[Инд].СодержитТип(ТипЗнч(Строка["Субконто" + (Инд+1)])) Тогда
				Строка["Субконто" + (Инд+1)] = ТипыЗначенийСубконтоСчета[Инд].ПривестиЗначение(Строка["Субконто" + (Инд+1)])
			КонецЕсли;
		КонецЦикла;
		Если ПодразделениеЗаполнено Тогда
			Если НЕ ЗначениеЗаполнено(Строка.Подразделение) Тогда
				Строка.Подразделение = Подразделение;	
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	СуммаДокумента = ВводОстатковПрочее.Итог("Сумма");
	
	//из подписки на событие
	БюджетныйНаСервере.ДокументыПередЗаписьюПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
КонецПроцедуры

Функция ПолучитьТипыЗначенийСубконтоСчета(Счет)
	МассивТиповСубконто = Новый Массив;
	Для Каждого Элемент Из Счет.ВидыСубконто Цикл
		МассивТиповСубконто.Добавить(Элемент.ВидСубконто.ТипЗначения);
	КонецЦикла;
	Возврат МассивТиповСубконто;
КонецФункции

Процедура ОбработкаУдаленияПроведения(Отказ)
	РучнаяКорректировка = Ложь;
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	РучнаяКорректировка = Ложь;
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	БюджетныйНаСервере.ПриУстановкеНовогоНомераПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
КонецПроцедуры



