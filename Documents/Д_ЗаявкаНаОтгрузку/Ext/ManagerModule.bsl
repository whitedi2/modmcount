Процедура Печать(ТабДок, Ссылка, РецензентКомментарий = Неопределено, МассивОткрытыхИсторий = Неопределено, МассивОткрытыхИсторийАвтора = Неопределено) Экспорт
	
	Макет = Документы.Д_ЗаявкаНаОтгрузку.ПолучитьМакет("Печать1");
	МакетВодка = Документы.Д_ЗаявкаНаОтгрузку.ПолучитьМакет("ПечатьВодка");
	ОбластьПрикрепление = Макет.ПолучитьОбласть("Прикрепление");
	
	ОбластьШтампы = Макет.ПолучитьОбласть("Штампы");
	
	// 06.06.2012 доставка авто2
	ТабДок.Очистить();
	
	//реквизиты общих заявок
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	*,
	|   ЕСТЬNULL(Д_ЗаявкаНаОтгрузку.Договор.ПаспортСделки, Значение(Справочник.ПаспортСделки.ПустаяССылка)) КАК ПС
	|ИЗ
	|	Документ.Д_ЗаявкаНаОтгрузку КАК Д_ЗаявкаНаОтгрузку
	|ГДЕ
	|	Д_ЗаявкаНаОтгрузку.Ссылка В(&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	ВыборкаРеализация = Результат.Выгрузить();
	
	
	//реквизиты корректировочных документов
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Д_КорректировкаДокументаТЧ.Ссылка,
	|	Д_КорректировкаДокументаТЧ.НомерСтроки,
	|	Д_КорректировкаДокументаТЧ.Реквизит,
	|	Д_КорректировкаДокументаТЧ.ЗначениеДо,
	|	Д_КорректировкаДокументаТЧ.ЗначениеПосле,
	|	Д_КорректировкаДокументаТЧ.Основание,
	|	Д_КорректировкаДокументаТЧ.РеквизитИмя,
	|	Д_КорректировкаДокументаТЧ.Ссылка.ДокОснование
	|ИЗ
	|	Документ.Д_КорректировкаДокумента.ТЧ КАК Д_КорректировкаДокументаТЧ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.СогласованиеОбщее КАК СогласованиеОбщее
	|		ПО Д_КорректировкаДокументаТЧ.Ссылка = СогласованиеОбщее.Заявка
	|			И (СогласованиеОбщее.Завершен = ИСТИНА)
	|ГДЕ
	|	Д_КорректировкаДокументаТЧ.Ссылка.ДокОснование В (&ДокОснование4)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Д_КорректировкаДокументаТЧ.Ссылка.Дата";
	
	Запрос.УстановитьПараметр("ДокОснование4", ВыборкаРеализация.ВыгрузитьКолонку("Ссылка"));
	
	Результат = Запрос.Выполнить();
	ВыборкаКорректировки = Результат.Выгрузить();
	
	//получаем прикрепленные объекты
	ВыборкаПоФайлам = БПСервер.ПолучитьПрикрепленныеОбъектыДляПечати(Ссылка);
	
	//////////////////////////вывод заявки на отгрузку на печать
	
	ВставлятьРазделительСтраниц = Ложь;
	ТабДок.НачатьАвтогруппировкуКолонок();
	ТабДок.НачатьАвтогруппировкуСтрок();
	Для каждого Выборка Из ВыборкаРеализация Цикл
		
		Если ВставлятьРазделительСтраниц Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		Если Выборка.ТипЗаявки = "Водочная" Тогда //водка
			ОбластьЗаголовок = МакетВодка.ПолучитьОбласть("Заголовок");
			ОбластьШапка = МакетВодка.ПолучитьОбласть("Шапка");
			
			// 21.02.13 статус
			ОбластьШапкаСтатус = МакетВодка.ПолучитьОбласть("ШапкаСтатус");
			
			ОбластьШтампы = МакетВодка.ПолучитьОбласть("Штампы");
			ОбластьСогласование = МакетВодка.ПолучитьОбласть("ШапкаСогласование");
			ОбластьСодержание1 = МакетВодка.ПолучитьОбласть("Содержание1");
			ОбластьТекСтрока = МакетВодка.ПолучитьОбласть("ТекСтрока");
			ОбластьЗаголовок.Параметры.Ссылка = Выборка.Ссылка;
			//ОбластьЗаголовок.Параметры.ТипРеализации = Выборка.ТипРеализации;
			ТабДок.Вывести(ОбластьЗаголовок);
			
			ОбластьШапка.Параметры.Дата = Выборка.Дата;
			ОбластьШапка.Параметры.Комментарий = Выборка.Тема;
			
			// имя пользователя и должность
			ИмяДолжность = БПСервер.ПолучитьИмяИДолжностьПользователя(Выборка.Дата, Выборка.Автор);		
			ОбластьШапка.Параметры.ОтКого =  ?(ЗначениеЗаполнено(ИмяДолжность.ПредставлениеПользователя), ИмяДолжность.ПредставлениеПользователя + " ", "") + ?(ЗначениеЗаполнено(ИмяДолжность.Должность), ИмяДолжность.Должность, "");		
							
			ТабДок.Вывести(ОбластьШапка);
			
			// 21.02.13 статус
			ОбластьШапкаСтатус.Параметры.ТекущийСтатус = БПСервер.ПолучитьТекущуюТочкуМаршрута(Ссылка);
			ТабДок.Вывести(ОбластьШапкаСтатус);
			
			ОбластьСодержание = МакетВодка.ПолучитьОбласть("Содержание");			
			ОбластьСодержание.Параметры.Заполнить(Выборка);
			ТабДок.Вывести(ОбластьСодержание);
				
				ТЗОтгрузки = Выборка.УсловияВодка;
				Для каждого ТекСтрокаОтгрузки Из ТЗОтгрузки Цикл
					ОбластьТекСтрока.Параметры.Заполнить(ТекСтрокаОтгрузки);
					ТабДок.Вывести(ОбластьТекСтрока);		
				КонецЦикла; 
				
				ОбластьСодержание1.Параметры.Заполнить(Выборка);
				УсловияОплаты = "Вариант: " + Выборка.ВариантУсловийОплаты + "
				|";
				
				Если Выборка.ВариантУсловийОплаты = "По графику" Тогда
					ТЗУсловия = Выборка.ГрафикОплат;//.Выгрузить();
					Для каждого ТекСтрока Из ТЗУсловия Цикл
						УсловияОплаты = УсловияОплаты + Формат(ТекСтрока.Дата, "ДФ=dd.MM.yyyy") + " - - " + Строка(ТекСтрока.Сумма) + " руб.
						|";				
					КонецЦикла;
				Иначе
					УсловияОплаты = УсловияОплаты + "Предоплата: " + Строка(Выборка.ПроцентПредоплаты) + " %
					|" + "Отсрочка: " + Строка(Выборка.Отсрочка) + " дн. (" + Формат(Выборка.ДатаОтгрузки + Выборка.Отсрочка * 60 * 60 * 24, "ДФ=dd.MM.yyyy") + ")";				
				КонецЕсли;
				
				СредняяЦена = ?(ТЗОтгрузки.Итог("Количество"), ТЗОтгрузки.Итог("Сумма") / ТЗОтгрузки.Итог("Количество"), 0);	
				
				ОбластьСодержание1.Параметры.УсловияОплаты = УсловияОплаты;
				ОбластьСодержание1.Параметры.ИтогоКоличество = ТЗОтгрузки.Итог("Количество");
				ОбластьСодержание1.Параметры.ИтогоСумма = ТЗОтгрузки.Итог("Сумма");
				ОбластьСодержание1.Параметры.СредняяЦена = СредняяЦена;
				ТабДок.Вывести(ОбластьСодержание1);
				
				//в центр "Отгрузка по литражу"
				КолСтрок = 0;
				Для НомСтроки = 18 По 42 Цикл
					ЗначЯчейки = ТабДок.Область("R" + НомСтроки + "C1").Текст;
					Если НЕ ПустаяСтрока(ЗначЯчейки) Тогда
						Прервать;				
					КонецЕсли;
					КолСтрок = КолСтрок + 1;
				КонецЦикла;
				ТабДок.Область("R" + (17 + Окр(КолСтрок / 2, 0)) + "C1").Текст = "ОТГРУЗКА по литражу:";			
			
		Иначе //спирт
			Если Выборка.ТипРеализации = "Спирт№2ПодДоки" Тогда
				ОбластьЗаявкаНаРеализацию1 = Макет.ПолучитьОбласть("ЗаявкаНаРеализацию1");
				ОбластьЗаявкаНаРеализацию2 = Макет.ПолучитьОбласть("ЗаявкаНаРеализацию2");
				ОбластьЗаявкаНаРеализацию3 = Макет.ПолучитьОбласть("ЗаявкаНаРеализацию3");
				ОбластьПрибыльность = Макет.ПолучитьОбласть("Прибыльность");
			Иначе
				ОбластьЗаявкаНаРеализацию1 = Макет.ПолучитьОбласть("ЗаявкаНаРеализациюБезДок");
				ОбластьЗаявкаНаРеализацию2 = Макет.ПолучитьОбласть("ЗаявкаНаРеализацию2БезДок");
				ОбластьЗаявкаНаРеализацию3 = Макет.ПолучитьОбласть("ЗаявкаНаРеализацию3БезДок");
				ОбластьПрибыльность = Макет.ПолучитьОбласть("ПрибыльностьБезДок");
			КонецЕсли;
			ОчиститьПараметрыОбласти(ОбластьЗаявкаНаРеализацию1);
			ОчиститьПараметрыОбласти(ОбластьЗаявкаНаРеализацию2);
			ОчиститьПараметрыОбласти(ОбластьЗаявкаНаРеализацию3);
			
			ОбластьЗаявкаНаРеализацию1.Параметры.Заполнить(Выборка);
			ОбластьЗаявкаНаРеализацию2.Параметры.Заполнить(Выборка);
			ОбластьЗаявкаНаРеализацию3.Параметры.Заполнить(Выборка);
			
			Если ПараметрыСеанса.ТекущийПользователь.СкрыватьЦенуПродукции Тогда 
				ОбластьЗаявкаНаРеализацию1.Параметры.Цена = "не доступно";
				ОбластьЗаявкаНаРеализацию1.Параметры.ЦенаСоответствуетДоговору = "";
				ОбластьЗаявкаНаРеализацию1.Параметры.Абсолют1 ="не доступно";
				ОбластьЗаявкаНаРеализацию1.Параметры.Верх1 = "не доступно";
				ОбластьЗаявкаНаРеализацию1.Параметры.Верх1СоответствуетДоговору = "не доступно";
				ОбластьЗаявкаНаРеализацию1.Параметры.Верх2 = "не доступно";
				ОбластьЗаявкаНаРеализацию1.Параметры.Верх2СоответствуетДоговору = "не доступно";
				ОбластьЗаявкаНаРеализацию1.Параметры.Верх3 = "не доступно";
				ОбластьЗаявкаНаРеализацию1.Параметры.Верх3СоответствуетДоговору = "не доступно";
				ОбластьЗаявкаНаРеализацию1.Параметры.Верх4 = "не доступно";
				ОбластьЗаявкаНаРеализацию1.Параметры.Верх4СоответствуетДоговору = "не доступно";
				ОбластьЗаявкаНаРеализацию1.Параметры.ВерхПоДоставке = "не доступно";
				ОбластьЗаявкаНаРеализацию1.Параметры.ЦенаДок = "не доступно";
				ОбластьЗаявкаНаРеализацию1.Параметры.Дисконт = "не доступно";
				ОбластьЗаявкаНаРеализацию1.Параметры.КомпенсацияНалоговПоДисконту = "не доступно";
				ОбластьЗаявкаНаРеализацию1.Параметры.ЦенаДок = "не доступно";
				ОбластьЗаявкаНаРеализацию1.Параметры.ЦенаЗакупа = "не доступно";
//				ОбластьЗаявкаНаРеализацию1.Параметры.ЦенаЗакупа2 = 0;
				
				ОбластьЗаявкаНаРеализацию2.Параметры.ЛимитДЗ = "не доступно";
				ОбластьЗаявкаНаРеализацию2.Параметры.ДзОбщая = "не доступно";
				ОбластьЗаявкаНаРеализацию2.Параметры.ЛимитПДЗ = "не доступно";
				ОбластьЗаявкаНаРеализацию2.Параметры.ДзПросроченная = "не доступно";
				
				ОбластьЗаявкаНаРеализацию3.Параметры.Дельта = "не доступно";
//				ОбластьЗаявкаНаРеализацию3.Параметры.Дельта2 = 0;
			КонецЕсли;
			
			// имя пользователя и должность
			ИмяДолжность = БПСервер.ПолучитьИмяИДолжностьПользователя(Выборка.Дата, Выборка.Автор);		
			ОбластьЗаявкаНаРеализацию1.Параметры.Автор =  ?(ЗначениеЗаполнено(ИмяДолжность.ПредставлениеПользователя), ИмяДолжность.ПредставлениеПользователя + " ", "") + ?(ЗначениеЗаполнено(ИмяДолжность.Должность), ИмяДолжность.Должность, "");	
									
			// статус
			ОбластьЗаявкаНаРеализацию1.Параметры.ТекущийСтатус = БПСервер.ПолучитьТекущуюТочкуМаршрута(Ссылка);
			
			КорректировкаРеквизитов(ОбластьЗаявкаНаРеализацию1, ВыборкаКорректировки, Выборка.Ссылка);
			ТабДок.Вывести(ОбластьЗаявкаНаРеализацию1, 0);
			
			
			ТабДок.Вывести(ОбластьЗаявкаНаРеализацию2, 0);
			
			Если Не ПараметрыСеанса.ТекущийПользователь.СкрыватьЦенуПродукции Тогда
				Для каждого ТекСтрокаПоказателей Из Выборка.ТаблицаПрибыли Цикл
					ОбластьПрибыльность.Параметры.Показатель = ТекСтрокаПоказателей.Показатель;
					ОбластьПрибыльность.Параметры.ЗначениеПоказателя = ТекСтрокаПоказателей.Доход - ТекСтрокаПоказателей.Расход;
					Если Выборка.ТипРеализации = "Спирт№2ПодДоки" Тогда
						ОбластьПрибыльность.Параметры.ЗначениеПоказателя2 = ТекСтрокаПоказателей.Доход2 - ТекСтрокаПоказателей.Расход2; 
					КонецЕсли;
					ТабДок.Вывести(ОбластьПрибыльность, 1);
				КонецЦикла;
			КонецЕсли;
			
			КорректировкаРеквизитов(ОбластьЗаявкаНаРеализацию3, ВыборкаКорректировки, Выборка);
			ТабДок.Вывести(ОбластьЗаявкаНаРеализацию3, 0);
			
		КонецЕсли;
		
		
		//показ этапов согласования СЗ
		Если Выборка.ТипЗаявки = "Водочная" Тогда
			БПСервер.ПоказатьРецензентов(ТабДок, Выборка.Ссылка, Неопределено, Ссылка, "Штампы|Отметка", РецензентКомментарий, МассивОткрытыхИсторий, МассивОткрытыхИсторийАвтора);
		Иначе
			БПСервер.ПоказатьРецензентов(ТабДок, Выборка.Ссылка, Неопределено, Ссылка, "Штампы|Отметка", РецензентКомментарий, МассивОткрытыхИсторий, МассивОткрытыхИсторийАвтора);
		КонецЕсли;
		
		Пока ВыборкаПоФайлам.Следующий() Цикл
			ОбластьПрикрепление.Параметры.Вложение = "Прикрепленный файл: " + Строка(ВыборкаПоФайлам.Файл);
			ОбластьПрикрепление.Параметры.РасшифровкаВложение = Новый Структура("Файл", ВыборкаПоФайлам.Файл);
			ТабДок.Вывести(ОбластьПрикрепление);		
		КонецЦикла;
		
		ТабДок.ЗакончитьАвтогруппировкуСтрок();
		ТабДок.ЗакончитьАвтогруппировкуКолонок();
		
		//раскрашиваем корректировочные строки
		//сравнение с оригиналом
		Для НомСтроки = 5 По 200 Цикл
			ЗначЯчейки = ТабДок.Область("R" + НомСтроки + "C2").Текст;
			Для ТекСтолбец = 1 По 7 Цикл
				ЗначЯчейки2 = ТабДок.Область("R" + НомСтроки + "C" + ТекСтолбец).Расшифровка;
				Если ТипЗнч(ЗначЯчейки2) = Тип("Структура") Тогда
					Если ЗначЯчейки2.Свойство("Изменен") Тогда
						ТабДок.Область("R" + НомСтроки + "C" + ТекСтолбец).ЦветФона = Новый Цвет(253, 156, 156);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла; 
		КонецЦикла; 
		
		ВставлятьРазделительСтраниц = Истина;
	КонецЦикла;
	//{{_КОНСТРУКТОР_ПЕЧАТИ(Печать)
	//}}
КонецПроцедуры

Процедура КорректировкаРеквизитов(Область, ВыборкаКорректировки, ДокОснование)
	ОтобранныеКорректировки = ВыборкаКорректировки.НайтиСтроки(Новый Структура("ДокОснование", ДокОснование)); 
	Для каждого ТекПараметр Из ОтобранныеКорректировки Цикл
		Попытка
			Область.Параметры[ТекПараметр.РеквизитИмя] = ТекПараметр.ЗначениеПосле;
			МассивКорректировок = Новый Массив;
			ОтобранныеСтроки = ВыборкаКорректировки.НайтиСтроки(Новый Структура("РеквизитИмя", ТекПараметр.РеквизитИмя));
			Для каждого ТекСтрока Из ОтобранныеСтроки Цикл
				МассивКорректировок.Добавить(ТекСтрока.Ссылка);
			КонецЦикла; 
			
			Область.Параметры[ТекПараметр.РеквизитИмя + "Расшифровка"] = Новый Структура("Изменен, Корректировки", Истина, МассивКорректировок) ;
			
		Исключение
			
		КонецПопытки;
	КонецЦикла; 
КонецПроцедуры

Процедура ОчиститьПараметрыОбласти(Область)
	Для Параметр = 0 По Область.Параметры.Количество() -1 Цикл
		Область.Параметры[Параметр] = Неопределено;
	КонецЦикла; 
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	Если ВидФормы = "ФормаСписка" ИЛИ ВидФормы = "ФормаВыбора" Тогда
		СтандартнаяОбработка = Ложь;
		//НовыйОтбор = Новый Структура("Тип", Тип("ДокументСсылка.Д_ЗаявкаНаТорговлю"));
		ПараметрыСеанса.СтруктураПараметровФормСпискаДокументооборота = Новый ФиксированнаяСтруктура(Новый Структура("ВидВнутреннегоДокумента, ФормаВыбора", Справочники.Д_ВидыВнутреннихДокументов.ЗаявкаНаОтгрузку, ВидФормы = "ФормаВыбора"));
		ВыбраннаяФорма = "ЖурналДокументов.ВнутренниеДокументы.Форма.ФормаСписка";
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьВАрхивЗаявкуНаОтгрузку(Объект, ОбъектОснованиеСсылка = Неопределено) Экспорт
	Если ОбъектОснованиеСсылка = Неопределено Тогда
		ОбъектОснованиеСсылка = Объект.Ссылка;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	*
	|ИЗ
	|	Документ.Д_ЗаявкаНаОтгрузку КАК Д_ЗаявкаНаОтгрузку
	|ГДЕ
	|	Д_ЗаявкаНаОтгрузку.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ОбъектОснованиеСсылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.АрхивЗаявок.Добавить();
		НоваяСтрока.ДатаАрхивации = ТекущаяДата();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		ТЧУсловия = Выборка.УсловияВодка.Выгрузить();
		Для каждого ТекСтрока Из ТЧУсловия Цикл
			НоваяСтрокаУсловия = Объект.АрхивУсловий.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаУсловия, ТекСтрока);
			НоваяСтрокаУсловия.НомерЗаписи = Объект.АрхивЗаявок.Индекс(НоваяСтрока);		
		КонецЦикла;
		ТЧГГрафик = Выборка.ГрафикОплат.Выгрузить();
		Для каждого ТекСтрока Из ТЧГГрафик Цикл
			НоваяСтрокаУсловия = Объект.АрхивГрафика.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаУсловия, ТекСтрока);
			НоваяСтрокаУсловия.НомерЗаписи = Объект.АрхивЗаявок.Индекс(НоваяСтрока);		
		КонецЦикла; 
		
	КонецЦикла;
КонецПроцедуры // ()
