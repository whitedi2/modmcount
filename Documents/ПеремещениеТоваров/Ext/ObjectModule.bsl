
&Перед("ПередЗаписью")
Процедура УУ_ПередЗаписью1(Отказ, РежимЗаписи, РежимПроведения) 

	Если Модифицированность() Тогда
		Если ДополнительныеСвойства.Свойство("НеДобавлятьЗаписьВРегистрИзмененных") Тогда
			Если Не ДополнительныеСвойства.НеДобавлятьЗаписьВРегистрИзмененных Тогда
				сабОбщегоНазначенияБУХ.УстановитьМодифицированностьБУДокумента(ЭтотОбъект, Ссылка, РежимЗаписи);
			КонецЕсли;
		Иначе
			сабОбщегоНазначенияБУХ.УстановитьМодифицированностьБУДокумента(ЭтотОбъект, Ссылка, РежимЗаписи);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&После("ПередЗаписью")
Процедура УУ_ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	//Синхронизация серий
	Если сабОбщегоНазначенияПовтИсп.ПолучитьСерийныйУчет() Тогда 
		Если Не ЭтоНовый() Тогда 
			сабОперОбщегоНазначения.СинхронизацияНомераСтрокиОсновнойТЧССериямиБух(Товары,Ссылка.Товары,СерииНоменклатуры,ЭтотОбъект);
		КонецЕсли;
		сабОперОбщегоНазначения.ПерезаполнитьТЧСерииНоменклатурыПередЗаписью(Товары,СерииНоменклатуры,Истина);
	КонецЕсли;

КонецПроцедуры

&После("ОбработкаПроведения")
Процедура УУ_ОбработкаПроведения(Отказ, РежимПроведения)
	
	//меняем статус заказа
	Если НЕ ДополнительныеСвойства.Свойство("НеИзменятьСтатусЗаказа") И ЗначениеЗаполнено(Заказ) И ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказНаПеремещение") И Не Заказ.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт Тогда		
		ЗаказОб = Заказ.ПолучитьОбъект();
		ЗаказОб.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт;
		Если ЗаказОб.Проведен Тогда
			ЗаказОб.Записать(РежимЗаписиДокумента.Проведение);
		Иначе	
			ЗаказОб.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&После("ОбработкаЗаполнения")
Процедура УУ_ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда  
				
		//+lud 17/10/22 Проверка повторного создания документов из заказа по обр. №7861 от 12.10.2022 {
		Отказ = сабОперОбщегоНазначения.ПроверкаСозданияНаОснованииНаСервере(ДанныеЗаполнения, "", СтандартнаяОбработка, ТипЗнч(Ссылка));
		Если Отказ.Признак = "##УжеСоздан" Тогда
			ВызватьИсключение "На основании заказа уже введен документ " + Отказ.Ссылка;
		ИначеЕсли Отказ.Признак = "##НеПроведен" Тогда
			ВызватьИсключение "Документ заказ клиента не проведен. Ввод на основании не возможен.";
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения,,"Дата, Номер, Проведен");
		ЭтотОбъект.ВидОперации =  Перечисления.ВидыОперацийПеремещениеТоваров.ПередачаМеждуСкладами;
		ЭтотОбъект.Заказ = ДанныеЗаполнения;
		ЭтотОбъект.СкладОтправитель = ДанныеЗаполнения.Склад;
		//ЭтотОбъект.ДокументБезНДС = Ложь;
		//ЭтотОбъект.ДоговорКонтрагента = ДанныеЗаполнения.Договор;
		//ЭтотОбъект.ТипЦен = ЭтотОбъект.ДоговорКонтрагента.ТипЦен;
		ЭтотОбъект.Дата = ДанныеЗаполнения.ДатаПоступления;
		//ЭтотОбъект.ЭтоУниверсальныйДокумент = Истина;
		//ЭтотОбъект.ВалютаДокумента = ДанныеЗаполнения.Валюта;
		//Если Не ЗначениеЗаполнено(ЭтотОбъект.ВалютаДокумента) Тогда
		//	ЭтотОбъект.ВалютаДокумента = УЧ_Сервер.НациональнаяВалюта();		
		//КонецЕсли;
		Для каждого ТекСтрока Из ДанныеЗаполнения.ТабличнаяЧасть Цикл
			НоваяСтрока = ЭтотОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			//НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСУУБУХ().Получить(ТекСтрока.СтавкаНДС);
			//Если Не ЗначениеЗаполнено(ЭтотОбъект.Склад) Тогда
			//	ЭтотОбъект.Склад = ТекСтрока.Склад;	
			//КонецЕсли;
		КонецЦикла;
		
		НовОбъект = Документы.ПеремещениеТоваров.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(НовОбъект, ДанныеЗаполнения,,"Дата, Номер");
		НовОбъект.ВидОперации = Перечисления.ВидыЗаказовНаПеремещение.ПеремещениеМеждуСкладами;
		НовОбъект.Заказ = ДанныеЗаполнения;
		//НовОбъект.СуммаВключаетНДС = Истина;
		//НовОбъект.ДокументБезНДС = Ложь;
		Для каждого ТекСтрока Из ДанныеЗаполнения.ТабличнаяЧасть Цикл
			НоваяСтрока = НовОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			//НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСУУБУХ().Получить(ТекСтрока.СтавкаНДС);
		КонецЦикла;
		
		ЗаполнениеДокументов.Заполнить(НовОбъект, ДанныеЗаполнения, Истина);
		
		ЭтотОбъект.Товары.Очистить();
		
		МассивНоменклатуры = Новый Массив;
		
		Для каждого ТекСтрока Из НовОбъект.Товары Цикл
			НоваяСтрока = ЭтотОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			МассивНоменклатуры.Добавить(НоваяСтрока.Номенклатура);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.УЧ_ПеремещениеТоваров") Тогда  
				
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения,,"Номер, Проведен");
		ЭтотОбъект.ВидОперации =  Перечисления.ВидыОперацийПеремещениеТоваров.ПередачаМеждуСкладами;
		ЭтотОбъект.Заказ = ДанныеЗаполнения;
		ЭтотОбъект.СкладОтправитель = ДанныеЗаполнения.Склад;
		//ЭтотОбъект.Дата = ДанныеЗаполнения.ДатаПоступления;
		Для каждого ТекСтрока Из ДанныеЗаполнения.ТабличнаяЧасть Цикл
			НоваяСтрока = ЭтотОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЦикла;
		
		НовОбъект = Документы.ПеремещениеТоваров.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(НовОбъект, ДанныеЗаполнения,,"Дата, Номер");
		НовОбъект.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ПередачаМеждуСкладами;
		НовОбъект.Заказ = ДанныеЗаполнения;
		Для каждого ТекСтрока Из ДанныеЗаполнения.ТабличнаяЧасть Цикл
			НоваяСтрока = НовОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЦикла;
		
		ЗаполнениеДокументов.Заполнить(НовОбъект, ДанныеЗаполнения, Истина);
		
		ЭтотОбъект.Товары.Очистить();
		
		МассивНоменклатуры = Новый Массив;
		
		Для каждого ТекСтрока Из НовОбъект.Товары Цикл
			НоваяСтрока = ЭтотОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			МассивНоменклатуры.Добавить(НоваяСтрока.Номенклатура);
		КонецЦикла;
			
	КонецЕсли;

КонецПроцедуры

//&После("ПриЗаписи")
//Процедура УУ_ПриЗаписи(Отказ)

//	Если Не Отказ Тогда
//		Если ДополнительныеСвойства.Свойство("СинхронизироватьТЧСерииДокументаУУ") Тогда
//			Если ДополнительныеСвойства.СинхронизироватьТЧСерииДокументаУУ Тогда
//				УстановитьПривилегированныйРежим(Истина);
//				ЗапросДокУУ = Новый Запрос;
//				ЗапросДокУУ.Текст = 
//				"ВЫБРАТЬ ПЕРВЫЕ 1
//				|	сабОбработкаДокументов.ДокументУУ КАК ДокументУУ,
//				|	сабОбработкаДокументов.ДатаОбработки КАК ДатаОбработки,
//				|	сабОбработкаДокументов.АвтообновленияЗаблокированы КАК АвтообновленияЗаблокированы
//				|ИЗ
//				|	РегистрСведений.сабОбработкаДокументов КАК сабОбработкаДокументов
//				|ГДЕ
//				|	сабОбработкаДокументов.ДокументБУ = &ДокБУ
//				|	И сабОбработкаДокументов.ДокументУУ.Дата ЕСТЬ НЕ NULL 
//				|
//				|УПОРЯДОЧИТЬ ПО
//				|	ДатаОбработки УБЫВ";
//				
//				ЗапросДокУУ.УстановитьПараметр("ДокБУ", Ссылка);
//				
//				РезультатЗапросаДокУУ = ЗапросДокУУ.Выполнить();
//				Если НЕ РезультатЗапросаДокУУ.Пустой() Тогда
//					ВыборкаДокУУ = РезультатЗапросаДокУУ.Выбрать();
//					ВыборкаДокУУ.Следующий();
//					ДокУУ = ВыборкаДокУУ.ДокументУУ; 
//					Если ВыборкаДокУУ.АвтообновленияЗаблокированы Тогда
//						Возврат;
//					КонецЕсли;
//					ДокОбъектУУ = ДокУУ.ПолучитьОбъект(); 
//					сабОбщегоНазначенияБУХ.сабОбработкиЗаполненияУчпетныхДокументовОбработкаЗаполнения(ДокОбъектУУ, ЭтотОбъект, Неопределено, Истина); 
//					ДокОбъектУУ.СерииНоменклатуры.Очистить();  
//					Для Каждого СтрокаСерииНоменклатуры ИЗ СерииНоменклатуры Цикл
//						НоваяСтрока = ДокОбъектУУ.СерииНоменклатуры.Добавить(); 
//						ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаСерииНоменклатуры);
//					КонецЦикла;
//					Если ДокОбъектУУ.Проведен Тогда
//						Попытка
//							ДокОбъектУУ.Записать(РежимЗаписиДокумента.Проведение); 
//						Исключение
//							Сообщить("Не удалось синхронизировать документ управленческого учета по причине: " + ОписаниеОшибки());
//						КонецПопытки;
//					Иначе 
//						Попытка
//							ДокОбъектУУ.Записать(); 
//						Исключение
//							Сообщить("Не удалось синхронизировать документ управленческого учета по причине: " + ОписаниеОшибки());
//						КонецПопытки;
//					КонецЕсли;
//				КонецЕсли;
//				УстановитьПривилегированныйРежим(Ложь);
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;  
//	
//КонецПроцедуры
