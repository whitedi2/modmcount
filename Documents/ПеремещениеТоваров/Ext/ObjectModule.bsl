
&После("ПередЗаписью")
Процедура УУ_ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если Модифицированность() Тогда
		сабОбщегоНазначенияБУХ.УстановитьМодифицированностьБУДокумента(ЭтотОбъект, Ссылка, РежимЗаписи);	
	КонецЕсли;
КонецПроцедуры

&После("ОбработкаПроведения")
Процедура УУ_ОбработкаПроведения(Отказ, РежимПроведения)
	
	//меняем статус заказа
	Если НЕ ДополнительныеСвойства.Свойство("НеИзменятьСтатусЗаказа") И ЗначениеЗаполнено(Заказ) И ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказНаПеремещение") И Не Заказ.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт Тогда		
		ЗаказОб = Заказ.ПолучитьОбъект();
		ЗаказОб.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт;
		Если ЗаказОб.Проведен Тогда
			ЗаказОб.Записать(РежимЗаписиДокумента.Проведение);
		Иначе	
			ЗаказОб.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&После("ОбработкаЗаполнения")
Процедура УУ_ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения,,"Дата, Номер, Проведен");
		ЭтотОбъект.ВидОперации =  Перечисления.ВидыОперацийПеремещениеТоваров.ПередачаМеждуСкладами;
		ЭтотОбъект.Заказ = ДанныеЗаполнения;
		ЭтотОбъект.СкладОтправитель = ДанныеЗаполнения.Склад;
		//ЭтотОбъект.ДокументБезНДС = Ложь;
		//ЭтотОбъект.ДоговорКонтрагента = ДанныеЗаполнения.Договор;
		//ЭтотОбъект.ТипЦен = ЭтотОбъект.ДоговорКонтрагента.ТипЦен;
		ЭтотОбъект.Дата = ДанныеЗаполнения.ДатаПоступления;
		//ЭтотОбъект.ЭтоУниверсальныйДокумент = Истина;
		//ЭтотОбъект.ВалютаДокумента = ДанныеЗаполнения.Валюта;
		//Если Не ЗначениеЗаполнено(ЭтотОбъект.ВалютаДокумента) Тогда
		//	ЭтотОбъект.ВалютаДокумента = УЧ_Сервер.НациональнаяВалюта();		
		//КонецЕсли;
		Для каждого ТекСтрока Из ДанныеЗаполнения.ТабличнаяЧасть Цикл
			НоваяСтрока = ЭтотОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			//НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСУУБУХ().Получить(ТекСтрока.СтавкаНДС);
			//Если Не ЗначениеЗаполнено(ЭтотОбъект.Склад) Тогда
			//	ЭтотОбъект.Склад = ТекСтрока.Склад;	
			//КонецЕсли;
		КонецЦикла;
		
		НовОбъект = Документы.ПеремещениеТоваров.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(НовОбъект, ДанныеЗаполнения,,"Дата, Номер");
		НовОбъект.ВидОперации = Перечисления.ВидыЗаказовНаПеремещение.ПеремещениеМеждуСкладами;
		НовОбъект.Заказ = ДанныеЗаполнения;
		//НовОбъект.СуммаВключаетНДС = Истина;
		//НовОбъект.ДокументБезНДС = Ложь;
		Для каждого ТекСтрока Из ДанныеЗаполнения.ТабличнаяЧасть Цикл
			НоваяСтрока = НовОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			//НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСУУБУХ().Получить(ТекСтрока.СтавкаНДС);
		КонецЦикла;
		
		ЗаполнениеДокументов.Заполнить(НовОбъект, ДанныеЗаполнения, Истина);
		
		ЭтотОбъект.Товары.Очистить();
		
		МассивНоменклатуры = Новый Массив;
		
		Для каждого ТекСтрока Из НовОбъект.Товары Цикл
			НоваяСтрока = ЭтотОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			МассивНоменклатуры.Добавить(НоваяСтрока.Номенклатура);
		КонецЦикла;
			
	КонецЕсли;

КонецПроцедуры

&После("ОбработкаПроверкиЗаполнения")
Процедура УУ_ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ТЗСерии = СерииНоменклатуры.Выгрузить();
	ТЗСерии.Свернуть("Номенклатура,ДатаПроизводства,СерияНоменклатуры","Количество");
	ТЗСерии.Сортировать("Номенклатура,ДатаПроизводства"); 
	СерииНоменклатуры.Очистить();
	Для Каждого СтрокаТовары ИЗ Товары Цикл
		СтруктураОтбора = Новый Структура("Номенклатура",СтрокаТовары.Номенклатура);
		НайденыеСтроки = ТЗСерии.НайтиСтроки(СтруктураОтбора);
		//удаляем элементы с пустой серией (для сортировки)
		Для каждого ЭлМассива Из НайденыеСтроки Цикл
			Если НЕ ЗначениеЗаполнено(ЭлМассива.СерияНоменклатуры) Тогда
				ТекИндекс = НайденыеСтроки.Найти(ЭлМассива);
				НайденыеСтроки.Удалить(ТекИндекс);
			КонецЕсли;
		КонецЦикла;  
		//добавляем элементы с пустой серией в конец массива(для сортировки)
		СтруктураОтбора = Новый Структура("Номенклатура,СерияНоменклатуры,",СтрокаТовары.Номенклатура, Справочники.СерииНоменклатуры.ПустаяСсылка());
		МассивПустыхСерий = ТЗСерии.НайтиСтроки(СтруктураОтбора);
		Для каждого ЭлМассива Из МассивПустыхСерий Цикл
			НайденыеСтроки.Добавить(ЭлМассива);
		КонецЦикла;
		ОсталосьРаспределить = СтрокаТовары.Количество;
		НоваяСтрокаСерий = Неопределено;
		Если ОсталосьРаспределить > 0 Тогда 
			СтрокаСПустойСерией = Неопределено;
			Для Каждого СтрокаСерии Из НайденыеСтроки Цикл 
				Распределить = Мин(ОсталосьРаспределить,СтрокаСерии.Количество);
				ОсталосьРаспределить = ОсталосьРаспределить - Распределить;
				НоваяСтрокаСерий = СерииНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаСерий, СтрокаСерии,,"Количество,ДатаПроизводства");
				НоваяСтрокаСерий.Количество = Распределить;
				НоваяСтрокаСерий.НомерСтрокиРеализации = СтрокаТовары.НомерСтроки; 
				НоваяСтрокаСерий.ДатаПроизводства = ?(ЗначениеЗаполнено(НоваяСтрокаСерий.СерияНоменклатуры),НоваяСтрокаСерий.СерияНоменклатуры.ДатаПроизводства,Дата(1,1,1));
				СтрокаТовары.СерияНоменклатуры = НоваяСтрокаСерий.СерияНоменклатуры;	
				Если СтрокаСерии.Количество < Распределить Тогда
					ТзСерии.Удалить(СтрокаСерии);
				КонецЕсли;
				Если ОсталосьРаспределить = 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ОсталосьРаспределить > 0 Тогда 
				Если НоваяСтрокаСерий <> Неопределено И НЕ ЗначениеЗаполнено(НоваяСтрокаСерий.СерияНоменклатуры) Тогда
					НоваяСтрокаСерий.Количество = НоваяСтрокаСерий.Количество + ОсталосьРаспределить;
				Иначе
					НоваяСтрокаСерий = СерииНоменклатуры.Добавить();
					НоваяСтрокаСерий.Номенклатура = СтрокаТовары.Номенклатура;
					НоваяСтрокаСерий.Количество = ОсталосьРаспределить;
					НоваяСтрокаСерий.НомерСтрокиРеализации = СтрокаТовары.НомерСтроки;
					НоваяСтрокаСерий.ДатаПроизводства = Дата(1,1,1);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	СерииНоменклатуры.Свернуть("Номенклатура,ДатаПроизводства,ИдентификаторСтрокиРеализации,НомерСтрокиРеализации,СерияНоменклатуры,","Количество");
	ДополнительныеСвойства.Вставить("СинхронизироватьТЧСерииДокументаУУ",Истина);

КонецПроцедуры

&После("ПриЗаписи")
Процедура УУ_ПриЗаписи(Отказ)

	Если Не Отказ Тогда
		Если ДополнительныеСвойства.Свойство("СинхронизироватьТЧСерииДокументаУУ") Тогда
			Если ДополнительныеСвойства.СинхронизироватьТЧСерииДокументаУУ Тогда
				УстановитьПривилегированныйРежим(Истина);
				ЗапросДокУУ = Новый Запрос;
				ЗапросДокУУ.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	сабОбработкаДокументов.ДокументУУ КАК ДокументУУ,
				|	сабОбработкаДокументов.ДатаОбработки КАК ДатаОбработки
				|ИЗ
				|	РегистрСведений.сабОбработкаДокументов КАК сабОбработкаДокументов
				|ГДЕ
				|	сабОбработкаДокументов.ДокументБУ = &ДокБУ
				|	И сабОбработкаДокументов.ДокументУУ.Дата ЕСТЬ НЕ NULL 
				|
				|УПОРЯДОЧИТЬ ПО
				|	ДатаОбработки УБЫВ";
				
				ЗапросДокУУ.УстановитьПараметр("ДокБУ", Ссылка);
				
				РезультатЗапросаДокУУ = ЗапросДокУУ.Выполнить();
				Если НЕ РезультатЗапросаДокУУ.Пустой() Тогда
					ВыборкаДокУУ = РезультатЗапросаДокУУ.Выбрать();
					ВыборкаДокУУ.Следующий();
					ДокУУ = ВыборкаДокУУ.ДокументУУ;
					ДокОбъектУУ = ДокУУ.ПолучитьОбъект(); 
					сабОбщегоНазначенияБУХ.сабОбработкиЗаполненияУчпетныхДокументовОбработкаЗаполнения(ДокОбъектУУ, ЭтотОбъект, Неопределено, Истина); 
					ДокОбъектУУ.СерииНоменклатуры.Очистить();  
					Для Каждого СтрокаСерииНоменклатуры ИЗ СерииНоменклатуры Цикл
						НоваяСтрока = ДокОбъектУУ.СерииНоменклатуры.Добавить(); 
						ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаСерииНоменклатуры);
					КонецЦикла;
					Если ДокОбъектУУ.Проведен Тогда
						Попытка
							ДокОбъектУУ.Записать(РежимЗаписиДокумента.Проведение); 
						Исключение
							Сообщить("Не удалось синхронизировать документ управленческого учета по причине: " + ОписаниеОшибки());
						КонецПопытки;
					Иначе 
						Попытка
							ДокОбъектУУ.Записать(); 
						Исключение
							Сообщить("Не удалось синхронизировать документ управленческого учета по причине: " + ОписаниеОшибки());
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;  
	
КонецПроцедуры
