Перем ТекФлаг60_79;

Процедура ОбработкаПроведения(Отказ, Режим)
	
	 Если РучнаяКорректировка Тогда		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Движения документа %1 отредактированы вручную и не могут быть автоматически актуализированы'"), ЭтотОбъект);
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.КлючДанных = Ссылка;
		Сообщение.Сообщить();		
		
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТекФлаг60_79 = Флаг60_79;
	
	Если ТекФлаг60_79 = 2 Тогда
		ТекФлаг60_79 = 0;
	КонецЕсли;
		
	//меняем статус заказа
	Если ЗначениеЗаполнено(ДокОснование) И ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ЗаказПоставщику") И Не ДокОснование.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт Тогда		
		ЗаказОб = ДокОснование.ПолучитьОбъект();
		ЗаказОб.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт;
		ЗаказОб.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	//Если ВидОперации = "Возврат" Тогда
		ПроводкиПоВозрату(,Отказ);
	//ИначеЕсли ВидОперации = "Корректировка" Тогда
	//	ПроводкиПоВозрату(Истина, Отказ);
	//	ПроводкиПоКорректировке();
	//КонецЕсли;
	
	сабОперОбщегоНазначения.РаспределитьПроводкиПоДокументамОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведенияДокумента);

КонецПроцедуры

Функция ВыполнитьЗапросПоСебестоимости(ТекРегистратор, ТекНоменклатура, МассивСчетов = Неопределено)
	
	Счет41 = Ложь;
	
	Если МассивСчетов = Неопределено Тогда
		МассивСчетов = Новый Массив;
		МассивСчетов.Добавить(ПланыСчетов.Учетный.Счет41());//товары
		МассивСчетов.Добавить(ПланыСчетов.Учетный.Счет43());
		Счет41 = Ложь;
	КонецЕсли;	
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УчетныйОбороты.Субконто1,
	               |	УчетныйОбороты.Счет,
	               |	УчетныйОбороты.Субконто2,
	               |	СУММА(УчетныйОбороты.СуммаОборот) КАК СуммаОстаток,
	               |	УчетныйОбороты.КоличествоОборот КАК КоличествоОстаток,
	               |	УчетныйОбороты.КорСубконто1,
	               |	УчетныйОбороты.КорСубконто2
	               |ИЗ
	               |	РегистрБухгалтерии.Учетный.Обороты(
	               |			&Дата,
	               |			&Дата,
	               |			Регистратор,
	               |			Счет В ИЕРАРХИИ (&Счет),
	               |			,
	               |			Предприятия В ИЕРАРХИИ (&Предприятия)
	               |				И ВЫБОР
	               |					КОГДА &Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	               |						ТОГДА ИСТИНА
	               |					ИНАЧЕ ВЫБОР
	               |							КОГДА &Счет41
	               |								ТОГДА Подразделение = &Подразделение
	               |							ИНАЧЕ ИСТИНА
	               |						КОНЕЦ
	               |				КОНЕЦ
	               |				И СценарийПлана = &СценарийПлана
	               |				И ВЫБОР
	               |					КОГДА &Счет41
	               |						ТОГДА Субконто1 = &Номенклатура
	               |					ИНАЧЕ КорСубконто1 = &Номенклатура
	               |				КОНЕЦ,
	               |			,
	               |			) КАК УчетныйОбороты
	               |ГДЕ
	               |	УчетныйОбороты.Регистратор = &Регистратор
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	УчетныйОбороты.Субконто2,
	               |	УчетныйОбороты.Счет,
	               |	УчетныйОбороты.Субконто1,
	               |	УчетныйОбороты.КоличествоОборот,
	               |	УчетныйОбороты.КорСубконто1,
	               |	УчетныйОбороты.КорСубконто2";
	
	Запрос.УстановитьПараметр("Дата", ТекРегистратор.Дата);
	Запрос.УстановитьПараметр("Предприятия", Предприятие);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Счет", МассивСчетов);
	Запрос.УстановитьПараметр("СценарийПлана", Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина));
	Запрос.УстановитьПараметр("Номенклатура", ТекНоменклатура);
	Запрос.УстановитьПараметр("Регистратор", ТекРегистратор);
	Запрос.УстановитьПараметр("Счет41", Счет41);
	
	Возврат Запрос.Выполнить();
	
КонецФункции	

Процедура ПроводкиПоВозрату(ТолькоПоИзмененномуКоличеству = Ложь, Отказ)

	РаспределятьПроводкиПоДокументамТоварооборота = Предприятие.УчетнаяПолитика.РаспределятьПроводкиПоДокументамТоварооборота;
	ЕстьДоговор = СубконтоКонтрагентИДоговор(Счет);
	НалогНДС = Справочники.ВидыНалоговИПлатежейВБюджет.НайтиПоНаименованию("НДС", Истина);

	Если ФлагВалюты Тогда
		КурсВалюты = Курс;
	Иначе
		КурсВалюты = 1
	КонецЕсли;
	
	//УчетВРазрезеДокументов = сабОбщегоНазначения.ПолучитьЗначениеСвойства(Предприятие, "Учет в разрезе документов по расчету с контрагентоми");
	//Если УчетВРазрезеДокументов = Неопределено Тогда
		УчетВРазрезеДокументов = Истина;	
	//КонецЕсли;
	СтатьяФормальнаяСебестоимость = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Формальная себестоимость", Истина);; 
	СтатьяНДС = Справочники.СтатьиЗатрат.НайтиПоНаименованию("НДС", Истина);

	//запрос на среднюю себестоимость по товарам
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(УчетныйОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
	               |	ЕСТЬNULL(УчетныйОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
	               |	УчетныйОстатки.Субконто1 КАК Субконто1,
	               |	УчетныйОстатки.Счет КАК Счет,
	               |	УчетныйОстатки.Субконто2 КАК Субконто2
	               |ИЗ
	               |	РегистрБухгалтерии.Учетный.Остатки(
	               |			&Дата,
	               |			Счет В ИЕРАРХИИ (&Счет),
	               |			,
	               |			Предприятия В ИЕРАРХИИ (&Предприятия)
	               |				И СценарийПлана = &СценарийПлана
	               |				И Субконто1 В (&МассивНоменклатур)) КАК УчетныйОстатки";
	
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Учетный.Счет41());//товары
	МассивСчетов.Добавить(ПланыСчетов.Учетный.Счет10());//сырье
	МассивСчетов.Добавить(ПланыСчетов.Учетный.Счет01());//ОС
	
	Если ЗначениеЗаполнено(ДокОснование) Тогда
		ТекДата = ДокОснование.Дата;
	Иначе
		//Если РассчетРетробонусов Тогда
		//	ТекДата = Дата(2015, 1, 1);
		//Иначе
			ТекДата = Дата;
		//КонецЕсли;	
	КонецЕсли;;
	
	Запрос.УстановитьПараметр("Дата", ТекДата);
	Запрос.УстановитьПараметр("Предприятия", Предприятие);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Счет", МассивСчетов);
	Запрос.УстановитьПараметр("СценарийПлана", Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина));
	Запрос.УстановитьПараметр("МассивНоменклатур", Товары.ВыгрузитьКолонку("Номенклатура"));
	
	РезультатСебест = Запрос.Выполнить();
	
	РезультатСебестОбщий = РезультатСебест;
	
	// регистр Учетный 
	Движения.Учетный.Записывать = Истина;
	//Движения.Реализация.Записывать = Истина;
	Для Каждого ТекСтрокаРеализация Из Товары Цикл
		//Если УЧ_Сервер.НеЗаполненностьКоличестваИЦеныВТЧДок(ТекСтрокаРеализация) = Истина Тогда //проверка на заполненность кол-ва или цены
		//	
		//	Отказ = Истина;
		//	Сообщить("У документа "+ ЭтотОбъект + ", в строке №"+ТекСтрокаРеализация.НомерСтроки+" не заполнено количество и цена.");
		//КонецЕсли; 
			Если ТолькоПоИзмененномуКоличеству Тогда
				Если ТекСтрокаРеализация.Количество = ТекСтрокаРеализация.КоличествоНовое Тогда
					Продолжить;
				КонецЕсли;
				ТекКоличество = ТекСтрокаРеализация.Количество - ТекСтрокаРеализация.КоличествоНовое;
			Иначе
				ТекКоличество = ТекСтрокаРеализация.Количество;
			КонецЕсли;	
			
			Если ТипЗнч(ТекСтрокаРеализация.Номенклатура) = Тип("СправочникСсылка.Номенклатура") И ТекСтрокаРеализация.Номенклатура.ТипНоменклатуры = Перечисления.сабТипыНоменклатуры.Материалы Тогда
				//выручка
				Движение = Движения.Учетный.Добавить();
				Если ТекФлаг60_79 = 0 Тогда
					Движение.СчетКт = Счет;
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт,1,Контрагент);
				Иначе
					Движение.СчетКт = ПланыСчетов.Учетный.Счет7902(Предприятие);
					Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Предприятия", Истина)] = ПредприятиеПоставщик;
					Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Внутренние договоры", Истина)] = ДоговорВн;
				КонецЕсли;
				Движение.СчетДт = ПланыСчетов.Учетный.Счет9004();
				Если Движение.СчетДт.УчетПоПодразделениям Тогда
					Движение.ПодразделениеДт = Подразделение;		
				КонецЕсли;
				Движение.Период = Дата;
				Движение.Предприятия = Предприятие;
				Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
				Движение.Сумма = ТекСтрокаРеализация.СуммаОтгрузки;
				Движение.Содержание = ?(ТекФлаг60_79, "", Строка(Контрагент)) + ", Кол-во:" + ТекКоличество + " Цена:" + ТекСтрокаРеализация.Цена + ", " + Комментарий;
				Если Счет = ПланыСчетов.Учетный.Счет6201() Тогда
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт,2,Договор);
					Если Счет.УчетПоПодразделениям Тогда
						Движение.ПодразделениеКт = Подразделение;		
					КонецЕсли;
				КонецЕсли;
				
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Материалы] = ТекСтрокаРеализация.Номенклатура;
				
				//себестоимость
				Выборка = РезультатСебест.Выбрать();
				
				Если ЗначениеЗаполнено(ДокОснование) Тогда
					СтрукутраПоиска = Новый Структура("Субконто1, Счет, Субконто2", ТекСтрокаРеализация.Номенклатура, ТекСтрокаРеализация.Счет, ДокОснование.Склад) ;
				Иначе
					СтрукутраПоиска = Новый Структура("Субконто1, Счет, Субконто2", ТекСтрокаРеализация.Номенклатура, ТекСтрокаРеализация.Счет, ТекСтрокаРеализация.Склад) ;
				КонецЕсли;
				
				Если Выборка.НайтиСледующий(СтрукутраПоиска) Тогда
					Себестоимость = ?(Выборка.КоличествоОстаток, Выборка.СуммаОстаток / Выборка.КоличествоОстаток, 0);
				Иначе
					Себестоимость = 0;
				КонецЕсли;
				
				Движение = Движения.Учетный.Добавить();
				Движение.СчетКт = ПланыСчетов.Учетный.Счет9004();
				Движение.СчетДт = ТекСтрокаРеализация.Счет;
				Если Движение.СчетДт.УчетПоПодразделениям Тогда
					Движение.ПодразделениеДт = Подразделение;
				КонецЕсли;
				Если Движение.СчетКт.УчетПоПодразделениям Тогда
					Движение.ПодразделениеКт = Подразделение;
				КонецЕсли;
				
				Движение.Период = Дата;
				Движение.Предприятия = Предприятие;
				Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
				Движение.Сумма = Себестоимость * ТекКоличество;
				Движение.КоличествоДт = ТекКоличество;
				Если ТекСтрокаРеализация.Счет.Крахмал Тогда
					Движение.КоличествоКРХДт = ТекСтрокаРеализация.КоличествоКРХ;
				КонецЕсли;
				Движение.НомерСтрокиДок = ТекСтрокаРеализация.НомерСтроки;
				Движение.Содержание = ?(ТекФлаг60_79, "", Строка(Контрагент)) + ", Кол-во:" + ТекКоличество + " С/с:" + Строка(Формат(Себестоимость, "ЧДЦ=4"))  + ", " + Комментарий;
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,1,ТекСтрокаРеализация.Номенклатура);
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,2,ТекСтрокаРеализация.Склад);
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,3,ТекСтрокаРеализация.СерияНоменклатуры);
				Если ТекСтрокаРеализация.Счет = ПланыСчетов.Учетный.ТМЦИнв Тогда
					Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина)] = ТекСтрокаРеализация.ВнеобАктивы;
				КонецЕсли;
			ИначеЕсли  ТипЗнч(ТекСтрокаРеализация.Номенклатура) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
				//выручка
				Движение = Движения.Учетный.Добавить();
				Если ТекФлаг60_79 = 0 Тогда
					Движение.СчетКт = Счет;
					Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина)] = Контрагент;
				Иначе
					Движение.СчетКт = ПланыСчетов.Учетный.Счет7902(Предприятие);
					Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Предприятия", Истина)] = ПредприятиеПоставщик;
					Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Внутренние договоры", Истина)] = ДоговорВн;
				КонецЕсли;
				Если ФлагВалюты Тогда
					Движение.ВалютнаяСуммаКт = ТекСтрокаРеализация.СуммаОтгрузки; 
					Движение.ВалютаДт = Валюта;
				КонецЕсли;
				
				Движение.СчетДт = ПланыСчетов.Учетный.Счет9005();
				Движение.Период = Дата;
				Движение.Предприятия = Предприятие;
				
				Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
				Движение.Сумма = ТекСтрокаРеализация.СуммаОтгрузки * КурсВалюты;
				Движение.НомерСтрокиДок = ТекСтрокаРеализация.НомерСтроки;
				Движение.Содержание = ?(ТекФлаг60_79, "", Строка(Контрагент)) + ", Кол-во:" + ТекКоличество + " Цена:" + ТекСтрокаРеализация.Цена + ", " + Комментарий;
				//Если Счет = ПланыСчетов.Учетный.Счет6201() Тогда
				//	Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Договоры", Истина)] = Договор;			
				//КонецЕсли;
				
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Основные средства", Истина)] = ТекСтрокаРеализация.Номенклатура;
				
				//себестоимость
				Выборка = РезультатСебест.Выбрать();
				
				Если ЗначениеЗаполнено(ДокОснование) Тогда
					СтрукутраПоиска = Новый Структура("Субконто1, Счет, Субконто2", ТекСтрокаРеализация.Номенклатура, ПланыСчетов.Учетный.Счет01(), ДокОснование.Склад) ;
				Иначе
					СтрукутраПоиска = Новый Структура("Субконто1, Счет, Субконто2", ТекСтрокаРеализация.Номенклатура, ПланыСчетов.Учетный.Счет01(), ТекСтрокаРеализация.Склад) ;
				КонецЕсли;
				
				Если Выборка.НайтиСледующий(СтрукутраПоиска) Тогда
					Себестоимость = ?(Выборка.КоличествоОстаток, Выборка.СуммаОстаток / Выборка.КоличествоОстаток, 0);
				Иначе
					Себестоимость = 0;
				КонецЕсли;
				
				Движение = Движения.Учетный.Добавить();
				Движение.СчетКт = ПланыСчетов.Учетный.Счет9005();
				Движение.СчетДт = ПланыСчетов.Учетный.Счет01();
				Движение.Период = Дата;
				Движение.Предприятия = Предприятие;
				Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
				Если ФлагВалюты Тогда
					Движение.ВалютнаяСуммаДт = Себестоимость * ТекКоличество; 
					Движение.ВалютаКт = Валюта;
				КонецЕсли;
				Движение.Сумма = Себестоимость * ТекКоличество * КурсВалюты;
				Движение.КоличествоДт = ТекКоличество;
				Движение.НомерСтрокиДок = ТекСтрокаРеализация.НомерСтроки;
				Движение.Содержание = ?(ТекФлаг60_79, "", Строка(Контрагент)) + ", Кол-во:" + ТекКоличество + " С/с:" + Строка(Формат(Себестоимость, "ЧДЦ=4"))  + ", " + Комментарий;
				Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Основные средства", Истина)] = ТекСтрокаРеализация.Номенклатура;
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Основные средства", Истина)] = ТекСтрокаРеализация.Номенклатура;
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина)] = ТекСтрокаРеализация.Склад;
				
				
			Иначе
				//себестоимость
				
				Если ТекСтрокаРеализация.Счет = ПланыСчетов.Учетный.Счет43() Тогда
					СчетГП = ПланыСчетов.Учетный.Счет43();
					//Если РассчетРетробонусов И ЗначениеЗаполнено(?(ЗначениеЗаполнено(ТекСтрокаРеализация.ДокументРеализации), ТекСтрокаРеализация.ДокументРеализации, ДокОснование)) Тогда
					//	РезультатСебест = ВыполнитьЗапросПоСебестоимости(?(ЗначениеЗаполнено(ТекСтрокаРеализация.ДокументРеализации), ТекСтрокаРеализация.ДокументРеализации, ДокОснование), ТекСтрокаРеализация.Наименование);
					//	Выборка = РезультатСебест.Выбрать();
					//	СтрукутраПоиска = Новый Структура("Субконто1, Счет", ТекСтрокаРеализация.Наименование, СчетГП);
					//	Если Выборка.НайтиСледующий(СтрукутраПоиска) Тогда
					//		Себестоимость = ?(Выборка.КоличествоОстаток, Выборка.СуммаОстаток / Выборка.КоличествоОстаток, 0);
					//	Иначе
					//		Себестоимость = 0;
					//	КонецЕсли;
					//Иначе	
					//запрос на плановую сеьестоимость
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					|	ПлановаяСебестоимостьСрезПоследних.Номенклатура,
					|	ВЫБОР
					|		КОГДА ПлановаяСебестоимостьСрезПоследних.СуммаФакт = 0
					|			ТОГДА ПлановаяСебестоимостьСрезПоследних.Сумма
					|		ИНАЧЕ ПлановаяСебестоимостьСрезПоследних.СуммаФакт
					|	КОНЕЦ КАК Сумма
					|ИЗ
					|	РегистрСведений.ПлановаяСебестоимость.СрезПоследних(
					|			&Дата,
					|			Номенклатура = &Номенклатура
					|				И Предприятие = &ТекПредприятие) КАК ПлановаяСебестоимостьСрезПоследних";
					
					Запрос.УстановитьПараметр("Дата", Дата);
					Запрос.УстановитьПараметр("ТекПредприятие", Предприятие);
					Запрос.УстановитьПараметр("Номенклатура", ТекСтрокаРеализация.Номенклатура);
					
					РезультатРегистр = Запрос.Выполнить();
					Выборка = РезультатРегистр.Выбрать();
					Если Выборка.Следующий() Тогда
						Себестоимость = Выборка.Сумма;
					Иначе
						Себестоимость = 0;			
					КонецЕсли;
					
				Иначе
					СчетГП = ПланыСчетов.Учетный.Счет41();
					//Если РассчетРетробонусов И ЗначениеЗаполнено(?(ЗначениеЗаполнено(ТекСтрокаРеализация.ДокументРеализации), ТекСтрокаРеализация.ДокументРеализации, ДокОснование)) Тогда
					//	РезультатСебест = ВыполнитьЗапросПоСебестоимости(?(ЗначениеЗаполнено(ТекСтрокаРеализация.ДокументРеализации), ТекСтрокаРеализация.ДокументРеализации, ДокОснование), ТекСтрокаРеализация.Наименование);
					//	Выборка = РезультатСебест.Выбрать();
					//	СтрукутраПоиска = Новый Структура("Субконто1, Счет", ТекСтрокаРеализация.Наименование, СчетГП) ;
					//Иначе	
					РезультатСебест = РезультатСебестОбщий;
					Выборка = РезультатСебест.Выбрать();
					//Если РассчетРетробонусов Тогда //Супербоб на Склад Евро арт
					//	СтрукутраПоиска = Новый Структура("Субконто1, Счет, Субконто2", ТекСтрокаРеализация.Наименование, СчетГП, ?(ТекСтрокаРеализация.Склад.Наименование = "СПБ-ВЕДК2 (Рост)", Справочники.Склады.НайтиПоНаименованию("СПБ-ВЕДК1 (Евро-Арт)"), ТекСтрокаРеализация.Склад));
					//Иначе
					
					Если ЗначениеЗаполнено(ДокОснование) Тогда
						СтрукутраПоиска = Новый Структура("Субконто1, Счет, Субконто2", ТекСтрокаРеализация.Номенклатура, СчетГП, ДокОснование.Склад) ;
					Иначе
						СтрукутраПоиска = Новый Структура("Субконто1, Счет, Субконто2", ТекСтрокаРеализация.Номенклатура, СчетГП, ТекСтрокаРеализация.Склад) ;
					КонецЕсли;
					
					//КонецЕсли;	
					//КонецЕсли;	
					Если Выборка.НайтиСледующий(СтрукутраПоиска) Тогда
						Себестоимость = ?(Выборка.КоличествоОстаток, Выборка.СуммаОстаток / Выборка.КоличествоОстаток, 0);
					Иначе
						Себестоимость = 0;
					КонецЕсли;
					
					//КонецЕсли;
				КонецЕсли;
				
				Движение = Движения.Учетный.Добавить();
				Движение.СчетКт = ПланыСчетов.Учетный.Счет9002();
				Если Движение.СчетКт.УчетПоПодразделениям Тогда
					Движение.ПодразделениеКт = Подразделение;
				КонецЕсли;
				Движение.СчетДт = СчетГП;
				Если Движение.СчетДт.УчетПоПодразделениям Тогда
					Движение.ПодразделениеДт = Подразделение;
				КонецЕсли;
				Если ФлагВалюты И СчетГП = ПланыСчетов.Учетный.Счет41() Тогда
					Движение.ВалютнаяСуммаДт = Себестоимость * ТекКоличество; 
					Движение.ВалютаКт = Валюта;
				КонецЕсли;
				Движение.Период = Дата;
				Движение.Предприятия = Предприятие;
				Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
				Движение.Сумма = Себестоимость * ТекКоличество* КурсВалюты;
				Движение.КоличествоДт = ТекКоличество;
				Движение.НомерСтрокиДок = ТекСтрокаРеализация.НомерСтроки;
				Движение.Содержание = ?(ТекФлаг60_79, "", Строка(Контрагент)) + ", Кол-во:" + ТекКоличество + " С/с:" + Строка(Формат(Себестоимость, "ЧДЦ=4"))  + ", " + Комментарий;
				Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина)] = ТекСтрокаРеализация.Номенклатура;
				//Если РассчетРетробонусов Тогда
				//	Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.ЗаявкаНаОтгрузку] = Контрагент;
				Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = СтатьяФормальнаяСебестоимость;
				//КонецЕсли;
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,1,ТекСтрокаРеализация.Номенклатура);
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,2,ТекСтрокаРеализация.Склад);
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,3,ТекСтрокаРеализация.СерияНоменклатуры);
					
				
				//выручка
				Движение = Движения.Учетный.Добавить();
				Если ТекФлаг60_79 = 0 Тогда
					СчетКт = Счет;
					//Если РассчетРетробонусов Тогда
					//	Если ТекСтрокаРеализация.Счет = ПланыСчетов.Учетный.Счет41() И ТекСтрокаРеализация.Наименование.ТипНоменклатуры = Перечисления.сабТипыНоменклатуры.Товар Тогда 
					//		СчетКт = Счет;
					//	ИначеЕсли ТекСтрокаРеализация.Счет = ПланыСчетов.Учетный.Счет41() И ТекСтрокаРеализация.Наименование.ТипНоменклатуры = Перечисления.сабТипыНоменклатуры.Комплектующие Тогда
					//		СчетКт = ПланыСчетов.Учетный._62_30;
					//	ИначеЕсли ТекСтрокаРеализация.Наименование.ТипНоменклатуры = Перечисления.сабТипыНоменклатуры.ОсновнаяПродукция Тогда
					//		СчетКт = Счет;
					//	Иначе
					//		СчетКт = ПланыСчетов.Учетный.Счет6203();
					//	КонецЕсли;	
					//КонецЕсли;
					Движение.СчетКт = СчетКт;
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт,1,Контрагент);
					Если Счет = ПланыСчетов.Учетный.Счет6201() Или Счет = ПланыСчетов.Учетный._62_30 Тогда
						УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт,2,Договор);
					КонецЕсли;
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт,3,?(ЗначениеЗаполнено(ТекСтрокаРеализация.ДокументРеализации), ТекСтрокаРеализация.ДокументРеализации, ДокОснование));
					Если ТекСтрокаРеализация.Номенклатура.ТипНоменклатуры = Перечисления.сабТипыНоменклатуры.Комплектующие Тогда
						Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = СтатьяФормальнаяСебестоимость;
					КонецЕсли;
					Если Движение.СчетКт.УчетПоПодразделениям Тогда
						Движение.ПодразделениеКт = Подразделение;
					КонецЕсли;
				Иначе
					Движение.СчетКт = ПланыСчетов.Учетный.Счет7902(Предприятие);
					Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Предприятия", Истина)] = ПредприятиеПоставщик;
					Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Внутренние договоры", Истина)] = ДоговорВн;
				КонецЕсли;
				Движение.СчетДт = ПланыСчетов.Учетный.Счет9001();
				Если Движение.СчетДт.УчетПоПодразделениям Тогда
					Движение.ПодразделениеДт = Подразделение;
				КонецЕсли;
				Движение.КоличествоДт = ТекКоличество;
				Движение.Период = Дата;
				Движение.Предприятия = Предприятие;
				Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
				Если ФлагВалюты И ТекСтрокаРеализация.Счет = ПланыСчетов.Учетный.Счет41() Тогда
					Движение.ВалютнаяСуммаКт = ТекСтрокаРеализация.СуммаОтгрузки; 
					Движение.ВалютаДт = Валюта;
				КонецЕсли;
				//Если РассчетРетробонусов И ТекСтрокаРеализация.Наименование.ТипНоменклатуры = Перечисления.сабТипыНоменклатуры.Комплектующие Тогда
				//	Движение.Сумма = Себестоимость * ТекКоличество * КурсВалюты;
				//Иначе	
				Движение.Сумма = ?(ТолькоПоИзмененномуКоличеству, ТекКоличество * ?(ТекСтрокаРеализация.Количество = 0, 0, ТекСтрокаРеализация.СуммаОтгрузки/ТекСтрокаРеализация.Количество), ТекСтрокаРеализация.СуммаОтгрузки) * КурсВалюты;
				//КонецЕсли;
				Движение.НомерСтрокиДок = ТекСтрокаРеализация.НомерСтроки;
				Движение.Содержание = ?(ТекФлаг60_79, "", Строка(Контрагент)) + ", Кол-во:" + ТекКоличество + " Цена:" + ТекСтрокаРеализация.Цена + ", " + Комментарий;
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,1,ТекСтрокаРеализация.Номенклатура);
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,3,Контрагент);
				
			КонецЕсли;
			
			//начисление транспорта
			Если ТекСтрокаРеализация.СуммаДоставкиНачислено И НачислятьДоставку Тогда
				Движение = Движения.Учетный.Добавить();
				Движение.СчетКт = ПланыСчетов.Учетный.Счет9003();
				Движение.СчетДт = ТекСтрокаРеализация.КорСчет;
				Движение.Период = Дата;
				Движение.Предприятия = Предприятие;
				Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
				Движение.ПодразделениеКт = Подразделение;
				Если ФлагВалюты И ТекСтрокаРеализация.КорСчет.Валютный Тогда
					Движение.ВалютнаяСуммаДт = ТекСтрокаРеализация.СуммаДоставкиНачислено; 
					Движение.ВалютаКт = Валюта;
				КонецЕсли;
				Движение.Сумма = ТекСтрокаРеализация.СуммаДоставкиНачислено* КурсВалюты;
				Движение.Содержание = "Кол-во: " + Строка(ТекКоличество) + " дал, Грузополучатель: " + Строка(Контрагент);
				Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = Справочники.СтатьиЗатрат.ТранспортныеАвто;
				Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина)] = ТекСтрокаРеализация.Номенклатура;
				
				Если ТекСтрокаРеализация.КорСчет.УчетПоПодразделениям Тогда
					Движение.ПодразделениеДт = Подразделение;	
				КонецЕсли;
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,ТекСтрокаРеализация.КорСчет,1,ТекСтрокаРеализация.КорСубконто1);
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,ТекСтрокаРеализация.КорСчет,2,ТекСтрокаРеализация.КорСубконто2);
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,ТекСтрокаРеализация.КорСчет,3,ТекСтрокаРеализация.КорСубконто3);
			КонецЕсли;
			Для каждого ТекСтрокаВерха Из Верхи Цикл
				//верх на 90.3
				Если ТипЗнч(ТекСтрокаВерха.ВерхКонтрагента) = Тип("СправочникСсылка.Сотрудники") Тогда
					Движение = Движения.Учетный.Добавить();
					Движение.СчетКт = ПланыСчетов.Учетный.Счет9003();
					Движение.ПодразделениеКт = Подразделение;
					Движение.СчетДт = ПланыСчетов.Учетный.РасчетыПоБонусам;
					Движение.ПодразделениеДт = Подразделение;
					Движение.Период = Дата;
					Движение.Предприятия = Предприятие;
					Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
					Если ФлагВалюты Тогда
						Движение.ВалютнаяСуммаДт = ТекСтрокаВерха.Сумма * ТекКоличество; 
						Движение.ВалютаКт = Валюта;
					КонецЕсли;
					Движение.Сумма = ТекСтрокаВерха.Сумма * ТекКоличество * КурсВалюты;
					Движение.НомерСтрокиДок = ТекСтрокаРеализация.НомерСтроки;
					Движение.Содержание = "Начислен бонус: " + Строка(ТекСтрокаВерха.ВерхКонтрагента) + ", Кол-во:" + ТекКоличество + " Бонус:" + ТекСтрокаВерха.Сумма + ", " + ТекСтрокаВерха.Комментарий;
					Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина)] = ТекСтрокаРеализация.Номенклатура;
					Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = ТекСтрокаВерха.Статья;
					Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Сотрудники", Истина)] = ТекСтрокаВерха.ВерхКонтрагента;
					Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Договоры", Истина)] = ТекСтрокаВерха.ДоговорМенеджера;
					
				Иначе
					Движение = Движения.Учетный.Добавить();
					Движение.СчетКт = ПланыСчетов.Учетный.Счет9003();
					Движение.ПодразделениеКт = Подразделение;
					Движение.СчетДт = ПланыСчетов.Учетный.Счет7601();
					Движение.Период = Дата;
					Движение.Предприятия = Предприятие;
					Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
					Если ФлагВалюты Тогда
						Движение.ВалютнаяСуммаДт = ТекСтрокаВерха.Сумма * ТекКоличество; 
						Движение.ВалютаКт = Валюта;
					КонецЕсли;
					Движение.Сумма = ТекСтрокаВерха.Сумма * ТекКоличество * КурсВалюты;
					Движение.НомерСтрокиДок = ТекСтрокаРеализация.НомерСтроки;
					Движение.Содержание = "Начислен верх: " + Строка(ТекСтрокаВерха.ВерхКонтрагента) + ", Кол-во:" + ТекКоличество + " Верх:" + ТекСтрокаВерха.Сумма + ", " + ТекСтрокаВерха.Комментарий;
					Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина)] = ТекСтрокаРеализация.Номенклатура;
					Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = ТекСтрокаВерха.Статья;
					Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина)] = Контрагент;
					Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Договоры", Истина)] = ТекСтрокаВерха.ВерхКонтрагента;	
				КонецЕсли;
			КонецЦикла; 
			//акциз на 90.3
			Если Акциз Тогда
				Движение = Движения.Учетный.Добавить();
				Движение.СчетКт = ПланыСчетов.Учетный.Счет9003();
				Движение.ПодразделениеКт = Подразделение;
				Движение.СчетДт = ПланыСчетов.Учетный.Счет6801();
				Движение.ПодразделениеДт = Подразделение;
				Движение.Период = Дата;
				Движение.Предприятия = Предприятие;
				Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
				Движение.Сумма = Акциз * ТекКоличество;
				Движение.НомерСтрокиДок = ТекСтрокаРеализация.НомерСтроки;
				Движение.Содержание = "Начислен акциз: " + строка(ТекКоличество) + "*" + Строка(Акциз);
				Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина)] = ТекСтрокаРеализация.Номенклатура;
				Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = Справочники.СтатьиЗатрат.Акцизы;
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НалогиИСборы] = НалогиИСборыАкциз;
			КонецЕсли; 
			
			// НДС
			Если УчитыватьНДС И ТекСтрокаРеализация.СуммаНДС Тогда
								
				Движение = Движения.Учетный.Добавить();
				
				//Если НЕ СчетГП = СчетТовары Тогда
				//	Движение.СчетДт = Счет;
				//	Если ЕстьДоговор Тогда
				//		Движение.СубконтоДт[СубконтоКонтрагенты] = ТекКонтрагент;
				//		
				//		Если НЕ СчетДт.ВидыСубконто.Найти(СубконтоДоговорыКонтрагентов) = Неопределено Тогда
				//			Движение.СубконтоДт[СубконтоДоговорыКонтрагентов] = ТекДоговор;
				//		КонецЕсли;
				//		
				//		Если СчетДт.УчетПоПодразделениям Тогда
				//			Движение.ПодразделениеДт = Подразделение;
				//		КонецЕсли;
				//	ИначеЕсли СчетДт.Родитель = ПланыСчетов.Учетный.Счет79() Тогда
				//		Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Предприятия", Истина)] = ?(ЗначениеЗаполнено(ПредприятиеПоставщик), ПредприятиеПоставщик, ТекКонтрагент);
				//		Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Внутренние договоры", Истина)] = ТекДоговор;
				//		Если Движение.СчетДт.УчетПоПодразделениям Тогда
				//			Движение.ПодразделениеДт = Подразделение;
				//		КонецЕсли;	
				//		
				//	Иначе
				//		Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Предприятия", Истина)] = ТекКонтрагент;
				//		Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Внутренние договоры", Истина)] = ТекДоговор;
				//	КонецЕсли;
				//Иначе
					Движение.СчетКт = ПланыСчетов.Учетный.Счет9003();
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, Движение.СчетКт, 1, ТекСтрокаРеализация.Номенклатура);
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, Движение.СчетКт, 2, СтатьяНДС);
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, Движение.СчетКт, 3, Контрагент);
				//КонецЕсли;
				
				Если ФлагВалюты И Движение.СчетКт.Валютный И Не Валюта = Предприятие.ОсновнаяВалютаУчета Тогда
					Движение.ВалютнаяСуммаКт = ТекСтрокаРеализация.СуммаОтгрузки; 
					Движение.ВалютаКт = Валюта;
				КонецЕсли;
				
				//++сабОпер
				Если НЕ Движение.СчетКт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Документ", Истина)) = Неопределено И РаспределятьПроводкиПоДокументамТоварооборота Тогда
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, Движение.СчетКт, 3, Ссылка);
				КонецЕсли;
				//--сабОпер
				
				Движение.СчетДт = ПланыСчетов.Учетный.Счет6801();
				
				Если Движение.СчетДт.УчетПоПодразделениям Тогда
					Движение.ПодразделениеДт = Подразделение;
				КонецЕсли; 
				
				Если Движение.СчетДт.Количественный Тогда
					Движение.КоличествоДт = ТекСтрокаРеализация.Количество;
				КонецЕсли;  
				
				Движение.Период = Дата;
				Движение.Предприятия = Предприятие;
				Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
				Движение.Сумма = ТекСтрокаРеализация.СуммаНДС;
				Движение.НомерСтрокиДок = ТекСтрокаРеализация.НомерСтроки;
				Движение.Содержание = ?(Не ЕстьДоговор, "", Строка(Контрагент)) + ", Кол-во:" + ТекСтрокаРеализация.Количество + " Цена:" + ТекСтрокаРеализация.Цена + ", " + Комментарий;
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,1,НалогНДС);
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,2,Организация);
			
			КонецЕсли;

			
			//	//Движения по регистру Реализация
			//	Движение = Движения.Реализация.Добавить();
			//	Движение.Период = Дата;
			//	Движение.Предприятие = Предприятие;
			//	Движение.Контрагент = ?(ТекФлаг60_79 = 0,Контрагент,ПредприятиеПоставщик);
			//	Движение.Номенклатура = ТекСтрокаРеализация.Наименование;
			//	Движение.Количество = -ТекКоличество;
			//	Движение.КоличествоОбъем = -ТекСтрокаРеализация.КоличествоКРХ;
			//	Движение.СуммаОтгрузки = -ТекСтрокаРеализация.СуммаОтгрузки;
			//	Движение.СуммаТранспортНачисленоАвто = -ТекСтрокаРеализация.СуммаДоставкиНачислено;
			//	СуммаВерхаМенеджера = 0;
			//	СуммаВерха = 0;
			//	Для каждого ТекСтрокаВерха Из Верхи Цикл
			//		Если ТипЗнч(ТекСтрокаВерха.ВерхКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			//			СуммаВерха = СуммаВерха + ТекСтрокаВерха.Сумма
			//		Иначе
			//			СуммаВерхаМенеджера = СуммаВерхаМенеджера + ТекСтрокаВерха.Сумма
			//		КонецЕсли;
			//	КонецЦикла;	           
			//	Движение.СуммаВерх = -СуммаВерха * ТекКоличество;
			//	Движение.СуммаМенеджер = -СуммаВерхаМенеджера * ТекКоличество;
			//	Если ТекСтрокаРеализация.Счет = ПланыСчетов.Учетный.Счет41() Тогда
			//		СчетТов = ПланыСчетов.Учетный.Счет41();
			//		Выборка = РезультатСебест.Выбрать();
			//		СтрукутраПоиска = Новый Структура("Субконто1, Счет, Субконто2", ТекСтрокаРеализация.Наименование, СчетТов, ТекСтрокаРеализация.Склад) ;
			//		Если Выборка.НайтиСледующий(СтрукутраПоиска) Тогда
			//			Себестоимость = ?(Выборка.КоличествоОстаток, Выборка.СуммаОстаток / Выборка.КоличествоОстаток, 0);
			//		Иначе
			//			Себестоимость = 0;
			//		КонецЕсли;
			//		Движение.Себестоимость = -Себестоимость * ТекКоличество;
			//	КонецЕсли;
			//	
			//	КомДир = РегистрыСведений.КоммерческиеДиректоры.СрезПоследних(Дата,Новый Структура("Контрагент",Контрагент));
			//	Если КомДир.Количество() Тогда
			//		Движение.КоммерческийДиректор = КомДир[0].КоммерческийДиректор;			
			//	КонецЕсли;
			//	Менеджер = РегистрыСведений.Ответственные.СрезПоследних(Дата,Новый Структура("Контрагент",Контрагент));
			//	Если Менеджер.Количество() Тогда
			//		Движение.Менеджер = Менеджер[0].Ответственный;			
			//	КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	

Процедура ПроводкиПоКорректировке()
	
	УчетВРазрезеДокументов = сабОбщегоНазначения.ПолучитьЗначениеСвойства(Предприятие, "Учет в разрезе документов по расчету с контрагентоми");
	Если УчетВРазрезеДокументов = Неопределено Тогда
		УчетВРазрезеДокументов = Ложь;	
	КонецЕсли;
	
	Для Каждого ТекСтрокаРеализация Из Товары Цикл
			ДельтаПоСумме = ТекСтрокаРеализация.СуммаНовая - ТекСтрокаРеализация.СуммаОтгрузки;
			Если ТекСтрокаРеализация.Количество <> ТекСтрокаРеализация.КоличествоНовое Тогда
				Продолжить;
			Иначе
				Если ДельтаПоСумме = 0 Тогда
					Продолжить;
				КонецЕсли;	
			КонецЕсли;
			//корректировка выручки
			Движения.Учетный.Записывать = Истина;
			Движение = Движения.Учетный.Добавить();
			Если ТекСтрокаРеализация.Счет = ПланыСчетов.Учетный.Счет41() И ТекСтрокаРеализация.Номенклатура.ТипНоменклатуры = Перечисления.сабТипыНоменклатуры.Товар Тогда 
				СчетДт = Счет;
			ИначеЕсли ТекСтрокаРеализация.Счет = ПланыСчетов.Учетный.Счет41() И ТекСтрокаРеализация.Номенклатура.ТипНоменклатуры = Перечисления.сабТипыНоменклатуры.Комплектующие Тогда
				СчетДт = ПланыСчетов.Учетный._62_30;
			Иначе
				СчетДт = ПланыСчетов.Учетный.Счет6203();
			КонецЕсли;	
			Движение.СчетДт = СчетДт;
			
			Если СубконтоКонтрагентИДоговор(СчетДт) Тогда
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина)] = Контрагент;
				Если НЕ СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Договоры", Истина)) = Неопределено Тогда
					Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Договоры", Истина)] = Договор;
				КонецЕсли;
				Если СчетДт.УчетПоПодразделениям Тогда
					Движение.ПодразделениеДт = Подразделение;
				КонецЕсли;
				Если СчетДт = ПланыСчетов.Учетный.Счет6201() ИЛИ СчетДт = ПланыСчетов.Учетный.Счет6203() Тогда
					Если СчетДт = ПланыСчетов.Учетный.Счет6201() Тогда
						Если ФлагВалюты Тогда
							Движение.ВалютнаяСуммаДт = ТекСтрокаРеализация.СуммаОтгрузки; 
							Движение.ВалютаДт = Валюта;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если НЕ СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Документ", Истина)) = Неопределено
					И УчетВРазрезеДокументов Тогда
					Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Документ", Истина)] = ?(ЗначениеЗаполнено(ТекСтрокаРеализация.ДокументРеализации), ТекСтрокаРеализация.ДокументРеализации, ДокОснование);
				КонецЕсли;
			ИначеЕсли СчетДт.Родитель = ПланыСчетов.Учетный.Счет79() Тогда
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Предприятия", Истина)] = ПредприятиеПоставщик;
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Внутренние договоры", Истина)] = ДоговорВн;
				Если ФлагВалюты Тогда
					Движение.ВалютнаяСуммаДт = ТекСтрокаРеализация.СуммаОтгрузки; 
					Движение.ВалютаДт = Валюта;
				КонецЕсли;
			Иначе
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Предприятия", Истина)] = ПредприятиеПоставщик;
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Внутренние договоры", Истина)] = ДоговорВн;
				Если ФлагВалюты Тогда
					Движение.ВалютнаяСуммаДт = ТекСтрокаРеализация.СуммаОтгрузки; 
					Движение.ВалютаДт = Валюта;
				КонецЕсли;
			КонецЕсли;
			Движение.СчетКт = ПланыСчетов.Учетный.Счет9001();
			Движение.ПодразделениеКт = Подразделение;
			//Движение.КоличествоКт = ТекСтрокаРеализация.Количество;
			Движение.Период = Дата;
			Движение.Предприятия = Предприятие;
			Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
			Движение.Сумма = ДельтаПоСумме;
			Движение.НомерСтрокиДок = ТекСтрокаРеализация.НомерСтроки;
			Движение.Содержание = "Корректировка реализации " + ДокОснование;
			Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина)] = ТекСтрокаРеализация.Номенклатура;
			Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.ЗаявкаНаОтгрузку] = Контрагент;
			Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Выручка по реализации", Истина);;
	
	КонецЦикла;
	
КонецПроцедуры

Функция СубконтоКонтрагентИДоговор(Счет)
	
	Возврат Счет.Родитель = ПланыСчетов.Учетный.Счет62() ИЛИ Счет.Родитель = ПланыСчетов.Учетный.Счет60() ИЛИ Счет = ПланыСчетов.Учетный.Счет7601() ИЛИ Счет = ПланыСчетов.Учетный._62_30;
	
КонецФункции

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если Не ЗначениеЗаполнено(ВидОперации) Тогда
		ВидОперации = "Возврат";
	КонецЕсли;	
	
	СуммаДокумента = Товары.Итог("СуммаОтгрузки");
	СуммаИтог = Товары.Итог("СуммаОтгрузки");
	СуммаНДСИтог = Товары.Итог("СуммаНДС");
	
	Если ЗначениеЗаполнено(Склад) Тогда
		Для каждого ТекСтрока Из Товары Цикл
			ТекСтрока.Склад = Склад;
		КонецЦикла; 
	КонецЕсли; 
	
	//Обработка пометка удаления
	Если Не Ссылка.ПометкаУдаления И ПометкаУдаления Тогда
		
		Если ЗначениеЗаполнено(ДокОснование) И ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			
			Запрос = новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	УЧ_ПеремещениеТоваров.Ссылка
			|ИЗ
			|	Документ.УЧ_ПеремещениеТоваров КАК УЧ_ПеремещениеТоваров
			|ГДЕ
			|	УЧ_ПеремещениеТоваров.ДокОснование = &ДокОснование
			|	И НЕ УЧ_ПеремещениеТоваров.ПометкаУдаления
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	УЧ_Возврат.Ссылка
			|ИЗ
			|	Документ.УЧ_Возврат КАК УЧ_Возврат
			|ГДЕ
			|	УЧ_Возврат.ДокОснование = &ДокОснование
			|	И НЕ УЧ_Возврат.ПометкаУдаления
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	УЧ_ПоступлениеТоваров.Ссылка
			|ИЗ
			|	Документ.УЧ_ПоступлениеТоваров КАК УЧ_ПоступлениеТоваров
			|ГДЕ
			|	УЧ_ПоступлениеТоваров.ДокОснование = &ДокОснование
			|	И НЕ УЧ_ПоступлениеТоваров.ПометкаУдаления";
			Запрос.УстановитьПараметр("ДокОснование", ДокОснование);
			Выгрузка = Запрос.Выполнить().Выгрузить();
			Если Выгрузка.Количество() = 1 Тогда //остался единственный не помеченный подчиненный заказу документ - этот
				Если ДокОснование.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт Тогда
					ЗаказОб = ДокОснование.ПолучитьОбъект();
					ЗаказОб.Статус = Перечисления.СтатусыЗаказовПоставщикам.Подтвержден;
					ЗаказОб.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
	//из подписки на событие
	БюджетныйНаСервере.ДокументыПередЗаписьюПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);  
	
	Если Не ЭтоНовый() Тогда
		Если ПометкаУдаления И НЕ Ссылка.ПометкаУдаления Тогда 
			УстановитьПривилегированныйРежим(Истина);
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	сабМаршрутныйЛистТабличнаяЧасть.Ссылка.Представление КАК МаршрутныйЛист,
			|	сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента.Представление КАК Заказ,
			|	сабМаршрутныйЛистТабличнаяЧасть.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.сабМаршрутныйЛист.ТабличнаяЧасть КАК сабМаршрутныйЛистТабличнаяЧасть
			|ГДЕ
			|	сабМаршрутныйЛистТабличнаяЧасть.Реализация = &Реализация
			|	И НЕ сабМаршрутныйЛистТабличнаяЧасть.Ссылка.ПометкаУдаления";
			
			Запрос.УстановитьПараметр("Реализация", Ссылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				Отказ = Истина;  
				ТекстСообщения = "";
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					ТекстСообщения = ?(ТекстСообщения = "",
					"В документе " + ВыборкаДетальныеЗаписи.МаршрутныйЛист + " для заказа " + ВыборкаДетальныеЗаписи.Заказ +
					" данный документ выбран в поле ""реализация"". Перед установкой пометки удаления необходимо очистить соответствующее поле для указанного заказа. " + 
					"Для быстрого перехода к документу ""Маршрутный лист"" нажмите на это сообщение двойным кликом левой кнопки мыши.",
					Символы.ПС + "В документе " + ВыборкаДетальныеЗаписи.МаршрутныйЛист + " для заказа " + ВыборкаДетальныеЗаписи.Заказ +
					" данный документ выбран в поле ""реализация"". Перед установкой пометки удаления необходимо очистить соответствующее поле для указанного заказа. " + 
					"Для быстрого перехода к документу ""Маршрутный лист"" нажмите на это сообщение двойным кликом левой кнопки мыши."); 
				КонецЦикла;
				Сообщение = Новый СообщениеПользователю();
    			Сообщение.Текст = НСтр("ru = '" + ТекстСообщения +"' ");
     		    Сообщение.КлючДанных = ВыборкаДетальныеЗаписи.Ссылка;
    			Сообщение.Сообщить();
				//Сообщить(ТекстСообщения);
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьВерхПоНоменклатуре(ТекНоменклатура, ТекКонтрагент)
	
	ТекНаименование = "Верх " + ТекНоменклатура.Родитель.Наименование;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВерхиКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ВерхиКонтрагентов
	|ГДЕ
	|	ВерхиКонтрагентов.Владелец = &Владелец
	|	И ВерхиКонтрагентов.Наименование = &Наименование
	|	И ВерхиКонтрагентов.Предприятие = &Предприятие";
	Запрос.УстановитьПараметр("Владелец", ТекКонтрагент);
	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	Запрос.УстановитьПараметр("Наименование", ТекНаименование);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ТекЭлемент = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		ТекЭлемент.Владелец = ТекКонтрагент;
		ТекЭлемент.Наименование = ТекНаименование;
		ТекЭлемент.Предприятие = Предприятие;
		ТекЭлемент.Записать();
		Возврат ТекЭлемент.Ссылка;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Ссылка;
		КонецЦикла;
	КонецЕсли;	
	
КонецФункции

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	//Если Константы.сабМодульОперативныйУчет.Получить() Тогда
	//	Если Предприятие.УчетПоПодразделениям Тогда
	//		ПроверяемыеРеквизиты.Добавить("Подразделение");			
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	РучнаяКорректировка = Ложь;
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	РучнаяКорректировка = Ложь;
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	БюджетныйНаСервере.ПриУстановкеНовогоНомераПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	//{{__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.УЧ_Реализация") Тогда
		// Заполнение шапки
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения,, "Дата, Номер, Проведен, РучнаяКорректировка");
		ДокОснование = ДанныеЗаполнения.Ссылка;
		
		Для Каждого ТекСтрокаРеализация Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаРеализация);
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаВозвратОтКлиента") Тогда	
		
		Отказ = сабОперОбщегоНазначения.ПроверкаСозданияНаОснованииНаСервере(ДанныеЗаполнения, Комментарий, СтандартнаяОбработка, ТипЗнч(Ссылка));
		Если Отказ.Признак = "##УжеСоздан" Тогда
			ВызватьИсключение "На основании Заказ клиента уже введен документ " + Отказ.Ссылка;
		ИначеЕсли Отказ.Признак = "##НеПроведен" Тогда
			ВызватьИсключение "Документ Заказ-основание не проведен. Ввод на основании не возможен.";
		КонецЕсли;
		
		// Заполнение шапки
		Предприятие 	= ДанныеЗаполнения.Предприятие;
		Подразделение = ДанныеЗаполнения.Подразделение;
		ДокОснование 	= ДанныеЗаполнения.Ссылка;
		СуммаДокумента 	= ДанныеЗаполнения.СуммаДокумента;
		Склад 			= ДанныеЗаполнения.Склад;
		Контрагент 		= ДанныеЗаполнения.Контрагент;
		ПредприятиеПоставщик = ДанныеЗаполнения.Предприятие; 
		Договор 		= ДанныеЗаполнения.Договор;
		ПодразделениеКонтрагента = ДанныеЗаполнения.ПодразделениеКонтрагента;
		Счет 			= Договор.СчетВзаиморасчетов;
		Если Не ЗначениеЗаполнено(Счет) Тогда
			Счет = ПланыСчетов.Учетный.Счет6201();		
		КонецЕсли;
		//ДоговорВн 		= Договор.ВнутрихолдинговыйДоговор;
		ПодразделениеВн = ДанныеЗаполнения.Подразделение;
		ВидОперации 	= Перечисления.ВидыОперацийРеализация.Товары;
		УчитыватьНДС 	= Ложь;
		СуммаВключаетНДС = Истина;
		Организация 	= ДанныеЗаполнения.Организация;
		ОрганизацияВн 	= ПодразделениеВн.Организация;
		Дата = ДанныеЗаполнения.ДатаПоступления;

		Товары.Очистить();
		
		Для Каждого ТекСтрокаТабличнаяЧасть Из ДанныеЗаполнения.ТабличнаяЧасть Цикл
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Количество = ТекСтрокаТабличнаяЧасть.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаТабличнаяЧасть.Номенклатура;
			НоваяСтрока.Цена = ТекСтрокаТабличнаяЧасть.Цена;
			НоваяСтрока.Сумма = ТекСтрокаТабличнаяЧасть.Сумма;
			НоваяСтрока.СуммаОтгрузки = ТекСтрокаТабличнаяЧасть.Сумма;
			НоваяСтрока.СтавкаНДС = ТекСтрокаТабличнаяЧасть.СтавкаНДС;
			НоваяСтрока.СуммаНДС = ТекСтрокаТабличнаяЧасть.СуммаНДС;
			НоваяСтрока.Счет = ТекСтрокаТабличнаяЧасть.Номенклатура.Счет10;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ДанныеЗаполнения.ДокументОснование) И ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	УЧ_Реализация.Ссылка КАК Ссылка
			               |ИЗ
			               |	Документ.УЧ_Реализация КАК УЧ_Реализация
			               |ГДЕ
			               |	УЧ_Реализация.Проведен = ИСТИНА
			               |	И УЧ_Реализация.ДокОснование = &ДокОснование";
			
			Запрос.УстановитьПараметр("ДокОснование", ДанныеЗаполнения.ДокументОснование);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				//ДокОснование = Выборка.Ссылка;
				Для каждого ТекСтрока Из Товары Цикл
					ТекСтрока.ДокументРеализации = Выборка.Ссылка;			
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеЗаполнения.ДокументОснование) И ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.УЧ_Реализация") Тогда
			//ДокОснование = Выборка.Ссылка;
			Для каждого ТекСтрока Из Товары Цикл
				ТекСтрока.ДокументРеализации = ДанныеЗаполнения.ДокументОснование;			
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;

	//}}__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
	
	сабОбщегоНазначенияБУХ.сабОбработкиЗаполненияУчпетныхДокументовОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
КонецПроцедуры

Функция СчетаДляРаспределения() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Учетный.Ссылка КАК Ссылка
	               |ИЗ
	               |	ПланСчетов.Учетный КАК Учетный
	               |ГДЕ
	               |	Учетный.ВидыСубконто.ВидСубконто = &ВидСубконто
	               |	И Учетный.ЗапретитьИспользоватьВПроводках = ЛОЖЬ
	               |	И Учетный.Ссылка В(&Счета)";
	
	Запрос.УстановитьПараметр("Счета", Счет);
	Запрос.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Документ", Истина));
	
	Результат = Запрос.Выполнить();
	СчетаДляРаспределения = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Субконто1Массив = Новый Массив;
	Субконто2Массив = Новый Массив;
	Субконто1Массив.Добавить(Контрагент);
	Субконто2Массив.Добавить(Договор);
	
	Возврат Новый Структура("Субконто1Массив, Субконто2Массив, СчетаДляРаспределения, ЭтоОплата", Субконто1Массив, Субконто2Массив, СчетаДляРаспределения, Истина);
КонецФункции // ()

Процедура ОбработкаЗаполненияСФормы(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт

	ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);	

КонецПроцедуры
