&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("НомерСтроки") Тогда
		Элементы.Проводки.ТекущаяСтрока = Параметры.НомерСтроки - 1;	
	КонецЕсли;
	
	Если Параметры.Свойство("РежимВосстановления") и Параметры.РежимВосстановления Тогда
		сабОбщегоНазначения.ВосстановлениеРеквизитовФормы(ЭтаФорма);
		РежимВосстановления = Истина;
	Иначе 
		РежимВосстановления = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ВидОперации = "Учет";
	КонецЕсли;	
	
	//Заполнение из Типовой Операции
	Если Параметры.Ключ.Пустая() И Параметры.ЗначенияЗаполнения.Свойство("СпособЗаполнения") И Параметры.ЗначенияЗаполнения.СпособЗаполнения = "ТиповаяОперация" Тогда
		//ЗаполнитьДвижения(Параметры.ЗначенияЗаполнения);
		ЗаполнитьЗначенияСвойств(Объект, Параметры.ЗначенияЗаполнения, "Предприятие, ТиповаяОперация");
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ТиповаяОперация) тогда
		Элементы.ГруппаСтраницаТиповаяОперация.Видимость = Истина;
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		
		// Нарисуем реквизиты на форме
		ДобавитьЭлементыПараметрыТиповойОперации();
		
		// Заполним параметры
		Если НЕ Объект.Ссылка.Пустая() Тогда
			ВосстановитьЗначенияПараметровТиповойОперации(Объект.Ссылка);
		//ИначеЕсли ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		//	ВосстановитьЗначенияПараметровТиповойОперации(Параметры.ЗначениеКопирования);
		КонецЕсли;
		
	Иначе
		Элементы.ГруппаСтраницаТиповаяОперация.Видимость = Ложь;
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;	
		
	БюджетныйНаСервере.ДействияПриСозданииФормыДокумента(ЭтаФорма);
	
	Если Параметры.Свойство("ПоказатьИзменения") Тогда
		ПросмотрИзменений = 1;
		Элементы.ПросмотрИзменений.Видимость = Истина;
		ПечатьИзменений(ТабДокИзменения, Объект.Ссылка);
	Иначе
		ПросмотрИзменений = 0;
	КонецЕсли;
	
	Элементы.Проводки.Видимость = (ПросмотрИзменений = 0);
	Элементы.ГруппаИзменения.Видимость = (ПросмотрИзменений = 1);
	
	ОперУчет = Ложь;
	Если НЕ Элементы.Найти("ПроводкиПодобратьРеализации") = Неопределено Тогда
		Элементы.ПроводкиПодобратьРеализации.Видимость = ОперУчет;
	КонецЕсли;
	Если НЕ Элементы.Найти("ПроводкиСвернутьРеализации") = Неопределено Тогда
		Элементы.ПроводкиСвернутьРеализации.Видимость = ОперУчет;
	КонецЕсли;
	Если НЕ Элементы.Найти("ФормаГруппаЗакрытьКорректировкуДолга") = Неопределено Тогда
		Элементы.ФормаГруппаЗакрытьКорректировкуДолга.Видимость = ОперУчет;
	КонецЕсли;
	
	ДобавитьСвязПараметровВыбораИсточника();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьДобавленныеКолонкиТаблиц();
	КонецЕсли;
	
	УстановитьОграниченияПоСчетам();
	
	сабОбщегоНазначения.ОбновитьКоличествоПрикрепленныхФайловСервер(ЭтаФорма);	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОграниченияПоСчетам()

	Если Истина Тогда
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		//НовыйПараметр = Новый ПараметрВыбора("Отбор.ДенежныйСчет", Ложь);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ПроводкиСчетКредит.ПараметрыВыбора = НовыеПараметры;	
	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьСвязПараметровВыбораИсточника()
	
	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Предприятие", "Объект.Предприятие", РежимИзмененияСвязанногоЗначения.Очищать));
	
	Элементы.ПроводкиСубконто2ДебетБезВладельца.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Предприятие", "Объект.Предприятие", РежимИзмененияСвязанногоЗначения.Очищать));
	
	Элементы.ПроводкиСубконто2КредитБезВладельца.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьЗначенияПараметровТиповойоперации(ДокументОперация)
	
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("ТаблицаПараметров", ПараметрыТиповойОперации.Выгрузить());
	//Запрос.УстановитьПараметр("Операция", ДокументОперация);
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ТаблицаПараметров.Параметр,
	//	|	ТаблицаПараметров.ИмяРеквизита
	//	|ПОМЕСТИТЬ ВТ_ТаблицаПараметров
	//	|ИЗ
	//	|	&ТаблицаПараметров КАК ТаблицаПараметров
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ВТ_ТаблицаПараметров.ИмяРеквизита,
	//	|	ЗначенияПараметровТиповойОперации.Значение КАК Значение
	//	|ИЗ
	//	|	ВТ_ТаблицаПараметров КАК ВТ_ТаблицаПараметров
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПараметровТиповойОперации КАК ЗначенияПараметровТиповойОперации
	//	|		ПО ВТ_ТаблицаПараметров.Параметр = ЗначенияПараметровТиповойОперации.Параметр
	//	|ГДЕ
	//	|	ЗначенияПараметровТиповойОперации.Операция = &Операция";
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	ЭтотОбъект[Выборка.ИмяРеквизита] = Выборка.Значение;
	//КонецЦикла;
	
	ИменаКолонок = Новый Соответствие;
	ИменаКолонок.Вставить("СубконтоДт1", "Субконто1Дебет");
	ИменаКолонок.Вставить("СубконтоДт2", "Субконто2Дебет");
	ИменаКолонок.Вставить("СубконтоДт3", "Субконто3Дебет");
	ИменаКолонок.Вставить("СубконтоКт1", "Субконто1Кредит");
	ИменаКолонок.Вставить("СубконтоКт2", "Субконто2Кредит");
	ИменаКолонок.Вставить("СубконтоКт3", "Субконто3Кредит");
	ИменаКолонок.Вставить("ВалютнаяСуммаДт", "ВалСуммаДт");
	ИменаКолонок.Вставить("ВалютнаяСуммаКт", "ВалСуммаКт");
	
	Для Каждого СтрокаТаблицы Из ПараметрыТиповойОперации Цикл
		// Добавляем новый Параметр в форму
		НайденныеСтроки = Объект.ТиповаяОперация.Хозрасчетный.Выгрузить();
		Для каждого ТекСтрока Из НайденныеСтроки Цикл
			Для каждого ТекКолонка Из НайденныеСтроки.Колонки Цикл
				ЗначениеКолонки = ЛЕВ(ТекСтрока[ТекКолонка.Имя], СтрДлина(ТекСтрока[ТекКолонка.Имя])-1);
				ЗначениеКолонки = ПРАВ(ЗначениеКолонки, СтрДлина(ЗначениеКолонки)-1);
				Если ЗначениеКолонки = СтрокаТаблицы.Имя Тогда
					Если НЕ ИменаКолонок.Получить(ТекКолонка.Имя) = Неопределено Тогда
						ЭтотОбъект["ПараметрТиповойОперации" + СтрокаТаблицы.Имя] = Объект.Проводки[0][ИменаКолонок.Получить(ТекКолонка.Имя)];
					Иначе	
					 	ЭтотОбъект["ПараметрТиповойОперации" + СтрокаТаблицы.Имя] = Объект.Проводки[0][ТекКолонка.Имя]
					КонецЕсли;
				КонецЕсли;
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ВидимостьКрахмала();
	ВидимостьВалюты();
	ВидимостьПредставленияСчетов();

	Если Не РежимВосстановления Тогда
		ЭтаФорма.ПодключитьОбработчикОжидания("АвтосохранениеРеквизитовФормыНаКлиенте", 30);
	КонецЕсли;
	
	Попытка
	
		;
	
	Исключение
	
	КонецПопытки; 
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьВалюты()
	//Если Объект.ФлагВалюта Тогда
	//	Элементы.ВалютнаяДт.Видимость = Истина;
	//	Элементы.ВалютнаяКт.Видимость = Истина;
	//Иначе
	//	Элементы.ВалютнаяДт.Видимость = Ложь;
	//	Элементы.ВалютнаяКт.Видимость = Ложь;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьКрахмала()
	//Если Объект.ФлагКрахмал Тогда
	//	Элементы.ПроводкиКрахмал.Видимость = Истина
	//Иначе
	//	Элементы.ПроводкиКрахмал.Видимость = Ложь
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФлагКрахмалПриИзменении(Элемент)
	ВидимостьКрахмала();	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Объект.СуммаОперации = Объект.Проводки.Итог("Сумма");
	сабОбщегоНазначения.ОчиститьАвтосохраненияОбъекта(Объект.Ссылка);
КонецПроцедуры

&НаСервереБезКонтекста
Функция КоличествоСубконто(Счет)
	КолСубконто = Счет.ВидыСубконто.Количество();	
	Возврат КолСубконто;
КонецФункции

&НаКлиенте
Процедура ПроводкиСубконто1ДебетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Кол = КоличествоСубконто(Элементы.Проводки.ТекущиеДанные.СчетДебет);
	Если Кол < 1 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	Если ТипЗнч(Элементы.Проводки.ТекущиеДанные.Субконто1Дебет) = Тип("СправочникСсылка.Предприятия")  Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.Предприятия.Форма.ФормаВыбора", Новый Структура("ТекущаяСтрока, РежимВыбора", Элементы.Проводки.ТекущиеДанные.Субконто1Дебет, Истина) ,Элемент);
	//ИначеЕсли ТипЗнч(Элементы.Проводки.ТекущиеДанные.Субконто1Дебет) = Тип("СправочникСсылка.Сотрудники")  Тогда
	//	СтандартнаяОбработка = Ложь;
	//	ОткрытьФорму("Справочник.Сотрудники.ФормаВыбора", Новый Структура("ТекущаяСтрока, ТекущееПредприятие, РежимВыбора", Элементы.Проводки.ТекущиеДанные.Субконто1Дебет, Объект.Предприятие, Истина) ,Элемент);
	//ИначеЕсли ТипЗнч(Элементы.Проводки.ТекущиеДанные.Субконто1Дебет) = Тип("СправочникСсылка.РасходыПериодов")  Тогда
	//	СтандартнаяОбработка = Ложь;
	//	ОткрытьФорму("Справочник.РасходыПериодов.ФормаВыбора", Новый Структура("ТекущаяСтрока, ТекущееПредприятие, РежимВыбора", Элементы.Проводки.ТекущиеДанные.Субконто1Дебет, Объект.Предприятие, Истина) ,Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиСубконто2ДебетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЛюбаяСтатья(Предприятие)
	
	Возврат сабОбщегоНазначения.ПолучитьЗначениеСвойства(Предприятие, ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ЛюбаяСтатьяЗатратНаСчете90) = Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВернутьЗатратыПоРеализации()
	Возврат Справочники.СтатьиЗатрат.ЗатратыРеализация
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСчет90_3()
	//Возврат ПланыСчетов.Учетный.Счет9003()
КонецФункции

&НаКлиенте
Процедура ПроводкиСубконто3ДебетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Кол = КоличествоСубконто(Элементы.Проводки.ТекущиеДанные.СчетДебет);
	Если Кол < 3 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	Если ТипЗнч(Элементы.Проводки.ТекущиеДанные.Субконто3Дебет) = Тип("СправочникСсылка.Предприятия")  Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.Предприятия.Форма.ФормаВыбора",,Элемент);
	ИначеЕсли ТипЗнч(Элементы.Проводки.ТекущиеДанные.Субконто3Дебет) = Тип("СправочникСсылка.СтруктураПредприятия")  Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.СтруктураПредприятия.Форма.ФормаВыбора",,Элемент);
	//ИначеЕсли ТипЗнч(Элементы.Проводки.ТекущиеДанные.Субконто3Дебет) = Тип("ДокументСсылка.Д_ЗаявкаНаОтгрузку")  Тогда
	//		БюджетныйНаКлиенте.ВыборЗаявкиНаОтгрузку(Объект.Предприятие, Элемент);
	ИначеЕсли УЧ_Сервер.ЕстьВидСубконто(Элементы.Проводки.ТекущиеДанные.СчетДебет,"Произвольное") Тогда
		СтандартнаяОбработка = Ложь;
		СписВыбора = Новый СписокЗначений;
		СписВыбора.Добавить("Субконто");
		СписВыбора.Добавить("Заявка на отгрузку");
		СписВыбора.Добавить("Поступление ТМЦ");
		ТекЗнач = ВыбратьИзСписка(СписВыбора, Элементы.ПроводкиСубконто3Дебет);
		Если Не ТекЗнач = Неопределено Тогда
			Если ТекЗнач.Значение = "Заявка на отгрузку" Тогда
				ТекЗначРеализация = ОткрытьФормуМодально("Документ.УЧ_Реализация.ФормаВыбора", Новый Структура("ДатаДокумента, ТекСтрока, Контрагент, Договор", ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, ТекущаяДата()), Элементы.Проводки.ТекущиеДанные.Субконто3Дебет, Элементы.Проводки.ТекущиеДанные.Субконто1Дебет, Элементы.Проводки.ТекущиеДанные.Субконто2Дебет));
				Если НЕ ТекЗначРеализация = Неопределено Тогда
					Элементы.Проводки.ТекущиеДанные.Субконто3Дебет = ТекЗначРеализация;				
				КонецЕсли;
			ИначеЕсли ТекЗнач.Значение = "Поступление ТМЦ" Тогда
				ТекЗначПоступление = ОткрытьФормуМодально("Документ.УЧ_ПоступлениеТоваров.Форма.ФормаВыбора", Новый Структура("ДатаДокумента, ТекСтрока, Контрагент, Договор", ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, ТекущаяДата()), Элементы.Проводки.ТекущиеДанные.Субконто3Дебет, Элементы.Проводки.ТекущиеДанные.Субконто1Дебет, Элементы.Проводки.ТекущиеДанные.Субконто2Дебет));
				Если НЕ ТекЗначПоступление = Неопределено Тогда
					Элементы.Проводки.ТекущиеДанные.Субконто3Дебет = ТекЗначПоступление;				
				КонецЕсли;	
			КонецЕсли;		
		КонецЕсли;
		Возврат;
	КонецЕсли;
	//Если УЧ_Сервер.СчетНаСервере(Элементы.Проводки.ТекущиеДанные.СчетДебет) = "62.01" Тогда
	//	СтандартнаяОбработка = ЛОЖЬ;
	//	СтруктураПараметров = Новый Структура("ДатаОстатка,Контрагент,Договор",Объект.Дата,Элементы.Проводки.ТекущиеДанные.Субконто1Дебет,Элементы.Проводки.ТекущиеДанные.Субконто2Дебет);
	//	ВыбранныйДокумент = ОткрытьФормуМодально("ЖурналДокументов.УЧ_Полный.Форма.Форма",СтруктураПараметров);
	//	Если НЕ ВыбранныйДокумент = Неопределено Тогда
	//		Элементы.Проводки.ТекущиеДанные.Субконто3Дебет = ВыбранныйДокумент;
	//	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиСубконто1КредитНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Кол = КоличествоСубконто(Элементы.Проводки.ТекущиеДанные.СчетКредит);
	Если Кол < 1 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	Если ТипЗнч(Элементы.Проводки.ТекущиеДанные.Субконто1Кредит) = Тип("СправочникСсылка.Предприятия")  Тогда
		СтандартнаяОбработка = Ложь;
	    ОткрытьФорму("Справочник.Предприятия.Форма.ФормаВыбора", Новый Структура("ТекущаяСтрока, РежимВыбора", Элементы.Проводки.ТекущиеДанные.Субконто1Кредит, Истина),Элемент);
	//ИначеЕсли ТипЗнч(Элементы.Проводки.ТекущиеДанные.Субконто1Кредит) = Тип("СправочникСсылка.Сотрудники")  Тогда
	//	СтандартнаяОбработка = Ложь;
	//	ОткрытьФорму("Справочник.Сотрудники.ФормаВыбора", Новый Структура("ТекущаяСтрока, ТекущееПредприятие, РежимВыбора", Элементы.Проводки.ТекущиеДанные.Субконто1Кредит, Объект.Предприятие, Истина) ,Элемент);
	//ИначеЕсли ТипЗнч(Элементы.Проводки.ТекущиеДанные.Субконто1Кредит) = Тип("СправочникСсылка.РасходыПериодов")  Тогда
	//	СтандартнаяОбработка = Ложь;
	//	ОткрытьФорму("Справочник.РасходыПериодов.ФормаВыбора", Новый Структура("ТекущаяСтрока, ТекущееПредприятие, РежимВыбора", Элементы.Проводки.ТекущиеДанные.Субконто1Кредит, Объект.Предприятие, Истина) ,Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиСубконто2КредитНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиСубконто3КредитНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Кол = КоличествоСубконто(Элементы.Проводки.ТекущиеДанные.СчетКредит);
	Если Кол < 3 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	Если ТипЗнч(Элементы.Проводки.ТекущиеДанные.Субконто3Кредит) = Тип("СправочникСсылка.Предприятия")  Тогда
		СтандартнаяОбработка = Ложь;
	    ОткрытьФорму("Справочник.Предприятия.Форма.ФормаВыбора",,Элемент);
	ИначеЕсли ТипЗнч(Элементы.Проводки.ТекущиеДанные.Субконто3Кредит) = Тип("СправочникСсылка.СтруктураПредприятия")  Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.СтруктураПредприятия.Форма.ФормаВыбора",,Элемент);
	//ИначеЕсли ТипЗнч(Элементы.Проводки.ТекущиеДанные.Субконто3Кредит) = Тип("ДокументСсылка.Д_ЗаявкаНаОтгрузку")  Тогда
	//	БюджетныйНаКлиенте.ВыборЗаявкиНаОтгрузку(Объект.Предприятие, Элемент);
	//	ИначеЕсли УЧ_Сервер.ЕстьВидСубконто(Элементы.Проводки.ТекущиеДанные.СчетКредит,"Произвольное") Тогда
	//	СтандартнаяОбработка = Ложь;
	//	СписВыбора = Новый СписокЗначений;
	//	СписВыбора.Добавить("Субконто");
	//	СписВыбора.Добавить("Заявка на отгрузку");
	//	СписВыбора.Добавить("Поступление ТМЦ");
	//	ТекЗнач = ВыбратьИзСписка(СписВыбора, Элементы.ПроводкиСубконто3Кредит);
	//	Если Не ТекЗнач = Неопределено Тогда
	//		Если ТекЗнач.Значение = "Заявка на отгрузку" Тогда
	//			ТекЗначРеализация = ОткрытьФормуМодально("Документ.УЧ_Реализация.ФормаВыбора", Новый Структура("ДатаДокумента, ТекСтрока, Контрагент, Договор", ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, ТекущаяДата()), Элементы.Проводки.ТекущиеДанные.Субконто3Кредит, Элементы.Проводки.ТекущиеДанные.Субконто1Кредит, Элементы.Проводки.ТекущиеДанные.Субконто2Кредит));
	//			Если НЕ ТекЗначРеализация = Неопределено Тогда
	//				Элементы.Проводки.ТекущиеДанные.Субконто3Кредит = ТекЗначРеализация;				
	//			КонецЕсли;
	//		ИначеЕсли ТекЗнач.Значение = "Поступление ТМЦ" Тогда
	//			ТекЗначПоступление = ОткрытьФормуМодально("Документ.УЧ_ПоступлениеТоваров.Форма.ФормаВыбора", Новый Структура("ДатаДокумента, ТекСтрока, Контрагент, Договор", ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, ТекущаяДата()), Элементы.Проводки.ТекущиеДанные.Субконто3Кредит, Элементы.Проводки.ТекущиеДанные.Субконто1Кредит, Элементы.Проводки.ТекущиеДанные.Субконто2Кредит));
	//			Если НЕ ТекЗначПоступление = Неопределено Тогда
	//				Элементы.Проводки.ТекущиеДанные.Субконто3Кредит = ТекЗначПоступление;				
	//			КонецЕсли;	
	//		КонецЕсли;		
	//	КонецЕсли;
	//	Возврат;
	КонецЕсли;
	//Если УЧ_Сервер.СчетНаСервере(Элементы.Проводки.ТекущиеДанные.СчетКредит) = "62.01" Тогда
	//	СтандартнаяОбработка = ЛОЖЬ;
	//	СтруктураПараметров = Новый Структура("ДатаОстатка,Контрагент,Договор",Объект.Дата,Элементы.Проводки.ТекущиеДанные.Субконто1Кредит,Элементы.Проводки.ТекущиеДанные.Субконто2Кредит);
	//	ВыбранныйДокумент = ОткрытьФормуМодально("ЖурналДокументов.УЧ_Полный.Форма.Форма",СтруктураПараметров);
	//	Если НЕ ВыбранныйДокумент = Неопределено Тогда
	//		Элементы.Проводки.ТекущиеДанные.Субконто3Кредит = ВыбранныйДокумент;
	//	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиСчетДебетОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если УЧ_Сервер.ЗапретДенСчетов() И НЕ СУКредит(Объект.Предприятие) Тогда
		Если УЧ_Сервер.ФинансовыеСчета().Найти(ВыбранноеЗначение) <> Неопределено   Тогда
			СтандартнаяОбработка = Ложь;
			Сообщить("Этот счёт выбирать нельзя!");
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиСчетКредитОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если УЧ_Сервер.ЗапретДенСчетов() И НЕ СУКредит(Объект.Предприятие) Тогда
		Если УЧ_Сервер.ФинансовыеСчета().Найти(ВыбранноеЗначение) <> Неопределено   Тогда
			СтандартнаяОбработка = Ложь;
			Сообщить("Этот счёт выбирать нельзя!");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СУКредит(ТекПП)

	Возврат ТекПП = Справочники.Предприятия.НайтиПоНаименованию("СУ_Кредит");		

КонецФункции // ()
 

&НаКлиенте
Процедура ФлагВалютаПриИзменении(Элемент)
	ВидимостьВалюты();
КонецПроцедуры

&НаКлиенте
Процедура ПересчетПоВалюте(Поле)
	ОсновнаяВалютаУчета = БюджетныйНаСервере.ВернутьРеквизит(Объект.Предприятие, "ОсновнаяВалютаУчета");
	Если Поле.Имя = "ПроводкиВалютаКт" ИЛИ Поле.Имя = "ПроводкиКурсКт" ИЛИ Поле.Имя = "ПроводкиВалСуммаКт" Тогда
		СтруктураВалютныхПоказателей = УЧ_Сервер.ПересчитатьИзВалютыВВалюту(Элементы.Проводки.ТекущиеДанные.ВалютаКт, ОсновнаяВалютаУчета, Элементы.Проводки.ТекущиеДанные.ВалСуммаКт, Объект.Дата);
		Элементы.Проводки.ТекущиеДанные.КурсКт = СтруктураВалютныхПоказателей.КурсВал;
		Элементы.Проводки.ТекущиеДанные.Сумма = СтруктураВалютныхПоказателей.СуммаВЭквивалентнойВалюте;
	ИначеЕсли Поле.Имя = "ПроводкиВалютаДт" ИЛИ Поле.Имя = "ПроводкиКурсДт" ИЛИ Поле.Имя = "ПроводкиВалСуммаДт" Тогда
		СтруктураВалютныхПоказателей = УЧ_Сервер.ПересчитатьИзВалютыВВалюту( Элементы.Проводки.ТекущиеДанные.ВалютаДт, ОсновнаяВалютаУчета, Элементы.Проводки.ТекущиеДанные.ВалСуммаДт, Объект.Дата);
		Элементы.Проводки.ТекущиеДанные.КурсДт = СтруктураВалютныхПоказателей.КурсВал;
		Элементы.Проводки.ТекущиеДанные.Сумма = СтруктураВалютныхПоказателей.СуммаВЭквивалентнойВалюте;
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиВалютаКтПриИзменении(Элемент)
	ПересчетПоВалюте(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиКурсКтПриИзменении(Элемент)
	ПересчетПоВалюте(Элемент)
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиВалСуммаКтПриИзменении(Элемент)
	ПересчетПоВалюте(Элемент)
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиВалютаДтПриИзменении(Элемент)
	ПересчетПоВалюте(Элемент);
КонецПроцедуры


&НаКлиенте
Процедура ПроводкиВалСуммаДтПриИзменении(Элемент)
	ПересчетПоВалюте(Элемент)
КонецПроцедуры


&НаКлиенте
Процедура ПроводкиКурсДтПриИзменении(Элемент)
	ПересчетПоВалюте(Элемент)
КонецПроцедуры
 
&НаКлиенте
Процедура ПроводкиСуммаПриИзменении(Элемент)
	
	//Если Объект.ФлагВалюта Тогда
	//	ПересчетПоВалюте(Элемент)
	//КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиПодразделениеДтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	БюджетныйНаКлиенте.НачалоВыбораПодразделения(Элементы.Проводки.ТекущиеДанные.СчетДебет, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиПодразделениеКтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	БюджетныйНаКлиенте.НачалоВыбораПодразделения(Элементы.Проводки.ТекущиеДанные.СчетКредит, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиКоличествоПриИзменении(Элемент)
	
	Если ТипЗнч(Элементы.Проводки.ТекущиеДанные.Субконто1Кредит) = Тип("СправочникСсылка.Номенклатура") Тогда
		//Элементы.Проводки.ТекущиеДанные.Сумма = Элементы.Проводки.ТекущиеДанные.Количество *
		//БюджетныйНаСервере.ВернутьРеквизит(Элементы.Проводки.ТекущиеДанные.Субконто1Кредит, "Цена");
		//ИначеЕсли ТипЗнч(Элементы.Проводки.ТекущиеДанные.Субконто1Кредит) = Тип("СправочникСсылка.Номенклатура") Тогда
		//	Элементы.Проводки.ТекущиеДанные.Сумма = Элементы.Проводки.ТекущиеДанные.Количество *
		//		БюджетныйНаСервере.ВернутьРеквизит(Элементы.Проводки.ТекущиеДанные.Субконто1Кредит, "Цена");
		//ИначеЕсли ТипЗнч(Элементы.Проводки.ТекущиеДанные.Субконто1Дебет) = Тип("СправочникСсылка.Номенклатура") Тогда
		//	Элементы.Проводки.ТекущиеДанные.Сумма = Элементы.Проводки.ТекущиеДанные.Количество *
		//		ПолучитьПлановуюСебестоимость(Элементы.Проводки.ТекущиеДанные.Субконто1Дебет, Объект.Дата);
	//ИначеЕсли ТипЗнч(Элементы.Проводки.ТекущиеДанные.Субконто1Кредит) = Тип("СправочникСсылка.Номенклатура") Тогда
	//	Элементы.Проводки.ТекущиеДанные.Сумма = Элементы.Проводки.ТекущиеДанные.Количество *
	//	ПолучитьПлановуюСебестоимость(Элементы.Проводки.ТекущиеДанные.Субконто1Кредит, Объект.Дата, Объект.Предприятие);		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПлановуюСебестоимость(Номенклатура, ТекДата, Предприятие)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПлановаяСебестоимостьСрезПоследних.Сумма
	|ИЗ
	|	РегистрСведений.ПлановаяСебестоимость.СрезПоследних(&ТекДата, Номенклатура = &Номенклатура И Предприятие = &ТекПредприятие) КАК ПлановаяСебестоимостьСрезПоследних";
	
	Запрос.УстановитьПараметр("ТекДата", ТекДата);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ТекПредприятие", Предприятие);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Сумма;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции // ()



&НаКлиенте
Процедура ПроводкиСубконто1ДебетПриИзменении(Элемент)
	//СубконтоДт1 = Элементы.Проводки.ТекущиеДанные.Субконто1Дебет;
	//СубконтоДт2 = Элементы.Проводки.ТекущиеДанные.Субконто2Дебет;
	//Если НЕ СубконтоДт2 = Неопределено Тогда
	//	Если ТипЗнч(БюджетныйНаСервере.ВернутьРеквизит(СубконтоДт2, "Владелец")) = ТипЗнч(СубконтоДт1) Тогда
	//		Элементы.Проводки.ТекущиеДанные.Субконто2Дебет = "";	
	//	КонецЕсли;
	//КонецЕсли;
	
	//закомментил Д1
	
КонецПроцедуры


&НаКлиенте
Процедура ПроводкиСубконто2ДебетПриИзменении(Элемент)
	СубконтоДт2 = Элементы.Проводки.ТекущиеДанные.Субконто2Дебет;
	СубконтоДт3 = Элементы.Проводки.ТекущиеДанные.Субконто3Дебет;
	Если НЕ СубконтоДт3 = Неопределено Тогда
		Если ТипЗнч(БюджетныйНаСервере.ВернутьРеквизит(СубконтоДт3, "Владелец")) = ТипЗнч(СубконтоДт2) Тогда
			Элементы.Проводки.ТекущиеДанные.Субконто3Дебет = "";	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПроводкиСубконто1КредитПриИзменении(Элемент)
	//СубконтоКт1 = Элементы.Проводки.ТекущиеДанные.Субконто1Кредит;
	//СубконтоКт2 = Элементы.Проводки.ТекущиеДанные.Субконто2Кредит;
	//Если НЕ СубконтоКт2 = Неопределено Тогда
	//	Если ТипЗнч(БюджетныйНаСервере.ВернутьРеквизит(СубконтоКт2, "Владелец")) = ТипЗнч(СубконтоКт1) Тогда
	//		Элементы.Проводки.ТекущиеДанные.Субконто2Кредит = "";	
	//	КонецЕсли;
	//КонецЕсли;
	
	//закомментил Д1
	
КонецПроцедуры


&НаКлиенте
Процедура ПроводкиСубконто2КредитПриИзменении(Элемент)
	СубконтоКт2 = Элементы.Проводки.ТекущиеДанные.Субконто2Кредит;
	СубконтоКт3 = Элементы.Проводки.ТекущиеДанные.Субконто3Кредит;
	Если НЕ СубконтоКт3 = Неопределено Тогда
		Если ТипЗнч(БюджетныйНаСервере.ВернутьРеквизит(СубконтоКт3, "Владелец")) = ТипЗнч(СубконтоКт2) Тогда
			Элементы.Проводки.ТекущиеДанные.Субконто3Кредит = "";	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПредприятиеПриИзменении(Элемент)
	ПредприятиеПриИзмененииНаСервере();
	ВидимостьПредставленияСчетов();
	Объект.Организация = БюджетныйНаСервере.ВернутьРеквизит(Объект.Предприятие, "ОсновнаяОрганизация");
КонецПроцедуры

&НаСервере
Процедура ПредприятиеПриИзмененииНаСервере()
	сабОбщегоНазначенияКлиентСервер.СкрытьПодразделения(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	сабОбщегоНазначенияКлиент.ПослеЗаписиАвтосохраняемойФормы(ЭтаФорма);
	Оповестить("ОповеститьРегистрОбработанных");

КонецПроцедуры

&НаКлиенте
Процедура АвтосохранениеРеквизитовФормыНаКлиенте()
	
	Если Модифицированность Тогда
		АвтосохранениеРеквизитовФормыНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура АвтосохранениеРеквизитовФормыНаСервере()
	
	сабОбщегоНазначения.АвтосохранениеРеквизитовФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если НЕ ЗавершениеРаботы И Не РежимВосстановления Тогда
		сабОбщегоНазначения.ОчиститьАвтосохраненияОбъекта(Объект.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиСчетДебетПриИзменении(Элемент)
	
	//ПараметрВыбораЗатратыПоРеал = Новый ПараметрВыбора("Отбор.Родитель", ЗатратыПоРеализации());
	//Если Элементы.Проводки.ТекущиеДанные.СчетДебет = Счет90_3() Тогда
	//	ПараметрыВыбораСтатьи = УЧ_Сервер.ПолучитьПараметрыВыбораСтатьиЗатрат(Объект.Предприятие, Элементы.ПроводкиСубконто2Дебет.ПараметрыВыбора);
	//	Элементы.ПроводкиСубконто2Дебет.ПараметрыВыбора = ПараметрыВыбораСтатьи
	//Иначе
	//	Если Элементы.ПроводкиСубконто2Дебет.ПараметрыВыбора.Найти(ПараметрВыбораЗатратыПоРеал) <> Неопределено Тогда
	//		МассивПараметровВыбораБезРодителя = Новый Массив;
	//		Для Каждого Элемент Из Элементы.ПроводкиСубконто2Дебет.ПараметрыВыбора Цикл
	//			Если Элемент = ПараметрВыбораЗатратыПоРеал Тогда
	//				Продолжить
	//			КонецЕсли;
	//			МассивПараметровВыбораБезРодителя.Добавить(Элемент);
	//		КонецЦикла;
	//		ПараметрыВыбораБезРодителя = Новый ФиксированныйМассив(МассивПараметровВыбораБезРодителя);
	//		Элементы.ПроводкиСубконто2Дебет.ПараметрыВыбора = ПараметрыВыбораБезРодителя;
	//	КонецЕсли;	
	//КонецЕсли;
	
	//ТекущийСчетДт = Элемент.Родитель.Родитель.ТекущиеДанные.СчетДебет;
	//УстановитьСвязиПараметровВыбораДляТекущегоСчета(ТекущийСчетДт, "Дебет");
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3, Предприятие, КоличествоДт, ВалютаДт, ВалютнаяСумма, Счет, Подразделение, Элементы, ЭлементСубконто1, ЭлементСубконто2, ЭлементСубконто3, ЭлементПодразделение, Субконто2ВладелецРазличен, ЭлементСубконто2БезВладельца",
	"Субконто1Дебет", "Субконто2Дебет", "Субконто3Дебет", Объект.Предприятие, "КоличествоДт", "ВалютаДт", "ВалСумма", "СчетДебет", "ПодразделениеДт", Элементы, "ПроводкиСубконто1Дебет", "ПроводкиСубконто2Дебет", "ПроводкиСубконто3Дебет", "ПодразделениеДт", "Субконто2ДебетВладелецРазличен", "ПроводкиСубконто2ДебетБезВладельца");
	
	БюджетныйНаКлиенте.УстановитьДоступность(Элементы.Проводки.ТекущиеДанные, ПоляОбъекта);
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиСчетКредитПриИзменении(Элемент)
	
	//ПараметрВыбораЗатратыПоРеал = Новый ПараметрВыбора("Отбор.Родитель", ЗатратыПоРеализации());
	//Если Элементы.Проводки.ТекущиеДанные.СчетКредит = Счет90_3() Тогда
	//	ПараметрыВыбораСтатьи = УЧ_Сервер.ПолучитьПараметрыВыбораСтатьиЗатрат(Объект.Предприятие, Элементы.ПроводкиСубконто2Кредит.ПараметрыВыбора);
	//	Элементы.ПроводкиСубконто2Кредит.ПараметрыВыбора = ПараметрыВыбораСтатьи
	//Иначе
	//	Если Элементы.ПроводкиСубконто2Кредит.ПараметрыВыбора.Найти(ПараметрВыбораЗатратыПоРеал) <> Неопределено Тогда
	//		МассивПараметровВыбораБезРодителя = Новый Массив;
	//		Для Каждого Элемент Из Элементы.ПроводкиСубконто2Кредит.ПараметрыВыбора Цикл
	//			Если Элемент = ПараметрВыбораЗатратыПоРеал Тогда
	//				Продолжить
	//			КонецЕсли;
	//			МассивПараметровВыбораБезРодителя.Добавить(Элемент);
	//		КонецЦикла;
	//		ПараметрыВыбораБезРодителя = Новый ФиксированныйМассив(МассивПараметровВыбораБезРодителя);
	//		Элементы.ПроводкиСубконто2Кредит.ПараметрыВыбора = ПараметрыВыбораБезРодителя;
	//	КонецЕсли;	
	//КонецЕсли;
	
	//ТекущийСчетКт = Элемент.Родитель.Родитель.ТекущиеДанные.СчетКредит;
	//УстановитьСвязиПараметровВыбораДляТекущегоСчета(ТекущийСчетКт, "Кредит");
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3, Предприятие, КоличествоКт, ВалютаКт, ВалютнаяСумма, Счет, Подразделение, Элементы, ЭлементСубконто1, ЭлементСубконто2, ЭлементСубконто3, ЭлементПодразделение, Субконто2ВладелецРазличен, ЭлементСубконто2БезВладельца",
	"Субконто1Кредит", "Субконто2Кредит", "Субконто3Кредит", Объект.Предприятие, "КоличествоКт", "ВалютаКт", "ВалСумма", "СчетКредит", "ПодразделениеКт", Элементы, "ПроводкиСубконто1Кредит", "ПроводкиСубконто2Кредит", "ПроводкиСубконто3Кредит", "ПодразделениеКт", "Субконто2КредитВладелецРазличен", "ПроводкиСубконто2КредитБезВладельца");
	
	БюджетныйНаКлиенте.УстановитьДоступность(Элементы.Проводки.ТекущиеДанные, ПоляОбъекта);
	
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция Счет90_3()
	Возврат ПланыСчетов.Учетный.Счет9003();
КонецФункции

&НаСервереБезКонтекста
Функция ЗатратыПоРеализации()
	Возврат Справочники.СтатьиЗатрат.ЗатратыРеализация
КонецФункции

&НаСервере
Процедура УстановитьСвязиПараметровВыбораДляТекущегоСчета(Счет, ДтКт)
	Если Счет.ВидыСубконто.Количество() > 1 Тогда
		УЧ_Сервер.УстановитьСвязиМеждуСубконтоСчета(ЭтаФорма, Счет, 0, "Элементы.Проводки.ТекущиеДанные.Субконто1" + ДтКт, "ПроводкиСубконто2" + ДтКт);
	КонецЕсли;
	
	Если Счет.ВидыСубконто.Количество() > 2 Тогда
		УЧ_Сервер.УстановитьСвязиМеждуСубконтоСчета(ЭтаФорма, Счет, 1, "Элементы.Проводки.ТекущиеДанные.Субконто1" + ДтКт, "ПроводкиСубконто3" + ДтКт);
	КонецЕсли;
КонецПроцедуры

&НаСервере 
Процедура ПустаяСервернаяПроцедура()
	//Процедура-костыль.
	//Баг: при первом обращении на сервер в модуле формы откатывается введенный текст
	//Процедура вызывается при открытии формы, инициирует обращение на сервер, после чего баг с текстом не появляется
	
	Ы = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиПриАктивизацииСтроки(Элемент)
	
	Если НЕ Элементы.Проводки.ТекущиеДанные = Неопределено Тогда
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3, Предприятие, Количество, Валюта, ВалютнаяСумма, Счет, Подразделение, Элементы, ЭлементСубконто1, ЭлементСубконто2, ЭлементСубконто3, ЭлементПодразделение",
		"Субконто1Дебет", "Субконто2Дебет", "Субконто3Дебет", Объект.Предприятие, "Количество", "Валюта", "ВалСумма", "СчетДебет", "ПодразделениеДт", Элементы, "ПроводкиСубконто1Дебет", "ПроводкиСубконто2Дебет", "ПроводкиСубконто3Дебет", "ПодразделениеДт");
		
		БюджетныйНаКлиенте.УстановитьДоступность(Элементы.Проводки.ТекущиеДанные, ПоляОбъекта);   
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3, Предприятие, Количество, Валюта, ВалютнаяСумма, Счет, Подразделение, Элементы, ЭлементСубконто1, ЭлементСубконто2, ЭлементСубконто3, ЭлементПодразделение",
		"Субконто1Кредит", "Субконто2Кредит", "Субконто3Кредит", Объект.Предприятие, "Количество", "Валюта", "ВалСумма", "СчетКредит", "ПодразделениеКт", Элементы, "ПроводкиСубконто1Кредит", "ПроводкиСубконто2Кредит", "ПроводкиСубконто3Кредит", "ПодразделениеКт");
		
		БюджетныйНаКлиенте.УстановитьДоступность(Элементы.Проводки.ТекущиеДанные, ПоляОбъекта);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	*
	               |ИЗ
	               |	ПланСчетов.Учетный КАК Учетный
	               |ГДЕ
	               |	Учетный.Ссылка В(&Ссылка)";
	
	ТекТЗ = Объект.Проводки.Выгрузить(,"СчетДебет, СчетКредит");
	ТекТЗ2 = ТекТЗ.Скопировать();
	ТекТЗ.Свернуть("СчетДебет");
	ТекТЗ2.Свернуть("СчетКредит");
	МассивСчетов1 = ТекТЗ.ВыгрузитьКолонку("СчетДебет");			   
	МассивСчетов2 = ТекТЗ2.ВыгрузитьКолонку("СчетКредит");
	Для каждого ТекКт Из МассивСчетов2 Цикл
		Если МассивСчетов1.Найти(ТекКт) = Неопределено Тогда
			МассивСчетов1.Добавить(ТекКт);
		КонецЕсли;
	КонецЦикла;
	
	//МассивДенСчетов = Новый Массив;
	//МассивДенСчетов.Добавить(ПланыСчетов.Казна.Касса);
	//МассивДенСчетов.Добавить(ПланыСчетов.Казна.КассаВалюта);
	//МассивДенСчетов.Добавить(ПланыСчетов.Казна.КорреспондентскийСчет);
	//МассивДенСчетов.Добавить(ПланыСчетов.Казна.КорреспондентскийСчетВалюта);
	//МассивДенСчетов.Добавить(ПланыСчетов.Казна.КорреспондентскийСчетВалюта);
	//МассивДенСчетов.Добавить(ПланыСчетов.Учетный.Счет50());
	//МассивДенСчетов.Добавить(ПланыСчетов.Учетный.Счет51());
	////МассивДенСчетов.Добавить(ПланыСчетов.Учетный._55);
	//МассивДенСчетов.Добавить(ПланыСчетов.Учетный.Счет5501());
	//МассивДенСчетов.Добавить(ПланыСчетов.Учетный._56);

	//Запрос.УстановитьПараметр("ДенежныеСчета", МассивДенСчетов);
	Запрос.УстановитьПараметр("Ссылка", МассивСчетов1);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();
	
	СтруктураДанныхСчета = Новый Структура;
	
	Для Каждого ТекСтрокаВыборки ИЗ Выборка Цикл
		
		Если ЗначениеЗаполнено(ТекСтрокаВыборки.Ссылка) Тогда
			СтруктураДанныхСчета.Вставить("Счет" + СтрЗаменить(ТекСтрокаВыборки.Код,".",""), ТекСтрокаВыборки);	
		КонецЕсли;
		
	КонецЦикла;
	
	ВедетсяВалютныйУчет = Объект.Предприятие.ВедетсяВалютныйУчет;
	
	Для Каждого СтрокаТаблицы Из Объект.Проводки Цикл
		
		ПредставлениеСчетаДт = "Счет" + СтрЗаменить(Строка(СтрокаТаблицы.СчетДебет),".","");
		ПредставлениеСчетаКт = "Счет" + СтрЗаменить(Строка(СтрокаТаблицы.СчетКредит),".","");
		
		Если СтруктураДанныхСчета.Свойство(ПредставлениеСчетаДт) Тогда
			СчетВидыСубконто = СтруктураДанныхСчета[ПредставлениеСчетаДт].ВидыСубконто;
			КоличествоСубконто   = СтруктураДанныхСчета[ПредставлениеСчетаДт].ВидыСубконто.Количество();
			
			Для Индекс = 1 По 3 Цикл
				СтрокаТаблицы["Субконто"   + Индекс + "ДебетДоступность"] = (Индекс <= КоличествоСубконто);
				
				//проверка владельца субконто2
				Если Индекс = 2 И КоличествоСубконто > 1 Тогда
					ВладелецРазличен = Истина;
					
					Для каждого ТипСубконто2 Из СчетВидыСубконто[Индекс - 1].ВидСубконто.ТипЗначения.Типы() Цикл
						
						Если ТипСубконто2 = ТипЗнч("Строка") Тогда
							Продолжить;				
						КонецЕсли;
						
						СубСсылка2 = Новый(ТипСубконто2);
						ЕстьВладелец = Ложь;
						
						Для каждого ТекСтандРекв Из СубСсылка2.Метаданные().СтандартныеРеквизиты Цикл
							
							Если ТекСтандРекв.Имя = "Владелец" Тогда
								ЕстьВладелец = Истина;
							КонецЕсли;
							
						КонецЦикла;
						
						Если ЕстьВладелец Тогда
							ТипыРеквВладельца = СубСсылка2.Метаданные().СтандартныеРеквизиты.Владелец.Тип.Типы();
							
							Для каждого ТипРеквВладельца Из ТипыРеквВладельца Цикл
								СубСсылкаВладельца = Новый(ТипРеквВладельца);
								
								Для каждого ТипСубконто1 Из СчетВидыСубконто[Индекс - 2].ВидСубконто.ТипЗначения.Типы() Цикл
									СубСсылка1 = Новый(ТипСубконто1);
									
									Если ТипЗнч(СубСсылкаВладельца) = ТипЗнч(СубСсылка1) Тогда
										ВладелецРазличен = Ложь;
									КонецЕсли;
									
								КонецЦикла;	
								
							КонецЦикла; 
							
						КонецЕсли;
						
					КонецЦикла;
					
					СтрокаТаблицы["Субконто" + Индекс + "ДебетВладелецРазличен"] = ВладелецРазличен;
				КонецЕсли;
				
			КонецЦикла;
			
			Валютный = ?(ВедетсяВалютныйУчет, СтруктураДанныхСчета[ПредставлениеСчетаДт].Валютный, ?(СтруктураДанныхСчета[ПредставлениеСчетаДт].ДенежныйСчет, СтруктураДанныхСчета[ПредставлениеСчетаДт].Валютный, Ложь));
			ДоступностьУчетаПоПодразделениямДт = СтруктураДанныхСчета[ПредставлениеСчетаДт].УчетПоПодразделениям;	
			КоличественныйДт = СтруктураДанныхСчета[ПредставлениеСчетаДт].Количественный;
		Иначе
			Валютный = Ложь;
			ДоступностьУчетаПоПодразделениямДт = Ложь;
			КоличественныйДт = Ложь
		КонецЕсли;
						
		Если СтруктураДанныхСчета.Свойство(ПредставлениеСчетаКт) Тогда
			СчетВидыСубконто = СтруктураДанныхСчета[ПредставлениеСчетаКт].ВидыСубконто;
			КоличествоСубконто   = СтруктураДанныхСчета[ПредставлениеСчетаКт].ВидыСубконто.Количество();
			
			Для Индекс = 1 По 3 Цикл
				СтрокаТаблицы["Субконто"   + Индекс + "КредитДоступность"] = (Индекс <= КоличествоСубконто);
				
				//проверка владельца субконто2
				Если Индекс = 2 И КоличествоСубконто > 1 Тогда 
					ВладелецРазличен = Истина;
					
					Для каждого ТипСубконто2 Из СчетВидыСубконто[Индекс - 1].ВидСубконто.ТипЗначения.Типы() Цикл
						
						Если ТипСубконто2 = ТипЗнч("Строка") Тогда
							Продолжить;				
						КонецЕсли;
						
						СубСсылка2 = Новый(ТипСубконто2);
						ЕстьВладелец = Ложь;
						
						Для каждого ТекСтандРекв Из СубСсылка2.Метаданные().СтандартныеРеквизиты Цикл
							
							Если ТекСтандРекв.Имя = "Владелец" Тогда
								ЕстьВладелец = Истина;
							КонецЕсли;
							
						КонецЦикла;
						
						Если ЕстьВладелец Тогда
							ТипыРеквВладельца = СубСсылка2.Метаданные().СтандартныеРеквизиты.Владелец.Тип.Типы();
							
							Для каждого ТипРеквВладельца Из ТипыРеквВладельца Цикл
								СубСсылкаВладельца = Новый(ТипРеквВладельца);
								
								Для каждого ТипСубконто1 Из СчетВидыСубконто[Индекс - 2].ВидСубконто.ТипЗначения.Типы() Цикл
									СубСсылка1 = Новый(ТипСубконто1);
									
									Если ТипЗнч(СубСсылкаВладельца) = ТипЗнч(СубСсылка1) Тогда
										ВладелецРазличен = Ложь;
									КонецЕсли;
									
								КонецЦикла;
								
							КонецЦикла; 
							
						КонецЕсли;
						
					КонецЦикла;
					
					СтрокаТаблицы["Субконто" + Индекс + "КредитВладелецРазличен"] = ВладелецРазличен;
				КонецЕсли;
				
			КонецЦикла;
			
			Валютный2 = ?(ВедетсяВалютныйУчет, СтруктураДанныхСчета[ПредставлениеСчетаКт].Валютный, ?(СтруктураДанныхСчета[ПредставлениеСчетаКт].ДенежныйСчет, СтруктураДанныхСчета[ПредставлениеСчетаКт].Валютный, Ложь));
			ДоступностьУчетаПоПодразделениямКт = СтруктураДанныхСчета[ПредставлениеСчетаКт].УчетПоПодразделениям;
			КоличественныйКт = СтруктураДанныхСчета[ПредставлениеСчетаКт].Количественный;
		Иначе
			Валютный2 = Ложь;
			ДоступностьУчетаПоПодразделениямКт = Ложь;
			КоличественныйКт = Ложь
		КонецЕсли;
		
		СтрокаТаблицы["ВалютаДтДоступность"] = Валютный;
		СтрокаТаблицы["ВалютаКтДоступность"] = Валютный2;
		СтрокаТаблицы["КоличествоДтДоступность"] =  (КоличественныйДт);
		СтрокаТаблицы["КоличествоКтДоступность"] =  (КоличественныйКт);
		СтрокаТаблицы["ПодразделениеДтДоступность"] = ДоступностьУчетаПоПодразделениямДт;
		СтрокаТаблицы["ПодразделениеКтДоступность"] = ДоступностьУчетаПоПодразделениямКт;
		
	КонецЦикла;

	//Для Каждого СтрокаТаблицы Из Объект.Проводки Цикл

	//	КоличествоСубконто   = СтрокаТаблицы.СчетДебет.ВидыСубконто.Количество();
	//	Для Индекс = 1 По 3 Цикл
	//		СтрокаТаблицы["Субконто"   + Индекс + "ДебетДоступность"] = (Индекс <= КоличествоСубконто);
	//	КонецЦикла;
	//	
	//	КоличествоСубконто   = СтрокаТаблицы.СчетКредит.ВидыСубконто.Количество();
	//	Для Индекс = 1 По 3 Цикл
	//		СтрокаТаблицы["Субконто"   + Индекс + "КредитДоступность"] = (Индекс <= КоличествоСубконто);
	//	КонецЦикла;
	//	
	//	Валютный = ?(Объект.Предприятие.ВедетсяВалютныйУчет, СтрокаТаблицы.СчетДебет.Валютный, ?(КЗСервер.ДенежныйСчет(СтрокаТаблицы.СчетДебет), СтрокаТаблицы.СчетДебет.Валютный, Ложь));
	//	Валютный2 = ?(Объект.Предприятие.ВедетсяВалютныйУчет, СтрокаТаблицы.СчетКредит.Валютный, ?(КЗСервер.ДенежныйСчет(СтрокаТаблицы.СчетКредит), СтрокаТаблицы.СчетКредит.Валютный, Ложь));
	//	СтрокаТаблицы["ВалютаДоступность"] = (Валютный ИЛИ Валютный2);
	//	СтрокаТаблицы["КоличествоДоступность"] =  (СтрокаТаблицы.СчетДебет.Количественный ИЛИ СтрокаТаблицы.СчетКредит.Количественный);
	//	СтрокаТаблицы["ПодразделениеДт"] =  СтрокаТаблицы.СчетДебет.УчетПоПодразделениям;
	//	СтрокаТаблицы["ПодразделениеКт"] =  СтрокаТаблицы.СчетКредит.УчетПоПодразделениям;
	//КонецЦикла;


КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
		ЗаполнитьДобавленныеКолонкиТаблиц();
КонецПроцедуры

&НаКлиенте
Процедура СвернутьСчета(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.Предприятие) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнено предприятие";
		Сообщение.Поле = "Предприятие";
		Сообщение.Сообщить(); 
		Возврат;
	
	КонецЕсли;
	ОткрытьФормуМодально("Документ.УЧ_Операция.Форма.ФормаВыбораСчетов");	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ЗагрузкаСчетов" Тогда
		Объект.ВидОперации = "Свертка";
		Если Объект.Проводки.Количество() Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаОповещенияЗавершение", ЭтотОбъект, Новый Структура("Параметр", Параметр)), "Таблица уже содержит данные. Очистить?", РежимДиалогаВопрос.ДаНетОтмена);
		Иначе	
			ЗагрузитьСвернутыеПроводки(Параметр)	
		КонецЕсли;
		ИначеЕсли ИмяСобытия = "ПрикрепленныеФайлы" Тогда	
			сабОбщегоНазначенияКлиент.ОбновитьКоличествоПрикрепленныхФайлов(ЭтаФорма);
		ИначеЕсли ИмяСобытия = "ОбновитьФормуУч_Операция" И Параметр = Объект.Ссылка Тогда
		ЭтаФорма.Прочитать();
		ОбновитьОтображениеДанных();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Параметр = ДополнительныеПараметры.Параметр;
	
	
	Если РезультатВопроса = КодВозвратаДиалога.Да  Тогда
		Объект.Проводки.Очистить();
		ЗагрузитьСвернутыеПроводки(Параметр);
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет  Тогда
		ЗагрузитьСвернутыеПроводки(Параметр);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСвернутыеПроводки(Параметр)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УчетныйОстатки.Счет КАК Счет,
	               |	УчетныйОстатки.Субконто1 КАК Субконто1,
	               |	УчетныйОстатки.Субконто2 КАК Субконто2,
	               |	УчетныйОстатки.Субконто3 КАК Субконто3,
	               |	УчетныйОстатки.Предприятия КАК Предприятия,
	               |	УчетныйОстатки.СценарийПлана КАК СценарийПлана,
	               |	СУММА(ЕСТЬNULL(УчетныйОстатки.СуммаОстатокДт, 0)) КАК СуммаОстатокДт,
	               |	СУММА(ЕСТЬNULL(УчетныйОстатки.СуммаОстатокКт, 0)) КАК СуммаОстатокКт,
	               |	СУММА(ЕСТЬNULL(УчетныйОстатки.КоличествоОстатокДт, 0)) КАК КоличествоОстатокДт,
	               |	СУММА(ЕСТЬNULL(УчетныйОстатки.КоличествоОстатокКт, 0)) КАК КоличествоОстатокКт,
	               |	СУММА(ЕСТЬNULL(УчетныйОстатки.КоличествоКРХОстатокДт, 0)) КАК КоличествоКРХОстатокДт,
	               |	СУММА(ЕСТЬNULL(УчетныйОстатки.КоличествоКРХОстатокКт, 0)) КАК КоличествоКРХОстатокКт,
	               |	СУММА(ЕСТЬNULL(УчетныйОстатки.ВалютнаяСуммаОстатокДт, 0)) КАК ВалютнаяСуммаОстатокДт,
	               |	СУММА(ЕСТЬNULL(УчетныйОстатки.ВалютнаяСуммаОстатокКт, 0)) КАК ВалютнаяСуммаОстатокКт,
	               |	УчетныйОстатки.Счет.Забалансовый КАК СчетЗабалансовый,
	               |	УчетныйОстатки.Подразделение КАК Подразделение
	               |ИЗ
	               |	РегистрБухгалтерии.Учетный.Остатки(
	               |			&Дата,
	               |			Счет В ИЕРАРХИИ (&Счета),
	               |			,
	               |			Предприятия В (&Предприятия)
	               |				И ВЫБОР
	               |					КОГДА &Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	               |							ИЛИ &Подразделение = НЕОПРЕДЕЛЕНО
	               |							ИЛИ Предприятия.УчетПоПодразделениям = ЛОЖЬ
	               |						ТОГДА ИСТИНА
	               |					ИНАЧЕ Подразделение В (&Подразделение)
	               |				КОНЕЦ
	               |				И (&НеОтбиратьПоТипу
	               |					ИЛИ ВЫБОР
	               |						КОГДА ТИПЗНАЧЕНИЯ(Субконто1) = ТИП(Справочник.Номенклатура)
	               |							ТОГДА ВЫРАЗИТЬ(Субконто1 КАК Справочник.Номенклатура).ТипНоменклатуры В (&ТипНоменклатуры)
	               |						ИНАЧЕ ИСТИНА
	               |					КОНЕЦ)
	               |				И (&НеОтбиратьПоГруппамНоменклатуры
	               |					ИЛИ ВЫБОР
	               |						КОГДА ТИПЗНАЧЕНИЯ(Субконто1) = ТИП(Справочник.Номенклатура)
	               |							ТОГДА ВЫРАЗИТЬ(Субконто1 КАК Справочник.Номенклатура).Родитель В (&ГруппаНоменклатуры)
	               |						ИНАЧЕ ИСТИНА
	               |					КОНЕЦ)
	               |				И (&НеОтбиратьПоСубконто25
	               |					ИЛИ ВЫБОР
	               |						КОГДА ТИПЗНАЧЕНИЯ(Субконто2) = ТИП(Справочник.Субконто)
	               |							ТОГДА Субконто2 В (&Службы)
	               |						ИНАЧЕ ИСТИНА
	               |					КОНЕЦ)) КАК УчетныйОстатки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	УчетныйОстатки.Счет,
	               |	УчетныйОстатки.Субконто1,
	               |	УчетныйОстатки.Субконто2,
	               |	УчетныйОстатки.Субконто3,
	               |	УчетныйОстатки.Предприятия,
	               |	УчетныйОстатки.СценарийПлана,
	               |	УчетныйОстатки.Счет.Забалансовый,
	               |	УчетныйОстатки.Подразделение";
	
	Запрос.УстановитьПараметр("Счета", Параметр.Счета);
	Запрос.УстановитьПараметр("Предприятия", Объект.Предприятие);
	Запрос.УстановитьПараметр("Подразделение", ?(ЗначениеЗаполнено(Объект.Подразделение), Объект.Подразделение, Параметр.Подразделение));
	Запрос.УстановитьПараметр("Дата", Новый Граница(Объект.Дата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НеОтбиратьПоТипу", Параметр.ТипНоменклатуры.Количество() = 0);
	Запрос.УстановитьПараметр("НеОтбиратьПоСубконто25", Параметр.Субконто25.Количество() = 0);
	Запрос.УстановитьПараметр("Службы", Параметр.Субконто25);
	Запрос.УстановитьПараметр("ТипНоменклатуры", Параметр.ТипНоменклатуры);
	Запрос.УстановитьПараметр("НеОтбиратьПоГруппамНоменклатуры", Параметр.ГруппаНоменклатуры.Количество() = 0);
	Запрос.УстановитьПараметр("ГруппаНоменклатуры", Параметр.ГруппаНоменклатуры);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	КорПодразделение = ?(ЗначениеЗаполнено(Параметр.Подразделение), Параметр.Подразделение, Объект.Подразделение);
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Объект.Проводки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если Выборка.СуммаОстатокДт ИЛИ Выборка.КоличествоОстатокДт Тогда
			НоваяСтрока.СчетДебет = Выборка.Счет;
			НоваяСтрока.Субконто1Дебет = Выборка.Субконто1;
			НоваяСтрока.Субконто2Дебет = Выборка.Субконто2;
			НоваяСтрока.Субконто3Дебет = Выборка.Субконто3;
			НоваяСтрока.ПодразделениеДт = Выборка.Подразделение;
			Если НЕ Выборка.СчетЗабалансовый Тогда
				НоваяСтрока.СчетКредит = Параметр.СчетСверткиБалансовый;
				Если ЗначениеЗаполнено(Параметр.Субконто1) Тогда
					НоваяСтрока.Субконто1Кредит = Параметр.Субконто1;
				//Иначе
				//	НоваяСтрока.Субконто1Кредит = Выборка.Субконто1;
				КонецЕсли;
				Если ЗначениеЗаполнено(Параметр.Субконто2) Тогда
					НоваяСтрока.Субконто2Кредит = Параметр.Субконто2;
				КонецЕсли;
				Если ЗначениеЗаполнено(Параметр.Субконто3) Тогда
					НоваяСтрока.Субконто3Кредит = Параметр.Субконто3;
				КонецЕсли;
				Если НоваяСтрока.СчетКредит.УчетПоПодразделениям Тогда
					Если НЕ ЗначениеЗаполнено(КорПодразделение) Тогда
						НоваяСтрока.ПодразделениеКт = Выборка.Подразделение;					
					Иначе	
						НоваяСтрока.ПодразделениеКт = КорПодразделение;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			НоваяСтрока.Сумма = - Выборка.СуммаОстатокДт;
			//НоваяСтрока.Количество = ?(НоваяСтрока.Сумма, - Выборка.КоличествоОстатокДт, Выборка.КоличествоОстатокДт);
			НоваяСтрока.КоличествоДт = ?(НоваяСтрока.Сумма, - Выборка.КоличествоОстатокДт, Выборка.КоличествоОстатокДт);
			НоваяСтрока.Крахмал = ?(НоваяСтрока.Сумма, - Выборка.КоличествоКРХОстатокДт, Выборка.КоличествоКРХОстатокДт);
			//НоваяСтрока.Количество = - Выборка.КоличествоОстатокДт;
			//НоваяСтрока.Крахмал = - Выборка.КоличествоКРХОстатокДт;
			
			НоваяСтрока.ВалСуммаДт = - Выборка.ВалютнаяСуммаОстатокДт;
		Иначе
			НоваяСтрока.СчетКредит = Выборка.Счет;
			НоваяСтрока.Субконто1Кредит = Выборка.Субконто1;
			НоваяСтрока.Субконто2Кредит = Выборка.Субконто2;
			НоваяСтрока.Субконто3Кредит = Выборка.Субконто3;
			НоваяСтрока.ПодразделениеКт = Выборка.Подразделение;
			Если НЕ Выборка.СчетЗабалансовый Тогда
				НоваяСтрока.СчетДебет = Параметр.СчетСверткиБалансовый;
				Если ЗначениеЗаполнено(Параметр.Субконто1) Тогда
					НоваяСтрока.Субконто1Дебет = Параметр.Субконто1;
				//Иначе
				//	НоваяСтрока.Субконто1Дебет = Выборка.Субконто1;
				КонецЕсли;
				Если ЗначениеЗаполнено(Параметр.Субконто2) Тогда
					НоваяСтрока.Субконто2Дебет = Параметр.Субконто2;
				КонецЕсли;
				Если ЗначениеЗаполнено(Параметр.Субконто3) Тогда
					НоваяСтрока.Субконто3Дебет = Параметр.Субконто3;
				КонецЕсли;
				Если НоваяСтрока.СчетДебет.УчетПоПодразделениям Тогда
					Если НЕ ЗначениеЗаполнено(КорПодразделение) Тогда
						НоваяСтрока.ПодразделениеДт = Выборка.Подразделение;					
					Иначе	
						НоваяСтрока.ПодразделениеДт = КорПодразделение;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			НоваяСтрока.Сумма = - Выборка.СуммаОстатокКт;
			НоваяСтрока.Количество = ?(НоваяСтрока.Сумма, - Выборка.КоличествоОстатокКт, Выборка.КоличествоОстатокКт);
			НоваяСтрока.Крахмал = ?(НоваяСтрока.Сумма, - Выборка.КоличествоКРХОстатокКт, Выборка.КоличествоКРХОстатокКт);
			//НоваяСтрока.Количество = - Выборка.КоличествоОстатокКт;
			//НоваяСтрока.Крахмал = - Выборка.КоличествоКРХОстатокКт;
			
			НоваяСтрока.ВалСуммаКт = - Выборка.ВалютнаяСуммаОстатокКт;
		КонецЕсли;	
		
		//Если Выборка.КоличествоОстатокДт Тогда
			//НоваяСтрока.Количество = - (Выборка.КоличествоОстатокДт - Выборка.КоличествоОстатокКт);
		//Иначе
			//НоваяСтрока.Количество = - Выборка.КоличествоОстатокКт;	
		//КонецЕсли;
		//Если Выборка.КоличествоКРХОстатокДт Тогда
			
		//Иначе
		//	НоваяСтрока.Крахмал = - Выборка.КоличествоКРХОстатокКт;	
		//КонецЕсли;
		//Если Выборка.ВалютнаяСуммаОстатокДт Тогда
		//	//НоваяСтрока.ВалютаДт = Выборка.Валюта;
		//	НоваяСтрока.ВалСуммаДт = - Выборка.ВалютнаяСуммаОстатокДт;
		//Иначе
		//	//НоваяСтрока.ВалютаКт = Выборка.Валюта;
		//	НоваяСтрока.ВалСуммаКт = - Выборка.ВалютнаяСуммаОстатокКт;	
		//КонецЕсли;
		
		Если Не Объект.ВидОперации = "Свертка" Тогда //наоборот для оборотов
			Сч = НоваяСтрока.СчетДебет;	
			Суб1 = НоваяСтрока.Субконто1Дебет;
			Суб2 = НоваяСтрока.Субконто2Дебет;
			Суб3 = НоваяСтрока.Субконто3Дебет;
		    Подр = НоваяСтрока.ПодразделениеДт;
			Кол = НоваяСтрока.КоличествоДт;
			Вал = НоваяСтрока.ВалютаДт;
			ВалСум = НоваяСтрока.ВалСуммаДт;
			
			НоваяСтрока.СчетДебет = НоваяСтрока.СчетКредит;
			НоваяСтрока.Субконто1Дебет = НоваяСтрока.Субконто1Кредит;
			НоваяСтрока.Субконто2Дебет = НоваяСтрока.Субконто2Кредит;
			НоваяСтрока.Субконто3Дебет = НоваяСтрока.Субконто3Кредит;
		    НоваяСтрока.ПодразделениеДт = НоваяСтрока.ПодразделениеКт;
			НоваяСтрока.КоличествоДт = НоваяСтрока.Количество;
			НоваяСтрока.ВалютаДт = НоваяСтрока.ВалютаКт;
			НоваяСтрока.ВалСуммаДт = НоваяСтрока.ВалСуммаКт;
			
			НоваяСтрока.СчетКредит = Сч;
			НоваяСтрока.Субконто1Кредит = Суб1;
			НоваяСтрока.Субконто2Кредит = Суб2;
			НоваяСтрока.Субконто3Кредит = Суб3;
			НоваяСтрока.ПодразделениеКт = Подр;
			НоваяСтрока.Количество = Кол;
			НоваяСтрока.ВалютаКт = Вал;
			НоваяСтрока.ВалСуммаКт = ВалСум;
			
			НоваяСтрока.Сумма = - НоваяСтрока.Сумма;
			
		КонецЕсли;
		
		НоваяСтрока.Содержание = "свертка счета";
	КонецЦикла;
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьПредставленияСчетов()
		
	//Элементы.ПроводкиПредставлениеСчетДт.Видимость = (Объект.ВидОперации = "ВыгрузкаОбработан") ИЛИ (Объект.ВидОперации = "ВыгрузкаНеОбработан");
	//Элементы.ПроводкиПредставлениеСчетКт.Видимость = (Объект.ВидОперации = "ВыгрузкаОбработан") ИЛИ (Объект.ВидОперации = "ВыгрузкаНеОбработан");
	//Элементы.ПроводкиКоличествоДт.Видимость = (Объект.ВидОперации = "ВыгрузкаОбработан") ИЛИ (Объект.ВидОперации = "ВыгрузкаНеОбработан");
	
КонецПроцедуры	

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	ВидимостьПредставленияСчетов();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСоответствие(Команда)
	
	ТекСубконто = Элементы.Проводки.ТекущиеДанные[СтрЗаменить(Элементы.Проводки.ТекущийЭлемент.Имя, "Проводки", "")];
	ФормаСоответствия = ПолучитьФорму("Справочник.СоответствиеОбъектов.Форма.ФормаЭлемента");
	ФормаСоответствия.Объект.Значение77 = ТекСубконто;
	ФормаСоответствия.Объект.Предприятие = Объект.Предприятие;
	ФормаСоответствия.Объект.ТипДокумента = Объект.ТипДокумента;
	ФормаСоответствия.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотрИзмененийПриИзменении(Элемент)
	
	Элементы.Проводки.Видимость = (ПросмотрИзменений = 0);
	Элементы.ГруппаИзменения.Видимость = (ПросмотрИзменений = 1);
	
КонецПроцедуры

&НаСервере
Процедура ПечатьИзменений(ТабДок, Ссылка) Экспорт

	Макет = Документы.УЧ_Операция.ПолучитьМакет("Печать");
	
	ОбластьПроводкиШапка 	= Макет.ПолучитьОбласть("ПроводкиШапкаИзменения");
	ОбластьПроводки 		= Макет.ПолучитьОбласть("ПроводкиИзменения");
	
	ТабДок.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВД_ИсторияЗагрузкиОперацийСрезПоследнихСтало.НомерСтрокиДокумента,
	|	ВД_ИсторияЗагрузкиОперацийСрезПоследнихСтало.ПредставлениеСчетДт КАК ПредставлениеСчетДтСтало,
	|	ВД_ИсторияЗагрузкиОперацийСрезПоследнихСтало.ПредставлениеСчетКт КАК ПредставлениеСчетКтСтало,
	|	ВД_ИсторияЗагрузкиОперацийСрезПоследнихСтало.Субконто1Дебет КАК Субконто1ДебетСтало,
	|	ВД_ИсторияЗагрузкиОперацийСрезПоследнихСтало.Субконто2Дебет КАК Субконто2ДебетСтало,
	|	ВД_ИсторияЗагрузкиОперацийСрезПоследнихСтало.Субконто3Дебет КАК Субконто3ДебетСтало,
	|	ВД_ИсторияЗагрузкиОперацийСрезПоследнихСтало.Субконто1Кредит КАК Субконто1КредитСтало,
	|	ВД_ИсторияЗагрузкиОперацийСрезПоследнихСтало.Субконто2Кредит КАК Субконто2КредитСтало,
	|	ВД_ИсторияЗагрузкиОперацийСрезПоследнихСтало.Субконто3Кредит КАК Субконто3КредитСтало,
	|	ВД_ИсторияЗагрузкиОперацийСрезПоследнихСтало.Количество КАК КоличествоСтало,
	|	ВД_ИсторияЗагрузкиОперацийСрезПоследнихСтало.Сумма КАК СуммаСтало,
	|	ВД_ИсторияЗагрузкиОперацийСрезПоследнихСтало.Содержание КАК СодержаниеСтало,
	|	ВД_ИсторияЗагрузкиОперацийСрезПоследнихСтало.ВалютаКт КАК ВалютаКтСтало,
	|	ВД_ИсторияЗагрузкиОперацийСрезПоследнихСтало.КурсКт КАК КурсКтСтало,
	|	ВД_ИсторияЗагрузкиОперацийСрезПоследнихСтало.ВалСуммаКт КАК ВалСуммаКтСтало,
	|	ВД_ИсторияЗагрузкиОперацийСрезПоследнихСтало.ПодразделениеДт КАК ПодразделениеДтСтало,
	|	ВД_ИсторияЗагрузкиОперацийСрезПоследнихСтало.ПодразделениеКт КАК ПодразделениеКтСтало,
	|	ВД_ИсторияЗагрузкиОперацийСрезПоследнихСтало.ВалютаДт КАК ВалютаДтСтало,
	|	ВД_ИсторияЗагрузкиОперацийСрезПоследнихСтало.КурсДт КАК КурсДтСтало,
	|	ВД_ИсторияЗагрузкиОперацийСрезПоследнихСтало.ВалСуммаДт КАК ВалСуммаДтСтало,
	|	ВД_ИсторияЗагрузкиОперацийСрезПоследнихСтало.КоличествоДт КАК КоличествоДтСтало,
	|	ВД_ИсторияЗагрузкиОперацийСрезПоследнихБыло.ПредставлениеСчетДт,
	|	ВД_ИсторияЗагрузкиОперацийСрезПоследнихБыло.ПредставлениеСчетКт,
	|	ВД_ИсторияЗагрузкиОперацийСрезПоследнихБыло.Субконто1Дебет,
	|	ВД_ИсторияЗагрузкиОперацийСрезПоследнихБыло.Субконто2Дебет,
	|	ВД_ИсторияЗагрузкиОперацийСрезПоследнихБыло.Субконто3Дебет,
	|	ВД_ИсторияЗагрузкиОперацийСрезПоследнихБыло.Субконто1Кредит,
	|	ВД_ИсторияЗагрузкиОперацийСрезПоследнихБыло.Субконто2Кредит,
	|	ВД_ИсторияЗагрузкиОперацийСрезПоследнихБыло.Субконто3Кредит,
	|	ВД_ИсторияЗагрузкиОперацийСрезПоследнихБыло.Количество,
	|	ВД_ИсторияЗагрузкиОперацийСрезПоследнихБыло.Сумма,
	|	ВД_ИсторияЗагрузкиОперацийСрезПоследнихБыло.Содержание,
	|	ВД_ИсторияЗагрузкиОперацийСрезПоследнихБыло.ВалютаКт,
	|	ВД_ИсторияЗагрузкиОперацийСрезПоследнихБыло.КурсКт,
	|	ВД_ИсторияЗагрузкиОперацийСрезПоследнихБыло.ВалСуммаКт,
	|	ВД_ИсторияЗагрузкиОперацийСрезПоследнихБыло.ПодразделениеДт,
	|	ВД_ИсторияЗагрузкиОперацийСрезПоследнихБыло.ПодразделениеКт,
	|	ВД_ИсторияЗагрузкиОперацийСрезПоследнихБыло.ВалютаДт,
	|	ВД_ИсторияЗагрузкиОперацийСрезПоследнихБыло.КурсДт,
	|	ВД_ИсторияЗагрузкиОперацийСрезПоследнихБыло.ВалСуммаДт,
	|	ВД_ИсторияЗагрузкиОперацийСрезПоследнихБыло.КоличествоДт
	|ИЗ
	|	РегистрСведений.ВД_ИсторияЗагрузкиОпераций.СрезПоследних(
	|			&Период,
	|			Документ = &Документ
	|				И ИзмененияПриняты = ЛОЖЬ) КАК ВД_ИсторияЗагрузкиОперацийСрезПоследнихСтало
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВД_ИсторияЗагрузкиОпераций.СрезПоследних(
	|				&Период,
	|				Документ = &Документ
	|					И ИзмененияПриняты = ИСТИНА) КАК ВД_ИсторияЗагрузкиОперацийСрезПоследнихБыло
	|		ПО (ВД_ИсторияЗагрузкиОперацийСрезПоследнихБыло.Документ = ВД_ИсторияЗагрузкиОперацийСрезПоследнихСтало.Документ)
	|			И (ВД_ИсторияЗагрузкиОперацийСрезПоследнихБыло.НомерСтрокиДокумента = ВД_ИсторияЗагрузкиОперацийСрезПоследнихСтало.НомерСтрокиДокумента)";
	Запрос.УстановитьПараметр("Документ", Ссылка);
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	
	ТаблицаИзменений = Запрос.Выполнить().Выгрузить();
	ТабДок.Вывести(ОбластьПроводкиШапка);
	Для Каждого СтрокаТЧ Из ТаблицаИзменений Цикл
		ОбластьПроводки.Параметры.Заполнить(СтрокаТЧ);
		СтрокаПроводкиИзменения = ПроводкиИзмененияНачальные.Добавить();
		Для Каждого КолонкаТаблицы Из ТаблицаИзменений.Колонки Цикл
			Если Найти(КолонкаТаблицы.Имя, "Стало") <> 0 Или КолонкаТаблицы.Имя = "НомерСтрокиДокумента" Тогда
				Продолжить;
			КонецЕсли;	
			Если Не СтрокаТЧ[КолонкаТаблицы.Имя] = СтрокаТЧ[КолонкаТаблицы.Имя + "Стало"] Тогда
				ТекОбласть = ОбластьПроводки.Области[КолонкаТаблицы.Имя + "Стало"];
				ТекОбласть.Узор = ТипУзораТабличногоДокумента.Узор2;	
				ТекОбласть.ЦветУзора = WebЦвета.ЦветМорскойВолныНейтральный;
				СтруктураРасшифровки = Новый Структура;
				СтруктураРасшифровки.Вставить("Значение", СтрокаТЧ[КолонкаТаблицы.Имя + "Стало"]);
				СтруктураРасшифровки.Вставить("ИмяКолонки", КолонкаТаблицы.Имя);
				СтруктураРасшифровки.Вставить("НомерСтрокиДокумента", СтрокаТЧ.НомерСтрокиДокумента);
				ТекОбласть.Расшифровка = СтруктураРасшифровки;
				
				СтрокаПроводкиИзменения[КолонкаТаблицы.Имя] = СтрокаТЧ[КолонкаТаблицы.Имя + "Стало"];
				СтрокаПроводкиИзменения.НомерСтрокиДокумента = СтрокаТЧ.НомерСтрокиДокумента;
			Иначе
				ТекОбласть = ОбластьПроводки.Области[КолонкаТаблицы.Имя + "Стало"];
				ТекОбласть.Узор = ТипУзораТабличногоДокумента.БезУзора;	
			КонецЕсли;	
		КонецЦикла;	
		ТабДок.Вывести(ОбластьПроводки);
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура ИзмененияОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Элемент.ТекущаяОбласть.ЦветУзора = WebЦвета.ЦветМорскойВолныНейтральный Тогда
		НайденныеСтроки = ПроводкиИзмененияКонечные.НайтиСтроки(Новый Структура("НомерСтрокиДокумента", Расшифровка.НомерСтрокиДокумента));
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаИзменений = ПроводкиИзмененияКонечные.Добавить();
		Иначе                                                              
			СтрокаИзменений = НайденныеСтроки[0];
		КонецЕсли;	
		СтрокаИзменений[Расшифровка.ИмяКолонки] = Расшифровка.Значение;
		СтрокаИзменений.НомерСтрокиДокумента = Расшифровка.НомерСтрокиДокумента;
		Элемент.ТекущаяОбласть.ЦветУзора = WebЦвета.СветлоЗолотистый;
	ИначеЕсли Элемент.ТекущаяОбласть.ЦветУзора = WebЦвета.СветлоЗолотистый Тогда
		Элемент.ТекущаяОбласть.ЦветУзора = WebЦвета.ЦветМорскойВолныНейтральный;
		//НайденныеСтрокиНач = ПроводкиИзмененияНачальные.НайтиСтроки(Новый Структура("НомерСтрокиДокумента", Расшифровка.НомерСтроки));
		//Если Не НайденныеСтрокиНач.Количество() = 0 Тогда
		//	СтрокаИзмененийНач = НайденныеСтрокиНач[0];
		//	НачЗначение = СтрокаИзмененийНач[Расшифровка.ИмяКолонки];
		//КонецЕсли;
		НайденныеСтроки = ПроводкиИзмененияКонечные.НайтиСтроки(Новый Структура("НомерСтрокиДокумента", Расшифровка.НомерСтрокиДокумента));
		Если Не НайденныеСтроки.Количество() = 0 Тогда
			//СтрокаИзменений = НайденныеСтроки[0]; 
			ТекЭлемениИзменений = НайденныеСтроки[0][Расшифровка.ИмяКолонки];
			Если ТипЗнч(ТекЭлемениИзменений) = Тип("Число") Тогда
				НайденныеСтроки[0][Расшифровка.ИмяКолонки] = 0;
			ИначеЕсли ТипЗнч(ТекЭлемениИзменений) = Тип("Строка") Тогда
				НайденныеСтроки[0][Расшифровка.ИмяКолонки] = "";
			Иначе
				НайденныеСтроки[0][Расшифровка.ИмяКолонки] = Неопределено;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьВсеИзменения(Команда)
	
	ПринятьИзмененияНаСервере();
	
	ОбновитьОтображениеДанных();
	
	Оповестить("ОбновитьФормуУч_Операция_Изменения");
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьТолькоВыбранные(Команда)

	ПринятьИзмененияНаСервере(Истина);
	
	ОбновитьОтображениеДанных();
	
	Оповестить("ОбновитьФормуУч_Операция_Изменения");
	
КонецПроцедуры

&НаСервере
Процедура ПринятьИзмененияНаСервере(ТолькоОбработанные = Ложь) 
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	
	КолонкиТЧ = ПроводкиИзмененияКонечные.Выгрузить().Колонки;
	МассивНомеров = Новый Массив;
	
	Для Каждого СтрокаИзменений Из ПроводкиИзмененияКонечные Цикл 
		СтрокаПроводок = ТекОбъект.Проводки[СтрокаИзменений.НомерСтрокиДокумента - 1];
		Для Каждого КолонкаТаблицы Из КолонкиТЧ Цикл
			Если КолонкаТаблицы.Имя = "НомерСтрокиДокумента" Тогда
				Продолжить;
			КонецЕсли;	
			Если ЗначениеЗаполнено(СтрокаИзменений[КолонкаТаблицы.Имя]) Тогда
				СтрокаПроводок[КолонкаТаблицы.Имя] = СтрокаИзменений[КолонкаТаблицы.Имя];
			КонецЕсли;	
		КонецЦикла;	
		МассивНомеров.Добавить(СтрокаИзменений.НомерСтрокиДокумента);
	КонецЦикла;
	
	Если Не ТолькоОбработанные Тогда
		Для Каждого СтрокаИзменений Из ПроводкиИзмененияНачальные Цикл 
			Если МассивНомеров.Найти(СтрокаИзменений.НомерСтрокиДокумента) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;	
			СтрокаПроводок = ТекОбъект.Проводки[СтрокаИзменений.НомерСтрокиДокумента - 1];
			Для Каждого КолонкаТаблицы Из КолонкиТЧ Цикл
				Если КолонкаТаблицы.Имя = "НомерСтрокиДокумента" Тогда
					Продолжить;
				КонецЕсли;	
				Если ЗначениеЗаполнено(СтрокаИзменений[КолонкаТаблицы.Имя]) Тогда
					СтрокаПроводок[КолонкаТаблицы.Имя] = СтрокаИзменений[КолонкаТаблицы.Имя];
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;
	КонецЕсли;		
	
	ТекОбъект.ВидОперации = "ВыгрузкаНеОбработан";
	Если ТекОбъект.Проведен Тогда
		ТекОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	Иначе
		ТекОбъект.Записать();
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВД_ИсторияЗагрузкиОпераций.Период,
	|	ВД_ИсторияЗагрузкиОпераций.Документ,
	|	ВД_ИсторияЗагрузкиОпераций.ИзмененияПриняты,
	|	ВД_ИсторияЗагрузкиОпераций.НомерСтрокиДокумента,
	|	ВД_ИсторияЗагрузкиОпераций.ПредставлениеСчетДт,
	|	ВД_ИсторияЗагрузкиОпераций.ПредставлениеСчетКт,
	|	ВД_ИсторияЗагрузкиОпераций.Субконто1Дебет,
	|	ВД_ИсторияЗагрузкиОпераций.Субконто2Дебет,
	|	ВД_ИсторияЗагрузкиОпераций.Субконто3Дебет,
	|	ВД_ИсторияЗагрузкиОпераций.Субконто1Кредит,
	|	ВД_ИсторияЗагрузкиОпераций.Субконто2Кредит,
	|	ВД_ИсторияЗагрузкиОпераций.Субконто3Кредит,
	|	ВД_ИсторияЗагрузкиОпераций.Количество,
	|	ВД_ИсторияЗагрузкиОпераций.Сумма,
	|	ВД_ИсторияЗагрузкиОпераций.Содержание,
	|	ВД_ИсторияЗагрузкиОпераций.ВалютаКт,
	|	ВД_ИсторияЗагрузкиОпераций.КурсКт,
	|	ВД_ИсторияЗагрузкиОпераций.ВалСуммаКт,
	|	ВД_ИсторияЗагрузкиОпераций.ПодразделениеДт,
	|	ВД_ИсторияЗагрузкиОпераций.ПодразделениеКт,
	|	ВД_ИсторияЗагрузкиОпераций.ВалютаДт,
	|	ВД_ИсторияЗагрузкиОпераций.КурсДт,
	|	ВД_ИсторияЗагрузкиОпераций.ВалСуммаДт,
	|	ВД_ИсторияЗагрузкиОпераций.КоличествоДт
	|ИЗ
	|	РегистрСведений.ВД_ИсторияЗагрузкиОпераций КАК ВД_ИсторияЗагрузкиОпераций
	|ГДЕ
	|	ВД_ИсторияЗагрузкиОпераций.Документ = &Документ
	|	И НЕ ВД_ИсторияЗагрузкиОпераций.ИзмененияПриняты";
	Запрос.УстановитьПараметр("Документ", ТекОбъект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.ВД_ИсторияЗагрузкиОпераций.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Документ = ТекОбъект.Ссылка;
		МенеджерЗаписи.Период = Выборка.Период;
		МенеджерЗаписи.ИзмененияПриняты = Выборка.ИзмененияПриняты;
		МенеджерЗаписи.НомерСтрокиДокумента = Выборка.НомерСтрокиДокумента;
		МенеджерЗаписи.Прочитать();
		//ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.ИзмененияПриняты = Истина;
		МенеджерЗаписи.Записать();
	КонецЦикла;
		
	Элементы.Проводки.Видимость = Истина;
	Элементы.ГруппаИзменения.Видимость = Ложь;
	ПросмотрИзменений = 0;
	
КонецПроцедуры	

&НаСервере
Процедура ЗакрытьКорректировкуДолгаНаСервере(Контрагент = Неопределено)

	ЗапросДляРаспределениия = Новый Запрос;
	ЗапросДляРаспределениия.Текст = 
	"ВЫБРАТЬ
	|	УчетныйОбороты.Субконто1,
	|	УчетныйОбороты.Субконто3,
	|	УчетныйОбороты.СуммаОборотДт
	|ПОМЕСТИТЬ ВТ_НачДанные
	|ИЗ
	|	РегистрБухгалтерии.Учетный.Обороты(&ДатаНач, &ДатаКон, , Счет = &Счет, , Предприятия = &Предприятие, , ) КАК УчетныйОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_НачДанные.Субконто1,
	|	СУММА(ВТ_НачДанные.СуммаОборотДт) КАК СуммаОборотДт
	|ПОМЕСТИТЬ ВТ_ОбщаяСумма
	|ИЗ
	|	ВТ_НачДанные КАК ВТ_НачДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_НачДанные.Субконто1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_НачДанные.Субконто1,
	|	ВТ_НачДанные.Субконто3,
	|	ВТ_НачДанные.СуммаОборотДт КАК Сумма,
	|	ВТ_ОбщаяСумма.СуммаОборотДт КАК ОбщаяСумма
	|ИЗ
	|	ВТ_НачДанные КАК ВТ_НачДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОбщаяСумма КАК ВТ_ОбщаяСумма
	|		ПО ВТ_НачДанные.Субконто1 = ВТ_ОбщаяСумма.Субконто1";
	ЗапросДляРаспределениия.УстановитьПараметр("ДатаНач", НачалоМесяца(Объект.Дата));
	ЗапросДляРаспределениия.УстановитьПараметр("ДатаКон", Новый Граница(Объект.Дата, ВидГраницы.Включая));
	ЗапросДляРаспределениия.УстановитьПараметр("Предприятие", Объект.Предприятие);
	ЗапросДляРаспределениия.УстановитьПараметр("Счет", ПланыСчетов.Учетный.ПоставщикиПрочие);
	ТаблицаРаспределения = ЗапросДляРаспределениия.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос; 
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетныйОбороты.Субконто1,
	|	УчетныйОбороты.Субконто2,
	|	СУММА(-УчетныйОбороты.СуммаОборот) КАК СуммаОборот,
	|	УчетныйОбороты.Подразделение,
	|	УчетныйОбороты.Счет
	|ПОМЕСТИТЬ ВТ_Корректировки
	|ИЗ
	|	РегистрБухгалтерии.Учетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			Счет = &Счет6201,
	|			,
	|			Предприятия = &Предприятие
	|				И (&Контрагент = НЕОПРЕДЕЛЕНО
	|					ИЛИ Субконто1 = &Контрагент),
	|			,
	|			) КАК УчетныйОбороты
	|ГДЕ
	|	УчетныйОбороты.Регистратор ССЫЛКА Документ.УЧ_Операция
	|	И ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_Операция).ТипДокумента = ""Корректировка долга""
	|	И УчетныйОбороты.СуммаОборот < 0
	|
	|СГРУППИРОВАТЬ ПО
	|	УчетныйОбороты.Субконто1,
	|	УчетныйОбороты.Субконто2,
	|	УчетныйОбороты.Подразделение,
	|	УчетныйОбороты.Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетныйОстатки.Субконто1,
	|	УчетныйОстатки.Субконто2,
	|	УчетныйОстатки.Счет,
	|	УчетныйОстатки.Подразделение,
	|	УчетныйОстатки.СуммаОстатокКт
	|ПОМЕСТИТЬ КорректировкаНаКредитовоеСальдоПоПустомуСубконто
	|ИЗ
	|	РегистрБухгалтерии.Учетный.Остатки(
	|			&ДатаКон,
	|			Счет = &Счет6201,
	|			,
	|			Предприятия = &Предприятие
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						ВТ_Корректировки.Субконто1
	|					ИЗ
	|						ВТ_Корректировки КАК ВТ_Корректировки)
	|				И Субконто2 В
	|					(ВЫБРАТЬ
	|						ВТ_Корректировки.Субконто2
	|					ИЗ
	|						ВТ_Корректировки КАК ВТ_Корректировки)
	|				И Подразделение В
	|					(ВЫБРАТЬ
	|						ВТ_Корректировки.Подразделение
	|					ИЗ
	|						ВТ_Корректировки КАК ВТ_Корректировки)
	|				И (Субконто3 ЕСТЬ NULL 
	|					ИЛИ Субконто3 = НЕОПРЕДЕЛЕНО
	|					ИЛИ Субконто3 = ЗНАЧЕНИЕ(Документ.УЧ_Реализация.ПустаяСсылка))) КАК УчетныйОстатки
	|ГДЕ
	|	ЕСТЬNULL(УчетныйОстатки.СуммаОстатокКт, 0) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Корректировки.Субконто1,
	|	ВТ_Корректировки.Субконто2,
	|	ВТ_Корректировки.Подразделение,
	|	ВТ_Корректировки.Счет,
	|	ЕСТЬNULL(КорректировкаНаКредитовоеСальдоПоПустомуСубконто.СуммаОстатокКт, ВТ_Корректировки.СуммаОборот) КАК СуммаОборот
	|ПОМЕСТИТЬ ВТ_Итоговая
	|ИЗ
	|	КорректировкаНаКредитовоеСальдоПоПустомуСубконто КАК КорректировкаНаКредитовоеСальдоПоПустомуСубконто
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Корректировки КАК ВТ_Корректировки
	|		ПО КорректировкаНаКредитовоеСальдоПоПустомуСубконто.Субконто1 = ВТ_Корректировки.Субконто1
	|			И КорректировкаНаКредитовоеСальдоПоПустомуСубконто.Субконто2 = ВТ_Корректировки.Субконто2
	|			И КорректировкаНаКредитовоеСальдоПоПустомуСубконто.Подразделение = ВТ_Корректировки.Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетныйОстатки.Субконто1 КАК Субконто1Кредит,
	|	УчетныйОстатки.Субконто2 КАК Субконто2Кредит,
	|	УчетныйОстатки.Субконто3 КАК Субконто3Кредит,
	|	УчетныйОстатки.Подразделение КАК ПодразделениеКт,
	|	УчетныйОстатки.СуммаОстатокДт,
	|	УчетныйОстатки.Счет КАК СчетКредит,
	|	ВТ_Итоговая.Субконто1 КАК Субконто1Дебет,
	|	ВТ_Итоговая.Субконто2 КАК Субконто2Дебет,
	|	ВТ_Итоговая.Подразделение КАК ПодразделениеДт,
	|	ВТ_Итоговая.Счет КАК СчетДебет,
	|	ВТ_Итоговая.СуммаОборот КАК СуммаОборот
	|ИЗ
	|	ВТ_Итоговая КАК ВТ_Итоговая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Учетный.Остатки(
	|				&ДатаКон,
	|				Счет = &Счет6201,
	|				,
	|				Предприятия = &Предприятие
	|					И Субконто1 В
	|						(ВЫБРАТЬ
	|							ВТ_Корректировки.Субконто1
	|						ИЗ
	|							ВТ_Корректировки КАК ВТ_Корректировки)
	|					И Субконто2 В
	|						(ВЫБРАТЬ
	|							ВТ_Корректировки.Субконто2
	|						ИЗ
	|							ВТ_Корректировки КАК ВТ_Корректировки)
	|					И Подразделение В
	|						(ВЫБРАТЬ
	|							ВТ_Корректировки.Подразделение
	|						ИЗ
	|							ВТ_Корректировки КАК ВТ_Корректировки)) КАК УчетныйОстатки
	|		ПО ВТ_Итоговая.Субконто1 = УчетныйОстатки.Субконто1
	|			И ВТ_Итоговая.Субконто2 = УчетныйОстатки.Субконто2
	|			И ВТ_Итоговая.Подразделение = УчетныйОстатки.Подразделение
	|ГДЕ
	|	ЕСТЬNULL(УчетныйОстатки.СуммаОстатокДт, 0) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	УчетныйОстатки.Субконто3.Дата
	|ИТОГИ
	|	СУММА(СуммаОборот)
	|ПО
	|	ПодразделениеКт,
	|	Субконто1Кредит,
	|	Субконто2Кредит";
	Запрос.УстановитьПараметр("ДатаНач", НачалоМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаКон", Новый Граница(Объект.Дата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Предприятие", Объект.Предприятие);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Счет6201", ПланыСчетов.Учетный.Счет6201());
	
	ВыборкаПодр = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПодр.Следующий() Цикл
		ВыборкаКонтр = ВыборкаПодр.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаКонтр.Следующий() Цикл
			ВыборкаДог = ВыборкаКонтр.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаДог.Следующий() Цикл
				ТекСуммаЗакрытия = 0;
				Выборка = ВыборкаДог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока Выборка.Следующий() Цикл
					СуммаЗакрытия = Выборка.СуммаОборот;
					СуммаОстатокДт = Выборка.СуммаОстатокДт;
					СтрокаПроводки = Объект.Проводки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПроводки, Выборка);
					СтрокаПроводки.Содержание = "Закрытие корретировок долга";
					ОсталосьЗакрыть = (СуммаЗакрытия - ТекСуммаЗакрытия);
					Если СуммаОстатокДт <= ОсталосьЗакрыть Тогда 
						СтрокаПроводки.Сумма = СуммаОстатокДт;
						ТекСуммаЗакрытия = ТекСуммаЗакрытия + СуммаОстатокДт;
						ПереводРетробонусов(СтрокаПроводки, СуммаОстатокДт, ТаблицаРаспределения);
					Иначе
						СтрокаПроводки.Сумма = ОсталосьЗакрыть;
						ПереводРетробонусов(СтрокаПроводки, ОсталосьЗакрыть, ТаблицаРаспределения);
						Прервать;
					КонецЕсли;	
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьКорректировкуДолга(Команда)
	ЗакрытьКорректировкуДолгаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьКорректировкуДолгаПоКонтрагенту(Команда)

	ВыбКонтрагент = Неопределено;
	ТекЗнач = ВвестиЗначение(ВыбКонтрагент, "Выберите контрагента", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Если ТекЗнач Тогда
		ЗакрытьКорректировкуДолгаНаСервере(ВыбКонтрагент);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПереводРетробонусов(СтрокаПроводки, Сумма, ТаблицаРаспределения)
	
	Если Не ЗначениеЗаполнено(СтрокаПроводки.Субконто3Кредит) Тогда
		Возврат;
	КонецЕсли;	
	
	//ПроцентРетробонуса = ПолучитьПроцентРетробонуса(СтрокаПроводки.Субконто1Кредит, СтрокаПроводки.Субконто3Кредит);
	//Если ПроцентРетробонуса = 0 Тогда
	//	Возврат;
	//КонецЕсли;	
	
	ТекСумма = 0;
	СтрокиРаспр = ТаблицаРаспределения.НайтиСтроки(Новый Структура("Субконто1", СтрокаПроводки.Субконто1Дебет));
	Если СтрокиРаспр.Количество() <> 0 Тогда
		Для Каждого СтрокаРаспр Из СтрокиРаспр Цикл
			Движение = Объект.Проводки.Добавить();
			Движение.СчетДебет = ПланыСчетов.Учетный.Счет7601();
			Если Движение.СчетДебет.УчетПоПодразделениям Тогда
				Движение.ПодразделениеДт = СтрокаПроводки.ПодразделениеДт;
			КонецЕсли;
			Движение.Субконто1Дебет = СтрокаПроводки.Субконто1Кредит;
			Движение.Субконто3Дебет = СтрокаПроводки.Субконто3Кредит;
			
			Движение.СчетКредит = ПланыСчетов.Учетный._97_02;
			Если Движение.СчетКредит.УчетПоПодразделениям Тогда
				Движение.ПодразделениеКт = СтрокаПроводки.ПодразделениеКт;
			КонецЕсли;
			Движение.Субконто1Кредит = СтрокаПроводки.Субконто1Кредит;
			Движение.Субконто2Кредит = СтрокаПроводки.Субконто2Кредит;
			Движение.Субконто3Кредит = СтрокаРаспр.Субконто3;
			Движение.Сумма = Окр(Сумма * СтрокаРаспр.Сумма / СтрокаРаспр.ОбщаяСумма, 2);
			ТекСумма = ТекСумма + Движение.Сумма;
		КонецЦикла;
		Если ТекСумма <> Сумма Тогда
			Движение.Сумма = СтрокаПроводки.Сумма - (ТекСумма - Сумма);
		КонецЕсли;	
	КонецЕсли;
	
	//Движение.СчетКредит = ПланыСчетов.Учетный.ВерхПоОплате;
	//Если Движение.СчетКредит.УчетПоПодразделениям Тогда
	//	Движение.ПодразделениеКт = СтрокаПроводки.ПодразделениеКт;
	//КонецЕсли;
	//Движение.Субконто1Кредит = СтрокаПроводки.Субконто1Кредит;
	
	//Движение.Сумма = ТекСумма * ПроцентРетробонуса / 100;
	Движение.Содержание = "Перенос ретро";
	
КонецПроцедуры	

Функция ПолучитьПроцентРетробонуса(ТекКонтрагент, ТекДокументОтгрузки, ТекСуммаОплаты)
	
	//Если Не ЗначениеЗаполнено(ТекДокументОтгрузки) Или ТипЗнч(ТекДокументОтгрузки) <> Тип("ДокументСсылка.УЧ_Реализация") Тогда
		Возврат 0;
	//Иначе
	//	ДатаРетро = ТекДокументОтгрузки.Дата;
	//КонецЕсли;	
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	-УчетныйОбороты.СуммаОборот КАК СуммаОборот
	//|ИЗ
	//|	РегистрБухгалтерии.Учетный.Обороты(
	//|			&Дата,
	//|			&Дата,
	//|			Регистратор,
	//|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ВерхПоОтгрузке),
	//|			,
	//|			КорСубконто2 = ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.РетробонусИсходящий)
	//|				ИЛИ КорСубконто2 = ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.РетробонусИсходящийУсловный),
	//|			КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Учетный.РасходыПоРеал),
	//|			) КАК УчетныйОбороты
	//|ГДЕ
	//|	УчетныйОбороты.Регистратор = &Регистратор";
	//Запрос.УстановитьПараметр("Дата", ДатаРетро);
	//Запрос.УстановитьПараметр("Регистратор", ТекДокументОтгрузки);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//Если РезультатЗапроса.Пустой() Тогда
	//	Возврат 0;
	//Иначе
	//	Выборка = РезультатЗапроса.Выбрать();
	//	Пока Выборка.Следующий() Цикл
	//		СуммаРетроПоПроводкам = Выборка.Суммаоборот;	
	//	КонецЦикла;	
	//КонецЕсли;
	//
	//Возврат (ТекСуммаОплаты / ТекДокументОтгрузки.Реализация.Итог("СуммаОтгрузки")) * СуммаРетроПоПроводкам;
		
КонецФункции

&НаКлиенте
Процедура ПодобратьРеализации(Команда)
	
	СтруктураПоиска = новый Структура("СчетДебет, СчетКредит", ПредопределенноеЗначение("ПланСчетов.Учетный.ВерхПоОтгрузке"), ПредопределенноеЗначение("ПланСчетов.Учетный.ВерхПоОплате"));
	НайденныеСтроки7601_7602 = Объект.Проводки.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки7601_7602.Количество() <> 0 Тогда
		Ответ = Вопрос("Существующие проводки 76.01 - 76.02 будут удалены и созданы по новой. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ПодобратьРеализацииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПодобратьРеализацииНаСервере()
	
	Для Каждого ТекСтрокаПроводки Из Объект.Проводки Цикл
		
		Если ТекСтрокаПроводки.СчетКредит <> ПланыСчетов.Учетный.Счет6201() Или ЗначениеЗаполнено(ТекСтрокаПроводки.Субконто3Кредит) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекСчет 		= ТекСтрокаПроводки.СчетКредит;
		ТекКонтрагент 	= ТекСтрокаПроводки.Субконто1Кредит;
		ТекДоговор 		= ТекСтрокаПроводки.Субконто2Кредит;
		СуммаОбщая 		= ТекСтрокаПроводки.Сумма;
		
		Запрос = новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	УчетныйОбороты.Счет,
		               |	УчетныйОбороты.Субконто1,
		               |	УчетныйОбороты.Субконто2,
		               |	УчетныйОбороты.Субконто3,
		               |	УчетныйОбороты.Предприятия,
		               |	УчетныйОбороты.Подразделение,
		               |	СУММА(УчетныйОбороты.СуммаОборот) КАК СуммаОборот
		               |ПОМЕСТИТЬ ВТ_Обороты
		               |ИЗ
		               |	РегистрБухгалтерии.Учетный.Обороты(
		               |			&Период,
		               |			&Период,
		               |			Регистратор,
		               |			Счет = &Счет,
		               |			,
		               |			Субконто1 = &Субконто1
		               |				И Субконто2 = &Субконто2
		               |				И Предприятия = &Предприятие,
		               |			,
		               |			) КАК УчетныйОбороты
		               |ГДЕ
		               |	УчетныйОбороты.Регистратор <> &Регистратор
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	УчетныйОбороты.Счет,
		               |	УчетныйОбороты.Субконто1,
		               |	УчетныйОбороты.Субконто3,
		               |	УчетныйОбороты.Предприятия,
		               |	УчетныйОбороты.Подразделение,
		               |	УчетныйОбороты.Субконто2
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	УчетныйОстатки.Счет,
		               |	УчетныйОстатки.Субконто1,
		               |	УчетныйОстатки.Субконто2,
		               |	УчетныйОстатки.Субконто3,
		               |	УчетныйОстатки.Предприятия,
		               |	УчетныйОстатки.Подразделение,
		               |	УчетныйОстатки.СуммаОстатокДт + ЕСТЬNULL(ВТ_Обороты.СуммаОборот, 0) КАК СуммаОстатокДт
		               |ИЗ
		               |	РегистрБухгалтерии.Учетный.Остатки(
		               |			&Период,
		               |			Счет = &Счет,
		               |			,
		               |			Субконто1 = &Субконто1
		               |				И Субконто2 = &Субконто2
		               |				И Предприятия = &Предприятие) КАК УчетныйОстатки
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Обороты КАК ВТ_Обороты
		               |		ПО УчетныйОстатки.Счет = ВТ_Обороты.Счет
		               |			И УчетныйОстатки.Субконто1 = ВТ_Обороты.Субконто1
		               |			И УчетныйОстатки.Субконто2 = ВТ_Обороты.Субконто2
		               |			И УчетныйОстатки.Субконто3 = ВТ_Обороты.Субконто3
		               |			И УчетныйОстатки.Предприятия = ВТ_Обороты.Предприятия
		               |ГДЕ
		               |	УчетныйОстатки.СуммаОстатокДт + ЕСТЬNULL(ВТ_Обороты.СуммаОборот, 0) <> 0
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	УчетныйОстатки.Субконто3.Дата";
		Запрос.УстановитьПараметр("Период", 	 Объект.Дата);
		Запрос.УстановитьПараметр("Предприятие", Объект.Предприятие);
		Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
		Запрос.УстановитьПараметр("Счет", 	   ТекСтрокаПроводки.СчетКредит);
		Запрос.УстановитьПараметр("Субконто1", ТекСтрокаПроводки.Субконто1Кредит);
		Запрос.УстановитьПараметр("Субконто2", ТекСтрокаПроводки.Субконто2Кредит);
		
		СуммаОсталосьРаспределить = СуммаОбщая;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = Объект.Проводки.Вставить(ТекСтрокаПроводки.НомерСтроки);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаПроводки);
			НоваяСтрока.Субконто3Кредит = Выборка.Субконто3;
			НоваяСтрока.Сумма 			= Мин(СуммаОсталосьРаспределить, Выборка.СуммаОстатокДт);
			СуммаОсталосьРаспределить	= СуммаОсталосьРаспределить - НоваяСтрока.Сумма;
			ТекСтрокаПроводки.Сумма		= СуммаОсталосьРаспределить;
			
			Если СуммаОсталосьРаспределить = 0 Тогда
				Объект.Проводки.Удалить(ТекСтрокаПроводки);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	//ретробонусы
	Если Объект.Предприятие.Наименование = "Яр" Тогда
		Для Каждого ТекСтрокаПроводки Из Объект.Проводки Цикл
			Если ТекСтрокаПроводки.СчетДебет = ПланыСчетов.Учетный.Счет7601() И ТекСтрокаПроводки.СчетКредит = ПланыСчетов.Учетный.ВерхПоОплате Тогда
				Объект.Проводки.Удалить(ТекСтрокаПроводки);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекСтрокаПроводки Из Объект.Проводки Цикл
			Если ТекСтрокаПроводки.СчетКредит <> ПланыСчетов.Учетный.Счет6201() Или Не ЗначениеЗаполнено(ТекСтрокаПроводки.Субконто3Кредит) Тогда
				Продолжить;
			КонецЕсли;
			
			ПроцентРетробонуса = ПолучитьПроцентРетробонуса(ТекСтрокаПроводки.Субконто1Кредит, ТекСтрокаПроводки.Субконто3Кредит, ТекСтрокаПроводки.Сумма);
			Если ПроцентРетробонуса = 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			НоваяСтрокаПроводки = Объект.Проводки.Добавить();
			//ЗаполнитьЗначенияСвойств(НоваяСтрокаПроводки, ТекСтрокаПроводки);
			
			НоваяСтрокаПроводки.СчетДебет  = ПланыСчетов.Учетный.Счет7601();		
			НоваяСтрокаПроводки.СчетКредит = ПланыСчетов.Учетный.ВерхПоОплате;
			
			НоваяСтрокаПроводки.Субконто1Дебет  = ТекСтрокаПроводки.Субконто1Кредит;   //Контрагент
			НоваяСтрокаПроводки.Субконто2Дебет  = 0;                                   //пустой верх
			НоваяСтрокаПроводки.Субконто3Дебет  = ТекСтрокаПроводки.Субконто3Кредит;   //документ реализации
			НоваяСтрокаПроводки.Субконто1Кредит = ТекСтрокаПроводки.Субконто1Кредит;   //Контрагент
			НоваяСтрокаПроводки.Субконто2Кредит = 0;                                   //пустой верх
			
			НоваяСтрокаПроводки.Сумма 	   = ПроцентРетробонуса;//ТекСтрокаПроводки.Сумма * ПроцентРетробонуса / 100;
			НоваяСтрокаПроводки.Содержание = ТекСтрокаПроводки.Содержание;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРеализации(Команда)
	
	СвернутьРеализацииНаСервере();
		
КонецПроцедуры

&НаСервере
Процедура СвернутьРеализацииНаСервере()
	
	НужныйКорСчет = ПредопределенноеЗначение("ПланСчетов.Учетный.ПокупателиОсн");
	//удаляем лишние строки в копии ТЗ
	ТЧ = Объект.Проводки.Выгрузить();
	МассивЛишнихСтрок = Новый Массив;
	Для Каждого ТекСтрока Из ТЧ Цикл
		Если НЕ ТекСтрока.СчетКредит = НужныйКорСчет Тогда
			МассивЛишнихСтрок.Добавить(ТекСтрока);			
		КонецЕсли;	
	КонецЦикла;
	Для каждого ТекСтрока Из МассивЛишнихСтрок Цикл
		ТЧ.Удалить(ТекСтрока);	
	КонецЦикла;
	ТЧ.Свернуть("СчетДебет, Субконто1Дебет, Субконто2Дебет, Субконто3Дебет, СчетКредит, Субконто1Кредит, Субконто2Кредит, Содержание, ВалютаКт, КурсКт, ПодразделениеДт, ПодразделениеКт, ВалютаДт, КурсДт, ЦФО, ПодразделениеЦФО, ПредставлениеСчетДт, ПредставлениеСчетКт", "Сумма, Количество, КоличествоДт, ВалСуммаКт, Крахмал, ВалСуммаДт");
	
	//удаляем лишние строки ТЗ
	МассивЛишнихСтрок = Новый Массив;
	Для Каждого ТекСтрокаПроводки Из Объект.Проводки Цикл
		Если ТекСтрокаПроводки.СчетДебет = ПланыСчетов.Учетный.Счет7601() И ТекСтрокаПроводки.СчетКредит = ПланыСчетов.Учетный.ВерхПоОплате Тогда
			МассивЛишнихСтрок.Добавить(ТекСтрокаПроводки);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из Объект.Проводки Цикл
		Если ТекСтрока.СчетКредит = НужныйКорСчет Тогда
			МассивЛишнихСтрок.Добавить(ТекСтрока);			
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого ТекСтрока Из МассивЛишнихСтрок Цикл
		Объект.Проводки.Удалить(ТекСтрока);	
	КонецЦикла;
	
	//заполняем свернутый вид
	Для каждого ТекСтрока Из ТЧ Цикл
		НоваяСтрока = Объект.Проводки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла; 
	
КонецПроцедуры	

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	сабОбщегоНазначения.ОтобразитьСостояниеДокумента(ЭтаФорма);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	сабОбщегоНазначения.ОтобразитьСостояниеДокумента(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиПриАктивизацииЯчейки(Элемент)
	
	Если НЕ Элементы.Проводки.ТекущиеДанные = Неопределено Тогда
		
		Если Элемент.ТекущийЭлемент.Имя = "ПроводкиСубконто2Дебет" Тогда
			
			Если ЗначениеЗаполнено(Элементы.Проводки.ТекущиеДанные.СчетДебет) Тогда
				
				//Если УЧ_Сервер.ЕстьВидСубконто(Элементы.Проводки.ТекущиеДанные.СчетДебет, "ИздержкиОбращения") Тогда
				//	ЛюбаяСт = ЛюбаяСтатья(Объект.Предприятие);	
				//	Если Элементы.Проводки.ТекущиеДанные.СчетДебет = ПолучитьСчет90_3() Тогда
				//		Если Не ЛюбаяСт Тогда
				//			ПараметрыВыбораСтатьи = УЧ_Сервер.ПолучитьПараметрыВыбораСтатьиЗатрат(Объект.Предприятие, Элементы.ПроводкиСубконто2Дебет.ПараметрыВыбора);
				//			Элементы.ПроводкиСубконто2Дебет.ПараметрыВыбора = ПараметрыВыбораСтатьи;
				//		КонецЕсли;
				//	КонецЕсли;	
				//КонецЕсли;
				
				//УстановитьСвязиПараметровВыбора(Элементы.Проводки.ТекущиеДанные.Субконто1Дебет, Элементы.Проводки.ТекущиеДанные.Субконто2Дебет, "Дебет", "ПроводкиСубконто2");
				//Если РежимРедактированияТЧ Тогда
				//	Элементы.Проводки.ИзменитьСтроку();
				//КонецЕсли;
				//Если Элементы.Проводки.ТекущиеДанные.Субконто2Дебет = "" Тогда 
				//	Элементы.Проводки.ТекущиеДанные.Субконто2Дебет = ПолучитьСсылкуПВХ(Элементы.Проводки.ТекущиеДанные.СчетДебет);
				//КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ПроводкиСубконто2Кредит" Тогда
			
			Если ЗначениеЗаполнено(Элементы.Проводки.ТекущиеДанные.СчетКредит) Тогда
				
				//Если Элементы.Проводки.ТекущиеДанные.Субконто2Кредит = "" Тогда 
				//	Элементы.Проводки.ТекущиеДанные.Субконто2Кредит = ПолучитьСсылкуПВХ(Элементы.Проводки.ТекущиеДанные.СчетКредит);
				//КонецЕсли;
				
				//Если УЧ_Сервер.ЕстьВидСубконто(Элементы.Проводки.ТекущиеДанные.СчетКредит, "ИздержкиОбращения") Тогда
				//	ЛюбаяСт = ЛюбаяСтатья(Объект.Предприятие);	
				//	Если Элементы.Проводки.ТекущиеДанные.СчетКредит = ПолучитьСчет90_3() Тогда
				//		Если Не ЛюбаяСт Тогда
				//			ПараметрыВыбораСтатьи = УЧ_Сервер.ПолучитьПараметрыВыбораСтатьиЗатрат(Объект.Предприятие, Элементы.ПроводкиСубконто2Кредит.ПараметрыВыбора);
				//			Элементы.ПроводкиСубконто2Кредит.ПараметрыВыбора = ПараметрыВыбораСтатьи;
				//		КонецЕсли;
				//	КонецЕсли;	
				//КонецЕсли;
				
				//УстановитьСвязиПараметровВыбора(Элементы.Проводки.ТекущиеДанные.Субконто1Кредит, Элементы.Проводки.ТекущиеДанные.Субконто2Кредит, "Кредит", "ПроводкиСубконто2");
				//Если РежимРедактированияТЧ Тогда
				//	Элементы.Проводки.ИзменитьСтроку();
				//КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Элемент.ТекущийЭлемент.Имя = "ПроводкиСубконто1Дебет" Тогда
			
			Если ЗначениеЗаполнено(Элементы.Проводки.ТекущиеДанные.СчетДебет) Тогда
				//УстановитьСвязиПараметровВыбора(Неопределено, Элементы.Проводки.ТекущиеДанные.Субконто1Дебет, "Дебет", "ПроводкиСубконто1");
				//Если РежимРедактированияТЧ Тогда
				//	Элементы.Проводки.ИзменитьСтроку();
				//КонецЕсли;
				//Если Элементы.Проводки.ТекущиеДанные.Субконто2Дебет = "" Тогда 
				//	Элементы.Проводки.ТекущиеДанные.Субконто2Дебет = ПолучитьСсылкуПВХ(Элементы.Проводки.ТекущиеДанные.СчетДебет);
				//КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ПроводкиСубконто1Кредит" Тогда
			
			Если ЗначениеЗаполнено(Элементы.Проводки.ТекущиеДанные.СчетКредит) Тогда
				
				//Если Элементы.Проводки.ТекущиеДанные.Субконто2Кредит = "" Тогда 
				//	Элементы.Проводки.ТекущиеДанные.Субконто2Кредит = ПолучитьСсылкуПВХ(Элементы.Проводки.ТекущиеДанные.СчетКредит);
				//КонецЕсли;
				
				//УстановитьСвязиПараметровВыбора(Неопределено, Элементы.Проводки.ТекущиеДанные.Субконто1Кредит, "Кредит", "ПроводкиСубконто1");
				//Если РежимРедактированияТЧ Тогда
				//	Элементы.Проводки.ИзменитьСтроку();
				//КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		
		
	КонецЕсли;
	
	
	
	
	//закомментил д1
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязиПараметровВыбора(ТекСубконто1, ТекСубконто2, ВидДвижения, ТекЭлемент)
	
	Если Не ТекСубконто2 = Неопределено И Не ТекСубконто2 = "" Тогда
		
		Если Метаданные.Справочники.Содержит(ТекСубконто2.Метаданные()) Тогда
			НеобходимаСвязьПовладельцу = Ложь;
			
			Для Каждого ТекВладелец Из ТекСубконто2.Метаданные().Владельцы Цикл
				
				Если Не ЗначениеЗаполнено(ТекСубконто1) Тогда
					Прервать;
				КонецЕсли;
				
				Если ТекСубконто1.Метаданные() = ТекВладелец Тогда
					НеобходимаСвязьПовладельцу = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			НеобходимоИзменениеСвязи = Ложь;
			
			МассивПараметровВыбора = Новый Массив;
			Если ТипЗнч(ТекСубконто2) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				НеобходимоИзменениеСвязи = Истина;
				Если ЗначениеЗаполнено(Объект.Организация) Тогда
					МассивПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация", РежимИзмененияСвязанногоЗначения.Очищать));
				КонецЕсли;
			ИначеЕсли ТипЗнч(ТекСубконто2) = Тип("СправочникСсылка.Номенклатура") Тогда
				НеобходимоИзменениеСвязи = Истина;
			Иначе
				МассивПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Предприятие", "Объект.Предприятие", РежимИзмененияСвязанногоЗначения.Очищать));
			КонецЕсли;
			
			Если НеобходимаСвязьПовладельцу Тогда				
				МассивПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы.Проводки.ТекущиеДанные.Субконто1" + ВидДвижения, РежимИзмененияСвязанногоЗначения.Очищать));
			КонецЕсли;	
			
			Если МассивПараметровВыбора.Количество() ИЛИ НеобходимоИзменениеСвязи ИЛИ ТипЗнч(ТекСубконто2) = Тип("СправочникСсылка.Номенклатура") Тогда
				Элементы[ТекЭлемент + ВидДвижения].СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если ЗначениеЗаполнено(ТекущийОбъект.Подразделение) Тогда
		Для каждого ТекСтрока Из ТекущийОбъект.Проводки Цикл
			Если Не ЗначениеЗаполнено(ТекСтрока.ПодразделениеДт) Тогда
				ТекСтрока.ПодразделениеДт =	ТекущийОбъект.Подразделение;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ТекСтрока.ПодразделениеКт) Тогда
				ТекСтрока.ПодразделениеКт =	ТекущийОбъект.Подразделение;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСтроки(Команда)
	Объект.Проводки.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		
		РеквизитыПодразделения = БюджетныйНаСервере.ВернутьРеквизиты(Объект.Подразделение, "Организация");
		Объект.Организация = РеквизитыПодразделения.Организация;
		
		Для каждого ТекСтрока Из Объект.Проводки Цикл
			ТекСтрока.ПодразделениеДт =	Неопределено;
			ТекСтрока.ПодразделениеКт =	Неопределено;
		КонецЦикла; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиПередНачаломИзменения(Элемент, Отказ)
	РежимРедактированияТЧ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	РежимРедактированияТЧ = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	РежимРедактированияТЧ = Истина;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДвижения(ЗначенияЗаполнения)
	
	Если ЗначенияЗаполнения.Свойство("СпособЗаполнения") И ЗначенияЗаполнения.СпособЗаполнения = "ТиповаяОперация" Тогда
		
		Объект.Предприятие = ЗначенияЗаполнения.Предприятие;
		Объект.Комментарий = ЗначенияЗаполнения.Содержание;
		
		ТЧ_ТиповаяОперация = ЗначенияЗаполнения.ТиповаяОперация.Хозрасчетный;  //ТЧ_ТиповаяОперация = Справочники.ТиповыеОперации.НайтиПоКоду().Хозрасчетный;
		Для Каждого ТекСтрока Из ТЧ_ТиповаяОперация Цикл
			
			НоваяСтрока = Объект.Проводки.Добавить();
			НоваяСтрока.СчетДебет = ТекСтрока.СчетДт;
			НоваяСтрока.Субконто1Дебет = ТекСтрока.СубконтоДт1;
			НоваяСтрока.Субконто2Дебет = ТекСтрока.СубконтоДт2;
			НоваяСтрока.Субконто3Дебет = ТекСтрока.СубконтоДт3;
			НоваяСтрока.ПодразделениеДт = ТекСтрока.ПодразделениеДт;
			НоваяСтрока.ВалютаДт = ТекСтрока.ВалютаДт;
			
			НоваяСтрока.СчетКредит = ТекСтрока.СчетКт;
			НоваяСтрока.Субконто1Кредит = ТекСтрока.СубконтоКт1;
			НоваяСтрока.Субконто2Кредит = ТекСтрока.СубконтоКт2;
			НоваяСтрока.Субконто3Кредит = ТекСтрока.СубконтоКт3;
			НоваяСтрока.ПодразделениеКт = ТекСтрока.ПодразделениеКт;
			НоваяСтрока.ВалютаКт = ТекСтрока.ВалютаКт;
			
			НоваяСтрока.Содержание = ЗначенияЗаполнения.Содержание;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ДобавитьЭлементыПараметрыТиповойОперации()

	ТиповаяОперация = Объект.ТиповаяОперация;
	//ТипыСвязанныеСОрганизацией = БухгалтерскийУчетПереопределяемый.ТипыСвязанныеСОрганизацией();
	
	//Служебные массивы для процедуры ИзменитьРеквизиты
	УдаляемыеРеквизиты	 = Новый Массив;
	ДобавляемыеРеквизиты = Новый Массив;
	
	// Удалим предыдущие реквизиты и элементы
	Для Каждого Параметр Из ПараметрыТиповойОперации Цикл
		Элементы.Удалить(Элементы["ПолеПараметрТиповойОперации"+Параметр.Имя]);
		УдаляемыеРеквизиты.Добавить("ПараметрТиповойОперации"+Параметр.Имя);
	КонецЦикла;
	
	ПараметрыТиповойОперации.Очистить();
	
	// Подготовим параметры, которые используются для текущей операции.
	ЗаполнитьПараметрыТиповойОперации();
	
	//Для Каждого СтрокаТаблицы Из ТаблицаПараметровТиповойОперации Цикл
	Для Каждого СтрокаТаблицы Из ПараметрыТиповойОперации Цикл
		// Добавляем новый Параметр в форму
		ИмяРеквизита = "ПараметрТиповойОперации" + СтрокаТаблицы.Имя;
		ТипРеквизита = СтрокаТаблицы.Тип;
		Реквизит	 = Новый РеквизитФормы(ИмяРеквизита, ТипРеквизита, , СтрокаТаблицы.Наименование, Истина);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		// Добавляем связь параметра и реквизита формы
		//СтрокаПараметров				 = ПараметрыТиповойОперации.Добавить();
		//СтрокаПараметров.Параметр		 = СтрокаТаблицы.Ссылка;
		//СтрокаПараметров.ИмяРеквизита	 = "ПараметрТиповойОперации"+СтрокаТаблицы.Имя;
	КонецЦикла;
	
	// Добавляем новые реквизиты и удаляем старые.
	ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	
	//Отрисуем новые поля ввода на форме
	//Для Каждого СтрокаТаблицы Из ТаблицаПараметровТиповойОперации Цикл
	Для Каждого СтрокаТаблицы Из ПараметрыТиповойОперации Цикл
		
		РодительПоля		 = Элементы.ГруппаПараметрыТиповойОперации;
		ИмяРеквизита		 = "ПараметрТиповойОперации"+СтрокаТаблицы.Имя;
		ТипРеквизита		 = СтрокаТаблицы.Тип;
		// Добавляем новый элемент
		Элемент				 = Элементы.Добавить("Поле"+ИмяРеквизита, Тип("ПолеФормы"), РодительПоля);
		Элемент.Вид			 = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным	 = ИмяРеквизита;
		// Установим расширенную подсказку или подсказку ввода
		//РасширеннаяПодсказка = СтрокаТаблицы.Подсказка;
		//Если НЕ ПустаяСтрока(РасширеннаяПодсказка) Тогда
		//	МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РасширеннаяПодсказка, " ");
		//	Если МассивСлов.Количество() > 5 ИЛИ ТипРеквизита.СодержитТип(Тип("Число")) ИЛИ ТипРеквизита.СодержитТип(Тип("Дата")) Тогда
		//		Элемент.РасширеннаяПодсказка.Заголовок	 = РасширеннаяПодсказка;
		//		Элемент.ОтображениеПодсказки			 = ОтображениеПодсказки.Кнопка;
		//	Иначе
		//		Элемент.ПодсказкаВвода					 = РасширеннаяПодсказка;
		//	КонецЕсли;
		//КонецЕсли;
		
		// Установить связь параметров выбора
		МассивСвязейПараметровВыбора = Новый Массив;
		
		// Связь по владельцу
		Если ЗначениеЗаполнено(СтрокаТаблицы.СвязьПоВладельцу) Тогда
			Если СтрокаТаблицы.СвязьПоВладельцу = "Предприятие" Тогда
				НоваяСвязь	 = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Предприятие");
				МассивСвязейПараметровВыбора.Добавить(НоваяСвязь);
			Иначе
				ИмяПараметраВладельца = "ПараметрТиповойОперации"+СтрокаТаблицы.СвязьПоВладельцу;
				// Проверим есть ли такой реквизит на форме.
				СтруктураПоиска = Новый Структура("Имя", СтрокаТаблицы.СвязьПоВладельцу);
				МассивСтрок = ПараметрыТиповойОперации.НайтиСтроки(СтруктураПоиска);
				Если МассивСтрок.Количество() <> 0 Тогда
					НоваяСвязь	 = Новый СвязьПараметраВыбора("Отбор.Владелец", ИмяПараметраВладельца);
					МассивСвязейПараметровВыбора.Добавить(НоваяСвязь);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		
		// Связь по организации
		//Для Каждого ТипЭлемента Из ТипРеквизита.Типы() Цикл
		//	Если ТипыСвязанныеСОрганизацией.СодержитТип(ТипЭлемента) Тогда
		//		Если ТипЭлемента = Тип("СправочникСсылка.ПодразделенияОрганизаций") ИЛИ ТипЭлемента = Тип("СправочникСсылка.БанковскиеСчета") ИЛИ ТипЭлемента = Тип("СправочникСсылка.РегистрацииВНалоговомОргане") Тогда
		//			НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация");
		//		Иначе
		//			НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация");
		//		КонецЕсли;
		//		МассивСвязейПараметровВыбора.Добавить(НоваяСвязь);
		//		Прервать;
		//	КонецЕсли;
		//КонецЦикла;
		
		Элемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязейПараметровВыбора);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьПараметрыТиповойОперации()
	
	ПараметрыТиповойОперации.Очистить();
	ТЗ_Параметры = ПараметрыТиповойОперации.Выгрузить();

	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТиповыеОперацииХозрасчетный.СчетДт КАК СчетДт,
	               |	ТиповыеОперацииХозрасчетный.СубконтоДт1 КАК СубконтоДт1,
	               |	ТиповыеОперацииХозрасчетный.СубконтоДт2 КАК СубконтоДт2,
	               |	ТиповыеОперацииХозрасчетный.СубконтоДт3 КАК СубконтоДт3,
	               |	ТиповыеОперацииХозрасчетный.КоличествоДт КАК КоличествоДт,
	               |	ТиповыеОперацииХозрасчетный.СчетКт КАК СчетКт,
	               |	ТиповыеОперацииХозрасчетный.СубконтоКт1 КАК СубконтоКт1,
	               |	ТиповыеОперацииХозрасчетный.СубконтоКт2 КАК СубконтоКт2,
	               |	ТиповыеОперацииХозрасчетный.СубконтоКт3 КАК СубконтоКт3,
	               |	ТиповыеОперацииХозрасчетный.КоличествоКт КАК КоличествоКт,
	               |	ТиповыеОперацииХозрасчетный.Сумма КАК Сумма,
	               |	ТиповыеОперацииХозрасчетный.ПодразделениеДт КАК ПодразделениеДт,
	               |	ТиповыеОперацииХозрасчетный.ПодразделениеКт КАК ПодразделениеКт
	               |ИЗ
	               |	Справочник.ТиповыеОперации.Хозрасчетный КАК ТиповыеОперацииХозрасчетный
	               |ГДЕ
	               |	ТиповыеОперацииХозрасчетный.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.ТиповаяОперация);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	ТЗ_РезультатЗапроса = РезультатЗапроса.Выгрузить();
	//Для Каждого ТекСтрока Из ТЗ_РезультатЗапроса Цикл
	//	Для Каждого ТекКолонка Из ТЗ_РезультатЗапроса.Колонки Цикл
	//		
	//		Если ТипЗнч(ТекСтрока[ТекКолонка]) = Тип("Строка") Тогда
	//			НоваяСтрока = ТЗ_Параметры.Добавить();
	//			НоваяСтрока.Имя = СтрЗаменить(Выборка.СубконтоДт1, " ", "_");
	//			НоваяСтрока.Наименование = Выборка.СубконтоДт1;
	//		КонецЕсли;
	//	
	//	КонецЦикла;
	//КонецЦикла;
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеСчетаДт = УправленческийУчетПовтИсп.ПолучитьСвойстваСчета(Выборка.СчетДт);
		ДанныеСчетаКт = УправленческийУчетПовтИсп.ПолучитьСвойстваСчета(Выборка.СчетКт);
		
		ТекЗначение = Выборка.СубконтоДт1;
		Если ТипЗнч(ТекЗначение) = Тип("Строка") И ТекЗначение <> "" Тогда
			ТекЗначение = СтрЗаменить(СтрЗаменить(ТекЗначение, ">", ""), "<", "");
			НоваяСтрока = ТЗ_Параметры.Добавить();
			НоваяСтрока.Имя = СтрЗаменить(ТекЗначение, " ", "_");
			НоваяСтрока.Наименование = ТекЗначение;
			НоваяСтрока.Тип = ДанныеСчетаДт.ВидСубконто1ТипЗначения;
		КонецЕсли;
		
		ТекЗначение = Выборка.СубконтоДт2;
		Если ТипЗнч(ТекЗначение) = Тип("Строка") И ТекЗначение <> "" Тогда
			ТекЗначение = СтрЗаменить(СтрЗаменить(ТекЗначение, ">", ""), "<", "");
			НоваяСтрока = ТЗ_Параметры.Добавить();
			НоваяСтрока.Имя = СтрЗаменить(ТекЗначение, " ", "_");
			НоваяСтрока.Наименование = ТекЗначение;
			НоваяСтрока.Тип = ДанныеСчетаДт.ВидСубконто2ТипЗначения;  //ОписаниеТипов
			Если НоваяСтрока.Тип.СодержитТип(Тип("СправочникСсылка.ДоговорыКонтрагентов")) И ТипЗнч(Выборка.СубконтоДт1) = Тип("Строка") Тогда
				НоваяСтрока.СвязьПоВладельцу = СтрЗаменить(СтрЗаменить(СтрЗаменить(Выборка.СубконтоДт1, " ", "_"), ">", ""), "<", "");
			КонецЕсли;
		КонецЕсли;
		
		ТекЗначение = Выборка.СубконтоДт3;
		Если ТипЗнч(ТекЗначение) = Тип("Строка") И ТекЗначение <> "" Тогда
			ТекЗначение = СтрЗаменить(СтрЗаменить(ТекЗначение, ">", ""), "<", "");
			НоваяСтрока = ТЗ_Параметры.Добавить();
			НоваяСтрока.Имя = СтрЗаменить(ТекЗначение, " ", "_");
			НоваяСтрока.Наименование = ТекЗначение;
			НоваяСтрока.Тип = ДанныеСчетаДт.ВидСубконто3ТипЗначения;
		КонецЕсли;
		
		ТекЗначение = Выборка.СубконтоКт1;
		Если ТипЗнч(ТекЗначение) = Тип("Строка") И ТекЗначение <> "" Тогда
			ТекЗначение = СтрЗаменить(СтрЗаменить(ТекЗначение, ">", ""), "<", "");
			НоваяСтрока = ТЗ_Параметры.Добавить();
			НоваяСтрока.Имя = СтрЗаменить(ТекЗначение, " ", "_");
			НоваяСтрока.Наименование = ТекЗначение;
			НоваяСтрока.Тип = ДанныеСчетаКт.ВидСубконто1ТипЗначения;
		КонецЕсли;
		
		ТекЗначение = Выборка.СубконтоКт2;
		Если ТипЗнч(ТекЗначение) = Тип("Строка") И ТекЗначение <> "" Тогда
			ТекЗначение = СтрЗаменить(СтрЗаменить(ТекЗначение, ">", ""), "<", "");
			НоваяСтрока = ТЗ_Параметры.Добавить();
			НоваяСтрока.Имя = СтрЗаменить(ТекЗначение, " ", "_");
			НоваяСтрока.Наименование = ТекЗначение;
			НоваяСтрока.Тип = ДанныеСчетаКт.ВидСубконто2ТипЗначения;
			Если НоваяСтрока.Тип.СодержитТип(Тип("СправочникСсылка.ДоговорыКонтрагентов")) И ТипЗнч(Выборка.СубконтоКт1) = Тип("Строка") Тогда
				НоваяСтрока.СвязьПоВладельцу = СтрЗаменить(СтрЗаменить(СтрЗаменить(Выборка.СубконтоКт1, " ", "_"), ">", ""), "<", "");
			КонецЕсли;
		КонецЕсли;
		
		ТекЗначение = Выборка.СубконтоКт3;
		Если ТипЗнч(ТекЗначение) = Тип("Строка") И ТекЗначение <> "" Тогда
			ТекЗначение = СтрЗаменить(СтрЗаменить(ТекЗначение, ">", ""), "<", "");
			НоваяСтрока = ТЗ_Параметры.Добавить();
			НоваяСтрока.Имя = СтрЗаменить(ТекЗначение, " ", "_");
			НоваяСтрока.Наименование = ТекЗначение;
			НоваяСтрока.Тип = ДанныеСчетаКт.ВидСубконто3ТипЗначения;
		КонецЕсли;
		
		
		ТекЗначение = Выборка.ПодразделениеДт;
		Если ТипЗнч(ТекЗначение) = Тип("Строка") И ТекЗначение <> "" Тогда
			ТекЗначение = СтрЗаменить(СтрЗаменить(ТекЗначение, ">", ""), "<", "");
			НоваяСтрока = ТЗ_Параметры.Добавить();
			НоваяСтрока.Имя = СтрЗаменить(ТекЗначение, " ", "_");
			НоваяСтрока.Наименование = ТекЗначение;
			НоваяСтрока.Тип = новый ОписаниеТипов("Справочникссылка.СтруктураПредприятия");
			НоваяСтрока.СвязьПоВладельцу = "Предприятие";
		КонецЕсли;
		
		ТекЗначение = Выборка.ПодразделениеКт;
		Если ТипЗнч(ТекЗначение) = Тип("Строка") И ТекЗначение <> "" Тогда
			ТекЗначение = СтрЗаменить(СтрЗаменить(ТекЗначение, ">", ""), "<", "");
			НоваяСтрока = ТЗ_Параметры.Добавить();
			НоваяСтрока.Имя = СтрЗаменить(ТекЗначение, " ", "_");
			НоваяСтрока.Наименование = ТекЗначение;
			НоваяСтрока.Тип = новый ОписаниеТипов("Справочникссылка.СтруктураПредприятия");
			НоваяСтрока.СвязьПоВладельцу = "Предприятие"
		КонецЕсли;
		
		ТекЗначение = Выборка.КоличествоДт;
		Если ТипЗнч(ТекЗначение) = Тип("Строка") И ТекЗначение <> "" Тогда
			ТекЗначение = СтрЗаменить(СтрЗаменить(ТекЗначение, ">", ""), "<", "");
			НоваяСтрока = ТЗ_Параметры.Добавить();
			НоваяСтрока.Имя = СтрЗаменить(ТекЗначение, " ", "_");
			НоваяСтрока.Наименование = ТекЗначение;
			НоваяСтрока.Тип = новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3));
		КонецЕсли;
		
		ТекЗначение = Выборка.КоличествоКт;
		Если ТипЗнч(ТекЗначение) = Тип("Строка") И ТекЗначение <> "" Тогда
			ТекЗначение = СтрЗаменить(СтрЗаменить(ТекЗначение, ">", ""), "<", "");
			НоваяСтрока = ТЗ_Параметры.Добавить();
			НоваяСтрока.Имя = СтрЗаменить(ТекЗначение, " ", "_");
			НоваяСтрока.Наименование = ТекЗначение;
			НоваяСтрока.Тип = новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3));
		КонецЕсли;
		
		ТекЗначение = Выборка.Сумма;
		Если ТипЗнч(ТекЗначение) = Тип("Строка") И ТекЗначение <> "" Тогда
			ТекЗначение = СтрЗаменить(СтрЗаменить(ТекЗначение, ">", ""), "<", "");
			НоваяСтрока = ТЗ_Параметры.Добавить();
			НоваяСтрока.Имя = СтрЗаменить(ТекЗначение, " ", "_");
			НоваяСтрока.Наименование = ТекЗначение;
			НоваяСтрока.Тип = новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2));
		КонецЕсли;
		
		
		
		
	КонецЦикла;
	
	ТЗ_Параметры.Свернуть("Имя, Наименование, Тип, СвязьПоВладельцу");
	ПараметрыТиповойОперации.Загрузить(ТЗ_Параметры);
	

КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоТиповой(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ТиповаяОперация) Тогда
		Сообщение = новый СообщениеПользователю;
		Сообщение.Текст = "Не выбрана типовая операция";
		Сообщение.Поле = "Объект.ТиповаяОперация";
		Сообщение.Сообщить();
		
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоТиповойНаСервере();
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаПроводки;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоТиповойНаСервере()
	
	Объект.Проводки.Очистить();
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТиповыеОперации.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.ТиповыеОперации КАК ТиповыеОперации
	               |ГДЕ
	               |	ТиповыеОперации.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТиповыеОперацииХозрасчетный.СчетДт КАК СчетДебет,
	               |	ТиповыеОперацииХозрасчетный.СубконтоДт1 КАК Субконто1Дебет,
	               |	ТиповыеОперацииХозрасчетный.СубконтоДт2 КАК Субконто2Дебет,
	               |	ТиповыеОперацииХозрасчетный.СубконтоДт3 КАК Субконто3Дебет,
	               |	ТиповыеОперацииХозрасчетный.КоличествоДт КАК КоличествоДт,
	               |	ТиповыеОперацииХозрасчетный.СчетКт КАК СчетКредит,
	               |	ТиповыеОперацииХозрасчетный.СубконтоКт1 КАК Субконто1Кредит,
	               |	ТиповыеОперацииХозрасчетный.СубконтоКт2 КАК Субконто2Кредит,
	               |	ТиповыеОперацииХозрасчетный.СубконтоКт3 КАК Субконто3Кредит,
	               |	ТиповыеОперацииХозрасчетный.КоличествоКт КАК Количество,
	               |	ТиповыеОперацииХозрасчетный.Сумма КАК Сумма,
	               |	ТиповыеОперацииХозрасчетный.ПодразделениеДт КАК ПодразделениеДт,
	               |	ТиповыеОперацииХозрасчетный.ПодразделениеКт КАК ПодразделениеКт
	               |ИЗ
	               |	Справочник.ТиповыеОперации.Хозрасчетный КАК ТиповыеОперацииХозрасчетный
	               |ГДЕ
	               |	ТиповыеОперацииХозрасчетный.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.ТиповаяОперация);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаНаименование = РезультатЗапроса[0].Выбрать();
	ВыборкаНаименование.Следующий(); 
	
	ТЗ_Типовая = РезультатЗапроса[1].Выгрузить();
	Для Каждого ТекСтрока Из ТЗ_Типовая Цикл
		НоваяСтрокаПроводки = Объект.Проводки.Добавить();
		НоваяСтрокаПроводки.Содержание = ВыборкаНаименование.Наименование;
		
		Для Каждого ТекКолонка Из ТЗ_Типовая.Колонки Цикл
			ТекЗначение = ТекСтрока[ТекКолонка.Имя];
			
			Если ТипЗнч(ТекЗначение) = Тип("Строка") Тогда  //В типовой заполнена строка - заполним по параметру
				ТекЗначение = СтрЗаменить(СтрЗаменить(ТекЗначение, ">", ""), "<", "");
				Если Не ЗначениеЗаполнено(ТекЗначение) Тогда Продолжить; КонецЕсли;
				НайденныеПараметры = ПараметрыТиповойОперации.НайтиСтроки(новый Структура("Наименование", ТекЗначение));
				Если НайденныеПараметры.Количество() > 0 Тогда
					НоваяСтрокаПроводки[ТекКолонка.Имя] = ЭтаФорма["ПараметрТиповойОперации"+НайденныеПараметры[0].Имя];
				КонецЕсли;
				
			Иначе
				НоваяСтрокаПроводки[ТекКолонка.Имя] = ТекЗначение;
			КонецЕсли;			
					
		КонецЦикла;
	КонецЦикла;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаКлиенте
Процедура ТиповаяОперацияПриИзменении(Элемент)

	ДобавитьЭлементыПараметрыТиповойОперации();

КонецПроцедуры


#Область КомандыИзменения

&НаКлиенте
Процедура ПоказатьИзмененияВерсий(ИмяКоманды)

	СсылкаНаОбъект = ЭтаФорма.ДокументБУ; 
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Ссылка",СсылкаНаОбъект);
	СтруктураКоличествВерсий = сабОбщегоНазначенияБУХ.ПолучитьКоличествоВерсий(СсылкаНаОбъект);
	КолВерсий = СтруктураКоличествВерсий.КоличествоИзмененныхВерсий;
	СравниваемыеВерсии = Новый СписокЗначений;  
	Пока КолВерсий > 0 Цикл
		СравниваемыеВерсии.Добавить(СтруктураКоличествВерсий.КоличествоВерсий, СтруктураКоличествВерсий.КоличествоВерсий);
		СтруктураКоличествВерсий.КоличествоВерсий = СтруктураКоличествВерсий.КоличествоВерсий - 1;
		КолВерсий = КолВерсий - 1;
	КонецЦикла;
	ПараметрыОтчета.Вставить("СравниваемыеВерсии",СравниваемыеВерсии); 
	
	ОткрытьФорму("РегистрСведений.ВерсииОбъектов.Форма.ОтчетПоВерсиямОбъекта", ПараметрыОтчета);

КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоДокументу(ИмяКоманды)

	ПерезаполнитьДокументНаОснованиинаСервере();

КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьДокументНаОснованиинаСервере()
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.ОбработкаЗаполненияСФормы(ЭтаФорма.ДокументБУ, Неопределено, Истина);
	ЗначениеВРеквизитФормы(ТекОбъект, "Объект");
	
	//ОбновленнаяЗапись = РегистрыСведений.сабОбработкаДокументов.СоздатьМенеджерЗаписи();
	//ОбновленнаяЗапись.ДокументБУ = ЭтаФорма.ДокументБУ;
	//ОбновленнаяЗапись.ДокументУУ = Объект.Ссылка;
	//ОбновленнаяЗапись.ДатаОбработки = ТекущаяДата();
	//ОбновленнаяЗапись.Автор = ПараметрыСеанса.ТекущийПользователь;
	//ОбновленнаяЗапись.Модифицирован = Ложь;
	//ОбновленнаяЗапись.Записать();
	Элементы.ЭлементПерезаполнитьПоДокументу.Доступность = Ложь;
	
	ПриСозданииНаСервере(Ложь, Истина);
	
КонецПроцедуры

#КонецОбласти

