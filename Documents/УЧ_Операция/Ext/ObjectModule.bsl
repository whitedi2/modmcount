
Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если РучнаяКорректировка Тогда		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Движения документа %1 отредактированы вручную и не могут быть автоматически актуализированы'"), ЭтотОбъект);
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.КлючДанных = Ссылка;
		Сообщение.Сообщить();		
		
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	ВодочноеНаправление = Справочники.НаправленияДеятельности.НайтиПоНаименованию("Водочное", Истина);
	Списывать10ПоОстаткам = Ложь;
	ТаблицаРетробонусов = Неопределено;
	РезультатЗапроса = Неопределено;
		
	РассчетРетробонусов = Ложь;
		
	Движения.Учетный.Записывать = Истина;	
	
	Для Каждого ТекСтрокаПроводки Из Проводки Цикл
		Движение = Движения.Учетный.Добавить();
		Движение.Период = Дата;
		Движение.СчетДт = ТекСтрокаПроводки.СчетДебет;
		УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,ТекСтрокаПроводки.СчетДебет,1,ТекСтрокаПроводки.Субконто1Дебет);
		УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,ТекСтрокаПроводки.СчетДебет,2,ТекСтрокаПроводки.Субконто2Дебет);
		Если Не ЗначениеЗаполнено(ТекСтрокаПроводки.Субконто3Дебет) Тогда
			ТекСубконто3 = Справочники.Субконто.ПустаяСсылка();
		Иначе
			ТекСубконто3 = ТекСтрокаПроводки.Субконто3Дебет;
		КонецЕсли;
		УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,ТекСтрокаПроводки.СчетДебет,3,ТекСубконто3);
		Движение.СчетКт = ТекСтрокаПроводки.СчетКредит;
		УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,ТекСтрокаПроводки.СчетКредит,1,ТекСтрокаПроводки.Субконто1Кредит);
		УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,ТекСтрокаПроводки.СчетКредит,2,ТекСтрокаПроводки.Субконто2Кредит);
		Если Не ЗначениеЗаполнено(ТекСтрокаПроводки.Субконто3Кредит) Тогда
			ТекСубконто3 = Справочники.Субконто.ПустаяСсылка();
		Иначе
			ТекСубконто3 = ТекСтрокаПроводки.Субконто3Кредит;
		КонецЕсли;
		УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,ТекСтрокаПроводки.СчетКредит,3,ТекСубконто3);		
		//количество
		Если ТекСтрокаПроводки.СчетДебет.Количественный Тогда
			Если ТекСтрокаПроводки.Сумма = 0 И (ВидОперации = "Свертка" ИЛИ ВидОперации = "Свертка счетов") Тогда 
				Движение.КоличествоДт = - ТекСтрокаПроводки.КоличествоДт;
			Иначе
				Движение.КоличествоДт = ТекСтрокаПроводки.КоличествоДт;
			КонецЕсли;
		КонецЕсли;
		Если ТекСтрокаПроводки.СчетКредит.Количественный Тогда
			Если ТекСтрокаПроводки.Сумма = 0 И (ВидОперации = "Свертка" ИЛИ ВидОперации = "Свертка счетов") Тогда 
				Движение.КоличествоКт = - ТекСтрокаПроводки.Количество;
			Иначе
				Движение.КоличествоКт = ТекСтрокаПроводки.Количество;
			КонецЕсли;
		КонецЕсли;		
		//крахмал
		Если ТекСтрокаПроводки.СчетДебет.Крахмал Тогда
			Движение.КоличествоКРХДт = ТекСтрокаПроводки.Крахмал;
		КонецЕсли;
		Если ТекСтрокаПроводки.СчетКредит.Крахмал Тогда
			Движение.КоличествоКРХКт = ТекСтрокаПроводки.Крахмал;
		КонецЕсли;
		//валютный
		Если ТекСтрокаПроводки.СчетДебет.Валютный И ТекСтрокаПроводки.ВалСуммаДт Тогда
			Движение.ВалютаДт = ТекСтрокаПроводки.ВалютаДт;
			Движение.ВалютнаяСуммаДт = ТекСтрокаПроводки.ВалСуммаДт;
		КонецЕсли;
		Если ТекСтрокаПроводки.СчетКредит.Валютный И ТекСтрокаПроводки.ВалСуммаКт Тогда
			Движение.ВалютаКт = ТекСтрокаПроводки.ВалютаКт;
			Движение.ВалютнаяСуммаКт = ТекСтрокаПроводки.ВалСуммаКт;
		КонецЕсли;
		//подразделение
		Если ТекСтрокаПроводки.СчетДебет.УчетПоПодразделениям Тогда
		    Движение.ПодразделениеДт = ТекСтрокаПроводки.ПодразделениеДт;		
		КонецЕсли;
		Если ТекСтрокаПроводки.СчетКредит.УчетПоПодразделениям Тогда
			Движение.ПодразделениеКт = ТекСтрокаПроводки.ПодразделениеКт;
		КонецЕсли;		
		Движение.Предприятия = Предприятие;
		Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
		Если НЕ ПустаяСтрока(Комментарий) И НЕ ПустаяСтрока(ТекСтрокаПроводки.Содержание) Тогда
			Движение.Содержание = Комментарий + Символы.ПС + ТекСтрокаПроводки.Содержание;
		ИначеЕсли ПустаяСтрока(ТекСтрокаПроводки.Содержание) Тогда
			Движение.Содержание = Комментарий;
		ИначеЕсли ПустаяСтрока(Комментарий) Тогда
			Движение.Содержание = ТекСтрокаПроводки.Содержание;
		КонецЕсли;
		Если Списывать10ПоОстаткам И (Движение.СчетКт = ПланыСчетов.Учетный._10_09 Или Движение.СчетКт = ПланыСчетов.Учетный.Счет41()) Тогда
			Выборка = РезультатЗапроса.Выбрать();
			СтрукутраПоиска = Новый Структура("Субконто1, Счет, Субконто2", ТекСтрокаПроводки.Субконто1Кредит, Движение.СчетКт, ТекСтрокаПроводки.Субконто2Кредит) ;
			Если Выборка.НайтиСледующий(СтрукутраПоиска) Тогда
				Себестоимость = ?(Выборка.КоличествоОстаток, Выборка.СуммаОстаток / Выборка.КоличествоОстаток, 0);
			Иначе
				Себестоимость = 0;
			КонецЕсли;
			Движение.Сумма = Себестоимость * ТекСтрокаПроводки.Количество;
		Иначе	
			Движение.Сумма = ТекСтрокаПроводки.Сумма;
		КонецЕсли;
		
		Если РассчетРетробонусов Тогда
			
			Если Не ТекСтрокаПроводки.Субконто1Дебет.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
				Продолжить;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	//Замена пустого 3 субконто для счета 62.1 на текущий документ
	//Для Каждого ТекСтрока Из Проводки Цикл
	//	Если НЕ ТекСтрока.СчетДебет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконто.Документы)  = Неопределено И
	//		НЕ ЗначениеЗаполнено(ТекСтрока.Субконто3Дебет) Тогда
	//		ТекСтрока.Субконто3Дебет = Ссылка
	//	КонецЕсли;
	//	Если НЕ ТекСтрока.СчетКредит.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконто.Документы)  = Неопределено И
	//		НЕ ЗначениеЗаполнено(ТекСтрока.Субконто3Кредит) Тогда
	//		ТекСтрока.Субконто3Кредит = Ссылка
	//	КонецЕсли;
	//КонецЦикла;
КонецПроцедуры

Функция НайтиДоговорКонтрагента(ТекКонтрагент, ТекНаименование)
	
	Если Не ЗначениеЗаполнено(ТекНаименование) Тогда
		ТекНаименование = "Основной";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Наименование = &Наименование
	|	И ДоговорыКонтрагентов.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Наименование", ТекНаименование);
	Запрос.УстановитьПараметр("Владелец", ТекКонтрагент);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ТекДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		ТекДоговор.Наименование = ТекНаименование;
		ТекДоговор.Владелец = ТекКонтрагент;
		ТекДоговор.Записать();
		Возврат ТекДоговор.Ссылка;
	КонецЕсли;	
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;		
	КонецЦикла;	
		
КонецФункции

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ПересчитыватьЦенуСписанияВПроводках Тогда
		УстановитьПривилегированныйРежим(Истина);
		
		СтруктураИмен = Новый Структура;
		СтруктураИмен.Вставить("Предприятие", "Предприятие");
		СтруктураИмен.Вставить("Подразделение", "Подразделение");
		СтруктураИмен.Вставить("Склад", "Субконто2Кредит");
		СтруктураИмен.Вставить("Номенклатура", "Субконто1Кредит");
		СтруктураИмен.Вставить("Количество", "Количество");
		СтруктураИмен.Вставить("Товары", "Проводки");
		СтруктураИмен.Вставить("Счет10", "СчетКредит");
		
		СтруктураСоответствий = УЧ_Сервер.ПоучитьСоответствияСчетовНоменклатуры(ЭтотОбъект, СтруктураИмен);
		СоответствиеСчета = СтруктураСоответствий.Соответствия;
		СоответствиеУчетаПоПодразделениям = СтруктураСоответствий.СоответствияУчетаПодразделений;
		ДополнительныеСвойства.Вставить("СоответствиеСчета", СоответствиеСчета);
		ДополнительныеСвойства.Вставить("СоответствиеУчетаПоПодразделениям", СоответствиеУчетаПоПодразделениям);
		
		ТаблицаОстатков = УЧ_Сервер.ПолучитьТаблицуОстатков(ЭтотОбъект, СтруктураИмен, СтруктураСоответствий);
		РезультатОстатки = ТаблицаОстатков.РезультатОстатки;
		РезультатКонтроль = ТаблицаОстатков.РезультатКонтроль;
		
		Для Каждого ТекСтрокаТабличнаяЧасть Из Проводки Цикл
			УчетПоподразделениямСчетУчета = СоответствиеУчетаПоПодразделениям.Получить(ТекСтрокаТабличнаяЧасть.СчетКредит);
			
			Если Не ТекСтрокаТабличнаяЧасть.Количество Тогда
				Продолжить;			
			КонецЕсли;
			
			Если УчетПоподразделениямСчетУчета Тогда
				СтруктураПоиска = Новый Структура("Номенклатура, Склад, Счет, Подразделение", ТекСтрокаТабличнаяЧасть.Субконто1Кредит, ТекСтрокаТабличнаяЧасть.Субконто2Кредит, СоответствиеСчета.Получить(ТекСтрокаТабличнаяЧасть.Субконто1Кредит), Подразделение);
			Иначе	
				СтруктураПоиска = Новый Структура("Номенклатура, Склад, Счет", ТекСтрокаТабличнаяЧасть.Субконто1Кредит, ТекСтрокаТабличнаяЧасть.Субконто2Кредит, СоответствиеСчета.Получить(ТекСтрокаТабличнаяЧасть.Субконто1Кредит));
			КонецЕсли;
			ВыборкаДетальныеЗаписи = РезультатОстатки.НайтиСтроки(СтруктураПоиска);
			Если ТекСтрокаТабличнаяЧасть.Количество <> 0 Тогда
				Если ВыборкаДетальныеЗаписи.Количество() Тогда
					Если ТекСтрокаТабличнаяЧасть.Количество = ВыборкаДетальныеЗаписи[0].Количество Тогда
						//ТекСтрокаТабличнаяЧасть.Цена = ВыборкаДетальныеЗаписи[0].Цена;
						ТекСтрокаТабличнаяЧасть.Сумма = ВыборкаДетальныеЗаписи[0].Сумма;
					Иначе	
						//ТекСтрокаТабличнаяЧасть.Цена = ВыборкаДетальныеЗаписи[0].Цена;
						ТекСтрокаТабличнаяЧасть.Сумма = ВыборкаДетальныеЗаписи[0].Цена * ТекСтрокаТабличнаяЧасть.Количество;
					КонецЕсли;
				Иначе
					//ТекСтрокаТабличнаяЧасть.Цена = 0;
					ТекСтрокаТабличнаяЧасть.Сумма = 0;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ДополнительныеСвойства.Вставить("РезультатКонтроль", РезультатКонтроль);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	СуммаОперации = Проводки.Итог("Сумма");
	
	//из подписки на событие
	БюджетныйНаСервере.ДокументыПередЗаписьюПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	РучнаяКорректировка = Ложь;
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	РучнаяКорректировка = Ложь;
	ВидОперации = "Учет";
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	БюджетныйНаСервере.ПриУстановкеНовогоНомераПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	сабОбщегоНазначенияБУХ.сабОбработкиЗаполненияУчпетныхДокументовОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
КонецПроцедуры

Процедура ОбработкаЗаполненияСФормы(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт

	ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);	

КонецПроцедуры
