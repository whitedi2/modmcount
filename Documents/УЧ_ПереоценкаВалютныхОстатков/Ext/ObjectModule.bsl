
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если РучнаяКорректировка Тогда		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Движения документа %1 отредактированы вручную и не могут быть автоматически актуализированы'"), ЭтотОбъект);
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.КлючДанных = Ссылка;
		Сообщение.Сообщить();		
		
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Движения.Учетный.Очистить();
	Движения.Учетный.Записать(Истина); 
	
	Если СчетКурсовйРазницы = ПланыСчетов.Учетный.Счет98() Тогда
		Движения.УЧ_ДоходыИРасходыБудПериодов.Записывать = Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УчетныйОстатки.Счет,
	               |	УчетныйОстатки.Субконто1,
	               |	УчетныйОстатки.Субконто2,
	               |	УчетныйОстатки.Субконто3,
	               |	УчетныйОстатки.СуммаОстаток,
	               |	УчетныйОстатки.ВалютнаяСуммаОстаток,
	               |	УчетныйОстатки.Валюта,
	               |	УчетныйОстатки.Подразделение,
	               |	УчетныйОстатки.СуммаРазвернутыйОстатокДт,
	               |	УчетныйОстатки.СуммаРазвернутыйОстатокКт
	               |ИЗ
	               |	РегистрБухгалтерии.Учетный.Остатки(&Граница, Счет В (&СчетаПереоценки), , Предприятия = &Предприятие) КАК УчетныйОстатки
	               |
	               |ДЛЯ ИЗМЕНЕНИЯ
	               |	РегистрБухгалтерии.Учетный.Остатки";
	Запрос.УстановитьПараметр("Граница",Новый Граница(Дата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СчетаПереоценки", СчетаПодлежащиеПереоценке.ВыгрузитьКолонку("Счет"));
	Запрос.УстановитьПараметр("Предприятие",Предприятие);
	ВалютныеОстатки = Запрос.Выполнить().Выгрузить();
	
	Если ВалютныеОстатки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КэшКурсовВалют = Новый Соответствие;
	ВалютаПроекта = Предприятие.ОсновнаяВалютаУчета;
	
	СтатьяКурсовыхРазниц = Справочники.СтатьиДоходовРасходов.КурсовыеРазницы;
	
	Для каждого СтрокаОстатка Из ВалютныеОстатки Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаОстатка.Валюта) Тогда
			СвойстваСчета = УправленческийУчетПовтИсп.ПолучитьСвойстваСчета(СтрокаОстатка.Счет);
			Сообщить("Ошибка переоценки валютных счетов.Обнаружены остатки по валютным счетам без указания валюты. Переоценка остатка не производится." + Символы.ПС + "- счет: " + СтрокаОстатка.Счет + " <"+ СтрокаОстатка.Счет.Наименование +">");
			
			Для НомерСубконто = 1 по 3 Цикл
				
				Если СвойстваСчета["ВидСубконто" + НомерСубконто] = Неопределено
					ИЛИ СвойстваСчета["ВидСубконто" + НомерСубконто + "ТолькоОбороты"] Тогда
					Продолжить;
				КонецЕсли;
				
				Сообщить( "	- субконто <" + СвойстваСчета["ВидСубконто" + НомерСубконто + "Наименование"] + "> : """ 
					+ СтрокаОстатка["Субконто" + НомерСубконто] + """");
				КонецЦикла;
				
			Сообщить("Валютный остаток: " + Формат(СтрокаОстатка.ВалютнаяСуммаОстаток, "ЧЦ=15; ЧДЦ=2; ЧН=-") 
				+ " , рублевый остаток: " + Формат(СтрокаОстатка.СуммаОстаток, "ЧЦ=15; ЧДЦ=2; ЧН=-") + "Рекомендуется указать валюту в проводках.");	
			Продолжить;		
		КонецЕсли; 
		
		ЗначениеСвойства = сабОбщегоНазначения.ПолучитьЗначениеСвойства(Предприятие, ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПлательщикПоЛичнымПроектам);
		
		Если ЗначениеСвойства = Неопределено Тогда
			ПлательщикПоЛичнымПроектам = Ложь;
		Иначе 
			ПлательщикПоЛичнымПроектам = ЗначениеСвойства;
		КонецЕсли;
		
		ПереоцениваютсяРубли = Ложь;
		
		СтруктураКурса = КэшКурсовВалют[СтрокаОстатка.Валюта];
		
		Если СтруктураКурса = Неопределено Тогда
			СтруктураКурса = РегистрыСведений.КурсыВалют.СрезПоследних(Дата, Новый Структура("Валюта, Валюта2", СтрокаОстатка.Валюта, ВалютаПроекта))[0];
			КэшКурсовВалют.Вставить(СтрокаОстатка.Валюта, СтруктураКурса);
		КонецЕсли;
		
	    ОстатокВал = СтрокаОстатка.ВалютнаяСуммаОстаток;
		Остаток    = СтрокаОстатка.СуммаОстаток;
		
		// закомментирован неоптимальный код {
		//Если ПлательщикПоЛичнымПроектам И СтрокаОстатка.Счет = ПланыСчетов.Учетный._56 И ТипЗнч(СтрокаОстатка.Субконто1) = Тип("СправочникСсылка.Предприятия") И СтрокаОстатка.Валюта = СтрокаОстатка.Субконто1.ОсновнаяВалютаУчета Тогда
		//	КурсВал = сабРаботаСКурсамиВалют.ЗаполнитьДанныеЛокальногоКурсаДляВалюты(СтрокаОстатка.Валюта, Дата).Курс;
		//	РасчетныйОстаток = ПересчитатьИзВалютыВВалюту(Остаток, Константы.ВалютаРегламентированногоУчета, СтрокаОстатка.Валюта, 1, КурсВал, 1, СтруктураКурса.Кратность);
		//	ПереоцениваютсяРубли = Истина;
		//ИначеЕсли Предприятие.ОсновнаяВалютаУчета = УЧ_Сервер.НациональнаяВалюта() Или Не ЗначениеЗаполнено(Предприятие.ОсновнаяВалютаУчета) Тогда
		//	
		//	// обращение №3967
		//	Если СтрокаОстатка.Счет = ПланыСчетов.Учетный.Счет5002() И Дата < Дата(2016,03,31,00,00,00) Тогда
		//		КурсВал = сабРаботаСКурсамиВалют.ЗаполнитьДанныеЛокальногоКурсаДляВалюты(СтрокаОстатка.Валюта,Дата).ЛокальныйКурс;
		//	Иначе
		//		КурсВал = сабРаботаСКурсамиВалют.ЗаполнитьДанныеЛокальногоКурсаДляВалюты(СтрокаОстатка.Валюта,Дата).Курс;
		//	КонецЕсли;
		//	
		//	РасчетныйОстаток = ПересчитатьИзВалютыВВалюту(ОстатокВал, СтрокаОстатка.Валюта, Константы.ВалютаРегламентированногоУчета, КурсВал, 1, СтруктураКурса.Кратность, 1);
		//Иначе
		//	
		//	Если СтрокаОстатка.Валюта = УЧ_Сервер.НациональнаяВалюта() Тогда
		//		КурсВал = 1/сабРаботаСКурсамиВалют.ЗаполнитьДанныеЛокальногоКурсаДляВалюты(Предприятие.ОсновнаяВалютаУчета, Дата).Курс;
		//	Иначе	
		//		КурсВал = сабРаботаСКурсамиВалют.ПолучитьКроссКурс(СтрокаОстатка.Валюта, Предприятие.ОсновнаяВалютаУчета, Дата);
		//	КонецЕсли;
		//	
		//	РасчетныйОстаток = ОстатокВал * КурсВал;
		//КонецЕсли;
		//
		//Если ПереоцениваютсяРубли Тогда
		//	СуммаПереоценки = РасчетныйОстаток - ОстатокВал;
		//Иначе	
		//	СуммаПереоценки = РасчетныйОстаток - Остаток;
		//КонецЕсли;		
		// }
		
		КурсВал = сабРаботаСКурсамиВалют.ЗаполнитьДанныеЛокальногоКурсаДляВалюты(СтрокаОстатка.Валюта, ВалютаПроекта, Дата).Курс;
		РасчетныйОстаток = ОстатокВал * КурсВал;
		
		СуммаПереоценки = РасчетныйОстаток - Остаток;
		
		Если СуммаПереоценки = 0 Тогда
			Продолжить;		
		КонецЕсли; 
		
		Проводка = Движения.Учетный.Добавить();
		Проводка.Регистратор = Ссылка;
		Проводка.Период = Дата;
		Проводка.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
		Проводка.Предприятия = Предприятие;
		Проводка.Содержание = "Переоценка валютных остатков";
		
		СубконтоОст1 = УЧ_Сервер.ПолучитьСубконто(1, СтрокаОстатка.Счет.ПолучитьОбъект());
		СубконтоОст2 = УЧ_Сервер.ПолучитьСубконто(2, СтрокаОстатка.Счет.ПолучитьОбъект());
		
		Если СуммаПереоценки < 0 Тогда
			Проводка.СчетДт = СчетКурсовйРазницы;
			//Если Проводка.СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)) <> неопределено Тогда 
			//	Проводка.СубконтоДт.СтатьиДоходовРасходов = СтатьяКурсовыхРазниц;
			//	УЧ_Сервер.УстановитьСубконто(Проводка.СубконтоДт, СчетКурсовйРазницы , 1, Статья);
			Если СчетКурсовйРазницы = ПланыСчетов.Учетный._59_2 Тогда  
				УЧ_Сервер.УстановитьСубконто(Проводка.СубконтоДт, СчетКурсовйРазницы , 1, СтрокаОстатка.Субконто1);
			Иначе
				УЧ_Сервер.УстановитьСубконто(Проводка.СубконтоДт, СчетКурсовйРазницы , 1, Статья);
			КонецЕсли;
			
			Если СчетКурсовйРазницы = ПланыСчетов.Учетный._98_03 И (СубконтоОст1 = "Кассы" ИЛИ СубконтоОст1 = "Банковские счета") Тогда
				УЧ_Сервер.УстановитьСубконто(Проводка.СубконтоДт, СчетКурсовйРазницы, 1, СтрокаОстатка.Субконто1);
			ИначеЕсли СчетКурсовйРазницы = ПланыСчетов.Учетный._98_03 И (СубконтоОст2 = "Кассы" ИЛИ СубконтоОст2 = "Банковские счета") Тогда
				УЧ_Сервер.УстановитьСубконто(Проводка.СубконтоДт, СчетКурсовйРазницы, 2, СтрокаОстатка.Субконто2);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КорПодразделения) И Проводка.СчетДт.УчетПоПодразделениям Тогда 
				Проводка.ПодразделениеДт = КорПодразделения;	
			ИначеЕсли Проводка.СчетДт.УчетПоПодразделениям Тогда 
				Проводка.ПодразделениеДт = СтрокаОстатка.Подразделение;
			КонецЕсли;
			
			Проводка.СчетКт = СтрокаОстатка.Счет;
			
						
			УЧ_Сервер.УстановитьСубконто(Проводка.СубконтоКт, СтрокаОстатка.Счет , 1, СтрокаОстатка.Субконто1);
			УЧ_Сервер.УстановитьСубконто(Проводка.СубконтоКт, СтрокаОстатка.Счет , 2, СтрокаОстатка.Субконто2);
			
			Если Не ЗначениеЗаполнено(СтрокаОстатка.Субконто3) Тогда
				ТекСубконто3 = Справочники.Субконто.ПустаяСсылка();
			Иначе
				ТекСубконто3 = СтрокаОстатка.Субконто3;
			КонецЕсли;
			
			УЧ_Сервер.УстановитьСубконто(Проводка.СубконтоКт, СтрокаОстатка.Счет , 3, ТекСубконто3);
			
			Если Проводка.СчетКт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконто.СтатьиДДС) <> Неопределено и не ЗначениеЗаполнено(Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)]) Тогда 
				
				Если Проводка.СчетДт.Родитель = ПланыСчетов.Учетный.Счет98() Или Проводка.СчетДт = ПланыСчетов.Учетный.Счет98() Тогда
					Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.СтатьиДДС] = Предприятие.УчетнаяПолитика.КурсовыеРазницыНереализованнаяРасход;	
				Иначе
					Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.СтатьиДДС] = Предприятие.УчетнаяПолитика.КурсовыеРазницыРасход;		
				КонецЕсли;
				
		    КонецЕсли;

			
			Если Проводка.СчетКт.УчетПоПодразделениям Тогда 
				Проводка.ПодразделениеКт = СтрокаОстатка.Подразделение;
			КонецЕсли;
			
			//Если Проводка.СчетКт.УчетПоЦФО Тогда
			//	Проводка.ЦФО = Предприятие;
			//	Проводка.ПодразделениеЦФО = ?(ЗначениеЗаполнено(СтрокаОстатка.Подразделение), СтрокаОстатка.Подразделение, Предприятие.ВидДеятельности);
			//КонецЕсли;

			Проводка.ВалютаКт = СтрокаОстатка.Валюта;
			
			Если ПереоцениваютсяРубли Тогда
				Проводка.ВалютнаяСуммаКт = - СуммаПереоценки;
			Иначе
				Проводка.Сумма = - СуммаПереоценки;
			КонецЕсли;
			
			Проводка.Содержание = "Переоценка валюты " + СтрокаОстатка.Валюта + " на " + строка(Дата)+ ". Курс - " + КурсВал;
		Иначе 
			Проводка.СчетДт = СтрокаОстатка.Счет;
			Проводка.СчетКт = СчетКурсовйРазницы;
			
			УЧ_Сервер.УстановитьСубконто(Проводка.СубконтоДт, СтрокаОстатка.Счет, 1, СтрокаОстатка.Субконто1);
			УЧ_Сервер.УстановитьСубконто(Проводка.СубконтоДт, СтрокаОстатка.Счет, 2, СтрокаОстатка.Субконто2);
			
			Если Не ЗначениеЗаполнено(СтрокаОстатка.Субконто3) Тогда
				ТекСубконто3 = Справочники.Субконто.ПустаяСсылка();
			Иначе
				ТекСубконто3 = СтрокаОстатка.Субконто3;
			КонецЕсли;
			
			УЧ_Сервер.УстановитьСубконто(Проводка.СубконтоДт, СтрокаОстатка.Счет, 3, ТекСубконто3);
			
			Если Проводка.СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконто.СтатьиДДС) <> Неопределено и не ЗначениеЗаполнено(Проводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)]) Тогда 
			   
				Если Проводка.СчетКт.Родитель = ПланыСчетов.Учетный.Счет98() Или Проводка.СчетКт = ПланыСчетов.Учетный.Счет98() Тогда
					Проводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.СтатьиДДС] = Предприятие.УчетнаяПолитика.КурсовыеРазницыНереализованнаяДоход;	
				Иначе
					Проводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.СтатьиДДС] = Предприятие.УчетнаяПолитика.КурсовыеРазницыДоход;		
				КонецЕсли;
				
		   КонецЕсли;
		   
			Если Проводка.СчетДт.УчетПоПодразделениям Тогда 
				Проводка.ПодразделениеДт = СтрокаОстатка.Подразделение;
			КонецЕсли;
			
			//Если Проводка.СчетДт.УчетПоЦФО Тогда
			//	Проводка.ЦФО = Предприятие;
			//	Проводка.ПодразделениеЦФО = ?(ЗначениеЗаполнено(СтрокаОстатка.Подразделение), СтрокаОстатка.Подразделение, Предприятие.ВидДеятельности);
			//КонецЕсли;

			Проводка.ВалютаДт = СтрокаОстатка.Валюта;
			
			//Если Проводка.СчетКт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)) <> неопределено Тогда
			//	Проводка.СубконтоКт.СтатьиДоходовРасходов = СтатьяКурсовыхРазниц;
			//	УЧ_Сервер.УстановитьСубконто(Проводка.СубконтоКт, СчетКурсовйРазницы, 1, Статья);
			Если СчетКурсовйРазницы = ПланыСчетов.Учетный._59_2 Тогда
				УЧ_Сервер.УстановитьСубконто(Проводка.СубконтоКт, СчетКурсовйРазницы, 1, СтрокаОстатка.Субконто1);
			Иначе
				УЧ_Сервер.УстановитьСубконто(Проводка.СубконтоКт, СчетКурсовйРазницы, 1, Статья);
			КонецЕсли;
			
			Если СчетКурсовйРазницы = ПланыСчетов.Учетный._98_03 И (СубконтоОст1 = "Кассы" ИЛИ СубконтоОст1 = "Банковские счета") Тогда
				УЧ_Сервер.УстановитьСубконто(Проводка.СубконтоКт, СчетКурсовйРазницы, 1, СтрокаОстатка.Субконто1);
			ИначеЕсли СчетКурсовйРазницы = ПланыСчетов.Учетный._98_03 И (СубконтоОст2 = "Кассы" ИЛИ СубконтоОст2 = "Банковские счета") Тогда
				УЧ_Сервер.УстановитьСубконто(Проводка.СубконтоКт, СчетКурсовйРазницы, 2, СтрокаОстатка.Субконто2);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КорПодразделения) И Проводка.СчетКт.УчетПоПодразделениям Тогда 
				Проводка.ПодразделениеКт = КорПодразделения;
			ИначеЕсли Проводка.СчетКт.УчетПоПодразделениям Тогда 
				Проводка.ПодразделениеКт = СтрокаОстатка.Подразделение;
			КонецЕсли;
			
			Если ПереоцениваютсяРубли Тогда
				Проводка.ВалютнаяСуммаКт = СуммаПереоценки;
			Иначе
				Проводка.Сумма = СуммаПереоценки;
			КонецЕсли;
			
			Проводка.Содержание = "Переоценка валюты " + СтрокаОстатка.Валюта + " на " + строка(Дата)+ ". Курс - " + КурсВал;
		КонецЕсли;
		
		Если СчетКурсовйРазницы = ПланыСчетов.Учетный.Счет98() Тогда
			Движение = Движения.УЧ_ДоходыИРасходыБудПериодов.Добавить();
			
			Если СуммаПереоценки < 0 Тогда
				Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
				Движение.Сумма = - СуммаПереоценки;
			Иначе
				Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
				Движение.Сумма = СуммаПереоценки;
			КонецЕсли;
			
			Движение.Регистратор = Ссылка;
			Движение.Период = Дата;
			Движение.Предприятие = Предприятие;
			Движение.Подразделение = КорПодразделения;
			Движение.Валюта = СтрокаОстатка.Валюта;
			Движение.Субконто1 = СтрокаОстатка.Субконто1;
			Движение.Субконто2 = СтрокаОстатка.Субконто2;
			Движение.Субконто3 = СтрокаОстатка.Субконто3;
			Движение.Счет = СтрокаОстатка.Счет;
			Движение.СчетБудПериодов = СчетКурсовйРазницы;
			Движение.СтатьяБуд = Статья;
		КонецЕсли;
		
	КонецЦикла;
	
	СчетаПереоценки = ВалютныеОстатки.Скопировать();
	СчетаПереоценки.Свернуть("Счет");
	                                                                           
	Для Каждого СтрСчет Из СчетаПереоценки Цикл
		
		Если СтрСчет.Счет <> ПланыСчетов.Учетный._56 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗапросОбщОст = Новый Запрос;
		ЗапросОбщОст.Текст = "ВЫБРАТЬ
		                     |	ВЫБОР
		                     |		КОГДА УчетныйОстатки.Предприятия.ОсновнаяВалютаУчета = &ВалютаПредприятия
		                     |			ТОГДА УчетныйОстатки.СуммаРазвернутыйОстатокДт
		                     |		ИНАЧЕ ЕСТЬNULL(УчетныйОстатки.СуммаРазвернутыйОстатокДт * КурсыВалютСрезПоследних.Курс, 0)
		                     |	КОНЕЦ КАК СуммаРазвернутыйОстатокДт,
		                     |	ВЫБОР
		                     |		КОГДА УчетныйОстатки.Предприятия.ОсновнаяВалютаУчета = &ВалютаПредприятия
		                     |			ТОГДА УчетныйОстатки.СуммаРазвернутыйОстатокКт
		                     |		ИНАЧЕ ЕСТЬNULL(УчетныйОстатки.СуммаРазвернутыйОстатокКт * КурсыВалютСрезПоследних.Курс, 0)
		                     |	КОНЕЦ КАК СуммаРазвернутыйОстатокКт,
		                     |	УчетныйОстатки.Счет КАК Счет,
		                     |	УчетныйОстатки.Субконто1 КАК Субконто1
		                     |ИЗ
		                     |	РегистрБухгалтерии.Учетный.Остатки(&Граница, Счет В (&СчетаПереоценки), , ) КАК УчетныйОстатки
		                     |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Граница, БазоваяВалюта = &ВалютаПредприятия) КАК КурсыВалютСрезПоследних
		                     |		ПО УчетныйОстатки.Предприятия.ОсновнаяВалютаУчета = КурсыВалютСрезПоследних.Валюта
		                     |
		                     |ДЛЯ ИЗМЕНЕНИЯ
		                     |	РегистрБухгалтерии.Учетный.Остатки";
		ЗапросОбщОст.УстановитьПараметр("Граница",Новый Граница(КонецМесяца(Дата), ВидГраницы.Включая));
		ЗапросОбщОст.УстановитьПараметр("СчетаПереоценки", СтрСчет.Счет);		
		ЗапросОбщОст.УстановитьПараметр("ВалютаПредприятия", Предприятие.ОсновнаяВалютаУчета);
		
		РезультатОбщОст = ЗапросОбщОст.Выполнить(); 
		ТЗ_ОстаткиПоСчету = РезультатОбщОст.Выгрузить();
		ТЗ_ОстаткиПоСчету.Свернуть("Счет", "СуммаРазвернутыйОстатокДт, СуммаРазвернутыйОстатокКт");
		
		Если Не ТЗ_ОстаткиПоСчету.Количество() Тогда
			ИтогоДт = 0;
			ИтогоКт = 0;
		Иначе
			ИтогоДт = ТЗ_ОстаткиПоСчету[0].СуммаРазвернутыйОстатокДт;
			ИтогоКт = ТЗ_ОстаткиПоСчету[0].СуммаРазвернутыйОстатокКт;
		КонецЕсли;
		
		ТЗ_ПроводкиДокумента = Движения.Учетный.Выгрузить();		
		МассивСтрокДт = ТЗ_ПроводкиДокумента.НайтиСтроки(Новый Структура("СчетДт", СтрСчет.Счет));
		МассивСтрокКт = ТЗ_ПроводкиДокумента.НайтиСтроки(Новый Структура("СчетКт", СтрСчет.Счет));
		
		Для Инд = 0 По МассивСтрокДт.Количество() - 1 Цикл 
			ИтогоДт = ИтогоДт + МассивСтрокДт[Инд].Сумма;
		КонецЦикла;
		
		Для Инд = 0 По МассивСтрокКт.Количество() - 1 Цикл 
			ИтогоКт = ИтогоКт + МассивСтрокКт[Инд].Сумма;
		КонецЦикла;
		
		РазностьДтКт = ИтогоДт - ИтогоКт;
		МодульРазностиДтКт = Окр(?((ИтогоДт - ИтогоКт) < 0, -(ИтогоДт - ИтогоКт), (ИтогоДт - ИтогоКт)), 2);
		
		Если МодульРазностиДтКт >= 0.01 Тогда 
			
			ИндексСтрокиСчетДт = Неопределено;
			ИндексСтрокиСчетКт = Неопределено;
			
			Для Инд = 0 По Движения.Учетный.Количество() - 1 Цикл
				
				Если МодульРазностиДтКт = 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если РазностьДтКт < 0 Тогда // кредит больше дебета, увеличиваем дебет					
					
					Если Движения.Учетный[Инд].СчетДт = СтрСчет.Счет Тогда
						
						Если Движения.Учетный[Инд].Сумма < 0 Тогда
							Движения.Учетный[Инд].Сумма = Движения.Учетный[Инд].Сумма - 0.01;
						Иначе
							Движения.Учетный[Инд].Сумма = Движения.Учетный[Инд].Сумма + 0.01;
						КонецЕсли;
						
						ИндексСтрокиСчетДт = Инд;	
						МодульРазностиДтКт = МодульРазностиДтКт - 0.01;
					КонецЕсли;
										
				Иначе // дебет больше кредита, увеличиваем кредит	
					
					Если Движения.Учетный[Инд].СчетКт = СтрСчет.Счет Тогда
						
						Если Движения.Учетный[Инд].Сумма < 0 Тогда
							Движения.Учетный[Инд].Сумма = Движения.Учетный[Инд].Сумма - 0.01;
						Иначе
							Движения.Учетный[Инд].Сумма = Движения.Учетный[Инд].Сумма + 0.01;
						КонецЕсли;
						
						ИндексСтрокиСчетКт = Инд;
						МодульРазностиДтКт = МодульРазностиДтКт - 0.01;
					КонецЕсли;
						
				КонецЕсли;
								
			КонецЦикла;
			
			Если МодульРазностиДтКт > 0 Тогда
				
				Если РазностьДтКт < 0 Тогда // кредит больше дебета, увеличиваем дебет
					
					Если Движения.Учетный[ИндексСтрокиСчетДт].Сумма < 0 Тогда
						Движения.Учетный[ИндексСтрокиСчетДт].Сумма = Движения.Учетный[ИндексСтрокиСчетДт].Сумма - МодульРазностиДтКт;
					Иначе
						Движения.Учетный[ИндексСтрокиСчетДт].Сумма = Движения.Учетный[ИндексСтрокиСчетДт].Сумма + МодульРазностиДтКт;
					КонецЕсли;
					
				Иначе // дебет больше кредита, увеличиваем кредит
					
					Если Движения.Учетный[ИндексСтрокиСчетКт].Сумма < 0 Тогда
						Движения.Учетный[ИндексСтрокиСчетКт].Сумма = Движения.Учетный[ИндексСтрокиСчетКт].Сумма - МодульРазностиДтКт;
					Иначе
						Движения.Учетный[ИндексСтрокиСчетКт].Сумма = Движения.Учетный[ИндексСтрокиСчетКт].Сумма + МодульРазностиДтКт;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
				
	КонецЦикла;
	
	Движения.Учетный.Записать(Истина);
	
КонецПроцедуры

// Эта функция пересчитывает сумму из валюты ВалютаНач по курсу ПоКурсуНач 
// в валюту ВалютаКон по курсу ПоКурсуКон
//
// Параметры:      
//	Сумма          - сумма, которую следует пересчитать;
//	ВалютаНач      - ссылка на элемент справочника Валют;
//                   определяет валюту, из которой надо пересчитывать;
//	ВалютаКон      - ссылка на элемент справочника Валют;
//                   определяет валюту, в которую надо пересчитывать;
// 	ПоКурсуНач     - курс валюты, из которой надо пересчитать;
// 	ПоКурсуКон     - курс валюты, в которую надо пересчитать;
// 	ПоКратностьНач - кратность валюты, из которой надо пересчитать (по умолчанию = 1);
// 	ПоКратностьКон - кратность валюты, в которую надо пересчитать  (по умолчанию = 1);
//
// Возвращаемое значение: 
//  Сумма, пересчитанная в другую валюту
//
Функция ПересчитатьИзВалютыВВалюту(Сумма, ВалютаНач, ВалютаКон, ПоКурсуНач, ПоКурсуКон,
		ПоКратностьНач = 1, ПоКратностьКон = 1) Экспорт

	Если (ВалютаНач = ВалютаКон) Тогда 	// Считаем, что пересчет не нужен.
		Возврат Сумма;
	ИначеЕсли (ПоКурсуНач = ПоКурсуКон) И (ПоКратностьНач = ПоКратностьКон) Тогда 
		Возврат Сумма;
	КонецЕсли;

	Если ПоКурсуНач = 0 Тогда
		ПоКурсуНач = 1;
	КонецЕсли;
	Если ПоКурсуКон = 0 Тогда
		ПоКурсуКон = 1;
	КонецЕсли;
	Если ПоКратностьНач = 0 Тогда
		ПоКратностьНач = 1;
	КонецЕсли;
	Если ПоКратностьКон = 0 Тогда
		ПоКратностьКон = 1;
	КонецЕсли;
	
	Результат = Окр((Сумма * ПоКурсуНач * ПоКратностьКон) / (ПоКурсуКон * ПоКратностьНач), 2);
	Возврат Результат;

КонецФункции

Процедура ОбработкаУдаленияПроведения(Отказ)
	РучнаяКорректировка = Ложь;
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	РучнаяКорректировка = Ложь;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	//из подписки на событие
	БюджетныйНаСервере.ДокументыПередЗаписьюПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	БюджетныйНаСервере.ПриУстановкеНовогоНомераПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	сабОбщегоНазначенияБУХ.сабОбработкиЗаполненияУчпетныхДокументовОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
КонецПроцедуры
