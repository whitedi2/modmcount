//Процедуры и функции ФОРМЫ
#Область ПроцедурыИфункцииФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Предприятие = Параметры.Предприятие;
	
	Попытка 
		Месяцы = Параметры.Месяцы;
	Исключение
		Месяц = Параметры.Месяц;
	КонецПопытки;	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//Вставить содержимое обработчика
	Если ВладелецФормы.Имя = "Инвестиции" Тогда 
		Элементы.ПримерБюджетПР.Видимость = Ложь;
		Элементы.ПримерБюджетОфисКорректировка.Видимость = Ложь;
		Элементы.ПримерБюджетОфисБДР.Видимость = Ложь;
		Элементы.Алгоритм_загрузки_БДР.Видимость = Ложь;
		Элементы.Алгоритм_загрузки_корректировки.Видимость = Ложь;
		Элементы.Алгоритм_загрузки_ПР.Видимость = Ложь;
		
	ИначеЕсли   
		ВладелецФормы.Имя = "ПР" Тогда 
		Элементы.ПримерБюджетИнвестиций.Видимость = Ложь;
		Элементы.ПримерБюджетОфисКорректировка.Видимость = Ложь;
		Элементы.ПримерБюджетОфисБДР.Видимость = Ложь;
		Элементы.Алгоритм_загрузки_БДР.Видимость = Ложь;
		Элементы.Алгоритм_загрузки_инвестиций.Видимость = Ложь;
		Элементы.Алгоритм_загрузки_корректировки.Видимость = Ложь;
				
	ИначеЕсли 
		ВладелецФормы.Имя = "ЗатратыКП"	Тогда 								 //или ВладелецФормы.Имя = "Прочие90" Тогда   ВладелецФормы.Имя = "Затраты" или 
		Элементы.ПримерБюджетИнвестиций.Видимость = Ложь;
		Элементы.ПримерБюджетПР.Видимость = Ложь;
		Элементы.ПримерБюджетОфисБДР.Видимость = Ложь;
		Элементы.Алгоритм_загрузки_инвестиций.Видимость = Ложь;
		Элементы.Алгоритм_загрузки_ПР.Видимость = Ложь;
		Элементы.Алгоритм_загрузки_БДР.Видимость = Ложь;
				
	ИначеЕсли 
		ВладелецФормы.Имя = "Затраты" Тогда 									//или ВладелецФормы.Имя = "Прочие90" Тогда   
		Элементы.ПримерБюджетИнвестиций.Видимость = Ложь;
		Элементы.ПримерБюджетПР.Видимость = Ложь;
		Элементы.ПримерБюджетОфисКорректировка.Видимость = Ложь;
		Элементы.Алгоритм_загрузки_инвестиций.Видимость = Ложь;
		Элементы.Алгоритм_загрузки_ПР.Видимость = Ложь;
		Элементы.Алгоритм_загрузки_корректировки.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	
	Если ВладелецФормы.Имя = "Инвестиции" Тогда 
		ЗагрузкаИнвестиций();
	ИначеЕсли 
		ВладелецФормы.Имя = "ПР" Тогда 
		ЗагрузкаПР();
	ИначеЕсли 
		ВладелецФормы.Имя = "Затраты" или ВладелецФормы.Имя = "ЗатратыКП" или ВладелецФормы.Имя = "Прочие90" Тогда 
		ЗагрузкаЗатрат();
	ИначеЕсли 
		ВладелецФормы.Имя = "БюджетПродаж" Тогда 
		
		ЗагрузкаExcel();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПутьКФайлу = БюджетныйНаКлиенте.ВыбратьФайлExcel();
	
КонецПроцедуры

&НаКлиенте
Процедура Рассчитать(Команда)
	
	Если НЕ ЗначениеЗаполнено(ПутьКФайлу) Тогда
		Сообщить("Не указан путь к файлу."); 	
	Иначе  	
		
		//XLSОбъект = Новый COMОбъект("Excel.Application");
		//XLSОбъект.Visible       = Ложь;
		//XLSОбъект.DisplayAlerts = Ложь;
		//
		//Попытка
		//	Book = XLSОбъект.Workbooks.Open(ПутьКФайлу, , Истина);
		//Исключение
		//	Сообщить ("Проблемы с подключением к Excel" );
		//КонецПопытки;
		//
		//Лист = Book.Sheets(1);
		//
		////Получааем количество строк в книге
		//СтрокаОкончания = Лист.UsedRange.Rows.Count;
		
		Данные = Неопределено;
		
		Файл = Новый ДвоичныеДанные(ПутьКФайлу);
		Адрес = ПоместитьВоВременноеХранилище(Файл, ЭтаФорма.УникальныйИдентификатор);
		
		ЧислоСтрок = 0;
		Файл1 = Новый Файл(ПутьКФайлу);
		РасширениеФайла = Файл1.Расширение;
		ТабличныйДокумент = Новый ТабличныйДокумент;
		СтрокаОкончания = КоличествоСтрокВФайле(Адрес,РасширениеФайла);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//ЗагрузкаExel"БюджетПродаж"
#Область ЗагрузкаExel

&НаКлиенте
Процедура ЗагрузкаExcel()
	
	Если НЕ ЗначениеЗаполнено(ПутьКФайлу) ИЛИ Не ЗначениеЗаполнено(СтрокаНачала) Или НЕ ЗначениеЗаполнено(СтрокаОкончания) Тогда
		Сообщить("Не указан путь, либо параметры начала и окончания загрузки."); 	
	Иначе  	
		
		//XLSОбъект = Новый COMОбъект("Excel.Application");
		//XLSОбъект.Visible       = Ложь;
		//XLSОбъект.DisplayAlerts = Ложь;
		//
		//Попытка
		//	Book = XLSОбъект.Workbooks.Open(ПутьКФайлу, , Истина);
		//Исключение
		//	Сообщить ("Проблемы с подключением к Excel" );
		//КонецПопытки;
		//
		//Лист = Book.Sheets(1);
		//
		////Получааем количество строк в книге
		////ВсегоСтрок = Лист.UsedRange.Rows.Count;
		//
		//Область = Лист.Range(Лист.Cells(СтрокаНачала,1), Лист.Cells(СтрокаОкончания,40));	
		//
		////получаем массив колонок)))
		//Данные = Область.Value.Выгрузить();
		////ДанныеКонтрагент = Данные[6];
		
		//!!!!!
		Данные = Неопределено;
		Файл = Новый ДвоичныеДанные(ПутьКФайлу);
		Адрес = ПоместитьВоВременноеХранилище(Файл, ЭтаФорма.УникальныйИдентификатор);
		
	    Файл1 = Новый Файл(ПутьКФайлу);
		РасширениеФайла = Файл1.Расширение;
		
		Данные = ПрочитатьДанныеФайла(Адрес, 40, РасширениеФайла); 		
		//!!!!!
		
		ТЧ = ПолучитьУпрФорму(ВладелецФормы).Объект[ВладелецФормы.Имя];
		
		ЗаполнитьПредприятияСервер();
		
		Для ТекСтрока = 0 по СтрокаОкончания - СтрокаНачала Цикл
			
			ТекКол = ?(ПустаяСтрока(Данные[11][ТекСтрока]), 0, Число(Данные[11][ТекСтрока]));
			ТекПостл = ?(ПустаяСтрока(Данные[29][ТекСтрока]), 0, Число(Данные[29][ТекСтрока]));
			ДЗНач = ?(ПустаяСтрока(Данные[9][ТекСтрока]), 0, Число(Данные[9][ТекСтрока]));
			
			Если НЕ ТекКол И НЕ ТекПостл И НЕ ДЗНач Тогда
				Продолжить;
			КонецЕсли;
			
			
			ПредприятиеЗагрузка = НайтиПредприятие(Строка(Данные[1][ТекСтрока]));
			Если НЕ Предприятие = ПредприятиеЗагрузка Тогда
				Продолжить;
			КонецЕсли;
			
			Контрагент = НайтиКонтрагента(Строка(Данные[5][ТекСтрока]), Предприятие);
			Подразделение = НайтиПодразделение(Строка(Данные[6][ТекСтрока]), Предприятие);
			Номенклатура = НайтиНоменклатуру(Строка(Данные[7][ТекСтрока]), Предприятие);
			
			Если ПустаяСтрока(Подразделение) Тогда
				Сообщить("Подразделение " + Строка(Данные[6][ТекСтрока]) + " не найдено");
			КонецЕсли;
			
			Если НЕ БюджетныйНаСервере.ВернутьРеквизит(Предприятие, "ПроизводственноеПредприятие") = Ложь Тогда
				Если ПустаяСтрока(Номенклатура) Тогда
					Сообщить("Номенклатура " + Строка(Данные[7][ТекСтрока]) + " не найдена");
				КонецЕсли;
			КонецЕсли;			
			
			////добавляем запись в табличную часть
			СтрокаТЧ = ТЧ.Добавить();
			СтрокаТЧ.Контрагент = Контрагент;
			СтрокаТЧ.Подразделение = Подразделение;
			СтрокаТЧ.Номенклатура = Номенклатура;
			СтрокаТЧ.ДЗНачало = Данные[9][ТекСтрока];
			СтрокаТЧ.Количество = Данные[11][ТекСтрока];
			
			Попытка
				Данные[13][ТекСтрока] = Число(Данные[13][ТекСтрока]);
			Исключение
				Данные[13][ТекСтрока] = 0;
			КонецПопытки;
			
			Попытка
				Данные[14][ТекСтрока] = Число(Данные[14][ТекСтрока]);
			Исключение
				Данные[14][ТекСтрока] = 0;
			КонецПопытки;
			
			Попытка
				Данные[17][ТекСтрока] = Число(Данные[17][ТекСтрока]);
			Исключение
				Данные[17][ТекСтрока] = 0;
			КонецПопытки;
			
			Попытка
				Данные[18][ТекСтрока] = Число(Данные[18][ТекСтрока]);
			Исключение
				Данные[18][ТекСтрока] = 0;
			КонецПопытки; 
			
			
			
			
			//Если Нрег(Данные[20][ТекСтрока]) = "сверх цены" Тогда
			//	Цена = Данные[13][ТекСтрока] - Данные[14][ТекСтрока] ;
			//Иначе
			//	Цена = Данные[13][ТекСтрока] - Данные[17][ТекСтрока] - Данные[18][ТекСтрока] - Данные[14][ТекСтрока];
			//КонецЕсли;
			
			СтрокаТЧ.Цена = Данные[13][ТекСтрока];
			СтрокаТЧ.Верх = Данные[14][ТекСтрока];
			СтрокаТЧ.ЖД   = Данные[17][ТекСтрока];
			СтрокаТЧ.Авто = Данные[18][ТекСтрока];
			СтрокаТЧ.ВозмещениеТр  = НРег(Данные[19][ТекСтрока]);
			СтрокаТЧ.ВозмещениеТр2 = НРег(Данные[20][ТекСтрока]);
			СтрокаТЧ.Предоплата = Данные[27][ТекСтрока];
			СтрокаТЧ.Отсрочка = Данные[28][ТекСтрока];
			СтрокаТЧ.ПоступлениеДС = Данные[29][ТекСтрока];
			//СтрокаТЧ.ТекущиеДанные.Покупной = Транзит(Данные[29][ТекСтрока]);
			СтрокаТЧ.СтатьяБДДС = СтатьяДДС(Данные[31][ТекСтрока]);
			СтрокаТЧ.ЦенаЗакупки = Данные[15][ТекСтрока];
			
			Если Данные[30][ТекСтрока] = "Собств. пр-ва" Тогда
				СтрокаТЧ.Покупной = Транзит("транзит");
			ИначеЕсли Данные[30][ТекСтрока] = "Закупной" Тогда
				СтрокаТЧ.Покупной = Транзит("закупной");
			ИначеЕсли Данные[30][ТекСтрока] = "Закуп. товар" Тогда
				СтрокаТЧ.Покупной = Транзит("Закуп товар");
			ИначеЕсли Данные[30][ТекСтрока] = "Закуп. билет" Тогда
				СтрокаТЧ.Покупной = Транзит("Закуп билет");
			ИначеЕсли Данные[30][ТекСтрока] = "Закуп. тур. услуга" Тогда
				СтрокаТЧ.Покупной = Транзит("Закуп тур услуга");	
			КонецЕсли;	
			
			СтрокаТЧ.Месяц = Дата(СокрЛП(Данные[0][ТекСтрока]));
			
			
			
			//счСтроки = счСтроки + 1;
		КонецЦикла;
		
		//XLSОбъект.Application.Quit();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтатьяДДС(КодСтатьи)
	Возврат Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду(КодСтатьи);
КонецФункции // ()

&НаСервереБезКонтекста
Функция Транзит(Признак)
	Если Признак = "транзит" Тогда
		Возврат Перечисления.Д_ПокупнойСпирт.Транзитный;
	иначеЕсли Признак = "закупной" Тогда
		Возврат Перечисления.Д_ПокупнойСпирт.Закупной;
	ИначеЕсли Признак = "Закуп товар" Тогда
		Возврат Перечисления.Д_ПокупнойСпирт.ЗакупТовар
	ИначеЕсли Признак = "Закуп билет" Тогда
		Возврат Перечисления.Д_ПокупнойСпирт.ЗакупБилет
	ИначеЕсли Признак = "Закуп тур услуга" Тогда
		Возврат Перечисления.Д_ПокупнойСпирт.ЗакупТурУслуга
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции // ()

&НаСервере
Функция НайтиКонтрагента(Наименование, Предприятие)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Предприятия.Предприятие В(&Предприятие)
	|	И Контрагенты.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		УжеСуществует = Выборка.Ссылка;
	Иначе
		УжеСуществует = Наименование;
	КонецЕсли;
	Возврат УжеСуществует;
КонецФункции

&НаСервере
Функция НайтиПредприятие(Наименование)
	ОтобранныеПП = Предприятия.НайтиСтроки(Новый Структура("Наименование", Наименование));  
	
	Для каждого ТекПП Из ОтобранныеПП Цикл
		Возврат ТекПП.Предприятие;	
	КонецЦикла; 
	
	Возврат Справочники.Предприятия.ПустаяСсылка();
КонецФункции

&НаСервере
Процедура ЗаполнитьПредприятияСервер()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Предприятия.Ссылка КАК Предприятие,
	|	Предприятия.Наименование
	|ИЗ
	|	Справочник.Предприятия КАК Предприятия";
	
	
	Результат = Запрос.Выполнить();
	Предприятия.Загрузить(Результат.Выгрузить());
	
КонецПроцедуры

&НаСервере
Функция НайтиПодразделение(Подразделение, Предприятие)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВидыДеятельности.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК ВидыДеятельности
	|ГДЕ
	|	ВидыДеятельности.ПометкаУдаления = ЛОЖЬ
	|	И ВидыДеятельности.Предприятие = &Предприятие
	|	И ВидыДеятельности.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	Запрос.УстановитьПараметр("Наименование", Подразделение);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ТекПодр = Выборка.Ссылка;
	Иначе
		ТекПодр = Справочники.СтруктураПредприятия.ПустаяСсылка();
	КонецЕсли;
	Возврат ТекПодр;
КонецФункции

&НаСервере
Функция КоличествоСтрокВФайле(Адрес, Расширение)
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);
	
	ПутьКФайлуСервер = КаталогВременныхФайлов() + "123." + Расширение;//.xlsx"; //для примера...
	ВременныйФайл = Новый Файл(ПутьКФайлуСервер);
	Если ВременныйФайл.Существует() Тогда
		УдалитьФайлы(ПутьКФайлуСервер);
	КонецЕсли;	
	ДвоичныеДанные.Записать(ПутьКФайлуСервер);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Попытка
		// Выполняется долго на больших файлах.
		ТабличныйДокумент.Прочитать(ПутьКФайлуСервер, СпособЧтенияЗначенийТабличногоДокумента.Значение);    // СпособЧтенияЗначенийТабличногоДокумента - новый параметр платформы 8.3.6. Второе значение "Текст".
			
		СписокЛистов = Новый СписокЗначений;
		
		Для Каждого ОбластьТД ИЗ ТабличныйДокумент.Области Цикл
			СписокЛистов.Добавить(ОбластьТД.Имя);
		КонецЦикла;
		
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Внимание);
		Возврат 0;
	КонецПопытки;
	
	Данные = ТабличныйДокумент.ПолучитьОбласть(СписокЛистов[0].Значение);
	
	Возврат Данные.ПолучитьРазмерОбластиДанныхПоВертикали();
	
КонецФункции

#КонецОбласти

//ЗагрузкаЗатрат
#Область ЗагрузкаЗатрат 

&НаКлиенте
Процедура ЗагрузкаЗатрат()
	//Перем Месяц;
	Если НЕ ЗначениеЗаполнено(ПутьКФайлу) ИЛИ Не ЗначениеЗаполнено(СтрокаНачала) Или НЕ ЗначениеЗаполнено(СтрокаОкончания) Тогда
		Сообщить("Не указан путь, либо параметры начала и окончания загрузки."); 	
	Иначе  		
			
		//XLSОбъект = Новый COMОбъект("Excel.Application");
		//XLSОбъект.Visible       = Ложь;
		//XLSОбъект.DisplayAlerts = Ложь;
		//
		//Попытка
		//	Book = XLSОбъект.Workbooks.Open(ПутьКФайлу, , Истина);
		//Исключение
		//	Сообщить ("Проблемы с подключением к Excel" );
		//КонецПопытки;
		//
		//Лист = Book.Sheets(1);
		//
		////Получааем количество строк в книге
		////ВсегоСтрок = Лист.UsedRange.Rows.Count;
		//
		//Область = Лист.Range(Лист.Cells(СтрокаНачала,1), Лист.Cells(СтрокаОкончания,11));	
		//
		////получаем массив колонок)))
		//Данные = Область.Value.Выгрузить();
		////ДанныеКонтрагент = Данные[6];
		
		//!!!!!
		Данные = Неопределено;
		Файл = Новый ДвоичныеДанные(ПутьКФайлу);
		Адрес = ПоместитьВоВременноеХранилище(Файл, ЭтаФорма.УникальныйИдентификатор);
		
		Файл1 = Новый Файл(ПутьКФайлу);
		РасширениеФайла = Файл1.Расширение;
		
		Данные = ПрочитатьДанныеФайла(Адрес, 11, РасширениеФайла); 		
		//!!!!!

		ТЧ = ВладелецФормы;
		
		Для ТекСтрока = 0 по СтрокаОкончания - СтрокаНачала Цикл
			
			
			////добавляем запись в табличную часть
			КодСтатьи = Данные[1][ТекСтрока];
			
			ТЧ.ДобавитьСтроку();
			ТЧ.ТекущиеДанные.Основание = Данные[6][ТекСтрока];
			ТЧ.ТекущиеДанные.Месяц = Месяц;
			Попытка
				Данные[2][ТекСтрока] = Число(Данные[2][ТекСтрока]);
			Исключение
				Данные[2][ТекСтрока] = 0;
			КонецПопытки;
			Попытка
				Данные[3][ТекСтрока] = Число(Данные[3][ТекСтрока]);
			Исключение
				Данные[3][ТекСтрока] = 0;
			КонецПопытки;
			Если ТЧ.Имя = "Прочие90" Тогда
				ТЧ.ТекущиеДанные.СуммаФР   = Данные[2][ТекСтрока];
				ТЧ.ТекущиеДанные.СуммаБДДС = Данные[3][ТекСтрока];
			Иначе 
				ТЧ.ТекущиеДанные.СуммаСеб  = Данные[2][ТекСтрока];
				ТЧ.ТекущиеДанные.СуммаБДДС = Данные[3][ТекСтрока];
			КонецЕсли;
			
			//Подразделение
			ЦФО = ПолучитьЦФО(СокрЛП(Строка(Данные[4][ТекСтрока])), ТЧ.ТекущиеДанные.НомерСтроки, "ЦФО");
			Подразделение = ПолучитьПодразделениеЗагрузкаЗатрат(СокрЛП(Строка(Данные[5][ТекСтрока])), ЦФО, ТЧ.ТекущиеДанные.НомерСтроки, "Подразделение"); 
			
			Если ТЧ.Имя = "ЗатратыКП" Тогда
				ТЧ.ТекущиеДанные.ВидДеятельности = Подразделение;
				ТЧ.ТекущиеДанные.ЦФО = ЦФО;
			ИначеЕсли ТЧ.Имя = "Прочие90" Тогда
				ТЧ.ТекущиеДанные.Подразделение = Подразделение;
			Иначе
				ТЧ.ТекущиеДанные.Подразделение = Подразделение;
				ТЧ.ТекущиеДанные.ЦФО = ЦФО;
			КонецЕсли;
			
			//Статья затрат
			СтатьяБДДС = НайтиСтатьюВБДДС(КодСтатьи);			
			Если ПустаяСтрока(СтатьяБДДС) Тогда
				СтатьяСебестоимости = НайтиСтатьюССПоКоду(КодСтатьи);
				Если ПустаяСтрока(СтатьяСебестоимости) Тогда
					Сообщить ("Не найдена статья по коду " + КодСтатьи + " в справочнике СтатьиДДС и С/с (строка " + ТЧ.ТекущиеДанные.НомерСтроки + ")");
					СтатьяБДДС = "";
				КонецЕсли;
			иначе
				СтатьяСебестоимости = НайтиСтатьюВСебестоимости(СтатьяБДДС);
				НомерПризнака = 1;
				Если ПустаяСтрока(СтатьяСебестоимости) Тогда
					СтатьяСебестоимости = НайтиСтатьюВФР(СтатьяБДДС);
					НомерПризнака = 2;
					Если ПустаяСтрока(СтатьяСебестоимости) Тогда
						сообщить("Не найдено соответствие статьи затрат со статьей БДДС по коду " + КодСтатьи + " (строка " + ТЧ.ТекущиеДанные.НомерСтроки + ")");
						СтатьяСебестоимости = "";
					КонецЕсли;
				КонецЕсли; 
			КонецЕсли;
			Если ТЧ.Имя = "Прочие90" Тогда
				ТЧ.ТекущиеДанные.Статья = СтатьяСебестоимости;
			Иначе 	
				ТЧ.ТекущиеДанные.СтатьяЗатрат = СтатьяСебестоимости;
			КонецЕсли;
			
			//Номенклатура	
			Если НЕ БюджетныйНаСервере.ВернутьРеквизит(Предприятие, "ПроизводственноеПредприятие") = Ложь Тогда 
				Номенклатура = НайтиНоменклатуру(Строка(Данные[9][ТекСтрока]), ЦФО);
				Если ПустаяСтрока(Номенклатура) Тогда
					Сообщить("Номенклатура " + Строка(Данные[9][ТекСтрока]) + " не найдена");
				КонецЕсли;
			КонецЕсли;		
			ТЧ.ТекущиеДанные.Номенклатура = Номенклатура;
			
			//Прочее
			Если Не (ТЧ.Имя = "ЗатратыКП" Или ТЧ.Имя = "Прочие90") Тогда
				ТЧ.ТекущиеДанные.Признак = ПолучитьПризнак(НомерПризнака);
			КонецЕсли;	
			
			ТЧ.ТекущиеДанные.СтатьяБДДС = СтатьяБДДС;
			Попытка
				ТЧ.ТекущиеДанные.Месяц = Дата(СокрЛП(Данные[0][ТекСтрока]));
			Исключение
				Сообщить("Выбран некорректный месяц!");
			КонецПопытки;
			ТЧ.ТекущиеДанные.Заявитель = ПолучитьЦФО(СокрЛП(Строка(Данные[7][ТекСтрока])), ТЧ.ТекущиеДанные.НомерСтроки, "Предприятие-заявитель");
			ТЧ.ТекущиеДанные.ПодразделениеЗаявителя = ПолучитьПодразделениеЗагрузкаЗатрат(СокрЛП(Строка(Данные[8][ТекСтрока])), ТЧ.ТекущиеДанные.Заявитель, ТЧ.ТекущиеДанные.НомерСтроки, "Подразделение заявителя");
			
			Если ТЧ.Имя = "Прочие90" Тогда
				//задел под Сашка
			Иначе
				НаЕд = ?(СокрЛП(НРег(Данные[10][ТекСтрока])) = "да", Истина, Ложь);
				ТЧ.ТекущиеДанные.НаЕдиницу = НаЕд;
			КонецЕсли;
			
			//ТЧ.ТекущиеДанные.Деятельность = ПолучитьДеятельность(ЦФО);
			
		КонецЦикла;
		
		//XLSОбъект.Application.Quit();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЦФО(ЦФО, НомерСтроки, Кто)
	//ЦФО2 = Справочники.Предприятия.НайтиПоНаименованию(СокрЛП(ЦФО), 1);
	ЦФО2 = БюджетныйНаСервере.СправочникНайтиПоНаименованию("Предприятия",СокрЛП(ЦФО),1);
	Если ПустаяСтрока(ЦФО2) Тогда
		Сообщить(Кто + " " + ЦФО + " не найден в справочнике Предприятия (строка " + НомерСтроки + ")");	
	КонецЕсли;
	Возврат ЦФО2;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПодразделениеЗагрузкаЗатрат(Подразделение, ЦФО, НомерСтроки, Кто)								   
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВидыДеятельности.Ссылка
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК ВидыДеятельности
	|ГДЕ
	|	ВидыДеятельности.Наименование = &Наименование
	|	И ВидыДеятельности.Предприятие = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", ЦФО);
	Запрос.УстановитьПараметр("Наименование", Подразделение);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Возврат Выборка.Ссылка;		   																									 					
		
	КонецЦикла;
	
	Если НЕ Выборка.Количество() Тогда
		Сообщить(Кто + " " + Подразделение + " не найдено в справочнике Подразделений (строка " + НомерСтроки + ")");	
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДеятельность(ЦФО)
	Возврат ЦФО.ВидДеятельности;	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПризнак(Номер)
	Если Номер = 1 Тогда
		возврат Перечисления.Д_ПризнакСписания.Себестоимость;
	иначе
		возврат Перечисления.Д_ПризнакСписания.ФинРез;
	КонецЕсли;  
КонецФункции

#КонецОбласти

//ЗагрузкаПР
#Область ЗагрузкаПР

&НаКлиенте
Процедура ЗагрузкаПР();
	
	Если НЕ ЗначениеЗаполнено(ПутьКФайлу) ИЛИ Не ЗначениеЗаполнено(СтрокаНачала) Или НЕ ЗначениеЗаполнено(СтрокаОкончания) Тогда
		Сообщить("Не указан путь, либо параметры начала и окончания загрузки."); 	
	Иначе  			
		
		//XLSОбъект = Новый COMОбъект("Excel.Application");
		//XLSОбъект.Visible       = Ложь;
		//XLSОбъект.DisplayAlerts = Ложь;
		//
		//Попытка
		//	Book = XLSОбъект.Workbooks.Open(ПутьКФайлу, , Истина);
		//Исключение
		//	Сообщить ("Проблемы с подключением к Excel" );
		//КонецПопытки;
		//
		//Лист = Book.Sheets(1);
		//
		////Получааем количество строк в книге
		////ВсегоСтрок = Лист.UsedRange.Rows.Count;
		//
		//Область = Лист.Range(Лист.Cells(СтрокаНачала,1), Лист.Cells(СтрокаОкончания,15));	
		//
		////получаем массив колонок)))
		//Данные = Область.Value.Выгрузить();
		//
		//!!!!!
		Данные = Неопределено;
		
		Файл = Новый ДвоичныеДанные(ПутьКФайлу);
		Адрес = ПоместитьВоВременноеХранилище(Файл, ЭтаФорма.УникальныйИдентификатор);
		
	    Файл1 = Новый Файл(ПутьКФайлу);
		РасширениеФайла = Файл1.Расширение;
		
		Данные = ПрочитатьДанныеФайла(Адрес, 15, РасширениеФайла); 		
		//!!!!!

		ТЧ = ПолучитьУпрФорму(ВладелецФормы).Объект[ВладелецФормы.Имя];
		
		Для ТекСтрока = 0 по СтрокаОкончания - СтрокаНачала Цикл										
			ТекПР_Наименование = СокрЛП(Строка(Данные[3][ТекСтрока]));			
			Подразделение = ПолучитьПодразделение(СокрЛП(Строка(Данные[2][ТекСтрока])));
			Тек_ЧЗ = СокрЛП(Строка(Данные[8][ТекСтрока]));			
			ТекПР = НайтиПРЗагрузкиПР(ТекПР_Наименование, Тек_ЧЗ);
			
			Если Не ЗначениеЗаполнено(ТекПР) Тогда
				Сообщить("Не найден представительский расход " + ТекПР_Наименование);
				//ТекПР = СоздатьПР(ТекПР_Наименование, Тек_ЧЗ);
			КонецЕсли;
			
			СтатьяБДДС = НайтиСтатьюВБДДС(СокрЛП(Строка(Данные[1][ТекСтрока])));			
			
			////добавляем запись в табличную часть
			СтрокаТЧ = ТЧ.Добавить();
			СтрокаТЧ.Месяц = Дата(СокрЛП(Данные[0][ТекСтрока]));
			СтрокаТЧ.СтатьяПР = СтатьяБДДС;
			СтрокаТЧ.Наименование = ТекПР;
			СтрокаТЧ.Подразделение = Подразделение;
			
			Попытка
				СтрокаТЧ.СуммаФР = Число(Данные[4][ТекСтрока]);
			Исключение
				СтрокаТЧ.СуммаФР = 0;
			КонецПопытки;
			
			Попытка
				СтрокаТЧ.СуммаБДДС = Число(Данные[5][ТекСтрока]);
			Исключение
				СтрокаТЧ.СуммаБДДС = 0;
			КонецПопытки;
			
			СтрокаТЧ.Основание = СокрЛП(Строка(Данные[6][ТекСтрока]));
			СтрокаТЧ.ЧЗ = Тек_ЧЗ;
			
		КонецЦикла;
		
		//XLSОбъект.Application.Quit();
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция НайтиПРЗагрузкиПР(Наим, ЧЗ)
	
	ТекПР = Справочники.ПредставительскиеРасходы.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПредставительскиеРасходы.Ссылка
	|ИЗ
	|	Справочник.ПредставительскиеРасходы КАК ПредставительскиеРасходы
	|ГДЕ
	|	ПредставительскиеРасходы.ПометкаУдаления = ЛОЖЬ
	|	И ПредставительскиеРасходы.Наименование = &Наименование
	|	И ВЫБОР
	|			КОГДА &КтоОтдает ЕСТЬ NULL
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ПредставительскиеРасходы.КтоОтдает = &КтоОтдает
	|		КОНЕЦ
	|	И ПредставительскиеРасходы.Предприятие = &Предприятие";
	Запрос.УстановитьПараметр("Наименование", Наим);
	Запрос.УстановитьПараметр("КтоОтдает", ?(ЗначениеЗаполнено(ЧЗ), ЧЗ, Null));
	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ТекПР = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат ТекПР;
	
КонецФункции


#КонецОбласти

//ЗагрузкаИнвестиций
#Область ЗагрузкаИнвестиций

&НаКлиенте
Процедура ЗагрузкаИнвестиций()
	
	Если НЕ ЗначениеЗаполнено(ПутьКФайлу) ИЛИ Не ЗначениеЗаполнено(СтрокаНачала) Или НЕ ЗначениеЗаполнено(СтрокаОкончания) Тогда
		Сообщить("Не указан путь, либо параметры начала и окончания загрузки."); 	
	Иначе  			
		
		//XLSОбъект = Новый COMОбъект("Excel.Application");
		//XLSОбъект.Visible       = Ложь;
		//XLSОбъект.DisplayAlerts = Ложь;
		//
		//Попытка
		//	Book = XLSОбъект.Workbooks.Open(ПутьКФайлу, , Истина);
		//Исключение
		//	Сообщить ("Проблемы с подключением к Excel" );
		//КонецПопытки;
		//
		//Лист = Book.Sheets(1);
		//
		////Получааем количество строк в книге
		////ВсегоСтрок = Лист.UsedRange.Rows.Count;
		//
		//Область = Лист.Range(Лист.Cells(СтрокаНачала,1), Лист.Cells(СтрокаОкончания,15));	
		//
		////получаем массив колонок)))
		//Данные = Область.Value.Выгрузить();
		
		 //!!!!!
		Данные = Неопределено;
		Файл = Новый ДвоичныеДанные(ПутьКФайлу);
		Адрес = ПоместитьВоВременноеХранилище(Файл, ЭтаФорма.УникальныйИдентификатор);
		
	    Файл1 = Новый Файл(ПутьКФайлу);
		РасширениеФайла = Файл1.Расширение;
		
		Данные = ПрочитатьДанныеФайла(Адрес, 15, РасширениеФайла); 		
		//!!!!!

		ТЧ = ПолучитьУпрФорму(ВладелецФормы).Объект[ВладелецФормы.Имя];
		
		Для ТекСтрока = 0 по СтрокаОкончания - СтрокаНачала Цикл
			
			//Статья затрат
			КодСтатьи = СокрЛП(Строка(Данные[1][ТекСтрока]));
			СтатьяБДДС = НайтиСтатьюВБДДС(КодСтатьи);			
			СтатьяСебестоимости = "";
			
			Если ПустаяСтрока(СтатьяБДДС) Тогда
				СтатьяСебестоимости = НайтиСтатьюССПоКоду(КодСтатьи);
				
				Если ПустаяСтрока(СтатьяСебестоимости) Тогда
					Сообщить ("Не найдена статья по коду " + КодСтатьи + " в справочнике СтатьиДДС и С/с");
					СтатьяБДДС = "";
				КонецЕсли;
				
			иначе
				СтатьяСебестоимости = НайтиСтатьюВСебестоимости(СтатьяБДДС);
				НомерПризнака = 1;
				
				Если ПустаяСтрока(СтатьяСебестоимости) Тогда
					СтатьяСебестоимости = НайтиСтатьюВФР(СтатьяБДДС);
					НомерПризнака = 2;
					
					Если ПустаяСтрока(СтатьяСебестоимости) Тогда
						сообщить("Не найдено соответствие статьи затрат со статьей БДДС по коду " + КодСтатьи);
						СтатьяСебестоимости = "";
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ТекПР_Наименование = СокрЛП(Строка(Данные[2][ТекСтрока]));					
			ТекПР = НайтиПР(ТекПР_Наименование);
			
			Если Не ЗначениеЗаполнено(ТекПР) Тогда
				Сообщить("Не найден инв проект " + ТекПР);
			КонецЕсли;
			
			Подразделение = ПолучитьПодразделение(СокрЛП(Строка(Данные[3][ТекСтрока])));
			
			////добавляем запись в табличную часть
			СтрокаТЧ = ТЧ.Добавить();
			СтрокаТЧ.Месяц = Дата(СокрЛП(Данные[0][ТекСтрока]));
			СтрокаТЧ.ИнвестиционныйПроект = ТекПР;
			СтрокаТЧ.Подразделение = Подразделение;
			СтрокаТЧ.СтатьяБДДС = СтатьяБДДС;
			СтрокаТЧ.СтатьяЗатрат = СтатьяСебестоимости;
			
			Попытка
				СтрокаТЧ.СуммаФР = Число(Данные[4][ТекСтрока]);
			Исключение
				СтрокаТЧ.СуммаФР = 0;
			КонецПопытки;
			
			Попытка
				СтрокаТЧ.СуммаБДДС = Число(Данные[5][ТекСтрока]);
			Исключение
				СтрокаТЧ.СуммаБДДС = 0;
			КонецПопытки;
			
			СтрокаТЧ.Основание = СокрЛП(Строка(Данные[6][ТекСтрока]));
			
		КонецЦикла;
		
		//XLSОбъект.Application.Quit();
		
	КонецЕсли;
	
	
	
КонецПроцедуры	

&НаСервере
Функция НайтиПР(Наим)
	
	ТекПР = Справочники.ОбъектыСтроительства.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОбъектыСтроительства.Ссылка
	|ИЗ
	|	Справочник.ОбъектыСтроительства КАК ОбъектыСтроительства
	|ГДЕ
	|	ОбъектыСтроительства.ПометкаУдаления = ЛОЖЬ
	|	И ОбъектыСтроительства.Наименование = &Наименование";
	Запрос.УстановитьПараметр("Наименование", Наим);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ТекПР = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат ТекПР;
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиСтатьюВБДДС(КодСтатьи)
	//Возврат Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду(КодСтатьи);
	Возврат БюджетныйНаСервере.СправочникНайтиПоКоду("СтатьиДвиженияДенежныхСредств",КодСтатьи,,);
КонецФункции

&НаСервереБезКонтекста
Функция НайтиСтатьюССПоКоду(КодСтатьи)
	//Возврат Справочники.ИздержкиОбращения.НайтиПоКоду(КодСтатьи);	
	Возврат БюджетныйНаСервере.СправочникНайтиПоКоду("СтатьиЗатрат",КодСтатьи,,);
КонецФункции // НайтиСтатьюССПоКоду()

&НаСервереБезКонтекста
Функция НайтиСтатьюВФР(СтатьяБДДС)
	//Возврат Справочники.СтатьиДоходовРасходов.НайтиПоРеквизиту("СтатьяБДДС", СтатьяБДДС);	
	Возврат БюджетныйНаСервере.СправочникНайтиПоКоду("ПрочиеДоходыИРасходы",СтатьяБДДС,,);
КонецФункции

&НаСервереБезКонтекста
Функция НайтиСтатьюВСебестоимости(СтатьяБДДС)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СтатьиЗатрат.Ссылка
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|ГДЕ
	|	СтатьиЗатрат.СтатьяБДДС = &СтатьяБДДС";
	
	Запрос.УстановитьПараметр("СтатьяБДДС", СтатьяБДДС);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;	
	Иначе
		Возврат Справочники.СтатьиЗатрат.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции


#КонецОбласти

//ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область Общие

&НаСервере
Функция СоздатьПР(Наим, ЧЗ)
	
	НовПР = Справочники.ПредставительскиеРасходы.СоздатьЭлемент();
	НовПР.Предприятие = Предприятие;
	НовПР.Владелец = Предприятие;
	НовПР.Наименование = Наим;
	НовПр.КтоОтдает = ЧЗ;
	НовПР.Записать();
	Сообщить("Создан ПР " + НовПР.Наименование + ". Предприятие " + Строка(Предприятие) + ".");
	Возврат НовПР.Ссылка;
	
КонецФункции

&НаСервереБезКонтекста
Функция СтатьяПРУК()
	Возврат Справочники.СтатьиДоходовРасходов.ПРУК;
КонецФункции

&НаКлиенте
Функция ПолучитьУпрФорму(ТекЭлемент)
	
	Если ТипЗнч(ТекЭлемент.Родитель) = Тип("УправляемаяФорма") Тогда
		Возврат ТекЭлемент.Родитель;
	Иначе 
		Возврат ПолучитьУпрФорму(ТекЭлемент.Родитель);
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПодразделение(КодПодразделения)
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//|	ВидыДеятельности.Ссылка
	//|ИЗ
	//|	Справочник.СтруктураПредприятия КАК ВидыДеятельности
	//|ГДЕ
	//|	ВидыДеятельности.Код = &Код";
	//
	//Запрос.УстановитьПараметр("Код", КодПодразделения);
	//
	//Результат = Запрос.Выполнить();
	//Выборка = Результат.Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//	Возврат Выборка.Ссылка;	
	//КонецЦикла;
	
	
	//Если НЕ Выборка.Количество() Тогда
	//	Сообщить("Подразделение " + КодПодразделения + " не найдено в справочнике");	
	//КонецЕсли;
	
	Подразделение = БюджетныйНаСервере.СправочникНайтиПоКоду("СтруктураПредприятия",КодПодразделения,,);
		
	Если НЕ ЗначениеЗаполнено(Подразделение) Тогда 
	     Сообщить("Подразделение " + КодПодразделения + " не найдено в справочнике");
		 Возврат Справочники.СтруктураПредприятия.ПустаяСсылка();
	 Иначе 
		 Возврат Подразделение;
	КонецЕсли;	 
	
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиНоменклатуру(Номенклатура, Предприятие)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Наименование = &Наименование
	|	И Номенклатура.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	Запрос.УстановитьПараметр("Наименование", Номенклатура);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		УжеСуществует = Выборка.Ссылка;
	Иначе
		УжеСуществует = Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
	Возврат УжеСуществует;
	
КонецФункции

#КонецОбласти

&НаСервере
Функция ПрочитатьДанныеФайла(Адрес, КолВоКолонокФайла=0, Расширение="xlsx")
	
	МассивДанных = Новый Массив;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);
	
	ПутьКФайлуСервер = КаталогВременныхФайлов() + "123." + Расширение; //для примера...
	ВременныйФайл = Новый Файл(ПутьКФайлуСервер);
	Если ВременныйФайл.Существует() Тогда
		УдалитьФайлы(ПутьКФайлуСервер);
	КонецЕсли;	
	
	ДвоичныеДанные.Записать(ПутьКФайлуСервер);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Попытка
		// Выполняется долго на больших файлах.
		ТабличныйДокумент.Прочитать(ПутьКФайлуСервер, СпособЧтенияЗначенийТабличногоДокумента.Значение);    // СпособЧтенияЗначенийТабличногоДокумента - новый параметр платформы 8.3.6. Второе значение "Текст".
			
		СписокЛистов = Новый СписокЗначений;
		
		Для Каждого ОбластьТД ИЗ ТабличныйДокумент.Области Цикл
			СписокЛистов.Добавить(ОбластьТД.Имя);
		КонецЦикла;
		
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Внимание);
		Возврат МассивДанных;
	КонецПопытки;
	
	Данные = ТабличныйДокумент.ПолучитьОбласть(СписокЛистов[0].Значение);
	КолВоСтрокФайла = Данные.ПолучитьРазмерОбластиДанныхПоВертикали();
	Если КолВоКолонокФайла = 0 Тогда
	КолВоКолонокФайла = Данные.ПолучитьРазмерОбластиДанныхПоГоризонтали();
	КонецЕсли;
	
	
	Для НомерКолонки = 1 По КолВоКолонокФайла Цикл//КолВоКолонокФайла Цикл
		
		МассивСтолбец = Новый Массив;
		
		Для НомерСтроки = СтрокаНачала По КолВоСтрокФайла Цикл
			ОбластьЯчейка = Данные.ПолучитьОбласть("R"+НомерСтроки+"C"+НомерКолонки);
			ТекОбласть = ОбластьЯчейка.ТекущаяОбласть;
			Попытка
				ЗначениеЯчейки = ТекОбласть.Значение;        // Число, Дата.
			Исключение
				ЗначениеЯчейки = СокрЛП(ТекОбласть.Текст);    // Строка, Булево. (Булево как строка "ИСТИНА"/"ЛОЖЬ")
			КонецПопытки;
			
			МассивСтолбец.Добавить(ЗначениеЯчейки);
			
		КонецЦикла;
		МассивДанных.Добавить(МассивСтолбец);
	КонецЦикла;	
	
	Возврат МассивДанных;
	
КонецФункции

