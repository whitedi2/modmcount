#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОсновнаяОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		
	Справочники.Организации.ПроверитьНаличиеОрганизацииПриОднофирменномУчете(ОсновнаяОрганизация);
		
	Организация = ОсновнаяОрганизация;  
	
	ПодписьИПечать = Истина;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВыбратьПериод(Команда)  
	
	ПараметрыФормы = Новый Структура("НачалоПериода, КонецПериода", ДатаНачала, ДатаОкончания);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыФормы, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);   
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокКонтрагентПриИзменении(Элемент)
	
	ЗаполнитьПоКонтрагенту(Элементы.Список.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка) 
	
	Для каждого ВыбранныйКонтрагент Из ВыбранноеЗначение Цикл
		НоваяСтрока = Список.Добавить();
		НоваяСтрока.Контрагент = ВыбранныйКонтрагент;    
		
		ЗаполнитьПоКонтрагенту(НоваяСтрока);

	КонецЦикла;

КонецПроцедуры   

&НаКлиенте
Процедура СписокЭДОПриИзменении(Элемент)
	
	Если Элементы.Список.ТекущиеДанные.ЭДО Тогда  
		//Если поднят флажок, проверим техническую возможность
		Элементы.Список.ТекущиеДанные.ЭДО = ПодключенЭДО(Элементы.Список.ТекущиеДанные.Контрагент);
	КонецЕсли;	
		
КонецПроцедуры   

&НаКлиенте
Процедура СписокПечатьПриИзменении(Элемент)
	
	Если Элементы.Список.ТекущиеДанные.Печать Тогда  
		//Если поднят флажок, проверим техническую возможность
		Элементы.Список.ТекущиеДанные.Печать = ЕстьEmail(Элементы.Список.ТекущиеДанные.Контрагент);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подобрать(Команда)
	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",ложь);
    ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", ПараметрыФормы, Элементы.Список);  
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьАктыСверок(Команда)  
	
	Для каждого стр из список Цикл   
		
		НовыйДокумент = СоздатьАктСверокиНаСервере(Стр.Контрагент); 

		Форма = ПолучитьФорму("Документ.АктСверкиВзаиморасчетов.Форма.ФормаДокумента", Новый Структура("Ключ", НовыйДокумент));
	    Форма.УУ_ЗаполнитьДаннымиБухгалтерскогоУчета();  
		Форма.Записать();
		
		Стр.АктСверки = НовыйДокумент; 
		Стр.ОборотДт = ВернутьРеквизит(НовыйДокумент,"ПоДаннымОрганизации","Дебет"); 
		Стр.ОборотКт = ВернутьРеквизит(НовыйДокумент,"ПоДаннымОрганизации","Кредит"); 
		Стр.СальдоНаКонец = ВернутьРеквизит(НовыйДокумент,"","ОстатокНаНачало")+Стр.ОборотДт-Стр.ОборотКт;
	
	КонецЦикла 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоПочте(Команда)  
	ОтправитьПоПочтеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда) 
	
	МассивОбъектов = Новый Массив;

	Для каждого Стр из Список Цикл 
		Если Не Стр.Печать Тогда   
			Продолжить
		КонецЕсли;
		
		МассивОбъектов.Добавить(Стр.АктСверки);
    КонецЦикла;
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ПараметрКоманды", МассивОбъектов); 
	ПараметрыПечати.Вставить("ИменаМакетов","АктСверки"); 
	ПараметрыПечати.Вставить("ИмяМенеджераПечати","Документ.АктСверкиВзаиморасчетов");
	ФормаПечати = ПолучитьФорму("ОбщаяФорма.ПечатьДокументов",ПараметрыПечати);//,,,КлючУникальности);
	ФормаПечати.ПодписьИПечать = ЭтаФорма.ПодписьИПечать;
	ФормаПечати.Открыть(); 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиОписанияОповещения

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДатаНачала    = РезультатВыбора.НачалоПериода;
	ДатаОкончания = РезультатВыбора.КонецПериода;
		
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьПоКонтрагенту(Строка) 
	Строка.ЭДО = ПодключенЭДО(Строка.Контрагент);
	Если НЕ Строка.ЭДО Тогда
		Строка.Почта = ЕстьEmail(Строка.Контрагент);
		Если НЕ Строка.Почта Тогда
			Строка.Печать = Истина;  
		Иначе
			Строка.Печать = Ложь;
		КонецЕсли;  
	Иначе
		Строка.Почта = Ложь;
		Строка.Печать = Ложь;
	КонецЕсли;   
	
	СтруктураСумм = ЗаполнитьСуммы(Строка.Контрагент); 
	Строка.ОборотДт = СтруктураСумм.ОборотДт;
	Строка.ОборотКт = СтруктураСумм.ОборотКт;
    Строка.СальдоНаКонец = СтруктураСумм.СальдоНаКонец;
КонецПроцедуры

&НаСервере
Функция СоздатьАктСверокиНаСервере(Контрагент)
	
		НовыйДокумент = Документы.АктСверкиВзаиморасчетов.СоздатьДокумент(); 
		ЗаполнениеДокументов.Заполнить(НовыйДокумент);
		Новыйдокумент.Организация = Организация;
		НовыйДокумент.Контрагент = Контрагент;
		Новыйдокумент.ДатаНачала = ДатаНачала;
		Новыйдокумент.ДатаОкончания = ДатаОкончания; 
		// Заполняем счета учета взаиморасчетов
		ТаблицаСчетов = УчетВзаиморасчетов.ПолучитьТаблицуСчетовУчетаВзаиморасчетов(Истина, Ложь);
		ТаблицаСчетов.Колонки.СчетРасчетов.Имя = "Счет";
		ТаблицаСчетов.Колонки.Добавить("УчаствуетВРасчетах", Новый ОписаниеТипов("Булево"));
		ТаблицаСчетов.ЗаполнитьЗначения(Истина, "УчаствуетВРасчетах");
		Новыйдокумент.СписокСчетов.Загрузить(ТаблицаСчетов);
		
		Если ЗначениеЗаполнено(НовыйДокумент.Контрагент) Тогда
			НовыйДокумент.ПредставительКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НовыйДокумент.Контрагент, "ОсновноеКонтактноеЛицо");
		КонецЕсли;
		Если ЗначениеЗаполнено(НовыйДокумент.Организация) Тогда
			НовыйДокумент.ПредставительОрганизации = Документы.АктСверкиВзаиморасчетов.ПредставительОрганизации(НовыйДокумент.Организация, НовыйДокумент.Дата);
		КонецЕсли;    
		НовыйДокумент.Записать(); 
		
		Возврат НовыйДокумент.Ссылка; 
	
КонецФункции    

Функция ПодключенЭДО(Контрагент);  
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СостоянияКонтрагентовБЭД.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтрагентаБЭД.НастроенЭДО)
	|			ТОГДА Истина
	|		ИНАЧЕ Ложь
	|	КОНЕЦ КАК Состояние
	|ИЗ
	|	РегистрСведений.СостоянияКонтрагентовБЭД КАК СостоянияКонтрагентовБЭД
	|ГДЕ
	|	СостоянияКонтрагентовБЭД.Контрагент = &Контрагент";
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Состояние;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции 

Функция ЕстьEmail(Контрагент)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
		Адрес = МодульУправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		Контрагент, МодульУправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("EmailКонтрагенты"));
	Иначе  
		Адрес = "";
	КонецЕсли;
	
	Если ПустаяСтрока(Адрес) Тогда
		Возврат Ложь
	Иначе
		Возврат Истина
	КонецЕсли;
	
КонецФункции	

&НаСервере
Процедура ОтправитьПоПочтеНаСервере()  
	
	ДоступныеУчетныеЗаписи = РаботаСПочтовымиСообщениями.ДоступныеУчетныеЗаписи(Истина);
	Если ДоступныеУчетныеЗаписи.Количество() = 0 Тогда
		Ошибка = НСтр("ru = 'Не обнаружены доступные учетные записи электронной почты'");
		ЗаписьЖурналаРегистрации("ОшикбаОтправкиУведомлений", УровеньЖурналаРегистрации.Ошибка,,,Ошибка);;
	Иначе
	    УчетнаяЗапись = ДоступныеУчетныеЗаписи[0].Ссылка; 

		СписокПисем = ПодготовитьПисьма();   
		ПисьмаКОтправке = Новый Массив;
		Для каждого Письмо из СписокПисем Цикл 
			ПараметрыПисьма = СформироватьПараметрыПисьма(Письмо);
			ПисьмаКОтправке.Добавить(РаботаСПочтовымиСообщениями.ПодготовитьПисьмо(УчетнаяЗапись, ПараметрыПисьма));   
		КонецЦикла; 
		Если ПисьмаКОтправке.Количество() Тогда
			РезультатОтправки = РаботаСПочтовымиСообщениями.ОтправитьПисьма(УчетнаяЗапись, ПисьмаКОтправке);  
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры   

&НаСервере
Функция ПодготовитьПисьма() 
	
	СписокПисем = Новый Массив;
	
	Для каждого Стр из Список Цикл 
		Если Не Стр.Почта Тогда   
			Продолжить
		КонецЕсли;  
		
		Если НЕ ЗначениеЗаполнено(Стр.АктСверки) Тогда
			Сообщить("Не сформированы акты сверок");
			Прервать;
		КонецЕсли;
		
		МассивВложений = Новый Массив;   
	
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(Стр.АктСверки);
		ПараметрыПечати = Новый Структура;
		КоллекцияПечатныхФорм = УправлениеПечатью.ПодготовитьКоллекциюПечатныхФорм("АктСверки"); 
		ОбъектыПечати = Новый СписокЗначений;
		ПараметрыВывода = Новый Структура;
		
		Документы.АктСверкиВзаиморасчетов.Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхформ, ОбъектыПечати, ПараметрыВывода);  
		
		ТабДок = КоллекцияПечатныхФорм[0].ТабличныйДокумент;   
		
		МассивПоказателей = Новый Массив;
		МассивПоказателей.Добавить("ФаксимилеПечать");
		МассивПоказателей.Добавить("ФаксимилеИсполнитель");
		
		УправлениеПечатьюБП.УУ_УправлениеКартинкойФаксимиле(ТабДок,МассивПоказателей,ПодписьИПечать);
		
		Вложение = Новый Структура;
		Вложение.Вставить("АдресВоВременномХранилище", ПоместитьВоВременноеХранилище(ТабДок, Новый УникальныйИдентификатор));  
		НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Стр.АктСверки.Номер, Истина, Ложь);
		Вложение.Вставить("Представление", "Акт сверки взаиморасчетов №"+НомерНаПечать+" от "+Формат(Стр.АктСверки.Дата,"ДЛФ=DD")); 
		Вложение.Вставить("Формат", "PDF_A_3");  
		МассивВложений.Добавить(Вложение);  
		
		МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
		Адрес = МодульУправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		Стр.Контрагент, МодульУправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("EmailКонтрагенты"));
		
		СтруктураПисьма = Новый Структура;   
		СтруктураПисьма.Вставить("ПолучательКонтрагент", Стр.Контрагент);
		СтруктураПисьма.Вставить("Получатель", Адрес);
		СтруктураПисьма.Вставить("Вложения", МассивВложений); 
		
		СписокПисем.Добавить(СтруктураПисьма);
		
	КонецЦикла;
	
	Возврат СписокПисем
	
КонецФункции

&НаСервере
Функция СформироватьПараметрыПисьма(Сообщение) 
	
	ПараметрыПисьма = Новый Структура;
	
	Кому = Новый Массив;  
	
	ПочтаПолучателей = ОбщегоНазначенияКлиентСервер.АдресаЭлектроннойПочтыИзСтроки(Сообщение.Получатель);
	Для каждого ПочтаПолучателя Из ПочтаПолучателей Цикл
		Кому.Добавить(Новый Структура("Адрес, Представление", ПочтаПолучателя.Адрес, ПочтаПолучателя.Псевдоним));
	КонецЦикла;
	
	Если Кому.Количество() > 0 Тогда
		ПараметрыПисьма.Вставить("Кому", Кому);
	КонецЕсли;     
	
	ПараметрыПисьма.Вставить("Тема", "Документы для "+Сообщение.ПолучательКонтрагент.НаименованиеПолное+" от "+Организация.НаименованиеСокращенное);
	
	ТелоПисьма = "К письму приложены документы для "+Сообщение.ПолучательКонтрагент.НаименованиеПолное+" от "+Организация.НаименованиеСокращенное;
	
	МассивВложений = Сообщение.Вложения;
	ГотовыйМассивВложений = Новый Массив;
	Для Ид = 0 по МассивВложений.Количество()-1 Цикл
		ТелоПисьма = ТелоПисьма + Символы.ПС+"- "+МассивВложений[Ид].Представление;
		ФорматыСохранения = Новый Массив;
		ФорматыСохранения.Добавить(МассивВложений[Ид].Формат);
		
		НастройкиСохранения = Новый Структура;
		НастройкиСохранения.Вставить("УпаковатьВАрхив", Ложь);
		НастройкиСохранения.Вставить("ФорматыСохранения", ФорматыСохранения);
		НастройкиСохранения.Вставить("ПереводитьИменаФайловВТранслит", Ложь);
		
		Вложение = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(МассивВложений[Ид]);
		РаботаСПочтовымиСообщениямиВызовСервера.ПодготовитьВложения(Вложение, НастройкиСохранения);
		ГотовыйМассивВложений.Добавить(Вложение[0]);
	КонецЦикла;	    
	
	ПараметрыПисьма.Вставить("Тело", ТелоПисьма);
	ПараметрыПисьма.Вставить("Вложения", ГотовыйМассивВложений);
	
	Возврат ПараметрыПисьма;
	
КонецФункции  

&НаСервере
Функция ВернутьРеквизит(Док, ИмяТабличнойЧасти, ИмяРеквизита);
	Если ЗначениеЗаполнено(ИмяТабличнойЧасти) Тогда
		Возврат Док[ИмяТабличнойЧасти].Итог(ИмяРеквизита) 
	Иначе
		Возврат Док[ИмяРеквизита]
	КонецЕсли;
КонецФункции   

&НаСервере
Функция ЗаполнитьСуммы(Контрагент)  
	
	СтруктураСумм = Новый Структура;	 
	
	ТаблицаСчетов = УчетВзаиморасчетов.ПолучитьТаблицуСчетовУчетаВзаиморасчетов(Истина, Ложь);    
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ХозрасчетныйОбороты.СуммаОборотДт КАК ОборотДт,
		|	ХозрасчетныйОбороты.СуммаОборотКт КАК ОборотКт,
		|	ХозрасчетныйОстатки.СуммаОстаток КАК СальдоНаКонец
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОкончания, Счет В ИЕРАРХИИ (&ТаблицаСчетов), , Субконто1 = &Контрагент И Организация = &Организация) КАК ХозрасчетныйОстатки
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Обороты(
		|				&ДатаНачала,
		|				&ДатаОкончания,
		|				,
		|				Счет В ИЕРАРХИИ (&ТаблицаСчетов),
		|				,
		|				Субконто1 = &Контрагент
		|					И Организация = &Организация,
		|				НЕ КорСчет В ИЕРАРХИИ (&ТаблицаСчетов),
		|				) КАК ХозрасчетныйОбороты
		|		ПО (ХозрасчетныйОбороты.Субконто1 = ХозрасчетныйОстатки.Субконто1)";
	Запрос.УстановитьПараметр("ДатаНачала",ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",ДатаОкончания);
	Запрос.УстановитьПараметр("ТаблицаСчетов",УчетВзаиморасчетов.ПолучитьТаблицуСчетовУчетаВзаиморасчетов(Истина, Ложь)); 
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);  
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Для каждого Колонка Из Результат.Колонки Цикл
	        СтруктураСумм.Вставить(Колонка.Имя,Выборка[Колонка.Имя]);
		КонецЦикла;  
	Иначе
		Для каждого Колонка Из Результат.Колонки Цикл
	        СтруктураСумм.Вставить(Колонка.Имя,0);
		КонецЦикла; 
	КонецЕсли;
	
	Возврат СтруктураСумм;
	
КонецФункции

&НаКлиенте
Процедура УдалитьСтрокиБезОборотов(Команда) 

	ОтборСтрок = Новый Структура("ОборотДт,ОборотКт,СальдоНаКонец",0,0,0);	
	НайдСтроки = Список.НайтиСтроки(ОтборСтрок);
	Для каждого Стр из НайдСтроки цикл
		Список.Удалить(Стр);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонтрагентовНаСервере()
		
	СтруктураСумм = Новый Структура;	 
	
	ТаблицаСчетов = УчетВзаиморасчетов.ПолучитьТаблицуСчетовУчетаВзаиморасчетов(Истина, Ложь);    
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ХозрасчетныйОбороты.СуммаОборотДт КАК ОборотДт,
		|	ХозрасчетныйОбороты.СуммаОборотКт КАК ОборотКт,
		|	ХозрасчетныйОбороты.Субконто1 КАК Контрагент,
		|	ХозрасчетныйОстатки.СуммаОстаток КАК СальдоНаКонец
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОкончания, Счет В ИЕРАРХИИ (&ТаблицаСчетов), , Организация = &Организация) КАК ХозрасчетныйОстатки
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Обороты(
		|				&ДатаНачала,
		|				&ДатаОкончания,
		|				,
		|				Счет В ИЕРАРХИИ (&ТаблицаСчетов),
		|				,
		|				Организация = &Организация,
		|				НЕ КорСчет В ИЕРАРХИИ (&ТаблицаСчетов),
		|				) КАК ХозрасчетныйОбороты
		|		ПО (ХозрасчетныйОбороты.Субконто1 = ХозрасчетныйОстатки.Субконто1)";
	
	Запрос.УстановитьПараметр("ДатаНачала",ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",ДатаОкончания);
	Запрос.УстановитьПараметр("ТаблицаСчетов",УчетВзаиморасчетов.ПолучитьТаблицуСчетовУчетаВзаиморасчетов(Истина, Ложь)); 
	Запрос.УстановитьПараметр("Организация",Организация);  
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() цикл
		Если НЕ ЗначениеЗаполнено(Выборка.Контрагент) тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Список.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ЭДО = ПодключенЭДО(НоваяСтрока.Контрагент);
		Если НЕ НоваяСтрока.ЭДО Тогда
			НоваяСтрока.Почта = ЕстьEmail(НоваяСтрока.Контрагент);
			Если НЕ НоваяСтрока.Почта Тогда
				НоваяСтрока.Печать = Истина;  
			Иначе
				НоваяСтрока.Печать = Ложь;
			КонецЕсли;  
		Иначе
			НоваяСтрока.Почта = Ложь;
			НоваяСтрока.Печать = Ложь;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКонтрагентов(Команда)
	ЗаполнитьКонтрагентовНаСервере();
КонецПроцедуры

#КонецОбласти



