
&НаСервере
Процедура ЗаполнитьПоОстаткамНаСервере(ТекНомГруппа = Неопределено)
	
	РеквизитОбъект = РеквизитФормыВЗначение("Объект");
	
	ТЗ_Учет = РеквизитОбъект.ПолучитьДанныеУчета(Ложь, ТекНомГруппа, Отбор);
	Для каждого ТекСтрока Из ТЗ_Учет Цикл
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		НоваяСтрока.КоличествоФакт = НоваяСтрока.Количество; 
	КонецЦикла; 
	//Объект.Товары.Загрузить();
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийИнвентаризация.Подснятие Тогда
		Для Каждого ТекСтрока Из Объект.Товары Цикл
			ТекСтрока.КоличествоПрошлаяИнвПодснятие = 0;
			ТекСтрока.СуммаПрошлаяИнвПодснятие = 0;
		КонецЦикла;
	КонецЕсли;
	
	ПересчитатьСуммыТоваров();
	
	ЗаполнитьСводПоГруппам();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСводПоГруппам()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТЧ.НомГруппа,
	               |	1 КАК Количество
	               |ПОМЕСТИТЬ ТЧ
	               |ИЗ
	               |	&ТЧ КАК ТЧ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Номенклатура.Отдел,
	               |	Номенклатура.Отдел.Наименование,
	               |	Номенклатура.Отдел.Код
	               |ПОМЕСТИТЬ НомГруппы
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.ЭтоГруппа = ЛОЖЬ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Номенклатура.Отдел,
	               |	Номенклатура.Отдел.Наименование,
	               |	Номенклатура.Отдел.Код
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НомГруппы.Отдел КАК НомГруппа,
	               |	СУММА(ЕСТЬNULL(ТЧ.Количество, 0)) КАК Количество,
	               |	НомГруппы.ОтделНаименование КАК Наименование,
	               |	НомГруппы.ОтделКод КАК Код
	               |ИЗ
	               |	НомГруппы КАК НомГруппы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТЧ КАК ТЧ
	               |		ПО НомГруппы.Отдел = ТЧ.НомГруппа
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НомГруппы.ОтделНаименование,
	               |	НомГруппы.ОтделКод,
	               |	НомГруппы.Отдел
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Код";
	
	Запрос.УстановитьПараметр("ТЧ", Объект.Товары.Выгрузить());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Найденные = Объект.ГруппыНоменклатуры.НайтиСтроки(Новый Структура("НомГруппа", "Все группы"));
	Если НЕ НАйденные.Количество() Тогда
		НоваяСтрока = Объект.ГруппыНоменклатуры.Добавить();
	Иначе
		НоваяСтрока = Найденные[0];
	КонецЕсли;
	НоваяСтрока.НомГруппа = "Все группы";
	НоваяСтрока.НомГруппаПредставление = "Все группы";
	
	
	Соотв = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		Соотв.Вставить(Выборка.НомГруппа, Новый Структура("Наименование, Количество, Код", Выборка.Наименование, Выборка.Количество, Выборка.Код));
		Найденные = Объект.ГруппыНоменклатуры.НайтиСтроки(Новый Структура("НомГруппа", Выборка.НомГруппа));
		Если НЕ Найденные.Количество() Тогда
			НоваяСтрока = Объект.ГруппыНоменклатуры.Добавить();
		Иначе
			НоваяСтрока = Найденные[0];
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.НомГруппаПредставление = ?(ЗначениеЗаполнено(Выборка.Наименование), Выборка.Наименование, "Пустая группа") + ?(Выборка.Количество, " (" + Строка(Выборка.Количество) + ")", "");
		
	КонецЦикла;
	
	
	
	
КонецПроцедуры


&НаСервере
Процедура УстановитьЗначениеПараметраНастроек(Настройки, ИмяПараметра, Значение)
	
	Параметр = Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
	
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = Значение;
		Параметр.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИспользованиеНастроек(Настройки, ИмяПараметра, Значение)
	
	Параметр = Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
	
	Если Параметр <> Неопределено Тогда
		//Параметр.Значение = Значение;
		Параметр.Использование = Значение;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьПоОстаткам(Команда)
	
	Если Не Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИнвентаризация.Инвентаризация") Тогда
		Если Не ЗначениеЗаполнено(Объект.Склад) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не указан склад";
			Сообщение.Поле = "Склад";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТекДанные = Элементы.ГруппыНоменклатуры.ТекущиеДанные;
	Если НЕ Элементы.ГруппыНоменклатуры.Видимость ИЛИ ТекДанные = Неопределено Тогда
		ТекНомГруппа = Неопределено;
	Иначе
		ТекНомГруппа = ТекДанные.НомГруппа;
	КонецЕсли;
	
	
	Если ТекНомГруппа = "Все группы" ИЛИ ТекНомГруппа = Неопределено Тогда
		НайденныеСтроки = Объект.Товары;
	Иначе 	
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("НомГруппа", ТекНомГруппа));
	КонецЕсли;
	
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Ответ = Вопрос("Табличная часть будет очищена, продолжить?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Если ТекНомГруппа = "Все группы" ИЛИ ТекНомГруппа = Неопределено Тогда
				Объект.Товары.Очистить();
			Иначе
				Для каждого ТекСтрока Из НайденныеСтроки Цикл
					Объект.Товары.Удалить(ТекСтрока);					
				КонецЦикла; 					
			КонецЕсли;
			ЗаполнитьПоОстаткамНаСервере(ТекНомГруппа);
		КонецЕсли;	
		
	Иначе	
		ЗаполнитьПоОстаткамНаСервере(ТекНомГруппа);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, Новый Структура("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты") );
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтаФорма.Параметры.ЗначениеКопирования) Тогда
		ИнициализироватьКомпоновкуДанных(Ложь, Истина);
	Иначе
		ИнициализироватьКомпоновкуДанных(Ложь, Ложь);
	КонецЕсли;
	
	//++саб
	сабПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	//--саб
	
КонецПроцедуры

&НаСервере
Процедура сабПриСозданииНаСервере(Отказ, СтандартнаяОбработка)	
	БюджетныйНаСервере.ДействияПриСозданииФормыДокумента(ЭтаФорма);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ЗначениеЗаполнено(ПараметрыСеанса.ТекущееПредприятие) Тогда
			Объект.Предприятие = ПараметрыСеанса.ТекущееПредприятие;		
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыСеанса.ТекущееПодразделение) Тогда
			Объект.Подразделение = ПараметрыСеанса.ТекущееПодразделение;
			Объект.Организация = Объект.Подразделение.Организация;
			Объект.Склад = Объект.Подразделение.Склад;			
			Объект.КорПодразделение = ПараметрыСеанса.ТекущееПодразделение;
		КонецЕсли;
		Если   Объект.Дата = Дата("00010101") Тогда 
			Объект.Дата = ТекущаяДата();
		КонецЕсли;
		
		//Объект.Склад = сабОперОбщегоНазначения.ПолучитьСкладПоДопСвойству(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Склад возврата (Склады)", Истина));	
		//Если ЗначениеЗаполнено(Объект.Склад) Тогда
		//	Элементы.Склад.Доступность = Ложь;
		//КонецЕсли;
		
		//Если Не (РольДоступна("Администратор") Или рольдоступна("сабУчетчик") Или РольДоступна("сабРевизор")) Тогда
		//	Объект.ВидОперации = Перечисления.ВидыОперацийИнвентаризация.Подснятие;
		//	//Объект.КорСчет = ПланыСчетов.Учетный.НайтиПоКоду("41.03");
		//	Объект.КорСубконто2 = сабОперОбщегоНазначения.ВернутьСклад("Склад подснятий", Объект.Предприятие);
		//КонецЕсли;
	КонецЕсли;
	
	Если Не (РольДоступна("Администратор") Или РольДоступна("ПолныеПрава") Или рольдоступна("сабУчетчик") Или РольДоступна("сабРевизор")) Тогда
		Элементы.ВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийИнвентаризация.Подснятие);
		Элементы.СтраницаКорСчет.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.Группа13.Видимость = Объект.РазбиватьНаИнгредиенты;
	
	ОперБлокВключен = Константы.сабМодульОперативныйУчет.Получить();
	Элементы.СтраницаФакт.Видимость = ОперБлокВключен;
	Элементы.ТоварыЗагрузитьРеализации.Видимость = ОперБлокВключен;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКомпоновкуДанных(ВсегдаИспользоватьНастройкиПоУмолчанию, СозданКопированием)
	
	Если СозданКопированием Тогда
		ОбъектКопирования = ЭтаФорма.Параметры.ЗначениеКопирования;
		ТекОбъект = РеквизитФормыВЗначение("Объект");
		Попытка
			ТекОбъект.Отбор = Новый ХранилищеЗначения(ОбъектКопирования.Отбор.Получить());
		Исключение		
		КонецПопытки;	
		СхемаКомпоновкиДанных = Документы.УЧ_Инвентаризация.ПолучитьМакет("МакетЗаполнения");
		
		URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
		
		ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
		
		Отбор.Инициализировать(ИсточникНастроек);		
		
		ТекНастройки = ТекОбъект.Отбор.Получить();
		Отбор.ЗагрузитьНастройки(ТекНастройки);
		ЗаполнитьСводПоГруппам();
	Иначе	
		СхемаКомпоновкиДанных = Документы.УЧ_Инвентаризация.ПолучитьМакет("МакетЗаполнения");
		
		URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
		
		ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
		
		Отбор.Инициализировать(ИсточникНастроек);
		
		ТекОбъект = РеквизитФормыВЗначение("Объект");
		ТекНастройки = ТекОбъект.Отбор.Получить();
		Если ТекНастройки = Неопределено
			Или ВсегдаИспользоватьНастройкиПоУмолчанию Тогда
			Отбор.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		Иначе
			Отбор.ЗагрузитьНастройки(ТекНастройки);
		КонецЕсли;
	КонецЕсли;
	
	Отбор.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	
	ТекущийОбъект.Отбор = Новый ХранилищеЗначения(Отбор.Настройки, Новый СжатиеДанных(9));
	
КонецПроцедуры

&НаКлиенте
Процедура КорСчетПриИзменении(Элемент)
	
	Наименование1 = ПолучитьСубконто(1, Объект.КорСчет);
	Наименование2 = ПолучитьСубконто(2, Объект.КорСчет);
	Наименование3 = ПолучитьСубконто(3, Объект.КорСчет);
	
	Элементы.КорСубконто1.Заголовок = Наименование1;
	Элементы.КорСубконто2.Заголовок = Наименование2;
	Элементы.КорСубконто3.Заголовок = Наименование3;
	
	Если Наименование1 = "" Тогда
		Объект.КорСубконто1 = "";		
		Элементы.КорСубконто1.Доступность = Ложь;
	Иначе
		Элементы.КорСубконто1.Доступность = Истина;
	КонецЕсли;
	
	Если Наименование2 = "" Тогда
		Элементы.КорСубконто2.Доступность = Ложь;
	Иначе
		Элементы.КорСубконто2.Доступность = Истина;
	КонецЕсли;
	
	Если Наименование3 = "" Тогда
		Элементы.КорСубконто3.Доступность = Ложь;
	Иначе
		Элементы.КорСубконто3.Доступность = Истина;
	КонецЕсли;
	
	Если НЕ БюджетныйНаСервере.ВернутьРеквизит(Объект.КорСчет, "УчетПоПодразделениям") Тогда
		Элементы.КорПодразделение.Доступность = Ложь;
	Иначе
		Элементы.КорПодразделение.Доступность = Истина;	
	КонецЕсли;
	
	//Если ПолучитьПризнакВалютности(Объект.КорСчет) Тогда
	//	Элементы.Валюта.Видимость 		= Истина;
	//	Элементы.ВалютняСумма.Видимость = Истина;
	//Иначе
	//	Элементы.Валюта.Видимость		= Ложь;
	//	Элементы.ВалютняСумма.Видимость = Ложь;
	//КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСубконто(НомерСубконто, ТекСчет)
	
	Если НомерСубконто > ТекСчет.ВидыСубконто.Количество() Тогда
		Возврат "";
	Иначе
		Возврат ТекСчет.ВидыСубконто[НомерСубконто - 1].ВидСубконто.Наименование;			
	КонецЕсли;
	
КонецФункции // ()


&НаКлиенте
Процедура КорСубконто1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	БюджетныйНаКлиенте.НачалоВыбораСубконто(
	Объект.КорСчет,
	Объект.КорСубконто1,
	1,
	Элемент,
	СтандартнаяОбработка);
КонецПроцедуры


&НаКлиенте
Процедура КорСубконто2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	БюджетныйНаКлиенте.НачалоВыбораСубконто(
	Объект.КорСчет,
	Объект.КорСубконто2,
	2,
	Элемент,
	СтандартнаяОбработка);
	
КонецПроцедуры


&НаКлиенте
Процедура КорСубконто3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	БюджетныйНаКлиенте.НачалоВыбораСубконто(
	Объект.КорСчет,
	Объект.КорСубконто3,
	3,
	Элемент,
	СтандартнаяОбработка);
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьПоФакту(Команда)
	
	Если Элементы.ГруппыНоменклатуры.Видимость Тогда
		ТекДанные = Элементы.ГруппыНоменклатуры.ТекущиеДанные;
		Если Не ТекДанные = Неопределено Тогда
			ТекНомГруппа = ТекДанные.НомГруппа;
		Иначе
			ТекНомГруппа = Неопределено;
		КонецЕсли;
	Иначе
		ТекНомГруппа = Неопределено;
	КонецЕсли;
		
	ЗаполнитьПоФактуНаСервере(ТекНомГруппа);	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоФактуНаСервере(ТекНомГруппа)
	
	ВсеГруппы = (ТекНомГруппа = Неопределено ИЛИ ТекНомГруппа = "Все группы");
	
	Для Каждого ТекСтрокаФакт Из ТоварыФакт Цикл
		Если ВсеГруппы Тогда
			НайденныеСтроки = Объект.Товары.НайтиСтроки(новый Структура("Номенклатура", ТекСтрокаФакт.Номенклатура));
		Иначе
			НайденныеСтроки = Объект.Товары.НайтиСтроки(новый Структура("Номенклатура, НомГруппа", ТекСтрокаФакт.Номенклатура, ТекНомГруппа));
		КонецЕсли;
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденнаяСтрока = НайденныеСтроки[0];
			НайденнаяСтрока.КоличествоФакт = ТекСтрокаФакт.Количество;
		ИначеЕсли ВсеГруппы Тогда 
			НайденнаяСтрока = Объект.Товары.Добавить();
			НайденнаяСтрока.Номенклатура = ТекСтрокаФакт.Номенклатура;
			НайденнаяСтрока.НомГруппа = ТекСтрокаФакт.Номенклатура.Отдел;
			НайденнаяСтрока.КоличествоФакт = ТекСтрокаФакт.Количество;
		КонецЕсли;
	КонецЦикла;
	
	ПересчитатьСуммыТоваров();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗакупочнуюЦену(Номенклатура)
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НоменклатураПоставщикаСрезПоследних.Номенклатура КАК НоменклатураТекущая,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НоменклатураПоставщикаСрезПоследних.Контрагент) КАК КонтрагентТекущий,
	|	МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.Цена) КАК ЦенаТекущая
	|ИЗ
	|	РегистрСведений.НоменклатураПоставщика.СрезПоследних(, Номенклатура = &Номенклатура) КАК НоменклатураПоставщикаСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура = &Номенклатура) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО НоменклатураПоставщикаСрезПоследних.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И НоменклатураПоставщикаСрезПоследних.Контрагент = ЦеныНоменклатурыСрезПоследних.ВидЦены.Поставщик
	|
	|СГРУППИРОВАТЬ ПО
	|	НоменклатураПоставщикаСрезПоследних.Номенклатура";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЦенаТекущая;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьДанныеСТСД(Команда)
	ЗагрузитьДанныеСТСДНаСервере();
КонецПроцедуры


&НаСервере
Процедура ЗагрузитьДанныеСТСДНаСервере()
	
	РеквизитОбъект = РеквизитФормыВЗначение("Объект");
	
	//тз ВТ_Учет - таблица равна автозаполненной табличной части Товары, с применением доп. отборов, но включая товар с нувыми остатками
	ВТ_Учет = РеквизитОбъект.ПолучитьДанныеУчета(Истина,,Отбор);
	
	//Запрос ТСД
	СтрокаСоединения = "DRIVER={MySQL ODBC 5.2 UNICODE Driver};SERVER=10.40.1.239;DATABASE=arm_shop;UID=1c_export;PWD=12345;Option=3;";
	
	Connection =Новый COMОбъект("ADODB.Connection");
	Connection.ConnectionString = СтрокаСоединения;
	Попытка
		Connection.Open();
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	Сообщить("Соединение установлено");
	
	ТекстЗапроса = СтрЗаменить("call getInvDoc(&id)", "&id", Формат(Объект.ИдДокументаТСД, "ЧГ=0"));
	Попытка         
		RecordSet = Connection.Execute(ТекстЗапроса);
	Исключение 
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	Сообщить("Запрос отсканированных данных выполнен");
	
	ТоварыФакт.Очистить();
	ТоварыФактТолькоАртикулы = ТоварыФакт.Выгрузить();
	
	Пока RecordSet.EOF()=0 Цикл
		
		НоваяСтрока = ТоварыФактТолькоАртикулы.Добавить();
		НоваяСтрока.Артикул    = Формат(RecordSet.Fields("good_id").Value, "ЧГ=0");
		//НоваяСтрока.Номенклатура = Справочники.Номенклатура.НайтиПоКоду(НоваяСтрока.Артикул);
		НоваяСтрока.Количество = RecordSet.Fields("amount").Value;
		НоваяСтрока.НомерТСД   = RecordSet.Fields("terminal_id").Value;
		
		RecordSet.MoveNext();
		
	КонецЦикла;
	
	RecordSet.Close();
	Connection.Close();
	
	
	//Формирование таблицы-результата
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("ВТ_ТолькоАртикулы", ТоварыФактТолькоАртикулы);
	Запрос.УстановитьПараметр("ВТ_Учет", ВТ_Учет);
	Запрос.Текст = "ВЫБРАТЬ
	|	ВТ_ТолькоАртикулы.Артикул,
	|	ВТ_ТолькоАртикулы.Количество,
	|	ВТ_ТолькоАртикулы.НомерТСД
	|ПОМЕСТИТЬ ВТ_ТолькоАртикулы
	|ИЗ
	|	&ВТ_ТолькоАртикулы КАК ВТ_ТолькоАртикулы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Учет.Номенклатура
	|ПОМЕСТИТЬ ВТ_Учет
	|ИЗ
	|	&ВТ_Учет КАК ВТ_Учет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТолькоАртикулы.Артикул,
	|	МАКСИМУМ(ВТ_ТолькоАртикулы.Количество) КАК Количество,
	|	ВТ_ТолькоАртикулы.НомерТСД,
	|	НоменклатураСсылка.Ссылка КАК Номенклатура,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ШтрихкодыНоменклатуры.Штрихкод ЕСТЬ NULL 
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК Весовой
	|ПОМЕСТИТЬ ВТ_Подитог
	|ИЗ
	|	ВТ_ТолькоАртикулы КАК ВТ_ТолькоАртикулы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСсылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|			ПО НоменклатураСсылка.Ссылка = ШтрихкодыНоменклатуры.Номенклатура
	|				И (ШтрихкодыНоменклатуры.Штрихкод ПОДОБНО ""21%"")
	|		ПО ВТ_ТолькоАртикулы.Артикул = НоменклатураСсылка.Код
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТолькоАртикулы.Артикул,
	|	ВТ_ТолькоАртикулы.НомерТСД,
	|	НоменклатураСсылка.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Подитог.Артикул,
	|	ВЫБОР
	|		КОГДА ВТ_Подитог.Весовой
	|			ТОГДА ВТ_Подитог.Количество / 1000
	|		ИНАЧЕ ВТ_Подитог.Количество
	|	КОНЕЦ КАК Количество,
	|	ВТ_Подитог.НомерТСД,
	|	ВТ_Подитог.Номенклатура,
	|	ВТ_Подитог.Весовой
	|ИЗ
	|	ВТ_Подитог КАК ВТ_Подитог
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Учет КАК ВТ_Учет
	|		ПО ВТ_Подитог.Номенклатура = ВТ_Учет.Номенклатура";
	Выгрузка = Запрос.Выполнить().Выгрузить();
	ТоварыФакт.Загрузить(Выгрузка);
	
КонецПроцедуры


&НаСервере
Функция ПечатьПересчетНаСервере()
	
	ТабДок = новый ТабличныйДокумент;
	Макет = Документы.УЧ_Инвентаризация.ПолучитьМакет("Пересчет");
	
	Область = Макет.ПолучитьОбласть("Шапка");
	ТабДок.Вывести(Область);
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура";
	
	Для Каждого ТекСтрока Из Элементы.Товары.ВыделенныеСтроки Цикл
		Область = Макет.ПолучитьОбласть("Строка");
		Область.Параметры.Номенклатура = Объект.Товары.Получить(ТекСтрока).Номенклатура;
		Область.Параметры.Артикул = БюджетныйНаСервере.ВернутьРеквизит(Область.Параметры.Номенклатура, "Код");
		Область.Параметры.КоличествоФакт = Объект.Товары.Получить(ТекСтрока).КоличествоФакт;
		
		Штрихкод = "";
		Запрос.УстановитьПараметр("Номенклатура", Объект.Товары.Получить(ТекСтрока).Номенклатура);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Штрихкод = Штрихкод + Выборка.Штрихкод;
		КонецЦикла;
		Штрихкод = Лев(Штрихкод, СтрДлина(Штрихкод) - 1);
		Область.Параметры.Штрихкод = Штрихкод;
		
		ТабДок.Вывести(Область);
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции


&НаКлиенте
Процедура ПечатьПересчет(Команда)
	
	//ТабДок = ПечатьПересчетНаСервере();
	//	
	//ТабДок.ОтображатьСетку = Ложь;
	//ТабДок.Защита = Ложь;
	//ТабДок.ТолькоПросмотр = Истина;
	//ТабДок.ОтображатьЗаголовки = Истина;
	//ТабДок.АвтоМасштаб = Истина;
	//ФормаПечати = ПолучитьФорму("ОбщаяФорма.ФормаПечатиДокумента");
	//ФормаПечати.Результат = ТабДок;
	//ФормаПечати.Открыть();
	
	Форма = ПолучитьФорму("Отчет.ПересчетРезультатовИнвентаризации.ФормаОбъекта");
	КомпоновщикНастроек = Форма.Отчет.КомпоновщикНастроек;
	
	СтандартныеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек.ПользовательскиеНастройки, "ДатаНачала", НачалоДня(Объект.Дата));
	СтандартныеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек.ПользовательскиеНастройки, "ДатаОкончания", КонецДня(Объект.Дата));	
	СтандартныеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек.ПользовательскиеНастройки, "Подразделение", Объект.Подразделение);	
	
	//Установим Отбор
	Для Каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если Строка(ЭлементОтбора.ЛевоеЗначение) = "Документ" Тогда
			ИдНастройки = ЭлементОтбора.ИдентификаторПользовательскойНастройки;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементНастроек Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ЭлементНастроек.ИдентификаторПользовательскойНастройки = ИдНастройки Тогда
			ЭлементНастроек.ПравоеЗначение = Объект.Ссылка;
			ЭлементНастроек.Использование = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Форма.СкомпоноватьРезультат();
	
	Форма.Открыть();
	
КонецПроцедуры


&НаСервере
Процедура ЗапросНеизвестныхШтрихкодовУКМНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры


&НаКлиенте
Процедура ЗапросНеизвестныхШтрихкодовУКМ(Команда)
	
	Если НеизвестныеШтрихкоды.Количество() = 0 Тогда
		Сообщить("Список неизвестных штрихкодов пуст");
		Возврат;
	КонецЕсли;
	
	ЗапросНеизвестныхШтрихкодовУКМНаСервере();
	
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьНеизвестныеШтрихкоды(Команда)
	ЗагрузитьНеизвестныеШтрихкодыНаСервере();
КонецПроцедуры


&НаСервере
Процедура ЗагрузитьНеизвестныеШтрихкодыНаСервере()
	
	СтрокаСоединения = "DRIVER={MySQL ODBC 5.2 UNICODE Driver};SERVER=10.40.1.239;DATABASE=arm_shop;UID=1c_export;PWD=12345;Option=3;";
	
	Connection =Новый COMОбъект("ADODB.Connection");
	Connection.ConnectionString = СтрокаСоединения;
	Попытка
		Connection.Open();
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ТекстЗапроса = СтрЗаменить("call getEmptyBarcodes(&id)", "&id", Формат(Объект.ИдДокументаТСД, "ЧГ=0"));
	Попытка         
		RecordSet = Connection.Execute(ТекстЗапроса);
	Исключение 
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	НеизвестныеШтрихкоды.Очистить();
	
	Пока RecordSet.EOF()=0 Цикл
		
		Штрихкод = RecordSet.Fields("barcode").Value;
		Если Лев(Штрихкод, 2) = "21" Тогда
			Штрихкод = Лев(Штрихкод, 7);
		КонецЕсли;
		
		Если НеизвестныеШтрихкоды.НайтиСтроки(новый Структура("Штрихкод", Штрихкод)).Количество() = 0 Тогда
			НоваяСтрока = НеизвестныеШтрихкоды.Добавить();
			НоваяСтрока.Штрихкод = Штрихкод;
		КонецЕсли;
		
		RecordSet.MoveNext();
		
	КонецЦикла;
	
	RecordSet.Close();
	Connection.Close();	
КонецПроцедуры


&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		ЦенаУчет = ?(ТекущиеДанные.Количество <> 0, ТекущиеДанные.Сумма / ТекущиеДанные.Количество, 0);
		ТекущиеДанные.СуммаФакт = (ТекущиеДанные.КоличествоФакт + ТекущиеДанные.КоличествоРеализация) * ЦенаУчет;
		ТекущиеДанные.КоличествоОтклонение = (ТекущиеДанные.КоличествоФакт + ТекущиеДанные.КоличествоРеализация) - ТекущиеДанные.Количество - ТекущиеДанные.КоличествоПрошлаяИнвПодснятие;
		ТекущиеДанные.СуммаОтклонение	   = ТекущиеДанные.СуммаФакт - ТекущиеДанные.Сумма - ТекущиеДанные.СуммаПрошлаяИнвПодснятие;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьУчет(Команда)
	
	Если Не Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИнвентаризация.Инвентаризация") Тогда
		Если Не ЗначениеЗаполнено(Объект.Склад) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не указан склад";
			Сообщение.Поле = "Склад";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
	КонецЕсли;
		
	ОбновитьУчетНаСервере();
	
КонецПроцедуры


&НаСервере
Процедура ОбновитьУчетНаСервере()
	
	РеквизитОбъект = РеквизитФормыВЗначение("Объект");
	
	ТЗ_Учет = РеквизитОбъект.ПолучитьДанныеУчета(Истина,,,Истина);
	
	ВидОперацииИнвентаризация = Перечисления.ВидыОперацийИнвентаризация.Инвентаризация; 
	
	Для Каждого ТекСтрокаУчет Из Объект.Товары Цикл
		НайденныеСтроки = ТЗ_Учет.НайтиСтроки(новый Структура("Номенклатура", ТекСтрокаУчет.Номенклатура));
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденнаяСтрока = НайденныеСтроки[0];
			ТекСтрокаУчет.Количество = НайденнаяСтрока.Количество;
			ТекСтрокаУчет.Сумма 	   = НайденнаяСтрока.Сумма;
			ТекСтрокаУчет.ЦенаЗакупочная 	   = НайденнаяСтрока.ЦенаЗакупочная;
			ТекСтрокаУчет.КоличествоПрошлаяИнвПодснятие = ?(Объект.ВидОперации = ВидОперацииИнвентаризация, НайденнаяСтрока.КоличествоПрошлаяИнвПодснятие, 0);
			ТекСтрокаУчет.СуммаПрошлаяИнвПодснятие = ?(Объект.ВидОперации = ВидОперацииИнвентаризация, НайденнаяСтрока.СуммаПрошлаяИнвПодснятие, 0);
			//ИначеЕсли ЗначениеЗаполнено(ТекСтрокаУчет.Количество) Или ЗначениеЗаполнено(ТекСтрокаУчет.Сумма) Тогда 
			//	НайденнаяСтрока = Объект.Товары.Добавить();
			//	НайденнаяСтрока.Номенклатура = ТекСтрокаУчет.Номенклатура;
			//	НайденнаяСтрока.Количество = ТекСтрокаУчет.Количество;
			//	НайденнаяСтрока.Сумма 	   = ТекСтрокаУчет.Сумма;
		Иначе
			ТекСтрокаУчет.Количество = 0;
			ТекСтрокаУчет.Сумма 	   = 0;
			ТекСтрокаУчет.ЦенаЗакупочная 	   = 0;
			ТекСтрокаУчет.КоличествоПрошлаяИнвПодснятие = 0;
			ТекСтрокаУчет.СуммаПрошлаяИнвПодснятие = 0;
		КонецЕсли;
	КонецЦикла;
	
	ПересчитатьСуммыТоваров();
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьИнвентаризационнаяОпись(Команда)
	
	Если Модифицированность Или Не Объект.Проведен Тогда
		Предупреждение("Для печати документа его нужно провести");
		Возврат;
	КонецЕсли;
	
	Форма = ПолучитьФорму("Отчет.ИнвентаризационнаяОпись.ФормаОбъекта");
	КомпоновщикНастроек = Форма.Отчет.КомпоновщикНастроек;
	
	СтандартныеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек.ПользовательскиеНастройки, "ДатаНачала", НачалоДня(Объект.Дата));
	СтандартныеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек.ПользовательскиеНастройки, "ДатаОкончания", КонецДня(Объект.Дата));	
	СтандартныеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек.ПользовательскиеНастройки, "Подразделение", Объект.Подразделение);	
	СтандартныеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВидОперации", Объект.ВидОперации);	
	СтандартныеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ТолькоИнвентаризация", Ложь);	
	
	//Установим Отбор
	Для Каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если Строка(ЭлементОтбора.ЛевоеЗначение) = "ДокИнвентаризации" Тогда
			ИдНастройки = ЭлементОтбора.ИдентификаторПользовательскойНастройки;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементНастроек Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ЭлементНастроек.ИдентификаторПользовательскойНастройки = ИдНастройки Тогда
			ЭлементНастроек.ПравоеЗначение = Объект.Ссылка;
			ЭлементНастроек.Использование = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Форма.СкомпоноватьРезультат();
	
	Форма.Открыть();
	
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьРеализации(Команда)
	ЗагрузитьРеализацииНаСервере();
КонецПроцедуры


&НаСервере
Процедура ЗагрузитьРеализацииНаСервере()
	
	Если Не Объект.ДатаОкончания > Объект.Дата Тогда
		Сообщить("Проверьте даты начала и окончания инвентаризаций");
		Возврат;
	КонецЕсли;
	
	СвойствоКодУКМ = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Код УКМ (Подразделение)");
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СтруктураПредприятияДополнительныеРеквизиты.Значение
	|ИЗ
	|	Справочник.СтруктураПредприятия.ДополнительныеРеквизиты КАК СтруктураПредприятияДополнительныеРеквизиты
	|ГДЕ
	|	СтруктураПредприятияДополнительныеРеквизиты.Свойство = &Свойство
	|	И СтруктураПредприятияДополнительныеРеквизиты.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Свойство", СвойствоКодУКМ);
	Запрос.УстановитьПараметр("Ссылка", Объект.Подразделение);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КодУКМ = Выборка.Значение;
	Иначе 
		Сообщить("Не заполнен код УКМ подразделения");
		Возврат;
	КонецЕсли;
	
	//СтрокаСоединения = "DRIVER={MySQL ODBC 5.2 UNICODE Driver};SERVER=10.40.4.244;DATABASE=import;UID=root;PWD=CtHDbCGK.C;Option=3;";
	СтрокаСоединения = "DRIVER={MySQL ODBC 5.2 UNICODE Driver};SERVER=10.40.4.238;DATABASE=export_1c;UID=root;PWD=CtHDbCGK.C;Option=3;";
	
	Connection =Новый COMОбъект("ADODB.Connection");
	Connection.ConnectionString = СтрокаСоединения;
	Попытка
		Connection.Open();
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ТекстЗапроса = "SELECT 
	|    receipt_item.store,
	|    receipt_item.item,
	|    receipt_item.name,
	|    receipt_item.price,
	|    SUM(receipt_item.total_quantity * CASE WHEN receipt_item.type = 1 THEN 0 WHEN receipt_item.type = 2 THEN -1 ELSE 1 END * CASE WHEN receipt.type = 0 THEN 1 ELSE -1 END) as quantity_total,
	|    SUM(receipt_item.total          * CASE WHEN receipt_item.type = 1 THEN 0 WHEN receipt_item.type = 2 THEN -1 ELSE 1 END * CASE WHEN receipt.type = 0 THEN 1 ELSE -1 END) as sum_total,
	|    SUM(receipt_item.real_amount    * CASE WHEN receipt_item.type = 1 THEN 0 WHEN receipt_item.type = 2 THEN -1 ELSE 1 END * CASE WHEN receipt.type = 0 THEN 1 ELSE -1 END) as sum_real
	|FROM
	|    export_1c.receipt_item
	|    INNER JOIN export_1c.receipt 
	|        ON (receipt_item.receipt_header = receipt.id and receipt_item.cash_id = receipt.cash_id)   
	|WHERE
	|      receipt.date >= '&DateBegin' and receipt.date <= '&DateEnd'
	|      and receipt_item.store = '&Store'
	|      and receipt.result = 0
	|GROUP BY
	|     receipt_item.store,
	|     receipt_item.item,
	|     receipt_item.name,
	|     receipt_item.price
	| ORDER BY
	|     receipt_item.store";
	//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&DateBegin", Формат(НачалоДня(Объект.ДатаОкончания), "ДФ=гггг-ММ-дд"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&DateBegin", Формат(Объект.Дата, "ДФ='гггг-ММ-дд ЧЧ-мм-сс'")); //исправил д1, пусть играются точной датой
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&DateEnd", Формат(Объект.ДатаОкончания, "ДФ='гггг-ММ-дд ЧЧ-мм-сс'"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Store", КодУКМ);
	
	Попытка         
		RecordSet = Connection.Execute(ТекстЗапроса);
	Исключение 
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ТоварыРеализация = новый ТаблицаЗначений;
	ТоварыРеализация.Колонки.Добавить("Артикул", новый ОписаниеТипов("Строка",, новый КвалификаторыСтроки(13)));
	ТоварыРеализация.Колонки.Добавить("Количество", новый ОписаниеТипов("Число", новый КвалификаторыЧисла(15, 3)));
	
	
	Пока RecordSet.EOF()=0 Цикл
		
		НоваяСтрока = ТоварыРеализация.Добавить();
		НоваяСтрока.Артикул    = Формат(RecordSet.Fields("item").Value, "ЧГ=0");
		//НоваяСтрока.Номенклатура = Справочники.Номенклатура.НайтиПоКоду(НоваяСтрока.Артикул);
		НоваяСтрока.Количество = RecordSet.Fields("quantity_total").Value;
		
		RecordSet.MoveNext();
		
	КонецЦикла;
	
	RecordSet.Close();
	Connection.Close();
	
	//Формирование таблицы-результата
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("ВТ_ТолькоАртикулы", ТоварыРеализация);
	Запрос.УстановитьПараметр("ТЧ_Товары", Объект.Товары.Выгрузить(, "Номенклатура"));
	Запрос.Текст = "ВЫБРАТЬ
	|	ВТ_ТолькоАртикулы.Артикул,
	|	ВТ_ТолькоАртикулы.Количество
	|ПОМЕСТИТЬ ВТ_ТолькоАртикулы
	|ИЗ
	|	&ВТ_ТолькоАртикулы КАК ВТ_ТолькоАртикулы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Учет.Номенклатура
	|ПОМЕСТИТЬ ВТ_Учет
	|ИЗ
	|	&ТЧ_Товары КАК ВТ_Учет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТолькоАртикулы.Артикул,
	|	ВТ_ТолькоАртикулы.Количество КАК Количество,
	|	НоменклатураСсылка.Ссылка КАК Номенклатура
	|ИЗ
	|	ВТ_ТолькоАртикулы КАК ВТ_ТолькоАртикулы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСсылка
	|		ПО ВТ_ТолькоАртикулы.Артикул = НоменклатураСсылка.Код";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НайденныеСтроки = Объект.Товары.НайтиСтроки(новый Структура("Номенклатура", Выборка.Номенклатура));
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденнаяСтрока = НайденныеСтроки[0];
			НайденнаяСтрока.КоличествоРеализация = Выборка.Количество;
		КонецЕсли;
	КонецЦикла;
	
	ПересчитатьСуммыТоваров();
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммыТоваров()
	
	Для Каждого ТекСтрока Из Объект.Товары Цикл
		
		ЦенаУчет = ?(ТекСтрока.Количество <> 0, ТекСтрока.Сумма / ТекСтрока.Количество, ТекСтрока.ЦенаЗакупочная);
		ТекСтрока.СуммаФакт = (ТекСтрока.КоличествоФакт + ТекСтрока.КоличествоРеализация) * ЦенаУчет;
		
		ТекСтрока.КоличествоОтклонение = (ТекСтрока.КоличествоФакт + ТекСтрока.КоличествоРеализация) - ТекСтрока.Количество - ТекСтрока.КоличествоПрошлаяИнвПодснятие;
		ТекСтрока.СуммаОтклонение 	   = ТекСтрока.СуммаФакт - ТекСтрока.Сумма - ТекСтрока.СуммаПрошлаяИнвПодснятие;
	КонецЦикла;
	
КонецПроцедуры

#Область ПоискПоШК

&НаКлиенте
Процедура ПодобратьНоменклатуруПоШК(Команда)
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	ИмяТЧ = "Товары";
	ИмяРеквизитаНоменклатуры = "Номенклатура";
	ИмяРеквизитаКоличества = "КоличествоФакт";
	сабОперОбщегоНазначенияНаКлиенте.ОбработатьЗаполнениеПоШтрихкодуНаКлиенте(ЭтаФорма, ИмяТЧ, ИмяРеквизитаНоменклатуры, ИмяРеквизитаКоличества, Штрихкод);	
	//ТабличнаяЧастьНоменклатураПриИзменении(Неопределено);
	РежимСканирования = Истина;
	Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыКоличествоФакт;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ТоварыКоличествоФактПриИзменении(Элемент)
	Если РежимСканирования Тогда
		ПодобратьНоменклатуруПоШК(Неопределено);
		Элементы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГруппыНоменклатурыПриАктивизацииСтроки(Элемент)
	ТекДанные = Элементы.ГруппыНоменклатуры.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		Если ТекДанные.НомГруппа = "Все группы" Тогда
			Элементы.Товары.ОтборСтрок = Неопределено;
		Иначе	
			Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("НомГруппа", ТекДанные.НомГруппа));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ВидОперацииПриИзмененииНаСервере();
	ВидноГруппы = ОперБлокВключен И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИнвентаризация.Инвентаризация") И НЕ Объект.РазбиватьНаИнгредиенты;
	Элементы.ГруппыНоменклатуры.Видимость = ВидноГруппы;
	Элементы.ГруппаНоменклатуры.Видимость = НЕ ВидноГруппы; 

	Элементы.ТоварыКоличествоПрошлаяПодснятие.Видимость = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИнвентаризация.Инвентаризация"));
	Элементы.ТоварыСуммаПрошлаяИнвПодснятие.Видимость = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИнвентаризация.Инвентаризация"));
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	
	ЗаполнитьСводПоГруппам();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНомГруппы(Команда)
	ЗаполнитьСводПоГруппам();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	Если Не ТекДанные = Неопределено Тогда
	ТекДанные.НомГруппа = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.Номенклатура, "Отдел").Отдел;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Элементы.ГруппыНоменклатуры.Видимость Тогда
		ТекДанные = Элементы.ГруппыНоменклатуры.ТекущиеДанные;
		Если Не ТекДанные = Неопределено Тогда
			ТекНомГруппа = ТекДанные.НомГруппа;
		Иначе
			ТекНомГруппа = Неопределено;
		КонецЕсли;
	Иначе
		ТекНомГруппа = Неопределено;
	КонецЕсли;
	
	//Если ОперБлокВключен И НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИнвентаризация.Подснятие") И НЕ ТекНомГруппа = "Все группы" И НЕ Объект.РазбиватьНаИнгредиенты Тогда
	//	Предупреждение("Ручное добавление строк в режиме инвентаризации доступно только при выбранной группе ""Все группы""!");
	//	Отказ = Истина;	
	//КонецЕсли;
	
	Если Объект.РазбиватьНаИнгредиенты Тогда
		Предупреждение("Ручное добавление строк в режиме разбивания на ингридиенты невозможно!");
		Отказ = Истина;	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ЗаполнитьСводПоГруппам();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)   
	ВидОперацииПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		РеквизитыПодразделения = БюджетныйНаСервере.ВернутьРеквизиты(Объект.Подразделение, "Склад, Организация");
		Объект.Склад = РеквизитыПодразделения.Склад;
		Объект.Организация = РеквизитыПодразделения.Организация;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолуфабрикатыИГПНоменклатураПриИзменении(Элемент)
	
	ТекДанные = Элементы.ПолуфабрикатыИГП.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		ТекДанные.Спецификация = ТабличнаяЧастьНоменклатураПриИзмененииНаСервере(ТекДанные.Номенклатура);
		Если ЗначениеЗаполнено(ТекДанные.Спецификация) Тогда
			УстановитьМатериалыПоСпецификации(ТекДанные.Спецификация, ТекДанные.Количество, ТекДанные.УИД);
		Иначе
			ПеревестиВИнгредиенты(ТекДанные.Номенклатура, ТекДанные.Количество, ТекДанные.УИД);
		КонецЕсли;	
		Элементы.Материалы.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("УИДТЧ", Элементы.ПолуфабрикатыИГП.ТекущиеДанные.УИД));
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТабличнаяЧастьНоменклатураПриИзмененииНаСервере(ТекНоменклатура, ДопОтборПоТипу = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Спецификации.Ссылка
	|ИЗ
	|	Справочник.Спецификации КАК Спецификации
	|ГДЕ
	|	Спецификации.Продукция = &Продукция
	|	И ВЫБОР
	|			КОГДА &ДопОтборПоТипу = НЕОПРЕДЕЛЕНО
	|				ТОГДА Спецификации.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыСпецификаций.Полуфабрикат)
	|						ИЛИ Спецификации.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыСпецификаций.ГотоваяПродукция)
	|			ИНАЧЕ Спецификации.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыСпецификаций.Полуфабрикат)
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Спецификации.Дата УБЫВ";
	Запрос.УстановитьПараметр("Продукция", ТекНоменклатура);
	Запрос.УстановитьПараметр("ДопОтборПоТипу", ДопОтборПоТипу);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
	Возврат Справочники.Спецификации.ПустаяСсылка();
	
КонецФункции

&НаСервере
Процедура ПеревестиВИнгредиенты(ТекНоменклатура, ПервоначальноеКоличество, ТекУИД)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПереводовВИнгредиентыСрезПоследних.Ингридиент,
	|	ТаблицаПереводовВИнгредиентыСрезПоследних.КоэффициентПеревода
	|ИЗ
	|	РегистрСведений.ТаблицаПереводовВИнгредиенты.СрезПоследних(&Период, Номенклатура = &Номенклатура) КАК ТаблицаПереводовВИнгредиентыСрезПоследних
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ТаблицаПереводовВИнгредиентыСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ТаблицаПереводовВИнгредиентыСрезПоследних.ДатаОкончания >= &Период
	|		КОНЕЦ";
	Запрос.УстановитьПараметр("Период", ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()));
	Запрос.УстановитьПараметр("Номенклатура", ТекНоменклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаМинусом = Новый ТаблицаЗначений;
	ТаблицаМинусом.Колонки.Добавить("Номенклатура");
	ТаблицаМинусом.Колонки.Добавить("Количество");
	
	ТаблицаМатериалов = Объект.Материалы.Выгрузить();
	
	ПодчиненныеСтроки = ТаблицаМатериалов.НайтиСтроки(Новый Структура("УИДТЧ", ТекУИД));
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		СтрокаМинусом = ТаблицаМинусом.Добавить();
		СтрокаМинусом.Номенклатура = ПодчиненнаяСтрока.Материал;
		СтрокаМинусом.Количество = ПодчиненнаяСтрока.Количество; 
		ТаблицаМатериалов.Удалить(ПодчиненнаяСтрока);	
	КонецЦикла;	
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураПеревода = Новый Структура;
		СтруктураПеревода.Вставить("Ингридиент", Выборка.Ингридиент);
		СтруктураПеревода.Вставить("КоэффициентПеревода", Выборка.КоэффициентПеревода);
	КонецЦикла;
	
	СтрокаТаблМатериалов = ТаблицаМатериалов.Добавить();
	СтрокаТаблМатериалов.Коэффициент = СтруктураПеревода.КоэффициентПеревода;
	СтрокаТаблМатериалов.Количество = ПервоначальноеКоличество * СтрокаТаблМатериалов.Коэффициент;
	СтрокаТаблМатериалов.Материал = СтруктураПеревода.Ингридиент;
	СтрокаТаблМатериалов.УИДТЧ = ТекУИД;
	
	Объект.Материалы.Загрузить(ТаблицаМатериалов);
	
	ДозаполнитьТаблицаТоваровМатериаламиНаСервере(ТаблицаМинусом);
	
КонецПроцедуры	
	
&НаСервере
Процедура УстановитьМатериалыПоСпецификации(ТекСпецификация, ПервоначальноеКоличество, ТекУИД)
	
	ТаблицаМинусом = Новый ТаблицаЗначений;
	ТаблицаМинусом.Колонки.Добавить("Номенклатура");
	ТаблицаМинусом.Колонки.Добавить("Количество");
		
	ТаблицаМатериалов = Объект.Материалы.Выгрузить();
	
	ПодчиненныеСтроки = ТаблицаМатериалов.НайтиСтроки(Новый Структура("УИДТЧ", ТекУИД));
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		СтрокаМинусом = ТаблицаМинусом.Добавить();
		СтрокаМинусом.Номенклатура = ПодчиненнаяСтрока.Материал;
		СтрокаМинусом.Количество = ПодчиненнаяСтрока.Количество; 
		ТаблицаМатериалов.Удалить(ПодчиненнаяСтрока);	
	КонецЦикла;	
	
	ЗапросПоСпецификациям = Новый Запрос;
	ЗапросПоСпецификациям.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(Спецификации.Дата) КАК Дата,
	|	Спецификации.Продукция
	|ПОМЕСТИТЬ ВТ_ПоследнииСпецификации
	|ИЗ
	|	Справочник.Спецификации КАК Спецификации
	|ГДЕ
	|	НЕ Спецификации.Ссылка.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыСпецификаций.Разруб)
	|	И НЕ Спецификации.Ссылка.ПометкаУдаления
	|	И НЕ Спецификации.Ссылка В (&СписокСпецификаций)
	|	И Спецификации.Дата <= &Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	Спецификации.Продукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпецификацииСостав.Ссылка КАК Спецификация,
	|	СпецификацииСостав.Ссылка.Продукция,
	|	СпецификацииСостав.Материал,
	|	СпецификацииСостав.Ссылка.Дата КАК Дата,
	|	СпецификацииСостав.МассаБрутто,
	|	СпецификацииСостав.ОтходыПриХолоднойОбработке,
	|	СпецификацииСостав.МассаНетто,
	|	СпецификацииСостав.ПотериПриТепловойОбработке,
	|	СпецификацииСостав.Ссылка.Выход
	|ИЗ
	|	ВТ_ПоследнииСпецификации КАК ВТ_ПоследнииСпецификации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Спецификации.Состав КАК СпецификацииСостав
	|		ПО ВТ_ПоследнииСпецификации.Дата = СпецификацииСостав.Ссылка.Дата
	|			И ВТ_ПоследнииСпецификации.Продукция = СпецификацииСостав.Ссылка.Продукция
	|ГДЕ
	|	НЕ СпецификацииСостав.Ссылка.ПометкаУдаления
	|	И НЕ СпецификацииСостав.Ссылка.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыСпецификаций.Разруб)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СпецификацииСостав.Ссылка,
	|	СпецификацииСостав.Ссылка.Продукция,
	|	СпецификацииСостав.Материал,
	|	СпецификацииСостав.Ссылка.Дата,
	|	СпецификацииСостав.МассаБрутто,
	|	СпецификацииСостав.ОтходыПриХолоднойОбработке,
	|	СпецификацииСостав.МассаНетто,
	|	СпецификацииСостав.ПотериПриТепловойОбработке,
	|	СпецификацииСостав.Ссылка.Выход
	|ИЗ
	|	Справочник.Спецификации.Состав КАК СпецификацииСостав
	|ГДЕ
	|	СпецификацииСостав.Ссылка В(&СписокСпецификаций)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	ЗапросПоСпецификациям.УстановитьПараметр("СписокСпецификаций", ТекСпецификация);
	ЗапросПоСпецификациям.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата())); 
	РезультатЗапроса = ЗапросПоСпецификациям.Выполнить();
	ТаблицаСпецификаций = РезультатЗапроса.Выгрузить();
	
	//Если выпуск по спецификации, то спишем сразу материалы в производство
	Если ЗначениеЗаполнено(ТекСпецификация) Тогда
		НайденныйСоставСпецификаций = ТаблицаСпецификаций.НайтиСтроки(Новый Структура("Спецификация", ТекСпецификация));
		Для Каждого СоставСпецификаций Из НайденныйСоставСпецификаций Цикл
			ТекКоэф = СоставСпецификаций.МассаБрутто / СоставСпецификаций.Выход;
			//находим подчиненные спецификации
			СоставПодчиненнойСпецификации = ТаблицаСпецификаций.НайтиСтроки(Новый Структура("Продукция", СоставСпецификаций.Материал));
			Если СоставПодчиненнойСпецификации.Количество() > 0 Тогда
				Для Каждого СтрокаПодчиненнойСпецификации Из СоставПодчиненнойСпецификации Цикл
					СоставПодчиненнойСпецификации2 = ТаблицаСпецификаций.НайтиСтроки(Новый Структура("Продукция", СтрокаПодчиненнойСпецификации.Материал));
					Если СоставПодчиненнойСпецификации2.Количество() > 0 Тогда
						Для Каждого СтрокаПодчиненнойСпецификации2 Из СоставПодчиненнойСпецификации2 Цикл
							СоставПодчиненнойСпецификации3 = ТаблицаСпецификаций.НайтиСтроки(Новый Структура("Продукция", СтрокаПодчиненнойСпецификации2.Материал));
							Если СоставПодчиненнойСпецификации3.Количество() > 0 Тогда
								Для Каждого СтрокаПодчиненнойСпецификации3 Из СоставПодчиненнойСпецификации3 Цикл
									СоставПодчиненнойСпецификации4 = ТаблицаСпецификаций.НайтиСтроки(Новый Структура("Продукция", СтрокаПодчиненнойСпецификации3.Материал));
									Если СоставПодчиненнойСпецификации4.Количество() > 0 Тогда
										Для Каждого СтрокаПодчиненнойСпецификации4 Из СоставПодчиненнойСпецификации4 Цикл
											СтрокаТаблМатериалов = ТаблицаМатериалов.Добавить();
											СтрокаТаблМатериалов.Коэффициент = ТекКоэф * СтрокаПодчиненнойСпецификации.МассаБрутто * СтрокаПодчиненнойСпецификации2.МассаБрутто * СтрокаПодчиненнойСпецификации3.МассаБрутто * СтрокаПодчиненнойСпецификации4.МассаБрутто / (СтрокаПодчиненнойСпецификации.Выход * СтрокаПодчиненнойСпецификации2.Выход * СтрокаПодчиненнойСпецификации3.Выход * СтрокаПодчиненнойСпецификации4.Выход);
											СтрокаТаблМатериалов.Количество = ПервоначальноеКоличество * СтрокаТаблМатериалов.Коэффициент;
											СтрокаТаблМатериалов.Материал = СтрокаПодчиненнойСпецификации4.Материал;
											СтрокаТаблМатериалов.УИДТЧ = ТекУИД;
										КонецЦикла;	
									Иначе
										СтрокаТаблМатериалов = ТаблицаМатериалов.Добавить();
										СтрокаТаблМатериалов.Коэффициент = ТекКоэф * СтрокаПодчиненнойСпецификации.МассаБрутто * СтрокаПодчиненнойСпецификации2.МассаБрутто * СтрокаПодчиненнойСпецификации3.МассаБрутто / (СтрокаПодчиненнойСпецификации.Выход * СтрокаПодчиненнойСпецификации2.Выход * СтрокаПодчиненнойСпецификации3.Выход);
										СтрокаТаблМатериалов.Количество = ПервоначальноеКоличество * СтрокаТаблМатериалов.Коэффициент;
										СтрокаТаблМатериалов.Материал = СтрокаПодчиненнойСпецификации3.Материал;
										СтрокаТаблМатериалов.УИДТЧ = ТекУИД;
									КонецЕсли;
								КонецЦикла;	
							Иначе
								СтрокаТаблМатериалов = ТаблицаМатериалов.Добавить();
								СтрокаТаблМатериалов.Коэффициент = ТекКоэф * СтрокаПодчиненнойСпецификации.МассаБрутто * СтрокаПодчиненнойСпецификации2.МассаБрутто / (СтрокаПодчиненнойСпецификации.Выход * СтрокаПодчиненнойСпецификации2.Выход);
								СтрокаТаблМатериалов.Количество = ПервоначальноеКоличество * СтрокаТаблМатериалов.Коэффициент;
								СтрокаТаблМатериалов.Материал = СтрокаПодчиненнойСпецификации2.Материал;
								СтрокаТаблМатериалов.УИДТЧ = ТекУИД;
							КонецЕсли;
						КонецЦикла;
					Иначе
						СтрокаТаблМатериалов = ТаблицаМатериалов.Добавить();	
						СтрокаТаблМатериалов.Коэффициент = ТекКоэф * СтрокаПодчиненнойСпецификации.МассаБрутто / СтрокаПодчиненнойСпецификации.Выход;
						СтрокаТаблМатериалов.Количество = ПервоначальноеКоличество * СтрокаТаблМатериалов.Коэффициент;
						СтрокаТаблМатериалов.Материал = СтрокаПодчиненнойСпецификации.Материал;
						СтрокаТаблМатериалов.УИДТЧ = ТекУИД;
					КонецЕсли;
				КонецЦикла;
			Иначе
				СтрокаТаблМатериалов = ТаблицаМатериалов.Добавить();
				СтрокаТаблМатериалов.Коэффициент = ТекКоэф;
				СтрокаТаблМатериалов.Количество = СтрокаТаблМатериалов.Коэффициент * ПервоначальноеКоличество;
				СтрокаТаблМатериалов.Материал = СоставСпецификаций.Материал;
				СтрокаТаблМатериалов.УИДТЧ = ТекУИД;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;	
	//
	
	Объект.Материалы.Загрузить(ТаблицаМатериалов);
	
	ДозаполнитьТаблицаТоваровМатериаламиНаСервере(ТаблицаМинусом);
	
КонецПроцедуры	

&НаКлиенте
Процедура ПолуфабрикатыИГПСпецификацияПриИзменении(Элемент)
	
	ТекДанные = Элементы.ПолуфабрикатыИГП.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		УстановитьМатериалыПоСпецификации(ТекДанные.Спецификация, ТекДанные.Количество, ТекДанные.УИД);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолуфабрикатыИГПКоличествоПриИзменении(Элемент)
	
	ТекДанные = Элементы.ПолуфабрикатыИГП.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		ПересчитатьКоличествоПоСпецификации(ТекДанные.Количество, ТекДанные.УИД);
		ДозаполнитьТаблицаТоваровМатериаламиНаСервере();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКоличествоПоСпецификации(ПервоначальноеКоличество, ТекУИД)

	СтрокиМатериалов = Объект.Материалы.НайтиСтроки(Новый Структура("УИДТЧ", ТекУИД));
	Для Каждого СтрокаМатериала Из СтрокиМатериалов Цикл
		СтрокаМатериала.Количество = СтрокаМатериала.Коэффициент * ПервоначальноеКоличество;	
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолуфабрикатыИГППриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.УИД = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	Если Копирование Тогда
		ПолуфабрикатыИГПНоменклатураПриИзменении(Неопределено);	
		ПолуфабрикатыИГПКоличествоПриИзменении(Неопределено);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДозаполнитьТаблицаТоваровМатериаламиНаСервере(ТаблицаМинусом = Неопределено)
	
	Если Не ТаблицаМинусом = Неопределено Тогда
		Для Каждого СтрокаМинусом Из ТаблицаМинусом Цикл
			НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", СтрокаМинусом.Номенклатура));
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НовоеКоличество = Окр(НайденнаяСтрока.КоличествоФакт - СтрокаМинусом.Количество, 4);
				Если НовоеКоличество <=0 Тогда
					Объект.Товары.Удалить(НайденнаяСтрока);
				Иначе 
					НайденнаяСтрока.КоличествоФакт = НовоеКоличество;
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаМатериалов = Объект.Материалы.Выгрузить();
	ТаблицаМатериалов.Свернуть("Материал", "Количество");
	
	Для Каждого СтрокаМатериалов Из ТаблицаМатериалов Цикл
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", СтрокаМатериалов.Материал));
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТовары = Объект.Товары.Добавить();
			СтрокаТовары.Номенклатура = СтрокаМатериалов.Материал;
			СтрокаТовары.КоличествоФакт = СтрокаМатериалов.Количество;
		Иначе
			//НайденнаяСтрока.КоличествоФакт = 0;
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.КоличествоФакт = СтрокаМатериалов.Количество;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;	
	
	ПересчитатьСуммыТоваров();
	
КонецПроцедуры	

&НаКлиенте
Процедура ПолуфабрикатыИГППередУдалением(Элемент, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолуфабрикатыИГППередУдалениемНаСервере(ТекДанные.УИД);
		
КонецПроцедуры

&НаСервере
Процедура ПолуфабрикатыИГППередУдалениемНаСервере(ТекУИД)
	
	
	ТаблицаМинусом = Новый ТаблицаЗначений;
	ТаблицаМинусом.Колонки.Добавить("Номенклатура");
	ТаблицаМинусом.Колонки.Добавить("Количество");
	
	СтрокиМатериалов = Объект.Материалы.НайтиСтроки(Новый Структура("УИДТЧ", ТекУИД));
	Для Каждого СтрокаМатериала Из СтрокиМатериалов Цикл
		СтрокаМинусом = ТаблицаМинусом.Добавить();
		СтрокаМинусом.Номенклатура = СтрокаМатериала.Материал;
		СтрокаМинусом.Количество = СтрокаМатериала.Количество; 
		Объект.Материалы.Удалить(СтрокаМатериала);	
	КонецЦикла;
	
	ДозаполнитьТаблицаТоваровМатериаламиНаСервере(ТаблицаМинусом);
	
КонецПроцедуры	

&НаКлиенте
Процедура РазбиватьНаИнгредиентыПриИзменении(Элемент)
	
	Элементы.Группа13.Видимость = Объект.РазбиватьНаИнгредиенты;
	ВидноГруппы = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИнвентаризация.Инвентаризация") И НЕ Объект.РазбиватьНаИнгредиенты;
	Элементы.ГруппыНоменклатуры.Видимость = ВидноГруппы;
	Элементы.ГруппаНоменклатуры.Видимость = НЕ ВидноГруппы; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПолуфабрикатыИГППриАктивизацииСтроки(Элемент)
	Если НЕ Элементы.ПолуфабрикатыИГП.ТекущиеДанные = Неопределено И ЗначениеЗаполнено(Элементы.ПолуфабрикатыИГП.ТекущиеДанные.УИД) Тогда
		Элементы.Материалы.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("УИДТЧ", Элементы.ПолуфабрикатыИГП.ТекущиеДанные.УИД));
	//Иначе
	//	Элементы.Материалы.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НоваяСтрока И НЕ Элементы.ПолуфабрикатыИГП.ТекущиеДанные = Неопределено И НЕ Элементы.Материалы.ТекущиеДанные = Неопределено Тогда
		Элементы.Материалы.ТекущиеДанные.УИДТЧ = Элементы.ПолуфабрикатыИГП.ТекущиеДанные.УИД;
	КонецЕсли;
	ДозаполнитьТаблицаТоваровМатериаламиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Элементы.ПолуфабрикатыИГП.ТекущиеДанные = Неопределено И НЕ Элементы.Материалы.ТекущиеДанные = Неопределено Тогда
		Элементы.Материалы.ТекущиеДанные.УИДТЧ = Элементы.ПолуфабрикатыИГП.ТекущиеДанные.УИД;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МатериалыМатериалОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Спецификация = ТабличнаяЧастьНоменклатураПриИзмененииНаСервере(ВыбранноеЗначение, ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Полуфабрикаты"));
	Если ЗначениеЗаполнено(Спецификация) Тогда
		СтандартнаяОбработка = Ложь;
		ОписаниеОповещения = Новый ОписаниеОповещения("ОписаниеВопроса", ЭтотОбъект, Новый Структура("Спецификация, Номенклатура", Спецификация, ВыбранноеЗначение));
		ПоказатьВопрос(ОписаниеОповещения, "Данная номенклатура имеет спецификации! Добавить по ингридиентам?",РежимДиалогаВопрос.ДаНетОтмена, 60);
	КонецЕсли;
КонецПроцедуры

//Вынести в отдельную процедуру
&НаКлиенте
Процедура ОписаниеВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		РазложитьСтрокуНаСпецификациюКлиент(ДополнительныеПараметры);
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда 
		Элементы.Материалы.ТекущиеДанные.Материал = ДополнительныеПараметры.Номенклатура;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РазложитьСтрокуНаСпецификациюКлиент(ДополнительныеПараметры)
	Элементы.Материалы.ЗакончитьРедактированиеСтроки(Истина);
	ЭтаФорма.ТекущийЭлемент = Элементы.ПолуфабрикатыИГП;
	Элементы.ПолуфабрикатыИГП.ДобавитьСтроку();
	Элементы.ПолуфабрикатыИГП.ТекущиеДанные.Номенклатура = ДополнительныеПараметры.Номенклатура;
	ПолуфабрикатыИГПНоменклатураПриИзменении(Элементы.ПолуфабрикатыИГПНоменклатура);
	Элементы.ПолуфабрикатыИГП.ТекущийЭлемент = Элементы.ПолуфабрикатыИГПКоличество;
КонецПроцедуры


&НаКлиенте
Процедура ПолуфабрикатыИГППриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ПолуфабрикатыИГППриАктивизацииСтроки(Неопределено);
КонецПроцедуры


&НаКлиенте
Процедура МатериалыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ТекДанные = Элементы.ПолуфабрикатыИГП.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено И ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
		Предупреждение("Добавлять строки в заполненную спецификацию запрещено!"); 
	    Отказ = Истина;
	ИначеЕсли ТекДанные = Неопределено Тогда
		Предупреждение("Нет выделенных строк в таблице полуфабрикатов! Добавление строки невозможно!"); 
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

// СтандартныеПодсистемы.КонтактнаяИнформация

// Поддержка дополнительных реквизитов.

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		Если МодульУправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбновитьЭлементыДополнительныхРеквизитов();
			МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПредприятиеПриИзмененииНаСервере()
	сабОбщегоНазначенияКлиентСервер.СкрытьПодразделения(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеПриИзменении(Элемент)
	ПредприятиеПриИзмененииНаСервере();
КонецПроцедуры




// Конец СтандартныеПодсистемы.КонтактнаяИнформация
