
#Область ОбработчикиСобытийФормы
/////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.СостояниеДокумента = Перечисления.Д_СостоянияДокументов.НаПодготовке;
		Объект.Автор = ПараметрыСеанса.ТекущийПользователь;
		Объект.Инициатор = Объект.Автор;
		Элементы.ДатаОплаты.Доступность = Истина;
		
		//ДатаНачала = ТекущаяДата();
		//ДниДоСрока = 0;
		//РабочийДень = Ложь;
		//Пока НЕ РабочийДень = Истина Цикл
		//	ГодКалендаря = Год(ДатаНачала);		
		//	Календарь = Справочники.Календари.НайтиПоНаименованию(Формат(ГодКалендаря,"ЧГ=0"), Истина);
		//	РабочийДень = БПСервер.ПолучитьПризнакРабочегоДня(Календарь,ГодКалендаря,НачалоДня(ДатаНачала + (ДниДоСрока + 1) * 24 * 60 * 60));
		//	Если РабочийДень = Неопределено Тогда
		//		ДниДоСрока = 1;
		//		Прервать;	
		//	КонецЕсли;
		//	ДниДоСрока = ДниДоСрока + 1;
		//КонецЦикла;
		//Объект.ДатаОплаты = ДатаНачала + ДниДоСрока * 24*60*60;
		Объект.ДатаОплаты = НачалоДня(ТекущаяДата()) + 18*60; //попробуем на сегодняшний день
		
		СтатусТочкаМаршрута =  "На подготовке";
		
	Иначе
		БП = БПСервер.ПоискБП("Согласование1", Объект.Ссылка);
		
		Если БП = Неопределено Тогда
			Элементы.ДатаОплаты.Доступность = Истина;
		ИначеЕсли Объект.Автор = БюджетныйНаСервере.ПолучитьПользователя() 
						И (БПСервер.ПолучитьТекущуюТочкуМаршрута(Объект.Ссылка) = Перечисления.Согласование1ТочкиМаршрута.Действие1
						   ИЛИ БПСервер.ПолучитьТекущуюТочкуМаршрута(Объект.Ссылка) = Перечисления.Согласование1ТочкиМаршрута.Действие2) Тогда
			Элементы.ДатаОплаты.Доступность = Истина;
		КонецЕсли;
		
		СтатусТочкаМаршрута = БПСервер.ПолучитьТекущуюТочкуМаршрута(Объект.Ссылка);
		
	КонецЕсли;
	
	//ЗаполнитьИНН();
	сабОбщегоНазначения.ОбновитьКоличествоПрикрепленныхФайловСервер(ЭтаФорма);
	
	Если Параметры.Свойство("РежимВосстановления") и Параметры.РежимВосстановления Тогда
		сабОбщегоНазначения.ВосстановлениеРеквизитовФормы(ЭтаФорма);
		РежимВосстановления = Истина;
	Иначе 
		РежимВосстановления = Ложь;
	КонецЕсли;
	
	Для Каждого Строка Из Объект.ЗаявкаБезнал Цикл
		
		Если ЗначениеЗаполнено(Строка.Валюта) Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.Валюта = Объект.Предприятие.ОсновнаяВалютаУчета;
	КонецЦикла;
	
	БюджетныйНаСервере.ДействияПриСозданииФормыДокумента(ЭтаФорма);
	
	
	//если уже есть БП по документу, то не отражаем кнопки запуска БП
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекБП = БПСервер.НайтиТекущийБПСервер(Объект.Ссылка);
	Иначе	
		ТекБП = Неопределено;
	КонецЕсли;
	
	СтадияРезультирующегоСогласования = БПСервер.СравнитьСтадию("Действие4", Объект.Ссылка);
	РольОФКДоступна = БюджетныйНаСервере.РольДоступнаСервер("ОФК");
	
	ЕстьБП = НЕ ТекБП = Неопределено;
	//Если Не Элементы.Найти("ФормаДокументД_ЗаявкаНаОплатуСогласовать") = Неопределено Тогда
	//	Элементы.ФормаДокументД_ЗаявкаНаОплатуСогласовать.Видимость = НЕ ЕстьБП;
	//КонецЕсли;
	Элементы.ФормаЗаписатьИЗакрыть.Видимость = ЕстьБП;
	Элементы.ФормаЗаписатьИЗакрыть.КнопкаПоУмолчанию = ЕстьБП;
	
	УстановитьДоступностьФормы(ТекБП, ЕстьБП, РольОФКДоступна, СтадияРезультирующегоСогласования);

	ЭтоСводныйРеестр = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеестраОплат.СводныйРеестрПлатежей");
	ЭтоОбщийРеестр = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеестраОплат.ОбщийРеестрПлатежей");
	
	//ограничиваем тип на источнике
	Если НЕ ЭтоОбщийРеестр Тогда
		Массив = Новый Массив;
		Массив.Добавить(Тип("СправочникСсылка.Кассы"));
		ОписаниеТиповКассы = Новый ОписаниеТипов(Массив);
		Элементы.ЗаявкаИсточник.ОграничениеТипа = ОписаниеТиповКассы;//
	Иначе
		Массив = Новый Массив;
		Массив.Добавить(Тип("СправочникСсылка.Кассы"));
		Массив.Добавить(Тип("СправочникСсылка.БанковскиеСчета"));
		ОписаниеТиповКассы = Новый ОписаниеТипов(Массив);
		Элементы.ЗаявкаИсточник.ОграничениеТипа = ОписаниеТиповКассы;//
		НовыйМассив = Новый Массив();
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ЗаявкаИсточник.СвязиПараметровВыбора = НовыеСвязи;
	КонецЕсли;
	
	Если ЭтоСводныйРеестр Тогда //связи убираем
		НовыйМассив = Новый Массив();
		Если ЗначениеЗаполнено(Объект.Предприятие) И НЕ Объект.Предприятие.ЭтоГруппа Тогда
			НовыйМассив.Добавить(Новый СвязьПараметраВыбора("Отбор.Предприятие", "Объект.Предприятие"));
		КонецЕсли;
		НовыйМассив.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы.Заявка.ТекущиеДанные.Организация"));
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ЗаявкаБанковскийСчет.СвязиПараметровВыбора = НовыеСвязи;
		Если Объект.Предприятие.ЭтоГруппа Тогда
			НовыйМассив = Новый Массив();
			НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
			Элементы.ЗаявкаИсточник.СвязиПараметровВыбора = НовыеСвязи;
		Иначе
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(Новый СвязьПараметраВыбора("Отбор.Предприятие", "Объект.Предприятие"));
			НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
			Элементы.ЗаявкаИсточник.СвязиПараметровВыбора = НовыеСвязи;	
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьСтрокиТЧ();
	КонецЕсли;
	
	ВозможностьРазрешитьРедактирование(ТекБП, ДоступностьФормы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьФормы(ТекБП, ЕстьБП, РольОФКДоступна, СтадияРезультирующегоСогласования)

	ДоступностьФормы = Ложь;
	
	ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ИспользоватьБизнесПроцессы", Истина);
	Если ЗначениеЗаполнено(ТекЭл) И ТекЭл.Значение Тогда
		Если Не Элементы.Найти("ФормаДокументД_ЗаявкаНаОплатуСогласовать") = Неопределено Тогда
			Элементы.ФормаДокументД_ЗаявкаНаОплатуСогласовать.Видимость = Не ЕстьБП;
			Элементы.ФормаДокументД_ЗаявкаНаОплатуСогласовать.КнопкаПоУмолчанию = Не ЕстьБП;
		КонецЕсли;
		Элементы.ФормаПровестиИЗакрыть.Видимость = Ложь;
		Элементы.СтатусТочкаМаршрута.Видимость = Истина;
	Иначе
		Если Не Элементы.Найти("ФормаДокументД_ЗаявкаНаОплатуСогласовать") = Неопределено Тогда
			Элементы.ФормаДокументД_ЗаявкаНаОплатуСогласовать.Видимость = Ложь;
		КонецЕсли;
		Элементы.СтатусТочкаМаршрута.Видимость = Ложь;
	КонецЕсли;
	
	Если ЕстьБП Тогда
		РеквизитыБП = БюджетныйНаСервере.ВернутьРеквизиты(ТекБП, "ОснованиеЗаблокирован, Завершен");
		ДоступностьФормы = РеквизитыБП.ОснованиеЗаблокирован;
		БПЗавершен = РеквизитыБП.Завершен;
		//если автор открыл заявку и состояние заявке не на оплате
		//Если ((Объект.Автор = БюджетныйНаСервере.ПолучитьПользователя() И НЕ СтадияРезультирующегоСогласования) ИЛИ РольОФКДоступна) 
		//	И НЕ БПСервер.СравнитьСтадию("Действие5", Объект.Ссылка) И НЕ БПЗавершен
		//	И ДоступностьФормы Тогда
		//	
		//	Элементы.Заявка.ИзменятьПорядокСтрок = Ложь;
		//	Элементы.Заявка.ИзменятьСоставСтрок = Ложь;
		//	Элементы.ЗаявкаГруппа8.ТолькоПросмотр = Истина;//
		//	Элементы.ЗаявкаИсточник.ТолькоПросмотр = Ложь;//
		//	Элементы.ЗаявкаСуммаДДС.ТолькоПросмотр = Истина;//
		//	
		//Иначе
			
			//Если СтадияРезультирующегоСогласования И Объект.ТипИсточника = ВернутьНалТипИсточника() Тогда
			//	
			//	Элементы.ЗаявкаГруппа8.ТолькоПросмотр = Истина;//
			//	Элементы.ЗаявкаГруппа9.ТолькоПросмотр = Истина;//
			//	Элементы.ЗаявкаГруппа1.ТолькоПросмотр = Истина;//
			//	Элементы.ЗаявкаГруппа3.ТолькоПросмотр = Истина;//
			//	Элементы.ЗаявкаГруппа2.ТолькоПросмотр = Истина;//
			//	Элементы.ЗаявкаГруппа5.ТолькоПросмотр = Истина;//
			//	Элементы.ЗаявкаГруппа7.ТолькоПросмотр = Истина;//
			//	Элементы.ЗаявкаИсточник.ТолькоПросмотр = Ложь;//
			//	Элементы.Группа.Доступность = Ложь;
			//	Элементы.Группа2.Доступность = Ложь;
			//	Элементы.Группа11.Доступность = Ложь;
			//	Элементы.Группа16.ТолькоПросмотр = Истина;

			//	Если НЕ Элементы.Найти("ЗаявкаОтменитьСтроку") = Неопределено Тогда
			//		Элементы.ЗаявкаОтменитьСтроку.Видимость = Истина;
			//		Элементы.ЗаявкаОтменитьСтроку.Доступность = НЕ БПЗавершен;
			//	КонецЕсли;
			//	
			//	Если НЕ Элементы.Найти("ЗаявкаПодборЗаявкиНаФинансирование") = Неопределено Тогда
			//		Элементы.ЗаявкаПодборЗаявкиНаФинансирование.Доступность = Ложь;
			//	КонецЕсли;
			//	
			//Иначе
				
				Элементы.Заявка.ТолькоПросмотр = ДоступностьФормы;
				Элементы.ОстаткиПоИсточникам.ТолькоПросмотр = ДоступностьФормы;
				Элементы.ИсполнительОплаты.ТолькоПросмотр = ДоступностьФормы;
				Элементы.ОстаткиПоИсточникамПолучитьОстаток.Доступность = 1 - ДоступностьФормы;
				Элементы.Комментарий.ТолькоПросмотр = ДоступностьФормы;
				Элементы.Загрузить.Доступность = Не ДоступностьФормы;
				Элементы.Предприятие.Доступность = Не ДоступностьФормы;
				Элементы.Группа15.Доступность = Не ДоступностьФормы;
				Элементы.Группа16.ТолькоПросмотр = Истина;
				
				Если НЕ Элементы.Найти("ЗаявкаОтменитьСтроку") = Неопределено Тогда
					Элементы.ЗаявкаОтменитьСтроку.Видимость = ДоступностьФормы;
					Элементы.ЗаявкаОтменитьСтроку.Доступность = НЕ БПЗавершен;
				КонецЕсли;
				
				Если НЕ Элементы.Найти("ЗаявкаПодборЗаявкиНаФинансирование") = Неопределено Тогда
					Элементы.ЗаявкаПодборЗаявкиНаФинансирование.Доступность = Не ДоступностьФормы;
				КонецЕсли;

			//КонецЕсли;
			
		//КонецЕсли;
		//Элементы.СоздатьБП.Доступность = Ложь;
	Иначе
		Если НЕ Элементы.Найти("ЗаявкаОтменитьСтроку") = Неопределено Тогда
			Элементы.ЗаявкаОтменитьСтроку.Видимость = Ложь;	
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


&НаСервере
Процедура ВозможностьРазрешитьРедактирование(ТекБП, ТекДоступность)
	
	//Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
	//	Возврат;	
	//КонецЕсли;
	
	Если НЕ ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.Найти("ФормаГруппа1") = Неопределено И НЕ ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.Найти("ФормаГруппа1").ПодчиненныеЭлементы.Найти("ФормаДокументД_СлужебнаяЗапискаРазрешитьРедактирование") = Неопределено Тогда
		
		ЭтоДоработка = Ложь;
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Задача.ТочкаМаршрута КАК ТочкаМаршрута
			|ИЗ
			|	Справочник.Задача КАК Задача
			|ГДЕ
			|	Задача.Выполнена = ЛОЖЬ
			|	И Задача.Заявка = &Заявка
			|
			|СГРУППИРОВАТЬ ПО
			|	Задача.ТочкаМаршрута";
			
			Запрос.УстановитьПараметр("Заявка", Объект.Ссылка);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			ТекТочкаМаршрута = Неопределено;
			Пока Выборка.Следующий() Цикл
				ТекТочкаМаршрута = Выборка.ТочкаМаршрута;		
			КонецЦикла;
			ЭтоДоработка = НЕ БПСервер.ТочкиПроцессов("доработка").Найти(ТекТочкаМаршрута) = Неопределено;
		КонецЕсли;

		ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.Найти("ФормаГруппа1").ПодчиненныеЭлементы.Найти("ФормаДокументД_СлужебнаяЗапискаРазрешитьРедактирование").Видимость = ЭтоДоработка И ТекДоступность;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПредприятиеПриИзменении(Неопределено);
	
	ОбновитьЗаголовок();
	
	//ВидимостьКолонок();
	Элементы.ОтложенныйСтарт.Видимость = (Объект.Дата > КонецДня(ТекущаяДата()));
	
	Если Не РежимВосстановления Тогда
		ЭтаФорма.ПодключитьОбработчикОжидания("АвтосохранениеРеквизитовФормыНаКлиенте", 30);      
	КонецЕсли;
		
	ТипИсточникаПриИзменении(Неопределено);
	
	ЦФОПриИзменении(Неопределено);
	
	ВидОперацииПриИзменении(Неопределено);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) И Объект.ЗаявкаБезнал.Количество() Тогда
		ЗаполнитьОстатки();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	//ЭтоСводныйРеестр = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеестраОплат.СводныйРеестрПлатежей");
	Элементы.Группа19.Видимость = (НЕ ЭтоСводныйРеестр И НЕ ЭтоОбщийРеестр) ИЛИ ЗначениеЗаполнено(Объект.Предприятие);
	Элементы.Группа15.Видимость = НЕ ЭтоОбщийРеестр;
	Элементы.ТипИсточника.Видимость = НЕ ЭтоОбщийРеестр;
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Пересчитать" Тогда
		Закрыть();
	ИначеЕсли ИмяСобытия = "ПрикрепленныеФайлы" Тогда	
		сабОбщегоНазначенияКлиент.ОбновитьКоличествоПрикрепленныхФайлов(ЭтаФорма);
	ИначеЕсли ИмяСобытия = "ПроверкаСчетаВыполнена" Тогда //убираем двойную проверку счета //д1 24.05.16
		ПроверкаСчетаВыполнена = Истина;	
	//Иначе
	//	ПриОткрытии(Ложь);
	ИначеЕсли ИмяСобытия = "сабИзменитьСуммуВСтроке" Тогда //убираем двойную проверку счета //д1 24.05.16
		ОбновитьРасшифровку(Параметр);
		ЗаполнитьСтрокиТЧ();
	ИначеЕсли ИмяСобытия = "РазрешитьРедактированиеФормы" Тогда
		Прочитать();
		ПриСозданииНаСервере(Ложь, Истина);
		ПриОткрытии(Ложь);
	ИначеЕсли ИмяСобытия = "ПередатьНалогиВФорму" Тогда
		Если НЕ Параметр = Неопределено И Параметр.УИДФормы = ЭтаФорма.УникальныйИдентификатор Тогда
			ЗаполнитьЗначенияСвойств(Элементы.Заявка.ТекущиеДанные, Параметр);
		КонецЕсли;
		ЗаполнитьСтрокиТЧ();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРасшифровку(Параметр)
	ТекДанные = Элементы.Заявка.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		ТекДанные.СуммаДДС = Параметр.Сумма;
		ТекДанные.ВалютнаяСумма = Параметр.ВалютнаяСумма;
		ЗаявкаСтатьяДДСПриИзменении(ТекДанные);
		
		ОтобранныеСтроки = Объект.РасшифровкиСтрок.НайтиСтроки(Новый Структура("УИДСтрокиЗаявки", ТекДанные.УИДСтроки));
		Для каждого ТекСтрока Из ОтобранныеСтроки Цикл
			Объект.РасшифровкиСтрок.Удалить(ТекСтрока);		
		КонецЦикла; 
	КонецЕсли;
	
	Для каждого ТекСтрока Из Параметр.Расшифровка Цикл
		НоваяСтрока = Объект.РасшифровкиСтрок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);	
	КонецЦикла; 
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	//ТекПП = ?(ПустаяСтрока(БюджетныйНаСервере.ВернутьРеквизит(Объект.Предприятие, "Родитель")), Объект.Предприятие, БюджетныйНаСервере.ВернутьРеквизит(Объект.Предприятие, "Родитель"));
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Массив = ПроверкаСоответствияЗаявокРегистру();
		Для Каждого Номер Из Массив Цикл
			Если НЕ ЗначениеЗаполнено(Объект.ЗаявкаБезнал[Номер - 1].ЗаявкаНаФинансирование) Тогда
				Продолжить;			
			КонецЕсли;
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Поле = "ЗаявкиБезнал[" + Строка(Номер-1) + "].НомерСтроки";
			Сообщение.ПутьКДанным = "Объект";
			Сообщение.Текст = "Для строки " + Строка(Номер) + " не найдена соответствующая строка в регистре 'График платежей'. Возможно по данной заявке уже создан реестр платежей";
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	МассивСтруктурыСтрок = Новый Массив;
	Для каждого ТекСтрока Из Объект.ЗаявкаБезнал Цикл
		//Если Объект.Самооплата И НЕ Строка(ТекСтрока.ЦФО) = "Банк оф." Тогда
		//	ТекСтрока.ЦФО = ТекПП;		
		
		//КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Организация) И Элементы.Организация.Видимость Тогда
			ТекСтрока.Организация = Объект.Организация;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Источник) И Элементы.БанковскийСчет.Видимость Тогда
			ТекСтрока.Источник = Объект.Источник;
			ТекСтрока.БанковскийСчет = Объект.Источник;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ЦФО) Тогда
			ТекСтрока.ЦФО = Объект.ЦФО;
			ТекСтрока.Подразделение = Объект.ПодразделениеЦФО;
		ИначеЕсли ЗначениеЗаполнено(Объект.Предприятие) И Не ЗначениеЗаполнено(ТекСтрока.ЦФО) Тогда
			ТекСтрока.ЦФО = Объект.Предприятие;
			ТекСтрока.Подразделение = Объект.Подразделение;
		КонецЕсли;		

		
		Если ПустаяСтрока(ТекСтрока.Источник) Тогда
			ТекСтрока.Источник = ТекСтрока.БанковскийСчет;
		КонецЕсли;
		
		Если ТекСтрока.ВыдачаВПодОтчет Тогда
			ТекСтрока.СчетВзаиморасчетов = УЧ_Сервер.СчетПоКоду("71.01");
		Иначе
			ТекСтрока.СчетВзаиморасчетов = ПредопределенноеЗначение("ПланСчетов.Учетный.ПустаяСсылка");
		КонецЕсли;
		
		Если ПустаяСтрока(ТекСтрока.Подразделение) Тогда
			//Если Объект.Самооплата Тогда
			//	ТекСтрока.Подразделение = БюджетныйНаСервере.ВернутьРеквизит(Объект.Предприятие, "ВидДеятельности");
			//Иначе
			
			УчетПоПОдразделениям = БюджетныйНаСервере.ВернутьРеквизит(ТекСтрока.ЦФО, "УчетПоПодразделениям");
			Если НЕ УчетПоПОдразделениям Тогда
				ТекСтрока.Подразделение = БюджетныйНаСервере.ВернутьРеквизит(ТекСтрока.ЦФО, "ВидДеятельности");
			КонецЕсли;
			//КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекСтрока.НазначениеПлатежа) Тогда
			ТекСтрока.НазначениеПлатежа = ТекСтрока.НазначениеПлатежаБух;
		КонецЕсли;
				
		Если Не ЗначениеЗаполнено(ТекСтрока.ЦФО) Тогда
			
			Если Не БПСервер.ПолучитьКонстантуНаСервере("сабИспользоватьНесколькоПредприятий") Тогда
				ТекСтрока.ЦФО = Объект.Предприятие;
			КонецЕсли;
			
		КонецЕсли;
		
		//Если Объект.ТипИсточника = ПредопределенноеЗначение("Перечисление.Д_ИсточникиСредств.БезНал") И ЗначениеЗаполнено(ТекСтрока.ЗаявкаНаФинансирование) И СтрНайти(ТекСтрока.НазначениеПлатежаБух, "Сумма ") = 0 Тогда
		//	сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(Объект, "Не указана сумма в назначении платежа", "Объект.ЗаявкаБезнал", ТекСтрока.НомерСтроки, "НазначениеПлатежаБух", Ложь);
		//Иначе
		Если Объект.ТипИсточника = ПредопределенноеЗначение("Перечисление.Д_ИсточникиСредств.БезНал") Тогда
			//Если Не СтрНайти(ТекСтрока.НазначениеПлатежаБух, "Сумма ") = 0 Тогда
			//	сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(Объект, "Не нужно указывать сумму в назначении платежа", "Объект.ЗаявкаБезнал", ТекСтрока.НомерСтроки, "НазначениеПлатежаБух", Ложь);
			//КонецЕсли; 
			
			НазначениеПлат = ТекСтрока.НазначениеПлатежаБух;
			Если НЕ ТекСтрока.НазначениеПлатежаБух = "" Тогда
				СтруктураДанных = Новый Структура("НазначениеПлатежа, СуммаДокумента, СтавкаНДС, СуммаНДС", ТекСтрока.НазначениеПлатежаБух,ТекСтрока.СуммаДДС, ТекСтрока.СтавкаНДС, ТекСтрока.СуммаНДС);
				БюджетныйНаКлиенте.СформироватьНазначениеПлатежа(СтруктураДанных, НазначениеПлат, БюджетныйНаСервере.ВернутьРеквизиты(ТекСтрока.СтавкаНДС, "Ставка").Ставка = 0, Ложь);
				Если СтрДлина(НазначениеПлат) > 210 Тогда
					сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(Объект, "Длина назначения с расчетным НДС и суммой превышает 210 символов на " + Строка(СтрДлина(НазначениеПлат) - 210) + ".", "Объект.ЗаявкаБезнал", ТекСтрока.НомерСтроки, "НазначениеПлатежаБух", Ложь);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		
		Если Не ЗначениеЗаполнено(ТекСтрока.Валюта) Тогда
			ТекСтрока.Валюта = БюджетныйНаСервере.ВернутьРеквизит(Объект.Предприятие, "ОсновнаяВалютаУчета");
		КонецЕсли;
		
		//проставляем УИД в строках
		Если Не ЗначениеЗаполнено(ТекСтрока.УИДСтроки) Тогда
			ТекСтрока.УИДСтроки = новый УникальныйИдентификатор;	
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(ТекСтрока.КПППлательщика) Тогда
			ТекСтрока.КПППлательщика = БюджетныйНаСервере.ВернутьРеквизит(ТекСтрока.Организация, "КПП");
		КонецЕсли;

		//Проверка на организацию = договор.Организация и б/с.организация
		//Если ЗначениеЗаполнено(ТекСтрока.Договор) Тогда  	
		//	
		//	Если ТекСтрока.Организация <> БюджетныйНаСервере.ВернутьРеквизит(ТекСтрока.Договор, "Организация") И Объект.ТипИсточника = ПредопределенноеЗначение("Перечисление.Д_ИсточникиСредств.БезНал") Тогда 
		//	Отказ = Истина;
		//	
		//	Если Отказ Тогда
		//		сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(ЭтотОбъект, "Организация в договоре не совпадает с плательщиком!", "Объект.ЗаявкаБезнал", ТекСтрока.НомерСтроки, "Договор", Отказ);
		//	КонецЕсли;
		//	
		//	КонецЕсли;
		//	
		//КонецЕсли;	
		
		//Если ТекСтрока.Организация <> БюджетныйНаСервере.ВернутьРеквизит(ТекСтрока.БанковскийСчет, "Владелец") Тогда 
		//	Отказ = Истина;
		//	
		//	Если Отказ Тогда
		//		сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(Объект, "Организация в банковском счете не совпадает с плательщиком!", "Объект.ЗаявкаБезнал", ТекСтрока.НомерСтроки, "БанковскийСчет", Отказ);
		//	КонецЕсли;
		//	
		//КонецЕсли;
		
		//проверка на совпадение сумм со строками графика
		Если ЗначениеЗаполнено(ТекСтрока.ЗаявкаНаФинансирование) Тогда
			ДанныеСтроки = Новый Структура("ЗаявкаНаФинансирование, УИДСтроки, ДатаПлатежа, СуммаДДС, Источник", ТекСтрока.ЗаявкаНаФинансирование, ТекСтрока.УИДСтроки, ТекСтрока.ДатаПлатежа, ТекСтрока.СуммаДДС, ТекСтрока.Источник); 
			ПроверитьСоответствиеСуммаСтрокеГрафика(МассивСтруктурыСтрок, ДанныеСтроки);				
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого ТекСтрока Из Объект.РасшифровкиСтрок Цикл
		РеквизитыЦФО = БюджетныйНаСервере.ВернутьРеквизиты(ТекСтрока.ЦФО, "УчетПоПодразделениям, ВидДеятельности");
		
		Если Не ЗначениеЗаполнено(РеквизитыЦФО.УчетПоПодразделениям) Тогда
			РеквизитыЦФО.УчетПоПодразделениям = Ложь;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(РеквизитыЦФО.ВидДеятельности) Тогда
			РеквизитыЦФО.ВидДеятельности = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
		КонецЕсли;
		
		Если НЕ РеквизитыЦФО.УчетПоПодразделениям И Не ЗначениеЗаполнено(ТекСтрока.Подразделение) Тогда
			ТекСтрока.Подразделение = РеквизитыЦФО.ВидДеятельности;		
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = 1 - ПроверитьЗаполнение();
	
	ПараметрыЗаписи.Вставить("Отказ", Отказ); 
	
	сабОбщегоНазначения.ОчиститьАвтосохраненияОбъекта(Объект.Ссылка);
	//ПроставитьКрасымПерерасходДЛяВсехСтрок();
	
	//ПараметрыЗаписи.Вставить("ТекИсполнитель", БюджетныйНаСервере.ВернутьРеквизит(Объект.Ссылка, "ИсполнительОплаты"));
	
	Если НЕ ПараметрыЗаписи.Свойство("ПроверятьСуммы") И МассивСтруктурыСтрок.Количество() Тогда
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтотОбъект, Новый Структура("МассивСтруктурыСтрок", МассивСтруктурыСтрок)), "Найдены строки с измененными суммами. Перенести остаток оплаты по данным строкам на следующий день?", РежимДиалогаВопрос.ДаНет); 
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	МассивСтруктурыСтрок = ДополнительныеПараметры.МассивСтруктурыСтрок;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да  Тогда
		НоваяДата = БПСервер.ВернутьСледующийРабочийДень(ТекущаяДата());
		ПоказатьВводДаты(Новый ОписаниеОповещения("ГрафикПеренестиНаДатуЗавершение", ЭтаФорма, Новый Структура("МассивСтруктурыСтрок", МассивСтруктурыСтрок)), НоваяДата, "Введите дату платежа", ЧастиДаты.Дата);
	Иначе
		Записать(Новый Структура("ПроверятьСуммы", Ложь));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГрафикПеренестиНаДатуЗавершение(Дата, ДополнительныеПараметры) Экспорт
	
	Если (Дата <> Неопределено) Тогда
		
		Если Дата < ТекущаяДата() Тогда
			Сообщить("Дата платежа меньше текущей даты!");
			Возврат;		
		КонецЕсли;
		
		Для каждого ТекСтрокаСтруктуры Из ДополнительныеПараметры.МассивСтруктурыСтрок Цикл
			ПеренестиОплату(ТекСтрокаСтруктуры, Дата);		
		КонецЦикла;
		Записать(Новый Структура("ПроверятьСуммы", Ложь));
		Оповестить("сабОбноватьПлатежныйКалендарь");
		
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ЗаполнитьСтрокиТЧ();
	//ЗаполнитьИНН();
	
КонецПроцедуры

&НаСервере
Процедура ПерезаписатьЗаявкиНаОплату(Реестр)
	УстановитьПривилегированныйРежим(Истина);
	МассивЗаявокВТЧ = Новый Массив;
	Для каждого ТекСтрока Из Объект.ЗаявкаБезнал Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ЗаявкаНаФинансирование) И НЕ ТекСтрока.ОтменаОплаты Тогда
			ТекОб = ТекСтрока.ЗаявкаНаФинансирование.ПолучитьОбъект();
			ТекОб.РеестрЗаявок = Реестр;
			ТекОб.Записать();		
			МассивЗаявокВТЧ.Добавить(ТекСтрока.ЗаявкаНаФинансирование);
		КонецЕсли;	
	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Д_ЗаявкаНаФинансирование.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.Д_ЗаявкаНаФинансирование КАК Д_ЗаявкаНаФинансирование
	               |ГДЕ
	               |	Д_ЗаявкаНаФинансирование.РеестрЗаявок В(&РеестрЗаявок)
	               |	И НЕ Д_ЗаявкаНаФинансирование.Ссылка В (&МассивЗаявок)";
	
	Запрос.УстановитьПараметр("РеестрЗаявок", Реестр);
	Запрос.УстановитьПараметр("МассивЗаявок", МассивЗаявокВТЧ);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекОб = Выборка.Ссылка.ПолучитьОбъект();
		ТекОб.РеестрЗаявок = Неопределено;
		ТекОб.Записать();
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);	
КонецПроцедуры


&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	сабОбщегоНазначенияКлиент.ПослеЗаписиАвтосохраняемойФормы(ЭтаФорма);
	
	Оповестить("сабОбноватьПлатежныйКалендарь",,Объект.Ссылка);
	
	МассивЗаявок = Новый Массив;
	Для каждого ТекСтрока Из Объект.ЗаявкаБезнал Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ЗаявкаНаФинансирование) Тогда
			МассивЗаявок.Добавить(ТекСтрока.ЗаявкаНаФинансирование);		
		КонецЕсли;	
	КонецЦикла; 
	Оповестить("сабЗакрытьЗадачиВыполненияЗаявок", Новый Структура("Заявки", МассивЗаявок));
	
	Оповестить("ОбновитьСписокЗадач");
	
	Оповестить("ОбновитьПечатнуюФорму");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд
/////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	СтруктураПар = Новый Структура("РежимЗаписи, Отказ", РежимЗаписиДокумента.Проведение, Ложь);
	Записать(СтруктураПар);
	Если Не СтруктураПар.Отказ Тогда
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВставитьШаблон(Команда)
	ТекШаблон = ОткрытьФормуМодально("Справочник.Д_ШаблоныПлатежей.ФормаВыбора");
	ВставитьШаблонСервер(ТекШаблон);
КонецПроцедуры

&НаСервере
Процедура ВставитьШаблонСервер(ТекШаблон)
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ *
|ИЗ
|	Справочник.Д_ШаблоныПлатежей КАК Д_ШаблоныПлатежей
|ГДЕ
|	Д_ШаблоныПлатежей.Ссылка = &Ссылка";

Запрос.УстановитьПараметр("Ссылка", ТекШаблон);

Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();

Пока Выборка.Следующий() Цикл
	НоваяСтрока = Объект.ЗаявкаБезнал.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗаявки(Команда) Экспорт
	ОткрытьФорму("Документ.Д_ЗаявкаНаОплату.Форма.ФормаЗагрузки",,ЭтаФорма,,,,Новый ОписаниеОповещения("ЗагрузитьЗаявкиЗавершение", ЭтотОбъект) ,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗаявкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Не Результат = Неопределено Тогда
		ЗаполнитьИзФормыЗагрузки(Результат);
		ЗаполнитьСтрокиТЧ();
		ЗаполнитьОстатки();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИзФормыЗагрузки(МассивСтруктурЗагрузки)
	
	Для каждого ТекСтрока Из МассивСтруктурЗагрузки Цикл
		НоваяСтрока = Объект.ЗаявкаБезнал.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	
		//дозаполняем строки
		Если ЗначениеЗаполнено(Объект.Источник) Тогда
			ТекСтрока.Источник = Объект.Источник;		
		КонецЕсли;
		Если ТипЗнч(ТекСтрока.Источник) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			НоваяСтрока.БанковскийСчет = ТекСтрока.Источник;
			НоваяСтрока.Организация = ТекСтрока.Источник.Владелец;
			ТЗСрез = РегистрыСведений.Д_ИсточникПП.СрезПоследних(ТекущаяДата(), Новый Структура("БанковскиеСчета", ТекСтрока.Источник));
			Для каждого ТекСтрокаТЗ Из ТЗСрез Цикл
				НоваяСтрока.ЦФО = ТекСтрокаТЗ.Предприятие;
				НоваяСтрока.Подразделение = ТекСтрокаТЗ.Подразделение;			
			КонецЦикла;
			НоваяСтрока.РасшифровкаСтроки = "Нет";
			Если Не ЗначениеЗаполнено(НоваяСтрока.СчетКонтрагента) И ЗначениеЗаполнено(НоваяСтрока.Контрагент) Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	БанковскиеСчета.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.БанковскиеСчета КАК БанковскиеСчета
				|ГДЕ
				|	БанковскиеСчета.Владелец = &Владелец";
				
				Запрос.УстановитьПараметр("Владелец", НоваяСтрока.Контрагент);
				
				Результат = Запрос.Выполнить();
				Выборка = Результат.Выбрать();
				
				Если Выборка.Количество() = 1 Тогда
					Пока Выборка.Следующий() Цикл
						НоваяСтрока.СчетКонтрагента = Выборка.Ссылка;	
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(НоваяСтрока.Договор) И ЗначениеЗаполнено(НоваяСтрока.Контрагент) Тогда
				РеквизитыДоговора = сабОперОбщегоНазначения.ПолучитьДоговорКонтрагентаПоУмолчанию(НоваяСтрока.Контрагент, ?(НЕ ЗначениеЗаполнено(НоваяСтрока.Организация), Неопределено, НоваяСтрока.Организация));
				НоваяСтрока.Договор = РеквизитыДоговора.Договор;
			КонецЕсли;
		КонецЕсли;
		
		Если Не НоваяСтрока.СтавкаНДС = сабОбщегоНазначения.ПолучитьЭлементНДС("Произвольная") Тогда
			СтавкаНДС = сабОбщегоНазначения.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС);
			НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаДДС - (НоваяСтрока.СуммаДДС) / ((СтавкаНДС + 100) / 100);
			НоваяСтрока.СуммаНДСАвтоматическийРасчет = НоваяСтрока.СуммаДДС - (НоваяСтрока.СуммаДДС) / ((СтавкаНДС + 100) / 100);
		ИначеЕсли НЕ ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда 
			НоваяСтрока.СуммаНДС = 0;
			НоваяСтрока.СуммаНДСАвтоматическийРасчет = 0;
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольЛимитов(Команда)
	Сумма = 0;
	СуммаПлана = 0;
	Если Объект.ЗаявкаБезнал.Количество() Тогда
		
		ТекПП = Элементы.Заявка.ТекущиеДанные.ЦФО;
		
		ТекПодр = Элементы.Заявка.ТекущиеДанные.Подразделение;		
		ТекИнвПроект = ?(ЗначениеЗаполнено(Элементы.Заявка.ТекущиеДанные.ИнвПроект), Элементы.Заявка.ТекущиеДанные.ИнвПроект, Неопределено);
		ТекВалюта = ?(ЗначениеЗаполнено(Элементы.Заявка.ТекущиеДанные.Валюта), Элементы.Заявка.ТекущиеДанные.Валюта, УЧ_Сервер.НациональнаяВалюта());
		СтруктураПоиска = Новый Структура("СтатьяДДС, ЦФО, Подразделение", Элементы.Заявка.ТекущиеДанные.СтатьяДДС, ТекПП, ТекПодр);
		СчитатьПодразделения = Истина;
		//Если Объект.Самооплата Тогда
		//	Если НЕ БюджетныйНаСервере.ВедетсяУчетПоПодразделениям(Объект.Предприятие) Тогда
		//		СтруктураПоиска = Новый Структура("СтатьяДДС, ЦФО", Элементы.Заявка.ТекущиеДанные.СтатьяДДС, ТекПП);
		//		СчитатьПодразделения = Ложь;
		//	КонецЕсли;
		//Иначе
			//Если Объект.Предприятие = Элементы.Заявка.ТекущиеДанные.ЦФО ИЛИ БюджетныйНаСервере.ВернутьРеквизит(Объект.Предприятие, "Родитель") = Элементы.Заявка.ТекущиеДанные.ЦФО Тогда
				Если НЕ БюджетныйНаСервере.ВедетсяУчетПоПодразделениям(Элементы.Заявка.ТекущиеДанные.ЦФО) Тогда
					СтруктураПоиска = Новый Структура("СтатьяДДС, ЦФО", Элементы.Заявка.ТекущиеДанные.СтатьяДДС, Элементы.Заявка.ТекущиеДанные.ЦФО);
					СчитатьПодразделения = Ложь;
				КонецЕсли;
			//КонецЕсли;
		//КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекИнвПроект) Тогда
			СтруктураПоиска.Вставить("ИнвПроект", ТекИнвПроект);
		КонецЕсли;
		
		МассивСтрок = Объект.ЗаявкаБезнал.НайтиСтроки(СтруктураПоиска);
		Для каждого ТекСтрока Из МассивСтрок Цикл
			Сумма = Сумма + ТекСтрока.СуммаДДС;
		КонецЦикла;
		
		//СтруктураПоиска = Новый Структура("СтатьяДДС, ПереносЛимита", Элементы.Заявка.ТекущиеДанные.СтатьяДДС, Истина);
		//МассивСтрок = Объект.ЗаявкаБезнал.НайтиСтроки(СтруктураПоиска);
		//Для каждого ТекСтрока Из МассивСтрок Цикл
		//	СуммаПлана = СуммаПлана + ТекСтрока.СуммаДДС;
		//КонецЦикла;
		//Элементы.Группа1.Заголовок = "Контроль лимитов: " + Строка(Элементы.Заявка.ТекущиеДанные.СтатьяДДС);
		РасчитатьЛимиты(Элементы.Заявка.ТекущиеДанные.СтатьяДДС, Сумма, СуммаПлана, ТекПП, ТекПодр, ТекИнвПроект, ТекВалюта, СчитатьПодразделения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РасчитатьЛимиты(СтатьяДДС, ТекСумма, СуммаПлана, ЦФО, Подразделение, ИнвПроект, Валюта, СчитатьПодразделения)
	
	ПолныйПросмотрЛимитов = сабОбщегоНазначения.ПолучитьЗначениеСвойства(ПараметрыСеанса.ТекущийПользователь, ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПривилегированныйПросмотрЛимитов);

	Если ПолныйПросмотрЛимитов = Истина Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	РасчетПоТекущимДанным = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) И Не Модифицированность Тогда
		РезультатДанные = Документы.Д_ЗаявкаНаОплату.РасчитатьЛимиты(Объект.Ссылка);
		Факт = 0;
	Иначе
		РасчетПоТекущимДанным = Истина;
		СтруктураПараметровЛим = Новый Структура;
		СтруктураПараметровЛим.Вставить("Дата", Объект.Дата);
		СтруктураПараметровЛим.Вставить("СтатьяДДС", СтатьяДДС);
		СтруктураПараметровЛим.Вставить("Подразделение", Подразделение);
		СтруктураПараметровЛим.Вставить("ИнвПроект", ИнвПроект);
		СтруктураПараметровЛим.Вставить("ЦФО", ЦФО);
		СтруктураПараметровЛим.Вставить("ЭквивалентнаяВалюта", Валюта);
		РезультатДанные = Документы.Д_ЗаявкаНаОплату.РасчитатьЛимиты(Неопределено, СтруктураПараметровЛим);
		Факт = ТекСумма;
	КонецЕсли;

	ВыборкаДанные = РезультатДанные.Выбрать();
	
	Лимит = 0; Остаток = 0;
	
	Пока ВыборкаДанные.Следующий() Цикл
		Если ВыборкаДанные.СтатьяДДС = СтатьяДДС И ВыборкаДанные.ЦФО = ЦФО И ?(СчитатьПодразделения, ВыборкаДанные.Подразделение = Подразделение, Истина) И ?(ИнвПроект = Неопределено, Истина, ВыборкаДанные.ИнвПроект = ИнвПроект) Тогда
			Лимит = Лимит + ?(ЗначениеЗаполнено(ВыборкаДанные.Текущий), ВыборкаДанные.Текущий, 0);
			//Если Не РасчетПоТекущимДанным Тогда
				Факт = Факт + ?(ЗначениеЗаполнено(ВыборкаДанные.СуммаДДС), ВыборкаДанные.СуммаДДС, 0);
			//КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Остаток = Лимит - Факт;
	
КонецПроцедуры
 
&НаКлиенте
Процедура ОткрытьПриложение(Команда)
	Если НЕ Элементы.Заявка.ТекущиеДанные = Неопределено Тогда
		Если НЕ ПустаяСтрока(Элементы.Заявка.ТекущиеДанные.Приложение) Тогда
			ОткрытьЗначение(Элементы.Заявка.ТекущиеДанные.Приложение);			
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	ОткрытьФормумодально("Справочник.Пользователи.Форма.ФормаВыбораПодбор",,Элементы.Оповещения);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОстаток(Команда)
	Если Объект.ОстаткиПоИсточникам.Количество() Тогда
		Элементы.ОстаткиПоИсточникам.ТекущиеДанные.Сумма = РасчитатьОстаток(Элементы.ОстаткиПоИсточникам.ТекущиеДанные.Источник);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПеречисленияНалога(Команда)
	
	
	ТекСтрокаФормы = Элементы.Заявка.ТекущаяСтрока;
	
	ТекСтрока =  Объект.ЗаявкаБезнал.НайтиПоИдентификатору(ТекСтрокаФормы);
	
	СтрукрутаПараментров = Новый Структура("КодБК, КодОКАТО, ПоказательОснования, СтатусСоставителя, ПоказательНомера, ПоказательДаты, ПоказательТипа, ПоказательПериода, Доступность, УИН, УИДФормы, Налог, ВидНалоговогоОбязательства",
	ТекСтрока.КодБК, ТекСтрока.КодОКАТО, ТекСтрока.ПоказательОснования, ТекСтрока.СтатусСоставителя, ТекСтрока.ПоказательНомера, ТекСтрока.ПоказательДаты, ТекСтрока.ПоказательТипа, ТекСтрока.ПоказательПериода, ДоступностьФормы, ТекСтрока.УИН, УникальныйИдентификатор, 
		ТекСтрока.Налог, ТекСтрока.ВидНалоговогоОбязательства);
	СтруктураНалогов = ОткрытьФорму("Документ.Д_ЗаявкаНаОплату.Форма.ФормаНалогов", СтрукрутаПараментров);
	
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьШаблон(Команда)
	ТекИмя = "";
	Если ВвестиЗначение(ТекИмя, "Введите наименование шаблона") Тогда
		Если ТекИмя = "" Тогда
			Предупреждение("Пустая строка не может быть наименование шаблона.");
			Возврат;		
		КонецЕсли;
		ТекДанные = Элементы.Заявка.ТекущиеДанные;
		СтруктураШаблона = Новый Структура;
		СтруктураШаблона.Вставить("СтатьяДДС", ТекДанные.СтатьяДДС);
		СтруктураШаблона.Вставить("Контрагент", ТекДанные.Контрагент);
		СтруктураШаблона.Вставить("НазначениеПлатежа", ТекДанные.НазначениеПлатежа);
		СтруктураШаблона.Вставить("Организация", ТекДанные.Организация);
		СтруктураШаблона.Вставить("БанковскийСчет", ТекДанные.БанковскийСчет);
		СтруктураШаблона.Вставить("СчетКонтрагента", ТекДанные.СчетКонтрагента);
		СтруктураШаблона.Вставить("НазначениеПлатежаБух", ТекДанные.НазначениеПлатежаБух);
		СтруктураШаблона.Вставить("ЦФО", ТекДанные.ЦФО);
		СтруктураШаблона.Вставить("Источник", ТекДанные.Источник);
		СтруктураШаблона.Вставить("Ответственный", ТекДанные.Ответственный);
		СтруктураШаблона.Вставить("Примечание", ТекДанные.Примечание);
		СтруктураШаблона.Вставить("Приложение", ТекДанные.Приложение);
		СтруктураШаблона.Вставить("СтавкаНДС", ТекДанные.СтавкаНДС);
		СтруктураШаблона.Вставить("ВидОперации", ТекДанные.ВидОперации);
		СтруктураШаблона.Вставить("КодБК", ТекДанные.КодБК);
		СтруктураШаблона.Вставить("КодОКАТО", ТекДанные.КодОКАТО);
		СтруктураШаблона.Вставить("ПоказательОснования", ТекДанные.ПоказательОснования);
		СтруктураШаблона.Вставить("СтатусСоставителя", ТекДанные.СтатусСоставителя);
		СтруктураШаблона.Вставить("ПоказательНомера", ТекДанные.ПоказательНомера);
		СтруктураШаблона.Вставить("ПоказательДаты", ТекДанные.ПоказательДаты);
		СтруктураШаблона.Вставить("ПоказательТипа", ТекДанные.ПоказательТипа);
		СтруктураШаблона.Вставить("ПоказательПериода", ТекДанные.ПоказательПериода);
		Если Объект.Предприятие.Пустая() Тогда
			ТекПП = ОткрытьФормуМодально("Справочник.Предприятия.ФормаВыбора");
		Иначе
			ТекПП = Объект.Предприятие;
		КонецЕсли;
		Попытка
			СоздатьШаблон(ТекИмя, СтруктураШаблона, ТекПП);
			Предупреждение("Шаблон успешно сохранен.");
		Исключение
			Предупреждение("Ошибка сохранения шаблона.");
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СоздатьШаблон(ТекИмя, СтруктураШаблона, ТекПП)
	НовыйШаблон = Справочники.Д_ШаблоныПлатежей.СоздатьЭлемент();
	НовыйШаблон.Наименование = ТекИмя;
	НовыйШаблон.Предприятие = ТекПП;
	Для каждого ТекЗначение Из СтруктураШаблона Цикл
		НовыйШаблон[ТекЗначение.Ключ] = ТекЗначение.Значение;	
	КонецЦикла; 
	НовыйШаблон.Записать();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапки
/////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	Если Объект.Дата <= НачалоДня(ТекущаяДата()) И Не БюджетныйНаСервере.РольАдминаДоступнаСервер() Тогда
		Предупреждение("Невозможно указать дату заявки ранее текущего дня."); 
		Объект.Дата = ТекущаяДата();		
	КонецЕсли;
	Элементы.ОтложенныйСтарт.Видимость = (Объект.Дата > КонецДня(ТекущаяДата())); 
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеПриИзменении(Элемент)
	
	//Элементы.Подразаделение.Доступность = БюджетныйНаСервере.ВернутьРеквизит(Объект.Предприятие, "УчетПоПодразделениям");
	
	
	СписокПодразделений = ПолучитьПодразделения(Объект.Предприятие);
	БюджетныйНаКлиенте.ЗаполнитьСписокРеквизита(ЭтаФорма, "СписокВыбора_Подразаделение", СписокПодразделений, ?(Элемент = Неопределено, Объект.Подразделение, ""));
	
	//СписокИсполнителейОплаты = ПолучитьДоступныхИсполнителейОплаты(Объект.Предприятие, Объект.ТипИсточника, Объект.Самооплата);
	//БюджетныйНаКлиенте.ЗаполнитьСписокРеквизита(ЭтаФорма, "СписокВыбора_ИсполнительОплаты", СписокИсполнителейОплаты, ?(Элемент = Неопределено, Объект.ИсполнительОплаты, ""));
	
	
	
	Если НЕ Элемент = Неопределено Тогда //только при смене реквизита
		
		//Если Элементы.СписокВыбора_Подразаделение.СписокВыбора.Количество() Тогда
		//	Объект.Подразделение = Элементы.СписокВыбора_Подразаделение.СписокВыбора[0].Значение;
		//Иначе
		//	Элементы.СписокВыбора_Подразаделение.СписокВыбора.Добавить("");
		//	Объект.Подразделение = "";
		//КонецЕсли;
		//Если Не Объект.Самооплата Тогда
		//	Объект.ИсполнительОплаты = НайтиИсполнителя(Объект.Предприятие, Объект.Подразделение, Объект.ТипИсточника);
		//	Если ЗначениеЗаполнено(Объект.ИсполнительОплаты) Тогда
		//		Элементы.СписокВыбора_ИсполнительОплаты.СписокВыбора.Вставить(0,Объект.ИсполнительОплаты);
		//	ИначеЕсли Элементы.СписокВыбора_ИсполнительОплаты.СписокВыбора.Количество() Тогда
		//		Объект.ИсполнительОплаты = Элементы.СписокВыбора_ИсполнительОплаты.СписокВыбора[0].Значение;	
		//	КонецЕсли;
		//	ИсполнительОплатыПриИзменении(Элемент);
		//КонецЕсли;
	КонецЕсли;
	
	//ВидимостьКолонок();
	ПредприятиеПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПредприятиеПриИзмененииНаСервере()
	сабОбщегоНазначенияКлиентСервер.СкрытьПодразделения(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//Если Элементы.СписокВыбора_Предприятие.СписокВыбора.Количество() Тогда
	//	ТекЗначение = ВыбратьИзСписка(Элементы.СписокВыбора_Предприятие.СписокВыбора, Элемент, Элементы.СписокВыбора_Предприятие.СписокВыбора.НайтиПоЗначению(Объект.Предприятие));	
	//	БюджетныйНаКлиенте.ПриНачалеВыбораРеквизитаВСписке(ЭтаФорма, "СписокВыбора_Предприятие", ТекЗначение, "Предприятия", Объект.Предприятие, СтандартнаяОбработка, Истина);
	//	ПредприятиеПриИзменении(Элемент);
	//КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодразаделениеПриИзменении(Элемент)
	//Если Элементы.СписокВыбора_Подразаделение.СписокВыбора.Количество() И Элементы.СписокВыбора_Подразаделение.СписокВыбора.НайтиПоЗначению(Объект.Подразделение) = Неопределено Тогда
	//	Элементы.СписокВыбора_Подразаделение.СписокВыбора.Вставить(Элементы.СписокВыбора_Подразаделение.СписокВыбора.Количество() - 1, Объект.Подразделение);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразаделениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//Если Элементы.СписокВыбора_Подразаделение.СписокВыбора.Количество() Тогда
	//	ТекЗначение = ВыбратьИзСписка(Элементы.СписокВыбора_Подразаделение.СписокВыбора, Элемент, Элементы.СписокВыбора_Подразаделение.СписокВыбора.НайтиПоЗначению(Объект.Подразделение));	
	//	БюджетныйНаКлиенте.ПриНачалеВыбораРеквизитаВСписке(ЭтаФорма, "СписокВыбора_Подразаделение", ТекЗначение, "СтруктураПредприятия", Объект.Подразделение, СтандартнаяОбработка, Истина);
	//КонецЕсли;
КонецПроцедуры

 &НаКлиенте
 Процедура ТипИсточникаПриИзменении(Элемент)
	 
	 Если НЕ Элементы.Группа19.Видимость Тогда //если сводный реестр, то не назначаем типы
		 Если НЕ Элемент = Неопределено Тогда
			 Объект.Организация = "";
			 Объект.Источник = "";
		 КонецЕсли;
		 Возврат;	 
	 КонецЕсли;
	 
	 Если Объект.ТипИсточника = ПредопределенноеЗначение("Перечисление.Д_ИсточникиСредств.Нал") Тогда
		 
		 Если НЕ Элемент = Неопределено Тогда
			 
			 Объект.Организация = "";
			 Объект.Источник = "";
			 
			 Для Каждого Строка Из Объект.ЗаявкаБезнал Цикл
				 
				 Строка.СуммаНДС = 0;
				 Строка.СуммаНДСАвтоматическийРасчет = 0;
				 Строка.СтавкаНДС = "";
				 Строка.Организация = "";
				 Строка.БанковскийСчет = ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");
				 Строка.Источник = "";
				 
			 КонецЦикла;
		 КонецЕсли;

		 Массив = Новый Массив;
		 Массив.Добавить(Тип("СправочникСсылка.Кассы"));
		 ОписаниеТиповС = Новый ОписаниеТипов(Массив);
		 Элементы.БанковскийСчет.Заголовок = "Касса";
		 Элементы.БанковскийСчет.ОграничениеТипа = ОписаниеТиповС;
		 
		 Элементы.Организация.Видимость = Ложь;
		 Элементы.БанковскийСчет.Видимость = Истина;
		 
	 ИначеЕсли Объект.ТипИсточника = ПредопределенноеЗначение("Перечисление.Д_ИсточникиСредств.Казна") Тогда
		 Элементы.Организация.Видимость = Ложь;
		 Элементы.БанковскийСчет.Видимость = Ложь;
		 Если НЕ Элемент = Неопределено Тогда
			 
			 Объект.Организация = "";
			 Объект.Источник = ПредопределенноеЗначение("Справочник.Кассы.Виртуальный");
			 
			 Для Каждого Строка Из Объект.ЗаявкаБезнал Цикл
				 
				 Строка.СуммаНДС = 0;
				 Строка.СуммаНДСАвтоматическийРасчет = 0;
				 Строка.СтавкаНДС = "";
				 Строка.Организация = "";
				 Строка.БанковскийСчет = ПредопределенноеЗначение("Справочник.Кассы.Виртуальный");
				 Строка.Источник = "";
				 
			 КонецЦикла;
		 КонецЕсли;

	 Иначе
		 Если НЕ Элемент = Неопределено Тогда
			 Для каждого ТекСтрока Из Объект.ЗаявкаБезнал Цикл
				 
				 Если ЗначениеЗаполнено(ТекСтрока.БанковскийСчет) Тогда
					 ТекСтрока.Источник = ТекСтрока.БанковскийСчет;
				 КонецЕсли;
				 
			 КонецЦикла;
			 Объект.Организация = "";
			 Объект.Источник = "";
		 КонецЕсли;
		 
		 Массив = Новый Массив;
		 Массив.Добавить(Тип("СправочникСсылка.БанковскиеСчета"));
		 ОписаниеТиповС = Новый ОписаниеТипов(Массив);
		 Элементы.БанковскийСчет.Заголовок = "Банковский счет";
		 Элементы.БанковскийСчет.ОграничениеТипа = ОписаниеТиповС;
		 
		 Элементы.Организация.Видимость = Истина;
		 Элементы.БанковскийСчет.Видимость = Истина;

		 
	 КонецЕсли;
	 
 КонецПроцедуры
  

#КонецОбласти

#Область ОбработчикиСобытийТабличныхЧастей
/////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ЧАСТЕЙ

&НаКлиенте
Процедура ЗаявкаПриАктивизацииСтроки(Элемент)
	
	Если НЕ Элементы.Заявка.ТекущиеДанные = Неопределено Тогда
		//Элементы.ЗаявкаФормаПлатежногоПоручения.Доступность = (Элементы.Заявка.ТекущиеДанные.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога"));
		ТекНазначениеВСтроке = Элементы.Заявка.ТекущиеДанные.НазначениеПлатежаБух;	
	Иначе
		//Элементы.ЗаявкаФормаПлатежногоПоручения.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элементы.Заявка.ТекущиеДанные.РасшифровкаСтроки = "Нет";
		Элементы.Заявка.ТекущиеДанные.УИДСтроки = "";	
		Элементы.Заявка.ТекущиеДанные.ЗаявкаНаФинансирование = "";
		ТекНазначениеВСтроке = Элементы.Заявка.ТекущиеДанные.НазначениеПлатежаБух;
		Если НЕ Копирование Тогда
			Элементы.Заявка.ТекущиеДанные.ЦФО = Объект.ЦФО;
			Элементы.Заявка.ТекущиеДанные.Подразделение = Объект.ПодразделениеЦФО;
			Элементы.Заявка.ТекущиеДанные.Организация = Объект.Организация;
			Элементы.Заявка.ТекущиеДанные.БанковскийСчет = Объект.Источник;
			Элементы.Заявка.ТекущиеДанные.Источник = Объект.Источник;
			Элементы.Заявка.ТекущиеДанные.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.Оплата");
			Элементы.Заявка.ТекущиеДанные.ЭтоБезнал = Объект.ТипИсточника = ПредопределенноеЗначение("Перечисление.Д_ИсточникиСредств.БезНал") И НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеестраОплат.СводныйРеестрПлатежей");
			Если ТипЗнч(Элементы.Заявка.ТекущиеДанные.Источник) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
				РеквизитыСчета = БюджетныйНаСервере.ВернутьРеквизиты(Элементы.Заявка.ТекущиеДанные.Источник, "ВидСчета, Валютный");
				Элементы.Заявка.ТекущиеДанные.ВалютныйСчет = РеквизитыСчета.ВидСчета = ПредопределенноеЗначение("Перечисление.ГД_ВидыИсточников.ВалютныйРасчетныйСчет") ИЛИ РеквизитыСчета.Валютный;
			ИначеЕсли ТипЗнч(Элементы.Заявка.ТекущиеДанные.Источник) = Тип("СправочникСсылка.Кассы") Тогда	
				Элементы.Заявка.ТекущиеДанные.ВалютныйСчет = БюджетныйНаСервере.ВернутьРеквизиты(Элементы.Заявка.ТекущиеДанные.Источник, "ВидИсточника").ВидИсточника = ПредопределенноеЗначение("Перечисление.ГД_ВидыИсточников.ВалютныйРасчетныйСчет");
			КонецЕсли;
			ЗаявкаВидОперацииПриИзменении(Элемент);
		КонецЕсли;
	КонецЕсли;
	
	Если Не БПСервер.ПолучитьКонстантуНаСервере("сабИспользоватьНесколькоПредприятий") Тогда
		Элемент.ТекущиеДанные.ЦФО = БюджетныйНаСервере.ПолучитьПредприятие();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ Элементы.Заявка.ТекущиеДанные = Неопределено Тогда
		
		Если ПустаяСтрока(Элементы.Заявка.ТекущиеДанные.ЦФО) Тогда
			ТекПП = Объект.Предприятие; 
			Элементы.Заявка.ТекущиеДанные.ЦФО = ТекПП;	 
		КонецЕсли;
		
		//Если НЕ Элементы.Заявка.ТекущиеДанные.УчОснованиеДругое Тогда
		//	Элементы.Заявка.ТекущиеДанные.НазначениеПлатежа = Элементы.Заявка.ТекущиеДанные.НазначениеПлатежаБух; 
		//КонецЕсли;
		
		Если ЗначениеЗаполнено(Элементы.Заявка.ТекущиеДанные.Контрагент) И НЕ ТипЗнч(Элементы.Заявка.ТекущиеДанные.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Элементы.Заявка.ТекущиеДанные.ИННКонтрагента = БюджетныйНаСервере.ВернутьРеквизит(Элементы.Заявка.ТекущиеДанные.Контрагент, "ИНН");
		Иначе
			Элементы.Заявка.ТекущиеДанные.ИННКонтрагента = "";
		КонецЕсли;
		//ПроставитьКрасымПерерасходДЛяВсехСтрок();
		ТекНазначениеВСтроке = Элементы.Заявка.ТекущиеДанные.НазначениеПлатежаБух;
	КонецЕсли;
	
	ЗаполнитьСтрокиТЧ();
	
	ЗаполнитьОстатки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстатки()
	
	МассивНовых = Новый Массив;
	Для каждого ТекСтрока Из Объект.ЗаявкаБезнал Цикл
		Если НЕ Объект.ОстаткиПоИсточникам.НайтиСтроки(Новый Структура("Источник", ТекСтрока.Источник)).Количество()  Тогда
			Если МассивНовых.Найти(ТекСтрока.Источник) = Неопределено И ЗначениеЗаполнено(ТекСтрока.Источник) Тогда
				МассивНовых.Добавить(ТекСтрока.Источник);		
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла; 
	
	Если МассивНовых.Количество() Тогда
		ЗаполнитьОстаткиСервер(МассивНовых);	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстаткиСервер(МассивНовых)
	СоответствиеОстатков = РасчитатьОстаток(МассивНовых);
	Для каждого ТекИсточник Из МассивНовых Цикл
		НоваяСтрока = Объект.ОстаткиПоИсточникам.Добавить();
		НоваяСтрока.Источник = ТекИсточник;
	    НоваяСтрока.Сумма = СоответствиеОстатков.Получить(ТекИсточник);
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаЦФОПриИзменении(Элемент)
	
	ТекСтрока = Элементы.Заявка.ТекущиеДанные;	
	ТекСтрока.Подразделение = БюджетныйНаСервере.ВернутьРеквизит(ТекСтрока.ЦФО, "ВидДеятельности");
	ТекСтрока.Валюта = БюджетныйНаСервере.ВернутьРеквизит(Объект.Предприятие, "ОсновнаяВалютаУчета");
	
	Элементы.Заявка.ТекущиеДанные.УчетПоПодразделениям = БюджетныйНаСервере.ВернутьРеквизит(Элементы.Заявка.ТекущиеДанные.ЦФО, "УчетПоПодразделениям");
	//СоздатьСвязь(Строка(Элементы.Заявка.ТекущиеДанные.ЦФО) = "Казна");
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаЦФОНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//СтандартнаяОбработка = Ложь;
	//
	//Если Элементы.СписокВыбора_ЗаявкаЦФО.СписокВыбора.Количество() Тогда
	//	ТекЗначение = ВыбратьИзСписка(Элементы.СписокВыбора_ЗаявкаЦФО.СписокВыбора, Элемент, Элементы.СписокВыбора_ЗаявкаЦФО.СписокВыбора.НайтиПоЗначению(?(ЗначениеЗаполнено(Элементы.Заявка.ТекущиеДанные.ЦФО), Элементы.Заявка.ТекущиеДанные.ЦФО, Объект.Предприятие)));	
	//	БюджетныйНаКлиенте.ПриНачалеВыбораРеквизитаВСписке(ЭтаФорма, "СписокВыбора_ЗаявкаЦФО", ТекЗначение, "Предприятия", Элементы.Заявка.ТекущиеДанные.ЦФО, СтандартнаяОбработка, Истина);
	//	ЗаявкаЦФОПриИзменении(Элемент);
	//Иначе
	//	ТекПП = ?(ПустаяСтрока(Элементы.Заявка.ТекущиеДанные.ЦФО), Объект.Предприятие, Элементы.Заявка.ТекущиеДанные.ЦФО);
	//	ТекПП = ?(ПустаяСтрока(БюджетныйНаСервере.ВернутьРеквизит(ТекПП, "Родитель")), ТекПП,БюджетныйНаСервере.ВернутьРеквизит(ТекПП, "Родитель")); 
	//	ФормаВыб = ПолучитьФорму("Справочник.Предприятия.Форма.ФормаВыбора", Новый Структура("ТекущаяСтрока", ТекПП) , Элемент);
	//	ТекМассивПП = БюджетныйНаСервере.ПолучитьПредприятия();//, Объект.ИсполнительОплаты);
	//	ФормаВыб.Открыть();
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаЦФООбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	

	//ТекМассивПП = БюджетныйНаСервере.ПолучитьПредприятия(, Объект.ИсполнительОплаты);
	//Если НЕ ПустаяСтрока(ВыбранноеЗначение) И ТекМассивПП.Найти(ВыбранноеЗначение) = Неопределено Тогда
	//	СтандартнаяОбработка = Ложь;
	//	Предупреждение("Предприятие " + Строка(Элементы.Заявка.ТекущиеДанные.ЦФО) + " недоступно исполнителю оплаты " + Строка(Объект.ИсполнительОплаты));
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаПодразделениеПриИзменении(Элемент)
	   //КонтрольЛимитов(0);
 КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаПодразделениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
//	Если Строка(Элементы.Заявка.ТекущиеДанные.ЦФО) = "Казна" Тогда
		СтандартнаяОбработка = Ложь;
		ТекСтатья = Элементы.Заявка.ТекущиеДанные.СтатьяДДС;
		ТекПодразделение = Элементы.Заявка.ТекущиеДанные.Подразделение;
		
		аа = ПолучитьФорму("Справочник.СтруктураПредприятия.ФормаВыбора", Новый Структура("ТекущаяСтрока", ТекПодразделение), Элемент);
		НовыйОтбор = аа.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Владелец");
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		НовыйОтбор.ПравоеЗначение = Элементы.Заявка.ТекущиеДанные.ЦФО;
		//НовыйОтбор.ПравоеЗначение = Объект.Предприятие;
		аа.Открыть();
//	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаСтатьяДДСПриИзменении(Элемент)
	
	//КонтрольЛимитов(0);
	
	Если Не ТипЗнч(Элемент) = Тип("ДанныеФормыЭлементКоллекции") И Элемент.Имя = "ЗаявкаСуммаДДС" Тогда
		СтрокиРасшифровки = Объект.РасшифровкиСтрок.НайтиСтроки(Новый Структура("УИДСтрокиЗаявки", Элементы.Заявка.ТекущиеДанные.УИДСтроки));

		Если СтрокиРасшифровки.Количество() > 1 тогда
			ТекСуммаРасшифровки = 0;
			
			Для Каждого ТекЭлементСР Из СтрокиРасшифровки Цикл
				ТекСуммаРасшифровки = ТекСуммаРасшифровки + ТекЭлементСР.Сумма;
			КонецЦикла;
			
			сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(
			ЭтотОбъект, 
			"Невозможно изменить сумму поскольку в рашшифровке более 1 строки. Нужно менять сумму в расшифровке.", 
			"Объект.ЗаявкаБезнал", 
			Элементы.Заявка.ТекущиеДанные.НомерСтроки, 
			"СуммаДДС", 
			Истина);
			Элементы.Заявка.ТекущиеДанные.СуммаДДС = ТекСуммаРасшифровки;	
			Возврат;
		ИначеЕсли СтрокиРасшифровки.Количество() = 1 Тогда
			СтрокиРасшифровки[0].Сумма = Элементы.Заявка.ТекущиеДанные.СуммаДДС;
			СтрокиРасшифровки[0].ВалютнаяСумма = Элементы.Заявка.ТекущиеДанные.ВалютнаяСумма;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекСтатья = Элементы.Заявка.ТекущиеДанные.СтатьяДДС;
	//ВидимостьКолонок();
	
	Если Не БПСервер.СтатьяСырья(ТекСтатья) Тогда
		Элементы.Заявка.ТекущиеДанные.ЗаявкаНаЗакупку = "";
	КонецЕсли;
	
	Если Не РасчетыБюджет.СтатьяИнв(ТекСтатья) И Не РасчетыБюджет.СтатьяПредставительскихРасходов(ТекСтатья) Тогда
		Элементы.Заявка.ТекущиеДанные.ИнвПроект = "";
		Элементы.Заявка.ТекущиеДанные.СтатьяИнв = Ложь;
	Иначе
		Элементы.Заявка.ТекущиеДанные.СтатьяИнв = Истина;
	КонецЕсли;
	
	ВычислитьСуммуНДС();
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаВидОперацииПриИзменении(Элемент)
	ПеречислениеНалога = (Элементы.Заявка.ТекущиеДанные.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога"));
	Если Не ПеречислениеНалога И НЕ Элемент = Неопределено Тогда
		Элементы.Заявка.ТекущиеДанные.КодБК = "";
		Элементы.Заявка.ТекущиеДанные.КодОКАТО = "";
		Элементы.Заявка.ТекущиеДанные.ПоказательОснования = "";
		Элементы.Заявка.ТекущиеДанные.СтатусСоставителя = "";
		Элементы.Заявка.ТекущиеДанные.ПоказательНомера = "";
		Элементы.Заявка.ТекущиеДанные.ПоказательДаты = "0";
		Элементы.Заявка.ТекущиеДанные.ПоказательТипа = "";
		Элементы.Заявка.ТекущиеДанные.ПоказательПериода = "";
		Элементы.Заявка.ТекущиеДанные.УИН = "";
	КонецЕсли;
	
	Если Элементы.Заявка.ТекущиеДанные.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ОплатаВНХ") Тогда
		
		Если Не ТипЗнч(Элементы.Заявка.ТекущиеДанные.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
			Если НЕ (Элемент = Неопределено) Тогда
				Элементы.Заявка.ТекущиеДанные.Контрагент = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
				Элементы.Заявка.ТекущиеДанные.Договор = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
				Элементы.Заявка.ТекущиеДанные.СчетКонтрагента = ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");
			КонецЕсли
		КонецЕсли;
		
		//Если Не ТипЗнч(Элементы.Заявка.ТекущиеДанные.СчетКонтрагента) = Тип("СправочникСсылка.БанковскиеСчетаОрганизаций") Тогда
		//	Если НЕ (Элемент = Неопределено) Тогда
		//		Элементы.Заявка.ТекущиеДанные.СчетКонтрагента = ПредопределенноеЗначение("Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка");
		//	КонецЕсли;
		//КонецЕсли;
		
	ИначеЕсли Элементы.Заявка.ТекущиеДанные.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПеречислениеСотруднику") Тогда
		Если Не ТипЗнч(Элементы.Заявка.ТекущиеДанные.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Если НЕ (Элемент = Неопределено) Тогда
				Элементы.Заявка.ТекущиеДанные.Контрагент = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");		
				Элементы.Заявка.ТекущиеДанные.Договор = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
				Элементы.Заявка.ТекущиеДанные.СчетКонтрагента = ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");
			КонецЕсли;
		КонецЕсли;
		
		//Если Не ТипЗнч(Элементы.Заявка.ТекущиеДанные.СчетКонтрагента) = Тип("СправочникСсылка.БанковскиеСчетаКонтрагентов") Тогда
		//	Если НЕ (Элемент = Неопределено) Тогда
		//		Элементы.Заявка.ТекущиеДанные.СчетКонтрагента = ПредопределенноеЗначение("Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка");
		//	КонецЕсли
		//КонецЕсли;
		
		//Элементы.ЗаявкаДоговор.Доступность = Ложь;
	ИначеЕсли ПеречислениеНалога Тогда
		Элементы.Заявка.ТекущиеДанные.РеквизитыНалогов = "Налог. рекв.:" + Элементы.Заявка.ТекущиеДанные.КодБК + "; " + Элементы.Заявка.ТекущиеДанные.КодОКАТО + "; " + Элементы.Заявка.ТекущиеДанные.ПоказательОснования + "; " + Элементы.Заявка.ТекущиеДанные.ПоказательПериода + "; " + Элементы.Заявка.ТекущиеДанные.СтатусСоставителя;
	Иначе
		Если Не ТипЗнч(Элементы.Заявка.ТекущиеДанные.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			Если НЕ (Элемент = Неопределено) Тогда
				Элементы.Заявка.ТекущиеДанные.Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");		
				Элементы.Заявка.ТекущиеДанные.Договор = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
				Элементы.Заявка.ТекущиеДанные.СчетКонтрагента = ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");		
			КонецЕсли;
		КонецЕсли;
		
		//Если Не ТипЗнч(Элементы.Заявка.ТекущиеДанные.СчетКонтрагента) = Тип("СправочникСсылка.БанковскиеСчетаКонтрагентов") Тогда
		//	Если НЕ (Элемент = Неопределено) Тогда
		//		Элементы.Заявка.ТекущиеДанные.СчетКонтрагента = ПредопределенноеЗначение("Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка");		
		//	КонецЕсли
		//КонецЕсли;
		
		//Если Элементы.Заявка.ТекущиеДанные.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога") Тогда
		//	Элементы.РеквизитыДляПеречисленияНалога.Доступность = Истина;
		//Иначе
		//	Элементы.РеквизитыДляПеречисленияНалога.Доступность = Ложь;
		//КонецЕсли;
	КонецЕсли;
	
	//Элементы.ЗаявкаФормаПлатежногоПоручения.Доступность = ПеречислениеНалога;
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаСтавкаНДСПриИзменении(Элемент)
	ВычислитьСуммуНДС()	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаСуммаНДСПриИзменении(Элемент)
	
	СтавкаНДС = БюджетныйНаСервере.ВернутьРеквизит(Элементы.Заявка.ТекущиеДанные.СтавкаНДС, "Ставка");
	
	СуммаНДС_18 = Окр(Элементы.Заявка.ТекущиеДанные.СуммаДДС - (Элементы.Заявка.ТекущиеДанные.СуммаДДС) / ((100 + СтавкаНДС) / 100), 2);
	
	Если Элементы.Заявка.ТекущиеДанные.СуммаНДС > (СуммаНДС_18 + 1) И НЕ Элементы.Заявка.ТекущиеДанные.СтавкаНДС = ПредопределенноеЗначение("Справочник.СтавкиНДС.Произвольная") Тогда
		ТекстСообщения = "Сумма НДС превышает " + СтавкаНДС + "% (" + СуммаНДС_18 + ") в строке №" + Элементы.Заявка.ТекущиеДанные.НомерСтроки;
		сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(Объект, ТекстСообщения, "Объект.ЗаявкаБезнал", Элементы.Заявка.ТекущиеДанные.НомерСтроки, "СуммаНДС", Истина);
		Элементы.Заявка.ТекущиеДанные.СуммаНДС = 0
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаОрганизацияПриИзменении(Элемент)
	
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении(Элементы.Заявка.ТекущиеДанные.Организация, Объект.Предприятие);
	
	Элементы.Заявка.ТекущиеДанные.БанковскийСчет = СтруктураДанные.БанковскийСчет;
	Элементы.Заявка.ТекущиеДанные.Источник = СтруктураДанные.Источник;
	Элементы.Заявка.ТекущиеДанные.КПППлательщика = СтруктураДанные.КПППлательщика;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//Если Элементы.СписокВыбора_ЗаявкаОрганизация.СписокВыбора.Количество() Тогда
	//	ТекЗначение = ВыбратьИзСписка(Элементы.СписокВыбора_ЗаявкаОрганизация.СписокВыбора, Элемент, Элементы.СписокВыбора_ЗаявкаОрганизация.СписокВыбора.НайтиПоЗначению(Элементы.Заявка.ТекущиеДанные.Организация));	
	//	БюджетныйНаКлиенте.ПриНачалеВыбораРеквизитаВСписке(ЭтаФорма, "СписокВыбора_ЗаявкаОрганизация", ТекЗначение, "Организации", Элементы.Заявка.ТекущиеДанные.Организация, СтандартнаяОбработка, Истина);
	//	ЗаявкаОрганизацияПриИзменении(Неопределено);
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаБанковскийСчетПриИзменении(Элемент)
	Элементы.Заявка.ТекущиеДанные.Источник = Элементы.Заявка.ТекущиеДанные.БанковскийСчет;
	РеквизитыСчета = БюджетныйНаСервере.ВернутьРеквизиты(Элементы.Заявка.ТекущиеДанные.Источник, "ВидСчета, Валютный");
	Элементы.Заявка.ТекущиеДанные.ВалютныйСчет = РеквизитыСчета.ВидСчета = ПредопределенноеЗначение("Перечисление.ГД_ВидыИсточников.ВалютныйРасчетныйСчет") ИЛИ РеквизитыСчета.Валютный;
КонецПроцедуры


&НаКлиенте
Процедура ЗаявкаБанковскийСчетОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не БюджетныйНаСервере.РольДоступнаСервер("ОФК") И Не БюджетныйНаСервере.РольДоступнаСервер("Администратор") Тогда
		
		Если ЗначениеЗаполнено(БюджетныйНаСервере.ВернутьРеквизит(ВыбранноеЗначение, "ДатаЗакрытия")) Тогда
			СтандартнаяОбработка = Ложь;
			Объект.ЗаявкаБезнал[Элементы.Заявка.ТекущаяСтрока].БанковскийСчет = "";
			ВызватьИсключение("Счет " + Строка(ВыбранноеЗначение) + " закрыт. Невозможно использовать его в документах.");
		КонецЕсли;
			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаСчетКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекДанныеСтруктура = Неопределено;
	Если НЕ сабОбщегоНазначенияКлиент.ПроверитьСчет(ВыбранноеЗначение, ПроверкаСчетаВыполнена, ТекДанныеСтруктура) Тогда
		СтандартнаяОбработка = Ложь;
		
		ТекДанные = Элементы.Заявка.ТекущиеДанные;
		
		Если ТипЗнч(ТекДанные.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			Объект.СчетКонтрагента = ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");
		ИначеЕсли ТипЗнч(ТекДанные.Контрагент) = Тип("СправочникСсылка.Организации") Тогда 
			Объект.СчетКонтрагента = ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");
		КонецЕсли;
		
	КонецЕсли;
	//УстановитьПодстветкуСчетов(,ТекДанныеСтруктура);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаКонтрагентПриИзменении(Элемент) Экспорт
	
	ТекЗначение = Элементы.Заявка.ТекущиеДанные.Контрагент;
	
	//Если НЕ ТипЗнч(ТекЗначение) = Тип("СправочникСсылка.Сотрудники") Тогда
		СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(ТекЗначение);
		//Элементы.Заявка.ТекущиеДанные.СчетКонтрагента = СтруктураДанные.СчетКонтрагента;
		
		//добавил д1 24.05.16 проверка счета
		Если ЗначениеЗаполнено(СтруктураДанные.СчетКонтрагента) И НЕ сабОбщегоНазначенияКлиент.ПроверитьСчет(СтруктураДанные.СчетКонтрагента, ПроверкаСчетаВыполнена) Тогда
			Если ТипЗнч(ТекЗначение) = Тип("СправочникСсылка.Контрагенты") Тогда
				Элементы.Заявка.ТекущиеДанные.СчетКонтрагента = ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");
			ИначеЕсли ТипЗнч(ТекЗначение) = Тип("СправочникСсылка.Организации") Тогда 
				Элементы.Заявка.ТекущиеДанные.СчетКонтрагента = ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");
			ИначеЕсли ТипЗнч(ТекЗначение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда 
				Элементы.Заявка.ТекущиеДанные.СчетКонтрагента = ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");
			КонецЕсли;
		Иначе
			Элементы.Заявка.ТекущиеДанные.СчетКонтрагента = СтруктураДанные.СчетКонтрагента;
		КонецЕсли;
		//конец проверки
		
		Элементы.Заявка.ТекущиеДанные.ЭтоКонтрагент = (ТипЗнч(Элементы.Заявка.ТекущиеДанные.Контрагент) = Тип("СправочникСсылка.Контрагенты"));
		
		//подстановка договора. д1 06.11.17
		РеквизитыДоговора = сабОперОбщегоНазначения.ПолучитьДоговорКонтрагентаПоУмолчанию(ТекЗначение, ?(НЕ ЗначениеЗаполнено(Элементы.Заявка.ТекущиеДанные.Организация), Неопределено, Элементы.Заявка.ТекущиеДанные.Организация));
		Элементы.Заявка.ТекущиеДанные.Договор = РеквизитыДоговора.Договор;
		//конец подстановки
		
		// подстановка ОКТМО_КБК {
		Элементы.Заявка.ТекущиеДанные.КодОКАТО = СтруктураДанные.КодПоОКТМО;
		Элементы.Заявка.ТекущиеДанные.КодБК = СтруктураДанные.КодБК;
		//}
		
	//Иначе
	//	Элементы.Заявка.ТекущиеДанные.СчетКонтрагента = "";
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаКонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = Ложь;
	//
	//СписокВыбораТипов = Новый СписокЗначений;
	//СписокВыбораТипов.Добавить("Контрагенты");
	//СписокВыбораТипов.Добавить("Сотрудники");
	//СписокВыбораТипов.Добавить("Юр. лицо(наша фирма)");
	//
	//ВыбранныйТип = ВыбратьИзСписка(СписокВыбораТипов);
	//
	//Если ВыбранныйТип = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Если Строка(Элементы.Заявка.ТекущиеДанные.ЦФО) = "Казна" И ВыбранныйТип.Значение = "Сотрудники" Тогда
	//	Форма = ПолучитьФорму("Справочник.Сотрудники.Форма.ФормаВыбора", Новый Структура("ТекущаяСтрока, ТекущееПредприятие, Подотчет", Элементы.Заявка.ТекущиеДанные.Контрагент, Элементы.Заявка.ТекущиеДанные.ЦФО, Истина), Элемент);
	//	//СписокПользователей = ВернутьСписокСотрудников();
	//	//ЭлементОтбора = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//	//ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Ссылка");	
	//	//ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	//	//ЭлементОтбора.Использование  = Истина;
	//	//ЭлементОтбора.ПравоеЗначение = СписокПользователей;
	//	Форма.Открыть();
	//ИначеЕсли ВыбранныйТип.Значение = "Сотрудники" Тогда
	//	Форма = ПолучитьФорму("Справочник.Сотрудники.Форма.ФормаВыбора", Новый Структура("ТекущаяСтрока, Подотчет", Элементы.Заявка.ТекущиеДанные.Контрагент, Истина), Элемент);
	//	Форма.Открыть();
	//ИначеЕсли ВыбранныйТип.Значение = "Контрагенты" Тогда
	//	Форма = ПолучитьФорму("Справочник.Контрагенты.Форма.ФормаВыбора",  Новый Структура("ТекущаяСтрока", Элементы.Заявка.ТекущиеДанные.Контрагент), Элемент);
	//	Форма.Открыть();
	//ИначеЕсли ВыбранныйТип.Значение = "Юр. лицо(наша фирма)" Тогда
	//	Форма = ПолучитьФорму("Справочник.Организации.Форма.ФормаВыбора",  Новый Структура("ТекущаяСтрока", Элементы.Заявка.ТекущиеДанные.Контрагент), Элемент);
	//	Форма.Открыть();
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаСчетКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//ТекЗначение = Элементы.Заявка.ТекущиеДанные.Контрагент;
	//Если ТипЗнч(ТекЗначение) = Тип("СправочникСсылка.Сотрудники") Тогда
	//	СтандартнаяОбработка = Ложь;		
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаУчОснованиеДругоеПриИзменении(Элемент)
	//Если НЕ Элементы.Заявка.ТекущиеДанные.УчОснованиеДругое Тогда
	//	Элементы.Заявка.ТекущиеДанные.НазначениеПлатежа = Элементы.Заявка.ТекущиеДанные.НазначениеПлатежаБух; 
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекДанные = Элементы.Заявка.ТекущиеДанные;
	
	ЗапретЛимита =  БПСервер.ЗапретПлана(Объект.Предприятие, ТекДанные.ЦФО, ТекДанные.СтатьяДДС);
	
	Если НЕ ПустаяСтрока(ТекДанные.СтатьяДДС) И НЕ ЗапретЛимита Тогда
		Результат = ОткрытьФормуМодально("Документ.Д_ЗаявкаНаОплату.Форма.ФормаВыбораОснованияРасхода", Новый Структура("СтатьяДДС, ДатаДока, ЦФО", ТекДанные.СтатьяДДС, Объект.Дата, ТекДанные.ЦФО));
		Если НЕ ПустаяСтрока(Результат) И НЕ Результат = Неопределено Тогда
			Элементы.Заявка.ТекущиеДанные.НазначениеПлатежа = Результат;			
		КонецЕсли;		
	КонецЕсли;
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаИсточникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = Ложь;
	//ТекПП1 = Элементы.Заявка.ТекущиеДанные.ЦФО;
	//ТекПП2 = Объект.Предприятие;
	//ТекПП1 = ?(ПустаяСтрока(БюджетныйНаСервере.ВернутьРеквизит(ТекПП1, "Родитель")), ТекПП1, БюджетныйНаСервере.ВернутьРеквизит(ТекПП1, "Родитель"));
	//ТекПП2 = ?(ПустаяСтрока(БюджетныйНаСервере.ВернутьРеквизит(ТекПП2, "Родитель")), ТекПП2, БюджетныйНаСервере.ВернутьРеквизит(ТекПП2, "Родитель"));
	//
	////СписокДоступныхИсполнителю = БюджетныйНаСервере.ПолучитьПредприятия( ,Объект.ИсполнительОплаты);
	//ТекПпМассив = Новый Массив;
	////Если НЕ БюджетныйНаСервере.ПолучитьПользователя() = Объект.ИсполнительОплаты Тогда
	////	Для каждого ТекПП1 Из СписокДоступныхИсполнителю Цикл
	////		ТекПпМассив.Добавить(ТекПП1);
	////	КонецЦикла;
	////Иначе
	//	ТекПпМассив.Добавить(ТекПП1);
	//	ТекПпМассив.Добавить(ТекПП2);	
	////КонецЕсли;
	//
	////ТекПпМассив.Добавить(Объект.Предприятие);
	//// доступность источника Казна для кассира мск
	//
	//ТекФорма = ПолучитьФорму("Справочник.Кассы.Форма.ФормаВыбораПредприятия", Новый Структура("Предприятия, ТипИсточника, ТекущаяСтрока", ТекПпМассив, ?(Объект.ТипИсточника = ВернутьНалТипИсточника(), ВернутьНалТипИсточника2(), ВернутьБНалТипИсточника2()), Элементы.Заявка.ТекущиеДанные.Источник) , Элемент); 
	//ТекФорма.Открыть();

КонецПроцедуры


&НаКлиенте
Процедура ОстаткиПоИсточникамИсточникПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиПоИсточникамИсточникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокИсточников = Новый СписокЗначений;
	Для каждого ТекИсточник Из Объект.ЗаявкаБезнал Цикл
		Источник = ТекИсточник.Источник;
		СтруктураПоиска = Новый Структура("Источник", Источник); 
		Если СписокИсточников.НайтиПоЗначению(Источник) = Неопределено И НЕ Объект.ОстаткиПоИсточникам.НайтиСтроки(СтруктураПоиска).Количество() Тогда
			СписокИсточников.Добавить(Источник);	
		КонецЕсли;
	КонецЦикла;
	
	Выбранный = ВыбратьИзСписка(СписокИсточников, Элемент);
	Если НЕ Выбранный = Неопределено Тогда
		Элементы.ОстаткиПоИсточникам.ТекущиеДанные.Источник = Выбранный.Значение;	
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ОповещенияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьЗаголовок();
КонецПроцедуры

&НаКлиенте
Процедура ОповещенияПослеУдаления(Элемент)
	ОбновитьЗаголовок();
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаКПППлательщикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Элемент.СписокВыбора.Очистить();
	
	СписокКПП = Новый СписокЗначений;
	
	Если Элементы.Заявка.ТекущиеДанные.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога") Тогда
		СписокКПП.Добавить(Элементы.Заявка.ТекущиеДанные.КПППлательщика, Элементы.Заявка.ТекущиеДанные.КПППлательщика);
		КПППодразделения = БюджетныйНаСервере.ВернутьРеквизит(Элементы.Заявка.ТекущиеДанные.Подразделение, "КПП");
		КППОрганизации = БюджетныйНаСервере.ВернутьРеквизит(Элементы.Заявка.ТекущиеДанные.Организация, "КПП");
		
		Если ЗначениеЗаполнено(КПППодразделения) Тогда
			СписокКПП.Добавить(КПППодразделения, КПППодразделения + " (" + Элементы.Заявка.ТекущиеДанные.Подразделение + ")");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КППОрганизации) Тогда
			
			Если СписокКПП.НайтиПоЗначению(КППОрганизации) = Неопределено Тогда
				СписокКПП.Добавить(КППОрганизации, КППОрганизации + " (" + Элементы.Заявка.ТекущиеДанные.Организация + ")");
			КонецЕсли;
			
		КонецЕсли;
		
		ТекЗнач = Неопределено;
		
		Если ЗначениеЗаполнено(Элементы.Заявка.ТекущиеДанные.КПППлательщика) Тогда
			ТекЗнач = ВыбратьИзСписка(СписокКПП, Элемент, Элементы.Заявка.ТекущиеДанные.КПППлательщика);
		КонецЕсли;
		
		Если Не ТекЗнач = Неопределено Тогда
			Элементы.Заявка.ТекущиеДанные.КПППлательщика = ТекЗнач.Значение;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДействияСТабличнымиЧастями
/////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ТАБЛИЧНЫХ ЧАСТЕЙ

&НаСервере
Процедура ЗаполнитьСтрокиТЧ()
	
	Для каждого ТекСтрока Из Объект.ЗаявкаБезнал Цикл
		ТекСтрока.УчетПоПодразделениям = ТекСтрока.ЦФО.УчетПоПодразделениям;
		ТекСтрока.СтатьяИнв = РасчетыБюджет.СтатьяИнв(ТекСтрока.СтатьяДДС) ИЛИ РасчетыБюджет.СтатьяПредставительскихРасходов(ТекСтрока.СтатьяДДС);
		ТекСтрока.ВалютноеПредприятие = БюджетныйНаСервере.ЭтоПредприятиеНерезидент(ТекСтрока.ЦФО) Или БюджетныйНаСервере.ЭтоПредприятиеНерезидент(Объект.Предприятие);
		ТекСтрока.ЭтоКонтрагент = (ТипЗнч(ТекСтрока.Контрагент) = Тип("СправочникСсылка.Контрагенты"));
		
		Если ЗначениеЗаполнено(ТекСтрока.СчетКонтрагента) Тогда
			ТекСтрока.СтатусСчетаПолучателя = ТекСтрока.СчетКонтрагента.саб_Закрыт;
			ТекСтрока.СтатусБанкаПолучателя = ТекСтрока.СчетКонтрагента.Банк.сабСтатусБанка;
		Иначе
			ТекСтрока.СтатусСчетаПолучателя = "";
			ТекСтрока.СтатусБанкаПолучателя = "";
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.УИДСтроки) Тогда
			ТекСтрока.УИДСтроки = Новый УникальныйИдентификатор;		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекСтрока.ЗаявкаНаФинансирование) Тогда
			РеквЗаявки = БюджетныйНаСервере.ВернутьРеквизиты(ТекСтрока.ЗаявкаНаФинансирование, "Номер, Автор");
			ТекСтрока.РасшифровкаСтроки = "Заявка №" + РеквЗаявки.Номер + " (Автор: " + Строка(РеквЗаявки.Автор) + ")" + " (" + ТекСтрока.ЗаявкаНаФинансирование.ТабличнаяЧасть.Количество() + ")"; 
		Иначе	
			ОтобранныеСтроки = Объект.РасшифровкиСтрок.НайтиСтроки(Новый Структура("УИДСтрокиЗаявки", ТекСтрока.УИДСтроки));
			РасшифровкаЦФО = "";
			Для каждого ТекСтрокаРасшифровки Из ОтобранныеСтроки Цикл
				РасшифровкаЦФО = РасшифровкаЦФО + Строка(ТекСтрокаРасшифровки.ЦФО) + " (" + Строка(ТекСтрокаРасшифровки.Сумма) + "), ";
			КонецЦикла;
			Если НЕ РасшифровкаЦФО = "" Тогда
				РасшифровкаЦФО = Лев(РасшифровкаЦФО, СтрДлина(РасшифровкаЦФО) - 2);
			КонецЕсли;
			ТекСтрока.РасшифровкаСтроки = ?(НЕ ОтобранныеСтроки.Количество(), "Нет", "Строк (" + ОтобранныеСтроки.Количество() + "): " + РасшифровкаЦФО);
		КонецЕсли;
		
		ТекСтрока.РеквизитыНалогов = "Налог. рекв.:" + ТекСтрока.КодБК + "; " + ТекСтрока.КодОКАТО + "; " + ТекСтрока.ПоказательОснования + "; " + ТекСтрока.ПоказательПериода + "; " + ТекСтрока.СтатусСоставителя;
		Если ТипЗнч(ТекСтрока.Источник) = Тип("СправочникСсылка.БанковскиеСчета")  Тогда
			РеквизитыСчета = БюджетныйНаСервере.ВернутьРеквизиты(ТекСтрока.Источник, "ВидСчета, Валютный");
			ТекСтрока.ВалютныйСчет = РеквизитыСчета.ВидСчета = ПредопределенноеЗначение("Перечисление.ГД_ВидыИсточников.ВалютныйРасчетныйСчет") ИЛИ РеквизитыСчета.Валютный;
		ИначеЕсли ТипЗнч(ТекСтрока.Источник) = Тип("СправочникСсылка.Кассы") Тогда	
			ТекСтрока.ВалютныйСчет = БюджетныйНаСервере.ВернутьРеквизиты(ТекСтрока.Источник, "ВидИсточника").ВидИсточника = ПредопределенноеЗначение("Перечисление.ГД_ВидыИсточников.ВалютнаяКассаУчет");
		КонецЕсли;
		
		ТекСтрока.ЭтоБезнал = Объект.ТипИсточника = ПредопределенноеЗначение("Перечисление.Д_ИсточникиСредств.БезНал") И НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеестраОплат.СводныйРеестрПлатежей");
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Объект.Источник) Тогда
		Если ТипЗнч(Объект.Источник) = Тип("СправочникСсылка.БанковскиеСчета")  Тогда
			РеквизитыСчета = БюджетныйНаСервере.ВернутьРеквизиты(Объект.Источник, "ВидСчета, Валютный");
			ВалютныйСчет = РеквизитыСчета.ВидСчета = ПредопределенноеЗначение("Перечисление.ГД_ВидыИсточников.ВалютныйРасчетныйСчет") ИЛИ РеквизитыСчета.Валютный;
		ИначеЕсли ТипЗнч(Объект.Источник) = Тип("СправочникСсылка.Кассы") Тогда	
			ВалютныйСчет = БюджетныйНаСервере.ВернутьРеквизиты(Объект.Источник, "ВидИсточника").ВидИсточника = ПредопределенноеЗначение("Перечисление.ГД_ВидыИсточников.ВалютнаяКассаУчет");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьСвязь(ПроверитьУсловие)

	Если ПроверитьУсловие Тогда
		А = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Предприятие");
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(А);
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ЗаявкаПодразделение.СвязиПараметровВыбора = НовыеСвязи;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВычислитьСуммуНДС()
	
	Если Не Элементы.Заявка.ТекущиеДанные.СтавкаНДС = сабОбщегоНазначения.ПолучитьЭлементНДС("Произвольная") Тогда
		СтавкаНДС = сабОбщегоНазначения.ПолучитьСтавкуНДС(Элементы.Заявка.ТекущиеДанные.СтавкаНДС);
		Элементы.Заявка.ТекущиеДанные.СуммаНДС = Элементы.Заявка.ТекущиеДанные.СуммаДДС - (Элементы.Заявка.ТекущиеДанные.СуммаДДС) / ((СтавкаНДС + 100) / 100);
		Элементы.Заявка.ТекущиеДанные.СуммаНДСАвтоматическийРасчет = Элементы.Заявка.ТекущиеДанные.СуммаДДС - (Элементы.Заявка.ТекущиеДанные.СуммаДДС) / ((СтавкаНДС + 100) / 100);
	ИначеЕсли НЕ ЗначениеЗаполнено(Элементы.Заявка.ТекущиеДанные.СтавкаНДС) Тогда 
		Элементы.Заявка.ТекущиеДанные.СуммаНДС = 0;
		Элементы.Заявка.ТекущиеДанные.СуммаНДСАвтоматическийРасчет = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
Функция ПолучитьДанныеОрганизацияПриИзменении(Организация, Предприятие = Неопределено)
	
	БанковскийСчетПоУмолчанию = Организация.ОсновнойБанковскийСчет;
	Если НЕ Предприятие = Неопределено И НЕ Предприятие = БанковскийСчетПоУмолчанию.Предприятие Тогда
		БанковскийСчетПоУмолчанию = "";	
	КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("НаименованиеПолное", Организация.НаименованиеПолное);
	СтруктураДанные.Вставить("КодОКАТО", ""); // ОКАТО/ОКТМО
	СтруктураДанные.Вставить("БанковскийСчет", БанковскийСчетПоУмолчанию);
	СтруктураДанные.Вставить("ТекстКорреспондента", Организация.ОсновнойБанковскийСчет.ТекстКорреспондента);
	СтруктураДанные.Вставить("ИННПлательщика", Организация.ИНН);
	СтруктураДанные.Вставить("КПППлательщика", Организация.КПП);
	СтруктураДанные.Вставить("ЭтоФизЛицо", Перечисления.ЮрФизЛицо.ФизЛицо);
	СтруктураДанные.Вставить("Источник", БанковскийСчетПоУмолчанию);
	СтруктураДанные.Вставить("КодБК", Организация.КодБК);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
Функция ПолучитьДанныеКонтрагентПриИзменении(Контрагент)
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("НаименованиеПолное", Контрагент.Наименование);
		СтруктураДанные.Вставить("СчетКонтрагента", Контрагент.ОсновнойБанковскийСчет);
		СтруктураДанные.Вставить("ИННПолучателя", Контрагент.ИНН);
		СтруктураДанные.Вставить("КПППолучателя", "-");
		СтруктураДанные.Вставить("НазначениеПлатежа", Контрагент.ОсновнойБанковскийСчет.ТекстНазначения);
		СтруктураДанные.Вставить("ТекстКорреспондента", Контрагент.ОсновнойБанковскийСчет.ТекстКорреспондента);
		СтруктураДанные.Вставить("КодПоОКТМО", "");
		СтруктураДанные.Вставить("КодБК", "");
	Иначе
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("НаименованиеПолное", Контрагент.НаименованиеПолное);
		СтруктураДанные.Вставить("СчетКонтрагента", Контрагент.ОсновнойБанковскийСчет);
		СтруктураДанные.Вставить("ИННПолучателя", Контрагент.ИНН);
		СтруктураДанные.Вставить("КПППолучателя", Контрагент.КПП);
		СтруктураДанные.Вставить("НазначениеПлатежа", Контрагент.ОсновнойБанковскийСчет.ТекстНазначения);
		СтруктураДанные.Вставить("ТекстКорреспондента", Контрагент.ОсновнойБанковскийСчет.ТекстКорреспондента);
		СтруктураДанные.Вставить("КодПоОКТМО", "");
		СтруктураДанные.Вставить("КодБК", Контрагент.КодБК);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

&НаКлиенте
Процедура ОбновитьЗаголовок()
	
	Элементы.Группа12.Заголовок = "Оповещения" + ?(Объект.Оповещения.Количество(), " (" + Строка(Объект.Оповещения.Количество()) + ")", "");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИНН()
	Для каждого ТекСтрока Из Объект.ЗаявкаБезнал Цикл
		Если ЗначениеЗаполнено(ТекСтрока.Контрагент) И НЕ ТипЗнч(ТекСтрока.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ТекСтрока.ИННКонтрагента = ТекСтрока.Контрагент.Инн;
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьКолонок()
	СтруктураВидимости = ЗапросКТч();
КонецПроцедуры

&НаСервере
Функция ЗапросКТч()
	
	СтруктураВидимостиКолонок = Новый Структура("ИнвПроект,ЗаявкаНаЗакупку",Ложь,Ложь);
	
	ИнвСтатья = Ложь;
	СтатьяПР = Ложь;
	
	Для Каждого Строка Из Объект.ЗаявкаБезнал Цикл
		
		Если РасчетыБюджет.СтатьяПредставительскихРасходов(Строка.СтатьяДДС) Тогда
			СтатьяПР = Истина;
		КонецЕсли;
		
		Если РасчетыБюджет.СтатьяИнв(Строка.СтатьяДДС) Тогда
			ИнвСтатья = Истина
		КонецЕсли;
		
	КонецЦикла;
		
	Если (ИнвСтатья + СтатьяПР > 0) Или (сабОбщегоНазначения.ПолучитьЗначениеСвойства(Объект.Предприятие, ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.БюджетированиеИнвестицийВРазрезеЗатрат) = Истина) Тогда
		СтруктураВидимостиКолонок.ИнвПроект = Истина;
	КонецЕсли;
		
	Возврат СтруктураВидимостиКолонок;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПоискУжеЗапущенныхБП()
	//ищем созданные бизнес-процессы
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Задача.Ссылка
	               |ИЗ
	               |	Справочник.Задача КАК Задача
	               |ГДЕ
	               |	Задача.Заявка = &Заявка";
	
	Запрос.УстановитьПараметр("Заявка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Возврат Выборка.Количество();
КонецФункции // ()

&НаСервереБезКонтекста
Функция ВернутьНалТипИсточника()
	Возврат Перечисления.Д_ИсточникиСредств.Нал;
КонецФункции // ()

&НаСервереБезКонтекста
Функция ВернутьНалТипИсточника2()
	МассивКасс = Новый Массив;
	МассивКасс.Добавить(Перечисления.ГД_ВидыИсточников.Касса);
	МассивКасс.Добавить(Перечисления.ГД_ВидыИсточников.КассаУчет);
	МассивКасс.Добавить(Перечисления.ГД_ВидыИсточников.ВалютнаяКасса);
	МассивКасс.Добавить(Перечисления.ГД_ВидыИсточников.ВалютнаяКассаУчет);
	
	Возврат МассивКасс;
КонецФункции // ()

&НаСервереБезКонтекста
Функция ВернутьБНалТипИсточника2()
	МассивРсч = Новый Массив;
	МассивРсч.Добавить(Перечисления.ГД_ВидыИсточников.РассчетныйСчет);
	МассивРсч.Добавить(Перечисления.ГД_ВидыИсточников.ВалютныйРасчетныйСчет);
	Возврат МассивРсч;
КонецФункции // ()

&НаСервере
Функция ПринадлежитКС()
	//Если Не ОбщегоНазначенияПовтИсп.ЭтоБазаСпирт() Тогда
	//	Возврат ПараметрыСеанса.ТекущийПользователь.ПринадлежитЭлементу(Справочники.Пользователи.КСУК);
	//Иначе
	//	Возврат Ложь;
	//КонецЕсли;
КонецФункции // ()

&НаСервере
Функция ФинансистСнабжение()
	Возврат Ложь;
КонецФункции // ()

&НаСервере
Функция ПроверкаЧужого(Чужой)
	Если Чужой.Родитель.Пустая() Тогда
		Если Объект.Предприятие.Родитель.Пустая() Тогда
			Если НЕ Чужой = Объект.Предприятие  Тогда
				Возврат Истина;
			Конецесли;
		Иначе
			Если НЕ Чужой = Объект.Предприятие.Родитель  Тогда
				Возврат Истина;
			Конецесли;				
		КонецЕсли;
	Иначе
		Если Объект.Предприятие.Родитель.Пустая() Тогда
			Если НЕ Чужой.Родитель = Объект.Предприятие  Тогда
				Возврат Истина;
			Конецесли;
		Иначе
			Если НЕ Чужой.Родитель = Объект.Предприятие.Родитель  Тогда
				Возврат Истина;
			Конецесли;				
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
КонецФункции // ()

&НаСервере
Функция ВернутьФинансистаКС()
	Возврат Константы.БП_ФинансистКС.Получить();
КонецФункции // ()

&НаСервереБезКонтекста
Функция ТранспортныеСтатьи()

	МассивСтатей = Новый Массив;
	МассивСтатей.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("2133.21"));
	//МассивСтатей.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.ТранспортыеРасходыПоРеализацииАвто);
	//МассивСтатей.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.ТранспортыеРасходыПоРеализацииЖД);
	Возврат МассивСтатей;
	
КонецФункции // ()
 
&НаСервере
Функция ВернутьТипИсточника(ТекСтруктура = Неопределено)
	СтруВозврата = Новый Структура("Самооплата, Доступность, Прочий", 0, 1, Ложь);
	Если Объект.ТипИсточника = Перечисления.Д_ИсточникиСредств.Нал Тогда
		СтруВозврата.Самооплата = 1;
		СтруВозврата.Доступность = 0;
		СтруВозврата.Прочий = Ложь;
	ИначеЕсли Объект.ТипИсточника = Перечисления.Д_ИсточникиСредств.Прочий ИЛИ Объект.ТипИсточника = Перечисления.Д_ИсточникиСредств.Казна Тогда
		СтруВозврата.Самооплата = 0;
		СтруВозврата.Доступность = 0;
		СтруВозврата.Прочий = Истина;
	КонецЕсли; 
	Возврат СтруВозврата;
КонецФункции // ()

&НаКлиенте
Процедура ПредприятиеАгентПриИзменении(Элемент)
	//КонтрольЛимитов(0);
КонецПроцедуры

&НаСервере
Функция РасчитатьОстаток(Источник)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	УчетныйОстатки.СуммаОстаток КАК СуммаОстаток,
	               |	УчетныйОстатки.Субконто2 КАК Источник
	               |ИЗ
	               |	РегистрБухгалтерии.Учетный.Остатки(&Дата, Счет В ИЕРАРХИИ (&Счет), , Субконто2 В (&Источник)) КАК УчетныйОстатки";
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Учетный.Счет50());
	МассивСчетов.Добавить(ПланыСчетов.Учетный.Счет51());
	
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, ТекущаяДата()));
	Запрос.УстановитьПараметр("Счет", МассивСчетов);
	Запрос.УстановитьПараметр("Источник", Источник);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если ТипЗнч(Источник) = Тип("Массив") Тогда
		РезультатВозврат = Новый Соответствие;
	Иначе
		РезультатВозврат = 0;
	КонецЕсли;
	
	
	Пока Выборка.Следующий() Цикл
		
		Если ТипЗнч(Источник) = Тип("Массив") Тогда
			РезультатВозврат.Вставить(Выборка.Источник, Выборка.СуммаОстаток);
		Иначе	
			РезультатВозврат = Выборка.СуммаОстаток;	
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатВозврат;
	
	
КонецФункции // ()

&НаКлиенте
Процедура ЗаявкаСтатьяДДСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.СтатьиДвиженияДенежныхСредств.Форма.ФормаВыбораРасходов",, Элемент); 
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДоступныхЮрЛиц(Предприятие)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Владелец В(&Предприятие)";
	
	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции // ()


&НаСервереБезКонтекста
Функция ПолучитьДоступныхИсполнителейОплаты(Предприятие, ТипЗаявки, Самооплата)
	МассивИсполнителей = Новый Массив;
	Финансист = БПСервер.ПолучитьСотрудникаПоОсновнойДолжности(Предприятие, Перечисления.ОсновныеДолжностиПредприятия.Финансист);
	КассирПредприятия = БПСервер.ПолучитьСотрудникаПоОсновнойДолжности(Предприятие, Перечисления.ОсновныеДолжностиПредприятия.КассирПредприятия);
	КассирУчетный = БПСервер.ПолучитьСотрудникаПоОсновнойДолжности(Предприятие, Перечисления.ОсновныеДолжностиПредприятия.КассирУчетный);
	Операционист = БПСервер.ПолучитьСотрудникаПоОсновнойДолжности(Предприятие, Перечисления.ОсновныеДолжностиПредприятия.Операционист);
	//СотрудникРКО = ПолучитьРКО();

	
	Если ТипЗаявки = Перечисления.Д_ИсточникиСредств.БезНал Тогда
		Если ЗначениеЗаполнено(Операционист) Тогда
			МассивИсполнителей.Добавить(Операционист);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(КассирУчетный) Тогда
			МассивИсполнителей.Добавить(КассирУчетный);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Финансист) Тогда
		МассивИсполнителей.Добавить(Финансист);
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(СотрудникРКО) Тогда
	//	Если Самооплата Тогда
	//		МассивИсполнителей.Добавить(СотрудникРКО);
	//	Иначе
	//		МассивИсполнителей.Вставить(0, СотрудникРКО);		
	//	КонецЕсли;
	//КонецЕсли;
	
	Возврат МассивИсполнителей;

КонецФункции // ()

&НаСервереБезКонтекста
Функция ПолучитьПодразделения(Предприятие)
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ВидыДеятельности.Ссылка
	                |ИЗ
	                |	Справочник.СтруктураПредприятия КАК ВидыДеятельности
	                |ГДЕ
	                |	ВидыДеятельности.Предприятие = &Владелец
	                |	И ВидыДеятельности.Ссылка В(&ДоступныеПодразделения)";
	 
	 Запрос.УстановитьПараметр("Владелец", Предприятие);
	 Запрос.УстановитьПараметр("ДоступныеПодразделения", ПараметрыСеанса.ДоступныеПодразделения);
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 МассивПодразделений = Новый Массив;
	 ПодрПоУмолч = Предприятие.ВидДеятельности;
	 Если ЗначениеЗаполнено(ПодрПоУмолч) Тогда
	 	МассивПодразделений.Добавить(ПодрПоУмолч);	 
	 КонецЕсли;
	 
	 Пока Выборка.Следующий() Цикл
		 Если МассивПодразделений.Найти(Выборка.Ссылка) = Неопределено Тогда
	 		МассивПодразделений.Добавить(Выборка.Ссылка);	 
		 КонецЕсли;
	 КонецЦикла;
	 
	
	Возврат МассивПодразделений;

КонецФункции // ()

&НаСервереБезКонтекста
Функция НайтиИсполнителя(Предприятие, Подразделение, ТипИсточника)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.Исполнитель
		|ИЗ
		|	Справочник.МаршрутыДвиженияЗаявок.МаршрутИсполнения КАК МаршрутыДвиженияЗаявокМаршрутИсполнения
		|ГДЕ
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.Ссылка.Предприятие = &Предприятие
		|	И МаршрутыДвиженияЗаявокМаршрутИсполнения.Ссылка.ТипПлатежа = &ТипПлатежа
		|	И МаршрутыДвиженияЗаявокМаршрутИсполнения.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И (Не МаршрутыДвиженияЗаявокМаршрутИсполнения.Ссылка.Предприятие.УчетПоПодразделениям
		|			ИЛИ МаршрутыДвиженияЗаявокМаршрутИсполнения.Ссылка.Подразделение = &Подразделение)";

	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ТипПлатежа", ТипИсточника);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ВыбИсполнитель = ВыборкаДетальныеЗаписи.Исполнитель;
	КонецЦикла;
	Возврат ВыбИсполнитель;
КонецФункции

&НаСервереБезКонтекста
Функция ВидИсточникаКазна(ТекВид)

	Возврат ТекВид = Перечисления.Д_ИсточникиСредств.Казна;	

КонецФункции // ()

Процедура ПроставитьКрасымПерерасходДляВсехСтрок()
	КопияЗаявок = Объект.ЗаявкаБезнал.Выгрузить();
	КопияЗаявок.Свернуть("ЦФО,СтатьяДДС");
	Предприятия = КопияЗаявок.ВыгрузитьКолонку("ЦФО");
	СтатьиДДС 	= КопияЗаявок.ВыгрузитьКолонку("СтатьяДДС");
	
	//Для Каждого СтрокаПредприятие Из Предприятия Цикл
	//	СтрокаПредприятие = ?(ПустаяСтрока(БюджетныйНаСервере.ВернутьРеквизит(СтрокаПредприятие, "Родитель")), СтрокаПредприятие,БюджетныйНаСервере.ВернутьРеквизит(СтрокаПредприятие, "Родитель"));
	//КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	-ЕСТЬNULL(Годовой.СуммаОборот, 0) КАК План,
	               |	Годовой.Предприятия,
	               |	Годовой.Подразделение,
	               |	Годовой.Субконто1 КАК СтатьяБДДС,
	               |	Годовой.КорСубконто2 КАК ИнвестиционныйПроект
	               |ИЗ
	               |	РегистрБухгалтерии.Бюджетный.Обороты(
	               |			&Дата1,
	               |			&Дата2,
	               |			Авто,
	               |			Счет В ИЕРАРХИИ (&ДенежныеСчета),
	               |			,
	               |			Предприятия В ИЕРАРХИИ (&Предприятия)
	               |				И (СценарийПлана В
	               |						(ВЫБРАТЬ
	               |							СценарииПланирования.Ссылка
	               |						ИЗ
	               |							Справочник.СценарииПланирования КАК СценарииПланирования
	               |						ГДЕ
	               |							СценарииПланирования.Родитель В (&Сценарий)
	               |							И СценарииПланирования.ВлкючатьВПлан = ИСТИНА)
	               |					ИЛИ СценарийПлана В (&Сценарий)
	               |					ИЛИ СценарийПлана В (&ПланПоСЗ))
	               |				И Субконто1 В (&СтатьиБДДС),
	               |			,
	               |			) КАК Годовой";
				   
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Учетный.Счет5001());
	МассивСчетов.Добавить(ПланыСчетов.Учетный.Счет5101());
	МассивСчетов.Добавить(ПланыСчетов.Учетный.Счет5501());
	
	Запрос.УстановитьПараметр("Дата1", НачалоМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("Дата2", КонецМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("ДенежныеСчета", МассивСчетов);
	Запрос.УстановитьПараметр("Предприятия", Предприятия);
	Запрос.УстановитьПараметр("СтатьиБДДС",СтатьиДДС );
	Запрос.УстановитьПараметр("Сценарий" , БюджетныйНаСервере.ПолучитьАктуальныйСценарий(Объект.Дата));
	Запрос.УстановитьПараметр("ПланПоСЗ" , Справочники.СценарииПланирования.НайтиПоНаименованию("План по СЗ"));
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	КопияЗаявок = Объект.ЗаявкаБезнал.Выгрузить();
	КопияЗаявок.Свернуть("СтатьяДДС, ЦФО, Подразделение, ИнвПроект","СуммаДДС");
	
	Для каждого Строка Из КопияЗаявок Цикл
		Если БюджетныйНаСервере.ВедетсяУчетПоПодразделениям(Строка.ЦФО) Тогда
			СтруктураОтбора = Новый Структура("Предприятия,Подразделение,СтатьяБДДС", Строка.ЦФО , Строка.Подразделение , Строка.СтатьяДДС );
		Иначе
			СтруктураОтбора = Новый Структура("Предприятия,СтатьяБДДС", Строка.ЦФО , Строка.СтатьяДДС );
		КонецЕсли;
		СуммаОстатка = 0;
		МассивСтрок = Выгрузка.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаОстатков Из МассивСтрок Цикл 
			Если СтрокаОстатков.ИнвестиционныйПроект = Строка.ИнвПроект или НЕ ЗначениеЗаполнено(СтрокаОстатков.ИнвестиционныйПроект) Тогда 
				СуммаОстатка = СуммаОстатка + СтрокаОстатков.План;
			КонецЕсли;
		КонецЦикла;
		
		Если Строка.СуммаДДС > СуммаОстатка Тогда 
			Для Каждого ЭлементЗаявки Из Объект.ЗаявкаБезнал Цикл
				Если ЭлементЗаявки.СтатьяДДС = Строка.СтатьяДДС И ЭлементЗаявки.ЦФО = Строка.ЦФО
				И ЭлементЗаявки.ИнвПроект = Строка.ИнвПроект Тогда 
					Если БюджетныйНаСервере.ВедетсяУчетПоПодразделениям(ЭлементЗаявки.ЦФО) Тогда 
						Если ЭлементЗаявки.Подразделение = Строка.Подразделение Тогда 
							ЭлементЗаявки.Перерасход = Истина;
						Иначе
							ЭлементЗаявки.Перерасход = Ложь;
						КонецЕсли;
					Иначе
						ЭлементЗаявки.Перерасход = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
				   
КонецПроцедуры

&НаСервере
Функция ВернутьСписокСотрудников()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СотрудникиПредприятия.Ссылка
	|ИЗ
	|	Справочник.Сотрудники.Предприятия КАК СотрудникиПредприятия
	|ГДЕ
	|	СотрудникиПредприятия.Предприятие = &Предприятие";
	Запрос.УстановитьПараметр("Предприятие", Константы.сабПредприятиеКазна.Получить());
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции	

&НаКлиенте
Процедура АвтосохранениеРеквизитовФормыНаКлиенте()
	
	Если Модифицированность Тогда
		АвтосохранениеРеквизитовФормыНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура АвтосохранениеРеквизитовФормыНаСервере()
	
	сабОбщегоНазначения.АвтосохранениеРеквизитовФормы(ЭтаФорма);
	
КонецПроцедуры

&НаСервере 
Процедура ПустаяСервернаяПроцедура()
	//Процедура-костыль.
	//Баг: при первом обращении на сервер в модуле формы откатывается введенный текст
	//Процедура вызывается при открытии формы, инициирует обращение на сервер, после чего баг с текстом не появляется
	
	Ы = 0;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуИзЗаявкиНаФинансирование(ТекЗаявка)
	
	Если Объект.ЗаявкаБезнал.НайтиСтроки(Новый Структура("ЗаявкаНаФинансирование", ТекЗаявка)).Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	сабГрафикПлатежей.ДатаПлатежа КАК ДатаПлатежа
	               |ИЗ
	               |	РегистрСведений.сабГрафикПлатежей КАК сабГрафикПлатежей
	               |ГДЕ
	               |	сабГрафикПлатежей.Документ = &Документ
	               |	И сабГрафикПлатежей.УИДСтрокиДокумента = """"
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаПлатежа";
	
	Запрос.УстановитьПараметр("Документ", ТекЗаявка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество() > 1 Тогда
		Сообщить(Строка(ТекЗаявка) + " разбита на несколько оплат по разным датам. Подбор невозможен!");
		Возврат;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		СрокОплаты = Выборка.ДатаПлатежа;
		Прервать;
	КонецЦикла;
	
	НоваяСтрока = Объект.ЗаявкаБезнал.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекЗаявка);
	НоваяСтрока.НазначениеПлатежаБух = ТекЗаявка.НазначениеПлатежа;
	НоваяСтрока.НазначениеПлатежа = ТекЗаявка.НазначениеПлатежаУчет;
	НоваяСтрока.Примечание = ТекЗаявка.Комментарий;
	НоваяСтрока.СуммаДДС = ТекЗаявка.Сумма;
	НоваяСтрока.ЗаявкаНаФинансирование = ТекЗаявка;
	СрокОплаты = сабОбщегоНазначения.ПолучитьОплатыСрокИзГрафика(ТекЗаявка);
	НоваяСтрока.ДатаПлатежа = СрокОплаты;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНазначениеПлатежа(НоваяСтрока)
	ПозицияСуммы = Найти(НоваяСтрока.НазначениеПлатежаБух, "Сумма ");
	Если ПозицияСуммы = 0
		И ЗначениеЗаполнено(НоваяСтрока.НазначениеПлатежаБух) Тогда
		НоваяСтрока.НазначениеПлатежа = НоваяСтрока.НазначениеПлатежаБух;
	Иначе
		НоваяСтрока.НазначениеПлатежа = Лев(НоваяСтрока.НазначениеПлатежаБух, ПозицияСуммы - 1);
	КонецЕсли;
	Если Прав(НоваяСтрока.НазначениеПлатежа, 1) = Символы.ПС Тогда
		НоваяСтрока.НазначениеПлатежа = Лев(НоваяСтрока.НазначениеПлатежа, СтрДлина(НоваяСтрока.НазначениеПлатежа) - 1);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(НоваяСтрока.НазначениеПлатежа) Тогда
		НоваяСтрока.НазначениеПлатежа = НоваяСтрока.НазначениеПлатежаБух;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыдачаВПодОтчетПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Заявка.ТекущиеДанные;
	Если ТекущиеДанные.ВыдачаВПодОтчет И Не ЗначениеЗаполнено(ТекущиеДанные.Примечание) Тогда
		ТекущиеДанные.Примечание = "В п/о";
	ИначеЕсли Не ТекущиеДанные.ВыдачаВПодОтчет И ТекущиеДанные.Примечание =  "В п/о" Тогда
		ТекущиеДанные.Примечание = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборЗаявкиНаФинансирование(Команда)
	ТекДобавленныеЗаявки = Новый Массив;
	Для каждого ТекСтрока Из Объект.ЗаявкаБезнал Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ЗаявкаНаФинансирование) Тогда			
			ТекДобавленныеЗаявки.Добавить(Новый Структура("Заявка, Сумма",ТекСтрока.ЗаявкаНаФинансирование, ТекСтрока.СуммаДДС));		
		КонецЕсли;		
	КонецЦикла;
	
	Если Объект.ТипИсточника = ПредопределенноеЗначение("Перечисление.Д_ИсточникиСредств.Нал") Тогда
		МассивТиповОплат = Новый Массив;
		МассивТиповОплат.Добавить(ПредопределенноеЗначение("Перечисление.Д_ИсточникиСредств.Нал"));
		МассивТиповОплат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийДвиженияДС.КассовыйОрдер"));
	Иначе
		МассивТиповОплат = Новый Массив;
		МассивТиповОплат.Добавить(ПредопределенноеЗначение("Перечисление.Д_ИсточникиСредств.БезНал"));
		МассивТиповОплат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийДвиженияДС.БанковскаяВыписка"));
	КонецЕсли;
	
	ТекФорма = ПолучитьФорму("Документ.Д_ЗаявкаНаФинансирование.Форма.ФормаВыбора", Новый Структура("МассивСтруктурЗаявок, РежимВыбора", ТекДобавленныеЗаявки, Истина), ЭтаФорма);
	НовыйОтбор = ТекФорма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеестрЗаявок");
	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	НовыйОтбор = ТекФорма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипИсточника");
	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	НовыйОтбор.ПравоеЗначение = МассивТиповОплат;
	
	НовыйОтбор = ТекФорма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	НовыйОтбор.ПравоеЗначение = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Предприятие) Тогда
		НовыйОтбор = ТекФорма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Предприятие");
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		НовыйОтбор.ПравоеЗначение = Объект.Предприятие;
	КонецЕсли;
	
	ТекФорма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаПередУдалением(Элемент, Отказ)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Строки = Элементы.Заявка.ВыделенныеСтроки;
		Для Каждого Строка Из Строки Цикл
			ТекДанные = Элементы.Заявка.ДанныеСтроки(Строка);
			Если ЗначениеЗаполнено(ТекДанные.ЗаявкаНаФинансирование) Тогда
				НоваяСтрока = УдаленныеСтроки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекДанные);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СдвинутьСрокОплаты(Команда)
	
	Если Вопрос("После установки нового срока форма заявки будет закрыта. Продолжить?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	НоваяДатаОплаты = Объект.ДатаОплаты;
	Если ВвестиДату(НоваяДатаОплаты, "Ввод нового срока оплаты по заявке", ЧастиДаты.Дата) Тогда
		СдвинутьСрокОплатыНаСервере(НоваяДатаОплаты);
		Модифицированность = Ложь;
		ЭтаФорма.Закрыть();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура СдвинутьСрокОплатыНаСервере(НоваяДатаОплаты)
	
	ЗаявкаОбъект = РеквизитФормыВЗначение("Объект");
	ЗаявкаОбъект.ДатаОплаты = НоваяДатаОплаты;
	ЗаявкаОбъект.Записать();
		
	БП = БПСервер.ПоискБП("Согласование1", Объект.Ссылка);
	Если ЗначениеЗаполнено(БП) Тогда
		
		БПОбъект = БП.ПолучитьОбъект();
		БПОбъект.ОбщийСрок = НоваяДатаОплаты;
		БПОбъект.Записать();
		
		//сдвинем срок задач
		Запрос = новый Запрос;
		Запрос.УстановитьПараметр("Заявка", Объект.Ссылка);
		Запрос.Текст = "ВЫБРАТЬ
		               |	Задача.Ссылка
		               |ИЗ
		               |	Справочник.Задача КАК Задача
		               |ГДЕ
		               |	Задача.Заявка = &Заявка";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект(); 
			ЗадачаОбъект.СрокВыполнения = НоваяДатаОплаты;
			ЗадачаОбъект.Записать();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВозможностьРедактированияЧастичнойОплаты()
	
	Результат = сабОбщегоНазначения.ПолучитьЗначениеСвойства(ПараметрыСеанса.ТекущийПользователь, "Решение об оплате");
	
	Если Результат = Истина Тогда
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	сабОбщегоНазначения.ОтобразитьСостояниеДокумента(ЭтаФорма);
	ЗаполнитьСтрокиТЧ();
КонецПроцедуры


&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	сабОбщегоНазначения.ОтобразитьСостояниеДокумента(ЭтаФорма, ТекущийОбъект);
	
	//Изменим исполнителя в бизнес-процессе
	//Если Не Отказ Тогда
	//	Если НЕ Объект.Ссылка.Пустая() Тогда
	//		ИзменитьИсполнителяВБП(ПараметрыЗаписи.ТекИсполнитель, ТекущийОбъект.ИсполнительОплаты, ТекущийОбъект.Ссылка);
	//	КонецЕсли;
	//КонецЕсли;
	
	
	//Изменим Комментарий в бизнес-процессе
	Если Не Отказ Тогда
		
		Если НЕ Объект.Ссылка.Пустая() Тогда
			ИзменитьКомментарий(ТекущийОбъект.Комментарий, ТекущийОбъект.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
	ПерезаписатьЗаявкиНаОплату(ТекущийОбъект.Ссылка);
	
КонецПроцедуры
#КонецОбласти

&НаСервереБезКонтекста
Функция ИзменитьКомментарий(НовыйКомментарий, ТекОбъект)
	
	//изменить комментарий в Бизнес-процессе
	БП = БПСервер.ПоискБП("Согласование1", ТекОбъект);
	
	Если Не БП = Неопределено Тогда
		БПОбъект = БП.Получитьобъект();
		СтрокиСТекКомментарием = БПОбъект.Описание;
		
		Если НовыйКомментарий <> СтрокиСТекКомментарием Тогда 
			БПОбъект.Описание = НовыйКомментарий;
		КонецЕсли;
		
		БПОбъект.Записать();
	КонецЕсли;
	
	
	//изменить комментарий в Задаче	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Задача.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Задача КАК Задача
	|ГДЕ
	|	Задача.Заявка = &Заявка
	|	И Задача.Выполнена = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Задача.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Заявка", ТекОбъект);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если Не ВыборкаДетальныеЗаписи.Ссылка = Неопределено Тогда
			ЗадачаОбъект = ВыборкаДетальныеЗаписи.Ссылка.Получитьобъект();
			СтрокиСТекКомментарием = ЗадачаОбъект.Описание;
			
			Если Не Найти(СтрокиСТекКомментарием, НовыйКомментарий) Тогда 
				ЗадачаОбъект.Описание = НовыйКомментарий;
				ЗадачаОбъект.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИзменитьИсполнителяВБП(ТекИсполнитель, НовыйИсполнитель, ТекОбъект)
	
	Если Не ТекИсполнитель = НовыйИсполнитель Тогда
		БП = БПСервер.ПоискБП("Согласование1", ТекОбъект);
		Если Не БП = Неопределено Тогда
			БПОбъект = БП.Получитьобъект();
			СтрокиСТекИсполнителем = БПОбъект.ДопИсполнение.НайтиСтроки(Новый Структура("Исполнитель", ТекИсполнитель));
			Для Каждого СтрокаСТекИсполнителем Из СтрокиСТекИсполнителем Цикл
				СтрокаСТекИсполнителем.Исполнитель = НовыйИсполнитель;
			КонецЦикла;	
			БПОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗаявкаНазначениеПлатежаБухПриИзменении(Элемент)	
	
	Если Не ЗначениеЗаполнено(Элементы.Заявка.ТекущиеДанные.НазначениеПлатежа) ИЛИ Элементы.Заявка.ТекущиеДанные.НазначениеПлатежа = ТекНазначениеВСтроке Тогда
		Элементы.Заявка.ТекущиеДанные.НазначениеПлатежа = Элементы.Заявка.ТекущиеДанные.НазначениеПлатежаБух;
	КонецЕсли;
	
	ТекНазначениеВСтроке = Элементы.Заявка.ТекущиеДанные.НазначениеПлатежаБух;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ЗаявкаЗаявкаНаФинансирование" Тогда
		ОткрытьЗначение(Элементы.Заявка.ТекущиеДанные.ЗаявкаНаФинансирование);
	ИначеЕсли Поле.Имя = "ЗаявкаРасшифровкаСтроки" Тогда
		ТекДанные = Элементы.Заявка.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекДанные.ЗаявкаНаФинансирование) Тогда
			ПоказатьЗначение(Неопределено, ТекДанные.ЗаявкаНаФинансирование);
		Иначе
			Форма2 = ПолучитьФорму("Документ.Д_ЗаявкаНаОплату.Форма.ФормаРасшифровкиСтроки",,Элемент);
			//КопироватьДанныеФормы(Объект,Форма2.Объект);
			//Форма2.Элементы.РасшифровкиСтрок.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("УИДСтрокиЗаявки", ТекДанные.УИДСтроки)); 
			Форма2.УИДСтрокиЗаявки = ТекДанные.УИДСтроки;
			НайденныеСтроки = Объект.РасшифровкиСтрок.НайтиСтроки(Новый Структура("УИДСтрокиЗаявки", ТекДанные.УИДСтроки));
			Для каждого ТекСтрока Из НайденныеСтроки Цикл
				НоваяСтрока = Форма2.РасшифровкаСтрок.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока); 			
			КонецЦикла;
			Если НЕ НайденныеСтроки.Количество() Тогда
				НоваяСтрока = Форма2.РасшифровкаСтрок.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекДанные);
				НоваяСтрока.Сумма = ТекДанные.СуммаДДС;
				Если Не ЗначениеЗаполнено(Объект.ЦФО) Тогда
					НоваяСтрока.ЦФО = Объект.Предприятие;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ТекДанные.Подразделение) Тогда
					НоваяСтрока.Подразделение = Объект.ПодразделениеЦФО;
				КонецЕсли;
				НоваяСтрока.УИДСтрокиЗаявки = ТекДанные.УИДСтроки;
			КонецЕсли;
			Форма2.ЦФО = Объект.ЦФО;
			Форма2.ПодразделениеЦФО = Объект.ПодразделениеЦФО;
			Форма2.ВалютныйСчет = ТекДанные.ВалютныйСчет; 
			Форма2.Открыть();
		КонецЕсли;
	ИначеЕсли Поле.Имя = "ЗаявкаРеквизитыНалогов" Тогда
		РеквизитыПеречисленияНалога(Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЦФОПриИзменении(Элемент)
	
	Объект.ПодразделениеЦФО = БюджетныйНаСервере.ВернутьРеквизит(Объект.ЦФО, "ВидДеятельности");
	Элементы.ПодразделениеЦФО.Видимость = БюджетныйНаСервере.ВернутьРеквизит(Объект.ЦФО, "УчетПоПодразделениям");
	//
	//Если Не Элемент = Неопределено Тогда
	//	
	//	Если НЕ Элементы.ПодразделениеЦФО.Видимость Тогда
	//		Объект.ПодразделениеЦФО = "";		
	//	КонецЕсли;	
	//	
	//КонецЕсли;
	
	Для Каждого ТекСтрока Из Объект.ЗаявкаБезнал Цикл
		ТекСтрока.Подразделение = Объект.ПодразделениеЦФО;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если НЕ ЗавершениеРаботы И Не РежимВосстановления Тогда
		сабОбщегоНазначения.ОчиститьАвтосохраненияОбъекта(Объект.Ссылка);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ЗаявкаИсточникПриИзменении(Элемент)
	Элементы.Заявка.ТекущиеДанные.ЭтоБезнал = Ложь;
	Если ТипЗнч(Элементы.Заявка.ТекущиеДанные.Источник) = Тип("СправочникСсылка.БанковскиеСчета")  Тогда
		РеквизитыСчета = БюджетныйНаСервере.ВернутьРеквизиты(Элементы.Заявка.ТекущиеДанные.Источник, "ВидСчета, Валютный");
		Элементы.Заявка.ТекущиеДанные.ВалютныйСчет = РеквизитыСчета.ВидСчета = ПредопределенноеЗначение("Перечисление.ГД_ВидыИсточников.ВалютныйРасчетныйСчет") ИЛИ РеквизитыСчета.Валютный;
		Элементы.Заявка.ТекущиеДанные.ЭтоБезнал = Истина;
	ИначеЕсли ТипЗнч(Элементы.Заявка.ТекущиеДанные.Источник) = Тип("СправочникСсылка.Кассы") Тогда
		РеквизитыКассы = БюджетныйНаСервере.ВернутьРеквизиты(Элементы.Заявка.ТекущиеДанные.Источник, "ВидИсточника");
		Элементы.Заявка.ТекущиеДанные.ВалютныйСчет = РеквизитыКассы.ВидИсточника = ПредопределенноеЗначение("Перечисление.ГД_ВидыИсточников.ВалютныйРасчетныйСчет");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицирован", Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка));
	
	Если ТекущийОбъект.ВидОперации = Перечисления.ВидыОперацийРеестраОплат.ОбщийРеестрПлатежей ИЛИ ТекущийОбъект.ВидОперации = Перечисления.ВидыОперацийРеестраОплат.СводныйРеестрПлатежей Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Предприятия.Родитель КАК Родитель,
		|	Предприятия.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Предприятия КАК Предприятия
		|ГДЕ
		|	Предприятия.Ссылка В(&Предприятия)
		|
		|СГРУППИРОВАТЬ ПО
		|	Предприятия.Родитель,
		|	Предприятия.Ссылка";
		
		Запрос.УстановитьПараметр("Предприятия", ТекущийОбъект.ЗаявкаБезнал.Выгрузить().ВыгрузитьКолонку("ЦФО"));
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выгрузить();
		
		Если Выборка.Количество() = 1 Тогда
			ТекущийОбъект.Предприятие = Выборка[0].Ссылка;
		Иначе
			Выборка.Свернуть("Родитель");
			Если Выборка.Количество() = 1 Тогда
				ТекущийОбъект.Предприятие = Выборка[0].Родитель;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОткрепитьЗаявки(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОткрепитьЗаявки(ТекущийОбъект)

	//открепляем заявки, меняем строки графика и возвращаем заявку на доработку
	ОтмененныеЗаявки = ТекущийОбъект.ЗаявкаБезнал.НайтиСтроки(Новый Структура("ОтменаОплаты", Истина));
	НачатьТранзакцию();
	Для каждого ТекСтрока Из ОтмененныеЗаявки Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ЗаявкаНаФинансирование) Тогда
			
			ТекОб = ТекСтрока.ЗаявкаНаФинансирование.ПолучитьОбъект();
			ТекОб.РеестрЗаявок = Неопределено;
			ТекОб.Записать();
			
			//нужно для заявок без БП
			СтрокиГрафика = РегистрыСведений.сабГрафикПлатежей.СоздатьНаборЗаписей();
			СтрокиГрафика.Отбор.Документ.Установить(ТекСтрока.ЗаявкаНаФинансирование);
			СтрокиГрафика.Прочитать();
			Для каждого ТекЗапись Из СтрокиГрафика Цикл
				Если ТекСтрока.УИДСтроки = ТекЗапись.УИДСтрокиДокумента Тогда
					ТекЗапись.Документ = ТекСтрока.ЗаявкаНаФинансирование;
					ТекЗапись.ТочкаМаршрута = Перечисления.Согласование1ТочкиМаршрута.Старт;			
					ТекЗапись.УИДСтрокиДокумента = "";
				КонецЕсли;
			КонецЦикла;
			СтрокиГрафика.Записать();
			
			//восстанавливаем БП
			БПСервер.ОтправитьНаДоработкуБПЗаявки(ТекСтрока);
			
		КонецЕсли;
		ТекСтрока.ЗаявкаНаФинансирование = Неопределено;	
	КонецЦикла;
	
	//открепляем заявки и меняем строки графика по удаленным строкам
	Для каждого ТекСтрока Из УдаленныеСтроки Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ЗаявкаНаФинансирование) И ЗначениеЗаполнено(ТекСтрока.УИДСтроки) Тогда
			Если ТекСтрока.СуммаДДС = ТекСтрока.ЗаявкаНаФинансирование.Сумма Тогда
				ТекОб = ТекСтрока.ЗаявкаНаФинансирование.ПолучитьОбъект();
				ТекОб.РеестрЗаявок = Неопределено;
				ТекОб.Записать();
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.сабГрафикПлатежей.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Документ.Установить(ТекСтрока.ЗаявкаНаФинансирование);
			//НаборЗаписей.Отбор.УИДСтрокиДокумента.Установить(ТекСтрока.УИДСтроки);
			НаборЗаписей.Прочитать();
			Для каждого ТекЗапись Из НаборЗаписей Цикл
				Если ТекСтрока.УИДСтроки = ТекЗапись.УИДСтрокиДокумента Тогда
					ТекЗапись.Документ = ТекСтрока.ЗаявкаНаФинансирование;
					ТекЗапись.ТочкаМаршрута = ?(ТекЗапись.ТочкаМаршрута = Перечисления.Согласование1ТочкиМаршрута.Действие5, Перечисления.Согласование1ТочкиМаршрута.Действие4, ТекЗапись.ТочкаМаршрута);
					ТекЗапись.УИДСтрокиДокумента = "";
				КонецЕсли;
			КонецЦикла;
			НаборЗаписей.Записать();			
		КонецЕсли;
	КонецЦикла;
	
	УдаленныеСтроки.Очистить();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Источник) Тогда
		Для каждого ТекСтрока Из Объект.ЗаявкаБезнал Цикл
			ТекСтрока.Источник = Объект.Источник;
			Если ТипЗнч(Объект.Источник) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
				ТекСтрока.БанковскийСчет = Объект.Источник;			
			КонецЕсли;		
		КонецЦикла; 	
	КонецЕсли;
	ЗаполнитьСтрокиТЧ();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Для каждого ТекСтрока Из Объект.ЗаявкаБезнал Цикл
			ТекСтрока.Организация = Объект.Организация;
			Если ЗначениеЗаполнено(ТекСтрока.БанковскийСчет) Тогда
				СчетВладелец = БюджетныйНаСервере.ВернутьРеквизит(ТекСтрока.БанковскийСчет, "Владелец");
				Если НЕ СчетВладелец = ТекСтрока.Организация Тогда
					ТекСтрока.БанковскийСчет = Неопределено;
					ТекСтрока.Источник = Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 	
	КонецЕсли;
	БанковскийСчетПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаВалютнаяСуммаПриИзменении(Элемент)
	Курс = УЧ_Сервер.ПолучитьКурсВалют(Элементы.Заявка.ТекущиеДанные.Валюта,, Объект.Дата);
	Элементы.Заявка.ТекущиеДанные.СуммаДДС = Элементы.Заявка.ТекущиеДанные.ВалютнаяСумма * Курс;
КонецПроцедуры


&НаКлиенте
Процедура ОтменитьСтроку(Команда)
	
	ТекСтрока = Элементы.Заявка.ТекущаяСтрока;
	ТекстСтроки = "";
	ДанныеСтроки = Элементы.Заявка.ДанныеСтроки(ТекСтрока);
	ЕстьПППоЗаявке = БПСервер.ПолучитьПППоЗаявке(ДанныеСтроки.ЗаявкаНаФинансирование);
	Если ЕстьПППоЗаявке Тогда
		Сообщить("По данной строке уже создан документ оплаты. Действие невозможно.");
		Возврат;
	КонецЕсли;
	Если ДанныеСтроки.ОтменаОплаты Тогда
		Сообщить("Строка " + ДанныеСтроки.НомерСтроки + ?(ДанныеСтроки.ОтменаОплаты, " восстановлена к оплате.", ?(ЗначениеЗаполнено(ТекСтрока.ЗаявкаНаФинансирование), " будет возвращена на доработку после записи текущего Реестра.", " исключена из оплаты.")));
		ДанныеСтроки.ОтменаОплаты = НЕ ДанныеСтроки.ОтменаОплаты;
		ДанныеСтроки.Рецензент = Неопределено;
		ДанныеСтроки.Комментарии = "";
	Иначе	
		ПоказатьВводСтроки(Новый ОписаниеОповещения("ОтменитьСтрокуЗавершение", ЭтотОбъект, Новый Структура("ТекСтрока, ТекстСтроки", ТекСтрока, ТекстСтроки)), ТекстСтроки, "Укажите причину отмены строки",,Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСтрокуЗавершение(Строка, ДополнительныеПараметры) Экспорт
	
	ТекСтрока = ДополнительныеПараметры.ТекСтрока;
	ТекстСтроки = ?(Строка = Неопределено, ДополнительныеПараметры.ТекстСтроки, Строка);
	
	Если ТипЗнч(ТекСтрока) = Тип("Число") И НЕ Строка = Неопределено Тогда
		
		Модифицированность = Истина;
		ДанныеСтроки = Элементы.Заявка.ДанныеСтроки(ТекСтрока);
		
		Если Не ДанныеСтроки.ОтменаОплаты И Строка = "" Тогда
			Сообщить("Строка не отменена. Укажите причину отмена строки.");
			Возврат;		
		КонецЕсли;
		
		Сообщить("Строка " + ДанныеСтроки.НомерСтроки + ?(ДанныеСтроки.ОтменаОплаты, " восстановлена к оплате.", ?(ЗначениеЗаполнено(ДанныеСтроки.ЗаявкаНаФинансирование), " будет возвращена на доработку после записи текущего Реестра.", " исключена из оплаты."))); 
		ДанныеСтроки.ОтменаОплаты = НЕ ДанныеСтроки.ОтменаОплаты;
		ДанныеСтроки.Рецензент = ?(ДанныеСтроки.ОтменаОплаты, БюджетныйНаСервере.ПолучитьПользователя(), "");
		ДанныеСтроки.Комментарии = ТекстСтроки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаПослеУдаления(Элемент)
	МассивНовых = Новый Массив;
	Для каждого ТекСтрока Из Объект.ОстаткиПоИсточникам Цикл
		Если НЕ Объект.ЗаявкаБезнал.НайтиСтроки(Новый Структура("Источник", ТекСтрока.Источник)).Количество()  Тогда
			МассивНовых.Добавить(ТекСтрока);		
		КонецЕсли;	
	КонецЦикла; 
	
	Для каждого ТекУдСтрока Из МассивНовых Цикл
		Объект.ОстаткиПоИсточникам.Удалить(ТекУдСтрока);	
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	Записать();
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Для каждого ТекСтока Из ИсточникВыбора.ВыбранныеЗаявки Цикл
		ДобавитьСтрокуИзЗаявкиНаФинансирование(ТекСтока.ЗаявкаНаФинансирование);
	КонецЦикла;
	
	ЗаполнитьСтрокиТЧ();
	
	ЗаполнитьОстатки();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСоответствиеСуммаСтрокеГрафика(СтруктураСтрок, ТекСтрока)
	
	НоваяСтрока = Неопределено;
	НаборЗаписей2 = РегистрыСведений.сабГрафикПлатежей.СоздатьНаборЗаписей();
	НаборЗаписей2.Отбор.Документ.Установить(ТекСтрока.ЗаявкаНаФинансирование);
	НаборЗаписей2.Прочитать();
	Для каждого ТекЗаписьНабора Из НаборЗаписей2 Цикл
		Если ?(ТекСтрока.ДатаПлатежа = Дата('00010101'), ТекущаяДата(), ТекСтрока.ДатаПлатежа) = ТекЗаписьНабора.ДатаПлатежа И
			НЕ ТекЗаписьНабора.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ Тогда
			Если ТекЗаписьНабора.УИДСтрокиДокумента = "" ИЛИ ТекСтрока.УИДСтроки = ТекЗаписьНабора.УИДСтрокиДокумента Тогда
				НоваяСтрока = ТекЗаписьНабора;
				ДатаПлатежа = НоваяСтрока.ДатаПлатежа;
				ЕстьЗаявкаНаОплату = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ НоваяСтрока = Неопределено И ТекСтрока.СуммаДДС < НоваяСтрока.Сумма Тогда
		ТекСтрока.СуммаДДС = НоваяСтрока.Сумма - ТекСтрока.СуммаДДС;
		СтруктураСтрок.Добавить(ТекСтрока);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПеренестиОплату(ТекСтрока, НоваяДата)
	
	НаборЗаписей2 = РегистрыСведений.сабГрафикПлатежей.СоздатьНаборЗаписей();
	НаборЗаписей2.Отбор.Документ.Установить(ТекСтрока.ЗаявкаНаФинансирование);
	НаборЗаписей2.Прочитать();
	Для каждого ТекЗаписьНабора Из НаборЗаписей2 Цикл
		Если ?(ТекСтрока.ДатаПлатежа = Дата('00010101'), ТекущаяДата(), ТекСтрока.ДатаПлатежа) = ТекЗаписьНабора.ДатаПлатежа И
			НЕ ТекЗаписьНабора.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ Тогда
			Если ТекЗаписьНабора.УИДСтрокиДокумента = "" ИЛИ ТекСтрока.УИДСтроки = ТекЗаписьНабора.УИДСтрокиДокумента Тогда
				НоваяСтрока = ТекЗаписьНабора;
				ДатаПлатежа = НоваяСтрока.ДатаПлатежа;
				ЕстьЗаявкаНаОплату = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	//НоваяДата = МАКС(БПСервер.ВернутьСледующийРабочийДень(ТекСтрока.ДатаПлатежа), ТекущаяДата());
	ПеренестиЗаписьНаСервере(НоваяСтрока, НоваяДата, ТекСтрока.СуммаДДС, ТекСтрока.Источник);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПеренестиЗаписьНаСервере(КлючЗаписи, НоваяДата, НоваяСумма, НовыйИсточник, НомерИтерации = 1)
	
	МенеджерЗаписи1 = РегистрыСведений.сабГрафикПлатежей.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи1, КлючЗаписи);
	МенеджерЗаписи1.Прочитать();
	ВалСуммаТекущая = МенеджерЗаписи1.ВалютнаяСумма;
	СуммаТекущая = МенеджерЗаписи1.Сумма;
	ДатаТекущая = МенеджерЗаписи1.ДатаПлатежа; 
	СтавкаНДС = сабОбщегоНазначения.ПолучитьСтавкуНДС(МенеджерЗаписи1.СтавкаНДС);
	
	Если НачалоДня(НоваяДата) = НачалоДня(ДатаТекущая) Тогда //вероятно перенос между источниками
		МенеджерЗаписи2 = РегистрыСведений.сабГрафикПлатежей.СоздатьМенеджерЗаписи();	
	Иначе
		МенеджерЗаписи2 = РегистрыСведений.сабГрафикПлатежей.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи2, КлючЗаписи);
		МенеджерЗаписи2.ДатаПлатежа = НоваяДата;
		МенеджерЗаписи2.Прочитать();
		
		Если НЕ МенеджерЗаписи2.Выбран() Тогда //ищем другой УИД
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	*
			|ИЗ
			|	РегистрСведений.сабГрафикПлатежей КАК сабГрафикПлатежей
			|ГДЕ
			|	НЕ сабГрафикПлатежей.УИДСтрокиДокумента = &УИДСтрокиДокумента
			|	И сабГрафикПлатежей.Документ = &Документ
			|	И сабГрафикПлатежей.ДатаПлатежа = &ДатаПлатежа
			|	И сабГрафикПлатежей.ТочкаМаршрута = &ТочкаМаршрута
			|	И сабГрафикПлатежей.СтатьяДДС = &СтатьяДДС
			|	И сабГрафикПлатежей.ВидОперации = &ВидОперации";
			
			Запрос.УстановитьПараметр("УИДСтрокиДокумента", КлючЗаписи.УИДСтрокиДокумента);
			Запрос.УстановитьПараметр("Документ", КлючЗаписи.Документ);
			Запрос.УстановитьПараметр("ДатаПлатежа", НоваяДата);
			Запрос.УстановитьПараметр("ТочкаМаршрута", КлючЗаписи.ТочкаМаршрута);
			Запрос.УстановитьПараметр("СтатьяДДС", КлючЗаписи.СтатьяДДС);
			Запрос.УстановитьПараметр("ВидОперации", КлючЗаписи.ВидОперации);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи2, Выборка);	
				МенеджерЗаписи2.Прочитать();
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ МенеджерЗаписи2.Выбран() Тогда
		МенеджерЗаписи1.ДатаПлатежа = НоваяДата;
		
		Если НоваяСумма Тогда
			МенеджерЗаписи1.ВалютнаяСумма = МенеджерЗаписи1.ВалютнаяСумма * (?(МенеджерЗаписи1.Сумма, НоваяСумма / МенеджерЗаписи1.Сумма, 0));
			МенеджерЗаписи1.Сумма = НоваяСумма;
        	МенеджерЗаписи1.СуммаНДС = НоваяСумма - (НоваяСумма) / ((СтавкаНДС + 100) / 100);
		КонецЕсли;
		
		Если НЕ НовыйИсточник = Неопределено Тогда
			МенеджерЗаписи1.Источник = НовыйИсточник;
		КонецЕсли;
		
		МенеджерЗаписи1.Записать();

	Иначе
		МенеджерЗаписи2.ВалютнаяСумма = МенеджерЗаписи2.ВалютнаяСумма * (?(МенеджерЗаписи2.Сумма, НоваяСумма / МенеджерЗаписи2.Сумма, 0));
		МенеджерЗаписи2.Сумма = МенеджерЗаписи2.Сумма + ?(НоваяСумма, НоваяСумма, СуммаТекущая);
		МенеджерЗаписи2.СуммаНДС = МенеджерЗаписи2.Сумма - (МенеджерЗаписи2.Сумма) / ((СтавкаНДС + 100) / 100);

		Если НЕ НовыйИсточник = Неопределено Тогда
			МенеджерЗаписи2.Источник = НовыйИсточник;
		КонецЕсли;
		
		МенеджерЗаписи2.Записать();
	КонецЕсли;
	
	Если НоваяСумма Тогда
		МенеджерЗаписи = РегистрыСведений.сабГрафикПлатежей.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, КлючЗаписи);
		МенеджерЗаписи.Прочитать();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, МенеджерЗаписи1);
		МенеджерЗаписи.ВалютнаяСумма = ВалСуммаТекущая - ВалСуммаТекущая * (НоваяСумма / СуммаТекущая);
		МенеджерЗаписи.Сумма = СуммаТекущая - НоваяСумма;
		МенеджерЗаписи.СуммаНДС = МенеджерЗаписи.Сумма - (МенеджерЗаписи.Сумма) / ((СтавкаНДС + 100) / 100);
		МенеджерЗаписи.ДатаПлатежа = ДатаТекущая;
		МенеджерЗаписи.Записать();
		
		Если МенеджерЗаписи1.Выбран() И ЗначениеЗаполнено(МенеджерЗаписи1.УИДСтрокиДокумента) Тогда
			МенеджерЗаписи1.УИДСтрокиДокумента = Новый УникальныйИдентификатор; //создаем новые УИД для новой строки
		КонецЕсли;
		МенеджерЗаписи1.Записать();
		
	ИначеЕсли МенеджерЗаписи2.Выбран() И НЕ НоваяСумма Тогда 
		МенеджерЗаписи1.Удалить();	
	КонецЕсли;
	
	//перенос для ВНХ заявки
	Если НомерИтерации = 1 Тогда
		НаборЗаписей2 = РегистрыСведений.сабГрафикПлатежей.СоздатьНаборЗаписей();
		ТекМенеджер = ?(ЗначениеЗаполнено(МенеджерЗаписи1.Документ), МенеджерЗаписи1, МенеджерЗаписи2);
		НаборЗаписей2.Отбор.Документ.Установить(ТекМенеджер.Документ);
		НаборЗаписей2.Прочитать();
		НоваяСтрока = Неопределено;
		Для каждого ТекЗаписьНабора Из НаборЗаписей2 Цикл
			Если (ТекМенеджер.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ И
				(ТекЗаписьНабора.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ОплатаВНХ
				ИЛИ ТекЗаписьНабора.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.СнятиеНаличных)) ИЛИ 
				((ТекМенеджер.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ОплатаВНХ ИЛИ ТекМенеджер.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.СнятиеНаличных) И
				ТекЗаписьНабора.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ)
				И ТекЗаписьНабора.ДатаПлатежа = ДатаТекущая Тогда
				Если ТекЗаписьНабора.УИДСтрокиДокумента = "" ИЛИ ТекЗаписьНабора.УИДСтрокиДокумента = ТекЗаписьНабора.УИДСтрокиДокумента Тогда
					НоваяСтрока = ТекЗаписьНабора;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;					
		
		Если Не НоваяСтрока = Неопределено Тогда
			ПеренестиЗаписьНаСервере(НоваяСтрока, НоваяДата, НоваяСумма, НоваяСтрока.Источник, 2)
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверкаСоответствияЗаявокРегистру()
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Заявки.ЗаявкаНаФинансирование КАК Документ,
	               |	Заявки.ДатаПлатежа КАК ДатаПлатежа,
	               |	Заявки.УИДСтроки КАК УИДСтрокиДокумента,
	               |	Заявки.НомерСтроки КАК НомерСтроки
	               |ПОМЕСТИТЬ ВТ_Заявки
	               |ИЗ
	               |	&Заявки КАК Заявки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Заявки.НомерСтроки КАК НомерСтроки
	               |ИЗ
	               |	ВТ_Заявки КАК ВТ_Заявки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.сабГрафикПлатежей КАК сабГрафикПлатежей
	               |		ПО ВТ_Заявки.Документ = сабГрафикПлатежей.Документ
	               |			И ВТ_Заявки.ДатаПлатежа = сабГрафикПлатежей.ДатаПлатежа
	               |			И (ВТ_Заявки.УИДСтрокиДокумента = сабГрафикПлатежей.УИДСтрокиДокумента
	               |				ИЛИ сабГрафикПлатежей.УИДСтрокиДокумента = """")
	               |ГДЕ
	               |	сабГрафикПлатежей.Предприятие ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("Заявки", Объект.ЗаявкаБезнал.Выгрузить());
	Выборка = Запрос.Выполнить().Выбрать();
	Результат = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.НомерСтроки);
	КонецЦикла;
	Возврат Результат;
	
КонецФункции;

