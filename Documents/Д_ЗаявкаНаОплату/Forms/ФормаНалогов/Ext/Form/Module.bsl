&НаКлиенте
Процедура ПериодичностьУплатыПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	Если ПериодичностьУплаты <> "0" И ПериодичностьУплаты <> "-" Тогда
		Если ГодПлатежа = 0 Тогда
			ГодПлатежа = Год(Дата);
		КонецЕсли;
		Если ПериодичностьУплаты = "ГД" Тогда
			ПериодПлатежа = 0;
		Иначе
			Если ПериодичностьУплаты = "МС" Тогда
				ПериодПлатежа = Мин(ПериодПлатежа, 12);
			ИначеЕсли ПериодичностьУплаты = "КВ" Тогда
				ПериодПлатежа = Мин(ПериодПлатежа, 4);
			ИначеЕсли ПериодичностьУплаты = "ПЛ" Тогда
				ПериодПлатежа = Мин(ПериодПлатежа, 2);
			КонецЕсли;
			ПериодПлатежа = Макс(1, ПериодПлатежа);
		КонецЕсли;
	Иначе
		ГодПлатежа = 0;
	КонецЕсли;
	
	УстановитьПоказательПериода();
	УстановитьДоступностьРеквизитовПеречисленияНалогов();
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняет необходимые действия по формированию реквизита
// ПоказательПериода.
//
Процедура УстановитьПоказательПериода()
	
	Если ПериодичностьУплаты = "0" Тогда
		ПоказательПериода = "0";
	ИначеЕсли ПериодичностьУплаты = "-" Тогда
		ПоказательПериода = Формат(ДатаПлатежа, "ДФ=dd.MM.yyyy");
	Иначе
		ПоказательПериода = Лев(ПериодичностьУплаты, 2)
								 + "."
								 + Формат(ПериодПлатежа, "ЧЦ=2; ЧН=; ЧВН=")
								 + "."
								 + Формат(ГодПлатежа, "ЧЦ=4; ЧГ=");
	КонецЕсли;
	
КонецПроцедуры // УстановитьПоказательПериода()

&НаКлиенте
// Процедура устанавливает доступность реквизитов перечисления налогов.
//
Процедура УстановитьДоступностьРеквизитовПеречисленияНалогов()
	
	Если ПериодичностьУплаты = "0" Тогда
		Элементы.ГодПериод.Видимость = Ложь;
		Элементы.ДатаПлатежа.Видимость = Ложь;
	Иначе
		Если ПериодичностьУплаты = "-" Тогда
			Элементы.ГодПериод.Видимость = Ложь;
			Элементы.ДатаПлатежа.Видимость = Истина;
		Иначе
			Элементы.ГодПериод.Видимость = Истина;
			Элементы.ДатаПлатежа.Видимость = Ложь;
			Элементы.ПериодПлатежа.Видимость = ПериодичностьУплаты <> "ГД";
			Если ПериодичностьУплаты = "МС" Тогда
				Элементы.ПериодПлатежа.МинимальноеЗначение = 1;
				Элементы.ПериодПлатежа.МаксимальноеЗначение = 12;
				Элементы.ПериодПлатежа.Заголовок = "Месяц";
			ИначеЕсли ПериодичностьУплаты = "КВ" Тогда
				Элементы.ПериодПлатежа.МинимальноеЗначение = 1;
				Элементы.ПериодПлатежа.МаксимальноеЗначение = 4;
				Элементы.ПериодПлатежа.Заголовок = "Квартал";
			ИначеЕсли ПериодичностьУплаты = "ПЛ" Тогда
				Элементы.ПериодПлатежа.МинимальноеЗначение = 1;
				Элементы.ПериодПлатежа.МаксимальноеЗначение = 2;
				Элементы.ПериодПлатежа.Заголовок = "Полугодие";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УстановитьДоступностьРеквизитовПеречисленияНалогов()

&НаКлиенте
// Процедура - обработчик события ПриИзменении реквизита ДатаПлатежа.
// В процедуре устанавливается реквизит Показатель периода.
//
Процедура ДатаПлатежаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	УстановитьПоказательПериода();
	
КонецПроцедуры // ДатаПлатежаПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении реквизита ГодПлатежа.
// В процедуре устанавливается реквизит Показатель периода.
//
Процедура ГодПлатежаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	УстановитьПоказательПериода();
	
КонецПроцедуры // ГодПлатежаПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении реквизита ПериодПлатежа.
// В процедуре устанавливается реквизит Показатель периода.
//
Процедура ПериодПлатежаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	УстановитьПоказательПериода();
	
КонецПроцедуры // ПериодПлатежаПриИзменении()


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//обработка параметров
	//ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры); 
	КодБК = Параметры.КодБК;
	КодОКАТО = Параметры.КодОКАТО;
	ПоказательОснования = Параметры.ПоказательОснования;
	СтатусСоставителя = Параметры.СтатусСоставителя;
	ПоказательНомера = Параметры.ПоказательНомера;
	ПоказательДаты = Параметры.ПоказательДаты;
	ПоказательТипа = Параметры.ПоказательТипа;
	ПоказательПериода = Параметры.ПоказательПериода;
	Налог = Параметры.Налог;
	ВидНалоговогоОбязательства = Параметры.ВидНалоговогоОбязательства;
	
	Если Параметры.Свойство("УИН") Тогда
		УИН = Параметры.УИН;
	КонецЕсли;
	
	УИДФормы = Параметры.УИДФормы;
	
	Если ПоказательПериода = "0"
	 ИЛИ ПустаяСтрока(ПоказательПериода)
	 ИЛИ ПустаяСтрока(СтрЗаменить(ПоказательПериода, ".", "")) Тогда
		ПериодичностьУплаты = "0";
	Иначе
		СтрокаВидаПериода = Лев(ПоказательПериода, 2);
		СтрокаПериода     = Сред(ПоказательПериода, 4, 2);
		СтрокаГода        = Сред(ПоказательПериода, 7);
		
		Если СтрокаВидаПериода = "ГД" Тогда
			ПериодичностьУплаты = "ГД";
		ИначеЕсли СтрокаВидаПериода = "ПЛ" Тогда
			ПериодичностьУплаты = "ПЛ";
		ИначеЕсли СтрокаВидаПериода = "КВ" Тогда
			ПериодичностьУплаты = "КВ";
		ИначеЕсли СтрокаВидаПериода = "МС" Тогда
			ПериодичностьУплаты = "МС";
		Иначе
			ПериодичностьУплаты = "-";
		КонецЕсли;
		
		Попытка
			ГодЧислом    = Число(СтрокаГода);
			ПериодЧислом = Число(СтрокаПериода);
			
			Если ПериодичностьУплаты = "-" Тогда
				ДеньЧислом  = Число(СтрокаВидаПериода);
				ДатаПлатежа = Дата(ГодЧислом, ПериодЧислом, ДеньЧислом);
			Иначе
				ГодПлатежа    = ГодЧислом;
				ПериодПлатежа = ПериодЧислом;
			КонецЕсли;
			
		Исключение
			ПоказательПериода   = "0";
			ПериодичностьУплаты = "0";
		КонецПопытки;
		
	КонецЕсли;

	Если ПериодичностьУплаты = "0" Тогда
		Элементы.ГодПериод.Видимость = Ложь;
		Элементы.ДатаПлатежа.Видимость = Ложь;
	Иначе
		
		Если ПериодичностьУплаты = "-" Тогда
			Элементы.ГодПериод.Видимость = Ложь;
			Элементы.ДатаПлатежа.Видимость = Истина;
		Иначе
			Элементы.ГодПериод.Видимость = Истина;
			Элементы.ДатаПлатежа.Видимость = Ложь;
			Элементы.ПериодПлатежа.Видимость = ПериодичностьУплаты <> "ГД";
			
			Если ПериодичностьУплаты = "МС" Тогда
				Элементы.ПериодПлатежа.МинимальноеЗначение = 1;
				Элементы.ПериодПлатежа.МаксимальноеЗначение = 12;
				Элементы.ПериодПлатежа.Заголовок = "Месяц";
			ИначеЕсли ПериодичностьУплаты = "КВ" Тогда
				Элементы.ПериодПлатежа.МинимальноеЗначение = 1;
				Элементы.ПериодПлатежа.МаксимальноеЗначение = 4;
				Элементы.ПериодПлатежа.Заголовок = "Квартал";
			ИначеЕсли ПериодичностьУплаты = "ПЛ" Тогда
				Элементы.ПериодПлатежа.МинимальноеЗначение = 1;
				Элементы.ПериодПлатежа.МаксимальноеЗначение = 2;
				Элементы.ПериодПлатежа.Заголовок = "Полугодие";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Если НЕ БюджетныйНаСервере.РольДоступнаСервер("Администратор") Тогда
		ЭтаФорма.Доступность = 1 - Параметры.Доступность;
		Элементы.КонструкторКБК.Доступность = 1 - Параметры.Доступность;
	//КонецЕсли;
	
	
КонецПроцедуры


&НаКлиенте
Процедура Готово(Команда)
	
	Оповестить("ПередатьНалогиВФорму", Новый Структура("КодБК, КодОКАТО, ПоказательОснования, СтатусСоставителя, ПоказательНомера, ПоказательДаты, ПоказательТипа, ПоказательПериода, УИН, УИДФормы, Налог, ВидНалоговогоОбязательства",
	КодБК, КодОКАТО, ПоказательОснования, СтатусСоставителя, ПоказательНомера, ПоказательДаты, ПоказательТипа, ПоказательПериода, УИН, УИДФормы, Налог, ВидНалоговогоОбязательства)); 
	
	Закрыть();
	
КонецПроцедуры


&НаКлиенте
Процедура КонструкторКБК(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КБК",             КодБК);
	ПараметрыФормы.Вставить("ПоказательТипа", ПоказательТипа);
	ПараметрыФормы.Вставить("ВидПеречисления", ВидНалоговогоОбязательства);
	ПараметрыФормы.Вставить("ГодПлатежа",      ГодПлатежа);
	
	ОткрытьФорму(
		"Справочник.ВидыНалоговИПлатежейВБюджет.Форма.КонструкторКБК",
		ПараметрыФормы, 
		Элементы.КодБК);
	
КонецПроцедуры

&НаКлиенте
Процедура НалогПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Налог) Тогда
		НалогОбработатьИзменение(Неопределено);		
	Иначе
		ВидНалоговогоОбязательства = ПредопределенноеЗначение("Перечисление.ВидыНалогов.ПустаяСсылка");
		КодБК = "";	  
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура НалогОбработатьИзменение(СтрокаПоискаПоКБК)
	
	ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Налог, "ВидНалога");
	
	ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог;
	ЗаполнитьВидНалоговогоОбязательстваНаСервере();
	
	КодБК = Налог.КБК;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидНалоговогоОбязательстваНаСервере()
			
	СписокВидовНалоговыхОбязательств = Справочники.ВидыНалоговИПлатежейВБюджет.СписокВидовНалоговыхОбязательств(Налог, Дата);
	
	Если СписокВидовНалоговыхОбязательств.НайтиПоЗначению(ВидНалоговогоОбязательства) = Неопределено Тогда
		Если СписокВидовНалоговыхОбязательств.Количество() > 0 Тогда
			ВидНалоговогоОбязательства = СписокВидовНалоговыхОбязательств[0].Значение;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьСписокВыбора(Элементы.ВидНалоговогоОбязательства, СписокВидовНалоговыхОбязательств);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбора(Элемент, СписокДанных)
	
	Элемент.СписокВыбора.Очистить();
	
	Для каждого ЭлементДанных Из СписокДанных Цикл
		Элемент.СписокВыбора.Добавить(ЭлементДанных.Значение, ЭлементДанных.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидНалоговогоОбязательстваПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Налог) И ЗначениеЗаполнено(ВидНалоговогоОбязательства) Тогда
		ВидаНалоговогоОбязательстваОбработатьИзменение();		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидаНалоговогоОбязательстваОбработатьИзменение()
			
	РеквизитыПлатежаВБюджетПриИзмененииВидаНалоговогоОбязательства()
			
КонецПроцедуры

&НаСервере
Процедура РеквизитыПлатежаВБюджетПриИзмененииВидаНалоговогоОбязательства()
			
	ШаблонКБК = ПлатежиВБюджетКлиентСервер.КодГлавногоАдминистратора(КодБК) + ПлатежиВБюджетКлиентСервер.ШаблонКБК(КодБК, Истина);
		
	КодБК = Справочники.ВидыНалоговИПлатежейВБюджет.КБКПоВидуНалоговогоОбязательства(
			ШаблонКБК, Налог.ВидНалога, ВидНалоговогоОбязательства, Дата);
		
КонецПроцедуры

