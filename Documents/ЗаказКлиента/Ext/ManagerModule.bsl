#Область СлужебныеПроцедурыИФункции

// Функция формирует печатную форму документа.
//
Функция ПечатьЗаказПоставщику(МассивОбъектов) Экспорт
	
	КолонкаКодов       = "Код";//ФормированиеПечатныхФормСервер.ИмяДополнительнойКолонки();
	ВыводитьКоды       = НЕ ПустаяСтрока(КолонкаКодов);
	ВыводитьУпаковки   = Ложь;//ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	ТабличныйДокумент  = Новый ТабличныйДокумент;
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
	СинонимДокумента   = НСтр("ru='Заказ поставщику'");
	//Если БюджетныйНаСервере.РольАдминаДоступнаСервер() Тогда
	ВыводитьШтрихкод = Истина;
	//Иначе
	//	ВыводитьШтрихкод = Ложь;
	//КонецЕсли;	
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПоставщику_ЗаказПоставщику";
	
	ЗапросПоШтрихкодам = Новый Запрос;
	ЗапросПоШтрихкодам.Текст = 
	"ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод,
	|	ШтрихкодыНоменклатуры.Номенклатура,
	|	ШтрихкодыНоменклатуры.Основной
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры";
	ТаблицаШтрихкодов = ЗапросПоШтрихкодам.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Номер КАК Номер,
	|	Документ.Дата КАК Дата,
	|	Документ.Организация КАК Покупатель,
	|	Документ.Контрагент КАК Поставщик,
	|	Документ.Ответственный КАК Ответственный,
	|	Документ.Организация.Код КАК Префикс,
	|	Документ.УчитыватьНДС КАК УчитыватьНДС,
	|	Документ.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Контрагент) КАК ПоставщикПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Организация) КАК ПокупательПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Ответственный) КАК ОтветственныйПредставление,
	|	Документ.Подразделение,
	|	Документ.ДатаПоступления,
	|	Документ.ВидОперации,
	|	Документ.ПредприятиеВн
	|ИЗ
	|	Документ.ЗаказПоставщику КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивОбъектов)
	|	И Документ.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Номенклатура.Код КАК КолонкаКодов,
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеЕдиницыИзмеренияУпаковки,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ТаблицаТовары.КоличествоВЗапайках
	|ИЗ
	|	Документ.ЗаказПоставщику.ТабличнаяЧасть КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&МассивОбъектов)
	|	И ТаблицаТовары.Ссылка.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Макет = Документы.ЗаказПоставщику.ПолучитьМакет("ПФ_MXL_ЗаказПоставщику");
	
	ОбластьЗаголовок 		= Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка 			= Макет.ПолучитьОбласть("Шапка");
	ОбластьШтрихкода 		= Макет.ПолучитьОбласть("ОбластьШтрихкода");
	
	ОбластьШапкаТаблицыНачало 	= Макет.ПолучитьОбласть("ШапкаТаблицы|НачалоСтроки");
	ОбластьСтрокаТаблицыНачало 	= Макет.ПолучитьОбласть("СтрокаТаблицы|НачалоСтроки");
	ОбластьПодвалТаблицыНачало 	= Макет.ПолучитьОбласть("ПодвалТаблицы|НачалоСтроки");
	
	ОбластьШапкаТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьСтрокаТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
	ОбластьПодвалТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
	
	ОбластьШапкаТаблицыШтрихкодов 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаШтрихкодов");
	ОбластьСтрокаТаблицыШтрихкодов 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаШтрихкодов");
	ОбластьПодвалТаблицыШтрихкодов 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаШтрихкодов");
	
	ОбластьШапкаТаблицыКолонкаКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов; 
	
	ОбластьШапкаТаблицыКолонкаУпаковок 		= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаУпаковок");
	ОбластьСтрокаТаблицыКолонкаУпаковок 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаУпаковок");
	ОбластьПодвалТаблицыКолонкаУпаковок		= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаУпаковок");
	
	ОбластьШапкаТаблицыКолонкаЗапайки 		= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаЗапайки");
	ОбластьСтрокаТаблицыКолонкаЗапайки 		= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаЗапайки");
	ОбластьПодвалТаблицыКолонкаЗапайки		= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаЗапайки");
	
	ОбластьКолонкаТоваров = Макет.Область("КолонкаТоваров");
	
	Если НЕ ВыводитьКоды Тогда
		
		ОбластьКолонкаТоваров.ШиринаКолонки = ОбластьКолонкаТоваров.ШиринаКолонки + Макет.Область("КолонкаКодов").ШиринаКолонки;
		
	КонецЕсли;
	
	Если НЕ ВыводитьУпаковки Тогда
		
		ОбластьКолонкаТоваров.ШиринаКолонки = ОбластьКолонкаТоваров.ШиринаКолонки + Макет.Область("КолонкаУпаковокКоличество").ШиринаКолонки
		+ Макет.Область("КолонкаУпаковокПредставление").ШиринаКолонки;
		
	КонецЕсли;
	
	ОбластьШапкаТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаТоваров");
	ОбластьСтрокаТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаТоваров");
	ОбластьПодвалТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаТоваров");
	
	ОбластьШапкаТаблицыКонец 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КонецСтроки");
	ОбластьСтрокаТаблицыКонец 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КонецСтроки");
	ОбластьПодвалТаблицыКонец 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КонецСтроки");
	
	ОбластьПодписей       = Макет.ПолучитьОбласть("Подписи");
	ОбластьИтого          = Макет.ПолучитьОбласть("Итого");
	ОбластьИтогоНДС       = Макет.ПолучитьОбласть("ИтогоНДС");
	ОбластьСуммаПрописью  = Макет.ПолучитьОбласть("СуммаПрописью");
	
	ВыборкаПоДокументам = Результаты[0].Выбрать();
	
	ВыборкаПоТабличнымЧастям = Результаты[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если НЕ ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаПоДокументам.ПредприятиеВн) Тогда
			ВыводитьЗапайки = Истина;
		Иначе
			ВыводитьЗапайки = Ложь;
		КонецЕсли;	
		
		ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если НЕ ПервыйДокумент Тогда
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		//ШТРИХКОД
		ЗначениеШтрихкода = ВыборкаПоДокументам.Номер;
		Рисунок = ОбластьШтрихкода.Рисунки.КартинкаШтрихкода;
		
		КоличествоМиллиметровВПикселе = 0.26458;
		
		ПараметрыШтрихкода = Новый Структура;
		ПараметрыШтрихкода.Вставить("Ширина",	Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе));
		ПараметрыШтрихкода.Вставить("Высота",	Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе));
		
		//Если СтруктураШаблона.ТипКода = 16 Тогда
		//	МинСторона = Мин(ПараметрыШтрихкода.Ширина, ПараметрыШтрихкода.Высота);
		//	ПараметрыШтрихкода.Ширина = МинСторона;
		//	ПараметрыШтрихкода.Высота = МинСторона;
		//КонецЕсли;
		
		//Если СтруктураШаблона.Свойство("УровеньКоррекцииQR") Тогда
		//	ПараметрыШтрихкода.Вставить("УровеньКоррекцииQR", СтруктураШаблона.УровеньКоррекцииQR);
		//Иначе
		ПараметрыШтрихкода.Вставить("УровеньКоррекцииQR", 0);
		//КонецЕсли;
		
		ПараметрыШтрихкода.Вставить("Штрихкод",				ЗначениеШтрихкода);
		ПараметрыШтрихкода.Вставить("ТипКода",				99);//СтруктураШаблона.ТипКода);
		ПараметрыШтрихкода.Вставить("ОтображатьТекст",		Истина);//СтруктураШаблона.ОтображатьТекст);
		ПараметрыШтрихкода.Вставить("РазмерШрифта",			12);//СтруктураШаблона.РазмерШрифта);
		
		//Если СтруктураШаблона.Свойство("УголПоворота") Тогда
		ПараметрыШтрихкода.Вставить("УголПоворота", 0);//СтруктураШаблона.УголПоворота);
		//КонецЕсли;
		
		Рисунок.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
		
		ТабличныйДокумент.Вывести(ОбластьШтрихкода);
		
		// ЗАГОЛОВОК
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
		ОбластьЗаголовок.Параметры.Заполнить(ВыборкаПоДокументам);
		ОбластьЗаголовок.Параметры.ЗаголовокЗаказа = ?(ВыборкаПоДокументам.ВидОперации = Перечисления.ВидыЗаказов.ВозвратБрака, "Заказ на возрат поставщику", ?(ВыборкаПоДокументам.ВидОперации = Перечисления.ВидыЗаказов.ВнутреннееПеремещение, "Заказ на перемещение", "Заказ поставщику"));
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = "№ " + РеквизитыДокумента.Номер + " от " + Формат(РеквизитыДокумента.Дата, "ДФ='дд ММММ гггг'") + " г.";
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		// ШАПКА
		ОбластьШапка.Параметры.Заполнить(ВыборкаПоДокументам);
		Если ВыборкаПоДокументам.ДатаПоступления = НачалоДня(ВыборкаПоДокументам.ДатаПоступления) Тогда
			ОбластьШапка.Параметры.ДатаПоступления = Формат(ВыборкаПоДокументам.ДатаПоступления, "ДФ='dd ММММ yyyy ''г.'''");
		Иначе
			ОбластьШапка.Параметры.ДатаПоступления = Формат(ВыборкаПоДокументам.ДатаПоступления, "ДФ='dd ММММ yyyy ''г.'' ''в'' ЧЧ:мм '");
		КонецЕсли; 
		ОбластьШапка.Параметры.ПокупательПредставление = ВыборкаПоДокументам.ПокупательПредставление + ", " + Справочники.СтруктураПредприятия.ПолучитьАдресИзКонтактнойИнформации(ВыборкаПоДокументам.Подразделение);
		ТабличныйДокумент.Вывести(ОбластьШапка);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицыНачало);
		
		Если ВыводитьКоды Тогда
			
			ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаКодов);
			
		КонецЕсли;
		
		Если ВыводитьШтрихкод Тогда
			ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыШтрихкодов);
		КонецЕсли;	
		
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаТоваров);
		
		Если ВыводитьУпаковки Тогда
			
			ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаУпаковок);
			
		КонецЕсли;
		
		Если ВыводитьЗапайки Тогда
			ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаЗапайки);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКонец);
		ВсегоНаименований  = 0;
		Итого              = 0;
		ИтогоНДС           = 0;
		
		// СТРОКИ ТЧ
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
			
			ОбластьСтрокаТаблицыНачало.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицыНачало);
			
			Если ВыводитьКоды Тогда
				
				ОбластьСтрокаТаблицыКолонкаКодов.Параметры.Артикул = ВыборкаПоСтрокамТЧ["КолонкаКодов"];
				ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаКодов);
				
			КонецЕсли;
			
			Если ВыводитьШтрихкод Тогда
				//ШТРИХКОД
				СтрокиШтрихкодов = ТаблицаШтрихкодов.НайтиСтроки(Новый Структура("Номенклатура", ВыборкаПоСтрокамТЧ.Номенклатура));
				
				Если СтрокиШтрихкодов.Количество() > 0 Тогда
					ЗначениеШтрихкода = СтрокиШтрихкодов[0].Штрихкод;
					
					Если СтрокиШтрихкодов.Количество() > 1 Тогда 
						
						Для Каждого СтрокаШК Из СтрокиШтрихкодов Цикл
							
							Если Не СтрокаШК.Основной Тогда
								Продолжить;
							КонецЕсли;
							
							ЗначениеШтрихкода = СтрокаШК.Штрихкод;
						КонецЦикла;
						
					КонецЕсли;
					
					Рисунок = ОбластьСтрокаТаблицыШтрихкодов.Рисунки.ШтрихкодНоменклатуры;
					
					КоличествоМиллиметровВПикселе = 0.26458;
					
					ПараметрыШтрихкода = Новый Структура;
					ПараметрыШтрихкода.Вставить("Ширина",	Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе));
					ПараметрыШтрихкода.Вставить("Высота",	Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе));
					
					//Если СтруктураШаблона.ТипКода = 16 Тогда
					//	МинСторона = Мин(ПараметрыШтрихкода.Ширина, ПараметрыШтрихкода.Высота);
					//	ПараметрыШтрихкода.Ширина = МинСторона;
					//	ПараметрыШтрихкода.Высота = МинСторона;
					//КонецЕсли;
					
					//Если СтруктураШаблона.Свойство("УровеньКоррекцииQR") Тогда
					//	ПараметрыШтрихкода.Вставить("УровеньКоррекцииQR", СтруктураШаблона.УровеньКоррекцииQR);
					//Иначе
					ПараметрыШтрихкода.Вставить("УровеньКоррекцииQR", 0);
					//КонецЕсли;
					
					ПараметрыШтрихкода.Вставить("Штрихкод",				ЗначениеШтрихкода);
					ПараметрыШтрихкода.Вставить("ТипКода",				99);//СтруктураШаблона.ТипКода);
					ПараметрыШтрихкода.Вставить("ОтображатьТекст",		Истина);//СтруктураШаблона.ОтображатьТекст);
					ПараметрыШтрихкода.Вставить("РазмерШрифта",			12);//СтруктураШаблона.РазмерШрифта);
					
					//Если СтруктураШаблона.Свойство("УголПоворота") Тогда
					ПараметрыШтрихкода.Вставить("УголПоворота", 0);//СтруктураШаблона.УголПоворота);
					//КонецЕсли;
					
					Рисунок.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
				КонецЕсли;
				
				ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыШтрихкодов);
			КонецЕсли;
			
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Товар = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаПоСтрокамТЧ.НоменклатураПредставление);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаТоваров);
			
			Если ВыводитьУпаковки Тогда
				
				ОбластьСтрокаТаблицыКолонкаУпаковок.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
				ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаУпаковок);
				
			КонецЕсли;
			
			Если ВыводитьЗапайки Тогда
				ОбластьСтрокаТаблицыКолонкаЗапайки.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
				ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаЗапайки);
			КонецЕсли;
			
			ОбластьСтрокаТаблицыКонец.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКонец);
			
			ВсегоНаименований = ВсегоНаименований + 1;
			Итого             = Итого + ВыборкаПоСтрокамТЧ.Сумма;
			ИтогоНДС          = ИтогоНДС + ВыборкаПоСтрокамТЧ.СуммаНДС;
			
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьПодвалТаблицыНачало);
		
		Если ВыводитьКоды Тогда
			
			ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаКодов);
			
		КонецЕсли;
		
		Если ВыводитьШтрихкод Тогда
			ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыШтрихкодов);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаТоваров);
		
		Если ВыводитьУпаковки Тогда
			
			ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаУпаковок);
			
		КонецЕсли;
		
		Если ВыводитьЗапайки Тогда
			ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаЗапайки);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКонец);
		
		// ИТОГО
		ТекстИтоговойСтроки = НСтр("ru = '%Итого%'");
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%Итого%",ФормированиеПечатныхФормСервер.ФорматСумм(Итого));
		ОбластьИтого.Параметры.Итого = ТекстИтоговойСтроки;
		
		ТекстИтоговойСтроки = НСтр("ru = '%Итого%'");
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%Итого%",ФормированиеПечатныхФормСервер.ФорматСумм(ИтогоНДС));
		
		Если НЕ ВыборкаПоДокументам.УчитыватьНДС Тогда
			ТекстИтоговойСтроки = НСтр("ru = 'Без НДС'");
		КонецЕсли;
		
		ОбластьИтогоНДС.Параметры.ИтогоНДС = ТекстИтоговойСтроки;
		ОбластьИтогоНДС.Параметры.НДС = ?(ВыборкаПоДокументам.ЦенаВключаетНДС, НСтр("ru='В том числе НДС:'"), НСтр("ru='Сумма НДС:'"));
		
		ТабличныйДокумент.Вывести(ОбластьИтого);
		ТабличныйДокумент.Вывести(ОбластьИтогоНДС);
		
		// СУММА ПРОПИСЬЮ
		
		ТекстИтоговойСтроки = НСтр("ru = 'Всего наименований %ВсегоНаименований%, на сумму %Итого%'");
		СуммаКПрописи = Итого + ?(ВыборкаПоДокументам.ЦенаВключаетНДС, 0, ИтогоНДС);
		
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%ВсегоНаименований%", ВсегоНаименований);
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%Итого%", ФормированиеПечатныхФормСервер.ФорматСумм(СуммаКПрописи));
		
		ОбластьСуммаПрописью.Параметры.ИтоговаяСтрока = ТекстИтоговойСтроки;
		ОбластьСуммаПрописью.Параметры.СуммаПрописью = ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(СуммаКПрописи);
		
		ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);
		
		
		// ПОДПИСИ
		ОбластьПодписей.Параметры.Заполнить(ВыборкаПоДокументам);
		ОбластьПодписей.Параметры.ОтветственныйПредставление = ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Ответственный);
		ТабличныйДокумент.Вывести(ОбластьПодписей);
		
		//УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ПечатьСпискаЗаказов(ТабДок, Ссылка) Экспорт
	//{{_КОНСТРУКТОР_ПЕЧАТИ(ПечатьСпискаЗаказов)
	Макет = Документы.ЗаказПоставщику.ПолучитьМакет("ПечатьСпискаЗаказов");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПоставщику.ДатаПоступления КАК ДатаПоступления,
	|	ЗаказПоставщику.Договор,
	|	ЗаказПоставщику.Контрагент КАК Контрагент,
	|	ЗаказПоставщику.Номер,
	|	ЗаказПоставщику.Подразделение КАК Подразделение,
	|	ЗаказПоставщику.Статус,
	|	ЗаказПоставщику.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка В(&Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Подразделение,
	|	ДатаПоступления,
	|	Контрагент,
	|	СуммаДокумента";
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	Результат = Запрос.Выполнить().Выгрузить();
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	Шапка = Макет.ПолучитьОбласть("Шапка");
	ТабДок.Очистить();
	
	Подразделения = Результат.Скопировать();
	Подразделения.Свернуть("Подразделение");
	Если Подразделения.Количество() = 1 Тогда
		ОбластьЗаголовок.Параметры.Магазин = "Магазин: " + Строка(Подразделения[0].Подразделение);
	КонецЕсли; 
	
	ТабДок.Вывести(ОбластьЗаголовок);
	
	ВставлятьРазделительСтраниц = Ложь;
	Для каждого Выборка Из Результат Цикл
		
		//Если ВставлятьРазделительСтраниц Тогда
		//	ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		//КонецЕсли;
		
		
		//ШТРИХКОД
		ЗначениеШтрихкода = Выборка.Номер;
		Рисунок = Шапка.Рисунки.КартинкаШтрихкода;
		
		КоличествоМиллиметровВПикселе = 0.26458;
		
		ПараметрыШтрихкода = Новый Структура;
		ПараметрыШтрихкода.Вставить("Ширина",	Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе));
		ПараметрыШтрихкода.Вставить("Высота",	Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе));
		
		ПараметрыШтрихкода.Вставить("УровеньКоррекцииQR", 0);
		
		ПараметрыШтрихкода.Вставить("Штрихкод",				ЗначениеШтрихкода);
		ПараметрыШтрихкода.Вставить("ТипКода",				99);//СтруктураШаблона.ТипКода);
		ПараметрыШтрихкода.Вставить("ОтображатьТекст",		Истина);//СтруктураШаблона.ОтображатьТекст);
		ПараметрыШтрихкода.Вставить("РазмерШрифта",			12);//СтруктураШаблона.РазмерШрифта);
		
		ПараметрыШтрихкода.Вставить("УголПоворота", 0);//СтруктураШаблона.УголПоворота);
		
		Рисунок.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
		
		//ТабличныйДокумент.Вывести(ОбластьШтрихкода);
		
		Шапка.Параметры.Заполнить(Выборка);
		
		Если  Выборка.ДатаПоступления = НачалоДня(Выборка.ДатаПоступления) Тогда
			Шапка.Параметры.ДатаПоступления = Формат(Выборка.ДатаПоступления, "ДФ='dd.ММ.yyyy'");
		Иначе
			Шапка.Параметры.ДатаПоступления = Формат(Выборка.ДатаПоступления, "ДФ='dd.ММММ.yyyy ''в'' ЧЧ:мм '");
		КонецЕсли; 
		
		
		ТабДок.Вывести(Шапка);
		
		//ВставлятьРазделительСтраниц = Истина;
	КонецЦикла;
	//}}
КонецПроцедуры

// Функция формирует табличный документ с печатной формой.
//
// Возвращаемое значение:
//  ТабличныйДокумент - печатная форма.
//
Функция ПечатьЗаказ(МассивОбъектов, ОбъектыПечати = Неопределено, ПечатьКомплекта = Ложь) Экспорт
	
	КолонкаКодов       = "Код";
	ВыводитьКоды       = Истина;
	ВыводитьУпаковки   = Истина;//ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	ТабличныйДокумент  = Новый ТабличныйДокумент;
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
	СинонимДокумента   = НСтр("ru='Заказ клиента'");
	
	//ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваров_Накладная"; 
	Если сабОбщегоНазначенияПовтИсп.ПолучитьСерийныйУчет() Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
		|	РеализацияТоваровУслуг.Заказ КАК Заказ
		|ПОМЕСТИТЬ ВТДокументыНаОсновании
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Заказ В(&МассивОбъектов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УЧ_Реализация.Ссылка,
		|	УЧ_Реализация.ДокументОснование
		|ИЗ
		|	Документ.УЧ_Реализация КАК УЧ_Реализация
		|ГДЕ
		|	УЧ_Реализация.ДокументОснование В(&МассивОбъектов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РозничнаяПродажа.Ссылка,
		|	РозничнаяПродажа.Заказ
		|ИЗ
		|	Документ.РозничнаяПродажа КАК РозничнаяПродажа
		|ГДЕ
		|	РозничнаяПродажа.Заказ В(&МассивОбъектов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПеремещениеТоваров.Ссылка,
		|	ПеремещениеТоваров.Заказ
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		|ГДЕ
		|	ПеремещениеТоваров.Заказ В(&МассивОбъектов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПередачаТоваров.Ссылка,
		|	ПередачаТоваров.Заказ
		|ИЗ
		|	Документ.ПередачаТоваров КАК ПередачаТоваров
		|ГДЕ
		|	ПередачаТоваров.Заказ В(&МассивОбъектов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВТДокументыНаОсновании.Ссылка) КАК Ссылка,
		|	ВТДокументыНаОсновании.Заказ КАК Заказ
		|ПОМЕСТИТЬ ВТДокументыНаОснованииГрупп
		|ИЗ
		|	ВТДокументыНаОсновании КАК ВТДокументыНаОсновании
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТДокументыНаОсновании.Заказ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	сабОбработкаДокументов.ДокументУУ КАК ДокументУУ,
		|	сабОбработкаДокументов.ДокументБУ КАК ДокументБУ,
		|	сабОбработкаДокументов.ДатаОбработки КАК ДатаОбработки
		|ПОМЕСТИТЬ ВТ_НеПустые
		|ИЗ
		|	РегистрСведений.сабОбработкаДокументов КАК сабОбработкаДокументов
		|ГДЕ
		|	сабОбработкаДокументов.ДокументУУ.Дата ЕСТЬ НЕ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	сабОбработкаДокументов.ДокументБУ,
		|	сабОбработкаДокументов.ДокументУУ,
		|	сабОбработкаДокументов.ДатаОбработки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(ВТ_НеПустые.ДокументУУ) КАК ДокументУУ,
		|	ВТ_НеПустые.ДокументБУ КАК ДокументБУ,
		|	ВТ_НеПустые.ДатаОбработки КАК ДатаОбработки
		|ПОМЕСТИТЬ Вт_Группировка
		|ИЗ
		|	ВТ_НеПустые КАК ВТ_НеПустые
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_НеПустые.ДокументБУ,
		|	ВТ_НеПустые.ДатаОбработки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Вт_Группировка.ДокументБУ КАК ДокументБУ,
		|	МАКСИМУМ(Вт_Группировка.ДатаОбработки) КАК ДатаОбработки
		|ПОМЕСТИТЬ Вт_Группировка_Итоговая
		|ИЗ
		|	Вт_Группировка КАК Вт_Группировка
		|
		|СГРУППИРОВАТЬ ПО
		|	Вт_Группировка.ДокументБУ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Вт_Группировка_Итоговая.ДокументБУ КАК ДокументБУ,
		|	МАКСИМУМ(Вт_Группировка.ДокументУУ) КАК ДокументУУ
		|ПОМЕСТИТЬ ВТ_Итоговая
		|ИЗ
		|	Вт_Группировка_Итоговая КАК Вт_Группировка_Итоговая
		|		ЛЕВОЕ СОЕДИНЕНИЕ Вт_Группировка КАК Вт_Группировка
		|		ПО Вт_Группировка_Итоговая.ДокументБУ = Вт_Группировка.ДокументБУ
		|			И Вт_Группировка_Итоговая.ДатаОбработки = Вт_Группировка.ДатаОбработки
		|
		|СГРУППИРОВАТЬ ПО
		|	Вт_Группировка_Итоговая.ДокументБУ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументБУ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТДокументыНаОснованииГрупп.Заказ КАК Заказ,
		|	ВЫБОР
		|		КОГДА ВТДокументыНаОснованииГрупп.Ссылка ССЫЛКА Документ.УЧ_Реализация
		|			ТОГДА ВТДокументыНаОснованииГрупп.Ссылка
		|		ИНАЧЕ ЕСТЬNULL(ВТ_Итоговая.ДокументУУ, ЗНАЧЕНИЕ(Документ.УЧ_Реализация.ПустаяСсылка))
		|	КОНЕЦ КАК ДокументУУ
		|ПОМЕСТИТЬ ВТ_Заказы_РеализацияУпр
		|ИЗ
		|	ВТДокументыНаОснованииГрупп КАК ВТДокументыНаОснованииГрупп
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Итоговая КАК ВТ_Итоговая
		|		ПО ВТДокументыНаОснованииГрупп.Ссылка = ВТ_Итоговая.ДокументБУ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Заказы_РеализацияУпр.Заказ КАК Заказ,
		|	УЧ_РеализацияСерииНоменклатуры.Номенклатура КАК Номенклатура,
		|	УЧ_РеализацияСерииНоменклатуры.НомерСтрокиРеализации КАК НомерСтрокиРеализации,
		|	УЧ_РеализацияСерииНоменклатуры.Количество КАК Количество,
		|	УЧ_РеализацияСерииНоменклатуры.СерияНоменклатуры.ДатаПроизводства КАК СерияНоменклатурыДатаПроизводства
		|ПОМЕСТИТЬ ВТ_СерииНоменклатуры
		|ИЗ
		|	ВТ_Заказы_РеализацияУпр КАК ВТ_Заказы_РеализацияУпр
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_Реализация.СерииНоменклатуры КАК УЧ_РеализацияСерииНоменклатуры
		|		ПО ВТ_Заказы_РеализацияУпр.ДокументУУ = УЧ_РеализацияСерииНоменклатуры.Ссылка
		|			И (УЧ_РеализацияСерииНоменклатуры.СерияНоменклатуры.ДатаПроизводства <> ДАТАВРЕМЯ(1, 1, 1))
		|ГДЕ
		|	УЧ_РеализацияСерииНоменклатуры.Количество > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказКлиента.Ссылка КАК Ссылка,
		|	ЗаказКлиента.Номер КАК Номер,
		|	ЗаказКлиента.Дата КАК Дата,
		|	ЗаказКлиента.Подразделение КАК Магазин,
		|	ВЫБОР
		|		КОГДА ЗаказКлиента.Организация.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОрганизацияЮридическоеЛицо,
		|	ЗаказКлиента.Организация КАК Поставщик,
		|	ЗаказКлиента.СуммаДокумента КАК СуммаДокумента,
		|	ПРЕДСТАВЛЕНИЕ(ЗаказКлиента.Подразделение) КАК МагазинПредставление,
		|	ПРЕДСТАВЛЕНИЕ(ЗаказКлиента.Организация) КАК ПредставлениеПоставщика,
		|	ЗаказКлиента.Автор КАК Ответственный,
		|	ЗаказКлиента.УчитыватьНДС КАК УчитыватьНДС,
		|	ЗаказКлиента.АдресДоставки КАК АдресДоставки,
		|	ЗаказКлиента.Предприятие.НаименованиеОрганизацииДляПечати КАК НаименованиеОрганизацииДляПечати,
		|	ЗаказКлиента.Контрагент КАК Получатель,
		|	ПРЕДСТАВЛЕНИЕ(ЗаказКлиента.Контрагент) КАК ПредставлениеПолучателя,
		|	ЗаказКлиента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	ЗаказКлиента.ДатаДоставки КАК ДатаДоставки
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.Ссылка В(&МассивОбъектов)
		|	И ЗаказКлиента.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказКлиентаТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
		|	ЗаказКлиентаТабличнаяЧасть.Номенклатура КАК Номенклатура,
		|	ЗаказКлиентаТабличнаяЧасть.Номенклатура.Код КАК КолонкаКодов,
		|	ЗаказКлиентаТабличнаяЧасть.Номенклатура.Представление КАК Товар,
		|	ЗаказКлиентаТабличнаяЧасть.Номенклатура.Наименование КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕ(ЗаказКлиентаТабличнаяЧасть.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
		|	ПРЕДСТАВЛЕНИЕ(ЗаказКлиентаТабличнаяЧасть.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
		|	ЗаказКлиентаТабличнаяЧасть.Количество КАК Количество,
		|	ЗаказКлиентаТабличнаяЧасть.Количество КАК КоличествоУпаковок,
		|	ВЫБОР
		|		КОГДА ЗаказКлиентаТабличнаяЧасть.Количество = 0
		|			ТОГДА ЗаказКлиентаТабличнаяЧасть.Количество
		|		ИНАЧЕ ЗаказКлиентаТабличнаяЧасть.Сумма / ЗаказКлиентаТабличнаяЧасть.Количество
		|	КОНЕЦ КАК Цена,
		|	ЗаказКлиентаТабличнаяЧасть.Сумма КАК Сумма,
		|	ЗаказКлиентаТабличнаяЧасть.Ссылка КАК Ссылка,
		|	ЗаказКлиентаТабличнаяЧасть.Сумма КАК СуммаБезСкидки,
		|	0 КАК Скидка,
		|	ЗаказКлиентаТабличнаяЧасть.СуммаНДС КАК СуммаНДС,
		|	ЗаказКлиентаТабличнаяЧасть.СтавкаНДС КАК СтавкаНДС,
		|	ЕСТЬNULL(ВТ_СерииНоменклатуры.Количество, 0) КАК КоличествоСерии,
		|	ВТ_СерииНоменклатуры.СерияНоменклатурыДатаПроизводства КАК СерияНоменклатурыДатаПроизводства,
		|	ЗаказКлиентаТабличнаяЧасть.КоличествоУпаковок КАК КоличествоУпаковок1,
		|	ЗаказКлиентаТабличнаяЧасть.КоличествоВУпаковке КАК КоличествоВУпаковке
		|ИЗ
		|	Документ.ЗаказКлиента.ТабличнаяЧасть КАК ЗаказКлиентаТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СерииНоменклатуры КАК ВТ_СерииНоменклатуры
		|		ПО ЗаказКлиентаТабличнаяЧасть.Ссылка = ВТ_СерииНоменклатуры.Заказ
		|			И ЗаказКлиентаТабличнаяЧасть.Номенклатура = ВТ_СерииНоменклатуры.Номенклатура
		|			И ЗаказКлиентаТабличнаяЧасть.НомерСтроки = ВТ_СерииНоменклатуры.НомерСтрокиРеализации
		|ГДЕ
		|	ЗаказКлиентаТабличнаяЧасть.Ссылка В(&МассивОбъектов)
		|	И ЗаказКлиентаТабличнаяЧасть.Ссылка.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	НомерСтроки,
		|	СерияНоменклатурыДатаПроизводства
		|ИТОГИ
		|	МАКСИМУМ(Номенклатура),
		|	МАКСИМУМ(КолонкаКодов),
		|	МАКСИМУМ(НоменклатураПредставление),
		|	МАКСИМУМ(ЕдиницаИзмерения),
		|	МАКСИМУМ(Количество),
		|	МИНИМУМ(Цена),
		|	МАКСИМУМ(Сумма),
		|	МАКСИМУМ(СуммаБезСкидки),
		|	МАКСИМУМ(Скидка),
		|	МАКСИМУМ(СуммаНДС)
		|ПО
		|	Ссылка,
		|	НомерСтроки");
		
	ЗапросЕдИзм = Новый Запрос;
	ЗапросЕдИзм.Текст = 
	"ВЫБРАТЬ
	|	КлассификаторЕдиницИзмерения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
	|ГДЕ
	|	СОКРЛП(КлассификаторЕдиницИзмерения.Код) В (&МассивКодыВес)";
	МассивКодыВес = Новый Массив;
	МассивКодыВес.Добавить("163"); 
	МассивКодыВес.Добавить("166");
	МассивКодыВес.Добавить("161");
	МассивКодыВес.Добавить("168");
	ЗапросЕдИзм.УстановитьПараметр("МассивКодыВес", МассивКодыВес);
	
	РезультатЗапросаЕдИзм = ЗапросЕдИзм.Выполнить();
	
	ВыборкаЕдИзм = РезультатЗапросаЕдИзм.Выбрать();
	МассивВесовыхЕдИзм = Новый Массив;
	Пока ВыборкаЕдИзм.Следующий() Цикл
		МассивВесовыхЕдИзм.Добавить(ВыборкаЕдИзм.Ссылка);
	КонецЦикла;

		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		Запрос.УстановитьПараметр("Счет7902", ПланыСчетов.Учетный.Счет7902());
		
		Результаты = Запрос.ВыполнитьПакет();
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказКлиента.ПФ_MXL_ЗаказКлиента_Серии");
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		
		ОбластьШапкаНомера         = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьШапкаКодов          = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьШапкаДанных         = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
		ОбластьШапкаСкидок         = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
		ОбластьШапкаСуммы          = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
		
		ОбластьКолонкаТовар = Макет.Область("Товар");
		Если Не ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
			+ Макет.Область("КолонкаКодов").ШиринаКолонки;
		КонецЕсли;
		ОбластьСтрокаНомера         = Макет.ПолучитьОбласть("Строка|НомерСтроки");
		ОбластьСтрокаКодов          = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
		ОбластьСтрокаДанных         = Макет.ПолучитьОбласть("Строка|Данные");
		ОбластьСтрокаСкидок         = Макет.ПолучитьОбласть("Строка|Скидка");
		ОбластьСтрокаСуммы          = Макет.ПолучитьОбласть("Строка|Сумма");
		
		
		ОбластьИтогоНДСНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьИтогоНДСКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьИтогоНДСДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьИтогоНДССкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьИтогоНДССуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");
		
		// Вывести Итого.
		ОбластьИтогоНомера         = Макет.ПолучитьОбласть("Итого|НомерСтроки");
		ОбластьИтогоКодов          = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
		ОбластьИтогоДанных         = Макет.ПолучитьОбласть("Итого|Данные");
		ОбластьИтогоСкидок         = Макет.ПолучитьОбласть("Итого|Скидка");
		ОбластьИтогоСуммы          = Макет.ПолучитьОбласть("Итого|Сумма");
		
		ОбластьСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью");
		ОбластьПодписей      = Макет.ПолучитьОбласть("Подписи");
		
		
		ВыборкаПоДокументам = Результаты[8].Выбрать();
		ВыборкаПоТабличнымЧастям = Результаты[9].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ПервыйДокумент = Истина;
		
		Пока ВыборкаПоДокументам.Следующий() Цикл
			
			Если НЕ ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Если НЕ ПервыйДокумент Тогда
				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
			КонецЕсли;    
				

			
			ПервыйДокумент = Ложь;
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
			ОбластьЗаголовок.Параметры.Заполнить(ВыборкаПоДокументам);
			ОбластьЗаголовок.Параметры.ТекстЗаголовка = ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента);					
			Если ВыборкаПоДокументам.НаименованиеОрганизацииДляПечати = "" Тогда
				ПредставлениеПоставщика = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ВыборкаПоДокументам.Поставщик, ВыборкаПоДокументам.Дата), "ПолноеНаименование,");	
			Иначе
				ПредставлениеПоставщика = ВыборкаПоДокументам.НаименованиеОрганизацииДляПечати;	
			КонецЕсли;
			ОбластьЗаголовок.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;		
			ПредставлениеПолучателя = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ВыборкаПоДокументам.Получатель, ВыборкаПоДокументам.Дата), "ПолноеНаименование,");
			ТабличныйДокумент.Вывести(ОбластьЗаголовок);
			
			// Шапка
			ЕстьСкидка 		  = Ложь;
			Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
				Если ВыборкаПоСтрокамТЧ.Скидка Тогда
					ЕстьСкидка = Истина;			
				КонецЕсли;	
			КонецЦикла;
			
			ТабличныйДокумент.Вывести(ОбластьШапкаНомера);
			Если ВыводитьКоды Тогда
				ОбластьШапкаКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов;
				ТабличныйДокумент.Присоединить(ОбластьШапкаКодов);
			КонецЕсли;
			ТабличныйДокумент.Присоединить(ОбластьШапкаДанных);
			Если ЕстьСкидка Тогда
				ТабличныйДокумент.Присоединить(ОбластьШапкаСкидок);
			КонецЕсли;
			ТабличныйДокумент.Присоединить(ОбластьШапкаСуммы);
			
			
			ВсегоНаименований = 0;
			Сумма             = 0;
			ВсегоСкидок       = 0;
			ВсегоБезСкидок    = 0;
			СуммаНДС          = 0;
			
			
			// СТРОКИ ТЧ
			ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
			НомерСтроки = 1;
			
			Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
				ВыборкаСерии = ВыборкаПоСтрокамТЧ.Выбрать();
				ОсталосьСписатьКоличество = ВыборкаПоСтрокамТЧ.Количество;
				ОсталосьСписатьСумма = ВыборкаПоСтрокамТЧ.Сумма; 
				ОсталосьСписатьСуммаБезСкидки = ВыборкаПоСтрокамТЧ.СуммаБезСкидки;
				Скидка = ВыборкаПоСтрокамТЧ.Скидка;
				Цена = ВыборкаПоСтрокамТЧ.Цена;
				
				Пока ВыборкаСерии.Следующий() И ОсталосьСписатьКоличество > 0 Цикл
					Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамТЧ.Номенклатура) Тогда
						Продолжить;
					КонецЕсли;
					СписатьКоличество = ?(ВыборкаСерии.КоличествоСерии > 0,Мин(ОсталосьСписатьКоличество,ВыборкаСерии.КоличествоСерии),ОсталосьСписатьКоличество);
					СписатьСумма = СписатьКоличество * Цена;
					ОбластьСтрокаНомера.Параметры.НомерСтроки = НомерСтроки;
					ТабличныйДокумент.Вывести(ОбластьСтрокаНомера);
					Если ВыводитьКоды Тогда
						ОбластьСтрокаКодов.Параметры.Артикул = ВыборкаПоСтрокамТЧ["КолонкаКодов"];
						ТабличныйДокумент.Присоединить(ОбластьСтрокаКодов);
					КонецЕсли;
					ОбластьСтрокаДанных.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
					ОбластьСтрокаДанных.Параметры.Товар = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаПоСтрокамТЧ.НоменклатураПредставление);
					ОбластьСтрокаДанных.Параметры.Серия = ВыборкаСерии.СерияНоменклатурыДатаПроизводства;	
					ОбластьСтрокаДанных.Параметры.Количество = СписатьКоличество;
					ОбластьСтрокаДанных.Параметры.ЕдиницаИзмерения = ВыборкаПоСтрокамТЧ.ЕдиницаИзмерения;
					ОбластьСтрокаДанных.Параметры.Цена = Цена; 	
					ЭтоВесоваяЕдИзмерения = Ложь;
					Для Каждого ВесоваяЕдиницаИзм Из МассивВесовыхЕдИзм Цикл
						Если ВесоваяЕдиницаИзм = ВыборкаПоСтрокамТЧ.ЕдиницаИзмерения Тогда
							ЭтоВесоваяЕдИзмерения = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если ВыводитьУпаковки Тогда
						Если ЭтоВесоваяЕдИзмерения Тогда
							Сбор = "Вес: " + СписатьКоличество + " " + ВыборкаПоСтрокамТЧ.ЕдиницаИзмерения;    
							ОбластьСтрокаДанных.Параметры.Упаковки = Сбор;
						Иначе 
							КолУпак		 = Цел(СписатьКоличество/ВыборкаСерии.КоличествоВУпаковке);     //количество упаковок, расчитываем чтобы сошлось с сериями
							КолВУпак	 =  КолУпак * ВыборкаСерии.КоличествоВУпаковке;                 
							ОстОтУпак	 = СписатьКоличество - КолВУпак;                                
							КолВУп       = ВыборкаСерии.КоличествоВУпаковке;
										 
							Если КолУпак = 0 ИЛИ КолВУп = 0 ИЛИ КолВУп = 1 Тогда
								Сбор = Строка(СписатьКоличество) + " " + ВыборкаПоСтрокамТЧ.ЕдиницаИзмерения;
							Иначе   
								Если ОстОтУпак = 0 Тогда
									Сбор = Строка(КолУпак) + " кор.";
								Иначе
									Сбор = Строка(КолУпак) + " кор." + " + " + ОстОтУпак + " " + ВыборкаПоСтрокамТЧ.ЕдиницаИзмерения; 
								КонецЕсли;	
							КонецЕсли;	 						
							ОбластьСтрокаДанных.Параметры.Упаковки = Сбор;

						КонецЕсли;	
					КонецЕсли; 

					

					ТабличныйДокумент.Присоединить(ОбластьСтрокаДанных);
					Если ЕстьСкидка Тогда
						ОбластьСтрокаСкидок.Параметры.СуммаБезСкидки = СписатьСумма;
						ОбластьСтрокаСкидок.Параметры.Скидка = Скидка;
					КонецЕсли; 
					ОбластьСтрокаСуммы.Параметры.Сумма = СписатьСумма;
					ОсталосьСписатьКоличество = ОсталосьСписатьКоличество - СписатьКоличество;	
					ОсталосьСписатьСумма = ОсталосьСписатьСумма - СписатьСумма;
					ОсталосьСписатьСуммаБезСкидки = ОсталосьСписатьСуммаБезСкидки - СписатьСумма;
					НомерСтроки = НомерСтроки+1;
					Если ОсталосьСписатьКоличество = 0 Тогда
						Если ОсталосьСписатьСумма <> 0 Тогда
							ОбластьСтрокаСуммы.Параметры.Сумма = СписатьСумма + ОсталосьСписатьСумма;
						КонецЕсли; 
						Если ЕстьСкидка Тогда
							Если ОсталосьСписатьСуммаБезСкидки <> 0 Тогда
								ОбластьСтрокаДанных.Параметры.СуммаБезСкидки = СписатьСумма + ОсталосьСписатьСуммаБезСкидки;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					Если ЕстьСкидка Тогда
						ТабличныйДокумент.Присоединить(ОбластьСтрокаСкидок);
					КонецЕсли; 
					ТабличныйДокумент.Присоединить(ОбластьСтрокаСуммы);
				КонецЦикла;
				Если ОсталосьСписатьКоличество > 0 Тогда
					СписатьКоличество = ОсталосьСписатьКоличество;
					СписатьСумма = СписатьКоличество * Цена;
					ОбластьСтрокаНомера.Параметры.НомерСтроки = НомерСтроки;
					ТабличныйДокумент.Вывести(ОбластьСтрокаНомера);
					Если ВыводитьКоды Тогда
						ОбластьСтрокаКодов.Параметры.Артикул = ВыборкаПоСтрокамТЧ["КолонкаКодов"];
						ТабличныйДокумент.Присоединить(ОбластьСтрокаКодов);
					КонецЕсли;
					ОбластьСтрокаДанных.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
					ОбластьСтрокаДанных.Параметры.Товар = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаПоСтрокамТЧ.НоменклатураПредставление);
					ОбластьСтрокаДанных.Параметры.Серия = Дата(1,1,1);
					ОбластьСтрокаДанных.Параметры.Количество = СписатьКоличество;
					ОбластьСтрокаДанных.Параметры.Цена = Цена; 
					ОбластьСтрокаДанных.Параметры.ЕдиницаИзмерения = ВыборкаПоСтрокамТЧ.ЕдиницаИзмерения;
					ОбластьСтрокаСуммы.Параметры.Сумма = СписатьСумма; 
						Если ВыводитьУпаковки Тогда
						Если ЭтоВесоваяЕдИзмерения Тогда
							Сбор = "Вес: " + СписатьКоличество + " " + ВыборкаПоСтрокамТЧ.ЕдиницаИзмерения;    
							ОбластьСтрокаДанных.Параметры.Упаковки = Сбор;
						Иначе
							//КолВУп       = Цел(ВыборкаПоСтрокамТЧ.Количество/ВыборкаПоСтрокамТЧ.КоличествоУпаковок);
							КолУпак		 = Цел(ОсталосьСписатьКоличество/КолВУп);     //количество упаковок, расчитываем чтобы сошлось с сериями
							КолВУпак	 =  КолУпак * КолВУп;                 
							ОстОтУпак	 = ОсталосьСписатьКоличество - КолВУпак; 
							Если КолУпак = 0 ИЛИ КолВУп = 0 ИЛИ КолВУп = 1   Тогда
								Сбор = Строка(СписатьКоличество) + " " + ВыборкаПоСтрокамТЧ.ЕдиницаИзмерения;
							Иначе   
								Если ОстОтУпак = 0 Тогда
									Сбор = Строка(КолУпак) + " кор.";
								Иначе
									Сбор = Строка(КолУпак) + " кор." + " + " + ОстОтУпак + " " + ВыборкаПоСтрокамТЧ.ЕдиницаИзмерения; 
								КонецЕсли;	
							КонецЕсли;	 						
					
					
							ОбластьСтрокаДанных.Параметры.Упаковки = Сбор;

						КонецЕсли;	
					КонецЕсли;
					ТабличныйДокумент.Присоединить(ОбластьСтрокаДанных);
					Если ЕстьСкидка Тогда
						ОбластьСтрокаСкидок.Параметры.СуммаБезСкидки = СписатьСумма;
						ОбластьСтрокаСкидок.Параметры.Скидка = Скидка;
					КонецЕсли;
					ОсталосьСписатьСумма = ОсталосьСписатьСумма - СписатьСумма;
					ОсталосьСписатьСуммаБезСкидки = ОсталосьСписатьСуммаБезСкидки - СписатьСумма;
					НомерСтроки = НомерСтроки+1; 
					Если ОсталосьСписатьСумма <> 0 Тогда
						ОбластьСтрокаСуммы.Параметры.Сумма = СписатьСумма + ОсталосьСписатьСумма;
					КонецЕсли; 
					Если ЕстьСкидка Тогда
						Если ОсталосьСписатьСуммаБезСкидки <> 0 Тогда
							ОбластьСтрокаДанных.Параметры.СуммаБезСкидки = СписатьСумма + ОсталосьСписатьСуммаБезСкидки;
						КонецЕсли; 
						ТабличныйДокумент.Присоединить(ОбластьСтрокаДанных);
					КонецЕсли;
					ТабличныйДокумент.Присоединить(ОбластьСтрокаСуммы);
				КонецЕсли;
				ВсегоНаименований = ВсегоНаименований + 1;
				Сумма          = Сумма       + ВыборкаПоСтрокамТЧ.Сумма;
				ВсегоСкидок    = ВсегоСкидок + ВыборкаПоСтрокамТЧ.Скидка;
				ВсегоБезСкидок = Сумма       + ВсегоСкидок;
				СуммаНДС       = СуммаНДС    + Окр(ВыборкаПоСтрокамТЧ.СуммаНДС, 2, 1);
			КонецЦикла;
			ТабличныйДокумент.Вывести(ОбластьИтогоНомера);
			Если ВыводитьКоды Тогда
				ТабличныйДокумент.Присоединить(ОбластьИтогоКодов);
			КонецЕсли;
			ТабличныйДокумент.Присоединить(ОбластьИтогоДанных);
			Если ЕстьСкидка Тогда
				ОбластьИтогоСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
				ОбластьИтогоСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
				ТабличныйДокумент.Присоединить(ОбластьИтогоСкидок);
			КонецЕсли;
			ОбластьИтогоСуммы.Параметры.Всего = Сумма;
			ТабличныйДокумент.Присоединить(ОбластьИтогоСуммы);
			
			// Вывести ИтогоНДС
			ТабличныйДокумент.Вывести(ОбластьИтогоНДСНомера);
			Если ВыводитьКоды Тогда
				ТабличныйДокумент.Присоединить(ОбластьИтогоНДСКодов);
			КонецЕсли;
			ОбластьИтогоНДСДанных.Параметры.НДС = ?(ВыборкаПоДокументам.ЦенаВключаетНДС, НСтр("ru = 'В том числе НДС:'"), НСтр("ru = 'Сумма НДС:'"));
			ТабличныйДокумент.Присоединить(ОбластьИтогоНДСДанных);
			Если ЕстьСкидка Тогда
				ТабличныйДокумент.Присоединить(ОбластьИтогоНДССкидок);
			КонецЕсли;
			Если НЕ ВыборкаПоДокументам.УчитыватьНДС Тогда
				СуммаНДССтрока = НСтр("ru = 'Без НДС'");
			Иначе
				СуммаНДССтрока = Строка(СуммаНДС);
			КонецЕсли;
			ОбластьИтогоНДССуммы.Параметры.ВсегоНДС = СуммаНДССтрока;
			ТабличныйДокумент.Присоединить(ОбластьИтогоНДССуммы);
			
			
			// Вывести Сумму прописью.
			
			ТекстИтоговойСтроки = НСтр("ru = 'Всего наименований %ВсегоНаименований%, на сумму %Итого%'");
			
			ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%ВсегоНаименований%", ВсегоНаименований);
			ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%Итого%", ФормированиеПечатныхФормСервер.ФорматСумм(Сумма));
			
			ОбластьСуммаПрописью.Параметры.ИтоговаяСтрока = ТекстИтоговойСтроки;
			ОбластьСуммаПрописью.Параметры.СуммаПрописью  = ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(Сумма);
			
			ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);
			
			// ПОДПИСИ
			ОбластьПодписей.Параметры.Заполнить(ВыборкаПоДокументам);
			ОбластьПодписей.Параметры.ОтветственныйПредставление = ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Ответственный);
			ТабличныйДокумент.Вывести(ОбластьПодписей);
			
			//УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
			Если ПечатьКомплекта И Не ОбъектыПечати = Неопределено Тогда 
				ФормированиеПечатныхФормСервер.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказКлиента.Ссылка КАК Ссылка,
		|	ЗаказКлиента.Номер КАК Номер,
		|	ЗаказКлиента.Дата КАК Дата,
		|	ЗаказКлиента.Подразделение КАК Магазин,
		|	ВЫБОР
		|		КОГДА ЗаказКлиента.Организация.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОрганизацияЮридическоеЛицо,
		|	ЗаказКлиента.Организация КАК Поставщик,
		|	ЗаказКлиента.СуммаДокумента КАК СуммаДокумента,
		|	ПРЕДСТАВЛЕНИЕ(ЗаказКлиента.Подразделение) КАК МагазинПредставление,
		|	ПРЕДСТАВЛЕНИЕ(ЗаказКлиента.Организация) КАК ПредставлениеПоставщика,
		|	ЗаказКлиента.Автор КАК Ответственный,
		|	ЗаказКлиента.УчитыватьНДС КАК УчитыватьНДС,
		|	ЗаказКлиента.АдресДоставки КАК АдресДоставки,
		|	ЗаказКлиента.Предприятие.НаименованиеОрганизацииДляПечати КАК НаименованиеОрганизацииДляПечати,
		|	ЗаказКлиента.Контрагент КАК Получатель,
		|	ПРЕДСТАВЛЕНИЕ(ЗаказКлиента.Контрагент) КАК ПредставлениеПолучателя,
		|	ЗаказКлиента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	ЗаказКлиента.ДатаДоставки КАК ДатаДоставки
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.Ссылка В(&МассивОбъектов)
		|	И ЗаказКлиента.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказКлиентаТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
		|	ЗаказКлиентаТабличнаяЧасть.Номенклатура КАК Номенклатура,
		|	ЗаказКлиентаТабличнаяЧасть.Номенклатура.Код КАК КолонкаКодов,
		|	ЗаказКлиентаТабличнаяЧасть.Номенклатура.Представление КАК Товар,
		|	ЗаказКлиентаТабличнаяЧасть.Номенклатура.Наименование КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕ(ЗаказКлиентаТабличнаяЧасть.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
		|	ПРЕДСТАВЛЕНИЕ(ЗаказКлиентаТабличнаяЧасть.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
		|	ЗаказКлиентаТабличнаяЧасть.Количество КАК Количество,
		|	ЗаказКлиентаТабличнаяЧасть.Количество КАК КоличествоУпаковок,
		|	ВЫБОР
		|		КОГДА ЗаказКлиентаТабличнаяЧасть.Количество = 0
		|			ТОГДА ЗаказКлиентаТабличнаяЧасть.Количество
		|		ИНАЧЕ ЗаказКлиентаТабличнаяЧасть.Сумма / ЗаказКлиентаТабличнаяЧасть.Количество
		|	КОНЕЦ КАК Цена,
		|	ЗаказКлиентаТабличнаяЧасть.Сумма КАК Сумма,
		|	ЗаказКлиентаТабличнаяЧасть.Ссылка КАК Ссылка,
		|	ЗаказКлиентаТабличнаяЧасть.Сумма КАК СуммаБезСкидки,
		|	0 КАК Скидка,
		|	ЗаказКлиентаТабличнаяЧасть.СуммаНДС КАК СуммаНДС,
		|	ЗаказКлиентаТабличнаяЧасть.СтавкаНДС КАК СтавкаНДС
		|ИЗ
		|	Документ.ЗаказКлиента.ТабличнаяЧасть КАК ЗаказКлиентаТабличнаяЧасть
		|ГДЕ
		|	ЗаказКлиентаТабличнаяЧасть.Ссылка В(&МассивОбъектов)
		|	И ЗаказКлиентаТабличнаяЧасть.Ссылка.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	НомерСтроки
		|ИТОГИ ПО
		|	Ссылка"); 
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		Запрос.УстановитьПараметр("Счет7902", ПланыСчетов.Учетный.Счет7902());
		
		Результаты = Запрос.ВыполнитьПакет();
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказКлиента.ПФ_MXL_ЗаказКлиента");
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		
		ОбластьШапкаНомера         = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьШапкаКодов          = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьШапкаДанных         = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
		ОбластьШапкаСкидок         = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
		ОбластьШапкаСуммы          = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
		
		ОбластьКолонкаТовар = Макет.Область("Товар");
		Если Не ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
			+ Макет.Область("КолонкаКодов").ШиринаКолонки;
		КонецЕсли;
		ОбластьСтрокаНомера         = Макет.ПолучитьОбласть("Строка|НомерСтроки");
		ОбластьСтрокаКодов          = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
		ОбластьСтрокаДанных         = Макет.ПолучитьОбласть("Строка|Данные");
		ОбластьСтрокаСкидок         = Макет.ПолучитьОбласть("Строка|Скидка");
		ОбластьСтрокаСуммы          = Макет.ПолучитьОбласть("Строка|Сумма");
		
		ОбластьИтогоНДСНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьИтогоНДСКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьИтогоНДСДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьИтогоНДССкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьИтогоНДССуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");
		
		// Вывести Итого.
		ОбластьИтогоНомера         = Макет.ПолучитьОбласть("Итого|НомерСтроки");
		ОбластьИтогоКодов          = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
		ОбластьИтогоДанных         = Макет.ПолучитьОбласть("Итого|Данные");
		ОбластьИтогоСкидок         = Макет.ПолучитьОбласть("Итого|Скидка");
		ОбластьИтогоСуммы          = Макет.ПолучитьОбласть("Итого|Сумма");
		
		ОбластьСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью");
		ОбластьПодписей      = Макет.ПолучитьОбласть("Подписи");
		
		
		ВыборкаПоДокументам = Результаты[0].Выбрать();
		ВыборкаПоТабличнымЧастям = Результаты[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ПервыйДокумент = Истина;
		
		Пока ВыборкаПоДокументам.Следующий() Цикл
			
			Если НЕ ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Если НЕ ПервыйДокумент Тогда
				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
			КонецЕсли;
			
			ПервыйДокумент = Ложь;
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
			ОбластьЗаголовок.Параметры.Заполнить(ВыборкаПоДокументам);
			
			ОбластьЗаголовок.Параметры.ТекстЗаголовка = ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента);					
			Если ВыборкаПоДокументам.НаименованиеОрганизацииДляПечати = "" Тогда
				ПредставлениеПоставщика = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ВыборкаПоДокументам.Поставщик, ВыборкаПоДокументам.Дата), "ПолноеНаименование,");	
			Иначе
				ПредставлениеПоставщика = ВыборкаПоДокументам.НаименованиеОрганизацииДляПечати;	
			КонецЕсли;
			ОбластьЗаголовок.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;		
			ПредставлениеПолучателя = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ВыборкаПоДокументам.Получатель, ВыборкаПоДокументам.Дата), "ПолноеНаименование,");
			//Если ЗначениеЗаполнено(МассивОбъектов.АдресДоставки) Тогда
			//	АдресДоставки = МассивОбъектов.АдресДоставки; 
			//Иначе
			//	АдресДоставки = Справочники.СтруктураПредприятия.ПолучитьАдресИзКонтактнойИнформации(МассивОбъектов.ПодразделениеВн);
			//КонецЕсли;
			//ОбластьЗаголовок.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя + ", " + АдресДоставки;//Сож+ адрес доставки
			
			ТабличныйДокумент.Вывести(ОбластьЗаголовок);
			
			// Шапка
			
			ЕстьСкидка 		  = Ложь;
			Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
				Если ВыборкаПоСтрокамТЧ.Скидка Тогда
					ЕстьСкидка = Истина;			
				КонецЕсли;	
			КонецЦикла;
			
			ТабличныйДокумент.Вывести(ОбластьШапкаНомера);
			Если ВыводитьКоды Тогда
				ОбластьШапкаКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов;
				ТабличныйДокумент.Присоединить(ОбластьШапкаКодов);
			КонецЕсли;
			ТабличныйДокумент.Присоединить(ОбластьШапкаДанных);
			Если ЕстьСкидка Тогда
				ТабличныйДокумент.Присоединить(ОбластьШапкаСкидок);
			КонецЕсли;
			ТабличныйДокумент.Присоединить(ОбластьШапкаСуммы);
			
			
			ВсегоНаименований = 0;
			Сумма             = 0;
			ВсегоСкидок       = 0;
			ВсегоБезСкидок    = 0;
			СуммаНДС          = 0;
			
			
			// СТРОКИ ТЧ
			ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
				Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамТЧ.Номенклатура) Тогда
					Продолжить;
				КонецЕсли;
				
				ОбластьСтрокаНомера.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
				ТабличныйДокумент.Вывести(ОбластьСтрокаНомера);
				
				Если ВыводитьКоды Тогда
					
					ОбластьСтрокаКодов.Параметры.Артикул = ВыборкаПоСтрокамТЧ["КолонкаКодов"];
					ТабличныйДокумент.Присоединить(ОбластьСтрокаКодов);
					
				КонецЕсли;
				
				ОбластьСтрокаДанных.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
				ОбластьСтрокаДанных.Параметры.Товар = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаПоСтрокамТЧ.НоменклатураПредставление);
				ТабличныйДокумент.Присоединить(ОбластьСтрокаДанных);
				
				Если ЕстьСкидка Тогда
					ОбластьСтрокаСкидок.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
					ТабличныйДокумент.Присоединить(ОбластьСтрокаСкидок);
				КонецЕсли;
				
				ОбластьСтрокаСуммы.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
				ТабличныйДокумент.Присоединить(ОбластьСтрокаСуммы);
				
				ВсегоНаименований = ВсегоНаименований + 1;
				
				Сумма          = Сумма       + ВыборкаПоСтрокамТЧ.Сумма;
				ВсегоСкидок    = ВсегоСкидок + ВыборкаПоСтрокамТЧ.Скидка;
				ВсегоБезСкидок = Сумма       + ВсегоСкидок;
				СуммаНДС       = СуммаНДС    + Окр(ВыборкаПоСтрокамТЧ.СуммаНДС, 2, 1);
				
			КонецЦикла;
			
			ТабличныйДокумент.Вывести(ОбластьИтогоНомера);
			Если ВыводитьКоды Тогда
				ТабличныйДокумент.Присоединить(ОбластьИтогоКодов);
			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьИтогоДанных);
			Если ЕстьСкидка Тогда
				ОбластьИтогоСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
				ОбластьИтогоСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
				ТабличныйДокумент.Присоединить(ОбластьИтогоСкидок);
			КонецЕсли;
			ОбластьИтогоСуммы.Параметры.Всего = Сумма;
			ТабличныйДокумент.Присоединить(ОбластьИтогоСуммы);
			
			
			// Вывести ИтогоНДС
			ТабличныйДокумент.Вывести(ОбластьИтогоНДСНомера);
			Если ВыводитьКоды Тогда
				ТабличныйДокумент.Присоединить(ОбластьИтогоНДСКодов);
			КонецЕсли;
			
			ОбластьИтогоНДСДанных.Параметры.НДС = ?(ВыборкаПоДокументам.ЦенаВключаетНДС, НСтр("ru = 'В том числе НДС:'"), НСтр("ru = 'Сумма НДС:'"));
			ТабличныйДокумент.Присоединить(ОбластьИтогоНДСДанных);
			
			Если ЕстьСкидка Тогда
				ТабличныйДокумент.Присоединить(ОбластьИтогоНДССкидок);
			КонецЕсли;
			
			Если НЕ ВыборкаПоДокументам.УчитыватьНДС Тогда
				СуммаНДССтрока = НСтр("ru = 'Без НДС'");
			Иначе
				СуммаНДССтрока = Строка(СуммаНДС);
			КонецЕсли;
			
			ОбластьИтогоНДССуммы.Параметры.ВсегоНДС = СуммаНДССтрока;
			ТабличныйДокумент.Присоединить(ОбластьИтогоНДССуммы);
			
			
			// Вывести Сумму прописью.
			
			ТекстИтоговойСтроки = НСтр("ru = 'Всего наименований %ВсегоНаименований%, на сумму %Итого%'");
			
			ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%ВсегоНаименований%", ВсегоНаименований);
			ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%Итого%", ФормированиеПечатныхФормСервер.ФорматСумм(Сумма));
			
			ОбластьСуммаПрописью.Параметры.ИтоговаяСтрока = ТекстИтоговойСтроки;
			ОбластьСуммаПрописью.Параметры.СуммаПрописью  = ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(Сумма);
			
			ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);
			
			// ПОДПИСИ
			ОбластьПодписей.Параметры.Заполнить(ВыборкаПоДокументам);
			ОбластьПодписей.Параметры.ОтветственныйПредставление = ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Ответственный);
			ТабличныйДокумент.Вывести(ОбластьПодписей);
			
			//УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
			
			Если ПечатьКомплекта И Не ОбъектыПечати = Неопределено Тогда 
				ФормированиеПечатныхФормСервер.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатьРН(МассивОбъектов, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.КлючПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Накладная";
	
	ДополнительнаяКолонкаПечатныхФормДокументов = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если НЕ ЗначениеЗаполнено(ДополнительнаяКолонкаПечатныхФормДокументов) Тогда
		ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	КонецЕсли;
	ВыводитьКоды = ДополнительнаяКолонкаПечатныхФормДокументов <> Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", ДополнительнаяКолонкаПечатныхФормДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументРеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	ДокументРеализацияТоваровУслуг.Номер КАК Номер,
	|	ДокументРеализацияТоваровУслуг.Дата КАК Дата,
	|	ДокументРеализацияТоваровУслуг.Договор КАК ДоговорКонтрагента,
	|	ДокументРеализацияТоваровУслуг.Контрагент КАК Получатель,
	|	ДокументРеализацияТоваровУслуг.Организация КАК Организация,
	|	ДокументРеализацияТоваровУслуг.Подразделение КАК ПодразделениеОрганизации,
	|	ДокументРеализацияТоваровУслуг.Организация КАК Поставщик,
	|	ДокументРеализацияТоваровУслуг.Ссылка.Склад КАК Склад,
	|	ДокументРеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
	|	ДокументРеализацияТоваровУслуг.Валюта КАК ВалютаДокумента,
	|	ДокументРеализацияТоваровУслуг.ЦенаВключаетНДС КАК СуммаВключаетНДС,
	|	Неопределено КАК ОтпускПроизвел,
	|	РеализацияТоваровУслуг.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РеализацияТоваровУслуг.Цена КАК Цена,
	|	РеализацияТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
	|	Неопределено КАК СтранаПроисхождения,
	|	Неопределено КАК НомерГТД,
	|	СУММА(РеализацияТоваровУслуг.Количество) КАК Количество,
	|	СУММА(0) КАК КоличествоМест,
	|	СУММА(РеализацияТоваровУслуг.Сумма) КАК Сумма,
	|	СУММА(РеализацияТоваровУслуг.СуммаНДС) КАК СуммаНДС,
	|	МИНИМУМ(РеализацияТоваровУслуг.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_ВложенныйЗапросПоТоварам
	|ИЗ
	|	Документ.ЗаказКлиента КАК ДокументРеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.ТабличнаяЧасть КАК РеализацияТоваровУслуг
	|		ПО (РеализацияТоваровУслуг.Ссылка = ДокументРеализацияТоваровУслуг.Ссылка)
	|ГДЕ
	|	ДокументРеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслуг.Номенклатура,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения,
	|	РеализацияТоваровУслуг.Цена,
	|	РеализацияТоваровУслуг.СтавкаНДС,
	|	Неопределено,
	|	Неопределено,
	|	ДокументРеализацияТоваровУслуг.Ссылка,
	|	ДокументРеализацияТоваровУслуг.Номер,
	|	ДокументРеализацияТоваровУслуг.Дата,
	|	ДокументРеализацияТоваровУслуг.Договор,
	|	ДокументРеализацияТоваровУслуг.Контрагент,
	|	ДокументРеализацияТоваровУслуг.Организация,
	|	ДокументРеализацияТоваровУслуг.Подразделение,
	|	ДокументРеализацияТоваровУслуг.СуммаДокумента,
	|	ДокументРеализацияТоваровУслуг.Валюта,
	|	ДокументРеализацияТоваровУслуг.ЦенаВключаетНДС,
	|	ДокументРеализацияТоваровУслуг.Ссылка.Склад,
	|	Неопределено,
	|	ДокументРеализацияТоваровУслуг.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапросПоТоварам.Ссылка КАК Ссылка,
	|	ВложенныйЗапросПоТоварам.Номер КАК Номер,
	|	ВложенныйЗапросПоТоварам.Дата КАК Дата,
	|	ВложенныйЗапросПоТоварам.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВложенныйЗапросПоТоварам.Получатель КАК Получатель,
	|	ВложенныйЗапросПоТоварам.Организация КАК Организация,
	|	ВложенныйЗапросПоТоварам.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ВложенныйЗапросПоТоварам.Организация КАК Поставщик,
	|	ВложенныйЗапросПоТоварам.Ссылка.Склад КАК Склад,
	|	Неопределено КАК ОтпускПроизвел,
	|	Неопределено КАК Получил,
	|	ВложенныйЗапросПоТоварам.СуммаДокумента КАК СуммаДокумента,
	|	ВложенныйЗапросПоТоварам.ВалютаДокумента КАК ВалютаДокумента,
	|	ВложенныйЗапросПоТоварам.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ВложенныйЗапросПоТоварам.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапросПоТоварам.Номенклатура.НаименованиеПолное КАК Товар,
	|	ВложенныйЗапросПоТоварам.Номенклатура.Код КАК Артикул,
	|	ВложенныйЗапросПоТоварам.Количество КАК Количество,
	|	ВложенныйЗапросПоТоварам.КоличествоМест КАК КоличествоМест,
	|	ВложенныйЗапросПоТоварам.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВложенныйЗапросПоТоварам.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаХранения,
	|	ВложенныйЗапросПоТоварам.Цена КАК Цена,
	|	ВложенныйЗапросПоТоварам.Сумма КАК Сумма,
	|	ВложенныйЗапросПоТоварам.СуммаНДС КАК СуммаНДС,
	|	ВложенныйЗапросПоТоварам.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВложенныйЗапросПоТоварам.НомерГТД КАК НомерГТД,
	|	ВложенныйЗапросПоТоварам.НомерСтроки КАК НомерСтроки,
	|	1 КАК ID
	|ИЗ
	|	ВТ_ВложенныйЗапросПоТоварам КАК ВложенныйЗапросПоТоварам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка,
	|	РеализацияТоваровУслуг.Ссылка.Номер,
	|	РеализацияТоваровУслуг.Ссылка.Дата,
	|	РеализацияТоваровУслуг.Ссылка.Договор,
	|	РеализацияТоваровУслуг.Ссылка.Контрагент,
	|	РеализацияТоваровУслуг.Ссылка.Организация,
	|	РеализацияТоваровУслуг.Ссылка.Подразделение,
	|	РеализацияТоваровУслуг.Ссылка.Организация,
	|	РеализацияТоваровУслуг.Ссылка.Склад,
	|	Неопределено,
	|	Неопределено,
	|	РеализацияТоваровУслуг.Ссылка.СуммаДокумента,
	|	РеализацияТоваровУслуг.Ссылка.Валюта,
	|	РеализацияТоваровУслуг.Ссылка.ЦенаВключаетНДС,
	|	Неопределено,
	|	Неопределено,
	|	Неопределено,
	|	0,
	|	NULL,
	|	NULL,
	|	Неопределено,
	|	0,
	|	0,
	|	0,
	|	NULL,
	|	NULL,
	|	РеализацияТоваровУслуг.НомерСтроки,
	|	2
	|ИЗ
	|	Документ.ЗаказКлиента.ВозвратнаяТара КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)
	|
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка,
	|	ID,
	|	ВложенныйЗапросПоТоварам.НомерСтроки";
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РеализацияТоваровУслуг.ПФ_MXL_НакладнаяУпр");
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Выводим шапку накладной
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, "Расходная накладная");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		СведенияОбОрганизации   = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
		ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
		ОбластьМакета.Параметры.Поставщик 				= Шапка.Поставщик;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		СведенияОКонтрагенте    = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
		ПредставлениеПолучателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм,");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
		ОбластьМакета.Параметры.Получатель = Шапка.Получатель;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ЕстьСкидки = Ложь;
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			Если ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
				ОбластьКодов.Параметры.ИмяКолонкиКодов = "Артикул";
			ИначеЕсли ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
				ОбластьКодов.Параметры.ИмяКолонкиКодов = "Код";
			КонецЕсли;
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		ТабличныйДокумент.Присоединить(ОбластьСуммы);
		
		ОбластьКолонкаТовар = Макет.Область("Товар");
		
		Если НЕ ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
			Макет.Область("КолонкаКодов").ШиринаКолонки;
		КонецЕсли;
		
		Если НЕ ЕстьСкидки Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
			Макет.Область("СуммаБезСкидки").ШиринаКолонки +
			Макет.Область("СуммаСкидки").ШиринаКолонки;
		КонецЕсли;
		
		ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");
		
		Сумма    = 0;
		СуммаНДС = 0;
		ВсегоСкидок    = 0;
		ВсегоБезСкидок = 0;
		КоличествоСтрок = 0;
		
		НомерСтроки = 0;
		
		Пока Шапка.Следующий() Цикл 
			
			Если Шапка.Номенклатура = Null Тогда 
				Продолжить;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьНомера.Параметры.НомерСтроки = НомерСтроки;
			ТабличныйДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				ОбластьКодов.Параметры.Заполнить(Шапка);
				ТабличныйДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(Шапка);
			ОбластьДанных.Параметры.Товар = СокрЛП(Шапка.Товар);
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			
			Скидка = 0;
			
			ОбластьСуммы.Параметры.Заполнить(Шапка);
			ТабличныйДокумент.Присоединить(ОбластьСуммы);
			Сумма          = Сумма       + ?(ЗначениеЗаполнено(Шапка.Сумма), Шапка.Сумма, 0);
			СуммаНДС       = СуммаНДС    + ?(ЗначениеЗаполнено(Шапка.СуммаНДС), Шапка.СуммаНДС, 0);
			ВсегоСкидок    = ВсегоСкидок + Скидка;
			ВсегоБезСкидок = Сумма       + ВсегоСкидок;
			
			КоличествоСтрок = КоличествоСтрок + 1;
			
		КонецЦикла;
		
		// Вывести Итого
		ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		ОбластьСуммы.Параметры.Всего = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Сумма);
		ТабличныйДокумент.Присоединить(ОбластьСуммы);
		
		// Вывести ИтогоНДС
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		Если СуммаНДС <> 0 Тогда
			ОбластьСуммы.Параметры.ВсегоНДС  = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаНДС);
			ОбластьДанных.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, "В том числе НДС", " Сумма НДС");
		Иначе
			ОбластьСуммы.Параметры.ВсегоНДС  = "-";
			ОбластьДанных.Параметры.НДС      = "Без налога (НДС)";
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		ТабличныйДокумент.Присоединить(ОбластьСуммы);
		
		// Вывести Сумму прописью
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
		ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + КоличествоСтрок
		+ ", на сумму " + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКПрописи, ?(ЗначениеЗаполнено(Шапка.ВалютаДокумента), Шапка.ВалютаДокумента, УЧ_Сервер.НациональнаяВалюта()));
		ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, ?(ЗначениеЗаполнено(Шапка.ВалютаДокумента), Шапка.ВалютаДокумента, УЧ_Сервер.НациональнаяВалюта()));
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		Если ЗначениеЗаполнено(Шапка.ОтпускПроизвел) Тогда
			ДанныеФизЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Шапка.Организация, Шапка.ОтпускПроизвел, Шапка.Дата);
			Представление = ?(ЗначениеЗаполнено(ДанныеФизЛица.Должность), Строка(ДанныеФизЛица.Должность) + " ", "");
			Представление = Представление + ?(ЗначениеЗаполнено(ДанныеФизЛица.Представление), Строка(ДанныеФизЛица.Представление), "");
			ОбластьМакета.Параметры.ОтветственныйПредставление = Представление;
		ИначеЕсли Шапка.Склад <> Справочники.Склады.ПустаяСсылка() Тогда 
			МОЛ = ОтветственныеЛицаБП.ОтветственноеЛицоНаСкладе(Шапка.Склад, Шапка.Дата);
			ДанныеФизЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Шапка.Организация, МОЛ, Шапка.Дата);
			Представление = ?(ЗначениеЗаполнено(ДанныеФизЛица.Должность), Строка(ДанныеФизЛица.Должность) + " ", "");
			Представление = Представление + ?(ЗначениеЗаполнено(ДанныеФизЛица.Представление), Строка(ДанныеФизЛица.Представление), "");
			ОбластьМакета.Параметры.ОтветственныйПредставление = Представление;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
		НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
		УправлениеПечатьюБП.ДополнитьДокументПодписьюИПечатью(ТабличныйДокумент, Шапка, ОбъектыПечати, ПараметрыПечати);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатьСчет(Ссылка, ПечатьНДС = Ложь) Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	
	//{{_КОНСТРУКТОР_ПЕЧАТИ(Печать)
	Макет = Документы.ЗаказКлиента.ПолучитьМакет("ПФ_MXL_СчетЗаказ");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетНаОплатуПокупателю.Дата КАК Дата,
	|	СчетНаОплатуПокупателю.Комментарий КАК Комментарий,
	|	СчетНаОплатуПокупателю.Контрагент КАК Контрагент,
	|	СчетНаОплатуПокупателю.Номер КАК Номер,
	|	СчетНаОплатуПокупателю.Организация КАК Организация,
	|	СчетНаОплатуПокупателю.ТабличнаяЧасть.(
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Номенклатура.НаименованиеПолное КАК Содержание,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		0 КАК ПроцентСкидки,
	|		0 КАК СуммаСкидки,
	|		СтавкаНДС КАК СтавкаНДС,
	|		СуммаНДС КАК СуммаНДС,
	|		Номенклатура.Код КАК Артикул,
	|		Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|	) КАК Товары,
	|	СчетНаОплатуПокупателю.Организация.ОсновнойБанковскийСчет.Банк КАК БанкПолучателяПредставление,
	|	СчетНаОплатуПокупателю.Организация.ОсновнойБанковскийСчет.Банк.Код КАК БИКБанкаПолучателя,
	|	СчетНаОплатуПокупателю.Организация.ИНН КАК ИННПолучателя,
	|	СчетНаОплатуПокупателю.Организация.НаименованиеПолное КАК ПредставлениеПолучателя,
	|	СчетНаОплатуПокупателю.Организация.КПП КАК КПППолучателя,
	|	СчетНаОплатуПокупателю.Организация.ОсновнойБанковскийСчет.НомерСчета КАК СчетПолучателяПредставление,
	|	СчетНаОплатуПокупателю.Организация.ОсновнойБанковскийСчет.Банк.КоррСчет КАК СчетБанкаПолучателяПредставление,
	|	СчетНаОплатуПокупателю.СуммаДокумента КАК Всего,
	|	СчетНаОплатуПокупателю.СуммаДокумента КАК ИтогоКОплате,
	|	СчетНаОплатуПокупателю.Организация.НаименованиеПолное КАК ОрганизацияНаименование,
	|	СчетНаОплатуПокупателю.Контрагент.НаименованиеПолное КАК КонтрагентНаименование,
	|	СчетНаОплатуПокупателю.Контрагент.ИНН КАК КонтрагентИНН,
	|	СчетНаОплатуПокупателю.Контрагент.КПП КАК КонтрагентКПП,
	|	СчетНаОплатуПокупателю.Договор КАК Основание,
	|	ДОБАВИТЬКДАТЕ(СчетНаОплатуПокупателю.Дата, ДЕНЬ, 5) КАК СрокОплаты,
	|	Неопределено КАК Директор
	|ИЗ
	|	Документ.ЗаказКлиента КАК СчетНаОплатуПокупателю
	|		
	|ГДЕ
	|	СчетНаОплатуПокупателю.Ссылка В(&Ссылка)";
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("ЗаголовокСчета");
	ОбластьЗаголовок2 = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок3 = Макет.ПолучитьОбласть("Поставщик");
	ОбластьЗаголовок4 = Макет.ПолучитьОбласть("Покупатель");
	ОбластьТоварыШапка = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКолонкаКодовШапка = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанныеШапка = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСуммаШапка = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
	ОбластьСкидкиШапка  = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");  
	ОбластьНДСШапка  = Макет.ПолучитьОбласть("ШапкаТаблицы|НДС");
	ОбластьТовары = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКолонкаКодов = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанные = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидки  = Макет.ПолучитьОбласть("Строка|Скидка"); 
	ОбластьНДС  = Макет.ПолучитьОбласть("Строка|НДС");
	ОбластьСумма = Макет.ПолучитьОбласть("Строка|Сумма");  
	Если ПечатьНДС Тогда
		Подвал0 = Макет.ПолучитьОбласть("ПодвалСНДС"); 
		Подвал = Макет.ПолучитьОбласть("ИтогоСНДС");
        Подвал2 = Макет.ПолучитьОбласть("ИтогоНДССНДС");
		Подвал3 = Макет.ПолучитьОбласть("ИтогоКОплатеСНДС");
	Иначе
		Подвал0 = Макет.ПолучитьОбласть("Подвал"); 
		Подвал = Макет.ПолучитьОбласть("Итого");
        Подвал2 = Макет.ПолучитьОбласть("ИтогоНДС");
		Подвал3 = Макет.ПолучитьОбласть("ИтогоКОплате");
	КонецЕсли;	
	Подвал4 = Макет.ПолучитьОбласть("СуммаПрописью");
	Подвал5 = Макет.ПолучитьОбласть("СрокОплаты");
	Подвал6 = Макет.ПолучитьОбласть("ДополнительныеУсловия");
	Подвал7 = Макет.ПолучитьОбласть("ПодвалСчета");
	ОбластьПодписи =  Макет.ПолучитьОбласть("ПодвалСчетаСПодписьюИПечатью");
	ТабДок.Очистить();
	
	ВставлятьРазделительСтраниц = Ложь;
	Пока Выборка.Следующий() Цикл
		Если ВставлятьРазделительСтраниц Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ОбластьЗаголовок.Параметры.Заполнить(Выборка);
		ТабДок.Вывести(ОбластьЗаголовок);
		ОбластьЗаголовок2.Параметры.Заполнить(Выборка);
		ОбластьЗаголовок2.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Выборка, "Счет на оплату");
		ТабДок.Вывести(ОбластьЗаголовок2);
		ОбластьЗаголовок3.Параметры.Заполнить(Выборка);
		
		СведенияОбОрганизации   = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Выборка.Организация, Выборка.Дата);
		ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		СведенияОКонтрагенте    = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Выборка.Контрагент, Выборка.Дата);
		ПредставлениеПолучателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		
		ОбластьЗаголовок3.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
		ТабДок.Вывести(ОбластьЗаголовок3);
		ОбластьЗаголовок4.Параметры.Заполнить(Выборка);
		ОбластьЗаголовок4.Параметры.ПредставлениеПокупателя = ПредставлениеПолучателя;
		ТабДок.Вывести(ОбластьЗаголовок4);
		
		//Шапка.Параметры.Заполнить(Выборка);
		//ТабДок.Вывести(Шапка, Выборка.Уровень());
		
		ТабДок.Вывести(ОбластьТоварыШапка, Выборка.Уровень());
		
		ОбластьКолонкаКодовШапка.Параметры.ИмяКолонкиКодов = "Артикул";
		ТабДок.Присоединить(ОбластьКолонкаКодовШапка, Выборка.Уровень());
		ТабДок.Присоединить(ОбластьДанныеШапка, Выборка.Уровень());
		Если ПечатьНДС Тогда  
			ТабДок.Присоединить(ОбластьНДСШапка, Выборка.Уровень());
        КонецЕсли;
		ТабДок.Присоединить(ОбластьСуммаШапка, Выборка.Уровень());
		
		ОбластьКолонкаТовар = Макет.Область("Товар");
		//Если Не ЕстьСкидка И ЗначениеЗаполнено(Макет.Области.Найти("Скидка")) Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + Макет.Область("Скидка").ШиринаКолонки;
		//КонецЕсли;
		
		ОбластьКолонкаТовар1 = Макет.Область("Сумма");
		//Если Не ЕстьСкидка И ЗначениеЗаполнено(Макет.Области.Найти("Скидка")) Тогда
		ОбластьКолонкаТовар1.ШиринаКолонки = ОбластьКолонкаТовар1.ШиринаКолонки + Макет.Область("Скидка").ШиринаКолонки;
		//КонецЕсли;
		
		ВыборкаТовары = Выборка.Товары.Выбрать();
		СуммаНДС = 0;
		Пока ВыборкаТовары.Следующий() Цикл
			ОбластьТовары.Параметры.Заполнить(ВыборкаТовары);
			ТабДок.Вывести(ОбластьТовары, ВыборкаТовары.Уровень());
			ОбластьКолонкаКодов.Параметры.Заполнить(ВыборкаТовары);
			ТабДок.Присоединить(ОбластьКолонкаКодов, ВыборкаТовары.Уровень());
			ОбластьДанные.Параметры.Заполнить(ВыборкаТовары);
			ТабДок.Присоединить(ОбластьДанные, ВыборкаТовары.Уровень());  
			ЕСли ПечатьНДС Тогда
				ОбластьНДС.Параметры.Заполнить(ВыборкаТовары);
				ТабДок.Присоединить(ОбластьНДС, ВыборкаТовары.Уровень());
			КонецЕсли;	
			ОбластьСумма.Параметры.Заполнить(ВыборкаТовары);
			ТабДок.Присоединить(ОбластьСумма, ВыборкаТовары.Уровень());
			СуммаНДС = СуммаНДС + ВыборкаТовары.СуммаНДС;
		КонецЦикла;
		
		ТабДок.Вывести(Подвал0); 
		
		Подвал.Параметры.Заполнить(Выборка);  
		ТабДок.Вывести(Подвал); 
		Подвал2.Параметры.Заполнить(Выборка);
		Если СуммаНДС Тогда
			Подвал2.Параметры.НДС = "В том числе НДС:";
			Подвал2.Параметры.ВсегоНДС = СуммаНДС;
		Иначе
			Подвал2.Параметры.НДС = "Без налога (НДС)";
			Подвал2.Параметры.ВсегоНДС = "-";
		КонецЕсли;
		ТабДок.Вывести(Подвал2);
		Подвал3.Параметры.Заполнить(Выборка);
		ТабДок.Вывести(Подвал3);
		Подвал4.Параметры.Заполнить(Выборка);
		Подвал4.Параметры.ИтоговаяСтрока = "Всего наименований " + Строка(Выборка.Количество()) + ", на сумму " + Формат(Выборка.ИтогоКОплате, "ЧДЦ=2; ЧРД=,; ЧРГ=' '") + " руб.";
		Подвал4.Параметры.СуммаПрописью = БюджетныйНаСервере.ФорматироватьСуммуПрописьюПлатежногоДокумента(Выборка.ИтогоКОплате);
		ТабДок.Вывести(Подвал4);
		Подвал5.Параметры.Заполнить(Выборка);
		Подвал5.Параметры.СрокОплаты = Формат(Подвал5.Параметры.СрокОплаты, "ДФ='dd ММММ yyyy ''г.'''"); 
		ТабДок.Вывести(Подвал5);
		Подвал6.Параметры.Заполнить(Выборка);
		Подвал6.Параметры.ТекстДополнительныхУсловий = "Оплата данного счета означает согласие с условиями поставки товара или предоставления услуг.";
		ТабДок.Вывести(Подвал6);
		//Подвал6.Параметры.ТекстДополнительныхУсловий = "Уведомление об оплате обязательно, в противном случае не гарантируется наличие товара на складе.";
		//ТабДок.Вывести(Подвал6);
		//Подвал6.Параметры.ТекстДополнительныхУсловий = "Товар отпускается по факту прихода денег на р/с Поставщика, самовывозом, при наличии доверенности и паспорта.";
		//ТабДок.Вывести(Подвал6);
		Подвал7.Параметры.Заполнить(Выборка);
		ТабДок.Вывести(Подвал7);
		
		ВставлятьРазделительСтраниц = Истина;
	КонецЦикла;
	
	Возврат ТабДок;
	//}}
КонецФункции

Функция ПечатьОтпускТоваров(ТабДок,Ссылка) Экспорт
	ТабДок  = Новый ТабличныйДокумент;
	Макет = Документы.ЗаказКлиента.ПолучитьМакет("ОтпускТоваров");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК Ссылка,
	|	ЗаказКлиента.ДатаПоступления КАК ДатаПоступления,
	|	ЗаказКлиента.ДатаДоставки КАК ДатаДоставки,
	|	ЗаказКлиента.Контрагент КАК Контрагент,
	|	ЗаказКлиента.Контрагент.ИНН КАК КонтрагентИНН,
	|	ЗаказКлиента.Номер КАК Номер,
	|	ЗаказКлиента.Дата КАК Дата
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка В(&Ссылка)";
	
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Шапка = Макет.ПолучитьОбласть("Шапка");             
	ТабДок.Очистить();
	
	//ВставлятьРазделительСтраниц = Ложь;
	Для каждого Выборка Из Результат Цикл
		
		//Если ВставлятьРазделительСтраниц Тогда
		//	ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		//КонецЕсли;
		
		Шапка.Параметры.Номер = Выборка.Номер;
		
		Шапка.Параметры.ПредставлениеГрузополучателя = СокрЛП(Строка(Ссылка.Организация))+", "+СокрЛП(Строка(Ссылка.Организация.ИНН));
		
		ТекущаяДата = Формат(Выборка.ДатаДоставки, "ДФ='дд ММММ'");	
		МесяцВозврата = Сред(ТекущаяДата, 4);
		Шапка.Параметры.ДеньВозврата =  День(Выборка.ДатаДоставки);
		Шапка.Параметры.МесяцВозврата =  МесяцВозврата;
		Шапка.Параметры.ГодВозврата =  Год(Выборка.ДатаДоставки);
		
		ТекущаяДата = Формат(Выборка.ДатаДоставки, "ДФ='дд ММММ'");	
		МесяцПрибытия = Сред(ТекущаяДата, 4);
		Шапка.Параметры.ДеньПрибытия =  День(Выборка.ДатаДоставки);
		Шапка.Параметры.МесяцПрибытия =  МесяцПрибытия;
		Шапка.Параметры.ГодПрибытия =  Год(Выборка.ДатаДоставки);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	сабМаршрутныйЛист.Доставщик КАК Доставщик,
		|	сабМаршрутныйЛист.ТранспортноеСредство КАК ТранспортноеСредство
		|ИЗ
		|	Документ.сабМаршрутныйЛист.ТабличнаяЧасть КАК сабМаршрутныйЛистТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.сабМаршрутныйЛист КАК сабМаршрутныйЛист
		|		ПО сабМаршрутныйЛистТабличнаяЧасть.Ссылка = сабМаршрутныйЛист.Ссылка
		|ГДЕ
		|	сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Шапка.Параметры.МаркаГосНомерТС = ВыборкаДетальныеЗаписи.ТранспортноеСредство;
			Шапка.Параметры.ФИОВодителя = ВыборкаДетальныеЗаписи.Доставщик;
		КонецЦикла;
				
		ТабДок.Вывести(Шапка);
		
		ИтогоВес = 0;
		Строка = Макет.ПолучитьОбласть("Строка");
		Док = Ссылка.ПолучитьОбъект();
		Для Каждого Стр Из Док.ТабличнаяЧасть Цикл
			Строка.Параметры.ТМЦ = Стр.Номенклатура;
			Строка.Параметры.ЕдИзм = Стр.ЕдиницаИзмерения;
			Строка.Параметры.Количество = Стр.Количество;
			Строка.Параметры.Вес = Стр.Номенклатура.Вес*Стр.Количество;
			ИтогоВес = ИтогоВес+Строка.Параметры.Вес;
			//Строка.Примечание = "";
			ТабДок.Вывести(Строка);
		КонецЦикла;
		
		Подвал = Макет.ПолучитьОбласть("Подвал");
		Подвал.Параметры.ИтогоВес = ИтогоВес;
		ТабДок.Вывести(Подвал);
		
		//ВставлятьРазделительСтраниц = Истина;
	КонецЦикла;

	Возврат ТабДок;

КонецФункции

Функция ПечатьКоммерческоеПредложение(ПараметрыКоманды) Экспорт
	ТабДок  = Новый ТабличныйДокумент;
	Макет = Документы.ЗаказКлиента.ПолучитьМакет("ПФ_MXL_КоммерческоеПредложение");	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК Ссылка,
	|	ЗаказКлиента.Дата КАК ДатаПредложения,
	|	ЗаказКлиента.ДатаПоступления КАК ДатаПоступления,
	|	ЗаказКлиента.ДатаДоставки КАК ДатаДоставки,
	|	ЗаказКлиента.Организация КАК Организация,
	|	ЗаказКлиента.Контрагент КАК Контрагент,
	|	ЗаказКлиента.Номер КАК Номер,
	|	ЗаказКлиентаТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ЗаказКлиентаТабличнаяЧасть.Номенклатура.Артикул КАК Артикул,
	|	ЗаказКлиентаТабличнаяЧасть.Количество КАК Количество,
	|	ЗаказКлиентаТабличнаяЧасть.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказКлиентаТабличнаяЧасть.Цена КАК Цена,
	|	ЗаказКлиентаТабличнаяЧасть.Сумма КАК Сумма,
	|	ЗаказКлиента.Контрагент.НаименованиеПолное КАК РасшифровкаКонтрагента
	|ИЗ
	|	Документ.ЗаказКлиента.ТабличнаяЧасть КАК ЗаказКлиентаТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
	|		ПО ЗаказКлиентаТабличнаяЧасть.Ссылка = ЗаказКлиента.Ссылка
	|ГДЕ
	|	ЗаказКлиента.Ссылка В(&Ссылка)";
	
	Запрос.Параметры.Вставить("Ссылка", ПараметрыКоманды[0].Ссылка);
	Результат = Запрос.Выполнить().Выгрузить();
	
	ТабДок.Очистить();
	
	Шапка = Макет.ПолучитьОбласть("Шапка");             
	//Шапка.Параметры.Заполнить(Результат);
	Шапка.Параметры.ДатаПредложения = ПараметрыКоманды[0].Ссылка.Дата;
	Шапка.Параметры.Организация = ПараметрыКоманды[0].Ссылка.Организация;
	Шапка.Параметры.Контрагент = ПараметрыКоманды[0].Ссылка.Контрагент;
	Шапка.Параметры.РасшифровкаКонтрагента = ПараметрыКоманды[0].Ссылка.Контрагент.НаименованиеПолное;										
	ТабДок.Вывести(Шапка);
	
	ШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДок.Вывести(ШапкаТаблицы);

	НомерСтроки = 1;
	ИтогоСуммаСоСкидкой = 0;
	//ВставлятьРазделительСтраниц = Ложь;
	Для каждого Выборка Из Результат Цикл
		
		//Если ВставлятьРазделительСтраниц Тогда
		//	ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		//КонецЕсли;
		
		Строка = Макет.ПолучитьОбласть("Строка");
		Док = ПараметрыКоманды[0].Ссылка.ПолучитьОбъект();
		Строка.Параметры.Заполнить(Выборка);
		Строка.Параметры.НомерСтроки = НомерСтроки;
		Строка.Параметры.ЦенаСоСкидкой = Выборка.Цена;
		Строка.Параметры.СуммаСоСкидкой = Выборка.Сумма;
		ТабДок.Вывести(Строка);
		
		ИтогоСуммаСоСкидкой = ИтогоСуммаСоСкидкой + Выборка.Сумма;
		НомерСтроки = НомерСтроки + 1;
		
		//ВставлятьРазделительСтраниц = Истина;
	КонецЦикла;
	
	Подвал = Макет.ПолучитьОбласть("Подвал");
		//Подвал.Параметры.Заполнить(Выборка);
		Подвал.Параметры.ИтогоСуммаСоСкидкой = ИтогоСуммаСоСкидкой;
		ТабДок.Вывести(Подвал);

	Возврат ТабДок;

КонецФункции


#КонецОбласти


Функция ПолучитьКонтакты(Ссылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтрагентыКонтактнаяИнформация.АдресЭП
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Ссылка = &Ссылка
	|	И КонтрагентыКонтактнаяИнформация.Вид = &Вид";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка.Контрагент);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailКонтрагентаДляЗаказов);
	
	НачатьТранзакцию();
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Результат = Неопределено;
		Иначе
			МассивКонтактов = Новый Массив;
			МассивКонтактов.Добавить(Новый Структура("Адрес, Контакт, Представление", РезультатЗапроса.Выгрузить()[0].АдресЭП));
			Результат = МассивКонтактов;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	//опасно, конечно. нужно проверять производительность
	//СтандартнаяОбработка = Ложь;
	//РеквизитыДокумента = БюджетныйНаСервере.ВернутьРеквизиты(Данные.Ссылка, "ВидОперации");
	//Если НЕ РеквизитыДокумента = Неопределено И ЗначениеЗаполнено(РеквизитыДокумента.ВидОперации) Тогда
	//	Представление = Строка(РеквизитыДокумента.ВидОперации) + " " + Строка(Данные.Номер) + " от " + Строка(Данные.Дата);	
	//КонецЕсли;
КонецПроцедуры

Функция КонтрольМинимальнойЦены(Ссылка) Экспорт
	//{{_КОНСТРУКТОР_ПЕЧАТИ(КонтрольМинимальнойЦены)
	
	ТабДок = Новый ТабличныйДокумент;
	
	Макет = Документы.ЗаказКлиента.ПолучитьМакет("КонтрольМинимальнойЦены");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказКлиента.Дата КАК Дата,
	|	ЗаказКлиента.Договор КАК Договор,
	|	ЗаказКлиента.Комментарий КАК Комментарий,
	|	ЗаказКлиента.Контрагент КАК Контрагент,
	|	ЗаказКлиента.Номер КАК Номер,
	|	ЗаказКлиента.Предприятие КАК Предприятие,
	|	ЗаказКлиента.ТабличнаяЧасть.(
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура КАК Номенклатура,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		0 КАК МинЦена,
	|		Сумма КАК Сумма,
	|		СтавкаНДС КАК СтавкаНДС,
	|		0 КАК ОтклонениеЦена,
	|		0 КАК ОтклонениеСумма
	|	) КАК ТабличнаяЧасть,
	|	ЗаказКлиента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ЗаказКлиента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка В(&Ссылка)";
	
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	Шапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьТабличнаяЧастьШапка = Макет.ПолучитьОбласть("ТабличнаяЧастьШапка");
	ОбластьТабличнаяЧасть = Макет.ПолучитьОбласть("ТабличнаяЧасть");
	ОбластьТабличнаяЧастьПодвал = Макет.ПолучитьОбласть("ТабличнаяЧастьПодвал");
	
	ТипМинЦены = справочники.сабМониторВнедрения.НайтиПоНаименованию("КонтрольМинимальнойЦеныПоТипуЦен", Истина).Значение;
	
	ВставлятьРазделительСтраниц = Ложь;
	Пока Выборка.Следующий() Цикл
		Если ВставлятьРазделительСтраниц Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ВыборкаЦен = Новый ТаблицаЗначений;
		
		Если ЗначениеЗаполнено(ТипМинЦены) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ЦеныНоменклатурыСрезПоследних.Период КАК Период,
			|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
			|	ЦеныНоменклатурыСрезПоследних.ТипЦен КАК ТипЦен,
			|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			|			&Период,
			|			ТипЦен = &ТипЦен
			|				И Номенклатура В (&Номенклатура)) КАК ЦеныНоменклатурыСрезПоследних";
			
			Запрос.УстановитьПараметр("ТипЦен", ТипМинЦены);
			Запрос.УстановитьПараметр("Период", Выборка.Дата);
			Запрос.УстановитьПараметр("Номенклатура", Выборка.ТабличнаяЧасть.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
			
			Результат = Запрос.Выполнить();
			ВыборкаЦен = Результат.Выгрузить();
			
		КонецЕсли;
		
		ОбластьЗаголовок.Параметры.Заполнить(Выборка);
		ТабДок.Вывести(ОбластьЗаголовок);
		
		Шапка.Параметры.Заполнить(Выборка);
		ТабДок.Вывести(Шапка, Выборка.Уровень());
		
		ТабДок.Вывести(ОбластьТабличнаяЧастьШапка);
		ВыборкаТЧ = Выборка.ТабличнаяЧасть.Выгрузить();
		
		СуммаОтклонениеИтого = 0;
		
		Для каждого ВыборкаТабличнаяЧасть Из ВыборкаТЧ Цикл
			
			ВыборкаТабличнаяЧасть.Цена = ?(Выборка.ЦенаВключаетНДС, ВыборкаТабличнаяЧасть.Цена, ВыборкаТабличнаяЧасть.Цена / (1 - ВыборкаТабличнаяЧасть.СтавкаНДС.Ставка/100)); 
			
			Если ВыборкаЦен.Количество() Тогда
				НайденныеСтрокиЦен = ВыборкаЦен.НайтиСтроки(Новый Структура("Номенклатура", ВыборкаТабличнаяЧасть.Номенклатура));
				Для каждого ТекНайдСтрока Из НайденныеСтрокиЦен Цикл
					ВыборкаТабличнаяЧасть.МинЦена = ТекНайдСтрока.Цена;
					ВыборкаТабличнаяЧасть.ОтклонениеЦена = ВыборкаТабличнаяЧасть.Цена - ВыборкаТабличнаяЧасть.МинЦена;
					ВыборкаТабличнаяЧасть.ОтклонениеСумма = ВыборкаТабличнаяЧасть.Цена * ВыборкаТабличнаяЧасть.Количество - ВыборкаТабличнаяЧасть.МинЦена * ВыборкаТабличнаяЧасть.Количество; 
					СуммаОтклонениеИтого = СуммаОтклонениеИтого + ВыборкаТабличнаяЧасть.ОтклонениеСумма;
				КонецЦикла;
			КонецЕсли;
			
			ОбластьТабличнаяЧасть.Параметры.Заполнить(ВыборкаТабличнаяЧасть);
			ТабДок.Вывести(ОбластьТабличнаяЧасть);
		КонецЦикла;
		
		ОбластьТабличнаяЧастьПодвал.Параметры.Заполнить(Выборка);
		ОбластьТабличнаяЧастьПодвал.Параметры.ОтклонениеСуммаИтого = СуммаОтклонениеИтого;
		ТабДок.Вывести(ОбластьТабличнаяЧастьПодвал);
		
		ВставлятьРазделительСтраниц = Истина;
	КонецЦикла;
	
	Возврат ТабДок;
	
	//}}
КонецФункции

Функция КалькуляцияИМаржаЗаказа(Ссылка) Экспорт
	//{{_КОНСТРУКТОР_ПЕЧАТИ(КонтрольМинимальнойЦены)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДок = Новый ТабличныйДокумент;
	
	Макет = Документы.ЗаказКлиента.ПолучитьМакет("КалькуляцияИМаржаЗаказа");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказКлиента.Дата КАК Дата,
	|	ЗаказКлиента.Договор КАК Договор,
	|	ЗаказКлиента.Комментарий КАК Комментарий,
	|	ЗаказКлиента.Контрагент КАК Контрагент,
	|	ЗаказКлиента.Номер КАК Номер,
	|	ЗаказКлиента.Предприятие КАК Предприятие,
	|	ЗаказКлиента.ТабличнаяЧасть.(
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура КАК Номенклатура,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		0 КАК Себестоимость,   
	|		0 КАК ПоследняяЦенаЗакупки,
	|		Сумма КАК Сумма,
	|		СтавкаНДС КАК СтавкаНДС,
	|		0 КАК ОтклонениеЦенаОтСебестоимости,
	|		0 КАК ОтклонениеСуммаОтсебестоимости,
	|		0 КАК ОтклонениеЦенаОтЗакупки,
	|		0 КАК ОтклонениеСуммаОтЗакупки
	
	|	) КАК ТабличнаяЧасть,
	|	ЗаказКлиента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ЗаказКлиента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка В(&Ссылка)";
	
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	Шапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьТабличнаяЧастьШапка = Макет.ПолучитьОбласть("ТабличнаяЧастьШапка");
	ОбластьТабличнаяЧасть = Макет.ПолучитьОбласть("ТабличнаяЧасть");
	ОбластьТабличнаяЧастьПодвал = Макет.ПолучитьОбласть("ТабличнаяЧастьПодвал");
	
	
	ВставлятьРазделительСтраниц = Ложь;
	Пока Выборка.Следующий() Цикл
		Если ВставлятьРазделительСтраниц Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ВыборкаЦены = Новый ТаблицаЗначений;
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.КоличествоКонечныйОстаток > 0
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстаток / ХозрасчетныйОстаткиИОбороты.КоличествоКонечныйОстаток
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт > 0
		|					ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотДт / ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|	КОНЕЦ КАК Себестоимость,
		|	ВЫРАЗИТЬ(ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ПоследниеЦены.Цена КАК ПоследняяЦенаЗакупки
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПоследниеДокументыНоменклатуры.Номенклатура КАК Номенклатура, 
		//Скорр lud 26/04/23 по обр. № 1637 от 25.04.23 Цены без НДС
		|       ВЫБОР
		|			КОГДА ПоследниеДокументыНоменклатуры.Ссылка.СуммаВключаетНДС
		|				ТОГДА (ПоследниеДокументыНоменклатуры.Сумма-ПоследниеДокументыНоменклатуры.СуммаНДС)/ПоследниеДокументыНоменклатуры.Количество 
		|				ИНАЧЕ ПоследниеДокументыНоменклатуры.Цена
		|		КОНЕЦ КАК Цена
		|	ИЗ
		|		Документ.ПоступлениеТоваровУслуг.Товары КАК ПоследниеДокументыНоменклатуры
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				Документы.Номенклатура КАК Номенклатура,
		|				МАКСИМУМ(Документы.Ссылка.Дата) КАК ДатаПоследнегоДокумента
		|			ИЗ
		|				Документ.ПоступлениеТоваровУслуг.Товары КАК Документы
		|			ГДЕ
		|				Документы.Ссылка.Дата < &ДатаОкончания
		|				И НЕ Документы.Ссылка.ПометкаУдаления
		|			
		|			СГРУППИРОВАТЬ ПО
		|				Документы.Номенклатура) КАК ДатыПоследнихДокументовНоменклатуры
		|			ПО ПоследниеДокументыНоменклатуры.Номенклатура = ДатыПоследнихДокументовНоменклатуры.Номенклатура
		|				И ПоследниеДокументыНоменклатуры.Ссылка.Дата = ДатыПоследнихДокументовНоменклатуры.ДатаПоследнегоДокумента
		|	ГДЕ
		|		ПоследниеДокументыНоменклатуры.Номенклатура В(&Номенклатура)) КАК ПоследниеЦены
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, , , Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыНаСкладах), , Субконто1 В (&Номенклатура)) КАК ХозрасчетныйОстаткиИОбороты
		|		ПО ((ВЫРАЗИТЬ(ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Справочник.Номенклатура)) = ПоследниеЦены.Номенклатура)
		|
		//+ lud 01/03/23 по обр. №1132 плановая себестоимость для продукции
		//Скорр lud 07/03/23 по обр №1164 в приоритете с/с для продукции из регистра бух.цен. 
		//{
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЕстьNULL(ЦеныНоменклатурыСрезПоследних.Цена,ПлановаяСебестоимостьСрезПоследних.Сумма),
		|	ЕстьNULL(ЦеныНоменклатурыСрезПоследних.Номенклатура, ПлановаяСебестоимостьСрезПоследних.Номенклатура),
		|	0
		|
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаОкончания, ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановаяСебестоимость.СрезПоследних(&ДатаОкончания, ) КАК ПлановаяСебестоимостьСрезПоследних
		|		ПО (ПлановаяСебестоимостьСрезПоследних.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура)";
		//}
		
		Запрос.УстановитьПараметр("ДатаОкончания", Выборка.Дата); 
		Запрос.УстановитьПараметр("ДатаНачала", Выборка.Дата-60*24*60*60);
		Запрос.УстановитьПараметр("Номенклатура", Выборка.ТабличнаяЧасть.Выгрузить().ВыгрузитьКолонку("Номенклатура"));

		Запрос.УстановитьПараметр("ТипЦен", Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить());
		
		Результат = Запрос.Выполнить();
		ВыборкаЦены = Результат.Выгрузить();
		
		
		ОбластьЗаголовок.Параметры.Заполнить(Выборка);
		ТабДок.Вывести(ОбластьЗаголовок);
		
		Шапка.Параметры.Заполнить(Выборка);
		ТабДок.Вывести(Шапка, Выборка.Уровень());
		
		ТабДок.Вывести(ОбластьТабличнаяЧастьШапка);
		ВыборкаТЧ = Выборка.ТабличнаяЧасть.Выгрузить();
		
		ОтклонениеСуммаОтСебестоимостиИтого = 0;  
		ОтклонениеСуммаОтЗакупкиИтого = 0;
		
		Для каждого ВыборкаТабличнаяЧасть Из ВыборкаТЧ Цикл   
			
			//Скорр lud 26/04/23 по обр. № 1637 от 25.04.23 Цены без НДС
			//ВыборкаТабличнаяЧасть.Цена = ?(Выборка.ЦенаВключаетНДС, ВыборкаТабличнаяЧасть.Цена, ВыборкаТабличнаяЧасть.Цена / (1 - ВыборкаТабличнаяЧасть.СтавкаНДС.Ставка/100)); 
			ВыборкаТабличнаяЧасть.Цена = ?(Выборка.ЦенаВключаетНДС, ВыборкаТабличнаяЧасть.Цена / (1 + ВыборкаТабличнаяЧасть.СтавкаНДС.Ставка/100), ВыборкаТабличнаяЧасть.Цена); 
			
			Если ВыборкаЦены.Количество() Тогда
				НайденныеСтрокиЦен = ВыборкаЦены.НайтиСтроки(Новый Структура("Номенклатура", ВыборкаТабличнаяЧасть.Номенклатура));
				Для каждого ТекНайдСтрока Из НайденныеСтрокиЦен Цикл
					ВыборкаТабличнаяЧасть.Себестоимость = ТекНайдСтрока.Себестоимость;
					ВыборкаТабличнаяЧасть.ОтклонениеЦенаОтСебестоимости = ВыборкаТабличнаяЧасть.Цена - ВыборкаТабличнаяЧасть.Себестоимость;
					ВыборкаТабличнаяЧасть.ОтклонениеСуммаОтСебестоимости = ВыборкаТабличнаяЧасть.ОтклонениеЦенаОтСебестоимости * ВыборкаТабличнаяЧасть.Количество; 
					ОтклонениеСуммаОтСебестоимостиИтого = ОтклонениеСуммаОтСебестоимостиИтого + ВыборкаТабличнаяЧасть.ОтклонениеСуммаОтСебестоимости;  
					
					ВыборкаТабличнаяЧасть.ПоследняяЦенаЗакупки = ТекНайдСтрока.ПоследняяЦенаЗакупки;   
					//Скорр. lud 01/03/23 по обр. №1132 не актуально для продукции, где нет последней цены закупки
					//{
					ВыборкаТабличнаяЧасть.ОтклонениеЦенаОтЗакупки = ?(ВыборкаТабличнаяЧасть.ПоследняяЦенаЗакупки > 0, ВыборкаТабличнаяЧасть.Цена - ВыборкаТабличнаяЧасть.ПоследняяЦенаЗакупки, 0);
					//}
					ВыборкаТабличнаяЧасть.ОтклонениеСуммаОтЗакупки = ВыборкаТабличнаяЧасть.ОтклонениеЦенаОтЗакупки * ВыборкаТабличнаяЧасть.Количество; 
					ОтклонениеСуммаОтЗакупкиИтого = ОтклонениеСуммаОтЗакупкиИтого + ВыборкаТабличнаяЧасть.ОтклонениеСуммаОтЗакупки;
					
				КонецЦикла;
			КонецЕсли;
			
			ОбластьТабличнаяЧасть.Параметры.Заполнить(ВыборкаТабличнаяЧасть);
			ТабДок.Вывести(ОбластьТабличнаяЧасть);
		КонецЦикла;
		
		ОбластьТабличнаяЧастьПодвал.Параметры.Заполнить(Выборка);
		ОбластьТабличнаяЧастьПодвал.Параметры.ОтклонениеСуммаОтСебестоимостиИтого = ОтклонениеСуммаОтСебестоимостиИтого;   
		ОбластьТабличнаяЧастьПодвал.Параметры.ОтклонениеСуммаОтЗакупкиИтого = ОтклонениеСуммаОтЗакупкиИтого;
		
		ТабДок.Вывести(ОбластьТабличнаяЧастьПодвал);
		
		ВставлятьРазделительСтраниц = Истина;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТабДок;
	
	//}}
КонецФункции    

Функция ПечатьДоговор(Ссылка, Предоплата) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ДоговораСчета";
	
	Макет = Документы.ЗаказКлиента.ПолучитьМакет("ПФ_MXL_ДоговорСчет");

	ДанныеПечатиОбъектов = Новый СписокЗначений;
	
	Запрос = Новый Запрос(); 
	Запрос.Текст = "ВЫБРАТЬ
	|ЗаказКлиента.Ссылка КАК Ссылка,
	|ЗаказКлиента.Номер КАК НомерДокумента,
	|ЗаказКлиента.Дата КАК ДатаДокумента,
	|ЗаказКлиента.Организация КАК Организация,
	|ЗаказКлиента.Контрагент КАК Контрагент,
	|ЗаказКлиента.ТабличнаяЧасть.(  
	|	НомерСтроки КАК НомерСтроки,
	|	Номенклатура КАК Номенклатура,
	|	Номенклатура.НаименованиеПолное КАК НоменклатураНаименованиеПолное,
	|	Номенклатура.Артикул КАК Артикул,  
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Цена КАК Цена,
	|	Сумма КАК Сумма,
	|	СуммаНДС КАК СуммаНДС,
	|	Количество КАК Количество
	|) КАК ТабличнаяЧасть
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка В(&МассивОбъектов)";
	
	Запрос.УстановитьПараметр("МассивОбъектов", Ссылка);
	РезультатыЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ДокументДляПечати Из РезультатыЗапроса Цикл
    	ДанныеПечати = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ДокументДляПечати);  
		ДанныеПечати.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеПечати.НомерДокумента,Истина,Истина);
        ДанныеПечатиОбъектов.Добавить(ДанныеПечати);
   	КонецЦикла;
 
	
	ПервыйДокумент = Истина;
	
	Для Каждого ДанныеПечати Из ДанныеПечатиОбъектов Цикл                           
			
			// Документы нужно выводить на разных страницах.
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			Иначе
				ПервыйДокумент = Ложь;
			КонецЕсли;	
			

			ОблЗаголовок = Макет.ПолучитьОбласть("Заголовок");
			ОблЗаголовок.Параметры.Заполнить(ДанныеПечати.Значение);  
			ТабличныйДокумент.Вывести(ОблЗаголовок);
			
			ОблПоставщик = Макет.ПолучитьОбласть("Поставщик"); 
			СведенияОПоставщике = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ДанныеПечати.Значение.Организация, ДанныеПечати.Значение.ДатаДокумента);
			ОблПоставщик.Параметры.Заполнить(СведенияОПоставщике);
			ТабличныйДокумент.Вывести(ОблПоставщик);  
			
			ОблПокупатель = Макет.ПолучитьОбласть("Покупатель");
			СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ДанныеПечати.Значение.Контрагент, ДанныеПечати.Значение.ДатаДокумента);
			ОблПокупатель.Параметры.Заполнить(СведенияОПокупателе);
			ТабличныйДокумент.Вывести(ОблПокупатель);
			
			ОблШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ОблШапкаТаблицы.Параметры.Заполнить(ДанныеПечати.Значение);
			ТабличныйДокумент.Вывести(ОблШапкаТаблицы); 
			
			ОблСтрока = Макет.ПолучитьОбласть("Строка"); 
			ТабличнаяЧасть = ДанныеПечати.Значение.Табличнаячасть;
			Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл 
				ОблСтрока.Параметры.Заполнить(СтрокаТаблицы); 
				ОблСтрока.Параметры.Номенклатура = ?(ЗначениеЗаполнено(СтрокаТаблицы.НоменклатураНаименованиеПолное),СтрокаТаблицы.НоменклатураНаименованиеПолное, СтрокаТаблицы.Номенклатура);
				ТабличныйДокумент.Вывести(ОблСтрока); 
			КонецЦикла;
			
			ОблИтого = Макет.ПолучитьОбласть("Итого");
			ОблИтого.Параметры.Всего = ТабличнаяЧасть.Итог("Сумма");
			ТабличныйДокумент.Вывести(ОблИтого);   
			
			ОблИтогоНДС = Макет.ПолучитьОбласть("ИтогоНДС");
			ОблИтогоНДС.Параметры.ВсегоНДС = ТабличнаяЧасть.Итог("СуммаНДС");
			ТабличныйДокумент.Вывести(ОблИтогоНДС);

			ОблИтогоКОплате = Макет.ПолучитьОбласть("ИтогоКОплате");
			ОблИтогоКОплате.Параметры.ИтогоКОплате = ТабличнаяЧасть.Итог("Сумма");
			ТабличныйДокумент.Вывести(ОблИтогоКОплате);   
			
			ОблПодвал = Макет.ПолучитьОбласть("Подвал");
			Если Предоплата = 100 Тогда
				ОблПодвал.Параметры.УсловиеОплаты = "100% оплаты стоимости Товара (п. 3 ст. 438 Гражданского Кодекса Российской Федерации) в порядке предоплаты в течение 20 (двадцати) дней с даты составления настоящего Договора-счёта";
			Иначе
				ОблПодвал.Параметры.УсловиеОплаты = "50% оплаты стоимости Товара (п. 3 ст. 438 Гражданского Кодекса Российской Федерации) в порядке предоплаты в течение 20 (двадцати) дней с даты составления настоящего Договора-счёта и 50% оплаты стоимости в течение 30 календарных дней с момента отгрузки";
			КонецЕсли;	
			ОтветственныеЛица = ФормированиеПечатныхФормСервер.ОтветственныеЛицаОрганизаций(ДанныеПечати.Значение.Организация, ДанныеПечати.Значение.ДатаДокумента);
			ОблПодвал.Параметры.Заполнить(ОтветственныеЛица);
			ТабличныйДокумент.Вывести(ОблПодвал);
						
		КонецЦикла;
		
		Возврат ТабличныйДокумент;

КонецФункции

Функция ПечатьСпецификация(Ссылка) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказКлиентаТабличнаяЧасть.Номенклатура.Артикул КАК Артикул,
	               //|	ЗаказКлиентаТабличнаяЧасть.Номенклатура.Наименование КАК Наименование,
	               |	ЗаказКлиентаТабличнаяЧасть.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ЗаказКлиентаТабличнаяЧасть.Количество КАК Количество,
	               |	ЗаказКлиентаТабличнаяЧасть.Цена КАК ЦенаСНДС,
	               |	ЗаказКлиентаТабличнаяЧасть.СтавкаНДС КАК СтавкаНДС,
	               |	ЗаказКлиентаТабличнаяЧасть.Сумма КАК СуммаСНДС,
	               |	ЗаказКлиента.Договор КАК Договор,
	               |	ЗаказКлиента.ДатаДоставки КАК ДатаДоставки,
	               |	ЗаказКлиента.АдресДоставки КАК АдресДоставки,
	               |	ЗаказКлиента.СпособДоставки КАК СпособДоставки,
	               |	ЗаказКлиента.МестоДоставки КАК МестоДоставки,
	               |	ЗаказКлиента.ВидОперации КАК ВидОперации,
	               |	ЗаказКлиента.Номер КАК Номер,
	               |	ЗаказКлиента.Организация КАК Организация,
	               |	ЗаказКлиента.Дата КАК Дата,
	               |	КонтактныеЛица.Ссылка КАК РуководительПокупатель,
	               |	КонтактныеЛица.Должность КАК ДолжностьРуководительПокупатель,
	               |	ЗаказКлиента.Контрагент КАК Контрагент,
	               |	ЗаказКлиента.ДатаПоступления КАК ДатаПоступления,
	               |	ЗаказКлиента.Договор.Наименование КАК ДоговорНаименование,
	               |	ЗаказКлиента.Договор.Номер КАК ДоговорНомер,
	               |	ЗаказКлиента.Договор.Дата КАК ДоговорДата,
	               |	ЗаказКлиентаТабличнаяЧасть.Номенклатура.НаименованиеПолное КАК Наименование
	               |ИЗ
	               |	Документ.ЗаказКлиента.ТабличнаяЧасть КАК ЗаказКлиентаТабличнаяЧасть
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица КАК КонтактныеЛица
	               |			ПО ЗаказКлиента.Контрагент.ОсновноеКонтактноеЛицо.Ссылка = КонтактныеЛица.Ссылка
	               |		ПО ЗаказКлиентаТабличнаяЧасть.Ссылка = ЗаказКлиента.Ссылка
	               |ГДЕ
	               |	ЗаказКлиентаТабличнаяЧасть.Ссылка = &ЗаказСсылка";
	
	Запрос.УстановитьПараметр("ЗаказСсылка",Ссылка[0]);
	
	ВыгрузкаЗаказ = Запрос.Выполнить().Выгрузить();

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказСпецификация";
	
	Макет = Документы.ЗаказКлиента.ПолучитьМакет("ПФ_MXL_Спецификация");

	ОблШапка = Макет.ПолучитьОбласть("Шапка");
	ИДСтроки = СтрНайти(ВыгрузкаЗаказ[0].ДоговорНаименование,"№");
	НаименДоговора = ЛЕВ(ВыгрузкаЗаказ[0].ДоговорНаименование,ИДСтроки-1);
	
	ОблШапка.Параметры.Договор = СокрЛП(НаименДоговора) + " № " + СокрЛП(Строка(ВыгрузкаЗаказ[0].ДоговорНомер)) + " от " + Формат(ВыгрузкаЗаказ[0].ДоговорДата,"ДФ=dd.MM.yyyy");
	ОблШапка.Параметры.НомерСпецификации = ВыгрузкаЗаказ[0].Номер;
	ОблШапка.Параметры.Дата = Формат(ВыгрузкаЗаказ[0].Дата,"ДЛФ=DD");
	
	ТабличныйДокумент.Вывести(ОблШапка);
	
	СуммаИтого = 0;
	ОблСтрока = Макет.ПолучитьОбласть("Строка");
	Для к=1 по ВыгрузкаЗаказ.Количество() цикл
		ЗаполнитьЗначенияСвойств(ОблСтрока.Параметры,ВыгрузкаЗаказ[к-1]);
		ОблСтрока.Параметры.ЦенаСНДС = Формат(ВыгрузкаЗаказ[к-1].ЦенаСНДС,"ЧЦ=15; ЧДЦ=2");
		ОблСтрока.Параметры.СуммаСНДС = Формат(ВыгрузкаЗаказ[к-1].СуммаСНДС,"ЧЦ=15; ЧДЦ=2"); 
		ОблСтрока.Параметры.Количество = Формат(ВыгрузкаЗаказ[к-1].Количество,"ЧЦ=15; ЧДЦ=2");
		ОблСтрока.Параметры.Номер = Строка(к);
		ОблСтрока.Параметры.СрокГодности = "не менее 80%";
		ТабличныйДокумент.Вывести(ОблСтрока);
		СуммаИтого = СуммаИтого + ВыгрузкаЗаказ[к-1].СуммаСНДС;
	КонецЦикла;
		
	ОблПодвал = Макет.ПолучитьОбласть("Подвал");
	ОблПодвал.Параметры.СуммаИтого = Формат(СуммаИтого,"ЧЦ=15; ЧДЦ=2");
	ОблПодвал.Параметры.СпособДоставки = ВыгрузкаЗаказ[0].СпособДоставки;
	Если ЗначениеЗаполнено(ВыгрузкаЗаказ[0].ДатаДоставки) тогда
		ОблПодвал.Параметры.СрокПоставки = Формат(ВыгрузкаЗаказ[0].ДатаПоступления,"ДФ=dd.MM.yyyy");
	Иначе
		ОблПодвал.Параметры.СрокПоставки = Формат(ВыгрузкаЗаказ[0].ДатаДоставки,"ДФ=dd.MM.yyyy");
	КонецЕсли;
	ОблПодвал.Параметры.Поставщик = ВыгрузкаЗаказ[0].Организация;
	ОблПодвал.Параметры.АдресДоставки = ВыгрузкаЗаказ[0].АдресДоставки;
	ОтветственныеЛица = ФормированиеПечатныхФормСервер.ОтветственныеЛицаОрганизаций(ВыгрузкаЗаказ[0].Организация, ВыгрузкаЗаказ[0].Дата);
	ОблПодвал.Параметры.Заполнить(ОтветственныеЛица);
	ОблПодвал.Параметры.РуководительПокупатель = ФИОКонтактногоЛица(ВыгрузкаЗаказ[0].РуководительПокупатель);
	ОблПодвал.Параметры.ДолжностьРуководительПокупатель = ВыгрузкаЗаказ[0].ДолжностьРуководительПокупатель;
	ОблПодвал.Параметры.Покупатель = ВыгрузкаЗаказ[0].Контрагент;
	ТабличныйДокумент.Вывести(ОблПодвал);
	
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ФИОКонтактногоЛица(ОсновноеКонтактноеЛицоФИО)
	
	ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ОсновноеКонтактноеЛицоФИО);
	ИмяКонтактногоЛица = "";
	ОтчествоКонтактногоЛица = "";
	
	// Если в ФИО указана фамилия, имя и должность через запятую (Например: Иванов, Генеральный директор),
	// то для того, чтобы название должности не попало в имя и отчество контактного лица проверяем
	// наличие запятой в предыдущей части имени, текст идущий после нее не сохраняем в части имени
	
	ФамилияКонтактногоЛица = СтрЗаменить(ФИО.Фамилия, ",", "");
	
	Если Найти(ФИО.Фамилия, ",") = 0 Тогда
		ИмяКонтактногоЛица = СтрЗаменить(ФИО.Имя, ",", "");
	КонецЕсли;

	Если Найти(ФИО.Имя, ",") = 0
		И Найти(ФИО.Фамилия, ",") = 0 Тогда
		ОтчествоКонтактногоЛица = СтрЗаменить(ФИО.Отчество, ",", "");
	КонецЕсли;
	
	Возврат ФамилияКонтактногоЛица + " " + ИмяКонтактногоЛица + " " + ОтчествоКонтактногоЛица;
	
КонецФункции

Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры
