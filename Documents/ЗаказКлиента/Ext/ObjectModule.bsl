
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// закомментированно 24.07.2017 загрузка EDI Астор-ФК {
	//ТЧСвернутая = ТабличнаяЧасть.Выгрузить();	
	//
	//ТЧСвернутая.Свернуть("Номенклатура, Склад, Цена, Доставка, ВидДоставки, СтавкаНДС, ВидЦеныПоставщика, ДатаПоступления, ЕдиницаИзмерения, ЦенаПодтвержденная, СтатусПодтвержденияПозиции", 
	//						"Количество, Сумма, СуммаДоставки, СуммаБезНДС, СуммаНДС, КоличествоУпаковок, КоличествоПодтвержденное");
	//						
	//Если ТЧСвернутая.Количество() <> ТабличнаяЧасть.Количество() Тогда
	//	ТабличнаяЧасть.Загрузить(ТЧСвернутая);
	//	Сообщить("В строках обнаружены дубли номенклатур, была произведена свертка дублей!");
	//КонецЕсли;	
    //}
	
	Если НЕ ЭтоНовый() Тогда
		Если (ОбменДанными.Загрузка Или ЭтотОбъект.ДополнительныеСвойства.Свойство("ЭтоОбмен")) И АвтообновленияЗаблокированы Тогда
			ИгнорироватьБлокАвтообновления = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("сабИгнорироватьБлокировкуАвтообновленийДокументов");
			Если Не ИгнорироватьБлокАвтообновления Тогда
				ЭтотОбъект.Прочитать();
				ОбменДанными.Загрузка = Не ЭтотОбъект.ДополнительныеСвойства.Свойство("ЭтоОбмен");   
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПометкаУдаления Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;	
	КонецЕсли;
	
	СуммаДокумента = ТабличнаяЧасть.Итог("Сумма") + ?(Не ЦенаВключаетНДС, ТабличнаяЧасть.Итог("СуммаНДС"), 0);
	//СуммаДокумента = СуммаДокумента;
	
	//ДатаДоставки = ДатаПоступления;
	
	//Заказ помечен на удаление
	Если ЗначениеЗаполнено(Ссылка) И ПометкаУдаления = Истина И Ссылка.ПометкаУдаления = Ложь Тогда
		Запрос = новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	УЧ_Реализация.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.УЧ_Реализация КАК УЧ_Реализация
		               |ГДЕ
		               |	УЧ_Реализация.ДокОснование = &ДокОснование
		               |	И НЕ УЧ_Реализация.ПометкаУдаления
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	РеализацияТоваровУслуг.Ссылка
		               |ИЗ
		               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		               |ГДЕ
		               |	НЕ РеализацияТоваровУслуг.ПометкаУдаления
		               |	И РеализацияТоваровУслуг.Заказ = &ДокОснование";
		Запрос.УстановитьПараметр("ДокОснование", Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Сообщить("Невозможно удалить заказ, поскольку есть подчиненные документы");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	////формирование комментария
	//ПрочиеУсловия = Договор.ПрочиеУсловия;
	//Если ЗначениеЗаполнено(ПрочиеУсловия) Тогда
	//	НайденныйТекст = СтрНайти(Комментарий, " (ДопУсловия: ");
	//	Если НайденныйТекст Тогда
	//		Комментарий = Лев(Комментарий, НайденныйТекст - 1);		
	//	КонецЕсли;		
	//	Комментарий = Комментарий + " (ДопУсловия: " + ПрочиеУсловия + ")";
	//КонецЕсли;
		
	 //из подписки на событие
	БюджетныйНаСервере.ДокументыПередЗаписьюПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧДокумента.Количество,
	|	ТЧДокумента.Номенклатура
	|ПОМЕСТИТЬ ВТ_ТЧДока
	|ИЗ
	|	&ТЧДокумента КАК ТЧДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТЧДока.Количество,
	|	ВТ_ТЧДока.Номенклатура,
	|	ЕСТЬNULL(ВТ_ТЧДока.Количество * ВТ_ТЧДока.Номенклатура.Вес, 0) КАК ВесТовара
	|ИЗ
	|	ВТ_ТЧДока КАК ВТ_ТЧДока";
	Запрос.УстановитьПараметр("ТЧДокумента", ТабличнаяЧасть.Выгрузить(, "Количество, Номенклатура"));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ВесТовара = 0;
	Пока Выборка.Следующий() Цикл
		ВесТовара = ВесТовара + Выборка.ВесТовара;		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ПодразделениеКонтрагента) Тогда
		РеквыОбъекта = БюджетныйНаСервере.ВернутьРеквизиты(ПодразделениеКонтрагента, "Адрес, Ответственный, Выразить(Спр.Ответственный КАК Справочник.СотрудникиКонтрагентов).Телефон КАК ОтветственныйТелефон, ДатаДоставки, ДатаДоставкиДо, МаршрутДоставки"); 
		
		Если Не ЗначениеЗаполнено(ДатаДоставки) Тогда
			ДатаДоставки = НачалоДня(ДатаДоставки) + (РеквыОбъекта.ДатаДоставки - НачалоДня(РеквыОбъекта.ДатаДоставки));
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДатаДоставкиДо) Тогда
			ДатаДоставкиДо = НачалоДня(ДатаДоставки) + (РеквыОбъекта.ДатаДоставкиДо - НачалоДня(РеквыОбъекта.ДатаДоставкиДо));
		КонецЕсли;
		
	Иначе
		
		Если Не ЗначениеЗаполнено(ДатаДоставкиДо) Тогда
			ДатаДоставкиДо = ДатаДоставки;
		КонецЕсли;
			
	КонецЕсли;
	
	Если ДатаПоступления = Дата('00010101') Тогда
		ДатаПоступления = Дата;
	КонецЕсли;
	
	Если Не ЭтоНовый() И Проведен И РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		ЗаполнитьДвиженияБронированиеТоваров();	
	КонецЕсли;  
	
	ПродажаВРозницу = ЗначениеЗаполнено(Договор) И Договор.ПриоритетныйПорядокРасчетов = Перечисления.Д_ИсточникиСредств.Нал;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
		
	ЕстьОшибки = Ложь;
	
	РеквизитДатаПоступления = ПроверяемыеРеквизиты.Найти("ДатаПоступления");
	
	//Если Не ПоступлениеОднойДатой Тогда
	//	ПроверяемыеРеквизиты.Удалить(РеквизитДатаПоступления);
	//КонецЕсли;
	
	ЗапретПроведенияЗаказаПокупателяСПустымПодразделением = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ЗапретПроведенияЗаказаПокупателяСПустымПодразделением", Истина).Значение;
	Если НЕ ЗапретПроведенияЗаказаПокупателяСПустымПодразделением = Неопределено И ЗапретПроведенияЗаказаПокупателяСПустымПодразделением Тогда
		РеквизитПодразделениеКонтрагента = ПроверяемыеРеквизиты.Найти("ПодразделениеКонтрагента");
		Если РеквизитПодразделениеКонтрагента = Неопределено Тогда
			ПроверяемыеРеквизиты.Добавить("ПодразделениеКонтрагента");
		КонецЕсли;
	КонецЕсли;

	
	Если ВидОперации = Перечисления.ВидыЗаказов.ВнутреннееПеремещение Тогда
		РеквизитЦена = ПроверяемыеРеквизиты.Найти("ТабличнаяЧасть.Цена");
		ПроверяемыеРеквизиты.Удалить(РеквизитЦена);
		РеквизитДоговор = ПроверяемыеРеквизиты.Найти("Договор");
		ПроверяемыеРеквизиты.Удалить(РеквизитДоговор);
	Иначе
		НужнаПроверкаДоговора = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ПроверятьЗаполнениеДоговоровВДокументах", Истина).Значение;
		
		Если НЕ НужнаПроверкаДоговора = Неопределено И НужнаПроверкаДоговора Тогда
			РеквизитДоговор = ПроверяемыеРеквизиты.Найти("Договор");
			
			Если РеквизитДоговор = Неопределено Тогда
				ПроверяемыеРеквизиты.Добавить("Договор");
				ПроверяемыеРеквизиты.Добавить("ДоговорПриоритетныйПорядокРасчетов");
			КонецЕсли;   
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Если БезвозмезднаяПередача Тогда
		РеквизитЦена = ПроверяемыеРеквизиты.Найти("ТабличнаяЧасть.Цена");
		ПроверяемыеРеквизиты.Удалить(РеквизитЦена);
	КонецЕсли;
	
	//Проверим на правильность ассортимента
	//Если ВидОперации = Перечисления.ВидыЗаказов.ЗакупкаТоваров И Не Подразделение.ПроизводственноеПодразделение И Не Контрагент.Учетный Тогда
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	КорзинаТорговТовары.Номенклатура,
	//	|	ТоргиСрезПоследних.ВыведенаИзТоргов КАК ВыведенаИзТоргов
	//	|ПОМЕСТИТЬ ВТ_Торги
	//	|ИЗ
	//	|	Справочник.КорзинаТоргов.Товары КАК КорзинаТорговТовары
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Торги.СрезПоследних(&Период, ) КАК ТоргиСрезПоследних
	//	|		ПО КорзинаТорговТовары.Ссылка = ТоргиСрезПоследних.Корзина
	//	|			И КорзинаТорговТовары.Номенклатура = ТоргиСрезПоследних.Номенклатура
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура
	//	|ИЗ
	//	|	РегистрСведений.НоменклатураПоставщика.СрезПоследних(
	//	|			&Период,
	//	|			Предприятие = &Предприятие
	//	|				И Подразделение = &Подразделение) КАК НоменклатураПоставщикаСрезПоследних
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АссортиментнаяМатрица.СрезПоследних(
	//	|				&Период,
	//	|				Предприятие = &Предприятие
	//	|					И Подразделение = &Подразделение) КАК АссортиментнаяМатрицаСрезПоследних
	//	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыОбеспеченияПотребности.СрезПоследних(
	//	|					&Период,
	//	|					Предприятие = &Предприятие
	//	|						И Подразделение = &Подразделение) КАК ПараметрыОбеспеченияПотребностиСрезПоследних
	//	|			ПО АссортиментнаяМатрицаСрезПоследних.Номенклатура = ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура
	//	|				И АссортиментнаяМатрицаСрезПоследних.Предприятие = ПараметрыОбеспеченияПотребностиСрезПоследних.Предприятие
	//	|				И АссортиментнаяМатрицаСрезПоследних.Подразделение = ПараметрыОбеспеченияПотребностиСрезПоследних.Подразделение
	//	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Торги КАК ВТ_Торги
	//	|			ПО АссортиментнаяМатрицаСрезПоследних.Номенклатура = ВТ_Торги.Номенклатура
	//	|		ПО НоменклатураПоставщикаСрезПоследних.Номенклатура = АссортиментнаяМатрицаСрезПоследних.Номенклатура
	//	|			И НоменклатураПоставщикаСрезПоследних.Подразделение = АссортиментнаяМатрицаСрезПоследних.Подразделение
	//	|			И НоменклатураПоставщикаСрезПоследних.Предприятие = АссортиментнаяМатрицаСрезПоследних.Предприятие
	//	|ГДЕ
	//	|	НЕ ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура ЕСТЬ NULL 
	//	|	И НоменклатураПоставщикаСрезПоследних.Контрагент = &Контрагент
	//	|	И АссортиментнаяМатрицаСрезПоследних.ВыведенИзАссортимента = ЛОЖЬ
	//	|	И ЕСТЬNULL(ВТ_Торги.ВыведенаИзТоргов, ЛОЖЬ) = ЛОЖЬ";
	//	Запрос.УстановитьПараметр("Период", Дата);
	//	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	//	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	//	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	//	ТаблицаАссортимента = Запрос.Выполнить().Выгрузить();
	//	Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
	//		Если ТаблицаАссортимента.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТЧ.Номенклатура)).Количество() = 0 Тогда
	//			сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(ЭтотОбъект, "Номенклатура " + СтрокаТЧ.Номенклатура + " не входит в ассортимент", "ТабличнаяЧасть", СтрокаТЧ.НомерСтроки, "Номенклатура");
	//			ЕстьОшибки = Истина;
	//		КонецЕсли;	
	//	КонецЦикла;	
	//КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Отказ = Истина;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	ЗаполнитьДвиженияБронированиеТоваров();
	////ЕслиНастройкаБронированияВключена
	//Если Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройкиКонстанты("сабБронированиеТоваровВЗаказах") Тогда
	//	Движения.БронированиеТоваров.Записывать = Истина; 
	//	Если Не (Статус = Перечисления.СтатусыЗаказовКлиентов.Отгружен Или Статус = Перечисления.СтатусыЗаказовКлиентов.Отменен) Тогда
	//		ЗапросТЧ = Новый Запрос;
	//		//ЗапросТЧ.Текст = 
	//		//"ВЫБРАТЬ
	//		//|	ЗаказКлиентаТабличнаяЧасть.Номенклатура КАК Номенклатура,
	//		//|	ВЫБОР
	//		//|		КОГДА ЗаказКлиентаТабличнаяЧасть.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	//		//|			ТОГДА ЗаказКлиентаТабличнаяЧасть.Ссылка.Склад
	//		//|		ИНАЧЕ ЗаказКлиентаТабличнаяЧасть.Склад
	//		//|	КОНЕЦ КАК Склад,
	//		//|	СУММА(ЗаказКлиентаТабличнаяЧасть.Забронировано) КАК Забронировано
	//		//|ПОМЕСТИТЬ ВТТабличнаяЧастьЗаказКлиента
	//		//|ИЗ
	//		//|	Документ.ЗаказКлиента.ТабличнаяЧасть КАК ЗаказКлиентаТабличнаяЧасть
	//		//|ГДЕ
	//		//|	ЗаказКлиентаТабличнаяЧасть.Ссылка = &Ссылка
	//		//|
	//		//|СГРУППИРОВАТЬ ПО
	//		//|	ЗаказКлиентаТабличнаяЧасть.Номенклатура,
	//		//|	ВЫБОР
	//		//|		КОГДА ЗаказКлиентаТабличнаяЧасть.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	//		//|			ТОГДА ЗаказКлиентаТабличнаяЧасть.Ссылка.Склад
	//		//|		ИНАЧЕ ЗаказКлиентаТабличнаяЧасть.Склад
	//		//|	КОНЕЦ
	//		//|
	//		//|ИМЕЮЩИЕ
	//		//|	СУММА(ЗаказКлиентаТабличнаяЧасть.Забронировано) > 0
	//		//|;
	//		//|
	//		//|////////////////////////////////////////////////////////////////////////////////
	//		//|ВЫБРАТЬ
	//		//|	УЧ_РеализацияТовары.Номенклатура КАК Номенклатура,
	//		//|	ВЫБОР
	//		//|		КОГДА УЧ_РеализацияТовары.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	//		//|			ТОГДА УЧ_РеализацияТовары.Ссылка.Склад
	//		//|		ИНАЧЕ УЧ_РеализацияТовары.Склад
	//		//|	КОНЕЦ КАК Склад,
	//		//|	СУММА(УЧ_РеализацияТовары.Количество) КАК Количество
	//		//|ПОМЕСТИТЬ ТЧТоварыРеализация
	//		//|ИЗ
	//		//|	Документ.УЧ_Реализация.Товары КАК УЧ_РеализацияТовары
	//		//|ГДЕ
	//		//|	УЧ_РеализацияТовары.Ссылка.Проведен
	//		//|	И УЧ_РеализацияТовары.Ссылка.ДокОснование = &Ссылка
	//		//|	И УЧ_РеализацияТовары.Ссылка.Предприятие = &Предприятие
	//		//|
	//		//|СГРУППИРОВАТЬ ПО
	//		//|	УЧ_РеализацияТовары.Номенклатура,
	//		//|	ВЫБОР
	//		//|		КОГДА УЧ_РеализацияТовары.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	//		//|			ТОГДА УЧ_РеализацияТовары.Ссылка.Склад
	//		//|		ИНАЧЕ УЧ_РеализацияТовары.Склад
	//		//|	КОНЕЦ
	//		//|;
	//		//|
	//		//|////////////////////////////////////////////////////////////////////////////////
	//		//|ВЫБРАТЬ
	//		//|	ВТТабличнаяЧастьЗаказКлиента.Номенклатура КАК Номенклатура,
	//		//|	ВТТабличнаяЧастьЗаказКлиента.Склад КАК Склад,
	//		//|	ВТТабличнаяЧастьЗаказКлиента.Забронировано КАК Забронировано,
	//		//|	ЕСТЬNULL(ТЧТоварыРеализация.Количество, 0) КАК Отгружено,
	//		//|	ВТТабличнаяЧастьЗаказКлиента.Забронировано - ЕСТЬNULL(ТЧТоварыРеализация.Количество, 0) КАК ЗабронированоСУчетомОтгрузки
	//		//|ИЗ
	//		//|	ВТТабличнаяЧастьЗаказКлиента КАК ВТТабличнаяЧастьЗаказКлиента
	//		//|		ЛЕВОЕ СОЕДИНЕНИЕ ТЧТоварыРеализация КАК ТЧТоварыРеализация
	//		//|		ПО ВТТабличнаяЧастьЗаказКлиента.Номенклатура = ТЧТоварыРеализация.Номенклатура
	//		//|			И ВТТабличнаяЧастьЗаказКлиента.Склад = ТЧТоварыРеализация.Склад";
	//ЗапросТЧ.Текст = 
	//"ВЫБРАТЬ
	//|	СчетНаОплатуПокупателю.Ссылка КАК Ссылка
	//|ПОМЕСТИТЬ ВТ_СчетаНаОплатуПокупателю
	//|ИЗ
	//|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	//|ГДЕ
	//|	СчетНаОплатуПокупателю.Заказ = &Заказ
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	РеализацияТоваровУслуг.Ссылка КАК Ссылка
	//|ПОМЕСТИТЬ ВТ_ДокументыБух
	//|ИЗ
	//|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//|ГДЕ
	//|	(РеализацияТоваровУслуг.Заказ = &Заказ
	//|			ИЛИ РеализацияТоваровУслуг.СчетНаОплатуПокупателю В
	//|				(ВЫБРАТЬ
	//|					ВТ_СчетаНаОплатуПокупателю.Ссылка КАК Ссылка
	//|				ИЗ
	//|					ВТ_СчетаНаОплатуПокупателю КАК ВТ_СчетаНаОплатуПокупателю))
	//|	И НЕ РеализацияТоваровУслуг.ПометкаУдаления
	//|	И РеализацияТоваровУслуг.Проведен
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	РозничнаяПродажа.Ссылка
	//|ИЗ
	//|	Документ.РозничнаяПродажа КАК РозничнаяПродажа
	//|ГДЕ
	//|	(РозничнаяПродажа.Заказ = &Заказ
	//|			ИЛИ РозничнаяПродажа.СчетНаОплатуПокупателю В
	//|				(ВЫБРАТЬ
	//|					ВТ_СчетаНаОплатуПокупателю.Ссылка КАК Ссылка
	//|				ИЗ
	//|					ВТ_СчетаНаОплатуПокупателю КАК ВТ_СчетаНаОплатуПокупателю))
	//|	И НЕ РозничнаяПродажа.ПометкаУдаления
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	ПередачаТоваров.Ссылка
	//|ИЗ
	//|	Документ.ПередачаТоваров КАК ПередачаТоваров
	//|ГДЕ
	//|	ПередачаТоваров.Заказ = &Заказ
	//|	И НЕ ПередачаТоваров.ПометкаУдаления
	//|	И ПередачаТоваров.Проведен
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	ТребованиеНакладная.Ссылка
	//|ИЗ
	//|	Документ.ТребованиеНакладная КАК ТребованиеНакладная
	//|ГДЕ
	//|	ТребованиеНакладная.Заказ = &Заказ
	//|	И НЕ ТребованиеНакладная.ПометкаУдаления
	//|	И ТребованиеНакладная.Проведен
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	сабОбработкаДокументов.ДокументУУ КАК ДокументУУ,
	//|	сабОбработкаДокументов.ДокументБУ КАК ДокументБУ,
	//|	сабОбработкаДокументов.ДатаОбработки КАК ДатаОбработки
	//|ПОМЕСТИТЬ ВТ_НеПустые
	//|ИЗ
	//|	РегистрСведений.сабОбработкаДокументов КАК сабОбработкаДокументов
	//|ГДЕ
	//|	сабОбработкаДокументов.ДокументБУ В
	//|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|				ВТ_ДокументыБух.Ссылка КАК Ссылка
	//|			ИЗ
	//|				ВТ_ДокументыБух КАК ВТ_ДокументыБух)
	//|	И сабОбработкаДокументов.ДокументУУ.Дата ЕСТЬ НЕ NULL 
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	сабОбработкаДокументов.ДокументБУ,
	//|	сабОбработкаДокументов.ДокументУУ,
	//|	сабОбработкаДокументов.ДатаОбработки
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	МАКСИМУМ(ВТ_НеПустые.ДокументУУ) КАК ДокументУУ,
	//|	ВТ_НеПустые.ДокументБУ КАК ДокументБУ,
	//|	ВТ_НеПустые.ДатаОбработки КАК ДатаОбработки
	//|ПОМЕСТИТЬ Вт_Группировка
	//|ИЗ
	//|	ВТ_НеПустые КАК ВТ_НеПустые
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ВТ_НеПустые.ДокументБУ,
	//|	ВТ_НеПустые.ДатаОбработки
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	Вт_Группировка.ДокументБУ КАК ДокументБУ,
	//|	МАКСИМУМ(Вт_Группировка.ДатаОбработки) КАК ДатаОбработки
	//|ПОМЕСТИТЬ Вт_Группировка_Итоговая
	//|ИЗ
	//|	Вт_Группировка КАК Вт_Группировка
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	Вт_Группировка.ДокументБУ
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	Вт_Группировка_Итоговая.ДокументБУ КАК ДокументБУ,
	//|	МАКСИМУМ(Вт_Группировка.ДокументУУ) КАК ДокументУУ
	//|ПОМЕСТИТЬ ВТ_Итоговая
	//|ИЗ
	//|	Вт_Группировка_Итоговая КАК Вт_Группировка_Итоговая
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Вт_Группировка КАК Вт_Группировка
	//|		ПО Вт_Группировка_Итоговая.ДокументБУ = Вт_Группировка.ДокументБУ
	//|			И Вт_Группировка_Итоговая.ДатаОбработки = Вт_Группировка.ДатаОбработки
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	Вт_Группировка_Итоговая.ДокументБУ
	//|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ДокументБУ
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	ВТ_Итоговая.ДокументУУ КАК ДокументУУ
	//|ПОМЕСТИТЬ ВТ_ДокументыРеализации
	//|ИЗ
	//|	ВТ_Итоговая КАК ВТ_Итоговая
	//|
	//|ОБЪЕДИНИТЬ
	//|
	//|ВЫБРАТЬ
	//|	УЧ_Реализация.Ссылка
	//|ИЗ
	//|	Документ.УЧ_Реализация КАК УЧ_Реализация
	//|ГДЕ
	//|	УЧ_Реализация.ДокОснование = &Заказ
	//|	И НЕ УЧ_Реализация.ПометкаУдаления
	//|	И УЧ_Реализация.Проведен
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	УЧ_РеализацияТовары.Номенклатура КАК Номенклатура,
	//|	УЧ_РеализацияТовары.Ссылка КАК Ссылка
	//|ПОМЕСТИТЬ ВТ_НоменклатураДокумент
	//|ИЗ
	//|	Документ.УЧ_Реализация.Товары КАК УЧ_РеализацияТовары
	//|ГДЕ
	//|	УЧ_РеализацияТовары.Ссылка В
	//|			(ВЫБРАТЬ
	//|				ВТ_ДокументыРеализации.ДокументУУ КАК ДокументУУ
	//|			ИЗ
	//|				ВТ_ДокументыРеализации КАК ВТ_ДокументыРеализации)
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	УЧ_РеализацияТовары.Номенклатура,
	//|	УЧ_РеализацияТовары.Ссылка
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	УЧ_РеализацияТовары.Номенклатура КАК Номенклатура,
	//|	СУММА(УЧ_РеализацияТовары.Количество) КАК Количество,
	//|	ВЫБОР
	//|		КОГДА УЧ_РеализацияТовары.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	//|			ТОГДА УЧ_РеализацияТовары.Ссылка.Склад
	//|		ИНАЧЕ УЧ_РеализацияТовары.Склад
	//|	КОНЕЦ КАК Склад
	//|ПОМЕСТИТЬ ВТ_Отгружено
	//|ИЗ
	//|	Документ.УЧ_Реализация.Товары КАК УЧ_РеализацияТовары
	//|ГДЕ
	//|	УЧ_РеализацияТовары.Ссылка В
	//|			(ВЫБРАТЬ
	//|				ВТ_ДокументыРеализации.ДокументУУ КАК ДокументУУ
	//|			ИЗ
	//|				ВТ_ДокументыРеализации КАК ВТ_ДокументыРеализации)
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	УЧ_РеализацияТовары.Номенклатура,
	//|	ВЫБОР
	//|		КОГДА УЧ_РеализацияТовары.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	//|			ТОГДА УЧ_РеализацияТовары.Ссылка.Склад
	//|		ИНАЧЕ УЧ_РеализацияТовары.Склад
	//|	КОНЕЦ
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ЗаказКлиентаТабличнаяЧасть.Номенклатура КАК Номенклатура,
	//|	ВЫБОР
	//|		КОГДА ЗаказКлиентаТабличнаяЧасть.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	//|			ТОГДА ЗаказКлиентаТабличнаяЧасть.Ссылка.Склад
	//|		ИНАЧЕ ЗаказКлиентаТабличнаяЧасть.Склад
	//|	КОНЕЦ КАК Склад,
	//|	СУММА(ЗаказКлиентаТабличнаяЧасть.Забронировано) КАК Забронировано
	//|ПОМЕСТИТЬ ВТТабличнаяЧастьЗаказКлиента
	//|ИЗ
	//|	Документ.ЗаказКлиента.ТабличнаяЧасть КАК ЗаказКлиентаТабличнаяЧасть
	//|ГДЕ
	//|	ЗаказКлиентаТабличнаяЧасть.Ссылка = &Заказ
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ЗаказКлиентаТабличнаяЧасть.Номенклатура,
	//|	ВЫБОР
	//|		КОГДА ЗаказКлиентаТабличнаяЧасть.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	//|			ТОГДА ЗаказКлиентаТабличнаяЧасть.Ссылка.Склад
	//|		ИНАЧЕ ЗаказКлиентаТабличнаяЧасть.Склад
	//|	КОНЕЦ
	//|
	//|ИМЕЮЩИЕ
	//|	СУММА(ЗаказКлиентаТабличнаяЧасть.Забронировано) > 0
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТТабличнаяЧастьЗаказКлиента.Номенклатура КАК Номенклатура,
	//|	ВТТабличнаяЧастьЗаказКлиента.Склад КАК Склад,
	//|	ВТТабличнаяЧастьЗаказКлиента.Забронировано - ЕСТЬNULL(ВТ_Отгружено.Количество, 0) КАК Забронировать
	//|ИЗ
	//|	ВТТабличнаяЧастьЗаказКлиента КАК ВТТабличнаяЧастьЗаказКлиента
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Отгружено КАК ВТ_Отгружено
	//|		ПО ВТТабличнаяЧастьЗаказКлиента.Номенклатура = ВТ_Отгружено.Номенклатура
	//|			И ВТТабличнаяЧастьЗаказКлиента.Склад = ВТ_Отгружено.Склад";
	//		
	//		ЗапросТЧ.УстановитьПараметр("Заказ", Ссылка);
	//		ЗапросТЧ.УстановитьПараметр("Предприятие", Предприятие);
	//		РезультатЗапросаТЧ = ЗапросТЧ.Выполнить();
	//		
	//		ВыборкаТЧ = РезультатЗапросаТЧ.Выбрать();
	//		
	//		Пока ВыборкаТЧ.Следующий() Цикл
	//			Если ВыборкаТЧ.ЗабронированоСУчетомОтгрузки > 0 Тогда
	//				ДвижениеБронирование = Движения.БронированиеТоваров.Добавить();
	//				ДвижениеБронирование.Документ = Ссылка;
	//				ДвижениеБронирование.Номенклатура = ВыборкаТЧ.Номенклатура;
	//				ДвижениеБронирование.Склад = ВыборкаТЧ.Склад;
	//				ДвижениеБронирование.Количество = ВыборкаТЧ.ЗабронированоСУчетомОтгрузки; 
	//				ДвижениеБронирование.Подразделение = Подразделение;
	//				ДвижениеБронирование.Предприятие = Предприятие;
	//			КонецЕсли;
	//		КонецЦикла;
	//	КонецЕсли;
	//КонецЕсли;
	
	//{{__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	ВозможноЧастичноеИсполнениеЗаказов = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("ВозможноЧастичноеИсполнениеЗаказов");
	
	СценарийФакт = Справочники.СценарииПланирования.СценарийФакт(); 

	// регистр Учетный 
	Движения.Учетный.Записывать = Истина;
	
	СчетРезервов = ПланыСчетов.Учетный.СчетЗАК();
	УчетПоПодразделениям = СчетРезервов.УчетПоПодразделениям;
	
	Если Не ЗначениеЗаполнено(СчетРезервов) Тогда
		Возврат;	
	КонецЕсли;
	
	ТекДата = ?(ДатаПоступления = Дата('00010101'), Дата, ДатаПоступления); 
		
	Если ВозможноЧастичноеИсполнениеЗаказов ИЛИ (Не ЗначениеЗаполнено(Статус) ИЛИ Статус = Перечисления.СтатусыЗаказовКлиентов.Новый Или Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке) Тогда
		Для Каждого ТекСтрокаТабличнаяЧасть Из ТабличнаяЧасть Цикл
			
			//заказ поставщика
			Если ВидОперации = Перечисления.ВидыЗаказов.ВозвратБрака Тогда
				Движение = Движения.Учетный.Добавить();
				Движение.СчетДт = СчетРезервов;
				Движение.Период = ТекДата;
				Движение.Предприятия = Предприятие;
				Если УчетПоПодразделениям Тогда
					Движение.ПодразделениеДт = Подразделение;
				КонецЕсли;
				Движение.СценарийПлана = СценарийФакт;
				//Движение.Сумма = ТекСтрокаТабличнаяЧасть.Сумма;
				Движение.КоличествоДт = ТекСтрокаТабличнаяЧасть.Количество;
				Движение.Содержание = Комментарий;
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт, Движение.СчетДт, 1, ТекСтрокаТабличнаяЧасть.Номенклатура);
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт, Движение.СчетДт, 2, ТекСтрокаТабличнаяЧасть.Склад);
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт, Движение.СчетДт, 3, Ссылка);
			Иначе	
				Движение = Движения.Учетный.Добавить();
				Движение.СчетКт = СчетРезервов;
				Движение.Период = ТекДата;
				Движение.Предприятия = Предприятие;
				Если УчетПоПодразделениям Тогда
					Движение.ПодразделениеКт = Подразделение;
				КонецЕсли;
				Движение.СценарийПлана = СценарийФакт;
				//Движение.Сумма = ТекСтрокаТабличнаяЧасть.Сумма;
				Движение.КоличествоКт = ТекСтрокаТабличнаяЧасть.Количество;
				Движение.Содержание = Комментарий;
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, Движение.СчетКт, 1, ТекСтрокаТабличнаяЧасть.Номенклатура);
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, Движение.СчетКт, 2, ТекСтрокаТабличнаяЧасть.Склад);
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, Движение.СчетКт, 3, Ссылка);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ВозможноЧастичноеИсполнениеЗаказов И (Статус = Перечисления.СтатусыЗаказовКлиентов.Отгружен Или Статус = Перечисления.СтатусыЗаказовКлиентов.ОтгруженНаТранзит Или Статус = Перечисления.СтатусыЗаказовКлиентов.Отменен) Тогда
			Движения.Записать();
			
			Движения.Учетный.Записывать = Истина;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	УчетныйОстатки.Счет КАК Счет,
			               |	УчетныйОстатки.Субконто1 КАК Субконто1,
			               |	УчетныйОстатки.Субконто2 КАК Субконто2,
			               |	УчетныйОстатки.Субконто3 КАК Субконто3,
			               |	УчетныйОстатки.КоличествоОстаток КАК КоличествоОстаток,
			               |	УчетныйОстатки.Подразделение КАК Подразделение
			               |ИЗ
			               |	РегистрБухгалтерии.Учетный.Остатки(, Счет = &СчетРезервов, , Субконто3 = &Ссыдка) КАК УчетныйОстатки";
			
			Запрос.УстановитьПараметр("СчетРезервов", СчетРезервов);
			Запрос.УстановитьПараметр("Ссыдка", Ссылка);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Движение = Движения.Учетный.Добавить();
				Движение.СчетКт = СчетРезервов;
				Движение.Период = ТекДата;
				Движение.Предприятия = Предприятие;
				Если УчетПоПодразделениям Тогда
					Движение.ПодразделениеКт = Подразделение;
				КонецЕсли;
				Движение.СценарийПлана = СценарийФакт;
				//Движение.Сумма = ТекСтрокаТабличнаяЧасть.Сумма;
				Движение.КоличествоКт = Выборка.КоличествоОстаток;
				Движение.Содержание = "закрытие заказа по отгрузке/отмене";
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, Движение.СчетКт, 1, Выборка.Субконто1);
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, Движение.СчетКт, 2, Выборка.Субконто2);
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, Движение.СчетКт, 3, Выборка.Субконто3);	
			КонецЦикла;
			Движения.Записать();
			
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)

	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ВидОперации") Тогда
		ВидОперации = ДанныеЗаполнения.ВидОперации;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.КоммерческоеПредложение") Тогда
		// Заполнение шапки
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения,,"Проведен, Номер, Дата");
		
		ДокОснование 	= ДанныеЗаполнения.Ссылка;
		УчитыватьНДС 	= НЕ ДанныеЗаполнения.ДокументБезНДС;
		СуммаВключаетНДС = ДанныеЗаполнения.СуммаВключаетНДС;
		Валюта = ДанныеЗаполнения.ВалютаДокумента;
		Курс = ДанныеЗаполнения.КурсВзаиморасчетов;
		ФлагВалюты = Истина;
		
		Автор = ПараметрыСеанса.ТекущийПользователь;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Предприятия.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Предприятия КАК Предприятия
		|ГДЕ
		|	Предприятия.ОсновнаяОрганизация = &Организация";
		
		Запрос.УстановитьПараметр("Организация", Организация);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Предприятие = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
		
		Договор = сабОперОбщегоНазначения.ПолучитьДоговорКонтрагентаПоУмолчанию(Контрагент,Организация,Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком,Предприятие).Договор;
		
		ТабличнаяЧасть.Очистить(); 
		
		Для Каждого ТекСтрокаТовары Из ДанныеЗаполнения.Товары Цикл
			
			Если ДанныеЗаполнения.НомерВерсии <> ТекСтрокаТовары.НомерВерсии Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			НоваяСтрока.Номенклатура = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.КоличествоУпаковок = ТекСтрокаТовары.Количество;
			
			АльтернативнаяФорма = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("АльтернативнаяФормаЗаказов");
			//Установим единицу измерения по умолчанию
			Если АльтернативнаяФорма Тогда
				Если ЗначениеЗаполнено(ТекСтрокаТовары.Номенклатура) Тогда
					НоваяСтрока.ЕдиницаИзмерения = БюджетныйНаСервере.ВернутьРеквизиты(ТекСтрокаТовары.Номенклатура, "ЕдиницаИзмерения").ЕдиницаИзмерения; 
				КонецЕсли;
			Иначе
				НоваяСтрока.ЕдиницаИзмерения = ПолучитьЕдИзмНоменклатуры(ТекСтрокаТовары.Номенклатура);
			КонецЕсли;
			
			Если ТипЗнч(НоваяСтрока.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
				СтруктураВозврата = ПолучитьКоличествоВУпаковкеПоУмолчаниюДляНоменклатуры(НоваяСтрока.Номенклатура);
				КоэффициентПересчетаУпаковок = СтруктураВозврата.Коэффициент; 
			Иначе
				КоэффициентПересчетаУпаковок = ПолучитьКоэффициентПересчетаУпаковок(НоваяСтрока.Номенклатура, НоваяСтрока.ЕдиницаИзмерения);
			КонецЕсли;

			
			НоваяСтрока.Количество = НоваяСтрока.КоличествоУпаковок * КоэффициентПересчетаУпаковок;
			НоваяСтрока.Цена = ТекСтрокаТовары.Цена-ТекСтрокаТовары.Цена*ТекСтрокаТовары.ПроцентСкидки/100;
			НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрокаТовары.СтавкаНДС);
			
			Если ДанныеЗаполнения.СуммаСкидки <> 0 Тогда
				
				Скидка = ДанныеЗаполнения.СуммаСкидки/(ДанныеЗаполнения.СуммаСкидки+ДанныеЗаполнения.СуммаДокумента);
								
				Для Каждого Стр Из ТабличнаяЧасть Цикл
					Стр.Цена = Стр.Цена-Стр.Цена*Скидка;					
				КонецЦикла; 
			КонецЕсли;
			
			РассчитатьСуммуТовары(НоваяСтрока);			
			
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	Статус = Перечисления.СтатусыЗаказовКлиентов.Новый;
	СтатусОплаты = Перечисления.СтатусыОплатыЗаказовКлиентов.НеОплачен;
	Для каждого строкаТ из ЭтотОбъект.ТабличнаяЧасть Цикл
		НовыйГуид = Новый УникальныйИдентификатор; 
		Для каждого строкаВ из ЭтотОбъект.ВозвратнаяТара Цикл
			НайденныеСтроки = ЭтотОбъект.ТабличнаяЧасть.НайтиСтроки(Новый Структура("ГУИДСтроки", строкаВ.ГУИДСтроки));
			СтрокаВ.ГУИДСтроки = НовыйГуид;
		КонецЦикла;
		строкаТ.ГУИДСтроки = НовыйГуид;
		//Если Не ЗначениеЗаполнено(строкаТ.ЕдиницаИзмерения) Тогда
		//	строкаТ.ЕдиницаИзмерения = строкаТ.Номенклатура.ЕдиницаИзмерения;
		//КонецЕсли;
		
		//обновление цены
		УстановитьЗависимыеДанныеВТЧ(строкаТ);
		РассчитатьСуммуТовары(строкаТ);
		
		Если Не строкаТ.КоличествоУпаковок Тогда
			строкаТ.КоличествоУпаковок = строкаТ.Количество;
		КонецЕсли;
		
		//ЕслиНастройкаБронированияВключена
		строкаТ.Забронировано = 0;
		
	КонецЦикла;
	
	ДатаДоставки = КонецДня(ТекущаяДата()) + 1*24*60*60;
	
	Комментарий = "";
	ЗаданиеВодителю = "";
	ЗаданиеСкладу = "";
	
	Если ЗначениеЗаполнено(ПодразделениеКонтрагента) Тогда
		РеквыОбъекта = БюджетныйНаСервере.ВернутьРеквизиты(ПодразделениеКонтрагента, "Адрес, Ответственный, Ответственный.Телефон, ДатаДоставки, ДатаДоставкиДо, МаршрутДоставки, ВремяПоДнямНеделиПереключатель"); 
		АдресДоставки = РеквыОбъекта.Адрес;
		МаршрутДоставки = РеквыОбъекта.МаршрутДоставки;
		МенеджерКонтрагента = РеквыОбъекта.Ответственный;
		Телефон = РеквыОбъекта.ОтветственныйТелефон;
		Если РеквыОбъекта.ВремяПоДнямНеделиПереключатель Тогда
        	ЗаполнитьВремяДоставкиПоДнямНедели();
		Иначе
			ДатаДоставки = НачалоДня(ДатаДоставки) + (РеквыОбъекта.ДатаДоставки - НачалоДня(РеквыОбъекта.ДатаДоставки));
			ДатаДоставкиДо = НачалоДня(ДатаДоставки) + (РеквыОбъекта.ДатаДоставкиДо - НачалоДня(РеквыОбъекта.ДатаДоставкиДо));  
		КонецЕсли;	
	Иначе
		АдресДоставки = ""; 
		ДатаДоставки = НачалоДня(ДатаДоставки) + (ОбъектКопирования.ДатаДоставки - НачалоДня(ОбъектКопирования.ДатаДоставки));
		ДатаДоставкиДо = НачалоДня(ДатаДоставки) + (ОбъектКопирования.ДатаДоставкиДо - НачалоДня(ОбъектКопирования.ДатаДоставкиДо));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОтветственныеСрезПоследних.Ответственный КАК Ответственный
	|ИЗ
	|	РегистрСведений.Ответственные.СрезПоследних(&ДатаНа, Контрагент = &Контрагент) КАК ОтветственныеСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаНа", ТекущаяДата());
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Ответственный = Выборка.Ответственный;	
	КонецЦикла;
	
	//всегда берем по-умолчанию способ доставки
	ТекСпособДоставки = Справочники.сабМониторВнедрения.НайтиПоНаименованию("СпособДоставкиПоУмолчанию", Истина).Значение;
	СпособДоставки = ?(ЗначениеЗаполнено(ТекСпособДоставки), ТекСпособДоставки, СпособДоставки); 
		
	БезвозмезднаяПередача = Ложь;
	
КонецПроцедуры

Процедура ЗаполнитьВремяДоставкиПоДнямНедели()
	
		РеквыОбъекта = БюджетныйНаСервере.ВернутьРеквизиты(ПодразделениеКонтрагента, "ПонедельникДатаДоставки, ПонедельникДатаДоставкиДо, 
		|ВторникДатаДоставки, ВторникДатаДоставкиДо, СредаДатаДоставки, СредаДатаДоставкиДо,ЧетвергДатаДоставки,ЧетвергДатаДоставкиДо,
		|ПятницаДатаДоставки,ПятницаДатаДоставкиДо,СубботаДатаДоставки,СубботаДатаДоставкиДо,ВоскресеньеДатаДоставки,ВоскресеньеДатаДоставкиДо");
		Если ЗначениеЗаполнено(ДатаДоставки) Тогда
			ДеньНеделиДатыДоставки = ДеньНедели(ДатаДоставки);
			Если ДеньНеделиДатыДоставки = 1 Тогда
				ДатаДоставки = НачалоДня(ДатаДоставки) + (РеквыОбъекта.ПонедельникДатаДоставки - НачалоДня(РеквыОбъекта.ПонедельникДатаДоставки));
				ДатаДоставкиДо = НачалоДня(ДатаДоставки) + (РеквыОбъекта.ПонедельникДатаДоставкиДо - НачалоДня(РеквыОбъекта.ПонедельникДатаДоставкиДо)); 
			ИначеЕсли ДеньНеделиДатыДоставки = 2 Тогда
				ДатаДоставки = НачалоДня(ДатаДоставки) + (РеквыОбъекта.ВторникДатаДоставки - НачалоДня(РеквыОбъекта.ВторникДатаДоставки));
				ДатаДоставкиДо = НачалоДня(ДатаДоставки) + (РеквыОбъекта.ВторникДатаДоставкиДо - НачалоДня(РеквыОбъекта.ВторникДатаДоставкиДо)); 
			ИначеЕсли ДеньНеделиДатыДоставки = 3 Тогда
				ДатаДоставки = НачалоДня(ДатаДоставки) + (РеквыОбъекта.СредаДатаДоставки - НачалоДня(РеквыОбъекта.СредаДатаДоставки));
				ДатаДоставкиДо = НачалоДня(ДатаДоставки) + (РеквыОбъекта.СредаДатаДоставкиДо - НачалоДня(РеквыОбъекта.СредаДатаДоставкиДо));
			ИначеЕсли ДеньНеделиДатыДоставки = 4 Тогда
				ДатаДоставки = НачалоДня(ДатаДоставки) + (РеквыОбъекта.ЧетвергДатаДоставки - НачалоДня(РеквыОбъекта.ЧетвергДатаДоставки));
				ДатаДоставкиДо = НачалоДня(ДатаДоставки) + (РеквыОбъекта.ЧетвергДатаДоставкиДо - НачалоДня(РеквыОбъекта.ЧетвергДатаДоставкиДо));
			ИначеЕсли ДеньНеделиДатыДоставки = 5 Тогда
				ДатаДоставки = НачалоДня(ДатаДоставки) + (РеквыОбъекта.ПятницаДатаДоставки - НачалоДня(РеквыОбъекта.ПятницаДатаДоставки));
				ДатаДоставкиДо = НачалоДня(ДатаДоставки) + (РеквыОбъекта.ПятницаДатаДоставкиДо - НачалоДня(РеквыОбъекта.ПятницаДатаДоставкиДо));
			ИначеЕсли ДеньНеделиДатыДоставки = 6 Тогда
				ДатаДоставки = НачалоДня(ДатаДоставки) + (РеквыОбъекта.СубботаДатаДоставки - НачалоДня(РеквыОбъекта.СубботаДатаДоставки));
				ДатаДоставкиДо = НачалоДня(ДатаДоставки) + (РеквыОбъекта.СубботаДатаДоставкиДо - НачалоДня(РеквыОбъекта.СубботаДатаДоставкиДо));
			ИначеЕсли ДеньНеделиДатыДоставки = 7 Тогда
				ДатаДоставки = НачалоДня(ДатаДоставки) + (РеквыОбъекта.ВоскресеньеДатаДоставки - НачалоДня(РеквыОбъекта.ВоскресеньеДатаДоставки));
				ДатаДоставкиДо = НачалоДня(ДатаДоставки) + (РеквыОбъекта.ВоскресеньеДатаДоставкиДо - НачалоДня(РеквыОбъекта.ВоскресеньеДатаДоставкиДо));
			КонецЕсли;
		КонецЕсли;
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	сабИспользоватьСквознуюНумерациюПоследовательностиДокументовПоЗаказу = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("сабИспользоватьСквознуюНумерациюПоследовательностиДокументовПоЗаказу");
	
	Если сабИспользоватьСквознуюНумерациюПоследовательностиДокументовПоЗаказу Тогда
		Префикс = "БУ";
	Иначе
		БюджетныйНаСервере.ПриУстановкеНовогоНомераПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьСуммуТовары(ТекДанные = Неопределено)
	
	Если Не ТекДанные = Неопределено Тогда
		ТекДанные.Сумма = ТекДанные.Количество * ТекДанные.Цена;
		//ТекДанные.СуммаОтгрузки = ТекДанные.Количество * ТекДанные.Цена;
		
		ТекРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.СтавкаНДС, "Ставка");
		Если НЕ ТекРеквизиты = Неопределено Тогда
			ТекДанные.СуммаНДС = ТекДанные.Сумма / ((100+ТекРеквизиты.Ставка)/100) * (ТекРеквизиты.Ставка/100);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

Процедура УстановитьЗависимыеДанныеВТЧ(ТекДанные)
	
	ЦенаКЗаполнению = РассчитатьЦену(ТекДанные.Номенклатура, Контрагент, Предприятие, Подразделение, ?(ЗначениеЗаполнено(ДатаПоступления), ДатаПоступления, ТекущаяДата()), Договор);
		ТекДанные.Цена = ЦенаКЗаполнению;
	
	//Установим НДС и артикул
	Если ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
		ТекРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.Номенклатура, "СтавкаНДС, Код, Счет10, ВидСтавкиНДС, ЕдиницаИзмерения", Ложь);
		ТекДанные.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвВидовСтавокНДСБУХУУ().Получить(ТекРеквизиты.ВидСтавкиНДС);
		Если Не ЗначениеЗаполнено(ТекДанные.ЕдиницаИзмерения) Тогда
			ТекДанные.ЕдиницаИзмерения = ТекРеквизиты.ЕдиницаИзмерения;
		КонецЕсли;
		//ТекДанные.Счет = ТекРеквизиты.Счет10;
	КонецЕсли;
	
КонецПроцедуры

Функция РассчитатьЦену(Номенклатура, Контрагент, Предприятие, Подразделение, Дата, Договор)
	
	Если Не ЗначениеЗаполнено(Договор.ТипЦен) Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Период, Номенклатура = &Номенклатура) КАК ЦеныНоменклатурыСрезПоследних
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦенНоменклатуры.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЦеныНоменклатурыСрезПоследних.ТипЦен = &ТипЦен
	|		КОНЕЦ";
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	//Запрос.УстановитьПараметр("Предприятие", Предприятие);
	//Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ТипЦен", Договор.ТипЦен);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Цена;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции	

Функция ПолучитьЕдИзмНоменклатуры(Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковкиНоменклатуры.Упаковка
	|ИЗ
	|	РегистрСведений.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|ГДЕ
	|	УпаковкиНоменклатуры.Номенклатура = &Номенклатура
	|	И УпаковкиНоменклатуры.ОсновнаяУпаковка";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Упаковка;		
	КонецЦикла;	
	
	Возврат Номенклатура.ЕдиницаИзмерения;	
	
КонецФункции

Функция ПолучитьКоэффициентПересчетаУпаковок(Номенклатура, ЕдиницаИзмерения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковкиНоменклатуры.Коэффициент
	|ИЗ
	|	РегистрСведений.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|ГДЕ
	|	УпаковкиНоменклатуры.Номенклатура = &Номенклатура
	|	И УпаковкиНоменклатуры.Упаковка = &Упаковка
	|	И УпаковкиНоменклатуры.ЕдиницаИзмерения = &ЕдиницаИзмерения";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Упаковка", ЕдиницаИзмерения);
	Запрос.УстановитьПараметр("ЕдиницаИзмерения", Номенклатура.ЕдиницаИзмерения);
	
	Выборка = запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Коэффициент;		
	КонецЦикла;
	
	Возврат 1;
	
КонецФункции

Функция ПолучитьКоличествоВУпаковкеПоУмолчаниюДляНоменклатуры(Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковкиНоменклатуры.Коэффициент КАК Коэффициент,
	|	УпаковкиНоменклатуры.ОсновнаяУпаковка КАК ОсновнаяУпаковка,
	|	УпаковкиНоменклатуры.Упаковка.Представление КАК Упаковка
	|ИЗ
	|	РегистрСведений.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|ГДЕ
	|	УпаковкиНоменклатуры.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	СтруктураВозврата = Новый Структура("Упаковка,Коэффициент");
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Количество() > 1 Тогда
		Пока Выборка.Следующий() Цикл
			Если Выборка.ОсновнаяУпаковка Тогда
				СтруктураВозврата.Упаковка = Выборка.Упаковка;
				СтруктураВозврата.Коэффициент = Выборка.Коэффициент;
				Возврат СтруктураВозврата; 
			КонецЕсли;
		КонецЦикла;
		Выборка.Сбросить();
		Выборка.Следующий(); 
		СтруктураВозврата.Упаковка = Выборка.Упаковка;
		СтруктураВозврата.Коэффициент = Выборка.Коэффициент;
		Возврат СтруктураВозврата; 
	Иначе
		Если Выборка.Следующий() Тогда
			СтруктураВозврата.Упаковка = Выборка.Упаковка;
			СтруктураВозврата.Коэффициент = Выборка.Коэффициент;
			Возврат СтруктураВозврата; 
		КонецЕсли;
	КонецЕсли; 
	СтруктураВозврата.Упаковка = "уп.";
	СтруктураВозврата.Коэффициент = 1;
	Возврат СтруктураВозврата; 
	
КонецФункции 

Процедура ЗаполнитьДвиженияБронированиеТоваров(ДокументРеализацииУпр = Неопределено, ЭтоОтменаПроведения = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	//ЕслиНастройкаБронированияВключена
	Если Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройкиКонстанты("сабБронированиеТоваровВЗаказах") Тогда
		Если Не (Статус = Перечисления.СтатусыЗаказовКлиентов.Отгружен Или Статус = Перечисления.СтатусыЗаказовКлиентов.Отменен) Тогда
			Если ЭтоОтменаПроведения Тогда 
				//Восстановление бронирования при отмене проведения реализации
				МассивРеализации = Новый Массив;
				МассивРеализации.Добавить(ДокументРеализацииУпр);
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	УЧ_РеализацияТовары.Номенклатура КАК Номенклатура,
				|	СУММА(УЧ_РеализацияТовары.Количество) КАК Количество,
				|	ВЫБОР
				|		КОГДА УЧ_РеализацияТовары.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
				|			ТОГДА УЧ_РеализацияТовары.Ссылка.Склад
				|		ИНАЧЕ УЧ_РеализацияТовары.Склад
				|	КОНЕЦ КАК Склад
				|ПОМЕСТИТЬ ВТ_Отгружено
				|ИЗ
				|	Документ.УЧ_Реализация.Товары КАК УЧ_РеализацияТовары
				|ГДЕ
				|	УЧ_РеализацияТовары.Ссылка В(&МассивРеализации)
				|	И УЧ_РеализацияТовары.Ссылка.Предприятие = &Предприятие
				|
				|СГРУППИРОВАТЬ ПО
				|	УЧ_РеализацияТовары.Номенклатура,
				|	ВЫБОР
				|		КОГДА УЧ_РеализацияТовары.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
				|			ТОГДА УЧ_РеализацияТовары.Ссылка.Склад
				|		ИНАЧЕ УЧ_РеализацияТовары.Склад
				|	КОНЕЦ
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ЗаказКлиентаТабличнаяЧасть.Номенклатура КАК Номенклатура,
				|	ВЫБОР
				|		КОГДА ЗаказКлиентаТабличнаяЧасть.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
				|			ТОГДА ЗаказКлиентаТабличнаяЧасть.Ссылка.Склад
				|		ИНАЧЕ ЗаказКлиентаТабличнаяЧасть.Склад
				|	КОНЕЦ КАК Склад,
				|	СУММА(ЗаказКлиентаТабличнаяЧасть.Забронировано) КАК Забронировано,
				|	МИНИМУМ(ЗаказКлиентаТабличнаяЧасть.НомерСтроки) КАК НомерСтроки
				|ПОМЕСТИТЬ ВТТабличнаяЧастьЗаказКлиента
				|ИЗ
				|	Документ.ЗаказКлиента.ТабличнаяЧасть КАК ЗаказКлиентаТабличнаяЧасть
				|ГДЕ
				|	ЗаказКлиентаТабличнаяЧасть.Ссылка = &Заказ
				|
				|СГРУППИРОВАТЬ ПО
				|	ЗаказКлиентаТабличнаяЧасть.Номенклатура,
				|	ВЫБОР
				|		КОГДА ЗаказКлиентаТабличнаяЧасть.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
				|			ТОГДА ЗаказКлиентаТабличнаяЧасть.Ссылка.Склад
				|		ИНАЧЕ ЗаказКлиентаТабличнаяЧасть.Склад
				|	КОНЕЦ
				|
				|ИМЕЮЩИЕ
				|	СУММА(ЗаказКлиентаТабличнаяЧасть.Забронировано) > 0
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	БронированиеТоваров.Склад КАК Склад,
				|	БронированиеТоваров.Номенклатура КАК Номенклатура,
				|	СУММА(БронированиеТоваров.Количество) КАК КоличествоЗабронированоРегистр
				|ПОМЕСТИТЬ ВТРегистрБронирования
				|ИЗ
				|	РегистрСведений.БронированиеТоваров КАК БронированиеТоваров
				|ГДЕ
				|	БронированиеТоваров.Активность
				|	И БронированиеТоваров.Предприятие = &Предприятие
				|	И БронированиеТоваров.Документ = &Заказ
				|
				|СГРУППИРОВАТЬ ПО
				|	БронированиеТоваров.Склад,
				|	БронированиеТоваров.Номенклатура
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТТабличнаяЧастьЗаказКлиента.Номенклатура КАК Номенклатура,
				|	ВТТабличнаяЧастьЗаказКлиента.Склад КАК Склад,
				|	ВТТабличнаяЧастьЗаказКлиента.Забронировано КАК ЗабронированоТЧ,
				|	ЕСТЬNULL(ВТ_Отгружено.Количество, 0) КАК ОтгруженоОтмена,
				|	ЕСТЬNULL(ВТРегистрБронирования.КоличествоЗабронированоРегистр, 0) КАК КоличествоЗабронированоРегистр
				|ИЗ
				|	ВТТабличнаяЧастьЗаказКлиента КАК ВТТабличнаяЧастьЗаказКлиента
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Отгружено КАК ВТ_Отгружено
				|		ПО ВТТабличнаяЧастьЗаказКлиента.Номенклатура = ВТ_Отгружено.Номенклатура
				|			И ВТТабличнаяЧастьЗаказКлиента.Склад = ВТ_Отгружено.Склад
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРегистрБронирования КАК ВТРегистрБронирования
				|		ПО ВТТабличнаяЧастьЗаказКлиента.Номенклатура = ВТРегистрБронирования.Номенклатура
				|			И ВТТабличнаяЧастьЗаказКлиента.Склад = ВТРегистрБронирования.Склад
				|
				|УПОРЯДОЧИТЬ ПО
				|	ВТТабличнаяЧастьЗаказКлиента.НомерСтроки";
				
				Запрос.УстановитьПараметр("МассивРеализации", МассивРеализации);
				Запрос.УстановитьПараметр("Заказ", Ссылка);
				Запрос.УстановитьПараметр("Предприятие", Предприятие);
				РезультатЗапроса = Запрос.Выполнить();
				
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
					ДвижениеБронирование = Движения.БронированиеТоваров.Добавить();
					ДвижениеБронирование.Документ = Ссылка;
					ДвижениеБронирование.Номенклатура = Выборка.Номенклатура;
					ДвижениеБронирование.Склад = Выборка.Склад;
					ДвижениеБронирование.Количество = Мин((Выборка.ОтгруженоОтмена + Выборка.КоличествоЗабронированоРегистр),Выборка.ЗабронированоТЧ); 
					ДвижениеБронирование.Подразделение = Подразделение;
					ДвижениеБронирование.Предприятие = Предприятие;
				КонецЦикла;
			Иначе
				Если ЗначениеЗаполнено(ДокументРеализацииУпр) И ДокументРеализацииУпр.Проведен Тогда
					МассивРеализации = Новый Массив;
					МассивРеализации.Добавить(ДокументРеализацииУпр);
				Иначе
					ЗапросДокументУУ = Новый Запрос;
					ЗапросДокументУУ.Текст = 
					"ВЫБРАТЬ
					|	СчетНаОплатуПокупателю.Ссылка КАК Ссылка
					|ПОМЕСТИТЬ ВТ_СчетаНаОплатуПокупателю
					|ИЗ
					|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
					|ГДЕ
					|	СчетНаОплатуПокупателю.Заказ = &Заказ
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	РеализацияТоваровУслуг.Ссылка КАК Ссылка
					|ПОМЕСТИТЬ ВТ_ДокументыБух
					|ИЗ
					|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
					|ГДЕ
					|	(РеализацияТоваровУслуг.Заказ = &Заказ
					|			ИЛИ РеализацияТоваровУслуг.СчетНаОплатуПокупателю В
					|				(ВЫБРАТЬ
					|					ВТ_СчетаНаОплатуПокупателю.Ссылка КАК Ссылка
					|				ИЗ
					|					ВТ_СчетаНаОплатуПокупателю КАК ВТ_СчетаНаОплатуПокупателю))
					|	И НЕ РеализацияТоваровУслуг.ПометкаУдаления
					|	И РеализацияТоваровУслуг.Проведен
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	РозничнаяПродажа.Ссылка
					|ИЗ
					|	Документ.РозничнаяПродажа КАК РозничнаяПродажа
					|ГДЕ
					|	(РозничнаяПродажа.Заказ = &Заказ
					|			ИЛИ РозничнаяПродажа.СчетНаОплатуПокупателю В
					|				(ВЫБРАТЬ
					|					ВТ_СчетаНаОплатуПокупателю.Ссылка КАК Ссылка
					|				ИЗ
					|					ВТ_СчетаНаОплатуПокупателю КАК ВТ_СчетаНаОплатуПокупателю))
					|	И НЕ РозничнаяПродажа.ПометкаУдаления
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	ПередачаТоваров.Ссылка
					|ИЗ
					|	Документ.ПередачаТоваров КАК ПередачаТоваров
					|ГДЕ
					|	ПередачаТоваров.Заказ = &Заказ
					|	И НЕ ПередачаТоваров.ПометкаУдаления
					|	И ПередачаТоваров.Проведен
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	ТребованиеНакладная.Ссылка
					|ИЗ
					|	Документ.ТребованиеНакладная КАК ТребованиеНакладная
					|ГДЕ
					|	ТребованиеНакладная.Заказ = &Заказ
					|	И НЕ ТребованиеНакладная.ПометкаУдаления
					|	И ТребованиеНакладная.Проведен
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	сабОбработкаДокументов.ДокументУУ КАК ДокументУУ,
					|	сабОбработкаДокументов.ДокументБУ КАК ДокументБУ,
					|	сабОбработкаДокументов.ДатаОбработки КАК ДатаОбработки
					|ПОМЕСТИТЬ ВТ_НеПустые
					|ИЗ
					|	РегистрСведений.сабОбработкаДокументов КАК сабОбработкаДокументов
					|ГДЕ
					|	сабОбработкаДокументов.ДокументБУ В
					|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
					|				ВТ_ДокументыБух.Ссылка КАК Ссылка
					|			ИЗ
					|				ВТ_ДокументыБух КАК ВТ_ДокументыБух)
					|	И сабОбработкаДокументов.ДокументУУ.Дата ЕСТЬ НЕ NULL 
					|	И сабОбработкаДокументов.ДокументУУ.Проведен = ИСТИНА
					|
					|СГРУППИРОВАТЬ ПО
					|	сабОбработкаДокументов.ДокументБУ,
					|	сабОбработкаДокументов.ДокументУУ,
					|	сабОбработкаДокументов.ДатаОбработки
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	МАКСИМУМ(ВТ_НеПустые.ДокументУУ) КАК ДокументУУ,
					|	ВТ_НеПустые.ДокументБУ КАК ДокументБУ,
					|	ВТ_НеПустые.ДатаОбработки КАК ДатаОбработки
					|ПОМЕСТИТЬ Вт_Группировка
					|ИЗ
					|	ВТ_НеПустые КАК ВТ_НеПустые
					|
					|СГРУППИРОВАТЬ ПО
					|	ВТ_НеПустые.ДокументБУ,
					|	ВТ_НеПустые.ДатаОбработки
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	Вт_Группировка.ДокументБУ КАК ДокументБУ,
					|	МАКСИМУМ(Вт_Группировка.ДатаОбработки) КАК ДатаОбработки
					|ПОМЕСТИТЬ Вт_Группировка_Итоговая
					|ИЗ
					|	Вт_Группировка КАК Вт_Группировка
					|
					|СГРУППИРОВАТЬ ПО
					|	Вт_Группировка.ДокументБУ
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	Вт_Группировка_Итоговая.ДокументБУ КАК ДокументБУ,
					|	МАКСИМУМ(Вт_Группировка.ДокументУУ) КАК ДокументУУ
					|ПОМЕСТИТЬ ВТ_Итоговая
					|ИЗ
					|	Вт_Группировка_Итоговая КАК Вт_Группировка_Итоговая
					|		ЛЕВОЕ СОЕДИНЕНИЕ Вт_Группировка КАК Вт_Группировка
					|		ПО Вт_Группировка_Итоговая.ДокументБУ = Вт_Группировка.ДокументБУ
					|			И Вт_Группировка_Итоговая.ДатаОбработки = Вт_Группировка.ДатаОбработки
					|
					|СГРУППИРОВАТЬ ПО
					|	Вт_Группировка_Итоговая.ДокументБУ
					|
					|ИНДЕКСИРОВАТЬ ПО
					|	ДокументБУ
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	ВТ_Итоговая.ДокументУУ КАК ДокументУУ
					|ИЗ
					|	ВТ_Итоговая КАК ВТ_Итоговая
					|
					|ОБЪЕДИНИТЬ
					|
					|ВЫБРАТЬ
					|	УЧ_Реализация.Ссылка
					|ИЗ
					|	Документ.УЧ_Реализация КАК УЧ_Реализация
					|ГДЕ
					|	УЧ_Реализация.ДокОснование = &Заказ
					|	И НЕ УЧ_Реализация.ПометкаУдаления
					|	И УЧ_Реализация.Проведен";
					ЗапросДокументУУ.УстановитьПараметр("Заказ", Ссылка);
					РезультатЗапросаДокументУУ = ЗапросДокументУУ.Выполнить();
					ВыборкаДокументУУ = РезультатЗапросаДокументУУ.Выбрать();
					МассивРеализации = Новый Массив;
					Пока ВыборкаДокументУУ.Следующий() Цикл
						МассивРеализации.Добавить(ВыборкаДокументУУ.ДокументУУ);
					КонецЦикла; 
				КонецЕсли;
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	УЧ_РеализацияТовары.Номенклатура КАК Номенклатура,
				|	СУММА(УЧ_РеализацияТовары.Количество) КАК Количество,
				|	ВЫБОР
				|		КОГДА УЧ_РеализацияТовары.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
				|			ТОГДА УЧ_РеализацияТовары.Ссылка.Склад
				|		ИНАЧЕ УЧ_РеализацияТовары.Склад
				|	КОНЕЦ КАК Склад
				|ПОМЕСТИТЬ ВТ_Отгружено
				|ИЗ
				|	Документ.УЧ_Реализация.Товары КАК УЧ_РеализацияТовары
				|ГДЕ
				|	УЧ_РеализацияТовары.Ссылка В(&МассивРеализации)
				|	И УЧ_РеализацияТовары.Ссылка.Предприятие = &Предприятие
				|
				|СГРУППИРОВАТЬ ПО
				|	УЧ_РеализацияТовары.Номенклатура,
				|	ВЫБОР
				|		КОГДА УЧ_РеализацияТовары.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
				|			ТОГДА УЧ_РеализацияТовары.Ссылка.Склад
				|		ИНАЧЕ УЧ_РеализацияТовары.Склад
				|	КОНЕЦ
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ЗаказКлиентаТабличнаяЧасть.Номенклатура КАК Номенклатура,
				|	ВЫБОР
				|		КОГДА ЗаказКлиентаТабличнаяЧасть.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
				|			ТОГДА ЗаказКлиентаТабличнаяЧасть.Ссылка.Склад
				|		ИНАЧЕ ЗаказКлиентаТабличнаяЧасть.Склад
				|	КОНЕЦ КАК Склад,
				|	СУММА(ЗаказКлиентаТабличнаяЧасть.Забронировано) КАК Забронировано,
				|	МИНИМУМ(ЗаказКлиентаТабличнаяЧасть.НомерСтроки) КАК НомерСтроки
				|ПОМЕСТИТЬ ВТТабличнаяЧастьЗаказКлиента
				|ИЗ
				|	Документ.ЗаказКлиента.ТабличнаяЧасть КАК ЗаказКлиентаТабличнаяЧасть
				|ГДЕ
				|	ЗаказКлиентаТабличнаяЧасть.Ссылка = &Заказ
				|
				|СГРУППИРОВАТЬ ПО
				|	ЗаказКлиентаТабличнаяЧасть.Номенклатура,
				|	ВЫБОР
				|		КОГДА ЗаказКлиентаТабличнаяЧасть.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
				|			ТОГДА ЗаказКлиентаТабличнаяЧасть.Ссылка.Склад
				|		ИНАЧЕ ЗаказКлиентаТабличнаяЧасть.Склад
				|	КОНЕЦ
				|
				|ИМЕЮЩИЕ
				|	СУММА(ЗаказКлиентаТабличнаяЧасть.Забронировано) > 0
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТТабличнаяЧастьЗаказКлиента.Номенклатура КАК Номенклатура,
				|	ВТТабличнаяЧастьЗаказКлиента.Склад КАК Склад,
				|	ВТТабличнаяЧастьЗаказКлиента.Забронировано - ЕСТЬNULL(ВТ_Отгружено.Количество, 0) КАК Забронировать
				|ИЗ
				|	ВТТабличнаяЧастьЗаказКлиента КАК ВТТабличнаяЧастьЗаказКлиента
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Отгружено КАК ВТ_Отгружено
				|		ПО ВТТабличнаяЧастьЗаказКлиента.Номенклатура = ВТ_Отгружено.Номенклатура
				|			И ВТТабличнаяЧастьЗаказКлиента.Склад = ВТ_Отгружено.Склад
				|ГДЕ
				|	ВТТабличнаяЧастьЗаказКлиента.Забронировано - ЕСТЬNULL(ВТ_Отгружено.Количество, 0) > 0
				|
				|УПОРЯДОЧИТЬ ПО
				|	ВТТабличнаяЧастьЗаказКлиента.НомерСтроки";
				
				Запрос.УстановитьПараметр("МассивРеализации", МассивРеализации);
				Запрос.УстановитьПараметр("Заказ", Ссылка);
				Запрос.УстановитьПараметр("Предприятие", Предприятие);
				РезультатЗапроса = Запрос.Выполнить();
				
				Выборка = РезультатЗапроса.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					ДвижениеБронирование = Движения.БронированиеТоваров.Добавить();
					ДвижениеБронирование.Документ = Ссылка;
					ДвижениеБронирование.Номенклатура = Выборка.Номенклатура;
					ДвижениеБронирование.Склад = Выборка.Склад;
					ДвижениеБронирование.Количество = Выборка.Забронировать; 
					ДвижениеБронирование.Подразделение = Подразделение;
					ДвижениеБронирование.Предприятие = Предприятие;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Движения.БронированиеТоваров.Записать(Истина);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры
