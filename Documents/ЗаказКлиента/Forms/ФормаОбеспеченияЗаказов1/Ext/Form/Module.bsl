
&НаСервере
Процедура ОбновитьНаСервере()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказКлиентаТабличнаяЧасть.Ссылка КАК ЗаказКлиента,
	               |	ЗаказКлиентаТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	               |	ЗаказКлиентаТабличнаяЧасть.Номенклатура КАК Номенклатура,
	               |	ЗаказКлиентаТабличнаяЧасть.Количество КАК Количество,
	               |	ЗаказКлиентаТабличнаяЧасть.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ЗаказКлиентаТабличнаяЧасть.КоличествоУпаковок КАК КоличествоУпаковок,
	               |	ЗаказКлиентаТабличнаяЧасть.КоличествоВУпаковке КАК КоличествоВУпаковке,
	               |	ЗаказКлиентаТабличнаяЧасть.Кратность КАК Кратность,
	               |	ЗаказКлиентаТабличнаяЧасть.Ссылка.ДатаПоступления КАК ДатаОтгрузки,
	               |	ЗаказКлиентаТабличнаяЧасть.Ссылка.Дата КАК ДатаЗаказа,
	               |	сабДанныеПоставокСрезПоследних.Регистратор.Контрагент КАК Контрагент,
	               |	сабДанныеПоставокСрезПоследних.Регистратор.Договор КАК Договор,
	               |	сабДанныеПоставокСрезПоследних.Период КАК ДатаПоставки,
	               |	сабДанныеПоставокСрезПоследних.Цена КАК ЦенаПоставки,
	               |	сабДанныеПоставокСрезПоследних.Количество КАК КоличествоПоставки,
	               |	сабДанныеПоставокСрезПоследних.Регистратор.Предприятие КАК Предприятие,
	               |	сабДанныеПоставокСрезПоследних.Регистратор.Склад КАК Склад,
	               |	сабДанныеПоставокСрезПоследних.Регистратор.Организация КАК Организация,
	               |	""ЗаказКлиента"" КАК ТипДокумента
	               |ИЗ
	               |	Документ.ЗаказКлиента.ТабличнаяЧасть КАК ЗаказКлиентаТабличнаяЧасть
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.сабДанныеПоставок.СрезПоследних КАК сабДанныеПоставокСрезПоследних
	               |		ПО ЗаказКлиентаТабличнаяЧасть.Ссылка.Предприятие = сабДанныеПоставокСрезПоследних.Предприятие
	               |			И ЗаказКлиентаТабличнаяЧасть.Ссылка.Склад = сабДанныеПоставокСрезПоследних.Склад
	               |			И ЗаказКлиентаТабличнаяЧасть.Номенклатура = сабДанныеПоставокСрезПоследних.Номенклатура
	               |ГДЕ
	               |	НЕ ЗаказКлиентаТабличнаяЧасть.Ссылка.Статус В (&СтатусЗакрыт)
	               |	И ЗаказКлиентаТабличнаяЧасть.Ссылка.ПометкаУдаления = ЛОЖЬ
	               |	И ЗаказКлиентаТабличнаяЧасть.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	               |	И (&Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	               |			ИЛИ сабДанныеПоставокСрезПоследних.Регистратор.Организация = &Организация)
	               |	И (&Предприятие = ЗНАЧЕНИЕ(Справочник.Предприятия.ПустаяСсылка)
	               |			ИЛИ сабДанныеПоставокСрезПоследних.Регистратор.Предприятие = &Предприятие)
	               |	И &УсловиеТипЗаказКлиента
	               |	И ВЫБОР
	               |			КОГДА &Номенклатура = ЗНАЧЕНИЕ(Справочник.номенклатура.ПустаяСсылка)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЗаказКлиентаТабличнаяЧасть.Номенклатура = &Номенклатура
	               |		КОНЕЦ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗаказНаПроизводствоМатериалы.Ссылка,
	               |	ЗаказНаПроизводствоМатериалы.НомерСтроки,
	               |	ЗаказНаПроизводствоМатериалы.Материал,
	               |	ЗаказНаПроизводствоМатериалы.Количество,
	               |	ЗаказНаПроизводствоМатериалы.Материал.ЕдиницаИзмерения,
	               |	ЗаказНаПроизводствоМатериалы.Количество,
	               |	NULL,
	               |	1,
	               |	ЗаказНаПроизводствоМатериалы.Ссылка.ДатаПроизводства,
	               |	ЗаказНаПроизводствоМатериалы.Ссылка.Дата,
	               |	сабДанныеПоставокСрезПоследних.Регистратор.Контрагент,
	               |	сабДанныеПоставокСрезПоследних.Регистратор.Договор,
	               |	сабДанныеПоставокСрезПоследних.Период,
	               |	сабДанныеПоставокСрезПоследних.Цена,
	               |	сабДанныеПоставокСрезПоследних.Количество,
	               |	сабДанныеПоставокСрезПоследних.Регистратор.Предприятие,
	               |	сабДанныеПоставокСрезПоследних.Регистратор.Склад,
	               |	сабДанныеПоставокСрезПоследних.Регистратор.Организация,
	               |	""ЗаказНаПроизводство""
	               |ИЗ
	               |	Документ.ЗаказНаПроизводство.Материалы КАК ЗаказНаПроизводствоМатериалы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.сабДанныеПоставок.СрезПоследних КАК сабДанныеПоставокСрезПоследних
	               |		ПО ЗаказНаПроизводствоМатериалы.Ссылка.Предприятие = сабДанныеПоставокСрезПоследних.Предприятие
	               |			И ЗаказНаПроизводствоМатериалы.Ссылка.Склад = сабДанныеПоставокСрезПоследних.Склад
	               |			И ЗаказНаПроизводствоМатериалы.Материал = сабДанныеПоставокСрезПоследних.Номенклатура
	               |ГДЕ
	               |	НЕ ЗаказНаПроизводствоМатериалы.Ссылка.Статус В (&СтатусЗакрыт)
	               |	И ЗаказНаПроизводствоМатериалы.Ссылка.ПометкаУдаления = ЛОЖЬ
	               |	И ЗаказНаПроизводствоМатериалы.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	               |	И (&Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	               |			ИЛИ сабДанныеПоставокСрезПоследних.Регистратор.Организация = &Организация)
	               |	И (&Предприятие = ЗНАЧЕНИЕ(Справочник.Предприятия.ПустаяСсылка)
	               |			ИЛИ сабДанныеПоставокСрезПоследних.Регистратор.Предприятие = &Предприятие)
	               |	И &УсловиеТипЗаказНаПроизводство
	               |	И ВЫБОР
	               |			КОГДА &Номенклатура = ЗНАЧЕНИЕ(Справочник.номенклатура.ПустаяСсылка)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЗаказНаПроизводствоМатериалы.Материал = &Номенклатура
	               |		КОНЕЦ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаОтгрузки,
	               |	ДатаЗаказа
	               |ИТОГИ ПО ЗаказКлиента
	               |	
	               |АВТОУПОРЯДОЧИВАНИЕ";

	ЗакрытыеСтатусы = Новый Массив;
	ЗакрытыеСтатусы.Добавить(Перечисления.СтатусыЗаказовКлиентов.Отгружен);
	ЗакрытыеСтатусы.Добавить(Перечисления.СтатусыЗаказовКлиентов.Отменен);
	ЗакрытыеСтатусы.Добавить(Перечисления.СтатусыЗаказовНаПроизводство.Отменен);
	ЗакрытыеСтатусы.Добавить(Перечисления.СтатусыЗаказовНаПроизводство.Произведен);
	
	Запрос.УстановитьПараметр("ДатаОтгрузки", НачалоДня(ДатаОтгрузки));
	Запрос.УстановитьПараметр("ДатаНачала", ОтборПериод.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ?(ОтборПериод.ДатаОкончания = Дата('00010101'), КонецГода(ТекущаяДата()),ОтборПериод.ДатаОкончания));
	Запрос.УстановитьПараметр("СтатусЗакрыт", ЗакрытыеСтатусы);
	Запрос.УстановитьПараметр("Номенклатура", ОтборНоменклатура);
	Если ОтборОрганизацияИспользование Тогда
		Запрос.УстановитьПараметр("Организация", ОтборОрганизация);
	Иначе 
		Запрос.УстановитьПараметр("Организация", Справочники.Организации.ПустаяСсылка());
	КонецЕсли;
	Если ОтборОрганизацияИспользование Тогда
		Запрос.УстановитьПараметр("Предприятие", ОтборПредприятие);
	Иначе 
		Запрос.УстановитьПараметр("Предприятие", Справочники.Предприятия.ПустаяСсылка());
	КонецЕсли;
	Если ОтборТипДокументаИспользование = Ложь Или ОтборТипДокумента = 0 Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И &УсловиеТипЗаказКлиента","");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И &УсловиеТипЗаказНаПроизводство","");
	Иначе
		Если ОтборТипДокументаИспользование Тогда 
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеТипЗаказКлиента","ТИПЗНАЧЕНИЯ(ЗаказКлиентаТабличнаяЧасть.Ссылка) = &ТипДокумента");
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеТипЗаказНаПроизводство","ТИПЗНАЧЕНИЯ(ЗаказНаПроизводствоМатериалы.Ссылка) = &ТипДокумента");
			
			Если ОтборТипДокумента = 1 Тогда
				Запрос.УстановитьПараметр("ТипДокумента", Тип("ДокументСсылка.ЗаказКлиента"));
			ИначеЕсли ОтборТипДокумента = 2 Тогда
				Запрос.УстановитьПараметр("ТипДокумента", Тип("ДокументСсылка.ЗаказНаПроизводство"));
			ИначеЕсли ОтборТипДокумента = 3  Тогда
				Запрос.УстановитьПараметр("ТипДокумента", Тип("ДокументСсылка.Д_Бюджет"));				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ВремТЧЗаказы.Очистить();
	ВремТЧЗаказыПоставщикам.Очистить();
	ТаблицаЗаказовИсточник.Очистить();
	МассивСтрокКУдалению = Новый Массив;
	
	Результат = Запрос.Выполнить();
	ВыгрузкаЗаказы = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ЗаказКлиента");
	Пока ВыгрузкаЗаказы.Следующий() Цикл  		
		
		СтрокаЗаказ = ДеревоЗаказов.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗаказ, ВыгрузкаЗаказы);
		СтрокаЗаказ.Позиция = ВыгрузкаЗаказы.ЗаказКлиента;
		СтрокаЗаказ.Уровень = 1;
		
		ВыгрузкаНоменклатура = ВыгрузкаЗаказы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"");
		Пока ВыгрузкаНоменклатура.Следующий() Цикл
			СтрокаНоменклатура = СтрокаЗаказ.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНоменклатура, ВыгрузкаНоменклатура);
			СтрокаНоменклатура.Позиция = ВыгрузкаНоменклатура.Номенклатура;
			СтрокаНоменклатура.Уровень = 2;
			СтрокаНоменклатура.ДатаОтгрузки = Неопределено;
		КонецЦикла;
		
		ЗаполнитьОстаткиИРезервы(СтрокаЗаказ.ЗаказКлиента, Ложь, Неопределено, СтрокаЗаказ.ПолучитьЭлементы());
				
		Если ТолькоНеобеспеченные Тогда
			МассивСтрокКУдалению2 = Новый Массив;
			ТекТЧ = СтрокаЗаказ.ПолучитьЭлементы();
			Для каждого ТекСтрока Из ТекТЧ Цикл
				Если Не ТекСтрока.КоличествоОстаток < 0 Тогда
					МассивСтрокКУдалению2.Добавить(ТекСтрока);
				КонецЕсли;
			КонецЦикла;
			
			Для каждого ТекСтрокаУд Из МассивСтрокКУдалению2 Цикл
				ТекТЧ.Удалить(ТекТЧ.Индекс(ТекСтрокаУд));	
			КонецЦикла;
			
			Если Не ТекТЧ.Количество() Тогда
				МассивСтрокКУдалению.Добавить(СтрокаЗаказ);
			КонецЕсли;
		КонецЕсли;
		
		Для каждого СтрокаДляЗаполненияИсточника Из СтрокаЗаказ.ПолучитьЭлементы() Цикл
		   НоваяСтрокаТЗИсточник = ТаблицаЗаказовИсточник.Добавить();
		   ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗИсточник,СтрокаДляЗаполненияИсточника); 
		   НоваяСтрокаТЗИсточник.ЗаказКлиента = СтрокаЗаказ.ЗаказКлиента;
		   НоваяСтрокаТЗИсточник.ДатаОтгрузки =СтрокаЗаказ.ДатаОтгрузки;
		КонецЦикла;
	
	КонецЦикла;
	
	Для каждого ТекСтрокаУд Из МассивСтрокКУдалению Цикл
		ДеревоЗаказов.ПолучитьЭлементы().Удалить(ДеревоЗаказов.ПолучитьЭлементы().Индекс(ТекСтрокаУд));
	КонецЦикла;
	
	Если ВидИерархии = 1 Тогда
		ПерезаполнитьДеревоПриИзмененииИерархии();
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ПерезаполнитьДеревоПриИзмененииИерархии()
	
	Если ВидИерархии = 1 Тогда
		ДеревоЗаказов.ПолучитьЭлементы().Очистить();
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТаблицаЗаказовИсточник.ЗаказКлиента КАК ЗаказКлиента,
		               |	ТаблицаЗаказовИсточник.КоличествоНаОстатках КАК КоличествоНаОстатках,
		               |	ТаблицаЗаказовИсточник.КоличествоВРезервах КАК КоличествоВРезервах,
		               |	ТаблицаЗаказовИсточник.КоличествоОстаток КАК КоличествоОстаток,
		               |	ТаблицаЗаказовИсточник.КоличествоКПоставке КАК КоличествоКПоставке,
		               |	ТаблицаЗаказовИсточник.Количество КАК Количество,
		               |	ТаблицаЗаказовИсточник.КоличествоУпаковок КАК КоличествоУпаковок,
		               |	ТаблицаЗаказовИсточник.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               |	ТаблицаЗаказовИсточник.Номенклатура КАК Номенклатура,
		               |	ТаблицаЗаказовИсточник.ЗаказПоставщику КАК ЗаказПоставщику,
		               |	ТаблицаЗаказовИсточник.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
		               |	ТаблицаЗаказовИсточник.ДатаОтгрузки КАК ДатаОтгрузки,
		               |	ТаблицаЗаказовИсточник.ДатаЗаказа КАК ДатаЗаказа,
		               |	ТаблицаЗаказовИсточник.Контрагент КАК Контрагент,
		               |	ТаблицаЗаказовИсточник.ЦенаПоставки КАК ЦенаПоставки,
		               |	ТаблицаЗаказовИсточник.КоличествоПоставки КАК КоличествоПоставки,
		               |	ТаблицаЗаказовИсточник.ДатаПоставки КАК ДатаПоставки,
		               |	ТаблицаЗаказовИсточник.Договор КАК Договор,
		               |	ТаблицаЗаказовИсточник.Предприятие КАК Предприятие,
		               |	ТаблицаЗаказовИсточник.Склад КАК Склад,
		               |	ТаблицаЗаказовИсточник.Организация КАК Организация
		               |ПОМЕСТИТЬ ВТИсточник
		               |ИЗ
		               |	&ТаблицаЗаказовИсточник КАК ТаблицаЗаказовИсточник
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТИсточник.ЗаказКлиента КАК ЗаказКлиента,
		               |	ВТИсточник.КоличествоНаОстатках КАК КоличествоНаОстатках,
		               |	ВТИсточник.КоличествоВРезервах КАК КоличествоВРезервах,
		               |	ВТИсточник.КоличествоОстаток КАК КоличествоОстаток,
		               |	ВТИсточник.КоличествоКПоставке КАК КоличествоКПоставке,
		               |	ВТИсточник.Количество КАК Количество,
		               |	ВТИсточник.КоличествоУпаковок КАК КоличествоУпаковок,
		               |	ВТИсточник.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               |	ВТИсточник.Номенклатура КАК Номенклатура,
		               |	ВТИсточник.ЗаказПоставщику КАК ЗаказПоставщику,
		               |	ВТИсточник.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
		               |	ВТИсточник.ДатаОтгрузки КАК ДатаОтгрузки,
		               |	ВТИсточник.ДатаЗаказа КАК ДатаЗаказа,
		               |	ВТИсточник.Контрагент КАК Контрагент,
		               |	ВТИсточник.ЦенаПоставки КАК ЦенаПоставки,
		               |	ВТИсточник.КоличествоПоставки КАК КоличествоПоставки,
		               |	ВТИсточник.ДатаПоставки КАК ДатаПоставки,
		               |	ВТИсточник.Договор КАК Договор,
		               |	ВТИсточник.Предприятие КАК Предприятие,
		               |	ВТИсточник.Склад КАК Склад,
		               |	ВТИсточник.Организация КАК Организация
		               |ИЗ
		               |	ВТИсточник КАК ВТИсточник
		               |ИТОГИ
		               |	МАКСИМУМ(КоличествоНаОстатках),
		               |	МАКСИМУМ(КоличествоОстаток),
		               |	СУММА(Количество)
		               |ПО
		               |	Номенклатура";
		
		Запрос.УстановитьПараметр("ТаблицаЗаказовИсточник",ТаблицаЗаказовИсточник.Выгрузить());
		Результат = Запрос.Выполнить();
		ВыборкаНоменклатура = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНоменклатура.Следующий() Цикл  		
			СтрокаНоменклатура = ДеревоЗаказов.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНоменклатура, ВыборкаНоменклатура);
			СтрокаНоменклатура.Позиция = ВыборкаНоменклатура.Номенклатура;
			СтрокаНоменклатура.Уровень = 1;
			ВыборкаЗаказ = ВыборкаНоменклатура.Выбрать();
			Пока ВыборкаЗаказ.Следующий() Цикл
				СтрокаЗаказ = СтрокаНоменклатура.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЗаказ, ВыборкаЗаказ);
				СтрокаЗаказ.Позиция = ВыборкаЗаказ.ЗаказКлиента;
				СтрокаЗаказ.Уровень = 2;
			КонецЦикла;
		КонецЦикла;
	Иначе
	ДеревоЗаказов.ПолучитьЭлементы().Очистить();
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ТаблицаЗаказовИсточник.ЗаказКлиента КАК ЗаказКлиента,
		|	ТаблицаЗаказовИсточник.КоличествоНаОстатках КАК КоличествоНаОстатках,
		|	ТаблицаЗаказовИсточник.КоличествоВРезервах КАК КоличествоВРезервах,
		|	ТаблицаЗаказовИсточник.КоличествоОстаток КАК КоличествоОстаток,
		|	ТаблицаЗаказовИсточник.КоличествоКПоставке КАК КоличествоКПоставке,
		|	ТаблицаЗаказовИсточник.Количество КАК Количество,
		|	ТаблицаЗаказовИсточник.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ТаблицаЗаказовИсточник.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаЗаказовИсточник.Номенклатура КАК Номенклатура,
		|	ТаблицаЗаказовИсточник.ЗаказПоставщику КАК ЗаказПоставщику,
		|	ТаблицаЗаказовИсточник.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
		|	ТаблицаЗаказовИсточник.ДатаОтгрузки КАК ДатаОтгрузки,
		|	ТаблицаЗаказовИсточник.ДатаЗаказа КАК ДатаЗаказа,
		|	ТаблицаЗаказовИсточник.Контрагент КАК Контрагент,
		|	ТаблицаЗаказовИсточник.ЦенаПоставки КАК ЦенаПоставки,
		|	ТаблицаЗаказовИсточник.КоличествоПоставки КАК КоличествоПоставки,
		|	ТаблицаЗаказовИсточник.ДатаПоставки КАК ДатаПоставки,
		|	ТаблицаЗаказовИсточник.Договор КАК Договор,
		|	ТаблицаЗаказовИсточник.Предприятие КАК Предприятие,
		|	ТаблицаЗаказовИсточник.Склад КАК Склад,
		|	ТаблицаЗаказовИсточник.Организация КАК Организация
		|ПОМЕСТИТЬ ВТИсточник
		|ИЗ
		|	&ТаблицаЗаказовИсточник КАК ТаблицаЗаказовИсточник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТИсточник.ЗаказКлиента КАК ЗаказКлиента,
		|	ВТИсточник.КоличествоНаОстатках КАК КоличествоНаОстатках,
		|	ВТИсточник.КоличествоВРезервах КАК КоличествоВРезервах,
		|	ВТИсточник.КоличествоОстаток КАК КоличествоОстаток,
		|	ВТИсточник.КоличествоКПоставке КАК КоличествоКПоставке,
		|	ВТИсточник.Количество КАК Количество,
		|	ВТИсточник.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ВТИсточник.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВТИсточник.Номенклатура КАК Номенклатура,
		|	ВТИсточник.ЗаказПоставщику КАК ЗаказПоставщику,
		|	ВТИсточник.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
		|	ВТИсточник.ДатаОтгрузки КАК ДатаОтгрузки,
		|	ВТИсточник.ДатаЗаказа КАК ДатаЗаказа,
		|	ВТИсточник.Контрагент КАК Контрагент,
		|	ВТИсточник.ЦенаПоставки КАК ЦенаПоставки,
		|	ВТИсточник.КоличествоПоставки КАК КоличествоПоставки,
		|	ВТИсточник.ДатаПоставки КАК ДатаПоставки,
		|	ВТИсточник.Договор КАК Договор,
		|	ВТИсточник.Предприятие КАК Предприятие,
		|	ВТИсточник.Склад КАК Склад,
		|	ВТИсточник.Организация КАК Организация
		|ИЗ
		|	ВТИсточник КАК ВТИсточник
		|ИТОГИ
		|ПО
		|	ЗаказКлиента";
		
		Запрос.УстановитьПараметр("ТаблицаЗаказовИсточник",ТаблицаЗаказовИсточник.Выгрузить());
		Результат = Запрос.Выполнить();
		ВыборкаЗаказ = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЗаказ.Следующий() Цикл  		
			
			СтрокаЗаказ = ДеревоЗаказов.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗаказ, ВыборкаЗаказ);
			СтрокаЗаказ.Позиция = ВыборкаЗаказ.ЗаказКлиента;
			СтрокаЗаказ.Уровень = 1;
			
			ВыборкаНоменклатура = ВыборкаЗаказ.Выбрать();
			Пока ВыборкаНоменклатура.Следующий() Цикл
				СтрокаНоменклатура = СтрокаЗаказ.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНоменклатура, ВыборкаНоменклатура);
				СтрокаНоменклатура.Позиция = ВыборкаНоменклатура.Номенклатура;
				СтрокаНоменклатура.Уровень = 2;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура Обновить(Команда)

	ДеревоЗаказов.ПолучитьЭлементы().Очистить();
	
	ОбновитьНаСервере();

	КоллекцияЭлементовДерева = ДеревоЗаказов.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияЭлементовДерева Цикл 
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		Элементы.ДеревоЗаказов.Развернуть(ИдентификаторСтроки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ДатаОтгрузки = ТекущаяДата();
	НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов");
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстаткиИРезервы(Заказ, РасчетПоСтроке = Ложь, СтруктураДанных = Неопределено, ТЧ)
	
	УстановитьПривилегированныйРежим(Истина);
		
	Объект = Заказ;
	
	СрезОстатковНаДатуЗаказа = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("СрезОстатковНаДатуЗаказа");
	Если Не СрезОстатковНаДатуЗаказа Тогда
		ДатаОстатков = ТекущаяДата();
	Иначе 
		ДатаОстатков = Объект.Дата;
	КонецЕсли;
	
	ЗаказЗакрыт = Объект.Статус = Перечисления.СтатусыЗаказовКлиентов.Отгружен ИЛИ Объект.Статус = Перечисления.СтатусыЗаказовКлиентов.Отменен;
	
	ОбъектМодуль = Объект.ПолучитьОбъект();
	
	//остатки
	СтруктураИмен = УЧ_Сервер.СформироватьСтруктуруИмен(ОбъектМодуль);
	
	СтруктураСоответствий = УЧ_Сервер.ПоучитьСоответствияСчетовНоменклатуры(ОбъектМодуль, СтруктураИмен);
	СоответствиеСчета = СтруктураСоответствий.Соответствия;
	СоответствиеУчетаПоПодразделениям = СтруктураСоответствий.СоответствияУчетаПодразделений;
	
//	ТаблицаОстатков = УЧ_Сервер.ПолучитьТаблицуОстатков(ОбъектМодуль, СтруктураИмен, СтруктураСоответствий, НачалоДня(Объект.Дата), Истина);
   ТаблицаОстатков = УЧ_Сервер.ПолучитьТаблицуОстатков(ОбъектМодуль, СтруктураИмен, СтруктураСоответствий, ДатаОстатков, Истина,,Истина);

РезультатОстатки = ТаблицаОстатков.РезультатОстатки;
	РезультатКонтроль = ТаблицаОстатков.РезультатКонтроль;
	
	Если РасчетПоСтроке Тогда
			СтруктураДанных.КоличествоНаОстатках = 0; 
			НайденныеСтроки = РезультатОстатки.НайтиСтроки(Новый Структура("Номенклатура, Склад", СтруктураДанных.Номенклатура, ?(ЗначениеЗаполнено(Объект.Склад), Объект.Склад, СтруктураДанных.Склад)));
			Для каждого ТекСтрокаНайденная Из НайденныеСтроки Цикл
				СтруктураДанных.КоличествоНаОстатках = СтруктураДанных.КоличествоНаОстатках + ТекСтрокаНайденная.КоличествоОстаток;;		
			КонецЦикла;	
	Иначе
		Для каждого ТекСтрока Из ТЧ Цикл
			ТекСтрока.КоличествоНаОстатках = 0; 
			НайденныеСтроки = РезультатОстатки.НайтиСтроки(Новый Структура("Номенклатура, Склад", ТекСтрока.Номенклатура, ?(ЗначениеЗаполнено(Объект.Склад), Объект.Склад, ТекСтрока.Склад)));
			Для каждого ТекСтрокаНайденная Из НайденныеСтроки Цикл
				ТекСтрока.КоличествоНаОстатках = ТекСтрока.КоличествоНаОстатках + ТекСтрокаНайденная.КоличествоОстаток;		
			КонецЦикла;	
		КонецЦикла;
	КонецЕсли;
	
	//резервы
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УчетныйОбороты.Субконто1 КАК Номенклатура,
	               |	УчетныйОбороты.Субконто2 КАК Склад,
	               |	УчетныйОбороты.Предприятия КАК Предприятие,
	               |	СУММА(УчетныйОбороты.КоличествоОборот) КАК Оборот,
	               |	СУММА(УчетныйОбороты.КоличествоОборотДт) КАК КоличествоПоставка,
	               |	СУММА(УчетныйОбороты.КоличествоОборотКт) КАК Количество,
	               |	ВЫБОР
	               |		КОГДА УчетныйОбороты.Период < НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
	               |			ТОГДА НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
	               |		ИНАЧЕ НАЧАЛОПЕРИОДА(УчетныйОбороты.Период, ДЕНЬ)
	               |	КОНЕЦ КАК Дата,
	               |	ВЫБОР
	               |		КОГДА &НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов ИЛИ УчетныйОбороты.Субконто3 ЕСТЬ NULL
	               |			ТОГДА УчетныйОбороты.Регистратор
	               |		ИНАЧЕ УчетныйОбороты.Субконто3
	               |	КОНЕЦ КАК Заказ,
	               |	ВЫБОР
	               |		КОГДА &НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов ИЛИ УчетныйОбороты.Субконто3 ЕСТЬ NULL
	               |			ТОГДА ВЫБОР
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказКлиента)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказКлиента).Дата
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказНаВозвратОтКлиента)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказНаВозвратОтКлиента).ДатаПоступления
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказПоставщику)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказПоставщику).ДатаПоступления
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказНаПроизводство)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказНаПроизводство).ДатаПроизводства
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.Уч_Реализация)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_Реализация).Дата
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.УЧ_Возврат)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_Возврат).Дата
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.УЧ_ПоступлениеТоваров)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_ПоступлениеТоваров).Дата
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.УЧ_Возврат)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_Возврат).Дата
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказНаПеремещение)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказНаПеремещение).ДатаПоступления
	               |					ИНАЧЕ УчетныйОбороты.Период
	               |				КОНЕЦ
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Субконто3) = ТИП(Документ.ЗаказКлиента)
	               |					ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Субконто3 КАК Документ.ЗаказКлиента).Дата
	               |				КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Субконто3) = ТИП(Документ.ЗаказНаВозвратОтКлиента)
	               |					ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Субконто3 КАК Документ.ЗаказНаВозвратОтКлиента).ДатаПоступления
	               |				КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Субконто3) = ТИП(Документ.ЗаказПоставщику)
	               |					ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Субконто3 КАК Документ.ЗаказПоставщику).ДатаПоступления
	               |				КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Субконто3) = ТИП(Документ.ЗаказНаПроизводство)
	               |					ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Субконто3 КАК Документ.ЗаказНаПроизводство).ДатаПроизводства
	               |				КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказНаПеремещение)
	               |					ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказНаПеремещение).ДатаПоступления
	               |				ИНАЧЕ УчетныйОбороты.Период
	               |			КОНЕЦ
	               |	КОНЕЦ КАК ДатаЗаказа,
	               |	ВЫБОР
	               |		КОГДА &НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов ИЛИ УчетныйОбороты.Субконто3 ЕСТЬ NULL
	               |			ТОГДА ВЫБОР
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказКлиента)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказКлиента).Контрагент
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказНаВозвратОтКлиента)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказНаВозвратОтКлиента).Контрагент
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказПоставщику)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказПоставщику).Контрагент
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.Уч_Реализация)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_Реализация).Контрагент
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.УЧ_Возврат)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_Возврат).Контрагент
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.УЧ_ПоступлениеТоваров)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_ПоступлениеТоваров).Контрагент
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.УЧ_Возврат)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_Возврат).Контрагент
	               |				КОНЕЦ
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Субконто3) = ТИП(Документ.ЗаказКлиента)
	               |					ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Субконто3 КАК Документ.ЗаказКлиента).Контрагент
	               |				КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Субконто3) = ТИП(Документ.ЗаказНаВозвратОтКлиента)
	               |					ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Субконто3 КАК Документ.ЗаказНаВозвратОтКлиента).Контрагент
	               |				КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Субконто3) = ТИП(Документ.ЗаказПоставщику)
	               |					ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Субконто3 КАК Документ.ЗаказПоставщику).Контрагент
	               |			КОНЕЦ
	               |	КОНЕЦ КАК Контрагент
	               |ИЗ
	               |	РегистрБухгалтерии.Учетный.Обороты(
	               |			,
	               |			,
	               |			Регистратор,
	               |			Счет.Код = ""0041"",
	               |			,
	               |			Предприятия В (&Предприятие)
	               |				И Субконто1 В (&Номенклатура)
	               |				И (Субконто2 В (&Склад) ИЛИ НЕ &НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов = ИСТИНА),
	               |			,
	               |			) КАК УчетныйОбороты
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА &ВсеНезакрытыеЗаказы
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ УчетныйОбороты.Период >= НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
	               |		КОНЕЦ
	               |	И НЕ УчетныйОбороты.Регистратор = &ЭтаСсылка И (НЕ УчетныйОбороты.Субконто3 = &ЭтаСсылка ИЛИ УчетныйОбороты.Субконто3 ЕСТЬ NULL) 
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВЫБОР
	               |		КОГДА &НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов ИЛИ УчетныйОбороты.Субконто3 ЕСТЬ NULL
	               |			ТОГДА УчетныйОбороты.Регистратор
	               |		ИНАЧЕ УчетныйОбороты.Субконто3
	               |	КОНЕЦ,
	               |	УчетныйОбороты.Субконто1,
	               |	УчетныйОбороты.Субконто2,
	               |	УчетныйОбороты.Предприятия,
	               |	ВЫБОР
	               |		КОГДА УчетныйОбороты.Период < НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
	               |			ТОГДА НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
	               |		ИНАЧЕ НАЧАЛОПЕРИОДА(УчетныйОбороты.Период, ДЕНЬ)
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА &НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов ИЛИ УчетныйОбороты.Субконто3 ЕСТЬ NULL
	               |			ТОГДА ВЫБОР
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказКлиента)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказКлиента).Дата
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказНаВозвратОтКлиента)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказНаВозвратОтКлиента).ДатаПоступления
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказПоставщику)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказПоставщику).ДатаПоступления
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказНаПроизводство)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказНаПроизводство).ДатаПроизводства
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.Уч_Реализация)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_Реализация).Дата
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.УЧ_Возврат)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_Возврат).Дата
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.УЧ_ПоступлениеТоваров)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_ПоступлениеТоваров).Дата
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.УЧ_Возврат)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_Возврат).Дата
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказНаПеремещение)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказНаПеремещение).ДатаПоступления
	               |					ИНАЧЕ УчетныйОбороты.Период
	               |				КОНЕЦ
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Субконто3) = ТИП(Документ.ЗаказКлиента)
	               |					ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Субконто3 КАК Документ.ЗаказКлиента).Дата
	               |				КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Субконто3) = ТИП(Документ.ЗаказНаВозвратОтКлиента)
	               |					ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Субконто3 КАК Документ.ЗаказНаВозвратОтКлиента).ДатаПоступления
	               |				КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Субконто3) = ТИП(Документ.ЗаказПоставщику)
	               |					ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Субконто3 КАК Документ.ЗаказПоставщику).ДатаПоступления
	               |				КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Субконто3) = ТИП(Документ.ЗаказНаПроизводство)
	               |					ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Субконто3 КАК Документ.ЗаказНаПроизводство).ДатаПроизводства
	               |				КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказНаПеремещение)
	               |					ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказНаПеремещение).ДатаПоступления
	               |				ИНАЧЕ УчетныйОбороты.Период
	               |			КОНЕЦ
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА &НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов ИЛИ УчетныйОбороты.Субконто3 ЕСТЬ NULL
	               |			ТОГДА ВЫБОР
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказКлиента)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказКлиента).Контрагент
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказНаВозвратОтКлиента)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказНаВозвратОтКлиента).Контрагент
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказПоставщику)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказПоставщику).Контрагент
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.Уч_Реализация)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_Реализация).Контрагент
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.УЧ_Возврат)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_Возврат).Контрагент
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.УЧ_ПоступлениеТоваров)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_ПоступлениеТоваров).Контрагент
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.УЧ_Возврат)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_Возврат).Контрагент
	               |				КОНЕЦ
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Субконто3) = ТИП(Документ.ЗаказКлиента)
	               |					ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Субконто3 КАК Документ.ЗаказКлиента).Контрагент
	               |				КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Субконто3) = ТИП(Документ.ЗаказНаВозвратОтКлиента)
	               |					ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Субконто3 КАК Документ.ЗаказНаВозвратОтКлиента).Контрагент
	               |				КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Субконто3) = ТИП(Документ.ЗаказПоставщику)
	               |					ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Субконто3 КАК Документ.ЗаказПоставщику).Контрагент
	               |			КОНЕЦ
	               |	КОНЕЦ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	УчетныйОбороты.Субконто1,
	               |	УчетныйОбороты.Субконто2,
	               |	УчетныйОбороты.Предприятия,
	               |	УчетныйОбороты.КоличествоОборот,
	               |	УчетныйОбороты.КоличествоОборотДт,
	               |	0,
	               |	ВЫБОР
	               |		КОГДА УчетныйОбороты.Период < НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
	               |			ТОГДА НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
	               |		ИНАЧЕ НАЧАЛОПЕРИОДА(УчетныйОбороты.Период, ДЕНЬ)
	               |	КОНЕЦ,
	               |	УчетныйОбороты.Регистратор,
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказКлиента)
	               |			ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказКлиента).Дата
	               |		КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказНаВозвратОтКлиента)
	               |			ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказНаВозвратОтКлиента).ДатаПоступления
	               |		КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказПоставщику)
	               |			ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказПоставщику).ДатаПоступления
	               |		КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказНаПроизводство)
	               |			ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказНаПроизводство).ДатаПроизводства
	               |		КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.Уч_Реализация)
	               |			ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_Реализация).Дата
	               |		КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.УЧ_Возврат)
	               |			ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_Возврат).Дата
	               |		КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.УЧ_ПоступлениеТоваров)
	               |			ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_ПоступлениеТоваров).Дата
	               |		КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.УЧ_Возврат)
	               |			ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_Возврат).Дата
	               |		КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказНаПеремещение)
	               |			ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказНаПеремещение).ДатаПоступления
	               |		ИНАЧЕ УчетныйОбороты.Период
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказКлиента)
	               |			ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказКлиента).Контрагент
	               |		КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказНаВозвратОтКлиента)
	               |			ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказНаВозвратОтКлиента).Контрагент
	               |		КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказПоставщику)
	               |			ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказПоставщику).Контрагент
	               |		КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.Уч_Реализация)
	               |			ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_Реализация).Контрагент
	               |		КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.УЧ_Возврат)
	               |			ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_Возврат).Контрагент
	               |		КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.УЧ_ПоступлениеТоваров)
	               |			ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_ПоступлениеТоваров).Контрагент
	               |		КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.УЧ_Возврат)
	               |			ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_Возврат).Контрагент
	               |	КОНЕЦ
	               |ИЗ
	               |	РегистрБухгалтерии.Учетный.Обороты(
	               |			&Период,
	               |			,
	               |			Регистратор,
	               |			Счет.Код = ""41""
	               |				ИЛИ Счет.Родитель.Код = ""10""
	               |				ИЛИ Счет.Код = ""43"",
	               |			,
	               |			Предприятия В (&Предприятие)
	               |				И Субконто1 В (&Номенклатура)
	               |				И Субконто2 В (&Склад)
	               |				И &НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов,
	               |			,
	               |			) КАК УчетныйОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.сабОбработкаДокументов КАК сабОбработкаДокументов
	               |		ПО УчетныйОбороты.Регистратор = сабОбработкаДокументов.ДокументУУ
	               |			И (ВЫБОР
	               |				КОГДА ТИПЗНАЧЕНИЯ(сабОбработкаДокументов.ДокументБУ) = ТИП(Документ.РеализацияТоваровУслуг)
	               |					ТОГДА ВЫРАЗИТЬ(сабОбработкаДокументов.ДокументБУ КАК Документ.РеализацияТоваровУслуг).Заказ
	               |				КОГДА ТИПЗНАЧЕНИЯ(сабОбработкаДокументов.ДокументБУ) = ТИП(Документ.РозничнаяПродажа)
	               |					ТОГДА ВЫРАЗИТЬ(сабОбработкаДокументов.ДокументБУ КАК Документ.РозничнаяПродажа).Заказ
	               |				КОГДА ТИПЗНАЧЕНИЯ(сабОбработкаДокументов.ДокументБУ) = ТИП(Документ.ПередачаТоваров)
	               |					ТОГДА ВЫРАЗИТЬ(сабОбработкаДокументов.ДокументБУ КАК Документ.ПередачаТоваров).Заказ
	               |				КОГДА ТИПЗНАЧЕНИЯ(сабОбработкаДокументов.ДокументБУ) = ТИП(Документ.ОтчетПроизводстваЗаСмену)
	               |					ТОГДА ВЫРАЗИТЬ(сабОбработкаДокументов.ДокументБУ КАК Документ.ОтчетПроизводстваЗаСмену).Заказ
	               |				ИНАЧЕ НЕОПРЕДЕЛЕНО
	               |			КОНЕЦ = &ЭтаСсылка)
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА &ВсеНезакрытыеЗаказы
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ УчетныйОбороты.Период >= НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
	               |		КОНЕЦ
	               |	И НЕ УчетныйОбороты.Регистратор = &ЭтаСсылка
	               |	И ВЫБОР
	               |			КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.УЧ_Реализация)
	               |				ТОГДА НЕ ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_Реализация).ДокОснование = &ЭтаСсылка
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |	И сабОбработкаДокументов.ДокументБУ ЕСТЬ NULL";
	
	НоменклатураМассив = Новый Массив;
	Для каждого ТекСтрока Из ТЧ Цикл
		НоменклатураМассив.Добавить(ТекСтрока.Номенклатура);	
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	Запрос.УстановитьПараметр("Номенклатура", НоменклатураМассив);
	Запрос.УстановитьПараметр("ВсеНезакрытыеЗаказы", Истина); //все заказы с проводками
	Запрос.УстановитьПараметр("НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов", НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов);  
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	Запрос.УстановитьПараметр("Предприятие", Объект.Предприятие);
	//Статусы = Новый Массив;
	//Статусы.Добавить(Перечисления.СтатусыЗаказовКлиентов.Отгружен);
	//Статусы.Добавить(Перечисления.СтатусыЗаказовКлиентов.Отменен);
	//Запрос.УстановитьПараметр("Статус", Статусы);
	Запрос.УстановитьПараметр("ЭтаСсылка", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();
	
	Если РасчетПоСтроке Тогда
		
		СтруктураДанных.КоличествоВРезервах = 0;
		СтруктураДанных.КоличествоКПоставке = 0;
		СтруктураОтбора = Новый Структура("Номенклатура", СтруктураДанных.Номенклатура);
		Если НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов Тогда
			СтруктураОтбора.Вставить("Склад", ?(ЗначениеЗаполнено(Объект.Склад), Объект.Склад, СтруктураДанных.Склад)); 
		КонецЕсли;
		НайденныеСтроки = Выборка.НайтиСтроки(СтруктураОтбора);
		Для каждого ТекСтрокаНайденная Из НайденныеСтроки Цикл
			Если НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов И НачалоДня(ТекСтрокаНайденная.ДатаЗаказа) <= НачалоДня(Объект.Дата) И НЕ ТипЗнч(ТекСтрокаНайденная.Заказ) = Тип("ДокументСсылка.ЗаказПоставщику") И НЕ ТипЗнч(ТекСтрокаНайденная.Заказ) = Тип("ДокументСсылка.ЗаказНаВозвратОтКлиента")
				И НЕ ТипЗнч(Объект) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
				СтруктураДанных.КоличествоНаОстатках = СтруктураДанных.КоличествоНаОстатках + ТекСтрокаНайденная.КоличествоПоставка - ТекСтрокаНайденная.Количество;	
			//ИначеЕсли НачалоДня(ТекСтрокаНайденная.Дата) <= НачалоДня(Объект.ДатаПоступления) ИЛИ НачалоДня(ТекСтрокаНайденная.ДатаЗаказа) <= НачалоДня(Объект.Дата) Тогда	
			Иначе
				СтруктураДанных.КоличествоВРезервах = СтруктураДанных.КоличествоВРезервах + ТекСтрокаНайденная.Количество;
				СтруктураДанных.КоличествоКПоставке = СтруктураДанных.КоличествоКПоставке + ТекСтрокаНайденная.КоличествоПоставка;
			КонецЕсли;
		КонецЦикла;	
		
		Если НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов Тогда
			СтруктураДанных.КоличествоОстаток = СтруктураДанных.КоличествоНаОстатках - СтруктураДанных.КоличествоВРезервах - СтруктураДанных.Количество;
		Иначе	
			СтруктураДанных.КоличествоОстаток = СтруктураДанных.КоличествоНаОстатках + СтруктураДанных.КоличествоКПоставке - СтруктураДанных.КоличествоВРезервах - СтруктураДанных.Количество;
		КонецЕсли;
		
	Иначе
		
		Для каждого ТекСтрока Из ТЧ Цикл
			ТекСтрока.КоличествоВРезервах = 0; 
			ТекСтрока.КоличествоКПоставке = 0;
			СтруктураОтбора = Новый Структура("Номенклатура", ТекСтрока.Номенклатура);
			Если НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов Тогда
				СтруктураОтбора.Вставить("Склад", ?(ЗначениеЗаполнено(Объект.Склад), Объект.Склад, ТекСтрока.Склад)); 
			КонецЕсли;
			НайденныеСтроки = Выборка.НайтиСтроки(СтруктураОтбора);
			Для каждого ТекСтрокаНайденная Из НайденныеСтроки Цикл
				Если НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов И НачалоДня(ТекСтрокаНайденная.Дата) <= НачалоДня(Объект.Дата) И НЕ ТипЗнч(ТекСтрокаНайденная.Заказ) = Тип("ДокументСсылка.ЗаказПоставщику") И НЕ ТипЗнч(ТекСтрокаНайденная.Заказ) = Тип("ДокументСсылка.ЗаказНаВозвратОтКлиента") 
					И НЕ ТипЗнч(Объект) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
					ТекСтрока.КоличествоНаОстатках = ТекСтрока.КоличествоНаОстатках + ТекСтрокаНайденная.КоличествоПоставка - ТекСтрокаНайденная.Количество;	
				//ИначеЕсли НачалоДня(ТекСтрокаНайденная.Дата) <= НачалоДня(Объект.ДатаПоступления) ИЛИ НачалоДня(ТекСтрокаНайденная.ДатаЗаказа) <= НачалоДня(Объект.Дата) Тогда	
				Иначе
					ТекСтрока.КоличествоВРезервах = ТекСтрока.КоличествоВРезервах + ТекСтрокаНайденная.Количество;
					ТекСтрока.КоличествоКПоставке = ТекСтрока.КоличествоКПоставке + ТекСтрокаНайденная.КоличествоПоставка;
				КонецЕсли;
			КонецЦикла;	
		КонецЦикла;
		
		Для каждого ТекСтрока Из ТЧ Цикл
			Если НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов Тогда
				ТекСтрока.КоличествоОстаток = ТекСтрока.КоличествоНаОстатках - ТекСтрока.КоличествоВРезервах - ТекСтрока.Количество; 
			Иначе	
				ТекСтрока.КоличествоОстаток = ТекСтрока.КоличествоНаОстатках + ТекСтрока.КоличествоКПоставке - ТекСтрока.КоличествоВРезервах - ТекСтрока.Количество; 
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого ТекСтрока Из Выборка Цикл
		Если НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов И НачалоДня(ТекСтрока.Дата) <= НачалоДня(Объект.Дата) И НЕ ТипЗнч(ТекСтрока.Заказ) = Тип("ДокументСсылка.ЗаказПоставщику") И НЕ ТипЗнч(ТекСтрока.Заказ) = Тип("ДокументСсылка.ЗаказНаВозвратОтКлиента")
			И НЕ ТипЗнч(Объект) = Тип("ДокументСсылка.ЗаказКлиента") Тогда		
			Продолжить;	
		КонецЕсли;
		Если ТекСтрока.Количество Тогда
			НовВремСтрока = ВремТЧЗаказы.Добавить();
			ЗаполнитьЗначенияСвойств(НовВремСтрока, ТекСтрока);
			НовВремСтрока.ЗаказКлиента = Объект.Ссылка;
		КонецЕсли;	
		Если ТекСтрока.КоличествоПоставка Тогда
			НовВремСтрока = ВремТЧЗаказыПоставщикам.Добавить();
			ЗаполнитьЗначенияСвойств(НовВремСтрока, ТекСтрока);
			НовВремСтрока.Количество = ТекСтрока.КоличествоПоставка;
			НовВремСтрока.ЗаказКлиента = Объект.Ссылка;
		КонецЕсли;
	КонецЦикла;

	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтгрузкиПриИзменении(Элемент)
	Обновить(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Обновить(Неопределено);
	//Элементы.ОтборТипДокумента.СписокВыбора.Добавить(Тип("ДокументСсылка.ЗаказКлиента"),Тип("ДокументСсылка.ЗаказКлиента"));
	//Элементы.ОтборТипДокумента.СписокВыбора.Добавить(Тип("ДокументСсылка.ЗаказНаПроизводство"),Тип("ДокументСсылка.ЗаказНаПроизводство"));
КонецПроцедуры

&НаКлиенте
Процедура ТолькоНеобеспеченныеПриИзменении(Элемент)
	Обновить(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ЗаказПоставщику(Команда)
	
	МассивСтрокТЧ = Новый Массив;
	Для каждого ТекСтрока Из Элементы.ДеревоЗаказов.ВыделенныеСтроки Цикл
		НовСтру = Новый Структура("Номенклатура, Количество, ЕдиницаИзмерения, ЦенаПоставки");
		ТекСтрокаДанные = Элементы.ДеревоЗаказов.ДанныеСтроки(ТекСтрока);
		ЗаполнитьЗначенияСвойств(НовСтру, ТекСтрокаДанные);
		Если ТекСтрокаДанные.КоличествоОстаток < 0 Тогда
			НовСтру.Количество = - ТекСтрокаДанные.КоличествоОстаток;				
		КонецЕсли;
		
		МассивСтрокТЧ.Добавить(НовСтру);	
	КонецЦикла;
	
	ОткрытьФорму("Документ.ЗаказПоставщику.ФормаОбъекта", Новый Структура("Основание", Новый Структура("ТЧ", МассивСтрокТЧ)));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказПоставщику2(Команда)
	
	ТекДанные = Элементы.ДеревоЗаказов.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекДанные.Контрагент) Тогда
		Сообщить("Последний поставщик по выделенной строке не найден.");
		Возврат;
	КонецЕсли;
	
	МассивСтрокТЧ = Новый Массив;
	Для каждого ТекСтрока0 Из ДеревоЗаказов.ПолучитьЭлементы() Цикл
		Для каждого ТекСтрока Из ТекСтрока0.ПолучитьЭлементы() Цикл
			Если ТекДанные.Контрагент = ТекСтрока.Контрагент Тогда
				ТекНоменклатураСтрока = Неопределено;
				Для каждого ТекЭл Из МассивСтрокТЧ Цикл
					Если ТекЭл.Номенклатура = ТекСтрока.Номенклатура Тогда
						ТекНоменклатураСтрока = ТекЭл;					
					КонецЕсли;	
				КонецЦикла;
				
				НовСтру = Новый Структура("Номенклатура, Количество, ЕдиницаИзмерения, ЦенаПоставки");
				Если ТекНоменклатураСтрока = Неопределено Тогда
					ЗаполнитьЗначенияСвойств(НовСтру, ТекСтрока);
					Если ТекСтрока.КоличествоОстаток < 0 Тогда
						НовСтру.Количество = - ТекСтрока.КоличествоОстаток;				
					КонецЕсли;
					МассивСтрокТЧ.Добавить(НовСтру);	
				Иначе
					Если ТекСтрока.КоличествоОстаток < 0 Тогда
						ТекНоменклатураСтрока.Количество = ТекНоменклатураСтрока.Количество - ТекСтрока.КоличествоОстаток;				
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
	
	ОткрытьФорму("Документ.ЗаказПоставщику.ФормаОбъекта", Новый Структура("Основание", Новый Структура("ТЧ, Контрагент, Договор, Предприятие, Склад, Организация", МассивСтрокТЧ, ТекДанные.Контрагент, ТекДанные.Договор, ТекДанные.Предприятие, ТекДанные.Склад, ТекДанные.Организация)));

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ФормированиеМаршрута" Тогда
		Обновить(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаказПоставщику1(Команда)	
	ОткрытьФорму("Документ.ЗаказПоставщику.ФормаОбъекта", Новый Структура("Основание", Элементы.ДеревоЗаказов.ТекущиеДанные.ЗаказКлиента));
КонецПроцедуры

&НаКлиенте
Процедура ЗаказПроизводство(Команда)
	МассивЗаказов = Новый Массив;
	Для каждого ТекСтрока Из Элементы.ДеревоЗаказов.ВыделенныеСтроки Цикл
		Если ВидИерархии = 1 И Элементы.ДеревоЗаказов.ДанныеСтроки(ТекСтрока).ЗаказКлиента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивЗаказов.Добавить(Элементы.ДеревоЗаказов.ДанныеСтроки(ТекСтрока).ЗаказКлиента);
	КонецЦикла;
	
	ОткрытьФорму("Документ.ЗаказНаПроизводство.ФормаОбъекта", Новый Структура("Основание", МассивЗаказов));
КонецПроцедуры

&НаКлиенте
Процедура ЗаказПроизводство2(Команда)
	
	МассивСтрокТЧ = Новый Массив;
	Для каждого ТекСтрока Из Элементы.ДеревоЗаказов.ВыделенныеСтроки Цикл
		НовСтру = Новый Структура("Номенклатура, Количество, ЕдиницаИзмерения, ЦенаПоставки");
		ТекСтрокаДанные = Элементы.ДеревоЗаказов.ДанныеСтроки(ТекСтрока);
		ЗаполнитьЗначенияСвойств(НовСтру, ТекСтрокаДанные);
		Если ТекСтрокаДанные.КоличествоОстаток < 0 Тогда
			НовСтру.Количество = - ТекСтрокаДанные.КоличествоОстаток;				
		КонецЕсли;
		
		МассивСтрокТЧ.Добавить(НовСтру);	
	КонецЦикла;
	
	ОткрытьФорму("Документ.ЗаказНаПроизводство.ФормаОбъекта", Новый Структура("Основание", Новый Структура("ТЧ", МассивСтрокТЧ)));
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияИспользованиеПриИзменении(Элемент)
	Обновить(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	ОтборОрганизацияИспользование = Истина;
	Обновить(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОтборПредприятиеИспользованиеПриИзменении(Элемент)
	Обновить(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОтборПредприятиеПриИзменении(Элемент)
	ОтборПредприятиеИспользование = Истина;
	Обновить(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОтборТипДокументаИспользованиеПриИзменении(Элемент)
	Обновить(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОтборТипДокументаПриИзменении(Элемент)
	ОтборТипДокументаИспользование = Истина;
	Обновить(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗаказовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ДеревоЗаказовЗначение" И (ТипЗнч(Элементы.ДеревоЗаказов.ТекущиеДанные.Позиция) = Тип("ДокументСсылка.ЗаказКлиента") ИЛИ ТипЗнч(Элементы.ДеревоЗаказов.ТекущиеДанные.Позиция) = Тип("ДокументСсылка.ЗаказНаПроизводство")) Тогда
		ПоказатьЗначение(, Элементы.ДеревоЗаказов.ТекущиеДанные.ЗаказКлиента);	
	ИначеЕсли Поле.Имя = "ДеревоЗаказовКоличествоНаОстатках" Тогда
		//СтандартнаяОбработка = Ложь;
		//ТекСпис = Новый СписокЗначений;
		//ТекСпис.Добавить("Обновить");
		//ТекВыбор = Неопределено;
		//ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ТабличнаяЧастьВыборЗавершение", ЭтаФорма), ТекСпис, Элементы.ДеревоЗаказовКоличествоНаОстатках);
	ИначеЕсли Поле.Имя = "ДеревоЗаказовКоличествоВРезервах" Тогда
		СтандартнаяОбработка = Ложь;
		ТекСпис = Новый СписокЗначений;
		//ТекСпис.Добавить("Обновить");
		ТекСпис.Добавить("Открыть список заказов");
		ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ТабличнаяЧастьВыборЗавершение1", ЭтаФорма), ТекСпис, Элементы.ДеревоЗаказовКоличествоВРезервах);
	ИначеЕсли Поле.Имя = "ДеревоЗаказовКоличествоКПоставке" Тогда
		СтандартнаяОбработка = Ложь;
		ТекСпис = Новый СписокЗначений;
		//ТекСпис.Добавить("Обновить");
		ТекСпис.Добавить("Открыть список заказов");
		ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ТабличнаяЧастьВыборЗавершение2", ЭтаФорма), ТекСпис, Элементы.ДеревоЗаказовКоличествоКПоставке);
	//ИначеЕсли Поле.Имя = "ТабличнаяЧастьЕдиницаИзмерения" Тогда
	//	//СтандартнаяОбработка = Ложь;
	//	ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	//	МассивЕдИзмНоменклатуры = ПолучитьМассивВозможныхЕдиницИзмеренияНоменклатуры(ТекДанные.Номенклатура);
	//	Элементы.ТабличнаяЧастьЕдиницаИзмерения.СписокВыбора.Очистить(); 
	//	Для Каждого ЭлементВыборкаЕдИзм Из МассивЕдИзмНоменклатуры Цикл
	//		Элементы.ТабличнаяЧастьЕдиницаИзмерения.СписокВыбора.Добавить(ЭлементВыборкаЕдИзм);
	//	КонецЦикла;   
	ИначеЕсли Поле.Имя = "ТабличнаяЧастьОтгружено" Тогда 
		ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
		СтандартнаяОбработка = Ложь; 
		Если ЗначениеЗаполнено(ТекДанные.Отгружено) Тогда
			ОписаниОповещения = Новый ОписаниеОповещения("ВыборЗначенияДокументыОтгрузкиДляЗаказа",ЭтотОбъект);
			ПоказатьВыборИзМеню(ОписаниОповещения,ТекДанные.ДокументыОтгрузкиДляЗаказа, Поле); 
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ТабличнаяЧастьВыборЗавершение2(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ТекВыбор = ВыбранныйЭлемент;
	Если ТекВыбор = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТекВыбор.Значение = "Обновить" Тогда
		//ЗаполнитьОстаткиИРезервы(Элементы.ДеревоЗаказов.ТекущиеДанные.ЗаказКлиента, Истина);
		//ЗаполнитьКонтрольМинЦены();
	ИначеЕсли ТекВыбор.Значение = "Открыть список заказов" Тогда
		
		ТекФорма = ПолучитьФорму("Документ.ЗаказКлиента.Форма.ФормаРасшифровкиРезервов",,, Новый УникальныйИдентификатор);
		
		ТекФорма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		Для каждого ТекСтрока Из ВремТЧЗаказыПоставщикам Цикл
			Если Не ТекСтрока.Номенклатура = Элементы.ДеревоЗаказов.ТекущиеДанные.Номенклатура Или Не ТекСтрока.ЗаказКлиента = Элементы.ДеревоЗаказов.ТекущиеДанные.ЗаказКлиента Тогда
				Продолжить;			
			КонецЕсли;
			НоваяСтрока = ТекФорма.ВремТЧЗаказы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЦикла;
		ТекФорма.КоличИтого = ТекФорма.ВремТЧЗаказы.Итог("Количество");
		ТекФорма.Открыть();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьВыборЗавершение1(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ТекВыбор = ВыбранныйЭлемент;
	Если ТекВыбор = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТекВыбор.Значение = "Обновить" Тогда
		//ЗаполнитьОстаткиИРезервы(Элементы.ДеревоЗаказов.ТекущиеДанные.ЗаказКлиента, Истина);
		//ЗаполнитьКонтрольМинЦены();
	ИначеЕсли ТекВыбор.Значение = "Открыть список заказов" Тогда
		
		ТекФорма = ПолучитьФорму("Документ.ЗаказКлиента.Форма.ФормаРасшифровкиРезервов",,, Новый УникальныйИдентификатор);
		
		ТекФорма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		Для каждого ТекСтрока Из ВремТЧЗаказы Цикл
			Если Не ТекСтрока.Номенклатура = Элементы.ДеревоЗаказов.ТекущиеДанные.Номенклатура Или Не ТекСтрока.ЗаказКлиента = Элементы.ДеревоЗаказов.ТекущиеДанные.ЗаказКлиента Тогда
				Продолжить;			
			КонецЕсли;
			НоваяСтрока = ТекФорма.ВремТЧЗаказы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЦикла;
		ТекФорма.КоличИтого = ТекФорма.ВремТЧЗаказы.Итог("Количество");
		ТекФорма.Открыть();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьВыборЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ТекВыбор = ВыбранныйЭлемент;
	Если ТекВыбор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекВыбор.Значение = "Обновить" Тогда
		//ЗаполнитьОстаткиИРезервы(Элементы.ДеревоЗаказов.ТекущиеДанные.ЗаказКлиента, Истина);
		//ЗаполнитьКонтрольМинЦены();
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ВидИерархииПриИзменении(Элемент)
	
	ПерезаполнитьДеревоПриИзмененииИерархии();
	КоллекцияЭлементовДерева = ДеревоЗаказов.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияЭлементовДерева Цикл 
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		Элементы.ДеревоЗаказов.Развернуть(ИдентификаторСтроки);
	КонецЦикла;

КонецПроцедуры

