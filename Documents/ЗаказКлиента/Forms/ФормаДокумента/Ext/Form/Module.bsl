
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	//КонецЕсли;
	
	//++саб
	сабПриЧтенииНаСервере(ТекущийОбъект);
	//--саб
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, Новый Структура("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты") );
	//КонецЕсли;

	//++саб
	сабПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	//--саб
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	//КонецЕсли;
	
	//++саб
	сабПриОткрытии(Отказ);
	//--саб
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	Если МодульУправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
	//		ОбновитьЭлементыДополнительныхРеквизитов();
	//		МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	//	КонецЕсли;
	//КонецЕсли;
	
	//++саб
	сабОбработкаОповещения(ИмяСобытия, Параметр, Источник);
	//--саб
	
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	//КонецЕсли;
	//ТекущийОбъект.ТабличнаяЧасть.Сортировать("Номенклатура");
	Для Каждого СтрокаТЧ ИЗ Объект.ТабличнаяЧасть Цикл
		Если СтрокаТЧ.КоличествоОстаток < 0 Тогда
			ТекущийОбъект.КоличествоПревышаетОстатокРезервы = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;  
	
	Если Модифицированность Тогда
		ЗаполнитьЗадолженностьКонтрагента(ТекущийОбъект); 
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	//КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	МодульУправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
	//КонецЕсли;
	
КонецПроцедуры


// СтандартныеПодсистемы.КонтактнаяИнформация

// Поддержка дополнительных реквизитов.

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	//КонецЕсли;
	    
КонецПроцедуры




// Конец СтандартныеПодсистемы.КонтактнаяИнформация


&НаКлиенте
Процедура сабПриОткрытии(Отказ)
	Если ВключенаНастройкаДляФормы2 Тогда
		УстановитьЗаголовокДляФормы2(); 
	КонецЕсли;
	#Если МобильныйКлиент Или МобильноеПриложениеКлиент Тогда
		ЭтоМобильныйКлиент = Истина;
		Элементы.ТабличнаяЧастьСклад.Видимость = Ложь;
	#Иначе
		ЭтоМобильныйКлиент = Ложь;
		Элементы.ТабличнаяЧастьИтогСумма.Видимость = Ложь;
	#КонецЕсли
	
	ФлагВалютыПриИзменении("");
	
	УстановитьВидимость();
	
	ВидЗаказаПриИзменении(Неопределено);
		
КонецПроцедуры

&НаКлиенте
Процедура сабОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "Запись_ЭлектронноеПисьмоИсходящее" Тогда
		Если Параметр.Свойство("Предмет") Тогда
			ТекСтатусПисьма = сабОперОбщегоНазначения.ПроверитьОтправкуПисьмаПоПредмету(Параметр.Предмет);
			Если НЕ ТекСтатусПисьма = Неопределено Тогда
				Если Не ЗначениеЗаполнено(Объект.Статус) ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.КОтгрузке") Тогда
					Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.КОтгрузке");
					Записать();
					сабПриСозданииНаСервере(Ложь, Истина);
				КонецЕсли;			
			КонецЕсли;
		КонецЕсли; 	 
	КонецЕсли;
	Если ИмяСобытия = "ОбновитьДанныеВЗаказе" Тогда
		Если Элементы.ПодразделениеКонтрагента.ТекстРедактирования = Источник Тогда
			АдресДоставкиОбработкаВыбораЗавершение(Объект.ПодразделениеКонтрагента, Новый Структура);	
		КонецЕсли;
	КонецЕсли;
	Если ИмяСобытия = "ОповеститьРегистрОбработанных" Тогда
		ЭтаФорма.Прочитать();
		сабПриСозданииНаСервере(Ложь, Истина);
	КонецЕсли;   
	Если ИмяСобытия = "СозданыДокументыОтгрузки" Тогда 
		Если ТипЗнч(Параметр) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			Если Параметр = Объект.Ссылка Тогда
				ЭтаФорма.Прочитать();
				сабПриСозданииНаСервере(Ложь, Истина); 
				сабПриОткрытии(Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;  
	
	Если ИмяСобытия = "Запись_ДоговорыКонтрагентов" Тогда 
        ЭтаФорма.ОбновитьОтображениеДанных();
		ЭтаФорма.Прочитать();
		УстановитьДоступностьДокумента();
	КонецЕсли;
	
КонецПроцедуры
 

&НаКлиенте
Процедура УстановитьВидимость()
				
	//Элементы.ДатаПоступления.Видимость = Объект.ОтгружатьОднойДатой;
	//Элементы.ТабличнаяЧастьДатаПоступления.Видимость = (Не Объект.ОтгружатьОднойДатой);
	//Элементы.ТабличнаяЧастьКоличествоВЗапайках.Видимость = (ЗначениеЗаполнено(Объект.ПредприятиеВн));
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьКоличествоПриИзменении(Элемент)
	
	РассчитатьКоличество();
	РассчитатьСумму();
	
	ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	Если АльтернативнаяФорма Тогда 
		 ЗаполнитьПредставлениеУпаковок(ТекДанные);
//		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьЦенаПриИзменении(Элемент)
	РассчитатьСумму();
	ЗаполнитьКонтрольМинЦены();
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьДоставкаПриИзменении(Элемент)
	Если Элементы.ТабличнаяЧасть.ТекущиеДанные.Доставка Тогда
		Элементы.ТабличнаяЧасть.ТекущиеДанные.СуммаДоставки = Элементы.ТабличнаяЧасть.ТекущиеДанные.Количество * Элементы.ТабличнаяЧасть.ТекущиеДанные.Доставка;
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьСуммаПриИзменении(Элемент)
	ТекКоличество = Элементы.ТабличнаяЧасть.ТекущиеДанные.Количество;
	Элементы.ТабличнаяЧасть.ТекущиеДанные.Цена = ?(ТекКоличество <> 0, Элементы.ТабличнаяЧасть.ТекущиеДанные.Сумма / ТекКоличество, 0);
	РассчитатьСумму();
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьСуммаДоставкиПриИзменении(Элемент)
	ТекКоличество = Элементы.ТабличнаяЧасть.ТекущиеДанные.Количество;
	Элементы.ТабличнаяЧасть.ТекущиеДанные.Доставка = ?(ТекКоличество <> 0, Элементы.ТабличнаяЧасть.ТекущиеДанные.СуммаДоставки / ТекКоличество, 0);
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеПриИзменении(Элемент)
	сабОбщегоНазначенияКлиентСервер.СкрытьПодразделения(ЭтаФорма);  
	ЗаполнитьЗадолженностьКонтрагента();
	//УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("сабУчетПоПодразделениям", Объект.Предприятие));
КонецПроцедуры

&НаКлиенте
Процедура ФлагВалютыПриИзменении(Элемент)
	//Элементы.ГруппаВалюты.Видимость = Объект.ФлагВалюты;
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	Объект.Курс = БюджетныйНаСервере.ТекущийКурс(Объект.Валюта,Объект.Дата,Объект.Предприятие);
КонецПроцедуры

&НаКлиенте
Процедура РеализацияВидДоставкиПриИзменении(Элемент)
	
	Если Элементы.ТабличнаяЧасть.ТекущиеДанные.ВидДоставки = "Авто" Тогда
		Элементы.ТабличнаяЧасть.ТекущиеДанные.Статья = ПредопределенноеЗначение("Справочник.СтатьиЗатрат.ТранспортныеАвто");
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура сабПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	АльтернативнаяФорма = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("АльтернативнаяФормаЗаказов");
	Если Параметры.Свойство("ЗначениеКопирования") Тогда
		БюджетныйНаСервере.ДействияПриСозданииФормыДокумента(ЭтаФорма,,Новый Структура("ЗначениеКопирования", Параметры.ЗначениеКопирования));
	Иначе
		БюджетныйНаСервере.ДействияПриСозданииФормыДокумента(ЭтаФорма);	
	КонецЕсли;
	ЗаблокироватьРеквизитыЗаказа = РольДоступна("допЗаблокироватьРеквизитыЗаказа");
	РазрешитьСменуСтатусаЗаказа = РольДоступна("допИзменениеСтатусаЗаказаКлиента");
	НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов");
	Элементы.Статус.ТолькоПросмотр = ЗаблокироватьРеквизитыЗаказа И НЕ РазрешитьСменуСтатусаЗаказа;
	Элементы.СтатусОплаты.ТолькоПросмотр = ЗаблокироватьРеквизитыЗаказа И НЕ РазрешитьСменуСтатусаЗаказа;
	
	УстановкаЗапретаРедактированияЦен(Ложь);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ОтгружатьОднойДатой = Истина;
		Если Не ЗначениеЗаполнено(Объект.Ответственный) Тогда
			 ЗаполнитьОтветственного();
		КонецЕсли;
		Объект.УчитыватьНДС = Истина;
		Объект.ЦенаВключаетНДС = Истина;
		Если Параметры.Свойство("ЗначениеКопирования") Тогда
			Если Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
				ПодразделениеПриИзмененииСервер();				
			КонецЕсли;
		Иначе
			ПодразделениеПриИзмененииСервер();
		КонецЕсли;
		Объект.Дата = ТекущаяДата();
		Если Параметры.Свойство("ЗначениеКопирования") Тогда
			Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
				//Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) И ЗначениеЗаполнено(Объект.ПодразделениеКонтрагента) Тогда 
				Объект.ДатаПоступления = КонецДня(ТекущаяДата()) + 1*24*60*60;
				//Объект.ДатаДоставки = НачалоДня(ТекущаяДата() + (1*24*60*60)) + (Объект.ПодразделениеКонтрагента.ДатаДоставки - НачалоДня(Объект.ПодразделениеКонтрагента.ДатаДоставки));
				//Иначе
				//	Объект.ДатаПоступления = КонецДня(ТекущаяДата()) + 1*24*60*60;
				//	Объект.ДатаДоставки = КонецДня(ТекущаяДата()) + 1*24*60*60;
				//КонецЕсли; 
			Иначе
				Объект.ДатаПоступления = КонецДня(ТекущаяДата()) + 1*24*60*60;
				Объект.ДатаДоставки = КонецДня(ТекущаяДата()) + 1*24*60*60;
			КонецЕсли;
		Иначе
			Объект.ДатаПоступления = КонецДня(ТекущаяДата()) + 1*24*60*60;
			Объект.ДатаДоставки = КонецДня(ТекущаяДата()) + 1*24*60*60;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.СпособДоставки) Тогда
			ТекСпособДоставки =  Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("СпособДоставкиПоУмолчанию");
			Объект.СпособДоставки = ?(ЗначениеЗаполнено(ТекСпособДоставки), ТекСпособДоставки, Справочники.СпособыДоставки.Самовывоз);
		КонецЕсли;
	Иначе
		Если Объект.Склад = сабОперОбщегоНазначения.ПолучитьСкладПоДопСвойству(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Склад возврата (Склады)", Истина), Объект.Предприятие) Тогда
			Элементы.Склад.Доступность = Ложь;
		КонецЕсли; 
		
		УстановитьДоступностьДокумента();
		
	КонецЕсли;
	
	КонтрагентПриИзмененииСервер(Ложь);
	//заполнить артикулы
	ЗаполнитьАртикулы();
	
	//Заполним тару, если ведется уч тары
	ВедетсяУчетТары = Ложь;
	Если ВедетсяУчетТары Тогда
		ЗаполнитьТаблицуПоТаре();
		ЗаполнитьЗначенияТары();
	КонецЕсли;
	
	СпособДоставкиПриИзмененииНаСервере(Неопределено);
	
	ЗаполнитьОстаткиИРезервы();
	ЗаполнитьКонтрольМинЦены();
	
	БезвозмезднаяПередачаПриИзмененииНаСервере(Ложь);
	
	Элементы.Договор.АвтоОтметкаНезаполненного = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("ПроверятьЗаполнениеДоговоровВДокументах");
	
	Если Параметры.Свойство("Номенклатура") Тогда
		ТекСтроки = Объект.ТабличнаяЧасть.НайтиСтроки(Новый Структура("Номенклатура", Параметры.Номенклатура));
		Для каждого ТекСтрока Из ТекСтроки Цикл
			ТекИдентиф = ТекСтрока.ПолучитьИдентификатор();
			Элементы.ТабличнаяЧасть.ТекущаяСтрока = ТекИдентиф;
		    Прервать;
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьМаршрутныйЛист();
	
	//Получение документов для которых заказ является основанием
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РеализацияТоваровУслуг.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Заказ = &Заказ
		|	И НЕ РеализацияТоваровУслуг.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УЧ_Реализация.Ссылка
		|ИЗ
		|	Документ.УЧ_Реализация КАК УЧ_Реализация
		|ГДЕ
		|	УЧ_Реализация.ДокОснование = &Заказ
		|	И НЕ УЧ_Реализация.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РозничнаяПродажа.Ссылка
		|ИЗ
		|	Документ.РозничнаяПродажа КАК РозничнаяПродажа
		|ГДЕ
		|	РозничнаяПродажа.Заказ = &Заказ
		|	И НЕ РозничнаяПродажа.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПередачаТоваров.Ссылка
		|ИЗ
		|	Документ.ПередачаТоваров КАК ПередачаТоваров
		|ГДЕ
		|	ПередачаТоваров.Заказ = &Заказ
		|	И НЕ ПередачаТоваров.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказНаВозвратОтКлиента.Ссылка
		|ИЗ
		|	Документ.ЗаказНаВозвратОтКлиента КАК ЗаказНаВозвратОтКлиента
		|ГДЕ
		|	ЗаказНаВозвратОтКлиента.ДокументОснование = &Заказ
		|	И НЕ ЗаказНаВозвратОтКлиента.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказНаПроизводство.Ссылка
		|ИЗ
		|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
		|ГДЕ
		|	ЗаказНаПроизводство.ДокОснование = &Заказ
		|	И НЕ ЗаказНаПроизводство.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказПоставщику.Ссылка
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
		|ГДЕ
		|	ЗаказПоставщику.ДокОснование = &Заказ
		|	И НЕ ЗаказПоставщику.ПометкаУдаления
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СчетНаОплатуПокупателю.Ссылка
		|ИЗ
		|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
		|ГДЕ
		|	СчетНаОплатуПокупателю.Заказ = &Заказ
		|	И НЕ СчетНаОплатуПокупателю.ПометкаУдаления
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТребованиеНакладная.Ссылка
		|ИЗ
		|	Документ.ТребованиеНакладная КАК ТребованиеНакладная
		|ГДЕ
		|	ТребованиеНакладная.Заказ = &Заказ
		|	И НЕ ТребованиеНакладная.ПометкаУдаления";  
		Запрос.УстановитьПараметр("Заказ", Объект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Количество() = 1 Тогда
				Выборка.Следующий();
				ОснованиеДляДокумента = Выборка.Ссылка;	
			Иначе
				СписокДокументовВведенныхНаОсновании = Новый СписокЗначений; 
				Пока Выборка.Следующий() Цикл
					СписокДокументовВведенныхНаОсновании.Добавить(Выборка.Ссылка);
				КонецЦикла;
				ОснованиеДляДокументаСписок = СписокДокументовВведенныхНаОсновании;
				ОснованиеДляДокумента = "Несколько документов >>>";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.Найти("АвтообновленияЗаблокированы") = Неопределено Тогда
		НовыйЭлемент = Элементы.Добавить("АвтообновленияЗаблокированы", Тип("ПолеФормы"),Элементы.ГруппаКомментарийОснование);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
		НовыйЭлемент.ВидФлажка = ВидФлажка.Выключатель;
		//НовыйЭлемент.В = = ВидПоляФормы.ПолеФлажка; 
		НовыйЭлемент.ПутьКДанным = "Объект.АвтообновленияЗаблокированы";
	КонецЕсли;
	
	Элементы.ТабличнаяЧастьКоличествоВУпаковке.Видимость = Не АльтернативнаяФорма; 
	Элементы.ТабличнаяЧастьКоличествоВУпаковкеПредставление.Видимость = АльтернативнаяФорма;
	Элементы.ТабличнаяЧастьКоличествоУпаковок.Видимость = Не АльтернативнаяФорма;
	Элементы.ТабличнаяЧастьКоличествоУпаковокПредставление.Видимость = АльтернативнаяФорма;
	//Элементы.ТабличнаяЧастьКоличество.ТолькоПросмотр = Не АльтернативнаяФорма;
	Элементы.ТабличнаяЧастьГруппаЕдиницаИзмерения.ОтображатьВШапке = АльтернативнаяФорма;
    Элементы.ТабличнаяЧастьЕдиницаИзмерения.ОтображатьВШапке = Не АльтернативнаяФорма;
	Элементы.ТабличнаяЧастьЗабронировать.Видимость = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройкиКонстанты("сабБронированиеТоваровВЗаказах");	
	
	ВнутрихолдинговоеДвижение = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("ВнутрихолдинговоеДвижение");
	сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "ФормаДокументЗаказКлиентаСоздатьВнутрихолдинговоеДвижение", "Видимость", ВнутрихолдинговоеДвижение);
	ВключенаНастройкаДляФормы2 = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("КонтрольНоменклатурыДляФормы2ВЗаказеКлиента");
	Если ВключенаНастройкаДляФормы2 Тогда
		УстановитьЗначениеРеквизитаФорма2();
	КонецЕсли; 
	ВозможноЧастичноеИсполнениеЗаказов = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("ВозможноЧастичноеИсполнениеЗаказов");
	Если ЗначениеЗаполнено(Объект.Ссылка) И ВозможноЧастичноеИсполнениеЗаказов Тогда
		ЗаполнитьКолонкуОтгружено();
	КонецЕсли; 
	Элементы.ТабличнаяЧастьОтгружено.Видимость = ВозможноЧастичноеИсполнениеЗаказов; 
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ЗаполнитьЗадолженностьКонтрагента();
	Иначе 
		Если Объект.ЗадолженностьДни = 0 Тогда
			ЗадолженностьНадпись = "Задолженность по оплате отсутствует";
		Иначе
			ЗадолженностьНадпись = "Задолженность по оплате " + Объект.ЗадолженностьДни + " дн. (" + Строка(Объект.ЗадолженностьСумма) + " руб.)";
		КонецЕсли;;  
	КонецЕсли;
	
	ТранзитныйГрузПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗадолженностьКонтрагента(ТекОбъект = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	#Область Исходныйзапрос
	//Запрос.Текст = 
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	УчетныйОстатки.Предприятия КАК Предприятия,
	//|	УчетныйОстатки.Субконто2 КАК Договор,
	//|	УчетныйОстатки.Субконто3 КАК Документ,
	//|	УчетныйОстатки.СуммаОстаток КАК СуммаОстаток,
	//|	УчетныйОстатки.Подразделение КАК Подразделение,
	//|	УчетныйОстатки.Субконто3.Дата КАК ДатаДокумента
	//|ПОМЕСТИТЬ ВТ_НачДанные
	//|ИЗ
	//|	РегистрБухгалтерии.Учетный.Остатки(
	//|			&ТекДата,
	//|			Счет.Код = ""62.01"",
	//|			,
	//|			СценарийПлана = &Сценарий
	//|				И Предприятия = &Предприятия
	//|				И (ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты)) = &Контрагент) КАК УчетныйОстатки
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТ_НачДанные.Документ КАК Документ,
	//|	РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(ВТ_НачДанные.ДатаДокумента, ДЕНЬ, ЕСТЬNULL(ОтсрочкаПоДоговорамСрезПоследних.Отсрочка, 0)), &ТекДата, ДЕНЬ) КАК ДниПросрочки,
	//|	ВТ_НачДанные.СуммаОстаток КАК СуммаОстаток
	//|ПОМЕСТИТЬ ВТДокументы
	//|ИЗ
	//|	ВТ_НачДанные КАК ВТ_НачДанные
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтсрочкаПоДоговорам.СрезПоследних(&ТекДата, ) КАК ОтсрочкаПоДоговорамСрезПоследних
	//|		ПО ВТ_НачДанные.Договор = ОтсрочкаПоДоговорамСрезПоследних.Договор
	//|ГДЕ
	//|	ВТ_НачДанные.СуммаОстаток > 0
	//|	И РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(ВТ_НачДанные.ДатаДокумента, ДЕНЬ, ЕСТЬNULL(ОтсрочкаПоДоговорамСрезПоследних.Отсрочка, 0)), &ТекДата, ДЕНЬ) > 0
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ ПЕРВЫЕ 1
	//|	ВТ_НачДанные.Договор КАК Договор,
	//|	ВТ_НачДанные.Документ КАК Документ,
	//|	ВТ_НачДанные.СуммаОстаток КАК СуммаОстаток,
	//|	ВТ_НачДанные.Подразделение КАК Подразделение,
	//|	ВТ_НачДанные.ДатаДокумента КАК ДатаДокумента,
	//|	ОтсрочкаПоДоговорамСрезПоследних.Отсрочка КАК Отсрочка,
	//|	РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(ВТ_НачДанные.ДатаДокумента, ДЕНЬ, ЕСТЬNULL(ОтсрочкаПоДоговорамСрезПоследних.Отсрочка, 0)), &ТекДата, ДЕНЬ) КАК ДниПросрочки
	//|ИЗ
	//|	ВТ_НачДанные КАК ВТ_НачДанные
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтсрочкаПоДоговорам.СрезПоследних(&ТекДата, ) КАК ОтсрочкаПоДоговорамСрезПоследних
	//|		ПО ВТ_НачДанные.Договор = ОтсрочкаПоДоговорамСрезПоследних.Договор
	//|ГДЕ
	//|	ВТ_НачДанные.СуммаОстаток > 0
	//|	И РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(ВТ_НачДанные.ДатаДокумента, ДЕНЬ, ЕСТЬNULL(ОтсрочкаПоДоговорамСрезПоследних.Отсрочка, 0)), &ТекДата, ДЕНЬ) > 0
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	ДниПросрочки УБЫВ";     
	#КонецОбласти
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетныйОстатки.Предприятия КАК Предприятия,
	|	УчетныйОстатки.Субконто2 КАК Договор,
	|	УчетныйОстатки.Субконто3 КАК Документ,
	|	УчетныйОстатки.СуммаОстаток КАК СуммаОстаток,
	|	УчетныйОстатки.Подразделение КАК Подразделение,
	|	УчетныйОстатки.Субконто3.Дата КАК ДатаДокумента
	|ПОМЕСТИТЬ ВТ_НачДанные
	|ИЗ
	|	РегистрБухгалтерии.Учетный.Остатки(
	|			&ТекДата,
	|			Счет.Код = ""62.01"",
	|			,
	|			СценарийПлана = &Сценарий
	|				И Предприятия = &Предприятия
	|				И (ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты)) = &Контрагент) КАК УчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_НачДанные.Документ КАК Документ,
	|	РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(ВТ_НачДанные.ДатаДокумента, ДЕНЬ, ЕСТЬNULL(ОтсрочкаПоДоговорамСрезПоследних.Отсрочка, 0)), &ТекДата, ДЕНЬ) КАК ДниПросрочки,
	|	ВТ_НачДанные.СуммаОстаток КАК СуммаОстаток,
	|	ЕСТЬNULL(ВТ_НачДанные.Документ.СуммаДокумента, 0) КАК СуммаДокумента
	|ИЗ
	|	ВТ_НачДанные КАК ВТ_НачДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтсрочкаПоДоговорам.СрезПоследних(&ТекДата, ) КАК ОтсрочкаПоДоговорамСрезПоследних
	|		ПО ВТ_НачДанные.Договор = ОтсрочкаПоДоговорамСрезПоследних.Договор
	|ГДЕ
	|	ВТ_НачДанные.СуммаОстаток > 0
	|	И РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(ВТ_НачДанные.ДатаДокумента, ДЕНЬ, ЕСТЬNULL(ОтсрочкаПоДоговорамСрезПоследних.Отсрочка, 0)), &ТекДата, ДЕНЬ) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_НачДанные.ДатаДокумента УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВТ_НачДанные.СуммаОстаток) КАК СуммаОстаток,
	|	МАКСИМУМ(РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(ВТ_НачДанные.ДатаДокумента, ДЕНЬ, ЕСТЬNULL(ОтсрочкаПоДоговорамСрезПоследних.Отсрочка, 0)), &ТекДата, ДЕНЬ)) КАК ДниПросрочки
	|ИЗ
	|	ВТ_НачДанные КАК ВТ_НачДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтсрочкаПоДоговорам.СрезПоследних(&ТекДата, ) КАК ОтсрочкаПоДоговорамСрезПоследних
	|		ПО ВТ_НачДанные.Договор = ОтсрочкаПоДоговорамСрезПоследних.Договор
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВТ_НачДанные.СуммаОстаток) > 0 И
	|	МАКСИМУМ(РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(ВТ_НачДанные.ДатаДокумента, ДЕНЬ, ЕСТЬNULL(ОтсрочкаПоДоговорамСрезПоследних.Отсрочка, 0)), &ТекДата, ДЕНЬ)) > 0";
	
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("Предприятия", Объект.Предприятие);
	Запрос.УстановитьПараметр("Сценарий", Справочники.СценарииПланирования.СценарийФакт());
	Если ЗначениеЗаполнено(Объект.ДатаДоставки) Тогда
		Запрос.УстановитьПараметр("ТекДата", Объект.ДатаДоставки); 
	ИначеЕсли ЗначениеЗаполнено(Объект.ДатаПоступления) Тогда
		Запрос.УстановитьПараметр("ТекДата", Объект.ДатаПоступления); 
	ИначеЕсли ЗначениеЗаполнено(Объект.Дата) Тогда
		Запрос.УстановитьПараметр("ТекДата", Объект.Дата);
	Иначе
		Запрос.УстановитьПараметр("ТекДата",ТекущаяДата());
	КонецЕсли; 
	ДокументыЗадолженности.Очистить();
	РезультатЗапроса = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	Если РезультатЗапроса[2].Пустой() Тогда
		ЗадолженностьНадпись = "Задолженность по оплате отсутствует";
		Если ТекОбъект = Неопределено Тогда
			Объект.ЗадолженностьДни = 0;
		Иначе
			ТекОбъект.ЗадолженностьДни = 0;
		КонецЕсли;
	Иначе
		ВыборкаЗадолженность = РезультатЗапроса[2].Выбрать();
		ВыборкаДокумент = РезультатЗапроса[1].Выбрать(); 
		ВыборкаЗадолженность.Следующий();

		#Область ИсходныйКод
		//ОбщаяСуммаЗадолженности = 0;
		//Пока ВыборкаДокумент.Следующий() Цикл
		//	ДокументыЗадолженности.Добавить(ВыборкаДокумент.Документ,Строка(ВыборкаДокумент.Документ)  + " ("	+ Строка(ВыборкаДокумент.СуммаОстаток) + ")");
		//	ОбщаяСуммаЗадолженности = ОбщаяСуммаЗадолженности + ВыборкаДокумент.СуммаОстаток;
		//КонецЦикла;  
		//Выборка = РезультатЗапроса[2].Выбрать();
		//Выборка.Следующий();
		//ЗадолженностьНадпись = "Задолженность по оплате " + Выборка.ДниПросрочки + " дн. (" + Строка(ОбщаяСуммаЗадолженности) + " руб.)";  
		//Если ТекОбъект = Неопределено Тогда
		//	Объект.ЗадолженностьДни =  Выборка.ДниПросрочки;
		//	Объект.ЗадолженностьСумма = ОбщаяСуммаЗадолженности;	
		//Иначе
		//	ТекОбъект.ЗадолженностьДни =  Выборка.ДниПросрочки;
		//	ТекОбъект.ЗадолженностьСумма = ОбщаяСуммаЗадолженности;
		//КонецЕсли;
		#КонецОбласти
		ОбщаяСуммаЗадолженности = ВыборкаЗадолженность.СуммаОстаток;
		КоличествоДнейПросрочки = 0;
		ОсталосьРаспределитьЗадолженность = ОбщаяСуммаЗадолженности;
		ИтоговаяЗадолженность = 0;
		Пока ВыборкаДокумент.Следующий() И ОсталосьРаспределитьЗадолженность > 0 Цикл
			Распределить = Мин(ВыборкаДокумент.СуммаДокумента,ОсталосьРаспределитьЗадолженность); 
			ДокументыЗадолженности.Добавить(ВыборкаДокумент.Документ,Строка(ВыборкаДокумент.Документ)  + " ("	+ Строка(Распределить) + ")");
			ОсталосьРаспределитьЗадолженность = ОсталосьРаспределитьЗадолженность - Распределить;
			КоличествоДнейПросрочки = ВыборкаДокумент.ДниПросрочки; 
			ИтоговаяЗадолженность = ИтоговаяЗадолженность + Распределить; 
		КонецЦикла;  
		
		ЗадолженностьНадпись = "Задолженность по оплате " + КоличествоДнейПросрочки + " дн. (" + Строка(ИтоговаяЗадолженность) + " руб.)";  
		Если ТекОбъект = Неопределено Тогда
			Объект.ЗадолженностьДни =  КоличествоДнейПросрочки;
			Объект.ЗадолженностьСумма = ОбщаяСуммаЗадолженности;	
		Иначе
			ТекОбъект.ЗадолженностьДни =  КоличествоДнейПросрочки;
			ТекОбъект.ЗадолженностьСумма = ОбщаяСуммаЗадолженности;
		КонецЕсли;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры
&НаСервере
Процедура УстановитьЗначениеРеквизитаФорма2()
	
	ЭтоКопирование = Ложь;
	Если Параметры.Свойство("ЗначениеКопирования") Тогда
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ЭтоКопирование = Истина;
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Ссылка) И Не ЭтоКопирование Тогда
		Возврат;
	КонецЕсли;
	Если Объект.ТабличнаяЧасть.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Если ЭтоКопирование Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Номенклатура.Форма2 КАК Форма2
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&МассивНоменклатуры)
		|	И НЕ Номенклатура.Форма2";
		Запрос.УстановитьПараметр("МассивНоменклатуры", Объект.ТабличнаяЧасть.Выгрузить(,"Номенклатура").ВыгрузитьКолонку("Номенклатура"));
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Форма2 = Истина;
		КонецЕсли;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказКлиентаТабличнаяЧасть.Номенклатура.Форма2 КАК НоменклатураФорма2
		|ИЗ
		|	Документ.ЗаказКлиента.ТабличнаяЧасть КАК ЗаказКлиентаТабличнаяЧасть
		|ГДЕ
		|	НЕ ЗаказКлиентаТабличнаяЧасть.Номенклатура.Форма2
		|	И ЗаказКлиентаТабличнаяЧасть.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Форма2 = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьПредставлениеЕдиницыУпаковки(Номенклатура = Неопределено, ЕдиницаИзмерения = Неопределено, ДляОднойНоменклатуры = Истина, ТЗДанные = Неопределено)
	
	Если ДляОднойНоменклатуры Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УпаковкиНоменклатуры.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения 
		|ИЗ
		|	РегистрСведений.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
		|ГДЕ
		|	УпаковкиНоменклатуры.Номенклатура = &Номенклатура
		|	И УпаковкиНоменклатуры.Упаковка = &Упаковка";
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("Упаковка", ЕдиницаИзмерения);
		
		Выборка = запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.ЕдиницаИзмерения;		
		КонецЦикла;
		
		Возврат ЕдиницаИзмерения.Наименование;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗНоменклатураУпаковки.Номенклатура КАК Номенклатура,
		|	ТЗНоменклатураУпаковки.ЕдиницаИзмерения КАК Упаковка
		|ПОМЕСТИТЬ ВТНоменклатураУпаковка
		|ИЗ
		|	&ТЗНоменклатураУпаковки КАК ТЗНоменклатураУпаковки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(УпаковкиНоменклатуры.ЕдиницаИзмерения.Представление, ВТНоменклатураУпаковка.Упаковка) КАК ЕдиницаИзмерения, 
		|	ВТНоменклатураУпаковка.Упаковка КАК Упаковка,
		|	ВТНоменклатураУпаковка.Упаковка.Представление КАК УпаковкаПредставление,
		|	ВТНоменклатураУпаковка.Номенклатура КАК Номенклатура
		|ИЗ
		|	ВТНоменклатураУпаковка КАК ВТНоменклатураУпаковка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
		|		ПО ВТНоменклатураУпаковка.Номенклатура = УпаковкиНоменклатуры.Номенклатура
		|			И ВТНоменклатураУпаковка.Упаковка = УпаковкиНоменклатуры.Упаковка";
		Запрос.УстановитьПараметр("ТЗНоменклатураУпаковки",ТЗДанные);
		
		Выборка = запрос.Выполнить().Выбрать();
		Возврат Выборка;
	КонецЕсли;
	
КонецФункции	


&НаСервере
Процедура ЗаполнитьМаршрутныйЛист()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда	
		МаршрутныйЛист = Документы.сабМаршрутныйЛист.ПолучитьМаршрутныйЛистПоЗаказу(Объект.Ссылка);			
	КонецЕсли;
	
	Элементы.МаршрутныйЛист.Видимость = ЗначениеЗаполнено(МаршрутныйЛист);
	
КонецПроцедуры


&НаСервере
Процедура УстановкаЗапретаРедактированияЦен(Изменять)
	
	ЗапретРедактированияЦенВЗаказе = РольДоступна("допЗапретРедактированияЦенВЗаказе");
	
	Если Не ЗначениеЗаполнено(Объект.Договор.ТипЦен) Тогда
		ЗапретРедактированияЦенВЗаказе = Ложь;
	КонецЕсли;	
	
	//Элементы.ТабличнаяЧастьОбновитьЦену.Доступность = Не ЗапретРедактированияЦенВЗаказе;
	
	//Если Изменять И НЕ Объект.БезвозмезднаяПередача Тогда
	//	Объект.ПродажаВРозницу = Объект.Договор.ПриоритетныйПорядокРасчетов = Перечисления.Д_ИсточникиСредств.Нал;	
	//КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьОстаткиИРезервы(РасчетПоСтроке = Ложь, СтруктураДанных = Неопределено)
	
	СрезОстатковНаДатуЗаказа = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("СрезОстатковНаДатуЗаказа");
	Если Не СрезОстатковНаДатуЗаказа Тогда
		ДатаОстатков = ТекущаяДата();
	Иначе 
		ДатаОстатков = Объект.Дата;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаказЗакрыт = Объект.Статус = Перечисления.СтатусыЗаказовКлиентов.Отгружен ИЛИ Объект.Статус = Перечисления.СтатусыЗаказовКлиентов.Отменен;
	
	ОбъектМодуль = РеквизитФормыВЗначение("Объект");
	
	//остатки
	СтруктураИмен = УЧ_Сервер.СформироватьСтруктуруИмен(ОбъектМодуль);
	
	СтруктураСоответствий = УЧ_Сервер.ПоучитьСоответствияСчетовНоменклатуры(ОбъектМодуль, СтруктураИмен);
	СоответствиеСчета = СтруктураСоответствий.Соответствия;
	СоответствиеУчетаПоПодразделениям = СтруктураСоответствий.СоответствияУчетаПодразделений;
	
	//ТаблицаОстатков = УЧ_Сервер.ПолучитьТаблицуОстатков(ОбъектМодуль, СтруктураИмен, СтруктураСоответствий, НачалоДня(ДатаОстатков), Истина);
		ТаблицаОстатков = УЧ_Сервер.ПолучитьТаблицуОстатков(ОбъектМодуль, СтруктураИмен, СтруктураСоответствий, ДатаОстатков, Истина,,Истина);

	РезультатОстатки = ТаблицаОстатков.РезультатОстатки;
	РезультатКонтроль = ТаблицаОстатков.РезультатКонтроль;
	
	Если РасчетПоСтроке Тогда
			СтруктураДанных.КоличествоНаОстатках = 0; 
			НайденныеСтроки = РезультатОстатки.НайтиСтроки(Новый Структура("Номенклатура, Склад", СтруктураДанных.Номенклатура, ?(ЗначениеЗаполнено(Объект.Склад), Объект.Склад, СтруктураДанных.Склад)));
			Для каждого ТекСтрокаНайденная Из НайденныеСтроки Цикл
				СтруктураДанных.КоличествоНаОстатках = СтруктураДанных.КоличествоНаОстатках + ТекСтрокаНайденная.КоличествоОстаток;		
			КонецЦикла;	
	Иначе
		Для каждого ТекСтрока Из Объект.ТабличнаяЧасть Цикл
			ТекСтрока.КоличествоНаОстатках = 0; 
			НайденныеСтроки = РезультатОстатки.НайтиСтроки(Новый Структура("Номенклатура, Склад", ТекСтрока.Номенклатура, ?(ЗначениеЗаполнено(Объект.Склад), Объект.Склад, ТекСтрока.Склад)));
			Для каждого ТекСтрокаНайденная Из НайденныеСтроки Цикл
				ТекСтрока.КоличествоНаОстатках = ТекСтрока.КоличествоНаОстатках + ТекСтрокаНайденная.КоличествоОстаток;		
			КонецЦикла;	
		КонецЦикла;
	КонецЕсли;
	
	//резервы
	ВремТЧЗаказы.Очистить();
	ВремТЧЗаказыПоставщикам.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УчетныйОбороты.Субконто1 КАК Номенклатура,
	               |	УчетныйОбороты.Субконто2 КАК Склад,
	               |	УчетныйОбороты.Предприятия КАК Предприятие,
	               |	СУММА(УчетныйОбороты.КоличествоОборот) КАК Оборот,
	               |	СУММА(УчетныйОбороты.КоличествоОборотДт) КАК КоличествоПоставка,
	               |	СУММА(УчетныйОбороты.КоличествоОборотКт) КАК Количество,
	               |	ВЫБОР
	               |		КОГДА УчетныйОбороты.Период < НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
	               |			ТОГДА НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
	               |		ИНАЧЕ НАЧАЛОПЕРИОДА(УчетныйОбороты.Период, ДЕНЬ)
	               |	КОНЕЦ КАК Дата,
	               |	ВЫБОР
	               |		КОГДА &НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов
	               |				ИЛИ УчетныйОбороты.Субконто3 ЕСТЬ NULL
	               |			ТОГДА УчетныйОбороты.Регистратор
	               |		ИНАЧЕ УчетныйОбороты.Субконто3
	               |	КОНЕЦ КАК Заказ,
	               |	ВЫБОР
	               |		КОГДА &НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов
	               |				ИЛИ УчетныйОбороты.Субконто3 ЕСТЬ NULL
	               |			ТОГДА ВЫБОР
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказКлиента)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказКлиента).ДатаПоступления
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказНаВозвратОтКлиента)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказНаВозвратОтКлиента).ДатаПоступления
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказПоставщику)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказПоставщику).ДатаПоступления
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказНаПроизводство)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказНаПроизводство).ДатаПроизводства
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.Уч_Реализация)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_Реализация).Дата
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.УЧ_Возврат)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_Возврат).Дата
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.УЧ_ПоступлениеТоваров)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_ПоступлениеТоваров).Дата
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.УЧ_Возврат)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_Возврат).Дата
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказНаПеремещение)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказНаПеремещение).ДатаПоступления
	               |					ИНАЧЕ УчетныйОбороты.Период
	               |				КОНЕЦ
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Субконто3) = ТИП(Документ.ЗаказКлиента)
	               |					ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Субконто3 КАК Документ.ЗаказКлиента).ДатаПоступления
	               |				КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Субконто3) = ТИП(Документ.ЗаказНаВозвратОтКлиента)
	               |					ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Субконто3 КАК Документ.ЗаказНаВозвратОтКлиента).ДатаПоступления
	               |				КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Субконто3) = ТИП(Документ.ЗаказПоставщику)
	               |					ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Субконто3 КАК Документ.ЗаказПоставщику).ДатаПоступления
	               |				КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Субконто3) = ТИП(Документ.ЗаказНаПроизводство)
	               |					ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Субконто3 КАК Документ.ЗаказНаПроизводство).ДатаПроизводства
	               |				КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказНаПеремещение)
	               |					ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказНаПеремещение).ДатаПоступления
	               |				ИНАЧЕ УчетныйОбороты.Период
	               |			КОНЕЦ
	               |	КОНЕЦ КАК ДатаЗаказа,
	               |	ВЫБОР
	               |		КОГДА &НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов
	               |				ИЛИ УчетныйОбороты.Субконто3 ЕСТЬ NULL
	               |			ТОГДА ВЫБОР
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказКлиента)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказКлиента).Контрагент
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказНаВозвратОтКлиента)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказНаВозвратОтКлиента).Контрагент
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказПоставщику)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказПоставщику).Контрагент
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.Уч_Реализация)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_Реализация).Контрагент
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.УЧ_Возврат)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_Возврат).Контрагент
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.УЧ_ПоступлениеТоваров)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_ПоступлениеТоваров).Контрагент
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.УЧ_Возврат)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_Возврат).Контрагент
	               |				КОНЕЦ
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Субконто3) = ТИП(Документ.ЗаказКлиента)
	               |					ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Субконто3 КАК Документ.ЗаказКлиента).Контрагент
	               |				КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Субконто3) = ТИП(Документ.ЗаказНаВозвратОтКлиента)
	               |					ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Субконто3 КАК Документ.ЗаказНаВозвратОтКлиента).Контрагент
	               |				КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Субконто3) = ТИП(Документ.ЗаказПоставщику)
	               |					ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Субконто3 КАК Документ.ЗаказПоставщику).Контрагент
	               |			КОНЕЦ
	               |	КОНЕЦ КАК Контрагент
	               |ИЗ
	               |	РегистрБухгалтерии.Учетный.Обороты(
	               |			,
	               |			,
	               |			Регистратор,
	               |			Счет.Код = ""0041"",
	               |			,
	               |			Предприятия В (&Предприятие)
	               |				И Субконто1 В (&Номенклатура)
	               |				И (Субконто2 В (&Склад)
	               |					ИЛИ НЕ &НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов = ИСТИНА),
	               |			,
	               |			) КАК УчетныйОбороты
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА &ВсеНезакрытыеЗаказы
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ УчетныйОбороты.Период >= НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
	               |		КОНЕЦ
	               |	И НЕ УчетныйОбороты.Регистратор = &ЭтаСсылка
	               |	И (НЕ УчетныйОбороты.Субконто3 = &ЭтаСсылка
	               |			ИЛИ УчетныйОбороты.Субконто3 ЕСТЬ NULL)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВЫБОР
	               |		КОГДА &НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов
	               |				ИЛИ УчетныйОбороты.Субконто3 ЕСТЬ NULL
	               |			ТОГДА УчетныйОбороты.Регистратор
	               |		ИНАЧЕ УчетныйОбороты.Субконто3
	               |	КОНЕЦ,
	               |	УчетныйОбороты.Субконто1,
	               |	УчетныйОбороты.Субконто2,
	               |	УчетныйОбороты.Предприятия,
	               |	ВЫБОР
	               |		КОГДА УчетныйОбороты.Период < НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
	               |			ТОГДА НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
	               |		ИНАЧЕ НАЧАЛОПЕРИОДА(УчетныйОбороты.Период, ДЕНЬ)
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА &НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов
	               |				ИЛИ УчетныйОбороты.Субконто3 ЕСТЬ NULL
	               |			ТОГДА ВЫБОР
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказКлиента)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказКлиента).Контрагент
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказНаВозвратОтКлиента)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказНаВозвратОтКлиента).Контрагент
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказПоставщику)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказПоставщику).Контрагент
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.Уч_Реализация)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_Реализация).Контрагент
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.УЧ_Возврат)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_Возврат).Контрагент
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.УЧ_ПоступлениеТоваров)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_ПоступлениеТоваров).Контрагент
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.УЧ_Возврат)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_Возврат).Контрагент
	               |				КОНЕЦ
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Субконто3) = ТИП(Документ.ЗаказКлиента)
	               |					ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Субконто3 КАК Документ.ЗаказКлиента).Контрагент
	               |				КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Субконто3) = ТИП(Документ.ЗаказНаВозвратОтКлиента)
	               |					ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Субконто3 КАК Документ.ЗаказНаВозвратОтКлиента).Контрагент
	               |				КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Субконто3) = ТИП(Документ.ЗаказПоставщику)
	               |					ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Субконто3 КАК Документ.ЗаказПоставщику).Контрагент
	               |			КОНЕЦ
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА &НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов
	               |				ИЛИ УчетныйОбороты.Субконто3 ЕСТЬ NULL
	               |			ТОГДА ВЫБОР
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказКлиента)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказКлиента).ДатаПоступления
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказНаВозвратОтКлиента)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказНаВозвратОтКлиента).ДатаПоступления
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказПоставщику)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказПоставщику).ДатаПоступления
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказНаПроизводство)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказНаПроизводство).ДатаПроизводства
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.Уч_Реализация)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_Реализация).Дата
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.УЧ_Возврат)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_Возврат).Дата
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.УЧ_ПоступлениеТоваров)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_ПоступлениеТоваров).Дата
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.УЧ_Возврат)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_Возврат).Дата
	               |					КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказНаПеремещение)
	               |						ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказНаПеремещение).ДатаПоступления
	               |					ИНАЧЕ УчетныйОбороты.Период
	               |				КОНЕЦ
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Субконто3) = ТИП(Документ.ЗаказКлиента)
	               |					ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Субконто3 КАК Документ.ЗаказКлиента).ДатаПоступления
	               |				КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Субконто3) = ТИП(Документ.ЗаказНаВозвратОтКлиента)
	               |					ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Субконто3 КАК Документ.ЗаказНаВозвратОтКлиента).ДатаПоступления
	               |				КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Субконто3) = ТИП(Документ.ЗаказПоставщику)
	               |					ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Субконто3 КАК Документ.ЗаказПоставщику).ДатаПоступления
	               |				КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Субконто3) = ТИП(Документ.ЗаказНаПроизводство)
	               |					ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Субконто3 КАК Документ.ЗаказНаПроизводство).ДатаПроизводства
	               |				КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказНаПеремещение)
	               |					ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказНаПеремещение).ДатаПоступления
	               |				ИНАЧЕ УчетныйОбороты.Период
	               |			КОНЕЦ
	               |	КОНЕЦ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	УчетныйОбороты.Субконто1,
	               |	УчетныйОбороты.Субконто2,
	               |	УчетныйОбороты.Предприятия,
	               |	УчетныйОбороты.КоличествоОборот,
	               |	УчетныйОбороты.КоличествоОборотДт,
	               |	0,
	               |	ВЫБОР
	               |		КОГДА УчетныйОбороты.Период < НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
	               |			ТОГДА НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
	               |		ИНАЧЕ НАЧАЛОПЕРИОДА(УчетныйОбороты.Период, ДЕНЬ)
	               |	КОНЕЦ,
	               |	УчетныйОбороты.Регистратор,
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказКлиента)
	               |			ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказКлиента).ДатаПоступления
	               |		КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказНаВозвратОтКлиента)
	               |			ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказНаВозвратОтКлиента).ДатаПоступления
	               |		КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказПоставщику)
	               |			ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказПоставщику).ДатаПоступления
	               |		КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказНаПроизводство)
	               |			ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказНаПроизводство).ДатаПроизводства
	               |		КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.Уч_Реализация)
	               |			ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_Реализация).Дата
	               |		КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.УЧ_Возврат)
	               |			ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_Возврат).Дата
	               |		КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.УЧ_ПоступлениеТоваров)
	               |			ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_ПоступлениеТоваров).Дата
	               |		КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.УЧ_Возврат)
	               |			ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_Возврат).Дата
	               |		КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказНаПеремещение)
	               |			ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказНаПеремещение).ДатаПоступления
	               |		ИНАЧЕ УчетныйОбороты.Период
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказКлиента)
	               |			ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказКлиента).Контрагент
	               |		КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказНаВозвратОтКлиента)
	               |			ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказНаВозвратОтКлиента).Контрагент
	               |		КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.ЗаказПоставщику)
	               |			ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.ЗаказПоставщику).Контрагент
	               |		КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.Уч_Реализация)
	               |			ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_Реализация).Контрагент
	               |		КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.УЧ_Возврат)
	               |			ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_Возврат).Контрагент
	               |		КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.УЧ_ПоступлениеТоваров)
	               |			ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_ПоступлениеТоваров).Контрагент
	               |		КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.УЧ_Возврат)
	               |			ТОГДА ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_Возврат).Контрагент
	               |	КОНЕЦ
	               |ИЗ
	               |	РегистрБухгалтерии.Учетный.Обороты(
	               |			&Период,
	               |			,
	               |			Регистратор,
	               |			Счет.Код = ""41""
	               |				ИЛИ Счет.Родитель.Код = ""10""
	               |				ИЛИ Счет.Код = ""43"",
	               |			,
	               |			Предприятия В (&Предприятие)
	               |				И Субконто1 В (&Номенклатура)
	               |				И Субконто2 В (&Склад)
	               |				И &НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов,
	               |			,
	               |			) КАК УчетныйОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.сабОбработкаДокументов КАК сабОбработкаДокументов
	               |		ПО УчетныйОбороты.Регистратор = сабОбработкаДокументов.ДокументУУ
	               |			И (ВЫБОР
	               |				КОГДА ТИПЗНАЧЕНИЯ(сабОбработкаДокументов.ДокументБУ) = ТИП(Документ.РеализацияТоваровУслуг)
	               |					ТОГДА ВЫРАЗИТЬ(сабОбработкаДокументов.ДокументБУ КАК Документ.РеализацияТоваровУслуг).Заказ
	               |				КОГДА ТИПЗНАЧЕНИЯ(сабОбработкаДокументов.ДокументБУ) = ТИП(Документ.РозничнаяПродажа)
	               |					ТОГДА ВЫРАЗИТЬ(сабОбработкаДокументов.ДокументБУ КАК Документ.РозничнаяПродажа).Заказ
	               |				КОГДА ТИПЗНАЧЕНИЯ(сабОбработкаДокументов.ДокументБУ) = ТИП(Документ.ПередачаТоваров)
	               |					ТОГДА ВЫРАЗИТЬ(сабОбработкаДокументов.ДокументБУ КАК Документ.ПередачаТоваров).Заказ
	               |				КОГДА ТИПЗНАЧЕНИЯ(сабОбработкаДокументов.ДокументБУ) = ТИП(Документ.ОтчетПроизводстваЗаСмену)
	               |					ТОГДА ВЫРАЗИТЬ(сабОбработкаДокументов.ДокументБУ КАК Документ.ОтчетПроизводстваЗаСмену).Заказ
	               |				ИНАЧЕ НЕОПРЕДЕЛЕНО
	               |			КОНЕЦ = &ЭтаСсылка)
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА &ВсеНезакрытыеЗаказы
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ УчетныйОбороты.Период >= НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
	               |		КОНЕЦ
	               |	И НЕ УчетныйОбороты.Регистратор = &ЭтаСсылка
	               |	И ВЫБОР
	               |			КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.УЧ_Реализация)
	               |				ТОГДА НЕ ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_Реализация).ДокОснование = &ЭтаСсылка
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |	И сабОбработкаДокументов.ДокументБУ ЕСТЬ NULL
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаЗаказа";
	
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	Запрос.УстановитьПараметр("Номенклатура", Объект.ТабличнаяЧасть.Выгрузить(,"Номенклатура").ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("ВсеНезакрытыеЗаказы", Истина); //все заказы с проводками
	Запрос.УстановитьПараметр("НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов", НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов);
	Запрос.УстановитьПараметр("Период", ДатаОстатков);
	Запрос.УстановитьПараметр("Предприятие", Объект.Предприятие);
	//Статусы = Новый Массив;
	//Статусы.Добавить(Перечисления.СтатусыЗаказовКлиентов.Отгружен);
	//Статусы.Добавить(Перечисления.СтатусыЗаказовКлиентов.Отменен);
	//Запрос.УстановитьПараметр("Статус", Статусы);
	Запрос.УстановитьПараметр("ЭтаСсылка", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();
	
	Если РасчетПоСтроке Тогда
		
		СтруктураДанных.КоличествоВРезервах = 0;
		СтруктураДанных.КоличествоКПоставке = 0;
		СтруктураОтбора = Новый Структура("Номенклатура", СтруктураДанных.Номенклатура);
		Если НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов Тогда
			СтруктураОтбора.Вставить("Склад", ?(ЗначениеЗаполнено(Объект.Склад), Объект.Склад, СтруктураДанных.Склад)); 
		КонецЕсли;
		НайденныеСтроки = Выборка.НайтиСтроки(СтруктураОтбора);
		Для каждого ТекСтрокаНайденная Из НайденныеСтроки Цикл
			Если НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов И НачалоДня(ТекСтрокаНайденная.ДатаЗаказа) <= НачалоДня(ДатаОстатков) И НЕ ТипЗнч(ТекСтрокаНайденная.Заказ) = Тип("ДокументСсылка.ЗаказПоставщику") И НЕ ТипЗнч(ТекСтрокаНайденная.Заказ) = Тип("ДокументСсылка.ЗаказНаВозвратОтКлиента") 
				И НЕ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
				СтруктураДанных.КоличествоНаОстатках = СтруктураДанных.КоличествоНаОстатках + ТекСтрокаНайденная.КоличествоПоставка - ТекСтрокаНайденная.Количество;	
			//ИначеЕсли НачалоДня(ТекСтрокаНайденная.Дата) <= НачалоДня(Объект.ДатаПоступления) ИЛИ НачалоДня(ТекСтрокаНайденная.ДатаЗаказа) <= НачалоДня(Объект.Дата) Тогда	
			Иначе
				СтруктураДанных.КоличествоВРезервах = СтруктураДанных.КоличествоВРезервах + ТекСтрокаНайденная.Количество;
				СтруктураДанных.КоличествоКПоставке = СтруктураДанных.КоличествоКПоставке + ТекСтрокаНайденная.КоличествоПоставка;
			КонецЕсли;
		КонецЦикла;	
		
		Если НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов Тогда
			СтруктураДанных.КоличествоОстаток = СтруктураДанных.КоличествоНаОстатках - СтруктураДанных.КоличествоВРезервах - СтруктураДанных.Количество;
		Иначе	
			СтруктураДанных.КоличествоОстаток = СтруктураДанных.КоличествоНаОстатках + СтруктураДанных.КоличествоКПоставке - СтруктураДанных.КоличествоВРезервах - СтруктураДанных.Количество;
		КонецЕсли;
		
	Иначе
		
		Для каждого ТекСтрока Из Объект.ТабличнаяЧасть Цикл
			ТекСтрока.КоличествоВРезервах = 0; 
			ТекСтрока.КоличествоКПоставке = 0;
			СтруктураОтбора = Новый Структура("Номенклатура", ТекСтрока.Номенклатура);
			Если НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов Тогда
				СтруктураОтбора.Вставить("Склад", ?(ЗначениеЗаполнено(Объект.Склад), Объект.Склад, ТекСтрока.Склад)); 
			КонецЕсли;
			НайденныеСтроки = Выборка.НайтиСтроки(СтруктураОтбора);
			Для каждого ТекСтрокаНайденная Из НайденныеСтроки Цикл
				Если НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов И НачалоДня(ТекСтрокаНайденная.Дата) <= НачалоДня(ДатаОстатков) И НЕ ТипЗнч(ТекСтрокаНайденная.Заказ) = Тип("ДокументСсылка.ЗаказПоставщику") И НЕ ТипЗнч(ТекСтрокаНайденная.Заказ) = Тип("ДокументСсылка.ЗаказНаВозвратОтКлиента") 
					И НЕ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
					ТекСтрока.КоличествоНаОстатках = ТекСтрока.КоличествоНаОстатках + ТекСтрокаНайденная.КоличествоПоставка - ТекСтрокаНайденная.Количество;	
				//ИначеЕсли НачалоДня(ТекСтрокаНайденная.Дата) <= НачалоДня(Объект.ДатаПоступления) ИЛИ НачалоДня(ТекСтрокаНайденная.ДатаЗаказа) <= НачалоДня(Объект.Дата) Тогда	
				Иначе
					ТекСтрока.КоличествоВРезервах = ТекСтрока.КоличествоВРезервах + ТекСтрокаНайденная.Количество;
					ТекСтрока.КоличествоКПоставке = ТекСтрока.КоличествоКПоставке + ТекСтрокаНайденная.КоличествоПоставка;
				КонецЕсли;
			КонецЦикла;	
		КонецЦикла;
		
		Для каждого ТекСтрока Из Объект.ТабличнаяЧасть Цикл
			Если НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов Тогда
				ТекСтрока.КоличествоОстаток = ТекСтрока.КоличествоНаОстатках - ТекСтрока.КоличествоВРезервах - ТекСтрока.Количество; 
			Иначе	
				ТекСтрока.КоличествоОстаток = ТекСтрока.КоличествоНаОстатках + ТекСтрока.КоличествоКПоставке - ТекСтрока.КоличествоВРезервах - ТекСтрока.Количество; 
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ВремТЧЗаказы.Очистить();
	ВремТЧЗаказыПоставщикам.Очистить();
	Для каждого ТекСтрока Из Выборка Цикл
		Если НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов И НачалоДня(ТекСтрока.Дата) <= НачалоДня(ДатаОстатков) И НЕ ТипЗнч(ТекСтрока.Заказ) = Тип("ДокументСсылка.ЗаказПоставщику") И НЕ ТипЗнч(ТекСтрока.Заказ) = Тип("ДокументСсылка.ЗаказНаВозвратОтКлиента") 
			И НЕ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаказКлиента") Тогда		
			Продолжить;	
		КонецЕсли;
		Если ТекСтрока.Количество Тогда
			НовВремСтрока = ВремТЧЗаказы.Добавить();
			ЗаполнитьЗначенияСвойств(НовВремСтрока, ТекСтрока);
		КонецЕсли;	
		Если ТекСтрока.КоличествоПоставка Тогда
			НовВремСтрока = ВремТЧЗаказыПоставщикам.Добавить();
			ЗаполнитьЗначенияСвойств(НовВремСтрока, ТекСтрока);
			НовВремСтрока.Количество = ТекСтрока.КоличествоПоставка;
		КонецЕсли;
	КонецЦикла;

	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонтрольМинЦены(РасчетПоСтроке = Ложь, СтруктураДанных = Неопределено)
	
	Если Объект.БезвозмезднаяПередача Тогда
		Возврат;	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипМинЦены = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("КонтрольМинимальнойЦеныПоТипуЦен");
	
	Если ЗначениеЗаполнено(ТипМинЦены) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЦеныНоменклатурыСрезПоследних.Период КАК Период,
		               |	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		               |	ЦеныНоменклатурыСрезПоследних.ТипЦен КАК ТипЦен,
		               |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
		               |ИЗ
		               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		               |			&Период,
		               |			ТипЦен = &ТипЦен
		               |				И Номенклатура В (&Номенклатура)) КАК ЦеныНоменклатурыСрезПоследних";
		
		Запрос.УстановитьПараметр("ТипЦен", ТипМинЦены);
		Запрос.УстановитьПараметр("Период", ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, ТекущаяДата()));
		Запрос.УстановитьПараметр("Номенклатура", Объект.ТабличнаяЧасть.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
		
		Результат = Запрос.Выполнить();
		ВыборкаЦен = Результат.Выгрузить();
		
		Для каждого ТекСтрока Из Объект.ТабличнаяЧасть Цикл
			ТекСтрока.НарушенКонтрольМинЦены = Ложь;
			НайденныеСтрокиЦен = ВыборкаЦен.НайтиСтроки(Новый Структура("Номенклатура", ТекСтрока.Номенклатура));
			ТекЦена = ?(Объект.ЦенаВключаетНДС, ТекСтрока.Цена, ТекСтрока.Цена / (1 - ТекСтрока.СтавкаНДС.Ставка/100)); 
			Для каждого ТекНайдСтрока Из НайденныеСтрокиЦен Цикл
				Если ТекНайдСтрока.Цена > ТекЦена Тогда
					ТекСтрока.НарушенКонтрольМинЦены = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАртикулы()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТЧТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураСпр.Ссылка КАК Номенкклатура,
	|	НоменклатураСпр.ЕдиницаИзмерения КАК ОсновнаяЕдиница,
	|	НоменклатураСпр.Наименование КАК Наименование,
	|	НоменклатураСпр.Код КАК Код,
	|	ТЧТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТЧТовары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ НомЕд
	|ИЗ
	|	Справочник.Номенклатура КАК НоменклатураСпр
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТЧТовары КАК ТЧТовары
	|		ПО НоменклатураСпр.Ссылка = ТЧТовары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(УпаковкиНоменклатуры.Коэффициент, 1) КАК Коэффициент,
	|	НомЕд.Код КАК Код,
	|	НомЕд.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.Коэффициент, 1) КАК КоличествоВУпаковке
	|ИЗ
	|	НомЕд КАК НомЕд
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|		ПО НомЕд.Номенкклатура = УпаковкиНоменклатуры.Номенклатура
	|			И НомЕд.ОсновнаяЕдиница = УпаковкиНоменклатуры.ЕдиницаИзмерения
	|			И НомЕд.ЕдиницаИзмерения = УпаковкиНоменклатуры.Упаковка";
	
	
	
	ТЧ = Объект.ТабличнаяЧасть.Выгрузить(,"Номенклатура, ЕдиницаИзмерения, НомерСтроки");
	Запрос.УстановитьПараметр("Товары", ТЧ);
	
	ТаблицаУпаковок = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЧ Из Объект.ТабличнаяЧасть Цикл
		НайденныеСтрокиУпаковок = ТаблицаУпаковок.НайтиСтроки(Новый Структура("НомерСтроки", СтрокаТЧ.НомерСтроки));
		Если НайденныеСтрокиУпаковок.Количество() Тогда
			СтрокаТЧ.КоэффициентПересчетаУпаковок = НайденныеСтрокиУпаковок[0].Коэффициент;
			СтрокаТЧ.Код = НайденныеСтрокиУпаковок[0].Код;
			СтрокаТЧ.КоличествоВУпаковке = НайденныеСтрокиУпаковок[0].КоличествоВУпаковке;
		КонецЕсли;
	КонецЦикла;
	
	Если АльтернативнаяФорма Тогда 
		Элементы.ТабличнаяЧастьКоличество.Заголовок = "Количество";
		Для каждого СтрокаТовары Из Объект.ТабличнаяЧасть Цикл
			ЗаполнитьПредставлениеУпаковок(СтрокаТовары);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры
 

&НаСервере
Процедура сабПриЧтенииНаСервере(ТекущийОбъект)
	сабОбщегоНазначения.ОтобразитьСостояниеДокумента(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	сабОбщегоНазначения.ОтобразитьСостояниеДокумента(ЭтаФорма, ТекущийОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСумму(ТекДанные = Неопределено) Экспорт 
	
	Если ТекДанные = Неопределено Тогда
		ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	КонецЕсли;	
	
	Если Не ТекДанные = Неопределено Тогда
		ТекДанные.Сумма = ТекДанные.Количество * ТекДанные.Цена;
		
		//лишний запрос делаем
		ТекРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.СтавкаНДС, "Ставка");
		Если НЕ ТекРеквизиты = Неопределено Тогда
			ТекДанные.СуммаНДС = ТекДанные.Сумма / ((100+ТекРеквизиты.Ставка)/100) * (ТекРеквизиты.Ставка/100);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	РассчитатьСумму();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНастройкуЗапретаПриНарушенииКратности()

	Возврат Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("ЗапретитьЗаписьЗаказовКлиентуПриНарушенииКратности");	

КонецФункции

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	КонтрагентПодключенКСистемеEDI = Ложь;
	КоличествоПустыхСтрок = 0;
	
	Объект.НарушенКонтрольМинЦены = Ложь;
	НарушенаКратностьВСтроках = Новый Массив;
	НарушеноКоличествоВСтроках = Новый Массив;
	
	Для Каждого СтрокаТовары Из Объект.ТабличнаяЧасть Цикл
		
		Если Объект.ОтгружатьОднойДатой Тогда
			СтрокаТовары.ДатаПоступления = Объект.ДатаПоступления;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Склад) Тогда
			СтрокаТовары.Склад = Объект.Склад;
		КонецЕсли;
		
		Если СтрокаТовары.НарушенКонтрольМинЦены Тогда
			Объект.НарушенКонтрольМинЦены = Истина;			
		КонецЕсли;
		
		Если Объект.БезвозмезднаяПередача Тогда
			СтрокаТовары.Цена = 0;
			СтрокаТовары.Сумма = 0;
			СтрокаТовары.СуммаБезНДС = 0;
			СтрокаТовары.СуммаНДС = 0;
		КонецЕсли;
		
		//Если КонтрагентПодключенКСистемеEDI И ЭлектронныйДокументооборотСервер.НоменклатураБезШК(СтрокаТовары.Номенклатура) Тогда			
		//	сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(Объект, "Не заполнен штрихкод у номенклатуры. Обратитесь в ОСТТ.", "Объект.ТабличнаяЧасть", СтрокаТовары.НомерСтроки, "Номенклатура", Отказ);
		//КонецЕсли;
		
		//Если СтрокаТовары.Количество И СтрокаТовары.Цена И СтрокаТовары.Сумма Тогда       
		//	КоличествоПустыхСтрок = КоличествоПустыхСтрок + 1;			
		//КонецЕсли; 
		
		Если ЗначениеЗаполнено(СтрокаТовары.Кратность) Тогда
			
			Если НЕ СтрокаТовары.Количество / СтрокаТовары.Кратность = ЦЕЛ(СтрокаТовары.Количество / СтрокаТовары.Кратность) Тогда
				НарушенаКратностьВСтроках.Добавить(СтрокаТовары);
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТовары.КоличествоОстаток < 0 Тогда
			НарушеноКоличествоВСтроках.Добавить(СтрокаТовары);		
		КонецЕсли; 
		Если АльтернативнаяФорма Тогда
			СтрокаТовары.КоличествоУпаковок = ?(СтрокаТовары.КоэффициентПересчетаУпаковок = 0,СтрокаТовары.КоличествоВУпаковкеПредставление,Цел(СтрокаТовары.Количество / СтрокаТовары.КоэффициентПересчетаУпаковок)); 
			//СтрокаТовары.КоличествоВУпаковке = СтрокаТовары.КоэффициентПересчетаУпаковок; 
			СтрокаТовары.КоличествоВУпаковке = ?(СтрокаТовары.КоэффициентПересчетаУпаковок = 0 И СтрокаТовары.КоличествоУпаковок <> 0, Цел(СтрокаТовары.Количество / СтрокаТовары.КоличествоУпаковок),СтрокаТовары.КоэффициентПересчетаУпаковок);
		КонецЕсли;
	КонецЦикла;
	
	Отказ = Не ПроверитьЗаполнение();
	
	Если Не ЗначениеЗаполнено(Элементы.ДоговорПриоритетныйПорядокРасчетов.ТекстРедактирования) Тогда
		Отказ = Истина;
		сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(ЭтотОбъект, "Не указан приоритетный порядок расчетов в договоре.",,, "Объект.Договор", Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;			
	КонецЕсли;  
	
	НастройкаЗапретЗаписиПриНарушенииКратности = ПолучитьНастройкуЗапретаПриНарушенииКратности();	
	
	Если Не ПараметрыЗаписи.Свойство("ПропуститьПроверкуКратности") И НарушенаКратностьВСтроках.Количество() Тогда
		Отказ = Истина;
		СтрокиТекст = "";
		СтрокиТекстаНеВесовой = "";
		НомерСтрокиДляСообщения = "";
		ЕстьНарушениеКратностиДляНеВесовогоТовара = Ложь;
		
		Для каждого ТекСтрока Из НарушенаКратностьВСтроках Цикл
			
			Если НастройкаЗапретЗаписиПриНарушенииКратности Тогда
				
				Если Не БюджетныйНаСервере.ВернутьРеквизиты(ТекСтрока.Номенклатура, "Весовой").Весовой Тогда 
					ЕстьНарушениеКратностиДляНеВесовогоТовара = Истина;
					СтрокиТекстаНеВесовой = СтрокиТекстаНеВесовой + Строка(ТекСтрока.НомерСтроки) + ", "; 
					
					Если НомерСтрокиДляСообщения = "" Тогда
						НомерСтрокиДляСообщения = ТекСтрока.НомерСтроки - 1;
					КонецЕсли; 
					
				КонецЕсли;
				
			КонецЕсли;  
			
			Если Не ЕстьНарушениеКратностиДляНеВесовогоТовара Тогда
				СтрокиТекст = СтрокиТекст + Строка(ТекСтрока.НомерСтроки) + ", ";
			КонецЕсли;  
			
		КонецЦикла;
		
		СтрокиТекст = ЛЕВ(СтрокиТекст, СтрДлина(СтрокиТекст) - 2); 
		
		Если ЕстьНарушениеКратностиДляНеВесовогоТовара Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Невозможно записать документ по причине: в строках " + СтрокиТекстаНеВесовой + " нарушена кратность количества для товара без признака ""весовой""";
			Сообщение.Поле = "Объект.ТабличнаяЧасть[" + НомерСтрокиДляСообщения + "].Количество";
			Сообщение.Сообщить();
			//Сообщить("Невозможно записать документ по причине: в строках " + СтрокиТекстаНеВесовой + " нарушена кратность количества для товара без признака ""весовой""");
		Иначе
			ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтаФорма, ПараметрыЗаписи), "В строках " + СтрокиТекст + " нарушена кратность количества. Продолжить?", РежимДиалогаВопрос.ДаНет);
		КонецЕсли;	
		
	ИначеЕсли Не ПараметрыЗаписи.Свойство("ПропуститьПроверкуОстатков") И  НарушеноКоличествоВСтроках.Количество() Тогда
		Отказ = Истина;
		СтрокиТекст = "";
		
		Для каждого ТекСтрока Из НарушеноКоличествоВСтроках Цикл
			СтрокиТекст = СтрокиТекст + Строка(ТекСтрока.НомерСтроки) + ", ";	
		КонецЦикла; 
		
		СтрокиТекст = ЛЕВ(СтрокиТекст, СтрДлина(СтрокиТекст) - 2);
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗаписьюЗавершение2", ЭтаФорма, ПараметрыЗаписи), "В строках " + СтрокиТекст + " нарушен контроль текущих остатов на складе. Продолжить?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;			
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ДополнительныеПараметры.Вставить("ПропуститьПроверкуКратности", Истина);
		
		НарушеноКоличествоВСтроках = Новый Массив;
		Для Каждого СтрокаТовары Из Объект.ТабличнаяЧасть Цикл
			Если СтрокаТовары.КоличествоОстаток < 0 Тогда
				НарушеноКоличествоВСтроках.Добавить(СтрокаТовары);		
			КонецЕсли;
		КонецЦикла;
		
		Если Не ДополнительныеПараметры.Свойство("ПропуститьПроверкуОстатков") И  НарушеноКоличествоВСтроках.Количество() Тогда
			Отказ = Истина;
			СтрокиТекст = "";
			Для каждого ТекСтрока Из НарушеноКоличествоВСтроках Цикл
				СтрокиТекст = СтрокиТекст + Строка(ТекСтрока.НомерСтроки) + ", ";	
			КонецЦикла;
			СтрокиТекст = ЛЕВ(СтрокиТекст, СтрДлина(СтрокиТекст) - 2);
			ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗаписьюЗавершение2", ЭтаФорма, ДополнительныеПараметры), "В строках " + СтрокиТекст + " нарушен контроль текущих остатов на складе. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Иначе
			Отказ = Не ПроверитьЗаполнение();
			Если Отказ Тогда
				Возврат;			
			КонецЕсли;
			Записать(ДополнительныеПараметры);
			Если ЗакрытьДокумент Тогда
				Закрыть();		
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюЗавершение2(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ДополнительныеПараметры.Вставить("ПропуститьПроверкуОстатков", Истина);
		Отказ = Не ПроверитьЗаполнение();
		Если Отказ Тогда
			Возврат;			
		КонецЕсли;
		Записать(ДополнительныеПараметры);
		Если ЗакрытьДокумент Тогда
			Закрыть();		
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ПоступлениеОднойДатойПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокДляФормы2()
	
	АвтоЗаголовок = Ложь; 
	ДополнениеДляФормы2 = ?(Форма2, " (форма 2)","");
	Заголовок = ?(ЗначениеЗаполнено(Объект.Ссылка),Строка(Объект.Ссылка), "Заказ клиента (создание)") + ДополнениеДляФормы2;
	Если Форма2 Тогда 
		Объект.Организация = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
		Элементы.Организация.Доступность = Ложь;
	Иначе
		Элементы.Организация.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьНоменклатураПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	Если ВключенаНастройкаДляФормы2 Тогда	
		НоменкдатураФорма2 = БюджетныйНаСервере.ВернутьРеквизит(ТекДанные.Номенклатура,"Форма2");
		Если Объект.ТабличнаяЧасть.Количество() > 1 Тогда
			Если Форма2 Тогда
				Если Не НоменкдатураФорма2 Тогда
					ТекДанные.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
					ПоказатьПредупреждение(,"В табличной части уже выбрана номенлатура для формы 2. Добавить можно только номенклатуру со свойством ""Форма 2"". Для выбронной номенклатуры данное свойство не установлено. Выбор не возможен.");
					Возврат;
				КонецЕсли;
			Иначе
				Если НоменкдатураФорма2 Тогда
					ТекДанные.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
					ПоказатьПредупреждение(,"В табличной части уже выбрана номенлатура БЕЗ свойства ""Форма 2"". Добавить можно только номенклатуру БЕЗ свойства ""Форма 2"". Для выбронной номенклатуры данное свойство установлено. Выбор не возможен.");
					Возврат;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Форма2 = НоменкдатураФорма2;
			УстановитьЗаголовокДляФормы2();
		КонецЕсли;
	КонецЕсли;
	
	Если Не ТекДанные = Неопределено Тогда
		УстановитьЗависимыеДанныеВТЧ(ТекДанные);
		РассчитатьСумму(ТекДанные);
	КонецЕсли;
	
	СтруктураДанных =Новый Структура("Номенклатура, Склад, КоличествоОстаток, КоличествоНаОстатках, КоличествоВРезервах, КоличествоКПоставке, Количество", 
	ТекДанные.Номенклатура, ТекДанные.Склад, ТекДанные.КоличествоОстаток, ТекДанные.КоличествоНаОстатках,
	ТекДанные.КоличествоВРезервах, ТекДанные.КоличествоКПоставке, ТекДанные.Количество);
	ЗаполнитьОстаткиИРезервы(Истина, СтруктураДанных);
	ЗаполнитьКонтрольМинЦены(Истина, СтруктураДанных);
	ЗаполнитьЗначенияСвойств(ТекДанные, СтруктураДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьВидЦеныПоставщикаПриИзменении(Элемент)
	
	//Установим вид цен и рассчитаем цены
	ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	
	ТекДанные.Цена = РассчитатьЦенуПоВидуЦен(ТекДанные.ВидЦеныПоставщика, ТекДанные.Номенклатура, Объект.Предприятие, Объект.Подразделение, Объект.Контрагент, ?(ЗначениеЗаполнено(Объект.ДатаПоступления), Объект.ДатаПоступления, Объект.Дата), Объект.ДатаПоступления, Объект.ВидОперации);
	
	РассчитатьСумму();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЕдИзмНоменклатуры(Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковкиНоменклатуры.Упаковка
	|ИЗ
	|	РегистрСведений.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|ГДЕ
	|	УпаковкиНоменклатуры.Номенклатура = &Номенклатура
	|	И УпаковкиНоменклатуры.ОсновнаяУпаковка";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Упаковка;		
	КонецЦикла;	
	
	Возврат Номенклатура.ЕдиницаИзмерения;	
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКоэффициентПересчетаУпаковок(Номенклатура, ЕдиницаИзмерения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковкиНоменклатуры.Коэффициент
	|ИЗ
	|	РегистрСведений.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|ГДЕ
	|	УпаковкиНоменклатуры.Номенклатура = &Номенклатура
	|	И УпаковкиНоменклатуры.Упаковка = &Упаковка
	|	И УпаковкиНоменклатуры.ЕдиницаИзмерения = &ЕдиницаИзмерения";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Упаковка", ЕдиницаИзмерения);
	Запрос.УстановитьПараметр("ЕдиницаИзмерения", Номенклатура.ЕдиницаИзмерения);
	
	Выборка = запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Коэффициент;		
	КонецЦикла;
	
	Возврат 1;
	
КонецФункции	

&НаСервереБезКонтекста
Функция ЗаполнитьВидЦен(Номенклатура, Предприятие, Подразделение, Контрагент, Дата)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.ТипЦен КАК ВидЦены
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Период,
	|			Номенклатура = &Номенклатура) КАК ЦеныНоменклатурыСрезПоследних";
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.ВидЦены;
	КонецЦикла;
	
	Возврат Справочники.ВидыЦен.ПустаяСсылка();
	
КонецФункции

&НаСервереБезКонтекста
Функция РассчитатьЦенуПоВидуЦен(ВидЦены, Номенклатура, Предприятие, Подразделение, Контрагент, Дата, ДатаПоставки, ВидОперации)

	//РаботаНаДатуПоставки = Ложь;
	//
	//Если Контрагент.УсловияЦенПоставки = Перечисления.УсловияЦенПоставки.НаДатуПоставки Тогда
	//	РаботаНаДатуПоставки = Истина;
	//КонецЕсли;
	//
	//Если РаботаНаДатуПоставки И Не ЗначениеЗаполнено(ДатаПоставки) Тогда
	//	Сообщить("Не указана дата поставки! Цена не может быть заполнена!");
	//	Возврат 0;
	//КонецЕсли;
	//
	//ЭтоЗаказНаВозврат = Ложь;
	//Если ВидОперации = Перечисления.ВидыЗаказов.ВозвратБрака Тогда
	//	ЭтоЗаказНаВозврат = Истина;
	//КонецЕсли;	
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	МаркетинговыеМероприятия.ЦенаПоступления,
	//|	МаркетинговыеМероприятия.Номенклатура,
	//|	МаркетинговыеМероприятия.Предприятие,
	//|	МаркетинговыеМероприятия.Подразделение,
	//|	МаркетинговыеМероприятия.ДатаДокумента
	//|ПОМЕСТИТЬ ВТ_МаркетинговыеМероприятия
	//|ИЗ
	//|	РегистрСведений.МаркетинговыеМероприятия КАК МаркетинговыеМероприятия
	//|ГДЕ
	//|	МаркетинговыеМероприятия.Предприятие = &Предприятие
	//|	И МаркетинговыеМероприятия.Подразделение = &Подразделение
	//|	И МаркетинговыеМероприятия.Номенклатура = &Номенклатура
	//|	И МаркетинговыеМероприятия.ДатаЗаказовНач <= &Период
	//|	И МаркетинговыеМероприятия.ДатаЗаказовКон >= &Период
	//|	И МаркетинговыеМероприятия.ЦенаПоступления <> 0
	//|	И ВЫБОР
	//|			КОГДА &ЭтоЗаказНаВозврат
	//|				ТОГДА ЛОЖЬ
	//|			ИНАЧЕ ИСТИНА
	//|		КОНЕЦ
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТ_МаркетинговыеМероприятия.Номенклатура,
	//|	ВТ_МаркетинговыеМероприятия.Предприятие,
	//|	ВТ_МаркетинговыеМероприятия.Подразделение,
	//|	МАКСИМУМ(ВТ_МаркетинговыеМероприятия.ДатаДокумента) КАК ДатаДокумента
	//|ПОМЕСТИТЬ ВТ_МаксДатаМаркетинговогоМероприятия
	//|ИЗ
	//|	ВТ_МаркетинговыеМероприятия КАК ВТ_МаркетинговыеМероприятия
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ВТ_МаркетинговыеМероприятия.Номенклатура,
	//|	ВТ_МаркетинговыеМероприятия.Предприятие,
	//|	ВТ_МаркетинговыеМероприятия.Подразделение
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТ_МаркетинговыеМероприятия.ЦенаПоступления,
	//|	ВТ_МаркетинговыеМероприятия.Номенклатура,
	//|	ВТ_МаркетинговыеМероприятия.Предприятие,
	//|	ВТ_МаркетинговыеМероприятия.Подразделение
	//|ПОМЕСТИТЬ ВТ_МаркетинговыеМероприятияИтог
	//|ИЗ
	//|	ВТ_МаксДатаМаркетинговогоМероприятия КАК ВТ_МаксДатаМаркетинговогоМероприятия
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаркетинговыеМероприятия КАК ВТ_МаркетинговыеМероприятия
	//|		ПО ВТ_МаксДатаМаркетинговогоМероприятия.Номенклатура = ВТ_МаркетинговыеМероприятия.Номенклатура
	//|			И ВТ_МаксДатаМаркетинговогоМероприятия.Предприятие = ВТ_МаркетинговыеМероприятия.Предприятие
	//|			И ВТ_МаксДатаМаркетинговогоМероприятия.Подразделение = ВТ_МаркетинговыеМероприятия.Подразделение
	//|			И ВТ_МаксДатаМаркетинговогоМероприятия.ДатаДокумента = ВТ_МаркетинговыеМероприятия.ДатаДокумента
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ЕСТЬNULL(ВТ_МаркетинговыеМероприятияИтог.ЦенаПоступления, ЦеныНоменклатурыСрезПоследних.Цена) КАК Цена
	//|ИЗ
	//|	ВТ_МаркетинговыеМероприятияИтог КАК ВТ_МаркетинговыеМероприятияИтог
	//|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	//|				&Период,
	//|				ВидЦены.Поставщик = &Контрагент
	//|					И Предприятие = &Предприятие
	//|					И Номенклатура = &Номенклатура
	//|					И ВидЦены = &ВидЦены
	//|					И Подразделение = &Подразделение) КАК ЦеныНоменклатурыСрезПоследних
	//|		ПО ВТ_МаркетинговыеМероприятияИтог.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	//|			И ВТ_МаркетинговыеМероприятияИтог.Предприятие = ЦеныНоменклатурыСрезПоследних.Предприятие
	//|			И ВТ_МаркетинговыеМероприятияИтог.Подразделение = ЦеныНоменклатурыСрезПоследних.Подразделение";
	//Запрос.УстановитьПараметр("Период", ?(РаботаНаДатуПоставки И Не ЭтоЗаказНаВозврат, ДатаПоставки, Дата));
	//Запрос.УстановитьПараметр("Контрагент", Контрагент);
	//Запрос.УстановитьПараметр("Предприятие", Предприятие);
	//Запрос.УстановитьПараметр("Подразделение", Подразделение);
	//Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	//Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	//Запрос.УстановитьПараметр("ЭтоЗаказНаВозврат", ЭтоЗаказНаВозврат);
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	Возврат Выборка.Цена;
	//КонецЦикла;
	
	Возврат 0;
	
КонецФункции

&НаКлиенте
Процедура ТабличнаяЧастьКоличествоУпаковокПриИзменении(Элемент)
		
	РассчитатьКоличество();
	РассчитатьСумму();
	
	ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	
	Если ТипЗнч(ТекДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		СтруктураВозврата = ПолучитьКоличествоВУпаковкеПоУмолчаниюДляНоменклатуры(ТекДанные.Номенклатура);
		ТекДанные.КоэффициентПересчетаУпаковок = СтруктураВозврата.Коэффициент;
		ПредставлениеУпаковки = СтруктураВозврата.Упаковка;
		ПредставлениеЕдИзмерения = ТекДанные.ЕдиницаИзмерения; 
	Иначе
		ТекДанные.КоэффициентПересчетаУпаковок = ПолучитьКоэффициентПересчетаУпаковок(ТекДанные.Номенклатура, ТекДанные.ЕдиницаИзмерения);
		ПредставлениеУпаковки = ТекДанные.ЕдиницаИзмерения; 
		ПредставлениеЕдИзмерения = ПолучитьПредставлениеЕдиницыУпаковки(ТекДанные.Номенклатура,ТекДанные.ЕдиницаИзмерения);
	КонецЕсли;
	
	
	Если ТекДанные.КоэффициентПересчетаУпаковок = 0 ИЛИ ТекДанные.КоэффициентПересчетаУпаковок = 1 Тогда
		КолУпаковок = ?(ТекДанные.КоэффициентПересчетаУпаковок, ТекДанные.КоэффициентПересчетаУпаковок, ТекДанные.КоличествоВУпаковкеПредставление);
		КолЕдиниц = ТекДанные.Количество;
		ТекДанные.КоличествоУпаковокПредставление = "" + КолУпаковок + " "  + ПредставлениеУпаковки + ?(ТекДанные.КоэффициентПересчетаУпаковок И ТекДанные.Количество, "," +
		КолЕдиниц + " " + ПредставлениеЕдИзмерения, "");
	Иначе
		КолУпаковок = Цел(ТекДанные.Количество / ТекДанные.КоэффициентПересчетаУпаковок);
		КолЕдиниц = ТекДанные.Количество - (КолУпаковок * ТекДанные.КоэффициентПересчетаУпаковок);
		ТекДанные.КоличествоУпаковокПредставление = "" + КолУпаковок + " " + ПредставлениеУпаковки + ?(КолЕдиниц, ", " +
		КолЕдиниц + " " + ПредставлениеЕдИзмерения, "");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьКоличество(ТекДанные = Неопределено)
	
	Если ТекДанные = Неопределено Тогда
		ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	КонецЕсли;	
	
	ТекДанные.КоличествоВУпаковке = ТекДанные.КоэффициентПересчетаУпаковок;
	
	Если Не АльтернативнаяФорма Тогда
		
		Если ТекДанные.КоэффициентПересчетаУпаковок Тогда
			ТекДанные.Количество = ТекДанные.КоличествоУпаковок * ТекДанные.КоэффициентПересчетаУпаковок; 
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекДанные.Кратность) Тогда
			
			Если НЕ ТекДанные.Количество / ТекДанные.Кратность = ЦЕЛ(ТекДанные.Количество / ТекДанные.Кратность) Тогда
				СтрокаОшибка = "Для номенклатуры " + Строка(ТекДанные.Номенклатура) + " установлена кратность " + ТекДанные.Кратность + ". Количество " + ТекДанные.Количество + " не кратно " + ТекДанные.Кратность + ".";
				сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(Объект, СтрокаОшибка, "Объект.ТабличнаяЧасть", ТекДанные.НомерСтроки, "КоличествоУпаковок", Истина);
			КонецЕсли;      
			
		КонецЕсли;
	Иначе	
		//ТекДанные.КоличествоУпаковок = ТекДанные.КоличествоВУпаковкеПредставление;
		//ТекДанные.КоличествоУпаковок = Цел(?(ТекДанные.КоэффициентПересчетаУпаковок = 0,ТекДанные.КоличествоВУпаковкеПредставление,ТекДанные.Количество / ТекДанные.КоэффициентПересчетаУпаковок)); 
		ТекДанные.КоличествоУпаковок = ?(ТекДанные.КоэффициентПересчетаУпаковок = 0,ТекДанные.КоличествоВУпаковкеПредставление,Цел(ТекДанные.Количество / ТекДанные.КоэффициентПересчетаУпаковок)); 
		//ТекДанные.КоличествоВУпаковке = ТекДанные.КоэффициентПересчетаУпаковок; 
		ТекДанные.КоличествоВУпаковке = ?(ТекДанные.КоэффициентПересчетаУпаковок = 0 И ТекДанные.КоличествоУпаковок <> 0, Цел(ТекДанные.Количество / ТекДанные.КоличествоУпаковок),ТекДанные.КоэффициентПересчетаУпаковок);

	КонецЕсли;
	РассчитатьСумму(ТекДанные);
	
КонецПроцедуры	

&НаКлиенте
Процедура ТабличнаяЧастьЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	
	Если АльтернативнаяФорма Тогда 
		ЗаполнитьПредставлениеУпаковок(ТекДанные);
	Иначе
		ТекДанные.КоэффициентПересчетаУпаковок = ПолучитьКоэффициентПересчетаУпаковок(ТекДанные.Номенклатура, ТекДанные.ЕдиницаИзмерения);
    КонецЕсли;
	РассчитатьКоличество(ТекДанные);	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивВозможныхЕдиницИзмеренияНоменклатуры(Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковкиНоменклатуры.Упаковка
	|ИЗ
	|	РегистрСведений.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|ГДЕ
	|	УпаковкиНоменклатуры.Номенклатура = &Номенклатура"; 
	АльтернативнаяФорма = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("АльтернативнаяФормаЗаказов");
	Если АльтернативнаяФорма Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УпаковкиНоменклатуры.ЕдиницаИзмерения КАК Упаковка
		|ИЗ
		|	РегистрСведений.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
		|ГДЕ
		|	УпаковкиНоменклатуры.Номенклатура = &Номенклатура
		|	И УпаковкиНоменклатуры.ЕдиницаИзмерения <> &ЕдиницаИзмерения"; 
		Запрос.УстановитьПараметр("ЕдиницаИзмерения", Номенклатура.ЕдиницаИзмерения);
	КонецЕсли;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	АльтернативнаяФорма = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("АльтернативнаяФормаЗаказов");
	ТаблицаУпаковок = Запрос.Выполнить().Выгрузить();
	ТаблицаУпаковок.Свернуть("Упаковка");
	МассивУпаковок = ТаблицаУпаковок.ВыгрузитьКолонку("Упаковка");
	МассивУпаковок.Вставить(0, Номенклатура.ЕдиницаИзмерения);
	Возврат МассивУпаковок;
	
КонецФункции	

&НаКлиенте
Процедура ВидЗаказаПриИзменении(Элемент)
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыЗаказов.ВнутреннееПеремещение") Тогда
		
		Массив = Новый Массив;
		Массив.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
		ТекОписаниеТипов = Новый ОписаниеТипов(Массив);
		
		Элементы.Контрагент.ОграничениеТипа = ТекОписаниеТипов;
		Элементы.Контрагент.Заголовок = "Поставщик (внутр.)";
		
		//Элементы.Договор.ОтметкаНезаполненного = Ложь;
		Элементы.Договор.Видимость = Ложь;
		
		Если НЕ Элементы.Найти("ФормаДокументУЧ_ВозвратТоваровПоставщикуСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_ВозвратТоваровПоставщикуСоздатьНаОсновании.Видимость = Ложь;
		КонецЕсли;
		Если НЕ Элементы.Найти("ФормаДокументУЧ_ПоступлениеТоваровСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_ПоступлениеТоваровСоздатьНаОсновании.Видимость = Ложь;
		КонецЕсли;
		Если НЕ Элементы.Найти("ФормаДокументУЧ_ПеремещениеТоваровСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_ПеремещениеТоваровСоздатьНаОсновании.Видимость = Истина;
		КонецЕсли;
		Если НЕ Элементы.Найти("ФормаДокументУЧ_РеализацияСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_РеализацияСоздатьНаОсновании.Видимость = Истина;
		КонецЕсли;
				
	Иначе
		
		Массив = Новый Массив;
		Массив.Добавить(Тип("СправочникСсылка.Контрагенты"));
		ТекОписаниеТипов = Новый ОписаниеТипов(Массив);
		
		Элементы.Контрагент.ОграничениеТипа = ТекОписаниеТипов;
		Элементы.Контрагент.Заголовок = "Клиент";
		Элементы.ДатаПоступления.Заголовок = "Дата отгрузки";
		
		//Элементы.Договор.ОтметкаНезаполненного = Не ЗначениеЗаполнено(Объект.Договор);
		Элементы.Договор.Видимость = Истина;
		
		Если НЕ Элементы.Найти("ФормаДокументУЧ_ВозвратТоваровПоставщикуСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_ВозвратТоваровПоставщикуСоздатьНаОсновании.Видимость = Ложь;
		КонецЕсли;
		Если НЕ Элементы.Найти("ФормаДокументУЧ_ПеремещениеТоваровСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_ПеремещениеТоваровСоздатьНаОсновании.Видимость = Ложь;
		КонецЕсли;
		Если НЕ Элементы.Найти("ФормаДокументУЧ_ПоступлениеТоваровСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_ПоступлениеТоваровСоздатьНаОсновании.Видимость = Истина;
		КонецЕсли;
		Если НЕ Элементы.Найти("ФормаДокументУЧ_РеализацияСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_РеализацияСоздатьНаОсновании.Видимость = Истина;
		КонецЕсли;
		
		//Объект.ПредприятиеВн = ПредопределенноеЗначение("Справочник.Предприятия.ПустаяСсылка");
		//Элементы.ПредприятиеВн.Видимость = Ложь;
				
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыЗаказов.ВозвратБрака") Тогда
		Элементы.ДатаПоступления.Заголовок = "Дата возврата";
		
		Элементы.ТабличнаяЧастьЗаполнитьПоАссортименту.Заголовок = "Заполнить по товарам со склада возврата";
		Если НЕ Элементы.Найти("ФормаДокументУЧ_ПоступлениеТоваровСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_ПоступлениеТоваровСоздатьНаОсновании.Видимость = Ложь;
		КонецЕсли;
		Если НЕ Элементы.Найти("ФормаДокументУЧ_ПеремещениеТоваровСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_ПеремещениеТоваровСоздатьНаОсновании.Видимость = Ложь;
		КонецЕсли;
		Если НЕ Элементы.Найти("ФормаДокументУЧ_ВозвратТоваровПоставщикуСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_ВозвратТоваровПоставщикуСоздатьНаОсновании.Видимость = Истина;
		КонецЕсли;
		Если НЕ Элементы.Найти("ФормаДокументУЧ_РеализацияСоздатьНаОсновании") = Неопределено Тогда
			Элементы.ФормаДокументУЧ_РеализацияСоздатьНаОсновании.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ВидЗаказаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВидЗаказаПриИзмененииНаСервере()
	
	//Если Объект.ВидОперации = Перечисления.ВидыЗаказов.ВнутреннееПеремещение Тогда
	//	НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.ПредприятиеВн");
	//	НовыйМассив = Новый Массив();
	//	НовыйМассив.Добавить(НоваяСвязь);
	//	НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
	//	Элементы.Контрагент.СвязиПараметровВыбора = НовыеСвязи;
	//Иначе
	//	НовыеСвязи = Новый ФиксированныйМассив(Новый Массив);
	//	Элементы.Контрагент.СвязиПараметровВыбора = НовыеСвязи;
	//КонецЕсли;
	
КонецПроцедуры	

#Область ПоискПоШК

&НаКлиенте
Процедура ПодобратьНоменклатуруПоШК(Команда)
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	ИмяТЧ = "ТабличнаяЧасть";
	ИмяРеквизитаНоменклатуры = "Номенклатура";
	ИмяРеквизитаКоличества = "Количество";
	сабОперОбщегоНазначенияНаКлиенте.ОбработатьЗаполнениеПоШтрихкодуНаКлиенте(ЭтаФорма, ИмяТЧ, ИмяРеквизитаНоменклатуры, ИмяРеквизитаКоличества, Штрихкод);	
	ТабличнаяЧастьНоменклатураПриИзменении(Неопределено);
	
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт		
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Статус = ВыбранноеЗначениеСтатуса;
		Модифицированность = Истина;
		УстановитьДоступностьДокумента();
    КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьДокумента()
	
	ТекДоступность = НЕ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.Новый");
	БюджетныйНаСервере.ФормаТолькоПросмотр(Объект, ЭтаФорма, ТекДоступность);  
	
	Если РольДоступна("сабРуководительПоПродажам") Или БюджетныйНаСервере.РольАдминаДоступнаСервер() Тогда
		Элементы.Статус.ТолькоПросмотр = Ложь;
		Элементы.СтатусОплаты.ТолькоПросмотр = Ложь;
	КонецЕсли;                                        
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор, "ПриоритетныйПорядокРасчетов") = Перечисления.Д_ИсточникиСредств.БезНал Тогда
		Объект.БезвозмезднаяПередача = Ложь;
		//Элементы.БезвозмезднаяПередача.ТолькоПросмотр = Истина;
		Элементы.Организация.КнопкаОчистки = Ложь;
	Иначе
		Элементы.БезвозмезднаяПередача.ТолькоПросмотр = Ложь;
		Элементы.Организация.КнопкаОчистки = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ВыбранноеЗначениеСтатуса = ВыбранноеЗначение;
	Если НЕ ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.Новый") Тогда
		СтандартнаяОбработка = Ложь;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса",
		ЭтотОбъект);	
		
		ПоказатьВопрос(Оповещение,
		"После изменения статуса заказа изменения станут невозможны. Продолжить?",
		РежимДиалогаВопрос.ДаНет,
		0, // таймаут в секундах
		КодВозвратаДиалога.Да, // (необ.) кнопка по умолчанию
		"Вопрос" // (необ.) заголовок
		);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	КонтрагентПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтветственного()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОтветственныеСрезПоследних.Ответственный КАК Ответственный
	|ИЗ
	|	РегистрСведений.Ответственные.СрезПоследних(&ДатаНа, Контрагент = &Контрагент) КАК ОтветственныеСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаНа", ?(Объект.Дата = Дата('00010101'), ТекущаяДата(), Объект.Дата));
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Объект.Ответственный = Выборка.Ответственный;	
	КонецЦикла;


КонецПроцедуры


&НаСервере
Процедура КонтрагентПриИзмененииСервер(Изменять = Истина)
	
	Если ЗначениеЗаполнено(Объект.ПодразделениеКонтрагента.Адрес) Тогда
		ТекАдрес = Объект.ПодразделениеКонтрагента.Адрес;
	Иначе
	//	ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
	//	ТекАдрес = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияНаДату(Объект.Контрагент, ВидКонтактнойИнформации).Представление;
		ТекАдрес = "";
	КонецЕсли;
	
	Если Изменять Тогда
		
		//Если ЗначениеЗаполнено(Объект.Контрагент.СкладОтгрузкиПоУмолчанию) Тогда
		//	Объект.Склад = Объект.Контрагент.СкладОтгрузкиПоУмолчанию;
		//	
		//	Для Каждого ТекСтрокаТЧ Из Объект.ТабличнаяЧасть Цикл
		//		ТекСтрокаТЧ.Склад = Объект.Склад;
		//	КонецЦикла;

		//КонецЕсли;
		
		РеквизитыДоговора = сабОперОбщегоНазначения.ПолучитьДоговорКонтрагентаПоУмолчанию(Объект.Контрагент, ?(Объект.Подразделение.ПроизводственноеПодразделение, Неопределено, Объект.Организация));
		Объект.Договор = РеквизитыДоговора.Договор;
		УстановкаЗапретаРедактированияЦен(Изменять);
		
		Если ЗначениеЗаполнено(ТекАдрес) Тогда
			Объект.АдресДоставки = ТекАдрес;
		КонецЕсли;
		
		ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		ТекТелефон = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияНаДату(Объект.Контрагент, ВидКонтактнойИнформации).Представление;
		
		Если ЗначениеЗаполнено(ТекТелефон) Тогда
			Объект.Телефон = ТекТелефон;
		КонецЕсли;
		
		ЗаполнитьОтветственного();		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПодразделенияКонтрагентов.Ссылка КАК Ссылка,
	|	ПодразделенияКонтрагентов.Адрес КАК Адрес,
	|	ПодразделенияКонтрагентов.Склад КАК Склад,
	|	ПодразделенияКонтрагентов.ВремяПоДнямНеделиПереключатель КАК ВремяПоДнямНеделиПереключатель
	|ИЗ
	|	Справочник.ПодразделенияКонтрагентов КАК ПодразделенияКонтрагентов
	|ГДЕ
	|	ПодразделенияКонтрагентов.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", Объект.Контрагент);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Элементы.АдресДоставки.СписокВыбора.Очистить();
	
	Если ЗначениеЗаполнено(Объект.АдресДоставки) Тогда
		Элементы.АдресДоставки.СписокВыбора.Добавить(ТекАдрес);
	КонецЕсли;
	
	Если Элементы.АдресДоставки.СписокВыбора.НайтиПоЗначению(ТекАдрес) = Неопределено Тогда
		Элементы.АдресДоставки.СписокВыбора.Добавить(ТекАдрес);
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		Если Элементы.АдресДоставки.СписокВыбора.НайтиПоЗначению(Выборка.Адрес) = Неопределено Тогда
			Элементы.АдресДоставки.СписокВыбора.Добавить(Выборка.Адрес);
		КонецЕсли;
	КонецЦикла;
	
	Если Изменять Тогда
		//Если Выборка.Количество() = 1 И Изменять Тогда 
		Если Выборка.Количество() = 1 Тогда 
			Объект.ПодразделениеКонтрагента = Выборка.Ссылка;
			РеквыОбъекта = БюджетныйНаСервере.ВернутьРеквизиты(Выборка.Ссылка, "Адрес, Ответственный, Выразить(Спр.Ответственный КАК Справочник.СотрудникиКонтрагентов).Телефон КАК ОтветственныйТелефон, ДатаДоставки, ДатаДоставкиДо, МаршрутДоставки"); 
			Объект.АдресДоставки = РеквыОбъекта.Адрес;
			Объект.МаршрутДоставки = РеквыОбъекта.МаршрутДоставки;
			Объект.МенеджерКонтрагента = РеквыОбъекта.Ответственный;
			Объект.Телефон = РеквыОбъекта.ОтветственныйТелефон;
			Если Выборка.ВремяПоДнямНеделиПереключатель Тогда
				ЗаполнитьВремяДоставкиПоДнямНедели(Выборка.Ссылка,Объект.ДатаДоставки,Объект.ДатаДоставкиДо);	
			Иначе
				Объект.ДатаДоставки = НачалоДня(Объект.ДатаДоставки) + (РеквыОбъекта.ДатаДоставки - НачалоДня(РеквыОбъекта.ДатаДоставки));
				Объект.ДатаДоставкиДо = НачалоДня(Объект.ДатаДоставкиДо) + (РеквыОбъекта.ДатаДоставкиДо - НачалоДня(РеквыОбъекта.ДатаДоставкиДо));
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.Склад) Тогда
				Объект.Склад = Выборка.Склад;
				
				Для Каждого ТекСтрокаТЧ Из Объект.ТабличнаяЧасть Цикл
					ТекСтрокаТЧ.Склад =  Выборка.Склад;
				КонецЦикла;
			ИначеЕсли ЗначениеЗаполнено(Объект.Контрагент) Тогда
				СкладКонтрагента = Объект.Контрагент.СкладОтгрузкиПоУмолчанию;
				Объект.Склад = СкладКонтрагента;
				Для Каждого ТекСтрокаТЧ Из Объект.ТабличнаяЧасть Цикл
					ТекСтрокаТЧ.Склад = СкладКонтрагента;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Объект.ПодразделениеКонтрагента) Тогда
			РеквыОбъекта = БюджетныйНаСервере.ВернутьРеквизиты(Объект.ПодразделениеКонтрагента, "Адрес, Ответственный, Выразить(Спр.Ответственный КАК Справочник.СотрудникиКонтрагентов).Телефон КАК ОтветственныйТелефон, ДатаДоставки, ДатаДоставкиДо, МаршрутДоставки,ВремяПоДнямНеделиПереключатель"); 
			Объект.АдресДоставки = РеквыОбъекта.Адрес;
			Объект.МаршрутДоставки = РеквыОбъекта.МаршрутДоставки;
			Объект.МенеджерКонтрагента = РеквыОбъекта.Ответственный;
			Объект.Телефон = РеквыОбъекта.ОтветственныйТелефон; 
			Если ЗначениеЗаполнено(Час(Объект.ДатаДоставки)) ИЛИ ЗначениеЗаполнено(Минута(Объект.ДатаДоставки)) ИЛИ
				ЗначениеЗаполнено(Час(Объект.ДатаДоставкиДо)) ИЛИ ЗначениеЗаполнено(Минута(Объект.ДатаДоставкиДо)) Тогда 
				Если РеквыОбъекта.ВремяПоДнямНеделиПереключатель Тогда
					ЗаполнитьВремяДоставкиПоДнямНедели(Объект.ПодразделениеКонтрагента,Объект.ДатаДоставки,Объект.ДатаДоставкиДо);	
				Иначе
					Объект.ДатаДоставки = НачалоДня(Объект.ДатаДоставки) + (РеквыОбъекта.ДатаДоставки - НачалоДня(РеквыОбъекта.ДатаДоставки));
					Объект.ДатаДоставкиДо = НачалоДня(Объект.ДатаДоставкиДо) + (РеквыОбъекта.ДатаДоставкиДо - НачалоДня(РеквыОбъекта.ДатаДоставкиДо));
				КонецЕсли;	
			КонецЕсли;
			Если ЗначениеЗаполнено(Объект.ПодразделениеКонтрагента.Склад) Тогда
				Объект.Склад = Объект.ПодразделениеКонтрагента.Склад;
				
				Для Каждого ТекСтрокаТЧ Из Объект.ТабличнаяЧасть Цикл
					ТекСтрокаТЧ.Склад = Объект.ПодразделениеКонтрагента.Склад;
				КонецЦикла;
			ИначеЕсли ЗначениеЗаполнено(Объект.Контрагент) Тогда
				СкладКонтрагента = Объект.Контрагент.СкладОтгрузкиПоУмолчанию;
				Объект.Склад = СкладКонтрагента;
				Для Каждого ТекСтрокаТЧ Из Объект.ТабличнаяЧасть Цикл
					ТекСтрокаТЧ.Склад = СкладКонтрагента;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Объект.АдресДоставки = "";
			Объект.МаршрутДоставки = Справочники.МаршрутыДоставки.ПустаяСсылка();
			Объект.МенеджерКонтрагента = Справочники.СотрудникиКонтрагентов.ПустаяСсылка();
			Объект.Телефон = "";
			Объект.ДатаДоставки = НачалоДня(Объект.ДатаДоставки);
			Объект.ДатаДоставкиДо = НачалоДня(Объект.ДатаДоставки);
			Если ЗначениеЗаполнено(Объект.Контрагент.СкладОтгрузкиПоУмолчанию) Тогда
				СкладКонтрагента = Объект.Контрагент.СкладОтгрузкиПоУмолчанию;
				Объект.Склад = СкладКонтрагента;
				Для Каждого ТекСтрокаТЧ Из Объект.ТабличнаяЧасть Цикл
					ТекСтрокаТЧ.Склад = СкладКонтрагента;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Элементы.АдресДоставки.СписокВыбора.Добавить("Подразделения контрагента...");
	Если Изменять Тогда
		ЗаполнитьЗадолженностьКонтрагента();
    КонецЕсли;
	//АдресДоставкиПриИзмененииНаСервере(Ложь);
	
КонецПроцедуры


&НаСервере
Функция ПолучитьСкладПоТипуНоменклатуры(ТекНоменклатура)
	
	//ТипНоменклатуры = ТекНоменклатура.ТипНоменклатуры;
	//Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Материалы Тогда
	//	Возврат Справочники.Склады.ПолучитьСкладПоЗначениюДопРеквизита("Склад производства", Объект.Предприятие);
	//Иначе
	//	Возврат Справочники.Склады.ПолучитьСкладПоЗначениюДопРеквизита("Торговый зал", Объект.Предприятие);
	//КонецЕсли;	
	
КонецФункции	

&НаСервере
Процедура ЗаполнитьПоАссортиментуНаСервере()

	Объект.ТабличнаяЧасть.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорзинаТорговТовары.Номенклатура,
	|	ТоргиСрезПоследних.ВыведенаИзТоргов КАК ВыведенаИзТоргов
	|ПОМЕСТИТЬ ВТ_Торги
	|ИЗ
	|	Справочник.КорзинаТоргов.Товары КАК КорзинаТорговТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Торги.СрезПоследних(&Период, ) КАК ТоргиСрезПоследних
	|		ПО КорзинаТорговТовары.Ссылка = ТоргиСрезПоследних.Корзина
	|			И КорзинаТорговТовары.Номенклатура = ТоргиСрезПоследних.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаркетинговыеМероприятия.ЦенаПоступления,
	|	МаркетинговыеМероприятия.Номенклатура,
	|	МаркетинговыеМероприятия.Предприятие,
	|	МаркетинговыеМероприятия.Подразделение,
	|	МаркетинговыеМероприятия.ДатаДокумента
	|ПОМЕСТИТЬ ВТ_МаркетинговыеМероприятия
	|ИЗ
	|	РегистрСведений.МаркетинговыеМероприятия КАК МаркетинговыеМероприятия
	|ГДЕ
	|	МаркетинговыеМероприятия.Предприятие = &Предприятие
	|	И МаркетинговыеМероприятия.Подразделение = &Подразделение
	|	И МаркетинговыеМероприятия.ДатаЗаказовНач <= &ПериодЦен
	|	И МаркетинговыеМероприятия.ДатаЗаказовКон >= &ПериодЦен
	|	И МаркетинговыеМероприятия.ЦенаПоступления <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_МаркетинговыеМероприятия.Номенклатура,
	|	ВТ_МаркетинговыеМероприятия.Предприятие,
	|	ВТ_МаркетинговыеМероприятия.Подразделение,
	|	МАКСИМУМ(ВТ_МаркетинговыеМероприятия.ДатаДокумента) КАК ДатаДокумента
	|ПОМЕСТИТЬ ВТ_МаксДатаМаркетинговогоМероприятия
	|ИЗ
	|	ВТ_МаркетинговыеМероприятия КАК ВТ_МаркетинговыеМероприятия
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_МаркетинговыеМероприятия.Номенклатура,
	|	ВТ_МаркетинговыеМероприятия.Предприятие,
	|	ВТ_МаркетинговыеМероприятия.Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_МаркетинговыеМероприятия.ЦенаПоступления,
	|	ВТ_МаркетинговыеМероприятия.Номенклатура,
	|	ВТ_МаркетинговыеМероприятия.Предприятие,
	|	ВТ_МаркетинговыеМероприятия.Подразделение
	|ПОМЕСТИТЬ ВТ_МаркетинговыеМероприятияИтог
	|ИЗ
	|	ВТ_МаксДатаМаркетинговогоМероприятия КАК ВТ_МаксДатаМаркетинговогоМероприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаркетинговыеМероприятия КАК ВТ_МаркетинговыеМероприятия
	|		ПО ВТ_МаксДатаМаркетинговогоМероприятия.Номенклатура = ВТ_МаркетинговыеМероприятия.Номенклатура
	|			И ВТ_МаксДатаМаркетинговогоМероприятия.Предприятие = ВТ_МаркетинговыеМероприятия.Предприятие
	|			И ВТ_МаксДатаМаркетинговогоМероприятия.Подразделение = ВТ_МаркетинговыеМероприятия.Подразделение
	|			И ВТ_МаксДатаМаркетинговогоМероприятия.ДатаДокумента = ВТ_МаркетинговыеМероприятия.ДатаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяБлокировкаНоменклатурыВЗаказах.Предприятие,
	|	ВременнаяБлокировкаНоменклатурыВЗаказах.Подразделение,
	|	ВременнаяБлокировкаНоменклатурыВЗаказах.Номенклатура
	|ПОМЕСТИТЬ ВТ_ЗаблокированныеЗаказы
	|ИЗ
	|	РегистрСведений.ВременнаяБлокировкаНоменклатурыВЗаказах КАК ВременнаяБлокировкаНоменклатурыВЗаказах
	|ГДЕ
	|	ВременнаяБлокировкаНоменклатурыВЗаказах.ДатаНач <= &Период
	|	И ВременнаяБлокировкаНоменклатурыВЗаказах.ДатаКон >= &Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура,
	|	ЕСТЬNULL(ВТ_МаркетинговыеМероприятияИтог.ЦенаПоступления, ЦеныНоменклатурыСрезПоследних.Цена) КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦены,
	|	ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура.Код КАК Код,
	|	ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	РегистрСведений.НоменклатураПоставщика.СрезПоследних(
	|			&Период,
	|			Предприятие = &Предприятие
	|				И Подразделение = &Подразделение) КАК НоменклатураПоставщикаСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ПериодЦен,
	|				Предприятие = &Предприятие
	|					И ВидЦены.ЦенаПоставщика
	|					И ВидЦены.Поставщик = &Контрагент
	|					И Подразделение = &Подразделение) КАК ЦеныНоменклатурыСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаркетинговыеМероприятияИтог КАК ВТ_МаркетинговыеМероприятияИтог
	|			ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = ВТ_МаркетинговыеМероприятияИтог.Номенклатура
	|				И ЦеныНоменклатурыСрезПоследних.Предприятие = ВТ_МаркетинговыеМероприятияИтог.Предприятие
	|				И ЦеныНоменклатурыСрезПоследних.Подразделение = ВТ_МаркетинговыеМероприятияИтог.Подразделение
	|		ПО НоменклатураПоставщикаСрезПоследних.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И НоменклатураПоставщикаСрезПоследних.Предприятие = ЦеныНоменклатурыСрезПоследних.Предприятие
	|			И НоменклатураПоставщикаСрезПоследних.Подразделение = ЦеныНоменклатурыСрезПоследних.Подразделение
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АссортиментнаяМатрица.СрезПоследних(
	|				&Период,
	|				Предприятие = &Предприятие
	|					И Подразделение = &Подразделение) КАК АссортиментнаяМатрицаСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыОбеспеченияПотребности.СрезПоследних(
	|					&Период,
	|					Предприятие = &Предприятие
	|						И Подразделение = &Подразделение) КАК ПараметрыОбеспеченияПотребностиСрезПоследних
	|			ПО АссортиментнаяМатрицаСрезПоследних.Номенклатура = ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура
	|				И АссортиментнаяМатрицаСрезПоследних.Предприятие = ПараметрыОбеспеченияПотребностиСрезПоследних.Предприятие
	|				И АссортиментнаяМатрицаСрезПоследних.Подразделение = ПараметрыОбеспеченияПотребностиСрезПоследних.Подразделение
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Торги КАК ВТ_Торги
	|			ПО АссортиментнаяМатрицаСрезПоследних.Номенклатура = ВТ_Торги.Номенклатура
	|		ПО НоменклатураПоставщикаСрезПоследних.Номенклатура = АссортиментнаяМатрицаСрезПоследних.Номенклатура
	|			И НоменклатураПоставщикаСрезПоследних.Подразделение = АссортиментнаяМатрицаСрезПоследних.Подразделение
	|			И НоменклатураПоставщикаСрезПоследних.Предприятие = АссортиментнаяМатрицаСрезПоследних.Предприятие
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗаблокированныеЗаказы КАК ВТ_ЗаблокированныеЗаказы
	|		ПО НоменклатураПоставщикаСрезПоследних.Предприятие = ВТ_ЗаблокированныеЗаказы.Предприятие
	|			И НоменклатураПоставщикаСрезПоследних.Подразделение = ВТ_ЗаблокированныеЗаказы.Подразделение
	|			И НоменклатураПоставщикаСрезПоследних.Номенклатура = ВТ_ЗаблокированныеЗаказы.Номенклатура
	|ГДЕ
	|	НЕ ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура ЕСТЬ NULL 
	|	И НоменклатураПоставщикаСрезПоследних.Контрагент = &Контрагент
	|	И АссортиментнаяМатрицаСрезПоследних.ВыведенИзАссортимента = ЛОЖЬ
	|	И ЕСТЬNULL(ВТ_Торги.ВыведенаИзТоргов, ЛОЖЬ) = ЛОЖЬ
	|	И ВТ_ЗаблокированныеЗаказы.Номенклатура ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";
	Запрос.УстановитьПараметр("Период", ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()));
	Запрос.УстановитьПараметр("ПериодЦен", ?(Объект.Контрагент.УсловияЦенПоставки = Перечисления.УсловияЦенПоставки.НаДатуПоставки, Объект.ДатаПоступления, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата())));
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("Предприятие", Объект.Предприятие);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаТЧ = Объект.ТабличнаяЧасть.Добавить();
		СтрокаТЧ.Номенклатура = Выборка.Номенклатура;
		СтрокаТЧ.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		СтрокаТЧ.ВидЦеныПоставщика = Выборка.ВидЦены;
		СтрокаТЧ.Цена = Выборка.Цена;
		СтрокаТЧ.СтавкаНДС = Выборка.СтавкаНДС;
		СтрокаТЧ.Склад = ПолучитьСкладПоТипуНоменклатуры(Выборка.Номенклатура);
		СтрокаТЧ.Код = Выборка.Код;
		СтрокаТЧ.КоэффициентПересчетаУпаковок = 1;
	КонецЦикла;	
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьПоОстаткамВозвратаНаСервере()

	Объект.ТабличнаяЧасть.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетныйОстатки.Субконто1 КАК Номенклатура,
	|	УчетныйОстатки.Предприятия КАК Предприятие,
	|	УчетныйОстатки.Подразделение,
	|	ЛОЖЬ КАК ВыведенИзАссортимента,
	|	УчетныйОстатки.КоличествоОстаток
	|ПОМЕСТИТЬ ВТ_ОстаткиПоставщика
	|ИЗ
	|	РегистрБухгалтерии.Учетный.Остатки(
	|			&Период,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Учетный.Товары),
	|			,
	|			Субконто2 = &Склад
	|				И Подразделение = &Подразделение) КАК УчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаркетинговыеМероприятия.ЦенаПоступления,
	|	МаркетинговыеМероприятия.Номенклатура,
	|	МаркетинговыеМероприятия.Предприятие,
	|	МаркетинговыеМероприятия.Подразделение,
	|	МаркетинговыеМероприятия.ДатаДокумента
	|ПОМЕСТИТЬ ВТ_МаркетинговыеМероприятия
	|ИЗ
	|	РегистрСведений.МаркетинговыеМероприятия КАК МаркетинговыеМероприятия
	|ГДЕ
	|	МаркетинговыеМероприятия.Предприятие = &Предприятие
	|	И МаркетинговыеМероприятия.Подразделение = &Подразделение
	|	И МаркетинговыеМероприятия.ДатаЗаказовНач <= &Период
	|	И МаркетинговыеМероприятия.ДатаЗаказовКон >= &Период
	|	И МаркетинговыеМероприятия.ЦенаПоступления <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_МаркетинговыеМероприятия.Номенклатура,
	|	ВТ_МаркетинговыеМероприятия.Предприятие,
	|	ВТ_МаркетинговыеМероприятия.Подразделение,
	|	МАКСИМУМ(ВТ_МаркетинговыеМероприятия.ДатаДокумента) КАК ДатаДокумента
	|ПОМЕСТИТЬ ВТ_МаксДатаМаркетинговогоМероприятия
	|ИЗ
	|	ВТ_МаркетинговыеМероприятия КАК ВТ_МаркетинговыеМероприятия
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_МаркетинговыеМероприятия.Номенклатура,
	|	ВТ_МаркетинговыеМероприятия.Предприятие,
	|	ВТ_МаркетинговыеМероприятия.Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_МаркетинговыеМероприятия.ЦенаПоступления,
	|	ВТ_МаркетинговыеМероприятия.Номенклатура,
	|	ВТ_МаркетинговыеМероприятия.Предприятие,
	|	ВТ_МаркетинговыеМероприятия.Подразделение
	|ПОМЕСТИТЬ ВТ_МаркетинговыеМероприятияИтог
	|ИЗ
	|	ВТ_МаксДатаМаркетинговогоМероприятия КАК ВТ_МаксДатаМаркетинговогоМероприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаркетинговыеМероприятия КАК ВТ_МаркетинговыеМероприятия
	|		ПО ВТ_МаксДатаМаркетинговогоМероприятия.Номенклатура = ВТ_МаркетинговыеМероприятия.Номенклатура
	|			И ВТ_МаксДатаМаркетинговогоМероприятия.Предприятие = ВТ_МаркетинговыеМероприятия.Предприятие
	|			И ВТ_МаксДатаМаркетинговогоМероприятия.Подразделение = ВТ_МаркетинговыеМероприятия.Подразделение
	|			И ВТ_МаксДатаМаркетинговогоМероприятия.ДатаДокумента = ВТ_МаркетинговыеМероприятия.ДатаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура,
	|	ЕСТЬNULL(ВТ_МаркетинговыеМероприятияИтог.ЦенаПоступления, ЦеныНоменклатурыСрезПоследних.Цена) КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦены,
	|	ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура.Код КАК Код,
	|	ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	ВТ_ОстаткиПоставщика.КоличествоОстаток,
	|	ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура.СтавкаНДС.Ставка КАК СтавкаНДССтавка
	|ИЗ
	|	РегистрСведений.НоменклатураПоставщика.СрезПоследних(
	|			&Период,
	|			Предприятие = &Предприятие
	|				И Подразделение = &Подразделение) КАК НоменклатураПоставщикаСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Период,
	|				Предприятие = &Предприятие
	|					И ВидЦены.ЦенаПоставщика
	|					И ВидЦены.Поставщик = &Контрагент
	|					И Подразделение = &Подразделение) КАК ЦеныНоменклатурыСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаркетинговыеМероприятияИтог КАК ВТ_МаркетинговыеМероприятияИтог
	|			ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = ВТ_МаркетинговыеМероприятияИтог.Номенклатура
	|				И ЦеныНоменклатурыСрезПоследних.Предприятие = ВТ_МаркетинговыеМероприятияИтог.Предприятие
	|				И ЦеныНоменклатурыСрезПоследних.Подразделение = ВТ_МаркетинговыеМероприятияИтог.Подразделение
	|		ПО НоменклатураПоставщикаСрезПоследних.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И НоменклатураПоставщикаСрезПоследних.Предприятие = ЦеныНоменклатурыСрезПоследних.Предприятие
	|			И НоменклатураПоставщикаСрезПоследних.Подразделение = ЦеныНоменклатурыСрезПоследних.Подразделение
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиПоставщика КАК ВТ_ОстаткиПоставщика
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыОбеспеченияПотребности.СрезПоследних(
	|					&Период,
	|					Предприятие = &Предприятие
	|						И Подразделение = &Подразделение) КАК ПараметрыОбеспеченияПотребностиСрезПоследних
	|			ПО ВТ_ОстаткиПоставщика.Номенклатура = ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура
	|				И ВТ_ОстаткиПоставщика.Предприятие = ПараметрыОбеспеченияПотребностиСрезПоследних.Предприятие
	|				И ВТ_ОстаткиПоставщика.Подразделение = ПараметрыОбеспеченияПотребностиСрезПоследних.Подразделение
	|		ПО НоменклатураПоставщикаСрезПоследних.Номенклатура = ВТ_ОстаткиПоставщика.Номенклатура
	|			И НоменклатураПоставщикаСрезПоследних.Подразделение = ВТ_ОстаткиПоставщика.Подразделение
	|			И НоменклатураПоставщикаСрезПоследних.Предприятие = ВТ_ОстаткиПоставщика.Предприятие
	|ГДЕ
	|	НЕ ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура ЕСТЬ NULL 
	|	И НоменклатураПоставщикаСрезПоследних.Контрагент = &Контрагент
	|	И ВТ_ОстаткиПоставщика.ВыведенИзАссортимента = ЛОЖЬ
	|	И ЕСТЬNULL(ВТ_ОстаткиПоставщика.КоличествоОстаток, 0) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";
	
	ТекДата = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата());
	Запрос.УстановитьПараметр("Период", ТекДата);
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("Предприятие", Объект.Предприятие);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если НЕ Выборка.Количество() Тогда
		Сообщить("На складе """ + Строка(Объект.Склад) + """ отсутствуют товары к возврату по поставщику """ + Строка(Объект.Контрагент) + """ на дату """ + Строка(ТекДата) + """. Возможно перед заказом необходимо сделать перемещение товара на данный склад.");	
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		СтрокаТЧ = Объект.ТабличнаяЧасть.Добавить();
		СтрокаТЧ.Номенклатура = Выборка.Номенклатура;
		СтрокаТЧ.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		СтрокаТЧ.ВидЦеныПоставщика = Выборка.ВидЦены;
		СтрокаТЧ.Цена = Выборка.Цена;
		СтрокаТЧ.СтавкаНДС = Выборка.СтавкаНДС;
		СтрокаТЧ.Склад = ПолучитьСкладПоТипуНоменклатуры(Выборка.Номенклатура);
		СтрокаТЧ.Код = Выборка.Код;
		СтрокаТЧ.КоэффициентПересчетаУпаковок = 1;
		СтрокаТЧ.Количество = Выборка.КоличествоОстаток;
		СтрокаТЧ.Сумма = СтрокаТЧ.Количество * СтрокаТЧ.Цена; 
		СтрокаТЧ.СуммаНДС = СтрокаТЧ.Сумма / ((100+Выборка.СтавкаНДССтавка)/100) * (Выборка.СтавкаНДССтавка/100);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоАссортименту(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указан поставщик!";
		Сообщение.Поле = "Контрагент";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;	
	
	Если Элементы.ТабличнаяЧастьЗаполнитьПоАссортименту.Заголовок = "Заполнить по товарам со склада возврата" Тогда
		ЗаполнитьПоОстаткамВозвратаНаСервере();
	Иначе
		ЗаполнитьПоАссортиментуНаСервере();
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	//ОрганизацияВДоговоре = БюджетныйНаСервере.ВернутьРеквизиты(Объект.Договор, "Организация");
	//Если ТипЗнч(ОрганизацияВДоговоре) = Тип("Структура") И ЗначениеЗаполнено(ОрганизацияВДоговоре.Организация) Тогда
	//	Объект.Организация = ОрганизацияВДоговоре.Организация;
	//КонецЕсли;  
	
	УстановитьДоступностьДокумента();
	УстановкаЗапретаРедактированияЦен(Не Элемент = Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПустыеСтроки(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВопроса", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, "Строки с пустым количеством будут очищены. Продолжить?",РежимДиалогаВопрос.ДаНет, 60);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		КУдалению = Новый Массив;
		Для каждого ТекСтрока Из Объект.ТабличнаяЧасть Цикл
			Если НЕ ТекСтрока.Количество Тогда
				КУдалению.Добавить(ТекСтрока);	
			КонецЕсли; 
		КонецЦикла; 
		
		Для каждого ТекУд Из КУдалению Цикл
			Объект.ТабличнаяЧасть.Удалить(ТекУд);	
			Модифицированность = Истина;
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры 


&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	//++саб
	сабПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи);
	//--саб
КонецПроцедуры

&НаСервере
Процедура УдалениеМаршрутаИзРегистра()
	НаборЗаписей = РегистрыСведений.ЗаказыПоМаршрутам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЗаказКлиента.Установить(Объект.Ссылка);
	НаборЗаписей.Прочитать();
	Если НЕ НаборЗаписей.Количество() = 0 Тогда
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина);
	КонецЕсли;	
КонецПроцедуры	

&НаСервере
Процедура ЗаписатьЗаказыПоМаршрутам()
		НоваяЗапись = РегистрыСведений.ЗаказыПоМаршрутам.СоздатьМенеджерЗаписи();	
		НоваяЗапись.ЗаказКлиента = Объект.Ссылка;
		НоваяЗапись.Маршрут = Маршрут;
		НоваяЗапись.Записать();
КонецПроцедуры

&НаСервере
Процедура сабПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьАртикулы();
	Если ВедетсяУчетТары Тогда
		ЗаполнитьЗначенияТары();
	КонецЕсли;
	
	ЗаполнитьОстаткиИРезервы();
	ЗаполнитьКонтрольМинЦены();
	Если АльтернативнаяФорма Тогда
		Для каждого СтрокаТовары Из Объект.ТабличнаяЧасть Цикл
			ЗаполнитьПредставлениеУпаковок(СтрокаТовары); 
		КонецЦикла;
	КонецЕсли;
	
	ВозможноЧастичноеИсполнениеЗаказов = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("ВозможноЧастичноеИсполнениеЗаказов");
	Если ЗначениеЗаполнено(Объект.Ссылка) И ВозможноЧастичноеИсполнениеЗаказов Тогда
		ЗаполнитьКолонкуОтгружено();
	КонецЕсли; 
	Элементы.ТабличнаяЧастьОтгружено.Видимость = ВозможноЧастичноеИсполнениеЗаказов;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	ПодразделениеПриИзмененииСервер();
КонецПроцедуры

&НаСервере
Процедура ПодразделениеПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		РеквизитыПодразделения = БюджетныйНаСервере.ВернутьРеквизиты(Объект.Подразделение, "Склад, Организация");
		
		Если Объект.ВидОперации = Перечисления.ВидыЗаказов.ВозвратБрака Тогда
			Объект.Склад = сабОперОбщегоНазначения.ПолучитьСкладПоДопСвойству(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Склад возврата (Склады)", Истина), Объект.Предприятие);	
			Если ЗначениеЗаполнено(Объект.Склад) Тогда
				Элементы.Склад.Доступность = Ложь;
			Иначе
				Объект.Склад = РеквизитыПодразделения.Склад;
			КонецЕсли;
		Иначе
			Объект.Склад = РеквизитыПодразделения.Склад;
		КонецЕсли;
		
		Объект.Организация = РеквизитыПодразделения.Организация;
		КонтрагентПриИзмененииСервер();
	КонецЕсли; 
	
	
КонецПроцедуры



&НаКлиенте
Процедура ТабличнаяЧастьСтавкаНДСПриИзменении(Элемент)
	РассчитатьСумму();
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьЦену(Команда)
	
	Для Каждого ТекДанные Из Объект.ТабличнаяЧасть Цикл
		УстановитьЗависимыеДанныеВТЧ(ТекДанные);
		РассчитатьСуммуТовары(ТекДанные);
	КонецЦикла;
	Модифицированность = Истина;
	
	ЗаполнитьКонтрольМинЦены();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуТовары(ТекДанные = Неопределено)
	
	Если ТекДанные = Неопределено Тогда
		ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	КонецЕсли;	
	
	Если Не ТекДанные = Неопределено Тогда
		ТекДанные.Сумма = ТекДанные.Количество * ТекДанные.Цена;
		//ТекДанные.СуммаОтгрузки = ТекДанные.Количество * ТекДанные.Цена;
		
		ТекРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.СтавкаНДС, "Ставка");
		Если НЕ ТекРеквизиты = Неопределено Тогда
			ТекДанные.СуммаНДС = ТекДанные.Сумма / ((100+ТекРеквизиты.Ставка)/100) * (ТекРеквизиты.Ставка/100);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗависимыеДанныеВТЧ(ТекДанные) Экспорт
	
	//Установим единицу измерения по умолчанию
	Если АльтернативнаяФорма Тогда
		Если ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
			ТекДанные.ЕдиницаИзмерения = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.Номенклатура, "ЕдиницаИзмерения").ЕдиницаИзмерения; 
		КонецЕсли;
	Иначе
		ТекДанные.ЕдиницаИзмерения = ПолучитьЕдИзмНоменклатуры(ТекДанные.Номенклатура);
	КонецЕсли;
	МассивЕдИзмНоменклатуры = ПолучитьМассивВозможныхЕдиницИзмеренияНоменклатуры(ТекДанные.Номенклатура);
	
	Элементы.ТабличнаяЧастьЕдиницаИзмерения.СписокВыбора.Очистить();
	
	Для Каждого ЭлементВыборкаЕдИзм Из МассивЕдИзмНоменклатуры Цикл
		Элементы.ТабличнаяЧастьЕдиницаИзмерения.СписокВыбора.Добавить(ЭлементВыборкаЕдИзм);
	КонецЦикла;
	
	
	Если АльтернативнаяФорма Тогда 
		ЗаполнитьПредставлениеУпаковок(ТекДанные);	
	Иначе
		ТекДанные.КоэффициентПересчетаУпаковок = ПолучитьКоэффициентПересчетаУпаковок(ТекДанные.Номенклатура, ТекДанные.ЕдиницаИзмерения);
	КонецЕсли;	
	РассчитатьКоличество(ТекДанные);

	//Если Объект.Счет = УЧ_Сервер.СчетПоКоду("79.02") Тогда
	//	ЦенаКЗаполнению = РассчитатьЦенуВНХ(ТекДанные.Номенклатура, Объект.ПредприятиеПоставщик, Объект.ПодразделениеВн, Объект.Предприятие, Объект.Подразделение, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()));
	//	//ЦенаКЗаполнению = сабОперОбщегоНазначения.РассчитатьЦенуВНХ(ТекДанные.Наименование, Объект.Предприятие, Объект.Подразделение, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()));
	//	Если ЦенаКЗаполнению <> 0 Тогда
	//		ТекДанные.Цена = ЦенаКЗаполнению;
	//	КонецЕсли;
	//Иначе
		ЦенаКЗаполнению = РассчитатьЦену(ТекДанные.Номенклатура, Объект.Контрагент, Объект.Предприятие, Объект.Подразделение, Объект.Дата, Объект.Договор);
		//Если ЦенаКЗаполнению <> 0 Тогда
			ТекДанные.Цена = ЦенаКЗаполнению;
		//КонецЕсли;
	//КонецЕсли;	
	
	//Установим НДС и артикул
	Если ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
		ТекРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.Номенклатура, "СтавкаНДС, Код, Счет10, ВидСтавкиНДС, ЕдиницаИзмерения, Кратность, МинимальнаяПартия", Ложь);
		ТекДанные.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвВидовСтавокНДСБУХУУ().Получить(ТекРеквизиты.ВидСтавкиНДС);;
		ТекДанные.ЕдиницаИзмерения = ТекРеквизиты.ЕдиницаИзмерения;
		ТекДанные.Кратность = ТекРеквизиты.Кратность;
		//ТекДанные.КоличествоВУпаковке = ТекРеквизиты.МинимальнаяПартия;
		//ТекДанные.Счет = ТекРеквизиты.Счет10;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ТекДанные.Склад = Объект.Склад;	
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеУпаковок(ТекДанные)
	
	Если ТипЗнч(ТекДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		СтруктураВозврата = ПолучитьКоличествоВУпаковкеПоУмолчаниюДляНоменклатуры(ТекДанные.Номенклатура);
		ТекДанные.КоэффициентПересчетаУпаковок = СтруктураВозврата.Коэффициент;
		ПредставлениеУпаковки = СтруктураВозврата.Упаковка;
		ПредставлениеЕдИзмерения = ТекДанные.ЕдиницаИзмерения; 
	Иначе
		СтруктураВозврата = ПолучитьКоличествоВУпаковкеПоУмолчаниюДляНоменклатуры(ТекДанные.Номенклатура);
		ТекДанные.КоэффициентПересчетаУпаковок = ПолучитьКоэффициентПересчетаУпаковок(ТекДанные.Номенклатура, ТекДанные.ЕдиницаИзмерения);
		ПредставлениеУпаковки = ТекДанные.ЕдиницаИзмерения; 
		ПредставлениеЕдИзмерения = ПолучитьПредставлениеЕдиницыУпаковки(ТекДанные.Номенклатура,ТекДанные.ЕдиницаИзмерения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДанные.ЕдиницаИзмерения) И ЗначениеЗаполнено(ТекДанные.КоэффициентПересчетаУпаковок) Тогда
		ТекДанные.КоличествоВУпаковкеПредставление = "(" +  Строка(ТекДанные.КоэффициентПересчетаУпаковок) + " " + ПредставлениеЕдИзмерения +")";
	ИначеЕсли ЗначениеЗаполнено(ТекДанные.КоэффициентПересчетаУпаковок) Тогда
		ТекДанные.КоличествоВУпаковкеПредставление = Строка(ТекДанные.КоэффициентПересчетаУпаковок);
	Иначе
		ТекДанные.КоличествоВУпаковкеПредставление = Строка(ТекДанные.КоличествоУпаковок);
	КонецЕсли;
	//Если ТекДанные.КоэффициентПересчетаУпаковок = 0 ИЛИ ТекДанные.КоэффициентПересчетаУпаковок = 1 Тогда
		//КолУпаковок = ?(ТекДанные.КоэффициентПересчетаУпаковок, ТекДанные.КоэффициентПересчетаУпаковок, ТекДанные.КоличествоВУпаковкеПредставление);
		//КолЕдиниц = ТекДанные.Количество;
		//ТекДанные.КоличествоУпаковокПредставление = "" + КолУпаковок + " "  + ПредставлениеУпаковки + ?(ТекДанные.КоэффициентПересчетаУпаковок И ТекДанные.Количество, "," +
		//КолЕдиниц + " " + ПредставлениеЕдИзмерения, "");     
	Если Не СтруктураВозврата.ЕстьУпаковка Тогда
		КолУпаковок = 0;
		КолЕдиниц = ТекДанные.Количество;
		ТекДанные.КоличествоУпаковокПредставление = "" + КолУпаковок + " "  + ПредставлениеУпаковки + ?(ТекДанные.Количество, "," +
		КолЕдиниц + " " + ПредставлениеЕдИзмерения, ""); 
	ИначеЕсли ТекДанные.КоэффициентПересчетаУпаковок = 0 Тогда
		КолУпаковок = ?(ТекДанные.КоэффициентПересчетаУпаковок, ТекДанные.КоэффициентПересчетаУпаковок, ТекДанные.КоличествоВУпаковкеПредставление);
		КолЕдиниц = ТекДанные.Количество;
		ТекДанные.КоличествоУпаковокПредставление = "" + КолУпаковок + " "  + ПредставлениеУпаковки + ?(ТекДанные.КоэффициентПересчетаУпаковок И ТекДанные.Количество, "," +
		КолЕдиниц + " " + ПредставлениеЕдИзмерения, "");     
	Иначе
		КолУпаковок = Цел(ТекДанные.Количество / ТекДанные.КоэффициентПересчетаУпаковок);
		КолЕдиниц = ТекДанные.Количество - (КолУпаковок * ТекДанные.КоэффициентПересчетаУпаковок);
		ТекДанные.КоличествоУпаковокПредставление = "" + КолУпаковок + " " + ПредставлениеУпаковки + ?(КолЕдиниц, ", " +
		КолЕдиниц + " " + ПредставлениеЕдИзмерения, "");
	КонецЕсли; 
	//ТекДанные.КоличествоУпаковок = Цел(?(ТекДанные.КоэффициентПересчетаУпаковок = 0,ТекДанные.КоличествоВУпаковкеПредставление,ТекДанные.Количество / ТекДанные.КоэффициентПересчетаУпаковок)); 
	ТекДанные.КоличествоУпаковок = ?(ТекДанные.КоэффициентПересчетаУпаковок = 0,ТекДанные.КоличествоВУпаковкеПредставление,Цел(ТекДанные.Количество / ТекДанные.КоэффициентПересчетаУпаковок)); 

	//ТекДанные.КоличествоВУпаковке = ТекДанные.КоэффициентПересчетаУпаковок;
	ТекДанные.КоличествоВУпаковке = ?(ТекДанные.КоэффициентПересчетаУпаковок = 0 И ТекДанные.КоличествоУпаковок <> 0, Цел(ТекДанные.Количество / ТекДанные.КоличествоУпаковок),ТекДанные.КоэффициентПересчетаУпаковок);

КонецПроцедуры


&НаСервереБезКонтекста
Функция РассчитатьЦену(Номенклатура, Контрагент, Предприятие, Подразделение, Дата, Договор)
	
	МассивТиповЦен = Новый Массив;
	ТипЦенКонтрагент = Неопределено;
	ТипЦенДоговор = Неопределено;
		
	Если ЗначениеЗаполнено(Договор.ТипЦен) Тогда
		МассивТиповЦен.Добавить(Договор.ТипЦен);
		ТипЦенДоговор = Договор.ТипЦен;		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент.ТипЦен) Тогда 
		МассивТиповЦен.Добавить(Контрагент.ТипЦен);
		ТипЦенКонтрагент = Контрагент.ТипЦен;
	КонецЕсли;
		
	Если Не МассивТиповЦен.Количество() Тогда
		Возврат 0;
	КонецЕсли;
	              
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|	1 КАК ПриоритетЦены,
	|	ЦеныНоменклатурыСрезПоследних.ТипЦен КАК ТипЦен
	|ПОМЕСТИТЬ ВТ_ДанныеЦен
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Период,
	|			Номенклатура = &Номенклатура
	|				И ТипЦен = &ТипЦенДоговор
	|				И ТИПЗНАЧЕНИЯ(Регистратор) = ТИП(Документ.Установкаценноменклатуры)
	|				И (ВЫРАЗИТЬ(Регистратор КАК Документ.УстановкаЦенНоменклатуры).ДействуетБессрочно
	|					ИЛИ (ВЫРАЗИТЬ(Регистратор КАК Документ.УстановкаЦенНоменклатуры).НачалоДействияЦен <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ИЛИ ВЫРАЗИТЬ(Регистратор КАК Документ.УстановкаЦенНоменклатуры).ОкончаниеДействияЦен <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|						И ВЫБОР
	|							КОГДА ВЫРАЗИТЬ(Регистратор КАК Документ.УстановкаЦенНоменклатуры).НачалоДействияЦен <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|								ТОГДА &Период >= ВЫРАЗИТЬ(Регистратор КАК Документ.УстановкаЦенНоменклатуры).НачалоДействияЦен
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|						И ВЫБОР
	|							КОГДА ВЫРАЗИТЬ(Регистратор КАК Документ.УстановкаЦенНоменклатуры).ОкончаниеДействияЦен <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|								ТОГДА &Период <= ВЫРАЗИТЬ(Регистратор КАК Документ.УстановкаЦенНоменклатуры).ОкончаниеДействияЦен
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ)) КАК ЦеныНоменклатурыСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Цена,
	|	2,
	|	ЦеныНоменклатурыСрезПоследних.ТипЦен
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Период,
	|			Номенклатура = &Номенклатура
	|				И ТипЦен = &ТипЦенКонтрагент
	|				И ВЫБОР
	|					КОГДА ТИПЗНАЧЕНИЯ(регистратор) = ТИП(документ.УстановкаЦенНоменклатуры)
	|						ТОГДА ВЫРАЗИТЬ(Регистратор КАК Документ.УстановкаЦенНоменклатуры).НачалоДействияЦен = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|									И ВЫРАЗИТЬ(Регистратор КАК Документ.УстановкаЦенНоменклатуры).ОкончаниеДействияЦен = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|								ИЛИ ВЫРАЗИТЬ(Регистратор КАК Документ.УстановкаЦенНоменклатуры).ДействуетБессрочно
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ) КАК ЦеныНоменклатурыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВТ_ДанныеЦен.Цена) КАК Цена,
	|	ВТ_ДанныеЦен.ПриоритетЦены КАК ПриоритетЦены,
	|	ВТ_ДанныеЦен.ТипЦен КАК ТипЦен
	|ИЗ
	|	ВТ_ДанныеЦен КАК ВТ_ДанныеЦен
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДанныеЦен.ПриоритетЦены,
	|	ВТ_ДанныеЦен.ТипЦен
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриоритетЦены";
	
	Запрос.УстановитьПараметр("Период", Дата);
	//Запрос.УстановитьПараметр("Предприятие", Предприятие);
	//Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ТипЦенКонтрагент", ТипЦенКонтрагент);
	Запрос.УстановитьПараметр("ТипЦенДоговор", ТипЦенДоговор);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Цена;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции	


&НаСервереБезКонтекста
Функция РассчитатьЦенуВнутреннегоПеремещения(Номенклатура, Предприятие, Подразделение, ПодразделениеПолучатель, Дата)

Запрос = Новый Запрос;
Запрос.Текст = 
"ВЫБРАТЬ
|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
|ИЗ
|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
|			&Период,
|			ВидЦены.ЦенаПродажи
|				И Предприятие = &Предприятие
|				И Номенклатура = &Номенклатура
|				И Подразделение = &Подразделение) КАК ЦеныНоменклатурыСрезПоследних";
Запрос.УстановитьПараметр("Период", Дата);
Запрос.УстановитьПараметр("Предприятие", Предприятие);
Запрос.УстановитьПараметр("Подразделение", Подразделение);
Запрос.УстановитьПараметр("Номенклатура", Номенклатура);

Выборка = Запрос.Выполнить().Выбрать();
Пока Выборка.Следующий() Цикл
	Возврат ?(Подразделение.Организация = ПодразделениеПолучатель.Организация, Выборка.Цена, Выборка.Цена/1.1);
КонецЦикла;

Возврат 0;

КонецФункции

//К удалению: перенесена в общий модуль
&НаСервереБезКонтекста
Функция РассчитатьЦенуВНХ(Номенклатура, Предприятие, Подразделение, Дата)

Если Номенклатура.Счет10 = ПланыСчетов.Учетный.Счет43() Тогда
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Период,
	|			Предприятие = &Предприятие
	|				И Подразделение = &Подразделение
	|				И Номенклатура = &Номенклатура
	|				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних";
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ВидЦены", Справочники.ВидыЦен.НайтиПоНаименованию("Производство ВН", Истина));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Цена;
	КонецЦикла;
	
	Возврат 0;
Иначе
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Цена
	|ИЗ
	|	РегистрСведений.НоменклатураПоставщика.СрезПоследних(
	|			&Период,
	|			Предприятие = &Предприятие
	|				И Подразделение = &Подразделение
	|				И Номенклатура = &Номенклатура) КАК НоменклатураПоставщикаСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Период,
	|				Предприятие = &Предприятие
	|					И Подразделение = &Подразделение
	|					И Номенклатура = &Номенклатура
	|					И ВидЦены.ЦенаПоставщика) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО НоменклатураПоставщикаСрезПоследних.Предприятие = ЦеныНоменклатурыСрезПоследних.Предприятие
	|			И НоменклатураПоставщикаСрезПоследних.Подразделение = ЦеныНоменклатурыСрезПоследних.Подразделение
	|			И НоменклатураПоставщикаСрезПоследних.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И НоменклатураПоставщикаСрезПоследних.Контрагент = ЦеныНоменклатурыСрезПоследних.ВидЦены.Поставщик";
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Цена;
	КонецЦикла;
	
	Возврат 0;
КонецЕсли;	

КонецФункции	

&НаСервере
Процедура ПереопределитьСвязиПараметровВыбора()

НовыйМассив = Новый Массив();
НовыйМассив.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Контрагент"));
НовыйМассив.Добавить(Новый СвязьПараметраВыбора("Отбор.Предприятие", "Объект.Предприятие"));

Если Не Объект.Подразделение.ПроизводственноеПодразделение Тогда
	НовыйМассив.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));
КонецЕсли;		

НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);

Элементы.Договор.СвязиПараметровВыбора = НовыеСвязи;

КонецПроцедуры

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

ПереопределитьСвязиПараметровВыбора();	

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзExcel(Команда)
	
	ФормаЗагрузки = ПолучитьФорму("ОбщаяФорма.ФормаЗагрузкиИзExcel", Новый Структура("ВидЗагрузки, Договор", "ЗагрузкаВТЧЗаказКлиента", Объект.Договор));
	
	ПутьКФайлу = ФормаЗагрузки.ОткрытьМодально();
	
	Если ЗначениеЗаполнено(ПутьКФайлу) Тогда
		СтруктураВозврата = ФормаЗагрузки.ПолучитьДанныеПоЗагрузке(ПутьКФайлу);
		
		Для Каждого ЭлементСтруктурыВозврата Из СтруктураВозврата Цикл
			ТекДанные = Объект.ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(ТекДанные, ЭлементСтруктурыВозврата.Значение);
			УстановитьЗависимыеДанныеВТЧ(ТекДанные);
			РассчитатьСумму(ТекДанные);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ГУИДСтроки = Новый УникальныйИдентификатор; 
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьТаблицуПоТаре()	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыВозвратнойТары.Наименование КАК Наименование,
	|	ВидыВозвратнойТары.Код КАК Код
	|ИЗ
	|	Справочник.ВидыВозвратнойТары КАК ВидыВозвратнойТары
	|ГДЕ
	|	НЕ ВидыВозвратнойТары.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	ТаблицаВидовТары = Запрос.Выполнить().Выгрузить();

	МассивРеквизитов = Новый Массив;

	Для Каждого СтрокаТары Из ТаблицаВидовТары Цикл
		МассивРеквизитов.Добавить(Новый РеквизитФормы("с" + СтрокаТары.Код, Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(2,0)), "Объект.ТабличнаяЧасть"));
	КонецЦикла;	
	ИзменитьРеквизиты(МассивРеквизитов, );      
	
	ЭлементРодитель = Элементы.Найти("ГруппаТара");
	
	Для Каждого СтрокаТары Из ТаблицаВидовТары Цикл
		НовыйЭлемент = Элементы.Добавить("с" + СтрокаТары.Код, Тип("ПолеФормы"), ЭлементРодитель); 
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = "Объект.ТабличнаяЧасть." + "с" + СтрокаТары.Код;
		НовыйЭлемент.Заголовок = СтрокаТары.Наименование;
		НовыйЭлемент.Ширина = 3;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", "ТараПриИзменении");
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ТараПриИзменении(Элемент)
		
	ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
		
	ТараПриИзмененииНаСервере(ТекДанные.ГУИДСтроки, Элемент.Имя, ТекДанные[Элемент.Имя]);
	
КонецПроцедуры

&НаСервере
Процедура ТараПриИзмененииНаСервере(ТекГУИД, ТекИмя, ТекЗначение)

	ВидТары = Справочники.ВидыВозвратнойТары.НайтиПоКоду(СтрЗаменить(ТекИмя, "с", "")); 
	
	НайденныеСтроки = Объект.ВозвратнаяТара.НайтиСтроки(Новый Структура("ГУИДСтроки, Вид", ТекГУИД, ВидТары));
	Если НайденныеСтроки.Количество() = 0 Тогда
		ТекСтрока = Объект.ВозвратнаяТара.Добавить();
		ТекСтрока.ГУИДСтроки = ТекГУИД;
	Иначе
		ТекСтрока = НайденныеСтроки[0];
		Если ТекЗначение = 0 Тогда
			Объект.ВозвратнаяТара.Удалить(ТекСтрока);
		КонецЕсли;	
	КонецЕсли;
	
	Если Не ТекЗначение = 0 Тогда
		ТекСтрока.Вид = ВидТары;
		ТекСтрока.Значение = ТекЗначение;
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ТабличнаяЧастьПередУдалением(Элемент, Отказ)
	
	ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
		
	ТараУдалить(ТекДанные.ГУИДСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ТараУдалить(ТекГУИД)
	
	НайденныеСтроки = Объект.ВозвратнаяТара.НайтиСтроки(Новый Структура("ГУИДСтроки", ТекГУИД));
	Для Каждого ТекСтрока Из НайденныеСтроки Цикл
		Объект.ВозвратнаяТара.Удалить(ТекСтрока);
	КонецЦикла;
		
КонецПроцедуры	

Процедура ЗаполнитьЗначенияТары()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыВозвратнойТары.Ссылка КАК Ссылка,
	|	ВидыВозвратнойТары.Код КАК Код
	|ИЗ
	|	Справочник.ВидыВозвратнойТары КАК ВидыВозвратнойТары
	|ГДЕ
	|	НЕ ВидыВозвратнойТары.ПометкаУдаления";
	ТаблицаВидов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекСтрока Из Объект.ТабличнаяЧасть Цикл
		Для Каждого СтрокаВидов Из ТаблицаВидов Цикл
			НайденныеСтрокиТары = Объект.ВозвратнаяТара.НайтиСтроки(Новый Структура("ГУИДСтроки, Вид", ТекСтрока.ГУИДСтроки, СтрокаВидов.Ссылка));
			Для Каждого СтрокаТары Из НайденныеСтрокиТары Цикл
				ТекСтрока["с" + СтрокаВидов.Код] = СтрокаТары.Значение;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла; 	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Если ВключенаНастройкаДляФормы2 Тогда
		УстановитьЗаголовокДляФормы2();
	КонецЕсли;
	Оповестить("ФормированиеМаршрута");
	Если ЗакрытьДокумент Тогда
		ЗакрытьДокумент = Ложь;
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СпособДоставкиПриИзменении(Элемент)
	СпособДоставкиПриИзмененииНаСервере(Не Элемент = Неопределено);
КонецПроцедуры

&НаСервере
Процедура СпособДоставкиПриИзмененииНаСервере(Изменять)
	
	РеквзитыДоставкиДоступны = Объект.СпособДоставки = Справочники.СпособыДоставки.Самовывоз;
	
	Элементы.Группа6.Доступность = НЕ РеквзитыДоставкиДоступны;
	
	Элементы.АдресДоставки.ТолькоПросмотр = ЗаблокироватьРеквизитыЗаказа ИЛИ ТекДоступность;
	Элементы.МаршрутДоставки.ТолькоПросмотр = ЗаблокироватьРеквизитыЗаказа ИЛИ ТекДоступность;
	Элементы.МенеджерКонтрагента.ТолькоПросмотр = ЗаблокироватьРеквизитыЗаказа ИЛИ ТекДоступность;
	Элементы.Телефон.ТолькоПросмотр = ЗаблокироватьРеквизитыЗаказа ИЛИ ТекДоступность;
	//Элементы.ДатаДоставки1.ТолькоПросмотр = ЗаблокироватьРеквизитыЗаказа ИЛИ ТекДоступность;
	//Элементы.ДатаДоставкиДо.ТолькоПросмотр = ЗаблокироватьРеквизитыЗаказа ИЛИ ТекДоступность;
	Элементы.ДатаДоставки1.ТолькоПросмотр = ТекДоступность;
	Элементы.ДатаДоставкиДо.ТолькоПросмотр = ТекДоступность; 
	
	 

	
	Элементы.ДатаПоступления.Видимость = РеквзитыДоставкиДоступны;
	Элементы.ОтветственныйЗаНаборку.Видимость = РеквзитыДоставкиДоступны; 
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	СкладПриИзмененииНаСервере(Не Элемент = Неопределено); 
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере(Изменять)
	//ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.АдресТорговойТочки;
	//Объект.АдресОтправления = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияНаДату(Объект.Склад, ВидКонтактнойИнформации);
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение = "Подразделения контрагента..." Тогда
		Объект.АдресДоставки = "";
		ЗначениеОтбора = Новый Структура("Владелец", Объект.Контрагент);
		ПараметрыФормы = Новый Структура("Отбор, РежимВыбора", ЗначениеОтбора, Истина);
		ОткрытьФорму("Справочник.ПодразделенияКонтрагентов.ФормаВыбора", ПараметрыФормы,,,,, Новый ОписаниеОповещения("АдресДоставкиОбработкаВыбораЗавершение", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиОбработкаВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	Если ЗначениеЗаполнено(Результат) Тогда
		РеквыОбъекта = БюджетныйНаСервере.ВернутьРеквизиты(Результат, "Адрес, Ответственный, Выразить(Спр.Ответственный КАК Справочник.СотрудникиКонтрагентов).Телефон КАК ОтветственныйТелефон, ДатаДоставки, ДатаДоставкиДо, МаршрутДоставки,ВремяПоДнямНеделиПереключатель"); 
		Объект.АдресДоставки = РеквыОбъекта.Адрес;
		Объект.МаршрутДоставки = РеквыОбъекта.МаршрутДоставки;
		Объект.МенеджерКонтрагента = РеквыОбъекта.Ответственный;
		Объект.Телефон = РеквыОбъекта.ОтветственныйТелефон;
		Если РеквыОбъекта.ВремяПоДнямНеделиПереключатель Тогда
			ЗаполнитьВремяДоставкиПоДнямНедели(Результат,Объект.ДатаДоставки,Объект.ДатаДоставкиДо);	
		Иначе
			Объект.ДатаДоставки = НачалоДня(Объект.ДатаДоставки) + (РеквыОбъекта.ДатаДоставки - НачалоДня(РеквыОбъекта.ДатаДоставки));
			Объект.ДатаДоставкиДо = НачалоДня(Объект.ДатаДоставки) + (РеквыОбъекта.ДатаДоставкиДо - НачалоДня(РеквыОбъекта.ДатаДоставкиДо));
		КонецЕсли;
	Иначе
		Объект.АдресДоставки = "";
		Объект.МаршрутДоставки = ПредопределенноеЗначение("Справочник.МаршрутыДоставки.ПустаяСсылка");
		Объект.МенеджерКонтрагента = ПредопределенноеЗначение("Справочник.СотрудникиКонтрагентов.ПустаяСсылка");
		Объект.Телефон = "";
		//Объект.ДатаДоставки = Дата(1,1,1);
		//Объект.ДатаДоставкиДо = Дата(1,1,1);
	КонецЕсли;
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьВремяДоставкиПоДнямНедели(Результат,ДатаДоставки,ДатаДоставкиДо)
	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.ПодразделенияКонтрагентов") Тогда
		РеквыОбъекта = БюджетныйНаСервере.ВернутьРеквизиты(Результат, "ПонедельникДатаДоставки, ПонедельникДатаДоставкиДо, 
		|ВторникДатаДоставки, ВторникДатаДоставкиДо, СредаДатаДоставки, СредаДатаДоставкиДо,ЧетвергДатаДоставки,ЧетвергДатаДоставкиДо,
		|ПятницаДатаДоставки,ПятницаДатаДоставкиДо,СубботаДатаДоставки,СубботаДатаДоставкиДо,ВоскресеньеДатаДоставки,ВоскресеньеДатаДоставкиДо");
		Если ЗначениеЗаполнено(ДатаДоставки) Тогда
			ДеньНеделиДатыДоставки = ДеньНедели(ДатаДоставки);
			Если ДеньНеделиДатыДоставки = 1 Тогда
				ДатаДоставки = НачалоДня(ДатаДоставки) + (РеквыОбъекта.ПонедельникДатаДоставки - НачалоДня(РеквыОбъекта.ПонедельникДатаДоставки));
				ДатаДоставкиДо = НачалоДня(ДатаДоставки) + (РеквыОбъекта.ПонедельникДатаДоставкиДо - НачалоДня(РеквыОбъекта.ПонедельникДатаДоставкиДо)); 
			ИначеЕсли ДеньНеделиДатыДоставки = 2 Тогда
				ДатаДоставки = НачалоДня(ДатаДоставки) + (РеквыОбъекта.ВторникДатаДоставки - НачалоДня(РеквыОбъекта.ВторникДатаДоставки));
				ДатаДоставкиДо = НачалоДня(ДатаДоставки) + (РеквыОбъекта.ВторникДатаДоставкиДо - НачалоДня(РеквыОбъекта.ВторникДатаДоставкиДо)); 
			ИначеЕсли ДеньНеделиДатыДоставки = 3 Тогда
				ДатаДоставки = НачалоДня(ДатаДоставки) + (РеквыОбъекта.СредаДатаДоставки - НачалоДня(РеквыОбъекта.СредаДатаДоставки));
				ДатаДоставкиДо = НачалоДня(ДатаДоставки) + (РеквыОбъекта.СредаДатаДоставкиДо - НачалоДня(РеквыОбъекта.СредаДатаДоставкиДо));
			ИначеЕсли ДеньНеделиДатыДоставки = 4 Тогда
				ДатаДоставки = НачалоДня(ДатаДоставки) + (РеквыОбъекта.ЧетвергДатаДоставки - НачалоДня(РеквыОбъекта.ЧетвергДатаДоставки));
				ДатаДоставкиДо = НачалоДня(ДатаДоставки) + (РеквыОбъекта.ЧетвергДатаДоставкиДо - НачалоДня(РеквыОбъекта.ЧетвергДатаДоставкиДо));
			ИначеЕсли ДеньНеделиДатыДоставки = 5 Тогда
				ДатаДоставки = НачалоДня(ДатаДоставки) + (РеквыОбъекта.ПятницаДатаДоставки - НачалоДня(РеквыОбъекта.ПятницаДатаДоставки));
				ДатаДоставкиДо = НачалоДня(ДатаДоставки) + (РеквыОбъекта.ПятницаДатаДоставкиДо - НачалоДня(РеквыОбъекта.ПятницаДатаДоставкиДо));
			ИначеЕсли ДеньНеделиДатыДоставки = 6 Тогда
				ДатаДоставки = НачалоДня(ДатаДоставки) + (РеквыОбъекта.СубботаДатаДоставки - НачалоДня(РеквыОбъекта.СубботаДатаДоставки));
				ДатаДоставкиДо = НачалоДня(ДатаДоставки) + (РеквыОбъекта.СубботаДатаДоставкиДо - НачалоДня(РеквыОбъекта.СубботаДатаДоставкиДо));
			ИначеЕсли ДеньНеделиДатыДоставки = 7 Тогда
				ДатаДоставки = НачалоДня(ДатаДоставки) + (РеквыОбъекта.ВоскресеньеДатаДоставки - НачалоДня(РеквыОбъекта.ВоскресеньеДатаДоставки));
				ДатаДоставкиДо = НачалоДня(ДатаДоставки) + (РеквыОбъекта.ВоскресеньеДатаДоставкиДо - НачалоДня(РеквыОбъекта.ВоскресеньеДатаДоставкиДо));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ДатаПоступленияПриИзменении(Элемент)
	Объект.ДатаДоставки = Объект.ДатаПоступления;
	
	Если ЗначениеЗаполнено(Объект.ПодразделениеКонтрагента) Тогда
		РеквыОбъекта = БюджетныйНаСервере.ВернутьРеквизиты(Объект.ПодразделениеКонтрагента, "Адрес, Ответственный, Выразить(Спр.Ответственный КАК Справочник.СотрудникиКонтрагентов).Телефон КАК ОтветственныйТелефон, ДатаДоставки, ДатаДоставкиДо, МаршрутДоставки"); 
		Объект.ДатаДоставки = НачалоДня(Объект.ДатаДоставки) + (РеквыОбъекта.ДатаДоставки - НачалоДня(РеквыОбъекта.ДатаДоставки));
		Объект.ДатаДоставкиДо = НачалоДня(Объект.ДатаДоставки) + (РеквыОбъекта.ДатаДоставкиДо - НачалоДня(РеквыОбъекта.ДатаДоставкиДо));
	Иначе
		Объект.ДатаДоставкиДо = Объект.ДатаДоставки;	
	КонецЕсли;
	
	ЗаполнитьОтветственного();
	ЗаполнитьЗадолженностьКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаДоставкиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ПодразделениеКонтрагента) Тогда
		РеквыОбъекта = БюджетныйНаСервере.ВернутьРеквизиты(Объект.ПодразделениеКонтрагента, "Адрес, Ответственный, Выразить(Спр.Ответственный КАК Справочник.СотрудникиКонтрагентов).Телефон КАК ОтветственныйТелефон, ДатаДоставки, ДатаДоставкиДо, МаршрутДоставки,ВремяПоДнямНеделиПереключатель"); 
		Если РеквыОбъекта.ВремяПоДнямНеделиПереключатель Тогда
			ЗаполнитьВремяДоставкиПоДнямНедели(Объект.ПодразделениеКонтрагента,Объект.ДатаДоставки,Объект.ДатаДоставкиДо);	
		//Иначе
		//	Объект.ДатаДоставки = НачалоДня(Объект.ДатаДоставки) + (РеквыОбъекта.ДатаДоставки - НачалоДня(РеквыОбъекта.ДатаДоставки));
		//	Объект.ДатаДоставкиДо = НачалоДня(Объект.ДатаДоставки) + (РеквыОбъекта.ДатаДоставкиДо - НачалоДня(РеквыОбъекта.ДатаДоставкиДо)); 
		КонецЕсли;
	//Иначе
	//	Объект.ДатаДоставкиДо = Объект.ДатаДоставки + 60*60*2;
	КонецЕсли;
	Объект.ДатаПоступления = Объект.ДатаДоставки;
	
	ЗаполнитьОтветственного(); 
	ЗаполнитьЗадолженностьКонтрагента();

КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиПриИзменении(Элемент)
	АдресДоставкиПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура АдресДоставкиПриИзмененииНаСервере(Изменять = Истина)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	*
	|ИЗ
	|	Справочник.ПодразделенияКонтрагентов КАК ПодразделенияКонтрагентов
	|ГДЕ
	|	ПодразделенияКонтрагентов.Адрес = &Адрес
	|	И ПодразделенияКонтрагентов.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Адрес", Объект.АдресДоставки);
	Запрос.УстановитьПараметр("Владелец", Объект.Контрагент);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Объект.АдресДоставки = ?(Изменять ИЛИ ЗначениеЗаполнено(Выборка.Адрес), Выборка.Адрес, Объект.АдресДоставки);
		Объект.МаршрутДоставки = ?(Изменять ИЛИ ЗначениеЗаполнено(Выборка.МаршрутДоставки), Выборка.МаршрутДоставки, Объект.МаршрутДоставки);
		Объект.МенеджерКонтрагента = ?(Изменять ИЛИ ЗначениеЗаполнено(Выборка.Ответственный), Выборка.Ответственный, Объект.МенеджерКонтрагента);
		Объект.Телефон = ?(Изменять ИЛИ ЗначениеЗаполнено(Выборка.Ответственный.Телефон), Выборка.Ответственный.Телефон, Объект.Телефон);
		Объект.ДатаДоставки = НачалоДня(Объект.ДатаДоставки) + (Выборка.ДатаДоставки - НачалоДня(Выборка.ДатаДоставки));
		Объект.ДатаДоставкиДо = НачалоДня(Объект.ДатаДоставкиДо) + (Выборка.ДатаДоставкиДо - НачалоДня(Выборка.ДатаДоставкиДо));
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ТабличнаяЧастьКоличествоНаОстатках" Тогда
		СтандартнаяОбработка = Ложь;
		ТекСпис = Новый СписокЗначений;
		ТекСпис.Добавить("Обновить");
		ТекВыбор = Неопределено;
		ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ТабличнаяЧастьВыборЗавершение", ЭтаФорма), ТекСпис, Элементы.ТабличнаяЧастьКоличествоНаОстатках);
	ИначеЕсли Поле.Имя = "ТабличнаяЧастьКоличествоВРезервах" Тогда
		СтандартнаяОбработка = Ложь;
		ТекСпис = Новый СписокЗначений;
		ТекСпис.Добавить("Обновить");
		ТекСпис.Добавить("Открыть список заказов");
		ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ТабличнаяЧастьВыборЗавершение1", ЭтаФорма), ТекСпис, Элементы.ТабличнаяЧастьКоличествоВРезервах);
	ИначеЕсли Поле.Имя = "ТабличнаяЧастьКоличествоКПоставке" Тогда
		СтандартнаяОбработка = Ложь;
		ТекСпис = Новый СписокЗначений;
		ТекСпис.Добавить("Обновить");
		ТекСпис.Добавить("Открыть список заказов");
		ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ТабличнаяЧастьВыборЗавершение2", ЭтаФорма), ТекСпис, Элементы.ТабличнаяЧастьКоличествоКПоставке);
	ИначеЕсли Поле.Имя = "ТабличнаяЧастьЕдиницаИзмерения" Тогда
		//СтандартнаяОбработка = Ложь;
		ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
		МассивЕдИзмНоменклатуры = ПолучитьМассивВозможныхЕдиницИзмеренияНоменклатуры(ТекДанные.Номенклатура);
		Элементы.ТабличнаяЧастьЕдиницаИзмерения.СписокВыбора.Очистить(); 
		Для Каждого ЭлементВыборкаЕдИзм Из МассивЕдИзмНоменклатуры Цикл
			Элементы.ТабличнаяЧастьЕдиницаИзмерения.СписокВыбора.Добавить(ЭлементВыборкаЕдИзм);
		КонецЦикла;   
	ИначеЕсли Поле.Имя = "ТабличнаяЧастьОтгружено" Тогда 
		ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
		СтандартнаяОбработка = Ложь; 
		Если ЗначениеЗаполнено(ТекДанные.Отгружено) Тогда
			ОписаниОповещения = Новый ОписаниеОповещения("ВыборЗначенияДокументыОтгрузкиДляЗаказа",ЭтотОбъект);
			ПоказатьВыборИзМеню(ОписаниОповещения,ТекДанные.ДокументыОтгрузкиДляЗаказа, Поле); 
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

	
&НаКлиенте
Процедура ВыборЗначенияДокументыОтгрузкиДляЗаказа(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ПоказатьЗначение(,Результат.Значение);
	КонецЕсли;
	
КонецПроцедуры  

&НаКлиенте
Процедура ТабличнаяЧастьВыборЗавершение2(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ТекВыбор = ВыбранныйЭлемент;
	Если ТекВыбор = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТекВыбор.Значение = "Обновить" Тогда
		ЗаполнитьОстаткиИРезервы();
		ЗаполнитьКонтрольМинЦены();
	ИначеЕсли ТекВыбор.Значение = "Открыть список заказов" Тогда
		
		ТекФорма = ПолучитьФорму("Документ.ЗаказКлиента.Форма.ФормаРасшифровкиРезервов",,, Новый УникальныйИдентификатор);
		
		ТекФорма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		Для каждого ТекСтрока Из ВремТЧЗаказыПоставщикам Цикл
			Если Не ТекСтрока.Номенклатура = Элементы.ТабличнаяЧасть.ТекущиеДанные.Номенклатура Тогда
				Продолжить;			
			КонецЕсли;
			НоваяСтрока = ТекФорма.ВремТЧЗаказы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЦикла;
		ТекФорма.КоличИтого = ТекФорма.ВремТЧЗаказы.Итог("Количество");
		ТекФорма.Открыть();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьВыборЗавершение1(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ТекВыбор = ВыбранныйЭлемент;
	Если ТекВыбор = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТекВыбор.Значение = "Обновить" Тогда
		ЗаполнитьОстаткиИРезервы();
		ЗаполнитьКонтрольМинЦены();
	ИначеЕсли ТекВыбор.Значение = "Открыть список заказов" Тогда
		
		ТекФорма = ПолучитьФорму("Документ.ЗаказКлиента.Форма.ФормаРасшифровкиРезервов",,, Новый УникальныйИдентификатор);
		
		ТекФорма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		Для каждого ТекСтрока Из ВремТЧЗаказы Цикл
			Если Не ТекСтрока.Номенклатура = Элементы.ТабличнаяЧасть.ТекущиеДанные.Номенклатура Тогда
				Продолжить;			
			КонецЕсли;
			НоваяСтрока = ТекФорма.ВремТЧЗаказы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЦикла;
		ТекФорма.КоличИтого = ТекФорма.ВремТЧЗаказы.Итог("Количество");
		ТекФорма.Открыть();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьВыборЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ТекВыбор = ВыбранныйЭлемент;
	Если ТекВыбор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекВыбор.Значение = "Обновить" Тогда
		ЗаполнитьОстаткиИРезервы();		
		ЗаполнитьКонтрольМинЦены();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Для каждого ТекСтрока Из Объект.ТабличнаяЧасть Цикл
		Если НеУчитыватьРезервыПриходаДляКонтроляОстатковВЗаказахКлиентов Тогда
			ТекСтрока.КоличествоОстаток = ТекСтрока.КоличествоНаОстатках - ТекСтрока.КоличествоВРезервах - ТекСтрока.Количество; 
		Иначе	
			ТекСтрока.КоличествоОстаток = ТекСтрока.КоличествоНаОстатках + ТекСтрока.КоличествоКПоставке - ТекСтрока.КоличествоВРезервах - ТекСтрока.Количество; 
		КонецЕсли;
	КонецЦикла;
	//Объект.ТабличнаяЧасть.Сортировать("Номенклатура");
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеКонтрагентаПриИзменении(Элемент)
	АдресДоставкиОбработкаВыбораЗавершение(Объект.ПодразделениеКонтрагента, Новый Структура);
	Если ЗначениеЗаполнено(Объект.ПодразделениеКонтрагента) Тогда
		РеквыОбъекта = БюджетныйНаСервере.ВернутьРеквизиты(Объект.ПодразделениеКонтрагента, "Склад"); 
		Если ЗначениеЗаполнено(РеквыОбъекта.Склад) Тогда
			Объект.Склад = РеквыОбъекта.Склад;
			Для Каждого ТекСтрокаТЧ Из Объект.ТабличнаяЧасть Цикл
				ТекСтрокаТЧ.Склад = РеквыОбъекта.Склад;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура БезвозмезднаяПередачаПриИзменении(Элемент)
	БезвозмезднаяПередачаПриИзмененииНаСервере(Не Элемент = Неопределено);
КонецПроцедуры

&НаСервере
Процедура БезвозмезднаяПередачаПриИзмененииНаСервере(Изменять)
	
	Если Изменять Тогда
		
		Если Объект.БезвозмезднаяПередача Тогда
			
			Для каждого ТекСтрока Из Объект.ТабличнаяЧасть Цикл
				ТекСтрока.Цена = 0;
				ТекСтрока.Сумма = 0;
				ТекСтрока.СуммаНДС = 0;
			КонецЦикла;
			
		КонецЕсли; 
		
	КонецЕсли;    
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	ЗакрытьДокумент = Истина;
	Отказ = Не ПроверитьЗаполнение();
	Если Отказ Тогда
		Возврат;			
	КонецЕсли;
	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеДляДокументаНажатие(Элемент, СтандартнаяОбработка)
	
	Если ТипЗнч(ОснованиеДляДокумента) = Тип("Строка") Тогда
		СтандартнаяОбработка = Ложь; 
		ОписаниОповещения = Новый ОписаниеОповещения("ВыборЗначенияДокументаОснования",ЭтотОбъект);
		ПоказатьВыборИзМеню(ОписаниОповещения,ОснованиеДляДокументаСписок, Элементы.ОснованиеДляДокумента);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначенияДокументаОснования(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ПоказатьЗначение(,Результат.Значение);
	КонецЕсли;
	
КонецПроцедуры  

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");
	СписокСвойств = Неопределено;
	Если ЭтоВставкаИзБуфера Тогда
		
		ТаблицаТоваров = ВыбранноеЗначение.Данные;
		СписокСвойств = ВыбранноеЗначение.СписокСвойств;
		
	Иначе
		
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
		
	КонецЕсли;
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	//СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
	//	ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта, Ложь);
	
	//ЗаполнитьСтавкиНДСВРознице	= НТТ И УчетВПродажныхЦенах И РазделятьПоСтавкамНДС;
	ЗаполнитьСтавкиНДСВРознице = Ложь;
	
	СтрокиДляЗаполненияСчетов = Новый Массив;
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара, СписокСвойств);
		СтрокиДляЗаполненияСчетов.Добавить(СтрокаТабличнойЧасти);
		
		сабОбщегоНазначенияБУХКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
		
	КонецЦикла;
	
	//СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляЗаполненияСчетов, ИмяТаблицы, Объект, Документы.СписаниеТоваров);
	
	Если ЭтоВставкаИзБуфера Тогда
		
		ВыбранноеЗначение.КоличествоДобавленныхСтрок = СтрокиДляЗаполненияСчетов.Количество();
		
	КонецЕсли;
	
	//ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаКлиенте
Процедура СкопироватьСтроки(Команда)

	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы.Форма].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	ИмяТекущейСтраницы = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	ИмяТаблицы = "";
	Если ИмяТекущейСтраницы = "ГруппаОсновное" Тогда
		
		ИмяТаблицы = Новый Структура;
    ИмяТаблицы.Вставить("Форма","ТабличнаяЧасть");
    ИмяТаблицы.Вставить("Документ","ТабличнаяЧасть");
		
	КонецЕсли;
	
	Возврат ИмяТаблицы;
	
КонецФункции

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы.Документ], 
		Элементы[ИмяТаблицы.Форма].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

	КонецПроцедуры
	
&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы.Документ);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)
	
	СписокСвойств = Новый Массив;
	
	Если ПараметрыВставки.ИмяТаблицы = "ТабличнаяЧасть" Тогда
		
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("ВидДоставки");
		СписокСвойств.Добавить("ВидЦеныПоставщика");
		СписокСвойств.Добавить("ВнутреннийНомерВБДПокупателя");
		СписокСвойств.Добавить("ВнутреннийНомерВБДПоставщика");
		//СписокСвойств.Добавить("ГУИДСтроки");
		СписокСвойств.Добавить("ДатаПоступления");
		СписокСвойств.Добавить("Доставка");
		СписокСвойств.Добавить("ЕдиницаИзмерения");
		//СписокСвойств.Добавить("ИсходныйНомерСтроки");
		СписокСвойств.Добавить("Код");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("КоличествоВЗапайках");
		СписокСвойств.Добавить("КоличествоВРезервах");
		СписокСвойств.Добавить("КоличествоВУпаковке");
		СписокСвойств.Добавить("КоличествоКПоставке");
		СписокСвойств.Добавить("КоличествоНаОстатках");
		СписокСвойств.Добавить("КоличествоОстаток");
		СписокСвойств.Добавить("КоличествоПодтвержденное");
		СписокСвойств.Добавить("КоличествоУпаковок");
		СписокСвойств.Добавить("КоэффициентПересчетаУпаковок");
		СписокСвойств.Добавить("Кратность");
		СписокСвойств.Добавить("НаименованиеПоставщика");
		СписокСвойств.Добавить("НарушенКонтрольМинЦены");
		//СписокСвойств.Добавить("НомерСтроки");
		СписокСвойств.Добавить("СерияНоменклатуры");
		СписокСвойств.Добавить("Склад");
		СписокСвойств.Добавить("СтавкаНДС");
		СписокСвойств.Добавить("СтатусПодтвержденияПозиции");
		СписокСвойств.Добавить("Сумма");
		СписокСвойств.Добавить("СуммаБезНДС");
		СписокСвойств.Добавить("СуммаДоставки");
		СписокСвойств.Добавить("СуммаНДС");
		СписокСвойств.Добавить("Цена");
		СписокСвойств.Добавить("ЦенаПодтвержденная");
		СписокСвойств.Добавить("ШтрихкодПоставщика");

		Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда
			
			СписокСвойств.Добавить("СчетУчета");
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
	ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)

	Доступность = Не Форма.ТолькоПросмотр И Доступность;
	Элементы = Форма.Элементы;
	Элементы.ТоварыВставитьСтроки.Доступность						 = Доступность;
	Элементы.ТоварыКонтекстноеМенюВставитьСтроки.Доступность		 = Доступность;
	Элементы.УслугиВставитьСтроки.Доступность						 = Доступность;
	Элементы.УслугиКонтекстноеМенюВставитьСтроки.Доступность		 = Доступность;
	
КонецПроцедуры

#КонецОбласти

#Область ПодборТоваров

&НаКлиенте
Процедура Подобрать(Команда)
	
	Если ВключенаНастройкаДляФормы2 Тогда
		ОписаниеОповещенияДляФормы2 = Новый ОписаниеОповещения("ПослеОтветаПодборСНастройкойФорма2",ЭтотОбъект);
		КнопкиДляВопросаФорма2 = Новый СписокЗначений;
		КнопкиДляВопросаФорма2.Добавить("ОбычныйЗаказ","Обычный заказ (номенклатура БЕЗ формы 2)");
		КнопкиДляВопросаФорма2.Добавить("ДляФормы2","Для формы 2");
		КнопкиДляВопросаФорма2.Добавить("ВсяНоменклатура","Вся номенклатура (не рекомендуется)");
		ПоказатьВопрос(ОписаниеОповещенияДляФормы2,"Выберите вариант подбора номенклатуры",КнопкиДляВопросаФорма2,,,"Включена настройка для формы 2"); 
	Иначе
		ОписаниеОповещенияПослеПодбора = Новый ОписаниеОповещения("ЗаполтитьТоварыПоПодбору",ЭтотОбъект);
		СтруктураПараметров = Новый Структура("Контрагент, Договор, Склад,Предприятие,Заголовок", Объект.Контрагент, Объект.Договор, Объект.Склад,Объект.Предприятие, "Подбор товаров для документа " + Объект.Ссылка);
		ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаДляПодбораЗаказ",СтруктураПараметров,ЭтотОбъект,УникальныйИдентификатор,,,ОписаниеОповещенияПослеПодбора,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли; 
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеОтветаПодборСНастройкойФорма2(Результат,ДопПараметры) Экспорт
	
	Если Результат = "ОбычныйЗаказ" Тогда
		ОписаниеОповещенияПослеПодбора = Новый ОписаниеОповещения("ЗаполтитьТоварыПоПодбору",ЭтотОбъект);
		СтруктураПараметров = Новый Структура("Контрагент, Договор, Склад,Предприятие,Заголовок,Форма2", Объект.Контрагент, Объект.Договор, Объект.Склад,Объект.Предприятие, "Подбор товаров для документа " + Объект.Ссылка,Ложь);
		ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаДляПодбораЗаказ",СтруктураПараметров,ЭтотОбъект,УникальныйИдентификатор,,,ОписаниеОповещенияПослеПодбора,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли Результат = "ДляФормы2" Тогда	
		ОписаниеОповещенияПослеПодбора = Новый ОписаниеОповещения("ЗаполтитьТоварыПоПодбору",ЭтотОбъект);
		СтруктураПараметров = Новый Структура("Контрагент, Договор, Склад,Предприятие,Заголовок,Форма2", Объект.Контрагент, Объект.Договор, Объект.Склад,Объект.Предприятие, "Подбор товаров для документа " + Объект.Ссылка,Истина);
		ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаДляПодбораЗаказ",СтруктураПараметров,ЭтотОбъект,УникальныйИдентификатор,,,ОписаниеОповещенияПослеПодбора,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли Результат = "ВсяНоменклатура" Тогда
		ОписаниеОповещенияПослеПодбора = Новый ОписаниеОповещения("ЗаполтитьТоварыПоПодбору",ЭтотОбъект);
		СтруктураПараметров = Новый Структура("Контрагент, Договор, Склад,Предприятие,Заголовок", Объект.Контрагент, Объект.Договор, Объект.Склад,Объект.Предприятие, "Подбор товаров для документа " + Объект.Ссылка);
		ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаДляПодбораЗаказ",СтруктураПараметров,ЭтотОбъект,УникальныйИдентификатор,,,ОписаниеОповещенияПослеПодбора,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполтитьТоварыПоПодбору(Результат,ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если ЭтоАдресВременногоХранилища(Результат) Тогда
			ЗаполнитьПоПодборуНаСервере(Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПодборуНаСервере(АдресВХ)
	
	ТЗДанныеПодбора = ПолучитьИзВременногоХранилища(АдресВХ);	
	Если ТипЗнч(ТЗДанныеПодбора) = Тип("ТаблицаЗначений") Тогда
		Для Каждого СтрокаТовара Из ТЗДанныеПодбора Цикл
			НайденныеСтроки = Объект.ТабличнаяЧасть.НайтиСтроки(Новый Структура("Номенклатура,Цена",СтрокаТовара.Номенклатура,СтрокаТовара.Цена));
			Если НайденныеСтроки.Количество() > 0 Тогда 
				ТекДанные = НайденныеСтроки[0];
				Если АльтернативнаяФорма Тогда
					ТекДанные.Количество = ТекДанные.Количество + СтрокаТовара.Количество; 
				Иначе
					ТекДанные.КоличествоУпаковок = ТекДанные.КоличествоУпаковок + СтрокаТовара.Количество; 
					ТекДанные.Количество = ТекДанные.КоэффициентПересчетаУпаковок * ТекДанные.КоличествоУпаковок;
				КонецЕсли;
				ТекДанные.Сумма = ТекДанные.Количество * ТекДанные.Цена;
				ТекРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.СтавкаНДС, "Ставка");
				Если НЕ ТекРеквизиты = Неопределено Тогда
					ТекДанные.СуммаНДС = ТекДанные.Сумма / ((100+ТекРеквизиты.Ставка)/100) * (ТекРеквизиты.Ставка/100);
				КонецЕсли;
				Если АльтернативнаяФорма Тогда
					Если ТипЗнч(ТекДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
						СтруктураВозврата = ПолучитьКоличествоВУпаковкеПоУмолчаниюДляНоменклатуры(ТекДанные.Номенклатура);
						ТекДанные.КоэффициентПересчетаУпаковок = СтруктураВозврата.Коэффициент;
						ПредставлениеУпаковки = СтруктураВозврата.Упаковка;
						ПредставлениеЕдИзмерения = ТекДанные.ЕдиницаИзмерения; 
					Иначе
						ТекДанные.КоэффициентПересчетаУпаковок = ПолучитьКоэффициентПересчетаУпаковок(ТекДанные.Номенклатура, ТекДанные.ЕдиницаИзмерения);
						ПредставлениеУпаковки = ТекДанные.ЕдиницаИзмерения; 
						ПредставлениеЕдИзмерения = ПолучитьПредставлениеЕдиницыУпаковки(ТекДанные.Номенклатура,ТекДанные.ЕдиницаИзмерения);
					КонецЕсли;
					//ТекДанные.КоличествоВУпаковке = ТекДанные.КоэффициентПересчетаУпаковок;
					ТекДанные.КоличествоУпаковок = Цел(?(ТекДанные.КоэффициентПересчетаУпаковок = 0,ТекДанные.КоличествоУпаковок,ТекДанные.Количество / ТекДанные.КоэффициентПересчетаУпаковок)); 
					//ТекДанные.КоличествоВУпаковке = ТекДанные.КоэффициентПересчетаУпаковок;
                    ТекДанные.КоличествоВУпаковке = ?(ТекДанные.КоэффициентПересчетаУпаковок = 0 И ТекДанные.КоличествоУпаковок <> 0, Цел(ТекДанные.Количество / ТекДанные.КоличествоУпаковок),ТекДанные.КоэффициентПересчетаУпаковок);

					Если ТекДанные.КоличествоВУпаковке = 0 ИЛИ ТекДанные.КоличествоВУпаковке = 1 Тогда
						КолУпаковок = 0;
						КолЕдиниц = ТекДанные.Количество;
						ТекДанные.КоличествоУпаковокПредставление = "" + КолУпаковок + " "  + ПредставлениеУпаковки + ?(ТекДанные.КоэффициентПересчетаУпаковок И ТекДанные.Количество, "," +
						КолЕдиниц + " " + ПредставлениеЕдИзмерения, "");
					Иначе
						КолУпаковок = Цел(ТекДанные.Количество / ТекДанные.КоличествоВУпаковке);
						КолЕдиниц = ТекДанные.Количество - (КолУпаковок * ТекДанные.КоличествоВУпаковке);
						ТекДанные.КоличествоУпаковокПредставление = "" + КолУпаковок + " " + ПредставлениеУпаковки + ?(КолЕдиниц, ", " +
						КолЕдиниц + " " + ПредставлениеЕдИзмерения, "");
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				НоваяСтрокаТовары = Объект.ТабличнаяЧасть.Добавить();
				НоваяСтрокаТовары.Номенклатура = СтрокаТовара.Номенклатура;
				НоваяСтрокаТовары.Цена = СтрокаТовара.Цена;
				ТекДанные = НоваяСтрокаТовары; 
				//Установим единицу измерения по умолчанию
				Если АльтернативнаяФорма Тогда
					ТекДанные.ЕдиницаИзмерения = НоваяСтрокаТовары.Номенклатура.ЕдиницаИзмерения;
				Иначе
				ТекДанные.ЕдиницаИзмерения = ПолучитьЕдИзмНоменклатуры(ТекДанные.Номенклатура);
				КонецЕсли;
				МассивЕдИзмНоменклатуры = ПолучитьМассивВозможныхЕдиницИзмеренияНоменклатуры(ТекДанные.Номенклатура);
				Элементы.ТабличнаяЧастьЕдиницаИзмерения.СписокВыбора.Очистить();
				Для Каждого ЭлементВыборкаЕдИзм Из МассивЕдИзмНоменклатуры Цикл
					Элементы.ТабличнаяЧастьЕдиницаИзмерения.СписокВыбора.Добавить(ЭлементВыборкаЕдИзм);
				КонецЦикла;
				//ТекДанные.КоэффициентПересчетаУпаковок = ПолучитьКоэффициентПересчетаУпаковок(ТекДанные.Номенклатура, ТекДанные.ЕдиницаИзмерения);
				Если АльтернативнаяФорма Тогда 
					ТекДанные.Количество = СтрокаТовара.Количество;
					ЗаполнитьПредставлениеУпаковок(ТекДанные);
				Иначе 
					ТекДанные.КоэффициентПересчетаУпаковок = ПолучитьКоэффициентПересчетаУпаковок(ТекДанные.Номенклатура, ТекДанные.ЕдиницаИзмерения);
					ТекДанные.КоличествоУпаковок = СтрокаТовара.Количество; 
					ТекДанные.Количество = ТекДанные.КоэффициентПересчетаУпаковок * ТекДанные.КоличествоУпаковок;
				КонецЕсли;  
				ТекДанные.КоличествоВУпаковке = ТекДанные.КоэффициентПересчетаУпаковок;  
				ТекДанные.Сумма = ТекДанные.Количество * ТекДанные.Цена;
				
				//Установим НДС и артикул
				Если ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
					ТекРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.Номенклатура, "СтавкаНДС, Код, Счет10, ВидСтавкиНДС, ЕдиницаИзмерения, Кратность, МинимальнаяПартия", Ложь);
					ТекДанные.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвВидовСтавокНДСБУХУУ().Получить(ТекРеквизиты.ВидСтавкиНДС);;
					ТекДанные.Кратность = ТекРеквизиты.Кратность; 
					ТекРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.СтавкаНДС, "Ставка");
					Если НЕ ТекРеквизиты = Неопределено Тогда
						ТекДанные.СуммаНДС = ТекДанные.Сумма / ((100+ТекРеквизиты.Ставка)/100) * (ТекРеквизиты.Ставка/100);
					КонецЕсли;
				КонецЕсли;
				Если ЗначениеЗаполнено(Объект.Склад) Тогда
					ТекДанные.Склад = Объект.Склад;	
				КонецЕсли;
				СтруктураДанных =Новый Структура("Номенклатура, Склад, КоличествоОстаток, КоличествоНаОстатках, КоличествоВРезервах, КоличествоКПоставке, Количество", 
				ТекДанные.Номенклатура, ТекДанные.Склад, ТекДанные.КоличествоОстаток, ТекДанные.КоличествоНаОстатках,
				ТекДанные.КоличествоВРезервах, ТекДанные.КоличествоКПоставке, ТекДанные.Количество);
				ЗаполнитьОстаткиИРезервы(Истина, СтруктураДанных);
				ЗаполнитьКонтрольМинЦены(Истина, СтруктураДанных);
				ЗаполнитьЗначенияСвойств(ТекДанные, СтруктураДанных);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция ПолучитьКоличествоВУпаковкеПоУмолчаниюДляНоменклатуры(Номенклатура)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковкиНоменклатуры.Коэффициент КАК Коэффициент,
	|	УпаковкиНоменклатуры.ОсновнаяУпаковка КАК ОсновнаяУпаковка,
	|	УпаковкиНоменклатуры.Упаковка.Представление КАК Упаковка
	|ИЗ
	|	РегистрСведений.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|ГДЕ
	|	УпаковкиНоменклатуры.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	СтруктураВозврата = Новый Структура("Упаковка,Коэффициент,ЕстьУпаковка");  
	СтруктураВозврата.ЕстьУпаковка = Истина;
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Количество() > 1 Тогда
		Пока Выборка.Следующий() Цикл
			Если Выборка.ОсновнаяУпаковка Тогда
				СтруктураВозврата.Упаковка = Выборка.Упаковка;
				СтруктураВозврата.Коэффициент = Выборка.Коэффициент;
				Возврат СтруктураВозврата; 
			КонецЕсли;
		КонецЦикла;
		Выборка.Сбросить();
		Выборка.Следующий(); 
		СтруктураВозврата.Упаковка = Выборка.Упаковка;
		СтруктураВозврата.Коэффициент = Выборка.Коэффициент;
		Возврат СтруктураВозврата; 
	Иначе
		Если Выборка.Следующий() Тогда
			СтруктураВозврата.Упаковка = Выборка.Упаковка;
			СтруктураВозврата.Коэффициент = Выборка.Коэффициент;
			Возврат СтруктураВозврата; 
		КонецЕсли;
	КонецЕсли; 
	СтруктураВозврата.Упаковка = "уп.";
	СтруктураВозврата.Коэффициент = 1;
	СтруктураВозврата.ЕстьУпаковка = Ложь;
	Возврат СтруктураВозврата; 
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКолонкуОтгружено()
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетНаОплатуПокупателю.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_СчетаНаОплатуПокупателю
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|ГДЕ
	|	СчетНаОплатуПокупателю.Заказ = &Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ДокументыБух
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	(РеализацияТоваровУслуг.Заказ = &Заказ
	|			ИЛИ РеализацияТоваровУслуг.СчетНаОплатуПокупателю В
	|				(ВЫБРАТЬ
	|					ВТ_СчетаНаОплатуПокупателю.Ссылка КАК Ссылка
	|				ИЗ
	|					ВТ_СчетаНаОплатуПокупателю КАК ВТ_СчетаНаОплатуПокупателю))
	|	И НЕ РеализацияТоваровУслуг.ПометкаУдаления
	|	И РеализацияТоваровУслуг.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РозничнаяПродажа.Ссылка
	|ИЗ
	|	Документ.РозничнаяПродажа КАК РозничнаяПродажа
	|ГДЕ
	|	(РозничнаяПродажа.Заказ = &Заказ
	|			ИЛИ РозничнаяПродажа.СчетНаОплатуПокупателю В
	|				(ВЫБРАТЬ
	|					ВТ_СчетаНаОплатуПокупателю.Ссылка КАК Ссылка
	|				ИЗ
	|					ВТ_СчетаНаОплатуПокупателю КАК ВТ_СчетаНаОплатуПокупателю))
	|	И НЕ РозничнаяПродажа.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПередачаТоваров.Ссылка
	|ИЗ
	|	Документ.ПередачаТоваров КАК ПередачаТоваров
	|ГДЕ
	|	ПередачаТоваров.Заказ = &Заказ
	|	И НЕ ПередачаТоваров.ПометкаУдаления
	|	И ПередачаТоваров.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТребованиеНакладная.Ссылка
	|ИЗ
	|	Документ.ТребованиеНакладная КАК ТребованиеНакладная
	|ГДЕ
	|	ТребованиеНакладная.Заказ = &Заказ
	|	И НЕ ТребованиеНакладная.ПометкаУдаления
	|	И ТребованиеНакладная.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	сабОбработкаДокументов.ДокументУУ КАК ДокументУУ,
	|	сабОбработкаДокументов.ДокументБУ КАК ДокументБУ,
	|	сабОбработкаДокументов.ДатаОбработки КАК ДатаОбработки
	|ПОМЕСТИТЬ ВТ_НеПустые
	|ИЗ
	|	РегистрСведений.сабОбработкаДокументов КАК сабОбработкаДокументов
	|ГДЕ
	|	сабОбработкаДокументов.ДокументБУ В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ВТ_ДокументыБух.Ссылка КАК Ссылка
	|			ИЗ
	|				ВТ_ДокументыБух КАК ВТ_ДокументыБух)
	|	И сабОбработкаДокументов.ДокументУУ.Дата ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	сабОбработкаДокументов.ДокументБУ,
	|	сабОбработкаДокументов.ДокументУУ,
	|	сабОбработкаДокументов.ДатаОбработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВТ_НеПустые.ДокументУУ) КАК ДокументУУ,
	|	ВТ_НеПустые.ДокументБУ КАК ДокументБУ,
	|	ВТ_НеПустые.ДатаОбработки КАК ДатаОбработки
	|ПОМЕСТИТЬ Вт_Группировка
	|ИЗ
	|	ВТ_НеПустые КАК ВТ_НеПустые
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_НеПустые.ДокументБУ,
	|	ВТ_НеПустые.ДатаОбработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вт_Группировка.ДокументБУ КАК ДокументБУ,
	|	МАКСИМУМ(Вт_Группировка.ДатаОбработки) КАК ДатаОбработки
	|ПОМЕСТИТЬ Вт_Группировка_Итоговая
	|ИЗ
	|	Вт_Группировка КАК Вт_Группировка
	|
	|СГРУППИРОВАТЬ ПО
	|	Вт_Группировка.ДокументБУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вт_Группировка_Итоговая.ДокументБУ КАК ДокументБУ,
	|	МАКСИМУМ(Вт_Группировка.ДокументУУ) КАК ДокументУУ
	|ПОМЕСТИТЬ ВТ_Итоговая
	|ИЗ
	|	Вт_Группировка_Итоговая КАК Вт_Группировка_Итоговая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Вт_Группировка КАК Вт_Группировка
	|		ПО Вт_Группировка_Итоговая.ДокументБУ = Вт_Группировка.ДокументБУ
	|			И Вт_Группировка_Итоговая.ДатаОбработки = Вт_Группировка.ДатаОбработки
	|
	|СГРУППИРОВАТЬ ПО
	|	Вт_Группировка_Итоговая.ДокументБУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументБУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Итоговая.ДокументУУ КАК ДокументУУ
	|ПОМЕСТИТЬ ВТ_ДокументыРеализации
	|ИЗ
	|	ВТ_Итоговая КАК ВТ_Итоговая
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	УЧ_Реализация.Ссылка
	|ИЗ
	|	Документ.УЧ_Реализация КАК УЧ_Реализация
	|ГДЕ
	|	УЧ_Реализация.ДокОснование = &Заказ
	|	И НЕ УЧ_Реализация.ПометкаУдаления
	|	И УЧ_Реализация.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УЧ_РеализацияТовары.Номенклатура КАК Номенклатура,
	|	УЧ_РеализацияТовары.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_НоменклатураДокумент
	|ИЗ
	|	Документ.УЧ_Реализация.Товары КАК УЧ_РеализацияТовары
	|ГДЕ
	|	УЧ_РеализацияТовары.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ_ДокументыРеализации.ДокументУУ КАК ДокументУУ
	|			ИЗ
	|				ВТ_ДокументыРеализации КАК ВТ_ДокументыРеализации)
	|
	|СГРУППИРОВАТЬ ПО
	|	УЧ_РеализацияТовары.Номенклатура,
	|	УЧ_РеализацияТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УЧ_РеализацияТовары.Номенклатура КАК Номенклатура,
	|	СУММА(УЧ_РеализацияТовары.Количество) КАК Количество
	|ИЗ
	|	Документ.УЧ_Реализация.Товары КАК УЧ_РеализацияТовары
	|ГДЕ
	|	УЧ_РеализацияТовары.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ_ДокументыРеализации.ДокументУУ КАК ДокументУУ
	|			ИЗ
	|				ВТ_ДокументыРеализации КАК ВТ_ДокументыРеализации)
	|
	|СГРУППИРОВАТЬ ПО
	|	УЧ_РеализацияТовары.Номенклатура";
	Запрос.УстановитьПараметр("Заказ",Объект.Ссылка);
	РезультатЗапроса = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	ВыборкаДляСпискаДокументов = РезультатЗапроса[7].Выбрать();
	ВыборкаДляКоличества = РезультатЗапроса[8].Выбрать(); 
	МассивОбработаннойНоменклатуры = Новый Массив;  
	Для Каждого СтрокаТЧ Из Объект.ТабличнаяЧасть Цикл
		Если МассивОбработаннойНоменклатуры.Найти(СтрокаТЧ.Номенклатура) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ВыборкаДляСпискаДокументов.Сбросить();
		ВыборкаДляКоличества.Сбросить();
		СтруктураПоиска = Новый Структура("Номенклатура",СтрокаТЧ.Номенклатура);  
		Если ВыборкаДляКоличества.НайтиСледующий(СтруктураПоиска) Тогда
			НайденныеСтрокиТЧ = Объект.ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска); 
			Если НайденныеСтрокиТЧ.Количество() > 1 Тогда
				ОбщееКоличествоНоменклатуры = ВыборкаДляКоличества.Количество;
				Для Каждого НайденнаяСтрокаТЧ Из НайденныеСтрокиТЧ Цикл	
					НайденнаяСтрокаТЧ.Отгружено = Мин(ОбщееКоличествоНоменклатуры,НайденнаяСтрокаТЧ.Количество);
					ОбщееКоличествоНоменклатуры = ОбщееКоличествоНоменклатуры - НайденнаяСтрокаТЧ.Отгружено;
					НайденнаяСтрокаТЧ.КоличествоОтгрузкиСовпадает = НайденнаяСтрокаТЧ.Отгружено >= НайденнаяСтрокаТЧ.Количество;
					ВыборкаДляСпискаДокументов.Сбросить();
					Пока ВыборкаДляСпискаДокументов.НайтиСледующий(СтруктураПоиска) Цикл
						НайденнаяСтрокаТЧ.ДокументыОтгрузкиДляЗаказа.Добавить(ВыборкаДляСпискаДокументов.Ссылка);	
					КонецЦикла;
				КонецЦикла;
				Если ОбщееКоличествоНоменклатуры > 0 Тогда
					НайденнаяСтрокаТЧ.Отгружено = НайденнаяСтрокаТЧ.Отгружено + ОбщееКоличествоНоменклатуры;
				КонецЕсли;
				МассивОбработаннойНоменклатуры.Добавить(СтрокаТЧ.Номенклатура);
			Иначе
				СтрокаТЧ.Отгружено = ВыборкаДляКоличества.Количество;
				СтрокаТЧ.КоличествоОтгрузкиСовпадает = СтрокаТЧ.Отгружено >= СтрокаТЧ.Количество;
				Пока ВыборкаДляСпискаДокументов.НайтиСледующий(СтруктураПоиска) Цикл
					СтрокаТЧ.ДокументыОтгрузкиДляЗаказа.Добавить(ВыборкаДляСпискаДокументов.Ссылка);	
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент) 
	
	Если Не ЗначениеЗаполнено(Объект.ДатаДоставки) И Не ЗначениеЗаполнено(Объект.ДатаПоступления) Тогда
		ЗаполнитьЗадолженностьКонтрагента(); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьНадписьНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ДокументыЗадолженности.Количество() = 0 И Объект.ЗадолженностьДни > 0 Тогда
		ЗаполнитьЗадолженностьКонтрагента();
	КонецЕсли;
	ОписаниОповещения = Новый ОписаниеОповещения("ВыборЗначенияДокументЗадолженности",ЭтотОбъект);
	ПоказатьВыборИзМеню(ОписаниОповещения,ДокументыЗадолженности, Элементы.ЗадолженностьНадпись);
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыборЗначенияДокументЗадолженности(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ПоказатьЗначение(,Результат.Значение);
	КонецЕсли;
	
КонецПроцедуры  


&НаКлиенте
Процедура ОбновитьЗадолженность(Команда)
	
	ЗаполнитьЗадолженностьКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьБронированиеПослеПодбора(Результат,ДопПараметры) Экспорт
	
	ТД = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	Если Результат <> Неопределено Тогда
		ТД.Забронировано = Результат;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьФормуБронирования()
	
	ПоляНеЗаполнены = Ложь; 
	
	Если Не ЗначениеЗаполнено(Объект.Склад) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Склад должен быть заполнен.";
		Сообщение.Поле = "Объект.Склад";
		Сообщение.Сообщить();
		ПоляНеЗаполнены = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Предприятие) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Предприятие должно быть заполнено.";
		Сообщение.Поле = "Объект.Предприятие";
		Сообщение.Сообщить();
		ПоляНеЗаполнены = Истина;
	КонецЕсли;
	
	ТД = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТД.Номенклатура) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнена номенклатура для текущей строки.";
		Сообщение.Поле = "Объект.ТабличнаяЧасть[" + (ТД.НомерСтроки - 1) + "].Номенклатура";
		Сообщение.Сообщить();
		ПоляНеЗаполнены = Истина;
	КонецЕсли;
	
	Если ПоляНеЗаполнены Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Номенклатура",ТД.Номенклатура);
	ПараметрыПодбора.Вставить("Предприятие",Объект.Предприятие);
	ПараметрыПодбора.Вставить("Склад",Объект.Склад);
	ПараметрыПодбора.Вставить("Период",Объект.Дата);
	ПараметрыПодбора.Вставить("Количество",ТД.Количество);
	ПараметрыПодбора.Вставить("Забронировано",ТД.Забронировано);
	ПараметрыПодбора.Вставить("ЗаказСсылка",Объект.Ссылка);
	ОповещениеПодбора = Новый ОписаниеОповещения("ЗаполнитьБронированиеПослеПодбора",ЭтотОбъект);
	ОткрытьФорму("Документ.ЗаказКлиента.Форма.ФормаБронирования",ПараметрыПодбора,ЭтотОбъект,ЭтотОбъект.УникальныйИдентификатор,,,ОповещениеПодбора,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьЗабронированоОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуБронирования();
	 
КонецПроцедуры

&НаКлиенте
Процедура Забронировать(Команда)
	
	ОткрытьФормуБронирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьБронирование(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтветаОчисткаБронированияТЧ",ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения,"Во всех строках табличной части количество бронирования будет очищено. Продолжить?",РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры 


&НаКлиенте
Процедура ПослеОтветаОчисткаБронированияТЧ(Результат,ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Для каждого СтрокаТЧ Из Объект.ТабличнаяЧасть Цикл
			СтрокаТЧ.Забронировано = 0;
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТранзитныйГрузПриИзмененииНаСервере()
	Элементы.ГруппаПараметровТранзитногоГруза.Доступность = Объект.ТранзитныйГруз;
КонецПроцедуры

&НаКлиенте
Процедура ТранзитныйГрузПриИзменении(Элемент)
	Объект.ДатаТранзитнойОтгрузки = Объект.Дата;
	ТранзитныйГрузПриИзмененииНаСервере();
КонецПроцедуры
