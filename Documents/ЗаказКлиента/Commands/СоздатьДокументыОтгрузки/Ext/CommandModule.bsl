
&НаКлиенте
Процедура ОбработкаКоманды(ПараметрКоманды, ПараметрыВыполненияКоманды)
	
	РеквыЗаказа = БюджетныйНаСервере.ВернутьРеквизиты(ПараметрКоманды, "Организация, ПродажаВРозницу, БезвозмезднаяПередача");
	ДопПараметры = Новый Структура;
	Если ЗначениеЗаполнено(РеквыЗаказа.Организация) Тогда
		Если РеквыЗаказа.БезвозмезднаяПередача Тогда
			ПараметрыФормы = Новый Структура("Основание", ПараметрКоманды);
			ТекстВопроса = "Будут созданы документы: ""Передача товаров"" и ""Счет на оплату"". Продолжить?";
			ДопПараметры.Вставить("Документ", "ПередачаТоваров");
		ИначеЕсли РеквыЗаказа.ПродажаВРозницу Тогда
			ТекстВопроса = "Будут созданы документы: ""Розничная продажа"" и ""Счет на оплату"". Продолжить?";
			ДопПараметры.Вставить("Документ", "РозничнаяПродажа");
			
		Иначе
			ТекстВопроса = "Будут созданы документы: ""Реализация (акты, накладные, УПД)"" и ""Счет на оплату"". Продолжить?";
			ДопПараметры.Вставить("Документ", "РеализацияТоваровУслуг")
		КонецЕсли;
	Иначе	
		ТекстВопроса = "Будут созданы документы: ""Реализация ТМЦ и услуг (упр)"" и ""Счет на оплату"". Продолжить?";
		ДопПараметры.Вставить("Документ", "УЧ_Реализация")
	КонецЕсли; 
	ДопПараметры.Вставить("ДанныеЗаполнения", ПараметрКоманды);
	КнопкиВопроса = Новый СписокЗначений;
	КнопкиВопроса.Добавить(КодВозвратаДиалога.Да,"Создать документы");
	КнопкиВопроса.Добавить(КодВозвратаДиалога.Отмена);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеОтвета",ЭтотОбъект,ДопПараметры);
	ПоказатьВопрос(ОписаниеОповещения,ТекстВопроса,КнопкиВопроса);
	
	
КонецПроцедуры   

#Область ИсходныйКод
//&НаКлиенте
//Процедура ВыполнитьПослеОтвета(Результат, ДопПараметры) Экспорт
//	    
//	Если Результат = КодВозвратаДиалога.Да Тогда
//		ЗаполнитьДокумент(ДопПараметры);
//		Оповестить("СозданыДокументыОтгрузки",ДопПараметры.ДанныеЗаполнения);
//	КонецЕсли; 
//	
//КонецПроцедуры 

//Процедура ЗаполнитьДокумент(ДопПараметры)
//	Отказ = Ложь;
//	РезультатЗаписиОсновногоДокумента = "(проведен)"; 
//	РезультатЗаписиСчетНаОплату = "(проведен)";
//	РезультатЗаписиСчетФактура = "(проведен)";
//	
//	Если ДопПараметры.Свойство("Документ") Тогда
//		Если ДопПараметры.Документ = "ПередачаТоваров" Тогда 
//		НоваяРеализация = Документы.ТребованиеНакладная.СоздатьДокумент();
//			Попытка
//				НоваяРеализация.Заполнить(ДопПараметры.ДанныеЗаполнения);
//				НоваяРеализация.Ответственный = ПараметрыСеанса.ТекущийПользователь;
//				//НоваяРеализация.ДополнительныеСвойства.Вставить("НеИзменятьСтатусЗаказа", Истина); 
//			Исключение 
//				Отказ = Истина;
//				СтрокаСообщения = ОписаниеОшибки();
//				НомерСимвола = СтрНайти(СтрокаСообщения,"}"); 
//				Пока НомерСимвола > 0 Цикл
//					СтрокаСообщения = Прав(СтрокаСообщения, СтрДлина(СтрокаСообщения) - (НомерСимвола+1)); 
//					НомерСимвола = СтрНайти(СтрокаСообщения,"}"); 
//				КонецЦикла;
//				Сообщить(СтрокаСообщения);
//			КонецПопытки;
//			Если НЕ Отказ Тогда 
//				Попытка
//					НоваяРеализация.Записать(РежимЗаписиДокумента.Проведение);
//				Исключение
//					НоваяРеализация.Записать(РежимЗаписиДокумента.Запись); 
//					РезультатЗаписиОсновногоДокумента = "(записан, необходимо провести вручную)";
//				КонецПопытки;
//				Сообщить("Созданы документы: " + НоваяРеализация.Ссылка + РезультатЗаписиОсновногоДокумента);
//			КонецЕсли;
//		КонецЕсли;
//		Если ДопПараметры.Документ = "РозничнаяПродажа" Тогда  
//			НоваяРеализация = Документы.РозничнаяПродажа.СоздатьДокумент();
//			Попытка
//				НоваяРеализация.Заполнить(ДопПараметры.ДанныеЗаполнения);
//				НоваяРеализация.Ответственный = ПараметрыСеанса.ТекущийПользователь;
//				//НоваяРеализация.ДополнительныеСвойства.Вставить("НеИзменятьСтатусЗаказа", Истина); 
//			Исключение 
//				Отказ = Истина;
//				СтрокаСообщения = ОписаниеОшибки();
//				НомерСимвола = СтрНайти(СтрокаСообщения,"}"); 
//				Пока НомерСимвола > 0 Цикл
//					СтрокаСообщения = Прав(СтрокаСообщения, СтрДлина(СтрокаСообщения) - (НомерСимвола+1)); 
//					НомерСимвола = СтрНайти(СтрокаСообщения,"}"); 
//				КонецЦикла;
//				Сообщить(СтрокаСообщения);
//			КонецПопытки;
//			Если НЕ Отказ Тогда 
//				НоваяРеализация.Записать(РежимЗаписиДокумента.Запись);//всегда непроведенным, т.к. нужно закрывать смену вручную
//				РезультатЗаписиОсновногоДокумента = "(записан)";
//				Сообщить("Созданы документы: " + НоваяРеализация.Ссылка + РезультатЗаписиОсновногоДокумента);
//			КонецЕсли;
//		КонецЕсли;
//		Если ДопПараметры.Документ = "РеализацияТоваровУслуг" Тогда
//			НоваяРеализация = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
//			Попытка
//				НоваяРеализация.Заполнить(ДопПараметры.ДанныеЗаполнения);
//				НоваяРеализация.Ответственный = ПараметрыСеанса.ТекущийПользователь;
//			    НоваяРеализация.Дата = ?(ЗначениеЗаполнено(ДопПараметры.ДанныеЗаполнения.ДатаДоставки),ДопПараметры.ДанныеЗаполнения.ДатаДоставки,ТекущаяДата());
//				//НоваяРеализация.ДополнительныеСвойства.Вставить("НеИзменятьСтатусЗаказа", Истина); 
//				ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(НоваяРеализация.ЭтотОбъект);
//			Исключение 
//				Отказ = Истина;
//				СтрокаСообщения = ОписаниеОшибки();
//				НомерСимвола = СтрНайти(СтрокаСообщения,"}"); 
//				Пока НомерСимвола > 0 Цикл
//					СтрокаСообщения = Прав(СтрокаСообщения, СтрДлина(СтрокаСообщения) - (НомерСимвола+1)); 
//					НомерСимвола = СтрНайти(СтрокаСообщения,"}"); 
//				КонецЦикла;;
//				Сообщить(СтрокаСообщения);
//			КонецПопытки;
//			Если НЕ Отказ Тогда 
//				Попытка
//					НоваяРеализация.Записать(РежимЗаписиДокумента.Проведение);
//				Исключение
//					НоваяРеализация.Записать(РежимЗаписиДокумента.Запись); 
//					РезультатЗаписиОсновногоДокумента = "(записан, необходимо провести вручную)";
//				КонецПопытки;
//				
//				НовыйСчет = Документы.СчетНаОплатуПокупателю.СоздатьДокумент();
//				Попытка
//					НовыйСчет.Заполнить(ДопПараметры.ДанныеЗаполнения);
//					НовыйСчет.Ответственный = ПараметрыСеанса.ТекущийПользователь;
//					НовыйСчет.Дата = НоваяРеализация.Дата;
//					СчетЗаполнен = Истина;
//				Исключение
//					СчетЗаполнен = Ложь;
//					СтрокаСообщения = ОписаниеОшибки();
//					НомерСимвола = СтрНайти(СтрокаСообщения,"}"); 
//					Пока НомерСимвола > 0 Цикл
//						СтрокаСообщения = Прав(СтрокаСообщения, СтрДлина(СтрокаСообщения) - (НомерСимвола+1)); 
//						НомерСимвола = СтрНайти(СтрокаСообщения,"}"); 
//					КонецЦикла;
//					Сообщить(СтрокаСообщения);
//				КонецПопытки;
//				Если СчетЗаполнен Тогда 
//					Попытка
//						НовыйСчет.Записать(РежимЗаписиДокумента.Проведение);				
//					Исключение
//						НовыйСчет.Записать();
//						РезультатЗаписиСчетНаОплату = "(записан, необходимо провести вручную)";
//					КонецПопытки;
//					НоваяРеализация.СчетНаОплатуПокупателю = НовыйСчет.Ссылка;
//					НоваяРеализация.Записать(); 
//					ТекстСчет = ", " + НовыйСчет.Ссылка + РезультатЗаписиСчетНаОплату; 
//				Иначе
//					ТекстСчет = "";
//				КонецЕсли;
//				НовыйСчФ = Документы.СчетФактураВыданный.СоздатьДокумент();
//				Попытка
//					НовыйСчФ.Заполнить(НоваяРеализация.Ссылка);  
//					НовыйСчФ.Ответственный = ПараметрыСеанса.ТекущийПользователь;
//					СФЗаполнен = Истина;
//				Исключение
//					СФЗаполнен = Ложь; 
//					СтрокаСообщения = ОписаниеОшибки();
//					НомерСимвола = СтрНайти(СтрокаСообщения,"}"); 
//					Пока НомерСимвола > 0 Цикл
//						СтрокаСообщения = Прав(СтрокаСообщения, СтрДлина(СтрокаСообщения) - (НомерСимвола+1)); 
//						НомерСимвола = СтрНайти(СтрокаСообщения,"}"); 
//					КонецЦикла;
//					Сообщить(СтрокаСообщения);
//				КонецПопытки;
//				Если СФЗаполнен Тогда
//					Попытка
//						НовыйСчФ.Записать(РежимЗаписиДокумента.Проведение);
//					Исключение
//						НовыйСчФ.Записать(РежимЗаписиДокумента.Запись);  
//						РезультатЗаписиСчетФактура = "(записан, необходимо провести вручную)";
//					КонецПопытки; 
//					ТекстСФ = ", " + НовыйСчФ.Ссылка + РезультатЗаписиСчетФактура;
//				Иначе
//					ТекстСФ = "";
//				КонецЕсли;
//				Сообщить("Созданы документы: " + НоваяРеализация.Ссылка + РезультатЗаписиОсновногоДокумента + ТекстСчет + ТекстСФ);
//			КонецЕсли;
//		КонецЕсли;
//		
//		Если ДопПараметры.Документ = "УЧ_Реализация" Тогда
//			НоваяРеализация = Документы.УЧ_Реализация.СоздатьДокумент();
//			Попытка
//				НоваяРеализация.Заполнить(ДопПараметры.ДанныеЗаполнения);
//				НоваяРеализация.Автор = ПараметрыСеанса.ТекущийПользователь;
//				НоваяРеализация.АдресДоставки = ДопПараметры.ДанныеЗаполнения.АдресДоставки;
//				//НоваяРеализация.ДополнительныеСвойства.Вставить("НеИзменятьСтатусЗаказа", Истина); 
//			Исключение 
//				Отказ = Истина;
//				СтрокаСообщения = ОписаниеОшибки();
//				НомерСимвола = СтрНайти(СтрокаСообщения,"}"); 
//				Пока НомерСимвола > 0 Цикл
//					СтрокаСообщения = Прав(СтрокаСообщения, СтрДлина(СтрокаСообщения) - (НомерСимвола+1)); 
//					НомерСимвола = СтрНайти(СтрокаСообщения,"}"); 
//				КонецЦикла;;
//				Сообщить(СтрокаСообщения);
//			КонецПопытки;
//			Если НЕ Отказ Тогда 
//				Попытка
//					НоваяРеализация.Записать(РежимЗаписиДокумента.Проведение);
//				Исключение
//					НоваяРеализация.Записать(РежимЗаписиДокумента.Запись); 
//					РезультатЗаписиОсновногоДокумента = "(записан, необходимо провести вручную)";
//				КонецПопытки;
//				Сообщить("Созданы документы: " + НоваяРеализация.Ссылка + РезультатЗаписиОсновногоДокумента);
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;
//КонецПроцедуры

#КонецОбласти


&НаКлиенте
Процедура ВыполнитьПослеОтвета(Результат, ДопПараметры) Экспорт
	
	//Если Результат = КодВозвратаДиалога.Да Тогда
	//	ЗаполнитьДокумент(ДопПараметры);
	//	Оповестить("СозданыДокументыОтгрузки",ДопПараметры.ДанныеЗаполнения);
	//КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СерииИспользуются = ПолучитьЗначениеСерийногоУчета(); 
		Если СерииИспользуются Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеОтветаЗаполнениеСерий",ЭтотОбъект,ДопПараметры);
			ПоказатьВопрос(ОписаниеОповещения,"Заполнить серии по остаткам при создании документов?",РежимДиалогаВопрос.ДаНетОтмена);
		Иначе
			ЗаполнитьДокумент(ДопПараметры);
			Оповестить("СозданыДокументыОтгрузки",ДопПараметры.ДанныеЗаполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры  

&НаКлиенте
Процедура ВыполнитьПослеОтветаЗаполнениеСерий(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьДокумент(ДопПараметры,Истина);
		Оповестить("СозданыДокументыОтгрузки",ДопПараметры.ДанныеЗаполнения); 
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		ЗаполнитьДокумент(ДопПараметры);
		Оповестить("СозданыДокументыОтгрузки",ДопПараметры.ДанныеЗаполнения);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьУУДокумент(НоваяРеализация);
	
	ЗапросДокУУ = Новый Запрос;
	ЗапросДокУУ.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	сабОбработкаДокументов.ДокументУУ КАК ДокументУУ
	|ИЗ
	|	РегистрСведений.сабОбработкаДокументов КАК сабОбработкаДокументов
	|ГДЕ
	|	сабОбработкаДокументов.ДокументБУ = &ДокБУ";
	
	ЗапросДокУУ.УстановитьПараметр("ДокБУ", НоваяРеализация);
	
	РезультатЗапросаДокУУ = ЗапросДокУУ.Выполнить();
	Если РезультатЗапросаДокУУ.Пустой() Тогда
		Возврат Неопределено;
	Иначе 
		Выборка = РезультатЗапросаДокУУ.Выбрать();
		Выборка.Следующий(); 
		Возврат Выборка.ДокументУУ;
	КонецЕсли;
	
КонецФункции  

&НаСервере
Процедура СоздатьУпрДокументыИЗаполнитьСерии(ДокументБУСсылка)
	
	РегистрыСведений.сабОбработкаДокументов.ОбработатьДокументыБУНаСервере(Новый Структура("Ссылка",ДокументБУСсылка)); 
	ДокументУУ = ПолучитьУУДокумент(ДокументБУСсылка);
	Если ДокументУУ <> Неопределено Тогда
		ЗаполнитьСерииПоФИФОНаСервере(ДокументУУ);
		СинхронизацияСерийПриЗаписиНаСервереФормы(ДокументБУСсылка,ДокументУУ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокумент(ДопПараметры, ЗаполнитьСерии = Ложь)
	Отказ = Ложь;
	РезультатЗаписиОсновногоДокумента = "(проведен)"; 
	РезультатЗаписиСчетНаОплату = "(проведен)";
	РезультатЗаписиСчетФактура = "(проведен)";
	
	Если ДопПараметры.Свойство("Документ") Тогда
		Если ДопПараметры.Документ = "ПередачаТоваров" Тогда 
			НоваяРеализация = Документы.ТребованиеНакладная.СоздатьДокумент();
			Попытка
				НоваяРеализация.Заполнить(ДопПараметры.ДанныеЗаполнения);
				НоваяРеализация.Ответственный = ПараметрыСеанса.ТекущийПользователь;
				//НоваяРеализация.ДополнительныеСвойства.Вставить("НеИзменятьСтатусЗаказа", Истина); 
			Исключение 
				Отказ = Истина;
				СтрокаСообщения = ОписаниеОшибки();
				НомерСимвола = СтрНайти(СтрокаСообщения,"}"); 
				Пока НомерСимвола > 0 Цикл
					СтрокаСообщения = Прав(СтрокаСообщения, СтрДлина(СтрокаСообщения) - (НомерСимвола+1)); 
					НомерСимвола = СтрНайти(СтрокаСообщения,"}"); 
				КонецЦикла;
				Сообщить(СтрокаСообщения);
			КонецПопытки;
			Если НЕ Отказ Тогда 
				Попытка
					НоваяРеализация.Записать(РежимЗаписиДокумента.Проведение);
					Если ЗаполнитьСерии Тогда
						//РегистрыСведений.сабОбработкаДокументов.ОбработатьДокументыБУНаСервере(Новый Структура("Ссылка",НоваяРеализация.Ссылка)); 
						//ДокументУУ = ПолучитьУУДокумент(НоваяРеализация.Ссылка);
						//Если ДокументУУ <> Неопределено Тогда
						//	ЗаполнитьСерииПоФИФОНаСервере(ДокументУУ);
						//	СинхронизацияСерийПриЗаписиНаСервереФормы(НоваяРеализация.Ссылка,ДокументУУ);
						//КонецЕсли; 
						СоздатьУпрДокументыИЗаполнитьСерии(НоваяРеализация.Ссылка);
						НоваяРеализация = НоваяРеализация.Ссылка.ПолучитьОбъект();
					КонецЕсли;
				Исключение
					НоваяРеализация.Записать(РежимЗаписиДокумента.Запись); 
					Если ЗаполнитьСерии Тогда
						//РегистрыСведений.сабОбработкаДокументов.ОбработатьДокументыБУНаСервере(Новый Структура("Ссылка",НоваяРеализация.Ссылка)); 
						//ДокументУУ = ПолучитьУУДокумент(НоваяРеализация.Ссылка);
						//Если ДокументУУ <> Неопределено Тогда
						//	ЗаполнитьСерииПоФИФОНаСервере(ДокументУУ);
						//	СинхронизацияСерийПриЗаписиНаСервереФормы(НоваяРеализация.Ссылка,ДокументУУ);
						//КонецЕсли;
						СоздатьУпрДокументыИЗаполнитьСерии(НоваяРеализация.Ссылка);
						НоваяРеализация = НоваяРеализация.Ссылка.ПолучитьОбъект();
					КонецЕсли;
					РезультатЗаписиОсновногоДокумента = "(записан, необходимо провести вручную)";
				КонецПопытки;
				Сообщить("Созданы документы: " + НоваяРеализация.Ссылка + РезультатЗаписиОсновногоДокумента);
			КонецЕсли;
		КонецЕсли;
		Если ДопПараметры.Документ = "РозничнаяПродажа" Тогда  
			НоваяРеализация = Документы.РозничнаяПродажа.СоздатьДокумент();
			Попытка
				НоваяРеализация.Заполнить(ДопПараметры.ДанныеЗаполнения);
				НоваяРеализация.Ответственный = ПараметрыСеанса.ТекущийПользователь;
				//НоваяРеализация.ДополнительныеСвойства.Вставить("НеИзменятьСтатусЗаказа", Истина); 
			Исключение 
				Отказ = Истина;
				СтрокаСообщения = ОписаниеОшибки();
				НомерСимвола = СтрНайти(СтрокаСообщения,"}"); 
				Пока НомерСимвола > 0 Цикл
					СтрокаСообщения = Прав(СтрокаСообщения, СтрДлина(СтрокаСообщения) - (НомерСимвола+1)); 
					НомерСимвола = СтрНайти(СтрокаСообщения,"}"); 
				КонецЦикла;
				Сообщить(СтрокаСообщения);
			КонецПопытки;
			Если НЕ Отказ Тогда 
				НоваяРеализация.Записать(РежимЗаписиДокумента.Запись);//всегда непроведенным, т.к. нужно закрывать смену вручную 
				Если ЗаполнитьСерии Тогда
					СоздатьУпрДокументыИЗаполнитьСерии(НоваяРеализация.Ссылка);
				КонецЕсли;
				
				РезультатЗаписиОсновногоДокумента = "(записан)";
				Сообщить("Созданы документы: " + НоваяРеализация.Ссылка + РезультатЗаписиОсновногоДокумента);
			КонецЕсли;
		КонецЕсли;
		Если ДопПараметры.Документ = "РеализацияТоваровУслуг" Тогда
			НоваяРеализация = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
			Попытка
				НоваяРеализация.Заполнить(ДопПараметры.ДанныеЗаполнения);
				НоваяРеализация.Ответственный = ПараметрыСеанса.ТекущийПользователь;
				НоваяРеализация.Дата = ?(ЗначениеЗаполнено(ДопПараметры.ДанныеЗаполнения.ДатаДоставки),ДопПараметры.ДанныеЗаполнения.ДатаДоставки,ТекущаяДата());
				//НоваяРеализация.ДополнительныеСвойства.Вставить("НеИзменятьСтатусЗаказа", Истина); 
				ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(НоваяРеализация.ЭтотОбъект);
			Исключение 
				Отказ = Истина;
				СтрокаСообщения = ОписаниеОшибки();
				НомерСимвола = СтрНайти(СтрокаСообщения,"}"); 
				Пока НомерСимвола > 0 Цикл
					СтрокаСообщения = Прав(СтрокаСообщения, СтрДлина(СтрокаСообщения) - (НомерСимвола+1)); 
					НомерСимвола = СтрНайти(СтрокаСообщения,"}"); 
				КонецЦикла;;
				Сообщить(СтрокаСообщения);
			КонецПопытки;
			Если НЕ Отказ Тогда 
				Попытка
					НоваяРеализация.Записать(РежимЗаписиДокумента.Проведение);
					//Если ЗаполнитьСерии Тогда
					//	СоздатьУпрДокументыИЗаполнитьСерии(НоваяРеализация.Ссылка); 
					//	НоваяРеализация = НоваяРеализация.Ссылка.ПолучитьОбъект();
					//КонецЕсли;
				Исключение
					НоваяРеализация.Записать(РежимЗаписиДокумента.Запись); 
					РезультатЗаписиОсновногоДокумента = "(записан, необходимо провести вручную)"; 
					//Если ЗаполнитьСерии Тогда
					//	СоздатьУпрДокументыИЗаполнитьСерии(НоваяРеализация.Ссылка);
					//	НоваяРеализация = НоваяРеализация.Ссылка.ПолучитьОбъект();
					//КонецЕсли;
				КонецПопытки;  
				Если ЗаполнитьСерии Тогда
					СоздатьУпрДокументыИЗаполнитьСерии(НоваяРеализация.Ссылка); 
					НоваяРеализация = НоваяРеализация.Ссылка.ПолучитьОбъект();
				КонецЕсли;
				
				
				НовыйСчет = Документы.СчетНаОплатуПокупателю.СоздатьДокумент();
				Попытка
					НовыйСчет.Заполнить(ДопПараметры.ДанныеЗаполнения);
					НовыйСчет.Ответственный = ПараметрыСеанса.ТекущийПользователь;
					НовыйСчет.Дата = НоваяРеализация.Дата;
					СчетЗаполнен = Истина;
				Исключение
					СчетЗаполнен = Ложь;
					СтрокаСообщения = ОписаниеОшибки();
					НомерСимвола = СтрНайти(СтрокаСообщения,"}"); 
					Пока НомерСимвола > 0 Цикл
						СтрокаСообщения = Прав(СтрокаСообщения, СтрДлина(СтрокаСообщения) - (НомерСимвола+1)); 
						НомерСимвола = СтрНайти(СтрокаСообщения,"}"); 
					КонецЦикла;
					Сообщить(СтрокаСообщения);
				КонецПопытки;
				Если СчетЗаполнен Тогда 
					Попытка
						НовыйСчет.Записать(РежимЗаписиДокумента.Проведение);				
					Исключение
						НовыйСчет.Записать();
						РезультатЗаписиСчетНаОплату = "(записан, необходимо провести вручную)";
					КонецПопытки;
					НоваяРеализация.СчетНаОплатуПокупателю = НовыйСчет.Ссылка;
					НоваяРеализация.Записать(); 
					ТекстСчет = ", " + НовыйСчет.Ссылка + РезультатЗаписиСчетНаОплату; 
				Иначе
					ТекстСчет = "";
				КонецЕсли;
				НовыйСчФ = Документы.СчетФактураВыданный.СоздатьДокумент();
				Попытка
					НовыйСчФ.Заполнить(НоваяРеализация.Ссылка);  
					НовыйСчФ.Ответственный = ПараметрыСеанса.ТекущийПользователь;
					СФЗаполнен = Истина;
				Исключение
					СФЗаполнен = Ложь; 
					СтрокаСообщения = ОписаниеОшибки();
					НомерСимвола = СтрНайти(СтрокаСообщения,"}"); 
					Пока НомерСимвола > 0 Цикл
						СтрокаСообщения = Прав(СтрокаСообщения, СтрДлина(СтрокаСообщения) - (НомерСимвола+1)); 
						НомерСимвола = СтрНайти(СтрокаСообщения,"}"); 
					КонецЦикла;
					Сообщить(СтрокаСообщения);
				КонецПопытки;
				Если СФЗаполнен Тогда
					Попытка
						НовыйСчФ.Записать(РежимЗаписиДокумента.Проведение);
					Исключение
						НовыйСчФ.Записать(РежимЗаписиДокумента.Запись);  
						РезультатЗаписиСчетФактура = "(записан, необходимо провести вручную)";
					КонецПопытки; 
					ТекстСФ = ", " + НовыйСчФ.Ссылка + РезультатЗаписиСчетФактура;
				Иначе
					ТекстСФ = "";
				КонецЕсли;
				Сообщить("Созданы документы: " + НоваяРеализация.Ссылка + РезультатЗаписиОсновногоДокумента + ТекстСчет + ТекстСФ);
			КонецЕсли;
		КонецЕсли;
		
		Если ДопПараметры.Документ = "УЧ_Реализация" Тогда
			НоваяРеализация = Документы.УЧ_Реализация.СоздатьДокумент();
			Попытка
				НоваяРеализация.Заполнить(ДопПараметры.ДанныеЗаполнения);
				НоваяРеализация.Автор = ПараметрыСеанса.ТекущийПользователь;
				НоваяРеализация.АдресДоставки = ДопПараметры.ДанныеЗаполнения.АдресДоставки; 
				//ЗаполнитьСерииПоФИФОНаСервере(НоваяРеализация,Ложь);
				//НоваяРеализация.ДополнительныеСвойства.Вставить("НеИзменятьСтатусЗаказа", Истина); 
			Исключение 
				Отказ = Истина;
				СтрокаСообщения = ОписаниеОшибки();
				НомерСимвола = СтрНайти(СтрокаСообщения,"}"); 
				Пока НомерСимвола > 0 Цикл
					СтрокаСообщения = Прав(СтрокаСообщения, СтрДлина(СтрокаСообщения) - (НомерСимвола+1)); 
					НомерСимвола = СтрНайти(СтрокаСообщения,"}"); 
				КонецЦикла;;
				Сообщить(СтрокаСообщения);
			КонецПопытки;
			Если НЕ Отказ Тогда 
				Если ЗаполнитьСерии Тогда
					ЗаполнитьСерииПоФИФОНаСервере(НоваяРеализация,Ложь); 
				КонецЕсли;
				Попытка
					НоваяРеализация.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					НоваяРеализация.Записать(РежимЗаписиДокумента.Запись); 
					РезультатЗаписиОсновногоДокумента = "(записан, необходимо провести вручную)";
				КонецПопытки;  
				
				Сообщить("Созданы документы: " + НоваяРеализация.Ссылка + РезультатЗаписиОсновногоДокумента);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьСерииПоФИФОНаСервере(ДокументУУ,ЗаписыватьДокумент = Истина)
	Если ЗаписыватьДокумент Тогда
		ДокОбъект = ДокументУУ.ПолучитьОбъект();
	Иначе
		ДокОбъект = ДокументУУ;
	КонецЕсли;
	Если ТипЗнч(ДокументУУ) = Тип("ДокументСсылка.УЧ_Возврат") 
		ИЛИ ТипЗнч(ДокументУУ) = Тип("ДокументСсылка.УЧ_ВозвратТоваровПоставщику")
		ИЛИ ТипЗнч(ДокументУУ) = Тип("ДокументСсылка.УЧ_ВозвратТоваровПоставщику")
		ИЛИ ТипЗнч(ДокументУУ) = Тип("ДокументСсылка.УЧ_КорректировкаПоступления")
		ИЛИ ТипЗнч(ДокументУУ) = Тип("ДокументОбъект.УЧ_Реализация")
		ИЛИ ТипЗнч(ДокументУУ) = Тип("ДокументСсылка.УЧ_Реализация") Тогда
		ИмяОсновнойТЧ = "Товары";
		ИмяНоменклатуры = "Номенклатура";
	ИначеЕсли  ТипЗнч(ДокументУУ) = Тип("ДокументСсылка.УЧ_ВыпускПродукции") Тогда
		ИмяОсновнойТЧ = "Материалы"; 
		ИмяНоменклатуры = "Материал";
		
	ИначеЕсли  ТипЗнч(ДокументУУ) = Тип("ДокументСсылка.УЧ_ОприходованиеТоваров")
		ИЛИ ТипЗнч(ДокументУУ) = Тип("ДокументСсылка.УЧ_ПеремещениеМатериаловВПроизводство") 
		ИЛИ ТипЗнч(ДокументУУ) = Тип("ДокументСсылка.УЧ_ПеремещениеТоваров") 
		ИЛИ ТипЗнч(ДокументУУ) = Тип("ДокументСсылка.УЧ_ПоступлениеТоваров")  
		ИЛИ ТипЗнч(ДокументУУ) = Тип("ДокументСсылка.УЧ_СписаниеТоваров") Тогда
		ИмяОсновнойТЧ = "ТабличнаяЧасть"; 
		ИмяНоменклатуры = "Номенклатура";
	Иначе
		Возврат;	
	КонецЕсли;
	
	Если ТипЗнч(ДокументУУ) = Тип("ДокументСсылка.УЧ_ОприходованиеТоваров") 
		ИЛИ ТипЗнч(ДокументУУ) = Тип("ДокументСсылка.УЧ_СписаниеТоваров") Тогда
		ИмяНоменклатуры = "Товар";
	КонецЕсли;
	
	СтруктураИмен = УЧ_Сервер.СформироватьСтруктуруИмен(ДокОбъект);
	
	СтруктураСоответствий = УЧ_Сервер.ПоучитьСоответствияСчетовНоменклатуры(ДокОбъект, СтруктураИмен);
	СоответствиеСчета = СтруктураСоответствий.Соответствия;
	СоответствиеУчетаПоПодразделениям = СтруктураСоответствий.СоответствияУчетаПодразделений;
	
	ТаблицаОстатков = УЧ_Сервер.ПолучитьТаблицуОстатков(ДокОбъект, СтруктураИмен, СтруктураСоответствий,,Истина,Истина);
	РезультатОстатки = ТаблицаОстатков.РезультатОстатки;
	
	РезультатОстатки.Свернуть("Номенклатура, Склад, СерияНоменклатуры, Подразделение, Предприятия", "КоличествоОстаток, Сумма"); 
	
	РезультатОстатки.Колонки.Добавить("ДатаПроизводства", Новый ОписаниеТипов("Дата",,,));
	
	Серии = Новый Массив;
	МассивУдаленных = Новый Массив;
	Для каждого ТекСтрока Из РезультатОстатки Цикл
		Если ТекСтрока.КоличествоОстаток > 0 И ЗначениеЗаполнено(ТекСтрока.СерияНоменклатуры) И Серии.Найти(ТекСтрока.СерияНоменклатуры) = Неопределено Тогда
			Серии.Добавить(ТекСтрока.СерияНоменклатуры);
		Иначе
			МассивУдаленных.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекУд Из МассивУдаленных Цикл
		РезультатОстатки.Удалить(ТекУд);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СерииНоменклатуры.Ссылка КАК СерияНоменклатуры,
	|	СерииНоменклатуры.ДатаПроизводства КАК ДатаПроизводства,
	|	СерииНоменклатуры.ГоденДо КАК ГоденДо
	|ИЗ
	|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|ГДЕ
	|	СерииНоменклатуры.Ссылка В(&Серии)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПроизводства
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Серии", Серии);
	
	Результат = Запрос.Выполнить();
	ВыборкаСерии = Результат.Выгрузить();
	
	Для каждого ТекСтрока Из РезультатОстатки Цикл
		НайденныйСтроки = ВыборкаСерии.НайтиСтроки(Новый Структура("СерияНоменклатуры", ТекСтрока.СерияНоменклатуры));
		Для каждого ТекНайд Из НайденныйСтроки Цикл
			ТекСтрока.ДатаПроизводства = ТекНайд.ДатаПроизводства;		
		КонецЦикла;
	КонецЦикла;
	
	РезультатОстатки.Сортировать("ДатаПроизводства");
	
	//Если КомандаИмя = "ЗаполнитьСерииПоФИФО1" Тогда
	//	Объект.СерииНоменклатуры.Очистить();	
	//КонецЕсли;
	
	СерииРезультат = ДокОбъект.СерииНоменклатуры.Выгрузить();
	
	Для каждого ТекСтрока Из ДокОбъект[ИмяОсновнойТЧ] Цикл
		
		//Если КомандаИмя = "ЗаполнитьСерииПоФИФО1" Тогда
		//	ТекСтрока.СерияНоменклатуры = Неопределено;
		//	ТекСтрока.НесколькоСерий = Ложь;	
		//КонецЕсли;
		
		//Если ЗначениеЗаполнено(ТекСтрока.СерияНоменклатуры) ИЛИ ТекСтрока.НесколькоСерий Тогда
		//	Продолжить;		
		//КонецЕсли;
		
		СерииРезультат.Очистить();
		
		НайденныйСтроки = РезультатОстатки.НайтиСтроки(Новый Структура("Номенклатура", ТекСтрока[ИмяНоменклатуры]));
		
		КоличествоНужно = ТекСтрока.Количество;
		Для каждого ТекНайд Из НайденныйСтроки Цикл
			Если Не ТекНайд.КоличествоОстаток ИЛИ ТекНайд.КоличествоОстаток < 0 Тогда
				Продолжить;			
			КонецЕсли;
			Если ТекНайд.КоличествоОстаток >= КоличествоНужно Тогда
				ТекНайд.КоличествоОстаток = ТекНайд.КоличествоОстаток - ТекСтрока.Количество;
				ТекСтрока.СерияНоменклатуры = ТекНайд.СерияНоменклатуры;	
				НоваяСтрока = СерииРезультат.Добавить();
				НоваяСтрока.Номенклатура = ТекСтрока[ИмяНоменклатуры];
				НоваяСтрока.СерияНоменклатуры = ТекНайд.СерияНоменклатуры;
				НоваяСтрока.ИдентификаторСтрокиРеализации = ТекСтрока.НомерСтроки;
				НоваяСтрока.Количество = КоличествоНужно;
				КоличествоНужно = 0;
				Прервать;
			Иначе
				НоваяСтрока = СерииРезультат.Добавить();
				НоваяСтрока.Номенклатура = ТекСтрока[ИмяНоменклатуры];
				НоваяСтрока.СерияНоменклатуры = ТекНайд.СерияНоменклатуры;
				НоваяСтрока.ИдентификаторСтрокиРеализации = ТекСтрока.НомерСтроки;
				НоваяСтрока.Количество = ТекНайд.КоличествоОстаток;
				КоличествоНужно = КоличествоНужно - ТекНайд.КоличествоОстаток;
				ТекНайд.КоличествоОстаток = 0;
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоНужно Тогда
			НоваяСтрока = СерииРезультат.Добавить();
			НоваяСтрока.Номенклатура = ТекСтрока[ИмяНоменклатуры];
			НоваяСтрока.СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
			НоваяСтрока.ИдентификаторСтрокиРеализации = ТекСтрока.НомерСтроки;
			НоваяСтрока.Количество = КоличествоНужно;
		КонецЕсли;
		
		Если СерииРезультат.Количество() Тогда
			
			//ТекСтрока.НесколькоСерий = СерииРезультат.Количество() > 1;
			
			МассивУдСерий = Новый Массив;
			Для каждого ТекСтрокаОб Из ДокОбъект.СерииНоменклатуры Цикл
				Если ТекСтрокаОб.Номенклатура = ТекСтрока[ИмяНоменклатуры] И ТекСтрокаОб.НомерСтрокиРеализации = ТекСтрока.НомерСтроки Тогда
					МассивУдСерий.Добавить(ТекСтрокаОб);
				КонецЕсли;
			КонецЦикла;
			
			Для каждого ТекУд Из МассивУдСерий Цикл
				ДокОбъект.СерииНоменклатуры.Удалить(ТекУд);
			КонецЦикла;
			
			НовоеКоличество = 0;
			Для каждого ТекСтрокаОб Из СерииРезультат Цикл
				НоваяСтрока = ДокОбъект.СерииНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаОб);
				НоваяСтрока.НомерСтрокиРеализации = ТекСтрока.НомерСтроки;
				НовоеКоличество = НовоеКоличество + ТекСтрокаОб.Количество; 
				НоваяСтрока.ДатаПроизводства = сабОбщегоНазначенияБУХ.ПолучитьДатуПроизводстваДляСерииНоменклатуры(ТекСтрокаОб.СерияНоменклатуры);
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	ДокОбъект.СерииНоменклатуры.Сортировать("НомерСтрокиРеализации"); 
	Если ЗаписыватьДокумент Тогда
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись); 
		КонецПопытки;
	КонецЕсли;
	
	
КонецПроцедуры  

&НаСервере
Функция ПолучитьЗначениеСерийногоУчета()

	Возврат Справочники.СерииНоменклатуры.СерииНоменклатурыИспользуются();

КонецФункции

&НаСервере
Процедура СинхронизацияСерийПриЗаписиНаСервереФормы(ДокументБУ,ДокументУУ)
	
	//Если ПараметрыЗаписи.Свойство("СинхронизироватьСерииНоменклатурыСДокументомБух") Тогда
	//	Если Не Отказ И ПараметрыЗаписи.СинхронизироватьСерииНоменклатурыСДокументомБух	Тогда
	УстановитьПривилегированныйРежим(Истина);
	ЗаписываемДокумент = Ложь;
	ДокументБУОбъект = ДокументБУ.ПолучитьОбъект();
	Если ОбщегоНазначенияБП.ЕстьТабЧастьДокумента("СерииНоменклатуры",ДокументБУОбъект.Метаданные())Тогда 
		МассивУдаляемыхСтрок = Новый Массив;
		Для Каждого СтрокаСерииТЧ Из ДокументБУОбъект.СерииНоменклатуры Цикл
			СтруктураПоиска = Новый Структура("Номенклатура,НомерСтрокиРеализации",СтрокаСерииТЧ.Номенклатура,СтрокаСерииТЧ.НомерСтрокиРеализации);
			МассивНайденныхСтрок = ДокументУУ.СерииНоменклатуры.НайтиСтроки(СтруктураПоиска); 
			Если МассивНайденныхСтрок.Количество() > 0 Тогда
				МассивУдаляемыхСтрок.Добавить(СтрокаСерииТЧ);
			КонецЕсли;
		КонецЦикла;	 
		Для Каждого СтрокаМассива Из МассивУдаляемыхСтрок Цикл
			ДокументБУОбъект.СерииНоменклатуры.Удалить(СтрокаМассива);
		КонецЦикла;
		Для Каждого СтрокаТЧСерииУпр Из ДокументУУ.СерииНоменклатуры Цикл
			НоваяСтрокаТЧСерииБух = ДокументБУОбъект.СерииНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧСерииБух,СтрокаТЧСерииУпр);
		КонецЦикла;
		
		ДокументБУОбъект.СерииНоменклатуры.Сортировать("НомерСтрокиРеализации");
		Если ОбщегоНазначенияБП.ЕстьТабЧастьДокумента("Материалы",ДокументБУОбъект.Метаданные()) И
			Не ОбщегоНазначенияБП.ЕстьТабЧастьДокумента("Товары",ДокументБУОбъект.Метаданные()) Тогда
			Если ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("СерияНоменклатуры",ДокументБУОбъект.Метаданные(),"Материалы") Тогда
				Для Каждого СтрокаТЧТоварыБух Из ДокументБУОбъект.Материалы Цикл
					СтруктураПоискаДляТоваров = Новый Структура("Номенклатура,НомерСтрокиРеализации",СтрокаТЧТоварыБух.Номенклатура,СтрокаТЧТоварыБух.НомерСтроки);
					МассивНайденныхСтрокДляЗаполненияТоваров = ДокументБУОбъект.СерииНоменклатуры.НайтиСтроки(СтруктураПоискаДляТоваров);
					Если МассивНайденныхСтрокДляЗаполненияТоваров.Количество() = 1 Тогда
						СтрокаТЧТоварыБух.СерияНоменклатуры = МассивНайденныхСтрокДляЗаполненияТоваров[0].СерияНоменклатуры;
					ИначеЕсли 
						МассивНайденныхСтрокДляЗаполненияТоваров.Количество() > 1 Тогда
						СтрокаТЧТоварыБух.СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли ОбщегоНазначенияБП.ЕстьТабЧастьДокумента("Товары",ДокументБУОбъект.Метаданные()) Тогда
			Если ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("СерияНоменклатуры",ДокументБУОбъект.Метаданные(),"Товары") Тогда 
				Для Каждого СтрокаТЧТоварыБух Из ДокументБУОбъект.Товары Цикл
					СтруктураПоискаДляТоваров = Новый Структура("Номенклатура,НомерСтрокиРеализации",СтрокаТЧТоварыБух.Номенклатура,СтрокаТЧТоварыБух.НомерСтроки);
					МассивНайденныхСтрокДляЗаполненияТоваров = ДокументБУОбъект.СерииНоменклатуры.НайтиСтроки(СтруктураПоискаДляТоваров);
					Если МассивНайденныхСтрокДляЗаполненияТоваров.Количество() = 1 Тогда
						СтрокаТЧТоварыБух.СерияНоменклатуры = МассивНайденныхСтрокДляЗаполненияТоваров[0].СерияНоменклатуры;
					ИначеЕсли 
						МассивНайденныхСтрокДляЗаполненияТоваров.Количество() > 1 Тогда
						СтрокаТЧТоварыБух.СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		ДокументБУОбъект.ДополнительныеСвойства.Вставить("НеДобавлятьЗаписьВРегистрИзмененных",Истина);
		Попытка
			ДокументБУОбъект.ОбменДанными.Загрузка = Истина;
			ДокументБУОбъект.ДополнительныеСвойства.Вставить("ПропуститьБизнесЛогикуПриЗаписи", Истина);
			ДокументБУОбъект.Записать();  
		Исключение
		КонецПопытки;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	//
КонецПроцедуры   


