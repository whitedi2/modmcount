Перем ДвиженияПоНачислениям;

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	//Движения по регистру кадрового состояния сотрудников
	Если ВидОперации = Перечисления.ВидыОперацийДвиженияКадров.ПриемНаРаботу Тогда
		ПроводкиКадрыУпр = Движения.КадровоеСостояниеСотрудниковУпр;
		ПроводкиКадрыУпр.Записывать = Истина;
		Для Каждого СтрокаУпр Из УчетныеДанные Цикл
			ПроводкаКадрыУпр					= ПроводкиКадрыУпр.Добавить();
			ЗаполнитьЗначенияСвойств(ПроводкаКадрыУпр, СтрокаУпр);
			ПроводкаКадрыУпр.Сотрудник 					= Сотрудник;
			ПроводкаКадрыУпр.Предприятие 				= Предприятие;
			ПроводкаКадрыУпр.Период 					= ?(СтрокаУпр.Дата = Дата('00010101'), Дата, СтрокаУпр.Дата);
			ПроводкаКадрыУпр.ДатаПриема 				= СтрокаУпр.Дата;
			ПроводкаКадрыУпр.Работает 					= Истина;  
		КонецЦикла;
		ПроводкиКадрыРегл = Движения.КадровоеСостояниеСотрудниковРегл;
		ПроводкиКадрыРегл.Записывать = Истина;
		Для Каждого СтрокаРегл Из РегламентированныеДанные Цикл
			ПроводкаКадрыРегл = ПроводкиКадрыРегл.Добавить();
			ЗаполнитьЗначенияСвойств(ПроводкаКадрыРегл, СтрокаРегл);
			ПроводкаКадрыРегл.Сотрудник 				= Сотрудник;
			ПроводкаКадрыРегл.Период 					= ?(СтрокаРегл.Дата = Дата('00010101'), Дата, СтрокаРегл.Дата);
			ПроводкаКадрыРегл.Работает 					= Истина;  
			ПроводкаКадрыРегл.ДатаПриема 				= СтрокаРегл.Дата;  
		КонецЦикла;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийДвиженияКадров.Перемещение ИЛИ ВидОперации = Перечисления.ВидыОперацийДвиженияКадров.ИзменениеШтатногоРасписания Тогда
		//Обозначим что сотрудник уволился
		ПроводкиКадрыУпр = Движения.КадровоеСостояниеСотрудниковУпр;
		ПроводкиКадрыУпр.Записывать = Истина;
		Для Каждого СтрокаУпрПрежнее Из УчетныеДанныеПрежние Цикл
			ТекДата = КонецДня(?(СтрокаУпрПрежнее.Дата = Дата('00010101'), НачалоДня(Дата) - 1, СтрокаУпрПрежнее.Дата));
			ПроводкаКадрыУпр							= ПроводкиКадрыУпр.Добавить();
			ЗаполнитьЗначенияСвойств(ПроводкаКадрыУпр, СтрокаУпрПрежнее);
			ПроводкаКадрыУпр.Сотрудник 					= Сотрудник;
			ПроводкаКадрыУпр.Предприятие 				= Предприятие;
			ПроводкаКадрыУпр.Период 					= ТекДата;
			ПроводкаКадрыУпр.ДатаУвольнения 			= СтрокаУпрПрежнее.Дата;
			ПроводкаКадрыУпр.Работает 					= Ложь;  
		КонецЦикла;
		ПроводкиКадрыРегл = Движения.КадровоеСостояниеСотрудниковРегл;
		ПроводкиКадрыРегл.Записывать = Истина;
		Для Каждого СтрокаРеглПрежнее Из РегламентированныеДанныеПрежние Цикл
			ТекДата = КонецДня(?(СтрокаРеглПрежнее.Дата = Дата('00010101'), НачалоДня(Дата) - 1, СтрокаРеглПрежнее.Дата));
			ПроводкаКадрыРегл = ПроводкиКадрыРегл.Добавить();
			ЗаполнитьЗначенияСвойств(ПроводкаКадрыРегл, СтрокаРеглПрежнее);
			ПроводкаКадрыРегл.Сотрудник 				= Сотрудник;
			ПроводкаКадрыРегл.Период 					= ТекДата;
			ПроводкаКадрыРегл.Работает 					= Ложь;  
			ПроводкаКадрыРегл.ДатаПриема 				= СтрокаРеглПрежнее.Дата;
		КонецЦикла;
		//Обозначим новое место работы сотрудника
		Для Каждого СтрокаУпр Из УчетныеДанные Цикл
			ПроводкаКадрыУпр					= ПроводкиКадрыУпр.Добавить();
			ЗаполнитьЗначенияСвойств(ПроводкаКадрыУпр, СтрокаУпр);
			ПроводкаКадрыУпр.Сотрудник 					= Сотрудник;
			ПроводкаКадрыУпр.Предприятие 				= Предприятие;
			ПроводкаКадрыУпр.Период 					= ?(СтрокаУпр.Дата = Дата('00010101'), Дата, СтрокаУпр.Дата);
			ПроводкаКадрыУпр.ДатаПриема 				= СтрокаУпр.Дата;
			ПроводкаКадрыУпр.Работает 					= Истина;  
		КонецЦикла;
		Для Каждого СтрокаРегл Из РегламентированныеДанные Цикл
			ПроводкаКадрыРегл = ПроводкиКадрыРегл.Добавить();
			ЗаполнитьЗначенияСвойств(ПроводкаКадрыРегл, СтрокаРегл);
			ПроводкаКадрыРегл.Сотрудник 				= Сотрудник;
			ПроводкаКадрыРегл.Период 					= ?(СтрокаРегл.Дата = Дата('00010101'), Дата, СтрокаРегл.Дата);
			ПроводкаКадрыРегл.Работает 					= Истина;  
			ПроводкаКадрыРегл.ДатаПриема 				= СтрокаРегл.Дата;
		КонецЦикла;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийДвиженияКадров.Увольнение Тогда
		ПроводкиКадрыУпр = Движения.КадровоеСостояниеСотрудниковУпр;
		ПроводкиКадрыУпр.Записывать = Истина;
		Для Каждого СтрокаУпрПрежнее Из УчетныеДанныеПрежние Цикл
			ПроводкаКадрыУпр							= ПроводкиКадрыУпр.Добавить();
			ЗаполнитьЗначенияСвойств(ПроводкаКадрыУпр, СтрокаУпрПрежнее);
			ПроводкаКадрыУпр.Сотрудник 					= Сотрудник;
			ПроводкаКадрыУпр.Предприятие 				= Предприятие;
			ПроводкаКадрыУпр.Период 					= ?(СтрокаУпрПрежнее.Дата = Дата('00010101'), Дата, СтрокаУпрПрежнее.Дата);
			ПроводкаКадрыУпр.ДатаУвольнения 			= СтрокаУпрПрежнее.Дата;
			ПроводкаКадрыУпр.Работает 					= Ложь;  
		КонецЦикла;
		ПроводкиКадрыРегл = Движения.КадровоеСостояниеСотрудниковРегл;
		ПроводкиКадрыРегл.Записывать = Истина;
		Для Каждого СтрокаРеглПрежнее Из РегламентированныеДанныеПрежние Цикл
			ПроводкаКадрыРегл = ПроводкиКадрыРегл.Добавить();
			ЗаполнитьЗначенияСвойств(ПроводкаКадрыРегл, СтрокаРеглПрежнее);
			ПроводкаКадрыРегл.Сотрудник 				= Сотрудник;
			ПроводкаКадрыРегл.Период 					= ?(СтрокаРеглПрежнее.Дата = Дата('00010101'), Дата, СтрокаРеглПрежнее.Дата);
			ПроводкаКадрыРегл.Работает 					= Ложь;  
			ПроводкаКадрыРегл.ДатаУвольнения 			= СтрокаРеглПрежнее.Дата;  
		КонецЦикла;
	КонецЕсли;	
	
	//Движения по регистру НачисленияСотрудникам
	ДвиженияПоНачислениям = Движения.НачисленияСотрудникам;
	ДвиженияПоНачислениям.Записывать = Истина;
	
	Если ВидОперации = Перечисления.ВидыОперацийДвиженияКадров.Перемещение ИЛИ ВидОперации = Перечисления.ВидыОперацийДвиженияКадров.ИзменениеШтатногоРасписания Тогда
		//сначала спишем
		Для Каждого СтрокаУпрПрежнее Из УчетныеДанныеПрежние Цикл
			ДобавитьДвиженияПоНачислениям(СтрокаУпрПрежнее.Дата, СтрокаУпрПрежнее.РазмерЗП, ВидДвиженияНакопления.Расход);
		КонецЦикла;	
		Для Каждого СтрокаРеглПрежнее Из РегламентированныеДанныеПрежние Цикл
			ДобавитьДвиженияПоНачислениям(СтрокаРеглПрежнее.Дата, СтрокаРеглПрежнее.РазмерЗП * 0.87, ВидДвиженияНакопления.Расход);
		КонецЦикла;	
		//теперь добавим по приему
		Для Каждого СтрокаУпр Из УчетныеДанные Цикл
			ДобавитьДвиженияПоНачислениям(СтрокаУпр.Дата, СтрокаУпр.РазмерЗП, ВидДвиженияНакопления.Приход);
		КонецЦикла;	
		Для Каждого СтрокаРегл Из РегламентированныеДанные Цикл
			ДобавитьДвиженияПоНачислениям(СтрокаРегл.Дата, СтрокаРегл.РазмерЗП * 0.87, ВидДвиженияНакопления.Приход);
		КонецЦикла;	
	Иначе	
		//Если РегламентированныйУчет И Не УправленческийУчет Тогда
		//	ПериодЗаписи = ДатаРегл;
		//ИначеЕсли УправленческийУчет И Не РегламентированныйУчет Тогда
		//	ПериодЗаписи = Период;
		//ИначеЕсли УправленческийУчет И РегламентированныйУчет Тогда
		//	Если ЗначениеЗаполнено(Период) И Не ЗначениеЗаполнено(ДатаРегл) Тогда
		//		ПериодЗаписи = Период;
		//	ИначеЕсли НЕ ЗначениеЗаполнено(Период) И ЗначениеЗаполнено(ДатаРегл) Тогда
		//		ПериодЗаписи = ДатаРегл;
		//	ИначеЕсли ЗначениеЗаполнено(Период) И ЗначениеЗаполнено(ДатаРегл) Тогда
		//		ПериодЗаписи = ?(ДатаРегл > Период, ДатаРегл, Период);
		//	КонецЕсли;
		//КонецЕсли;
		ПериодЗаписи = Дата;
		
		Если Не ОбщийРазмерЗП = 0 Тогда
			ДобавитьДвиженияПоНачислениям(ПериодЗаписи, ОбщийРазмерЗП, ВидДвиженияНакопления.Приход);
		КонецЕсли;
		
		СуммаРасхода = УчетныеДанныеПрежние.Итог("РазмерЗП") + РегламентированныеДанныеПрежние.Итог("РазмерЗП") * 0.87;
		Если Не СуммаРасхода = 0 Тогда
			ДобавитьДвиженияПоНачислениям(ПериодЗаписи, СуммаРасхода, ВидДвиженияНакопления.Расход);
		КонецЕсли;
	КонецЕсли;	
		
	//Если ЗначениеЗаполнено(Сотрудник.Пользователь) Тогда
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	КадровыеДвиженияУчетныеДанные.Предприятие,
	//	|	СУММА(КадровыеДвиженияУчетныеДанные.НомерСтроки) КАК НомерСтроки,
	//	|	КадровыеДвиженияУчетныеДанные.Должность.ДолжностнаяРоль КАК Должность
	//	|ИЗ
	//	|	Документ.КадровыеДвижения.УчетныеДанные КАК КадровыеДвиженияУчетныеДанные
	//	|ГДЕ
	//	|	КадровыеДвиженияУчетныеДанные.Ссылка = &Ссылка
	//	|	И НЕ КадровыеДвиженияУчетныеДанные.Должность.ДолжностнаяРоль = ЗНАЧЕНИЕ(Перечисление.ОсновныеДолжностиПредприятия.ПустаяСсылка)
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	КадровыеДвиженияУчетныеДанные.Предприятие,
	//	|	КадровыеДвиженияУчетныеДанные.Должность.ДолжностнаяРоль";
	//	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	//	Выборка = Запрос.Выполнить().Выбрать();
	//	НаборЗаписейОснДолжностей = РегистрыСведений.ОсновныеДолжностиПредприятия.СоздатьНаборЗаписей();
	//	Пока Выборка.Следующий() Цикл
	//		НаборЗаписейОснДолжностей.Отбор.Предприятие.Установить(СтрокаУпр.Предприятие);
	//		НаборЗаписейОснДолжностей.Отбор.Должность.Установить(СтрокаУпр.Должность.ДолжностнаяРоль);
	//		НаборЗаписейОснДолжностей.Прочитать();
	//		НаборЗаписейОснДолжностей.Очистить();
	//		ЗаписьОснДолжностей = НаборЗаписейОснДолжностей.Добавить();
	//		ЗаписьОснДолжностей.Предприятие = СтрокаУпр.Предприятие;
	//		ЗаписьОснДолжностей.Должность 	= СтрокаУпр.Должность.ДолжностнаяРоль;
	//		ЗаписьОснДолжностей.Сотрудник 	= Сотрудник.Пользователь;
	//		ЗаписьОснДолжностей.Документ 	= Ссылка;
	//		НаборЗаписейОснДолжностей.Записать();
	//	КонецЦикла;	
	//	
	//	ЗапросУволенные = Новый Запрос;
	//	ЗапросУволенные.Текст = 
	//	"ВЫБРАТЬ
	//	|	КадровыеДвиженияУчетныеДанныеПрежние.Предприятие,
	//	|	КадровыеДвиженияУчетныеДанныеПрежние.Должность.ДолжностнаяРоль КАК Должность,
	//	|	КадровыеДвиженияУчетныеДанныеПрежние.Ссылка.Сотрудник.Пользователь КАК Пользователь,
	//	|	СУММА(КадровыеДвиженияУчетныеДанныеПрежние.НомерСтроки) КАК НомерСтроки
	//	|ПОМЕСТИТЬ ВТ_ТаблицаУвольнения
	//	|ИЗ
	//	|	Документ.КадровыеДвижения.УчетныеДанныеПрежние КАК КадровыеДвиженияУчетныеДанныеПрежние
	//	|ГДЕ
	//	|	КадровыеДвиженияУчетныеДанныеПрежние.Ссылка = &Ссылка
	//	|	И НЕ КадровыеДвиженияУчетныеДанныеПрежние.Должность.ДолжностнаяРоль = ЗНАЧЕНИЕ(Перечисление.ОсновныеДолжностиПредприятия.ПустаяСсылка)
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	КадровыеДвиженияУчетныеДанныеПрежние.Ссылка.Сотрудник.Пользователь,
	//	|	КадровыеДвиженияУчетныеДанныеПрежние.Предприятие,
	//	|	КадровыеДвиженияУчетныеДанныеПрежние.Должность.ДолжностнаяРоль
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ОсновныеДолжностиПредприятия.Сотрудник,
	//	|	ОсновныеДолжностиПредприятия.Предприятие,
	//	|	ОсновныеДолжностиПредприятия.Должность
	//	|ИЗ
	//	|	ВТ_ТаблицаУвольнения КАК ВТ_ТаблицаУвольнения
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДолжностиПредприятия КАК ОсновныеДолжностиПредприятия
	//	|		ПО ВТ_ТаблицаУвольнения.Предприятие = ОсновныеДолжностиПредприятия.Предприятие
	//	|			И ВТ_ТаблицаУвольнения.Должность = ОсновныеДолжностиПредприятия.Должность
	//	|			И ВТ_ТаблицаУвольнения.Пользователь = ОсновныеДолжностиПредприятия.Сотрудник
	//	|ГДЕ
	//	|	НЕ ОсновныеДолжностиПредприятия.Сотрудник ЕСТЬ NULL ";
	//	ЗапросУволенные.УстановитьПараметр("Ссылка", Ссылка);
	//	РезультатЗапроса = ЗапросУволенные.Выполнить();
	//	Если Не РезультатЗапроса.Пустой() Тогда
	//		ВыборкаУволенные = РезультатЗапроса.Выбрать();
	//		Пока ВыборкаУволенные.Следующий() Цикл
	//			НаборЗаписейОснДолжностей.Отбор.Период.Установить(Период);
	//			НаборЗаписейОснДолжностей.Отбор.Предприятие.Установить(ВыборкаУволенные.Предприятие);
	//			НаборЗаписейОснДолжностей.Отбор.Должность.Установить(ВыборкаУволенные.Должность);
	//			НаборЗаписейОснДолжностей.Прочитать();
	//			НаборЗаписейОснДолжностей.Очистить();
	//			ЗаписьОснДолжностей = НаборЗаписейОснДолжностей.Добавить();
	//			ЗаписьОснДолжностей.Период 		= Период;
	//			ЗаписьОснДолжностей.Предприятие = ВыборкаУволенные.Предприятие;
	//			ЗаписьОснДолжностей.Должность 	= ВыборкаУволенные.Должность;
	//			ЗаписьОснДолжностей.Сотрудник 	= Справочники.Пользователи.ПустаяСсылка();
	//			ЗаписьОснДолжностей.Документ 	= Ссылка;
	//			НаборЗаписейОснДолжностей.Записать();
	//		КонецЦикла;	
	//	КонецЕсли;	
	//КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьДвиженияПоНачислениям(Период, РазмерЗП, ВидДвижения)
	
	ДвижениеПоНачислениям = ДвиженияПоНачислениям.Добавить();
	ДвижениеПоНачислениям.Период = Период;
	ДвижениеПоНачислениям.Регистратор = Ссылка;
	ДвижениеПоНачислениям.Сотрудник = Сотрудник;
	ДвижениеПоНачислениям.ОбщийРазмерЗП = РазмерЗП;
	ДвижениеПоНачислениям.ВидДвижения = ВидДвижения;
	
КонецПроцедуры	

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	//Если Не ВидОперации = Перечисления.ВидыОперацийДвиженияКадров.Перемещение Тогда
	//	Если УправленческийУчет И Не ЗначениеЗаполнено(Период) Тогда
	//		сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(
	//		ЭтотОбъект,
	//		"Не указана дата упр. учета",
	//		,
	//		,
	//		"Период",
	//		Отказ);
	//	КонецЕсли;	
	//	Если РегламентированныйУчет И Не ЗначениеЗаполнено(ДатаРегл) Тогда
	//		сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(
	//		ЭтотОбъект,
	//		"Не указана дата регл. учета",
	//		,
	//		,
	//		"ДатаРегл",
	//		Отказ);
	//	КонецЕсли;
	//КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийДвиженияКадров.ПриемНаРаботу Тогда
		//Если УчетныеДанные.Количество() = 0 И РегламентированныеДанные.Количество() = 0 Тогда 
		//	сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(
		//	ЭтотОбъект,
		//	"Для проведения документа необходимо заполнение хотябы 1-й строки данных учета",
		//	,
		//	,
		//	"ДатаРегл",
		//	Отказ);
		//КонецЕсли;	
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийДвиженияКадров.Увольнение Тогда
		//Если УчетныеДанныеПрежние.Количество() = 0 И РегламентированныеДанныеПрежние.Количество() = 0 Тогда 
		//	Сообщить("Для проведения документа необходимо заполнение хотябы 1-й строки данных учета");
		//	Отказ = Истина;
		//КонецЕсли;	
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийДвиженияКадров.Перемещение ИЛИ ВидОперации = Перечисления.ВидыОперацийДвиженияКадров.ИзменениеШтатногоРасписания Тогда
		//Если (УчетныеДанные.Количество() = 0 И РегламентированныеДанные.Количество() = 0) Или (УчетныеДанныеПрежние.Количество() = 0 И РегламентированныеДанныеПрежние.Количество() = 0) Тогда 
		//	Сообщить("Для проведения документа необходимо заполнение хотябы 1-й строки данных учета");
		//	Отказ = Истина;
		//КонецЕсли;
		Если УправленческийУчет Тогда 
			Для Каждого Строка Из УчетныеДанные Цикл
				Если Не ЗначениеЗаполнено(Строка.Дата) Тогда
					сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(
					ЭтотОбъект,
					"Не указана дата перевода(уч.)",
					"УчетныеДанные",
					Строка.НомерСтроки,
					"Дата",
					Отказ);
				КонецЕсли;
			КонецЦикла;	
			Для Каждого Строка Из УчетныеДанныеПрежние Цикл
				Если Не ЗначениеЗаполнено(Строка.Дата) Тогда
					сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(
					ЭтотОбъект,
					"Не указана дата перевода(уч.)",
					"УчетныеДанныеПрежние",
					Строка.НомерСтроки,
					"Дата",
					Отказ);
				КонецЕсли;
			КонецЦикла;	
		ИначеЕсли РегламентированныйУчет Тогда
			Для Каждого Строка Из РегламентированныеДанные Цикл
				Если Не ЗначениеЗаполнено(Строка.Дата) Тогда
					сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(
					ЭтотОбъект,
					"Не указана дата перевода(регл.)",
					"РегламентированныеДанные",
					Строка.НомерСтроки,
					"Дата",
					Отказ);
				КонецЕсли;
			КонецЦикла;	
			Для Каждого Строка Из РегламентированныеДанныеПрежние Цикл
				Если Не ЗначениеЗаполнено(Строка.Дата) Тогда
					сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(
					ЭтотОбъект,
					"Не указана дата перевода(регл.)",
					"РегламентированныеДанныеПрежние",
					Строка.НомерСтроки,
					"Дата",
					Отказ);
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ОсновныеДолжностиПредприятия.Предприятие,
	//|	ОсновныеДолжностиПредприятия.Должность
	//|ИЗ
	//|	РегистрСведений.ОсновныеДолжностиПредприятия КАК ОсновныеДолжностиПредприятия
	//|ГДЕ
	//|	ОсновныеДолжностиПредприятия.Документ = &Документ";
	//Запрос.УстановитьПараметр("Документ", Ссылка);
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	Запись = РегистрыСведений.ОсновныеДолжностиПредприятия.СоздатьМенеджерЗаписи();	
	//	Запись.Предприятие 	= Выборка.Предприятие;
	//	Запись.Должность 	= Выборка.Должность;
	//	Запись.Прочитать();
	//	Если Запись.Выбран() Тогда
	//		Запись.Удалить();	      	
	//	КонецЕсли;	
	//	Прервать;
	//КонецЦикла;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ОбщийРазмерЗП = 0;
	УчетныеДанные.Очистить();
	УчетныеДанныеПрежние.Очистить();
	РегламентированныеДанные.Очистить();
	РегламентированныеДанныеПрежние.Очистить();
	ДокументОснование = Документы.Д_СлужебнаяЗаписка.ПустаяСсылка();
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	//{{__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Д_ЗаявкаНаКадровоеДвижение") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		Номер = "";
		Дата = ТекущаяДата();
		ВидОперации = ДанныеЗаполнения.ВидКадровогоДвижения;
		ДокОснование = ДанныеЗаполнения.Ссылка;
		
		Если ДанныеЗаполнения.УправленческийУчет И НЕ ДанныеЗаполнения.ВидКадровогоДвижения = Перечисления.ВидыОперацийДвиженияКадров.Увольнение Тогда
			СтрокаУпр 					= УчетныеДанные.Добавить();
			СтрокаУпр.Предприятие 		= ДанныеЗаполнения.ПредприятиеУпр;
			СтрокаУпр.Подразделение 	= ДанныеЗаполнения.ПодразделениеУпр;
			СтрокаУпр.Должность 		= ДанныеЗаполнения.ДолжностьУпр;
			СтрокаУпр.РазмерЗП 			= ДанныеЗаполнения.РазмерУчетнойЗП;
			СтрокаУпр.СтруктурнаяЕдиница = ДанныеЗаполнения.СтруктурнаяЕдиница;
			СтрокаУпр.Дата				 = ДанныеЗаполнения.Период;
		КонецЕсли;
		
		Если ДанныеЗаполнения.РегламентированныйУчет И НЕ ДанныеЗаполнения.ВидКадровогоДвижения = Перечисления.ВидыОперацийДвиженияКадров.Увольнение Тогда
			СтрокаРегл 					= РегламентированныеДанные.Добавить();
			СтрокаРегл.ЮрЛицо 			= ДанныеЗаполнения.ЮрЛицо;
			СтрокаРегл.Подразделение	= ДанныеЗаполнения.ПодразделениеЮрЛица;
			СтрокаРегл.Должность 		= ДанныеЗаполнения.ДолжностьРегл;
			СтрокаРегл.РазмерЗП 		= ДанныеЗаполнения.РазмерОфициальнойЗП;
			СтрокаРегл.Дата 			= ДанныеЗаполнения.ДатаРегл;
		КонецЕсли;
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.УчетныеДанныеПрежние Цикл
			НоваяСтрока = УчетныеДанныеПрежние.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);		
		КонецЦикла; 
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.РегламентированныеДанныеПрежние Цикл
			НоваяСтрока = РегламентированныеДанныеПрежние.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);		
		КонецЦикла; 

		
	КонецЕсли;
	//}}__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ОбщийРазмерЗП = РегламентированныеДанные.Итог("РазмерЗП") * 0.87 + УчетныеДанные.Итог("РазмерЗП");
	
	//из подписки на событие
	БюджетныйНаСервере.ДокументыПередЗаписьюПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	БюджетныйНаСервере.ПриУстановкеНовогоНомераПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
КонецПроцедуры
