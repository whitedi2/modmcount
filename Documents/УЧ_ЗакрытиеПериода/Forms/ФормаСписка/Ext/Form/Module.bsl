&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Элементы.ДокументыСОшибкамиПроведения.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(ИнтервалЗакрытия) Тогда
		ИнтервалЗакрытия = "Месяц";	
	КонецЕсли;
	МесяцНачисления = НачалоМесяца(ТекущаяДата()) - 1;
	
	Если ИнтервалЗакрытия = "Месяц" Тогда
		МесяцНачисления = НачалоМесяца(МесяцНачисления);
	ИначеЕсли ИнтервалЗакрытия = "Квартал" Тогда	
		МесяцНачисления = НачалоКвартала(МесяцНачисления);
	ИначеЕсли ИнтервалЗакрытия = "Год" Или ИнтервалЗакрытия = "Год" Тогда	
		МесяцНачисления = НачалоГода(МесяцНачисления);
	КонецЕсли;
	
	ЗаполнитьМесяцПоДате(ЭтаФорма, "МесяцНачисления", "МесяцНачисленияСтрокой");
	
	//ДобавитьЭлементыНаФорму(); 
	
	Если Не ЗначениеЗаполнено(ВариантРаспределенияЗатрат) Тогда
		ВариантРаспределенияЗатрат = ПредопределенноеЗначение("Перечисление.сабВариантыРаспределенияЗатратЗакрытия.ПоКоличествуПроизводства");	
	КонецЕсли;
	
	Предприятия.Очистить();
	Предприятия.Добавить(Предприятие);
	
	ПерепроводитьДокументыТовародвиженийПриИзменении(Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементыНаФорму()
	
	СоздатьЭлементГруппу(Элементы.Проверки, "Месяцы");
	СоздатьЭлементыГруппы("Месяцы", "Месяц");
	
	СоздатьЭлементГруппу(Элементы.Проверки, "Проверки закрытия");
	СоздатьЭлементыГруппы("Проверки закрытия", "Есть документ Закрытия периода");
	СоздатьЭлементыГруппы("Проверки закрытия", "Все документы БУ обработаны");
	СоздатьЭлементыГруппы("Проверки закрытия", "Счета 25,26,44 закрыты");
	СоздатьЭлементыГруппы("Проверки закрытия", "Счета 20,40 закрыты");
	СоздатьЭлементыГруппы("Проверки закрытия", "Счета 90,91 закрыты");
	СоздатьЭлементыГруппы("Проверки закрытия", "Нет отрицательных колич. остатков");
	СоздатьЭлементыГруппы("Проверки закрытия", "Нет суммовых остатков без количества");
	СоздатьЭлементыГруппы("Проверки закрытия", "Остатки по 51 счету соотв. БУ");
	
	ЗаполнитьДанные();
	
КонецПроцедуры

&НаСервере
Процедура РасчитатьЗаголовки()
	
	//МассивИсклТипов = МассивИсклТипов();
	
	Схема = Элементы.Список.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	
	Настройки = Элементы.Список.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		
	КоличествоДокументов = Результат.Количество();
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьДанные()
	
	Если ИнтервалЗакрытия = "Месяц" Тогда
		НачалоПериода = НачалоМесяца(МесяцНачисления);
		КонецПериода = КонецМесяца(МесяцНачисления);
	ИначеЕсли ИнтервалЗакрытия = "Квартал" Тогда	
		НачалоПериода = НачалоКвартала(МесяцНачисления);
		КонецПериода = КонецКвартала(МесяцНачисления);
	ИначеЕсли ИнтервалЗакрытия = "Год" Или ИнтервалЗакрытия = "Год" Тогда	
		НачалоПериода = НачалоГода(МесяцНачисления);
		КонецПериода = КонецГода(МесяцНачисления);
	КонецЕсли;
	
	Список.Отбор.Элементы.Очистить();
	ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = НачалоПериода;
	ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = КонецПериода;
	
	РасчитатьЗаголовки();
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("НачалоПериода", НачалоПериода);
	ПараметрыЗапроса.Вставить("КонецПериода", КонецПериода);
	
	ОстаткиПоСчетам = ВернутьОстатки(ПараметрыЗапроса);
	ОстаткиПоСчетам51 = ВернутьОстатки51(ПараметрыЗапроса);
	
	ЗаполнитьЕстьДокумент("Есть документ Закрытия периода", ПараметрыЗапроса);
	ЗаполнитьНеобработанные("Все документы БУ обработаны", ПараметрыЗапроса);
	
	ПараметрыЗапроса.Вставить("ОстаткиПоСчетам", ОстаткиПоСчетам);
	
	ЗаполнитьОстатки25("Счета 25,26,44 закрыты", ПараметрыЗапроса);
	ЗаполнитьОстатки20("Счета 20,40 закрыты", ПараметрыЗапроса);
	ЗаполнитьОстатки90("Счета 90,91 закрыты", ПараметрыЗапроса);
	
	ПараметрыЗапроса.Вставить("ОстаткиПоСчетам51", ОстаткиПоСчетам51);
	ЗаполнитьОстатки51("Остатки по 51 счету соотв. БУ", ПараметрыЗапроса);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЕстьДокумент(ИмяЭлемента, ПараметрыЗапроса)
	
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, " ", "");
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, ".", "");
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, ",", "");
	
	Если Не Предприятия.Количество() Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УЧ_ЗакрытиеПериода.Ссылка КАК Ссылка,
	               |	НАЧАЛОПЕРИОДА(УЧ_ЗакрытиеПериода.Дата, МЕСЯЦ) КАК Период,
	               |	УЧ_ЗакрытиеПериода.Предприятие КАК Предприятие,
	               |	УЧ_ЗакрытиеПериода.ЗаблокироватьИзмененияДокументов КАК ЗаблокироватьИзмененияДокументов,
	               |	УЧ_ЗакрытиеПериода.РаспределятьПрямыеЗатраты КАК РаспределятьПрямыеЗатраты,
	               |	УЧ_ЗакрытиеПериода.РаспределятьКосвенныеЗатраты КАК РаспределятьКосвенныеЗатраты,
	               |	УЧ_ЗакрытиеПериода.НачислятьАмортизацию КАК НачислятьАмортизацию,
	               |	УЧ_ЗакрытиеПериода.СписыватьРасходыБудующихПериодов КАК СписыватьРасходыБудующихПериодов,
	               |	УЧ_ЗакрытиеПериода.ВариантРаспределенияЗатрат КАК ВариантРаспределенияЗатрат
	               |ИЗ
	               |	Документ.УЧ_ЗакрытиеПериода КАК УЧ_ЗакрытиеПериода
	               |ГДЕ
	               |	УЧ_ЗакрытиеПериода.Проведен = ИСТИНА
	               |	И УЧ_ЗакрытиеПериода.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	               |	И УЧ_ЗакрытиеПериода.Предприятие В(&Предприятия)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыЗапроса.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", ПараметрыЗапроса.КонецПериода);
	Запрос.УстановитьПараметр("Предприятия", Предприятия.ВыгрузитьЗначения());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();
	
	ГоризонтПериода = ?(ИнтервалЗакрытия = "Год", 12, ?(ИнтервалЗакрытия = "Квартал", 3, 1));
	ИндексКолонки = 1;
	Для ИндексПериода = 1 По 12 Цикл
		ТекПериод = ДобавитьМесяц(НачалоГода(МесяцНачисления), ИндексПериода - 1);
		Если ИндексКолонки > ГоризонтПериода Или ТекПериод > НачалоМесяца(ТекущаяДата()) Тогда
			Прервать;	
		КонецЕсли;
		Если ТекПериод < НачалоМесяца(МесяцНачисления) Тогда
			Продолжить;	
		КонецЕсли;
		ЗначениеПоля = "Да";
		Для каждого ТекПредприятие Из Предприятия Цикл
			НайденныеДанные = Выборка.НайтиСтроки(Новый Структура("Предприятие, Период", ТекПредприятие.Значение, ТекПериод));
			Если Не НайденныеДанные.Количество() Тогда
				ЗначениеПоля = "Нет";
			КонецЕсли;
		КонецЦикла;
		ЭтотОбъект["Реквизит" + ИндексКолонки + ИмяЭлемента] = ЗначениеПоля;
		НоваяКнопка = Элементы.Найти("ПолеФормы" + ИндексКолонки + ИмяЭлемента);
		НоваяКнопка.ЦветТекста = ?(ЗначениеПоля = "Да", Новый Цвет(51,153,102), Новый Цвет(255,0,0));
		ИндексКолонки = ИндексКолонки + 1;
	КонецЦикла;
	
	//ставим настройки по последнему документу
	Для каждого ТекСтрока Из Выборка Цикл
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ТекСтрока);	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНеобработанные(ИмяЭлемента, ПараметрыЗапроса)
	
	
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, " ", "");
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, ".", "");
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, ",", "");
	
	Если Не Предприятия.Количество() Тогда
		Возврат;
	КонецЕсли;

	ГоризонтПериода = ?(ИнтервалЗакрытия = "Год", 12, ?(ИнтервалЗакрытия = "Квартал", 3, 1));
	ИндексКолонки = 1;
	Для ИндексПериода = 1 По 12 Цикл
		ТекПериод = ДобавитьМесяц(НачалоГода(МесяцНачисления), ИндексПериода - 1);
		Если ИндексКолонки > ГоризонтПериода Или ТекПериод > НачалоМесяца(ТекущаяДата()) Тогда
			Прервать;	
		КонецЕсли;
		Если ТекПериод < НачалоМесяца(МесяцНачисления) Тогда
			Продолжить;	
		КонецЕсли;
		ЗначениеПоля = "Да";
		Для каждого ТекПредприятие Из Предприятия Цикл
			СтруктураНеобработанных = РегистрыСведений.сабОбработкаДокументов.ПолучитьНеобработанныеДокументы(100, Истина, Новый Структура("НачалоПериода, КонецПериода", НачалоМесяца(ТекПериод), КонецМесяца(ТекПериод)));
			Если СтруктураНеобработанных.Количество() Тогда
				ЗначениеПоля = "Нет (" + СтруктураНеобработанных.Количество() + ")";
			КонецЕсли;
		КонецЦикла;
		ЭтотОбъект["Реквизит" + ИндексКолонки + ИмяЭлемента] = ЗначениеПоля;
		НоваяКнопка = Элементы.Найти("ПолеФормы" + ИндексКолонки + ИмяЭлемента);
		НоваяКнопка.ЦветТекста = ?(ЗначениеПоля = "Да", Новый Цвет(51,153,102), Новый Цвет(255,0,0));
		ИндексКолонки = ИндексКолонки + 1;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстатки25(ИмяЭлемента, ПараметрыЗапроса)
	
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, " ", "");
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, ".", "");
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, ",", "");
	
	Если Не Предприятия.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка25 = ПараметрыЗапроса.ОстаткиПоСчетам.Получить(ПланыСчетов.Учетный.НайтиПоКоду("25"));
	Выборка26 = ПараметрыЗапроса.ОстаткиПоСчетам.Получить(ПланыСчетов.Учетный.НайтиПоКоду("26"));
	Выборка44 = ПараметрыЗапроса.ОстаткиПоСчетам.Получить(ПланыСчетов.Учетный.НайтиПоКоду("44"));

	ГоризонтПериода = ?(ИнтервалЗакрытия = "Год", 12, ?(ИнтервалЗакрытия = "Квартал", 3, 1));
	ИндексКолонки = 1;
	Для ИндексПериода = 1 По 12 Цикл
		ТекПериод = ДобавитьМесяц(НачалоГода(МесяцНачисления), ИндексПериода - 1);
		Если ИндексКолонки > ГоризонтПериода Или ТекПериод > НачалоМесяца(ТекущаяДата()) Тогда
			Прервать;	
		КонецЕсли;
		Если ТекПериод < НачалоМесяца(МесяцНачисления) Тогда
			Продолжить;	
		КонецЕсли;
		ЗначениеПоля = "Да";
		Для каждого ТекПредприятие Из Предприятия Цикл
			Незакрытые = 0;
			Если ТипЗнч(Выборка25) = Тип("ТаблицаЗначений") Тогда
				НайденныеДанные1 = Выборка25.НайтиСтроки(Новый Структура("Предприятие, Период", ТекПредприятие.Значение, ТекПериод));
				Если НайденныеДанные1.Количество() Тогда
					Незакрытые = Незакрытые + 1;
				КонецЕсли;
			КонецЕсли;
			Если ТипЗнч(Выборка26) = Тип("ТаблицаЗначений") Тогда
				НайденныеДанные2 = Выборка26.НайтиСтроки(Новый Структура("Предприятие, Период", ТекПредприятие.Значение, ТекПериод));
				Если НайденныеДанные2.Количество() Тогда
					Незакрытые = Незакрытые + 1;
				КонецЕсли;
			КонецЕсли;
			Если ТипЗнч(Выборка44) = Тип("ТаблицаЗначений") Тогда
				НайденныеДанные3 = Выборка44.НайтиСтроки(Новый Структура("Предприятие, Период", ТекПредприятие.Значение, ТекПериод));
				Если НайденныеДанные3.Количество() Тогда
					Незакрытые = Незакрытые + 1;
				КонецЕсли;
			КонецЕсли;
			Если Незакрытые Тогда
				ЗначениеПоля = "Нет";
			КонецЕсли;
		КонецЦикла;
		ЭтотОбъект["Реквизит" + ИндексКолонки + ИмяЭлемента] = ЗначениеПоля;
		НоваяКнопка = Элементы.Найти("ПолеФормы" + ИндексКолонки + ИмяЭлемента);
		НоваяКнопка.ЦветТекста = ?(ЗначениеПоля = "Да", Новый Цвет(51,153,102), Новый Цвет(255,0,0));
		ИндексКолонки = ИндексКолонки + 1;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстатки20(ИмяЭлемента, ПараметрыЗапроса)
	
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, " ", "");
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, ".", "");
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, ",", "");
	
	Если Не Предприятия.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка20 = ПараметрыЗапроса.ОстаткиПоСчетам.Получить(ПланыСчетов.Учетный.НайтиПоКоду("20"));
	Выборка40 = ПараметрыЗапроса.ОстаткиПоСчетам.Получить(ПланыСчетов.Учетный.НайтиПоКоду("40"));

	ГоризонтПериода = ?(ИнтервалЗакрытия = "Год", 12, ?(ИнтервалЗакрытия = "Квартал", 3, 1));
	ИндексКолонки = 1;
	Для ИндексПериода = 1 По 12 Цикл
		ТекПериод = ДобавитьМесяц(НачалоГода(МесяцНачисления), ИндексПериода - 1);
		Если ИндексКолонки > ГоризонтПериода Или ТекПериод > НачалоМесяца(ТекущаяДата()) Тогда
			Прервать;	
		КонецЕсли;
		Если ТекПериод < НачалоМесяца(МесяцНачисления) Тогда
			Продолжить;	
		КонецЕсли;
		ЗначениеПоля = "Да";
		Для каждого ТекПредприятие Из Предприятия Цикл
			Незакрытые = 0;
			Если ТипЗнч(Выборка20) = Тип("ТаблицаЗначений") Тогда
				НайденныеДанные1 = Выборка20.НайтиСтроки(Новый Структура("Предприятие, Период", ТекПредприятие.Значение, ТекПериод));
				Если НайденныеДанные1.Количество() Тогда
					Незакрытые = Незакрытые + 1;
				КонецЕсли;
			КонецЕсли;
			Если ТипЗнч(Выборка40) = Тип("ТаблицаЗначений") Тогда
				НайденныеДанные2 = Выборка40.НайтиСтроки(Новый Структура("Предприятие, Период", ТекПредприятие.Значение, ТекПериод));
				Если НайденныеДанные2.Количество() Тогда
					Незакрытые = Незакрытые + 1;
				КонецЕсли;
			КонецЕсли;
			Если Незакрытые Тогда
				ЗначениеПоля = "Нет";
			КонецЕсли;
		КонецЦикла;
		ЭтотОбъект["Реквизит" + ИндексКолонки + ИмяЭлемента] = ЗначениеПоля;
		НоваяКнопка = Элементы.Найти("ПолеФормы" + ИндексКолонки + ИмяЭлемента);
		НоваяКнопка.ЦветТекста = ?(ЗначениеПоля = "Да", Новый Цвет(51,153,102), Новый Цвет(255,0,0));
		ИндексКолонки = ИндексКолонки + 1;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстатки90(ИмяЭлемента, ПараметрыЗапроса)
	
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, " ", "");
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, ".", "");
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, ",", "");
	
	Если Не Предприятия.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка9001 = ПараметрыЗапроса.ОстаткиПоСчетам.Получить(ПланыСчетов.Учетный.НайтиПоКоду("90.01"));
	Выборка9002 = ПараметрыЗапроса.ОстаткиПоСчетам.Получить(ПланыСчетов.Учетный.НайтиПоКоду("90.02"));
	Выборка9003 = ПараметрыЗапроса.ОстаткиПоСчетам.Получить(ПланыСчетов.Учетный.НайтиПоКоду("90.03"));
	Выборка91 = ПараметрыЗапроса.ОстаткиПоСчетам.Получить(ПланыСчетов.Учетный.НайтиПоКоду("91"));

	ГоризонтПериода = ?(ИнтервалЗакрытия = "Год", 12, ?(ИнтервалЗакрытия = "Квартал", 3, 1));
	ИндексКолонки = 1;
	Для ИндексПериода = 1 По 12 Цикл
		ТекПериод = ДобавитьМесяц(НачалоГода(МесяцНачисления), ИндексПериода - 1);
		Если ИндексКолонки > ГоризонтПериода Или ТекПериод > НачалоМесяца(ТекущаяДата()) Тогда
			Прервать;	
		КонецЕсли;
		Если ТекПериод < НачалоМесяца(МесяцНачисления) Тогда
			Продолжить;	
		КонецЕсли;
		ЗначениеПоля = "Да";
		Для каждого ТекПредприятие Из Предприятия Цикл
			Незакрытые = 0;
			Если ТипЗнч(Выборка9001) = Тип("ТаблицаЗначений") Тогда
				НайденныеДанные1 = Выборка9001.НайтиСтроки(Новый Структура("Предприятие, Период", ТекПредприятие.Значение, ТекПериод));
				Если НайденныеДанные1.Количество() Тогда
					Незакрытые = Незакрытые + 1;
				КонецЕсли;
			КонецЕсли;
			Если ТипЗнч(Выборка9002) = Тип("ТаблицаЗначений") Тогда
				НайденныеДанные2 = Выборка9002.НайтиСтроки(Новый Структура("Предприятие, Период", ТекПредприятие.Значение, ТекПериод));
				Если НайденныеДанные2.Количество() Тогда
					Незакрытые = Незакрытые + 1;
				КонецЕсли;
			КонецЕсли;
			Если ТипЗнч(Выборка9003) = Тип("ТаблицаЗначений") Тогда
				НайденныеДанные3 = Выборка9003.НайтиСтроки(Новый Структура("Предприятие, Период", ТекПредприятие.Значение, ТекПериод));
				Если НайденныеДанные3.Количество() Тогда
					Незакрытые = Незакрытые + 1;
				КонецЕсли;
			КонецЕсли;
			Если ТипЗнч(Выборка91) = Тип("ТаблицаЗначений") Тогда
				НайденныеДанные3 = Выборка91.НайтиСтроки(Новый Структура("Предприятие, Период", ТекПредприятие.Значение, ТекПериод));
				Если НайденныеДанные3.Количество() Тогда
					Незакрытые = Незакрытые + 1;
				КонецЕсли;
			КонецЕсли;
			Если Незакрытые Тогда
				ЗначениеПоля = "Нет";
			КонецЕсли;
		КонецЦикла;
		ЭтотОбъект["Реквизит" + ИндексКолонки + ИмяЭлемента] = ЗначениеПоля;
		НоваяКнопка = Элементы.Найти("ПолеФормы" + ИндексКолонки + ИмяЭлемента);
		НоваяКнопка.ЦветТекста = ?(ЗначениеПоля = "Да", Новый Цвет(51,153,102), Новый Цвет(255,0,0));
		ИндексКолонки = ИндексКолонки + 1;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстатки51(ИмяЭлемента, ПараметрыЗапроса)
	
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, " ", "");
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, ".", "");
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, ",", "");
	
	Если Не Предприятия.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка51 = ПараметрыЗапроса.ОстаткиПоСчетам51.Получить(ПланыСчетов.Учетный.Счет51());

	ГоризонтПериода = ?(ИнтервалЗакрытия = "Год", 12, ?(ИнтервалЗакрытия = "Квартал", 3, 1));
	ИндексКолонки = 1;
	Для ИндексПериода = 1 По 12 Цикл
		ТекПериод = ДобавитьМесяц(НачалоГода(МесяцНачисления), ИндексПериода - 1);
		Если ИндексКолонки > ГоризонтПериода Или ТекПериод > НачалоМесяца(ТекущаяДата()) Тогда
			Прервать;	
		КонецЕсли;
		Если ТекПериод < НачалоМесяца(МесяцНачисления) Тогда
			Продолжить;	
		КонецЕсли;
		ЗначениеПоля = "Да";
		Для каждого ТекПредприятие Из Предприятия Цикл
			Незакрытые = 0;
			Если ТипЗнч(Выборка51) = Тип("ТаблицаЗначений") Тогда
				НайденныеДанные1 = Выборка51.НайтиСтроки(Новый Структура("Предприятие, Период", ТекПредприятие.Значение, ТекПериод));
				СуммаБУ = 0;
				СуммаУУ = 0;
				ПроцентОтклонения = 0;
				Для каждого ТекСтрока Из НайденныеДанные1 Цикл
					СуммаБУ = СуммаБУ + ТекСтрока.СуммаОстатокБУ;
					СуммаУУ = СуммаУУ + ТекСтрока.СуммаОстатокУУ;
				КонецЦикла;
				ПроцентОтклонения = Окр(?(СуммаБУ, (СуммаБУ - СуммаУУ) / СуммаБУ, 0) * 100, 2);
				Незакрытые = Незакрытые + ?(ПроцентОтклонения, 1, 0);
			КонецЕсли;
			Если Незакрытые Тогда
				ЗначениеПоля = "Нет (отк. " + Строка(ПроцентОтклонения) + "%)";
			КонецЕсли;
		КонецЦикла;
		ЭтотОбъект["Реквизит" + ИндексКолонки + ИмяЭлемента] = ЗначениеПоля;
		НоваяКнопка = Элементы.Найти("ПолеФормы" + ИндексКолонки + ИмяЭлемента);
		НоваяКнопка.ЦветТекста = ?(ЗначениеПоля = "Да", Новый Цвет(51,153,102), Новый Цвет(255,0,0));
		ИндексКолонки = ИндексКолонки + 1;
	КонецЦикла;

КонецПроцедуры


&НаКлиенте
Процедура ПредприятияПриИзменении(Элемент)
	ЗаполнитьДанные();
КонецПроцедуры

&НаСервере
Функция ВернутьОстатки(ПараметрыЗапроса)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УчетныйОстаткиИОбороты.Субконто1 КАК Субконто1,
	               |	УчетныйОстаткиИОбороты.Подразделение КАК Подразделение,
	               |	УчетныйОстаткиИОбороты.Субконто2 КАК Субконто2,
	               |	УчетныйОстаткиИОбороты.Субконто3 КАК Субконто3,
	               |	УчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	УчетныйОстаткиИОбороты.СуммаОборот КАК СуммаОборот,
	               |	УчетныйОстаткиИОбороты.СуммаКонечныйОстаток КАК СуммаОстаток,
	               |	УчетныйОстаткиИОбороты.СуммаОборотДт КАК СуммаОборотДт,
	               |	УчетныйОстаткиИОбороты.СуммаОборотКт КАК СуммаОборотКт,
	               |	УчетныйОстаткиИОбороты.КоличествоОборотДт КАК КоличествоОборотДт,
	               |	УчетныйОстаткиИОбороты.КоличествоОборотКт КАК КоличествоОборотКт,
	               |	УчетныйОстаткиИОбороты.СуммаНачальныйОстаток КАК СуммаНачальныйОстаток,
	               |	УчетныйОстаткиИОбороты.КоличествоНачальныйОстаток КАК КоличествоНачальныйОстаток,
	               |	УчетныйОстаткиИОбороты.Период КАК Период,
	               |	УчетныйОстаткиИОбороты.Предприятия КАК Предприятие
	               |ИЗ
	               |	РегистрБухгалтерии.Учетный.ОстаткиИОбороты(
	               |			&ДатаНачала,
	               |			&ДатаОкончания,
	               |			Месяц,
	               |			,
	               |			Счет = &Счет25
	               |				ИЛИ Счет = &Счет44
	               |				ИЛИ Счет = &Счет26
	               |				ИЛИ Счет = &Счет20
	               |				ИЛИ Счет = &Счет43
	               |				ИЛИ Счет В ИЕРАРХИИ (&Счет90)
	               |				ИЛИ Счет В ИЕРАРХИИ (&Счет91)
	               |				ИЛИ Счет В ИЕРАРХИИ (&Счет97)
	               |				ИЛИ Счет В ИЕРАРХИИ (&Счет01)
	               |				ИЛИ Счет В ИЕРАРХИИ (&Счет04),
	               |			,
	               |			Предприятия В (&Предприятие)
	               |				И СценарийПлана = &Сценарий) КАК УчетныйОстаткиИОбороты
	               |ГДЕ
	               |	НЕ УчетныйОстаткиИОбороты.СуммаКонечныйОстаток = 0";
	
		
	Запрос.УстановитьПараметр("ДатаНачала", ПараметрыЗапроса.НачалоПериода);
	Запрос.УстановитьПараметр("ДатаОкончания", ПараметрыЗапроса.КонецПериода);
	Запрос.УстановитьПараметр("Предприятие", Предприятия.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("Счет25", ПланыСчетов.Учетный.Счет25());
	Запрос.УстановитьПараметр("Счет44", ПланыСчетов.Учетный.НайтиПоКоду("44"));
	Запрос.УстановитьПараметр("Счет26", ПланыСчетов.Учетный.НайтиПоКоду("26"));
	Запрос.УстановитьПараметр("Счет20", ПланыСчетов.Учетный.Счет20());
	Запрос.УстановитьПараметр("Счет90", ПланыСчетов.Учетный.Счет90());
	Запрос.УстановитьПараметр("Счет97", ПланыСчетов.Учетный.Счет97());
	Запрос.УстановитьПараметр("Счет01", ПланыСчетов.Учетный.Счет01());
	Запрос.УстановитьПараметр("Счет43", ПланыСчетов.Учетный.Счет43());
	Запрос.УстановитьПараметр("Счет04", ПланыСчетов.Учетный.НайтиПоКоду("04"));
	Запрос.УстановитьПараметр("Счет91", ПланыСчетов.Учетный.Счет91());
	Запрос.УстановитьПараметр("Сценарий", Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина));
	
	Результат = Запрос.Выполнить();
	Выборка25 = Результат.Выгрузить();
	ВыборкаСчет = Выборка25.Скопировать();
	ВыборкаСчет.Свернуть("Счет");
	
	ВыборкаВрем = Выборка25.Скопировать();
	
	Стру = Новый Соответствие;
	Для каждого ТекСчет Из ВыборкаСчет Цикл
		ВыборкаВрем.Очистить();
		НайденныеСтроки = Выборка25.НайтиСтроки(Новый Структура("Счет", ТекСчет.Счет));
		Для каждого ТекСтрока Из НайденныеСтроки Цикл
			НоваяСтрока = ВыборкаВрем.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);		
		КонецЦикла;
		Стру.Вставить(ТекСчет.Счет, ВыборкаВрем.Скопировать());
	КонецЦикла; 
		
	Возврат Стру;	

КонецФункции // ()

Функция ВернутьОстатки51(ПараметрыЗапроса)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УчетныйОстаткиИОбороты.Субконто2 КАК Субконто2,
	               |	&Счет51 КАК Счет,
	               |	УчетныйОстаткиИОбороты.СуммаКонечныйОстаток КАК СуммаОстатокУУ,
	               |	УчетныйОстаткиИОбороты.Период КАК Период,
	               |	УчетныйОстаткиИОбороты.Предприятия КАК Предприятие,
	               |	0 КАК СуммаОстатокБУ
	               |ПОМЕСТИТЬ ВремТЗ
	               |ИЗ
	               |	РегистрБухгалтерии.Учетный.ОстаткиИОбороты(
	               |			&ДатаНачала,
	               |			&ДатаОкончания,
	               |			Месяц,
	               |			,
	               |			Счет В ИЕРАРХИИ (&Счет51),
	               |			,
	               |			Предприятия В (&Предприятие)
	               |				И СценарийПлана = &Сценарий) КАК УчетныйОстаткиИОбороты
	               |ГДЕ
	               |	НЕ УчетныйОстаткиИОбороты.СуммаКонечныйОстаток = 0
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	УчетныйОстаткиИОбороты.Субконто1,
	               |	&Счет51,
	               |	0,
	               |	УчетныйОстаткиИОбороты.Период,
	               |	УчетныйОстаткиИОбороты.Организация.Предприятие,
	               |	УчетныйОстаткиИОбороты.СуммаКонечныйОстаток
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	               |			&ДатаНачала,
	               |			&ДатаОкончания,
	               |			Месяц,
	               |			,
	               |			Счет В ИЕРАРХИИ (&Счет51БУ),
	               |			,
	               |			Организация.Предприятие В (&Предприятие)
	               |				) КАК УчетныйОстаткиИОбороты
	               |ГДЕ
	               |	НЕ УчетныйОстаткиИОбороты.СуммаКонечныйОстаток = 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВремТЗ.Субконто2 КАК Субконто2,
	               |	ВремТЗ.Счет КАК Счет,
	               |	ВремТЗ.Период КАК Период,
	               |	ВремТЗ.Предприятие КАК Предприятие,
	               |	СУММА(ВремТЗ.СуммаОстатокБУ) КАК СуммаОстатокБУ,
	               |	СУММА(ВремТЗ.СуммаОстатокУУ) КАК СуммаОстатокУУ
	               |ПОМЕСТИТЬ ВремТЗ2
	               |ИЗ
	               |	ВремТЗ КАК ВремТЗ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВремТЗ.Субконто2,
	               |	ВремТЗ.Предприятие,
	               |	ВремТЗ.Период,
	               |	ВремТЗ.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВремТЗ2.Субконто2 КАК Субконто2,
	               |	ВремТЗ2.Счет КАК Счет,
	               |	ВремТЗ2.Период КАК Период,
	               |	ВремТЗ2.Предприятие КАК Предприятие,
	               |	ВремТЗ2.СуммаОстатокБУ КАК СуммаОстатокБУ,
	               |	ВремТЗ2.СуммаОстатокУУ КАК СуммаОстатокУУ
	               |ИЗ
	               |	ВремТЗ2 КАК ВремТЗ2
	               |ГДЕ
	               |	НЕ ВремТЗ2.СуммаОстатокБУ = ВремТЗ2.СуммаОстатокУУ";
	
		
	Запрос.УстановитьПараметр("ДатаНачала", ПараметрыЗапроса.НачалоПериода);
	Запрос.УстановитьПараметр("ДатаОкончания", ПараметрыЗапроса.КонецПериода);
	Запрос.УстановитьПараметр("Предприятие", Предприятия.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("Счет51", ПланыСчетов.Учетный.Счет51());
	Запрос.УстановитьПараметр("Счет51БУ", ПланыСчетов.Хозрасчетный.НайтиПоКоду("51"));
	Запрос.УстановитьПараметр("Сценарий", Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина));
	
	Результат = Запрос.Выполнить();
	Выборка25 = Результат.Выгрузить();
	ВыборкаСчет = Выборка25.Скопировать();
	ВыборкаСчет.Свернуть("Счет");
	
	ВыборкаВрем = Выборка25.Скопировать();
	
	Стру = Новый Соответствие;
	Для каждого ТекСчет Из ВыборкаСчет Цикл
		ВыборкаВрем.Очистить();
		НайденныеСтроки = Выборка25.НайтиСтроки(Новый Структура("Счет", ТекСчет.Счет));
		Для каждого ТекСтрока Из НайденныеСтроки Цикл
			НоваяСтрока = ВыборкаВрем.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);		
		КонецЦикла;
		Стру.Вставить(ТекСчет.Счет, ВыборкаВрем.Скопировать());
	КонецЦикла; 
		
	Возврат Стру;	

КонецФункции // ()


&НаСервере
Процедура СоздатьЭлементГруппу(Родитель, ИмяГруппы)
	
	ЗагодовокГруппы = ИмяГруппы;
	ИмяГруппы = СтрЗаменить(ИмяГруппы, " ", "");
	
	НоваяКнопка0 = Элементы.Найти("ГруппаФормы" + ИмяГруппы);
	Если НоваяКнопка0 = Неопределено Тогда
		НоваяКнопка0 = Элементы.Добавить("ГруппаФормы" + ИмяГруппы, Тип("ГруппаФормы"), Родитель);
	КонецЕсли;
	НоваяКнопка0.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяКнопка0.Заголовок = ЗагодовокГруппы;
	Если ИмяГруппы = "Месяцы" Тогда
		НоваяКнопка0.ОтображатьЗаголовок = Ложь;
	Иначе
		НоваяКнопка0.ОтображатьЗаголовок = Истина;
	КонецЕсли;
	НоваяКнопка0.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	НоваяКнопка0.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяКнопка0.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
	НоваяКнопка0.ОтображениеУправления = ОтображениеУправленияОбычнойГруппы.Картинка;
	НоваяКнопка0.ШрифтЗаголовка = Новый Шрифт(,,Истина);
	//НоваяКнопка0.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
	
	
	НоваяКнопка = Элементы.Найти("ГруппаФормыПоказатель" + ИмяГруппы);
	Если НоваяКнопка = Неопределено Тогда
		НоваяКнопка = Элементы.Добавить("ГруппаФормыПоказатель" + ИмяГруппы, Тип("ГруппаФормы"), НоваяКнопка0);
	КонецЕсли;
	НоваяКнопка.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяКнопка.ОтображатьЗаголовок = Ложь;
	НоваяКнопка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НоваяКнопка.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяКнопка.Ширина = 15;
	//НоваяКнопка.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
	
	ГоризонтПериода = ?(ИнтервалЗакрытия = "Год", 12, ?(ИнтервалЗакрытия = "Квартал", 3, 1));
	Для ИндексПериода = 1 По 12 Цикл
		
		Если ИндексПериода > ГоризонтПериода Тогда
			НоваяКнопка = Элементы.Найти("ГруппаФормы" + ИмяГруппы + ИндексПериода);
			Если Не НоваяКнопка = Неопределено Тогда
				Элементы.Удалить(НоваяКнопка);
			КонецЕсли;
		Иначе
			НоваяКнопка = Элементы.Найти("ГруппаФормы" + ИмяГруппы + ИндексПериода);
			Если НоваяКнопка = Неопределено Тогда
				НоваяКнопка = Элементы.Добавить("ГруппаФормы" + ИмяГруппы + ИндексПериода, Тип("ГруппаФормы"), НоваяКнопка0);
			КонецЕсли;
			НоваяКнопка.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			НоваяКнопка.ОтображатьЗаголовок = Ложь;
			НоваяКнопка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			НоваяКнопка.Отображение = ОтображениеОбычнойГруппы.Нет;
			НоваяКнопка.Ширина = 5;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыГруппы(ИмяГруппы, ИмяЭлемента)
	
	ЗаголовокЭлемента = ИмяЭлемента;
	ИмяГруппы = СтрЗаменить(ИмяГруппы, " ", "");
	ИмяГруппы = СтрЗаменить(ИмяГруппы, ".", "");
	ИмяГруппы = СтрЗаменить(ИмяГруппы, ",", "");
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, " ", "");
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, ".", "");
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, ",", "");
	
	Если Не БюджетныйНаСервере.ЕстьСвойствоОбъекта(ЭтаФорма, "ИмяПоказателя" + ИмяЭлемента) Тогда
		ДобавляемыеРеквизиты = Новый Массив;
		Реквизит = Новый РеквизитФормы("ИмяПоказателя" + ИмяЭлемента, Новый ОписаниеТипов("Строка")); 
		ДобавляемыеРеквизиты.Добавить(Реквизит); 
		ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	КонецЕсли;
	НоваяКнопка = Элементы.Найти("ПолеФормыИмя" + ИмяЭлемента);
	Родитель = Элементы.Найти("ГруппаФормыПоказатель" + ИмяГруппы);
	Если НоваяКнопка = Неопределено Тогда
		НоваяКнопка = Элементы.Добавить("ПолеФормыИмя" + ИмяЭлемента, Тип("ПолеФормы"),Родитель);
		НоваяКнопка.ПутьКДанным  = "ИмяПоказателя" + ИмяЭлемента;
	КонецЕсли;
	НоваяКнопка.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Если ИмяЭлемента = "Месяц" Тогда
		НоваяКнопка.Шрифт = Новый Шрифт(,,Истина);;
	КонецЕсли;
	//НоваяКнопка.Заголовок = ЗагодовокЭлемента;
	ЭтотОбъект["ИмяПоказателя" + ИмяЭлемента] = ЗаголовокЭлемента;
	//НоваяКнопка.Гиперссылка = Истина;
	
	ГоризонтПериода = ?(ИнтервалЗакрытия = "Год", 12, ?(ИнтервалЗакрытия = "Квартал", 3, 1));
	Для ИндексПериода = 1 По 12 Цикл
		
		Если ИндексПериода > ГоризонтПериода Или ДобавитьМесяц(НачалоГода(МесяцНачисления), ИндексПериода - 1) > НачалоМесяца(ТекущаяДата()) Тогда
			НоваяКнопка = Элементы.Найти("ПолеФормы" + ИндексПериода + ИмяЭлемента);
			Если Не НоваяКнопка = Неопределено Тогда
				Элементы.Удалить(НоваяКнопка);
			КонецЕсли;	
		Иначе
			Если ИмяЭлемента = "Месяц" Тогда
				ЗначениеЭлемента = Формат(ДобавитьМесяц(НачалоМесяца(МесяцНачисления), ИндексПериода - 1), "ДФ='ММММ гггг'");
			Иначе
				ЗначениеЭлемента = "-";
			КонецЕсли;
			
			Если Не БюджетныйНаСервере.ЕстьСвойствоОбъекта(ЭтаФорма, "Реквизит" + ИндексПериода + ИмяЭлемента) Тогда
				ДобавляемыеРеквизиты = Новый Массив; 
				Реквизит = Новый РеквизитФормы("Реквизит" + ИндексПериода + ИмяЭлемента, Новый ОписаниеТипов("Строка")); 
				ДобавляемыеРеквизиты.Добавить(Реквизит); 
				ИзменитьРеквизиты(ДобавляемыеРеквизиты);
			КонецЕсли;
			НоваяКнопка = Элементы.Найти("ПолеФормы" + ИндексПериода + ИмяЭлемента);
			Родитель = Элементы.Найти("ГруппаФормы" + ИмяГруппы + ИндексПериода);
			Если НоваяКнопка = Неопределено Тогда
				НоваяКнопка = Элементы.Добавить("ПолеФормы" + ИндексПериода + ИмяЭлемента, Тип("ПолеФормы"),Родитель);
				НоваяКнопка.ПутьКДанным  = "Реквизит" + ИндексПериода + ИмяЭлемента;
			КонецЕсли;
			НоваяКнопка.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			Если ИмяЭлемента = "Месяц" Тогда
				НоваяКнопка.Шрифт = Новый Шрифт(,,Истина);
			КонецЕсли;
			//НоваяКнопка.Заголовок = ЗагодовокЭлемента;
			ЭтотОбъект["Реквизит" + ИндексПериода + ИмяЭлемента] = ЗначениеЭлемента;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#Область РаботаСПериодом

&НаКлиенте
Процедура ЗаполнитьМесяцПоДате(РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления)
	
	Если ИнтервалЗакрытия = "Месяц" Тогда
		Значение = ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
		УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, ПолучитьПредставлениеМесяца(Значение));
	ИначеЕсли ИнтервалЗакрытия = "Квартал" Тогда	
		МесяцНачисленияСтрокой = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
		НачалоКвартала(МесяцНачисления), КонецКвартала(МесяцНачисления), Истина);
	ИначеЕсли ИнтервалЗакрытия = "Год" Или ИнтервалЗакрытия = "Год" Тогда	
		МесяцНачисленияСтрокой = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
		НачалоГода(МесяцНачисления), КонецГода(МесяцНачисления), Истина);
	КонецЕсли;
	
	ДобавитьЭлементыНаФорму();
	
КонецПроцедуры

Функция ПолучитьПредставлениеМесяца(ДатаНачалаМесяца) Экспорт
	
	Возврат Формат(ДатаНачалаМесяца, "ДФ='ММММ гггг'");
	
КонецФункции

&НаКлиенте
Процедура ПериодРегистрацииПриИзменении(Элемент)
	
	ВводМесяцаПриИзменении(ЭтаФорма, "МесяцНачисления", "МесяцНачисленияСтрокой", Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ВводМесяцаРегулирование(ЭтаФорма, "МесяцНачисления", "МесяцНачисленияСтрокой", Направление, Модифицированность);
	ВводМесяцаПриИзменении(ЭтаФорма, "МесяцНачисления", "МесяцНачисленияСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводМесяцаПриИзменении(РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, Модифицированность = Ложь) Экспорт
	
	Если ИнтервалЗакрытия = "Месяц" Тогда
		ЗначениеПредставления = ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления);
		Значение              = ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
		
		ДатаКакМесяцПодобратьДатуПоТексту(ЗначениеПредставления, Значение);
		
		УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, ПолучитьПредставлениеМесяца(Значение));
		УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, Значение);
	ИначеЕсли ИнтервалЗакрытия = "Квартал" Тогда	
		МесяцНачисленияСтрокой = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
		НачалоКвартала(МесяцНачисления), КонецКвартала(МесяцНачисления), Истина);
		МесяцНачисления = НачалоКвартала(МесяцНачисления);
	ИначеЕсли ИнтервалЗакрытия = "Год" Или ИнтервалЗакрытия = "Год" Тогда	
		МесяцНачисленияСтрокой = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
		НачалоГода(МесяцНачисления), КонецГода(МесяцНачисления), Истина);
		МесяцНачисления = НачалоГода(МесяцНачисления);
	КонецЕсли;
	
	ДобавитьЭлементыНаФорму();
	
КонецПроцедуры 

&НаКлиенте
Функция ДатаКакМесяцПодобратьДатуПоТексту(Текст, ДатаПоТексту = НеОпределено)
	
	СписокВозврата = Новый СписокЗначений;
	ТекущийГод = Год(ДатаСеанса());
	
	Если ПустаяСтрока(Текст) Тогда
		ДатаПоТексту = Дата(1, 1, 1);
		Возврат СписокВозврата;
	КонецЕсли;
	
	Если СтрНайти(Текст, ".") <> 0 Тогда
		Подстроки = РазложитьСтрокуВМассивПодстрок(Текст, ".");
	ИначеЕсли СтрНайти(Текст, ",") <> 0 Тогда
		Подстроки = РазложитьСтрокуВМассивПодстрок(Текст, ",");
	ИначеЕсли СтрНайти(Текст, "-") <> 0 Тогда
		Подстроки = РазложитьСтрокуВМассивПодстрок(Текст, "-");
	ИначеЕсли СтрНайти(Текст, "/") <> 0 Тогда
		Подстроки = РазложитьСтрокуВМассивПодстрок(Текст, "/");
	ИначеЕсли СтрНайти(Текст, "\") <> 0 Тогда
		Подстроки = РазложитьСтрокуВМассивПодстрок(Текст, "\");
	Иначе
		Подстроки = РазложитьСтрокуВМассивПодстрок(Текст, " ");
	КонецЕсли;
	
	Если Подстроки.Количество() = 1 Тогда
		
		Если ТолькоЦифрыВСтроке(Текст) Тогда
			МесяцЧислом = Число(Текст);
			Если МесяцЧислом >= 1 И МесяцЧислом <=12 Тогда
				ДатаПоТексту = Дата(ТекущийГод, МесяцЧислом, 1);
				Если СтрДлина(Текст) = 1 Тогда
					СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='М/гг'"));
				Иначе
					СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММ/гг'"));
				КонецЕсли;
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;                
		Иначе
			СписокМесяцев = СписокМесяцевПоСтроке(Текст);
			Для Каждого Месяц Из СписокМесяцев Цикл
				ДатаПоТексту = Дата(ТекущийГод, Месяц, 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли Подстроки.Количество() = 2 Тогда
		
		Если ТолькоЦифрыВСтроке(Подстроки[1]) Тогда
			
			Если ПустаяСтрока(Подстроки[1]) Тогда
				ГодЧислом = 0;
				Подстроки[1] = "0";
				ТекстВозврата = Текст + "0";
			Иначе
				ГодЧислом = Число(Подстроки[1]);
				ТекстВозврата = "";
			КонецЕсли;
			
			Если ГодЧислом > 3000 Тогда
				Возврат СписокВозврата;
			КонецЕсли;
			
			Если СтрДлина(Подстроки[1]) <= 1 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 3) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 2 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 2) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 3 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 1) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 4 Тогда
				ГодЧислом = Число(Подстроки[1]);
			КонецЕсли;                    
			
		Иначе
			
			Возврат СписокВозврата;
			
		КонецЕсли;                
		Если ЗначениеЗаполнено(Подстроки[0]) И ТолькоЦифрыВСтроке(Подстроки[0]) Тогда
			
			МесяцЧислом = Число(Подстроки[0]);
			Если МесяцЧислом >= 1 И МесяцЧислом <= 12 Тогда
				ДатаПоТексту = Дата(ГодЧислом, МесяцЧислом, 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;                
			
		Иначе
			
			СписокМесяцев = СписокМесяцевПоСтроке(Подстроки[0]);
			
			Если СписокМесяцев.Количество() = 1 Тогда
				ДатаПоТексту = Дата(ГодЧислом, СписокМесяцев[0], 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			Иначе
				Для Каждого Месяц Из СписокМесяцев Цикл
					ДатаПоТексту = Дата(ГодЧислом, Месяц, 1);
					СписокВозврата.Добавить(Формат(Дата(ГодЧислом, Месяц, 1), "ДФ='ММММ гггг'"));
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокВозврата;
	
КонецФункции

&НаКлиенте
Процедура ВводМесяцаРегулирование(РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, Направление, Модифицированность = Ложь, ЗначениеМесяцаПоУмолчанию = Неопределено) Экспорт
	
	Значение = ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	
	Если Значение <= '19000101' Тогда
		
		Если ЗначениеМесяцаПоУмолчанию = Неопределено Тогда
			Значение = НачалоМесяца(ДатаСеанса());
		Иначе
			Значение = НачалоМесяца(ЗначениеМесяцаПоУмолчанию);
		КонецЕсли;
		
		НовоеЗначение = Значение;
		
	Иначе
		Если ИнтервалЗакрытия = "Месяц" Тогда
			НовоеЗначение = ДобавитьМесяц(Значение, Направление);
		ИначеЕсли ИнтервалЗакрытия = "Квартал" Тогда
			НовоеЗначение = ДобавитьМесяц(Значение, 3*Направление);
		ИначеЕсли ИнтервалЗакрытия = "Год" Тогда
			НовоеЗначение = ДобавитьМесяц(Значение, 12*Направление);
		КонецЕсли;
	КонецЕсли; 
	
	Если НовоеЗначение >= '00010101' Тогда
		
		Значение = НовоеЗначение;
		
		УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, Значение);
		УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, ПолучитьПредставлениеМесяца(Значение));
		
		//Модифицированность = Истина;
	 	
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Если Текст <> "" Тогда
		ДанныеВыбора = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Если Не ПустаяСтрока(Текст) Тогда
		ДанныеВыбора = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Функция СписокМесяцевПоСтроке(Текст)
	
	СписокМесяцев  = Новый СписокЗначений;
	Месяцы         = Новый Соответствие;
	МесяцыВозврата = Новый Массив;
	
	Для Счетчик = 1 По 12 Цикл
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='ММММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='МММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
	КонецЦикла;
	
	Для Каждого ЭлементСписка Из СписокМесяцев Цикл
		Если ВРег(Текст) = ВРег(Лев(ЭлементСписка.Представление, СтрДлина(Текст))) Тогда
			Месяцы[ЭлементСписка.Значение] = 0;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из Месяцы Цикл
		МесяцыВозврата.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Возврат МесяцыВозврата;
	
КонецФункции

Функция ТолькоЦифрыВСтроке(Знач СтрокаПроверки, Знач УчитыватьЛидирующиеНули = Истина, Знач УчитыватьПробелы = Истина) Экспорт
	
	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не УчитыватьПробелы Тогда
		СтрокаПроверки = СтрЗаменить(СтрокаПроверки, " ", "");
	КонецЕсли;
		
	Если ПустаяСтрока(СтрокаПроверки) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не УчитыватьЛидирующиеНули Тогда
		Позиция = 1;
		// Взятие символа за границей строки возвращает пустую строку.
		Пока Сред(СтрокаПроверки, Позиция, 1) = "0" Цикл
			Позиция = Позиция + 1;
		КонецЦикла;
		СтрокаПроверки = Сред(СтрокаПроверки, Позиция);
	КонецЕсли;
	
	// Если содержит только цифры, то в результате замен должна быть получена пустая строка.
	// Проверять при помощи ПустаяСтрока нельзя, так как в исходной строке могут быть пробельные символы.
	Возврат СтрДлина(
		СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить(
		СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( 
			СтрокаПроверки, "0", ""), "1", ""), "2", ""), "3", ""), "4", ""), "5", ""), "6", ""), "7", ""), "8", ""), "9", "")) = 0;
	
КонецФункции

Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = СтрНайти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = СтрНайти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ДатаСеанса() Экспорт
	Возврат ТекущаяДата();
КонецФункции

&НаКлиенте
Процедура УстановитьРеквизитФормыПоПути(Форма, ПутьРеквизита, Значение, ТолькоЕслиНеЗаполнен = Ложь) Экспорт
	
	МассивИмен = СтрРазделить(ПутьРеквизита, ".");
	
	Объект1        = Форма;
	ПоследнееПоле = МассивИмен[МассивИмен.Количество()-1];
	
	Для Сч = 0 По МассивИмен.Количество()-2 Цикл
		Объект1 = Объект1[МассивИмен[Сч]]
	КонецЦикла;
	Если НЕ ТолькоЕслиНеЗаполнен ИЛИ НЕ ЗначениеЗаполнено(Объект1[ПоследнееПоле]) Тогда
		Объект1[ПоследнееПоле] = Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьРеквизитФормыПоПути(Форма, ПутьРеквизита) Экспорт
	
	МассивИмен = СтрРазделить(ПутьРеквизита, ".");
	
	Объект1        = Форма;
	ПоследнееПоле = МассивИмен[МассивИмен.Количество()-1];
	
	Для Сч = 0 По МассивИмен.Количество()-2 Цикл
		Объект1 = Объект1[МассивИмен[Сч]]
	КонецЦикла;
	
	Возврат Объект1[ПоследнееПоле];
	
КонецФункции

&НаКлиенте
Процедура ПериодРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыВыбораПериода = Новый Структура("НачалоПериода, КонецПериода", НачалоМесяца(МесяцНачисления), КонецМесяца(МесяцНачисления));
	
	Если ИнтервалЗакрытия = "Месяц" Тогда
		ИмяФормыВыбора = "ОбщаяФорма.ВыборСтандартногоПериодаМесяц";
	ИначеЕсли ИнтервалЗакрытия = "Квартал" Тогда
		ИмяФормыВыбора = "ОбщаяФорма.ВыборСтандартногоПериодаКвартал";
		ПараметрыВыбораПериода.Вставить("НарастающимИтогом", Ложь);
	ИначеЕсли ИнтервалЗакрытия = "Год" Тогда
		ИмяФормыВыбора = "ОбщаяФорма.ВыборСтандартногоПериодаКварталНарастающимИтогом";
	Иначе
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения     = Новый ОписаниеОповещения("МесяцНачисленияСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ОткрытьФорму(ИмяФормыВыбора, ПараметрыВыбораПериода, Элементы.МесяцНачисленияСтрокой, , , , ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбораЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт 
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МесяцНачисления = РезультатВыбора.НачалоПериода;
	
	МесяцНачисленияСтрокой = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
	НачалоКвартала(МесяцНачисления), КонецКвартала(МесяцНачисления), Истина);

	
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалЗакрытияПриИзменении(Элемент)
	ВводМесяцаПриИзменении(ЭтаФорма, "МесяцНачисления", "МесяцНачисленияСтрокой", Модифицированность);
КонецПроцедуры

#КонецОбласти 

&НаКлиенте
Процедура ОбновитьДанные(Команда)
	ЗаполнитьДанные();
КонецПроцедуры


&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
КонецПроцедуры


&НаКлиенте
Процедура ВыполнитьЗакрытие(Команда)
	
    СтрокаСостояния = 0;
	СостояниеПроведенияДокументовТовароучета = 0;
	
	ДокументыСОшибкамиПроведения.Очистить();
	
	Обработ = ПолучитьСтруктуруДокументовЗакрытия();
	//Возврат;
	счСтроки = 0;
	ВремяНачала = ТекущаяДата();
	ЧислоСтрок  = Обработ.Количество();
	
	Для каждого ТекОбр Из Обработ Цикл
		
		Если ПерепроводитьДокументыТовародвижений Тогда
			ВыполнитьПерепроведениеДокументовТовароучета(ТекОбр);
		КонецЕсли;
		
		счСтроки = счСтроки + 1;
		СкоростьЗагрузки = ?(ТекущаяДата() - ВремяНачала = 0, 0, Окр(счСтроки / (ТекущаяДата() - ВремяНачала), 2));
		ОсталосьВремени = Окр((ТекущаяДата() - ВремяНачала) / счСтроки * (ЧислоСтрок - счСтроки) / 60, 2);
		
		Если счСтроки / 100 = Окр(счСтроки / 100, 0) ИЛИ СкоростьЗагрузки < 20 ИЛИ ЧислоСтрок < 100 Тогда
			СтрокаСостояния = счСтроки / ЧислоСтрок * 100;
			НадписьСостояния = "Закрытие периодов... Осталось " + Строка(ОсталосьВремени) + " мин." + "Документ: " +  Строка(ТекОбр.Документ);
		КонецЕсли;
		
		ОбработкаПрерыванияПользователя();
		
		ПерепровестиСоздатьДокумент(ТекОбр);
		//Прервать;
	КонецЦикла;
	
	НадписьСостояния = "Закрытие периодов успешно выполнено. Финансовые показатели обновлены.";
	
	ЗаполнитьДанные();
	
	Элементы.ДокументыСОшибкамиПроведения.Видимость = ДокументыСОшибкамиПроведения.Количество();
	КоличествоОшибок = ДокументыСОшибкамиПроведения.Количество(); 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруДокументовЗакрытия()
	
	Если ИнтервалЗакрытия = "Месяц" Тогда
		НачалоПериода = НачалоМесяца(МесяцНачисления);
		КонецПериода = КонецМесяца(МесяцНачисления);
	ИначеЕсли ИнтервалЗакрытия = "Квартал" Тогда	
		НачалоПериода = НачалоКвартала(МесяцНачисления);
		КонецПериода = КонецКвартала(МесяцНачисления);
	ИначеЕсли ИнтервалЗакрытия = "Год" Или ИнтервалЗакрытия = "Год" Тогда	
		НачалоПериода = НачалоГода(МесяцНачисления);
		КонецПериода = КонецГода(МесяцНачисления);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УЧ_ЗакрытиеПериода.Ссылка КАК Ссылка,
	               |	НАЧАЛОПЕРИОДА(УЧ_ЗакрытиеПериода.Дата, МЕСЯЦ) КАК Период,
	               |	УЧ_ЗакрытиеПериода.Предприятие КАК Предприятие,
	               |	УЧ_ЗакрытиеПериода.ЗаблокироватьИзмененияДокументов КАК ЗаблокироватьИзмененияДокументов,
	               |	УЧ_ЗакрытиеПериода.РаспределятьПрямыеЗатраты КАК РаспределятьПрямыеЗатраты,
	               |	УЧ_ЗакрытиеПериода.РаспределятьКосвенныеЗатраты КАК РаспределятьКосвенныеЗатраты,
	               |	УЧ_ЗакрытиеПериода.НачислятьАмортизацию КАК НачислятьАмортизацию,
	               |	УЧ_ЗакрытиеПериода.СписыватьРасходыБудующихПериодов КАК СписыватьРасходыБудующихПериодов,
	               |	УЧ_ЗакрытиеПериода.ВариантРаспределенияЗатрат КАК ВариантРаспределенияЗатрат
	               |ИЗ
	               |	Документ.УЧ_ЗакрытиеПериода КАК УЧ_ЗакрытиеПериода
	               |ГДЕ
	               |	УЧ_ЗакрытиеПериода.Проведен = ИСТИНА
	               |	И УЧ_ЗакрытиеПериода.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	               |	И УЧ_ЗакрытиеПериода.Предприятие В(&Предприятия)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("Предприятия", Предприятия.ВыгрузитьЗначения());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();
	
	МассивСтруктур = Новый Массив;
	
	ГоризонтПериода = ?(ИнтервалЗакрытия = "Год", 12, ?(ИнтервалЗакрытия = "Квартал", 3, 1));
	ИндексКолонки = 1;
	Для ИндексПериода = 1 По 12 Цикл
		ТекПериод = ДобавитьМесяц(НачалоГода(МесяцНачисления), ИндексПериода - 1);
		Если ИндексКолонки > ГоризонтПериода Или ТекПериод > НачалоМесяца(ТекущаяДата()) Тогда
			Прервать;	
		КонецЕсли;
		Если ТекПериод < НачалоМесяца(МесяцНачисления) Тогда
			Продолжить;	
		КонецЕсли;
		Для каждого ТекПредприятие Из Предприятия Цикл
			ЗначениеПоля = "Нет";
			ТекСтру = Новый Структура("Предприятие, Период", ТекПредприятие.Значение, ТекПериод);
			НайденныеДанные = Выборка.НайтиСтроки(ТекСтру);
			Для каждого ТекДокументСтроки Из НайденныеДанные Цикл
				МассивСтруктур.Добавить(Новый Структура("Документ, Предприятие, Период", ТекДокументСтроки.Ссылка, ТекПредприятие.Значение, ТекПериод));
			КонецЦикла;
			Если Не НайденныеДанные.Количество() Тогда
				МассивСтруктур.Добавить(Новый Структура("Документ, Предприятие, Период", Неопределено, ТекПредприятие.Значение, ТекПериод));
			КонецЕсли;
		КонецЦикла;
		ИндексКолонки = ИндексКолонки + 1;
	КонецЦикла;
	
	Возврат МассивСтруктур;
	
КонецФункции

&НаСервере
Процедура ПерепровестиСоздатьДокумент(ПараметрыСоздания)
	
	Если ВариантРаспределенияЗатрат = Перечисления.сабВариантыРаспределенияЗатратЗакрытия.ПоКоличествуПроизводства Тогда
		ИмяКоманды = "НоменклатураЗаполнитьПродукцию";
	ИначеЕсли ВариантРаспределенияЗатрат = Перечисления.сабВариантыРаспределенияЗатратЗакрытия.ПоСуммеПрямыхЗатрат Тогда
		ИмяКоманды = "НоменклатураЗаполнитьПродукциюСумма";
	Иначе	
		ИмяКоманды = "НоменклатураЗаполнитьПродукциюВыручка";
	КонецЕсли;
	ЗаголовокСубконто3 = "";
	
	Если ПараметрыСоздания.Документ = Неопределено Тогда
		ТекОб = Документы.УЧ_ЗакрытиеПериода.СоздатьДокумент();
		ТекОб.Дата = КонецМесяца(ПараметрыСоздания.Период);
		ЗаполнитьЗначенияСвойств(ТекОб, ЭтаФорма);
		ЗаполнитьЗначенияСвойств(ТекОб, ПараметрыСоздания);
		
		Документы.УЧ_ЗакрытиеПериода.ЗаполнитьПродукцию(ИмяКоманды, ТекОб.Предприятие, ТекОб.Дата, ТекОб.Номенклатура, ЗаголовокСубконто3);
		ТекОб.Записать(РежимЗаписиДокумента.Проведение);
	Иначе
		ТекОб = ПараметрыСоздания.Документ.ПолучитьОбъект();
		Если ПерезаполнитьСуществующие Тогда
			ЗаполнитьЗначенияСвойств(ТекОб, ПараметрыСоздания);
			Документы.УЧ_ЗакрытиеПериода.ЗаполнитьПродукцию(ИмяКоманды, ТекОб.Предприятие, ТекОб.Дата, ТекОб.Номенклатура, ЗаголовокСубконто3);
		КонецЕсли;
		ТекОб.ЗаблокироватьИзмененияДокументов = ЗаблокироватьИзмененияДокументов;
		ТекОб.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	
	Период1 = Новый СтандартныйПериод;
	Период1.ДатаНачала = НачалоМесяца(ТекОб.Дата);
	Период1.ДатаОкончания = КонецМесяца(ТекОб.Дата);
	
	Справочники.сабФинансовыеПоказатели.ОбновитьНаСервере(Справочники.СценарииПланирования.СценарийФакт(), Период1, ТекОб.Предприятие);

КонецПроцедуры

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	РасчитатьЗаголовки();
КонецПроцедуры

&НаКлиенте
Процедура Предприятие1ПриИзменении(Элемент)
	Предприятия.Очистить();
	Предприятия.Добавить(Предприятие);
КонецПроцедуры

&НаКлиенте
Процедура ФинансовыеПоказатели(Команда)
	ТекФорма = ПолучитьФорму("Справочник.сабФинансовыеПоказатели.ФормаСписка");
	ТекФорма.Предприятие = Предприятие;
	ТекФорма.Открыть();
КонецПроцедуры

 &НаКлиенте
Процедура ВыполнитьПерепроведениеДокументовТовароучета(ПараметрыПериода)
	
	Обработ = ПолучитьДокументыТовароучета(ПараметрыПериода);
	счСтроки = 0;
	ВремяНачала = ТекущаяДата();   
	ЧислоСтрок  = Обработ.Количество();
	Продолжение = Истина;
	
	Для каждого ТекОбр Из Обработ Цикл
		
		ТекущаяСкорость = ТекущаяДата();
		счСтроки = счСтроки + 1;
		СкоростьЗагрузки = ?(ТекущаяДата() - ВремяНачала = 0, 0, Окр(счСтроки / (ТекущаяДата() - ВремяНачала), 2));
		ОсталосьВремени = Окр((ТекущаяДата() - ВремяНачала) / счСтроки * (ЧислоСтрок - счСтроки) / 60, 2);
		
		Если счСтроки / 100 = Окр(счСтроки / 100, 0) ИЛИ СкоростьЗагрузки < 1 ИЛИ ЧислоСтрок < 100 ИЛИ СкоростьЗагрузки < 5 Тогда
			СостояниеПроведенияДокументовТовароучета = счСтроки / ЧислоСтрок * 100;
			НадписьСостоянияТоваруучета = "Перепроведение документов... Осталось " + Строка(ОсталосьВремени) + " мин." + "Документ: " +  Строка(ТекОбр.Ссылка);
		КонецЕсли;
		
		ПоследнийДокумент = ТекОбр.Ссылка;
		ПерепровестиДокументТовароучета(ТекОбр, Ложь, Ложь, Ложь, Ложь, Истина, Истина);
		
		//Если ТекОбр.Свойство("ТекстОшибки") И НЕ НеКонтролироватьЗаполнениеДокумента Тогда
		//	Сообщить(ТекОбр.ТекстОшибки + " " + Строка(ТекОбр.Ссылка));
		//	Прервать;		
		//КонецЕсли;
		
		//Если ТекОбр.Свойство("НехваткаОстатков") И ПрерыватьПриУходеВМинус Тогда
		//	Сообщить("Прервано по причине нехватки остатков " + Строка(ТекОбр.Ссылка));
		//	Прервать;		
		//КонецЕсли;
		
		ТекущаяСкорость = ТекущаяДата() - ТекущаяСкорость;
		
		ОбработкаПрерыванияПользователя();
		
	КонецЦикла;
	
	НадписьСостоянияТоваруучета = "Перепроведение документов товароучета выполнено.";
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДокументыТовароучета(ПараметрыПериода)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УчетныйОбороты.Регистратор КАК Ссылка,
	               |	УчетныйОбороты.Регистратор.Дата КАК Дата,
	               |	УчетныйОбороты.Регистратор.Номер КАК РегистраторНомер
	               |ПОМЕСТИТЬ РегистраторыУЧ
	               |ИЗ
	               |	РегистрБухгалтерии.Учетный.Обороты(
	               |			&Дата,
	               |			&Дата1,
	               |			Регистратор,
	               |			Счет В ИЕРАРХИИ (&Счет)
	               |				ИЛИ Счет В ИЕРАРХИИ (&ДенСчета),
	               |			,
	               |			ВЫБОР
	               |					КОГДА ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) В (&Подразделение)
	               |						ТОГДА ИСТИНА
	               |					ИНАЧЕ Подразделение В ИЕРАРХИИ (&Подразделение)
	               |				КОНЕЦ
	               |				И ВЫБОР
	               |					КОГДА ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) В (&Номенклатура)
	               |						ТОГДА ИСТИНА
	               |					ИНАЧЕ Субконто1 В ИЕРАРХИИ (&Номенклатура)
	               |				КОНЕЦ
	               |				И СценарийПлана = &СценарийФакт
	               |				И Предприятия В (&Предприятия),
	               |			,
	               |			) КАК УчетныйОбороты
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА &ВсеТипы
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ВЫБОР
	               |					КОГДА ТИП(Документ.УЧ_ПеремещениеТоваров) В (&ТипыДокументов)
	               |						ТОГДА НЕ ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.УЧ_ПеремещениеТоваров)
	               |								И ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) В (&ТипыДокументов)
	               |					ИНАЧЕ ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) В (&ТипыДокументов)
	               |				КОНЕЦ
	               |		КОНЕЦ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	УчетныйОбороты.Регистратор,
	               |	УчетныйОбороты.Регистратор.Дата,
	               |	УчетныйОбороты.Регистратор.Номер
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УЧ_Реализация.Ссылка КАК Ссылка,
	               |	УЧ_Реализация.Дата КАК Дата,
	               |	УЧ_Реализация.Номер КАК Номер
	               |ПОМЕСТИТЬ Регистраторы
	               |ИЗ
	               |	Документ.УЧ_Реализация КАК УЧ_Реализация
	               |ГДЕ
	               |	УЧ_Реализация.Проведен = ИСТИНА
	               |	И УЧ_Реализация.Дата МЕЖДУ &Дата И &Дата1
	               |	И (&ВсеТипы = ИСТИНА
	               |			ИЛИ ТИП(Документ.УЧ_Реализация) В (&ТипыДокументов))
	               |	И ВЫРАЗИТЬ(УЧ_Реализация.Товары.Номенклатура КАК Справочник.Номенклатура).Счет10 В ИЕРАРХИИ (&Счет)
	               |	И ВЫБОР
	               |			КОГДА ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) В (&Подразделение)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ УЧ_Реализация.Подразделение В ИЕРАРХИИ (&Подразделение)
	               |		КОНЕЦ
	               |	И ВЫБОР
	               |			КОГДА ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) В (&Номенклатура)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЛОЖЬ
	               |		КОНЕЦ
	               |	И НЕ УЧ_Реализация.Ссылка В
	               |				(ВЫБРАТЬ
	               |					РегистраторыУЧ.Ссылка
	               |				ИЗ
	               |					РегистраторыУЧ КАК РегистраторыУЧ)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	УЧ_ВыпускПродукции.Ссылка,
	               |	УЧ_ВыпускПродукции.Дата,
	               |	УЧ_ВыпускПродукции.Номер
	               |ИЗ
	               |	Документ.УЧ_ВыпускПродукции КАК УЧ_ВыпускПродукции
	               |ГДЕ
	               |	УЧ_ВыпускПродукции.Проведен = ИСТИНА
	               |	И УЧ_ВыпускПродукции.Дата МЕЖДУ &Дата И &Дата1
	               |	И (&ВсеТипы = ИСТИНА
	               |			ИЛИ ТИП(Документ.УЧ_ВыпускПродукции) В (&ТипыДокументов))
	               |	И (УЧ_ВыпускПродукции.ТабличнаяЧасть.Номенклатура.Счет10 В ИЕРАРХИИ (&Счет)
	               |			ИЛИ УЧ_ВыпускПродукции.Материалы.Материал.Счет10 В ИЕРАРХИИ (&Счет))
	               |	И ВЫБОР
	               |			КОГДА ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) В (&Подразделение)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ УЧ_ВыпускПродукции.Подразделение В ИЕРАРХИИ (&Подразделение)
	               |		КОНЕЦ
	               |	И ВЫБОР
	               |			КОГДА ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) В (&Номенклатура)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЛОЖЬ
	               |		КОНЕЦ
	               |	И НЕ УЧ_ВыпускПродукции.Ссылка В
	               |				(ВЫБРАТЬ
	               |					РегистраторыУЧ.Ссылка
	               |				ИЗ
	               |					РегистраторыУЧ КАК РегистраторыУЧ)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	УЧ_ПеремещениеТоваров.Ссылка,
	               |	УЧ_ПеремещениеТоваров.Дата,
	               |	УЧ_ПеремещениеТоваров.Номер
	               |ИЗ
	               |	Документ.УЧ_ПеремещениеТоваров КАК УЧ_ПеремещениеТоваров
	               |ГДЕ
	               |	УЧ_ПеремещениеТоваров.Проведен = ИСТИНА
	               |	И УЧ_ПеремещениеТоваров.Дата МЕЖДУ &Дата И &Дата1
	               |	И (&ВсеТипы = ИСТИНА
	               |			ИЛИ ТИП(Документ.УЧ_ПеремещениеТоваров) В (&ТипыДокументов))
	               |	И УЧ_ПеремещениеТоваров.ТабличнаяЧасть.Номенклатура.Счет10 В ИЕРАРХИИ(&Счет)
	               |	И ВЫБОР
	               |			КОГДА ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) В (&Подразделение)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ВЫБОР
	               |					КОГДА УЧ_ПеремещениеТоваров.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыПеремещений.ПоступлениеСОбособленногоПодразделения)
	               |						ТОГДА УЧ_ПеремещениеТоваров.ПодразделениеПолучатель В ИЕРАРХИИ (&Подразделение)
	               |					ИНАЧЕ УЧ_ПеремещениеТоваров.Подразделение В ИЕРАРХИИ (&Подразделение)
	               |				КОНЕЦ
	               |		КОНЕЦ
	               |	И ВЫБОР
	               |			КОГДА ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) В (&Номенклатура)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЛОЖЬ
	               |		КОНЕЦ
	               |	И НЕ УЧ_ПеремещениеТоваров.Ссылка В
	               |				(ВЫБРАТЬ
	               |					РегистраторыУЧ.Ссылка
	               |				ИЗ
	               |					РегистраторыУЧ КАК РегистраторыУЧ)
	               |	И (&ВсеТипы = ИСТИНА
	               |			ИЛИ ВЫБОР
	               |				КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПеремещений.ПустаяСсылка) В (&ВидОперации)
	               |					ТОГДА ИСТИНА
	               |				ИНАЧЕ УЧ_ПеремещениеТоваров.ВидОперации В (&ВидОперации)
	               |			КОНЕЦ)
	               |	И (&ВсеТипы = ИСТИНА
	               |			ИЛИ ВЫБОР
	               |				КОГДА ""Все"" В (&ДопПризнакВнутр)
	               |					ТОГДА ИСТИНА
	               |				КОГДА ""Отправитель-получатель равны"" В (&ДопПризнакВнутр)
	               |					ТОГДА УЧ_ПеремещениеТоваров.Подразделение = УЧ_ПеремещениеТоваров.ПодразделениеПолучатель
	               |				КОГДА ""Отправитель-получатель НЕ равны"" В (&ДопПризнакВнутр)
	               |					ТОГДА НЕ УЧ_ПеремещениеТоваров.Подразделение = УЧ_ПеремещениеТоваров.ПодразделениеПолучатель
	               |				ИНАЧЕ ИСТИНА
	               |			КОНЕЦ)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	РегистраторыУЧ.Ссылка,
	               |	РегистраторыУЧ.Дата,
	               |	РегистраторыУЧ.РегистраторНомер
	               |ИЗ
	               |	РегистраторыУЧ КАК РегистраторыУЧ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Регистраторы.Ссылка КАК Ссылка,
	               |	Регистраторы.Дата КАК Дата,
	               |	Регистраторы.Номер КАК Номер
	               |ИЗ
	               |	Регистраторы КАК Регистраторы
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Регистраторы.Ссылка,
	               |	Регистраторы.Дата,
	               |	Регистраторы.Номер
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Регистраторы.Ссылка.МоментВремени,
	               |	Дата,
	               |	Номер
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	СчетаУчета = Новый Массив;
	СчетаУчета.Добавить(ПланыСчетов.Учетный.Счет41());
	СчетаУчета.Добавить(ПланыСчетов.Учетный.Счет43());
	СчетаУчета.Добавить(ПланыСчетов.Учетный.Счет10());
	СчетаУчета.Добавить(ПланыСчетов.Учетный.Счет45());

	Запрос.УстановитьПараметр("Дата", НачалоМесяца(ПараметрыПериода.Период));
	Запрос.УстановитьПараметр("Дата1", КонецМесяца(ПараметрыПериода.Период));
	Запрос.УстановитьПараметр("Счет", СчетаУчета);
	Запрос.УстановитьПараметр("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	Запрос.УстановитьПараметр("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВсеТипы", Истина);
	Запрос.УстановитьПараметр("ТипыДокументов", Новый Массив);
	Запрос.УстановитьПараметр("ДопПризнакВнутр", Новый Массив);
	Запрос.УстановитьПараметр("СценарийФакт", Справочники.СценарииПланирования.СценарийФакт());
	Запрос.УстановитьПараметр("Предприятия", Предприятия.ВыгрузитьЗначения());
	
	//Если НеПерепроводитьДвиженияДС Тогда
	//	Запрос.УстановитьПараметр("ДенСчета", Неопределено);
	//Иначе
		ДенСчета = Новый Массив;
		ДенСчета.Добавить(ПланыСчетов.Учетный.Счет50());
		ДенСчета.Добавить(ПланыСчетов.Учетный.Счет51());
		ДенСчета.Добавить(ПланыСчетов.Учетный.Счет5501());
		Запрос.УстановитьПараметр("ДенСчета", ДенСчета);
	//КонецЕсли;
	
	МассивВидовОпераций = Новый Массив;
	//Для каждого ТекСтрока Из СписокДоков Цикл
	//	Если ТекСтрока.Значение = Тип("ДокументСсылка.УЧ_ПеремещениеТоваров") Тогда
	//		Если Не ЗначениеЗаполнено(ТекСтрока.ВидОперации) Тогда
	//			МассивВидовОпераций.Добавить(Перечисления.ВидыПеремещений.ПустаяСсылка());
	//		Иначе
	//			МассивВидовОпераций.Добавить(ТекСтрока.ВидОперации);			
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;
	Запрос.УстановитьПараметр("ВидОперации", МассивВидовОпераций);
	
	
	Результат = Запрос.Выполнить();
	
	Массив = Новый Массив;
	//Сообщить(Результат.Выгрузить().Количество());
	//Возврат Массив;
	Выборка = Результат.Выгрузить();
	Для каждого ТекСТрока Из Выборка Цикл
		Массив.Добавить(Новый Структура("Ссылка, Значение, НеКонтролироватьОтрицательныеОстатки", ТекСТрока.Ссылка, Истина));
		
	КонецЦикла;
	
	Возврат Массив;
	
	//Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	
КонецФункции

&НаСервере
Процедура ПерепровестиДокументТовароучета(Объект, ТолькоЗапись, ПеревинутьВремяВВДокументах, НовоеВремяДокументов, НовоеВремяДокументовМин, НеКонтролироватьОтрицательныеОстатки, НеКонтролироватьЗаполнениеДокумента)
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.УЧ_ЗакрытиеПериода") Тогда
		Возврат;
	КонецЕсли;
	
	Об = Объект.Ссылка.ПолучитьОбъект();
	
	//Если ПеревинутьВремяВВДокументах Тогда
	//	Об.Дата = НачалоДня(Об.Дата) + НовоеВремяДокументов*60*60 + НовоеВремяДокументовМин*60;
	//	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.УЧ_ПеремещениеТоваров") И Объект.Ссылка.ВидОперации = Перечисления.ВидыПеремещений.ПоступлениеСОбособленногоПодразделения Тогда
	//		Об.Дата = Об.Дата + 1;		
	//	КонецЕсли;
	//КонецЕсли;
	
	Об.ДополнительныеСвойства.Вставить("НеКонтролироватьОтрицательныеОстатки", Истина);
	Успешно = Ложь;
	КолвоИтераций = 0;
	//Если Об.Проведен И НЕ ТолькоЗапись Тогда
	//Пока НЕ Успешно И КолвоИтераций < 5 Цикл
	Попытка
		//Если НЕ НеКонтролироватьЗаполнениеДокумента Тогда
		//	Если НЕ Об.ПроверитьЗаполнение() Тогда
		//		Объект.Вставить("ТекстОшибки", "Ошибка проверки заполнения");
		//		УстановитьПривилегированныйРежим(Ложь);
		//		Возврат;
		//	КонецЕсли;
		//КонецЕсли;			
		Об.Записать(РежимЗаписиДокумента.Проведение);
		Успешно = Истина;
	Исключение
		НоваяСтрока = ДокументыСОшибкамиПроведения.Добавить();
		НоваяСтрока.Документ = Объект.Ссылка;
		НоваяСтрока.Ошибка = ОписаниеОшибки();
		//Об.Записать(РежимЗаписиДокумента.Проведение);
		Если Об.ДополнительныеСвойства.Свойство("НехваткаОстатков") Тогда
			Объект.Вставить("НехваткаОстатков", "Нехватка остатков");
			УстановитьПривилегированныйРежим(Ложь);
			Возврат;
		Иначе
			Объект.Вставить("ТекстОшибки", "Ошибка проведения");
		КонецЕсли;
		КолвоИтераций = КолвоИтераций + 1;
	КонецПопытки;
	
	Если КолвоИтераций = 5 Тогда
		Объект.Вставить("ТекстОшибки", "Блокировка записи");		
	КонецЕсли;
	//Иначе
	//	Об.Записать();	
	//КонецЕсли;
	//УстановитьМонопольныйРежим(Ложь);	
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерепроводитьДокументыТовародвиженийПриИзменении(Элемент)
	Элементы.СостояниеПроведенияДокументовТовароучета.Видимость = ПерепроводитьДокументыТовародвижений;
	Элементы.НадписьСостоянияТоваруучета.Видимость = ПерепроводитьДокументыТовародвижений;
КонецПроцедуры

&НаКлиенте
Процедура ДокументыСОшибкамиПроведения1Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ДокументыСОшибкамиПроведения1Документ" Тогда
		ТекСтрока = Элементы.ДокументыСОшибкамиПроведения1.ТекущаяСтрока;
		ПоказатьЗначение(Неопределено, Элементы.ДокументыСОшибкамиПроведения1.ДанныеСтроки(ТекСтрока).Документ);	
	КонецЕсли;
КонецПроцедуры


