
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекстЗапроса = Список.ТекстЗапроса;
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	Для каждого ТекПользователь Из ПараметрыСеанса.ДоступныеПользователи Цикл
		ДоступныеПользователи.Добавить(ТекПользователь);
	КонецЦикла; 
	ЭтоАдминистратор = БюджетныйНаСервере.РольАдминаДоступнаСервер();
	
	
	//для дин списка обращений
	ТекПП = БюджетныйНаСервере.ПолучитьПредприятия();
	
	РеквизитыПользователя = БюджетныйНаСервере.ВернутьРеквизиты(ПараметрыСеанса.ТекущийПользователь, "ДоступныПредприятияИзСписка, ОграничениеПодразделений, ВидимостьПоСогласованию");  
	
	//Добавим Пользователю БОБ возможность видеть заявки пользователя КСА
	МассивПользователей = БПСервер.ПолучитьМассивПользователей();
	//Если МассивПользователей.Найти(Справочники.Пользователи.НайтиПоНаименованию("БОБ")) <> неопределено Тогда 
	//	МассивПользователей.Добавить(Справочники.Пользователи.НайтиПоНаименованию("КСА"));
	//КонецЕсли;
	
	РабочиеТочки = Новый Массив;
	РабочиеТочки.Добавить(БизнесПроцессы.ЗаявкиАдминистратору.ТочкиМаршрута.Действие3);
	РабочиеТочки.Добавить(БизнесПроцессы.ЗаявкиАдминистратору.ТочкиМаршрута.Действие4);
	РабочиеТочки.Добавить(БизнесПроцессы.ЗаявкиАдминистратору.ТочкиМаршрута.Действие6);
	РабочиеТочки.Добавить(NULL);
	
	Список.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", МассивПользователей);
	//Список.Параметры.УстановитьЗначениеПараметра("ВсеПредприятия", НЕ РеквизитыПользователя.ДоступныПредприятияИзСписка И НЕ РеквизитыПользователя.ОграничитьНаправления);
	//Список.Параметры.УстановитьЗначениеПараметра("ДоступныеПредприятия", ТекПП);
	Список.Параметры.УстановитьЗначениеПараметра("ВсеЗаявки", БюджетныйНаСервере.РольАдминаДоступнаСервер());
	//Список.Параметры.УстановитьЗначениеПараметра("ДопСтатьи", ?(ПараметрыСеанса.ТекущийПользователь.ДоступныеСтатьи.Количество(), Истина, Ложь));
	//Список.Параметры.УстановитьЗначениеПараметра("ДоступныеСтатьиСырья", ПараметрыСеанса.ТекущийПользователь.ДоступныеСтатьи.ВыгрузитьКолонку("СтатьяДДС"));
	Список.Параметры.УстановитьЗначениеПараметра("ВсеОбращенияПользователя", ВсеОбращения);
	Список.Параметры.УстановитьЗначениеПараметра("РабочиеТочки", РабочиеТочки);
	Если РеквизитыПользователя.ВидимостьПоСогласованию И НЕ Параметры.Свойство("ТекПлатежка") Тогда
		//Элементы.Группа2.Видимость = Ложь;
		Список.Параметры.УстановитьЗначениеПараметра("Согласовано", Истина);
		//Список.Параметры.УстановитьЗначениеПараметра("ПринадлежностьПредприятию", Ложь ИЛИ РольДоступна("КоммерсантПредприятия"));
		Список.Параметры.УстановитьЗначениеПараметра("Оплачено", Истина);
		Список.Параметры.УстановитьЗначениеПараметра("Авторство", Истина);
		Список.Параметры.УстановитьЗначениеПараметра("Исполнено", Истина);
	Иначе
		Если Параметры.Свойство("ТекПлатежка") Тогда
			ТекПлатежка = Параметры.ТекПлатежка;
			//Элементы.Группа2.Видимость = Ложь;
		Иначе
			ТекПлатежка = Неопределено ;
		КонецЕсли;
		Список.Параметры.УстановитьЗначениеПараметра("Авторство", Истина);
		//Список.Параметры.УстановитьЗначениеПараметра("ПринадлежностьПредприятию", Истина);
		Список.Параметры.УстановитьЗначениеПараметра("Согласовано", Истина);
		Список.Параметры.УстановитьЗначениеПараметра("Оплачено", Истина);
		Список.Параметры.УстановитьЗначениеПараметра("Исполнено", Истина);
		Фильтр = "Нет фильтра";
	КонецЕсли;                       
	
	
	//для дерева объектов
	Элементы.ТекущиеУстановки.Видимость = Ложь;
	Если БюджетныйНаСервере.РольАдминаДоступнаСервер() Тогда
		Элементы.ТекущиеУстановки.Видимость = Истина;
		ЗаполнитьДерево();	
	КонецЕсли;
	
	//работа с хронометражем
	ХронометражСписок.Параметры.УстановитьЗначениеПараметра("ПоказатьВсе", Ложь);
	ХронометражСписок.Параметры.УстановитьЗначениеПараметра("Исполнители", МассивПользователей);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДерево()
	
	//неоптимально. перескакивает курсор
	Дерево.ПолучитьЭлементы().Очистить();
	ДеревоТЗ.Очистить();
	СписокОбращения.Очистить();
	СписокИзменения.Очистить();
	СписокУстановки.Очистить();
	СписокИнциденты.Очистить();
	
	ДеревоОбъект = Новый ДеревоЗначений;
	ДеревоОбъект.Колонки.Добавить("Имя");
	ДеревоОбъект.Колонки.Добавить("Синоним");
	ДеревоОбъект.Колонки.Добавить("Включить");
	ДеревоОбъект.Колонки.Добавить("КоличествоИзменений");
	ДеревоОбъект.Колонки.Добавить("КоличествоУстановок");
	ДеревоОбъект.Колонки.Добавить("КоличествоОбращений");
	ДеревоОбъект.Колонки.Добавить("КоличествоИнцидентов");
	ДеревоОбъект.Колонки.Добавить("Уровень");
	
	ОтметитьВыбранныеРанееОбъектыВДереве();
	
	
	ДобавитьСтрокиДереваПоИмениОбъекта("Документ", "ы", ДеревоОбъект);
	ДобавитьСтрокиДереваПоИмениОбъекта("Справочник", "и", ДеревоОбъект);
	ДобавитьСтрокиДереваПоИмениОбъекта("Роли", "", ДеревоОбъект);
	ДобавитьСтрокиДереваПоИмениОбъекта("ПланыСчетов", "", ДеревоОбъект);
	ДобавитьСтрокиДереваПоИмениОбъекта("Отчет", "ы", ДеревоОбъект);
	ДобавитьСтрокиДереваПоИмениОбъекта("Обработки", "", ДеревоОбъект);
	ДобавитьСтрокиДереваПоИмениОбъекта("БизнесПроцесс", "ы", ДеревоОбъект);
	ДобавитьСтрокиДереваПоИмениОбъекта("Задачи", "", ДеревоОбъект);
	
	
	ЗначениеВРеквизитФормы(ДеревоОбъект, "Дерево");
	
	
	
КонецПроцедуры

// Добавляет верхнюю строку и подчиненные строки в переданное дерево
//
&НаСервере
Процедура ДобавитьСтрокиДереваПоИмениОбъекта(СтрОбъект, ОкончаниеДляМножЧисла, ДеревоОбъект)
	
	ВерхняяСтрока			= ДеревоОбъект.Строки.Добавить();
	ВерхняяСтрока.Имя		= СтрОбъект;
	ВерхняяСтрока.Синоним	= СтрОбъект + ОкончаниеДляМножЧисла;
	ВерхняяСтрока.Уровень = 1;
	НижниеСтроки = ВерхняяСтрока.Строки;
	
	КоличОбр = 0;КоличИзм = 0;КоличУст = 0;КоличИнц = 0;
	
	Для Каждого ОбъектМетаданных Из Метаданные[ВерхняяСтрока.Синоним] Цикл
		
		СтрокиТЗ = ДеревоТЗ.НайтиСтроки(Новый Структура("Имя", СтрОбъект + "." + ОбъектМетаданных.Имя));
		Если СтрокиТЗ.Количество() Тогда
			НижняяСтрока		= НижниеСтроки.Добавить();
			НижняяСтрока.Синоним= ОбъектМетаданных.Синоним;
			ЗаполнитьЗначенияСвойств(НижняяСтрока, СтрокиТЗ[0]);
			НижняяСтрока.Имя	= СтрОбъект + "." + ОбъектМетаданных.Имя;
			КоличОбр = КоличОбр + СтрокиТЗ[0].КоличествоОбращений;
			КоличИзм = КоличИзм + СтрокиТЗ[0].КоличествоИзменений;
			КоличУст = КоличУст + СтрокиТЗ[0].КоличествоУстановок;
			КоличИнц = КоличИнц + СтрокиТЗ[0].КоличествоИнцидентов;
		КонецЕсли;
	КонецЦикла;
	
	ВерхняяСтрока.КоличествоОбращений = КоличОбр;
	ВерхняяСтрока.КоличествоУстановок = КоличУст;
	ВерхняяСтрока.КоличествоИзменений = КоличИзм;
	ВерхняяСтрока.КоличествоИнцидентов = КоличИнц;
КонецПроцедуры // ДобавитьСтрокиДереваПоИмениОбъекта

&НаСервере
Процедура ОтметитьВыбранныеРанееОбъектыВДереве(ТекИмя = Неопределено)
	//ОбновлятьДерево = (ТекИмя = Неопределено);
	
	//СписокОбращения.Очистить();
	//СписокИзменения.Очистить();
	//СписокУстановки.Очистить();
	//СписокИнциденты.Очистить();

	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Д_ОбращенияВТехПоддержку.Ссылка,
	|	Д_ОбращенияВТехПоддержку.ОбъектМетаданных КАК СтрокаОбращения,
	|	"""" КАК СтрокаИзменения,
	|	"""" КАК СтрокаУстановки,
	|	Д_ОбращенияВТехПоддержку.Дата,
	|	Д_ОбращенияВТехПоддержку.Номер,
	|	Д_ОбращенияВТехПоддержку.Примечания,
	|	Д_ОбращенияВТехПоддержку.ОтИмени,
	|	NULL КАК Значение,
	|	NULL КАК Ответственный,
	|	NULL КАК СтрокаИнцидентов
	|ИЗ
	|	Документ.Д_ОбращенияВТехПоддержку КАК Д_ОбращенияВТехПоддержку
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИзмененияВ1С.ГУИД,
	|	"""",
	|	ИзмененияВ1С.ОбъектМетаданных,
	|	"""",
	|	ИзмененияВ1С.Период,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ИзмененияВ1С.Изменение,
	|	NULL,
	|	NULL
	|ИЗ
	|	РегистрСведений.ИзмененияВ1С КАК ИзмененияВ1С
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Информация.ГУИД,
	|	"""",
	|	"""",
	|	Информация.ОбъектМетаданных,
	|	Информация.Период,
	|	NULL,
	|	NULL,
	|	NULL,
	|	Информация.Изменение,
	|	NULL,
	|	NULL
	|ИЗ
	|	РегистрСведений.Информация КАК Информация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ч_СообщенияЧата.ИДИнцидента,
	|	NULL,
	|	NULL,
	|	NULL,
	|	МИНИМУМ(Ч_СообщенияЧата.ДатаВремя),
	|	NULL,
	|	NULL,
	|	NULL,
	|	Ч_СообщенияЧата.ОписаниеИнцидента,
	|	Ч_СообщенияЧата.Ответственный,
	|	Ч_СообщенияЧата.ОбъектМетаданных
	|ИЗ
	|	РегистрСведений.Ч_СообщенияЧата КАК Ч_СообщенияЧата
	|ГДЕ
	|	Ч_СообщенияЧата.ИнцидентЗакрыт = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	Ч_СообщенияЧата.ИДИнцидента,
	|	Ч_СообщенияЧата.ОписаниеИнцидента,
	|	Ч_СообщенияЧата.ОбъектМетаданных,
	|	Ч_СообщенияЧата.Ответственный";
	
	Запрос.УстановитьПараметр("ТекИмя", ТекИмя);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		//обращения
		Если ЗначениеЗаполнено(Выборка.СтрокаОбращения) ИЛИ ЗначениеЗаполнено(Выборка.СтрокаИзменения) ИЛИ ЗначениеЗаполнено(Выборка.СтрокаУстановки)  ИЛИ ЗначениеЗаполнено(Выборка.СтрокаИнцидентов) Тогда
			
			Если ЗначениеЗаполнено(Выборка.СтрокаОбращения) Тогда
				НоваяСтрока = Выборка.СтрокаОбращения;
			ИначеЕсли ЗначениеЗаполнено(Выборка.СтрокаИзменения) Тогда 
				НоваяСтрока = Выборка.СтрокаИзменения;
			ИначеЕсли ЗначениеЗаполнено(Выборка.СтрокаУстановки) Тогда 
				НоваяСтрока = Выборка.СтрокаУстановки;
			ИначеЕсли ЗначениеЗаполнено(Выборка.СтрокаИнцидентов) Тогда 
				НоваяСтрока = Выборка.СтрокаИнцидентов;
			КонецЕсли;
			
			ПозицияРазделителя = Найти(НоваяСтрока , ";");
			Если ПозицияРазделителя <> 0 Тогда
				
				Пока ЗначениеЗаполнено(НоваяСтрока) Цикл
					НайденныйОбъект = Лев(НоваяСтрока, ПозицияРазделителя);
					Если Не ЗначениеЗаполнено(НайденныйОбъект) Тогда //если последний
						НайденныйОбъект = НоваяСтрока;					
					КонецЕсли;
					Если ЗначениеЗаполнено(Выборка.СтрокаОбращения) Тогда
						Отметить(СтрЗаменить(НайденныйОбъект, ";", ""), "КоличествоОбращений", Выборка);
					ИначеЕсли ЗначениеЗаполнено(Выборка.СтрокаИзменения) Тогда 
						Отметить(СтрЗаменить(НайденныйОбъект, ";", ""), "КоличествоИзменений", Выборка);
					ИначеЕсли ЗначениеЗаполнено(Выборка.СтрокаУстановки) Тогда 
						Отметить(СтрЗаменить(НайденныйОбъект, ";", ""), "КоличествоУстановок", Выборка);
					ИначеЕсли ЗначениеЗаполнено(Выборка.СтрокаИнцидентов) Тогда 
						Отметить(СтрЗаменить(НайденныйОбъект, ";", ""), "КоличествоИнцидентов", Выборка);
					КонецЕсли;
					НоваяСтрока = СтрЗаменить(НоваяСтрока, НайденныйОбъект, "");
					ПозицияРазделителя = Найти(НоваяСтрока, ";");
				КонецЦикла;
			Иначе
				Если ЗначениеЗаполнено(Выборка.СтрокаОбращения) Тогда
					Отметить(НоваяСтрока, "КоличествоОбращений", Выборка);
				ИначеЕсли ЗначениеЗаполнено(Выборка.СтрокаИзменения) Тогда 
					Отметить(НоваяСтрока, "КоличествоИзменений", Выборка);
				ИначеЕсли ЗначениеЗаполнено(Выборка.СтрокаУстановки) Тогда 
					Отметить(НоваяСтрока, "КоличествоУстановок", Выборка);
				ИначеЕсли ЗначениеЗаполнено(Выборка.СтрокаИнцидентов) Тогда 
					Отметить(НоваяСтрока, "КоличествоИнцидентов", Выборка);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	
	//СоздатьТекстHTML(ТекУстановкиHTML); 
	
КонецПроцедуры

&НаСервере
Процедура СоздатьТекстHTML(ТекУстановкиHTML, Имя)
	
	ТекУстановкиHTML = "<HTML><HEAD>
	|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type><LINK rel=stylesheet type=text/css href=""__STYLE__""><BASE href=""v8config://26d610bd-8712-4000-956d-0edbe58646d8/mdobject/idcf715f2f-493b-44cc-8c21-3424f7d402ea/8eb4fad1-1fa6-403e-970f-2c12dbb43e23"">
	|<META name=GENERATOR content=""MSHTML 11.00.9600.17041""></HEAD>
	|<BODY><font face=""Tahoma, Geneva, sans-serif""><span style=""font-size:12px"">";

	ОтобрУстановки = СписокУстановки.НайтиСтроки(Новый Структура("Имя", Имя));
	Если ОтобрУстановки.Количество() Тогда
		ТекУстановкиHTML = ТекУстановкиHTML + "<br><b>Установки 1С: (" + Строка(ОтобрУстановки.Количество()) + ")</b><br><table style=""width: 100%; font-size:12px""><tbody>";
		Для каждого ТекСтрока Из ОтобрУстановки Цикл
			ТекУстановкиHTML = ТекУстановкиHTML + "<tr><td style=""width: 15%; font-size:12px"">" + Формат(ТекСтрока.Дата, "ДФ=dd.MM.yy") + "</td><td>" + Строка(ТекСтрока.Значение) + "</td></tr>";
		КонецЦикла;
		ТекУстановкиHTML = ТекУстановкиHTML + "</tbody></table>";
	КонецЕсли;
	
	ОтобрИзменения = СписокИзменения.НайтиСтроки(Новый Структура("Имя", Имя));
	Если ОтобрИзменения.Количество() Тогда
		ТекУстановкиHTML = ТекУстановкиHTML + "<br><b>Изменения в 1С: (" + Строка(ОтобрИзменения.Количество()) + ")</b><br><table style=""width: 100%; font-size:12px""><tbody>";
		Для каждого ТекСтрока Из ОтобрИзменения Цикл
			ТекУстановкиHTML = ТекУстановкиHTML + "<tr><td style=""width: 15%; font-size:12px"">" + Формат(ТекСтрока.Дата, "ДФ=dd.MM.yy") + "</td><td>" + Строка(ТекСтрока.Значение) + "</td></tr>";
		КонецЦикла;
		ТекУстановкиHTML = ТекУстановкиHTML + "</tbody></table>";
	КонецЕсли;
	
	ОтобрСписокОбращения = СписокОбращения.НайтиСтроки(Новый Структура("Имя", Имя));
	Если ОтобрСписокОбращения.Количество() Тогда
		ТекУстановкиHTML = ТекУстановкиHTML + "<br><b>Обращения в ТП: (" + Строка(ОтобрСписокОбращения.Количество()) + ")</b><br><table style=""width: 100%; font-size:12px""><tbody>";
		Для каждого ТекСтрока Из ОтобрСписокОбращения Цикл
			ТекУстановкиHTML = ТекУстановкиHTML + "<tr><td style=""width: 15%; font-size:12px"">" + Формат(ТекСтрока.Дата, "ДФ=dd.MM.yy") + ", " + Строка(ТекСтрока.Номер) + "</td><td>" + Строка(ТекСтрока.Примечания) + "</td></tr>";
		КонецЦикла;
		ТекУстановкиHTML = ТекУстановкиHTML + "</tbody></table>";
	КонецЕсли;
	
	ОтобрСписокИнциденты = СписокИнциденты.НайтиСтроки(Новый Структура("Имя", Имя));
	Если ОтобрСписокИнциденты.Количество() Тогда
		ТекУстановкиHTML = ТекУстановкиHTML + "<br><b>Инциденты (Горячая линия): (" + Строка(ОтобрСписокИнциденты.Количество()) + ")</b><br><table style=""width: 100%; font-size:12px""><tbody>";
		Для каждого ТекСтрока Из ОтобрСписокИнциденты Цикл
			ТекУстановкиHTML = ТекУстановкиHTML + "<tr><td style=""width: 15%; font-size:12px"">" + Формат(ТекСтрока.Дата, "ДФ=dd.MM.yy") + "</td><td>" + Строка(ТекСтрока.Значение) + "</td></tr>";
		КонецЦикла;
		ТекУстановкиHTML = ТекУстановкиHTML + "</tbody></table>";
	КонецЕсли;

	
	
	
	//ТекУстановкиHTML = ТекУстановкиHTML + "<a name = ""forScroll""></a>";
	ТекУстановкиHTML = ТекУстановкиHTML + "</span></font></BODY></HTML>";


КонецПроцедуры
 

&НаСервере
Процедура Отметить(НайденныйОбъект, ИмяСтроки, Выборка)
	
	//Если ОбновлятьДерево Тогда
		
		СтрокаДерева = ДеревоТЗ.НайтиСтроки(Новый Структура("Имя", НайденныйОбъект));
		Если СтрокаДерева.Количество() Тогда
			СтрокаДерева[0][ИмяСтроки] =  СтрокаДерева[0][ИмяСтроки] + 1;
		Иначе
			НоваяСтрока = ДеревоТЗ.Добавить();
			НоваяСтрока.Имя = НайденныйОбъект; 	
			НоваяСтрока[ИмяСтроки] = 1;
		КонецЕсли;
	//КонецЕсли;
	
	Если ИмяСтроки = "КоличествоОбращений" Тогда
		НоваяСтрока = СписокОбращения.Добавить();
		НоваяСтрока.Имя = НайденныйОбъект;
		НоваяСтрока.Значение = Выборка.Ссылка;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка)
	ИначеЕсли ИмяСтроки = "КоличествоИзменений" Тогда
		НоваяСтрока = СписокИзменения.Добавить();
		НоваяСтрока.Имя = НайденныйОбъект;
		НоваяСтрока.Значение = Выборка.Ссылка;
		НоваяСтрока.Ссылка = Выборка.Ссылка;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка)
	ИначеЕсли ИмяСтроки = "КоличествоУстановок" Тогда
		НоваяСтрока = СписокУстановки.Добавить();
		НоваяСтрока.Имя = НайденныйОбъект;
		НоваяСтрока.Значение = Выборка.Ссылка;
		НоваяСтрока.Ссылка = Выборка.Ссылка;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка)
	ИначеЕсли ИмяСтроки = "КоличествоИнцидентов" Тогда
		НоваяСтрока = СписокИнциденты.Добавить();
		НоваяСтрока.Имя = НайденныйОбъект;
		НоваяСтрока.Значение = Выборка.Ссылка;
		НоваяСтрока.Ссылка = Выборка.Ссылка;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка)
		
	КонецЕсли;
	
КонецПроцедуры	



// Находит текущую строку в дереве для дальнейшего 
//
// Параметры:
//  ИмяСтроки      - Имя строки дерева значений
// 
&НаСервере
Процедура УстановитьПометки(ИмяСтроки)
	
	ДеревоОбъект = РеквизитФормыВЗначение("Дерево");
	
	ТекСтрока = ДеревоОбъект.Строки.Найти(ИмяСтроки, , Истина);
	
	УстановитьПометкиПодчиненных(ТекСтрока);
	
	ЗначениеВРеквизитФормы(ДеревоОбъект, "Дерево");
	
КонецПроцедуры // УстановитьПометкиПодчиненных()

// Устанавливает состояние пометки у подчиненных строк строки дерева значений
// в зависимости от пометки текущей строки
//
// Параметры:
//  ТекСтрока      - Строка дерева значений
// 
&НаСервере
Процедура УстановитьПометкиПодчиненных(ТекСтрока)
	
	Включить    = ТекСтрока.Включить;
	Подчиненные = ТекСтрока.Строки;
	
	Если Подчиненные.Количество() > 0 Тогда
		Для каждого Строка из Подчиненные Цикл
			Строка.Включить = Включить;
			УстановитьПометкиПодчиненных(Строка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // УстановитьПометкиПодчиненных()



&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//ОбновитьЧатПервыйЗапуск();
	//сабВнутреннийЧатСервер.ПрочитатьНовые(Неопределено,,Истина);
	//ПодключитьОбработчикОжидания("ОбновитьЧат", 15);
	ОбновитьКоличествоОбращений();
	ПодключитьОбработчикОжидания("ОбновитьКоличествоОбращений", 180);
	
	//Элементы.Дерево.Развернуть(ТекДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКоличествоОбращений()
	
	//ТекстЗапроса = ;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("РабочиеТочки", Список.Параметры.Элементы.Найти("РабочиеТочки").Значение);
	ПараметрыЗапроса.Вставить("ТекущийПользователь", Список.Параметры.Элементы.Найти("ТекущийПользователь").Значение);
	ПараметрыЗапроса.Вставить("ВсеЗаявки", Список.Параметры.Элементы.Найти("ВсеЗаявки").Значение);
			
	КоличествоТекОбращений = ОбновитьКоличествоОбращенийНаСервере(ТекстЗапроса, ПараметрыЗапроса);	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновитьКоличествоОбращенийНаСервере(ТекстЗапроса, ПараметрыЗапроса)
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("РабочиеТочки", ПараметрыЗапроса.РабочиеТочки);
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыЗапроса.ТекущийПользователь);
	//Запрос.УстановитьПараметр("ВсеПредприятия", Ложь);
	//Запрос.УстановитьПараметр("ДоступныеПредприятия", Новый Массив);
	Запрос.УстановитьПараметр("ВсеЗаявки", ПараметрыЗапроса.ВсеЗаявки);
	//Запрос.УстановитьПараметр("ДопСтатьи", Ложь);
	//Запрос.УстановитьПараметр("ДоступныеСтатьиСырья", Новый Массив);
	Запрос.УстановитьПараметр("ВсеОбращенияПользователя", Ложь);
	Запрос.УстановитьПараметр("Авторство", Истина);
	//Запрос.УстановитьПараметр("ПринадлежностьПредприятию", Истина);
	Запрос.УстановитьПараметр("Согласовано", Истина);
	Запрос.УстановитьПараметр("Оплачено", Истина);
	Запрос.УстановитьПараметр("Исполнено", Истина);
	Результат = Запрос.Выполнить();
	Возврат Результат.Выбрать().Количество();
	
	
	
	
КонецФункции // ()




&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбновитьСписокОбращений" Тогда
		Элементы.Список.Обновить();	
	КонецЕсли;	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КоличествоНовыхСообщенийЧатаТехподдержки()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Ч_СообщенияЧата.Текст,
	|	Ч_СообщенияЧата.ДатаВремя,
	|	Ч_СообщенияЧата.ИдентификаторСообщения,
	|	Ч_СообщенияЧата.Автор,
	|	Ч_СообщенияЧата.Кому
	|ИЗ
	|	РегистрСведений.Ч_СообщенияЧата КАК Ч_СообщенияЧата
	|ГДЕ
	|	Ч_СообщенияЧата.СообщениеТехподдержки = ИСТИНА
	|	И Ч_СообщенияЧата.Кому = &Кому
	|	И Ч_СообщенияЧата.Прочитано = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Кому", ?(БюджетныйНаСервере.РольАдминаДоступнаСервер(), Справочники.Пользователи.Администратор,ПараметрыСеанса.ТекущийПользователь));
	//Запрос.УстановитьПараметр("ЭтоАдмин", );
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Возврат Выборка.Количество();
	
	
КонецФункции // ()

#Область РаботаСТехподдержкой
	

&НаКлиенте
Процедура ТехПоддержка(Команда)
	ОткрытьФорму("Документ.Д_ОбращенияВТехПоддержку.ФормаОбъекта");
КонецПроцедуры

&НаКлиенте
Процедура НовостиHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	БюджетныйНаКлиенте.ПриНажатииHTML(Элемент, ДанныеСобытия, СтандартнаяОбработка);
	Если Лев(ДанныеСобытия.Href, 9) = "v8object:" Тогда
		НомерНовости = Сред(ДанныеСобытия.Href, 10);
		Новость = НайтиНовостьПоКоду(НомерНовости);
		ОткрытьФорму("Документ.Новости.Форма.ФормаКомментариев", Новый Структура("Ключ", Новость));
	ИначеЕсли Лев(ДанныеСобытия.Href, 6) = "v8doc:" Тогда
		//
	//ИначеЕсли Лев(ДанныеСобытия.Href, 6) = "v8job:" Тогда
	//	УИДНовости = Сред(ДанныеСобытия.Href, 7);
	//	Меню = Новый СписокЗначений;
	//	Меню.Добавить("Создать новый инцидент");
	//	Меню.Добавить("Добавить в предыдущий инцидент");
	//	Меню.Добавить("Игнорировать");
	//	ТекЗнач = ВыбратьИзМеню(Меню);
	//	Если НЕ ТекЗнач = Неопределено Тогда
	//		Если ТекЗнач.Значение = "Создать новый инцидент" Тогда
	//			ТекИнцидентСтруктура = ОткрытьФормуМодально("Документ.Д_ОбращенияВТехПоддержку.Форма.ФормаПараметровИнцидента");
	//			Если НЕ ТекИнцидентСтруктура = Неопределено Тогда
	//				ТекИнцидентСтруктура.Вставить("УИДНовости", УИДНовости);
	//				СоздатьНовыйИнцидент(ТекИнцидентСтруктура);
	//				ОбновитьЧат();
	//			КонецЕсли;
	//		Иначе
	//			ТекИнцидентСтруктура = Новый Структура;
	//			ТекИнцидентСтруктура.Вставить("УИДНовости", УИДНовости);
	//			ТекИнцидентСтруктура.Вставить("Игнорировать", ТекЗнач.Значение = "Игнорировать");
	//			ДобавитьВПРедыдущийЗакрыть(ТекИнцидентСтруктура, Элементы.ПользователиЧат.ТекущиеДанные.Ссылка);	
	//		КонецЕсли;	
	//	КонецЕсли;
	//	ОбновитьЧат();
	//ИначеЕсли Лев(ДанныеСобытия.Href, 11) = "v8jobclose:" Тогда
	//	УИДНовости = Сред(ДанныеСобытия.Href, 12);
	//	ТекИнцидентСтруктура = Новый Структура;
	//	ТекИнцидентСтруктура.Вставить("УИДНовости", УИДНовости);
	//	ЗакрытьИнцидент(ТекИнцидентСтруктура, Элементы.ПользователиЧат.ТекущиеДанные.Ссылка);		
	//	ОбновитьЧат();
	//ИначеЕсли Лев(ДанныеСобытия.Href, 9) = "v8tppage:" Тогда
	//	НомерСтраницы = Сред(ДанныеСобытия.Href, 10);
	//	ОбновитьЧат();
	ИначеЕсли Найти(ДанныеСобытия.Href, "e1cib") Или Найти(ДанныеСобытия.Href, "http://") Тогда //остальные клики
		ПерейтиПоНавигационнойСсылке(Прав(ДанныеСобытия.Href, СтрДлина(ДанныеСобытия.Href) - Найти(ДанныеСобытия.Href, "e1cib") + 1));
	КонецЕсли;	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиНовостьПоКоду(НомерНовости)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Новости.Ссылка
	|ИЗ
	|	Документ.Новости КАК Новости
	|ГДЕ
	|	Новости.Номер = &Номер";
	
	Запрос.УстановитьПараметр("Номер", НомерНовости);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Возврат Выборка.Ссылка;	
		
	КонецЦикла;
	
	
	
КонецФункции // ()

&НаКлиенте
Процедура ЗапуститьAA(Команда)
	
	КаталогВременныхФайлов = КаталогВременныхФайлов();
	
	ИмяФайла = КаталогВременныхФайлов + "AA.exe";
	
	ВыбФайл = Новый Файл(ИмяФайла);
	Если ВыбФайл.Существует() Тогда
		ЗапуститьПриложение(ИмяФайла);
		//WSH = Новый COMobject("wscript.shell");
		//а = WSH.Exec(ИмяФайла);
	Иначе
		АдресХранилища = ПоместитьВХранилище();
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресХранилища);
		ДвоичныеДанные.Записать(ИмяФайла);
		Пока Не ВыбФайл.Существует() Цикл
			ОбработкаПрерыванияПользователя();
		КонецЦикла;
		
		Если ВыбФайл.Существует() Тогда
			ЗапуститьПриложение(ИмяФайла);
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не удалось запустить AmmyAdmin";
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьВХранилище()
	
	Данные = Новый ДвоичныеДанные("D:\AmmyAdmin\AA.exe");
	
	Возврат ПоместитьВоВременноеХранилище(Данные);
	
КонецФункции

&НаКлиенте
Процедура ВсеОбращенияПриИзменении(Элемент)
	Список.Параметры.УстановитьЗначениеПараметра("ВсеОбращенияПользователя", ВсеОбращения);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриАктивизацииСтроки(Элемент)
	Если Не Элементы.Дерево.ТекущиеДанные = Неопределено Тогда
		//Элементы.СписокОбращения.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("Имя", Элементы.Дерево.ТекущиеДанные.Имя)); 
		//Элементы.СписокИзменения.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("Имя", Элементы.Дерево.ТекущиеДанные.Имя)); 
		//Элементы.СписокУстановки.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("Имя", Элементы.Дерево.ТекущиеДанные.Имя));
		//Элементы.СписокИнциденты.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("Имя", Элементы.Дерево.ТекущиеДанные.Имя));
		СоздатьТекстHTML(ТекУстановкиHTML, Элементы.Дерево.ТекущиеДанные.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокУстановкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	Если Не Копирование И НЕ Элементы.Дерево.ТекущиеДанные.Уровень = 1 Тогда
		ТекФорма = ПолучитьФорму("РегистрСведений.Информация.ФормаЗаписи");
		ТекФорма.Запись.ОбъектМетаданных = Элементы.Дерево.ТекущиеДанные.Имя;
		ТекФорма.Открыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокИзмененияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	Если Не Копирование И НЕ Элементы.Дерево.ТекущиеДанные.Уровень = 1 Тогда
		ТекФорма = ПолучитьФорму("РегистрСведений.ИзмененияВ1С.ФормаЗаписи");
		ТекФорма.Запись.ОбъектМетаданных = Элементы.Дерево.ТекущиеДанные.Имя;
		ТекФорма.Открыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокОбращенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	Если НЕ Элементы.Дерево.ТекущиеДанные.Уровень = 1 Тогда
		Если Не Копирование Тогда
			ТекФорма = ПолучитьФорму("Документ.Д_ОбращенияВТехПоддержку.ФормаОбъекта");
			ТекФорма.Объект.ОбъектМетаданных = Элементы.Дерево.ТекущиеДанные.Имя;
			ТекФорма.Открыть();
		Иначе
			ТекФорма = ПолучитьФорму("Документ.Д_ОбращенияВТехПоддержку.ФормаОбъекта", Новый Структура("Основание", Элементы.СписокОбращения.ТекущиеДанные.Ссылка));
			ТекФорма.Открыть();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьУстановки(Команда)
	ЗаполнитьДерево();
	НачальныйУровень = Дерево.ПолучитьЭлементы();
	Для каждого ТекЗнач Из НачальныйУровень Цикл
		Элементы.Дерево.Развернуть(ТекЗнач.ПолучитьИдентификатор(), Истина);
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура СписокУстановкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	текОбъект    =    Элементы.СписокУстановки.ТекущаяСтрока;
	Если текОбъект    <>    Неопределено Тогда
		ЗначениеКлюча    =    Новый Структура("Период", Элементы.СписокУстановки.ТекущиеДанные.Дата);
		ПочемутоМассив    =    Новый Массив;
		ПочемутоМассив.Добавить( ЗначениеКлюча );
		КлючЗаписи        =    Новый("РегистрСведенийКлючЗаписи.Информация", ПочемутоМассив);
		ОткрытьФорму( "РегистрСведений.Информация.ФормаЗаписи",
		Новый Структура("Ключ", КлючЗаписи) );
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокИзмененияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	текОбъект    =    Элементы.СписокУстановки.ТекущаяСтрока;
	Если текОбъект    <>    Неопределено Тогда
		ЗначениеКлюча    =    Новый Структура("Период", Элементы.СписокИзменения.ТекущиеДанные.Дата);
		ПочемутоМассив    =    Новый Массив;
		ПочемутоМассив.Добавить( ЗначениеКлюча );
		КлючЗаписи        =    Новый("РегистрСведенийКлючЗаписи.ИзмененияВ1С", ПочемутоМассив);
		ОткрытьФорму( "РегистрСведений.ИзмененияВ1С.ФормаЗаписи",
		Новый Структура("Ключ", КлючЗаписи) );
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбращенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьЗначение(Элементы.СписокОбращения.ТекущиеДанные.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура Добавить(Команда)
	СписМеню = Новый СписокЗначений;
	СписМеню.Добавить("Установка 1С");
	СписМеню.Добавить("Изменение в 1С");
	СписМеню.Добавить("Обращение в ТП 1С");
	//СписМеню.Добавить("Обращение в ТП 1С");
	ТекЭл = ВыбратьИзМеню(СписМеню);
	Если Не ТекЭл = Неопределено Тогда
		Если ТекЭл.Значение = "Установка 1С" Тогда
			ТекФорма = ПолучитьФорму("РегистрСведений.Информация.ФормаЗаписи");
			ТекФорма.Запись.ОбъектМетаданных = Элементы.Дерево.ТекущиеДанные.Имя;
			ТекФорма.Открыть();
		ИначеЕсли ТекЭл.Значение = "Изменение в 1С" Тогда
			ТекФорма = ПолучитьФорму("РегистрСведений.ИзмененияВ1С.ФормаЗаписи");
			ТекФорма.Запись.ОбъектМетаданных = Элементы.Дерево.ТекущиеДанные.Имя;
			ТекФорма.Открыть();
		ИначеЕсли ТекЭл.Значение = "Обращение в ТП 1С" Тогда
			ТекФорма = ПолучитьФорму("Документ.Д_ОбращенияВТехПоддержку.ФормаОбъекта");
			ТекФорма.Объект.ОбъектМетаданных = Элементы.Дерево.ТекущиеДанные.Имя;
			ТекФорма.Открыть();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОткрытьВОтдельномОкнеНаСервере(ТекКонтроль)
	
	НаборЗаписейДопСвойства = РегистрыСведений.ДополнительныеСвойстваПользователя.СоздатьНаборЗаписей();
	НаборЗаписейДопСвойства.Отбор.Пользователь.Установить(ПараметрыСеанса.ТекущийПользователь);
	НаборЗаписейДопСвойства.Прочитать();
	Для Каждого Запись Из НаборЗаписейДопСвойства Цикл
		Запись.РежимГорячейЛинии = Истина;
	КонецЦикла;
	НаборЗаписейДопСвойства.Записать();
		
	ТекПользователь = ПараметрыСеанса.ТекущийПользователь.ПолучитьОбъект();
	ТекКонтроль = ТекПользователь.ОтключитьКонтрольМонопольногоВхода;
	ТекПользователь.ОтключитьКонтрольМонопольногоВхода = Истина;
	ТекПользователь.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВОтдельномОкне(Команда)
	
	ТекКонтроль = Ложь;
	
	ОткрытьВОтдельномОкнеНаСервере(ТекКонтроль);
	
	СтрокаЗапуска = "";
	ВыполнитьПодключение(СтрокаЗапуска);
	ЗапуститьПриложение(СтрокаЗапуска, , Истина);
	//зависнем на 10 секунд перед тем как продолжить
	Время = 10;
	Сигнатура = Формат(ТекущаяДата(), "ДФ=yyyyMMddhhmmss");
    ПутьСкрипта = КаталогВременныхФайлов()+"SleepScript"+Сигнатура+".vbs";
    СкриптФайл = Новый ТекстовыйДокумент;
    СкриптФайл.ДобавитьСтроку("WScript.Sleep("+Формат(Время*1000, "ЧГ=0")+")");
    СкриптФайл.Записать(ПутьСкрипта, КодировкаТекста.OEM);
    WSHShell = Новый COMОбъект("WScript.Shell");
    WSHShell.Run("wscript.exe """+ПутьСкрипта+"""", 0, Истина);
    УдалитьФайлы(ПутьСкрипта);
	
	ОчисткаПриЗакрытии(ТекКонтроль);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПодключение(СтрокаЗапуска, СтрокаПодключения = "")
	
	ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	Если Найти(СтрокаСоединенияИнформационнойБазы(),"Srvr=") = 0 Тогда
		СтрокаЗапуска = "C:\Program Files (x86)\1cv8\common\1cestart.exe  ENTERPRISE  "+СтрЗаменить(СтрЗаменить(?(ЗначениеЗаполнено(СтрокаПодключения), СтрокаПодключения, СтрокаСоединенияИнформационнойБазы()),"File="," /F "),";","")+" /n """+ТекПользователь.Наименование+""""+" /P """+ТекПользователь.Пароль+"""";
	Иначе
		СтрокаЗапуска = "C:\Program Files (x86)\1cv8\common\1cestart.exe  ENTERPRISE  "+СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(?(ЗначениеЗаполнено(СтрокаПодключения), СтрокаПодключения, СтрокаСоединенияИнформационнойБазы()),"Srvr="," /S "),";Ref=""","\"),"""",""),";","")+" /n """+ТекПользователь.Наименование+""""+""+" /P """+ТекПользователь.Пароль+"""";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаПриЗакрытии(ТекКонтроль) 
	
	Если ТекКонтроль = Ложь Тогда
		ТекПользователь = ПараметрыСеанса.ТекущийПользователь.ПолучитьОбъект();
		ТекПользователь.ОтключитьКонтрольМонопольногоВхода = Ложь;
		ТекПользователь.Записать();
	КонецЕсли;
		
КонецПроцедуры	

&НаКлиенте
Процедура ЗапуститьБазу(Команда)
	
	СтрокаЗапуска = "";
	
	ТекДанные = Элементы.ПользователиЧат.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		СтрокаПодключения = БюджетныйНаСервере.ВернутьРеквизит(ТекДанные.ИБ, "ПутьКБазе"); 
		ВыполнитьПодключение(СтрокаЗапуска, СтрокаПодключения);
		ЗапуститьПриложение(СтрокаЗапуска, , Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область РаботаСХронометражем

&НаКлиенте
Процедура ХронометражСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ХронометражСписокКомандаСписка" Тогда
		ПаузаСтартХронометраж(Элементы.ХронометражСписок.ТекущиеДанные.Период, Элементы.ХронометражСписок.ТекущиеДанные.Предмет, Элементы.ХронометражСписок.ТекущиеДанные.КомандаСписка);
		Элементы.ХронометражСписок.Обновить();
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПаузаСтартХронометраж(Период, Предмет, Команда)
	
	НаборЗаписей = РегистрыСведений.сабХронометраж.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Период);
	НаборЗаписей.Отбор.Предмет.Установить(Предмет);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() Тогда
		ТекЗапись = НаборЗаписей.Получить(0);
		ТекЗапись.ДатаОкончанияРабот = ТекущаяДата();	
	КонецЕсли;
	Если Команда = "Пауза" Тогда //останавливаем текзапись
		НаборЗаписей.Записать();
	КонецЕсли;
	
	Если Команда = "Старт" Тогда //инициируем новую запись
		БПСервер.СтартоватьХронометражПоПредмету(ТекущаяДата(), Предмет, ТекЗапись);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ХронометражПоказатьВсеПриИзменении(Элемент)
	ХронометражСписок.Параметры.УстановитьЗначениеПараметра("ПоказатьВсе", ХронометражПоказатьВсе);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсе(Команда)
	ХронометражСписок.Параметры.УстановитьЗначениеПараметра("ПоказатьВсе", НЕ Элементы.ХронометражСписокПоказатьВсе.Пометка);
	Элементы.ХронометражСписокПоказатьВсе.Пометка = Не Элементы.ХронометражСписокПоказатьВсе.Пометка;
КонецПроцедуры


#КонецОбласти 
