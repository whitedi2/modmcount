
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	БазовыйТекстЗапроса = Список.ТекстЗапроса;
	//Элементы.СписокКорректировок.Видимость = Ложь;
	//Элементы.СписокКорректировокДДУ.Видимость = Ложь;
	Элементы.ЗаявкаТЧ.Видимость = Ложь;
	Элементы.Группа1.Видимость = Ложь;
	Фильтр2.Очистить();
	СписокТиповДокументов.Очистить();
	
	Если Параметры.Свойство("ВидВнутреннегоДокумента") Тогда
		ЗполнитьФильтрПоТипуДокумента(Параметры);
		ЗаполнитьПечать(Параметры);
		Элементы.СтруктураДокументовГруппа.Видимость = Ложь;
	ИначеЕсли ПараметрыСеанса.СтруктураПараметровФормСпискаДокументооборота.Свойство("ВидВнутреннегоДокумента") Тогда
		ЗполнитьФильтрПоТипуДокумента(ПараметрыСеанса.СтруктураПараметровФормСпискаДокументооборота);
		ЗаполнитьПечать(ПараметрыСеанса.СтруктураПараметровФормСпискаДокументооборота);
		ПараметрыСеанса.СтруктураПараметровФормСпискаДокументооборота = Новый ФиксированнаяСтруктура(Новый Структура);
		Элементы.СтруктураДокументовГруппа.Видимость = Ложь;
	Иначе		
		Фильтр2.Добавить("Все документы");
		СписокТиповДокументов.Добавить("Все документы");
		ЗаполнитьВидыОпераций();
	КонецЕсли;
	
	
	
	ТекПП = БюджетныйНаСервере.ПолучитьПредприятия();
	
	РеквизитыПользователя = БюджетныйНаСервере.ВернутьРеквизиты(ПараметрыСеанса.ТекущийПользователь, "ДоступныПредприятияИзСписка, ОграничениеПодразделений, ВидимостьПоСогласованию");  
	
	//Добавим Пользователю БОБ возможность видеть заявки пользователя КСА
	МассивПользователей = БПСервер.ПолучитьМассивПользователей();
	//Если МассивПользователей.Найти(Справочники.Пользователи.НайтиПоНаименованию("БОБ")) <> неопределено Тогда 
	//	МассивПользователей.Добавить(Справочники.Пользователи.НайтиПоНаименованию("КСА"));
	//КонецЕсли;
	
	Список.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", МассивПользователей);
	Список.Параметры.УстановитьЗначениеПараметра("ВсеПредприятия", НЕ РеквизитыПользователя.ДоступныПредприятияИзСписка);
	Список.Параметры.УстановитьЗначениеПараметра("ДоступныеПредприятия", ТекПП);
	Список.Параметры.УстановитьЗначениеПараметра("ВсеЗаявки", БюджетныйНаСервере.РольАдминаДоступнаСервер());
	//Список.Параметры.УстановитьЗначениеПараметра("Тип", Фильтр2);
	Список.Параметры.УстановитьЗначениеПараметра("ВсеПодразделения", НЕ РеквизитыПользователя.ОграничениеПодразделений);
	Список.Параметры.УстановитьЗначениеПараметра("ДоступныеПодразделения", ПараметрыСеанса.ДоступныеПодразделения);
	Список.Параметры.УстановитьЗначениеПараметра("ДопСтатьи", ?(ПараметрыСеанса.ТекущийПользователь.ДоступныеСтатьи.Количество(), Истина, Ложь));
	Список.Параметры.УстановитьЗначениеПараметра("ДоступныеСтатьиСырья", ПараметрыСеанса.ТекущийПользователь.ДоступныеСтатьи.ВыгрузитьКолонку("СтатьяДДС"));
	Список.Параметры.УстановитьЗначениеПараметра("ОграничСтатьи", ?(ПараметрыСеанса.ТекущийПользователь.НедоступныеСтатьи.Количество(), Истина, Ложь));
	Список.Параметры.УстановитьЗначениеПараметра("НедоступныеСтатьи", ПараметрыСеанса.ТекущийПользователь.НедоступныеСтатьи.ВыгрузитьКолонку("СтатьяДДС"));
	Список.Параметры.УстановитьЗначениеПараметра("ДоступностьПриватныхДокументов", сабОбщегоНазначения.ПолучитьЗначениеСвойства(ПараметрыСеанса.ТекущийПользователь, "Доступность приватных документов"));
	
	//СписокКорректировокДДУ.Параметры.УстановитьЗначениеПараметра("ДоговорОснование", NULL);
	//СписокКорректировок.Параметры.УстановитьЗначениеПараметра("ДокОснование", NULL);
	ЗаявкаТЧ.Параметры.УстановитьЗначениеПараметра("Ссылка", NULL);
	
	Если РеквизитыПользователя.ВидимостьПоСогласованию И НЕ Параметры.Свойство("ТекПлатежка") Тогда
		//Элементы.Группа2.Видимость = Ложь;
		ФильтроватьСерверСогласованиеАвтор();
	Иначе
		Если Параметры.Свойство("ТекПлатежка") Тогда
			ТекПлатежка = Параметры.ТекПлатежка;
			//Элементы.Группа2.Видимость = Ложь;
		Иначе
			ТекПлатежка = Неопределено ;
		КонецЕсли;
		Список.Параметры.УстановитьЗначениеПараметра("Авторство", Истина);
		Список.Параметры.УстановитьЗначениеПараметра("ПринадлежностьПредприятию", Истина);
		Список.Параметры.УстановитьЗначениеПараметра("Согласовано", Истина);
		Список.Параметры.УстановитьЗначениеПараметра("Оплачено", Истина);
		Список.Параметры.УстановитьЗначениеПараметра("Исполнено", Истина);
		Фильтр = "Нет фильтра";
	КонецЕсли;
	
	Если Параметры.Свойство("РежимВыбора") Тогда
		Элементы.Список.РежимВыбора = Параметры.РежимВыбора;
	Иначе
		Элементы.Список.РежимВыбора = Ложь;
	КонецЕсли;
	
	Если ПараметрыСеанса.СтруктураПараметровФормСпискаДокументооборота.Свойство("ФормаВыбора") Тогда
		Элементы.Список.РежимВыбора = ПараметрыСеанса.СтруктураПараметровФормСпискаДокументооборота.ФормаВыбора;	
	КонецЕсли;
	
	УстановитьПараметрыРасширенногоПоиска();
	сабБПКлиентСервер.ДобавитьДеревоМаршрута(Элементы, Команды, ТекущаяСтрокаГруппы, МаршрутДерево, Справочники.МаршрутыДвиженияЗаявок.ПустаяСсылка(), УсловноеОформление, Новый Структура("КнопкиУправления, ДопУсловияВидимость, ТолькоПросмотр, Согласовано", Ложь, Ложь, Истина, Истина));
	
	//заполнить структуру доков
	ЗаполнитьСтруктуруДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//Элементы.СтруктураДокументов.Развернуть(СтруктураДокументов.ПолучитьЭлементы()[0].ПолучитьИдентификатор());
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьСтруктуруДокументов()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Д_ВидыВнутреннихДокументов.Наименование КАК Наименование,
	               |	Д_ВидыВнутреннихДокументов.Ссылка
	               |ИЗ
	               |	Справочник.Д_ВидыВнутреннихДокументов КАК Д_ВидыВнутреннихДокументов
	               |ГДЕ
	               |	НЕ Д_ВидыВнутреннихДокументов.ИмяДокумента = """"
	               |	И Д_ВидыВнутреннихДокументов.Родитель = ЗНАЧЕНИЕ(Справочник.Д_ВидыВнутреннихДокументов.ПустаяСсылка)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Наименование";
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	НоваяСтрока = СтруктураДокументов.ПолучитьЭлементы().Добавить();
	НоваяСтрока.Значение = "Все документы";	
	НоваяСтрока.Уровень = 0;
	НоваяСтрока.Идентификатор = НоваяСтрока.ПолучитьИдентификатор();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока2 = НоваяСтрока.ПолучитьЭлементы().Добавить();
		НоваяСтрока2.Значение = Выборка.Наименование;	
		НоваяСтрока2.Ссылка = Выборка.Ссылка;	
		НоваяСтрока2.Уровень = 1;
		НоваяСтрока.Идентификатор = НоваяСтрока2.ПолучитьИдентификатор();
	КонецЦикла;
	
	
	
КонецПроцедуры


&НаСервере
Процедура ЗполнитьФильтрПоТипуДокумента(ПараметрыПроцедуры)
	
	Фильтр2.Добавить(ПараметрыПроцедуры.ВидВнутреннегоДокумента);
	Список.Отбор.Элементы.Очистить();
	
	Если ПараметрыПроцедуры.ВидВнутреннегоДокумента = "Все документы" Тогда
		СписокТиповДокументов.Добавить("Все документы");
		
	Иначе
		//Если ЗначениеЗаполнено(ПараметрыПроцедуры.ВидВнутреннегоДокумента.Родитель) Тогда
		//	СписокТиповДокументов.Добавить(ПараметрыПроцедуры.ВидВнутреннегоДокумента.Родитель);
		//КонецЕсли;
		
		СписокТиповДокументов.Добавить(ПараметрыПроцедуры.ВидВнутреннегоДокумента);
		
		
		//ПараметрыСеанса.СтруктураПараметровФормСпискаДокументооборота = Новый ФиксированнаяСтруктура(Новый Структура);
		
		СписокЗначений = Новый СписокЗначений;
		
		Если ПараметрыПроцедуры.Свойство("ИмяДокумента") Тогда
			СписокЗначений.Добавить(Тип("ДокументСсылка." + ПараметрыПроцедуры.ИмяДокумента));
		Иначе
			
			Для каждого ТекСтрока Из Фильтр2 Цикл
				ИмяДокумента = БПСервер.ПолучитьИмяДокументаПоСинониму(ТекСтрока.Значение.Наименование);
				СписокЗначений.Добавить(Тип("ДокументСсылка." + ИмяДокумента));
			КонецЦикла; 
		КонецЕсли;
		
		СписокЗначений.Добавить(ПараметрыПроцедуры.ВидВнутреннегоДокумента);
		
		//НовыйОтбор = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		//НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Тип");
		//НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		//НовыйОтбор.ПравоеЗначение = СписокЗначений;
		//
		//Если ПараметрыПроцедуры.Свойство("ПодтипВнутрДокумента") Тогда
		//	НовыйОтбор = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		//	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидДокумента");
		//	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		//	НовыйОтбор.ПравоеЗначение = ПараметрыПроцедуры.ПодтипВнутрДокумента;
		//КонецЕсли;
		
	КонецЕсли;
	
	
	СформироватьВидимостьПолей();
	
	//перезаполнить команды
	Для каждого Элемент Из Элементы Цикл
		Если Элемент.Родитель = Элементы.Создать И (ТипЗнч(Элемент) = Тип("КнопкаФормы") ИЛИ ТипЗнч(Элемент) = Тип("ГруппаФормы")) Тогда			
			//Попытка
			//	
			Элемент.Видимость = Ложь;
			//	
			//Исключение
			//	а = 1;	
			//КонецПопытки;
		КонецЕсли;		
	КонецЦикла; 
	ЗаполнитьВидыОпераций();

	
	
КонецПроцедуры

&НаСервере
Процедура СформироватьВидимостьПолей()
	//Элементы.СоздатьПоПоследним.Видимость = Ложь;
	
	//Список.ТекстЗапроса = БазовыйТекстЗапроса;
	//УстановитьПривилегированныйРежим(Истина);
	//Если Фильтр2.Количество() Тогда //формируем видимость по первому значению списка
	//	Если Фильтр2[0].Значение = "Все документы" Тогда
	//		Заголовок = Фильтр2[0].Значение;
	//		сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "Группа5", "Видимость", Истина);		
	//		сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "СуммаДокумента", "Видимость", Истина);
	//		сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "Контрагент", "Видимость", Истина);
	//		сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "ДопИнформация", "Видимость", Истина);
	//		//сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "СписокКорректировок", "Видимость", Ложь);
	//		сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "ЗаявкаТЧ", "Видимость", Ложь);
	//		сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "Группа1", "Видимость", Истина);
	//		сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "ВидДокумента", "Видимость", Истина);
	//	//ИначеЕсли Фильтр2[0].Значение.ИмяДокумента = "Д_ЗаявкаНаТорговлю" Тогда
	//	//	Элементы.Группа5.Видимость = Ложь;
	//	//	Элементы.ВидДокумента.Видимость = Ложь;
	//	//	Элементы.СуммаДокумента.Видимость = Ложь;
	//	//	Элементы.Фильтр2.Доступность = Ложь;
	//	//	Элементы.СписокКорректировок.Видимость = Истина;
	//	//	
	//	//	Заголовок = "Список заявок на покупку/продажу";
	//	//	
	//	//	ДопПоля = "ВнутренниеДокументы.Документ.ФизическийОбъем КАК ФизическийОбъем,
	//	//				|ВнутренниеДокументы.Документ.ВидЗаявки КАК ВидЗаявки,
	//	//				|ВнутренниеДокументы.Документ.Цена КАК Цена";
	//	//				
	//	//	Список.ТекстЗапроса = СтрЗаменить(Список.ТекстЗапроса, """Переменное поле"" КАК ПеременноеПоле", ДопПоля);
	//	//	
	//	//	Колонка3 = ПолучитьКолонку(Элементы, "КолонкаСписка0", Тип("ПолеФормы"), Элементы.Список, Элементы.Предприятие);
	//	//	Если НЕ ЗначениеЗаполнено(Колонка3.ПутьКДанным) Тогда
	//	//		Колонка3.ПутьКДанным = "Список.ВидЗаявки";
	//	//	КонецЕсли;
	//	//	Колонка3.Вид = ВидПоляФормы.ПолеНадписи;
	//	//	Колонка3.Ширина = 20;
	//	//	
	//	//	Колонка3 = ПолучитьКолонку(Элементы, "КолонкаСписка1", Тип("ПолеФормы"), Элементы.Список, Элементы.Тема);
	//	//	Если НЕ ЗначениеЗаполнено(Колонка3.ПутьКДанным) Тогда
	//	//		Колонка3.ПутьКДанным = "Список.ФизическийОбъем";
	//	//	КонецЕсли;
	//	//	Колонка3.Вид = ВидПоляФормы.ПолеНадписи;
	//	//	
	//	//	Колонка3 = ПолучитьКолонку(Элементы, "КолонкаСписка2", Тип("ПолеФормы"), Элементы.Список, Элементы.КолонкаСписка1);
	//	//	Если Не ЗначениеЗаполнено(Колонка3.ПутьКДанным) Тогда
	//	//		Колонка3.ПутьКДанным = "Список.Цена";
	//	//	КонецЕсли;
	//	//	Колонка3.Вид = ВидПоляФормы.ПолеНадписи;
	//	//	//Колонка3.КнопкаВыбора = Истина;
	//	//	
	//	//	ЗаполнитьПечать(Документы[Фильтр2[0].Значение.ИмяДокумента].ПустаяСсылка());
	//	//ИначеЕсли Фильтр2[0].Значение.ИмяДокумента = "Д_ЗаявкаНаОтгрузку" Тогда
	//	//	Элементы.Группа5.Видимость = Ложь;		
	//	//	Элементы.СуммаДокумента.Видимость = Ложь;
	//	//	Элементы.Фильтр2.Доступность = Ложь;
	//	//	Элементы.Контрагент.Видимость = Ложь;
	//	//	Элементы.ДопИнформация.Видимость = Ложь;
	//	//	Элементы.ВидДокумента.Видимость = Ложь;
	//	//	Элементы.СписокКорректировок.Видимость = Истина;
	//	//	
	//	//	
	//	//	Заголовок = "Заявки на отгрузку";
	//	//	
	//	//	ДопПоля = "ВнутренниеДокументы.Документ.ТипРеализации КАК ТипРеализации,
	//	//				|ВнутренниеДокументы.Документ.ДатаОтгрузки КАК ДатаОтгрузки,
	//	//				|ВнутренниеДокументы.Документ.Док КАК Док,
	//	//				|ВнутренниеДокументы.Документ.Грузополучатель КАК Грузополучатель,
	//	//				|ВнутренниеДокументы.Документ.КоличествоДок КАК КоличествоДок,
	//	//				|ВнутренниеДокументы.Документ.Цена КАК Цена,
	//	//				|ВнутренниеДокументы.Документ.Тема КАК Тема";
	//	//				
	//	//				
	//	//	Список.ТекстЗапроса = СтрЗаменить(Список.ТекстЗапроса, """Переменное поле"" КАК ПеременноеПоле", ДопПоля);
	//	//	
	//	//	Колонка3 = ПолучитьКолонку(Элементы, "КолонкаСписка0", Тип("ПолеФормы"), Элементы.Список, Элементы.Предприятие);
	//	//	Колонка3.ПутьКДанным = "Список.Цена";
	//	//	Колонка3.Вид = ВидПоляФормы.ПолеНадписи;
	//	//	Колонка3.Ширина = 8;
	//	//	
	//	//	Колонка3 = ПолучитьКолонку(Элементы, "КолонкаСписка00", Тип("ПолеФормы"), Элементы.Список, Элементы.КолонкаСписка0);
	//	//	Колонка3.ПутьКДанным = "Список.КоличествоДок";
	//	//	Колонка3.Вид = ВидПоляФормы.ПолеНадписи;
	//	//	Колонка3.Заголовок = "Количество";
	//	//	Колонка3.Ширина = 10;
	//	//	
	//	//	Колонка3 = ПолучитьКолонку(Элементы, "КолонкаСписка000", Тип("ПолеФормы"), Элементы.Список, Элементы.КолонкаСписка00);
	//	//	Колонка3.ПутьКДанным = "Список.Грузополучатель";
	//	//	Колонка3.Вид = ВидПоляФормы.ПолеНадписи;
	//	//	Колонка3.Ширина = 20;
	//	//	
	//	//	Колонка3 = ПолучитьКолонку(Элементы, "КолонкаСписка1", Тип("ПолеФормы"), Элементы.Список, Элементы.КолонкаСписка000);
	//	//	Колонка3.ПутьКДанным = "Список.ДатаОтгрузки";
	//	//	Колонка3.Вид = ВидПоляФормы.ПолеНадписи;
	//	//	
	//	//	Колонка3 = ПолучитьКолонку(Элементы, "КолонкаСписка2", Тип("ПолеФормы"), Элементы.Список, Элементы.КолонкаСписка1);
	//	//	Колонка3.ПутьКДанным = "Список.ТипРеализации";
	//	//	Колонка3.Вид = ВидПоляФормы.ПолеНадписи;
	//	//	//Колонка3.КнопкаВыбора = Истина;
	//	//	
	//	//	ЗаполнитьПечать(Документы[Фильтр2[0].Значение.ИмяДокумента].ПустаяСсылка());
	//	//	
	//	//ИначеЕсли Фильтр2[0].Значение.ИмяДокумента = "УЧ_Стр_ДоговорДолевогоУчастия" Тогда
	//	//	сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "Группа5", "Видимость", Ложь);		
	//	//	сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "СуммаДокумента", "Видимость", Ложь);
	//	//	сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "Фильтр2", "Доступность", Ложь);
	//	//	сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "Контрагент", "Видимость", Ложь);
	//	//	сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "ДопИнформация", "Видимость", Ложь);
	//	//	сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "ВидДокумента", "Видимость", Ложь);
	//	//	сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "СписокКорректировок", "Видимость", Ложь);
	//	//	//Элементы.СписокКорректировокДДУ.Видимость = Истина;
	//	//	
	//	//	
	//	//	Заголовок = "Договоры долевого участия";
	//	//	
	//	//	ДопПоля = "ВнутренниеДокументы.Документ.Объект КАК Объект,
	//	//				|ВнутренниеДокументы.Документ.Застройщик КАК Застройщик,
	//	//				|ВнутренниеДокументы.Документ.Дольщик КАК Дольщик,
	//	//				|ВнутренниеДокументы.Документ.Сумма КАК Сумма,
	//	//				|ВнутренниеДокументы.Документ.Квартира КАК Квартира,
	//	//				|ДДУ.КоличествоПодчиненных КАК КоличествоПодчиненных";
	//	//				
	//	//				
	//	//	Список.ТекстЗапроса = СтрЗаменить(Список.ТекстЗапроса, """Переменное поле"" КАК ПеременноеПоле", ДопПоля);
	//	//	
	//	//	Список.ТекстЗапроса = Список.ТекстЗапроса + "
	//	//	|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//	//	|ВложенныйЗапрос.ДоговорОснования КАК ДоговорОснования,
	//	//	|СУММА(ВложенныйЗапрос.КоличествоПодчиненных) КАК КоличествоПодчиненных
	//	//	|ИЗ
	//	//	|(ВЫБРАТЬ
	//	//	|	Стр_ДДУГрафик.ДоговорОснования,
	//	//	|	1 КАК КоличествоПодчиненных
	//	//	|ИЗ
	//	//	|	Документ.Стр_ДДУГрафик КАК Стр_ДДУГрафик
	//	//	|
	//	//	|ОБЪЕДИНИТЬ ВСЕ
	//	//	|
	//	//	|ВЫБРАТЬ
	//	//	|	Стр_ДДУКорректировка.ДоговорОснования,
	//	//	|	1
	//	//	|ИЗ
	//	//	|	Документ.Стр_ДДУКорректировка КАК Стр_ДДУКорректировка
	//	//	|
	//	//	|ОБЪЕДИНИТЬ ВСЕ
	//	//	|
	//	//	|ВЫБРАТЬ
	//	//	|	Стр_ДДУПереуступка.ДоговорОснования,
	//	//	|	1
	//	//	|ИЗ
	//	//	|	Документ.Стр_ДДУПереуступка КАК Стр_ДДУПереуступка
	//	//	|
	//	//	|ОБЪЕДИНИТЬ ВСЕ
	//	//	|
	//	//	|ВЫБРАТЬ
	//	//	|	Стр_ДДУРасторжение.ДоговорОснования,
	//	//	|	1
	//	//	|ИЗ
	//	//	|	Документ.Стр_ДДУРасторжение КАК Стр_ДДУРасторжение) КАК ВложенныйЗапрос
	//	//    |
	//	//	|СГРУППИРОВАТЬ ПО
	//	//	|ВложенныйЗапрос.ДоговорОснования) КАК ДДУ
	//	//	|ПО ВнутренниеДокументы.Документ = ДДУ.ДоговорОснования";
	//	//	
	//	//	
	//	//	Колонка3 = ПолучитьКолонку(Элементы, "КолонкаСписка3", Тип("ПолеФормы"), Элементы.Список, Элементы.ТочкаМаршрута);
	//	//	Колонка3.ПутьКДанным = "Список.КоличествоПодчиненных";
	//	//	Колонка3.Вид = ВидПоляФормы.ПолеНадписи;
	//	//	Колонка3.Ширина = 5;
	//	//	
	//	//	Колонка3 = ПолучитьКолонку(Элементы, "КолонкаСписка1", Тип("ПолеФормы"), Элементы.Список, Элементы.КолонкаСписка3);
	//	//	Колонка3.ПутьКДанным = "Список.Сумма";
	//	//	Колонка3.Вид = ВидПоляФормы.ПолеНадписи;
	//	//	Колонка3.Ширина = 12;
	//	//	
	//	//	Колонка3 = ПолучитьКолонку(Элементы, "КолонкаСписка00", Тип("ПолеФормы"), Элементы.Список, Элементы.КолонкаСписка1);
	//	//	Колонка3.ПутьКДанным = "Список.Застройщик";
	//	//	Колонка3.Вид = ВидПоляФормы.ПолеНадписи;
	//	//	//Колонка3.Заголовок = "Количество";
	//	//	Колонка3.Ширина = 12;
	//	//	
	//	//	Колонка3 = ПолучитьКолонку(Элементы, "КолонкаСписка2", Тип("ПолеФормы"), Элементы.Список, Элементы.КолонкаСписка00);
	//	//	Колонка3.ПутьКДанным = "Список.Квартира";
	//	//	Колонка3.Вид = ВидПоляФормы.ПолеНадписи;
	//	//	Колонка3.Ширина = 12;
	//	//	
	//	//	Колонка3 = ПолучитьКолонку(Элементы, "КолонкаСписка000", Тип("ПолеФормы"), Элементы.Список, Элементы.КолонкаСписка2);
	//	//	Колонка3.ПутьКДанным = "Список.Дольщик";
	//	//	Колонка3.Вид = ВидПоляФормы.ПолеНадписи;
	//	//	Колонка3.Ширина = 12;
	//	//	
	//	//	Колонка3 = ПолучитьКолонку(Элементы, "КолонкаСписка0", Тип("ПолеФормы"), Элементы.Список, Элементы.КолонкаСписка000);
	//	//	Колонка3.ПутьКДанным = "Список.Объект";
	//	//	Колонка3.Вид = ВидПоляФормы.ПолеНадписи;
	//	//	Колонка3.Ширина = 12;
	//	//	
	//	//	ЗаполнитьПечать(Документы[Фильтр2[0].Значение.ИмяДокумента].ПустаяСсылка());
	//	ИначеЕсли Фильтр2[0].Значение = Справочники.Д_ВидыВнутреннихДокументов.ПолучитьЭлементПредопределенный("ЗаявкаНаСогласованиеДоговора") Тогда 
	//		
	//		Список.ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	//		                      |	ВнутренниеДокументы.Дата КАК Дата,
	//		                      |	ВнутренниеДокументы.Документ КАК Ссылка,
	//		                      |	Д_ТекущаяЗадача.ТекущаяЗадача КАК Задача,
	//		                      |	Д_ТекущаяЗадача.Исполнители КАК Исполнитель,
	//		                      |	ВнутренниеДокументы.Автор КАК Автор,
	//		                      |	ВнутренниеДокументы.Номер КАК Номер,
	//		                      |	ЕСТЬNULL(ВЫБОР
	//		                      |			КОГДА ТИПЗНАЧЕНИЯ(ВнутренниеДокументы.Документ) = ТИП(Документ.Д_ЗаявкаНаФинансирование)
	//		                      |					И ВнутренниеДокументы.Документ.Акцептован
	//		                      |				ТОГДА ""Оплачено""
	//		                      |			ИНАЧЕ Д_ТекущаяЗадача.ТочкаМаршрута
	//		                      |		КОНЕЦ, ""На подготовке"") КАК ТочкаМаршрута,
	//		                      |	ВнутренниеДокументы.Тип КАК Тип,
	//		                      |	ВнутренниеДокументы.ВидДокумента КАК ВидДокумента,
	//		                      |	ВнутренниеДокументы.Комментарии КАК Комментарии,
	//		                      |	ВЫБОР
	//		                      |		КОГДА ТИПЗНАЧЕНИЯ(ВнутренниеДокументы.Документ) = ТИП(Документ.Д_ЗаявкаНаОплату)
	//		                      |			ТОГДА ВЫБОР
	//							  |					КОГДА ВнутренниеДокументы.Предприятие = ЗНАЧЕНИЕ(Справочник.Предприятия.ПустаяСсылка)
	//							  |						ТОГДА ""Сводный""
	//							  |					ИНАЧЕ ВнутренниеДокументы.Предприятие
	//							  |				КОНЕЦ
	//							  |		ИНАЧЕ ВнутренниеДокументы.Предприятие
	//							  |	КОНЕЦ КАК Предприятие,
	//							  | ВЫБОР
	//							  |КОГДА ВнутренниеДокументы.Проведен
	//							  |	ТОГДА 1
	//							  |КОГДА ВнутренниеДокументы.ПометкаУдаления
	//							  |	ТОГДА 3
	//							  |ИНАЧЕ 0
	//							  |КОНЕЦ КАК ИндексКартинки,
	//							  |	ВнутренниеДокументы.Подразделение КАК Подразделение,
	//							  |	ВнутренниеДокументы.СуммаДокумента КАК СуммаДокумента,
	//		                      |	ВнутренниеДокументы.ДопИнформация КАК ДопИнформация,
	//		                      |	ВнутренниеДокументы.Контрагент КАК Контрагент,
	//		                      |	""Переменное поле"" КАК ПеременноеПоле,
	//		                      |	Д_ТекущаяЗадача.ВРаботе КАК ВРаботе,
	//		                      |	ДоговорыКонтрагентов.Ссылка КАК Договор,
	//		                      |	ВложенныйЗапрос1.СканОригинала КАК СканОригинала
	//		                      |ИЗ
	//		                      |	РегистрСведений.ВнутренниеДокументы КАК ВнутренниеДокументы
	//		                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Д_ТекущаяЗадача КАК Д_ТекущаяЗадача
	//		                      |		ПО ВнутренниеДокументы.Документ = Д_ТекущаяЗадача.Документ
	//		                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//		                      |			ВложенныйЗапрос.Документ КАК Документ
	//		                      |		ИЗ
	//		                      |			(ВЫБРАТЬ
	//		                      |				ВнутренниеДокументы.Документ КАК Документ
	//		                      |			ИЗ
	//		                      |				РегистрСведений.ВнутренниеДокументы КАК ВнутренниеДокументы
	//		                      |			ГДЕ
	//		                      |				(ВЫБОР
	//		                      |							КОГДА &Авторство
	//		                      |								ТОГДА ВнутренниеДокументы.Автор В (&ТекущийПользователь)
	//		                      |							ИНАЧЕ ЛОЖЬ
	//		                      |						КОНЕЦ
	//		                      |						ИЛИ ВЫБОР
	//		                      |							КОГДА &ДоступностьПриватныхДокументов
	//		                      |								ТОГДА ВнутренниеДокументы.Предприятие В (&ДоступныеПредприятия)
	//		                      |							ИНАЧЕ ЛОЖЬ
	//		                      |						КОНЕЦ
	//		                      |						ИЛИ &ВсеЗаявки)
	//		                      |			
	//		                      |			ОБЪЕДИНИТЬ ВСЕ
	//		                      |			
	//		                      |			ВЫБРАТЬ
	//		                      |				Д_ДоступностьДокументов.Документ
	//		                      |			ИЗ
	//		                      |				РегистрСведений.Д_ДоступностьДокументов КАК Д_ДоступностьДокументов
	//		                      |			ГДЕ
	//		                      |				(ВЫБОР
	//		                      |							КОГДА &Согласовано
	//		                      |								ТОГДА Д_ДоступностьДокументов.Признак = ""Согласование""
	//		                      |							ИНАЧЕ ЛОЖЬ
	//		                      |						КОНЕЦ
	//		                      |						ИЛИ ВЫБОР
	//		                      |							КОГДА &Оплачено
	//		                      |								ТОГДА Д_ДоступностьДокументов.Признак = ""Ознакомление""
	//		                      |							ИНАЧЕ ЛОЖЬ
	//		                      |						КОНЕЦ
	//		                      |						ИЛИ ВЫБОР
	//		                      |							КОГДА &Исполнено
	//		                      |								ТОГДА Д_ДоступностьДокументов.Признак = ""Исполнение""
	//		                      |							ИНАЧЕ ЛОЖЬ
	//		                      |						КОНЕЦ)
	//		                      |				И (ВЫРАЗИТЬ(Д_ДоступностьДокументов.Значение КАК Справочник.Пользователи) В (&ТекущийПользователь)
	//		                      |						ИЛИ ВЫРАЗИТЬ(Д_ДоступностьДокументов.Значение КАК Справочник.ГруппыПользователей) В (&ТекущийПользователь))
	//		                      |			
	//		                      |			ОБЪЕДИНИТЬ ВСЕ
	//		                      |			
	//		                      |			ВЫБРАТЬ
	//		                      |				Д_ДоступностьДокументов.Документ
	//		                      |			ИЗ
	//		                      |				РегистрСведений.Д_ДоступностьДокументов КАК Д_ДоступностьДокументов
	//		                      |			ГДЕ
	//		                      |				(ВЫБОР
	//		                      |							КОГДА &ПринадлежностьПредприятию
	//		                      |								ТОГДА ВЫБОР
	//		                      |											КОГДА &ВсеПредприятия
	//		                      |												ТОГДА ИСТИНА
	//		                      |											ИНАЧЕ ВЫРАЗИТЬ(Д_ДоступностьДокументов.Значение КАК Справочник.Предприятия) В (&ДоступныеПредприятия)
	//		                      |										КОНЕЦ
	//		                      |										И ВЫБОР
	//		                      |											КОГДА &ВсеПодразделения
	//		                      |													ИЛИ ВЫРАЗИТЬ(Д_ДоступностьДокументов.Значение КАК Справочник.Предприятия).УчетПоПодразделениям = ЛОЖЬ
	//		                      |												ТОГДА ИСТИНА
	//		                      |											ИНАЧЕ ВЫРАЗИТЬ(Д_ДоступностьДокументов.Значение2 КАК Справочник.СтруктураПредприятия) В (&ДоступныеПодразделения)
	//		                      |										КОНЕЦ
	//		                      |							ИНАЧЕ ЛОЖЬ
	//		                      |						КОНЕЦ
	//		                      |						ИЛИ ВЫБОР
	//		                      |							КОГДА &ДопСтатьи
	//		                      |								ТОГДА ВЫРАЗИТЬ(Д_ДоступностьДокументов.Значение3 КАК Справочник.СтатьиДвиженияДенежныхСредств) В (&ДоступныеСтатьиСырья)
	//		                      |										И ВЫБОР
	//		                      |											КОГДА &ВсеПредприятия
	//		                      |												ТОГДА ИСТИНА
	//		                      |											ИНАЧЕ ВЫРАЗИТЬ(Д_ДоступностьДокументов.Значение КАК Справочник.Предприятия) В (&ДоступныеПредприятия)
	//		                      |										КОНЕЦ
	//		                      |										И ВЫБОР
	//		                      |											КОГДА &ВсеПодразделения
	//		                      |													ИЛИ ВЫРАЗИТЬ(Д_ДоступностьДокументов.Значение КАК Справочник.Предприятия).УчетПоПодразделениям = ЛОЖЬ
	//		                      |												ТОГДА ИСТИНА
	//		                      |											ИНАЧЕ ВЫРАЗИТЬ(Д_ДоступностьДокументов.Значение2 КАК Справочник.СтруктураПредприятия) В (&ДоступныеПодразделения)
	//		                      |										КОНЕЦ
	//		                      |							ИНАЧЕ ЛОЖЬ
	//		                      |						КОНЕЦ)
	//		                      |			
	//		                      |			ОБЪЕДИНИТЬ ВСЕ
	//		                      |			
	//		                      |			ВЫБРАТЬ
	//		                      |				Д_ДоступностьДокументов.Документ
	//		                      |			ИЗ
	//		                      |				РегистрСведений.Д_ДоступностьДокументов КАК Д_ДоступностьДокументов
	//		                      |					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Д_ДоступностьДокументовДокументооборота КАК Д_ДоступностьДокументовДокументооборота
	//		                      |					ПО Д_ДоступностьДокументов.ИмяДокумента = Д_ДоступностьДокументовДокументооборота.ТипДокумента
	//		                      |						И (Д_ДоступностьДокументовДокументооборота.Пользователь В (&ТекущийПользователь))
	//		                      |						И (ВЫБОР
	//		                      |							КОГДА &Согласовано
	//		                      |									И &Оплачено
	//		                      |									И &Исполнено
	//		                      |									И &Авторство
	//		                      |								ТОГДА ВЫБОР
	//		                      |										КОГДА Д_ДоступностьДокументовДокументооборота.ВсеДокументы
	//		                      |											ТОГДА ИСТИНА
	//		                      |										КОГДА Д_ДоступностьДокументовДокументооборота.Предприятия
	//		                      |											ТОГДА ВЫРАЗИТЬ(Д_ДоступностьДокументов.Значение КАК Справочник.Предприятия) В (&ДоступныеПредприятия)
	//		                      |													И ВЫБОР
	//		                      |														КОГДА &ВсеПодразделения
	//		                      |																ИЛИ ВЫРАЗИТЬ(Д_ДоступностьДокументов.Значение КАК Справочник.Предприятия).УчетПоПодразделениям = ЛОЖЬ
	//		                      |															ТОГДА ИСТИНА
	//		                      |														ИНАЧЕ ВЫРАЗИТЬ(Д_ДоступностьДокументов.Значение2 КАК Справочник.СтруктураПредприятия) В (&ДоступныеПодразделения)
	//		                      |													КОНЕЦ
	//		                      |										ИНАЧЕ ЛОЖЬ
	//		                      |									КОНЕЦ
	//		                      |							ИНАЧЕ ЛОЖЬ
	//		                      |						КОНЕЦ)
	//		                      |						И (Д_ДоступностьДокументов.Значение3 = Д_ДоступностьДокументовДокументооборота.ПодтипДокумента
	//		                      |							ИЛИ Д_ДоступностьДокументовДокументооборота.ПодтипДокумента = НЕОПРЕДЕЛЕНО)) КАК ВложенныйЗапрос
	//		                      |		ГДЕ
	//		                      |			ВЫБОР
	//		                      |					КОГДА &РасширенныйПоискПоЗаявкамНаОплату
	//		                      |						ТОГДА ВЫБОР
	//		                      |								КОГДА ТИПЗНАЧЕНИЯ(ВложенныйЗапрос.Документ) = ТИП(Документ.Д_ЗаявкаНаОплату)
	//		                      |									ТОГДА ВложенныйЗапрос.Документ В
	//		                      |											(ВЫБРАТЬ
	//		                      |												Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка
	//		                      |											ИЗ
	//		                      |												Документ.Д_ЗаявкаНаОплату.ЗаявкаБезнал КАК Д_ЗаявкаНаОплатуЗаявкаБезнал
	//		                      |											ГДЕ
	//		                      |												ВЫБОР
	//		                      |													КОГДА &Контрагент ЕСТЬ NULL
	//		                      |														ТОГДА ИСТИНА
	//		                      |													ИНАЧЕ Д_ЗаявкаНаОплатуЗаявкаБезнал.Контрагент = &Контрагент
	//		                      |												КОНЕЦ
	//		                      |												И ВЫБОР
	//		                      |													КОГДА &Источник ЕСТЬ NULL
	//		                      |														ТОГДА ИСТИНА
	//		                      |													ИНАЧЕ Д_ЗаявкаНаОплатуЗаявкаБезнал.Источник = &Источник
	//		                      |												КОНЕЦ
	//		                      |												И ВЫБОР
	//		                      |													КОГДА &Основание ЕСТЬ NULL
	//		                      |														ТОГДА ИСТИНА
	//		                      |													ИНАЧЕ Д_ЗаявкаНаОплатуЗаявкаБезнал.Основание ПОДОБНО &Основание
	//		                      |												КОНЕЦ
	//		                      |												И ВЫБОР
	//		                      |													КОГДА &Примечание ЕСТЬ NULL
	//		                      |														ТОГДА ИСТИНА
	//		                      |													ИНАЧЕ Д_ЗаявкаНаОплатуЗаявкаБезнал.Примечание ПОДОБНО &Примечание
	//		                      |												КОНЕЦ
	//		                      |												И ВЫБОР
	//		                      |													КОГДА &ЦФО ЕСТЬ NULL
	//		                      |														ТОГДА ИСТИНА
	//		                      |													ИНАЧЕ Д_ЗаявкаНаОплатуЗаявкаБезнал.ЦФО В (&ЦФО)
	//		                      |												КОНЕЦ)
	//		                      |								ИНАЧЕ ЛОЖЬ
	//		                      |							КОНЕЦ
	//		                      |					ИНАЧЕ ИСТИНА
	//		                      |				КОНЕЦ
	//		                      |		
	//		                      |		СГРУППИРОВАТЬ ПО
	//		                      |			ВложенныйЗапрос.Документ) КАК ВложенныйЗапрос
	//		                      |		ПО ВнутренниеДокументы.Документ = ВложенныйЗапрос.Документ
	//		                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	//		                      |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//		                      |				ПрикрепленныеОбъекты.Владелец КАК Владелец,
	//		                      |				КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПрикрепленныеОбъекты.Объект) КАК Количество,
	//		                      |				МАКСИМУМ(ПрикрепленныеОбъекты.Объект) КАК СканОригинала
	//		                      |			ИЗ
	//		                      |				РегистрСведений.ПрикрепленныеОбъекты КАК ПрикрепленныеОбъекты
	//		                      |			ГДЕ
	//		                      |				ПрикрепленныеОбъекты.ВидОбъекта = ЗНАЧЕНИЕ(Перечисление.ВидыПрикрепленныхОбъектов.Договор)
	//		                      |			
	//		                      |			СГРУППИРОВАТЬ ПО
	//		                      |				ПрикрепленныеОбъекты.Владелец) КАК ВложенныйЗапрос1
	//		                      |			ПО ДоговорыКонтрагентов.Ссылка = ВложенныйЗапрос1.Владелец
	//		                      |		ПО ВнутренниеДокументы.Документ = ДоговорыКонтрагентов.ДокументОснование
	//		                      |			И (ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ)";
	//		
	//		Заголовок = Фильтр2[0].Значение;
	//		сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "Группа5", "Видимость", Ложь);
	//		сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "СуммаДокумента", "Видимость", Ложь);
	//		сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "Фильтр2", "Доступность", Ложь);
	//		сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "ВидДокумента", "Видимость", Ложь);
	//		//Элементы.Контрагент.Видимость = Ложь;
	//		сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "ДопИнформация", "Видимость", Ложь);
	//		//сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "СписокКорректировок", "Видимость", Ложь);
	//		//Элементы.СписокКорректировокДДУ.Видимость = Ложь;
	//		сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "ЗаявкаТЧ", "Видимость", Ложь);
	//		сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "Группа1", "Видимость", Ложь);
	//		//Элементы.СписокКорректировокДДУ.Видимость = Ложь;
	//		
	//		ДопПоля = "Подстрока(ВнутренниеДокументы.Документ.Текстовка, 1, 150) КАК ПредметДоговора,
	//					|ВнутренниеДокументы.Документ.ЮрЛицоКомпании КАК ЮрЛицоКомпании";
	//					
	//					
	//		Список.ТекстЗапроса = СтрЗаменить(Список.ТекстЗапроса, """Переменное поле"" КАК ПеременноеПоле", ДопПоля);
	//		
	//		Колонка3 = ПолучитьКолонку(Элементы, "КолонкаСпискаДог1", Тип("ПолеФормы"), Элементы.Список, Элементы.Контрагент);
	//		Колонка3.ПутьКДанным = "Список.ЮрЛицоКомпании";
	//		Колонка3.Вид = ВидПоляФормы.ПолеНадписи;
	//		//Колонка3.Ширина = 8;
	//		
	//		Колонка3 = ПолучитьКолонку(Элементы, "КолонкаСпискаДог2", Тип("ПолеФормы"), Элементы.Список, Элементы.КолонкаСпискаДог1);
	//		Колонка3.ПутьКДанным = "Список.ПредметДоговора";
	//		Колонка3.Вид = ВидПоляФормы.ПолеНадписи;
	//		
	//		Колонка3 = ПолучитьКолонку(Элементы, "КолонкаСпискаДог3", Тип("ПолеФормы"), Элементы.Список, Элементы.КолонкаСпискаДог1);
	//		Колонка3.ПутьКДанным = "Список.Договор";
	//		Колонка3.Вид = ВидПоляФормы.ПолеНадписи;
	//		
	//		Колонка3 = ПолучитьКолонку(Элементы, "КолонкаСпискаДог4", Тип("ПолеФормы"), Элементы.Список, Элементы.КолонкаСпискаДог1);
	//		Колонка3.ПутьКДанным = "Список.СканОригинала";
	//		Колонка3.Вид = ВидПоляФормы.ПолеНадписи;

	//		//Колонка3.Заголовок = "Количество";
	//		//Колонка3.Ширина = 10;
	//	ИначеЕсли Фильтр2[0].Значение = Справочники.Д_ВидыВнутреннихДокументов.ПолучитьЭлементПредопределенный("ЗаявкаНаОплату") Тогда 
	//		сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "СуммаДокумента", "Видимость", Истина);
	//		сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "ЗаявкаТЧ", "Видимость", Истина);
	//		сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "Группа1", "Видимость", Истина);
	//		сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "ВидДокумента", "Видимость", Ложь);
	//		
	//		Заголовок = "Реестры платежей";
	//		
	//		ДопПоля = "ВнутренниеДокументы.Документ.ТипИсточника КАК ТипПлатежа";
	//		Список.ТекстЗапроса = СтрЗаменить(Список.ТекстЗапроса, """Переменное поле"" КАК ПеременноеПоле", ДопПоля);	
	//		Колонка3 = ПолучитьКолонку(Элементы, "КолонкаСписка0", Тип("ПолеФормы"), Элементы.Список, Элементы.Предприятие);
	//		Колонка3.ПутьКДанным = "Список.ТипПлатежа";
	//		Колонка3.Заголовок = "Тип платежа";
	//		Колонка3.Вид = ВидПоляФормы.ПолеНадписи;
	//		Колонка3.Ширина = 6;
	//		Элементы.Фильтр2.Доступность = Ложь;
	//		Элементы.ДопИнформация.Видимость = Ложь;
	//		Элементы.Контрагент.Видимость = Ложь;
	//		//Элементы.СписокКорректировок.Видимость = Ложь;
	//		//Элементы.СписокКорректировокДДУ.Видимость = Ложь;
	//	ИначеЕсли Фильтр2[0].Значение = Справочники.Д_ВидыВнутреннихДокументов.ПолучитьЭлементПредопределенный("ЗаявкаНаФинансирование") Тогда 
	//  		сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "СуммаДокумента", "Видимость", Истина);
	//		//Элементы.ЗаявкаТЧ.Видимость = Истина;
	//		сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "Группа1", "Видимость", Истина);
	//		сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "ВидДокумента", "Видимость", Ложь);
	//		
	//		Заголовок = "Заявки на оплату";
	//		
	//		ДопПоля = "ВнутренниеДокументы.Документ.ТипИсточника КАК ТипПлатежа,   
	//				|ВнутренниеДокументы.Документ.Организация КАК Организация,
	//				|ВнутренниеДокументы.Документ.БанковскийСчет КАК БанковскийСчет,
	//				|ВнутренниеДокументы.Документ.Источник КАК Источник,
	//				|ВнутренниеДокументы.Документ.НазначениеПлатежаУчет КАК НазначениеПлатежа,
	//				|ВнутренниеДокументы.Документ.Инициатор КАК Инициатор,
	//				|ВнутренниеДокументы.Документ.СтатьяДДС КАК СтатьяДДС,
	//				|ВнутренниеДокументы.Документ.СуммаОплачено КАК Оплачено,
	//				|ВнутренниеДокументы.Документ.РеестрЗаявок КАК РеестрЗаявок,
	//				|	ВЫБОР
	//				|КОГДА Выразить(ВнутренниеДокументы.Документ КАК Документ.Д_ЗаявкаНаФинансирование).Сумма = Выразить(ВнутренниеДокументы.Документ КАК Документ.Д_ЗаявкаНаФинансирование).СуммаОплачено
	//				|	ТОГДА 4
	//				|КОГДА Д_ТекущаяЗадача.ТочкаМаршрута = ЗНАЧЕНИЕ(Перечисление.Согласование1ТочкиМаршрута.Действие4)
	//				|	ТОГДА 1
	//				|КОГДА Д_ТекущаяЗадача.ТочкаМаршрута = ЗНАЧЕНИЕ(Перечисление.Согласование1ТочкиМаршрута.Действие5)
	//				|	ТОГДА 2
	//				|КОГДА Д_ТекущаяЗадача.ТочкаМаршрута = ЗНАЧЕНИЕ(Перечисление.Согласование1ТочкиМаршрута.НеСогласовано)
	//				|	ТОГДА 3
	//				|ИНАЧЕ 0
	//				|КОНЕЦ КАК КартинкаСтатуса";
	//		
	//		Список.ТекстЗапроса = СтрЗаменить(Список.ТекстЗапроса, """Переменное поле"" КАК ПеременноеПоле", ДопПоля);
	//		
	//		Колонка3 = ПолучитьКолонку(Элементы, "КолонкаСписка00", Тип("ПолеФормы"), Элементы.Список, "Группа3");
	//		Колонка3.ПутьКДанным = "Список.КартинкаСтатуса";
	//		Колонка3.Заголовок = "Статус";
	//		Колонка3.ОтображатьВШапке = Ложь;
	//		Колонка3.Вид = ВидПоляФормы.ПолеКартинки;
	//		Колонка3.КартинкаЗначений = БиблиотекаКартинок.ДействияПриРаботеСЗаказами;
	//		Колонка3.Ширина = 3;
	//		Колонка3.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
	//		
	//		Колонка3 = ПолучитьКолонку(Элементы, "КолонкаСписка0", Тип("ПолеФормы"), Элементы.Список, "Предприятие");
	//		Колонка3.ПутьКДанным = "Список.ТипПлатежа";
	//		Колонка3.Заголовок = "Тип платежа";
	//		Колонка3.Вид = ВидПоляФормы.ПолеНадписи;
	//		Колонка3.Ширина = 6;
	//		
	//		Колонка3 = ПолучитьКолонку(Элементы, "КолонкаСписка2", Тип("ПолеФормы"), Элементы.Список, "Группа5");
	//		Колонка3.ПутьКДанным = "Список.Подразделение";
	//		Колонка3.Вид = ВидПоляФормы.ПолеНадписи;
	//		Колонка3.Заголовок = "Подразделение";
	//		Колонка3.Ширина = 20;
	//		
	//		Колонка3 = ПолучитьКолонку(Элементы, "КолонкаСписка000", Тип("ПолеФормы"), Элементы.Список, "Контрагент");
	//		Колонка3.ПутьКДанным = "Список.Источник";
	//		Колонка3.Вид = ВидПоляФормы.ПолеНадписи;
	//		Колонка3.Заголовок = "Источник";
	//		Колонка3.Ширина = 19;
	//		
	//		Колонка3 = ПолучитьКолонку(Элементы, "КолонкаСписка0000", Тип("ПолеФормы"), Элементы.Список, "Контрагент");
	//		Колонка3.ПутьКДанным = "Список.СтатьяДДС";
	//		Колонка3.Вид = ВидПоляФормы.ПолеНадписи;
	//		Колонка3.Заголовок = "Статья ДДС";
	//		Колонка3.Ширина = 15;
	//		
	//		//Колонка3 = ПолучитьКолонку(Элементы, "КолонкаСписка000", Тип("ПолеФормы"), Элементы.Список, Элементы.Контрагент);
	//		//Колонка3.ПутьКДанным = "Список.БанковскийСчет";
	//		//Колонка3.Вид = ВидПоляФормы.ПолеНадписи;
	//		//Колонка3.Заголовок = "Банковский счет";
	//		//Колонка3.Ширина = 19;
	//		
	//		Колонка3 = ПолучитьКолонку(Элементы, "КолонкаСписка1", Тип("ПолеФормы"), Элементы.Список, Элементы.КолонкаСписка000);
	//		Колонка3.ПутьКДанным = "Список.Организация";
	//		Колонка3.Вид = ВидПоляФормы.ПолеНадписи;
	//		Колонка3.Заголовок = "Организация";
	//		Колонка3.Ширина = 15;
	//		
	//		Колонка3 = ПолучитьКолонку(Элементы, "КолонкаСписка333", Тип("ПолеФормы"), Элементы.Список, "Тема");
	//		Колонка3.ПутьКДанным = "Список.РеестрЗаявок";
	//		Колонка3.Вид = ВидПоляФормы.ПолеНадписи;
	//		Колонка3.Заголовок = "Реестр платежей";
	//		Колонка3.Ширина = 19;
	//		
	//		Колонка3 = ПолучитьКолонку(Элементы, "КолонкаСписка334", Тип("ПолеФормы"), Элементы.Список, "КолонкаСписка333");
	//		Колонка3.ПутьКДанным = "Список.НазначениеПлатежа";
	//		Колонка3.Вид = ВидПоляФормы.ПолеНадписи;
	//		Колонка3.Заголовок = "Назначение платежа";
	//		Колонка3.Высота = 1;
	//		
	//		Колонка3 = ПолучитьКолонку(Элементы, "КолонкаСписка335", Тип("ПолеФормы"), Элементы.Список, "Тема");
	//		Колонка3.ПутьКДанным = "Список.Инициатор";
	//		Колонка3.Вид = ВидПоляФормы.ПолеНадписи;
	//		Колонка3.Заголовок = "Инициатор";
	//		Колонка3.Ширина = 19;
	//		
	//		Колонка3 = ПолучитьКолонку(Элементы, "КолонкаСписка336", Тип("ПолеФормы"), Элементы.Список, "Тема");
	//		Колонка3.ПутьКДанным = "Список.Оплачено";
	//		Колонка3.Вид = ВидПоляФормы.ПолеНадписи;
	//		Колонка3.Заголовок = "Оплачено";
	//		Колонка3.Ширина = 12;
	//		
	//		сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "Фильтр2", "Доступность", Ложь);
	//		сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "ДопИнформация", "Видимость", Ложь);
	//		сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "Контрагент", "Видимость", Истина);
	//		//сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "СписокКорректировок", "Видимость", Ложь);
	//		сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "ЗаявкаТЧ", "Видимость", Ложь);
	//		
	//		ЗаполнитьПоследнимиЗаявками();
	//	Иначе
	//		Заголовок = Фильтр2[0].Значение;
	//		сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "Группа5", "Видимость", Ложь);		
	//		сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "СуммаДокумента", "Видимость", Ложь);
	//		сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "Фильтр2", "Доступность", Ложь);
	//		сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "Контрагент", "Видимость", Ложь);
	//		сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "ДопИнформация", "Видимость", Ложь);
	//		//сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "СписокКорректировок", "Видимость", Ложь);
	//		//Элементы.СписокКорректировокДДУ.Видимость = Ложь;
	//		сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "ЗаявкаТЧ", "Видимость", Ложь);
	//		сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "Группа1", "Видимость", Ложь);
	//		сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "ВидДокумента", "Видимость", Ложь);
	//	КонецЕсли;
	//	
	//	
	//КонецЕсли;
	//УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

&НаСервере
Функция ПолучитьКолонку(Элементы, ИмяКолонки, ТипКолонки, Владелец, ЭлементРодитель)
	Если ТипЗнч(ЭлементРодитель) = Тип("Строка") Тогда
		Если Элементы.Найти(ЭлементРодитель) = Неопределено Тогда	
			ЭлементРодитель = Неопределено;
		Иначе
			ЭлементРодитель = Элементы[ЭлементРодитель];	
		КонецЕсли;		
	КонецЕсли;
	Тк = Элементы.Найти(ИмяКолонки);
	Если Тк = Неопределено Тогда
		Тк = Элементы.Вставить(ИмяКолонки, ТипКолонки, Владелец, ЭлементРодитель);
	Иначе
		Элементы.Удалить(Тк);
		Тк = Элементы.Вставить(ИмяКолонки, ТипКолонки, Владелец, ЭлементРодитель);
	КонецЕсли;
	Возврат Тк;
	
КонецФункции // ()


&НаКлиенте
Процедура ФильтроватьСерверАвтор()
	//Список.Отбор.Элементы.Очистить();
	Список.Параметры.УстановитьЗначениеПараметра("Авторство", Истина);
	Список.Параметры.УстановитьЗначениеПараметра("Согласовано", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("ПринадлежностьПредприятию", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("Оплачено", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("Исполнено", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("ВсеЗаявки", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ФильтроватьСерверСогласование()
	Список.Параметры.УстановитьЗначениеПараметра("Авторство", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("Согласовано", Истина);
	Список.Параметры.УстановитьЗначениеПараметра("ПринадлежностьПредприятию", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("Оплачено", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("Исполнено", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("ВсеЗаявки", Ложь);
КонецПроцедуры

&НаСервере
Процедура ФильтроватьСерверСогласованиеАвтор()
	
	Список.Параметры.УстановитьЗначениеПараметра("Согласовано", Истина);
	Список.Параметры.УстановитьЗначениеПараметра("ПринадлежностьПредприятию", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("Оплачено", Истина);
	Список.Параметры.УстановитьЗначениеПараметра("Авторство", Истина);
	Список.Параметры.УстановитьЗначениеПараметра("Исполнено", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ФильтроватьСервер()
	РеквизитыПользователя = БюджетныйНаСервере.ВернутьРеквизиты(БюджетныйНаСервере.ПолучитьПользователя(), "ДоступныПредприятияИзСписка, ОграничениеПодразделений, ВидимостьПоСогласованию");  
	
	Список.Параметры.УстановитьЗначениеПараметра("Авторство", Истина);
	Список.Параметры.УстановитьЗначениеПараметра("Согласовано", Истина);
	Список.Параметры.УстановитьЗначениеПараметра("ПринадлежностьПредприятию", Истина);
	Список.Параметры.УстановитьЗначениеПараметра("Оплачено", Истина);
	Список.Параметры.УстановитьЗначениеПараметра("Исполнено", Истина);
	Список.Параметры.УстановитьЗначениеПараметра("ВсеЗаявки", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ФильтроватьСерверОплата()
	Список.Параметры.УстановитьЗначениеПараметра("Авторство", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("Согласовано", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("ПринадлежностьПредприятию", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("Оплачено", Истина);
	Список.Параметры.УстановитьЗначениеПараметра("Исполнено", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("ВсеЗаявки", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ФильтроватьСерверИсполнение()
	Список.Параметры.УстановитьЗначениеПараметра("Авторство", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("Согласовано", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("ПринадлежностьПредприятию", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("Оплачено", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("Исполнено", Истина);
	Список.Параметры.УстановитьЗначениеПараметра("ВсеЗаявки", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ФильтрПриИзменении(Элемент)
	Если Фильтр = "Авторство" Тогда
		ФильтроватьСерверАвтор();
	ИначеЕсли Фильтр = "Согласовано вами" Тогда
		ФильтроватьСерверСогласование();
	ИначеЕсли Фильтр = "Неоплаченные" Тогда
		//ФильтроватьСерверНеоплаченные();
	ИначеЕсли Фильтр = "Ознакомление" Тогда
		ФильтроватьСерверОплата();
	ИначеЕсли Фильтр = "Исполненно вами" Тогда
		ФильтроватьСерверИсполнение();
		
	Иначе
		Если БюджетныйНаСервере.ВернутьРеквизит(БюджетныйНаСервере.ПолучитьПользователя(), "ВидимостьПоСогласованию") И НЕ Параметры.Свойство("ТекПлатежка") Тогда
			ФильтроватьСерверСогласованиеАвтор();
		Иначе
			ФильтроватьСервер();
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	//Если НЕ Элементы.Список.ТекущиеДанные = Неопределено Тогда
	//	Согласование.Параметры.УстановитьЗначениеПараметра("Ссылка", Элементы.Список.ТекущаяСтрока);
	//Иначе
	//	Согласование.Параметры.УстановитьЗначениеПараметра("Ссылка", null);
	//КонецЕсли;
	Если Элементы.Список.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекЗаявка = Элементы.Список.ДанныеСтроки(Элементы.Список.ТекущаяСтрока).Ссылка;
	
	ОбработкаПрерыванияПользователя();
	
	ЗаполнитьДеревоМаршрута(ТекЗаявка);
	Коллекция = МаршрутДерево.ПолучитьЭлементы();
	
	Для каждого ТекЭлемент Из Коллекция Цикл
		сабБПКлиентСервер.РазвернутьГруппировкиДерева(Элементы, МаршрутДерево);	
	КонецЦикла;
	
	Если ТипЗнч(ТекЗаявка) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") Тогда
		
		Если НЕ Элементы.Список.ТекущиеДанные = Неопределено Тогда
			ЗаявкаТЧ.Параметры.УстановитьЗначениеПараметра("Ссылка", ТекЗаявка);
		Иначе
			ЗаявкаТЧ.Параметры.УстановитьЗначениеПараметра("Ссылка", Null);
		КонецЕсли;

		СуммаЗаявок = 0;
		
		Для Каждого Заявка Из Элементы.Список.ВыделенныеСтроки Цикл
			СуммаЗаявок = СуммаЗаявок + Элементы.Список.ДанныеСтроки(Заявка).СуммаДокумента;
		КонецЦикла;

	КонецЕсли;
	
	Если Не ТекЗаявка = Неопределено Тогда
		//СписокКорректировок.Параметры.УстановитьЗначениеПараметра("ДокОснование", ТекЗаявка);
		//ЗаполнитьПечать(ТекЗаявка);
	КонецЕсли;
		
	
КонецПроцедуры

#Область РаботаСДеревомМаршрута

&НаСервере
Процедура ЗаполнитьДеревоМаршрута(ТекЗаявка)
	
	МаршрутДерево.ПолучитьЭлементы().Очистить();
	
	Если Не ЗначениеЗаполнено(ТекЗаявка) Тогда
		Возврат;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СогласованиеОбщееДопСогласование.СубъектСогласования,
	|	СогласованиеОбщееДопСогласование.Согласовано,
	|	СогласованиеОбщееДопСогласование.Пройден,
	|	СогласованиеОбщееДопСогласование.Пользователь,
	|	СогласованиеОбщееДопСогласование.Комментарии,
	|	СогласованиеОбщееДопСогласование.НомерСтроки КАК НомерСтроки,
	|	""Согласование"" КАК Тип,
	|	""Согласовать"" КАК НаименованиеЗадачи,
	|	1 КАК Порядок,
	|	СогласованиеОбщееДопСогласование.Ссылка,
	|	СогласованиеОбщееДопСогласование.ДатаВыполнения,
	|	СогласованиеОбщееДопСогласование.МаршрутДвижения,
	|	СогласованиеОбщееДопСогласование.НомерИтерации,
	|	СогласованиеОбщееДопСогласование.Уровень,
	|	СогласованиеОбщееДопСогласование.ТипГруппы,
	|	СогласованиеОбщееДопСогласование.ИДГруппы,
	|	СогласованиеОбщееДопСогласование.СрокВыполнения,
	|	СогласованиеОбщееДопСогласование.ВремяНаВыполнение
	|ИЗ
	|	Справочник.СогласованиеОбщее.ДопСогласование КАК СогласованиеОбщееДопСогласование
	|ГДЕ
	|	СогласованиеОбщееДопСогласование.Ссылка.Заявка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Согласование1ДопСогласование.СубъектСогласования,
	|	Согласование1ДопСогласование.Согласовано,
	|	Согласование1ДопСогласование.Пройден,
	|	Согласование1ДопСогласование.Пользователь,
	|	Согласование1ДопСогласование.Комментарии,
	|	Согласование1ДопСогласование.НомерСтроки,
	|	""Согласование"",
	|	""Согласовать"",
	|	1,
	|	Согласование1ДопСогласование.Ссылка,
	|	Согласование1ДопСогласование.ДатаВыполнения,
	|	Согласование1ДопСогласование.МаршрутДвижения,
	|	Согласование1ДопСогласование.НомерИтерации,
	|	Согласование1ДопСогласование.Уровень,
	|	Согласование1ДопСогласование.ТипГруппы,
	|	Согласование1ДопСогласование.ИДГруппы,
	|	Согласование1ДопСогласование.СрокВыполнения,
	|	Согласование1ДопСогласование.ВремяНаВыполнение
	|ИЗ
	|	Справочник.Согласование1.ДопСогласование КАК Согласование1ДопСогласование
	|ГДЕ
	|	Согласование1ДопСогласование.Ссылка.Заявка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Согласование2ДопСогласование.СубъектСогласования,
	|	Согласование2ДопСогласование.Согласовано,
	|	Согласование2ДопСогласование.Пройден,
	|	Согласование2ДопСогласование.Пользователь,
	|	Согласование2ДопСогласование.Комментарии,
	|	Согласование2ДопСогласование.НомерСтроки,
	|	""Согласование"",
	|	""Согласовать"",
	|	1,
	|	Согласование2ДопСогласование.Ссылка,
	|	NULL,
	|	Согласование2ДопСогласование.МаршрутДвижения,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	Справочник.Согласование2.ДопСогласование КАК Согласование2ДопСогласование
	|ГДЕ
	|	Согласование2ДопСогласование.Ссылка.Заявка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаявкиАдминистраторуДопСогласование.СубъектСогласования,
	|	ЗаявкиАдминистраторуДопСогласование.Согласовано,
	|	ЗаявкиАдминистраторуДопСогласование.Пройден,
	|	ЗаявкиАдминистраторуДопСогласование.Пользователь,
	|	ЗаявкиАдминистраторуДопСогласование.Комментарии,
	|	ЗаявкиАдминистраторуДопСогласование.НомерСтроки,
	|	""Согласование"",
	|	""Согласовать"",
	|	1,
	|	ЗаявкиАдминистраторуДопСогласование.Ссылка,
	|	ЗаявкиАдминистраторуДопСогласование.ДатаВыполнения,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	Справочник.ЗаявкиАдминистратору.ДопСогласование КАК ЗаявкиАдминистраторуДопСогласование
	|ГДЕ
	|	ЗаявкиАдминистраторуДопСогласование.Ссылка.Заявка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", ТекЗаявка);
	
	Результат = Запрос.Выполнить();
	ВыборкаСогл = Результат.Выгрузить();
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СогласованиеОбщееДопИсполнение.Исполнитель КАК Исполнитель,
	|	СогласованиеОбщееДопИсполнение.Исполнено КАК Исполнено,
	|	СогласованиеОбщееДопИсполнение.Пройдено КАК Пройдено,
	|	СогласованиеОбщееДопИсполнение.Пользователь,
	|	СогласованиеОбщееДопИсполнение.Комментарии,
	|	СогласованиеОбщееДопИсполнение.НомерСтроки КАК НомерСтроки,
	|	""Исполнение"" КАК Тип,
	|	СогласованиеОбщееДопИсполнение.НаименованиеЗадачи КАК НаименованиеЗадачи,
	|	2 КАК Порядок,
	|	СогласованиеОбщееДопИсполнение.Ссылка,
	|	СогласованиеОбщееДопИсполнение.НомерИтерации,
	|	СогласованиеОбщееДопИсполнение.Уровень,
	|	СогласованиеОбщееДопИсполнение.ТипГруппы,
	|	СогласованиеОбщееДопИсполнение.ИДГруппы
	|ИЗ
	|	Справочник.СогласованиеОбщее.ДопИсполнение КАК СогласованиеОбщееДопИсполнение
	|ГДЕ
	|	СогласованиеОбщееДопИсполнение.Ссылка.Заявка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Согласование1ДопИсполнение.Исполнитель,
	|	Согласование1ДопИсполнение.Исполнено,
	|	Согласование1ДопИсполнение.Пройдено,
	|	Согласование1ДопИсполнение.Пользователь,
	|	Согласование1ДопИсполнение.Комментарии,
	|	Согласование1ДопИсполнение.НомерСтроки,
	|	""Исполнение"",
	|	Согласование1ДопИсполнение.НаименованиеЗадачи,
	|	2,
	|	Согласование1ДопИсполнение.Ссылка,
	|	Согласование1ДопИсполнение.НомерИтерации,
	|	Согласование1ДопИсполнение.Уровень,
	|	Согласование1ДопИсполнение.ТипГруппы,
	|	Согласование1ДопИсполнение.ИДГруппы
	|ИЗ
	|	Справочник.Согласование1.ДопИсполнение КАК Согласование1ДопИсполнение
	|ГДЕ
	|	Согласование1ДопИсполнение.Ссылка.Заявка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", ТекЗаявка);
	
	Результат = Запрос.Выполнить();
	ВыборкаИсп = Результат.Выгрузить();
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СогласованиеОбщееДопОповещение.Оповещен КАК Оповещен,
	|	СогласованиеОбщееДопОповещение.Оповещен КАК Пройдено,
	|	СогласованиеОбщееДопОповещение.Пользователь,
	|	СогласованиеОбщееДопОповещение.НомерСтроки КАК НомерСтроки,
	|	""Ознакомление"" КАК Тип,
	|	""Ознакомиться"" КАК НаименованиеЗадачи,
	|	3 КАК Порядок,
	|	СогласованиеОбщееДопОповещение.Ссылка,
	|	СогласованиеОбщееДопОповещение.НомерИтерации,
	|	СогласованиеОбщееДопОповещение.Уровень,
	|	СогласованиеОбщееДопОповещение.ТипГруппы,
	|	СогласованиеОбщееДопОповещение.ИДГруппы
	|ИЗ
	|	Справочник.СогласованиеОбщее.ДопОповещение КАК СогласованиеОбщееДопОповещение
	|ГДЕ
	|	СогласованиеОбщееДопОповещение.Ссылка.Заявка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Согласование1ДопОповещение.Оповещен,
	|	NULL,
	|	Согласование1ДопОповещение.Пользователь,
	|	Согласование1ДопОповещение.НомерСтроки,
	|	""Ознакомление"",
	|	""Ознакомиться"",
	|	3,
	|	Согласование1ДопОповещение.Ссылка,
	|	Согласование1ДопОповещение.НомерИтерации,
	|	Согласование1ДопОповещение.Уровень,
	|	Согласование1ДопОповещение.ТипГруппы,
	|	NULL
	|ИЗ
	|	Справочник.Согласование1.ДопОповещение КАК Согласование1ДопОповещение
	|ГДЕ
	|	Согласование1ДопОповещение.Ссылка.Заявка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	NULL,
	|	Согласование2Адресаты.Пользователь,
	|	Согласование2Адресаты.НомерСтроки,
	|	""Ознакомление"",
	|	""Ознакомиться"",
	|	3,
	|	Согласование2Адресаты.Ссылка,
	|	Согласование2Адресаты.НомерИтерации,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	Справочник.Согласование2.Адресаты КАК Согласование2Адресаты
	|ГДЕ
	|	Согласование2Адресаты.Ссылка.Заявка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаявкиАдминистраторуДопОповещение.Оповещен,
	|	ЗаявкиАдминистраторуДопОповещение.Оповещен,
	|	ЗаявкиАдминистраторуДопОповещение.Пользователь,
	|	ЗаявкиАдминистраторуДопОповещение.НомерСтроки,
	|	""Ознакомление"",
	|	""Ознакомиться"",
	|	3,
	|	ЗаявкиАдминистраторуДопОповещение.Ссылка,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	Справочник.ЗаявкиАдминистратору.ДопОповещение КАК ЗаявкиАдминистраторуДопОповещение
	|ГДЕ
	|	ЗаявкиАдминистраторуДопОповещение.Ссылка.Заявка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", ТекЗаявка);
	
	Результат = Запрос.Выполнить();
	ВыборкаОзн = Результат.Выгрузить();
	
	
	
	ДопСогласование.Очистить();
	Для каждого ТекСтрока Из ВыборкаСогл Цикл
		НоваяСтрока = ДопСогласование.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		БизнесПроцесс = ТекСтрока.Ссылка;
	КонецЦикла; 
	
	ДопИсполнение.Очистить();
	Для каждого ТекСтрока Из ВыборкаИсп Цикл
		НоваяСтрока = ДопИсполнение.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		БизнесПроцесс = ТекСтрока.Ссылка;
	КонецЦикла; 
	
	ДопОповещение.Очистить();
	Для каждого ТекСтрока Из ВыборкаОзн Цикл
		НоваяСтрока = ДопОповещение.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		БизнесПроцесс = ТекСтрока.Ссылка;
	КонецЦикла;
	
	ЗаполнитьСложныйМаршрут();
	
	
	//проставляем итоговых согласования, исполнения и ознакомления
	Элементы1Уровня = МаршрутДерево.ПолучитьЭлементы();
	Для каждого ТекЭлемент1Уровня Из Элементы1Уровня Цикл
		//Если ТекЭлемент1Уровня.Тип = "Согласование" Тогда
		Согласовано = Неопределено;
		Элементы2Уровня = ТекЭлемент1Уровня.ПолучитьЭлементы();
		Если Элементы2Уровня.Количество() Тогда
			Согласовано = Истина;
		КонецЕсли;
		Для каждого ТекЭлемент2Уровня Из Элементы2Уровня Цикл
			Если НЕ ТекЭлемент2Уровня.Пройден И НЕ ТекЭлемент2Уровня.Согласовано Тогда
				Согласовано = Неопределено;
				Прервать;
			ИначеЕсли НЕ ТекЭлемент2Уровня.Согласовано Тогда
				Согласовано = Ложь;	
			КонецЕсли;
		КонецЦикла;
		ТекЭлемент1Уровня.Пройден = Согласовано;
		ТекЭлемент1Уровня.Согласовано = Согласовано;
		//КонецЕсли;		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСложныйМаршрут()
	
	//очищаем тек маршрут
	Тек = МаршрутДерево.ПолучитьЭлементы();
	Тек.Очистить();
	
	ТекМассМаршрутов = Новый Массив;
	ТекМассМаршрутов.Добавить(ЭтаФорма); 
	
	Для каждого ТекМаршрутСтрока Из ТекМассМаршрутов Цикл
		сабБПКлиентСервер.ДобавитьДеревоМаршрута(Элементы, Команды, ТекущаяСтрокаГруппы, МаршрутДерево, ТекМаршрутСтрока, Неопределено, Новый Структура("КнопкиУправления, ДопУсловияВидимость, ТолькоПросмотр, Согласовано", Ложь, Ложь, Истина, Истина) );
	КонецЦикла;
	

КонецПроцедуры

&НаКлиенте
Процедура СообщениеПользователю(Команда)
	
	ЗначениеЧто = МаршрутДерево.НайтиПоИдентификатору(Элементы.ТаблицаФормы123.ТекущаяСтрока);
	ПодчиненныеЭлементыДерева = ЗначениеЧто.ПолучитьЭлементы();
	МассивПользователей = Новый Массив;
	Если ПодчиненныеЭлементыДерева.Количество() > 0 Тогда
		Для каждого ТекСтрока Из ПодчиненныеЭлементыДерева Цикл
			МассивПользователей.Добавить(ТекСтрока.Пользователь);		
		КонецЦикла; 		
	Иначе
		МассивПользователей.Добавить(Элементы.ТаблицаФормы123.ТекущиеДанные.Пользователь);
	КонецЕсли;
	Если МассивПользователей.Количество() Тогда
		БюджетныйНаКлиенте.УниверсальноеВыполнениеКоманды(МассивПользователей, "Справочник.Пользователи.Команда.СообщениеПользователю", Новый Структура("Документ", Элементы.Список.ТекущаяСтрока) );	
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

&НаСервере
Функция ЕстьЭлемент(КоллекцияЭлементов, НаименованиеПункта)
	Для каждого ТекЭлемент Из КоллекцияЭлементов Цикл
		Если ТекЭлемент.Тип = НаименованиеПункта Тогда
			Возврат ТекЭлемент;	
		КонецЕсли;	
	КонецЦикла; 
	Возврат Неопределено;	
КонецФункции // ()

&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)
	УстановитьПользователя();
КонецПроцедуры

&НаСервере
Процедура УстановитьПользователя()
	ПараметрыСеанса.ТекущийПользователь = Пользователь;
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = Ложь;
	//Если Поле.Имя = "Корректировка" Тогда
	//	ОткрытьЗначение(Элементы.Список.ТекущиеДанные.Корректировка);
	//ИначеЕсли Поле.Имя = "ПР_Отгрузка" Тогда
	//	ОткрытьЗначение(Элементы.Список.ТекущиеДанные.ПР_Отгрузка);
	//ИначеЕсли Поле.Имя = "УЧ_Отгрузка" Тогда
	//	ОткрытьЗначение(Элементы.Список.ТекущиеДанные.УЧ_Отгрузка);
	//КонецЕсли;
	//
	//ТекДок = Элементы.Список.ДанныеСтроки(Элементы.Список.ТекущаяСтрока).Ссылка;
	//ПоказатьЗначение(, ТекДок); 
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда
		
		ТекДок = Элементы.Список.ДанныеСтроки(Элементы.Список.ТекущаяСтрока).Ссылка;
		
		//Если ТипЗнч(ТекДок) = Тип("ДокументСсылка.Д_СлужебнаяЗаписка") Тогда
			//МассивСЗ = Новый Массив;
			//МассивСЗ.Добавить(ПредопределенноеЗначение("Справочник.Д_ВидыВнутреннихДокументов.СлужебнаяЗаписка"));
			//МассивСЗ.Добавить(ПредопределенноеЗначение("Справочник.Д_ВидыВнутреннихДокументов.Объяснительная"));
			//МассивСЗ.Добавить(ПредопределенноеЗначение("Справочник.Д_ВидыВнутреннихДокументов.ИнформационноеПисьмо"));
			
			РеквСЗ = БюджетныйНаСервере.ВернутьРеквизиты(ТекДок, "ВидСЗ, ВидСЗ.ИмяДокумента");
			
			//Если МассивСЗ.Найти(РеквСЗ.ВидСЗ) = Неопределено Тогда
			Отказ = Истина;
			ТекФормаБП = ПолучитьФорму("Документ." + РеквСЗ.ВидСЗИмяДокумента + ".ФормаОбъекта", Новый Структура("ЗначениеКопирования", ТекДок));
			ДанныеФормы = ТекФормаБП.Объект;
			ЗаполнитьНаСервере(ДанныеФормы, ТекДок, ?(ТипЗнч(ТекДок) = Тип("ДокументСсылка.Д_СлужебнаяЗаписка"), ТекФормаБП.ТекстФормат, Неопределено));
			//КопироватьДанныеФормы(ДанныеФормы, ТекФормаБП.Объект);
			//ТекФормаБП.Объект.Номер = "";
			ТекФормаБП.Открыть();
			//КонецЕсли;
		//КонецЕсли;
		
		//для облегчения заполнения маршрута
		БюджетныйНаКлиенте.ДобавитьМаршрутВХранилище(ТекДок, Копирование);
		
	Иначе
		Отказ = Истина;
		Если СписокТиповДокументов.Количество() = 1 Тогда
			РеквизитыВида = БюджетныйНаСервере.ВернутьРеквизиты(СписокТиповДокументов[0].Значение, "ИмяДокумента");
			ТекФорма = ПолучитьФорму("Документ." + РеквизитыВида.ИмяДокумента + ".ФормаОбъекта", Новый Структура("ВидСЗ", СписокТиповДокументов[0].Значение));
			//Если ТекФорма.Объект.Свойство("ВидСЗ") Тогда
			//	ТекФорма.Объект.ВидСЗ = СтруктураТиповДокументов[0].Ссылка;
			//КонецЕсли;
			ТекФорма.Открыть();
		КонецЕсли;
		//ОткрытьЗначение(Элементы.Создать);
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере(ДанныеФормы, Основание, ТекстФормат)
	Для каждого ТекРеквизит Из Основание.Метаданные().Реквизиты Цикл
		Попытка
			ДанныеФормы[ТекРеквизит.Имя] = Основание[ТекРеквизит.Имя];
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Для каждого ТекРеквизит Из Основание.Метаданные().СтандартныеРеквизиты Цикл
		Попытка
			ДанныеФормы[ТекРеквизит.Имя] = Основание[ТекРеквизит.Имя];
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Для каждого ТекТЧ Из Основание.Метаданные().ТабличныеЧасти Цикл
		Для каждого ТекСтрока Из Основание[ТекТЧ.Имя] Цикл
			НоваяСтрока = ДанныеФормы[ТекТЧ.Имя].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);	
		КонецЦикла;
	КонецЦикла;
	ДанныеФормы.Дата = ТекущаяДата();
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.Д_СлужебнаяЗаписка") Тогда
		ТекстФормат = Основание.ТекстФорматированный.Получить();
	КонецЕсли;
	
КонецПроцедуры


///////////////////////////работа с кнопкой СОЗДАТЬ//////////////////////////////////
&НаСервере
Процедура ЗаполнитьВидыОпераций(Родитель = Неопределено)
	
	СтруктураДоков = СписокВидовСЗ(Родитель, СписокТиповДокументов.ВыгрузитьЗначения());
	
	//заполняем фильтр
	Для каждого ТекСтрока Из СтруктураДоков Цикл
		Если СписокТиповДокументов.НайтиПоЗначению(ТекСтрока.Ссылка) = Неопределено Тогда
			СписокТиповДокументов.Добавить(ТекСтрока.Ссылка, ТекСтрока.Наименование);	
		КонецЕсли;
	КонецЦикла;//конец заполнения фильтра 
	
	ОдинДокумент = СписокТиповДокументов.Количество() = 1;
	
	Элементы.ФормаСоздать.Видимость = ОдинДокумент;
	
	Если ОдинДокумент Тогда
		Возврат;	
	КонецЕсли;
	
	ИндексКоманды = 0;
	Для Каждого ВидОперации Из СтруктураДоков Цикл
		Если ВидОперации.ЭтоРодитель Тогда
			НоваяКнопка = Элементы.Найти("Команда" + ВидОперации.Код);
			Если НоваяКнопка = Неопределено Тогда
				НоваяКнопка = Элементы.Добавить("Команда" + ВидОперации.Код, Тип("ГруппаФормы"), ?(Родитель = Неопределено, Элементы.Создать, Элементы["Команда" + ВидОперации.РодительКод]));
			Иначе	
				НоваяКнопка.Видимость = Истина;	
			КонецЕсли;
			НоваяКнопка.Заголовок = ВидОперации.Наименование;
			ЗаполнитьВидыОпераций(ВидОперации.Ссылка);
		Иначе
			НоваяКоманда = Команды.Найти("Команда" + ВидОперации.Код);
			Если НоваяКоманда = Неопределено Тогда
				НоваяКоманда = Команды.Добавить("Команда" + ВидОперации.Код);
			КонецЕсли;
			НоваяКоманда.Действие  = "ВыборВидаОперации";
			НоваяКнопка = Элементы.Найти("Команда" + ВидОперации.Код);
			Если НоваяКнопка = Неопределено Тогда
				НоваяКнопка = Элементы.Добавить("Команда" + ВидОперации.Код, Тип("КнопкаФормы"),?(Родитель = Неопределено, Элементы.Создать, Элементы["Команда" + ВидОперации.РодительКод]));
			Иначе	
				НоваяКнопка.Видимость = Истина;	
			КонецЕсли;
			НоваяКнопка.Заголовок = ВидОперации.Наименование;
			НоваяКнопка.ИмяКоманды = "Команда" + ВидОперации.Код;
		КонецЕсли;
    КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыборВидаОперации(Команда)
	
	СтруктураТиповДокументов = ПодобратьТипДокумента(Прав(Команда.Имя, СтрДлина(Команда.Имя) - 7));
	Если СтруктураТиповДокументов.Количество() Тогда
		Если ЗначениеЗаполнено(СтруктураТиповДокументов[0].РодительИмяДокумента) Тогда
			ТекФорма = ПолучитьФорму("Документ." + СтруктураТиповДокументов[0].РодительИмяДокумента + ".ФормаОбъекта", Новый Структура("ВидСЗ", СтруктураТиповДокументов[0].Ссылка));
		    ТекФорма.Объект.ВидСЗ = СтруктураТиповДокументов[0].Ссылка;
			ТекФорма.Открыть();
		Иначе
			ТекФорма = ПолучитьФорму("Документ." + СтруктураТиповДокументов[0].ИмяДокумента + ".ФормаОбъекта", Новый Структура("ВидСЗ", СтруктураТиповДокументов[0].Ссылка));
			//Если ТекФорма.Объект.Свойство("ВидСЗ") Тогда
			//	ТекФорма.Объект.ВидСЗ = СтруктураТиповДокументов[0].Ссылка;
			//КонецЕсли;
			ТекФорма.Открыть();
		КонецЕсли;
	Иначе
		Предупреждение("Документ не найден!");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодобратьТипДокумента(КодЭлемента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Д_ВидыВнутреннихДокументов.Ссылка,
	|	Д_ВидыВнутреннихДокументов.ИмяДокумента,
	|	Д_ВидыВнутреннихДокументов.Родитель.ИмяДокумента
	|ИЗ
	|	Справочник.Д_ВидыВнутреннихДокументов КАК Д_ВидыВнутреннихДокументов
	|ГДЕ
	|	Д_ВидыВнутреннихДокументов.Код = &Код";
	
	Запрос.УстановитьПараметр("Код", КодЭлемента);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	МассивДанных = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		Стр = Новый Структура;
		Стр.Вставить("Ссылка", Выборка.Ссылка);
		Стр.Вставить("ИмяДокумента", Выборка.ИмяДокумента);
		Стр.Вставить("РодительИмяДокумента", Выборка.РодительИмяДокумента);
		МассивДанных.Добавить(Стр);
		
	КонецЦикла;
	Возврат МассивДанных;
	
КонецФункции

&НаСервереБезКонтекста
Функция СписокВидовСЗ(Родитель, Фильтр)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Д_ВидыВнутреннихДокументов.Ссылка КАК Ссылка,
	               |	Д_ВидыВнутреннихДокументов.Наименование,
	               |	Д_ВидыВнутреннихДокументов.Код,
	               |	ВЫБОР
	               |		КОГДА Д_ВидыВнутреннихДокументов.Ссылка В
	               |				(ВЫБРАТЬ
	               |					Д_ВидыВнутреннихДокументов.Родитель
	               |				ИЗ
	               |					Справочник.Д_ВидыВнутреннихДокументов КАК Д_ВидыВнутреннихДокументов)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ЭтоРодитель,
	               |	Д_ВидыВнутреннихДокументов.Родитель.Код,
	               |	Д_ВидыВнутреннихДокументов.ИмяДокумента
	               |ИЗ
	               |	Справочник.Д_ВидыВнутреннихДокументов КАК Д_ВидыВнутреннихДокументов
	               |ГДЕ
	               |	Д_ВидыВнутреннихДокументов.Родитель = &Родитель
	               |	И ВЫБОР
	               |			КОГДА ""Все документы"" В (&Фильтр)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ Д_ВидыВнутреннихДокументов.Ссылка В ИЕРАРХИИ (&Фильтр)
	               |		КОНЕЦ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Родитель", ?(Родитель = Неопределено, Справочники.Д_ВидыВнутреннихДокументов.ПустаяСсылка(), Родитель));
	Запрос.УстановитьПараметр("Фильтр", Фильтр);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	МассивСтруктуры = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Попытка
			Если НЕ ПравоДоступа("Добавление", Метаданные.Документы[Выборка.ИмяДокумента]) Тогда
				Продолжить;	
			КонецЕсли;
		Исключение
			Продолжить;
		КонецПопытки;
		СтруктураДоков = Новый Структура;
		СтруктураДоков.Вставить("Ссылка", Выборка.Ссылка);
		СтруктураДоков.Вставить("Наименование", Выборка.Наименование);
		СтруктураДоков.Вставить("Код", Выборка.Код);
		СтруктураДоков.Вставить("ЭтоРодитель", Выборка.ЭтоРодитель);
		СтруктураДоков.Вставить("РодительКод", Выборка.РодительКод);
		МассивСтруктуры.Добавить(СтруктураДоков);
	КонецЦикла;
	Возврат МассивСтруктуры;
	
КонецФункции // ()

///////////////////////////конец работы с кнопкой СОЗДАТЬ///////////////////////////

&НаКлиенте
Процедура МаршрутДеревоПриАктивизацииСтроки(Элемент)
	Если НЕ Элементы.МаршрутДерево.ТекущиеДанные = Неопределено Тогда
		Пользователь = Элементы.МаршрутДерево.ТекущиеДанные.СубъектСогласования;
	Иначе
		Пользователь = Неопределено;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	Если НЕ Элементы.Список.ТекущиеДанные = Неопределено Тогда
		БюджетныйНаКлиенте.УниверсальнаяПечать(Элементы.Список.ВыделенныеСтроки, Истина);	
	КонецЕсли;
КонецПроцедуры


///////////////////////////работа с фильтром2//////////////////////////////////
&НаКлиенте
Процедура Фильтр2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("РегистрСведений.ВнутренниеДокументы.Форма.ФормаФильтраДокументов", Новый Структура("Фильтр2, СписокТиповДокументов", Фильтр2, СписокТиповДокументов));
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ПередатьФильтр2" Тогда
		Фильтр2.ЗагрузитьЗначения(Параметр.Фильтр2);
		УстановитьОтборПоТипам(Параметр);
	ИначеЕсли ИмяСобытия = "ОбновитьСписокЗадач" Тогда
		Элементы.Список.Обновить();
		СписокПриАктивизацииСтроки(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоТипам(Фильтр)
	ФильтрИмена = Фильтр.ФильтрИмена;
	Список.Отбор.Элементы.Очистить();
	Если Фильтр2.НайтиПоЗначению("Все документы") = Неопределено Тогда
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений2 = Новый СписокЗначений;
		Для каждого ТекСтрока Из ФильтрИмена Цикл
			СписокЗначений.Добавить(Тип("ДокументСсылка." + ТекСтрока));
		КонецЦикла;
		Для каждого ТекСтрока Из Фильтр.Фильтр2 Цикл
			СписокЗначений2.Добавить(ТекСтрока);
		КонецЦикла; 
		НовыйОтбор = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Тип");
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		НовыйОтбор.ПравоеЗначение = СписокЗначений;
		
		НовыйОтбор = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидДокумента");
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		НовыйОтбор.ПравоеЗначение = СписокЗначений2;
		
	КонецЕсли;
КонецПроцедуры
///////////////////////////конец работы с фильтром2//////////////////////////////////

/////////////работа с расширенным фильтром


&НаКлиенте
Процедура РасширенныйПоиск(Команда)
	
	ПараметрыРасширенногоПоиска = ОткрытьФормуМодально("Документ.Д_ЗаявкаНаОплату.Форма.ФормаРасширенногоПоиска", Новый Структура("Включен", Элементы.ФормаРасширенныйПоиск.Пометка));
	
	Если НЕ ПараметрыРасширенногоПоиска = Неопределено Тогда
		
		Если Не ПараметрыРасширенногоПоиска.ОтменаПоиска Тогда
			УстановитьПараметрыРасширенногоПоиска(ПараметрыРасширенногоПоиска);
			Элементы.ФормаРасширенныйПоиск.Пометка = Истина;
		Иначе
			УстановитьПараметрыРасширенногоПоиска();
			Элементы.ФормаРасширенныйПоиск.Пометка = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКорректировокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	//Отказ = Истина;
	//ТекЗаявка = Элементы.Список.ТекущаяСтрока;
	//Если НЕ ТекЗаявка = Неопределено Тогда
	//	ТекФорма = ПолучитьФорму("Документ.Д_КорректировкаДокумента.ФормаОбъекта");
	//	ТекФорма.Объект.ДокОснование = ТекЗаявка;
	//	ТекФорма.Открыть();
	//
	//КонецЕсли;
КонецПроцедуры


////////////конец работы с расширенным фильтром

&НаСервере
Процедура ЗаполнитьПечать(ТекЗаявка)
	
	Если ТипЗнч(ТекЗаявка) = Тип("Структура") ИЛИ ТипЗнч(ТекЗаявка) = Тип("ФиксированнаяСтруктура") ИЛИ ТипЗнч(ТекЗаявка) = Тип("ДанныеФормыСтруктура") Тогда
		Если ТипЗнч(ТекЗаявка.ВидВнутреннегоДокумента) = Тип("Строка") Тогда
			Если НЕ Элементы.Найти("КомандаПечати") = Неопределено Тогда
				Элементы.Удалить(Элементы["КомандаПечати"]);
			КонецЕсли;
			Возврат;
		Иначе	
			ТекДокумент = Документы[ТекЗаявка.ВидВнутреннегоДокумента.ИмяДокумента].ПустаяСсылка();
		КонецЕсли;
	Иначе
		ТекДокумент = ТекЗаявка;
	КонецЕсли;
	
	СписокКоманд.Очистить();
	//Метаданные.Документы.Д_ЗаявкаНаОплату.Команды.ПечатьБезНал.ИзменяетДанные
	
	Если НЕ Элементы.Найти("КомандаПечати") = Неопределено Тогда
		Элементы.Удалить(Элементы["КомандаПечати"]);
	КонецЕсли;
	
	МассивКоманд = Новый Массив;
	
	//Если Не ЗначениеЗаполнено(ТекЗаявка) Тогда
	//	Возврат; //прерываем заполнение
	//КонецЕсли;
	СписокКоманды = ТекДокумент.Метаданные().Команды;
	Для каждого ТекКоманда Из СписокКоманды Цикл
		Если Найти(Строка(ТекКоманда.Группа), "Печать") И ПравоДоступа("Просмотр", ТекКоманда) Тогда
			МассивКоманд.Добавить(ТекКоманда);		
		КонецЕсли;
	КонецЦикла;
	
	СписокКоманды = Метаданные.Документы.Д_ЗаявкаНаОплату.Команды;
	Для каждого ТекКоманда Из СписокКоманды Цикл
		Если ТекКоманда.ТипПараметраКоманды.СодержитТип(ТипЗнч(ТекДокумент)) И Найти(Строка(ТекКоманда.Группа), "Печать") И ПравоДоступа("Просмотр", ТекКоманда) Тогда
			Если МассивКоманд.Найти(ТекКоманда) = Неопределено Тогда
				МассивКоманд.Добавить(ТекКоманда);		
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СписокКоманды = Метаданные.Документы.Д_СлужебнаяЗаписка.Команды;
	Для каждого ТекКоманда Из СписокКоманды Цикл
		Если ТекКоманда.ТипПараметраКоманды.СодержитТип(ТипЗнч(ТекДокумент)) И Найти(Строка(ТекКоманда.Группа), "Печать") И ПравоДоступа("Просмотр", ТекКоманда) Тогда
			Если МассивКоманд.Найти(ТекКоманда) = Неопределено Тогда
				МассивКоманд.Добавить(ТекКоманда);		
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ВремСп = Новый СписокЗначений;
	ВремСп.ЗагрузитьЗначения(МассивКоманд);
	ВремСп.СортироватьПоЗначению();
	МассивКоманд = ВремСп.ВыгрузитьЗначения();	

	
	НоваяКнопка = Элементы.Добавить("КомандаПечати", Тип("ГруппаФормы"), Элементы.Печать);
	НоваяКнопка.Заголовок = "Команды документа";
	
	
	Индекс = 0;
	Для каждого ТекСтрока Из МассивКоманд Цикл
		Если Команды.Найти(ТекСтрока.Имя + Строка(Индекс)) = Неопределено Тогда
			НоваяКоманда = Команды.Добавить(ТекСтрока.Имя + Строка(Индекс));
			НоваяКоманда.Действие  = "ИндивидуальнаяКоманда";
		КонецЕсли;
		НоваяКнопка = Элементы.Добавить(ТекСтрока.Имя + Строка(Индекс), Тип("КнопкаФормы"),Элементы["КомандаПечати"]);
		НоваяКнопка.Заголовок = ?(ЗначениеЗаполнено(ТекСтрока.Синоним), ТекСтрока.Синоним, ТекСтрока.Имя);
		НоваяКнопка.ИмяКоманды = ТекСтрока.Имя + Строка(Индекс);
		СписокКоманд.Добавить(ТекСтрока.ПолноеИмя());
		Индекс = Индекс + 1;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ИндивидуальнаяКоманда(Команда)
	ТекЗаявка = Элементы.Список.ВыделенныеСтроки;
	Если НЕ ТекЗаявка = Неопределено Тогда
		БюджетныйНаКлиенте.УниверсальноеВыполнениеКоманды(ТекЗаявка, СписокКоманд[Число(Прав(Команда.Имя, 1))].Значение);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокКорректировокДДУПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	ТекСтрока = Элементы.Список.ТекущаяСтрока;
	Если ТипЗнч(ТекСтрока) = Тип("ДокументСсылка.УЧ_Стр_ДоговорДолевогоУчастия") Тогда
		Если Параметр = Тип("ДокументСсылка.Стр_ДДУГрафик") Тогда
			ОткрытьФорму("Документ.Стр_ДДУГрафик.ФормаОбъекта", Новый Структура("Основание", ТекСтрока));
		КонецЕсли;
		Если Параметр = Тип("ДокументСсылка.Стр_ДДУКорректировка") Тогда
			ОткрытьФорму("Документ.Стр_ДДУКорректировка.ФормаОбъекта", Новый Структура("Основание", ТекСтрока));
		КонецЕсли;
		Если Параметр = Тип("ДокументСсылка.Стр_ДДУПереуступка") Тогда
			ОткрытьФорму("Документ.Стр_ДДУПереуступка.ФормаОбъекта", Новый Структура("Основание", ТекСтрока));
		КонецЕсли;
		Если Параметр = Тип("ДокументСсылка.Стр_ДДУРасторжение") Тогда
			ОткрытьФорму("Документ.Стр_ДДУРасторжение.ФормаОбъекта", Новый Структура("Основание", ТекСтрока));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УстановитьПараметрыРасширенногоПоиска(ПараметрыРасширенногоПоиска = Неопределено)
	
	Если ТипЗнч(ПараметрыРасширенногоПоиска) = Тип("Структура") И ЗначениеЗаполнено(ПараметрыРасширенногоПоиска.ОтменаПоиска) Тогда
		Список.Параметры.УстановитьЗначениеПараметра("Источник", ?(ЗначениеЗаполнено(ПараметрыРасширенногоПоиска.Источник), ПараметрыРасширенногоПоиска.Источник, Null));
		Список.Параметры.УстановитьЗначениеПараметра("Контрагент", ?(ЗначениеЗаполнено(ПараметрыРасширенногоПоиска.Контрагент), ПараметрыРасширенногоПоиска.Контрагент, Null));
		Список.Параметры.УстановитьЗначениеПараметра("Основание", ?(ЗначениеЗаполнено(ПараметрыРасширенногоПоиска.Основание), "%" + ПараметрыРасширенногоПоиска.Основание + "%", Null) );
		Список.Параметры.УстановитьЗначениеПараметра("Примечание", ?(ЗначениеЗаполнено(ПараметрыРасширенногоПоиска.Примечание),"%" +  ПараметрыРасширенногоПоиска.Примечание + "%", Null));
		Список.Параметры.УстановитьЗначениеПараметра("ЦФО", ?(ЗначениеЗаполнено(ПараметрыРасширенногоПоиска.ЦФО), ПараметрыРасширенногоПоиска.ЦФО, Null));
		Список.Параметры.УстановитьЗначениеПараметра("РасширенныйПоискПоЗаявкамНаОплату", Истина);
	Иначе
		Список.Параметры.УстановитьЗначениеПараметра("Источник", Null);
		Список.Параметры.УстановитьЗначениеПараметра("Контрагент", Null);
		Список.Параметры.УстановитьЗначениеПараметра("Основание", Null);
		Список.Параметры.УстановитьЗначениеПараметра("Примечание", Null);
		Список.Параметры.УстановитьЗначениеПараметра("ЦФО", Null);
		Список.Параметры.УстановитьЗначениеПараметра("РасширенныйПоискПоЗаявкамНаОплату", Ложь);
		Элементы.ФормаРасширенныйПоиск.Пометка = Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СтруктураДокументовПриАктивизацииСтроки(Элемент)
	Если Не ЗначениеЗаполнено(ТекЗначениеСтруктуры) Тогда
		ТекЗначениеСтруктуры = Элементы.СтруктураДокументов.ТекущиеДанные.Значение;
		Возврат;	
	КонецЕсли;
	
	Если НЕ ТекЗначениеСтруктуры = Элементы.СтруктураДокументов.ТекущиеДанные.Значение Тогда
		СписокТиповДокументов.Очистить();
		ТекЗначениеСтруктуры = Элементы.СтруктураДокументов.ТекущиеДанные.Значение;	
		Фильтр2.Очистить();
		Если Элементы.СтруктураДокументов.ТекущиеДанные.Значение = "Все документы" Тогда
			СтруктураПараметров11 = Новый Структура("ВидВнутреннегоДокумента", "Все документы");
		Иначе
			СтруктураПараметров11 = Новый Структура("ВидВнутреннегоДокумента", Элементы.СтруктураДокументов.ТекущиеДанные.Ссылка); 
		КонецЕсли;
		ЗполнитьФильтрПоТипуДокумента(СтруктураПараметров11);
		ЗаполнитьПечать(СтруктураПараметров11);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоследнимиЗаявками()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Д_ЗаявкаНаФинансирование.Ссылка) КАК Количество,
	               |	Д_ЗаявкаНаФинансирование.Контрагент КАК Контрагент,
	               |	МАКСИМУМ(Д_ЗаявкаНаФинансирование.Ссылка) КАК Ссылка
	               |ПОМЕСТИТЬ Врем
	               |ИЗ
	               |	Документ.Д_ЗаявкаНаФинансирование КАК Д_ЗаявкаНаФинансирование
	               |ГДЕ
	               |	Д_ЗаявкаНаФинансирование.Предприятие В(&ДоступныеПредприятия)
	               |	И Д_ЗаявкаНаФинансирование.Дата >= &Дата
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Д_ЗаявкаНаФинансирование.Контрагент
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 15
	               |	Врем.Ссылка КАК Ссылка,
	               |	Врем.Контрагент КАК Контрагент,
	               |	Врем.Количество КАК Количество,
	               |	Врем.Ссылка.Предприятие КАК Предприятие
	               |ИЗ
	               |	Врем КАК Врем
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Количество УБЫВ
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ДоступныеПредприятия", ПараметрыСеанса.ДоступныеПредприятия);
	Запрос.УстановитьПараметр("Дата", НачалоМесяца(ДобавитьМесяц(ТекущаяДата(), -1)));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ИндексЗаявки = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.Контрагент) Тогда
			Продолжить;		
		КонецЕсли;
		
		Элементы.СоздатьПоПоследним.Видимость = Истина;
		
		НомерЗаявки = ИндексЗаявки;
		
		НоваяКоманда = Команды.Найти("Команда" + НомерЗаявки);
		Если НоваяКоманда = Неопределено Тогда
			НоваяКоманда = Команды.Добавить("Команда" + НомерЗаявки);
		КонецЕсли;
		НоваяКоманда.Действие  = "ВыборПоследнего";
		НоваяКнопка = Элементы.Найти("Команда" + НомерЗаявки);
		Если НоваяКнопка = Неопределено Тогда
			НоваяКнопка = Элементы.Добавить("Команда" + НомерЗаявки, Тип("КнопкаФормы"),Элементы.СоздатьПоПоследним);
		Иначе	
			НоваяКнопка.Видимость = Истина;	
		КонецЕсли;
		НоваяКнопка.Заголовок = Строка(Выборка.Предприятие) + " >> " + Выборка.Контрагент;
		НоваяКнопка.ИмяКоманды = "Команда" + НомерЗаявки;
		
		СписокЗначенийМенюПоследних.Добавить(Выборка.Ссылка);
		
		ИндексЗаявки = ИндексЗаявки + 1;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВыборПоследнего(Команда)
	
	Ссылка = Число(Прав(Команда.Имя, СтрДлина(Команда.Имя) - 7));
	
	ТекФорма = ПолучитьФорму("Документ.Д_ЗаявкаНаФинансирование.ФормаОбъекта", Новый Структура("ЗначениеКопирования", СписокЗначенийМенюПоследних[Ссылка].Значение));
	ДанныеФормы = ТекФорма.Объект;
	//ЗаполнитьНаСервере2(ДанныеФормы, СписокЗначенийМенюПоследних[Ссылка].Значение);
	//КопироватьДанныеФормы(ДанныеФормы, ТекФорма.Объект);
	ТекФорма.Открыть();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере2(ТекОбъект, ТекОснование)

	ЗаполнитьЗначенияСвойств(ТекОбъект, ТекОснование,,"Дата, Номер");	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)

	Отказ = Истина;
	ТекДок = Элементы.Список.ДанныеСтроки(Элементы.Список.ТекущаяСтрока).Ссылка;
	ПоказатьЗначение(, ТекДок); 

КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	
	Помечен = ПолучитьОбъектРегистра(Элементы.Список.ТекущаяСтрока, "ПометкаУдаления"); 
	ПоказатьВопрос(Новый ОписаниеОповещения("СписокПередУдалениемЗавершение", ЭтаФорма), ?(Помечен, "Снять пометку удаления?", "Пометить на удаление?"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПометитьСнять(ПолучитьОбъектРегистра(Элементы.Список.ТекущаяСтрока, "Документ"));
		Элементы.Список.Обновить();
	КонецЕсли;

КонецПроцедуры


&НаСервереБезКонтекста
Процедура ПометитьСнять(ДокСсылка)
	
	ДокОб = ДокСсылка.ПолучитьОбъект();
	ДокОб.УстановитьПометкуУдаления(НЕ ДокОб.ПометкаУдаления);
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьОбъектРегистра(КлючЗаписи, ИмяРеквизита)
	
	МенеджерЗаписи1 = РегистрыСведений.ВнутренниеДокументы.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи1, КлючЗаписи);
	МенеджерЗаписи1.Прочитать();
	
	Возврат МенеджерЗаписи1[ИмяРеквизита];
	
КонецФункции // ()



 