&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка) Экспорт
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Автор = ПараметрыСеанса.ТекущийПользователь;
		Объект.Инициатор = Объект.Автор;
		//Объект.ДатаОплаты = ТекущаяДата() + 24*60*60;
		Объект.ДатаОплаты = ТекущаяДата();
		СрокОплаты = Объект.ДатаОплаты;
		СтатусТочкаМаршрута = "На подготовке";
	Иначе
		СрокОплаты = сабОбщегоНазначения.ПолучитьОплатыСрокИзГрафика(Объект.Ссылка);
		Если СрокОплаты = Дата('00010101') Тогда
			СрокОплаты = Объект.ДатаОплаты;		
		КонецЕсли;
		СтатусТочкаМаршрута = БПСервер.ПолучитьТекущуюТочкуМаршрута(Объект.Ссылка);
	КонецЕсли;
	
	БюджетныйНаСервере.ДействияПриСозданииФормыДокумента(ЭтаФорма);
	
	//СписокВыбора_ДоступныеПредприятия = БюджетныйНаСервере.ПолучитьПредприятия();
	
	ЗаполнитьПеречиеслениеИсточников();
	
	Расшифровка = Объект.РасшифровкаПлатежа ИЛИ Объект.ТабличнаяЧасть.Количество() > 1;
	//Элементы.Группа25.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	Элементы.РеестрЗаявок.Видимость = ЗначениеЗаполнено(Объект.РеестрЗаявок);
	Элементы.ДокОснование.Видимость = ЗначениеЗаполнено(Объект.ДокОснование);
	
	сабОбщегоНазначения.ОбновитьКоличествоПрикрепленныхФайловСервер(ЭтаФорма);
	
	СуммаОплаченоСтрока = ?(Объект.СуммаОплачено, "Оплачено: " + Объект.СуммаОплачено, "");
	
	ЗаполнитьГрафикПоБюджету(НЕ ЗначениеЗаполнено(Объект.Ссылка));
	
	УстановитьДоступностьФормы();
	
	СчетКонтрагентаПриИзмененииНаСервере(Ложь);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьДобавленныеКолонкиТаблиц();
		Если Объект.ВалютнаяСумма Тогда
			ВалютнаяСуммаКонтрагентаПриИзмененииНаСервере(Истина, "ВалютнаяСумма");
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении(Объект.Организация);
		Объект.КПППлательщика = СтруктураДанные.КПППлательщика;
	КонецЕсли;
	
	ПредприятиеПриИзмененииНаСервере(НЕ ЗначениеЗаполнено(Объект.Ссылка) И (Параметры.Свойство("ЗначениеКопирования") И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования)) И (Параметры.Свойство("Основание") И НЕ ЗначениеЗаполнено(Параметры.Основание)));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//Отказ = БюджетныйНаКлиенте.ПриОткрытииДокумента(ЭтаФорма.Элементы, Объект, ЭтаФорма);
	//ВидОперацииПриИзменении(Неопределено);
	//ПредприятиеПриИзменении(Неопределено);
	ОграничитьТипы();
	РасшифровкаПлатежаПриИзменении(Неопределено);
	ТипЗаявкиПриИзменении(Неопределено);
	сабОбщегоНазначенияКлиент.ОбновитьКоличествоПрикрепленныхФайлов(ЭтаФорма);
	
	//Если СписокВыбора_ДоступныеПредприятия < 15 Тогда
	//	БюджетныйНаКлиенте.ЗаполнитьСписокРеквизита(ЭтаФорма, "СписокВыбора_Предприятие", БюджетныйНаСервере.ПолучитьПредприятия(), Объект.Предприятие);
	//КонецЕсли;
	
	ЗаявкаОрганизацияПриИзменении(Неопределено);
	
	СуммаПриИзменении(Неопределено);
	//ЗаявкаКонтрагентПриИзменении(Неопределено);
	
	//Расшифровка2ПриИзменении(Неопределено);
	
	ТекБП = Неопределено;
	ТекБПСтруРекв = Новый Структура;
	ВсемСразу = Неопределено;
	

КонецПроцедуры

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
Функция ПолучитьДанныеОрганизацияПриИзменении(Организация)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("НаименованиеПолное", Организация.НаименованиеПолное);
	СтруктураДанные.Вставить("КодОКАТО", "");
	СтруктураДанные.Вставить("БанковскийСчет", Организация.ОсновнойБанковскийСчет);
	СтруктураДанные.Вставить("ТекстКорреспондента", Организация.ОсновнойБанковскийСчет.ТекстКорреспондента);
	СтруктураДанные.Вставить("ИННПлательщика", Организация.ИНН);
	СтруктураДанные.Вставить("КПППлательщика", Организация.КПП);
	СтруктураДанные.Вставить("ЭтоФизЛицо", Перечисления.ЮрФизЛицо.ФизЛицо);
	СтруктураДанные.Вставить("Источник", Организация.ОсновнойБанковскийСчет);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
Функция ПолучитьДанныеКонтрагентПриИзменении(Контрагент, ВидОплаты)
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("НаименованиеПолное", Контрагент.Наименование);
		СтруктураДанные.Вставить("СчетКонтрагента", Контрагент.ОсновнойБанковскийСчет);
		СтруктураДанные.Вставить("ИННПолучателя", Контрагент.ИНН);
		СтруктураДанные.Вставить("КПППолучателя", "-");
		СтруктураДанные.Вставить("НазначениеПлатежа", Контрагент.ОсновнойБанковскийСчет.ТекстНазначения);
		СтруктураДанные.Вставить("ТекстКорреспондента", Контрагент.ОсновнойБанковскийСчет.ТекстКорреспондента);
		СтруктураДанные.Вставить("КодПоОКТМО", "");
		СтруктураДанные.Вставить("КодБК", "");
		СтруктураДанные.Вставить("ОплатаНалога", Ложь);
	ИначеЕсли ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") ИЛИ ТипЗнч(Контрагент) = Тип("СправочникСсылка.Организации") Тогда
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("НаименованиеПолное", Контрагент.НаименованиеПолное);
		СтруктураДанные.Вставить("СчетКонтрагента", Контрагент.ОсновнойБанковскийСчет);
		СтруктураДанные.Вставить("ИННПолучателя", Контрагент.ИНН);
		СтруктураДанные.Вставить("КПППолучателя", Контрагент.КПП);
		СтруктураДанные.Вставить("НазначениеПлатежа", Контрагент.ОсновнойБанковскийСчет.ТекстНазначения);
		СтруктураДанные.Вставить("ТекстКорреспондента", Контрагент.ОсновнойБанковскийСчет.ТекстКорреспондента);
		СтруктураДанные.Вставить("КодПоОКТМО", "");
		СтруктураДанные.Вставить("КодБК", "");
		СтруктураДанные.Вставить("ОплатаНалога", ВидОплаты = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога);
	КонецЕсли;
	
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

&НаКлиенте
Процедура ОграничитьТипы()
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.Контрагенты"));
	Массив.Добавить(Тип("СправочникСсылка.Организации"));
	Массив.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив);	
	Элементы.Контрагент.ОграничениеТипа = ОписаниеТиповЧ;
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.Предприятия"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив);	
	Элементы.Контрагент1.ОграничениеТипа = ОписаниеТиповЧ;
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.Контрагенты"));
	Массив.Добавить(Тип("СправочникСсылка.Организации"));
	Массив.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
	Массив.Добавить(Тип("СправочникСсылка.Предприятия"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив);	
	Элементы.Контрагент2.ОграничениеТипа = ОписаниеТиповЧ;
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.Кассы"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив);	
	Элементы.Источник.ОграничениеТипа = ОписаниеТиповЧ;
	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьФормы()
	
	ЕстьБП = Ложь;
	ТекБПСтруРекв = Новый Структура("ОснованиеЗаблокирован, Стартован", Ложь, Ложь); 
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекБП = БПСервер.НайтиТекущийБПСервер(Объект.Ссылка);
		Если НЕ ТекБП = Неопределено И ТипЗнч(ТекБП) = Тип("СправочникСсылка.СогласованиеОбщее") Тогда
			ТекБПСтруРекв = БюджетныйНаСервере.ВернутьРеквизиты(ТекБП, "ОснованиеЗаблокирован, Стартован");
			ВсемСразу = Неопределено;
			ЕстьБП = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ТекДоступность = Ложь;
	Если НЕ ТекБП = Неопределено ИЛИ ЗначениеЗаполнено(Объект.РеестрЗаявок) Тогда
		ТекДоступность = ТекБПСтруРекв.ОснованиеЗаблокирован ИЛИ ЗначениеЗаполнено(Объект.РеестрЗаявок);
		Если ТекДоступность = Неопределено Тогда
			ТекДоступность = ТекБПСтруРекв.Стартован;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Ссылка) И ПараметрыСеанса.ДоступныеПредприятия.Найти(Объект.Предприятие) = Неопределено И ПараметрыСеанса.ДоступныеПользователи.Найти(Объект.Автор) = Неопределено Тогда //недоступное предприятие
			ТекДоступность = Истина;		
		КонецЕсли;
		
		БюджетныйНаСервере.ФормаТолькоПросмотр(Объект, ЭтаФорма, ТекДоступность);
	КонецЕсли;
	
	ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ИспользоватьБизнесПроцессы", Истина);
	Если ЗначениеЗаполнено(ТекЭл) И ТекЭл.Значение Тогда
		Если Не Элементы.Найти("ФормаДокументД_ЗаявкаНаФинансированиеСогласовать") = Неопределено Тогда
			Элементы.ФормаДокументД_ЗаявкаНаФинансированиеСогласовать.Видимость = Не ЕстьБП;
			Элементы.ФормаДокументД_ЗаявкаНаФинансированиеСогласовать.КнопкаПоУмолчанию = Не ЕстьБП;
		КонецЕсли;
		Элементы.ФормаПровестиИЗакрыть.Видимость = Ложь;
		Элементы.Статус.Видимость = Ложь;
		Элементы.СтатусТочкаМаршрута.Видимость = Истина;
	Иначе
		Если Не Элементы.Найти("ФормаДокументД_ЗаявкаНаФинансированиеСогласовать") = Неопределено Тогда
			Элементы.ФормаДокументД_ЗаявкаНаФинансированиеСогласовать.Видимость = Ложь;
		КонецЕсли;
		Элементы.Статус.Видимость = Истина;
		Элементы.СтатусТочкаМаршрута.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ФормаЗаписатьИЗакрыть.Видимость = ЕстьБП;
	Элементы.ФормаЗаписатьИЗакрыть.КнопкаПоУмолчанию = ЕстьБП;

	ВозможностьРазрешитьРедактирование(ТекБП, ТекДоступность);
	
КонецПроцедуры

&НаСервере
Процедура ВозможностьРазрешитьРедактирование(ТекБП, ТекДоступность)
	
	//Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
	//	Возврат;	
	//КонецЕсли;
	
	Если НЕ ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.Найти("ФормаГруппа1") = Неопределено И НЕ ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.Найти("ФормаГруппа1").ПодчиненныеЭлементы.Найти("ФормаДокументД_СлужебнаяЗапискаРазрешитьРедактирование") = Неопределено Тогда
		
		ЭтоДоработка = Ложь;
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Задача.ТочкаМаршрута КАК ТочкаМаршрута
			|ИЗ
			|	Справочник.Задача КАК Задача
			|ГДЕ
			|	Задача.Выполнена = ЛОЖЬ
			|	И Задача.Заявка = &Заявка
			|
			|СГРУППИРОВАТЬ ПО
			|	Задача.ТочкаМаршрута";
			
			Запрос.УстановитьПараметр("Заявка", Объект.Ссылка);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			ТекТочкаМаршрута = Неопределено;
			Пока Выборка.Следующий() Цикл
				ТекТочкаМаршрута = Выборка.ТочкаМаршрута;		
			КонецЦикла;
			ЭтоДоработка = НЕ БПСервер.ТочкиПроцессов("доработка").Найти(ТекТочкаМаршрута) = Неопределено;
		КонецЕсли;

		ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.Найти("ФормаГруппа1").ПодчиненныеЭлементы.Найти("ФормаДокументД_СлужебнаяЗапискаРазрешитьРедактирование").Видимость = ЭтоДоработка И ТекДоступность;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаОрганизацияПриИзменении(Элемент)
	
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении(Объект.Организация);
		
	Если НЕ Элемент = Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
			Объект.БанковскийСчет = СтруктураДанные.БанковскийСчет;
			Объект.Источник = СтруктураДанные.БанковскийСчет;
		КонецЕсли;
		
		Объект.КПППлательщика = СтруктураДанные.КПППлательщика;  
	Иначе
		
		Если Не ЗначениеЗаполнено(Объект.Ссылка) И Не ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
			Объект.БанковскийСчет = СтруктураДанные.БанковскийСчет;
			Объект.Источник = СтруктураДанные.БанковскийСчет;		
			Объект.КПППлательщика = СтруктураДанные.КПППлательщика;  
		КонецЕсли;
	
	КонецЕсли;
	
	СформироватьПодписьЮрЛица(СтруктураДанные);
	
	ЗаявкаБанковскийСчетПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПодписьЮрЛица(СтруктураДанные)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		КПППлательщика = ?(ЗначениеЗаполнено(Объект.КПППлательщика), Объект.КПППлательщика, СтруктураДанные.КПППлательщика);
		ПодписьЮрЛица = "ИНН " + ?(ЗначениеЗаполнено(СтруктураДанные.ИННПлательщика), СтруктураДанные.ИННПлательщика, "<не требуется>") + ", КПП " + ?(ЗначениеЗаполнено(КПППлательщика), КПППлательщика, "<не требуется>") + ", " + СтруктураДанные.НаименованиеПолное; 
	Иначе	
		ПодписьЮрЛица = "";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаКонтрагентПриИзменении(Элемент)
	
	ТекЗначение = Объект.Контрагент;
	Элементы.РеквизитыНалогов.Видимость = Ложь;
	
	Если НЕ Объект.Контрагент = Неопределено Тогда
		СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, Объект.ВидОперации);
		Если СтруктураДанные = Неопределено Тогда
			Возврат;		
		КонецЕсли;
		
		Если НЕ Элемент = Неопределено Тогда
			Объект.СчетКонтрагента = СтруктураДанные.СчетКонтрагента;
		КонецЕсли;
		
		// подстановка ОКТМО_КБК { +Ничуговская. Перенесла, чтобы Реквизиты налогов на форме заполнились актуальными данными
		Если Не Элемент = Неопределено Тогда
			Объект.КодОКАТО = СтруктураДанные.КодПоОКТМО;
			//Объект.КодБК = СтруктураДанные.КодБК;
		КонецЕсли;
		//}

		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Если СтруктураДанные.ОплатаНалога Тогда
				Элементы.РеквизитыНалогов.Видимость = Истина;
				РеквизитыНалогов = "Налог. рекв.:" + Объект.КодБК + "; " + Объект.КодОКАТО + "; " + Объект.ПоказательОснования + "; " + Объект.ПоказательПериода + "; " + Объект.СтатусСоставителя;
				ПодписьКонтрагента = "ИНН " + ?(ЗначениеЗаполнено(СтруктураДанные.ИННПолучателя), СтруктураДанные.ИННПолучателя, "<не требуется>") + ", КПП " + ?(ЗначениеЗаполнено(СтруктураДанные.КПППолучателя), СтруктураДанные.КПППолучателя, "<не требуется>") + ", " + СтруктураДанные.НаименованиеПолное;
			Иначе	
				ПодписьКонтрагента = "ИНН " + ?(ЗначениеЗаполнено(СтруктураДанные.ИННПолучателя), СтруктураДанные.ИННПолучателя, "<не требуется>") + ", КПП " + ?(ЗначениеЗаполнено(СтруктураДанные.КПППолучателя), СтруктураДанные.КПППолучателя, "<не требуется>") + ", " + СтруктураДанные.НаименованиеПолное; 
			КонецЕсли;
		Иначе
			ПодписьКонтрагента = "";	
		КонецЕсли;
		
		//// подстановка ОКТМО_КБК {
		//Если Не Элемент = Неопределено Тогда
		//	Объект.КодОКАТО = СтруктураДанные.КодПоОКТМО;
		//	Объект.КодБК = СтруктураДанные.КодБК;
		//КонецЕсли;
		////}

		Если Не Элемент = Неопределено И ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			//ТекДоговор = БюджетныйНаСервере.ВернутьРеквизит(Объект.Контрагент, "ДоговорПоУмолчанию");
			//Объект.Договор = ТекДоговор;
			
			Если Не ЗначениеЗаполнено(Объект.Договор) Тогда
				РеквизитыДоговора = сабОперОбщегоНазначения.ПолучитьДоговорКонтрагентаПоУмолчанию(Объект.Контрагент, Объект.Организация,,?(ЗначениеЗаполнено(Объект.ЦФО), Объект.ЦФО, Объект.Предприятие));
				Объект.Договор = РеквизитыДоговора.Договор;
				
				Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
					Объект.Организация = РеквизитыДоговора.Организация;	
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Организации") И НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ОплатаВНХ") И НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ВзносНаличнымиВБанк") Тогда
			Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ОплатаВНХ");
			ВидОперацииПриИзменении(Элемент);
		КонецЕсли;
		
	Иначе
		
		Если НЕ Элемент = Неопределено Тогда
			Объект.СчетКонтрагента = "";
		КонецЕсли;
		
	КонецЕсли;
	
	СчетКонтрагентаПриИзменении(Элемент);
	
КонецПроцедуры

&НаСервере
Функция ФинансистСнабжение()
	Возврат ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.ФинансистСнабжение;
КонецФункции // ()

&НаСервере
Функция ПроверкаЧужого(Чужой)
	Если Чужой.Родитель.Пустая() Тогда
		Если Объект.Предприятие.Родитель.Пустая() Тогда
			Если НЕ Чужой = Объект.Предприятие  Тогда
				Возврат Истина;
			Конецесли;
		Иначе
			Если НЕ Чужой = Объект.Предприятие.Родитель  Тогда
				Возврат Истина;
			Конецесли;				
		КонецЕсли;
	Иначе
		Если Объект.Предприятие.Родитель.Пустая() Тогда
			Если НЕ Чужой.Родитель = Объект.Предприятие  Тогда
				Возврат Истина;
			Конецесли;
		Иначе
			Если НЕ Чужой.Родитель = Объект.Предприятие.Родитель  Тогда
				Возврат Истина;
			Конецесли;				
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
КонецФункции // ()

&НаСервере
Функция ВернутьФинансистаКС()
	Возврат Константы.БП_ФинансистКС.Получить();
КонецФункции // ()

&НаСервере
Функция ПроверкаОснСырье(СтатьяДДС)
	Возврат Ложь;	
КонецФункции // ()

&НаСервере
Функция ВернутьТипИсточника(ТекСтруктура = Неопределено)
	СтруВозврата = Новый Структура("Самооплата, Доступность, Прочий", 0, 1, Ложь);
	Если Объект.ТипИсточника = Перечисления.Д_ИсточникиСредств.Нал Тогда
		СтруВозврата.Самооплата = 1;
		СтруВозврата.Доступность = 0;
		СтруВозврата.Прочий = Ложь;
	ИначеЕсли Объект.ТипИсточника = Перечисления.Д_ИсточникиСредств.Казна Тогда
		СтруВозврата.Самооплата = 0;
		СтруВозврата.Доступность = 0;
		СтруВозврата.Прочий = Истина;
	КонецЕсли; 
	Возврат СтруВозврата;
КонецФункции // ()

&НаСервере
Процедура РасчитатьЛимиты(СтатьяДДС, ТекСумма, СуммаПлана, ЦФО, Подразделение, СчитатьПодразделения)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МАКСИМУМ(-ЕСТЬNULL(Годовой.СуммаОборот, 0)) КАК План,
	               |	МАКСИМУМ(ЕСТЬNULL(Факт2.СуммаОборот, 0)) КАК Факт,
	               |	СтатьиДДС.Ссылка,
	               |	-ЕСТЬNULL(Годовой.СуммаОборот, 0) - -ЕСТЬNULL(Факт2.СуммаОборот, 0) КАК Отклонение
	               |ИЗ
	               |	Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДДС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Бюджетный.Обороты(
	               |				&Дата1,
	               |				&Дата2,
	               |				Авто,
	               |				Счет В ИЕРАРХИИ (&ДенежныеСчета),
	               |				,
	               |				Предприятия В ИЕРАРХИИ (&Предприятия)
	               |					И (СценарийПлана В
	               |							(ВЫБРАТЬ
	               |								СценарииПланирования.Ссылка
	               |							ИЗ
	               |								Справочник.СценарииПланирования КАК СценарииПланирования
	               |							ГДЕ
	               |								СценарииПланирования.Родитель = &Сценарий
	               |								И СценарииПланирования.ВлкючатьВПлан = ИСТИНА)
	               |						ИЛИ СценарийПлана В (&Сценарий)
	               |						ИЛИ СценарийПлана В (ЗНАЧЕНИЕ(Справочник.СценарииПланирования.ПланПоСЗ)))
	               |					И ВЫБОР
	               |						КОГДА &СчитатьПодразделения
	               |							ТОГДА Подразделение В (&подразделение)
	               |						ИНАЧЕ ИСТИНА
	               |					КОНЕЦ,
	               |				,
	               |				) КАК Годовой
	               |		ПО СтатьиДДС.Ссылка = Годовой.Субконто1
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			СУММА(Д_ЗаявкаНаОплатуЗаявкаБезнал.СуммаДДС) КАК СуммаОборот,
	               |			Д_ЗаявкаНаОплатуЗаявкаБезнал.СтатьяДДС КАК Субконто1
	               |		ИЗ
	               |			Документ.Д_ЗаявкаНаОплату.ЗаявкаБезнал КАК Д_ЗаявкаНаОплатуЗаявкаБезнал
	               |		ГДЕ
	               |			НЕ Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка = &Ссылка
	               |			И Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2
	               |			И Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка.ПометкаУдаления = ЛОЖЬ
	               |			И Д_ЗаявкаНаОплатуЗаявкаБезнал.ОтменаОплаты = ЛОЖЬ
	               |			И Д_ЗаявкаНаОплатуЗаявкаБезнал.ЦФО В(&Предприятия)
	               |			И ВЫБОР
	               |					КОГДА &СчитатьПодразделения
	               |						ТОГДА Д_ЗаявкаНаОплатуЗаявкаБезнал.Подразделение В (&Подразделение)
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			Д_ЗаявкаНаОплатуЗаявкаБезнал.СтатьяДДС) КАК Факт2
	               |		ПО СтатьиДДС.Ссылка = Факт2.Субконто1
	               |ГДЕ
	               |	СтатьиДДС.Ссылка = &СтатьяДДС
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СтатьиДДС.Ссылка,
	               |	-ЕСТЬNULL(Годовой.СуммаОборот, 0) - -ЕСТЬNULL(Факт2.СуммаОборот, 0)";
	
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Учетный.Счет5001());
	МассивСчетов.Добавить(ПланыСчетов.Учетный.Счет5101());
	МассивСчетов.Добавить(ПланыСчетов.Учетный.Счет5501());
	
	
	СтруктураБюджетов = БюджетныйНаСервере.ПолучитьВидыБюджетовНаДату(ТекущаяДата());
	
	Запрос.УстановитьПараметр("Дата1", НачалоМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("Дата2", КонецМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("СтатьяДДС", СтатьяДДС);
	Запрос.УстановитьПараметр("Предприятия", ?(ПустаяСтрока(ЦФО) ИЛИ Объект.Самооплата, Объект.Предприятие, ЦФО));
	Запрос.УстановитьПараметр("СчитатьПодразделения", СчитатьПодразделения);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ДенежныеСчета", МассивСчетов);
	Запрос.УстановитьПараметр("Сценарий", БюджетныйНаСервере.ПолучитьАктуальныйСценарий(Объект.Дата));
	//Запрос.УстановитьПараметр("Состояния", МассивСостояний);
	
	
	
	РезультатДанные = Запрос.Выполнить();
	ВыборкаДанные = РезультатДанные.Выбрать();
	
	Лимит = 0; Факт = 0; Остаток = 0;
	
	//обработка случаев отсутствия вывода лимитов
	//ЗапретЛимита =  БПСервер.ЗапретПлана(Объект.Предприятие, ЦФО, СтатьяДДС);
	ЗапретЛимита = Ложь;
	
	Факт = ТекСумма;
	Пока ВыборкаДанные.Следующий() Цикл
		Лимит = ?(ЗапретЛимита, 0, ВыборкаДанные.План);
		Факт = Факт + ВыборкаДанные.Факт;
		Остаток = ?(ЗапретЛимита, -ТекСумма,  Лимит - Факт);
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаСтатьяДДСПриИзменении(Элемент)
	ТекСтатья = Объект.СтатьяДДС; 
	//Элементы.ЗаявкаОтветственный.Видимость = ДоступностьОтветственного(ТекСтатья);
	Элементы.ЗаявкаЗаявкаНаЗакупку.Видимость = СтатьяСырья(ТекСтатья);
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтатьяСырья(ТекСтатья)

	Возврат Константы.МодульПроизводствоСпирта.Получить() И ТекСтатья = Справочники.СтатьиДвиженияДенежныхСредств.ЗакупкаЗерна;	

КонецФункции // ()

&НаКлиенте
Процедура ЗаявкаЦФОНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//СтандартнаяОбработка = Ложь;
	//ТекПП = ?(ПустаяСтрока(Элементы.Заявка.ТекущиеДанные.ЦФО), Объект.Предприятие, Элементы.Заявка.ТекущиеДанные.ЦФО);
	//ТекПП = ?(ПустаяСтрока(БюджетныйНаСервере.ВернутьРеквизит(ТекПП, "Родитель")), ТекПП,БюджетныйНаСервере.ВернутьРеквизит(ТекПП, "Родитель")); 
	//ФормаВыб = ПолучитьФорму("Справочник.Предприятия.Форма.ФормаВыбора", Новый Структура("ТекущаяСтрока", ТекПП) , Элемент);
	//ТекМассивПП = БюджетныйНаСервере.ПолучитьПредприятия();
	//Если ТекМассивПП.Найти(ЭтоКазна()) = Неопределено Тогда
	//	НовыйОтбор = ФормаВыб.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
	//	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	//	НовыйОтбор.ПравоеЗначение = ТекМассивПП;
	//КонецЕсли;
	//
	//ФормаВыб.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Отказ = 1 - ПроверитьЗаполнение();
	
	Если Не ЗначениеЗаполнено(Объект.Источник) Тогда
		Объект.Источник = Объект.БанковскийСчет;	
	КонецЕсли;
		
	Если Не Расшифровка Тогда
		Если Объект.ТабличнаяЧасть.Количество() = 0 Тогда
			НоваяСтрока = Объект.ТабличнаяЧасть.Добавить();
		Иначе
			НоваяСтрока = Объект.ТабличнаяЧасть[0];			
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Объект);
		НоваяСтрока.Предприятие = Объект.ЦФО;
		
		ТекРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(НоваяСтрока.СтавкаНДС, "Ставка");
		
		Если НоваяСтрока.СтавкаНДС = сабОбщегоНазначения.ПолучитьЭлементНДС("10%") Тогда
			НоваяСтрока.СуммаНДС10 = НоваяСтрока.СуммаНДС;
			НоваяСтрока.СуммаНДС18 = 0;
			НоваяСтрока.СуммаНДС20 = 0;
		ИначеЕсли НоваяСтрока.СтавкаНДС = сабОбщегоНазначения.ПолучитьЭлементНДС("18%(до 2019)") Тогда
			НоваяСтрока.СуммаНДС18 = НоваяСтрока.СуммаНДС;
			НоваяСтрока.СуммаНДС10 = 0;
			НоваяСтрока.СуммаНДС20 = 0;
		ИначеЕсли НоваяСтрока.СтавкаНДС = сабОбщегоНазначения.ПолучитьЭлементНДС("20%") Тогда
			НоваяСтрока.СуммаНДС20 = НоваяСтрока.СуммаНДС;
			НоваяСтрока.СуммаНДС18 = 0;
			НоваяСтрока.СуммаНДС10 = 0;
		Иначе
			НоваяСтрока.СуммаНДС = 0;
			НоваяСтрока.СуммаНДС18 = 0;
			НоваяСтрока.СуммаНДС10 = 0;
			НоваяСтрока.СуммаНДС20 = 0;
		КонецЕсли;
		
	ИначеЕсли Объект.ТабличнаяЧасть.Количество() Тогда
		Объект.СтатьяДДС = Объект.ТабличнаяЧасть[0].СтатьяДДС;
	КонецЕсли; 
		
	//Если Объект.ТипИсточника = ПредопределенноеЗначение("Перечисление.Д_ИсточникиСредств.БезНал") И СтрНайти(Объект.НазначениеПлатежа, "Сумма ") = 0 Тогда
	//	сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(Объект, "Не указана сумма в назначении платежа",,, "Объект.НазначениеПлатежа", Истина);
	//	Отказ = Истина;
	//КонецЕсли;
	
	Объект.ДатаОплаты = СрокОплаты;
	
	МассивСтрокГрафика = Новый Массив;
	Если ЗначениеЗаполнено(Объект.Ссылка) И Модифицированность Тогда
		МассивСтрокГрафика = ПолучитьСтрокиГрафикаПоЗаявке(Объект.Ссылка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.РеестрЗаявок) И Модифицированность Тогда
		Сообщить("Заявка участвует в реестре, редактирование невозможно."); 
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если МассивСтрокГрафика.Количество() > 1 И ТипЗнч(ПараметрыЗаписи) = Тип("Структура") И НЕ ПараметрыЗаписи.Свойство("ПропускатьКонтроль") Тогда
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтотОбъект), "По данной заявке имеются несколько строк графика платежей. При изменении график потеряет актуальность. Продолжить?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да  Тогда
		Записать(Новый Структура("ПропускатьКонтроль", Истина));			
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтрокиГрафикаПоЗаявке(Заявка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	сабГрафикПлатежей.Документ КАК Документ,
	               |	сабГрафикПлатежей.УИДСтрокиДокумента КАК УИДСтрокиДокумента,
	               |	сабГрафикПлатежей.Сумма КАК Сумма
	               |ИЗ
	               |	РегистрСведений.сабГрафикПлатежей КАК сабГрафикПлатежей
	               |ГДЕ
	               |	сабГрафикПлатежей.Документ = &Заявка
	               |	И сабГрафикПлатежей.СтатьяДДС.Доход = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Заявка", Заявка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();
	МассивСтрок = Новый Массив;
	Для каждого ТекСтрока Из Выборка Цикл
		МассивСтрок.Добавить(Новый Структура("Документ, УИДСтрокиДокумента, Сумма", ТекСтрока.Документ, ТекСтрока.УИДСтрокиДокумента, ТекСтрока.Сумма)); 
	КонецЦикла;
	
	Возврат МассивСтрок;
	
КонецФункции // ()

&НаСервере
Процедура ЗаполнитьПеречиеслениеИсточников()
	СписокТиповИсточников.Очистить();
	Если Объект.Самооплата Тогда
		СписокТиповИсточников.Добавить(Перечисления.Д_ИсточникиСредств.БезНал);
		СписокТиповИсточников.Добавить(Перечисления.Д_ИсточникиСредств.Нал);
		//Если Объект.ТипИсточника = Перечисления.Д_ИсточникиСредств.Прочий Тогда
		//	Объект.ТипИсточника = Перечисления.Д_ИсточникиСредств.БезНал;		
		//КонецЕсли;
	Иначе
		СписокТиповИсточников.Добавить(Перечисления.Д_ИсточникиСредств.БезНал);
		СписокТиповИсточников.Добавить(Перечисления.Д_ИсточникиСредств.Нал);
		СписокТиповИсточников.Добавить(Перечисления.Д_ИсточникиСредств.Прочий);
		СписокТиповИсточников.Добавить(Перечисления.Д_ИсточникиСредств.Казна);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СамооплатаПриИзменении(Элемент)
	Если Объект.Самооплата Тогда
		Элементы.ИсполнительОплаты.Доступность = Ложь;
		//Объект.ИсполнительОплаты = Объект.Автор;
		Элементы.ЗаявкаЦФО.Видимость = Ложь;
		//Элементы.ЗаявкаПереносЛимита.Видимость = Ложь;
		Элементы.ЗаявкаПодразделение.Видимость = БюджетныйНаСервере.ВернутьРеквизит(Объект.Предприятие, "УчетПоПодразделениям");
		
	Иначе
		Элементы.ИсполнительОплаты.Доступность = Истина;
		Элементы.ЗаявкаЦФО.Видимость = Истина;
		//Элементы.ЗаявкаПереносЛимита.Видимость = Истина;
		Если Объект.ТипИсточника = ПредопределенноеЗначение("Перечисление.Д_ИсточникиСредств.Нал") Тогда
			//Объект.ИсполнительОплаты = "";
		Иначе
			//Объект.ИсполнительОплаты = ПолучитьРКО();
		КонецЕсли;
		Элементы.ЗаявкаПодразделение.Видимость = Истина;
	КонецЕсли;
	ТипИсточникаПриИзменении(0);
	
КонецПроцедуры


//&НаСервереБезКонтекста
//Функция ВернутьНалТипИсточника()
//	Возврат Перечисления.Д_ИсточникиСредств.Нал;
//КонецФункции // ()

&НаСервереБезКонтекста
Функция ВернутьНалТипИсточника2()
	МассивКасс = Новый Массив;
	МассивКасс.Добавить(Перечисления.ГД_ВидыИсточников.Касса);
	МассивКасс.Добавить(Перечисления.ГД_ВидыИсточников.КассаУчет);
	МассивКасс.Добавить(Перечисления.ГД_ВидыИсточников.ВалютнаяКасса);
	МассивКасс.Добавить(Перечисления.ГД_ВидыИсточников.ВалютнаяКассаУчет);
	
	Возврат МассивКасс;
КонецФункции // ()

&НаСервереБезКонтекста
Функция ВернутьБНалТипИсточника2()
	МассивРсч = Новый Массив;
	МассивРсч.Добавить(Перечисления.ГД_ВидыИсточников.РассчетныйСчет);
	МассивРсч.Добавить(Перечисления.ГД_ВидыИсточников.ВалютныйРасчетныйСчет);
	Возврат МассивРсч;
КонецФункции // ()
 
 &НаКлиенте
 Процедура ТипИсточникаПриИзменении(Элемент)
	 Если Объект.ТипИсточника = ПредопределенноеЗначение("Перечисление.Д_ИсточникиСредств.Нал") Тогда
		 Элементы.ЗаявкаГруппа3.Видимость = Ложь;
		 //Элементы.Группа10.Видимость = Истина;
		 Элементы.ЗаявкаСчетКонтрагента.Видимость = Ложь;
		 
	 Иначе
		 Если Объект.Самооплата Тогда
			 Элементы.ЗаявкаГруппа3.Видимость = Ложь;
			 //Элементы.Группа10.Видимость = Истина;
			 Элементы.ЗаявкаСчетКонтрагента.Видимость = Ложь;
		 Иначе
			 ТекМассивПП = БюджетныйНаСервере.ПолучитьПредприятия();
			 Если ТекМассивПП.Найти(ЭтоКазна()) = Неопределено Тогда
				 Элементы.ЗаявкаГруппа3.Видимость = Ложь;
				 //Элементы.Группа10.Видимость = Истина;
				 Элементы.ЗаявкаСчетКонтрагента.Видимость = Ложь;
			 Иначе
				 Элементы.ЗаявкаГруппа3.Видимость = Истина;
				 //Элементы.Группа10.Видимость = Ложь;
				 Элементы.ЗаявкаСчетКонтрагента.Видимость = Истина;
			 КонецЕсли;
		 КонецЕсли;
	 КонецЕсли; 
 КонецПроцедуры

&НаКлиенте
Процедура ТипИсточникаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//СтандартнаяОбработка = Ложь;
	//ТекПлательщикИзСписка = ВыбратьИзСписка(СписокТиповИсточников,Элементы.ТипИсточника);
	//Если НЕ ТекПлательщикИзСписка = Неопределено Тогда
	//	Если НЕ Объект.ТипИсточника = ТекПлательщикИзСписка.Значение Тогда
	//		Объект.ТипИсточника = ТекПлательщикИзСписка.Значение;
	//	Иначе
	//		Возврат;
	//	КонецЕсли;
	//Иначе возврат;
	//КонецЕсли;
	//
	//Элементы.Группа13.Видимость = ВидИсточникаКазна(Объект.ТипИсточника);
	//
	//
	//СтруктураДоступности = ВернутьТипИсточника(СтруктураДоступности);
	//Объект.Самооплата = СтруктураДоступности.Самооплата;	
	//Элементы.Самооплата.Доступность = СтруктураДоступности.Доступность;
	////Элементы.ИсполнительОплаты.Видимость = СтруктураДоступности.Прочий;
	//
	//Если НЕ СтруктураДоступности.Прочий Тогда
	//	Объект.ИсполнительОплаты = "";
	//Иначе
	//	Для каждого ТекСтрока Из Объект.ЗаявкаБезнал Цикл
	//		ТекСтрока.Организация = "";
	//		ТекСтрока.БанковскийСчет = "";
	//		ТекСтрока.Источник = "";
	//	КонецЦикла; 
	//КонецЕсли;
	//
	//Если НЕ СтруктураДоступности.Самооплата И НЕ СтруктураДоступности.Доступность Тогда
	//	Элементы.Группа10.Видимость = 0;
	//	Элементы.ЗаявкаГруппа3.Видимость = 0;
	//Иначе
	//	СамооплатаПриИзменении(0);
	//КонецЕсли;
	//
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиПоИсточникамИсточникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокИсточников = Новый СписокЗначений;
	Для каждого ТекИсточник Из Объект.ЗаявкаБезнал Цикл
		Источник = ТекИсточник.Источник;
		СтруктураПоиска = Новый Структура("Источник", Источник); 
		Если СписокИсточников.НайтиПоЗначению(Источник) = Неопределено И НЕ Объект.ОстаткиПоИсточникам.НайтиСтроки(СтруктураПоиска).Количество() Тогда
			СписокИсточников.Добавить(Источник);	
		КонецЕсли;
	КонецЦикла;
	
	Выбранный = ВыбратьИзСписка(СписокИсточников, Элемент);
	Если НЕ Выбранный = Неопределено Тогда
		Элементы.ОстаткиПоИсточникам.ТекущиеДанные.Источник = Выбранный.Значение;	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция РасчитатьОстаток(Источник)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	УчетныйОстатки.СуммаОстаток
	|ИЗ
	|	РегистрБухгалтерии.Учетный.Остатки(&Дата, Счет В ИЕРАРХИИ (&Счет), , Субконто1 = &Источник) КАК УчетныйОстатки";
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Учетный.Счет50());
	МассивСчетов.Добавить(ПланыСчетов.Учетный.Счет51());
	
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Запрос.УстановитьПараметр("Счет", МассивСчетов);
	Запрос.УстановитьПараметр("Источник", Источник);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Возврат Выборка.СуммаОстаток;	
		
	КонецЦикла;
	
	Возврат 0;
	
	
КонецФункции // ()

&НаКлиенте
Процедура ПолучитьОстаток(Команда)
	Если Объект.ОстаткиПоИсточникам.Количество() Тогда
		Элементы.ОстаткиПоИсточникам.ТекущиеДанные.Сумма = РасчитатьОстаток(Элементы.ОстаткиПоИсточникам.ТекущиеДанные.Источник);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекДанные = Элементы.Заявка.ТекущиеДанные;
	
	ЗапретЛимита =  БПСервер.ЗапретПлана(Объект.Предприятие, ТекДанные.ЦФО, ТекДанные.СтатьяДДС);
	
	Если НЕ ПустаяСтрока(ТекДанные.СтатьяДДС) И НЕ ЗапретЛимита Тогда
		Результат = ОткрытьФормуМодально("Документ.Д_ЗаявкаНаОплату.Форма.ФормаВыбораОснованияРасхода", Новый Структура("СтатьяДДС, ДатаДока, ЦФО", ТекДанные.СтатьяДДС, Объект.Дата, ТекДанные.ЦФО));
		Если НЕ ПустаяСтрока(Результат) И НЕ Результат = Неопределено Тогда
			Элементы.Заявка.ТекущиеДанные.НазначениеПлатежа = Результат;			
		КонецЕсли;		
	КонецЕсли;
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаСтатьяДДСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.СтатьиДвиженияДенежныхСредств.Форма.ФормаВыбораРасходов",, Элемент); 
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиПоИсточникамИсточникПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаБанковскийСчетПриИзменении(Элемент)
	Если НЕ Элемент = Неопределено Тогда
		Объект.Источник = Объект.БанковскийСчет;
	КонецЕсли;
	
	ПроверкаПринадлежностиСчетаНаСервере(НЕ Элемент = Неопределено, Объект.БанковскийСчет, "БанковскийСчет");
	
	// нужно переносить в исполнители в маршрут
	//Если ЗначениеЗаполнено(Объект.Источник) Тогда
	//	Ответственный = ПолучитьОтветственногоПоИсточнику(Объект.Источник);
	//	Если ЗначениеЗаполнено(Ответственный) Тогда
	//		Если Элементы.ИсполнительОплаты.СписокВыбора.НайтиПоЗначению(Ответственный) = Неопределено Тогда
	//			Элементы.ИсполнительОплаты.СписокВыбора.Вставить(0, Ответственный);
	//		КонецЕсли;
	//		Если НЕ Элемент = Неопределено Тогда
	//			Объект.ИсполнительОплаты = Ответственный;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		ТекДанныеСтруктура = Неопределено;
		
		Если НЕ Элемент = Неопределено И НЕ сабОбщегоНазначенияКлиент.ПроверитьСчет(Объект.БанковскийСчет, ПроверкаСчетаВыполнена, ТекДанныеСтруктура) Тогда
			СтандартнаяОбработка = Ложь;
			Объект.БанковскийСчет = Неопределено;		
		КонецЕсли;
		
		УстановитьПодстветкуСчетов(ТекДанныеСтруктура,);
		ВалютнаяСуммаКонтрагентаПриИзмененииНаСервере(Не Элемент = Неопределено, ?(Элемент = Неопределено, "", Элемент.Имя));
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГрафикПоБюджету(Изменять)
	
	Если Изменять И Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	сабГрафикПлатежей.Документ КАК Документ,
		               |	сабГрафикПлатежей.Источник КАК Источник,
		               |	сабГрафикПлатежей.УИДСтрокиДокумента КАК УИДСтроки,
		               |	сабГрафикПлатежей.Сумма КАК Сумма,
		               |	сабГрафикПлатежей.Сумма КАК СуммаБюджета,
		               |	сабГрафикПлатежей.НазначениеПлатежаУчет КАК Основание,
		               |	сабГрафикПлатежей.ЦФО КАК ЦФО,
		               |	сабГрафикПлатежей.ПодразделениеЦФО КАК Подразделение
		               |ИЗ
		               |	РегистрСведений.сабГрафикПлатежей КАК сабГрафикПлатежей
		               |ГДЕ
		               |	сабГрафикПлатежей.ЦФО В(&ЦФО)
		               |	И сабГрафикПлатежей.СтатьяДДС В(&СтатьяДДС)
		               |	И сабГрафикПлатежей.ДатаПлатежа МЕЖДУ &ДатаНачала И &ДатаОкончания
		               |	И НЕ сабГрафикПлатежей.Сценарий = ЗНАЧЕНИЕ(Справочник.СценарииПланирования.ПустаяСсылка)";
		
		СписокЦФО = Новый Массив;
		СписокСтатей = Новый Массив;
		Если НЕ Расшифровка Тогда
			СписокЦФО.Добавить(?(ЗначениеЗаполнено(Объект.ЦФО), Объект.ЦФО, Объект.Предприятие));
			СписокСтатей.Добавить(Объект.СтатьяДДС);
		Иначе
			Для каждого ТекСтрока Из Объект.ТабличнаяЧасть Цикл
				Если ЗначениеЗаполнено(ТекСтрока.Предприятие) Тогда
					СписокЦФО.Добавить(ТекСтрока.Предприятие);				
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТекСтрока.СтатьяДДС) Тогда
					СписокСтатей.Добавить(ТекСтрока.СтатьяДДС);
				Иначе
					СписокСтатей.Добавить(Объект.СтатьяДДС);	
				КонецЕсли;
			КонецЦикла;
			Если НЕ СписокСтатей.Количество() Тогда
				СписокСтатей.Добавить(Объект.СтатьяДДС);
			КонецЕсли;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ЦФО", СписокЦФО);
		//Запрос.УстановитьПараметр("Источник", Объект.Источник);
		Запрос.УстановитьПараметр("СтатьяДДС", СписокСтатей);
		Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(Объект.ДатаОплаты));
		Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(Объект.ДатаОплаты));
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Объект.СтрокиГрафикаБюджета.Очистить();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = Объект.СтрокиГрафикаБюджета.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	сабГрафикПлатежей.Документ КАК Документ,
		               |	сабГрафикПлатежей.Источник КАК Источник,
		               |	сабГрафикПлатежей.УИДСтрокиДокумента КАК УИДСтроки,
		               |	сабГрафикПлатежей.Сумма КАК Сумма,
		               |	сабГрафикПлатежей.НазначениеПлатежаУчет КАК Основание
		               |ИЗ
		               |	РегистрСведений.сабГрафикПлатежей КАК сабГрафикПлатежей
		               |ГДЕ
		               |	сабГрафикПлатежей.УИДСтрокиДокумента В(&УИДыСтрок)";
		
		Запрос.УстановитьПараметр("УИДыСтрок", Объект.СтрокиГрафикаБюджета.Выгрузить().ВыгрузитьКолонку("УИДСтроки"));
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НайденныеСтроки = Объект.СтрокиГрафикаБюджета.НайтиСтроки(Новый Структура("УИДСтроки", Выборка.УИДСтроки));
			Для каждого ТекСтрока Из НайденныеСтроки Цикл
				ЗаполнитьЗначенияСвойств(ТекСтрока, Выборка);			
			КонецЦикла;
		КонецЦикла
		
	КонецЕсли;
	
	Элементы.Группа10.Видимость = Объект.СтрокиГрафикаБюджета.Количество();
	КоличествоСтрокГрафикаБюджета = Объект.СтрокиГрафикаБюджета.Количество();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаПринадлежностиСчетаНаСервере(Изменять, Реквизит, ИмяЭлемента)
	
	ТекстПримечания = "";
	
	Если ЗначениеЗаполнено(Реквизит) Тогда
		ТекПредприятиеСчета = ПП_Сервер.ПолучитьПредприятие(?(Объект.Дата = '00010101', ТекущаяДата(), Объект.Дата), Реквизит);
		
		Если ЗначениеЗаполнено(Объект.Предприятие) И НЕ Объект.Предприятие = ТекПредприятиеСчета Тогда	
			ТекстПримечания = "Предприятие источника оплаты отличается от предприятия шапки документа. Предприятие источника: " + Строка(ТекПредприятиеСчета);
		КонецЕсли;
		
	КонецЕсли;
	
	ОтветственныйЗаИсточник = ПолучитьОтветственногоПоИсточнику(Объект.Источник);
	
	Если ЗначениеЗаполнено(Объект.БанковскийСчет) И Не ЗначениеЗаполнено(ОтветственныйЗаИсточник) Тогда
		ТекстПримечания = ТекстПримечания + "; Не назначен ответственный за источник.";
	Иначе
		ТекстПримечания = "";	
	КонецЕсли;
	
	Если ТекстПримечания = "" Тогда
		Элементы[ИмяЭлемента].ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	Иначе
		Элементы[ИмяЭлемента].ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	КонецЕсли;
	
	Элементы[ИмяЭлемента].Подсказка = ТекстПримечания;
	
	Если Изменять И ЗначениеЗаполнено(Реквизит) Тогда
		Объект.Валюта = Реквизит.ВалютаДенежныхСредств;
	КонецЕсли;
	
	ТекПредприятие = Неопределено;
	ТекВалютаПредприятия = Неопределено; 
	ТекВалютаЦФО = Неопределено;
	
	Если ЗначениеЗаполнено(Объект.Источник) Тогда
		ТекПредприятие = ПП_Сервер.ПолучитьПредприятие(?(Объект.Дата = '00010101', ТекущаяДата(), Объект.Дата), Объект.Источник);
		ТекВалютаПредприятия = ТекПредприятие.ОсновнаяВалютаУчета;;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ЦФО) Тогда
		ТекВалютаЦФО = ВалютаЦФО;
	Конецесли;
		
	Элементы.Сумма.Доступность = Не Объект.РасшифровкаПлатежа И (НЕ ЗначениеЗаполнено(Объект.Валюта) ИЛИ НЕ ЗначениеЗаполнено(ТекВалютаПредприятия) ИЛИ Объект.Валюта = ТекВалютаПредприятия);
	
	СчетКонтрагентаПриИзмененииНаСервере(Изменять);
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОтветственногоПоИсточнику(Источник)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Д_ИсточникППСрезПоследних.ОтветственноеЛицо
	|ИЗ
	|	РегистрСведений.Д_ИсточникПП.СрезПоследних(, БанковскиеСчета = &Источник) КАК Д_ИсточникППСрезПоследних";
	
	Запрос.УстановитьПараметр("Источник", Источник);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Возврат Выборка.ОтветственноеЛицо;
		
	КонецЦикла;
	
	
КонецФункции // ()

&НаКлиенте
Процедура ЗаявкаСчетКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекЗначение = Элементы.Заявка.ТекущиеДанные.Контрагент;
	Если ТипЗнч(ТекЗначение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		СтандартнаяОбработка = Ложь;		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаПриАктивизацииСтроки(Элемент)
	//Если Объект.ЗаявкаБезнал.Количество() Тогда
	//	Если НЕ ПустаяСтрока(Элементы.Заявка.ТекущиеДанные.СтатьяДДС) Тогда
	//		Элементы.ЗаявкаОтветственный.Видимость = ДоступностьОтветственного(Элементы.Заявка.ТекущиеДанные.СтатьяДДС);
	//	КонецЕсли;
	//КонецЕсли;
	
	Если НЕ Элементы.Заявка.ТекущиеДанные = Неопределено Тогда
		Элементы.ЗаявкаФормаПлатежногоПоручения.Доступность = ВозвратВидаОперации(Элементы.Заявка.ТекущиеДанные.ВидОперации);
	Иначе
		Элементы.ЗаявкаФормаПлатежногоПоручения.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВозвратВидаОперации(ТекВид)

	Возврат ТекВид = Перечисления.ВидыОперацийПлатежноеПоручение[1];	

КонецФункции // ()
 
&НаКлиенте
Процедура ОткрытьПриложение(Команда)
	Если НЕ Элементы.Заявка.ТекущиеДанные = Неопределено Тогда
		Если НЕ ПустаяСтрока(Элементы.Заявка.ТекущиеДанные.Приложение) Тогда
			ОткрытьЗначение(Элементы.Заявка.ТекущиеДанные.Приложение);			
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаВидОперацииПриИзменении(Элемент)
	ПеречислениеНалога = ВозвратВидаОперации(Элементы.Заявка.ТекущиеДанные.ВидОперации);
	Элементы.ЗаявкаФормаПлатежногоПоручения.Доступность = ПеречислениеНалога;
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеПриИзменении(Элемент)
		
	ПредприятиеПриИзмененииНаСервере(Не Элемент = Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ПредприятиеПриИзмененииНаСервере(Изменять)
	
	Если Изменять Тогда
		Объект.ЦФО = Объект.Предприятие;	
	КонецЕсли;
	
	Если Изменять И (Не ЗначениеЗаполнено(Объект.Подразделение) Или Не Объект.Подразделение.Владелец = Объект.ЦФО) И ЗначениеЗаполнено(Объект.ЦФО) Тогда
		Объект.Подразделение = Объект.ЦФО.ВидДеятельности;
	КонецЕсли;
	
	Если Изменять Тогда
		УстановитьДоступность(Изменять);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ЦФО) И НЕ Объект.ЦФО = Объект.Предприятие Тогда
		ВалютаЦФО = Объект.ЦФО.ОсновнаяВалютаУчета;
	Иначе
		ВалютаЦФО = Объект.Предприятие.ОсновнаяВалютаУчета;
	КонецЕсли;			
	
	сабОбщегоНазначенияКлиентСервер.СкрытьПодразделения(ЭтаФорма, , "ЦФО");
	ЗаполнитьГрафикПоБюджету(Изменять);
	
	Если Элементы.Платежка.Видимость Тогда
		ПроверкаПринадлежностиСчетаНаСервере(Изменять, Объект.БанковскийСчет, "БанковскийСчет");
	Иначе	
		ПроверкаПринадлежностиСчетаНаСервере(Изменять, Объект.Источник, "Источник");
	КонецЕсли;
	
КонецПроцедуры
 
 &НаСервереБезКонтекста
 Функция ЭтоКазна()
 
 	Возврат Ложь;
 
 КонецФункции // ()

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	УстановитьДоступность(Не Элемент = Неопределено);
	ЗаявкаКонтрагентПриИзменении(Неопределено);
	
КонецПроцедуры

// Процедура устанавливает доступность реквизитов формы, в зависимости от вида 
// операции.
//
&НаСервере
Процедура УстановитьДоступность(Изменять)
	
	Если Объект.ТипИсточника = ПредопределенноеЗначение("Перечисление.Д_ИсточникиСредств.БезНал") Тогда
		Элементы.Платежка.Видимость = Истина;
		Элементы.Казна.Видимость = Ложь;
		Элементы.КО.Видимость = Ложь;
		Элементы.ВидОперации.Видимость = Истина;
		
		МассивВидов = Новый Массив;
		МассивВидов.Добавить(Перечисления.ВидыОперацийПлатежноеПоручение.Оплата);
		МассивВидов.Добавить(Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога);
		МассивВидов.Добавить(Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеСотруднику);
		МассивВидов.Добавить(Перечисления.ВидыОперацийПлатежноеПоручение.ОплатаВНХ);
		МассивВидов.Добавить(Перечисления.ВидыОперацийПлатежноеПоручение.СнятиеНаличных);
		
		Элементы.ВидОперации.СписокВыбора.ЗагрузитьЗначения(МассивВидов);
		
		Элементы.НазначениеПлатежаБух.Видимость = Истина;
		//КонецЕсли;
	ИначеЕсли Объект.ТипИсточника = ПредопределенноеЗначение("Перечисление.Д_ИсточникиСредств.Казна") Тогда
		Элементы.Платежка.Видимость = Ложь;
		Элементы.Казна.Видимость = Истина;
		Элементы.КО.Видимость = Ложь;
		
		Элементы.ВидОперации.Видимость = Ложь;
		
		Элементы.НазначениеПлатежаБух.Видимость = Ложь;
		Если Изменять Тогда
			Объект.Организация = Неопределено;
			Объект.НазначениеПлатежа = "";
		КонецЕсли;
	ИначеЕсли Объект.ТипИсточника = ПредопределенноеЗначение("Перечисление.Д_ИсточникиСредств.Нал") Тогда
		Элементы.Платежка.Видимость = Ложь;
		Элементы.Казна.Видимость = Ложь;
		Элементы.КО.Видимость = Истина;
		Элементы.ВидОперации.Видимость = Истина;
		
		МассивВидов = Новый Массив;
		МассивВидов.Добавить(Перечисления.ВидыОперацийПлатежноеПоручение.Оплата);
		МассивВидов.Добавить(Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеСотруднику);
		МассивВидов.Добавить(Перечисления.ВидыОперацийПлатежноеПоручение.ОплатаВНХ);
		МассивВидов.Добавить(Перечисления.ВидыОперацийПлатежноеПоручение.ВзносНаличнымиВБанк);
		
		Элементы.ВидОперации.СписокВыбора.ЗагрузитьЗначения(МассивВидов);
		
		Элементы.НазначениеПлатежаБух.Видимость = Ложь;
		Если Изменять Тогда
			Объект.Организация = Неопределено;
			Объект.НазначениеПлатежа = "";
		КонецЕсли;
	КонецЕсли;
	
	//УстановитьДоступность(НЕ Элемент = Неопределено);
	Если Изменять Тогда
		
		СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении(Объект.Организация);
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога") Тогда
			Объект.КодБК = "";
			Объект.КодОКАТО = СтруктураДанные.КодОКАТО;
			Объект.ПоказательОснования = "ТП";
			ПериодичностьУплаты = "МС";
			ГодПлатежа = Год(Объект.Дата);
			ПериодПлатежа = Месяц(Объект.Дата);
			УстановитьПоказательПериода();
			//УстановитьДоступностьРеквизитовПеречисленияНалогов();
			Объект.ПоказательНомера = "";
			Объект.ПоказательДаты = "0";
			Объект.ПоказательТипа = "НС";
			Объект.СтатусСоставителя = "01";
			Объект.КодВидаДохода = "";
			//Если ЭтоФизЛицо Тогда
			//	Объект.КПППлательщика = 0;
			//КонецЕсли;
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПеречислениеСотруднику") Тогда
			Объект.КодБК               = "";
			Объект.КодОКАТО            = "";
			Объект.СтатусСоставителя   = "";
			Объект.ПоказательОснования = "";
			Объект.ПоказательТипа      = "";
			Объект.ПоказательПериода   = "";
			Объект.ПоказательНомера    = "";
			Объект.ПоказательДаты      = "0";
			//Объект.Договор      	   = "";
			ПериодичностьУплаты 	   = "";
			ГодПлатежа 				   = "";
			ПериодПлатежа 			   = "";
			Объект.КодВидаДохода       = "2";
			УстановитьКодВыплатПоСтатье(Изменять);
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.СнятиеНаличных") Тогда
			Объект.КодБК               = "";
			Объект.КодОКАТО            = "";
			Объект.СтатусСоставителя   = "";
			Объект.ПоказательОснования = "";
			Объект.ПоказательТипа      = "";
			Объект.ПоказательПериода   = "";
			Объект.ПоказательНомера    = "";
			Объект.ПоказательДаты      = "0";
			//Объект.Договор      	   = "";
			ПериодичностьУплаты 	   = "";
			ГодПлатежа 				   = "";
			ПериодПлатежа 			   = "";
			Объект.СчетКонтрагента     = "";
			Объект.Договор		       = "";
			Объект.КодВидаДохода = "";
		Иначе
			Объект.КодБК               = "";
			Объект.КодОКАТО            = "";
			Объект.СтатусСоставителя   = "";
			Объект.ПоказательОснования = "";
			Объект.ПоказательТипа      = "";
			Объект.ПоказательПериода   = "";
			Объект.ПоказательНомера    = "";
			Объект.ПоказательДаты      = "0";
			ПериодичностьУплаты = "";
			ГодПлатежа = "";
			ПериодПлатежа = "";
			Объект.КодВидаДохода       = "";
			//Если ЭтоФизЛицо Тогда
			//	Объект.КПППлательщика = "";
			//КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	//ЗаполнитьРеквизитыНалогов();
	Элементы.Контрагент.ВыбиратьТип = Ложь;
	//Элементы.Контрагент1.ВыбиратьТип = Ложь;
	Элементы.Контрагент2.ВыбиратьТип = Ложь;
	Элементы.СчетКонтрагента.ВыбиратьТип = Ложь;
	
	Элементы.Контрагент.СвязиПараметровВыбора = Новый ФиксированныйМассив(Новый Массив);
	Элементы.Контрагент1.СвязиПараметровВыбора = Новый ФиксированныйМассив(Новый Массив);
	Элементы.Контрагент2.СвязиПараметровВыбора = Новый ФиксированныйМассив(Новый Массив);
	
	Элементы.Договор.Доступность = Истина;
	Элементы.ВыдачаВПодОтчет.Видимость = Ложь;
	
	Если Не Объект.ТипИсточника = ПредопределенноеЗначение("Перечисление.Д_ИсточникиСредств.Казна") Тогда
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ОплатаВНХ") Тогда
			
			Если Объект.ТипИсточника = ПредопределенноеЗначение("Перечисление.Д_ИсточникиСредств.Нал") Тогда
				Если Не ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Предприятия") Тогда
					Если Изменять ИЛИ Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
						Объект.Контрагент = ПредопределенноеЗначение("Справочник.Предприятия.ПустаяСсылка");		
					КонецЕсли;
				КонецЕсли;			
			Иначе
				Если Не ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
					Если Изменять ИЛИ Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
						Объект.Контрагент = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");		
					КонецЕсли
				КонецЕсли;
			КонецЕсли;
			Если Не ТипЗнч(Объект.СчетКонтрагента) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
				Если Изменять ИЛИ Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
					Объект.СчетКонтрагента = ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");		
				КонецЕсли;
			КонецЕсли;
			//Если Не ТипЗнч(Объект.Договор) = Тип("СправочникСсылка.ВнутренниеДоговоры") Тогда
			Если Изменять ИЛИ Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
				Объект.Договор = ПредопределенноеЗначение("Справочник.ВнутренниеДоговоры.ПустаяСсылка");
			КонецЕсли;
			Массив = Новый Массив;
			Массив.Добавить(Тип("СправочникСсылка.ВнутренниеДоговоры"));
			ОписаниеТиповЧ = Новый ОписаниеТипов(Массив);	
			Элементы.Договор.ОграничениеТипа = ОписаниеТиповЧ;
			Элементы.Договор1.ОграничениеТипа = ОписаниеТиповЧ;
			Элементы.Договор2.ОграничениеТипа = ОписаниеТиповЧ;
			
			МассивПараметровВыбора = Новый Массив;
			МассивПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Предприятие", "Объект.Предприятие", РежимИзмененияСвязанногоЗначения.Очищать));
			//МассивПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Контрагент", РежимИзмененияСвязанногоЗначения.Очищать));
			Элементы.Договор.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
			Элементы.Договор1.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
			Элементы.Договор2.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
			Элементы.Группа3.Видимость = Истина;
			Элементы.ИсточникПолучатель.Видимость = Ложь;
			Элементы.ИсточникПолучатель1.Видимость = Истина;
			Элементы.СчетКонтрагента1.Видимость = Ложь;
			Элементы.Договор.Видимость = Истина;
			Элементы.Договор2.Видимость = Истина;
			Элементы.ЦФО.Видимость = Ложь;
			Элементы.КодВидаДохода.Видимость = Ложь;
			
			МассивПараметровВыбора = Новый Массив;
			МассивПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Предприятие", "Объект.Контрагент", РежимИзмененияСвязанногоЗначения.Очищать));
			Элементы.ИсточникПолучатель1.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
			
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПеречислениеСотруднику") Тогда
			Элементы.ВыдачаВПодОтчет.Видимость = Истина;
			Если Не ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				Если Изменять ИЛИ Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
					Объект.Контрагент = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");		
				КонецЕсли;
			КонецЕсли;
			
			Если Не ТипЗнч(Объект.СчетКонтрагента) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
				Если Изменять ИЛИ Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
					Объект.СчетКонтрагента = ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");		
				КонецЕсли
			КонецЕсли;
			
			Элементы.Договор.Видимость = Ложь;
			Элементы.Договор2.Видимость = Ложь;
			Элементы.Группа3.Видимость = Истина;
			Элементы.ИсточникПолучатель.Видимость = Ложь;
			Элементы.ИсточникПолучатель1.Видимость = Ложь;
			Элементы.СчетКонтрагента1.Видимость = Ложь;
			Элементы.ЦФО.Видимость = Истина;
			Элементы.КодВидаДохода.Видимость = Истина;
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.СнятиеНаличных") Тогда
			Элементы.Группа3.Видимость = Ложь;
			Элементы.ИсточникПолучатель.Видимость = Истина;
			Элементы.ИсточникПолучатель1.Видимость = Ложь;
			Элементы.СчетКонтрагента1.Видимость = Ложь;
			МассивПараметровВыбора = Новый Массив;
			МассивПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Предприятие", "Объект.Предприятие", РежимИзмененияСвязанногоЗначения.Очищать));
			Элементы.ИсточникПолучатель.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
			Элементы.ЦФО.Видимость = Ложь;
			Элементы.КодВидаДохода.Видимость = Ложь;
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ВзносНаличнымиВБанк") Тогда
			Элементы.Группа3.Видимость = Ложь;
			Элементы.ИсточникПолучатель.Видимость = Истина;
			Элементы.ИсточникПолучатель1.Видимость = Ложь;
			Элементы.СчетКонтрагента1.Видимость = Истина;
			Если Изменять ИЛИ Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
				Объект.Контрагент = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");		
			КонецЕсли;
			Если Не ТипЗнч(Объект.СчетКонтрагента) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
				Если Изменять ИЛИ Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
					Объект.СчетКонтрагента = ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");		
				КонецЕсли;
			КонецЕсли;
			//Если Не ТипЗнч(Объект.Договор) = Тип("СправочникСсылка.ВнутренниеДоговоры") Тогда
			Если Изменять ИЛИ Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
				Объект.Договор = ПредопределенноеЗначение("Справочник.ВнутренниеДоговоры.ПустаяСсылка");
			КонецЕсли;
			Массив = Новый Массив;
			Массив.Добавить(Тип("СправочникСсылка.ВнутренниеДоговоры"));
			ОписаниеТиповЧ = Новый ОписаниеТипов(Массив);	
			Элементы.Договор.ОграничениеТипа = ОписаниеТиповЧ;
			Элементы.Договор1.ОграничениеТипа = ОписаниеТиповЧ;
			Элементы.Договор2.ОграничениеТипа = ОписаниеТиповЧ;
			
			МассивПараметровВыбора = Новый Массив;
			МассивПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Предприятие", "Объект.Предприятие", РежимИзмененияСвязанногоЗначения.Очищать));
			//МассивПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Контрагент", РежимИзмененияСвязанногоЗначения.Очищать));
			Элементы.Договор.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
			Элементы.Договор1.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
			Элементы.Договор2.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
			
			Элементы.Контрагент.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
			Элементы.Контрагент1.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
			Элементы.Контрагент2.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
			
			Элементы.КодВидаДохода.Видимость = Ложь;
		Иначе
			Если Не ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				Если Изменять ИЛИ Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
					Объект.Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");		
				КонецЕсли;
			КонецЕсли;
			
			Если Не ТипЗнч(Объект.СчетКонтрагента) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
				Если Изменять ИЛИ Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
					Объект.СчетКонтрагента = ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");		
				КонецЕсли
			КонецЕсли;
			
			Если Не ТипЗнч(Объект.Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				Если Изменять ИЛИ Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
					Объект.Договор = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
				КонецЕсли;
			КонецЕсли;
			
			Массив = Новый Массив;
			Массив.Добавить(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
			ОписаниеТиповЧ = Новый ОписаниеТипов(Массив);	
			Элементы.Договор.ОграничениеТипа = ОписаниеТиповЧ;
			Элементы.Договор2.ОграничениеТипа = ОписаниеТиповЧ;
			
			МассивПараметровВыбора = Новый Массив;
			Если ЗначениеЗаполнено(Объект.ЦФО) И НЕ Объект.ЦФО = Объект.Предприятие Тогда
				МассивПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Предприятие", "Объект.ЦФО", РежимИзмененияСвязанногоЗначения.Очищать));
				МассивПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Контрагент", РежимИзмененияСвязанногоЗначения.Очищать));
			Иначе
				МассивПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Предприятие", "Объект.Предприятие", РежимИзмененияСвязанногоЗначения.Очищать));
				МассивПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Контрагент", РежимИзмененияСвязанногоЗначения.Очищать));
			КонецЕсли;
			Элементы.Договор.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
			Элементы.Договор2.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
			
			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога") Тогда
				//Элементы.РеквизитыНалогов.Видимость = Истина;
				Элементы.Договор.Видимость = Ложь;
				Элементы.Договор2.Видимость = Ложь;
			Иначе
				//Элементы.РеквизитыНалогов.Видимость = Ложь;
				Элементы.Договор.Видимость = Истина;
				Элементы.Договор2.Видимость = Истина;
			КонецЕсли;
			Элементы.Группа3.Видимость = Истина;
			Элементы.ИсточникПолучатель.Видимость = Ложь;
			Элементы.ИсточникПолучатель1.Видимость = Ложь;
			
			Элементы.ЦФО.Видимость = Истина;
			Элементы.СчетКонтрагента1.Видимость = Ложь;
			Элементы.КодВидаДохода.Видимость = Ложь;
			УстановитьКодВыплатПоСтатье(Изменять);
		КонецЕсли;
	Иначе
		Если Не ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Предприятия") Тогда
			Если Изменять ИЛИ Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
				Объект.Контрагент = ПредопределенноеЗначение("Справочник.Предприятия.ПустаяСсылка");		
			КонецЕсли;
		КонецЕсли;
		
		Если Не ТипЗнч(Объект.Договор) = Тип("СправочникСсылка.ВнутренниеДоговоры") Тогда
			Если Изменять ИЛИ Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
				Объект.Договор = ПредопределенноеЗначение("Справочник.ВнутренниеДоговоры.ПустаяСсылка");		
			КонецЕсли
		КонецЕсли;
		
		Массив = Новый Массив;
		Массив.Добавить(Тип("СправочникСсылка.ВнутренниеДоговоры"));
		ОписаниеТиповЧ = Новый ОписаниеТипов(Массив);	
		Элементы.Договор1.ОграничениеТипа = ОписаниеТиповЧ;
		Элементы.Договор.Видимость = Истина;
		Элементы.Договор2.Видимость = Истина;
		Элементы.ЦФО.Видимость = Ложь;
		
	КонецЕсли;
	
	
	
КонецПроцедуры // УстановитьДоступность()

Процедура УстановитьПоказательПериода()
	
	Если ПериодичностьУплаты = "0" Тогда
		Объект.ПоказательПериода = "0";
	ИначеЕсли ПериодичностьУплаты = "-" Тогда
		Объект.ПоказательПериода = Формат(ДатаПлатежа, "ДФ=dd.MM.yyyy");
	Иначе
		Объект.ПоказательПериода = Лев(ПериодичностьУплаты, 2)
		+ "."
		+ Формат(ПериодПлатежа, "ЧЦ=2; ЧН=; ЧВН=")
		+ "."
		+ Формат(ГодПлатежа, "ЧЦ=4; ЧГ=");
	КонецЕсли;
	
КонецПроцедуры // УстановитьПоказательПериода()

Процедура УстановитьДоступностьРеквизитовПеречисленияНалогов()
	
	//Если ПериодичностьУплаты = "0" Тогда
	//	Элементы.ГодПериод.Видимость = Ложь;
	//	Элементы.ДатаПлатежа.Видимость = Ложь;
	//Иначе
	//	Если ПериодичностьУплаты = "-" Тогда
	//		Элементы.ГодПериод.Видимость = Ложь;
	//		Элементы.ДатаПлатежа.Видимость = Истина;
	//	Иначе
	//		Элементы.ГодПериод.Видимость = Истина;
	//		Элементы.ДатаПлатежа.Видимость = Ложь;
	//		Элементы.ПериодПлатежа.Видимость = ПериодичностьУплаты <> "ГД";
	//		Если ПериодичностьУплаты = "МС" Тогда
	//			Элементы.ПериодПлатежа.МинимальноеЗначение = 1;
	//			Элементы.ПериодПлатежа.МаксимальноеЗначение = 12;
	//			Элементы.ПериодПлатежа.Заголовок = "Месяц";
	//		ИначеЕсли ПериодичностьУплаты = "КВ" Тогда
	//			Элементы.ПериодПлатежа.МинимальноеЗначение = 1;
	//			Элементы.ПериодПлатежа.МаксимальноеЗначение = 4;
	//			Элементы.ПериодПлатежа.Заголовок = "Квартал";
	//		ИначеЕсли ПериодичностьУплаты = "ПЛ" Тогда
	//			Элементы.ПериодПлатежа.МинимальноеЗначение = 1;
	//			Элементы.ПериодПлатежа.МаксимальноеЗначение = 2;
	//			Элементы.ПериодПлатежа.Заголовок = "Полугодие";
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры // УстановитьДоступностьРеквизитовПеречисленияНалогов()

&НаКлиенте
Процедура ТипЗаявкиПриИзменении(Элемент)
		
	ВидОперацииПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПриИзменении(Элемент)
	
	ВалютнаяСуммаКонтрагентаПриИзмененииНаСервере(Не Элемент = Неопределено, ?(Элемент = Неопределено, "", Элемент.Имя));
	
	Элементы.СуммаНДС.Доступность = НЕ Объект.СтавкаНДС = сабОбщегоНазначения.ПолучитьЭлементНДС("Без НДС") И ЗначениеЗаполнено(Объект.СтавкаНДС);
	РеквизитСуммы = ?(Элементы.ВалютнаяСуммаКонтрагента.Видимость, Объект.ВалютнаяСуммаКонтрагента, ?(Элементы.ВалютнаяСумма.Видимость, Объект.ВалютнаяСумма, Объект.Сумма));

	Если Не Элемент = Неопределено Тогда
		СтавкаНДС = сабОбщегоНазначения.ПолучитьСтавкуНДС(Объект.СтавкаНДС);
		Объект.СуммаНДС = РеквизитСуммы - (РеквизитСуммы) / ((СтавкаНДС + 100) / 100);
	КонецЕсли;
	
	Если Не Элемент = Неопределено Тогда
		СформироватьНазначениеПлатежа(Истина);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СформироватьНазначениеПлатежа(ИзменениеСуммы = Ложь) Экспорт
	
	Если ИзменениеСуммы Тогда
		ПозицияСуммы = Найти(Объект.НазначениеПлатежа, "Сумма ");
		Если ПозицияСуммы = 0
			И ЗначениеЗаполнено(Объект.НазначениеПлатежа) Тогда
			ТекстНазначение = Объект.НазначениеПлатежа;
		Иначе
			ТекстНазначение = Лев(Объект.НазначениеПлатежа, ПозицияСуммы - 1);
		КонецЕсли;
		Если Прав(ТекстНазначение, 1) = Символы.ПС Тогда
			ТекстНазначение = Лев(ТекстНазначение, СтрДлина(ТекстНазначение) - 1);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекстНазначение) Тогда
			ТекстНазначение = НазначениеПлатежа;
		КонецЕсли;
	Иначе
		ТекстНазначение = НазначениеПлатежа;
	КонецЕсли;
	
	РеквизитСуммы = ?(Элементы.ВалютнаяСуммаКонтрагента.Видимость, Объект.ВалютнаяСуммаКонтрагента, ?(Элементы.ВалютнаяСумма.Видимость, Объект.ВалютнаяСумма, Объект.Сумма));
	
	ТекстСумма = Строка(Формат(РеквизитСуммы, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ="));
	
	ТекстНДС = "";
	
	Если Объект.РасшифровкаПлатежа Тогда
		СтавкаНДС10 = сабОбщегоНазначения.ПолучитьЭлементНДС("10%");
		СтавкаНДС18 = сабОбщегоНазначения.ПолучитьЭлементНДС("18%(до 2019)");
		СтавкаНДС20 = сабОбщегоНазначения.ПолучитьЭлементНДС("20%");
		СтавкаБезНДС = сабОбщегоНазначения.ПолучитьЭлементНДС("Без НДС");
		СуммаНДС10 = Объект.ТабличнаяЧасть.Итог("СуммаНДС10"); 
		СуммаНДС18 = Объект.ТабличнаяЧасть.Итог("СуммаНДС18");
		СуммаНДС20 = Объект.ТабличнаяЧасть.Итог("СуммаНДС20");
		Если СуммаНДС10 Тогда
			ТекстНДС = НСтр("ru = 'НДС(%СтавкаНДС%) %СуммаНДС%'");
			ТекстНДС = СтрЗаменить(ТекстНДС, "%СтавкаНДС%", Строка(СтавкаНДС10));
			ТекстНДС = СтрЗаменить(ТекстНДС, "%СуммаНДС%", Строка(Формат(СуммаНДС10, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=")));
		КонецЕсли;
		Если СуммаНДС18 Тогда
			Если ЗначениеЗаполнено(ТекстНДС) Тогда
				ТекстНДС = ТекстНДС + ", ";
			КонецЕсли; 
			ТекстНДС18 = НСтр("ru = 'НДС(%СтавкаНДС%) %СуммаНДС%'");
			ТекстНДС18 = СтрЗаменить(ТекстНДС18, "%СтавкаНДС%", Строка(СтавкаНДС18));
			ТекстНДС18 = СтрЗаменить(ТекстНДС18, "%СуммаНДС%", Строка(Формат(СуммаНДС18, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=")));
			ТекстНДС = ТекстНДС + ТекстНДС18;
		КонецЕсли;
		Если СуммаНДС20 Тогда
			Если ЗначениеЗаполнено(ТекстНДС) Тогда
				ТекстНДС = ТекстНДС + ", ";
			КонецЕсли; 
			ТекстНДС20 = НСтр("ru = 'НДС(%СтавкаНДС%) %СуммаНДС%'");
			ТекстНДС20 = СтрЗаменить(ТекстНДС20, "%СтавкаНДС%", Строка(СтавкаНДС20));
			ТекстНДС20 = СтрЗаменить(ТекстНДС20, "%СуммаНДС%", Строка(Формат(СуммаНДС20, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=")));
			ТекстНДС = ТекстНДС + ТекстНДС20;
		КонецЕсли;
		Если Окр(Объект.ТабличнаяЧасть.Итог("СуммаНДС"), 0) = Окр(СуммаНДС10, 0) И НЕ СуммаНДС10 = 0 Тогда
			Объект.СтавкаНДС = СтавкаНДС10;
			Объект.СуммаНДС = СуммаНДС10;
		ИначеЕсли Окр(Объект.ТабличнаяЧасть.Итог("СуммаНДС"), 0) = Окр(СуммаНДС18, 0) И НЕ СуммаНДС18 = 0 Тогда
			Объект.СтавкаНДС = СтавкаНДС18;
			Объект.СуммаНДС = СуммаНДС18;
		ИначеЕсли Окр(Объект.ТабличнаяЧасть.Итог("СуммаНДС"), 0) = Окр(СуммаНДС20, 0) И НЕ СуммаНДС20 = 0 Тогда
			Объект.СтавкаНДС = СтавкаНДС20;
			Объект.СуммаНДС = СуммаНДС20;
		ИначеЕсли СуммаНДС10 = 0 и СуммаНДС20 = 0 и СуммаНДС18 = 0 Тогда
			Объект.СтавкаНДС = СтавкаБезНДС;
			Объект.СуммаНДС = 0;
		Иначе
			Объект.СтавкаНДС = сабОбщегоНазначения.ПолучитьЭлементНДС("Произвольная");
			Объект.СуммаНДС = СуммаНДС10 + СуммаНДС18 + СуммаНДС20;
		КонецЕсли; 
	Иначе
		СтавкаНДС = сабОбщегоНазначения.ПолучитьСтавкуНДС(Объект.СтавкаНДС);
		
		Если ЗначениеЗаполнено(Объект.СтавкаНДС) И НЕ БезНДС() Тогда
			ТекстНДС = НСтр("ru = 'НДС(%СтавкаНДС%) %СуммаНДС%'");
			ТекстНДС = СтрЗаменить(ТекстНДС, "%СтавкаНДС%", Строка(Объект.СтавкаНДС));
			ТекстНДС = СтрЗаменить(ТекстНДС, "%СуммаНДС%", Строка(Формат(Объект.СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=")));
			ТекстНДС = СтрЗаменить(ТекстНДС, "(Произвольная)", "");
		КонецЕсли;
	КонецЕсли; 
	
	ТекстНазначениеПлатежа = НСтр(
	"ru = '%ТекстНазначение%
	|Сумма %ТекстСумма%
	|%ЗначениеСтавкиНДС% %ТекстНДС%'"
	);
	ТекстНазначениеПлатежа = СтрЗаменить(ТекстНазначениеПлатежа, "%ТекстНазначение%", ТекстНазначение);
	ТекстНазначениеПлатежа = СтрЗаменить(ТекстНазначениеПлатежа, "%ТекстСумма%", ТекстСумма);
	ТекстНазначениеПлатежа = СтрЗаменить(ТекстНазначениеПлатежа, "%ЗначениеСтавкиНДС%", ?(БезНДС() ИЛИ НЕ ЗначениеЗаполнено(Объект.СтавкаНДС), НСтр("ru = 'Без налога (НДС)'"), НСтр("ru = 'В т.ч. '")));
	ТекстНазначениеПлатежа = СтрЗаменить(ТекстНазначениеПлатежа, "%ТекстНДС%", ТекстНДС);
	
	Объект.НазначениеПлатежа = ТекстНазначениеПлатежа;
	
	СформироватьНазначениеДляУчета();
	НазначениеПлатежаДо = ТекстНазначение;
	
КонецПроцедуры // СформироватьНазначениеПлатежа()

&НаСервере
Функция БезНДС()
	Возврат Объект.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("Без НДС", Истина);
КонецФункции // ()

&НаКлиенте
Процедура РасшифровкаПлатежаПриИзменении(Элемент)
	Объект.РасшифровкаПлатежа = Расшифровка;
	
	//Элементы.Группа25.ТекущаяСтраница = ?(Расшифровка, Элементы.Расшифровка, Элементы.Группа6);
	
	Элементы.Группа6.Видимость = Не Расшифровка;
	Элементы.Расшифровка.Видимость = Расшифровка;

	//
	Элементы.Сумма.Доступность = НЕ Объект.РасшифровкаПлатежа;
	Элементы.ВалютнаяСумма.Доступность = НЕ Объект.РасшифровкаПлатежа;
	Элементы.ВалютнаяСуммаКонтрагента.Доступность = НЕ Объект.РасшифровкаПлатежа;
	Элементы.Статья.Доступность = НЕ Объект.РасшифровкаПлатежа;
	Элементы.СтавкаНДС.Доступность = НЕ Объект.РасшифровкаПлатежа;
	Элементы.СуммаНДС.Доступность = НЕ Объект.РасшифровкаПлатежа;
	
	Если НЕ Элемент = Неопределено Тогда
		Если Объект.РасшифровкаПлатежа Тогда
			Если Объект.ТабличнаяЧасть.Количество() = 0 Тогда
				НоваяСтрока = Объект.ТабличнаяЧасть.Добавить();
			Иначе
				НоваяСтрока = Объект.ТабличнаяЧасть[0];
			КонецЕсли; 
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Объект);
			НоваяСтрока.ВалСумма = Объект.ВалютнаяСумма;
			НоваяСтрока.Предприятие = Объект.ЦФО;
			
			ТекРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(НоваяСтрока.СтавкаНДС, "Ставка");
			
			Если НоваяСтрока.СтавкаНДС = сабОбщегоНазначения.ПолучитьЭлементНДС("10%") Тогда
				НоваяСтрока.СуммаНДС10 = НоваяСтрока.СуммаНДС;
				НоваяСтрока.СуммаНДС18 = 0;
				НоваяСтрока.СуммаНДС20 = 0;
			ИначеЕсли НоваяСтрока.СтавкаНДС = сабОбщегоНазначения.ПолучитьЭлементНДС("18%(до 2019)") Тогда
				НоваяСтрока.СуммаНДС18 = НоваяСтрока.СуммаНДС;
				НоваяСтрока.СуммаНДС10 = 0;
				НоваяСтрока.СуммаНДС20 = 0;
			ИначеЕсли НоваяСтрока.СтавкаНДС = сабОбщегоНазначения.ПолучитьЭлементНДС("20%") Тогда
				НоваяСтрока.СуммаНДС20 = НоваяСтрока.СуммаНДС;
				НоваяСтрока.СуммаНДС18 = 0;
				НоваяСтрока.СуммаНДС10 = 0;
			Иначе
				НоваяСтрока.СуммаНДС = 0;
				НоваяСтрока.СуммаНДС18 = 0;
				НоваяСтрока.СуммаНДС10 = 0;
				НоваяСтрока.СуммаНДС20 = 0;
			КонецЕсли;
			
		Иначе
			//Если Объект.ТабличнаяЧасть.Количество() > 1 И НЕ Вопрос("Строки расшифровки будут свернуты по данным первой строки. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да  Тогда
			//	Возврат;
			//КонецЕсли;
			Если НЕ Объект.ТабличнаяЧасть.Количество() Тогда
				Возврат;			
			КонецЕсли;
			Объект.Сумма = Объект.ТабличнаяЧасть.Итог("Сумма");
			Объект.ВалютнаяСумма = Объект.ТабличнаяЧасть.Итог("ВалСумма");
			Объект.СтатьяДДС = Объект.ТабличнаяЧасть[0].СтатьяДДС;
			Объект.ЦФО = Объект.ТабличнаяЧасть[0].Предприятие;
			Объект.Подразделение = Объект.ТабличнаяЧасть[0].Подразделение;
			Объект.СтавкаНДС = Объект.ТабличнаяЧасть[0].СтавкаНДС;
			Объект.СуммаНДС = Объект.ТабличнаяЧасть.Итог("СуммаНДС");
			Если Объект.ТабличнаяЧасть.Количество() > 1 Тогда
				МассивУУдалению = Новый Массив;
				Для ИндексСтроки = 1 По Объект.ТабличнаяЧасть.Количество() - 1 Цикл
					МассивУУдалению.Добавить(Объект.ТабличнаяЧасть[ИндексСтроки]);			
				КонецЦикла; 
				Для каждого ТекСтрокаМассива Из МассивУУдалению Цикл
					Объект.ТабличнаяЧасть.Удалить(ТекСтрокаМассива);			
				КонецЦикла; 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//Элементы.Расшифровка.Доступность = Объект.РасшифровкаПлатежа;
	//Элементы.ТабличнаяЧастьЗаполнитьПоСрокамОплаты.Доступность = Объект.РасшифровкаПлатежа;
	//Элементы.Группа9.ОтображениеСтраниц = ?(Объект.РасшифровкаПлатежа, ОтображениеСтраницФормы.ЗакладкиСверху, ОтображениеСтраницФормы.Нет);
	//Если Объект.РасшифровкаПлатежа Тогда
	//	Элементы.Группа9.ТекущаяСтраница = Элементы.Расшифровка;
	//Иначе	
	//	Элементы.Группа9.ТекущаяСтраница = Элементы.ПараметрыЗаявки;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Объект.РасшифровкаПлатежа Тогда
		//Объект.Сумма = Объект.ТабличнаяЧасть.Итог("Сумма");
		
		РазличныеСтавкиНДС = Ложь;
		МассивСтавокНДС = Новый Массив;
	
		Объект.ВалютнаяСумма = Объект.ТабличнаяЧасть.Итог("ВалСумма");
		Объект.ВалютнаяСуммаКонтрагента = Объект.ТабличнаяЧасть.Итог("ВалютнаяСуммаКонтрагента");
		
		ОбщаяСуммаЗаявки = 0;
		
		Для Каждого ТекСтрокаРасшифровки Из Объект.ТабличнаяЧасть Цикл
			
			ВалЦФО = БюджетныйНаСервере.ВернутьРеквизит(ТекСтрокаРасшифровки.Предприятие, "ОсновнаяВалютаУчета");
			
			Если Не ЗначениеЗаполнено(ВалЦФО) ИЛИ НЕ ЗначениеЗаполнено(Объект.Валюта) ИЛИ (ВалЦФО = Объект.Валюта) Тогда
				ОбщаяСуммаЗаявки = ОбщаяСуммаЗаявки + ТекСтрокаРасшифровки.Сумма
			Иначе
				ОбщаяСуммаЗаявки = ОбщаяСуммаЗаявки + ТекСтрокаРасшифровки.ВалСумма
			КонецЕсли;
			
			Если МассивСтавокНДС.Найти(ТекСтрокаРасшифровки.СтавкаНДС) = Неопределено Тогда
				МассивСтавокНДС.Добавить(ТекСтрокаРасшифровки.СтавкаНДС);			
			КонецЕсли;
					
		КонецЦикла;
		
		Объект.Сумма = ОбщаяСуммаЗаявки;
		
		Если МассивСтавокНДС.Количество() > 1 Тогда //если разная ставка НДС, то суммируем
			Объект.СуммаНДС = Объект.ТабличнаяЧасть.Итог("СуммаНДС");
		Иначе
			СуммаПриИзменении(Элемент);
		КонецЕсли;		
		
	КонецЕсли;
	
	СформироватьНазначениеПлатежа(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗакрытьФорму" Тогда
		//ЭтаФорма.Записать();
		ЭтаФорма.Закрыть();
	ИначеЕсли ИмяСобытия = "УстановитьДоступность" Тогда
		Объект.ТекущийБизнесПроцесс = Параметр.ТекущийБизнесПроцесс;
		Записать();
	ИначеЕсли ИмяСобытия = "ЗакрытьФормуДокументаВладельца" Тогда
		Закрыть();
	ИначеЕсли ИмяСобытия = "ПрикрепленныеФайлы" Тогда	
		сабОбщегоНазначенияКлиент.ОбновитьКоличествоПрикрепленныхФайлов(ЭтаФорма);
	ИначеЕсли ИмяСобытия = "РазрешитьРедактированиеФормы" Тогда
		Прочитать();
		ПриСозданииНаСервере(Ложь, Истина);
		ПриОткрытии(Ложь);
	ИначеЕсли ИмяСобытия = "ПередатьНалогиВФорму" Тогда
		Если НЕ Параметр = Неопределено И Параметр.УИДФормы = ЭтаФорма.УникальныйИдентификатор Тогда
			ЗаполнитьЗначенияСвойств(Объект, Параметр);
			ЗаполнитьРеквизитыНалогов();
			Модифицированность = Истина;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ПроверкаСчетаВыполнена" Тогда //убираем двойную проверку счета //д1 24.05.16
		ПроверкаСчетаВыполнена = Истина;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = Ложь;
	//ТекПП1 = Объект.Предприятие;

	//ТекПпМассив = Новый Массив;
	//ТекПпМассив.Добавить(ТекПП1);
	//
	//
	//ТекФорма = ПолучитьФорму("Справочник.Кассы.Форма.ФормаВыбораПредприятия", Новый Структура("Предприятия, ТипИсточника, ТекущаяСтрока", ТекПпМассив, ?(Объект.ТипИсточника = ПредопределенноеЗначение("Перечисление.Д_ИсточникиСредств.Нал"), ВернутьНалТипИсточника2(), ВернутьБНалТипИсточника2()), Объект.Источник) , Элемент); 
	//ТекФорма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеПлатежаУчетПриИзменении(Элемент)
	НазначениеПлатежа = Объект.НазначениеПлатежаУчет;
	СформироватьНазначениеПлатежа(Ложь); 
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьПредприятиеПриИзменении(Элемент)
	
	Если НЕ Элементы.ТабличнаяЧасть.ТекущиеДанные = Неопределено Тогда
		Элементы.ТабличнаяЧасть.ТекущиеДанные.Подразделение = БюджетныйНаСервере.ВернутьРеквизит(Элементы.ТабличнаяЧасть.ТекущиеДанные.Предприятие, "ВидДеятельности");
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ЗаполнитьГрафикПоБюджету(Не Элемент = Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСрокамОплаты(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнен получатель!";
		Сообщение.Поле = "Контрагент";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Договор) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнен договор!";
		Сообщение.Поле = "Договор";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;	
	
	Если Объект.ТабличнаяЧасть.Количество() > 0 Тогда
		Ответ = Вопрос("Табличная часть будет очищена, продолжить?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Объект.ТабличнаяЧасть.Очистить();
			ЗаполнитьПоСрокамОплатыНаСервере();		
		КонецЕсли;	
	Иначе	
		ЗаполнитьПоСрокамОплатыНаСервере();		
	КонецЕсли;
	СформироватьНазначениеПлатежа(Истина);
		
КонецПроцедуры

Процедура ЗаполнитьПоСрокамОплатыНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КалендарныеГрафики.ДатаГрафика КАК ДатаГрафика
	|ПОМЕСТИТЬ ВТ_РабочиеДни
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|ГДЕ
	|	КалендарныеГрафики.Календарь = &Календарь
	|	И КалендарныеГрафики.ДеньВключенВГрафик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Д_ЗаявкаНаФинансированиеТабличнаяЧасть.Документ КАК Документ,
	|	СУММА(Д_ЗаявкаНаФинансированиеТабличнаяЧасть.УтвержденнаяСумма) КАК Сумма,
	|	ВЫБОР
	|		КОГДА Д_ЗаявкаНаФинансированиеТабличнаяЧасть.УтвержденнаяСумма >= Д_ЗаявкаНаФинансированиеТабличнаяЧасть.Сумма
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПризнакИсключения
	|ПОМЕСТИТЬ ВТ_ИспользуемыеДокументыПоступления
	|ИЗ
	|	Документ.Д_ЗаявкаНаФинансирование.ТабличнаяЧасть КАК Д_ЗаявкаНаФинансированиеТабличнаяЧасть
	|ГДЕ
	|	НЕ Д_ЗаявкаНаФинансированиеТабличнаяЧасть.Ссылка.ПометкаУдаления
	|	И НЕ Д_ЗаявкаНаФинансированиеТабличнаяЧасть.Документ = ЗНАЧЕНИЕ(Документ.УЧ_ПоступлениеТоваров.ПустаяСсылка)
	|	И Д_ЗаявкаНаФинансированиеТабличнаяЧасть.Ссылка <> &Ссылка
	|	И Д_ЗаявкаНаФинансированиеТабличнаяЧасть.Ссылка.Контрагент = &Контрагент
	|	И Д_ЗаявкаНаФинансированиеТабличнаяЧасть.Ссылка.Договор = &Договор
	|
	|СГРУППИРОВАТЬ ПО
	|	Д_ЗаявкаНаФинансированиеТабличнаяЧасть.Документ,
	|	ВЫБОР
	|		КОГДА Д_ЗаявкаНаФинансированиеТабличнаяЧасть.УтвержденнаяСумма >= Д_ЗаявкаНаФинансированиеТабличнаяЧасть.Сумма
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА УчетныйОстатки.Субконто3 = НЕОПРЕДЕЛЕНО
	|			ТОГДА УЧ_ДатаВводаОстатков.Значение
	|		ИНАЧЕ УчетныйОстатки.Субконто3.Дата
	|	КОНЕЦ КАК Дата,
	|	ВЫБОР
	|		КОГДА УчетныйОстатки.Субконто3 = НЕОПРЕДЕЛЕНО
	|			ТОГДА ""Без документа""
	|		ИНАЧЕ УчетныйОстатки.Субконто3
	|	КОНЕЦ КАК Ссылка,
	|	УчетныйОстатки.СуммаОстатокКт КАК Сумма,
	|	УчетныйОстатки.Субконто2.Отсрочка КАК Отсрочка,
	|	УчетныйОстатки.Субконто2.ВидОтсрочки КАК ВидОтсрочки,
	|	УчетныйОстатки.Предприятия КАК Предприятие,
	|	ВЫБОР
	|		КОГДА УчетныйОстатки.Субконто3 = НЕОПРЕДЕЛЕНО
	|			ТОГДА УчетныйОстатки.Предприятия.ВидДеятельности
	|		ИНАЧЕ УчетныйОстатки.Субконто3.Подразделение
	|	КОНЕЦ КАК Подразделение,
	|	ВТ_ИспользуемыеДокументыПоступления.Сумма КАК СуммаВЗаявке
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	РегистрБухгалтерии.Учетный.Остатки(
	|			&Дата,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ПоставщикиОсн),
	|			,
	|			Предприятия = &Предприятие
	|				И (ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты)) = &Контрагент
	|				И (ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов)) = &Договор
	|				И ВЫБОР
	|					КОГДА Субконто3.Подразделение ЕСТЬ NULL
	|							ИЛИ Субконто3.Подразделение = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Субконто3.Подразделение В ИЕРАРХИИ (&Подразделение)
	|				КОНЕЦ) КАК УчетныйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИспользуемыеДокументыПоступления КАК ВТ_ИспользуемыеДокументыПоступления
	|		ПО УчетныйОстатки.Субконто3 = ВТ_ИспользуемыеДокументыПоступления.Документ
	|			И (НЕ ВТ_ИспользуемыеДокументыПоступления.ПризнакИсключения),
	|	Константа.УЧ_ДатаВводаОстатков КАК УЧ_ДатаВводаОстатков
	|ГДЕ
	|	НЕ УчетныйОстатки.Субконто3 В
	|				(ВЫБРАТЬ
	|					ВТ_ИспользуемыеДокументыПоступления.Документ
	|				ИЗ
	|					ВТ_ИспользуемыеДокументыПоступления КАК ВТ_ИспользуемыеДокументыПоступления
	|				ГДЕ
	|					ВТ_ИспользуемыеДокументыПоступления.ПризнакИсключения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Данные.Ссылка КАК Ссылка,
	|	СУММА(ВЫБОР
	|			КОГДА УЧ_ПоступлениеТоваровТабличнаяЧасть.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.НДС10)
	|				ТОГДА УЧ_ПоступлениеТоваровТабличнаяЧасть.СуммаНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНДС10,
	|	СУММА(ВЫБОР
	|			КОГДА УЧ_ПоступлениеТоваровТабличнаяЧасть.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.НДС18)
	|				ТОГДА УЧ_ПоступлениеТоваровТабличнаяЧасть.СуммаНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНДС18,
	|	СУММА(ВЫБОР
	|			КОГДА УЧ_ПоступлениеТоваровТабличнаяЧасть.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.НДС10)
	|				ТОГДА УЧ_ПоступлениеТоваровТабличнаяЧасть.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Сумма10,
	|	СУММА(ВЫБОР
	|			КОГДА УЧ_ПоступлениеТоваровТабличнаяЧасть.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.НДС18)
	|				ТОГДА УЧ_ПоступлениеТоваровТабличнаяЧасть.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Сумма18,
	|	СУММА(ВЫБОР
	|			КОГДА УЧ_ПоступлениеТоваровТабличнаяЧасть.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.НДС20)
	|				ТОГДА УЧ_ПоступлениеТоваровТабличнаяЧасть.СуммаНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНДС20,
	|	СУММА(ВЫБОР
	|			КОГДА УЧ_ПоступлениеТоваровТабличнаяЧасть.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.НДС20)
	|				ТОГДА УЧ_ПоступлениеТоваровТабличнаяЧасть.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Сумма20
	|ПОМЕСТИТЬ ВТ_ДанныеСНДС
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_ПоступлениеТоваров.ТабличнаяЧасть КАК УЧ_ПоступлениеТоваровТабличнаяЧасть
	|		ПО ВТ_Данные.Ссылка = УЧ_ПоступлениеТоваровТабличнаяЧасть.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Данные.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Данные.Ссылка КАК Ссылка,
	|	КОЛИЧЕСТВО(ВТ_РабочиеДни.ДатаГрафика) КАК КоличествоДней
	|ПОМЕСТИТЬ ВТ_ДнейПройдено
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РабочиеДни КАК ВТ_РабочиеДни
	|		ПО (ВТ_РабочиеДни.ДатаГрафика > НАЧАЛОПЕРИОДА(ВТ_Данные.Дата, ДЕНЬ))
	|			И (ВТ_РабочиеДни.ДатаГрафика < &Дата)
	|			И (ВТ_Данные.ВидОтсрочки = ЗНАЧЕНИЕ(Перечисление.ВидОтсрочкиОплаты.БанковскиеДни))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Данные.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Данные.Ссылка,
	|	РАЗНОСТЬДАТ(ВТ_Данные.Дата, &Дата, ДЕНЬ)
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|ГДЕ
	|	ВТ_Данные.ВидОтсрочки = ЗНАЧЕНИЕ(Перечисление.ВидОтсрочкиОплаты.КалендарныеДни)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Данные.Ссылка КАК Документ,
	|	ВТ_Данные.Сумма КАК Сумма,
	|	ВТ_Данные.Предприятие КАК Предприятие,
	|	ВТ_Данные.Подразделение КАК Подразделение,
	|	ЕСТЬNULL(ВТ_Данные.СуммаВЗаявке, 0) КАК СуммаВЗаявке,
	|	ВТ_ДанныеСНДС.СуммаНДС10 КАК СуммаНДС10,
	|	ВТ_ДанныеСНДС.СуммаНДС18 КАК СуммаНДС18,
	|	ВТ_ДанныеСНДС.Сумма10 КАК Сумма10,
	|	ВТ_ДанныеСНДС.Сумма18 КАК Сумма18,
	|	ВТ_ДанныеСНДС.СуммаНДС20 КАК СуммаНДС20,
	|	ВТ_ДанныеСНДС.Сумма20 КАК Сумма20
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДнейПройдено КАК ВТ_ДнейПройдено
	|		ПО ВТ_Данные.Ссылка = ВТ_ДнейПройдено.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеСНДС КАК ВТ_ДанныеСНДС
	|		ПО ВТ_Данные.Ссылка = ВТ_ДанныеСНДС.Ссылка
	|ГДЕ
	|	ВТ_ДнейПройдено.КоличествоДней >= ВТ_Данные.Отсрочка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Предприятие", Объект.Предприятие);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("Договор", Объект.Договор);
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("Календарь", Справочники.Календари.НайтиПоНаименованию("Российская Федерация", Истина));
	Запрос.УстановитьПараметр("СтавкаНДС", Объект.СтавкаНДС);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Объект.СтавкаНДС = "";
	Объект.СуммаНДС = 0;
	
	Пока Выборка.Следующий() Цикл
		СтрокаТЧ = Объект.ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, Выборка);
		Если ЗначениеЗаполнено(Объект.СтатьяДДС) Тогда
			СтрокаТЧ.СтатьяДДС = Объект.СтатьяДДС;
		КонецЕсли;
		Если НЕ Выборка.СуммаВЗаявке = 0 Тогда
			СтрокаТЧ.Сумма = Мин(Выборка.Сумма, Выборка.Сумма - Выборка.СуммаВЗаявке);
		КонецЕсли;	
		СтрокаТЧ.УтвержденнаяСумма = СтрокаТЧ.Сумма;
		
		Если ЗначениеЗаполнено(Выборка.СуммаНДС10) Тогда
			Если НЕ ЗначениеЗаполнено(Выборка.СуммаНДС18) И НЕ ЗначениеЗаполнено(Выборка.СуммаНДС20) Тогда
				СтрокаТЧ.СтавкаНДС = Справочники.СтавкиНДС.НДС10;
				СтрокаТЧ.СуммаНДС = СтрокаТЧ.Сумма / (1 + СтрокаТЧ.СтавкаНДС.Ставка/100) * (СтрокаТЧ.СтавкаНДС.Ставка/100);			
			Иначе
				СтрокаТЧ.СтавкаНДС = Справочники.СтавкиНДС.Произвольная;	
				СтрокаТЧ.СуммаНДС = Выборка.СуммаНДС10 + Выборка.СуммаНДС18;			
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Выборка.СуммаНДС18) И НЕ ЗначениеЗаполнено(Выборка.СуммаНДС20) Тогда
			СтрокаТЧ.СтавкаНДС = Справочники.СтавкиНДС.НДС18;
			Если ЗначениеЗаполнено(СтрокаТЧ.СтавкаНДС) Тогда
				СтрокаТЧ.СуммаНДС = СтрокаТЧ.Сумма / (1 + СтрокаТЧ.СтавкаНДС.Ставка/100) * (СтрокаТЧ.СтавкаНДС.Ставка/100);			
			КонецЕсли; 
		ИначеЕсли ЗначениеЗаполнено(Выборка.СуммаНДС20) И НЕ ЗначениеЗаполнено(Выборка.СуммаНДС18) Тогда
			СтрокаТЧ.СтавкаНДС = Справочники.СтавкиНДС.НДС20;
			Если ЗначениеЗаполнено(СтрокаТЧ.СтавкаНДС) Тогда
				СтрокаТЧ.СуммаНДС = СтрокаТЧ.Сумма / (1 + СтрокаТЧ.СтавкаНДС.Ставка/100) * (СтрокаТЧ.СтавкаНДС.Ставка/100);			
			КонецЕсли; 			
		КонецЕсли; 
		Если НЕ ЗначениеЗаполнено(Объект.СтавкаНДС) Тогда
			Объект.СтавкаНДС = СтрокаТЧ.СтавкаНДС;
		ИначеЕсли ЗначениеЗаполнено(Объект.СтавкаНДС) и НЕ Объект.СтавкаНДС = СтрокаТЧ.СтавкаНДС Тогда 	
			Объект.СтавкаНДС = Справочники.СтавкиНДС.Произвольная;	
		КонецЕсли; 
		Объект.СуммаНДС = Объект.СуммаНДС + СтрокаТЧ.СуммаНДС;
	КонецЦикла;	
	
	Объект.Сумма = Объект.ТабличнаяЧасть.Итог("Сумма");
	
КонецПроцедуры	

&НаКлиенте
Процедура ТабличнаяЧастьСуммаПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		ТекДанные.УтвержденнаяСумма = ТекДанные.Сумма;
	КонецЕсли;	
	
	ВалютнаяСуммаКонтрагентаПриИзмененииНаСервере(Истина, Элемент.Имя, ТекДанные.НомерСтроки);
	
	РассчитатьСумму();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаНДСПриИзменении(Элемент)
	СформироватьНазначениеПлатежа(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Если Не Копирование Тогда
			Элементы.ТабличнаяЧасть.ТекущиеДанные.Предприятие = Объект.ЦФО;	
			Элементы.ТабличнаяЧасть.ТекущиеДанные.СтатьяДДС = Объект.СтатьяДДС;
		КонецЕсли;
		Элементы.ТабличнаяЧасть.ТекущиеДанные.УИДСтроки = Новый УникальныйИдентификатор;
		ТекущийУИДСтроки = Элементы.ТабличнаяЧасть.ТекущиеДанные.УИДСтроки;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьПослеУдаления(Элемент)
	Объект.Сумма = Объект.ТабличнаяЧасть.Итог("Сумма");
	СформироватьНазначениеПлатежа(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьСтавкаНДСПриИзменении(Элемент)
	РассчитатьСумму();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСумму(ПересчитыватьНДС = Истина)
	
	ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		//ТекДанные.Сумма = ТекДанные.Количество * ТекДанные.Цена;
		
		//лишний запрос делаем
		ТекРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.СтавкаНДС, "Ставка");
		Если НЕ ТекРеквизиты = Неопределено Тогда
			Если ТекДанные.СтавкаНДС = сабОбщегоНазначения.ПолучитьЭлементНДС("10%") Тогда
				Если ПересчитыватьНДС Тогда
					ТекДанные.СуммаНДС = ТекДанные.Сумма / ((100+ТекРеквизиты.Ставка)/100) * (ТекРеквизиты.Ставка/100);
				КонецЕсли;
				ТекДанные.СуммаНДС10 = ТекДанные.СуммаНДС;
				ТекДанные.СуммаНДС18 = 0;
				ТекДанные.СуммаНДС20 = 0;
			ИначеЕсли ТекДанные.СтавкаНДС = сабОбщегоНазначения.ПолучитьЭлементНДС("18%(до 2019)") Тогда
				Если ПересчитыватьНДС Тогда
					ТекДанные.СуммаНДС = ТекДанные.Сумма / ((100+ТекРеквизиты.Ставка)/100) * (ТекРеквизиты.Ставка/100);
				КонецЕсли;
				ТекДанные.СуммаНДС18 = ТекДанные.СуммаНДС;
				ТекДанные.СуммаНДС10 = 0;
				ТекДанные.СуммаНДС20 = 0;
			ИначеЕсли ТекДанные.СтавкаНДС = сабОбщегоНазначения.ПолучитьЭлементНДС("20%") Тогда
				Если ПересчитыватьНДС Тогда				
					ТекДанные.СуммаНДС = ТекДанные.Сумма / ((100+ТекРеквизиты.Ставка)/100) * (ТекРеквизиты.Ставка/100);
				КонецЕсли;
				ТекДанные.СуммаНДС20 = ТекДанные.СуммаНДС;
				ТекДанные.СуммаНДС18 = 0;
				ТекДанные.СуммаНДС10 = 0;
			Иначе
				ТекДанные.СуммаНДС = 0;
				ТекДанные.СуммаНДС18 = 0;
				ТекДанные.СуммаНДС10 = 0;
				ТекДанные.СуммаНДС20 = 0;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеПлатежаБухПриИзменении(Элемент)
	СформироватьНазначениеДляУчета();
КонецПроцедуры

&НаСервере
Процедура СформироватьНазначениеДляУчета()
	
	Если НазначениеПлатежаДо = Объект.НазначениеПлатежаУчет Тогда
		ПозицияСуммы = Найти(Объект.НазначениеПлатежа, "Сумма ");
		Если ПозицияСуммы = 0
			И ЗначениеЗаполнено(Объект.НазначениеПлатежа) Тогда
			ТекстНазначение = Объект.НазначениеПлатежа;
		Иначе
			ТекстНазначение = Лев(Объект.НазначениеПлатежа, ПозицияСуммы - 1);
		КонецЕсли;
		Если Прав(ТекстНазначение, 1) = Символы.ПС Тогда
			ТекстНазначение = Лев(ТекстНазначение, СтрДлина(ТекстНазначение) - 1);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекстНазначение) Тогда
			ТекстНазначение = НазначениеПлатежа;
		КонецЕсли;	
		Объект.НазначениеПлатежаУчет = ТекстНазначение;
		 НазначениеПлатежаДо = ТекстНазначение;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыНалоговНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтрукрутаПараментров = Новый Структура("КодБК, КодОКАТО, ПоказательОснования, СтатусСоставителя, ПоказательНомера, ПоказательДаты, ПоказательТипа, ПоказательПериода, Доступность, УИН, УИДФормы, Налог, ВидНалоговогоОбязательства",
	Объект.КодБК, Объект.КодОКАТО, Объект.ПоказательОснования, Объект.СтатусСоставителя, Объект.ПоказательНомера, Объект.ПоказательДаты, Объект.ПоказательТипа, Объект.ПоказательПериода, Элементы.Номер.ТолькоПросмотр, Объект.УИН, УникальныйИдентификатор,
		Объект.Налог, Объект.ВидНалоговогоОбязательства);
	СтруктураНалогов = ОткрытьФорму("Документ.Д_ЗаявкаНаОплату.Форма.ФормаНалогов", СтрукрутаПараментров);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыНалогов()
	
	РеквизитыНалогов = "Налог. рекв.:" + Объект.КодБК + "; " + Объект.КодОКАТО + "; " + Объект.ПоказательОснования + "; " + Объект.ПоказательПериода + "; " + Объект.СтатусСоставителя;
	

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицирован", Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка));
КонецПроцедуры

&НаКлиенте
Процедура СрокОплатыПриИзменении(Элемент)
	
	Объект.ДатаОплаты = СрокОплаты;
	ЗаполнитьГрафикПоБюджету(НЕ Элемент = Неопределено);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписьЮрЛицаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Параметр = Неопределено;
	ОткрытьФорму("Документ.Д_ЗаявкаНаФинансирование.Форма.ФормаРеквизитовОрганизации", Новый Структура("КПППлательщика, Организация, Подразделение, Доступность", Объект.КПППлательщика, Объект.Организация, Объект.Подразделение, 1 - Элементы.ФормаДокументД_ЗаявкаНаФинансированиеСогласовать.Доступность), ЭтаФорма,,,, Новый ОписаниеОповещения("ВыполнитьПослеВводаКПП", ЭтотОбъект, Параметр), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеВводаКПП(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Объект, Результат);
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении(Объект.Организация);
	СформироватьПодписьЮрЛица(СтруктураДанные);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("сабОбноватьПлатежныйКалендарь");
	Оповестить("ОбновитьСписокЗадач");
	Оповестить("ОбновитьПечатнуюФорму");
	ЗаполнитьГрафикПоБюджету(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПодписьКонтрагентаНажатие(Элемент, СтандартнаяОбработка)
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога") Тогда
		СтандартнаяОбработка = Ложь;
		СтрукрутаПараментров = Новый Структура("КодБК, КодОКАТО, ПоказательОснования, СтатусСоставителя, ПоказательНомера, ПоказательДаты, ПоказательТипа, ПоказательПериода, Доступность, УИН, УИДФормы, Налог, ВидНалоговогоОбязательства",
		Объект.КодБК, Объект.КодОКАТО, Объект.ПоказательОснования, Объект.СтатусСоставителя, Объект.ПоказательНомера, Объект.ПоказательДаты, Объект.ПоказательТипа, Объект.ПоказательПериода, 1 - Элементы.ФормаДокументД_ЗаявкаНаФинансированиеСогласовать.Доступность, Объект.УИН, УникальныйИдентификатор,
			Объект.Налог, Объект.ВидНалоговогоОбязательства);
		СтруктураНалогов = ОткрытьФорму("Документ.Д_ЗаявкаНаОплату.Форма.ФормаНалогов", СтрукрутаПараментров);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсточникПриИзменении(Элемент)
	ПроверкаПринадлежностиСчетаНаСервере(НЕ Элемент = Неопределено, Объект.Источник, "Источник");
КонецПроцедуры

&НаКлиенте
Процедура ВалютнаяСуммаПриИзменении(Элемент)
	
	ВалютнаяСуммаКонтрагентаПриИзмененииНаСервере(Не Элемент = Неопределено, ?(Элемент = Неопределено, "", Элемент.Имя));
	
	СтавкаНДС = сабОбщегоНазначения.ПолучитьСтавкуНДС(Объект.СтавкаНДС);
	Объект.СуммаНДС = Объект.ВалютнаяСумма - (Объект.ВалютнаяСумма) / ((СтавкаНДС + 100) / 100);
	Элементы.СуммаНДС.Доступность = НЕ Объект.СтавкаНДС = сабОбщегоНазначения.ПолучитьЭлементНДС("Без НДС");
	СформироватьНазначениеПлатежа(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦФОПриИзменении(Элемент)
	
	ПредприятиеПриИзмененииНаСервере(Не Элемент = Неопределено);
	ВалютнаяСуммаКонтрагентаПриИзмененииНаСервере(Не Элемент = Неопределено, ?(Элемент = Неопределено, "", Элемент.Имя));

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПодстветкуСчетов(ТекДанныеСтруктураОрганизации = Неопределено, ТекДанныеСтруктураКонтрагента = Неопределено)
	
	Если ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		
		Если ТекДанныеСтруктураОрганизации = Неопределено Тогда
			ТекДанныеСтруктураОрганизации = БюджетныйНаСервере.ВернутьРеквизиты(Объект.БанковскийСчет, "Наименование, саб_Закрыт, Банк, Банк.сабСтатусБанка, Ответственный");
			ТекДанныеСтруктураОрганизации.Вставить("СтатусСчета", ТекДанныеСтруктураОрганизации.саб_Закрыт);
			ТекДанныеСтруктураОрганизации.Вставить("СтатусБанка", ТекДанныеСтруктураОрганизации.БанксабСтатусБанка);
		КонецЕсли;
		
		Элементы.БанковскийСчет.ЦветФона = Новый Цвет(255, 255, 255);
		
		Если ТекДанныеСтруктураОрганизации.саб_Закрыт = ПредопределенноеЗначение("Перечисление.сабСтатусыБанковскихСчетов.ПодИнкассовым") ИЛИ ТекДанныеСтруктураОрганизации.БанксабСтатусБанка = ПредопределенноеЗначение("Перечисление.сабСтатусыБанков.НаСтадииЗакрытия") ИЛИ 
			ТекДанныеСтруктураОрганизации.саб_Закрыт = ПредопределенноеЗначение("Перечисление.сабСтатусыБанковскихСчетов.ПрочаяБлокировка") ИЛИ ТекДанныеСтруктураОрганизации.БанксабСтатусБанка = ПредопределенноеЗначение("Перечисление.сабСтатусыБанков.ПрочааНеблагонадежность") Тогда
			Элементы.БанковскийСчет.ЦветФона = Новый Цвет(255, 255, 0);
		КонецЕсли;
		
		Если ТекДанныеСтруктураОрганизации.саб_Закрыт = ПредопределенноеЗначение("Перечисление.сабСтатусыБанковскихСчетов.Закрыт") ИЛИ ТекДанныеСтруктураОрганизации.БанксабСтатусБанка = ПредопределенноеЗначение("Перечисление.сабСтатусыБанков.Закрыт") Тогда
			Элементы.БанковскийСчет.ЦветФона = Новый Цвет(255, 102, 0);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.БанковскийСчет) И Не ЗначениеЗаполнено(ТекДанныеСтруктураОрганизации.Ответственный) Тогда
			Элементы.БанковскийСчет.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
			Элементы.БанковскийСчет.Подсказка = "Банковскому счету не назначен ответственный.";
		Иначе
			Элементы.БанковскийСчет.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
			Элементы.БанковскийСчет.Подсказка = "";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
		
		Если ТекДанныеСтруктураКонтрагента = Неопределено Тогда
			ТекДанныеСтруктураКонтрагента = БюджетныйНаСервере.ВернутьРеквизиты(Объект.СчетКонтрагента, "Наименование, саб_Закрыт, Банк, Банк.сабСтатусБанка");
			ТекДанныеСтруктураКонтрагента.Вставить("СтатусСчета", ТекДанныеСтруктураКонтрагента.саб_Закрыт);
			ТекДанныеСтруктураКонтрагента.Вставить("СтатусБанка", ТекДанныеСтруктураКонтрагента.БанксабСтатусБанка);
		КонецЕсли;
		
		Элементы.СчетКонтрагента.ЦветФона = Новый Цвет(255, 255, 255);	
		
		Если ТекДанныеСтруктураКонтрагента.саб_Закрыт = ПредопределенноеЗначение("Перечисление.сабСтатусыБанковскихСчетов.ПодИнкассовым") ИЛИ ТекДанныеСтруктураКонтрагента.БанксабСтатусБанка = ПредопределенноеЗначение("Перечисление.сабСтатусыБанков.НаСтадииЗакрытия") ИЛИ 
			ТекДанныеСтруктураКонтрагента.саб_Закрыт = ПредопределенноеЗначение("Перечисление.сабСтатусыБанковскихСчетов.ПрочаяБлокировка") ИЛИ ТекДанныеСтруктураКонтрагента.БанксабСтатусБанка = ПредопределенноеЗначение("Перечисление.сабСтатусыБанков.ПрочааНеблагонадежность") Тогда
			Элементы.СчетКонтрагента.ЦветФона = Новый Цвет(255, 255, 0);
		КонецЕсли;
		
		Если ТекДанныеСтруктураКонтрагента.саб_Закрыт = ПредопределенноеЗначение("Перечисление.сабСтатусыБанковскихСчетов.Закрыт") ИЛИ ТекДанныеСтруктураКонтрагента.БанксабСтатусБанка = ПредопределенноеЗначение("Перечисление.сабСтатусыБанков.Закрыт") Тогда
			Элементы.СчетКонтрагента.ЦветФона = Новый Цвет(255, 102, 0);
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПодразаделениеПриИзменении(Элемент)
	Если НЕ Элемент = Неопределено И ЗначениеЗаполнено(Объект.Подразделение) И НЕ ЗначениеЗаполнено(Объект.Организация) И Объект.ТипИсточника = ПредопределенноеЗначение("Перечисление.Д_ИсточникиСредств.БезНал") Тогда
		ПодразделениеПриИзмененииСервер();
		ЗаявкаОрганизацияПриИзменении(Элемент);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПодразделениеПриИзмененииСервер()
	
	//Если ЗначениеЗаполнено(Объект.Подразделение) И НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		РеквизитыПодразделения = БюджетныйНаСервере.ВернутьРеквизиты(Объект.Подразделение, "Склад, Организация");
		//Объект.Склад = РеквизитыПодразделения.Склад;
		Объект.Организация = РеквизитыПодразделения.Организация;
	//КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьСуммаНДСПриИзменении(Элемент)
	РассчитатьСумму(Ложь);	
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоСтрокаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.ТипИсточника = ПредопределенноеЗначение("Перечисление.Д_ИсточникиСредств.БезНал") Тогда
		ТекФорма = ПолучитьФорму("Документ.ПлатежноеПоручение.ФормаСписка", Новый Структура("ОтключитьОжиданиеПриОткрытииФорм", Истина));
		ТекФорма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		НовыйОтбор = ТекФорма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Заявка");
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		НовыйОтбор.ПравоеЗначение = Объект.Ссылка;
		ТекФорма.Открыть();
	Иначе
		ТекФорма = ПолучитьФорму("Документ.УЧ_ДвижениеДС.ФормаСписка", Новый Структура("ОтключитьОжиданиеПриОткрытииФорм", Истина));
		ТекФорма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		НовыйОтбор = ТекФорма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДокОснование");
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		НовыйОтбор.ПравоеЗначение = Объект.Ссылка;
		ТекФорма.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяПриИзменении(Элемент)
	
	ЗаполнитьГрафикПоБюджету(НЕ Элемент = Неопределено);
	СтатьяДДСОбъекта = Объект.СтатьяДДС;
	
	Для Каждого ТекСтрокаРасш Из Объект.ТабличнаяЧасть Цикл
		ТекСтрокаРасш.СтатьяДДС = СтатьяДДСОбъекта;
	КонецЦикла;
	
	//Элементы.КодВидаДохода.Видимость = Ложь;
	УстановитьКодВыплатПоСтатье(НЕ Элемент = Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКодВыплатПоСтатье(Изменять)
	Если НЕ сабОбщегоНазначения.СтатьиЗарплатыУП(Объект.Предприятие).Найти(Объект.СтатьяДДС) = Неопределено Тогда
		Элементы.КодВидаДохода.Видимость = Истина;	
		Если Изменять Тогда
			Объект.КодВидаДохода = "1";		
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаВыбораСОрганизациями", Новый Структура("РежимВыбора, ТекущаяСтрока", Истина, Объект.Контрагент) ,Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СчетКонтрагентаПриИзменении(Элемент)
	
	СчетКонтрагентаПриИзмененииНаСервере(Не Элемент = Неопределено);
	ВалютнаяСуммаКонтрагентаПриИзмененииНаСервере(Не Элемент = Неопределено, ?(Элемент = Неопределено, "", Элемент.Имя));
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаСервере
Процедура СчетКонтрагентаПриИзмененииНаСервере(Изменять)
	
	Элементы.ВалютнаяСуммаКонтрагента.Видимость = Ложь;
	Элементы.ВалютаКонтрагента.Видимость = Ложь;
	Если Изменять И ЗначениеЗаполнено(Объект.Валюта) И ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
		Объект.ВалютаКонтрагента = Объект.СчетКонтрагента.ВалютаДенежныхСредств;
		Если ЗначениеЗаполнено(Объект.Договор) И Объект.ВалютаКонтрагента = УЧ_Сервер.НациональнаяВалюта() Тогда
			Объект.ВалютаКонтрагента = Объект.Договор.ВалютаВзаиморасчетов;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВалютаКонтрагента) И НЕ Объект.Валюта = Объект.ВалютаКонтрагента И Не Объект.ВалютаКонтрагента = УЧ_Сервер.НациональнаяВалюта() Тогда
		Элементы.ВалютнаяСуммаКонтрагента.Видимость = Истина;
		Элементы.КурсКонтрагента.Видимость = Истина;
		Элементы.ВалютаКонтрагента.Видимость = Истина;
	КонецЕсли;
	
	//Если Изменять И НЕ Элементы.ВалютнаяСуммаКонтрагента.Видимость Тогда
	//	Объект.ВалютнаяСуммаКонтрагента = Объект.ВалютнаяСумма;
	//КонецЕсли;
	
	Элементы.ВалютнаяСумма.Доступность = НЕ Объект.РасшифровкаПлатежа И НЕ Элементы.ВалютнаяСуммаКонтрагента.Видимость;
	Элементы.Сумма.Доступность = НЕ Объект.РасшифровкаПлатежа И НЕ Элементы.ВалютнаяСуммаКонтрагента.Видимость;
		
КонецПроцедуры

&НаКлиенте
Процедура ВалютнаяСуммаКонтрагентаПриИзменении(Элемент)
	
	ВалютнаяСуммаКонтрагентаПриИзмененииНаСервере(Не Элемент = Неопределено, ?(Элемент = Неопределено, "", Элемент.Имя));
	
КонецПроцедуры

&НаСервере
Процедура ВалютнаяСуммаКонтрагентаПриИзмененииНаСервере(Изменять, ИмяЭлемента, НомерСтрокиТЧ = Неопределено)
	
	Если Изменять Тогда
		АктуальныйСценарий = БюджетныйНаСервере.ПолучитьАктуальныйСценарий(Объект.Дата, Истина);
		
		Если ИмяЭлемента = "СчетКонтрагента" Или ИмяЭлемента = "СчетКонтрагента1" Или ИмяЭлемента = "ВалютнаяСуммаКонтрагента" Или ИмяЭлемента = "Договор" Тогда
			Если ЗначениеЗаполнено(Объект.ВалютаКонтрагента) И ЗначениеЗаполнено(АктуальныйСценарий) Тогда
				Курс_ВалКонтрагента_ВалИсточника = РасчетыБюджет.ПолучитьПлановыйКурс(АктуальныйСценарий, Объект.ВалютаКонтрагента, Объект.Валюта, ТекущаяДата()).Курс;
				Курс_ВалКонтрагента_ВалЦФО = РасчетыБюджет.ПолучитьПлановыйКурс(АктуальныйСценарий, Объект.ВалютаКонтрагента, ?(ЗначениеЗаполнено(ВалютаЦФО), ВалютаЦФО, УЧ_Сервер.НациональнаяВалюта()), ТекущаяДата()).Курс;
				Если Курс_ВалКонтрагента_ВалЦФО И Курс_ВалКонтрагента_ВалИсточника И НЕ Курс_ВалКонтрагента_ВалЦФО = 1 Тогда //есть бюджетный курс
					Объект.ВалютнаяСумма = Объект.ВалютнаяСуммаКонтрагента * Курс_ВалКонтрагента_ВалИсточника;
					Объект.Сумма = Объект.ВалютнаяСуммаКонтрагента * Курс_ВалКонтрагента_ВалЦФО;
				Иначе
					Объект.КурсКонтрагента = УЧ_Сервер.ПолучитьКурсВалют(Объект.ВалютаКонтрагента,,, Объект.Дата);
					Объект.Сумма = Объект.ВалютнаяСуммаКонтрагента * Объект.КурсКонтрагента;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ИмяЭлемента = "БанковскийСчет" Или ИмяЭлемента = "Источник" Или ИмяЭлемента = "ВалютнаяСумма" Тогда
			Если ЗначениеЗаполнено(АктуальныйСценарий) Тогда
				Курс_ВалИсточника_ВалЦФО = РасчетыБюджет.ПолучитьПлановыйКурс(АктуальныйСценарий, Объект.Валюта, ?(ЗначениеЗаполнено(ВалютаЦФО), ВалютаЦФО, УЧ_Сервер.НациональнаяВалюта()), ТекущаяДата()).Курс;
				Курс_ВалИсточника_ВалКонтрагента = РасчетыБюджет.ПолучитьПлановыйКурс(АктуальныйСценарий, Объект.Валюта, Объект.ВалютаКонтрагента, ТекущаяДата()).Курс;
				Если Курс_ВалИсточника_ВалЦФО И Курс_ВалИсточника_ВалКонтрагента И НЕ Курс_ВалИсточника_ВалЦФО = 1 Тогда //есть бюджетный курс
					Объект.Сумма = Объект.ВалютнаяСумма * Курс_ВалИсточника_ВалЦФО;
					Объект.ВалютнаяСуммаКонтрагента = Объект.ВалютнаяСумма * Курс_ВалИсточника_ВалКонтрагента;
				Иначе
					Объект.Курс = УЧ_Сервер.ПолучитьКурсВалют(Объект.Валюта,,, Объект.Дата);
					Объект.Сумма = Объект.ВалютнаяСумма * Объект.Курс;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ИмяЭлемента = "ТабличнаяЧастьВалютнаяСуммаКонтрагента" Тогда
			ТекДанныеТЧ = Объект.ТабличнаяЧасть[НомерСтрокиТЧ - 1];
			Курс_ВалКонтрагента_ВалИсточника = РасчетыБюджет.ПолучитьПлановыйКурс(АктуальныйСценарий, Объект.ВалютаКонтрагента, Объект.Валюта, ТекущаяДата()).Курс;
			Курс_ВалКонтрагента_ВалЦФО = РасчетыБюджет.ПолучитьПлановыйКурс(АктуальныйСценарий, Объект.ВалютаКонтрагента, ?(ЗначениеЗаполнено(ТекДанныеТЧ.Предприятие.ОсновнаяВалютаУчета), ТекДанныеТЧ.Предприятие.ОсновнаяВалютаУчета, УЧ_Сервер.НациональнаяВалюта()), ТекущаяДата()).Курс;
			ТекДанныеТЧ.ВалСумма = Объект.ВалютнаяСуммаКонтрагента * Курс_ВалКонтрагента_ВалИсточника;
			ТекДанныеТЧ.Сумма = Объект.ВалютнаяСуммаКонтрагента * Курс_ВалКонтрагента_ВалЦФО;
		ИначеЕсли ИмяЭлемента = "ТабличнаяЧастьВалСумма" Тогда
			ТекДанныеТЧ = Объект.ТабличнаяЧасть[НомерСтрокиТЧ - 1];
			Курс_ВалИсточника_ВалЦФО = РасчетыБюджет.ПолучитьПлановыйКурс(АктуальныйСценарий, Объект.Валюта, ?(ЗначениеЗаполнено(ТекДанныеТЧ.Предприятие.ОсновнаяВалютаУчета), ТекДанныеТЧ.Предприятие.ОсновнаяВалютаУчета, УЧ_Сервер.НациональнаяВалюта()), ТекущаяДата()).Курс;
			Курс_ВалИсточника_ВалКонтрагента = РасчетыБюджет.ПолучитьПлановыйКурс(АктуальныйСценарий, Объект.Валюта, Объект.ВалютаКонтрагента, ТекущаяДата()).Курс;
			ТекДанныеТЧ.Сумма = ТекДанныеТЧ.ВалСумма * Курс_ВалИсточника_ВалЦФО;
			ТекДанныеТЧ.ВалютнаяСуммаКонтрагента = ТекДанныеТЧ.ВалСумма * Курс_ВалИсточника_ВалКонтрагента;
		ИначеЕсли ИмяЭлемента = "ТабличнаяЧастьСумма" Тогда
			ТекДанныеТЧ = Объект.ТабличнаяЧасть[НомерСтрокиТЧ - 1];
			Курс_ВалЦФО_ВалИсточника = РасчетыБюджет.ПолучитьПлановыйКурс(АктуальныйСценарий, ?(ЗначениеЗаполнено(ТекДанныеТЧ.Предприятие.ОсновнаяВалютаУчета), ТекДанныеТЧ.Предприятие.ОсновнаяВалютаУчета, УЧ_Сервер.НациональнаяВалюта()), Объект.Валюта, ТекущаяДата()).Курс;
			Курс_ВалЦФО_ВалКонтрагента = РасчетыБюджет.ПолучитьПлановыйКурс(АктуальныйСценарий, ?(ЗначениеЗаполнено(ТекДанныеТЧ.Предприятие.ОсновнаяВалютаУчета), ТекДанныеТЧ.Предприятие.ОсновнаяВалютаУчета, УЧ_Сервер.НациональнаяВалюта()), Объект.ВалютаКонтрагента, ТекущаяДата()).Курс;
			ТекДанныеТЧ.ВалСумма = ТекДанныеТЧ.Сумма * Курс_ВалЦФО_ВалИсточника;
			ТекДанныеТЧ.ВалютнаяСуммаКонтрагента = ТекДанныеТЧ.Сумма * Курс_ВалЦФО_ВалКонтрагента;
		ИначеЕсли ИмяЭлемента = "Курс" Тогда
			Объект.Сумма = Объект.ВалютнаяСумма * Объект.Курс;
		ИначеЕсли ИмяЭлемента = "КурсКонтрагента" Тогда
			Объект.Сумма = Объект.ВалютнаяСуммаКонтрагента * Объект.КурсКонтрагента;
		Иначе
			Курс_ВалЦФО_ВалИсточника = РасчетыБюджет.ПолучитьПлановыйКурс(АктуальныйСценарий, ?(ЗначениеЗаполнено(ВалютаЦФО), ВалютаЦФО, УЧ_Сервер.НациональнаяВалюта()), Объект.Валюта, ТекущаяДата()).Курс;
			Курс_ВалЦФО_ВалКонтрагента = РасчетыБюджет.ПолучитьПлановыйКурс(АктуальныйСценарий, ?(ЗначениеЗаполнено(ВалютаЦФО), ВалютаЦФО, УЧ_Сервер.НациональнаяВалюта()), Объект.ВалютаКонтрагента, ТекущаяДата()).Курс;
			Если Курс_ВалЦФО_ВалИсточника И Курс_ВалЦФО_ВалКонтрагента И НЕ Курс_ВалЦФО_ВалИсточника = 1 Тогда //есть бюджетный курс
				Объект.ВалютнаяСумма = Объект.Сумма / Курс_ВалЦФО_ВалИсточника;
				Объект.ВалютнаяСуммаКонтрагента = Объект.Сумма / Курс_ВалЦФО_ВалКонтрагента;
			Иначе
				Объект.Курс = УЧ_Сервер.ПолучитьКурсВалют(Объект.Валюта,, Объект.Дата);
				Объект.ВалютнаяСумма = ?(Объект.Курс, Объект.ВалютнаяСумма / Объект.Курс, Объект.Сумма);
				Объект.ВалютнаяСуммаКонтрагента = Объект.ВалютнаяСумма;
			КонецЕсли;
		КонецЕсли;
			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СчетКонтрагента1ПриИзменении(Элемент)
	
	СчетКонтрагентаПриИзмененииНаСервере(Не Элемент = Неопределено);
	ВалютнаяСуммаКонтрагентаПриИзмененииНаСервере(Не Элемент = Неопределено, ?(Элемент = Неопределено, "", Элемент.Имя));
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	ТекПредприятие = Неопределено;
	ТекВалютаПредприятия = Неопределено; 
	ТекВалютаЦФО = Неопределено;
	ЕстьВал = Ложь;
	ЕстьВалКонтрагента = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Источник) Тогда
		ТекПредприятие = ПП_Сервер.ПолучитьПредприятие(?(Объект.Дата = '00010101', ТекущаяДата(), Объект.Дата), Объект.Источник);
		ТекВалютаПредприятия = ТекПредприятие.ОсновнаяВалютаУчета;;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ЦФО) Тогда
		ТекВалютаЦФО = ВалютаЦФО;
	Конецесли;
	
	Если ЗначениеЗаполнено(Объект.Предприятие.ОсновнаяВалютаУчета) И ЗначениеЗаполнено(Объект.Валюта) И НЕ Объект.Валюта = Объект.Предприятие.ОсновнаяВалютаУчета Тогда
		ЕстьВал = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Валюта) И ЗначениеЗаполнено(Объект.СчетКонтрагента) И ЗначениеЗаполнено(Объект.ВалютаКонтрагента) Тогда
		Если НЕ Объект.Валюта = Объект.ВалютаКонтрагента И Не Объект.ВалютаКонтрагента = УЧ_Сервер.НациональнаяВалюта() Тогда
			ЕстьВалКонтрагента = Истина;
		КонецЕсли;
	КонецЕсли;

	Для Каждого ТекСтрокаТЧ Из Объект.ТабличнаяЧасть Цикл

		ТекстрокаТЧ.ВалютнаяСуммаКонтрагентаДоступность = ЕстьВалКонтрагента;
		
		Если ЗначениеЗаполнено(ТекСтрокаТЧ.Предприятие.ОсновнаяВалютаУчета) И ЗначениеЗаполнено(Объект.Валюта) И НЕ (Объект.Валюта = ТекСтрокаТЧ.Предприятие.ОсновнаяВалютаУчета) Тогда
			ТекСтрокаТЧ.ВалСуммаДоступность = Истина;
			ЕстьВал = Истина;
		Иначе
			ТекСтрокаТЧ.ВалСуммаДоступность = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ВалютнаяСумма.Видимость = ЕстьВал;
	Элементы.Курс.Видимость = ЕстьВал;
	Элементы.ВалютнаяСуммаКонтрагента.Видимость = ЕстьВалКонтрагента И НЕ Объект.Валюта = Объект.ВалютаКонтрагента;
	Элементы.КурсКонтрагента.Видимость = Элементы.ВалютнаяСуммаКонтрагента.Видимость;
	Элементы.БанковскийСчетВалютаДенежныхСредств.Видимость = ЕстьВал;	
	
Конецпроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ЗаполнитьДобавленныеКолонкиТаблиц();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьДобавленныеКолонкиТаблиц();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтрокиГрафикаБюджетаИспользоватьПриИзменении(Элемент)
	Если Расшифровка И НЕ Элементы.ТабличнаяЧасть.ТекущиеДанные = Неопределено Тогда
		Если Элементы.СтрокиГрафикаБюджета.ТекущиеДанные.Использовать Тогда
			Элементы.СтрокиГрафикаБюджета.ТекущиеДанные.УИДСтрокиРасшифровки = Элементы.ТабличнаяЧасть.ТекущиеДанные.УИДСтроки;		
		Иначе
			Элементы.СтрокиГрафикаБюджета.ТекущиеДанные.УИДСтрокиРасшифровки = "";
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьПриАктивизацииСтроки(Элемент)
	Если Элементы.ТабличнаяЧасть.ТекущиеДанные = Неопределено Тогда
		ТекущийУИДСтроки = 0;
	Иначе
		ТекущийУИДСтроки = Элементы.ТабличнаяЧасть.ТекущиеДанные.УИДСтроки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьПередУдалением(Элемент, Отказ)
	
	СтрокиДляУдаления = Объект.СтрокиГрафикаБюджета.НайтиСтроки(Новый Структура("УИДСтрокиРасшифровки", Элементы.ТабличнаяЧасть.ТекущиеДанные.УИДСтроки));  
	
	Для каждого ТекСтрока Из СтрокиДляУдаления Цикл
		Объект.СтрокиГрафикаБюджета.Удалить(ТекСтрока);
	КонецЦикла;
	
	КоличествоСтрокГрафикаБюджета = Объект.СтрокиГрафикаБюджета.Количество();
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьВалСуммаПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	ВалютнаяСуммаКонтрагентаПриИзмененииНаСервере(Истина, Элемент.Имя, ТекДанные.НомерСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьВалютнаяСуммаКонтрагентаПриИзменении(Элемент)
	ВалютнаяСуммаКонтрагентаПриИзмененииНаСервере(Истина, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ИсточникПолучательПриИзменении(Элемент)
	ЗаполнитьДобавленныеКолонкиТаблиц();
КонецПроцедуры

&НаКлиенте
Процедура ИсточникПолучатель1ПриИзменении(Элемент)
	ЗаполнитьДобавленныеКолонкиТаблиц();
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьСтатьяДДСПриИзменении(Элемент)
	ЗаполнитьГрафикПоБюджету(Не Элемент = Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	Записать();
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	Элементы.СуммаНДС.Доступность = НЕ Объект.СтавкаНДС = сабОбщегоНазначения.ПолучитьЭлементНДС("Без НДС") И ЗначениеЗаполнено(Объект.СтавкаНДС);
	РеквизитСуммы = ?(Элементы.ВалютнаяСуммаКонтрагента.Видимость, Объект.ВалютнаяСуммаКонтрагента, ?(Элементы.ВалютнаяСумма.Видимость, Объект.ВалютнаяСумма, Объект.Сумма));

	Если Не Элемент = Неопределено Тогда
		СтавкаНДС = сабОбщегоНазначения.ПолучитьСтавкуНДС(Объект.СтавкаНДС);
		Объект.СуммаНДС = РеквизитСуммы - (РеквизитСуммы) / ((СтавкаНДС + 100) / 100);
	КонецЕсли;
	
	Если Не Элемент = Неопределено Тогда
		СформироватьНазначениеПлатежа(Истина);
	КонецЕсли;
	
КонецПроцедуры

