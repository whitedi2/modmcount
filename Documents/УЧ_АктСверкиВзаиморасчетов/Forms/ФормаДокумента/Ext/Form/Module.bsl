
/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Заполняет массив счетами, которые будут использоваться по умолчанию
//
// Параметры
//  Таблица	-	<ТаблицаЗначений> - реквизит формы "ТаблицаСчетовПоУмолчанию"
//

// Функция ПолучитьЗначенияРеквизитов возвращает структуру,
// содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИменаРеквизитов - Строка, имена реквизитов перечисленные через запятую,
//               в формате требований к свойствам структуры.
//               Например, "Код, Наименование, Родитель".
// 
// Возвращаемое значение:
//  Структура    - содержит список свойств, как список имен в строке
//                 ИменаРеквизитов, со значениям реквизитов, прочитанных
//                 из информационной базы.
// 
&НаСервереБезКонтекста
Функция ПолучитьЗначенияРеквизитов(Ссылка, ИменаРеквизитов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	" + ИменаРеквизитов + "
		|ИЗ
		|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Результат = Новый Структура(ИменаРеквизитов);
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции

// Функция ПолучитьЗначениеРеквизита возвращает значение
// реквизита, прочитанного из информационной базы по ссылке на объект.
// 
//  Если доступа к реквизиту нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита - Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка, ИмяРеквизита) Экспорт
	
	Результат = ПолучитьЗначенияРеквизитов(Ссылка, ИмяРеквизита);
	Возврат Результат[ИмяРеквизита];
	
КонецФункции 

&НаСервереБезКонтекста
Процедура ПроверитьПараметрыДоговора(Договор, ПараметрыДоговора)

	Если НЕ ПараметрыДоговора=Неопределено И ПараметрыДоговора.Ссылка=Договор Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Договор) Тогда
		ПараметрыДоговора = Новый Структура("Ссылка, ЭтоГруппа", Договор, Договор.ЭтоГруппа);
		Если НЕ ПараметрыДоговора.ЭтоГруппа Тогда
			ПараметрыДоговора.Вставить("ВалютаДоговора", ПараметрыДоговора.Ссылка.ВалютаВзаиморасчетов);
			ПараметрыДоговора.Вставить("ВидДоговора", ПараметрыДоговора.Ссылка.ВидДоговора);
		КонецЕсли; 
	Иначе 
		ПараметрыДоговора = Новый Структура("Ссылка, ЭтоГруппа", Договор, Ложь);
	КонецЕсли; 

	Если ЗначениеЗаполнено(Договор) И (НЕ ПараметрыДоговора.ЭтоГруппа) Тогда
		ПараметрыДоговора.Вставить("ДоступностьРазбивкиПоДоговорам", Ложь);
	Иначе
		ПараметрыДоговора.Вставить("ДоступностьРазбивкиПоДоговорам", Истина);
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПересчитатьОстатки()

	ОстатокНаКонец = Объект.ОстатокНаНачало + Объект.ПоДаннымОрганизации.Итог("Дебет") -  Объект.ПоДаннымОрганизации.Итог("Кредит");
	ОстатокНаНачалоКонтрагент = - Объект.ОстатокНаНачало;
	
	ОстатокНаКонецКонтрагент = ОстатокНаНачалоКонтрагент + Объект.ПоДаннымКонтрагента.Итог("Дебет") -  Объект.ПоДаннымКонтрагента.Итог("Кредит");
	
	Если Объект.Расхождение <> ОстатокНаКонец + ОстатокНаКонецКонтрагент Тогда
		Объект.Расхождение = ОстатокНаКонец + ОстатокНаКонецКонтрагент;
	КонецЕсли; 
	Расхождение = Объект.Расхождение;
	РасхождениеКонтрагент = - Расхождение;

КонецПроцедуры

&НаСервере
Процедура ПересчитатьОстаткиНаСервере()

	ОстатокНаКонец = Объект.ОстатокНаНачало + Объект.ПоДаннымОрганизации.Итог("Дебет") -  Объект.ПоДаннымОрганизации.Итог("Кредит");
	ОстатокНаНачалоКонтрагент = - Объект.ОстатокНаНачало;
	
	ОстатокНаКонецКонтрагент = ОстатокНаНачалоКонтрагент + Объект.ПоДаннымКонтрагента.Итог("Дебет") -  Объект.ПоДаннымКонтрагента.Итог("Кредит");
	
	Если Объект.Расхождение <> ОстатокНаКонец + ОстатокНаКонецКонтрагент Тогда
		Объект.Расхождение = ОстатокНаКонец + ОстатокНаКонецКонтрагент;
	КонецЕсли; 
	Расхождение = Объект.Расхождение;
	РасхождениеКонтрагент = - Расхождение;

КонецПроцедуры


&НаСервере
Процедура ПриИзмененииКонтрагентаСервер()

	
	ТекущийКонтрагент = Объект.Контрагент;
	ТекущийПредставительКонтрагента = "";
	
	// очищаем табличные части документа:
	Объект.ПоДаннымОрганизации.Очистить();
	Объект.ПоДаннымКонтрагента.Очистить();
	ПересчитатьОстаткиНаСервере();
	
	//Изменяем видимость/доступность реквизитов:
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры
 
&НаСервере
Процедура ПриИзмененииДоговораСервер()

	//Обновим текущее значение:
	ПроверитьПараметрыДоговора(Объект.ДоговорКонтрагента, ПараметрыДоговора);

	// очищаем табличные части документа:
	Объект.ПоДаннымОрганизации.Очистить();
	Объект.ПоДаннымКонтрагента.Очистить();
	ПересчитатьОстаткиНаСервере();

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) И НЕ Объект.ДоговорКонтрагента.ЭтоГруппа Тогда
		Объект.РазбитьПоДоговорам = Ложь;
	КонецЕсли;

	//Изменяем видимость/доступность реквизитов:
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПериода()

	Если НЕ ТекущийПериод.ДатаНачала=Объект.ДатаНачала ИЛИ НЕ ТекущийПериод.ДатаОкончания=Объект.ДатаОкончания Тогда
		
		Если Объект.ПоДаннымОрганизации.Количество()>0 Тогда
			
			ТекстВопроса = НСтр("ru='При изменении периода сверки табличная часть будет очищена. Изменить период?'");
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Заголовок);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
			
			Объект.ПоДаннымОрганизации.Очистить();
			ПересчитатьОстатки();
			
		КонецЕсли;
		
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРазбитьПоДоговорамСервер()

	Если Объект.РазбитьПоДоговорам Тогда
		Объект.ПоДаннымОрганизации.Сортировать("Договор, Дата, Документ, Представление");
	Иначе
		Объект.ПоДаннымОрганизации.Сортировать("Дата, Документ, Представление, Договор");
	КонецЕсли;

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеДокументаНаСервере()

	Возврат ПроверитьЗаполнение();

КонецФункции

// Заполнение таблицы "По данным организации" по информации из бухгалтерского учета
&НаСервере
Процедура ЗаполнитьПоДаннымБухгалтерскогоУчета()
	
	ФильтрСписокСчетов = Новый Массив();
	Для каждого СтрокаСчета Из Объект.СписокСчетов Цикл
		Если ЗначениеЗаполнено(СтрокаСчета.Счет) Тогда
			ФильтрСписокСчетов.Добавить(СтрокаСчета.Счет);
		КонецЕсли; 
	КонецЦикла; 
	
	Если ФильтрСписокСчетов.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru='Не задан список счетов, по которым производится сверка.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , "Объект.СписокСчетов");
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала",    ?(НЕ ЗначениеЗаполнено(Объект.ДатаНачала), Неопределено, 
		Новый Граница (Объект.ДатаНачала, ВидГраницы.Включая)));
	Запрос.УстановитьПараметр("ДатаОкончания", ?(НЕ ЗначениеЗаполнено(Объект.ДатаОкончания), Неопределено, 
		Новый Граница(КонецДня(Объект.ДатаОкончания), ВидГраницы.Включая)));
	Запрос.УстановитьПараметр("Предприятие",   Объект.Предприятие);
	Запрос.УстановитьПараметр("Контрагент",    Объект.Контрагент);
	//Запрос.УстановитьПараметр("Валюта",        ?(НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) 
		//ИЛИ (Объект.ВалютаДокумента = ВалютаРегламентированногоУчета), Неопределено, 
		//Объект.ВалютаДокумента));
	Запрос.УстановитьПараметр("Валюта", Неопределено); 
	Запрос.УстановитьПараметр("ФильтрСписокСчетов", ФильтрСписокСчетов);
	
	АналитикаРасчетов = Новый Массив();
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина));
	Если  ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Договоры", Истина));
	КонецЕсли;
	Запрос.УстановитьПараметр("АналитикаРасчетов",    АналитикаРасчетов);
	
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ?(НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента), Неопределено, 
	Объект.ДоговорКонтрагента));
	Запрос.УстановитьПараметр("Организация", ?(НЕ ЗначениеЗаполнено(Объект.Организация), Неопределено, 
	Объект.Организация));//Сож+ 23,11,18
		
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	УчетныйОбороты.Период КАК Дата,
	//|	УчетныйОбороты.Регистратор.Номер КАК Номер,
	//|	УчетныйОбороты.Регистратор КАК Документ,
	//|	УчетныйОбороты.Субконто2 КАК Договор,
	//|	ВЫБОР
	//|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	//|			ТОГДА УчетныйОбороты.СуммаОборотДт
	//|		ИНАЧЕ УчетныйОбороты.ВалютнаяСуммаОборотДт
	//|	КОНЕЦ КАК Дебет,
	//|	ВЫБОР
	//|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	//|			ТОГДА УчетныйОбороты.СуммаОборотКт
	//|		ИНАЧЕ УчетныйОбороты.ВалютнаяСуммаОборотКт
	//|	КОНЕЦ КАК Кредит,
	//|	УчетныйОбороты.КорСчет,
	//|	УчетныйОбороты.КорСубконто1,
	//|	УчетныйОбороты.КорСубконто2,
	//|	УчетныйОбороты.КорСубконто3,
	//|	УчетныйОбороты.Валюта,
	//|	УчетныйОбороты.ВалютнаяСуммаОборот,
	//|	УчетныйОбороты.Счет
	//|ИЗ
	//|	РегистрБухгалтерии.Учетный.Обороты(
	//|			&ДатаНачала,
	//|			&ДатаОкончания,
	//|			Регистратор,
	//|			Счет В ИЕРАРХИИ (&ФильтрСписокСчетов),
	//|			&АналитикаРасчетов,
	//|			Предприятия = &Организация
	//|				И ВЫБОР
	//|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	//|						ТОГДА ИСТИНА
	//|					ИНАЧЕ Валюта = &Валюта
	//|				КОНЕЦ
	//|				И Субконто1 = &Контрагент
	//|				И ВЫБОР
	//|					КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	//|						ТОГДА ИСТИНА
	//|					ИНАЧЕ Субконто2 В ИЕРАРХИИ (&ДоговорКонтрагента)
	//|				КОНЕЦ,
	//|			,
	//|			) КАК УчетныйОбороты
	//|ГДЕ
	//|	ВЫБОР
	//|			КОГДА УчетныйОбороты.КорСчет В ИЕРАРХИИ (&ФильтрСписокСчетов)
	//|				ТОГДА ВЫБОР
	//|						КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	//|							ТОГДА (НЕ УчетныйОбороты.КорСубконто1 = &Контрагент)
	//|						ИНАЧЕ (НЕ(УчетныйОбороты.КорСубконто1 = &Контрагент
	//|									И УчетныйОбороты.КорСубконто2 = УчетныйОбороты.Субконто2))
	//|					КОНЕЦ
	//|			ИНАЧЕ ИСТИНА
	//|		КОНЕЦ
	//|	И (НЕ(ВЫБОР
	//|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	//|						ТОГДА УчетныйОбороты.СуммаОборотДт
	//|					ИНАЧЕ УчетныйОбороты.ВалютнаяСуммаОборотДт
	//|				КОНЕЦ = 0
	//|				И ВЫБОР
	//|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	//|						ТОГДА УчетныйОбороты.СуммаОборотКт
	//|					ИНАЧЕ УчетныйОбороты.ВалютнаяСуммаОборотКт
	//|				КОНЕЦ = 0))
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	Дата,
	//|	Документ";
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетныйОбороты.Период КАК Дата,
	|	УчетныйОбороты.Регистратор.Номер КАК Номер,
	|	УчетныйОбороты.Регистратор КАК Документ,
	|	УчетныйОбороты.Субконто2 КАК Договор,
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА УчетныйОбороты.СуммаОборотДт
	|		ИНАЧЕ УчетныйОбороты.ВалютнаяСуммаОборотДт
	|	КОНЕЦ КАК Дебет,
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА УчетныйОбороты.СуммаОборотКт
	|		ИНАЧЕ УчетныйОбороты.ВалютнаяСуммаОборотКт
	|	КОНЕЦ КАК Кредит,
	|	УчетныйОбороты.КорСчет КАК КорСчет,
	|	УчетныйОбороты.КорСубконто1 КАК КорСубконто1,
	|	УчетныйОбороты.КорСубконто2 КАК КорСубконто2,
	|	УчетныйОбороты.КорСубконто3 КАК КорСубконто3,
	|	УчетныйОбороты.Валюта КАК Валюта,
	|	УчетныйОбороты.ВалютнаяСуммаОборот КАК ВалютнаяСуммаОборот,
	|	УчетныйОбороты.Счет КАК Счет,
	|	УчетныйОбороты.Регистратор.Комментарий КАК Комментарий
	|ИЗ
	|	РегистрБухгалтерии.Учетный.Обороты(
	|			&ДатаНачала,
	|			&ДатаОкончания,
	|			Регистратор,
	|			Счет В ИЕРАРХИИ (&ФильтрСписокСчетов),
	|			,
	|			Предприятия = &Предприятие
	|				И Субконто1 = &Контрагент
	|				И ВЫБОР
	|					КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Субконто2 В ИЕРАРХИИ (&ДоговорКонтрагента)
	|				КОНЕЦ
	|				И ВЫБОР
	|					КОГДА &Организация = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).Организация = &Организация
	|				КОНЕЦ,
	|			,
	|			) КАК УчетныйОбороты
	|ГДЕ
	|	НЕ УчетныйОбороты.Счет = УчетныйОбороты.КорСчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Документ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборДвижений = Объект.ПоДаннымОрганизации.Выгрузить();
	НаборДвижений.Колонки.Добавить("Валюта",        Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	НаборДвижений.Колонки.Добавить("ВалютнаяСумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	КэшМетаданных = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл

		Если Выборка.Дебет = 0 И Выборка.Кредит = 0 Тогда
			Продолжить;
		КонецЕсли;

		МетаданныеДокумента = ПолучитьМетаданныеДокумента(Выборка.Документ, КэшМетаданных);
		
		НоваяСтрока = НаборДвижений.Добавить();
		НоваяСтрока.Документ           = Выборка.Документ;
		НоваяСтрока.Договор            = Выборка.Договор;
		НоваяСтрока.Комментарий        = Выборка.Комментарий;
		НоваяСтрока.Дата               = Выборка.Дата;
		НоваяСтрока.Дебет              = Выборка.Дебет;
		НоваяСтрока.Кредит             = Выборка.Кредит;
		НоваяСтрока.Валюта             = Выборка.Валюта;
		НоваяСтрока.ВалютнаяСумма      = Выборка.ВалютнаяСуммаОборот;

		Если Объект.ВыводитьПолныеНазванияДокументов Тогда
			Если Выборка.НомерВходящегоДокумента = Неопределено Тогда
				НоваяСтрока.Представление = МетаданныеДокумента.Представление() + " №" + Символы.НПП + Выборка.Номер;
			Иначе
				НоваяСтрока.Представление = МетаданныеДокумента.Представление() + " (" + 
					?(НЕ ЗначениеЗаполнено(Выборка.НомерВходящегоДокумента), "_______", 
					Выборка.НомерВходящегоДокумента) + " от " 
					+ ?(НЕ ЗначениеЗаполнено(Выборка.ДатаВходящегоДокумента), 
					"'  .  .    '",
					Формат(Выборка.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy")) + ")";
			КонецЕсли;	
		Иначе
			
			// Сформируем строку представления
			Представление = "";
			
			Если Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Учетный.Счет91()) Тогда
				
				Если НЕ ЗначениеЗаполнено(Выборка.ВидпрочихДоходовИРасходов) Тогда
					
				ИначеЕсли Выборка.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы Тогда
					Представление = "Курсовые разницы";
				ИначеЕсли Выборка.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате Тогда
					Представление = "Санкции";
				ИначеЕсли Выборка.КорСубконто1 = Справочники.ПрочиеДоходыИРасходы.СуммовыеРазницы Тогда
					Представление = "Суммовые разницы";
				Иначе
					Представление = Строка(Выборка.КорСубконто1);
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(Представление) Тогда
				// Строка уже отработана
				
			ИначеЕсли Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Учетный.Счет50()) 
				ИЛИ Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Учетный.Счет5101()) 
				ИЛИ Выборка.КорСчет = ПланыСчетов.Учетный.Счет5101()
				ИЛИ Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Учетный.Счет5102()) 
				ИЛИ Выборка.КорСчет = ПланыСчетов.Учетный.Счет5102()
				Тогда
				
				Если (Выборка.Кредит >0) Тогда
					
					Если Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Учетный.Счет60()) Тогда
						Представление = "Возврат средств";
						
					ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Учетный.Счет62()) Тогда
						Представление = "Оплата";
						
					Иначе
						Представление = "Перевод средств";
					КонецЕсли;
					
				ИначеЕсли (Выборка.Дебет >0) Тогда
					Если Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Учетный.Счет60())
						ИЛИ Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Учетный.Счет76()) Тогда
						
						Представление = "Оплата";
						
					ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Учетный.Счет62()) Тогда
						Представление = "Возврат средств";
						
					Иначе
						Представление = "Перевод средств";
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Учетный.Счет90()) И (Выборка.Дебет > 0) Тогда
				Представление = "Продажа";
			ИначеЕсли Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Учетный.Счет91()) 
				И НЕ Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Учетный.Счет60()) 
				И (Выборка.Дебет > 0) Тогда
				Представление = "Продажа";
			ИначеЕсли (Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Учетный.Счет60()) 
				ИЛИ Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Учетный.Счет76()))
				И (Выборка.Кредит <> 0) Тогда
				Представление = "Приход";
			ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Учетный.Счет62()) Тогда
				Если ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.УЧ_Реализация") И Выборка.Дебет <> 0 Тогда
					Представление = "Продажа";
				ИначеЕсли (Выборка.Кредит <> 0) Тогда
					Представление = "Оплата";
				КонецЕсли;
			КонецЕсли;
			
			Если ПустаяСтрока(Представление)Тогда
				Если Выборка.Дебет > 0 Тогда
					Представление = "Принято";
				ИначеЕсли Выборка.Дебет < 0 Тогда
					Представление = "Сторно: принято";
				ИначеЕсли Выборка.Кредит > 0 Тогда
					Представление = "Передано";
				Иначе
					Представление = "Сторно: передано";
				КонецЕсли;
			КонецЕсли;
			
			Представление = Представление + " ("+Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + ")";
			НоваяСтрока.Представление = Представление;
		КонецЕсли;
		
	КонецЦикла;
	
	
	
	Запрос.УстановитьПараметр("ДатаНачала", 
		?(НЕ ЗначениеЗаполнено(Объект.ДатаНачала), Неопределено, Новый Граница (Объект.ДатаНачала,ВидГраницы.Исключая)));
	
	Запрос.Текст = 
	?(НЕ ЗначениеЗаполнено(Объект.ДатаНачала), 
	"ВЫБРАТЬ
	|	0 КАК ОстатокНаНачало, 
	|	0 КАК ОстатокНаКонец", 
	
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА УчетныйОстаткиНаНачало.СуммаОстаток
	|		ИНАЧЕ УчетныйОстаткиНаНачало.ВалютнаяСуммаОстаток
	|	КОНЕЦ КАК ОстатокНаНачало, 
	|	0 КАК ОстатокНаКонец
	|ИЗ
	|	РегистрБухгалтерии.Учетный.Остатки(
	|		&ДатаНачала,
	|		Счет В ИЕРАРХИИ (&ФильтрСписокСчетов), ,
	//|		&АналитикаРасчетов,
	|		Предприятия = &Предприятие
	|		    И ВЫБОР
	|		        КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|		            ТОГДА ИСТИНА
	|		        ИНАЧЕ Валюта = &Валюта
	|		    КОНЕЦ
	|		    И Субконто1 = &Контрагент
	|		    И ВЫБОР
	|		        КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|		            ТОГДА ИСТИНА
	|		        ИНАЧЕ Субконто2 В ИЕРАРХИИ (&ДоговорКонтрагента)
	|		    КОНЕЦ) КАК УчетныйОстаткиНаНачало")
	+ "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|0,
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА УчетныйОстаткиНаНачало.СуммаОстаток
	|		ИНАЧЕ УчетныйОстаткиНаНачало.ВалютнаяСуммаОстаток
	|	КОНЕЦ
	|ИЗ
	|	РегистрБухгалтерии.Учетный.Остатки(
	|		&ДатаОкончания,
	|		Счет В ИЕРАРХИИ (&ФильтрСписокСчетов), ,
	//|		&АналитикаРасчетов,
	|		Предприятия = &Предприятие
	|		    И ВЫБОР
	|		        КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|		            ТОГДА ИСТИНА
	|		        ИНАЧЕ Валюта = &Валюта
	|		    КОНЕЦ
	|		    И Субконто1 = &Контрагент
	|		    И ВЫБОР
	|		        КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|		            ТОГДА ИСТИНА
	|		        ИНАЧЕ Субконто2  В ИЕРАРХИИ (&ДоговорКонтрагента)
	|		    КОНЕЦ) КАК УчетныйОстаткиНаНачало 
	|ИТОГИ
	|	СУММА(ОстатокНаНачало),
	|	СУММА(ОстатокНаКонец)
	|ПО ОБЩИЕ";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
	Выборка.Следующий();
	Объект.ОстатокНаНачало = Выборка.ОстатокНаНачало;
	ОстатокНаКонец  = Выборка.ОстатокНаКонец;
	
	Если Объект.ВалютаДокумента = ВалютаРегламентированногоУчета 
		И НЕ Объект.ВыводитьПолныеНазванияДокументов  Тогда
		
		НаборДвижений.Свернуть("Дата,Документ,Представление,Комментарий,Договор,Валюта", "Дебет, Кредит, ВалютнаяСумма");
		
		Для каждого СтрокаДвижений Из НаборДвижений Цикл
			Если СтрокаДвижений.ВалютнаяСумма >0 Тогда
				
				СтрокаДвижений.Представление = СтрокаДвижений.Представление+" ("+Формат(СтрокаДвижений.ВалютнаяСумма, "ЧЦ=15; ЧДЦ=2")+" "+строка(СтрокаДвижений.Валюта) +")";
			ИначеЕсли СтрокаДвижений.ВалютнаяСумма <0 Тогда
				Множитель = ?(СтрокаДвижений.Дебет + СтрокаДвижений.Кредит>0, -1,1);
				
				СтрокаДвижений.Представление = СтрокаДвижений.Представление+" ("+Формат(Множитель*СтрокаДвижений.ВалютнаяСумма, "ЧЦ=15; ЧДЦ=2")+" "+строка(СтрокаДвижений.Валюта) +")";
	
			КонецЕсли;
		КонецЦикла; 
		
	Иначе
		НаборДвижений.Свернуть("Дата,Документ,Представление,Комментарий,Договор","Дебет, Кредит");	
	КонецЕсли; 
	
	Если Объект.ВыводитьПолныеНазванияДокументов Тогда	
		НаборДвижений.Свернуть("Дата,Документ,Представление,Комментарий,Договор","Дебет, Кредит");
	КонецЕсли;

	Если Объект.РазбитьПоДоговорам Тогда
		НаборДвижений.Сортировать("Договор, Дата, Документ, Представление");
	Иначе
		НаборДвижений.Сортировать("Дата, Документ, Представление, Договор");
	КонецЕсли;

	Объект.ПоДаннымОрганизации.Загрузить(НаборДвижений);
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеКонтрагентаПоДаннымОрганизацииСервер()
	
	ПоДаннымКонтрагента = Объект.ПоДаннымОрганизации.Выгрузить();
	
	ПоДаннымКонтрагента.Колонки.Дебет.Имя  = "КредитК";
	ПоДаннымКонтрагента.Колонки.Кредит.Имя = "Дебет";
	ПоДаннымКонтрагента.Колонки.КредитК.Имя= "Кредит";
	
	Для каждого СтрокаДвижений Из ПоДаннымКонтрагента Цикл
		Представление = СокрЛП(СтрокаДвижений.Представление);
		Если Лев(Представление, 8) = "Передано" Тогда
			Представление = "Принято" + Сред(Представление, 9);
			
		ИначеЕсли Лев(Представление, 7) = "Принято" Тогда
			Представление = "Передано" + Сред(Представление, 8);

		ИначеЕсли Лев(Представление, 7) = "Продажа" Тогда
			Представление = "Приход" + Сред(Представление, 8);

		ИначеЕсли Лев(Представление, 6) = "Приход" Тогда
			Представление = "Продажа" + Сред(Представление, 7);
		КонецЕсли;
		СтрокаДвижений.Представление = Представление;
	КонецЦикла;
	
	Объект.ПоДаннымКонтрагента.Загрузить(ПоДаннымКонтрагента);
 	ПересчитатьОстаткиНаСервере();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМетаданныеДокумента(ДокументСсылка, КэшМетаданных)
	
	МетаданныеДокумента = КэшМетаданных[ТипЗнч(ДокументСсылка)];
	
	Если МетаданныеДокумента = Неопределено Тогда
		МетаданныеДокумента = ДокументСсылка.Метаданные();
		КэшМетаданных.Вставить(ТипЗнч(ДокументСсылка), МетаданныеДокумента);
	КонецЕсли; 
	
    Возврат МетаданныеДокумента;
	
КонецФункции

// Заполнение таблицы "По данным организации" по данным бухгалтерского учета
//
&НаСервере
Процедура ЗаполнитьДаннымиБухгалтерскогоУчетаНаСервере()
	
	ЗаполнитьПоДаннымБухгалтерскогоУчета();

	ПересчитатьОстаткиНаСервере();

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриВыбореДокументаНаСервере(ВыбранныйДокумент, ДатаВыбранногоДокумента, ДоговорВыбранногоДокумента)

	Если ЗначениеЗаполнено(ВыбранныйДокумент) Тогда
		Если ВыбранныйДокумент.Метаданные().Реквизиты.Найти("ДоговорКонтрагента") = Неопределено Тогда
			ДатаВыбранногоДокумента = ПолучитьЗначениеРеквизита(ВыбранныйДокумент, "Дата")
		Иначе
			ДанныеДокумента = ПолучитьЗначенияРеквизитов(ВыбранныйДокумент, "Дата,ДоговорКонтрагента");
			ДатаВыбранногоДокумента    = ДанныеДокумента.Дата;
			ДоговорВыбранногоДокумента = ДанныеДокумента.ДоговорКонтрагента;
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура УправлениеФормой(Форма)

	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;

	Элементы.РазбитьПоДоговорам.Доступность = НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) 
		ИЛИ Форма.ПараметрыДоговора.ЭтоГруппа;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура ИзменитьДоступностьПоСогласованиюСверки(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Элементы.Предприятие.Доступность			= НЕ Объект.СверкаСогласована;
	Элементы.Контрагент.Доступность				= НЕ Объект.СверкаСогласована;
	Элементы.ДоговорКонтрагента.Доступность		= НЕ Объект.СверкаСогласована;
	Элементы.ВалютаДокумента.Доступность		= НЕ Объект.СверкаСогласована;
	
	Элементы.ДатаНачала.Доступность				= НЕ Объект.СверкаСогласована;
	Элементы.ДатаОкончания.Доступность			= НЕ Объект.СверкаСогласована;
	
	Элементы.ОстатокНаНачало.Доступность     	= НЕ Объект.СверкаСогласована;
	
	Элементы.ПоДаннымКонтрагента.ТолькоПросмотр = Объект.СверкаСогласована;
	Элементы.ПоДаннымОрганизации.ТолькоПросмотр = Объект.СверкаСогласована;
	Элементы.СписокСчетов.ТолькоПросмотр 		= Объект.СверкаСогласована;

	Элементы.ВыводитьПолныеНазванияДокументов.Доступность 		= НЕ Объект.СверкаСогласована;
	
	Элементы.ПоДаннымКонтрагента.КоманднаяПанель.Доступность	= НЕ Объект.СверкаСогласована;
	Элементы.ПоДаннымОрганизации.КоманднаяПанель.Доступность	= НЕ Объект.СверкаСогласована;
	Элементы.СписокСчетов.КоманднаяПанель.Доступность			= НЕ Объект.СверкаСогласована;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьПоДаннымУчета(Команда)
	
	//проверим заполненность обязательных реквизитов
	Если НЕ ПроверитьЗаполнениеДокументаНаСервере() Тогда
		Возврат;
	КонецЕсли;	
	
	Если Объект.ПоДаннымОрганизации.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Продолжить?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Заголовок);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	Объект.ПоДаннымОрганизации.Очистить();
	ЗаполнитьДаннымиБухгалтерскогоУчетаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеКонтрагентаПоДаннымОрганизации(Команда)
	
	Если Объект.ПоДаннымКонтрагента.Количество()>0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Продолжить?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Заголовок);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	//проверим заполненность обязательных реквизитов:
	Если Объект.ПоДаннымОрганизации.Количество()=0 Тогда
		Предупреждение(НСтр("ru='Таблица ""По данным организации"" не заполнена!'"));
		ТекущийЭлемент = Элементы.ПоДаннымОрганизации;
		Возврат;
	КонецЕсли;	
	
	ЗаполнитьДанныеКонтрагентаПоДаннымОрганизацииСервер();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьОстаткиИРасхождение()

	ОстатокНаКонец = Объект.ОстатокНаНачало 
		+ Объект.ПоДаннымОрганизации.Итог("Дебет") - Объект.ПоДаннымОрганизации.Итог("Кредит");
	
	ОстатокНаНачалоКонтрагент = - Объект.ОстатокНаНачало;
	ОстатокНаКонецКонтрагент = ОстатокНаНачалоКонтрагент 
		+ Объект.ПоДаннымКонтрагента.Итог("Дебет") - Объект.ПоДаннымКонтрагента.Итог("Кредит");
	
	Расхождение           = Объект.Расхождение;
	РасхождениеКонтрагент = - Расхождение;
	
КонецПроцедуры

&НаСервере
Процедура ЗапомнитьТекущиеЗначенияРеквизитов()

	ТекущаяДатаДокумента = Объект.Дата;
	ТекущаяОрганизация 	 = Объект.Организация;
	ТекущийКонтрагент 	 = Объект.Контрагент;
	ТекущийПредставительКонтрагента = Объект.ПредставительКонтрагента;
	ПроверитьПараметрыДоговора(Объект.ДоговорКонтрагента, ПараметрыДоговора);
	ТекущийПериод.ДатаНачала    = Объект.ДатаНачала;
	ТекущийПериод.ДатаОкончания = Объект.ДатаОкончания;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	ПриИзмененииПериода();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	ПриИзмененииПериода();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	// Проверяем: нужно ли что-то обновлять:
	Если НЕ Объект.Контрагент=ТекущийКонтрагент Тогда
		
		Если Объект.ПоДаннымОрганизации.Количество()>0 ИЛИ Объект.ПоДаннымКонтрагента.Количество()>0 Тогда
		
			ТекстВопроса = НСтр("ru='При изменении контрагента табличные части будут очищены. Продолжить?'");
			Ответ        = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Заголовок);

			Если Ответ = КодВозвратаДиалога.Нет Тогда
				// при отказе возвращаем предыдущие значения реквизитов:
				Объект.Контрагент = ТекущийКонтрагент;
				Объект.ДоговорКонтрагента = ПараметрыДоговора.Ссылка;
				Объект.ПредставительКонтрагента = ТекущийПредставительКонтрагента;
				Возврат;
			КонецЕсли; 
		КонецЕсли;	
		
		// Отработку изменения передаем на сервер:
		ПриИзмененииКонтрагентаСервер();
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	//// Проверяем: нужно ли что-то обновлять:
	//Если НЕ Объект.ДоговорКонтрагента=ПараметрыДоговора.Ссылка Тогда
	//	
	//	Если Объект.ПоДаннымОрганизации.Количество()>0 ИЛИ Объект.ПоДаннымКонтрагента.Количество()>0 Тогда
	//	
	//		ТекстВопроса = НСтр("ru='При изменении договора табличные части будут очищены. Продолжить?'");
	//		Ответ        = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Заголовок);

	//		Если Ответ = КодВозвратаДиалога.Нет Тогда
	//			// при отказе возвращаем предыдущие значения реквизитов:
	//			Объект.Организация = ТекущаяОрганизация;
	//			Объект.ДоговорКонтрагента = ПараметрыДоговора.Ссылка;
	//			Возврат;
	//		КонецЕсли; 
	//	КонецЕсли;	
	//	
	//	// Отработку изменения передаем на сервер:
	//	ПриИзмененииДоговораСервер();
	//	
	//КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СверкаСогласованаПриИзменении(Элемент)
	
	ИзменитьДоступностьПоСогласованиюСверки(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОстатокНаНачалоПриИзменении(Элемент)
	
	ПересчитатьОстатки();
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьПоДоговорамПриИзменении(Элемент)

	ПриИзмененииРазбитьПоДоговорамСервер();

КонецПроцедуры

&НаКлиенте
Процедура ВыводитьПолныеНазванияДокументовПриИзменении(Элемент)
	
	Если Объект.ПоДаннымОрганизации.Количество() > 0 
		ИЛИ Объект.ПоДаннымКонтрагента.Количество() >0 Тогда
	
		ТекстВопроса = НСтр("ru='При изменении способа вывода названий документов табличные части будут очищены. Продолжить?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Заголовок);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Объект.ВыводитьПолныеНазванияДокументов = НЕ Объект.ВыводитьПолныеНазванияДокументов;
			Возврат;
		КонецЕсли; 
		
		Объект.ПоДаннымОрганизации.Очистить();
		Объект.ПоДаннымКонтрагента.Очистить();
	
	КонецЕсли; 
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ "По данным организации"

&НаКлиенте
Процедура ПоДаннымОрганизацииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		ПересчитатьОстатки();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПоДаннымОрганизацииПослеУдаления(Элемент)
	
	ПересчитатьОстатки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоДаннымОрганизацииДокументПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.ПоДаннымОрганизации.ТекущиеДанные;
	ПриВыбореДокументаНаСервере(ДанныеСтроки.Документ, ДанныеСтроки.Дата, ДанныеСтроки.Договор);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ "По данным контрагента"

&НаКлиенте
Процедура ПоДаннымКонтрагентаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		ПересчитатьОстатки();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПоДаннымКонтрагентаПослеУдаления(Элемент)
	
	ПересчитатьОстатки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Файл" Тогда
		Если Параметр.Свойство("ФормаВладелецУИД") И Параметр.ФормаВладелецУИД = ЭтаФорма.УникальныйИдентификатор Тогда
			сабОбщегоНазначения.ПрикрепитьФайлКДокументу(Параметр); 
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	БюджетныйНаСервере.ДействияПриСозданииФормыДокумента(ЭтаФорма);

	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	сабОбщегоНазначенияБУХ.ФормаДокументаУУОбработкаБУПередЗаписью(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры



