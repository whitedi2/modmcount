// Форматирует сумму банковского платежного документа
//
// Параметры:
//  Сумма - число - реквизит, который надо отформатировать
//  ВыводитьСуммуБезКопеек - булево - флаг представления суммы без копеек
//
// Возвращаемое значение
//  Отформатированная строка
//
Функция ФорматироватьСуммуПлатежногоДокумента(Сумма, ВыводитьСуммуБезКопеек = Ложь) Экспорт
	
	Результат  = Сумма;
	ЦелаяЧасть = Цел(Сумма);
	
	Если Результат = ЦелаяЧасть Тогда
		Если ВыводитьСуммуБезКопеек Тогда
			Результат = Формат(Результат, "ЧДЦ=2; ЧРД='='; ЧГ=0");
			Результат = Лев(Результат, Найти(Результат, "="));
		Иначе
			Результат = Формат(Результат, "ЧДЦ=2; ЧРД='-'; ЧГ=0");
		КонецЕсли;
	Иначе
		Результат = Формат(Результат, "ЧДЦ=2; ЧРД='-'; ЧГ=0");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ФорматироватьСуммуПлатежногоДокумента()

// Форматирует сумму прописью банковского платежного документа
//
// Параметры:
//  Сумма - число - реквизит, который надо представить прописью 
//  Валюта - СправочникСсылка.Валюты - валюта, в которой нужно представить сумму
//  ВыводитьСуммуБезКопеек - булево - флаг представления суммы без копеек
//
// Возвращаемое значение
//  Отформатированная строка
//
Функция ФорматироватьСуммуПрописьюПлатежногоДокумента(Сумма, Валюта, ВыводитьСуммуБезКопеек = Ложь) Экспорт
	
	Результат     = Сумма;
	ЦелаяЧасть    = Цел(Сумма);
	ФорматСтрока  = "Л=ru_RU; ДП=Ложь";
	ПарамПредмета = Валюта.ПараметрыПрописи;
	
	Если Результат = ЦелаяЧасть Тогда
		Если ВыводитьСуммуБезКопеек Тогда
			Результат = ЧислоПрописью(Результат, ФорматСтрока, ПарамПредмета);
			Результат = Лев(Результат, Найти(Результат, "0") - 1);
		Иначе
			Результат = ЧислоПрописью(Результат, ФорматСтрока, ПарамПредмета);
		КонецЕсли;
	Иначе
		Результат = ЧислоПрописью(Результат, ФорматСтрока, ПарамПредмета);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ФорматироватьСуммуПрописьюПлатежногоДокумента()



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Формирует и возвращает текст запроса для выборки данных,
// необходимых для формирования печатной формы
Функция ПолучитьТекстЗапросаДляФормированияПечатнойФормыАктСверки()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Акт.Ссылка КАК АктСверки,
	|	ВЫБОР
	|		КОГДА Акт.РазбитьПоДоговорам
	|			ТОГДА ТЧПоДаннымОрганизации.Договор
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Договор,
	|	ТЧПоДаннымОрганизации.НомерСтроки КАК НомерСтроки,
	|	ТЧПоДаннымОрганизации.Дата КАК Дата,
	|	NULL КАК ДатаК,
	|	ТЧПоДаннымОрганизации.Документ КАК Документ,
	|	ТЧПоДаннымОрганизации.Представление КАК Представление,
	|	NULL КАК ПредставлениеК,
	|	ТЧПоДаннымОрганизации.Дебет КАК Дебет,
	|	ТЧПоДаннымОрганизации.Кредит КАК Кредит,
	|	0 КАК ДебетК,
	|	0 КАК КредитК,
	|	ТЧПоДаннымОрганизации.Комментарий КАК Комментарий
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.УЧ_АктСверкиВзаиморасчетов КАК Акт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_АктСверкиВзаиморасчетов.ПоДаннымОрганизации КАК ТЧПоДаннымОрганизации
	|		ПО Акт.Ссылка = ТЧПоДаннымОрганизации.Ссылка
	|ГДЕ
	|	Акт.Ссылка В(&ПечДок)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Акт.Ссылка,
	|	ВЫБОР
	|		КОГДА Акт.РазбитьПоДоговорам
	|			ТОГДА ТЧПоДаннымКонтрагента.Договор
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	0,
	|	NULL,
	|	ТЧПоДаннымКонтрагента.Дата,
	|	NULL,
	|	NULL,
	|	ТЧПоДаннымКонтрагента.Представление,
	|	0,
	|	0,
	|	ТЧПоДаннымКонтрагента.Дебет,
	|	ТЧПоДаннымКонтрагента.Кредит,
	|	NULL
	|ИЗ
	|	Документ.УЧ_АктСверкиВзаиморасчетов КАК Акт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_АктСверкиВзаиморасчетов.ПоДаннымКонтрагента КАК ТЧПоДаннымКонтрагента
	|		ПО Акт.Ссылка = ТЧПоДаннымКонтрагента.Ссылка
	|ГДЕ
	|	Акт.Ссылка В(&ПечДок)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АктСверки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.АктСверки КАК АктСверки,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.НомерСтроки КАК НомерСтроки,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Дата КАК МинДата,
	|	ДанныеДокумента.Документ КАК Документ,
	|	ДанныеДокумента.Представление КАК Представление,
	|	ДанныеДокумента.ДатаК КАК ДатаК,
	|	ДанныеДокумента.ПредставлениеК КАК ПредставлениеК,
	|	ДанныеДокумента.Дебет КАК СуммаДогДт,
	|	ДанныеДокумента.Кредит КАК СуммаДогКт,
	|	ДанныеДокумента.ДебетК КАК СуммаДогДтКонтр,
	|	ДанныеДокумента.КредитК КАК СуммаДогКтКонтр,
	|	АктСверкиВзаиморасчетов.Предприятие КАК Организация,
	|	АктСверкиВзаиморасчетов.Контрагент КАК Контрагент,
	|	АктСверкиВзаиморасчетов.Дата КАК ДатаАктаСверки,
	|	АктСверкиВзаиморасчетов.ПредставительОрганизации КАК ПредставительОрганизации,
	|	АктСверкиВзаиморасчетов.ПредставительКонтрагента КАК ПредставительКонтрагента,
	|	АктСверкиВзаиморасчетов.ДатаНачала КАК ДатаНачала,
	|	АктСверкиВзаиморасчетов.ДатаОкончания КАК ДатаОкончания,
	|	АктСверкиВзаиморасчетов.ОстатокНаНачало КАК ОстатокНаНачало,
	|	АктСверкиВзаиморасчетов.Расхождение КАК Расхождение,
	|	АктСверкиВзаиморасчетов.ДоговорКонтрагента КАК ДоговорКонтрагентаВШапке,
	|	АктСверкиВзаиморасчетов.ВалютаДокумента КАК ВалютаДокумента,
	|	АктСверкиВзаиморасчетов.РазбитьПоДоговорам КАК РазбитьПоДоговорам,
	|	АктСверкиВзаиморасчетов.СверкаСогласована КАК СверкаСогласована,
	|	ДанныеДокумента.Комментарий КАК Комментарий,
	|	АктСверкиВзаиморасчетов.Организация КАК Организация1
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_АктСверкиВзаиморасчетов КАК АктСверкиВзаиморасчетов
	|		ПО ДанныеДокумента.АктСверки = АктСверкиВзаиморасчетов.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	АктСверкиВзаиморасчетов.Дата,
	|	АктСверкиВзаиморасчетов.Ссылка,
	|	ДанныеДокумента.Договор,
	|	ДанныеДокумента.НомерСтроки
	|ИТОГИ
	|	МИНИМУМ(МинДата),
	|	СУММА(СуммаДогДт),
	|	СУММА(СуммаДогКт),
	|	СУММА(СуммаДогДтКонтр),
	|	СУММА(СуммаДогКтКонтр),
	|	МАКСИМУМ(Организация),
	|	МАКСИМУМ(Контрагент),
	|	МАКСИМУМ(ДатаАктаСверки),
	|	МАКСИМУМ(ПредставительОрганизации),
	|	МАКСИМУМ(ПредставительКонтрагента),
	|	МАКСИМУМ(ДатаНачала),
	|	МАКСИМУМ(ДатаОкончания),
	|	МАКСИМУМ(ОстатокНаНачало),
	|	МАКСИМУМ(Расхождение),
	|	МАКСИМУМ(ДоговорКонтрагентаВШапке),
	|	МАКСИМУМ(ВалютаДокумента),
	|	МАКСИМУМ(РазбитьПоДоговорам),
	|	МАКСИМУМ(СверкаСогласована),
	|	МАКСИМУМ(Организация1)
	|ПО
	|	АктСверки,
	|	Договор";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция формирует табличный документ с печатной формой накладной,
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Процедура ПечатьАктаСверки(ТабДок,МассивДок)

	ТабличныйДокумент = ТабДок;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктСверкиВзаиморасчетов";
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ПечДок", МассивДок);
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияПечатнойФормыАктСверки();
	
	Шапка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "АктСверки");
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл
		
  		Макет = Документы.УЧ_АктСверкиВзаиморасчетов.ПолучитьМакет("АктСверки");    

		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Получаем области:
		ОбластьЗаголовок    = Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьНачОстатки   = Макет.ПолучитьОбласть("НачОстатки");
		ОбластьДоговор      = Макет.ПолучитьОбласть("Договор");
		ОбластьДоговорИтоги = Макет.ПолучитьОбласть("ДоговорИтоги");
		ОбластьОбороты      = Макет.ПолучитьОбласть("Обороты");
		ОбластьОборотыИтог  = Макет.ПолучитьОбласть("ОборотыИтог");
		ОбластьКонОстатки   = Макет.ПолучитьОбласть("КонОстатки");
		ОбластьПодвал       = Макет.ПолучитьОбласть("Подвал");
		
		// Заполняем шапку:
		СведенияОбОрганизации    = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(Шапка.Организация1, Шапка.ДатаАктаСверки),"ПолноеНаименование,");
		ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(Шапка.Организация1, Шапка.ДатаАктаСверки),"ПолноеНаименование,");
		СведенияОКонтрагенте     = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаАктаСверки),"ПолноеНаименование,");// "";//ОбщегоНазначенияБП.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаАктаСверки);
		ПредставлениеКонтрагента = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаАктаСверки),"ПолноеНаименование,");//"";// ОбщегоНазначенияБП.ОписаниеОрганизации(СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм,");
		
		ОбластьЗаголовок.Параметры.НазваниеОрганизации     = ПредставлениеОрганизации;
		ОбластьЗаголовок.Параметры.НаименованиеКонтрагента = ПредставлениеКонтрагента;
		ДатаНачалаОтчета = ?(ЗначениеЗаполнено(Шапка.ДатаНачала), Шапка.ДатаНачала, Шапка.МинДата);

		ОписаниеПериода = "за период: " + ПредставлениеПериода(НачалоДня( ДатаНачалаОтчета), КонецДня( Шапка.ДатаОкончания), "ФП = Истина");
		
		ТекстЗаголовка = "взаимных расчетов " + ОписаниеПериода  + Символы.ПС
						+ "между " + ПредставлениеОрганизации + Символы.ПС + "и " + ПредставлениеКонтрагента;
		ДоговорКонтрагента = Шапка.ДоговорКонтрагентаВШапке;
		Если ЗначениеЗаполнено(ДоговорКонтрагента) И НЕ ДоговорКонтрагента.ЭтоГруппа Тогда
		    ТекстЗаголовка = ТекстЗаголовка + Символы.ПС + "по договору " + ДоговорКонтрагента;
		КонецЕсли;
		
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ДанныеПредставителяОрганизации = "";//ОбщегоНазначенияБП.ДанныеФизЛица(Шапка.Организация, Шапка.ПредставительОрганизации, Шапка.ДатаАктаСверки);
		ФИОПредставителя = Шапка.ПредставительОрганизации;
		ФИОПредставителяК = Шапка.ПредставительКонтрагента;
		
		СтрЗаголовокТаблица = "Мы, нижеподписавшиеся,  ________________" + " " + ПредставлениеОрганизации
					+ " " + ?(ФИОПредставителя<>"",ФИОПредставителя,"_______________________") + ", с одной стороны, "
					+ "и  ________________ " + ПредставлениеКонтрагента + " " 
					+ ?(НЕ ЗначениеЗаполнено(Шапка.ПредставительКонтрагента),"_______________________",Шапка.ПредставительКонтрагента) + ", с другой стороны, "
					+ "составили настоящий акт сверки в том, что состояние взаимных расчетов по данным учета следующее:";
		
		ОбластьЗаголовок.Параметры.СтрЗаголовокТаблица = СтрЗаголовокТаблица;
		ОбластьЗаголовок.Параметры.ВалютаДокумента = Шапка.ВалютаДокумента;
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокДт = ?(Шапка.ОстатокНаНачало > 0, Шапка.ОстатокНаНачало, 0);
		ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокКт = ?(Шапка.ОстатокНаНачало < 0, -Шапка.ОстатокНаНачало, 0);
		ТабличныйДокумент.Вывести(ОбластьНачОстатки);
		
		ОборотыДт = Шапка.СуммаДогДт;
		ОборотыКт = Шапка.СуммаДогКт;
		ОборотыДтКонтр = Шапка.СуммаДогДтКонтр;
		ОборотыКтКонтр = Шапка.СуммаДогКтКонтр;

		
		ОбходПоДоговорам = Шапка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Договор");
		Пока ОбходПоДоговорам.Следующий() Цикл
			
			Если Шапка.РазбитьПоДоговорам Тогда
				//Выводим заголовок с договором
				ОбластьДоговор.Параметры.Договор = ОбходПоДоговорам.Договор;
				ОбластьДоговор.Параметры.Регистратор = ОбходПоДоговорам.Договор;
				ТабличныйДокумент.Вывести(ОбластьДоговор);
				ОбходПоДокументам=ОбходПоДоговорам.Выбрать();
			Иначе
				ОбходПоДокументам=ОбходПоДоговорам.Выбрать();
			КонецЕсли;		
			
			//Создадим список документов по организации и контрагенту
			СписокДокументов = новый массив;
			СписокДокументовК = новый массив;
			Пока ОбходПоДокументам.Следующий() Цикл
				Если ОбходПоДокументам.Дата<>NULL Тогда
					СписокДокументов.Добавить(новый структура("ДатаДокумента,РегистраторПредставление,Комментарий,Регистратор,СуммаОборотДт,СуммаОборотКт",
					ОбходПоДокументам.Дата,ОбходПоДокументам.Представление,ОбходПоДокументам.Комментарий,ОбходПоДокументам.Документ,ОбходПоДокументам.СуммаДогДт,ОбходПоДокументам.СуммаДогКт));				
				КонецЕсли;
				
				Если ОбходПоДокументам.ДатаК<>NULL Тогда
					СписокДокументовК.Добавить(новый структура("ДатаДокументаКонтр,РегистраторПредставлениеКонтр,СуммаОборотДтКонтр,СуммаОборотКтКонтр",
					ОбходПоДокументам.ДатаК,ОбходПоДокументам.ПредставлениеК,ОбходПоДокументам.СуммаДогДтКонтр,ОбходПоДокументам.СуммаДогКтКонтр));				
				КонецЕсли; 
			КонецЦикла;
			
			//Для упрощения вывода, сравним списки по количеству элементов, добавив пустые
			МаксИндекс = Макс(СписокДокументов.Количество(), СписокДокументовК.Количество())-1;
			МинИндекс = Мин(СписокДокументов.Количество(), СписокДокументовК.Количество())-1;
			Если СписокДокументов.Количество()<СписокДокументовК.Количество() Тогда
				Для инд = МинИндекс По МаксИндекс-1 Цикл
					СписокДокументов.Добавить(новый структура("ДатаДокумента,РегистраторПредставление,Регистратор,СуммаОборотДт,СуммаОборотКт","","","","",""));
				КонецЦикла;
			ИначеЕсли СписокДокументов.Количество()>СписокДокументовК.Количество() Тогда 
				Для инд = МинИндекс По МаксИндекс-1 Цикл
					СписокДокументовК.Добавить(новый структура("ДатаДокументаКонтр,РегистраторПредставлениеКонтр,СуммаОборотДтКонтр,СуммаОборотКтКонтр","","","",""));
				КонецЦикла;			
			КонецЕсли;
			
			Для Инд = 0 По МаксИндекс Цикл
				ОбластьОбороты.Параметры.Заполнить(СписокДокументов[Инд]);
				ОбластьОбороты.Параметры.Заполнить(СписокДокументовК[Инд]);
				ТабличныйДокумент.Вывести(ОбластьОбороты);
			КонецЦикла;
			
			Если Шапка.РазбитьПоДоговорам Тогда
				//Выводим итоги по каждому договору
				ОбластьДоговорИтоги.Параметры.Заполнить(ОбходПоДоговорам);		
				ТабличныйДокумент.Вывести(ОбластьДоговорИтоги);	
			Иначе
				Прервать;
			КонецЕсли;
			
		КонецЦикла;  
		
		ОбластьОборотыИтог.Параметры.СуммаОборотДт      = ОборотыДт;
		ОбластьОборотыИтог.Параметры.СуммаОборотКт      = ОборотыКт;
		Если Шапка.СверкаСогласована тогда
			ОбластьОборотыИтог.Параметры.СуммаОборотДтКонтр = ОборотыДтКонтр;
			ОбластьОборотыИтог.Параметры.СуммаОборотКтКонтр = ОборотыКтКонтр;
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьОборотыИтог);
		
		
		ОстатокНаКонец = Шапка.ОстатокНаНачало + ОборотыДт -  ОборотыКт;
		ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДт = ?(ОстатокНаКонец > 0, ОстатокНаКонец, 0);
		ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКт = ?(ОстатокНаКонец < 0, -ОстатокНаКонец, 0);
		
		Если Шапка.СверкаСогласована тогда
			ОстатокНаКонецК = Шапка.ОстатокНаНачало - ОборотыДтКонтр +  ОборотыКтКонтр;
			ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКтКонтр = ?(ОстатокНаКонецК > 0, ОстатокНаКонецК, 0);
			ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДтКонтр = ?(ОстатокНаКонецК < 0, -ОстатокНаКонецК, 0);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьКонОстатки);
		
		// Результаты сверки
	  	Если НЕ ЗначениеЗаполнено(Шапка.ДатаОкончания) Тогда
	   	    РезультатыСверки = "<не указана дата сверки>";
	   	ИначеЕсли НЕ ЗначениеЗаполнено(Шапка.Контрагент) Тогда
	   	    РезультатыСверки = "<не указан контрагент>";
	   	Иначе
			РезультатыСверки = "на " + Формат(Шапка.ДатаОкончания, "ДФ=dd.MM.yyyy") + " задолженность ";
				
		   	Если ОстатокНаКонец > 0 Тогда
				РезультатыСверки = РезультатыСверки + "в пользу " + ПредставлениеОрганизации + " " 
									+ Формат(ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2") + " " 
									+ строка(Шапка.ВалютаДокумента)
									+" ("+ФорматироватьСуммуПрописьюПлатежногоДокумента(ОстатокНаКонец, Шапка.ВалютаДокумента,Ложь)+")" ;
		
		   	ИначеЕсли ОстатокНаКонец < 0 Тогда
				РезультатыСверки = РезультатыСверки + "в пользу " + ПредставлениеКонтрагента + " " 
									+ Формат(-ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2") + " " 
									+ строка(Шапка.ВалютаДокумента)
									+" ("+ФорматироватьСуммуПрописьюПлатежногоДокумента(-ОстатокНаКонец, Шапка.ВалютаДокумента,Ложь)+")" ;
		
		   	Иначе
		   		РезультатыСверки = РезультатыСверки + "отсутствует.";
		   	КонецЕсли;
		КонецЕсли;
		ОбластьПодвал.Параметры.РезультатыСверки = РезультатыСверки;
		
		Если Шапка.СверкаСогласована тогда
			ОбластьПодвал.Параметры.ПоДаннымКонтрагента = "По данным " + ПредставлениеКонтрагента;
			
		  	Если НЕ ЗначениеЗаполнено(Шапка.ДатаОкончания) Тогда
		   	    РезультатыСверки = "<не указана дата сверки>";
		   	ИначеЕсли НЕ ЗначениеЗаполнено(Шапка.Контрагент) Тогда
		   	    РезультатыСверки = "<не указан контрагент>";
		   	Иначе
				РезультатыСверки = "на " + Формат(Шапка.ДатаОкончания, "ДФ=dd.MM.yyyy") + " задолженность ";
					
			   	Если ОстатокНаКонецК > 0 Тогда
					РезультатыСверки = РезультатыСверки + "в пользу " + ПредставлениеОрганизации + " " 
										+ Формат(ОстатокНаКонецК, "ЧЦ=21; ЧДЦ=2") + " " 
										+ строка(Шапка.ВалютаДокумента)
										+" ("+ФорматироватьСуммуПрописьюПлатежногоДокумента(ОстатокНаКонецК, Шапка.ВалютаДокумента,Ложь)+")" ;

			
			   	ИначеЕсли ОстатокНаКонецК < 0 Тогда
					РезультатыСверки = РезультатыСверки + "в пользу " + ПредставлениеКонтрагента + " " 
										+ Формат(-ОстатокНаКонецК, "ЧЦ=21; ЧДЦ=2") + " " 
										+ строка(Шапка.ВалютаДокумента)
										+" ("+ФорматироватьСуммуПрописьюПлатежногоДокумента(-ОстатокНаКонецК, Шапка.ВалютаДокумента,Ложь)+")" ;

			
			   	Иначе
			   		РезультатыСверки = РезультатыСверки + "отсутствует.";
			   	КонецЕсли;
		   	КонецЕсли;
			
			ОбластьПодвал.Параметры.РезультатыСверкиК = РезультатыСверки;
			
			Если Шапка.Расхождение<>0 Тогда                                                                                                                                                                                                                                                               
				 ИтогСверки = "В результате сверки выявлено расхождение информации о состоянии расчетов в размере "
				 			+Формат(?(Шапка.Расхождение>0,1,-1)*Шапка.Расхождение, "ЧЦ=21; ЧДЦ=2") 
							+" "+ Строка(Шапка.ВалютаДокумента)
							+" ("+ФорматироватьСуммуПрописьюПлатежногоДокумента(?(Шапка.Расхождение>0,1,-1)*Шапка.Расхождение, Шапка.ВалютаДокумента,Ложь)+")" ;
				 ОбластьПодвал.Параметры.ИтогСверки = Символы.ПС+ ИтогСверки+Символы.ПС+" ";
			КонецЕсли; 
		КонецЕсли;
		              
		ОбластьПодвал.Параметры.НазваниеОрганизации     = ПредставлениеОрганизации;
		ОбластьПодвал.Параметры.НаименованиеКонтрагента = ПредставлениеКонтрагента;
		
		ОбластьПодвал.Параметры.Должность  = "________________";
		ОбластьПодвал.Параметры.ДолжностьК = "________________";
		
		ОбластьПодвал.Параметры.ФИОПредставителя  = "("+ФиоПредставителя+")";
		ОбластьПодвал.Параметры.ФИОПредставителяК = "("+ФиоПредставителяК+")";;
		
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		//УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
		//	НомерСтрокиНачало, ОбъектыПечати, Шапка.АктСверки);

	КонецЦикла;	// Пока Шапка.Следующий()


КонецПроцедуры

Процедура Печать(ТабДок,Ссылка) Экспорт
	ПечатьАктаСверки(ТабДок,Ссылка)
КонецПроцедуры
