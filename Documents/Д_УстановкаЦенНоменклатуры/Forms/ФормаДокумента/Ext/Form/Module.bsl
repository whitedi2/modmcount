
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//++саб
	сабПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	//--саб
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыЦен()
	
	ВидыЦен.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыЦен.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВидыЦен.Ссылка = ЗНАЧЕНИЕ(Справочник.ВидыЦен.Розничная)
	|					ИЛИ ВидыЦен.Ссылка = ЗНАЧЕНИЕ(Справочник.ВидыЦен.РозничнаяПроизводство)
	|					ИЛИ ВидыЦен.Ссылка = ЗНАЧЕНИЕ(Справочник.ВидыЦен.Сигареты2)
	|					ИЛИ ВидыЦен.Ссылка = ЗНАЧЕНИЕ(Справочник.ВидыЦен.Сигареты3)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ НЕ ВидыЦен.Предопределенный
	|		КОНЕЦ
	|	И (Не ВидыЦен.ЦенаПродажи = &ЦенаПоставщика)
	|	И ВЫБОР
	|			КОГДА &ЦенаПоставщика
	|				ТОГДА ВидыЦен.Поставщик = &Поставщик
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И НЕ ВидыЦен.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	Запрос.УстановитьПараметр("ЦенаПоставщика", Объект.ВидОперации = Перечисления.ВидыОперацийУстановкаЦен.УстановкаЦенПоставщика);
	Запрос.УстановитьПараметр("Поставщик", Объект.Контрагент);
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл
		СтрокаВидов = ВидыЦен.Добавить();
		СтрокаВидов.ВидЦены = Выборка.Ссылка;
		Если Объект.ВидыЦен.НайтиСтроки(Новый Структура("ВидЦены", Выборка.Ссылка)).Количество() = 0 Тогда
			СтрокаВидов.Устанавливать = Ложь;
		Иначе
			СтрокаВидов.Устанавливать = Истина;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	

Процедура НайтиИУдалитьЭлементыФормы(Префикс, МассивРеквизитовУдалить, Строки)
	
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строки, ";");
	
	Для Каждого Строка Из МассивСтрок Цикл
		ЭлементФормы = Элементы.Найти(Префикс + Строка);
		Если ЭлементФормы <> Неопределено Тогда
			Элементы.Удалить(ЭлементФормы);
			МассивРеквизитовУдалить.Добавить("Цены." + Префикс + Строка);
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьЦены()
	
	СписокУдаляемыхКолонок.Очистить();
	
	Для Каждого СтрокаВидовЦен Из ВидыЦен Цикл
		Если СписокДобавляемыхКолонок.НайтиПоЗначению(СтрокаВидовЦен.ВидЦены.Код) <> Неопределено Тогда//Не СтрокаВидовЦен.Устанавливать И СписокДобавляемыхКолонок.НайтиПоЗначению(СтрокаВидовЦен.ВидЦены.Код) <> Неопределено Тогда
			СписокУдаляемыхКолонок.Добавить(СтрокаВидовЦен.ВидЦены.Код);
			СписокДобавляемыхКолонок.Удалить(СписокДобавляемыхКолонок.НайтиПоЗначению(СтрокаВидовЦен.ВидЦены.Код));
		КонецЕсли;	
	КонецЦикла;	
	
	МассивРеквизитовУдалить = Новый Массив;
	Для Каждого ЭлементУдаляемыхКолонок Из СписокУдаляемыхКолонок Цикл
		ТекНаим = "К" + СтрЗаменить(ЭлементУдаляемыхКолонок.Значение, "-", "Т");
		
		ЭлементФормы = Элементы.Найти(ТекНаим);
		Если ЭлементФормы <> Неопределено Тогда
			Элементы.Удалить(ЭлементФормы);
			МассивРеквизитовУдалить.Добавить("Цены." + ТекНаим);
		КонецЕсли;
		
		Если Не Объект.ВидОперации = Перечисления.ВидыОперацийУстановкаЦен.УстановкаЦенПоставщика Тогда
			НайтиИУдалитьЭлементыФормы(ТекНаим, МассивРеквизитовУдалить, "ФиксированнаяЦена;МРЦ;ПервичныйВидЦен;Наценка;НаценкаРуб;ПервичнаяЦена;ПрошлаяЦена;ПервичнаяЦенаПрошлая");
		КонецЕсли;	
		
		ЭлементФормы = Элементы.Найти("ГруппаВУ" + ТекНаим);
		Если ЭлементФормы <> Неопределено Тогда
			Элементы.Удалить(ЭлементФормы);
		КонецЕсли;
		
		ЭлементФормы = Элементы.Найти("Группа" + ТекНаим);
		Если ЭлементФормы <> Неопределено Тогда
			Элементы.Удалить(ЭлементФормы);
		КонецЕсли;	
	КонецЦикла;
	
	ИзменитьРеквизиты(, МассивРеквизитовУдалить);      
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЦен.Номенклатура,
	|	ТаблицаЦен.Спецификация,
	|	ТаблицаЦен.Цена,
	|	ТаблицаЦен.ВидЦены,
	|	ТаблицаЦен.ПервичныйВидЦен,
	|	ТаблицаЦен.Наценка,
	|	ТаблицаЦен.НаценкаПоУмолчанию,
	|	ТаблицаЦен.НаценкаРуб,
	|	ТаблицаЦен.ПервичнаяЦена,
	|	ТаблицаЦен.ПрошлаяЦена,
	|	ТаблицаЦен.ФиксированнаяЦена,
	|	ТаблицаЦен.ПервичнаяЦенаПрошлая,
	|	ТаблицаЦен.МРЦ
	|ПОМЕСТИТЬ ВТ_ТаблицаЦен
	|ИЗ
	|	&ТаблицаЦен КАК ТаблицаЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаЦен.Цена,
	|	ВТ_ТаблицаЦен.Номенклатура КАК Номенклатура,
	|	ВТ_ТаблицаЦен.Спецификация,
	|	ВидыЦен.Ссылка КАК ВидЦен,
	|	ВТ_ТаблицаЦен.ПервичныйВидЦен,
	|	ВТ_ТаблицаЦен.Наценка,
	|	ВТ_ТаблицаЦен.НаценкаРуб,
	|	ВТ_ТаблицаЦен.НаценкаПоУмолчанию,
	|	ВТ_ТаблицаЦен.ПервичнаяЦена,
	|	ВТ_ТаблицаЦен.ПрошлаяЦена,
	|	ВТ_ТаблицаЦен.ФиксированнаяЦена,
	|	ВТ_ТаблицаЦен.ПервичнаяЦенаПрошлая,
	|	ВТ_ТаблицаЦен.МРЦ
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаЦен КАК ВТ_ТаблицаЦен
	|		ПО (ВидыЦен.Ссылка = ВТ_ТаблицаЦен.ВидЦены)
	|ГДЕ
	|	ВидыЦен.Ссылка В(&МассивВидов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидЦен
	|ИТОГИ ПО
	|	Номенклатура";
	Запрос.УстановитьПараметр("МассивВидов", Объект.ВидыЦен.Выгрузить().ВыгрузитьКолонку("ВидЦены"));
	Запрос.УстановитьПараметр("ТаблицаЦен", Объект.Цены.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаВидов = РезультатЗапроса.Выгрузить().Скопировать(, "ВидЦен");
	ТаблицаВидов.Свернуть("ВидЦен");
	
	НоваяТаблицаВидовИЦен = Новый ТаблицаЗначений;
	НоваяТаблицаВидовИЦен.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	НоваяТаблицаВидовИЦен.Колонки.Добавить("Спецификация", Новый ОписаниеТипов("СправочникСсылка.Спецификации"));
	//НоваяТаблицаВидовИЦен.Колонки.Добавить("ТекКодВидаЦен", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки));
	
	МассивРеквизитов = Новый Массив;
	//МассивРеквизитов.Добавить(Новый РеквизитФормы("ТекКодВидаЦен", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки)));
		
	Для Каждого СтрокаВидов Из ТаблицаВидов Цикл
		Если Не ЗначениеЗаполнено(СтрокаВидов.ВидЦен) Тогда
			Продолжить;
		КонецЕсли;	
		ТекНаим = "К" + СтрЗаменить(СтрокаВидов.ВидЦен.Код, "-", "Т");
		НоваяТаблицаВидовИЦен.Колонки.Добавить(ТекНаим, Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15,2)));
		Если Не Объект.ВидОперации = Перечисления.ВидыОперацийУстановкаЦен.УстановкаЦенПоставщика Тогда
			Если Объект.РасширеннаяНастройка Тогда
				НоваяТаблицаВидовИЦен.Колонки.Добавить(ТекНаим + "ПервичныйВидЦен", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
				НоваяТаблицаВидовИЦен.Колонки.Добавить(ТекНаим + "Наценка", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(5,2)));
				//НоваяТаблицаВидовИЦен.Колонки.Добавить(ТекНаим + "НаценкаПоУмолчанию", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(5,2)));
				НоваяТаблицаВидовИЦен.Колонки.Добавить(ТекНаим + "НаценкаРуб", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15,2)));
				НоваяТаблицаВидовИЦен.Колонки.Добавить(ТекНаим + "ПервичнаяЦена", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15,2)));
				НоваяТаблицаВидовИЦен.Колонки.Добавить(ТекНаим + "ПрошлаяЦена", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15,2)));
				НоваяТаблицаВидовИЦен.Колонки.Добавить(ТекНаим + "ПервичнаяЦенаПрошлая", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15,2)));
			КонецЕсли;
			НоваяТаблицаВидовИЦен.Колонки.Добавить(ТекНаим + "ФиксированнаяЦена", Новый ОписаниеТипов("Булево", , , , , , Новый КвалификаторыДвоичныхДанных()));
			НоваяТаблицаВидовИЦен.Колонки.Добавить(ТекНаим + "МРЦ", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15,2)));
		КонецЕсли;
		Если Элементы.Найти(ТекНаим) = Неопределено Тогда
			МассивРеквизитов.Добавить(Новый РеквизитФормы(ТекНаим, Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15,2)), "Цены"));
			Если Не Объект.ВидОперации = Перечисления.ВидыОперацийУстановкаЦен.УстановкаЦенПоставщика Тогда
				Если Объект.РасширеннаяНастройка Тогда
					МассивРеквизитов.Добавить(Новый РеквизитФормы(ТекНаим + "ПервичныйВидЦен", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"), "Цены"));
					МассивРеквизитов.Добавить(Новый РеквизитФормы(ТекНаим + "Наценка", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(5,2)), "Цены"));
					//МассивРеквизитов.Добавить(Новый РеквизитФормы(ТекНаим + "НаценкаПоУмолчанию", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(5,2)), "Цены"));
					МассивРеквизитов.Добавить(Новый РеквизитФормы(ТекНаим + "НаценкаРуб", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15,2)), "Цены"));
					МассивРеквизитов.Добавить(Новый РеквизитФормы(ТекНаим + "ПервичнаяЦена", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15,2)), "Цены"));
					МассивРеквизитов.Добавить(Новый РеквизитФормы(ТекНаим + "ПрошлаяЦена", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15,2)), "Цены"));
					МассивРеквизитов.Добавить(Новый РеквизитФормы(ТекНаим + "ПервичнаяЦенаПрошлая", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15,2)), "Цены"));
				КонецЕсли;
				МассивРеквизитов.Добавить(Новый РеквизитФормы(ТекНаим + "ФиксированнаяЦена", Новый ОписаниеТипов("Булево", , , , , , Новый КвалификаторыДвоичныхДанных()), "Цены"));
				МассивРеквизитов.Добавить(Новый РеквизитФормы(ТекНаим + "МРЦ", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15,2)), "Цены"));
			КонецЕсли;
			СписокДобавляемыхКолонок.Добавить(СтрокаВидов.ВидЦен.Код);
		КонецЕсли;	
	КонецЦикла;
	ИзменитьРеквизиты(МассивРеквизитов, );      
	
	ЕстьРассчетСебестоимости = Ложь;
	
	Для Каждого СтрокаВидов Из ТаблицаВидов Цикл
		Если Не ЗначениеЗаполнено(СтрокаВидов.ВидЦен) Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаВидов.ВидЦен.ВидЗаданияЦеныПоДаннымИБ = Перечисления.ВидыЗаданияЦенПоДаннымИБ.ПоСебестоимостиИнгридиентов Тогда
			ЕстьРассчетСебестоимости = Истина;
		КонецЕсли;		
		ТекИмя = "К" + СтрЗаменить(СтрокаВидов.ВидЦен.Код, "-", "Т");
		ЭлементФормы = Элементы.Найти(ТекИмя);
		Если ЭлементФормы <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НовГруппаВерхнегоУровня = Элементы.Добавить("ГруппаВУ" + ТекИмя, Тип("ГруппаФормы"), Элементы.Цены);
		НовГруппаВерхнегоУровня.Вид = ВидГруппыФормы.ГруппаКолонок;
		Если Объект.РасширеннаяНастройка Тогда
			НовГруппаВерхнегоУровня.Группировка = ГруппировкаКолонок.Вертикальная;
		Иначе	
			НовГруппаВерхнегоУровня.Группировка = ГруппировкаКолонок.Горизонтальная;
		КонецЕсли;
		
		НовыйЭлемент = Элементы.Добавить(ТекИмя, Тип("ПолеФормы"), НовГруппаВерхнегоУровня);       
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = "Цены." + ТекИмя;
		НовыйЭлемент.Заголовок = СтрокаВидов.ВидЦен.Наименование;
		НовыйЭлемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
		НовыйЭлемент.Ширина = 10;
		НовыйЭлемент.ШрифтЗаголовка = Новый Шрифт(, , Истина); 
		НовыйЭлемент.Шрифт = Новый Шрифт(, , Истина); 
		Если СтрокаВидов.ВидЦен.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.Вручную Тогда
			НовыйЭлемент.КартинкаШапки = БиблиотекаКартинок.СпособыЗаданияЦенЗадаватьВручную;
		ИначеЕсли СтрокаВидов.ВидЦен.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаДругойВидЦен Или СтрокаВидов.ВидЦен.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаЦенуПоступления Тогда	
			НовыйЭлемент.КартинкаШапки = БиблиотекаКартинок.СпособыЗаданияЦенРассчитыватьПоФормуламОтДругихВидовЦен;
		ИначеЕсли СтрокаВидов.ВидЦен.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ Или СтрокаВидов.ВидЦен.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении Тогда
			НовыйЭлемент.КартинкаШапки = БиблиотекаКартинок.СпособыЗаданияЦенЗаполнятьПоДаннымИБ;
		КонецЕсли;
						
		Если Не Объект.ВидОперации = Перечисления.ВидыОперацийУстановкаЦен.УстановкаЦенПоставщика Тогда
			НовыйЭлемент.УстановитьДействие("ПриИзменении", "ЦеныЦенаПриИзменении");
			Если Объект.РасширеннаяНастройка Тогда
				НовГруппа = Элементы.Добавить("Группа" + ТекИмя, Тип("ГруппаФормы"), НовГруппаВерхнегоУровня);
				НовГруппа.Вид = ВидГруппыФормы.ГруппаКолонок;
				НовГруппа.Группировка = ГруппировкаКолонок.Горизонтальная;
				
				НовыйЭлемент = Элементы.Добавить(ТекИмя + "Наценка", Тип("ПолеФормы"), НовГруппа);       
				НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
				НовыйЭлемент.ПутьКДанным = "Цены." + ТекИмя + "Наценка";
				НовыйЭлемент.Заголовок = "Наценка, %";
				НовыйЭлемент.Ширина = 5;
				НовыйЭлемент.УстановитьДействие("ПриИзменении", "ЦеныНаценкаПриИзменении");
				
				//НовыйЭлемент = Элементы.Добавить(ТекИмя + "НаценкаПоУмолчанию", Тип("ПолеФормы"), НовГруппа);       
				//НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
				//НовыйЭлемент.ПутьКДанным = "Цены." + ТекИмя + "НаценкаПоУмолчанию";
				//НовыйЭлемент.Заголовок = "Наценка, % (по умолчанию)";
				//НовыйЭлемент.Ширина = 5;
				//НовыйЭлемент.ТолькоПросмотр = Истина;
				
				НовыйЭлемент = Элементы.Добавить(ТекИмя + "ПервичнаяЦена", Тип("ПолеФормы"), НовГруппа);       
				НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
				НовыйЭлемент.ПутьКДанным = "Цены." + ТекИмя + "ПервичнаяЦена";
				НовыйЭлемент.Заголовок = ?(ЕстьРассчетСебестоимости, "Себестоим. ингридиентов", "Первичная цена текущая");
				НовыйЭлемент.Ширина = 5;
				
				//НовыйЭлемент = Элементы.Добавить("ТекКодВидаЦен", Тип("ПолеФормы"), НовГруппа);       
				//НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
				//НовыйЭлемент.ПутьКДанным = "Цены.ТекКодВидаЦен";
				//НовыйЭлемент.Видимость = Ложь;
			КонецЕсли;
			
			Если Не ЕстьРассчетСебестоимости Тогда
				Если Объект.РасширеннаяНастройка Тогда
					НовыйЭлемент = Элементы.Добавить(ТекИмя + "ПервичныйВидЦен", Тип("ПолеФормы"), НовГруппа);       
					НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
					НовыйЭлемент.ПутьКДанным = "Цены." + ТекИмя + "ПервичныйВидЦен";
					НовыйЭлемент.Заголовок = "Первичный вид цен";
					НовыйЭлемент.Ширина = 5;
					НовыйЭлемент.ТолькоПросмотр = Истина;
					
					НовыйЭлемент = Элементы.Добавить(ТекИмя + "НаценкаРуб", Тип("ПолеФормы"), НовГруппа);       
					НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
					НовыйЭлемент.ПутьКДанным = "Цены." + ТекИмя + "НаценкаРуб";
					НовыйЭлемент.Заголовок = "Наценка, руб (текущая)";
					НовыйЭлемент.Ширина = 5;
					НовыйЭлемент.ТолькоПросмотр = Истина;
					
					НовыйЭлемент = Элементы.Добавить(ТекИмя + "ПервичнаяЦенаПрошлая", Тип("ПолеФормы"), НовГруппа);       
					НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
					НовыйЭлемент.ПутьКДанным = "Цены." + ТекИмя + "ПервичнаяЦенаПрошлая";
					НовыйЭлемент.Заголовок = "Первичная цена прошлая";
					НовыйЭлемент.Ширина = 5;
					НовыйЭлемент.ТолькоПросмотр = Истина;
					
					НовыйЭлемент = Элементы.Добавить(ТекИмя + "ПрошлаяЦена", Тип("ПолеФормы"), НовГруппа);       
					НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
					НовыйЭлемент.ПутьКДанным = "Цены." + ТекИмя + "ПрошлаяЦена";
					НовыйЭлемент.Заголовок = "Прошлая цена";
					НовыйЭлемент.Ширина = 5;
					НовыйЭлемент.ТолькоПросмотр = Истина;
				КонецЕсли;
				
				НовыйЭлемент = Элементы.Добавить(ТекИмя + "ФиксированнаяЦена", Тип("ПолеФормы"), ?(Объект.РасширеннаяНастройка, НовГруппа, НовГруппаВерхнегоУровня));       
				НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
				НовыйЭлемент.ПутьКДанным = "Цены." + ТекИмя + "ФиксированнаяЦена";
				НовыйЭлемент.Заголовок = "Зафиксирована";
				
				НовыйЭлемент = Элементы.Добавить(ТекИмя + "МРЦ", Тип("ПолеФормы"), ?(Объект.РасширеннаяНастройка, НовГруппа, НовГруппаВерхнегоУровня));       
				НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
				НовыйЭлемент.ПутьКДанным = "Цены." + ТекИмя + "МРЦ";
				НовыйЭлемент.Заголовок = "МРЦ";
				НовыйЭлемент.Ширина = 5;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНоменклатура.Следующий() Цикл
		Если Не ЗначениеЗаполнено(ВыборкаНоменклатура.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;	
		НоваяСтрокаВидовИЦен = НоваяТаблицаВидовИЦен.Добавить();
		НоваяСтрокаВидовИЦен.Номенклатура = ВыборкаНоменклатура.Номенклатура;
		Выборка = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			НоваяСтрокаВидовИЦен.Спецификация = Выборка.Спецификация;
			НоваяСтрокаВидовИЦен["К" + СтрЗаменить(Выборка.ВидЦен.Код, "-", "Т")] = Выборка.Цена;
			Если Не Объект.ВидОперации = Перечисления.ВидыОперацийУстановкаЦен.УстановкаЦенПоставщика Тогда
				Если Объект.РасширеннаяНастройка Тогда
					НоваяСтрокаВидовИЦен["К" + СтрЗаменить(Выборка.ВидЦен.Код, "-", "Т") + "ПервичныйВидЦен"] = Выборка.ПервичныйВидЦен;
					НоваяСтрокаВидовИЦен["К" + СтрЗаменить(Выборка.ВидЦен.Код, "-", "Т") + "Наценка"] = Выборка.Наценка;
					//НоваяСтрокаВидовИЦен["К" + СтрЗаменить(Выборка.ВидЦен.Код, "-", "Т") + "НаценкаПоУмолчанию"] = Выборка.НаценкаПоУмолчанию;
					НоваяСтрокаВидовИЦен["К" + СтрЗаменить(Выборка.ВидЦен.Код, "-", "Т") + "НаценкаРуб"] = Выборка.НаценкаРуб;
					НоваяСтрокаВидовИЦен["К" + СтрЗаменить(Выборка.ВидЦен.Код, "-", "Т") + "ПервичнаяЦена"] = Выборка.ПервичнаяЦена;
					НоваяСтрокаВидовИЦен["К" + СтрЗаменить(Выборка.ВидЦен.Код, "-", "Т") + "ПрошлаяЦена"] = Выборка.ПрошлаяЦена;
					НоваяСтрокаВидовИЦен["К" + СтрЗаменить(Выборка.ВидЦен.Код, "-", "Т") + "ПервичнаяЦенаПрошлая"] = Выборка.ПервичнаяЦенаПрошлая;
				КонецЕсли;
				НоваяСтрокаВидовИЦен["К" + СтрЗаменить(Выборка.ВидЦен.Код, "-", "Т") + "ФиксированнаяЦена"] = Выборка.ФиксированнаяЦена;
				НоваяСтрокаВидовИЦен["К" + СтрЗаменить(Выборка.ВидЦен.Код, "-", "Т") + "МРЦ"] = Выборка.МРЦ;
			КонецЕсли;
			//НоваяСтрокаВидовИЦен.ТекКодВидаЦен = "К" + СтрЗаменить(Выборка.ВидЦен.Код, "-", "Т");
		КонецЦикла;	
	КонецЦикла;	
	
	Если ЕстьРассчетСебестоимости Тогда
		Элементы.ЦеныСпецификация.Видимость = Истина;
	КонецЕсли;	
	
	Цены.Очистить();
	ЗначениеВРеквизитФормы(НоваяТаблицаВидовИЦен, "Цены");
	
КонецПроцедуры	

&НаКлиенте
Процедура ВидыЦенУстанавливатьПриИзменении(Элемент)
	
	ТекДанные = Элементы.ВидыЦен.ТекущиеДанные;
	Если Не ТекДанные = Неопределено Тогда
		Если ТекДанные.Устанавливать Тогда
			СтрокиВидов = Объект.ВидыЦен.НайтиСтроки(Новый Структура("ВидЦены", ТекДанные.ВидЦены));
			Если СтрокиВидов.Количество() = 0 Тогда
				СтрокаВидовЦен = Объект.ВидыЦен.Добавить();
				СтрокаВидовЦен.ВидЦены = ТекДанные.ВидЦены;
			КонецЕсли;	
		Иначе
			СтрокиВидов = Объект.ВидыЦен.НайтиСтроки(Новый Структура("ВидЦены", ТекДанные.ВидЦены));
			Если СтрокиВидов.Количество() <> 0 Тогда
				Для Каждого СтрокаВидов Из СтрокиВидов Цикл
					Объект.ВидыЦен.Удалить(СтрокаВидов);
				КонецЦикла;	
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	
	Объект.ВидыЦен.Сортировать("ВидЦены");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПереключенияСтраниц(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВидыЦен Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаУстановкаЦен;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаУстановкаЦен Тогда	
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВидыЦен;
	КонецЕсли;	
	
	ПереключениеМеждуСтраницами();
	
КонецПроцедуры	

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьТЧОбъектаЦены(ТекущийОбъект, Истина);
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧОбъектаЦены(ТекОбъект, ЭтоЗаписьВБазу = Ложь)
	
	ТекОбъект.Цены.Очистить();
	
	ТаблицаЦен = РеквизитФормыВЗначение("Цены");
	
	Для Каждого СтрокаЦен Из ТаблицаЦен Цикл
		Для Каждого Колонка Из ТаблицаЦен.Колонки Цикл
			ТекНоменклатура = СтрокаЦен.Номенклатура;
			ТекСпецификация = СтрокаЦен.Спецификация;
			Если Колонка.Имя = "Номенклатура" Тогда
				Продолжить;
			ИначеЕсли Колонка.Имя = "Спецификация" Тогда
				Продолжить;
			ИначеЕсли СтрНайти(Колонка.Имя, "ПервичныйВидЦен") <> 0 Тогда
				Продолжить;
			ИначеЕсли СтрНайти(Колонка.Имя, "Наценка") <> 0 Тогда
				Продолжить;	
			ИначеЕсли СтрНайти(Колонка.Имя, "ПервичнаяЦена") <> 0 Тогда
				Продолжить;		
			ИначеЕсли СтрНайти(Колонка.Имя, "ПрошлаяЦена") <> 0 Тогда
				Продолжить;		
			ИначеЕсли СтрНайти(Колонка.Имя, "ПервичнаяЦенаПрошлая") <> 0 Тогда
				Продолжить;		
			ИначеЕсли СтрНайти(Колонка.Имя, "ФиксированнаяЦена") <> 0 Тогда
				Продолжить;	
			ИначеЕсли СтрНайти(Колонка.Имя, "МРЦ") <> 0 Тогда
				Продолжить;
			ИначеЕсли СтрНайти(Колонка.Имя, "ТекКодВидаЦен") <> 0 Тогда
				Продолжить;
			Иначе
				ТекЦена = СтрокаЦен[Колонка.Имя];
				Если Не ЗначениеЗаполнено(ТекЦена) И ЭтоЗаписьВБазу Тогда
					Продолжить;
				Иначе	
					НоваяСтрокаЦен = ТекОбъект.Цены.Добавить();
					НоваяСтрокаЦен.Номенклатура = ТекНоменклатура;
					НоваяСтрокаЦен.Спецификация = ТекСпецификация;
					НоваяСтрокаЦен.ВидЦены = Справочники.ВидыЦен.НайтиПоКоду(СтрЗаменить(СтрЗаменить(Колонка.Имя, "Т", "-"), "К", ""));
					НоваяСтрокаЦен.Цена = ТекЦена;
					Если Не Объект.ВидОперации = Перечисления.ВидыОперацийУстановкаЦен.УстановкаЦенПоставщика Тогда
						Если Объект.РасширеннаяНастройка И Объект.Ссылка.РасширеннаяНастройка Тогда
							НоваяСтрокаЦен.ПервичныйВидЦен = СтрокаЦен[Колонка.Имя + "ПервичныйВидЦен"];
							НоваяСтрокаЦен.Наценка = СтрокаЦен[Колонка.Имя + "Наценка"];
							//НоваяСтрокаЦен.НаценкаПоУмолчанию = СтрокаЦен[Колонка.Имя + "НаценкаПоУмолчанию"];
							НоваяСтрокаЦен.НаценкаРуб = СтрокаЦен[Колонка.Имя + "НаценкаРуб"];
							НоваяСтрокаЦен.ПервичнаяЦена = СтрокаЦен[Колонка.Имя + "ПервичнаяЦена"];
							НоваяСтрокаЦен.ПрошлаяЦена = СтрокаЦен[Колонка.Имя + "ПрошлаяЦена"];
							НоваяСтрокаЦен.ПервичнаяЦенаПрошлая = СтрокаЦен[Колонка.Имя + "ПервичнаяЦенаПрошлая"];
						КонецЕсли;
						НоваяСтрокаЦен.ФиксированнаяЦена = СтрокаЦен[Колонка.Имя + "ФиксированнаяЦена"];
						НоваяСтрокаЦен.МРЦ = СтрокаЦен[Колонка.Имя + "МРЦ"];
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимость();
	
	Если Объект.Цены.Количество() > 0 Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаУстановкаЦен;
	Иначе
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВидыЦен;
	КонецЕсли;	
	
	ПереключениеМеждуСтраницами();
	
	//Установим условное оформление
	//ОформляемоеПоле = "Список";
	//ПутьКДанным = "Список.СтатусОбработки";
	//
	//УсловноеОформлениеКД = Форма.УсловноеОформление;
	//	
	//ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
	//ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	//ЭлементУсловногоОформления.Использование = Истина;
	//ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЗапрещенноеПравоДоступа);
	//
	//ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	//ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ОформляемоеПоле);
	//
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
	//	ЭлементУсловногоОформления.Отбор,
	//	ПутьКДанным,
	//	Перечисления.СтатусыОбработкиВозвратаИзТорговогоЗалаЕГАИС.ПередаетсяВЕГАИС,
	//	ВидСравненияКомпоновкиДанных.Равно,
	//	ПредставлениеЭлемента,
	//	Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключениеМеждуСтраницами()

	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВидыЦен Тогда
		Элементы.КомандаПереключенияСтраниц.Заголовок = "Перейти к установке цен ->";
		ЗаполнитьВидыЦен();
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаУстановкаЦен Тогда
		Элементы.КомандаПереключенияСтраниц.Заголовок = "<- Перейти к выбору видов цен";
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийУстановкаЦен.УстановкаЦенПоставщика") Тогда
			Элементы.ЦеныЗагрузитьЦеныИзExcel.Видимость = Ложь;	
		Иначе
			Элементы.ЦеныЗагрузитьИзExel.Видимость = Ложь;			
		КонецЕсли;
		ЗаполнитьЦены();
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьВидимость()
	
	Элементы.Контрагент.Видимость = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийУстановкаЦен.УстановкаЦенПоставщика") И (Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВидыЦен));
	Элементы.СодатьНовыйВидЦенПоставщика.Видимость = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийУстановкаЦен.УстановкаЦенПоставщика");
	Элементы.РаширеннаяНастройка.Видимость = Не (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийУстановкаЦен.УстановкаЦенПоставщика"));
	//Элементы.ВидыЦенНастроитьВидыЦен.Видимость = Не Объект.УстановкаЦенПоставщика;
	
	ЗаполнитьВидыЦен();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьЗависимыеЦеныНаСервере()
	
	ЗаполнитьТЧОбъектаЦены(Объект);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.ВидЦены,
	|	ЦеныНоменклатурыСрезПоследних.Цена,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Наценка,
	|	ЦеныНоменклатурыСрезПоследних.ФиксированнаяЦена,
	|	ЦеныНоменклатурыСрезПоследних.Предприятие,
	|	ЦеныНоменклатурыСрезПоследних.Подразделение
	|ПОМЕСТИТЬ ВТ_ТочныеЦены
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Период,
	|			Номенклатура В (&СписокНоменклатуры)
	|				И Предприятие = &Предприятие
	|				И Подразделение = &Подразделение) КАК ЦеныНоменклатурыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТочныеЦены.ВидЦены,
	|	ВТ_ТочныеЦены.Цена,
	|	ВТ_ТочныеЦены.Номенклатура,
	|	ВТ_ТочныеЦены.Наценка,
	|	ВТ_ТочныеЦены.ФиксированнаяЦена,
	|	ВТ_ТочныеЦены.Предприятие КАК Предприятие,
	|	ВТ_ТочныеЦены.Подразделение КАК Подразделение
	|ПОМЕСТИТЬ ВТ_ЦеныСПодразделениемВИерархии
	|ИЗ
	|	ВТ_ТочныеЦены КАК ВТ_ТочныеЦены
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.ВидЦены,
	|	ЦеныНоменклатурыСрезПоследних.Цена,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Наценка,
	|	ЦеныНоменклатурыСрезПоследних.ФиксированнаяЦена,
	|	ЦеныНоменклатурыСрезПоследних.Предприятие,
	|	ЦеныНоменклатурыСрезПоследних.Подразделение
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Период,
	|			Номенклатура В (&СписокНоменклатуры)
	|				И Предприятие = &Предприятие
	|				И Подразделение В ИЕРАРХИИ (&Подразделение)) КАК ЦеныНоменклатурыСрезПоследних
	|ГДЕ
	|	НЕ ЦеныНоменклатурыСрезПоследних.Номенклатура В
	|				(ВЫБРАТЬ
	|					ВТ_ТочныеЦены.Номенклатура
	|				ИЗ
	|					ВТ_ТочныеЦены КАК ВТ_ТочныеЦены)
	|	И НЕ ЦеныНоменклатурыСрезПоследних.ВидЦены В
	|				(ВЫБРАТЬ
	|					ВТ_ТочныеЦены.ВидЦены
	|				ИЗ
	|					ВТ_ТочныеЦены КАК ВТ_ТочныеЦены)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЦеныСПодразделениемВИерархии.Номенклатура,
	|	ВТ_ЦеныСПодразделениемВИерархии.ВидЦены,
	|	ВТ_ЦеныСПодразделениемВИерархии.Цена,
	|	ВТ_ЦеныСПодразделениемВИерархии.ВидЦены.ЦенаПоставщика КАК ЦенаПоставщика,
	|	ВЫБОР
	|		КОГДА НоменклатураПоставщикаСрезПоследних.Номенклатура ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОсновнойПоставщик,
	|	ВТ_ЦеныСПодразделениемВИерархии.Наценка КАК Наценка,
	|	ВТ_ЦеныСПодразделениемВИерархии.ФиксированнаяЦена
	|ИЗ
	|	ВТ_ЦеныСПодразделениемВИерархии КАК ВТ_ЦеныСПодразделениемВИерархии
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураПоставщика.СрезПоследних(
	|				&Период,
	|				Номенклатура В (&СписокНоменклатуры)
	|					И Предприятие = &Предприятие
	|					И Подразделение = &Подразделение) КАК НоменклатураПоставщикаСрезПоследних
	|		ПО ВТ_ЦеныСПодразделениемВИерархии.Номенклатура = НоменклатураПоставщикаСрезПоследних.Номенклатура
	|			И ВТ_ЦеныСПодразделениемВИерархии.ВидЦены.Поставщик = НоменклатураПоставщикаСрезПоследних.Контрагент
	|			И ВТ_ЦеныСПодразделениемВИерархии.Предприятие = НоменклатураПоставщикаСрезПоследних.Предприятие
	|			И ВТ_ЦеныСПодразделениемВИерархии.Подразделение = НоменклатураПоставщикаСрезПоследних.Подразделение";
	Запрос.УстановитьПараметр("Период", ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()));
	Запрос.УстановитьПараметр("Предприятие", Объект.Предприятие);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Запрос.УстановитьПараметр("СписокНоменклатуры", Объект.Цены.Выгрузить(, "Номенклатура").ВыгрузитьКолонку("Номенклатура"));
	
	ТаблицаЦенНоменклатуры = Запрос.Выполнить().Выгрузить();
	
	Если ЕстьРассчетСебестоимости Тогда
		ТаблицаПоСпецификациям  = УстановитьМатериалыПоСпецификации(Цены.Выгрузить(, "Номенклатура, Спецификация"), Объект.Дата, Объект.Предприятие, Объект.Подразделение);
		Для Каждого СтрокаЦен Из Объект.Цены Цикл
			СтрокиСпецификаций = ТаблицаПоСпецификациям.НайтиСтроки(Новый Структура("Продукция", СтрокаЦен.Номенклатура));
			ЦенаПродукции = 0;
			Для Каждого СтрокаПоСпецификациям Из СтрокиСпецификаций Цикл
				ЦенаПродукции = ЦенаПродукции + СтрокаПоСпецификациям.Себестоимость;
			КонецЦикла;
			СтрокиУстановленныхРанееЦен = ТаблицаЦенНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура, ВидЦены", СтрокаЦен.Номенклатура, СтрокаЦен.ВидЦены));
			Наценка = 0;
			Для Каждого СтрокаУстановленныхРанееЦен Из СтрокиУстановленныхРанееЦен Цикл
				Наценка = СтрокаУстановленныхРанееЦен.Наценка;
			КонецЦикла;
			Если Наценка = 0 Тогда
				Наценка = СтрокаЦен.ВидЦены.Наценка;
			КонецЕсли;	
			СтрокаЦен.ПервичнаяЦена = ЦенаПродукции;
			СтрокаЦен.Цена = ЦенаПродукции*(1+Наценка/100);
			СтрокаЦен.Наценка = Наценка;
			СтрокаЦен.НаценкаРуб  = СтрокаЦен.Цена - СтрокаЦен.ПервичнаяЦена;
		КонецЦикла;
	Иначе	
		ТаблицаНоменклатур = Объект.Цены.Выгрузить(, "Номенклатура");
		ТаблицаНоменклатур.Свернуть("Номенклатура");
		
		ТаблицаЦенОбъекта = Объект.Цены.Выгрузить();
		
		Для Каждого СтрокаНоменклатур Из ТаблицаНоменклатур Цикл
			ТаблицаЦен = Объект.Цены.НайтиСтроки(Новый Структура("Номенклатура", СтрокаНоменклатур.Номенклатура));
			Для Каждого СтрокаЦен Из ТаблицаЦен Цикл
				СтруктураЦен = УстановитьЦены(СтрокаЦен.Номенклатура, СтрокаЦен.ВидЦены, ТаблицаЦенНоменклатуры, ТаблицаЦенОбъекта);
				СтрокаЦен.Цена = СтруктураЦен.Цена;
				СтрокаЦен.ПервичныйВидЦен = СтруктураЦен.ПервичныйВидЦен;
				СтрокаЦен.Наценка = СтруктураЦен.Наценка;
				СтрокаЦен.НаценкаПоУмолчанию = СтруктураЦен.Наценка;
				СтрокаЦен.НаценкаРуб  = СтруктураЦен.НаценкаРуб;
				СтрокаЦен.ПервичнаяЦена = СтруктураЦен.ПервичнаяЦена;
				СтрокаЦен.ФиксированнаяЦена = СтруктураЦен.ФиксированнаяЦена;
			КонецЦикла;	
		КонецЦикла;
	КонецЕсли;
	
	//Округлим цены по методу округления
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЦен.ВидЦены,
	|	ТаблицаЦен.Цена,
	|	ТаблицаЦен.Номенклатура
	|ПОМЕСТИТЬ ВТ_ТаблицаЦен
	|ИЗ
	|	&ТаблицаЦен КАК ТаблицаЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаЦен.ВидЦены,
	|	ВТ_ТаблицаЦен.Цена,
	|	ВТ_ТаблицаЦен.Номенклатура,
	|	ЕСТЬNULL(ПараметрыОкругленияЦенТаблицаОкруглений.Округление, 90) КАК Округление
	|ИЗ
	|	ВТ_ТаблицаЦен КАК ВТ_ТаблицаЦен
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПараметрыОкругленияЦен.ТаблицаОкруглений КАК ПараметрыОкругленияЦенТаблицаОкруглений
	|		ПО ВТ_ТаблицаЦен.ВидЦены = ПараметрыОкругленияЦенТаблицаОкруглений.Ссылка.ВидЦены
	|			И ВТ_ТаблицаЦен.Цена <= ПараметрыОкругленияЦенТаблицаОкруглений.ЦенаДо
	|			И ВТ_ТаблицаЦен.Цена >= ПараметрыОкругленияЦенТаблицаОкруглений.ЦенаОт";
	Запрос.УстановитьПараметр("ТаблицаЦен", Объект.Цены.Выгрузить());
	ТаблицаОкруглений = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаЦенОбъекта Из Объект.Цены Цикл
		Если СтрокаЦенОбъекта.ФиксированнаяЦена Тогда
			Продолжить;
		КонецЕсли;	
		СтрокиОкругления = ТаблицаОкруглений.НайтиСтроки(Новый Структура("ВидЦены, Цена, Номенклатура", СтрокаЦенОбъекта.ВидЦены, СтрокаЦенОбъекта.Цена, СтрокаЦенОбъекта.Номенклатура));
		Если СтрокиОкругления.Количество() > 1 Тогда
			Если Цел(СтрокаЦенОбъекта.Цена) < СтрокаЦенОбъекта.Цена Тогда
				Для Каждого СтрокаОкругления Из СтрокиОкругления Цикл
					Округление = СтрокаОкругления.Округление/100;
					Если СтрокаЦенОбъекта.Цена - Цел(СтрокаЦенОбъекта.Цена) <= Округление Тогда
						СтрокаЦенОбъекта.Цена = Цел(СтрокаЦенОбъекта.Цена) + Округление;
						Прервать;						
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;
		ИначеЕсли СтрокиОкругления.Количество() = 1 Тогда
			Округление = СтрокиОкругления[0].Округление/100;
			Если Округление = 0.1 Тогда
				Если СтрокаЦенОбъекта.Цена > Окр(СтрокаЦенОбъекта.Цена, 1) Тогда
					СтрокаЦенОбъекта.Цена = Окр(СтрокаЦенОбъекта.Цена, 1) + 0.1;
				Иначе	
					СтрокаЦенОбъекта.Цена = Окр(СтрокаЦенОбъекта.Цена, 1);
				КонецЕсли;	
			Иначе
				Если Цел(СтрокаЦенОбъекта.Цена) < СтрокаЦенОбъекта.Цена Тогда
					СтрокаЦенОбъекта.Цена = Цел(СтрокаЦенОбъекта.Цена) + Округление;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	
	
	ЗаполнитьЦены();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановитьЦены(Номенклатура, ВидЦены, ТаблицаЦенНоменклатуры, ОбъектЦены)

	СтруктураВозврата = Новый Структура("ПервичныйВидЦен, Цена, Наценка, НаценкаРуб, ПервичнаяЦена, ФиксированнаяЦена");
	
	Если ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаДругойВидЦен Или ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаЦенуПоступления Тогда
		Если ВидЦены.БазовыйВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаДругойВидЦен Или ВидЦены.БазовыйВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаЦенуПоступления Тогда
			ПолученнаяЦена = УстановитьЦены(Номенклатура, ВидЦены.БазовыйВидЦены, ТаблицаЦенНоменклатуры, ОбъектЦены).Цена;
			СтрокиТекНаценки = ТаблицаЦенНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура, ВидЦены", Номенклатура, ВидЦены));
			СтруктураВозврата.ПервичныйВидЦен = ВидЦены.БазовыйВидЦены;
			Если СтрокиТекНаценки.Количество() > 0 Тогда
				ТекНаценка = СтрокиТекНаценки[0].Наценка;
			Иначе	
				Если ВидЦены.РасширеннаяНастройкаНаценки Тогда
					ТекНаценка = ВидЦены.Наценка;
					Для Каждого СтрокаРасширенныхнастроек Из ВидЦены.РасширенныеНастройки Цикл
						Если Номенклатура = СтрокаРасширенныхнастроек.Номенклатура Или Номенклатура.ПринадлежитЭлементу(СтрокаРасширенныхнастроек.Номенклатура) Тогда
							ТекНаценка = СтрокаРасширенныхнастроек.Наценка;
							Прервать;
						КонецЕсли;	
					КонецЦикла;
				Иначе
					ТекНаценка = ВидЦены.Наценка;
				КонецЕсли;
			КонецЕсли;
			СтруктураВозврата.Цена = ПолученнаяЦена + ТекНаценка;
			СтруктураВозврата.Наценка = Окр(ТекНаценка/ПолученнаяЦена, 2)*100;
			СтруктураВозврата.НаценкаРуб = ТекНаценка;
			Возврат СтруктураВозврата;
		Иначе
			ПолученнаяЦена = УстановитьЦены(Номенклатура, ВидЦены.БазовыйВидЦены, ТаблицаЦенНоменклатуры, ОбъектЦены).Цена;
			СтрокиТекНаценки = ТаблицаЦенНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура, ВидЦены", Номенклатура, ВидЦены));
			СтруктураВозврата.ПервичныйВидЦен = ВидЦены.БазовыйВидЦены;
			Если СтрокиТекНаценки.Количество() > 0 Тогда
				ТекНаценка = СтрокиТекНаценки[0].Наценка;
			Иначе	
				Если ВидЦены.РасширеннаяНастройкаНаценки Тогда
					ТекНаценка = ВидЦены.Наценка;
					Для Каждого СтрокаРасширенныхнастроек Из ВидЦены.РасширенныеНастройки Цикл
						Если Номенклатура = СтрокаРасширенныхнастроек.Номенклатура Или Номенклатура.ПринадлежитЭлементу(СтрокаРасширенныхнастроек.Номенклатура) Тогда
							ТекНаценка = СтрокаРасширенныхнастроек.Наценка;
							Прервать;
						КонецЕсли;	
					КонецЦикла;
				Иначе
					ТекНаценка = ВидЦены.Наценка;
				КонецЕсли;
			КонецЕсли;
			СтруктураВозврата.Цена = ПолученнаяЦена + ТекНаценка;
			СтруктураВозврата.Наценка = Окр(ТекНаценка/ПолученнаяЦена, 2)*100;
			СтруктураВозврата.НаценкаРуб = ТекНаценка;
			Возврат СтруктураВозврата;
		КонецЕсли;
	ИначеЕсли ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ Тогда
		Если ВидЦены.ВидЗаданияЦеныПоДаннымИБ = Перечисления.ВидыЗаданияЦенПоДаннымИБ.МаксимальнаяЦенаПоставщика Тогда
			СтрокиТаблицыЦен = ТаблицаЦенНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура, ЦенаПоставщика", Номенклатура, Истина));
			МаксимальнаяЦена = 0;
			Для Каждого СтрокаТаблицыЦен Из СтрокиТаблицыЦен Цикл
				МаксимальнаяЦена = Макс(СтрокаТаблицыЦен.Цена, МаксимальнаяЦена);	
			КонецЦикла;
			СтруктураВозврата.Цена = МаксимальнаяЦена;
			Возврат СтруктураВозврата;
		ИначеЕсли ВидЦены.ВидЗаданияЦеныПоДаннымИБ = Перечисления.ВидыЗаданияЦенПоДаннымИБ.МинимальнаяЦенаПоставщика Тогда
			СтрокиТаблицыЦен = ТаблицаЦенНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура, ЦенаПоставщика", Номенклатура, Истина));
			МинимальнаяЦена = ТаблицаЦенНоменклатуры.Итог("Цена");
			Для Каждого СтрокаТаблицыЦен Из СтрокиТаблицыЦен Цикл
				МинимальнаяЦена = Мин(СтрокаТаблицыЦен.Цена, МинимальнаяЦена);	
			КонецЦикла;	
			СтруктураВозврата.Цена = ?(МинимальнаяЦена = ТаблицаЦенНоменклатуры.Итог("Цена"), 0, МинимальнаяЦена);
			Возврат СтруктураВозврата;
		ИначеЕсли ВидЦены.ВидЗаданияЦеныПоДаннымИБ = Перечисления.ВидыЗаданияЦенПоДаннымИБ.СредняяЦенаПоставщика Тогда
			СтрокиТаблицыЦен = ТаблицаЦенНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура, ЦенаПоставщика", Номенклатура, Истина));
			Сумма = 0;
			Количество = 0;
			Для Каждого СтрокаТаблицыЦен Из СтрокиТаблицыЦен Цикл
				Сумма = Сумма + СтрокаТаблицыЦен.Цена;
				Количество = Количество + 1; 
			КонецЦикла;
			СтруктураВозврата.Цена = ?(Количество = 0, 0, Окр(Сумма/Количество, 3));
			Возврат СтруктураВозврата;
		ИначеЕсли ВидЦены.ВидЗаданияЦеныПоДаннымИБ = Перечисления.ВидыЗаданияЦенПоДаннымИБ.НаценкаНаАктуальнуюЦенуПоставщика Тогда
			СтрокиТаблицыЦен = ТаблицаЦенНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура, ЦенаПоставщика, ОсновнойПоставщик", Номенклатура, Истина, Истина));
			СтрокиТекНаценки = ТаблицаЦенНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура, ВидЦены", Номенклатура, ВидЦены));
			Для Каждого СтрокаТаблицыЦен Из СтрокиТаблицыЦен Цикл
				ПолученнаяЦена = УстановитьЦены(Номенклатура, СтрокаТаблицыЦен.ВидЦены, ТаблицаЦенНоменклатуры, ОбъектЦены).Цена;
				Если СтрокиТекНаценки.Количество() > 0 Тогда
					ТекНаценка = СтрокиТекНаценки[0].Наценка;
					ТекФиксация = СтрокиТекНаценки[0].ФиксированнаяЦена;
				Иначе	
					ТекФиксация = Ложь;
					Если ВидЦены.РасширеннаяНастройкаНаценки Тогда
						ТекНаценка = ВидЦены.Наценка;
						Для Каждого СтрокаРасширенныхнастроек Из ВидЦены.РасширенныеНастройки Цикл
							Если Номенклатура = СтрокаРасширенныхнастроек.Номенклатура Или Номенклатура.ПринадлежитЭлементу(СтрокаРасширенныхнастроек.Номенклатура) Тогда
								ТекНаценка = СтрокаРасширенныхнастроек.Наценка;
								Прервать;
							КонецЕсли;	
						КонецЦикла;
					Иначе	
						ТекНаценка = ВидЦены.Наценка;
					КонецЕсли;
				КонецЕсли;
				Если ТекФиксация = Истина Тогда
					СтруктураВозврата.Цена = СтрокиТекНаценки[0].Цена;
					СтруктураВозврата.ФиксированнаяЦена = Истина;
				Иначе
					СтруктураВозврата.Цена = ПолученнаяЦена*(1 + ТекНаценка/100);
					СтруктураВозврата.ФиксированнаяЦена = Ложь;
				КонецЕсли;	
				СтруктураВозврата.Наценка = ТекНаценка;
				СтруктураВозврата.НаценкаРуб = СтруктураВозврата.Цена - ПолученнаяЦена;
				СтруктураВозврата.ПервичныйВидЦен = СтрокаТаблицыЦен.ВидЦены;
				СтруктураВозврата.ПервичнаяЦена = ПолученнаяЦена;
				Возврат СтруктураВозврата;
			КонецЦикла;	
		КонецЕсли;	
	Иначе
		ПолучитьЦеныИзРегистра = Ложь;
		СтрокиОбъектЦены = ОбъектЦены.НайтиСтроки(Новый Структура("Номенклатура, ВидЦены", Номенклатура, ВидЦены));
		Если СтрокиОбъектЦены.Количество() = 0 Тогда
			ПолучитьЦеныИзРегистра = Истина;
		Иначе
			ТекЦена = СтрокиОбъектЦены[0].Цена;
			Если ТекЦена = 0 Тогда
				ПолучитьЦеныИзРегистра = Истина;
			Иначе
				СтруктураВозврата.Цена = ТекЦена;
				Возврат СтруктураВозврата;
			КонецЕсли;	
		КонецЕсли;	
		Если ПолучитьЦеныИзРегистра Тогда
			СтрокиТаблицыЦен = ТаблицаЦенНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура, ВидЦены", Номенклатура, ВидЦены));
			Для Каждого СтрокаТаблицыЦен Из СтрокиТаблицыЦен Цикл
				СтруктураВозврата.Цена =  СтрокаТаблицыЦен.Цена;
				Возврат СтруктураВозврата;	
			КонецЦикла;	
			СтруктураВозврата.Цена = 0;
			Возврат СтруктураВозврата;
		КонецЕсли;	
	КонецЕсли;	
	
КонецФункции	

&НаКлиенте
Процедура РассчитатьЗависимыеЦены(Команда)
	
	Ответ = Вопрос("Таблица цен будет автоматически перезаполнена, продолжить?", РежимДиалогаВопрос.ДаНет);
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		РассчитатьЗависимыеЦеныНаСервере();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ЗаполнитьВидыЦен();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзExcel(Команда)
	
	Если Объект.ВидыЦен.Количество() <> 1 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Укажите один вид цен поставщика, по которому вы хотите загрузить прайс-лист";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;	
	
	ПутьКФайлу = ОткрытьФормуМодально("Документ.Д_УстановкаЦенНоменклатуры.Форма.ФормаЗагрузки", Новый Структура("ВидЗагрузки", "ЦеныПоставщика"));
	
	Если ЗначениеЗаполнено(ПутьКФайлу) Тогда
		Данные = Неопределено;
		СоответствиеНоменклатур = Новый Соответствие;
		
		ЧислоСтрок = 0;
		КоличествоСтраниц = 1;
		
		XLSОбъект = Новый COMОбъект("Excel.Application");
		ПодключениеКФайлу(ЧислоСтрок, Данные, XLSОбъект, ПутьКФайлу);
		
		НомерЗаказа = "";
		СтруДок = Новый Структура;
		МассивСтрок = Новый Массив;
		ДатаДок = Неопределено;
		ВремяНачала = ТекущаяДата();
		ОсталосьВремени = 0;
		СкоростьЗагрузки = 0;
		Для счСтроки = 1 по ЧислоСтрок Цикл
			Состояние("Загрузка", счСтроки / ЧислоСтрок * 100);
			СтруктураСтроки = Новый Структура;
			ТекНоменклатура = НайтиНоменклатуру(СтрЗаменить(СтрЗаменить(Данные[0][счСтроки], " ", ""), Символы.НПП, ""));
			Если Не ЗначениеЗаполнено(ТекНоменклатура) Тогда
				Продолжить;
			КонецЕсли;	
			СтруктураСтроки.Вставить("Номенклатура", ТекНоменклатура); 
			СтруктураСтроки.Вставить("Цена", ?(СокрЛП(Данные[2][счСтроки]) = "", 0, Число(Данные[2][счСтроки])));
			СтруктураСтроки.Вставить("ВидЦены", Объект.ВидыЦен[0].ВидЦены); 
			ЗаполнитьЗначенияСвойств(Объект.Цены.Добавить(), СтруктураСтроки);
		КонецЦикла;
		XLSОбъект.Application.Quit();
	КонецЕсли;
	
	ЗаполнитьЦены();
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиНоменклатуру(Номер)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Код = &НомерЯр
	|	И НЕ Номенклатура.ЭтоГруппа";
	Запрос.УстановитьПараметр("НомерЯр", Номер);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;			
	КонецЦикла;
	
	Возврат Справочники.Номенклатура.ПустаяСсылка();
	
КонецФункции	

&НаКлиенте
Процедура ПодключениеКФайлу(ЧислоСтрок, Данные, XLSОбъект = Неопределено, ПутьКФайлу)
	
	Если Не ЗначениеЗаполнено(ПутьКФайлу) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Укажите путь к файлу!";
		Сообщение.Поле = "Файл";
		Сообщение.Сообщить(); 	
		Возврат;
	КонецЕсли;
	
	Если НЕ ПутьКФайлу = Неопределено Тогда
		Если XLSОбъект = Неопределено Тогда
			XLSОбъект = Новый COMОбъект("Excel.Application");
		КонецЕсли;
		XLSОбъект.Visible       = Ложь;
		XLSОбъект.DisplayAlerts = Ложь;
		
		Попытка
			Book = XLSОбъект.Workbooks.Open(ПутьКФайлу, , Истина);
		Исключение
			Сообщить ("Проблемы с подключением к Excel" );
		КонецПопытки;
		
		Лист = Book.Sheets(1);
		КонечнаяСтрока = Лист.Cells.SpecialCells(11).Row;
		ЧислоСтрок = КонечнаяСтрока - 1;
		Область = Лист.Range(Лист.Cells(1,1), Лист.Cells(КонечнаяСтрока,40));	
		Данные = Область.Value.Выгрузить();
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура СодатьНовыйВидЦенПоставщика(Команда)

	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнен контрагент";
		Сообщение.Поле = "Контрагент";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;	
	
	Если Объект.ВидыЦен.Количество() > 0 Или ПроверитьСуществованиеВидаЦен(Объект.Контрагент) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Вид цен поставщика уже существует, если хотите изменить/добавить используйте справочник видов цен!";
		Сообщение.Поле = "ВидыЦен";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;	
		
	НовыйВидЦен = СоздатьНовыйВидЦенПоставщикаНаСервере(Объект.Контрагент);
	СтрокаВидовЦен = Объект.ВидыЦен.Добавить();
	СтрокаВидовЦен.ВидЦены = НовыйВидЦен;
	
	СтрокаВидов = ВидыЦен.Добавить();
	СтрокаВидов.ВидЦены = НовыйВидЦен;
	СтрокаВидов.Устанавливать = Истина;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьНовыйВидЦенПоставщикаНаСервере(Контрагент, Закупочная = Истина)
	
	СпрОбъект = Справочники.ВидыЦен.СоздатьЭлемент();
	СпрОбъект.Поставщик = Контрагент;
	Если Закупочная Тогда
		СпрОбъект.Наименование = "Закупочная";
		СпрОбъект.ЦенаПоставщика = Истина;
	Иначе
		СпрОбъект.Наименование = "Розничная";
		СпрОбъект.ЦенаРеализацииНаКонтрагента = Истина;
	КонецЕсли;	
	СпрОбъект.Записать();
	
	Возврат СпрОбъект.Ссылка;
	
КонецФункции	

&НаКлиенте
Процедура НастроитьВидыЦен(Команда)

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОбновлятьЦеныПоставщикаИзЦеныПоступления", Объект.ОбновлятьЦеныПоставщикаИзЦеныПоступления);
	СтруктураПараметров.Вставить("АвтоматическиОбновлятьЗависимыеЦены", АвтоматическиОбновлятьЗависимыеЦены);
	
	ПереданныеПараметры = ОткрытьФормуМодально("Документ.Д_УстановкаЦенНоменклатуры.Форма.ФормаНастройкиВидовЦен", Новый Структура("СтруктураПараметров", СтруктураПараметров));
	
	Если ПереданныеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ОбновлятьЦеныПоставщикаИзЦеныПоступления = ПереданныеПараметры.ОбновлятьЦеныПоставщикаИзЦеныПоступления;
	АвтоматическиОбновлятьЗависимыеЦены = ПереданныеПараметры.АвтоматическиОбновлятьЗависимыеЦены;
	
	ЗаполнитьВидыЦенПоПараметрамНаСервере(ПереданныеПараметры);
	
	ВидыЦен.Очистить();
	
	Для Каждого СтрокаВидовОбъект Из Объект.ВидыЦен Цикл
		СтрокаВидов = ВидыЦен.Добавить();
		СтрокаВидов.ВидЦены = СтрокаВидовОбъект.ВидЦены;
		СтрокаВидов.Устанавливать = Истина;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВидыЦенПоПараметрамНаСервере(ПереданныеПараметры)

	Объект.ВидыЦен.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	ЦеныНоменклатуры_Поставщика.Номенклатура,
	|	ЦеныНоменклатуры_Поставщика.ВидЦены,
	|	ЦеныНоменклатуры_Поставщика.Контрагент,
	|	ЦеныНоменклатуры_Поставщика.Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Период,
	|			ВидЦены = &ВидЦеныПоступления
	|				И Предприятие = &Предприятие) КАК ЦеныНоменклатуры_Поступления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Период,
	|				Предприятие = &Предприятие
	|					И ВидЦены.ЦенаПоставщика) КАК ЦеныНоменклатуры_Поставщика
	|		ПО ЦеныНоменклатуры_Поступления.Номенклатура = ЦеныНоменклатуры_Поставщика.Номенклатура
	|			И ЦеныНоменклатуры_Поступления.Предприятие = ЦеныНоменклатуры_Поставщика.Предприятие
	|			И ЦеныНоменклатуры_Поступления.Контрагент = ЦеныНоменклатуры_Поставщика.Контрагент
	|			И ЦеныНоменклатуры_Поступления.Цена <> ЦеныНоменклатуры_Поставщика.Цена";
	Запрос.УстановитьПараметр("Период", ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()));
	Запрос.УстановитьПараметр("ВидЦеныПоступления", Справочники.ВидыЦен.ЦенаПоступления);
	Запрос.УстановитьПараметр("Предприятие", Объект.Предприятие);
	
	ТаблицаИзмененныхЦен = Запрос.Выполнить().Выгрузить();
	
	ТаблицаВидовЦен = ТаблицаИзмененныхЦен.Скопировать(, "ВидЦены");
	ТаблицаВидовЦен.Свернуть("ВидЦены");
	МассивЦен = ТаблицаВидовЦен.ВыгрузитьКолонку("ВидЦены");
	
	Для Каждого СтрокаМассива Из МассивЦен Цикл
		СтрокаВидовЦен = Объект.ВидыЦен.Добавить();
		СтрокаВидовЦен.ВидЦены = СтрокаМассива;
	КонецЦикла;	
		
	Если АвтоматическиОбновлятьЗависимыеЦены Тогда
		ЗависимыеЦены = ПолучитьЗависимыеЦены(МассивЦен);
		Для Каждого СтрокаМассива Из ЗависимыеЦены Цикл
			СтрокаВидовЦен = Объект.ВидыЦен.Добавить();
			СтрокаВидовЦен.ВидЦены = СтрокаМассива;
		КонецЦикла;	
	КонецЕсли;
	
	ТаблицаНоменклатур = ТаблицаИзмененныхЦен.Скопировать(, "Номенклатура");
	ТаблицаНоменклатур.Свернуть("Номенклатура");
	Объект.Цены.Очистить();
	Для Каждого СтрокаТаблицыНоменклатуры Из ТаблицаНоменклатур Цикл
		СтрокаЦен = Объект.Цены.Добавить();	
		СтрокаЦен.Номенклатура = СтрокаТаблицыНоменклатуры.Номенклатура;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗависимыеЦены(МассивЦен)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыЦен.Ссылка
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВидыЦен.СпособЗаданияЦены = ЗНАЧЕНИЕ(Перечисление.СпособыЗаданияЦен.НаценкаНаДругойВидЦен)
	|				ТОГДА ВидыЦен.БазовыйВидЦены В (&ВидыЦен)
	|			КОГДА ВидыЦен.СпособЗаданияЦены = ЗНАЧЕНИЕ(Перечисление.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ)
	|					И (ВидыЦен.ВидЗаданияЦеныПоДаннымИБ = ЗНАЧЕНИЕ(Перечисление.ВидыЗаданияЦенПоДаннымИБ.МаксимальнаяЦенаПоставщика)
	|						ИЛИ ВидыЦен.ВидЗаданияЦеныПоДаннымИБ = ЗНАЧЕНИЕ(Перечисление.ВидыЗаданияЦенПоДаннымИБ.МинимальнаяЦенаПоставщика)
	|						ИЛИ ВидыЦен.ВидЗаданияЦеныПоДаннымИБ = ЗНАЧЕНИЕ(Перечисление.ВидыЗаданияЦенПоДаннымИБ.СредняяЦенаПоставщика))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ";
	Запрос.УстановитьПараметр("ВидыЦен", МассивЦен);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции	

&НаСервере
Процедура ЗаполнитьПоИзмененнымНаСервере()

	МассивВидовЦен = Объект.ВидыЦен.Выгрузить().ВыгрузитьКолонку("ВидЦены");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АссортиментнаяМатрицаСрезПоследних.Номенклатура
	|ПОМЕСТИТЬ ВТ_Ассортимент
	|ИЗ
	|	РегистрСведений.АссортиментнаяМатрица.СрезПоследних(&Период, Предприятие = &Предприятие) КАК АссортиментнаяМатрицаСрезПоследних
	|ГДЕ
	|	АссортиментнаяМатрицаСрезПоследних.ВыведенИзАссортимента = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	АссортиментнаяМатрицаСрезПоследних.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатуры.Номенклатура,
	|	ЦеныНоменклатуры.Цена,
	|	ЦеныНоменклатуры.НаценкаРуб,
	|	ЦеныНоменклатурыПервичные.Цена КАК ПервичнаяЦенаНовая,
	|	ЦеныНоменклатуры.ВидЦены,
	|	ЦеныНоменклатуры.Наценка,
	|	ЦеныНоменклатурыПервичные.ВидЦены КАК ПервичныйВидЦен,
	|	ЦеныНоменклатуры.ПервичнаяЦена
	|ПОМЕСТИТЬ ВТ_ВидыЦен
	|ИЗ
	|	ВТ_Ассортимент КАК ВТ_Ассортимент
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Период,
	|				Предприятие = &Предприятие
	|					И ВидЦены В (&ВидыЦены)
	|					И Подразделение = &Подразделение) КАК ЦеныНоменклатуры
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураПоставщика.СрезПоследних(
	|					&Период,
	|					Предприятие = &Предприятие
	|						И Подразделение = &Подразделение) КАК НоменклатураПоставщикаСрезПоследних
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|						&Период,
	|						Предприятие = &Предприятие
	|							И Подразделение = &Подразделение) КАК ЦеныНоменклатурыПервичные
	|				ПО НоменклатураПоставщикаСрезПоследних.Номенклатура = ЦеныНоменклатурыПервичные.Номенклатура
	|					И НоменклатураПоставщикаСрезПоследних.Контрагент = ЦеныНоменклатурыПервичные.ВидЦены.Поставщик
	|					И (ЦеныНоменклатурыПервичные.ВидЦены.ЦенаПоставщика)
	|					И НоменклатураПоставщикаСрезПоследних.Подразделение = ЦеныНоменклатурыПервичные.Подразделение
	|					И НоменклатураПоставщикаСрезПоследних.Предприятие = ЦеныНоменклатурыПервичные.Предприятие
	|			ПО ЦеныНоменклатуры.Номенклатура = НоменклатураПоставщикаСрезПоследних.Номенклатура
	|				И ЦеныНоменклатуры.Предприятие = НоменклатураПоставщикаСрезПоследних.Предприятие
	|				И ЦеныНоменклатуры.Подразделение = НоменклатураПоставщикаСрезПоследних.Подразделение
	|		ПО ВТ_Ассортимент.Номенклатура = ЦеныНоменклатуры.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ВидыЦен.Номенклатура,
	|	ВТ_ВидыЦен.Цена,
	|	ВТ_ВидыЦен.НаценкаРуб,
	|	ВТ_ВидыЦен.ВидЦены,
	|	ВТ_ВидыЦен.ПервичныйВидЦен,
	|	ВТ_ВидыЦен.Наценка,
	|	ВТ_ВидыЦен.ПервичнаяЦенаНовая КАК ПервичнаяЦена,
	|	ВТ_ВидыЦен.ПервичнаяЦена КАК ПервичнаяЦенаПрошлая
	|ИЗ
	|	ВТ_ВидыЦен КАК ВТ_ВидыЦен
	|ГДЕ
	|	ВТ_ВидыЦен.ПервичнаяЦена <> ВТ_ВидыЦен.ПервичнаяЦенаНовая
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|	NULL,
	|	NULL,
	|	ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка),
	|	ЦеныНоменклатурыСрезПоследних.ВидЦены,
	|	NULL,
	|	NULL,
	|	ЦеныНоменклатурыСрезПоследних.Цена
	|ИЗ
	|	ВТ_Ассортимент КАК ВТ_Ассортимент
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Период,
	|				Предприятие = &Предприятие
	|					И ВидЦены В
	|						(ВЫБРАТЬ
	|							ВТ_ВидыЦен.ПервичныйВидЦен
	|						ИЗ
	|							ВТ_ВидыЦен КАК ВТ_ВидыЦен)
	|					И Подразделение = &Подразделение) КАК ЦеныНоменклатурыСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВидыЦен КАК ВТ_ВидыЦен
	|			ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = ВТ_ВидыЦен.Номенклатура
	|		ПО ВТ_Ассортимент.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|ГДЕ
	|	ЕСТЬNULL(ВТ_ВидыЦен.Цена, 0) = 0";
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	Запрос.УстановитьПараметр("Предприятие", Объект.Предприятие);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Запрос.УстановитьПараметр("ВидыЦены", МассивВидовЦен);
	
	ТаблицаИзмененных = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ВидЦены Из МассивВидовЦен Цикл
		НайденныеСтроки = ТаблицаИзмененных.НайтиСтроки(Новый Структура("ВидЦены", ВидЦены));
		Для Каждого Строка Из НайденныеСтроки Цикл
			СтрокаЦен = Объект.Цены.Добавить();				
			ЗаполнитьЗначенияСвойств(СтрокаЦен, Строка);
			СтрокаЦен.НаценкаРуб = Строка.Цена - Строка.ПервичнаяЦенаПрошлая;
			СтрокаЦен.Наценка = Строка.Наценка;//Окр(СтрокаЦен.НаценкаРуб/Строка.ПервичнаяЦена, 2)*100;
			СтрокаЦен.НаценкаПоУмолчанию = Строка.Наценка;
			СтрокаЦен.ПрошлаяЦена = Строка.Цена;
			СтрокаЦен.Цена = 0;
		КонецЦикла;
		НайденныеСтроки = ТаблицаИзмененных.НайтиСтроки(Новый Структура("ВидЦены", Справочники.ВидыЦен.ПустаяСсылка()));
		Для Каждого Строка Из НайденныеСтроки Цикл
			СтрокаЦен = Объект.Цены.Добавить();	
			СтрокаЦен.ПрошлаяЦена = Строка.Цена;
			СтрокаЦен.Номенклатура = Строка.Номенклатура;
			СтрокаЦен.ВидЦены = ВидЦены;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоИзмененным(Команда)
	
	Если Цены.Количество() > 0 Тогда
		Ответ = Вопрос("Табличная часть не пустая, очистить?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Цены.Очистить();
			Объект.Цены.Очистить();
			ЗаполнитьПоИзмененнымНаСервере();
			ЗаполнитьЦены();
			РассчитатьЗависимыеЦеныНаСервере();
		КонецЕсли;
	Иначе	
		ЗаполнитьПоИзмененнымНаСервере();
		ЗаполнитьЦены();
		РассчитатьЗависимыеЦеныНаСервере();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЦеныИзExcel(Команда)
	
	Если Объект.ВидыЦен.Количество() <> 1 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Укажите один вид цен, по которому вы хотите загрузить наценку";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;	
	
	ПутьКФайлу = ОткрытьФормуМодально("Документ.Д_УстановкаЦенНоменклатуры.Форма.ФормаЗагрузки", Новый Структура("ВидЗагрузки", "РозничныеЦены"));
	
	Если ЗначениеЗаполнено(ПутьКФайлу) Тогда
		Данные = Неопределено;
		СоответствиеНоменклатур = Новый Соответствие;
		
		ЧислоСтрок = 0;
		КоличествоСтраниц = 1;
		
		XLSОбъект = Новый COMОбъект("Excel.Application");
		ПодключениеКФайлу(ЧислоСтрок, Данные, XLSОбъект, ПутьКФайлу);
		
		НомерЗаказа = "";
		СтруДок = Новый Структура;
		МассивСтрок = Новый Массив;
		ДатаДок = Неопределено;
		ВремяНачала = ТекущаяДата();
		ОсталосьВремени = 0;
		СкоростьЗагрузки = 0;
		Для счСтроки = 1 по ЧислоСтрок Цикл
			Состояние("Загрузка", счСтроки / ЧислоСтрок * 100);
			СтруктураСтроки = Новый Структура;
			ТекНоменклатура = НайтиНоменклатуру(СтрЗаменить(СтрЗаменить(Данные[0][счСтроки], " ", ""), Символы.НПП, ""));
			Если Не ЗначениеЗаполнено(ТекНоменклатура) Тогда
				Продолжить;
			КонецЕсли;	
			СтруктураСтроки.Вставить("Номенклатура", ТекНоменклатура); 
			СтруктураСтроки.Вставить("Цена", ?(СокрЛП(Данные[2][счСтроки]) = "", 0, Число(Данные[2][счСтроки])));
			СтруктураСтроки.Вставить("НаценкаРуб", ?(СокрЛП(Данные[3][счСтроки]) = "", 0, Число(Данные[3][счСтроки])));
			СтруктураСтроки.Вставить("Наценка", ?(СокрЛП(Данные[4][счСтроки]) = "", 0, Число(Данные[4][счСтроки])));
			СтруктураСтроки.Вставить("ФиксированнаяЦена", ?(НРег(СокрЛП(Данные[5][счСтроки])) = "да", Истина, Ложь));
			СтруктураСтроки.Вставить("ПрошлаяЦена", СтруктураСтроки.Цена - СтруктураСтроки.НаценкаРуб);
			СтруктураСтроки.Вставить("ВидЦены", Объект.ВидыЦен[0].ВидЦены); 
			СтруктураСтроки.Вставить("МРЦ", ?(СокрЛП(Данные[6][счСтроки]) = "", 0, Число(Данные[6][счСтроки])));
			ЗаполнитьЗначенияСвойств(Объект.Цены.Добавить(), СтруктураСтроки);
		КонецЦикла;
		XLSОбъект.Application.Quit();
	КонецЕсли;
	
	ЗаполнитьЦены();
	
КонецПроцедуры

&НаСервере
Процедура сабПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	БюджетныйНаСервере.ДействияПриСозданииФормыДокумента(ЭтаФорма);
		
	Если Объект.Ссылка.Пустая() Тогда
		Если Не (РольДоступна("сабУправлениеАссортиментом") Или РольДоступна("сабПолныйПросмотрОперативныйУчет") Или БюджетныйНаСервере.РольАдминаДоступнаСервер()) Тогда
			Объект.ВидОперации = Перечисления.ВидыОперацийУстановкаЦен.УстановкаЦенПоставщика;
			Элементы.ВидОперации.Видимость = Ложь;
		Иначе
			Объект.ВидОперации = Перечисления.ВидыОперацийУстановкаЦен.УстановкаЦен;
		КонецЕсли;	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЦеныНоменклатураПриИзменении(Элемент)
	
	Если ЕстьРассчетСебестоимости Тогда
		ТекДанные = Элементы.Цены.ТекущиеДанные;
		ТекДанные.Спецификация = ПолучитьСпецификацию(ТекДанные.Номенклатура);
	КонецЕсли;
	//СтруктураДанныехПоНоменклатуре = ПолучитьСтруктуруДанныхПоНоменклатуре(ТекДанные.Номенклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныЦенаПриИзменении(Элемент)
	
	ТекДанные = Элементы.Цены.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		Если Объект.РасширеннаяНастройка Тогда
			ТекИдентификатор = Элемент.Имя;
			Если ЗначениеЗаполнено(ТекДанные[ТекИдентификатор + "ПервичнаяЦена"]) Тогда
				ТекДанные[ТекИдентификатор + "Наценка"] = (ТекДанные[ТекИдентификатор] - ТекДанные[ТекИдентификатор + "ПервичнаяЦена"])*100/ТекДанные[ТекИдентификатор + "ПервичнаяЦена"];
			КонецЕсли;
			ТекДанные[ТекИдентификатор + "НаценкаРуб"] = ТекДанные[ТекИдентификатор] - ТекДанные[ТекИдентификатор + "ПервичнаяЦена"];
		КонецЕсли;
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ЦеныНаценкаПриИзменении(Элемент)
	
	ТекДанные = Элементы.Цены.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		ТекИдентификатор = СтрЗаменить(Элемент.Имя, "Наценка", "");
		ТекДанные[ТекИдентификатор] = ТекДанные[ТекИдентификатор + "ПервичнаяЦена"] * (1 + ТекДанные[ТекИдентификатор + "Наценка"]/100);
		ТекДанные[ТекИдентификатор + "НаценкаРуб"] = ТекДанные[ТекИдентификатор] - ТекДанные[ТекИдентификатор + "ПервичнаяЦена"];
	КонецЕсли;	
	
КонецПроцедуры

Функция ПолучитьСтруктуруДанныхПоНоменклатуре(ТекНоменклатура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НоменклатураПоставщикаСрезПоследних.Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК ПервичнаяЦена,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ПервичныйВидЦены
	|ИЗ
	|	РегистрСведений.НоменклатураПоставщика.СрезПоследних(&Период, Номенклатура В (&СписокНоменклатур)) КАК НоменклатураПоставщикаСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Период,
	|				Предприятие = &Предприятие
	|					И Номенклатура В (&СписокНоменклатур)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО НоменклатураПоставщикаСрезПоследних.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И НоменклатураПоставщикаСрезПоследних.Контрагент = ЦеныНоменклатурыСрезПоследних.ВидЦены.Поставщик";
	
КонецФункции	

&НаСервереБезКонтекста
Функция ПроверитьСуществованиеВидаЦен(ТекКонтрагент, Закупочная = Истина)

	Запрос = Новый Запрос;
	Если Закупочная Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыЦен.Код
		|ИЗ
		|	Справочник.ВидыЦен КАК ВидыЦен
		|ГДЕ
		|	ВидыЦен.Наименование = ""Закупочная""
		|	И ВидыЦен.Поставщик = &Поставщик
		|	И ВидыЦен.ЦенаПоставщика";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыЦен.Код
		|ИЗ
		|	Справочник.ВидыЦен КАК ВидыЦен
		|ГДЕ
		|	ВидыЦен.Наименование = ""Розничная""
		|	И ВидыЦен.Поставщик = &Поставщик
		|	И ВидыЦен.ЦенаРеализацииНаКонтрагента";
	КонецЕсли;
	Запрос.УстановитьПараметр("Поставщик", ТекКонтрагент);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСпецификацию(ТекНоменклатура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Спецификации.Ссылка
	|ИЗ
	|	Справочник.Спецификации КАК Спецификации
	|ГДЕ
	|	Спецификации.Продукция = &Продукция
	|	И Спецификации.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыСпецификаций.ГотоваяПродукция)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Спецификации.Дата УБЫВ";
	Запрос.УстановитьПараметр("Продукция", ТекНоменклатура);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
	Возврат Справочники.Спецификации.ПустаяСсылка();
	
КонецФункции

&НаСервереБезКонтекста
Функция УстановитьМатериалыПоСпецификации(ТекТаблицаСпецификаций, ТекДата, ТекПредприятие, ТекПодразделение)
	
	ТаблицаМатериалов = Новый ТаблицаЗначений;
	ТаблицаМатериалов.Колонки.Добавить("Коэффициент");
	ТаблицаМатериалов.Колонки.Добавить("Количество");
	ТаблицаМатериалов.Колонки.Добавить("Материал");
	ТаблицаМатериалов.Колонки.Добавить("Продукция");
	ТаблицаМатериалов.Колонки.Добавить("Себестоимость");
		
	ЗапросПоСпецификациям = Новый Запрос;
	ЗапросПоСпецификациям.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(Спецификации.Дата) КАК Дата,
	|	Спецификации.Продукция
	|ПОМЕСТИТЬ ВТ_ПоследнииСпецификации
	|ИЗ
	|	Справочник.Спецификации КАК Спецификации
	|ГДЕ
	|	НЕ Спецификации.Ссылка.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыСпецификаций.Разруб)
	|	И НЕ Спецификации.Ссылка.ПометкаУдаления
	|	И НЕ Спецификации.Ссылка В (&СписокСпецификаций)
	|	И Спецификации.Дата <= &Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	Спецификации.Продукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпецификацииСостав.Ссылка КАК Спецификация,
	|	СпецификацииСостав.Ссылка.Продукция,
	|	СпецификацииСостав.Материал,
	|	СпецификацииСостав.Ссылка.Дата КАК Дата,
	|	СпецификацииСостав.МассаБрутто,
	|	СпецификацииСостав.ОтходыПриХолоднойОбработке,
	|	СпецификацииСостав.МассаНетто,
	|	СпецификацииСостав.ПотериПриТепловойОбработке,
	|	СпецификацииСостав.Ссылка.Выход
	|ИЗ
	|	ВТ_ПоследнииСпецификации КАК ВТ_ПоследнииСпецификации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Спецификации.Состав КАК СпецификацииСостав
	|		ПО ВТ_ПоследнииСпецификации.Дата = СпецификацииСостав.Ссылка.Дата
	|			И ВТ_ПоследнииСпецификации.Продукция = СпецификацииСостав.Ссылка.Продукция
	|ГДЕ
	|	НЕ СпецификацииСостав.Ссылка.ПометкаУдаления
	|	И НЕ СпецификацииСостав.Ссылка.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыСпецификаций.Разруб)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СпецификацииСостав.Ссылка,
	|	СпецификацииСостав.Ссылка.Продукция,
	|	СпецификацииСостав.Материал,
	|	СпецификацииСостав.Ссылка.Дата,
	|	СпецификацииСостав.МассаБрутто,
	|	СпецификацииСостав.ОтходыПриХолоднойОбработке,
	|	СпецификацииСостав.МассаНетто,
	|	СпецификацииСостав.ПотериПриТепловойОбработке,
	|	СпецификацииСостав.Ссылка.Выход
	|ИЗ
	|	Справочник.Спецификации.Состав КАК СпецификацииСостав
	|ГДЕ
	|	СпецификацииСостав.Ссылка В(&СписокСпецификаций)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	ЗапросПоСпецификациям.УстановитьПараметр("СписокСпецификаций", ТекТаблицаСпецификаций.ВыгрузитьКолонку("Спецификация"));
	ЗапросПоСпецификациям.УстановитьПараметр("Дата", ТекДата); 
	РезультатЗапроса = ЗапросПоСпецификациям.Выполнить();
	ТаблицаСпецификаций = РезультатЗапроса.Выгрузить();
	
	ПервоначальноеКоличество = 1;
	Для Каждого ТекСтрокаСпецификаций Из ТекТаблицаСпецификаций Цикл
		ТекСпецификация = ТекСтрокаСпецификаций.Спецификация;
		Если ЗначениеЗаполнено(ТекСпецификация) Тогда
			НайденныйСоставСпецификаций = ТаблицаСпецификаций.НайтиСтроки(Новый Структура("Спецификация", ТекСпецификация));
			Для Каждого СоставСпецификаций Из НайденныйСоставСпецификаций Цикл
				ТекКоэф = СоставСпецификаций.МассаБрутто / СоставСпецификаций.Выход;
				//находим подчиненные спецификации
				СоставПодчиненнойСпецификации = ТаблицаСпецификаций.НайтиСтроки(Новый Структура("Продукция", СоставСпецификаций.Материал));
				Если СоставПодчиненнойСпецификации.Количество() > 0 Тогда
					Для Каждого СтрокаПодчиненнойСпецификации Из СоставПодчиненнойСпецификации Цикл
						СоставПодчиненнойСпецификации2 = ТаблицаСпецификаций.НайтиСтроки(Новый Структура("Продукция", СтрокаПодчиненнойСпецификации.Материал));
						Если СоставПодчиненнойСпецификации2.Количество() > 0 Тогда
							Для Каждого СтрокаПодчиненнойСпецификации2 Из СоставПодчиненнойСпецификации2 Цикл
								СоставПодчиненнойСпецификации3 = ТаблицаСпецификаций.НайтиСтроки(Новый Структура("Продукция", СтрокаПодчиненнойСпецификации2.Материал));
								Если СоставПодчиненнойСпецификации3.Количество() > 0 Тогда
									Для Каждого СтрокаПодчиненнойСпецификации3 Из СоставПодчиненнойСпецификации3 Цикл
										СоставПодчиненнойСпецификации4 = ТаблицаСпецификаций.НайтиСтроки(Новый Структура("Продукция", СтрокаПодчиненнойСпецификации3.Материал));
										Если СоставПодчиненнойСпецификации4.Количество() > 0 Тогда
											Для Каждого СтрокаПодчиненнойСпецификации4 Из СоставПодчиненнойСпецификации4 Цикл
												СтрокаТаблМатериалов = ТаблицаМатериалов.Добавить();
												СтрокаТаблМатериалов.Коэффициент = ТекКоэф * СтрокаПодчиненнойСпецификации.МассаБрутто * СтрокаПодчиненнойСпецификации2.МассаБрутто * СтрокаПодчиненнойСпецификации3.МассаБрутто * СтрокаПодчиненнойСпецификации4.МассаБрутто / (СтрокаПодчиненнойСпецификации.Выход * СтрокаПодчиненнойСпецификации2.Выход * СтрокаПодчиненнойСпецификации3.Выход * СтрокаПодчиненнойСпецификации4.Выход);
												СтрокаТаблМатериалов.Количество = ПервоначальноеКоличество * СтрокаТаблМатериалов.Коэффициент;
												СтрокаТаблМатериалов.Материал = СтрокаПодчиненнойСпецификации4.Материал;
												СтрокаТаблМатериалов.Продукция = ТекСтрокаСпецификаций.Номенклатура;
											КонецЦикла;	
										Иначе
											СтрокаТаблМатериалов = ТаблицаМатериалов.Добавить();
											СтрокаТаблМатериалов.Коэффициент = ТекКоэф * СтрокаПодчиненнойСпецификации.МассаБрутто * СтрокаПодчиненнойСпецификации2.МассаБрутто * СтрокаПодчиненнойСпецификации3.МассаБрутто / (СтрокаПодчиненнойСпецификации.Выход * СтрокаПодчиненнойСпецификации2.Выход * СтрокаПодчиненнойСпецификации3.Выход);
											СтрокаТаблМатериалов.Количество = ПервоначальноеКоличество * СтрокаТаблМатериалов.Коэффициент;
											СтрокаТаблМатериалов.Материал = СтрокаПодчиненнойСпецификации3.Материал;
											СтрокаТаблМатериалов.Продукция = ТекСтрокаСпецификаций.Номенклатура;
										КонецЕсли;
									КонецЦикла;	
								Иначе
									СтрокаТаблМатериалов = ТаблицаМатериалов.Добавить();
									СтрокаТаблМатериалов.Коэффициент = ТекКоэф * СтрокаПодчиненнойСпецификации.МассаБрутто * СтрокаПодчиненнойСпецификации2.МассаБрутто / (СтрокаПодчиненнойСпецификации.Выход * СтрокаПодчиненнойСпецификации2.Выход);
									СтрокаТаблМатериалов.Количество = ПервоначальноеКоличество * СтрокаТаблМатериалов.Коэффициент;
									СтрокаТаблМатериалов.Материал = СтрокаПодчиненнойСпецификации2.Материал;
									СтрокаТаблМатериалов.Продукция = ТекСтрокаСпецификаций.Номенклатура;
								КонецЕсли;
							КонецЦикла;
						Иначе
							СтрокаТаблМатериалов = ТаблицаМатериалов.Добавить();	
							СтрокаТаблМатериалов.Коэффициент = ТекКоэф * СтрокаПодчиненнойСпецификации.МассаБрутто / СтрокаПодчиненнойСпецификации.Выход;
							СтрокаТаблМатериалов.Количество = ПервоначальноеКоличество * СтрокаТаблМатериалов.Коэффициент;
							СтрокаТаблМатериалов.Материал = СтрокаПодчиненнойСпецификации.Материал;
							СтрокаТаблМатериалов.Продукция = ТекСтрокаСпецификаций.Номенклатура;
						КонецЕсли;
					КонецЦикла;
				Иначе
					СтрокаТаблМатериалов = ТаблицаМатериалов.Добавить();
					СтрокаТаблМатериалов.Коэффициент = ТекКоэф;
					СтрокаТаблМатериалов.Количество = СтрокаТаблМатериалов.Коэффициент * ПервоначальноеКоличество;
					СтрокаТаблМатериалов.Материал = СоставСпецификаций.Материал;
					СтрокаТаблМатериалов.Продукция = ТекСтрокаСпецификаций.Номенклатура;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.Счет10 КАК Счет
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&СписокНом)";
	Запрос.УстановитьПараметр("СписокНом", ТаблицаМатериалов.ВыгрузитьКолонку("Материал"));
	
	Результат = Запрос.Выполнить();
	МассивСчетов = Результат.Выгрузить().ВыгрузитьКолонку("Счет");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетныйОстатки.Субконто1 КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА УчетныйОстатки.КоличествоОстаток = 0
	|			ТОГДА 0
	|		ИНАЧЕ УчетныйОстатки.СуммаОстаток / УчетныйОстатки.КоличествоОстаток
	|	КОНЕЦ КАК Цена,
	|	УчетныйОстатки.Счет
	|ИЗ
	|	РегистрБухгалтерии.Учетный.Остатки(
	|			&ПозицияДокумента,
	|			Счет В (&ВыбСчет),
	|			,
	|			Предприятия = &ВыбПредприятие
	|				И Субконто1 В (&ВыбТовары)
	|				И Подразделение В (&Подразделение)) КАК УчетныйОстатки";
	Запрос.УстановитьПараметр("ВыбТовары", ТаблицаМатериалов.ВыгрузитьКолонку("Материал"));
	Запрос.УстановитьПараметр("ПозицияДокумента", ТекДата);
	Запрос.УстановитьПараметр("ВыбПредприятие", ТекПредприятие);
	Запрос.УстановитьПараметр("Подразделение", ТекПодразделение);
	Запрос.УстановитьПараметр("ВыбСчет", МассивСчетов);
	
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаМатериалов Из ТаблицаМатериалов Цикл
		СтрокаМатериалов.Себестоимость = 0;
		НайденныеСтрокиОстатков = ТаблицаОстатков.НайтиСтроки(Новый Структура("Номенклатура", СтрокаМатериалов.Материал));
		Для Каждого НайденнаяСтрокаОстатков Из НайденныеСтрокиОстатков Цикл
			СтрокаМатериалов.Себестоимость = СтрокаМатериалов.Количество * НайденнаяСтрокаОстатков.Цена;
		КонецЦикла;	
	КонецЦикла;	
	
	Возврат ТаблицаМатериалов;
	
КонецФункции

&НаКлиенте
Процедура СоздатьНовыйВидЦенРозницыНаКонтрагента(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийУстановкаЦен.УстановкаЦенПоставщика") Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнен контрагент";
		Сообщение.Поле = "Контрагент";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;	
	
	Если Объект.ВидыЦен.Количество() > 0 Или ПроверитьСуществованиеВидаЦен(Объект.Контрагент, Ложь) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Вид цен поставщика уже существует, если хотите изменить/добавить используйте справочник видов цен!";
		Сообщение.Поле = "ВидыЦен";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;	
		
	НовыйВидЦен = СоздатьНовыйВидЦенПоставщикаНаСервере(Объект.Контрагент, Ложь);
	СтрокаВидовЦен = Объект.ВидыЦен.Добавить();
	СтрокаВидовЦен.ВидЦены = НовыйВидЦен;
	
	СтрокаВидов = ВидыЦен.Добавить();
	СтрокаВидов.ВидЦены = НовыйВидЦен;
	СтрокаВидов.Устанавливать = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура РаширеннаяНастройкаПриИзменении(Элемент)
	
	Если Модифицированность Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("РаширеннаяНастройкаПриИзмененииЗавершение", ЭтотОбъект), "Для переключения режимов нужно записать документ. Записать?", РежимДиалогаВопрос.ОКОтмена);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РаширеннаяНастройкаПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ЭтотОбъект.Записать();
		ЗаполнитьЦены();
	Иначе
		Объект.РасширеннаяНастройка = БюджетныйНаСервере.ВернутьРеквизит(Объект.Ссылка, "РасширеннаяНастройка");	
	КонецЕсли;	
	
КонецПроцедуры

#Область ПодборТоваров
&НаКлиенте
Процедура ПодборТовары(Команда)
    ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор, РежимВыбора", Ложь, Истина, Истина);
    ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаСписка", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);    
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Строка =Цены.Добавить();
	Строка.Номенклатура = ВыбранноеЗначение[0];	
КонецПроцедуры
#КонецОбласти 

