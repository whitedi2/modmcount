&НаКлиенте
Перем ТекСтрокаСписка Экспорт;
&НаКлиенте
Перем ТекСтрокаСпискаСамовывоз Экспорт;
&НаКлиенте
Перем ТекСтрокаСпискаПеремещение Экспорт;
&НаКлиенте
Перем ТекСтр Экспорт;


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//ТолькоВесовыеПозиции = Истина;
	РежимСборки = "По заказам";
	Сортировка = "Наименование";
	Элементы.ТЧЗаказы.Видимость = Ложь;
	Элементы.ТабличнаяЧасть.Видимость = Истина;
	
	Список.Параметры.УстановитьЗначениеПараметра("ДоступныеПредприятия", ПараметрыСеанса.ДоступныеПредприятия);
	СписокЗаказов.Параметры.УстановитьЗначениеПараметра("ДоступныеПредприятия", ПараметрыСеанса.ДоступныеПредприятия);
	СписокЗаказовПеремещение.Параметры.УстановитьЗначениеПараметра("ДоступныеПредприятия", ПараметрыСеанса.ДоступныеПредприятия);
	
	БюджетныйНаСервере.ДействияПриСозданииФормыДокумента(ЭтаФорма);
	
	Если РольДоступна("сабКладовщик") Тогда
		ТолькоОткрытые = Истина;
		ТолькоОткрытыеЗаказы = Истина;
		ТолькоОткрытыеЗаказыПеремещения = Истина;
	КонецЕсли;
	
	Список.Параметры.УстановитьЗначениеПараметра("ТолькоОткрытые", ТолькоОткрытые);
	СписокЗаказов.Параметры.УстановитьЗначениеПараметра("ТолькоОткрытыеЗаказы", ТолькоОткрытыеЗаказы);
	СписокЗаказовПеремещение.Параметры.УстановитьЗначениеПараметра("ТолькоОткрытыеЗаказы", ТолькоОткрытыеЗаказы);
	Список.Параметры.УстановитьЗначениеПараметра("ТолькоВесовыеПозиции", ТолькоВесовыеПозиции);
	Список.Параметры.УстановитьЗначениеПараметра("ТолькоБезСерий", ТолькоБезСерий);
	СписокЗаказов.Параметры.УстановитьЗначениеПараметра("ТолькоВесовыеПозиции", ТолькоВесовыеПозиции);
	СписокЗаказов.Параметры.УстановитьЗначениеПараметра("ТолькоБезСерий", ТолькоБезСерий);
	СписокЗаказовПеремещение.Параметры.УстановитьЗначениеПараметра("ТолькоВесовыеПозиции", ТолькоВесовыеПозиции);
	СписокЗаказовПеремещение.Параметры.УстановитьЗначениеПараметра("ТолькоБезСерий", ТолькоБезСерий);
	Список.Параметры.УстановитьЗначениеПараметра("Склад", Склад);
	СписокЗаказов.Параметры.УстановитьЗначениеПараметра("Склад", Склад);
	СписокЗаказовПеремещение.Параметры.УстановитьЗначениеПараметра("Склад", Склад);
	
	ВидимостьПредприятия = БюджетныйНаСервере.ПолучитьПредприятия().Количество() > 1;
	
	ДатаОтгрузки = ТекущаяДата();
	Список.Параметры.УстановитьЗначениеПараметра("Дата1", НачалоДня(ДатаОтгрузки));
	СписокЗаказов.Параметры.УстановитьЗначениеПараметра("Дата1", НачалоДня(ДатаОтгрузки));
	СписокЗаказовПеремещение.Параметры.УстановитьЗначениеПараметра("Дата1", НачалоДня(ДатаОтгрузки));
	Список.Параметры.УстановитьЗначениеПараметра("Дата2", КонецДня(ДатаОтгрузки));
	СписокЗаказов.Параметры.УстановитьЗначениеПараметра("Дата2", КонецДня(ДатаОтгрузки));
	СписокЗаказовПеремещение.Параметры.УстановитьЗначениеПараметра("Дата2", КонецДня(ДатаОтгрузки));
	
	СписокЗаказов.Параметры.УстановитьЗначениеПараметра("Самовывоз", Справочники.СпособыДоставки.Самовывоз);
	
	РасчитатьЗаголовки();
	
	УстановитьСортировкуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСортировкуНаСервере()
	
	Если Сортировка = "Наименование" Тогда
		ТЧСтрокиЗаказов.Сортировать("Номенклатура");
	Иначе
		ТЧСтрокиЗаказов.Сортировать("НомерСтроки");
	КонецЕсли;
	
	Элементы.ТЧСтрокиЗаказовСортировкаНаименование.Пометка = Сортировка = "Наименование";
	Элементы.ТЧСтрокиЗаказовСортировкаНомерСтроки.Пометка = Не Сортировка = "Наименование";
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	Если Элементы.ТЧСтрокиЗаказовПрименить.Доступность И НЕ ТекСтрокаСписка = Неопределено И НЕ Элементы.Список.ТекущаяСтрока = ТекСтрокаСписка Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("СписокПриАктивизацииСтрокиЗавершение", ЭтаФорма), "При переходе на другую строку изменения не будут сохранены. Продолжить?", РежимДиалогаВопрос.ДаНет);
	Иначе
		Если ТекСтрокаСписка = Неопределено Тогда
			Элементы.ТЧСтрокиЗаказовПрименить.Доступность = Ложь;
			ЗаполнитьДанныеМЛ();
			Если РежимСборки = "По заказам" Тогда
				ТабличнаяЧастьПриАктивизацииСтроки(Элемент);	
			Иначе	
				ТЧЗаказыПриАктивизацииСтроки(Элемент);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтрокиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Элементы.ТЧСтрокиЗаказовПрименить.Доступность = Ложь;
		ЗаполнитьДанныеМЛ();
		ТекСтрокаСписка = Неопределено;
		Если РежимСборки = "По заказам" Тогда
			ТабличнаяЧастьПриАктивизацииСтроки(Неопределено);	
		Иначе	
			ТЧЗаказыПриАктивизацииСтроки(Неопределено);
		КонецЕсли;
	Иначе
		Элементы.Список.ТекущаяСтрока = ТекСтрокаСписка;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеМЛ(Заказ = Неопределено, Реализация = Неопределено)
	
	ТЧЗаказы.Очистить();
	ТЧСтрокиЗаказов.Очистить();
	ТекЗаказ = Элементы.Список.ТекущаяСтрока;
	Если ТекЗаказ = Неопределено И Заказ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	//	Запрос.Текст = "ВЫБРАТЬ
	//|	сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента КАК ЗаказРеализация
	//|ПОМЕСТИТЬ ЗаказыРеализацииМЛ
	//|ИЗ
	//|	Документ.сабМаршрутныйЛист.ТабличнаяЧасть КАК сабМаршрутныйЛистТабличнаяЧасть
	//|ГДЕ
	//|	сабМаршрутныйЛистТабличнаяЧасть.Ссылка = &Ссылка
	//|	И &Заказ = НЕОПРЕДЕЛЕНО
	
	//|ОБЪЕДИНИТЬ ВСЕ
	
	//|ВЫБРАТЬ
	//|	сабМаршрутныйЛистТабличнаяЧасть.Реализация
	//|ИЗ
	//|	Документ.сабМаршрутныйЛист.ТабличнаяЧасть КАК сабМаршрутныйЛистТабличнаяЧасть
	//|ГДЕ
	//|	сабМаршрутныйЛистТабличнаяЧасть.Ссылка = &Ссылка
	//|	И &Заказ = НЕОПРЕДЕЛЕНО
	
	//|ОБЪЕДИНИТЬ ВСЕ
	
	//|ВЫБРАТЬ
	//|	&Заказ
	
	//|ОБЪЕДИНИТЬ ВСЕ
	
	//|ВЫБРАТЬ
	//|	&Реализация
	//|;
	
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	//|	ЕСТЬNULL(РеализацияТоваровУслугСерииНоменклатуры.Количество, РеализацияТоваровУслугТовары.Количество) КАК Количество,
	//|	РеализацияТоваровУслугТовары.Ссылка.Заказ КАК Заказ,
	//|	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтрокиРеализации,
	//|	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
	//|	РеализацияТоваровУслугСерииНоменклатуры.ДатаПроизводства КАК ДатаПроизводства,
	//|	РеализацияТоваровУслугСерииНоменклатуры.СерияНоменклатуры КАК СерияНоменклатуры
	//|ПОМЕСТИТЬ Реализации
	//|ИЗ
	//|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.СерииНоменклатуры КАК РеализацияТоваровУслугСерииНоменклатуры
	//|		ПО РеализацияТоваровУслугТовары.НомерСтроки = РеализацияТоваровУслугСерииНоменклатуры.НомерСтрокиРеализации
	//|			И РеализацияТоваровУслугТовары.Номенклатура = РеализацияТоваровУслугСерииНоменклатуры.Номенклатура
	//|			И РеализацияТоваровУслугТовары.Ссылка = РеализацияТоваровУслугСерииНоменклатуры.Ссылка
	//|ГДЕ
	//|	РеализацияТоваровУслугТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
	
	//|ОБЪЕДИНИТЬ ВСЕ
	
	//|ВЫБРАТЬ
	//|	УЧ_РеализацияТовары.Номенклатура,
	//|	ЕСТЬNULL(УЧ_РеализацияСерииНоменклатуры.Количество, УЧ_РеализацияТовары.Количество),
	//|	УЧ_РеализацияТовары.Ссылка.ДокОснование,
	//|	УЧ_РеализацияТовары.НомерСтроки,
	//|	УЧ_РеализацияТовары.Ссылка,
	//|	УЧ_РеализацияСерииНоменклатуры.ДатаПроизводства,
	//|	УЧ_РеализацияСерииНоменклатуры.СерияНоменклатуры
	//|ИЗ
	//|	Документ.УЧ_Реализация.Товары КАК УЧ_РеализацияТовары
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_Реализация.СерииНоменклатуры КАК УЧ_РеализацияСерииНоменклатуры
	//|		ПО УЧ_РеализацияТовары.Ссылка = УЧ_РеализацияСерииНоменклатуры.Ссылка
	//|			И УЧ_РеализацияТовары.НомерСтроки = УЧ_РеализацияСерииНоменклатуры.НомерСтрокиРеализации
	//|			И УЧ_РеализацияТовары.Номенклатура = УЧ_РеализацияСерииНоменклатуры.Номенклатура
	//|ГДЕ
	//|	УЧ_РеализацияТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
	
	//|ОБЪЕДИНИТЬ ВСЕ
	
	//|ВЫБРАТЬ
	//|	РозничнаяПродажаТовары.Номенклатура,
	//|	ЕСТЬNULL(РозничнаяПродажаСерииНоменклатуры.Количество, РозничнаяПродажаТовары.Количество),
	//|	РозничнаяПродажаТовары.Ссылка.Заказ,
	//|	РозничнаяПродажаТовары.НомерСтроки,
	//|	РозничнаяПродажаТовары.Ссылка,
	//|	РозничнаяПродажаСерииНоменклатуры.ДатаПроизводства,
	//|	РозничнаяПродажаСерииНоменклатуры.СерияНоменклатуры
	//|ИЗ
	//|	Документ.РозничнаяПродажа.Товары КАК РозничнаяПродажаТовары
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа.СерииНоменклатуры КАК РозничнаяПродажаСерииНоменклатуры
	//|		ПО РозничнаяПродажаТовары.Ссылка = РозничнаяПродажаСерииНоменклатуры.Ссылка
	//|			И РозничнаяПродажаТовары.НомерСтроки = РозничнаяПродажаСерииНоменклатуры.НомерСтрокиРеализации
	//|			И РозничнаяПродажаТовары.Номенклатура = РозничнаяПродажаСерииНоменклатуры.Номенклатура
	//|ГДЕ
	//|	РозничнаяПродажаТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
	
	//|ОБЪЕДИНИТЬ ВСЕ
	
	//|ВЫБРАТЬ
	//|	ПередачаТоваровТовары.Номенклатура,
	//|	ЕСТЬNULL(ПередачаТоваровСерииНоменклатуры.Количество, ПередачаТоваровТовары.Количество),
	//|	ПередачаТоваровТовары.Ссылка.Заказ,
	//|	ПередачаТоваровТовары.НомерСтроки,
	//|	ПередачаТоваровТовары.Ссылка,
	//|	ПередачаТоваровСерииНоменклатуры.ДатаПроизводства,
	//|	ПередачаТоваровСерииНоменклатуры.СерияНоменклатуры
	//|ИЗ
	//|	Документ.ПередачаТоваров.Товары КАК ПередачаТоваровТовары
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаТоваров.СерииНоменклатуры КАК ПередачаТоваровСерииНоменклатуры
	//|		ПО ПередачаТоваровТовары.Ссылка = ПередачаТоваровСерииНоменклатуры.Ссылка
	//|			И ПередачаТоваровТовары.НомерСтроки = ПередачаТоваровСерииНоменклатуры.НомерСтрокиРеализации
	//|			И ПередачаТоваровТовары.Номенклатура = ПередачаТоваровСерииНоменклатуры.Номенклатура
	//|ГДЕ
	//|	ПередачаТоваровТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
	
	//|ОБЪЕДИНИТЬ ВСЕ
	
	//|ВЫБРАТЬ
	//|	ПеремещениеТоваровТовары.Номенклатура,
	//|	ЕСТЬNULL(ПеремещениеТоваровСерииНоменклатуры.Количество, ПеремещениеТоваровТовары.Количество),
	//|	ПеремещениеТоваровТовары.Ссылка.Заказ,
	//|	ПеремещениеТоваровТовары.НомерСтроки,
	//|	ПеремещениеТоваровТовары.Ссылка,
	//|	ПеремещениеТоваровСерииНоменклатуры.ДатаПроизводства,
	//|	ПеремещениеТоваровСерииНоменклатуры.СерияНоменклатуры
	//|ИЗ
	//|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.СерииНоменклатуры КАК ПеремещениеТоваровСерииНоменклатуры
	//|		ПО ПеремещениеТоваровТовары.НомерСтроки = ПеремещениеТоваровСерииНоменклатуры.НомерСтрокиРеализации
	//|			И ПеремещениеТоваровТовары.Номенклатура = ПеремещениеТоваровСерииНоменклатуры.Номенклатура
	//|			И ПеремещениеТоваровТовары.Ссылка = ПеремещениеТоваровСерииНоменклатуры.Ссылка
	//|ГДЕ
	//|	ПеремещениеТоваровТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
	
	//|ОБЪЕДИНИТЬ ВСЕ
	
	//|ВЫБРАТЬ
	//|	УЧ_ПеремещениеТоваровТабличнаяЧасть.Номенклатура,
	//|	ЕСТЬNULL(УЧ_ПеремещениеТоваровСерииНоменклатуры.Количество, УЧ_ПеремещениеТоваровТабличнаяЧасть.Количество),
	//|	УЧ_ПеремещениеТоваровТабличнаяЧасть.Ссылка.ДокОснование,
	//|	УЧ_ПеремещениеТоваровТабличнаяЧасть.НомерСтроки,
	//|	УЧ_ПеремещениеТоваровТабличнаяЧасть.Ссылка,
	//|	УЧ_ПеремещениеТоваровСерииНоменклатуры.ДатаПроизводства,
	//|	УЧ_ПеремещениеТоваровСерииНоменклатуры.СерияНоменклатуры
	//|ИЗ
	//|	Документ.УЧ_ПеремещениеТоваров.ТабличнаяЧасть КАК УЧ_ПеремещениеТоваровТабличнаяЧасть
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_ПеремещениеТоваров.СерииНоменклатуры КАК УЧ_ПеремещениеТоваровСерииНоменклатуры
	//|		ПО УЧ_ПеремещениеТоваровТабличнаяЧасть.Ссылка = УЧ_ПеремещениеТоваровСерииНоменклатуры.Ссылка
	//|			И УЧ_ПеремещениеТоваровТабличнаяЧасть.НомерСтроки = УЧ_ПеремещениеТоваровСерииНоменклатуры.НомерСтрокиРеализации
	//|			И УЧ_ПеремещениеТоваровТабличнаяЧасть.Номенклатура = УЧ_ПеремещениеТоваровСерииНоменклатуры.Номенклатура
	//|ГДЕ
	//|	УЧ_ПеремещениеТоваровТабличнаяЧасть.Ссылка.ПометкаУдаления = ЛОЖЬ
	//|;
	
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ЗаказКлиентаТабличнаяЧасть.Номенклатура КАК Номенклатура,
	//|	ЗаказКлиентаТабличнаяЧасть.Количество КАК КоличествоЗаказ,
	//|	ЗаказКлиентаТабличнаяЧасть.Ссылка.Контрагент КАК Контрагент,
	//|	ЕСТЬNULL(Реализации.Количество, 0) КАК Количество,
	//|	ЗаказКлиентаТабличнаяЧасть.Ссылка.ПодразделениеКонтрагента КАК Точка,
	//|	Реализации.НомерСтрокиРеализации КАК НомерСтрокиРеализации,
	//|	ЗаказКлиентаТабличнаяЧасть.Номенклатура.Весовой КАК НоменклатураВесовой,
	//|	ЗаказКлиентаТабличнаяЧасть.Ссылка КАК ЗаказКлиента,
	//|	ЗаказКлиентаТабличнаяЧасть.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	//|	Реализации.Ссылка КАК Реализация,
	//|	Реализации.ДатаПроизводства КАК ДатаПроизводства,
	//|	Реализации.СерияНоменклатуры КАК СерияНоменклатуры,
	//|	ЗаказКлиентаТабличнаяЧасть.НомерСтроки КАК НомерСтроки
	//|ИЗ
	//|	Документ.ЗаказКлиента.ТабличнаяЧасть КАК ЗаказКлиентаТабличнаяЧасть
	//|		ПРАВОЕ СОЕДИНЕНИЕ Реализации КАК Реализации
	//|		ПО ЗаказКлиентаТабличнаяЧасть.Ссылка = Реализации.Заказ
	//|			И ЗаказКлиентаТабличнаяЧасть.Номенклатура = Реализации.Номенклатура
	//|			И ЗаказКлиентаТабличнаяЧасть.НомерСтроки = Реализации.НомерСтрокиРеализации
	//|ГДЕ
	//|	ЗаказКлиентаТабличнаяЧасть.Ссылка В
	//|			(ВЫБРАТЬ
	//|				ЗаказыРеализацииМЛ.ЗаказРеализация КАК ЗаказРеализация
	//|			ИЗ
	//|				ЗаказыРеализацииМЛ КАК ЗаказыРеализацииМЛ)
	
	//|ОБЪЕДИНИТЬ ВСЕ
	
	//|ВЫБРАТЬ
	//|	ЗаказНаПеремещениеТабличнаяЧасть.Номенклатура,
	//|	ЗаказНаПеремещениеТабличнаяЧасть.Количество,
	//|	ЗаказНаПеремещениеТабличнаяЧасть.Ссылка.Контрагент,
	//|	ЕСТЬNULL(Реализации.Количество, 0),
	//|	NULL,
	//|	Реализации.НомерСтрокиРеализации,
	//|	ЗаказНаПеремещениеТабличнаяЧасть.Номенклатура.Весовой,
	//|	ЗаказНаПеремещениеТабличнаяЧасть.Ссылка,
	//|	ЗаказНаПеремещениеТабличнаяЧасть.Номенклатура.ЕдиницаИзмерения,
	//|	Реализации.Ссылка,
	//|	Реализации.ДатаПроизводства,
	//|	Реализации.СерияНоменклатуры,
	//|	ЗаказНаПеремещениеТабличнаяЧасть.НомерСтроки
	//|ИЗ
	//|	Документ.ЗаказНаПеремещение.ТабличнаяЧасть КАК ЗаказНаПеремещениеТабличнаяЧасть
	//|		ПРАВОЕ СОЕДИНЕНИЕ Реализации КАК Реализации
	//|		ПО ЗаказНаПеремещениеТабличнаяЧасть.Ссылка = Реализации.Заказ
	//|			И ЗаказНаПеремещениеТабличнаяЧасть.Номенклатура = Реализации.Номенклатура
	//|			И ЗаказНаПеремещениеТабличнаяЧасть.НомерСтроки = Реализации.НомерСтрокиРеализации
	//|ГДЕ
	//|	ЗаказНаПеремещениеТабличнаяЧасть.Ссылка В
	//|			(ВЫБРАТЬ
	//|				ЗаказыРеализацииМЛ.ЗаказРеализация КАК ЗаказРеализация
	//|			ИЗ
	//|				ЗаказыРеализацииМЛ КАК ЗаказыРеализацииМЛ)
	
	//|УПОРЯДОЧИТЬ ПО
	//|	НомерСтроки
	//|АВТОУПОРЯДОЧИВАНИЕ";
	
	
	
	
	
	
	Запрос.Текст = "ВЫБРАТЬ
	|	сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента КАК ЗаказРеализация
	|ПОМЕСТИТЬ ЗаказыРеализацииМЛ
	|ИЗ
	|	Документ.сабМаршрутныйЛист.ТабличнаяЧасть КАК сабМаршрутныйЛистТабличнаяЧасть
	|ГДЕ
	|	сабМаршрутныйЛистТабличнаяЧасть.Ссылка = &Ссылка
	|	И &Заказ = НЕОПРЕДЕЛЕНО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	сабМаршрутныйЛистТабличнаяЧасть.Реализация
	|ИЗ
	|	Документ.сабМаршрутныйЛист.ТабличнаяЧасть КАК сабМаршрутныйЛистТабличнаяЧасть
	|ГДЕ
	|	сабМаршрутныйЛистТабличнаяЧасть.Ссылка = &Ссылка
	|	И &Заказ = НЕОПРЕДЕЛЕНО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Заказ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Реализация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(РеализацияТоваровУслугСерииНоменклатуры.Количество, РеализацияТоваровУслугТовары.Количество) КАК Количество,
	|	РеализацияТоваровУслугТовары.Ссылка.Заказ КАК Заказ,
	|	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтрокиРеализации,
	|	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслугСерииНоменклатуры.ДатаПроизводства КАК ДатаПроизводства,
	|	РеализацияТоваровУслугСерииНоменклатуры.СерияНоменклатуры КАК СерияНоменклатуры
	|ПОМЕСТИТЬ Реализации
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.СерииНоменклатуры КАК РеализацияТоваровУслугСерииНоменклатуры
	|		ПО РеализацияТоваровУслугТовары.НомерСтроки = РеализацияТоваровУслугСерииНоменклатуры.НомерСтрокиРеализации
	|			И РеализацияТоваровУслугТовары.Номенклатура = РеализацияТоваровУслугСерииНоменклатуры.Номенклатура
	|			И РеализацияТоваровУслугТовары.Ссылка = РеализацияТоваровУслугСерииНоменклатуры.Ссылка
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УЧ_РеализацияТовары.Номенклатура,
	|	ЕСТЬNULL(УЧ_РеализацияСерииНоменклатуры.Количество, УЧ_РеализацияТовары.Количество),
	|	УЧ_РеализацияТовары.Ссылка.ДокОснование,
	|	УЧ_РеализацияТовары.НомерСтроки,
	|	УЧ_РеализацияТовары.Ссылка,
	|	УЧ_РеализацияСерииНоменклатуры.ДатаПроизводства,
	|	УЧ_РеализацияСерииНоменклатуры.СерияНоменклатуры
	|ИЗ
	|	Документ.УЧ_Реализация.Товары КАК УЧ_РеализацияТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_Реализация.СерииНоменклатуры КАК УЧ_РеализацияСерииНоменклатуры
	|		ПО УЧ_РеализацияТовары.Ссылка = УЧ_РеализацияСерииНоменклатуры.Ссылка
	|			И УЧ_РеализацияТовары.НомерСтроки = УЧ_РеализацияСерииНоменклатуры.НомерСтрокиРеализации
	|			И УЧ_РеализацияТовары.Номенклатура = УЧ_РеализацияСерииНоменклатуры.Номенклатура
	|ГДЕ
	|	УЧ_РеализацияТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РозничнаяПродажаТовары.Номенклатура,
	|	ЕСТЬNULL(РозничнаяПродажаСерииНоменклатуры.Количество, РозничнаяПродажаТовары.Количество),
	|	РозничнаяПродажаТовары.Ссылка.Заказ,
	|	РозничнаяПродажаТовары.НомерСтроки,
	|	РозничнаяПродажаТовары.Ссылка,
	|	РозничнаяПродажаСерииНоменклатуры.ДатаПроизводства,
	|	РозничнаяПродажаСерииНоменклатуры.СерияНоменклатуры
	|ИЗ
	|	Документ.РозничнаяПродажа.Товары КАК РозничнаяПродажаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа.СерииНоменклатуры КАК РозничнаяПродажаСерииНоменклатуры
	|		ПО РозничнаяПродажаТовары.Ссылка = РозничнаяПродажаСерииНоменклатуры.Ссылка
	|			И РозничнаяПродажаТовары.НомерСтроки = РозничнаяПродажаСерииНоменклатуры.НомерСтрокиРеализации
	|			И РозничнаяПродажаТовары.Номенклатура = РозничнаяПродажаСерииНоменклатуры.Номенклатура
	|ГДЕ
	|	РозничнаяПродажаТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПередачаТоваровТовары.Номенклатура,
	|	ЕСТЬNULL(ПередачаТоваровСерииНоменклатуры.Количество, ПередачаТоваровТовары.Количество),
	|	ПередачаТоваровТовары.Ссылка.Заказ,
	|	ПередачаТоваровТовары.НомерСтроки,
	|	ПередачаТоваровТовары.Ссылка,
	|	ПередачаТоваровСерииНоменклатуры.ДатаПроизводства,
	|	ПередачаТоваровСерииНоменклатуры.СерияНоменклатуры
	|ИЗ
	|	Документ.ПередачаТоваров.Товары КАК ПередачаТоваровТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаТоваров.СерииНоменклатуры КАК ПередачаТоваровСерииНоменклатуры
	|		ПО ПередачаТоваровТовары.Ссылка = ПередачаТоваровСерииНоменклатуры.Ссылка
	|			И ПередачаТоваровТовары.НомерСтроки = ПередачаТоваровСерииНоменклатуры.НомерСтрокиРеализации
	|			И ПередачаТоваровТовары.Номенклатура = ПередачаТоваровСерииНоменклатуры.Номенклатура
	|ГДЕ
	|	ПередачаТоваровТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТребованиеНакладнаяМатериалы.Номенклатура,
	|	ЕСТЬNULL(ТребованиеНакладнаяСерииНоменклатуры.Количество, ТребованиеНакладнаяМатериалы.Количество),
	|	ТребованиеНакладнаяМатериалы.Ссылка.Заказ,
	|	ТребованиеНакладнаяМатериалы.НомерСтроки,
	|	ТребованиеНакладнаяМатериалы.Ссылка,
	|	ТребованиеНакладнаяСерииНоменклатуры.ДатаПроизводства,
	|	ТребованиеНакладнаяСерииНоменклатуры.СерияНоменклатуры
	|ИЗ
	|	Документ.ТребованиеНакладная.Материалы КАК ТребованиеНакладнаяМатериалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТребованиеНакладная.СерииНоменклатуры КАК ТребованиеНакладнаяСерииНоменклатуры
	|		ПО ТребованиеНакладнаяМатериалы.Ссылка = ТребованиеНакладнаяСерииНоменклатуры.Ссылка
	|			И ТребованиеНакладнаяМатериалы.НомерСтроки = ТребованиеНакладнаяСерииНоменклатуры.НомерСтрокиРеализации
	|			И ТребованиеНакладнаяМатериалы.Номенклатура = ТребованиеНакладнаяСерииНоменклатуры.Номенклатура
	|ГДЕ
	|	ТребованиеНакладнаяМатериалы.Ссылка.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПеремещениеТоваровТовары.Номенклатура,
	|	ЕСТЬNULL(ПеремещениеТоваровСерииНоменклатуры.Количество, ПеремещениеТоваровТовары.Количество),
	|	ПеремещениеТоваровТовары.Ссылка.Заказ,
	|	ПеремещениеТоваровТовары.НомерСтроки,
	|	ПеремещениеТоваровТовары.Ссылка,
	|	ПеремещениеТоваровСерииНоменклатуры.ДатаПроизводства,
	|	ПеремещениеТоваровСерииНоменклатуры.СерияНоменклатуры
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.СерииНоменклатуры КАК ПеремещениеТоваровСерииНоменклатуры
	|		ПО ПеремещениеТоваровТовары.НомерСтроки = ПеремещениеТоваровСерииНоменклатуры.НомерСтрокиРеализации
	|			И ПеремещениеТоваровТовары.Номенклатура = ПеремещениеТоваровСерииНоменклатуры.Номенклатура
	|			И ПеремещениеТоваровТовары.Ссылка = ПеремещениеТоваровСерииНоменклатуры.Ссылка
	|ГДЕ
	|	ПеремещениеТоваровТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УЧ_ПеремещениеТоваровТабличнаяЧасть.Номенклатура,
	|	ЕСТЬNULL(УЧ_ПеремещениеТоваровСерииНоменклатуры.Количество, УЧ_ПеремещениеТоваровТабличнаяЧасть.Количество),
	|	УЧ_ПеремещениеТоваровТабличнаяЧасть.Ссылка.ДокОснование,
	|	УЧ_ПеремещениеТоваровТабличнаяЧасть.НомерСтроки,
	|	УЧ_ПеремещениеТоваровТабличнаяЧасть.Ссылка,
	|	УЧ_ПеремещениеТоваровСерииНоменклатуры.ДатаПроизводства,
	|	УЧ_ПеремещениеТоваровСерииНоменклатуры.СерияНоменклатуры
	|ИЗ
	|	Документ.УЧ_ПеремещениеТоваров.ТабличнаяЧасть КАК УЧ_ПеремещениеТоваровТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_ПеремещениеТоваров.СерииНоменклатуры КАК УЧ_ПеремещениеТоваровСерииНоменклатуры
	|		ПО УЧ_ПеремещениеТоваровТабличнаяЧасть.Ссылка = УЧ_ПеремещениеТоваровСерииНоменклатуры.Ссылка
	|			И УЧ_ПеремещениеТоваровТабличнаяЧасть.НомерСтроки = УЧ_ПеремещениеТоваровСерииНоменклатуры.НомерСтрокиРеализации
	|			И УЧ_ПеремещениеТоваровТабличнаяЧасть.Номенклатура = УЧ_ПеремещениеТоваровСерииНоменклатуры.Номенклатура
	|ГДЕ
	|	УЧ_ПеремещениеТоваровТабличнаяЧасть.Ссылка.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказКлиентаТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ЗаказКлиентаТабличнаяЧасть.Количество КАК КоличествоЗаказ,
	|	ЗаказКлиентаТабличнаяЧасть.Ссылка.Контрагент КАК Контрагент,
	|	ЗаказКлиентаТабличнаяЧасть.Ссылка.ПодразделениеКонтрагента КАК Точка,
	|	ЗаказКлиентаТабличнаяЧасть.Ссылка КАК ЗаказКлиента,
	|	ЗаказКлиентаТабличнаяЧасть.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ Заказы
	|ИЗ
	|	Документ.ЗаказКлиента.ТабличнаяЧасть КАК ЗаказКлиентаТабличнаяЧасть
	|ГДЕ
	|	ЗаказКлиентаТабличнаяЧасть.Ссылка В
	|			(ВЫБРАТЬ
	|				ЗаказыРеализацииМЛ.ЗаказРеализация КАК ЗаказРеализация
	|			ИЗ
	|				ЗаказыРеализацииМЛ КАК ЗаказыРеализацииМЛ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНаПеремещениеТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ЗаказНаПеремещениеТабличнаяЧасть.Количество КАК КоличествоЗаказ,
	|	ЗаказНаПеремещениеТабличнаяЧасть.Ссылка.Контрагент КАК Контрагент,
	|	ЗаказНаПеремещениеТабличнаяЧасть.Ссылка КАК ЗаказНаПеремещение,
	|	ЗаказНаПеремещениеТабличнаяЧасть.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ЗаказыПеремещение
	|ИЗ
	|	Документ.ЗаказНаПеремещение.ТабличнаяЧасть КАК ЗаказНаПеремещениеТабличнаяЧасть
	|ГДЕ
	|	ЗаказНаПеремещениеТабличнаяЧасть.Ссылка В
	|			(ВЫБРАТЬ
	|				ЗаказыРеализацииМЛ.ЗаказРеализация КАК ЗаказРеализация
	|			ИЗ
	|				ЗаказыРеализацииМЛ КАК ЗаказыРеализацииМЛ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реализации.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(Заказы.КоличествоЗаказ, 0) КАК КоличествоЗаказ,
	|	ЕСТЬNULL(Заказы.Контрагент, Реализации.Заказ.Контрагент) КАК Контрагент,
	|	Реализации.Количество КАК Количество,
	|	ЕСТЬNULL(Заказы.Точка, Реализации.Заказ.ПодразделениеКонтрагента) КАК Точка,
	|	Реализации.НомерСтрокиРеализации КАК НомерСтрокиРеализации,
	|	Реализации.Номенклатура.Весовой КАК НоменклатураВесовой,
	|	ЕСТЬNULL(Заказы.ЗаказКлиента, Реализации.Заказ) КАК ЗаказКлиента,
	|	Реализации.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Реализации.Ссылка КАК Реализация,
	|	Реализации.ДатаПроизводства КАК ДатаПроизводства,
	|	Реализации.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА Реализации.СерияНоменклатуры ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА Реализации.СерияНоменклатуры = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|			ТОГДА 0
	|		КОГДА Реализации.СерияНоменклатуры.СрокГодности = 0
	|			ТОГДА РАЗНОСТЬДАТ(Реализации.СерияНоменклатуры.ДатаПроизводства, Реализации.СерияНоменклатуры.ГоденДо, ДЕНЬ)
	|		ИНАЧЕ Реализации.СерияНоменклатуры.СрокГодности
	|	КОНЕЦ КАК СрокГодности,
	|	ВЫБОР
	|		КОГДА Реализации.СерияНоменклатуры ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ РАЗНОСТЬДАТ(&ДатаОтгрузки, Реализации.СерияНоменклатуры.ГоденДо, ДЕНЬ)
	|	КОНЕЦ КАК ОсталосьДнейСрокаГодности,
	|	ЕСТЬNULL(Заказы.НомерСтроки, 0) КАК НомерСтроки
	|ИЗ
	|	Реализации КАК Реализации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Заказы КАК Заказы
	|		ПО Реализации.Заказ = Заказы.ЗаказКлиента
	|			И Реализации.Номенклатура = Заказы.Номенклатура
	|			И Реализации.НомерСтрокиРеализации = Заказы.НомерСтроки
	|ГДЕ
	|	Реализации.Заказ В
	|			(ВЫБРАТЬ
	|				Заказы.ЗаказКлиента КАК ЗаказКлиента
	|			ИЗ
	|				Заказы КАК Заказы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Реализации.Номенклатура,
	|	ЕСТЬNULL(ЗаказыПеремещение.КоличествоЗаказ, 0),
	|	ЕСТЬNULL(ЗаказыПеремещение.Контрагент, Реализации.Заказ.Контрагент),
	|	Реализации.Количество,
	|	NULL,
	|	Реализации.НомерСтрокиРеализации,
	|	Реализации.Номенклатура.Весовой,
	|	ЕСТЬNULL(ЗаказыПеремещение.ЗаказНаПеремещение, Реализации.Заказ),
	|	Реализации.Номенклатура.ЕдиницаИзмерения,
	|	Реализации.Ссылка,
	|	Реализации.ДатаПроизводства,
	|	Реализации.СерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА Реализации.СерияНоменклатуры ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА Реализации.СерияНоменклатуры = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|			ТОГДА 0
	|		КОГДА Реализации.СерияНоменклатуры.СрокГодности = 0
	|			ТОГДА РАЗНОСТЬДАТ(Реализации.СерияНоменклатуры.ДатаПроизводства, Реализации.СерияНоменклатуры.ГоденДо, ДЕНЬ)
	|		ИНАЧЕ Реализации.СерияНоменклатуры.СрокГодности
	|	КОНЕЦ КАК СрокГодности,
	|	ВЫБОР
	|		КОГДА Реализации.СерияНоменклатуры ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ РАЗНОСТЬДАТ(&ДатаОтгрузки, Реализации.СерияНоменклатуры.ГоденДо, ДЕНЬ)
	|	КОНЕЦ КАК ОсталосьДнейСрокаГодности,
	|	ЕСТЬNULL(ЗаказыПеремещение.НомерСтроки, 0)
	|ИЗ
	|	Реализации КАК Реализации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказыПеремещение КАК ЗаказыПеремещение
	|		ПО Реализации.Заказ = ЗаказыПеремещение.ЗаказНаПеремещение
	|			И Реализации.Номенклатура = ЗаказыПеремещение.Номенклатура
	|			И Реализации.НомерСтрокиРеализации = ЗаказыПеремещение.НомерСтроки
	|ГДЕ
	|	Реализации.Заказ В
	|			(ВЫБРАТЬ
	|				ЗаказыПеремещение.ЗаказНаПеремещение КАК ЗаказНаПеремещение
	|			ИЗ
	|				ЗаказыПеремещение КАК ЗаказыПеремещение)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиРеализации
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Ссылка", ТекЗаказ);
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("Реализация", Реализация);
	Если ЗначениеЗаполнено(ДатаОтгрузки) Тогда
		Запрос.УстановитьПараметр("ДатаОтгрузки", ДатаОтгрузки); 
	Иначе
		Запрос.УстановитьПараметр("ДатаОтгрузки", ТекущаяДата());
	КонецЕсли;
	Если Сортировка = "Наименование" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПОРЯДОЧИТЬ ПО НомерСтрокиРеализации", "УПОРЯДОЧИТЬ ПО Номенклатура");	
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();
	
	//обработка дублей строк и количества заказа
	ТЧЗаказыВрем = Выборка.Скопировать();
	ТЧЗаказыВрем.Свернуть("Реализация, НомерСтрокиРеализации, Номенклатура, КоличествоЗаказ", "Количество");
	Для каждого ТекСтрока Из ТЧЗаказыВрем Цикл
		ТекКоличЗаказ = ТекСтрока.КоличествоЗаказ; 
		НайденныеСтроки = Выборка.НайтиСтроки(Новый Структура("Реализация, НомерСтрокиРеализации, Номенклатура", ТекСтрока.Реализация, ТекСтрока.НомерСтрокиРеализации, ТекСтрока.Номенклатура));
		Для каждого ТекнайдСтрока Из НайденныеСтроки Цикл
			Если ТекнайдСтрока.Количество >= ТекКоличЗаказ Тогда
				ТекнайдСтрока.КоличествоЗаказ = ТекКоличЗаказ;
				ТекКоличЗаказ = 0;
			Иначе
				ТекнайдСтрока.КоличествоЗаказ = ТекнайдСтрока.Количество;
				ТекКоличЗаказ = ТекКоличЗаказ - ТекнайдСтрока.Количество;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для каждого ТекСтрока Из Выборка Цикл
		
		//Если ТолькоВесовыеПозиции И НЕ ТекСтрока.НоменклатураВесовой Тогда
		//	Продолжить;				
		//КонецЕсли;
		//
		//Если ТолькоБезСерий И ЗначениеЗаполнено(ТекСтрока.СерияНоменклатуры) Тогда
		//	Продолжить;				
		//КонецЕсли;
		
		НоваяСтрока = ТЧЗаказы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		НоваяСтрока.КоличествоЗаказов = 1;
		
		НоваяСтрока = ТЧСтрокиЗаказов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		//Добавление и заполнение ОСГ
		Если ЗначениеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
			Если ТекСтрока.ОсталосьДнейСрокаГодности <= 0 ИЛИ ТекСтрока.СрокГодности = 0 Тогда
				НоваяСтрока.ОСГ = "0 дн.(0%)";
				НоваяСтрока.ОСГПроценты = 0;
			Иначе
				НоваяСтрока.ОСГПроценты = Окр(ТекСтрока.ОсталосьДнейСрокаГодности / ТекСтрока.СрокГодности * 100,0,РежимОкругления.Окр15как20);
				НоваяСтрока.ОСГ = Строка(ТекСтрока.ОсталосьДнейСрокаГодности) + " дн.(" + Строка(НоваяСтрока.ОСГПроценты) + "%)"; 
			КонецЕсли;
		Иначе
			НоваяСтрока.ОСГ = "";
			НоваяСтрока.ОСГПроценты = 0;
		КонецЕсли;
		НоваяСтрока.НомерСтроки = ТекСтрока.НомерСтрокиРеализации;
	КонецЦикла;	
	ТЧ = ТЧЗаказы.Выгрузить();
	ТЧ.Свернуть("Номенклатура, ЕдиницаИзмерения", "Количество, КоличествоЗаказ, КоличествоЗаказов");
	ТЧЗаказы.Загрузить(ТЧ);
	ЗаполнитьСтрокиДляОформленияПриРазделенииПоСериям();
КонецПроцедуры

&НаКлиенте
Процедура ТЧЗаказыПриАктивизацииСтроки(Элемент)
	
	ТекСтрока = Элементы.ТЧЗаказы.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Элементы.ТЧСтрокиЗаказов.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка")));
	Иначе
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура", ТекСтрока.Номенклатура);	
		Если ТолькоВесовыеПозиции Тогда
			СтруктураОтбора.Вставить("НоменклатураВесовой", Истина);		
		КонецЕсли;
		Если ТолькоБезСерий Тогда
			СтруктураОтбора.Вставить("СерияНоменклатуры", ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка"));		
		КонецЕсли;
		
		Элементы.ТЧСтрокиЗаказов.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ТЧСтрокиЗаказовКоличествоПриИзменении(Элемент)
	ТекДанные = Элементы.ТЧСтрокиЗаказов.ТекущиеДанные;
	Элементы.ТЧСтрокиЗаказов.ТекущиеДанные.ЕстьИзменениеСтроки = Истина;
	Элементы.ТЧСтрокиЗаказовПрименить.Доступность = Истина;
	ТекСтрокаСписка = Элементы.Список.ТекущаяСтрока;
КонецПроцедуры

&НаСервере
Процедура ИзменитьКоличествоВРеализации(Документ)
	
	ТЧПоНоменклатуре = ТЧСтрокиЗаказов.Выгрузить();
	ТЧПоНоменклатуре.Свернуть("Номенклатура, ЗаказКлиента, Реализация, Контрагент, Точка, НомерСтрокиРеализации, ЕдиницаИзмерения, ИдентификаторСтрокиРеализации",
	"Количество, КоличествоЗаказ");
	
	НайденныеСтрокиПоНоменклатуре = ТЧПоНоменклатуре.НайтиСтроки(Новый Структура("Реализация", Документ));
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		ДокОб = Документ.ПолучитьОбъект();
		
		Для каждого ТекСтрока Из НайденныеСтрокиПоНоменклатуре Цикл
			
			НомерСтроки = ТекСтрока.НомерСтрокиРеализации;
			
			НайденныеСтрокиПолной = ТЧСтрокиЗаказов.НайтиСтроки(Новый Структура("Реализация, Номенклатура, НомерСтрокиРеализации", ТекСтрока.Реализация, ТекСтрока.Номенклатура, ТекСтрока.НомерСтрокиРеализации));
			Если НайденныеСтрокиПолной.Количество() = 1 Тогда
				//Если ЗначениеЗаполнено(НайденныеСтрокиПолной[0].СерияНоменклатуры) Тогда
					ДокОб.Товары[НомерСтроки - 1].СерияНоменклатуры = НайденныеСтрокиПолной[0].СерияНоменклатуры;
				//Иначе
				//	Если Не НайденныеСтрокиПолной[0].ДатаПроизводства = Дата('00010101') Тогда
				//		ДокОб.Товары[НомерСтроки - 1].СерияНоменклатуры = Справочники.СерииНоменклатуры.СоздатьПолучитьСерию(НайденныеСтрокиПолной[0].Номенклатура, НайденныеСтрокиПолной[0].ДатаПроизводства);
				//	КонецЕсли;
				//	ДокОб.Товары[НомерСтроки - 1].СерияНоменклатуры = НайденныеСтрокиПолной[0].СерияНоменклатуры;
				//КонецЕсли; 
			ИначеЕсли НайденныеСтрокиПолной.Количество() > 1 Тогда 
				ДокОб.Товары[НомерСтроки - 1].СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
			КонецЕсли;	
			
			ДокОб.Товары[НомерСтроки - 1].Количество = ТекСтрока.Количество;
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(ДокОб.Товары[НомерСтроки - 1], 0);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ДокОб.Товары[НомерСтроки - 1], ДокОб.СуммаВключаетНДС);
			
		КонецЦикла;
		
		//заполняем ТЧ серии
		ДокОб.СерииНоменклатуры.Очистить();
		НайденныеСтроки = ТЧСтрокиЗаказов.НайтиСтроки(Новый Структура("Реализация", ТекСтрока.Реализация));
		Для каждого ТекНайдСТрока Из НайденныеСтроки Цикл
			НоваяСтрока = ДокОб.СерииНоменклатуры.Добавить();	
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекНайдСТрока);
			Если ЗначениеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
				НоваяСтрока.ДатаПроизводства = НоваяСтрока.СерияНоменклатуры.ДатаПроизводства;
			Иначе
				НоваяСтрока.ДатаПроизводства = Дата(1,1,1);
			КонецЕсли;
		КонецЦикла;
		
		//записываем док
		Если ДокОб.Проведен Тогда
			ДокОб.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ДокОб.Записать();
		КонецЕсли;
		
		//ПЕ+ 
		//синхронизируем документ УУ
		ЗапросДокУУ = Новый Запрос;
		ЗапросДокУУ.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	сабОбработкаДокументов.ДокументУУ КАК ДокументУУ,
		|	сабОбработкаДокументов.ДатаОбработки КАК ДатаОбработки,
		|	сабОбработкаДокументов.АвтообновленияЗаблокированы КАК АвтообновленияЗаблокированы
		|ИЗ
		|	РегистрСведений.сабОбработкаДокументов КАК сабОбработкаДокументов
		|ГДЕ
		|	сабОбработкаДокументов.ДокументБУ = &ДокБУ
		|	И сабОбработкаДокументов.ДокументУУ.Дата ЕСТЬ НЕ NULL 
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаОбработки УБЫВ";
		
		ЗапросДокУУ.УстановитьПараметр("ДокБУ", ДокОб.Ссылка);
		
		РезультатЗапросаДокУУ = ЗапросДокУУ.Выполнить();
		Если НЕ РезультатЗапросаДокУУ.Пустой() Тогда
			ВыборкаДокУУ = РезультатЗапросаДокУУ.Выбрать();
			ВыборкаДокУУ.Следующий();
			Если НЕ ВыборкаДокУУ.АвтообновленияЗаблокированы Тогда
				ДокУУ = ВыборкаДокУУ.ДокументУУ;
				ДокОбъектУУ = ДокУУ.ПолучитьОбъект(); 
				сабОбщегоНазначенияБУХ.сабОбработкиЗаполненияУчпетныхДокументовОбработкаЗаполнения(ДокОбъектУУ, ДокОб.Ссылка, Неопределено, Истина);
				Если ДокОбъектУУ.Проведен Тогда
					ДокОбъектУУ.Записать(РежимЗаписиДокумента.Проведение);
				Иначе
					ДокОбъектУУ.Записать();
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
		//ПЕ-
		//обновляем сумму в счете
		Если ЗначениеЗаполнено(ДокОб.СчетНаОплатуПокупателю) Тогда
			ОбСч = ДокОб.СчетНаОплатуПокупателю.ПолучитьОбъект();
			ОбСч.Товары.Очистить();
			ОбСч.ВозвратнаяТара.Очистить();
			ОбСч.РеквизитыКодаДляОплаты.Очистить();
			ОбСч.Заполнить(ДокОб.Ссылка);
			Если ОбСч.Проведен Тогда
				ОбСч.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				ОбСч.Записать();
			КонецЕсли;
			//Сообщить("Счет покупателю №" + ОбСч.Номер + " перезаполнен.");
		КонецЕсли;
		
		//Сообщить("Установлено новое количество в документе " + Строка(Документ) + " в строке №" + Строка(НомерСтроки));
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.УЧ_Реализация") Тогда
		
		ДокОб = Документ.ПолучитьОбъект();
		
		Для каждого ТекСтрока Из НайденныеСтрокиПоНоменклатуре Цикл
			
			НомерСтроки = ТекСтрока.НомерСтрокиРеализации;
			
			НайденныеСтрокиПолной = ТЧСтрокиЗаказов.НайтиСтроки(Новый Структура("Реализация, Номенклатура, НомерСтрокиРеализации", ТекСтрока.Реализация, ТекСтрока.Номенклатура, ТекСтрока.НомерСтрокиРеализации));
			Если НайденныеСтрокиПолной.Количество() = 1 Тогда
				Если ЗначениеЗаполнено(НайденныеСтрокиПолной[0].СерияНоменклатуры) Тогда
					ДокОб.Товары[НомерСтроки - 1].СерияНоменклатуры = НайденныеСтрокиПолной[0].СерияНоменклатуры;
				//Иначе
				//	Если Не НайденныеСтрокиПолной[0].ДатаПроизводства = Дата('00010101') Тогда
				//		ДокОб.Товары[НомерСтроки - 1].СерияНоменклатуры = Справочники.СерииНоменклатуры.СоздатьПолучитьСерию(НайденныеСтрокиПолной[0].Номенклатура, НайденныеСтрокиПолной[0].ДатаПроизводства);
				//	КонецЕсли;
				//	////ДокОб.Товары[НомерСтроки - 1].СерияНоменклатуры = НайденныеСтрокиПолной[0].СерияНоменклатуры; 
				ИначеЕсли НайденныеСтрокиПолной.Количество() > 1 Тогда 
					ДокОб.Товары[НомерСтроки - 1].СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;
			
			ДокОб.Товары[НомерСтроки - 1].Количество = ТекСтрока.Количество;
			
			сабОбщегоНазначенияБУХКлиентСервер.РассчитатьСуммуТабЧасти(ДокОб.Товары[НомерСтроки - 1], 0);
			сабОбщегоНазначенияБУХКлиентСервер.РассчитатьСуммуНДСТабЧасти(ДокОб.Товары[НомерСтроки - 1], ДокОб.СуммаВключаетНДС, Ложь);
			ДокОб.Товары[НомерСтроки - 1].СуммаОтгрузки = ДокОб.Товары[НомерСтроки - 1].Сумма + ?(ДокОб.СуммаВключаетНДС, 0, ДокОб.Товары[НомерСтроки - 1].СуммаНДС);
			
		КонецЦикла;
		
		//заполняем ТЧ серии
		ДокОб.СерииНоменклатуры.Очистить();
		НайденныеСтроки = ТЧСтрокиЗаказов.НайтиСтроки(Новый Структура("Реализация", ТекСтрока.Реализация));
		Для каждого ТекНайдСТрока Из НайденныеСтроки Цикл
			НоваяСтрока = ДокОб.СерииНоменклатуры.Добавить();	
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекНайдСТрока);
			Если ЗначениеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
				НоваяСтрока.ДатаПроизводства = НоваяСтрока.СерияНоменклатуры.ДатаПроизводства;
			Иначе
				НоваяСтрока.ДатаПроизводства = Дата(1,1,1);
			КонецЕсли;
		КонецЦикла;
		
		Если ДокОб.Проведен Тогда
			ДокОб.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ДокОб.Записать();
		КонецЕсли;
		
		//Сообщить("Установлено новое количество в документе " + Строка(Документ) + " в строке №" + Строка(НомерСтроки));
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.РозничнаяПродажа") Тогда
		
		ДокОб = Документ.ПолучитьОбъект();
		
		Для каждого ТекСтрока Из НайденныеСтрокиПоНоменклатуре Цикл
			
			НомерСтроки = ТекСтрока.НомерСтрокиРеализации;
			
			НайденныеСтрокиПолной = ТЧСтрокиЗаказов.НайтиСтроки(Новый Структура("Реализация, Номенклатура, НомерСтрокиРеализации", ТекСтрока.Реализация, ТекСтрока.Номенклатура, ТекСтрока.НомерСтрокиРеализации));
			Если НайденныеСтрокиПолной.Количество() = 1 Тогда
				//Если ЗначениеЗаполнено(НайденныеСтрокиПолной[0].СерияНоменклатуры) Тогда
				ДокОб.Товары[НомерСтроки - 1].СерияНоменклатуры = НайденныеСтрокиПолной[0].СерияНоменклатуры;
				//Иначе
				//	Если Не НайденныеСтрокиПолной[0].ДатаПроизводства = Дата('00010101') Тогда
				//		ДокОб.Товары[НомерСтроки - 1].СерияНоменклатуры = Справочники.СерииНоменклатуры.СоздатьПолучитьСерию(НайденныеСтрокиПолной[0].Номенклатура, НайденныеСтрокиПолной[0].ДатаПроизводства);
				//	КонецЕсли;
				//	ДокОб.Товары[НомерСтроки - 1].СерияНоменклатуры = НайденныеСтрокиПолной[0].СерияНоменклатуры; //ПЕ
				//КонецЕсли; 
			ИначеЕсли НайденныеСтрокиПолной.Количество() > 1 Тогда 
				ДокОб.Товары[НомерСтроки - 1].СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
			КонецЕсли;
			
			ДокОб.Товары[НомерСтроки - 1].Количество = ТекСтрока.Количество;
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(ДокОб.Товары[НомерСтроки - 1], 0);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ДокОб.Товары[НомерСтроки - 1], ДокОб.СуммаВключаетНДС);
			
		КонецЦикла;
		
		//заполняем ТЧ серии
		ДокОб.СерииНоменклатуры.Очистить();
		НайденныеСтроки = ТЧСтрокиЗаказов.НайтиСтроки(Новый Структура("Реализация", ТекСтрока.Реализация));
		Для каждого ТекНайдСТрока Из НайденныеСтроки Цикл
			НоваяСтрока = ДокОб.СерииНоменклатуры.Добавить();	
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекНайдСТрока); 
			Если ЗначениеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
				НоваяСтрока.ДатаПроизводства = НоваяСтрока.СерияНоменклатуры.ДатаПроизводства;
			Иначе
				НоваяСтрока.ДатаПроизводства = Дата(1,1,1);
			КонецЕсли;
		КонецЦикла;
		
		Если ДокОб.Проведен Тогда
			ДокОб.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ДокОб.Записать();
		КонецЕсли; 
		
		//ПЕ+ 
		//синхронизируем документ УУ
		ЗапросДокУУ = Новый Запрос;
		ЗапросДокУУ.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	сабОбработкаДокументов.ДокументУУ КАК ДокументУУ,
		|	сабОбработкаДокументов.ДатаОбработки КАК ДатаОбработки,
		|	сабОбработкаДокументов.АвтообновленияЗаблокированы КАК АвтообновленияЗаблокированы
		|ИЗ
		|	РегистрСведений.сабОбработкаДокументов КАК сабОбработкаДокументов
		|ГДЕ
		|	сабОбработкаДокументов.ДокументБУ = &ДокБУ
		|	И сабОбработкаДокументов.ДокументУУ.Дата ЕСТЬ НЕ NULL 
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаОбработки УБЫВ";
		
		ЗапросДокУУ.УстановитьПараметр("ДокБУ", ДокОб.Ссылка);
		
		РезультатЗапросаДокУУ = ЗапросДокУУ.Выполнить();
		Если НЕ РезультатЗапросаДокУУ.Пустой() Тогда
			ВыборкаДокУУ = РезультатЗапросаДокУУ.Выбрать();
			ВыборкаДокУУ.Следующий();
			Если НЕ ВыборкаДокУУ.АвтообновленияЗаблокированы Тогда
				ДокУУ = ВыборкаДокУУ.ДокументУУ;
				ДокОбъектУУ = ДокУУ.ПолучитьОбъект(); 
				сабОбщегоНазначенияБУХ.сабОбработкиЗаполненияУчпетныхДокументовОбработкаЗаполнения(ДокОбъектУУ, ДокОб.Ссылка, Неопределено, Истина);
				Если ДокОбъектУУ.Проведен Тогда
					ДокОбъектУУ.Записать(РежимЗаписиДокумента.Проведение);
				Иначе
					ДокОбъектУУ.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		//ПЕ-
		
		
		//Сообщить("Установлено новое количество в документе " + Строка(Документ) + " в строке №" + Строка(НомерСтроки));
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПередачаТоваров") Тогда
		
		ДокОб = Документ.ПолучитьОбъект();
		
		Для каждого ТекСтрока Из НайденныеСтрокиПоНоменклатуре Цикл
			
			НомерСтроки = ТекСтрока.НомерСтрокиРеализации;
			
			НайденныеСтрокиПолной = ТЧСтрокиЗаказов.НайтиСтроки(Новый Структура("Реализация, Номенклатура, НомерСтрокиРеализации", ТекСтрока.Реализация, ТекСтрока.Номенклатура, ТекСтрока.НомерСтрокиРеализации));
			Если НайденныеСтрокиПолной.Количество() = 1 Тогда
				//Если ЗначениеЗаполнено(НайденныеСтрокиПолной[0].СерияНоменклатуры) Тогда
					ДокОб.Товары[НомерСтроки - 1].СерияНоменклатуры = НайденныеСтрокиПолной[0].СерияНоменклатуры;
				//Иначе
				//	Если Не НайденныеСтрокиПолной[0].ДатаПроизводства = Дата('00010101') Тогда
				//		ДокОб.Товары[НомерСтроки - 1].СерияНоменклатуры = Справочники.СерииНоменклатуры.СоздатьПолучитьСерию(НайденныеСтрокиПолной[0].Номенклатура, НайденныеСтрокиПолной[0].ДатаПроизводства);
				//	КонецЕсли;
				//	ДокОб.Товары[НомерСтроки - 1].СерияНоменклатуры = НайденныеСтрокиПолной[0].СерияНоменклатуры; //ПЕ
				//КонецЕсли; 
			ИначеЕсли НайденныеСтрокиПолной.Количество() > 1 Тогда 
				ДокОб.Товары[НомерСтроки - 1].СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
			КонецЕсли;
			ДокОб.Товары[НомерСтроки - 1].Количество = ТекСтрока.Количество; 
			Если НайденныеСтрокиПолной.Количество() > 1	Тогда 
				СерияНоменклДляТЧТовары = НайденныеСтрокиПолной[0].СерияНоменклатуры;
				Для каждого ЭлМассива Из НайденныеСтрокиПолной Цикл
					Если ЗначениеЗаполнено(ЭлМассива.СерияНоменклатуры) Тогда
						СерияНоменклДляТЧТовары = ЭлМассива.СерияНоменклатуры;	
					КонецЕсли;
				КонецЦикла;
				ДокОб.Товары[НомерСтроки - 1].СерияНоменклатуры = СерияНоменклДляТЧТовары;
			КонецЕсли;
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(ДокОб.Товары[НомерСтроки - 1], 0);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ДокОб.Товары[НомерСтроки - 1], ДокОб.СуммаВключаетНДС);
			
		КонецЦикла;
		
		//заполняем ТЧ серии
		ДокОб.СерииНоменклатуры.Очистить();
		НайденныеСтроки = ТЧСтрокиЗаказов.НайтиСтроки(Новый Структура("Реализация", ТекСтрока.Реализация));
		Для каждого ТекНайдСТрока Из НайденныеСтроки Цикл
			НоваяСтрока = ДокОб.СерииНоменклатуры.Добавить();	
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекНайдСТрока);
			Если ЗначениеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
				НоваяСтрока.ДатаПроизводства = НоваяСтрока.СерияНоменклатуры.ДатаПроизводства;
			Иначе
				НоваяСтрока.ДатаПроизводства = Дата(1,1,1);
			КонецЕсли;
		КонецЦикла;
		
		Если ДокОб.Проведен Тогда
			ДокОб.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ДокОб.Записать();
		КонецЕсли; 
		
		//ПЕ+ 
		//синхронизируем документ УУ
		ЗапросДокУУ = Новый Запрос;
		ЗапросДокУУ.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	сабОбработкаДокументов.ДокументУУ КАК ДокументУУ,
		|	сабОбработкаДокументов.ДатаОбработки КАК ДатаОбработки,
		|	сабОбработкаДокументов.АвтообновленияЗаблокированы КАК АвтообновленияЗаблокированы
		|ИЗ
		|	РегистрСведений.сабОбработкаДокументов КАК сабОбработкаДокументов
		|ГДЕ
		|	сабОбработкаДокументов.ДокументБУ = &ДокБУ
		|	И сабОбработкаДокументов.ДокументУУ.Дата ЕСТЬ НЕ NULL 
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаОбработки УБЫВ";
		
		ЗапросДокУУ.УстановитьПараметр("ДокБУ", ДокОб.Ссылка);
		
		РезультатЗапросаДокУУ = ЗапросДокУУ.Выполнить();
		Если НЕ РезультатЗапросаДокУУ.Пустой() Тогда
			ВыборкаДокУУ = РезультатЗапросаДокУУ.Выбрать();
			ВыборкаДокУУ.Следующий();
			Если НЕ ВыборкаДокУУ.АвтообновленияЗаблокированы Тогда
				ДокУУ = ВыборкаДокУУ.ДокументУУ;
				ДокОбъектУУ = ДокУУ.ПолучитьОбъект(); 
				сабОбщегоНазначенияБУХ.сабОбработкиЗаполненияУчпетныхДокументовОбработкаЗаполнения(ДокОбъектУУ, ДокОб.Ссылка, Неопределено, Истина);
				Если ДокОбъектУУ.Проведен Тогда
					ДокОбъектУУ.Записать(РежимЗаписиДокумента.Проведение);
				Иначе
					ДокОбъектУУ.Записать();
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
		//ПЕ-
		
		
		
		//Сообщить("Установлено новое количество в документе " + Строка(Документ) + " в строке №" + Строка(НомерСтроки));
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		
		ДокОб = Документ.ПолучитьОбъект();
		
		Для каждого ТекСтрока Из НайденныеСтрокиПоНоменклатуре Цикл
			
			НомерСтроки = ТекСтрока.НомерСтрокиРеализации;
			
			НайденныеСтрокиПолной = ТЧСтрокиЗаказов.НайтиСтроки(Новый Структура("Реализация, Номенклатура, НомерСтрокиРеализации", ТекСтрока.Реализация, ТекСтрока.Номенклатура, ТекСтрока.НомерСтрокиРеализации));
			Если НайденныеСтрокиПолной.Количество() = 1 Тогда
				//Если ЗначениеЗаполнено(НайденныеСтрокиПолной[0].СерияНоменклатуры) Тогда
					ДокОб.Товары[НомерСтроки - 1].СерияНоменклатуры = НайденныеСтрокиПолной[0].СерияНоменклатуры;
				//Иначе
				//	Если Не НайденныеСтрокиПолной[0].ДатаПроизводства = Дата('00010101') Тогда
				//		ДокОб.Товары[НомерСтроки - 1].СерияНоменклатуры = Справочники.СерииНоменклатуры.СоздатьПолучитьСерию(НайденныеСтрокиПолной[0].Номенклатура, НайденныеСтрокиПолной[0].ДатаПроизводства);
				//	КонецЕсли; 
				//	ДокОб.Товары[НомерСтроки - 1].СерияНоменклатуры = НайденныеСтрокиПолной[0].СерияНоменклатуры; //ПЕ
				//КонецЕсли; 
			ИначеЕсли НайденныеСтрокиПолной.Количество() > 1 Тогда 
				ДокОб.Товары[НомерСтроки - 1].СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
			КонецЕсли;			
			
			ДокОб.Товары[НомерСтроки - 1].Количество = ТекСтрока.Количество;
			
			//ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(ДокОб.Товары[НомерСтроки - 1], 0);
			//ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ДокОб.Товары[НомерСтроки - 1], ДокОб.СуммаВключаетНДС);
			
		КонецЦикла;
		
		//заполняем ТЧ серии
		ДокОб.СерииНоменклатуры.Очистить();
		НайденныеСтроки = ТЧСтрокиЗаказов.НайтиСтроки(Новый Структура("Реализация", ТекСтрока.Реализация));
		Для каждого ТекНайдСТрока Из НайденныеСтроки Цикл
			НоваяСтрока = ДокОб.СерииНоменклатуры.Добавить();	
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекНайдСТрока);
			Если ЗначениеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
				НоваяСтрока.ДатаПроизводства = НоваяСтрока.СерияНоменклатуры.ДатаПроизводства;
			Иначе
				НоваяСтрока.ДатаПроизводства = Дата(1,1,1);
			КонецЕсли;
		КонецЦикла;
		
		//записываем док
		Если ДокОб.Проведен Тогда
			ДокОб.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ДокОб.Записать();
		КонецЕсли; 
		
		//ПЕ+ 
		//синхронизируем документ УУ
		ЗапросДокУУ = Новый Запрос;
		ЗапросДокУУ.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	сабОбработкаДокументов.ДокументУУ КАК ДокументУУ,
		|	сабОбработкаДокументов.ДатаОбработки КАК ДатаОбработки,
		|	сабОбработкаДокументов.АвтообновленияЗаблокированы КАК АвтообновленияЗаблокированы
		|ИЗ
		|	РегистрСведений.сабОбработкаДокументов КАК сабОбработкаДокументов
		|ГДЕ
		|	сабОбработкаДокументов.ДокументБУ = &ДокБУ
		|	И сабОбработкаДокументов.ДокументУУ.Дата ЕСТЬ НЕ NULL 
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаОбработки УБЫВ";
		
		ЗапросДокУУ.УстановитьПараметр("ДокБУ", ДокОб.Ссылка);
		
		РезультатЗапросаДокУУ = ЗапросДокУУ.Выполнить();
		Если НЕ РезультатЗапросаДокУУ.Пустой() Тогда
			ВыборкаДокУУ = РезультатЗапросаДокУУ.Выбрать();
			ВыборкаДокУУ.Следующий();  
			Если НЕ ВыборкаДокУУ.АвтообновленияЗаблокированы Тогда
				ДокУУ = ВыборкаДокУУ.ДокументУУ;
				ДокОбъектУУ = ДокУУ.ПолучитьОбъект(); 
				сабОбщегоНазначенияБУХ.сабОбработкиЗаполненияУчпетныхДокументовОбработкаЗаполнения(ДокОбъектУУ, ДокОб.Ссылка, Неопределено, Истина);
				Если ДокОбъектУУ.Проведен Тогда
					ДокОбъектУУ.Записать(РежимЗаписиДокумента.Проведение);
				Иначе
					ДокОбъектУУ.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		//ПЕ-
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.УЧ_ПеремещениеТоваров") Тогда
		
		ДокОб = Документ.ПолучитьОбъект();
		
		Для каждого ТекСтрока Из НайденныеСтрокиПоНоменклатуре Цикл
			
			НомерСтроки = ТекСтрока.НомерСтрокиРеализации;
			
			НайденныеСтрокиПолной = ТЧСтрокиЗаказов.НайтиСтроки(Новый Структура("Реализация, Номенклатура, НомерСтрокиРеализации", ТекСтрока.Реализация, ТекСтрока.Номенклатура, ТекСтрока.НомерСтрокиРеализации));
			Если НайденныеСтрокиПолной.Количество() = 1 Тогда
				//Если ЗначениеЗаполнено(НайденныеСтрокиПолной[0].СерияНоменклатуры) Тогда
					ДокОб.ТабличнаяЧасть[НомерСтроки - 1].СерияНоменклатуры = НайденныеСтрокиПолной[0].СерияНоменклатуры;
				//Иначе
				//	Если Не НайденныеСтрокиПолной[0].ДатаПроизводства = Дата('00010101') Тогда
				//		ДокОб.ТабличнаяЧасть[НомерСтроки - 1].СерияНоменклатуры = Справочники.СерииНоменклатуры.СоздатьПолучитьСерию(НайденныеСтрокиПолной[0].Номенклатура, НайденныеСтрокиПолной[0].ДатаПроизводства);
				//	КонецЕсли;
					////ДокОб.ТабличнаяЧасть[НомерСтроки - 1].СерияНоменклатуры = НайденныеСтрокиПолной[0].СерияНоменклатуры; //ПЕ
				//КонецЕсли;
			ИначеЕсли НайденныеСтрокиПолной.Количество() > 1 Тогда 
				ДокОб.ТабличнаяЧасть[НомерСтроки - 1].СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
			КонецЕсли;
			
			ДокОб.ТабличнаяЧасть[НомерСтроки - 1].Количество = ТекСтрока.Количество;
			
			//сабОбщегоНазначенияБУХКлиентСервер.РассчитатьСуммуТабЧасти(ДокОб.Товары[НомерСтроки - 1], 0);
			//сабОбщегоНазначенияБУХКлиентСервер.РассчитатьСуммуНДСТабЧасти(ДокОб.Товары[НомерСтроки - 1], ДокОб.СуммаВключаетНДС, Ложь);
			//ДокОб.Товары[НомерСтроки - 1].СуммаОтгрузки = ДокОб.Товары[НомерСтроки - 1].Сумма + ?(ДокОб.СуммаВключаетНДС, 0, ДокОб.Товары[НомерСтроки - 1].СуммаНДС);
			
		КонецЦикла;
		
		//заполняем ТЧ серии
		ДокОб.СерииНоменклатуры.Очистить();
		НайденныеСтроки = ТЧСтрокиЗаказов.НайтиСтроки(Новый Структура("Реализация", ТекСтрока.Реализация));
		Для каждого ТекНайдСТрока Из НайденныеСтроки Цикл
			НоваяСтрока = ДокОб.СерииНоменклатуры.Добавить();	
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекНайдСТрока);
			Если ЗначениеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
				НоваяСтрока.ДатаПроизводства = НоваяСтрока.СерияНоменклатуры.ДатаПроизводства;
			Иначе
				НоваяСтрока.ДатаПроизводства = Дата(1,1,1);
			КонецЕсли;
		КонецЦикла;
		
		Если ДокОб.Проведен Тогда
			ДокОб.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ДокОб.Записать();
		КонецЕсли;
		
		
		
		
		
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ТребованиеНакладная") Тогда
		
		ДокОб = Документ.ПолучитьОбъект();
		
		Для каждого ТекСтрока Из НайденныеСтрокиПоНоменклатуре Цикл
			
			НомерСтроки = ТекСтрока.НомерСтрокиРеализации;
			
			НайденныеСтрокиПолной = ТЧСтрокиЗаказов.НайтиСтроки(Новый Структура("Реализация, Номенклатура, НомерСтрокиРеализации", ТекСтрока.Реализация, ТекСтрока.Номенклатура, ТекСтрока.НомерСтрокиРеализации));
			Если НайденныеСтрокиПолной.Количество() = 1 Тогда
				//Если ЗначениеЗаполнено(НайденныеСтрокиПолной[0].СерияНоменклатуры) Тогда
					ДокОб.Материалы[НомерСтроки - 1].СерияНоменклатуры = НайденныеСтрокиПолной[0].СерияНоменклатуры;
				//Иначе
				//	Если Не НайденныеСтрокиПолной[0].ДатаПроизводства = Дата('00010101') Тогда
				//		ДокОб.Товары[НомерСтроки - 1].СерияНоменклатуры = Справочники.СерииНоменклатуры.СоздатьПолучитьСерию(НайденныеСтрокиПолной[0].Номенклатура, НайденныеСтрокиПолной[0].ДатаПроизводства);
				//	КонецЕсли; 
				//	ДокОб.Товары[НомерСтроки - 1].СерияНоменклатуры = НайденныеСтрокиПолной[0].СерияНоменклатуры; //ПЕ
				//КонецЕсли;  
			ИначеЕсли НайденныеСтрокиПолной.Количество() > 1 Тогда 
				ДокОб.Материалы[НомерСтроки - 1].СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
			КонецЕсли;			
			
			ДокОб.Материалы[НомерСтроки - 1].Количество = ТекСтрока.Количество;
			
			//ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(ДокОб.Товары[НомерСтроки - 1], 0);
			//ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ДокОб.Товары[НомерСтроки - 1], ДокОб.СуммаВключаетНДС);
			
		КонецЦикла;
		
		//заполняем ТЧ серии
		ДокОб.СерииНоменклатуры.Очистить();
		НайденныеСтроки = ТЧСтрокиЗаказов.НайтиСтроки(Новый Структура("Реализация", ТекСтрока.Реализация));
		Для каждого ТекНайдСТрока Из НайденныеСтроки Цикл
			НоваяСтрока = ДокОб.СерииНоменклатуры.Добавить();	
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекНайдСТрока);
			Если ЗначениеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
				НоваяСтрока.ДатаПроизводства = НоваяСтрока.СерияНоменклатуры.ДатаПроизводства;
			Иначе
				НоваяСтрока.ДатаПроизводства = Дата(1,1,1);
			КонецЕсли;
		КонецЦикла;
		
		//записываем док
		Если ДокОб.Проведен Тогда
			ДокОб.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ДокОб.Записать();
		КонецЕсли; 
		
		//ПЕ+ 
		//синхронизируем документ УУ
		ЗапросДокУУ = Новый Запрос;
		ЗапросДокУУ.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	сабОбработкаДокументов.ДокументУУ КАК ДокументУУ,
		|	сабОбработкаДокументов.ДатаОбработки КАК ДатаОбработки,
		|	сабОбработкаДокументов.АвтообновленияЗаблокированы КАК АвтообновленияЗаблокированы
		|ИЗ
		|	РегистрСведений.сабОбработкаДокументов КАК сабОбработкаДокументов
		|ГДЕ
		|	сабОбработкаДокументов.ДокументБУ = &ДокБУ
		|	И сабОбработкаДокументов.ДокументУУ.Дата ЕСТЬ НЕ NULL 
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаОбработки УБЫВ";
		
		ЗапросДокУУ.УстановитьПараметр("ДокБУ", ДокОб.Ссылка);
		
		РезультатЗапросаДокУУ = ЗапросДокУУ.Выполнить();
		Если НЕ РезультатЗапросаДокУУ.Пустой() Тогда
			ВыборкаДокУУ = РезультатЗапросаДокУУ.Выбрать();
			ВыборкаДокУУ.Следующий();  
			Если НЕ ВыборкаДокУУ.АвтообновленияЗаблокированы Тогда
				ДокУУ = ВыборкаДокУУ.ДокументУУ;
				ДокОбъектУУ = ДокУУ.ПолучитьОбъект(); 
				сабОбщегоНазначенияБУХ.сабОбработкиЗаполненияУчпетныхДокументовОбработкаЗаполнения(ДокОбъектУУ, ДокОб.Ссылка, Неопределено, Истина);
				Если ДокОбъектУУ.Проведен Тогда
					ДокОбъектУУ.Записать(РежимЗаписиДокумента.Проведение);
				Иначе
					ДокОбъектУУ.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		//ПЕ-

		//Сообщить("Установлено новое количество в документе " + Строка(Документ) + " в строке №" + Строка(НомерСтроки));
	Иначе
		//Сообщить("Изменение факт. количества пока возможно только для стандартной реализации товаров и услуг.");
	КонецЕсли;
	
	//обновляем количество в итоговой ТЧ
	Для каждого ТекСтрока Из НайденныеСтрокиПоНоменклатуре Цикл
		ТекСтрокаНом = ТЧЗаказы.НайтиСтроки(Новый Структура("Номенклатура", ТекСтрока.Номенклатура));
		ТекСтрокаНом2 = ТЧСтрокиЗаказов.НайтиСтроки(Новый Структура("Номенклатура", ТекСтрока.Номенклатура));
		Для каждого ТекНайденная Из ТекСтрокаНом Цикл
			ТекНайденная.Количество = 0;
			Для каждого ТекНайденная2 Из ТекСтрокаНом2 Цикл
				ТекНайденная.Количество = ТекНайденная.Количество + ТекНайденная2.Количество;		
			КонецЦикла;	
		КонецЦикла;
	КонецЦикла;
	
	Для каждого ТекСтрока Из ТЧСтрокиЗаказов Цикл
		ТекСтрока.ЕстьИзменениеСтроки = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоОткрытыеПриИзменении(Элемент)
	Список.Параметры.УстановитьЗначениеПараметра("ТолькоОткрытые", ТолькоОткрытые);
КонецПроцедуры

&НаКлиенте
Процедура СтатусВРаботе(Команда)
	ВыдСтроки = Элементы.Список.ВыделенныеСтроки;
	СтатусВРаботеНаСервере(ВыдСтроки, Команда.Имя);
	Элементы.Список.Обновить();
	Элементы.ТабличнаяЧасть.Обновить();
	Элементы.ТЧЗаказы.Обновить();
	РасчитатьЗаголовки();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СтатусВРаботеНаСервере(Заявки, ИмяКоманды)
	
	Если ИмяКоманды = "СтатусВРаботе" Тогда
		Точка = Перечисления.СтатусыМаршрутныхЛистов.ВРаботе;
	ИначеЕсли ИмяКоманды = "СтатусСобран" Тогда
		Точка = Перечисления.СтатусыМаршрутныхЛистов.Собран;
	ИначеЕсли ИмяКоманды = "СтатусВыполнен" Тогда
		Точка = Перечисления.СтатусыМаршрутныхЛистов.Выполнен;
	Иначе
		Точка = Перечисления.СтатусыЗаказовКлиентов.Новый;
	КонецЕсли;
	
	Для каждого ТекЗаявка Из Заявки Цикл
		Об = ТекЗаявка.ПолучитьОбъект();
		Об.Статус = Точка;
		Об.Записать();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Не Элементы.Список.РежимВыбора Тогда
		Если Поле.Имя = "Статус" Тогда
			СтандартнаяОбработка = Ложь;
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.ЗагрузитьЗначения(ПолучитьСписокСтатусовЗаказа());
			ТекЗнач = Неопределено;
			
			ПоказатьВыборИзСписка(Новый ОписаниеОповещения("СписокВыборЗавершение", ЭтаФорма), СписокЗначений, , СписокЗначений.НайтиПоЗначению(Элементы.Список.ТекущиеДанные.Статус));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ТекЗнач = ВыбранныйЭлемент;
	Если Не ТекЗнач = Неопределено Тогда
		ЗаписатьНовыйСтатусЗаказа(Элементы.Список.ТекущаяСтрока, ТекЗнач.Значение);
		Элементы.Список.Обновить();
		Элементы.ТабличнаяЧасть.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокСтатусовЗаказа()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СтатусыМаршрутныхЛистов.Ссылка
	|ИЗ
	|	Перечисление.СтатусыМаршрутныхЛистов КАК СтатусыМаршрутныхЛистов";
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции // ()

&НаСервереБезКонтекста
Процедура ЗаписатьНовыйСтатусЗаказа(Документ, НовыйСтатусЗаказа)
	ТекБанкОб = Документ.ПолучитьОбъект();
	ТекБанкОб.Статус = НовыйСтатусЗаказа;
	ТекБанкОб.Записать();
КонецПроцедуры

&НаКлиенте
Процедура СтатусСогласовано(Команда)
	ВыдСтроки = Элементы.СписокЗаказов.ВыделенныеСтроки;
	СтатусСогласованоНаСервере(ВыдСтроки, Команда.Имя);
	Элементы.СписокЗаказов.Обновить();
	РасчитатьЗаголовки();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СтатусСогласованоНаСервере(Заявки, ИмяКоманды)
	
	Если ИмяКоманды = "СтатусСогласовано" Тогда
		Точка = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке;
	ИначеЕсли ИмяКоманды = "СтатусНеСогласовано" Тогда
		Точка = Перечисления.СтатусыЗаказовКлиентов.Новый;
	ИначеЕсли ИмяКоманды = "СтатусКОплате" Тогда
		Точка = Перечисления.СтатусыЗаказовКлиентов.Отгружен;
	ИначеЕсли ИмяКоманды = "СтатусОтменено" Тогда
		Точка = Перечисления.СтатусыЗаказовКлиентов.Отменен;
	Иначе
		Точка = Перечисления.СтатусыЗаказовКлиентов.Новый;
	КонецЕсли;
	
	Для каждого ТекЗаявка Из Заявки Цикл
		Об = ТекЗаявка.ПолучитьОбъект();
		Об.Статус = Точка;
		Если Об.Проведен Тогда
			Об.Записать(РежимЗаписиДокумента.Проведение);
		Иначе	
			Об.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Группа2ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если Элементы.ТЧСтрокиЗаказовПрименить.Доступность Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("Группа2ПриСменеСтраницыЗавершение", ЭтаФорма), "При переходе на страницу изменения не будут сохранены. Продолжить?", РежимДиалогаВопрос.ДаНет);
	Иначе
		Группа2ПриСменеСтраницыЗавершение(КодВозвратаДиалога.Да, Новый Структура);
		ТекСтр = Элементы.Группа2.ТекущаяСтраница;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Группа2ПриСменеСтраницыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ТекСтр = Элементы.Группа2.ТекущаяСтраница;
		ТЧЗаказы.Очистить();
		ТЧСтрокиЗаказов.Очистить();
		
		Если Элементы.Группа2.ТекущаяСтраница = Элементы.Группа3 Тогда
			РежимСборкиПриИзменении(Неопределено);
			Если РежимСборки = "По заказам" Тогда
				ТабличнаяЧастьПриАктивизацииСтроки(Неопределено);	
			Иначе	
				ТЧЗаказыПриАктивизацииСтроки(Неопределено);
			КонецЕсли;
		Иначе
			Элементы.ТЧЗаказы.Видимость = Ложь;
			Элементы.ТабличнаяЧасть.Видимость = Ложь;
			Если Элементы.Группа2.ТекущаяСтраница = Элементы.Группа4 Тогда
				СписокЗаказовПриАктивизацииСтроки(Неопределено);
			Иначе
				СписокЗаказовПеремещениеПриАктивизацииСтроки(Неопределено);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Элементы.Группа2.ТекущаяСтраница = ТекСтр;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаказовПриАктивизацииСтроки(Элемент)
	Если Элементы.ТЧСтрокиЗаказовПрименить.Доступность И НЕ ТекСтрокаСпискаСамовывоз = Неопределено И НЕ Элементы.СписокЗаказов.ТекущаяСтрока = ТекСтрокаСпискаСамовывоз Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("СписокЗаказовПриАктивизацииСтрокиЗавершение", ЭтаФорма), "При переходе на другую строку изменения не будут сохранены. Продолжить?", РежимДиалогаВопрос.ДаНет);
	Иначе
		Если ТекСтрокаСпискаСамовывоз = Неопределено Тогда
			ТекДанные = Элементы.СписокЗаказов.ТекущиеДанные;
			Если Не ТекДанные = Неопределено Тогда
				ЗаполнитьДанныеМЛ(ТекДанные.Ссылка, ТекДанные.Реализация);
			Иначе
				ТЧЗаказы.Очистить();
				ТЧСтрокиЗаказов.Очистить();
			КонецЕсли;
			УстановитьОтботСтрок();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаказовПриАктивизацииСтрокиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Элементы.ТЧСтрокиЗаказовПрименить.Доступность = Ложь;
		ТекСтрокаСпискаСамовывоз = Неопределено;
		ТекДанные = Элементы.СписокЗаказов.ТекущиеДанные;
		Если Не ТекДанные = Неопределено Тогда
			ЗаполнитьДанныеМЛ(ТекДанные.Ссылка, ТекДанные.Реализация);
		Иначе
			ТЧЗаказы.Очистить();
			ТЧСтрокиЗаказов.Очистить();
		КонецЕсли;
		УстановитьОтботСтрок();
	Иначе
		Элементы.СписокЗаказов.ТекущаяСтрока = ТекСтрокаСпискаСамовывоз;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРеализацию(Команда)
	ТекДанные = Элементы.СписокЗаказов.ТекущиеДанные;
	Если Не ТекДанные = Неопределено Тогда
		СоздатьРеализацииНаСервере(ТекДанные.Ссылка, ТекДанные.Реализация);
		Элементы.СписокЗаказов.Обновить();
		СписокЗаказовПриАктивизацииСтроки(Неопределено);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура СоздатьРеализацииНаСервере(ЗаказКлиента, Реализация)
	
	ПроводитьДокументы = Истина;
	СоздаватьСчетНаОплатуПокупателю = Истина;
	
	Если НЕ ЗначениеЗаполнено(Реализация) Тогда
		Если ТипЗнч(ЗаказКлиента) = Тип("ДокументСсылка.ЗаказНаВозвратОтКлиента") Тогда
			Если ЗначениеЗаполнено(ЗаказКлиента.Организация) Тогда
				Если ЗаказКлиента.БезвозмезднаяПередача Тогда
					НоваяРеализация = Документы.ОприходованиеТоваров.СоздатьДокумент();
					НоваяРеализация.Заполнить(ЗаказКлиента);
					НоваяРеализация.Записать(?(ПроводитьДокументы, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));//всегда непроведенным, т.к. нужно закрывать смену вручную
					Реализация = НоваяРеализация.Ссылка; 
				ИначеЕсли ЗаказКлиента.ПродажаВРозницу Тогда
					НоваяРеализация = Документы.РозничнаяПродажа.СоздатьДокумент();
					НоваяРеализация.Заполнить(ЗаказКлиента);
					НоваяРеализация.Записать(РежимЗаписиДокумента.Запись);//всегда непроведенным, т.к. нужно закрывать смену вручную
					Реализация = НоваяРеализация.Ссылка; 
				Иначе
					НоваяРеализация = Документы.ВозвратТоваровОтПокупателя.СоздатьДокумент();
					НоваяРеализация.Заполнить(ЗаказКлиента);
					НоваяРеализация.Записать(?(ПроводитьДокументы, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
					Реализация = НоваяРеализация.Ссылка;
					НовыйСчФ = Документы.СчетФактураВыданный.СоздатьДокумент();
					НовыйСчФ.Заполнить(НоваяРеализация.Ссылка);
					НовыйСчФ.Записать(?(ПроводитьДокументы, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
				КонецЕсли;
			Иначе	
				НоваяРеализация = Документы.УЧ_Возврат.СоздатьДокумент();
				НоваяРеализация.Заполнить(ЗаказКлиента);
				НоваяРеализация.Записать(?(ПроводитьДокументы, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
				Реализация = НоваяРеализация.Ссылка; 
			КонецЕсли;
			
		Иначе
			Если ЗначениеЗаполнено(ЗаказКлиента.Организация) Тогда
				Если ЗаказКлиента.БезвозмезднаяПередача Тогда
					НоваяРеализация = Документы.ТребованиеНакладная.СоздатьДокумент();
					НоваяРеализация.Заполнить(ЗаказКлиента);
					НоваяРеализация.Записать(?(ПроводитьДокументы, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));//всегда непроведенным, т.к. нужно закрывать смену вручную
					Реализация = НоваяРеализация.Ссылка; 
				ИначеЕсли ЗаказКлиента.ПродажаВРозницу Тогда
					НоваяРеализация = Документы.РозничнаяПродажа.СоздатьДокумент();
					НоваяРеализация.Заполнить(ЗаказКлиента);
					НоваяРеализация.Записать(РежимЗаписиДокумента.Запись);//всегда непроведенным, т.к. нужно закрывать смену вручную
					Реализация = НоваяРеализация.Ссылка; 
				Иначе
					НоваяРеализация = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
					НоваяРеализация.Заполнить(ЗаказКлиента);
					НоваяРеализация.Записать(?(ПроводитьДокументы, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
					Реализация = НоваяРеализация.Ссылка;
					Если СоздаватьСчетНаОплатуПокупателю Тогда
						НовыйСчет = Документы.СчетНаОплатуПокупателю.СоздатьДокумент();
						НовыйСчет.Заполнить(НоваяРеализация.Ссылка);
						Попытка
							НовыйСчет.Записать(?(ПроводитьДокументы, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));				
						Исключение
							НовыйСчет.Записать();				
						КонецПопытки;
						НоваяРеализация.СчетНаОплатуПокупателю = НовыйСчет.Ссылка;
						НоваяРеализация.Записать();
					КонецЕсли;
					НовыйСчФ = Документы.СчетФактураВыданный.СоздатьДокумент();
					НовыйСчФ.Заполнить(НоваяРеализация.Ссылка);
					НовыйСчФ.Записать(?(ПроводитьДокументы, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
				КонецЕсли;
			Иначе	
				НоваяРеализация = Документы.УЧ_Реализация.СоздатьДокумент();
				НоваяРеализация.Заполнить(ЗаказКлиента);
				НоваяРеализация.Записать(?(ПроводитьДокументы, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
				Реализация = НоваяРеализация.Ссылка; 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоОткрытыеЗаказыПриИзменении(Элемент)
	СписокЗаказов.Параметры.УстановитьЗначениеПараметра("ТолькоОткрытыеЗаказы", ТолькоОткрытыеЗаказы);
	РасчитатьЗаголовки();
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтгрузкиПриИзменении(Элемент)
	Список.Параметры.УстановитьЗначениеПараметра("Дата1", НачалоДня(ДатаОтгрузки));
	СписокЗаказов.Параметры.УстановитьЗначениеПараметра("Дата1", НачалоДня(ДатаОтгрузки));
	СписокЗаказовПеремещение.Параметры.УстановитьЗначениеПараметра("Дата1", НачалоДня(ДатаОтгрузки));
	Список.Параметры.УстановитьЗначениеПараметра("Дата2", КонецДня(ДатаОтгрузки));
	СписокЗаказов.Параметры.УстановитьЗначениеПараметра("Дата2", КонецДня(ДатаОтгрузки));
	СписокЗаказовПеремещение.Параметры.УстановитьЗначениеПараметра("Дата2", КонецДня(ДатаОтгрузки));
	РасчитатьЗаголовки();
КонецПроцедуры

&НаКлиенте
Процедура ТолькоВесовыеПозицииПриИзменении(Элемент)
	Список.Параметры.УстановитьЗначениеПараметра("ТолькоВесовыеПозиции", ТолькоВесовыеПозиции);
	СписокЗаказов.Параметры.УстановитьЗначениеПараметра("ТолькоВесовыеПозиции", ТолькоВесовыеПозиции);
	Элементы.Список.Обновить();
	Элементы.СписокЗаказов.Обновить();
	Если Элементы.Группа2.ТекущаяСтраница = Элементы.Группа3 Тогда
		СписокПриАктивизацииСтроки(Элемент);
	ИначеЕсли Элементы.Группа2.ТекущаяСтраница = Элементы.Группа4 Тогда
		СписокЗаказовПриАктивизацииСтроки(Элемент);
	Иначе
		СписокЗаказовПеремещениеПриАктивизацииСтроки(Элемент);		
	КонецЕсли;
	РасчитатьЗаголовки();
КонецПроцедуры

&НаКлиенте
Процедура РазбитьКоличествоПоСериям(Команда)
	НовоеКоличество = 0;
	ПоказатьВводЧисла(Новый ОписаниеОповещения("РазбитьКоличествоПоСериямЗавершение", ЭтаФорма, Новый Структура("НовоеКоличество", НовоеКоличество)), НовоеКоличество, "Введите количество новой серии:", 15, 3);
КонецПроцедуры

&НаКлиенте
Процедура РазбитьКоличествоПоСериямЗавершение(Число, ДополнительныеПараметры) Экспорт
	
	НовоеКоличество = ?(Число = Неопределено, ДополнительныеПараметры.НовоеКоличество, Число);
	
	ИндексСтроки = Элементы.ТЧСтрокиЗаказов.ТекущаяСтрока;
	ТекСтрока = ТЧСтрокиЗаказов.НайтиПоИдентификатору(ИндексСтроки);
	
	Если НовоеКоличество И НовоеКоличество < ТекСтрока.Количество Тогда
		
		//Элементы.ТЧСтрокиЗаказов.ОтборСтрок = Неопределено;
		
		НоваяСтрока = ТЧСтрокиЗаказов.Вставить(ТЧСтрокиЗаказов.Индекс(ТекСтрока));
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		НоваяСтрока.ДатаПроизводства = Дата('00010101');
		НоваяСтрока.СерияНоменклатуры = Неопределено;
		НоваяСтрока.Количество = НовоеКоличество;
		НоваяСтрока.КоличествоЗаказ = НовоеКоличество;
		НоваяСтрока.ЕстьИзменениеСтроки = Истина;
		ТекСтрока.Количество = ТекСтрока.Количество - НовоеКоличество;
		ТекСтрока.КоличествоЗаказ = ТекСтрока.КоличествоЗаказ - НовоеКоличество;
		ТекСтрока.ЕстьИзменениеСтроки = Истина;
		Элементы.ТЧСтрокиЗаказов.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Элементы.ТЧСтрокиЗаказов.ТекущийЭлемент = Элементы.ТЧСтрокиЗаказовДатаПроизводства; 
		Элементы.ТЧСтрокиЗаказов.ИзменитьСтроку();
		
		//Элементы.ТЧСтрокиЗаказов.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("Номенклатура", ТекСтрока.Номенклатура));
		
		Элементы.ТЧСтрокиЗаказовПрименить.Доступность = Истина;
		
		Если Элементы.Группа2.ТекущаяСтраница = Элементы.Группа3 Тогда
			Если РежимСборки = "По заказам" Тогда
				ТабличнаяЧастьПриАктивизацииСтроки(Неопределено);
			Иначе
				ТЧЗаказыПриАктивизацииСтроки(Неопределено);	
			КонецЕсли;
			//Иначе
			//	Если Элементы.Группа2.ТекущаяСтраница = Элементы.Группа4 Тогда
			//		СписокЗаказовПриАктивизацииСтроки(Неопределено);
			//	Иначе
			//		СписокЗаказовПеремещениеПриАктивизацииСтроки(Неопределено);
			//	КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	ЗаполнитьСтрокиДляОформленияПриРазделенииПоСериям();
КонецПроцедуры

&НаКлиенте
Процедура ТЧСтрокиЗаказовДатаПроизводстваПриИзменении(Элемент)
	Элементы.ТЧСтрокиЗаказов.ТекущиеДанные.ЕстьИзменениеСтроки = Истина;
	Элементы.ТЧСтрокиЗаказовПрименить.Доступность = Истина;
	ТекСтрокаСписка = Элементы.Список.ТекущаяСтрока;
	ТекСтрокаСпискаСамовывоз = Элементы.СписокЗаказов.ТекущаяСтрока;
	ТекСтрокаСпискаПеремещение = Элементы.СписокЗаказовПеремещение.ТекущаяСтрока;
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьИзменения(Команда) 
	
	ЕстьОСГНижеНормыТекстВопроса = ПроверитьОСГНаСоответствиеНормам();
	Если ЕстьОСГНижеНормыТекстВопроса = Неопределено Тогда
		
		МассивРеализаций = МассивРеализаций();
		
		Всего = МассивРеализаций.Количество();
		ТекРеализация = 0;
		
		Для каждого ТекДанные Из МассивРеализаций Цикл
			ТекРеализация = ТекРеализация + 1;
			Состояние("Перезапись реализаций", ТекРеализация / Всего * 100, ТекДанные);
			ИзменитьКоличествоВРеализации(ТекДанные);
		КонецЦикла;
		Элементы.ТЧСтрокиЗаказовПрименить.Доступность = Ложь;
		ТекСтрокаСписка = Неопределено;
		ТекСтрокаСпискаСамовывоз = Неопределено;
		ТекСтрокаСпискаПеремещение = Неопределено;
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеОтветаОСГНормы",ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения,ЕстьОСГНижеНормыТекстВопроса,РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;

КонецПроцедуры  

&НаКлиенте
Процедура ВыполнитьПослеОтветаОСГНормы(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		МассивРеализаций = МассивРеализаций();
		
		Всего = МассивРеализаций.Количество();
		ТекРеализация = 0;
		
		Для каждого ТекДанные Из МассивРеализаций Цикл
			ТекРеализация = ТекРеализация + 1;
			Состояние("Перезапись реализаций", ТекРеализация / Всего * 100, ТекДанные);
			ИзменитьКоличествоВРеализации(ТекДанные);
		КонецЦикла;
		Элементы.ТЧСтрокиЗаказовПрименить.Доступность = Ложь;
		ТекСтрокаСписка = Неопределено;
		ТекСтрокаСпискаСамовывоз = Неопределено;
		ТекСтрокаСпискаПеремещение = Неопределено;
	КонецЕсли;

КонецПроцедуры


Функция ПроверитьОСГНаСоответствиеНормам() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЧСтрокиЗаказов.ЗаказКлиента КАК ЗаказКлиента,
		|	ТЧСтрокиЗаказов.СерияНоменклатуры КАК СерияНоменклатуры,
		|	ТЧСтрокиЗаказов.ОСГПроценты КАК ОСГПроценты
		|ПОМЕСТИТЬ ВТТЧСтрокиЗаказов
		|ИЗ
		|	&ТЧСтрокиЗаказов КАК ТЧСтрокиЗаказов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТТЧСтрокиЗаказов.ЗаказКлиента.Представление КАК ПредставлениеЗаказа
		|ИЗ
		|	ВТТЧСтрокиЗаказов КАК ВТТЧСтрокиЗаказов
		|ГДЕ
		|	ВТТЧСтрокиЗаказов.СерияНоменклатуры <> Значение(Справочник.СерииНоменклатуры.ПустаяСсылка) И ВТТЧСтрокиЗаказов.ОСГПроценты < 60";
	Запрос.УстановитьПараметр("ТЧСтрокиЗаказов", ТЧСтрокиЗаказов.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ТекстВопроса = "Есть выбранные серии с оставшимся сроком годности (ОСГ) ниже нормы в следующих заказах: " + Символы.ПС;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекстВопроса = ТекстВопроса + ВыборкаДетальныеЗаписи.ПредставлениеЗаказа + " " + Символы.ПС; 
	КонецЦикла;
	ТекстВопроса = ТекстВопроса + "Применить изменения?";
	Возврат ТекстВопроса;
	КонецЕсли;

КонецФункции

&НаСервере
Функция МассивРеализаций()
	
	ТЧ = ТЧСтрокиЗаказов.Выгрузить();
	ТЧ.Свернуть("Реализация");
	
	МассивРеализаций = Новый Массив;
	Для каждого ТекРеал Из ТЧ Цикл
		Если ТЧСтрокиЗаказов.НайтиСтроки(Новый Структура("Реализация, ЕстьИзменениеСтроки", ТекРеал.Реализация, Истина)).Количество() Тогда
			МассивРеализаций.Добавить(ТекРеал.Реализация);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивРеализаций;
	
КонецФункции // ()

&НаКлиенте
Процедура ТЧСтрокиЗаказовСерияНоменклатурыПриИзменении(Элемент)
	ТекДанные = Элементы.ТЧСтрокиЗаказов.ТекущиеДанные;
	Элементы.ТЧСтрокиЗаказов.ТекущиеДанные.ЕстьИзменениеСтроки = Истина;
	Элементы.ТЧСтрокиЗаказовПрименить.Доступность = Истина;
	ТекСтрокаСписка = Элементы.Список.ТекущаяСтрока;
	ТекСтрокаСпискаСамовывоз = Элементы.СписокЗаказов.ТекущаяСтрока;
	ТекСтрокаСпискаПеремещение = Элементы.СписокЗаказовПеремещение.ТекущаяСтрока;
	Если Не ЗначениеЗаполнено(ТекДанные.СерияНоменклатуры) Тогда
		 ТекДанные.ОСГ = ""; 
		 ТекДанные.ОСГПроценты = 0;
	Иначе
		СтруктураОСГ = ЗаполнитьОСГДляСерии(ТекДанные.СерияНоменклатуры, ДатаОтгрузки);
		ТекДанные.ОСГ = СтруктураОСГ.ОСГ;
		ТекДанные.ОСГПроценты = СтруктураОСГ.ОСГПроцент;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТЧСтрокиЗаказовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьПриАктивизацииСтроки(Элемент)
	ТекСтрока = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Элементы.ТЧСтрокиЗаказов.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("ЗаказКлиента", ПредопределенноеЗначение("Документ.ЗаказКлиента.ПустаяСсылка")));
	Иначе
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ЗаказКлиента", ТекСтрока.ЗаказКлиента);	
		Если ТолькоВесовыеПозиции Тогда
			СтруктураОтбора.Вставить("НоменклатураВесовой", Истина);		
		КонецЕсли;
		Если ТолькоБезСерий Тогда
			СтруктураОтбора.Вставить("СерияНоменклатуры", ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка"));		
		КонецЕсли;
		
		Элементы.ТЧСтрокиЗаказов.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора); 
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура РежимСборкиПриИзменении(Элемент)
	Если РежимСборки = "По заказам" Тогда
		Элементы.ТЧЗаказы.Видимость = Ложь;
		Элементы.ТабличнаяЧасть.Видимость = (Элементы.Группа2.ТекущаяСтраница = Элементы.Группа3);
	Иначе
		Элементы.ТабличнаяЧасть.Видимость = Ложь;
		Элементы.ТЧЗаказы.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ТабличнаяЧастьЗаказКлиента" Тогда
		ПоказатьЗначение(, Элементы.ТабличнаяЧасть.ТекущиеДанные.ЗаказКлиента);
	ИначеЕсли ЗначениеЗаполнено(Элементы.ТабличнаяЧасть.ТекущиеДанные.Реализация) Тогда
		ПоказатьЗначение(, Элементы.ТабличнаяЧасть.ТекущиеДанные.Реализация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СтатусЗаказСобранНаСервере(Заявки, ИмяКоманды)
	
	Если ИмяКоманды = "СтатусЗаказКОтгрузке" Тогда
		Точка = Перечисления.СтатусыЗаказовКлиентов.ВРаботе;
	Иначе
		Точка = Перечисления.СтатусыЗаказовКлиентов.Собран;
	КонецЕсли;
	
	Для каждого ТекЗаявка Из Заявки Цикл
		Об = ТекЗаявка.ПолучитьОбъект();
		Об.Статус = Точка;
		Если Об.Проведен Тогда
			Об.Записать(РежимЗаписиДокумента.Проведение);
		Иначе	
			Об.Записать();
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусЗаказСобран(Команда)
	ВыдСтроки = Элементы.ТабличнаяЧасть.ВыделенныеСтроки;
	МассивЗаказов = Новый Массив;
	Для каждого ТекСтрока Из ВыдСтроки Цикл
		МассивЗаказов.Добавить(Элементы.ТабличнаяЧасть.ДанныеСтроки(ТекСтрока).ЗаказКлиента);
	КонецЦикла;
	СтатусЗаказСобранНаСервере(МассивЗаказов, Команда.Имя);
	Элементы.Список.Обновить();
	Элементы.ТабличнаяЧасть.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура СвернутьКоличествоПоСерии(Команда)
	ЕстьИзменения = Ложь;
	СвернутьКоличествоПоСерииСервер(ЕстьИзменения);
	Если ЕстьИзменения Тогда
		Элементы.ТЧСтрокиЗаказовПрименить.Доступность = Истина;
	КонецЕсли;
	
	Если Элементы.Группа2.ТекущаяСтраница = Элементы.Группа3 Тогда
		Если РежимСборки = "По заказам" Тогда
			ТабличнаяЧастьПриАктивизацииСтроки(Неопределено);
		Иначе
			ТЧЗаказыПриАктивизацииСтроки(Неопределено);	
		КонецЕсли;
		//Иначе
		//	Если Элементы.Группа2.ТекущаяСтраница = Элементы.Группа4 Тогда
		//		СписокЗаказовПриАктивизацииСтроки(Неопределено);
		//	Иначе
		//		СписокЗаказовПеремещениеПриАктивизацииСтроки(Неопределено);
		//	КонецЕсли;
	КонецЕсли;
	ЗаполнитьСтрокиДляОформленияПриРазделенииПоСериям();
КонецПроцедуры

&НаСервере
Процедура СвернутьКоличествоПоСерииСервер(ЕстьИзменения)
	
	АктивнаяСтрока = ТЧСтрокиЗаказов.НайтиПоИдентификатору(Элементы.ТЧСтрокиЗаказов.ТекущаяСтрока);
	НайденныеСтрокиПолной = ТЧСтрокиЗаказов.НайтиСтроки(Новый Структура("Реализация, Номенклатура, НомерСтрокиРеализации", АктивнаяСтрока.Реализация, АктивнаяСтрока.Номенклатура, АктивнаяСтрока.НомерСтрокиРеализации));
	МассивКУдалению = Новый Массив;
	Для каждого ТекСтрока Из НайденныеСтрокиПолной Цикл
		Если Не АктивнаяСтрока.ПолучитьИдентификатор() = ТекСтрока.ПолучитьИдентификатор() Тогда
			АктивнаяСтрока.Количество = АктивнаяСтрока.Количество + ТекСтрока.Количество;
			АктивнаяСтрока.КоличествоЗаказ = АктивнаяСтрока.КоличествоЗаказ + ТекСтрока.КоличествоЗаказ;
			МассивКУдалению.Добавить(ТекСтрока);
			АктивнаяСтрока.ЕстьИзменениеСтроки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекСтрока Из МассивКУдалению Цикл
		ТЧСтрокиЗаказов.Удалить(ТекСтрока);
		ЕстьИзменения = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаказовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Не Элементы.Список.РежимВыбора Тогда
		Если Поле.Имя = "СписокЗаказовРеализация" Тогда
			СтандартнаяОбработка = Ложь;
			ПоказатьЗначение(, Элементы.СписокЗаказов.ТекущиеДанные.Реализация);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РасчитатьЗаголовки()
	
	Схема = Элементы.Список.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	
	Настройки = Элементы.Список.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДоступныеПредприятия", ПараметрыСеанса.ДоступныеПредприятия);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Дата1", НачалоДня(ДатаОтгрузки));
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Дата2", КонецДня(ДатаОтгрузки));
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТолькоОткрытые", ТолькоОткрытые);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТолькоВесовыеПозиции", ТолькоВесовыеПозиции);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТолькоБезСерий", ТолькоБезСерий);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	КоличествоМЛ = Результат.Количество();
	
	
	Схема = Элементы.СписокЗаказов.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	
	Настройки = Элементы.СписокЗаказов.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДоступныеПредприятия", ПараметрыСеанса.ДоступныеПредприятия);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Дата1", НачалоДня(ДатаОтгрузки));
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Дата2", КонецДня(ДатаОтгрузки));
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТолькоОткрытыеЗаказы", ТолькоОткрытые);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТолькоВесовыеПозиции", ТолькоВесовыеПозиции);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТолькоБезСерий", ТолькоБезСерий);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Самовывоз", Справочники.СпособыДоставки.Самовывоз);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	КоличествоЗаказы = Результат.Количество();
	
	Схема = Элементы.СписокЗаказовПеремещение.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	
	Настройки = Элементы.СписокЗаказовПеремещение.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДоступныеПредприятия", ПараметрыСеанса.ДоступныеПредприятия);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Дата1", НачалоДня(ДатаОтгрузки));
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Дата2", КонецДня(ДатаОтгрузки));
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТолькоОткрытыеЗаказы", ТолькоОткрытые);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТолькоВесовыеПозиции", ТолькоВесовыеПозиции);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТолькоБезСерий", ТолькоБезСерий);
	//Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Самовывоз", Справочники.СпособыДоставки.Самовывоз);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	КоличествоЗаказыПеремещ = Результат.Количество();
	
	
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьЗаголовкинаКлиенте()
	РасчитатьЗаголовки();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПодключитьОбработчикОжидания("РасчитатьЗаголовкинаКлиенте", 180);
КонецПроцедуры

&НаКлиенте
Процедура ТолькоБезСерийПриИзменении(Элемент)
	Список.Параметры.УстановитьЗначениеПараметра("ТолькоБезСерий", ТолькоБезСерий);
	СписокЗаказов.Параметры.УстановитьЗначениеПараметра("ТолькоБезСерий", ТолькоБезСерий);
	СписокЗаказовПеремещение.Параметры.УстановитьЗначениеПараметра("ТолькоБезСерий", ТолькоБезСерий);
	Элементы.Список.Обновить();
	Элементы.СписокЗаказов.Обновить();
	Элементы.СписокЗаказовПеремещение.Обновить();
	Если Элементы.Группа2.ТекущаяСтраница = Элементы.Группа3 Тогда
		СписокПриАктивизацииСтроки(Элемент);
	ИначеЕсли Элементы.Группа2.ТекущаяСтраница = Элементы.Группа4 Тогда
		СписокЗаказовПриАктивизацииСтроки(Элемент);
	Иначе
		СписокЗаказовПеремещениеПриАктивизацииСтроки(Элемент);		
	КонецЕсли;
	РасчитатьЗаголовки();
КонецПроцедуры

&НаКлиенте
Процедура ТолькоОткрытыеЗаказыПеремещенияПриИзменении(Элемент)
	СписокЗаказовПеремещение.Параметры.УстановитьЗначениеПараметра("ТолькоОткрытыеЗаказы", ТолькоОткрытыеЗаказыПеремещения);
	РасчитатьЗаголовки();
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаказовПеремещениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Не Элементы.Список.РежимВыбора Тогда
		Если Поле.Имя = "СписокЗаказовПеремещениеРеализация" Тогда
			СтандартнаяОбработка = Ложь;
			ПоказатьЗначение(, Элементы.СписокЗаказовПеремещение.ТекущиеДанные.Реализация);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаказовПеремещениеПриАктивизацииСтроки(Элемент)
	Если Элементы.ТЧСтрокиЗаказовПрименить.Доступность И НЕ ТекСтрокаСпискаПеремещение = Неопределено И НЕ Элементы.СписокЗаказовПеремещение.ТекущаяСтрока = ТекСтрокаСпискаПеремещение Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("СписокЗаказовПеремещениеПриАктивизацииСтрокиЗавершение", ЭтаФорма), "При переходе на другую строку изменения не будут сохранены. Продолжить?", РежимДиалогаВопрос.ДаНет);
	Иначе
		Если ТекСтрокаСпискаПеремещение = Неопределено Тогда
			ТекДанные = Элементы.СписокЗаказовПеремещение.ТекущиеДанные;
			Если Не ТекДанные = Неопределено Тогда
				ЗаполнитьДанныеМЛ(ТекДанные.Ссылка, ТекДанные.Реализация);
			Иначе
				ТЧЗаказы.Очистить();
				ТЧСтрокиЗаказов.Очистить();
			КонецЕсли;
			УстановитьОтботСтрок();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаказовПеремещениеПриАктивизацииСтрокиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Элементы.ТЧСтрокиЗаказовПрименить.Доступность = Ложь;
		ТекДанные = Элементы.СписокЗаказовПеремещение.ТекущиеДанные;
		ТекСтрокаСпискаПеремещение = Неопределено;
		Если Не ТекДанные = Неопределено Тогда
			ЗаполнитьДанныеМЛ(ТекДанные.Ссылка, ТекДанные.Реализация);
		Иначе
			ТЧЗаказы.Очистить();
			ТЧСтрокиЗаказов.Очистить();
		КонецЕсли;
		УстановитьОтботСтрок();
	Иначе
		Элементы.СписокЗаказовПеремещение.ТекущаяСтрока = ТекСтрокаСпискаПеремещение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтботСтрок()
	
	Если Не Элементы.Группа2.ТекущаяСтраница = Элементы.Группа3 Тогда
		СтруктураОтбора = Новый Структура;
		Если ТолькоВесовыеПозиции Тогда
			СтруктураОтбора.Вставить("НоменклатураВесовой", Истина);		
		КонецЕсли;
		Если ТолькоБезСерий Тогда
			СтруктураОтбора.Вставить("СерияНоменклатуры", ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка"));		
		КонецЕсли;
		
		Если СтруктураОтбора.Количество() Тогда
			Элементы.ТЧСтрокиЗаказов.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
		Иначе
			Элементы.ТЧСтрокиЗаказов.ОтборСтрок = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


&НаСервереБезКонтекста
Процедура СтатусСогласованоНаСервереПеремещ(Заявки, ИмяКоманды)
	
	Если ИмяКоманды = "СтатусСогласованоПеремещ" Тогда
		Точка = Перечисления.СтатусыЗаказовПоставщикам.КПоступлению;
		//ИначеЕсли ИмяКоманды = "СтатусНеСогласовано" Тогда
		//	Точка = Перечисления.СтатусыЗаказовКлиентов.Новый;
	ИначеЕсли ИмяКоманды = "СтатусКОплатеПеремещ" Тогда
		Точка = Перечисления.СтатусыЗаказовПоставщикам.Закрыт;
		//ИначеЕсли ИмяКоманды = "СтатусОтменено" Тогда
		//	Точка = Перечисления.СтатусыЗаказовКлиентов.Отменен;
	Иначе
		Точка = Перечисления.СтатусыЗаказовКлиентов.Новый;
	КонецЕсли;
	
	Для каждого ТекЗаявка Из Заявки Цикл
		Об = ТекЗаявка.ПолучитьОбъект();
		Об.Статус = Точка;
		Если Об.Проведен Тогда
			Об.Записать(РежимЗаписиДокумента.Проведение);
		Иначе	
			Об.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура СтатусКОплатеПеремещ(Команда)
	ВыдСтроки = Элементы.СписокЗаказовПеремещение.ВыделенныеСтроки;
	СтатусСогласованоНаСервереПеремещ(ВыдСтроки, Команда.Имя);
	Элементы.СписокЗаказовПеремещение.Обновить();
	РасчитатьЗаголовки();
КонецПроцедуры

&НаКлиенте
Процедура СтатусСогласованоПеремещ(Команда)
	ВыдСтроки = Элементы.СписокЗаказовПеремещение.ВыделенныеСтроки;
	СтатусСогласованоНаСервереПеремещ(ВыдСтроки, Команда.Имя);
	Элементы.СписокЗаказовПеремещение.Обновить();
	РасчитатьЗаголовки();
КонецПроцедуры

&НаСервере
Процедура СоздатьПеремещенияНаСервере(ЗаказКлиента, Реализация)
	
	ПроводитьДокументы = Истина;
	
	Если НЕ ЗначениеЗаполнено(Реализация) Тогда
		Если ЗначениеЗаполнено(ЗаказКлиента.Организация) Тогда
			НоваяРеализация = Документы.ПеремещениеТоваров.СоздатьДокумент();
			НоваяРеализация.Заполнить(ЗаказКлиента);
			НоваяРеализация.Записать(?(ПроводитьДокументы, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			Реализация = НоваяРеализация.Ссылка;
		Иначе	
			НоваяРеализация = Документы.УЧ_ПеремещениеТоваров.СоздатьДокумент();
			НоваяРеализация.Заполнить(ЗаказКлиента);
			НоваяРеализация.Записать(?(ПроводитьДокументы, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			Реализация = НоваяРеализация.Ссылка; 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПеремещения(Команда)
	ТекДанные = Элементы.СписокЗаказовПеремещение.ТекущиеДанные;
	Если Не ТекДанные = Неопределено Тогда
		СоздатьПеремещенияНаСервере(ТекДанные.Ссылка, ТекДанные.Реализация);
		Элементы.СписокЗаказовПеремещение.Обновить();
		СписокЗаказовПеремещениеПриАктивизацииСтроки(Неопределено);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СортировкаНаименование(Команда)
	Сортировка = "Наименование";
	УстановитьСортировкуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СортировкаНомерСтроки(Команда)
	Сортировка = "НомерСтроки";
	УстановитьСортировкуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	Список.Параметры.УстановитьЗначениеПараметра("Склад", Склад);
	СписокЗаказов.Параметры.УстановитьЗначениеПараметра("Склад", Склад);
	СписокЗаказовПеремещение.Параметры.УстановитьЗначениеПараметра("Склад", Склад);
	РасчитатьЗаголовки();
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьСерииДляНоменклатурыНаСервере(ЭтоКомандаДляВыбраннойНоменклатуры,ЕстьИзменения,ВидТЧ)
	
	Если ЭтоКомандаДляВыбраннойНоменклатуры Тогда 
		ТекущийЗаказКлиента = Документы.ЗаказКлиента.ПустаяСсылка(); 
		Если ВидТЧ = "Доставка" Тогда
			ТекущийЗаказКлиента = Элементы.ТЧСтрокиЗаказов.ОтборСтрок.ЗаказКлиента;
		ИначеЕсли  ВидТЧ = "Самовывоз" Тогда
			ТекущийЗаказКлиента = Элементы.СписокЗаказов.ТекущаяСтрока;
		ИначеЕсли ВидТЧ = "Перемещение" Тогда 
			ТекущийЗаказКлиента = Элементы.СписокЗаказовПеремещение.ТекущаяСтрока;
		КонецЕсли;
		АктивнаяСтрока = ТЧСтрокиЗаказов.НайтиПоИдентификатору(Элементы.ТЧСтрокиЗаказов.ТекущаяСтрока);
		НайденныеСтрокиПолной = ТЧСтрокиЗаказов.НайтиСтроки(Новый Структура("Реализация, Номенклатура, НомерСтрокиРеализации, СерияНоменклатуры", АктивнаяСтрока.Реализация, АктивнаяСтрока.Номенклатура, АктивнаяСтрока.НомерСтрокиРеализации,Справочники.СерииНоменклатуры.ПустаяСсылка()));
		МассивКУдалению = Новый Массив;
		Для каждого ТекСтрока Из НайденныеСтрокиПолной Цикл
			Если Не АктивнаяСтрока.ПолучитьИдентификатор() = ТекСтрока.ПолучитьИдентификатор() Тогда
				АктивнаяСтрока.Количество = АктивнаяСтрока.Количество + ТекСтрока.Количество;
				АктивнаяСтрока.КоличествоЗаказ = АктивнаяСтрока.КоличествоЗаказ + ТекСтрока.КоличествоЗаказ;
				МассивКУдалению.Добавить(ТекСтрока);
				АктивнаяСтрока.ЕстьИзменениеСтроки = Истина;
			КонецЕсли;
		КонецЦикла;
		Для каждого ТекСтрока Из МассивКУдалению Цикл
			ТЧСтрокиЗаказов.Удалить(ТекСтрока);
		КонецЦикла;
	Иначе 
		ТекущийЗаказКлиента = Документы.ЗаказКлиента.ПустаяСсылка(); 
		Если ВидТЧ = "Доставка" Тогда
			ТекущийЗаказКлиента = Элементы.ТЧСтрокиЗаказов.ОтборСтрок.ЗаказКлиента;
		ИначеЕсли  ВидТЧ = "Самовывоз" Тогда
			ТекущийЗаказКлиента = Элементы.СписокЗаказов.ТекущаяСтрока;
		ИначеЕсли ВидТЧ = "Перемещение" Тогда 
			ТекущийЗаказКлиента = Элементы.СписокЗаказовПеремещение.ТекущаяСтрока;
		КонецЕсли;
		Для Каждого СтрокаТЧСтрокиЗаказов Из ТЧСтрокиЗаказов Цикл
			Если НЕ СтрокаТЧСтрокиЗаказов.ЗаказКлиента = ТекущийЗаказКлиента Тогда
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТЧСтрокиЗаказов.СерияНоменклатуры) Тогда
				Продолжить;
			КонецЕсли;
			НайденныеСтрокиПолной = ТЧСтрокиЗаказов.НайтиСтроки(Новый Структура("Реализация, Номенклатура, НомерСтрокиРеализации, ЗаказКлиента, СерияНоменклатуры", 
			СтрокаТЧСтрокиЗаказов.Реализация, СтрокаТЧСтрокиЗаказов.Номенклатура, СтрокаТЧСтрокиЗаказов.НомерСтрокиРеализации,ТекущийЗаказКлиента,Справочники.СерииНоменклатуры.ПустаяСсылка()));
			МассивКУдалению = Новый Массив;
			Для каждого ТекСтрока Из НайденныеСтрокиПолной Цикл
				Если Не СтрокаТЧСтрокиЗаказов.ПолучитьИдентификатор() = ТекСтрока.ПолучитьИдентификатор() Тогда
					СтрокаТЧСтрокиЗаказов.Количество = СтрокаТЧСтрокиЗаказов.Количество + ТекСтрока.Количество;
					СтрокаТЧСтрокиЗаказов.КоличествоЗаказ = СтрокаТЧСтрокиЗаказов.КоличествоЗаказ + ТекСтрока.КоличествоЗаказ;
					МассивКУдалению.Добавить(ТекСтрока);
					СтрокаТЧСтрокиЗаказов.ЕстьИзменениеСтроки = Истина;
				КонецЕсли;
			КонецЦикла;
			Для каждого ТекСтрока Из МассивКУдалению Цикл
				ТЧСтрокиЗаказов.Удалить(ТекСтрока);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетныйВидыСубконто.ВидСубконто КАК ВидСубконто,
	|	УчетныйВидыСубконто.ВидСубконто.ТипЗначения КАК ТипЗначения
	|ИЗ
	|	ПланСчетов.Учетный.ВидыСубконто КАК УчетныйВидыСубконто
	|ГДЕ
	|	УчетныйВидыСубконто.Ссылка.Код = ""41""";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаТипСубконто = РезультатЗапроса.Выбрать();
	МассивСубконто = Новый Массив;
	Пока ВыборкаТипСубконто.Следующий() Цикл
		Если ВыборкаТипСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
			МассивСубконто.Вставить(0, ВыборкаТипСубконто.ВидСубконто);
		ИначеЕсли ВыборкаТипСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Склады")) Тогда
			МассивСубконто.Вставить(1, ВыборкаТипСубконто.ВидСубконто);
		ИначеЕсли ВыборкаТипСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.СерииНоменклатуры")) Тогда
			МассивСубконто.Вставить(2, ВыборкаТипСубконто.ВидСубконто);
		КонецЕсли;
	КонецЦикла; 
	СкладНоменклатуры = ТекущийЗаказКлиента.Склад;
	ПредприятиеНоменклатуры = ТекущийЗаказКлиента.Предприятие;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧСтрокиЗаказов.НомерСтроки КАК НомерСтроки,
	|	ТЧСтрокиЗаказов.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТЧСтрокиЗаказов.Номенклатура КАК НоменклатураВТЧ,
	|	ТЧСтрокиЗаказов.КоличествоЗаказ КАК КоличествоЗаказ,
	|	ТЧСтрокиЗаказов.Количество КАК Количество
	|ПОМЕСТИТЬ ВТТЧЗаказы
	|ИЗ
	|	&ТЧСтрокиЗаказов КАК ТЧСтрокиЗаказов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТЧЗаказы.НомерСтроки КАК НомерСтроки,
	|	ВТТЧЗаказы.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ВТТЧЗаказы.НоменклатураВТЧ КАК НоменклатураВТЧ,
	|	ВТТЧЗаказы.КоличествоЗаказ КАК КоличествоЗаказ,
	|	ВЫБОР
	|		КОГДА ВТТЧЗаказы.Количество = 0
	|			ТОГДА ВТТЧЗаказы.КоличествоЗаказ
	|		ИНАЧЕ ВТТЧЗаказы.Количество
	|	КОНЕЦ КАК КоличествоДляСерии,
	|	УчетныйОстатки.Субконто3 КАК СерияНоменклатуры,
	|	ВЫРАЗИТЬ(УчетныйОстатки.Субконто3 КАК Справочник.СерииНоменклатуры).ДатаПроизводства КАК ДатаПроизводства,
	|	ЕСТЬNULL(УчетныйОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
	|	ВТТЧЗаказы.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА УчетныйОстатки.Субконто3 ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА (ВЫРАЗИТЬ(УчетныйОстатки.Субконто3 КАК Справочник.СерииНоменклатуры)) = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|			ТОГДА 0
	|		КОГДА ВЫРАЗИТЬ(УчетныйОстатки.Субконто3 КАК Справочник.СерииНоменклатуры).СрокГодности = 0
	|			ТОГДА РАЗНОСТЬДАТ(ВЫРАЗИТЬ(УчетныйОстатки.Субконто3 КАК Справочник.СерииНоменклатуры).ДатаПроизводства, ВЫРАЗИТЬ(УчетныйОстатки.Субконто3 КАК Справочник.СерииНоменклатуры).ГоденДо, ДЕНЬ)
	|		ИНАЧЕ ВЫРАЗИТЬ(УчетныйОстатки.Субконто3 КАК Справочник.СерииНоменклатуры).СрокГодности
	|	КОНЕЦ КАК СрокГодности,
	|	ВЫБОР
	|		КОГДА УчетныйОстатки.Субконто3 ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ РАЗНОСТЬДАТ(&ДатаОтгрузки, ВЫРАЗИТЬ(УчетныйОстатки.Субконто3 КАК Справочник.СерииНоменклатуры).ГоденДо, ДЕНЬ)
	|	КОНЕЦ КАК ОсталосьДнейСрокаГодности
	|ИЗ
	|	ВТТЧЗаказы КАК ВТТЧЗаказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Учетный.Остатки(
	|				&Период,
	|				Счет.Код = ""41"",
	|				&МассивСубконто,
	|				Предприятия = &Предприятия
	|					И Субконто2 = &Склад
	|					И Субконто3 <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|					И Субконто1 В
	|						(ВЫБРАТЬ
	|							ВТТЧ.НоменклатураВТЧ КАК НоменклатураВТЧ
	|						ИЗ
	|							ВТТЧЗаказы КАК ВТТЧ)) КАК УчетныйОстатки
	|		ПО ВТТЧЗаказы.НоменклатураВТЧ = УчетныйОстатки.Субконто1
	|ГДЕ
	|	ЕСТЬNULL(УчетныйОстатки.КоличествоОстаток, 0) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	ДатаПроизводства
	|ИТОГИ
	|	МИНИМУМ(ИдентификаторСтроки),
	|	МАКСИМУМ(КоличествоЗаказ),
	|	МАКСИМУМ(КоличествоДляСерии),
	|	СУММА(КоличествоОстаток),
	|	МАКСИМУМ(Количество)
	|ПО
	|	НоменклатураВТЧ";
	КвалификаторКоличество = Новый КвалификаторыЧисла(17,3);
	ТЗТЧСтрокиЗакзов = Новый ТаблицаЗначений;
	ТЗТЧСтрокиЗакзов.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура")); 
	ТЗТЧСтрокиЗакзов.Колонки.Добавить("КоличествоЗаказ",Новый ОписаниеТипов("Число",КвалификаторКоличество));
	ТЗТЧСтрокиЗакзов.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число",КвалификаторКоличество)); 
	ТЗТЧСтрокиЗакзов.Колонки.Добавить("ИдентификаторСтроки",Новый ОписаниеТипов("Число"));  
	ТЗТЧСтрокиЗакзов.Колонки.Добавить("НомерСтроки",Новый ОписаниеТипов("Число"));
	Если ЭтоКомандаДляВыбраннойНоменклатуры Тогда
		НоваяСтрокаТЗТЧСтрокиЗакзов = ТЗТЧСтрокиЗакзов.Добавить();	
		НоваяСтрокаТЗТЧСтрокиЗакзов.Номенклатура = АктивнаяСтрока.Номенклатура;
		НоваяСтрокаТЗТЧСтрокиЗакзов.КоличествоЗаказ = АктивнаяСтрока.КоличествоЗаказ;
		НоваяСтрокаТЗТЧСтрокиЗакзов.Количество = АктивнаяСтрока.Количество;
		НоваяСтрокаТЗТЧСтрокиЗакзов.ИдентификаторСтроки = АктивнаяСтрока.ПолучитьИдентификатор();
	Иначе
		Для Каждого СтрТЧСтрокиЗаказов ИЗ ТЧСтрокиЗаказов Цикл
			Если СтрТЧСтрокиЗаказов.ЗаказКлиента = ТекущийЗаказКлиента И НЕ ЗначениеЗаполнено(СтрТЧСтрокиЗаказов.СерияНоменклатуры) Тогда
				НоваяСтрокаТЗТЧСтрокиЗакзов = ТЗТЧСтрокиЗакзов.Добавить();	
				НоваяСтрокаТЗТЧСтрокиЗакзов.Номенклатура = СтрТЧСтрокиЗаказов.Номенклатура;
				НоваяСтрокаТЗТЧСтрокиЗакзов.КоличествоЗаказ = СтрТЧСтрокиЗаказов.КоличествоЗаказ;
				НоваяСтрокаТЗТЧСтрокиЗакзов.Количество = СтрТЧСтрокиЗаказов.Количество;
				НоваяСтрокаТЗТЧСтрокиЗакзов.ИдентификаторСтроки = СтрТЧСтрокиЗаказов.ПолучитьИдентификатор();
			КонецЕсли;
		КонецЦикла;  
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущийЗаказКлиента,"Контрагент") И ТекущийЗаказКлиента.Контрагент <> Неопределено Тогда
		Если ТекущийЗаказКлиента.Контрагент.СвежиеСрокиГодности Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"УПОРЯДОЧИТЬ ПО НомерСтроки, ДатаПроизводства","УПОРЯДОЧИТЬ ПО НомерСтроки, ДатаПроизводства Убыв ");
		КонецЕсли;  
	КонецЕсли;
	Запрос.УстановитьПараметр("ТЧСтрокиЗаказов",ТЗТЧСтрокиЗакзов); 
	Запрос.УстановитьПараметр("Предприятия",ПредприятиеНоменклатуры); 
	Запрос.УстановитьПараметр("Склад",СкладНоменклатуры);
	Запрос.УстановитьПараметр("Период",КонецДня(ДатаОтгрузки));    
	Запрос.УстановитьПараметр("МассивСубконто",МассивСубконто);
	Если ЗначениеЗаполнено(ДатаОтгрузки) Тогда
		Запрос.УстановитьПараметр("ДатаОтгрузки",ДатаОтгрузки); 
	Иначе
		Запрос.УстановитьПараметр("ДатаОтгрузки",ТекущаяДата());
	КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНоменклатура.Следующий() Цикл
			ОсталосьРаспределить = ВыборкаНоменклатура.КоличествоДляСерии;
			ВыборкаСерии = ВыборкаНоменклатура.Выбрать();
			Пока ВыборкаСерии.Следующий() И ОсталосьРаспределить > 0 Цикл
				Распределить = ?(ОсталосьРаспределить <= ВыборкаСерии.КоличествоОстаток, ОсталосьРаспределить, ВыборкаСерии.КоличествоОстаток);
				ОсталосьРаспределить = ОсталосьРаспределить - Распределить;
				ТекСтрока = ТЧСтрокиЗаказов.НайтиПоИдентификатору(ВыборкаНоменклатура.ИдентификаторСтроки);
				Если ОсталосьРаспределить > 0 Тогда 
					ДобавленнаяСтрока = ТЧСтрокиЗаказов.Вставить(ТЧСтрокиЗаказов.Индекс(ТекСтрока));
					ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, ТекСтрока);
					ДобавленнаяСтрока.ДатаПроизводства = ВыборкаСерии.ДатаПроизводства;
					ДобавленнаяСтрока.СерияНоменклатуры = ВыборкаСерии.СерияНоменклатуры;
					//Расчет и заполнение ОСГ
					Если ЗначениеЗаполнено(ДобавленнаяСтрока.СерияНоменклатуры) Тогда
						Если ВыборкаСерии.ОсталосьДнейСрокаГодности <= 0 ИЛИ ВыборкаСерии.СрокГодности = 0 Тогда
							ДобавленнаяСтрока.ОСГ = "0 дн.(0%)";
							ДобавленнаяСтрока.ОСГПроценты = 0;
						Иначе
							ДобавленнаяСтрока.ОСГПроценты = Окр(ВыборкаСерии.ОсталосьДнейСрокаГодности / ВыборкаСерии.СрокГодности * 100,0,РежимОкругления.Окр15как20);
							ДобавленнаяСтрока.ОСГ = Строка(ВыборкаСерии.ОсталосьДнейСрокаГодности) + " дн.(" + Строка(ДобавленнаяСтрока.ОСГПроценты) + "%)"; 
						КонецЕсли;
					Иначе
						ДобавленнаяСтрока.ОСГ = "";
						ДобавленнаяСтрока.ОСГПроценты = 0;
					КонецЕсли;
					//получение разрядности количества заказа
					Разрядность = СтрНайти(ВыборкаНоменклатура.КоличествоЗаказ,",");
					Если Разрядность > 0 Тогда
						Дробь = Сред(ВыборкаНоменклатура.КоличествоЗаказ, Разрядность+1);
						Разрядность = СтрДлина(Дробь);
					КонецЕсли; 
					ДобавленнаяСтрока.Количество = ?(ВыборкаНоменклатура.Количество = 0,0,Распределить);
					ДобавленнаяСтрока.КоличествоЗаказ  =?(ВыборкаНоменклатура.КоличествоДляСерии = 0,0,ОКр(Распределить/ВыборкаНоменклатура.КоличествоДляСерии 
					* ВыборкаНоменклатура.КоличествоЗаказ,Разрядность,РежимОкругления.Окр15как10));
					ДобавленнаяСтрока.ЕстьИзменениеСтроки = Истина;
					ТекСтрока.Количество = ТекСтрока.Количество - ДобавленнаяСтрока.Количество;
					ТекСтрока.КоличествоЗаказ = ТекСтрока.КоличествоЗаказ - ДобавленнаяСтрока.КоличествоЗаказ;
					ТекСтрока.ЕстьИзменениеСтроки = Истина; 
				Иначе 
					ТекСтрока.ДатаПроизводства = ВыборкаСерии.ДатаПроизводства;
					ТекСтрока.СерияНоменклатуры = ВыборкаСерии.СерияНоменклатуры;
					Если ЗначениеЗаполнено(ТекСтрока.СерияНоменклатуры) Тогда
						Если ВыборкаСерии.ОсталосьДнейСрокаГодности <= 0 ИЛИ ВыборкаСерии.СрокГодности = 0 Тогда
							ТекСтрока.ОСГ = "0 дн.(0%)";
							ТекСтрока.ОСГПроценты = 0;
						Иначе
							ТекСтрока.ОСГПроценты = Окр(ВыборкаСерии.ОсталосьДнейСрокаГодности / ВыборкаСерии.СрокГодности * 100,0,РежимОкругления.Окр15как20);
							ТекСтрока.ОСГ = Строка(ВыборкаСерии.ОсталосьДнейСрокаГодности) + " дн.(" + Строка(ТекСтрока.ОСГПроценты) + "%)"; 
						КонецЕсли;
					Иначе
						ТекСтрока.ОСГ = "";
						ТекСтрока.ОСГПроценты = 0;
					КонецЕсли;
					ТекСтрока.ЕстьИзменениеСтроки = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла; 
		ЕстьИзменения = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСерииДляВсейНоменклатуры(Команда)
	
	Если Элементы.ТЧСтрокиЗаказовПрименить.Доступность = Истина Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеВопросаДляВсейНоменклатуры",ЭтотОбъект); 
		СписокКомандДляВопроса = Новый СписокЗначений;
		СписокКомандДляВопроса.Добавить(КодВозвратаДиалога.Да,"Применить изменения и продолжить");
		СписокКомандДляВопроса.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(ОписаниеОповещения,"Перед заполнением серий необходимо применить несохраненные изменения",СписокКомандДляВопроса);
	Иначе
		ЗаполнитьСерииДляВсейНоменклатурыНаКлиенте();	
	КонецЕсли; 
	#Область ИсходныйКод
	//Если Элементы.ТЧСтрокиЗаказовПрименить.Доступность = Истина Тогда
	//	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеВопросаДляВсейНоменклатуры",ЭтотОбъект); 
	//	СписокКомандДляВопроса = Новый СписокЗначений;
	//	СписокКомандДляВопроса.Добавить(КодВозвратаДиалога.Да,"Применить изменения и продолжить");
	//	СписокКомандДляВопроса.Добавить(КодВозвратаДиалога.Отмена);
	//	ПоказатьВопрос(ОписаниеОповещения,"Перед заполнением серий необходимо применить несохраненные изменения",СписокКомандДляВопроса);
	//Иначе
	//	ВидТЧ = "";
	//	Если Элементы.Группа2.ТекущаяСтраница = Элементы.Группа3 Тогда
	//		ВидТЧ = "Доставка";	
	//	ИначеЕсли Элементы.Группа2.ТекущаяСтраница = Элементы.Группа4 Тогда
	//		ВидТЧ = "Самовывоз"; 
	//	ИначеЕсли Элементы.Группа2.ТекущаяСтраница = Элементы.Группа9 Тогда
	//		ВидТЧ = "Перемещение"; 
	//	КонецЕсли;
	//	ЕстьИзменения = Ложь;
	//	ЭтоКомандаДляВыбраннойНоменклатуры = Ложь;
	//	ЗаполнитьСерииДляНоменклатурыНаСервере(ЭтоКомандаДляВыбраннойНоменклатуры,ЕстьИзменения,ВидТЧ); 
	//	Если ЕстьИзменения Тогда
	//		Элементы.ТЧСтрокиЗаказовПрименить.Доступность = Истина;
	//	КонецЕсли; 
	//	ЗаполнитьСтрокиДляОформленияПриРазделенииПоСериям();
	//КонецЕсли; 
	#КонецОбласти
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСерииДляВсейНоменклатурыНаКлиенте(ПрименитьИзменения = Ложь)
	
	Если ПрименитьИзменения Тогда
		МассивРеализаций = МассивРеализаций();
		Всего = МассивРеализаций.Количество();
		ТекРеализация = 0;
		Для каждого ТекДанные Из МассивРеализаций Цикл
			ТекРеализация = ТекРеализация + 1;
			Состояние("Перезапись реализаций", ТекРеализация / Всего * 100, ТекДанные);
			ИзменитьКоличествоВРеализации(ТекДанные);
		КонецЦикла;
		Элементы.ТЧСтрокиЗаказовПрименить.Доступность = Ложь;
		ТекСтрокаСписка = Неопределено;
		ТекСтрокаСпискаСамовывоз = Неопределено;
		ТекСтрокаСпискаПеремещение = Неопределено;
	КонецЕсли;
	ВидТЧ = "";
	Если Элементы.Группа2.ТекущаяСтраница = Элементы.Группа3 Тогда
		ВидТЧ = "Доставка";	
	ИначеЕсли Элементы.Группа2.ТекущаяСтраница = Элементы.Группа4 Тогда
		ВидТЧ = "Самовывоз"; 
	ИначеЕсли Элементы.Группа2.ТекущаяСтраница = Элементы.Группа9 Тогда
		ВидТЧ = "Перемещение"; 
	КонецЕсли;
	ЕстьИзменения = Ложь;
	ЭтоКомандаДляВыбраннойНоменклатуры = Ложь;
	ЗаполнитьСерииДляНоменклатурыНаСервере(ЭтоКомандаДляВыбраннойНоменклатуры,ЕстьИзменения,ВидТЧ); 
	Если ЕстьИзменения Тогда
		Элементы.ТЧСтрокиЗаказовПрименить.Доступность = Истина;
	КонецЕсли; 
	ЗаполнитьСтрокиДляОформленияПриРазделенииПоСериям();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСериюДляВыбраннойНоменклатуры(Команда) 
	
	Если Элементы.ТЧСтрокиЗаказовПрименить.Доступность = Истина Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеВопросаДляВыбраннойНоменклатуры",ЭтотОбъект); 
		СписокКомандДляВопроса = Новый СписокЗначений;
		СписокКомандДляВопроса.Добавить(КодВозвратаДиалога.Да,"Применить изменения и продолжить");
		СписокКомандДляВопроса.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(ОписаниеОповещения,"Перед заполнением серий необходимо применить несохраненные изменения",СписокКомандДляВопроса);
	Иначе
		ЗаполнитьСериюДляВыбраннойНоменклатурыНаКлиенте();	
	КонецЕсли;
	#Область ИсходныйКод
	//Если Элементы.ТЧСтрокиЗаказовПрименить.Доступность = Истина Тогда
	//	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеВопросаДляВыбраннойНоменклатуры",ЭтотОбъект); 
	//	СписокКомандДляВопроса = Новый СписокЗначений;
	//	СписокКомандДляВопроса.Добавить(КодВозвратаДиалога.Да,"Применить изменения и продолжить");
	//	СписокКомандДляВопроса.Добавить(КодВозвратаДиалога.Отмена);
	//	ПоказатьВопрос(ОписаниеОповещения,"Перед заполнением серий необходимо применить несохраненные изменения",СписокКомандДляВопроса);
	//Иначе
	//	ВидТЧ = "";
	//	Если Элементы.Группа2.ТекущаяСтраница = Элементы.Группа3 Тогда
	//		ВидТЧ = "Доставка";	
	//	ИначеЕсли Элементы.Группа2.ТекущаяСтраница = Элементы.Группа4 Тогда
	//		ВидТЧ = "Самовывоз"; 
	//	ИначеЕсли Элементы.Группа2.ТекущаяСтраница = Элементы.Группа9 Тогда
	//		ВидТЧ = "Перемещение"; 
	//	КонецЕсли;
	//	ЕстьИзменения = Ложь;
	//	Если Элементы.ТЧСтрокиЗаказов.ТекущаяСтрока <> Неопределено Тогда
	//		Если ЗначениеЗаполнено(Элементы.ТЧСтрокиЗаказов.ТекущиеДанные.СерияНоменклатуры) Тогда
	//			ПоказатьПредупреждение(,"Серия для данной номенклатуры заполена. Очистите серию и повторите действие.",,"Серия не пустая");
	//		Иначе
	//			ЭтоКомандаДляВыбраннойНоменклатуры = Истина;
	//			ЗаполнитьСерииДляНоменклатурыНаСервере(ЭтоКомандаДляВыбраннойНоменклатуры,ЕстьИзменения, ВидТЧ);
	//			Если ЕстьИзменения Тогда
	//				Элементы.ТЧСтрокиЗаказовПрименить.Доступность = Истина;
	//			КонецЕсли;
	//		КонецЕсли; 
	//	КонецЕсли;
	//	ЗаполнитьСтрокиДляОформленияПриРазделенииПоСериям();
	//КонецЕсли;
	#КонецОбласти
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСериюДляВыбраннойНоменклатурыНаКлиенте(ПрименитьИзменения = Ложь)
	
	Если ПрименитьИзменения Тогда
		МассивРеализаций = МассивРеализаций();
		Всего = МассивРеализаций.Количество();
		ТекРеализация = 0;
		Для каждого ТекДанные Из МассивРеализаций Цикл
			ТекРеализация = ТекРеализация + 1;
			Состояние("Перезапись реализаций", ТекРеализация / Всего * 100, ТекДанные);
			ИзменитьКоличествоВРеализации(ТекДанные);
		КонецЦикла;
		Элементы.ТЧСтрокиЗаказовПрименить.Доступность = Ложь;
		ТекСтрокаСписка = Неопределено;
		ТекСтрокаСпискаСамовывоз = Неопределено;
		ТекСтрокаСпискаПеремещение = Неопределено;
	КонецЕсли;
	ВидТЧ = "";
	Если Элементы.Группа2.ТекущаяСтраница = Элементы.Группа3 Тогда
		ВидТЧ = "Доставка";	
	ИначеЕсли Элементы.Группа2.ТекущаяСтраница = Элементы.Группа4 Тогда
		ВидТЧ = "Самовывоз"; 
	ИначеЕсли Элементы.Группа2.ТекущаяСтраница = Элементы.Группа9 Тогда
		ВидТЧ = "Перемещение"; 
	КонецЕсли;
	ЕстьИзменения = Ложь;
	Если Элементы.ТЧСтрокиЗаказов.ТекущаяСтрока <> Неопределено Тогда
		Если ЗначениеЗаполнено(Элементы.ТЧСтрокиЗаказов.ТекущиеДанные.СерияНоменклатуры) Тогда
			ПоказатьПредупреждение(,"Серия для данной номенклатуры заполена. Очистите серию и повторите действие.",,"Серия не пустая");
		Иначе
			ЭтоКомандаДляВыбраннойНоменклатуры = Истина;
			ЗаполнитьСерииДляНоменклатурыНаСервере(ЭтоКомандаДляВыбраннойНоменклатуры,ЕстьИзменения, ВидТЧ);
			Если ЕстьИзменения Тогда
				Элементы.ТЧСтрокиЗаказовПрименить.Доступность = Истина;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	ЗаполнитьСтрокиДляОформленияПриРазделенииПоСериям(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеВопросаДляВыбраннойНоменклатуры(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЕстьОСГНижеНормыТекстВопроса = ПроверитьОСГНаСоответствиеНормам();
		Если ЕстьОСГНижеНормыТекстВопроса = Неопределено Тогда
			ЗаполнитьСериюДляВыбраннойНоменклатурыНаКлиенте(Истина);
		Иначе
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеОтветаОСГНормыДляВыбраннойНоменклатуры",ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения,ЕстьОСГНижеНормыТекстВопроса,РежимДиалогаВопрос.ДаНетОтмена);
		КонецЕсли;
		
	КонецЕсли;  
	#Область ИсходныйКод
	//Если Результат = КодВозвратаДиалога.Да Тогда
	//	ЕстьОСГНижеНормыТекстВопроса = ПроверитьОСГНаСоответствиеНормам();
	//	Если ЕстьОСГНижеНормыТекстВопроса = Неопределено Тогда
	//		МассивРеализаций = МассивРеализаций();
	//		Всего = МассивРеализаций.Количество();
	//		ТекРеализация = 0;
	//		Для каждого ТекДанные Из МассивРеализаций Цикл
	//			ТекРеализация = ТекРеализация + 1;
	//			Состояние("Перезапись реализаций", ТекРеализация / Всего * 100, ТекДанные);
	//			ИзменитьКоличествоВРеализации(ТекДанные);
	//		КонецЦикла;
	//		Элементы.ТЧСтрокиЗаказовПрименить.Доступность = Ложь;
	//		ТекСтрокаСписка = Неопределено;
	//		ТекСтрокаСпискаСамовывоз = Неопределено;
	//		ТекСтрокаСпискаПеремещение = Неопределено;
	//		ВидТЧ = "";
	//		Если Элементы.Группа2.ТекущаяСтраница = Элементы.Группа3 Тогда
	//			ВидТЧ = "Доставка";	
	//		ИначеЕсли Элементы.Группа2.ТекущаяСтраница = Элементы.Группа4 Тогда
	//			ВидТЧ = "Самовывоз"; 
	//		ИначеЕсли Элементы.Группа2.ТекущаяСтраница = Элементы.Группа9 Тогда
	//			ВидТЧ = "Перемещение"; 
	//		КонецЕсли;
	//		ЕстьИзменения = Ложь;
	//		Если Элементы.ТЧСтрокиЗаказов.ТекущаяСтрока <> Неопределено Тогда
	//			Если ЗначениеЗаполнено(Элементы.ТЧСтрокиЗаказов.ТекущиеДанные.СерияНоменклатуры) Тогда
	//				ПоказатьПредупреждение(,"Серия для данной номенклатуры заполена. Очистите серию и повторите действие.",,"Серия не пустая");
	//			Иначе
	//				ЭтоКомандаДляВыбраннойНоменклатуры = Истина;
	//				ЗаполнитьСерииДляНоменклатурыНаСервере(ЭтоКомандаДляВыбраннойНоменклатуры,ЕстьИзменения, ВидТЧ);
	//				Если ЕстьИзменения Тогда
	//					Элементы.ТЧСтрокиЗаказовПрименить.Доступность = Истина;
	//				КонецЕсли;
	//			КонецЕсли; 
	//		КонецЕсли;
	//		ЗаполнитьСтрокиДляОформленияПриРазделенииПоСериям(); 
	//	Иначе
	//		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеОтветаОСГНормыДляВыбраннойНоменклатуры",ЭтотОбъект);
	//		ПоказатьВопрос(ОписаниеОповещения,ЕстьОСГНижеНормыТекстВопроса,РежимДиалогаВопрос.ДаНетОтмена);
	//	КонецЕсли;
	//	
	//КонецЕсли;  
	#КонецОбласти
	
КонецПроцедуры  

&НаКлиенте
Процедура ВыполнитьПослеОтветаОСГНормыДляВыбраннойНоменклатуры(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьСериюДляВыбраннойНоменклатурыНаКлиенте(Истина);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ВыполнитьПослеВопросаДляВсейНоменклатуры(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЕстьОСГНижеНормыТекстВопроса = ПроверитьОСГНаСоответствиеНормам();
		Если ЕстьОСГНижеНормыТекстВопроса = Неопределено Тогда
			ЗаполнитьСерииДляВсейНоменклатурыНаКлиенте(Истина);
		Иначе
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеОтветаОСГНормыДляВсейНоменклатуры",ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения,ЕстьОСГНижеНормыТекстВопроса,РежимДиалогаВопрос.ДаНетОтмена);
		КонецЕсли;
	КонецЕсли;  
	#Область ИсходныйКод
	//Если Результат = КодВозвратаДиалога.Да Тогда
	//	МассивРеализаций = МассивРеализаций();
	//	Всего = МассивРеализаций.Количество();
	//	ТекРеализация = 0;
	//	Для каждого ТекДанные Из МассивРеализаций Цикл
	//		ТекРеализация = ТекРеализация + 1;
	//		Состояние("Перезапись реализаций", ТекРеализация / Всего * 100, ТекДанные);
	//		ИзменитьКоличествоВРеализации(ТекДанные);
	//	КонецЦикла;
	//	Элементы.ТЧСтрокиЗаказовПрименить.Доступность = Ложь;
	//	ТекСтрокаСписка = Неопределено;
	//	ТекСтрокаСпискаСамовывоз = Неопределено;
	//	ТекСтрокаСпискаПеремещение = Неопределено;
	//	ВидТЧ = "";
	//	Если Элементы.Группа2.ТекущаяСтраница = Элементы.Группа3 Тогда
	//		ВидТЧ = "Доставка";	
	//	ИначеЕсли Элементы.Группа2.ТекущаяСтраница = Элементы.Группа4 Тогда
	//		ВидТЧ = "Самовывоз"; 
	//	ИначеЕсли Элементы.Группа2.ТекущаяСтраница = Элементы.Группа9 Тогда
	//		ВидТЧ = "Перемещение"; 
	//	КонецЕсли;
	//	ЕстьИзменения = Ложь;
	//	ЭтоКомандаДляВыбраннойНоменклатуры = Ложь;
	//	ЗаполнитьСерииДляНоменклатурыНаСервере(ЭтоКомандаДляВыбраннойНоменклатуры,ЕстьИзменения,ВидТЧ); 
	//	Если ЕстьИзменения Тогда
	//		Элементы.ТЧСтрокиЗаказовПрименить.Доступность = Истина;
	//	КонецЕсли; 
	//	ЗаполнитьСтрокиДляОформленияПриРазделенииПоСериям();
	//КонецЕсли;  
	#КонецОбласти

КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьПослеОтветаОСГНормыДляВсейНоменклатуры(Результат,ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
	    ЗаполнитьСерииДляВсейНоменклатурыНаКлиенте(Истина);
    КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ОбновитьСтрокиТЧЗаказов(Команда)
	Если Элементы.Группа2.ТекущаяСтраница = Элементы.Группа4 ИЛИ Элементы.Группа2.ТекущаяСтраница = Элементы.Группа9 Тогда
	   Возврат;
	Иначе
		ЗаполнитьДанныеМЛ();	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСерииДляВсейНоменклатурыДляВсехЗаказов(Команда) 
	
	Если Элементы.ТЧСтрокиЗаказовПрименить.Доступность = Истина Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеВопросаЗаполнитьСерииДляВсейНоменклатурыДляВсехЗаказов",ЭтотОбъект); 
		СписокКомандДляВопроса = Новый СписокЗначений;
		СписокКомандДляВопроса.Добавить(КодВозвратаДиалога.Да,"Применить изменения и продолжить");
		СписокКомандДляВопроса.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(ОписаниеОповещения,"Перед заполнением серий необходимо применить несохраненные изменения",СписокКомандДляВопроса);
	Иначе
		ЗаполнитьСерииДляВсейНоменклатурыДляВсехЗаказовНаКлиенте();	
	КонецЕсли; 
	#Область ИсходныйКод
	//Если Элементы.ТЧСтрокиЗаказовПрименить.Доступность = Истина Тогда
	//	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеВопросаЗаполнитьСерииДляВсейНоменклатурыДляВсехЗаказов",ЭтотОбъект); 
	//	СписокКомандДляВопроса = Новый СписокЗначений;
	//	СписокКомандДляВопроса.Добавить(КодВозвратаДиалога.Да,"Применить изменения и продолжить");
	//	СписокКомандДляВопроса.Добавить(КодВозвратаДиалога.Отмена);
	//	ПоказатьВопрос(ОписаниеОповещения,"Перед заполнением серий необходимо применить несохраненные изменения",СписокКомандДляВопроса);
	//Иначе
	//	ВидТЧ = "";
	//	Если Элементы.Группа2.ТекущаяСтраница = Элементы.Группа3 Тогда
	//		ВидТЧ = "Доставка";	
	//		ЕстьИзменения = Ложь;
	//		ЗаполнитьСерииДляВсейНоменклатурыДляВсехЗаказовНаСервере(ЕстьИзменения,ВидТЧ); 
	//	ИначеЕсли Элементы.Группа2.ТекущаяСтраница = Элементы.Группа4 Тогда
	//		ВидТЧ = "Самовывоз";
	//		ЕстьИзменения = Ложь;
	//		ЗаполнитьСерииДляНоменклатурыНаСервере(Ложь,ЕстьИзменения,ВидТЧ); 
	//	ИначеЕсли Элементы.Группа2.ТекущаяСтраница = Элементы.Группа9 Тогда
	//		ВидТЧ = "Перемещение";
	//		ЕстьИзменения = Ложь;
	//		ЗаполнитьСерииДляНоменклатурыНаСервере(Ложь,ЕстьИзменения,ВидТЧ); 
	//	КонецЕсли;
	//	Если ЕстьИзменения Тогда
	//		Элементы.ТЧСтрокиЗаказовПрименить.Доступность = Истина;
	//	КонецЕсли;
	//	ЗаполнитьСтрокиДляОформленияПриРазделенииПоСериям();
	//КонецЕсли; 
	#КонецОбласти
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСерииДляВсейНоменклатурыДляВсехЗаказовНаКлиенте(ПрименитьИзменения = Ложь)
	
	Если ПрименитьИзменения Тогда
		МассивРеализаций = МассивРеализаций();
		Всего = МассивРеализаций.Количество();
		ТекРеализация = 0;
		Для каждого ТекДанные Из МассивРеализаций Цикл
			ТекРеализация = ТекРеализация + 1;
			Состояние("Перезапись реализаций", ТекРеализация / Всего * 100, ТекДанные);
			ИзменитьКоличествоВРеализации(ТекДанные);
		КонецЦикла;
		Элементы.ТЧСтрокиЗаказовПрименить.Доступность = Ложь;
		ТекСтрокаСписка = Неопределено;
		ТекСтрокаСпискаСамовывоз = Неопределено;
		ТекСтрокаСпискаПеремещение = Неопределено;
	КонецЕсли;
	ВидТЧ = "";
	Если Элементы.Группа2.ТекущаяСтраница = Элементы.Группа3 Тогда
		ВидТЧ = "Доставка";
		ЕстьИзменения = Ложь;
		ЗаполнитьСерииДляВсейНоменклатурыДляВсехЗаказовНаСервере(ЕстьИзменения,ВидТЧ);
	ИначеЕсли Элементы.Группа2.ТекущаяСтраница = Элементы.Группа4 Тогда
		ВидТЧ = "Самовывоз"; 
		ЕстьИзменения = Ложь;
		ЗаполнитьСерииДляНоменклатурыНаСервере(Ложь,ЕстьИзменения,ВидТЧ); 
	ИначеЕсли Элементы.Группа2.ТекущаяСтраница = Элементы.Группа9 Тогда
		ВидТЧ = "Перемещение";  
		ЕстьИзменения = Ложь;
		ЗаполнитьСерииДляНоменклатурыНаСервере(Ложь,ЕстьИзменения,ВидТЧ); 
	КонецЕсли;
	Если ЕстьИзменения Тогда
		Элементы.ТЧСтрокиЗаказовПрименить.Доступность = Истина;
	КонецЕсли;
	ЗаполнитьСтрокиДляОформленияПриРазделенииПоСериям()
	
КонецПроцедуры


&НаКлиенте
Процедура ВыполнитьПослеВопросаЗаполнитьСерииДляВсейНоменклатурыДляВсехЗаказов(Результат,ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		ЕстьОСГНижеНормыТекстВопроса = ПроверитьОСГНаСоответствиеНормам();
		Если ЕстьОСГНижеНормыТекстВопроса = Неопределено Тогда
			ЗаполнитьСерииДляВсейНоменклатурыДляВсехЗаказовНаКлиенте(Истина);
		Иначе
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеОтветаОСГНормыДляВсейНоменклатурыДляВсехЗаказов",ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения,ЕстьОСГНижеНормыТекстВопроса,РежимДиалогаВопрос.ДаНетОтмена);
		КонецЕсли;
	КонецЕсли;  
	#Область ИсходныйКод
	//Если Результат = КодВозвратаДиалога.Да Тогда
	//	МассивРеализаций = МассивРеализаций();
	//	Всего = МассивРеализаций.Количество();
	//	ТекРеализация = 0;
	//	Для каждого ТекДанные Из МассивРеализаций Цикл
	//		ТекРеализация = ТекРеализация + 1;
	//		Состояние("Перезапись реализаций", ТекРеализация / Всего * 100, ТекДанные);
	//		ИзменитьКоличествоВРеализации(ТекДанные);
	//	КонецЦикла;
	//	Элементы.ТЧСтрокиЗаказовПрименить.Доступность = Ложь;
	//	ТекСтрокаСписка = Неопределено;
	//	ТекСтрокаСпискаСамовывоз = Неопределено;
	//	ТекСтрокаСпискаПеремещение = Неопределено;
	//	ВидТЧ = "";
	//	Если Элементы.Группа2.ТекущаяСтраница = Элементы.Группа3 Тогда
	//		ВидТЧ = "Доставка";
	//		ЕстьИзменения = Ложь;
	//		ЗаполнитьСерииДляВсейНоменклатурыДляВсехЗаказовНаСервере(ЕстьИзменения,ВидТЧ);
	//	ИначеЕсли Элементы.Группа2.ТекущаяСтраница = Элементы.Группа4 Тогда
	//		ВидТЧ = "Самовывоз"; 
	//		ЕстьИзменения = Ложь;
	//		ЗаполнитьСерииДляНоменклатурыНаСервере(Ложь,ЕстьИзменения,ВидТЧ); 
	//	ИначеЕсли Элементы.Группа2.ТекущаяСтраница = Элементы.Группа9 Тогда
	//		ВидТЧ = "Перемещение";  
	//		ЕстьИзменения = Ложь;
	//		ЗаполнитьСерииДляНоменклатурыНаСервере(Ложь,ЕстьИзменения,ВидТЧ); 
	//	КонецЕсли;
	//	Если ЕстьИзменения Тогда
	//		Элементы.ТЧСтрокиЗаказовПрименить.Доступность = Истина;
	//	КонецЕсли;
	//	ЗаполнитьСтрокиДляОформленияПриРазделенииПоСериям()
	//КонецЕсли;  
	#КонецОбласти

КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьПослеОтветаОСГНормыДляВсейНоменклатурыДляВсехЗаказов(Результат,ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		ЗаполнитьСерииДляВсейНоменклатурыДляВсехЗаказовНаКлиенте(Истина);
	КонецЕсли;  
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьСтрокиДляОформленияПриРазделенииПоСериям() 
	
	МассивДляВозврата = Новый Массив;
	Для Каждого СтрокаТЧ Из ТЧСтрокиЗаказов Цикл 
		ПараметрыОтбора = Новый Структура("Реализация, НомерСтрокиРеализации",СтрокаТЧ.Реализация,СтрокаТЧ.НомерСтрокиРеализации);
		МассивСтрок = ТЧСтрокиЗаказов.НайтиСтроки(ПараметрыОтбора);
		СтрокаТЧ.РазделениеНаСерии = МассивСтрок.Количество() > 1;
	КонецЦикла; 
	
КонецПроцедуры
&НаСервере
Процедура ЗаполнитьСерииДляВсейНоменклатурыДляВсехЗаказовНаСервере(ЕстьИзменения,ВидТЧ)
	
	//Если ВидТЧ = "Доставка" Тогда
	ТаблицаМЛ = Элементы.Список;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МИНИМУМ(сабМаршрутныйЛистТабличнаяЧасть.НомерСтроки) КАК НомерСтроки,
	|	сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента КАК ЗаказКлиента,
	|	сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента.Склад КАК ЗаказКлиентаСклад
	|ИЗ
	|	Документ.сабМаршрутныйЛист.ТабличнаяЧасть КАК сабМаршрутныйЛистТабличнаяЧасть
	|ГДЕ
	|	сабМаршрутныйЛистТабличнаяЧасть.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента";
	
	Запрос.УстановитьПараметр("Ссылка", ТаблицаМЛ.ТекущаяСтрока);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаЗаказы = РезультатЗапроса.Выбрать();
	
	//	ИначеЕсли  ВидТЧ = "Самовывоз" Тогда
	//		ТаблицаМЛ = Элементы.СписокЗаказов; 
	//		Схема = Элементы.СписокЗаказов.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	//		Настройки = Элементы.СписокЗаказов.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	//
	////Выводим динамический список в таблицу значений
	//КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	//МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , ,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	//
	//ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	//ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	//
	//ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	//ТЗСписокЗаказов = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	 АВТОНОМЕРЗАПИСИ() КАК НомерСтроки,
	//	|	ТЗСписокЗаказов.Ссылка КАК ЗаказКлиента,
	//	|	ТЗСписокЗаказов.Склад КАК ЗаказКлиентаСклад 
	//	|	Поместить ВТСписокЗаказов
	//	|ИЗ
	//	|	&ТЗСписокЗаказов КАК ТЗСписокЗаказов
	//	|;
	//	|///////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	Минимум(ВТСписокЗаказов.НомерСтроки) КАК НомерСтроки,
	//	|	ВТСписокЗаказов.ЗаказКлиента КАК ЗаказКлиента,
	//	|	ВТСписокЗаказов.ЗаказКлиентаСклад КАК ЗаказКлиентаСклад
	//	|ИЗ
	//	|	ВТСписокЗаказов КАК ВТСписокЗаказов
	//	|СГРУППИРОВАТЬ ПО
	//	|	ВТСписокЗаказов.ЗаказКлиента,
	//	|	ВТСписокЗаказов.ЗаказКлиентаСклад";
	//Запрос.УстановитьПараметр("ТЗСписокЗаказов", ТЗСписокЗаказов);
	//	
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаЗаказы = РезультатЗапроса.Выбрать();
	
	
	//	ИначеЕсли ВидТЧ = "Перемещение" Тогда 
	//		ТаблицаМЛ = Элементы.СписокЗаказовПеремещение;  
	//		Схема = Элементы.СписокЗаказовПеремещение.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	//		Настройки = Элементы.СписокЗаказовПеремещение.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	//
	////Выводим динамический список в таблицу значений
	//КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	//МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , ,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	//
	//ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	//ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	//
	//ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	//ТЗСписокЗаказов = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	 АВТОНОМЕРЗАПИСИ() КАК НомерСтроки,
	//	|	ТЗСписокЗаказов.Ссылка КАК ЗаказКлиента,
	//	|	ТЗСписокЗаказов.Склад КАК ЗаказКлиентаСклад 
	//	|	Поместить ВТСписокЗаказов
	//	|ИЗ
	//	|	&ТЗСписокЗаказов КАК ТЗСписокЗаказов
	//	|;
	//	|///////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	Минимум(ВТСписокЗаказов.НомерСтроки) КАК НомерСтроки,
	//	|	ВТСписокЗаказов.ЗаказКлиента КАК ЗаказКлиента,
	//	|	ВТСписокЗаказов.ЗаказКлиентаСклад КАК ЗаказКлиентаСклад
	//	|ИЗ
	//	|	ВТСписокЗаказов КАК ВТСписокЗаказов
	//	|СГРУППИРОВАТЬ ПО
	//	|	ВТСписокЗаказов.ЗаказКлиента,
	//	|	ВТСписокЗаказов.ЗаказКлиентаСклад";
	//Запрос.УстановитьПараметр("ТЗСписокЗаказов", ТЗСписокЗаказов);
	//	
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаЗаказы = РезультатЗапроса.Выбрать();
	
	//КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|ТЗСтрокиЗаказов.Номенклатура КАК Номенклатура,
	|ТЗСтрокиЗаказов.ЗаказКлиента КАК ЗаказКлиента,
	|ТЗСтрокиЗаказов.Реализация КАК Реализация,
	|ТЗСтрокиЗаказов.Контрагент КАК Контрагент, 
	//|ТЗСтрокиЗаказов.Контрагент.СвежиеСрокиГодности КАК СвежиеСрокиГодности,
	|ТЗСтрокиЗаказов.Точка КАК Точка,
	|ТЗСтрокиЗаказов.НомерСтрокиРеализации КАК НомерСтрокиРеализации,
	|ТЗСтрокиЗаказов.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|ТЗСтрокиЗаказов.ДатаПроизводства КАК ДатаПроизводства,
	|ТЗСтрокиЗаказов.ИдентификаторСтрокиРеализации КАК ИдентификаторСтрокиРеализации,
	|ТЗСтрокиЗаказов.СерияНоменклатуры КАК СерияНоменклатуры,
	|ТЗСтрокиЗаказов.ОСГПроценты КАК ОСГПроценты,
	|ТЗСтрокиЗаказов.ОСГ КАК ОСГ,
	|ТЗСтрокиЗаказов.Предприятие КАК Предприятие,
	|ТЗСтрокиЗаказов.НоменклатураВесовой КАК НоменклатураВесовой,
	|ТЗСтрокиЗаказов.НомерСтроки КАК НомерСтроки,
	|ТЗСтрокиЗаказов.ЕстьИзменениеСтроки КАК ЕстьИзменениеСтроки,
	|ТЗСтрокиЗаказов.КоличествоЗаказ КАК КоличествоЗаказ,
	|ТЗСтрокиЗаказов.Количество КАК Количество
	|Поместить ВТСтрокиЗаказов
	|ИЗ &ТЗСтрокиЗаказов КАК ТЗСтрокиЗаказов
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|ВТСтрокиЗаказов.Номенклатура КАК Номенклатура,
	|ВТСтрокиЗаказов.ЗаказКлиента КАК ЗаказКлиента,
	|ВТСтрокиЗаказов.Реализация КАК Реализация,
	|ВТСтрокиЗаказов.Контрагент КАК Контрагент,
	|ВТСтрокиЗаказов.Контрагент.СвежиеСрокиГодности КАК СвежиеСрокиГодности,
	|ВТСтрокиЗаказов.Точка КАК Точка,
	|ВТСтрокиЗаказов.НомерСтрокиРеализации КАК НомерСтрокиРеализации,
	|ВТСтрокиЗаказов.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|ВТСтрокиЗаказов.ДатаПроизводства КАК ДатаПроизводства,
	|ВТСтрокиЗаказов.ИдентификаторСтрокиРеализации КАК ИдентификаторСтрокиРеализации,
	|ВТСтрокиЗаказов.СерияНоменклатуры КАК СерияНоменклатуры,
	|ВТСтрокиЗаказов.ОСГ КАК ОСГ, 
	|ВТСтрокиЗаказов.ОСГПроценты КАК ОСГПроценты,
	|ВТСтрокиЗаказов.Предприятие КАК Предприятие,
	|ВТСтрокиЗаказов.НоменклатураВесовой КАК НоменклатураВесовой,
	|Минимум(ВТСтрокиЗаказов.НомерСтроки) КАК НомерСтроки,
	|Минимум(ВТСтрокиЗаказов.НомерСтроки) КАК РазделениеНаСерии,
	|Максимум(ВТСтрокиЗаказов.ЕстьИзменениеСтроки) КАК ЕстьИзменениеСтроки,
	|Сумма(ВТСтрокиЗаказов.КоличествоЗаказ) КАК КоличествоЗаказ,
	|Сумма(ВТСтрокиЗаказов.Количество) КАК Количество
	|ИЗ
	|ВТСтрокиЗаказов КАК ВТСтрокиЗаказов
	|СГРУППИРОВАТЬ ПО 	
	|ВТСтрокиЗаказов.Номенклатура,
	|ВТСтрокиЗаказов.ЗаказКлиента,
	|ВТСтрокиЗаказов.Реализация,
	|ВТСтрокиЗаказов.Контрагент,
	|Выбор Когда ВТСтрокиЗаказов.Контрагент = Неопределено Тогда Ложь Иначе ВТСтрокиЗаказов.Контрагент.СвежиеСрокиГодности Конец,
	|ВТСтрокиЗаказов.Точка,
	|ВТСтрокиЗаказов.НомерСтрокиРеализации,
	|ВТСтрокиЗаказов.ЕдиницаИзмерения,
	|ВТСтрокиЗаказов.ДатаПроизводства,
	|ВТСтрокиЗаказов.ИдентификаторСтрокиРеализации,
	|ВТСтрокиЗаказов.СерияНоменклатуры,
	|ВТСтрокиЗаказов.ОСГ,
	|ВТСтрокиЗаказов.ОСГПроценты,
	|ВТСтрокиЗаказов.Предприятие,
	|ВТСтрокиЗаказов.НоменклатураВесовой";
	ТЗСтрокиЗаказов = РеквизитФормыВЗначение("ТЧСтрокиЗаказов");
	Запрос.УстановитьПараметр("ТЗСтрокиЗаказов",ТЗСтрокиЗаказов);
	ТЗСтрокиЗаказов = Запрос.Выполнить().Выгрузить();
	ЗначениеВРеквизитФормы(ТЗСтрокиЗаказов,"ТЧСтрокиЗаказов");
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетныйВидыСубконто.ВидСубконто КАК ВидСубконто,
	|	УчетныйВидыСубконто.ВидСубконто.ТипЗначения КАК ТипЗначения
	|ИЗ
	|	ПланСчетов.Учетный.ВидыСубконто КАК УчетныйВидыСубконто
	|ГДЕ
	|	УчетныйВидыСубконто.Ссылка.Код = ""41""";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаТипСубконто = РезультатЗапроса.Выбрать();
	МассивСубконто = Новый Массив;
	Пока ВыборкаТипСубконто.Следующий() Цикл
		Если ВыборкаТипСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
			МассивСубконто.Вставить(0, ВыборкаТипСубконто.ВидСубконто);
		ИначеЕсли ВыборкаТипСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Склады")) Тогда
			МассивСубконто.Вставить(1, ВыборкаТипСубконто.ВидСубконто);
		ИначеЕсли ВыборкаТипСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.СерииНоменклатуры")) Тогда
			МассивСубконто.Вставить(2, ВыборкаТипСубконто.ВидСубконто);
		КонецЕсли;
	КонецЦикла; 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетныйОстатки.Субконто2 КАК Склад,
	|	УчетныйОстатки.Субконто1 КАК Номенклатура,
	|	УчетныйОстатки.Субконто3 КАК СерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(УчетныйОстатки.Субконто3 КАК Справочник.СерииНоменклатуры)) = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|			ТОГДА 0
	|		КОГДА ВЫРАЗИТЬ(УчетныйОстатки.Субконто3 КАК Справочник.СерииНоменклатуры).СрокГодности = 0
	|			ТОГДА РАЗНОСТЬДАТ(ВЫРАЗИТЬ(УчетныйОстатки.Субконто3 КАК Справочник.СерииНоменклатуры).ДатаПроизводства, ВЫРАЗИТЬ(УчетныйОстатки.Субконто3 КАК Справочник.СерииНоменклатуры).ГоденДо, ДЕНЬ)
	|		ИНАЧЕ ВЫРАЗИТЬ(УчетныйОстатки.Субконто3 КАК Справочник.СерииНоменклатуры).СрокГодности
	|	КОНЕЦ КАК СрокГодности,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(УчетныйОстатки.Субконто3 КАК Справочник.СерииНоменклатуры)) = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ РАЗНОСТЬДАТ(&ДатаОтгрузки, ВЫРАЗИТЬ(УчетныйОстатки.Субконто3 КАК Справочник.СерииНоменклатуры).ГоденДо, ДЕНЬ)
	|	КОНЕЦ КАК ОсталосьДнейСрокаГодности,
	|	ВЫРАЗИТЬ(УчетныйОстатки.Субконто3 КАК Справочник.СерииНоменклатуры).ДатаПроизводства КАК ДатаПроизводства,
	|	ЕСТЬNULL(УчетныйОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток
	|ИЗ
	|	РегистрБухгалтерии.Учетный.Остатки(
	|			&Период,
	|			Счет.Код = ""41"",
	|			&МассивСубконто,
	|			Предприятия = &Предприятия
	|				И Субконто3 <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|				И Субконто1 В (&СписокНоменклатуры)) КАК УчетныйОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	ДатаПроизводства УБЫВ
	|ИТОГИ ПО
	|	Номенклатура,
	|	Склад"; 
	ТЗСерииДляОбхода = Новый ТаблицаЗначений;
	ТЗСерииДляОбхода.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТЗСерииДляОбхода.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗСерииДляОбхода.Колонки.Добавить("СерияНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТЗСерииДляОбхода.Колонки.Добавить("ДатаПроизводства", Новый ОписаниеТипов("Дата"));
	ТЗСерииДляОбхода.Колонки.Добавить("КоличествоОстаток", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3))); 
	//Добавление ОСГ
	ТЗСерииДляОбхода.Колонки.Добавить("СрокГодности", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(3)));
	ТЗСерииДляОбхода.Колонки.Добавить("ОсталосьДнейСрокаГодности", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(3)));

	Запрос.УстановитьПараметр("Предприятия",ТаблицаМЛ.ТекущаяСтрока.Предприятие); 
	Запрос.УстановитьПараметр("СписокНоменклатуры",ТЧСтрокиЗаказов.Выгрузить(,"Номенклатура").ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("Период",КонецДня(ДатаОтгрузки));    
	Запрос.УстановитьПараметр("МассивСубконто",МассивСубконто); 
	Если ЗначениеЗаполнено(ДатаОтгрузки) Тогда
		Запрос.УстановитьПараметр("ДатаОтгрузки",ДатаОтгрузки);
	Иначе
		Запрос.УстановитьПараметр("ДатаОтгрузки",ТекущаяДата());
    КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить(); 
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНоменклатура.Следующий() Цикл
			
			ВыборкаСклад = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
			Пока ВыборкаСклад.Следующий() Цикл
				ВыборкаСерии = ВыборкаСклад.Выбрать();
				Пока ВыборкаСерии.Следующий() Цикл
					Если ВыборкаСерии.КоличествоОстаток < 0 Тогда
						Продолжить;
					КонецЕсли;
					НоваяСтрокаТЗСерииДляОбхода = ТЗСерииДляОбхода.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗСерииДляОбхода,ВыборкаСерии);
				КонецЦикла;
				
				
				
				Для каждого СтрокаТЗСерииДляОбхода Из ТЗСерииДляОбхода Цикл
				    СтруктураДляОтбора = Новый Структура("Номенклатура, СерияНоменклатуры",СтрокаТЗСерииДляОбхода.Номенклатура, Справочники.СерииНоменклатуры.ПустаяСсылка());
					МассивСтрок = ТЧСтрокиЗаказов.НайтиСтроки(СтруктураДляОтбора); 
					ТЗСтрок = Новый ТаблицаЗначений;
					ТЗСтрок.Колонки.Добавить("СтрокаНоменклатуры",Новый ОписаниеТипов("ДанныеФормыЭлементКоллекции")); 
					КвалификаторыЧисла = Новый КвалификаторыЧисла(10,0);
					ОписаниеЧисла = Новый ОписаниеТипов("Число", КвалификаторыЧисла);
					ТЗСтрок.Колонки.Добавить("НомерПорядка",ОписаниеЧисла);
					ТЗСтрок.Колонки.Добавить("Склад",Новый ОписаниеТипов("СправочникСсылка.Склады"));
					Для каждого ЭлементМассиваМассивСтрок Из МассивСтрок Цикл
						Если Не ЭлементМассиваМассивСтрок.Контрагент.СвежиеСрокиГодности Тогда 
							Продолжить;
						КонецЕсли;
						НоваяСтрокаТЗСтрок = ТЗСтрок.Добавить();
						НоваяСтрокаТЗСтрок.СтрокаНоменклатуры = ЭлементМассиваМассивСтрок;
						ВыборкаЗаказы.Сбросить(); 
						СтруктураОтбораЗаказа = Новый Структура("ЗаказКлиента", ЭлементМассиваМассивСтрок.ЗаказКлиента);
						Если ВыборкаЗаказы.НайтиСледующий(СтруктураОтбораЗаказа)Тогда
							НоваяСтрокаТЗСтрок.НомерПорядка = ВыборкаЗаказы.НомерСтроки;
							НоваяСтрокаТЗСтрок.Склад = ВыборкаЗаказы.ЗаказКлиентаСклад;	
						Иначе
							НоваяСтрокаТЗСтрок.НомерПорядка = 0;
							НоваяСтрокаТЗСтрок.Склад = Справочники.Склады.ПустаяСсылка();
						КонецЕсли;
					КонецЦикла;
					ТЗСтрок.Сортировать("НомерПорядка ВОЗР");
					ОсталосьРаспределить = СтрокаТЗСерииДляОбхода.КоличествоОстаток;  
					Для Каждого СтрокаТЗ Из ТЗСтрок Цикл
						Если СтрокаТЗ.Склад <> СтрокаТЗСерииДляОбхода.Склад Тогда
							Продолжить;
						КонецЕсли;
						ИсходноеКоличествоЗаказ = СтрокаТЗ.СтрокаНоменклатуры.КоличествоЗаказ;
						Количество = ?(СтрокаТЗ.СтрокаНоменклатуры.Количество = 0, СтрокаТЗ.СтрокаНоменклатуры.КоличествоЗаказ,СтрокаТЗ.СтрокаНоменклатуры.Количество);
						Распределить = Мин(Количество,ОсталосьРаспределить);
						СтрокаТЗ.СтрокаНоменклатуры.СерияНоменклатуры = СтрокаТЗСерииДляОбхода.СерияНоменклатуры;
						//Добавление и заполнение ОСГ
						Если ЗначениеЗаполнено(СтрокаТЗ.СтрокаНоменклатуры.СерияНоменклатуры) Тогда
							Если СтрокаТЗСерииДляОбхода.ОсталосьДнейСрокаГодности <= 0 ИЛИ СтрокаТЗСерииДляОбхода.СрокГодности = 0 Тогда
								СтрокаТЗ.СтрокаНоменклатуры.ОСГ = "0 дн.(0%)";
								СтрокаТЗ.СтрокаНоменклатуры.ОСГПроценты = 0;
							Иначе
								СтрокаТЗ.СтрокаНоменклатуры.ОСГПроценты = Окр(СтрокаТЗСерииДляОбхода.ОсталосьДнейСрокаГодности / СтрокаТЗСерииДляОбхода.СрокГодности * 100,0,РежимОкругления.Окр15как20);
								СтрокаТЗ.СтрокаНоменклатуры.ОСГ = Строка(СтрокаТЗСерииДляОбхода.ОсталосьДнейСрокаГодности) + " дн.(" + Строка(СтрокаТЗ.СтрокаНоменклатуры.ОСГПроценты) + "%)"; 
							КонецЕсли;
						Иначе
							СтрокаТЗ.СтрокаНоменклатуры.ОСГ = "";
							СтрокаТЗ.СтрокаНоменклатуры.ОСГПроценты = 0;
						КонецЕсли;
						СтрокаТЗ.СтрокаНоменклатуры.ДатаПроизводства = СтрокаТЗСерииДляОбхода.ДатаПроизводства;
						СтрокаТЗ.СтрокаНоменклатуры.Количество = Распределить;
						СтрокаТЗСерииДляОбхода.КоличествоОстаток = СтрокаТЗСерииДляОбхода.КоличествоОстаток - Распределить;
						СтрокаТЗ.СтрокаНоменклатуры.ЕстьИзменениеСтроки = Истина;
						Разрядность = СтрНайти(СтрокаТЗ.СтрокаНоменклатуры.КоличествоЗаказ,",");
						Если Разрядность > 0 Тогда
							Дробь = Сред(СтрокаТЗ.СтрокаНоменклатуры.КоличествоЗаказ, Разрядность+1);
							Разрядность = СтрДлина(Дробь);
						КонецЕсли;
						Если Количество = 0 Тогда
							СтрокаТЗ.СтрокаНоменклатуры.КоличествоЗаказ = 0;
						Иначе
							СтрокаТЗ.СтрокаНоменклатуры.КоличествоЗаказ = ОКр(Распределить/Количество 
							* СтрокаТЗ.СтрокаНоменклатуры.КоличествоЗаказ,Разрядность,РежимОкругления.Окр15как10);
						КонецЕсли;
						Если Количество > ОсталосьРаспределить Тогда	
							ДобавленнаяСтрока = ТЧСтрокиЗаказов.Вставить(ТЧСтрокиЗаказов.Индекс(СтрокаТЗ.СтрокаНоменклатуры));
							ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, СтрокаТЗ.СтрокаНоменклатуры);
							ДобавленнаяСтрока.ДатаПроизводства = Дата(1,1,1);
							ДобавленнаяСтрока.СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
							ДобавленнаяСтрока.Количество = Количество - ОсталосьРаспределить;
							СтрокаТЗСерииДляОбхода.КоличествоОстаток = СтрокаТЗСерииДляОбхода.КоличествоОстаток - ДобавленнаяСтрока.Количество;
							ДобавленнаяСтрока.КоличествоЗаказ = ИсходноеКоличествоЗаказ - СтрокаТЗ.СтрокаНоменклатуры.КоличествоЗаказ; 
							ДобавленнаяСтрока.ЕстьИзменениеСтроки = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
				ТЗСерииДляОбхода.Сортировать("ДатаПроизводства Возр");
				Для каждого СтрокаТЗСерииДляОбхода Из ТЗСерииДляОбхода Цикл
					Если СтрокаТЗСерииДляОбхода.КоличествоОстаток <= 0 Тогда
						Продолжить;
					КонецЕсли;
				
					СтруктураДляОтбора = Новый Структура("Номенклатура, СерияНоменклатуры",СтрокаТЗСерииДляОбхода.Номенклатура, Справочники.СерииНоменклатуры.ПустаяСсылка());
					МассивСтрок = ТЧСтрокиЗаказов.НайтиСтроки(СтруктураДляОтбора); 
					ТЗСтрок = Новый ТаблицаЗначений;
					ТЗСтрок.Колонки.Добавить("СтрокаНоменклатуры",Новый ОписаниеТипов("ДанныеФормыЭлементКоллекции")); 
					КвалификаторыЧисла = Новый КвалификаторыЧисла(10,0);
					ОписаниеЧисла = Новый ОписаниеТипов("Число", КвалификаторыЧисла);
					ТЗСтрок.Колонки.Добавить("НомерПорядка",ОписаниеЧисла);
					ТЗСтрок.Колонки.Добавить("Склад",Новый ОписаниеТипов("СправочникСсылка.Склады"));
					Для каждого ЭлементМассиваМассивСтрок Из МассивСтрок Цикл
						Если ЭлементМассиваМассивСтрок.Контрагент.СвежиеСрокиГодности Тогда 
							Продолжить;
						КонецЕсли;
						НоваяСтрокаТЗСтрок = ТЗСтрок.Добавить();
						НоваяСтрокаТЗСтрок.СтрокаНоменклатуры = ЭлементМассиваМассивСтрок;
						ВыборкаЗаказы.Сбросить(); 
						СтруктураОтбораЗаказа = Новый Структура("ЗаказКлиента", ЭлементМассиваМассивСтрок.ЗаказКлиента);
						Если ВыборкаЗаказы.НайтиСледующий(СтруктураОтбораЗаказа)Тогда
							НоваяСтрокаТЗСтрок.НомерПорядка = ВыборкаЗаказы.НомерСтроки;
							НоваяСтрокаТЗСтрок.Склад = ВыборкаЗаказы.ЗаказКлиентаСклад;	
						Иначе
							НоваяСтрокаТЗСтрок.НомерПорядка = 0;
							НоваяСтрокаТЗСтрок.Склад = Справочники.Склады.ПустаяСсылка();
						КонецЕсли;
					КонецЦикла;
					ТЗСтрок.Сортировать("НомерПорядка ВОЗР");
					ОсталосьРаспределить = СтрокаТЗСерииДляОбхода.КоличествоОстаток;  
					Для Каждого СтрокаТЗ Из ТЗСтрок Цикл
						Если СтрокаТЗ.Склад <> СтрокаТЗСерииДляОбхода.Склад Тогда
							Продолжить;
						КонецЕсли;
						ИсходноеКоличествоЗаказ = СтрокаТЗ.СтрокаНоменклатуры.КоличествоЗаказ;
						Количество = ?(СтрокаТЗ.СтрокаНоменклатуры.Количество = 0, СтрокаТЗ.СтрокаНоменклатуры.КоличествоЗаказ,СтрокаТЗ.СтрокаНоменклатуры.Количество);
						Распределить = Мин(Количество,ОсталосьРаспределить);
						СтрокаТЗ.СтрокаНоменклатуры.СерияНоменклатуры = СтрокаТЗСерииДляОбхода.СерияНоменклатуры;
						//Добавление и заполнение ОСГ
						Если ЗначениеЗаполнено(СтрокаТЗ.СтрокаНоменклатуры.СерияНоменклатуры) Тогда
							Если СтрокаТЗСерииДляОбхода.ОсталосьДнейСрокаГодности <= 0 ИЛИ СтрокаТЗСерииДляОбхода.СрокГодности = 0 Тогда
								СтрокаТЗ.СтрокаНоменклатуры.ОСГ = "0 дн.(0%)";
								СтрокаТЗ.СтрокаНоменклатуры.ОСГПроценты = 0;
							Иначе
								СтрокаТЗ.СтрокаНоменклатуры.ОСГПроценты = Окр(СтрокаТЗСерииДляОбхода.ОсталосьДнейСрокаГодности / СтрокаТЗСерииДляОбхода.СрокГодности * 100,0,РежимОкругления.Окр15как20);
								СтрокаТЗ.СтрокаНоменклатуры.ОСГ = Строка(СтрокаТЗСерииДляОбхода.ОсталосьДнейСрокаГодности) + " дн.(" + Строка(СтрокаТЗ.СтрокаНоменклатуры.ОСГПроценты) + "%)"; 
							КонецЕсли;
						Иначе
							СтрокаТЗ.СтрокаНоменклатуры.ОСГ = "";
							СтрокаТЗ.СтрокаНоменклатуры.ОСГПроценты = 0;
						КонецЕсли;

						СтрокаТЗ.СтрокаНоменклатуры.ДатаПроизводства = СтрокаТЗСерииДляОбхода.ДатаПроизводства;
						СтрокаТЗ.СтрокаНоменклатуры.Количество = Распределить;
						СтрокаТЗ.СтрокаНоменклатуры.ЕстьИзменениеСтроки = Истина;
						Разрядность = СтрНайти(СтрокаТЗ.СтрокаНоменклатуры.КоличествоЗаказ,",");
						Если Разрядность > 0 Тогда
							Дробь = Сред(СтрокаТЗ.СтрокаНоменклатуры.КоличествоЗаказ, Разрядность+1);
							Разрядность = СтрДлина(Дробь);
						КонецЕсли;
						Если Количество = 0 Тогда
							СтрокаТЗ.СтрокаНоменклатуры.КоличествоЗаказ = 0;
						Иначе
							СтрокаТЗ.СтрокаНоменклатуры.КоличествоЗаказ = ОКр(Распределить/Количество 
							* СтрокаТЗ.СтрокаНоменклатуры.КоличествоЗаказ,Разрядность,РежимОкругления.Окр15как10);
						КонецЕсли;
						Если Количество > ОсталосьРаспределить Тогда	
							ДобавленнаяСтрока = ТЧСтрокиЗаказов.Вставить(ТЧСтрокиЗаказов.Индекс(СтрокаТЗ.СтрокаНоменклатуры));
							ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, СтрокаТЗ.СтрокаНоменклатуры);
							ДобавленнаяСтрока.ДатаПроизводства = Дата(1,1,1);
							ДобавленнаяСтрока.СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
							ДобавленнаяСтрока.Количество = Количество - ОсталосьРаспределить;
							ДобавленнаяСтрока.КоличествоЗаказ = ИсходноеКоличествоЗаказ - СтрокаТЗ.СтрокаНоменклатуры.КоличествоЗаказ; 
							ДобавленнаяСтрока.ЕстьИзменениеСтроки = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				ТЗСерииДляОбхода.Очистить();
			КонецЦикла;
			//ТЗСерииДляОбхода.Очистить();
		КонецЦикла; 
		ТЧСтрокиЗаказов.Сортировать("НомерСтрокиРеализации, ДатаПроизводства");
		ЕстьИзменения = Истина; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВсеСерии(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчисткаСерийПослеВопроса",ЭтотОбъект); 
	ПоказатьВопрос(ОписаниеОповещения, "Все серии для всех заказов маршрутного листа будут очищены. Продолжить?",РежимДиалогаВопрос.ДаНетОтмена); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаСерийПослеВопроса(Результат, ДопПараметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОчиститьВсеСерииНаСервере();
		Элементы.ТЧСтрокиЗаказовПрименить.Доступность = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьВсеСерииНаСервере()
	
	Для Каждого СтрокаТЧ Из ТЧСтрокиЗаказов  Цикл 
		Если ЗначениеЗаполнено(СтрокаТЧ.СерияНоменклатуры) ИЛИ ЗначениеЗаполнено(СтрокаТЧ.ДатаПроизводства) Тогда
			СтрокаТЧ.СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
			СтрокаТЧ.ДатаПроизводства = Дата(1,1,1);
			СтрокаТЧ.ЕстьИзменениеСтроки = Истина;
		КонецЕсли;
	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|ТЗСтрокиЗаказов.Номенклатура КАК Номенклатура,
	|ТЗСтрокиЗаказов.ЗаказКлиента КАК ЗаказКлиента,
	|ТЗСтрокиЗаказов.Реализация КАК Реализация,
	|ТЗСтрокиЗаказов.Контрагент КАК Контрагент,
	|ТЗСтрокиЗаказов.Точка КАК Точка,
	|ТЗСтрокиЗаказов.НомерСтрокиРеализации КАК НомерСтрокиРеализации,
	|ТЗСтрокиЗаказов.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|ТЗСтрокиЗаказов.ДатаПроизводства КАК ДатаПроизводства,
	|ТЗСтрокиЗаказов.ИдентификаторСтрокиРеализации КАК ИдентификаторСтрокиРеализации,
	|ТЗСтрокиЗаказов.СерияНоменклатуры КАК СерияНоменклатуры,
	|ТЗСтрокиЗаказов.Предприятие КАК Предприятие,
	|ТЗСтрокиЗаказов.НоменклатураВесовой КАК НоменклатураВесовой,
	|ТЗСтрокиЗаказов.НомерСтроки КАК НомерСтроки,
	|ТЗСтрокиЗаказов.ЕстьИзменениеСтроки КАК ЕстьИзменениеСтроки,
	|ТЗСтрокиЗаказов.КоличествоЗаказ КАК КоличествоЗаказ,
	|ТЗСтрокиЗаказов.Количество КАК Количество
	|Поместить ВТСтрокиЗаказов
	|ИЗ &ТЗСтрокиЗаказов КАК ТЗСтрокиЗаказов
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|ВТСтрокиЗаказов.Номенклатура КАК Номенклатура,
	|ВТСтрокиЗаказов.ЗаказКлиента КАК ЗаказКлиента,
	|ВТСтрокиЗаказов.Реализация КАК Реализация,
	|ВТСтрокиЗаказов.Контрагент КАК Контрагент,
	|ВТСтрокиЗаказов.Точка КАК Точка,
	|ВТСтрокиЗаказов.НомерСтрокиРеализации КАК НомерСтрокиРеализации,
	|ВТСтрокиЗаказов.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|ВТСтрокиЗаказов.ДатаПроизводства КАК ДатаПроизводства,
	|ВТСтрокиЗаказов.ИдентификаторСтрокиРеализации КАК ИдентификаторСтрокиРеализации,
	|ВТСтрокиЗаказов.СерияНоменклатуры КАК СерияНоменклатуры,
	|ВТСтрокиЗаказов.Предприятие КАК Предприятие,
	|ВТСтрокиЗаказов.НоменклатураВесовой КАК НоменклатураВесовой,
	|Минимум(ВТСтрокиЗаказов.НомерСтроки) КАК НомерСтроки,
	|Минимум(ВТСтрокиЗаказов.НомерСтроки) КАК РазделениеНаСерии,
	|Максимум(ВТСтрокиЗаказов.ЕстьИзменениеСтроки) КАК ЕстьИзменениеСтроки,
	|Сумма(ВТСтрокиЗаказов.КоличествоЗаказ) КАК КоличествоЗаказ,
	|Сумма(ВТСтрокиЗаказов.Количество) КАК Количество
	|ИЗ
	|ВТСтрокиЗаказов КАК ВТСтрокиЗаказов
	|СГРУППИРОВАТЬ ПО 	
	|ВТСтрокиЗаказов.Номенклатура,
	|ВТСтрокиЗаказов.ЗаказКлиента,
	|ВТСтрокиЗаказов.Реализация,
	|ВТСтрокиЗаказов.Контрагент,
	|ВТСтрокиЗаказов.Точка,
	|ВТСтрокиЗаказов.НомерСтрокиРеализации,
	|ВТСтрокиЗаказов.ЕдиницаИзмерения,
	|ВТСтрокиЗаказов.ДатаПроизводства,
	|ВТСтрокиЗаказов.ИдентификаторСтрокиРеализации,
	|ВТСтрокиЗаказов.СерияНоменклатуры,
	|ВТСтрокиЗаказов.Предприятие,
	|ВТСтрокиЗаказов.НоменклатураВесовой";
	ТЗСтрокиЗаказов = РеквизитФормыВЗначение("ТЧСтрокиЗаказов");
	Запрос.УстановитьПараметр("ТЗСтрокиЗаказов",ТЗСтрокиЗаказов);
	ТЗСтрокиЗаказов = Запрос.Выполнить().Выгрузить();
	//ЗначениеВРеквизитФормы(ТЗСтрокиЗаказов,"ТЧСтрокиЗаказов");
	ТЧСтрокиЗаказов.Загрузить(ТЗСтрокиЗаказов);
	ЗаполнитьСтрокиДляОформленияПриРазделенииПоСериям();
	ТЧСтрокиЗаказов.Сортировать("НомерСтрокиРеализации, ДатаПроизводства"); 
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ЗаполнитьОСГДляСерии(СерияНоменклатуры, ДатаОтгрузки);
		
	Если Не ЗначениеЗаполнено(ДатаОтгрузки) Тогда
		ДатаОтгрузки = ТекущаяДата();
	КонецЕсли;
	СтруктураВозврата = Новый Структура("ОСГ, ОСГПроцент","",0);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РАЗНОСТЬДАТ(&ДатаОтгрузки, СерииНоменклатуры.ГоденДо, ДЕНЬ) КАК ОсталосьДнейСрокаГодности,
	|	ВЫБОР
	|		КОГДА СерииНоменклатуры.СрокГодности = 0
	|			ТОГДА РАЗНОСТЬДАТ(СерииНоменклатуры.ДатаПроизводства, СерииНоменклатуры.ГоденДо, ДЕНЬ)
	|		ИНАЧЕ СерииНоменклатуры.СрокГодности
	|	КОНЕЦ КАК СрокГодности
	|ИЗ
	|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|ГДЕ
	|	СерииНоменклатуры.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СерияНоменклатуры);
	Запрос.УстановитьПараметр("ДатаОтгрузки", ДатаОтгрузки);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Выборка.ОсталосьДнейСрокаГодности <= 0 ИЛИ Выборка.СрокГодности = 0 Тогда
			СтруктураВозврата.ОСГ = "0 дн.(0%)";
		Иначе
			СтруктураВозврата.ОСГПроцент = Окр(Выборка.ОсталосьДнейСрокаГодности / Выборка.СрокГодности * 100,0,РежимОкругления.Окр15как20);
			СтруктураВозврата.ОСГ = Строка(Выборка.ОсталосьДнейСрокаГодности) + " дн. (" + Строка(СтруктураВозврата.ОСГПроцент) + "%)"; 
		КонецЕсли;	
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Для каждого СтрокаСписка Из Строки Цикл 
		Если СтрокаСписка.Значение.Данные.Свойство("ТабличнаяЧасть") Тогда
			ТЗ = СтрокаСписка.Значение.Данные.ТабличнаяЧасть.Выгрузить();
			ТЗ.Сортировать("НомерСтроки");
            СтрокаСписка.Значение.Данные.ТабличнаяЧасть.Загрузить(ТЗ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьМаршрутныйЛистНовыйФакт(Команда)
	
	СсылкаМЛ = Элементы.Список.ТекущаяСтрока;
	Если ЗначениеЗаполнено(СсылкаМЛ) тогда   
		БюджетныйНаКлиенте.УниверсальноеВыполнениеКоманды(СсылкаМЛ, "Документ.сабМаршрутныйЛист.Команда.МаршрутныйЛистНовыйФакт");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПечатьКомплектаДокументов(Команда)
	
	ВыдСтроки = Элементы.Список.ВыделенныеСтроки; 
	
	МассивОбъектовПечати = ПолучитьОбъектыПечати(ВыдСтроки);
	
	Если МассивОбъектовПечати.Количество() Тогда
		ОткрытьФорму("ОбщаяФорма.сабНастройкаПечатиКомплекта", Новый Структура("Объекты, МенеджерПечати, ИмяФормы, КлючНазначенияИспользования",
			МассивОбъектовПечати, "Документ.РеализацияТоваровУслуг", "Документ.РеализацияТоваровУслуг.Форма.ФормаСписка", "Документ.сабМаршрутныйЛист"));
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю("Нет документов для печати комплекта.");	
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбъектыПечати(ПараметрКоманды)

	МассивОбъектовПечати = Новый Массив;
	
	Для Каждого ТекЭлемент Из ПараметрКоманды Цикл
		
		Для Каждого ТекСтрокаТЧ Из ТекЭлемент.ТабличнаяЧасть Цикл 
			МассивОбъектовПечати.Добавить(ТекСтрокаТЧ.Реализация);			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат МассивОбъектовПечати;
	
КонецФункции





