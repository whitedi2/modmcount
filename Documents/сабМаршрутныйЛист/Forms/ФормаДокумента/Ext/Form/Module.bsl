&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	БюджетныйНаСервере.ДействияПриСозданииФормыДокумента(ЭтаФорма);
	ФормироватьУПД = Истина;
	СоздаватьСчетНаОплатуПокупателю = Истина;
	ПроводитьДокументы = Истина;
	ЗаполнитьЗначенияСтрок();
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеПриИзменении(Элемент)
	ПредприятиеПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПредприятиеПриИзмененииНаСервере()
	сабОбщегоНазначенияКлиентСервер.СкрытьПодразделения(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Пересчитать", Объект.Ссылка);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	сабОбщегоНазначения.ОтобразитьСостояниеДокумента(ЭтаФорма);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК ЗаказКлиента,
	|	ЕСТЬNULL(ПередачаТоваров.Ссылка, ЕСТЬNULL(РеализацияТоваровУслуг.Ссылка, ЕСТЬNULL(РозничнаяПродажа.Ссылка, УЧ_Реализация.Ссылка))) КАК Реализация
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа КАК РозничнаяПродажа
	|		ПО ЗаказКлиента.Ссылка = РозничнаяПродажа.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО ЗаказКлиента.Ссылка = РеализацияТоваровУслуг.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_Реализация КАК УЧ_Реализация
	|		ПО ЗаказКлиента.Ссылка = УЧ_Реализация.ДокОснование
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаТоваров КАК ПередачаТоваров
	|		ПО ЗаказКлиента.Ссылка = ПередачаТоваров.Заказ
	|ГДЕ
	|	ЗаказКлиента.Ссылка В(&ЗаказКлиента)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказНаВозвратОтКлиента.Ссылка,
	|	ЕСТЬNULL(ОприходованиеТоваров.Ссылка, ЕСТЬNULL(ВозвратТоваровОтПокупателя.Ссылка, ЕСТЬNULL(РозничнаяПродажа.Ссылка, УЧ_Возврат.Ссылка)))
	|ИЗ
	|	Документ.ЗаказНаВозвратОтКлиента КАК ЗаказНаВозвратОтКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа КАК РозничнаяПродажа
	|		ПО ЗаказНаВозвратОтКлиента.Ссылка = РозничнаяПродажа.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|		ПО ЗаказНаВозвратОтКлиента.Ссылка = ВозвратТоваровОтПокупателя.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_Возврат КАК УЧ_Возврат
	|		ПО ЗаказНаВозвратОтКлиента.Ссылка = УЧ_Возврат.ДокОснование
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОприходованиеТоваров КАК ОприходованиеТоваров
	|		ПО ЗаказНаВозвратОтКлиента.Ссылка = ОприходованиеТоваров.Заказ
	|ГДЕ
	|	ЗаказНаВозвратОтКлиента.Ссылка В(&ЗаказКлиента)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПоставщику.Ссылка,
	|	УЧ_ПоступлениеТоваров.Ссылка
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_ПоступлениеТоваров КАК УЧ_ПоступлениеТоваров
	|		ПО ЗаказПоставщику.Ссылка = УЧ_ПоступлениеТоваров.ДокОснование
	|ГДЕ
	|	ЗаказПоставщику.Ссылка В(&ЗаказКлиента)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказНаПеремещение.Ссылка,
	|	УЧ_ПеремещениеТоваров.Ссылка
	|ИЗ
	|	Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_ПеремещениеТоваров КАК УЧ_ПеремещениеТоваров
	|		ПО ЗаказНаПеремещение.Ссылка = УЧ_ПеремещениеТоваров.ДокОснование
	|ГДЕ
	|	ЗаказНаПеремещение.Ссылка В(&ЗаказКлиента)";
	
	Запрос.УстановитьПараметр("ЗаказКлиента", Объект.ТабличнаяЧасть.Выгрузить().ВыгрузитьКолонку("ЗаказКлиента"));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НайденныеСтроки = Объект.ТабличнаяЧасть.НайтиСтроки(Новый Структура("ЗаказКлиента", Выборка.ЗаказКлиента));
		
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			
			Если Не ЗначениеЗаполнено(ТекСтрока.Реализация) И ЗначениеЗаполнено(Выборка.Реализация) Тогда
				ТекСтрока.Реализация = Выборка.Реализация;
				ЕстьНеобновленныеРеализации = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	сабОбщегоНазначения.ОтобразитьСостояниеДокумента(ЭтаФорма, ТекущийОбъект);
	
	//СтатусОтгружен = Перечисления.СтатусыЗаказовКлиентов.Отгружен;
	//
	//Для каждого ТекСтрока Из Объект.ТабличнаяЧасть Цикл
	//	Если НЕ ТекСтрока.ЗаказКлиента.Статус = СтатусОтгружен Тогда
	//		ТекЗаказ = ТекСтрока.ЗаказКлиента.ПолучитьОбъект();
	//		ТекЗаказ.Статус = СтатусОтгружен;
	//		Если ТекЗаказ.Проведен Тогда
	//			ТекЗаказ.Записать(РежимЗаписиДокумента.Проведение);
	//		Иначе	
	//			ТекЗаказ.Записать();
	//		КонецЕсли;
	//	КонецЕсли;	
	//КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВидДеятельностиПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		РеквизитыПодразделения = БюджетныйНаСервере.ВернутьРеквизиты(Объект.Подразделение, "Организация");
		Объект.Организация = РеквизитыПодразделения.Организация;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДеятельностиПриИзменении(Элемент)
	ВидДеятельностиПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПровереноПоУчету(Команда)
	Элементы.КомандаПроверено.Пометка = НЕ Элементы.КомандаПроверено.Пометка;
	Если Элементы.КомандаПроверено.Пометка Тогда
		БюджетныйНаСервере.УстановитьПроверкуДокумента(Объект.Ссылка, Истина);
	Иначе
		БюджетныйНаСервере.УдалитьПроверкуДокумента(Объект.Ссылка, Истина);
	КонецЕсли;
	ОповеститьОбИзменении(Объект.Ссылка);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	Запрос = Новый Запрос;
	#Область ИсхЗапросДоРекадтирования
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	ЗаказКлиентаДок.Ссылка КАК ЗаказКлиента,
	//               |	ЗаказКлиентаДок.СуммаДокумента КАК Сумма,
	//               |	ЗаказКлиентаДок.Статус КАК Статус,
	//               |	ЗаказКлиентаДок.СтатусОплаты КАК СтатусОплаты,
	//               |	МАКСИМУМ(ЕСТЬNULL(РеализацияТоваровУслуг.Ссылка, ЕСТЬNULL(УЧ_Реализация.Ссылка, ЕСТЬNULL(ПередачаТоваров.Ссылка, РозничнаяПродажа.Ссылка)))) КАК Реализация,
	//               |	ЗаказКлиентаДок.ВесТовара КАК ВесЗаказа,
	//               |	ЗаказКлиентаДок.Контрагент КАК Контрагент,
	//               |	ЗаказКлиентаДок.ПодразделениеКонтрагента КАК ПодразделениеКонтрагента,
	//               |	ЗаказКлиентаДок.ДатаДоставки КАК ВремяДоставки,
	//               |	ЗаказКлиентаДок.ДатаДоставкиДо КАК ВремяДоставкиПо
	//			   |ПОМЕСТИТЬ ВТДанныеЗаказов
	//               |ИЗ
	//               |	Документ.ЗаказКлиента КАК ЗаказКлиентаДок
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//               |		ПО ЗаказКлиентаДок.Ссылка = РеализацияТоваровУслуг.Заказ
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_Реализация КАК УЧ_Реализация
	//               |		ПО ЗаказКлиентаДок.Ссылка = УЧ_Реализация.ДокОснование
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.сабМаршрутныйЛист.ТабличнаяЧасть КАК сабМаршрутныйЛистТабличнаяЧасть
	//               |		ПО ЗаказКлиентаДок.Ссылка = сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента
	//               |			И (НЕ сабМаршрутныйЛистТабличнаяЧасть.Ссылка = &ЭтаСсылка)
	//               |			И (сабМаршрутныйЛистТабличнаяЧасть.Ссылка.ПометкаУдаления = ЛОЖЬ)
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа КАК РозничнаяПродажа
	//               |		ПО ЗаказКлиентаДок.Ссылка = РозничнаяПродажа.Заказ
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаТоваров КАК ПередачаТоваров
	//               |		ПО ЗаказКлиентаДок.Ссылка = ПередачаТоваров.Заказ
	//               |ГДЕ
	//               |	ЗаказКлиентаДок.Статус = &Статус
	//               |	И ЗаказКлиентаДок.Предприятие = &Предприятие
	//               |	И ВЫБОР
	//               |			КОГДА &Доставщик = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	//               |				ТОГДА ИСТИНА
	//               |			ИНАЧЕ ЗаказКлиентаДок.Доставщик = &Доставщик
	//               |		КОНЕЦ
	//               |	И НЕ ЗаказКлиентаДок.СпособДоставки = &СпособДоставки
	//               |	И ЗаказКлиентаДок.ДатаПоступления <= &ДатаДокумента
	//               |	И ЗаказКлиентаДок.Проведен = ИСТИНА
	//               |	И РеализацияТоваровУслуг.Ссылка ЕСТЬ NULL
	//               |	И УЧ_Реализация.Ссылка ЕСТЬ NULL
	//               |	И сабМаршрутныйЛистТабличнаяЧасть.Ссылка ЕСТЬ NULL
	//               |	И ВЫБОР
	//               |			КОГДА &МаршрутДоставки = ЗНАЧЕНИЕ(Справочник.МаршрутыДоставки.ПустаяСсылка)
	//               |				ТОГДА ИСТИНА
	//               |			ИНАЧЕ ЗаказКлиентаДок.МаршрутДоставки = &МаршрутДоставки
	//               |		КОНЕЦ
	//               |	И ВЫБОР
	//               |			КОГДА &ГрафикДоставки = ЗНАЧЕНИЕ(Справочник.ГрафикиДоставки.ПустаяСсылка)
	//               |				ТОГДА ИСТИНА
	//               |			ИНАЧЕ ЗаказКлиентаДок.ГрафикДоставки = &ГрафикДоставки
	//               |		КОНЕЦ
	//               |	И РозничнаяПродажа.Ссылка ЕСТЬ NULL
	//               |	И ПередачаТоваров.Ссылка ЕСТЬ NULL
	//               |
	//               |СГРУППИРОВАТЬ ПО
	//               |	ЗаказКлиентаДок.Ссылка,
	//               |	ЗаказКлиентаДок.СуммаДокумента,
	//               |	ЗаказКлиентаДок.Статус,
	//               |	ЗаказКлиентаДок.СтатусОплаты,
	//               |	ЗаказКлиентаДок.ВесТовара,
	//               |	ЗаказКлиентаДок.ПодразделениеКонтрагента,
	//               |	ЗаказКлиентаДок.Контрагент,
	//               |	ЗаказКлиентаДок.ДатаДоставки,
	//               |	ЗаказКлиентаДок.ДатаДоставкиДо
	//               |
	//               |ОБЪЕДИНИТЬ ВСЕ
	//               |
	//               |ВЫБРАТЬ
	//               |	ЗаказНаВозвратОтКлиента.Ссылка,
	//               |	ЗаказНаВозвратОтКлиента.СуммаДокумента,
	//               |	ЗаказНаВозвратОтКлиента.Статус,
	//               |	ЗаказНаВозвратОтКлиента.СтатусОплаты,
	//               |	МАКСИМУМ(ЕСТЬNULL(ВозвратТоваровОтПокупателя.Ссылка, ЕСТЬNULL(УЧ_Возврат.Ссылка, РозничнаяПродажа.Ссылка))),
	//               |	ЗаказНаВозвратОтКлиента.ВесТовара,
	//               |	ЗаказНаВозвратОтКлиента.Контрагент,
	//               |	ЗаказНаВозвратОтКлиента.ПодразделениеКонтрагента,
	//               |	ЗаказНаВозвратОтКлиента.ДатаДоставки,
	//               |	ЗаказНаВозвратОтКлиента.ДатаДоставкиДо
	//               |ИЗ
	//               |	Документ.ЗаказНаВозвратОтКлиента КАК ЗаказНаВозвратОтКлиента
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	//               |		ПО ЗаказНаВозвратОтКлиента.Ссылка = ВозвратТоваровОтПокупателя.Заказ
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_Возврат КАК УЧ_Возврат
	//               |		ПО ЗаказНаВозвратОтКлиента.Ссылка = УЧ_Возврат.ДокОснование
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.сабМаршрутныйЛист.ТабличнаяЧасть КАК сабМаршрутныйЛистТабличнаяЧасть
	//               |		ПО ЗаказНаВозвратОтКлиента.Ссылка = сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента
	//               |			И (НЕ сабМаршрутныйЛистТабличнаяЧасть.Ссылка = &ЭтаСсылка)
	//               |			И (сабМаршрутныйЛистТабличнаяЧасть.Ссылка.ПометкаУдаления = ЛОЖЬ)
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа КАК РозничнаяПродажа
	//               |		ПО ЗаказНаВозвратОтКлиента.Ссылка = РозничнаяПродажа.Заказ
	//               |ГДЕ
	//               |	ЗаказНаВозвратОтКлиента.Статус = &Статус
	//               |	И ЗаказНаВозвратОтКлиента.Предприятие = &Предприятие
	//               |	И ВЫБОР
	//               |			КОГДА &Доставщик = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	//               |				ТОГДА ИСТИНА
	//               |			ИНАЧЕ ЗаказНаВозвратОтКлиента.Доставщик = &Доставщик
	//               |		КОНЕЦ
	//               |	И НЕ ЗаказНаВозвратОтКлиента.СпособДоставки = &СпособДоставки
	//               |	И НАЧАЛОПЕРИОДА(ЗаказНаВозвратОтКлиента.ДатаПоступления, ДЕНЬ) <= &ДатаДокумента
	//               |	И ЗаказНаВозвратОтКлиента.Проведен = ИСТИНА
	//               |	И ВозвратТоваровОтПокупателя.Ссылка ЕСТЬ NULL
	//               |	И УЧ_Возврат.Ссылка ЕСТЬ NULL
	//               |	И сабМаршрутныйЛистТабличнаяЧасть.Ссылка ЕСТЬ NULL
	//               |	И ВЫБОР
	//               |			КОГДА &МаршрутДоставки = ЗНАЧЕНИЕ(Справочник.МаршрутыДоставки.ПустаяСсылка)
	//               |				ТОГДА ИСТИНА
	//               |			ИНАЧЕ ЗаказНаВозвратОтКлиента.МаршрутДоставки = &МаршрутДоставки
	//               |		КОНЕЦ
	//               |	И ВЫБОР
	//               |			КОГДА &ГрафикДоставки = ЗНАЧЕНИЕ(Справочник.ГрафикиДоставки.ПустаяСсылка)
	//               |				ТОГДА ИСТИНА
	//               |			ИНАЧЕ ЗаказНаВозвратОтКлиента.ГрафикДоставки = &ГрафикДоставки
	//               |		КОНЕЦ
	//               |	И РозничнаяПродажа.Ссылка ЕСТЬ NULL
	//               |
	//               |СГРУППИРОВАТЬ ПО
	//               |	ЗаказНаВозвратОтКлиента.Ссылка,
	//               |	ЗаказНаВозвратОтКлиента.СуммаДокумента,
	//               |	ЗаказНаВозвратОтКлиента.Статус,
	//               |	ЗаказНаВозвратОтКлиента.СтатусОплаты,
	//               |	ЗаказНаВозвратОтКлиента.ВесТовара,
	//               |	ЗаказНаВозвратОтКлиента.ПодразделениеКонтрагента,
	//               |	ЗаказНаВозвратОтКлиента.Контрагент,
	//               |	ЗаказНаВозвратОтКлиента.ДатаДоставки,
	//               |	ЗаказНаВозвратОтКлиента.ДатаДоставкиДо
	//               |
	//               |ОБЪЕДИНИТЬ ВСЕ
	//               |
	//               |ВЫБРАТЬ
	//               |	ЗаказПоставщику.Ссылка,
	//               |	ЗаказПоставщику.СуммаДокумента,
	//               |	ЗаказПоставщику.Статус,
	//               |	NULL,
	//               |	МАКСИМУМ(УЧ_ПоступлениеТоваров.Ссылка),
	//               |	ЗаказПоставщику.ВесТовара,
	//               |	ЗаказПоставщику.Контрагент,
	//               |	ЗаказПоставщику.Подразделение,
	//               |	ЗаказПоставщику.ДатаПоступления,
	//               |	ЗаказПоставщику.ДатаПоступления
	//               |ИЗ
	//               |	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.сабМаршрутныйЛист.ТабличнаяЧасть КАК сабМаршрутныйЛистТабличнаяЧасть
	//               |		ПО ЗаказПоставщику.Ссылка = сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента
	//               |			И (НЕ сабМаршрутныйЛистТабличнаяЧасть.Ссылка = &ЭтаСсылка)
	//               |			И (сабМаршрутныйЛистТабличнаяЧасть.Ссылка.ПометкаУдаления = ЛОЖЬ)
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_ПоступлениеТоваров КАК УЧ_ПоступлениеТоваров
	//               |		ПО ЗаказПоставщику.Ссылка = УЧ_ПоступлениеТоваров.ДокОснование
	//               |ГДЕ
	//               |	ЗаказПоставщику.Статус = &СтатусЗаказаПоставщику
	//               |	И ЗаказПоставщику.Предприятие = &Предприятие
	//               |	И НАЧАЛОПЕРИОДА(ЗаказПоставщику.ДатаПоступления, ДЕНЬ) <= &ДатаДокумента
	//               |	И ЗаказПоставщику.Проведен = ИСТИНА
	//               |	И сабМаршрутныйЛистТабличнаяЧасть.Ссылка ЕСТЬ NULL
	//               |
	//               |СГРУППИРОВАТЬ ПО
	//               |	ЗаказПоставщику.Ссылка,
	//               |	ЗаказПоставщику.СуммаДокумента,
	//               |	ЗаказПоставщику.Статус,
	//               |	ЗаказПоставщику.ВесТовара,
	//               |	ЗаказПоставщику.Контрагент,
	//               |	ЗаказПоставщику.Подразделение,
	//               |	ЗаказПоставщику.ДатаПоступления,
	//               |	ЗаказПоставщику.ДатаПоступления
	//               |
	//               |ОБЪЕДИНИТЬ ВСЕ
	//               |
	//               |ВЫБРАТЬ
	//               |	ЗаказНаПеремещение.Ссылка,
	//               |	ЗаказНаПеремещение.СуммаДокумента,
	//               |	ЗаказНаПеремещение.Статус,
	//               |	NULL,
	//               |	МАКСИМУМ(УЧ_ПеремещениеТоваров.Ссылка),
	//               |	ЗаказНаПеремещение.ВесТовара,
	//               |	ЗаказНаПеремещение.Контрагент,
	//               |	ЗаказНаПеремещение.Подразделение,
	//               |	ЗаказНаПеремещение.ДатаПоступления,
	//               |	ЗаказНаПеремещение.ДатаПоступления
	//               |ИЗ
	//               |	Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.сабМаршрутныйЛист.ТабличнаяЧасть КАК сабМаршрутныйЛистТабличнаяЧасть
	//               |		ПО ЗаказНаПеремещение.Ссылка = сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента
	//               |			И (НЕ сабМаршрутныйЛистТабличнаяЧасть.Ссылка = &ЭтаСсылка)
	//               |			И (сабМаршрутныйЛистТабличнаяЧасть.Ссылка.ПометкаУдаления = ЛОЖЬ)
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_ПеремещениеТоваров КАК УЧ_ПеремещениеТоваров
	//               |		ПО ЗаказНаПеремещение.Ссылка = УЧ_ПеремещениеТоваров.ДокОснование
	//               |ГДЕ
	//               |	ЗаказНаПеремещение.Статус = &СтатусЗаказаПоставщику
	//               |	И ЗаказНаПеремещение.Предприятие = &Предприятие
	//               |	И НАЧАЛОПЕРИОДА(ЗаказНаПеремещение.ДатаПоступления, ДЕНЬ) <= &ДатаДокумента
	//               |	И ЗаказНаПеремещение.Проведен = ИСТИНА
	//               |	И сабМаршрутныйЛистТабличнаяЧасть.Ссылка ЕСТЬ NULL
	//               |
	//               |СГРУППИРОВАТЬ ПО
	//               |	ЗаказНаПеремещение.Ссылка,
	//               |	ЗаказНаПеремещение.СуммаДокумента,
	//               |	ЗаказНаПеремещение.Статус,
	//               |	ЗаказНаПеремещение.ВесТовара,
	//               |	ЗаказНаПеремещение.Контрагент,
	//               |	ЗаказНаПеремещение.Подразделение,
	//               |	ЗаказНаПеремещение.ДатаПоступления,
	//               |	ЗаказНаПеремещение.ДатаПоступления
	//			   |;
	//			   |////////////////////////////////////////////////////////////////////
	//			   |ВЫБРАТЬ
	//               |	ВТДанныеЗаказов.ЗаказКлиента КАК ЗаказКлиента,
	//               |	ВТДанныеЗаказов.Сумма КАК Сумма,
	//               |	ВТДанныеЗаказов.Статус КАК Статус,
	//               |	ВТДанныеЗаказов.СтатусОплаты КАК СтатусОплаты,
	//               |	ВТДанныеЗаказов.Реализация КАК Реализация, 
	//			   |	Выбор Когда ВТДанныеЗаказов.Реализация Есть NULL Тогда Ложь Иначе ВТДанныеЗаказов.Реализация.ПометкаУдаления Конец Как ПометкаУдаления,
	//               |	ВТДанныеЗаказов.ВесЗаказа КАК ВесЗаказа,
	//               |	ВТДанныеЗаказов.Контрагент КАК Контрагент,
	//               |	ВТДанныеЗаказов.ПодразделениеКонтрагента КАК ПодразделениеКонтрагента,
	//               |	ВТДанныеЗаказов.ВремяДоставки КАК ВремяДоставки,
	//               |	ВТДанныеЗаказов.ВремяДоставкиПо КАК ВремяДоставкиПо
	//               |Из ВТДанныеЗаказов Как ВТДанныеЗаказов";
	//
	#КонецОбласти
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказКлиентаДок.Ссылка КАК ЗаказКлиента,
	|	ЗаказКлиентаДок.СуммаДокумента КАК Сумма,
	|	ЗаказКлиентаДок.Статус КАК Статус,
	|	ЗаказКлиентаДок.СтатусОплаты КАК СтатусОплаты,
	|	МАКСИМУМ(ЕСТЬNULL(РеализацияТоваровУслуг.Ссылка, ЕСТЬNULL(УЧ_Реализация.Ссылка, ЕСТЬNULL(ПередачаТоваров.Ссылка, РозничнаяПродажа.Ссылка)))) КАК Реализация,
	|	ЗаказКлиентаДок.ВесТовара КАК ВесЗаказа,
	|	ЗаказКлиентаДок.Контрагент КАК Контрагент,
	|	ЗаказКлиентаДок.ПодразделениеКонтрагента КАК ПодразделениеКонтрагента,
	|	ЗаказКлиентаДок.ДатаДоставки КАК ВремяДоставки,
	|	ЗаказКлиентаДок.ДатаДоставкиДо КАК ВремяДоставкиПо
	|ПОМЕСТИТЬ ВТДанныеЗаказов
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиентаДок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО ЗаказКлиентаДок.Ссылка = РеализацияТоваровУслуг.Заказ
	|			И (НЕ РеализацияТоваровУслуг.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_Реализация КАК УЧ_Реализация
	|		ПО ЗаказКлиентаДок.Ссылка = УЧ_Реализация.ДокОснование
	|			И (НЕ УЧ_Реализация.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.сабМаршрутныйЛист.ТабличнаяЧасть КАК сабМаршрутныйЛистТабличнаяЧасть
	|		ПО ЗаказКлиентаДок.Ссылка = сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента
	|			И (НЕ сабМаршрутныйЛистТабличнаяЧасть.Ссылка = &ЭтаСсылка)
	|			И (сабМаршрутныйЛистТабличнаяЧасть.Ссылка.ПометкаУдаления = ЛОЖЬ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа КАК РозничнаяПродажа
	|		ПО ЗаказКлиентаДок.Ссылка = РозничнаяПродажа.Заказ
	|			И (НЕ РозничнаяПродажа.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаТоваров КАК ПередачаТоваров
	|		ПО ЗаказКлиентаДок.Ссылка = ПередачаТоваров.Заказ
	|			И (НЕ ПередачаТоваров.ПометкаУдаления)
	|ГДЕ
	|	ЗаказКлиентаДок.Статус = &Статус
	|	И ЗаказКлиентаДок.Предприятие = &Предприятие
	|	И ВЫБОР
	|			КОГДА &Доставщик = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЗаказКлиентаДок.Доставщик = &Доставщик
	|		КОНЕЦ
	|	И НЕ ЗаказКлиентаДок.СпособДоставки = &СпособДоставки
	|	И ЗаказКлиентаДок.ДатаПоступления <= &ДатаДокумента
	|	И ЗаказКлиентаДок.Проведен = ИСТИНА
	|	И сабМаршрутныйЛистТабличнаяЧасть.Ссылка ЕСТЬ NULL
	|	И ВЫБОР
	|			КОГДА &МаршрутДоставки = ЗНАЧЕНИЕ(Справочник.МаршрутыДоставки.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЗаказКлиентаДок.МаршрутДоставки = &МаршрутДоставки
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ГрафикДоставки = ЗНАЧЕНИЕ(Справочник.ГрафикиДоставки.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЗаказКлиентаДок.ГрафикДоставки = &ГрафикДоставки
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиентаДок.Ссылка,
	|	ЗаказКлиентаДок.СуммаДокумента,
	|	ЗаказКлиентаДок.Статус,
	|	ЗаказКлиентаДок.СтатусОплаты,
	|	ЗаказКлиентаДок.ВесТовара,
	|	ЗаказКлиентаДок.ПодразделениеКонтрагента,
	|	ЗаказКлиентаДок.Контрагент,
	|	ЗаказКлиентаДок.ДатаДоставки,
	|	ЗаказКлиентаДок.ДатаДоставкиДо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказНаВозвратОтКлиента.Ссылка,
	|	ЗаказНаВозвратОтКлиента.СуммаДокумента,
	|	ЗаказНаВозвратОтКлиента.Статус,
	|	ЗаказНаВозвратОтКлиента.СтатусОплаты,
	|	МАКСИМУМ(ЕСТЬNULL(ВозвратТоваровОтПокупателя.Ссылка, ЕСТЬNULL(УЧ_Возврат.Ссылка, РозничнаяПродажа.Ссылка))),
	|	ЗаказНаВозвратОтКлиента.ВесТовара,
	|	ЗаказНаВозвратОтКлиента.Контрагент,
	|	ЗаказНаВозвратОтКлиента.ПодразделениеКонтрагента,
	|	ЗаказНаВозвратОтКлиента.ДатаДоставки,
	|	ЗаказНаВозвратОтКлиента.ДатаДоставкиДо
	|ИЗ
	|	Документ.ЗаказНаВозвратОтКлиента КАК ЗаказНаВозвратОтКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|		ПО ЗаказНаВозвратОтКлиента.Ссылка = ВозвратТоваровОтПокупателя.Заказ
	|			И (НЕ ВозвратТоваровОтПокупателя.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_Возврат КАК УЧ_Возврат
	|		ПО ЗаказНаВозвратОтКлиента.Ссылка = УЧ_Возврат.ДокОснование
	|			И (НЕ УЧ_Возврат.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.сабМаршрутныйЛист.ТабличнаяЧасть КАК сабМаршрутныйЛистТабличнаяЧасть
	|		ПО ЗаказНаВозвратОтКлиента.Ссылка = сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента
	|			И (НЕ сабМаршрутныйЛистТабличнаяЧасть.Ссылка = &ЭтаСсылка)
	|			И (сабМаршрутныйЛистТабличнаяЧасть.Ссылка.ПометкаУдаления = ЛОЖЬ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа КАК РозничнаяПродажа
	|		ПО ЗаказНаВозвратОтКлиента.Ссылка = РозничнаяПродажа.Заказ
	|			И (НЕ РозничнаяПродажа.ПометкаУдаления)
	|ГДЕ
	|	ЗаказНаВозвратОтКлиента.Статус = &Статус
	|	И ЗаказНаВозвратОтКлиента.Предприятие = &Предприятие
	|	И ВЫБОР
	|			КОГДА &Доставщик = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЗаказНаВозвратОтКлиента.Доставщик = &Доставщик
	|		КОНЕЦ
	|	И НЕ ЗаказНаВозвратОтКлиента.СпособДоставки = &СпособДоставки
	|	И НАЧАЛОПЕРИОДА(ЗаказНаВозвратОтКлиента.ДатаПоступления, ДЕНЬ) <= &ДатаДокумента
	|	И ЗаказНаВозвратОтКлиента.Проведен = ИСТИНА
	|	И сабМаршрутныйЛистТабличнаяЧасть.Ссылка ЕСТЬ NULL
	|	И ВЫБОР
	|			КОГДА &МаршрутДоставки = ЗНАЧЕНИЕ(Справочник.МаршрутыДоставки.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЗаказНаВозвратОтКлиента.МаршрутДоставки = &МаршрутДоставки
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ГрафикДоставки = ЗНАЧЕНИЕ(Справочник.ГрафикиДоставки.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЗаказНаВозвратОтКлиента.ГрафикДоставки = &ГрафикДоставки
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказНаВозвратОтКлиента.Ссылка,
	|	ЗаказНаВозвратОтКлиента.СуммаДокумента,
	|	ЗаказНаВозвратОтКлиента.Статус,
	|	ЗаказНаВозвратОтКлиента.СтатусОплаты,
	|	ЗаказНаВозвратОтКлиента.ВесТовара,
	|	ЗаказНаВозвратОтКлиента.ПодразделениеКонтрагента,
	|	ЗаказНаВозвратОтКлиента.Контрагент,
	|	ЗаказНаВозвратОтКлиента.ДатаДоставки,
	|	ЗаказНаВозвратОтКлиента.ДатаДоставкиДо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПоставщику.Ссылка,
	|	ЗаказПоставщику.СуммаДокумента,
	|	ЗаказПоставщику.Статус,
	|	NULL,
	|	МАКСИМУМ(ЕСТЬNULL(ПоступлениеТоваровУслуг.Ссылка, УЧ_ПоступлениеТоваров.Ссылка)),
	|	ЗаказПоставщику.ВесТовара,
	|	ЗаказПоставщику.Контрагент,
	|	ЗаказПоставщику.Подразделение,
	|	ЗаказПоставщику.ДатаПоступления,
	|	ЗаказПоставщику.ДатаПоступления
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|		ПО ЗаказПоставщику.Ссылка = ПоступлениеТоваровУслуг.Заказ
	|			И (НЕ ПоступлениеТоваровУслуг.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.сабМаршрутныйЛист.ТабличнаяЧасть КАК сабМаршрутныйЛистТабличнаяЧасть
	|		ПО ЗаказПоставщику.Ссылка = сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента
	|			И (НЕ сабМаршрутныйЛистТабличнаяЧасть.Ссылка = &ЭтаСсылка)
	|			И (сабМаршрутныйЛистТабличнаяЧасть.Ссылка.ПометкаУдаления = ЛОЖЬ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_ПоступлениеТоваров КАК УЧ_ПоступлениеТоваров
	|		ПО ЗаказПоставщику.Ссылка = УЧ_ПоступлениеТоваров.ДокОснование
	|			И (НЕ УЧ_ПоступлениеТоваров.ПометкаУдаления)
	|ГДЕ
	|	ЗаказПоставщику.Статус = &СтатусЗаказаПоставщику
	|	И ЗаказПоставщику.Предприятие = &Предприятие
	|	И НАЧАЛОПЕРИОДА(ЗаказПоставщику.ДатаПоступления, ДЕНЬ) <= &ДатаДокумента
	|	И ЗаказПоставщику.Проведен = ИСТИНА
	|	И сабМаршрутныйЛистТабличнаяЧасть.Ссылка ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПоставщику.Ссылка,
	|	ЗаказПоставщику.СуммаДокумента,
	|	ЗаказПоставщику.Статус,
	|	ЗаказПоставщику.ВесТовара,
	|	ЗаказПоставщику.Контрагент,
	|	ЗаказПоставщику.Подразделение,
	|	ЗаказПоставщику.ДатаПоступления,
	|	ЗаказПоставщику.ДатаПоступления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказНаПеремещение.Ссылка,
	|	ЗаказНаПеремещение.СуммаДокумента,
	|	ЗаказНаПеремещение.Статус,
	|	NULL,
	|	МАКСИМУМ(ЕСТЬNULL(ПеремещениеТоваров.Ссылка, УЧ_ПеремещениеТоваров.Ссылка)),
	|	ЗаказНаПеремещение.ВесТовара,
	//|	ЗаказНаПеремещение.Контрагент,
	|	ЗаказНаПеремещение.Склад,
	|	ЗаказНаПеремещение.Подразделение,
	|	ЗаказНаПеремещение.ДатаПоступления,
	|	ЗаказНаПеремещение.ДатаПоступления
	|ИЗ
	|	Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.сабМаршрутныйЛист.ТабличнаяЧасть КАК сабМаршрутныйЛистТабличнаяЧасть
	|		ПО ЗаказНаПеремещение.Ссылка = сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента
	|			И (НЕ сабМаршрутныйЛистТабличнаяЧасть.Ссылка = &ЭтаСсылка)
	|			И (сабМаршрутныйЛистТабличнаяЧасть.Ссылка.ПометкаУдаления = ЛОЖЬ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_ПеремещениеТоваров КАК УЧ_ПеремещениеТоваров
	|		ПО ЗаказНаПеремещение.Ссылка = УЧ_ПеремещениеТоваров.ДокОснование
	|			И (НЕ УЧ_ПеремещениеТоваров.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|		ПО ЗаказНаПеремещение.Ссылка = ПеремещениеТоваров.Заказ
	|			И (НЕ ПеремещениеТоваров.ПометкаУдаления)
	|ГДЕ
	|	ЗаказНаПеремещение.Статус = &СтатусЗаказаПоставщику
	|	И ЗаказНаПеремещение.Предприятие = &Предприятие
	|	И НАЧАЛОПЕРИОДА(ЗаказНаПеремещение.ДатаПоступления, ДЕНЬ) <= &ДатаДокумента
	|	И ЗаказНаПеремещение.Проведен = ИСТИНА
	|	И сабМаршрутныйЛистТабличнаяЧасть.Ссылка ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказНаПеремещение.Ссылка,
	|	ЗаказНаПеремещение.СуммаДокумента,
	|	ЗаказНаПеремещение.Статус,
	|	ЗаказНаПеремещение.ВесТовара,
	//|	ЗаказНаПеремещение.Контрагент,
	|	ЗаказНаПеремещение.Склад,
	|	ЗаказНаПеремещение.Подразделение,
	|	ЗаказНаПеремещение.ДатаПоступления,
	|	ЗаказНаПеремещение.ДатаПоступления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеЗаказов.ЗаказКлиента КАК ЗаказКлиента,
	|	ВТДанныеЗаказов.Сумма КАК Сумма,
	|	ВТДанныеЗаказов.Статус КАК Статус,
	|	ВТДанныеЗаказов.СтатусОплаты КАК СтатусОплаты,
	|	ВТДанныеЗаказов.Реализация КАК Реализация,
	|	ВЫБОР
	|		КОГДА ВТДанныеЗаказов.Реализация ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ВТДанныеЗаказов.Реализация.ПометкаУдаления
	|	КОНЕЦ КАК ПометкаУдаления,
	|	ВТДанныеЗаказов.ВесЗаказа КАК ВесЗаказа,
	|	ВТДанныеЗаказов.Контрагент КАК Контрагент,
	|	ВТДанныеЗаказов.ПодразделениеКонтрагента КАК ПодразделениеКонтрагента,
	|	ВТДанныеЗаказов.ВремяДоставки КАК ВремяДоставки,
	|	ВТДанныеЗаказов.ВремяДоставкиПо КАК ВремяДоставкиПо
	|ИЗ
	|	ВТДанныеЗаказов КАК ВТДанныеЗаказов";
	
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыЗаказовКлиентов.КОтгрузке);
	Запрос.УстановитьПараметр("СтатусЗаказаПоставщику", Перечисления.СтатусыЗаказовПоставщикам.КПоступлению);
	Запрос.УстановитьПараметр("Предприятие", Объект.Предприятие);
	Запрос.УстановитьПараметр("Доставщик", Объект.Доставщик);
	Запрос.УстановитьПараметр("МаршрутДоставки", Объект.МаршрутДоставки);
	Запрос.УстановитьПараметр("СпособДоставки", Справочники.СпособыДоставки.Самовывоз);
	Запрос.УстановитьПараметр("ГрафикДоставки", Объект.ГрафикДоставки);
	Запрос.УстановитьПараметр("ДатаДокумента", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("ЭтаСсылка", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();//Запрос.Выполнить().Выгрузить()
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НайденныеСтроки = Объект.ТабличнаяЧасть.НайтиСтроки(Новый Структура("ЗаказКлиента", Выборка.ЗаказКлиента));
		
		Если НЕ НайденныеСтроки.Количество() Тогда
			НоваяСтрока = Объект.ТабличнаяЧасть.Добавить();	
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка,,"Реализация");
			//Если ЗначениеЗаполнено(Выборка.Реализация) Тогда
			//	Если Не Выборка.Реализация.ПометкаУдаления Тогда
			//		НоваяСтрока.Реализация = Выборка.Реализация;
			//	КонецЕсли;
			//КонецЕсли;   
			Если Не Выборка.ПометкаУдаления Тогда
				НоваяСтрока.Реализация = Выборка.Реализация;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьЗначенияСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	ЗаполнитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьРеализацииНаСервере(ИмяКоманды,ЗаполнятьСерии)
	
	МассивСтрокДляВыгрузки = Новый Массив;
	
	Для каждого ТекСтрока Из Объект.ТабличнаяЧасть Цикл
		
		Если Не ЗначениеЗаполнено(ТекСтрока.Реализация) Тогда
			
			Если ТипЗнч(ТекСтрока.ЗаказКлиента) = Тип("ДокументСсылка.ЗаказНаВозвратОтКлиента") Тогда
				
				Если ЗначениеЗаполнено(ТекСтрока.ЗаказКлиента.Организация) Тогда
					
					Если ТекСтрока.ЗаказКлиента.БезвозмезднаяПередача Тогда
						НоваяРеализация = Документы.ОприходованиеТоваров.СоздатьДокумент();
						НоваяРеализация.Заполнить(ТекСтрока.ЗаказКлиента);
						НоваяРеализация.ДополнительныеСвойства.Вставить("НеИзменятьСтатусЗаказа", Истина);
						НоваяРеализация.Записать(?(ПроводитьДокументы, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));//всегда непроведенным, т.к. нужно закрывать смену вручную
						ТекСтрока.Реализация = НоваяРеализация.Ссылка; 
					ИначеЕсли ТекСтрока.ЗаказКлиента.ПродажаВРозницу Тогда
						НоваяРеализация = Документы.РозничнаяПродажа.СоздатьДокумент();
						НоваяРеализация.Заполнить(ТекСтрока.ЗаказКлиента);
						НоваяРеализация.ДополнительныеСвойства.Вставить("НеИзменятьСтатусЗаказа", Истина);
						НоваяРеализация.Записать(РежимЗаписиДокумента.Запись);//всегда непроведенным, т.к. нужно закрывать смену вручную
						ТекСтрока.Реализация = НоваяРеализация.Ссылка; 
					Иначе
						НоваяРеализация = Документы.ВозвратТоваровОтПокупателя.СоздатьДокумент();
						НоваяРеализация.Заполнить(ТекСтрока.ЗаказКлиента);
						НоваяРеализация.ДополнительныеСвойства.Вставить("НеИзменятьСтатусЗаказа", Истина);
						НоваяРеализация.Записать(?(ПроводитьДокументы, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
						ТекСтрока.Реализация = НоваяРеализация.Ссылка;
						НовыйСчФ = Документы.СчетФактураВыданный.СоздатьДокумент();
						НовыйСчФ.Заполнить(НоваяРеализация.Ссылка);
						НовыйСчФ.Записать(?(ПроводитьДокументы, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
					КонецЕсли; 
					
				Иначе	
					НоваяРеализация = Документы.УЧ_Возврат.СоздатьДокумент();
					НоваяРеализация.Заполнить(ТекСтрока.ЗаказКлиента);
					НоваяРеализация.ДополнительныеСвойства.Вставить("НеИзменятьСтатусЗаказа", Истина);
					НоваяРеализация.Записать(?(ПроводитьДокументы, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
					ТекСтрока.Реализация = НоваяРеализация.Ссылка; 
				КонецЕсли;
				Если ЗаполнятьСерии Тогда
					МассивСтрокДляВыгрузки.Добавить(ТекСтрока);
				КонецЕсли;
			ИначеЕсли ТипЗнч(ТекСтрока.ЗаказКлиента) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
				
				Если ЗначениеЗаполнено(ТекСтрока.ЗаказКлиента.Организация) Тогда
					
					Если ТекСтрока.ЗаказКлиента.БезвозмезднаяПередача Тогда
						НоваяРеализация = Документы.ТребованиеНакладная.СоздатьДокумент();
						НоваяРеализация.Заполнить(ТекСтрока.ЗаказКлиента);
						НоваяРеализация.ДополнительныеСвойства.Вставить("НеИзменятьСтатусЗаказа", Истина);
						НоваяРеализация.Записать(?(ПроводитьДокументы, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));//всегда непроведенным, т.к. нужно закрывать смену вручную
						ТекСтрока.Реализация = НоваяРеализация.Ссылка; 
					ИначеЕсли ТекСтрока.ЗаказКлиента.ПродажаВРозницу Тогда
						НоваяРеализация = Документы.РозничнаяПродажа.СоздатьДокумент();
						НоваяРеализация.Заполнить(ТекСтрока.ЗаказКлиента);
						НоваяРеализация.ДополнительныеСвойства.Вставить("НеИзменятьСтатусЗаказа", Истина);
						НоваяРеализация.Записать(РежимЗаписиДокумента.Запись);//всегда непроведенным, т.к. нужно закрывать смену вручную
						ТекСтрока.Реализация = НоваяРеализация.Ссылка; 
					Иначе
						НоваяРеализация = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
						НоваяРеализация.Заполнить(ТекСтрока.ЗаказКлиента);
						НоваяРеализация.ДополнительныеСвойства.Вставить("НеИзменятьСтатусЗаказа", Истина);
						НоваяРеализация.Записать(?(ПроводитьДокументы, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
						ТекСтрока.Реализация = НоваяРеализация.Ссылка;
						
						Если СоздаватьСчетНаОплатуПокупателю Тогда
							НовыйСчет = Документы.СчетНаОплатуПокупателю.СоздатьДокумент();
							НовыйСчет.Заполнить(НоваяРеализация.Ссылка);
							
							Попытка
								НовыйСчет.Записать(?(ПроводитьДокументы, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));				
							Исключение
								НовыйСчет.Записать();				
							КонецПопытки;
							
							НоваяРеализация.СчетНаОплатуПокупателю = НовыйСчет.Ссылка;
							НоваяРеализация.Записать();
						КонецЕсли;
						
						НовыйСчФ = Документы.СчетФактураВыданный.СоздатьДокумент();
						НовыйСчФ.Заполнить(НоваяРеализация.Ссылка);
						НовыйСчФ.Записать(?(ПроводитьДокументы, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
					КонецЕсли;   
					
				Иначе	
					НоваяРеализация = Документы.УЧ_Реализация.СоздатьДокумент();
					НоваяРеализация.Заполнить(ТекСтрока.ЗаказКлиента);
					НоваяРеализация.ДополнительныеСвойства.Вставить("НеИзменятьСтатусЗаказа", Истина);
					НоваяРеализация.Записать(?(ПроводитьДокументы, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
					ТекСтрока.Реализация = НоваяРеализация.Ссылка; 
				КонецЕсли;  
				Если ЗаполнятьСерии Тогда
					МассивСтрокДляВыгрузки.Добавить(ТекСтрока);
				КонецЕсли;
			ИначеЕсли ТипЗнч(ТекСтрока.ЗаказКлиента) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
				Если ЗначениеЗаполнено(ТекСтрока.ЗаказКлиента.Организация) Тогда
					НоваяРеализация = Документы.ПеремещениеТоваров.СоздатьДокумент();
					НоваяРеализация.Заполнить(ТекСтрока.ЗаказКлиента);
					НоваяРеализация.ДополнительныеСвойства.Вставить("НеИзменятьСтатусЗаказа", Истина);
					НоваяРеализация.Записать(?(ПроводитьДокументы, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));//всегда непроведенным, т.к. нужно закрывать смену вручную
					ТекСтрока.Реализация = НоваяРеализация.Ссылка; 
				Иначе	
					НоваяРеализация = Документы.УЧ_ПеремещениеТоваров.СоздатьДокумент();
					НоваяРеализация.Заполнить(ТекСтрока.ЗаказКлиента);
					НоваяРеализация.ДополнительныеСвойства.Вставить("НеИзменятьСтатусЗаказа", Истина);
					НоваяРеализация.Записать(?(ПроводитьДокументы, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
					ТекСтрока.Реализация = НоваяРеализация.Ссылка; 
				КонецЕсли;
				Если ЗаполнятьСерии Тогда
					МассивСтрокДляВыгрузки.Добавить(ТекСтрока);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;  
	Если ЗаполнятьСерии Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	сабМаршрутныйЛистТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
		|	сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента КАК ЗаказКлиента,
		|	сабМаршрутныйЛистТабличнаяЧасть.Реализация КАК Реализация
		|ПОМЕСТИТЬ ВТТабличнаяЧасть
		|ИЗ
		|	&ТабличнаяЧасть КАК сабМаршрутныйЛистТабличнаяЧасть
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента ССЫЛКА Документ.ЗаказНаПеремещение
		|			ТОГДА сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента
		|		ИНАЧЕ сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента.Контрагент
		|	КОНЕЦ КАК Контрагент,
		|	Максимум(сабМаршрутныйЛистТабличнаяЧасть.НомерСтроки) КАК ПорядокДоставки,
		|	ВЫБОР
		|		КОГДА сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента ССЫЛКА Документ.ЗаказНаПеремещение
		|			ТОГДА сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента
		|		ИНАЧЕ сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента.ПодразделениеКонтрагента
		|	КОНЕЦ КАК ЗаказКлиентаПодразделениеКонтрагента
		|ПОМЕСТИТЬ ВТ_ГруппировкаНомерПорядка
		|ИЗ
		|	ВТТабличнаяЧасть КАК сабМаршрутныйЛистТабличнаяЧасть
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента ССЫЛКА Документ.ЗаказНаПеремещение
		|			ТОГДА сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента
		|		ИНАЧЕ сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента.Контрагент
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента ССЫЛКА Документ.ЗаказНаПеремещение
		|			ТОГДА сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента
		|		ИНАЧЕ сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента.ПодразделениеКонтрагента
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
		|	ВТТабличнаяЧасть.ЗаказКлиента КАК ЗаказКлиента,
		|	ВТТабличнаяЧасть.Реализация КАК Реализация,
		|	ВТ_ГруппировкаНомерПорядка.ПорядокДоставки КАК ПорядокДоставки
		|ИЗ
		|	ВТТабличнаяЧасть КАК ВТТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ГруппировкаНомерПорядка КАК ВТ_ГруппировкаНомерПорядка
		|		ПО (ВЫБОР
		|				КОГДА ВТТабличнаяЧасть.ЗаказКлиента ССЫЛКА Документ.ЗаказНаПеремещение
		|					ТОГДА ВТТабличнаяЧасть.ЗаказКлиента = ВТ_ГруппировкаНомерПорядка.Контрагент
		|				ИНАЧЕ ВТТабличнаяЧасть.ЗаказКлиента.Контрагент = ВТ_ГруппировкаНомерПорядка.Контрагент
		|						И ВТТабличнаяЧасть.ЗаказКлиента.ПодразделениеКонтрагента = ВТ_ГруппировкаНомерПорядка.ЗаказКлиентаПодразделениеКонтрагента
		|			КОНЕЦ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПорядокДоставки УБЫВ";  
		Запрос.УстановитьПараметр("ТабличнаяЧасть",Объект.ТабличнаяЧасть.Выгрузить(МассивСтрокДляВыгрузки,"НомерСтроки,ЗаказКлиента,Реализация"));
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Реализация) Тогда
				Если ТипЗнч(Выборка.Реализация) = Тип("ДокументСсылка.УЧ_Реализация") Тогда
					ЗаполнитьСерииПоФИФОНаСервере(НоваяРеализация,Ложь);
					Попытка
						НоваяРеализация.Записать(РежимЗаписиДокумента.Проведение);
					Исключение
						НоваяРеализация.Записать(РежимЗаписиДокумента.Запись); 
					КонецПопытки;  
				Иначе
					СоздатьУпрДокументыИЗаполнитьСерии(Выборка.Реализация); 
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	Записать();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьУУДокумент(НоваяРеализация);
	
	ЗапросДокУУ = Новый Запрос;
	ЗапросДокУУ.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	сабОбработкаДокументов.ДокументУУ КАК ДокументУУ
	|ИЗ
	|	РегистрСведений.сабОбработкаДокументов КАК сабОбработкаДокументов
	|ГДЕ
	|	сабОбработкаДокументов.ДокументБУ = &ДокБУ";
	
	ЗапросДокУУ.УстановитьПараметр("ДокБУ", НоваяРеализация);
	
	РезультатЗапросаДокУУ = ЗапросДокУУ.Выполнить();
	Если РезультатЗапросаДокУУ.Пустой() Тогда
		Возврат Неопределено;
	Иначе 
		Выборка = РезультатЗапросаДокУУ.Выбрать();
		Выборка.Следующий(); 
		Возврат Выборка.ДокументУУ;
	КонецЕсли;
	
КонецФункции  

&НаСервере
Процедура СоздатьУпрДокументыИЗаполнитьСерии(ДокументБУСсылка)
	
	РегистрыСведений.сабОбработкаДокументов.ОбработатьДокументыБУНаСервере(Новый Структура("Ссылка",ДокументБУСсылка)); 
	ДокументУУ = ПолучитьУУДокумент(ДокументБУСсылка);
	Если ДокументУУ <> Неопределено Тогда
		ЗаполнитьСерииПоФИФОНаСервере(ДокументУУ);
		СинхронизацияСерийПриЗаписиНаСервереФормы(ДокументБУСсылка,ДокументУУ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСерииПоФИФОНаСервере(ДокументУУ,ЗаписыватьДокумент = Истина)
	Если ЗаписыватьДокумент Тогда
		ДокОбъект = ДокументУУ.ПолучитьОбъект();
	Иначе
		ДокОбъект = ДокументУУ;
	КонецЕсли;
	Если ТипЗнч(ДокументУУ) = Тип("ДокументСсылка.УЧ_Возврат") 
		ИЛИ ТипЗнч(ДокументУУ) = Тип("ДокументСсылка.УЧ_ВозвратТоваровПоставщику")
		ИЛИ ТипЗнч(ДокументУУ) = Тип("ДокументСсылка.УЧ_ВозвратТоваровПоставщику")
		ИЛИ ТипЗнч(ДокументУУ) = Тип("ДокументСсылка.УЧ_КорректировкаПоступления")
		ИЛИ ТипЗнч(ДокументУУ) = Тип("ДокументОбъект.УЧ_Реализация")
		ИЛИ ТипЗнч(ДокументУУ) = Тип("ДокументСсылка.УЧ_Реализация") Тогда
		ИмяОсновнойТЧ = "Товары";
		ИмяНоменклатуры = "Номенклатура";
	ИначеЕсли  ТипЗнч(ДокументУУ) = Тип("ДокументСсылка.УЧ_ВыпускПродукции") Тогда
		ИмяОсновнойТЧ = "Материалы"; 
		ИмяНоменклатуры = "Материал";
		
	ИначеЕсли  ТипЗнч(ДокументУУ) = Тип("ДокументСсылка.УЧ_ОприходованиеТоваров")
		ИЛИ ТипЗнч(ДокументУУ) = Тип("ДокументСсылка.УЧ_ПеремещениеМатериаловВПроизводство") 
		ИЛИ ТипЗнч(ДокументУУ) = Тип("ДокументСсылка.УЧ_ПеремещениеТоваров") 
		ИЛИ ТипЗнч(ДокументУУ) = Тип("ДокументСсылка.УЧ_ПоступлениеТоваров")  
		ИЛИ ТипЗнч(ДокументУУ) = Тип("ДокументСсылка.УЧ_СписаниеТоваров") Тогда
		ИмяОсновнойТЧ = "ТабличнаяЧасть"; 
		ИмяНоменклатуры = "Номенклатура";
	Иначе
		Возврат;	
	КонецЕсли;
	
	Если ТипЗнч(ДокументУУ) = Тип("ДокументСсылка.УЧ_ОприходованиеТоваров") 
		ИЛИ ТипЗнч(ДокументУУ) = Тип("ДокументСсылка.УЧ_СписаниеТоваров") Тогда
		ИмяНоменклатуры = "Товар";
	КонецЕсли;
	
	СтруктураИмен = УЧ_Сервер.СформироватьСтруктуруИмен(ДокОбъект);
	
	СтруктураСоответствий = УЧ_Сервер.ПоучитьСоответствияСчетовНоменклатуры(ДокОбъект, СтруктураИмен);
	СоответствиеСчета = СтруктураСоответствий.Соответствия;
	СоответствиеУчетаПоПодразделениям = СтруктураСоответствий.СоответствияУчетаПодразделений;
	
	ТаблицаОстатков = УЧ_Сервер.ПолучитьТаблицуОстатков(ДокОбъект, СтруктураИмен, СтруктураСоответствий,,Истина,Истина);
	РезультатОстатки = ТаблицаОстатков.РезультатОстатки;
	
	РезультатОстатки.Свернуть("Номенклатура, Склад, СерияНоменклатуры, Подразделение, Предприятия", "КоличествоОстаток, Сумма"); 
	
	РезультатОстатки.Колонки.Добавить("ДатаПроизводства", Новый ОписаниеТипов("Дата",,,));
	
	Серии = Новый Массив;
	МассивУдаленных = Новый Массив;
	Для каждого ТекСтрока Из РезультатОстатки Цикл
		Если ТекСтрока.КоличествоОстаток > 0 И ЗначениеЗаполнено(ТекСтрока.СерияНоменклатуры) И Серии.Найти(ТекСтрока.СерияНоменклатуры) = Неопределено Тогда
			Серии.Добавить(ТекСтрока.СерияНоменклатуры);
		Иначе
			МассивУдаленных.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекУд Из МассивУдаленных Цикл
		РезультатОстатки.Удалить(ТекУд);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СерииНоменклатуры.Ссылка КАК СерияНоменклатуры,
	|	СерииНоменклатуры.ДатаПроизводства КАК ДатаПроизводства,
	|	СерииНоменклатуры.ГоденДо КАК ГоденДо
	|ИЗ
	|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|ГДЕ
	|	СерииНоменклатуры.Ссылка В(&Серии)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПроизводства
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Серии", Серии);
	
	Результат = Запрос.Выполнить();
	ВыборкаСерии = Результат.Выгрузить();
	
	Для каждого ТекСтрока Из РезультатОстатки Цикл
		НайденныйСтроки = ВыборкаСерии.НайтиСтроки(Новый Структура("СерияНоменклатуры", ТекСтрока.СерияНоменклатуры));
		Для каждого ТекНайд Из НайденныйСтроки Цикл
			ТекСтрока.ДатаПроизводства = ТекНайд.ДатаПроизводства;		
		КонецЦикла;
	КонецЦикла;
	
	РезультатОстатки.Сортировать("ДатаПроизводства");
	
	//Если КомандаИмя = "ЗаполнитьСерииПоФИФО1" Тогда
	//	Объект.СерииНоменклатуры.Очистить();	
	//КонецЕсли;
	
	СерииРезультат = ДокОбъект.СерииНоменклатуры.Выгрузить();
	
	Для каждого ТекСтрока Из ДокОбъект[ИмяОсновнойТЧ] Цикл
		
		//Если КомандаИмя = "ЗаполнитьСерииПоФИФО1" Тогда
		//	ТекСтрока.СерияНоменклатуры = Неопределено;
		//	ТекСтрока.НесколькоСерий = Ложь;	
		//КонецЕсли;
		
		//Если ЗначениеЗаполнено(ТекСтрока.СерияНоменклатуры) ИЛИ ТекСтрока.НесколькоСерий Тогда
		//	Продолжить;		
		//КонецЕсли;
		
		СерииРезультат.Очистить();
		
		НайденныйСтроки = РезультатОстатки.НайтиСтроки(Новый Структура("Номенклатура", ТекСтрока[ИмяНоменклатуры]));
		
		КоличествоНужно = ТекСтрока.Количество;
		Для каждого ТекНайд Из НайденныйСтроки Цикл
			Если Не ТекНайд.КоличествоОстаток ИЛИ ТекНайд.КоличествоОстаток < 0 Тогда
				Продолжить;			
			КонецЕсли;
			Если ТекНайд.КоличествоОстаток >= КоличествоНужно Тогда
				ТекНайд.КоличествоОстаток = ТекНайд.КоличествоОстаток - ТекСтрока.Количество;
				ТекСтрока.СерияНоменклатуры = ТекНайд.СерияНоменклатуры;	
				НоваяСтрока = СерииРезультат.Добавить();
				НоваяСтрока.Номенклатура = ТекСтрока[ИмяНоменклатуры];
				НоваяСтрока.СерияНоменклатуры = ТекНайд.СерияНоменклатуры;
				НоваяСтрока.ИдентификаторСтрокиРеализации = ТекСтрока.НомерСтроки;
				НоваяСтрока.Количество = КоличествоНужно;
				КоличествоНужно = 0;
				Прервать;
			Иначе
				НоваяСтрока = СерииРезультат.Добавить();
				НоваяСтрока.Номенклатура = ТекСтрока[ИмяНоменклатуры];
				НоваяСтрока.СерияНоменклатуры = ТекНайд.СерияНоменклатуры;
				НоваяСтрока.ИдентификаторСтрокиРеализации = ТекСтрока.НомерСтроки;
				НоваяСтрока.Количество = ТекНайд.КоличествоОстаток;
				КоличествоНужно = КоличествоНужно - ТекНайд.КоличествоОстаток;
				ТекНайд.КоличествоОстаток = 0;
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоНужно Тогда
			НоваяСтрока = СерииРезультат.Добавить();
			НоваяСтрока.Номенклатура = ТекСтрока[ИмяНоменклатуры];
			НоваяСтрока.СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
			НоваяСтрока.ИдентификаторСтрокиРеализации = ТекСтрока.НомерСтроки;
			НоваяСтрока.Количество = КоличествоНужно;
		КонецЕсли;
		
		Если СерииРезультат.Количество() Тогда
			
			//ТекСтрока.НесколькоСерий = СерииРезультат.Количество() > 1;
			
			МассивУдСерий = Новый Массив;
			Для каждого ТекСтрокаОб Из ДокОбъект.СерииНоменклатуры Цикл
				Если ТекСтрокаОб.Номенклатура = ТекСтрока[ИмяНоменклатуры] И ТекСтрокаОб.НомерСтрокиРеализации = ТекСтрока.НомерСтроки Тогда
					МассивУдСерий.Добавить(ТекСтрокаОб);
				КонецЕсли;
			КонецЦикла;
			
			Для каждого ТекУд Из МассивУдСерий Цикл
				ДокОбъект.СерииНоменклатуры.Удалить(ТекУд);
			КонецЦикла;
			
			НовоеКоличество = 0;
			Для каждого ТекСтрокаОб Из СерииРезультат Цикл
				НоваяСтрока = ДокОбъект.СерииНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаОб);
				НоваяСтрока.НомерСтрокиРеализации = ТекСтрока.НомерСтроки;
				НовоеКоличество = НовоеКоличество + ТекСтрокаОб.Количество; 
				НоваяСтрока.ДатаПроизводства = сабОбщегоНазначенияБУХ.ПолучитьДатуПроизводстваДляСерииНоменклатуры(ТекСтрокаОб.СерияНоменклатуры);
			КонецЦикла;
			
			//ДокОбъект.СерииНоменклатуры.Сортировать("НомерСтрокиРеализации"); 
			//Если ЗаписыватьДокумент Тогда
			//	Попытка
			//		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			//	Исключение
			//		ДокОбъект.Записать(РежимЗаписиДокумента.Запись); 
			//	КонецПопытки;
			//КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ДокОбъект.СерииНоменклатуры.Сортировать("НомерСтрокиРеализации"); 
	Если ЗаписыватьДокумент Тогда
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись); 
		КонецПопытки;
	КонецЕсли;
	
	
КонецПроцедуры  

&НаСервере
Процедура СинхронизацияСерийПриЗаписиНаСервереФормы(ДокументБУ,ДокументУУ)
	
	//Если ПараметрыЗаписи.Свойство("СинхронизироватьСерииНоменклатурыСДокументомБух") Тогда
	//	Если Не Отказ И ПараметрыЗаписи.СинхронизироватьСерииНоменклатурыСДокументомБух	Тогда
	УстановитьПривилегированныйРежим(Истина);
	ЗаписываемДокумент = Ложь;
	ДокументБУОбъект = ДокументБУ.ПолучитьОбъект();
	Если ОбщегоНазначенияБП.ЕстьТабЧастьДокумента("СерииНоменклатуры",ДокументБУОбъект.Метаданные())Тогда 
		МассивУдаляемыхСтрок = Новый Массив;
		Для Каждого СтрокаСерииТЧ Из ДокументБУОбъект.СерииНоменклатуры Цикл
			СтруктураПоиска = Новый Структура("Номенклатура,НомерСтрокиРеализации",СтрокаСерииТЧ.Номенклатура,СтрокаСерииТЧ.НомерСтрокиРеализации);
			МассивНайденныхСтрок = ДокументУУ.СерииНоменклатуры.НайтиСтроки(СтруктураПоиска); 
			Если МассивНайденныхСтрок.Количество() > 0 Тогда
				МассивУдаляемыхСтрок.Добавить(СтрокаСерииТЧ);
			КонецЕсли;
		КонецЦикла;	 
		Для Каждого СтрокаМассива Из МассивУдаляемыхСтрок Цикл
			ДокументБУОбъект.СерииНоменклатуры.Удалить(СтрокаМассива);
		КонецЦикла;
		Для Каждого СтрокаТЧСерииУпр Из ДокументУУ.СерииНоменклатуры Цикл
			НоваяСтрокаТЧСерииБух = ДокументБУОбъект.СерииНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧСерииБух,СтрокаТЧСерииУпр);
		КонецЦикла;
		
		ДокументБУОбъект.СерииНоменклатуры.Сортировать("НомерСтрокиРеализации");
		Если ОбщегоНазначенияБП.ЕстьТабЧастьДокумента("Материалы",ДокументБУОбъект.Метаданные()) И
			Не ОбщегоНазначенияБП.ЕстьТабЧастьДокумента("Товары",ДокументБУОбъект.Метаданные()) Тогда
			Если ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("СерияНоменклатуры",ДокументБУОбъект.Метаданные(),"Материалы") Тогда
				Для Каждого СтрокаТЧТоварыБух Из ДокументБУОбъект.Материалы Цикл
					СтруктураПоискаДляТоваров = Новый Структура("Номенклатура,НомерСтрокиРеализации",СтрокаТЧТоварыБух.Номенклатура,СтрокаТЧТоварыБух.НомерСтроки);
					МассивНайденныхСтрокДляЗаполненияТоваров = ДокументБУОбъект.СерииНоменклатуры.НайтиСтроки(СтруктураПоискаДляТоваров);
					Если МассивНайденныхСтрокДляЗаполненияТоваров.Количество() = 1 Тогда
						СтрокаТЧТоварыБух.СерияНоменклатуры = МассивНайденныхСтрокДляЗаполненияТоваров[0].СерияНоменклатуры;
					ИначеЕсли 
						МассивНайденныхСтрокДляЗаполненияТоваров.Количество() > 1 Тогда
						СтрокаТЧТоварыБух.СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли ОбщегоНазначенияБП.ЕстьТабЧастьДокумента("Товары",ДокументБУОбъект.Метаданные()) Тогда
			Если ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("СерияНоменклатуры",ДокументБУОбъект.Метаданные(),"Товары") Тогда 
				Для Каждого СтрокаТЧТоварыБух Из ДокументБУОбъект.Товары Цикл
					СтруктураПоискаДляТоваров = Новый Структура("Номенклатура,НомерСтрокиРеализации",СтрокаТЧТоварыБух.Номенклатура,СтрокаТЧТоварыБух.НомерСтроки);
					МассивНайденныхСтрокДляЗаполненияТоваров = ДокументБУОбъект.СерииНоменклатуры.НайтиСтроки(СтруктураПоискаДляТоваров);
					Если МассивНайденныхСтрокДляЗаполненияТоваров.Количество() = 1 Тогда
						СтрокаТЧТоварыБух.СерияНоменклатуры = МассивНайденныхСтрокДляЗаполненияТоваров[0].СерияНоменклатуры;
					ИначеЕсли 
						МассивНайденныхСтрокДляЗаполненияТоваров.Количество() > 1 Тогда
						СтрокаТЧТоварыБух.СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		ДокументБУОбъект.ДополнительныеСвойства.Вставить("НеДобавлятьЗаписьВРегистрИзмененных",Истина);
		Попытка
			ДокументБУОбъект.ОбменДанными.Загрузка = Истина;
			ДокументБУОбъект.ДополнительныеСвойства.Вставить("ПропуститьБизнесЛогикуПриЗаписи", Истина);
			ДокументБУОбъект.Записать();  
		Исключение
		КонецПопытки;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	//
КонецПроцедуры   


&НаКлиенте
Процедура СоздатьРеализации(Команда)
	
	СерииИспользуются = ПолучитьЗначениеСерийногоУчета();
	Если СерииИспользуются Тогда
		ДопПараметры = Новый Структура ("Команда",Команда);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеОтветаЗаполнениеСерий",ЭтотОбъект,ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения,"Заполнить серии по остаткам при создании документов?",РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		СоздатьРеализацииНаСервере(Команда.Имя,Ложь);
		ЗаполнитьЗначенияСтрок();
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ВыполнитьПослеОтветаЗаполнениеСерий(Результат, ДопПараметры) Экспорт
	    
	Если Результат = КодВозвратаДиалога.Да Тогда
		СоздатьРеализацииНаСервере(ДопПараметры.Команда.Имя,Истина);
		ЗаполнитьЗначенияСтрок();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		СоздатьРеализацииНаСервере(ДопПараметры.Команда.Имя,Ложь);
		ЗаполнитьЗначенияСтрок();
	КонецЕсли; 
	
КонецПроцедуры


&НаКлиенте
Процедура ТабличнаяЧастьЗаказКлиентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить("Заказы клиента");
	СписокВыбора.Добавить("Заказы на возврат клиента");
	СписокВыбора.Добавить("Заказы поставщикам");
	СписокВыбора.Добавить("Заказы на перемещение");
	ТекЗнач = Неопределено;
	
	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ТабличнаяЧастьЗаказКлиентаНачалоВыбораЗавершение", ЭтаФорма), СписокВыбора, Элемент, СписокВыбора.НайтиПоЗначению("Заказы клиента"));
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьЗаказКлиентаНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ТекЗнач = ВыбранныйЭлемент;
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	МассивЗаказовВМЛ = ПолучитьМассивЗаказов();
	ПараметрыФормы = Новый Структура("УжеВыбрано", МассивЗаказовВМЛ);
	ОбработкаВыбора = Новый ОписаниеОповещения("ПриЗакрытииФормыВыбораЗаказа", ЭтаФорма);
	
	Если ТекЗнач.Значение = "Заказы клиента" Тогда
		ПараметрыФормы.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.КОтгрузке")); 
		
		Если ТипЗнч(Элементы.ТабличнаяЧасть.ТекущиеДанные.Статус) = Тип("ПеречислениеСсылка.СтатусыЗаказовПоставщикам") Тогда
			Элементы.ТабличнаяЧасть.ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.ПустаяСсылка");
		КонецЕсли;
		
		ОткрытьФорму("Документ.ЗаказКлиента.ФормаВыбора", ПараметрыФормы, ЭтаФорма, , , , ОбработкаВыбора);  
	ИначеЕсли ТекЗнач.Значение = "Заказы на возврат клиента" Тогда
		ПараметрыФормы.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.КОтгрузке"));
		
		Если ТипЗнч(Элементы.ТабличнаяЧасть.ТекущиеДанные.Статус) = Тип("ПеречислениеСсылка.СтатусыЗаказовПоставщикам") Тогда
			Элементы.ТабличнаяЧасть.ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.ПустаяСсылка");
		КонецЕсли;
		
		ОткрытьФорму("Документ.ЗаказНаВозвратОтКлиента.ФормаВыбора", ПараметрыФормы, ЭтаФорма, , , , ОбработкаВыбора);
	ИначеЕсли ТекЗнач.Значение = "Заказы поставщикам" Тогда
		ПараметрыФормы.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.КПоступлению"));
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		
		Если ТипЗнч(Элементы.ТабличнаяЧасть.ТекущиеДанные.Статус) = Тип("ПеречислениеСсылка.СтатусыЗаказовКлиентов") Тогда
			Элементы.ТабличнаяЧасть.ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.ПустаяСсылка");
		КонецЕсли;
		
		ОткрытьФорму("Документ.ЗаказПоставщику.Форма.ФормаСписка", ПараметрыФормы, ЭтаФорма, , , , ОбработкаВыбора);
	ИначеЕсли ТекЗнач.Значение = "Заказы на перемещение" Тогда	
		ПараметрыФормы.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.КПоступлению"));
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		
		Если ТипЗнч(Элементы.ТабличнаяЧасть.ТекущиеДанные.Статус) = Тип("ПеречислениеСсылка.СтатусыЗаказовКлиентов") Тогда
			Элементы.ТабличнаяЧасть.ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.ПустаяСсылка");
		КонецЕсли;
		
		ОткрытьФорму("Документ.ЗаказНаПеремещение.Форма.ФормаСписка", ПараметрыФормы, ЭтаФорма, , , , ОбработкаВыбора);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТабличнаяЧастьПриОкончанииРедактированияНаСервере(); 
КонецПроцедуры

&НаСервере
Процедура ТабличнаяЧастьПриОкончанииРедактированияНаСервере()
	
	СтатусОтгружен = Перечисления.СтатусыЗаказовКлиентов.Отгружен;
	СтатусЗакрыт = Перечисления.СтатусыЗаказовПоставщикам.Закрыт;
	ЕстьНеотгруженные = Ложь;
	
	Для каждого ТекСтрока Из Объект.ТабличнаяЧасть Цикл
		
		Если ТипЗнч(ТекСтрока.Статус) = Тип("ПеречислениеСсылка.СтатусыЗаказовКлиентов") И НЕ ТекСтрока.Статус = СтатусОтгружен Тогда
			ЕстьНеотгруженные = Истина;
			Прервать;		
		КонецЕсли;	
		
		Если ТипЗнч(ТекСтрока.Статус) = Тип("ПеречислениеСсылка.СтатусыЗаказовПоставщикам") И НЕ ТекСтрока.Статус = СтатусЗакрыт Тогда
			ЕстьНеотгруженные = Истина;
			Прервать;		
		КонецЕсли;	
		
	КонецЦикла;
	
	Объект.Выполнен = Не ЕстьНеотгруженные;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ЕстьНеобновленныеРеализации Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтаФорма), "Есть незаполненные реализации. Обновить?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутДоставкиПриИзменении(Элемент)
	Если Объект.ТабличнаяЧасть.Количество() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("МаршрутДоставкиПриИзмененииЗавершение", ЭтаФорма), "Табличная часть будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МаршрутДоставкиПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ТабличнаяЧасть.Очистить();		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииФормыВыбораЗаказа(Значение, ДополнительныеПараметры) Экспорт
	
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ТабличнаяЧасть.ТекущиеДанные.ЗаказКлиента = Значение;
	Если ЗначениеЗаполнено(Значение) Тогда
		//	РеквизитыЗаказа = БюджетныйНаСервере.ВернутьРеквизиты(Значение, "ВесТовара"); 
		//Элементы.ТабличнаяЧасть.ТекущиеДанные.ВесЗаказа = РеквизитыЗаказа.ВесТовара;
		ЗаполнитьЗначенияСтрок(Значение);
	КонецЕсли;
	
КонецПроцедуры     

&НаСервере
Функция ПолучитьМассивЗаказов()  
	ТЗ = Объект.ТабличнаяЧасть.Выгрузить(,"ЗаказКлиента");
	Возврат ТЗ.ВыгрузитьКолонку("ЗаказКлиента");
КонецФункции	


&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ЗаполнитьЗначенияСтрок();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияСтрок(ТекЗаказ = Неопределено)
	
	Запрос = Новый Запрос;
	#Область ИсходныйЗапрос
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	ЗаказКлиента.Контрагент КАК Контрагент,
	//               |	ЗаказКлиента.ДатаПоступления КАК ДатаПоступления,
	//               |	ЗаказКлиента.ПродажаВРозницу КАК ПродажаВРозницу,
	//               |	ЗаказКлиента.АдресДоставки КАК АдресДоставки,
	//               |	ЗаказКлиента.БезвозмезднаяПередача КАК БезвозмезднаяПередача,
	//               |	ЗаказКлиента.Ссылка КАК ЗаказКлиента
	//               |ИЗ
	//               |	Документ.ЗаказКлиента КАК ЗаказКлиента
	//               |ГДЕ
	//               |	ЗаказКлиента.Ссылка В(&Заказы)
	//               |
	//               |ОБЪЕДИНИТЬ ВСЕ
	//               |
	//               |ВЫБРАТЬ
	//               |	ЗаказНаВозвратОтКлиента.Контрагент,
	//               |	ЗаказНаВозвратОтКлиента.ДатаПоступления,
	//               |	ЗаказНаВозвратОтКлиента.ПродажаВРозницу,
	//               |	ЗаказНаВозвратОтКлиента.АдресДоставки,
	//               |	ЗаказНаВозвратОтКлиента.БезвозмезднаяПередача,
	//               |	ЗаказНаВозвратОтКлиента.Ссылка
	//               |ИЗ
	//               |	Документ.ЗаказНаВозвратОтКлиента КАК ЗаказНаВозвратОтКлиента
	//               |ГДЕ
	//               |	ЗаказНаВозвратОтКлиента.Ссылка В(&Заказы)
	//               |
	//               |ОБЪЕДИНИТЬ ВСЕ
	//               |
	//               |ВЫБРАТЬ
	//               |	ЗаказПоставщику.Контрагент,
	//               |	ЗаказПоставщику.ДатаПоступления,
	//               |	ЗаказПоставщику.ПокупкаВРозницу,
	//               |	ЗаказПоставщику.АдресДоставки,
	//               |	ЗаказПоставщику.БезвозмезднаяПередача,
	//               |	ЗаказПоставщику.Ссылка
	//               |ИЗ
	//               |	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	//               |ГДЕ
	//               |	ЗаказПоставщику.Ссылка В(&Заказы)
	//               |
	//               |ОБЪЕДИНИТЬ ВСЕ
	//               |
	//               |ВЫБРАТЬ
	//               |	ЗаказНаПеремещение.Контрагент,
	//               |	ЗаказНаПеремещение.ДатаПоступления,
	//               |	ЗаказНаПеремещение.ПокупкаВРозницу,
	//               |	ЗаказНаПеремещение.АдресДоставки,
	//               |	ЗаказНаПеремещение.БезвозмезднаяПередача,
	//               |	ЗаказНаПеремещение.Ссылка
	//               |ИЗ
	//               |	Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
	//               |ГДЕ
	//               |	ЗаказНаПеремещение.Ссылка В(&Заказы)";
	
	#КонецОбласти 
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказКлиентаДок.Ссылка КАК ЗаказКлиента,
	|	ЗаказКлиентаДок.ДатаПоступления КАК ДатаПоступления,
	|	ЗаказКлиентаДок.ПродажаВРозницу КАК ПродажаВРозницу,
	|	ЗаказКлиентаДок.АдресДоставки КАК АдресДоставки,
	|	ЗаказКлиентаДок.БезвозмезднаяПередача КАК БезвозмезднаяПередача,
	|	ЗаказКлиентаДок.СуммаДокумента КАК Сумма,
	|	ЗаказКлиентаДок.Статус КАК Статус,
	|	МАКСИМУМ(ЕСТЬNULL(РеализацияТоваровУслуг.Ссылка, ЕСТЬNULL(УЧ_Реализация.Ссылка, ЕСТЬNULL(ПередачаТоваров.Ссылка, ЕСТЬNULL(РозничнаяПродажа.Ссылка, ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)))))) КАК Реализация,
	|	ЗаказКлиентаДок.ВесТовара КАК ВесЗаказа,
	|	ЗаказКлиентаДок.Контрагент КАК Контрагент
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиентаДок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО ЗаказКлиентаДок.Ссылка = РеализацияТоваровУслуг.Заказ
	|			И (НЕ РеализацияТоваровУслуг.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_Реализация КАК УЧ_Реализация
	|		ПО ЗаказКлиентаДок.Ссылка = УЧ_Реализация.ДокОснование
	|			И (НЕ УЧ_Реализация.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа КАК РозничнаяПродажа
	|		ПО ЗаказКлиентаДок.Ссылка = РозничнаяПродажа.Заказ
	|			И (НЕ РозничнаяПродажа.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаТоваров КАК ПередачаТоваров
	|		ПО ЗаказКлиентаДок.Ссылка = ПередачаТоваров.Заказ
	|			И (НЕ ПередачаТоваров.ПометкаУдаления)
	|ГДЕ
	|	ЗаказКлиентаДок.Ссылка В(&Заказы)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиентаДок.Ссылка,
	|	ЗаказКлиентаДок.ДатаПоступления,
	|	ЗаказКлиентаДок.ПродажаВРозницу,
	|	ЗаказКлиентаДок.АдресДоставки,
	|	ЗаказКлиентаДок.БезвозмезднаяПередача,
	|	ЗаказКлиентаДок.СуммаДокумента,
	|	ЗаказКлиентаДок.Статус,
	|	ЗаказКлиентаДок.ВесТовара,
	|	ЗаказКлиентаДок.Контрагент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказНаВозвратОтКлиента.Ссылка,
	|	ЗаказНаВозвратОтКлиента.ДатаПоступления,
	|	ЗаказНаВозвратОтКлиента.ПродажаВРозницу,
	|	ЗаказНаВозвратОтКлиента.АдресДоставки,
	|	ЗаказНаВозвратОтКлиента.БезвозмезднаяПередача,
	|	ЗаказНаВозвратОтКлиента.СуммаДокумента,
	|	ЗаказНаВозвратОтКлиента.Статус,
	|	МАКСИМУМ(ЕСТЬNULL(ВозвратТоваровОтПокупателя.Ссылка, ЕСТЬNULL(УЧ_Возврат.Ссылка, ЕСТЬNULL(РозничнаяПродажа.Ссылка, ЗНАЧЕНИЕ(Документ.ВозвратТоваровОтПокупателя.ПустаяСсылка))))),
	|	ЗаказНаВозвратОтКлиента.ВесТовара,
	|	ЗаказНаВозвратОтКлиента.Контрагент
	|ИЗ
	|	Документ.ЗаказНаВозвратОтКлиента КАК ЗаказНаВозвратОтКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|		ПО ЗаказНаВозвратОтКлиента.Ссылка = ВозвратТоваровОтПокупателя.Заказ
	|			И (НЕ ВозвратТоваровОтПокупателя.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_Возврат КАК УЧ_Возврат
	|		ПО ЗаказНаВозвратОтКлиента.Ссылка = УЧ_Возврат.ДокОснование
	|			И (НЕ УЧ_Возврат.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа КАК РозничнаяПродажа
	|		ПО ЗаказНаВозвратОтКлиента.Ссылка = РозничнаяПродажа.Заказ
	|			И (НЕ РозничнаяПродажа.ПометкаУдаления)
	|ГДЕ
	|	ЗаказНаВозвратОтКлиента.Ссылка В(&Заказы)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказНаВозвратОтКлиента.Ссылка,
	|	ЗаказНаВозвратОтКлиента.ДатаПоступления,
	|	ЗаказНаВозвратОтКлиента.ПродажаВРозницу,
	|	ЗаказНаВозвратОтКлиента.АдресДоставки,
	|	ЗаказНаВозвратОтКлиента.БезвозмезднаяПередача,
	|	ЗаказНаВозвратОтКлиента.СуммаДокумента,
	|	ЗаказНаВозвратОтКлиента.Статус,
	|	ЗаказНаВозвратОтКлиента.ВесТовара,
	|	ЗаказНаВозвратОтКлиента.Контрагент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПоставщику.Ссылка,
	|	ЗаказПоставщику.ДатаПоступления,
	|	ЗаказПоставщику.ПокупкаВРозницу,
	|	ЗаказПоставщику.АдресДоставки,
	|	ЗаказПоставщику.БезвозмезднаяПередача,
	|	ЗаказПоставщику.СуммаДокумента,
	|	ЗаказПоставщику.Статус,
	|	МАКСИМУМ(ЕСТЬNULL(ПоступлениеТоваровУслуг.Ссылка, ЕСТЬNULL(УЧ_ПоступлениеТоваров.Ссылка, ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)))),
	|	ЗаказПоставщику.ВесТовара,
	|	ЗаказПоставщику.Контрагент
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_ПоступлениеТоваров КАК УЧ_ПоступлениеТоваров
	|		ПО ЗаказПоставщику.Ссылка = УЧ_ПоступлениеТоваров.ДокОснование
	|			И (НЕ УЧ_ПоступлениеТоваров.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|		ПО ЗаказПоставщику.Ссылка = ПоступлениеТоваровУслуг.Заказ
	|			И (НЕ ПоступлениеТоваровУслуг.ПометкаУдаления)
	|ГДЕ
	|	ЗаказПоставщику.Ссылка В(&Заказы)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПоставщику.Ссылка,
	|	ЗаказПоставщику.ДатаПоступления,
	|	ЗаказПоставщику.ПокупкаВРозницу,
	|	ЗаказПоставщику.АдресДоставки,
	|	ЗаказПоставщику.БезвозмезднаяПередача,
	|	ЗаказПоставщику.СуммаДокумента,
	|	ЗаказПоставщику.Статус,
	|	ЗаказПоставщику.ВесТовара,
	|	ЗаказПоставщику.Контрагент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказНаПеремещение.Ссылка,
	|	ЗаказНаПеремещение.ДатаПоступления,
	|	ЗаказНаПеремещение.ПокупкаВРозницу,
	|	ЗаказНаПеремещение.АдресДоставки,
	|	ЗаказНаПеремещение.БезвозмезднаяПередача,
	|	ЗаказНаПеремещение.СуммаДокумента,
	|	ЗаказНаПеремещение.Статус,
	|	МАКСИМУМ(ЕСТЬNULL(ПеремещениеТоваров.Ссылка, ЕСТЬNULL(УЧ_ПеремещениеТоваров.Ссылка, ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка)))),
	|	ЗаказНаПеремещение.ВесТовара,
	//|	ЗаказНаПеремещение.Контрагент
	|	ЗаказНаПеремещение.Склад
	|ИЗ
	|	Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_ПеремещениеТоваров КАК УЧ_ПеремещениеТоваров
	|		ПО ЗаказНаПеремещение.Ссылка = УЧ_ПеремещениеТоваров.ДокОснование
	|			И (НЕ УЧ_ПеремещениеТоваров.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|		ПО ЗаказНаПеремещение.Ссылка = ПеремещениеТоваров.Заказ
	|			И (НЕ ПеремещениеТоваров.ПометкаУдаления)
	|ГДЕ
	|	ЗаказНаПеремещение.Ссылка В(&Заказы)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказНаПеремещение.Ссылка,
	|	ЗаказНаПеремещение.ДатаПоступления,
	|	ЗаказНаПеремещение.ПокупкаВРозницу,
	|	ЗаказНаПеремещение.АдресДоставки,
	|	ЗаказНаПеремещение.БезвозмезднаяПередача,
	|	ЗаказНаПеремещение.СуммаДокумента,
	|	ЗаказНаПеремещение.Статус,
	|	ЗаказНаПеремещение.ВесТовара,
	//|	ЗаказНаПеремещение.Контрагент";
	|	ЗаказНаПеремещение.Склад";
	
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТДанныеЗаказов.ЗаказКлиента КАК ЗаказКлиента,
	//|	ВТДанныеЗаказов.Сумма КАК Сумма,
	//|	ВТДанныеЗаказов.Статус КАК Статус,
	//|	ВТДанныеЗаказов.СтатусОплаты КАК СтатусОплаты,
	//|	ВТДанныеЗаказов.Реализация КАК Реализация,
	//|	ВЫБОР
	//|		КОГДА ВТДанныеЗаказов.Реализация ЕСТЬ NULL
	//|			ТОГДА ЛОЖЬ
	//|		ИНАЧЕ ВТДанныеЗаказов.Реализация.ПометкаУдаления
	//|	КОНЕЦ КАК ПометкаУдаления,
	//|	ВТДанныеЗаказов.ВесЗаказа КАК ВесЗаказа,
	//|	ВТДанныеЗаказов.Контрагент КАК Контрагент,
	//|	ВТДанныеЗаказов.ПодразделениеКонтрагента КАК ПодразделениеКонтрагента,
	//|	ВТДанныеЗаказов.ВремяДоставки КАК ВремяДоставки,
	//|	ВТДанныеЗаказов.ВремяДоставкиПо КАК ВремяДоставкиПо
	//|ИЗ
	//|	ВТДанныеЗаказов КАК ВТДанныеЗаказов";
	
	Если ТекЗаказ = Неопределено Тогда	
		Запрос.УстановитьПараметр("Заказы", Объект.ТабличнаяЧасть.Выгрузить().ВыгрузитьКолонку("ЗаказКлиента"));
	Иначе
		МассивЗаказ = Новый Массив;
		МассивЗаказ.Добавить(ТекЗаказ);
		Запрос.УстановитьПараметр("Заказы", МассивЗаказ);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();//Запрос.Выполнить().Выгрузить()
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НайденныеСтроки = Объект.ТабличнаяЧасть.НайтиСтроки(Новый Структура("ЗаказКлиента", Выборка.ЗаказКлиента));
		
		Для каждого ТекНайдСтрока Из НайденныеСтроки Цикл 
			//ЗаполнитьЗначенияСвойств(ТекНайдСтрока, Выборка);  
			ЗаполнитьЗначенияСвойств(ТекНайдСтрока, Выборка,,"Реализация"); 
			Если Не ЗначениеЗаполнено(ТекНайдСтрока.Реализация) Тогда
				ТекНайдСтрока.Реализация = Выборка.Реализация;
			КонецЕсли;
			//Если Не Выборка.ПометкаУдаления Тогда
			//		ТекНайдСтрока.Реализация = Выборка.Реализация;
			//КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;           
	
	Адреса = Объект.ТабличнаяЧасть.Выгрузить(,"АдресДоставки");
	Адреса.Свернуть("АдресДоставки");
	Объект.КоличествоАдресов = Адреса.Количество();	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьПриАктивизацииЯчейки(Элемент)
	
	Если Не Элемент = Неопределено И Не Элемент.ТекущиеДанные = Неопределено Тогда
		
		Если (ТипЗнч(Элемент.ТекущиеДанные.ЗаказКлиента) = Тип("ДокументСсылка.ЗаказКлиента") Или ТипЗнч(Элемент.ТекущиеДанные.ЗаказКлиента) = Тип("ДокументСсылка.ЗаказНаВозвратОтКлиента"))
			И Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Статус) Тогда
			
			Элемент.ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.ПустаяСсылка");
		ИначеЕсли (ТипЗнч(Элемент.ТекущиеДанные.ЗаказКлиента) = Тип("ДокументСсылка.ЗаказПоставщику") Или ТипЗнч(Элемент.ТекущиеДанные.ЗаказКлиента) = Тип("ДокументСсылка.ЗаказНаПеремещение"))
			И Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Статус) Тогда
			
			Элемент.ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.ПустаяСсылка");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьЗаказКлиентаПриИзменении(Элемент)
	
	Если Не Элементы.ТабличнаяЧасть.ТекущиеДанные = Неопределено Тогда
		
		Если ТипЗнч(Элементы.ТабличнаяЧасть.ТекущиеДанные.ЗаказКлиента) = Тип("ДокументСсылка.ЗаказКлиента") Или ТипЗнч(Элементы.ТабличнаяЧасть.ТекущиеДанные.ЗаказКлиента) = Тип("ДокументСсылка.ЗаказНаВозвратОтКлиента") Тогда			
			Элементы.ТабличнаяЧасть.ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.ПустаяСсылка");
		ИначеЕсли ТипЗнч(Элементы.ТабличнаяЧасть.ТекущиеДанные.ЗаказКлиента) = Тип("ДокументСсылка.ЗаказПоставщику") Или ТипЗнч(Элементы.ТабличнаяЧасть.ТекущиеДанные.ЗаказКлиента) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда	
			Элементы.ТабличнаяЧасть.ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.ПустаяСсылка");
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры



&НаСервереБезКонтекста
Функция СтруктураДляЗаполненияСтрокиНаСервере(ЗаказКлиента,ТекстЗапроса)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Заказ",ЗаказКлиента);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда 
		СтруктураДляВозврата = Новый Структура;
		Для каждого КолонкаЗапроса Из РезультатЗапроса.Колонки Цикл
			СтруктураДляВозврата.Вставить(КолонкаЗапроса.Имя);
		КонецЦикла;
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(СтруктураДляВозврата,Выборка);
		Возврат СтруктураДляВозврата;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПроверитьОстаткиНаСервере()
	
	СписокЗаказов = Объект.ТабличнаяЧасть.Выгрузить(,"ЗаказКлиента");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(СписокЗаказов.ЗаказКлиента КАК Документ.ЗаказКлиента) КАК ЗаказКлиента
	               |ПОМЕСТИТЬ ВТЗаказы
	               |ИЗ
	               |	&СписокЗаказов КАК СписокЗаказов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТЗаказы.ЗаказКлиента КАК ЗаказКлиента,
	               |	ЗаказКлиентаТабличнаяЧасть.Ссылка КАК Ссылка,
	               |	ЗаказКлиентаТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	               |	ЗаказКлиентаТабличнаяЧасть.Номенклатура КАК Номенклатура,
	               |	ЗаказКлиентаТабличнаяЧасть.Склад КАК Склад,
	               |	ЗаказКлиентаТабличнаяЧасть.Количество КАК Количество,
	               |	ЗаказКлиентаТабличнаяЧасть.Цена КАК Цена,
	               |	ЗаказКлиентаТабличнаяЧасть.Сумма КАК Сумма,
	               |	ЗаказКлиентаТабличнаяЧасть.Доставка КАК Доставка,
	               |	ЗаказКлиентаТабличнаяЧасть.СуммаДоставки КАК СуммаДоставки,
	               |	ЗаказКлиентаТабличнаяЧасть.ВидДоставки КАК ВидДоставки,
	               |	ЗаказКлиентаТабличнаяЧасть.СуммаБезНДС КАК СуммаБезНДС,
	               |	ЗаказКлиентаТабличнаяЧасть.СтавкаНДС КАК СтавкаНДС,
	               |	ЗаказКлиентаТабличнаяЧасть.СуммаНДС КАК СуммаНДС,
	               |	ЗаказКлиентаТабличнаяЧасть.ВидЦеныПоставщика КАК ВидЦеныПоставщика,
	               |	ЗаказКлиентаТабличнаяЧасть.ДатаПоступления КАК ДатаПоступления,
	               |	ЗаказКлиентаТабличнаяЧасть.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ЗаказКлиентаТабличнаяЧасть.КоличествоУпаковок КАК КоличествоУпаковок,
	               |	ЗаказКлиентаТабличнаяЧасть.ЦенаПодтвержденная КАК ЦенаПодтвержденная,
	               |	ЗаказКлиентаТабличнаяЧасть.КоличествоПодтвержденное КАК КоличествоПодтвержденное,
	               |	ЗаказКлиентаТабличнаяЧасть.СтатусПодтвержденияПозиции КАК СтатусПодтвержденияПозиции,
	               |	ЗаказКлиентаТабличнаяЧасть.КоличествоВЗапайках КАК КоличествоВЗапайках,
	               |	ЗаказКлиентаТабличнаяЧасть.ВнутреннийНомерВБДПоставщика КАК ВнутреннийНомерВБДПоставщика,
	               |	ЗаказКлиентаТабличнаяЧасть.ВнутреннийНомерВБДПокупателя КАК ВнутреннийНомерВБДПокупателя,
	               |	ЗаказКлиентаТабличнаяЧасть.НаименованиеПоставщика КАК НаименованиеПоставщика,
	               |	ЗаказКлиентаТабличнаяЧасть.ШтрихкодПоставщика КАК ШтрихкодПоставщика,
	               |	ЗаказКлиентаТабличнаяЧасть.ГУИДСтроки КАК ГУИДСтроки,
	               |	ЗаказКлиентаТабличнаяЧасть.СчетУчета КАК СчетУчета,
	               |	ЗаказКлиентаТабличнаяЧасть.КоличествоВУпаковке КАК КоличествоВУпаковке,
	               |	ЗаказКлиентаТабличнаяЧасть.Кратность КАК Кратность,
	               |	ЗаказКлиентаТабличнаяЧасть.СерияНоменклатуры КАК СерияНоменклатуры,
	               |	ЗаказКлиентаТабличнаяЧасть.Ссылка.Подразделение КАК Подразделение,
	               |	ЗаказКлиентаТабличнаяЧасть.Ссылка.Предприятие КАК Предприятие,
	               |	ЗаказКлиентаТабличнаяЧасть.Ссылка.Дата КАК Дата
	               |ПОМЕСТИТЬ ТЧЗаказы
	               |ИЗ
	               |	ВТЗаказы КАК ВТЗаказы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.ТабличнаяЧасть КАК ЗаказКлиентаТабличнаяЧасть
	               |		ПО ВТЗаказы.ЗаказКлиента.Ссылка = ЗаказКлиентаТабличнаяЧасть.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	УчетныйОстаткиИОбороты.Субконто1 КАК Номенклатура,
	               |	УчетныйОстаткиИОбороты.Субконто2 КАК Склад,
	               |	УчетныйОстаткиИОбороты.Предприятия КАК Предприятия,
	               |	УчетныйОстаткиИОбороты.Подразделение КАК Подразделение,
	               |	УчетныйОстаткиИОбороты.КоличествоНачальныйОстаток КАК КоличествоНачальныйОстаток,
	               |	УчетныйОстаткиИОбороты.КоличествоКонечныйОстаток КАК КоличествоКонечныйОстаток,
	               |	УчетныйОстаткиИОбороты.Подразделение.Родитель КАК ГруппаПодразделений,
	               |	ВЫРАЗИТЬ(УчетныйОстаткиИОбороты.Субконто1 КАК Справочник.Номенклатура).Код КАК КодНоменклатуры,
	               |	ВЫРАЗИТЬ(УчетныйОстаткиИОбороты.Субконто1 КАК Справочник.Номенклатура).ЕдиницаИзмерения КАК ЕдИзмНоменклатуры,
	               |	0 КАК КоличествоОборотДт,
	               |	0 КАК КоличествоОборотКт,
	               |	0 КАК СуммаОборотКт,
	               |	0 КАК СуммаОборотДт,
	               |	НоменклатураПоставщикаСрезПоследних.Контрагент КАК Контрагент,
	               |	НоменклатураПоставщикаСрезПоследних.Контрагент.Код КАК КодКонтрагента,
	               |	УчетныйОстаткиИОбороты.СуммаНачальныйОстаток КАК СуммаНачальныйОстаток,
	               |	УчетныйОстаткиИОбороты.СуммаКонечныйОстаток КАК СуммаКонечныйОстаток,
	               |	УчетныйОстаткиИОбороты.Субконто3 КАК Серия,
	               |	УчетныйОстаткиИОбороты.Субконто3 КАК МОЛ,
	               |	ТЧЗаказы.ЗаказКлиента КАК ЗаказКлиента,
	               |	ТЧЗаказы.Количество КАК Количество,
	               |	ТЧЗаказы.НомерСтроки КАК НомерСтроки,
	               |	ТЧЗаказы.Дата КАК Дата
	               |ПОМЕСТИТЬ Остатки
	               |ИЗ
	               |	РегистрБухгалтерии.Учетный.ОстаткиИОбороты(
	               |			,
	               |			&ПозицияДокумента,
	               |			,
	               |			,
	               |			Счет.Код = ""41""
	               |				ИЛИ Счет.Код = ""43""
	               |				ИЛИ Счет.Родитель.Код = ""10"",
	               |			,
	               |			Предприятия В (&ДоступныеПредприятия)
	               |				И СценарийПлана = &Сценарий) КАК УчетныйОстаткиИОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураПоставщика.СрезПоследних КАК НоменклатураПоставщикаСрезПоследних
	               |		ПО УчетныйОстаткиИОбороты.Субконто1 = НоменклатураПоставщикаСрезПоследних.Номенклатура
	               |			И УчетныйОстаткиИОбороты.Предприятия = НоменклатураПоставщикаСрезПоследних.Предприятие
	               |			И УчетныйОстаткиИОбороты.Подразделение = НоменклатураПоставщикаСрезПоследних.Подразделение
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЧЗаказы КАК ТЧЗаказы
	               |		ПО УчетныйОстаткиИОбороты.Субконто1 = ТЧЗаказы.Номенклатура
	               |			И УчетныйОстаткиИОбороты.Субконто2 = ТЧЗаказы.Склад
	               |			И УчетныйОстаткиИОбороты.Предприятия = ТЧЗаказы.Предприятие
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Остатки.Номенклатура КАК Номенклатура,
	               |	Остатки.Склад КАК Склад,
	               |	СУММА(Остатки.КоличествоКонечныйОстаток) КАК КонечныйОстаток,
	               |	Остатки.ЗаказКлиента КАК ЗаказКлиента,
	               |	Остатки.Предприятия КАК Предприятия,
	               |	Остатки.Дата КАК Дата,
	               |	Остатки.Количество КАК Количество,
	               |	Остатки.НомерСтроки КАК НомерСтроки
	               |ПОМЕСТИТЬ ВТКонечныйОстаток
	               |ИЗ
	               |	Остатки КАК Остатки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Остатки.ЗаказКлиента,
	               |	Остатки.Склад,
	               |	Остатки.Номенклатура,
	               |	Остатки.Предприятия,
	               |	Остатки.Дата,
	               |	Остатки.Количество,
	               |	Остатки.НомерСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТКонечныйОстаток.Номенклатура КАК Номенклатура,
	               |	ВТКонечныйОстаток.Склад КАК Склад,
	               |	ВТКонечныйОстаток.КонечныйОстаток КАК КонечныйОстаток,
	               |	ВТКонечныйОстаток.ЗаказКлиента КАК ЗаказКлиента,
	               |	ВТКонечныйОстаток.Предприятия КАК Предприятия,
	               |	ВТКонечныйОстаток.Дата КАК Дата,
	               |	СУММА(ВТКонечныйОстаток.Количество) КАК Количество,
	               |	МИНИМУМ(ВТКонечныйОстаток.НомерСтроки) КАК НомерСтроки
	               |ПОМЕСТИТЬ КоличествоВДокументе
	               |ИЗ
	               |	ВТКонечныйОстаток КАК ВТКонечныйОстаток
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТКонечныйОстаток.Номенклатура,
	               |	ВТКонечныйОстаток.Склад,
	               |	ВТКонечныйОстаток.Предприятия,
	               |	ВТКонечныйОстаток.Дата,
	               |	ВТКонечныйОстаток.КонечныйОстаток,
	               |	ВТКонечныйОстаток.ЗаказКлиента
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КоличествоВДокументе.Номенклатура КАК Номенклатура,
	               |	КоличествоВДокументе.ЗаказКлиента КАК ЗаказКлиента,
	               |	КоличествоВДокументе.Склад КАК Склад,
	               |	КоличествоВДокументе.Предприятия КАК Предприятия,
	               |	СУММА(ЕСТЬNULL(УчетныйОбороты.КоличествоОборотКт, 0)) КАК КоличествоРезерв,
	               |	УчетныйОбороты.Регистратор КАК ДокументРезерв
	               |ПОМЕСТИТЬ ВТРезервы
	               |ИЗ
	               |	КоличествоВДокументе КАК КоличествоВДокументе
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Учетный.Обороты(
	               |				&ПозицияДокумента,
	               |				,
	               |				Регистратор,
	               |				Счет.Код = ""41""
	               |					ИЛИ Счет.Родитель.Код = ""10""
	               |					ИЛИ Счет.Код = ""43"",
	               |				,
	               |				,
	               |				,
	               |				) КАК УчетныйОбороты
	               |		ПО КоличествоВДокументе.Номенклатура = УчетныйОбороты.Субконто1
	               |			И КоличествоВДокументе.Склад = УчетныйОбороты.Субконто2
	               |			И КоличествоВДокументе.Предприятия = УчетныйОбороты.Предприятия
	               |			И (УчетныйОбороты.Регистратор <> КоличествоВДокументе.ЗаказКлиента)
	               //|			И (НАЧАЛОПЕРИОДА(УчетныйОбороты.Период, ДЕНЬ) > НАЧАЛОПЕРИОДА(КоличествоВДокументе.Дата, ДЕНЬ))
	               |			И (ВЫБОР
	               |				КОГДА ТИПЗНАЧЕНИЯ(УчетныйОбороты.Регистратор) = ТИП(Документ.УЧ_Реализация)
	               |					ТОГДА НЕ ВЫРАЗИТЬ(УчетныйОбороты.Регистратор КАК Документ.УЧ_Реализация).ДокОснование = КоличествоВДокументе.ЗаказКлиента
	               |				ИНАЧЕ ИСТИНА
	               |			КОНЕЦ)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КоличествоВДокументе.Номенклатура,
	               |	КоличествоВДокументе.ЗаказКлиента,
	               |	КоличествоВДокументе.Склад,
	               |	КоличествоВДокументе.Предприятия,
	               |	УчетныйОбороты.Регистратор
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КоличествоВДокументе.Номенклатура КАК Номенклатура,
	               |	КоличествоВДокументе.ЗаказКлиента КАК ЗаказКлиента,
	               |	КоличествоВДокументе.Склад КАК Склад,
	               |	КоличествоВДокументе.Предприятия КАК Предприятия,
	               |	СУММА(УчетныйОбороты.КоличествоОборотКт) КАК КоличествоРезерв,
	               |	УчетныйОбороты.Регистратор КАК ДокументРезерв
	               |ПОМЕСТИТЬ ВТРезервыПоДокументам
	               |ИЗ
	               |	КоличествоВДокументе КАК КоличествоВДокументе
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Учетный.Обороты(, , Регистратор, Счет.Код = ""0041"", , , , ) КАК УчетныйОбороты
	               |		ПО КоличествоВДокументе.Номенклатура = УчетныйОбороты.Субконто1
	               |			И КоличествоВДокументе.Склад = УчетныйОбороты.Субконто2
	               |			И КоличествоВДокументе.Предприятия = УчетныйОбороты.Предприятия
	               |			И (УчетныйОбороты.Регистратор <> КоличествоВДокументе.ЗаказКлиента)
	               //|			И (УчетныйОбороты.Период > КоличествоВДокументе.Дата)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КоличествоВДокументе.Номенклатура,
	               |	КоличествоВДокументе.ЗаказКлиента,
	               |	КоличествоВДокументе.Склад,
	               |	КоличествоВДокументе.Предприятия,
	               |	УчетныйОбороты.Регистратор
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТРезервы.Номенклатура,
	               |	ВТРезервы.ЗаказКлиента,
	               |	ВТРезервы.Склад,
	               |	ВТРезервы.Предприятия,
	               |	ВТРезервы.КоличествоРезерв,
	               |	ВТРезервы.ДокументРезерв
	               |ИЗ
	               |	ВТРезервы КАК ВТРезервы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.сабОбработкаДокументов КАК сабОбработкаДокументов
	               |		ПО (ВТРезервы.ЗаказКлиента <> ВЫБОР
	               |				КОГДА ТИПЗНАЧЕНИЯ(сабОбработкаДокументов.ДокументБУ) = ТИП(Документ.РеализацияТоваровУслуг)
	               |					ТОГДА ВЫРАЗИТЬ(сабОбработкаДокументов.ДокументБУ КАК Документ.РеализацияТоваровУслуг).Заказ
	               |				КОГДА ТИПЗНАЧЕНИЯ(сабОбработкаДокументов.ДокументБУ) = ТИП(Документ.РозничнаяПродажа)
	               |					ТОГДА ВЫРАЗИТЬ(сабОбработкаДокументов.ДокументБУ КАК Документ.РозничнаяПродажа).Заказ
	               |				КОГДА ТИПЗНАЧЕНИЯ(сабОбработкаДокументов.ДокументБУ) = ТИП(Документ.ПередачаТоваров)
	               |					ТОГДА ВЫРАЗИТЬ(сабОбработкаДокументов.ДокументБУ КАК Документ.ПередачаТоваров).Заказ
				   |				КОГДА ТИПЗНАЧЕНИЯ(сабОбработкаДокументов.ДокументБУ) = ТИП(Документ.ОтчетПроизводстваЗаСмену)
	               |					ТОГДА ВЫРАЗИТЬ(сабОбработкаДокументов.ДокументБУ КАК Документ.ОтчетПроизводстваЗаСмену).Заказ
	               |				ИНАЧЕ НЕОПРЕДЕЛЕНО
	               |			КОНЕЦ)
	               |			И ВТРезервы.ДокументРезерв = сабОбработкаДокументов.ДокументУУ
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА НЕ сабОбработкаДокументов.ДокументУУ ЕСТЬ NULL
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЛОЖЬ
	               |		КОНЕЦ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТРезервы.Номенклатура,
	               |	ВТРезервы.ЗаказКлиента,
	               |	ВТРезервы.Склад,
	               |	ВТРезервы.Предприятия,
	               |	ВТРезервы.КоличествоРезерв,
	               |	ВТРезервы.ДокументРезерв
	               |ИЗ
	               |	ВТРезервы КАК ВТРезервы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.сабОбработкаДокументов КАК сабОбработкаДокументов
	               |		ПО ВТРезервы.ДокументРезерв = сабОбработкаДокументов.ДокументУУ
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА сабОбработкаДокументов.ДокументУУ ЕСТЬ NULL
	               |					И сабОбработкаДокументов.ДокументБУ ЕСТЬ NULL
	               |					И ТИПЗНАЧЕНИЯ(ВТРезервы.ДокументРезерв) <> ТИП(Документ.УЧ_Реализация)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЛОЖЬ
	               |		КОНЕЦ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТРезервыПоДокументам.Номенклатура КАК Номенклатура,
	               |	ВТРезервыПоДокументам.ЗаказКлиента КАК ЗаказКлиента,
	               |	ВТРезервыПоДокументам.Склад КАК Склад,
	               |	ВТРезервыПоДокументам.Предприятия КАК Предприятия,
	               |	СУММА(ВТРезервыПоДокументам.КоличествоРезерв) КАК КоличествоРезерв
	               |ПОМЕСТИТЬ ВТРезервыИтог
	               |ИЗ
	               |	ВТРезервыПоДокументам КАК ВТРезервыПоДокументам
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТРезервыПоДокументам.Склад,
	               |	ВТРезервыПоДокументам.Предприятия,
	               |	ВТРезервыПоДокументам.ЗаказКлиента,
	               |	ВТРезервыПоДокументам.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КоличествоВДокументе.Номенклатура КАК Номенклатура,
	               |	КоличествоВДокументе.Склад КАК Склад,
	               |	КоличествоВДокументе.КонечныйОстаток КАК КонечныйОстаток,
	               |	КоличествоВДокументе.ЗаказКлиента КАК ЗаказКлиента,
	               |	КоличествоВДокументе.Количество КАК Количество,
	               |	ЕСТЬNULL(ВТРезервыИтог.КоличествоРезерв, 0) КАК Резерв
	               |ИЗ
	               |	КоличествоВДокументе КАК КоличествоВДокументе
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТРезервыИтог КАК ВТРезервыИтог
	               |		ПО КоличествоВДокументе.Номенклатура = ВТРезервыИтог.Номенклатура
	               |			И КоличествоВДокументе.Склад = ВТРезервыИтог.Склад
	               |			И КоличествоВДокументе.ЗаказКлиента = ВТРезервыИтог.ЗаказКлиента
	               |			И КоличествоВДокументе.Предприятия = ВТРезервыИтог.Предприятия
				   |ГДЕ
				   |	КоличествоВДокументе.Количество > КоличествоВДокументе.КонечныйОстаток - ЕСТЬNULL(ВТРезервыИтог.КоличествоРезерв, 0)";				   
	
	Запрос.УстановитьПараметр("СписокЗаказов",СписокЗаказов);  //Запрос.Выполнить().Выгрузить()
	Запрос.УстановитьПараметр("ПозицияДокумента",ТекущаяДата());  
	Запрос.УстановитьПараметр("Сценарий",Справочники.СценарииПланирования.НайтиПоНаименованию("Факт"));
	Запрос.УстановитьПараметр("ДоступныеПредприятия",БюджетныйНаСервере.ПолучитьПредприятия());	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		Сообщить("" + Строка(Выборка.ЗаказКлиента) + " количество позиции " + Строка(Выборка.Номенклатура)+ " превышает фактический остаток на складе!"); 
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОстатки(Команда)
	ПроверитьОстаткиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ТабличнаяЧастьПриИзмененииНаСервере()
	
	Адреса = Объект.ТабличнаяЧасть.Выгрузить(,"АдресДоставки");
	Адреса.Свернуть("АдресДоставки");
	Объект.КоличествоАдресов = Адреса.Количество(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьПриИзменении(Элемент)
	ТабличнаяЧастьПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОформитьВСДНаСервере(Реализация = Неопределено,АдресВх)
	
	Если Реализация = Неопределено Тогда
		МассивРеализаций = Объект.ТабличнаяЧасть.Выгрузить(,"Реализация").ВыгрузитьКолонку("Реализация");	
	Иначе
		МассивРеализаций = Новый Массив;
		МассивРеализаций.Добавить(Реализация);
	КонецЕсли;
	
	ТЗДляСообщения = Новый ТаблицаЗначений;
	МассивТиповРеализация = Новый Массив;
	МассивТиповРеализация.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));  
	МассивТиповРеализация.Добавить(Тип("ДокументСсылка.ПеремещениеТоваров")); 
	ОписаниеТиповРеализация = Новый ОписаниеТипов(МассивТиповРеализация);  
	ТЗДляСообщения.Колонки.Добавить("ДокументРеализации",ОписаниеТиповРеализация); 
	ТЗДляСообщения.Колонки.Добавить("СформированныйДокументВетис",Новый ОписаниеТипов("ДокументСсылка.ИсходящаяТранспортнаяОперацияВЕТИС")); 
	ТЗДляСообщения.Колонки.Добавить("СтатусДокументаВетис",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(300)));
	ТЗДляСообщения.Колонки.Добавить("Комментарий",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(500)));

	Для каждого ДокументБух Из МассивРеализаций Цикл
		Если Не ЗначениеЗаполнено(ДокументБух) Или 
			(ТипЗнч(ДокументБух) <> Тип("ДокументСсылка.РеализацияТоваровУслуг") И ТипЗнч(ДокументБух) <> Тип("ДокументСсылка.ПеремещениеТоваров")) Тогда
			 Продолжить;
		КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	ОбъектВетис = Документы.ИсходящаяТранспортнаяОперацияВЕТИС.СоздатьДокумент();
	ОбъектВетис.Заполнить(ДокументБух);
	ОбъектВетис.Дата = ДокументБух.Дата;
	УстановитьПривилегированныйРежим(Истина);
	ЗаполнитьТоварыВЕТИС(ОбъектВетис, ДокументБух);	
		Если ТипЗнч(ДокументБух) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И ЗначениеЗаполнено(ДокументБух.Заказ) И ЗначениеЗаполнено(ДокументБух.Заказ.ПодразделениеКонтрагента) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	сабСоответствиеПредприятийВетис.Предприятие КАК Предприятие
			|ИЗ
			|	РегистрСведений.сабСоответствиеПредприятийВетис КАК сабСоответствиеПредприятийВетис
			|ГДЕ
			|	сабСоответствиеПредприятийВетис.ПодразделениеКонтрагента = &ПодразделениеКонтрагента";
			
			Запрос.УстановитьПараметр("ПодразделениеКонтрагента", ДокументБух.Заказ.ПодразделениеКонтрагента);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				ОбъектВетис.ГрузополучательПредприятие = Выборка.Предприятие;			
			КонецЦикла;
			
			НоваяСтрока = ОбъектВетис.СвязанныеДокументы.Добавить();
			НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовВЕТИС.УПД;
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	СчетФактураВыданный.Ссылка КАК Ссылка,
			|	СчетФактураВыданный.Дата КАК Дата,
			|	СчетФактураВыданный.Номер КАК Номер
			|ИЗ
			|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
			|ГДЕ
			|	СчетФактураВыданный.Проведен = ИСТИНА
			|	И СчетФактураВыданный.ДокументОснование = &ДокументОснование ";
			
			Запрос.УстановитьПараметр("ДокументОснование",ДокументБух);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Если Выборка.Следующий() Тогда
				НоваяСтрока.Дата = Выборка.Дата;
				НоваяСтрока.Номер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Истина);;
			Иначе	
				НоваяСтрока.Дата = ДокументБух.Дата;
				НоваяСтрока.Номер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДокументБух.Номер, Истина, Истина);;
			КонецЕсли;
			
			ТЧРеализация = ДокументБух.Товары.Выгрузить();
			ТЧСерии = ДокументБух.СерииНоменклатуры.Выгрузить();
			
		КонецЕсли;
		
		Запрос = Новый Запрос;   		
		Запрос.Текст = "ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура, 
		|	Товары.ЕдиницаИзмеренияВЕТИС КАК ЕдиницаИзмеренияВЕТИС,
		|	Товары.Продукция КАК Продукция,
		|	Товары.Серия КАК СерияНоменклатуры,
		|	Товары.ДатаПроизводстваНачалоПериода КАК ДатаПроизводства,
		|	Товары.Количество КАК КоличествоПоСерии,
		|	Товары.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТ_ПродукцияОснованияПоСериям
		|ИЗ
		|	&Товары КАК Товары
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиПродукцииВЕТИС.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
		|	ОстаткиПродукцииВЕТИС.Предприятие КАК Предприятие,
		|	ОстаткиПродукцииВЕТИС.Продукция КАК Продукция,
		|	ОстаткиПродукцииВЕТИС.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
		|	ОстаткиПродукцииВЕТИС.КоличествоВЕТИС КАК КоличествоВЕТИС,
		|	ВЫБОР Когда ВТ_ПродукцияОснованияПоСериям.ЕдиницаИзмеренияВЕТИС <> Неопределено И 
		|ВТ_ПродукцияОснованияПоСериям.ЕдиницаИзмеренияВЕТИС <> Значение(Справочник.ЕдиницыИзмеренияВЕТИС.ПустаяСсылка) Тогда
		|ВТ_ПродукцияОснованияПоСериям.ЕдиницаИзмеренияВЕТИС Иначе
		|ОстаткиПродукцииВЕТИС.ЕдиницаИзмеренияВЕТИС Конец КАК ЕдиницаИзмеренияВЕТИС,
		|	ОстаткиПродукцииВЕТИС.ЗаписьСкладскогоЖурнала.ДатаПроизводстваНачалоПериода КАК ДатаПроизводства,
		|	ВТ_ПродукцияОснованияПоСериям.КоличествоПоСерии КАК КоличествоПоСерии,
		|	ВТ_ПродукцияОснованияПоСериям.Номенклатура КАК Номенклатура,
		|	ВТ_ПродукцияОснованияПоСериям.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТ_ПродукцияОснованияПоСериям КАК ВТ_ПродукцияОснованияПоСериям
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОстаткиПродукцииВЕТИС КАК ОстаткиПродукцииВЕТИС
		|		ПО (ВТ_ПродукцияОснованияПоСериям.Продукция = ОстаткиПродукцииВЕТИС.Продукция)
		|			И (ВТ_ПродукцияОснованияПоСериям.ДатаПроизводства = ОстаткиПродукцииВЕТИС.ЗаписьСкладскогоЖурнала.ДатаПроизводстваНачалоПериода)
		|			И (&Предприятие = ОстаткиПродукцииВЕТИС.Предприятие)
		|	И (ВЫБОР Когда ВТ_ПродукцияОснованияПоСериям.ЕдиницаИзмеренияВЕТИС <> Неопределено И 
		|ВТ_ПродукцияОснованияПоСериям.ЕдиницаИзмеренияВЕТИС <> Значение(Справочник.ЕдиницыИзмеренияВЕТИС.ПустаяСсылка) Тогда
		|ВТ_ПродукцияОснованияПоСериям.ЕдиницаИзмеренияВЕТИС = ОстаткиПродукцииВЕТИС.ЕдиницаИзмеренияВЕТИС Иначе Истина Конец) 
		|УПОРЯДОЧИТЬ ПО
		|	ОстаткиПродукцииВЕТИС.ЗаписьСкладскогоЖурнала.ДатаПроизводстваНачалоПериода
		|ИТОГИ ПО
		|	НомерСтроки
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос.УстановитьПараметр("Ссылка", ДокументБух); 
		Запрос.УстановитьПараметр("Товары", ОбъектВетис.Товары.Выгрузить()); 
		Запрос.УстановитьПараметр("Предприятие", ОбъектВетис.ГрузоотправительПредприятие); 
		Результат = Запрос.Выполнить(); 
		ВыбокаНомерСтроки = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Цель = Справочники.ЦелиВЕТИС.НайтиПоНаименованию("реализация в пищу людям", Истина);
		Экспертиза = Перечисления.РезультатыЛабораторныхИсследованийВЕТИС.ИзготовленаИзСырьяПрошедшегоВСЭ; 
		
		Пока ВыбокаНомерСтроки.Следующий() Цикл
			ТекСтрока = ОбъектВетис.Товары[ВыбокаНомерСтроки.НомерСтроки-1];
			Если ЗначениеЗаполнено(ТекСтрока.ЗаписьСкладскогоЖурнала) Тогда
				Продолжить;			
			КонецЕсли;
			ВыборкаДетальныеЗаписи = ВыбокаНомерСтроки.Выбрать();
			ОсталосьСписать = ТекСтрока.Количество;
			КоличествоПоСтроке = ТекСтрока.Количество;
			СтрокаДляДобавленияИзлишка = Неопределено;
			КоличествоСписано = 0;
			ДобавляемСтроку = Ложь;
			Пока ВыборкаДетальныеЗаписи.Следующий() И ОсталосьСписать > 0 Цикл 
				Коэф = 1;
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	Максимум(КоэффициентыЕдиницИзмеренияВЕТИС.КоэффициентЕдиницыВЕТИС) КАК КоэффициентЕдиницыВЕТИС,
				|	КоэффициентыЕдиницИзмеренияВЕТИС.Номенклатура КАК Номенклатура,
				|	КоэффициентыЕдиницИзмеренияВЕТИС.Продукция КАК Продукция,
				|	КоэффициентыЕдиницИзмеренияВЕТИС.ЕдиницаИзмеренияВЕТИС КАК ЕдиницаИзмеренияВЕТИС
				|ИЗ
				|	РегистрСведений.КоэффициентыЕдиницИзмеренияВЕТИС КАК КоэффициентыЕдиницИзмеренияВЕТИС
				|ГДЕ
				|	КоэффициентыЕдиницИзмеренияВЕТИС.Номенклатура = &Номенклатура
				|	И КоэффициентыЕдиницИзмеренияВЕТИС.Продукция = &Продукция
				|	И КоэффициентыЕдиницИзмеренияВЕТИС.ЕдиницаИзмеренияВЕТИС = &ЕдиницаИзмеренияВЕТИС
				|
				|СГРУППИРОВАТЬ ПО
				|	КоэффициентыЕдиницИзмеренияВЕТИС.Номенклатура,
				|	КоэффициентыЕдиницИзмеренияВЕТИС.Продукция,
				|	КоэффициентыЕдиницИзмеренияВЕТИС.ЕдиницаИзмеренияВЕТИС";
				
				Запрос.УстановитьПараметр("Номенклатура", ВыборкаДетальныеЗаписи.Номенклатура);
				Запрос.УстановитьПараметр("Продукция", ВыборкаДетальныеЗаписи.Продукция);
				Запрос.УстановитьПараметр("ЕдиницаИзмеренияВЕТИС", ВыборкаДетальныеЗаписи.ЕдиницаИзмеренияВЕТИС);
				
				Результат = Запрос.Выполнить();
				Выборка1 = Результат.Выбрать();
				
				Пока Выборка1.Следующий() Цикл
					Коэф = Выборка1.КоэффициентЕдиницыВЕТИС;
				КонецЦикла; 
				Если Коэф = 0 Тогда
					Коэф = 1;
				КонецЕсли;
				ОсталосьСписатьВетис = ОсталосьСписать * Коэф;
				
				
				ТекКоличествоВЕТИС = Мин(ВыборкаДетальныеЗаписи.КоличествоВЕТИС, ОсталосьСписатьВетис); 
				
				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Номенклатура) И (ВыборкаДетальныеЗаписи.Номенклатура.ЕдиницаИзмерения.Код = "796" ИЛИ ТекСтрока.Номенклатура.ЕдиницаИзмерения = "шт") Тогда //если шт
					КоличествоДляПроверки = ТекКоличествоВЕТИС / Коэф;
					Если КоличествоДляПроверки < 1 Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Если ДобавляемСтроку Тогда 
					НоваяСтрокаТЧ = ОбъектВетис.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ,ТекСтрока,,"НомерСтроки");
					НоваяСтрокаТЧ.ИдентификаторСтроки = Новый УникальныйИдентификатор;
					ТекСтрока = НоваяСтрокаТЧ;
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ТекСтрока, ВыборкаДетальныеЗаписи.ЗаписьСкладскогоЖурнала);
				НужноКоличество = ОсталосьСписать * Коэф;
				ТекСтрока.КоличествоВЕТИС = ТекКоличествоВЕТИС;
				ТекСтрока.Количество = ТекКоличествоВЕТИС / Коэф;
				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Номенклатура) И (ВыборкаДетальныеЗаписи.Номенклатура.ЕдиницаИзмерения.Код = "796" ИЛИ ТекСтрока.Номенклатура.ЕдиницаИзмерения = "шт") Тогда //если шт
					Если НЕ Цел(ТекСтрока.Количество) = ТекСтрока.Количество Тогда
						ТекСтрока.КоличествоВЕТИС = ТекКоличествоВЕТИС - (ТекСтрока.Количество - Цел(ТекСтрока.Количество)) * Коэф;
						ТекСтрока.Количество = Цел(ТекСтрока.Количество);
					КонецЕсли;
				КонецЕсли;
				Если ТекСтрока.КоличествоВЕТИС <> ТекСтрока.Количество Тогда
					СтрокаДляДобавленияИзлишка = ТекСтрока;
				КонецЕсли;
				Произв = ВыборкаДетальныеЗаписи.ЗаписьСкладскогоЖурнала.Производители.Выгрузить();
				Произв.Колонки.Добавить("НомераПредприятий");
				ТекСтрока.ЗаписьСкладскогоЖурнала = ВыборкаДетальныеЗаписи.ЗаписьСкладскогоЖурнала;
				ТекСтрока.ЭкспертизаРезультат = Экспертиза;
				ТекСтрока.Цель = Цель;
				Если ВыборкаДетальныеЗаписи.ЗаписьСкладскогоЖурнала.УпаковкиВЕТИС.Количество() Тогда
					НоваяСтрокаУп = ОбъектВетис.УпаковкиВЕТИС.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаУп, ВыборкаДетальныеЗаписи.ЗаписьСкладскогоЖурнала.УпаковкиВЕТИС[0]);
					НоваяСтрокаУп.ИдентификаторСтрокиТовары = ТекСтрока.ИдентификаторСтроки;
					МассивСтрок = Новый Массив;
					МассивСтрок.Добавить(НоваяСтрокаУп);
					ТекстНадписи = ИнтеграцияВЕТИСКлиентСервер.СформироватьНадписьПоДаннымТабличнойЧасти(
					МассивСтрок,
					ИнтеграцияВЕТИСКлиентСервер.ПараметрыПредставленияТабличнойЧастиУпаковок(2));
				КонецЕсли;
				ОсталосьСписать = ОсталосьСписать - ТекСтрока.Количество; 
				КоличествоСписано = КоличествоСписано + ТекСтрока.Количество; 
				ДобавляемСтроку = Истина;
			КонецЦикла;
			Если СтрокаДляДобавленияИзлишка <> Неопределено И КоличествоПоСтроке <> КоличествоСписано Тогда
				СтрокаДляДобавленияИзлишка.Количество = СтрокаДляДобавленияИзлишка.Количество + (КоличествоПоСтроке - КоличествоСписано);
			КонецЕсли;
		КонецЦикла;
		ОбъектВетис.Товары.Сортировать("НомерСтроки, ДатаПроизводстваНачалоПериода");

		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	сабМаршрутныйЛистТабличнаяЧасть.Ссылка.ТранспортноеСредство КАК ТранспортноеСредство
		|ИЗ
		|	Документ.сабМаршрутныйЛист.ТабличнаяЧасть КАК сабМаршрутныйЛистТабличнаяЧасть
		|ГДЕ
		|	сабМаршрутныйЛистТабличнаяЧасть.Реализация = &Реализация";
		
		Запрос.УстановитьПараметр("Реализация", ДокументБух);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Номер = Выборка.ТранспортноеСредство.РегистрационныйЗнак;
			Для каждого ТекСтрока Из ОбъектВетис.Маршрут Цикл
				Если Не ЗначениеЗаполнено(ТекСтрока.ТранспортноеСредство) Тогда
					ТекСтрока.НомерТранспортногоСредства = Номер;
					ТекСтрока.ТипТранспорта = Перечисления.ТипыТранспортаВЕТИС.Автомобиль;
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;
		
		ОбъектВетис.СпособХранения = Перечисления.СпособыХраненияПриТранспортировкеВЕТИС.Охлажденный;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	СчетФактураВыданный.Номер КАК Номер,
		               |	СчетФактураВыданный.Дата КАК Дата
		               |ИЗ
		               |	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		               |ГДЕ
		               |	СчетФактураВыданный.ДокументОснование = &Реализация И СчетФактураВыданный.Проведен = Истина"; 
		Запрос.УстановитьПараметр("Реализация", ДокументБух);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать(); 
		
		Если Выборка.Следующий() Тогда
			ОбъектВетис.ТТНУказан = Истина;
			ОбъектВетис.НомерТТН = Выборка.Номер;
			ОбъектВетис.ДатаТТН = Выборка.Дата;
			ОбъектВетис.ТипТТН = Перечисления.ТипыДокументовВЕТИС.ТТН;
		КонецЕсли;
		ОтборыПоОснованию = ИнтеграцияВЕТИСВызовСервера.ОтборыДляРеквизитовДокументаПоОснованию(Тип("ДокументСсылка.ИсходящаяТранспортнаяОперацияВЕТИС"), ДокументБух);
		Если ОтборыПоОснованию <> Неопределено Тогда
			ОбъектВетис.ТорговыйОбъект = ОтборыПоОснованию.ГрузоотправительПредприятие;
		КонецЕсли;  
		Если ОбъектВетис.Товары.Количество() < 1 Тогда
			НоваяСтрокаТЗДляСообщения = ТЗДляСообщения.Добавить();
			НоваяСтрокаТЗДляСообщения.ДокументРеализации = ДокументБух;
            НоваяСтрокаТЗДляСообщения.СтатусДокументаВетис = "Документ Ветис не удалось создать по причине: не заполнена табличная часть ""Товары""";
	        НоваяСтрокаТЗДляСообщения.Комментарий = "При формировании документа ВетИС табличная часть ""Товары"" не заполнилась";
		Иначе
		Если ТипЗнч(ДокументБух) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И ЗначениеЗаполнено(ДокументБух.Заказ) И ЗначениеЗаполнено(ДокументБух.Заказ.ПодразделениеКонтрагента) Тогда
			
			НоваяЗаписьРегистра = РегистрыСведений.сабСоответствиеПредприятийВетис.СоздатьМенеджерЗаписи();
			НоваяЗаписьРегистра.ПодразделениеКонтрагента = ДокументБух.Заказ.ПодразделениеКонтрагента;
			НоваяЗаписьРегистра.Предприятие = ОбъектВетис.ГрузополучательПредприятие;
			НоваяЗаписьРегистра.Записать();
			
		КонецЕсли; 
		Попытка
			ОбъектВетис.Записать(РежимЗаписиДокумента.Запись); 
			ДокументВетис = ОбъектВетис.Ссылка; 
			НоваяСтрокаТЗДляСообщения = ТЗДляСообщения.Добавить();
			НоваяСтрокаТЗДляСообщения.ДокументРеализации = ДокументБух;
			НоваяСтрокаТЗДляСообщения.СформированныйДокументВетис = ДокументВетис;
		Исключение
			НоваяСтрокаТЗДляСообщения = ТЗДляСообщения.Добавить();
			НоваяСтрокаТЗДляСообщения.ДокументРеализации = ДокументБух;
            НоваяСтрокаТЗДляСообщения.СтатусДокументаВетис = "Документ Ветис не удалось создать по причине: " + ОписаниеОшибки();
			Продолжить;
		КонецПопытки;
		Попытка
			ОбъектВетис.Записать(РежимЗаписиДокумента.Проведение); 
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			НоваяСтрокаТЗДляСообщения.Комментарий = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки; 
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЦикла; 
	АдресВх = ПоместитьВоВременноеХранилище(ТЗДляСообщения);
КонецПроцедуры


Процедура ЗаполнитьТоварыВЕТИС(ДокументОбъект, ДанныеЗаполнения)
	
	//Реквизиты основания
	МетаданныеОснования  = ДанныеЗаполнения.Метаданные();
	ИмяОснования         = МетаданныеОснования.Имя;
	
	МетаданныеДокумента  = ДокументОбъект.Ссылка.Метаданные();
	ИмяДокумента         = МетаданныеДокумента.Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("КонечныеСтатусы"  , Документы.ИсходящаяТранспортнаяОперацияВЕТИС.КонечныеСтатусы());
	Запрос.УстановитьПараметр("ЭтаСсылка"        , ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ПустаяСерия"      , "");
	
	БлагополучиеМестности = ЗаполнениеОбъектовПоСтатистикеВЕТИС.БлагополучиеМестностиПоПредприятию(ДокументОбъект.ГрузоотправительПредприятие);
	Запрос.УстановитьПараметр("БлагополучиеМестности", БлагополучиеМестности[0]);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДокументы.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОформленныеДокументы
	|ИЗ
	|	Документ.ИсходящаяТранспортнаяОперацияВЕТИС КАК ТаблицаДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовВЕТИС КАК СтатусыДокументовВЕТИС
	|		ПО (СтатусыДокументовВЕТИС.Документ = ТаблицаДокументы.Ссылка)
	|ГДЕ
	|	ТаблицаДокументы.ДокументОснование = &ДокументОснование
	|	И ТаблицаДокументы.Ссылка <> &ЭтаСсылка
	|	И ТаблицаДокументы.Проведен
	|	И НЕ СтатусыДокументовВЕТИС.Статус В (&КонечныеСтатусы)
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧТовары.Номенклатура КАК Номенклатура,
	|	СУММА(ЕСТЬNULL(ТЧСерии.Количество, ТЧТовары.Количество)) КАК Количество,
	|	ЕСТЬNULL(ТЧСерии.СерияНоменклатуры.ДатаПроизводства, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПроизводстваНачалоПериода
	|ПОМЕСТИТЬ ВТТоварыССериями
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ТЧТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику.СерииНоменклатуры КАК ТЧСерии
	|		ПО ТЧТовары.Номенклатура = ТЧСерии.Номенклатура
	|			И ТЧТовары.НомерСтроки = ТЧСерии.НомерСтрокиРеализации
	|			И ТЧТовары.Ссылка = ТЧСерии.Ссылка
	|ГДЕ
	|	ТЧТовары.Ссылка = &ДокументОснование
	
	|СГРУППИРОВАТЬ ПО
	|	ТЧТовары.Номенклатура,
	|	ЕСТЬNULL(ТЧСерии.СерияНоменклатуры.ДатаПроизводства, ДАТАВРЕМЯ(1, 1, 1))
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТоварыССериями.Номенклатура КАК Номенклатура,
	|	"""" КАК Характеристика,
	|	"""" КАК Серия,
	|	ВТТоварыССериями.ДатаПроизводстваНачалоПериода КАК ДатаПроизводстваНачалоПериода,
	|	ВТТоварыССериями.Количество КАК Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	ВТТоварыССериями КАК ВТТоварыССериями
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ВТТоварыССериями.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ПодконтрольнаяПродукцияВЕТИС
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия,
	|	Товары.ДатаПроизводстваНачалоПериода КАК ДатаПроизводстваНачалоПериода,
	|	Товары.Количество КАК Количество
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	Товары КАК Товары
	
	|ОБЪЕДИНИТЬ ВСЕ
	
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура,
	|	ОформленныеТовары.Характеристика,
	|	ОформленныеТовары.Серия,
	|	ОформленныеТовары.ДатаПроизводстваНачалоПериода,
	|	-ОформленныеТовары.Количество
	|ИЗ
	|	Документ.ИсходящаяТранспортнаяОперацияВЕТИС.Товары КАК ОформленныеТовары
	|ГДЕ
	|	ОформленныеТовары.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ссылка
	|			ИЗ
	|				ОформленныеДокументы КАК Т)
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ЕСТЬNULL(СоответствиеНоменклатурыВЕТИС.Продукция, СоответствиеНоменклатурыВЕТИС2.Продукция)) КАК Продукция,
	|	МАКСИМУМ(ЕСТЬNULL(СоответствиеНоменклатурыВЕТИС.ЗаписьСкладскогоЖурнала, СоответствиеНоменклатурыВЕТИС2.ЗаписьСкладскогоЖурнала)) КАК ЗаписьСкладскогоЖурнала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(СоответствиеНоменклатурыВЕТИС.Продукция, СоответствиеНоменклатурыВЕТИС2.Продукция)) КАК ПродукцияКоличествоРазличные,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(СоответствиеНоменклатурыВЕТИС.ЗаписьСкладскогоЖурнала, СоответствиеНоменклатурыВЕТИС2.ЗаписьСкладскогоЖурнала)) КАК ЗаписьСкладскогоЖурналаКоличествоРазличные,
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика КАК Характеристика,
	|	ТабличнаяЧасть.Серия КАК Серия,
	|	ТабличнаяЧасть.ДатаПроизводстваНачалоПериода КАК ДатаПроизводстваНачалоПериода
	|ПОМЕСТИТЬ СопоставленыеПозиции
	|ИЗ
	|	ТоварыКОформлению КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК СоответствиеНоменклатурыВЕТИС
	|		ПО (СоответствиеНоменклатурыВЕТИС.Номенклатура = ТабличнаяЧасть.Номенклатура)
	|			И (СоответствиеНоменклатурыВЕТИС.Характеристика = ТабличнаяЧасть.Характеристика)
	|			И (СоответствиеНоменклатурыВЕТИС.Серия = ТабличнаяЧасть.Серия)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК СоответствиеНоменклатурыВЕТИС2
	|		ПО (СоответствиеНоменклатурыВЕТИС2.Номенклатура = ТабличнаяЧасть.Номенклатура)
	|			И (СоответствиеНоменклатурыВЕТИС2.Характеристика = ТабличнаяЧасть.Характеристика)
	|			И (СоответствиеНоменклатурыВЕТИС2.Серия = &ПустаяСерия)
	
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика,
	|	ТабличнаяЧасть.Серия,
	|	ТабличнаяЧасть.ДатаПроизводстваНачалоПериода
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика КАК Характеристика,
	|	ТоварыКОформлению.Серия КАК Серия,
	|	ТоварыКОформлению.ДатаПроизводстваНачалоПериода КАК ДатаПроизводстваНачалоПериода,
	|	&БлагополучиеМестности КАК БлагополучиеМестности,
	|	ВЫБОР
	|		КОГДА СопоставленыеПозиции.ПродукцияКоличествоРазличные = 1
	|			ТОГДА СопоставленыеПозиции.Продукция
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Продукция,
	|	ВЫБОР
	|		КОГДА СопоставленыеПозиции.ЗаписьСкладскогоЖурналаКоличествоРазличные = 1
	|			ТОГДА СопоставленыеПозиции.ЗаписьСкладскогоЖурнала
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ЗаписьСкладскогоЖурнала,
	|	СУММА(ТоварыКОформлению.Количество) КАК КоличествоВЕТИС,
	|	СУММА(ТоварыКОформлению.Количество) КАК Количество
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|		ЛЕВОЕ СОЕДИНЕНИЕ СопоставленыеПозиции КАК СопоставленыеПозиции
	|		ПО (СопоставленыеПозиции.Номенклатура = ТоварыКОформлению.Номенклатура)
	|			И (СопоставленыеПозиции.Характеристика = ТоварыКОформлению.Характеристика)
	|			И (СопоставленыеПозиции.Серия = ТоварыКОформлению.Серия)
	|			И (СопоставленыеПозиции.ДатаПроизводстваНачалоПериода = ТоварыКОформлению.ДатаПроизводстваНачалоПериода)
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика,
	|	ТоварыКОформлению.Серия,
	|	ТоварыКОформлению.ДатаПроизводстваНачалоПериода,
	|	ВЫБОР
	|		КОГДА СопоставленыеПозиции.ПродукцияКоличествоРазличные = 1
	|			ТОГДА СопоставленыеПозиции.Продукция
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СопоставленыеПозиции.ЗаписьСкладскогоЖурналаКоличествоРазличные = 1
	|			ТОГДА СопоставленыеПозиции.ЗаписьСкладскогоЖурнала
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ
	
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОформлению.Количество) > 0";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВозвратТоваровПоставщику", ИмяОснования);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИсходящаяТранспортнаяОперацияВЕТИС", ИмяДокумента);
	Запрос.Текст = ТекстЗапроса;
	ВыборкаНоменклатура = Запрос.Выполнить().Выбрать();
	ДокументОбъект.Товары.Очистить();
	ЕстьИдентификаторСтроки = ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("ИдентификаторСтроки", МетаданныеДокумента, "Товары");
	Пока ВыборкаНоменклатура.Следующий() Цикл
		НоваяСтрока = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаНоменклатура);
		Если ЕстьИдентификаторСтроки Тогда
			НоваяСтрока.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
		ИнтеграцияВЕТИС.ПроверитьОчиститьЕдиницуИзмеренияВЕТИС(НоваяСтрока);
		Если ЗначениеЗаполнено(НоваяСтрока.ЕдиницаИзмеренияВЕТИС) Тогда
			НоваяСтрока.КоличествоВЕТИС = ИнтеграцияВЕТИСКлиентСерверПереопределяемый.ПересчитатьКоличествоЕдиницВЕТИС(
			НоваяСтрока.Количество,
			НоваяСтрока.Номенклатура,
			НоваяСтрока.ЕдиницаИзмеренияВЕТИС,
			НЕОПРЕДЕЛЕНО,
			"");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ОформитьВСД(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеОтветаСозданиеВетис",ЭтотОбъект);
	КнопкиДляВопроса = Новый СписокЗначений;
	КнопкиДляВопроса.Добавить("ДляВсехСтрок", "Для всех документов");
	КнопкиДляВопроса.Добавить("ДляВыбраннойСтроки", "Для документа выбранной строки");
	КнопкиДляВопроса.Добавить("Отмена", "Отмена");
	ПоказатьВопрос(ОписаниеОповещения,"Сформировать Ветис",КнопкиДляВопроса);
	
КонецПроцедуры


&НаКлиенте
Процедура ВыполнитьПослеОтветаСозданиеВетис(Результат,ДопПараметры) Экспорт 
	
	АдресВх = "";
	Если Результат = "ДляВсехСтрок" Тогда
		ОформитьВСДНаСервере(,АдресВх);
		ОткрытьФорму("Документ.сабМаршрутныйЛист.Форма.ФормаСозданныеВетис",Новый Структура("АдресВх,МЛ",АдресВх,Объект.Ссылка));
	ИначеЕсли  Результат = "ДляВыбраннойСтроки" Тогда
		ОформитьВСДНаСервере(Элементы.ТабличнаяЧасть.ТекущиеДанные.Реализация,АдресВх);
		ОткрытьФорму("Документ.сабМаршрутныйЛист.Форма.ФормаСозданныеВетис",Новый Структура("АдресВх,МЛ",АдресВх,Объект.Ссылка));
	КонецЕсли;

КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьЗначениеСерийногоУчета()

	Возврат Справочники.СерииНоменклатуры.СерииНоменклатурыИспользуются();

КонецФункции


