&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	БюджетныйНаСервере.ДействияПриСозданииФормыДокумента(ЭтаФорма);
	ФормироватьУПД = Истина;
	СоздаватьСчетНаОплатуПокупателю = Истина;
	ПроводитьДокументы = Истина;
	ЗаполнитьЗначенияСтрок();
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеПриИзменении(Элемент)
	ПредприятиеПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПредприятиеПриИзмененииНаСервере()
	сабОбщегоНазначенияКлиентСервер.СкрытьПодразделения(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Пересчитать", Объект.Ссылка);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	сабОбщегоНазначения.ОтобразитьСостояниеДокумента(ЭтаФорма);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказКлиента.Ссылка КАК ЗаказКлиента,
	               |	ЕСТЬNULL(ПередачаТоваров.Ссылка, ЕСТЬNULL(РеализацияТоваровУслуг.Ссылка, ЕСТЬNULL(РозничнаяПродажа.Ссылка, УЧ_Реализация.Ссылка))) КАК Реализация
	               |ИЗ
	               |	Документ.ЗаказКлиента КАК ЗаказКлиента
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа КАК РозничнаяПродажа
	               |		ПО ЗаказКлиента.Ссылка = РозничнаяПродажа.Заказ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |		ПО ЗаказКлиента.Ссылка = РеализацияТоваровУслуг.Заказ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_Реализация КАК УЧ_Реализация
	               |		ПО ЗаказКлиента.Ссылка = УЧ_Реализация.ДокОснование
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаТоваров КАК ПередачаТоваров
	               |		ПО ЗаказКлиента.Ссылка = ПередачаТоваров.Заказ
	               |ГДЕ
	               |	ЗаказКлиента.Ссылка В(&ЗаказКлиента)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗаказНаВозвратОтКлиента.Ссылка,
	               |	ЕСТЬNULL(ОприходованиеТоваров.Ссылка, ЕСТЬNULL(ВозвратТоваровОтПокупателя.Ссылка, ЕСТЬNULL(РозничнаяПродажа.Ссылка, УЧ_Возврат.Ссылка)))
	               |ИЗ
	               |	Документ.ЗаказНаВозвратОтКлиента КАК ЗаказНаВозвратОтКлиента
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа КАК РозничнаяПродажа
	               |		ПО ЗаказНаВозвратОтКлиента.Ссылка = РозничнаяПродажа.Заказ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	               |		ПО ЗаказНаВозвратОтКлиента.Ссылка = ВозвратТоваровОтПокупателя.Заказ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_Возврат КАК УЧ_Возврат
	               |		ПО ЗаказНаВозвратОтКлиента.Ссылка = УЧ_Возврат.ДокОснование
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОприходованиеТоваров КАК ОприходованиеТоваров
	               |		ПО ЗаказНаВозвратОтКлиента.Ссылка = ОприходованиеТоваров.Заказ
	               |ГДЕ
	               |	ЗаказНаВозвратОтКлиента.Ссылка В(&ЗаказКлиента)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗаказПоставщику.Ссылка,
	               |	УЧ_ПоступлениеТоваров.Ссылка
	               |ИЗ
	               |	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_ПоступлениеТоваров КАК УЧ_ПоступлениеТоваров
	               |		ПО ЗаказПоставщику.Ссылка = УЧ_ПоступлениеТоваров.ДокОснование
	               |ГДЕ
	               |	ЗаказПоставщику.Ссылка В(&ЗаказКлиента)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗаказНаПеремещение.Ссылка,
	               |	УЧ_ПеремещениеТоваров.Ссылка
	               |ИЗ
	               |	Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_ПеремещениеТоваров КАК УЧ_ПеремещениеТоваров
	               |		ПО ЗаказНаПеремещение.Ссылка = УЧ_ПеремещениеТоваров.ДокОснование
	               |ГДЕ
	               |	ЗаказНаПеремещение.Ссылка В(&ЗаказКлиента)";
	
	Запрос.УстановитьПараметр("ЗаказКлиента", Объект.ТабличнаяЧасть.Выгрузить().ВыгрузитьКолонку("ЗаказКлиента"));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НайденныеСтроки = Объект.ТабличнаяЧасть.НайтиСтроки(Новый Структура("ЗаказКлиента", Выборка.ЗаказКлиента));
		
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			
			Если Не ЗначениеЗаполнено(ТекСтрока.Реализация) И ЗначениеЗаполнено(Выборка.Реализация) Тогда
				ТекСтрока.Реализация = Выборка.Реализация;
				ЕстьНеобновленныеРеализации = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	сабОбщегоНазначения.ОтобразитьСостояниеДокумента(ЭтаФорма, ТекущийОбъект);
	
	//СтатусОтгружен = Перечисления.СтатусыЗаказовКлиентов.Отгружен;
	//
	//Для каждого ТекСтрока Из Объект.ТабличнаяЧасть Цикл
	//	Если НЕ ТекСтрока.ЗаказКлиента.Статус = СтатусОтгружен Тогда
	//		ТекЗаказ = ТекСтрока.ЗаказКлиента.ПолучитьОбъект();
	//		ТекЗаказ.Статус = СтатусОтгружен;
	//		Если ТекЗаказ.Проведен Тогда
	//			ТекЗаказ.Записать(РежимЗаписиДокумента.Проведение);
	//		Иначе	
	//			ТекЗаказ.Записать();
	//		КонецЕсли;
	//	КонецЕсли;	
	//КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВидДеятельностиПриИзмененииНаСервере()

	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		РеквизитыПодразделения = БюджетныйНаСервере.ВернутьРеквизиты(Объект.Подразделение, "Организация");
		Объект.Организация = РеквизитыПодразделения.Организация;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДеятельностиПриИзменении(Элемент)
	ВидДеятельностиПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПровереноПоУчету(Команда)
	Элементы.КомандаПроверено.Пометка = НЕ Элементы.КомандаПроверено.Пометка;
	Если Элементы.КомандаПроверено.Пометка Тогда
		БюджетныйНаСервере.УстановитьПроверкуДокумента(Объект.Ссылка, Истина);
	Иначе
		БюджетныйНаСервере.УдалитьПроверкуДокумента(Объект.Ссылка, Истина);
	КонецЕсли;
	ОповеститьОбИзменении(Объект.Ссылка);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	Запрос = Новый Запрос;
	#Область ИсхЗапросДоРекадтирования
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	ЗаказКлиентаДок.Ссылка КАК ЗаказКлиента,
	//               |	ЗаказКлиентаДок.СуммаДокумента КАК Сумма,
	//               |	ЗаказКлиентаДок.Статус КАК Статус,
	//               |	ЗаказКлиентаДок.СтатусОплаты КАК СтатусОплаты,
	//               |	МАКСИМУМ(ЕСТЬNULL(РеализацияТоваровУслуг.Ссылка, ЕСТЬNULL(УЧ_Реализация.Ссылка, ЕСТЬNULL(ПередачаТоваров.Ссылка, РозничнаяПродажа.Ссылка)))) КАК Реализация,
	//               |	ЗаказКлиентаДок.ВесТовара КАК ВесЗаказа,
	//               |	ЗаказКлиентаДок.Контрагент КАК Контрагент,
	//               |	ЗаказКлиентаДок.ПодразделениеКонтрагента КАК ПодразделениеКонтрагента,
	//               |	ЗаказКлиентаДок.ДатаДоставки КАК ВремяДоставки,
	//               |	ЗаказКлиентаДок.ДатаДоставкиДо КАК ВремяДоставкиПо
	//			   |ПОМЕСТИТЬ ВТДанныеЗаказов
	//               |ИЗ
	//               |	Документ.ЗаказКлиента КАК ЗаказКлиентаДок
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//               |		ПО ЗаказКлиентаДок.Ссылка = РеализацияТоваровУслуг.Заказ
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_Реализация КАК УЧ_Реализация
	//               |		ПО ЗаказКлиентаДок.Ссылка = УЧ_Реализация.ДокОснование
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.сабМаршрутныйЛист.ТабличнаяЧасть КАК сабМаршрутныйЛистТабличнаяЧасть
	//               |		ПО ЗаказКлиентаДок.Ссылка = сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента
	//               |			И (НЕ сабМаршрутныйЛистТабличнаяЧасть.Ссылка = &ЭтаСсылка)
	//               |			И (сабМаршрутныйЛистТабличнаяЧасть.Ссылка.ПометкаУдаления = ЛОЖЬ)
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа КАК РозничнаяПродажа
	//               |		ПО ЗаказКлиентаДок.Ссылка = РозничнаяПродажа.Заказ
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаТоваров КАК ПередачаТоваров
	//               |		ПО ЗаказКлиентаДок.Ссылка = ПередачаТоваров.Заказ
	//               |ГДЕ
	//               |	ЗаказКлиентаДок.Статус = &Статус
	//               |	И ЗаказКлиентаДок.Предприятие = &Предприятие
	//               |	И ВЫБОР
	//               |			КОГДА &Доставщик = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	//               |				ТОГДА ИСТИНА
	//               |			ИНАЧЕ ЗаказКлиентаДок.Доставщик = &Доставщик
	//               |		КОНЕЦ
	//               |	И НЕ ЗаказКлиентаДок.СпособДоставки = &СпособДоставки
	//               |	И ЗаказКлиентаДок.ДатаПоступления <= &ДатаДокумента
	//               |	И ЗаказКлиентаДок.Проведен = ИСТИНА
	//               |	И РеализацияТоваровУслуг.Ссылка ЕСТЬ NULL
	//               |	И УЧ_Реализация.Ссылка ЕСТЬ NULL
	//               |	И сабМаршрутныйЛистТабличнаяЧасть.Ссылка ЕСТЬ NULL
	//               |	И ВЫБОР
	//               |			КОГДА &МаршрутДоставки = ЗНАЧЕНИЕ(Справочник.МаршрутыДоставки.ПустаяСсылка)
	//               |				ТОГДА ИСТИНА
	//               |			ИНАЧЕ ЗаказКлиентаДок.МаршрутДоставки = &МаршрутДоставки
	//               |		КОНЕЦ
	//               |	И ВЫБОР
	//               |			КОГДА &ГрафикДоставки = ЗНАЧЕНИЕ(Справочник.ГрафикиДоставки.ПустаяСсылка)
	//               |				ТОГДА ИСТИНА
	//               |			ИНАЧЕ ЗаказКлиентаДок.ГрафикДоставки = &ГрафикДоставки
	//               |		КОНЕЦ
	//               |	И РозничнаяПродажа.Ссылка ЕСТЬ NULL
	//               |	И ПередачаТоваров.Ссылка ЕСТЬ NULL
	//               |
	//               |СГРУППИРОВАТЬ ПО
	//               |	ЗаказКлиентаДок.Ссылка,
	//               |	ЗаказКлиентаДок.СуммаДокумента,
	//               |	ЗаказКлиентаДок.Статус,
	//               |	ЗаказКлиентаДок.СтатусОплаты,
	//               |	ЗаказКлиентаДок.ВесТовара,
	//               |	ЗаказКлиентаДок.ПодразделениеКонтрагента,
	//               |	ЗаказКлиентаДок.Контрагент,
	//               |	ЗаказКлиентаДок.ДатаДоставки,
	//               |	ЗаказКлиентаДок.ДатаДоставкиДо
	//               |
	//               |ОБЪЕДИНИТЬ ВСЕ
	//               |
	//               |ВЫБРАТЬ
	//               |	ЗаказНаВозвратОтКлиента.Ссылка,
	//               |	ЗаказНаВозвратОтКлиента.СуммаДокумента,
	//               |	ЗаказНаВозвратОтКлиента.Статус,
	//               |	ЗаказНаВозвратОтКлиента.СтатусОплаты,
	//               |	МАКСИМУМ(ЕСТЬNULL(ВозвратТоваровОтПокупателя.Ссылка, ЕСТЬNULL(УЧ_Возврат.Ссылка, РозничнаяПродажа.Ссылка))),
	//               |	ЗаказНаВозвратОтКлиента.ВесТовара,
	//               |	ЗаказНаВозвратОтКлиента.Контрагент,
	//               |	ЗаказНаВозвратОтКлиента.ПодразделениеКонтрагента,
	//               |	ЗаказНаВозвратОтКлиента.ДатаДоставки,
	//               |	ЗаказНаВозвратОтКлиента.ДатаДоставкиДо
	//               |ИЗ
	//               |	Документ.ЗаказНаВозвратОтКлиента КАК ЗаказНаВозвратОтКлиента
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	//               |		ПО ЗаказНаВозвратОтКлиента.Ссылка = ВозвратТоваровОтПокупателя.Заказ
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_Возврат КАК УЧ_Возврат
	//               |		ПО ЗаказНаВозвратОтКлиента.Ссылка = УЧ_Возврат.ДокОснование
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.сабМаршрутныйЛист.ТабличнаяЧасть КАК сабМаршрутныйЛистТабличнаяЧасть
	//               |		ПО ЗаказНаВозвратОтКлиента.Ссылка = сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента
	//               |			И (НЕ сабМаршрутныйЛистТабличнаяЧасть.Ссылка = &ЭтаСсылка)
	//               |			И (сабМаршрутныйЛистТабличнаяЧасть.Ссылка.ПометкаУдаления = ЛОЖЬ)
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа КАК РозничнаяПродажа
	//               |		ПО ЗаказНаВозвратОтКлиента.Ссылка = РозничнаяПродажа.Заказ
	//               |ГДЕ
	//               |	ЗаказНаВозвратОтКлиента.Статус = &Статус
	//               |	И ЗаказНаВозвратОтКлиента.Предприятие = &Предприятие
	//               |	И ВЫБОР
	//               |			КОГДА &Доставщик = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	//               |				ТОГДА ИСТИНА
	//               |			ИНАЧЕ ЗаказНаВозвратОтКлиента.Доставщик = &Доставщик
	//               |		КОНЕЦ
	//               |	И НЕ ЗаказНаВозвратОтКлиента.СпособДоставки = &СпособДоставки
	//               |	И НАЧАЛОПЕРИОДА(ЗаказНаВозвратОтКлиента.ДатаПоступления, ДЕНЬ) <= &ДатаДокумента
	//               |	И ЗаказНаВозвратОтКлиента.Проведен = ИСТИНА
	//               |	И ВозвратТоваровОтПокупателя.Ссылка ЕСТЬ NULL
	//               |	И УЧ_Возврат.Ссылка ЕСТЬ NULL
	//               |	И сабМаршрутныйЛистТабличнаяЧасть.Ссылка ЕСТЬ NULL
	//               |	И ВЫБОР
	//               |			КОГДА &МаршрутДоставки = ЗНАЧЕНИЕ(Справочник.МаршрутыДоставки.ПустаяСсылка)
	//               |				ТОГДА ИСТИНА
	//               |			ИНАЧЕ ЗаказНаВозвратОтКлиента.МаршрутДоставки = &МаршрутДоставки
	//               |		КОНЕЦ
	//               |	И ВЫБОР
	//               |			КОГДА &ГрафикДоставки = ЗНАЧЕНИЕ(Справочник.ГрафикиДоставки.ПустаяСсылка)
	//               |				ТОГДА ИСТИНА
	//               |			ИНАЧЕ ЗаказНаВозвратОтКлиента.ГрафикДоставки = &ГрафикДоставки
	//               |		КОНЕЦ
	//               |	И РозничнаяПродажа.Ссылка ЕСТЬ NULL
	//               |
	//               |СГРУППИРОВАТЬ ПО
	//               |	ЗаказНаВозвратОтКлиента.Ссылка,
	//               |	ЗаказНаВозвратОтКлиента.СуммаДокумента,
	//               |	ЗаказНаВозвратОтКлиента.Статус,
	//               |	ЗаказНаВозвратОтКлиента.СтатусОплаты,
	//               |	ЗаказНаВозвратОтКлиента.ВесТовара,
	//               |	ЗаказНаВозвратОтКлиента.ПодразделениеКонтрагента,
	//               |	ЗаказНаВозвратОтКлиента.Контрагент,
	//               |	ЗаказНаВозвратОтКлиента.ДатаДоставки,
	//               |	ЗаказНаВозвратОтКлиента.ДатаДоставкиДо
	//               |
	//               |ОБЪЕДИНИТЬ ВСЕ
	//               |
	//               |ВЫБРАТЬ
	//               |	ЗаказПоставщику.Ссылка,
	//               |	ЗаказПоставщику.СуммаДокумента,
	//               |	ЗаказПоставщику.Статус,
	//               |	NULL,
	//               |	МАКСИМУМ(УЧ_ПоступлениеТоваров.Ссылка),
	//               |	ЗаказПоставщику.ВесТовара,
	//               |	ЗаказПоставщику.Контрагент,
	//               |	ЗаказПоставщику.Подразделение,
	//               |	ЗаказПоставщику.ДатаПоступления,
	//               |	ЗаказПоставщику.ДатаПоступления
	//               |ИЗ
	//               |	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.сабМаршрутныйЛист.ТабличнаяЧасть КАК сабМаршрутныйЛистТабличнаяЧасть
	//               |		ПО ЗаказПоставщику.Ссылка = сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента
	//               |			И (НЕ сабМаршрутныйЛистТабличнаяЧасть.Ссылка = &ЭтаСсылка)
	//               |			И (сабМаршрутныйЛистТабличнаяЧасть.Ссылка.ПометкаУдаления = ЛОЖЬ)
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_ПоступлениеТоваров КАК УЧ_ПоступлениеТоваров
	//               |		ПО ЗаказПоставщику.Ссылка = УЧ_ПоступлениеТоваров.ДокОснование
	//               |ГДЕ
	//               |	ЗаказПоставщику.Статус = &СтатусЗаказаПоставщику
	//               |	И ЗаказПоставщику.Предприятие = &Предприятие
	//               |	И НАЧАЛОПЕРИОДА(ЗаказПоставщику.ДатаПоступления, ДЕНЬ) <= &ДатаДокумента
	//               |	И ЗаказПоставщику.Проведен = ИСТИНА
	//               |	И сабМаршрутныйЛистТабличнаяЧасть.Ссылка ЕСТЬ NULL
	//               |
	//               |СГРУППИРОВАТЬ ПО
	//               |	ЗаказПоставщику.Ссылка,
	//               |	ЗаказПоставщику.СуммаДокумента,
	//               |	ЗаказПоставщику.Статус,
	//               |	ЗаказПоставщику.ВесТовара,
	//               |	ЗаказПоставщику.Контрагент,
	//               |	ЗаказПоставщику.Подразделение,
	//               |	ЗаказПоставщику.ДатаПоступления,
	//               |	ЗаказПоставщику.ДатаПоступления
	//               |
	//               |ОБЪЕДИНИТЬ ВСЕ
	//               |
	//               |ВЫБРАТЬ
	//               |	ЗаказНаПеремещение.Ссылка,
	//               |	ЗаказНаПеремещение.СуммаДокумента,
	//               |	ЗаказНаПеремещение.Статус,
	//               |	NULL,
	//               |	МАКСИМУМ(УЧ_ПеремещениеТоваров.Ссылка),
	//               |	ЗаказНаПеремещение.ВесТовара,
	//               |	ЗаказНаПеремещение.Контрагент,
	//               |	ЗаказНаПеремещение.Подразделение,
	//               |	ЗаказНаПеремещение.ДатаПоступления,
	//               |	ЗаказНаПеремещение.ДатаПоступления
	//               |ИЗ
	//               |	Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.сабМаршрутныйЛист.ТабличнаяЧасть КАК сабМаршрутныйЛистТабличнаяЧасть
	//               |		ПО ЗаказНаПеремещение.Ссылка = сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента
	//               |			И (НЕ сабМаршрутныйЛистТабличнаяЧасть.Ссылка = &ЭтаСсылка)
	//               |			И (сабМаршрутныйЛистТабличнаяЧасть.Ссылка.ПометкаУдаления = ЛОЖЬ)
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_ПеремещениеТоваров КАК УЧ_ПеремещениеТоваров
	//               |		ПО ЗаказНаПеремещение.Ссылка = УЧ_ПеремещениеТоваров.ДокОснование
	//               |ГДЕ
	//               |	ЗаказНаПеремещение.Статус = &СтатусЗаказаПоставщику
	//               |	И ЗаказНаПеремещение.Предприятие = &Предприятие
	//               |	И НАЧАЛОПЕРИОДА(ЗаказНаПеремещение.ДатаПоступления, ДЕНЬ) <= &ДатаДокумента
	//               |	И ЗаказНаПеремещение.Проведен = ИСТИНА
	//               |	И сабМаршрутныйЛистТабличнаяЧасть.Ссылка ЕСТЬ NULL
	//               |
	//               |СГРУППИРОВАТЬ ПО
	//               |	ЗаказНаПеремещение.Ссылка,
	//               |	ЗаказНаПеремещение.СуммаДокумента,
	//               |	ЗаказНаПеремещение.Статус,
	//               |	ЗаказНаПеремещение.ВесТовара,
	//               |	ЗаказНаПеремещение.Контрагент,
	//               |	ЗаказНаПеремещение.Подразделение,
	//               |	ЗаказНаПеремещение.ДатаПоступления,
	//               |	ЗаказНаПеремещение.ДатаПоступления
	//			   |;
	//			   |////////////////////////////////////////////////////////////////////
	//			   |ВЫБРАТЬ
	//               |	ВТДанныеЗаказов.ЗаказКлиента КАК ЗаказКлиента,
	//               |	ВТДанныеЗаказов.Сумма КАК Сумма,
	//               |	ВТДанныеЗаказов.Статус КАК Статус,
	//               |	ВТДанныеЗаказов.СтатусОплаты КАК СтатусОплаты,
	//               |	ВТДанныеЗаказов.Реализация КАК Реализация, 
	//			   |	Выбор Когда ВТДанныеЗаказов.Реализация Есть NULL Тогда Ложь Иначе ВТДанныеЗаказов.Реализация.ПометкаУдаления Конец Как ПометкаУдаления,
	//               |	ВТДанныеЗаказов.ВесЗаказа КАК ВесЗаказа,
	//               |	ВТДанныеЗаказов.Контрагент КАК Контрагент,
	//               |	ВТДанныеЗаказов.ПодразделениеКонтрагента КАК ПодразделениеКонтрагента,
	//               |	ВТДанныеЗаказов.ВремяДоставки КАК ВремяДоставки,
	//               |	ВТДанныеЗаказов.ВремяДоставкиПо КАК ВремяДоставкиПо
	//               |Из ВТДанныеЗаказов Как ВТДанныеЗаказов";
	//
	#КонецОбласти
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказКлиентаДок.Ссылка КАК ЗаказКлиента,
	               |	ЗаказКлиентаДок.СуммаДокумента КАК Сумма,
	               |	ЗаказКлиентаДок.Статус КАК Статус,
	               |	ЗаказКлиентаДок.СтатусОплаты КАК СтатусОплаты,
	               |	МАКСИМУМ(ЕСТЬNULL(РеализацияТоваровУслуг.Ссылка, ЕСТЬNULL(УЧ_Реализация.Ссылка, ЕСТЬNULL(ПередачаТоваров.Ссылка, РозничнаяПродажа.Ссылка)))) КАК Реализация,
	               |	ЗаказКлиентаДок.ВесТовара КАК ВесЗаказа,
	               |	ЗаказКлиентаДок.Контрагент КАК Контрагент,
	               |	ЗаказКлиентаДок.ПодразделениеКонтрагента КАК ПодразделениеКонтрагента,
	               |	ЗаказКлиентаДок.ДатаДоставки КАК ВремяДоставки,
	               |	ЗаказКлиентаДок.ДатаДоставкиДо КАК ВремяДоставкиПо
	               |ПОМЕСТИТЬ ВТДанныеЗаказов
	               |ИЗ
	               |	Документ.ЗаказКлиента КАК ЗаказКлиентаДок
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |		ПО ЗаказКлиентаДок.Ссылка = РеализацияТоваровУслуг.Заказ
	               |			И (НЕ РеализацияТоваровУслуг.ПометкаУдаления)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_Реализация КАК УЧ_Реализация
	               |		ПО ЗаказКлиентаДок.Ссылка = УЧ_Реализация.ДокОснование
	               |			И (НЕ УЧ_Реализация.ПометкаУдаления)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.сабМаршрутныйЛист.ТабличнаяЧасть КАК сабМаршрутныйЛистТабличнаяЧасть
	               |		ПО ЗаказКлиентаДок.Ссылка = сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента
	               |			И (НЕ сабМаршрутныйЛистТабличнаяЧасть.Ссылка = &ЭтаСсылка)
	               |			И (сабМаршрутныйЛистТабличнаяЧасть.Ссылка.ПометкаУдаления = ЛОЖЬ)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа КАК РозничнаяПродажа
	               |		ПО ЗаказКлиентаДок.Ссылка = РозничнаяПродажа.Заказ
	               |			И (НЕ РозничнаяПродажа.ПометкаУдаления)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаТоваров КАК ПередачаТоваров
	               |		ПО ЗаказКлиентаДок.Ссылка = ПередачаТоваров.Заказ
	               |			И (НЕ ПередачаТоваров.ПометкаУдаления)
	               |ГДЕ
	               |	ЗаказКлиентаДок.Статус = &Статус
	               |	И ЗаказКлиентаДок.Предприятие = &Предприятие
	               |	И ВЫБОР
	               |			КОГДА &Доставщик = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЗаказКлиентаДок.Доставщик = &Доставщик
	               |		КОНЕЦ
	               |	И НЕ ЗаказКлиентаДок.СпособДоставки = &СпособДоставки
	               |	И ЗаказКлиентаДок.ДатаПоступления <= &ДатаДокумента
	               |	И ЗаказКлиентаДок.Проведен = ИСТИНА
	               |	И сабМаршрутныйЛистТабличнаяЧасть.Ссылка ЕСТЬ NULL
	               |	И ВЫБОР
	               |			КОГДА &МаршрутДоставки = ЗНАЧЕНИЕ(Справочник.МаршрутыДоставки.ПустаяСсылка)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЗаказКлиентаДок.МаршрутДоставки = &МаршрутДоставки
	               |		КОНЕЦ
	               |	И ВЫБОР
	               |			КОГДА &ГрафикДоставки = ЗНАЧЕНИЕ(Справочник.ГрафикиДоставки.ПустаяСсылка)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЗаказКлиентаДок.ГрафикДоставки = &ГрафикДоставки
	               |		КОНЕЦ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказКлиентаДок.Ссылка,
	               |	ЗаказКлиентаДок.СуммаДокумента,
	               |	ЗаказКлиентаДок.Статус,
	               |	ЗаказКлиентаДок.СтатусОплаты,
	               |	ЗаказКлиентаДок.ВесТовара,
	               |	ЗаказКлиентаДок.ПодразделениеКонтрагента,
	               |	ЗаказКлиентаДок.Контрагент,
	               |	ЗаказКлиентаДок.ДатаДоставки,
	               |	ЗаказКлиентаДок.ДатаДоставкиДо
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗаказНаВозвратОтКлиента.Ссылка,
	               |	ЗаказНаВозвратОтКлиента.СуммаДокумента,
	               |	ЗаказНаВозвратОтКлиента.Статус,
	               |	ЗаказНаВозвратОтКлиента.СтатусОплаты,
	               |	МАКСИМУМ(ЕСТЬNULL(ВозвратТоваровОтПокупателя.Ссылка, ЕСТЬNULL(УЧ_Возврат.Ссылка, РозничнаяПродажа.Ссылка))),
	               |	ЗаказНаВозвратОтКлиента.ВесТовара,
	               |	ЗаказНаВозвратОтКлиента.Контрагент,
	               |	ЗаказНаВозвратОтКлиента.ПодразделениеКонтрагента,
	               |	ЗаказНаВозвратОтКлиента.ДатаДоставки,
	               |	ЗаказНаВозвратОтКлиента.ДатаДоставкиДо
	               |ИЗ
	               |	Документ.ЗаказНаВозвратОтКлиента КАК ЗаказНаВозвратОтКлиента
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	               |		ПО ЗаказНаВозвратОтКлиента.Ссылка = ВозвратТоваровОтПокупателя.Заказ
	               |			И (НЕ ВозвратТоваровОтПокупателя.ПометкаУдаления)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_Возврат КАК УЧ_Возврат
	               |		ПО ЗаказНаВозвратОтКлиента.Ссылка = УЧ_Возврат.ДокОснование
	               |			И (НЕ УЧ_Возврат.ПометкаУдаления)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.сабМаршрутныйЛист.ТабличнаяЧасть КАК сабМаршрутныйЛистТабличнаяЧасть
	               |		ПО ЗаказНаВозвратОтКлиента.Ссылка = сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента
	               |			И (НЕ сабМаршрутныйЛистТабличнаяЧасть.Ссылка = &ЭтаСсылка)
	               |			И (сабМаршрутныйЛистТабличнаяЧасть.Ссылка.ПометкаУдаления = ЛОЖЬ)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа КАК РозничнаяПродажа
	               |		ПО ЗаказНаВозвратОтКлиента.Ссылка = РозничнаяПродажа.Заказ
	               |			И (НЕ РозничнаяПродажа.ПометкаУдаления)
	               |ГДЕ
	               |	ЗаказНаВозвратОтКлиента.Статус = &Статус
	               |	И ЗаказНаВозвратОтКлиента.Предприятие = &Предприятие
	               |	И ВЫБОР
	               |			КОГДА &Доставщик = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЗаказНаВозвратОтКлиента.Доставщик = &Доставщик
	               |		КОНЕЦ
	               |	И НЕ ЗаказНаВозвратОтКлиента.СпособДоставки = &СпособДоставки
	               |	И НАЧАЛОПЕРИОДА(ЗаказНаВозвратОтКлиента.ДатаПоступления, ДЕНЬ) <= &ДатаДокумента
	               |	И ЗаказНаВозвратОтКлиента.Проведен = ИСТИНА
	               |	И сабМаршрутныйЛистТабличнаяЧасть.Ссылка ЕСТЬ NULL
	               |	И ВЫБОР
	               |			КОГДА &МаршрутДоставки = ЗНАЧЕНИЕ(Справочник.МаршрутыДоставки.ПустаяСсылка)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЗаказНаВозвратОтКлиента.МаршрутДоставки = &МаршрутДоставки
	               |		КОНЕЦ
	               |	И ВЫБОР
	               |			КОГДА &ГрафикДоставки = ЗНАЧЕНИЕ(Справочник.ГрафикиДоставки.ПустаяСсылка)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЗаказНаВозвратОтКлиента.ГрафикДоставки = &ГрафикДоставки
	               |		КОНЕЦ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказНаВозвратОтКлиента.Ссылка,
	               |	ЗаказНаВозвратОтКлиента.СуммаДокумента,
	               |	ЗаказНаВозвратОтКлиента.Статус,
	               |	ЗаказНаВозвратОтКлиента.СтатусОплаты,
	               |	ЗаказНаВозвратОтКлиента.ВесТовара,
	               |	ЗаказНаВозвратОтКлиента.ПодразделениеКонтрагента,
	               |	ЗаказНаВозвратОтКлиента.Контрагент,
	               |	ЗаказНаВозвратОтКлиента.ДатаДоставки,
	               |	ЗаказНаВозвратОтКлиента.ДатаДоставкиДо
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗаказПоставщику.Ссылка,
	               |	ЗаказПоставщику.СуммаДокумента,
	               |	ЗаказПоставщику.Статус,
	               |	NULL,
	               |	МАКСИМУМ(ЕСТЬNULL(ПоступлениеТоваровУслуг.Ссылка, УЧ_ПоступлениеТоваров.Ссылка)),
	               |	ЗаказПоставщику.ВесТовара,
	               |	ЗаказПоставщику.Контрагент,
	               |	ЗаказПоставщику.Подразделение,
	               |	ЗаказПоставщику.ДатаПоступления,
	               |	ЗаказПоставщику.ДатаПоступления
	               |ИЗ
	               |	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	               |		ПО ЗаказПоставщику.Ссылка = ПоступлениеТоваровУслуг.Заказ
	               |			И (НЕ ПоступлениеТоваровУслуг.ПометкаУдаления)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.сабМаршрутныйЛист.ТабличнаяЧасть КАК сабМаршрутныйЛистТабличнаяЧасть
	               |		ПО ЗаказПоставщику.Ссылка = сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента
	               |			И (НЕ сабМаршрутныйЛистТабличнаяЧасть.Ссылка = &ЭтаСсылка)
	               |			И (сабМаршрутныйЛистТабличнаяЧасть.Ссылка.ПометкаУдаления = ЛОЖЬ)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_ПоступлениеТоваров КАК УЧ_ПоступлениеТоваров
	               |		ПО ЗаказПоставщику.Ссылка = УЧ_ПоступлениеТоваров.ДокОснование
	               |			И (НЕ УЧ_ПоступлениеТоваров.ПометкаУдаления)
	               |ГДЕ
	               |	ЗаказПоставщику.Статус = &СтатусЗаказаПоставщику
	               |	И ЗаказПоставщику.Предприятие = &Предприятие
	               |	И НАЧАЛОПЕРИОДА(ЗаказПоставщику.ДатаПоступления, ДЕНЬ) <= &ДатаДокумента
	               |	И ЗаказПоставщику.Проведен = ИСТИНА
	               |	И сабМаршрутныйЛистТабличнаяЧасть.Ссылка ЕСТЬ NULL
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказПоставщику.Ссылка,
	               |	ЗаказПоставщику.СуммаДокумента,
	               |	ЗаказПоставщику.Статус,
	               |	ЗаказПоставщику.ВесТовара,
	               |	ЗаказПоставщику.Контрагент,
	               |	ЗаказПоставщику.Подразделение,
	               |	ЗаказПоставщику.ДатаПоступления,
	               |	ЗаказПоставщику.ДатаПоступления
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗаказНаПеремещение.Ссылка,
	               |	ЗаказНаПеремещение.СуммаДокумента,
	               |	ЗаказНаПеремещение.Статус,
	               |	NULL,
	               |	МАКСИМУМ(ЕСТЬNULL(ПеремещениеТоваров.Ссылка, УЧ_ПеремещениеТоваров.Ссылка)),
	               |	ЗаказНаПеремещение.ВесТовара,
	               |	ЗаказНаПеремещение.Контрагент,
	               |	ЗаказНаПеремещение.Подразделение,
	               |	ЗаказНаПеремещение.ДатаПоступления,
	               |	ЗаказНаПеремещение.ДатаПоступления
	               |ИЗ
	               |	Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.сабМаршрутныйЛист.ТабличнаяЧасть КАК сабМаршрутныйЛистТабличнаяЧасть
	               |		ПО ЗаказНаПеремещение.Ссылка = сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента
	               |			И (НЕ сабМаршрутныйЛистТабличнаяЧасть.Ссылка = &ЭтаСсылка)
	               |			И (сабМаршрутныйЛистТабличнаяЧасть.Ссылка.ПометкаУдаления = ЛОЖЬ)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_ПеремещениеТоваров КАК УЧ_ПеремещениеТоваров
	               |		ПО ЗаказНаПеремещение.Ссылка = УЧ_ПеремещениеТоваров.ДокОснование
	               |			И (НЕ УЧ_ПеремещениеТоваров.ПометкаУдаления)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	               |		ПО ЗаказНаПеремещение.Ссылка = ПеремещениеТоваров.Заказ
	               |			И (НЕ ПеремещениеТоваров.ПометкаУдаления)
	               |ГДЕ
	               |	ЗаказНаПеремещение.Статус = &СтатусЗаказаПоставщику
	               |	И ЗаказНаПеремещение.Предприятие = &Предприятие
	               |	И НАЧАЛОПЕРИОДА(ЗаказНаПеремещение.ДатаПоступления, ДЕНЬ) <= &ДатаДокумента
	               |	И ЗаказНаПеремещение.Проведен = ИСТИНА
	               |	И сабМаршрутныйЛистТабличнаяЧасть.Ссылка ЕСТЬ NULL
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказНаПеремещение.Ссылка,
	               |	ЗаказНаПеремещение.СуммаДокумента,
	               |	ЗаказНаПеремещение.Статус,
	               |	ЗаказНаПеремещение.ВесТовара,
	               |	ЗаказНаПеремещение.Контрагент,
	               |	ЗаказНаПеремещение.Подразделение,
	               |	ЗаказНаПеремещение.ДатаПоступления,
	               |	ЗаказНаПеремещение.ДатаПоступления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТДанныеЗаказов.ЗаказКлиента КАК ЗаказКлиента,
	               |	ВТДанныеЗаказов.Сумма КАК Сумма,
	               |	ВТДанныеЗаказов.Статус КАК Статус,
	               |	ВТДанныеЗаказов.СтатусОплаты КАК СтатусОплаты,
	               |	ВТДанныеЗаказов.Реализация КАК Реализация,
	               |	ВЫБОР
	               |		КОГДА ВТДанныеЗаказов.Реализация ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ВТДанныеЗаказов.Реализация.ПометкаУдаления
	               |	КОНЕЦ КАК ПометкаУдаления,
	               |	ВТДанныеЗаказов.ВесЗаказа КАК ВесЗаказа,
	               |	ВТДанныеЗаказов.Контрагент КАК Контрагент,
	               |	ВТДанныеЗаказов.ПодразделениеКонтрагента КАК ПодразделениеКонтрагента,
	               |	ВТДанныеЗаказов.ВремяДоставки КАК ВремяДоставки,
	               |	ВТДанныеЗаказов.ВремяДоставкиПо КАК ВремяДоставкиПо
	               |ИЗ
	               |	ВТДанныеЗаказов КАК ВТДанныеЗаказов";
	
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыЗаказовКлиентов.КОтгрузке);
	Запрос.УстановитьПараметр("СтатусЗаказаПоставщику", Перечисления.СтатусыЗаказовПоставщикам.КПоступлению);
	Запрос.УстановитьПараметр("Предприятие", Объект.Предприятие);
	Запрос.УстановитьПараметр("Доставщик", Объект.Доставщик);
	Запрос.УстановитьПараметр("МаршрутДоставки", Объект.МаршрутДоставки);
	Запрос.УстановитьПараметр("СпособДоставки", Справочники.СпособыДоставки.Самовывоз);
	Запрос.УстановитьПараметр("ГрафикДоставки", Объект.ГрафикДоставки);
	Запрос.УстановитьПараметр("ДатаДокумента", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("ЭтаСсылка", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НайденныеСтроки = Объект.ТабличнаяЧасть.НайтиСтроки(Новый Структура("ЗаказКлиента", Выборка.ЗаказКлиента));
		
		Если НЕ НайденныеСтроки.Количество() Тогда
			НоваяСтрока = Объект.ТабличнаяЧасть.Добавить();	
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка,,"Реализация");
				//Если ЗначениеЗаполнено(Выборка.Реализация) Тогда
				//	Если Не Выборка.Реализация.ПометкаУдаления Тогда
				//		НоваяСтрока.Реализация = Выборка.Реализация;
				//	КонецЕсли;
				//КонецЕсли;   
				Если Не Выборка.ПометкаУдаления Тогда
					НоваяСтрока.Реализация = Выборка.Реализация;
				КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьЗначенияСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	ЗаполнитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьРеализацииНаСервере(ИмяКоманды)
	
	Для каждого ТекСтрока Из Объект.ТабличнаяЧасть Цикл
		
		Если Не ЗначениеЗаполнено(ТекСтрока.Реализация) Тогда
			
			Если ТипЗнч(ТекСтрока.ЗаказКлиента) = Тип("ДокументСсылка.ЗаказНаВозвратОтКлиента") Тогда
				
				Если ЗначениеЗаполнено(ТекСтрока.ЗаказКлиента.Организация) Тогда
					
					Если ТекСтрока.ЗаказКлиента.БезвозмезднаяПередача Тогда
						НоваяРеализация = Документы.ОприходованиеТоваров.СоздатьДокумент();
						НоваяРеализация.Заполнить(ТекСтрока.ЗаказКлиента);
						НоваяРеализация.ДополнительныеСвойства.Вставить("НеИзменятьСтатусЗаказа", Истина);
						НоваяРеализация.Записать(?(ПроводитьДокументы, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));//всегда непроведенным, т.к. нужно закрывать смену вручную
						ТекСтрока.Реализация = НоваяРеализация.Ссылка; 
					ИначеЕсли ТекСтрока.ЗаказКлиента.ПродажаВРозницу Тогда
						НоваяРеализация = Документы.РозничнаяПродажа.СоздатьДокумент();
						НоваяРеализация.Заполнить(ТекСтрока.ЗаказКлиента);
						НоваяРеализация.ДополнительныеСвойства.Вставить("НеИзменятьСтатусЗаказа", Истина);
						НоваяРеализация.Записать(РежимЗаписиДокумента.Запись);//всегда непроведенным, т.к. нужно закрывать смену вручную
						ТекСтрока.Реализация = НоваяРеализация.Ссылка; 
					Иначе
						НоваяРеализация = Документы.ВозвратТоваровОтПокупателя.СоздатьДокумент();
						НоваяРеализация.Заполнить(ТекСтрока.ЗаказКлиента);
						НоваяРеализация.ДополнительныеСвойства.Вставить("НеИзменятьСтатусЗаказа", Истина);
						НоваяРеализация.Записать(?(ПроводитьДокументы, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
						ТекСтрока.Реализация = НоваяРеализация.Ссылка;
						НовыйСчФ = Документы.СчетФактураВыданный.СоздатьДокумент();
						НовыйСчФ.Заполнить(НоваяРеализация.Ссылка);
						НовыйСчФ.Записать(?(ПроводитьДокументы, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
					КонецЕсли; 
					
				Иначе	
					НоваяРеализация = Документы.УЧ_Возврат.СоздатьДокумент();
					НоваяРеализация.Заполнить(ТекСтрока.ЗаказКлиента);
					НоваяРеализация.ДополнительныеСвойства.Вставить("НеИзменятьСтатусЗаказа", Истина);
					НоваяРеализация.Записать(?(ПроводитьДокументы, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
					ТекСтрока.Реализация = НоваяРеализация.Ссылка; 
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(ТекСтрока.ЗаказКлиента) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
				
				Если ЗначениеЗаполнено(ТекСтрока.ЗаказКлиента.Организация) Тогда
					
					Если ТекСтрока.ЗаказКлиента.БезвозмезднаяПередача Тогда
						НоваяРеализация = Документы.ТребованиеНакладная.СоздатьДокумент();
						НоваяРеализация.Заполнить(ТекСтрока.ЗаказКлиента);
						НоваяРеализация.ДополнительныеСвойства.Вставить("НеИзменятьСтатусЗаказа", Истина);
						НоваяРеализация.Записать(?(ПроводитьДокументы, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));//всегда непроведенным, т.к. нужно закрывать смену вручную
						ТекСтрока.Реализация = НоваяРеализация.Ссылка; 
					ИначеЕсли ТекСтрока.ЗаказКлиента.ПродажаВРозницу Тогда
						НоваяРеализация = Документы.РозничнаяПродажа.СоздатьДокумент();
						НоваяРеализация.Заполнить(ТекСтрока.ЗаказКлиента);
						НоваяРеализация.ДополнительныеСвойства.Вставить("НеИзменятьСтатусЗаказа", Истина);
						НоваяРеализация.Записать(РежимЗаписиДокумента.Запись);//всегда непроведенным, т.к. нужно закрывать смену вручную
						ТекСтрока.Реализация = НоваяРеализация.Ссылка; 
					Иначе
						НоваяРеализация = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
						НоваяРеализация.Заполнить(ТекСтрока.ЗаказКлиента);
						НоваяРеализация.ДополнительныеСвойства.Вставить("НеИзменятьСтатусЗаказа", Истина);
						НоваяРеализация.Записать(?(ПроводитьДокументы, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
						ТекСтрока.Реализация = НоваяРеализация.Ссылка;
						
						Если СоздаватьСчетНаОплатуПокупателю Тогда
							НовыйСчет = Документы.СчетНаОплатуПокупателю.СоздатьДокумент();
							НовыйСчет.Заполнить(НоваяРеализация.Ссылка);
							
							Попытка
								НовыйСчет.Записать(?(ПроводитьДокументы, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));				
							Исключение
								НовыйСчет.Записать();				
							КонецПопытки;
							
							НоваяРеализация.СчетНаОплатуПокупателю = НовыйСчет.Ссылка;
							НоваяРеализация.Записать();
						КонецЕсли;
						
						НовыйСчФ = Документы.СчетФактураВыданный.СоздатьДокумент();
						НовыйСчФ.Заполнить(НоваяРеализация.Ссылка);
						НовыйСчФ.Записать(?(ПроводитьДокументы, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
					КонецЕсли;   
					
				Иначе	
					НоваяРеализация = Документы.УЧ_Реализация.СоздатьДокумент();
					НоваяРеализация.Заполнить(ТекСтрока.ЗаказКлиента);
					НоваяРеализация.ДополнительныеСвойства.Вставить("НеИзменятьСтатусЗаказа", Истина);
					НоваяРеализация.Записать(?(ПроводитьДокументы, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
					ТекСтрока.Реализация = НоваяРеализация.Ссылка; 
				КонецЕсли;  
				
				
			ИначеЕсли ТипЗнч(ТекСтрока.ЗаказКлиента) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
				Если ЗначениеЗаполнено(ТекСтрока.ЗаказКлиента.Организация) Тогда
					НоваяРеализация = Документы.ПеремещениеТоваров.СоздатьДокумент();
					НоваяРеализация.Заполнить(ТекСтрока.ЗаказКлиента);
					НоваяРеализация.ДополнительныеСвойства.Вставить("НеИзменятьСтатусЗаказа", Истина);
					НоваяРеализация.Записать(?(ПроводитьДокументы, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));//всегда непроведенным, т.к. нужно закрывать смену вручную
					ТекСтрока.Реализация = НоваяРеализация.Ссылка; 
				Иначе	
					НоваяРеализация = Документы.УЧ_ПеремещениеТоваров.СоздатьДокумент();
					НоваяРеализация.Заполнить(ТекСтрока.ЗаказКлиента);
					НоваяРеализация.ДополнительныеСвойства.Вставить("НеИзменятьСтатусЗаказа", Истина);
					НоваяРеализация.Записать(?(ПроводитьДокументы, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
					ТекСтрока.Реализация = НоваяРеализация.Ссылка; 
				КонецЕсли;    
				
			//ИначеЕсли ТипЗнч(ТекСтрока.ЗаказКлиента) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			//	Если ЗначениеЗаполнено(ТекСтрока.ЗаказКлиента.Организация) Тогда
			//		НоваяРеализация = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
			//		НоваяРеализация.Заполнить(ТекСтрока.ЗаказКлиента);
			//		НоваяРеализация.ДополнительныеСвойства.Вставить("НеИзменятьСтатусЗаказа", Истина);
			//		НоваяРеализация.Записать(?(ПроводитьДокументы, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));//всегда непроведенным, т.к. нужно закрывать смену вручную
			//		ТекСтрока.Реализация = НоваяРеализация.Ссылка; 
			//		
			//		НовыйСчФ = Документы.СчетФактураПолученный.СоздатьДокумент();
			//		НовыйСчФ.Заполнить(НоваяРеализация.Ссылка);
			//		НовыйСчФ.Записать(?(ПроводитьДокументы, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			//	Иначе	
			//		НоваяРеализация = Документы.УЧ_ПоступлениеТоваров.СоздатьДокумент();
			//		НоваяРеализация.Заполнить(ТекСтрока.ЗаказКлиента);
			//		НоваяРеализация.ДополнительныеСвойства.Вставить("НеИзменятьСтатусЗаказа", Истина);
			//		НоваяРеализация.Записать(?(ПроводитьДокументы, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			//		ТекСтрока.Реализация = НоваяРеализация.Ссылка; 
			//	КонецЕсли;  
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;  
	
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРеализации(Команда)
	СоздатьРеализацииНаСервере(Команда.Имя);
	ЗаполнитьЗначенияСтрок();
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьЗаказКлиентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить("Заказы клиента");
	СписокВыбора.Добавить("Заказы на возврат клиента");
	СписокВыбора.Добавить("Заказы поставщикам");
	СписокВыбора.Добавить("Заказы на перемещение");
	ТекЗнач = Неопределено;

	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ТабличнаяЧастьЗаказКлиентаНачалоВыбораЗавершение", ЭтаФорма), СписокВыбора, Элемент, СписокВыбора.НайтиПоЗначению("Заказы клиента"));
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьЗаказКлиентаНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ТекЗнач = ВыбранныйЭлемент;
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;	
	КонецЕсли;

	МассивЗаказовВМЛ = ПолучитьМассивЗаказов();
	ПараметрыФормы = Новый Структура("УжеВыбрано", МассивЗаказовВМЛ);
    ОбработкаВыбора = Новый ОписаниеОповещения("ПриЗакрытииФормыВыбораЗаказа", ЭтаФорма);
	
	Если ТекЗнач.Значение = "Заказы клиента" Тогда
		ПараметрыФормы.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.КОтгрузке")); 
		
		Если ТипЗнч(Элементы.ТабличнаяЧасть.ТекущиеДанные.Статус) = Тип("ПеречислениеСсылка.СтатусыЗаказовПоставщикам") Тогда
			Элементы.ТабличнаяЧасть.ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.ПустаяСсылка");
		КонецЕсли;
		
		ОткрытьФорму("Документ.ЗаказКлиента.ФормаВыбора", ПараметрыФормы, ЭтаФорма, , , , ОбработкаВыбора);  
	ИначеЕсли ТекЗнач.Значение = "Заказы на возврат клиента" Тогда
		ПараметрыФормы.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.КОтгрузке"));
		
		Если ТипЗнч(Элементы.ТабличнаяЧасть.ТекущиеДанные.Статус) = Тип("ПеречислениеСсылка.СтатусыЗаказовПоставщикам") Тогда
			Элементы.ТабличнаяЧасть.ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.ПустаяСсылка");
		КонецЕсли;
		
		ОткрытьФорму("Документ.ЗаказНаВозвратОтКлиента.ФормаВыбора", ПараметрыФормы, ЭтаФорма, , , , ОбработкаВыбора);
	ИначеЕсли ТекЗнач.Значение = "Заказы поставщикам" Тогда
		ПараметрыФормы.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.КПоступлению"));
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		
		Если ТипЗнч(Элементы.ТабличнаяЧасть.ТекущиеДанные.Статус) = Тип("ПеречислениеСсылка.СтатусыЗаказовКлиентов") Тогда
			Элементы.ТабличнаяЧасть.ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.ПустаяСсылка");
		КонецЕсли;
		
		ОткрытьФорму("Документ.ЗаказПоставщику.Форма.ФормаСписка", ПараметрыФормы, ЭтаФорма, , , , ОбработкаВыбора);
	ИначеЕсли ТекЗнач.Значение = "Заказы на перемещение" Тогда	
		ПараметрыФормы.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.КПоступлению"));
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		
		Если ТипЗнч(Элементы.ТабличнаяЧасть.ТекущиеДанные.Статус) = Тип("ПеречислениеСсылка.СтатусыЗаказовКлиентов") Тогда
			Элементы.ТабличнаяЧасть.ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.ПустаяСсылка");
		КонецЕсли;
		
		ОткрытьФорму("Документ.ЗаказНаПеремещение.Форма.ФормаСписка", ПараметрыФормы, ЭтаФорма, , , , ОбработкаВыбора);		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТабличнаяЧастьПриОкончанииРедактированияНаСервере(); 
КонецПроцедуры

&НаСервере
Процедура ТабличнаяЧастьПриОкончанииРедактированияНаСервере()
	
 	СтатусОтгружен = Перечисления.СтатусыЗаказовКлиентов.Отгружен;
	СтатусЗакрыт = Перечисления.СтатусыЗаказовПоставщикам.Закрыт;
	ЕстьНеотгруженные = Ложь;
	
	Для каждого ТекСтрока Из Объект.ТабличнаяЧасть Цикл
		
		Если ТипЗнч(ТекСтрока.Статус) = Тип("ПеречислениеСсылка.СтатусыЗаказовКлиентов") И НЕ ТекСтрока.Статус = СтатусОтгружен Тогда
			ЕстьНеотгруженные = Истина;
			Прервать;		
		КонецЕсли;	
		
		Если ТипЗнч(ТекСтрока.Статус) = Тип("ПеречислениеСсылка.СтатусыЗаказовПоставщикам") И НЕ ТекСтрока.Статус = СтатусЗакрыт Тогда
			ЕстьНеотгруженные = Истина;
			Прервать;		
		КонецЕсли;	
		
	КонецЦикла;
	
	Объект.Выполнен = Не ЕстьНеотгруженные;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ЕстьНеобновленныеРеализации Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтаФорма), "Есть незаполненные реализации. Обновить?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутДоставкиПриИзменении(Элемент)
	Если Объект.ТабличнаяЧасть.Количество() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("МаршрутДоставкиПриИзмененииЗавершение", ЭтаФорма), "Табличная часть будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МаршрутДоставкиПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ТабличнаяЧасть.Очистить();		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииФормыВыбораЗаказа(Значение, ДополнительныеПараметры) Экспорт
	
	Если Значение = Неопределено Тогда
        Возврат;
    КонецЕсли;
     
	Элементы.ТабличнаяЧасть.ТекущиеДанные.ЗаказКлиента = Значение;
	Если ЗначениеЗаполнено(Значение) Тогда
		//	РеквизитыЗаказа = БюджетныйНаСервере.ВернутьРеквизиты(Значение, "ВесТовара"); 
		//Элементы.ТабличнаяЧасть.ТекущиеДанные.ВесЗаказа = РеквизитыЗаказа.ВесТовара;
		ЗаполнитьЗначенияСтрок(Значение);
	КонецЕсли;
	
КонецПроцедуры     

&НаСервере
Функция ПолучитьМассивЗаказов()  
	ТЗ = Объект.ТабличнаяЧасть.Выгрузить(,"ЗаказКлиента");
	Возврат ТЗ.ВыгрузитьКолонку("ЗаказКлиента");
КонецФункции	


&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ЗаполнитьЗначенияСтрок();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияСтрок(ТекЗаказ = Неопределено)
	
	Запрос = Новый Запрос;
#Область ИсходныйЗапрос
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	ЗаказКлиента.Контрагент КАК Контрагент,
	//               |	ЗаказКлиента.ДатаПоступления КАК ДатаПоступления,
	//               |	ЗаказКлиента.ПродажаВРозницу КАК ПродажаВРозницу,
	//               |	ЗаказКлиента.АдресДоставки КАК АдресДоставки,
	//               |	ЗаказКлиента.БезвозмезднаяПередача КАК БезвозмезднаяПередача,
	//               |	ЗаказКлиента.Ссылка КАК ЗаказКлиента
	//               |ИЗ
	//               |	Документ.ЗаказКлиента КАК ЗаказКлиента
	//               |ГДЕ
	//               |	ЗаказКлиента.Ссылка В(&Заказы)
	//               |
	//               |ОБЪЕДИНИТЬ ВСЕ
	//               |
	//               |ВЫБРАТЬ
	//               |	ЗаказНаВозвратОтКлиента.Контрагент,
	//               |	ЗаказНаВозвратОтКлиента.ДатаПоступления,
	//               |	ЗаказНаВозвратОтКлиента.ПродажаВРозницу,
	//               |	ЗаказНаВозвратОтКлиента.АдресДоставки,
	//               |	ЗаказНаВозвратОтКлиента.БезвозмезднаяПередача,
	//               |	ЗаказНаВозвратОтКлиента.Ссылка
	//               |ИЗ
	//               |	Документ.ЗаказНаВозвратОтКлиента КАК ЗаказНаВозвратОтКлиента
	//               |ГДЕ
	//               |	ЗаказНаВозвратОтКлиента.Ссылка В(&Заказы)
	//               |
	//               |ОБЪЕДИНИТЬ ВСЕ
	//               |
	//               |ВЫБРАТЬ
	//               |	ЗаказПоставщику.Контрагент,
	//               |	ЗаказПоставщику.ДатаПоступления,
	//               |	ЗаказПоставщику.ПокупкаВРозницу,
	//               |	ЗаказПоставщику.АдресДоставки,
	//               |	ЗаказПоставщику.БезвозмезднаяПередача,
	//               |	ЗаказПоставщику.Ссылка
	//               |ИЗ
	//               |	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	//               |ГДЕ
	//               |	ЗаказПоставщику.Ссылка В(&Заказы)
	//               |
	//               |ОБЪЕДИНИТЬ ВСЕ
	//               |
	//               |ВЫБРАТЬ
	//               |	ЗаказНаПеремещение.Контрагент,
	//               |	ЗаказНаПеремещение.ДатаПоступления,
	//               |	ЗаказНаПеремещение.ПокупкаВРозницу,
	//               |	ЗаказНаПеремещение.АдресДоставки,
	//               |	ЗаказНаПеремещение.БезвозмезднаяПередача,
	//               |	ЗаказНаПеремещение.Ссылка
	//               |ИЗ
	//               |	Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
	//               |ГДЕ
	//               |	ЗаказНаПеремещение.Ссылка В(&Заказы)";
	
	#КонецОбласти 
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказКлиентаДок.Ссылка КАК ЗаказКлиента,
	               |	ЗаказКлиентаДок.ДатаПоступления КАК ДатаПоступления,
	               |	ЗаказКлиентаДок.ПродажаВРозницу КАК ПродажаВРозницу,
	               |	ЗаказКлиентаДок.АдресДоставки КАК АдресДоставки,
	               |	ЗаказКлиентаДок.БезвозмезднаяПередача КАК БезвозмезднаяПередача,
	               |	ЗаказКлиентаДок.СуммаДокумента КАК Сумма,
	               |	ЗаказКлиентаДок.Статус КАК Статус,
	               |	МАКСИМУМ(ЕСТЬNULL(РеализацияТоваровУслуг.Ссылка, ЕСТЬNULL(УЧ_Реализация.Ссылка, ЕСТЬNULL(ПередачаТоваров.Ссылка, ЕСТЬNULL(РозничнаяПродажа.Ссылка, ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)))))) КАК Реализация,
	               |	ЗаказКлиентаДок.ВесТовара КАК ВесЗаказа,
	               |	ЗаказКлиентаДок.Контрагент КАК Контрагент
	               |ИЗ
	               |	Документ.ЗаказКлиента КАК ЗаказКлиентаДок
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |		ПО ЗаказКлиентаДок.Ссылка = РеализацияТоваровУслуг.Заказ
	               |			И (НЕ РеализацияТоваровУслуг.ПометкаУдаления)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_Реализация КАК УЧ_Реализация
	               |		ПО ЗаказКлиентаДок.Ссылка = УЧ_Реализация.ДокОснование
	               |			И (НЕ УЧ_Реализация.ПометкаУдаления)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа КАК РозничнаяПродажа
	               |		ПО ЗаказКлиентаДок.Ссылка = РозничнаяПродажа.Заказ
	               |			И (НЕ РозничнаяПродажа.ПометкаУдаления)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаТоваров КАК ПередачаТоваров
	               |		ПО ЗаказКлиентаДок.Ссылка = ПередачаТоваров.Заказ
	               |			И (НЕ ПередачаТоваров.ПометкаУдаления)
	               |ГДЕ
	               |	ЗаказКлиентаДок.Ссылка В(&Заказы)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказКлиентаДок.Ссылка,
	               |	ЗаказКлиентаДок.ДатаПоступления,
	               |	ЗаказКлиентаДок.ПродажаВРозницу,
	               |	ЗаказКлиентаДок.АдресДоставки,
	               |	ЗаказКлиентаДок.БезвозмезднаяПередача,
	               |	ЗаказКлиентаДок.СуммаДокумента,
	               |	ЗаказКлиентаДок.Статус,
	               |	ЗаказКлиентаДок.ВесТовара,
	               |	ЗаказКлиентаДок.Контрагент
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗаказНаВозвратОтКлиента.Ссылка,
	               |	ЗаказНаВозвратОтКлиента.ДатаПоступления,
	               |	ЗаказНаВозвратОтКлиента.ПродажаВРозницу,
	               |	ЗаказНаВозвратОтКлиента.АдресДоставки,
	               |	ЗаказНаВозвратОтКлиента.БезвозмезднаяПередача,
	               |	ЗаказНаВозвратОтКлиента.СуммаДокумента,
	               |	ЗаказНаВозвратОтКлиента.Статус,
	               |	МАКСИМУМ(ЕСТЬNULL(ВозвратТоваровОтПокупателя.Ссылка, ЕСТЬNULL(УЧ_Возврат.Ссылка, ЕСТЬNULL(РозничнаяПродажа.Ссылка, ЗНАЧЕНИЕ(Документ.ВозвратТоваровОтПокупателя.ПустаяСсылка))))),
	               |	ЗаказНаВозвратОтКлиента.ВесТовара,
	               |	ЗаказНаВозвратОтКлиента.Контрагент
	               |ИЗ
	               |	Документ.ЗаказНаВозвратОтКлиента КАК ЗаказНаВозвратОтКлиента
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	               |		ПО ЗаказНаВозвратОтКлиента.Ссылка = ВозвратТоваровОтПокупателя.Заказ
	               |			И (НЕ ВозвратТоваровОтПокупателя.ПометкаУдаления)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_Возврат КАК УЧ_Возврат
	               |		ПО ЗаказНаВозвратОтКлиента.Ссылка = УЧ_Возврат.ДокОснование
	               |			И (НЕ УЧ_Возврат.ПометкаУдаления)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа КАК РозничнаяПродажа
	               |		ПО ЗаказНаВозвратОтКлиента.Ссылка = РозничнаяПродажа.Заказ
	               |			И (НЕ РозничнаяПродажа.ПометкаУдаления)
	               |ГДЕ
	               |	ЗаказНаВозвратОтКлиента.Ссылка В(&Заказы)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказНаВозвратОтКлиента.Ссылка,
	               |	ЗаказНаВозвратОтКлиента.ДатаПоступления,
	               |	ЗаказНаВозвратОтКлиента.ПродажаВРозницу,
	               |	ЗаказНаВозвратОтКлиента.АдресДоставки,
	               |	ЗаказНаВозвратОтКлиента.БезвозмезднаяПередача,
	               |	ЗаказНаВозвратОтКлиента.СуммаДокумента,
	               |	ЗаказНаВозвратОтКлиента.Статус,
	               |	ЗаказНаВозвратОтКлиента.ВесТовара,
	               |	ЗаказНаВозвратОтКлиента.Контрагент
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗаказПоставщику.Ссылка,
	               |	ЗаказПоставщику.ДатаПоступления,
	               |	ЗаказПоставщику.ПокупкаВРозницу,
	               |	ЗаказПоставщику.АдресДоставки,
	               |	ЗаказПоставщику.БезвозмезднаяПередача,
	               |	ЗаказПоставщику.СуммаДокумента,
	               |	ЗаказПоставщику.Статус,
	               |	МАКСИМУМ(ЕСТЬNULL(ПоступлениеТоваровУслуг.Ссылка, ЕСТЬNULL(УЧ_ПоступлениеТоваров.Ссылка, ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)))),
	               |	ЗаказПоставщику.ВесТовара,
	               |	ЗаказПоставщику.Контрагент
	               |ИЗ
	               |	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_ПоступлениеТоваров КАК УЧ_ПоступлениеТоваров
	               |		ПО ЗаказПоставщику.Ссылка = УЧ_ПоступлениеТоваров.ДокОснование
	               |			И (НЕ УЧ_ПоступлениеТоваров.ПометкаУдаления)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	               |		ПО ЗаказПоставщику.Ссылка = ПоступлениеТоваровУслуг.Заказ
	               |			И (НЕ ПоступлениеТоваровУслуг.ПометкаУдаления)
	               |ГДЕ
	               |	ЗаказПоставщику.Ссылка В(&Заказы)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказПоставщику.Ссылка,
	               |	ЗаказПоставщику.ДатаПоступления,
	               |	ЗаказПоставщику.ПокупкаВРозницу,
	               |	ЗаказПоставщику.АдресДоставки,
	               |	ЗаказПоставщику.БезвозмезднаяПередача,
	               |	ЗаказПоставщику.СуммаДокумента,
	               |	ЗаказПоставщику.Статус,
	               |	ЗаказПоставщику.ВесТовара,
	               |	ЗаказПоставщику.Контрагент
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗаказНаПеремещение.Ссылка,
	               |	ЗаказНаПеремещение.ДатаПоступления,
	               |	ЗаказНаПеремещение.ПокупкаВРозницу,
	               |	ЗаказНаПеремещение.АдресДоставки,
	               |	ЗаказНаПеремещение.БезвозмезднаяПередача,
	               |	ЗаказНаПеремещение.СуммаДокумента,
	               |	ЗаказНаПеремещение.Статус,
	               |	МАКСИМУМ(ЕСТЬNULL(ПеремещениеТоваров.Ссылка, ЕСТЬNULL(УЧ_ПеремещениеТоваров.Ссылка, ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка)))),
	               |	ЗаказНаПеремещение.ВесТовара,
	               |	ЗаказНаПеремещение.Контрагент
	               |ИЗ
	               |	Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_ПеремещениеТоваров КАК УЧ_ПеремещениеТоваров
	               |		ПО ЗаказНаПеремещение.Ссылка = УЧ_ПеремещениеТоваров.ДокОснование
	               |			И (НЕ УЧ_ПеремещениеТоваров.ПометкаУдаления)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	               |		ПО ЗаказНаПеремещение.Ссылка = ПеремещениеТоваров.Заказ
	               |			И (НЕ ПеремещениеТоваров.ПометкаУдаления)
	               |ГДЕ
	               |	ЗаказНаПеремещение.Ссылка В(&Заказы)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказНаПеремещение.Ссылка,
	               |	ЗаказНаПеремещение.ДатаПоступления,
	               |	ЗаказНаПеремещение.ПокупкаВРозницу,
	               |	ЗаказНаПеремещение.АдресДоставки,
	               |	ЗаказНаПеремещение.БезвозмезднаяПередача,
	               |	ЗаказНаПеремещение.СуммаДокумента,
	               |	ЗаказНаПеремещение.Статус,
	               |	ЗаказНаПеремещение.ВесТовара,
	               |	ЗаказНаПеремещение.Контрагент";
				   //|;
				   //|
				   //|////////////////////////////////////////////////////////////////////////////////
				   //|ВЫБРАТЬ
				   //|	ВТДанныеЗаказов.ЗаказКлиента КАК ЗаказКлиента,
				   //|	ВТДанныеЗаказов.Сумма КАК Сумма,
				   //|	ВТДанныеЗаказов.Статус КАК Статус,
				   //|	ВТДанныеЗаказов.СтатусОплаты КАК СтатусОплаты,
				   //|	ВТДанныеЗаказов.Реализация КАК Реализация,
				   //|	ВЫБОР
				   //|		КОГДА ВТДанныеЗаказов.Реализация ЕСТЬ NULL
				   //|			ТОГДА ЛОЖЬ
				   //|		ИНАЧЕ ВТДанныеЗаказов.Реализация.ПометкаУдаления
				   //|	КОНЕЦ КАК ПометкаУдаления,
				   //|	ВТДанныеЗаказов.ВесЗаказа КАК ВесЗаказа,
				   //|	ВТДанныеЗаказов.Контрагент КАК Контрагент,
				   //|	ВТДанныеЗаказов.ПодразделениеКонтрагента КАК ПодразделениеКонтрагента,
				   //|	ВТДанныеЗаказов.ВремяДоставки КАК ВремяДоставки,
				   //|	ВТДанныеЗаказов.ВремяДоставкиПо КАК ВремяДоставкиПо
				   //|ИЗ
				   //|	ВТДанныеЗаказов КАК ВТДанныеЗаказов";

	Если ТекЗаказ = Неопределено Тогда	
		Запрос.УстановитьПараметр("Заказы", Объект.ТабличнаяЧасть.Выгрузить().ВыгрузитьКолонку("ЗаказКлиента"));
	Иначе
		МассивЗаказ = Новый Массив;
		МассивЗаказ.Добавить(ТекЗаказ);
		Запрос.УстановитьПараметр("Заказы", МассивЗаказ);
    КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НайденныеСтроки = Объект.ТабличнаяЧасть.НайтиСтроки(Новый Структура("ЗаказКлиента", Выборка.ЗаказКлиента));
		
		Для каждого ТекНайдСтрока Из НайденныеСтроки Цикл 
			//ЗаполнитьЗначенияСвойств(ТекНайдСтрока, Выборка);  
			ЗаполнитьЗначенияСвойств(ТекНайдСтрока, Выборка,,"Реализация"); 
			Если Не ЗначениеЗаполнено(ТекНайдСтрока.Реализация) Тогда
				ТекНайдСтрока.Реализация = Выборка.Реализация;
			КонецЕсли;
			//Если Не Выборка.ПометкаУдаления Тогда
			//		ТекНайдСтрока.Реализация = Выборка.Реализация;
			//КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьПриАктивизацииЯчейки(Элемент)
	
	Если Не Элемент = Неопределено И Не Элемент.ТекущиеДанные = Неопределено Тогда
		
		Если (ТипЗнч(Элемент.ТекущиеДанные.ЗаказКлиента) = Тип("ДокументСсылка.ЗаказКлиента") Или ТипЗнч(Элемент.ТекущиеДанные.ЗаказКлиента) = Тип("ДокументСсылка.ЗаказНаВозвратОтКлиента"))
			И Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Статус) Тогда
			
			Элемент.ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.ПустаяСсылка");
		ИначеЕсли (ТипЗнч(Элемент.ТекущиеДанные.ЗаказКлиента) = Тип("ДокументСсылка.ЗаказПоставщику") Или ТипЗнч(Элемент.ТекущиеДанные.ЗаказКлиента) = Тип("ДокументСсылка.ЗаказНаПеремещение"))
			И Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Статус) Тогда
			
			Элемент.ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.ПустаяСсылка");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьЗаказКлиентаПриИзменении(Элемент)
	
	Если Не Элементы.ТабличнаяЧасть.ТекущиеДанные = Неопределено Тогда
		
		Если ТипЗнч(Элементы.ТабличнаяЧасть.ТекущиеДанные.ЗаказКлиента) = Тип("ДокументСсылка.ЗаказКлиента") Или ТипЗнч(Элементы.ТабличнаяЧасть.ТекущиеДанные.ЗаказКлиента) = Тип("ДокументСсылка.ЗаказНаВозвратОтКлиента") Тогда			
			Элементы.ТабличнаяЧасть.ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.ПустаяСсылка");
		ИначеЕсли ТипЗнч(Элементы.ТабличнаяЧасть.ТекущиеДанные.ЗаказКлиента) = Тип("ДокументСсылка.ЗаказПоставщику") Или ТипЗнч(Элементы.ТабличнаяЧасть.ТекущиеДанные.ЗаказКлиента) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда	
			Элементы.ТабличнаяЧасть.ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.ПустаяСсылка");
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры



&НаСервереБезКонтекста
Функция СтруктураДляЗаполненияСтрокиНаСервере(ЗаказКлиента,ТекстЗапроса)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Заказ",ЗаказКлиента);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда 
		СтруктураДляВозврата = Новый Структура;
		Для каждого КолонкаЗапроса Из РезультатЗапроса.Колонки Цикл
			СтруктураДляВозврата.Вставить(КолонкаЗапроса.Имя);
		КонецЦикла;
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(СтруктураДляВозврата,Выборка);
		Возврат СтруктураДляВозврата;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

&НаСервере
Процедура ПроверитьОстаткиНаСервере()
	
	СписокЗаказов = Объект.ТабличнаяЧасть.Выгрузить(,"ЗаказКлиента");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(СписокЗаказов.ЗаказКлиента КАК Документ.ЗаказКлиента) КАК ЗаказКлиента
	               |ПОМЕСТИТЬ ВТЗаказы
	               |ИЗ
	               |	&СписокЗаказов КАК СписокЗаказов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТЗаказы.ЗаказКлиента КАК ЗаказКлиента,
	               |	ЗаказКлиентаТабличнаяЧасть.Ссылка КАК Ссылка,
	               |	ЗаказКлиентаТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	               |	ЗаказКлиентаТабличнаяЧасть.Номенклатура КАК Номенклатура,
	               |	ЗаказКлиентаТабличнаяЧасть.Склад КАК Склад,
	               |	ЗаказКлиентаТабличнаяЧасть.Количество КАК Количество,
	               |	ЗаказКлиентаТабличнаяЧасть.Цена КАК Цена,
	               |	ЗаказКлиентаТабличнаяЧасть.Сумма КАК Сумма,
	               |	ЗаказКлиентаТабличнаяЧасть.Доставка КАК Доставка,
	               |	ЗаказКлиентаТабличнаяЧасть.СуммаДоставки КАК СуммаДоставки,
	               |	ЗаказКлиентаТабличнаяЧасть.ВидДоставки КАК ВидДоставки,
	               |	ЗаказКлиентаТабличнаяЧасть.СуммаБезНДС КАК СуммаБезНДС,
	               |	ЗаказКлиентаТабличнаяЧасть.СтавкаНДС КАК СтавкаНДС,
	               |	ЗаказКлиентаТабличнаяЧасть.СуммаНДС КАК СуммаНДС,
	               |	ЗаказКлиентаТабличнаяЧасть.ВидЦеныПоставщика КАК ВидЦеныПоставщика,
	               |	ЗаказКлиентаТабличнаяЧасть.ДатаПоступления КАК ДатаПоступления,
	               |	ЗаказКлиентаТабличнаяЧасть.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ЗаказКлиентаТабличнаяЧасть.КоличествоУпаковок КАК КоличествоУпаковок,
	               |	ЗаказКлиентаТабличнаяЧасть.ЦенаПодтвержденная КАК ЦенаПодтвержденная,
	               |	ЗаказКлиентаТабличнаяЧасть.КоличествоПодтвержденное КАК КоличествоПодтвержденное,
	               |	ЗаказКлиентаТабличнаяЧасть.СтатусПодтвержденияПозиции КАК СтатусПодтвержденияПозиции,
	               |	ЗаказКлиентаТабличнаяЧасть.КоличествоВЗапайках КАК КоличествоВЗапайках,
	               |	ЗаказКлиентаТабличнаяЧасть.ВнутреннийНомерВБДПоставщика КАК ВнутреннийНомерВБДПоставщика,
	               |	ЗаказКлиентаТабличнаяЧасть.ВнутреннийНомерВБДПокупателя КАК ВнутреннийНомерВБДПокупателя,
	               |	ЗаказКлиентаТабличнаяЧасть.НаименованиеПоставщика КАК НаименованиеПоставщика,
	               |	ЗаказКлиентаТабличнаяЧасть.ШтрихкодПоставщика КАК ШтрихкодПоставщика,
	               |	ЗаказКлиентаТабличнаяЧасть.ГУИДСтроки КАК ГУИДСтроки,
	               |	ЗаказКлиентаТабличнаяЧасть.СчетУчета КАК СчетУчета,
	               |	ЗаказКлиентаТабличнаяЧасть.КоличествоВУпаковке КАК КоличествоВУпаковке,
	               |	ЗаказКлиентаТабличнаяЧасть.Кратность КАК Кратность,
	               |	ЗаказКлиентаТабличнаяЧасть.СерияНоменклатуры КАК СерияНоменклатуры
	               |ПОМЕСТИТЬ ТЧЗаказы
	               |ИЗ
	               |	ВТЗаказы КАК ВТЗаказы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.ТабличнаяЧасть КАК ЗаказКлиентаТабличнаяЧасть
	               |		ПО ВТЗаказы.ЗаказКлиента.Ссылка = ЗаказКлиентаТабличнаяЧасть.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	УчетныйОстаткиИОбороты.Субконто1 КАК Номенклатура,
	               |	УчетныйОстаткиИОбороты.Субконто2 КАК Склад,
	               |	УчетныйОстаткиИОбороты.Предприятия КАК Предприятия,
	               |	УчетныйОстаткиИОбороты.Подразделение КАК Подразделение,
	               |	УчетныйОстаткиИОбороты.КоличествоНачальныйОстаток КАК КоличествоНачальныйОстаток,
	               |	УчетныйОстаткиИОбороты.КоличествоКонечныйОстаток КАК КоличествоКонечныйОстаток,
	               |	УчетныйОстаткиИОбороты.Подразделение.Родитель КАК ГруппаПодразделений,
	               |	ВЫРАЗИТЬ(УчетныйОстаткиИОбороты.Субконто1 КАК Справочник.Номенклатура).Код КАК КодНоменклатуры,
	               |	ВЫРАЗИТЬ(УчетныйОстаткиИОбороты.Субконто1 КАК Справочник.Номенклатура).ЕдиницаИзмерения КАК ЕдИзмНоменклатуры,
	               |	0 КАК КоличествоОборотДт,
	               |	0 КАК КоличествоОборотКт,
	               |	0 КАК СуммаОборотКт,
	               |	0 КАК СуммаОборотДт,
	               |	НоменклатураПоставщикаСрезПоследних.Контрагент КАК Контрагент,
	               |	НоменклатураПоставщикаСрезПоследних.Контрагент.Код КАК КодКонтрагента,
	               |	УчетныйОстаткиИОбороты.СуммаНачальныйОстаток КАК СуммаНачальныйОстаток,
	               |	УчетныйОстаткиИОбороты.СуммаКонечныйОстаток КАК СуммаКонечныйОстаток,
	               |	УчетныйОстаткиИОбороты.Субконто3 КАК Серия,
	               |	УчетныйОстаткиИОбороты.Субконто3 КАК МОЛ,
	               |	ТЧЗаказы.ЗаказКлиента КАК ЗаказКлиента,
	               |	ТЧЗаказы.Количество КАК Количество,
	               |	ТЧЗаказы.НомерСтроки КАК НомерСтроки
	               |ПОМЕСТИТЬ Остатки
	               |ИЗ
	               |	РегистрБухгалтерии.Учетный.ОстаткиИОбороты(
	               |			,
	               |			&ПозицияДокумента,
	               |			,
	               |			,
	               |			Счет.Код = ""41""
	               |				ИЛИ Счет.Код = ""43""
	               |				ИЛИ Счет.Родитель.Код = ""10"",
	               |			,
	               |			Предприятия В (&ДоступныеПредприятия)
	               |				И СценарийПлана = &Сценарий) КАК УчетныйОстаткиИОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураПоставщика.СрезПоследних КАК НоменклатураПоставщикаСрезПоследних
	               |		ПО УчетныйОстаткиИОбороты.Субконто1 = НоменклатураПоставщикаСрезПоследних.Номенклатура
	               |			И УчетныйОстаткиИОбороты.Предприятия = НоменклатураПоставщикаСрезПоследних.Предприятие
	               |			И УчетныйОстаткиИОбороты.Подразделение = НоменклатураПоставщикаСрезПоследних.Подразделение
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЧЗаказы КАК ТЧЗаказы
	               |		ПО УчетныйОстаткиИОбороты.Субконто1 = ТЧЗаказы.Номенклатура
	               |			И УчетныйОстаткиИОбороты.Субконто2 = ТЧЗаказы.Склад
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Остатки.Номенклатура КАК Номенклатура,
	               |	Остатки.Склад КАК Склад,
	               |	СУММА(Остатки.КоличествоКонечныйОстаток) КАК КонечныйОстаток,
	               |	Остатки.ЗаказКлиента КАК ЗаказКлиента,
	               |	Остатки.Количество КАК Количество,
	               |	Остатки.НомерСтроки КАК НомерСтроки
	               |ПОМЕСТИТЬ ВТКонечныйОстаток
	               |ИЗ
	               |	Остатки КАК Остатки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Остатки.ЗаказКлиента,
	               |	Остатки.Склад,
	               |	Остатки.Номенклатура,
	               |	Остатки.Количество,
	               |	Остатки.НомерСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТКонечныйОстаток.Номенклатура КАК Номенклатура,
	               |	ВТКонечныйОстаток.Склад КАК Склад,
	               |	ВТКонечныйОстаток.КонечныйОстаток КАК КонечныйОстаток,
	               |	ВТКонечныйОстаток.ЗаказКлиента КАК ЗаказКлиента,
	               |	СУММА(ВТКонечныйОстаток.Количество) КАК Количество,
	               |	МИНИМУМ(ВТКонечныйОстаток.НомерСтроки) КАК НомерСтроки
	               |ПОМЕСТИТЬ КоличествоВДокументе
	               |ИЗ
	               |	ВТКонечныйОстаток КАК ВТКонечныйОстаток
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТКонечныйОстаток.Номенклатура,
	               |	ВТКонечныйОстаток.Склад,
	               |	ВТКонечныйОстаток.КонечныйОстаток,
	               |	ВТКонечныйОстаток.ЗаказКлиента
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КоличествоВДокументе.Номенклатура КАК Номенклатура,
	               |	КоличествоВДокументе.Склад КАК Склад,
	               |	КоличествоВДокументе.КонечныйОстаток КАК КонечныйОстаток,
	               |	КоличествоВДокументе.ЗаказКлиента КАК ЗаказКлиента,
	               |	КоличествоВДокументе.Количество КАК Количество
	               |ИЗ
	               |	КоличествоВДокументе КАК КоличествоВДокументе
	               |ГДЕ
	               |	КоличествоВДокументе.Количество > КоличествоВДокументе.КонечныйОстаток";				   

	Запрос.УстановитьПараметр("СписокЗаказов",СписокЗаказов);
	Запрос.УстановитьПараметр("ПозицияДокумента",ТекущаяДата());  
	Запрос.УстановитьПараметр("Сценарий",Справочники.СценарииПланирования.НайтиПоНаименованию("Факт"));
	Запрос.УстановитьПараметр("ДоступныеПредприятия",БюджетныйНаСервере.ПолучитьПредприятия());	

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		Сообщить("" + Строка(Выборка.ЗаказКлиента) + " количество позиции " + Строка(Выборка.Номенклатура)+ " превышает фактический остаток на складе!"); 
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОстатки(Команда)
	ПроверитьОстаткиНаСервере();
КонецПроцедуры
