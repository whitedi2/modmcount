
Процедура ОбработкаПроведения(Отказ, Режим)
	
	
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	ЗаполнитьЗначенияСтрок();
	СуммаДокумента = ТабличнаяЧасть.Итог("Сумма");
	Вес = ТабличнаяЧасть.Итог("ВесЗаказа");
	
	//из подписки на событие
	БюджетныйНаСервере.ДокументыПередЗаписьюПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	РучнаяКорректировка = Ложь;
	
КонецПроцедуры


Процедура ПриКопировании(ОбъектКопирования)
	
	РучнаяКорректировка = Ложь;
	
	ТабличнаяЧасть.Очистить();
	
КонецПроцедуры


Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	БюджетныйНаСервере.ПриУстановкеНовогоНомераПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
КонецПроцедуры


Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)	
	сабОбщегоНазначенияБУХ.сабОбработкиЗаполненияУчпетныхДокументовОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
КонецПроцедуры


Процедура ПриЗаписи(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	МЛВыполнен = Перечисления.СтатусыМаршрутныхЛистов.Выполнен;
	МЛСобран = Перечисления.СтатусыМаршрутныхЛистов.Собран;
	СтатусОтгружен = Перечисления.СтатусыЗаказовКлиентов.Отгружен;  //Перечисления.СтатусыЗаказовПоставщикам.Закрыт
	СтатусКОтгрузке = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке; //Перечисления.СтатусыЗаказовПоставщикам.КПоступлению
	СтатусСобран = Перечисления.СтатусыЗаказовКлиентов.Собран; //Перечисления.СтатусыЗаказовПоставщикам.Отправлен
	СтатусВработе = Перечисления.СтатусыЗаказовКлиентов.ВРаботе; //Перечисления.СтатусыЗаказовПоставщикам.Подтвержден  
	СтатусКПоступлению = Перечисления.СтатусыЗаказовПоставщикам.КПоступлению;
	
	Для каждого ТекСтрока Из ТабличнаяЧасть Цикл
		
		Если ЗначениеЗаполнено(ТекСтрока.Реализация) Тогда
			
			Если ТипЗнч(ТекСтрока.ЗаказКлиента) = Тип("ДокументСсылка.ЗаказПоставщику") ИЛИ  ТипЗнч(ТекСтрока.ЗаказКлиента) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
				
				Если ТекСтрока.ЗаказКлиента.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт Тогда
					Продолжить;			
				КонецЕсли;
				
				Если Статус = МЛВыполнен И НЕ ТекСтрока.ЗаказКлиента.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт Тогда
					ТекЗаказ = ТекСтрока.ЗаказКлиента.ПолучитьОбъект();
					ТекЗаказ.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт;
					
					Если ТекЗаказ.Проведен Тогда
						ТекЗаказ.Записать(РежимЗаписиДокумента.Проведение);
					Иначе	
						ТекЗаказ.Записать();
					КонецЕсли;
					
				ИначеЕсли Статус = МЛСобран И Не ТекСтрока.ЗаказКлиента.Статус = Перечисления.СтатусыЗаказовПоставщикам.Отправлен Тогда
					ТекЗаказ = ТекСтрока.ЗаказКлиента.ПолучитьОбъект();
					ТекЗаказ.Статус = Перечисления.СтатусыЗаказовПоставщикам.Отправлен;
					
					Если ТекЗаказ.Проведен Тогда
						ТекЗаказ.Записать(РежимЗаписиДокумента.Проведение);
					Иначе	
						ТекЗаказ.Записать();
					КонецЕсли;
					
				ИначеЕсли НЕ Статус = МЛСобран И НЕ Статус = МЛВыполнен И Не ТекСтрока.ЗаказКлиента.Статус = Перечисления.СтатусыЗаказовПоставщикам.КПоступлению Тогда
					ТекЗаказ = ТекСтрока.ЗаказКлиента.ПолучитьОбъект();
					ТекЗаказ.Статус = Перечисления.СтатусыЗаказовПоставщикам.КПоступлению;
					
					Если ТекЗаказ.Проведен Тогда
						ТекЗаказ.Записать(РежимЗаписиДокумента.Проведение);
					Иначе	
						ТекЗаказ.Записать();
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				
				Если ТекСтрока.ЗаказКлиента.Статус = СтатусОтгружен Тогда
					Продолжить;			
				КонецЕсли;
				
				Если Статус = МЛВыполнен И НЕ ТекСтрока.ЗаказКлиента.Статус = СтатусОтгружен Тогда
					ТекЗаказ = ТекСтрока.ЗаказКлиента.ПолучитьОбъект();
					ТекЗаказ.Статус = СтатусОтгружен;
					
					Если ТекЗаказ.Проведен Тогда
						ТекЗаказ.Записать(РежимЗаписиДокумента.Проведение);
					Иначе	
						ТекЗаказ.Записать();
					КонецЕсли;
					
				ИначеЕсли Статус = МЛСобран И Не ТекСтрока.ЗаказКлиента.Статус = СтатусСобран Тогда
					ТекЗаказ = ТекСтрока.ЗаказКлиента.ПолучитьОбъект();
					ТекЗаказ.Статус = СтатусСобран;
					
					Если ТекЗаказ.Проведен Тогда
						ТекЗаказ.Записать(РежимЗаписиДокумента.Проведение);
					Иначе	
						ТекЗаказ.Записать();
					КонецЕсли;
					
				ИначеЕсли НЕ Статус = МЛСобран И НЕ Статус = МЛВыполнен И Не ТекСтрока.ЗаказКлиента.Статус = СтатусВработе Тогда
					ТекЗаказ = ТекСтрока.ЗаказКлиента.ПолучитьОбъект();
					ТекЗаказ.Статус = СтатусВработе;
					
					Если ТекЗаказ.Проведен Тогда
						ТекЗаказ.Записать(РежимЗаписиДокумента.Проведение);
					Иначе	
						ТекЗаказ.Записать();
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		Иначе
			ТекЗаказ = ТекСтрока.ЗаказКлиента.ПолучитьОбъект();
			
			Если ТипЗнч(ТекСтрока.ЗаказКлиента) = Тип("ДокументСсылка.ЗаказКлиента") Или ТипЗнч(ТекСтрока.ЗаказКлиента) = Тип("ДокументСсылка.ЗаказНаВозвратОтКлиента") Тогда
				
				Если ТекСтрока.ЗаказКлиента.Статус = СтатусОтгружен Тогда
					Продолжить;			
				КонецЕсли;
				
				ТекЗаказ.Статус = СтатусКОтгрузке;
				
			ИначеЕсли ТипЗнч(ТекСтрока.ЗаказКлиента) = Тип("ДокументСсылка.ЗаказПоставщику") ИЛИ  ТипЗнч(ТекСтрока.ЗаказКлиента) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
				
				Если ТекСтрока.ЗаказКлиента.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт Тогда
					Продолжить;			
				КонецЕсли;
				
				ТекЗаказ.Статус = ?(ЗначениеЗаполнено(ТекСтрока.Статус), ТекСтрока.Статус, СтатусКПоступлению);
			КонецЕсли;
			
			Если ТекЗаказ.Проведен Тогда
				ТекЗаказ.Записать(РежимЗаписиДокумента.Проведение);
			Иначе	
				ТекЗаказ.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияСтрок()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказКлиентаДок.Ссылка КАК ЗаказКлиента,
	               |	ЗаказКлиентаДок.ДатаПоступления КАК ДатаПоступления,
	               |	ЗаказКлиентаДок.ПродажаВРозницу КАК ПродажаВРозницу,
	               |	ЗаказКлиентаДок.АдресДоставки КАК АдресДоставки,
	               |	ЗаказКлиентаДок.БезвозмезднаяПередача КАК БезвозмезднаяПередача,
	               |	ЗаказКлиентаДок.СуммаДокумента КАК Сумма,
	               |	ЗаказКлиентаДок.Статус КАК Статус,
	               |	МАКСИМУМ(ЕСТЬNULL(РеализацияТоваровУслуг.Ссылка, ЕСТЬNULL(УЧ_Реализация.Ссылка, ЕСТЬNULL(ПередачаТоваров.Ссылка, ЕСТЬNULL(РозничнаяПродажа.Ссылка, ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)))))) КАК Реализация,
	               |	ЗаказКлиентаДок.ВесТовара КАК ВесЗаказа,
	               |	ЗаказКлиентаДок.Контрагент КАК Контрагент
	               |ИЗ
	               |	Документ.ЗаказКлиента КАК ЗаказКлиентаДок
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |		ПО ЗаказКлиентаДок.Ссылка = РеализацияТоваровУслуг.Заказ
	               |			И (НЕ РеализацияТоваровУслуг.ПометкаУдаления)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_Реализация КАК УЧ_Реализация
	               |		ПО ЗаказКлиентаДок.Ссылка = УЧ_Реализация.ДокОснование
	               |			И (НЕ УЧ_Реализация.ПометкаУдаления)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа КАК РозничнаяПродажа
	               |		ПО ЗаказКлиентаДок.Ссылка = РозничнаяПродажа.Заказ
	               |			И (НЕ РозничнаяПродажа.ПометкаУдаления)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаТоваров КАК ПередачаТоваров
	               |		ПО ЗаказКлиентаДок.Ссылка = ПередачаТоваров.Заказ
	               |			И (НЕ ПередачаТоваров.ПометкаУдаления)
	               |ГДЕ
	               |	ЗаказКлиентаДок.Ссылка В(&Заказы)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказКлиентаДок.Ссылка,
	               |	ЗаказКлиентаДок.ДатаПоступления,
	               |	ЗаказКлиентаДок.ПродажаВРозницу,
	               |	ЗаказКлиентаДок.АдресДоставки,
	               |	ЗаказКлиентаДок.БезвозмезднаяПередача,
	               |	ЗаказКлиентаДок.СуммаДокумента,
	               |	ЗаказКлиентаДок.Статус,
	               |	ЗаказКлиентаДок.ВесТовара,
	               |	ЗаказКлиентаДок.Контрагент
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗаказНаВозвратОтКлиента.Ссылка,
	               |	ЗаказНаВозвратОтКлиента.ДатаПоступления,
	               |	ЗаказНаВозвратОтКлиента.ПродажаВРозницу,
	               |	ЗаказНаВозвратОтКлиента.АдресДоставки,
	               |	ЗаказНаВозвратОтКлиента.БезвозмезднаяПередача,
	               |	ЗаказНаВозвратОтКлиента.СуммаДокумента,
	               |	ЗаказНаВозвратОтКлиента.Статус,
	               |	МАКСИМУМ(ЕСТЬNULL(ВозвратТоваровОтПокупателя.Ссылка, ЕСТЬNULL(УЧ_Возврат.Ссылка, ЕСТЬNULL(РозничнаяПродажа.Ссылка, ЗНАЧЕНИЕ(Документ.ВозвратТоваровОтПокупателя.ПустаяСсылка))))),
	               |	ЗаказНаВозвратОтКлиента.ВесТовара,
	               |	ЗаказНаВозвратОтКлиента.Контрагент
	               |ИЗ
	               |	Документ.ЗаказНаВозвратОтКлиента КАК ЗаказНаВозвратОтКлиента
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	               |		ПО ЗаказНаВозвратОтКлиента.Ссылка = ВозвратТоваровОтПокупателя.Заказ
	               |			И (НЕ ВозвратТоваровОтПокупателя.ПометкаУдаления)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_Возврат КАК УЧ_Возврат
	               |		ПО ЗаказНаВозвратОтКлиента.Ссылка = УЧ_Возврат.ДокОснование
	               |			И (НЕ УЧ_Возврат.ПометкаУдаления)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа КАК РозничнаяПродажа
	               |		ПО ЗаказНаВозвратОтКлиента.Ссылка = РозничнаяПродажа.Заказ
	               |			И (НЕ РозничнаяПродажа.ПометкаУдаления)
	               |ГДЕ
	               |	ЗаказНаВозвратОтКлиента.Ссылка В(&Заказы)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказНаВозвратОтКлиента.Ссылка,
	               |	ЗаказНаВозвратОтКлиента.ДатаПоступления,
	               |	ЗаказНаВозвратОтКлиента.ПродажаВРозницу,
	               |	ЗаказНаВозвратОтКлиента.АдресДоставки,
	               |	ЗаказНаВозвратОтКлиента.БезвозмезднаяПередача,
	               |	ЗаказНаВозвратОтКлиента.СуммаДокумента,
	               |	ЗаказНаВозвратОтКлиента.Статус,
	               |	ЗаказНаВозвратОтКлиента.ВесТовара,
	               |	ЗаказНаВозвратОтКлиента.Контрагент
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗаказПоставщику.Ссылка,
	               |	ЗаказПоставщику.ДатаПоступления,
	               |	ЗаказПоставщику.ПокупкаВРозницу,
	               |	ЗаказПоставщику.АдресДоставки,
	               |	ЗаказПоставщику.БезвозмезднаяПередача,
	               |	ЗаказПоставщику.СуммаДокумента,
	               |	ЗаказПоставщику.Статус,
	               |	МАКСИМУМ(ЕСТЬNULL(ПоступлениеТоваровУслуг.Ссылка, ЕСТЬNULL(УЧ_ПоступлениеТоваров.Ссылка, ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)))),
	               |	ЗаказПоставщику.ВесТовара,
	               |	ЗаказПоставщику.Контрагент
	               |ИЗ
	               |	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_ПоступлениеТоваров КАК УЧ_ПоступлениеТоваров
	               |		ПО ЗаказПоставщику.Ссылка = УЧ_ПоступлениеТоваров.ДокОснование
	               |			И (НЕ УЧ_ПоступлениеТоваров.ПометкаУдаления)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	               |		ПО ЗаказПоставщику.Ссылка = ПоступлениеТоваровУслуг.Заказ
	               |			И (НЕ ПоступлениеТоваровУслуг.ПометкаУдаления)
	               |ГДЕ
	               |	ЗаказПоставщику.Ссылка В(&Заказы)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказПоставщику.Ссылка,
	               |	ЗаказПоставщику.ДатаПоступления,
	               |	ЗаказПоставщику.ПокупкаВРозницу,
	               |	ЗаказПоставщику.АдресДоставки,
	               |	ЗаказПоставщику.БезвозмезднаяПередача,
	               |	ЗаказПоставщику.СуммаДокумента,
	               |	ЗаказПоставщику.Статус,
	               |	ЗаказПоставщику.ВесТовара,
	               |	ЗаказПоставщику.Контрагент
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗаказНаПеремещение.Ссылка,
	               |	ЗаказНаПеремещение.ДатаПоступления,
	               |	ЗаказНаПеремещение.ПокупкаВРозницу,
	               |	ЗаказНаПеремещение.АдресДоставки,
	               |	ЗаказНаПеремещение.БезвозмезднаяПередача,
	               |	ЗаказНаПеремещение.СуммаДокумента,
	               |	ЗаказНаПеремещение.Статус,
	               |	МАКСИМУМ(ЕСТЬNULL(ПеремещениеТоваров.Ссылка, ЕСТЬNULL(УЧ_ПеремещениеТоваров.Ссылка, ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка)))),
	               |	ЗаказНаПеремещение.ВесТовара,
	               |	ЗаказНаПеремещение.Контрагент
	               |ИЗ
	               |	Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_ПеремещениеТоваров КАК УЧ_ПеремещениеТоваров
	               |		ПО ЗаказНаПеремещение.Ссылка = УЧ_ПеремещениеТоваров.ДокОснование
	               |			И (НЕ УЧ_ПеремещениеТоваров.ПометкаУдаления)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	               |		ПО ЗаказНаПеремещение.Ссылка = ПеремещениеТоваров.Заказ
	               |			И (НЕ ПеремещениеТоваров.ПометкаУдаления)
	               |ГДЕ
	               |	ЗаказНаПеремещение.Ссылка В(&Заказы)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказНаПеремещение.Ссылка,
	               |	ЗаказНаПеремещение.ДатаПоступления,
	               |	ЗаказНаПеремещение.ПокупкаВРозницу,
	               |	ЗаказНаПеремещение.АдресДоставки,
	               |	ЗаказНаПеремещение.БезвозмезднаяПередача,
	               |	ЗаказНаПеремещение.СуммаДокумента,
	               |	ЗаказНаПеремещение.Статус,
	               |	ЗаказНаПеремещение.ВесТовара,
	               |	ЗаказНаПеремещение.Контрагент";
	
	Запрос.УстановитьПараметр("Заказы", ТабличнаяЧасть.Выгрузить().ВыгрузитьКолонку("ЗаказКлиента"));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НайденныеСтроки = ТабличнаяЧасть.НайтиСтроки(Новый Структура("ЗаказКлиента", Выборка.ЗаказКлиента));
		
		Для каждого ТекНайдСтрока Из НайденныеСтроки Цикл 
			ЗаполнитьЗначенияСвойств(ТекНайдСтрока, Выборка,,"Реализация"); 
			Если Не ЗначениеЗаполнено(ТекНайдСтрока.Реализация) Тогда
				ТекНайдСтрока.Реализация = Выборка.Реализация;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры


