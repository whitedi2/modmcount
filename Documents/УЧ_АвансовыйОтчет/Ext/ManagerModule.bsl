
Процедура Печать(ТабДок, Ссылка) Экспорт
	//{{_КОНСТРУКТОР_ПЕЧАТИ(Печать)
	Макет = Документы.УЧ_АвансовыйОтчет.ПолучитьМакет("Печать");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УЧ_АвансовыйОтчет.Комментарий КАК Комментарий,
	|	УЧ_АвансовыйОтчет.Предприятие КАК Предприятие,
	|	УЧ_АвансовыйОтчет.Сотрудник КАК Сотрудник,
	|	УЧ_АвансовыйОтчет.Счет71 КАК Счет71,
	|	УЧ_АвансовыйОтчет.ТабличнаяЧасть.(
	|		НомерСтроки КАК НомерСтроки,
	|		КорСчет КАК КорСчет,
	|		КорПодразделение КАК КорПодразделение,
	|		КорСубконто1 КАК КорСубконто1,
	|		КорСубконто2 КАК КорСубконто2,
	|		Количество КАК Количество,
	|		Сумма КАК Сумма,
	|		Содержание КАК Содержание,
	|		КорСубконто3 КАК КорСубконто3
	|	) КАК ТабличнаяЧасть,
	|	УЧ_АвансовыйОтчет.Ссылка КАК Ссылка,
	|	УЧ_АвансовыйОтчет.СуммаПолученная КАК СуммаПолученная,
	|	УЧ_АвансовыйОтчет.Подразделение.Наименование КАК Подразделение,
	|	УЧ_АвансовыйОтчет.ДатаПолучения КАК ДатаПолучения
	|ИЗ
	|	Документ.УЧ_АвансовыйОтчет КАК УЧ_АвансовыйОтчет
	|ГДЕ
	|	УЧ_АвансовыйОтчет.Ссылка В(&Ссылка)";
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	//Шапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьТабличнаяЧастьШапка = Макет.ПолучитьОбласть("ТабличнаяЧастьШапка");
	ОбластьТабличнаяЧасть = Макет.ПолучитьОбласть("ТабличнаяЧасть");
	ОбластьТабличнаяЧастьПодвал = Макет.ПолучитьОбласть("ТабличнаяЧастьПодвал");
	ОбластьПодписи = Макет.ПолучитьОбласть("Подписи");
	ТабДок.Очистить();

	ВставлятьРазделительСтраниц = Ложь;
	Пока Выборка.Следующий() Цикл
		Если ВставлятьРазделительСтраниц Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ВыборкаТабличнаяЧастьТЗ = Выборка.ТабличнаяЧасть.Выгрузить();
		
		
		ОбластьЗаголовок.Параметры.Заполнить(Выборка);
		ОбластьЗаголовок.Параметры.СуммаИтого = ВыборкаТабличнаяЧастьТЗ.Итог("Сумма");	
		ОбластьЗаголовок.Параметры.ДатаПолучения = Формат(Выборка.ДатаПолучения, "ДФ=dd.MM.yyyy");
		ТабДок.Вывести(ОбластьЗаголовок);

		//Шапка.Параметры.Заполнить(Выборка);
		//ТабДок.Вывести(Шапка, Выборка.Уровень());

		ТабДок.Вывести(ОбластьТабличнаяЧастьШапка);
		Для каждого ВыборкаТабличнаяЧасть Из ВыборкаТабличнаяЧастьТЗ Цикл
			ОбластьТабличнаяЧасть.Параметры.Заполнить(ВыборкаТабличнаяЧасть);
			ТабДок.Вывести(ОбластьТабличнаяЧасть);
		КонецЦикла;
		
		Если ВыборкаТабличнаяЧастьТЗ.Количество() Тогда
			ОбластьТабличнаяЧастьПодвал.Параметры.СуммаИтого = ВыборкаТабличнаяЧастьТЗ.Итог("Сумма");	
		    ТабДок.Вывести(ОбластьТабличнаяЧастьПодвал);
			
			ОбластьПодписи.Параметры.СуммаОстатка = ?(Выборка.СуммаПолученная > ВыборкаТабличнаяЧастьТЗ.Итог("Сумма"),
			Выборка.СуммаПолученная - ВыборкаТабличнаяЧастьТЗ.Итог("Сумма"), ВыборкаТабличнаяЧастьТЗ.Итог("Сумма") - Выборка.СуммаПолученная);
			ОбластьПодписи.Параметры.ПризнакОстатка = ?(Выборка.СуммаПолученная > ВыборкаТабличнаяЧастьТЗ.Итог("Сумма"), "Остаток", "Перерасход");
		    ТабДок.Вывести(ОбластьПодписи);
		КонецЕсли;
		
		
		ВставлятьРазделительСтраниц = Истина;
	КонецЦикла;
	
	//}}
КонецПроцедуры

Функция ПечатьАвансовогоОтчета(ТабличныйДокумент, МассивОбъектов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВалютаРегламентированногоУчета = УЧ_Сервер.НациональнаяВалюта();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб         = Истина;
	ТабличныйДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АвансовыйОтчет_АвансовыйОтчет";
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивОбъектов",  МассивОбъектов);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("ПустойСчет",      ПланыСчетов.Учетный.ПустаяСсылка());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АвансовыйОтчет.Сотрудник КАК ФизическоеЛицо,
	|	АвансовыйОтчет.Сотрудник КАК Сотрудник,
	|	АвансовыйОтчет.Дата КАК Дата,
	|	АвансовыйОтчет.Ссылка КАК ДокументСсылка,
	|	АвансовыйОтчет.Организация КАК Организация,
	|	АвансовыйОтчет.Подразделение КАК ПодразделениеСотрудника,
	|	АвансовыйОтчет.Подразделение.Наименование КАК ПредставлениеПодразделенияСотрудника,
	|	АвансовыйОтчет.Подразделение.Код КАК ПодразделениеСотрудникаКод
	|ИЗ
	|	Документ.УЧ_АвансовыйОтчет КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.Ссылка В(&МассивОбъектов)";
	
	ТаблицаРаботников = Запрос.Выполнить().Выгрузить();
	
	Если ПривилегированныйРежим() Тогда
		// Отключение привилегированного режима при переходе в другую подсистему
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	//УчетЗарплаты.ПолучитьТаблицуСотрудников(ТаблицаРаботников);

	Запрос.УстановитьПараметр("Сотрудники", ТаблицаРаботников);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТабСотрудники.Сотрудник,
	|	ТабСотрудники.ПодразделениеСотрудника,
	|	ТабСотрудники.ПодразделениеСотрудникаКод,
	|	ТабСотрудники.ПредставлениеПодразделенияСотрудника,
	|	ТабСотрудники.ДокументСсылка
	|Поместить ВТСотрудники
	|ИЗ
	|	&Сотрудники КАК ТабСотрудники";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АвансовыйОтчет.Ссылка КАК Ссылка,
	|	АвансовыйОтчет.МоментВремени КАК МоментВремени,
	|	АвансовыйОтчет.Номер КАК Номер,
	|	АвансовыйОтчет.Дата КАК ДатаДокумента,
	|	АвансовыйОтчет.Сотрудник КАК ПодотчетноеЛицо,
	|	АвансовыйОтчет.Сотрудник.Наименование КАК ПредставлениеПодотчетногоЛица,
	|	АвансовыйОтчет.Организация КАК Руководители,
	|	АвансовыйОтчет.Подразделение КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА АвансовыйОтчет.Подразделение.Наименование ПОДОБНО """"
	|			ТОГДА АвансовыйОтчет.Подразделение.Наименование
	|		ИНАЧЕ АвансовыйОтчет.Подразделение.Наименование
	|	КОНЕЦ КАК ПредставлениеПодразделения,
	|	АвансовыйОтчет.Подразделение.Код КАК КодПодразделения,
	|	АвансовыйОтчет.Организация КАК Организация,
	|	АвансовыйОтчет.Комментарий КАК НазначениеАванса,
	|	&ВалютаРеглУчета КАК ВалютаДокумента,
	|	ИСТИНА КАК СуммаВключаетНДС,
	|	&ВалютаРеглУчета КАК ПредставлениеВалюты,
	|	АвансовыйОтчет.СуммаИтог КАК СуммаДокумента,
	|	1 КАК КоличествоДокументов,
	|	1 КАК КоличествоЛистов,
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.ПодразделениеСотрудника КАК ПодразделениеСотрудника,
	|	Сотрудники.ПодразделениеСотрудникаКод КАК ПодразделениеСотрудникаКод,
	|	Сотрудники.ПредставлениеПодразделенияСотрудника КАК ПредставлениеПодразделенияСотрудника,
	|	АвансовыйОтчет.Предприятие КАК Предприятие
	|ИЗ
	|	Документ.УЧ_АвансовыйОтчет КАК АвансовыйОтчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
	|		ПО АвансовыйОтчет.Ссылка = Сотрудники.ДокументСсылка
	|ГДЕ
	|	АвансовыйОтчет.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	АвансовыйОтчет.Ссылка";
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	АвансовыйОтчетВыданныеАвансы.Ссылка КАК АвансовыйОтчет,
	//|	АвансовыйОтчетВыданныеАвансы.ДокОснование КАК ДокументАванса,
	//|	ВЫБОР
	//|		КОГДА АвансовыйОтчетВыданныеАвансы.ДокументАванса ССЫЛКА Документ.УЧ_ДвижениеДС
	//|			ТОГДА ""КАССА""
	//|		ИНАЧЕ ""БАНК""
	//|	КОНЕЦ КАК ТипДокумента,
	//|	АвансовыйОтчетВыданныеАвансы.ДокОснование.СуммаДокумента КАК Сумма
	//|ИЗ
	//|	Документ.УЧ_АвансовыйОтчет.ВыданныеАвансы КАК АвансовыйОтчетВыданныеАвансы
	//|ГДЕ
	//|	АвансовыйОтчетВыданныеАвансы.Ссылка В(&МассивОбъектов)";
	//
	//ДокументыАвансов = Запрос.Выполнить().Выбрать();
	//
	//ДанныеДокументов = ПолучитьДанныеДокументов(МассивОбъектов);
	//Если ДанныеДокументов.ЕстьВалютные Тогда
	//	
	//	Запрос.УстановитьПараметр("НачалоПериода",    ДанныеДокументов.НачалоПериода);
	//	Запрос.УстановитьПараметр("ОкончаниеПериода", ДанныеДокументов.ОкончаниеПериода);
	//	Запрос.УстановитьПараметр("Организации",      ДанныеДокументов.Организации);
	//	Запрос.Текст =
	//	"ВЫБРАТЬ
	//	|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаДт,
	//	|	0 КАК СуммаКт,
	//	|	ХозрасчетныйОборотыДтКт.Регистратор КАК Регистратор
	//	|ИЗ
	//	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	//	|			&НачалоПериода,
	//	|			&ОкончаниеПериода,
	//	|			Регистратор,
	//	|			СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеРасходы),
	//	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы),
	//	|			СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал),
	//	|			,
	//	|			Организация В (&Организации)
	//	|				И ВалютаКт <> &ВалютаРеглУчета
	//	|				И ВЫРАЗИТЬ(СубконтоДт1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.КурсовыеРазницы)) КАК ХозрасчетныйОборотыДтКт
	//	|ГДЕ
	//	|	ХозрасчетныйОборотыДтКт.Регистратор В(&МассивОбъектов)
	//	|
	//	|ОБЪЕДИНИТЬ
	//	|
	//	|ВЫБРАТЬ
	//	|	0,
	//	|	ХозрасчетныйОборотыДтКт.СуммаОборот,
	//	|	ХозрасчетныйОборотыДтКт.Регистратор
	//	|ИЗ
	//	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	//	|			&НачалоПериода,
	//	|			&ОкончаниеПериода,
	//	|			Регистратор,
	//	|			СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал),
	//	|			,
	//	|			СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеДоходы),
	//	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы),
	//	|			Организация В (&Организации)
	//	|				И ВалютаДт <> &ВалютаРеглУчета
	//	|				И ВЫРАЗИТЬ(СубконтоКт1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.КурсовыеРазницы)) КАК ХозрасчетныйОборотыДтКт
	//	|ГДЕ
	//	|	ХозрасчетныйОборотыДтКт.Регистратор В(&МассивОбъектов)";
	//	
	//	ЗапросПоВалютнымПроводкам = Запрос.Выполнить().Выбрать();
	//	
	//КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Регистратор КАК Регистратор,
	|	Хозрасчетный.СчетДт КАК СчетДт,
	|	Хозрасчетный.СчетКт КАК СчетКт,
	|	МИНИМУМ(Хозрасчетный.НомерСтроки) КАК НомерСтроки,
	|	СУММА(Хозрасчетный.Сумма) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Учетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Регистратор В(&МассивОбъектов)
	|	И НЕ(Хозрасчетный.СчетДт.Забалансовый
	|				ИЛИ Хозрасчетный.СчетКт.Забалансовый)
	|
	|СГРУППИРОВАТЬ ПО
	|	Хозрасчетный.Регистратор,
	|	Хозрасчетный.СчетДт,
	|	Хозрасчетный.СчетКт
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ВыборкаПроводок = Запрос.Выполнить().Выбрать();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО КАК Поставщик,
	|	АвансовыйОтчет.Ссылка.Номер КАК ДокументНомер,
	|	АвансовыйОтчет.Ссылка.Дата КАК ДокументДата,
	|	""Чек"" КАК НаименованиеРасхода,
	|	СУММА(АвансовыйОтчет.Сумма) КАК ПоОтчету,
	|	0 КАК ПоОтчетуВВалюте,
	|	0 КАК СуммаНДС,
	|	АвансовыйОтчет.КорСчет.Код КАК ДебетСубСчета,
	|	НЕОПРЕДЕЛЕНО КАК Поле1,
	|	АвансовыйОтчет.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ДанныеАвансовогоОтчета
	|ИЗ
	|	Документ.УЧ_АвансовыйОтчет.ТабличнаяЧасть КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.Ссылка.Номер,
	|	АвансовыйОтчет.Ссылка.Дата,
	|	АвансовыйОтчет.КорСчет.Код,
	|	АвансовыйОтчет.Ссылка";
	
	Запрос.Выполнить();
	
	// Свертка сумм по документам, подтверждающим расходы.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеАвансовогоОтчета.Ссылка КАК Ссылка,
	|	ДанныеАвансовогоОтчета.Поставщик КАК Поставщик,
	|	ДанныеАвансовогоОтчета.ДокументНомер КАК ДокументНомер,
	|	ДанныеАвансовогоОтчета.ДокументДата КАК ДокументДата,
	|	ДанныеАвансовогоОтчета.НаименованиеРасхода КАК НаименованиеРасхода,
	|	СУММА(ДанныеАвансовогоОтчета.ПоОтчету) КАК ПоОтчету,
	|	СУММА(ДанныеАвансовогоОтчета.ПоОтчетуВВалюте) КАК ПоОтчетуВВалюте,
	|	СУММА(ДанныеАвансовогоОтчета.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	ДанныеАвансовогоОтчета
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеАвансовогоОтчета.Ссылка,
	|	ДанныеАвансовогоОтчета.Поставщик,
	|	ДанныеАвансовогоОтчета.ДокументНомер,
	|	ДанныеАвансовогоОтчета.ДокументДата,
	|	ДанныеАвансовогоОтчета.НаименованиеРасхода
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументДата,
	|	ДокументНомер";
	
	ВыборкаПоТоварам = Запрос.Выполнить().Выбрать();
	//
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	АвансовыйОтчет.Ссылка КАК Ссылка,
	//|	АвансовыйОтчет.ЗаРубежом КАК ЗаРубежом,
	//|	СУММА(АвансовыйОтчет.Сумма - АвансовыйОтчет.СуммаСверхНормы) КАК СуммаВПределахНормы,
	//|	СУММА(АвансовыйОтчет.СуммаСверхНормы) КАК СуммаСверхНормы
	//|ИЗ
	//|	Документ.АвансовыйОтчет.Суточные КАК АвансовыйОтчет
	//|ГДЕ
	//|	АвансовыйОтчет.Ссылка В(&МассивОбъектов)
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	АвансовыйОтчет.Ссылка,
	//|	АвансовыйОтчет.ЗаРубежом
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	Ссылка";
	//
	//ВыборкаСуточные = Запрос.Выполнить().Выбрать();
	//
	// Выборка уникальных счетов учета по документам, подтверждающим расходы
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УЧ_АвансовыйОтчетТабличнаяЧасть.Ссылка КАК Ссылка,
	|	УЧ_АвансовыйОтчетТабличнаяЧасть.КорСчет КАК Счет,
	|	УЧ_АвансовыйОтчетТабличнаяЧасть.Ссылка.Номер КАК ДокументНомер,
	|	УЧ_АвансовыйОтчетТабличнаяЧасть.Ссылка.Дата КАК ДокументДата,
	|	НЕОПРЕДЕЛЕНО КАК Поставщик,
	|	""Чек"" КАК НаименованиеРасхода
	|ИЗ
	|	Документ.УЧ_АвансовыйОтчет.ТабличнаяЧасть КАК УЧ_АвансовыйОтчетТабличнаяЧасть";
	
	ВыборкаСчетов  = Запрос.Выполнить().Выбрать();
	ПервыйДокумент = Истина;
	
	Субсчета71     = Новый Массив;
	Субсчета71.Добавить(ПланыСчетов.Учетный.НайтиПоКоду("71.01"));	
	Субсчета71.Добавить(ПланыСчетов.Учетный.НайтиПоКоду("71.02"));
	//Субсчета71.Добавить(ПланыСчетов.Учетный.НайтиПоКоду("71.03");
	Субсчета71Вал  = Новый Массив;
	
	Пока Шапка.Следующий() Цикл
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент    = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.УЧ_АвансовыйОтчет.ПФ_MXL_АвансовыйОтчет");
		
		// ТИТУЛЬНЫЙ ЛИСТ
		ЗапросТитул = Новый Запрос();
		Если Шапка.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
			ЗапросТитул.УстановитьПараметр("Субсчета71", Субсчета71Вал);
		Иначе
			ЗапросТитул.УстановитьПараметр("Субсчета71", Субсчета71);
		КонецЕсли;
		
		ЗапросТитул.УстановитьПараметр("Сотрудник",     Шапка.ПодотчетноеЛицо);
		ЗапросТитул.УстановитьПараметр("Предприятие",   Шапка.Предприятие);
		ЗапросТитул.УстановитьПараметр("ДатаИтогов",    Шапка.МоментВремени);
		ЗапросТитул.УстановитьПараметр("Подразделение", Шапка.ПодразделениеОрганизации);
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК Счет,
		|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокДт, 0) КАК СуммаОстатокДт,
		|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокКт, 0) КАК СуммаОстатокКт
		|ИЗ
		|	РегистрБухгалтерии.Учетный.Остатки(
		|			&ДатаИтогов,
		|			Счет В (&Субсчета71),
		|			,
		|			Предприятия = &Предприятие
		|				И Субконто1 = &Сотрудник
		|				И Подразделение = &Подразделение) КАК ХозрасчетныйОстатки";
		
		//Если НЕ БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
		//	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И Подразделение = &Подразделение", "");
		//КонецЕсли;
		
		ЗапросТитул.Текст = ТекстЗапроса;
		ПредыдущийАванс = ЗапросТитул.Выполнить();
		Если ПредыдущийАванс.Пустой() Тогда
			Перерасход = 0;
			Остаток    = 0;
		Иначе
			ПредыдущийАвансВыборка = ПредыдущийАванс.Выбрать();
			ПредыдущийАвансВыборка.Следующий();
			
			Перерасход = ПредыдущийАвансВыборка.СуммаОстатокКт;
			Остаток    = ПредыдущийАвансВыборка.СуммаОстатокДт;
		КонецЕсли;
		
		////ДанныеВал  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Шапка.ВалютаДокумента, Шапка.ДатаДокумента);
		
		//Если НЕ ЗначениеЗаполнено(ДанныеВал.Кратность) Тогда
		//	ДанныеВал.Кратность = 1;
		//КонецЕсли;
		
		//Если НЕ ЗначениеЗаполнено(ДанныеВал.Курс) Тогда
		//	ДанныеВал.Курс = 1;
		//КонецЕсли;
		
		Если Перерасход <> 0 Тогда
			СуммаДоДокумента = - Перерасход;
		ИначеЕсли Остаток <> 0 Тогда
			СуммаДоДокумента = Остаток;
		Иначе
			СуммаДоДокумента = 0;
		КонецЕсли;
		
		ПолученоИзКассы = 0;
		ПолученоИзКассыПоКартам = 0;
		
		//ДокументыАвансов.Сбросить();
		//Пока ДокументыАвансов.НайтиСледующий(Новый Структура("АвансовыйОтчет", Шапка.Ссылка)) Цикл
		//	ДобавленнаяСумма = ?(ЗначениеЗаполнено(ДокументыАвансов.Сумма), ДокументыАвансов.Сумма, 0);
		//	Если ДокументыАвансов.ТипДокумента = "КАССА" Тогда
		//		ПолученоИзКассы = ПолученоИзКассы + ДобавленнаяСумма;
		//	Иначе
		//		ПолученоИзКассыПоКартам = ПолученоИзКассыПоКартам + ДобавленнаяСумма;
		//	КонецЕсли;
		//КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Титул");
		
		//КурсДока = ЗаполнениеДокументов.КурсДокумента(Шапка.Ссылка, ВалютаРегламентированногоУчета);
		//КратДока = ЗаполнениеДокументов.КратностьДокумента(Шапка.Ссылка, ВалютаРегламентированногоУчета);
		КурсДока = 1;
		КратДока = 1;
		КурсоваяРазница = 0;
		
		//Если Шапка.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
		//	ОбластьМакета.Параметры.ПредставлениеВалютыДокумента   = Шапка.ПредставлениеВалюты;
		//	ОбластьМакета.Параметры.ПолученоИзКассыВВалюте         = ПолученоИзКассы;
		//	ОбластьМакета.Параметры.ПолученоИзКассыВВалютеПоКартам = ПолученоИзКассыПоКартам;
		//	ПолученоИзКассы         = ?(КратДока <> 0, Окр(ПолученоИзКассы * КурсДока / КратДока, 2), 0);
		//	ПолученоИзКассыПоКартам = ?(КратДока <> 0, Окр(ПолученоИзКассыПоКартам * КурсДока / КратДока, 2), 0);
		//	
		//	ЗапросПоВалютнымПроводкам.Сбросить();
		//	Если ЗапросПоВалютнымПроводкам.НайтиСледующий(Новый Структура("Регистратор", Шапка.Ссылка)) Тогда
		//		КурсоваяРазница = ЗапросПоВалютнымПроводкам.СуммаДт - ЗапросПоВалютнымПроводкам.СуммаКт;
		//	КонецЕсли;
		//	
		//	// курсовую разницу не разделяем по видам полученных средств
		//	Если ПолученоИзКассы > 0 Тогда
		//		ПолученоИзКассы = ПолученоИзКассы + КурсоваяРазница;
		//	Иначе
		//		ПолученоИзКассыПоКартам = ПолученоИзКассыПоКартам + КурсоваяРазница;
		//	КонецЕсли;
		//	
		//	Израсходовано = Окр(Шапка.СуммаДокумента * КурсДока / КратДока, 2) + КурсоваяРазница;
		//Иначе
			Израсходовано = Шапка.СуммаДокумента;
		//КонецЕсли;
		
		ИтогоПолучено = ПолученоИзКассы + ПолученоИзКассыПоКартам;
		
		СуммаДоДокумента = СуммаДоДокумента - ИтогоПолучено;
		
		//ДанныеПодотчетногоЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Шапка.Организация, Шапка.ПодотчетноеЛицо, Шапка.ДатаДокумента);
		
		ПодотчетноеЛицо   = Шапка.ПодотчетноеЛицо;
		ПодотчетноеЛицоОт = ПодотчетноеЛицо;
		ТабельныйНомер    = "";
		Должность         = "";
		
		// Выводим титульный лист авансового отчета
		ОбластьМакета.Параметры.Заполнить(Шапка);
		Если ЗначениеЗаполнено(Шапка.ПодразделениеСотрудника) Тогда
			ОбластьМакета.Параметры.ПредставлениеПодразделения = Шапка.ПредставлениеПодразделенияСотрудника;
			ОбластьМакета.Параметры.КодПодразделения = Шапка.ПодразделениеСотрудникаКод;
		КонецЕсли; 
		
		ОбластьМакета.Параметры.ПредставлениеПодотчетногоЛица          = ПодотчетноеЛицо;
		ОбластьМакета.Параметры.ПредставлениеПодотчетногоЛицаОт        = ПодотчетноеЛицоОт;
		ОбластьМакета.Параметры.ТабельныйНомер                         = ТабельныйНомер;
		ОбластьМакета.Параметры.ДолжностьПодотчетногоЛицаПредставление = Должность;
		ОбластьМакета.Параметры.НомерДокумента                         = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Ложь);
		ОбластьМакета.Параметры.ПолученоИзКассы                        = ПолученоИзКассы;
		ОбластьМакета.Параметры.ПолученоИзКассыПоКартам                = ПолученоИзКассыПоКартам;
		
		Если СуммаДоДокумента >= 0 Тогда
			ОбластьМакета.Параметры.НачальныйОстаток    =  СуммаДоДокумента;
		Иначе
			ОбластьМакета.Параметры.НачальныйПерерасход = -СуммаДоДокумента;
		КонецЕсли;
		
		ОбластьМакета.Параметры.ИтогоПолучено = ИтогоПолучено;
		ОбластьМакета.Параметры.Израсходовано = Израсходовано;
		ОстатокНаКонец = СуммаДоДокумента + ИтогоПолучено - Израсходовано;
		Если ОстатокНаКонец >= 0  Тогда
			ОбластьМакета.Параметры.КонечныйОстаток    =  ОстатокНаКонец;
		Иначе
			ОбластьМакета.Параметры.КонечныйПерерасход = -ОстатокНаКонец;
		КонецЕсли;
		
		СведенияОбОрганизации    = ПолучитьДанныеОрганизацияПриИзменении(Шапка.Организация, Шапка.ДатаДокумента);
		//ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
		ПредставлениеОрганизации = СведенияОбОрганизации.НаименованиеПолное;
		
		ПодразделениеОтветственныхЛиц =
			?(ЗначениеЗаполнено(Шапка.ПодразделениеСотрудника), Шапка.ПодразделениеСотрудника ,Шапка.ПодразделениеОрганизации);
		
		//Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента, ПодразделениеОтветственныхЛиц);
		Руководитель = СведенияОбОрганизации.Руководитель;
		Бухгалтер    = СведенияОбОрганизации.ГлавныйБухгалтер;
		Кассир       = "";
		
		ДляРасчета   = Шапка.СуммаДокумента * 1 / 1;
		
		ИспСумма     = Окр(ДляРасчета, 2, 1);
		ЦелСумма     = Цел(ИспСумма);
		КопСумма     = Формат((ИспСумма - ЦелСумма) * 100, "ЧЦ=2; ЧН=00; ЧВН=");
		
		ОбластьМакета.Параметры.ИзрасходованоРуб = ЦелСумма;
		ОбластьМакета.Параметры.ИзрасходованоКоп = КопСумма;
		ОбластьМакета.Параметры.ДатаДокумента    = Шапка.ДатаДокумента;
		ОбластьМакета.Параметры.Руководитель     = Руководитель;
		ОбластьМакета.Параметры.ГлавныйБухгалтер = Бухгалтер;
		
		ОбластьМакета.Параметры.ОрганизацияПоОКПО    = СведенияОбОрганизации.КодПоОКПО;
		ОбластьМакета.Параметры.СуммаОтчетаПрописью  = ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(
			ИспСумма) + " (" + ЦелСумма + " руб. " + КопСумма + " коп.)";
		ОбластьМакета.Параметры.КоличествоДокументов = Шапка.КоличествоДокументов;
		ОбластьМакета.Параметры.КоличествоЛистов     = Шапка.КоличествоЛистов;
		
		ОбластьМакета.Параметры.ПредставлениеОрганизации           = ПредставлениеОрганизации;
		ОбластьМакета.Параметры.ПредставлениеГлавногоБухгалтера    = Бухгалтер;
		ОбластьМакета.Параметры.Кассир                             = Кассир;
		ОбластьМакета.Параметры.РуководительПредставление          = Руководитель;
		ОбластьМакета.Параметры.ДолжностьРуководителяПредставление = СведенияОбОрганизации.РуководительДолжность;
		
		Счетчик = 0;
		ВыборкаПроводок.Сбросить();
		Пока ВыборкаПроводок.НайтиСледующий(Новый Структура("Регистратор", Шапка.Ссылка)) Цикл
			Счетчик = Счетчик + 1;
			ОбластьМакета.Параметры["СубСчетДебет"  + Счетчик] = ВыборкаПроводок.СчетДт;
			ОбластьМакета.Параметры["СуммаДебет"    + Счетчик] = ВыборкаПроводок.Сумма;
			ОбластьМакета.Параметры["СубСчетКредит" + Счетчик] = ВыборкаПроводок.СчетКт;
			ОбластьМакета.Параметры["СуммаКредит"   + Счетчик] = ВыборкаПроводок.Сумма;
			
			// Регламентированная форма АО-1 предусматривает только 8 строк для вывода Бухгалтерских записей
			Если Счетчик = 8 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		// ОБОРОТНАЯ СТОРОНА
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим табличные части
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		НомерСтроки   = 0;
		
		ИтогоПоОтчету        = 0;
		ИтогоПоОтчетуВВалюте = 0;
		
		ВыборкаПоТоварам.Сбросить();
		Пока ВыборкаПоТоварам.НайтиСледующий(Новый Структура("Ссылка", Шапка.Ссылка)) Цикл
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаПоТоварам);
			НомерСтроки = НомерСтроки + 1;
			ОбластьМакета.Параметры.НомерСтроки         = НомерСтроки;
			ОбластьМакета.Параметры.ДокументДата        = ВыборкаПоТоварам.ДокументДата;
			ОбластьМакета.Параметры.НаименованиеРасхода = СокрЛП(ВыборкаПоТоварам.НаименованиеРасхода);
			ОбластьМакета.Параметры.ДебетСубСчета 		= "";
			
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("Поставщик",           ВыборкаПоТоварам.Поставщик);
			СтруктураПоиска.Вставить("ДокументНомер",       ВыборкаПоТоварам.ДокументНомер);
			СтруктураПоиска.Вставить("ДокументДата",        ВыборкаПоТоварам.ДокументДата);
			СтруктураПоиска.Вставить("НаименованиеРасхода", ВыборкаПоТоварам.НаименованиеРасхода);
			СтруктураПоиска.Вставить("Ссылка",              Шапка.Ссылка);
			
			ВыборкаСчетов.Сбросить();
			Пока ВыборкаСчетов.НайтиСледующий(СтруктураПоиска) Цикл
				ОбластьМакета.Параметры.ДебетСубСчета = ОбластьМакета.Параметры.ДебетСубСчета
					+ ?(ПустаяСтрока(ОбластьМакета.Параметры.ДебетСубСчета), "", ", ")
					+ ВыборкаСчетов.Счет;
			КонецЦикла;
			
			Сумма = ВыборкаПоТоварам.ПоОтчету;
			
			ОбластьМакета.Параметры.ПоОтчету = Сумма;
			ОбластьМакета.Параметры.ПоУчету  = Сумма;
			
			ИтогоПоОтчету = ИтогоПоОтчету + Сумма;
			
			//Если Шапка.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
			//	
			//	СуммаВВалюте = ВыборкаПоТоварам.ПоОтчетуВВалюте;
			//	
			//	ОбластьМакета.Параметры.ПоУчетуВВалюте  = СуммаВВалюте;
			//	ОбластьМакета.Параметры.ПоОтчетуВВалюте = СуммаВВалюте;
			//	
			//	ИтогоПоОтчетуВВалюте = ИтогоПоОтчетуВВалюте + СуммаВВалюте;
			//	
			//КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЦикла;
		
		СчетЗатратСуточные = ПланыСчетов.Учетный.НайтиПоКоду("25");
		
		ШаблонНаименованияРасхода = НСтр("ru='Авансовый отчет (%1)'");
		ШаблонОписанияСуточныхВПределахНорм = НСтр("ru='суточные %1'");
		ШаблонОписанияСуточныхСверхНорм = НСтр("ru='суточные %1 сверх нормы'");
		
		//Пока ВыборкаСуточные.НайтиСледующий(Новый Структура("Ссылка", Шапка.Ссылка)) Цикл
		//	
		//	ОписаниеСуточных = СтрШаблон(
		//		ШаблонОписанияСуточныхВПределахНорм,
		//		?(ВыборкаСуточные.ЗаРубежом, НСтр("ru='за рубежом'"), НСтр("ru='по России'")));
		//					
		//	НаименованиеРасхода = СтрШаблон(ШаблонНаименованияРасхода, СокрЛП(ОписаниеСуточных));
		//		
		//	НомерСтроки = НомерСтроки + 1;
		//	ОбластьМакета.Параметры.НомерСтроки         = НомерСтроки;
		//	ОбластьМакета.Параметры.ДокументДата        = Шапка.ДатаДокумента;
		//	ОбластьМакета.Параметры.ДокументНомер       = Шапка.Номер;
		//	ОбластьМакета.Параметры.НаименованиеРасхода = НаименованиеРасхода;
		//	ОбластьМакета.Параметры.ДебетСубСчета 		= СчетЗатратСуточные;
		//				
		//	Сумма = ВыборкаСуточные.СуммаВПределахНормы;
		//	
		//	ОбластьМакета.Параметры.ПоОтчету = Сумма;
		//	ОбластьМакета.Параметры.ПоУчету  = Сумма;
		//	
		//	ИтогоПоОтчету = ИтогоПоОтчету + Сумма;
		//				
		//	ТабличныйДокумент.Вывести(ОбластьМакета);
		//	
		//	// Выведем строку суточных сверх нормы
		//	Если ВыборкаСуточные.СуммаСверхНормы > 0 Тогда
		//		
		//		ОписаниеСуточных = СтрШаблон(
		//			ШаблонОписанияСуточныхСверхНорм,
		//			?(ВыборкаСуточные.ЗаРубежом, НСтр("ru='за рубежом'"), НСтр("ru='по России'")));
		//							
		//		НаименованиеРасхода = СтрШаблон(ШаблонНаименованияРасхода, СокрЛП(ОписаниеСуточных));
		//		
		//		НомерСтроки = НомерСтроки + 1;
		//		ОбластьМакета.Параметры.НомерСтроки         = НомерСтроки;
		//		ОбластьМакета.Параметры.ДокументДата        = Шапка.ДатаДокумента;
		//		ОбластьМакета.Параметры.ДокументНомер       = Шапка.Номер;
		//		ОбластьМакета.Параметры.НаименованиеРасхода = НаименованиеРасхода;
		//		ОбластьМакета.Параметры.ДебетСубСчета 		= СчетЗатратСуточные;
		//					
		//		Сумма = ВыборкаСуточные.СуммаСверхНормы;
		//		
		//		ОбластьМакета.Параметры.ПоОтчету = Сумма;
		//		ОбластьМакета.Параметры.ПоУчету  = Сумма;
		//		
		//		ИтогоПоОтчету = ИтогоПоОтчету + Сумма;
		//					
		//		ТабличныйДокумент.Вывести(ОбластьМакета);
		//		
		//	КонецЕсли;	
		//	
		//КонецЦикла;	
		
		// Выводим подвал авансового отчета
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеПодотчетногоЛица = ПодотчетноеЛицо;
		ОбластьМакета.Параметры.ИтогоПоОтчету        = ИтогоПоОтчету;
		ОбластьМакета.Параметры.ИтогоПоОтчетуВВалюте = ИтогоПоОтчетуВВалюте;
		ОбластьМакета.Параметры.ИтогоПоУчету         = ИтогоПоОтчету;
		ОбластьМакета.Параметры.ИтогоПоУчетувВалюте  = ИтогоПоОтчетуВВалюте;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// В табличном документе зададим имя области, в которую был
		// выведен объект. Нужно для возможности печати покомплектно
		СписокОбъектов = Новый СписокЗначений;
		СписокОбъектов.ЗагрузитьЗначения(МассивОбъектов);
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент,
			НомерСтрокиНачало, СписокОбъектов, Шапка.Ссылка);
		
	КонецЦикла;
	
	//Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьДанныеДокументов(МассивДокументов)
	
	СтруктураВозврата = Новый Структура("НачалоПериода, ОкончаниеПериода, Организации, ЕстьВалютные",
		Дата(1, 1, 1), Дата(1, 1, 1), Справочники.Организации.ПустаяСсылка(), Ложь);
	Если ТипЗнч(МассивДокументов) <> Тип("Массив") ИЛИ МассивДокументов.Количество() = 0 Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("ВалютаРегУчета",   ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(АвансовыйОтчет.Дата) КАК НачалоПериода,
	|	МАКСИМУМ(АвансовыйОтчет.Дата) КАК ОкончаниеПериода
	|ИЗ
	|	Документ.УЧ_АвансовыйОтчет КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.Ссылка В(&МассивДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АвансовыйОтчет.Организация КАК Организации
	|ИЗ
	|	Документ.УЧ_АвансовыйОтчет КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.Ссылка В(&МассивДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	АвансовыйОтчет.Ссылка
	|ИЗ
	|	Документ.УЧ_АвансовыйОтчет КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.Ссылка В(&МассивДокументов)
	|	И Ложь";
	
	Пакет = Запрос.ВыполнитьПакет();
	
	ВыборкаДата = Пакет[0].Выбрать();
	Если ВыборкаДата.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, ВыборкаДата);
	КонецЕсли;
	
	Если НЕ Пакет[1].Пустой() Тогда
		СтруктураВозврата.Вставить("Организации", Пакет[1].Выгрузить().ВыгрузитьКолонку("Организации"));
	КонецЕсли;
	
	СтруктураВозврата.Вставить("ЕстьВалютные", НЕ Пакет[2].Пустой());
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ПолучитьДанныеОрганизацияПриИзменении(Организация, Дата = '00010101')
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("НаименованиеПолное", ?(Организация.НаименованиеПолное = "", Организация.Наименование, Организация.НаименованиеПолное));
	СтруктураДанные.Вставить("КодОКАТО", Организация.КодПоОКАТО);
	СтруктураДанные.Вставить("КодПоОКПО", Организация.КодПоОКАТО);
	СтруктураДанные.Вставить("БанковскийСчет", Организация.ОсновнойБанковскийСчет);
	Если ПустаяСтрока(СтруктураДанные.БанковскийСчет) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	БанковскиеСчета.Ссылка
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.Владелец = &Владелец
		|
		|УПОРЯДОЧИТЬ ПО
		|	БанковскиеСчета.Код";
		
		Запрос.УстановитьПараметр("Владелец", Организация);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			СтруктураДанные.Вставить("БанковскийСчет", Выборка.Ссылка);	   
		КонецЕсли;		
		
	КонецЕсли;
	
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо КАК ОтветственноеЛицо,
	                |	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо,
	                |	ОтветственныеЛицаОрганизацийСрезПоследних.Должность КАК Должность
	                |ИЗ
	                |	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&Дата, СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаОрганизацийСрезПоследних";
	 
	 Запрос.УстановитьПараметр("Организация", Организация);
	 Запрос.УстановитьПараметр("Дата", Дата);
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Пока Выборка.Следующий() Цикл
		 Если Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер Тогда
			 СтруктураДанные.Вставить("ГлавныйБухгалтер", Выборка.ФизическоеЛицо);
			 СтруктураДанные.Вставить("ГлавныйБухгалтерДолжность", Выборка.Должность);
		 ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда
			 СтруктураДанные.Вставить("Руководитель", Выборка.ФизическоеЛицо);
			 СтруктураДанные.Вставить("РуководительДолжность", Выборка.Должность);	 
		 КонецЕсли; 
		 
	КонецЦикла;
	
	Если НЕ СтруктураДанные.Свойство("ГлавныйБухгалтер") Тогда
		СтруктураДанные.Вставить("ГлавныйБухгалтер", Неопределено);
		СтруктураДанные.Вставить("ГлавныйБухгалтерДолжность", Неопределено);
	КонецЕсли;
	Если НЕ СтруктураДанные.Свойство("Руководитель") Тогда
		СтруктураДанные.Вставить("Руководитель", Неопределено);
		СтруктураДанные.Вставить("РуководительДолжность", Неопределено);
	КонецЕсли;
	СтруктураДанные.Вставить("ТекстКорреспондента", Организация.ОсновнойБанковскийСчет.ТекстКорреспондента);
	СтруктураДанные.Вставить("ИННПлательщика", Организация.ИНН);
	СтруктураДанные.Вставить("КПППлательщика", Организация.КПП);
	СтруктураДанные.Вставить("ЭтоФизЛицо", Перечисления.ЮрФизЛицо.ФизЛицо);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()


