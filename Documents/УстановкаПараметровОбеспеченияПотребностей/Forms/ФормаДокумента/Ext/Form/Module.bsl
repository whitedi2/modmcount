
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	БюджетныйНаСервере.ДействияПриСозданииФормыДокумента(ЭтаФорма);
	
	ИнициализироватьКомпоновкуДанных(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКомпоновкуДанных(ВсегдаИспользоватьНастройкиПоУмолчанию)
	
	СхемаКомпоновкиДанных = Документы.УстановкаПараметровОбеспеченияПотребностей.ПолучитьМакет("МакетЗаполнения");
	
	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	
	Отбор.Инициализировать(ИсточникНастроек);
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекНастройки = ТекОбъект.Отбор.Получить();
	Если ТекНастройки = Неопределено
		Или ВсегдаИспользоватьНастройкиПоУмолчанию Тогда
		Отбор.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	Иначе
		Отбор.ЗагрузитьНастройки(ТекНастройки);
	КонецЕсли;
	
	Отбор.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.Отбор = Новый ХранилищеЗначения(Отбор.Настройки, Новый СжатиеДанных(9));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеПараметраНастроек(Настройки, ИмяПараметра, Значение)
	
	Параметр = Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
	
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = Значение;
		Параметр.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОтборуНаСервере()

	СхемаКомпоновкиДанных = Документы.УстановкаПараметровОбеспеченияПотребностей.ПолучитьМакет("МакетЗаполнения");
	
	УстановитьЗначениеПараметраНастроек(Отбор.Настройки, "Предприятие", Объект.Предприятие);
	УстановитьЗначениеПараметраНастроек(Отбор.Настройки, "Подразделение", Объект.Подразделение);
	УстановитьЗначениеПараметраНастроек(Отбор.Настройки, "Склад", Объект.Склад);
	УстановитьЗначениеПараметраНастроек(Отбор.Настройки, "Период", ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()));

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Отбор.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Объект.Товары.Загрузить(ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОтбору(Команда)
	
	Если Объект.Товары.Количество() > 0 Тогда
		Ответ = Вопрос("Табличная часть будет очищена, продолжить?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Объект.Товары.Очистить();
			ЗаполнитьПоОтборуНаСервере();
		КонецЕсли;	
	Иначе	
		ЗаполнитьПоОтборуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		СтрокаТовары.Выбрано = Истина;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		СтрокаТовары.Выбрано = Ложь;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНормуПотребления(Команда)
	
	Значение = 0;
	
	ВвестиЧисло(Значение, , 15, 3);
	
	Если Значение <> 0 Тогда
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			Если СтрокаТовары.Выбрано Тогда
				СтрокаТовары.НормаПотребления = Значение;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМинимальныйСтраховойЗапас(Команда)
	
	Значение = 0;
	
	ВвестиЧисло(Значение, , 15, 3);
	
	Если Значение <> 0 Тогда
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			Если СтрокаТовары.Выбрано Тогда
				СтрокаТовары.МинимальныйЗапас = Значение;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМаксимальныйЗапас(Команда)
	
	Значение = 0;
	
	ВвестиЧисло(Значение, , 15, 3);
	
	Если Значение <> 0 Тогда
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			Если СтрокаТовары.Выбрано Тогда
				СтрокаТовары.МаксимальныйЗапас = Значение;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМетодОбеспечения(Команда)
	
	Список = Новый СписокЗначений;
	ЗаполнитьСписокПеречисленияМетодовОбеспечения(Список);
	
	ВыбранноеЗначение = ВыбратьИзМеню(Список, Элементы.ОтборНастройкиОтбор);
	
	Если Не ВыбранноеЗначение = Неопределено Тогда
		ВыбранноеПеречисление = ВернутьПеречислениеМетодОбеспечения(ВыбранноеЗначение.Значение);
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			Если СтрокаТовары.Выбрано Тогда
				СтрокаТовары.МетодОбеспечения = ВыбранноеПеречисление;
			КонецЕсли;	
		КонецЦикла;			
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьПеречислениеМетодОбеспечения(ИмяПеречисления)

	Возврат Перечисления.МетодыОбеспеченияПотребностей[ИмяПеречисления];	
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьСписокПеречисленияМетодовОбеспечения(Список)
	
	Для Каждого ТекПеречисление Из Метаданные.Перечисления.МетодыОбеспеченияПотребностей.ЗначенияПеречисления Цикл
		Список.Добавить(ТекПеречисление.Имя, ТекПеречисление.Синоним);
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗаполнитьСпособОбеспечения(Команда)
	
	ВыбранноеЗначение = ОткрытьФормуМодально("Справочник.СпособыОбеспеченияПотребностей.ФормаВыбора");
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			Если СтрокаТовары.Выбрано Тогда
				СтрокаТовары.СпособОбеспечения = ВыбранноеЗначение;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеПриИзменении(Элемент)
	
	сабОбщегоНазначенияКлиентСервер.СкрытьПодразделения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзEXCEL(Команда)
	
	ПутьКФайлу = ОткрытьФормуМодально("Документ.УстановкаПараметровОбеспеченияПотребностей.Форма.ФормаЗагрузки");
	
	Если ЗначениеЗаполнено(ПутьКФайлу) Тогда
		Данные = Неопределено;
		СоответствиеНоменклатур = Новый Соответствие;
		
		ЧислоСтрок = 0;
		КоличествоСтраниц = 1;
		
		XLSОбъект = Новый COMОбъект("Excel.Application");
		ПодключениеКФайлу(ЧислоСтрок, Данные, XLSОбъект, ПутьКФайлу);
		
		НомерЗаказа = "";
		СтруДок = Новый Структура;
		МассивСтрок = Новый Массив;
		ДатаДок = Неопределено;
		ВремяНачала = ТекущаяДата();
		ОсталосьВремени = 0;
		СкоростьЗагрузки = 0;
		Для счСтроки = 1 по ЧислоСтрок Цикл
			Состояние("Загрузка", счСтроки / ЧислоСтрок * 100);
			СтруктураСтроки = Новый Структура;
			КодНоменклатуры = СтрЗаменить(СтрЗаменить(Данные[0][счСтроки], " ", ""), Символы.НПП, "");
			ТекНоменклатура = НайтиНоменклатуру(КодНоменклатуры);
			Если Не ЗначениеЗаполнено(ТекНоменклатура) Тогда
				Сообщить("Номенклатура с кодом " + КодНоменклатуры + " не найдена");
				Продолжить;
			КонецЕсли;	
			СтруктураСтроки.Вставить("Номенклатура", ТекНоменклатура); 
			СтруктураСтроки.Вставить("МинимальныйЗапас", ?(СокрЛП(Данные[1][счСтроки]) = "", 0, Число(Данные[1][счСтроки])));
			СтруктураСтроки.Вставить("КратностьПоставки", ?(СокрЛП(Данные[2][счСтроки]) = "", 0, Число(Данные[2][счСтроки])));
			СтруктураСтроки.Вставить("ЗаказВОфисе", СокрЛП(Данные[3][счСтроки]));
			СтруктураСтроки.Вставить("Подразделение", НайтиПодразделение(СокрЛП(Данные[4][счСтроки])));
			НоваяСтрокаТоваров = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТоваров, СтруктураСтроки);
			НоваяСтрокаТоваров.МетодОбеспечения = ПредопределенноеЗначение("Перечисление.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаНаСрокПоСтатистике");
		КонецЦикла;
		XLSОбъект.Application.Quit();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПодключениеКФайлу(ЧислоСтрок, Данные, XLSОбъект = Неопределено, ПутьКФайлу)
	
	Если Не ЗначениеЗаполнено(ПутьКФайлу) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Укажите путь к файлу!";
		Сообщение.Поле = "Файл";
		Сообщение.Сообщить(); 	
		Возврат;
	КонецЕсли;
	
	Если НЕ ПутьКФайлу = Неопределено Тогда
		Если XLSОбъект = Неопределено Тогда
			XLSОбъект = Новый COMОбъект("Excel.Application");
		КонецЕсли;
		XLSОбъект.Visible       = Ложь;
		XLSОбъект.DisplayAlerts = Ложь;
		
		Попытка
			Book = XLSОбъект.Workbooks.Open(ПутьКФайлу, , Истина);
		Исключение
			Сообщить ("Проблемы с подключением к Excel" );
		КонецПопытки;
		
		Лист = Book.Sheets(1);
		КонечнаяСтрока = Лист.Cells.SpecialCells(11).Row;
		ЧислоСтрок = КонечнаяСтрока - 1;
		Область = Лист.Range(Лист.Cells(1,1), Лист.Cells(КонечнаяСтрока,40));	
		Данные = Область.Value.Выгрузить();
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция НайтиНоменклатуру(Номер)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Код = &Код
	|	И НЕ Номенклатура.ЭтоГруппа";
	Запрос.УстановитьПараметр("Код", Номер);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;			
	КонецЦикла;
	
	Возврат Справочники.Номенклатура.ПустаяСсылка();
	
КонецФункции	

&НаСервереБезКонтекста
Функция НайтиПодразделение(Код)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктураПредприятия.Ссылка
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|ГДЕ
	|	СтруктураПредприятия.Код = &Код";
	Запрос.УстановитьПараметр("Код", Код);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;			
	КонецЦикла;
	
	Возврат Справочники.СтруктураПредприятия.ПустаяСсылка();
	
КонецФункции	

&НаСервере
Процедура ДозаполнитьПрошлымиЗначениямиНаСервере()

	ТаблицаТовары = Объект.Товары.Выгрузить();
	
	ТаблицаПодразделений = ТаблицаТовары.Скопировать(, "Подразделение");
	ТаблицаПодразделений.Свернуть("Подразделение");
	
	ТаблицаНоменклатур = ТаблицаТовары.Скопировать(, "Номенклатура");
	ТаблицаНоменклатур.Свернуть("Номенклатура");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПараметрыОбеспеченияПотребностиСрезПоследних.Подразделение,
	|	ПараметрыОбеспеченияПотребностиСрезПоследних.Номенклатура,
	|	ПараметрыОбеспеченияПотребностиСрезПоследних.МетодОбеспечения,
	|	ПараметрыОбеспеченияПотребностиСрезПоследних.СпособОбеспечения,
	|	ПараметрыОбеспеченияПотребностиСрезПоследних.НормаПотребления,
	|	ПараметрыОбеспеченияПотребностиСрезПоследних.МинимальныйЗапас,
	|	ПараметрыОбеспеченияПотребностиСрезПоследних.МаксимальныйЗапас,
	|	ПараметрыОбеспеченияПотребностиСрезПоследних.Упаковка,
	|	ПараметрыОбеспеченияПотребностиСрезПоследних.СрокИсполнения,
	|	ПараметрыОбеспеченияПотребностиСрезПоследних.КратностьПоставки,
	|	ПараметрыОбеспеченияПотребностиСрезПоследних.ЗаказВОфисе
	|ИЗ
	|	РегистрСведений.ПараметрыОбеспеченияПотребности.СрезПоследних(
	|			&Дата,
	|			НЕ Регистратор = &Ссылка
	|				И Предприятие = &Предприятие
	|				И Подразделение В ИЕРАРХИИ (&Подразделения)
	|				И Номенклатура В (&Номенклатуры)
	|				И (&Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|					ИЛИ Склад = &Склад)) КАК ПараметрыОбеспеченияПотребностиСрезПоследних";
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("Предприятие", Объект.Предприятие);
	Запрос.УстановитьПараметр("Подразделения", ТаблицаПодразделений.ВыгрузитьКолонку("Подразделение"));
	Запрос.УстановитьПараметр("Номенклатуры", ТаблицаНоменклатур.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	ТаблицаПараметров = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		Если СтрокаТовары.Подразделение.Наименование = "Магазины" Тогда
			НайденныеСтроки = ТаблицаПараметров.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТовары.Номенклатура));	
		Иначе	
			НайденныеСтроки = ТаблицаПараметров.НайтиСтроки(Новый Структура("Подразделение, Номенклатура", СтрокаТовары.Подразделение, СтрокаТовары.Номенклатура));	
		КонецЕсли;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(СтрокаТовары, НайденнаяСтрока,,"Подразделение, Номенклатура");
			Прервать;
		КонецЦикла;	
	КонецЦикла;	
		
КонецПроцедуры

&НаКлиенте
Процедура ДозаполнитьПрошлымиЗначениями(Команда)
	ДозаполнитьПрошлымиЗначениямиНаСервере();
КонецПроцедуры
