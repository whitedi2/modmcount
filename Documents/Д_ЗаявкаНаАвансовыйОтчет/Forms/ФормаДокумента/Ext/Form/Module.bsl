&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Автор = ПараметрыСеанса.ТекущийПользователь;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.ФизическоеЛицо.Пользователь = &Пользователь";
		Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Объект.ПодотчетноеЛицо = Выборка.Ссылка;
		КонецЦикла;
		
	КонецЕсли;

	БюджетныйНаСервере.ДействияПриСозданииФормыДокумента(ЭтаФорма);
	сабОбщегоНазначения.ОбновитьКоличествоПрикрепленныхФайловСервер(ЭтаФорма);
	ЗаполнитьСписокЗаявокНаСервере();
	ЗаполнитьСписокСтрокНаСервере();
	ЗаполнитьДоступностьПредприятий();
	
	ЕстьБП = Ложь;
	ТекДоступность = Ложь;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекБП = БПСервер.НайтиТекущийБПСервер(Объект.Ссылка);
		Если НЕ ТекБП = Неопределено Тогда
			ЕстьБП = Истина;
			ТекБПСтруРекв = БюджетныйНаСервере.ВернутьРеквизиты(ТекБП, "ОснованиеЗаблокирован, Стартован, ОтправлятьВсем");
			
			ТекДоступность = ТекБПСтруРекв.ОснованиеЗаблокирован;
			Если ТекДоступность = Неопределено Тогда
				ТекДоступность = ТекБПСтруРекв.Стартован;
			КонецЕсли;
			БюджетныйНаСервере.ФормаТолькоПросмотр(Объект, ЭтаФорма, ТекДоступность);
			
		КонецЕсли;
	Иначе
		ТекБП = Неопределено;
		ТекБПСтруРекв = Новый Структура;
		ВсемСразу = Неопределено;
	КонецЕсли;
	
	Если Не Элементы.Найти("ФормаДокументД_ЗаявкаНаАвансовыйОтчетСогласовать") = Неопределено Тогда
		Элементы.ФормаДокументД_ЗаявкаНаАвансовыйОтчетСогласовать.Видимость = Не ЕстьБП;
	КонецЕсли;
	Элементы.ФормаЗаписатьИЗакрыть.Видимость = ЕстьБП;
	Элементы.ФормаЗаписатьИЗакрыть.КнопкаПоУмолчанию = ЕстьБП;
	
	ИзрасходованоУУ = Объект.Затраты.Итог("Сумма");
	ИзрасходованоБУ = Объект.Затраты.Итог("СуммаБУ");
	ПересчитатьПолученоПО(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	ПредприятиеПриИзменении(Неопределено);
	БезЗаявкиНаОплатуПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ЗакрытьФорму" Тогда
		Закрыть();
	ИначеЕсли ИмяСобытия = "УстановитьДоступность" Тогда
		Объект.ТекущийБизнесПроцесс = Параметр.ТекущийБизнесПроцесс;
		Записать();
	ИначеЕсли ИмяСобытия = "Пересчитать" Тогда
		Закрыть();
	ИначеЕсли ИмяСобытия = "ПрикрепленныеФайлы" Тогда
		сабОбщегоНазначенияКлиент.ОбновитьКоличествоПрикрепленныхФайлов(ЭтаФорма);
	ИначеЕсли ИмяСобытия = "ОбновитьУИДВЗАявке" Тогда	
		Объект.УИДСтрокиДокОснования = Параметр;
	ИначеЕсли ИмяСобытия = "ВыбраныСтрокиЗаявки" Тогда	
		ЗаполнитьТЧСтрок(Параметр);
	ИначеЕсли ИмяСобытия = "РазрешитьРедактированиеФормы" Тогда	
		ПриОткрытии(Ложь);
	КонецЕсли;
	ПриОткрытии(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТЧСтрок(МассивУИДов)
	Объект.СтрокиЗаявкиНаОплату.Очистить();
	Для каждого ТекСтрока Из МассивУИДов Цикл
		НоваяСтрока = Объект.СтрокиЗаявкиНаОплату.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		Модифицированность = Истина;
	КонецЦикла;
	Если МассивУИДов.Количество() > 1 Тогда
		Объект.УИДСтрокиДокОснования = "Несколько строк...";
	ИначеЕсли МассивУИДов.Количество() = 1 Тогда
		Объект.УИДСтрокиДокОснования = ТекСтрока.УИДСтрокиДокОснования;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	//проверяем заполнение в форме
	Если НЕ Объект.БезЗаявкиНаОплату Тогда
		Если Не ЗначениеЗаполнено(СписокДокОснование) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Не заполнен реквизит ""Заявки на оплату"".",
			,
			"СписокДокОснование",
			,
			Отказ);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.УИДСтрокиДокОснования) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Не заполнен реквизит ""Строка Заявки на оплату"".",
			,
			"УИДСтрокиДокОснования",
			,
			Отказ);
		КонецЕсли;
	КонецЕсли;
			
	Отказ = 1 - ПроверитьЗаполнение();
	
	Если НЕ Объект.УИДСтрокиДокОснования = "Несколько строк..." И ЗначениеЗаполнено(Объект.УИДСтрокиДокОснования) Тогда
		Объект.СтрокиЗаявкиНаОплату.Очистить();
		НоваяСтрока = Объект.СтрокиЗаявкиНаОплату.Добавить();
		НоваяСтрока.УИДСтрокиДокОснования = Объект.УИДСтрокиДокОснования;	
		НоваяСтрока.ДокОснование = СписокДокОснование[0].Значение;	
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Объект.Затраты Цикл
		
		// обращение №567
		//Если Не ЗначениеЗаполнено(ТекСтрока.ИнвПроект) Тогда 
		//	
		//	Если РасчетыБюджет.СтатьяИнв(ТекСтрока.Статья) ИЛИ Строка(ТекСтрока.Статья) = "ПР. УК" Тогда
		//		сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(Объект, "Не заполнено Субконто 2", "Объект.Затраты", ТекСтрока.НомерСтроки, "ИнвПроект", Отказ);
		//	Иначе
		//		ТекСтрока.ИнвПроект = Неопределено;
		//	КонецЕсли;
		//	
		//КонецЕсли;
				
		Если Не ЗначениеЗаполнено(ТекСтрока.Предприятие) Тогда
			
			Если Не БПСервер.ПолучитьКонстантуНаСервере("сабИспользоватьНесколькоПредприятий") Тогда
				ТекСтрока.Предприятие = БюджетныйНаСервере.ПолучитьПредприятие();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВернутьСписокСотрудников()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СотрудникиПредприятия.Ссылка
	|ИЗ
	|	Справочник.Сотрудники.Предприятия КАК СотрудникиПредприятия
	|ГДЕ
	|	СотрудникиПредприятия.Предприятие = &Предприятие";
	Запрос.УстановитьПараметр("Предприятие", Константы.сабПредприятиеКазна.Получить());
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаКлиенте
Процедура ПодотчетноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = Ложь;
	//Форма = ПолучитьФорму("Справочник.Сотрудники.Форма.ФормаВыбора", Новый Структура("ТекущаяСтрока, ТекущееПредприятие, Подотчет", Объект.ПодотчетноеЛицо, Объект.Предприятие, Истина)  , Элемент);
	////СписокПользователей = ВернутьСписокСотрудников();
	////ЭлементОтбора = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	////ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Ссылка");	
	////ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	////ЭлементОтбора.Использование  = Истина;
	////ЭлементОтбора.ПравоеЗначение = СписокПользователей;
	//Форма.Открыть();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступностьПредприятий()
	ТекущийПользовательАвтор = (НЕ ПараметрыСеанса.ДоступныеПользователи.Найти(Объект.Автор) = Неопределено) ИЛИ (НЕ ПараметрыСеанса.ДоступныеПользователи.Найти(Объект.Кассир) = Неопределено);
	ДоступныеПредприятия = ПараметрыСеанса.ДоступныеПредприятия;
	СтатьиИсключение = Документы.Д_ЗаявкаНаАвансовыйОтчет.ПолучитьСтатьиИсключения();
	Для каждого ТекСтрока Из Объект.Затраты Цикл
		ТекСтрока.НеДоступностьПредприятия = (ДоступныеПредприятия.Найти(ТекСтрока.Предприятие) = Неопределено) И НЕ ТекущийПользовательАвтор И ДоступныеПредприятия.Найти(Объект.Предприятие) = Неопределено И СтатьиИсключение.Найти(ТекСтрока.Статья) = Неопределено;
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыКурсПриИзменении(Элемент)
	ТекСтрока = Элементы.Затраты.ТекущиеДанные;
	ТекСтрока.Сумма = ТекСтрока.ВалютнаяСумма * ТекСтрока.Курс;
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыВалютаПриИзменении(Элемент)
	ТекДата = ?(Объект.Ссылка.Пустая(), ТекущаяДата(), Объект.Дата);
	ТекСтрока = Элементы.Затраты.ТекущиеДанные;
	ТекСтрока.Курс = сабРаботаСКурсамиВалют.ЗаполнитьДанныеЛокальногоКурсаДляВалюты(ТекСтрока.Валюта, БюджетныйНаСервере.ВернутьРеквизит(Объект.Предприятие, "ОсновнаяВалютаУчета"), Объект.Дата).ЛокальныйКурс;
	ЗатратыКурсПриИзменении(Элемент);
КонецПроцедуры

&НаСервере
Функция ВернутьПеречисление(Имя)
	
	Возврат Перечисления.ОсновныеДолжностиПредприятия[Имя];	
	
	
КонецФункции // ()


&НаКлиенте
Процедура ПредприятиеПриИзменении(Элемент)
	
	МассивКассиров = Новый Массив;
	Учетчик = БПСервер.ПолучитьСотрудникаПоОсновнойДолжности(Объект.Предприятие, ВернутьПеречисление("Учетчик"));
	Финансист = БПСервер.ПолучитьСотрудникаПоОсновнойДолжности(Объект.Предприятие, ВернутьПеречисление("Финансист"));
	КассирПредприятия = БПСервер.ПолучитьСотрудникаПоОсновнойДолжности(Объект.Предприятие, ВернутьПеречисление("КассирПредприятия"));
	КассирУчетный = БПСервер.ПолучитьСотрудникаПоОсновнойДолжности(Объект.Предприятие, ВернутьПеречисление("КассирУчетный"));
	
	
	Если ЗначениеЗаполнено(КассирУчетный) Тогда
		МассивКассиров.Добавить(КассирУчетный);
		Кассир = КассирУчетный;
	КонецЕсли;
	Если ЗначениеЗаполнено(Учетчик) Тогда
		МассивКассиров.Добавить(Учетчик);
		Если НЕ ЗначениеЗаполнено(Кассир) Тогда
			Кассир = Учетчик;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(Финансист) Тогда
		МассивКассиров.Добавить(Финансист);
		Если НЕ ЗначениеЗаполнено(Кассир) Тогда
			Кассир = Финансист;		
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(КассирПредприятия) Тогда
		МассивКассиров.Добавить(КассирПредприятия);
		Если НЕ ЗначениеЗаполнено(Кассир) Тогда
			Кассир = КассирПредприятия;		
		КонецЕсли;
	КонецЕсли;
	
	Если Элемент <> Неопределено Тогда
		Объект.Кассир = Кассир;
	КонецЕсли;
	
	БюджетныйНаКлиенте.ЗаполнитьСписокРеквизита(ЭтаФорма, "СписокВыбора_Кассир", МассивКассиров, ?(Элемент = Неопределено, Объект.Кассир, ""));
	
	ПредприятиеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПредприятиеПриИзмененииНаСервере()
	сабОбщегоНазначенияКлиентСервер.СкрытьПодразделения(ЭтаФорма);
КонецПроцедуры



&НаКлиенте
Процедура КассирНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Элементы.СписокВыбора_Кассир.СписокВыбора.Количество() Тогда
		ТекЗначение = ВыбратьИзСписка(Элементы.СписокВыбора_Кассир.СписокВыбора, Элемент, Элементы.СписокВыбора_Кассир.СписокВыбора.НайтиПоЗначению(Объект.Кассир));	
		БюджетныйНаКлиенте.ПриНачалеВыбораРеквизитаВСписке(ЭтаФорма, "СписокВыбора_Кассир", ТекЗначение, "Пользователи", Объект.Кассир, СтандартнаяОбработка, Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДокОснованиеПриИзменении(Элемент)
	Объект.УИДСтрокиДокОснования = "";
	ЗаполнитьСписокСтрокНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокСтрокНаСервере()
	Элементы.УИДСтрокиДокОснования.СписокВыбора.Очистить();
	
	КУдалению = Новый Массив;
	Для каждого ТекСтрока Из Объект.СтрокиЗаявкиНаОплату Цикл
		Если СписокДокОснование.НайтиПоЗначению(ТекСтрока.ДокОснование) = Неопределено Тогда
			КУдалению.Добавить(ТекСтрока);		
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого ТекСтрока Из КУдалению Цикл
		Объект.СтрокиЗаявкиНаОплату.Удалить(ТекСтрока);
	КонецЦикла; 
	
	Если ЗначениеЗаполнено(СписокДокОснование) Тогда
		Если НЕ СписокДокОснование.Количество() > 1 Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.УИДСтроки КАК УИДСтроки,
			               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Контрагент КАК Контрагент,
			               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Д_ЗаявкаНаАвансовыйОтчет.Ссылка) КАК ЗаявкаНаАО,
			               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.СтатьяДДС КАК СтатьяДДС,
			               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.СуммаДДС КАК СуммаДДС,
			               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.НазначениеПлатежа КАК НазначениеПлатежа,
			               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.ЦФО КАК ЦФО,
			               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.ВыдачаВПодОтчет КАК ВыдачаВПодОтчет,
			               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.НомерСтроки КАК НомерСтроки,
			               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Подразделение КАК Подразделение
			               |ИЗ
			               |	Документ.Д_ЗаявкаНаОплату.ЗаявкаБезнал КАК Д_ЗаявкаНаОплатуЗаявкаБезнал
			               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Д_ЗаявкаНаАвансовыйОтчет КАК Д_ЗаявкаНаАвансовыйОтчет
			               |		ПО Д_ЗаявкаНаОплатуЗаявкаБезнал.УИДСтроки = Д_ЗаявкаНаАвансовыйОтчет.УИДСтрокиДокОснования
			               |			И Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка = Д_ЗаявкаНаАвансовыйОтчет.ДокОснование
			               |ГДЕ
			               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка В(&ДокОснование)
			               |	И ВЫБОР
			               |			КОГДА &ПоказатьВсеСтрокиГрафика
			               |				ТОГДА ИСТИНА
			               |			ИНАЧЕ Д_ЗаявкаНаАвансовыйОтчет.Ссылка ЕСТЬ NULL
			               |		КОНЕЦ
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.УИДСтроки,
			               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Контрагент,
			               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.СтатьяДДС,
			               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.СуммаДДС,
			               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.НазначениеПлатежа,
			               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.ЦФО,
			               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.ВыдачаВПодОтчет,
			               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.НомерСтроки,
			               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Подразделение
			               |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |ВЫБРАТЬ
			               |	""1"",
			               |	Д_ЗаявкаНаФинансирование.Контрагент,
			               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Д_ЗаявкаНаАвансовыйОтчет.Ссылка),
			               |	Д_ЗаявкаНаФинансирование.СтатьяДДС,
			               |	Д_ЗаявкаНаФинансирование.Сумма,
			               |	Д_ЗаявкаНаФинансирование.НазначениеПлатежа,
			               |	Д_ЗаявкаНаФинансирование.ЦФО,
			               |	Д_ЗаявкаНаФинансирование.ВыдачаВПодОтчет,
			               |	1,
			               |	Д_ЗаявкаНаФинансирование.Подразделение
			               |ИЗ
			               |	Документ.Д_ЗаявкаНаФинансирование КАК Д_ЗаявкаНаФинансирование
			               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Д_ЗаявкаНаАвансовыйОтчет КАК Д_ЗаявкаНаАвансовыйОтчет
			               |		ПО Д_ЗаявкаНаФинансирование.Ссылка = Д_ЗаявкаНаАвансовыйОтчет.ДокОснование
			               |ГДЕ
			               |	Д_ЗаявкаНаФинансирование.Ссылка В(&ДокОснование)
			               |	И ВЫБОР
			               |			КОГДА &ПоказатьВсеСтрокиГрафика
			               |				ТОГДА ИСТИНА
			               |			ИНАЧЕ Д_ЗаявкаНаАвансовыйОтчет.Ссылка ЕСТЬ NULL
			               |		КОНЕЦ
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	Д_ЗаявкаНаФинансирование.Контрагент,
			               |	Д_ЗаявкаНаФинансирование.СтатьяДДС,
			               |	Д_ЗаявкаНаФинансирование.НазначениеПлатежа,
			               |	Д_ЗаявкаНаФинансирование.ЦФО,
			               |	Д_ЗаявкаНаФинансирование.ВыдачаВПодОтчет,
			               |	Д_ЗаявкаНаФинансирование.Подразделение,
			               |	Д_ЗаявкаНаФинансирование.Сумма
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	НомерСтроки";
			
			Запрос.УстановитьПараметр("ДокОснование", СписокДокОснование.ВыгрузитьЗначения());
			Запрос.УстановитьПараметр("ПоказатьВсеСтрокиГрафика", Истина);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Представление = Строка(Выборка.НомерСтроки) + ", "  + Строка(Выборка.ЦФО) + " (" + Строка(Выборка.Подразделение) + "), " + 
				Строка(Выборка.СтатьяДДС) + ", " + Строка(Выборка.СуммаДДС) + ", " + Строка(Выборка.Контрагент) + ", " + Строка(Выборка.НазначениеПлатежа) + " (в п/о: " + Строка(Выборка.ВыдачаВПодОтчет) + ")";
				
				Элементы.УИДСтрокиДокОснования.СписокВыбора.Добавить(Выборка.УИДСтроки, Представление);
				
				
				
			КонецЦикла;
		Иначе
			Объект.УИДСтрокиДокОснования = "Несколько строк..."; 
			
		КонецЕсли;
	//Иначе
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	//	"Не заполнен реквизит ""Заявки на оплату"".",
	//	,
	//	"СписокДокОснование",
	//	,
	//	Отказ);
	//	Возврат;
	КонецЕсли;
	Элементы.УИДСтрокиДокОснования.СписокВыбора.Добавить("Несколько строк...", "Несколько строк...");
КонецПроцедуры

&НаКлиенте
Процедура БезЗаявкиНаОплатуПриИзменении(Элемент)
	//Элементы.Группа6.Доступность = НЕ Объект.БезЗаявкиНаОплату;
	Элементы.ДокОснование.Доступность = НЕ Объект.БезЗаявкиНаОплату;
	Элементы.СписокДокОснование.Доступность = НЕ Объект.БезЗаявкиНаОплату;
	Элементы.УИДСтрокиДокОснования.Доступность = НЕ Объект.БезЗаявкиНаОплату;
	Элементы.ДобавитьЗаявку.Доступность = НЕ Объект.БезЗаявкиНаОплату;
	Если НЕ Элемент = Неопределено Тогда
		Объект.ДокОснование = "";
		СписокДокОснование.Очистить();
		Элементы.УИДСтрокиДокОснования.СписокВыбора.Очистить();
		Объект.СтрокиЗаявкиНаОплату.Очистить();
		Объект.УИДСтрокиДокОснования = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УИДСтрокиДокОснованияОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	МассивСтрок = Новый Массив;
	Для каждого ТекСтрока Из Объект.СтрокиЗаявкиНаОплату Цикл
		МассивСтрок.Добавить(ТекСтрока.УИДСтрокиДокОснования);
	КонецЦикла;
	МассивСтрок.Добавить(Объект.УИДСтрокиДокОснования);
	
	ТекФорма = ПолучитьФорму("Документ.Д_ЗаявкаНаАвансовыйОтчет.Форма.ФормаПодбораСтрокЗаявки", Новый Структура("УИДЫ, Заявка", МассивСтрок, СписокДокОснование)); 
	ТекФорма.ТолькоПросмотр = Истина;
	ТекФорма.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура УИДСтрокиДокОснованияПриИзменении(Элемент)
	Если Объект.УИДСтрокиДокОснования = "Несколько строк..." Тогда
		МассивСтрок = Новый Массив;
		Для каждого ТекСтрока Из Объект.СтрокиЗаявкиНаОплату Цикл
			МассивСтрок.Добавить(ТекСтрока.УИДСтрокиДокОснования);
		КонецЦикла; 
		МассивСтрок.Добавить(Объект.УИДСтрокиДокОснования);
		
		ОткрытьФорму("Документ.Д_ЗаявкаНаАвансовыйОтчет.Форма.ФормаПодбораСтрокЗаявки", Новый Структура("УИДЫ, Заявка", МассивСтрок, СписокДокОснование)); 
	Иначе
		Объект.СтрокиЗаявкиНаОплату.Очистить();
		Если ЗначениеЗаполнено(СписокДокОснование) И ЗначениеЗаполнено(Объект.УИДСтрокиДокОснования) Тогда
			НоваяСтрока = Объект.СтрокиЗаявкиНаОплату.Добавить();
			НоваяСтрока.УИДСтрокиДокОснования = Объект.УИДСтрокиДокОснования;
			НоваяСтрока.ДокОснование = СписокДокОснование[0].Значение;	
		КонецЕсли;
	КонецЕсли;
	ПересчитатьПолученоПО();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокЗаявокНаСервере()
	СписокДокОснование.Очистить();
	Если ЗначениеЗаполнено(Объект.ДокОснование) Тогда
		СписокДокОснование.Добавить(Объект.ДокОснование);
	КонецЕсли;
	Для каждого ТекСтрока Из Объект.СтрокиЗаявкиНаОплату Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ДокОснование) И СписокДокОснование.НайтиПоЗначению(ТекСтрока.ДокОснование) = Неопределено Тогда
			СписокДокОснование.Добавить(ТекСтрока.ДокОснование);			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДокОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
КонецПроцедуры

&НаКлиенте
Процедура СписокДокОснованиеПриИзменении(Элемент)
	ЗаполнитьСписокСтрокНаСервере();
	Элементы.СписокДокОснование.КнопкаОткрытия = (СписокДокОснование.Количество() = 1);
	Модифицированность = Истина;
	ПересчитатьПолученоПО();
КонецПроцедуры

&НаКлиенте
Процедура СписокДокОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//Если СписокДокОснование.Количество() < 2 Тогда //если одна заявка, то сразу выбираем
	//	СтандартнаяОбработка = Ложь;
	//	СтруктураПараметров = Новый Структура("ТекущаяСтрока", ?(СписокДокОснование.Количество(), СписокДокОснование[0].Значение, Неопределено));
	//	ФормаВыбора = ПолучитьФорму("Документ.Д_ЗаявкаНаОплату.Форма.ФормаВыбораСФильтромПодотчетчиков", СтруктураПараметров);
	//	ФормаВыбора.Контрагент						= Объект.ПодотчетноеЛицо;
	//	ФормаВыбора.ИспользоватьФильтрКонтрагент 	= Истина;
	//	ФормаВыбора.ВыборПодотчетчика 				= Истина;
	//	ТекЗаявка = ФормаВыбора.ОткрытьМодально();
	//	Отказ = Не ПроверитьЗаявкуНаОплату(ТекЗаявка);
	//	Если Отказ Тогда
	//		ТекстСообщения = "Прикреплять можно только согласованные заявки на оплату";
	//		сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(Объект, ТекстСообщения);
	//		Возврат
	//	КонецЕсли;
	//	
	//КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаявку(Команда)
	СтруктураПараметров = Новый Структура("ТекущаяСтрока", ?(СписокДокОснование.Количество(), СписокДокОснование[0].Значение, Неопределено));
	ФормаВыбора = ПолучитьФорму("Документ.Д_ЗаявкаНаОплату.Форма.ФормаВыбораСФильтромПодотчетчиков", СтруктураПараметров);
	ФормаВыбора.Контрагент						= Объект.ПодотчетноеЛицо;
	ФормаВыбора.ИспользоватьФильтрКонтрагент 	= Истина;
	ФормаВыбора.ВыборПодотчетчика 				= Истина;
	ТекЗаявка = ФормаВыбора.ОткрытьМодально();
	Если НЕ ТекЗаявка = Неопределено Тогда
		Если СписокДокОснование.НайтиПоЗначению(ТекЗаявка) = Неопределено Тогда
			СписокДокОснование.Добавить(ТекЗаявка);
			СписокДокОснованиеПриИзменении(Неопределено);
		Иначе
			Предупреждение(Строка(ТекЗаявка) + " уже присутствует в списке!");		
		КонецЕсли;			
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокДокОснованиеОткрытие(Элемент, СтандартнаяОбработка)
	Если СписокДокОснование.Количество() = 1 Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьЗначение(СписокДокОснование[0].Значение);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыПриИзменении(Элемент)
	
	ИзрасходованоУУ = Объект.Затраты.Итог("Сумма");
	ИзрасходованоБУ = Объект.Затраты.Итог("СуммаБУ");
	//ОстатокПоЗаявкам   = Объект.ПолученоПодОтчет - ИзрасходованоВсего;
	Объект.ВозвратДенежныхСредств   = Объект.ПолученоПодОтчет - ИзрасходованоУУ;
	Объект.ВозвратДенежныхСредствБУ = Объект.ПолученоПодОтчет - ИзрасходованоБУ;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьПолученоПО(ВызваноПриОткрытии = Ложь)
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("СтрокиЗаявокНаОплату", Объект.СтрокиЗаявкиНаОплату.Выгрузить());
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтрокиЗаявокНаОплату.ДокОснование,
	               |	СтрокиЗаявокНаОплату.УИДСтрокиДокОснования
	               |ПОМЕСТИТЬ СтрокиЗаявокНаОплату
	               |ИЗ
	               |	&СтрокиЗаявокНаОплату КАК СтрокиЗаявокНаОплату
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СУММА(Д_ЗаявкаНаОплатуЗаявкаБезнал.СуммаДДС) КАК СуммаДДС
	               |ИЗ
	               |	СтрокиЗаявокНаОплату КАК СтрокиЗаявокНаОплату
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Д_ЗаявкаНаОплату.ЗаявкаБезнал КАК Д_ЗаявкаНаОплатуЗаявкаБезнал
	               |		ПО СтрокиЗаявокНаОплату.ДокОснование = Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка
	               |			И СтрокиЗаявокНаОплату.УИДСтрокиДокОснования = Д_ЗаявкаНаОплатуЗаявкаБезнал.УИДСтроки";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Объект.ПолученоПодОтчет = Выборка.СуммаДДС;
	Иначе 
		Объект.ПолученоПодОтчет = 0;
	КонецЕсли;
	
	//ОстатокПоЗаявкам = Объект.ПолученоПодОтчет - ИзрасходованоВсего;
	Если Не ВызваноПриОткрытии Тогда 
		Объект.ВозвратДенежныхСредств   = Объект.ПолученоПодОтчет - ИзрасходованоУУ;
		Объект.ВозвратДенежныхСредствБУ = Объект.ПолученоПодОтчет - ИзрасходованоБУ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученоПодОтчетПриИзменении(Элемент)
	//ОстатокПоЗаявкам   = Объект.ПолученоПодОтчет - ИзрасходованоВсего;
	Объект.ВозвратДенежныхСредств   = Объект.ПолученоПодОтчет - ИзрасходованоУУ;
	Объект.ВозвратДенежныхСредствБУ = Объект.ПолученоПодОтчет - ИзрасходованоБУ;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьЗаявкуНаОплату(ЗаявкаНаОплату)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", ЗаявкаНаОплату);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Д_ТекущаяЗадача.Документ,
	               |	ВЫБОР
	               |		КОГДА Д_ТекущаяЗадача.ТочкаМаршрута = ЗНАЧЕНИЕ(Перечисление.Согласование1ТочкиМаршрута.Действие5)
	               |				ИЛИ Д_ТекущаяЗадача.ТочкаМаршрута = ""Согласовано и оплачено""
	               |				ИЛИ Д_ТекущаяЗадача.БизнесПроцессЗавершен = ИСТИНА
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Согласовано
	               |ИЗ
	               |	РегистрСведений.Д_ТекущаяЗадача КАК Д_ТекущаяЗадача
	               |ГДЕ
	               |	Д_ТекущаяЗадача.Документ = &Документ";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Согласовано;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции


&НаКлиенте
Процедура ПредприятиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элементы.СписокВыбора_Предприятие.СписокВыбора.Количество() Тогда
		ТекЗначение = ВыбратьИзСписка(Элементы.СписокВыбора_Предприятие.СписокВыбора, Элемент, Элементы.СписокВыбора_Предприятие.СписокВыбора.НайтиПоЗначению(Объект.Предприятие));	
		БюджетныйНаКлиенте.ПриНачалеВыбораРеквизитаВСписке(ЭтаФорма, "СписокВыбора_Предприятие", ТекЗначение, "Предприятия", Объект.Предприятие, СтандартнаяОбработка, Истина);
		ПредприятиеПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыПредприятиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.СписокВыбора_ЗатратыПредприятие.СписокВыбора.Количество() Тогда
		ТекЗначение = ВыбратьИзСписка(Элементы.СписокВыбора_ЗатратыПредприятие.СписокВыбора, Элемент, Элементы.СписокВыбора_ЗатратыПредприятие.СписокВыбора.НайтиПоЗначению(?(ЗначениеЗаполнено(Элементы.Затраты.ТекущиеДанные.Предприятие), Элементы.Затраты.ТекущиеДанные.Предприятие, Объект.Предприятие)));	
		БюджетныйНаКлиенте.ПриНачалеВыбораРеквизитаВСписке(ЭтаФорма, "СписокВыбора_ЗатратыПредприятие", ТекЗначение, "Предприятия", Элементы.Затраты.ТекущиеДанные.Предприятие, СтандартнаяОбработка, Истина);
		ЗатратыПредприятиеПриИзменении(Элемент);
	Иначе
		ТекПП = ?(ПустаяСтрока(Элементы.Затраты.ТекущиеДанные.Предприятие), Объект.Предприятие, Элементы.Затраты.ТекущиеДанные.Предприятие);
		ТекПП = ?(ПустаяСтрока(БюджетныйНаСервере.ВернутьРеквизит(ТекПП, "Родитель")), ТекПП,БюджетныйНаСервере.ВернутьРеквизит(ТекПП, "Родитель")); 
		ФормаВыб = ПолучитьФорму("Справочник.Предприятия.Форма.ФормаВыбора", Новый Структура("ТекущаяСтрока", ТекПП) , Элемент);
		ТекМассивПП = БюджетныйНаСервере.ПолучитьПредприятия(, Объект.Кассир);
		ФормаВыб.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыПредприятиеПриИзменении(Элемент)
	
	ТекСтрока = Элементы.Затраты.ТекущиеДанные;
	
	//Если НЕ Элементы.Затраты.ТекущиеДанные.Предприятие = ЭтоКазна() Тогда
		ТекРекв = БюджетныйНаСервере.ВернутьРеквизиты(ТекСтрока.Предприятие, "ВидДеятельности, ОсновнаяВалютаУчета");
	//Иначе
	//	ТекРекв = БюджетныйНаСервере.ВернутьРеквизиты(Объект.Предприятие, "ВидДеятельности, ОсновнаяВалютаУчета");
	//КонецЕсли;
	
	ТекСтрока.Подразделение = ТекРекв.ВидДеятельности;
	ТекСтрока.Валюта = ТекРекв.ОсновнаяВалютаУчета;
		
	СоздатьСвязь(Строка(Объект.Предприятие) = "Казна");
	
КонецПроцедуры

&НаСервере
Процедура СоздатьСвязь(ПроверитьУсловие)

	Если ПроверитьУсловие Тогда
		А = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Предприятие");
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(А);
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ЗатратыПодразделение.СвязиПараметровВыбора = НовыеСвязи;
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура КассирПриИзменении(Элемент)
	
	Если НЕ Объект.Кассир = ПолучитьРКО() Тогда
		ДоступныеЦФО = БюджетныйНаСервере.ПолучитьПредприятия(, ?(ЗначениеЗаполнено(Объект.Кассир), Объект.Кассир, Неопределено));
	Иначе
		ДоступныеЦФО = БюджетныйНаСервере.ПолучитьПредприятия();
	КонецЕсли;
	
	Если ДоступныеЦФО.Количество() < 15 Тогда
		БюджетныйНаКлиенте.ЗаполнитьСписокРеквизита(ЭтаФорма, "СписокВыбора_ЗатратыПредприятие", ДоступныеЦФО, Объект.Предприятие);
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРКО()
 
 	Возврат Справочники.Пользователи.ПустаяСсылка();	
 
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоКазна()
	
	Возврат Константы.сабПредприятиеКазна.Получить();
	
КонецФункции // ()

&НаКлиенте
Процедура ЗатратыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Не БПСервер.ПолучитьКонстантуНаСервере("сабИспользоватьНесколькоПредприятий") Тогда
		Элемент.ТекущиеДанные.Предприятие = БюджетныйНаСервере.ПолучитьПредприятие();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	Записать();
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура СписокДокОснованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СписокДокОснованиеПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("сабОбноватьПлатежныйКалендарь");
	Оповестить("ОбновитьСписокЗадач");
	Оповестить("ОбновитьПечатнуюФорму");
КонецПроцедуры
