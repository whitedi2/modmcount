
Процедура ОбработкаПроведения(Отказ, Режим)
	
	
	ЦФО = Предприятие;
		
	ПрямыеСтатьи = Новый Массив;
	//ПрямыеСтатьи.Добавить(Справочники.ИздержкиОбращения.ЗатратыОсн);
	//ПрямыеСтатьи.Добавить(Справочники.ИздержкиОбращения.ЗатратыВсп);
	//ПрямыеСтатьи.Добавить(Справочники.ИздержкиОбращения.ПрибыльПобочка);
	//ПрямыеСтатьи.Добавить(Справочники.ИздержкиОбращения.ГазЭл);
	//ПрямыеСтатьи.Добавить(Справочники.ИздержкиОбращения.ГазЭк);
	//ПрямыеСтатьи.Добавить(Справочники.ИздержкиОбращения.ЭлектПотр);
	//ПрямыеСтатьи.Добавить(Справочники.ИздержкиОбращения.ЭлектЭк);
	
	Сценарий = БюджетныйНаСервере.ПолучитьАктуальныйСценарий(Дата);
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//|	МАКСИМУМ(Д_Себестоимость.ПроцентЗатрат) КАК ПроцентЗатрат,
	//|	МАКСИМУМ(Д_Себестоимость.ЗатратыНаПростой) КАК ЗатратыНаПростой,
	//|	Д_Себестоимость.Ссылка
	//|ИЗ
	//|	Документ.Д_Себестоимость КАК Д_Себестоимость
	//|ГДЕ
	//|	Д_Себестоимость.Сценарий = &Сценарий
	//|	И Д_Себестоимость.Предприятие = &Предприятия
	//|	И Д_Себестоимость.Дата МЕЖДУ &Дата1 И &Дата2
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	Д_Себестоимость.Ссылка";
	//
	//Запрос.УстановитьПараметр("Дата1", НачалоМесяца(Дата));
	//Запрос.УстановитьПараметр("Дата2", КонецМесяца(Дата));
	//Запрос.УстановитьПараметр("Предприятия", ЦФО);
	//Запрос.УстановитьПараметр("Сценарий", Сценарий);
	//
	//Результат = Запрос.Выполнить();
	//Выборка = Результат.Выбрать();
	//
	ПроцентЗатрат = 0;	
	//Если Выборка.Следующий() Тогда
	//	Если Выборка.ЗатратыНаПростой Тогда
	//		ПроцентЗатрат = Выборка.ПроцентЗатрат;
	//	КонецЕсли; 
	//КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВсегоОбороты.КоличествоОборот = 0
	|			ТОГДА 0
	|		ИНАЧЕ БюджетныйОбороты.КоличествоОборот / ВсегоОбороты.КоличествоОборот
	|	КОНЕЦ КАК ПроцентнаяДоля,
	|	БюджетныйОбороты.Субконто1 КАК СубконтоКт1
	|ИЗ
	|	РегистрБухгалтерии.Бюджетный.Обороты(
	|			&Дата1,
	|			&Дата2,
	|			,
	|			Счет = &Счет1,
	|			,
	|			СценарийПлана = &Сценарий
	|				И Предприятия = &Предприятия,
	|			КорСчет = &Счет2,
	|			) КАК БюджетныйОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Бюджетный.Обороты(
	|				&Дата1,
	|				&Дата2,
	|				,
	|				Счет = &Счет1,
	|				,
	|				СценарийПлана = &Сценарий
	|					И Предприятия = &Предприятия,
	|				КорСчет = &Счет2,
	|				) КАК ВсегоОбороты
	|		ПО (ИСТИНА)";
	
	Запрос.УстановитьПараметр("Дата1", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("Дата2", КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Счет1", ПланыСчетов.Учетный.Счет43());
	Запрос.УстановитьПараметр("Счет2", ПланыСчетов.Учетный.Счет40());
	Запрос.УстановитьПараметр("Предприятия", ЦФО);
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	//если нет производства, то списывать затраты на 90.3
	Если Выборка.Следующий() тогда
		СписыватьНаРеализацию = 0;
	иначе
		СписыватьНаРеализацию = 1;
	конецесли;
	
	Сценарий = Справочники.СценарииПланирования.ПланПоСЗ();
	
	Движения.Бюджетный.Записывать = Истина;
	//Движения.ДвижениеДС.Записывать = Истина;
	//Сообщить (Выборка.КоличествоОборотДт);	
	
	Для Каждого ТекСтрокаЗатраты Из СЗ Цикл
		Если ТекСтрокаЗатраты.ОтменаОплаты Тогда
			Продолжить;
		Конецесли;
		СтатьяДДС = ?(ПустаяСтрока(ТекСтрокаЗатраты.СтатьяБДДС), ТекСтрокаЗатраты.СтатьяЗатрат.СтатьяБДДС, ТекСтрокаЗатраты.СтатьяБДДС);		
		ТекПП = ТекСтрокаЗатраты.ЦФО;
		//корректировки в себестоимость
		Если ТекСтрокаЗатраты.СуммаСеб Тогда
			// ДТ 25 КТ 60
			Если ТекСтрокаЗатраты.СуммаСеб Тогда
				Движение = Движения.Бюджетный.Добавить();
				Движение.СчетДт = ПланыСчетов.Учетный.Счет25();
				Движение.ПодразделениеДт = ТекСтрокаЗатраты.ВидДеятельности;
				Движение.СчетКт = ПланыСчетов.Учетный.Счет6004();
				Движение.Период = Дата;
				Движение.Предприятия = ТекПП;
				//Движение.Заявитель = Предприятие;
				//Движение.ПодразделениеЗаявителя = Подразделение;
				Движение.СценарийПлана = Сценарий;
				Движение.Сумма = ТекСтрокаЗатраты.СуммаСеб;
				Движение.Содержание = ТекСтрокаЗатраты.Основание;
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = ТекСтрокаЗатраты.СтатьяЗатрат;
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Подразделения] = ТекСтрокаЗатраты.ВидДеятельности;
				
				Если СписыватьНаРеализацию Тогда // если галочка Списывать на реал стоит
					//списываем на реализацию Дт 90.3 КТ 25
					Движение = Движения.Бюджетный.Добавить();
					Движение.СчетДт = ПланыСчетов.Учетный.Счет9003();
					Движение.ПодразделениеДт = ТекСтрокаЗатраты.ВидДеятельности;
					Движение.СчетКт = ПланыСчетов.Учетный.Счет25();
					Движение.ПодразделениеКт = ТекСтрокаЗатраты.ВидДеятельности;
					Движение.Период = Дата;
					Движение.Предприятия = ТекПП;
					//Движение.Заявитель = Предприятие;
					//Движение.ПодразделениеЗаявителя = Подразделение;
					Движение.СценарийПлана = Сценарий;
					Движение.Сумма = ТекСтрокаЗатраты.СуммаСеб;
					Движение.Содержание = ТекСтрокаЗатраты.Основание;
					Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = ТекСтрокаЗатраты.СтатьяЗатрат;
					Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = ТекСтрокаЗатраты.СтатьяЗатрат;
					Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Подразделения] = ТекСтрокаЗатраты.ВидДеятельности;
					
				иначе //если списываем на произведенную продукцию
					
					
					
					Если ПустаяСтрока(ТекСтрокаЗатраты.Номенклатура) Тогда // если номенклатура явно не указана, тогда пропорция
						
						Выборка = Результат.Выбрать();
						Пока Выборка.Следующий() Цикл
							
							Если НЕ ПрямыеСтатьи.Найти(ТекСтрокаЗатраты.СтатьяЗатрат) = Неопределено Тогда
								СуммаСписания = ТекСтрокаЗатраты.СуммаСеб * Выборка.ПроцентнаяДоля;
							Иначе
								СуммаСписания = ?(ПроцентЗатрат, (100 - ПроцентЗатрат) / 100, 1) * ТекСтрокаЗатраты.СуммаСеб * Выборка.ПроцентнаяДоля;									
							КонецЕсли;
							
							
							//ДТ 20 КТ 25
							Движение = Движения.Бюджетный.Добавить();
							Движение.СчетДт = ПланыСчетов.Учетный.Счет20();
							Движение.СчетКт = ПланыСчетов.Учетный.Счет25();
							Движение.ПодразделениеКт = ТекСтрокаЗатраты.ВидДеятельности;
							Движение.Период = Дата;
							Движение.Предприятия = ТекПП;
							//Движение.Заявитель = Предприятие;
							//Движение.ПодразделениеЗаявителя = Подразделение;
							Движение.СценарийПлана = Сценарий;
							Движение.Сумма = СуммаСписания;
							Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина)] = Выборка.СубконтоКт1;
							Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = ТекСтрокаЗатраты.СтатьяЗатрат;
							Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = ТекСтрокаЗатраты.СтатьяЗатрат;
							
							//ДТ 40 КТ 20
							Движение = Движения.Бюджетный.Добавить();
							Движение.СчетДт = ПланыСчетов.Учетный.Счет40();
							Движение.СчетКт = ПланыСчетов.Учетный.Счет20();
							Движение.Период = Дата;
							Движение.Предприятия = ТекПП;
							//Движение.Заявитель = Предприятие;
							//Движение.ПодразделениеЗаявителя = Подразделение;
							Движение.СценарийПлана = Сценарий;
							Движение.Сумма = СуммаСписания;
							Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина)] = Выборка.СубконтоКт1;
							Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина)] = Выборка.СубконтоКт1;
							Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = ТекСтрокаЗатраты.СтатьяЗатрат;
							
						КонецЦикла;
						
					иначе // если номенклатура явно указана, тогда нет пропорции
						
						
						
						Если НЕ ПрямыеСтатьи.Найти(ТекСтрокаЗатраты.СтатьяЗатрат) = Неопределено Тогда
							СуммаСписания = ТекСтрокаЗатраты.СуммаСеб;
						Иначе
							СуммаСписания = ?(ПроцентЗатрат, (100 - ПроцентЗатрат) / 100, 1) * ТекСтрокаЗатраты.СуммаСеб;
						КонецЕсли;
						
						
						//ДТ 20 КТ 25
						Движение = Движения.Бюджетный.Добавить();
						Движение.СчетДт = ПланыСчетов.Учетный.Счет20();
						Движение.СчетКт = ПланыСчетов.Учетный.Счет25();
						Движение.ПодразделениеКт = ТекСтрокаЗатраты.ВидДеятельности;
						Движение.Период = Дата;
						Движение.Предприятия = ТекПП;
						Движение.СценарийПлана = Сценарий;
						Движение.Сумма = СуммаСписания;
						Движение.Содержание = ТекСтрокаЗатраты.Основание;
						Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина)] = ТекСтрокаЗатраты.Номенклатура;
						Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = ТекСтрокаЗатраты.СтатьяЗатрат;
						Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = ТекСтрокаЗатраты.СтатьяЗатрат;
						
						//ДТ 40 КТ 20
						Движение = Движения.Бюджетный.Добавить();
						Движение.СчетДт = ПланыСчетов.Учетный.Счет40();
						Движение.СчетКт = ПланыСчетов.Учетный.Счет20();
						Движение.Период = Дата;
						Движение.Предприятия = ТекПП;
						Движение.СценарийПлана = Сценарий;
						Движение.Сумма = СуммаСписания;
						Движение.Содержание = ТекСтрокаЗатраты.Основание;
						Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина)] = ТекСтрокаЗатраты.Номенклатура;
						Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина)] = ТекСтрокаЗатраты.Номенклатура;
						Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = ТекСтрокаЗатраты.СтатьяЗатрат;
						
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			
			// затраты на простой ДТ 91.1 КТ 25 
			Если ПроцентЗатрат И ПрямыеСтатьи.Найти(ТекСтрокаЗатраты.СтатьяЗатрат) = Неопределено Тогда
				Движение = Движения.Бюджетный.Добавить();
				Движение.СчетДт = ПланыСчетов.Учетный.Счет91();
				Движение.ПодразделениеДт = ТекСтрокаЗатраты.ВидДеятельности;
				Движение.СчетКт = ПланыСчетов.Учетный.Счет25();
				Движение.ПодразделениеКт = ТекСтрокаЗатраты.ВидДеятельности;
				Движение.Период = Дата;
				Движение.Предприятия = ТекПП;
				//Движение.Заявитель = Предприятие;
				//Движение.ПодразделениеЗаявителя = Подразделение;
				Движение.СценарийПлана = Сценарий;
				Движение.Сумма = (ПроцентЗатрат / 100) * ТекСтрокаЗатраты.СуммаСеб;
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = Справочники.СтатьиДоходовРасходов.Простой;
				Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = ТекСтрокаЗатраты.СтатьяЗатрат;
			КонецЕсли;
			
			
			
			
		КонецЕсли; 
		
		
		// оплата ДТ 60 КТ 51
		Если ТекСтрокаЗатраты.СуммаБДДС Тогда
			Движение = Движения.Бюджетный.Добавить();
			Если ЗначениеЗаполнено(ТекСтрокаЗатраты.ИнвПроект) Тогда
				Движение.СчетДт = ПланыСчетов.Учетный.Счет6005();
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ВнеобАктивы] = ТекСтрокаЗатраты.ИнвПроект;
			Иначе	
				Движение.СчетДт = ПланыСчетов.Учетный.Счет6004();
			КонецЕсли;
			Движение.СчетКт = БюджетныйНаСервере.ПолучитьИсточник(ТекСтрокаЗатраты.Источник);
			Движение.ПодразделениеКт = ТекСтрокаЗатраты.ВидДеятельности;
			Движение.Период = Дата;
			Движение.Предприятия = ТекПП;
			Движение.Заявитель = Предприятие;
			//Движение.ПодразделениеЗаявителя = Подразделение;
			Движение.СценарийПлана = Сценарий;
			Движение.Сумма = ТекСтрокаЗатраты.СуммаБДДС;
			Движение.Содержание = ТекСтрокаЗатраты.Основание;
			Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.СтатьиДДС] = СтатьяДДС;
		КонецЕсли;
		
		//Если ТекСтрокаЗатраты.Признак = Перечисления.Д_ПризнакСписания.ФинРез Тогда
		//	
		//	//списание на ФР
		//	Движение = Движения.Бюджетный.Добавить();
		//	Движение.СчетДт = ПланыСчетов.Учетный.Счет91();
		//	Движение.СчетКт = ПланыСчетов.Учетный.Счет6004();
		//	Движение.Период = Дата;
		//	Движение.Предприятия = ЦФО;
		//	Движение.СценарийПлана = Сценарий;
		//	Движение.Сумма = ТекСтрокаЗатраты.СуммаСеб;
		//	Движение.Содержание = ТекСтрокаЗатраты.Основание;
		//	Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = ТекСтрокаЗатраты.СтатьяЗатрат;
		//	Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Подразделения] = ТекСтрокаЗатраты.ВидДеятельности;
		//	//оплата
		//	Если ТекСтрокаЗатраты.СуммаБДДС Тогда
		//		Движение = Движения.Бюджетный.Добавить();
		//		Движение.СчетДт = ПланыСчетов.Учетный.Счет6004();
		//		Движение.СчетКт = БюджетныйНаСервере.ПолучитьИсточник(ТекСтрокаЗатраты.Источник);
		//		Движение.Период = Дата;
		//		Движение.Предприятия = ТекСтрокаЗатраты.ЦФО;
		//		Движение.СценарийПлана = Сценарий;
		//		Движение.Сумма = ТекСтрокаЗатраты.СуммаБДДС;
		//		Движение.Содержание = ТекСтрокаЗатраты.Основание;
		//		Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.СтатьиДДС] = СтатьяДДС;
		//	КонецЕсли;	
		//	
		//КонецЕсли;
		//Если ТекСтрокаЗатраты.Признак = Перечисления.Д_ПризнакСписания.Деньги Тогда
		//	Движение = Движения.Бюджетный.Добавить();
		//	Движение.СчетДт = ПланыСчетов.Учетный.Счет6004();
		//	Движение.СчетКт = БюджетныйНаСервере.ПолучитьИсточник(ТекСтрокаЗатраты.Источник);
		//	Движение.Период = Дата;
		//	Движение.Предприятия = ТекСтрокаЗатраты.ЦФО;
		//	Движение.СценарийПлана = Сценарий;
		//	Движение.Сумма = ТекСтрокаЗатраты.СуммаБДДС;
		//	Движение.Содержание = ТекСтрокаЗатраты.Основание;
		//	Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.СтатьиДДС] = СтатьяДДС;
		//КонецЕсли;
		
		//// регистр ДвижениеДС
		//Движение = Движения.ДвижениеДС.Добавить();
		//Движение.Период = Дата;
		//Движение.Подразделение = ТекСтрокаЗатраты.ЦФО;
		//Движение.Источник = Справочники.Источники.Виртуальный;
		//Движение.Статья = ТекСтрокаЗатраты.СтатьяБДДС;
		//Движение.ВидДеятельности = ТекСтрокаЗатраты.СтатьяБДДС.ВидДеятельности;
		//Движение.ПланКорр = - ТекСтрокаЗатраты.СуммаБДДС;
		//Движение.Представление = Строка(Ссылка);
		//Движение.Описание = Строка(Ссылка);
		//Движение.Приход = Ложь;
		
	КонецЦикла;
	

	
		//{{__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!


	//}}__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ

	
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	Доступность = Ложь;
	ЛимитВручную = Ложь;
	ТекущаяЗадача = "";
	ТекущийБизнесПроцесс = "";
	Файл = "";
	Автор = "";
	Контрагент = "";
	ДоступнаПользователям = Истина; //по просьбе ИТ
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;	
	КонецЕсли;
	
	Если ТипЗнч(Кому) = Тип("СправочникСсылка.Пользователи") Тогда
		Рецензенты.Очистить();
		НоваяСтрока = Рецензенты.Добавить();
		НоваяСтрока.Пользователь = Кому;
	КонецЕсли;
	
	Если НЕ ДополнительныеСвойства.Свойство("Модифицирован") Тогда
		ДополнительныеСвойства.Вставить("Модифицирован", Ложь);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ссылка) И НЕ ПометкаУдаления = Ссылка.ПометкаУдаления Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	КлючиАналитикиБюджетов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КлючиАналитикиБюджетов КАК КлючиАналитикиБюджетов
		|ГДЕ
		|	КлючиАналитикиБюджетов.Документ = &Документ";
		
		Запрос.УстановитьПараметр("Документ", Ссылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Об = Выборка.Ссылка.ПолучитьОбъект();
			Об.УстановитьПометкуУдаления(ПометкаУдаления);
		КонецЦикла;
	ИначеЕсли ЗначениеЗаполнено(Ссылка) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Д_БюджетЗатраты.КлючАналитикиБюджета КАК КлючАналитикиБюджета
		|ПОМЕСТИТЬ ТЗДока
		|ИЗ
		|	Документ.Д_Бюджет.Затраты КАК Д_БюджетЗатраты
		|ГДЕ
		|	Д_БюджетЗатраты.Ссылка = &Документ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Д_БюджетЗатратыКП.КлючАналитикиБюджета
		|ИЗ
		|	Документ.Д_Бюджет.ЗатратыКП КАК Д_БюджетЗатратыКП
		|ГДЕ
		|	Д_БюджетЗатратыКП.Ссылка = &Документ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КлючиАналитикиБюджетов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КлючиАналитикиБюджетов КАК КлючиАналитикиБюджетов
		|ГДЕ
		|	КлючиАналитикиБюджетов.Документ = &Документ
		|	И НЕ КлючиАналитикиБюджетов.Ссылка В
		|				(ВЫБРАТЬ
		|					ТЗДока.КлючАналитикиБюджета КАК КлючАналитикиБюджета
		|				ИЗ
		|					ТЗДока КАК ТЗДока)";
		
		Запрос.УстановитьПараметр("Документ", Ссылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Об = Выборка.Ссылка.ПолучитьОбъект();
			Об.УстановитьПометкуУдаления(Истина);
		КонецЦикла;		
	КонецЕсли;
	
	//из подписки на событие
	БюджетныйНаСервере.ДокументыПередЗаписьюПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	БПСервер.ДокументыСогласуемыеПередЗаписьюПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
	ВидСЗ = Справочники.Д_ВидыВнутреннихДокументов.ПолучитьЭлементПредопределенный("КорректировкаБюджета");
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Если Предприятие.УчетПоПодразделениям И НЕ ЗначениеЗаполнено(Подразделение) Тогда
		сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(
		ЭтотОбъект,
		"Не указано подразделение.",
		,
		,
		"Подразделение",
		Отказ);
	КонецЕсли;
	
	
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	БюджетныйНаСервере.ПриУстановкеНовогоНомераПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;	
	КонецЕсли;

	сабОбщегоНазначения.сабПлатКалПриЗаписиОбъектовПриЗаписи(ЭтотОбъект, Отказ);
	РегистрыСведений.ВнутренниеДокументы.СоздатьЗаписьЖурнала(ЭтотОбъект);
	БПСервер.ДокументыСогласуемыеПриЗаписиОбработчик(ЭтотОбъект);
	
КонецПроцедуры



