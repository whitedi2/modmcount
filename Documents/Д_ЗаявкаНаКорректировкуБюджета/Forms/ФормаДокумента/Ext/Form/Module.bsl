///////////////////////////////////общие процедуры и функции
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//если уже есть БП по документу, то не отражаем кнопки запуска БП
		
	
	Элементы.ВидимостьВсем.Подсказка = "Документ будет отражаться в списке у всех пользователей, которым доступно предприятие.";
	//Элементы.ВидимостьВсем.Заголовок = "Доступен пользователям предприятиия: " + Строка(Объект.Предприятие);
	//ПредприятиеПриИзменении(Неопределено);

	Если Не РежимВосстановления Тогда
		//ЭтаФорма.ПодключитьОбработчикОжидания("АвтосохранениеРеквизитовФормыНаКлиенте", 30);
	КонецЕсли;
	
	//ВидимостьКолонок();
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.СтатьиЗатрат"));
	Массив.Добавить(Тип("СправочникСсылка.СтатьиДоходовРасходов"));	
	ОписаниеТиповСт = Новый ОписаниеТипов(Массив);	
	Элементы.СЗ.ПодчиненныеЭлементы.СЗГруппа6.ПодчиненныеЭлементы.СЗСтатьяЗатрат.ОграничениеТипа = ОписаниеТиповСт;
		
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда		
		Если ПустаяСтрока(Объект.Кому) Тогда
			Объект.Кому = Справочники.Пользователи.ПустаяСсылка();
		КонецЕсли;		
	КонецЕсли;
	
	Если Не Объект.Ссылка.Пустая() Тогда
		Элементы.ОтслеживатьЗаявку.Пометка = БПСервер.ПроверитьОтслеживаниеЗаявки(Объект.Ссылка, ПараметрыСеанса.ТекущийПользователь);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		Для Инд = 0 По Объект.СЗ.Количество() - 1 Цикл
			ПолучитьЛимитыСервер(Инд); 
		КонецЦикла;
	КонецЕсли;
	
	сабОбщегоНазначения.ОбновитьКоличествоПрикрепленныхФайловСервер(ЭтаФорма);
	Если Параметры.Свойство("РежимВосстановления") и Параметры.РежимВосстановления Тогда
		сабОбщегоНазначения.ВосстановлениеРеквизитовФормы(ЭтаФорма);
		РежимВосстановления = Истина;
	Иначе 
		РежимВосстановления = Ложь;
	КонецЕсли;
		
	БюджетныйНаСервере.ДействияПриСозданииФормыДокумента(ЭтаФорма, Ложь);
	ЗаполнитьСтрокиТЧ(Ложь);
	
	Месяц = НачалоМесяца(Объект.Дата);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекБП = БПСервер.НайтиТекущийБПСервер(Объект.Ссылка);
		Если НЕ ТекБП = Неопределено Тогда
			ТекБПСтруРекв = БюджетныйНаСервере.ВернутьРеквизиты(ТекБП, "ОснованиеЗаблокирован, Стартован, ОтправлятьВсем");
		КонецЕсли;
	Иначе
		ТекБП = Неопределено;
		ТекБПСтруРекв = Новый Структура;
		ВсемСразу = Неопределено;
	КонецЕсли;
	
	Если НЕ ТекБП = Неопределено Тогда
		ТекДоступность = ТекБПСтруРекв.ОснованиеЗаблокирован;
		Если ТекДоступность = Неопределено Тогда
			ТекДоступность = ТекБПСтруРекв.Стартован;
		КонецЕсли;
		БюджетныйНаСервере.ФормаТолькоПросмотр(Объект, ЭтаФорма, ТекДоступность);
		Элементы.ФормаДокументСогласовать.Заголовок = "Отправить и закрыть";
		Если ЗначениеЗаполнено(ТекБП) Тогда
			Элементы.ДобавитьКому.Доступность = 1 - ТекДоступность;
			Элементы.ФормаДокументСогласовать.Доступность = 1 - ТекДоступность;
		КонецЕсли;
	КонецЕсли;

	ПредприятиеПриИзмененииНаСервере(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Для каждого ТекСтрока Из Объект.СЗ Цикл
		
		Если Не ЗначениеЗаполнено(ТекСтрока.ПодразделениеЦФО) Тогда
			ТекСтрока.ПодразделениеЦФО = БюджетныйНаСервере.ВернутьРеквизит(ТекСтрока.ЦФО, "ВидДеятельности");
		КонецЕсли;
		
		// обращение №567
		Если Не ЗначениеЗаполнено(ТекСтрока.ИнвПроект) Тогда 
			
			Если РасчетыБюджет.СтатьяИнв(ТекСтрока.СтатьяБДДС) ИЛИ РасчетыБюджет.СтатьяПредставительскихРасходов(ТекСтрока.СтатьяБДДС) Тогда
				сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(Объект, "Не заполнено Субконто 2", "Объект.СЗ", ТекСтрока.НомерСтроки, "ИнвПроект", Отказ);
			Иначе
				ТекСтрока.ИнвПроект = Неопределено;
			КонецЕсли;
			
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(ТекСтрока.ЦФО) Тогда
			
			Если Не БПСервер.ПолучитьКонстантуНаСервере("сабИспользоватьНесколькоПредприятий") Тогда
				ТекСтрока.ЦФО = БюджетныйНаСервере.ПолучитьПредприятие();
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = 1 - ПроверитьЗаполнение();	
 	сабОбщегоНазначения.ОчиститьАвтосохраненияОбъекта(Объект.Ссылка);
		
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьКому(Команда)
	Если НЕ Объект.Рецензенты.Количество() И НЕ ПустаяСтрока(Объект.Кому) И ТипЗнч(Объект.Кому) = Тип("СправочникСсылка.Пользователи") Тогда
		НоваяСтрока = Объект.Рецензенты.Добавить();
		НоваяСтрока.Пользователь = Объект.Кому;
	КонецЕсли;
	
	ТекПользователь = ОткрытьФормуМодально("Справочник.Пользователи.ФормаВыбора");
	Если НЕ ТекПользователь = Неопределено Тогда
		
		НетВБазе = БюджетныйНаСервере.ВернутьРеквизит(ТекПользователь, "НеУчаствуетВДокументообороте");
		Если НетВБазе Тогда
			Если Вопрос("Пользователь " + Строка(ТекПользователь) + " не участвует в документообороте, т.к. не имеет доступа к базе. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				Возврат;	
			КонецЕсли;	
		КонецЕсли;	
		
		НоваяСтрока = Объект.Рецензенты.Добавить();
		НоваяСтрока.Пользователь = ТекПользователь;
	Иначе
		Возврат;
	КонецЕсли;
	СформироватьКому(ТекПользователь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомуПриИзменении(Элемент)
	//Проверяем пользователей по наименованию. разделитель ;
	Если ТипЗнч(Объект.Кому) = Тип("Строка") И НЕ ПустаяСтрока(Объект.Кому) Тогда
		ТекСтрока = СтрЗаменить(Объект.Кому, "; ", ";");
		МассивИмен = Новый Массив;
		ТекИмя = "";
		Для ТекСимвол = 1 По СтрДлина(ТекСтрока) Цикл
			
			Если Сред(ТекСтрока, ТекСимвол, 1) = ";" Тогда
				МассивИмен.Добавить(ТекИмя);
				ТекИмя = "";
			Иначе
				ТекИмя = ТекИмя + Сред(ТекСтрока, ТекСимвол, 1);			
			КонецЕсли;	
			
		КонецЦикла;
		МассивИмен.Добавить(ТекИмя);
		Для каждого ТекИмя Из МассивИмен Цикл	
			Если НайтиИмя(ТекИмя) = Неопределено Тогда
				Предупреждение("Пользователь " + Строка(ТекИмя) + " не найден в справочнике.");
				СформироватьКому();
				Возврат;
			КонецЕсли;		
		КонецЦикла;
		СформироватьТЧ(МассивИмен);
	Иначе
		НетВБазе = БюджетныйНаСервере.ВернутьРеквизит(Объект.Кому, "НеУчаствуетВДокументообороте");
		Если НетВБазе Тогда
			Если Вопрос("Пользователь " + Строка(Объект.Кому) + " не участвует в документообороте, т.к. не имеет доступа к базе. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				Объект.Кому = ПользовательПустаяСсылка();
				Возврат;	
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЕсли;
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьКому(ТекПользователь = Неопределено)
	
	//Если Объект.Рецензенты.Количество() > 1 Тогда
	//	СтрокаКому = "";
	//	Для каждого ТекРецензент Из Объект.Рецензенты Цикл
	//		СтрокаКому = СтрокаКому + Строка(ТекРецензент.Пользователь) + "; ";		
	//	КонецЦикла;
	//	СтрокаКому = Лев(СтрокаКому, СтрДлина(СтрокаКому) - 2);
	//	Объект.Кому = СтрокаКому;
	//Иначе
	//	Если НЕ ТекПользователь = Неопределено Тогда
	//		Объект.Кому = ТекПользователь;
	//	КонецЕсли;
	//КонецЕсли;
	
	Если Элементы.ДобавитьКому.Видимость Тогда
		СтрокаКому = "";
		Для каждого ТекРецензент Из Объект.Рецензенты Цикл
			СтрокаКому = СтрокаКому + Строка(ТекРецензент.Пользователь) + "; ";		
		КонецЦикла;
		СтрокаКому = Лев(СтрокаКому, СтрДлина(СтрокаКому) - 2);
		Объект.Кому = СтрокаКому;
	Иначе
		Объект.Кому = ТекПользователь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьТЧ(МассивИмен)
	Объект.Рецензенты.Очистить();
	Для каждого ТекПользователь Из МассивИмен Цикл
		НоваяСтрока = Объект.Рецензенты.Добавить();
		НоваяСтрока.Пользователь = НайтиИмя(ТекПользователь);	
	КонецЦикла; 
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиИмя(ТекИмя)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Пользователи.Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", ТекИмя);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции // ()

&НаКлиенте
Процедура КомуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.Кому = "" И Элементы.ДобавитьКому.Видимость = Ложь Тогда
		Объект.Кому = ПользовательПустаяСсылка();
	КонецЕсли;	
		
	Если ТипЗнч(Объект.Кому) = Тип("Строка") Тогда
		СтандартнаяОбработка = Ложь;
		МассивСтарыхРецензентов = Новый Массив;
		Для каждого ТекРецензент Из Объект.Рецензенты Цикл
			МассивСтарыхРецензентов.Добавить(ТекРецензент.Пользователь);		
		КонецЦикла; 
		
		МассивРецензентов = ОткрытьФормуМодально("Документ.Д_СлужебнаяЗаписка.Форма.ФормаРецензенты", Новый Структура("Рецензенты", МассивСтарыхРецензентов));
		Если НЕ МассивРецензентов = Неопределено Тогда
			Объект.Рецензенты.Очистить();
			Для каждого ТекРецензент Из МассивРецензентов Цикл
				НоваяСтрока = Объект.Рецензенты.Добавить();
				НоваяСтрока.Пользователь = ТекРецензент;			
			КонецЦикла;
			СформироватьКому();
		КонецЕсли;
	ИначеЕсли Объект.Кому = Неопределено Тогда
		Объект.Кому = ПользовательПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомуОчистка(Элемент, СтандартнаяОбработка)
	Объект.Рецензенты.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеПриИзменении(Элемент)
	//Элементы.ВидимостьВсем.Подсказка = "Документ будет отражаться в списке у всех пользователей, которым доступно предприятие <" + Строка(Объект.Предприятие) + ">.";
	//Элементы.ВидимостьВсем.Заголовок = "Доступен пользователям предприятиия: " + Строка(Объект.Предприятие);
	
	ПредприятиеПриИзмененииНаСервере(Не Элемент = Неопределено);

КонецПроцедуры

&НаСервере
Процедура ПредприятиеПриИзмененииНаСервере(Изменять)
	
	Объект.Сценарий = БюджетныйНаСервере.ПолучитьАктуальныйСценарий(Объект.Дата, Ложь);

	сабОбщегоНазначенияКлиентСервер.СкрытьПодразделения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если СписокВыбора_Предприятие.Количество() Тогда
		ТекЗначение = ВыбратьИзСписка(СписокВыбора_Предприятие, Элемент, СписокВыбора_Предприятие.НайтиПоЗначению(Объект.Предприятие));	
		БюджетныйНаКлиенте.ПриНачалеВыбораРеквизитаВСпискеДубль2(ЭтаФорма, "СписокВыбора_Предприятие", ТекЗначение, "Предприятия", Объект.Предприятие, СтандартнаяОбработка, Ложь);
		ПредприятиеПриИзменении(Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ЗакрытьФорму" Тогда
		//ЭтаФорма.Записать();
		ЭтаФорма.Закрыть();
	ИначеЕсли ИмяСобытия = "УстановитьДоступность" Тогда
		Объект.ТекущийБизнесПроцесс = Параметр.ТекущийБизнесПроцесс;
		Записать();
	ИначеЕсли ИмяСобытия = "Пересчитать" Тогда
		Закрыть();
	ИначеЕсли ИмяСобытия = "ПрикрепленныеФайлы" Тогда	
		сабОбщегоНазначенияКлиент.ОбновитьКоличествоПрикрепленныхФайлов(ЭтаФорма);
	ИначеЕсли ИмяСобытия = "РазрешитьРедактированиеФормы" Тогда	
		ПриОткрытии(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ЗаполнитьСтрокиТЧ();
	сабОбщегоНазначенияКлиент.ПослеЗаписиАвтосохраняемойФормы(ЭтаФорма);
	Оповестить("ОбновитьПечатнуюФорму");
	Оповестить("ОбновитьСписокЗадач");
КонецПроцедуры

&НаСервереБезКонтекста
Функция  ПользовательПустаяСсылка()
	
	Возврат Справочники.Пользователи.ПустаяСсылка();
	
КонецФункции

&НаКлиенте
Процедура АвтосохранениеРеквизитовФормыНаКлиенте()
	
	Если НЕ Модифицированность Тогда
		Возврат;
	КонецЕсли;
		
	АвтосохранениеРеквизитовФормыНаСервере();		
	
КонецПроцедуры

&НаСервере 
Процедура АвтосохранениеРеквизитовФормыНаСервере()
	
	сабОбщегоНазначения.АвтосохранениеРеквизитовФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если НЕ ЗавершениеРаботы И Не РежимВосстановления Тогда
		сабОбщегоНазначения.ОчиститьАвтосохраненияОбъекта(Объект.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если СписокВыбора_Подразаделение.Количество() Тогда
		ТекЗначение = ВыбратьИзСписка(СписокВыбора_Подразаделение. Элемент, СписокВыбора_Подразаделение.НайтиПоЗначению(Объект.Подразделение));	
		БюджетныйНаКлиенте.ПриНачалеВыбораРеквизитаВСпискеДубль2(ЭтаФорма, "СписокВыбора_Подразаделение", ТекЗначение, "ВидыДеятельности", Объект.Подразделение, СтандартнаяОбработка, Ложь);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВидимостьКолонок()
	
	//СтруктураВидимости = ЗапросКТч();
	//Элементы.СЗИнвПроект.Видимость = СтруктураВидимости.ИнвПроект;	
	//ВалютаПроекта = БюджетныйНаСервере.ВернутьРеквизит(Объект.Предприятие, "ОсновнаяВалютаУчета");
	//Элементы.СЗВалюта.Видимость = (Не ВалютаПроекта = УЧ_Сервер.НациональнаяВалюта());
	//
	//ВидимостьСуммВВалютеПроекта = Ложь;
	//Для Каждого Строка Из Объект.СЗ Цикл
	//	ВалютаВСтроке = ?(ЗначениеЗаполнено(Строка.Валюта), Строка.Валюта, УЧ_Сервер.НациональнаяВалюта());
	//	Если Не ВалютаВСтроке = БюджетныйНаСервере.ВернутьРеквизит(Строка.ЦФО, "ОсновнаяВалютаУчета") Тогда
	//		ВидимостьСуммВВалютеПроекта = Истина;
	//		Прервать;
	//	КонецЕсли;
	//КонецЦикла;
	
	//Элементы.СЗГруппа8.Видимость = ВидимостьСуммВВалютеПроекта;
	
КонецПроцедуры

&НаСервере
Функция ЗапросКТч()
	
	СтруктураВидимостиКолонок = Новый Структура("ИнвПроект",Ложь);
	
	ИнвСтатья = Ложь;
	СтатьяПР = Ложь;
	
	Для Каждого Строка Из Объект.СЗ Цикл
		
		Если РасчетыБюджет.СтатьяПредставительскихРасходов(Строка.СтатьяБДДС) Тогда
			СтатьяПР = Истина;
		КонецЕсли;
		
		Если РасчетыБюджет.СтатьяИнв(Строка.СтатьяБДДС) Тогда
			ИнвСтатья = Истина;
		КонецЕсли;
		
	КонецЦикла;
		
	Если (ИнвСтатья + СтатьяПР > 0) Или (сабОбщегоНазначения.ПолучитьЗначениеСвойства(Объект.Предприятие, ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.БюджетированиеИнвестицийВРазрезеЗатрат) = Истина) Тогда
		СтруктураВидимостиКолонок.ИнвПроект = Истина;
	КонецЕсли;
	
	Возврат СтруктураВидимостиКолонок;
	
КонецФункции

////////////////////конец общих процедур и функций

//&НаСервере
//Функция СменитьТип()
//	НовыйТип = Справочники.ИздержкиОбращения.ПустаяСсылка();
//	Форма = "Справочник.ИздержкиОбращения.ФормаВыбора";
	
	//Если ТипСправочника = Перечисления.Д_ПризнакСписания.ФинРез Тогда
	//	НовыйТип = Справочники.СтатьиДоходовРасходов.ПустаяСсылка();
	//	Форма = "Справочник.СтатьиДоходовРасходов.ФормаВыбора";
	//КонецЕсли;
	//
	//Если ТипСправочника = Перечисления.Д_ПризнакСписания.Деньги Тогда
	//	НовыйТип = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	//	Форма = "Справочник.СтатьиДвиженияДенежныхСредств.ФормаВыбора";
	//КонецЕсли;
	//Возврат Новый Структура("НовыйТип, Форма", НовыйТип, Форма);
//КонецФункции

&НаКлиенте
Процедура СЗСтатьяЗатратНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = Ложь;
	//Элемент.ВыбиратьТип = Ложь;
	//МассивТиповСтатьи = Новый Массив;
	//МассивТиповСтатьи.Добавить(Тип("СправочникСсылка.ИздержкиОбращения"));
	//МассивТиповСтатьи.Добавить(Тип("СправочникСсылка.СтатьиДоходовРасходов"));
	//Элемент.ДоступныеТипы = Новый ОписаниеТипов(МассивТиповСтатьи);
	
	//Форма = ПолучитьФорму(ПараметрыВыбора.Форма, Новый Структура("ТекущаяСтрока", Элементы.СЗ.ТекущиеДанные.СтатьяЗатрат), Элемент);
	//Форма.Открыть();	
	
КонецПроцедуры

&НаСервере
Функция НайтиСтатьюДДС(Ссылка)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА СтатьиЗатрат.Ссылка ЕСТЬ NULL 
	               |			ТОГДА СтатьиДоходовРасходов.Ссылка
	               |		ИНАЧЕ СтатьиЗатрат.Ссылка
	               |	КОНЕЦ КАК Статья
	               |ИЗ
	               |	Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДДС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	               |		ПО СтатьиДДС.Ссылка = СтатьиЗатрат.СтатьяБДДС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатьиДоходовРасходов КАК СтатьиДоходовРасходов
	               |		ПО СтатьиДДС.Ссылка = СтатьиДоходовРасходов.СтатьяБДДС
	               |ГДЕ
	               |	СтатьиДДС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("Статья", Выборка.Статья);	
	Иначе
		Возврат Новый Структура("Статья", Справочники.СтатьиЗатрат.ПустаяСсылка());
	КонецЕсли;
КонецФункции // ()

&НаКлиенте
Процедура СЗСтатьяБДДСПриИзменении(Элемент)
	
	СтрукрутаСтатьи = НайтиСтатьюДДС(Элементы.СЗ.ТекущиеДанные.СтатьяБДДС);
	
	Если ЗначениеЗаполнено(СтрукрутаСтатьи.Статья) И НЕ ЗначениеЗаполнено(Элементы.СЗ.ТекущиеДанные.СтатьяЗатрат) Тогда
		Элементы.СЗ.ТекущиеДанные.СтатьяЗатрат = СтрукрутаСтатьи.Статья;
	КонецЕсли;
		
	//Элементы.ЗаявкаИнвПроект.Видимость = СтруктураВидимости.ИнвПроект;
	ВидимостьКолонок();
	
	Если НЕ РасчетыБюджет.СтатьяИнв(Элементы.СЗ.ТекущиеДанные.СтатьяБДДС) И НЕ РасчетыБюджет.СтатьяПредставительскихРасходов(Элементы.СЗ.ТекущиеДанные.СтатьяБДДС) Тогда
		Элементы.СЗ.ТекущиеДанные.ИнвПроект = "";	
	КонецЕсли;
	
	Элементы.СЗ.ТекущиеДанные.СуммаППДДС = 0;
	Элементы.СЗ.ТекущиеДанные.СуммаПП = 0;
	
КонецПроцедуры

&НаСервере
Функция РасчитатьЛимиты(СтатьяДДС, ЦФО, Подразделение, СтатьяЗатрат, Статья91, ИнвПроект, ДатаПолучения)
		/////////////////////////////////////////////////////////////////Расчет лимитов/////////////////////
	//
	
	ПолныйПросмотрЛимитов = сабОбщегоНазначения.ПолучитьЗначениеСвойства(ПараметрыСеанса.ТекущийПользователь, ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПривилегированныйПросмотрЛимитов);

	Если ПолныйПросмотрЛимитов = Истина Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	//АктуальныйСценарий = БюджетныйНаСервере.ПолучитьАктуальныйСценарий(ДатаПолучения, Ложь);
	
	МассивСценариев = Новый Массив;
	МассивСценариев.Добавить(Объект.Сценарий);
	МассивСценариев.Добавить(Справочники.СценарииПланирования.ПланПоСЗ);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СценарииПланирования.Ссылка
	               |ИЗ
	               |	Справочник.СценарииПланирования КАК СценарииПланирования
	               |ГДЕ
	               |	СценарииПланирования.Родитель В(&Родитель)
	               |	И СценарииПланирования.ВлкючатьВПлан = ИСТИНА";
	
	Запрос.УстановитьПараметр("Родитель", МассивСценариев);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивСценариев.Добавить(Выборка.Ссылка);	
	КонецЦикла;
		
	 ТекСтатьяЗатрат = СтатьяЗатрат;
		
	// расчет лимитов БДР, обращение ГУК №3834
	//запрос для расчета лимитов на начало (суммируются корреспонденции 20-40 + 90.3+25-91)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА Б_ПараметрыБюджета.Утвержден
	               |				ИЛИ Затраты.СценарийПлана = &СценарииПланированияПланПоСЗ
	               |			ТОГДА -ЕСТЬNULL(Затраты.СуммаОборот, 0)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК СуммаПП
	               |ИЗ
	               |	РегистрБухгалтерии.Бюджетный.Обороты(
	               |			&Дата1,
	               |			&Дата2,
	               |			,
	               |			Счет = ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ЗатратыНаПрво),
	               |			,
	               |			СценарийПлана В (&Сценарий)
	               |				И Предприятия В ИЕРАРХИИ (&Предприятия)
	               |				И КорСубконто1 В (&Статья91)
	               |				И ВЫБОР
	               |					КОГДА &Статьи = НЕОПРЕДЕЛЕНО
	               |						ТОГДА ЛОЖЬ
	               |					ИНАЧЕ Субконто1 В (&Статьи)
	               |				КОНЕЦ
	               |				И ВЫБОР
	               |					КОГДА Предприятия.УчетПоПодразделениям
	               |							ИЛИ Предприятия = &ПредприятиеКазна
	               |						ТОГДА Подразделение В (&Подразделение)
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ,
	               |			КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ДоходыИРасходы),
	               |			) КАК Затраты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Б_ПараметрыБюджета КАК Б_ПараметрыБюджета
	               |		ПО Затраты.Предприятия = Б_ПараметрыБюджета.Предприятие
	               |			И Затраты.СценарийПлана = Б_ПараметрыБюджета.Сценарий
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА Б_ПараметрыБюджета.Утвержден
	               |				ИЛИ Затраты903.СценарийПлана = &СценарииПланированияПланПоСЗ
	               |			ТОГДА ЕСТЬNULL(Затраты903.СуммаОборот, 0)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ
	               |ИЗ
	               |	РегистрБухгалтерии.Бюджетный.Обороты(
	               |			&Дата1,
	               |			&Дата2,
	               |			,
	               |			Счет = &Счет3,
	               |			,
	               |			СценарийПлана В (&Сценарий)
	               |				И Предприятия В ИЕРАРХИИ (&Предприятия)
	               |				И ВЫБОР
	               |					КОГДА &Статьи = НЕОПРЕДЕЛЕНО
	               |						ТОГДА ЛОЖЬ
	               |					ИНАЧЕ Субконто2 В (&Статьи)
	               |				КОНЕЦ
	               |				И ВЫБОР
	               |					КОГДА Предприятия.УчетПоПодразделениям = ИСТИНА
	               |							ИЛИ Предприятия = &ПредприятиеКазна
	               |						ТОГДА Подразделение В (&Подразделение)
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ,
	               |			,
	               |			) КАК Затраты903
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Б_ПараметрыБюджета КАК Б_ПараметрыБюджета
	               |		ПО Затраты903.Предприятия = Б_ПараметрыБюджета.Предприятие
	               |			И Затраты903.СценарийПлана = Б_ПараметрыБюджета.Сценарий
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА Б_ПараметрыБюджета.Утвержден
	               |				ИЛИ Затраты.СценарийПлана = &СценарииПланированияПланПоСЗ
	               |			ТОГДА -ЕСТЬNULL(Затраты.СуммаОборот, 0)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ
	               |ИЗ
	               |	РегистрБухгалтерии.Бюджетный.Обороты(
	               |			&Дата1,
	               |			&Дата2,
	               |			,
	               |			Счет = ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПриобретениеОС),
	               |			,
	               |			СценарийПлана В (&Сценарий)
	               |				И Предприятия В ИЕРАРХИИ (&Предприятия)
	               |				И ВЫБОР
	               |					КОГДА &Статьи = НЕОПРЕДЕЛЕНО
	               |						ТОГДА ЛОЖЬ
	               |					ИНАЧЕ КорСубконто1 В (&Статьи)
	               |				КОНЕЦ
	               |				И Субконто1 В (&ИнвПроект)
	               |				И ВЫБОР
	               |					КОГДА Предприятия.УчетПоПодразделениям
	               |							ИЛИ Предприятия = &ПредприятиеКазна
	               |						ТОГДА КорСубконто2 В (&Подразделение)
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ,
	               |			КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ДоходыИРасходы),
	               |			) КАК Затраты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Б_ПараметрыБюджета КАК Б_ПараметрыБюджета
	               |		ПО Затраты.Предприятия = Б_ПараметрыБюджета.Предприятие
	               |			И Затраты.СценарийПлана = Б_ПараметрыБюджета.Сценарий
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА Б_ПараметрыБюджета.Утвержден
	               |				ИЛИ Затраты.СценарийПлана = &СценарииПланированияПланПоСЗ
	               |			ТОГДА ЕСТЬNULL(Затраты.СуммаОборот, 0)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ
	               |ИЗ
	               |	РегистрБухгалтерии.Бюджетный.Обороты(
	               |			&Дата1,
	               |			&Дата2,
	               |			,
	               |			Счет = ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ДоходыИРасходы),
	               |			,
	               |			СценарийПлана В (&Сценарий)
	               |				И Предприятия В ИЕРАРХИИ (&Предприятия)
	               |				И Субконто1 В (&Статья91)
	               |				И &Статьи = НЕОПРЕДЕЛЕНО
	               |				И ВЫБОР
	               |					КОГДА Предприятия.УчетПоПодразделениям
	               |							ИЛИ Предприятия = &ПредприятиеКазна
	               |						ТОГДА Подразделение В (&Подразделение)
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ,
	               |			,
	               |			) КАК Затраты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Б_ПараметрыБюджета КАК Б_ПараметрыБюджета
	               |		ПО Затраты.Предприятия = Б_ПараметрыБюджета.Предприятие
	               |			И Затраты.СценарийПлана = Б_ПараметрыБюджета.Сценарий";
	
	
	Запрос.УстановитьПараметр("ПредприятиеКазна", НачалоМесяца(ДатаПолучения));
	Запрос.УстановитьПараметр("Дата1", НачалоМесяца(ДатаПолучения));
	Запрос.УстановитьПараметр("Дата2", КонецМесяца(ДатаПолучения));
	Запрос.УстановитьПараметр("Сценарий", МассивСценариев);
	Запрос.УстановитьПараметр("Предприятия", ЦФО);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Счет3", ПланыСчетов.Управленческий.РасходыПоРеал);
	Запрос.УстановитьПараметр("Статьи", ?(ЗначениеЗаполнено(ТекСтатьяЗатрат), ТекСтатьяЗатрат, Неопределено));
	Запрос.УстановитьПараметр("Статья91", Статья91);
	Запрос.УстановитьПараметр("ИнвПроект", ИнвПроект);
	Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
	
	МассивСтарыхСчетов = ПараметрыСеанса.ДоступныеСчета;
	МассивНовыйСчетов = Новый Массив;
	
	Для каждого ТекСчет  Из ПараметрыСеанса.ДоступныеСчета Цикл
		МассивНовыйСчетов.Добавить(ТекСчет);	
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	МассивНовыйСчетов.Добавить(ПланыСчетов.Управленческий.ОсновноеПрво);
	МассивНовыйСчетов.Добавить(ПланыСчетов.Управленческий.РасходыПоРеал);
	МассивНовыйСчетов.Добавить(ПланыСчетов.Управленческий.Продажи);
	МассивНовыйСчетов.Добавить(ПланыСчетов.Управленческий.ВыпускПродукции);
	МассивНовыйСчетов.Добавить(ПланыСчетов.Управленческий.ЗатратыНаПрво);
	ПараметрыСеанса.ДоступныеСчета = Новый ФиксированныйМассив(МассивНовыйСчетов);
	УстановитьПривилегированныйРежим(Ложь);
	
	РезультатЗатраты = Запрос.Выполнить();
	Выборка = РезультатЗатраты.Выбрать();
	
	ПараметрыСеанса.ДоступныеСчета = МассивСтарыхСчетов;
	
	Затраты = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Если ТипЗнч(Выборка.СуммаПП) = Тип("Число") Тогда
			Затраты = Затраты + Выборка.СуммаПП;
		КонецЕсли;
		
	КонецЦикла;
	
	 //запрос для расчета лимитов денег на начало
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                |	СУММА(ВЫБОР
	                |			КОГДА Б_ПараметрыБюджета.Утвержден
	                |					ИЛИ Деньги.СценарийПлана = &СценарииПланированияПланПоСЗ
	                |				ТОГДА -ЕСТЬNULL(Деньги.СуммаОборот, 0)
	                |			ИНАЧЕ 0
	                |		КОНЕЦ) КАК СуммаППДДС
	                |ИЗ
	                |	РегистрБухгалтерии.Бюджетный.Обороты(
	                |			&Дата1,
	                |			&Дата2,
	                |			,
	                |			Счет В ИЕРАРХИИ (&Счет1),
	                |			,
	                |			СценарийПлана В (&Сценарий)
	                |				И Предприятия В (&Предприятия)
	                |				И ВЫБОР
	                |					КОГДА Предприятия.УчетПоПодразделениям = ИСТИНА
	                |							ИЛИ Предприятия = &ПредприятиеКазна
	                |						ТОГДА Подразделение В (&Подразделение)
	                |					ИНАЧЕ ИСТИНА
	                |				КОНЕЦ
	                |				И Субконто1 В (&Статьи),
	                |			,
	                |			) КАК Деньги
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Б_ПараметрыБюджета КАК Б_ПараметрыБюджета
	                |		ПО Деньги.Предприятия = Б_ПараметрыБюджета.Предприятие
	                |			И Деньги.СценарийПлана = Б_ПараметрыБюджета.Сценарий
	                |ГДЕ
	                |	ВЫБОР
	                |			КОГДА ТИПЗНАЧЕНИЯ(Деньги.КорСубконто2) = ТИП(Справочник.ОбъектыСтроительства)
	                |					ИЛИ ТИПЗНАЧЕНИЯ(Деньги.КорСубконто2) = ТИП(Справочник.ПредставительскиеРасходы)
	                |				ТОГДА ВЫБОР
	                |						КОГДА &ИнвПроект = НЕОПРЕДЕЛЕНО
	                |							ТОГДА ИСТИНА
	                |						ИНАЧЕ Деньги.КорСубконто2 = &ИнвПроект
	                |					КОНЕЦ
	                |			ИНАЧЕ ИСТИНА
	                |		КОНЕЦ";
	 
	 
	 ДенежныеСчета = Новый Массив;
	 ДенежныеСчета.Добавить(ПланыСчетов.Управленческий.Касса);
	 ДенежныеСчета.Добавить(ПланыСчетов.Управленческий.РасчетныйСчет);
	 ДенежныеСчета.Добавить(ПланыСчетов.Управленческий.КазнаОсн);
	 
	 Запрос.УстановитьПараметр("ПредприятиеКазна", Константы.сабПредприятиеКазна.Получить());
	 Запрос.УстановитьПараметр("Дата1", НачалоМесяца(ДатаПолучения));
	 Запрос.УстановитьПараметр("Дата2", КонецМесяца(ДатаПолучения));
	 Запрос.УстановитьПараметр("Сценарий", МассивСценариев);
	Запрос.УстановитьПараметр("Предприятия", ЦФО);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Счет1", ДенежныеСчета);
	Запрос.УстановитьПараметр("Статьи", СтатьяДДС);
	Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
	Запрос.УстановитьПараметр("ИнвПроект", ИнвПроект);
	
	РезультатДеньги = Запрос.Выполнить();
	Выборка = РезультатДеньги.Выбрать();
	Деньги = 0;
	
	Если Выборка.Следующий() Тогда
		Деньги = Выборка.СуммаППДДС;
	КонецЕсли;
		
	Возврат Новый Структура("Затраты, Деньги", Затраты, Деньги);
	
КонецФункции

&НаКлиенте
Процедура ПолучитьЛимиты(Команда)
	//ЭтаФорма.Записать();
	//ЭтаФорма.ОбновитьОтображениеДанных();
	ПолучитьЛимитыСервер(Элементы.СЗ.ТекущиеДанные.НомерСтроки - 1);
КонецПроцедуры

&НаСервере
Процедура ПолучитьЛимитыСервер(ИндексТекСтроки)
	
	Остаток = 0;
	ЛимитСКорректировкой = 0;
	
	Попытка
		ТекущаяСтрока = Объект.СЗ[ИндексТекСтроки]
	Исключение
		ТекущаяСтрока = Неопределено
	КонецПопытки;
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		Если ПустаяСтрока(ТекущаяСтрока.ЦФО) Тогда
			Если ПустаяСтрока(Объект.ЦФО) Тогда
				ЦФО = Объект.Предприятие
			Иначе
				ЦФО = Объект.ЦФО;		
			КонецЕсли;
		Иначе
			ЦФО = ТекущаяСтрока.ЦФО;	
		КонецЕсли;
		ДатаПолученияЛимита = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата());
		ИнвПроект = ?(ЗначениеЗаполнено(ТекущаяСтрока.ИнвПроект), ТекущаяСтрока.ИнвПроект, Неопределено);
		СтруктураЛимитов = РасчитатьЛимиты(ТекущаяСтрока.СтатьяБДДС, ЦФО, ТекущаяСтрока.ПодразделениеЦФО, ТекущаяСтрока.СтатьяЗатрат, ТекущаяСтрока.СтатьяДоходовИРасходов, ИнвПроект, ДатаПолученияЛимита);
		//обработка случаев отсутствия вывода лимитов
		//ЗапретЛимита =  БПСервер.ЗапретПлана(Объект.Предприятие, ЦФО, Элементы.СЗ.ТекущиеДанные.СтатьяБДДС);
		//Если НЕ ЗапретЛимита Тогда
		УстановитьДоступностьЛимитов(Истина);
		ТекущаяСтрока.СуммаППДДС = СтруктураЛимитов.Деньги;
		ТекущаяСтрока.СуммаПП = СтруктураЛимитов.Затраты;	
		//КонецЕсли; 
		ТекущаяСтрока.ФактПоЗаявкам = РассчитатьФактПоЗаявкамНаСервере(ТекущаяСтрока.ЦФО, ТекущаяСтрока.ПодразделениеЦФО,ТекущаяСтрока.СтатьяБДДС, ИнвПроект);
		ЛимитСКорректировкой = ТекущаяСтрока.СуммаППДДС + ТекущаяСтрока.СуммаБДДС; 
		Остаток = ЛимитСКорректировкой - ТекущаяСтрока.ФактПоЗаявкам;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Граница(Команда)
	Для Каждого Область Из ТабДок.ВыделенныеОбласти Цикл
		ЛинияНов = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		ЛинияНовОчистить = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
		Если Область.ГраницаСлева = ЛинияНов Тогда
			Область.ГраницаСлева = ЛинияНовОчистить;
		Иначе
			Область.ГраницаСлева = ЛинияНов;
		КонецЕсли;
		Если Область.ГраницаСправа = ЛинияНов Тогда
			Область.ГраницаСправа = ЛинияНовОчистить;
		Иначе
			Область.ГраницаСправа = ЛинияНов;
		КонецЕсли;
		Если Область.ГраницаСнизу = ЛинияНов Тогда
			Область.ГраницаСнизу = ЛинияНовОчистить;
		Иначе
			Область.ГраницаСнизу = ЛинияНов;
		КонецЕсли;
		Если Область.ГраницаСверху = ЛинияНов Тогда
			Область.ГраницаСверху = ЛинияНовОчистить;
		Иначе
			Область.ГраницаСверху = ЛинияНов;
		КонецЕсли;
		//Если ТипЗнч(Область) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		//	Для ИндексСтрока = Область.Верх По Область.Низ Цикл
		//		Для ИндексКолонка = Область.Лево По Область.Право Цикл
		//			Попытка
		//				Сумма = Сумма + Число(СтрЗаменить(Результат.Область("R" + Формат(ИндексСтрока, "ЧГ=0") + "C" + Формат(ИндексКолонка, "ЧГ=0")) .Текст, " ", ""));
		//			Исключение
		//			КонецПопытки;
		//		КонецЦикла;
		//	КонецЦикла;
		//КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязь()
	//Если Объект.ЦФОвТЧ Тогда
	//	Связь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы.СЗ.ТекущиеДанные.ЦФО");	
	//ИначеЕсли Объект.ЦФО.Пустая() Тогда
	//	Связь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Предприятие");
	//Иначе	
	//	Связь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.ЦФО");
	//КонецЕсли;
	//
	//МассивСвязей = Новый Массив;
	//МассивСвязей.Добавить(Связь);
	//Элементы.СЗПодразделение.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязей);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦФОПриИзменении(Элемент)
	УстановитьСвязь();
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	ОткрытьФормумодально("Справочник.Пользователи.ФормаВыбора", Новый Структура("РежимВыбора, РасширенныйПодбор, ЗакрыватьПриВыборе", Истина, Истина, Ложь),Элементы.Адресаты); 
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокиТЧ(ПересчитатьФакт = Истина)
	Для каждого ТекСтрока Из Объект.СЗ Цикл
		//РеквизитЦФО = БюджетныйНаСервере.ВернутьРеквизиты(ТекСтрока.ЦФО, "УчетПоПодразделениям");
		ТекСтрока.УчетПоПодразделениям = ?(ТекСтрока.ЦФО = Константы.сабПредприятиеКазна.Получить(), Ложь, Истина);	
		Если ПересчитатьФакт Тогда
			ТекСтрока.ФактПоЗаявкам = РассчитатьФактПоЗаявкамНаСервере(ТекСтрока.ЦФО, ТекСтрока.ПодразделениеЦФО,ТекСтрока.СтатьяБДДС, ТекСтрока.ИнвПроект);
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры


&НаКлиенте
Процедура СЗЦФОПриИзменении(Элемент)
	Элементы.СЗ.ТекущиеДанные.УчетПоПодразделениям = БюджетныйНаСервере.ВернутьРеквизит(Элементы.СЗ.ТекущиеДанные.ЦФО, "УчетПоПодразделениям");
	//СоздатьСвязь(Строка(Элементы.СЗ.ТекущиеДанные.ЦФО) = "Казна" ИЛИ Строка(Объект.ЦФО) = "Казна");
	УстановитьСоответствиеСуммВСтроке(Элементы.СЗ.ТекущиеДанные.НомерСтроки - 1);	
КонецПроцедуры

&НаСервере
Процедура СоздатьСвязь(ПроверитьУсловие)

	Если ПроверитьУсловие Тогда
		А = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Предприятие");
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(А);
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.СЗПодразделение.СвязиПараметровВыбора = НовыеСвязи;
	КонецЕсли;

КонецПроцедуры
 

&НаКлиенте
Процедура ОтслеживатьЗаявку(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Перед тем как отслеживать заявку её нужно записать!";
		Сообщение.Сообщить();
	Иначе	
		ОтслеживатьСЗ = НЕ Элементы.ОтслеживатьЗаявку.Пометка;
		БПСервер.ОтслеживатьЗаявкуНаСервере(ОтслеживатьСЗ, Объект.Ссылка);
		Элементы.ОтслеживатьЗаявку.Пометка = ОтслеживатьСЗ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗамещенныеПриказыПриказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Форма = ПолучитьФорму("Документ.Д_СлужебнаяЗаписка.ФормаВыбора", , Элемент);
	ЭлементОтбора = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ВидСЗ");	
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ПравоеЗначение = ПредопределенноеЗначение("Справочник.Д_ВидыВнутреннихДокументов.Приказ");
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	ТекЗначения = БюджетныйНаСервере.ПолучитьТекущиеУсловияКонтрагента(Объект.Контрагент, Объект.Дата);
	ЗаполнитьЗначенияСвойств(Объект, ТекЗначения);
КонецПроцедуры



&НаСервере
Функция РассчитатьУвеличениеБюджетаНаСервере(ТекПредприятие)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(Д_ЗаявкаНаКорректировкуБюджетаСЗ.СуммаБДДС, 0)) КАК Сумма,
	|	Д_ЗаявкаНаКорректировкуБюджетаСЗ.ЦФО
	|ИЗ
	|	Документ.Д_ЗаявкаНаКорректировкуБюджета.СЗ КАК Д_ЗаявкаНаКорректировкуБюджетаСЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Д_ТекущаяЗадача КАК Д_ТекущаяЗадача
	|		ПО Д_ЗаявкаНаКорректировкуБюджетаСЗ.Ссылка = Д_ТекущаяЗадача.Документ
	|ГДЕ
	|	Д_ЗаявкаНаКорректировкуБюджетаСЗ.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И Д_ЗаявкаНаКорректировкуБюджетаСЗ.ЦФО = &Предприятие
	|	И Д_ЗаявкаНаКорректировкуБюджетаСЗ.ВидДвижения = ""Прямое увеличение""
	|	И НЕ Д_ЗаявкаНаКорректировкуБюджетаСЗ.Ссылка.ПометкаУдаления
	|	И НЕ ЕСТЬNULL(Д_ТекущаяЗадача.ТекущаяЗадача, """") = ""Отклонено!""
	|
	|СГРУППИРОВАТЬ ПО
	|	Д_ЗаявкаНаКорректировкуБюджетаСЗ.ЦФО";
	Запрос.УстановитьПараметр("ДатаНач", НачалоМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("Предприятие", ТекПредприятие);
	Выборка = Запрос.Выполнить().Выбрать();
	ЗначениеПрямогоУвеличения = 0;
	Пока Выборка.Следующий() Цикл
		ЗначениеПрямогоУвеличения = Выборка.Сумма;
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Предприятия.Лимит
	|ИЗ
	|	Справочник.Предприятия КАК Предприятия
	|ГДЕ
	|	Предприятия.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ТекПредприятие);
	Выборка = Запрос.Выполнить().Выбрать();
	МаксимальныйЛимит = 0;
	Пока Выборка.Следующий() Цикл
		МаксимальныйЛимит = Выборка.Лимит;
	КонецЦикла;	
	
	ВозможноеУвеличениеБюджета = МаксимальныйЛимит - ЗначениеПрямогоУвеличения;
	
	Возврат "Месячное значение прямого увеличения бюджета: " + ЗначениеПрямогоУвеличения + ". Возможно увеличение не более чем на " + ВозможноеУвеличениеБюджета;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДоговоры(Команда)
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ЗаполнитьДоговорыСервер();
	Иначе	
		Предупреждение("Укажите контрагента для заполнения таблицы договоров и протоколов.");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПротоколы()
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ЗаполнитьПротоколыСервер();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПротоколыСервер()
	СписокДоговоров = Объект.ДоговорыКонтрагента.Выгрузить().ВыгрузитьКолонку("ТекДоговор");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КС_ПротоколыСогласования.Ссылка КАК ТекПротокол,
	               |	КС_ПротоколыСогласования.Код,
	               |	КС_ПротоколыСогласования.Дата,
	               |	КС_ПротоколыСогласования.Цена,
	               |	КС_ПротоколыСогласования.СтавкаВерха,
	               |	КС_ПротоколыСогласования.Предприятие,
	               |	КС_ПротоколыСогласования.Владелец КАК ТекДоговор
	               |ИЗ
	               |	Справочник.КС_ПротоколыСогласования КАК КС_ПротоколыСогласования
	               |ГДЕ
	               |	КС_ПротоколыСогласования.Владелец В(&Владелец)";
	
	Запрос.УстановитьПараметр("Владелец", СписокДоговоров);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если НЕ Объект.ПротоколыДоговоров.НайтиСтроки(Новый Структура("ТекДоговор", Выборка.ТекДоговор)).Количество()  Тогда
			НоваяСтрока = Объект.ПротоколыДоговоров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		ИначеЕсли Выборка.Дата > НоваяСтрока.ТекПротокол.Дата И НЕ Выборка.Дата > ТекущаяДата() Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЕсли;
		
	КонецЦикла;
	
	
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьДоговорыСервер()
	Объект.ДоговорыКонтрагента.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК ТекДоговор,
	|	ДоговорыКонтрагентов.Предприятие,
	|	ДоговорыКонтрагентов.Отсрочка КАК ТекущаяОтсрочка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Владелец
	|	И ДоговорыКонтрагентов.ДатаОкончанияДоговора > &ДатаОкончанияДоговора";
	
	Запрос.УстановитьПараметр("Владелец", Объект.Контрагент);
	Запрос.УстановитьПараметр("ДатаОкончанияДоговора", ТекущаяДата());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.ДоговорыКонтрагента.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияКлиентаКонтрагентПриИзменении(Элемент)
	ТекДанные = Элементы.УсловияКлиента.ТекущиеДанные;
	ТекЗначения = БюджетныйНаСервере.ПолучитьТекущиеУсловияКонтрагента(ТекДанные.Контрагент, ТекДанные.Дата);
	ЗаполнитьЗначенияСвойств(ТекДанные, ТекЗначения);
	Если ДатаНеКорректна(ТекДанные.Контрагент, ТекДанные.Дата) Тогда
		Предупреждение("Внимание! По контрагенту """ + Строка(ТекДанные.Контрагент) + """  есть условия позже даты " + Формат(ТекДанные.Дата, "ДФ=dd.MM.yyyy") + "!");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияКлиентаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекДанные = Элементы.УсловияКлиента.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекДанные.Дата) Тогда
		ТекДанные.Дата = Объект.Дата;	
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДатаНеКорректна(Контрагент, Дата)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КС_УсловияКонтрагента.ВнутреннийДокумент
	|ИЗ
	|	РегистрСведений.КС_УсловияКонтрагента КАК КС_УсловияКонтрагента
	|ГДЕ
	|	КС_УсловияКонтрагента.Период > &Период
	|	И КС_УсловияКонтрагента.Контрагент = &Контрагент";
	
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Возврат Выборка.Количество();
	
КонецФункции // ()

&НаКлиенте
Процедура СЗПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ПолучитьЛимитыСервер(Элемент.ТекущаяСтрока);
	ЭтаФорма.ОбновитьОтображениеДанных();	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьФактПоЗаявкам()
	Элементы.СЗ.ТекущиеДанные.ФактПоЗаявкам = РассчитатьФактПоЗаявкамНаСервере(Элементы.СЗ.ТекущиеДанные.ЦФО, Элементы.СЗ.ТекущиеДанные.ПодразделениеЦФО,Элементы.СЗ.ТекущиеДанные.СтатьяБДДС, Элементы.СЗ.ТекущиеДанные.ИнвПроект);	
КонецПроцедуры

&НаСервере
Функция РассчитатьФактПоЗаявкамНаСервере(ЦФО, Подразделение, СтатьяБДДС, ИнвПроект)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(Д_ЗаявкаНаОплатуЗаявкаБезнал.СуммаДДС) КАК СуммаДДС
	               |ПОМЕСТИТЬ таблицы
	               |ИЗ
	               |	Документ.Д_ЗаявкаНаОплату.ЗаявкаБезнал КАК Д_ЗаявкаНаОплатуЗаявкаБезнал
	               |ГДЕ
	               |	НЕ Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка.ПометкаУдаления
	               |	И Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	               |	И Д_ЗаявкаНаОплатуЗаявкаБезнал.ЦФО = &ЦФО
	               |	И Д_ЗаявкаНаОплатуЗаявкаБезнал.Подразделение = &Подразделение
	               |	И Д_ЗаявкаНаОплатуЗаявкаБезнал.СтатьяДДС = &СтатьяДДС
	               |	И ВЫБОР
	               |			КОГДА &ИнвПроект = НЕОПРЕДЕЛЕНО
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ Д_ЗаявкаНаОплатуЗаявкаБезнал.ИнвПроект = &ИнвПроект
	               |		КОНЕЦ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Д_ЗаявкаНаАвансовыйОтчетЗатраты.Сумма
	               |ИЗ
	               |	Документ.Д_ЗаявкаНаАвансовыйОтчет.Затраты КАК Д_ЗаявкаНаАвансовыйОтчетЗатраты
	               |ГДЕ
	               |	Д_ЗаявкаНаАвансовыйОтчетЗатраты.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	               |	И Д_ЗаявкаНаАвансовыйОтчетЗатраты.Ссылка.ПометкаУдаления = ЛОЖЬ
	               |	И Д_ЗаявкаНаАвансовыйОтчетЗатраты.Предприятие = &ЦФО
	               |	И Д_ЗаявкаНаАвансовыйОтчетЗатраты.Подразделение = &Подразделение
	               |	И Д_ЗаявкаНаАвансовыйОтчетЗатраты.Статья = &СтатьяДДС
	               |	И ВЫБОР
	               |			КОГДА &ИнвПроект = НЕОПРЕДЕЛЕНО
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ Д_ЗаявкаНаАвансовыйОтчетЗатраты.ИнвПроект = &ИнвПроект
	               |		КОНЕЦ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СУММА(таблицы.СуммаДДС) КАК СуммаДДС
	               |ИЗ
	               |	таблицы КАК таблицы";
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаОкончания" ,КонецМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("ЦФО", ЦФО);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("СтатьяДДС",СтатьяБДДС);
	Запрос.УстановитьПараметр("ИнвПроект", ИнвПроект);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.СуммаДДС
	Иначе 
		Возврат 0
	КонецЕсли;
	
КонецФункции


&НаКлиенте
Процедура СЗСтатьяБДДСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//СтандартнаяОбработка = Ложь;
	//Сп = Новый СписокЗначений;
	//Сп.Добавить("1");
	//Сп.Добавить("2");
	//
	//а = ВыбратьИзСписка(Сп);
	
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЛимитов(ЛимитДоступен)
	Элементы.СЗЛимитНаНачало.ТолькоПросмотр = 1 - ЛимитДоступен;
	Элементы.СЗЛимитНаНачалоЗатраты.ТолькоПросмотр = 1 - ЛимитДоступен;
КонецПроцедуры

&НаКлиенте
Процедура СЗСтатьяЗатратПриИзменении(Элемент)
	
	Элементы.СЗ.ТекущиеДанные.СуммаППДДС = 0;
	Элементы.СЗ.ТекущиеДанные.СуммаПП = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура СЗВалютаПриИзменении(Элемент)
	Если Не ЗначениеЗаполнено(Элементы.СЗ.ТекущиеДанные.Валюта) Тогда
		Элементы.СЗ.ТекущиеДанные.Валюта = УЧ_Сервер.НациональнаяВалюта();
	КонецЕсли;
	ВидимостьКолонок();
	УстановитьСоответствиеСуммВСтроке(Элементы.СЗ.ТекущиеДанные.НомерСтроки - 1);
КонецПроцедуры

&НаСервере
Процедура УстановитьСоответствиеСуммВСтроке(ИндексТекСтроки)
	
	//Если Не ЗначениеЗаполнено(Объект.СЗ[ИндексТекСтроки].Валюта) Тогда
	//	ТекСтрокаВалюта = УЧ_Сервер.НациональнаяВалюта()
	//Иначе
	//	ТекСтрокаВалюта = Объект.СЗ[ИндексТекСтроки].Валюта;
	//КонецЕсли;
	//
	//ПлановыйКурсСтруктура = РасчетыБюджет.ПолучитьПлановыйКурс(Неопределено, ТекСтрокаВалюта, Объект.СЗ[ИндексТекСтроки].ЦФО.ОсновнаяВалютаУчета, Объект.Дата); 
	//ТекущийПлановыйКурс = ПлановыйКурсСтруктура.Курс;
	//
	//Если Не ПлановыйКурсСтруктура.КурсНайден Тогда
	//	сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(Объект, "Не установлено значение курса. Валюта1: " + ТекСтрокаВалюта + ". Валюта2: " + Объект.СЗ[ИндексТекСтроки].ЦФО.ОсновнаяВалютаУчета + ". Сценарий: " + ПлановыйКурсСтруктура.Сценарий + ".", "СЗ", ИндексТекСтроки + 1, "Валюта",);
	//КонецЕсли;
	//
	//Объект.СЗ[ИндексТекСтроки].СуммаСеб = Объект.СЗ[ИндексТекСтроки].СуммаСеб_Вал * ТекущийПлановыйКурс;
	//Объект.СЗ[ИндексТекСтроки].СуммаБДДС = Объект.СЗ[ИндексТекСтроки].СуммаБДДС_Вал * ТекущийПлановыйКурс;
	
КонецПроцедуры

&НаКлиенте
Процедура СЗСуммаБДДС_ВалПриИзменении(Элемент)
	УстановитьСоответствиеСуммВСтроке(Элементы.СЗ.ТекущиеДанные.НомерСтроки - 1);	
КонецПроцедуры

&НаКлиенте
Процедура СЗСуммаБДДСПриИзменении(Элемент)
	
	ЛимитСКорректировкой = Элементы.СЗ.ТекущиеДанные.СуммаППДДС + Элементы.СЗ.ТекущиеДанные.СуммаБДДС;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	сабОбщегоНазначения.ОтобразитьСостояниеДокумента(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	сабОбщегоНазначения.ОтобразитьСостояниеДокумента(ЭтаФорма, ТекущийОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СЗПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Элемент.ТекущиеДанные.ЦФО = Объект.Предприятие;
	Элемент.ТекущиеДанные.ПодразделениеЦФО = Объект.Подразделение;
	
КонецПроцедуры

&НаКлиенте
Процедура СЗКлючАналитикиСтрокиЗатратПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Элементы.СЗ.ТекущиеДанные.КлючАналитикиСтрокиЗатрат) Тогда
		ТекДанные = Элементы.СЗ.ТекущиеДанные;
		ДанныеКлючаАналитики = ДанныеСтроки(ТекДанные.КлючАналитикиСтрокиЗатрат)[0];
		//ЗаполнитьЗначенияСвойств(ТекДанные, ДанныеКлючаАналитики,,"СуммаСеб");
		//ТекДанные.СтатьяБДДС = ДанныеКлючаАналитики.СтатьяДДС;
		//ТекДанные.ЦФО = ДанныеКлючаАналитики.Предприятие;
		//ТекДанные.ВидДеятельности = ДанныеКлючаАналитики.Подразделение;
		//Если ТипЗнч(ТекДанные.СчетОрганизации) = Тип("СправочникСсылка.БанковскиеСчетаОрганизаций") Тогда
		//	ТекДанные.Источник = ПредопределенноеЗначение("Перечисление.Д_ИсточникиСредств.БезНал");
		//	ТекДанные.Организация = БюджетныйНаСервере.ВернутьРеквизит(ТекДанные.СчетОрганизации, "Владелец");
		//Иначе
		//	ТекДанные.Источник = ПредопределенноеЗначение("Перечисление.Д_ИсточникиСредств.Нал");
		//КонецЕсли;
		//ТекДанные.ИнвПроект = ?(ЗначениеЗаполнено(ТекДанные.ИнвПроект), ТекДанные.ИнвПроект, Неопределено);
	КонецЕсли;
	//РассчитатьЛимитыПоСтроке(Неопределено);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеСтроки(КлючАналитики)

	  Запрос = Новый Запрос;
	  Запрос.Текст = "ВЫБРАТЬ
	  |	*
	  |ИЗ
	  |	Справочник.КлючиАналитикиБюджетов КАК КлючиАналитикиБюджетов
	  |ГДЕ
	  |	КлючиАналитикиБюджетов.Ссылка = &Ссылка";
	  
	  Запрос.УстановитьПараметр("Ссылка", КлючАналитики);
	  
	  Результат = Запрос.Выполнить();
	  Выборка = Результат.Выгрузить();
	  
	  Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Выборка);
	  

КонецФункции // ()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда
		НовыйОбъектСсылка = Документы.Д_ЗаявкаНаКорректировкуБюджета.ПолучитьСсылку(Новый УникальныйИдентификатор);
		ТекущийОбъект.УстановитьСсылкуНового(НовыйОбъектСсылка);
	КонецЕсли;
	
	СоздаватьГрафикБюджета = Объект.Сценарий.СоздаватьГрафикОплат;
	
	Для Каждого ТекТЧ Из ТекущийОбъект.Метаданные().ТабличныеЧасти Цикл
		
		Если НЕ ТекТЧ.Реквизиты.Найти("УИД") = Неопределено Тогда
			
			Для Каждого СтрокаТЧ Из ТекущийОбъект[ТекТЧ.Имя] Цикл
				
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.УИД) Тогда
					СтрокаТЧ.УИД = Новый УникальныйИдентификатор;			
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;

		Если НЕ ТекТЧ.Реквизиты.Найти("КлючАналитикиБюджета") = Неопределено И СоздаватьГрафикБюджета Тогда
			
			Для Каждого СтрокаТЧ Из ТекущийОбъект[ТекТЧ.Имя] Цикл
				
				//Если НЕ ЗначениеЗаполнено(СтрокаТЧ.КлючАналитикиБюджета) Тогда
				СоздатьОбновитьКлючАналитики(СтрокаТЧ, ТекущийОбъект);			
				//КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицирован", Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка));
	
КонецПроцедуры

&НаСервере
Процедура СоздатьОбновитьКлючАналитики(СтрокаТЧ, ТекущийОбъект)
	Если ЗначениеЗаполнено(СтрокаТЧ.КлючАналитикиСтрокиЗатрат) Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаТЧ.КлючАналитикиБюджета) Тогда
		НовыйКлючАналитики = СтрокаТЧ.КлючАналитикиБюджета.ПолучитьОбъект();
	Иначе
		НовыйКлючАналитики = Справочники.КлючиАналитикиБюджетов.СоздатьЭлемент();
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(НовыйКлючАналитики, СтрокаТЧ);
	НовыйКлючАналитики.УИДСтроки = СтрокаТЧ.УИД;
	НовыйКлючАналитики.Предприятие = Объект.Предприятие;
	НовыйКлючАналитики.СтатьяДДС = СтрокаТЧ.СтатьяБДДС;
	НовыйКлючАналитики.Месяц = НачалоМесяца(Объект.Дата);
	НовыйКлючАналитики.СценарийПлана = Объект.Сценарий;
	НовыйКлючАналитики.Сумма = СтрокаТЧ.СуммаБДДС;
	НовыйКлючАналитики.Наименование = СтрокаТЧ.Основание;
	НовыйКлючАналитики.Документ = ?(ЗначениеЗаполнено(ТекущийОбъект.Ссылка), ТекущийОбъект.Ссылка, ТекущийОбъект.ПолучитьСсылкуНового());
	НовыйКлючАналитики.Записать();
	СтрокаТЧ.КлючАналитикиБюджета = НовыйКлючАналитики.Ссылка;
КонецПроцедуры
 


