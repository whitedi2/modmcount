

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	//КонецЕсли;
	
	//++саб
	сабПриЧтенииНаСервере(ТекущийОбъект);
	//--саб
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, Новый Структура("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты") );
	//КонецЕсли;
	
	//++саб
	сабПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	//--саб
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	//КонецЕсли;
	
	//++саб
	сабПриОткрытии(Отказ);
	//--саб
	
	ОбновитьДанныеКолонкиСуммаБезНДСПоТТН();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	Если МодульУправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
	//		ОбновитьЭлементыДополнительныхРеквизитов();
	//		МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	//	КонецЕсли;
	//КонецЕсли;
	
	//++саб
	сабОбработкаОповещения(ИмяСобытия, Параметр, Источник);
	//--саб
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	//КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицирован", Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка));
	//ТекущийОбъект.ДополнительныеСвойства.Вставить("СрокОплаты", СрокОплаты);
	
	//Синхронизация ТЧ СерииНоменклатуры с документом БУ
	//Если ЗначениеЗаполнено(Объект.Ссылка) И Не Отказ И БюджетныйНаСервере.ЕстьСвойствоОбъекта(ЭтотОбъект, "ДокументБУ") И ЗначениеЗаполнено(ЭтотОбъект.ДокументБУ) И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
	//	Если Не ОбщегоНазначения.КоллекцииИдентичны(Объект.СерииНоменклатуры, Объект.Ссылка.СерииНоменклатуры,"НомерСтроки,Номенклатура,ДатаПроизводства,Количество,НомерСтрокиРеализации,СерияНоменклатуры",,Истина) Тогда
	//		ПараметрыЗаписи.Вставить("СинхронизироватьСерииНоменклатурыСДокументомБух",Истина); 
	//	КонецЕсли;
	//КонецЕсли;
		
	Если сабОбщегоНазначенияПовтИсп.ПолучитьСерийныйУчет() Тогда
		сабОперОбщегоНазначения.ПерезаполнитьТЧСерииНоменклатурыПередЗаписью(Объект.ТабличнаяЧасть,ТекущийОбъект.СерииНоменклатуры);
		Если Не Отказ И БюджетныйНаСервере.ЕстьСвойствоОбъекта(ЭтотОбъект, "ДокументБУ") И ЗначениеЗаполнено(ЭтотОбъект.ДокументБУ) И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ПараметрыЗаписи.Вставить("СинхронизироватьСерииНоменклатурыСДокументомБух",Истина); 
		КонецЕсли;
	КонецЕсли;
	
	сабОбщегоНазначенияБУХ.ФормаДокументаУУОбработкаБУПередЗаписью(ЭтотОбъект, ТекущийОбъект);

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	МодульУправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
	//КонецЕсли;
	
КонецПроцедуры


// СтандартныеПодсистемы.КонтактнаяИнформация

// Поддержка дополнительных реквизитов.

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	//КонецЕсли;
	
КонецПроцедуры




// Конец СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура сабПриОткрытии(Отказ)
	
	//-lud 19/10/22 Вся проверка вынесена в модуль объекта, в процедуру Обработка заполнения
	//Отказ = сабОперОбщегоНазначенияНаКлиенте.ПроверкаСозданияНаОснованииНаКлиенте(Объект);
	//Если Отказ Тогда
	//	Возврат;	
	//КонецЕсли; 

	Если СтрНайти(Объект.Комментарий, "##НеверныйВидОперации") Тогда
		Предупреждение("Невозможно создать поступление от поставщика. Неверный вид операции: <" + Сред(Объект.Комментарий, 22) + ">!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	
	Если Не ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
		СоответствиеСчетаИФлага();
		Прочитать();
	КонецЕсли;
	
	ВидОперацииПриИзменении(Неопределено);
	СчетПриИзменении(Неопределено);
	
	ФлагВалютыПриИзменении("");
	
	Если Объект.Услуги.Количество() > 0 И Объект.ТабличнаяЧасть.Количество() = 0 Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаУслуги;
	КонецЕсли;	
	
КонецПроцедуры
  
&НаКлиенте
Процедура ТабличнаяЧастьКоличествоПриИзменении(Элемент)
	РассчитатьСумму();
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьЦенаПриИзменении(Элемент)
	РассчитатьСумму();
КонецПроцедуры
&НаКлиенте
Процедура ТабличнаяЧастьДоставкаПриИзменении(Элемент)
	Если Элементы.ТабличнаяЧасть.ТекущиеДанные.Доставка Тогда
		Элементы.ТабличнаяЧасть.ТекущиеДанные.СуммаДоставки = Элементы.ТабличнаяЧасть.ТекущиеДанные.Количество * Элементы.ТабличнаяЧасть.ТекущиеДанные.Доставка;
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьСуммаПриИзменении(Элемент)
	ТекКоличество = Элементы.ТабличнаяЧасть.ТекущиеДанные.Количество;
	Элементы.ТабличнаяЧасть.ТекущиеДанные.Цена = ?(ТекКоличество <> 0, Элементы.ТабличнаяЧасть.ТекущиеДанные.Сумма / ТекКоличество, 0);
	РассчитатьСумму(,,Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьСуммаДоставкиПриИзменении(Элемент)
	ТекКоличество = Элементы.ТабличнаяЧасть.ТекущиеДанные.Количество;
	Элементы.ТабличнаяЧасть.ТекущиеДанные.Доставка = ?(ТекКоличество <> 0, Элементы.ТабличнаяЧасть.ТекущиеДанные.СуммаДоставки / ТекКоличество, 0);
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеПриИзменении(Элемент)
	ПредприятиеПриИзмененииНаСервере();
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьДобавленныеКолонкиТаблиц();
	КонецЕсли;	
	
	//УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("сабУчетПоПодразделениям", Объект.Предприятие));
КонецПроцедуры

&НаСервере
Процедура ПредприятиеПриИзмененииНаСервере()
	сабОбщегоНазначенияКлиентСервер.СкрытьПодразделения(ЭтаФорма);
	Объект.УчитыватьНДС = МАКС(Объект.Предприятие.УчетнаяПолитика.УчетНДС, Объект.УчитыватьНДС);
	//Если Не Объект.УчитыватьНДС Тогда
	//	Объект.СуммаВключаетНДС = Истина;	
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФлагВалютыПриИзменении(Элемент)
	//Элементы.ГруппаВалюты.Видимость = Объект.ФлагВалюты;
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	Объект.Курс = БюджетныйНаСервере.ТекущийКурс(Объект.Валюта,Объект.Дата,Объект.Предприятие);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСчета60()
	
	Счета60 = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Учетный.Ссылка КАК Ссылка
	               |ИЗ
	               |	ПланСчетов.Учетный КАК Учетный
	               |ГДЕ
	               |	Учетный.Родитель В ИЕРАРХИИ(&Счет60)
	               |	И НЕ Учетный.Ссылка = &Счет60";
	
	Запрос.УстановитьПараметр("Счет60", ПланыСчетов.Учетный.Счет60());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Счета60.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат Счета60;
	
КонецФункции

&НаКлиенте
Процедура СчетПриИзменении(Элемент)

	//БюджетныйНаКлиенте.НазначитьСубконто(Элементы, ЭтаФорма, "Контрагент", "Договор",, Объект.СчетКонтрагента, , "ГруппаВалюты", НЕ Элемент = Неопределено);
	
	Элементы.Контрагент.Видимость = (Не Объект.СчетКонтрагента = УЧ_Сервер.СчетПоКоду("002"));
		
	СчетПриИзмененииНаКлиенте(Не Элемент = Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура СчетПриИзмененииНаСервере(Изменять)
	
	Если Объект.СчетКонтрагента = УЧ_Сервер.СчетПоКоду("79.01") ИЛИ Объект.СчетКонтрагента = УЧ_Сервер.СчетПоКоду("79.02") Тогда
		Если Изменять Тогда
			Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				Объект.Контрагент = Объект.Контрагент.ЭтоОрганизация;
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ВнутренниеДоговоры.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ВнутренниеДоговоры КАК ВнутренниеДоговоры
			|ГДЕ
			|	ВнутренниеДоговоры.ДоговорКонтрагента = &ДоговорКонтрагента";
			
			Запрос.УстановитьПараметр("ДоговорКонтрагента", Объект.Договор);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Объект.Договор = Выборка.Ссылка;			
			КонецЦикла;

		КонецЕсли;
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Организации");
		Элементы.Договор.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ВнутренниеДоговоры");
		
	Иначе
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		Элементы.Договор.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СчетПриИзмененииНаКлиенте(Изменять)
	
	ДанныеСчета = УправленческийУчетПовтИсп.ПолучитьСвойстваСчета(Объект.СчетКонтрагента, Объект.Предприятие);
	
	Наименование1 = ДанныеСчета["ВидСубконто1ТипЗначенияСтрока"];
	Наименование2 = ДанныеСчета["ВидСубконто2ТипЗначенияСтрока"];
	Наименование3 = ДанныеСчета["ВидСубконто3ТипЗначенияСтрока"];
	//УчетПоПодразделениям = ДанныеСчета["УчетПоПодразделениям"];
	
	//Элементы.Контрагент.Заголовок = Наименование1;
	Элементы.Договор.Заголовок = Наименование2;
	//Элементы.Субконто3.ПодсказкаВвода = Наименование3;
	//Элементы.КорПодразделение.ПодсказкаВвода = ?(УчетПоПодразделениям, "Подразделение затрат", "");
	
	Элементы.Контрагент.Видимость = ЗначениеЗаполнено(Наименование1);
	Элементы.Договор.Видимость = ЗначениеЗаполнено(Наименование2);
	//Элементы.Субконто3.Видимость = ЗначениеЗаполнено(Наименование3);
	//Элементы.КорПодразделение.Видимость = УчетПоПодразделениям;
	
	СчетПриИзмененииНаСервере(Изменять);
	
КонецПроцедуры


&НаСервере
Процедура СоответствиеСчетаИФлага()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекущийДокумент = Объект.Ссылка.ПолучитьОбъект();
		
		Если Объект.Флаг60_79 = 0 Тогда
			ТекущийДокумент.СчетКонтрагента = ПланыСчетов.Учетный.Счет6001();
		ИначеЕсли Объект.Флаг60_79 = 1 Тогда
			ТекущийДокумент.СчетКонтрагента = ПланыСчетов.Учетный.Счет7902(Объект.Предприятие);
		//ИначеЕсли Объект.Флаг60_79 = 2 Тогда
		//	ТекущийДокумент.СчетКонтрагента = ПланыСчетов.Учетный.УсловеноВнутренниеВзаиморасчеты
		КонецЕсли;	
		
		ТекущийДокумент.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьСтатьяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекФорма = ПолучитьФорму("Справочник.СтатьиЗатрат.Форма.ФормаВыбораБезГрупп", , Элемент);
	
	НовыйОтбор = ТекФорма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Наименование");
	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	НовыйОтбор.ПравоеЗначение = "Транспортные";
	
	ТекФорма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура РеализацияВидДоставкиПриИзменении(Элемент)
	
	Если Элементы.ТабличнаяЧасть.ТекущиеДанные.ВидДоставки = "Авто" Тогда
		Элементы.ТабличнаяЧасть.ТекущиеДанные.Статья = ПредопределенноеЗначение("Справочник.СтатьиЗатрат.ТранспортныеАвто");
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура сабПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	БюджетныйНаСервере.ДействияПриСозданииФормыДокумента(ЭтаФорма);
	ЗаполнитьСчетаПокупателя();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) И НЕ ЗначениеЗаполнено(Параметры.Основание) И Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		//Объект.УчитыватьНДС = Истина;
		//Объект.ЦенаВключаетНДС = Истина;
		Если Не ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
			Объект.СчетКонтрагента = ПланыСчетов.Учетный.Счет6001();
		КонецЕсли;
		//Объект.ВидОперации = Перечисления.ВидыПоступлений.Поступление;
		Если ЗначениеЗаполнено(Объект.Подразделение) И ЗначениеЗаполнено(Объект.Подразделение.Склад) Тогда
			Объект.Склад = Объект.Подразделение.Склад;			
		КонецЕсли;
		
		Если Параметры.Свойство("ВидОперации") Тогда
			Объект.ВидОперации = Параметры.ВидОперации;		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Предприятие) Тогда
			Объект.УчитыватьНДС = Объект.Предприятие.УчетнаяПолитика.УчетНДС;
			Если Не Объект.УчитыватьНДС Тогда
				Объект.СуммаВключаетНДС = Истина;	
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;	
	
	//временно, позже изменить тип реквизита
	//Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	//Элементы.Договор.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов");
	
	//Если Не БюджетныйНаСервере.РольАдминаДоступнаСервер() И Не сабОбщегоНазначения.ПолучитьЗначениеСвойства(БюджетныйНаСервере.ПолучитьПользователя(), "Возможность менять цену в заказах (Пользователь)") = Истина Тогда
	//	Элементы.ТабличнаяЧастьЦена.ТолькоПросмотр = Истина;
	//	Элементы.ТабличнаяЧастьСумма.ТолькоПросмотр = Истина;
	//	Элементы.ТабличнаяЧастьСтавкаНДС.ТолькоПросмотр = Истина;
	//	Элементы.ТабличнаяЧастьСуммаНДС.ТолькоПросмотр = Истина;
	//	Элементы.ТабличнаяЧастьВидЦеныПоставщика.ТолькоПросмотр = Истина;
	//	Элементы.ТабличнаяЧастьОбновитьЦену.Видимость = Ложь;
	//КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДокОснование) ИЛИ ТипЗнч(Объект.ДокОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		УстановитьСвязьПоВиду();
	КонецЕсли;
	
	//++для опер учета
	ОперУчетВключен = Ложь;
	//Элементы.ТабличнаяЧастьСуммаБезНдсПоПервичнымДокументам.Видимость = ОперУчетВключен;
	//Элементы.ТабличнаяЧастьНоменклатураКод.Видимость = ОперУчетВключен;
	Элементы.Подразделение.АвтоОтметкаНезаполненного = ОперУчетВключен;
	Элементы.Подразделение.ОтметкаНезаполненного = ОперУчетВключен;
	Элементы.Договор.АвтоОтметкаНезаполненного = ОперУчетВключен;
	Элементы.Договор.ОтметкаНезаполненного = ОперУчетВключен;

	ЗаполнитьАртикул();
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ИспользоватьСерии = Справочники.СерииНоменклатуры.СерииНоменклатурыИспользуются();
	ИспользоватьМОЛ = ПланыСчетов.Учетный.МОЛИспользуются();
	Элементы.МОЛ.Видимость = ИспользоватьМОЛ;
	
	//Синхронизация серий
	Если сабОбщегоНазначенияПовтИсп.ПолучитьСерийныйУчет() Тогда
		сабОперОбщегоНазначения.СинхронизацияСерийПриСозданииФормы(Объект.ТабличнаяЧасть,Объект.СерииНоменклатуры);
	КонецЕсли;
	
	ИспользованиеГТД = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("ИспользованиеГТД");
	
	ВестиУчетНДС = Объект.Предприятие.УчетнаяПолитика.УчетНДС;
	Элементы.УчитыватьНДС.Видимость = ВестиУчетНДС;
	Элементы.СуммаВключаетНДС.Видимость = ВестиУчетНДС;
	
	Если Не Элементы.Найти("ТабличнаяЧастьСчетЗатрат") = Неопределено Тогда
		Элементы.ТабличнаяЧастьСчетЗатрат.СписокВыбора.ЗагрузитьЗначения(УправленческийУчетПовтИсп.ПолучитьСчетаЗатрат(Истина));
		Элементы.СчетЗатрат.СписокВыбора.ЗагрузитьЗначения(УправленческийУчетПовтИсп.ПолучитьСчетаЗатрат(Истина));
	КонецЕсли;
	
	СчетЗатратПриИзмененииНаСервере(Не ЗначениеЗаполнено(Объект.Ссылка));
	
	ПереопределитьСвязиПараметровВыбора();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязьПоВиду()
	Массив = Новый Массив;
	Массив.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив);
	Элементы.ДокОснование.ОграничениеТипа = ОписаниеТиповЧ;
	
	НоваяСвязь = Новый ПараметрВыбора("Отбор.ВидОперации", Перечисления.ВидыЗаказов.ЗакупкаТоваров);
	НоваяСвязь2 = Новый ПараметрВыбора("Отбор.Подразделение", Объект.Подразделение);
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НоваяСвязь);
	НовыйМассив.Добавить(НоваяСвязь2);
	НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.ДокОснование.ПараметрыВыбора = НовыеСвязи;
КонецПроцедуры


&НаСервере
Функция ЗаполнитьСчетаПокупателя()
	
	МассивСч = Новый Массив;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Учетный.Ссылка КАК Ссылка,
	               |	Учетный.Наименование КАК Наименование,
	               |	Учетный.Код КАК Код
	               |ИЗ
	               |	ПланСчетов.Учетный КАК Учетный
	               |ГДЕ
	               |	Учетный.Ссылка В ИЕРАРХИИ (&Счета)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Код";
	
	
	Счета = Новый Массив;
	Счета.Добавить(ПланыСчетов.Учетный.Счет60());
	Счета.Добавить(ПланыСчетов.Учетный.Счет7901());
	Счета.Добавить(ПланыСчетов.Учетный.Счет7902());
	Счета.Добавить(ПланыСчетов.Учетный.Счет76());
	Счета.Добавить(ПланыСчетов.Учетный.НайтиПоКоду("002"));
	Запрос.УстановитьПараметр("Счета", Счета);
	Результат = Запрос.Выполнить();
	МассивСч = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Элементы.Счет.СписокВыбора.ЗагрузитьЗначения(МассивСч);
	Для каждого ТекСчет Из Элементы.Счет.СписокВыбора Цикл
		ТекСчет.Представление = Строка(ТекСчет.Значение) + " " + ТекСчет.Значение.Наименование;	
	КонецЦикла; 
	
КонецФункции


&НаКлиенте
Процедура СоздатьСоответствие(Команда)
	
	ТекЭлемент = Элементы.Услуги.ТекущиеДанные[СтрЗаменить(Элементы.Услуги.ТекущийЭлемент.Имя, "Услуги", "")];
	ФормаСоответствия = ПолучитьФорму("Справочник.СоответствиеОбъектов.Форма.ФормаЭлемента");
	ФормаСоответствия.Объект.Значение77 = ТекЭлемент;
	ФормаСоответствия.Объект.Предприятие = Объект.Предприятие;
	ФормаСоответствия.Объект.ТипДокумента = "Поступление товаров и услуг";
	ФормаСоответствия.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура сабОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьФормуУч_Операция" И Параметр = Объект.Ссылка Тогда
		ЭтаФорма.Прочитать();
		ОбновитьОтображениеДанных();
	ИначеЕсли ИмяСобытия = "Запись_Файл" Тогда
		Если Параметр.Свойство("ФормаВладелецУИД") И Параметр.ФормаВладелецУИД = ЭтаФорма.УникальныйИдентификатор Тогда
			сабОбщегоНазначения.ПрикрепитьФайлКДокументу(Параметр); 
		КонецЕсли
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Процедура сабПриЧтенииНаСервере(ТекущийОбъект)
	сабОбщегоНазначения.ОтобразитьСостояниеДокумента(ЭтаФорма);
	ЗаполнитьДобавленныеКолонкиТаблиц();
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	сабОбщегоНазначения.ОтобразитьСостояниеДокумента(ЭтаФорма, ТекущийОбъект);
	
	//Синхронизация серий
	Если сабОбщегоНазначенияПовтИсп.ПолучитьСерийныйУчет() Тогда 
		ДокументСоздан = Истина;
		ТекстОшибки = "";
		сабОперОбщегоНазначения.СинхронизацияСерийПриЗаписиНаСервереФормы(ПараметрыЗаписи,ЭтотОбъект,ТекущийОбъект,Отказ,ДокументСоздан,ТекстОшибки);
		Если Не ДокументСоздан Тогда
			Сообщить("Табличная часть ""Серии номенклатуры"" не была синхронизирована с документом " + ЭтотОбъект.ДокументБУ + ". По причине: " + ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	////синхронизация ТЧ СерииНоменклатуры с документом БУ
	//Если сабОбщегоНазначенияПовтИсп.ПолучитьСерийныйУчет() Тогда
	//	Если ПараметрыЗаписи.Свойство("СинхронизироватьСерииНоменклатурыСДокументомБух") Тогда
	//		Если Не Отказ И ПараметрыЗаписи.СинхронизироватьСерииНоменклатурыСДокументомБух	Тогда
	//			УстановитьПривилегированныйРежим(Истина);
	//			ДокументБУОбъект = ЭтотОбъект.ДокументБУ.ПолучитьОбъект();  
	//			ДокументБУОбъект.ДополнительныеСвойства.Вставить("НеДобавлятьЗаписьВРегистрИзмененных",Истина);
	//			ДокументБУОбъект.СерииНоменклатуры.Загрузить(ТекущийОбъект.СерииНоменклатуры.Выгрузить());
	//			Для Каждого СтрокаТЧТовары Из ДокументБУОбъект.Товары Цикл 
	//			СтруктураОтбораТЧСерии = Новый Структура("НомерСтрокиРеализации,Номенклатура",СтрокаТЧТовары.НомерСтроки,СтрокаТЧТовары.Номенклатура);
	//			МассивСтрокТЧСерии = ДокументБУОбъект.СерииНоменклатуры.НайтиСтроки(СтруктураОтбораТЧСерии);
	//			Если МассивСтрокТЧСерии.Количество() = 1 Тогда
	//				СтрокаТЧТовары.СерияНоменклатуры = МассивСтрокТЧСерии[0].СерияНоменклатуры;
	//			Иначе
	//			    СтрокаТЧТовары.СерияНоменклатуры = ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка");
	//			КонецЕсли;	
	//		КонецЦикла;

	//			Попытка
	//				ДокументБУОбъект.Записать();
	//			Исключение
	//				Сообщить("Табличная часть ""Серии номенклатуры"" не была синхронизирована с документом " + ЭтотОбъект.ДокументБУ + ". По причине: " +
	//				ОписаниеОшибки());
	//			КонецПопытки;
	//			УстановитьПривилегированныйРежим(Ложь);
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	РассчитатьСумму(Элементы.Услуги.ТекущиеДанные, "Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСумму(ТекДанные = Неопределено, ИмяТЧ = Неопределено, ПересчитыватьСумму = Истина)
	
	Если ТекДанные = Неопределено Тогда
		ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	КонецЕсли;
	Если ИмяТч = Неопределено Тогда
		ИмяТЧ = "ТабличнаяЧасть";
	КонецЕсли;
	
	Если Не ТекДанные = Неопределено Тогда
		Если ПересчитыватьСумму Тогда
			ТекДанные.Сумма = ТекДанные.Количество * ТекДанные.Цена;
		КонецЕсли; 
		сабОбщегоНазначенияБУХКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, ИмяТЧ,,,ПересчитыватьСумму);
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	РассчитатьСумму(Элементы.Услуги.ТекущиеДанные, "Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьНоменклатураПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	
	
	Если ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
		
		Если ТипЗнч(ТекДанные.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			ТекРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.Номенклатура, "СтавкаНДС, СтавкаНДС.Ставка, Счет10, ЕдиницаИзмерения, ВидСтавкиНДС, СтранаПроисхождения");
			
			ЗаполнитьЗначенияСвойств(ТекДанные, ТекРеквизиты); 
			
			ТекРеквизиты.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвВидовСтавокНДСБУХУУ().Получить(ТекРеквизиты.ВидСтавкиНДС);	
			//Установим НДС
			ТекДанные.СтавкаНДС = ТекРеквизиты.СтавкаНДС;
			
			//Установим вид цен и рассчитаем цены
			ТекДанные.ВидЦеныПоставщика = ЗаполнитьВидЦен(ТекДанные.Номенклатура, Объект.Предприятие, Объект.Подразделение, Объект.Контрагент, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()));
			ТекДанные.Цена = РассчитатьЦенуПоВидуЦен(ТекДанные.ВидЦеныПоставщика, ТекДанные.Номенклатура, Объект.Предприятие, Объект.Подразделение, Объект.Контрагент, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()), Объект.ДокОснование);
			
			//установим счет учета
			//ТекДанные.СчетУчета = сабОбщегоНазначения.ПолучитьСчетУчетаНоменклатуры(ТекДанные.Номенклатура, Объект.Организация, Объект.Склад);
			
			ТекДанные.Упаковка = ТекРеквизиты.ЕдиницаИзмерения;
			ТекДанные.ЕдиницаИзмерения = ТекРеквизиты.ЕдиницаИзмерения;
			
		ИначеЕсли ТипЗнч(ТекДанные.Номенклатура) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
			
			//ТекДанные.СчетУчета = УЧ_Сервер.СчетПоКоду("01");
			
		КонецЕсли;
	КонецЕсли;
	
	РассчитатьСумму();
	
КонецПроцедуры

#Область ПоискПоШК

&НаКлиенте
Процедура ПодобратьНоменклатуруПоШК(Команда)
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	ИмяТЧ = "ТабличнаяЧасть";
	ИмяРеквизитаНоменклатуры = "Номенклатура";
	ИмяРеквизитаКоличества = "Количество";
	сабОперОбщегоНазначенияНаКлиенте.ОбработатьЗаполнениеПоШтрихкодуНаКлиенте(ЭтаФорма, ИмяТЧ, ИмяРеквизитаНоменклатуры, ИмяРеквизитаКоличества, Штрихкод);	
	ТабличнаяЧастьНоменклатураПриИзменении(Неопределено);
КонецПроцедуры
#КонецОбласти

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
		
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьКоличествоПоПервичнымДокументамПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		ТекДанные.СуммаПоПервичнымДокументам = ТекДанные.КоличествоПоПервичнымДокументам * ТекДанные.Цена;
	КонецЕсли;	
	
	ТекРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.СтавкаНДС, "Ставка");
	Если НЕ ТекРеквизиты = Неопределено Тогда
		ТекДанные.СуммаНДСПоПервичнымДокументам = ТекДанные.СуммаПоПервичнымДокументам / (1+ТекРеквизиты.Ставка/100) * (ТекРеквизиты.Ставка/100);
	КонецЕсли;
	
	Если НЕ ТекРеквизиты = Неопределено Тогда
		ТекДанные.СуммаБезНДСПоПервичнымДокументам = ТекДанные.СуммаПоПервичнымДокументам - ТекДанные.СуммаНДСПоПервичнымДокументам;
		ИтогСуммыБезНдсПоТТН = Объект.ТабличнаяЧасть.Итог("СуммаБезНДСпоПервичнымДокументам")
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	СчетВДоговоре = БюджетныйНаСервере.ВернутьРеквизит(Объект.Договор, "СчетВзаиморасчетов");
	Если ЗначениеЗаполнено(СчетВДоговоре) Тогда
		Объект.СчетКонтрагента = СчетВДоговоре;
	КонецЕсли;
	
	Если Объект.СчетКонтрагента = УЧ_Сервер.СчетПоКоду("79.02") Тогда
		Объект.ПредприятиеПоставщик = БюджетныйНаСервере.ВернутьРеквизит(Объект.Контрагент, "ПредприятиеХодлинга");
		Объект.ДоговорВн = БюджетныйНаСервере.ВернутьРеквизит(Объект.Договор, "ВнутрихолдинговыйДоговор");
		Элементы.ПодразделениеВн.Видимость = Истина;
		//Элементы.ПредприятиеПоставщик.Видимость = Истина;
		Элементы.ДоговорВн.Видимость = Истина;
	Иначе
		Элементы.ПодразделениеВн.Видимость = Ложь;
		//Элементы.ПредприятиеПоставщик.Видимость = Ложь;
		Элементы.ДоговорВн.Видимость = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	Если НЕ Элемент = Неопределено Тогда
		ПодразделениеПриИзмененииСервер();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПодразделениеПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		РеквизитыПодразделения = БюджетныйНаСервере.ВернутьРеквизиты(Объект.Подразделение, "Склад, Организация");
		Если ЗначениеЗаполнено(РеквизитыПодразделения.Склад) Тогда
			Объект.Склад = РеквизитыПодразделения.Склад;
		КонецЕсли;
		Если ЗначениеЗаполнено(РеквизитыПодразделения.Организация) Тогда
			Объект.Организация = РеквизитыПодразделения.Организация;
		КонецЕсли;
	КонецЕсли; 
	КонтрагентПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьСтавкаНДСПриИзменении(Элемент)
	РассчитатьСумму();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьВидЦен(Номенклатура, Предприятие, Подразделение, Контрагент, Дата)

	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ЦеныНоменклатурыСрезПоследних.ВидЦены
	//|ИЗ
	//|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	//|			&Период,
	//|			ВидЦены.ЦенаПоставщика
	//|				И ВидЦены.Поставщик = &Контрагент
	//|				И Предприятие = &Предприятие
	//|				И Номенклатура = &Номенклатура
	//|				И Подразделение = &Подразделение) КАК ЦеныНоменклатурыСрезПоследних";
	//Запрос.УстановитьПараметр("Период", Дата);
	//Запрос.УстановитьПараметр("Контрагент", Контрагент);
	//Запрос.УстановитьПараметр("Предприятие", Предприятие);
	//Запрос.УстановитьПараметр("Подразделение", Подразделение);
	//Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	Возврат Выборка.ВидЦены;
	//КонецЦикла;
	
	Возврат Справочники.ВидыЦен.ПустаяСсылка();
	
КонецФункции

&НаСервереБезКонтекста
Функция РассчитатьЦенуПоВидуЦен(ВидЦены, Номенклатура, Предприятие, Подразделение, Контрагент, Дата, ДокЗаказ)

	//Если ЗначениеЗаполнено(ДокЗаказ) Тогда
	//	Период = ?(Контрагент.УсловияЦенПоставки = Перечисления.УсловияЦенПоставки.НаДатуПоставки, Дата, ДокЗаказ.Дата);
	//Иначе	
	//	Период = Дата;
	//КонецЕсли;	
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	МаркетинговыеМероприятия.ЦенаПоступления,
	//|	МаркетинговыеМероприятия.Номенклатура,
	//|	МаркетинговыеМероприятия.ДатаДокумента
	//|ПОМЕСТИТЬ ВТ_МаркетинговыеМероприятия
	//|ИЗ
	//|	РегистрСведений.МаркетинговыеМероприятия КАК МаркетинговыеМероприятия
	//|ГДЕ
	//|	МаркетинговыеМероприятия.Предприятие = &Предприятие
	//|	И МаркетинговыеМероприятия.Подразделение = &Подразделение
	//|	И МаркетинговыеМероприятия.Номенклатура = &Номенклатура
	//|	И МаркетинговыеМероприятия.ДатаЗаказовНач <= &Период
	//|	И МаркетинговыеМероприятия.ДатаЗаказовКон >= &Период
	//|	И МаркетинговыеМероприятия.ЦенаПоступления <> 0
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТ_МаркетинговыеМероприятия.Номенклатура,
	//|	МАКСИМУМ(ВТ_МаркетинговыеМероприятия.ДатаДокумента) КАК ДатаДокумента
	//|ПОМЕСТИТЬ ВТ_МаксДатаМаркетинговогоМероприятия
	//|ИЗ
	//|	ВТ_МаркетинговыеМероприятия КАК ВТ_МаркетинговыеМероприятия
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ВТ_МаркетинговыеМероприятия.Номенклатура
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТ_МаркетинговыеМероприятия.ЦенаПоступления,
	//|	ВТ_МаркетинговыеМероприятия.Номенклатура
	//|ПОМЕСТИТЬ ВТ_МаркетинговыеМероприятияИтог
	//|ИЗ
	//|	ВТ_МаксДатаМаркетинговогоМероприятия КАК ВТ_МаксДатаМаркетинговогоМероприятия
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаркетинговыеМероприятия КАК ВТ_МаркетинговыеМероприятия
	//|		ПО ВТ_МаксДатаМаркетинговогоМероприятия.Номенклатура = ВТ_МаркетинговыеМероприятия.Номенклатура
	//|			И ВТ_МаксДатаМаркетинговогоМероприятия.ДатаДокумента = ВТ_МаркетинговыеМероприятия.ДатаДокумента
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ЕСТЬNULL(ВТ_МаркетинговыеМероприятияИтог.ЦенаПоступления, ЦеныНоменклатурыСрезПоследних.Цена) КАК Цена
	//|ИЗ
	//|	ВТ_МаркетинговыеМероприятияИтог КАК ВТ_МаркетинговыеМероприятияИтог
	//|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	//|				&Период,
	//|				ВидЦены.ЦенаПоставщика
	//|					И ВидЦены.Поставщик = &Контрагент
	//|					И Предприятие = &Предприятие
	//|					И Номенклатура = &Номенклатура
	//|					И ВидЦены = &ВидЦены
	//|					И Подразделение = &Подразделение) КАК ЦеныНоменклатурыСрезПоследних
	//|		ПО ВТ_МаркетинговыеМероприятияИтог.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура";
	//Запрос.УстановитьПараметр("Период", Период);
	//Запрос.УстановитьПараметр("Контрагент", Контрагент);
	//Запрос.УстановитьПараметр("Предприятие", Предприятие);
	//Запрос.УстановитьПараметр("Подразделение", Подразделение);
	//Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	//Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	Возврат Выборка.Цена;
	//КонецЦикла;
	
	Возврат 0;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьЦену(Команда)
	
	Для Каждого ТекДанные Из Объект.ТабличнаяЧасть Цикл		
		//Установим вид цен и рассчитаем цены
		ТекДанные.ВидЦеныПоставщика = ЗаполнитьВидЦен(ТекДанные.Номенклатура, Объект.Предприятие, Объект.Подразделение, Объект.Контрагент, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()));
		ТекДанные.Цена = РассчитатьЦенуПоВидуЦен(ТекДанные.ВидЦеныПоставщика, ТекДанные.Номенклатура, Объект.Предприятие, Объект.Подразделение, Объект.Контрагент, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()), Объект.ДокОснование);
		
		//Установим НДС и артикул
		Если ЗначениеЗаполнено(ТекДанные.Номенклатура) И Не ЗначениеЗаполнено(ТекДанные.СтавкаНДС) Тогда
			ТекРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.Номенклатура, "СтавкаНДС, СтавкаНДС.Ставка, Код");
			ТекДанные.СтавкаНДС = ТекРеквизиты.СтавкаНДС;
		КонецЕсли;
		
		ТекДанные.Сумма = ТекДанные.Количество * ТекДанные.Цена;
		
		//лишний запрос делаем
		ТекРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.СтавкаНДС, "Ставка");
		Если НЕ ТекРеквизиты = Неопределено Тогда
			ТекДанные.СуммаНДС = ТекДанные.Сумма / ((100+ТекРеквизиты.Ставка)/100) * (ТекРеквизиты.Ставка/100);
		КонецЕсли;
		
		РассчитатьСумму();
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	КонтрагентПриИзмененииСервер();
	СчетПриИзмененииНаКлиенте(Не Элемент = Неопределено);
	ДоговорПриИзменении(Неопределено);
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	РеквизитыДоговора = сабОперОбщегоНазначения.ПолучитьДоговорКонтрагентаПоУмолчанию(Объект.Контрагент, ?(НЕ ЗначениеЗаполнено(Объект.Организация), Неопределено, Объект.Организация));
	Если ЗначениеЗаполнено(РеквизитыДоговора.Договор) Тогда
		Объект.Договор = РеквизитыДоговора.Договор;
	КонецЕсли; 
	
	Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		Если ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(Объект.Предприятие) Тогда
			Если Объект.Контрагент.ОрганизацияВГОВНХ Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	УчетныеПолитики.СчетВНХТоварныхВзаиморасчетов КАК СчетВНХТоварныхВзаиморасчетов
				|ИЗ
				|	Справочник.УчетныеПолитики КАК УчетныеПолитики
				|ГДЕ
				|	УчетныеПолитики.Ссылка В
				|			(ВЫБРАТЬ
				|				Предприятия.УчетнаяПолитика КАК УчетнаяПолитика
				|			ИЗ
				|				Справочник.Предприятия КАК Предприятия
				|			ГДЕ
				|				Предприятия.Ссылка = &ПредприятиеСсылка)";
				
				Запрос.УстановитьПараметр("ПредприятиеСсылка", Объект.Предприятие);
				
				РезультатЗапроса = Запрос.Выполнить();
				Если Не РезультатЗапроса.Пустой() Тогда
					Выборка = РезультатЗапроса.Выбрать(); 
					Выборка.Следующий();
					Если Объект.Контрагент.ОрганизацияВГОВНХ Тогда
						Если ЗначениеЗаполнено(Выборка.СчетВНХТоварныхВзаиморасчетов) Тогда
							Объект.СчетКонтрагента = Выборка.СчетВНХТоварныхВзаиморасчетов;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе 
				Объект.СчетКонтрагента = ПланыСчетов.Учетный.Счет6001();
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	ПереопределитьСвязиПараметровВыбора();

КонецПроцедуры

&НаКлиенте
Процедура БонуснаяПродукцияКоличествоПриИзменении(Элемент)
	ТекДанные = Элементы.БонуснаяПродукция.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		ТекДанные.Сумма = ТекДанные.Количество * ТекДанные.Цена;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура БонуснаяПродукцияЦенаПриИзменении(Элемент)
	ТекДанные = Элементы.БонуснаяПродукция.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		ТекДанные.Сумма = ТекДанные.Количество * ТекДанные.Цена;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура БонуснаяПродукцияНоменклатураПриИзменении(Элемент)
	
	ТекДанные = Элементы.БонуснаяПродукция.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
		//Установим вид цен и рассчитаем цены
		ТекДанные.ВидЦеныПоставщика = ЗаполнитьВидЦен(ТекДанные.Номенклатура, Объект.Предприятие, Объект.Подразделение, Объект.Контрагент, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()));
		ТекДанные.Цена = РассчитатьЦенуПоВидуЦен(ТекДанные.ВидЦеныПоставщика, ТекДанные.Номенклатура, Объект.Предприятие, Объект.Подразделение, Объект.Контрагент, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()), Объект.ДокОснование);
		ТекДанные.Сумма = ТекДанные.Количество * ТекДанные.Цена;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПереопределитьСвязиПараметровВыбора()
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(Новый СвязьПараметраВыбора("Отбор.Предприятие", "Объект.Предприятие"));
	//Если ТипЗнч(Объект.Контрагент)  = Тип("СправочникСсылка.Контрагенты") Тогда
		НовыйМассив.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Контрагент"));
	//КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
			НовыйМассив.Добавить(Новый СвязьПараметраВыбора("Отбор.ОрганизацияВладельца", "Объект.Организация"));
		Иначе	
			НовыйМассив.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));
		КонецЕсли;
	КонецЕсли;		
	
	НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
	
	Элементы.Договор.СвязиПараметровВыбора = НовыеСвязи;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//ПереопределитьСвязиПараметровВыбора();	

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеКолонкиСуммаБезНДСПоТТН()
	
	Для Каждого Стр Из Объект.ТабличнаяЧасть Цикл
		Стр.СуммаБезНдсПоПервичнымДокументам = Стр.СуммаПоПервичнымДокументам - Стр.СуммаНДСПоПервичнымДокументам;
	КонецЦикла;
	
	ИтогСуммыБезНдсПоТТН = Объект.ТабличнаяЧасть.Итог("СуммаБезНДСпоПервичнымДокументам")
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ОбновитьДанныеКолонкиСуммаБезНДСПоТТН();
	Оповестить("ОбновитьСписокНачисленийПредприятий");
	Оповестить("ОповеститьРегистрОбработанных", Новый Структура("ДокументУУ, ДокументБУ", Объект.Ссылка, ?(БюджетныйНаКлиенте.ЕстьСвойствоОбъекта(ЭтаФорма, "ДокументБУ"), ЭтаФорма.ДокументБУ, Неопределено)));	
	Оповестить("сабОбноватьПлатежныйКалендарь");
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеВнПриИзменении(Элемент)
	
	Объект.ОрганизацияВн = БюджетныйНаСервере.ВернутьРеквизит(Объект.ПодразделениеВн, "Организация");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьExcel(Команда)
	
	ФормаЗагрузки = ПолучитьФорму("ОбщаяФорма.ФормаЗагрузкиИзExcel", Новый Структура("ВидЗагрузки", "ЗагрузкаВТЧТовары"));
	
	ПутьКФайлу = ФормаЗагрузки.ОткрытьМодально();
	
	Если ЗначениеЗаполнено(ПутьКФайлу) Тогда
		СтруктураВозврата = ФормаЗагрузки.ПолучитьДанныеПоЗагрузке(ПутьКФайлу);
		Для Каждого ЭлементСтруктурыВозврата Из СтруктураВозврата Цикл
			ТекДанные = Объект.ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(ТекДанные, ЭлементСтруктурыВозврата.Значение);
			Если ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
				ТекРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.Номенклатура, "СтавкаНДС, СтавкаНДС.Ставка, ВидСтавкиНДС");
				ТекРеквизиты.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвВидовСтавокНДСБУХУУ().Получить(ТекРеквизиты.ВидСтавкиНДС);
				ТекДанные.СтавкаНДС = ТекРеквизиты.СтавкаНДС;
				//Установим вид цен и рассчитаем цены
				ТекДанные.ВидЦеныПоставщика = ЗаполнитьВидЦен(ТекДанные.Номенклатура, Объект.Предприятие, Объект.Подразделение, Объект.Контрагент, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()));
				//ТекДанные.Цена = РассчитатьЦенуПоВидуЦен(ТекДанные.ВидЦеныПоставщика, ТекДанные.Номенклатура, Объект.Предприятие, Объект.Подразделение, Объект.Контрагент, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()), Объект.ДокОснование);
				ТекДанные.Цена = ЭлементСтруктурыВозврата.Значение.ЦенаExel; 
			КонецЕсли;
			ТекДанные.Сумма = ТекДанные.Количество * ТекДанные.Цена;
			сабОбщегоНазначенияБУХКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекДанные, Объект.СуммаВключаетНДС);
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	ВидОперацииПриИзмененииНаСервере(Не Элемент = Неопределено);
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере(Изменять)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыПоступлений.Поступление") Тогда
		Элементы.ГруппаТовары.Видимость = Истина;
		//Элементы.Группа15.Видимость = Истина;
		Элементы.Прочие.Видимость = Истина;
		Элементы.ГруппаУслуги.Видимость = Ложь;
		Элементы.Склад.Видимость = Истина;
		Элементы.НомерВходящегоДокумента.Заголовок = "Накладная №";
		Если Изменять Тогда
			Объект.Услуги.Очистить();		
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыПоступлений.ТМЦНаСписание") Тогда
		Элементы.ГруппаТовары.Видимость = Ложь;
		//Элементы.Группа15.Видимость = Ложь;
		Элементы.Прочие.Видимость = Ложь;
		Элементы.ГруппаУслуги.Видимость = Истина;
		Элементы.Склад.Видимость = Ложь;
		Элементы.УслугиСодержание.Заголовок = "Содержание";
		Элементы.УслугиНоменклатура.Видимость = Ложь;
		Элементы.НомерВходящегоДокумента.Заголовок = "Накладная №";
		Элементы.ГруппаУслуги.Заголовок = "ТМЦ (на списание)";
		Если Изменять Тогда
			Объект.Услуги.Очистить();		
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыПоступлений.ПоступлениеУслуг") Тогда
		Элементы.ГруппаТовары.Видимость = Ложь;
		//Элементы.Группа15.Видимость = Ложь;
		Элементы.Прочие.Видимость = Ложь;
		Элементы.ГруппаУслуги.Видимость = Истина;
		Элементы.Склад.Видимость = Ложь;
		Элементы.УслугиНоменклатура.Видимость = Истина;
		Элементы.ГруппаУслуги.Заголовок = "Услуги";
		Элементы.НомерВходящегоДокумента.Заголовок = "Акт №";
		Если Изменять Тогда
			Объект.ТабличнаяЧасть.Очистить();		
		КонецЕсли;
	Иначе
		Элементы.ГруппаТовары.Видимость = Истина;
		Элементы.ГруппаУслуги.Видимость = Истина;
		//Элементы.Группа15.Видимость = Истина;
		Элементы.Прочие.Видимость = Истина;
		Элементы.Склад.Видимость = Истина;
		Элементы.УслугиНоменклатура.Видимость = Истина;
		Элементы.НомерВходящегоДокумента.Заголовок = "Накладная №";
		Элементы.ГруппаУслуги.Заголовок = "Услуги";
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыПоступлений.ПоступлениеОС") Тогда
		Массив = Новый Массив;
		Массив.Добавить(Тип("СправочникСсылка.ОсновныеСредства"));
		ОписаниеТиповС = Новый ОписаниеТипов(Массив);
		Элементы.ТабличнаяЧастьНоменклатура.ОграничениеТипа = ОписаниеТиповС;
		Элементы.ТабличнаяЧастьНоменклатура.Заголовок = "Основное ср-во";
		Если Изменять Тогда
			Объект.Услуги.Очистить();		
		КонецЕсли;
	Иначе
		Массив = Новый Массив;
		Массив.Добавить(Тип("СправочникСсылка.Номенклатура"));
		ОписаниеТиповС = Новый ОписаниеТипов(Массив);
		Элементы.ТабличнаяЧастьНоменклатура.ОграничениеТипа = ОписаниеТиповС;
		Элементы.ТабличнаяЧастьНоменклатура.Заголовок = "Номенклатура";
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура УслугиСчетЗатратПриИзменении(Элемент)
	ПоляОбъекта = Новый Структура("Счет, Субконто1, Субконто2, Субконто3, Предприятие, Подразделение, Элементы, ЭлементСубконто1, ЭлементСубконто2, ЭлементСубконто3, ЭлементПодразделение",
	"СчетЗатрат", "Субконто1", "Субконто2", "Субконто3", Объект.Предприятие, "Подразделение", Элементы, "УслугиСубконто1", "УслугиСубконто2", "УслугиСубконто3", "УслугиПодразделение");
	БюджетныйНаКлиенте.УстановитьДоступность(Элементы.Услуги.ТекущиеДанные, ПоляОбъекта);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьАртикул();
	ЗаполнитьДобавленныеКолонкиТаблиц();  
	
	//Синхронизация серий
	Если сабОбщегоНазначенияПовтИсп.ПолучитьСерийныйУчет() Тогда
		сабОперОбщегоНазначения.СинхронизацияСерийПослеЗаписиНаСервереФормы(Объект.ТабличнаяЧасть,Объект.СерииНоменклатуры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Табл.СчетЗатрат КАК Счет
	               |ПОМЕСТИТЬ Врем
	               |ИЗ
	               |	&Табл КАК Табл
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Предприятия.УчетПоПодразделениям КАК УчетПоПодразделениям
	               |ПОМЕСТИТЬ УчетПоПодразделениямПредприятия
	               |ИЗ
	               |	Справочник.Предприятия КАК Предприятия
	               |ГДЕ
	               |	Предприятия.Ссылка В(&Предприятие)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(Учетный.Количественный, ЛОЖЬ) КАК Количественный,
	               |	ЕСТЬNULL(Учетный.Ссылка, Врем.Счет) КАК Счет,
	               |	ЕСТЬNULL(Учетный.Валютный, ЛОЖЬ) КАК Валютный,
	               |	ЕСТЬNULL(Учетный.УчетПоПодразделениям, ЛОЖЬ)
	               |		И УчетПоПодразделениямПредприятия.УчетПоПодразделениям КАК УчетПоПодразделениям
	               |ИЗ
	               |	Врем КАК Врем
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Учетный КАК Учетный
	               |		ПО Врем.Счет = Учетный.Ссылка,
	               |	УчетПоПодразделениямПредприятия КАК УчетПоПодразделениямПредприятия
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЕСТЬNULL(Учетный.Ссылка, Врем.Счет),
	               |	ЕСТЬNULL(Учетный.Количественный, ЛОЖЬ),
	               |	ЕСТЬNULL(Учетный.Валютный, ЛОЖЬ),
	               |	ЕСТЬNULL(Учетный.УчетПоПодразделениям, ЛОЖЬ)
	               |		И УчетПоПодразделениямПредприятия.УчетПоПодразделениям";
	
	ТЧ = Новый ТаблицаЗначений;
	ТЧ = Объект.Услуги.Выгрузить();
	Для каждого ТекСтрока Из Объект.ТабличнаяЧасть Цикл
		НоваяСтрока = ТЧ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);	
	КонецЦикла;
	НоваяСтрока = ТЧ.Добавить();
	НоваяСтрока.СчетЗатрат = Объект.СчетЗатрат;
	
	Запрос.УстановитьПараметр("Табл", ТЧ);
	Запрос.УстановитьПараметр("Предприятие", Объект.Предприятие);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Соотв = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		Соотв.Вставить(Выборка.Счет, Новый Структура("Количественный, Валютный, УчетПоПодразделениям, КоличествоСубконто", Выборка.Количественный, Выборка.Валютный, Выборка.УчетПоПодразделениям, Выборка.Счет.ВидыСубконто.Количество())); 		
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Объект.ТабличнаяЧасть Цикл
		СтруСчета = Соотв.Получить(СтрокаТаблицы.СчетЗатрат);
		Если СтруСчета = Неопределено Тогда
			Продолжить;		
		КонецЕсли;
		КоличествоСубконто   = СтруСчета.КоличествоСубконто;
		Для Индекс = 1 По 3 Цикл
			СтрокаТаблицы["Субконто"   + Индекс + "Доступность"] = (Индекс <= КоличествоСубконто);
		КонецЦикла;
		//СтрокаТаблицы["Количество"   + "Доступность"] = СтруСчета.Количественный;
		СтрокаТаблицы["Подразделение"   + "Доступность"] = СтруСчета.УчетПоПодразделениям;
		//Валютный = СтруСчета.Валютный;
		//СтрокаТаблицы["Валюта"   + "Доступность"] = Валютный;
		//СтрокаТаблицы["ВалСумма"   + "Доступность"] = Валютный;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл
		СтруСчета = Соотв.Получить(СтрокаТаблицы.СчетЗатрат);
		Если СтруСчета = Неопределено Тогда
			Продолжить;		
		КонецЕсли;
		КоличествоСубконто   = СтруСчета.КоличествоСубконто;
		Для Индекс = 1 По 3 Цикл
			СтрокаТаблицы["Субконто"   + Индекс + "Доступность"] = (Индекс <= КоличествоСубконто);
		КонецЦикла;
		//СтрокаТаблицы["Количество"   + "Доступность"] = СтруСчета.Количественный;
		СтрокаТаблицы["Подразделение"   + "Доступность"] = СтруСчета.УчетПоПодразделениям;
		//Валютный = СтруСчета.Валютный;
		//СтрокаТаблицы["Валюта"   + "Доступность"] = Валютный;
		//СтрокаТаблицы["ВалСумма"   + "Доступность"] = Валютный;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	РассчитатьСумму(Элементы.Услуги.ТекущиеДанные, "Услуги");
КонецПроцедуры

#Область ПодборТоваров

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодборТовары(Команда)

	ПараметрыПодбора = ПолучитьПараметрыПодбора("ТабличнаяЧасть");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");
	СписокСвойств = Неопределено;
	Если ЭтоВставкаИзБуфера Тогда
		
		ТаблицаТоваров = ВыбранноеЗначение.Данные;
		СписокСвойств = ВыбранноеЗначение.СписокСвойств;
		
	Иначе
		
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
		
	КонецЕсли;
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ЗаполнитьСтавкиНДСВРознице = Ложь;
	
	СтрокиДляЗаполненияСчетов = Новый Массив;
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		Попытка
		СведенияОНоменклатуре = БюджетныйНаСервере.ВернутьРеквизиты(СтрокаТовара.Номенклатура, "ЕдиницаИзмерения, Счет10, СтавкаНДС");
		Исключение
		КонецПопытки;
		СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара, СписокСвойств);
		СтрокиДляЗаполненияСчетов.Добавить(СтрокаТабличнойЧасти);
		Попытка
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Упаковка) Тогда
				СтрокаТабличнойЧасти.Упаковка =	СтрокаТовара.Номенклатура.ЕдиницаИзмерения;
			КонецЕсли;
		Исключение
		КонецПопытки;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
			СтрокаТабличнойЧасти.СтавкаНДС	= СтрокаТовара.Номенклатура.СтавкаНДС;
		КонецЕсли;
		Если СведенияОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		//СтрокаТабличнойЧасти.СчетУчета		= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчета),
		//СтрокаТабличнойЧасти.СчетУчета, СведенияОНоменклатуре.Счет10);
	КонецЦикла;
	
	
	
	Если ЭтоВставкаИзБуфера Тогда
		
		ВыбранноеЗначение.КоличествоДобавленныхСтрок = СтрокиДляЗаполненияСчетов.Количество();
		
	КонецЕсли;
	

	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)

	ДатаРасчетов		= ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()),ТекущаяДата(), Объект.Дата);
	
	ЗаголовокПодбора	= НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	Если ИмяТаблицы = "Товары" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Товары'");
	ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Возвратная тара'");
	КонецЕсли;
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаРасчетов"  , ДатаРасчетов);
	ПараметрыФормы.Вставить("Валюта"        , ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	ПараметрыФормы.Вставить("Организация"   , Объект.Организация);
	ПараметрыФормы.Вставить("Подразделение" , Объект.Подразделение);
	ПараметрыФормы.Вставить("Заголовок"     , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора"    , "");
	ПараметрыФормы.Вставить("ИмяТаблицы"    , ИмяТаблицы);
	ПараметрыФормы.Вставить("Услуги"        , ИмяТаблицы = "Услуги");
	ПараметрыФормы.Вставить("ПоказыватьОстатки"  , Истина);
	ПараметрыФормы.Вставить("ЕстьКоличество", Истина);
	ПараметрыФормы.Вставить("Предприятие" , Объект.Предприятие);
	
	Возврат ПараметрыФормы;

КонецФункции

#КонецОбласти

&НаСервере
Процедура ЗаполнитьАртикул()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.Код КАК Код,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&СписокНоменклатур)";
	Запрос.УстановитьПараметр("СписокНоменклатур", Объект.ТабличнаяЧасть.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	
	ТаблицаАртикулов =  Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЧ Из Объект.ТабличнаяЧасть Цикл
		НайденныеСтроки = ТаблицаАртикулов.НайтиСтроки(Новый Структура("Ссылка", СтрокаТЧ.Номенклатура));
		Для Каждого СтрокаСАртикулом Из НайденныеСтроки Цикл
			СтрокаТЧ.Артикул = СтрокаСАртикулом.Код;
			СтрокаТЧ.ЕдиницаИзмерения = СтрокаСАртикулом.ЕдиницаИзмерения;
		КонецЦикла;
		
		НайденныеСерии = Объект.СерииНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура, НомерСтрокиРеализации", СтрокаТЧ.Номенклатура, СтрокаТЧ.НомерСтроки));
		Если НайденныеСерии.Количество() > 1 Тогда
			СтрокаТЧ.НесколькоСерий = Истина;
			СтрокаТЧ.СерияНоменклатуры = Неопределено;
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры	


#Область КомандыИзменения

&НаКлиенте
Процедура ПоказатьИзмененияВерсий(ИмяКоманды)

	СсылкаНаОбъект = ЭтаФорма.ДокументБУ; 
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Ссылка",СсылкаНаОбъект);
	СтруктураКоличествВерсий = сабОбщегоНазначенияБУХ.ПолучитьКоличествоВерсий(СсылкаНаОбъект);
	КолВерсий = СтруктураКоличествВерсий.КоличествоИзмененныхВерсий;
	СравниваемыеВерсии = Новый СписокЗначений;  
	Пока КолВерсий > 0 Цикл
		СравниваемыеВерсии.Добавить(СтруктураКоличествВерсий.КоличествоВерсий, СтруктураКоличествВерсий.КоличествоВерсий);
		СтруктураКоличествВерсий.КоличествоВерсий = СтруктураКоличествВерсий.КоличествоВерсий - 1;
		КолВерсий = КолВерсий - 1;
	КонецЦикла;
	ПараметрыОтчета.Вставить("СравниваемыеВерсии",СравниваемыеВерсии); 
	
	ОткрытьФорму("РегистрСведений.ВерсииОбъектов.Форма.ОтчетПоВерсиямОбъекта", ПараметрыОтчета);

КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоДокументу(ИмяКоманды)

	ПерезаполнитьДокументНаОснованиинаСервере();
	
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьДокументНаОснованиинаСервере()
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.ОбработкаЗаполненияСФормы(ЭтаФорма.ДокументБУ, Неопределено, Истина);
	ЗначениеВРеквизитФормы(ТекОбъект, "Объект");
	
	//ОбновленнаяЗапись = РегистрыСведений.сабОбработкаДокументов.СоздатьМенеджерЗаписи();
	//ОбновленнаяЗапись.ДокументБУ = ЭтаФорма.ДокументБУ;
	//ОбновленнаяЗапись.ДокументУУ = Объект.Ссылка;
	//ОбновленнаяЗапись.ДатаОбработки = ТекущаяДата();
	//ОбновленнаяЗапись.Автор = ПараметрыСеанса.ТекущийПользователь;
	//ОбновленнаяЗапись.Модифицирован = Ложь;
	//ОбновленнаяЗапись.Записать();
	Элементы.ЭлементПерезаполнитьПоДокументу.Доступность = Ложь;
	
	ПриЧтенииНаСервере(Неопределено);
	ПриСозданииНаСервере(Ложь, Истина);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ТабличнаяЧастьСерияНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	МассивПараметрыВыбора = Новый Массив;
	НовыйПараметрДата = Новый ПараметрВыбора("ДатаОтгрузки",Объект.Дата);
	НовыйПараметрСчет = Новый ПараметрВыбора("Счет",ТекДанные.СчетУчета);  
	НовыйПараметрСклад = Новый ПараметрВыбора("Склад",?(ЗначениеЗаполнено(ТекДанные.Склад), ТекДанные.Склад, Объект.Склад));
	НовыйПараметрПредприятие = Новый ПараметрВыбора("Предприятие",Объект.Предприятие);
	МассивПараметрыВыбора.Добавить(НовыйПараметрДата);   
	МассивПараметрыВыбора.Добавить(НовыйПараметрСчет);
	МассивПараметрыВыбора.Добавить(НовыйПараметрСклад);
	МассивПараметрыВыбора.Добавить(НовыйПараметрПредприятие);
	НовыеПараметры = Новый ФиксированныйМассив(МассивПараметрыВыбора);
	Если ТекДанные.НесколькоСерий Тогда
		СтандартнаяОбработка = Ложь;
		ТекФорма = ПолучитьФорму("Документ.УЧ_Реализация.Форма.ФормаПодбораСерий");
		ТекФорма.Элементы.СерииНоменклатуры.ПодчиненныеЭлементы.СерииНоменклатурыСерияНоменклатуры.ПараметрыВыбора = НовыеПараметры;
		ТекФорма.Номенклатура = ТекДанные.Номенклатура;
		ТекФорма.Количество = ТекДанные.Количество;
		ТекФорма.НомерСтрокиРеализации = ТекДанные.НомерСтроки;
		Для каждого ТекСтрока Из Объект.СерииНоменклатуры Цикл
			Если ТекСтрока.Номенклатура = ТекДанные.Номенклатура И ТекСтрока.НомерСтрокиРеализации = ТекДанные.НомерСтроки Тогда
				НоваяСтрока = ТекФорма.СерииНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		ТекФорма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		Оп = Новый ОписаниеОповещения("ВыполнитьПослеОкончанияПодбора", ЭтотОбъект, Новый Структура);
		ТекФорма.ОписаниеОповещенияОЗакрытии = Оп;
		ТекФорма.Открыть();
	Иначе
		Элемент.ПараметрыВыбора = НовыеПараметры;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеОкончанияПодбора(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	МассивУдСерий = Новый Массив;
	Для каждого ТекСтрока Из Объект.СерииНоменклатуры Цикл
		Если ТекСтрока.Номенклатура = ТекДанные.Номенклатура И ТекСтрока.НомерСтрокиРеализации = ТекДанные.НомерСтроки Тогда
			МассивУдСерий.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекУд Из МассивУдСерий Цикл
		Объект.СерииНоменклатуры.Удалить(ТекУд);
	КонецЦикла;
	
	НовоеКоличество = 0;
	Для каждого ТекСтрока Из Результат.СерииНоменклатуры Цикл
		НоваяСтрока = Объект.СерииНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		НоваяСтрока.НомерСтрокиРеализации = ТекДанные.НомерСтроки;
		НовоеКоличество = НовоеКоличество + ТекСтрока.Количество; 
		НоваяСтрока.ДатаПроизводства = сабОбщегоНазначенияБУХ.ПолучитьДатуПроизводстваДляСерииНоменклатуры(ТекСтрока.СерияНоменклатуры);

	КонецЦикла;
	Если Результат.СерииНоменклатуры.Количество() > 1 Тогда
		ТекДанные.СерияНоменклатуры = ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка");
	КонецЕсли;
	ТекДанные.Количество = НовоеКоличество; 
	Объект.СерииНоменклатуры.Сортировать("НомерСтрокиРеализации");
	ТабличнаяЧастьКоличествоПриИзменении(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элементы.ТабличнаяЧасть.ТекущиеДанные.НесколькоСерий = Ложь;
	КонецЕсли;  
	
	Если сабОбщегоНазначенияПовтИсп.ПолучитьСерийныйУчет() Тогда
		сабОперОбщегоНазначенияНаКлиенте.ЗаполнитьНомерИсходнойСтрокиДляСерии(Элемент.ТекущиеДанные);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьСерияНоменклатурыПриИзменении(Элемент)
	
	//Синхронизация серий
	ТекущиеДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	сабОперОбщегоНазначенияНаКлиенте.ЗаполнитьТЧСерииПриИзмененииСерииВОсновнойТЧ(ТекущиеДанные,Объект.СерииНоменклатуры);

	//ТД = Элементы.ТабличнаяЧасть.ТекущиеДанные; 
	//Если ТД.НесколькоСерий Тогда // в случае нескольких серий свой алгоритм
	//	Возврат;
	//КонецЕсли;
	//ПараметрыОтбораСерииНоменклатуры = Новый Структура("Номенклатура,НомерСтрокиРеализации",ТД.Номенклатура,ТД.НомерСтроки);
	//МассивНайденныеСтрокиСерииНоменклатуры = Объект.СерииНоменклатуры.НайтиСтроки(ПараметрыОтбораСерииНоменклатуры);
	//ИндексДляДобавления = Неопределено;
	//Для каждого НайденнаяСтрокаСерииНоменклатуры Из МассивНайденныеСтрокиСерииНоменклатуры Цикл
	//	Если ИндексДляДобавления = Неопределено Тогда
	//		ИндексДляДобавления = Объект.СерииНоменклатуры.Индекс(НайденнаяСтрокаСерииНоменклатуры);
	//	КонецЕсли;
	//	Объект.СерииНоменклатуры.Удалить(НайденнаяСтрокаСерииНоменклатуры);
	//КонецЦикла;
	//Если ИндексДляДобавления = Неопределено Тогда
	//	 ИндексДляДобавления = 0;
	//КонецЕсли;
	//НоваяСтрокаСерииНоменклатуры = Объект.СерииНоменклатуры.Вставить(ИндексДляДобавления);
	//НоваяСтрокаСерииНоменклатуры.Номенклатура = ТД.Номенклатура;
	//НоваяСтрокаСерииНоменклатуры.Количество = ТД.Количество;
	//НоваяСтрокаСерииНоменклатуры.НомерСтрокиРеализации = ТД.НомерСтроки;
	//НоваяСтрокаСерииНоменклатуры.СерияНоменклатуры = ТД.СерияНоменклатуры;
	//НоваяСтрокаСерииНоменклатуры.ДатаПроизводства = сабОбщегоНазначенияБУХ.ПолучитьДатуПроизводстваДляСерииНоменклатуры(ТД.СерияНоменклатуры);
	//Объект.СерииНоменклатуры.Сортировать("НомерСтрокиРеализации");

КонецПроцедуры

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаКлиенте
Процедура СкопироватьСтроки(Команда)

	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы.Форма].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	ИмяТекущейСтраницы = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	ИмяТаблицы = "";
	Если ИмяТекущейСтраницы = "ГруппаТовары" Тогда
		
		ИмяТаблицы = Новый Структура;
    ИмяТаблицы.Вставить("Форма","ТабличнаяЧасть");
    ИмяТаблицы.Вставить("Документ","ТабличнаяЧасть");
		
	ИначеЕсли ИмяТекущейСтраницы = "ГруппаУслуги" Тогда
		
		ИмяТаблицы = Новый Структура;
    ИмяТаблицы.Вставить("Форма","Услуги");
    ИмяТаблицы.Вставить("Документ","Услуги");
		
	КонецЕсли;
	
	Возврат ИмяТаблицы;
	
КонецФункции

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы.Документ], 
		Элементы[ИмяТаблицы.Форма].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

	КонецПроцедуры
	
&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы.Документ);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)
	
	СписокСвойств = Новый Массив;
	
	Если ПараметрыВставки.ИмяТаблицы = "ТабличнаяЧасть" Тогда
		
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("АлкогольнаяПродукция");
		СписокСвойств.Добавить("Артикул");
		СписокСвойств.Добавить("ВидДоставки");
		СписокСвойств.Добавить("ВидЦеныПоставщика");
		СписокСвойств.Добавить("Доставка");
		СписокСвойств.Добавить("ЕдиницаИзмерения");
		//СписокСвойств.Добавить("ИдентификаторСтроки");
		//СписокСвойств.Добавить("ИдентификаторУпаковки");
		//СписокСвойств.Добавить("ИсходныйНомерСтроки");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("КоличествоПоПервичнымДокументам");
		СписокСвойств.Добавить("КоличествоУпаковок");
		СписокСвойств.Добавить("МРЦ");
		//СписокСвойств.Добавить("НомерСтроки");
		СписокСвойств.Добавить("Подразделение");
		СписокСвойств.Добавить("СерияНоменклатуры");
		СписокСвойств.Добавить("Склад");
		СписокСвойств.Добавить("СрокГодности");
		СписокСвойств.Добавить("СтавкаНДС");
		СписокСвойств.Добавить("Статья");
		СписокСвойств.Добавить("СтатьяЗатрат");
		СписокСвойств.Добавить("Сумма");
		СписокСвойств.Добавить("СуммаБезНДС");
		СписокСвойств.Добавить("СуммаБезНдсПоПервичнымДокументам");
		СписокСвойств.Добавить("СуммаДоставки");
		СписокСвойств.Добавить("СуммаНДС");
		СписокСвойств.Добавить("СуммаНДСПоПервичнымДокументам");
		СписокСвойств.Добавить("СуммаПоПервичнымДокументам");
		СписокСвойств.Добавить("СчетЗатрат");
		СписокСвойств.Добавить("Упаковка");
		СписокСвойств.Добавить("Характеристика");
		СписокСвойств.Добавить("Цена");
		СписокСвойств.Добавить("Штрихкод");
		
		Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда
			
			СписокСвойств.Добавить("СчетУчета");
			СписокСвойств.Добавить("СчетУчетаНДС");
			
		КонецЕсли;
	
	ИначеЕсли ПараметрыВставки.ИмяТаблицы = "Услуги" Тогда
	
		СписокСвойств.Добавить("Номенклатура");
		//СписокСвойств.Добавить("ИсходныйНомерСтроки");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("НомерДоговораТММ");
		//СписокСвойств.Добавить("НомерСтроки");
		СписокСвойств.Добавить("Подразделение");
		СписокСвойств.Добавить("ПодразделениеДоступность");
		СписокСвойств.Добавить("ПредставлениеСчетаЗатрат");
		СписокСвойств.Добавить("Содержание");
		СписокСвойств.Добавить("СтавкаНДС");
		СписокСвойств.Добавить("СтатьяЗатрат");
		СписокСвойств.Добавить("Субконто1");
		СписокСвойств.Добавить("Субконто1Доступность");
		СписокСвойств.Добавить("Субконто2");
		СписокСвойств.Добавить("Субконто2Доступность");
		СписокСвойств.Добавить("Субконто3");
		СписокСвойств.Добавить("Субконто3Доступность");
		СписокСвойств.Добавить("Сумма");
		СписокСвойств.Добавить("СуммаНДС");
		СписокСвойств.Добавить("СчетЗатрат");
		СписокСвойств.Добавить("Цена");
		
		
	КонецЕсли;
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
		ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)

	Доступность = Не Форма.ТолькоПросмотр И Доступность;
	Элементы = Форма.Элементы;
	Элементы.ТоварыВставитьСтроки.Доступность						 = Доступность;
	Элементы.ТоварыКонтекстноеМенюВставитьСтроки.Доступность		 = Доступность;
	Элементы.УслугиВставитьСтроки.Доступность						 = Доступность;
	Элементы.УслугиКонтекстноеМенюВставитьСтроки.Доступность		 = Доступность;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьПриИзменении(Элемент)
	
	Если сабОбщегоНазначенияПовтИсп.ПолучитьСерийныйУчет() Тогда
		сабОперОбщегоНазначенияНаКлиенте.СинхронизироватьНомерСтрокиРеализацииДляТЧСерии(Элемент.ТекущиеДанные,Объект.ТабличнаяЧасть,Объект.СерииНоменклатуры);
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти

#Область ПодборТоваров

&НаКлиенте
Процедура Подобрать(Команда)
	
	ОписаниеОповещенияПослеПодбора = Новый ОписаниеОповещения("ЗаполнитьТоварыПоПодбору",ЭтотОбъект);
	СтруктураПараметров = Новый Структура("Склад,Предприятие,Заголовок",Объект.Склад,Объект.Предприятие, "Подбор товаров для документа " + Объект.Ссылка);
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаДляПодбора",СтруктураПараметров,ЭтотОбъект,УникальныйИдентификатор,,,ОписаниеОповещенияПослеПодбора,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьТоварыПоПодбору(Результат,ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если ЭтоАдресВременногоХранилища(Результат) Тогда
			ЗаполнитьПоПодборуНаСервере(Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПодборуНаСервере(АдресВХ)
	
	ТЗДанныеПодбора = ПолучитьИзВременногоХранилища(АдресВХ);	
	Если ТипЗнч(ТЗДанныеПодбора) = Тип("ТаблицаЗначений") Тогда
		Для Каждого СтрокаТовара Из ТЗДанныеПодбора Цикл
			НайденныеСтроки = Объект.ТабличнаяЧасть.НайтиСтроки(Новый Структура("Номенклатура,Цена",СтрокаТовара.Номенклатура,СтрокаТовара.Цена));
			Если НайденныеСтроки.Количество() > 0 Тогда 
				ТекДанные = НайденныеСтроки[0];
				//Если АльтернативнаяФорма Тогда
						ТекДанные.Количество = ТекДанные.Количество + СтрокаТовара.Количество; 
				//Иначе
				//	ТекДанные.КоличествоУпаковок = ТекДанные.КоличествоУпаковок + СтрокаТовара.Количество; 
				//	ТекДанные.Количество = ТекДанные.КоэффициентПересчетаУпаковок * ТекДанные.КоличествоУпаковок;
				//КонецЕсли;
				ТекДанные.Сумма = ТекДанные.Количество * ТекДанные.Цена;
				ТекРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.СтавкаНДС, "Ставка");
				Если НЕ ТекРеквизиты = Неопределено Тогда
					ТекДанные.СуммаНДС = ТекДанные.Сумма / ((100+ТекРеквизиты.Ставка)/100) * (ТекРеквизиты.Ставка/100);
				КонецЕсли;
				//Если АльтернативнаяФорма Тогда
				//	Если ТипЗнч(ТекДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
				//		СтруктураВозврата = ПолучитьКоличествоВУпаковкеПоУмолчаниюДляНоменклатуры(ТекДанные.Номенклатура);
				//		ТекДанные.КоэффициентПересчетаУпаковок = СтруктураВозврата.Коэффициент;
				//		ПредставлениеУпаковки = СтруктураВозврата.Упаковка;
				//		ПредставлениеЕдИзмерения = ТекДанные.ЕдиницаИзмерения; 
				//	Иначе
				//		ТекДанные.КоэффициентПересчетаУпаковок = ПолучитьКоэффициентПересчетаУпаковок(ТекДанные.Номенклатура, ТекДанные.ЕдиницаИзмерения);
				//		ПредставлениеУпаковки = ТекДанные.ЕдиницаИзмерения; 
				//		ПредставлениеЕдИзмерения = ПолучитьПредставлениеЕдиницыУпаковки(ТекДанные.Номенклатура,ТекДанные.ЕдиницаИзмерения);
				//	КонецЕсли;
				//	ТекДанные.КоличествоВУпаковке = ТекДанные.КоэффициентПересчетаУпаковок;
				//	ТекДанные.КоличествоУпаковок = Цел(?(ТекДанные.КоэффициентПересчетаУпаковок = 0,0,ТекДанные.Количество / ТекДанные.КоэффициентПересчетаУпаковок)); 
				//	Если ТекДанные.КоличествоВУпаковке = 0 ИЛИ ТекДанные.КоличествоВУпаковке = 1 Тогда
				//		КолУпаковок = 0;
				//		КолЕдиниц = ТекДанные.Количество;
				//		ТекДанные.КоличествоУпаковокПредставление = "" + КолУпаковок + " " + ПредставлениеУпаковки + ","  +
				//		КолЕдиниц + " " + ПредставлениеЕдИзмерения;
				//	Иначе
				//		КолУпаковок = Цел(ТекДанные.Количество / ТекДанные.КоличествоВУпаковке);
				//		КолЕдиниц = ТекДанные.Количество - (КолУпаковок * ТекДанные.КоличествоВУпаковке);
				//		ТекДанные.КоличествоУпаковокПредставление = "" + КолУпаковок + " " + ПредставлениеУпаковки + ", " +
				//		КолЕдиниц + " " + ПредставлениеЕдИзмерения;
				//	КонецЕсли;
				//	
				//КонецЕсли;
			Иначе
				НоваяСтрокаТовары = Объект.ТабличнаяЧасть.Добавить();
				НоваяСтрокаТовары.Номенклатура = СтрокаТовара.Номенклатура;
				НоваяСтрокаТовары.Цена = СтрокаТовара.Цена;
				ТекДанные = НоваяСтрокаТовары; 
				//Установим единицу измерения по умолчанию
				//Если АльтернативнаяФорма Тогда
					ТекДанные.ЕдиницаИзмерения = НоваяСтрокаТовары.Номенклатура.ЕдиницаИзмерения;
				//Иначе
				//ТекДанные.ЕдиницаИзмерения = ПолучитьЕдИзмНоменклатуры(ТекДанные.Номенклатура);
				//КонецЕсли;
				МассивЕдИзмНоменклатуры = ПолучитьМассивВозможныхЕдиницИзмеренияНоменклатуры(ТекДанные.Номенклатура);
				Элементы.ТабличнаяЧастьЕдиницаИзмерения.СписокВыбора.Очистить();
				Для Каждого ЭлементВыборкаЕдИзм Из МассивЕдИзмНоменклатуры Цикл
					Элементы.ТабличнаяЧастьЕдиницаИзмерения.СписокВыбора.Добавить(ЭлементВыборкаЕдИзм);
				КонецЦикла;
				//ТекДанные.КоэффициентПересчетаУпаковок = ПолучитьКоэффициентПересчетаУпаковок(ТекДанные.Номенклатура, ТекДанные.ЕдиницаИзмерения);
				//Если АльтернативнаяФорма Тогда 
					ТекДанные.Количество = СтрокаТовара.Количество;
				//	ЗаполнитьПредставлениеУпаковок(ТекДанные);
				//Иначе 
				//	ТекДанные.КоэффициентПересчетаУпаковок = ПолучитьКоэффициентПересчетаУпаковок(ТекДанные.Номенклатура, ТекДанные.ЕдиницаИзмерения);
				//	ТекДанные.КоличествоУпаковок = СтрокаТовара.Количество; 
				//	ТекДанные.Количество = ТекДанные.КоэффициентПересчетаУпаковок * ТекДанные.КоличествоУпаковок;
				//КонецЕсли;  
				//ТекДанные.КоличествоВУпаковке = ТекДанные.КоэффициентПересчетаУпаковок;  
				ТекДанные.Сумма = ТекДанные.Количество * ТекДанные.Цена;
				
				//Установим НДС и артикул
				Если ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
					ТекРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.Номенклатура, "СтавкаНДС, Код, Счет10, ВидСтавкиНДС, ЕдиницаИзмерения, Кратность, МинимальнаяПартия", Ложь);
					ТекДанные.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвВидовСтавокНДСБУХУУ().Получить(ТекРеквизиты.ВидСтавкиНДС);;
					//ТекДанные.Кратность = ТекРеквизиты.Кратность; 
					ТекРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.СтавкаНДС, "Ставка");
					Если НЕ ТекРеквизиты = Неопределено Тогда
						ТекДанные.СуммаНДС = ТекДанные.Сумма / ((100+ТекРеквизиты.Ставка)/100) * (ТекРеквизиты.Ставка/100);
					КонецЕсли;
				КонецЕсли;
				Если ЗначениеЗаполнено(Объект.Склад) Тогда
					ТекДанные.Склад = Объект.Склад;	
				КонецЕсли;
				СтруктураДанных =Новый Структура("Номенклатура, Склад, Количество", 
				ТекДанные.Номенклатура, ТекДанные.Склад, ТекДанные.Количество);
				//ЗаполнитьОстаткиИРезервы(Истина, СтруктураДанных);
				//ЗаполнитьКонтрольМинЦены(Истина, СтруктураДанных);
				ЗаполнитьЗначенияСвойств(ТекДанные, СтруктураДанных);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция ПолучитьКоличествоВУпаковкеПоУмолчаниюДляНоменклатуры(Номенклатура) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковкиНоменклатуры.Коэффициент КАК Коэффициент,
	|	УпаковкиНоменклатуры.ОсновнаяУпаковка КАК ОсновнаяУпаковка,
	|	УпаковкиНоменклатуры.Упаковка.Представление КАК Упаковка
	|ИЗ
	|	РегистрСведений.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|ГДЕ
	|	УпаковкиНоменклатуры.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	СтруктураВозврата = Новый Структура("Упаковка,Коэффициент");
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Количество() > 1 Тогда
		Пока Выборка.Следующий() Цикл
			Если Выборка.ОсновнаяУпаковка Тогда
				СтруктураВозврата.Упаковка = Выборка.Упаковка;
				СтруктураВозврата.Коэффициент = Выборка.Коэффициент;
				Возврат СтруктураВозврата; 
			КонецЕсли;
		КонецЦикла;
		Выборка.Сбросить();
		Выборка.Следующий(); 
		СтруктураВозврата.Упаковка = Выборка.Упаковка;
		СтруктураВозврата.Коэффициент = Выборка.Коэффициент;
		Возврат СтруктураВозврата; 
	Иначе
		Если Выборка.Следующий() Тогда
			СтруктураВозврата.Упаковка = Выборка.Упаковка;
			СтруктураВозврата.Коэффициент = Выборка.Коэффициент;
			Возврат СтруктураВозврата; 
		КонецЕсли;
	КонецЕсли; 
	СтруктураВозврата.Упаковка = "уп.";
	СтруктураВозврата.Коэффициент = 1;
	Возврат СтруктураВозврата; 
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКоэффициентПересчетаУпаковок(Номенклатура, ЕдиницаИзмерения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковкиНоменклатуры.Коэффициент
	|ИЗ
	|	РегистрСведений.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|ГДЕ
	|	УпаковкиНоменклатуры.Номенклатура = &Номенклатура
	|	И УпаковкиНоменклатуры.Упаковка = &Упаковка
	|	И УпаковкиНоменклатуры.ЕдиницаИзмерения = &ЕдиницаИзмерения";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Упаковка", ЕдиницаИзмерения);
	Запрос.УстановитьПараметр("ЕдиницаИзмерения", Номенклатура.ЕдиницаИзмерения);
	
	Выборка = запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Коэффициент;		
	КонецЦикла;
	
	Возврат 1;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеЕдиницыУпаковки(Номенклатура = Неопределено, ЕдиницаИзмерения = Неопределено, ДляОднойНоменклатуры = Истина, ТЗДанные = Неопределено) Экспорт
	
	Если ДляОднойНоменклатуры Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УпаковкиНоменклатуры.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения 
		|ИЗ
		|	РегистрСведений.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
		|ГДЕ
		|	УпаковкиНоменклатуры.Номенклатура = &Номенклатура
		|	И УпаковкиНоменклатуры.Упаковка = &Упаковка";
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("Упаковка", ЕдиницаИзмерения);
		
		Выборка = запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.ЕдиницаИзмерения;		
		КонецЦикла;
		
		Возврат ЕдиницаИзмерения.Наименование;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗНоменклатураУпаковки.Номенклатура КАК Номенклатура,
		|	ТЗНоменклатураУпаковки.ЕдиницаИзмерения КАК Упаковка
		|ПОМЕСТИТЬ ВТНоменклатураУпаковка
		|ИЗ
		|	&ТЗНоменклатураУпаковки КАК ТЗНоменклатураУпаковки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(УпаковкиНоменклатуры.ЕдиницаИзмерения.Представление, ВТНоменклатураУпаковка.Упаковка) КАК ЕдиницаИзмерения, 
		|	ВТНоменклатураУпаковка.Упаковка КАК Упаковка,
		|	ВТНоменклатураУпаковка.Упаковка.Представление КАК УпаковкаПредставление,
		|	ВТНоменклатураУпаковка.Номенклатура КАК Номенклатура
		|ИЗ
		|	ВТНоменклатураУпаковка КАК ВТНоменклатураУпаковка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
		|		ПО ВТНоменклатураУпаковка.Номенклатура = УпаковкиНоменклатуры.Номенклатура
		|			И ВТНоменклатураУпаковка.Упаковка = УпаковкиНоменклатуры.Упаковка";
		Запрос.УстановитьПараметр("ТЗНоменклатураУпаковки",ТЗДанные);
		
		Выборка = запрос.Выполнить().Выбрать();
		Возврат Выборка;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЕдИзмНоменклатуры(Номенклатура) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковкиНоменклатуры.Упаковка
	|ИЗ
	|	РегистрСведений.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|ГДЕ
	|	УпаковкиНоменклатуры.Номенклатура = &Номенклатура
	|	И УпаковкиНоменклатуры.ОсновнаяУпаковка";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Упаковка;		
	КонецЦикла;	
	
	Возврат Номенклатура.ЕдиницаИзмерения;	
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьМассивВозможныхЕдиницИзмеренияНоменклатуры(Номенклатура) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковкиНоменклатуры.Упаковка
	|ИЗ
	|	РегистрСведений.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|ГДЕ
	|	УпаковкиНоменклатуры.Номенклатура = &Номенклатура"; 
	АльтернативнаяФорма = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("АльтернативнаяФормаЗаказов");
	Если АльтернативнаяФорма Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УпаковкиНоменклатуры.ЕдиницаИзмерения КАК Упаковка
		|ИЗ
		|	РегистрСведений.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
		|ГДЕ
		|	УпаковкиНоменклатуры.Номенклатура = &Номенклатура
		|	И УпаковкиНоменклатуры.ЕдиницаИзмерения <> &ЕдиницаИзмерения"; 
		Запрос.УстановитьПараметр("ЕдиницаИзмерения", Номенклатура.ЕдиницаИзмерения);
	КонецЕсли;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	АльтернативнаяФорма = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("АльтернативнаяФормаЗаказов");
	ТаблицаУпаковок = Запрос.Выполнить().Выгрузить();
	ТаблицаУпаковок.Свернуть("Упаковка");
	МассивУпаковок = ТаблицаУпаковок.ВыгрузитьКолонку("Упаковка");
	МассивУпаковок.Вставить(0, Номенклатура.ЕдиницаИзмерения);
	Возврат МассивУпаковок;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеУпаковок(ТекДанные)
	
	Если ТипЗнч(ТекДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		СтруктураВозврата =ПолучитьКоличествоВУпаковкеПоУмолчаниюДляНоменклатуры(ТекДанные.Номенклатура);
		ТекДанные.КоэффициентПересчетаУпаковок = СтруктураВозврата.Коэффициент;
		ПредставлениеУпаковки = СтруктураВозврата.Упаковка;
		ПредставлениеЕдИзмерения = ТекДанные.ЕдиницаИзмерения; 
	Иначе
		ТекДанные.КоэффициентПересчетаУпаковок = ПолучитьКоэффициентПересчетаУпаковок(ТекДанные.Номенклатура, ТекДанные.ЕдиницаИзмерения);
		ПредставлениеУпаковки = ТекДанные.ЕдиницаИзмерения; 
		ПредставлениеЕдИзмерения = ПолучитьПредставлениеЕдиницыУпаковки(ТекДанные.Номенклатура,ТекДанные.ЕдиницаИзмерения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДанные.ЕдиницаИзмерения) И ЗначениеЗаполнено(ТекДанные.КоэффициентПересчетаУпаковок) Тогда
		ТекДанные.КоличествоВУпаковкеПредставление = "(" +  Строка(ТекДанные.КоэффициентПересчетаУпаковок) + " " + ПредставлениеЕдИзмерения +")";
	Иначе
		ТекДанные.КоличествоВУпаковкеПредставление = Строка(ТекДанные.КоэффициентПересчетаУпаковок);
	КонецЕсли;
	Если ТекДанные.КоэффициентПересчетаУпаковок = 0 ИЛИ ТекДанные.КоэффициентПересчетаУпаковок = 1 Тогда
		КолУпаковок = 0;
		КолЕдиниц = ТекДанные.Количество;
		ТекДанные.КоличествоУпаковокПредставление = "" + КолУпаковок + " "  + ПредставлениеУпаковки + "," +
		КолЕдиниц + " " + ПредставлениеЕдИзмерения;
	Иначе
		КолУпаковок = Цел(ТекДанные.Количество / ТекДанные.КоэффициентПересчетаУпаковок);
		КолЕдиниц = ТекДанные.Количество - (КолУпаковок * ТекДанные.КоэффициентПересчетаУпаковок);
		ТекДанные.КоличествоУпаковокПредставление = "" + КолУпаковок + " " + ПредставлениеУпаковки + ", " +
		КолЕдиниц + " " + ПредставлениеЕдИзмерения;
	КонецЕсли; 
	ТекДанные.КоличествоУпаковок = Цел(?(ТекДанные.КоэффициентПересчетаУпаковок = 0,0,ТекДанные.Количество / ТекДанные.КоэффициентПересчетаУпаковок)); 
    ТекДанные.КоличествоВУпаковке = ТекДанные.КоэффициентПересчетаУпаковок;
	
КонецПроцедуры


&НаКлиенте
Процедура ТабличнаяЧастьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ТабличнаяЧастьКоличество" Тогда
		ТекДанные = Элемент.ТекущиеДанные;
		Если ТекДанные.НесколькоСерий Тогда
			МассивПараметрыВыбора = Новый Массив;
			НовыйПараметрДата = Новый ПараметрВыбора("ДатаОтгрузки",Объект.Дата);
			НовыйПараметрСчет = Новый ПараметрВыбора("Счет",ТекДанные.СчетУчета);  
			НовыйПараметрСклад = Новый ПараметрВыбора("Склад",?(ЗначениеЗаполнено(ТекДанные.Склад), ТекДанные.Склад, Объект.Склад));
			НовыйПараметрПредприятие = Новый ПараметрВыбора("Предприятие",Объект.Предприятие);
			МассивПараметрыВыбора.Добавить(НовыйПараметрДата);   
			МассивПараметрыВыбора.Добавить(НовыйПараметрСчет);
			МассивПараметрыВыбора.Добавить(НовыйПараметрСклад);
			МассивПараметрыВыбора.Добавить(НовыйПараметрПредприятие);
			НовыеПараметры = Новый ФиксированныйМассив(МассивПараметрыВыбора);
			
			ТекФорма = ПолучитьФорму("Документ.УЧ_Реализация.Форма.ФормаПодбораСерий"); 
			ТекФорма.Элементы.СерииНоменклатуры.ПодчиненныеЭлементы.СерииНоменклатурыСерияНоменклатуры.ПараметрыВыбора = НовыеПараметры;
			ТекФорма.Номенклатура = ТекДанные.Номенклатура;
			ТекФорма.Количество = ТекДанные.Количество;
			ТекФорма.НомерСтрокиРеализации = ТекДанные.НомерСтроки;
			Для каждого ТекСтрока Из Объект.СерииНоменклатуры Цикл
				Если ТекСтрока.Номенклатура = ТекДанные.Номенклатура И ТекСтрока.НомерСтрокиРеализации = ТекДанные.НомерСтроки Тогда
					НоваяСтрока = ТекФорма.СерииНоменклатуры.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				КонецЕсли;
			КонецЦикла;
			ТекФорма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			Оп = Новый ОписаниеОповещения("ВыполнитьПослеОкончанияПодбора", ЭтотОбъект, Новый Структура);
			ТекФорма.ОписаниеОповещенияОЗакрытии = Оп;
			ТекФорма.Открыть();
		КонецЕсли;
	КонецЕсли;  

КонецПроцедуры


&НаКлиенте
Процедура СчетЗатратПриИзменении(Элемент)
	СчетЗатратПриИзмененииНаСервере(Не Элемент = Неопределено);
	//Элементы.ОборотноеСубконто.Видимость = ЗначениеЗаполнено(Объект.СчетНачисления);
КонецПроцедуры

&НаСервере
Процедура СчетЗатратПриИзмененииНаСервере(Изменять)
	
	ДанныеСчета = УправленческийУчетПовтИсп.ПолучитьСвойстваСчета(Объект.СчетЗатрат, Объект.Предприятие);
	
	Наименование1 = ДанныеСчета["ВидСубконто1Наименование"];
	Наименование2 = ДанныеСчета["ВидСубконто2Наименование"];
	Наименование3 = ДанныеСчета["ВидСубконто3Наименование"];
	УчетПоПодразделениям = ДанныеСчета["УчетПоПодразделениям"];
	
	Элементы.Субконто1.ПодсказкаВвода = Наименование1;
	Элементы.Субконто2.ПодсказкаВвода = Наименование2;
	Элементы.Субконто3.ПодсказкаВвода = Наименование3;
	Элементы.КорПодразделение.ПодсказкаВвода = ?(УчетПоПодразделениям, "Подразделение затрат", "");
	
	Элементы.Субконто1.Видимость = ЗначениеЗаполнено(Наименование1);
	Элементы.Субконто2.Видимость = ЗначениеЗаполнено(Наименование2);
	Элементы.Субконто3.Видимость = ЗначениеЗаполнено(Наименование3);
	//Элементы.КорПодразделение.Видимость = УчетПоПодразделениям;
	
	Если Не ЗначениеЗаполнено(Объект.КорПодразделение) И Изменять Тогда
		Объект.КорПодразделение = Объект.Подразделение;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьСчетЗатратПриИзменении(Элемент)
	
	ПоляОбъекта = Новый Структура("Счет, Субконто1, Субконто2, Субконто3, Предприятие, Подразделение, Элементы, ЭлементСубконто1, ЭлементСубконто2, ЭлементСубконто3, ЭлементПодразделение",
	"СчетЗатрат", "Субконто1", "Субконто2", "Субконто3", Объект.Предприятие, "Подразделение", Элементы, "ТабличнаяЧастьСубконто1", "ТабличнаяЧастьСубконто2", "ТабличнаяЧастьСубконто3", "ТабличнаяЧастьПодразделение");
	БюджетныйНаКлиенте.УстановитьДоступность(Элементы.ТабличнаяЧасть.ТекущиеДанные, ПоляОбъекта);

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ЭтаФорма.УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("сабУчетНДСОрганизации", Объект.Организация));
	ОрганизацияПриИзмененииНаСервере(Не Элемент = Неопределено);
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере(Изменять)
	Если Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("сабОперативныйРежимРаботы") Тогда
		СоотвПодразделений = сабОбщегоНазначенияБУХ.ПолучитьСоответствиеОрганизацийПодразделений();
		Если Изменять Тогда
			Объект.Подразделение = СоотвПодразделений.Получить(Объект.Организация);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры