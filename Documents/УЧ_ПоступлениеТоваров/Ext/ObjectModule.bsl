Процедура ПриКопировании(ОбъектКопирования)
	ТТНВходящаяЕГАИС = "";
	РучнаяКорректировка = Ложь;
КонецПроцедуры

Функция ПоучитьСоответствияСчетовНоменклатуры()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УЧ_ПоступлениеТоваровТабличнаяЧасть.Номенклатура КАК Номенклатура,
	               |	ВЫБОР
	               |		КОГДА УЧ_ПоступлениеТоваровТабличнаяЧасть.Номенклатура.Счет10 = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ПустаяСсылка)
	               |			ТОГДА &Счет41
	               |		ИНАЧЕ УЧ_ПоступлениеТоваровТабличнаяЧасть.Номенклатура.Счет10
	               |	КОНЕЦ КАК Счет
	               |ИЗ
	               |	Документ.УЧ_ПоступлениеТоваров.ТабличнаяЧасть КАК УЧ_ПоступлениеТоваровТабличнаяЧасть
	               |ГДЕ
	               |	УЧ_ПоступлениеТоваровТабличнаяЧасть.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	УЧ_ПоступлениеТоваровТабличнаяЧасть.Номенклатура,
	               |	ВЫБОР
	               |		КОГДА УЧ_ПоступлениеТоваровТабличнаяЧасть.Номенклатура.Счет10 = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ПустаяСсылка)
	               |			ТОГДА &Счет41
	               |		ИНАЧЕ УЧ_ПоступлениеТоваровТабличнаяЧасть.Номенклатура.Счет10
	               |	КОНЕЦ";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Счет41", ПланыСчетов.Учетный.Счет41());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Соответствия = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		Соответствия.Вставить(Выборка.Номенклатура, Выборка.Счет);
	КонецЦикла;
	Соответствия.Вставить(Неопределено, ПланыСчетов.Учетный.Счет41());
	Соответствия.Вставить(Null, ПланыСчетов.Учетный.Счет41());
	Соответствия.Вставить(Справочники.Номенклатура.ПустаяСсылка(), ПланыСчетов.Учетный.Счет41());
	Возврат Соответствия;	
	
КонецФункции // ()

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если РучнаяКорректировка Тогда		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Движения документа %1 отредактированы вручную и не могут быть автоматически актуализированы'"), ЭтотОбъект);
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.КлючДанных = Ссылка;
		Сообщение.Сообщить();		
		
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Если ДополнительныеСвойства.Свойство("ДатаДокументаИзменена") Тогда
		Движения.Учетный.Записать();	
	КонецЕсли;	
		
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	СтатьяФормальнаяСебестоимость = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Формальная себестоимость", Истина);
	
	//Супербоб для возврата алкашки, удалить по окончании
	//ТаблицаРеквизитов = УправлениеСвойствами.ПолучитьЗначенияСвойств(Ссылка,,,ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Проводки на забаланс (вирт. поступление) (Поступление ТМЦ и услуг)", Истина));
	//Если ТаблицаРеквизитов.Количество() И ТаблицаРеквизитов[0].Значение Тогда
	//	ПеремещениеНаЗабаланс = Истина;
		СчетЗабаланс = ПланыСчетов.Учетный.НайтиПоКоду("ВОЗВ");
	//Иначе
		ПеремещениеНаЗабаланс = Ложь;
	//КонецЕсли;	
    //
	
	ПеренесеноИзАстор = Ложь;
	
	//корректируем минусовые остатки
	СоответствиеСчета = ПоучитьСоответствияСчетовНоменклатуры();
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	РаспределятьПроводкиПоДокументамТоварооборота = Предприятие.УчетнаяПолитика.РаспределятьПроводкиПоДокументамТоварооборота;
	
	ЭтоКорректировка = Ложь;
	
	РассчетРетробонусовПоРознице = (сабОбщегоНазначения.ПолучитьЗначениеСвойства(Предприятие, "Рассчет ретробонусов по рознице") = Истина);
	НалогНДС = Справочники.ВидыНалоговИПлатежейВБюджет.НайтиПоНаименованию("НДС", Истина);
	СтатьяНДС = Справочники.СтатьиЗатрат.НайтиПоНаименованию("НДС", Истина);
		
	РассчетРетробонусов = Ложь;
	
	ВНХТовар = (СчетКонтрагента = ПланыСчетов.Учетный.Счет7902());	
	Счет41 = ПланыСчетов.Учетный.Счет41();
		
	Если ФлагВалюты Тогда
		КурсВалюты = Курс;
	Иначе
		КурсВалюты = 1
	КонецЕсли;
	
	//+++ саб Опер
	Если РегистрироватьЦенуПоступления Тогда
		Движения.ЦеныНоменклатуры.Записывать = Истина;
	КонецЕсли;		
	//---
	//Сож+
	ДвижениеПоЦенамНоменклатуры();
	//Сож-
	Если СчетКонтрагента = ПланыСчетов.Учетный.Счет002() Тогда
		ПоступлениеНаЗабаланс = Истина;
	Иначе
		ПоступлениеНаЗабаланс = Ложь;
	КонецЕсли;	
	
	Если ПоступлениеНаЗабаланс Тогда
		Для Каждого ТекСтрокаТабличнаяЧасть Из ТабличнаяЧасть Цикл
			//Если УЧ_Сервер.НеЗаполненностьКоличестваИЦеныВТЧДок(ТекСтрокаТабличнаяЧасть) = Истина Тогда
			//	
			//	Отказ = Истина;
			//	Сообщить("У документа "+ ЭтотОбъект + ", в строке №"+ТекСтрокаТабличнаяЧасть.НомерСтроки+" не заполнено количество и цена.");
			//КонецЕсли;
			Движение = Движения.Учетный.Добавить();
			Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
			Движение.Предприятия = Предприятие;
			Движение.Период = Дата;
			Движение.СчетДт = СчетКонтрагента;
			Если Движение.СчетДт.УчетПоПодразделениям Тогда
				Движение.ПодразделениеДт = Подразделение;
			КонецЕсли;
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт, Движение.СчетДт, 1, ТекСтрокаТабличнаяЧасть.Номенклатура);
			Если Движение.СчетДт.ВидыСубконто.Количество() > 1 Тогда
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт, Движение.СчетДт, 2, Договор);
			КонецЕсли;
			
			Движение.КоличествоДт = ТекСтрокаТабличнаяЧасть.Количество;
			Движение.Сумма = ТекСтрокаТабличнаяЧасть.Сумма * КурсВалюты;
			Движение.НомерСтрокиДок = ТекСтрокаТабличнаяЧасть.НомерСтроки;
			Движение.Содержание = Комментарий;
		КонецЦикла;
	Иначе
		Для Каждого ТекСтрокаТабличнаяЧасть Из ТабличнаяЧасть Цикл
			
			//++саб закрытие заказа 29.08.16
			//не делаем проводки, т.к. и так большой регистр!
			//Если ЗначениеЗаполнено(ДокОснование) Тогда
			//	Движение = Движения.Учетный.Добавить();
			//	Движение.СчетКт = ПланыСчетов.Учетный.СчетЗАК();
			//	Движение.Период = Дата;
			//	Движение.Предприятия = Предприятие;
			//	Движение.ПодразделениеКт = Подразделение;
			//	Движение.СценарийПлана = Справочники.СценарииПланирования.Факт;
			//	Движение.Сумма = ТекСтрокаТабличнаяЧасть.Сумма;
			//	Движение.КоличествоКт = ТекСтрокаТабличнаяЧасть.Количество;
			//	Движение.Содержание = Комментарий;
			//	Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.ЗаказыПоставщикам] = ДокОснование;
			//	Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина)] = ТекСтрокаТабличнаяЧасть.Номенклатура;
			//КонецЕсли;
			//--саб
			
			//Если ТекСтрокаТабличнаяЧасть.Сумма = 0 И ТекСтрокаТабличнаяЧасть.СуммаПоПервичнымДокументам = 0 И ТекСтрокаТабличнаяЧасть.Количество = 0 Тогда  //не проводить документ в случае пустой цены и кол-ва
			//	Продолжить;
			//КонецЕсли;
			
			//Если УЧ_Сервер.НеЗаполненностьКоличестваИЦеныВТЧДок(ТекСтрокаТабличнаяЧасть) = Истина Тогда
			//	
			//	Отказ = Истина;
			//	Сообщить("У документа "+ ЭтотОбъект + ", в строке №"+ТекСтрокаТабличнаяЧасть.НомерСтроки+" не заполнено количество и цена.");
			//КонецЕсли;
			
			//Супербоб для возврата алкашки, удалить по окончании
			Если ПеремещениеНаЗабаланс Тогда
				Движение = Движения.Учетный.Добавить();
				Движение.Период = Дата;
				Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
				Движение.Предприятия = Предприятие;
				
				Движение.СчетДт = СчетЗабаланс;
				Если Движение.СчетДт.УчетПоПодразделениям Тогда
					Движение.ПодразделениеДт = Подразделение;
				КонецЕсли;
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Документ", Истина)] = Ссылка;
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина)] = ТекСтрокаТабличнаяЧасть.Номенклатура;
				
				Движение.Сумма = ТекСтрокаТабличнаяЧасть.Сумма;
				Если Движение.СчетДт.Количественный Тогда
					Движение.КоличествоДт = ТекСтрокаТабличнаяЧасть.Количество;
				КонецЕсли;
				
			КонецЕсли;
			//
			
			ТекСуммаСтрока = ?(УчитыватьНДС, ?(СуммаВключаетНДС, ТекСтрокаТабличнаяЧасть.Сумма - ТекСтрокаТабличнаяЧасть.СуммаНДС, ТекСтрокаТабличнаяЧасть.Сумма), ?(СуммаВключаетНДС, ТекСтрокаТабличнаяЧасть.Сумма, ТекСтрокаТабличнаяЧасть.Сумма + ТекСтрокаТабличнаяЧасть.СуммаНДС)) * КурсВалюты;
			
			НайденныеСерии = СерииНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура, НомерСтрокиРеализации", ТекСтрокаТабличнаяЧасть.Номенклатура, ТекСтрокаТабличнаяЧасть.НомерСтроки));
			МассивСерий = Новый Массив;
			Если НайденныеСерии.Количество() > 1 Тогда //несколько серий
				Для каждого ТекНайдСерия Из НайденныеСерии Цикл
					МассивСерий.Добавить(Новый Структура("СерияНоменклатуры, Количество, Сумма", ТекНайдСерия.СерияНоменклатуры, ТекНайдСерия.Количество, ?(ТекСтрокаТабличнаяЧасть.Количество, ТекСуммаСтрока / ТекСтрокаТабличнаяЧасть.Количество, 0) * ТекНайдСерия.Количество))	;
				КонецЦикла;	
			Иначе	
				МассивСерий.Добавить(Новый Структура("СерияНоменклатуры, Количество, Сумма", ТекСтрокаТабличнаяЧасть.СерияНоменклатуры, ТекСтрокаТабличнаяЧасть.Количество, ТекСуммаСтрока));
			КонецЕсли;
			
			СуммаОтклонение = ТекСуммаСтрока;
			ТекИндекс = 0;
			
			Для каждого ТекСерия Из МассивСерий Цикл
				
				ТекИндекс = ТекИндекс + 1;
				СуммаОтклонение = СуммаОтклонение - ТекСерия.Сумма;
				
				Движение = Движения.Учетный.Добавить();
				
				СчДебет = ?(ЗначениеЗаполнено(ТекСтрокаТабличнаяЧасть.СчетУчета), ТекСтрокаТабличнаяЧасть.СчетУчета, СоответствиеСчета.Получить(ТекСтрокаТабличнаяЧасть.Номенклатура));
				
				Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
				Движение.Предприятия = Предприятие;
				Движение.Период = Дата;
				Движение.СчетДт = СчДебет;
				Если СчДебет.УчетПоПодразделениям Тогда
					Движение.ПодразделениеДт = ?(ЗначениеЗаполнено(ТекСтрокаТабличнаяЧасть.Подразделение), ТекСтрокаТабличнаяЧасть.Подразделение, Подразделение);
				КонецЕсли;
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт, Движение.СчетДт, 1, ТекСтрокаТабличнаяЧасть.Номенклатура);
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт, Движение.СчетДт, 2, ТекСтрокаТабличнаяЧасть.Склад);
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт, Движение.СчетДт, 3, ТекСерия.СерияНоменклатуры);
				Движение.СчетКт = СчетКонтрагента;
				
				Если ВНХТовар Тогда
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, Движение.СчетКт, 1, ?(ЗначениеЗаполнено(Контрагент), Контрагент, ПредприятиеПоставщик));
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, Движение.СчетКт, 2, ?(ЗначениеЗаполнено(Договор), Договор, ПодразделениеВн));
				Иначе
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, Движение.СчетКт, 1, Контрагент);
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, Движение.СчетКт, 2, Договор);
				КонецЕсли;
				
				//++сабОпер
				Если НЕ Движение.СчетКт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Документ", Истина)) = Неопределено И РаспределятьПроводкиПоДокументамТоварооборота Тогда
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, Движение.СчетКт, 3, Ссылка);
				КонецЕсли;
				//--сабОпер
				
				Если СчетКонтрагента.УчетПоПодразделениям Тогда
					Движение.ПодразделениеКт = ?(ЗначениеЗаполнено(ТекСтрокаТабличнаяЧасть.Подразделение), ТекСтрокаТабличнаяЧасть.Подразделение, Подразделение);
				КонецЕсли;
				
				Если ФлагВалюты Тогда
					Движение.ВалютнаяСуммаКт = ТекСтрокаТабличнаяЧасть.Сумма; 
					Движение.ВалютаКт = Валюта;
				КонецЕсли;
				
				Если Движение.СчетДт.Количественный Тогда
					Движение.КоличествоДт = ТекСерия.Количество; //?(ЗначениеЗаполнено(ТекСтрокаТабличнаяЧасть.КоличествоПоПервичнымДокументам), ТекСтрокаТабличнаяЧасть.КоличествоПоПервичнымДокументам, ТекСтрокаТабличнаяЧасть.Количество);
				КонецЕсли;
				Движение.Сумма = ?(ТекИндекс = МассивСерий.Количество(), ТекСерия.Сумма + СуммаОтклонение, ТекСерия.Сумма);
				
				//++саб опер
				Если ЭтоКорректировка Тогда
					Если Движение.СчетДт.Количественный Тогда
						Движение.КоличествоДт = - Движение.КоличествоДт;	
					КонецЕсли;
					Движение.Сумма = - Движение.Сумма;
				КонецЕсли;
				//--
				
				Движение.НомерСтрокиДок = ТекСтрокаТабличнаяЧасть.НомерСтроки;
				Движение.Содержание = Комментарий;
			КонецЦикла;
			
			Если УчитыватьНДС И ТекСтрокаТабличнаяЧасть.СуммаНДС Тогда
				
				Движение = Движения.Учетный.Добавить();
				
				Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
				Движение.Предприятия = Предприятие;
				Движение.Период = Дата;
				Движение.СчетДт = ПланыСчетов.Учетный.Счет6801();
				Если СчДебет.УчетПоПодразделениям Тогда
					Движение.ПодразделениеДт = ?(ЗначениеЗаполнено(ТекСтрокаТабличнаяЧасть.Подразделение), ТекСтрокаТабличнаяЧасть.Подразделение, Подразделение);
				КонецЕсли;
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт, Движение.СчетДт, 1, НалогНДС);
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт, Движение.СчетДт, 2, Организация);
				
				//Если СчДебет = Счет41 Тогда
				//	Движение.СчетКт = ПланыСчетов.Учетный.Счет9003();
				//	УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, Движение.СчетКт, 1, ТекСтрокаТабличнаяЧасть.Номенклатура);
				//	УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, Движение.СчетКт, 2, СтатьяНДС);
				//	УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, Движение.СчетКт, 3, Ссылка);
				//Иначе	
					Движение.СчетКт = СчетКонтрагента;
					Если ВНХТовар Тогда
						УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, Движение.СчетКт, 1, ?(ЗначениеЗаполнено(Контрагент), Контрагент, ПредприятиеПоставщик));
						УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, Движение.СчетКт, 2, ?(ЗначениеЗаполнено(Договор), Договор, ПодразделениеВн));
					Иначе
						УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, Движение.СчетКт, 1, Контрагент);
						УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, Движение.СчетКт, 2, Договор);
					КонецЕсли;
				//КонецЕсли;
				
				//++сабОпер
				Если НЕ Движение.СчетКт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Документ", Истина)) = Неопределено И РаспределятьПроводкиПоДокументамТоварооборота Тогда
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, Движение.СчетКт, 3, Ссылка);
				КонецЕсли;
				//--сабОпер
				
				Если СчетКонтрагента.УчетПоПодразделениям Тогда
					Движение.ПодразделениеКт = ?(ЗначениеЗаполнено(ТекСтрокаТабличнаяЧасть.Подразделение), ТекСтрокаТабличнаяЧасть.Подразделение, Подразделение);
				КонецЕсли;
				
				Если ФлагВалюты Тогда
					Движение.ВалютнаяСуммаКт = ТекСтрокаТабличнаяЧасть.Сумма; 
					Движение.ВалютаКт = Валюта;
				КонецЕсли;
				
				Движение.Сумма = ТекСтрокаТабличнаяЧасть.СуммаНДС;
				
				//++саб опер
				Если ЭтоКорректировка Тогда
					Если Движение.СчетДт.Количественный Тогда
						Движение.КоличествоДт = - Движение.КоличествоДт;
					КонецЕсли;
					
					Движение.Сумма = - Движение.Сумма;
				КонецЕсли;
				//--
				
				Движение.НомерСтрокиДок = ТекСтрокаТабличнаяЧасть.НомерСтроки;
				Движение.Содержание = "возмещение НДС при поступлении товара";
				
			КонецЕсли;
				
			Для каждого ТекСтрокаВерха Из Верхи Цикл
				//верх на 41/43
				Движение = Движения.Учетный.Добавить();
				Движение.СчетДт = СчДебет;
				Если ФлагВалюты И СчДебет.Валютный Тогда
					Движение.ВалютнаяСуммаДт = ТекСтрокаВерха.Сумма * ТекСтрокаТабличнаяЧасть.Количество; 
					Движение.ВалютаДт = Валюта;
				КонецЕсли;
				Если СчДебет.УчетПоПодразделениям Тогда
					Движение.ПодразделениеДт = Подразделение;
				КонецЕсли;
				Движение.СчетКт = ПланыСчетов.Учетный.Счет7601();
				Если ФлагВалюты Тогда
					Движение.ВалютнаяСуммаКт = ТекСтрокаВерха.Сумма * ТекСтрокаТабличнаяЧасть.Количество; 
					Движение.ВалютаКт = Валюта;
				КонецЕсли;
				Движение.Период = Дата;
				Движение.Предприятия = Предприятие;
				Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
				Движение.Сумма = ТекСтрокаВерха.Сумма * ТекСтрокаТабличнаяЧасть.Количество * КурсВалюты;
				Движение.НомерСтрокиДок = ТекСтрокаТабличнаяЧасть.НомерСтроки;
				Движение.Содержание = "Начислен верх: " + Строка(ТекСтрокаВерха.ВерхКонтрагента) + ", Кол-во:" + ТекСтрокаТабличнаяЧасть.Количество + " Верх:" + ТекСтрокаВерха.Сумма + ", " + ТекСтрокаВерха.Комментарий + ", " + Комментарий;
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт, Движение.СчетДт, 1, ТекСтрокаВерха.Номенклатура);
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт, Движение.СчетДт, 2, ТекСтрокаВерха.Склад);
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, Движение.СчетКт, 1, Контрагент);
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, Движение.СчетКт, 2, ТекСтрокаВерха.ВерхКонтрагента);
			КонецЦикла; 
			Для каждого ТекСтрокаМенеджер Из ВерхиМенеджера Цикл
				//Менеджер на 41/43
				Движение = Движения.Учетный.Добавить();
				Движение.СчетДт = СчДебет;
				Если СчДебет.УчетПоПодразделениям Тогда
					Движение.ПодразделениеДт = Подразделение;
				КонецЕсли;
				Если ФлагВалюты И СчДебет.Валютный Тогда
					Движение.ВалютнаяСуммаДт = ТекСтрокаМенеджер.Сумма * ТекСтрокаТабличнаяЧасть.Количество; 
					Движение.ВалютаДт = Валюта;
				КонецЕсли;
				Движение.СчетКт = ПланыСчетов.Учетный.РасчетыПоБонусам;
				Если ФлагВалюты Тогда
					Движение.ВалютнаяСуммаКт = ТекСтрокаМенеджер.Сумма * ТекСтрокаТабличнаяЧасть.Количество; 
					Движение.ВалютаКт = Валюта;
				КонецЕсли;
				Если Движение.СчетКт.УчетПоПодразделениям Тогда
					Движение.ПодразделениеКт = Подразделение;
				КонецЕсли;
				Движение.Период = Дата;
				Движение.Предприятия = Предприятие;
				Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
				Движение.Сумма = ТекСтрокаМенеджер.Сумма * ТекСтрокаТабличнаяЧасть.Количество * КурсВалюты;
				Движение.НомерСтрокиДок = ТекСтрокаТабличнаяЧасть.НомерСтроки;
				Движение.Содержание = "Начислен верх менеджеру: " + Строка(ТекСтрокаМенеджер.Менеджер) + ", Кол-во:" + ТекСтрокаТабличнаяЧасть.Количество + " Верх:" + ТекСтрокаМенеджер.Сумма + ", " + ТекСтрокаМенеджер.Комментарий + ", " + Комментарий;
				
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт, Движение.СчетДт, 1, ТекСтрокаТабличнаяЧасть.Номенклатура);
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт, Движение.СчетДт, 2, ТекСтрокаТабличнаяЧасть.Склад);
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, Движение.СчетКт, 1, ТекСтрокаМенеджер.Менеджер);
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, Движение.СчетКт, 2, ТекСтрокаМенеджер.ДоговорМенеджера);
			КонецЦикла;
			Для каждого ТекСтрокаМенеджер Из ПрочиеНачисления Цикл
				//Менеджер на 41/43
				Движение = Движения.Учетный.Добавить();
				Движение.СчетДт = СчДебет;
				Если СчДебет.УчетПоПодразделениям Тогда
					Движение.ПодразделениеДт = Подразделение;
				КонецЕсли;
				Если ФлагВалюты И СчДебет.Валютный Тогда
					Движение.ВалютнаяСуммаДт = ТекСтрокаМенеджер.Сумма * ТекСтрокаТабличнаяЧасть.Количество; 
					Движение.ВалютаДт = Валюта;
				КонецЕсли;
				Движение.СчетКт = ?(ЗначениеЗаполнено(ТекСтрокаМенеджер.ДоговорКонтрагента.СчетВзаиморасчетов), ТекСтрокаМенеджер.ДоговорКонтрагента.СчетВзаиморасчетов, ПланыСчетов.Учетный.Счет7601());
				Если ФлагВалюты Тогда
					Движение.ВалютнаяСуммаКт = ТекСтрокаМенеджер.Сумма * ТекСтрокаТабличнаяЧасть.Количество; 
					Движение.ВалютаКт = Валюта;
				КонецЕсли;
				Если Движение.СчетКт.УчетПоПодразделениям Тогда
					Движение.ПодразделениеКт = Подразделение;
				КонецЕсли;
				
				Движение.Период = Дата;
				Движение.Предприятия = Предприятие;
				Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
				Движение.Сумма = ТекСтрокаМенеджер.Сумма * ТекСтрокаТабличнаяЧасть.Количество * КурсВалюты;
				Движение.НомерСтрокиДок = ТекСтрокаТабличнаяЧасть.НомерСтроки;
				Движение.Содержание = "Начислено: " + Строка(ТекСтрокаМенеджер.Контрагент) + ", Кол-во:" + ТекСтрокаТабличнаяЧасть.Количество + " Начисление:" + ТекСтрокаМенеджер.Сумма + ", " + ТекСтрокаМенеджер.Комментарий + ", " + Комментарий;
				
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт, Движение.СчетДт, 1, ТекСтрокаТабличнаяЧасть.Номенклатура);
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт, Движение.СчетДт, 2, ТекСтрокаТабличнаяЧасть.Склад);
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, Движение.СчетКт, 1, ТекСтрокаМенеджер.Контрагент);
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, Движение.СчетКт, 2, ТекСтрокаМенеджер.ДоговорКонтрагента);
			КонецЦикла;
			
			//возмещение транспорта
			Если ТекСтрокаТабличнаяЧасть.Доставка Тогда
				Движение = Движения.Учетный.Добавить();
				Движение.СчетДт = ПланыСчетов.Учетный.Счет9003();
				Если Движение.СчетДт.УчетПоПодразделениям Тогда
					Движение.ПодразделениеДт = Подразделение;
				КонецЕсли;
				Движение.Период = Дата;
				Движение.Предприятия = Предприятие;
				Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
				Движение.Сумма = ТекСтрокаТабличнаяЧасть.СуммаДоставки * КурсВалюты;
				Если ФлагВалюты Тогда
					Движение.ВалютнаяСуммаКт = ТекСтрокаТабличнаяЧасть.СуммаДоставки; 
					Движение.ВалютаКт = Валюта;
				КонецЕсли;
				Движение.НомерСтрокиДок = ТекСтрокаТабличнаяЧасть.НомерСтроки;
				Движение.Содержание = "Затраты по доставке: " + Строка(Контрагент) + ", Кол-во:" + ТекСтрокаТабличнаяЧасть.Количество + " Доставка:" + ТекСтрокаТабличнаяЧасть.Доставка + ", " + Комментарий;
				
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт, Движение.СчетДт, 1, ТекСтрокаТабличнаяЧасть.Номенклатура);
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт, Движение.СчетДт, 2, ТекСтрокаТабличнаяЧасть.Статья);
				
				Движение.СчетКт = СчетКонтрагента;
				
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, Движение.СчетКт, 1, Контрагент);
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, Движение.СчетКт, 2, Договор);
				
				//++сабОпер
				Если НЕ Движение.СчетКт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Документ", Истина)) = Неопределено И РаспределятьПроводкиПоДокументамТоварооборота Тогда
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, Движение.СчетКт, 3, Ссылка);
				КонецЕсли;
				//--сабОпер
				
				
				Если Движение.СчетКт.УчетПоПодразделениям Тогда
					Движение.ПодразделениеКт = Подразделение;
				КонецЕсли;
				
			КонецЕсли;
			
			//+++ саб Опер
			Если РегистрироватьЦенуПоступления Тогда
				Запись = Движения.ЦеныНоменклатуры.Добавить();
				Запись.Предприятие = Предприятие;
				Запись.ВидЦены = Справочники.ВидыЦен.ЦенаПоступления;
				Запись.Номенклатура = ТекСтрокаТабличнаяЧасть.Номенклатура;
				Запись.Цена = ТекСтрокаТабличнаяЧасть.Цена;
				Запись.Период = Дата;
				Запись.Регистратор = Ссылка;
			КонецЕсли;	
			//---
		КонецЦикла;
		
		Если Не ПеренесеноИзАстор Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	УЧ_ПоступлениеТоваровТабличнаяЧасть.Номенклатура КАК Номенклатура,
			|	СУММА(УЧ_ПоступлениеТоваровТабличнаяЧасть.Количество) КАК Количество,
			|	УЧ_ПоступлениеТоваровТабличнаяЧасть.Ссылка.Предприятие КАК Предприятие,
			|	УЧ_ПоступлениеТоваровТабличнаяЧасть.Ссылка.Склад КАК Склад,
			|	УЧ_ПоступлениеТоваровТабличнаяЧасть.Ссылка.Подразделение КАК Подразделение,
			|	СУММА(Выбор Когда &УчитыватьНДС Тогда Выбор Когда &СуммаВключаетНДС Тогда УЧ_ПоступлениеТоваровТабличнаяЧасть.Сумма - УЧ_ПоступлениеТоваровТабличнаяЧасть.СуммаНДС Иначе УЧ_ПоступлениеТоваровТабличнаяЧасть.Сумма Конец Иначе Выбор Когда &СуммаВключаетНДС Тогда УЧ_ПоступлениеТоваровТабличнаяЧасть.Сумма Иначе УЧ_ПоступлениеТоваровТабличнаяЧасть.Сумма + УЧ_ПоступлениеТоваровТабличнаяЧасть.СуммаНДС Конец Конец) КАК СуммаПоступления,
			|	ВЫБОР
			|		КОГДА УЧ_ПоступлениеТоваровТабличнаяЧасть.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ПустаяСсылка)
			|			ТОГДА УЧ_ПоступлениеТоваровТабличнаяЧасть.Номенклатура.Счет10
			|		ИНАЧЕ УЧ_ПоступлениеТоваровТабличнаяЧасть.СчетУчета
			|	КОНЕЦ КАК СчетУчета
			|ПОМЕСТИТЬ ТЧДока
			|ИЗ
			|	Документ.УЧ_ПоступлениеТоваров.ТабличнаяЧасть КАК УЧ_ПоступлениеТоваровТабличнаяЧасть
			|ГДЕ
			|	УЧ_ПоступлениеТоваровТабличнаяЧасть.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	УЧ_ПоступлениеТоваровТабличнаяЧасть.Номенклатура,
			|	УЧ_ПоступлениеТоваровТабличнаяЧасть.Ссылка.Предприятие,
			|	УЧ_ПоступлениеТоваровТабличнаяЧасть.Ссылка.Склад,
			|	УЧ_ПоступлениеТоваровТабличнаяЧасть.Ссылка.Подразделение,
			|	ВЫБОР
			|		КОГДА УЧ_ПоступлениеТоваровТабличнаяЧасть.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ПустаяСсылка)
			|			ТОГДА УЧ_ПоступлениеТоваровТабличнаяЧасть.Номенклатура.Счет10
			|		ИНАЧЕ УЧ_ПоступлениеТоваровТабличнаяЧасть.СчетУчета
			|	КОНЕЦ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	УчетныйОстатки.Субконто1 КАК Номенклатура,
			|	УчетныйОстатки.Субконто2 КАК Склад,
			|	ЕСТЬNULL(УчетныйОстатки.СуммаОстаток, 0) КАК Сумма,
			|	ЕСТЬNULL(УчетныйОстатки.КоличествоОстаток, 0) КАК Количество,
			|	ВЫБОР
			|		КОГДА УчетныйОстатки.КоличествоОстаток = 0
			|			ТОГДА 0
			|		ИНАЧЕ УчетныйОстатки.СуммаОстаток / УчетныйОстатки.КоличествоОстаток
			|	КОНЕЦ КАК Цена,
			|	УчетныйОстатки.Счет КАК Счет,
			|	УчетныйОстатки.Предприятия КАК Предприятия,
			|	УчетныйОстатки.Подразделение КАК Подразделение
			|ПОМЕСТИТЬ Остатки
			|ИЗ
			|	РегистрБухгалтерии.Учетный.Остатки(
			|			&ПозицияДокумента,
			|			Счет В (&ВыбСчет),
			|			,
			|			Предприятия В (&ВыбПредприятие)
			|				И Субконто1 В (&ВыбТовары)
			|				И Субконто2 В (&ВыбСклад)) КАК УчетныйОстатки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТЧДока.Номенклатура КАК Номенклатура,
			|	ЕСТЬNULL(Остатки.Количество, 0) + ТЧДока.Количество КАК КоличествоКонечное,
			|	ТЧДока.Предприятие КАК Предприятие,
			|	ТЧДока.Подразделение КАК Подразделение,
			|	ТЧДока.Предприятие.УчетПоПодразделениям КАК УчетПоПодразделениям,
			|	Остатки.Склад КАК Склад,
			|	ТЧДока.Количество КАК КоличествоПоступления,
			|	ЕСТЬNULL(Остатки.Количество, 0) КАК КоличествоОстаток,
			|	ЕСТЬNULL(Остатки.Цена, 0) КАК ЦенаОстатков,
			|	ВЫБОР
			|		КОГДА ТЧДока.Количество = 0
			|			ТОГДА 0
			|		ИНАЧЕ ТЧДока.СуммаПоступления / ТЧДока.Количество
			|	КОНЕЦ КАК ЦенаПоступления,
			|	ТЧДока.СуммаПоступления КАК СуммаПоступления,
			|	ЕСТЬNULL(Остатки.Сумма, 0) + ТЧДока.СуммаПоступления КАК СуммаКонечное,
			|	ТЧДока.СчетУчета КАК СчетУчета
			|ИЗ
			|	ТЧДока КАК ТЧДока
			|		ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
			|		ПО ТЧДока.Номенклатура = Остатки.Номенклатура
			|			И ТЧДока.Предприятие = Остатки.Предприятия
			|			И ТЧДока.Склад = Остатки.Склад
			//|			И ТЧДока.Подразделение = Остатки.Подразделение
			|			И ТЧДока.СчетУчета = Остатки.Счет
			|ГДЕ
			|	ЕСТЬNULL(Остатки.Количество, 0) < 0";
			
			ВыбСклад = Склад;
			ВыбСчет = Новый Массив;
			ВыбТовары = Новый Массив;
			Для каждого ТекСтрока Из СоответствиеСчета Цикл
				Если ЗначениеЗаполнено(ТекСтрока.Ключ) Тогда
					ВыбТовары.Добавить(ТекСтрока.Ключ);
					Если ВыбСчет.Найти(ТекСтрока.Значение) = Неопределено Тогда
						ВыбСчет.Добавить(ТекСтрока.Значение);
					КонецЕсли;
				КонецЕсли; 
			КонецЦикла;
			
			Подразделения = ТабличнаяЧасть.ВыгрузитьКолонку("Подразделение");
			Подразделения.Добавить(Подразделение);
			
			МоментКонца = МоментВремени();
			
			Запрос.УстановитьПараметр("ВыбТовары", ВыбТовары);
			Запрос.УстановитьПараметр("ВыбПредприятие", Предприятие);
			Запрос.УстановитьПараметр("Подразделение", Подразделения);
			Запрос.УстановитьПараметр("ВыбСклад", ВыбСклад);
			Запрос.УстановитьПараметр("ВыбСчет", ВыбСчет);
			Запрос.УстановитьПараметр("ПозицияДокумента", МоментКонца);
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			Запрос.УстановитьПараметр("УчитыватьНДС", УчитыватьНДС);
			Запрос.УстановитьПараметр("СуммаВключаетНДС", СуммаВключаетНДС);
			
			МассивЗапросов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
			
			РезультатКонтроль = МассивЗапросов[2].Выгрузить();
			
			СтатьяПоУмолчанию = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Списание на недостачи", Истина);
			СлужбаПоУмолчанию = Справочники.Субконто.НайтиПоНаименованию("Производство_общее");
			ПроизводственноеПодразделение = Подразделение.ПроизводственноеПодразделение;
			СчетЗатратыПроизводство = ПланыСчетов.Учетный.Счет25();//.ОсновноеПрво;
			СчетСебестоимость = ПланыСчетов.Учетный.Счет9002();//.Себестоимость;
			
			Для каждого ТекСтрокаТабличнаяЧасть Из РезультатКонтроль Цикл
				
				Если НЕ Окр(ТекСтрокаТабличнаяЧасть.СуммаКонечное - ТекСтрокаТабличнаяЧасть.ЦенаПоступления * ТекСтрокаТабличнаяЧасть.КоличествоКонечное, 2) ИЛИ НЕ ТекСтрокаТабличнаяЧасть.КоличествоПоступления Тогда
					Продолжить;			
				КонецЕсли;
				Движение = Движения.Учетный.Добавить();
				Движение.Период = Дата;
				Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
				Движение.Предприятия = Предприятие;
				
				//вставка на выбор счета (обр №00000000687 Сети)
				Если ПроизводственноеПодразделение Тогда
					Движение.СчетДт = СчетЗатратыПроизводство;
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,1,СтатьяПоУмолчанию);
					Если Движение.СчетДт.ВидыСубконто.Количество() >= 2 Тогда
						УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,2,СлужбаПоУмолчанию);
					КонецЕсли;
				Иначе	
					Движение.СчетДт = СчетСебестоимость;
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,1,ТекСтрокаТабличнаяЧасть.Номенклатура);
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,3,СтатьяФормальнаяСебестоимость);
				КонецЕсли;	
				//конец вставки
				
				Если Движение.СчетДт.УчетПоПодразделениям Тогда
					Движение.ПодразделениеДт = Подразделение;
				КонецЕсли;
				Движение.СчетКт = ?(ЗначениеЗаполнено(ТекСтрокаТабличнаяЧасть.СчетУчета), ТекСтрокаТабличнаяЧасть.СчетУчета, СоответствиеСчета.Получить(ТекСтрокаТабличнаяЧасть.Номенклатура));
				Если Движение.СчетКт.УчетПоПодразделениям Тогда
					Движение.ПодразделениеКт = Подразделение;
				КонецЕсли;	
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт,1,ТекСтрокаТабличнаяЧасть.Номенклатура);
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт,2,ТекСтрокаТабличнаяЧасть.Склад);
				
				Движение.Сумма = ТекСтрокаТабличнаяЧасть.СуммаКонечное - ТекСтрокаТабличнаяЧасть.ЦенаПоступления * ТекСтрокаТабличнаяЧасть.КоличествоКонечное;
				Движение.Содержание = "Корректировка до с/с последней поставки " + Формат(ТекСтрокаТабличнаяЧасть.ЦенаПоступления, "ЧДЦ=2") ;
			КонецЦикла; 
		КонецЕсли;
		
	КонецЕсли;
	
	МассивСторноДоговоров = Новый Массив;
	
	Для Каждого СтрокаУслуг Из Услуги Цикл
		Движение = Движения.Учетный.Добавить();
		Движение.Период = Дата;
		Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
		Движение.Предприятия = Предприятие;
		
		Движение.СчетДт = СтрокаУслуг.СчетЗатрат;
		
		Если Движение.СчетДт.УчетПоПодразделениям Тогда
			Движение.ПодразделениеДт = ?(ЗначениеЗаполнено(СтрокаУслуг.Подразделение), СтрокаУслуг.Подразделение, Подразделение);
		КонецЕсли;
		
		Если Движение.СчетДт.Количественный Тогда
			Движение.КоличествоДт = СтрокаУслуг.Количество;
		КонецЕсли;
		
		УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,1,СтрокаУслуг.СтатьяЗатрат);
		
		Если Движение.СчетДт.ВидыСубконто.Количество() > 0 И Не ЗначениеЗаполнено(Движение.СубконтоДт[Движение.СчетДт.ВидыСубконто[0].ВидСубконто]) Тогда
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,1,СтрокаУслуг.Субконто1);
		КонецЕсли;
		
		УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,2,СтрокаУслуг.Субконто2);
		УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,3,СтрокаУслуг.Субконто3);
		
		Движение.СчетКт = СчетКонтрагента;
		
		Если Движение.СчетКт.УчетПоПодразделениям Тогда
			Движение.ПодразделениеКт = Подразделение;
		КонецЕсли;
		
		УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт,1,Контрагент);
		УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт,2,Договор);

		//++сабОпер
		Если НЕ Движение.СчетКт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Документ", Истина)) = Неопределено И РаспределятьПроводкиПоДокументамТоварооборота Тогда
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, Движение.СчетКт, 3, Ссылка);
		КонецЕсли;
		//--сабОпер
		
		Если ФлагВалюты И Движение.СчетДт.Валютный Тогда
			Движение.ВалютнаяСуммаДт = СтрокаУслуг.Сумма; 
			Движение.ВалютаДт = Валюта;
		КонецЕсли;

		Если ФлагВалюты И Движение.СчетКт.Валютный Тогда
			Движение.ВалютнаяСуммаКт = СтрокаУслуг.Сумма; 
			Движение.ВалютаКт = Валюта;
		КонецЕсли;
		
		Движение.Сумма = ?(УчитыватьНДС, ?(СуммаВключаетНДС, СтрокаУслуг.Сумма - СтрокаУслуг.СуммаНДС, СтрокаУслуг.Сумма), ?(СуммаВключаетНДС, СтрокаУслуг.Сумма, СтрокаУслуг.Сумма + СтрокаУслуг.СуммаНДС)) * КурсВалюты;;
		Движение.Содержание = СтрокаУслуг.Содержание;
		
		Если УчитыватьНДС И СтрокаУслуг.СуммаНДС Тогда
			Движение = Движения.Учетный.Добавить();
			Движение.Период = Дата;
			Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
			Движение.Предприятия = Предприятие;
			
			Движение.СчетДт = ПланыСчетов.Учетный.Счет6801();
			
			Если Движение.СчетДт.УчетПоПодразделениям Тогда
				Движение.ПодразделениеДт = ?(ЗначениеЗаполнено(СтрокаУслуг.Подразделение), СтрокаУслуг.Подразделение, Подразделение);
			КонецЕсли;
			
			Если Движение.СчетДт.Количественный Тогда
				Движение.КоличествоДт = СтрокаУслуг.Количество;
			КонецЕсли;
			
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,1,НалогНДС);
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,2,Организация);
			
			Движение.СчетКт = СчетКонтрагента;
			
			Если Движение.СчетКт.УчетПоПодразделениям Тогда
				Движение.ПодразделениеКт = Подразделение;
			КонецЕсли;
			
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт,1,Контрагент);
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт,2,Договор);
			
			//++сабОпер
			Если НЕ Движение.СчетКт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Документ", Истина)) = Неопределено И РаспределятьПроводкиПоДокументамТоварооборота Тогда
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, Движение.СчетКт, 3, Ссылка);
			КонецЕсли;
			//--сабОпер
			
			Если ФлагВалюты И Движение.СчетДт.Валютный Тогда
				Движение.ВалютнаяСуммаДт = СтрокаУслуг.Сумма; 
				Движение.ВалютаДт = Валюта;
			КонецЕсли;
			
			Если ФлагВалюты И Движение.СчетКт.Валютный Тогда
				Движение.ВалютнаяСуммаКт = СтрокаУслуг.Сумма; 
				Движение.ВалютаКт = Валюта;
			КонецЕсли;
			
			Движение.Сумма = СтрокаУслуг.СуммаНДС;
			Движение.Содержание = СтрокаУслуг.Содержание;
			
		КонецЕсли;
		
				
	КонецЦикла;
	
	Для Каждого СтрокаБонуснойПродукции Из БонуснаяПродукция Цикл
		Движение = Движения.Учетный.Добавить();
		
		СчДебет = СтрокаБонуснойПродукции.Номенклатура.Счет10;
		
		Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
		Движение.Предприятия = Предприятие;
		Движение.Период = Дата;
		Движение.СчетДт = СчДебет;
		Если СчДебет.УчетПоПодразделениям Тогда
			Движение.ПодразделениеДт = Подразделение;
		КонецЕсли;
		УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт, Движение.СчетДт, 1, СтрокаБонуснойПродукции.Номенклатура);
		УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт, Движение.СчетДт, 2, Склад);
		Движение.КоличествоДт = СтрокаБонуснойПродукции.Количество;

		Движение.СчетКт = ПланыСчетов.Учетный._98_02;
		Если Движение.СчетКт.УчетПоПодразделениям Тогда
			Движение.ПодразделениеКт = Подразделение;
		КонецЕсли;	
		УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, Движение.СчетКт, 1, Контрагент);
		УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, Движение.СчетКт, 2, НайтиДоговорКонтрагента(Контрагент, "Учет бонусной продукции"));
		
		Движение.Сумма = СтрокаБонуснойПродукции.Сумма;
		Движение.Содержание = "Учет бонусной продукции";
	КонецЦикла;	
	
	//оптимизация проведения. проверка на изменения проводок
	сабОперОбщегоНазначения.ПроверитьПроводкиНаИзменение(Движения.Учетный, ДополнительныеСвойства.КоличественныеПоказателиПроводокДляПроверки); 
	
	//меняем статус заказа
	Если НЕ ДополнительныеСвойства.Свойство("НеИзменятьСтатусЗаказа") И ЗначениеЗаполнено(ДокОснование) И ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ЗаказПоставщику") И Не ДокОснование.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт Тогда		
		ЗаказОб = ДокОснование.ПолучитьОбъект();
		ЗаказОб.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт;
		Если ЗаказОб.Проведен Тогда
			ЗаказОб.Записать(РежимЗаписиДокумента.Проведение);
		Иначе	
			ЗаказОб.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	КонецЕсли;
	
	сабОперОбщегоНазначения.РаспределитьПроводкиПоДокументамОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведенияДокумента);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	РучнаяКорректировка = Ложь;
	Движения.Записать();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Для Каждого СтрокаУслуг Из Услуги Цикл
		Если Не ЗначениеЗаполнено(СтрокаУслуг.СчетЗатрат) Тогда
			Сообщить("В строке № " + СтрокаУслуг.НомерСтроки + " не установлен счет затрат");
			//Отказ = Истина;
		КонецЕсли;	
		Если ТипЗнч(СтрокаУслуг.СтатьяЗатрат) = Тип("СправочникСсылка.Субконто") Тогда
			Сообщить("В строке № " + СтрокаУслуг.НомерСтроки + " не обработана статья затрат");
			//Отказ = Истина;
		КонецЕсли;	
	КонецЦикла;
		
КонецПроцедуры

Функция НайтиДоговорКонтрагента(ТекКонтрагент, ТекНаименование)
	
	Если Не ЗначениеЗаполнено(ТекНаименование) Тогда
		ТекНаименование = "Основной";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Наименование = &Наименование
	|	И ДоговорыКонтрагентов.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Наименование", ТекНаименование);
	Запрос.УстановитьПараметр("Владелец", ТекКонтрагент);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ТекДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		ТекДоговор.Наименование = ТекНаименование;
		ТекДоговор.Владелец = ТекКонтрагент;
		ТекДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
		ТекДоговор.Записать();
		Возврат ТекДоговор.Ссылка;
	КонецЕсли;	
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;		
	КонецЦикла;	
		
КонецФункции

Функция НайтиВнутреннийДоговор(ТекПредприятие, ТекНаименование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВнутренниеДоговоры.Ссылка
	|ИЗ
	|	Справочник.ВнутренниеДоговоры КАК ВнутренниеДоговоры
	|ГДЕ
	|	ВнутренниеДоговоры.Наименование = &Наименование
	|	И ВнутренниеДоговоры.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Наименование", ТекНаименование);
	Запрос.УстановитьПараметр("Владелец", ТекПредприятие);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ТекДоговор = Справочники.ВнутренниеДоговоры.СоздатьЭлемент();
		ТекДоговор.Наименование = ТекНаименование;
		ТекДоговор.Владелец = ТекПредприятие;
		ТекДоговор.Предприятие = Предприятие;
		ТекДоговор.Записать();
		Возврат ТекДоговор.Ссылка;
	КонецЕсли;	
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;		
	КонецЦикла;	
	
КонецФункции

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	СуммаИтог = ТабличнаяЧасть.Итог("Сумма") + Услуги.Итог("Сумма");
	СуммаНДСИтог = ТабличнаяЧасть.Итог("СуммаНДС") + Услуги.Итог("СуммаНДС");
	СуммаДокумента = СуммаИтог;
	
	//Обработка пометка удаления
	Если Не Ссылка.ПометкаУдаления И ПометкаУдаления Тогда	
		Запрос = новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	УЧ_ПеремещениеТоваров.Ссылка
		               |ИЗ
		               |	Документ.УЧ_ПеремещениеТоваров КАК УЧ_ПеремещениеТоваров
		               |ГДЕ
		               |	УЧ_ПеремещениеТоваров.ДокОснование = &ДокОснование
		               |	И НЕ УЧ_ПеремещениеТоваров.ПометкаУдаления
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	УЧ_ВозвратТоваровПоставщику.Ссылка
		               |ИЗ
		               |	Документ.УЧ_ВозвратТоваровПоставщику КАК УЧ_ВозвратТоваровПоставщику
		               |ГДЕ
		               |	УЧ_ВозвратТоваровПоставщику.ДокОснование = &ДокОснование
		               |	И НЕ УЧ_ВозвратТоваровПоставщику.ПометкаУдаления
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	УЧ_ПоступлениеТоваров.Ссылка
		               |ИЗ
		               |	Документ.УЧ_ПоступлениеТоваров КАК УЧ_ПоступлениеТоваров
		               |ГДЕ
		               |	УЧ_ПоступлениеТоваров.ДокОснование = &ДокОснование
		               |	И НЕ УЧ_ПоступлениеТоваров.ПометкаУдаления";
		Запрос.УстановитьПараметр("ДокОснование", ДокОснование);
		Выгрузка = Запрос.Выполнить().Выгрузить();
		Если Выгрузка.Количество() = 1 Тогда //остался единственный не помеченный подчиненный заказу документ - этот
			Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ЗаказПоставщику") И ДокОснование.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт Тогда
				ЗаказОб = ДокОснование.ПолучитьОбъект();
				ЗаказОб.Статус = Перечисления.СтатусыЗаказовПоставщикам.Подтвержден;
				ЗаказОб.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("КоличественныеПоказателиПроводокДляПроверки", сабОперОбщегоНазначения.ПолучитьКоличественныеПоказателиПроводок(Ссылка));	
	
	//дата изменена
	Если ЗначениеЗаполнено(Ссылка) И НЕ Дата = Ссылка.Дата Тогда
		ДополнительныеСвойства.Вставить("ДатаДокументаИзменена", Истина);		
	КонецЕсли;
	
	//Если внутрихолдинговое поступление установим цены
	Если ЗначениеЗаполнено(ДокОснование) И ТипЗнч(ДокОснование) = Тип("ДокументСсылка.УЧ_ПеремещениеТоваров") И СчетКонтрагента = ПланыСчетов.Учетный.Счет5502() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УЧ_ПеремещениеТоваровТабличнаяЧасть.Номенклатура КАК Номенклатура,
		|	СРЕДНЕЕ(УЧ_ПеремещениеТоваровТабличнаяЧасть.Цена) КАК Цена
		|ИЗ
		|	Документ.УЧ_ПеремещениеТоваров.ТабличнаяЧасть КАК УЧ_ПеремещениеТоваровТабличнаяЧасть
		|ГДЕ
		|	УЧ_ПеремещениеТоваровТабличнаяЧасть.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	УЧ_ПеремещениеТоваровТабличнаяЧасть.Номенклатура";
		Запрос.УстановитьПараметр("Ссылка", ДокОснование);
		
		ТаблицаЦенПоПеремещению = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаТоваров Из ТабличнаяЧасть Цикл
			НайденныеСтроки = ТаблицаЦенПоПеремещению.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТоваров.Номенклатура));
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				СтрокаТоваров.Цена = НайденнаяСтрока.Цена;
				СтрокаТоваров.Сумма = СтрокаТоваров.Количество * СтрокаТоваров.Цена;
			КонецЦикла;	
		КонецЦикла;
	КонецЕсли;
	
	//из подписки на событие
	БюджетныйНаСервере.ДокументыПередЗаписьюПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтотОбъект.ЭтоНовый());
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)

	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		Если НЕ ДанныеЗаполнения.ВидОперации = Перечисления.ВидыЗаказов.ЗакупкаТоваров И НЕ ДанныеЗаполнения.ВидОперации = Перечисления.ВидыЗаказов.ЗакупкаСырья
			И НЕ ДанныеЗаполнения.ВидОперации = Перечисления.ВидыЗаказов.ЗакупкаМатериалов Тогда
			СтандартнаяОбработка = Ложь;
			Комментарий = "##НеверныйВидОперации" + ДанныеЗаполнения.ВидОперации;
			Возврат;
		КонецЕсли; 
		
		Отказ = сабОперОбщегоНазначения.ПроверкаСозданияНаОснованииНаСервере(ДанныеЗаполнения, Комментарий, СтандартнаяОбработка);
		Если Отказ.Признак = "##УжеСоздан" Тогда
			ВызватьИсключение "На основании Заказ поставщику уже введен документ " + Отказ.Ссылка;
		ИначеЕсли Отказ.Признак = "##НеПроведен" Тогда
			ВызватьИсключение "Документ Заказ поставщику не проведен. Ввод на основании не возможен.";
		КонецЕсли;
		
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения, , "Дата, Номер");
		СчетКонтрагента = ПланыСчетов.Учетный.Счет6001();
		ДокОснование = ДанныеЗаполнения;
		Для Каждого СтрокаТовары Из ДанныеЗаполнения.ТабличнаяЧасть Цикл
			СтрокаТЧ = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТовары);
			СтрокаТЧ.КоличествоПоПервичнымДокументам = СтрокаТовары.Количество;
			СтрокаТЧ.СуммаПоПервичнымДокументам = СтрокаТовары.Сумма;
			СтрокаТЧ.СуммаНДСПоПервичнымДокументам = СтрокаТовары.СуммаНДС;
		КонецЦикла;	
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.УЧ_Реализация") Тогда
		
		Отказ = сабОперОбщегоНазначения.ПроверкаСозданияНаОснованииНаСервере(ДанныеЗаполнения, Комментарий, СтандартнаяОбработка);
		Если Отказ.Признак = "##УжеСоздан" Тогда
			ВызватьИсключение "На основании Реализация ТМЦ и услуг (упр) уже введен документ " + Отказ.Ссылка;
		ИначеЕсли Отказ.Признак = "##НеПроведен" Тогда
			ВызватьИсключение "Документ Реализация ТМЦ и услуг (упр) не проведен. Ввод на основании не возможен.";
		КонецЕсли;
		
		//ДанныеЗаполнения = Документы.УЧ_Реализация.СоздатьДокумент();
		
		//Если ДанныеЗаполнения.Предприятие.Наименование = "Голубое небо" Тогда //Супербоб для ГН, убрать по окончании проекта
		//	Предприятие = ДанныеЗаполнения.Предприятие;
		//	Подразделение = ДанныеЗаполнения.ВидДеятельности;
		//	Склад = Подразделение.Склад;
		//Иначе	
			Если ДанныеЗаполнения.Счет.Родитель = ПланыСчетов.Учетный.Счет79() Тогда
				СчетКонтрагента = ДанныеЗаполнения.Счет;
				Предприятие = ДанныеЗаполнения.Контрагент;
				Контрагент = ДанныеЗаполнения.Предприятие;
				Договор = сабОперОбщегоНазначения.ПолучитьДоговорКонтрагентаПоУмолчанию(Контрагент).Договор;
				//Подразделение = ДанныеЗаполнения.ПодразделениеВн;
				//Организация = Подразделение.Организация;
				//ПредприятиеПоставщик = ДанныеЗаполнения.Предприятие;
				//ПодразделениеВн = ДанныеЗаполнения.ВидДеятельности;
				//ДоговорВн = Договор.ВнутрихолдинговыйДоговор;
				//ОрганизацияВн = ПодразделениеВн.Организация;
			Иначе	
				СчетКонтрагента = ПланыСчетов.Учетный.Счет6001();
			КонецЕсли;
		//КонецЕсли;
		ДокОснование = ДанныеЗаполнения;
		Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийРеализация.Товары Тогда
			ВидОперации = Перечисления.ВидыПоступлений.Поступление;
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийРеализация.Услуги Тогда
			ВидОперации = Перечисления.ВидыПоступлений.ПоступлениеУслуг;
		Иначе
			ВидОперации = Перечисления.ВидыПоступлений.ПоступлениеТМЦИУслуг;
		КонецЕсли;
		Для Каждого СтрокаТовары Из ДанныеЗаполнения.Товары Цикл
			СтрокаТЧ = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТовары, ,"Склад");
			СтрокаТЧ.Номенклатура = СтрокаТовары.Номенклатура;
		КонецЦикла;
		Для Каждого СтрокаТовары Из ДанныеЗаполнения.Услуги Цикл
			СтрокаТЧ = Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТовары);
			//СтрокаТЧ.Номенклатура = СтрокаТовары.Наименование;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.УЧ_ПеремещениеТоваров") Тогда
		
		Отказ = сабОперОбщегоНазначения.ПроверкаСозданияНаОснованииНаСервере(ДанныеЗаполнения, Комментарий, СтандартнаяОбработка);
		Если Отказ.Признак = "##УжеСоздан" Тогда
			ВызватьИсключение "На основании Перемещение ТМЦ (упр) уже введен документ " + Отказ.Ссылка;
		ИначеЕсли Отказ.Признак = "##НеПроведен" Тогда
			ВызватьИсключение "Документ Перемещение ТМЦ (упр) не проведен. Ввод на основании не возможен.";
		КонецЕсли;		
		Предприятие = ДанныеЗаполнения.ПредприятиеПолучатель;
		Контрагент = ДанныеЗаполнения.Предприятие;
		Подразделение = ДанныеЗаполнения.ПодразделениеПолучатель;
		Склад = Подразделение.Склад;
		
		Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыПеремещений.ПеремещениеНаПредприятие Тогда
			СчетКонтрагента = ПланыСчетов.Учетный.Счет7902();
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыПеремещений.ПеремещениеНаПредприятиеБезВозмещения Тогда
			СчетКонтрагента = ПланыСчетов.Учетный.Счет5502();
			Договор = ДанныеЗаполнения.Подразделение;
		КонецЕсли;
		
		ДокОснование = ДанныеЗаполнения;
		ВидОперации = Перечисления.ВидыПоступлений.Поступление;
		
		Для Каждого СтрокаТовары Из ДанныеЗаполнения.ТабличнаяЧасть Цикл
			СтрокаТЧ = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТовары);
			СтрокаТЧ.СчетУчета = СтрокаТовары.СчетУчетаБУ;
		КонецЦикла;
	КонецЕсли;
	
	сабОбщегоНазначенияБУХ.сабОбработкиЗаполненияУчпетныхДокументовОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

Функция НайтиКонтрагентаПоПредприятиюВНХ(ТекПредприятие)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ПредприятиеХодлинга = &ПредприятиеХодлинга
	|	И НЕ Контрагенты.ПометкаУдаления";
	Запрос.УстановитьПараметр("ПредприятиеХодлинга", ТекПредприятие);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;	
	
	Возврат Справочники.Контрагенты.ПустаяСсылка();
	
КонецФункции

Функция ПолучитьВнутреннийДоговор(ТекПредприятиеВн, ТекПредприятие)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВнутренниеДоговоры.Ссылка
	|ИЗ
	|	Справочник.ВнутренниеДоговоры КАК ВнутренниеДоговоры
	|ГДЕ
	|	ВнутренниеДоговоры.Владелец = &Владелец
	|	И ВнутренниеДоговоры.Предприятие = &Предприятие
	|	И НЕ ВнутренниеДоговоры.ПометкаУдаления";
	Запрос.УстановитьПараметр("Владелец", ТекПредприятиеВн);
	Запрос.УстановитьПараметр("Предприятие", ТекПредприятие);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;	
	
	Возврат Справочники.ВнутренниеДоговоры.ПустаяСсылка();
	
КонецФункции

Процедура ЗаполнитьТоварыПоступленияПоТТН() Экспорт
	
	ВыгрузкаТовары = ТабличнаяЧасть.Выгрузить();
	ТабличнаяЧасть.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТТНВходящаяЕГАИСТовары.АлкогольнаяПродукция,
	|	ТТНВходящаяЕГАИСТовары.Количество,
	|	ТТНВходящаяЕГАИСТовары.Количество КАК КоличествоУпаковок,
	|	ТТНВходящаяЕГАИСТовары.Сумма,
	|	ТТНВходящаяЕГАИСТовары.Цена,
	|	ТТНВходящаяЕГАИСТовары.ИдентификаторУпаковки,
	|	ТТНВходящаяЕГАИСТовары.ИдентификаторСтроки
	|ПОМЕСТИТЬ ТаблицаЕГАИС
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИСТовары
	|ГДЕ
	|	ТТНВходящаяЕГАИСТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЕГАИС.АлкогольнаяПродукция,
	|	ТаблицаЕГАИС.Количество,
	|	ТаблицаЕГАИС.КоличествоУпаковок,
	|	ТаблицаЕГАИС.Сумма,
	|	ТаблицаЕГАИС.Цена,
	|	ТаблицаЕГАИС.ИдентификаторУпаковки,
	|	ТаблицаЕГАИС.ИдентификаторСтроки,
	|	СоответствиеНоменклатурыЕГАИС.Номенклатура,
	|	СоответствиеНоменклатурыЕГАИС.Характеристика,
	|	СоответствиеНоменклатурыЕГАИС.Упаковка,
	|	ВЫБОР
	|		КОГДА СоответствиеНоменклатурыЕГАИС.Номенклатура ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИскатьСоответствиеБезУпаковок
	|ПОМЕСТИТЬ ТаблицаСоответствий
	|ИЗ
	|	ТаблицаЕГАИС КАК ТаблицаЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО ТаблицаЕГАИС.АлкогольнаяПродукция = СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция
	|			И ТаблицаЕГАИС.ИдентификаторУпаковки = СоответствиеНоменклатурыЕГАИС.ИдентификаторУпаковки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСоответствий.АлкогольнаяПродукция,
	|	ТаблицаСоответствий.Количество,
	|	ТаблицаСоответствий.КоличествоУпаковок,
	|	ТаблицаСоответствий.Сумма,
	|	ТаблицаСоответствий.Цена,
	|	ТаблицаСоответствий.ИдентификаторУпаковки,
	|	ТаблицаСоответствий.ИдентификаторСтроки,
	|	ТаблицаСоответствий.Номенклатура,
	|	ТаблицаСоответствий.Характеристика,
	|	ТаблицаСоответствий.Упаковка,
	|	ТаблицаСоответствий.ИскатьСоответствиеБезУпаковок
	|ПОМЕСТИТЬ ТаблицаПодготовкаДополнительногоПоиска
	|ИЗ
	|	ТаблицаСоответствий КАК ТаблицаСоответствий
	|ГДЕ
	|	ТаблицаСоответствий.ИскатьСоответствиеБезУпаковок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДополнительногноПоиска.АлкогольнаяПродукция,
	|	ВЫБОР
	|		КОГДА СоответствиеНоменклатурыЕГАИС.Упаковка = &УпаковкиПустоеЗначение
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ПараметрРанжирования,
	|	СоответствиеНоменклатурыЕГАИС.Номенклатура,
	|	СоответствиеНоменклатурыЕГАИС.Упаковка
	|ИЗ
	|	ТаблицаПодготовкаДополнительногоПоиска КАК ТаблицаДополнительногноПоиска
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО ТаблицаДополнительногноПоиска.АлкогольнаяПродукция = СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПараметрРанжирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСоответствий.АлкогольнаяПродукция,
	|	ТаблицаСоответствий.Количество,
	|	ТаблицаСоответствий.КоличествоУпаковок,
	|	ТаблицаСоответствий.Сумма,
	|	ТаблицаСоответствий.Цена,
	|	ТаблицаСоответствий.ИдентификаторУпаковки,
	|	ТаблицаСоответствий.ИдентификаторСтроки,
	|	ТаблицаСоответствий.Номенклатура,
	|	ТаблицаСоответствий.Характеристика,
	|	ТаблицаСоответствий.Упаковка,
	|	ТаблицаСоответствий.ИскатьСоответствиеБезУпаковок
	|ИЗ
	|	ТаблицаСоответствий КАК ТаблицаСоответствий";
	
	Запрос.УстановитьПараметр("Ссылка", ТТНВходящаяЕГАИС);
	Запрос.УстановитьПараметр("УпаковкиПустоеЗначение", "");
	
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаДанныеЕГАИС = Результат[4].Выгрузить();
	ТаблицаДополнительныхДанные = Результат[3].Выгрузить();
	
	Для каждого СтрокаДанныхЕГАИС Из ТаблицаДанныеЕГАИС Цикл
		//СтрокаТаблицы = ТоварыПоДаннымПоставщика.Добавить();
		СтрокаТаблицы = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДанныхЕГАИС);
		
		Если СтрокаДанныхЕГАИС.ИскатьСоответствиеБезУпаковок Тогда
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("АлкогольнаяПродукция", СтрокаДанныхЕГАИС.АлкогольнаяПродукция);
			
			МассивСтрок = ТаблицаДополнительныхДанные.НайтиСтроки(СтруктураПоиска);
			
			Если МассивСтрок.Количество() > 0 Тогда
				Количество = СтрокаТаблицы.Количество;
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, МассивСтрок[0]);
				СтрокаТаблицы.Количество = Количество;
				СтрокаТаблицы.КоличествоПоПервичнымДокументам = МассивСтрок[0].Количество;
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Для Каждого СтрокаТовары Из ВыгрузкаТовары Цикл
		Если СтрокаТовары.АлкогольнаяПродукция.Пустая() и не СтрокаТовары.Номенклатура.АлкогольнаяПродукция Тогда
			ЗаполнитьЗначенияСвойств(ТабличнаяЧасть.Добавить(), СтрокаТовары);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",  УчитыватьНДС);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(ЭтотОбъект));
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	СтруктураТЧ = Новый Структура;
	//СтруктураТЧ.Вставить("СтрокиТЧ" , ТоварыПоДаннымПоставщика);
	СтруктураТЧ.Вставить("СтрокиТЧ" , ТабличнаяЧасть);
	ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
	
КонецПроцедуры

Функция СчетаДляРаспределения() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Учетный.Ссылка КАК Ссылка
	               |ИЗ
	               |	ПланСчетов.Учетный КАК Учетный
	               |ГДЕ
	               |	Учетный.ВидыСубконто.ВидСубконто = &ВидСубконто
	               |	И Учетный.ЗапретитьИспользоватьВПроводках = ЛОЖЬ
	               |	И Учетный.Ссылка В(&Счета)";
	
	Запрос.УстановитьПараметр("Счета", СчетКонтрагента);
	Запрос.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Документ", Истина));
	
	Результат = Запрос.Выполнить();
	Счета = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Субконто1Массив = Новый Массив;
	Субконто2Массив = Новый Массив;
	Субконто1Массив.Добавить(Контрагент);
	Субконто2Массив.Добавить(Договор);
	
	Возврат Новый Структура("Субконто1Массив, Субконто2Массив, СчетаДляРаспределения", Субконто1Массив, Субконто2Массив, Счета);
	
КонецФункции // ()

Процедура ДвижениеПоЦенамНоменклатуры()
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	БюджетныйНаСервере.ПриУстановкеНовогоНомераПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
КонецПроцедуры

Процедура ОбработкаЗаполненияСФормы(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт

	ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);	

КонецПроцедуры
