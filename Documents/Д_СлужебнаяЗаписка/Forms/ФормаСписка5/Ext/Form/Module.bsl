                           
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ЭтоПриказы") Тогда
		ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ВидСЗ");	
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ПравоеЗначение = Справочники.Д_ВидыВнутреннихДокументов.Приказ;
	КонецЕсли;	
	
	ТекПП = БюджетныйНаСервере.ПолучитьПредприятия();
	
	РеквизитыПользователя = БюджетныйНаСервере.ВернутьРеквизиты(ПараметрыСеанса.ТекущийПользователь, "ДоступныПредприятияИзСписка, ОграничениеПодразделений, ВидимостьПоСогласованию");  
	
	Список.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", БПСервер.ПолучитьМассивПользователей());
	Список.Параметры.УстановитьЗначениеПараметра("ВсеПредприятия", НЕ РеквизитыПользователя.ДоступныПредприятияИзСписка);
	Список.Параметры.УстановитьЗначениеПараметра("ДоступныеПредприятия", ТекПП);
	Список.Параметры.УстановитьЗначениеПараметра("ВсеПодразделения", НЕ ПараметрыСеанса.ОграничиватьПодразделения);
	Список.Параметры.УстановитьЗначениеПараметра("ДоступныеПодразделения", ПараметрыСеанса.ДоступныеПодразделения);
	Список.Параметры.УстановитьЗначениеПараметра("ВсеЗаявки", РольДоступна("Администратор") ИЛИ РольДоступна("ОФК"));
	//Список.Параметры.УстановитьЗначениеПараметра("ДоступныеСтатьиСырья", ПараметрыСеанса.ТекущийПользователь.ДоступныеСтатьи.ВыгрузитьКолонку("СтатьяДДС"));
	
	Если РеквизитыПользователя.ВидимостьПоСогласованию И НЕ Параметры.Свойство("ТекПлатежка") Тогда
		Элементы.Группа2.Видимость = Ложь;
		ФильтроватьСерверСогласованиеАвтор();
	Иначе
		Если Параметры.Свойство("ТекПлатежка") Тогда
			ТекПлатежка = Параметры.ТекПлатежка;
			Элементы.Группа2.Видимость = Ложь;
		Иначе
			ТекПлатежка = Неопределено ;
		КонецЕсли;
		Список.Параметры.УстановитьЗначениеПараметра("Авторство", Истина);
		Список.Параметры.УстановитьЗначениеПараметра("ПринадлежностьПредприятию", Истина);
		Список.Параметры.УстановитьЗначениеПараметра("Согласовано", Истина);
		Список.Параметры.УстановитьЗначениеПараметра("Оплачено", Истина);
		Список.Параметры.УстановитьЗначениеПараметра("Исполнено", Истина);
		Фильтр = "Нет фильтра";
	КонецЕсли;
	
	Согласование.Параметры.УстановитьЗначениеПараметра("Ссылка", Null);
	
	ЗаполнитьВидыОпераций();
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтроватьСерверАвтор()
	//Список.Отбор.Элементы.Очистить();
	Список.Параметры.УстановитьЗначениеПараметра("Авторство", Истина);
	Список.Параметры.УстановитьЗначениеПараметра("Согласовано", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("ПринадлежностьПредприятию", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("Оплачено", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("Исполнено", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("ВсеЗаявки", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ФильтроватьСерверСогласование()
	Список.Параметры.УстановитьЗначениеПараметра("Авторство", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("Согласовано", Истина);
	Список.Параметры.УстановитьЗначениеПараметра("ПринадлежностьПредприятию", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("Оплачено", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("Исполнено", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("ВсеЗаявки", Ложь);
КонецПроцедуры

&НаСервере
Процедура ФильтроватьСерверСогласованиеАвтор()
	Список.Параметры.УстановитьЗначениеПараметра("Согласовано", Истина);
	Список.Параметры.УстановитьЗначениеПараметра("ПринадлежностьПредприятию", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("Оплачено", Истина);
	Список.Параметры.УстановитьЗначениеПараметра("Авторство", Истина);
	Список.Параметры.УстановитьЗначениеПараметра("Исполнено", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ФильтроватьСервер()
	Список.Параметры.УстановитьЗначениеПараметра("Авторство", Истина);
	Список.Параметры.УстановитьЗначениеПараметра("Согласовано", Истина);
	Список.Параметры.УстановитьЗначениеПараметра("ПринадлежностьПредприятию", Истина);
	Список.Параметры.УстановитьЗначениеПараметра("Оплачено", Истина);
	Список.Параметры.УстановитьЗначениеПараметра("Исполнено", Истина);
	Список.Параметры.УстановитьЗначениеПараметра("ВсеЗаявки", БюджетныйНаСервере.РольДоступнаСервер("Администратор") ИЛИ БюджетныйНаСервере.РольДоступнаСервер("ОФК"));
КонецПроцедуры

&НаКлиенте
Процедура ФильтроватьСерверОплата()
	Список.Параметры.УстановитьЗначениеПараметра("Авторство", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("Согласовано", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("ПринадлежностьПредприятию", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("Оплачено", Истина);
	Список.Параметры.УстановитьЗначениеПараметра("Исполнено", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("ВсеЗаявки", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ФильтроватьСерверИсполнение()
	Список.Параметры.УстановитьЗначениеПараметра("Авторство", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("Согласовано", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("ПринадлежностьПредприятию", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("Оплачено", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("Исполнено", Истина);
	Список.Параметры.УстановитьЗначениеПараметра("ВсеЗаявки", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ФильтрПриИзменении(Элемент)
	Если Фильтр = "Авторство" Тогда
		ФильтроватьСерверАвтор();
	ИначеЕсли Фильтр = "Согласовано вами" Тогда
		ФильтроватьСерверСогласование();
	ИначеЕсли Фильтр = "Неоплаченные" Тогда
		//ФильтроватьСерверНеоплаченные();
	ИначеЕсли Фильтр = "Ознакомление" Тогда
		ФильтроватьСерверОплата();
	ИначеЕсли Фильтр = "Исполненно вами" Тогда
		ФильтроватьСерверИсполнение();
		
	Иначе
		Если БюджетныйНаСервере.ВернутьРеквизит(БюджетныйНаСервере.ПолучитьПользователя(), "ВидимостьПоСогласованию") И НЕ Параметры.Свойство("ТекПлатежка") Тогда
			ФильтроватьСерверСогласованиеАвтор();
		Иначе
			ФильтроватьСервер();
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	Если НЕ Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Согласование.Параметры.УстановитьЗначениеПараметра("Ссылка", Элементы.Список.ТекущаяСтрока);
		//ЗаявкаТЧ.Параметры.УстановитьЗначениеПараметра("Ссылка", Элементы.Список.ТекущаяСтрока);
	Иначе
		Согласование.Параметры.УстановитьЗначениеПараметра("Ссылка", Неопределено);
		//ЗаявкаТЧ.Параметры.УстановитьЗначениеПараметра("Ссылка", Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)
	УстановитьПользователя();
КонецПроцедуры

&НаСервере
Процедура УстановитьПользователя()
	ПараметрыСеанса.ТекущийПользователь = Пользователь;
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда
		БюджетныйНаКлиенте.ДобавитьМаршрутВХранилище(Элемент, Копирование);
		МассивСЗ = Новый Массив;
		МассивСЗ.Добавить(ПредопределенноеЗначение("Справочник.Д_ВидыВнутреннихДокументов.СлужебнаяЗаписка"));
		МассивСЗ.Добавить(ПредопределенноеЗначение("Справочник.Д_ВидыВнутреннихДокументов.Объяснительная"));
		МассивСЗ.Добавить(ПредопределенноеЗначение("Справочник.Д_ВидыВнутреннихДокументов.ИнформационноеПисьмо"));
		
		РеквСЗ = БюджетныйНаСервере.ВернутьРеквизиты(Элемент.ТекущаяСтрока, "ВидСЗ, ВидСЗ.ИмяДокумента");
		
		Если МассивСЗ.Найти(РеквСЗ.ВидСЗ) = Неопределено Тогда
			Отказ = Истина;
			ТекФормаБП = ПолучитьФорму("Документ." + РеквСЗ.ВидСЗИмяДокумента + ".ФормаОбъекта");
			ДанныеФормы = ТекФормаБП.Объект;
			ЗаполнитьНаСервере(ДанныеФормы, Элемент.ТекущаяСтрока);
		    КопироватьДанныеФормы(ДанныеФормы, ТекФормаБП.Объект);
			ТекФормаБП.Открыть();
		КонецЕсли;
	Иначе
		Отказ = Истина;
		//ОткрытьЗначение(Элементы.Создать);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере(ДанныеФормы, Основание)
	Для каждого ТекРеквизит Из Основание.Метаданные().Реквизиты Цикл
		Попытка
			ДанныеФормы[ТекРеквизит.Имя] = Основание[ТекРеквизит.Имя];
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Для каждого ТекРеквизит Из Основание.Метаданные().СтандартныеРеквизиты Цикл
		Попытка
			ДанныеФормы[ТекРеквизит.Имя] = Основание[ТекРеквизит.Имя];
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Для каждого ТекТЧ Из Основание.Метаданные().ТабличныеЧасти Цикл
		Для каждого ТекСтрока Из Основание[ТекТЧ.Имя] Цикл
			НоваяСтрока = ДанныеФормы[ТекТЧ.Имя].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);	
		КонецЦикла;
	КонецЦикла;
	ДанныеФормы.Дата = ТекущаяДата();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыОпераций(Родитель = Неопределено)
	
	СтруктураДоков = СписокВидовСЗ(Родитель);
	ИндексКоманды = 0;
	Для Каждого ВидОперации Из СтруктураДоков Цикл
		Если ВидОперации.ЭтоРодитель Тогда
			НоваяКнопка = Элементы.Добавить("Команда" + ВидОперации.Код, Тип("ГруппаФормы"), ?(Родитель = Неопределено, Элементы.Создать, Элементы["Команда" + ВидОперации.РодительКод]));
			НоваяКнопка.Заголовок = ВидОперации.Наименование;
			ЗаполнитьВидыОпераций(ВидОперации.Ссылка);
		Иначе
			НоваяКоманда = Команды.Добавить("Команда" + ВидОперации.Код);
			НоваяКоманда.Действие  = "ВыборВидаОперации";
			НоваяКнопка = Элементы.Добавить("Команда" + ВидОперации.Код, Тип("КнопкаФормы"),?(Родитель = Неопределено, Элементы.Создать, Элементы["Команда" + ВидОперации.РодительКод]));
			НоваяКнопка.Заголовок = ВидОперации.Наименование;
			НоваяКнопка.ИмяКоманды = "Команда" + ВидОперации.Код;
		КонецЕсли;
    КонецЦикла;
КонецПроцедуры



&НаКлиенте
Процедура ВыборВидаОперации(Команда)
	
	СтруктураТиповДокументов = ПодобратьТипДокумента(Прав(Команда.Имя, СтрДлина(Команда.Имя) - 7));
	Если СтруктураТиповДокументов.Количество() Тогда
		//Если ЗначениеЗаполнено(СтруктураТиповДокументов[0].РодительИмяДокумента) Тогда
			ТекФорма = ПолучитьФорму("Документ.Д_СлужебнаяЗаписка.ФормаОбъекта");
		    ТекФорма.Объект.ВидСЗ = СтруктураТиповДокументов[0].Ссылка;
			ТекФорма.Открыть();
		//Иначе
		//	ТекФорма = ПолучитьФорму("Документ.Д_СлужебнаяЗаписка.ФормаОбъекта");
		//	ТекФорма.Объект.ВидСЗ = СтруктураТиповДокументов[0].Ссылка;
		//	ТекФорма.Открыть();
		//КонецЕсли;
	Иначе
		Предупреждение("Документ не найден!");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодобратьТипДокумента(КодЭлемента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Д_ВидыВнутреннихДокументов.Ссылка,
	|	Д_ВидыВнутреннихДокументов.ИмяДокумента,
	|	Д_ВидыВнутреннихДокументов.Родитель.ИмяДокумента
	|ИЗ
	|	Справочник.Д_ВидыВнутреннихДокументов КАК Д_ВидыВнутреннихДокументов
	|ГДЕ
	|	Д_ВидыВнутреннихДокументов.Код = &Код";
	
	Запрос.УстановитьПараметр("Код", КодЭлемента);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	МассивДанных = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		Стр = Новый Структура;
		Стр.Вставить("Ссылка", Выборка.Ссылка);
		Стр.Вставить("ИмяДокумента", Выборка.ИмяДокумента);
		Стр.Вставить("РодительИмяДокумента", Выборка.РодительИмяДокумента);
		МассивДанных.Добавить(Стр);
		
	КонецЦикла;
	Возврат МассивДанных;
	
КонецФункции



&НаСервереБезКонтекста
Функция СписокВидовСЗ(Родитель)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Д_ВидыВнутреннихДокументов.Ссылка КАК Ссылка,
	               |	Д_ВидыВнутреннихДокументов.Наименование,
	               |	Д_ВидыВнутреннихДокументов.Код,
	               |	ВЫБОР
	               |		КОГДА Д_ВидыВнутреннихДокументов.Ссылка В
	               |				(ВЫБРАТЬ
	               |					Д_ВидыВнутреннихДокументов.Родитель
	               |				ИЗ
	               |					Справочник.Д_ВидыВнутреннихДокументов КАК Д_ВидыВнутреннихДокументов)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ЭтоРодитель,
	               |	Д_ВидыВнутреннихДокументов.Родитель.Код
	               |ИЗ
	               |	Справочник.Д_ВидыВнутреннихДокументов КАК Д_ВидыВнутреннихДокументов
	               |ГДЕ
	               |	Д_ВидыВнутреннихДокументов.ИмяДокумента = ""Д_СлужебнаяЗаписка""
	               |	И НЕ Д_ВидыВнутреннихДокументов.Родитель = ЗНАЧЕНИЕ(Справочник.Д_ВидыВнутреннихДокументов.ПустаяСсылка)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	МассивСтруктуры = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СтруктураДоков = Новый Структура;
		СтруктураДоков.Вставить("Ссылка", Выборка.Ссылка);
		СтруктураДоков.Вставить("Наименование", Выборка.Наименование);
		СтруктураДоков.Вставить("Код", Выборка.Код);
		СтруктураДоков.Вставить("ЭтоРодитель", Выборка.ЭтоРодитель);
		СтруктураДоков.Вставить("РодительКод", Выборка.РодительКод);
		МассивСтруктуры.Добавить(СтруктураДоков)
	КонецЦикла;
	Возврат МассивСтруктуры;
	
КонецФункции // ()





