
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ВидСЗ") Тогда
		Объект.ВидСЗ = Параметры.ВидСЗ;	
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.СостояниеДокумента = Перечисления.Д_СостоянияДокументов.НаПодготовке;	
		Если ПустаяСтрока(Объект.Кому) Тогда
			Объект.Кому = Справочники.Пользователи.ПустаяСсылка();
		КонецЕсли;
		Объект.ОтправлятьВсем = Ложь;

		Объект.Автор = БюджетныйНаСервере.ПолучитьПользователя();	
	КонецЕсли;
	
	Если Не Объект.Ссылка.Пустая() И НЕ Элементы.Найти("ФормаБизнесПроцессСогласованиеОбщееОтслеживатьДокумент") = Неопределено Тогда
		Элементы.ФормаБизнесПроцессСогласованиеОбщееОтслеживатьДокумент.Пометка = БПСервер.ПроверитьОтслеживаниеЗаявки(Объект.Ссылка, ПараметрыСеанса.ТекущийПользователь);
	КонецЕсли;
	
	//если нет прав на корректировку бюджета
	УбратьФормуКорректировки();
	
	Если Объект.ВидСЗ = Справочники.Д_ВидыВнутреннихДокументов.ПолучитьЭлементПредопределенный("ЗаявкаНаКадровоеДвижение") Тогда
		УстановитьВидимостьЭлементовПоКадровымДвижениям();
	КонецЕсли;
	
	//ТекстовкаФорматированная.Добавить(Объект.Текстовка, Тип("ТекстФорматированногоДокумента"));
	
	сабОбщегоНазначения.ОбновитьКоличествоПрикрепленныхФайловСервер(ЭтаФорма);
	Если Параметры.Свойство("РежимВосстановления") и Параметры.РежимВосстановления Тогда
		сабОбщегоНазначения.ВосстановлениеРеквизитовФормы(ЭтаФорма);
		РежимВосстановления = Истина;
	Иначе 
		РежимВосстановления = Ложь;
	КонецЕсли;
	
	БюджетныйНаСервере.ДействияПриСозданииФормыДокумента(ЭтаФорма, Ложь, Новый Структура("ОбщиеРеквизитыНеПеремещать", Истина) );
	
	//Отражаем юрлицо если заполнено
	Если Параметры.Свойство("БанковскийСчет") Тогда
		Объект.ЮрЛицо = Параметры.БанковскийСчет.Владелец;
		Объект.БанковскийСчет = Параметры.БанковскийСчет;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	БанковскиеСчета1.Ссылка,
		|	БанковскиеСчета1.Владелец КАК ЮрЛицо,
		|	БанковскиеСчета1.Банк,
		|	БанковскиеСчета1.Владелец.ИНН КАК ИНН,
		|	БанковскиеСчета1.Владелец.КПП КАК КПП,
		|	БанковскиеСчета1.Владелец.Директор КАК Директор,
		|	Д_ИсточникППСрезПоследних.Предприятие,
		|	Д_ИсточникППСрезПоследних.ОтветственноеЛицо,
		|	БанковскиеСчета1.ДатаЗакрытия КАК ДатаЗакрытия,
		|	БанковскиеСчета1.Банк.КоррСчет КАК КоррСчет,
		|	БанковскиеСчета1.Банк.Код КАК БИК,
		|	БанковскиеСчета1.НомерСчета
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета1
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Д_ИсточникПП.СрезПоследних КАК Д_ИсточникППСрезПоследних
		|		ПО БанковскиеСчета1.Ссылка = Д_ИсточникППСрезПоследних.БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета1.Ссылка = &Ссылка";
		
		//в случае банковского счета контр //д1 24.05.16
		Если ТипЗнч(Объект.БанковскийСчет) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.БанковскиеСчета", "Справочник.БанковскиеСчета");			
		
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Ссылка", Параметры.БанковскийСчет);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выгрузить();
		
		СтруктураДанных = Новый Структура;
		Для Каждого СтрокаВыборки ИЗ Выборка.Колонки Цикл
			СтруктураДанных.Вставить(СтрокаВыборки.Имя, Выборка[0][СтрокаВыборки.Имя]);
		КонецЦикла;
		
		
		Объект.Комментарий = "ообщение о закрытии р/сч " + Строка(Объект.ЮрЛицо);
		Объект.Текстовка = "Сообщение о закрытии счета
		|ОГРН ИНН " + СтруктураДанных.ИНН + " КПП " + СтруктураДанных.КПП + "
		|" + СтруктураДанных.ЮрЛицо + " в " + СтруктураДанных.Банк + " " + Формат(СтруктураДанных.ДатаЗакрытия, "ДФ=dd.MM.yyyy") + " закрыт расчетный счет №" + СтруктураДанных.НомерСчета + ".
		|
		|Директор " + СтруктураДанных.Директор + "
		|
		|ИНН
		|БИК " + СтруктураДанных.БИК + "
		|к/с " + СтруктураДанных.КоррСчет + "
		|
		|ЦФО " + СтруктураДанных.Предприятие + "
		|Ответсвенное лицо " + СтруктураДанных.ОтветственноеЛицо;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.БанковскийСчет) ИЛИ ЗначениеЗаполнено(Объект.ЮрЛицо) Тогда
		Элементы.Группа43.Видимость = Истина;
	КонецЕсли;
	
	ЕстьБП = Ложь;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекБП = БПСервер.НайтиТекущийБПСервер(Объект.Ссылка);
		//Если НЕ ТекБП = Неопределено И ТипЗнч(ТекБП) = Тип("СправочникСсылка.Согласование3") Тогда
		//	ТекБПСтруРекв = БюджетныйНаСервере.ВернутьРеквизиты(ТекБП, "ОснованиеЗаблокирован, Стартован, ОтправлятьВсем");
		//	ВсемСразу = ТекБПСтруРекв.ОтправлятьВсем;
		//	ЕстьБП = Истина;
		Если НЕ ТекБП = Неопределено И ТипЗнч(ТекБП) = Тип("СправочникСсылка.Согласование2") Тогда
			ТекБПСтруРекв = БюджетныйНаСервере.ВернутьРеквизиты(ТекБП, "ОснованиеЗаблокирован, Стартован");
			ВсемСразу = Неопределено;
			ЕстьБП = Истина;
		ИначеЕсли НЕ ТекБП = Неопределено И ТипЗнч(ТекБП) = Тип("СправочникСсылка.СогласованиеОбщее") Тогда
			ТекБПСтруРекв = БюджетныйНаСервере.ВернутьРеквизиты(ТекБП, "ОснованиеЗаблокирован, Стартован");
			ВсемСразу = Неопределено;
			ЕстьБП = Истина;
		КонецЕсли;
	Иначе
		ТекБП = Неопределено;
		ТекБПСтруРекв = Новый Структура;
		ВсемСразу = Неопределено;
	КонецЕсли;
	
	ТекДоступность = Ложь;
	Если НЕ ТекБП = Неопределено Тогда
		ТекДоступность = ТекБПСтруРекв.ОснованиеЗаблокирован;
		Если ТекДоступность = Неопределено Тогда
			ТекДоступность = ТекБПСтруРекв.Стартован;
		КонецЕсли;
		БюджетныйНаСервере.ФормаТолькоПросмотр(Объект, ЭтаФорма, ТекДоступность);
	КонецЕсли;
	
	Если Не Элементы.Найти("ФормаДокументСогласовать") = Неопределено Тогда
		Элементы.ФормаДокументСогласовать.Видимость = Не ЕстьБП;
	КонецЕсли;
	Элементы.ФормаЗаписатьИЗакрыть.Видимость = ЕстьБП;
	Элементы.ФормаЗаписатьИЗакрыть.КнопкаПоУмолчанию = ЕстьБП;

	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//если уже есть БП по документу, то не отражаем кнопки запуска БП
	
	Если Объект.Ссылка.Пустая() Тогда
		Для каждого ТекСтрока Из Объект.СЗ Цикл
			ТекСтрока.ОтменаОплаты = Ложь;		
		КонецЦикла; 		
	КонецЕсли;
	
	Элементы.ЦФО.Доступность = 1 - Объект.ЦФОвТЧ;
	
	Если НЕ Объект.СЗ.Количество() И НЕ ПустаяСтрока(Объект.Текстовка) Тогда
		Элементы.Группа9.ТекущаяСтраница = Элементы.Группа11;
	КонецЕсли;
	
	ПроизвольнаяСЗПриИзмененииПриОткрытии(0);
	Элементы.ВидимостьВсем.Подсказка = "Документ будет отражаться в списке у всех пользователей, которым доступно предприятие.";
	
	ПредприятиеПриИзменении(Неопределено);
	
	
	Элементы.ТабличныеДанные.Видимость = Объект.ДобавитьТаблицу;
	
	
	//Если НЕ ВсемСразу = Неопределено Тогда
	//	Если ВсемСразу Тогда
	//		НаправлятьНаУтверждение = "Всем сразу";
	//	Иначе
	//		НаправлятьНаУтверждение = "По очереди";
	//	КонецЕсли;
	//Иначе
	//	Если Объект.ОтправлятьВсем Тогда
	//		НаправлятьНаУтверждение = "Всем сразу";
	//	Иначе
	//		НаправлятьНаУтверждение = "По очереди";
	//	КонецЕсли;
	//КонецЕсли;
	
	
	ЗаполнитьСтрокиТЧ();
	
	Если Элементы.ПроизвольнаяСЗ.СписокВыбора.НайтиПоЗначению(Объект.ВидСЗ) = Неопределено И ЗначениеЗаполнено(Объект.ВидСЗ) Тогда
		Элементы.ПроизвольнаяСЗ.СписокВыбора.Добавить(Объект.ВидСЗ);	
	КонецЕсли;
	
	Если Не РежимВосстановления Тогда
		ЭтаФорма.ПодключитьОбработчикОжидания("АвтосохранениеРеквизитовФормыНаКлиенте", 30);
	КонецЕсли;
	
	//формируем красивые списки
	ДоступныеПредприятия = БюджетныйНаСервере.ПолучитьПредприятия();
	Если ДоступныеПредприятия.Количество() < 15 Тогда
		БюджетныйНаКлиенте.ЗаполнитьСписокРеквизитаДубль2(ЭтаФорма, "СписокВыбора_Предприятие", ДоступныеПредприятия, Объект.Предприятие);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПоискУжеЗапущенныхБП()
	//ищем созданные бизнес-процессы
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат 0;	
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Задача.Ссылка
	|ИЗ
	|	Справочник.Задача КАК Задача
	|ГДЕ
	|	Задача.Заявка = &Заявка";
	
	Запрос.УстановитьПараметр("Заявка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Возврат Выборка.Количество();
КонецФункции // ()

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
Функция ПолучитьДанныеОрганизацияПриИзменении(Организация)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("НаименованиеПолное", Организация.НаименованиеПолное);
	СтруктураДанные.Вставить("КодОКАТО", Организация.КодПоОКАТО);
	СтруктураДанные.Вставить("БанковскийСчет", Организация.ОсновнойБанковскийСчет);
	СтруктураДанные.Вставить("ТекстКорреспондента", Организация.ОсновнойБанковскийСчет.ТекстКорреспондента);
	СтруктураДанные.Вставить("ИННПлательщика", Организация.ИНН);
	СтруктураДанные.Вставить("КПППлательщика", Организация.КПП);
	СтруктураДанные.Вставить("ЭтоФизЛицо", Перечисления.ЮрФизЛицо.ФизЛицо);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
Функция ПолучитьДанныеКонтрагентПриИзменении(Контрагент)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("НаименованиеПолное", Контрагент.НаименованиеПолное);
	СтруктураДанные.Вставить("СчетКонтрагента", Контрагент.ОсновнойБанковскийСчет);
	СтруктураДанные.Вставить("ИННПолучателя", Контрагент.ИНН);
	СтруктураДанные.Вставить("КПППолучателя", Контрагент.КПП);
	СтруктураДанные.Вставить("НазначениеПлатежа", Контрагент.ОсновнойБанковскийСчет.ТекстНазначения);
	СтруктураДанные.Вставить("ТекстКорреспондента", Контрагент.ОсновнойБанковскийСчет.ТекстКорреспондента);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

&НаКлиенте
Процедура ЗаявкаКонтрагентПриИзменении(Элемент)
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Элементы.Заявка.ТекущиеДанные.Контрагент);
	
	Элементы.Заявка.ТекущиеДанные.СчетКонтрагента = СтруктураДанные.СчетКонтрагента;
КонецПроцедуры

&НаСервере
Процедура УбратьФормуКорректировки()
	//Если НЕ ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Справочники.Согласование2) Тогда
	//	ЭлементКУдалению = Элементы.ПроизвольнаяСЗ.СписокВыбора.НайтиПоЗначению("Корректировка бюджета");
	//	Элементы.ПроизвольнаяСЗ.СписокВыбора.Удалить(ЭлементКУдалению);	
	//КонецЕсли;
КонецПроцедуры



&НаСервере
Функция СменитьТип()
	НовыйТип = Справочники.СтатьиЗатрат.ПустаяСсылка();
	Форма = "Справочник.СтатьиЗатрат.ФормаВыбора";
	
	Возврат Новый Структура("НовыйТип, Форма", НовыйТип, Форма);
КонецФункции

&НаКлиенте
Процедура СЗСтатьяЗатратНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Элемент.ВыбиратьТип = Ложь;
	ПараметрыВыбора = СменитьТип();
	Если ТипЗнч(Элементы.СЗ.ТекущиеДанные.СтатьяЗатрат) = Неопределено Тогда
		Элементы.СЗ.ТекущиеДанные.СтатьяЗатрат = ПараметрыВыбора.НовыйТип;
	КонецЕсли;
	Форма = ПолучитьФорму(ПараметрыВыбора.Форма, Новый Структура("ТекущаяСтрока", Элементы.СЗ.ТекущиеДанные.СтатьяЗатрат), Элемент);
	Форма.Открыть();	
	Элемент.ВыбиратьТип = Истина;
	
КонецПроцедуры

&НаСервере
Функция НайтиСтатьюДДС(Ссылка)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СтатьиЗатрат.Ссылка ЕСТЬ NULL 
	|			ТОГДА СтатьиДоходовРасходов.Ссылка
	|		ИНАЧЕ СтатьиЗатрат.Ссылка
	|	КОНЕЦ КАК Статья
	|ИЗ
	|	Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|		ПО СтатьиДДС.Ссылка = СтатьиЗатрат.СтатьяБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатьиДоходовРасходов КАК СтатьиДоходовРасходов
	|		ПО СтатьиДДС.Ссылка = СтатьиДоходовРасходов.СтатьяБДДС
	|ГДЕ
	|	СтатьиДДС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("Статья", Выборка.Статья);	
	Иначе
		Возврат Новый Структура("Статья", Справочники.СтатьиЗатрат.ПустаяСсылка());
	КонецЕсли;
КонецФункции // ()

&НаКлиенте
Процедура ЦФОНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Объект.ЦФО.Пустая() Тогда
		ТекЦФО = Объект.Предприятие;
	Иначе
		ТекЦФО = Объект.ЦФО;
	КонецЕсли;
	ФормаВыб = ПолучитьФорму("Справочник.Предприятия.Форма.ФормаВыбора", Новый Структура("ТекущаяСтрока", ТекЦФО) , Элемент);
	ТекЭлемент = Объект.Предприятие;
	ФормаВыб.ТекЭлемент = ТекЭлемент;
	ФормаВыб.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ЦФОвТЧПриИзменении(Элемент)
	Элементы.ЦФО.Доступность = 1 - Объект.ЦФОвТЧ;
	//Элементы.СЗЦФО.Видимость = Объект.ЦФОвТЧ;
	УстановитьСвязь();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	//Если Объект.ВидСЗ = ПредопределенноеЗначение("Справочник.Д_ВидыВнутреннихДокументов.СогласованиеУсловийКлиента") Тогда
	//	Объект.Комментарий = "Установка условий: ";
	//	Для каждого ТекСтрока Из Объект.УсловияКлиента Цикл
	//		Объект.Комментарий = Объект.Комментарий  + Строка(ТекСтрока.Контрагент) + ", "; 	
	//	КонецЦикла;
	//	Объект.Комментарий = Лев(Объект.Комментарий, СтрДлина(Объект.Комментарий) - 2);
	//КонецЕсли;	
	Отказ = 1 - ПроверитьЗаполнение();
	
	Если Объект.ЦФО.Пустая() Тогда
		Объект.ЦФО = Объект.Предприятие;	
	КонецЕсли;
	//Для каждого ТекСтрока Из Объект.СЗ Цикл
	//	Если ТекСтрока.ЦФО.Пустая() Тогда
	//		ТекСтрока.ЦФО = Объект.ЦФО;		
	//	КонецЕсли;	
	//КонецЦикла;
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Автор = БюджетныйНаСервере.ПолучитьПользователя();	
	КонецЕсли;
	
	Если НаправлятьНаУтверждение = "Всем сразу" Тогда
		Объект.ОтправлятьВсем = Истина;
	Иначе
		Объект.ОтправлятьВсем = Ложь;
	КонецЕсли;
	Для каждого ТекСтрока Из Объект.СЗ Цикл
		Если ПустаяСтрока(ТекСтрока.ВидДеятельности) Тогда
			//Если Объект.Самооплата Тогда
			//	ТекСтрока.Подразделение = БюджетныйНаСервере.ВернутьРеквизит(Объект.Предприятие, "ВидДеятельности");
			//Иначе
			ТекСтрока.ВидДеятельности = БюджетныйНаСервере.ВернутьРеквизит(ТекСтрока.ЦФО, "ВидДеятельности");
			//КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	сабОбщегоНазначения.ОчиститьАвтосохраненияОбъекта(Объект.Ссылка);
	//Объект.Текстовка = ТекстовкаФорматированная.ПолучитьТекст();
	
КонецПроцедуры

&НаСервере
Функция РасчитатьЛимиты(СтатьяДДС, ЦФО, Подразделение, СтатьяЗатрат)
	/////////////////////////////////////////////////////////////////Расчет лимитов/////////////////////
	//
	АктуальныйСценарий = БюджетныйНаСервере.ПолучитьАктуальныйСценарий(Объект.Дата);
	
	МассивСценариев = Новый Массив;
	МассивСценариев.Добавить(АктуальныйСценарий);
	МассивСценариев.Добавить(Справочники.СценарииПланирования.ПланПоСЗ);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СценарииПланирования.Ссылка
	|ИЗ
	|	Справочник.СценарииПланирования КАК СценарииПланирования
	|ГДЕ
	|	СценарииПланирования.Родитель В(&Родитель)
	|	И СценарииПланирования.ВлкючатьВПлан = ИСТИНА";
	
	Запрос.УстановитьПараметр("Родитель", МассивСценариев);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		МассивСценариев.Добавить(Выборка.Ссылка);	
		
	КонецЦикла;
	
	
	//Запрос.УстановитьПараметр("Сценарий", МассивСценариев);
	//Запрос.УстановитьПараметр("Дата1", НачалоМесяца(Ссылка.Дата));
	//Запрос.УстановитьПараметр("Дата2", КонецМесяца(Ссылка.Дата));
	//Запрос.УстановитьПараметр("Счет2", ПланыСчетов.Учетный.Счет20());
	//Запрос.УстановитьПараметр("КорСчет2", ПланыСчетов.Учетный.Счет1001());
	//Запрос.УстановитьПараметр("ТипНоменклатуры", Перечисления.ТипНоменклатуры.ОсновнаяПродукция);
	//Запрос.УстановитьПараметр("ОсновноеСырье", Справочники.ИздержкиОбращения.ЗатратыОсн);
	//Запрос.УстановитьПараметр("Предприятия", Предприятия);
	
	//РезультатСырье = Запрос.Выполнить();
	
	МассивСтатей = Новый Массив;
	
	Если ЗначениеЗаполнено(СтатьяЗатрат) Тогда
		МассивСтатей.Добавить(СтатьяЗатрат)
	Иначе	
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	СтатьиЗатрат.Ссылка
		|ИЗ
		|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
		|ГДЕ
		|	СтатьиЗатрат.СтатьяБДДС = &СтатьяБДДС";
		
		Запрос.УстановитьПараметр("СтатьяБДДС", СтатьяДДС);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		
		Если Выборка.Следующий() Тогда
			МассивСтатей.Добавить(Выборка.Ссылка);
		КонецЕсли;	 
	КонецЕсли; 
	
	//запрос для расчета лимитов на начало (суммируются корреспонденции 20-40 + 90.3+25-91)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	-ЕСТЬNULL(Затраты.СуммаОборот, 0) КАК СуммаПП
	|ИЗ
	|	РегистрБухгалтерии.Бюджетный.Обороты(
	|			&Дата1,
	|			&Дата2,
	|			Регистратор,
	|			Счет = &Счет2
	|				ИЛИ Счет = ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ЗатратыНаПрво),
	|			,
	|			СценарийПлана В (&Сценарий)
	|				И Предприятия В ИЕРАРХИИ (&Предприятия)
	|				И (Субконто2 В (&Статьи)
	|					ИЛИ Субконто1 В (&Статьи))
	|				И ВЫБОР
	|					КОГДА Предприятия.УчетПоПодразделениям
	|							ИЛИ Предприятия = &ПредприятиеКазна
	|						ТОГДА Подразделение В (&Подразделение)
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ,
	|			КорСчет = &КорСчет2
	|				ИЛИ КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ДоходыИРасходы),
	|			) КАК Затраты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Затраты903.СуммаОборот, 0)
	|ИЗ
	|	РегистрБухгалтерии.Бюджетный.Обороты(
	|			&Дата1,
	|			&Дата2,
	|			Регистратор,
	|			Счет = &Счет3,
	|			,
	|			СценарийПлана В (&Сценарий)
	|				И Предприятия В ИЕРАРХИИ (&Предприятия)
	|				И Субконто2 В (&Статьи)
	|				И ВЫБОР
	|					КОГДА Предприятия.УчетПоПодразделениям = ИСТИНА
	|							ИЛИ Предприятия = &ПредприятиеКазна
	|						ТОГДА Подразделение В (&Подразделение)
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ,
	|			,
	|			) КАК Затраты903";
	
	
	Запрос.УстановитьПараметр("ПредприятиеКазна", Константы.сабПредприятиеКазна.Получить());
	Запрос.УстановитьПараметр("Дата1", НачалоМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("Дата2", КонецМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("Сценарий", МассивСценариев);
	Запрос.УстановитьПараметр("Предприятия", ЦФО);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.ОсновнаяПродукция);
	Запрос.УстановитьПараметр("Счет2", ПланыСчетов.Учетный.Счет20());
	Запрос.УстановитьПараметр("Счет3", ПланыСчетов.Учетный.Счет9003());
	Запрос.УстановитьПараметр("КорСчет2", ПланыСчетов.Учетный.Счет40());
	Запрос.УстановитьПараметр("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.ОсновнаяПродукция);
	Запрос.УстановитьПараметр("Статьи", МассивСтатей);
	Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
	
	МассивСтарыхСчетов = ПараметрыСеанса.ДоступныеСчета;
	МассивНовыйСчетов = Новый Массив;
	Для каждого ТекСчет  Из ПараметрыСеанса.ДоступныеСчета Цикл
		МассивНовыйСчетов.Добавить(ТекСчет);	
	КонецЦикла;
	УстановитьПривилегированныйРежим(Истина);
	МассивНовыйСчетов.Добавить(ПланыСчетов.Учетный.Счет20());
	МассивНовыйСчетов.Добавить(ПланыСчетов.Учетный.Счет9003());
	МассивНовыйСчетов.Добавить(ПланыСчетов.Учетный.Счет90());
	МассивНовыйСчетов.Добавить(ПланыСчетов.Учетный.Счет40());
	МассивНовыйСчетов.Добавить(ПланыСчетов.Учетный.Счет25());
	ПараметрыСеанса.ДоступныеСчета = Новый ФиксированныйМассив(МассивНовыйСчетов);
	УстановитьПривилегированныйРежим(Ложь);
	
	РезультатЗатраты = Запрос.Выполнить();
	Выборка = РезультатЗатраты.Выбрать();
	
	ПараметрыСеанса.ДоступныеСчета = МассивСтарыхСчетов;
	
	Затраты = 0;
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.СуммаПП) = Тип("Число") Тогда
			Затраты = Затраты + Выборка.СуммаПП;
		КонецЕсли;
	КонецЦикла;
	
	//запрос для расчета лимитов денег на начало
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(-Деньги.СуммаОборот) КАК СуммаППДДС
	|ИЗ
	|	РегистрБухгалтерии.Бюджетный.Обороты(
	|			&Дата1,
	|			&Дата2,
	|			Регистратор,
	|			Счет В ИЕРАРХИИ (&Счет1),
	|			,
	|			СценарийПлана В (&Сценарий)
	|				И Предприятия В (&Предприятия)
	|				И ВЫБОР
	|					КОГДА Предприятия.УчетПоПодразделениям = ИСТИНА
	|							ИЛИ Предприятия = &ПредприятиеКазна
	|						ТОГДА Подразделение В (&Подразделение)
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|				И Субконто1 В (&Статьи),
	|			,
	|			) КАК Деньги
	|ГДЕ
	|	НЕ Деньги.Регистратор В (&Регистратор)";
	
	
	ДенежныеСчета = Новый Массив;
	ДенежныеСчета.Добавить(ПланыСчетов.Учетный.Счет5001());
	ДенежныеСчета.Добавить(ПланыСчетов.Учетный.Счет5101());
	ДенежныеСчета.Добавить(ПланыСчетов.Учетный.Счет5501());
	
	Запрос.УстановитьПараметр("ПредприятиеКазна", Константы.сабПредприятиеКазна.Получить());
	Запрос.УстановитьПараметр("Дата1", НачалоМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("Дата2", КонецМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("Сценарий", МассивСценариев);
	Запрос.УстановитьПараметр("Предприятия", ЦФО);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Счет1", ДенежныеСчета);
	Запрос.УстановитьПараметр("Статьи", СтатьяДДС);
	Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
	
	РезультатДеньги = Запрос.Выполнить();
	Выборка = РезультатДеньги.Выбрать();
	Деньги = 0;
	Если Выборка.Следующий() Тогда
		Деньги = Выборка.СуммаППДДС;
	КонецЕсли;
	
	
	
	Возврат Новый Структура("Затраты, Деньги", Затраты, Деньги);
КонецФункции

&НаКлиенте
Процедура ПроизвольнаяСЗПриИзменении(Элемент)
	
	//Если Объект.ВидСЗ = ПредопределенноеЗначение("Справочник.Д_ВидыВнутреннихДокументов.СогласованиеУсловийКлиента") Тогда
	//	Элементы.Группа9.ТекущаяСтраница = Элементы.ЛимитНаПокупателя;	
	//	Элементы.ДобавитьКому.Видимость 			= Истина;
	//	//Элементы.НаправлятьНаУтверждение.Видимость 	= Истина;
	//	Элементы.ВидимостьВсем.Видимость 			= Истина;
	//	Элементы.Комментарий.Видимость 				= Ложь;
	//	Объект.СЗ.Очистить();
	//	
	//ИначеЕсли Объект.ВидСЗ = ПредопределенноеЗначение("Справочник.Д_ВидыВнутреннихДокументов.ЗаявкаНаКадровоеДвижение") Тогда
	//	Элементы.Группа9.ТекущаяСтраница = Элементы.КадровыеДвижения;	
	//	УстановитьВидимостьЭлементовПоКадровымДвижениям();
	//	
	////ИначеЕсли Объект.ВидСЗ = ПредопределенноеЗначение("Справочник.Д_ВидыВнутреннихДокументов.ЗаявкаНаКомандировочные") Тогда
	////	Элементы.Группа9.ТекущаяСтраница = Элементы.ГруппаЗаявкаНаКомандировку;
	////	
	//ИначеЕсли НЕ Объект.ВидСЗ = ПредопределенноеЗначение("Справочник.Д_ВидыВнутреннихДокументов.КорректировкаБюджета") ИЛИ (Не ЗначениеЗаполнено(Объект.ВидСЗ) И ЗначениеЗаполнено(Объект.Текстовка)) Тогда
	//	Элементы.Группа9.ТекущаяСтраница = Элементы.Группа11;
	//	Если ПустаяСтрока(Объект.ВидСЗ) Тогда
	//		Объект.ВидСЗ = ПредопределенноеЗначение("Справочник.Д_ВидыВнутреннихДокументов.СлужебнаяЗаписка");		
	//	КонецЕсли;
	//	//Элементы.Группа8.Видимость = Ложь;
	//	//Элементы.ВидПроизвольнойСЗ.Видимость = Истина;
	//	Элементы.ДобавитьКому.Видимость 			= Истина;
	//	Элементы.ВидимостьВсем.Видимость 			= Истина;
	//	Элементы.Комментарий.Видимость 				= Истина;
	//	Если Объект.ВидСЗ = ПредопределенноеЗначение("Справочник.Д_ВидыВнутреннихДокументов.ИнформационноеПисьмо") Тогда
	//		НаправлятьНаУтверждение = "Всем сразу";
	//		Объект.ОтправлятьВсем = Истина;
	//		//Элементы.НаправлятьНаУтверждение.Видимость 	= Ложь;
	//	Иначе
	//		НаправлятьНаУтверждение = "По очереди";
	//		Объект.ОтправлятьВсем = Ложь;
	//		//Элементы.НаправлятьНаУтверждение.Видимость 	= Истина;
	//	КонецЕсли;
	//	
	//	//Элементы.ФормаДокументД_СлужебнаяЗапискаСогласовать.Видимость = Истина;
	//	//Элементы.ФормаСоздатьБП.Видимость = Ложь;
	//	//Элементы.ФормаДокументД_СлужебнаяЗапискаСогласовать.КнопкаПоУмолчанию = Истина;
	//	Объект.СЗ.Очистить();
	//	Объект.УсловияКлиента.Очистить();
	//	
	//Иначе
	//	Элементы.Группа9.ТекущаяСтраница = Элементы.Группа10;	
	//	Если ПустаяСтрока(Объект.ВидСЗ) Тогда
	//		Объект.ВидСЗ = ПредопределенноеЗначение("Справочник.Д_ВидыВнутреннихДокументов.КорректировкаБюджета");		
	//	КонецЕсли;
	//	//Элементы.Группа8.Видимость = Истина;
	//	//Элементы.ВидПроизвольнойСЗ.Видимость = Ложь;
	//	Элементы.ДобавитьКому.Видимость = Ложь;
	//	//Элементы.НаправлятьНаУтверждение.Видимость = Ложь;
	//	Элементы.Комментарий.Видимость 				= Истина;
	//	Если Объект.Рецензенты.Количество() Тогда
	//		Объект.Кому = Объект.Рецензенты[0].Пользователь;		
	//	КонецЕсли;
	//	Объект.Рецензенты.Очистить();
	//	Объект.УсловияКлиента.Очистить();
	//	Элементы.ВидимостьВсем.Видимость = Ложь;
	//	//Элементы.ФормаДокументД_СлужебнаяЗапискаСогласовать.Видимость = Ложь;
	//	//Элементы.ФормаСоздатьБП.Видимость = Истина;
	//	//Элементы.ФормаСоздатьБП.КнопкаПоУмолчанию = Истина;
	//КонецЕсли;
	//
	//Если Объект.ВидСЗ = ПредопределенноеЗначение("Справочник.Д_ВидыВнутреннихДокументов.СогласованиеДоговораСтроительство") Тогда
	//	НаправлятьНаУтверждение = "Всем сразу";
	//	Объект.ОтправлятьВсем = Истина;
	//КонецЕсли;	
	//
	//Элементы.Группа22.Видимость = (Объект.ВидСЗ = ПредопределенноеЗначение("Справочник.Д_ВидыВнутреннихДокументов.СогласованиеДоговораСтроительство"));
	//Элементы.Комментарий.Видимость = НЕ (Объект.ВидСЗ = ПредопределенноеЗначение("Справочник.Д_ВидыВнутреннихДокументов.СогласованиеДоговораСтроительство"));	
	//Элементы.КомментарийСтр.Видимость = (Объект.ВидСЗ = ПредопределенноеЗначение("Справочник.Д_ВидыВнутреннихДокументов.СогласованиеДоговораСтроительство"));	
	//Элементы.Кому.Заголовок = ?(Объект.ВидСЗ = ПредопределенноеЗначение("Справочник.Д_ВидыВнутреннихДокументов.СогласованиеДоговораСтроительство"), "Инициатор", "Кому");
	//Элементы.Группа7.Заголовок = ?(Объект.ВидСЗ = ПредопределенноеЗначение("Справочник.Д_ВидыВнутреннихДокументов.СогласованиеДоговораСтроительство"), "Предмет договора", "Текст документа");
	//Элементы.Группа20.Видимость = НЕ Элементы.Группа3.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольнаяСЗПриИзмененииПриОткрытии(Элемент)
	//Если Объект.ВидСЗ = ПредопределенноеЗначение("Справочник.Д_ВидыВнутреннихДокументов.Приказ") Тогда
	//	//Элементы.ПроизвольнаяСЗ.СписокВыбора.Очистить();
	//	//Элементы.ПроизвольнаяСЗ.СписокВыбора.Добавить("Приказ");
	//	Элементы.ПроизвольнаяСЗ.ТолькоПросмотр = Истина;
	//	Элементы.НеДействующий.Доступность 	= Истина;
	//	Элементы.НеДействующий.Видимость 	= Истина;
	//	Элементы.ГруппаПриказы.Видимость 	= Истина;
	//	//Элементы.Группа4.Видимость 			= Истина;
	//	Элементы.Кому.Заголовок = "От чьего имени:";
	//	//Иначе	
	//	//	ВыборПриказа = Элементы.ПроизвольнаяСЗ.СписокВыбора.НайтиПоЗначению("Приказ");
	//	//	Если ВыборПриказа <> Неопределено Тогда
	//	//		Элементы.ПроизвольнаяСЗ.СписокВыбора.Удалить(ВыборПриказа);
	//	//	КонецЕсли;
	//КонецЕсли;	
	//
	//Если Объект.ВидСЗ = ПредопределенноеЗначение("Справочник.Д_ВидыВнутреннихДокументов.СогласованиеУсловийКлиента") Тогда
	//	Элементы.Группа9.ТекущаяСтраница = Элементы.ЛимитНаПокупателя;	
	//	Элементы.ДобавитьКому.Видимость 			= Истина;
	//	//Элементы.НаправлятьНаУтверждение.Видимость 	= Истина;
	//	Элементы.ВидимостьВсем.Видимость 			= Истина;
	//ИначеЕсли Объект.ВидСЗ = ПредопределенноеЗначение("Справочник.Д_ВидыВнутреннихДокументов.ЗаявкаНаКадровоеДвижение") Тогда
	//	Элементы.Группа9.ТекущаяСтраница = Элементы.КадровыеДвижения;
	//	УстановитьВидимостьЭлементовПоКадровымДвижениям();
	////ИначеЕсли Объект.ВидСЗ = ПредопределенноеЗначение("Справочник.Д_ВидыВнутреннихДокументов.ЗаявкаНаКомандировочные") Тогда
	////	Элементы.Группа9.ТекущаяСтраница = Элементы.ГруппаЗаявкаНаКомандировку;
	////ИначеЕсли НЕ Объект.ВидСЗ = ПредопределенноеЗначение("Справочник.Д_ВидыВнутреннихДокументов.КорректировкаБюджета") ИЛИ (ПустаяСтрока(Объект.ВидСЗ) И НЕ ПустаяСтрока(Объект.Текстовка)) Тогда
	//	Элементы.Группа9.ТекущаяСтраница = Элементы.Группа11;
	//	//Элементы.Группа8.Видимость = Ложь;
	//	Элементы.ДобавитьКому.Видимость = Истина;
	//	Если Объект.ВидСЗ = ПредопределенноеЗначение("Справочник.Д_ВидыВнутреннихДокументов.ИнформационноеПисьмо") Тогда
	//		НаправлятьНаУтверждение = "Всем сразу";
	//		Объект.ОтправлятьВсем = Истина;
	//		//Элементы.НаправлятьНаУтверждение.Видимость 	= Ложь;
	//	Иначе 
	//		//Элементы.НаправлятьНаУтверждение.Видимость = Истина;
	//	КонецЕсли;	
	//	Элементы.ВидимостьВсем.Видимость = Истина;
	//	//Элементы.ФормаДокументД_СлужебнаяЗапискаСогласовать.Видимость = Истина;
	//	//Элементы.ФормаСоздатьБП.Видимость = Ложь;
	//	//Элементы.ФормаДокументД_СлужебнаяЗапискаСогласовать.КнопкаПоУмолчанию = Истина;
	//Иначе
	//	Элементы.Группа9.ТекущаяСтраница = Элементы.Группа10;	
	//	//Элементы.Группа8.Видимость = Истина;
	//	Элементы.ДобавитьКому.Видимость = Ложь;
	//	//Элементы.НаправлятьНаУтверждение.Видимость = Ложь;
	//	Элементы.ВидимостьВсем.Видимость = Ложь;
	//	//Элементы.ФормаДокументД_СлужебнаяЗапискаСогласовать.Видимость = Ложь;
	//	//Элементы.ФормаСоздатьБП.Видимость = Истина;
	//	//Элементы.ФормаСоздатьБП.КнопкаПоУмолчанию = Истина;
	//КонецЕсли;
	//
	//Если Объект.ВидСЗ = ПредопределенноеЗначение("Справочник.Д_ВидыВнутреннихДокументов.СогласованиеДоговораСтроительство") Тогда
	//	НаправлятьНаУтверждение = "Всем сразу";
	//	Объект.ОтправлятьВсем = Истина;
	//КонецЕсли;	
	//
	//Элементы.Группа22.Видимость = (Объект.ВидСЗ = ПредопределенноеЗначение("Справочник.Д_ВидыВнутреннихДокументов.СогласованиеДоговораСтроительство"));
	//Элементы.Комментарий.Видимость = НЕ (Объект.ВидСЗ = ПредопределенноеЗначение("Справочник.Д_ВидыВнутреннихДокументов.СогласованиеДоговораСтроительство"));	
	//Элементы.КомментарийСтр.Видимость = (Объект.ВидСЗ = ПредопределенноеЗначение("Справочник.Д_ВидыВнутреннихДокументов.СогласованиеДоговораСтроительство"));	
	//Элементы.Кому.Заголовок = ?(Объект.ВидСЗ = ПредопределенноеЗначение("Справочник.Д_ВидыВнутреннихДокументов.СогласованиеДоговораСтроительство"), "Инициатор", "Кому");
	//Элементы.Группа7.Заголовок = ?(Объект.ВидСЗ = ПредопределенноеЗначение("Справочник.Д_ВидыВнутреннихДокументов.СогласованиеДоговораСтроительство"), "Предмет договора", "Текст документа");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьЛимиты(Команда)
	Если НЕ Элементы.СЗ.ТекущиеДанные = Неопределено Тогда
		Если ПустаяСтрока(Элементы.СЗ.ТекущиеДанные.ЦФО) Тогда
			Если ПустаяСтрока(Объект.ЦФО) Тогда
				ЦФО = Объект.Предприятие
			Иначе
				ЦФО = Объект.ЦФО;		
			КонецЕсли;
		Иначе
			ЦФО =  Элементы.СЗ.ТекущиеДанные.ЦФО;	
		КонецЕсли;
		Родитель = БюджетныйНаСервере.ВернутьРеквизит(ЦФО, "Родитель");
		Если НЕ ПустаяСтрока(Родитель) И НЕ Строка(ЦФО) = "Банк оф." Тогда
			ЦФО = Родитель;		
		КонецЕсли;
		СтруктураЛимитов = РасчитатьЛимиты(Элементы.СЗ.ТекущиеДанные.СтатьяБДДС, ЦФО, Элементы.СЗ.ТекущиеДанные.ВидДеятельности, Элементы.СЗ.ТекущиеДанные.СтатьяЗатрат);
		//обработка случаев отсутствия вывода лимитов
		//ЗапретЛимита =  БПСервер.ЗапретПлана(Объект.Предприятие, ЦФО, Элементы.СЗ.ТекущиеДанные.СтатьяБДДС);
		//Если НЕ ЗапретЛимита Тогда
		Элементы.СЗ.ТекущиеДанные.СуммаППДДС = СтруктураЛимитов.Деньги;
		Элементы.СЗ.ТекущиеДанные.СуммаПП = СтруктураЛимитов.Затраты;		
		//КонецЕсли; 
		
	КонецЕсли;
	РассчитатьФактПоЗаявкам();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКому(Команда)
	Если НЕ Объект.Рецензенты.Количество() И НЕ ПустаяСтрока(Объект.Кому) И ТипЗнч(Объект.Кому) = Тип("СправочникСсылка.Пользователи") Тогда
		Если ЗначениеЗаполнено(Объект.Кому) Тогда
			НоваяСтрока = Объект.Рецензенты.Добавить();
			НоваяСтрока.Пользователь = Объект.Кому;
		КонецЕсли;
	КонецЕсли;
	
	ТекПользователь = ОткрытьФормуМодально("Справочник.Пользователи.ФормаВыбора", Новый Структура("РежимВыбора", Истина) );
	Если ЗначениеЗаполнено(ТекПользователь) Тогда
		
		НетВБазе = БюджетныйНаСервере.ВернутьРеквизит(ТекПользователь, "НеУчаствуетВДокументообороте");
		Если НетВБазе Тогда
			Если Вопрос("Пользователь " + Строка(ТекПользователь) + " не участвует в документообороте, т.к. не имеет доступа к базе. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				Возврат;	
			КонецЕсли;	
		КонецЕсли;	
		
		НоваяСтрока = Объект.Рецензенты.Добавить();
		НоваяСтрока.Пользователь = ТекПользователь;
	Иначе
		Возврат;
	КонецЕсли;
	СформироватьКому(ТекПользователь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомуПриИзменении(Элемент)
	//Проверяем пользователей по наименованию. разделитель ;
	Если ТипЗнч(Объект.Кому) = Тип("Строка") И НЕ ПустаяСтрока(Объект.Кому) Тогда
		ТекСтрока = СтрЗаменить(Объект.Кому, "; ", ";");
		МассивИмен = Новый Массив;
		ТекИмя = "";
		Для ТекСимвол = 1 По СтрДлина(ТекСтрока) Цикл
			
			Если Сред(ТекСтрока, ТекСимвол, 1) = ";" Тогда
				МассивИмен.Добавить(ТекИмя);
				ТекИмя = "";
			Иначе
				ТекИмя = ТекИмя + Сред(ТекСтрока, ТекСимвол, 1);			
			КонецЕсли;	
			
		КонецЦикла;
		МассивИмен.Добавить(ТекИмя);
		Для каждого ТекИмя Из МассивИмен Цикл	
			Если НайтиИмя(ТекИмя) = Неопределено Тогда
				Предупреждение("Пользователь " + Строка(ТекИмя) + " не найден в справочнике.");
				СформироватьКому();
				Возврат;
			КонецЕсли;		
		КонецЦикла;
		СформироватьТЧ(МассивИмен);
	Иначе
		НетВБазе = БюджетныйНаСервере.ВернутьРеквизит(Объект.Кому, "НеУчаствуетВДокументообороте");
		Если НетВБазе Тогда
			Если Вопрос("Пользователь " + Строка(Объект.Кому) + " не участвует в документообороте, т.к. не имеет доступа к базе. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				Объект.Кому = ПустойПользователь();
				Возврат;	
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЕсли;
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьКому(ТекПользователь = Неопределено)
	
	//Если Объект.Рецензенты.Количество() > 1 Тогда
	//	СтрокаКому = "";
	//	Для каждого ТекРецензент Из Объект.Рецензенты Цикл
	//		СтрокаКому = СтрокаКому + Строка(ТекРецензент.Пользователь) + "; ";		
	//	КонецЦикла;
	//	СтрокаКому = Лев(СтрокаКому, СтрДлина(СтрокаКому) - 2);
	//	Объект.Кому = СтрокаКому;
	//Иначе
	//	Если НЕ ТекПользователь = Неопределено Тогда
	//		Объект.Кому = ТекПользователь;
	//	КонецЕсли;
	//КонецЕсли;
	
	Если Элементы.ДобавитьКому.Видимость Тогда
		СтрокаКому = "";
		Для каждого ТекРецензент Из Объект.Рецензенты Цикл
			Если ЗначениеЗаполнено(ТекРецензент.Пользователь) Тогда
				СтрокаКому = СтрокаКому + Строка(ТекРецензент.Пользователь) + "; ";		
			КонецЕсли;
		КонецЦикла;
		СтрокаКому = Лев(СтрокаКому, СтрДлина(СтрокаКому) - 2);
		Объект.Кому = СтрокаКому;
	Иначе
		Объект.Кому = ТекПользователь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьТЧ(МассивИмен)
	Объект.Рецензенты.Очистить();
	Для каждого ТекПользователь Из МассивИмен Цикл
		Если ЗначениеЗаполнено(ТекПользователь) Тогда
			НоваяСтрока = Объект.Рецензенты.Добавить();
			НоваяСтрока.Пользователь = НайтиИмя(ТекПользователь);	
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПустойПользователь()
	Возврат Справочники.Пользователи.ПустаяСсылка();
КонецФункции // ()


&НаСервереБезКонтекста
Функция НайтиИмя(ТекИмя)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Пользователи.Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", ТекИмя);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции // ()

&НаКлиенте
Процедура КомуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.Кому = "" И Элементы.ДобавитьКому.Видимость = Ложь Тогда
		Объект.Кому = ПользовательПустаяСсылка();
	КонецЕсли;	
	
	Если ТипЗнч(Объект.Кому) = Тип("Строка") Тогда
		СтандартнаяОбработка = Ложь;
		МассивСтарыхРецензентов = Новый Массив;
		Для каждого ТекРецензент Из Объект.Рецензенты Цикл
			МассивСтарыхРецензентов.Добавить(ТекРецензент.Пользователь);		
		КонецЦикла; 
		
		МассивРецензентов = ОткрытьФормуМодально("Документ.Д_СлужебнаяЗаписка.Форма.ФормаРецензенты", Новый Структура("Рецензенты", МассивСтарыхРецензентов));
		Если НЕ МассивРецензентов = Неопределено Тогда
			Объект.Рецензенты.Очистить();
			Для каждого ТекРецензент Из МассивРецензентов Цикл
				НоваяСтрока = Объект.Рецензенты.Добавить();
				НоваяСтрока.Пользователь = ТекРецензент;			
			КонецЦикла;
			СформироватьКому();
		КонецЕсли;
	ИначеЕсли Объект.Кому = Неопределено Тогда
		Объект.Кому = ПользовательПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомуОчистка(Элемент, СтандартнаяОбработка)
	Объект.Рецензенты.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеПриИзменении(Элемент)
	//Элементы.ВидимостьВсем.Подсказка = "СЗ будет отражаться в списке у всех пользователей, которым доступно предприятие <" + Строка(Объект.Предприятие) + ">.";
	//Элементы.ВидимостьВсем.Заголовок = "Доступен пользователям предприятиия: " + Строка(Объект.Предприятие);
	
	СтруктураДанных = БюджетныйНаСервере.ВернутьРеквизиты(Объект.Предприятие, "УчетПоПодразделениям, ВидДеятельности"); 
	
	Если НЕ СтруктураДанных = Неопределено Тогда
		Элементы.Подразделение.Доступность = СтруктураДанных.УчетПоПодразделениям;
		Если НЕ Элемент = Неопределено Тогда 
			Если СтруктураДанных.УчетПоПодразделениям Тогда
				Объект.Подразделение = СтруктураДанных.ВидДеятельности;
			Иначе
				Объект.Подразделение = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//ПустаяСервернаяПроцедура();  
	ЭтаФорма.ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если СписокВыбора_Предприятие.Количество() Тогда
		ТекЗначение = ВыбратьИзСписка(СписокВыбора_Предприятие, Элемент, СписокВыбора_Предприятие.НайтиПоЗначению(Объект.Предприятие));	
		БюджетныйНаКлиенте.ПриНачалеВыбораРеквизитаВСпискеДубль2(ЭтаФорма, "СписокВыбора_Предприятие", ТекЗначение, "Предприятия", Объект.Предприятие, СтандартнаяОбработка, Ложь);
		ПредприятиеПриИзменении(Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АдресатыПользовательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	БюджетныйНаКлиенте.ДобавитьГруппуПользователей(Элементы, ВыбранноеЗначение, СтандартнаяОбработка);	
КонецПроцедуры

&НаКлиенте
Процедура НужнаТаблицаПриИзменении(Элемент)
	Элементы.ТабличныеДанные.Видимость = Объект.ДобавитьТаблицу;
	Если Объект.ДобавитьТаблицу Тогда
		Элементы.Группа6.ТекущаяСтраница = Элементы.ТабличныеДанные;	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ТекущийОбъект.ТабличныеДанные = Новый ХранилищеЗначения(ТабДок, Новый СжатиеДанных(9));
	
	Если ТекстФормат.Элементы.Количество() Тогда
		ТекущийОбъект.ТекстФорматированный = Новый ХранилищеЗначения(ТекстФормат, Новый СжатиеДанных(9));
		Объект.Текстовка = ТекстФормат.ПолучитьТекст();
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ТабДок = ТекущийОбъект.ТабличныеДанные.Получить();
	сабОбщегоНазначения.ОтобразитьСостояниеДокумента(ЭтаФорма);
	
	ТекстФормат = ТекущийОбъект.ТекстФорматированный.Получить();
	Если НЕ ТекстФормат.Элементы.Количество() Тогда
		НовПар = ТекстФормат.Элементы.Добавить(Тип("КоллекцияЭлементовФорматированногоДокумента"));
		НовТекст = НовПар.Элементы.Добавить(Тип("КоллекцияЭлементовФорматированногоДокумента"));
		НовТекст.Текст = ТекущийОбъект.Текстовка;
		//ТекстФормат = ТекущийОбъект.Содержание;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Граница(Команда)
	Для Каждого Область Из ТабДок.ВыделенныеОбласти Цикл
		ЛинияНов = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		ЛинияНовОчистить = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
		Если Область.ГраницаСлева = ЛинияНов Тогда
			Область.ГраницаСлева = ЛинияНовОчистить;
		Иначе
			Область.ГраницаСлева = ЛинияНов;
		КонецЕсли;
		Если Область.ГраницаСправа = ЛинияНов Тогда
			Область.ГраницаСправа = ЛинияНовОчистить;
		Иначе
			Область.ГраницаСправа = ЛинияНов;
		КонецЕсли;
		Если Область.ГраницаСнизу = ЛинияНов Тогда
			Область.ГраницаСнизу = ЛинияНовОчистить;
		Иначе
			Область.ГраницаСнизу = ЛинияНов;
		КонецЕсли;
		Если Область.ГраницаСверху = ЛинияНов Тогда
			Область.ГраницаСверху = ЛинияНовОчистить;
		Иначе
			Область.ГраницаСверху = ЛинияНов;
		КонецЕсли;
		//Если ТипЗнч(Область) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		//	Для ИндексСтрока = Область.Верх По Область.Низ Цикл
		//		Для ИндексКолонка = Область.Лево По Область.Право Цикл
		//			Попытка
		//				Сумма = Сумма + Число(СтрЗаменить(Результат.Область("R" + Формат(ИндексСтрока, "ЧГ=0") + "C" + Формат(ИндексКолонка, "ЧГ=0")) .Текст, " ", ""));
		//			Исключение
		//			КонецПопытки;
		//		КонецЦикла;
		//	КонецЦикла;
		//КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязь()
	//Если Объект.ЦФОвТЧ Тогда
	//	Связь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы.СЗ.ТекущиеДанные.ЦФО");	
	//ИначеЕсли Объект.ЦФО.Пустая() Тогда
	//	Связь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Предприятие");
	//Иначе	
	//	Связь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.ЦФО");
	//КонецЕсли;
	//
	//МассивСвязей = Новый Массив;
	//МассивСвязей.Добавить(Связь);
	//Элементы.СЗПодразделение.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязей);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦФОПриИзменении(Элемент)
	УстановитьСвязь();
КонецПроцедуры

&НаКлиенте
Процедура СЗПодразделениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Строка(Элементы.СЗ.ТекущиеДанные.ЦФО) = "Казна" ИЛИ Строка(Объект.ЦФО) = "Казна" Тогда
		СтандартнаяОбработка = Ложь;
		ТекСтатья = Элементы.СЗ.ТекущиеДанные.СтатьяБДДС;
		ТекПодразделение = Элементы.СЗ.ТекущиеДанные.ВидДеятельности;
		
		аа = ПолучитьФорму("Справочник.СтруктураПредприятия.ФормаВыбора", Новый Структура("ТекущаяСтрока", ТекПодразделение), Элемент);
		НовыйОтбор = аа.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Владелец");
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		
		НовыйОтбор.ПравоеЗначение = ?(ПустаяСтрока(БюджетныйНаСервере.ВернутьРеквизит(Объект.Предприятие, "Родитель")), Объект.Предприятие, БюджетныйНаСервере.ВернутьРеквизит(Объект.Предприятие, "Родитель"));
		//Иначе
		//	ТекПП = ?(Строка(Элементы.СЗ.ТекущиеДанные.ЦФО) = "Банк оф.", БюджетныйНаСервере.ВернутьРеквизит(Элементы.СЗ.ТекущиеДанные.ЦФО, "Родитель"), Элементы.СЗ.ТекущиеДанные.ЦФО);
		//	
		//	НовыйОтбор.ПравоеЗначение = ТекПП;
		аа.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СЗЦФОНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекПП = ?(ПустаяСтрока(Элементы.СЗ.ТекущиеДанные.ЦФО), Объект.Предприятие, Элементы.СЗ.ТекущиеДанные.ЦФО);
	ТекПП = ?(ПустаяСтрока(БюджетныйНаСервере.ВернутьРеквизит(ТекПП, "Родитель")), ТекПП,БюджетныйНаСервере.ВернутьРеквизит(ТекПП, "Родитель")); 
	ФормаВыб = ПолучитьФорму("Справочник.Предприятия.Форма.ФормаВыбора", Новый Структура("ТекущаяСтрока", ТекПП) , Элемент);
	ФормаВыб.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	ОткрытьФормумодально("Справочник.Пользователи.ФормаВыбора", Новый Структура("РежимВыбора, РасширенныйПодбор, ЗакрыватьПриВыборе", Истина, Истина, Ложь),Элементы.Адресаты); 
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтрокиТЧ()
	Для каждого ТекСтрока Из Объект.СЗ Цикл
		РеквизитЦФО = БюджетныйНаСервере.ВернутьРеквизиты(ТекСтрока.ЦФО, "УчетПоПодразделениям");
		ТекСтрока.УчетПоПодразделениям = РеквизитЦФО.УчетПоПодразделениям;	
		ТекСтрока.ФактПоЗаявкам = РассчитатьФактПоЗаявкамНаСервере(ТекСтрока.ЦФО, ТекСтрока.ВидДеятельности,ТекСтрока.СтатьяБДДС);
	КонецЦикла; 
КонецПроцедуры


&НаКлиенте
Процедура СЗЦФОПриИзменении(Элемент)
	Элементы.СЗ.ТекущиеДанные.УчетПоПодразделениям = БюджетныйНаСервере.ВернутьРеквизит(Элементы.СЗ.ТекущиеДанные.ЦФО, "УчетПоПодразделениям");
	СоздатьСвязь(Строка(Элементы.СЗ.ТекущиеДанные.ЦФО) = "Казна" ИЛИ Строка(Объект.ЦФО) = "Казна");
	
	
КонецПроцедуры

&НаСервере
Процедура СоздатьСвязь(ПроверитьУсловие)
	
	Если ПроверитьУсловие Тогда
		А = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Предприятие");
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(А);
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.СЗПодразделение.СвязиПараметровВыбора = НовыеСвязи;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ЗакрытьФорму" Тогда
		//ЭтаФорма.Записать();
		ЭтаФорма.Закрыть();
	ИначеЕсли ИмяСобытия = "УстановитьДоступность" Тогда
		Объект.ТекущийБизнесПроцесс = Параметр.ТекущийБизнесПроцесс;
		Записать();
	ИначеЕсли ИмяСобытия = "Пересчитать" Тогда
		Закрыть();
	ИначеЕсли ИмяСобытия = "ПрикрепленныеФайлы" Тогда	
		сабОбщегоНазначенияКлиент.ОбновитьКоличествоПрикрепленныхФайлов(ЭтаФорма);
	ИначеЕсли ИмяСобытия = "РазрешитьРедактированиеФормы" Тогда	
		Прочитать();
		ПриСозданииНаСервере(Ложь, Истина);
		ПриОткрытии(Ложь);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗамещенныеПриказыПриказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Форма = ПолучитьФорму("Документ.Д_СлужебнаяЗаписка.ФормаВыбора", , Элемент);
	ЭлементОтбора = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ВидСЗ");	
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ПравоеЗначение = ПредопределенноеЗначение("Справочник.Д_ВидыВнутреннихДокументов.Приказ");
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	ТекЗначения = БюджетныйНаСервере.ПолучитьТекущиеУсловияКонтрагента(Объект.Контрагент, Объект.Дата);
	ЗаполнитьЗначенияСвойств(Объект, ТекЗначения);
КонецПроцедуры



&НаКлиенте
Процедура ПрямоеУвеличениеБюджета(Команда)
	
	ТекДанные = Элементы.СЗ.ТекущиеДанные;
	ТекСтрока = Элементы.СЗ.ТекущаяСтрока;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ТекДанные.ЦФО) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Предприятие не заполнено";
		Сообщение.Поле = "Объект.СЗ[0].Предприятие";
		Сообщение.Сообщить();
	КонецЕсли;	
	
	Элементы.ПрямоеУвеличениеБюджетаНадпись.Заголовок = РассчитатьУвеличениеБюджетаНаСервере(ТекДанные.ЦФО);
	
КонецПроцедуры

&НаСервере
Функция РассчитатьУвеличениеБюджетаНаСервере(ТекПредприятие)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(Д_СлужебнаяЗапискаСЗ.СуммаБДДС, 0)) КАК Сумма,
	|	Д_СлужебнаяЗапискаСЗ.ЦФО
	|ИЗ
	|	Документ.Д_СлужебнаяЗаписка.СЗ КАК Д_СлужебнаяЗапискаСЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Д_ТекущаяЗадача КАК Д_ТекущаяЗадача
	|		ПО Д_СлужебнаяЗапискаСЗ.Ссылка = Д_ТекущаяЗадача.Документ
	|ГДЕ
	|	Д_СлужебнаяЗапискаСЗ.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И Д_СлужебнаяЗапискаСЗ.ЦФО = &Предприятие
	|	И Д_СлужебнаяЗапискаСЗ.ВидДвижения = ""Прямое увеличение""
	|	И НЕ Д_СлужебнаяЗапискаСЗ.Ссылка.ПометкаУдаления
	|	И НЕ ЕСТЬNULL(Д_ТекущаяЗадача.ТекущаяЗадача, """") = ""Отклонено!""
	|
	|СГРУППИРОВАТЬ ПО
	|	Д_СлужебнаяЗапискаСЗ.ЦФО";
	Запрос.УстановитьПараметр("ДатаНач", НачалоМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("Предприятие", ТекПредприятие);
	Выборка = Запрос.Выполнить().Выбрать();
	ЗначениеПрямогоУвеличения = 0;
	Пока Выборка.Следующий() Цикл
		ЗначениеПрямогоУвеличения = Выборка.Сумма;
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Предприятия.Лимит
	|ИЗ
	|	Справочник.Предприятия КАК Предприятия
	|ГДЕ
	|	Предприятия.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ТекПредприятие);
	Выборка = Запрос.Выполнить().Выбрать();
	МаксимальныйЛимит = 0;
	Пока Выборка.Следующий() Цикл
		МаксимальныйЛимит = Выборка.Лимит;
	КонецЦикла;	
	
	ВозможноеУвеличениеБюджета = МаксимальныйЛимит - ЗначениеПрямогоУвеличения;
	
	Возврат "Месячное значение прямого увеличения бюджета: " + ЗначениеПрямогоУвеличения + ". Возможно увеличение не более чем на " + ВозможноеУвеличениеБюджета;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДоговоры(Команда)
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ЗаполнитьДоговорыСервер();
	Иначе	
		Предупреждение("Укажите контрагента для заполнения таблицы договоров и протоколов.");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПротоколы()
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ЗаполнитьПротоколыСервер();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПротоколыСервер()
	СписокДоговоров = Объект.ДоговорыКонтрагента.Выгрузить().ВыгрузитьКолонку("ТекДоговор");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КС_ПротоколыСогласования.Ссылка КАК ТекПротокол,
	|	КС_ПротоколыСогласования.Код,
	|	КС_ПротоколыСогласования.Дата,
	|	КС_ПротоколыСогласования.Цена,
	|	КС_ПротоколыСогласования.СтавкаВерха,
	|	КС_ПротоколыСогласования.Предприятие,
	|	КС_ПротоколыСогласования.Владелец КАК ТекДоговор
	|ИЗ
	|	Справочник.КС_ПротоколыСогласования КАК КС_ПротоколыСогласования
	|ГДЕ
	|	КС_ПротоколыСогласования.Владелец В(&Владелец)";
	
	Запрос.УстановитьПараметр("Владелец", СписокДоговоров);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если НЕ Объект.ПротоколыДоговоров.НайтиСтроки(Новый Структура("ТекДоговор", Выборка.ТекДоговор)).Количество()  Тогда
			НоваяСтрока = Объект.ПротоколыДоговоров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		ИначеЕсли Выборка.Дата > НоваяСтрока.ТекПротокол.Дата И НЕ Выборка.Дата > ТекущаяДата() Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЕсли;
		
	КонецЦикла;
	
	
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьДоговорыСервер()
	Объект.ДоговорыКонтрагента.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК ТекДоговор,
	|	ДоговорыКонтрагентов.Предприятие,
	|	ДоговорыКонтрагентов.Отсрочка КАК ТекущаяОтсрочка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Владелец
	|	И ДоговорыКонтрагентов.ДатаОкончанияДоговора > &ДатаОкончанияДоговора";
	
	Запрос.УстановитьПараметр("Владелец", Объект.Контрагент);
	Запрос.УстановитьПараметр("ДатаОкончанияДоговора", ТекущаяДата());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.ДоговорыКонтрагента.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ЗаполнитьСтрокиТЧ();
	сабОбщегоНазначенияКлиент.ПослеЗаписиАвтосохраняемойФормы(ЭтаФорма);
	Оповестить("ОбновитьПечатнуюФорму");
	//ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ВнутренниеДокументы"));
	Оповестить("ОбновитьСписокЗадач");
КонецПроцедуры

&НаКлиенте
Процедура УсловияКлиентаКонтрагентПриИзменении(Элемент)
	ТекДанные = Элементы.УсловияКлиента.ТекущиеДанные;
	ТекЗначения = БюджетныйНаСервере.ПолучитьТекущиеУсловияКонтрагента(ТекДанные.Контрагент, ТекДанные.Дата);
	ЗаполнитьЗначенияСвойств(ТекДанные, ТекЗначения);
	Если ДатаНеКорректна(ТекДанные.Контрагент, ТекДанные.Дата) Тогда
		Предупреждение("Внимание! По контрагенту """ + Строка(ТекДанные.Контрагент) + """  есть условия позже даты " + Формат(ТекДанные.Дата, "ДФ=dd.MM.yyyy") + "!");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияКлиентаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекДанные = Элементы.УсловияКлиента.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекДанные.Дата) Тогда
		ТекДанные.Дата = Объект.Дата;	
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДатаНеКорректна(Контрагент, Дата)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КС_УсловияКонтрагента.ВнутреннийДокумент
	|ИЗ
	|	РегистрСведений.КС_УсловияКонтрагента КАК КС_УсловияКонтрагента
	|ГДЕ
	|	КС_УсловияКонтрагента.Период > &Период
	|	И КС_УсловияКонтрагента.Контрагент = &Контрагент";
	
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Возврат Выборка.Количество();
	
КонецФункции // ()

&НаКлиенте
Процедура СЗПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	//РассчитатьФактПоЗаявкам(); закоментил Д1 01.07.13. Перенес в команду "Расчитать"
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьФактПоЗаявкам()
	Элементы.СЗ.ТекущиеДанные.ФактПоЗаявкам = РассчитатьФактПоЗаявкамНаСервере(Элементы.СЗ.ТекущиеДанные.ЦФО, Элементы.СЗ.ТекущиеДанные.ВидДеятельности,Элементы.СЗ.ТекущиеДанные.СтатьяБДДС);	
КонецПроцедуры

&НаСервере
Функция РассчитатьФактПоЗаявкамНаСервере(ЦФО, Подразделение, СтатьяБДДС)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СУММА(Д_ЗаявкаНаОплатуЗаявкаБезнал.СуммаДДС) КАК СуммаДДС
	|ПОМЕСТИТЬ таблицы
	|ИЗ
	|	Документ.Д_ЗаявкаНаОплату.ЗаявкаБезнал КАК Д_ЗаявкаНаОплатуЗаявкаБезнал
	|ГДЕ
	|	НЕ Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка.ПометкаУдаления
	|	И Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И Д_ЗаявкаНаОплатуЗаявкаБезнал.ЦФО = &ЦФО
	|	И Д_ЗаявкаНаОплатуЗаявкаБезнал.Подразделение = &Подразделение
	|	И Д_ЗаявкаНаОплатуЗаявкаБезнал.СтатьяДДС = &СтатьяДДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Д_ЗаявкаНаАвансовыйОтчетЗатраты.Сумма
	|ИЗ
	|	Документ.Д_ЗаявкаНаАвансовыйОтчет.Затраты КАК Д_ЗаявкаНаАвансовыйОтчетЗатраты
	|ГДЕ
	|	Д_ЗаявкаНаАвансовыйОтчетЗатраты.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И Д_ЗаявкаНаАвансовыйОтчетЗатраты.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И Д_ЗаявкаНаАвансовыйОтчетЗатраты.Предприятие = &ЦФО
	|	И Д_ЗаявкаНаАвансовыйОтчетЗатраты.Подразделение = &Подразделение
	|	И Д_ЗаявкаНаАвансовыйОтчетЗатраты.Статья = &СтатьяДДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(таблицы.СуммаДДС) КАК СуммаДДС
	|ИЗ
	|	таблицы КАК таблицы";
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаОкончания" ,КонецМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("ЦФО", ЦФО);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("СтатьяДДС",СтатьяБДДС);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.СуммаДДС
	Иначе 
		Возврат 0
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура НаправлятьНаУтверждениеПриИзменении(Элемент)
	Если НаправлятьНаУтверждение = "Всем сразу" Тогда
		Объект.ОтправлятьВсем = Истина;
	Иначе
		Объект.ОтправлятьВсем = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция  ПользовательПустаяСсылка()
	
	Возврат Справочники.Пользователи.ПустаяСсылка();
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьЭлементовПоКадровымДвижениям()
	
	Элементы.ГруппаУпрУчет.Видимость 	= Объект.УправленческийУчет;
	Элементы.ГруппаРеглУчет.Видимость 	= Объект.РегламентированныйУчет;
	
	ЭтоПрием 		= Ложь;
	ЭтоУвольнение 	= Ложь;
	
	Если Объект.ВидКадровогоДвижения = Перечисления.ВидыОперацийДвиженияКадров.ПриемНаРаботу Или Объект.ВидКадровогоДвижения = Перечисления.ВидыОперацийДвиженияКадров.Перемещение Тогда
		ЭтоПрием = Истина;
	ИначеЕсли  Объект.ВидКадровогоДвижения = Перечисления.ВидыОперацийДвиженияКадров.Увольнение Тогда
		ЭтоУвольнение = Истина;	
	КонецЕсли;	
	
	Элементы.Период.Заголовок 				= ?(ЭтоУвольнение, "Дата увольнения", "Дата приема");
	Элементы.ДатаРегл.Заголовок 			= ?(ЭтоУвольнение, "Дата увольнения", "Дата приема");
	Элементы.РазмерУчетнойЗП.Видимость 		= ЭтоПрием;
	Элементы.РазмерОфициальнойЗП.Видимость 	= ЭтоПрием;
	Элементы.ГруппаЗП.Видимость 			= ЭтоПрием;
	Элементы.Группа36.Видимость 			= ЭтоПрием;
	
	Элементы.ГруппаВыплатыУвольнениеУпр.Видимость 	= (ЭтоУвольнение И Объект.УправленческийУчет);
	Элементы.ГруппаВыплатыУвольнениеРегл.Видимость 	= (ЭтоУвольнение И Объект.РегламентированныйУчет);
	
	Элементы.ВсегоВыплатПриУвольнени.Видимость 		= ЭтоУвольнение;
	Элементы.ВыбратьИзТекущихМестРаботы.Видимость 	= (ЭтоУвольнение ИЛИ Объект.ВидКадровогоДвижения = Перечисления.ВидыОперацийДвиженияКадров.Перемещение);
	Элементы.ОткудаПереводим.Видимость 				= (Объект.ВидКадровогоДвижения = Перечисления.ВидыОперацийДвиженияКадров.Перемещение);
	
КонецПроцедуры	

&НаКлиенте
Процедура УправленческийУчетПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементовПоКадровымДвижениям();
	
КонецПроцедуры

&НаКлиенте
Процедура РегламентированныйУчетПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементовПоКадровымДвижениям();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидКадровогоДвиженияПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементовПоКадровымДвижениям();
	
КонецПроцедуры

&НаКлиенте
Процедура РазмерУчетнойЗППриИзменении(Элемент)
	
	ПересчитатьСуммуЗП();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуЗП();
	
	Если Объект.ПолнаяСтавка = 0 Тогда
		Объект.ПроцентСтавки = 0;
	Иначе
		Объект.ПроцентСтавки = Объект.РазмерОфициальнойЗП / Объект.ПолнаяСтавка;
	КонецЕсли;	
	
	Объект.ОбщийРазмерЗП = Объект.РазмерОфициальнойЗП * 0.87 + Объект.РазмерУчетнойЗП;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолнаяСтавкаПриИзменении(Элемент)
	
	ПересчитатьСуммуЗП();
	
КонецПроцедуры

&НаКлиенте
Процедура РазмерОфициальнойЗППриИзменении(Элемент)
	
	ПересчитатьСуммуЗП();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатыПриУвольненииПриИзменении(Элемент)
	
	Объект.ВсегоВыплатПриУвольнении = Объект.ВыплатыПриУвольнении + Объект.ВыплатыПриУвольненииОфициальные;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатыПриУвольненииОфициальныеПриИзменении(Элемент)
	
	Объект.ВсегоВыплатПриУвольнении = Объект.ВыплатыПриУвольнении + Объект.ВыплатыПриУвольненииОфициальные;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзТекущихМестРаботы(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не выбран сотрудник";
		Сообщение.Поле = "Объект.Сотрудник";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;	
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	NULL КАК Предприятие,
	|	КадровоеСостояниеСотрудниковРеглСрезПоследних.ЮрЛицо,
	|	КадровоеСостояниеСотрудниковРеглСрезПоследних.Подразделение,
	|	КадровоеСостояниеСотрудниковРеглСрезПоследних.Должность,
	|	NULL КАК СтруктурнаяЕдиница,
	|	""Регламентированный учет"" КАК ВидУчета,
	|	КадровоеСостояниеСотрудниковРеглСрезПоследних.Регистратор КАК ДокументКадровогоДвижения,
	|	КадровоеСостояниеСотрудниковРеглСрезПоследних.НомерСтроки КАК НомерСтрокиКадровогоДвижения
	|ИЗ
	|	РегистрСведений.КадровоеСостояниеСотрудниковРегл.СрезПоследних(&Период, ) КАК КадровоеСостояниеСотрудниковРеглСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Пользователи.Ссылка = &ТекущийПользователь
	|	И КадровоеСостояниеСотрудниковРеглСрезПоследних.Сотрудник = &Сотрудник
	|	И КадровоеСостояниеСотрудниковРеглСрезПоследних.Работает
	|	И &РегламентированныйУчет
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КадровоеСостояниеСотрудниковУпрСрезПоследних.Предприятие,
	|	NULL,
	|	КадровоеСостояниеСотрудниковУпрСрезПоследних.Подразделение,
	|	КадровоеСостояниеСотрудниковУпрСрезПоследних.Должность,
	|	КадровоеСостояниеСотрудниковУпрСрезПоследних.СтруктурнаяЕдиница,
	|	""Управленческий учет"",
	|	КадровоеСостояниеСотрудниковУпрСрезПоследних.Регистратор,
	|	КадровоеСостояниеСотрудниковУпрСрезПоследних.НомерСтроки
	|ИЗ
	|	РегистрСведений.КадровоеСостояниеСотрудниковУпр.СрезПоследних(&Период, ) КАК КадровоеСостояниеСотрудниковУпрСрезПоследних
	|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Пользователи.Ссылка = &ТекущийПользователь
	|	И КадровоеСостояниеСотрудниковУпрСрезПоследних.Сотрудник = &Сотрудник
	|	И КадровоеСостояниеСотрудниковУпрСрезПоследних.Работает
	|	И &УправленческийУчет";
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТекущийПользователь", БюджетныйНаСервере.ПолучитьПользователя());
	СтруктураПараметров.Вставить("Период", ТекущаяДата());
	СтруктураПараметров.Вставить("Сотрудник", Объект.Сотрудник);
	СтруктураПараметров.Вставить("УправленческийУчет", Объект.УправленческийУчет);
	СтруктураПараметров.Вставить("РегламентированныйУчет", Объект.РегламентированныйУчет);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураПараметров", СтруктураПараметров);
	ПараметрыФормы.Вставить("ТекстЗапроса", ТекстЗапроса);
	
	ПолученныеДанные = ОткрытьФормуМодально("ОбщаяФорма.УниверсальнаяФормаВыбора", ПараметрыФормы);	
	
	Если Не ПолученныеДанные = Неопределено Тогда
		Если ЭтоУвольнение() Тогда 
			Если ПолученныеДанные.ВидУчета = "Регламентированный учет" Тогда
				Объект.ЮрЛицо 				= ПолученныеДанные.ЮрЛицо;
				Объект.ДолжностьРегл 		= ПолученныеДанные.Должность;
				Объект.ПодразделениеЮрЛица 	= ПолученныеДанные.Подразделение;
			ИначеЕсли ПолученныеДанные.ВидУчета = "Управленческий учет" Тогда
				Объект.ПредприятиеУпр 		= ПолученныеДанные.Предприятие;
				Объект.ДолжностьУпр 		= ПолученныеДанные.Должность;
				Объект.ПодразделениеУпр 	= ПолученныеДанные.Подразделение;
				Объект.СтруктурнаяЕдиница 	= ПолученныеДанные.СтруктурнаяЕдиница;
			КонецЕсли;
		Иначе
			Если ПолученныеДанные.ВидУчета = "Регламентированный учет" Тогда
				Объект.ОткудаПереводим = "" + ПолученныеДанные.ЮрЛицо + "; " + ПолученныеДанные.Подразделение + "; " + ПолученныеДанные.Должность;	
			ИначеЕсли ПолученныеДанные.ВидУчета = "Управленческий учет" Тогда
				Объект.ОткудаПереводим = "" + ПолученныеДанные.Предприятие + "; " + ПолученныеДанные.Подразделение + "; " + ПолученныеДанные.Должность + "; Стр. единица: " + ПолученныеДанные.СтруктурнаяЕдиница;	
			КонецЕсли;
			Объект.ДокументКадровогоДвижения 	= ПолученныеДанные.ДокументКадровогоДвижения;
			Объект.НомерСтрокиКадровогоДвижения = ПолученныеДанные.НомерСтрокиКадровогоДвижения;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияКлиентаМесячнаяПотребностьПриИзменении(Элемент)
	
	РассчитатьЛимитыДЗ();
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияКлиентаЦенаПриИзменении(Элемент)
	
	РассчитатьЛимитыДЗ();
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияКлиентаОтсрочкаПриИзменении(Элемент)
	
	РассчитатьЛимитыДЗ();
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияКлиентаМаксКоличествоДнейПросрочкиПриИзменении(Элемент)
	
	РассчитатьЛимитыДЗ();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьЛимитыДЗ()
	
	ТекДанные = Элементы.УсловияКлиента.ТекущиеДанные;
	ТекДанные.ЛимитДЗ = ТекДанные.МесячнаяПотребность * (ТекДанные.Цена + ТекДанные.Верх) * ТекДанные.Отсрочка / 30;
	ТекДанные.ЛимитПДЗ = ТекДанные.МесячнаяПотребность * (ТекДанные.Цена + ТекДанные.Верх) * ТекДанные.МаксКоличествоДнейПросрочки / 30;
	
КонецПроцедуры	

&НаКлиенте
Процедура УсловияКлиентаТекВерхПриИзменении(Элемент)
	
	РассчитатьЛимитыДЗ();
	
КонецПроцедуры

&НаСервере
Функция ЭтоУвольнение()
	
	Возврат Объект.ВидКадровогоДвижения = Перечисления.ВидыОперацийДвиженияКадров.Увольнение;
	
КонецФункции	

&НаКлиенте
Процедура УсловияКлиентаПриАктивизацииСтроки(Элемент)
	ТекДанные = Элементы.УсловияКлиента.ТекущиеДанные;
	Если Не ТекДанные = Неопределено Тогда
		ОтборКонтрагента = Новый ФиксированнаяСтруктура(Новый Структура("Контрагент", ТекДанные.Контрагент));
		Элементы.ДоговоренностиКлиента.ОтборСтрок = ОтборКонтрагента;
	Иначе
		Элементы.ДоговоренностиКлиента.ОтборСтрок = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УсловияКлиентаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекДанные = Элементы.УсловияКлиента.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		ЗаполнитьРеестрДоговоренностей(ТекДанные.Контрагент);
		ОтборКонтрагента = Новый ФиксированнаяСтруктура(Новый Структура("Контрагент", ТекДанные.Контрагент));
		Элементы.ДоговоренностиКлиента.ОтборСтрок = ОтборКонтрагента;
	Иначе
		Объект.ДоговоренностиКлиента.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеестрДоговоренностей(Контрагенты)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	*
	|ИЗ
	|	РегистрСведений.КС_РеестрДоговоренностей.СрезПоследних(, Контрагент В (&Контрагенты)) КАК КС_РеестрДоговоренностейСрезПоследних";
	
	Запрос.УстановитьПараметр("Контрагенты", Контрагенты);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтруктураПоиска = Новый Структура("Контрагент, Предприятие", Выборка.Контрагент, Выборка.Предприятие);
		Если НЕ Объект.ДоговоренностиКлиента.НайтиСтроки(СтруктураПоиска).Количество() Тогда
			НоваяСтрока = Объект.ДоговоренностиКлиента.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.ТекЦена = Выборка.Цена;
			НоваяСтрока.ТекВерх = Выборка.Верх;
			НоваяСтрока.Дата = Объект.Дата;
		КонецЕсли;
	КонецЦикла;
	
	//очищаем лишние
	МассивУдаленныхСтрок = Новый Массив;
	Для каждого ТекСтрока Из Объект.ДоговоренностиКлиента Цикл
		Если НЕ Объект.УсловияКлиента.НайтиСтроки(Новый Структура("Контрагент", ТекСтрока.Контрагент )).Количество()  Тогда
			МассивУдаленныхСтрок.Добавить(ТекСтрока);		
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого ТекСтрока Из МассивУдаленныхСтрок Цикл
		Объект.ДоговоренностиКлиента.Удалить(ТекСтрока);
	КонецЦикла; 
	
КонецПроцедуры


&НаКлиенте
Процедура ДоговоренностиКлиентаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ТекДанные = Элементы.УсловияКлиента.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Предупреждение("Введите строку условий клиента!");
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ДоговоренностиКлиентаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОтменаРедактирования = Ложь;
	ТекДанные = Элементы.УсловияКлиента.ТекущиеДанные;
	ТекДанные2 = Элементы.ДоговоренностиКлиента.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено и Не ТекДанные2 = Неопределено Тогда
		ТекДанные2.Дата = Текданные.Дата;	
		ТекДанные2.Контрагент = Текданные.Контрагент;	
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ДоговоренностиКлиентаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекДанные = Элементы.УсловияКлиента.ТекущиеДанные;
	ТекДанные2 = Элементы.ДоговоренностиКлиента.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекДанные2.Дата) Тогда
		ТекДанные2.Дата = Объект.Дата;
		ТекДанные2.Контрагент = ТекДанные.Контрагент;	
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура УсловияКлиентаПослеУдаления(Элемент)
	ТекДанные = Элементы.УсловияКлиента.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		МассивУдаленныхСтрок = Новый Массив;
		Для каждого ТекСтрока Из Объект.ДоговоренностиКлиента Цикл
			Если НЕ Объект.УсловияКлиента.НайтиСтроки(Новый Структура("Контрагент", ТекСтрока.Контрагент )).Количество()  Тогда
				МассивУдаленныхСтрок.Добавить(ТекСтрока);		
			КонецЕсли;
		КонецЦикла; 
		
		Для каждого ТекСтрока Из МассивУдаленныхСтрок Цикл
			Объект.ДоговоренностиКлиента.Удалить(ТекСтрока);
		КонецЦикла;
	Иначе
		Объект.ДоговоренностиКлиента.Очистить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АвтосохранениеРеквизитовФормыНаКлиенте()
	
	Если НЕ Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.Текстовка = Элементы.Текстовка.ТекстРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	//ПустаяСервернаяПроцедура();
	
	АвтосохранениеРеквизитовФормыНаСервере();		
	
	//Если Не ЗначениеЗаполнено(Объект.Ссылка) и ЭтаФорма.ТекущийЭлемент = Элементы.Комментарий Тогда
	//	Значение = Элементы.Комментарий.ТекстРедактирования;
	//		
	//	ПустаяСервернаяПроцедура();
	//	АвтосохранениеРеквизитовФормыНаСервере();
	
	//	ФормаКостыль = ПолучитьФорму("Документ.Д_СлужебнаяЗаписка.ФормаВыбора", ,ЭтаФорма.ТекущийЭлемент);
	//	ФормаКостыль.ОповеститьОВыборе(Значение);
	//	
	//Иначе 
	//	ПустаяСервернаяПроцедура();
	//	АвтосохранениеРеквизитовФормыНаСервере();		
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура АвтосохранениеРеквизитовФормыНаСервере()
	
	сабОбщегоНазначения.АвтосохранениеРеквизитовФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если НЕ ЗавершениеРаботы И Не РежимВосстановления Тогда
		сабОбщегоНазначения.ОчиститьАвтосохраненияОбъекта(Объект.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Декорация2Нажатие(Элемент)
	ОткрытьФорму("Справочник.сабОтпускаСотрудников.Форма.ФормаHTML", Новый Структура("Тип, Объект, ИмяМакета", "Документы", "Д_СлужебнаяЗаписка", "СправкаПоДоступности") ); 
КонецПроцедуры


&НаКлиенте
Процедура ПодразделениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если СписокВыбора_Подразаделение.Количество() Тогда
		ТекЗначение = ВыбратьИзСписка(СписокВыбора_Подразаделение. Элемент, СписокВыбора_Подразаделение.НайтиПоЗначению(Объект.Подразделение));	
		БюджетныйНаКлиенте.ПриНачалеВыбораРеквизитаВСпискеДубль2(ЭтаФорма, "СписокВыбора_Подразаделение", ТекЗначение, "ВидыДеятельности", Объект.Подразделение, СтандартнаяОбработка, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	сабОбщегоНазначения.ОтобразитьСостояниеДокумента(ЭтаФорма, ТекущийОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	Записать();
	Закрыть();
КонецПроцедуры
