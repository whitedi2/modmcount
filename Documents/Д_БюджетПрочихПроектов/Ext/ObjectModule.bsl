
Процедура ОбработкаПроведения(Отказ, Режим)
	
	//ГруппаДоходы = Справочники.СтатьиДвиженияДенежныхСредств.Доходы;
	//
	//Движения.Бюджетный.Записывать = Истина;
	////Сообщить (Выборка.КоличествоОборотДт);	
	//
	//Для Каждого ТекСтрокаЗатраты Из Затраты Цикл
	//	ЦФО = ?(ПустаяСтрока(ТекСтрокаЗатраты.ЦФО), Предприятие, ТекСтрокаЗатраты.ЦФО);
	//	
	//	СтатьяБДДС = ?(ПустаяСтрока(ТекСтрокаЗатраты.СтатьяБДДС), ТекСтрокаЗатраты.СтатьяЗатрат.СтатьяБДДС, ТекСтрокаЗатраты.СтатьяБДДС);
	//	ТекДеятельность = ?(ПустаяСтрока(ТекСтрокаЗатраты.Деятельность), ТекСтрокаЗатраты.ЦФО.ВидДеятельности, ТекСтрокаЗатраты.Деятельность);

	//	//корректировки в себестоимость
	//	Если ТекСтрокаЗатраты.Признак = Перечисления.Д_ПризнакСписания.Себестоимость Тогда
	//        
	//		Если ТекСтрокаЗатраты.СуммаСеб Тогда
	//			// ДТ 25 КТ 60
	//			Движение = Движения.Бюджетный.Добавить();
	//			Движение.СчетДт = ПланыСчетов.Учетный.Счет25();
	//			Движение.СчетКт = ПланыСчетов.Учетный.Счет6003();
	//			Движение.Период = Дата;
	//			Движение.Предприятия = Предприятие;
	//			Движение.СценарийПлана = Сценарий;
	//			Движение.Сумма = ТекСтрокаЗатраты.СуммаСеб;
	//			Движение.Содержание = ТекСтрокаЗатраты.Основание;
	//			Движение.ПодразделениеДт = ТекСтрокаЗатраты.Деятельность;
	//			Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = ТекСтрокаЗатраты.СтатьяЗатрат;
	//			
	//			// Дт 90.3 Кт 25
	//			Движение = Движения.Бюджетный.Добавить();
	//			Движение.СчетДт = ПланыСчетов.Учетный.Счет9003();
	//			Движение.СчетКт = ПланыСчетов.Учетный.Счет25();
	//			Движение.Период = Дата;
	//			Движение.Предприятия = Предприятие;
	//			Движение.СценарийПлана = Сценарий;
	//			Движение.Сумма = ТекСтрокаЗатраты.СуммаСеб;
	//			Движение.Содержание = ТекСтрокаЗатраты.Основание;
	//			//Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина)] = ТекСтрокаЗатраты.СтатьяЗатрат;
	//			Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = ТекСтрокаЗатраты.СтатьяЗатрат;
	//			Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = ТекСтрокаЗатраты.СтатьяЗатрат;
	//			Движение.ПодразделениеДт = ТекДеятельность;
	//			Движение.ПодразделениеКт = ТекДеятельность;
	//			
	//		КонецЕсли;
	//		
	//	КонецЕсли; 
	//	Если ТекСтрокаЗатраты.Признак = Перечисления.Д_ПризнакСписания.ФинРез Тогда
	//		
	//		//списание на ФР
	//		Движение = Движения.Бюджетный.Добавить();
	//		Движение.СчетДт = ПланыСчетов.Учетный.Счет91();
	//		Движение.СчетКт = ПланыСчетов.Учетный.Счет6004();
	//		Движение.Период = Дата;
	//		Движение.Предприятия = Предприятие;
	//		Движение.СценарийПлана = Сценарий;
	//		Движение.Сумма = ТекСтрокаЗатраты.СуммаСеб;
	//		Движение.Содержание = ТекСтрокаЗатраты.Основание;
	//		Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = ТекСтрокаЗатраты.СтатьяЗатрат;
	//		Движение.ПодразделениеДт = ТекДеятельность;
	//		
	//	КонецЕсли;
	//	
	//	//оплата
	//	Если ТекСтрокаЗатраты.СуммаБДДС Тогда
	//		Движение = Движения.Бюджетный.Добавить();
	//		Если НЕ ПустаяСтрока(СтатьяБДДС) Тогда
	//			ДоходнаяСтатья = СтатьяБДДС.ПринадлежитЭлементу(ГруппаДоходы);
	//		Иначе
	//			ДоходнаяСтатья = 0;			
	//		КонецЕсли;
	//		Если ДоходнаяСтатья Тогда //если статья доходная
	//			Движение.СчетКт = ПланыСчетов.Учетный.Счет6004();
	//			Движение.СчетДт = БюджетныйНаСервере.ПолучитьИсточник(ТекСтрокаЗатраты.Источник);
	//			Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.СтатьиДДС] = СтатьяБДДС;
	//		Иначе
	//			Движение.СчетДт = ПланыСчетов.Учетный.Счет6004();
	//			Движение.СчетКт = БюджетныйНаСервере.ПолучитьИсточник(ТекСтрокаЗатраты.Источник);
	//			Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.СтатьиДДС] = СтатьяБДДС;
	//		КонецЕсли;
	//		Движение.Период = Дата;
	//		Движение.Предприятия = ЦФО;
	//		Движение.СценарийПлана = Сценарий;
	//		Движение.Сумма = ТекСтрокаЗатраты.СуммаБДДС;
	//		Движение.Содержание = ТекСтрокаЗатраты.Основание;
	//	КонецЕсли;	
	//	
	//	
	//КонецЦикла;
	
	
	//{{__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	//}}__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	Для каждого ТекСтрока Из Затраты Цикл
		ТекСтрока.Бюджет = Неопределено;
		ТекСтрока.БизнесПроцесс = Неопределено;	
	КонецЦикла; 
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	//Если ПометкаУдаления Тогда
	//	
	//	Если РасчетыБюджет.ЭтоКорректировочныйБюджет(Сценарий) Тогда
	//		БюджЗатратыКП = ЗатратыКП.Выгрузить().Скопировать();
	//		БюджЗатратыКП.Свернуть("Бюджет");
	//		ТекТЧ = БюджЗатратыКП;
	//	Иначе
	//		БюджЗатраты = Затраты.Выгрузить().Скопировать();
	//		БюджЗатраты.Свернуть("Бюджет");
	//		ТекТЧ = БюджЗатраты;
	//	КонецЕсли;
	//	
	//	НовыеБюджеты = Новый СписокЗначений;
	//	
	//	Для Каждого Строка Из ТекТЧ Цикл
	//		Если ЗначениеЗаполнено(Строка.Бюджет) Тогда
	//			НовыеБюджеты.Добавить(Строка.Бюджет)
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//	ПровестиДокументыБюджета(НовыеБюджеты);
	//	
	//КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	//из подписки на событие
	БюджетныйНаСервере.ДокументыПередЗаписьюПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	БюджетныйНаСервере.ПриУстановкеНовогоНомераПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
КонецПроцедуры
