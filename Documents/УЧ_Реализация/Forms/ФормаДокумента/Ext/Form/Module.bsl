&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	//КонецЕсли;
	
	//++саб
	сабПриЧтенииНаСервере(ТекущийОбъект);
	//--саб
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, Новый Структура("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты") );
	//КонецЕсли;
	
	//++саб
	сабПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	//--саб
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	//КонецЕсли;
	
	//++саб
	сабПриОткрытии(Отказ);
	//--саб
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	
	//	Если МодульУправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
	//		ОбновитьЭлементыДополнительныхРеквизитов();
	//		МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" Тогда
		Если Параметр.Свойство("ФормаВладелецУИД") И Параметр.ФормаВладелецУИД = ЭтаФорма.УникальныйИдентификатор Тогда
			сабОбщегоНазначения.ПрикрепитьФайлКДокументу(Параметр); 
		КонецЕсли
	КонецЕсли;
	
	//++саб
	//сабОбработкаОповещения(ИмяСобытия, Параметр, Источник);
	//--саб
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	//КонецЕсли;
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицирован", Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка));
	
	//++саб
	сабПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи);  
	//--саб 
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	МодульУправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
	//КонецЕсли;
	
КонецПроцедуры


// СтандартныеПодсистемы.КонтактнаяИнформация

// Поддержка дополнительных реквизитов.

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	//КонецЕсли;
	
КонецПроцедуры




// Конец СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура сабПриОткрытии(Отказ)

	//-lud 19/10/22 Вся проверка вынесена в модуль объекта, в процедуру Обработка заполнения
	//Отказ = сабОперОбщегоНазначенияНаКлиенте.ПроверкаСозданияНаОснованииНаКлиенте(Объект);
	//Если Отказ Тогда
	//	Возврат;	
	//КонецЕсли; 

	Если СтрНайти(Объект.Комментарий, "##НеверныйВидОперации") Тогда
		Предупреждение("Невозможно создать поступление от поставщика. Неверный вид операции: <" + Сред(Объект.Комментарий, 22) + ">!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// совместимость
	Если Не ЗначениеЗаполнено(Объект.Счет) Тогда
		СоответствиеСчетаИФлага();
		Прочитать();
	КонецЕсли;
	
	Элементы.РеализацияКоличествоКРХ.ТолькоПросмотр = Истина;
	Элементы.ТратыНаливаКРХ.Доступность = Ложь;
	// видимость даты отгрузки
	Элементы.ДатаОтгрузки.Видимость=Объект.ДатыНеСовпадают;
	Если Объект.Ссылка.Пустая() Тогда
		Объект.ДатаОтгрузки = ТекущаяДата();
	КонецЕсли;
	ДоставкаСуммаПриИзменении(0);
	ВидимостьДоставки();
	СчетПриИзменении(Неопределено);
	ЗаголовокКоличество();
	
	Элементы.ДокументОснование.ТолькоПросмотр = ЗначениеЗаполнено(Объект.ДокументОснование);
	
	//ПроверитьВидСуммыВТЧНаСервере();
	
	Если Объект.Услуги.Количество() > 0 И Объект.Товары.Количество() = 0 Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаУслуги;
	КонецЕсли;	
	
	Элементы.ИсправленныеСФ.Видимость = Объект.ИсправлениеСФ;	
	
	ПриИзмененииВидаОперации(Ложь);
	
	ОрганизацияПриИзменении(Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВидСуммыВТЧНаСервере()
 	объектДанных = РеквизитФормыВЗначение("Объект");
	Для каждого стр Из объектДанных.ПрочиеНачисления Цикл
		Если НЕ ЗначениеЗаполнено(Стр.ВидСуммы) Тогда
			Стр.ВидСуммы = "Сумма на единицу";		
		КонецЕсли;                            	
	КонецЦикла;
	ЗначениеВРеквизитФормы(объектДанных,"Объект");
	                                          
КонецПроцедуры
 

&НаКлиенте
Процедура ЗаголовокКоличество()
	//Если Объект.Реализация.Количество() Тогда		
	//	
	//	Если Счет4341(Объект.Реализация[0].Счет) Тогда
	//		Элементы.РеализацияКоличествоКРХ.Заголовок = "Количество по об.";
	//	ИначеЕсли Объект.Реализация[0].Счет= Счет101() Тогда
	//		Элементы.РеализацияКоличествоКРХ.Заголовок = "Количество КРХ";
	//	Иначе
	//		Элементы.РеализацияКоличествоКРХ.Заголовок = " ";
	//	КонецЕсли;
	//Иначе
	//	Элементы.РеализацияКоличествоКРХ.Заголовок = " ";		
	//КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ВидимостьДоставки()
	Если Объект.Товары.Количество() Тогда
		Если Объект.Товары[0].ВидДоставки = "Жд+авто" Тогда
			Элементы.РеализацияДоставка.Заголовок = "Доставка жд (на ед.)";
			Элементы.РеализацияДоставкаАвто.Видимость = Истина;
			Элементы.РеализацияСуммаДоставкиАвто.Видимость = Истина;
			Элементы.РеализацияСуммаДоставки.Заголовок = "Сумма доставки жд";			
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ВерхиВерхКонтрагентаПриИзменении(Элемент)
	//Если НЕ ТипЗнч(Элементы.ПрочиеНачисления.ТекущиеДанные.ВерхКонтрагента) = Тип("СправочникСсылка.Сотрудники") Тогда
	//	Элементы.ПрочиеНачисления.ТекущиеДанные.Сумма = БюджетныйНаСервере.ВернутьРеквизит(Элементы.ПрочиеНачисления.ТекущиеДанные.Верхконтрагента, "СтавкаВерха"); 
	//КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РассчитатьОстаткиСервер(Наименование, Счет, Склад)
	//запрос на среднюю себестоимость по товарам
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(УчетныйОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
	               |	ЕСТЬNULL(УчетныйОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
	               |	УчетныйОстатки.Субконто1,
	               |	УчетныйОстатки.Счет,
	               |	УчетныйОстатки.Субконто2
	               |ИЗ
	               |	РегистрБухгалтерии.Учетный.Остатки(
	               |			&Дата,
	               |			Счет В ИЕРАРХИИ (&Счет),
	               |			,
	               |			Предприятия В ИЕРАРХИИ (&Предприятия)
	               |				И СценарийПлана = &СценарийПлана
	               |				И Субконто2 = &Склад) КАК УчетныйОстатки";
	
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Учетный.Счет41());//товары
	МассивСчетов.Добавить(ПланыСчетов.Учетный.Счет43());//ГП
	МассивСчетов.Добавить(ПланыСчетов.Учетный.Счет10());//сырье
	МассивСчетов.Добавить(ПланыСчетов.Учетный.Счет01());//ОС
	
	Запрос.УстановитьПараметр("Дата", ?(Объект.Ссылка.Пустая(), ТекущаяДата(), Объект.Дата));
	Запрос.УстановитьПараметр("Предприятия", Объект.Предприятие);
	Запрос.УстановитьПараметр("Счет", МассивСчетов);
	Запрос.УстановитьПараметр("СценарийПлана", Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина));
	Запрос.УстановитьПараметр("Склад", Склад);
	
	РезультатСебест = Запрос.Выполнить();
	
	Выборка = РезультатСебест.Выбрать();
	
	СтруктураПоиска = Новый Структура("Субконто1, Счет", Наименование, Счет);
	
	Если Выборка.НайтиСледующий(СтруктураПоиска) Тогда
		
		Остаток = Выборка.КоличествоОстаток;
		Сумма = Выборка.СуммаОстаток;
		Цена = ?(Выборка.КоличествоОстаток, Выборка.СуммаОстаток / Выборка.КоличествоОстаток, 0);		
	
	КонецЕсли;
	

КонецПроцедуры
 

&НаКлиенте
Процедура РасчитатьОстатки(Команда)
	Если Объект.Товары.Количество() Тогда
		Элементы.Группа8.Заголовок = "Остатки на складе: " + Строка(Элементы.Реализация.ТекущиеДанные.Склад);
		РассчитатьОстаткиСервер(Элементы.Реализация.ТекущиеДанные.Номенклатура, Элементы.Реализация.ТекущиеДанные.Счет, Элементы.Реализация.ТекущиеДанные.Склад);	
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция Счет101()
	Возврат ПланыСчетов.Учетный.Счет1001();
КонецФункции // ()

&НаСервереБезКонтекста
Функция Счет4341(ТекСчет)
	//Возврат ТекСчет = ПланыСчетов.Учетный.Счет43() ИЛИ ТекСчет = ПланыСчетов.Учетный.Счет41();
КонецФункции // ()


&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если Объект.Договор.Пустая() Тогда
		Объект.Договор = БюджетныйНаСервере.ВернутьРеквизит(Объект.Контрагент, "ДоговорПоУмолчанию");
	КонецЕсли;
	
	ДоговорПриИзменении(Неопределено);
	
	СкладЗаполнилсяИзПодразделения = Ложь;
	Если ЗначениеЗаполнено(Объект.ПодразделениеКонтрагента) Тогда
		РеквыОбъекта = БюджетныйНаСервере.ВернутьРеквизиты(Объект.ПодразделениеКонтрагента, "Склад"); 
		Если ЗначениеЗаполнено(РеквыОбъекта.Склад) Тогда
			Объект.Склад = РеквыОбъекта.Склад;
			Для Каждого ТекСтрокаТЧ Из Объект.Товары Цикл
				ТекСтрокаТЧ.Склад = РеквыОбъекта.Склад;
			КонецЦикла;
			СкладЗаполнилсяИзПодразделения = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не СкладЗаполнилсяИзПодразделения Тогда
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			СкладОтгрузкиПоУмолчанию = БюджетныйНаСервере.ВернутьРеквизит(Объект.Контрагент, "СкладОтгрузкиПоУмолчанию");
			Если ЗначениеЗаполнено(СкладОтгрузкиПоУмолчанию) Тогда
				Объект.Склад = СкладОтгрузкиПоУмолчанию;
				Для Каждого ТекСтрокаТовары Из Объект.Товары Цикл
					ТекСтрокаТовары.Склад = СкладОтгрузкиПоУмолчанию;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РеализацияСчетПриИзменении(Элемент)
	//Если Элементы.Реализация.ТекущиеДанные.Счет = Счет101() Тогда
	//	Элементы.РеализацияКоличествоКРХ.ТолькоПросмотр = Ложь;
	//	Элементы.ТратыНаливаКРХ.Доступность = Истина;
	//ИначеЕсли Счет4341(Элементы.Реализация.ТекущиеДанные.Счет) Тогда
	//	Элементы.РеализацияКоличествоКРХ.ТолькоПросмотр = Ложь;
	//	Элементы.ТратыНаливаКРХ.Доступность = Ложь;
	//Иначе
	//	Элементы.РеализацияКоличествоКРХ.ТолькоПросмотр = Истина;
	//	Элементы.ТратыНаливаКРХ.Доступность = Ложь;
	//КонецЕсли;
	//
	//Если НЕ Элементы.Реализация.ТекущиеДанные.Счет = ВернутьИнвСчет() Тогда
	//	Элементы.РеализацияВнеобАктивы.ТолькоПросмотр = Истина;
	//Иначе
	//	Элементы.РеализацияВнеобАктивы.ТолькоПросмотр = Ложь;
	//КонецЕсли;
	
	////Чтобы не зациклилось от ПриАктивизацииСтроки() 
	////Если элемент <> 0 ТОгда
	//	//РассчитатьСуммуОбщВерхи();
	//	//ЭтаФорма.ОбновитьОтображениеДанных();
	////КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДоставкаСуммаПриИзменении(Элемент)
	Если Объект.ДоставкаНаЕдиницу Тогда
		Элементы.РеализацияДоставка.Заголовок = "Доставка (на ед.)";
	Иначе
		Элементы.РеализацияДоставка.Заголовок = "Доставка";
	КонецЕсли;
	//Для каждого ТекСтрока Из Объект.Реализация Цикл
	//	Если Объект.ДоставкаНаЕдиницу Тогда
	//		ТекСтрока.Сумма = ТекСтрока.Количество * (ТекСтрока.Цена + ТекСтрока.Доставка);	
	//	Иначе
	//		ТекСтрока.Сумма = ТекСтрока.Количество * (ТекСтрока.Цена) + ТекСтрока.Доставка;
	//	КонецЕсли;	
	//КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СтатьяВерх()
	Возврат Справочники.СтатьиЗатрат.Верхи;
КонецФункции // ()

&НаКлиенте
Процедура ПодразделениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//БюджетныйНаКлиенте.НачалоВыбораПодразделения(Объект.Счет, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СчетПриИзменении(Элемент)
	
	//БюджетныйНаКлиенте.НазначитьСубконто(Элементы, ЭтаФорма, "Контрагент", "Договор", "ПодразделениеВн", Объект.Счет, , , НЕ Элемент = Неопределено);
	
	//ЭтоВНХ = (Объект.Счет = ПредопределенноеЗначение("ПланСчетов.Учетный.ВНХТоварные"));
	//
	//Элементы.ПодразделениеВн.Видимость = ВидимостьВНХ;
	//Элементы.ПредприятиеПоставщик.Видимость = ВидимостьВНХ;
	//Элементы.ДоговорВн.Видимость = ВидимостьВНХ;
	
	ДанныеСчета = УправленческийУчетПовтИсп.ПолучитьСвойстваСчета(Объект.Счет, Объект.Предприятие);
	
	
	Наименование1 = ДанныеСчета["ВидСубконто1Наименование"];
	Наименование2 = ДанныеСчета["ВидСубконто2Наименование"];
	Наименование3 = ДанныеСчета["ВидСубконто3Наименование"];
	
	Элементы.Контрагент.Заголовок = Наименование1;
	Элементы.Договор.Заголовок = Наименование2;
	//Элементы.КорСубконто3.Заголовок = Наименование3;
	
	Если Наименование1 = "" Тогда
		Элементы.Контрагент.Доступность = Ложь;
	Иначе
		Элементы.Контрагент.Доступность = Истина;
	КонецЕсли;
	
	Если Наименование2 = "" Тогда
		Элементы.Договор.Доступность = Ложь;
	Иначе
		Элементы.Договор.Доступность = Истина;
	КонецЕсли;
	
	//Если Наименование3 = "" Тогда
	//	Элементы.Субконто3.Доступность = Ложь;
	//Иначе
	//	Элементы.Субконто3.Доступность = Истина;
	//КонецЕсли;

	
КонецПроцедуры

&НаСервере
Функция ПолучитьСубконто(НомерСубконто)
	
	Если Объект.Счет = Неопределено ИЛИ НомерСубконто > Объект.Счет.ВидыСубконто.Количество() Тогда
		Возврат "";
	Иначе
		Возврат Объект.Счет.ВидыСубконто[НомерСубконто - 1].ВидСубконто.Наименование;			
	КонецЕсли;
		
КонецФункции // ()

&НаКлиенте
Процедура ВерхиДоговорМенеджераНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если НЕ ТипЗнч(Элементы.ПрочиеНачисления.ТекущиеДанные.ВерхКонтрагента) = Тип("СправочникСсылка.Сотрудники") Тогда
		СтандартнаяОбработка = Ложь;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура РеализацияКоличествоПриИзменении(Элемент)
	
	ТекДанные = Элементы.Реализация.ТекущиеДанные;
	Если Не ТекДанные = Неопределено Тогда
		
		Если Элементы.Реализация.ТекущиеДанные.Доставка Тогда
			Элементы.Реализация.ТекущиеДанные.СуммаДоставки = Элементы.Реализация.ТекущиеДанные.Количество * Элементы.Реализация.ТекущиеДанные.Доставка;	
		КонецЕсли;
		
		сабОбщегоНазначенияБУХКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Реализация");
		Если Элементы.Реализация.ТекущиеДанные.Цена Тогда
			Элементы.Реализация.ТекущиеДанные.СуммаОтгрузки = Элементы.Реализация.ТекущиеДанные.Количество * Элементы.Реализация.ТекущиеДанные.Цена;	
		КонецЕсли;
		
		
		Если РежимСканирования Тогда
			ПодобратьНоменклатуруПоШК(Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура РеализацияЦенаПриИзменении(Элемент)
	сабОбщегоНазначенияБУХКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Реализация");
	Элементы.Реализация.ТекущиеДанные.СуммаОтгрузки = Элементы.Реализация.ТекущиеДанные.Сумма;
КонецПроцедуры

&НаКлиенте
Процедура РеализацияДоставкаПриИзменении(Элемент)
	Если Элементы.Реализация.ТекущиеДанные.Доставка Тогда
		Элементы.Реализация.ТекущиеДанные.СуммаДоставки = Элементы.Реализация.ТекущиеДанные.Количество * Элементы.Реализация.ТекущиеДанные.Доставка;
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура РеализацияСуммаПриИзменении(Элемент) //Сумма отгрузки
	//ТекКоличество = Элементы.Реализация.ТекущиеДанные.Количество;
	//Элементы.Реализация.ТекущиеДанные.Цена = ?(ТекКоличество, Элементы.Реализация.ТекущиеДанные.СуммаОтгрузки / ТекКоличество, 0);
	
	Если Объект.СуммаВключаетНДС Тогда
		Элементы.Реализация.ТекущиеДанные.Сумма = Элементы.Реализация.ТекущиеДанные.СуммаОтгрузки;
		сабОбщегоНазначенияБУХКлиентСервер.ПриИзмененииСумма(ЭтаФорма, "Реализация");
	Иначе
		ТекущиеДанные = Элементы.Реализация.ТекущиеДанные;
		ТекущиеДанные.Сумма = ТекущиеДанные.СуммаОтгрузки * 100 / (100 + БюджетныйНаСервере.ВернутьРеквизит(ТекущиеДанные.СтавкаНДС, "Ставка"));
		сабОбщегоНазначенияБУХКлиентСервер.ПриИзмененииСумма(ЭтаФорма, "Реализация");
	КонецЕсли;
	
	Объект.СуммаНаличногоРасчета = Объект.Товары.Итог("СуммаОтгрузки") - Объект.ОплатаПлатежнымиКартами.Итог("Сумма");
	
КонецПроцедуры

&НаКлиенте
Процедура РеализацияСуммаДоставкиПриИзменении(Элемент)
	ТекКоличество = Элементы.Реализация.ТекущиеДанные.Количество;
	Элементы.Реализация.ТекущиеДанные.Доставка = ?(ТекКоличество, Элементы.Реализация.ТекущиеДанные.СуммаДоставки / ТекКоличество, 0);
КонецПроцедуры

&НаКлиенте
Процедура РеализацияПриАктивизацииСтроки(Элемент)
	Если НЕ Элементы.Реализация.ТекущиеДанные = Неопределено Тогда
		РеализацияСчетПриИзменении(0); 
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьИнвСчет()
	Возврат ПланыСчетов.Учетный.ТМЦИнв;
КонецФункции // ()

&НаКлиенте
Процедура РеализацияДоставкаАвтоПриИзменении(Элемент)
	Если Элементы.Реализация.ТекущиеДанные.ДоставкаАвто Тогда
		Элементы.Реализация.ТекущиеДанные.СуммаДоставкиАвто = Элементы.Реализация.ТекущиеДанные.Количество * Элементы.Реализация.ТекущиеДанные.ДоставкаАвто;
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура РеализацияВидДоставкиПриИзменении(Элемент)
	Если Элементы.Реализация.ТекущиеДанные.ВидДоставки = "Жд+авто" Тогда
		Элементы.РеализацияДоставка.Заголовок = "Доставка жд (на ед.)";
		Элементы.РеализацияДоставкаАвто.Видимость = Истина;
		Элементы.РеализацияСуммаДоставкиАвто.Видимость = Истина;
		Элементы.РеализацияСуммаДоставки.Заголовок = "Сумма доставки жд";
	Иначе
		Элементы.РеализацияДоставка.Заголовок = "Доставка (на ед.)";
		Элементы.РеализацияДоставкаАвто.Видимость = Ложь;
		Элементы.РеализацияСуммаДоставкиАвто.Видимость = Ложь;
		Элементы.Реализация.ТекущиеДанные.ДоставкаАвто = 0;
		Элементы.Реализация.ТекущиеДанные.СуммаДоставкиАвто = 0;
		Элементы.РеализацияСуммаДоставки.Заголовок = "Сумма доставки";		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РеализацияСуммаДоставкиАвтоПриИзменении(Элемент)
	ТекКоличество = Элементы.Реализация.ТекущиеДанные.Количество;
	Элементы.Реализация.ТекущиеДанные.ДоставкаАвто = ?(ТекКоличество, Элементы.Реализация.ТекущиеДанные.СуммаДоставкиАвто / ТекКоличество, 0);
КонецПроцедуры

&НаКлиенте
Процедура РеализацияСчетОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	//Если Счет4341(ВыбранноеЗначение) Тогда
	//	Элементы.РеализацияКоличествоКРХ.Заголовок = "Количество по об.";
	//ИначеЕсли ВыбранноеЗначение= Счет101() Тогда
	//	Элементы.РеализацияКоличествоКРХ.Заголовок = "Количество КРХ";
	//Иначе
	//	Элементы.РеализацияКоличествоКРХ.Заголовок = " ";
	//КонецЕсли;
	//Элементы.Реализация.ТекущиеДанные.Счет = ВыбранноеЗначение;
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеПриИзменении(Элемент)
	ПредприятиеПриИзмененииНаСервере();
	ПараметрыВыбораСтатьи = УЧ_Сервер.ПолучитьПараметрыВыбораСтатьиЗатрат(Объект.Предприятие, Элементы.ВерхиСубконто3.ПараметрыВыбора);
	Элементы.ВерхиСубконто3.ПараметрыВыбора = ПараметрыВыбораСтатьи;
	//Элементы.УчитыватьНДС.Видимость = Строка(БюджетныйНаСервере.ВернутьРеквизит(Объект.Предприятие, "НаправлениеДеятельности")) = "Водочное";
	//Элементы.СуммаВключаетНДС.Видимость = Объект.УчитыватьНДС;
КонецПроцедуры

&НаСервере
Процедура ПредприятиеПриИзмененииНаСервере()
	сабОбщегоНазначенияКлиентСервер.СкрытьПодразделения(ЭтаФорма);
	Объект.УчитыватьНДС = МАКС(Объект.Предприятие.УчетнаяПолитика.УчетНДС, Объект.УчитыватьНДС);
	Если Не Объект.УчитыватьНДС Тогда
		Объект.СуммаВключаетНДС = Истина;	
	КонецЕсли;
КонецПроцедуры


//&НаСервере
//Процедура РассчитатьСуммуОбщВерхи()
//	ДанныеОбъекта =РеквизитФормыВЗначение("Объект");
//	КоличествоСпирта = 0;
//	Для каждого СтрРеализации Из ДанныеОбъекта.Реализация Цикл
//		Если Счет4341(СтрРеализации.Счет) Тогда
//			КоличествоСпирта = КоличествоСпирта + СтрРеализации.Количество;	
//		КонецЕсли;	
//	КонецЦикла; 
//	Для каждого СтрВерхи Из ДанныеОбъекта.Верхи Цикл
//		СтрВерхи.СуммаОбщ = СтрВерхи.Сумма*КоличествоСпирта	
//	КонецЦикла; 
//	ЗначениеВРеквизитФормы(ДанныеОбъекта,"Объект");
//КонецПроцедуры

&НаКлиенте
Процедура ВерхиСуммаПриИзменении(Элемент)
	//РассчитатьСуммуОбщВерхи();
КонецПроцедуры

&НаКлиенте
Процедура ВидСуммыПриИзменении(Элемент)
	Если Объект.ВидСуммы = "Сумма на единицу" Тогда
		Элементы.ВерхиСумма.Заголовок = "Сумма на ед."
	Иначе
		Элементы.ВерхиСумма.Заголовок = "Сумма общ.";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура сабПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	БюджетныйНаСервере.ДействияПриСозданииФормыДокумента(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если (НЕ ТипЗнч(Объект.ДокОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю")) Тогда
			Объект.СуммаВключаетНДС = Истина;
			//Объект.УчитыватьНДС		= Ложь;
			//Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализация.Товары");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.Счет) Тогда
			Объект.Счет = ПланыСчетов.Учетный.Счет6201();
		КонецЕсли;	
		ПодразделениеПриИзмененииНаСервере();
	КонецЕсли;	
	//Элементы.УчитыватьНДС.Видимость = (Объект.Предприятие.НаправлениеДеятельности.Наименование = "Водочное");
	//Элементы.СуммаВключаетНДС.Видимость = Объект.УчитыватьНДС;
	
	ЗаполнитьСчетаПокупателя();
	
	//временно, позже изменить тип реквизита
	Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	Элементы.Договор.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов");
	
	Если ЗначениеЗаполнено(Объект.ДокОснование) И (ТипЗнч(Объект.ДокОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Или ТипЗнч(Объект.ДокОснование) = Тип("ДокументСсылка.ЗаказКлиента")) Тогда
		Элементы.РеализацияЗаполнитьИзЗаказа.Видимость = Истина;
		Элементы.РеализацияКоличествоВЗаказе.Видимость = Истина;
		РассчитатьКолонкуКоличествоИзЗаказа();
	КонецЕсли;
	
	ЗаполнитьАртикул();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьДобавленныеКолонкиТаблиц();
	КонецЕсли;	
	
	УстановитьЗаголовкиСубконто();
	
	Объект.УчитыватьНДС = МАКС(Объект.Предприятие.УчетнаяПолитика.УчетНДС, Объект.УчитыватьНДС);
	Если Не Объект.УчитыватьНДС Тогда
		Объект.СуммаВключаетНДС = Истина;	
	КонецЕсли;
	
	ИспользоватьСерии = Справочники.СерииНоменклатуры.СерииНоменклатурыИспользуются();
	
	//синхронизация серий
	Если сабОбщегоНазначенияПовтИсп.ПолучитьСерийныйУчет() Тогда
		сабОперОбщегоНазначения.СинхронизацияСерийПриСозданииФормы(Объект.Товары,Объект.СерииНоменклатуры);
	КонецЕсли;
	
	АльтернативнаяФорма = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("АльтернативнаяФормаЗаказов");
	
	ИспользованиеГТД = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("ИспользованиеГТД");
	
	//Ограничение списка команд печати
	ОграничитьСписокКомандПечатиВРеализации = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ОграничитьСписокКомандПечатиВРеализации", Истина).Значение;
	Если НЕ ОграничитьСписокКомандПечатиВРеализации = Неопределено И ОграничитьСписокКомандПечатиВРеализации Тогда
		сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "ФормаДокументУЧ_РеализацияПечатьТОРГ12", "Видимость", Ложь);
		сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "ФормаДокументУЧ_РеализацияПечатьСчетФактура", "Видимость", Ложь);
		сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "ФормаДокументУЧ_РеализацияПечатьУПД", "Видимость", Ложь);
		сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "ФормаДокументУЧ_РеализацияПечатьТН", "Видимость", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиСубконто()
	
	Счет90 = ПланыСчетов.Учетный.Счет9001();
	
	ДанныеСчета = УправленческийУчетПовтИсп.ПолучитьСвойстваСчета(Счет90, Объект.Предприятие);
	
	Наименование1 = ДанныеСчета["ВидСубконто1Наименование"];
	Наименование2 = ДанныеСчета["ВидСубконто2Наименование"];
	Наименование3 = ДанныеСчета["ВидСубконто3Наименование"];
	УчетПоПодразделениям = ДанныеСчета["УчетПоПодразделениям"];
	
	Элементы.УслугиСубконто1.Заголовок = Наименование1;
	Элементы.УслугиСубконто2.Заголовок = Наименование2;
	Элементы.УслугиСубконто3.Заголовок = Наименование3;
	Элементы.УслугиПодразделение.ПодсказкаВвода = ?(УчетПоПодразделениям, "Подразделение затрат", "");
	
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьАртикул()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.Код КАК Код,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&СписокНоменклатур)";
	Запрос.УстановитьПараметр("СписокНоменклатур", Объект.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	
	ТаблицаАртикулов =  Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		НайденныеСтроки = ТаблицаАртикулов.НайтиСтроки(Новый Структура("Ссылка", СтрокаТЧ.Номенклатура));
		Для Каждого СтрокаСАртикулом Из НайденныеСтроки Цикл
			СтрокаТЧ.Артикул = СтрокаСАртикулом.Код;
			СтрокаТЧ.ЕдиницаИзмерения = СтрокаСАртикулом.ЕдиницаИзмерения;
		КонецЦикла;
		
		НайденныеСерии = Объект.СерииНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура, НомерСтрокиРеализации", СтрокаТЧ.Номенклатура, СтрокаТЧ.НомерСтроки));
		Если НайденныеСерии.Количество() > 1 Тогда
			СтрокаТЧ.НесколькоСерий = Истина;
			СтрокаТЧ.СерияНоменклатуры = Неопределено;
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Процедура РассчитатьКолонкуКоличествоИзЗаказа()

	ТаблицаЗаказа = Объект.ДокОснование.ТабличнаяЧасть.Выгрузить();
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		СтрокиЗаказа = ТаблицаЗаказа.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТЧ.Номенклатура));
		Если СтрокиЗаказа.Количество() > 0 Тогда
			СтрокаТЧ.КоличествоВЗаказе = СтрокиЗаказа[0].Количество;	
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСчетаПокупателя()
		
	МассивСчетовРеализация = Новый Массив;
	МассивСчетовРеализация.Добавить(ПланыСчетов.Учетный.Счет62());
	МассивСчетовРеализация.Добавить(ПланыСчетов.Учетный.Счет7901());
	МассивСчетовРеализация.Добавить(ПланыСчетов.Учетный.Счет7902());
	
	МассивГруппСчетовРеализация = Новый Массив;
	МассивГруппСчетовРеализация.Добавить(ПланыСчетов.Учетный.Счет62());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Учетный.Ссылка
	|ИЗ
	|	ПланСчетов.Учетный КАК Учетный
	|ГДЕ
	|	Учетный.Ссылка В ИЕРАРХИИ (&СписокСчетов) И НЕ Учетный.Ссылка В (&СписокГруппСчетов)";
	
	Запрос.УстановитьПараметр("СписокСчетов", МассивСчетовРеализация);
	Запрос.УстановитьПараметр("СписокГруппСчетов", МассивГруппСчетовРеализация);
	КоректныйМассивСчетов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Элементы.Счет.СписокВыбора.ЗагрузитьЗначения(КоректныйМассивСчетов);
	Для каждого ТекСчет Из Элементы.Счет.СписокВыбора Цикл
		Попытка
			ТекСчет.Представление = Строка(ТекСчет.Значение) + " " + ТекСчет.Значение.Номенклатура;	
		Исключение
		КонецПопытки;
	КонецЦикла; 
	
КонецФункции


&НаКлиенте
Процедура ВерхиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.ВидСуммы) Тогда
		Элемент.ТекущиеДанные.ВидСуммы = "Сумма на единицу";
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ВерхиВидСуммыПриИзменении(Элемент)
 
КонецПроцедуры

&НаКлиенте
Процедура РеализацияКорСубконто1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	БюджетныйНаКлиенте.НачалоВыбораСубконто(
	Элементы.Реализация.ТекущиеДанные.КорСчет,
	Элементы.Реализация.ТекущиеДанные.КорСубконто1,
	1,
	Элемент,
	СтандартнаяОбработка,
	);
КонецПроцедуры

&НаКлиенте
Процедура РеализацияКорСубконто2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	БюджетныйНаКлиенте.НачалоВыбораСубконто(
	Элементы.Реализация.ТекущиеДанные.КорСчет,
	Элементы.Реализация.ТекущиеДанные.КорСубконто2,
	2,
	Элемент,
	СтандартнаяОбработка,
	);
	
КонецПроцедуры

&НаКлиенте
Процедура РеализацияВерхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СчетВерха = ПолучитьСчетВерха();
	
	БюджетныйНаКлиенте.НачалоВыбораСубконто(СчетВерха, Элементы.Реализация.ТекущиеДанные.Верх,
	1,
	Элемент,
	СтандартнаяОбработка,
	);
	
КонецПроцедуры

&НасервереБезКонтекста
Функция ПолучитьСчетВерха()
	Счет = ПланыСчетов.Учетный.Счет7601();
	Возврат Счет
КонецФункции

&НаКлиенте
Процедура РеализацияВерхПриИзменении(Элемент)
	//
	//СуммаВерха = РассчитатьСуммуВерха(Элементы.Реализация.ТекущиеДанные.Верх, Элементы.Реализация.ТекущиеДанные.Количество, Элементы.Реализация.ТекущиеДанные.Цена);
	//Элементы.Реализация.ТекущиеДанные.СуммаВерха = СуммаВерха;
	
КонецПроцедуры

&НаСервере
Функция РассчитатьСуммуВерха(Верх, Количество, Цена)
	
	
	Если Верх.ПризнакВерха = "Процент" Тогда
		СуммаВерха = Количество*Цена*(Верх.СтавкаВерха/100);
	Иначе
		СуммаВерха = Количество*Верх.СтавкаВерха;
	КонецЕсли;
	
	Возврат СуммаВерха;
	
КонецФункции

&НаКлиенте
Процедура ДатыНеСовпадаютПриИзменении(Элемент)	
		
	Если Объект.ДатыНеСовпадают Тогда
		Элементы.ДатаОтгрузки.Видимость=Истина
	Иначе
		Элементы.ДатаОтгрузки.Видимость=Ложь
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	Объект.Курс = "";
	
	Если Объект.ДатыНеСовпадают Тогда
		ДатаКурса = Объект.ДатаОтгрузки
	иначе
		ДатаКурса = Объект.Дата
	КонецЕсли;
	
	ВалютаПроекта = БюджетныйНаСервере.ВернутьРеквизит(Объект.Предприятие, "ОсновнаяВалютаУчета");	
	Объект.Курс = УЧ_Сервер.ПолучитьКурсВалют(Объект.Валюта, ВалютаПроекта, ДатаКурса, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСчетаСубконтоКонтрагентДоговор()
	
	Счета62 = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Учетный.Ссылка
	               |ИЗ
	               |	ПланСчетов.Учетный КАК Учетный
	               |ГДЕ
	               |	Учетный.Родитель = &Счета";
	
	Запрос.УстановитьПараметр("Счета", ПланыСчетов.Учетный.Счет62());
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Счета62.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Счета62.Добавить(ПланыСчетов.Учетный.Счет7601());
	
	Возврат Счета62;
	
КонецФункции

&НаСервере
Процедура СоответствиеСчетаИФлага()
	
	//ТекущийДокумент = Объект.Ссылка.ПолучитьОбъект();
	//
	//Если Объект.Флаг60_79 = 0 Тогда
	//	ТекущийДокумент.Счет = ПланыСчетов.Учетный.Счет6201()
	//ИначеЕсли Объект.Флаг60_79 = 1 Тогда
	//	ТекущийДокумент.Счет = ПланыСчетов.Учетный.Счет7902()
	//ИначеЕсли Объект.Флаг60_79 = 2 Тогда
	//	ТекущийДокумент.Счет = ПланыСчетов.Учетный.УсловеноВнутренниеВзаиморасчеты
	//КонецЕсли;	
	//
	//ТекущийДокумент.Записать(РежимЗаписиДокумента.Запись);
	
КонецПроцедуры

&НаКлиенте
Процедура РеализацияСумма1ПриИзменении(Элемент)
	сабОбщегоНазначенияБУХКлиентСервер.ПриИзмененииСумма(ЭтаФорма, "Реализация");
КонецПроцедуры

&НаКлиенте
Процедура РеализацияСтавкаНДСПриИзменении(Элемент)
	сабОбщегоНазначенияБУХКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "Реализация");
КонецПроцедуры

&НаКлиенте
Процедура РеализацияСуммаНДСПриИзменении(Элемент)
	сабОбщегоНазначенияБУХКлиентСервер.ПриИзмененииСуммаНДС(ЭтаФорма, "Реализация");
КонецПроцедуры

&НаКлиенте
Процедура СуммаВключаетНДСПриИзменении(Элемент)
	
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		сабОбщегоНазначенияБУХКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Реализация");
		//СтрокаТаблицы.СуммаОтгрузки = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл
		сабОбщегоНазначенияБУХКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Услуги");
		//СтрокаТаблицы.СуммаОтгрузки = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьНДСПриИзменении(Элемент)
	
	//Элементы.СуммаВключаетНДС.Видимость = Объект.УчитыватьНДС;

	//Для Каждого СтрокаТаблицы Из Объект.Реализация Цикл
	//	СтрокаТаблицы.СуммаНДС = 0;
	//	СтрокаТаблицы.СтавкаНДС = ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка");
	//	сабОбщегоНазначенияБУХКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Реализация");
	//	//СтрокаТаблицы.СуммаОтгрузки = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	//КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура сабПриЧтенииНаСервере(ТекущийОбъект)
	сабОбщегоНазначения.ОтобразитьСостояниеДокумента(ЭтаФорма);
	ЗаполнитьДобавленныеКолонкиТаблиц();
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	сабОбщегоНазначения.ОтобразитьСостояниеДокумента(ЭтаФорма, ТекущийОбъект);
	
	//Синхронизация серий с документом БУ для отоброжения изменений в сборе
	//Если сабОбщегоНазначенияПовтИсп.ПолучитьСерийныйУчет() Тогда
	//	Если ПараметрыЗаписи.Свойство("СинхронизироватьСерииНоменклатурыСДокументомБух") Тогда
	//		Если Не Отказ И ПараметрыЗаписи.СинхронизироватьСерииНоменклатурыСДокументомБух	Тогда
	//			УстановитьПривилегированныйРежим(Истина);
	//			ДокументБУОбъект = ЭтотОбъект.ДокументБУ.ПолучитьОбъект();  
	//			ДокументБУОбъект.ДополнительныеСвойства.Вставить("НеДобавлятьЗаписьВРегистрИзмененных",Истина);
	//			ДокументБУОбъект.СерииНоменклатуры.Загрузить(ТекущийОбъект.СерииНоменклатуры.Выгрузить());
	//			Попытка
	//				ДокументБУОбъект.Записать();
	//			Исключение
	//				Сообщить("Табличная часть ""Серии номенклатуры"" не была синхронизирована с документом " + ЭтотОбъект.ДокументБУ + ". По причине: " +
	//				ОписаниеОшибки());
	//			КонецПопытки;
	//			УстановитьПривилегированныйРежим(Ложь);
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	
	//Синхронизация серий
	Если сабОбщегоНазначенияПовтИсп.ПолучитьСерийныйУчет() Тогда 
		ДокументСоздан = Истина;
		ТекстОшибки = "";
		сабОперОбщегоНазначения.СинхронизацияСерийПриЗаписиНаСервереФормы(ПараметрыЗаписи,ЭтотОбъект,ТекущийОбъект,Отказ,ДокументСоздан,ТекстОшибки);
		Если Не ДокументСоздан Тогда
			Сообщить("Табличная часть ""Серии номенклатуры"" не была синхронизирована с документом " + ЭтотОбъект.ДокументБУ + ". По причине: " + ТекстОшибки);
        КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСумму()
	
	Элементы.Услуги.ТекущиеДанные.Сумма = Элементы.Услуги.ТекущиеДанные.Количество * Элементы.Услуги.ТекущиеДанные.Цена;	
	
КонецПроцедуры	

&НаКлиенте
Процедура УслугиПроцентВлажностиПриИзменении(Элемент)
	
	РассчитатьСумму();	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсправлениеСФПриИзменении(Элемент)
	
	Элементы.ИсправленныеСФ.Видимость = Объект.ИсправлениеСФ;	
	
КонецПроцедуры


&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ПодразделениеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПодразделениеПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		РеквизитыПодразделения = БюджетныйНаСервере.ВернутьРеквизиты(Объект.Подразделение, "Склад, Организация");
		Если ЗначениеЗаполнено(РеквизитыПодразделения.Склад) Тогда
			Объект.Склад = РеквизитыПодразделения.Склад;
		КонецЕсли;
		Если ЗначениеЗаполнено(РеквизитыПодразделения.Организация) Тогда
			Объект.Организация = РеквизитыПодразделения.Организация;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	
	
#Область ПоискПоШК

&НаКлиенте
Процедура ПодобратьНоменклатуруПоШК(Команда)
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	РежимСканирования = Ложь;
	
	ИмяТЧ = "Реализация";
	ИмяРеквизитаНоменклатуры = "Номенклатура";
	ИмяРеквизитаКоличества = "Количество";
	сабОперОбщегоНазначенияНаКлиенте.ОбработатьЗаполнениеПоШтрихкодуНаКлиенте(ЭтаФорма, ИмяТЧ, ИмяРеквизитаНоменклатуры, ИмяРеквизитаКоличества, Штрихкод);
	РеализацияНаименованиеПриИзменении(Неопределено);
	
	Элементы[ИмяТЧ].ТекущийЭлемент = Элементы.РеализацияКоличество;
	
	
	Если ЗначениеЗаполнено(Штрихкод) Тогда
		Если Элементы[ИмяТЧ].ТекущиеДанные[ИмяРеквизитаКоличества] Тогда //режим непрерывного сканирования
			Если ЗначениеЗаполнено(Элементы[ИмяТЧ].ТекущиеДанные.Цена) Тогда
				ПодобратьНоменклатуруПоШК(Неопределено);
			Иначе	
				Элементы[ИмяТЧ].ТекущийЭлемент = Элементы.РеализацияЦена;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Элементы[ИмяТЧ].ТекущиеДанные.Цена) Тогда
			РежимСканирования = Истина;	
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура РеализацияНаименованиеПриИзменении(Элемент)
	
	ТекДанные = Элементы.Реализация.ТекущиеДанные;
	Если Не ТекДанные = Неопределено Тогда
		УстановитьЗависимыеДанныеВТЧ(ТекДанные);
	КонецЕсли;	
		
	РеализацияКоличествоПриИзменении(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗависимыеДанныеВТЧ(ТекДанные)
	
	Если Объект.Счет = УЧ_Сервер.СчетПоКоду("79.02") Тогда
		ЦенаКЗаполнению = РассчитатьЦенуВНХ(ТекДанные.Номенклатура, Объект.ПредприятиеПоставщик, Объект.ПодразделениеВн, Объект.Предприятие, Объект.Подразделение, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()));
		//ЦенаКЗаполнению = сабОперОбщегоНазначения.РассчитатьЦенуВНХ(ТекДанные.Наименование, Объект.Предприятие, Объект.Подразделение, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()));
		//Если ЦенаКЗаполнению <> 0 Тогда
			ТекДанные.Цена = ЦенаКЗаполнению;
		//КонецЕсли;
	Иначе
		ЦенаКЗаполнению = РассчитатьЦену(ТекДанные.Номенклатура, Объект.Контрагент, Объект.Предприятие, Объект.Подразделение, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()), Объект.Договор);
		//Если ЦенаКЗаполнению <> 0 Тогда
			ТекДанные.Цена = ЦенаКЗаполнению;
		//КонецЕсли;
	КонецЕсли;	
	
	//Установим НДС и артикул
	Если ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
		ТекРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.Номенклатура, "СтавкаНДС, Код, Счет10, ЕдиницаИзмерения, ВидСтавкиНДС, СтранаПроисхождения", Ложь);
		ЗаполнитьЗначенияСвойств(ТекДанные, ТекРеквизиты); 
		ТекРеквизиты.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвВидовСтавокНДСБУХУУ().Получить(ТекРеквизиты.ВидСтавкиНДС);
		ТекДанные.СтавкаНДС = ТекРеквизиты.СтавкаНДС;
		ТекДанные.Артикул = ТекРеквизиты.Код;
		ТекДанные.ЕдиницаИзмерения = ТекРеквизиты.ЕдиницаИзмерения;
		ТекДанные.Счет = сабОбщегоНазначения.ПолучитьСчетУчетаНоменклатуры(ТекДанные.Номенклатура, Объект.Организация, Объект.Склад);
	КонецЕсли;
	
КонецПроцедуры	

#КонецОбласти

#Область Услуги

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)

	сабОбщегоНазначенияБУХКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	
	сабОбщегоНазначенияБУХКлиентСервер.ПриИзмененииСумма(ЭтаФорма, "Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)
	
	сабОбщегоНазначенияБУХКлиентСервер.ПриИзмененииСуммаНДС(ЭтаФорма, "Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаОтгрузкиПриИзменении(Элемент)
	
	Если Объект.СуммаВключаетНДС Тогда
		Элементы.Услуги.ТекущиеДанные.Сумма = Элементы.Услуги.ТекущиеДанные.СуммаОтгрузки;
		сабОбщегоНазначенияБУХКлиентСервер.ПриИзмененииСумма(ЭтаФорма, "Услуги");
	Иначе
		ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
		ТекущиеДанные.Сумма = ТекущиеДанные.СуммаОтгрузки * 100 / (100 + БюджетныйНаСервере.ВернутьРеквизит(ТекущиеДанные.СтавкаНДС, "Ставка"));
		сабОбщегоНазначенияБУХКлиентСервер.ПриИзмененииСумма(ЭтаФорма, "Услуги");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	сабОбщегоНазначенияБУХКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Услуги");
	
	Если Элементы.Услуги.ТекущиеДанные.Цена Тогда
		Элементы.Услуги.ТекущиеДанные.СуммаОтгрузки = Элементы.Услуги.ТекущиеДанные.Количество * Элементы.Услуги.ТекущиеДанные.Цена;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	сабОбщегоНазначенияБУХКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Услуги");
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ПриИзмененииВидаОперации(Не Элемент = Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииВидаОперации(Изменять)
	
	//Элементы.РеализацияАбсолютнаяСкидка.Видимость = Ложь;
	ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	
	Элементы.ГруппаОплатаПлатежнымиКартами.Видимость = Ложь;
	Элементы.ОплатаПлатежнымиКартамиИтогСумма.Видимость = Ложь;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализация.ОсновныеСредства") Тогда
		Элементы.РеализацияНаименование.Заголовок = "Основное ср-во";
		ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства");
		Элементы.ГруппаУслуги.Видимость = Ложь;
		Элементы.РеализацияАртикул.Видимость = Ложь;
		Элементы.Группа9.Видимость = Истина;
		Элементы.ГруппаТовары.Видимость = Истина;
		Элементы.Группа34.Видимость = Ложь;
		Элементы.Группа35.Видимость = Ложь;
		Если Изменять Тогда
			Объект.Услуги.Очистить();	
		КонецЕсли;
		Элементы.Группа5.Видимость = Истина;
		Элементы.Группа30.Видимость = Истина;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализация.ZОтчет") Тогда
		Элементы.РеализацияАбсолютнаяСкидка.Видимость = Истина;
		Элементы.РеализацияАртикул.Видимость = Истина;
		Элементы.Группа9.Видимость = Истина;
		Элементы.ГруппаТовары.Видимость = Истина;
		Элементы.ГруппаУслуги.Видимость = Истина;
		Элементы.Группа34.Видимость = Истина;
		Элементы.ГруппаОплатаПлатежнымиКартами.Видимость = Истина;
		Элементы.ОплатаПлатежнымиКартамиИтогСумма.Видимость = Истина;
		Элементы.Группа35.Видимость = Истина;
		Если Изменять Тогда
			Объект.Услуги.Очистить();	
		КонецЕсли;
		Элементы.Группа5.Видимость = Ложь;
		Элементы.Группа30.Видимость = Ложь;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализация.Услуги") Тогда
		Элементы.ГруппаУслуги.Видимость = Истина;
		Элементы.ГруппаТовары.Видимость = Ложь;
		Элементы.Группа9.Видимость = Ложь;
		Элементы.Группа34.Видимость = Ложь;
		Элементы.Группа35.Видимость = Ложь;
		Если Изменять Тогда
			Объект.Товары.Очистить();	
		КонецЕсли;
		Элементы.Группа5.Видимость = Истина;
		Элементы.Группа30.Видимость = Истина;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализация.ТоварыИУслуги") Тогда
		Элементы.ГруппаУслуги.Видимость = Истина;
		Элементы.ГруппаТовары.Видимость = Истина;
		Элементы.РеализацияАртикул.Видимость = Ложь;
		Элементы.Группа9.Видимость = Истина;
		Элементы.Группа34.Видимость = Ложь;
		Элементы.Группа5.Видимость = Истина;
		Элементы.Группа30.Видимость = Истина;
		Элементы.Группа35.Видимость = Ложь;
	Иначе //товары
		Элементы.РеализацияНаименование.Заголовок = "Номенклатура";
		Элементы.РеализацияАртикул.Видимость = Ложь;
		Элементы.ГруппаТовары.Видимость = Истина;
		Элементы.ГруппаУслуги.Видимость = Ложь;
		Элементы.Группа9.Видимость = Истина;
		Элементы.Группа34.Видимость = Ложь;
		Если Изменять Тогда
			Объект.Услуги.Очистить();	
		КонецЕсли;
		Элементы.Группа5.Видимость = Истина;
		Элементы.Группа30.Видимость = Истина;
		Элементы.Группа35.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализация.ПередачаНаРеализацию") Тогда
		Элементы.РеализацияСчетПередачи.Видимость = Истина;
	Иначе 
		Элементы.РеализацияСчетПередачи.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.РеализацияНаименование.ОграничениеТипа = ОписаниеТипа;
	Элементы.РеализацияНаименование.ВыбиратьТип = Ложь;

	
КонецПроцедуры	

&НаКлиенте
Процедура ПодразделениеВнПриИзменении(Элемент)
	
	ПодразделениеВнПриИзмененииНаСервере();	
	
КонецПроцедуры

&НаСервере
Процедура ПодразделениеВнПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ПодразделениеВн) Тогда
		РеквизитыПодразделения = БюджетныйНаСервере.ВернутьРеквизиты(Объект.ПодразделениеВн, "Организация");
		Объект.ОрганизацияВн = РеквизитыПодразделения.Организация;
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗаполнитьИзЗаказа(Команда)
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		СтрокаТЧ.Количество = СтрокаТЧ.КоличествоВЗаказе;		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьЦенуВНХ(Номенклатура, ПредприятиеВн, ПодразделениеВн, Предприятие, Подразделение, Дата)
	
	Если Номенклатура.Счет10 = ПланыСчетов.Учетный.Счет43() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Цена
		|ИЗ
		|	РегистрСведений.НоменклатураПоставщика.СрезПоследних(
		|			&Период,
		|			Предприятие = &Предприятие
		|				И Подразделение = &Подразделение
		|				И Номенклатура = &Номенклатура
		|				И Контрагент.ПредприятиеХодлинга = &ПредприятиеВн) КАК НоменклатураПоставщикаСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				&Период,
		|				Предприятие = &Предприятие
		|					И Подразделение = &Подразделение
		|					И Номенклатура = &Номенклатура
		|					И ВидЦены.ЦенаПоставщика) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО НоменклатураПоставщикаСрезПоследних.Предприятие = ЦеныНоменклатурыСрезПоследних.Предприятие
		|			И НоменклатураПоставщикаСрезПоследних.Подразделение = ЦеныНоменклатурыСрезПоследних.Подразделение
		|			И НоменклатураПоставщикаСрезПоследних.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И НоменклатураПоставщикаСрезПоследних.Контрагент = ЦеныНоменклатурыСрезПоследних.ВидЦены.Поставщик";
		Запрос.УстановитьПараметр("Период", Дата);
		Запрос.УстановитьПараметр("Предприятие", ПредприятиеВн);
		Запрос.УстановитьПараметр("Подразделение", ПодразделениеВн);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("ПредприятиеВн", Предприятие);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Цена;
		КонецЦикла;
		
		Возврат 0;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&Период,
		|			ВидЦены = &ВидЦены
		|				И Номенклатура = &Номенклатура
		|				И Подразделение = &Подразделение
		|				И Предприятие = &Предприятие) КАК ЦеныНоменклатурыСрезПоследних";
		Запрос.УстановитьПараметр("Период", Дата);
		Запрос.УстановитьПараметр("Предприятие", Предприятие);
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		Запрос.УстановитьПараметр("ВидЦены", Подразделение.РозничныйВидЦены);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Цена;
		КонецЦикла;
		
		Возврат 0;
	КонецЕсли;	
	
КонецФункции	

&НаСервереБезКонтекста
Функция РассчитатьЦену(Номенклатура, Контрагент, Предприятие, Подразделение, Дата, Договор)
	
	Если Не ТипЗнч(Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Или Не ЗначениеЗаполнено(Договор.ТипЦен) Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Период, Номенклатура = &Номенклатура) КАК ЦеныНоменклатурыСрезПоследних
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦенНоменклатуры.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЦеныНоменклатурыСрезПоследних.ТипЦен = &ТипЦен
	|		КОНЕЦ";
	Запрос.УстановитьПараметр("Период", Дата);
	//Запрос.УстановитьПараметр("Предприятие", Предприятие);
	//Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ТипЦен", Договор.ТипЦен);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Цена;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции	

&НаКлиенте
Процедура ОбновитьЦену(Команда)
	
	Для Каждого ТекДанные Из Объект.Товары Цикл
		УстановитьЗависимыеДанныеВТЧ(ТекДанные);
		РассчитатьСуммуТовары(ТекДанные);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуТовары(ТекДанные = Неопределено)
	
	Если ТекДанные = Неопределено Тогда
		ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	КонецЕсли;	
	
	Если Не ТекДанные = Неопределено Тогда
		ТекДанные.Сумма = ТекДанные.Количество * ТекДанные.Цена;
		ТекДанные.СуммаОтгрузки = ТекДанные.Количество * ТекДанные.Цена;
		
		ТекРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.СтавкаНДС, "Ставка");
		Если НЕ ТекРеквизиты = Неопределено Тогда
			ТекДанные.СуммаНДС = ТекДанные.Сумма / ((100+ТекРеквизиты.Ставка)/100) * (ТекРеквизиты.Ставка/100);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьАртикул();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	Если ЗначениеЗаполнено(ТекущийОбъект.ДокОснование) И (ТипЗнч(ТекущийОбъект.ДокОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Или ТипЗнч(ТекущийОбъект.ДокОснование) = Тип("ДокументСсылка.ЗаказКлиента")) Тогда
		РассчитатьКолонкуКоличествоИзЗаказа();
	КонецЕсли;
	
	//Синхронизация серий
	Если сабОбщегоНазначенияПовтИсп.ПолучитьСерийныйУчет() Тогда
		сабОперОбщегоНазначения.СинхронизацияСерийПослеЗаписиНаСервереФормы(Объект.Товары,Объект.СерииНоменклатуры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьExcel(Команда)
	
	ФормаЗагрузки = ПолучитьФорму("ОбщаяФорма.ФормаЗагрузкиИзExcel", Новый Структура("ВидЗагрузки", "ЗагрузкаВТЧТовары"));
	
	ПутьКФайлу = ФормаЗагрузки.ОткрытьМодально();
	
	Если ЗначениеЗаполнено(ПутьКФайлу) Тогда
		СтруктураВозврата = ФормаЗагрузки.ПолучитьДанныеПоЗагрузке(ПутьКФайлу);
		Для Каждого ЭлементСтруктурыВозврата Из СтруктураВозврата Цикл
			ТекДанные = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(ТекДанные, ЭлементСтруктурыВозврата.Значение);
			ТекДанные.Номенклатура = ЭлементСтруктурыВозврата.Значение.Номенклатура;
			УстановитьЗависимыеДанныеВТЧ(ТекДанные);
			РассчитатьСуммуТовары(ТекДанные);
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	СчетВзаиморасчетов = БюджетныйНаСервере.ВернутьРеквизит(Объект.Договор, "СчетВзаиморасчетов");
	Если ЗначениеЗаполнено(СчетВзаиморасчетов) И НЕ ЗначениеЗаполнено(Объект.Счет) Тогда
		Объект.Счет = СчетВзаиморасчетов;
	КонецЕсли;
	Если Объект.Счет = УЧ_Сервер.СчетПоКоду("79.02") Тогда
		Объект.ПредприятиеПоставщик = БюджетныйНаСервере.ВернутьРеквизит(Объект.Контрагент, "ПредприятиеХодлинга");
		Объект.ДоговорВн = БюджетныйНаСервере.ВернутьРеквизит(Объект.Договор, "ВнутрихолдинговыйДоговор");
		//Элементы.ПодразделениеВн.Видимость = Истина;
		//Элементы.ПредприятиеПоставщик.Видимость = Истина;
		//Элементы.ДоговорВн.Видимость = Истина;
	Иначе
		//Элементы.ПодразделениеВн.Видимость = Ложь;
		//Элементы.ПредприятиеПоставщик.Видимость = Ложь;
		//Элементы.ДоговорВн.Видимость = Ложь;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если НЕ Элементы.ГруппаТовары.Видимость Тогда
		Объект.Товары.Очистить();	
	КонецЕсли;
	Если НЕ Элементы.ГруппаУслуги.Видимость Тогда
		Объект.Услуги.Очистить();	
	КонецЕсли;
	
	Если Не ПараметрыЗаписи.Свойство("ПропуститьПроверкуЗакрытияЗаказа") И ЗначениеЗаполнено(Объект.ДокОснование) И ТипЗнч(Объект.ДокОснование) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		Если НЕ БюджетныйНаСервере.ВернутьРеквизит(Объект.ДокОснование, "Статус") = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.Отгружен") Тогда
			СтрокиОтклонения = ПолучитьСтрокиОтклоненияСЗаказом();
			Если СтрокиОтклонения.Количество() Тогда
				Отказ = Истина;
				ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтаФорма, Новый Структура("СтрокиОтклонения, ПараметрыЗаписи", СтрокиОтклонения, ПараметрыЗаписи)), "Имеются незакрытые строки заказа-основания. Принудительно закрыть заказ?", РежимДиалогаВопрос.ДаНетОтмена);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	ЗакрытьДокумент = Истина;
	Отказ = Не ПроверитьЗаполнение();
	Если Отказ Тогда
		Возврат;			
	КонецЕсли;
	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	СтрокиОтклонения = ДополнительныеПараметры.СтрокиОтклонения;
	ПараметрыЗаписи = ДополнительныеПараметры.ПараметрыЗаписи;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПараметрыЗаписи.Вставить("ЗакрытьЗаказ", Истина); 
		ПараметрыЗаписи.Вставить("СтрокиОтклонения", СтрокиОтклонения);
		ПараметрыЗаписи.Вставить("ПропуститьПроверкуЗакрытияЗаказа", Истина);
		Записать(ПараметрыЗаписи);
		//Если ЗакрытьДокумент Тогда
		//	Закрыть();		
		//КонецЕсли;	
	ИначеЕсли  РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ПараметрыЗаписи.Вставить("ЗакрытьЗаказ", Ложь); 
		ПараметрыЗаписи.Вставить("СтрокиОтклонения", СтрокиОтклонения);
		ПараметрыЗаписи.Вставить("ПропуститьПроверкуЗакрытияЗаказа", Истина);
		Записать(ПараметрыЗаписи);
		//Если ЗакрытьДокумент Тогда
		//	Закрыть();		
		//КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокиОтклоненияСЗаказом()
	
	Комментарий = "";
	СтандартнаяОбработка = Истина;
	СозданныеДокументы = сабОперОбщегоНазначения.ПроверкаСозданияНаОснованииНаСервере(Объект.ДокОснование, Комментарий, СтандартнаяОбработка, ТипЗнч(Объект.Ссылка));
	
	ТЧЗаказа = Объект.ДокОснование.ТабличнаяЧасть.Выгрузить();
	ТЧЗаказа.Свернуть("Номенклатура", "Количество");
	
	УжеРеализовано = Новый ТаблицаЗначений;
	УжеРеализовано.Колонки.Добавить("Номенклатура");
	УжеРеализовано.Колонки.Добавить("Количество");
	Если Не СозданныеДокументы.СозданныеДокументы = Неопределено Тогда
		Для каждого ТекФактДок Из СозданныеДокументы.СозданныеДокументы Цикл
			Если ТипЗнч(ТекФактДок.Ссылка) = Тип("ДокументСсылка.УЧ_Реализация") Тогда
				Для каждого ТекСтрока Из ТекФактДок.Ссылка.Товары Цикл
					НоваяСтрока = УжеРеализовано.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);	
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Для каждого ТекСтрока Из Объект.Товары Цикл
			НоваяСтрока = УжеРеализовано.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);	
		КонецЦикла; 
	КонецЕсли;
	
	УжеРеализовано.Свернуть("Номенклатура", "Количество");

	
	МассивСтрок = Новый Массив;
	Для каждого ТекСтрока Из ТЧЗаказа Цикл
		СтрокаЗакрыта = Ложь;
		НайденнаяНоменклатураСтроки = УжеРеализовано.НайтиСтроки(Новый Структура("Номенклатура", ТекСтрока.Номенклатура));
		Если НайденнаяНоменклатураСтроки.Количество() Тогда
			Если ТекСтрока.Количество > НайденнаяНоменклатураСтроки[0].Количество Тогда
				МассивСтрок.Добавить(Новый Структура("Номенклатура, Количество", ТекСтрока.Номенклатура, НайденнаяНоменклатураСтроки[0].Количество));
			КонецЕсли;
		Иначе
			МассивСтрок.Добавить(Новый Структура("Номенклатура, Количество", ТекСтрока.Номенклатура, 0));
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСтрок;
	
КонецФункции // ()


#Область ПодборТоваров
&НаКлиенте
Процедура ПодборТовары(Команда)

	//	ПараметрыПодбора = ПолучитьПараметрыПодбора("Реализация");
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");
	СписокСвойств = Неопределено;
	Если ЭтоВставкаИзБуфера Тогда
		
		ТаблицаТоваров = ВыбранноеЗначение.Данные;
		СписокСвойств = ВыбранноеЗначение.СписокСвойств;
		
	Иначе
		
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
		
	КонецЕсли;
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	//СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
	//	ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта, Ложь);
	
	//ЗаполнитьСтавкиНДСВРознице	= НТТ И УчетВПродажныхЦенах И РазделятьПоСтавкамНДС;
	ЗаполнитьСтавкиНДСВРознице = Ложь;
	
	СтрокиДляЗаполненияСчетов = Новый Массив;
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара, СписокСвойств);
		СтрокиДляЗаполненияСчетов.Добавить(СтрокаТабличнойЧасти);
		
		Попытка
		СведенияОНоменклатуре = БюджетныйНаСервере.ВернутьРеквизиты(СтрокаТовара.Номенклатура, "ЕдиницаИзмерения, Счет10, СтавкаНДС");
		Исключение
		КонецПопытки;
		//Если ЭтоВставкаИзБуфера
		//	И СведенияОНоменклатуре <> Неопределено
		//	И ЗначениеЗаполнено(СведенияОНоменклатуре.Услуга)
		//	И СведенияОНоменклатуре.Услуга Тогда
		//	
		//	Продолжить;
		//	
		//КонецЕсли;
				
		Если СведенияОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		//Если ИмяТаблицы = "ТабличнаяЧасть" Тогда
			
			//СтрокаТабличнойЧасти.ЕдиницаИзмерения		= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения),
			//	СтрокаТабличнойЧасти.ЕдиницаИзмерения, СведенияОНоменклатуре.ЕдиницаИзмерения);
			//СтрокаТабличнойЧасти.Коэффициент			= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.Коэффициент),
			//	СтрокаТабличнойЧасти.Коэффициент, СведенияОНоменклатуре.Коэффициент);
			//СтрокаТабличнойЧасти.НомерГТД				= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД),
			//	СтрокаТабличнойЧасти.НомерГТД, СведенияОНоменклатуре.НомерГТД);
			//СтрокаТабличнойЧасти.СтранаПроисхождения	= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтранаПроисхождения),
			//	СтрокаТабличнойЧасти.СтранаПроисхождения, СведенияОНоменклатуре.СтранаПроисхождения);
			
			СтрокаТабличнойЧасти.Номенклатура		= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура),
				СтрокаТабличнойЧасти.Номенклатура, СтрокаТовара.Номенклатура);
			СтрокаТабличнойЧасти.Счет		= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.Счет),
				СтрокаТабличнойЧасти.Счет, СведенияОНоменклатуре.Счет10);
			СтрокаТабличнойЧасти.СтавкаНДС		= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС),
				СтрокаТабличнойЧасти.СтавкаНДС, СведенияОНоменклатуре.СтавкаНДС);
			//Если НТТ Тогда
			//		
			//	СтрокаТабличнойЧасти.Цена = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.Цена),
			//		СтрокаТабличнойЧасти.Цена, СведенияОНоменклатуре.ЦенаВРознице);
			//		
			//	Если ЗаполнитьСтавкиНДСВРознице Тогда
			//		СтрокаТабличнойЧасти.СтавкаНДСВРознице = СведенияОНоменклатуре.СтавкаНДСВРознице;
			//	КонецЕсли;
			//	
			//КонецЕсли;
			
			//СтрокаТабличнойЧасти.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются;
			
			сабОбщегоНазначенияБУХКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			
		//КонецЕсли;
		
	КонецЦикла;
	
	//СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляЗаполненияСчетов, ИмяТаблицы, Объект, Документы.СписаниеТоваров);
	
	Если ЭтоВставкаИзБуфера Тогда
		
		ВыбранноеЗначение.КоличествоДобавленныхСтрок = СтрокиДляЗаполненияСчетов.Количество();
		
	КонецЕсли;
	
	//ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры
&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)

	ДатаРасчетов		= ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()),ТекущаяДата(), Объект.Дата);
	
	ЗаголовокПодбора	= НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	Если ИмяТаблицы = "Товары" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Товары'");
	ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Возвратная тара'");
	КонецЕсли;
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаРасчетов"  , ДатаРасчетов);
	ПараметрыФормы.Вставить("Валюта"        , ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	ПараметрыФормы.Вставить("Организация"   , Объект.Организация);
	ПараметрыФормы.Вставить("Подразделение" , Объект.Подразделение);
	ПараметрыФормы.Вставить("Склад"         , Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок"     , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора"    , "");
	ПараметрыФормы.Вставить("ИмяТаблицы"    , ИмяТаблицы);
	ПараметрыФормы.Вставить("Услуги"        , ИмяТаблицы = "Услуги");
	ПараметрыФормы.Вставить("ПоказыватьОстатки"  , Истина);
	ПараметрыФормы.Вставить("ЕстьКоличество", Истина);
	ПараметрыФормы.Вставить("Предприятие" 	, Объект.Предприятие);


	
	Возврат ПараметрыФормы;

КонецФункции


#КонецОбласти 

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ЭтаФорма.УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("сабУчетНДСОрганизации", Объект.Организация));
КонецПроцедуры

&НаСервере
Процедура сабПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	БезНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("Без НДС", Истина);; 
	
	Для каждого ТекСтрока Из ТекущийОбъект.Товары Цикл
		Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
			ТекСтрока.ВидДеятельности = Объект.Подразделение;		
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.СтавкаНДС) Тогда
			ТекСтрока.СтавкаНДС = БезНДС;
			ТекСтрока.СуммаНДС = 0;		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ТекСтрока.Контрагент = Неопределено;
			ТекСтрока.Договор = Неопределено;
		КонецЕсли;
		
	КонецЦикла; 
	
	Для каждого ТекСтрока Из Объект.Услуги Цикл
		Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
			ТекСтрока.Подразделение = Объект.Подразделение;		
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.СтавкаНДС) Тогда
			ТекСтрока.СтавкаНДС = БезНДС;
			ТекСтрока.СуммаНДС = 0;		
		КонецЕсли;	
	КонецЦикла; 
	
	УстановитьНомерСчФ(ТекущийОбъект);
	
	//проброс документаБУ
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ДокументБУ", ДокументБУРекв);
	
	//Если ЗначениеЗаполнено(Объект.Ссылка) И Не Отказ И БюджетныйНаСервере.ЕстьСвойствоОбъекта(ЭтотОбъект, "ДокументБУ") И ЗначениеЗаполнено(ЭтотОбъект.ДокументБУ) И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
	//	Если Не ОбщегоНазначения.КоллекцииИдентичны(Объект.СерииНоменклатуры, Объект.Ссылка.СерииНоменклатуры,"НомерСтроки,Номенклатура,ДатаПроизводства,Количество,НомерСтрокиРеализации,СерияНоменклатуры",,Истина) Тогда
	//		ПараметрыЗаписи.Вставить("СинхронизироватьСерииНоменклатурыСДокументомБух",Истина); 
	//	КонецЕсли;
	//КонецЕсли; 
	
	//Синхронизация серий
	Если сабОбщегоНазначенияПовтИсп.ПолучитьСерийныйУчет() Тогда
		сабОперОбщегоНазначения.ПерезаполнитьТЧСерииНоменклатурыПередЗаписью(Объект.Товары,ТекущийОбъект.СерииНоменклатуры);
		Если Не Отказ И БюджетныйНаСервере.ЕстьСвойствоОбъекта(ЭтотОбъект, "ДокументБУ") И ЗначениеЗаполнено(ЭтотОбъект.ДокументБУ) И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ПараметрыЗаписи.Вставить("СинхронизироватьСерииНоменклатурыСДокументомБух",Истина); 
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ЗакрытьЗаказ") Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ЗакрытьЗаказ", ПараметрыЗаписи.ЗакрытьЗаказ);
		ТекущийОбъект.ДополнительныеСвойства.Вставить("СтрокиОтклонения", ПараметрыЗаписи.СтрокиОтклонения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНомерСчФ(ТекущийОбъект)
	
	//Если НЕ Константы.сабИспользоватьПодсистемуБухгалтерия.Получить() ИЛИ ЗначениеЗаполнено(ТекущийОбъект.НомерСчетФактуры) Тогда
		Возврат;	
	//КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущийОбъект.Организация.ПрефиксОрганизации)Тогда
		ТекущийОбъект.НомерСчетФактуры = ТекущийОбъект.Номер;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МАКСИМУМ(УЧ_Реализация.НомерСчетФактуры) КАК НомерСчетФактуры
	               |ИЗ
	               |	Документ.УЧ_Реализация КАК УЧ_Реализация
	               |ГДЕ
	               |	УЧ_Реализация.Организация = &Организация
	               |	И УЧ_Реализация.НомерСчетФактуры ПОДОБНО &ПрефиксНомера
	               |	И НЕ УЧ_Реализация.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Организация", ТекущийОбъект.Организация);
	Запрос.УстановитьПараметр("Ссылка", ТекущийОбъект.Ссылка);
	ТекПрефикс = ТекущийОбъект.Организация.ПрефиксОрганизации;
	Запрос.УстановитьПараметр("ПрефиксНомера", ТекПрефикс + "%");
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	МаксДлина = СтрДлина(ТекущийОбъект.Номер);
	НовыйНомер = ТекПрефикс;
	Для ТекСимв = СтрДлина(ТекПрефикс) По МаксДлина Цикл
		НовыйНомер = НовыйНомер + "0";	
	КонецЦикла; 
	
	Если ТекущийОбъект.Номер = "" Тогда
		Возврат;	
	КонецЕсли;
	Пока Выборка.Следующий() Цикл
		СтарыйНомер = Число(Прав(?(Выборка.НомерСчетФактуры = Null, 0, Выборка.НомерСчетФактуры), МаксДлина-СтрДлина(ТекПрефикс)));
		НовыйНомерЧисло = Строка(СтарыйНомер + 1);
		ДлинаНомера = СтрДлина(НовыйНомерЧисло);
		ТекущийОбъект.НомерСчетФактуры = Лев(НовыйНомер, МаксДлина-ДлинаНомера) + НовыйНомерЧисло;	
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		
		Элементы.Услуги.ТекущиеДанные.Счет90 = УЧ_Сервер.СчетПоКоду("90.01");
		
		ПоляОбъекта = Новый Структура("Счет, Субконто1, Субконто2, Субконто3, Предприятие, Подразделение, Элементы, ЭлементСубконто1, ЭлементСубконто2, ЭлементСубконто3, ЭлементПодразделение, Количество",
		"Счет90", "Субконто1", "Субконто2", "Субконто3", Объект.Предприятие, "Подразделение", Элементы, "УслугиСубконто1", "УслугиСубконто2", "УслугиСубконто3", "УслугиПодразделение", "Количество");
		БюджетныйНаКлиенте.УстановитьДоступность(Элементы.Услуги.ТекущиеДанные, ПоляОбъекта);
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Табл.Счет90 КАК Счет
	               |ПОМЕСТИТЬ Врем
	               |ИЗ
	               |	&Табл КАК Табл
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Предприятия.УчетПоПодразделениям КАК УчетПоПодразделениям
	               |ПОМЕСТИТЬ УчетПоПодразделениямПредприятия
	               |ИЗ
	               |	Справочник.Предприятия КАК Предприятия
	               |ГДЕ
	               |	Предприятия.Ссылка В(&Предприятие)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(Учетный.Количественный, ЛОЖЬ) КАК Количественный,
	               |	ЕСТЬNULL(Учетный.Ссылка, Врем.Счет) КАК Счет,
	               |	ЕСТЬNULL(Учетный.Валютный, ЛОЖЬ) КАК Валютный,
	               |	ЕСТЬNULL(Учетный.УчетПоПодразделениям, ЛОЖЬ)
	               |		И УчетПоПодразделениямПредприятия.УчетПоПодразделениям КАК УчетПоПодразделениям
	               |ИЗ
	               |	Врем КАК Врем
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Учетный КАК Учетный
	               |		ПО Врем.Счет = Учетный.Ссылка,
	               |	УчетПоПодразделениямПредприятия КАК УчетПоПодразделениямПредприятия
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЕСТЬNULL(Учетный.Ссылка, Врем.Счет),
	               |	ЕСТЬNULL(Учетный.Количественный, ЛОЖЬ),
	               |	ЕСТЬNULL(Учетный.Валютный, ЛОЖЬ),
	               |	ЕСТЬNULL(Учетный.УчетПоПодразделениям, ЛОЖЬ)
	               |		И УчетПоПодразделениямПредприятия.УчетПоПодразделениям";
	
	ТЧ = Объект.Услуги.Выгрузить();
	
	Сч9001 = ПланыСчетов.Учетный.Счет9001();
	Для каждого ТекСтрока Из ТЧ Цикл
		Если Не ЗначениеЗаполнено(ТекСтрока.Счет90) Тогда
			ТекСтрока.Счет90 = Сч9001;	
		КонецЕсли;
	КонецЦикла; 

	Для каждого ТекСтрока Из Объект.ПрочиеНачисления Цикл
		НовСтрока = ТЧ.Добавить();
		НовСтрока.Счет90 = ТекСтрока.Счет;
	КонецЦикла; 
	
	Запрос.УстановитьПараметр("Табл", ТЧ);
	Запрос.УстановитьПараметр("Предприятие", Объект.Предприятие);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Соотв = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		Соотв.Вставить(Выборка.Счет, Новый Структура("Количественный, Валютный, УчетПоПодразделениям, КоличествоСубконто", Выборка.Количественный, Выборка.Валютный, Выборка.УчетПоПодразделениям, Выборка.Счет.ВидыСубконто.Количество())); 		
	КонецЦикла;
	
	
	Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Счет90) Тогда
			СтруСчета = Соотв.Получить(Сч9001);
		Иначе
			СтруСчета = Соотв.Получить(СтрокаТаблицы.Счет90);		
		КонецЕсли;
		КоличествоСубконто   = СтруСчета.КоличествоСубконто;
		Для Индекс = 1 По 3 Цикл
			СтрокаТаблицы["Субконто"   + Индекс + "Доступность"] = (Индекс <= КоличествоСубконто);
		КонецЦикла;
		СтрокаТаблицы["Количество"   + "Доступность"] = СтруСчета.Количественный;
		СтрокаТаблицы["Подразделение"   + "Доступность"] = СтруСчета.УчетПоПодразделениям;
		//Валютный = СтруСчета.Валютный;
		//СтрокаТаблицы["Валюта"   + "Доступность"] = Валютный;
		//СтрокаТаблицы["ВалСумма"   + "Доступность"] = Валютный;
		
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Объект.ПрочиеНачисления Цикл
		СтруСчета = Соотв.Получить(СтрокаТаблицы.Счет);
		КоличествоСубконто   = СтруСчета.КоличествоСубконто;
		Для Индекс = 1 По 3 Цикл
			СтрокаТаблицы["Субконто"   + Индекс + "Доступность"] = (Индекс <= КоличествоСубконто);
		КонецЦикла;
		//СтрокаТаблицы["Количество"   + "Доступность"] = СтруСчета.Количественный;
		СтрокаТаблицы["Подразделение"   + "Доступность"] = СтруСчета.УчетПоПодразделениям;
		//Валютный = СтруСчета.Валютный;
		//СтрокаТаблицы["Валюта"   + "Доступность"] = Валютный;
		//СтрокаТаблицы["ВалСумма"   + "Доступность"] = Валютный;
		
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ВерхиСчетПриИзменении(Элемент)
	ПоляОбъекта = Новый Структура("Счет, Субконто1, Субконто2, Субконто3, Предприятие, Подразделение, Элементы, ЭлементСубконто1, ЭлементСубконто2, ЭлементСубконто3, ЭлементПодразделение",
	"Счет", "Субконто1", "Субконто2", "Субконто3", Объект.Предприятие, "Подразделение", Элементы, "ВерхиСубконто1", "ВерхиСубконто2", "ВерхиСубконто3", "ВерхиПодразделение");
	БюджетныйНаКлиенте.УстановитьДоступность(Элементы.ПрочиеНачисления.ТекущиеДанные, ПоляОбъекта);
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПлатежнымиКартамиЭквайринговыйТерминалПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ОплатаПлатежнымиКартами.ТекущиеДанные;
	Если Не ТекущаяСтрока = Неопределено Тогда
		ТекущаяСтрока.ПроцентКомиссии = БюджетныйНаСервере.ВернутьРеквизит(ТекущаяСтрока.ЭквайринговыйТерминал, "ПроцентКомиссииПриПродаже"); 
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПлатежнымиКартамиСуммаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ОплатаПлатежнымиКартами.ТекущиеДанные;
	ТекущаяСтрока.СуммаКомиссии = ТекущаяСтрока.Сумма * ТекущаяСтрока.ПроцентКомиссии / 100;
	Объект.СуммаНаличногоРасчета = Объект.Товары.Итог("СуммаОтгрузки") - Объект.ОплатаПлатежнымиКартами.Итог("Сумма");
КонецПроцедуры

#Область КомандыИзменения

&НаКлиенте
Процедура ПоказатьИзмененияВерсий(ИмяКоманды)

	СсылкаНаОбъект = ЭтаФорма.ДокументБУ; 
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Ссылка",СсылкаНаОбъект);
	СтруктураКоличествВерсий = сабОбщегоНазначенияБУХ.ПолучитьКоличествоВерсий(СсылкаНаОбъект);
	КолВерсий = СтруктураКоличествВерсий.КоличествоИзмененныхВерсий;
	СравниваемыеВерсии = Новый СписокЗначений;  
	Пока КолВерсий > 0 Цикл
		СравниваемыеВерсии.Добавить(СтруктураКоличествВерсий.КоличествоВерсий, СтруктураКоличествВерсий.КоличествоВерсий);
		СтруктураКоличествВерсий.КоличествоВерсий = СтруктураКоличествВерсий.КоличествоВерсий - 1;
		КолВерсий = КолВерсий - 1;
	КонецЦикла;
	ПараметрыОтчета.Вставить("СравниваемыеВерсии",СравниваемыеВерсии); 
	
	ОткрытьФорму("РегистрСведений.ВерсииОбъектов.Форма.ОтчетПоВерсиямОбъекта", ПараметрыОтчета);

КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоДокументу(ИмяКоманды)

	ПерезаполнитьДокументНаОснованиинаСервере();

КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьДокументНаОснованиинаСервере()
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.ОбработкаЗаполненияСФормы(ЭтаФорма.ДокументБУ, Неопределено, Истина);
	ЗначениеВРеквизитФормы(ТекОбъект, "Объект");
	
	//ОбновленнаяЗапись = РегистрыСведений.сабОбработкаДокументов.СоздатьМенеджерЗаписи();
	//ОбновленнаяЗапись.ДокументБУ = ЭтаФорма.ДокументБУ;
	//ОбновленнаяЗапись.ДокументУУ = Объект.Ссылка;
	//ОбновленнаяЗапись.ДатаОбработки = ТекущаяДата();
	//ОбновленнаяЗапись.Автор = ПараметрыСеанса.ТекущийПользователь;
	//ОбновленнаяЗапись.Модифицирован = Ложь;
	//ОбновленнаяЗапись.Записать();
	Элементы.ЭлементПерезаполнитьПоДокументу.Доступность = Ложь;
	
	ПриСозданииНаСервере(Ложь, Истина);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ОповеститьРегистрОбработанных", Новый Структура("ДокументУУ, ДокументБУ", Объект.Ссылка, ?(БюджетныйНаКлиенте.ЕстьСвойствоОбъекта(ЭтаФорма, "ДокументБУ"), ЭтаФорма.ДокументБУ, Неопределено)));	
	Оповестить("сабОбноватьПлатежныйКалендарь");

	Если ЗакрытьДокумент Тогда
		Закрыть();		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура РеализацияСерияНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ТекДанные = Элементы.Реализация.ТекущиеДанные;
	МассивПараметрыВыбора = Новый Массив;
	НовыйПараметрДата = Новый ПараметрВыбора("ДатаОтгрузки",Объект.Дата);
	НовыйПараметрСчет = Новый ПараметрВыбора("Счет",ТекДанные.Счет);  
	НовыйПараметрСклад = Новый ПараметрВыбора("Склад",?(ЗначениеЗаполнено(ТекДанные.Склад), ТекДанные.Склад, Объект.Склад));
	НовыйПараметрПредприятие = Новый ПараметрВыбора("Предприятие",Объект.Предприятие);
	МассивПараметрыВыбора.Добавить(НовыйПараметрДата);   
	МассивПараметрыВыбора.Добавить(НовыйПараметрСчет);
	МассивПараметрыВыбора.Добавить(НовыйПараметрСклад);
	МассивПараметрыВыбора.Добавить(НовыйПараметрПредприятие);
	НовыеПараметры = Новый ФиксированныйМассив(МассивПараметрыВыбора);
	Если ТекДанные.НесколькоСерий Тогда
		СтандартнаяОбработка = Ложь; 
		ТекФорма = ПолучитьФорму("Документ.УЧ_Реализация.Форма.ФормаПодбораСерий"); 
		ТекФорма.Элементы.СерииНоменклатуры.ПодчиненныеЭлементы.СерииНоменклатурыСерияНоменклатуры.ПараметрыВыбора = НовыеПараметры;
		ТекФорма.Номенклатура = ТекДанные.Номенклатура;
		ТекФорма.Количество = ТекДанные.Количество;
		ТекФорма.НомерСтрокиРеализации = ТекДанные.НомерСтроки;
		Для каждого ТекСтрока Из Объект.СерииНоменклатуры Цикл
			Если ТекСтрока.Номенклатура = ТекДанные.Номенклатура И ТекСтрока.НомерСтрокиРеализации = ТекДанные.НомерСтроки Тогда
				НоваяСтрока = ТекФорма.СерииНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		ТекФорма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		Оп = Новый ОписаниеОповещения("ВыполнитьПослеОкончанияПодбора", ЭтотОбъект, Новый Структура);
		ТекФорма.ОписаниеОповещенияОЗакрытии = Оп;
		ТекФорма.Открыть();
	Иначе
		Элемент.ПараметрыВыбора = НовыеПараметры;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеОкончанияПодбора(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.Реализация.ТекущиеДанные;
	МассивУдСерий = Новый Массив;
	Для каждого ТекСтрока Из Объект.СерииНоменклатуры Цикл
		Если ТекСтрока.Номенклатура = ТекДанные.Номенклатура И ТекСтрока.НомерСтрокиРеализации = ТекДанные.НомерСтроки Тогда
			МассивУдСерий.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекУд Из МассивУдСерий Цикл
		Объект.СерииНоменклатуры.Удалить(ТекУд);
	КонецЦикла;
	
	НовоеКоличество = 0;
	Для каждого ТекСтрока Из Результат.СерииНоменклатуры Цикл
		НоваяСтрока = Объект.СерииНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		НоваяСтрока.НомерСтрокиРеализации = ТекДанные.НомерСтроки;
		НовоеКоличество = НовоеКоличество + ТекСтрока.Количество; 
		НоваяСтрока.ДатаПроизводства = сабОбщегоНазначенияБУХ.ПолучитьДатуПроизводстваДляСерииНоменклатуры(ТекСтрока.СерияНоменклатуры);
	КонецЦикла;
	
	ТекДанные.Количество = НовоеКоличество; 
	Объект.СерииНоменклатуры.Сортировать("НомерСтрокиРеализации");
	РеализацияКоличествоПриИзменении(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура РеализацияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.Реализация.ТекущиеДанные.НесколькоСерий = Ложь;
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализация.ПередачаНаРеализацию") Тогда
			Элемент.ТекущиеДанные.СчетПередачи = ВернутьСчетПередачи();
		КонецЕсли;
	КонецЕсли; 
	
	//Синхронизация серий
	Если сабОбщегоНазначенияПовтИсп.ПолучитьСерийныйУчет() Тогда
		сабОперОбщегоНазначенияНаКлиенте.ЗаполнитьНомерИсходнойСтрокиДляСерии(Элемент.ТекущиеДанные);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция ВернутьСчетПередачи()
	Возврат ПланыСчетов.Учетный.Счет45();
КонецФункции

&НаКлиенте
Процедура РеализацияСерияНоменклатурыПриИзменении(Элемент)
	
	//Синхронизация серий
	ТекущиеДанные = Элементы.Реализация.ТекущиеДанные;
	сабОперОбщегоНазначенияНаКлиенте.ЗаполнитьТЧСерииПриИзмененииСерииВОсновнойТЧ(ТекущиеДанные,Объект.СерииНоменклатуры);

	//ТД = Элементы.Реализация.ТекущиеДанные; 
	//ПараметрыОтбораСерииНоменклатуры = Новый Структура("Номенклатура,НомерСтрокиРеализации",ТД.Номенклатура,ТД.НомерСтроки);
	//МассивНайденныеСтрокиСерииНоменклатуры = Объект.СерииНоменклатуры.НайтиСтроки(ПараметрыОтбораСерииНоменклатуры);
	//ИндексДляДобавления = Неопределено;
	//Для каждого НайденнаяСтрокаСерииНоменклатуры Из МассивНайденныеСтрокиСерииНоменклатуры Цикл
	//	Если ИндексДляДобавления = Неопределено Тогда
	//		ИндексДляДобавления = Объект.СерииНоменклатуры.Индекс(НайденнаяСтрокаСерииНоменклатуры);
	//	КонецЕсли;
	//	Объект.СерииНоменклатуры.Удалить(НайденнаяСтрокаСерииНоменклатуры);
	//КонецЦикла;
	//Если ИндексДляДобавления = Неопределено Тогда
	//	 ИндексДляДобавления = 0;
	//КонецЕсли;
	//НоваяСтрокаСерииНоменклатуры = Объект.СерииНоменклатуры.Вставить(ИндексДляДобавления);
	//НоваяСтрокаСерииНоменклатуры.Номенклатура = ТД.Номенклатура;
	//НоваяСтрокаСерииНоменклатуры.Количество = ТД.Количество;
	//НоваяСтрокаСерииНоменклатуры.НомерСтрокиРеализации = ТД.НомерСтроки;
	//НоваяСтрокаСерииНоменклатуры.СерияНоменклатуры = ТД.СерияНоменклатуры;
	//НоваяСтрокаСерииНоменклатуры.ДатаПроизводства = сабОбщегоНазначенияБУХ.ПолучитьДатуПроизводстваДляСерииНоменклатуры(ТД.СерияНоменклатуры);
	//Объект.СерииНоменклатуры.Сортировать("НомерСтрокиРеализации");

КонецПроцедуры

&НаКлиенте
Процедура РеализацияПередУдалением(Элемент, Отказ)
	
	ТД = Элемент.ТекущиеДанные; 
	ПараметрыОтбораСерииНоменклатуры = Новый Структура("Номенклатура,НомерСтрокиРеализации",ТД.Номенклатура,ТД.НомерСтроки);
	МассивНайденныеСтрокиСерииНоменклатуры = Объект.СерииНоменклатуры.НайтиСтроки(ПараметрыОтбораСерииНоменклатуры);
	Для каждого НайденнаяСтрокаСерииНоменклатуры Из МассивНайденныеСтрокиСерииНоменклатуры Цикл
		Объект.СерииНоменклатуры.Удалить(НайденнаяСтрокаСерииНоменклатуры);
	КонецЦикла;
	Объект.СерииНоменклатуры.Сортировать("НомерСтрокиРеализации");
	
КонецПроцедуры

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаКлиенте
Процедура СкопироватьСтроки(Команда)

	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы.Форма].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	ИмяТекущейСтраницы = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	ИмяТаблицы = "";
	Если ИмяТекущейСтраницы = "ГруппаТовары" Тогда
		
		ИмяТаблицы = Новый Структура;
    ИмяТаблицы.Вставить("Форма","Реализация");
    ИмяТаблицы.Вставить("Документ","Товары");
		
	ИначеЕсли ИмяТекущейСтраницы = "ГруппаУслуги" Тогда
		
		ИмяТаблицы = Новый Структура;
    ИмяТаблицы.Вставить("Форма","Услуги");
    ИмяТаблицы.Вставить("Документ","Услуги");
		
	КонецЕсли;
	
	Возврат ИмяТаблицы;
	
КонецФункции

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы.Документ], 
		Элементы[ИмяТаблицы.Форма].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

	КонецПроцедуры
	
&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы.Документ);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)
	
	СписокСвойств = Новый Массив;
	
	Если ПараметрыВставки.ИмяТаблицы = "Товары" Тогда
		
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("КоличествоМест");
		СписокСвойств.Добавить("ЕдиницаИзмерения");
		СписокСвойств.Добавить("Коэффициент");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("Цена");
		СписокСвойств.Добавить("СтавкаНДС");
		СписокСвойств.Добавить("НомерГТД");
		СписокСвойств.Добавить("СтранаПроисхождения");
		СписокСвойств.Добавить("СчетНаОплатуПокупателю");
		///////////////////////////////////////////////////
		СписокСвойств.Добавить("СуммаОтгрузки");
		СписокСвойств.Добавить("СуммаНДС");
		СписокСвойств.Добавить("Счет");
		СписокСвойств.Добавить("Склад");
		СписокСвойств.Добавить("КоличествоКРХ");
		СписокСвойств.Добавить("Доставка");
		СписокСвойств.Добавить("СуммаДоставки");
		СписокСвойств.Добавить("ВидДоставки");
		СписокСвойств.Добавить("ВнеобАктивы");
		СписокСвойств.Добавить("ДоставкаАвто");
		СписокСвойств.Добавить("СуммаДоставкиАвто");
		СписокСвойств.Добавить("Расстояние");
		СписокСвойств.Добавить("СуммаДоставкиНачислено");
		СписокСвойств.Добавить("Основание");
		СписокСвойств.Добавить("СуммаВерха");
		СписокСвойств.Добавить("ВерхКонтрагент");
		СписокСвойств.Добавить("Верх");
		СписокСвойств.Добавить("ПроцВерха");
		СписокСвойств.Добавить("ЦенаКлиента");
		СписокСвойств.Добавить("ВидДеятельности");
		СписокСвойств.Добавить("ПроцентАвтоматическихСкидок");
		СписокСвойств.Добавить("ПроцентСкидкиНаценки");
		СписокСвойств.Добавить("АбсолютнаяСкидка");
		СписокСвойств.Добавить("Характеристика");
		СписокСвойств.Добавить("Штрихкод");
		СписокСвойств.Добавить("Контрагент");
		СписокСвойств.Добавить("Договор");
		СписокСвойств.Добавить("СерияНоменклатуры");
		СписокСвойств.Добавить("КоличествоВЗаказе");
		СписокСвойств.Добавить("Артикул");
		СписокСвойств.Добавить("НесколькоСерий");
		
		СписокСвойств.Добавить("КорСчет");
		СписокСвойств.Добавить("КорСубконто1");
		СписокСвойств.Добавить("КорСубконто2");
		СписокСвойств.Добавить("КорСубконто3");
		СписокСвойств.Добавить("Счет76");
	
	ИначеЕсли ПараметрыВставки.ИмяТаблицы = "Услуги" Тогда
	
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("Содержание");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("Цена");
		СписокСвойств.Добавить("СтавкаНДС");
		СписокСвойств.Добавить("СчетНаОплатуПокупателю");
		/////////////////////////////////////////////////////////
		СписокСвойств.Добавить("Услуга");
		СписокСвойств.Добавить("СодержаниеУслуги");
		СписокСвойств.Добавить("Сумма");
		СписокСвойств.Добавить("СтавкаНДС");
		СписокСвойств.Добавить("СуммаНДС");
		СписокСвойств.Добавить("СуммаОтгрузки");
		СписокСвойств.Добавить("Подразделение");
		СписокСвойств.Добавить("ПодразделениеДоступность");
		СписокСвойств.Добавить("КоличествоДоступность");
		
		СписокСвойств.Добавить("Счет90");
		СписокСвойств.Добавить("Субконто1");
		СписокСвойств.Добавить("Субконто2");
		СписокСвойств.Добавить("Субконто3");
		СписокСвойств.Добавить("Субконто1Доступность");
		СписокСвойств.Добавить("Субконто2Доступность");
		СписокСвойств.Добавить("Субконто3Доступность");
		
	КонецЕсли;
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
		ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)

	Доступность = Не Форма.ТолькоПросмотр И Доступность;
	Элементы = Форма.Элементы;
	Элементы.ТоварыВставитьСтроки.Доступность						 = Доступность;
	Элементы.ТоварыКонтекстноеМенюВставитьСтроки.Доступность		 = Доступность;
	Элементы.УслугиВставитьСтроки.Доступность						 = Доступность;
	Элементы.УслугиКонтекстноеМенюВставитьСтроки.Доступность		 = Доступность;
	
КонецПроцедуры

&НаКлиенте
Процедура РеализацияПриИзменении(Элемент)
	
	//Синхронизация серий
	Если сабОбщегоНазначенияПовтИсп.ПолучитьСерийныйУчет() Тогда
		сабОперОбщегоНазначенияНаКлиенте.СинхронизироватьНомерСтрокиРеализацииДляТЧСерии(Элемент.ТекущиеДанные,Объект.Товары,Объект.СерииНоменклатуры);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеКонтрагентаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ПодразделениеКонтрагента) Тогда
		РеквыОбъекта = БюджетныйНаСервере.ВернутьРеквизиты(Объект.ПодразделениеКонтрагента, "Склад"); 
		Если ЗначениеЗаполнено(РеквыОбъекта.Склад) Тогда
			Объект.Склад = РеквыОбъекта.Склад;
			Для Каждого ТекСтрокаТЧ Из Объект.Товары Цикл
				ТекСтрокаТЧ.Склад = РеквыОбъекта.Склад;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПодборТоваров

&НаКлиенте
Процедура Подобрать(Команда)
	
	ОписаниеОповещенияПослеПодбора = Новый ОписаниеОповещения("ЗаполнитьТоварыПоПодбору",ЭтотОбъект);
	СтруктураПараметров = Новый Структура("Склад,Предприятие,Заголовок",Объект.Склад,Объект.Предприятие, "Подбор товаров для документа " + Объект.Ссылка);
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаДляПодбора",СтруктураПараметров,ЭтотОбъект,УникальныйИдентификатор,,,ОписаниеОповещенияПослеПодбора,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьТоварыПоПодбору(Результат,ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если ЭтоАдресВременногоХранилища(Результат) Тогда
			ЗаполнитьПоПодборуНаСервере(Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПодборуНаСервере(АдресВХ)
	
	ТЗДанныеПодбора = ПолучитьИзВременногоХранилища(АдресВХ);	
	Если ТипЗнч(ТЗДанныеПодбора) = Тип("ТаблицаЗначений") Тогда
		Для Каждого СтрокаТовара Из ТЗДанныеПодбора Цикл
			НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура,Цена",СтрокаТовара.Номенклатура,СтрокаТовара.Цена));
			Если НайденныеСтроки.Количество() > 0 Тогда 
				ТекДанные = НайденныеСтроки[0];
				//Если АльтернативнаяФорма Тогда
						ТекДанные.Количество = ТекДанные.Количество + СтрокаТовара.Количество; 
				//Иначе
				//	ТекДанные.КоличествоУпаковок = ТекДанные.КоличествоУпаковок + СтрокаТовара.Количество; 
				//	ТекДанные.Количество = ТекДанные.КоэффициентПересчетаУпаковок * ТекДанные.КоличествоУпаковок;
				//КонецЕсли;
				ТекДанные.Сумма = ТекДанные.Количество * ТекДанные.Цена;
				ТекРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.СтавкаНДС, "Ставка");
				Если НЕ ТекРеквизиты = Неопределено Тогда
					ТекДанные.СуммаНДС = ТекДанные.Сумма / ((100+ТекРеквизиты.Ставка)/100) * (ТекРеквизиты.Ставка/100);
				КонецЕсли;
				//Если АльтернативнаяФорма Тогда
				//	Если ТипЗнч(ТекДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
				//		СтруктураВозврата = ПолучитьКоличествоВУпаковкеПоУмолчаниюДляНоменклатуры(ТекДанные.Номенклатура);
				//		ТекДанные.КоэффициентПересчетаУпаковок = СтруктураВозврата.Коэффициент;
				//		ПредставлениеУпаковки = СтруктураВозврата.Упаковка;
				//		ПредставлениеЕдИзмерения = ТекДанные.ЕдиницаИзмерения; 
				//	Иначе
				//		ТекДанные.КоэффициентПересчетаУпаковок = ПолучитьКоэффициентПересчетаУпаковок(ТекДанные.Номенклатура, ТекДанные.ЕдиницаИзмерения);
				//		ПредставлениеУпаковки = ТекДанные.ЕдиницаИзмерения; 
				//		ПредставлениеЕдИзмерения = ПолучитьПредставлениеЕдиницыУпаковки(ТекДанные.Номенклатура,ТекДанные.ЕдиницаИзмерения);
				//	КонецЕсли;
				//	ТекДанные.КоличествоВУпаковке = ТекДанные.КоэффициентПересчетаУпаковок;
				//	ТекДанные.КоличествоУпаковок = Цел(?(ТекДанные.КоэффициентПересчетаУпаковок = 0,0,ТекДанные.Количество / ТекДанные.КоэффициентПересчетаУпаковок)); 
				//	Если ТекДанные.КоличествоВУпаковке = 0 ИЛИ ТекДанные.КоличествоВУпаковке = 1 Тогда
				//		КолУпаковок = 0;
				//		КолЕдиниц = ТекДанные.Количество;
				//		ТекДанные.КоличествоУпаковокПредставление = "" + КолУпаковок + " " + ПредставлениеУпаковки + ","  +
				//		КолЕдиниц + " " + ПредставлениеЕдИзмерения;
				//	Иначе
				//		КолУпаковок = Цел(ТекДанные.Количество / ТекДанные.КоличествоВУпаковке);
				//		КолЕдиниц = ТекДанные.Количество - (КолУпаковок * ТекДанные.КоличествоВУпаковке);
				//		ТекДанные.КоличествоУпаковокПредставление = "" + КолУпаковок + " " + ПредставлениеУпаковки + ", " +
				//		КолЕдиниц + " " + ПредставлениеЕдИзмерения;
				//	КонецЕсли;
				//	
				//КонецЕсли;
			Иначе
				НоваяСтрокаТовары = Объект.Товары.Добавить();
				НоваяСтрокаТовары.Номенклатура = СтрокаТовара.Номенклатура;
				НоваяСтрокаТовары.Цена = СтрокаТовара.Цена;
				ТекДанные = НоваяСтрокаТовары; 
				//Установим единицу измерения по умолчанию
				Если АльтернативнаяФорма Тогда
					ТекДанные.ЕдиницаИзмерения = НоваяСтрокаТовары.Номенклатура.ЕдиницаИзмерения;
				Иначе
				ТекДанные.ЕдиницаИзмерения = ПолучитьЕдИзмНоменклатуры(ТекДанные.Номенклатура);
				КонецЕсли;
				МассивЕдИзмНоменклатуры = ПолучитьМассивВозможныхЕдиницИзмеренияНоменклатуры(ТекДанные.Номенклатура);
				Элементы.РеализацияЕдиницаИзмерения.СписокВыбора.Очистить();
				Для Каждого ЭлементВыборкаЕдИзм Из МассивЕдИзмНоменклатуры Цикл
					Элементы.РеализацияЕдиницаИзмерения.СписокВыбора.Добавить(ЭлементВыборкаЕдИзм);
				КонецЦикла;
				//ТекДанные.КоэффициентПересчетаУпаковок = ПолучитьКоэффициентПересчетаУпаковок(ТекДанные.Номенклатура, ТекДанные.ЕдиницаИзмерения);
				//Если АльтернативнаяФорма Тогда 
					ТекДанные.Количество = СтрокаТовара.Количество;
				//	ЗаполнитьПредставлениеУпаковок(ТекДанные);
				//Иначе 
				//	ТекДанные.КоэффициентПересчетаУпаковок = ПолучитьКоэффициентПересчетаУпаковок(ТекДанные.Номенклатура, ТекДанные.ЕдиницаИзмерения);
				//	ТекДанные.КоличествоУпаковок = СтрокаТовара.Количество; 
				//	ТекДанные.Количество = ТекДанные.КоэффициентПересчетаУпаковок * ТекДанные.КоличествоУпаковок;
				//КонецЕсли;  
				//ТекДанные.КоличествоВУпаковке = ТекДанные.КоэффициентПересчетаУпаковок;  
				ТекДанные.Сумма = ТекДанные.Количество * ТекДанные.Цена;
				
				//Установим НДС и артикул
				Если ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
					ТекРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.Номенклатура, "СтавкаНДС, Код, Счет10, ВидСтавкиНДС, ЕдиницаИзмерения, Кратность, МинимальнаяПартия", Ложь);
					ТекДанные.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвВидовСтавокНДСБУХУУ().Получить(ТекРеквизиты.ВидСтавкиНДС);;
					//ТекДанные.Кратность = ТекРеквизиты.Кратность; 
					ТекРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.СтавкаНДС, "Ставка");
					Если НЕ ТекРеквизиты = Неопределено Тогда
						ТекДанные.СуммаНДС = ТекДанные.Сумма / ((100+ТекРеквизиты.Ставка)/100) * (ТекРеквизиты.Ставка/100);
					КонецЕсли;
				КонецЕсли;
				Если ЗначениеЗаполнено(Объект.Склад) Тогда
					ТекДанные.Склад = Объект.Склад;	
				КонецЕсли;
				СтруктураДанных =Новый Структура("Номенклатура, Склад, Количество,СуммаОтгрузки", 
				ТекДанные.Номенклатура, ТекДанные.Склад, ТекДанные.Количество,ТекДанные.Сумма);
				//ЗаполнитьОстаткиИРезервы(Истина, СтруктураДанных);
				//ЗаполнитьКонтрольМинЦены(Истина, СтруктураДанных);
				ЗаполнитьЗначенияСвойств(ТекДанные, СтруктураДанных);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция ПолучитьКоличествоВУпаковкеПоУмолчаниюДляНоменклатуры(Номенклатура) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковкиНоменклатуры.Коэффициент КАК Коэффициент,
	|	УпаковкиНоменклатуры.ОсновнаяУпаковка КАК ОсновнаяУпаковка,
	|	УпаковкиНоменклатуры.Упаковка.Представление КАК Упаковка
	|ИЗ
	|	РегистрСведений.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|ГДЕ
	|	УпаковкиНоменклатуры.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	СтруктураВозврата = Новый Структура("Упаковка,Коэффициент");
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Количество() > 1 Тогда
		Пока Выборка.Следующий() Цикл
			Если Выборка.ОсновнаяУпаковка Тогда
				СтруктураВозврата.Упаковка = Выборка.Упаковка;
				СтруктураВозврата.Коэффициент = Выборка.Коэффициент;
				Возврат СтруктураВозврата; 
			КонецЕсли;
		КонецЦикла;
		Выборка.Сбросить();
		Выборка.Следующий(); 
		СтруктураВозврата.Упаковка = Выборка.Упаковка;
		СтруктураВозврата.Коэффициент = Выборка.Коэффициент;
		Возврат СтруктураВозврата; 
	Иначе
		Если Выборка.Следующий() Тогда
			СтруктураВозврата.Упаковка = Выборка.Упаковка;
			СтруктураВозврата.Коэффициент = Выборка.Коэффициент;
			Возврат СтруктураВозврата; 
		КонецЕсли;
	КонецЕсли; 
	СтруктураВозврата.Упаковка = "уп.";
	СтруктураВозврата.Коэффициент = 1;
	Возврат СтруктураВозврата; 
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКоэффициентПересчетаУпаковок(Номенклатура, ЕдиницаИзмерения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковкиНоменклатуры.Коэффициент
	|ИЗ
	|	РегистрСведений.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|ГДЕ
	|	УпаковкиНоменклатуры.Номенклатура = &Номенклатура
	|	И УпаковкиНоменклатуры.Упаковка = &Упаковка
	|	И УпаковкиНоменклатуры.ЕдиницаИзмерения = &ЕдиницаИзмерения";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Упаковка", ЕдиницаИзмерения);
	Запрос.УстановитьПараметр("ЕдиницаИзмерения", Номенклатура.ЕдиницаИзмерения);
	
	Выборка = запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Коэффициент;		
	КонецЦикла;
	
	Возврат 1;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеЕдиницыУпаковки(Номенклатура = Неопределено, ЕдиницаИзмерения = Неопределено, ДляОднойНоменклатуры = Истина, ТЗДанные = Неопределено) Экспорт
	
	Если ДляОднойНоменклатуры Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УпаковкиНоменклатуры.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения 
		|ИЗ
		|	РегистрСведений.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
		|ГДЕ
		|	УпаковкиНоменклатуры.Номенклатура = &Номенклатура
		|	И УпаковкиНоменклатуры.Упаковка = &Упаковка";
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("Упаковка", ЕдиницаИзмерения);
		
		Выборка = запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.ЕдиницаИзмерения;		
		КонецЦикла;
		
		Возврат ЕдиницаИзмерения.Наименование;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗНоменклатураУпаковки.Номенклатура КАК Номенклатура,
		|	ТЗНоменклатураУпаковки.ЕдиницаИзмерения КАК Упаковка
		|ПОМЕСТИТЬ ВТНоменклатураУпаковка
		|ИЗ
		|	&ТЗНоменклатураУпаковки КАК ТЗНоменклатураУпаковки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(УпаковкиНоменклатуры.ЕдиницаИзмерения.Представление, ВТНоменклатураУпаковка.Упаковка) КАК ЕдиницаИзмерения, 
		|	ВТНоменклатураУпаковка.Упаковка КАК Упаковка,
		|	ВТНоменклатураУпаковка.Упаковка.Представление КАК УпаковкаПредставление,
		|	ВТНоменклатураУпаковка.Номенклатура КАК Номенклатура
		|ИЗ
		|	ВТНоменклатураУпаковка КАК ВТНоменклатураУпаковка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
		|		ПО ВТНоменклатураУпаковка.Номенклатура = УпаковкиНоменклатуры.Номенклатура
		|			И ВТНоменклатураУпаковка.Упаковка = УпаковкиНоменклатуры.Упаковка";
		Запрос.УстановитьПараметр("ТЗНоменклатураУпаковки",ТЗДанные);
		
		Выборка = запрос.Выполнить().Выбрать();
		Возврат Выборка;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЕдИзмНоменклатуры(Номенклатура) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковкиНоменклатуры.Упаковка
	|ИЗ
	|	РегистрСведений.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|ГДЕ
	|	УпаковкиНоменклатуры.Номенклатура = &Номенклатура
	|	И УпаковкиНоменклатуры.ОсновнаяУпаковка";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Упаковка;		
	КонецЦикла;	
	
	Возврат Номенклатура.ЕдиницаИзмерения;	
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьМассивВозможныхЕдиницИзмеренияНоменклатуры(Номенклатура) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковкиНоменклатуры.Упаковка
	|ИЗ
	|	РегистрСведений.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|ГДЕ
	|	УпаковкиНоменклатуры.Номенклатура = &Номенклатура"; 
	АльтернативнаяФорма = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("АльтернативнаяФормаЗаказов");
	Если АльтернативнаяФорма Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УпаковкиНоменклатуры.ЕдиницаИзмерения КАК Упаковка
		|ИЗ
		|	РегистрСведений.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
		|ГДЕ
		|	УпаковкиНоменклатуры.Номенклатура = &Номенклатура
		|	И УпаковкиНоменклатуры.ЕдиницаИзмерения <> &ЕдиницаИзмерения"; 
		Запрос.УстановитьПараметр("ЕдиницаИзмерения", Номенклатура.ЕдиницаИзмерения);
	КонецЕсли;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	АльтернативнаяФорма = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("АльтернативнаяФормаЗаказов");
	ТаблицаУпаковок = Запрос.Выполнить().Выгрузить();
	ТаблицаУпаковок.Свернуть("Упаковка");
	МассивУпаковок = ТаблицаУпаковок.ВыгрузитьКолонку("Упаковка");
	МассивУпаковок.Вставить(0, Номенклатура.ЕдиницаИзмерения);
	Возврат МассивУпаковок;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеУпаковок(ТекДанные)
	
	Если ТипЗнч(ТекДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		СтруктураВозврата =ПолучитьКоличествоВУпаковкеПоУмолчаниюДляНоменклатуры(ТекДанные.Номенклатура);
		ТекДанные.КоэффициентПересчетаУпаковок = СтруктураВозврата.Коэффициент;
		ПредставлениеУпаковки = СтруктураВозврата.Упаковка;
		ПредставлениеЕдИзмерения = ТекДанные.ЕдиницаИзмерения; 
	Иначе
		ТекДанные.КоэффициентПересчетаУпаковок = ПолучитьКоэффициентПересчетаУпаковок(ТекДанные.Номенклатура, ТекДанные.ЕдиницаИзмерения);
		ПредставлениеУпаковки = ТекДанные.ЕдиницаИзмерения; 
		ПредставлениеЕдИзмерения = ПолучитьПредставлениеЕдиницыУпаковки(ТекДанные.Номенклатура,ТекДанные.ЕдиницаИзмерения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДанные.ЕдиницаИзмерения) И ЗначениеЗаполнено(ТекДанные.КоэффициентПересчетаУпаковок) Тогда
		ТекДанные.КоличествоВУпаковкеПредставление = "(" +  Строка(ТекДанные.КоэффициентПересчетаУпаковок) + " " + ПредставлениеЕдИзмерения +")";
	Иначе
		ТекДанные.КоличествоВУпаковкеПредставление = Строка(ТекДанные.КоэффициентПересчетаУпаковок);
	КонецЕсли;
	Если ТекДанные.КоэффициентПересчетаУпаковок = 0 ИЛИ ТекДанные.КоэффициентПересчетаУпаковок = 1 Тогда
		КолУпаковок = 0;
		КолЕдиниц = ТекДанные.Количество;
		ТекДанные.КоличествоУпаковокПредставление = "" + КолУпаковок + " "  + ПредставлениеУпаковки + "," +
		КолЕдиниц + " " + ПредставлениеЕдИзмерения;
	Иначе
		КолУпаковок = Цел(ТекДанные.Количество / ТекДанные.КоэффициентПересчетаУпаковок);
		КолЕдиниц = ТекДанные.Количество - (КолУпаковок * ТекДанные.КоэффициентПересчетаУпаковок);
		ТекДанные.КоличествоУпаковокПредставление = "" + КолУпаковок + " " + ПредставлениеУпаковки + ", " +
		КолЕдиниц + " " + ПредставлениеЕдИзмерения;
	КонецЕсли; 
	ТекДанные.КоличествоУпаковок = Цел(?(ТекДанные.КоэффициентПересчетаУпаковок = 0,0,ТекДанные.Количество / ТекДанные.КоэффициентПересчетаУпаковок)); 
    ТекДанные.КоличествоВУпаковке = ТекДанные.КоэффициентПересчетаУпаковок;
	
КонецПроцедуры

&НаКлиенте
Процедура РеализацияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "РеализацияКоличество" Тогда
		ТекДанные = Элемент.ТекущиеДанные;
		Если ТекДанные.НесколькоСерий Тогда
			МассивПараметрыВыбора = Новый Массив;
			НовыйПараметрДата = Новый ПараметрВыбора("ДатаОтгрузки",Объект.Дата);
			НовыйПараметрСчет = Новый ПараметрВыбора("Счет",ТекДанные.Счет);  
			НовыйПараметрСклад = Новый ПараметрВыбора("Склад",?(ЗначениеЗаполнено(ТекДанные.Склад), ТекДанные.Склад, Объект.Склад));
			НовыйПараметрПредприятие = Новый ПараметрВыбора("Предприятие",Объект.Предприятие);
			МассивПараметрыВыбора.Добавить(НовыйПараметрДата);   
			МассивПараметрыВыбора.Добавить(НовыйПараметрСчет);
			МассивПараметрыВыбора.Добавить(НовыйПараметрСклад);
			МассивПараметрыВыбора.Добавить(НовыйПараметрПредприятие);
			НовыеПараметры = Новый ФиксированныйМассив(МассивПараметрыВыбора);
			
			ТекФорма = ПолучитьФорму("Документ.УЧ_Реализация.Форма.ФормаПодбораСерий"); 
			ТекФорма.Элементы.СерииНоменклатуры.ПодчиненныеЭлементы.СерииНоменклатурыСерияНоменклатуры.ПараметрыВыбора = НовыеПараметры;
			ТекФорма.Номенклатура = ТекДанные.Номенклатура;
			ТекФорма.Количество = ТекДанные.Количество;
			ТекФорма.НомерСтрокиРеализации = ТекДанные.НомерСтроки;
			Для каждого ТекСтрока Из Объект.СерииНоменклатуры Цикл
				Если ТекСтрока.Номенклатура = ТекДанные.Номенклатура И ТекСтрока.НомерСтрокиРеализации = ТекДанные.НомерСтроки Тогда
					НоваяСтрока = ТекФорма.СерииНоменклатуры.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				КонецЕсли;
			КонецЦикла;
			ТекФорма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			Оп = Новый ОписаниеОповещения("ВыполнитьПослеОкончанияПодбора", ЭтотОбъект, Новый Структура);
			ТекФорма.ОписаниеОповещенияОЗакрытии = Оп;
			ТекФорма.Открыть();
		КонецЕсли;
	КонецЕсли;  
	
КонецПроцедуры
	
	