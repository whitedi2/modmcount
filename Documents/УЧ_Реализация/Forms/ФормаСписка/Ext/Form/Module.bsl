
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ВидОперации") Тогда
		ЭлементыДляУдаления = Новый Массив;
		
		ЭлементыОтбора = Список.Отбор.Элементы;
		ПолеКомпоновки = Новый ПолеКомпоновкиДанных("ВидОперации");
		Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
			Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
				И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки Тогда
				ЭлементыДляУдаления.Добавить(ЭлементОтбора);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ЭлементОтбораДляУдаления Из ЭлементыДляУдаления Цикл
			ЭлементыОтбора.Удалить(ЭлементОтбораДляУдаления);
		КонецЦикла;	
		
		Если Параметры.ВидОперации = "ZОтчеты" ИЛИ Параметры.ВидОперации = "ZОтчет" Тогда
			ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ВидОперации");	
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
			ЭлементОтбора.Использование  = Истина;

			ЭлементОтбора.ПравоеЗначение = Перечисления.ВидыОперацийРеализация.ZОтчет;
			Элементы.Контрагент.Видимость = Ложь;
			Элементы.Договор.Видимость = Ложь;
			Элементы.ПодразделениеВн.Видимость = Ложь;
		ИначеЕсли Параметры.ВидОперации = "РеализацияТМЦ" ИЛИ Параметры.ВидОперации = "Товары" Тогда
			ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ВидОперации");	
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
			ЭлементОтбора.Использование  = Истина;

			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.Добавить(Перечисления.ВидыОперацийРеализация.Товары);
			СписокЗначений.Добавить(Перечисления.ВидыОперацийРеализация.ПустаяСсылка());
			ЭлементОтбора.ПравоеЗначение = СписокЗначений;
		ИначеЕсли Параметры.ВидОперации = "РеализацияУслуг" ИЛИ Параметры.ВидОперации = "Услуги" Тогда
			ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ВидОперации");	
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
			ЭлементОтбора.Использование  = Истина;

			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.Добавить(Перечисления.ВидыОперацийРеализация.Услуги);
			СписокЗначений.Добавить(Перечисления.ВидыОперацийРеализация.ПустаяСсылка());
			ЭлементОтбора.ПравоеЗначение = СписокЗначений;
			
			Если Не Элементы.Найти("Автор") = Неопределено Тогда
				Колонка3 = ПолучитьКолонку(Элементы, "КолонкаСписка0", Тип("ПолеФормы"), Элементы.Список, Элементы.Автор);
				Колонка3.ПутьКДанным = "Список.СтатьиЗатратСтрока";
				Колонка3.Заголовок = "Статьи затрат";
				Колонка3.Вид = ВидПоляФормы.ПолеНадписи;
				Колонка3.Ширина = 12;
			КонецЕсли;
			
		КонецЕсли;	
	КонецЕсли;
		
	//добавляем информацию по строкам
	сабДобавитьИнформациюПоСтрокам();
	
	Элементы.Список.РежимВыбора = Параметры.РежимВыбора;
	
	//Ограничение списка команд печати
	ОграничитьСписокКомандПечатиВРеализации = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ОграничитьСписокКомандПечатиВРеализации", Истина).Значение;
	Если НЕ ОграничитьСписокКомандПечатиВРеализации = Неопределено И ОграничитьСписокКомандПечатиВРеализации Тогда
		сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "ФормаДокументУЧ_РеализацияПечатьТОРГ12", "Видимость", Ложь);
		сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "ФормаДокументУЧ_РеализацияПечатьСчетФактура", "Видимость", Ложь);
		сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "ФормаДокументУЧ_РеализацияПечатьУПД", "Видимость", Ложь);
		сабОбщегоНазначения.УстановитьСвойствоЭлемента(Элементы, "ФормаДокументУЧ_РеализацияПечатьТН", "Видимость", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКолонку(Элементы, ИмяКолонки, ТипКолонки, Владелец, ЭлементРодитель)
	Если ТипЗнч(ЭлементРодитель) = Тип("Строка") Тогда
		Если Элементы.Найти(ЭлементРодитель) = Неопределено Тогда	
			ЭлементРодитель = Неопределено;
		Иначе
			ЭлементРодитель = Элементы[ЭлементРодитель];	
		КонецЕсли;		
	КонецЕсли;
	Тк = Элементы.Найти(ИмяКолонки);
	Если Тк = Неопределено Тогда
		Тк = Элементы.Вставить(ИмяКолонки, ТипКолонки, Владелец, ЭлементРодитель);
	Иначе
		Элементы.Удалить(Тк);
		Тк = Элементы.Вставить(ИмяКолонки, ТипКолонки, Владелец, ЭлементРодитель);
	КонецЕсли;
	Возврат Тк;
	
КонецФункции // ()

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("ОбновитьИнформациюПоСтрокам",0.1,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Файл" Тогда
		Если Параметр.Свойство("ФормаВладелецУИД") И Параметр.ФормаВладелецУИД = ЭтаФорма.УникальныйИдентификатор Тогда
			сабОбщегоНазначения.ПрикрепитьФайлКДокументу(Параметр); 
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

#Область сабИнформацияПоСтрокам
&НаСервере
Процедура сабДобавитьИнформациюПоСтрокам()
	//Если Элементы.Найти("сабИнформацияПоСтрокам") = Неопределено Тогда
	//	Элементы.Добавить("сабИнформацияПоСтрокам", Тип("ПолеФормы"));
	//	Элементы["сабИнформацияПоСтрокам"].ПутьКДанным = "ИнформацияПоКоличеству";
	//	Элементы["сабИнформацияПоСтрокам"].ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	//	Элементы["сабИнформацияПоСтрокам"].ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
	//	Элементы["сабИнформацияПоСтрокам"].Вид = ВидПоляФормы.ПолеНадписи;
	//	//Элементы.ВнутреннийКонтрагент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформациюПоСтрокам()
	//ИнформацияПоКоличеству = "Всего строк: " + Строка(ПолучитьКоличествоСтрокВсего()) + " Выделено строк: " + Строка(Элементы.Список.ВыделенныеСтроки.Количество());
КонецПроцедуры

&НаСервере
Функция ПолучитьКоличествоСтрокВсего()
	//Схема = Элементы.Список.ПолучитьИсполняемуюСхемуКомпоновкиДанных();

	//Настройки = Элементы.Список.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	//
	//КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	//МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	//
	//ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	//ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	//ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	//Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	//
	//Массив = Новый Массив;
	//Массив.Добавить(Тип("Число"));
	//ТипЧисло = Новый ОписаниеТипов(Массив);
	//
	//Результат.Колонки.Добавить("НомерЧисло", ТипЧисло);
	//Для каждого ТекСтрока Из Результат Цикл
	//	ТекСтрока.НомерЧисло = ТекСтрока.Номер;
	//КонецЦикла; 
	//Возврат ?(Результат.Количество(), Результат.Итог("НомерЧисло"), 0);
	Возврат 0;
КонецФункции // ()

#КонецОбласти

&НаКлиенте
Процедура КонтрольДокументооборота(Команда)
	ОткрытьФорму("Документ.УЧ_Реализация.Форма.ФормаДокументооборота");
КонецПроцедуры


&НаКлиенте
Процедура ГрупповоеКопирование(Команда)
	ОткрытьФорму("Документ.УЧ_Реализация.Форма.ФормаГрупповогоКопирования");
КонецПроцедуры


&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
КонецПроцедуры

