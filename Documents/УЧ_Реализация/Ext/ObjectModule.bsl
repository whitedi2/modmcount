
Процедура ОбработкаПроведения(Отказ, Режим)
		
	Движения.Учетный.Записывать = Истина;
	
	РаспределятьПроводкиПоДокументамТоварооборота = Предприятие.УчетнаяПолитика.РаспределятьПроводкиПоДокументамТоварооборота;
	
	СтруктураИмен = УЧ_Сервер.СформироватьСтруктуруИмен(ЭтотОбъект);
	
	СтруктураСоответствий = УЧ_Сервер.ПоучитьСоответствияСчетовНоменклатуры(ЭтотОбъект, СтруктураИмен);
	СоответствиеСчета = СтруктураСоответствий.Соответствия;
	СоответствиеУчетаПоПодразделениям = СтруктураСоответствий.СоответствияУчетаПодразделений;
	
	СубконтоПроизвольное = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Документ", Истина);
	СубконтоКонтрагенты = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина);
	СубконтоДоговорыКонтрагентов = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Договоры", Истина);
	СчетТовары = ПланыСчетов.Учетный.Счет41();
	КонтрагентПроект = Контрагент;
	
	Если ФлагВозврат Тогда
		ЗнакВозврат = -1
	Иначе
		ЗнакВозврат = 1
	КонецЕсли;
	Если ФлагВалюты Тогда
		КурсВалюты = Курс;
	Иначе
		КурсВалюты = 1
	КонецЕсли;
	КурсСписания = 1;
	
	СтатьяФормальнаяСебестоимость = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Формальная себестоимость", Истина);;
	СтатьяВыручка = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Выручка от реализации", Истина);
	СтатьяНДС = Справочники.СтатьиЗатрат.НайтиПоНаименованию("НДС", Истина);
	
	ТаблицаОстатков = УЧ_Сервер.ПолучитьТаблицуОстатков(ЭтотОбъект, СтруктураИмен, СтруктураСоответствий);
	РезультатОстатки = ТаблицаОстатков.РезультатОстатки;
	РезультатКонтроль = ТаблицаОстатков.РезультатКонтроль;
	
	НеКонтролироватьОстатки = сабОбщегоНазначения.ПолучитьЗначениеСвойства(ПараметрыСеанса.ТекущийПользователь, "Разрешено проведение без контроля остатков");
	Если Не НеКонтролироватьОстатки = Истина Тогда
		Для каждого ТекСтрокаМинус Из РезультатКонтроль Цикл
			Отказ = Истина;
			Сообщить(?(ТекСтрокаМинус.УчетПоПодразделениям, "По Подразделению " + Строка(ТекСтрокаМинус.Подразделение) + " ", "") + "На Складе """ + Строка(ТекСтрокаМинус.Склад) + """ номенклатуры """ + Строка(ТекСтрокаМинус.Номенклатура) + " (" + Строка(ТекСтрокаМинус.Номенклатура.Код)  + ")"" из необходимых " + Строка(ТекСтрокаМинус.КоличествоНужно) + " присутствует только "  + Строка(ТекСтрокаМинус.КоличествоОстаток) );
		КонецЦикла;
	КонецЕсли;
	НалогНДС = Справочники.ВидыНалоговИПлатежейВБюджет.НайтиПоНаименованию("НДС", Истина);

	//ТаблицаСтатей = РезультатСебест.Скопировать();
	//ТаблицаСтатей.Свернуть("СитатьяЗатрат4102");
	//МассивСтатей = ТаблицаСтатей.ВыгрузитьКолонку("СитатьяЗатрат4102");
	ЕстьДоговор = СубконтоКонтрагентИДоговор(Счет);
	
	ТаблицаРозничныхПродаж = ПолучитьТаблицуРозничныхПродаж();
	
	Для Каждого ТекСтрокаРеализация Из Товары Цикл
		
		Если ТаблицаРозничныхПродаж.Количество() Тогда
			НайденныеСтрокиРозницы = ТаблицаРозничныхПродаж.НайтиСтроки(Новый Структура("Контрагент, Договор", ТекСтрокаРеализация.Контрагент, ТекСтрокаРеализация.Договор));
			Если НайденныеСтрокиРозницы.Количество() Тогда
				Продолжить; //не делаем проводок, т.к. созданы реализации по чекам
			КонецЕсли;
		КонецЕсли;
		
		//
		//Если АвтоПереводНоменклатуры И СтрокаРеал.Наименование.ПризнакНоменклатуры = "Перевод в №2" И ЗначениеЗаполнено(СтрокаРеал.Наименование.НоменклатураПервичная) Тогда
		//	ЕстьАвтоПереводНоменклатуры = Истина;
		//Иначе
			ЕстьАвтоПереводНоменклатуры = Ложь;
		//КонецЕсли;	
		
		Если ТипЗнч(ТекСтрокаРеализация.Номенклатура) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
			//выручка
			Движение = Движения.Учетный.Добавить();
			Движение.СчетДт = Счет;
			
			Если ЕстьДоговор Тогда
				Движение.СубконтоДт[СубконтоКонтрагенты] = Контрагент;
				Если Счет.УчетПоПодразделениям Тогда
					Движение.ПодразделениеДт = Подразделение;
				КонецЕсли;
				Если НЕ Счет.ВидыСубконто.Найти(СубконтоДоговорыКонтрагентов) = Неопределено Тогда
					Движение.СубконтоДт[СубконтоДоговорыКонтрагентов] = Договор;
				КонецЕсли;
				//Если НЕ Счет.ВидыСубконто.Найти(СубконтоПроизвольное) = Неопределено
				//	И УчетВРазрезеДокументов Тогда
				//	Движение.СубконтоДт[СубконтоПроизвольное] = Ссылка;
				//КонецЕсли;
			ИначеЕсли Счет.Родитель = ПланыСчетов.Учетный.Счет79() Тогда
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Предприятия", Истина)] = ?(ЗначениеЗаполнено(ПредприятиеПоставщик), ПредприятиеПоставщик, Контрагент);
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Внутренние договоры", Истина)] = ?(ЗначениеЗаполнено(ДоговорВн), ДоговорВн, Договор);
			Иначе
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт, Движение.СчетДт, 1, Контрагент);
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт, Движение.СчетДт, 2, Договор);
			КонецЕсли;
			//++сабОпер
			Если НЕ Движение.СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Документ", Истина)) = Неопределено И РаспределятьПроводкиПоДокументамТоварооборота Тогда
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт, Движение.СчетДт, 3, Ссылка);
			КонецЕсли;
			//--сабОпер

			Движение.СчетКт = ПланыСчетов.Учетный.Счет9005();
			Движение.Период = Дата;
			Движение.Предприятия = Предприятие;
			Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
			Движение.Сумма = ТекСтрокаРеализация.СуммаОтгрузки * КурсВалюты * ЗнакВозврат;
			Движение.НомерСтрокиДок = ТекСтрокаРеализация.НомерСтроки;
			Движение.Содержание = ?(Не ЕстьДоговор, "", Строка(Контрагент)) + ", Кол-во:" + ТекСтрокаРеализация.Количество + " Цена:" + ТекСтрокаРеализация.Цена + ", " + Комментарий;
			
			Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Основные средства", Истина)] = ТекСтрокаРеализация.Номенклатура;
			
			//себестоимость
			СтрукутраПоиска = Новый Структура("Субконто1, Счет, Субконто2", ТекСтрокаРеализация.Номенклатура, ПланыСчетов.Учетный.Счет01(), ТекСтрокаРеализация.Склад);
			Выборка = РезультатОстатки.НайтиСтроки(СтрукутраПоиска);
			
			Если Выборка.Количество() Тогда
				Себестоимость = ?(Выборка[0].КоличествоОстаток, Окр(Выборка[0].СуммаОстаток / Выборка[0].КоличествоОстаток, 2), 0);
			Иначе
				Себестоимость = 0;
			КонецЕсли;
			
			Движение = Движения.Учетный.Добавить();
			Движение.СчетДт = ПланыСчетов.Учетный.Счет9005();
			Движение.СчетКт = ПланыСчетов.Учетный.Счет01();
			Движение.Период = Дата;
			Движение.Предприятия = Предприятие;
			Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
			Если Движение.СчетКт.УчетПоПодразделениям Тогда
				Движение.ПодразделениеКт = Подразделение;	
			КонецЕсли;	
			Движение.Сумма = Себестоимость * ТекСтрокаРеализация.Количество * КурсСписания * ЗнакВозврат;
			Движение.КоличествоКт = ТекСтрокаРеализация.Количество * ЗнакВозврат;
			Движение.НомерСтрокиДок = ТекСтрокаРеализация.НомерСтроки;
			Движение.Содержание = ?(Не ЕстьДоговор, "", Строка(Контрагент)) + ", Кол-во:" + ТекСтрокаРеализация.Количество + " С/с:" + Строка(Формат(Себестоимость, "ЧДЦ=4"))  + ", " + Комментарий;
			Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Основные средства", Истина)] = ТекСтрокаРеализация.Номенклатура;
			Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Основные средства", Истина)] = ТекСтрокаРеализация.Номенклатура;
			Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина)] = ТекСтрокаРеализация.Склад;
			
			
		Иначе //основная продукция и товары
			
			//себестоимость
			//++сабОпер
			
			ТекКонтрагент = ?(ЗначениеЗаполнено(ТекСтрокаРеализация.Контрагент), ТекСтрокаРеализация.Контрагент, Контрагент);
			ТекДоговор = ?(ЗначениеЗаполнено(ТекСтрокаРеализация.Договор), ТекСтрокаРеализация.Договор, Договор);
			
			СчетГП = ?(ЗначениеЗаполнено(ТекСтрокаРеализация.Счет), ТекСтрокаРеализация.Счет, СоответствиеСчета.Получить(ТекСтрокаРеализация.Номенклатура));
			УчетПоподразделениямСчетУчета = СоответствиеУчетаПоПодразделениям.Получить(СчетГП);
			
			Если УчетПоподразделениямСчетУчета Тогда
				СтруктураПоиска = Новый Структура("Номенклатура, Склад, Счет, Подразделение", ТекСтрокаРеализация.Номенклатура, ТекСтрокаРеализация.Склад, СчетГП, Подразделение);
			Иначе	
				СтруктураПоиска = Новый Структура("Номенклатура, Склад, Счет", ТекСтрокаРеализация.Номенклатура, ТекСтрокаРеализация.Склад, СчетГП);
			КонецЕсли;
			ВыборкаДетальныеЗаписи = РезультатОстатки.НайтиСтроки(СтруктураПоиска);
			Если ВыборкаДетальныеЗаписи.Количество() Тогда
				Себестоимость = ?(ВыборкаДетальныеЗаписи[0].Количество = ТекСтрокаРеализация.Количество, ВыборкаДетальныеЗаписи[0].Сумма, ВыборкаДетальныеЗаписи[0].Цена*ТекСтрокаРеализация.Количество);
			Иначе
				Себестоимость = 0;
			КонецЕсли;
			
			Движение = Движения.Учетный.Добавить();
			Движение.СчетДт = ПланыСчетов.Учетный.Счет9002();
			Если Движение.СчетДт.УчетПоПодразделениям Тогда
				Движение.ПодразделениеДт = Подразделение;
			КонецЕсли;
			Движение.СчетКт = СчетГП;
			Если УчетПоподразделениямСчетУчета Тогда
				Движение.ПодразделениеКт = Подразделение;
			КонецЕсли;
			Движение.Период = Дата;
			Движение.Предприятия = Предприятие;
			Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
			Движение.Сумма = Себестоимость * КурсСписания * ЗнакВозврат;
			Движение.КоличествоКт = ТекСтрокаРеализация.Количество * ЗнакВозврат;
			Движение.НомерСтрокиДок = ТекСтрокаРеализация.НомерСтроки;
			Движение.Содержание = ?(Не ЕстьДоговор, "", Строка(ТекКонтрагент)) + ", Кол-во:" + ТекСтрокаРеализация.Количество + " С/с:" + Строка(Формат(?(ТекСтрокаРеализация.Количество = 0, 0, Себестоимость/ТекСтрокаРеализация.Количество), "ЧДЦ=4"))  + ", " + Комментарий;
			
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,1,ТекСтрокаРеализация.Номенклатура);
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,2,СтатьяФормальнаяСебестоимость);
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,3,ТекКонтрагент);
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт,1,ТекСтрокаРеализация.Номенклатура);
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт,2,ТекСтрокаРеализация.Склад);
		
			//выручка
			Движение = Движения.Учетный.Добавить();
			СчетДт = Счет;
			Движение.СчетДт = СчетДт;
			
			Если ЕстьДоговор Тогда
				Движение.СубконтоДт[СубконтоКонтрагенты] = ТекКонтрагент;
				
				Если НЕ СчетДт.ВидыСубконто.Найти(СубконтоДоговорыКонтрагентов) = Неопределено Тогда
					Движение.СубконтоДт[СубконтоДоговорыКонтрагентов] = ТекДоговор;
				КонецЕсли;
				
				Если СчетДт.УчетПоПодразделениям Тогда
					Движение.ПодразделениеДт = Подразделение;
				КонецЕсли;
			ИначеЕсли СчетДт.Родитель = ПланыСчетов.Учетный.Счет79() Тогда
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Предприятия", Истина)] = ?(ЗначениеЗаполнено(ПредприятиеПоставщик), ПредприятиеПоставщик, ТекКонтрагент);
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Внутренние договоры", Истина)] = ТекДоговор;
				Если Движение.СчетДт.УчетПоПодразделениям Тогда
					Движение.ПодразделениеДт = Подразделение;
				КонецЕсли;	
				
			Иначе
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Предприятия", Истина)] = ТекКонтрагент;
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Внутренние договоры", Истина)] = ТекДоговор;
			КонецЕсли;
			
			Если ФлагВалюты И Движение.СчетДт.Валютный И Не Валюта = Предприятие.ОсновнаяВалютаУчета Тогда
				Движение.ВалютнаяСуммаДт = ТекСтрокаРеализация.СуммаОтгрузки * ЗнакВозврат; 
				Движение.ВалютаДт = Валюта;
			КонецЕсли;

			//++сабОпер
			Если НЕ Движение.СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Документ", Истина)) = Неопределено И РаспределятьПроводкиПоДокументамТоварооборота Тогда
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт, Движение.СчетДт, 3, Ссылка);
			КонецЕсли;
			//--сабОпер
			
			Движение.СчетКт = ПланыСчетов.Учетный.Счет9001();
			Если Движение.СчетКт.УчетПоПодразделениям Тогда
				Движение.ПодразделениеКт = Подразделение;
			КонецЕсли;
			Если Движение.СчетКт.Количественный Тогда
				Движение.КоличествоКт = ТекСтрокаРеализация.Количество * ЗнакВозврат;		
			КонецЕсли;
			Движение.Период = Дата;
			Движение.Предприятия = Предприятие;
			Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
			Движение.Сумма = ?(СуммаВключаетНДС, ТекСтрокаРеализация.СуммаОтгрузки, ТекСтрокаРеализация.СуммаОтгрузки + ТекСтрокаРеализация.СуммаНДС) * КурсВалюты * ЗнакВозврат;;
			Движение.НомерСтрокиДок = ТекСтрокаРеализация.НомерСтроки;
			Движение.Содержание = ?(Не ЕстьДоговор, "", Строка(ТекКонтрагент)) + ", Кол-во:" + ТекСтрокаРеализация.Количество + " Цена:" + ТекСтрокаРеализация.Цена + ", " + Комментарий;
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт,1,ТекСтрокаРеализация.Номенклатура);
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт,2,СтатьяВыручка);
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт,3,ТекКонтрагент);
			
			Если УчитыватьНДС И ТекСтрокаРеализация.СуммаНДС Тогда
				
				Движение = Движения.Учетный.Добавить();
				
				//Если НЕ СчетГП = СчетТовары Тогда
				//	Движение.СчетДт = Счет;
				//	Если ЕстьДоговор Тогда
				//		Движение.СубконтоДт[СубконтоКонтрагенты] = ТекКонтрагент;
				//		
				//		Если НЕ СчетДт.ВидыСубконто.Найти(СубконтоДоговорыКонтрагентов) = Неопределено Тогда
				//			Движение.СубконтоДт[СубконтоДоговорыКонтрагентов] = ТекДоговор;
				//		КонецЕсли;
				//		
				//		Если СчетДт.УчетПоПодразделениям Тогда
				//			Движение.ПодразделениеДт = Подразделение;
				//		КонецЕсли;
				//	ИначеЕсли СчетДт.Родитель = ПланыСчетов.Учетный.Счет79() Тогда
				//		Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Предприятия", Истина)] = ?(ЗначениеЗаполнено(ПредприятиеПоставщик), ПредприятиеПоставщик, ТекКонтрагент);
				//		Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Внутренние договоры", Истина)] = ТекДоговор;
				//		Если Движение.СчетДт.УчетПоПодразделениям Тогда
				//			Движение.ПодразделениеДт = Подразделение;
				//		КонецЕсли;	
				//		
				//	Иначе
				//		Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Предприятия", Истина)] = ТекКонтрагент;
				//		Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Внутренние договоры", Истина)] = ТекДоговор;
				//	КонецЕсли;
				//Иначе
					Движение.СчетДт = ПланыСчетов.Учетный.Счет9003();
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт, Движение.СчетДт, 1, ТекСтрокаРеализация.Номенклатура);
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт, Движение.СчетДт, 2, СтатьяНДС);
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт, Движение.СчетДт, 3, ТекКонтрагент);
				//КонецЕсли;
				
				Если ФлагВалюты И Движение.СчетДт.Валютный И Не Валюта = Предприятие.ОсновнаяВалютаУчета Тогда
					Движение.ВалютнаяСуммаДт = ТекСтрокаРеализация.СуммаОтгрузки * ЗнакВозврат; 
					Движение.ВалютаДт = Валюта;
				КонецЕсли;
				
				//++сабОпер
				Если НЕ Движение.СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Документ", Истина)) = Неопределено И РаспределятьПроводкиПоДокументамТоварооборота Тогда
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт, Движение.СчетДт, 3, Ссылка);
				КонецЕсли;
				//--сабОпер
				
				Движение.СчетКт = ПланыСчетов.Учетный.Счет6801();
				Если Движение.СчетКт.УчетПоПодразделениям Тогда
					Движение.ПодразделениеКт = Подразделение;
				КонецЕсли;
				Если Движение.СчетКт.Количественный Тогда
					Движение.КоличествоКт = ТекСтрокаРеализация.Количество * ЗнакВозврат;
				КонецЕсли;
				Движение.Период = Дата;
				Движение.Предприятия = Предприятие;
				Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
				Движение.Сумма = ТекСтрокаРеализация.СуммаНДС;
				Движение.НомерСтрокиДок = ТекСтрокаРеализация.НомерСтроки;
				Движение.Содержание = ?(Не ЕстьДоговор, "", Строка(ТекКонтрагент)) + ", Кол-во:" + ТекСтрокаРеализация.Количество + " Цена:" + ТекСтрокаРеализация.Цена + ", " + Комментарий;
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт,1,НалогНДС);
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт,2,Организация);
			
			КонецЕсли;
			
			//возмещение транспорта
			Если ТекСтрокаРеализация.Доставка Тогда
				Движение = Движения.Учетный.Добавить();
				Движение.СчетДт = Счет;
				
				Если ЕстьДоговор Тогда
					Движение.СубконтоДт[СубконтоКонтрагенты] = Контрагент;
					Если НЕ Счет.ВидыСубконто.Найти(СубконтоДоговорыКонтрагентов) = Неопределено Тогда
						Движение.СубконтоДт[СубконтоДоговорыКонтрагентов] = Договор;
					КонецЕсли;
					Если Счет.УчетПоПодразделениям Тогда
						Движение.ПодразделениеДт = Подразделение;
					КонецЕсли;
					//Если НЕ Счет.ВидыСубконто.Найти(СубконтоПроизвольное) = Неопределено
					//	И УчетВРазрезеДокументов Тогда
					//	Движение.СубконтоДт[СубконтоПроизвольное] = Ссылка;
					//КонецЕсли;
				ИначеЕсли Счет.Родитель = ПланыСчетов.Учетный.Счет79() Тогда
					Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Предприятия", Истина)] = Контрагент;
					Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Внутренние договоры", Истина)] = Договор;
				Иначе
					Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Предприятия", Истина)] = Контрагент;
					Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Внутренние договоры", Истина)] = Договор;
				КонецЕсли;
				
				Если ФлагВалюты И Движение.СчетДт.Валютный И Не Валюта = Предприятие.ОсновнаяВалютаУчета Тогда
					Движение.ВалютнаяСуммаДт = ТекСтрокаРеализация.СуммаДоставки * ЗнакВозврат; 
					Движение.ВалютаДт = Валюта;
				КонецЕсли;
				
				Движение.СчетКт = ПланыСчетов.Учетный.Счет9003();
				Движение.ПодразделениеКт = Подразделение;
				Движение.Период = Дата;
				Движение.Предприятия = Предприятие;
				Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
				//Если ДоставкаНаЕдиницу Тогда
				Движение.Сумма = ТекСтрокаРеализация.СуммаДоставки * ЗнакВозврат;
				Движение.НомерСтрокиДок = ТекСтрокаРеализация.НомерСтроки;
				Движение.Содержание = "Возмещение доставки: " + ?(Не ЕстьДоговор, "", Строка(Контрагент)) + ", Кол-во:" + ТекСтрокаРеализация.Количество + " Доставка:" + ТекСтрокаРеализация.Доставка;
				//Иначе
				//	Движение.Сумма = ТекСтрокаРеализация.Доставка;
				//	Движение.Содержание = "Возмещение доставки: " + Строка(Контрагент) + " Доставка:" + ТекСтрокаРеализация.Доставка;
				//КонецЕсли;
				//Если Счет = ПланыСчетов.Учетный.Счет6201() Тогда
				//	Движение.СубконтоДт[СубконтоДоговорыКонтрагентов] = Договор;
				//Конецесли;					
				Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина)] = ТекСтрокаРеализация.Номенклатура;
				Если ТекСтрокаРеализация.ВидДоставки = "Авто" Тогда
					Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = Справочники.СтатьиЗатрат.ТранспортныеАвто;
				ИначеЕсли ПустаяСтрока(ТекСтрокаРеализация.ВидДоставки) Тогда
					Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = Справочники.СтатьиЗатрат.Транспортные;
				ИначеЕсли ТекСтрокаРеализация.ВидДоставки = "Жд+авто" Тогда
					Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = Справочники.СтатьиЗатрат.ТранспортныеЖД;
					
					Движение = Движения.Учетный.Добавить();
					Движение.СчетДт = Счет;
					
					Если ЕстьДоговор Тогда
						Движение.СубконтоДт[СубконтоКонтрагенты] = Контрагент;
						Если НЕ Счет.ВидыСубконто.Найти(СубконтоДоговорыКонтрагентов) = Неопределено Тогда
							Движение.СубконтоДт[СубконтоДоговорыКонтрагентов] = Договор;
						КонецЕсли;
						Если Счет.УчетПоПодразделениям Тогда
							Движение.ПодразделениеДт = Подразделение;
						КонецЕсли;
						//Если НЕ Счет.ВидыСубконто.Найти(СубконтоПроизвольное) = Неопределено
						//	И УчетВРазрезеДокументов Тогда
						//	Движение.СубконтоДт[СубконтоПроизвольное] = Ссылка;
						//КонецЕсли;
					ИначеЕсли Счет.Родитель = ПланыСчетов.Учетный.Счет79() Тогда
						Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Предприятия", Истина)] = Контрагент;
						Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Внутренние договоры", Истина)] = Договор;
					Иначе
						Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Предприятия", Истина)] = Контрагент;
						Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Внутренние договоры", Истина)] = Договор;
					КонецЕсли;
					
					Если ФлагВалюты И Движение.СчетДт.Валютный И Не Валюта = Предприятие.ОсновнаяВалютаУчета Тогда
						Движение.ВалютнаяСуммаДт = ТекСтрокаРеализация.СуммаДоставкиАвто * ЗнакВозврат; 
						Движение.ВалютаДт = Валюта;
					КонецЕсли;
					
					Движение.СчетКт = ПланыСчетов.Учетный.Счет9003();
					Движение.ПодразделениеКт = Подразделение;
					Движение.Период = Дата;
					Движение.Предприятия = Предприятие;
					Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
					//Если ДоставкаНаЕдиницу Тогда
					Движение.Сумма = ТекСтрокаРеализация.СуммаДоставкиАвто * ЗнакВозврат;
					Движение.НомерСтрокиДок = ТекСтрокаРеализация.НомерСтроки;
					Движение.Содержание = "Возмещение доставки: " + ?(Не ЕстьДоговор, "", Строка(Контрагент)) + ", Кол-во:" + ТекСтрокаРеализация.Количество + " Доставка:" + ТекСтрокаРеализация.ДоставкаАвто;
					Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = Справочники.СтатьиЗатрат.ТранспортныеАвто;
					Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина)] = ТекСтрокаРеализация.Номенклатура;
				Иначе
					Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = Справочники.СтатьиЗатрат.ТранспортныеЖД;
				КонецЕсли;
				
			КонецЕсли;
			
			//начисление транспорта
			Если НачислятьДоставку И ТекСтрокаРеализация.СуммаДоставкиНачислено Тогда
				Движение = Движения.Учетный.Добавить();
				Движение.СчетДт = ПланыСчетов.Учетный.Счет9003();
				Движение.СчетКт = ТекСтрокаРеализация.КорСчет;
				Движение.Период = Дата;
				Движение.Предприятия = Предприятие;
				Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
				Движение.ПодразделениеДт = Подразделение;
				
				Если ФлагВалюты И ТекСтрокаРеализация.КорСчет.Валютный И Не Валюта = Предприятие.ОсновнаяВалютаУчета Тогда
					Движение.ВалютнаяСуммаКт = ТекСтрокаРеализация.СуммаДоставкиНачислено * ЗнакВозврат; 
					Движение.ВалютаКт = Валюта;
				КонецЕсли;
				
				Движение.Сумма = ТекСтрокаРеализация.СуммаДоставкиНачислено * ЗнакВозврат;
				Движение.Содержание = "Кол-во: " + Строка(ТекСтрокаРеализация.Количество) + " дал, Расстояние: " + Строка(ТекСтрокаРеализация.Расстояние) + " км, Грузополучатель: " + Строка(Контрагент) + "
				|" + ТекСтрокаРеализация.Основание;
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = Справочники.СтатьиЗатрат.ТранспортныеАвто;
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина)] = ТекСтрокаРеализация.Номенклатура;
				
				Если ТекСтрокаРеализация.КорСчет.УчетПоПодразделениям Тогда
					Движение.ПодразделениеКт = Подразделение;	
				КонецЕсли;
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,ТекСтрокаРеализация.КорСчет,1,ТекСтрокаРеализация.КорСубконто1);
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,ТекСтрокаРеализация.КорСчет,2,ТекСтрокаРеализация.КорСубконто2);
				Если Не ЗначениеЗаполнено(ТекСтрокаРеализация.КорСубконто3) Тогда
					ТекСубконто3 = Справочники.Субконто.ПустаяСсылка();
				Иначе
					ТекСубконто3 = ТекСтрокаРеализация.КорСубконто3;
				КонецЕсли;
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,ТекСтрокаРеализация.КорСчет,3,ТекСубконто3);
			КонецЕсли;
			
			//начисление верха счет 76.1
			Если НачислятьВерх И ТекСтрокаРеализация.СуммаВерха Тогда
				Если ТекСтрокаРеализация.Счет76 = ПланыСчетов.Учетный.Счет7601() Тогда
					Статья903 = Справочники.СтатьиЗатрат.Верхи;
				Иначе
					Статья903 = Справочники.СтатьиЗатрат.Бонусы;
				КонецЕсли;
				Движение = Движения.Учетный.Добавить();
				Движение.СчетДт = ПланыСчетов.Учетный.Счет9003();
				Движение.СчетКт = ТекСтрокаРеализация.Счет76;
				Если ТекСтрокаРеализация.Счет76.УчетПоПодразделениям Тогда
					Движение.ПодразделениеКт = ТекСтрокаРеализация.Подразделение;	
				КонецЕсли;
				Движение.Период = Дата;
				Движение.Предприятия = Предприятие;
				Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
				Движение.ПодразделениеДт = Подразделение;
				
				Если  ВидВерха = 0 Тогда
					
					Если ФлагВалюты И Движение.СчетКт.Валютный И Не Валюта = Предприятие.ОсновнаяВалютаУчета Тогда
						Движение.ВалютнаяСуммаКт = ТекСтрокаРеализация.СуммаВерха * ТекСтрокаРеализация.Количество * ЗнакВозврат * (1 - ТекСтрокаРеализация.ПроцВерха/100); 
						Движение.ВалютаКт = Валюта;
					КонецЕсли;
					
					СуммаВерха = ТекСтрокаРеализация.СуммаВерха * ТекСтрокаРеализация.Количество * КурсВалюты * ЗнакВозврат;
				Иначе
					
					Если ФлагВалюты И Движение.СчетКт.Валютный И Не Валюта = Предприятие.ОсновнаяВалютаУчета Тогда
						Движение.ВалютнаяСуммаКт = ТекСтрокаРеализация.СуммаВерха/100 * ТекСтрокаРеализация.СуммаОтгрузки * ЗнакВозврат * (1 - ТекСтрокаРеализация.ПроцВерха/100); 
						Движение.ВалютаКт = Валюта;
					КонецЕсли;
					
					СуммаВерха = ТекСтрокаРеализация.СуммаВерха/100 * ТекСтрокаРеализация.СуммаОтгрузки * КурсВалюты * ЗнакВозврат;
				КонецЕсли;
				СуммаВерхаБезПроц = СуммаВерха * (1 - ТекСтрокаРеализация.ПроцВерха/100);
				Движение.Сумма = СуммаВерхаБезПроц;
				Движение.Содержание = "Начислен верх: " + Строка(ТекСтрокаРеализация.Верх) + ", Кол-во:" + ТекСтрокаРеализация.Количество + " Верх:" + СуммаВерхаБезПроц;
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = Статья903;
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина)] = ТекСтрокаРеализация.Номенклатура;
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ЗаявкаНаОтгрузку] = Контрагент; //добавил постоянно д1 15.06.16
				
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,ТекСтрокаРеализация.Счет76,1,ТекСтрокаРеализация.ВерхКонтрагент);
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,ТекСтрокаРеализация.Счет76,2,ТекСтрокаРеализация.Верх);		
			КонецЕсли;
			
			//начисление верха счет 76.1  (разность цен)
			Если НачислятьВерх И ТекСтрокаРеализация.ЦенаКлиента Тогда
				Если ТекСтрокаРеализация.Счет76 = ПланыСчетов.Учетный.Счет7601() Тогда
					Статья903 = Справочники.СтатьиЗатрат.Верхи;
				Иначе
					Статья903 = Справочники.СтатьиЗатрат.Бонусы;
				КонецЕсли;
				Движение = Движения.Учетный.Добавить();
				Движение.СчетДт = ПланыСчетов.Учетный.Счет9003();
				Движение.СчетКт = ТекСтрокаРеализация.Счет76;
				Если ТекСтрокаРеализация.Счет76.УчетПоПодразделениям Тогда
					Движение.ПодразделениеКт = ТекСтрокаРеализация.Подразделение;	
				КонецЕсли;
				Движение.Период = Дата;
				Движение.Предприятия = Предприятие;
				Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
				Движение.ПодразделениеДт = Подразделение;
				
				Если ФлагВалюты И Движение.СчетКт.Валютный И Не Валюта = Предприятие.ОсновнаяВалютаУчета Тогда
					Движение.ВалютнаяСуммаКт = (ТекСтрокаРеализация.Цена - ТекСтрокаРеализация.ЦенаКлиента) * ТекСтрокаРеализация.Количество * ЗнакВозврат; 
					Движение.ВалютаКт = Валюта;
				КонецЕсли;
				
				СуммаВерха = (ТекСтрокаРеализация.Цена - ТекСтрокаРеализация.ЦенаКлиента) * ТекСтрокаРеализация.Количество * КурсВалюты * ЗнакВозврат;
				Движение.Сумма = СуммаВерха;
				Движение.Содержание = "Начислен верх (разность цен): " + Строка(ТекСтрокаРеализация.Верх) + ", Кол-во:" + ТекСтрокаРеализация.Количество + " Верх:" + СуммаВерха;
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = Статья903;
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина)] = ТекСтрокаРеализация.Номенклатура;
				
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,ТекСтрокаРеализация.Счет76,1,ТекСтрокаРеализация.ВерхКонтрагент);
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,ТекСтрокаРеализация.Счет76,2,ТекСтрокаРеализация.Верх);		
			КонецЕсли;
			
		КонецЕсли;
		
		Для каждого ТекСтрокаВерха Из ПрочиеНачисления Цикл
			
			Движение = Движения.Учетный.Добавить();
			Движение.СчетДт = ПланыСчетов.Учетный.Счет9003();
			Движение.ПодразделениеДт = Подразделение;
			Движение.СчетКт = ТекСтрокаВерха.Счет;
			Если Движение.СчетКт.УчетПоПодразделениям Тогда
				Движение.ПодразделениеКт = ТекСтрокаВерха.Подразделение;
			КонецЕсли;
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт, 1, ТекСтрокаРеализация.Номенклатура);
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт, 2, ТекСтрокаВерха.СтатьяЗатрат);		
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт, 3, ТекКонтрагент);
			
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт, 1, ТекСтрокаВерха.Субконто1);
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт, 2, ТекСтрокаВерха.Субконто2);		
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт, 3, ТекСтрокаВерха.Субконто3);
			
			
			Движение.Период = Дата;
			Движение.Предприятия = Предприятие;
			Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
			
			Если ФлагВалюты И Движение.СчетКт.Валютный И Не Валюта = Предприятие.ОсновнаяВалютаУчета Тогда
				Движение.ВалютнаяСуммаКт = ?(ТекСтрокаВерха.ВидСуммы = "Сумма на единицу",ТекСтрокаВерха.Сумма * ТекСтрокаРеализация.Количество,ТекСтрокаВерха.Сумма) * ЗнакВозврат; 
				Движение.ВалютаКт = Валюта;
			КонецЕсли;
			
			Если ТекСтрокаВерха.ВидСуммы = "Сумма на единицу" Тогда
				Движение.Сумма = ТекСтрокаВерха.Сумма * ТекСтрокаРеализация.Количество * КурсВалюты * ЗнакВозврат;
				Движение.Содержание = "Начислено: " + Строка(ТекСтрокаВерха.Субконто2) + Строка(ТекСтрокаВерха.Сумма) + " на ед.";
			ИначеЕсли ТекСтрокаВерха.ВидСуммы = "% от суммы док-та" Тогда
				Движение.Сумма = (ТекСтрокаВерха.Сумма / 100) * ТекСтрокаРеализация.Сумма * КурсВалюты * ЗнакВозврат;
				Движение.Содержание = "Начислено: " + Строка(ТекСтрокаВерха.Субконто2) + " " + Строка(ТекСтрокаВерха.Сумма) + "%";
			Иначе	
				Движение.Сумма = ТекСтрокаВерха.Сумма * КурсВалюты * ЗнакВозврат;
				Движение.Содержание = "Начислено: " + Строка(ТекСтрокаВерха.Субконто2);
			КонецЕсли;
			
			Движение.НомерСтрокиДок = ТекСтрокаРеализация.НомерСтроки;
			//Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина)] = ТекСтрокаРеализация.Наименование;
			//Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = ТекСтрокаВерха.СтатьяЗатрат;
			
		КонецЦикла; 
		
		
	КонецЦикла;
	
	Для Каждого ТекСтрокаУслуг Из Услуги Цикл
		Движение = Движения.Учетный.Добавить();
		Движение.СчетДт = Счет;
		
		Если ЕстьДоговор Тогда
			Движение.СубконтоДт[СубконтоКонтрагенты] = Контрагент;
			Если Счет.УчетПоПодразделениям Тогда
				Движение.ПодразделениеДт = ?(ЗначениеЗаполнено(ТекСтрокаУслуг.Подразделение), ТекСтрокаУслуг.Подразделение, Подразделение);
			КонецЕсли;
			Если НЕ Счет.ВидыСубконто.Найти(СубконтоДоговорыКонтрагентов) = Неопределено Тогда
				Движение.СубконтоДт[СубконтоДоговорыКонтрагентов] = Договор;
			КонецЕсли;
			//Если НЕ Счет.ВидыСубконто.Найти(СубконтоПроизвольное) = Неопределено
			//	И УчетВРазрезеДокументов Тогда
			//	Движение.СубконтоДт[СубконтоПроизвольное] = Ссылка;
			//КонецЕсли;
		ИначеЕсли Счет.Родитель = ПланыСчетов.Учетный.Счет79() Тогда
			Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Предприятия", Истина)] = Контрагент;
			Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Внутренние договоры", Истина)] = Договор;
		Иначе
			Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Предприятия", Истина)] = Контрагент;
			Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Внутренние договоры", Истина)] = Договор;
		КонецЕсли;
		//++сабОпер
		Если НЕ Движение.СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Документ", Истина)) = Неопределено И РаспределятьПроводкиПоДокументамТоварооборота Тогда
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт, Движение.СчетДт, 3, Ссылка);
		КонецЕсли;
		//--сабОпер
		
		Если ФлагВалюты И Движение.СчетДт.Валютный И Не Валюта = Предприятие.ОсновнаяВалютаУчета Тогда
			Движение.ВалютнаяСуммаДт = ТекСтрокаУслуг.Сумма * ЗнакВозврат; 
			Движение.ВалютаДт = Валюта;
		КонецЕсли;
		
		Движение.СчетКт = ?(ЗначениеЗаполнено(ТекСтрокаУслуг.Счет90), ТекСтрокаУслуг.Счет90, ПланыСчетов.Учетный.Счет9001());
		УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт, 1, ТекСтрокаУслуг.Субконто1);
		УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт, 2, ТекСтрокаУслуг.Субконто2);
		УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт, 3, Контрагент);
		
		Если Движение.СчетКт.УчетПоПодразделениям Тогда
			Движение.ПодразделениеКт = ?(ЗначениеЗаполнено(Подразделение), Подразделение, ТекСтрокаУслуг.Подразделение);
		КонецЕсли;
		
		Если Движение.СчетКт.Количественный Тогда
			Движение.КоличествоКт = ТекСтрокаУслуг.Количество * ЗнакВозврат;
		КонецЕсли;	
		
		Движение.Период = Дата;
		Движение.Предприятия = Предприятие;
		Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
		Движение.Сумма = ?(СуммаВключаетНДС, ТекСтрокаУслуг.Сумма, ТекСтрокаУслуг.Сумма + ТекСтрокаУслуг.СуммаНДС) * КурсВалюты * ЗнакВозврат;;
		Движение.НомерСтрокиДок = ТекСтрокаУслуг.НомерСтроки;
		Движение.Содержание = ТекСтрокаУслуг.СодержаниеУслуги;
		
		Если УчитыватьНДС И ТекСтрокаУслуг.СуммаНДС Тогда
			Движение = Движения.Учетный.Добавить();
			Движение.СчетДт = Счет;
			
			//Если ЕстьДоговор Тогда
			//	Движение.СубконтоДт[СубконтоКонтрагенты] = Контрагент;
			//	Если Счет.УчетПоПодразделениям Тогда
			//		Движение.ПодразделениеДт = ?(ЗначениеЗаполнено(ТекСтрокаУслуг.Подразделение), ТекСтрокаУслуг.Подразделение, Подразделение);
			//	КонецЕсли;
			//	Если НЕ Счет.ВидыСубконто.Найти(СубконтоДоговорыКонтрагентов) = Неопределено Тогда
			//		Движение.СубконтоДт[СубконтоДоговорыКонтрагентов] = Договор;
			//	КонецЕсли;
			//	//Если НЕ Счет.ВидыСубконто.Найти(СубконтоПроизвольное) = Неопределено
			//	//	И УчетВРазрезеДокументов Тогда
			//	//	Движение.СубконтоДт[СубконтоПроизвольное] = Ссылка;
			//	//КонецЕсли;
			//ИначеЕсли Счет.Родитель = ПланыСчетов.Учетный.Счет79() Тогда
			//	Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Предприятия", Истина)] = Контрагент;
			//	Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Внутренние договоры", Истина)] = Договор;
			//Иначе
			//	Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Предприятия", Истина)] = Контрагент;
			//	Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Внутренние договоры", Истина)] = Договор;
			//КонецЕсли;
			
			Движение.СчетДт = ПланыСчетов.Учетный.Счет9003();
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт, Движение.СчетДт, 1, ТекСтрокаУслуг.Субконто1);
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт, Движение.СчетДт, 2, СтатьяНДС);
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт, Движение.СчетДт, 3, Контрагент);

			//++сабОпер
			Если НЕ Движение.СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Документ", Истина)) = Неопределено И РаспределятьПроводкиПоДокументамТоварооборота Тогда
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт, Движение.СчетДт, 3, Ссылка);
			КонецЕсли;
			//--сабОпер
			
			Если ФлагВалюты И Движение.СчетДт.Валютный И Не Валюта = Предприятие.ОсновнаяВалютаУчета Тогда
				Движение.ВалютнаяСуммаДт = ТекСтрокаУслуг.Сумма * ЗнакВозврат; 
				Движение.ВалютаДт = Валюта;
			КонецЕсли;
			
			Движение.СчетКт = ПланыСчетов.Учетный.Счет6801();
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт, 1, НалогНДС);
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт, 2, Организация);
			
			Если Движение.СчетКт.УчетПоПодразделениям Тогда
				Движение.ПодразделениеКт = ?(ЗначениеЗаполнено(Подразделение), Подразделение, ТекСтрокаУслуг.Подразделение);
			КонецЕсли;
			
			Движение.Период = Дата;
			Движение.Предприятия = Предприятие;
			Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
			Движение.Сумма = ТекСтрокаУслуг.СуммаНДС;
			Движение.НомерСтрокиДок = ТекСтрокаУслуг.НомерСтроки;
			Движение.Содержание = ТекСтрокаУслуг.СодержаниеУслуги;
		
		КонецЕсли;
		
		Для каждого ТекСтрокаВерха Из ПрочиеНачисления Цикл
			
			Движение = Движения.Учетный.Добавить();
			Движение.СчетДт = ПланыСчетов.Учетный.Счет9003();
			Если Движение.СчетДт.УчетПоПодразделениям Тогда
				Движение.ПодразделениеДт = Подразделение;
			КонецЕсли;
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт, 1, ТекСтрокаУслуг.Субконто1);
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт, 2, ТекСтрокаВерха.СтатьяЗатрат);		
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт, 3, Контрагент);
			
			Движение.СчетКт = ТекСтрокаВерха.Счет;
			Если Движение.СчетКт.УчетПоПодразделениям Тогда
				Движение.ПодразделениеКт = ТекСтрокаВерха.Подразделение;
			КонецЕсли;
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт, 1, ТекСтрокаВерха.Субконто1);
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт, 2, ТекСтрокаВерха.Субконто2);		
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт, 3, ТекСтрокаВерха.Субконто3);
			
			Движение.Период = Дата;
			Движение.Предприятия = Предприятие;
			Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
			
			Если ТекСтрокаВерха.ВидСуммы = "Сумма на единицу" Тогда
				Движение.Сумма = ТекСтрокаВерха.Сумма * ТекСтрокаУслуг.Количество * КурсВалюты * ЗнакВозврат;
				Движение.Содержание = "Начислено: " + Строка(ТекСтрокаВерха.Субконто2) + Строка(ТекСтрокаВерха.Сумма) + " на ед.";
			ИначеЕсли ТекСтрокаВерха.ВидСуммы = "% от суммы док-та" Тогда
				Движение.Сумма = (ТекСтрокаВерха.Сумма / 100) * ТекСтрокаУслуг.Сумма * КурсВалюты * ЗнакВозврат;
				Движение.Содержание = "Начислено: " + Строка(ТекСтрокаВерха.Субконто2) + " " + Строка(ТекСтрокаВерха.Сумма) + "%";
			Иначе	
				Движение.Сумма = ТекСтрокаВерха.Сумма * КурсВалюты * ЗнакВозврат;
				Движение.Содержание = "Начислено: " + Строка(ТекСтрокаВерха.Субконто2);
			КонецЕсли;
			
			Движение.НомерСтрокиДок = ТекСтрокаУслуг.НомерСтроки;

		КонецЦикла; 
		
	КонецЦикла;	
	
	//меняем статус заказа
	Если ЗначениеЗаполнено(ДокОснование) И ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ЗаказКлиента") И Не ДокОснование.Статус = Перечисления.СтатусыЗаказовКлиентов.Отгружен Тогда		
		ЗаказОб = ДокОснование.ПолучитьОбъект();
		ЗаказОб.Статус = Перечисления.СтатусыЗаказовКлиентов.Отгружен;
		ЗаказОб.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
		
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализация.ZОтчет") Тогда
		
		Если СуммаНаличногоРасчета Тогда
			
			ТЧКонрагенты = Товары.Выгрузить();
			ТЧКонрагенты.Свернуть("Контрагент, Договор", "СуммаОтгрузки");
			//Если ТЧКонрагенты.Количество() > 1 Тогда
			//	ТЧКонрагенты = Товары.Выгрузить();			
			//КонецЕсли;
			
			Для каждого ТекСтрока Из ТЧКонрагенты Цикл
				
				ЕстьПродажа = Ложь;
				ТекСубконто3 = Ссылка;
				Если ТаблицаРозничныхПродаж.Количество() Тогда
					НайденныеСтрокиРозницы = ТаблицаРозничныхПродаж.НайтиСтроки(Новый Структура("Контрагент, Договор", ТекСтрока.Контрагент, ТекСтрока.Договор));
					Для каждого ТекДок Из НайденныеСтрокиРозницы Цикл
						
						ТекСубконто3 = ТекДок.ДокументУУ;
						
						Движение = Движения.Учетный.Добавить();
						Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
						Движение.СчетДт = ?(ЗначениеЗаполнено(Касса), Касса.СчетУчета, ПланыСчетов.Учетный.Счет5001());
						Движение.СчетКт = ПланыСчетов.Учетный.Счет6201();
						Движение.Период = Дата;
						УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт, 1, СтатьяДДС);
						УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт, 2, Касса);
						УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт, 1, ?(ЗначениеЗаполнено(ТекСтрока.Контрагент), ТекСтрока.Контрагент, Контрагент));
						УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт, 2, ?(ЗначениеЗаполнено(ТекСтрока.Договор), ТекСтрока.Договор, Договор));
						УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт, 3, ТекСубконто3);
						Движение.Сумма = ТекДок.СуммаДокумента;
						Движение.Предприятия = Предприятие;

						ЕстьПродажа = Истина;
						
					КонецЦикла;
				КонецЕсли;
				
				Если Не ЕстьПродажа Тогда
					Движение = Движения.Учетный.Добавить();
					Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
					Движение.СчетДт = ?(ЗначениеЗаполнено(Касса), Касса.СчетУчета, ПланыСчетов.Учетный.Счет5001());
					Движение.СчетКт = ПланыСчетов.Учетный.Счет6201();
					Движение.Период = Дата;
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт, 1, СтатьяДДС);
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт, 2, Касса);
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт, 1, ?(ЗначениеЗаполнено(ТекСтрока.Контрагент), ТекСтрока.Контрагент, Контрагент));
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт, 2, ?(ЗначениеЗаполнено(ТекСтрока.Договор), ТекСтрока.Договор, Договор));
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт, 3, Ссылка);
					Движение.Сумма = ТекСтрока.СуммаОтгрузки;
					Движение.Предприятия = Предприятие;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		ТаблицаПлатежей = ОплатаПлатежнымиКартами.Выгрузить();
		ТаблицаПлатежей.Свернуть("ЭквайринговыйТерминал","Сумма");
		Для каждого СтрокаПлатежей из ТаблицаПлатежей Цикл
			Движение = Движения.Учетный.Добавить();
			Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
			Движение.СчетДт = ПланыСчетов.Учетный.НайтиПоКоду("57.03");
			Движение.СчетКт = ПланыСчетов.Учетный.Счет6201();
			Движение.Период = Дата;
			//Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Договоры", Истина)] = СтрокаПлатежей.ЭквайринговыйТерминал.ДоговорЭквайринга;
			//Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты и организации", Истина)] = СтрокаПлатежей.ЭквайринговыйТерминал.Эквайрер;
			Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Договоры", Истина)] = Договор;
			Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина)] = Контрагент;
			Движение.Сумма = СтрокаПлатежей.Сумма;
			Движение.Предприятия = Предприятие;
		КонецЦикла;
	КонецЕсли;
	
	//выносим начисления РБ
	//НачислениеРБ(ТаблицаТоваров, ЗнакВозврат, СубконтоПроизвольное, СубконтоКонтрагенты, СубконтоДоговорыКонтрагентов, СчетТовары, КонтрагентПроект, КурсВалюты);
	
	//оптимизация проведения. проверка на изменения проводок
	сабОперОбщегоНазначения.ПроверитьПроводкиНаИзменение(Движения.Учетный, ДополнительныеСвойства.КоличественныеПоказателиПроводокДляПроверки);
	
	сабОперОбщегоНазначения.РаспределитьПроводкиПоДокументамОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведенияДокумента);
	
КонецПроцедуры

Функция ПолучитьТаблицуРозничныхПродаж()
	
	Если НЕ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализация.ZОтчет") Тогда
		Возврат Новый ТаблицаЗначений;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РозничнаяПродажа.Ссылка КАК Ссылка,
	               |	РозничнаяПродажа.Контрагент КАК Контрагент,
	               |	РозничнаяПродажа.Договор КАК Договор,
	               |	РозничнаяПродажа.СуммаДокумента КАК СуммаДокумента,
	               |	сабОбработкаДокументов.ДокументУУ КАК ДокументУУ
	               |ИЗ
	               |	Документ.РозничнаяПродажа КАК РозничнаяПродажа
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.сабОбработкаДокументов КАК сабОбработкаДокументов
	               |		ПО РозничнаяПродажа.Ссылка = сабОбработкаДокументов.ДокументБУ
	               |ГДЕ
	               |	РозничнаяПродажа.ОтчетОРозничныхПродажах В
	               |			(ВЫБРАТЬ
	               |				сабОбработкаДокументов.ДокументБУ КАК ДокументБУ
	               |			ИЗ
	               |				РегистрСведений.сабОбработкаДокументов КАК сабОбработкаДокументов
	               |			ГДЕ
	               |				сабОбработкаДокументов.ДокументУУ = &ДокументУУ)
	               |	ИЛИ РозничнаяПродажа.ОтчетОРозничныхПродажах В(&ДокументУУ)";
	
	Если ДополнительныеСвойства.Свойство("ДокументБУ") И ЗначениеЗаполнено(ДополнительныеСвойства.ДокументБУ) Тогда
		Запрос.УстановитьПараметр("ДокументУУ", ДополнительныеСвойства.ДокументБУ);
	Иначе
		Запрос.УстановитьПараметр("ДокументУУ", Ссылка);
	КонецЕсли;	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();
	
	Возврат Выборка; 

КонецФункции // ()


Процедура НачислениеРБ(ТаблицаТоваров, ЗнакВозврат, СубконтоПроизвольное, СубконтоКонтрагенты, СубконтоДоговорыКонтрагентов, СчетТовары, КонтрагентПроект, КурсВалюты)

	//Водочное = Справочники.Предприятия.НайтиПоНаименованию("Водочное");
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	Предприятия.Ссылка КАК Ссылка
	//               |ИЗ
	//               |	Справочник.Предприятия КАК Предприятия
	//               |ГДЕ
	//               |	Предприятия.Родитель В ИЕРАРХИИ(&Родитель)
	//               |	И Предприятия.Ссылка = &Ссылка
	//               |	И НЕ &Родитель = ЗНАЧЕНИЕ(Справочник.Предприятия.ПустаяСсылка)";
	//
	//Запрос.УстановитьПараметр("Родитель", Водочное);
	//Запрос.УстановитьПараметр("Ссылка", Предприятие);
	//
	//Результат = Запрос.Выполнить();
	//Выборка = Результат.Выбрать();
	//
	//РассчетРетробонусов = ?(Выборка.Количество(), Истина, Ложь); 
	//
	//Если ЗначениеЗаполнено(Водочное) И РассчетРетробонусов Тогда
	//	РассчетРетробонусов = Истина;
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ВД_РетробонусыСрезПоследних.Номенклатура,
	//	|	ВД_РетробонусыСрезПоследних.Контрагент,
	//	|	ВД_РетробонусыСрезПоследних.БонусВходящий,
	//	|	ВД_РетробонусыСрезПоследних.БонусИсходящий,
	//	|	ВД_РетробонусыСрезПоследних.БонусВходящийКМ,
	//	|	ВД_РетробонусыСрезПоследних.БонусИсходящийТММ,
	//	|	ВД_РетробонусыСрезПоследних.РоялтиИсходящий,
	//	|	ВД_РетробонусыСрезПоследних.РоялтиВходящий,
	//	|	ВД_РетробонусыСрезПоследних.БонусИсходящийУсловный,
	//	|	ВД_РетробонусыСрезПоследних.Верх,
	//	|	ВД_РетробонусыСрезПоследних.Скидка,
	//	|	ВД_РетробонусыСрезПоследних.ДисконтВходящий,
	//	|	ВД_РетробонусыСрезПоследних.ВидРассчетаРБИсходящих,
	//	|	ВД_РетробонусыСрезПоследних.ВидРассчетаВерха
	//	|ПОМЕСТИТЬ ВТ_Контрагент_Договор_Номенклатура
	//	|ИЗ
	//	|	РегистрСведений.ВД_Ретробонусы.СрезПоследних(
	//	|			&Период,
	//	|			Контрагент В (&Контрагенты)
	//	|				И Номенклатура В (&Номенклатуры)
	//	|				И Договор = &Договор
	//	|				И Предприятие = &Предприятие) КАК ВД_РетробонусыСрезПоследних
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ВТ_Контрагент_Договор_Номенклатура.Номенклатура,
	//	|	ВТ_Контрагент_Договор_Номенклатура.Контрагент,
	//	|	ВТ_Контрагент_Договор_Номенклатура.БонусВходящий,
	//	|	ВТ_Контрагент_Договор_Номенклатура.БонусИсходящий,
	//	|	ВТ_Контрагент_Договор_Номенклатура.БонусИсходящийТММ,
	//	|	ВТ_Контрагент_Договор_Номенклатура.РоялтиИсходящий,
	//	|	ВТ_Контрагент_Договор_Номенклатура.РоялтиВходящий,
	//	|	ВТ_Контрагент_Договор_Номенклатура.БонусИсходящийУсловный,
	//	|	ВТ_Контрагент_Договор_Номенклатура.Верх,
	//	|	ВТ_Контрагент_Договор_Номенклатура.Скидка,
	//	|	ВТ_Контрагент_Договор_Номенклатура.ВидРассчетаРБИсходящих,
	//	|	ВТ_Контрагент_Договор_Номенклатура.ВидРассчетаВерха КАК ВидРассчетаВерха
	//	|ПОМЕСТИТЬ ВТ_КонтрагентыНоменклатура
	//	|ИЗ
	//	|	ВТ_Контрагент_Договор_Номенклатура КАК ВТ_Контрагент_Договор_Номенклатура
	//	|
	//	|ОБЪЕДИНИТЬ ВСЕ
	//	|
	//	|ВЫБРАТЬ
	//	|	ВД_РетробонусыСрезПоследних.Номенклатура,
	//	|	ВД_РетробонусыСрезПоследних.Контрагент,
	//	|	ВД_РетробонусыСрезПоследних.БонусВходящий,
	//	|	ВД_РетробонусыСрезПоследних.БонусИсходящий,
	//	|	ВД_РетробонусыСрезПоследних.БонусИсходящийТММ,
	//	|	ВД_РетробонусыСрезПоследних.РоялтиИсходящий,
	//	|	ВД_РетробонусыСрезПоследних.РоялтиВходящий,
	//	|	ВД_РетробонусыСрезПоследних.БонусИсходящийУсловный,
	//	|	ВД_РетробонусыСрезПоследних.Верх,
	//	|	ВД_РетробонусыСрезПоследних.Скидка,
	//	|	ВД_РетробонусыСрезПоследних.ВидРассчетаРБИсходящих,
	//	|	ВД_РетробонусыСрезПоследних.ВидРассчетаВерха
	//	|ИЗ
	//	|	РегистрСведений.ВД_Ретробонусы.СрезПоследних(
	//	|			&Период,
	//	|			Контрагент В (&Контрагенты)
	//	|				И Номенклатура В (&Номенклатуры)
	//	|				И Предприятие = &Предприятие) КАК ВД_РетробонусыСрезПоследних
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Контрагент_Договор_Номенклатура КАК ВТ_Контрагент_Договор_Номенклатура
	//	|		ПО (ЛОЖЬ)
	//	|ГДЕ
	//	|	НЕ ВД_РетробонусыСрезПоследних.Номенклатура В
	//	|				(ВЫБРАТЬ
	//	|					ВТ_Контрагент_Договор_Номенклатура.Номенклатура
	//	|				ИЗ
	//	|					ВТ_Контрагент_Договор_Номенклатура КАК ВТ_Контрагент_Договор_Номенклатура)
	//	|	И НЕ ВД_РетробонусыСрезПоследних.Контрагент В
	//	|				(ВЫБРАТЬ
	//	|					ВТ_Контрагент_Договор_Номенклатура.Контрагент
	//	|				ИЗ
	//	|					ВТ_Контрагент_Договор_Номенклатура КАК ВТ_Контрагент_Договор_Номенклатура)
	//	|	И ВД_РетробонусыСрезПоследних.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ВТ_КонтрагентыНоменклатура.Номенклатура,
	//	|	ВТ_КонтрагентыНоменклатура.Контрагент,
	//	|	ВТ_КонтрагентыНоменклатура.БонусВходящий,
	//	|	ВТ_КонтрагентыНоменклатура.БонусИсходящий,
	//	|	ВТ_КонтрагентыНоменклатура.БонусИсходящийТММ КАК БонусИсходящийТММ,
	//	|	ВТ_КонтрагентыНоменклатура.РоялтиИсходящий,
	//	|	ВТ_КонтрагентыНоменклатура.РоялтиВходящий,
	//	|	ВТ_КонтрагентыНоменклатура.БонусИсходящийУсловный,
	//	|	ВТ_КонтрагентыНоменклатура.Верх,
	//	|	ВТ_КонтрагентыНоменклатура.Скидка,
	//	|	ВТ_КонтрагентыНоменклатура.ВидРассчетаРБИсходящих,
	//	|	ВТ_КонтрагентыНоменклатура.ВидРассчетаВерха
	//	|ИЗ
	//	|	ВТ_КонтрагентыНоменклатура КАК ВТ_КонтрагентыНоменклатура
	//	|
	//	|ОБЪЕДИНИТЬ ВСЕ
	//	|
	//	|ВЫБРАТЬ
	//	|	ВД_РетробонусыСрезПоследних.Номенклатура,
	//	|	ВД_РетробонусыСрезПоследних.Контрагент,
	//	|	ВД_РетробонусыСрезПоследних.БонусВходящий,
	//	|	ВД_РетробонусыСрезПоследних.БонусИсходящий,
	//	|	ВД_РетробонусыСрезПоследних.БонусИсходящийТММ,
	//	|	ВД_РетробонусыСрезПоследних.РоялтиИсходящий,
	//	|	ВД_РетробонусыСрезПоследних.РоялтиВходящий,
	//	|	ВД_РетробонусыСрезПоследних.БонусИсходящийУсловный,
	//	|	ВД_РетробонусыСрезПоследних.Верх,
	//	|	ВД_РетробонусыСрезПоследних.Скидка,
	//	|	ВД_РетробонусыСрезПоследних.ВидРассчетаРБИсходящих,
	//	|	ВД_РетробонусыСрезПоследних.ВидРассчетаВерха
	//	|ИЗ
	//	|	РегистрСведений.ВД_Ретробонусы.СрезПоследних(
	//	|			&Период,
	//	|			Номенклатура В (&Номенклатуры)
	//	|				И Предприятие = &Предприятие) КАК ВД_РетробонусыСрезПоследних
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КонтрагентыНоменклатура КАК ВТ_КонтрагентыНоменклатура
	//	|		ПО (ЛОЖЬ)
	//	|ГДЕ
	//	|	НЕ ВД_РетробонусыСрезПоследних.Номенклатура В
	//	|				(ВЫБРАТЬ
	//	|					ВТ_КонтрагентыНоменклатура.Номенклатура
	//	|				ИЗ
	//	|					ВТ_КонтрагентыНоменклатура КАК ВТ_КонтрагентыНоменклатура)
	//	|	И ВД_РетробонусыСрезПоследних.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	//	|
	//	|ОБЪЕДИНИТЬ ВСЕ
	//	|
	//	|ВЫБРАТЬ
	//	|	ВД_РетробонусыСрезПоследних.Номенклатура,
	//	|	ВД_РетробонусыСрезПоследних.Контрагент,
	//	|	ВД_РетробонусыСрезПоследних.БонусВходящий,
	//	|	ВД_РетробонусыСрезПоследних.БонусИсходящий,
	//	|	ВД_РетробонусыСрезПоследних.БонусИсходящийТММ,
	//	|	ВД_РетробонусыСрезПоследних.РоялтиИсходящий,
	//	|	ВД_РетробонусыСрезПоследних.РоялтиВходящий,
	//	|	ВД_РетробонусыСрезПоследних.БонусИсходящийУсловный,
	//	|	ВД_РетробонусыСрезПоследних.Верх,
	//	|	ВД_РетробонусыСрезПоследних.Скидка,
	//	|	ВД_РетробонусыСрезПоследних.ВидРассчетаРБИсходящих,
	//	|	ВД_РетробонусыСрезПоследних.ВидРассчетаВерха
	//	|ИЗ
	//	|	РегистрСведений.ВД_Ретробонусы.СрезПоследних(
	//	|			&Период,
	//	|			Контрагент В (&Контрагенты)
	//	|				И Предприятие = &Предприятие) КАК ВД_РетробонусыСрезПоследних
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КонтрагентыНоменклатура КАК ВТ_КонтрагентыНоменклатура
	//	|		ПО (ЛОЖЬ)
	//	|ГДЕ
	//	|	НЕ ВД_РетробонусыСрезПоследних.Контрагент В
	//	|				(ВЫБРАТЬ
	//	|					ВТ_КонтрагентыНоменклатура.Контрагент
	//	|				ИЗ
	//	|					ВТ_КонтрагентыНоменклатура КАК ВТ_КонтрагентыНоменклатура)
	//	|	И ВД_РетробонусыСрезПоследних.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)";
	//	Запрос.УстановитьПараметр("Период", Дата);
	//	Запрос.УстановитьПараметр("Контрагенты", Контрагент);
	//	Запрос.УстановитьПараметр("Договор", Договор);
	//	Запрос.УстановитьПараметр("Номенклатуры", Реализация.ВыгрузитьКолонку("Наименование"));
	//	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	//	ТаблицаРетроБонусов = Запрос.Выполнить().Выгрузить();
	//	СтатьяНаценкаНаКМ = Справочники.ИздержкиОбращения.НаценкаНаКМ;
	//	СтатьяРетробонусВходящий = Справочники.ИздержкиОбращения.РетробонусВходящий;
	//	СтатьяРоялтиИсходящий = Справочники.ИздержкиОбращения.РоялтиИсходящий;
	//	СтатьяРоялтиВходящий = Справочники.ИздержкиОбращения.РоялтиВходящий;
	//	
	//	ЗапросПоУчетнойЦене = Новый Запрос;
	//	ЗапросПоУчетнойЦене.Текст = 
	//	"ВЫБРАТЬ
	//	|	ТипыЦенНоменклатурыСрезПоследних.Цена,
	//	|	ТипыЦенНоменклатурыСрезПоследних.Номенклатура
	//	|ИЗ
	//	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	//	|			&Период,
	//	|			Предприятие = &Предприятие
	//	|				И ВидЦены = &ВидЦены
	//	|				И Номенклатура В (&Номенклатура)) КАК ТипыЦенНоменклатурыСрезПоследних";
	//	ЗапросПоУчетнойЦене.УстановитьПараметр("Период", Дата);
	//	ЗапросПоУчетнойЦене.УстановитьПараметр("ВидЦены", Справочники.ВидыЦен.Учетная);
	//	ЗапросПоУчетнойЦене.УстановитьПараметр("Предприятие", Предприятие);
	//	ЗапросПоУчетнойЦене.УстановитьПараметр("Контрагент", Контрагент);
	//	ЗапросПоУчетнойЦене.УстановитьПараметр("Номенклатура", Реализация.ВыгрузитьКолонку("Наименование"));
	//	ТаблицаЦен = ЗапросПоУчетнойЦене.Выполнить().Выгрузить();
	//	
	//	ЗапросКонтрУсловия = Новый Запрос;
	//	ЗапросКонтрУсловия.Текст =
	//	"ВЫБРАТЬ
	//	|	ВД_КонтрактныеУсловияСрезПоследних.Предприятие,
	//	|	ВД_КонтрактныеУсловияСрезПоследних.Условие,
	//	|	ВД_КонтрактныеУсловияСрезПоследних.Номенклатура,
	//	|	ВД_КонтрактныеУсловияСрезПоследних.Контрагент,
	//	|	ВД_КонтрактныеУсловияСрезПоследних.Договор,
	//	|	ВД_КонтрактныеУсловияСрезПоследних.Значение,
	//	|	ВД_КонтрактныеУсловияСрезПоследних.ВидРассчетаРоялти
	//	|ИЗ
	//	|	РегистрСведений.ВД_КонтрактныеУсловия.СрезПоследних(
	//	|			&Период,
	//	|			Предприятие = &Предприятие
	//	|				И Условие = &Условие
	//	|				И Номенклатура В (&Номенклатура)
	//	|				И ВидРассчетаРоялти = ""ПоРеализации"") КАК ВД_КонтрактныеУсловияСрезПоследних";
	//	ЗапросКонтрУсловия.УстановитьПараметр("Предприятие", Предприятие);
	//	ЗапросКонтрУсловия.УстановитьПараметр("Период", Дата);
	//	ЗапросКонтрУсловия.УстановитьПараметр("Условие", Справочники.ИздержкиОбращения.РоялтиИсходящий);
	//	ЗапросКонтрУсловия.УстановитьПараметр("Номенклатура", Реализация.ВыгрузитьКолонку("Наименование"));
	//	ТаблицаКонтрактныхУсловий = ЗапросКонтрУсловия.Выполнить().Выгрузить();
	//КонецЕсли;
	//
	//
	//Для Каждого ТекСтрокаРеализация Из ТаблицаТоваров Цикл
	//	
	//	//начисление роялти исходящего
	//	Если РассчетРетробонусов Тогда
	//		НайденныеСтрокиУсловий = ТаблицаКонтрактныхУсловий.НайтиСтроки(Новый Структура("Номенклатура", ТекСтрокаРеализация.Наименование));
	//		Если НайденныеСтрокиУсловий.Количество() > 0 Тогда
	//			СуммаРоялти = НайденныеСтрокиУсловий[0].Значение;
	//			Если СуммаРоялти <> 0 Тогда
	//				Движение = Движения.Учетный.Добавить();
	//				Движение.Период = Дата;
	//				Движение.СценарийПлана = Справочники.СценарииПланирования.Факт;
	//				Движение.Предприятия = Предприятие;
	//				
	//				Движение.СчетДт = ПланыСчетов.Учетный.Счет9003();
	//				Если Движение.СчетДт.УчетПоПодразделениям Тогда
	//					Движение.ПодразделениеДт = Подразделение;
	//				КонецЕсли;
	//				
	//				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина)] = ТекСтрокаРеализация.Наименование;
	//				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = Справочники.ИздержкиОбращения.РоялтиИсходящий;
	//				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ЗаявкаНаОтгрузку] = НайденныеСтрокиУсловий[0].Контрагент;
	//				
	//				Движение.СчетКт = ПланыСчетов.Учетный._76_15;
	//				Если Движение.СчетКт.УчетПоПодразделениям Тогда
	//					Движение.ПодразделениеКт = Подразделение;
	//				КонецЕсли;
	//				Движение.СубконтоКт[СубконтоКонтрагенты] = НайденныеСтрокиУсловий[0].Контрагент;
	//				Движение.СубконтоКт[СубконтоДоговорыКонтрагентов] = НайденныеСтрокиУсловий[0].Договор;
	//				Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = Справочники.ИздержкиОбращения.РоялтиИсходящий;
	//				
	//				Движение.Сумма = СуммаРоялти * КурсВалюты * ЗнакВозврат * ТекСтрокаРеализация.Количество;
	//				Движение.Содержание = "Роялти исходящий: " + СуммаРоялти;
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//	//начисление дисконта
	//	ЦеныНоменклатуры = ТаблицаЦен.НайтиСтроки(Новый Структура("Номенклатура",  ТекСтрокаРеализация.Наименование));
	//	Если ЦеныНоменклатуры.Количество() <> 0 Тогда
	//		Движение = Движения.Учетный.Добавить();
	//		Движение.СчетКт = Счет;
	//		
	//		Если НЕ Движение.СчетКт.ВидыСубконто.Найти(СубконтоКонтрагенты) = Неопределено Тогда
	//			Движение.СубконтоКт[СубконтоКонтрагенты] = Контрагент;
	//		КонецЕсли;	
	//		Если НЕ Движение.СчетКт.ВидыСубконто.Найти(СубконтоДоговорыКонтрагентов) = Неопределено Тогда
	//			Движение.СубконтоКт[СубконтоДоговорыКонтрагентов] = Договор;
	//		КонецЕсли;	
	//		Если НЕ Движение.СчетКт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Предприятия", Истина)) = Неопределено Тогда
	//			Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Предприятия", Истина)] = Контрагент;
	//		КонецЕсли;
	//		Если НЕ Движение.СчетКт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Внутренние договоры", Истина)) = Неопределено Тогда
	//			Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Внутренние договоры", Истина)] = НайтиВнутреннийДоговор("Дисконт");
	//		КонецЕсли;	
	//		//Если ФлагВалюты Тогда
	//		//	Движение.ВалютнаяСуммаКт = ТекСтрокаРеализация.СуммаОтгрузки * ЗнакВозврат; 
	//		//	Движение.ВалютаКт = Валюта;
	//		//КонецЕсли;
	//		
	//		Движение.СчетДт = ПланыСчетов.Учетный.Счет9001();
	//		Движение.ПодразделениеДт = Подразделение;
	//		Движение.Период = Дата;
	//		Движение.Предприятия = Предприятие;
	//		Движение.СценарийПлана = Справочники.СценарииПланирования.Факт;
	//		
	//		Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина)] = ТекСтрокаРеализация.Наименование;
	//		Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = Справочники.ИздержкиОбращения.НайтиПоНаименованию("Дисконт", Истина);
	//		Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ЗаявкаНаОтгрузку] = Контрагент;
	//		
	//		//Движение.КоличествоДт = ТекСтрокаРеализация.Количество;
	//		Движение.Сумма = ТекСтрокаРеализация.СуммаОтгрузки * КурсВалюты * ЗнакВозврат - ЦеныНоменклатуры[0].Цена * ТекСтрокаРеализация.Количество;
	//		
	//		Движение.НомерСтрокиДок = ТекСтрокаРеализация.НомерСтроки;
	//		Движение.Содержание = "Дисконт";
	//	КонецЕсли;
	//	
	//	Если РассчетРетробонусов Тогда
	//		Если ТекСтрокаРеализация.Тип = "Комплектующие" Тогда
	//			Движение = Движения.Учетный.Добавить();
	//			Движение.СчетДт = ПланыСчетов.Учетный._62_30;
	//			Если Движение.СчетДт.УчетПоПодразделениям Тогда 
	//				Движение.ПодразделениеДт = Подразделение;
	//			КонецЕсли;
	//			Движение.СчетКт = ПланыСчетов.Учетный._98_02;
	//			Если СчетГП.УчетПоПодразделениям Тогда
	//				Движение.ПодразделениеКт = Подразделение;
	//			КонецЕсли;
	//			Движение.Период = Дата;
	//			Движение.Предприятия = Предприятие;
	//			Движение.СценарийПлана = Справочники.СценарииПланирования.Факт;
	//			Движение.Сумма = (ТекСтрокаРеализация.СуммаОтгрузки * КурсВалюты * ЗнакВозврат) - (Себестоимость * ТекСтрокаРеализация.Количество * КурсСписания * ЗнакВозврат);
	//			//Движение.КоличествоКт = ТекСтрокаРеализация.Количество * ЗнакВозврат;
	//			Движение.Содержание = "Наценка на КМ";
	//			Движение.СубконтоДт[СубконтоКонтрагенты] = Контрагент;
	//			Движение.СубконтоДт[СубконтоДоговорыКонтрагентов] = Договор;
	//			Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = СтатьяНаценкаНаКМ;
	//			
	//			СтатьяОтложенныйДоход = Справочники.РасходыПериодов.НайтиПоНаименованию("Отложенный доход", Истина);
	//			Движение.СубконтоКт[СубконтоКонтрагенты] = Контрагент;
	//			Движение.СубконтоКт[СубконтоДоговорыКонтрагентов] = Договор;
	//		Иначе	
	//			НайденныеСтрокиРетроБонусов = ТаблицаРетроБонусов.НайтиСтроки(Новый Структура("Контрагент, Номенклатура", Контрагент, ТекСтрокаРеализация.Наименование));
	//			Если НайденныеСтрокиРетроБонусов.Количество() = 0 Тогда
	//				НайденныеСтрокиРетроБонусов = ТаблицаРетроБонусов.НайтиСтроки(Новый Структура("Контрагент, Номенклатура", Контрагент, Справочники.Номенклатура.ПустаяСсылка()));
	//			КонецЕсли;	
	//			Если НайденныеСтрокиРетроБонусов.Количество() = 0 Тогда
	//				Сообщить("Для номенклатуры: " + ТекСтрокаРеализация.Наименование + " не указана ставка ретробонусов. Расчет по ретробонусам произведен не будет!");
	//			Иначе 
	//				ПроцентРетробонуса = НайденныеСтрокиРетроБонусов[0].БонусИсходящий;
	//				ВидРассчетаРБИсходящих = НайденныеСтрокиРетроБонусов[0].ВидРассчетаРБИсходящих;
	//				Если ВидРассчетаРБИсходящих = "руб" Тогда
	//					ТекСуммаРетроИсх = (ТекСтрокаРеализация.Количество * КурсВалюты * ЗнакВозврат) * ПроцентРетробонуса;
	//				Иначе	
	//					ТекСуммаРетроИсх = (ТекСтрокаРеализация.СуммаОтгрузки * КурсВалюты * ЗнакВозврат) * ПроцентРетробонуса / 100;
	//				КонецЕсли;	
	//				Если Не ТекСуммаРетроИсх = 0 И Не НеНачислятьКомУсловия Тогда
	//					Движение = Движения.Учетный.Добавить();
	//					Движение.СчетДт = ПланыСчетов.Учетный.Счет9003();
	//					Если Движение.СчетДт.УчетПоПодразделениям Тогда 
	//						Движение.ПодразделениеДт = Подразделение;
	//					КонецЕсли;
	//					Движение.СчетКт = ПланыСчетов.Учетный.Счет7601();
	//					Если Движение.СчетКт.УчетПоПодразделениям Тогда
	//						Движение.ПодразделениеКт = Подразделение;
	//					КонецЕсли;
	//					Движение.Период = Дата;
	//					Движение.Предприятия = Предприятие;
	//					Движение.СценарийПлана = Справочники.СценарииПланирования.Факт;
	//					Движение.Сумма = ТекСуммаРетроИсх;
	//					//Движение.КоличествоКт = ТекСтрокаРеализация.Количество * ЗнакВозврат;
	//					Движение.Содержание = "Ретробонусы";
	//					Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина)] = ТекСтрокаРеализация.Наименование;
	//					Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = Справочники.ИздержкиОбращения.РетробонусИсходящий;
	//					Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ЗаявкаНаОтгрузку] = Контрагент;
	//					Движение.СубконтоКт[СубконтоКонтрагенты] = Контрагент;
	//					Если НЕ СчетДт.ВидыСубконто.Найти(СубконтоПроизвольное) = Неопределено
	//						И УчетВРазрезеДокументов Тогда
	//						Движение.СубконтоКт[СубконтоПроизвольное] = Ссылка;
	//					КонецЕсли;
	//				КонецЕсли;
	//				
	//				ПроцентРетробонуса = НайденныеСтрокиРетроБонусов[0].БонусИсходящийТММ;
	//				ТекСуммаТММ = (ТекСтрокаРеализация.СуммаОтгрузки * КурсВалюты * ЗнакВозврат) * ПроцентРетробонуса / 100;
	//				Если Не ТекСуммаТММ = 0  И Не НеНачислятьКомУсловия Тогда
	//					Движение = Движения.Учетный.Добавить();
	//					Движение.СчетДт = ПланыСчетов.Учетный.Счет9003();
	//					Если Движение.СчетДт.УчетПоПодразделениям Тогда 
	//						Движение.ПодразделениеДт = Подразделение;
	//					КонецЕсли;
	//					Движение.СчетКт = ПланыСчетов.Учетный._76_14;
	//					Если Движение.СчетКт.УчетПоПодразделениям Тогда
	//						Движение.ПодразделениеКт = Подразделение;
	//					КонецЕсли;
	//					Движение.Период = Дата;
	//					Движение.Предприятия = Предприятие;
	//					Движение.СценарийПлана = Справочники.СценарииПланирования.Факт;
	//					Движение.Сумма = ТекСуммаТММ;
	//					//Движение.КоличествоКт = ТекСтрокаРеализация.Количество * ЗнакВозврат;
	//					Движение.Содержание = "Фонд ТММ";
	//					Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина)] = ТекСтрокаРеализация.Наименование;
	//					Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = Справочники.ИздержкиОбращения.ТрейдМенеджментИМаркетинг;
	//					Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ЗаявкаНаОтгрузку] = Контрагент;
	//					//ФондТММ = Справочники.Фонды.НайтиПоНаименованию("Фонд ТММ");
	//					Движение.СубконтоКт[СубконтоКонтрагенты] = Контрагент;
	//					//Движение.СубконтоКт[СубконтоДоговорыКонтрагентов] = НайтиДоговорКонтрагента(Контрагент, "Фонд ТММ");
	//					//Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Фонды] = ФондТММ;
	//				КонецЕсли;
	//				
	//				ПроцентРетробонуса = НайденныеСтрокиРетроБонусов[0].Скидка;
	//				ТекСуммаСкидки = (?(СуммаВключаетНДС, 1, 1 + ТекСтрокаРеализация.СтавкаНДС.Ставка/100) * (ТекСтрокаРеализация.Цена * КурсВалюты * ТекСтрокаРеализация.Количество)) * ПроцентРетробонуса / 100;
	//				Если Не ТекСуммаСкидки = 0 Тогда
	//					Движение = Движения.Учетный.Добавить();
	//					Движение.СчетДт = ПланыСчетов.Учетный.Счет9003();
	//					Если Движение.СчетДт.УчетПоПодразделениям Тогда 
	//						Движение.ПодразделениеДт = Подразделение;
	//					КонецЕсли;
	//					Движение.СчетКт = ПланыСчетов.Учетный._76_14;
	//					Если Движение.СчетКт.УчетПоПодразделениям Тогда
	//						Движение.ПодразделениеКт = Подразделение;
	//					КонецЕсли;
	//					Движение.Период = Дата;
	//					Движение.Предприятия = Предприятие;
	//					Движение.СценарийПлана = Справочники.СценарииПланирования.Факт;
	//					Движение.Сумма = ТекСуммаСкидки;
	//					Движение.Содержание = "Скидка";
	//					Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина)] = ТекСтрокаРеализация.Наименование;
	//					Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = Справочники.ИздержкиОбращения.Скидка;
	//					Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ЗаявкаНаОтгрузку] = Контрагент;
	//					Движение.СубконтоКт[СубконтоКонтрагенты] = Контрагент;
	//					Движение.СубконтоКт[СубконтоДоговорыКонтрагентов] = Договор;
	//				КонецЕсли;		
	//				
	//				ПроцентРетробонуса = НайденныеСтрокиРетроБонусов[0].БонусИсходящийУсловный;
	//				ТекСуммаРетроУсл = (ТекСтрокаРеализация.СуммаОтгрузки * КурсВалюты * ЗнакВозврат) * ПроцентРетробонуса / 100;
	//				Если Не ТекСуммаРетроУсл = 0  И Не НеНачислятьКомУсловия Тогда
	//					Движение = Движения.Учетный.Добавить();
	//					Движение.СчетДт = ПланыСчетов.Учетный.Счет9003();
	//					Если Движение.СчетДт.УчетПоПодразделениям Тогда 
	//						Движение.ПодразделениеДт = Подразделение;
	//					КонецЕсли;
	//					Движение.СчетКт = ПланыСчетов.Учетный.Счет7601();
	//					Если Движение.СчетКт.УчетПоПодразделениям Тогда
	//						Движение.ПодразделениеКт = Подразделение;
	//					КонецЕсли;
	//					Движение.Период = Дата;
	//					Движение.Предприятия = Предприятие;
	//					Движение.СценарийПлана = Справочники.СценарииПланирования.Факт;
	//					Движение.Сумма = ТекСуммаРетроУсл;
	//					Движение.Содержание = "Ретробонус условный";
	//					Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина)] = ТекСтрокаРеализация.Наименование;
	//					Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = Справочники.ИздержкиОбращения.РетробонусИсходящийУсловный;
	//					Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ЗаявкаНаОтгрузку] = Контрагент;
	//					Движение.СубконтоКт[СубконтоКонтрагенты] = Контрагент;
	//					Если НЕ Движение.СчетКт.ВидыСубконто.Найти(СубконтоПроизвольное) = Неопределено
	//						И УчетВРазрезеДокументов Тогда
	//						Движение.СубконтоКт[СубконтоПроизвольное] = Ссылка;
	//					КонецЕсли;
	//				КонецЕсли;
	//				
	//				ТекВерх = НайденныеСтрокиРетроБонусов[0].Верх;
	//				Если НайденныеСтрокиРетроБонусов[0].ВидРассчетаВерха = "%" Тогда
	//					ТекСуммаВерха = (ТекСтрокаРеализация.СуммаОтгрузки * КурсВалюты * ЗнакВозврат) * ТекВерх / 100;
	//				Иначе	
	//					ТекСуммаВерха = ТекСтрокаРеализация.Количество * КурсВалюты * ЗнакВозврат * ТекВерх;
	//				КонецЕсли;
	//				Если Не ТекСуммаВерха = 0 Тогда
	//					Движение = Движения.Учетный.Добавить();
	//					Движение.СчетДт = ПланыСчетов.Учетный.Счет9003();
	//					Если Движение.СчетДт.УчетПоПодразделениям Тогда 
	//						Движение.ПодразделениеДт = Подразделение;
	//					КонецЕсли;
	//					Движение.СчетКт = ПланыСчетов.Учетный.Счет7601();
	//					Если Движение.СчетКт.УчетПоПодразделениям Тогда
	//						Движение.ПодразделениеКт = Подразделение;
	//					КонецЕсли;
	//					Движение.Период = Дата;
	//					Движение.Предприятия = Предприятие;
	//					Движение.СценарийПлана = Справочники.СценарииПланирования.Факт;
	//					Движение.Сумма = ТекСуммаВерха;
	//					Движение.Содержание = "Верх";
	//					Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина)] = ТекСтрокаРеализация.Наименование;
	//					Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = Справочники.ИздержкиОбращения.НайтиПоНаименованию("Верхи", Истина);
	//					Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.ЗаявкаНаОтгрузку] = Контрагент;
	//					Движение.СубконтоКт[СубконтоКонтрагенты] = Контрагент;
	//					Движение.СубконтоКт[СубконтоДоговорыКонтрагентов] = ПолучитьВерхПоНоменклатуре(ТекСтрокаРеализация.Наименование, Контрагент);
	//					Если НЕ Движение.СчетКт.ВидыСубконто.Найти(СубконтоПроизвольное) = Неопределено
	//						И УчетВРазрезеДокументов Тогда
	//						Движение.СубконтоКт[СубконтоПроизвольное] = Ссылка;
	//					КонецЕсли;
	//				КонецЕсли;
	//			КонецЕсли;
	//			
	//			//Списание скидки из фонда
	//			СуммаБезСкидки = ?(СуммаВключаетНДС, 1, 1 + ТекСтрокаРеализация.СтавкаНДС.Ставка/100) * (ТекСтрокаРеализация.Цена * КурсВалюты * ТекСтрокаРеализация.Количество);
	//			Если СуммаБезСкидки > ТекСтрокаРеализация.СуммаОтгрузки Тогда
	//				ТекСкидка = СуммаБезСкидки - ТекСтрокаРеализация.СуммаОтгрузки;
	//				Если ТекСкидка > 0.02 Или ТекСкидка < - 0.02 Тогда  //на случай не правильного округления по НДС
	//					Движение = Движения.Учетный.Добавить();
	//					Движение.СчетДт = ПланыСчетов.Учетный._97_02;
	//					Если Движение.СчетДт.УчетПоПодразделениям Тогда 
	//						Движение.ПодразделениеДт = Подразделение;
	//					КонецЕсли;
	//					Движение.СчетКт = ПланыСчетов.Учетный.Счет9001();
	//					Если Движение.СчетКт.УчетПоПодразделениям Тогда
	//						Движение.ПодразделениеКт = Подразделение;
	//					КонецЕсли;
	//					Движение.Период = Дата;
	//					Движение.Предприятия = Предприятие;
	//					Движение.СценарийПлана = Справочники.СценарииПланирования.Факт;
	//					Движение.Сумма = ТекСкидка;
	//					Движение.Содержание = "Восстановление до брутто выручки";
	//					Движение.СубконтоДт[СубконтоКонтрагенты] = Контрагент;
	//					Движение.СубконтоДт[СубконтоДоговорыКонтрагентов] = НайтиДоговорКонтрагента(Контрагент, "", Истина);
	//					Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = Справочники.ИздержкиОбращения.Скидка;
	//					Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина)] = ТекСтрокаРеализация.Наименование;
	//					Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = Справочники.ИздержкиОбращения.НайтиПоНаименованию("Восстановление до брутто выручки", Истина);
	//					Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.ЗаявкаНаОтгрузку] = Контрагент;
	//				КонецЕсли;	
	//			КонецЕсли;
	//		КонецЕсли;
	//		
	//	КонецЕсли;

	//КонецЦикла;
	

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	//пересчитываем сумму отгрузки и доставки
	//Для каждого ТекСтрока Из Реализация Цикл
	//	Если НЕ Окр(ТекСтрока.СуммаОтгрузки, -3) = Окр(ТекСтрока.Количество * ТекСтрока.Цена, -3) Тогда
	//		ТекСтрока.СуммаОтгрузки = ТекСтрока.Количество * ТекСтрока.Цена;		
	//	КонецЕсли;
	//	Если НЕ ТекСтрока.СуммаДоставки Тогда
	//		Если ДоставкаНаЕдиницу Тогда
	//			ТекСтрока.СуммаДоставки = ТекСтрока.Количество * ТекСтрока.Доставка;	
	//		Иначе
	//			ТекСтрока.СуммаДоставки = ТекСтрока.Доставка;			
	//			ТекСтрока.Доставка = ?(ТекСтрока.Количество, ТекСтрока.СуммаДоставки / ТекСтрока.Количество, ТекСтрока.Доставка); 
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//
	//КонецЦикла;
	
	Для каждого ТекСтрока Из Товары Цикл
		Если ТипЗнч(ТекСтрока.Номенклатура) = Тип("СправочникСсылка.Номенклатура") И Не ЗначениеЗаполнено(ТекСтрока.Счет) Тогда
			ТекСтрока.Счет = ТекСтрока.Номенклатура.Счет10;		
		КонецЕсли;
	КонецЦикла; 
	
	
	ДоставкаНаЕдиницу = Истина;
	СуммаИтог = Товары.Итог("СуммаОтгрузки") + Услуги.Итог("СуммаОтгрузки");
	СуммаНДСИтог = Товары.Итог("СуммаНДС") + Услуги.Итог("СуммаНДС");
	СуммаДокумента = Товары.Итог("СуммаОтгрузки") + Услуги.Итог("СуммаОтгрузки");
	
	//Заполнить данные СФ по данным документа, если они не заполнены
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		//ДополнительныеСвойства.Вставить("Проведение", Истина);
		Если Не ЗначениеЗаполнено(ДатаСчетФактуры) Тогда
			ДатаСчетФактуры = Дата;
		КонецЕсли;
		
		//Если Не ЗначениеЗаполнено(НомерСчетФактуры) Тогда
		//	НомерСчетФактуры = Номер;
		//КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Склад) Тогда
		
		Для каждого ТекСтрока Из Товары Цикл
			ТекСтрока.Склад = Склад;
		КонецЦикла; 
		
	КонецЕсли;
	
	Если Контрагент = Справочники.Контрагенты.НайтиПоНаименованию("ЧАСТНОЕ ЛИЦО") И Не ЗначениеЗаполнено(Договор) Тогда
		Договор = Справочники.ДоговорыКонтрагентов.НайтиПоНаименованию("Основной",,,Контрагент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЮрЛицо) И Не ЗначениеЗаполнено(Организация) Тогда
		Организация = ЮрЛицо
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("КоличественныеПоказателиПроводокДляПроверки", сабОперОбщегоНазначения.ПолучитьКоличественныеПоказателиПроводок(Ссылка));	
	
	Если Не ЗначениеЗаполнено(СуммаНаличногоРасчета) Тогда
		СуммаНаличногоРасчета = Товары.Итог("СуммаОтгрузки") - ОплатаПлатежнымиКартами.Итог("Сумма");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Валюта) И Не Валюта = Предприятие.ОсновнаяВалютаУчета Тогда
		ФлагВалюты = Истина;
		
		Если ДатыНеСовпадают Тогда
			ДатаКурса = ДатаОтгрузки
		иначе
			ДатаКурса = Дата
		КонецЕсли;
		
		КурсНаДатуРеализации = УЧ_Сервер.ПолучитьКурсВалют(Валюта, Предприятие.ОсновнаяВалютаУчета, ДатаКурса, Истина);
		
		Если Не ЗначениеЗаполнено(Курс) Или Не Курс = КурсНаДатуРеализации Тогда		
			Курс = КурсНаДатуРеализации;
		КонецЕсли;
		
	Иначе
		Курс = 1;
	КонецЕсли;
	
	//из подписки на событие
	БюджетныйНаСервере.ДокументыПередЗаписьюПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ДокументОснование = "";
	ФлагВалюты = "";
	Валюта = "";
	Курс = "";
	ДокОснование = "";
	
КонецПроцедуры

Функция НайтиКонтрагентаПоПредприятиюВНХ(ТекПредприятие)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ПредприятиеХодлинга = &ПредприятиеХодлинга
	|	И НЕ Контрагенты.ПометкаУдаления";
	Запрос.УстановитьПараметр("ПредприятиеХодлинга", ТекПредприятие);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;	
	
	Возврат Справочники.Контрагенты.ПустаяСсылка();
	
КонецФункции	

Функция ПолучитьВнутреннийДоговор(ТекПредприятиеВн, ТекПредприятие)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВнутренниеДоговоры.Ссылка
	|ИЗ
	|	Справочник.ВнутренниеДоговоры КАК ВнутренниеДоговоры
	|ГДЕ
	|	ВнутренниеДоговоры.Владелец = &Владелец
	|	И ВнутренниеДоговоры.Предприятие = &Предприятие
	|	И НЕ ВнутренниеДоговоры.ПометкаУдаления";
	Запрос.УстановитьПараметр("Владелец", ТекПредприятиеВн);
	Запрос.УстановитьПараметр("Предприятие", ТекПредприятие);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;	
	
	Возврат Справочники.ВнутренниеДоговоры.ПустаяСсылка();
	
КонецФункции	

Функция СубконтоКонтрагентИДоговор(Счет)
	
	Возврат Счет.Родитель = ПланыСчетов.Учетный.Счет62() ИЛИ Счет = ПланыСчетов.Учетный.Счет7601() ИЛИ Счет = ПланыСчетов.Учетный._62_30;
	
КонецФункции

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	//ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	//Движения.Записать();
	
КонецПроцедуры

Функция ПолучитьВерхПоНоменклатуре(ТекНоменклатура, ТекКонтрагент)
	
	ТекНаименование = "Верх " + ТекНоменклатура.Родитель.Номенклатура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВерхиКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ВерхиКонтрагентов
	|ГДЕ
	|	ВерхиКонтрагентов.Владелец = &Владелец
	|	И ВерхиКонтрагентов.Номенклатура = &Номенклатура
	|	И ВерхиКонтрагентов.Предприятие = &Предприятие";
	Запрос.УстановитьПараметр("Владелец", ТекКонтрагент);
	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	Запрос.УстановитьПараметр("Номенклатура", ТекНаименование);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ТекЭлемент = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		ТекЭлемент.Владелец = ТекКонтрагент;
		ТекЭлемент.Наименование = ТекНаименование;
		ТекЭлемент.Предприятие = Предприятие;
		ТекЭлемент.Записать();
		Возврат ТекЭлемент.Ссылка;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Ссылка;
		КонецЦикла;
	КонецЕсли;	
	
КонецФункции	

Функция НайтиВнутреннийДоговор(НаименованиеДог)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВнутренниеДоговоры.Ссылка
	|ИЗ
	|	Справочник.ВнутренниеДоговоры КАК ВнутренниеДоговоры
	|ГДЕ
	|	ВнутренниеДоговоры.Владелец = &Владелец
	|	И ВнутренниеДоговоры.Номенклатура = &Номенклатура
	|	И ВнутренниеДоговоры.Предприятие = &Предприятие";
	Запрос.УстановитьПараметр("Номенклатура", НаименованиеДог);
	Запрос.УстановитьПараметр("Владелец", Контрагент);
	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		НовОбъект = Справочники.ВнутренниеДоговоры.СоздатьЭлемент();
		НовОбъект.Наименование = НаименованиеДог;
		НовОбъект.Предприятие = Предприятие;
		НовОбъект.Владелец = Контрагент;
		НовОбъект.Записать();
		Возврат НовОбъект.Ссылка;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Ссылка;
		КонецЦикла;
	КонецЕсли;	
	
КонецФункции

Функция НайтиДоговорКонтрагента(ТекКонтрагент, ТекНаименование, ДоговорСкидки = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	(&ДоговорСкидки
	|			ИЛИ ДоговорыКонтрагентов.Номенклатура = &Номенклатура)
	|	И ДоговорыКонтрагентов.Владелец = &Владелец
	|	И ВЫБОР
	|			КОГДА &ДоговорСкидки
	|				ТОГДА ДоговорыКонтрагентов.Номенклатура ПОДОБНО ""%Скидка%""
	|						И ДоговорыКонтрагентов.ДатаДоговора <= &ДатаДокумента
	|						И &ДатаДокумента <= ДоговорыКонтрагентов.ДатаОкончанияДоговора
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	Запрос.УстановитьПараметр("Номенклатура", ТекНаименование);
	Запрос.УстановитьПараметр("Владелец", ТекКонтрагент);
	Запрос.УстановитьПараметр("ДоговорСкидки", ДоговорСкидки);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Если ДоговорСкидки Тогда
			Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Иначе	
			ТекДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			ТекДоговор.Наименование = ТекНаименование;
			ТекДоговор.Владелец = ТекКонтрагент;
			ТекДоговор.Записать();
			Возврат ТекДоговор.Ссылка;
		КонецЕсли;
	КонецЕсли;	
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;		
	КонецЦикла;	
		
КонецФункции

Функция СчетаДляРаспределения() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Учетный.Ссылка КАК Ссылка
	               |ИЗ
	               |	ПланСчетов.Учетный КАК Учетный
	               |ГДЕ
	               |	Учетный.ВидыСубконто.ВидСубконто = &ВидСубконто
	               |	И Учетный.ЗапретитьИспользоватьВПроводках = ЛОЖЬ
	               |	И Учетный.Ссылка В(&Счета)";
	
	Запрос.УстановитьПараметр("Счета", Счет);
	Запрос.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Документ", Истина));
	
	Результат = Запрос.Выполнить();
	Счета = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Субконто1Массив = Новый Массив;
	Субконто2Массив = Новый Массив;
	Субконто1Массив.Добавить(Контрагент);
	Субконто2Массив.Добавить(Договор);
	
	Возврат Новый Структура("Субконто1Массив, Субконто2Массив, СчетаДляРаспределения", Субконто1Массив, Субконто2Массив, Счета);
	
КонецФункции // ()

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	БюджетныйНаСервере.ПриУстановкеНовогоНомераПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	НеСоздавать = ложь;
	//Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Д_ЗаявкаНаОтгрузку") Тогда
	//	// Заполнение шапки
	//	Если ДанныеЗаполнения.ТипЗаявки = "Спиртовая" или ПустаяСтрока(ДанныеЗаполнения.ТипЗаявки) Тогда
	//		Если ДанныеЗаполнения.СостояниеДокумента = Перечисления.Д_СостоянияДокументов.Исполнен ИЛИ ДанныеЗаполнения.СостояниеДокумента = Перечисления.Д_СостоянияДокументов.НаИсполнении Тогда
	//			Контрагент = ДанныеЗаполнения.Грузополучатель;
	//			Если ПараметрыСеанса.ДоступныеПредприятия.Найти(ДанныеЗаполнения.Предприятие) = Неопределено Тогда
	//				Предприятие = ДанныеЗаполнения.Док;
	//			Иначе
	//				Предприятие = ДанныеЗаполнения.Предприятие;
	//			КонецЕсли;				Комментарий = ДанныеЗаполнения.Примечания;     
	//			ДокументОснование = ДанныеЗаполнения;
	//			Товары.Очистить();
	//			ПрочиеНачисления.Очистить();
	//			Услуги.Очистить();
	//			Счет = ПланыСчетов.Учетный.Счет6201();
	//			СтрРеализация = Товары.Добавить();
	//			СтрРеализация.Счет 		    = ПланыСчетов.Учетный.Счет43();
	//			СтрРеализация.Номенклатура  = ДанныеЗаполнения.Номенклатура;
	//			СтрРеализация.Количество    = ДанныеЗаполнения.Количество; 
	//			СтрРеализация.ВидДоставки   = "Авто";
	//			СтрРеализация.Цена          = ДанныеЗаполнения.Цена;
	//			СтрРеализация.Доставка	    = ДанныеЗаполнения.Доставка;
	//			СтрРеализация.СуммаДоставки = ДанныеЗаполнения.Количество*ДанныеЗаполнения.Доставка; 
	//			СтрРеализация.Сумма		    = ДанныеЗаполнения.Количество*ДанныеЗаполнения.Цена;
	//			
	//			
	//			//Заполняем Верхи
	//			Запрос = Новый Запрос;
	//			Запрос.Текст = "ВЫБРАТЬ
	//			|	ВерхиКонтрагентов.Ссылка
	//			|ИЗ
	//			|	Справочник.ДоговорыКонтрагентов КАК ВерхиКонтрагентов
	//			|ГДЕ
	//			|	ВерхиКонтрагентов.СтавкаВерха = &СтавкаВерха
	//			|	И ВерхиКонтрагентов.Предприятие = &Предприятие
	//			|	И ВерхиКонтрагентов.Владелец = &Владелец";
	//			Запрос.УстановитьПараметр("СтавкаВерха", ДанныеЗаполнения.Верх);
	//			Запрос.УстановитьПараметр("Предприятие",ДанныеЗаполнения.Предприятие);
	//			Запрос.УстановитьПараметр("Владелец"   ,ДанныеЗаполнения.Грузополучатель);
	//			Если ДанныеЗаполнения.Верх<>0 Тогда    					
	//				Выборка = Запрос.Выполнить().Выбрать();
	//				Если Выборка.Следующий() Тогда
	//					Стр = ПрочиеНачисления.Добавить();
	//					Стр.Субконто2 = ВЫборка.ссылка; 
	//					Стр.СтатьяЗатрат = Справочники.СтатьиЗатрат.Верхи;
	//					Стр.ВидСуммы = "Сумма на единицу";
	//					Стр.Сумма = ДанныеЗаполнения.Верх;
	//				Иначе 
	//					Сообщить("Не найден верх контрагента для реквизита Верх1");				
	//				КонецЕсли; 
	//			КонецЕсли;
	//			Если ДанныеЗаполнения.Верх1<>0 Тогда
	//				Запрос.УстановитьПараметр("СтавкаВерха",ДанныеЗаполнения.Верх1);
	//				Выборка = Запрос.Выполнить().Выбрать();
	//				Если Выборка.Следующий()  Тогда
	//					Стр = ПрочиеНачисления.Добавить();
	//					Стр.Субконто2 = ВЫборка.ссылка;
	//					Стр.СтатьяЗатрат = Справочники.СтатьиЗатрат.Верхи;
	//					Стр.ВидСуммы = "Сумма на единицу";
	//					Стр.Сумма = ДанныеЗаполнения.Верх1;						
	//				Иначе
	//					Сообщить("Не найден верх контрагента для реквизита Верх2");	
	//				КонецЕсли; 				
	//			КонецЕсли; 
	//			Если ДанныеЗаполнения.Верх2<>0 Тогда
	//				Запрос.УстановитьПараметр("СтавкаВерха",ДанныеЗаполнения.Верх2);
	//				Выборка = Запрос.Выполнить().Выбрать();
	//				Если Выборка.Следующий()  Тогда
	//					Стр = ПрочиеНачисления.Добавить();
	//					Стр.Субконто2 = ВЫборка.ссылка;
	//					Стр.СтатьяЗатрат = Справочники.СтатьиЗатрат.Верхи;
	//					Стр.ВидСуммы = "Сумма на единицу";
	//					Стр.Сумма = ДанныеЗаполнения.Верх2;						
	//				Иначе
	//					Сообщить("Не найден верх контрагента для реквизита Верх3");	
	//				КонецЕсли; 				
	//			КонецЕсли;
	//							
	//		Иначе	
	//			Сообщить("Заявка не согласована. Заполнение документа производится не будет");
	//			СтандартнаяОбработка = Ложь;
	//			НеСоздавать = Истина;
	//		КонецЕсли;
	//	Иначе
	//		Сообщить("Ввод на основании осуществляется только для типа заявки ""Спиртовая""");
	//		СтандартнаяОбработка = Ложь;
	//		НеСоздавать = Истина;
	//	КонецЕсли; 		
	////ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.УЧ_НачислениеТранспортныхРасходов") Тогда 
	////	Предприятие = ДанныеЗаполнения.Предприятие;
	////	Подразделение = ДанныеЗаполнения.Подразделение;
	////	ДокументОснование = ДанныеЗаполнения;
	////	Стр = Верхи.Добавить();
	////	Стр.ВидСуммы = "Общая сумма";
	////	Стр.Сумма = ДанныеЗаполнения.ТабличнаяЧасть1.Итог("Сумма");
	////	Стр.Статья = Справочники.ИздержкиОбращения.ТранспортныеАвто;
	////	Если ТипЗнч(ДанныеЗаполнения.КорСубконто1) = ТИП("СправочникСсылка.ДоговорыКонтрагентов") Тогда
	////		СТР.ВерхКонтрагента = ДанныеЗаполнения.КорСубконто1;		
	////	ИначеЕсли ТипЗнч(ДанныеЗаполнения.КорСубконто2) = ТИП("СправочникСсылка.ДоговорыКонтрагентов") Тогда
	////		Стр.ВерхКонтрагента = ДанныеЗаполнения.КорСубконто2;
	////	ИначеЕсли ТипЗнч(ДанныеЗаполнения.КорСубконто3) = ТИП("СправочникСсылка.ДоговорыКонтрагентов") Тогда 
	////		Стр.ВерхКонтрагента = ДанныеЗаполнения.КорСубконто3;		
	////	КонецЕсли; 
	//КонецЕсли;                         	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.УЧ_Реализация") Тогда
		// Заполнение шапки
		Акциз = ДанныеЗаполнения.Акциз;
		Валюта = ДанныеЗаполнения.Валюта;
		Подразделение = ДанныеЗаполнения.Подразделение;
		ДатаОтгрузки = ДанныеЗаполнения.ДатаОтгрузки;
		ДатыНеСовпадают = ДанныеЗаполнения.ДатыНеСовпадают;
		Договор = ДанныеЗаполнения.Договор;
		ДоговорВн = ДанныеЗаполнения.ДоговорВн;
		ДокументОснование = ДанныеЗаполнения.ДокументОснование;
		ДоставкаНаЕдиницу = ДанныеЗаполнения.ДоставкаНаЕдиницу;
		Комментарий = "Возврат. " + ДанныеЗаполнения.Комментарий;
		Контрагент = ДанныеЗаполнения.Контрагент;
		Курс = ДанныеЗаполнения.Курс;
		НалогиИСборыАкциз = ДанныеЗаполнения.НалогиИСборыАкциз;
		НачислятьВерх = ДанныеЗаполнения.НачислятьВерх;
		НачислятьДоставку = ДанныеЗаполнения.НачислятьДоставку;
		НеСоздавать = ДанныеЗаполнения.НеСоздавать;
		Предприятие = ДанныеЗаполнения.Предприятие;
		ПредприятиеПоставщик = ДанныеЗаполнения.ПредприятиеПоставщик;
		ДокОснование = ДанныеЗаполнения.Ссылка;
		Счет = ДанныеЗаполнения.Счет;
		ТратыНалива = ДанныеЗаполнения.ТратыНалива;
		ТратыНаливаКРХ = ДанныеЗаполнения.ТратыНаливаКРХ;
		Флаг60_79 = ДанныеЗаполнения.Флаг60_79;
		ФлагВалюты = ДанныеЗаполнения.ФлагВалюты;
		ФлагВозврат = Истина;
		Товары.Очистить();
		ПрочиеНачисления.Очистить();
		Услуги.Очистить();

		Для Каждого ТекСтрокаВерхи Из ДанныеЗаполнения.ПрочиеНачисления Цикл
			НоваяСтрока = ПрочиеНачисления.Добавить();
			НоваяСтрока.Субконто2 = ТекСтрокаВерхи.ВерхКонтрагента;
			НоваяСтрока.ВидСуммы = ТекСтрокаВерхи.ВидСуммы;
			НоваяСтрока.ДоговорМенеджера = ТекСтрокаВерхи.ДоговорМенеджера;
			НоваяСтрока.Комментарий = ТекСтрокаВерхи.Комментарий;
			НоваяСтрока.СтатьяЗатрат = ТекСтрокаВерхи.Статья;
			НоваяСтрока.Сумма = ТекСтрокаВерхи.Сумма;
		КонецЦикла;
		Для Каждого ТекСтрокаРеализация Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаРеализация); 
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		Если ДанныеЗаполнения.Предприятие = ДанныеЗаполнения.ПредприятиеВн Тогда
			СтандартнаяОбработка = Ложь;
			Комментарий = "##НеверныйВидОперации" + ДанныеЗаполнения.ВидОперации;
			Возврат;
		КонецЕсли; 
		
		Отказ = сабОперОбщегоНазначения.ПроверкаСозданияНаОснованииНаСервере(ДанныеЗаполнения, Комментарий, СтандартнаяОбработка, ТипЗнч(Ссылка));
		Если НЕ Отказ = Неопределено Тогда
			Возврат;		
		КонецЕсли;
				
		// Заполнение шапки
		Предприятие 	= ДанныеЗаполнения.ПредприятиеВн;
		Подразделение = ДанныеЗаполнения.ПредприятиеВн.ВидДеятельности;
		ДокОснование 	= ДанныеЗаполнения.Ссылка;
		СуммаДокумента 	= ДанныеЗаполнения.СуммаДокумента;
		Склад 			= ДанныеЗаполнения.Склад;
		Счет 			= ПланыСчетов.Учетный.Счет7902();
		Контрагент 		= НайтиКонтрагентаПоПредприятиюВНХ(ДанныеЗаполнения.Предприятие);
		ПредприятиеПоставщик = ДанныеЗаполнения.Предприятие; 
		Договор 		= сабОперОбщегоНазначения.ПолучитьДоговорКонтрагентаПоУмолчанию(Контрагент).Договор;
		ДоговорВн 		= Договор.ВнутрихолдинговыйДоговор;
		ПодразделениеВн = ДанныеЗаполнения.Подразделение;
		ВидОперации 	= Перечисления.ВидыОперацийРеализация.Товары;
		УчитыватьНДС 	= Ложь;
		СуммаВключаетНДС = Истина;
		Организация 	= Подразделение.Организация;
		ОрганизацияВн 	= ПодразделениеВн.Организация;
		//Для Каждого ТекСтрокаДополнительныеРеквизиты Из ДанныеЗаполнения.ДополнительныеРеквизиты Цикл
		//	НоваяСтрока = ДополнительныеРеквизиты.Добавить();
		//	НоваяСтрока.Значение = ТекСтрокаДополнительныеРеквизиты.Значение;
		//	НоваяСтрока.Свойство = ТекСтрокаДополнительныеРеквизиты.Свойство;
		//	НоваяСтрока.ТекстоваяСтрока = ТекСтрокаДополнительныеРеквизиты.ТекстоваяСтрока;
		//КонецЦикла;
		Товары.Очистить();
		ПрочиеНачисления.Очистить();
		Услуги.Очистить();

		Для Каждого ТекСтрокаТабличнаяЧасть Из ДанныеЗаполнения.ТабличнаяЧасть Цикл
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Количество = 0;//ТекСтрокаТабличнаяЧасть.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаТабличнаяЧасть.Номенклатура;
			НоваяСтрока.Цена = ТекСтрокаТабличнаяЧасть.Цена;
			НоваяСтрока.Сумма = ТекСтрокаТабличнаяЧасть.Сумма;
			НоваяСтрока.СуммаОтгрузки = ТекСтрокаТабличнаяЧасть.Сумма;
			НоваяСтрока.СтавкаНДС = ТекСтрокаТабличнаяЧасть.СтавкаНДС;
			НоваяСтрока.СуммаНДС = ТекСтрокаТабличнаяЧасть.СуммаНДС;
			НоваяСтрока.Счет = ТекСтрокаТабличнаяЧасть.Номенклатура.Счет10;
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.УЧ_ПоступлениеТоваров") Тогда
		// Заполнение шапки
		Товары.Очистить();
		ПрочиеНачисления.Очистить();
		Услуги.Очистить();

		Если ДанныеЗаполнения.СчетКонтрагента = ПланыСчетов.Учетный.Счет7902() Тогда
			Предприятие 	= ДанныеЗаполнения.Контрагент;
			Подразделение = ДанныеЗаполнения.ПодразделениеВн;
			ДокОснование 	= ДанныеЗаполнения.Ссылка;
			СуммаДокумента 	= ДанныеЗаполнения.СуммаДокумента;
			Склад 			= ДанныеЗаполнения.Склад;
			Счет 			= ПланыСчетов.Учетный.Счет7902();
			Контрагент 		= ДанныеЗаполнения.Предприятие;
			Договор 		= ПолучитьВнутреннийДоговор(ДанныеЗаполнения.Предприятие, ДанныеЗаполнения.Контрагент);
			ПодразделениеВн = ДанныеЗаполнения.Подразделение;
			ВидОперации = Перечисления.ВидыОперацийРеализация.Товары;
			УчитыватьНДС = Ложь;
			СуммаВключаетНДС = Истина;
			Организация = Подразделение.Организация;
			ОрганизацияВн = ПодразделениеВн.Организация;
			//Для Каждого ТекСтрокаДополнительныеРеквизиты Из ДанныеЗаполнения.ДополнительныеРеквизиты Цикл
			//	НоваяСтрока = ДополнительныеРеквизиты.Добавить();
			//	НоваяСтрока.Значение = ТекСтрокаДополнительныеРеквизиты.Значение;
			//	НоваяСтрока.Свойство = ТекСтрокаДополнительныеРеквизиты.Свойство;
			//	НоваяСтрока.ТекстоваяСтрока = ТекСтрокаДополнительныеРеквизиты.ТекстоваяСтрока;
			//КонецЦикла;
			Для Каждого ТекСтрокаТабличнаяЧасть Из ДанныеЗаполнения.ТабличнаяЧасть Цикл
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Количество = ТекСтрокаТабличнаяЧасть.Количество;
				НоваяСтрока.Номенклатура = ТекСтрокаТабличнаяЧасть.Номенклатура;
				НоваяСтрока.Цена = ТекСтрокаТабличнаяЧасть.Цена;
				НоваяСтрока.Сумма = ТекСтрокаТабличнаяЧасть.Сумма;
				НоваяСтрока.СуммаОтгрузки = ТекСтрокаТабличнаяЧасть.Сумма;
				НоваяСтрока.СтавкаНДС = ТекСтрокаТабличнаяЧасть.СтавкаНДС;
				НоваяСтрока.СуммаНДС = ТекСтрокаТабличнаяЧасть.СуммаНДС;
				//НоваяСтрока.Счет = ТекСтрокаТабличнаяЧасть.Номенклатура.Счет10;
			КонецЦикла;
		Иначе
			Предприятие 	= ДанныеЗаполнения.Предприятие;
			Подразделение = ДанныеЗаполнения.Подразделение;
			ДокОснование 	= ДанныеЗаполнения.Ссылка;
			СуммаДокумента 	= ДанныеЗаполнения.СуммаДокумента;
			Склад 			= ДанныеЗаполнения.Склад;
			ВидОперации = Перечисления.ВидыОперацийРеализация.Товары;
			УчитыватьНДС = Ложь;
			СуммаВключаетНДС = Истина;
			Организация = ДанныеЗаполнения.Организация;
			Для Каждого ТекСтрокаТабличнаяЧасть Из ДанныеЗаполнения.ТабличнаяЧасть Цикл
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Номенклатура = ТекСтрокаТабличнаяЧасть.Номенклатура;
				НоваяСтрока.Склад = ТекСтрокаТабличнаяЧасть.Склад;
				НоваяСтрока.Количество = ТекСтрокаТабличнаяЧасть.Количество;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказКлиента") Тогда	
		Отказ = сабОперОбщегоНазначения.ПроверкаСозданияНаОснованииНаСервере(ДанныеЗаполнения, Комментарий, СтандартнаяОбработка, ТипЗнч(Ссылка));
		Если НЕ Отказ = Неопределено Тогда
			Возврат;		
		КонецЕсли;
				
		// Заполнение шапки
		Предприятие 	= ДанныеЗаполнения.Предприятие;
		Подразделение = ДанныеЗаполнения.Подразделение;
		ДокОснование 	= ДанныеЗаполнения.Ссылка;
		СуммаДокумента 	= ДанныеЗаполнения.СуммаДокумента;
		Склад 			= ДанныеЗаполнения.Склад;
		Контрагент 		= ДанныеЗаполнения.Контрагент;
		ПредприятиеПоставщик = ДанныеЗаполнения.Предприятие; 
		Договор 		= ДанныеЗаполнения.Договор;
		Счет 			= Договор.СчетВзаиморасчетов;
		Если Не ЗначениеЗаполнено(Счет) Тогда
			Счет = ПланыСчетов.Учетный.Счет6201();		
		КонецЕсли;
		//ДоговорВн 		= Договор.ВнутрихолдинговыйДоговор;
		ПодразделениеВн = ДанныеЗаполнения.Подразделение;
		ВидОперации 	= Перечисления.ВидыОперацийРеализация.Товары;
		УчитыватьНДС 	= Ложь;
		СуммаВключаетНДС = Истина;
		Организация 	= ДанныеЗаполнения.Организация;
		ОрганизацияВн 	= ПодразделениеВн.Организация;
		Дата = ДанныеЗаполнения.ДатаПоступления;
		//Для Каждого ТекСтрокаДополнительныеРеквизиты Из ДанныеЗаполнения.ДополнительныеРеквизиты Цикл
		//	НоваяСтрока = ДополнительныеРеквизиты.Добавить();
		//	НоваяСтрока.Значение = ТекСтрокаДополнительныеРеквизиты.Значение;
		//	НоваяСтрока.Свойство = ТекСтрокаДополнительныеРеквизиты.Свойство;
		//	НоваяСтрока.ТекстоваяСтрока = ТекСтрокаДополнительныеРеквизиты.ТекстоваяСтрока;
		//КонецЦикла;
		Товары.Очистить();
		ПрочиеНачисления.Очистить();
		Услуги.Очистить();
		
		Для Каждого ТекСтрокаТабличнаяЧасть Из ДанныеЗаполнения.ТабличнаяЧасть Цикл
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Количество = ТекСтрокаТабличнаяЧасть.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаТабличнаяЧасть.Номенклатура;
			НоваяСтрока.Цена = ТекСтрокаТабличнаяЧасть.Цена;
			НоваяСтрока.Сумма = ТекСтрокаТабличнаяЧасть.Сумма;
			НоваяСтрока.СуммаОтгрузки = ТекСтрокаТабличнаяЧасть.Сумма;
			НоваяСтрока.СтавкаНДС = ТекСтрокаТабличнаяЧасть.СтавкаНДС;
			НоваяСтрока.СуммаНДС = ТекСтрокаТабличнаяЧасть.СуммаНДС;
			НоваяСтрока.Счет = ТекСтрокаТабличнаяЧасть.Номенклатура.Счет10;
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда	
		Отказ = сабОперОбщегоНазначения.ПроверкаСозданияНаОснованииНаСервере(ДанныеЗаполнения, Комментарий, СтандартнаяОбработка, ТипЗнч(Ссылка));
		Если НЕ Отказ = Неопределено Тогда
			Возврат;		
		КонецЕсли;
				
		// Заполнение шапки
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения,,"Дата, Номер");
		//Номер = "";
		ДокОснование 	= ДанныеЗаполнения.Ссылка;
		УчитыватьНДС 	= НЕ ДанныеЗаполнения.ДокументБезНДС;
		//Предприятие 	= ДанныеЗаполнения.Предприятие;
		//ВидДеятельности = ДанныеЗаполнения.Подразделение;
		//СуммаДокумента 	= ДанныеЗаполнения.СуммаДокумента;
		////Склад 			= ДанныеЗаполнения.Склад;
		//Контрагент 		= ДанныеЗаполнения.Контрагент;
		////ПредприятиеПоставщик = ДанныеЗаполнения.Предприятие; 
		//Договор 		= ДанныеЗаполнения.Договор;
		//Счет 			= Договор.СчетВзаиморасчетов;
		////ДоговорВн 		= Договор.ВнутрихолдинговыйДоговор;
		////ПодразделениеВн = ДанныеЗаполнения.Подразделение;
		//ВидОперации 	= ДанныеЗаполнения.ВидОперации;
		//СуммаВключаетНДС = ДанныеЗаполнения.СуммаВключаетНДС;
		//Организация 	= ВидДеятельности.Организация;
		////ОрганизацияВн 	= ПодразделениеВн.Организация;
		//Для Каждого ТекСтрокаДополнительныеРеквизиты Из ДанныеЗаполнения.ДополнительныеРеквизиты Цикл
		//	НоваяСтрока = ДополнительныеРеквизиты.Добавить();
		//	НоваяСтрока.Значение = ТекСтрокаДополнительныеРеквизиты.Значение;
		//	НоваяСтрока.Свойство = ТекСтрокаДополнительныеРеквизиты.Свойство;
		//	НоваяСтрока.ТекстоваяСтрока = ТекСтрокаДополнительныеРеквизиты.ТекстоваяСтрока;
		//КонецЦикла;
		Если ВидОперации = Перечисления.ВидыОперацийРеализация.Услуги Тогда
			ТЧ = Услуги;
			ИмяСтолбца = "Субконто1";
		Иначе
			ТЧ = Товары;
			ИмяСтолбца = "Номенклатура";
		КонецЕсли;
		Товары.Очистить();
		ПрочиеНачисления.Очистить();
		Услуги.Очистить();

		Для Каждого ТекСтрокаТабличнаяЧасть Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = ТЧ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаТабличнаяЧасть);
			//НоваяСтрока.Количество = 0;//ТекСтрокаТабличнаяЧасть.Количество;
			НоваяСтрока[ИмяСтолбца] = ТекСтрокаТабличнаяЧасть.Номенклатура;
			//НоваяСтрока.Цена = ТекСтрокаТабличнаяЧасть.Цена;
			//НоваяСтрока.Сумма = ТекСтрокаТабличнаяЧасть.Сумма;
			НоваяСтрока.СуммаОтгрузки = ТекСтрокаТабличнаяЧасть.Сумма;
			//НоваяСтрока.СтавкаНДС = ТекСтрокаТабличнаяЧасть.СтавкаНДС;
			//НоваяСтрока.СуммаНДС = ТекСтрокаТабличнаяЧасть.СуммаНДС;
			Если ИмяСтолбца = "Номенклатура" Тогда //бобик д1
				НоваяСтрока.Счет = ТекСтрокаТабличнаяЧасть.Номенклатура.Счет10;
			Иначе
				НоваяСтрока.СодержаниеУслуги = ТекСтрокаТабличнаяЧасть.Номенклатура.НаименованиеПолное;
				Если НоваяСтрока.СодержаниеУслуги = "" Тогда
					НоваяСтрока.СодержаниеУслуги = Строка(ТекСтрокаТабличнаяЧасть.Номенклатура);				
				КонецЕсли;
				НоваяСтрока.Счет90 = ПланыСчетов.Учетный.Счет9001();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	сабОбщегоНазначенияБУХ.сабОбработкиЗаполненияУчпетныхДокументовОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
КонецПроцедуры

Процедура ОбработкаЗаполненияСФормы(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт

	ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);	

КонецПроцедуры
