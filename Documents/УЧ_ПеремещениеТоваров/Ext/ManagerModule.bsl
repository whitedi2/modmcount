




// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НакладнаяНаПеремещение") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "НакладнаяНаПеремещение", 
			НСтр("ru = 'Накладная на перемещение'"), 
			ПечатьНакладная(МассивОбъектов));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОписьНоменклатуры") Тогда

		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ОписьНоменклатуры",
				ПараметрыПечати.Представление,
				ПечатьОписиНоменклатуры(МассивОбъектов, ОбъектыПечати));
	
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТОРГ13") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,"ТОРГ13",
			НСтр("ru = 'ТОРГ-13 (Накладная на внутреннее перемещение)'"), 
			ПечатьТОРГ13(МассивОбъектов));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "М4") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,"М4",
			НСтр("ru = 'М-4 (Приходный ордер)'"),
			ПечатьМ4(МассивОбъектов, ОбъектыПечати));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "М11") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "М11",
			НСтр("ru = 'М-11 (Требование -  накладная)'"),
			ПечатьМ11(МассивОбъектов, ОбъектыПечати));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТТН") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТТН",
			НСтр("ru = '1-Т (Товарно - транспортная накладная)'"),
			ПечатьТТН(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТОРГ12") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,"ТОРГ12",
			НСтр("ru = 'ТОРГ-12 (Товарная накладная на возврат)'"), 
			ПечатьТОРГ12(МассивОбъектов));
		
	КонецЕсли;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТТН") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТТН",
				ПараметрыПечати.Представление,
				ПечатьТТН(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;
			
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КомплектДокументов") Тогда
		КоллекцияПечатныхФорм.Очистить();
		СформироватьКомплектПечатныхФорм(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати);
	КонецЕсли;		

КонецПроцедуры

Функция КомплектПечатныхФорм() Экспорт
	
	КомплектПечатныхФорм = РегистрыСведений.НастройкиПечатиОбъектов.ПодготовитьКомплектПечатныхФорм();
	
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "ТОРГ12", НСтр("ru = 'ТОРГ-12'"), 2);
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "СчетФактура", НСтр("ru = 'Счет фактура'"), 2);
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "ТОРГ13", НСтр("ru = 'ТОРГ-13'"), 2);
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "ТОРГ2", НСтр("ru = 'ТОРГ-2'"), 2);
	
	Возврат КомплектПечатныхФорм;
	
КонецФункции

Функция СформироватьКомплектПечатныхФорм(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати) Экспорт
	
	Перем АдресКомплектаПечатныхФорм;
	
	Если ТипЗнч(ПараметрыПечати) = Тип("Структура") И ПараметрыПечати.Свойство("АдресКомплектаПечатныхФорм", АдресКомплектаПечатныхФорм) Тогда
		
		КомплектПечатныхФорм = ПолучитьИзВременногоХранилища(АдресКомплектаПечатныхФорм);
		
	Иначе

		КомплектПечатныхФорм = РегистрыСведений.НастройкиПечатиОбъектов.КомплектПечатныхФорм(
			Метаданные.Документы.УЧ_ПеремещениеТоваров.ПолноеИмя(),
			МассивОбъектов, Неопределено);
		
	КонецЕсли;
		
	Если КомплектПечатныхФорм = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураТипов = Новый Соответствие;
	СтруктураТипов.Вставить("Документ.УЧ_ПеремещениеТоваров", МассивОбъектов);
	
	ИмяМакета = "ТОРГ12";
	ТекущийКомплект = КомплектПечатныхФорм.Скопировать(Новый Структура("Имя,Печатать,",ИмяМакета,Истина));
	Если ТекущийКомплект.Количество() > 0 Тогда
		Если ТекущийКомплект.Колонки.Найти("Ссылка") <> Неопределено И ЗначениеЗаполнено(ТекущийКомплект[0].Ссылка) Тогда
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекциюОдинЭкземпляр(КоллекцияПечатныхФорм, ИмяМакета);
			ТаблицаСсылок = ТекущийКомплект.Скопировать(,"Ссылка");
			ТаблицаСсылок.Свернуть("Ссылка");
			ТекущаяСтруктураТипов = Новый Соответствие;
			ТекущаяСтруктураТипов.Вставить("Документ.УЧ_ПеремещениеТоваров", ТаблицаСсылок.ВыгрузитьКолонку("Ссылка"));
		Иначе
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, ТекущийКомплект[0]);
			ТекущаяСтруктураТипов = СтруктураТипов;
		КонецЕсли;
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		ИмяМакета,
		ТекущийКомплект[0].Представление,
		ПечатьТОРГ12(МассивОбъектов, ОбъектыПечати, ТекущийКомплект));
	КонецЕсли;
	
	ИмяМакета = "ТОРГ13";
	ТекущийКомплект = КомплектПечатныхФорм.Скопировать(Новый Структура("Имя,Печатать,",ИмяМакета,Истина));
	Если ТекущийКомплект.Количество() > 0 Тогда
		Если ТекущийКомплект.Колонки.Найти("Ссылка") <> Неопределено И ЗначениеЗаполнено(ТекущийКомплект[0].Ссылка) Тогда
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекциюОдинЭкземпляр(КоллекцияПечатныхФорм, ИмяМакета);
			ТаблицаСсылок = ТекущийКомплект.Скопировать(,"Ссылка");
			ТаблицаСсылок.Свернуть("Ссылка");
			ТекущаяСтруктураТипов = Новый Соответствие;
			ТекущаяСтруктураТипов.Вставить("Документ.УЧ_ПеремещениеТоваров", ТаблицаСсылок.ВыгрузитьКолонку("Ссылка"));
		Иначе
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, ТекущийКомплект[0]);
			ТекущаяСтруктураТипов = СтруктураТипов;
		КонецЕсли;
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		ИмяМакета,
		ТекущийКомплект[0].Представление,
		ПечатьТОРГ13(МассивОбъектов, ОбъектыПечати, ТекущийКомплект));
	КонецЕсли;
	
	ИмяМакета = "СчетФактура";
	ТекущийКомплект = КомплектПечатныхФорм.Скопировать(Новый Структура("Имя,Печатать,",ИмяМакета,Истина));
	Если ТекущийКомплект.Количество() > 0 Тогда
		Если ТекущийКомплект.Колонки.Найти("Ссылка") <> Неопределено И ЗначениеЗаполнено(ТекущийКомплект[0].Ссылка) Тогда
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекциюОдинЭкземпляр(КоллекцияПечатныхФорм, ИмяМакета);
			ТаблицаСсылок = ТекущийКомплект.Скопировать(,"Ссылка");
			ТаблицаСсылок.Свернуть("Ссылка");
			ТекущаяСтруктураТипов = Новый Соответствие;
			ТекущаяСтруктураТипов.Вставить("Документ.УЧ_ПеремещениеТоваров", ТаблицаСсылок.ВыгрузитьКолонку("Ссылка"));
		Иначе
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, ТекущийКомплект[0]);
			ТекущаяСтруктураТипов = СтруктураТипов;
		КонецЕсли;
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		ИмяМакета,
		ТекущийКомплект[0].Представление,
		Обработки.ПечатьОбщихФорм.СформироватьПечатнуюФормуСчетФактура(ТекущаяСтруктураТипов, ОбъектыПечати, Новый Структура("ПечатьВВалюте", Ложь), ТекущийКомплект));
	КонецЕсли;
	
	ИмяМакета = "ТОРГ2";
	ТекущийКомплект = КомплектПечатныхФорм.Скопировать(Новый Структура("Имя,Печатать,",ИмяМакета,Истина));
	Если ТекущийКомплект.Количество() > 0 Тогда
		Если ТекущийКомплект.Колонки.Найти("Ссылка") <> Неопределено И ЗначениеЗаполнено(ТекущийКомплект[0].Ссылка) Тогда
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекциюОдинЭкземпляр(КоллекцияПечатныхФорм, ИмяМакета);
			ТаблицаСсылок = ТекущийКомплект.Скопировать(,"Ссылка");
			ТаблицаСсылок.Свернуть("Ссылка");
			ТекущаяСтруктураТипов = Новый Соответствие;
			ТекущаяСтруктураТипов.Вставить("Документ.УЧ_ПеремещениеТоваров", ТаблицаСсылок.ВыгрузитьКолонку("Ссылка"));
		Иначе
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, ТекущийКомплект[0]);
			ТекущаяСтруктураТипов = СтруктураТипов;
		КонецЕсли;
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		ИмяМакета,
		ТекущийКомплект[0].Представление,
		ПечатьТОРГ2(МассивОбъектов, ОбъектыПечати, ТекущийКомплект));
	КонецЕсли;
	
	РегистрыСведений.НастройкиПечатиОбъектов.СформироватьКомплектВнешнихПечатныхФорм(
			"Документ.УЧ_ПеремещениеТоваров",
			МассивОбъектов,
			ПараметрыПечати,
			КоллекцияПечатныхФорм,
			ОбъектыПечати);
	
КонецФункции

// Печать
Функция ПечатьНакладная(МассивОбъектов) Экспорт
		
	КолонкаКодов       = "Код";
	ВыводитьКоды       = ЗначениеЗаполнено(КолонкаКодов);
	ВыводитьУпаковки   = Ложь;//ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	ТабличныйДокумент  = Новый ТабличныйДокумент;
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
	СинонимДокумента   = НСтр("ru='Перемещение товаров'");

	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_НакладнаяНаПеремещение";
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Номер КАК Номер,
	|	Документ.Дата КАК Дата,
	|	Документ.Подразделение КАК Отправитель,
	|	Документ.ПодразделениеПолучатель КАК Получатель,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Склад) КАК ОтправительПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.СкладПолучатель) КАК ПолучательПредставление,
	|	Документ.Организация.Код КАК Префикс,
	|	Документ.Предприятие КАК Предприятие,
	|	Документ.Организация КАК Организация
	|ИЗ
	|	Документ.УЧ_ПеремещениеТоваров КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивОбъектов)
	|	И Документ.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТаблицаТовары.Номенклатура.Код КАК КолонкаКодов,
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеЕдиницыИзмеренияУпаковки,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.Количество КАК КоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Количество = 0
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаТовары.Сумма / ТаблицаТовары.Количество
	|	КОНЕЦ КАК Цена,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УЧ_ПеремещениеТоваров.ТабличнаяЧасть КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&МассивОбъектов)
	|	И ТаблицаТовары.Ссылка.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка");

	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Макет = Документы.УЧ_ПеремещениеТоваров.ПолучитьМакет("ПФ_MXL_НакладнаяНаПеремещение");

	ОбластьЗаголовок 		= Макет.ПолучитьОбласть("Заголовок");
		
	ОбластьШапкаТаблицыНачало 	= Макет.ПолучитьОбласть("ШапкаТаблицы|НачалоСтроки");
	ОбластьСтрокаТаблицыНачало 	= Макет.ПолучитьОбласть("СтрокаТаблицы|НачалоСтроки");
	ОбластьПодвалТаблицыНачало 	= Макет.ПолучитьОбласть("ПодвалТаблицы|НачалоСтроки");
	
	ОбластьШапкаТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьСтрокаТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
	ОбластьПодвалТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
	
	ОбластьШапкаТаблицыКолонкаКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов; 
	
	ОбластьШапкаТаблицыКолонкаУпаковок 		= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаУпаковок");
	ОбластьСтрокаТаблицыКолонкаУпаковок 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаУпаковок");
	ОбластьПодвалТаблицыКолонкаУпаковок		= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаУпаковок");
	
	ОбластьКолонкаТоваров = Макет.Область("КолонкаТоваров");
	
	Если НЕ ВыводитьКоды Тогда
		
		ОбластьКолонкаТоваров.ШиринаКолонки = ОбластьКолонкаТоваров.ШиринаКолонки + Макет.Область("КолонкаКодов").ШиринаКолонки;
		
	КонецЕсли;
	
	Если НЕ ВыводитьУпаковки Тогда
		
		ОбластьКолонкаТоваров.ШиринаКолонки = ОбластьКолонкаТоваров.ШиринаКолонки + Макет.Область("КолонкаУпаковокКоличество").ШиринаКолонки
		+ Макет.Область("КолонкаУпаковокПредставление").ШиринаКолонки; 		
		
	КонецЕсли;
	
	ОбластьШапкаТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаТоваров");
	ОбластьСтрокаТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаТоваров");
	ОбластьПодвалТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаТоваров");
	
	ОбластьШапкаТаблицыКонец 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КонецСтроки");
	ОбластьСтрокаТаблицыКонец 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КонецСтроки");
	ОбластьПодвалТаблицыКонец 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КонецСтроки");
	
	ОбластьПодписей       = Макет.ПолучитьОбласть("Подписи");
	ОбластьИтого          = Макет.ПолучитьОбласть("Итого");
		
	ВыборкаПоДокументам = Результаты[0].Выбрать();
	ВыборкаПоТабличнымЧастям = Результаты[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если НЕ ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если НЕ ПервыйДокумент Тогда
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// ЗАГОЛОВОК
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
		ОбластьЗаголовок.Параметры.Заполнить(ВыборкаПоДокументам);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = СинонимДокумента + " № " + ВыборкаПоДокументам.Номер +  " от " + Формат(ВыборкаПоДокументам.Дата, "ДФ='дд ММММ гггг'") + " г."; 
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		// ШАПКА
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицыНачало);
		
		Если ВыводитьКоды Тогда
			
			ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаКодов);
			
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаТоваров);
		
		Если ВыводитьУпаковки Тогда
			
			ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаУпаковок);
			
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКонец);
		ВсегоНаименований = 0;
		Итого             = 0;
		СуммаТоваров      = 0;
		СуммаУслуг        = 0;
		ТипУслуга = Перечисления.ТипыНоменклатуры.Услуга;
		// СТРОКИ ТЧ
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
			
			ОбластьСтрокаТаблицыНачало.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицыНачало);
			
			Если ВыводитьКоды Тогда
				
				ОбластьСтрокаТаблицыКолонкаКодов.Параметры.Артикул = ВыборкаПоСтрокамТЧ["КолонкаКодов"];
				ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаКодов);
				
			КонецЕсли;
			
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Товар = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаПоСтрокамТЧ.НоменклатураПредставление);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаТоваров);
			
			Если ВыводитьУпаковки Тогда
				
				ОбластьСтрокаТаблицыКолонкаУпаковок.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
				ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаУпаковок);
				
			КонецЕсли;
			
			ОбластьСтрокаТаблицыКонец.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКонец);	
			
			ВсегоНаименований = ВсегоНаименований + 1;
			Итого             = Итого + ВыборкаПоСтрокамТЧ.Сумма;
			Если ВыборкаПоСтрокамТЧ.ТипНоменклатуры = ТипУслуга Тогда
				СуммаУслуг = СуммаУслуг + ВыборкаПоСтрокамТЧ.Сумма;
			Иначе
				СуммаТоваров = СуммаТоваров + ВыборкаПоСтрокамТЧ.Сумма;
			КонецЕсли;
			
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьПодвалТаблицыНачало);
		
		Если ВыводитьКоды Тогда
			
			ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаКодов);
			
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаТоваров);
		
		Если ВыводитьУпаковки Тогда
			
			ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаУпаковок);
			
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКонец);
		
		// ИТОГО
		ОбластьИтого.Параметры.Итого = ФормированиеПечатныхФормСервер.ФорматСумм(Итого);
		ОбластьИтого.Параметры.СуммаУслуг = ФормированиеПечатныхФормСервер.ФорматСумм(СуммаУслуг);
		ОбластьИтого.Параметры.СуммаТоваров = ФормированиеПечатныхФормСервер.ФорматСумм(СуммаТоваров);
		ТабличныйДокумент.Вывести(ОбластьИтого);
								
		// ПОДПИСИ
		ОбластьПодписей.Параметры.Заполнить(ВыборкаПоДокументам);
		
		ТабличныйДокумент.Вывести(ОбластьПодписей);
				
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатьТОРГ13(МассивОбъектов, ОбъектыПечати = Неопределено, КомплектыПечати = Неопределено) Экспорт

	КолонкаКодов = "Код";
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ДокументКПечати.Ссылка КАК Ссылка,
	                      |	ДокументКПечати.Номер КАК Номер,
	                      |	ДокументКПечати.Дата КАК Дата,
	                      |	ДокументКПечати.Организация КАК Организация,
	                      |	ДокументКПечати.Организация.Код КАК Префикс,
	                      |	ДокументКПечати.Подразделение КАК ОтправительПодразделение,
	                      |	ДокументКПечати.ПодразделениеПолучатель КАК ПолучательПодразделение
	                      |ИЗ
	                      |	Документ.УЧ_ПеремещениеТоваров КАК ДокументКПечати
	                      |ГДЕ
	                      |	ДокументКПечати.Ссылка В(&МассивДокументов)
	                      |	И ДокументКПечати.Проведен
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Ссылка
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ВложенныйЗапрос.Ссылка КАК Ссылка,
	                      |	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	                      |	ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	                      |	ВложенныйЗапрос.Номенклатура.Код КАК ТоварКод,
	                      |	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК БазоваяЕдиницаНаименование,
	                      |	ВложенныйЗапрос.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	                      |	ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	                      |	ВложенныйЗапрос.ЕдиницаИзмеренияМест.Представление КАК ВидУпаковки,
	                      |	ВложенныйЗапрос.КоэффициентМест / ВложенныйЗапрос.Коэффициент КАК КоличествоВОдномМесте,
	                      |	ВложенныйЗапрос.Цена КАК Цена,
	                      |	ВложенныйЗапрос.Количество КАК Количество,
	                      |	ЕСТЬNULL(ВложенныйЗапрос.КоличествоМест, 0) КАК КоличествоМест,
	                      |	ВложенныйЗапрос.Сумма КАК Сумма,
	                      |	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	                      |	ВложенныйЗапрос.МассаБрутто КАК МассаБрутто
	                      |ИЗ
	                      |	(ВЫБРАТЬ
	                      |		Товары.Ссылка КАК Ссылка,
	                      |		Товары.Номенклатура КАК Номенклатура,
	                      |		1 КАК Коэффициент,
	                      |		Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	                      |		1 КАК КоэффициентМест,
	                      |		Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияМест,
	                      |		Товары.Количество * Товары.Номенклатура.ВесБрутто КАК МассаБрутто,
	                      |		ВЫБОР
	                      |			КОГДА Товары.Количество = 0
	                      |				ТОГДА 0
	                      |			ИНАЧЕ Товары.Сумма / Товары.Количество
	                      |		КОНЕЦ КАК Цена,
	                      |		Товары.Количество КАК Количество,
	                      |		Товары.Количество КАК КоличествоМест,
	                      |		Товары.Сумма КАК Сумма,
	                      |		Товары.НомерСтроки КАК НомерСтроки
	                      |	ИЗ
	                      |		Документ.УЧ_ПеремещениеТоваров.ТабличнаяЧасть КАК Товары
	                      |	ГДЕ
	                      |		Товары.Ссылка В(&МассивДокументов)
	                      |		И Товары.Ссылка.Проведен
	                      |		И НЕ Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)) КАК ВложенныйЗапрос
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ВложенныйЗапрос.Ссылка,
	                      |	НомерСтроки
	                      |ИТОГИ ПО
	                      |	Ссылка");
		
		Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_ТОРГ13";
			
		ЕдиницаИзмеренияВеса           = Неопределено;
		
		ТабличныйДокумент.ПолеСлева = 5;
		ТабличныйДокумент.ПолеСправа = 5;
		ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
		ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
		ТабличныйДокумент.АвтоМасштаб = Истина;
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		ДанныеПечати = МассивРезультатов[0].Выбрать();
		ВыборкаПоДокументам = МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ТОРГ13");
		
		ПервыйДокумент = Истина;
		Пока ДанныеПечати.Следующий() Цикл
			
			//Для печати комплектов
			Если КомплектыПечати <> Неопределено И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено Тогда
				КомплектПечатиПоСсылке = КомплектыПечати.Найти(ДанныеПечати.Ссылка,"Ссылка");
				Если КомплектПечатиПоСсылке = Неопределено Тогда
					КомплектПечатиПоСсылке = КомплектыПечати[0];
				КонецЕсли;
				Если КомплектПечатиПоСсылке.Экземпляров = 0 Тогда
					Продолжить
				КонецЕсли;
			КонецЕсли;
			
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ПервыйДокумент = Ложь;
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			СведенияОбОрганизации     = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
			ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
			ОбластьМакета.Параметры.НомерДокумента = ДанныеПечати.Номер;
			ОбластьМакета.Параметры.ДатаДокумента  = ДанныеПечати.Дата;
				
			ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОбОрганизации);
						
			// Выводим коды
			ОбластьМакета.Параметры.ОрганизацияПоОКПО          = СведенияОбОрганизации.КодПоОКПО;
			ОбластьМакета.Параметры.ВидДеятельностиПоОКДП      = "";
				
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			НомерСтраницы = 1;
			
			ИтоговыеСуммы = Новый Структура;
			
			// Инициализация итогов по странице.
			ИтоговыеСуммы.Вставить("ИтогоМассаБруттоНаСтранице", 0);
			ИтоговыеСуммы.Вставить("ИтогоМестНаСтранице", 0);
			ИтоговыеСуммы.Вставить("ИтогоСуммаНаСтранице", 0);
			
			// Инициализация итогов по документу.
			ИтоговыеСуммы.Вставить("ИтогоМассаБрутто", 0);
			ИтоговыеСуммы.Вставить("ИтогоМест", 0);
			ИтоговыеСуммы.Вставить("ИтогоСумма", 0);
						
			ДанныеСтроки = Новый Структура;
			ДанныеСтроки.Вставить("Номер", 0);
			ДанныеСтроки.Вставить("Мест", 0);
			ДанныеСтроки.Вставить("Количество", 0);
			ДанныеСтроки.Вставить("Цена", 0);
			ДанныеСтроки.Вставить("МассаБрутто", 0);
			ДанныеСтроки.Вставить("Сумма", 0);

						
			// Создаем массив для проверки вывода.
			МассивВыводимыхОбластей = Новый Массив;
			
			// Выводим многострочную часть документа.
			ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
			ОбластьМакета           = Макет.ПолучитьОбласть("Строка");
			ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
			ОбластьВсего            = Макет.ПолучитьОбласть("Всего");
			ОбластьПодвала          = Макет.ПолучитьОбласть("Подвал");
			
			СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
			ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
			
			КоличествоСтрок = ВыборкаПоДокументам.Количество();
			
			СтрокаТовары = ВыборкаПоДокументам.Выбрать();
			Пока СтрокаТовары.Следующий() Цикл
				
				ДанныеСтроки.Номер = ДанныеСтроки.Номер + 1;
								
				ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
				ОбластьМакета.Параметры.ТоварНаименование = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(СтрокаТовары.ТоварНаименование);
				
				ДанныеСтроки.Мест = СтрокаТовары.КоличествоМест;
				ДанныеСтроки.Количество  = СтрокаТовары.Количество;
				
				Если ЕдиницаИзмеренияВеса <> Неопределено Тогда
					Если Не ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
						ДанныеСтроки.МассаБрутто = 0;
					Иначе
						ДанныеСтроки.МассаБрутто = СтрокаТовары.МассаБрутто;
					КонецЕсли;
				КонецЕсли;
				
				ДанныеСтроки.Цена  = СтрокаТовары.Цена;
				ДанныеСтроки.Сумма = СтрокаТовары.Сумма;
				
				ОбластьМакета.Параметры.Заполнить(ДанныеСтроки);
				
				Если ДанныеСтроки.Номер = 1 Тогда // первая строка
					
					ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
					ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
					
				Иначе
					
					МассивВыводимыхОбластей.Очистить();
					МассивВыводимыхОбластей.Добавить(ОбластьМакета);
					МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
					
					Если ДанныеСтроки.Номер = КоличествоСтрок Тогда
						
						МассивВыводимыхОбластей.Добавить(ОбластьВсего);
						МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
						
					КонецЕсли;
					
					Если ДанныеСтроки.Номер <> 1 И Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
						
						ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
						ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
						
						ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице = 0;
						ИтоговыеСуммы.ИтогоМестНаСтранице        = 0;
						ИтоговыеСуммы.ИтогоСуммаНаСтранице       = 0;
						
						НомерСтраницы = НомерСтраницы + 1;
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
						ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
						
					КонецЕсли;
					
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьМакета);
								
				// Увеличим итоги по странице.
				ИтоговыеСуммы.ИтогоМестНаСтранице        = ИтоговыеСуммы.ИтогоМестНаСтранице        + ДанныеСтроки.Мест;
				ИтоговыеСуммы.ИтогоСуммаНаСтранице       = ИтоговыеСуммы.ИтогоСуммаНаСтранице       + ДанныеСтроки.Сумма;
				ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице = ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице + ДанныеСтроки.МассаБрутто;
								
				// Увеличим итоги по документу.
				ИтоговыеСуммы.ИтогоМест        = ИтоговыеСуммы.ИтогоМест        + ДанныеСтроки.Мест;
				ИтоговыеСуммы.ИтогоСумма       = ИтоговыеСуммы.ИтогоСумма       + ДанныеСтроки.Сумма;
				ИтоговыеСуммы.ИтогоМассаБрутто = ИтоговыеСуммы.ИтогоМассаБрутто + ДанныеСтроки.МассаБрутто;
								
			КонецЦикла;
			
			// Выводим итоги по последней странице.
			ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
			ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
			
			ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
			
			// Выводим итоги по документу в целом.
			ОбластьМакета = Макет.ПолучитьОбласть("Всего");
			ОбластьМакета.Параметры.Заполнить(ИтоговыеСуммы);
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Выводим подвал документа
			ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
			ОбластьМакета.Параметры.ИтогоСуммаПрописью = ЧислоПрописью(Цел(ИтоговыеСуммы.ИтогоСумма),,",,,,,,,,0");
			КопеекЦифрами = (ИтоговыеСуммы.ИтогоСумма - Цел(ИтоговыеСуммы.ИтогоСумма))*100;
			ОбластьМакета.Параметры.ИтогоСуммаКопейки  = Формат(КопеекЦифрами, "ЧЦ=2; ЧДЦ=0; ЧН='00'");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Выведем нужное количество экземпляров (при печати комплектов)
			Если КомплектыПечати <> Неопределено И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено И КомплектПечатиПоСсылке.Экземпляров > 1 Тогда
				ОбластьКопирования = ТабличныйДокумент.ПолучитьОбласть(НомерСтрокиНачало,,ТабличныйДокумент.ВысотаТаблицы);
				Для Итератор = 2 По КомплектПечатиПоСсылке.Экземпляров Цикл
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ТабличныйДокумент.Вывести(ОбластьКопирования);
				КонецЦикла;
			КонецЕсли;
			
			Если Не ОбъектыПечати = Неопределено Тогда
				УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
			КонецЕсли;	
			
		КонецЦикла;
		
		Возврат ТабличныйДокумент;
		
КонецФункции

Функция ПечатьМ4(МассивОбъектов, ОбъектыПечати)
				
	КолонкаКодов = ФормированиеПечатныхФормСервер.ИмяДополнительнойКолонки();
	
	Если ПустаяСтрока(КолонкаКодов) Тогда
		
		КолонкаКодов = "Код";
		
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Документ.Ссылка                                  КАК Ссылка,
		|	Документ.Номер                                   КАК Номер,
		|	Документ.Дата                                    КАК Дата,
		|	Документ.Дата                                    КАК ДатаСоставления,
		|	Документ.Организация                             КАК Поставщик,
		|	Документ.ОрганизацияПолучатель 					 КАК Организация,
		|	Документ.ОрганизацияПолучатель 					 КАК ЮрФизЛицо,
		|	Документ.ОрганизацияПолучатель.Префикс           КАК Префикс,
		|	Документ.СкладПолучатель.Наименование            КАК СкладНаименование,
		|	Документ.СкладПолучатель                         КАК МестоПриемки
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК Документ
		|
		|ГДЕ
		|	Документ.Ссылка В (&МассивДокументов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка
		|;
		|
		|
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Ссылка                                                     КАК Ссылка,
		|	ВложенныйЗапрос.Номенклатура                                               КАК Номенклатура,
		|	ВложенныйЗапрос.Номенклатура.НаименованиеПолное                            КАК ТоварНаименование,
		|	ВложенныйЗапрос.Номенклатура." + КолонкаКодов + "                          КАК ТоварКод,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление                             КАК ЕдиницаИзмеренияНаименование,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.Код                                       КАК ЕдиницаИзмеренияКод,
		|	ВложенныйЗапрос.Характеристика                                             КАК Характеристика,
		|	ВложенныйЗапрос.Количество                                                 КАК Количество,
		|	ВложенныйЗапрос.Количество                                                 КАК КоличествоПринято,
		|	ВложенныйЗапрос.НомерСтроки                                                КАК НомерСтроки
		|ИЗ (
		|	ВЫБРАТЬ
		|		Документ.Ссылка             КАК Ссылка,
		|		Документ.Номенклатура       КАК Номенклатура,
		|		ВЫБОР КОГДА Документ.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) ТОГДА
		|			Документ.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ
		|			Документ.Упаковка.ЕдиницаИзмерения
		|		КОНЕЦ                       КАК ЕдиницаИзмерения,
		|		Документ.Характеристика     КАК Характеристика,
	   	|		Документ.КоличествоУпаковок КАК Количество,
		|		Документ.НомерСтроки        КАК НомерСтроки
		|	ИЗ
		|		Документ.ПеремещениеТоваров.Товары КАК Документ
		|	ГДЕ
		|		Документ.Ссылка В (&МассивДокументов)
		|	И НЕ Документ.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|
		|	) КАК ВложенныйЗапрос
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	НомерСтроки
		|
		|ИТОГИ ПО
		|	Ссылка
		|");
		
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
		
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_М4";
		
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ДанныеПечати      = МассивРезультатов[0].Выбрать();
	ВыборкаПоДокументам = МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_М4");
	
	ПервыйДокумент = Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
		// Выводим общие реквизиты шапки.
		СведенияОПокупателе = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.ДатаСоставления);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПокупателе);
		ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОПокупателе.КодПоОКПО;
		ОбластьМакета.Параметры.НомерДокумента           = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеПечати.Номер, Ложь, Истина);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим заголовок документа.
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокДокумента");
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		ОбластьМакета.Параметры.ДатаСоставления = ДанныеПечати.ДатаСоставления;
		
		СведенияОПоставщике     = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ДанныеПечати.Поставщик, ДанныеПечати.ДатаСоставления);
		ПредставлениеПоставщика = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование");
		ОбластьМакета.Параметры.ПоставщикНаименование = ПредставлениеПоставщика;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
			
		// Выводим заголовок таблицы
		ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);

		НомерСтраницы = 1;
				
		ИтоговыеСуммы = Новый Структура;
	
		ИтоговыеСуммы.Вставить("ИтогоКоличество", 0);
				
		ДанныеСтроки = Новый Структура;
		
		ДанныеСтроки.Вставить("Номер", 0);
		ДанныеСтроки.Вставить("Количество", 0);
		ДанныеСтроки.Вставить("Цена", 0);
			
		// Создаем массив для проверки вывода.
		МассивВыводимыхОбластей = Новый Массив;
		
		// Выводим многострочную часть документа.
		ОбластьМакета           = Макет.ПолучитьОбласть("Строка");
		ОбластьПодвалСтрок      = Макет.ПолучитьОбласть("ПодвалСтрок");
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("Итого");
		ОбластьПодвала          = Макет.ПолучитьОбласть("Подвал");
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
		
		КоличествоСтрок = ВыборкаПоДокументам.Количество();
		
		СтрокаТовары = ВыборкаПоДокументам.Выбрать();
		
		Пока СтрокаТовары.Следующий() Цикл
			
			ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
			
			ДанныеСтроки.Номер       = ДанныеСтроки.Номер + 1;
			ДанныеСтроки.Количество  = СтрокаТовары.Количество;
					
			ОбластьМакета.Параметры.Заполнить(ДанныеСтроки);
			
			ОбластьМакета.Параметры.ТоварНаименование = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
				СтрокаТовары.ТоварНаименование,
				СтрокаТовары.Характеристика);
						
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьМакета);
			МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
			
			Если ДанныеСтроки.Номер = КоличествоСтрок Тогда
				МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
			КонецЕсли;

			Если Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
				НомерСтраницы = НомерСтраницы + 1;
				ПодвалСтрок   = Макет.ПолучитьОбласть("ПодвалСтрок");
				ТабличныйДокумент.Вывести(ПодвалСтрок);
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
				ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Увеличим итоги по документу.
			ИтоговыеСуммы.ИтогоКоличество  = ИтоговыеСуммы.ИтогоКоличество  + ДанныеСтроки.Количество;
				
		КонецЦикла;
		
		// Выводим итоги по документу
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");

		ОбластьМакета.Параметры.ИтогоКоличествоПринято = ИтоговыеСуммы.ИтогоКоличество;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим подвал документа
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(ОбластьМакета);
	
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
			
	Возврат ТабличныйДокумент;
		
КонецФункции

Функция ПечатьМ11(МассивОбъектов, ОбъектыПечати)
	
	КолонкаКодов = ФормированиеПечатныхФормСервер.ИмяДополнительнойКолонки();
	
	Если ПустаяСтрока(КолонкаКодов) Тогда
		
		КолонкаКодов = "Код";
		
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Документ.Ссылка                                  КАК Ссылка,
		|	Документ.Номер                                   КАК Номер,
		|	Документ.Дата                                    КАК Дата,
		|	Документ.Дата                                    КАК ДатаСоставления,
		|	Документ.ОрганизацияПолучатель 					 КАК Организация,
		|	Документ.ОрганизацияПолучатель.Префикс 			 КАК Префикс,
		|	Документ.СкладПолучатель                         КАК Подразделение,
		|	Документ.СкладОтправитель                        КАК Склад
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК Документ
		|
		|ГДЕ
		|	Документ.Ссылка В (&МассивДокументов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка
		|;
		|
		|
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Ссылка                                                     КАК Ссылка,
		|	ВложенныйЗапрос.Номенклатура                                               КАК Номенклатура,
		|	ВложенныйЗапрос.Номенклатура.НаименованиеПолное                            КАК ТоварНаименование,
		|	ВложенныйЗапрос.Номенклатура." + КолонкаКодов + "                          КАК НоменклатурныйНомер,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление                             КАК ЕдиницаИзмеренияНаименование,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.Код                                       КАК ЕдиницаИзмеренияКод,
		|	ВложенныйЗапрос.Характеристика                                             КАК Характеристика,
		|	ВложенныйЗапрос.Количество                                                 КАК Количество,
		|	ВложенныйЗапрос.НомерСтроки                                                КАК НомерСтроки
		|ИЗ (
		|	ВЫБРАТЬ
		|		Документ.Ссылка             КАК Ссылка,
		|		Документ.Номенклатура       КАК Номенклатура,
		|		ВЫБОР КОГДА Документ.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) ТОГДА
		|			Документ.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ
		|			Документ.Упаковка.ЕдиницаИзмерения
		|		КОНЕЦ                       КАК ЕдиницаИзмерения,
		|		Документ.Характеристика     КАК Характеристика,
		|		Документ.КоличествоУпаковок КАК Количество,
		|		Документ.НомерСтроки        КАК НомерСтроки
		|	ИЗ
		|		Документ.ПеремещениеТоваров.Товары КАК Документ
		|	ГДЕ
		|		Документ.Ссылка В (&МассивДокументов)
		|		И Документ.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|
		|	) КАК ВложенныйЗапрос
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	НомерСтроки
		|
		|ИТОГИ ПО
		|	Ссылка
		|");
		
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
		
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_М11";
		
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ДанныеПечати      = МассивРезультатов[0].Выбрать();
	ВыборкаПоДокументам = МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_М11");
	
	ПервыйДокумент = Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
		// Выводим общие реквизиты шапки.
		СведенияОбОрганизации = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.ДатаСоставления);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОбОрганизации);
		ОбластьМакета.Параметры.КодПоОКПО                = СведенияОбОрганизации.КодПоОКПО;
		ОбластьМакета.Параметры.Заголовок                = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'ТРЕБОВАНИЕ-НАКЛАДНАЯ № %1'"), ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеПечати.Номер, Ложь, Истина));
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		НомерСтраницы = 1;
						
		ДанныеСтроки = Новый Структура;
		
		ДанныеСтроки.Вставить("Номер", 0);
		ДанныеСтроки.Вставить("Количество", 0);
						
		// Выводим многострочную часть документа.
		ОбластьМакета           = Макет.ПолучитьОбласть("Строка");
		ОбластьПодвала          = Макет.ПолучитьОбласть("Подвал");
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
		
		КоличествоСтрок = ВыборкаПоДокументам.Количество();
		
		СтрокаТовары = ВыборкаПоДокументам.Выбрать();
		
		Пока СтрокаТовары.Следующий() Цикл
			
			ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
			
			ДанныеСтроки.Номер       = ДанныеСтроки.Номер + 1;
			ДанныеСтроки.Количество  = СтрокаТовары.Количество;
			
			ОбластьМакета.Параметры.Заполнить(ДанныеСтроки);
			
			ОбластьМакета.Параметры.ТоварНаименование = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
				СтрокаТовары.ТоварНаименование,
				СтрокаТовары.Характеристика);
						
						
			ТабличныйДокумент.Вывести(ОбластьМакета);
						
				
		КонецЦикла;
		
		// Выводим подвал документа
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(ОбластьМакета);
	
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
			
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатьТТН(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	КолонкаКодов = "Код";
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПеремещениеТоваров.Ссылка КАК Ссылка,
	|	ПеремещениеТоваров.Номер КАК Номер,
	|	ПеремещениеТоваров.Дата КАК Дата,
	|	ПеремещениеТоваров.Организация КАК Организация,
	|	ПеремещениеТоваров.Организация КАК Руководители,
	|	ПеремещениеТоваров.ОрганизацияПолучатель КАК Грузополучатель,
	|	ПеремещениеТоваров.Организация КАК Грузоотправитель,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
	|	ПеремещениеТоваров.Организация.Код КАК Префикс,
	|	&СрокДоставки КАК СрокДоставки,
	|	&МаркаАвтомобиля КАК МаркаАвтомобиля,
	|	&МаркаПрицепа КАК МаркаПрицепа,
	|	&ГосНомерАвтомобиля КАК ГосНомерАвтомобиля,
	|	&ГосНомерПрицепа КАК ГосНомерПрицепа,
	|	&ПунктПогрузки КАК ПунктПогрузки,
	|	&ПунктРазгрузки КАК ПунктРазгрузки,
	|	&Водитель КАК Водитель,
	|	&Перевозчик КАК ПредставлениеПеревозчика,
	|	&Заказчик КАК ПредставлениеЗаказчика,
	|	&ВидПеревозки КАК ВидПеревозки,
	|	&ЛицензионнаяКарточка КАК ЛицензионнаяКарточка,
	|	&ВодительскоеУдостоверение КАК ВодительскоеУдостоверение,
	|	&ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	"""" КАК ДоверенностьНомер,
	|	"""" КАК ДоверенностьДата,
	|	"""" КАК ДоверенностьВыдана,
	|	"""" КАК ДоверенностьЛицо,
	|	НаименованияТоваров.Количество КАК КоличествоНаименований
	|ИЗ
	|	Документ.УЧ_ПеремещениеТоваров КАК ПеремещениеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СУММА(1) КАК Количество,
	|			СписокТоваров.Ссылка КАК Ссылка
	|		ИЗ
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ПеремещениеТоваровТовары.Ссылка КАК Ссылка,
	|				ПеремещениеТоваровТовары.Номенклатура КАК Номенклатура
	|			ИЗ
	|				Документ.УЧ_ПеремещениеТоваров.ТабличнаяЧасть КАК ПеремещениеТоваровТовары
	|			ГДЕ
	|				ПеремещениеТоваровТовары.Ссылка В(&МассивДокументов)) КАК СписокТоваров
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СписокТоваров.Ссылка) КАК НаименованияТоваров
	|		ПО ПеремещениеТоваров.Ссылка = НаименованияТоваров.Ссылка
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПеремещениеТоваров.Ссылка.Дата КАК ДатаТТН,
	|	ПеремещениеТоваров.Ссылка КАК Ссылка,
	|	ПеремещениеТоваров.Номенклатура КАК Номенклатура,
	|	ПеремещениеТоваров.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	ПеремещениеТоваров.Номенклатура.Код КАК ТоварКод,
	|	ПеремещениеТоваров.Количество КАК Количество,
	|	ПеремещениеТоваров.Номенклатура.ЕдиницаИзмерения.Наименование КАК ВидУпаковки,
	|	ПеремещениеТоваров.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	ВЫБОР
	|		КОГДА ПеремещениеТоваров.Количество = 0
	|			ТОГДА 0
	|		ИНАЧЕ ПеремещениеТоваров.Сумма / ПеремещениеТоваров.Количество
	|	КОНЕЦ КАК Цена,
	|	ПеремещениеТоваров.Количество * ПеремещениеТоваров.Номенклатура.ВесБрутто КАК МассаБрутто,
	|	ПеремещениеТоваров.Количество * ПеремещениеТоваров.Номенклатура.ВесНетто КАК МассаНетто,
	|	ПеремещениеТоваров.Количество КАК КоличествоМест,
	|	ПеремещениеТоваров.Сумма КАК Сумма,
	|	0 КАК СуммаНДС,
	|	ПеремещениеТоваров.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ПеремещениеТоваров.Номенклатура.PLU = 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Весовой
	|ИЗ
	|	Документ.УЧ_ПеремещениеТоваров.ТабличнаяЧасть КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаТТН,
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
		
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	Запрос.УстановитьПараметр("СрокДоставки", ПараметрыПечати.СрокДоставки);
	Запрос.УстановитьПараметр("МаркаАвтомобиля", ПараметрыПечати.МаркаАвтомобиля);
	Запрос.УстановитьПараметр("МаркаПрицепа", ПараметрыПечати.МаркаПрицепа);
	Запрос.УстановитьПараметр("ГосНомерАвтомобиля", ПараметрыПечати.ГосНомерАвтомобиля);
	Запрос.УстановитьПараметр("ГосНомерПрицепа", ПараметрыПечати.ГосНомерПрицепа);
	Запрос.УстановитьПараметр("ПунктПогрузки", ПараметрыПечати.ПунктПогрузки);
	Запрос.УстановитьПараметр("ПунктРазгрузки", ПараметрыПечати.ПунктРазгрузки);
	Запрос.УстановитьПараметр("Водитель", ПараметрыПечати.Водитель);
	Запрос.УстановитьПараметр("Перевозчик", ПараметрыПечати.Перевозчик);
	Запрос.УстановитьПараметр("Заказчик", ПараметрыПечати.Заказчик);
	Запрос.УстановитьПараметр("ВидПеревозки", ПараметрыПечати.ВидПеревозки);
	Запрос.УстановитьПараметр("ЛицензионнаяКарточка", ПараметрыПечати.ЛицензионнаяКарточка);
	Запрос.УстановитьПараметр("ВодительскоеУдостоверение", ПараметрыПечати.ВодительскоеУдостоверение);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС", Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_ТТН";
	
	ФормированиеПечатныхФормСервер.ЗаполнитьТабличныйДокументТТН(ТабличныйДокумент, Запрос, ОбъектыПечати);
		
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатьОписиНоменклатуры(МассивОбъектов, ОбъектыПечати)
	
	КолонкаКодов       = ФормированиеПечатныхФормСервер.ИмяДополнительнойКолонки();
	ВыводитьКоды       = ЗначениеЗаполнено(КолонкаКодов);
	ТабличныйДокумент  = Новый ТабличныйДокумент;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокументов.МагазинОтправитель КАК Отправитель,
	|	ТаблицаДокументов.МагазинПолучатель КАК Получатель,
	|	ТаблицаДокументов.СкладОтправитель КАК СкладОтправитель,
	|	ТаблицаДокументов.СкладПолучатель КАК СкладПолучатель,
	|	ТаблицаДокументов.Организация КАК Организация,
	|	ТаблицаДокументов.Ссылка
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивОбъектов)";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	СтруктураПечати = Новый Структура;
	СтруктураПечати.Вставить("ИмяРеквизита1", НСтр("ru = 'Организация'"));
	СтруктураПечати.Вставить("ИмяРеквизита2", НСтр("ru = 'Отправитель'"));
	СтруктураПечати.Вставить("ИмяРеквизита3", НСтр("ru = 'Склад отправитель'"));
	СтруктураПечати.Вставить("ИмяРеквизита4", НСтр("ru = 'Получатель'"));
	СтруктураПечати.Вставить("ИмяРеквизита5", НСтр("ru = 'Склад получатель'"));
	СтруктураПечати.Вставить("КоличествоРеквизитов", 5);
	СтруктураПечати.Вставить("ВыводитьКоды", ВыводитьКоды);
	СтруктураПечати.Вставить("КолонкаКодов", КолонкаКодов);
	
	ПервыйДокумент = Истина;
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураПечати.Вставить("Документ", Выборка.Ссылка);
		СтруктураПечати.Вставить("Реквизит1", Выборка.Организация);
		СтруктураПечати.Вставить("Реквизит2", Выборка.Отправитель);
		СтруктураПечати.Вставить("Реквизит3", Выборка.СкладОтправитель);
		СтруктураПечати.Вставить("Реквизит4", Выборка.Получатель);
		СтруктураПечати.Вставить("Реквизит5", Выборка.СкладПолучатель);
		
		//УправлениеПечатьюРТ.ПечатьОписиНоменклатуры(ТабличныйДокумент, ОбъектыПечати, СтруктураПечати, ПервыйДокумент);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Функция формирует печатную форму документа.
//
Функция ПечатьТОРГ12(МассивОбъектов, ОбъектыПечати = Неопределено, КомплектыПечати = Неопределено) Экспорт
	
	КолонкаКодов = "Код";
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументКПечати.Ссылка КАК Ссылка,
	|	ДокументКПечати.Номер КАК Номер,
	|	ДокументКПечати.Дата КАК Дата,
	|	ДокументКПечати.ОрганизацияПолучатель КАК Контрагент,
	|	ДокументКПечати.Организация КАК Организация,
	|	ДокументКПечати.Организация КАК Руководители,
	|	ДокументКПечати.Организация.Код КАК Префикс,
	|	ДокументКПечати.Организация КАК Грузоотправитель,
	|	ДокументКПечати.ОрганизацияПолучатель КАК Грузополучатель,
	|	ДокументКПечати.Организация КАК Поставщик,
	|	ДокументКПечати.ОрганизацияПолучатель КАК Покупатель,
	|	ДокументКПечати.ОрганизацияПолучатель КАК Плательщик,
	|	"""" КАК ОтветственноеЛицо,
	|	ДокументКПечати.ОрганизацияПолучатель.ОсновнойБанковскийСчет КАК БанковскийСчетКонтрагента,
	|	ДокументКПечати.Организация.ОсновнойБанковскийСчет КАК БанковскийСчетОрганизации,
	|	ИСТИНА КАК ЦенаВключаетНДС,
	|	ИСТИНА КАК УчитыватьНДС,
	|	ДокументКПечати.Подразделение,
	|	ВЫРАЗИТЬ(ДокументКПечати.Договор КАК Справочник.ДоговорыКонтрагентов).Наименование КАК Основание,
	|	ВЫРАЗИТЬ(ДокументКПечати.Договор КАК Справочник.ДоговорыКонтрагентов).Номер КАК НомерДоговора,
	|	ВЫРАЗИТЬ(ДокументКПечати.Договор КАК Справочник.ДоговорыКонтрагентов).ДатаДоговора КАК ДатаДоговора,
	|	ДокументКПечати.ПодразделениеПолучатель
	|ИЗ
	|	Документ.УЧ_ПеремещениеТоваров КАК ДокументКПечати
	|ГДЕ
	|	ДокументКПечати.Ссылка В(&МассивДокументов)
	|	И ДокументКПечати.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура.Код КАК ТоварКод,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ЕдиницаИзмеренияМест.Представление КАК ВидУпаковки,
	|	ВложенныйЗапрос.КоэффициентМест / ВложенныйЗапрос.Коэффициент КАК КоличествоВОдномМесте,
	|	ВложенныйЗапрос.СтавкаНДС КАК СтавкаНДС,
	|	ВложенныйЗапрос.Цена КАК Цена,
	|	ВложенныйЗапрос.Количество КАК Количество,
	|	ЕСТЬNULL(ВложенныйЗапрос.КоличествоМест, 0) КАК КоличествоМест,
	|	ВложенныйЗапрос.Сумма КАК Сумма,
	|	ВложенныйЗапрос.СуммаНДС КАК СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	ВложенныйЗапрос.МассаБрутто КАК МассаБрутто,
	|	ЛОЖЬ КАК ЭтоВозвратнаяТара
	|ИЗ
	|	(ВЫБРАТЬ
	|		Товары.Ссылка КАК Ссылка,
	|		Товары.Номенклатура КАК Номенклатура,
	|		1 КАК Коэффициент,
	|		Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		1 КАК КоэффициентМест,
	|		Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияМест,
	|		Товары.Количество * Товары.Номенклатура.ВесБрутто КАК МассаБрутто,
	|		Товары.СтавкаНДС КАК СтавкаНДС,
	|		Товары.Цена КАК Цена,
	|		Товары.Количество КАК Количество,
	|		Товары.Количество КАК КоличествоМест,
	|		Товары.Сумма КАК Сумма,
	|		Товары.СуммаНДС КАК СуммаНДС,
	|		Товары.НомерСтроки КАК НомерСтроки
	|	ИЗ
	|		Документ.УЧ_ПеремещениеТоваров.ТабличнаяЧасть КАК Товары
	|	ГДЕ
	|		Товары.Ссылка В(&МассивДокументов)
	|		И Товары.Ссылка.Проведен
	|		И Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка");
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВозвратТоваровПоставщику_ТОРГ12";
	
	ЕдиницаИзмеренияВеса           = Неопределено;
	
	ТабличныйДокумент.ПолеСлева = 5;
	ТабличныйДокумент.ПолеСправа = 5;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ДанныеПечати = МассивРезультатов[0].Выбрать();
	ВыборкаПоДокументам = МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ТОРГ12");
	
	ПервыйДокумент = Истина;
	Пока ДанныеПечати.Следующий() Цикл
		
		//Для печати комплектов
		Если КомплектыПечати <> Неопределено И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено Тогда
			КомплектПечатиПоСсылке = КомплектыПечати.Найти(ДанныеПечати.Ссылка,"Ссылка");
			Если КомплектПечатиПоСсылке = Неопределено Тогда
				КомплектПечатиПоСсылке = КомплектыПечати[0];
			КонецЕсли;
			Если КомплектПечатиПоСсылке.Экземпляров = 0 Тогда
				Продолжить
			КонецЕсли;
		КонецЕсли;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		СведенияОПоставщике       = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ДанныеПечати.Поставщик,        ДанныеПечати.Дата,, ДанныеПечати.БанковскийСчетОрганизации);
		СведенияОПокупателе       = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ДанныеПечати.Покупатель,       ДанныеПечати.Дата,, ДанныеПечати.БанковскийСчетКонтрагента);
		СведенияОГрузополучателе  = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ДанныеПечати.Грузополучатель,  ДанныеПечати.Дата,, ДанныеПечати.БанковскийСчетКонтрагента);
		СведенияОГрузоотправитель = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ДанныеПечати.Грузоотправитель, ДанныеПечати.Дата,, ДанныеПечати.БанковскийСчетОрганизации);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		ОбластьМакета.Параметры.НомерДокумента = ДанныеПечати.Номер;
		ОбластьМакета.Параметры.ДатаДокумента  = ДанныеПечати.Дата;
		
		Если ДанныеПечати.Организация = ДанныеПечати.Грузоотправитель Тогда
			
			//Ходин. Выводим на печать адрес ОП
			СведенияОПоставщике.ФактическийАдрес = ФормированиеПечатныхФормСервер.ПолучитьАдресИзКонтактнойИнформации(ДанныеПечати.Подразделение);
						
			ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике, 
			"ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
			
		Иначе
			
			ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОГрузоотправитель, 
			"ПолноеНаименование,ИНН,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
			
		КонецЕсли;
		
		
		
		//Ходин. Выводим на печать адрес ОП
		СведенияОГрузополучателе.ФактическийАдрес = ФормированиеПечатныхФормСервер.ПолучитьАдресИзКонтактнойИнформации(ДанныеПечати.ПодразделениеПолучатель);
		
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОГрузополучателе, 
		"ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		
		//Ходин. Заменим адрес поставщика Елакс. Топорно, но пока не вижу смысла делать по уму
		Если ДанныеПечати.Дата < Дата(2017, 1, 26) И СведенияОПоставщике.ИНН = "7729534123" Тогда
			СведенияОПоставщике.ЮридическийАдрес = "105318, Москва г, Вельяминовская ул, дом № 6";
		КонецЕсли;
		
		ОбластьМакета.Параметры.ПредставлениеПоставщика  = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике, 
		"ПолноеНаименование,ИНН,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		
		ОбластьМакета.Параметры.ПредставлениеПлательщика = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПокупателе, 
		"ПолноеНаименование,ИНН,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		
		//ОбластьМакета.Параметры.ПредставлениеПодразделения = ДанныеПечати.Подразделение.Код + "; КПП: " + ДанныеПечати.Подразделение.КПП + "; Адрес: " + Справочники.СтруктураПредприятия.ПолучитьАдресИзКонтактнойИнформации(ДанныеПечати.Подразделение);
		ОбластьМакета.Параметры.ПредставлениеПодразделения = "Склад"; //Ходин по запросы Спиридоновой
		
		//Ходин. Тоже топорно, пока не вижу смысла делать по уму
		Если СведенияОПоставщике.ИНН = "7729534123" Тогда
			ОбластьМакета.Параметры.Основание = "Договор поставки";
		КонецЕсли;
		
		//проставим адрес магазина получателя
		//ОбластьМакета.Параметры.АдресДоставки = Справочники.СтруктураПредприятия.ПолучитьАдресИзКонтактнойИнформации(ДанныеПечати.ПодразделениеПолучатель);//ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОГрузополучателе, "ФактическийАдрес");
		
		// Выводим коды
		ОбластьМакета.Параметры.ОрганизацияПоОКПО          = СведенияОПоставщике.КодПоОКПО;
		ОбластьМакета.Параметры.ВидДеятельностиПоОКДП      = ДанныеПечати.Грузополучатель.КодПоОКДП;
		ОбластьМакета.Параметры.ГрузополучательПоОКПО      = СведенияОПокупателе.КодПоОКПО;
		ОбластьМакета.Параметры.ПоставщикПоОКПО            = СведенияОПоставщике.КодПоОКПО;
		ОбластьМакета.Параметры.ПлательщикПоОКПО           = СведенияОПокупателе.КодПоОКПО;
		ОбластьМакета.Параметры.ОснованиеНомер             = ДанныеПечати.НомерДоговора;
		ОбластьМакета.Параметры.ОснованиеДата              = Формат(ДанныеПечати.ДатаДоговора, "ДФ=dd.MM.yyyy");
		ОбластьМакета.Параметры.ТранспортнаяНакладнаяНомер = "";
		ОбластьМакета.Параметры.ТранспортнаяНакладнаяДата  = "";
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		НомерСтраницы = 1;
		
		ИтоговыеСуммы = Новый Структура;
		
		// Инициализация итогов по странице.
		ИтоговыеСуммы.Вставить("ИтогоМассаБруттоНаСтранице", 0);
		ИтоговыеСуммы.Вставить("ИтогоМестНаСтранице", 0);
		ИтоговыеСуммы.Вставить("ИтогоКоличествоНаСтранице", 0);
		ИтоговыеСуммы.Вставить("ИтогоСуммаНаСтранице", 0);
		ИтоговыеСуммы.Вставить("ИтогоНДСНаСтранице", 0);
		ИтоговыеСуммы.Вставить("ИтогоСуммаСНДСНаСтранице", 0);
		ИтоговыеСуммы.Вставить("ИтогоМассаБруттоНаСтранице", 0);
		ИтоговыеСуммы.Вставить("ИтогоМассаНеттоНаСтранице", 0);
		
		// Инициализация итогов по документу.
		ИтоговыеСуммы.Вставить("ИтогоМассаБрутто", 0);
		ИтоговыеСуммы.Вставить("ИтогоМест", 0);
		ИтоговыеСуммы.Вставить("ИтогоКоличество", 0);
		ИтоговыеСуммы.Вставить("ИтогоСуммаСНДС", 0);
		ИтоговыеСуммы.Вставить("ИтогоСумма", 0);
		ИтоговыеСуммы.Вставить("ИтогоНДС", 0);
		ИтоговыеСуммы.Вставить("ИтогоМассаБрутто", 0);
		ИтоговыеСуммы.Вставить("ИтогоМассаНетто", 0);
		
		ИтоговыеСуммы.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", 0);
		ИтоговыеСуммы.Вставить("СуммаПрописью", "");
		
		ДанныеСтроки = Новый Структура;
		ДанныеСтроки.Вставить("Номер", 0);
		ДанныеСтроки.Вставить("Мест", 0);
		ДанныеСтроки.Вставить("Количество", 0);
		ДанныеСтроки.Вставить("Цена", 0);
		ДанныеСтроки.Вставить("СуммаБезНДС", 0);
		ДанныеСтроки.Вставить("СуммаНДС", 0);
		ДанныеСтроки.Вставить("СуммаСНДС", 0);
		ДанныеСтроки.Вставить("МассаБрутто", 0);
		ДанныеСтроки.Вставить("МассаНетто", 0);
		
		
		// Создаем массив для проверки вывода.
		МассивВыводимыхОбластей = Новый Массив;
		
		// Выводим многострочную часть документа.
		ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
		ОбластьМакета           = Макет.ПолучитьОбласть("Строка");
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьВсего            = Макет.ПолучитьОбласть("Всего");
		ОбластьПодвала          = Макет.ПолучитьОбласть("Подвал");
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
		
		КоличествоСтрок = ВыборкаПоДокументам.Количество();
		
		СтрокаТовары = ВыборкаПоДокументам.Выбрать();
		Пока СтрокаТовары.Следующий() Цикл
			
			//Ходин. Не выводим строки с пустой суммой
			Если СтрокаТовары.Сумма = 0 И СтрокаТовары.СуммаНДС = 0 Тогда Продолжить КонецЕсли;
			
			ДанныеСтроки.Номер = ДанныеСтроки.Номер + 1;
			
			ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
			ОбластьМакета.Параметры.ТоварНаименование = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(СтрокаТовары.ТоварНаименование);
			
			ДанныеСтроки.Мест = СтрокаТовары.КоличествоМест;
			ДанныеСтроки.Количество  = СтрокаТовары.Количество;
			
			Если ЕдиницаИзмеренияВеса <> Неопределено Тогда
				Если Не ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
					ДанныеСтроки.МассаБрутто = 0;
				Иначе
					ДанныеСтроки.МассаБрутто = СтрокаТовары.МассаБрутто;
				КонецЕсли;
			КонецЕсли;
			
			ДанныеСтроки.СуммаСНДС   = Окр((СтрокаТовары.Сумма + ?(ДанныеПечати.ЦенаВключаетНДС, 0, СтрокаТовары.СуммаНДС)), 2);
			ДанныеСтроки.СуммаНДС    = СтрокаТовары.СуммаНДС;
			ДанныеСтроки.СуммаБезНДС = ДанныеСтроки.СуммаСНДС - ДанныеСтроки.СуммаНДС;
			
			Если ДанныеПечати.ЦенаВключаетНДС Тогда
				ДанныеСтроки.Цена = ?(ДанныеСтроки.Количество = 0, 0, ДанныеСтроки.СуммаБезНДС / ДанныеСтроки.Количество);
			Иначе
				ДанныеСтроки.Цена = СтрокаТовары.Цена;
			КонецЕсли;
			
			ОбластьМакета.Параметры.Заполнить(ДанныеСтроки);
			
			Если ДанныеСтроки.Номер = 1 Тогда // первая строка
				
				ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
				ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
				
			Иначе
				
				МассивВыводимыхОбластей.Очистить();
				МассивВыводимыхОбластей.Добавить(ОбластьМакета);
				МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
				
				Если ДанныеСтроки.Номер = КоличествоСтрок Тогда
					
					МассивВыводимыхОбластей.Добавить(ОбластьВсего);
					МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
					
				КонецЕсли;
				
				Если ДанныеСтроки.Номер <> 1 И Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
					
					ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
					ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
					
					ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице = 0;
					ИтоговыеСуммы.ИтогоМассаНеттоНаСтранице  = 0;
					ИтоговыеСуммы.ИтогоМестНаСтранице        = 0;
					ИтоговыеСуммы.ИтогоКоличествоНаСтранице  = 0;
					ИтоговыеСуммы.ИтогоСуммаНаСтранице       = 0;
					ИтоговыеСуммы.ИтогоНДСНаСтранице         = 0;
					ИтоговыеСуммы.ИтогоСуммаСНДСНаСтранице   = 0;
					
					НомерСтраницы = НомерСтраницы + 1;
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
					ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Увеличим итоги по странице.
			ИтоговыеСуммы.ИтогоМестНаСтранице        = ИтоговыеСуммы.ИтогоМестНаСтранице        + ДанныеСтроки.Мест;
			ИтоговыеСуммы.ИтогоКоличествоНаСтранице  = ИтоговыеСуммы.ИтогоКоличествоНаСтранице  + ДанныеСтроки.Количество;
			ИтоговыеСуммы.ИтогоСуммаНаСтранице       = ИтоговыеСуммы.ИтогоСуммаНаСтранице       + ДанныеСтроки.СуммаБезНДС;
			ИтоговыеСуммы.ИтогоНДСНаСтранице         = ИтоговыеСуммы.ИтогоНДСНаСтранице         + ДанныеСтроки.СуммаНДС;
			ИтоговыеСуммы.ИтогоСуммаСНДСНаСтранице   = ИтоговыеСуммы.ИтогоСуммаСНДСНаСтранице   + ДанныеСтроки.СуммаСНДС;
			ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице = ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице + ДанныеСтроки.МассаБрутто;
			ИтоговыеСуммы.ИтогоМассаНеттоНаСтранице  = ИтоговыеСуммы.ИтогоМассаНеттоНаСтранице  + ДанныеСтроки.МассаНетто;
			
			// Увеличим итоги по документу.
			ИтоговыеСуммы.ИтогоМест        = ИтоговыеСуммы.ИтогоМест        + ДанныеСтроки.Мест;
			ИтоговыеСуммы.ИтогоКоличество  = ИтоговыеСуммы.ИтогоКоличество  + ДанныеСтроки.Количество;
			ИтоговыеСуммы.ИтогоСумма       = ИтоговыеСуммы.ИтогоСумма       + ДанныеСтроки.СуммаБезНДС;
			ИтоговыеСуммы.ИтогоНДС         = ИтоговыеСуммы.ИтогоНДС         + ДанныеСтроки.СуммаНДС;
			ИтоговыеСуммы.ИтогоСуммаСНДС   = ИтоговыеСуммы.ИтогоСуммаСНДС   + ДанныеСтроки.СуммаСНДС;
			ИтоговыеСуммы.ИтогоМассаБрутто = ИтоговыеСуммы.ИтогоМассаБрутто + ДанныеСтроки.МассаБрутто;
			ИтоговыеСуммы.ИтогоМассаНетто  = ИтоговыеСуммы.ИтогоМассаНетто  + ДанныеСтроки.МассаНетто;
			
		КонецЦикла;
		
		// Выводим итоги по последней странице.
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
		
		ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
		
		// Выводим итоги по документу в целом.
		ОбластьМакета = Макет.ПолучитьОбласть("Всего");
		ОбластьМакета.Параметры.Заполнить(ИтоговыеСуммы);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим подвал документа
		
		ИтоговыеСуммы.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", ЧислоПрописью(ДанныеСтроки.Номер, ,",,,,,,,,0"));
		ИтоговыеСуммы.Вставить("СуммаПрописью", ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(ИтоговыеСуммы.ИтогоСуммаСНДС));
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		
		ПолнаяДатаДокумента = Формат(ДанныеПечати.Дата, "ДЛФ=ДД");
		ДлинаСтроки = СтрДлина(ПолнаяДатаДокумента);
		ПервыйРазделитель = Найти(ПолнаяДатаДокумента, " ");
		ВторойРазделитель = Найти(Прав(ПолнаяДатаДокумента, ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
		ОбластьМакета.Параметры.ДатаДокументаДень = """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель -1 ) + """";
		ОбластьМакета.Параметры.ДатаДокументаМесяц = Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1);
		ОбластьМакета.Параметры.ДатаДокументаГод = Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель);
		
		Руководители = ФормированиеПечатныхФормСервер.ОтветственныеЛицаОрганизаций(ДанныеПечати.Руководители, ДанныеПечати.Дата);
		
		ОбластьМакета.Параметры.ФИОГлавБухгалтера     = ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(Руководители.ГлавныйБухгалтер);
		ОбластьМакета.Параметры.ФИОРуководителя       = ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(Руководители.Руководитель);
		ОбластьМакета.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;
		СтруктураФИО = ФормированиеПечатныхФормСервер.ФамилияИмяОтчество(ДанныеПечати.ОтветственноеЛицо, ДанныеПечати.Дата);
		ОбластьМакета.Параметры.ФИОКладовщика         = ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(Неопределено,СтруктураФИО.Фамилия,СтруктураФИО.Имя,СтруктураФИО.Отчество);
		
		Если ИтоговыеСуммы.ИтогоМест > 0 Тогда
			
			ОбластьМакета.Параметры.ВсегоМестПрописью = ЧислоПрописью(ИтоговыеСуммы.ИтогоМест, ,",,,,,,,,0");
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) И ИтоговыеСуммы.ИтогоМассаБрутто > 0 Тогда
			
			ОбластьМакета.Параметры.МассаГрузаПрописью = ЧислоПрописью(ИтоговыеСуммы.ИтогоМассаБрутто, ,",,,,,,,,0")+ " " + СокрЛП(ЕдиницаИзмеренияВеса) + ".";
			
		КонецЕсли;
		
		ОбластьМакета.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписейПрописью;
		ОбластьМакета.Параметры.СуммаПрописью = ИтоговыеСуммы.СуммаПрописью;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выведем нужное количество экземпляров (при печати комплектов)
		Если КомплектыПечати <> Неопределено И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено И КомплектПечатиПоСсылке.Экземпляров > 1 Тогда
			ОбластьКопирования = ТабличныйДокумент.ПолучитьОбласть(НомерСтрокиНачало,,ТабличныйДокумент.ВысотаТаблицы);
			Для Итератор = 2 По КомплектПечатиПоСсылке.Экземпляров Цикл
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьКопирования);
			КонецЦикла;
		КонецЕсли;
		
		Если Не ОбъектыПечати = Неопределено Тогда
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
	
КонецФункции

Функция ПечатьТОРГ2(МассивОбъектов, ОбъектыПечати = Неопределено, КомплектыПечати = Неопределено) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	СформироватьТекстЗапросаТОРГ2(Запрос.Текст);
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваров_ТОРГ2";
	
	Макет = Документы.УЧ_ПоступлениеТоваров.ПолучитьМакет("ПФ_MXL_ТОРГ2");
	
	ПакетРезультатов 			= Запрос.ВыполнитьПакет();
	ДанныеПечати 				= ПакетРезультатов[0].Выбрать();
	ТаблицаТоваров 				= ПакетРезультатов[3].Выгрузить();
	ТаблицаТоваровПоДокументам 	= ПакетРезультатов[4].Выгрузить();
	
	ПервыйДокумент = Истина;
	КолонкаКодов = "Код";
	
	Если НЕ ЗначениеЗаполнено(КолонкаКодов) Тогда
		КолонкаКодов = "Артикул";
	КонецЕсли;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		//Для печати комплектов
		Если КомплектыПечати <> Неопределено И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено Тогда
			КомплектПечатиПоСсылке = КомплектыПечати.Найти(ДанныеПечати.Ссылка,"Ссылка");
			Если КомплектПечатиПоСсылке = Неопределено Тогда
				КомплектПечатиПоСсылке = КомплектыПечати[0];
			КонецЕсли;
			Если КомплектПечатиПоСсылке.Экземпляров = 0 Тогда
				Продолжить
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеПечати.ОшибкаНетРасхождений Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В документе %1 нет расхождений. Печать акта об установленном расхождении по количеству и качеству при приемке %2 не требуется.'"),
			ДанныеПечати.Ссылка,
			НСтр("ru='товарно-материальных ценностей'"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДанныеПечати.Ссылка);
			Продолжить;
		КонецЕсли;
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТекстНДСВШапкеТаблицы = ?(ДанныеПечати.ЦенаВключаетНДС, "", " " + НСтр("ru='(Без НДС)'"));
		
		// Страница №1 ////////////////////////////////////////////////////////////////////////////////////////////////////
		// Вывод шапки
		Область = Макет.ПолучитьОбласть("ШапкаПервойСтраницы");
		Область.Параметры.Заполнить(ДанныеПечати);
		Область.Параметры.НомерДокумента = ДанныеПечати.НомерДокумента;
		Область.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.ДатаДокумента), "ПолноеНаименование,ЮридическийАдрес,Телефоны,");
		Область.Параметры.Поставщик = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ДанныеПечати.Поставщик, ДанныеПечати.ДатаДокумента), "ПолноеНаименование,ЮридическийАдрес,Телефоны,");
		Область.Параметры.Грузоотправитель = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ДанныеПечати.Поставщик, ДанныеПечати.ДатаДокумента), "ПолноеНаименование,ЮридическийАдрес,Телефоны,");
		Область.Параметры.ОснованиеДляСоставленияАкта = НСтр("ru='приказ, распоряжение'");
		СведенияОПокупателе = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ДанныеПечати.Организация,      ДанныеПечати.ДатаДокумента);
		Область.Параметры.ОрганизацияПоОКПО = СведенияОПокупателе.КодПоОКПО;
		АдресПодразделения = Справочники.СтруктураПредприятия.ПолучитьАдресИзКонтактнойИнформации(ДанныеПечати.ПредставлениеПодразделения);
		Область.Параметры.МестоПриемкиТовара = АдресПодразделения;
		
		Область.Параметры.ДатаДоставкиТоваровДень = День(ДанныеПечати.ДатаДокумента);
		Область.Параметры.ДатаДоставкиТоваровМесяц = Формат(ДанныеПечати.ДатаДокумента, "ДФ=MMMM"); 
		Область.Параметры.ДатаДоставкиТоваровГод = Год(ДанныеПечати.ДатаДокумента);
		
		Область.Параметры.ПереченьСопроводительныхДокументов = "ТТН № " + ДанныеПечати.НомерВходящегоДокумента + " от " + Формат(ДанныеПечати.ДатаВходящегоДокумента, "ДЛФ=D");
		
		Область.Параметры.НомерДоговораПоставки = ДанныеПечати.Договор.Номер;
		Область.Параметры.ДатаДоговораПоставкиДень = День(ДанныеПечати.Договор.ДатаДоговора);
		Область.Параметры.ДатаДоговораПоставкиМесяц = Формат(ДанныеПечати.Договор.ДатаДоговора, "ДФ=MMMM");
		Область.Параметры.ДатаДоговораПоставкиГод = Год(ДанныеПечати.Договор.ДатаДоговора);
		
		Область.Параметры.НомерСчетаФактуры = ДанныеПечати.НомерВходящегоСчФ;
		Область.Параметры.ДатаСчетаФактурыДень = День(ДанныеПечати.ДатаВходящегоСчФ);
		Область.Параметры.ДатаСчетаФактурыМесяц = Формат(ДанныеПечати.ДатаВходящегоСчФ, "ДФ=MMMM");
		Область.Параметры.ДатаСчетаФактурыГод = Год(ДанныеПечати.ДатаВходящегоСчФ);
		
		Область.Параметры.СпособДоставки = "автотранспорт";
		
		Область.Параметры.ДатаОтправленияТоваровДень = День(ДанныеПечати.ДатаВходящегоДокумента);
		Область.Параметры.ДатаОтправленияТоваровМесяц = Формат(ДанныеПечати.ДатаВходящегоДокумента, "ДФ=MMMM"); 
		Область.Параметры.ДатаОтправленияТоваровГод = Год(ДанныеПечати.ДатаВходящегоДокумента);
		
		Область.Параметры.СкладОтправителяТовара = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ДанныеПечати.Поставщик, ДанныеПечати.ДатаДокумента), "ФактическийАдрес");
		
		Руководители = ФормированиеПечатныхФормСервер.ОтветственныеЛицаОрганизаций(ДанныеПечати.Организация, ДанныеПечати.ДатаДокумента);
		Область.Параметры.РуководительФИО = Руководители.Руководитель;
		Область.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;
		
		ТабличныйДокумент.Вывести(Область);
		
		// Вывод таблицы приемки товаров.
		
		Область = Макет.ПолучитьОбласть("ТаблицаПриемкиТоваровШапка");
		ТабличныйДокумент.Вывести(Область);
		КоличествоСтрокРучногоВвода = 4;
		Для Счетчик =1 По КоличествоСтрокРучногоВвода Цикл
			Область = Макет.ПолучитьОбласть("ТаблицаПриемкиТоваровСтрока");
			ТабличныйДокумент.Вывести(Область);
		КонецЦикла;
		Область = Макет.ПолучитьОбласть("ТаблицаПриемкиТоваровПодвал");
		ТабличныйДокумент.Вывести(Область);
		
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		// Страница №2 ////////////////////////////////////////////////////////////////////////////////////////////////////
		
		// Вывод шапки
		Область = Макет.ПолучитьОбласть("ШапкаВторойСтраницы");
		Область.Параметры.НомерДокумента = ДанныеПечати.НомерДокумента;
		ТабличныйДокумент.Вывести(Область);
		
		
		// Вывод состояния транспорта по документам.
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "СостояниеТранспортаПоДокументам", 4);
		
		// Вывод таблицы товаров по документам.
		Область = Макет.ПолучитьОбласть("ТаблицаТоваровПоДокументамШапка");
		ТабличныйДокумент.Вывести(Область);
		Строки = ТаблицаТоваровПоДокументам.НайтиСтроки(Новый Структура("Ссылка",ДанныеПечати.Ссылка));
		Для Каждого Строка Из Строки Цикл
			Область = Макет.ПолучитьОбласть("ТаблицаТоваровПоДокументамСтрока");
			Область.Параметры.Заполнить(Строка);
			Область.Параметры.Товар = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(Строка.НоменклатураНаименование);
			ТабличныйДокумент.Вывести(Область);
		КонецЦикла;
		Область = Макет.ПолучитьОбласть("ТаблицаТоваровПоДокументамПодвал");
		ТабличныйДокумент.Вывести(Область);
		
		// Вывод состояния транспорта по факту.
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "СостояниеТранспортаПоФакту", 4);
		
		// Вывод таблицы итогов
		Область = Макет.ПолучитьОбласть("ТаблицаИтогов");
		Область.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(Область);
		
		
		// Вывод первой части таблицы товаров.
		Область = Макет.ПолучитьОбласть("ТаблицаТоваров1Шапка");
		Область.Параметры.НДС = ТекстНДСВШапкеТаблицы;
		ТабличныйДокумент.Вывести(Область);
		Область = Макет.ПолучитьОбласть("ТаблицаТоваров1Строка");
		Товары = ТаблицаТоваров.НайтиСтроки(Новый Структура("Ссылка", ДанныеПечати.Ссылка));
		Для Каждого Товар Из Товары Цикл
			Область.Параметры.Заполнить(Товар);
			Область.Параметры.Товар = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(Товар.НоменклатураНаименование);
			Область.Параметры.ЗначениеКода = Товар[КолонкаКодов];
			ТабличныйДокумент.Вывести(Область);
		КонецЦикла;
		Область = Макет.ПолучитьОбласть("ТаблицаТоваров1Подвал");
		ТабличныйДокумент.Вывести(Область);
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		// Страница №3 ////////////////////////////////////////////////////////////////////////////////////////////////////
		
		// Вывод шапки
		Область = Макет.ПолучитьОбласть("ШапкаТретьейСтраницы");
		Область.Параметры.НомерДокумента = ДанныеПечати.НомерДокумента;
		ТабличныйДокумент.Вывести(Область);
		
		// Вывод Условий Хранения Товара До Вскрытия
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "УсловияХраненияТовараДоВскрытия", 4);
		
		// Вывод Температуры При Разгрузке
		Область = Макет.ПолучитьОбласть("ТемператураПриРазгрузке");
		ТабличныйДокумент.Вывести(Область);
		
		// Вывод Состояния Тары И Упаковки
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "СостояниеТарыИУпаковки", 4);
		
		// Вывод содержания наружной маркировки.
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "СодержаниеНаружнойМаркировки", 4);
		
		// Вывод даты вскрытия тары
		Область = Макет.ПолучитьОбласть("ДатаВскрытияТары");
		Область.Параметры.ДатаВскрытияТарыДень = День(ДанныеПечати.ДатаДокумента);
		Область.Параметры.ДатаВскрытияТарыМесяц = Формат(ДанныеПечати.ДатаДокумента, "ДФ=MMMM");
		Область.Параметры.ДатаВскрытияТарыГод = Год(ДанныеПечати.ДатаДокумента);
		ТабличныйДокумент.Вывести(Область);
		
		// Вывод Организации Взвесившей И Опломбировавшей Товар
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "ОрганизацияВзвесившаяИОпломбировавшаяТовар", 4);
		
		// Вывод порядка Отбора Товара Для Выборочной Проверки
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "ПорядокОтбораТовараДляВыборочнойПроверки", 4);
		
		// Вывод второй части таблицы товаров.
		Область = Макет.ПолучитьОбласть("ТаблицаТоваров2Шапка");
		Область.Параметры.НДС = ТекстНДСВШапкеТаблицы;
		ТабличныйДокумент.Вывести(Область);
		Область = Макет.ПолучитьОбласть("ТаблицаТоваров2Строка");
		Для Каждого Товар Из Товары Цикл
			Область.Параметры.Заполнить(Товар);
			Если ЗначениеЗаполнено(КолонкаКодов) Тогда
				Область.Параметры.ЗначениеКода = Товар[КолонкаКодов];
			КонецЕсли;
			ТабличныйДокумент.Вывести(Область);
		КонецЦикла;
		Область = Макет.ПолучитьОбласть("ТаблицаТоваров2Подвал");
		ТабличныйДокумент.Вывести(Область);
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		// Страница №4 ////////////////////////////////////////////////////////////////////////////////////////////////////
		
		// Вывод шапки
		Область = Макет.ПолучитьОбласть("ШапкаЧетвертойСтраницы");
		Область.Параметры.НомерДокумента = ДанныеПечати.НомерДокумента;
		ТабличныйДокумент.Вывести(Область);
		
		// Вывод способа определения количества.
		Область = Макет.ПолучитьОбласть("СпособОпределенияКоличества");
		Область.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(Область);
		// Вывод места определения количества.
		МестоОпределенияКоличества = Макет.ПолучитьОбласть("МестоОпределенияКоличества");
		МестоОпределенияКоличества.Параметры.МестоОпределенияКоличества = АдресПодразделения;
		// Вывод сведений об исправности весоизмерительных приборов.
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "СведенияОбИсправностиВесоизмерительныхПриборов", 4);
		// Вывод прочих данных
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "ПрочиеДанные", 4);
		// Вывод подробного описания дефектов.
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "ПодробноеОписаниеДефектов", 4);
		// Вывод заключения комиссии
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "ЗаключениеКомиссии", 4);
		// Вывод приложения
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "Приложение", 4);
		
		// Вывод членов комиссии
		Область = Макет.ПолучитьОбласть("ЧленыКомиссии");
		Область.Параметры.Заполнить(ДанныеПечати);
		Область.Параметры.ДолжностьПредседателяКомиссии = "Управляющий";
		Область.Параметры.ДолжностьЧленаКомиссии1 = "Приемщик";
		Область.Параметры.ДолжностьЧленаКомиссии2 = "Прочий персонал";
		Область.Параметры.ГлавныйБухгалтерФИО = Руководители.ГлавныйБухгалтер;
		ТабличныйДокумент.Вывести(Область);
		
		// Вывод решения руководителя
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "РешениеРуководителя", 4);
		
		// Вывод кладовщика
		Область = Макет.ПолучитьОбласть("Кладовщик");
		ТабличныйДокумент.Вывести(Область);
		
		// Выведем нужное количество экземпляров (при печати комплектов)
		Если КомплектыПечати <> Неопределено И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено И КомплектПечатиПоСсылке.Экземпляров > 1 Тогда
			ОбластьКопирования = ТабличныйДокумент.ПолучитьОбласть(НомерСтрокиНачало,,ТабличныйДокумент.ВысотаТаблицы);
			Для Итератор = 2 По КомплектПечатиПоСсылке.Экземпляров Цикл
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьКопирования);
			КонецЦикла;
		КонецЕсли;
		
		Если Не ОбъектыПечати = Неопределено Тогда
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		КонецЕсли;	
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;

	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;

КонецФункции

// Выводит многострочное поле в табличный документ.
//
// Параметры:
// 		ТабличныйДокумент - ТабличныйДокумент
// 		Макет - ТабличныйДокумент - Макет табличного документа.
// 		ДанныеПечати - ВыборкаИзРезультатаЗапроса
// 		ИмяПоля - Строка - Имя реквизита результата запроса, имя области макета, имя параметра области макета.
// 		КоличествоСтрокРучногоВвода - Число - Количество строк ручного заполнения.
//
Процедура ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, ИмяПоля, КоличествоСтрокРучногоВвода = 4)
	
	Область = Макет.ПолучитьОбласть(ИмяПоля);
	ТабличныйДокумент.Вывести(Область);
	
	ОбластьСтрокиРучногоЗаполнения = Макет.ПолучитьОбласть("СтрокаРучногоЗаполнения");
	Для Счет =1 По КоличествоСтрокРучногоВвода Цикл
		ТабличныйДокумент.Вывести(ОбластьСтрокиРучногоЗаполнения);
	КонецЦикла;
	
	ОбластьСтрокиПробела = Макет.ПолучитьОбласть("СтрокаПробела");
	ТабличныйДокумент.Вывести(ОбластьСтрокиПробела);
	
КонецПроцедуры

Процедура СформироватьТекстЗапросаТОРГ2(ТекстЗапроса)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПеремещениеТоваров.Ссылка,
	|	ПеремещениеТоваров.Номер КАК НомерДокумента,
	|	ПеремещениеТоваров.Дата КАК ДатаДокумента,
	|	ПеремещениеТоваров.Организация КАК Организация,
	|	ПеремещениеТоваров.Организация.Код КАК Префикс,
	|	ПеремещениеТоваров.Подразделение КАК ПредставлениеПодразделения,
	|	ПеремещениеТоваров.ОрганизацияПолучатель КАК Поставщик,
	|	ИСТИНА КАК ЦенаВключаетНДС,
	|	ЛОЖЬ КАК ОшибкаНетРасхождений,
	|	ПеремещениеТоваров.ДокОснование,
	|	ПеремещениеТоваров.ДокОснование.Номер КАК НомерВходящегоДокумента,
	|	ПеремещениеТоваров.ДокОснование.Дата КАК ДатаВходящегоДокумента,
	|	ВЫРАЗИТЬ(ПеремещениеТоваров.Договор КАК Справочник.ДоговорыКонтрагентов) КАК Договор,
	|	ПеремещениеТоваров.ДокОснование.НомерСчетФактуры КАК НомерВходящегоСчФ,
	|	ПеремещениеТоваров.ДокОснование.ДатаСчетФактуры КАК ДатаВходящегоСчФ
	|ИЗ
	|	Документ.УЧ_ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПеремещенияТоваровТовары.Ссылка КАК Ссылка,
	|	ПеремещенияТоваровТовары.Номенклатура КАК Номенклатура,
	|	"""" КАК Упаковка,
	|	ПеремещенияТоваровТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ЕСТЬNULL(ПеремещенияТоваровТовары.Количество, 0)) КАК Количество,
	|	ЕСТЬNULL(ПеремещенияТоваровТовары.Цена, 0) КАК Цена,
	|	СУММА(ЕСТЬNULL(ПеремещенияТоваровТовары.Сумма, 0)) КАК Сумма,
	|	ПеремещенияТоваровТовары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ЕСТЬNULL(ПеремещенияТоваровТовары.СуммаНДС, 0)) КАК СуммаНДС,
	|	ВЫРАЗИТЬ(ПеремещенияТоваровТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК НоменклатураНаименование,
	|	ПеремещенияТоваровТовары.Номенклатура.Код КАК Код,
	|	ПеремещенияТоваровТовары.Номенклатура.Артикул КАК Артикул,
	|	ИСТИНА КАК ЦенаВключаетНДС,
	|	МИНИМУМ(ПеремещенияТоваровТовары.НомерСтроки + 1000) КАК НомерСтроки,
	|	ПеремещенияТоваровТовары.Ссылка.ДокОснование
	|ПОМЕСТИТЬ ТоварыПоФакту
	|ИЗ
	|	Документ.УЧ_ПеремещениеТоваров.ТабличнаяЧасть КАК ПеремещенияТоваровТовары
	|ГДЕ
	|	ПеремещенияТоваровТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|	И ПеремещенияТоваровТовары.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПеремещенияТоваровТовары.Номенклатура,
	|	ЕСТЬNULL(ПеремещенияТоваровТовары.Цена, 0),
	|	ПеремещенияТоваровТовары.СтавкаНДС,
	|	ВЫРАЗИТЬ(ПеремещенияТоваровТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)),
	|	ПеремещенияТоваровТовары.Номенклатура.Код,
	|	ПеремещенияТоваровТовары.Номенклатура.Артикул,
	|	ПеремещенияТоваровТовары.Номенклатура.ЕдиницаИзмерения,
	|	ПеремещенияТоваровТовары.Ссылка,
	|	ПеремещенияТоваровТовары.Ссылка.ДокОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПеремещенияТоваровТабличнаяЧасть.Ссылка КАК Ссылка,
	|	ПеремещенияТоваровТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	"""" КАК Упаковка,
	|	ПеремещенияТоваровТабличнаяЧасть.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ЕСТЬNULL(ПеремещенияТоваровТабличнаяЧасть.Количество, 0)) КАК Количество,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПеремещенияТоваровТабличнаяЧасть.Количество, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ПеремещенияТоваровТабличнаяЧасть.Сумма, 0) / ЕСТЬNULL(ПеремещенияТоваровТабличнаяЧасть.Количество, 0)
	|	КОНЕЦ КАК Цена,
	|	СУММА(ЕСТЬNULL(ПеремещенияТоваровТабличнаяЧасть.Сумма, 0)) КАК Сумма,
	|	ЕСТЬNULL(ПеремещенияТоваровТабличнаяЧасть.СтавкаНДС, 0) КАК СтавкаНДС,
	|	СУММА(ЕСТЬNULL(ПеремещенияТоваровТабличнаяЧасть.СуммаНДС, 0)) КАК СуммаНДС,
	|	ВЫРАЗИТЬ(ПеремещенияТоваровТабличнаяЧасть.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК НоменклатураНаименование,
	|	ПеремещенияТоваровТабличнаяЧасть.Номенклатура.Код КАК Код,
	|	ПеремещенияТоваровТабличнаяЧасть.Номенклатура.Артикул КАК Артикул,
	|	ИСТИНА КАК ЦенаВключаетНДС,
	|	МИНИМУМ(ПеремещенияТоваровТабличнаяЧасть.НомерСтроки) КАК НомерСтроки,
	|	ПеремещенияТоваровТабличнаяЧасть.Ссылка КАК Заказ
	|ПОМЕСТИТЬ ТоварыПоДокументам
	|ИЗ
	|	Документ.УЧ_ПеремещениеТоваров.ТабличнаяЧасть КАК ПеремещенияТоваровТабличнаяЧасть
	|ГДЕ
	|	ПеремещенияТоваровТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|	И ПеремещенияТоваровТабличнаяЧасть.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПеремещенияТоваровТабличнаяЧасть.Номенклатура,
	|	ЕСТЬNULL(ПеремещенияТоваровТабличнаяЧасть.СтавкаНДС, 0),
	|	ВЫРАЗИТЬ(ПеремещенияТоваровТабличнаяЧасть.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)),
	|	ПеремещенияТоваровТабличнаяЧасть.Номенклатура.Код,
	|	ПеремещенияТоваровТабличнаяЧасть.Номенклатура.Артикул,
	|	ПеремещенияТоваровТабличнаяЧасть.Номенклатура.ЕдиницаИзмерения,
	|	ПеремещенияТоваровТабличнаяЧасть.Ссылка,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПеремещенияТоваровТабличнаяЧасть.Количество, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ПеремещенияТоваровТабличнаяЧасть.Сумма, 0) / ЕСТЬNULL(ПеремещенияТоваровТабличнаяЧасть.Количество, 0)
	|	КОНЕЦ,
	|	ПеремещенияТоваровТабличнаяЧасть.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТоварыПоДокументам.Ссылка, ТоварыПоФакту.Ссылка) КАК Ссылка,
	|	ЕСТЬNULL(ТоварыПоДокументам.Номенклатура, ТоварыПоФакту.Номенклатура) КАК Номенклатура,
	|	ЕСТЬNULL(ТоварыПоДокументам.Упаковка, ТоварыПоФакту.Упаковка) КАК Упаковка,
	|	ЕСТЬNULL(ТоварыПоДокументам.Количество, 0) КАК КоличествоПоДокументам,
	|	ЕСТЬNULL(ТоварыПоДокументам.Цена, 0) КАК ЦенаПоДокументам,
	|	ЕСТЬNULL(ТоварыПоДокументам.Сумма, 0) КАК СуммаПоДокументам,
	|	ТоварыПоДокументам.СтавкаНДС КАК СтавкаНДСПоДокументам,
	|	ЕСТЬNULL(ТоварыПоДокументам.СуммаНДС, 0) КАК СуммаНДСПоДокументам,
	|	ЕСТЬNULL(ТоварыПоФакту.Количество, 0) КАК КоличествоПоФакту,
	|	ЕСТЬNULL(ТоварыПоФакту.Цена, 0) КАК ЦенаПоФакту,
	|	ЕСТЬNULL(ТоварыПоФакту.Сумма, 0) КАК СуммаПоФакту,
	|	ТоварыПоФакту.СтавкаНДС КАК СтавкаНДСПоФакту,
	|	ЕСТЬNULL(ТоварыПоФакту.СуммаНДС, 0) КАК СуммаНДСПоФакту,
	|	ЕСТЬNULL(ТоварыПоДокументам.Код, ТоварыПоФакту.Код) КАК Код,
	|	ЕСТЬNULL(ТоварыПоДокументам.Артикул, ТоварыПоФакту.Артикул) КАК Артикул,
	|	ЕСТЬNULL(ТоварыПоДокументам.ЕдиницаИзмерения, ТоварыПоФакту.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ТоварыПоДокументам.ЕдиницаИзмерения.Код, ТоварыПоФакту.ЕдиницаИзмерения.Код) КАК КодПоОКЕИ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТоварыПоФакту.Количество, 0) - ЕСТЬNULL(ТоварыПоДокументам.Количество, 0) > 0
	|			ТОГДА ЕСТЬNULL(ТоварыПоФакту.Количество, 0) - ЕСТЬNULL(ТоварыПоДокументам.Количество, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоИзлишек,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТоварыПоДокументам.Количество, 0) - ЕСТЬNULL(ТоварыПоФакту.Количество, 0) > 0
	|			ТОГДА ЕСТЬNULL(ТоварыПоДокументам.Количество, 0) - ЕСТЬNULL(ТоварыПоФакту.Количество, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоНедостача,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТоварыПоФакту.Сумма, 0) - ЕСТЬNULL(ТоварыПоДокументам.Сумма, 0) > 0
	|			ТОГДА ЕСТЬNULL(ТоварыПоФакту.Сумма, 0) - ЕСТЬNULL(ТоварыПоДокументам.Сумма, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаИзлишек,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТоварыПоДокументам.Сумма, 0) - ЕСТЬNULL(ТоварыПоФакту.Сумма, 0) > 0
	|			ТОГДА ЕСТЬNULL(ТоварыПоДокументам.Сумма, 0) - ЕСТЬNULL(ТоварыПоФакту.Сумма, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаНедостача,
	|	ЕСТЬNULL(ТоварыПоДокументам.НоменклатураНаименование, ТоварыПоФакту.НоменклатураНаименование) КАК НоменклатураНаименование,
	|	ЕСТЬNULL(ТоварыПоФакту.ЦенаВключаетНДС, ЛОЖЬ) КАК ЦенаВключаетНДСПоФакту,
	|	ЕСТЬNULL(ТоварыПоДокументам.ЦенаВключаетНДС, ЛОЖЬ) КАК ЦенаВключаетНДСПоДокументам,
	|	ЕСТЬNULL(ТоварыПоДокументам.НомерСтроки, ТоварыПоФакту.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	ТоварыПоДокументам КАК ТоварыПоДокументам
	|		ПОЛНОЕ СОЕДИНЕНИЕ ТоварыПоФакту КАК ТоварыПоФакту
	|		ПО ТоварыПоДокументам.Ссылка = ТоварыПоФакту.Ссылка
	|			И ТоварыПоДокументам.Номенклатура = ТоварыПоФакту.Номенклатура
	|			И ТоварыПоДокументам.Упаковка = ТоварыПоФакту.Упаковка
	|			И ТоварыПоДокументам.Цена = ТоварыПоФакту.Цена
	|			И ТоварыПоДокументам.ЕдиницаИзмерения = ТоварыПоФакту.ЕдиницаИзмерения
	|			И ТоварыПоДокументам.СтавкаНДС = ТоварыПоФакту.СтавкаНДС
	|ГДЕ
	|	ЕСТЬNULL(ТоварыПоФакту.Сумма, 0) <> ЕСТЬNULL(ТоварыПоДокументам.Сумма, 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыПоДокументам.Ссылка КАК Ссылка,
	|	ТоварыПоДокументам.Упаковка,
	|	ТоварыПоДокументам.ЕдиницаИзмерения,
	|	ТоварыПоДокументам.НоменклатураНаименование,
	|	ТоварыПоДокументам.НомерСтроки КАК НомерСтроки,
	|	ТоварыПоДокументам.Количество,
	|	ТоварыПоДокументам.Количество КАК КоличествоМест
	|ИЗ
	|	ТоварыПоДокументам КАК ТоварыПоДокументам
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	
КонецПроцедуры

// Функция получает данные для печатной формы Счета-фактуры.
//
Функция ПолучитьДанныеДляПечатнойФормыСчетФактура(ПараметрыПечати, МассивОбъектов) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка КАК Ссылка,
	|	ДанныеДокументов.Организация КАК Организация,
	|	Истина КАК ЦенаВключаетНДС,
	|	ДанныеДокументов.Подразделение
	|ПОМЕСТИТЬ ТаблицаДанныхДокументов
	|ИЗ
	|	Документ.УЧ_ПеремещениеТоваров КАК ДанныеДокументов
	|ГДЕ
	|	ДанныеДокументов.Ссылка В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Выполнить();
	
	ПоместитьВременнуюТаблицуТоваров(МенеджерВременныхТаблиц);
	ПоместитьВременнуюТаблицуСчетовФактур(МенеджерВременныхТаблиц);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	&ПредставлениеСчетФактура КАК ПредставлениеДокумента,
	|	ЕСТЬNULL(СчетаФактуры.Номер, НЕОПРЕДЕЛЕНО) КАК Номер,
	|	ЕСТЬNULL(СчетаФактуры.Дата, НЕОПРЕДЕЛЕНО) КАК Дата,
	|	ЕСТЬNULL(СчетаФактуры.НомерИсправления, НЕОПРЕДЕЛЕНО) КАК НомерИсправления,
	|	ЕСТЬNULL(СчетаФактуры.ДатаИсправления, НЕОПРЕДЕЛЕНО) КАК ДатаИсправления,
	|	ЕСТЬNULL(СчетаФактуры.Исправление, ЛОЖЬ) КАК Исправление,
	|	НЕОПРЕДЕЛЕНО КАК НомерСчетаФактуры,
	|	НЕОПРЕДЕЛЕНО КАК ДатаСчетаФактуры,
	|	НЕОПРЕДЕЛЕНО КАК НомерИсправленияСчетаФактуры,
	|	НЕОПРЕДЕЛЕНО КАК ДатаИсправленияСчетаФактуры,
	|	ЕСТЬNULL(СчетаФактуры.СтрокаПлатежноРасчетныеДокументы, """") КАК СтрокаПоДокументу,
	|	ЕСТЬNULL(СчетаФактуры.Валюта, НЕОПРЕДЕЛЕНО) КАК ВалютаСчетаФактуры,
	|	ДанныеДокумента.ОрганизацияПолучатель КАК Контрагент,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Организация.Код КАК Префикс,
	|	ДанныеДокумента.ОрганизацияПолучатель КАК Грузополучатель,
	|	ДанныеДокумента.Организация КАК Грузоотправитель,
	|	"""" КАК АдресДоставки,
	|	ЛОЖЬ КАК ТолькоУслуги,
	|	ДанныеДокумента.Подразделение
	|ИЗ
	|	Документ.УЧ_ПеремещениеТоваров КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанныхДокументов КАК ФильтрПоДокументу
	|		ПО ДанныеДокумента.Ссылка = ФильтрПоДокументу.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетовФактур КАК СчетаФактуры
	|		ПО ДанныеДокумента.Ссылка = СчетаФактуры.ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
	|	ТаблицаДокумента.Номенклатура.НаименованиеПолное КАК НоменклатураНаименование,
	|	ТаблицаДокумента.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаДокумента.Номенклатура.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияНаименование,
	|	ТаблицаДокумента.Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаДокумента.Количество КАК Количество,
	|	ТаблицаДокумента.СуммаНДС КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ЦенаВключаетНДС
	|			ТОГДА ТаблицаДокумента.Сумма
	|		ИНАЧЕ ТаблицаДокумента.Сумма + ТаблицаДокумента.СуммаНДС
	|	КОНЕЦ КАК СуммаСНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ЦенаВключаетНДС
	|			ТОГДА ТаблицаДокумента.Сумма - ТаблицаДокумента.СуммаНДС
	|		ИНАЧЕ ТаблицаДокумента.Сумма + ТаблицаДокумента.СуммаНДС - ТаблицаДокумента.СуммаНДС
	|	КОНЕЦ КАК СуммаБезНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ЦенаВключаетНДС
	|			ТОГДА (ТаблицаДокумента.Сумма - ТаблицаДокумента.СуммаНДС) / ТаблицаДокумента.Количество
	|		ИНАЧЕ ТаблицаДокумента.Цена
	|	КОНЕЦ КАК Цена,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.СтранаПроисхождения,
	|	ТаблицаДокумента.НомерГТД
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("ПредставлениеСчетФактура", НСтр("ru='счет-фактура'"));
	
	МассивРезультатов         = Запрос.ВыполнитьПакет();
	РезультатПоШапке          = МассивРезультатов[0];
	РезультатПоТабличнойЧасти = МассивРезультатов[1];
	
	СтруктураДанныхДляПечати 	= Новый Структура("РезультатПоШапке, РезультатПоТабличнойЧасти",
	                                               РезультатПоШапке, РезультатПоТабличнойЧасти);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

// Формирует временную таблицу, содержащую табличную часть по таблице данных документов.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц, содержащий таблицу
//	                                                    ТаблицаДанныхДокументов с полями: Ссылка.
//
Процедура ПоместитьВременнуюТаблицуТоваров(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.НомерСтроки,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Количество,
	|	ТаблицаТоваров.Номенклатура.ЕдиницаИзмерения КАК Упаковка,
	|	ТаблицаТоваров.Количество КАК Количество1,
	|	ТаблицаТоваров.Цена,
	|	ТаблицаТоваров.Сумма,
	|	ТаблицаТоваров.СтавкаНДС,
	|	ТаблицаТоваров.СуммаНДС,
	|	ДанныеДокументов.ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоТовар,
	|	ТаблицаТоваров.Номенклатура.НомерГТД КАК НомерГТД,
	//|	ТаблицаТоваров.Номенклатура.Страна КАК СтранаПроисхождения
	|	Значение(Справочник.СтраныМира.ПустаяСсылка) КАК СтранаПроисхождения
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	Документ.УЧ_ПеремещениеТоваров.ТабличнаяЧасть КАК ТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанныхДокументов КАК ДанныеДокументов
	|		ПО ТаблицаТоваров.Ссылка = ДанныеДокументов.Ссылка";

	
	Запрос.Выполнить();
	
КонецПроцедуры

// Формирует временную таблицу, содержащую данные счетов-фактур по таблице данных документов-оснований.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц, содержащий таблицу
//	                                                    ТаблицаДанныхДокументов с полями:
//		Ссылка,
//		Организация,
//		Подразделение,
//		Склад.
//
Процедура ПоместитьВременнуюТаблицуСчетовФактур(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УЧ_ПеремещениеТоваров.Ссылка КАК ДокументОснование,
	|	ВЫБОР
	|		КОГДА УЧ_ПеремещениеТоваров.ИсправлениеСФ
	|			ТОГДА УЧ_ПеремещениеТоваровИсправленныеСФ.ДатаИсправления
	|		ИНАЧЕ УЧ_ПеремещениеТоваров.ДатаСчетФактуры
	|	КОНЕЦ КАК Дата,
	|	МАКСИМУМ(УЧ_ПеремещениеТоваровИсправленныеСФ.НомерИсправления) КАК НомерИсправления
	|ПОМЕСТИТЬ НомераИсправлений
	|ИЗ
	|	ТаблицаДанныхДокументов КАК ТаблицаДанныхДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УЧ_ПеремещениеТоваров КАК УЧ_ПеремещениеТоваров
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.УЧ_ПеремещениеТоваров.ИсправленныеСФ КАК УЧ_ПеремещениеТоваровИсправленныеСФ
	|			ПО УЧ_ПеремещениеТоваров.Ссылка = УЧ_ПеремещениеТоваровИсправленныеСФ.Ссылка
	|		ПО ТаблицаДанныхДокументов.Ссылка = УЧ_ПеремещениеТоваров.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	УЧ_ПеремещениеТоваров.Ссылка,
	|	ВЫБОР
	|		КОГДА УЧ_ПеремещениеТоваров.ИсправлениеСФ
	|			ТОГДА УЧ_ПеремещениеТоваровИсправленныеСФ.ДатаИсправления
	|		ИНАЧЕ УЧ_ПеремещениеТоваров.ДатаСчетФактуры
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УЧ_ПеремещениеТоваров.Ссылка КАК ДокументОснование,
	|	УЧ_ПеремещениеТоваров.ИсправлениеСФ КАК Исправление,
	|	УЧ_ПеремещениеТоваров.НомерСчетФактуры КАК Номер,
	|	УЧ_ПеремещениеТоваров.Организация,
	|	УЧ_ПеремещениеТоваров.Организация КАК Грузоотправитель,
	|	УЧ_ПеремещениеТоваров.Предприятие.ОсновнаяВалютаУчета КАК Валюта,
	|	УЧ_ПеремещениеТоваров.СтрокаПлатежноРасчетныеДокументы,
	|	ВЫБОР
	|		КОГДА УЧ_ПеремещениеТоваров.ИсправлениеСФ
	|			ТОГДА ЕСТЬNULL(УЧ_ПеремещениеТоваров.ДатаСчетФактуры, ДАТАВРЕМЯ(1, 1, 1))
	|		ИНАЧЕ НомераИсправлений.Дата
	|	КОНЕЦ КАК Дата,
	|	ВЫБОР
	|		КОГДА УЧ_ПеремещениеТоваров.ИсправлениеСФ
	|			ТОГДА НомераИсправлений.НомерИсправления
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НомерИсправления,
	|	ВЫБОР
	|		КОГДА УЧ_ПеремещениеТоваров.ИсправлениеСФ
	|			ТОГДА НомераИсправлений.Дата
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДатаИсправления
	|ПОМЕСТИТЬ ТаблицаСчетовФактур
	|ИЗ
	|	Документ.УЧ_ПеремещениеТоваров КАК УЧ_ПеремещениеТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НомераИсправлений КАК НомераИсправлений
	|		ПО УЧ_ПеремещениеТоваров.Ссылка = НомераИсправлений.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НомераИсправлений";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РеквизитыДокумента = БюджетныйНаСервере.ВернутьРеквизиты(Данные.Ссылка, "ВидОперации");
	Если НЕ РеквизитыДокумента = Неопределено И ЗначениеЗаполнено(РеквизитыДокумента.ВидОперации) Тогда
		Представление = Строка(РеквизитыДокумента.ВидОперации) + " (упр) " + Строка(Данные.Номер) + " от " + Строка(Данные.Дата);	
	КонецЕсли;
КонецПроцедуры
