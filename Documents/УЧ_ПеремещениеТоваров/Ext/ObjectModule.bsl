
Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если РучнаяКорректировка Тогда		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Движения документа %1 отредактированы вручную и не могут быть автоматически актуализированы'"), ЭтотОбъект);
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.КлючДанных = Ссылка;
		Сообщение.Сообщить();		
		
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Если ДополнительныеСвойства.Свойство("ИзмененаДатаДокумента") Тогда
		Движения.Учетный.Записать();	
	КонецЕсли;
	
	ПеренесеноИзАстор = (УчетПартий.Количество() > 0);
	
	//Супербоб для возврата алкашки, удалить по окончании
	//ТаблицаРеквизитов = УправлениеСвойствами.ПолучитьЗначенияСвойств(Ссылка,,,ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Проводки на забаланс (вирт. перемещение) (Перемещение ТМЦ)", Истина));
	//Если ТаблицаРеквизитов.Количество() И ТаблицаРеквизитов[0].Значение Тогда
	//	ПеремещениеНаЗабаланс = Истина;
	//	СчетЗабаланс = ПланыСчетов.Учетный.НайтиПоКоду("ВОЗВ");
	//Иначе
		ПеремещениеНаЗабаланс = Ложь;
	//КонецЕсли;	
    //
	
	ЭтоПеремещениеНаПредприятие = (ВидОперации = Перечисления.ВидыПеремещений.ПеремещениеНаПредприятие); 
	ЭтоПеремещениеНаПредприятиеБезВозмещения = (ВидОперации = Перечисления.ВидыПеремещений.ПеремещениеНаПредприятиеБезВозмещения); 
	
	СтатьяПоУмолчанию = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Списание недостач", Истина);
	СлужбаПоУмолчанию = Справочники.Субконто.НайтиПоНаименованию("Производство_общее");
	ПроизводственноеПодразделение = ПодразделениеПолучатель.ПроизводственноеПодразделение;
	СчетЗатратыПроизводство = ПланыСчетов.Учетный.Счет25();//.ОсновноеПрво;
	СчетСебестоимость = ПланыСчетов.Учетный.Счет9002();//.Себестоимость;
	СтатьяФормальнаяСебестоимость = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Формальная себестоимость", Истина);;
	
	
	СоответствиеСчета = ДополнительныеСвойства.Соответствия;
	СоответствиеУчетаПоПодразделениям = ДополнительныеСвойства.СоответствияУчетаПодразделений;
	
	СоотвРодителяПодр = ДополнительныеСвойства.СоотвРодителяПодр;
	
	ЭтоПоступлениеСОбособленногоПодразделения = ДополнительныеСвойства.ЭтоПоступлениеСОбособленногоПодразделения;	
	ЭтоПеремещениеНаОбособленноеПодразделение = ДополнительныеСвойства.ЭтоПеремещениеНаОбособленноеПодразделение;	
	
	РезультатОстатки = ДополнительныеСвойства.РезультатОстатки;
	РезультатКонтроль = ДополнительныеСвойства.РезультатКонтроль;
	РезультатКонтрольМинусов = ДополнительныеСвойства.РезультатКонтрольМинусов;
	
	//Если АвтоПереводНоменклатуры Тогда
	//	Для Каждого СтрокаРеал Из ТабличнаяЧасть Цикл
	//		Если СтрокаРеал.Номенклатура.ПризнакНоменклатуры = "Перевод в №2" И ЗначениеЗаполнено(СтрокаРеал.Номенклатура.НоменклатураПервичная) Тогда
	//			ВыбТовары.Добавить(СтрокаРеал.Номенклатура.НоменклатураПервичная);	
	//		КонецЕсли;
	//	КонецЦикла;	
	//КонецЕсли;	
	
	//Движения.Учетный.Записывать = Истина;
	//ТабличнаяЧастьСверн = ТабличнаяЧасть.Выгрузить();
	//ТабличнаяЧастьСверн.Свернуть("Номенклатура, СерияНоменклатуры, СчетУчетаБУ, НовыйСчетУчетаБУ, Характеристика, НомерСтроки", "Количество, Сумма, СуммаНДС");  
	
	Для Каждого ТекСтрокаТабличнаяЧасть Из ТабличнаяЧасть Цикл
		//Супербоб для возврата алкашки, удалить по окончании
		//Если ПеремещениеНаЗабаланс Тогда
		//	Движение = Движения.Учетный.Добавить();
		//	Движение.Период = Дата;
		//	Движение.СценарийПлана = Справочники.СценарииПланирования.Факт;
		//	Движение.Предприятия = Предприятие;
		//	
		//	Движение.СчетДт = СчетЗабаланс;
		//	Если Движение.СчетДт.УчетПоПодразделениям Тогда
		//		Движение.ПодразделениеДт = Подразделение;
		//	КонецЕсли;
		//	Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Документ", Истина)] = Ссылка;
		//	Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина)] = ТекСтрокаТабличнаяЧасть.Номенклатура;
		//	
		//	Если ЭтоПоступлениеСОбособленногоПодразделения Тогда
		//		СтруктураПоиска = Новый Структура("Склад, Счет, Подразделение", ТекСтрокаТабличнаяЧасть.Номенклатура, СчетЗабаланс, ПодразделениеПолучатель);
		//	Иначе	
		//		СтруктураПоиска = Новый Структура("Склад, Счет, Подразделение", ТекСтрокаТабличнаяЧасть.Номенклатура, СчетЗабаланс, Подразделение);
		//	КонецЕсли;
		//	
		//	ВыборкаДетальныеЗаписи = РезультатОстатки.НайтиСтроки(СтруктураПоиска);
		//	Если ВыборкаДетальныеЗаписи.Количество() Тогда
		//		Движение.Сумма = ВыборкаДетальныеЗаписи[0].Цена * ТекСтрокаТабличнаяЧасть.Количество;
		//	Иначе
		//		Движение.Сумма = 0;
		//	КонецЕсли;
		//	Движение.КоличествоДт = ТекСтрокаТабличнаяЧасть.Количество;
		//	
		//	Движение = Движения.Учетный.Добавить();
		//	Движение.Период = Дата;
		//	Движение.СценарийПлана = Справочники.СценарииПланирования.Факт;
		//	Движение.Предприятия = Предприятие;
		//	
		//	Движение.СчетКт = СчетЗабаланс;
		//	Если Движение.СчетКт.УчетПоПодразделениям Тогда
		//		Движение.ПодразделениеКт = ПодразделениеПолучатель;
		//	КонецЕсли;
		//	Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Документ", Истина)] = Ссылка;
		//	Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина)] = ТекСтрокаТабличнаяЧасть.Номенклатура;
		//	
		//	Если ЭтоПоступлениеСОбособленногоПодразделения Тогда
		//		СтруктураПоиска = Новый Структура("Номенклатура, Склад, Счет, Подразделение", ТекСтрокаТабличнаяЧасть.Номенклатура, Подразделение, Движение.СчетКт, ПодразделениеПолучатель);
		//	Иначе	
		//		СтруктураПоиска = Новый Структура("Номенклатура, Склад, Счет, Подразделение", ТекСтрокаТабличнаяЧасть.Номенклатура, Склад, Движение.СчетКт, Подразделение);
		//	КонецЕсли;
		//	
		//	ВыборкаДетальныеЗаписи = РезультатОстатки.НайтиСтроки(СтруктураПоиска);
		//	Если ВыборкаДетальныеЗаписи.Количество() Тогда
		//		Движение.Сумма = ВыборкаДетальныеЗаписи[0].Цена * ТекСтрокаТабличнаяЧасть.Количество;
		//	Иначе
		//		Движение.Сумма = 0;
		//	КонецЕсли;
		//	Движение.КоличествоКт = ТекСтрокаТабличнаяЧасть.Количество;
		//	Продолжить;
		//КонецЕсли;
		//
			
		Если АвтоПереводНоменклатуры И ТекСтрокаТабличнаяЧасть.Номенклатура.ПризнакНоменклатуры = "Перевод в №2" И ЗначениеЗаполнено(ТекСтрокаТабличнаяЧасть.Номенклатура.НоменклатураПервичная) Тогда
			ЕстьАвтоПереводНоменклатуры = Истина;
		Иначе
			ЕстьАвтоПереводНоменклатуры = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекСтрокаТабличнаяЧасть.СчетУчетаБУ) Тогда
			СчетКт = ТекСтрокаТабличнаяЧасть.СчетУчетаБУ;
		Иначе	
			Если ЭтоПоступлениеСОбособленногоПодразделения Тогда
				СчетКт = ПланыСчетов.Учетный.Счет45();
			Иначе
				СчетКт = СоответствиеСчета.Получить(ТекСтрокаТабличнаяЧасть.Номенклатура);	
			КонецЕсли;
		КонецЕсли;
		УчетПоподразделениямСчетУчета = СоответствиеУчетаПоПодразделениям.Получить(СчетКт);
		
		Если ЕстьАвтоПереводНоменклатуры Тогда
			СтруктураПоиска = Новый Структура("Номенклатура, Склад, Счет, Подразделение", ТекСтрокаТабличнаяЧасть.Номенклатура, Склад, СчетКт, Подразделение);
		Иначе
			Если УчетПоподразделениямСчетУчета Тогда
				Если ЭтоПоступлениеСОбособленногоПодразделения Тогда
					СтруктураПоиска = Новый Структура("Номенклатура, Склад, Счет, Подразделение", ТекСтрокаТабличнаяЧасть.Номенклатура, Подразделение, СчетКт, ПодразделениеПолучатель);
				Иначе	
					СтруктураПоиска = Новый Структура("Номенклатура, Склад, Счет, Подразделение", ТекСтрокаТабличнаяЧасть.Номенклатура, Склад, СчетКт, Подразделение);
				КонецЕсли;	
			Иначе
				Если ЭтоПоступлениеСОбособленногоПодразделения Тогда
					СтруктураПоиска = Новый Структура("Номенклатура, Склад, Счет", ТекСтрокаТабличнаяЧасть.Номенклатура, Подразделение, СчетКт);
				Иначе	
					СтруктураПоиска = Новый Структура("Номенклатура, Склад, Счет", ТекСтрокаТабличнаяЧасть.Номенклатура, Склад, СчетКт);
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи = РезультатОстатки.НайтиСтроки(СтруктураПоиска);
		Если ВыборкаДетальныеЗаписи.Количество() Тогда
			ТекСуммаСтрока = ВыборкаДетальныеЗаписи[0].Цена * ТекСтрокаТабличнаяЧасть.Количество;
			ТекЦена = ВыборкаДетальныеЗаписи[0].Цена;
		Иначе
			ТекСуммаСтрока = 0;
			ТекЦена = 0;
		КонецЕсли;
		
		НайденныеСерии = СерииНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура, НомерСтрокиРеализации", ТекСтрокаТабличнаяЧасть.Номенклатура, ТекСтрокаТабличнаяЧасть.НомерСтроки));
		МассивСерий = Новый Массив;
		Если НайденныеСерии.Количество() > 1 Тогда //несколько серий
			Для каждого ТекНайдСерия Из НайденныеСерии Цикл
				МассивСерий.Добавить(Новый Структура("СерияНоменклатуры, Количество, Сумма", ТекНайдСерия.СерияНоменклатуры, ТекНайдСерия.Количество, ?(ТекСтрокаТабличнаяЧасть.Количество, ТекСуммаСтрока / ТекСтрокаТабличнаяЧасть.Количество, 0) * ТекНайдСерия.Количество))	;
			КонецЦикла;	
		Иначе	
			МассивСерий.Добавить(Новый Структура("СерияНоменклатуры, Количество, Сумма", ТекСтрокаТабличнаяЧасть.СерияНоменклатуры, ТекСтрокаТабличнаяЧасть.Количество, ТекСуммаСтрока));
		КонецЕсли;
		
		СуммаОтклонение = ТекСуммаСтрока;
		ТекИндекс = 0;
		ТекСумма = 0;
		
		Для каждого ТекСерия Из МассивСерий Цикл
			
			Движение = Движения.Учетный.Добавить();
			Движение.Период = Дата;
			Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
			Движение.Предприятия = Предприятие;
			Если ЭтоПеремещениеНаОбособленноеПодразделение Тогда
				СчетДт = ПланыСчетов.Учетный.Счет45();
			Иначе
				СчетДт = ?(ЗначениеЗаполнено(ТекСтрокаТабличнаяЧасть.НовыйСчетУчетаБУ), ТекСтрокаТабличнаяЧасть.НовыйСчетУчетаБУ, СоответствиеСчета.Получить(ТекСтрокаТабличнаяЧасть.Номенклатура));
			КонецЕсли;	
			Движение.СчетДт = СчетДт;
			
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,1,ТекСтрокаТабличнаяЧасть.Номенклатура);
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,3,ТекСерия.СерияНоменклатуры);
			Если ЭтоПеремещениеНаОбособленноеПодразделение Тогда
				Если Движение.СчетДт.УчетПоПодразделениям Тогда
					Движение.ПодразделениеДт = ПодразделениеПолучатель;
				КонецЕсли;	
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Подразделения] = Подразделение;
			Иначе	
				Если Движение.СчетДт.УчетПоПодразделениям Тогда
					Движение.ПодразделениеДт = ПодразделениеПолучатель;
				КонецЕсли;
				Если ЭтоПеремещениеНаПредприятие Тогда
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,1,ПредприятиеПолучатель);
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,2,ВнутреннийДоговор);
				ИначеЕсли ЭтоПеремещениеНаПредприятиеБезВозмещения Тогда
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,1,ПредприятиеПолучатель);
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,2,ПодразделениеПолучатель);
				Иначе	
					Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина)] = СкладПолучатель;
				КонецЕсли;
			КонецЕсли;
			
			Если Движение.СчетДт.Количественный Тогда
				Движение.КоличествоДт = ТекСерия.Количество;
			КонецЕсли;
			
			Движение.СчетКт = СчетКт;
			
			Если ЭтоПоступлениеСОбособленногоПодразделения Тогда
				Если УчетПоподразделениямСчетУчета Тогда
					Движение.ПодразделениеКт = ПодразделениеПолучатель;
				КонецЕсли;
				Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Подразделения] = Подразделение;
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт,1,ТекСтрокаТабличнаяЧасть.Номенклатура);
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт,3,ТекСерия.СерияНоменклатуры);
				//Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина)] = ТекСтрокаТабличнаяЧасть.Номенклатура;
				Движение.КоличествоКт = ТекСерия.Количество;
			Иначе	
				Если УчетПоподразделениямСчетУчета Тогда
					Движение.ПодразделениеКт = Подразделение;
				КонецЕсли;
				Если Движение.СчетКт = ПланыСчетов.Учетный.Счет91() Тогда
					Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = Справочники.СтатьиДоходовРасходов.НайтиПоНаименованию("Списание материалов и ГП (недостачи/излишки)", Истина);
				Иначе	
					Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина)] = Склад;
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт,1,ТекСтрокаТабличнаяЧасть.Номенклатура);
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт,3,ТекСерия.СерияНоменклатуры);
					Движение.КоличествоКт = ТекСерия.Количество;
				КонецЕсли;
			КонецЕсли;
			
			Движение.Сумма = ТекСерия.Сумма;
			Движение.Содержание = Комментарий;
			
		КонецЦикла;
		
		СчетДт = Движение.СчетДт;
		
		//контроль выхода из минуса
		//Если НЕ ВидОперации = Перечисления.ВидыПеремещений.ПеремещениеНаОбособленноеПодразделение Тогда
		СтруктураПоискаМинусов = Новый Структура("Номенклатура", ТекСтрокаТабличнаяЧасть.Номенклатура); 
		НайденныеСтрокиМинусов = РезультатКонтрольМинусов.НайтиСтроки(СтруктураПоискаМинусов);
		Для каждого ТекСтрокаМинусов Из НайденныеСтрокиМинусов Цикл
			Если НЕ Окр(ТекСтрокаМинусов.СуммаКонечное + ТекСумма - ТекЦена * ТекСтрокаМинусов.КоличествоКонечное, 2) Тогда
				Продолжить;			
			КонецЕсли;
			Движение = Движения.Учетный.Добавить();
			Движение.Период = Дата;
			Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
			Движение.Предприятия = Предприятие;
			
			//вставка на выбор счета (обр №00000000687 Сети)
			Если ПроизводственноеПодразделение Тогда
				Движение.СчетДт = СчетЗатратыПроизводство;
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,1,СтатьяПоУмолчанию);
				Если Движение.СчетДт.ВидыСубконто.Количество() >= 2 Тогда
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,2,СлужбаПоУмолчанию);
				КонецЕсли;
			Иначе	
				Движение.СчетДт = СчетСебестоимость;
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,1,ТекСтрокаМинусов.Номенклатура);
				//УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,3,СтатьяФормальнаяСебестоимость);
			КонецЕсли;	
			//конец вставки

			Если Движение.СчетДт.УчетПоПодразделениям Тогда
				Движение.ПодразделениеДт = ПодразделениеПолучатель;
			КонецЕсли;
			Движение.СчетКт = СчетДт;
			Если Движение.СчетКт.УчетПоПодразделениям Тогда
				Движение.ПодразделениеКт = ПодразделениеПолучатель;
			КонецЕсли;	
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт,1,ТекСтрокаМинусов.Номенклатура);
			Если ЭтоПеремещениеНаОбособленноеПодразделение Тогда
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт,2,Подразделение);
			Иначе
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт,2,СкладПолучатель);
			КонецЕсли;
			Движение.Сумма = ТекСтрокаМинусов.СуммаКонечное + ТекСумма - ТекЦена * ТекСтрокаМинусов.КоличествоКонечное;
			Движение.Содержание = "Корректировка до с/с последнего перемещения " + Формат(ТекЦена, "ЧДЦ=2") ;
		КонецЦикла;
		//КонецЕсли; 
		
		//Авто перевод номенклатуры
		Если ЕстьАвтоПереводНоменклатуры Тогда
			Движение = Движения.Учетный.Добавить();
			Движение.Период = Дата;
			Движение.Предприятия = Предприятие;
			Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
			
			Движение.СчетДт = ?(ЗначениеЗаполнено(ТекСтрокаТабличнаяЧасть.СчетУчетаБУ), ТекСтрокаТабличнаяЧасть.СчетУчетаБУ, ПланыСчетов.Учетный.Счет41());;
			Движение.СчетКт = ?(ЗначениеЗаполнено(ТекСтрокаТабличнаяЧасть.СчетУчетаБУ), ТекСтрокаТабличнаяЧасть.СчетУчетаБУ, ПланыСчетов.Учетный.Счет41());;
			Если Движение.СчетДт.УчетПоПодразделениям Тогда
				Движение.ПодразделениеДт = Подразделение;
			КонецЕсли;
			Если Движение.СчетКт.УчетПоПодразделениям Тогда
				Движение.ПодразделениеКт = Подразделение;
			КонецЕсли;
			
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,1,ТекСтрокаТабличнаяЧасть.Номенклатура);
			//Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина)] = ТекСтрокаТабличнаяЧасть.Номенклатура;
			Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина)] = Склад;
			Движение.КоличествоДт = ТекСтрокаТабличнаяЧасть.Количество;
			
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт,1,ТекСтрокаТабличнаяЧасть.НоменклатураПервичная);
			//Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина)] = ТекСтрокаТабличнаяЧасть.Номенклатура.НоменклатураПервичная;
			Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина)] = Склад;
			Движение.КоличествоКт = ТекСтрокаТабличнаяЧасть.Количество;
			
			Если ЗначениеЗаполнено(ТекСтрокаТабличнаяЧасть.Сумма) Тогда
				Движение.Сумма = ТекСтрокаТабличнаяЧасть.Сумма;
			Иначе	
				Движение.Сумма = ТекСумма;
			КонецЕсли;
			Движение.Содержание = "Авто перевод номенклатуры";
		КонецЕсли;
	КонецЦикла;
			
	//меняем статус заказа
	Если НЕ ДополнительныеСвойства.Свойство("НеИзменятьСтатусЗаказа") И НЕ Отказ И ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
		Если Не ДокОснование.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт Тогда		
			ЗаказОб = ДокОснование.ПолучитьОбъект();
			ЗаказОб.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт;
			Если ЗаказОб.Проведен Тогда
				ЗаказОб.Записать(РежимЗаписиДокумента.Проведение);
			Иначе	
				ЗаказОб.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ И ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		Если ДокОснование.ВидОперации = Перечисления.ВидыЗаказов.ПеремещениеМеждуСкладами И Не ДокОснование.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт Тогда
			ДокЗаказ = ДокОснование.ПолучитьОбъект();
			ДокЗаказ.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт;
			ДокЗаказ.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	КонецЕсли;	
	
	// Контроль лтритцательных остатков
	//УЧ_Сервер.ПроверитьОтрицательныеОстатки(Ссылка,ПланыСчетов.Учетный.Счет41(),Отказ);
	
	НеКонтролироватьОстаткиСвойство = ?(ДополнительныеСвойства.Свойство("НеКонтролироватьОтрицательныеОстатки"), ДополнительныеСвойства.НеКонтролироватьОтрицательныеОстатки, Ложь);
	НеКонтролироватьОстатки = сабОбщегоНазначения.ПолучитьЗначениеСвойства(ПараметрыСеанса.ТекущийПользователь, "Разрешено проведение без контроля остатков");
	
	//контроль остатков новый
	Если НЕ ВидОперации = Перечисления.ВидыПеремещений.ПоступлениеСОбособленногоПодразделения И (Не НеКонтролироватьОстатки = Истина) И НЕ НеКонтролироватьОстаткиСвойство Тогда
		Для каждого ТекСтрокаМинус Из РезультатКонтроль Цикл
			Отказ = Истина;
			Сообщить(?(ТекСтрокаМинус.УчетПоПодразделениям, "По Подразделению " + Строка(ТекСтрокаМинус.Подразделение) + " ", "") + "На Складе """ + Строка(ТекСтрокаМинус.Склад) + """ номенклатуры """ + Строка(ТекСтрокаМинус.Номенклатура) + " (" + Строка(ТекСтрокаМинус.Номенклатура.Код)  + ")"" из необходимых " + Строка(ТекСтрокаМинус.КоличествоНужно) + " присутствует только "  + Строка(ТекСтрокаМинус.КоличествоОстаток) );
		КонецЦикла;
		Если Отказ Тогда
			ДополнительныеСвойства.Вставить("НехваткаОстатков", Истина);		
		КонецЕсли;
	КонецЕсли;
	
	//оптимизация проведения. проверка на изменения проводок
	сабОперОбщегоНазначения.ПроверитьПроводкиНаИзменение(Движения.Учетный, ДополнительныеСвойства.КоличественныеПоказателиПроводокДляПроверки); 
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если (РежимЗаписи = РежимЗаписиДокумента.Запись И Не ПометкаУдаления) Или РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если ВидОперации = Перечисления.ВидыПеремещений.ПоступлениеСОбособленногоПодразделения Тогда
			Если Подразделение = ПодразделениеПолучатель Тогда
				Сообщить("Подразделение-отправитель не может быть равно подразделению-получатель! Укажите корректные подразделения или используйте документ ""Внутреннее перемещение ТМЦ""");
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//Заполнить данные СФ по данным документа, если они не заполнены
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И ВидОперации = Перечисления.ВидыПеремещений.ПеремещениеНаОбособленноеПодразделение И Организация <> ОрганизацияПолучатель Тогда
		//ДополнительныеСвойства.Вставить("Проведение", Истина);
		Если Не ЗначениеЗаполнено(ДатаСчетФактуры) Тогда
			ДатаСчетФактуры = Дата;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НомерСчетФактуры) Тогда
			НомерСчетФактуры = Номер;
		КонецЕсли;
	КонецЕсли;
	
	//Обработка пометка удаления
	Если Не Ссылка.ПометкаУдаления И ПометкаУдаления Тогда	
		Запрос = новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	УЧ_ПеремещениеТоваров.Ссылка
		               |ИЗ
		               |	Документ.УЧ_ПеремещениеТоваров КАК УЧ_ПеремещениеТоваров
		               |ГДЕ
		               |	УЧ_ПеремещениеТоваров.ДокОснование = &ДокОснование
		               |	И НЕ УЧ_ПеремещениеТоваров.ПометкаУдаления
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	УЧ_ВозвратТоваровПоставщику.Ссылка
		               |ИЗ
		               |	Документ.УЧ_ВозвратТоваровПоставщику КАК УЧ_ВозвратТоваровПоставщику
		               |ГДЕ
		               |	УЧ_ВозвратТоваровПоставщику.ДокОснование = &ДокОснование
		               |	И НЕ УЧ_ВозвратТоваровПоставщику.ПометкаУдаления
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	УЧ_ПоступлениеТоваров.Ссылка
		               |ИЗ
		               |	Документ.УЧ_ПоступлениеТоваров КАК УЧ_ПоступлениеТоваров
		               |ГДЕ
		               |	УЧ_ПоступлениеТоваров.ДокОснование = &ДокОснование
		               |	И НЕ УЧ_ПоступлениеТоваров.ПометкаУдаления";
		Запрос.УстановитьПараметр("ДокОснование", ДокОснование);
		Выгрузка = Запрос.Выполнить().Выгрузить();
		
		Если Выгрузка.Количество() = 1 Тогда //остался единственный не помеченный подчиненный заказу документ - этот
			
			Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				
				Если ДокОснование.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт Тогда
					ЗаказОб = ДокОснование.ПолучитьОбъект();
					ЗаказОб.Статус = Перечисления.СтатусыЗаказовПоставщикам.Подтвержден;
					ЗаказОб.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
				
			КонецЕсли; 
			
		КонецЕсли;	
		
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("КоличественныеПоказателиПроводокДляПроверки", сабОперОбщегоНазначения.ПолучитьКоличественныеПоказателиПроводок(Ссылка));
	
	//проверка на изменение даты
	Если ЗначениеЗаполнено(Ссылка) И НЕ Дата = Ссылка.Дата Тогда
		ДополнительныеСвойства.Вставить("ИзмененаДатаДокумента", Истина);	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Табл.Номенклатура КАК Номенклатура,
		|	Табл.Количество КАК Количество,
		|	Табл.Предприятие КАК Предприятие,
		|	Табл.Склад КАК Склад,
		|	Табл.СчетУчетаБУ КАК СчетУчетаБУ,
		|	Табл.Подразделение КАК Подразделение,
		|	Табл.НовыйСчетУчетаБУ КАК НовыйСчетУчетаБУ,
		|	Табл.Сумма КАК Сумма,
		|	Табл.ПодразделениеПолучатель КАК ПодразделениеПолучатель,
		|	Табл.СкладПолучатель КАК СкладПолучатель,
		|	Табл.УчетПоПодразделениямСчет КАК УчетПоПодразделениямСчет,
		|	Табл.УчетПоПодразделениямНовыйСчет КАК УчетПоПодразделениямНовыйСчет,
		|	Табл.ВидОперации КАК ВидОперации,
		|	Табл.УчетПоПодразделениям КАК УчетПоПодразделениям,
		|	Табл.НеКонтролировать10 КАК НеКонтролировать10,
		|	Табл.НеКонтролировать41 КАК НеКонтролировать41,
		|	Табл.НеКонтролировать43 КАК НеКонтролировать43,
		|	Табл.Счет10 КАК ТоварСчет10
		|ПОМЕСТИТЬ ТЧ
		|ИЗ
		|	&Табл КАК Табл
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЧ.Номенклатура КАК Номенклатура,
		|	СУММА(ТЧ.Количество) КАК Количество,
		|	ТЧ.Предприятие КАК Предприятие,
		|	ТЧ.Склад КАК Склад,
		|	ВЫБОР
		|		КОГДА ТЧ.УчетПоПодразделениямСчет
		|			ТОГДА ТЧ.Подразделение
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК Подразделение,
		|	ВЫБОР
		|		КОГДА ТЧ.СчетУчетаБУ = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ПустаяСсылка)
		|			ТОГДА НоменклатураСпи.Счет10
		|		ИНАЧЕ ТЧ.СчетУчетаБУ
		|	КОНЕЦ КАК МатериалСчет10,
		|	ВЫБОР
		|		КОГДА ТЧ.УчетПоПодразделениямНовыйСчет
		|			ТОГДА ТЧ.ПодразделениеПолучатель
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК ПодразделениеПолучатель,
		|	СУММА(ТЧ.Сумма) КАК СуммаПолучатель,
		|	ВЫБОР
		|		КОГДА ТЧ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыПеремещений.ПеремещениеНаОбособленноеПодразделение)
		|			ТОГДА ТЧ.Подразделение
		|		ИНАЧЕ ТЧ.СкладПолучатель
		|	КОНЕЦ КАК СкладПолучатель,
		|	ТЧ.УчетПоПодразделениям КАК УчетПоПодразделениям,
		|	ТЧ.НеКонтролировать10 КАК ПредприятиеНеКонтролировать10,
		|	ТЧ.НеКонтролировать41 КАК ПредприятиеНеКонтролировать41,
		|	ТЧ.НеКонтролировать43 КАК ПредприятиеНеКонтролировать43,
		|	ТЧ.ТоварСчет10 КАК ТоварСчет10
		|ПОМЕСТИТЬ ТЧДока
		|ИЗ
		|	ТЧ КАК ТЧ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпи
		|		ПО ТЧ.Номенклатура = НоменклатураСпи.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТЧ.Номенклатура,
		|	ТЧ.Предприятие,
		|	ТЧ.Склад,
		|	ВЫБОР
		|		КОГДА ТЧ.УчетПоПодразделениямСчет
		|			ТОГДА ТЧ.Подразделение
		|		ИНАЧЕ NULL
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТЧ.СчетУчетаБУ = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ПустаяСсылка)
		|			ТОГДА НоменклатураСпи.Счет10
		|		ИНАЧЕ ТЧ.СчетУчетаБУ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТЧ.УчетПоПодразделениямНовыйСчет
		|			ТОГДА ТЧ.ПодразделениеПолучатель
		|		ИНАЧЕ NULL
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТЧ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыПеремещений.ПеремещениеНаОбособленноеПодразделение)
		|			ТОГДА ТЧ.Подразделение
		|		ИНАЧЕ ТЧ.СкладПолучатель
		|	КОНЕЦ,
		|	ТЧ.УчетПоПодразделениям,
		|	ТЧ.НеКонтролировать10,
		|	ТЧ.НеКонтролировать41,
		|	ТЧ.НеКонтролировать43,
		|	ТЧ.ТоварСчет10
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УчетныйОстатки.Субконто1 КАК Номенклатура,
		|	УчетныйОстатки.Субконто2 КАК Склад,
		|	ЕСТЬNULL(УчетныйОстатки.СуммаОстаток, 0) КАК Сумма,
		|	ЕСТЬNULL(УчетныйОстатки.КоличествоОстаток, 0) КАК Количество,
		|	ВЫБОР
		|		КОГДА УчетныйОстатки.КоличествоОстаток = 0
		|			ТОГДА 0
		|		ИНАЧЕ УчетныйОстатки.СуммаОстаток / УчетныйОстатки.КоличествоОстаток
		|	КОНЕЦ КАК Цена,
		|	УчетныйОстатки.Счет КАК Счет,
		|	УчетныйОстатки.Предприятия КАК Предприятия,
		|	УчетныйОстатки.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ Остатки
		|ИЗ
		|	РегистрБухгалтерии.Учетный.Остатки(
		|			&ПозицияДокумента,
		|			Счет В (&Счета),
		|			,
		|			ВЫБОР
		|				КОГДА &НеРассчитыватьСебестоимость
		|					ТОГДА ЛОЖЬ
		|				ИНАЧЕ Предприятия В (&Предприятия)
		|						И ВЫБОР
		|							КОГДА &ЭтоЗабалансовыйВозврат = ИСТИНА
		|								ТОГДА ИСТИНА
		|							ИНАЧЕ Субконто1 В (&Субконто1)
		|						КОНЕЦ
		|						И ВЫБОР
		|							КОГДА &ЭтоЗабалансовыйВозврат = ИСТИНА
		|								ТОГДА Субконто2 В (&Субконто1)
		|							ИНАЧЕ Субконто2 В (&Субконто2)
		|						КОНЕЦ
		|			КОНЕЦ) КАК УчетныйОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЧДока.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(Остатки.Количество, 0) - ТЧДока.Количество КАК КоличествоМинус,
		|	ТЧДока.Предприятие КАК Предприятие,
		|	ТЧДока.Подразделение КАК Подразделение,
		|	ТЧДока.Склад КАК Склад,
		|	ТЧДока.Количество КАК КоличествоНужно,
		|	ЕСТЬNULL(Остатки.Количество, 0) КАК КоличествоОстаток,
		|	ТЧДока.УчетПоПодразделениям КАК УчетПоПодразделениям,
		|	ТЧДока.ПредприятиеНеКонтролировать10 КАК ПредприятиеНеКонтролировать10,
		|	ТЧДока.ПредприятиеНеКонтролировать41 КАК ПредприятиеНеКонтролировать41,
		|	ТЧДока.ПредприятиеНеКонтролировать43 КАК ПредприятиеНеКонтролировать43
		|ПОМЕСТИТЬ КонтрольОстатков
		|ИЗ
		|	ТЧДока КАК ТЧДока
		|		ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
		|		ПО ТЧДока.Номенклатура = Остатки.Номенклатура
		|			И ТЧДока.Предприятие = Остатки.Предприятия
		|			И ТЧДока.Склад = Остатки.Склад
		|			И (ВЫБОР
		|				КОГДА Остатки.Подразделение ЕСТЬ NULL
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ТЧДока.Подразделение = Остатки.Подразделение
		|			КОНЕЦ)
		|			И ТЧДока.МатериалСчет10 = Остатки.Счет
		|ГДЕ
		|	ЕСТЬNULL(Остатки.Количество, 0) - ТЧДока.Количество < 0
		|	И (ТЧДока.ТоварСчет10 В ИЕРАРХИИ (&Счет41)
		|				И ТЧДока.ПредприятиеНеКонтролировать41 = ЛОЖЬ
		|			ИЛИ ТЧДока.ТоварСчет10 В ИЕРАРХИИ (&Счет10)
		|				И ТЧДока.ПредприятиеНеКонтролировать10 = ЛОЖЬ
		|			ИЛИ ТЧДока.ТоварСчет10 В ИЕРАРХИИ (&Счет43)
		|				И ТЧДока.ПредприятиеНеКонтролировать43 = ЛОЖЬ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЧДока.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(Остатки.Количество, 0) + ТЧДока.Количество КАК КоличествоКонечное,
		|	ТЧДока.Предприятие КАК Предприятие,
		|	ТЧДока.Подразделение КАК Подразделение,
		|	Остатки.Склад КАК Склад,
		|	ТЧДока.Количество КАК КоличествоНужно,
		|	ЕСТЬNULL(Остатки.Количество, 0) КАК КоличествоОстаток,
		|	ЕСТЬNULL(Остатки.Сумма, 0) КАК СуммаКонечное,
		|	ТЧДока.СкладПолучатель КАК СкладПолучатель,
		|	ТЧДока.МатериалСчет10 КАК Счет,
		|	ТЧДока.ПодразделениеПолучатель КАК ПодразделениеПолучатель,
		|	ТЧДока.УчетПоПодразделениям КАК УчетПоПодразделениям
		|ИЗ
		|	ТЧДока КАК ТЧДока
		|		ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
		|		ПО ТЧДока.Номенклатура = Остатки.Номенклатура
		|			И ТЧДока.Предприятие = Остатки.Предприятия
		|			И ТЧДока.СкладПолучатель = Остатки.Склад
		|			И (ВЫБОР
		|				КОГДА Остатки.Подразделение ЕСТЬ NULL
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ТЧДока.ПодразделениеПолучатель = Остатки.Подразделение
		|			КОНЕЦ)
		|ГДЕ
		|	ЕСТЬNULL(Остатки.Количество, 0) < 0";
	
	
	ЭтоПеремещениеНаОбособленноеПодразделение = Ложь;
	ЭтоПоступлениеСОбособленногоПодразделения = Ложь;
	
	Если ВидОперации = Перечисления.ВидыПеремещений.ПеремещениеНаОбособленноеПодразделение Тогда
		ЭтоПеремещениеНаОбособленноеПодразделение = Истина;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыПеремещений.ПоступлениеСОбособленногоПодразделения Тогда
		ЭтоПоступлениеСОбособленногоПодразделения = Истина;
	КонецЕсли;
	
	
	СтруктураСоответствий = ПоучитьСоответствияСчетовНоменклатуры();
	СоответствиеСчета = СтруктураСоответствий.Соответствия;
	СоответствиеУчетаПоПодразделениям = СтруктураСоответствий.СоответствияУчетаПодразделений;
	
	СоотвРодителяПодр = СоответствияПодразделенияРодителя();

	ВыбСчет = Новый Массив;
	ВыбТовары = Новый Массив;
	Для каждого ТекСтрока Из СоответствиеСчета Цикл
		Если ЗначениеЗаполнено(ТекСтрока.Ключ) Тогда
			ВыбТовары.Добавить(ТекСтрока.Ключ);
			Если ВыбСчет.Найти(ТекСтрока.Значение) = Неопределено Тогда
				ВыбСчет.Добавить(ТекСтрока.Значение);
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
	
	//для перемещений
	//ВыбСчет.Добавить(ПланыСчетов.Учетный.Счет45());
	
	//для виртуальных возвратов алкашки
	ВыбСчет.Добавить(ПланыСчетов.Учетный.НайтиПоКоду("002"));
	
	ВыбСклад = Новый Массив;
	ВыбСклад.Добавить(Склад);
	ВыбСклад.Добавить(СкладПолучатель);
	ВыбСклад.Добавить(Подразделение);
	ВыбСклад.Добавить(ПодразделениеПолучатель);
	
	//ВыбМол = Новый Массив;
	//ВыбМол.Добавить(стр_МОЛОтправитель);
	//ВыбМол.Добавить(стр_МОЛОтправитель);
	
	ВыбПодразделение = Новый Массив;
	ВыбПодразделение.Добавить(Подразделение);
	ВыбПодразделение.Добавить(ПодразделениеПолучатель);
	
	МоментКонца = ?(ЗначениеЗаполнено(Ссылка),МоментВремени(), ТекущаяДата());
	
	Запрос.УстановитьПараметр("Счета", ВыбСчет);
	Запрос.УстановитьПараметр("Субконто1", ВыбТовары);
	//Если ПеремещениеНаЗабаланс Тогда
	//	Запрос.УстановитьПараметр("ЭтоЗабалансовыйВозврат", Истина);
	//Иначе	
		Запрос.УстановитьПараметр("ЭтоЗабалансовыйВозврат", Ложь);
	//КонецЕсли;
	Запрос.УстановитьПараметр("Субконто2", ВыбСклад);
	//Запрос.УстановитьПараметр("Субконто3", ВыбМол);
	Запрос.УстановитьПараметр("Подразделения", ВыбПодразделение);
	Запрос.УстановитьПараметр("Предприятия", Предприятие);
	Запрос.УстановитьПараметр("ПозицияДокумента", МоментКонца);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("НеРассчитыватьСебестоимость", Ложь);
	Запрос.УстановитьПараметр("Счет10", ПланыСчетов.Учетный.Счет10());
	Запрос.УстановитьПараметр("Счет41", ПланыСчетов.Учетный.Счет41());
	Запрос.УстановитьПараметр("Счет43", ПланыСчетов.Учетный.Счет43());

	
	ТЧДокумента = Новый ТаблицаЗначений;
	ТЧДокумента.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЧДокумента.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
	ТЧДокумента.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(17,3)));
	ТЧДокумента.Колонки.Добавить("Предприятие", Новый ОписаниеТипов("СправочникСсылка.Предприятия"));
	ТЧДокумента.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТЧДокумента.Колонки.Добавить("СкладПолучатель", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТЧДокумента.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	ТЧДокумента.Колонки.Добавить("ПодразделениеПолучатель", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	ТЧДокумента.Колонки.Добавить("УчетПоПодразделениям", Новый ОписаниеТипов("Булево",,,,, Новый КвалификаторыДвоичныхДанных()));
	ТЧДокумента.Колонки.Добавить("УчетПоПодразделениямСчет", Новый ОписаниеТипов("Булево",,,,, Новый КвалификаторыДвоичныхДанных()));
	ТЧДокумента.Колонки.Добавить("УчетПоПодразделениямНовыйСчет", Новый ОписаниеТипов("Булево",,,,, Новый КвалификаторыДвоичныхДанных()));
	ТЧДокумента.Колонки.Добавить("СчетУчетаБУ", Новый ОписаниеТипов("ПланСчетовСсылка.Учетный"));
	ТЧДокумента.Колонки.Добавить("НовыйСчетУчетаБУ", Новый ОписаниеТипов("ПланСчетовСсылка.Учетный"));
	ТЧДокумента.Колонки.Добавить("стр_МолОтправитель", Новый ОписаниеТипов("СправочникСсылка.Сотрудники")); 
	ТЧДокумента.Колонки.Добавить("стр_МОЛПолучатель", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТЧДокумента.Колонки.Добавить("ВидОперации", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПеремещений"));
	ТЧДокумента.Колонки.Добавить("Счет10", Новый ОписаниеТипов("ПланСчетовСсылка.Учетный"));
	ТЧДокумента.Колонки.Добавить("НеКонтролировать10", Новый ОписаниеТипов("Булево",,,,, Новый КвалификаторыДвоичныхДанных()));
	ТЧДокумента.Колонки.Добавить("НеКонтролировать41", Новый ОписаниеТипов("Булево",,,,, Новый КвалификаторыДвоичныхДанных()));
	ТЧДокумента.Колонки.Добавить("НеКонтролировать43", Новый ОписаниеТипов("Булево",,,,, Новый КвалификаторыДвоичныхДанных()));
	УчетПоПодразделениям = Предприятие.УчетПоПодразделениям;
	НеКонтролировать10 = Предприятие.НеКонтролировать10;
	НеКонтролировать41 = Предприятие.НеКонтролировать41;
	НеКонтролировать43 = Предприятие.НеКонтролировать43;
	Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
		СтрокаТЧДокумента = ТЧДокумента.Добавить();
		СтрокаТЧДокумента.Номенклатура = СтрокаТЧ.Номенклатура;
		СтрокаТЧДокумента.Количество = СтрокаТЧ.Количество;
		СтрокаТЧДокумента.Сумма = СтрокаТЧ.Сумма;
		СтрокаТЧДокумента.Предприятие = Предприятие;
		СтрокаТЧДокумента.Склад = Склад;
		СтрокаТЧДокумента.СчетУчетаБУ = СоответствиеСчета.Получить(СтрокаТЧ.Номенклатура);
		СтрокаТЧДокумента.НовыйСчетУчетаБУ = СоответствиеСчета.Получить(СтрокаТЧ.Номенклатура);
		СтрокаТЧДокумента.СкладПолучатель = СкладПолучатель;
		СтрокаТЧДокумента.Подразделение = СоотвРодителяПодр.Получить(Подразделение);
		СтрокаТЧДокумента.ПодразделениеПолучатель = СоотвРодителяПодр.Получить(ПодразделениеПолучатель);
		СтрокаТЧДокумента.УчетПоПодразделениям = УчетПоПодразделениям;
		СтрокаТЧДокумента.УчетПоПодразделениямСчет = СоответствиеУчетаПоПодразделениям.Получить(СтрокаТЧ.СчетУчетаБУ);
		СтрокаТЧДокумента.УчетПоПодразделениямНовыйСчет = СоответствиеУчетаПоПодразделениям.Получить(СтрокаТЧ.НовыйСчетУчетаБУ);
		//СтрокаТЧДокумента.стр_МолОтправитель = стр_МОЛОтправитель;
		//СтрокаТЧДокумента.стр_МОЛПолучатель = стр_МОЛПолучатель;
		СтрокаТЧДокумента.ВидОперации = ВидОперации;
		СтрокаТЧДокумента.Счет10 = СтрокаТЧ.Номенклатура.Счет10;
		СтрокаТЧДокумента.НеКонтролировать10 = НеКонтролировать10;
		СтрокаТЧДокумента.НеКонтролировать41 = НеКонтролировать41;
		СтрокаТЧДокумента.НеКонтролировать43 = НеКонтролировать43;
	КонецЦикла;	

	Запрос.УстановитьПараметр("Табл", ТЧДокумента);
	
	
	МассивЗапросов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	
	ДополнительныеСвойства.Вставить("РезультатОстатки", МассивЗапросов[2].Выгрузить());
	ДополнительныеСвойства.Вставить("РезультатКонтроль", МассивЗапросов[3].Выгрузить());
	ДополнительныеСвойства.Вставить("РезультатКонтрольМинусов", МассивЗапросов[4].Выгрузить());
	ДополнительныеСвойства.Вставить("Соответствия", СтруктураСоответствий.Соответствия);
	ДополнительныеСвойства.Вставить("СоответствияУчетаПодразделений", СтруктураСоответствий.СоответствияУчетаПодразделений);
	ДополнительныеСвойства.Вставить("СоотвРодителяПодр", СоотвРодителяПодр);
	ДополнительныеСвойства.Вставить("ЭтоПеремещениеНаОбособленноеПодразделение", ЭтоПеремещениеНаОбособленноеПодразделение);
	ДополнительныеСвойства.Вставить("ЭтоПоступлениеСОбособленногоПодразделения", ЭтоПоступлениеСОбособленногоПодразделения);	
	Счет002 = ПланыСчетов.Учетный.Счет002();
	
	Для каждого ТекСтрокаТабличнаяЧасть Из ТабличнаяЧасть Цикл
		
		СчетКт = СоответствиеСчета.Получить(ТекСтрокаТабличнаяЧасть.Номенклатура);
		УчетПоподразделениямСчетУчета = СоответствиеУчетаПоПодразделениям.Получить(СчетКт);
		
		Если УчетПоподразделениямСчетУчета Тогда
			Если ЭтоПоступлениеСОбособленногоПодразделения Тогда
				СтруктураПоиска = Новый Структура("Номенклатура, Склад, Счет, Подразделение", ТекСтрокаТабличнаяЧасть.Номенклатура, Подразделение, СчетКт, ПодразделениеПолучатель);
			Иначе	
				СтруктураПоиска = Новый Структура("Номенклатура, Склад, Счет, Подразделение", ТекСтрокаТабличнаяЧасть.Номенклатура, Склад, СчетКт, Подразделение);
			КонецЕсли;	
		Иначе
			Если ЭтоПоступлениеСОбособленногоПодразделения Тогда
				СтруктураПоиска = Новый Структура("Номенклатура, Склад, Счет", ТекСтрокаТабличнаяЧасть.Номенклатура, Подразделение, СчетКт);
			Иначе	
				СтруктураПоиска = Новый Структура("Номенклатура, Склад, Счет", ТекСтрокаТабличнаяЧасть.Номенклатура, Склад, СчетКт);
			КонецЕсли;	
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи = ДополнительныеСвойства.РезультатОстатки.НайтиСтроки(СтруктураПоиска);
		Если ВыборкаДетальныеЗаписи.Количество() Тогда
			ТекСтрокаТабличнаяЧасть.Сумма = ВыборкаДетальныеЗаписи[0].Цена * ТекСтрокаТабличнаяЧасть.Количество;
			ТекСтрокаТабличнаяЧасть.Цена = ВыборкаДетальныеЗаписи[0].Цена;
		Иначе
			ТекСтрокаТабличнаяЧасть.Сумма = 0;
			ТекСтрокаТабличнаяЧасть.Цена = 0;
		КонецЕсли;
		
		
	КонецЦикла;
	
	СуммаИтог = ТабличнаяЧасть.Итог("Сумма");
	СуммаДокумента = ТабличнаяЧасть.Итог("Сумма");
	СуммаНДСИтог = ТабличнаяЧасть.Итог("СуммаНДС");
	

	//из подписки на событие
	БюджетныйНаСервере.ДокументыПередЗаписьюПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
КонецПроцедуры

Функция СоответствияПодразделенияРодителя()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтруктураПредприятия.Ссылка КАК Подразделение,
	               |	ВЫБОР
	               |		КОГДА СтруктураПредприятия.Ссылка.Родитель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	               |			ТОГДА СтруктураПредприятия.Ссылка
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА СтруктураПредприятия.Ссылка.Родитель.Родитель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	               |					ТОГДА СтруктураПредприятия.Ссылка.Родитель
	               |				ИНАЧЕ ВЫБОР
	               |						КОГДА СтруктураПредприятия.Ссылка.Родитель.Родитель.Родитель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	               |							ТОГДА СтруктураПредприятия.Ссылка.Родитель.Родитель
	               |						ИНАЧЕ СтруктураПредприятия.Ссылка.Родитель.Родитель.Родитель
	               |					КОНЕЦ
	               |			КОНЕЦ
	               |	КОНЕЦ КАК Родитель
	               |ИЗ
	               |	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	               |ГДЕ
	               |	СтруктураПредприятия.Ссылка В(&Ссылка)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СтруктураПредприятия.Ссылка,
	               |	ВЫБОР
	               |		КОГДА СтруктураПредприятия.Ссылка.Родитель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	               |			ТОГДА СтруктураПредприятия.Ссылка
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА СтруктураПредприятия.Ссылка.Родитель.Родитель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	               |					ТОГДА СтруктураПредприятия.Ссылка.Родитель
	               |				ИНАЧЕ ВЫБОР
	               |						КОГДА СтруктураПредприятия.Ссылка.Родитель.Родитель.Родитель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	               |							ТОГДА СтруктураПредприятия.Ссылка.Родитель.Родитель
	               |						ИНАЧЕ СтруктураПредприятия.Ссылка.Родитель.Родитель.Родитель
	               |					КОНЕЦ
	               |			КОНЕЦ
	               |	КОНЕЦ";
	
	
	МассПодр = Новый Массив;
	МассПодр.Добавить(Подразделение);
	МассПодр.Добавить(ПодразделениеПолучатель);
	
	Запрос.УстановитьПараметр("Ссылка", МассПодр);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Соотв = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		Соотв.Вставить(Выборка.Подразделение, Выборка.Родитель);		
	КонецЦикла;
	
	Возврат Соотв;
	
	
КонецФункции // ()

Функция ПоучитьСоответствияСчетовНоменклатуры()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Табл.Номенклатура КАК Номенклатура,
	               |	Табл.СчетУчетаБУ КАК СчетУчетаБУ,
	               |	Табл.НовыйСчетУчетаБУ КАК НовыйСчетУчетаБУ
	               |ПОМЕСТИТЬ ТЧ
	               |ИЗ
	               |	&Табл КАК Табл
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЧ.СчетУчетаБУ КАК СчетУчетаБУ,
	               |	НоменклатураСпи.Ссылка КАК Номенклатура
	               |ПОМЕСТИТЬ ТЧ2
	               |ИЗ
	               |	ТЧ КАК ТЧ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпи
	               |		ПО ТЧ.Номенклатура = НоменклатураСпи.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЧ2.Номенклатура КАК Номенклатура,
	               |	ВЫБОР
	               |		КОГДА ТЧ2.СчетУчетаБУ = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ПустаяСсылка)
	               |			ТОГДА ВЫБОР
	               |					КОГДА ТЧ2.Номенклатура.Счет10 = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ПустаяСсылка)
	               |						ТОГДА &Счет41
	               |					ИНАЧЕ ТЧ2.Номенклатура.Счет10
	               |				КОНЕЦ
	               |		ИНАЧЕ ТЧ2.СчетУчетаБУ
	               |	КОНЕЦ КАК Счет,
	               |	(ВЫБОР
	               |		КОГДА ТЧ2.СчетУчетаБУ = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ПустаяСсылка)
	               |			ТОГДА ВЫБОР
	               |					КОГДА ТЧ2.Номенклатура.Счет10 = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ПустаяСсылка)
	               |						ТОГДА &Счет41
	               |					ИНАЧЕ ТЧ2.Номенклатура.Счет10
	               |				КОНЕЦ
	               |		ИНАЧЕ ТЧ2.СчетУчетаБУ
	               |	КОНЕЦ).УчетПоПодразделениям КАК УчетПоПодразделениям
	               |ПОМЕСТИТЬ СоотвНом
	               |ИЗ
	               |	ТЧ2 КАК ТЧ2
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТЧ2.Номенклатура,
	               |	ВЫБОР
	               |		КОГДА ТЧ2.СчетУчетаБУ = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ПустаяСсылка)
	               |			ТОГДА ВЫБОР
	               |					КОГДА ТЧ2.Номенклатура.Счет10 = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ПустаяСсылка)
	               |						ТОГДА &Счет41
	               |					ИНАЧЕ ТЧ2.Номенклатура.Счет10
	               |				КОНЕЦ
	               |		ИНАЧЕ ТЧ2.СчетУчетаБУ
	               |	КОНЕЦ,
	               |	(ВЫБОР
	               |		КОГДА ТЧ2.СчетУчетаБУ = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ПустаяСсылка)
	               |			ТОГДА ВЫБОР
	               |					КОГДА ТЧ2.Номенклатура.Счет10 = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ПустаяСсылка)
	               |						ТОГДА &Счет41
	               |					ИНАЧЕ ТЧ2.Номенклатура.Счет10
	               |				КОНЕЦ
	               |		ИНАЧЕ ТЧ2.СчетУчетаБУ
	               |	КОНЕЦ).УчетПоПодразделениям
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЧ.НовыйСчетУчетаБУ КАК НовыйСчетУчетаБУ,
	               |	Номенклатура1.Ссылка КАК Номенклатура
	               |ПОМЕСТИТЬ ТЗ3
	               |ИЗ
	               |	ТЧ КАК ТЧ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура1
	               |		ПО ТЧ.Номенклатура = Номенклатура1.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЗ3.НовыйСчетУчетаБУ КАК Счет,
	               |	(ВЫБОР
	               |		КОГДА ТЗ3.НовыйСчетУчетаБУ = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ПустаяСсылка)
	               |			ТОГДА ВЫБОР
	               |					КОГДА ТЗ3.Номенклатура.Счет10 = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ПустаяСсылка)
	               |						ТОГДА &Счет41
	               |					ИНАЧЕ ТЗ3.Номенклатура.Счет10
	               |				КОНЕЦ
	               |		ИНАЧЕ ТЗ3.НовыйСчетУчетаБУ
	               |	КОНЕЦ).УчетПоПодразделениям КАК УчетПоПодразделениям
	               |ИЗ
	               |	ТЗ3 КАК ТЗ3";
	
	Запрос.УстановитьПараметр("Счет41", ПланыСчетов.Учетный.Счет41());
	Запрос.УстановитьПараметр("Табл", ТабличнаяЧасть.Выгрузить());
	
	МассивЗапросов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	Выборка = МассивЗапросов[2].Выбрать();
	ВыборкаПодр = МассивЗапросов[4].Выбрать();
	
	
	Соответствия = Новый Соответствие;
	СоответствияУчетаПодразделений = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		Соответствия.Вставить(Выборка.Номенклатура, Выборка.Счет);
		СоответствияУчетаПодразделений.Вставить(Выборка.Счет, Выборка.УчетПоПодразделениям);
	КонецЦикла;
	Пока ВыборкаПодр.Следующий() Цикл
		СоответствияУчетаПодразделений.Вставить(ВыборкаПодр.Счет, ВыборкаПодр.УчетПоПодразделениям);
	КонецЦикла;
	Соответствия.Вставить(Неопределено, ПланыСчетов.Учетный.Счет41());
	Соответствия.Вставить(Null, ПланыСчетов.Учетный.Счет41());
	Соответствия.Вставить(Справочники.Номенклатура.ПустаяСсылка(), ПланыСчетов.Учетный.Счет41());
	Возврат Новый Структура("Соответствия, СоответствияУчетаПодразделений", Соответствия, СоответствияУчетаПодразделений);	
	
КонецФункции // ()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	//Если Не (Подразделение.ПроизводственноеПодразделение Или ВидОперации = Перечисления.ВидыПеремещений.Перемещение) Тогда
	//	ТЧДока = Новый ТаблицаЗначений;
	//	ТЧДока.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	//	ТЧДока.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15,3)));
	//	
	//	Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
	//		СтрокаТЧДока = ТЧДока.Добавить();
	//		СтрокаТЧДока.Номенклатура = СтрокаТЧ.Номенклатура;
	//		СтрокаТЧДока.НомерСтроки = СтрокаТЧ.НомерСтроки;
	//	КонецЦикла;	
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ТЧДокумента.НомерСтроки,
	//	|	ТЧДокумента.Номенклатура
	//	|ПОМЕСТИТЬ ВТ_ТЧДока
	//	|ИЗ
	//	|	&ТЧДокумента КАК ТЧДокумента
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ВТ_ТЧДока.НомерСтроки,
	//	|	ВТ_ТЧДока.Номенклатура,
	//	|	ВТ_ТЧДока.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
	//	|ИЗ
	//	|	ВТ_ТЧДока КАК ВТ_ТЧДока
	//	|ГДЕ
	//	|	(ВТ_ТЧДока.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Сырье)
	//	|			ИЛИ ВТ_ТЧДока.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Материалы))";
	//	Запрос.УстановитьПараметр("ТЧДокумента", ТЧДока);
	//	
	//	РезультатЗапроса = Запрос.Выполнить();
	//	
	//	Если Не РезультатЗапроса.Пустой() Тогда
	//		Отказ = Истина;
	//		Выборка = РезультатЗапроса.Выбрать();
	//		Пока Выборка.Следующий() Цикл
	//			Сообщение = Новый СообщениеПользователю();
	//			Сообщение.Поле = "ТабличнаяЧасть[" + Строка(Выборка.НомерСтроки - 1) + "].Номенклатура";
	//			Сообщение.Текст = "В строке " + Выборка.НомерСтроки + " выбрана номенклатура с неправильным типом: " + Выборка.ТипНоменклатуры;
	//			Сообщение.УстановитьДанные(ЭтотОбъект);
	//			Сообщение.Сообщить();
	//		КонецЦикла;
	//	КонецЕсли; 
	//КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыПеремещений.ПеремещениеНаПредприятие ИЛИ ВидОперации = Перечисления.ВидыПеремещений.ПеремещениеНаПредприятиеБезВозмещения Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("СкладПолучатель"));	
	КонецЕсли;
		
КонецПроцедуры


Процедура ОбработкаУдаленияПроведения(Отказ)
	РучнаяКорректировка = Ложь;
КонецПроцедуры


Процедура ПриКопировании(ОбъектКопирования)
	
	РучнаяКорректировка = Ложь;
	
КонецПроцедуры


Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	БюджетныйНаСервере.ПриУстановкеНовогоНомераПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
КонецПроцедуры


Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
		
		//Если НЕ (ДанныеЗаполнения.ВидОперации = Перечисления.ВидыЗаказов.ВнутреннееПеремещение Или ДанныеЗаполнения.ВидОперации = Перечисления.ВидыЗаказов.ПеремещениеМеждуСкладами) Тогда
		//	СтандартнаяОбработка = Ложь;
		//	Комментарий = "##НеверныйВидОперации" + ДанныеЗаполнения.ВидОперации;
		//	Возврат;
		//КонецЕсли; 
		
		Отказ = сабОперОбщегоНазначения.ПроверкаСозданияНаОснованииНаСервере(ДанныеЗаполнения, Комментарий, СтандартнаяОбработка);
		Если Отказ.Признак = "##УжеСоздан" Тогда
			ВызватьИсключение "На основании текущего документа уже введен документ " + Отказ.Ссылка;
		ИначеЕсли Отказ.Признак = "##НеПроведен" Тогда
			ВызватьИсключение "Документ-основание не проведен. Ввод на основании не возможен.";
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения,, "Дата, Номер, Проведен, РучнаяКорректировка");
		
		ЭтоПеремещениеМеждуСкладами = Ложь;
		Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыЗаказовНаПеремещение.ПеремещениеМеждуСкладами Тогда
			ЭтоПеремещениеМеждуСкладами = Истина;
			ВидОперации = Перечисления.ВидыПеремещений.Перемещение;
		КонецЕсли;
		
		// Заполнение шапки
		ДокОснование 	= ДанныеЗаполнения;
		Дата = ДанныеЗаполнения.ДатаПоступления;
		
		Для Каждого ТекСтрокаТабличнаяЧасть Из ДанныеЗаполнения.ТабличнаяЧасть Цикл
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаТабличнаяЧасть);
			НоваяСтрока.Номенклатура = ТекСтрокаТабличнаяЧасть.Номенклатура;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.УЧ_ПеремещениеТоваров") Тогда
		
		Отказ = сабОперОбщегоНазначения.ПроверкаСозданияНаОснованииНаСервере(ДанныеЗаполнения, Комментарий, СтандартнаяОбработка);
		Если Отказ.Признак = "##УжеСоздан" Тогда
			ВызватьИсключение "На основании Перемещение ТМЦ (упр) уже введен документ " + Отказ.Ссылка;
		ИначеЕсли Отказ.Признак = "##НеПроведен" Тогда
			ВызватьИсключение "Документ Перемещение ТМЦ (упр) не проведен. Ввод на основании не возможен.";
		КонецЕсли;	
		
		// Заполнение шапки
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения, ,"Дата, Номер, Комментарий, ДокОснование, ВидОперации, ИсправлениеСФ, НомерСчетФактуры, ДатаСчетФактуры, СтрокаПлатежноРасчетныеДокументы");
		ДокОснование 	= ДанныеЗаполнения.Ссылка;
		СуммаДокумента 	= ДанныеЗаполнения.СуммаДокумента;
		ВидОперации 	= Перечисления.ВидыПеремещений.ПоступлениеСОбособленногоПодразделения;
		Для Каждого ТекСтрокаТабличнаяЧасть Из ДанныеЗаполнения.ТабличнаяЧасть Цикл
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаТабличнаяЧасть);
			НоваяСтрока.СчетУчетаБУ = ТекСтрокаТабличнаяЧасть.НовыйСчетУчетаБУ;
			НоваяСтрока.НовыйСчетУчетаБУ = ТекСтрокаТабличнаяЧасть.СчетУчетаБУ;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.УЧ_ПоступлениеТоваров") Тогда
		
		Отказ = сабОперОбщегоНазначения.ПроверкаСозданияНаОснованииНаСервере(ДанныеЗаполнения, Комментарий, СтандартнаяОбработка);
		Если Отказ.Признак = "##УжеСоздан" Тогда
			ВызватьИсключение "На основании Поступление ТМЦ и услуг (упр) уже введен документ " + Отказ.Ссылка;
		ИначеЕсли Отказ.Признак = "##НеПроведен" Тогда
			ВызватьИсключение "Документ Поступление ТМЦ и услуг (упр) не проведен. Ввод на основании не возможен.";
		КонецЕсли;	
		
		// Заполнение шапки
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения, ,"Дата, Номер, Комментарий, ДокОснование");
		ДокОснование 	= ДанныеЗаполнения.Ссылка;
		СуммаДокумента 	= ДанныеЗаполнения.СуммаДокумента;
		ВидОперации 	= Перечисления.ВидыПеремещений.Перемещение;
		Для Каждого ТекСтрокаТабличнаяЧасть Из ДанныеЗаполнения.ТабличнаяЧасть Цикл
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаТабличнаяЧасть);
			НоваяСтрока.СчетУчетаБУ = ТекСтрокаТабличнаяЧасть.СчетУчета;
			//НоваяСтрока.НовыйСчетУчетаБУ = ТекСтрокаТабличнаяЧасть.СчетУчетаБУ;
		КонецЦикла;
		
	КонецЕсли;
	
	сабОбщегоНазначенияБУХ.сабОбработкиЗаполненияУчпетныхДокументовОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
КонецПроцедуры

Процедура ОбработкаЗаполненияСФормы(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт

	ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);	

КонецПроцедуры
