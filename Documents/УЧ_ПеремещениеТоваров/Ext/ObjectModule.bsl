
Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если РучнаяКорректировка Тогда		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Движения документа %1 отредактированы вручную и не могут быть автоматически актуализированы'"), ЭтотОбъект);
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.КлючДанных = Ссылка;
		Сообщение.Сообщить();		
		
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Если ДополнительныеСвойства.Свойство("ИзмененаДатаДокумента") Тогда
		Движения.Учетный.Записать();	
	КонецЕсли;
	
	ПеренесеноИзАстор = (УчетПартий.Количество() > 0);
	
	ИспользоватьСерии = ДополнительныеСвойства.ИспользоватьСерии;
	КорректироватьСебестоимостьПриВыходеОстаткаИзМинуса = ДополнительныеСвойства.КорректироватьСебестоимостьПриВыходеОстаткаИзМинуса;
	РассчитыватьСебестоимостьПоСериям = ДополнительныеСвойства.РассчитыватьСебестоимостьПоСериям;

	//Супербоб для возврата алкашки, удалить по окончании
	//ТаблицаРеквизитов = УправлениеСвойствами.ПолучитьЗначенияСвойств(Ссылка,,,ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Проводки на забаланс (вирт. перемещение) (Перемещение ТМЦ)", Истина));
	//Если ТаблицаРеквизитов.Количество() И ТаблицаРеквизитов[0].Значение Тогда
	//	ПеремещениеНаЗабаланс = Истина;
	//	СчетЗабаланс = ПланыСчетов.Учетный.НайтиПоКоду("ВОЗВ");
	//Иначе
		ПеремещениеНаЗабаланс = Ложь;
	//КонецЕсли;	
    //
	
	ЭтоПеремещениеНаПредприятие = (ВидОперации = Перечисления.ВидыПеремещений.ПеремещениеНаПредприятие); 
	ЭтоПеремещениеНаПредприятиеБезВозмещения = (ВидОперации = Перечисления.ВидыПеремещений.ПеремещениеНаПредприятиеБезВозмещения); 
	
	СтатьяПоУмолчанию = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Списание недостач", Истина);
	СлужбаПоУмолчанию = Справочники.Субконто.НайтиПоНаименованию("Производство_общее");
	ПроизводственноеПодразделение = ПодразделениеПолучатель.ПроизводственноеПодразделение;
	СчетЗатратыПроизводство = ПланыСчетов.Учетный.Счет25();//.ОсновноеПрво;
	СчетСебестоимость = Справочники.УчетныеПолитики.СчетКорректировкиСеб(Предприятие);//.Себестоимость;
	СтатьяФормальнаяСебестоимость = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Формальная себестоимость", Истина);;
	
	
	СоответствиеСчета = ДополнительныеСвойства.Соответствия;
	СоответствиеУчетаПоПодразделениям = ДополнительныеСвойства.СоответствиеУчетаПоПодразделениям;
	
	СоотвРодителяПодр = ДополнительныеСвойства.СоотвРодителяПодр;
	
	ЭтоПоступлениеСОбособленногоПодразделения = ДополнительныеСвойства.ЭтоПоступлениеСОбособленногоПодразделения;	
	ЭтоПеремещениеНаОбособленноеПодразделение = ДополнительныеСвойства.ЭтоПеремещениеНаОбособленноеПодразделение;	
	
	РезультатОстатки = ДополнительныеСвойства.РезультатОстатки;
	РезультатКонтроль = ДополнительныеСвойства.РезультатКонтроль;
	РезультатКонтрольМинусов = ДополнительныеСвойства.РезультатКонтрольМинусов;
	
	//Если АвтоПереводНоменклатуры Тогда
	//	Для Каждого СтрокаРеал Из ТабличнаяЧасть Цикл
	//		Если СтрокаРеал.Номенклатура.ПризнакНоменклатуры = "Перевод в №2" И ЗначениеЗаполнено(СтрокаРеал.Номенклатура.НоменклатураПервичная) Тогда
	//			ВыбТовары.Добавить(СтрокаРеал.Номенклатура.НоменклатураПервичная);	
	//		КонецЕсли;
	//	КонецЦикла;	
	//КонецЕсли;	
	
	//Движения.Учетный.Записывать = Истина;
	//ТабличнаяЧастьСверн = ТабличнаяЧасть.Выгрузить();
	//ТабличнаяЧастьСверн.Свернуть("Номенклатура, СерияНоменклатуры, СчетУчетаБУ, НовыйСчетУчетаБУ, Характеристика, НомерСтроки", "Количество, Сумма, СуммаНДС");  
	
	Для Каждого ТекСтрокаТабличнаяЧасть Из ТабличнаяЧасть Цикл
		
			
		Если АвтоПереводНоменклатуры И ТекСтрокаТабличнаяЧасть.Номенклатура.ПризнакНоменклатуры = "Перевод в №2" И ЗначениеЗаполнено(ТекСтрокаТабличнаяЧасть.Номенклатура.НоменклатураПервичная) Тогда
			ЕстьАвтоПереводНоменклатуры = Истина;
		Иначе
			ЕстьАвтоПереводНоменклатуры = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекСтрокаТабличнаяЧасть.СчетУчетаБУ) Тогда
			СчетКт = ТекСтрокаТабличнаяЧасть.СчетУчетаБУ;
		Иначе	
			Если ЭтоПоступлениеСОбособленногоПодразделения Тогда
				СчетКт = ПланыСчетов.Учетный.Счет45();
			Иначе
				СчетКт = СоответствиеСчета.Получить(ТекСтрокаТабличнаяЧасть.Номенклатура);	
			КонецЕсли;
		КонецЕсли;
		УчетПоподразделениямСчетУчета = СоответствиеУчетаПоПодразделениям.Получить(СчетКт);
		
		НайденныеСерии = СерииНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура, НомерСтрокиРеализации", ТекСтрокаТабличнаяЧасть.Номенклатура, ТекСтрокаТабличнаяЧасть.НомерСтроки));
		МассивСерий = Новый Массив;
		Если НайденныеСерии.Количество() > 1 Тогда //несколько серий
			Для каждого ТекНайдСерия Из НайденныеСерии Цикл
				МассивСерий.Добавить(Новый Структура("СерияНоменклатуры, Количество, Сумма", ТекНайдСерия.СерияНоменклатуры, ТекНайдСерия.Количество, 0))	;
			КонецЦикла;	
		Иначе	
			МассивСерий.Добавить(Новый Структура("СерияНоменклатуры, Количество, Сумма", ТекСтрокаТабличнаяЧасть.СерияНоменклатуры, ТекСтрокаТабличнаяЧасть.Количество, 0));
		КонецЕсли;
		
		ТекИндекс = 0;
		ТекСумма = 0;
		
		Для каждого ТекСерия Из МассивСерий Цикл
			
			СтруктураПоиска = Новый Структура("Номенклатура, Склад", ТекСтрокаТабличнаяЧасть.Номенклатура, Склад);
			
			Если ЕстьАвтоПереводНоменклатуры Тогда
				СтруктураПоиска.Вставить("Подразделение", Подразделение); 
				СтруктураПоиска.Вставить("СерияНоменклатуры", ТекСерия.СерияНоменклатуры);
			Иначе
				Если ЗначениеЗаполнено(ТекСтрокаТабличнаяЧасть.СчетУчетаБУ) Тогда
					СтруктураПоиска.Вставить("Счет", ТекСтрокаТабличнаяЧасть.СчетУчетаБУ); 
				КонецЕсли;
				Если УчетПоподразделениямСчетУчета Тогда
					Если ЭтоПоступлениеСОбособленногоПодразделения Тогда
						СтруктураПоиска.Вставить("Склад", Подразделение);
						СтруктураПоиска.Вставить("Подразделение", ПодразделениеПолучатель);
					Иначе
						СтруктураПоиска.Вставить("Подразделение", Подразделение);
					КонецЕсли;
				КонецЕсли;
				Если ИспользоватьСерии И РассчитыватьСебестоимостьПоСериям Тогда
					СтруктураПоиска.Вставить("СерияНоменклатуры", ТекСерия.СерияНоменклатуры);
				КонецЕсли;
			КонецЕсли;
			
			ВыборкаДетальныеЗаписи = РезультатОстатки.НайтиСтроки(СтруктураПоиска);
			
			ТекСуммаСтрока = 0;
			ТекЦена = 0;
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			Для каждого ТекСтрока Из ВыборкаДетальныеЗаписи Цикл
				КоличествоОстаток = КоличествоОстаток + ТекСтрока.Количество;
				СуммаОстаток = СуммаОстаток + ТекСтрока.Сумма;
				Если Не ЗначениеЗаполнено(ТекСтрокаТабличнаяЧасть.СчетУчетаБУ) Тогда
					СчетКт = ТекСтрока.Счет; 
				КонецЕсли;
			КонецЦикла;
			ТекЦена = ?(КоличествоОстаток, СуммаОстаток / КоличествоОстаток, 0); 
			ТекСуммаСтрока = ?(КоличествоОстаток = ТекСерия.Количество, СуммаОстаток, ТекЦена*ТекСерия.Количество);
			
			ТекСерия.Сумма = ТекСуммаСтрока; 
			
			Движение = Движения.Учетный.Добавить();
			Движение.Период = Дата;
			Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
			Движение.Предприятия = Предприятие;
			Если ЭтоПеремещениеНаОбособленноеПодразделение Тогда
				СчетДт = ПланыСчетов.Учетный.Счет45();
			Иначе
				СчетДт = ?(ЗначениеЗаполнено(ТекСтрокаТабличнаяЧасть.НовыйСчетУчетаБУ), ТекСтрокаТабличнаяЧасть.НовыйСчетУчетаБУ, СчетКт);
			КонецЕсли;	
			Движение.СчетДт = СчетДт;
			
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,1,ТекСтрокаТабличнаяЧасть.Номенклатура);
			Если НЕ Движение.СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("МОЛ", Истина)) = Неопределено Тогда
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт, Движение.СчетДт, 3, МОЛПолучатель);
			Иначе
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт, Движение.СчетДт, 3, ТекСерия.СерияНоменклатуры);
			КонецЕсли;
			Если ЭтоПеремещениеНаОбособленноеПодразделение Тогда
				Если Движение.СчетДт.УчетПоПодразделениям Тогда
					Движение.ПодразделениеДт = ПодразделениеПолучатель;
				КонецЕсли;	
				Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Подразделения] = Подразделение;
			Иначе	
				Если Движение.СчетДт.УчетПоПодразделениям Тогда
					Движение.ПодразделениеДт = ПодразделениеПолучатель;
				КонецЕсли;
				Если ЭтоПеремещениеНаПредприятие Тогда
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,1,ПредприятиеПолучатель);
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,2,ВнутреннийДоговор);
				ИначеЕсли ЭтоПеремещениеНаПредприятиеБезВозмещения Тогда
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,1,ПредприятиеПолучатель);
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,2,ПодразделениеПолучатель);
				Иначе	
					Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина)] = СкладПолучатель;
				КонецЕсли;
			КонецЕсли;
			
			Если Движение.СчетДт.Количественный Тогда
				Движение.КоличествоДт = ТекСерия.Количество;
			КонецЕсли;
			
			Движение.СчетКт = СчетКт;
			
			Если ЭтоПоступлениеСОбособленногоПодразделения Тогда
				Если УчетПоподразделениямСчетУчета Тогда
					Движение.ПодразделениеКт = ПодразделениеПолучатель;
				КонецЕсли;
				Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Подразделения] = Подразделение;
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт,1,ТекСтрокаТабличнаяЧасть.Номенклатура);
			Если НЕ Движение.СчетКт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("МОЛ", Истина)) = Неопределено Тогда
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, Движение.СчетКт, 3, МОЛ);
			Иначе
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт, Движение.СчетКт, 3, ТекСерия.СерияНоменклатуры);
			КонецЕсли;
				//Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина)] = ТекСтрокаТабличнаяЧасть.Номенклатура;
				Движение.КоличествоКт = ТекСерия.Количество;
			Иначе	
				Если УчетПоподразделениямСчетУчета Тогда
					Движение.ПодразделениеКт = Подразделение;
				КонецЕсли;
				Если Движение.СчетКт = ПланыСчетов.Учетный.Счет91() Тогда
					Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи затрат", Истина)] = Справочники.СтатьиДоходовРасходов.НайтиПоНаименованию("Списание материалов и ГП (недостачи/излишки)", Истина);
				Иначе	
					Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина)] = Склад;
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт,1,ТекСтрокаТабличнаяЧасть.Номенклатура);
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт,3,ТекСерия.СерияНоменклатуры);
					Движение.КоличествоКт = ТекСерия.Количество;
				КонецЕсли;
			КонецЕсли;
			
			Движение.Сумма = ТекСерия.Сумма;
			Движение.Содержание = Комментарий;
			
			ТекСумма = ТекСумма + Движение.Сумма;
			
		КонецЦикла;
		
		СчетДт = Движение.СчетДт;
		
		//контроль выхода из минуса
		//Если НЕ ВидОперации = Перечисления.ВидыПеремещений.ПеремещениеНаОбособленноеПодразделение Тогда
		Если КорректироватьСебестоимостьПриВыходеОстаткаИзМинуса Тогда
			СтруктураПоискаМинусов = Новый Структура("Номенклатура, Счет", ТекСтрокаТабличнаяЧасть.Номенклатура, СчетДт); 
			НайденныеСтрокиМинусов = РезультатКонтрольМинусов.НайтиСтроки(СтруктураПоискаМинусов);
			Для каждого ТекСтрокаМинусов Из НайденныеСтрокиМинусов Цикл
				Если НЕ Окр(ТекСтрокаМинусов.СуммаКонечное + ТекСумма - ТекЦена * ТекСтрокаМинусов.КоличествоКонечное, 2) Тогда
					Продолжить;			
				КонецЕсли;
				Движение = Движения.Учетный.Добавить();
				Движение.Период = Дата;
				Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
				Движение.Предприятия = Предприятие;
				
				//вставка на выбор счета (обр №00000000687 Сети)
				Если ПроизводственноеПодразделение Тогда
					Движение.СчетДт = СчетЗатратыПроизводство;
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,1,СтатьяПоУмолчанию);
					Если Движение.СчетДт.ВидыСубконто.Количество() >= 2 Тогда
						УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,2,СлужбаПоУмолчанию);
					КонецЕсли;
				Иначе	
					Движение.СчетДт = СчетСебестоимость;
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,1,ТекСтрокаМинусов.Номенклатура);
				КонецЕсли;	
				//конец вставки
				
				Если Движение.СчетДт.УчетПоПодразделениям Тогда
					Движение.ПодразделениеДт = ПодразделениеПолучатель;
				КонецЕсли;
				Движение.СчетКт = СчетДт;
				Если Движение.СчетКт.УчетПоПодразделениям Тогда
					Движение.ПодразделениеКт = ПодразделениеПолучатель;
				КонецЕсли;	
				УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт,1,ТекСтрокаМинусов.Номенклатура);
				Если ЭтоПеремещениеНаОбособленноеПодразделение Тогда
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт,2,Подразделение);
				Иначе
					УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт,2,СкладПолучатель);
				КонецЕсли;
				Движение.Сумма = ТекСтрокаМинусов.СуммаКонечное + ТекСумма - ТекЦена * ТекСтрокаМинусов.КоличествоКонечное;
				Движение.Содержание = "Корректировка до с/с последнего перемещения " + Формат(ТекЦена, "ЧДЦ=2") ;
			КонецЦикла;
		КонецЕсли;
		
		//Авто перевод номенклатуры
		Если ЕстьАвтоПереводНоменклатуры Тогда
			Движение = Движения.Учетный.Добавить();
			Движение.Период = Дата;
			Движение.Предприятия = Предприятие;
			Движение.СценарийПлана = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
			
			Движение.СчетДт = ?(ЗначениеЗаполнено(ТекСтрокаТабличнаяЧасть.СчетУчетаБУ), ТекСтрокаТабличнаяЧасть.СчетУчетаБУ, ПланыСчетов.Учетный.Счет41());;
			Движение.СчетКт = ?(ЗначениеЗаполнено(ТекСтрокаТабличнаяЧасть.СчетУчетаБУ), ТекСтрокаТабличнаяЧасть.СчетУчетаБУ, ПланыСчетов.Учетный.Счет41());;
			Если Движение.СчетДт.УчетПоПодразделениям Тогда
				Движение.ПодразделениеДт = Подразделение;
			КонецЕсли;
			Если Движение.СчетКт.УчетПоПодразделениям Тогда
				Движение.ПодразделениеКт = Подразделение;
			КонецЕсли;
			
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,Движение.СчетДт,1,ТекСтрокаТабличнаяЧасть.Номенклатура);
			//Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина)] = ТекСтрокаТабличнаяЧасть.Номенклатура;
			Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина)] = Склад;
			Движение.КоличествоДт = ТекСтрокаТабличнаяЧасть.Количество;
			
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,Движение.СчетКт,1,ТекСтрокаТабличнаяЧасть.НоменклатураПервичная);
			//Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина)] = ТекСтрокаТабличнаяЧасть.Номенклатура.НоменклатураПервичная;
			Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Склады", Истина)] = Склад;
			Движение.КоличествоКт = ТекСтрокаТабличнаяЧасть.Количество;
			
			Если ЗначениеЗаполнено(ТекСтрокаТабличнаяЧасть.Сумма) Тогда
				Движение.Сумма = ТекСтрокаТабличнаяЧасть.Сумма;
			Иначе	
				Движение.Сумма = ТекСумма;
			КонецЕсли;
			Движение.Содержание = "Авто перевод номенклатуры";
		КонецЕсли;
	КонецЦикла;
			
	//меняем статус заказа
	Если НЕ ДополнительныеСвойства.Свойство("НеИзменятьСтатусЗаказа") И НЕ Отказ И ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
		Если Не ДокОснование.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт Тогда		
			ЗаказОб = ДокОснование.ПолучитьОбъект();
			ЗаказОб.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт;
			Если ЗаказОб.Проведен Тогда
				ЗаказОб.Записать(РежимЗаписиДокумента.Проведение);
			Иначе	
				ЗаказОб.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ И ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		Если ДокОснование.ВидОперации = Перечисления.ВидыЗаказов.ПеремещениеМеждуСкладами И Не ДокОснование.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт Тогда
			ДокЗаказ = ДокОснование.ПолучитьОбъект();
			ДокЗаказ.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт;
			ДокЗаказ.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	КонецЕсли;	
	
	// Контроль лтритцательных остатков
	//УЧ_Сервер.ПроверитьОтрицательныеОстатки(Ссылка,ПланыСчетов.Учетный.Счет41(),Отказ);
	
	НеКонтролироватьОстаткиСвойство = ?(ДополнительныеСвойства.Свойство("НеКонтролироватьОтрицательныеОстатки"), ДополнительныеСвойства.НеКонтролироватьОтрицательныеОстатки, Ложь);
	НеКонтролироватьОстатки = сабОбщегоНазначения.ПолучитьЗначениеСвойства(ПараметрыСеанса.ТекущийПользователь, "Разрешено проведение без контроля остатков");
	
	//контроль остатков новый
	Если НЕ ВидОперации = Перечисления.ВидыПеремещений.ПоступлениеСОбособленногоПодразделения И (Не НеКонтролироватьОстатки = Истина) И НЕ НеКонтролироватьОстаткиСвойство И НЕ РольДоступна("допОтключитьКонтрольОстатков") Тогда
		Для каждого ТекСтрокаМинус Из РезультатКонтроль Цикл
			Отказ = Истина;
			Сообщить(?(ТекСтрокаМинус.УчетПоПодразделениям, "По Подразделению " + Строка(ТекСтрокаМинус.Подразделение) + " ", "") + "На Складе """ + Строка(ТекСтрокаМинус.Склад) + """ номенклатуры """ + Строка(ТекСтрокаМинус.Номенклатура) + """" + ?(ИспользоватьСерии, " по серии """ + Строка(ТекСтрокаМинус.СерияНоменклатуры) + """", "") + " из необходимых " + Строка(ТекСтрокаМинус.КоличествоНужно) + " присутствует только "  + Строка(ТекСтрокаМинус.КоличествоОстаток) );
		КонецЦикла;
		Если Отказ Тогда
			ДополнительныеСвойства.Вставить("НехваткаОстатков", Истина);		
		КонецЕсли;
	КонецЕсли;
	
	//оптимизация проведения. проверка на изменения проводок
	сабОперОбщегоНазначения.ПроверитьПроводкиНаИзменение(Движения.Учетный, ДополнительныеСвойства.КоличественныеПоказателиПроводокДляПроверки); 
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если (РежимЗаписи = РежимЗаписиДокумента.Запись И Не ПометкаУдаления) Или РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если ВидОперации = Перечисления.ВидыПеремещений.ПоступлениеСОбособленногоПодразделения Тогда
			Если Подразделение = ПодразделениеПолучатель Тогда
				Сообщить("Подразделение-отправитель не может быть равно подразделению-получатель! Укажите корректные подразделения или используйте документ ""Внутреннее перемещение ТМЦ""");
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//Заполнить данные СФ по данным документа, если они не заполнены
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И ВидОперации = Перечисления.ВидыПеремещений.ПеремещениеНаОбособленноеПодразделение И Организация <> ОрганизацияПолучатель Тогда
		//ДополнительныеСвойства.Вставить("Проведение", Истина);
		Если Не ЗначениеЗаполнено(ДатаСчетФактуры) Тогда
			ДатаСчетФактуры = Дата;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НомерСчетФактуры) Тогда
			НомерСчетФактуры = Номер;
		КонецЕсли;
	КонецЕсли;
	
	//Обработка пометка удаления
	Если Не Ссылка.ПометкаУдаления И ПометкаУдаления Тогда	
		Запрос = новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	УЧ_ПеремещениеТоваров.Ссылка
		               |ИЗ
		               |	Документ.УЧ_ПеремещениеТоваров КАК УЧ_ПеремещениеТоваров
		               |ГДЕ
		               |	УЧ_ПеремещениеТоваров.ДокОснование = &ДокОснование
		               |	И НЕ УЧ_ПеремещениеТоваров.ПометкаУдаления
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	УЧ_ВозвратТоваровПоставщику.Ссылка
		               |ИЗ
		               |	Документ.УЧ_ВозвратТоваровПоставщику КАК УЧ_ВозвратТоваровПоставщику
		               |ГДЕ
		               |	УЧ_ВозвратТоваровПоставщику.ДокОснование = &ДокОснование
		               |	И НЕ УЧ_ВозвратТоваровПоставщику.ПометкаУдаления
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	УЧ_ПоступлениеТоваров.Ссылка
		               |ИЗ
		               |	Документ.УЧ_ПоступлениеТоваров КАК УЧ_ПоступлениеТоваров
		               |ГДЕ
		               |	УЧ_ПоступлениеТоваров.ДокОснование = &ДокОснование
		               |	И НЕ УЧ_ПоступлениеТоваров.ПометкаУдаления";
		Запрос.УстановитьПараметр("ДокОснование", ДокОснование);
		Выгрузка = Запрос.Выполнить().Выгрузить();
		
		Если Выгрузка.Количество() = 1 Тогда //остался единственный не помеченный подчиненный заказу документ - этот
			
			Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				
				Если ДокОснование.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт Тогда
					ЗаказОб = ДокОснование.ПолучитьОбъект();
					ЗаказОб.Статус = Перечисления.СтатусыЗаказовПоставщикам.Подтвержден;
					ЗаказОб.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
				
			КонецЕсли; 
			
		КонецЕсли;	
		
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("КоличественныеПоказателиПроводокДляПроверки", сабОперОбщегоНазначения.ПолучитьКоличественныеПоказателиПроводок(Ссылка));
	
	//проверка на изменение даты
	Если ЗначениеЗаполнено(Ссылка) И НЕ Дата = Ссылка.Дата Тогда
		ДополнительныеСвойства.Вставить("ИзмененаДатаДокумента", Истина);	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьСерии = Справочники.СерииНоменклатуры.СерииНоменклатурыИспользуются();
	КорректироватьСебестоимостьПриВыходеОстаткаИзМинуса = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("КорректироватьСебестоимостьПриВыходеОстаткаИзМинуса");
	РассчитыватьСебестоимостьПоСериям = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("РассчитыватьСебестоимостьПоСериям");
	
    ДополнительныеСвойства.Вставить("ИспользоватьСерии", ИспользоватьСерии);
	ДополнительныеСвойства.Вставить("КорректироватьСебестоимостьПриВыходеОстаткаИзМинуса", КорректироватьСебестоимостьПриВыходеОстаткаИзМинуса);
	ДополнительныеСвойства.Вставить("РассчитыватьСебестоимостьПоСериям", РассчитыватьСебестоимостьПоСериям);
	
	СтруктураИмен = УЧ_Сервер.СформироватьСтруктуруИмен(ЭтотОбъект);
	
	СтруктураСоответствий = ПоучитьСоответствияСчетовНоменклатуры();
	СоответствиеСчета = СтруктураСоответствий.Соответствия;
	СоответствиеУчетаПоПодразделениям = СтруктураСоответствий.СоответствияУчетаПодразделений;
	ДополнительныеСвойства.Вставить("СоответствиеУчетаПоПодразделениям", СоответствиеУчетаПоПодразделениям);
	
	ИспользоватьСерии = Справочники.СерииНоменклатуры.СерииНоменклатурыИспользуются();
	КорректироватьСебестоимостьПриВыходеОстаткаИзМинуса = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("КорректироватьСебестоимостьПриВыходеОстаткаИзМинуса");
	РассчитыватьСебестоимостьПоСериям = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("РассчитыватьСебестоимостьПоСериям");
	
	ДополнительныеСвойства.Вставить("Соответствия", СтруктураСоответствий.Соответствия);
	ДополнительныеСвойства.Вставить("ИспользоватьСерии", ИспользоватьСерии);
	ДополнительныеСвойства.Вставить("КорректироватьСебестоимостьПриВыходеОстаткаИзМинуса", КорректироватьСебестоимостьПриВыходеОстаткаИзМинуса);
	ДополнительныеСвойства.Вставить("РассчитыватьСебестоимостьПоСериям", РассчитыватьСебестоимостьПоСериям);
	
	ТаблицаОстатков = УЧ_Сервер.ПолучитьТаблицуОстатков(ЭтотОбъект, СтруктураИмен, СтруктураСоответствий);
	РезультатОстатки = ТаблицаОстатков.РезультатОстатки;
	РезультатКонтроль = ТаблицаОстатков.РезультатКонтроль;
	РезультатКонтрольМинусов = ТаблицаОстатков.РезультатКонтрольМинусов;
	
	ДополнительныеСвойства.Вставить("РезультатОстатки", РезультатОстатки);
	ДополнительныеСвойства.Вставить("РезультатКонтрольМинусов", РезультатКонтрольМинусов);
	ДополнительныеСвойства.Вставить("ИспользоватьСерии", ИспользоватьСерии);

	ЭтоПеремещениеНаОбособленноеПодразделение = Ложь;
	ЭтоПоступлениеСОбособленногоПодразделения = Ложь;
	
	Если ВидОперации = Перечисления.ВидыПеремещений.ПеремещениеНаОбособленноеПодразделение Тогда
		ЭтоПеремещениеНаОбособленноеПодразделение = Истина;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыПеремещений.ПоступлениеСОбособленногоПодразделения Тогда
		ЭтоПоступлениеСОбособленногоПодразделения = Истина;
	КонецЕсли;
	
	СоотвРодителяПодр = СоответствияПодразделенияРодителя();
	
	ДополнительныеСвойства.Вставить("ЭтоПоступлениеСОбособленногоПодразделения", ЭтоПоступлениеСОбособленногоПодразделения);
	ДополнительныеСвойства.Вставить("ЭтоПеремещениеНаОбособленноеПодразделение", ЭтоПеремещениеНаОбособленноеПодразделение);
	ДополнительныеСвойства.Вставить("СоотвРодителяПодр", СоотвРодителяПодр);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Для каждого ТекСтрокаТабличнаяЧасть Из ТабличнаяЧасть Цикл
		
		СчетКт = СоответствиеСчета.Получить(ТекСтрокаТабличнаяЧасть.Номенклатура);
		УчетПоподразделениямСчетУчета = СоответствиеУчетаПоПодразделениям.Получить(СчетКт);
		
		СтруктураПоиска = Новый Структура("Номенклатура, Склад", ТекСтрокаТабличнаяЧасть.Номенклатура, Склад);
		
		Если ЗначениеЗаполнено(ТекСтрокаТабличнаяЧасть.СчетУчетаБУ) Тогда
			СтруктураПоиска.Вставить("Счет", ТекСтрокаТабличнаяЧасть.СчетУчетаБУ); 
		КонецЕсли;
		
		Если УчетПоподразделениямСчетУчета Тогда
			Если ЭтоПоступлениеСОбособленногоПодразделения Тогда
				СтруктураПоиска.Вставить("Подразделение", ПодразделениеПолучатель);
			Иначе
				СтруктураПоиска.Вставить("Подразделение", Подразделение);
			КонецЕсли;
		КонецЕсли;
		
		СтрокиСерий = Новый Массив;
		СтрокиСерий.Добавить(ТекСтрокаТабличнаяЧасть);
		
		Если ИспользоватьСерии Тогда
			СтрокиСерий = СерииНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура, НомерСтрокиРеализации", ТекСтрокаТабличнаяЧасть.Номенклатура, ТекСтрокаТабличнаяЧасть.НомерСтроки)); 
			Если СтрокиСерий.Количество() <= 1 Тогда
				СтрокиСерий = Новый Массив;
				СтрокиСерий.Добавить(ТекСтрокаТабличнаяЧасть);
			КонецЕсли;
		КонецЕсли;
		
		Для каждого ТекСерия Из СтрокиСерий Цикл
			
			Если РассчитыватьСебестоимостьПоСериям Тогда
				СтруктураПоиска.Вставить("СерияНоменклатуры", ТекСерия.СерияНоменклатуры);
			КонецЕсли;
			
			ВыборкаДетальныеЗаписи = РезультатОстатки.НайтиСтроки(СтруктураПоиска);
			
			Если РассчитыватьСебестоимостьПоСериям И Не ЗначениеЗаполнено(ТекСерия.СерияНоменклатуры) И НЕ ВыборкаДетальныеЗаписи.Количество() Тогда //если счет без учета по сериям и серия не указана в документе
				СтруктураПоиска.Вставить("СерияНоменклатуры", Неопределено);
				ВыборкаДетальныеЗаписи = РезультатОстатки.НайтиСтроки(СтруктураПоиска);
			КонецЕсли;
			
			Если ТекСерия.Количество <> 0 Тогда
				
				ТекСерия.Цена = 0;
				ТекСерия.Сумма = 0;
				КоличествоОстаток = 0;
				СуммаОстаток = 0;
				Для каждого ТекСтрока Из ВыборкаДетальныеЗаписи Цикл
					КоличествоОстаток = КоличествоОстаток +  ТекСтрока.Количество;	
					СуммаОстаток = СуммаОстаток +  ТекСтрока.Сумма;
					Если НЕ ЗначениеЗаполнено(ТекСтрокаТабличнаяЧасть.СчетУчетаБУ) Тогда
						СоответствиеСчета.Вставить(ТекСтрокаТабличнаяЧасть.Номенклатура, ТекСтрока.Счет);
					КонецЕсли;
				КонецЦикла;
				ЦенаОстаток = ?(КоличествоОстаток, СуммаОстаток / КоличествоОстаток, 0);  
				
				Если ТекСерия.Количество = КоличествоОстаток Тогда
					ТекСерия.Цена = ЦенаОстаток;
					ТекСерия.Сумма = СуммаОстаток;
				Иначе	
					ТекСерия.Цена = ЦенаОстаток;
					ТекСерия.Сумма = ЦенаОстаток * ТекСерия.Количество;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		//усреднение суммы по номенклатуре в случае нескольких серий
		Если СтрокиСерий.Количество() > 1 Тогда
			ТекСтрокаТабличнаяЧасть.Сумма = 0;
			Для каждого ТекСерия Из СтрокиСерий Цикл
				ТекСтрокаТабличнаяЧасть.Сумма = ТекСтрокаТабличнаяЧасть.Сумма + ТекСерия.Сумма; 
			КонецЦикла;
			ТекСтрокаТабличнаяЧасть.Цена = ?(ТекСтрокаТабличнаяЧасть.Количество, ТекСтрокаТабличнаяЧасть.Сумма / ТекСтрокаТабличнаяЧасть.Количество, 0); 
		КонецЕсли;
		
	КонецЦикла;
	
	СуммаИтог = ТабличнаяЧасть.Итог("Сумма");
	СуммаДокумента = ТабличнаяЧасть.Итог("Сумма");
	СуммаНДСИтог = ТабличнаяЧасть.Итог("СуммаНДС");
	
	ДополнительныеСвойства.Вставить("СоответствиеСчета", СоответствиеСчета);
    ДополнительныеСвойства.Вставить("РезультатКонтроль", РезультатКонтроль);
	
	//из подписки на событие
	БюджетныйНаСервере.ДокументыПередЗаписьюПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);   
	
КонецПроцедуры

Функция СоответствияПодразделенияРодителя()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтруктураПредприятия.Ссылка КАК Подразделение,
	               |	ВЫБОР
	               |		КОГДА СтруктураПредприятия.Ссылка.Родитель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	               |			ТОГДА СтруктураПредприятия.Ссылка
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА СтруктураПредприятия.Ссылка.Родитель.Родитель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	               |					ТОГДА СтруктураПредприятия.Ссылка.Родитель
	               |				ИНАЧЕ ВЫБОР
	               |						КОГДА СтруктураПредприятия.Ссылка.Родитель.Родитель.Родитель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	               |							ТОГДА СтруктураПредприятия.Ссылка.Родитель.Родитель
	               |						ИНАЧЕ СтруктураПредприятия.Ссылка.Родитель.Родитель.Родитель
	               |					КОНЕЦ
	               |			КОНЕЦ
	               |	КОНЕЦ КАК Родитель
	               |ИЗ
	               |	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	               |ГДЕ
	               |	СтруктураПредприятия.Ссылка В(&Ссылка)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СтруктураПредприятия.Ссылка,
	               |	ВЫБОР
	               |		КОГДА СтруктураПредприятия.Ссылка.Родитель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	               |			ТОГДА СтруктураПредприятия.Ссылка
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА СтруктураПредприятия.Ссылка.Родитель.Родитель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	               |					ТОГДА СтруктураПредприятия.Ссылка.Родитель
	               |				ИНАЧЕ ВЫБОР
	               |						КОГДА СтруктураПредприятия.Ссылка.Родитель.Родитель.Родитель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	               |							ТОГДА СтруктураПредприятия.Ссылка.Родитель.Родитель
	               |						ИНАЧЕ СтруктураПредприятия.Ссылка.Родитель.Родитель.Родитель
	               |					КОНЕЦ
	               |			КОНЕЦ
	               |	КОНЕЦ";
	
	
	МассПодр = Новый Массив;
	МассПодр.Добавить(Подразделение);
	МассПодр.Добавить(ПодразделениеПолучатель);
	
	Запрос.УстановитьПараметр("Ссылка", МассПодр);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Соотв = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		Соотв.Вставить(Выборка.Подразделение, Выборка.Родитель);		
	КонецЦикла;
	
	Возврат Соотв;
	
	
КонецФункции // ()

Функция ПоучитьСоответствияСчетовНоменклатуры()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Табл.Номенклатура КАК Номенклатура,
	               |	Табл.СчетУчетаБУ КАК СчетУчетаБУ,
	               |	Табл.НовыйСчетУчетаБУ КАК НовыйСчетУчетаБУ
	               |ПОМЕСТИТЬ ТЧ
	               |ИЗ
	               |	&Табл КАК Табл
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЧ.СчетУчетаБУ КАК СчетУчетаБУ,
	               |	НоменклатураСпи.Ссылка КАК Номенклатура
	               |ПОМЕСТИТЬ ТЧ2
	               |ИЗ
	               |	ТЧ КАК ТЧ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпи
	               |		ПО ТЧ.Номенклатура = НоменклатураСпи.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЧ2.Номенклатура КАК Номенклатура,
	               |	ВЫБОР
	               |		КОГДА ТЧ2.СчетУчетаБУ = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ПустаяСсылка)
	               |			ТОГДА ВЫБОР
	               |					КОГДА ТЧ2.Номенклатура.Счет10 = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ПустаяСсылка)
	               |						ТОГДА &Счет41
	               |					ИНАЧЕ ТЧ2.Номенклатура.Счет10
	               |				КОНЕЦ
	               |		ИНАЧЕ ТЧ2.СчетУчетаБУ
	               |	КОНЕЦ КАК Счет,
	               |	(ВЫБОР
	               |		КОГДА ТЧ2.СчетУчетаБУ = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ПустаяСсылка)
	               |			ТОГДА ВЫБОР
	               |					КОГДА ТЧ2.Номенклатура.Счет10 = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ПустаяСсылка)
	               |						ТОГДА &Счет41
	               |					ИНАЧЕ ТЧ2.Номенклатура.Счет10
	               |				КОНЕЦ
	               |		ИНАЧЕ ТЧ2.СчетУчетаБУ
	               |	КОНЕЦ).УчетПоПодразделениям КАК УчетПоПодразделениям
	               |ПОМЕСТИТЬ СоотвНом
	               |ИЗ
	               |	ТЧ2 КАК ТЧ2
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТЧ2.Номенклатура,
	               |	ВЫБОР
	               |		КОГДА ТЧ2.СчетУчетаБУ = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ПустаяСсылка)
	               |			ТОГДА ВЫБОР
	               |					КОГДА ТЧ2.Номенклатура.Счет10 = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ПустаяСсылка)
	               |						ТОГДА &Счет41
	               |					ИНАЧЕ ТЧ2.Номенклатура.Счет10
	               |				КОНЕЦ
	               |		ИНАЧЕ ТЧ2.СчетУчетаБУ
	               |	КОНЕЦ,
	               |	(ВЫБОР
	               |		КОГДА ТЧ2.СчетУчетаБУ = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ПустаяСсылка)
	               |			ТОГДА ВЫБОР
	               |					КОГДА ТЧ2.Номенклатура.Счет10 = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ПустаяСсылка)
	               |						ТОГДА &Счет41
	               |					ИНАЧЕ ТЧ2.Номенклатура.Счет10
	               |				КОНЕЦ
	               |		ИНАЧЕ ТЧ2.СчетУчетаБУ
	               |	КОНЕЦ).УчетПоПодразделениям
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЧ.НовыйСчетУчетаБУ КАК НовыйСчетУчетаБУ,
	               |	Номенклатура1.Ссылка КАК Номенклатура
	               |ПОМЕСТИТЬ ТЗ3
	               |ИЗ
	               |	ТЧ КАК ТЧ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура1
	               |		ПО ТЧ.Номенклатура = Номенклатура1.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЗ3.НовыйСчетУчетаБУ КАК Счет,
	               |	(ВЫБОР
	               |		КОГДА ТЗ3.НовыйСчетУчетаБУ = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ПустаяСсылка)
	               |			ТОГДА ВЫБОР
	               |					КОГДА ТЗ3.Номенклатура.Счет10 = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ПустаяСсылка)
	               |						ТОГДА &Счет41
	               |					ИНАЧЕ ТЗ3.Номенклатура.Счет10
	               |				КОНЕЦ
	               |		ИНАЧЕ ТЗ3.НовыйСчетУчетаБУ
	               |	КОНЕЦ).УчетПоПодразделениям КАК УчетПоПодразделениям
	               |ИЗ
	               |	ТЗ3 КАК ТЗ3";
	
	Запрос.УстановитьПараметр("Счет41", ПланыСчетов.Учетный.Счет41());
	Запрос.УстановитьПараметр("Табл", ТабличнаяЧасть.Выгрузить());
	
	МассивЗапросов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	Выборка = МассивЗапросов[2].Выбрать();
	ВыборкаПодр = МассивЗапросов[4].Выбрать();
	
	
	Соответствия = Новый Соответствие;
	СоответствияУчетаПодразделений = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		Соответствия.Вставить(Выборка.Номенклатура, Выборка.Счет);
		СоответствияУчетаПодразделений.Вставить(Выборка.Счет, Выборка.УчетПоПодразделениям);
	КонецЦикла;
	Пока ВыборкаПодр.Следующий() Цикл
		СоответствияУчетаПодразделений.Вставить(ВыборкаПодр.Счет, ВыборкаПодр.УчетПоПодразделениям);
	КонецЦикла;
	Соответствия.Вставить(Неопределено, ПланыСчетов.Учетный.Счет41());
	Соответствия.Вставить(Null, ПланыСчетов.Учетный.Счет41());
	Соответствия.Вставить(Справочники.Номенклатура.ПустаяСсылка(), ПланыСчетов.Учетный.Счет41());
	
	МассивМатериаловБезСчета = Новый Массив;
	Для каждого ТекСтрока Из ТабличнаяЧасть Цикл
		Если Не ЗначениеЗаполнено(ТекСтрока.СчетУчетаБУ) И МассивМатериаловБезСчета.Найти(ТекСтрока["Номенклатура"]) = Неопределено Тогда
			МассивМатериаловБезСчета.Добавить(ТекСтрока["Номенклатура"]);	
		КонецЕсли;
	КонецЦикла;
	
	НовоеСоответствие = сабОбщегоНазначения.ПолучитьСчетУчетаНоменклатуры(МассивМатериаловБезСчета, Организация, Неопределено);
	Для каждого ТекСоотв Из НовоеСоответствие Цикл
		Если ЗначениеЗаполнено(ТекСоотв.Значение.СчетУчетаУУ) Тогда
			Соответствия.Вставить(ТекСоотв.Ключ, ТекСоотв.Значение.СчетУчетаУУ);
			СоответствияУчетаПодразделений.Вставить(ТекСоотв.Значение.СчетУчетаУУ, ТекСоотв.Значение.СчетУчетаУУ.УчетПоПодразделениям);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("Соответствия, СоответствияУчетаПодразделений", Соответствия, СоответствияУчетаПодразделений);	
	
КонецФункции // ()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	//Если Не (Подразделение.ПроизводственноеПодразделение Или ВидОперации = Перечисления.ВидыПеремещений.Перемещение) Тогда
	//	ТЧДока = Новый ТаблицаЗначений;
	//	ТЧДока.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	//	ТЧДока.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15,3)));
	//	
	//	Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
	//		СтрокаТЧДока = ТЧДока.Добавить();
	//		СтрокаТЧДока.Номенклатура = СтрокаТЧ.Номенклатура;
	//		СтрокаТЧДока.НомерСтроки = СтрокаТЧ.НомерСтроки;
	//	КонецЦикла;	
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ТЧДокумента.НомерСтроки,
	//	|	ТЧДокумента.Номенклатура
	//	|ПОМЕСТИТЬ ВТ_ТЧДока
	//	|ИЗ
	//	|	&ТЧДокумента КАК ТЧДокумента
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ВТ_ТЧДока.НомерСтроки,
	//	|	ВТ_ТЧДока.Номенклатура,
	//	|	ВТ_ТЧДока.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
	//	|ИЗ
	//	|	ВТ_ТЧДока КАК ВТ_ТЧДока
	//	|ГДЕ
	//	|	(ВТ_ТЧДока.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.сабТипыНоменклатуры.Сырье)
	//	|			ИЛИ ВТ_ТЧДока.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.сабТипыНоменклатуры.Материалы))";
	//	Запрос.УстановитьПараметр("ТЧДокумента", ТЧДока);
	//	
	//	РезультатЗапроса = Запрос.Выполнить();
	//	
	//	Если Не РезультатЗапроса.Пустой() Тогда
	//		Отказ = Истина;
	//		Выборка = РезультатЗапроса.Выбрать();
	//		Пока Выборка.Следующий() Цикл
	//			Сообщение = Новый СообщениеПользователю();
	//			Сообщение.Поле = "ТабличнаяЧасть[" + Строка(Выборка.НомерСтроки - 1) + "].Номенклатура";
	//			Сообщение.Текст = "В строке " + Выборка.НомерСтроки + " выбрана номенклатура с неправильным типом: " + Выборка.ТипНоменклатуры;
	//			Сообщение.УстановитьДанные(ЭтотОбъект);
	//			Сообщение.Сообщить();
	//		КонецЦикла;
	//	КонецЕсли; 
	//КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыПеремещений.ПеремещениеНаПредприятие ИЛИ ВидОперации = Перечисления.ВидыПеремещений.ПеремещениеНаПредприятиеБезВозмещения Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("СкладПолучатель"));	
	КонецЕсли;
		
КонецПроцедуры


Процедура ОбработкаУдаленияПроведения(Отказ)
	РучнаяКорректировка = Ложь;
КонецПроцедуры


Процедура ПриКопировании(ОбъектКопирования)
	
	РучнаяКорректировка = Ложь;
	
КонецПроцедуры


Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	БюджетныйНаСервере.ПриУстановкеНовогоНомераПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс);
КонецПроцедуры


Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
		
		//Если НЕ (ДанныеЗаполнения.ВидОперации = Перечисления.ВидыЗаказов.ВнутреннееПеремещение Или ДанныеЗаполнения.ВидОперации = Перечисления.ВидыЗаказов.ПеремещениеМеждуСкладами) Тогда
		//	СтандартнаяОбработка = Ложь;
		//	Комментарий = "##НеверныйВидОперации" + ДанныеЗаполнения.ВидОперации;
		//	Возврат;
		//КонецЕсли; 
		
		Отказ = сабОперОбщегоНазначения.ПроверкаСозданияНаОснованииНаСервере(ДанныеЗаполнения, Комментарий, СтандартнаяОбработка);
		Если Отказ.Признак = "##УжеСоздан" Тогда
			ВызватьИсключение "На основании текущего документа уже введен документ " + Отказ.Ссылка;
		ИначеЕсли Отказ.Признак = "##НеПроведен" Тогда
			ВызватьИсключение "Документ-основание не проведен. Ввод на основании не возможен.";
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения,, "Дата, Номер, Проведен, РучнаяКорректировка");
		
		ЭтоПеремещениеМеждуСкладами = Ложь;
		Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыЗаказовНаПеремещение.ПеремещениеМеждуСкладами Тогда
			ЭтоПеремещениеМеждуСкладами = Истина;
			ВидОперации = Перечисления.ВидыПеремещений.Перемещение;
		КонецЕсли;
		
		// Заполнение шапки
		ДокОснование 	= ДанныеЗаполнения;
		Дата = ДанныеЗаполнения.ДатаПоступления;
		
		Для Каждого ТекСтрокаТабличнаяЧасть Из ДанныеЗаполнения.ТабличнаяЧасть Цикл
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаТабличнаяЧасть);
			НоваяСтрока.Номенклатура = ТекСтрокаТабличнаяЧасть.Номенклатура;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.УЧ_ПеремещениеТоваров") Тогда
		
		Отказ = сабОперОбщегоНазначения.ПроверкаСозданияНаОснованииНаСервере(ДанныеЗаполнения, Комментарий, СтандартнаяОбработка);
		Если Отказ.Признак = "##УжеСоздан" Тогда
			ВызватьИсключение "На основании Перемещение ТМЦ (упр) уже введен документ " + Отказ.Ссылка;
		ИначеЕсли Отказ.Признак = "##НеПроведен" Тогда
			ВызватьИсключение "Документ Перемещение ТМЦ (упр) не проведен. Ввод на основании не возможен.";
		КонецЕсли;	
		
		// Заполнение шапки
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения, ,"Дата, Номер, Комментарий, ДокОснование, ВидОперации, ИсправлениеСФ, НомерСчетФактуры, ДатаСчетФактуры, СтрокаПлатежноРасчетныеДокументы");
		ДокОснование 	= ДанныеЗаполнения.Ссылка;
		СуммаДокумента 	= ДанныеЗаполнения.СуммаДокумента;
		ВидОперации 	= Перечисления.ВидыПеремещений.ПоступлениеСОбособленногоПодразделения;
		Для Каждого ТекСтрокаТабличнаяЧасть Из ДанныеЗаполнения.ТабличнаяЧасть Цикл
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаТабличнаяЧасть);
			НоваяСтрока.СчетУчетаБУ = ТекСтрокаТабличнаяЧасть.НовыйСчетУчетаБУ;
			НоваяСтрока.НовыйСчетУчетаБУ = ТекСтрокаТабличнаяЧасть.СчетУчетаБУ;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.УЧ_ПоступлениеТоваров") Тогда
		
		Отказ = сабОперОбщегоНазначения.ПроверкаСозданияНаОснованииНаСервере(ДанныеЗаполнения, Комментарий, СтандартнаяОбработка);
		Если Отказ.Признак = "##УжеСоздан" Тогда
			ВызватьИсключение "На основании Поступление ТМЦ и услуг (упр) уже введен документ " + Отказ.Ссылка;
		ИначеЕсли Отказ.Признак = "##НеПроведен" Тогда
			ВызватьИсключение "Документ Поступление ТМЦ и услуг (упр) не проведен. Ввод на основании не возможен.";
		КонецЕсли;	
		
		// Заполнение шапки
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения, ,"Дата, Номер, Комментарий, ДокОснование");
		ДокОснование 	= ДанныеЗаполнения.Ссылка;
		СуммаДокумента 	= ДанныеЗаполнения.СуммаДокумента;
		ВидОперации 	= Перечисления.ВидыПеремещений.Перемещение;
		Для Каждого ТекСтрокаТабличнаяЧасть Из ДанныеЗаполнения.ТабличнаяЧасть Цикл
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаТабличнаяЧасть);
			НоваяСтрока.СчетУчетаБУ = ТекСтрокаТабличнаяЧасть.СчетУчета;
			//НоваяСтрока.НовыйСчетУчетаБУ = ТекСтрокаТабличнаяЧасть.СчетУчетаБУ;
		КонецЦикла;
		
	КонецЕсли;
	
	сабОбщегоНазначенияБУХ.сабОбработкиЗаполненияУчпетныхДокументовОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
КонецПроцедуры

Процедура ОбработкаЗаполненияСФормы(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт

	ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);	

КонецПроцедуры
