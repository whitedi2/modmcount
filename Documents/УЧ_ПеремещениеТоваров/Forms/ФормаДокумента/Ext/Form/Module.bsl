
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	//КонецЕсли;
	
	//++саб
	сабПриЧтенииНаСервере(ТекущийОбъект);
	//--саб
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, Новый Структура("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты") );
	//КонецЕсли;
	
	//++саб
	сабПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	//--саб
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	//КонецЕсли;
	
	//++саб
	сабПриОткрытии(Отказ);
	//--саб
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	
	//	Если МодульУправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
	//		ОбновитьЭлементыДополнительныхРеквизитов();
	//		МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" Тогда
		Если Параметр.Свойство("ФормаВладелецУИД") И Параметр.ФормаВладелецУИД = ЭтаФорма.УникальныйИдентификатор Тогда
			сабОбщегоНазначения.ПрикрепитьФайлКДокументу(Параметр); 
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	//КонецЕсли;
	
	//НеобходимоСинхронизироватьСерии = Истина;
	//
	//Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
	//	ВыборкаОбработкиДокументов = РегистрыСведений.сабОбработкаДокументов.Выбрать(Новый Структура("ДокументУУ", Объект.Ссылка));
	//	
	//	Если ВыборкаОбработкиДокументов.Следующий() Тогда
	//		НеобходимоСинхронизироватьСерии = Не ВыборкаОбработкиДокументов.АвтообновленияЗаблокированы;
	//	КонецЕсли;
	//	
	//КонецЕсли;
		
	ТекущийОбъект.ДополнительныеСвойства.Вставить("СинхронизироватьТЧСерииДокументаУУ", Истина);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) И Не Отказ И БюджетныйНаСервере.ЕстьСвойствоОбъекта(ЭтотОбъект, "ДокументБУ") И ЗначениеЗаполнено(ЭтотОбъект.ДокументБУ) И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если Не ОбщегоНазначения.КоллекцииИдентичны(Объект.СерииНоменклатуры, Объект.Ссылка.СерииНоменклатуры,"НомерСтроки,Номенклатура,ДатаПроизводства,Количество,НомерСтрокиРеализации,СерияНоменклатуры",,Истина) Тогда
			ПараметрыЗаписи.Вставить("СинхронизироватьСерииНоменклатурыСДокументомБух",Истина); 
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	МодульУправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
	//КонецЕсли;
	
КонецПроцедуры


// СтандартныеПодсистемы.КонтактнаяИнформация

// Поддержка дополнительных реквизитов.

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	//КонецЕсли;
	
КонецПроцедуры




// Конец СтандартныеПодсистемы.КонтактнаяИнформация


&НаКлиенте
Процедура сабПриОткрытии(Отказ)

	//-lud 19/10/22 Вся проверка вынесена в модуль объекта, в процедуру Обработка заполнения
	//Отказ = сабОперОбщегоНазначенияНаКлиенте.ПроверкаСозданияНаОснованииНаКлиенте(Объект);
	//Если Отказ Тогда
	//	Возврат;	
	//КонецЕсли; 
	
	Если СтрНайти(Объект.Комментарий, "##НеверныйВидОперации") Тогда
		Предупреждение("Невозможно создать перемещение. Неверный вид операции: <" + Сред(Объект.Комментарий, 22) + ">!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	//РольОСТТДоступна = БюджетныйНаСервере.РольДоступнаСервер("сабСопровождающийТТ");
	
	//Если Не БюджетныйНаСервере.РольАдминаДоступнаСервер() И Не сабОбщегоНазначения.ПолучитьЗначениеСвойства(БюджетныйНаСервере.ПолучитьПользователя(), "Возможность менять цену в заказах (Пользователь)") = Истина
	//	И НЕ РольОСТТДоступна Тогда
	//	Элементы.ТабличнаяЧастьЦена.ТолькоПросмотр = Истина;
	//	Элементы.ТабличнаяЧастьСумма.ТолькоПросмотр = Истина;
	//	Элементы.ТабличнаяЧастьСтавкаНДС.ТолькоПросмотр = Истина;
	//	Элементы.ТабличнаяЧастьСуммаНДС.ТолькоПросмотр = Истина;
	//	Элементы.ТабличнаяЧастьОбновитьЦену.Видимость = Ложь;
	//КонецЕсли;
	
	ВидОперацииПриИзмененииВидимость();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СчетТовары()
	Возврат ПланыСчетов.Учетный.Счет41()
КонецФункции

&НаСервере
Функция ДокМомент()
	Возврат Объект.Ссылка.МоментВремени();	
КонецФункции


&НаКлиенте
Процедура ТабличнаяЧастьТоварНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//СтандартнаяОбработка = ЛОЖЬ;
	//Если Объект.Ссылка.Пустая() Тогда
	//	ДатаГраница = КонецДня(Объект.Дата)
	//Иначе
	//	ДатаГраница =  ДокМомент();
	//КонецЕсли;
	//Подр = Объект.Подразделение;
	//Тов = Элементы.ТабличнаяЧасть.ТекущиеДанные.Номенклатура;
	//Парам = Новый Структура("ТекущаяСтрока, ВыбДата,ВыбСчет,ВыбПредприятие,ВыбПодразделение,ВыбСклад",Тов, ДатаГраница,СчетТовары(),Объект.Предприятие,Подр,Объект.Склад);
	//ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаВыбораСОстатками4143",Парам,Элемент);
	//Если БюджетныйНаСервере.РольДоступнаСервер("сабОперЗавПроизводством") Тогда 		
	//	СтандартнаяОбработка = Ложь;
	//	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаСписка", Новый Структура("ПометкаУдаления, РежимВыбора, ТекущаяСтрока", Истина, Истина, Элементы.ТабличнаяЧасть.ТекущиеДанные.Номенклатура), Элемент);
	//КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеПриИзменении(Элемент)
	ПредприятиеПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПредприятиеПриИзмененииНаСервере()
	сабОбщегоНазначенияКлиентСервер.СкрытьПодразделения(ЭтаФорма);
	ПредприятиеПолучательПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура сабПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	БюджетныйНаСервере.ДействияПриСозданииФормыДокумента(ЭтаФорма);
	
	Если ЗначениеЗаполнено(Объект.ДокОснование) И ТипЗнч(Объект.ДокОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		Элементы.ТабличнаяЧастьЗаполнитьИзЗаказа.Видимость = Истина;
		Элементы.ТабличнаяЧастьКоличествоВЗаказе.Видимость = Истина;
		РассчитатьКолонкуКоличествоИзЗаказа();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДокОснование) ИЛИ ТипЗнч(Объект.ДокОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		УстановитьСвязьПоВиду();
	КонецЕсли; 
	
	//Элементы.ТабличнаяЧастьЦена.Видимость = (Объект.Организация <> Объект.ОрганизацияПолучатель);
	//Элементы.ТабличнаяЧастьСумма.Видимость = (Объект.Организация <> Объект.ОрганизацияПолучатель);
	//Элементы.ТабличнаяЧастьСуммаНДС.Видимость = (Объект.Организация <> Объект.ОрганизацияПолучатель);
	Элементы.Группа13.Видимость = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыПеремещений.ПеремещениеНаОбособленноеПодразделение") И Объект.Организация <> Объект.ОрганизацияПолучатель);
	
	//Элементы.ПодразделениеПолучатель.Доступность = (Не Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыПеремещений.Перемещение"));
	
	//++для опер учета
	ОперУчетВключен = Ложь;
	//Элементы.ТабличнаяЧастьНоменклатураКод.Видимость = ОперУчетВключен;
	
	Если НЕ ОперУчетВключен Тогда
		Элементы.ТабличнаяЧастьЗаполнитьИзТСД.Видимость = Ложь;
		Элементы.ТабличнаяЧастьЗаполнитьИзТСД.Видимость = Ложь;
		Элементы.ТабличнаяЧастьЗаполнитьПоСкладуБрака.Заголовок = "Заполнить по складу";
		Элементы.ТабличнаяЧастьЗаполнитьПоСкладуБракаАлко.Видимость = Ложь;
	КонецЕсли;
	
	ПредприятиеПолучательПриИзмененииНаСервере();
	
	ЗаполнитьАртикул();
	
	ИспользоватьСерии = Справочники.СерииНоменклатуры.СерииНоменклатурыИспользуются();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязьПоВиду()
	//Массив = Новый Массив;
	//Массив.Добавить(Тип("ДокументСсылка.ЗаказНаПеремещение"));
	//ОписаниеТиповЧ = Новый ОписаниеТипов(Массив);
	//Элементы.ДокОснование.ОграничениеТипа = ОписаниеТиповЧ;
	//
	//НоваяСвязь = Новый ПараметрВыбора("Отбор.ВидОперации", Перечисления.ВидыЗаказов.ВнутреннееПеремещение);
	//Если Объект.ВидОперации = Перечисления.ВидыПеремещений.ПеремещениеНаОбособленноеПодразделение Тогда
	//	НоваяСвязь2 = Новый ПараметрВыбора("Отбор.Контрагент", Объект.Подразделение);
	//Иначе
	//	НоваяСвязь2 = Новый ПараметрВыбора("Отбор.Подразделение", Объект.Подразделение);
	//КонецЕсли;
	//НовыйМассив = Новый Массив();
	//НовыйМассив.Добавить(НоваяСвязь);
	//НовыйМассив.Добавить(НоваяСвязь2);
	//НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
	//Элементы.ДокОснование.ПараметрыВыбора = НовыеСвязи;
КонецПроцедуры



&НаСервере
Процедура сабПриЧтенииНаСервере(ТекущийОбъект)
	сабОбщегоНазначения.ОтобразитьСостояниеДокумента(ЭтаФорма);
КонецПроцедуры


&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	сабОбщегоНазначения.ОтобразитьСостояниеДокумента(ЭтаФорма, ТекущийОбъект);  
	
	//Синхронизация серий с документом БУ для отоброжения изменений в сборе
	Если сабОбщегоНазначенияПовтИсп.ПолучитьСерийныйУчет() Тогда
		Если ПараметрыЗаписи.Свойство("СинхронизироватьСерииНоменклатурыСДокументомБух") Тогда
			Если Не Отказ И ПараметрыЗаписи.СинхронизироватьСерииНоменклатурыСДокументомБух	Тогда
				УстановитьПривилегированныйРежим(Истина);
				ДокументБУОбъект = ЭтотОбъект.ДокументБУ.ПолучитьОбъект();  
				ДокументБУОбъект.ДополнительныеСвойства.Вставить("НеДобавлятьЗаписьВРегистрИзмененных",Истина);
				ДокументБУОбъект.СерииНоменклатуры.Загрузить(ТекущийОбъект.СерииНоменклатуры.Выгрузить());
				Попытка
					ДокументБУОбъект.Записать();
				Исключение
					Сообщить("Табличная часть ""Серии номенклатуры"" не была синхронизирована с документом " + ЭтотОбъект.ДокументБУ + ". По причине: " +
					ОписаниеОшибки());
				КонецПопытки;
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ТабличнаяЧастьМатериалПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	Если Не ТекДанные = Неопределено Тогда
		УстановитьЗависимыеДанныеВТЧ(ТекДанные);
		РассчитатьСумму(ТекДанные);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗависимыеДанныеВТЧ(ТекДанные)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыПеремещений.ПеремещениеНаОбособленноеПодразделение") Тогда
		ТекДанные.СчетУчетаБУ = сабОбщегоНазначения.ПолучитьСчетУчетаНоменклатуры(ТекДанные.Номенклатура, Объект.Организация, Объект.Склад);
		ТекДанные.НовыйСчетУчетаБУ = ПредопределенноеЗначение("ПланСчетов.Учетный.ТоварыВПути");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыПеремещений.ПоступлениеСОбособленногоПодразделения") Тогда
		ТекДанные.СчетУчетаБУ = ПредопределенноеЗначение("ПланСчетов.Учетный.ТоварыВПути");
		ТекДанные.НовыйСчетУчетаБУ = сабОбщегоНазначения.ПолучитьСчетУчетаНоменклатуры(ТекДанные.Номенклатура, Объект.Организация, Объект.Склад);
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыПеремещений.ПеремещениеНаПредприятие") Тогда
		ТекДанные.СчетУчетаБУ = сабОбщегоНазначения.ПолучитьСчетУчетаНоменклатуры(ТекДанные.Номенклатура, Объект.Организация, Объект.Склад);
		ТекДанные.НовыйСчетУчетаБУ = ПредопределенноеЗначение("ПланСчетов.Учетный.ВНХТоварные");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыПеремещений.ПеремещениеНаПредприятиеБезВозмещения") Тогда
		ТекДанные.СчетУчетаБУ = сабОбщегоНазначения.ПолучитьСчетУчетаНоменклатуры(ТекДанные.Номенклатура, Объект.Организация, Объект.Склад);
		ТекДанные.НовыйСчетУчетаБУ = ПредопределенноеЗначение("ПланСчетов.Учетный.КазнаВспом");
	Иначе
		ТекДанные.СчетУчетаБУ = сабОбщегоНазначения.ПолучитьСчетУчетаНоменклатуры(ТекДанные.Номенклатура, Объект.Организация, Объект.Склад);
		ТекДанные.НовыйСчетУчетаБУ = сабОбщегоНазначения.ПолучитьСчетУчетаНоменклатуры(ТекДанные.Номенклатура, Объект.Организация, Объект.Склад);
	КонецЕсли;	
	
	//Установим вид цен и рассчитаем цены
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыПеремещений.ПеремещениеНаОбособленноеПодразделение") Тогда
		ТекДанные.Цена = РассчитатьЦенуВнутреннегоПеремещения(ТекДанные.Номенклатура, Объект.Предприятие, Объект.Подразделение, Объект.ПодразделениеПолучатель, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()));
		Если Не ЗначениеЗаполнено(ТекДанные.Цена) Тогда
			ТекДанные.Цена = РассчитатьЦенуВнутреннегоПеремещения(ТекДанные.Номенклатура, Объект.Предприятие, Объект.ПодразделениеПолучатель, Объект.Подразделение, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()));
		КонецЕсли;
	КонецЕсли;	
	
	//Установим НДС и артикул
	Если ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
		ТекРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.Номенклатура, "СтавкаНДС, Артикул, ЕдиницаИзмерения");
		ТекДанные.СтавкаНДС = ТекРеквизиты.СтавкаНДС;
		//ТекДанные.Упаковка = ТекРеквизиты.ЕдиницаИзмерения;
		ТекДанные.ЕдиницаИзмерения = ТекРеквизиты.ЕдиницаИзмерения;
	КонецЕсли;
	
КонецПроцедуры	

#Область ПоискПоШК

&НаКлиенте
Процедура ПодобратьНоменклатуруПоШК(Команда)
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	ИмяТЧ = "ТабличнаяЧасть";
	ИмяРеквизитаНоменклатуры = "Номенклатура";
	ИмяРеквизитаКоличества = "Количество";
	сабОперОбщегоНазначенияНаКлиенте.ОбработатьЗаполнениеПоШтрихкодуНаКлиенте(ЭтаФорма, ИмяТЧ, ИмяРеквизитаНоменклатуры, ИмяРеквизитаКоличества, Штрихкод);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДеятельностиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		
		РеквыПодразделения = БюджетныйНаСервере.ВернутьРеквизиты(Объект.Подразделение, "Склад, Организация");
		
		Если ЗначениеЗаполнено(РеквыПодразделения.Склад) Тогда
			Объект.Склад = РеквыПодразделения.Склад;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквыПодразделения.Организация) Тогда
			Объект.Организация = РеквыПодразделения.Организация;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ОрганизацияПолучатель) Тогда
			Объект.ОрганизацияПолучатель = Объект.Организация;		
		КонецЕсли;
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыПеремещений.Перемещение") Тогда
			Объект.ПодразделениеПолучатель = Объект.Подразделение;
			ПодразделениеПолучательПриИзменении(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПолучательПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ПодразделениеПолучатель) Тогда
		Объект.СкладПолучатель = БюджетныйНаСервере.ВернутьРеквизиты(Объект.ПодразделениеПолучатель, "Склад").Склад;	
		Объект.ОрганизацияПолучатель = БюджетныйНаСервере.ВернутьРеквизит(Объект.ПодразделениеПолучатель, "Организация");
		РеквизитыДоговора = сабОперОбщегоНазначения.ПолучитьДоговорКонтрагентаПоУмолчанию(Объект.ОрганизацияПолучатель);
		Объект.Договор = РеквизитыДоговора.Договор;
		
		//Элементы.ТабличнаяЧастьЦена.Видимость = (Объект.Организация <> Объект.ОрганизацияПолучатель);
		//Элементы.ТабличнаяЧастьСумма.Видимость = (Объект.Организация <> Объект.ОрганизацияПолучатель);
		//Элементы.ТабличнаяЧастьСуммаНДС.Видимость = (Объект.Организация <> Объект.ОрганизацияПолучатель);
		Элементы.Группа13.Видимость = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыПеремещений.ПеремещениеНаОбособленноеПодразделение") И Объект.Организация <> Объект.ОрганизацияПолучатель);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзЗаказа(Команда)
	
	Для Каждого СтрокаТЧ Из Объект.ТабличнаяЧасть Цикл
		СтрокаТЧ.Количество = СтрокаТЧ.КоличествоВЗаказе;		
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура РассчитатьКолонкуКоличествоИзЗаказа()

	ТаблицаЗаказа = Объект.ДокОснование.ТабличнаяЧасть.Выгрузить();
	Для Каждого СтрокаТЧ Из Объект.ТабличнаяЧасть Цикл
		СтрокиЗаказа = ТаблицаЗаказа.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТЧ.Номенклатура));
		Если СтрокиЗаказа.Количество() > 0 Тогда
			СтрокаТЧ.КоличествоВЗаказе = СтрокиЗаказа[0].Количество;	
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(Объект.ДокОснование) И ТипЗнч(Объект.ДокОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		РассчитатьКолонкуКоличествоИзЗаказа();
	КонецЕсли;	
	Оповестить("ОповеститьРегистрОбработанных", Новый Структура("ДокументУУ, ДокументБУ", Объект.Ссылка, ?(БюджетныйНаКлиенте.ЕстьСвойствоОбъекта(ЭтаФорма, "ДокументБУ"), ЭтаФорма.ДокументБУ, Неопределено)));	
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Для Каждого СтрокаТовары Из Объект.ТабличнаяЧасть Цикл
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыПеремещений.ПеремещениеНаОбособленноеПодразделение") Тогда
			СтрокаТовары.СчетУчетаБУ = сабОбщегоНазначения.ПолучитьСчетУчетаНоменклатуры(СтрокаТовары.Номенклатура, Объект.Организация, Объект.Склад);
			СтрокаТовары.НовыйСчетУчетаБУ = ПредопределенноеЗначение("ПланСчетов.Учетный.ТоварыВПути");
			Объект.ПредприятиеПолучатель = ПредопределенноеЗначение("Справочник.Предприятия.ПустаяСсылка");
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыПеремещений.ПоступлениеСОбособленногоПодразделения") Тогда
			СтрокаТовары.СчетУчетаБУ = ПредопределенноеЗначение("ПланСчетов.Учетный.ТоварыВПути");
			СтрокаТовары.НовыйСчетУчетаБУ = сабОбщегоНазначения.ПолучитьСчетУчетаНоменклатуры(СтрокаТовары.Номенклатура, Объект.Организация, Объект.Склад);
			Объект.ПредприятиеПолучатель = ПредопределенноеЗначение("Справочник.Предприятия.ПустаяСсылка");
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыПеремещений.ПеремещениеНаПредприятие") Тогда
			СтрокаТовары.СчетУчетаБУ = сабОбщегоНазначения.ПолучитьСчетУчетаНоменклатуры(СтрокаТовары.Номенклатура, Объект.Организация, Объект.Склад);
			СтрокаТовары.НовыйСчетУчетаБУ = ПредопределенноеЗначение("ПланСчетов.Учетный.ВНХТоварные");
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыПеремещений.ПеремещениеНаПредприятиеБезВозмещения") Тогда
			СтрокаТовары.СчетУчетаБУ = сабОбщегоНазначения.ПолучитьСчетУчетаНоменклатуры(СтрокаТовары.Номенклатура, Объект.Организация, Объект.Склад);
			СтрокаТовары.НовыйСчетУчетаБУ = ПредопределенноеЗначение("ПланСчетов.Учетный.КазнаВспом");
		Иначе
			СтрокаТовары.СчетУчетаБУ = сабОбщегоНазначения.ПолучитьСчетУчетаНоменклатуры(СтрокаТовары.Номенклатура, Объект.Организация, Объект.Склад);
			СтрокаТовары.НовыйСчетУчетаБУ = сабОбщегоНазначения.ПолучитьСчетУчетаНоменклатуры(СтрокаТовары.Номенклатура, Объект.Организация, Объект.Склад);
			Объект.ПредприятиеПолучатель = ПредопределенноеЗначение("Справочник.Предприятия.ПустаяСсылка");
			Объект.ПодразделениеПолучатель = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
		КонецЕсли;	
	КонецЦикла;
	ВидОперацииПриИзмененииВидимость();
	
	ПредприятиеПолучательПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииВидимость()
	
	Элементы.ВидДеятельности.Заголовок = "Подразделение-отправитель";
	Элементы.Склад.Заголовок = "Склад-отправитель";
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыПеремещений.ПеремещениеНаПредприятие") Тогда
		Элементы.Переместить(Элементы.Предприятие, Элементы.Группа3, Элементы.ВидДеятельности);
		Элементы.ПредприятиеПолучатель.Видимость = Истина;
		Элементы.ВнутреннийДоговор.Видимость = Истина;
		
		//Элементы.СкладПолучатель.Видимость = Истина;
		Элементы.СкладПолучатель.Видимость = Ложь;	
		Элементы.ПодразделениеПолучатель.СвязиПараметровВыбора = Новый ФиксированныйМассив(Новый массив);
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.ПредприятиеПолучатель");
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НоваяСвязь);		
		Элементы.ПодразделениеПолучатель.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыйМассив);
		
		Элементы.ПодразделениеПолучатель.СвязиПараметровВыбора = Новый ФиксированныйМассив(Новый массив);
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Предприятие", "Объект.ПредприятиеПолучатель");
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НоваяСвязь);		
		Элементы.СкладПолучатель.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыйМассив);
		
		Элементы.ВнутреннийДоговор.Заголовок = "Внутренний договор";
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.ВнутренниеДоговоры"));
		
		Элементы.ВнутреннийДоговор.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
		
		Элементы.Переместить(Элементы.ВидДеятельности, Элементы.Группа3, Элементы.Склад);
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыПеремещений.ПеремещениеНаПредприятиеБезВозмещения") Тогда
		Элементы.Переместить(Элементы.Предприятие, Элементы.Группа3, Элементы.ВидДеятельности);
		Элементы.ПредприятиеПолучатель.Видимость = Истина;
		Элементы.ВнутреннийДоговор.Видимость = Ложь;
		Элементы.СкладПолучатель.Видимость = Истина;
			
		Элементы.ПодразделениеПолучатель.СвязиПараметровВыбора = Новый ФиксированныйМассив(Новый массив);
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.ПредприятиеПолучатель");
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НоваяСвязь);		
		Элементы.ПодразделениеПолучатель.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыйМассив);
		
		Элементы.ПодразделениеПолучатель.СвязиПараметровВыбора = Новый ФиксированныйМассив(Новый массив);
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Предприятие", "Объект.ПредприятиеПолучатель");
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НоваяСвязь);		
		Элементы.СкладПолучатель.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыйМассив);
		
		Элементы.Переместить(Элементы.ВидДеятельности, Элементы.Группа3, Элементы.Склад);

	Иначе
		Элементы.Переместить(Элементы.Предприятие, Элементы.Группа6);
		Элементы.ПредприятиеПолучатель.Видимость = Ложь;
		Элементы.ВнутреннийДоговор.Видимость = Ложь;
		Элементы.СкладПолучатель.Видимость = Истина;

		//Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыПеремещений.Перемещение") Тогда
		//	Элементы.ВидДеятельности.Заголовок = "Подразделение";
		//	Элементы.Переместить(Элементы.ВидДеятельности, Элементы.Группа6);
		//	Элементы.ВидДеятельности.Видимость = Истина;
		//Иначе
		//	Элементы.ВидДеятельности.Видимость = Истина;
		//	Элементы.Переместить(Элементы.ВидДеятельности, Элементы.Группа3, Элементы.Склад);
		//КонецЕсли;
		
		Элементы.ПодразделениеПолучатель.СвязиПараметровВыбора = Новый ФиксированныйМассив(Новый массив);
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Предприятие");
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НоваяСвязь);		
		Элементы.ПодразделениеПолучатель.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыйМассив);
		
		Элементы.ПодразделениеПолучатель.СвязиПараметровВыбора = Новый ФиксированныйМассив(Новый массив);
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Предприятие", "Объект.Предприятие");
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НоваяСвязь);		
		Элементы.СкладПолучатель.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыйМассив);
		
	КонецЕсли;
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция РассчитатьЦенуВнутреннегоПеремещения(Номенклатура, Предприятие, Подразделение, ПодразделениеПолучатель, Дата)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	|ИЗ
	|	РегистрСведений.НоменклатураПоставщика.СрезПоследних(
	|			&Период,
	|			Предприятие = &Предприятие
	|				И Номенклатура = &Номенклатура
	|				И Подразделение = &Подразделение) КАК НоменклатураПоставщикаСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Период,
	|				ВидЦены.ЦенаПоставщика
	|					И Предприятие = &Предприятие
	|					И Номенклатура = &Номенклатура
	|					И Подразделение = &Подразделение) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО НоменклатураПоставщикаСрезПоследних.Предприятие = ЦеныНоменклатурыСрезПоследних.Предприятие
	|			И НоменклатураПоставщикаСрезПоследних.Подразделение = ЦеныНоменклатурыСрезПоследних.Подразделение
	|			И НоменклатураПоставщикаСрезПоследних.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И НоменклатураПоставщикаСрезПоследних.Контрагент = ЦеныНоменклатурыСрезПоследних.ВидЦены.Поставщик";
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат ?(Подразделение.Организация = ПодразделениеПолучатель.Организация, Выборка.Цена, Выборка.Цена*1.2);
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

&НаКлиенте
Процедура РассчитатьСумму(ТекДанные = Неопределено)
	
	Если ТекДанные = Неопределено Тогда
		ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	КонецЕсли;	
	
	Если Не ТекДанные = Неопределено Тогда
		ТекДанные.Сумма = ТекДанные.Количество * ТекДанные.Цена;
		
		//лишний запрос делаем
		ТекРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.СтавкаНДС, "Ставка");
		Если НЕ ТекРеквизиты = Неопределено Тогда
			ТекДанные.СуммаНДС = ТекДанные.Сумма / ((100+ТекРеквизиты.Ставка)/100) * (ТекРеквизиты.Ставка/100);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ТабличнаяЧастьКоличествоПриИзменении(Элемент)
	
	РассчитатьСумму();	
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьСтавкаНДСПриИзменении(Элемент)
	
	РассчитатьСумму();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсправленныеСФПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		МаксТекущийНомер = 0;
		Для Каждого СтрокаИсправлений Из Объект.ИсправленныеСФ Цикл
			МаксТекущийНомер = Макс(СтрокаИсправлений.НомерИсправления, МаксТекущийНомер);
		КонецЦикла;	
		Элемент.ТекущиеДанные.ДатаИсправления = ТекущаяДата();
		Элемент.ТекущиеДанные.НомерИсправления = МаксТекущийНомер + 1;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЦену(Команда)

	Для Каждого ТекДанные Из Объект.ТабличнаяЧасть Цикл
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыПеремещений.ПеремещениеНаОбособленноеПодразделение") Тогда
			ТекДанные.СчетУчетаБУ = сабОбщегоНазначения.ПолучитьСчетУчетаНоменклатуры(ТекДанные.Номенклатура, Объект.Организация, Объект.СкладПолучатель);
			ТекДанные.НовыйСчетУчетаБУ = ПредопределенноеЗначение("ПланСчетов.Учетный.ТоварыВПути");
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыПеремещений.ПоступлениеСОбособленногоПодразделения") Тогда
			ТекДанные.СчетУчетаБУ = ПредопределенноеЗначение("ПланСчетов.Учетный.ТоварыВПути");
			ТекДанные.НовыйСчетУчетаБУ = сабОбщегоНазначения.ПолучитьСчетУчетаНоменклатуры(ТекДанные.Номенклатура, Объект.Организация, Объект.СкладПолучатель);
		Иначе
			ТекДанные.СчетУчетаБУ = сабОбщегоНазначения.ПолучитьСчетУчетаНоменклатуры(ТекДанные.Номенклатура, Объект.Организация, Объект.Склад);
			ТекДанные.НовыйСчетУчетаБУ = сабОбщегоНазначения.ПолучитьСчетУчетаНоменклатуры(ТекДанные.Номенклатура, Объект.Организация, Объект.СкладПолучатель);
		КонецЕсли;	
				
		//Установим вид цен и рассчитаем цены
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыПеремещений.ПеремещениеНаОбособленноеПодразделение") Тогда
			ТекДанные.Цена = РассчитатьЦенуВнутреннегоПеремещения(ТекДанные.Номенклатура, Объект.Предприятие, Объект.Подразделение, Объект.ПодразделениеПолучатель, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()));
			Если Не ЗначениеЗаполнено(ТекДанные.Цена) Тогда
				ТекДанные.Цена = РассчитатьЦенуВнутреннегоПеремещения(ТекДанные.Номенклатура, Объект.Предприятие, Объект.ПодразделениеПолучатель, Объект.Подразделение, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()));
			КонецЕсли;
		КонецЕсли;	
		
		//Установим НДС и артикул
		Если ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
			ТекРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(ТекДанные.Номенклатура, "СтавкаНДС");
			ТекДанные.СтавкаНДС = ТекРеквизиты.СтавкаНДС;
		КонецЕсли;
		
		РассчитатьСумму(ТекДанные);
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗаполнитьИзТСД(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ИдДокументаТСД) Тогда
		Сообщение = новый СообщениеПользователю;
		Сообщение.Текст = "Заполните номер документа ТСД";
		Сообщение.Поле = "Объект.ИдДокументаТСД";
		Сообщение.Сообщить();		
		Возврат;
	КонецЕсли;
	
	Если Объект.ТабличнаяЧасть.Количество() > 0 Тогда
		Ответ = Вопрос("Табличная часть будет очищена, продолжить?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьИзТСДНаСервере(Объект.ИдДокументаТСД);
	
	ОбновитьЦену(Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИзТСДНаСервере(ИдДокументаТСД)
	
	РезультатыСканирования = сабОперОбщегоНазначения.ПолучитьРезультатыСканированияТСД(ИдДокументаТСД);
	Объект.ТабличнаяЧасть.Загрузить(РезультатыСканирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьЦенаПриИзменении(Элемент)
	РассчитатьСумму();	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзExcel(Команда)
	
	ФормаЗагрузки = ПолучитьФорму("ОбщаяФорма.ФормаЗагрузкиИзExcel", Новый Структура("ВидЗагрузки", "ЗагрузкаВТЧТовары"));
	
	ПутьКФайлу = ФормаЗагрузки.ОткрытьМодально();
	
	Если ЗначениеЗаполнено(ПутьКФайлу) Тогда
		СтруктураВозврата = ФормаЗагрузки.ПолучитьДанныеПоЗагрузке(ПутьКФайлу);
		Для Каждого ЭлементСтруктурыВозврата Из СтруктураВозврата Цикл
			ТекДанные = Объект.ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(ТекДанные, ЭлементСтруктурыВозврата.Значение);
			УстановитьЗависимыеДанныеВТЧ(ТекДанные);
			РассчитатьСумму(ТекДанные);
		КонецЦикла;
	КонецЕсли;	
			
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьМатериалАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	//Если БюджетныйНаСервере.РольДоступнаСервер("сабОперЗавПроизводством") Тогда 	
	//	ПараметрыПолученияДанных.Отбор.Вставить("ПометкаУдаления",Ложь);
	//КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьМатериалОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	//Если БюджетныйНаСервере.РольДоступнаСервер("сабОперЗавПроизводством") Тогда 	
	//	ПараметрыПолученияДанных.Отбор.Вставить("ПометкаУдаления",Ложь);
	//КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСкладуВозврата(Команда)
	Если Объект.ТабличнаяЧасть.Количество() Тогда
		ТекстВопроса = НСтр("ru = 'Табичная часть заполнена. Очистить?'");
		ОбработчикОповещения = Новый ОписаниеОповещения("ПодтверждениеВопроса", ЭтотОбъект, Новый Структура("ИмяКоманды", Команда.Имя));
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьПоСкладуВозвратаНаСервере(Команда.Имя);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ТабличнаяЧасть.Очистить();
	КонецЕсли;
	ЗаполнитьПоСкладуВозвратаНаСервере(ДополнительныеПараметры.ИмяКоманды);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоСкладуВозвратаНаСервере(ИмяКоманды)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УчетныйОстатки.Субконто1 КАК Номенклатура,
	               |	УчетныйОстатки.КоличествоОстаток КАК Количество,
	               |	УчетныйОстатки.Субконто1.Код КАК Артикул,
	               |	УчетныйОстатки.СуммаОстаток КАК Сумма,
	               |	ВЫБОР
	               |		КОГДА УчетныйОстатки.КоличествоОстаток = 0
	               |			ТОГДА 0
	               |		ИНАЧЕ УчетныйОстатки.СуммаОстаток / УчетныйОстатки.КоличествоОстаток
	               |	КОНЕЦ КАК Цена,
	               |	УчетныйОстатки.Субконто1.СтавкаНДС КАК СтавкаНДС,
	               |	УчетныйОстатки.Субконто1.СтавкаНДС.Ставка КАК СтавкаНДССтавка,
	               |	УчетныйОстатки.Субконто1.ЕдиницаИзмерения КАК Упаковка,
	               |	УчетныйОстатки.Счет КАК СчетУчетаБУ
	               |ИЗ
	               |	РегистрБухгалтерии.Учетный.Остатки(
	               |			&Дата,
	               |			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Учетный.Товары))
	               |				ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Учетный.ГотоваяПродукция))
	               |				ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Учетный.СырьеИМатериалы)),
	               |			,
	               |			Субконто2 = &Склад
	               |				И Предприятия = &Предприятие
	               |				И Подразделение = &Подразделение
	               |				И ВЫРАЗИТЬ(Субконто1 КАК Справочник.Номенклатура).АлкогольнаяПродукция = &ЭтоАлко) КАК УчетныйОстатки
	               |ГДЕ
	               |	(УчетныйОстатки.КоличествоОстаток > 0
	               |			ИЛИ УчетныйОстатки.СуммаОстаток > 0)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Артикул";
	
	
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, ТекущаяДата()));
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	Запрос.УстановитьПараметр("Предприятие", Объект.Предприятие);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Запрос.УстановитьПараметр("ЭтоАлко", ИмяКоманды  = "ЗаполнитьПоСкладуБракаАлко");
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		//лишний запрос делаем
		Если ЗначениеЗаполнено(Выборка.СтавкаНДССтавка) Тогда
			НоваяСтрока.СуммаНДС = НоваяСтрока.Сумма / ((100+Выборка.СтавкаНДССтавка)/100) * (Выборка.СтавкаНДССтавка/100);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ПодборТоваров
&НаКлиенте
Процедура ПодборТовары(Команда)

	ПараметрыПодбора = ПолучитьПараметрыПодбора("ТабличнаяЧасть");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");
	СписокСвойств = Неопределено;
	Если ЭтоВставкаИзБуфера Тогда
		
		ТаблицаТоваров = ВыбранноеЗначение.Данные;
		СписокСвойств = ВыбранноеЗначение.СписокСвойств;
		
	Иначе
		
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
		
	КонецЕсли;
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	//СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
	//	ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта, Ложь);
	
	//ЗаполнитьСтавкиНДСВРознице	= НТТ И УчетВПродажныхЦенах И РазделятьПоСтавкамНДС;
	ЗаполнитьСтавкиНДСВРознице = Ложь;
	
	СтрокиДляЗаполненияСчетов = Новый Массив;
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СведенияОНоменклатуре = БюджетныйНаСервере.ВернутьРеквизиты(СтрокаТовара.Номенклатура, "ЕдиницаИзмерения, Счет10, СтавкаНДС");
		//Если ЭтоВставкаИзБуфера
		//	И СведенияОНоменклатуре <> Неопределено
		//	И ЗначениеЗаполнено(СведенияОНоменклатуре.Услуга)
		//	И СведенияОНоменклатуре.Услуга Тогда
		//	
		//	Продолжить;
		//	
		//КонецЕсли;
		СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара, СписокСвойств);
		СтрокиДляЗаполненияСчетов.Добавить(СтрокаТабличнойЧасти);
		
		Если СведенияОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		//Если ИмяТаблицы = "ТабличнаяЧасть" Тогда
			
			//СтрокаТабличнойЧасти.Коэффициент			= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.Коэффициент),
			//	СтрокаТабличнойЧасти.Коэффициент, СведенияОНоменклатуре.Коэффициент);
			//СтрокаТабличнойЧасти.НомерГТД				= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД),
			//	СтрокаТабличнойЧасти.НомерГТД, СведенияОНоменклатуре.НомерГТД);
			//СтрокаТабличнойЧасти.СтранаПроисхождения	= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтранаПроисхождения),
			//	СтрокаТабличнойЧасти.СтранаПроисхождения, СведенияОНоменклатуре.СтранаПроисхождения);
			
			//СтрокаТабличнойЧасти.Товар		= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.Товар),
			//	СтрокаТабличнойЧасти.Товар, СтрокаТовара.Номенклатура);
			//СтрокаТабличнойЧасти.СчетУчетаБУ		= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаБУ),
			//	СтрокаТабличнойЧасти.СчетУчетаБУ, СведенияОНоменклатуре.Счет10);
			
			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыПеремещений.ПеремещениеНаОбособленноеПодразделение") Тогда
				СтрокаТабличнойЧасти.СчетУчетаБУ = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаБУ),
				СтрокаТабличнойЧасти.СчетУчетаБУ, сабОбщегоНазначения.ПолучитьСчетУчетаНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, Объект.Организация, Объект.Склад));
				СтрокаТабличнойЧасти.НовыйСчетУчетаБУ = ПредопределенноеЗначение("ПланСчетов.Учетный.ТоварыВПути");
			ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыПеремещений.ПоступлениеСОбособленногоПодразделения") Тогда
				СтрокаТабличнойЧасти.СчетУчетаБУ = ПредопределенноеЗначение("ПланСчетов.Учетный.ТоварыВПути");
				СтрокаТабличнойЧасти.НовыйСчетУчетаБУ = сабОбщегоНазначения.ПолучитьСчетУчетаНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, Объект.Организация, Объект.СкладПолучатель);
			ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыПеремещений.ПеремещениеНаПредприятие") Тогда
				СтрокаТабличнойЧасти.СчетУчетаБУ = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаБУ),
				СтрокаТабличнойЧасти.СчетУчетаБУ, сабОбщегоНазначения.ПолучитьСчетУчетаНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, Объект.Организация, Объект.Склад));
				СтрокаТабличнойЧасти.НовыйСчетУчетаБУ = ПредопределенноеЗначение("ПланСчетов.Учетный.ВНХТоварные");
			Иначе
				СтрокаТабличнойЧасти.СчетУчетаБУ = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчетаБУ),
				СтрокаТабличнойЧасти.СчетУчетаБУ, сабОбщегоНазначения.ПолучитьСчетУчетаНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, Объект.Организация, Объект.Склад));
				СтрокаТабличнойЧасти.НовыйСчетУчетаБУ = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.НовыйСчетУчетаБУ),
				СтрокаТабличнойЧасти.НовыйСчетУчетаБУ, сабОбщегоНазначения.ПолучитьСчетУчетаНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, Объект.Организация, Объект.СкладПолучатель));
			КонецЕсли;
			
			СтрокаТабличнойЧасти.Упаковка		= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.Упаковка),
			СтрокаТабличнойЧасти.Упаковка, СведенияОНоменклатуре.ЕдиницаИзмерения);
			
			
			//СтрокаТабличнойЧасти.ЕдиницаИзмерения		= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения),
			//СтрокаТабличнойЧасти.ЕдиницаИзмерения, СведенияОНоменклатуре.ЕдиницаИзмерения);

			//СтрокаТабличнойЧасти.НовыйСчетУчетаБУ		= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.НовыйСчетУчетаБУ),
			//	СтрокаТабличнойЧасти.НовыйСчетУчетаБУ, СведенияОНоменклатуре.Счет10);
			СтрокаТабличнойЧасти.СтавкаНДС		= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС),
				СтрокаТабличнойЧасти.СтавкаНДС, СведенияОНоменклатуре.СтавкаНДС);
			//Если НТТ Тогда
			//		
			//	СтрокаТабличнойЧасти.Цена = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.Цена),
			//		СтрокаТабличнойЧасти.Цена, СведенияОНоменклатуре.ЦенаВРознице);
			//		
			//	Если ЗаполнитьСтавкиНДСВРознице Тогда
			//		СтрокаТабличнойЧасти.СтавкаНДСВРознице = СведенияОНоменклатуре.СтавкаНДСВРознице;
			//	КонецЕсли;
			//	
			//КонецЕсли;
			
			//СтрокаТабличнойЧасти.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются;
			
			//ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			
		//КонецЕсли;
		
	КонецЦикла;
	
	//СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляЗаполненияСчетов, ИмяТаблицы, Объект, Документы.СписаниеТоваров);
	
	Если ЭтоВставкаИзБуфера Тогда
		
		ВыбранноеЗначение.КоличествоДобавленныхСтрок = СтрокиДляЗаполненияСчетов.Количество();
		
	КонецЕсли;
	
	//ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)

	ДатаРасчетов		= ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), ТекущаяДата(), Объект.Дата);
	
	ЗаголовокПодбора	= НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	Если ИмяТаблицы = "Товары" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Товары'");
	ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Возвратная тара'");
	КонецЕсли;
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаРасчетов"  , ДатаРасчетов);
	ПараметрыФормы.Вставить("Валюта"        , ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	ПараметрыФормы.Вставить("Организация"   , Объект.Организация);
	ПараметрыФормы.Вставить("Подразделение" , Объект.Подразделение);
	ПараметрыФормы.Вставить("Склад"         , Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок"     , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора"    , "");
	ПараметрыФормы.Вставить("ИмяТаблицы"    , ИмяТаблицы);
	ПараметрыФормы.Вставить("Услуги"        , ИмяТаблицы = "Услуги");
	ПараметрыФормы.Вставить("ПоказыватьОстатки"  , Истина);
	ПараметрыФормы.Вставить("ЕстьКоличество", Истина);
	ПараметрыФормы.Вставить("Предприятие" , Объект.Предприятие);

	Возврат ПараметрыФормы;

КонецФункции

#КонецОбласти 

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеПолучательПриИзменении(Элемент)
	
	ПредприятиеПолучательПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПредприятиеПолучательПриИзмененииНаСервере()
	
	ЭтоВнутреннееПеремещение = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыПеремещений.Перемещение"));
	
	Если ЭтоВнутреннееПеремещение Тогда
		Элементы.ПодразделениеПолучатель.Видимость = Ложь;
	Иначе	
		ТекПП = ?(Объект.ВидОперации = Перечисления.ВидыПеремещений.ПеремещениеНаПредприятие ИЛИ Объект.ВидОперации = Перечисления.ВидыПеремещений.ПеремещениеНаПредприятиеБезВозмещения, Объект.ПредприятиеПолучатель, Объект.Предприятие);
		
		УчетПоПодразделениям = БюджетныйНаСервере.ВернутьРеквизит(ТекПП, "УчетПоПодразделениям");	
		
		ЭтоДокументДвиженияТМЦИОпцияВыключена = Ложь;
		Если Объект.Свойство("Ссылка") Тогда
			ЭтоДокументДвиженияТМЦИОпцияВыключена = сабОбщегоНазначенияКлиентСервер.ЭтоДокументДвиженияТМЦИОпцияВыключена(Объект.Ссылка);
		КонецЕсли;
		
		Если НЕ УчетПоПодразделениям Тогда
			Если БюджетныйНаСервере.ДокументПодразделениеИстина(Объект.Ссылка, ТекПП) Тогда
				Элементы.ПодразделениеПолучатель.Видимость = Истина;
			Иначе
				Элементы.ПодразделениеПолучатель.Видимость = Ложь;
			КонецЕсли;
		Иначе
			//для подразделеений использование функциональных опций (новое д1 10.06.16)
			Если ЭтоДокументДвиженияТМЦИОпцияВыключена Тогда
				Элементы.ПодразделениеПолучатель.Видимость = Ложь;
			Иначе	
				Элементы.ПодразделениеПолучатель.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


#Область КомандыИзменения

&НаКлиенте
Процедура ПоказатьИзмененияВерсий(ИмяКоманды)

	СсылкаНаОбъект = ЭтаФорма.ДокументБУ; 
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Ссылка",СсылкаНаОбъект);
	СтруктураКоличествВерсий = сабОбщегоНазначенияБУХ.ПолучитьКоличествоВерсий(СсылкаНаОбъект);
	КолВерсий = СтруктураКоличествВерсий.КоличествоИзмененныхВерсий;
	СравниваемыеВерсии = Новый СписокЗначений;  
	Пока КолВерсий > 0 Цикл
		СравниваемыеВерсии.Добавить(СтруктураКоличествВерсий.КоличествоВерсий, СтруктураКоличествВерсий.КоличествоВерсий);
		СтруктураКоличествВерсий.КоличествоВерсий = СтруктураКоличествВерсий.КоличествоВерсий - 1;
		КолВерсий = КолВерсий - 1;
	КонецЦикла;
	ПараметрыОтчета.Вставить("СравниваемыеВерсии",СравниваемыеВерсии); 
	
	ОткрытьФорму("РегистрСведений.ВерсииОбъектов.Форма.ОтчетПоВерсиямОбъекта", ПараметрыОтчета);

КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоДокументу(ИмяКоманды)

	ПерезаполнитьДокументНаОснованиинаСервере();

КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьДокументНаОснованиинаСервере()
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.ОбработкаЗаполненияСФормы(ЭтаФорма.ДокументБУ, Неопределено, Истина);
	ЗначениеВРеквизитФормы(ТекОбъект, "Объект");
	
	//ОбновленнаяЗапись = РегистрыСведений.сабОбработкаДокументов.СоздатьМенеджерЗаписи();
	//ОбновленнаяЗапись.ДокументБУ = ЭтаФорма.ДокументБУ;
	//ОбновленнаяЗапись.ДокументУУ = Объект.Ссылка;
	//ОбновленнаяЗапись.ДатаОбработки = ТекущаяДата();
	//ОбновленнаяЗапись.Автор = ПараметрыСеанса.ТекущийПользователь;
	//ОбновленнаяЗапись.Модифицирован = Ложь;
	//ОбновленнаяЗапись.Записать();
	Элементы.ЭлементПерезаполнитьПоДокументу.Доступность = Ложь;
	
	ПриСозданииНаСервере(Ложь, Истина);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ТабличнаяЧастьСерияНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	Если ТекДанные.НесколькоСерий Тогда
		СтандартнаяОбработка = Ложь;
		
		МассивПараметрыВыбора = Новый Массив;
		НовыйПараметрДата = Новый ПараметрВыбора("ДатаОтгрузки",Объект.Дата);
		НовыйПараметрСчет = Новый ПараметрВыбора("Счет",ТекДанные.СчетУчетаБУ);  
		НовыйПараметрСклад = Новый ПараметрВыбора("Склад",Объект.Склад);
		НовыйПараметрПредприятие = Новый ПараметрВыбора("Предприятие",Объект.Предприятие);
        МассивПараметрыВыбора.Добавить(НовыйПараметрДата);   
		МассивПараметрыВыбора.Добавить(НовыйПараметрСчет);
		МассивПараметрыВыбора.Добавить(НовыйПараметрСклад);
		МассивПараметрыВыбора.Добавить(НовыйПараметрПредприятие);
        НовыеПараметры = Новый ФиксированныйМассив(МассивПараметрыВыбора);

		ТекФорма = ПолучитьФорму("Документ.УЧ_Реализация.Форма.ФормаПодбораСерий"); 
		ТекФорма.Элементы.СерииНоменклатуры.ПодчиненныеЭлементы.СерииНоменклатурыСерияНоменклатуры.ПараметрыВыбора = НовыеПараметры;
		ТекФорма.Номенклатура = ТекДанные.Номенклатура;
		ТекФорма.Количество = ТекДанные.Количество;
		ТекФорма.НомерСтрокиРеализации = ТекДанные.НомерСтроки;
		ЕстьСерия = Ложь;
		Для каждого ТекСтрока Из Объект.СерииНоменклатуры Цикл
			Если ТекСтрока.Номенклатура = ТекДанные.Номенклатура И ТекСтрока.НомерСтрокиРеализации = ТекДанные.НомерСтроки Тогда
				НоваяСтрока = ТекФорма.СерииНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				ЕстьСерия = Истина;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ЕстьСерия Тогда
			НоваяСтрока = Объект.СерииНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекДанные);
			НоваяСтрока = ТекФорма.СерииНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекДанные);
		КонецЕсли;
		ТекФорма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		Оп = Новый ОписаниеОповещения("ВыполнитьПослеОкончанияПодбора", ЭтотОбъект, Новый Структура);
		ТекФорма.ОписаниеОповещенияОЗакрытии = Оп;
		ТекФорма.Открыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеОкончанияПодбора(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.ТабличнаяЧасть.ТекущиеДанные;
	МассивУдСерий = Новый Массив;
	Для каждого ТекСтрока Из Объект.СерииНоменклатуры Цикл
		Если ТекСтрока.Номенклатура = ТекДанные.Номенклатура И ТекСтрока.НомерСтрокиРеализации = ТекДанные.НомерСтроки Тогда
			МассивУдСерий.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекУд Из МассивУдСерий Цикл
		Объект.СерииНоменклатуры.Удалить(ТекУд);
	КонецЦикла;
	
	НовоеКоличество = 0;
	Для каждого ТекСтрока Из Результат.СерииНоменклатуры Цикл
		НоваяСтрока = Объект.СерииНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		НоваяСтрока.НомерСтрокиРеализации = ТекДанные.НомерСтроки;
		НовоеКоличество = НовоеКоличество + ТекСтрока.Количество; 
		НоваяСтрока.ДатаПроизводства = сабОбщегоНазначенияБУХ.ПолучитьДатуПроизводстваДляСерииНоменклатуры(ТекСтрока.СерияНоменклатуры);
	КонецЦикла;
	
	ТекДанные.Количество = НовоеКоличество; 
	Объект.СерииНоменклатуры.Сортировать("НомерСтрокиРеализации");
	ТабличнаяЧастьКоличествоПриИзменении(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.ТабличнаяЧасть.ТекущиеДанные.НесколькоСерий = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАртикул()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.Код КАК Код,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&СписокНоменклатур)";
	Запрос.УстановитьПараметр("СписокНоменклатур", Объект.ТабличнаяЧасть.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	
	ТаблицаАртикулов =  Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЧ Из Объект.ТабличнаяЧасть Цикл
		НайденныеСтроки = ТаблицаАртикулов.НайтиСтроки(Новый Структура("Ссылка", СтрокаТЧ.Номенклатура));
		Для Каждого СтрокаСАртикулом Из НайденныеСтроки Цикл
			СтрокаТЧ.Артикул = СтрокаСАртикулом.Код;
			СтрокаТЧ.ЕдиницаИзмерения = СтрокаСАртикулом.ЕдиницаИзмерения;
		КонецЦикла;
		
		НайденныеСерии = Объект.СерииНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура, НомерСтрокиРеализации", СтрокаТЧ.Номенклатура, СтрокаТЧ.НомерСтроки));
		Если НайденныеСерии.Количество() > 1 Тогда
			СтрокаТЧ.НесколькоСерий = Истина;
			СтрокаТЧ.СерияНоменклатуры = Неопределено;
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ЗаполнитьАртикул();
КонецПроцедуры


&НаКлиенте
Процедура ТабличнаяЧастьСерияНоменклатурыПриИзменении(Элемент)

	

	ТД = Элементы.ТабличнаяЧасть.ТекущиеДанные; 
	Если ТД.НесколькоСерий Тогда // в случае нескольких серий свой алгоритм
		Возврат;
	КонецЕсли;
	ПараметрыОтбораСерииНоменклатуры = Новый Структура("Номенклатура,НомерСтрокиРеализации",ТД.Номенклатура,ТД.НомерСтроки);
	МассивНайденныеСтрокиСерииНоменклатуры = Объект.СерииНоменклатуры.НайтиСтроки(ПараметрыОтбораСерииНоменклатуры);
	ИндексДляДобавления = Неопределено;
	Для каждого НайденнаяСтрокаСерииНоменклатуры Из МассивНайденныеСтрокиСерииНоменклатуры Цикл
		Если ИндексДляДобавления = Неопределено Тогда
			ИндексДляДобавления = Объект.СерииНоменклатуры.Индекс(НайденнаяСтрокаСерииНоменклатуры);
		КонецЕсли;
		Объект.СерииНоменклатуры.Удалить(НайденнаяСтрокаСерииНоменклатуры);
	КонецЦикла;
	Если ИндексДляДобавления = Неопределено Тогда
		 ИндексДляДобавления = 0;
	КонецЕсли;
	НоваяСтрокаСерииНоменклатуры = Объект.СерииНоменклатуры.Вставить(ИндексДляДобавления);
	НоваяСтрокаСерииНоменклатуры.Номенклатура = ТД.Номенклатура;
	НоваяСтрокаСерииНоменклатуры.Количество = ТД.Количество;
	НоваяСтрокаСерииНоменклатуры.НомерСтрокиРеализации = ТД.НомерСтроки;
	НоваяСтрокаСерииНоменклатуры.СерияНоменклатуры = ТД.СерияНоменклатуры;
	НоваяСтрокаСерииНоменклатуры.ДатаПроизводства = сабОбщегоНазначенияБУХ.ПолучитьДатуПроизводстваДляСерииНоменклатуры(ТД.СерияНоменклатуры);
	Объект.СерииНоменклатуры.Сортировать("НомерСтрокиРеализации");

	// проверим есть ли по этой строке строки серий номенклатуры с незаполненными сериями
	//ТекДанные = Элемент.Родитель.ТекущиеДанные;
	//
	//Если ТекДанные.НесколькоСерий Тогда // в случае нескольких серий свой алгоритм
	//	Возврат;
	//КонецЕсли;
	//
	//СтрокиСерийНоменклатуры = Объект.СерииНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура, НомерСтрокиРеализации", ТекДанные.Номенклатура, ТекДанные.НомерСтроки));
	//
	//Для Каждого ТекСтрокаСерий Из СтрокиСерийНоменклатуры Цикл
	//	
	//	Если Не ЗначениеЗаполнено(ТекСтрокаСерий.СерияНоменклатуры) Тогда
	//		ТекСтрокаСерий.СерияНоменклатуры = ТекДанные.СерияНоменклатуры;
	//	КонецЕсли;
	//	
	//КонецЦикла;
		
КонецПроцедуры


&НаКлиенте
Процедура ТабличнаяЧастьПередУдалением(Элемент, Отказ)
	
	ТД = Элемент.ТекущиеДанные; 
	ПараметрыОтбораСерииНоменклатуры = Новый Структура("Номенклатура,НомерСтрокиРеализации",ТД.Номенклатура,ТД.НомерСтроки);
	МассивНайденныеСтрокиСерииНоменклатуры = Объект.СерииНоменклатуры.НайтиСтроки(ПараметрыОтбораСерииНоменклатуры);
	Для каждого НайденнаяСтрокаСерииНоменклатуры Из МассивНайденныеСтрокиСерииНоменклатуры Цикл
		Объект.СерииНоменклатуры.Удалить(НайденнаяСтрокаСерииНоменклатуры);
	КонецЦикла;
	Объект.СерииНоменклатуры.Сортировать("НомерСтрокиРеализации");

КонецПроцедуры

