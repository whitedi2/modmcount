&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочте(Команда)
	ОтображениеСостояния = Элементы.Результат.ОтображениеСостояния;
	Если ОтображениеСостояния.Видимость = Истина
		И ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность Тогда
		ТекстВопроса = НСтр("ru = 'Отчет не сформирован. Сформировать?'");
		Обработчик = Новый ОписаниеОповещения("ОтправитьПоЭлектроннойПочтеПослеДиалогаСформировать", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	Иначе
		ПоказатьДиалогОтправкиПоЭлектроннойПочте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогОтправкиПоЭлектроннойПочте()
	
	ОтчетНаименованиеТекущегоВарианта = ЭтаФорма.НаименованиеТекущегоВарианта;
	
	ТабличныеДокументы = Новый СписокЗначений;
	ТабличныеДокументы.Добавить(ЭтаФорма.Результат, ОтчетНаименованиеТекущегоВарианта);
	
	ЗаголовокСохранения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отправка отчета ""%1"" по почте'"), ОтчетНаименованиеТекущегоВарианта);
	
	ПараметрыОтправки = Новый Структура("Тема", ОтчетНаименованиеТекущегоВарианта);
	
	МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
	МодульРаботаСПочтовымиСообщениямиКлиент.ОтправитьТабличныеДокументы(ТабличныеДокументы, ЗаголовокСохранения, ПараметрыОтправки);
КонецПроцедуры


&НаКлиенте
Процедура НаименованиеТекущегоВариантаПриИзменении(Элемент)
	//ПользНастройкиСтарые = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	УстановитьТекущийВариант(НаименованиеТекущегоВарианта);
	НаименованиеТекущегоВарианта = КлючТекущегоВарианта;
	
	// КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.ВариантыНастроек[ВариантОтчета].Настройки);
	//ЭлементыФормы.Вариант.Значение = СхемаКомпоновкиДанных.ВариантыНастроек[ВариантОтчета].Представление;
	
	
	//Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользНастройкиСтарые);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивОтчетовИсключений()
	
	//отчеты-исключения
	МассивОтчетовСВыборомПредприятия = Новый Массив;
	МассивОтчетовСВыборомПредприятия.Добавить("Отчет.УЧ_Баланс.Форма");
	МассивОтчетовСВыборомПредприятия.Добавить("Отчет.Д_ФинРез.Форма");
	МассивОтчетовСВыборомПредприятия.Добавить("ВнешнийОтчет.УЧ_Баланс.Форма");
	МассивОтчетовСВыборомПредприятия.Добавить("ВнешнийОтчет.Д_ФинРез.Форма");
	МассивОтчетовСВыборомПредприятия.Добавить("ВнешнийОтчет.Д_ФинРез.Форма.ФормаОтчета2");
	Возврат МассивОтчетовСВыборомПредприятия;
КонецФункции


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
 	Элементы.Результат.Видимость = Истина;	
	
	
	//ОтчетОбъект = ЭтаФорма.РеквизитФормыВЗначение("Отчет");
	//СхемаКомпоновкиДанных = ОтчетОбъект.СхемаКомпоновкиДанных; 
	//
	//ХранилищеВариантовОтчетов.Выбрать(Новый Структура("КлючОбъекта, Пользователь", ОтчетОбъект.Метаданные().Имя, "Администратор") ) ;
	//
	//Отчет.КомпоновщикНастроек.ПользовательскиеНастройки
	//
	//Варианты = СхемаКомпоновкиДанных.ВариантыНастроек;
	//Для Каждого Стр ИЗ Варианты Цикл
	//	Элементы.НаименованиеТекущегоВарианта.СписокВыбора.Добавить(Стр.Имя, Стр.Представление);
	//КонецЦикла;
	//
	//НаименованиеТекущегоВарианта = Элементы.НаименованиеТекущегоВарианта.СписокВыбора[0].Представление;
	////Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.ВариантыНастроек);
	
	
	//для ПП_Сводный
	//Если ПравоДоступа("Использование", Метаданные.Отчеты.ПП_Сводный) Тогда
	//	Схема        =Отчеты.ПП_Сводный.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	//	URLСхемы    =ПоместитьВоВременноеХранилище(Схема,Новый УникальныйИдентификатор);
	//КонецЕсли;
	//
	
	Элементы.СтраницаНастроекБаланса.Видимость = Ложь;	
	
	//заполняем предрпиятия для отчетов-исключений
	Если НЕ ПолучитьМассивОтчетовИсключений().Найти(ЭтаФорма.ИмяФормы) = Неопределено Тогда
		ЗаполнитьДеревоПредприятий();
		Элементы.СтраницаНастроекБаланса.Видимость = Истина;	
	КонецЕсли;
	//
	
	ИмяОтчета = ИмяОтчета();
	
	// для УЧ_БалансСКД
	Если ИмяОтчета = "Отчет.УЧ_БалансСКД" ИЛИ ИмяОтчета = "ВнешнийОтчет.УЧ_БалансСКД" Тогда
		Для каждого ТекЭлемент Из Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
			Если ТипЗнч(ТекЭлемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И (Строка(ТекЭлемент.Параметр) = "Предприятие" ИЛИ Строка(ТекЭлемент.Параметр) = "Предприятия") Тогда //если параметр предприятия, добавляем удобную табличку
				Элементы.СтраницаНастроекБаланса.Видимость = Истина;
				ТекЭлемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
				ЗаполнитьДеревоПредприятий();
				Прервать;
			КонецЕсли;		
		КонецЦикла; 
	КонецЕсли;
	
	Если ИмяОтчета = "Отчет.УЧ_Баланс" ИЛИ ИмяОтчета = "ВнешнийОтчет.УЧ_Баланс" Тогда
		Элементы.ГруппаЧастныхНастроекБаланса.Видимость = Истина;
		Элементы.ОбщаяСтраницаНастроек.Видимость = Ложь;		
	Иначе
		Элементы.ГруппаЧастныхНастроекБаланса.Видимость = Ложь;
		Элементы.ОбщаяСтраницаНастроек.Видимость = Истина;
	КонецЕсли;

	//
	
	// для расшифровки баланса
	Если ЭтаФорма.ИмяФормы = "Отчет.УЧ_РасшифровкаБаланса.Форма" Тогда
		//УстановитьПривилегированныйРежим(Истина);
		//СтатьяАктив = Справочники.СтатьиУчетногоБаланса.НайтиПоНаименованию("Актив");
		//Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[13].Значение = СтатьяАктив;
		//Отчет.КомпоновщикНастроек.ФиксированныеНастройки.ПараметрыДанных.Элементы[13].Значение = СтатьяАктив;
		//Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[5].Значение = СтатьяАктив;
		//УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	//
	
	// для отчета по записям учетного регистра
	Если ИмяОтчета = "Отчет.УЧ_ОтчетПоУчетномуРегистру" Тогда
		ЭтаФорма.Параметры.Расшифровка = Истина;
		УправленческийУчетПовтИсп.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	КонецЕсли;
	//
	
	СоздатьКнопкиУровнейГруппировок();
	
	Если Параметры.Свойство("НеОтображатьБыстрыеНастройки") Тогда
		Если Параметры.НеОтображатьБыстрыеНастройки Тогда
			Элементы.ФормаБыстрыеНастройки.Пометка = Ложь;
			Элементы.Группа6.Видимость = Элементы.ФормаБыстрыеНастройки.Пометка;
		КонецЕсли;
	КонецЕсли;	
	
	БюджетныйНаСервере.ДействияПриСозданииФормыДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПредприятияИзПользНастроек(БратьИзТехКопии = Ложь)
	
	//читаем настройки, составляем массив предприятий
	ВыбПредприятияСвод = Новый Массив;
	Для каждого ТекЭлНактроек Из Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если Строка(ТекЭлНактроек.Параметр) = "Предприятия" Тогда
			Если ТипЗнч(ТекЭлНактроек.Значение) = Тип("ДанныеФормыДерево") Тогда
				Для Каждого ТекНаправление Из ?(БратьИзТехКопии = Ложь, ТекЭлНактроек.Значение.ПолучитьЭлементы(), ПредприятияТехКопия.ПолучитьЭлементы()) Цикл
					Если Не ТекНаправление.Пометка Тогда
						Продолжить
					КонецЕсли;
					Для Каждого ТекПр Из ТекНаправление.ПолучитьЭлементы() Цикл
						Если Не ТекПр.Пометка Тогда
							Продолжить
						КонецЕсли;
						ВыбПредприятияСвод.Добавить(ТекПр.Значение);	
						ЕстьПредприятие = Истина;
					КонецЦикла;
				КонецЦикла;  
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	//обнновляем данные дерева
	Если ВыбПредприятияСвод.Количество() Тогда
		Для Каждого ТекНаправление Из Предприятия.ПолучитьЭлементы() Цикл
			Для Каждого ТекПр Из ТекНаправление.ПолучитьЭлементы() Цикл
				Если НЕ ВыбПредприятияСвод.Найти(ТекПр.Значение) = Неопределено Тогда
					ТекПр.Пометка = Истина;
					ТекНаправление.Пометка = Истина;
					Элементы.Предприятия.Развернуть(ТекНаправление.ПолучитьИдентификатор());
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	
	
	
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьРезультат()
	Элементы.Результат.Видимость = Истина;
КонецПроцедуры
 

&НаКлиенте
Процедура БыстрыеНастройки(Команда)
	Элементы.ФормаБыстрыеНастройки.Пометка = 1 - Элементы.ФормаБыстрыеНастройки.Пометка;
	Элементы.Группа6.Видимость = Элементы.ФормаБыстрыеНастройки.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда) Экспорт
	
	Если ЭтаФорма.ИмяФормы = "Отчет.Д_ФинансовыйРезультат.Форма" Тогда
		ФоновоеФормированияОтчета = ЗапускФормированияОтчетаСервер();
		
		Если ФоновоеФормированияОтчета <> Неопределено Тогда
			НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
			НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
			НастройкиОжидания.ВыводитьПрогрессВыполнения = Ложь;
			НастройкиОжидания.ВыводитьСообщения = Истина;
			
			АдресХранилища       = ФоновоеФормированияОтчета.АдресРезультата;
			ИдентификаторЗадания = ФоновоеФормированияОтчета.ИдентификаторЗадания;

			ПроверитьВыполнениеЗадания();
		КонецЕсли;	
		
	Иначе
		СкомпоноватьРезультат(РежимКомпоновкиРезультата.Авто);
		УстановитьСвойстваТабДока();
	КонецЕсли;
	
	Если ЭтаФорма.ИмяФормы = "Отчет.Д_ОтчетПоВыполнениюЗадач.Форма" ИЛИ ЭтаФорма.ИмяФормы = "ВнешнийОтчет.Д_ОтчетПоВыполнениюЗадач.Форма" Тогда
		ПодключитьОбработчикОжидания("ПроверкаФоновогоВыполнения", 1, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчетСервер() Экспорт
	
	ЭтаФорма.СкомпоноватьРезультат(РежимКомпоновкиРезультата.Авто);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаФоновогоВыполнения()

	Если НЕ ПроверитьВыполнениеФоновогоЗадания("Д_ОтчетПоВыполнениюЗадач") Тогда
		ОтключитьОбработчикОжидания("ПроверкаФоновогоВыполнения");
		ОбъединитьЯчейки("Д_ОтчетПоВыполнениюЗадач");
	КонецЕсли;	

КонецПроцедуры


&НаСервереБезКонтекста
Функция ПроверитьВыполнениеФоновогоЗадания(ИмяЗадачи)
	ТекЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Наименование, Состояние", "Выполнение отчета: " + ИмяЗадачи, СостояниеФоновогоЗадания.Активно));
	Если ТекЗадания.Количество() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;	
	КонецЕсли;
КонецФункции // ()

&НаСервере
Процедура СформироватьОтчетПоРеалСервер()
	
	//Если БюджетныйНаСервере.ВернутьРеквизит(ПараметрыСеанса.ТекущийПользователь, "ОтражатьВсеЗаявкиНаОтгрузку") Тогда
	//	УстановитьПривилегированныйРежим(Истина);
	//КонецЕсли;
	
	ЭтаФорма.СкомпоноватьРезультат(РежимКомпоновкиРезультата.Авто);
	
КонецПроцедуры

//&НаСервере
//Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
//	
//	НоваяКоманда = ЭтаФорма.Команды.Добавить("ОтправитьПДФ");
//	НоваяКоманда.Действие = "ОтправитьПДФ";
//	
//	НоваяКоманда = ЭтаФорма.Команды.Добавить("ПоказатьЕмейл");
//	НоваяКоманда.Действие = "ПоказатьЕмейл";
//	
//	ДобавляемыеРеквизиты = Новый Массив;
//	Реквизит = Новый РеквизитФормы("Емейл", Новый ОписаниеТипов("Строка"), , "Введите строку", Истина);
//	ДобавляемыеРеквизиты.Добавить(Реквизит);
//	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
//	
//	НоваяГруппа = Элементы.Добавить("ГруппаЕмейл", Тип("ГруппаФормы"),ЭтаФорма);
//	НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
//	НоваяГруппа.Доступность=Истина;
//	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
//	НоваяГруппа.ОтображатьЗаголовок = Ложь;
//	
//	Кнопка = Элементы.Добавить("ПДФ", Тип("КнопкаФормы"),НоваяГруппа);
//	Кнопка.Заголовок = "Отправить отчет по e-mail";
//	Кнопка.ИмяКоманды = "ПоказатьЕмейл";
//	
//	ПолеЕмейл = Элементы.Добавить("email", Тип("ПолеФормы"),НоваяГруппа);
//	ПолеЕмейл.Заголовок = "e-mail";
//	ПолеЕмейл.ПутьКДанным = "Емейл";
//	ПолеЕмейл.Вид = ВидПоляФормы.ПолеВвода;
//	ПолеЕмейл.Видимость = Ложь;
//	
//	Кнопка = Элементы.Добавить("Отправить", Тип("КнопкаФормы"),НоваяГруппа);
//	Кнопка.Заголовок = "Отправить email";
//	Кнопка.ИмяКоманды = "ОтправитьПДФ";
//	Кнопка.Видимость = Ложь;
//	
//	
//КонецПроцедуры

//&НаКЛиенте
//Процедура ПоказатьЕмейл(Элемент)
//	
//	ЭтаФорма.Элементы.ПДФ.Видимость=Ложь;
//	ЭтаФорма.Элементы.email.Видимость=Истина;
//	ЭтаФорма.Элементы.Отправить.Видимость=Истина;
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ОтправитьПДФ(Элемент)
//	
//	ОтправитьПисьмоПДФ();
//	
//КонецПроцедуры

//&НаСервере
//Процедура ОтправитьПисьмоПДФ()
//	Тема = "Отчёт "+ЭтаФорма.НаименованиеТекущегоВарианта;
//	Содержание = "";
//	
//	Кому=ЭтаФорма.Элементы.Емейл;
//	
//	Подпись = НСтр("ru = 'Сообщение автоматически отправлено из программы 1С:Корпоративный учет.'");
//	Подпись = Подпись + Символы.ПС;
//	//Подпись = Подпись + НСтр("ru = 'Основание: '") + ПолучитьНавигационнуюСсылкуИнформационнойБазы() + "#" + ПолучитьНавигационнуюСсылку(Заявка);
//	
//	Содержание = Содержание + Символы.ПС + Символы.ПС + Подпись;
//	
//	Результат.ОтображатьСетку = Ложь;
//	Результат.Защита = Ложь;
//	Результат.ТолькоПросмотр = Истина;
//	Результат.ОтображатьЗаголовки = Истина;
//	Результат.АвтоМасштаб = Истина;
//	Попытка
//		//нужно чтобы на сервере уже существовал данный файл, иначе отправка на эмейл будет зависать!
//		Результат.Записать("C:\1cTemp\tempSales1.pdf", ТипФайлаТабличногоДокумента.pdf);
//	Исключение
//		Сообщить(ОписаниеОшибки());
//	КонецПопытки; 
//	
//	
//	ТекФайл = Новый Файл("C:\1cTemp\tempSales1.pdf");
//	
//	
//	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
//	
//	СписокФайлов = Новый ТаблицаЗначений;
//	СписокФайлов.Колонки.Добавить("ИмяФайла");
//	СписокФайлов.Колонки.Добавить("ПолноеИмя");
//	НоваяСтрока = СписокФайлов.Добавить();
//	НоваяСтрока.ИмяФайла = Строка(ЭтаФорма.НаименованиеТекущегоВарианта) + ".pdf";
//	НоваяСтрока.ПолноеИмя = "C:\1cTemp\tempSales1.pdf";
//			 
//	УправлениеЭлектроннойПочтой.ОтправитьПоЭлектроннойПочте(
//	УчетнаяЗапись,
//	Кому,
//	Тема,
//	Содержание,
//	ВажностьИнтернетПочтовогоСообщения.Обычная,
//	СписокФайлов,
//	Ложь);
//	
//КонецПроцедуры


&НаСервере
Процедура ОбъединитьЯчейки(ИмяФормы)
	
	Если ИмяФормы = "Д_ОтчетПоВыполнениюЗадач" Тогда
		МассиввСтолбцов = Новый Массив;
		МассиввСтолбцов.Добавить(1);
		МассиввСтолбцов.Добавить(3);
		ПервыйСтолбец = "2";
	Иначе	
		ПервыйСтолбец = "1";
		
		//для отчета БП_ЗаявкиБывшиеНаДоработке
		МассиввСтолбцов = Новый Массив;
		МассиввСтолбцов.Добавить(2);
		МассиввСтолбцов.Добавить(3);
		МассиввСтолбцов.Добавить(4);
		
		//Д_ОтчетПоКредитам
		//Для ТекСтолбец = 2 По 9 Цикл
		
		//Д_СоответствиеЛимитамКазны
		Результат.ЗакончитьАвтогруппировкуСтрок();
		Результат.ПоказатьУровеньГруппировокСтрок(2);
		
		//КС_КлиентскаяБаза	
		МассиввСтолбцов = Новый Массив;
		МассиввСтолбцов.Добавить(2);
		МассиввСтолбцов.Добавить(3);
		МассиввСтолбцов.Добавить(4);
		МассиввСтолбцов.Добавить(5);
		МассиввСтолбцов.Добавить(6);
		
		//КС_ОтчетПоГрафику
		МассиввСтолбцов = Новый Массив;
		МассиввСтолбцов.Добавить(4);
		МассиввСтолбцов.Добавить(6);
		
		//Л_НедостатокВагоновНаСтанцияхДень
		Результат.ЗакончитьАвтогруппировкуСтрок();
		Результат.ПоказатьУровеньГруппировокСтрок(1);
		
	КонецЕсли;
	
	
	
	Для Каждого ТекСтолбец из МассиввСтолбцов Цикл
		ЗначЯчейки = Неопределено;
		Адрес1 = Неопределено;
		Для НомСтроки = 1 По 10000 Цикл
			ЗначЯчейки2 = Результат.Область("R" + Формат(НомСтроки, "ЧГ=0") + "C" + ПервыйСтолбец).Текст;
			Если Не ЗначениеЗаполнено(ЗначЯчейки2) И НомСтроки>20 Тогда
				Прервать;			
			КонецЕсли;
			Если ЗначЯчейки = ЗначЯчейки2 Тогда
				Результат.Область(Адрес1 + ":" + "R" +  Формат(НомСтроки, "ЧГ=0") + "C" + ТекСтолбец).Объединить();
			Иначе	
				ЗначЯчейки = ЗначЯчейки2;
				Адрес1 = "R" +  Формат(НомСтроки, "ЧГ=0") + "C" + ТекСтолбец;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для ТекСтолбец = Число(ПервыйСтолбец) По Число(ПервыйСтолбец) Цикл
		ЗначЯчейки = Неопределено;
		Адрес1 = Неопределено;
		Для НомСтроки = 1 По 10000 Цикл
			ЗначЯчейки2 = Результат.Область("R" +  Формат(НомСтроки, "ЧГ=0") + "C" + ПервыйСтолбец).Текст;
			Если Не ЗначениеЗаполнено(ЗначЯчейки2) И НомСтроки>20 Тогда
				Прервать;			
			КонецЕсли;
			Если ЗначЯчейки = ЗначЯчейки2 Тогда
				Результат.Область(Адрес1 + ":" + "R" +  Формат(НомСтроки, "ЧГ=0") + "C" + ТекСтолбец).Объединить();
			Иначе	
				ЗначЯчейки = ЗначЯчейки2;
				Адрес1 = "R" +  Формат(НомСтроки, "ЧГ=0") + "C" + ТекСтолбец;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла; 
	
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбъединитьЯчейки" Тогда
		ОбъединитьЯчейки(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
	ИтогоСумма = Формат(БюджетныйНаКлиенте.Просуммировать(Результат), "ЧДЦ=2");
КонецПроцедуры

&НаСервере
Функция ИмяОтчета()
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	ОтчетМетаданные = ОтчетОбъект.Метаданные();
	КлючОбъекта = ОтчетМетаданные.ПолноеИмя();
	
	Возврат КлючОбъекта;
	
КонецФункции // ()
 

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	//для ПП_Сводный
	Перем ВыполненноеДействие;
	Перем ПараметрВыполненногоДействия;
	
	ИмяОтчета = ИмяОтчета();
	
	Если ИмяОтчета = "Отчет.ПП_Сводный" Тогда
		
		Если ПроверитьПоле(Расшифровка) Тогда
			СтандартнаяОбработка     = Ложь;
		Иначе
			СтандартнаяОбработка     = Истина;
			Возврат;
		КонецЕсли;
		
		ОбработкаРасшифровки     = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
		
		ДоступныеДействия        = Новый Массив;
		ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
		
		ДополнительныеПункты = Новый СписокЗначений;
		Если БюджетныйНаСервере.РольДоступнаСервер("ОФК") ИЛИ БюджетныйНаСервере.РольДоступнаСервер("ОпознаваниеПриходов") ИЛИ БюджетныйНаСервере.РольАдминаДоступнаСервер() ИЛИ ПроверитьВозможностьУстановкиНеопознанныхПриходов(Расшифровка) Тогда 
			ДополнительныеПункты.Добавить("ДопДействие1", "Установить/снять пометку ""неопознанный приход""");
		КонецЕсли;
		
		ОбработкаРасшифровки.ВыбратьДействие(Расшифровка, ВыполненноеДействие, ПараметрВыполненногоДействия, ДоступныеДействия, ДополнительныеПункты);
		
		Если ПараметрВыполненногоДействия <> Неопределено  Тогда
			Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
				ОткрытьЗначение(ПараметрВыполненногоДействия); 
			КонецЕсли;
		ИначеЕсли ВыполненноеДействие = "ДопДействие1" Тогда
			Пометка = ПрименитьНастройкиСКД(Расшифровка);
			ЭтаФорма.СкомпоноватьРезультат();
			Сообщить(?(Пометка, "Пометка установлена", "Пометка снята"));	
		КонецЕсли;
	КонецЕсли;
	//////////
	
	//для УЧ_Баланс
	Если ИмяОтчета = "Отчет.УЧ_Баланс" ИЛИ ИмяОтчета = "ВнешнийОтчет.УЧ_Баланс" Тогда
		СтандартнаяОбработка = Ложь; 
		ПараметрыРасшифровки = Новый Структура;
		СписокСчетов = Новый СписокЗначений;
		Для каждого ЭлСчет Из Расшифровка Цикл		
			СписокСчетов.Добавить(получитьСчетНаСервере(ЭлСчет));		
		КонецЦикла;
		СписокПредприятий = Новый СписокЗначений;
		
		Для Каждого ТекНаправление Из Предприятия.ПолучитьЭлементы() Цикл
			Если Не ТекНаправление.Пометка Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого ТекПр Из ТекНаправление.ПолучитьЭлементы() Цикл
				Если Не ТекПр.Пометка Тогда
					Продолжить;
				КонецЕсли;
				СписокПредприятий.Добавить(ТекПр.Значение)
			КонецЦикла
		КонецЦикла;
		
		КоличествоЭлементов = СписокПредприятий.Количество()-1; 
		
		ОСВ = ПолучитьФорму("Отчет.Уч_ОСВ.Форма",,,Истина);
		
		ОСВ.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Значение = Период;
		ОСВ.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Использование = Истина; 		
		ОСВ.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[2].Значение = СписокПредприятий;
		ОСВ.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[2].Использование = Истина;
		ОСВ.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[1].Значение = СписокСчетов;
		ОСВ.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[1].Использование = Истина;
		ОСВ.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[3].Значение = ?(ЗначениеЗаполнено(ЭквивалентнаяВалюта), ЭквивалентнаяВалюта, НациональнаяВалюта());
		ОСВ.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[3].Использование = Истина;
		ОСВ.СкомпоноватьРезультат();
		ОСВ.Открыть();
	КонецЕсли;
	//////////
	
	// для УЧ_БалансСКД 
	Если ИмяОтчета = "Отчет.УЧ_БалансСКД" ИЛИ ИмяОтчета = "ВнешнийОтчет.УЧ_БалансСКД" ИЛИ ИмяОтчета = "Отчет.КЗ_БалансСКД" ИЛИ ИмяОтчета = "ВнешнийОтчет.КЗ_БалансСКД" Тогда
		СтандартнаяОбработка = Ложь; 
		ДатаКон = ТекущаяДата();
		ПараметрыРасшифровки = ПолучитьПараметрыРасшифровкиБаланса(Расшифровка);
		ОСВ = ПолучитьФорму("Отчет.УЧ_РасшифровкаБаланса.ФормаОбъекта",,,Истина);
		//ОСВ.Отчет.РежимРасшифровки = Истина;
		
		Для Каждого ЭлементНастроекР Из ОСВ.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
			
			Если ТипЗнч(ЭлементНастроекР) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда // отбор по предприятию в расшифровке
				
				Если ЗначениеЗаполнено(ПараметрыРасшифровки.Предприятие) Тогда
					ЭлементНастроекР.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
					ЭлементНастроекР.ПравоеЗначение = ПараметрыРасшифровки.Предприятие;
					ЭлементНастроекР.Использование = Истина;
				Иначе
					
					Для Каждого ЭлементНастроек Из Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл 
						
						Если ТипЗнч(ЭлементНастроек) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда 
							
							Если Не ТипЗнч(ЭлементНастроек.ПравоеЗначение) = Тип("СправочникСсылка.Предприятия") И Не (ТипЗнч(ЭлементНастроек.ПравоеЗначение) = Тип("СписокЗначений") И ЭлементНастроек.ПравоеЗначение.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Предприятия"))) Тогда
								Продолжить;
							КонецЕсли;
							
							ЭлементНастроекР.ВидСравнения = ЭлементНастроек.ВидСравнения;
							ЭлементНастроекР.ПравоеЗначение = ЭлементНастроек.ПравоеЗначение;
							ЭлементНастроекР.Использование = ЭлементНастроек.Использование;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;
			
			Для Каждого ЭлементНастроек Из Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл 
				
				Если ТипЗнч(ЭлементНастроекР) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
					
					Если ТипЗнч(ЭлементНастроек) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
																		
						Если Строка(ЭлементНастроекР.Параметр) = Строка(ЭлементНастроек.Параметр) Тогда
							ЭлементНастроекР.Значение = ЭлементНастроек.Значение;
							ЭлементНастроекР.Использование = Истина;
						Иначе
							Продолжить
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					Продолжить
				КонецЕсли;
				
			КонецЦикла;
			
			Если Строка(ЭлементНастроекР.Параметр) = "ЭквивалентнаяВалюта" И Не ЗначениеЗаполнено(ЭлементНастроекР.Значение) Тогда
				ЭлементНастроекР.Значение = НациональнаяВалюта();
				ЭлементНастроекР.Использование = Истина
			ИначеЕсли Строка(ЭлементНастроекР.Параметр) = "ТекущаяСтатья" Тогда
				ЭлементНастроекР.Значение = ПараметрыРасшифровки.Статья;
				ЭлементНастроекР.Использование = Истина
			КонецЕсли;
			
		КонецЦикла;
		ОСВ.Открыть();
		ОСВ.СкомпоноватьРезультат(РежимКомпоновкиРезультата.Фоновый);
		
	КонецЕсли;
	//////////
	
	
	// Д_ОтчетОДДС1
	Если ИмяОтчета = "Отчет.Д_ОтчетОДДС1" ИЛИ ИмяОтчета = "ВнешнийОтчет.Д_ОтчетОДДС1" ИЛИ ИмяОтчета = "ВнешнийОтчет.Д_ОтчетОДДС_по вдв" Тогда
		ТабДок = Новый ТабличныйДокумент;
		ТабДок.ОтображатьСетку = Ложь;
		
		Если ПроверитьПолеДДС(Расшифровка) = "План" ИЛИ ПроверитьПолеДДС(Расшифровка) = "План2" 
			ИЛИ ПроверитьПолеДДС(Расшифровка) = "Содержание" ИЛИ ПроверитьПолеДДС(Расшифровка) = "Содержание2" Тогда
			СтандартнаяОбработка     = Ложь;
			
			СтруктураПараметровРасшифровки = ПараметрыРасшифровкиПлана(Расшифровка, ТабДок, ПроверитьПолеДДС(Расшифровка), "Д_ОтчетОДДС1");
			
			сабОбщегоНазначенияКлиент.сабРасшифроватьСуммуДДС(ЭтаФорма, Отчет, СтруктураПараметровРасшифровки);			
		Иначе
			СтандартнаяОбработка     = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	//
	
	// для ГД_ПланФактИзм (ГД_ПланФактПоЦФО)
	Если ИмяОтчета = "Отчет.ГД_ПланФактПоЦФО" ИЛИ ИмяОтчета = "ВнешнийОтчет.ГД_ПланФактПоЦФО" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыПередачи = ПараметрыРасшифровки(Расшифровка);
		
		МассивСчетов = Новый Массив;
		Если НЕ ТипЗнч(ПараметрыПередачи.Счет) = Тип("Массив") Тогда
			МассивСчетов.Добавить(ПараметрыПередачи.Счет);
		Иначе
			МассивСчетов = ПараметрыПередачи.Счет;	
		КонецЕсли;
		
		СписокСценариев = Новый СписокЗначений;
		Если НЕ ТипЗнч(ПараметрыПередачи.Сценарий1) = Тип("Массив") Тогда
			СписокСценариев.Добавить(ПараметрыПередачи.Сценарий1);
		Иначе
			СписокСценариев.ЗагрузитьЗначения(ПараметрыПередачи.Сценарий1);
		КонецЕсли;
		
		МассивСценариев = СписокСценариев.ВыгрузитьЗначения();
		
		Если ТипЗнч(ПараметрыПередачи.Предприятие) = Тип("Массив") Тогда
			МассивПредприятий = ПараметрыПередачи.Предприятие;
		Иначе
			МассивПредприятий = Новый Массив;
			МассивПредприятий.Добавить(ПараметрыПередачи.Предприятие);
		КонецЕсли;
				
		////
		Кол = МассивПредприятий.Количество();
		
		//Для ОбрИнд = 1 По Кол Цикл
		//	Если ЗначениеЗаполнено(МассивПредприятий[Кол - ОбрИнд]) = Ложь Тогда
		//		МассивПредприятий.Удалить(МассивПредприятий.Найти(МассивПредприятий[Кол - ОбрИнд]));
		//	КонецЕсли;
		//КонецЦикла;
		
		Если Не ОбщегоНазначенияПовтИсп.ЭтоБазаСпирт() Тогда 
			ЭВ = СтандартныеОтчетыКлиентСервер.ПолучитьПараметр(Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, "ЭквивалентнаяВалюта");
		КонецЕсли;
		
		ФормаПечати = ПолучитьФорму("Отчет.Д_Расшифровка_СКД.Форма",,, Истина);
		ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Значение = Новый СписокЗначений;
		ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Значение.ЗагрузитьЗначения(МассивСценариев);
		
		// 24.01.13 передаем массив отобранных предприятий в расшифровку
		ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[1].Значение = Новый СписокЗначений;
		ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[1].Значение.ЗагрузитьЗначения(МассивПредприятий);	
		
		ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[2].Значение = ПараметрыПередачи.Подразделение;
		ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[3].Значение = Новый СписокЗначений;
		ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[3].Значение.ЗагрузитьЗначения(МассивСчетов);
		ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[4].Значение.ДатаНачала = ПараметрыПередачи.Дата1;
		ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[4].Значение.ДатаОкончания = ПараметрыПередачи.Дата2;
		ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[5].Использование = Истина;
		ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[5].Значение = ПараметрыПередачи.Субконто1;
		
		Если ПараметрыПередачи.Свойство("Субконто2") Тогда
			ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[6].Использование = Истина;
			ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[6].Значение = ПараметрыПередачи.Субконто2;
		Иначе	
			ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[6].Использование = Ложь;
		КонецЕсли;
		
		ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[7].Использование = Истина;	
		ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[7].Значение = Истина;

		Если Не ОбщегоНазначенияПовтИсп.ЭтоБазаСпирт() Тогда 
			СтандартныеОтчетыКлиентСервер.УстановитьПараметр(ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, "ЭквивалентнаяВалюта", ЭВ.Значение, Истина);
			СтандартныеОтчетыКлиентСервер.УстановитьПараметр(ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, "ПодразделенияДляАО", ПараметрыПередачи.ПодразделенияДляАО, Истина);
		КонецЕсли;
		
		// 28.01.13
		Если Не ОбщегоНазначенияПовтИсп.ЭтоБазаСпирт() Тогда 
			
			Если ПараметрыПередачи.ОтборПредприятий <> Неопределено И Не ПараметрыПередачи.РасшифровкаПоОдномуПредприятию Тогда 
				ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[11].ПравоеЗначение = ПараметрыПередачи.ОтборПредприятий.ПравоеЗначение;
				ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[11].ВидСравнения =  ПараметрыПередачи.ОтборПредприятий.ВидСравнения;
				ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[11].Использование = ПараметрыПередачи.ОтборПредприятий.Использование;
			Иначе
				ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[11].Использование = Ложь;
			КонецЕсли;
			
		Иначе
			
			Если ПараметрыПередачи.ОтборПредприятий <> Неопределено И Не ПараметрыПередачи.РасшифровкаПоОдномуПредприятию Тогда 
				ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[10].ПравоеЗначение = ПараметрыПередачи.ОтборПредприятий.ПравоеЗначение;
				ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[10].ВидСравнения =  ПараметрыПередачи.ОтборПредприятий.ВидСравнения;
				ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[10].Использование = ПараметрыПередачи.ОтборПредприятий.Использование;
			Иначе
				ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[10].Использование = Ложь;
			КонецЕсли;
			
		КонецЕсли;
				
		ФормаПечати.Элементы.ФормаБыстрыеНастройки.Пометка = Ложь;
		ФормаПечати.Элементы.Группа6.Видимость = Ложь;
		ФормаПечати.СкомпоноватьРезультат();
		ФормаПечати.Открыть();	
		
	КонецЕсли;
	
	// ПП_ОстаткиПоБанковскимСчетам
	Если ИмяОтчета = "Отчет.ПП_ОстаткиПоБанковскимСчетам" ИЛИ ИмяОтчета = "ВнешнийОтчет.ПП_ОстаткиПоБанковскимСчетам" Тогда	
		
		СтандартнаяОбработка = Ложь;
		ПараметрыПередачи = ПараметрыДляРасшифровки_ОстаткиПоБанковскимСчетам(Расшифровка);
		
		Если НЕ ПараметрыПередачи = "Пусто" Тогда
			
			Дата = СтандартныеОтчетыКлиентСервер.ПолучитьПараметр(Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, "Период").Значение.Дата;
			НовыйПериод = новый СтандартныйПериод;
			НовыйПериод.ДатаНачала = НачалоМесяца(Дата);
			НовыйПериод.ДатаНачала = Дата;
			
			Карточка = ПолучитьФорму("Отчет.ПП_Карточка.Форма.ФормаОтчета",,,Истина);
			СтандартныеОтчетыКлиентСервер.УстановитьПараметр(Карточка.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, "Период", НовыйПериод);
			Карточка.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[2].ПравоеЗначение = ПараметрыПередачи;
			Карточка.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[2].Использование = Истина;
			Карточка.СкомпоноватьРезультат();
			Карточка.Открыть();
		КонецЕсли;
		
	КонецЕсли;
	
	// ВП_Материальный отчет
	Если ИмяОтчета = "Отчет.ВП_МатериальныйОтчет" ИЛИ ИмяОтчета = "ВнешнийОтчет.ВП_МатериальныйОтчет" Тогда	
		
		СтандартнаяОбработка = Ложь;
		
		ТекПериод = СтандартныеОтчетыКлиентСервер.ПолучитьПараметр(Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, "Период").Значение;
		ТекПредприятие = СтандартныеОтчетыКлиентСервер.ПолучитьПараметр(Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, "Предприятия").Значение;
		ТекСубконто1 = ПолучитьСубконто1ДляРасшифровкиМатериальногоОтчета(Расшифровка);
		Если Не ЗначениеЗаполнено(ТекСубконто1) Тогда
			ТекСубконто1 = Ложь;
		КонецЕсли;
		ТекСубконто2 = СтандартныеОтчетыКлиентСервер.ПолучитьПараметр(Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, "Субконто2").Значение;
		
		ФормаПечати = ПолучитьФорму("Отчет.ВП_РасшифровкаМатериальногоОтчета_СКД.Форма");
		
		СтандартныеОтчетыКлиентСервер.УстановитьПараметр(ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, "ВыбПериод", ТекПериод, Истина);
		СтандартныеОтчетыКлиентСервер.УстановитьПараметр(ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, "Предприятия", ТекПредприятие, Истина);
		СтандартныеОтчетыКлиентСервер.УстановитьПараметр(ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, "Субконто1", ТекСубконто1, Истина);
		СтандартныеОтчетыКлиентСервер.УстановитьПараметр(ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, "Субконто2", ТекСубконто2, Истина);
		
		ФормаПечати.СкомпоноватьРезультат();
		ФормаПечати.Открыть();
		
	КонецЕсли;
	
	// УЧ_ВнутрихолдинговыеРасчеты
	Если ИмяОтчета = "Отчет.УЧ_ВнутрихолдинговыеРасчеты" ИЛИ ИмяОтчета = "ВнешнийОтчет.УЧ_ВнутрихолдинговыеРасчеты" Тогда	
		
		СтандартнаяОбработка = Ложь;
		СтруктураРасшифовки = ПараметрыРасшифровкиВНХ(Расшифровка);
		ОтчетРасшифровка = ПолучитьФорму("Отчет.УЧ_ОтчетПоУчетномуРегистру.ФормаОбъекта");		
		СтандартныеОтчетыКлиентСервер.УстановитьПараметр(ОтчетРасшифровка.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, Новый ПараметрКомпоновкиДанных("Период"), СтруктураРасшифовки.Период, Истина);
		Если СтруктураРасшифовки.Свойство("Предприятие") Тогда
			СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ОтчетРасшифровка.Отчет.КомпоновщикНастроек, "Предприятия", СтруктураРасшифовки.Предприятие, ВидСравненияКомпоновкиДанных.Равно, Истина, Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ); 
		КонецЕсли;
		Если СтруктураРасшифовки.Свойство("СчетДт") Тогда
			СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ОтчетРасшифровка.Отчет.КомпоновщикНастроек, "СчетДт", СтруктураРасшифовки.СчетДт, ВидСравненияКомпоновкиДанных.ВИерархии, Истина, Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ); 		
		КонецЕсли;
		Если СтруктураРасшифовки.Свойство("СчетКт") Тогда
			СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ОтчетРасшифровка.Отчет.КомпоновщикНастроек, "СчетКт", СтруктураРасшифовки.СчетКт, ВидСравненияКомпоновкиДанных.ВИерархии, Истина, Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ); 		
		КонецЕсли;
		Если СтруктураРасшифовки.Свойство("Субконто1") Тогда
			СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ОтчетРасшифровка.Отчет.КомпоновщикНастроек, "Субконто1", СтруктураРасшифовки.Субконто1, ВидСравненияКомпоновкиДанных.Равно, Истина, Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ); 
		КонецЕсли;
		ОтчетРасшифровка.СкомпоноватьРезультат(РежимКомпоновкиРезультата.Фоновый);
		ОтчетРасшифровка.Элементы.ФормаБыстрыеНастройки.Пометка = Ложь;
		ОтчетРасшифровка.Элементы.Группа6.Видимость = Ложь;
		ОтчетРасшифровка.Открыть();
				
	КонецЕсли;
	//

	// Д_Расшифровка
	Если ИмяОтчета = "Отчет.Д_Расшифровка" ИЛИ ИмяОтчета = "ВнешнийОтчет.Д_Расшифровка" Тогда	
		СтандартнаяОбработка = Ложь;
		Если НЕ ПустаяСтрока(Расшифровка.Регистратор) Тогда
			//		Сообщить(Расшифровка.Регистратор.ПолучитьФорму());
			ПараметрыФормы = Новый  Структура("Ключ, НомерСтроки", Расшифровка.Регистратор, Расшифровка.НомерСтроки);
			ОткрытьФорму("Документ." + ПолучитьИмяДокумента(Расшифровка.Регистратор) + ".ФормаОбъекта", ПараметрыФормы)
		КонецЕсли; 
	КонецЕсли;
	// 	
	
	// Сводный финансовый результат на СКД
	Если ИмяОтчета = "Отчет.Д_СводныйФР" ИЛИ ИмяОтчета = "ВнешнийОтчет.Д_СводныйФР" Тогда
		СтандартнаяОбработка = Ложь;
		СтруктураРасшифовки = СтруктураРасшифровкиСводныйФинРез(ДанныеРасшифровки, Расшифровка);
		ФормаРасшифровки = ПолучитьФорму("Отчет.Д_ФинансовыйРезультат.Форма");
		
		ФормаРасшифровки.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Значение      = СтруктураРасшифовки.Сценарий1;
		ФормаРасшифровки.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[1].Значение      = СтруктураРасшифовки.Сценарий2;
		ФормаРасшифровки.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[1].Использование = СтруктураРасшифовки.Сценарий2Использование;
		ФормаРасшифровки.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[2].Значение      = СтруктураРасшифовки.ПериодОтчета;
		ФормаРасшифровки.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[3].Значение      = СтруктураРасшифовки.Интервал;
		ФормаРасшифровки.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[4].Значение      = СтруктураРасшифовки.ЭквивалентнаяВалюта;
		ФормаРасшифровки.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[5].Значение      = Не СтруктураРасшифовки.ОкруглятьДоЦелого;
		ФормаРасшифровки.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[7].Использование = Истина;
		ФормаРасшифровки.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[7].ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
		ФормаРасшифровки.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[7].ПравоеЗначение = СтруктураРасшифовки.Предприятие;
		
		ФормаРасшифровки.СкомпоноватьРезультат();
		ФормаРасшифровки.Открыть();
	КонецЕсли;
	
	// Сводный финансовый результат на СКД
	//Если ИмяОтчета = "Отчет.ГД_Источники_Рег_Учетный" ИЛИ ИмяОтчета = "ВнешнийОтчет.ГД_Источники_Рег_Учетный" Тогда
	//	СтандартнаяОбработка = Ложь;
	//	ПараметрыПередачи = ПараметрыРасшифровкиГДИсточники(Расшифровка);		
	//	БюджетныйНаКлиенте.РасшифроватьСумму(Элемент, ПараметрыПередачи);	
	//КонецЕсли;
	
	Если ИмяОтчета = "Отчет.ГД_Источники_Рег_Учетный" ИЛИ ИмяОтчета = "ВнешнийОтчет.ГД_Источники_Рег_Учетный" Тогда
		СтандартнаяОбработка = Ложь;
		ТабДок = Новый ТабличныйДокумент;
		ТабДок.ОтображатьСетку = Ложь;
		
		//Если ПроверитьПолеДДС(Расшифровка) = "План" ИЛИ ПроверитьПолеДДС(Расшифровка) = "План2" 
		//	ИЛИ ПроверитьПолеДДС(Расшифровка) = "Содержание" ИЛИ ПроверитьПолеДДС(Расшифровка) = "Содержание2" Тогда
		//	СтандартнаяОбработка     = Ложь;
			
			СтруктураПараметровРасшифровки = ПараметрыРасшифровкиПлана(Расшифровка, ТабДок, "Факт", "ГД_Источники_Рег_Учетный");
			
			сабОбщегоНазначенияКлиент.сабРасшифроватьСуммуДДС(ЭтаФорма, Отчет, СтруктураПараметровРасшифровки);			
		//Иначе
		//	СтандартнаяОбработка     = Истина;
		//	Возврат;
		//КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяДокумента(Документ)
	ИмяДокумента = Документ.Метаданные().Имя;
	
	Возврат Строка(ИмяДокумента);
КонецФункции // ()

//для ПП_Сводный
&НаСервере
Функция ПроверитьПоле(Расшифровка)
	
	ОбъектОтчет = РеквизитФормыВЗначение("Отчет");
	ПолеСчет = Новый ПолеКомпоновкиДанных("Документ");
	ДР = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	Для каждого СтрокаТЧ Из ДР.Элементы.Получить(Расшифровка).ПолучитьПоля() Цикл 
		
		Если СтрокаТЧ.Поле = "Документ" Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	Возврат Ложь;
КонецФункции

&НаСервере
Функция ПрименитьНастройкиСКД(Расшифровка)
	Пометка = Ложь;
	ОбъектОтчет = РеквизитФормыВЗначение("Отчет");
	ПолеСчет = Новый ПолеКомпоновкиДанных("Документ");
	ДР = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	Для каждого СтрокаТЧ Из ДР.Элементы.Получить(Расшифровка).ПолучитьПоля() Цикл 
		
		Если СтрокаТЧ.Поле = "Документ" Тогда
			Если ТипЗнч(СтрокаТЧ.Значение) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
				Пометка = ПометитьНеопознанным(СтрокаТЧ.Значение);			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	Возврат Пометка;
КонецФункции

&НаСервере
Функция ПроверитьВозможностьУстановкиНеопознанныхПриходов(Расшифровка)
	
	ЗначениеСвойства = сабОбщегоНазначения.ПолучитьЗначениеСвойства(ПараметрыСеанса.ТекущийПользователь, ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ИмеетВозможностьПомечатьНеопознанныеПриходы);
	ЗначениеСвойства = РольДоступна("ОпознаваниеПриходов");
	
	ОбъектОтчет = РеквизитФормыВЗначение("Отчет");
	ДР = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	
	Если Не ЗначениеСвойства = Истина Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	ЗначениеРС = ПолучитьЗначениеРС(ДР.Элементы.Получить(Расшифровка));
	Если ЗначениеРС = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Если ПараметрыСеанса.ДоступныеИсточники.Найти(ЗначениеРС.Источник) = Неопределено Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;	
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьЗначениеРС(ЭлементыКомпановки)
	
	Если ТипЗнч(ЭлементыКомпановки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Для Каждого СтрокаТЧ Из ЭлементыКомпановки.ПолучитьПоля() Цикл 
			Если СтрокаТЧ.Поле = "ОстБанковскиеСчета" Тогда
				Возврат СтрокаТЧ.Значение;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ЭлементыКомпановки) = Тип("Массив") Тогда
		Если ЭлементыКомпановки.Количество() = 0 Тогда
			Возврат Неопределено;
		Иначе
			Возврат ПолучитьЗначениеРС(ЭлементыКомпановки[0]);
		КонецЕсли;	
	КонецЕсли;
	
	Возврат ПолучитьЗначениеРС(ЭлементыКомпановки.ПолучитьРодителей());
	
КонецФункции	

&НаСервере
Функция ПометитьНеопознанным(Ссылка)
	
	ТекПлатежкаОбъект = Ссылка.ПолучитьОбъект();
	ТекПлатежкаОбъект.НеопознанныйПриход = 1 - ТекПлатежкаОбъект.НеопознанныйПриход;
	ТекПлатежкаОбъект.ДополнительныеСвойства.Вставить("ИгнорироватьОграничениеРедактированияПП", Истина);
	ТекПлатежкаОбъект.Записать();
	Возврат ТекПлатежкаОбъект.НеопознанныйПриход;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоПредприятий() 
	
	ДеревоПредприятий = БюджетныйНаСервере.ПолучитьДеревоПредприятийПоНаправлениям(СкрыватьНеактуальные);		
	ЗначениеВДанныеФормы(ДеревоПредприятий, Предприятия);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятияПометкаПриИзменении(Элемент)
	
	МассивПредприятий = Новый Массив;
	
	Если Элемент.Родитель.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		
		Для Каждого Стр Из Предприятия.ПолучитьЭлементы() Цикл
			Если Стр.Значение = Элемент.Родитель.ТекущиеДанные.Значение Тогда
				Для Каждого СтрП Из Стр.ПолучитьЭлементы() Цикл
					СтрП.Пометка = Элемент.Родитель.ТекущиеДанные.Пометка;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Если Элемент.Родитель.ТекущиеДанные.Пометка Тогда
			Элемент.Родитель.ТекущиеДанные.ПолучитьРодителя().Пометка = Элемент.Родитель.ТекущиеДанные.Пометка;
		КонецЕсли;	
		
	КонецЕсли;
	
	Для каждого ТекЭл1 Из Предприятия.ПолучитьЭлементы() Цикл
		ТекУр2 = ТекЭл1.ПолучитьЭлементы();
		Для каждого ТекЭл2 Из ТекУр2 Цикл
			Если ТекЭл2.Пометка Тогда
				МассивПредприятий.Добавить(ТекЭл2.Значение);		
			КонецЕсли;		
		КонецЦикла; 
	КонецЦикла; 
	
	//обновляем пользовательские настройки
	//Если НЕ ПолучитьМассивОтчетовИсключений().Найти(ЭтаФорма.ИмяФормы) = Неопределено Тогда
	Для каждого ТекЭлНастройки Из Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ТекЭлНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И (Строка(ТекЭлНастройки.Параметр) = "Предприятия" ИЛИ Строка(ТекЭлНастройки.Параметр) = "Предприятие") Тогда
			Спис = Новый СписокЗначений;
			Спис.ЗагрузитьЗначения(МассивПредприятий);
			ТекЭлНастройки.Значение = Спис;
		КонецЕсли;
	КонецЦикла; 
	//КонецЕсли;
	
	
	ПоказатьМодифицированность();
КонецПроцедуры

&НаСервере
Функция получитьСчетНаСервере(КодСчета)
	Возврат ПланыСчетов.Учетный.НайтиПоКоду(КодСчета)
КонецФункции

&НаСервереБезКонтекста
Функция НациональнаяВалюта()
	Возврат УЧ_Сервер.НациональнаяВалюта();
КонецФункции

&НаКлиенте
Процедура ВидБалансаПриИзменении(Элемент)
	ПоказатьМодифицированность();	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьМодифицированность()
	
	Если НЕ Элементы.Результат.ОтображениеСостояния.ДополнительныйРежимОтображения=ДополнительныйРежимОтображения.Неактуальность Тогда
		Элементы.Результат.ОтображениеСостояния.ДополнительныйРежимОтображения=ДополнительныйРежимОтображения.Неактуальность;
		Элементы.Результат.ОтображениеСостояния.Видимость = Истина;
		Элементы.Результат.ОтображениеСостояния.Текст = "Отчет не сформирован. Нажмите ""Сформировать"" для получения отчета.";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрыватьНеактуальныеПриИзменении(Элемент)
	
	//Если СкрыватьНеактуальные Тогда	
	//	Для Каждого СтрокаНаправления Из Отчет.Предприятия.ПолучитьЭлементы() Цикл
	//		КоличествоЭлементов = СтрокаНаправления.ПолучитьЭлементы().Количество();
	//		Для ОбратныйИнд = 1 По КоличествоЭлементов Цикл		
	//			Если НеактуальныйПроект(СтрокаНаправления.ПолучитьЭлементы()[КоличествоЭлементов - ОбратныйИнд].Значение) Тогда
	//				СтрокаНаправления.ПолучитьЭлементы().Удалить(КоличествоЭлементов - ОбратныйИнд)
	//			КонецЕсли;
	//		КонецЦикла;			
	//	КонецЦикла;
	//Иначе
	//	Отчет.Предприятия.ПолучитьЭлементы().Очистить();
	//	ЗаполнитьДеревоПредприятий() 
	//КонецЕсли;
	
	ЗаполничтьТекКопиюПредприятий();
	Предприятия.ПолучитьЭлементы().Очистить();
	ЗаполнитьДеревоПредприятий();
	ЗагрузитьПредприятияИзПользНастроек(Истина);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполничтьТекКопиюПредприятий()
	Для Каждого ТекНаправление Из Предприятия.ПолучитьЭлементы() Цикл
		НоваяСтрока = ПредприятияТехКопия.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекНаправление);
		Для Каждого ТекПр Из ТекНаправление.ПолучитьЭлементы() Цикл
			НоваяСтрокаУр2 = НоваяСтрока.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаУр2, ТекПр);
		КонецЦикла;
	КонецЦикла;  
КонецПроцедуры



//////////

// для УЧ_БалансСКД
&НаСервере
Функция ПолучитьПараметрыРасшифровкиБаланса(Расшифровка)
	
	СтруктураВозврата = Новый Структура;
	
	ОбъектОтчет = РеквизитФормыВЗначение("Отчет");
	ДР = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	Эл = ДР.Элементы.Получить(Расшифровка);
	
	Статья = ПолучитьСтатьюБаланса(Эл, "Статья");
	СтруктураВозврата.Вставить("Статья", Статья);
	
	Эл = ДР.Элементы.Получить(Расшифровка);
	Предприятие = ПолучитьПредприятиеБаланса(Эл);
	Если ЗначениеЗаполнено(Предприятие) Тогда
		СписокПредприятий = Новый СписокЗначений;
		СписокПредприятий.ЗагрузитьЗначения(Предприятие);
	Иначе
		СписокПредприятий = Неопределено
	КонецЕсли;
	СтруктураВозврата.Вставить("Предприятие", СписокПредприятий);
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Функция ПолучитьСтатьюБаланса(Эл, ИмяПоля)
	
	ТекСтатья = Неопределено;
	
	Если Эл.ПолучитьПоля().Количество() Тогда
		Если Эл.ПолучитьПоля()[0].Поле = ИмяПоля Тогда
			ТекСтатья = Эл.ПолучитьПоля()[0].Значение;
		Иначе
			ТекСтатья = ПолучитьСтатьюВИерархии(Эл, ИмяПоля)
		КонецЕсли;
	КонецЕсли;
		
	Возврат ТекСтатья;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтатьюВИерархии(ТекЭлРасшифровки, ИмяПоля)
	
	Статья = Неопределено;
	
	Попытка 		
		Пока Не ТекЭлРасшифровки.ПолучитьПоля()[0].Поле = ИмяПоля Цикл 
			МассивРодителей = ТекЭлРасшифровки.ПолучитьРодителей();
			Если МассивРодителей.Количество() Тогда
				ТекЭлРасшифровки = МассивРодителей[0];
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Статья = ТекЭлРасшифровки.ПолучитьПоля()[0].Значение;
	Исключение
		МассивРодителей = ТекЭлРасшифровки.ПолучитьРодителей();
		Если МассивРодителей.Количество() Тогда
			Статья = ПолучитьСтатьюВИерархии(МассивРодителей[0], ИмяПоля)
		КонецЕсли;
	КонецПопытки;
	
	Возврат Статья
	
КонецФункции

&НаСервере
Функция ПолучитьПредприятиеБаланса(Эл)
	
	МассивПредприятий = Новый Массив;
	Поля = Эл.ПолучитьПоля();
	Если Поля.Количество() Тогда
		ИмяПоля = Эл.ПолучитьПоля()[0].Поле;   
	Иначе
		Возврат Неопределено;	
	КонецЕсли;

	Попытка
			Столбец = Эл.ПолучитьРодителей()[1];
			ГрПредприятие = Столбец.ПолучитьПоля()[0].Значение;
			//подразделение
			Если ТипЗнч(ГрПредприятие.ссылка) = Тип("СправочникСсылка.УЧ_ГруппировкаДляБалансаМСФО")  Тогда
				ПредприятияГр = ПолучитьПредприятияПоГруппировкеМСФО(ГрПредприятие);
				МассивПредприятий = ПредприятияГр;
			КонецЕсли; 
			//предприятие
			Если ТипЗнч(ГрПредприятие.ссылка) = Тип("СправочникСсылка.Предприятия") И Не ГрПредприятие.ссылка = Справочники.Предприятия.ПустаяСсылка() Тогда
				МассивПредприятий.Добавить(ГрПредприятие);
			КонецЕсли; 
			Если Не МассивПредприятий.Количество() Тогда
				МассивПредприятий = Неопределено;
			КонецЕсли;
		Исключение
			// итоги
			МассивПредприятий = Неопределено									
		КонецПопытки;	
	
	Возврат МассивПредприятий;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредприятияПоГруппировкеМСФО(Группировка)
	
	МассивПредприятий = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекГр", Группировка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Предприятия.Ссылка
	               |ИЗ
	               |	Справочник.Предприятия КАК Предприятия
	               |ГДЕ
	               |	Предприятия.ГруппировкаМСФО = &ТекГр";
				   
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивПредприятий.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивПредприятий;
	
КонецФункции


//////////


//////////////////Д_ОтчетОДДС1
&НаСервере
Функция ПроверитьПолеДДС(Расшифровка)
	
	ОбъектОтчет = РеквизитФормыВЗначение("Отчет");
	ПолеСчет = Новый ПолеКомпоновкиДанных("Документ");
	ДР = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	
	Для каждого СтрокаТЧ Из ДР.Элементы.Получить(Расшифровка).ПолучитьПоля() Цикл 
		
		Если СтрокаТЧ.Поле = "ВиртСумма1" Тогда
			Возврат "План";
		ИначеЕсли СтрокаТЧ.Поле = "ВиртСумма2" Тогда 
			Возврат "План2";
		ИначеЕсли СтрокаТЧ.Поле = "Содержание" Или СтрокаТЧ.Поле = "Содержание2" Тогда 
			Возврат СтрокаТЧ.Поле
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ПараметрыРасшифровкиПлана(Расшифровка, РезультатОтчет, План, ИмяОтчета)
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("Период", "");
	СтруктураВозврата.Вставить("Статья", "");
	СтруктураВозврата.Вставить("Предприятие", "");
	СтруктураВозврата.Вставить("Подразделение", "");
	СтруктураВозврата.Вставить("Сценарий", "");
	СтруктураВозврата.Вставить("ЭквивалентнаяВалюта", УЧ_Сервер.НациональнаяВалюта());
	СтруктураВозврата.Вставить("ЭтоРасшифровкаФакта", Истина);
	СтруктураВозврата.Вставить("КорСубконто1", Неопределено);
	СтруктураВозврата.Вставить("Источник", Неопределено);
	СтруктураВозврата.Вставить("ВидДеятельности", Неопределено);
	
	МассивОтборовКД = Новый Массив;
	СтруктураВозврата.Вставить("МассивОтборов", МассивОтборовКД);
	
	Парам = Новый Структура("СтатьяДДС, Подразделение, ЦФО");
	ДР = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	Эл = ДР.Элементы.Получить(Расшифровка);
	ИмяПоля = Эл.ПолучитьПоля()[0].Поле;   
	Строка = Эл.ПолучитьРодителей()[0];
	
	//интервал
	ЭлементИнтервал = ПолучитьЭлементПользовательскихНастроек(Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы, "Интервал");
	
	// по подразделениям
	ЭлементПоПодразделениям = ПолучитьЭлементПользовательскихНастроек(Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы, "ПоПодразделениям");
	
	Если ЭлементПоПодразделениям = Неопределено Тогда
		ФормированиеПоПодразделениям = Ложь; 
	Иначе
		ФормированиеПоПодразделениям = ЭлементПоПодразделениям.Значение;
	КонецЕсли;
	
	// сводный
	ЭлементСводный = ПолучитьЭлементПользовательскихНастроек(Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы, "Сводный");
	
	Если ЭлементСводный = Неопределено Тогда
		ФормированиеСводногоОтчета = Ложь;
	Иначе
		ФормированиеСводногоОтчета = ЭлементСводный.Значение;
	КонецЕсли;
	
	Если ИмяОтчета = "ГД_Источники_Рег_Учетный" Тогда
		ПериодРасшифровки = Неопределено;
		
		Попытка
			Столбец = Эл.ПолучитьРодителей()[1];
			СтруктураВозврата.Источник = Столбец.ПолучитьПоля()[0].Значение;
		Исключение
			Столбец = Неопределено; //итоговые записи
		КонецПопытки;
		
		
	Иначе
		
		Попытка
			Столбец = Эл.ПолучитьРодителей()[1];
			ПериодРасшифровки = ПолучитьПериодИзСтроки(Столбец.ПолучитьПоля()[0].Значение, ЭлементИнтервал.Значение);
		Исключение
			Столбец = Неопределено; //итоговые записи
			ПериодРасшифровки = Неопределено;
		КонецПопытки;
		
	КонецЕсли;

	Ошибка = Ложь;
	Предприятие = Неопределено;
	ВидДвижений = Неопределено; 
	ВидДеятельности = Неопределено;
	Статья = Неопределено;
	Подразделение = Неопределено;
	
	//период
	ЭлементПериод = ПолучитьЭлементПользовательскихНастроек(Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы, "ВыбПериод");

	Если ЭлементПериод = Неопределено Тогда
		ЭлементПериод = ПолучитьЭлементПользовательскихНастроек(Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы, "Период");
	КонецЕсли;
	
	Если ПериодРасшифровки = Неопределено Тогда
		
		Если ЭлементПериод = Неопределено Тогда
			Период = Новый СтандартныйПериод;
		Иначе
			Период = Новый СтандартныйПериод;
			Период.ДатаНачала = ЭлементПериод.Значение.ДатаНачала;
			Период.ДатаОкончания = ЭлементПериод.Значение.ДатаОкончания;
		КонецЕсли;
		
	Иначе
		Период = Новый СтандартныйПериод;
		Период.ДатаНачала = Макс(ПериодРасшифровки.ДатаНачала, ЭлементПериод.Значение.ДатаНачала);
		Период.ДатаОкончания = Мин(ПериодРасшифровки.ДатаОкончания, ЭлементПериод.Значение.ДатаОкончания);
	КонецЕсли;
		
	Если ЭлементИнтервал = Неопределено Тогда
		Интервал = Неопределено;
	Иначе
		Интервал = ЭлементИнтервал.Значение;
	КонецЕсли;
	
	// расшифровка по кор субконто {
	Если План = "Содержание" Или План = "Содержание2" Тогда
		КорСубконто1 = Строка.ПолучитьПоля()[0].Значение;
		
		Если ЗначениеЗаполнено(КорСубконто1) Тогда
			СтруктураВозврата.КорСубконто1 = КорСубконто1;
		КонецЕсли;
		
		Попытка
			Строка = Строка.ПолучитьРодителей()[0];       	
		Исключение
			Ошибка = Истина;
		КонецПопытки;
		
	КонецЕсли;
	//}

	Пока НЕ Ошибка Цикл
		
		Если ТипЗнч(Строка) <> Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка")Тогда
			
			Если ТипЗнч(Строка.ПолучитьПоля()[0].Значение) = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств") Тогда
				
				Если Не Статья = Неопределено Тогда
					
					Если Статья.Уровень() < Строка.ПолучитьПоля()[0].Значение.Уровень() Тогда
						Статья = Строка.ПолучитьПоля()[0].Значение;
					КонецЕсли;
					
				Иначе
					Статья = Строка.ПолучитьПоля()[0].Значение;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Строка.ПолучитьПоля()[0].Значение) = Тип("ПеречислениеСсылка.саб_Фин_ВидыДеятельности") Тогда
				ВидДеятельности = Строка.ПолучитьПоля()[0].Значение;
			ИначеЕсли ТипЗнч(Строка.ПолучитьПоля()[0].Значение) = Тип("СправочникСсылка.Предприятия") Тогда
				
				Если Не ЗначениеЗаполнено(Предприятие) Тогда
					Предприятие = Строка.ПолучитьПоля()[0].Значение;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Строка.ПолучитьПоля()[0].Значение) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
				Подразделение = Строка.ПолучитьПоля()[0].Значение;	
			ИначеЕсли ТипЗнч(Строка.ПолучитьПоля()[0].Значение) = Тип("Строка") И Строка.ПолучитьПоля()[0].Значение = "ВГО" Или Строка.ПолучитьПоля()[0].Значение = "ВКО" ИЛИ Строка.ПолучитьПоля()[0].Значение = "Внешние" Тогда
				ВидДвижений = Строка.ПолучитьПоля()[0].Значение;
			КонецЕсли;
			
		КонецЕсли;
		
		Попытка
			Строка = Строка.ПолучитьРодителей()[0];       	
		Исключение
			Ошибка = Истина;
		КонецПопытки;
		
	КонецЦикла;
		
	Ошибка = Ложь;
	
	Пока НЕ Ошибка Цикл
		ИерархияПредприятий = Ложь;
		
		Если ТипЗнч(Столбец) <> Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") И НЕ Столбец = Неопределено Тогда
			
			Если ТипЗнч(Столбец.ПолучитьПоля()[0].Значение) = Тип("Дата") Тогда
				
				Если Интервал = "Месяц" Тогда
					Период.ДатаНачала = НачалоМесяца(Столбец.ПолучитьПоля()[0].Значение);
					Период.ДатаОкончания = КонецМесяца(Столбец.ПолучитьПоля()[0].Значение);
				ИначеЕсли Интервал = "Квартал" Тогда
					Период.ДатаНачала = НачалоКвартала(Столбец.ПолучитьПоля()[0].Значение);
					Период.ДатаОкончания = КонецКвартала(Столбец.ПолучитьПоля()[0].Значение);
				ИначеЕсли Интервал = "Год" Тогда
					Период.ДатаНачала = НачалоГода(Столбец.ПолучитьПоля()[0].Значение);
					Период.ДатаОкончания = КонецГода(Столбец.ПолучитьПоля()[0].Значение);
				КонецЕсли;
				
			КонецЕсли;
			
			Если Столбец.ПолучитьПоля().Количество() > 1 Тогда
				
				Если ФормированиеПоПодразделениям Тогда 
					
					Если ТипЗнч(Столбец.ПолучитьПоля()[1].Значение) = Тип("СправочникСсылка.Предприятия") Или Столбец.ПолучитьПоля()[1].Поле = "Предприятие" Тогда
						
						Если Не ЗначениеЗаполнено(Предприятие) Тогда
							Предприятие = Столбец.ПолучитьПоля()[1].Значение;
						КонецЕсли;
						
						Если Столбец.ПолучитьПоля()[1].Иерархия Тогда
							ИерархияПредприятий = Истина;
						Иначе
							ИерархияПредприятий = Ложь;
						КонецЕсли;
						
					ИначеЕсли ТипЗнч(Столбец.ПолучитьПоля()[1].Значение) = Тип("СправочникСсылка.СтруктураПредприятия") Или Столбец.ПолучитьПоля()[1].Поле = "Подразделение" Тогда
						
						Если Не ЗначениеЗаполнено(Подразделение) Тогда
							Подразделение = Столбец.ПолучитьПоля()[1].Значение;
						КонецЕсли;
						
					КонецЕсли;
					
					Если ТипЗнч(Столбец.ПолучитьПоля()[2].Значение) = Тип("СправочникСсылка.Предприятия") Или Столбец.ПолучитьПоля()[2].Поле = "Предприятие" Тогда
						
						Если Не ЗначениеЗаполнено(Предприятие) Тогда
							Предприятие = Столбец.ПолучитьПоля()[2].Значение;
						КонецЕсли;
						
						Если Столбец.ПолучитьПоля()[2].Иерархия Тогда
							ИерархияПредприятий = Истина;
						Иначе
							ИерархияПредприятий = Ложь;
						КонецЕсли;

					ИначеЕсли ТипЗнч(Столбец.ПолучитьПоля()[2].Значение) = Тип("СправочникСсылка.СтруктураПредприятия") Или Столбец.ПолучитьПоля()[2].Поле = "Подразделение" Тогда
						
						Если Не ЗначениеЗаполнено(Подразделение) Тогда
							Подразделение = Столбец.ПолучитьПоля()[2].Значение;
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
										
					Если ТипЗнч(Столбец.ПолучитьПоля()[1].Значение) = Тип("СправочникСсылка.Предприятия") Или Столбец.ПолучитьПоля()[1].Поле = "Предприятие" Тогда
						
						Если Не ЗначениеЗаполнено(Предприятие) Тогда
							Предприятие = Столбец.ПолучитьПоля()[1].Значение;
						КонецЕсли;
						
						Если Столбец.ПолучитьПоля()[1].Иерархия Тогда
							ИерархияПредприятий = Истина;
						Иначе
							ИерархияПредприятий = Ложь;
						КонецЕсли;

					КонецЕсли;

				КонецЕсли;
								
			КонецЕсли;

		КонецЕсли;
		
		Если ИерархияПредприятий Тогда
			Ошибка = Истина;
		КонецЕсли;

		Попытка
			Столбец = Столбец.ПолучитьРодителей()[0];       	
		Исключение
			Ошибка = Истина;
		КонецПопытки;
		
	КонецЦикла; 
	
	Если Не Столбец = Неопределено И Не ПериодРасшифровки = Неопределено Тогда // если расшифровываем не итоги и не иерархию
		
		Если Не ЗначениеЗаполнено(Предприятие) Или Предприятие = "<...>" Тогда
			Предприятие = Справочники.Предприятия.ПустаяСсылка();
		КонецЕсли;
		
		Если ФормированиеПоПодразделениям И (Не ЗначениеЗаполнено(Подразделение) Или Подразделение = "<...>" Или Подразделение = "Основное") Тогда
			Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
		КонецЕсли;
		
	Иначе  // если итоги или иерархия в случае незаполненных значений отбора нет, для этого ставим неопределено
		
		Если Не ЗначениеЗаполнено(Предприятие) Или Предприятие = "<...>" Тогда
			Предприятие = Неопределено;
		КонецЕсли;
		
		Если ФормированиеПоПодразделениям И (Не ЗначениеЗаполнено(Подразделение) Или Подразделение = "<...>" Или Подразделение = "Основное") Тогда
			Подразделение = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураВозврата.Вставить("Период", Период);
	СтруктураВозврата.Вставить("ВидДвижений", ВидДвижений);
	СтруктураВозврата.Вставить("ВидДеятельности", ?(ЗначениеЗаполнено(Статья), ВидДеятельности, Неопределено));
	СтруктураВозврата.Вставить("Статья", Статья);
	
	тпСценарий = Неопределено;
		
	Если ФормированиеСводногоОтчета Тогда //если Сводный
		Предприятие = Неопределено;
		Подразделение =  Неопределено;
	КонецЕсли;

	СтруктураВозврата.Вставить("Предприятие", Предприятие);
	СтруктураВозврата.Вставить("Подразделение", Подразделение);
		
	Если План = "План" Или План = "Содержание" Тогда
		тпСценарий1 = СтандартныеОтчетыКлиентСервер.ПолучитьПараметр(Отчет.КомпоновщикНастроек, "Сценарий1");
		
		Если Не тпСценарий1 = Неопределено Тогда
			СтруктураВозврата.Вставить("Сценарий", тпСценарий1.Значение);
			тпСценарий = тпСценарий1.Значение;
		КонецЕсли;
		
	Иначе
		
		Если ИмяОтчета = "ГД_Источники_Рег_Учетный" Тогда
			СтруктураВозврата.Вставить("Сценарий", Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина));
		Иначе
			тпСценарий2 = СтандартныеОтчетыКлиентСервер.ПолучитьПараметр(Отчет.КомпоновщикНастроек, "Сценарий2");
			
			Если Не тпСценарий2 = Неопределено Тогда
				СтруктураВозврата.Вставить("Сценарий", тпСценарий2.Значение);
				тпСценарий = тпСценарий2.Значение;
			КонецЕсли;
			
		КонецЕсли;
		
		//СтандартныеОтчетыКлиентСервер.УстановитьПараметр(Настройки, "СценарийВариант", "", Истина);
	КонецЕсли;
	
	тпЭквивалентнаяВалюта = СтандартныеОтчетыКлиентСервер.ПолучитьПараметр(Отчет.КомпоновщикНастроек, "ЭквивалентнаяВалюта");
	
	Если Не тпЭквивалентнаяВалюта = Неопределено Тогда
		СтруктураВозврата.Вставить("ЭквивалентнаяВалюта", тпЭквивалентнаяВалюта.Значение);
	КонецЕсли;
	
	//заполняем отборы
	Для каждого ТекЭлементНастройки Из Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		
		Если ТипЗнч(ТекЭлементНастройки) = Тип("ОтборКомпоновкиДанных") Тогда
			
			Для каждого ТекЭлементОтбора Из ТекЭлементНастройки.Элементы Цикл
				//НовыйЭлемент = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				//ЗаполнитьЗначенияСвойств(НовыйЭлемент, ТекЭлементОтбора);	
				МассивОтборовКД.Добавить(ТекЭлементОтбора);
			КонецЦикла; 
			
		КонецЕсли;
		
		Если ТипЗнч(ТекЭлементНастройки) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			//НовыйЭлемент = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			//ЗаполнитьЗначенияСвойств(НовыйЭлемент, ТекЭлементНастройки);	
			Попытка
				Если Не ЗначениеЗаполнено(ТекЭлементНастройки.ЛевоеЗначение) ИЛИ ТекЭлементНастройки.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Предприятия") Тогда //суперБоБ какой-то...
					ТекЭлементНастройки.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Предприятие");			
				КонецЕсли;
				
				МассивОтборовКД.Добавить(ТекЭлементНастройки);
			Исключение
				
			КонецПопытки;			
			
		КонецЕсли;
		
	КонецЦикла;
	
	//заменяем регистр бухгалтерии
	СтруктураВозврата.Вставить("ЭтоРасшифровкаФакта", тпСценарий = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина));
			
	Возврат СтруктураВозврата;
	
	
КонецФункции

Функция ПолучитьЭлементПользовательскихНастроек(ЭлементыНастроек, ИмяЭлемента)
	
	Для каждого ТекЭлемент Из ЭлементыНастроек Цикл
		
		Если ТипЗнч(ТекЭлемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") тогда
			
			Если Строка(ТекЭлемент.Параметр) = ИмяЭлемента Тогда
				Возврат ТекЭлемент;		
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла; 
	
КонецФункции // ()

&НаСервере
Процедура ОчиститьРезультатСервер()
	Результат.Очистить();
КонецПроцедуры

&НаСервере
Функция ПолучитьПериодИзСтроки(СтрокаПериода, Интервал)
	
	Попытка
		
		Если Интервал = "Месяц" Тогда
			ТекГод = СокрЛП(Прав(СтрокаПериода, 4));
			ТекМесяц = СокрЛП(Лев(СтрокаПериода, СтрДлина(СтрокаПериода) - 5));
			
			Если НРег(ТекМесяц) = "январь" Тогда
				ТекМесяцЧисло = 1;
			ИначеЕсли НРег(ТекМесяц) = "февраль" Тогда
				ТекМесяцЧисло = 2;
			ИначеЕсли НРег(ТекМесяц) = "март" Тогда
				ТекМесяцЧисло = 3;
			ИначеЕсли НРег(ТекМесяц) = "апрель" Тогда
				ТекМесяцЧисло = 4;
			ИначеЕсли НРег(ТекМесяц) = "май" Тогда
				ТекМесяцЧисло = 5;
			ИначеЕсли НРег(ТекМесяц) = "июнь" Тогда
				ТекМесяцЧисло = 6;
			ИначеЕсли НРег(ТекМесяц) = "июль" Тогда
				ТекМесяцЧисло = 7;
			ИначеЕсли НРег(ТекМесяц) = "август" Тогда
				ТекМесяцЧисло = 8;
			ИначеЕсли НРег(ТекМесяц) = "сентябрь" Тогда
				ТекМесяцЧисло = 9;
			ИначеЕсли НРег(ТекМесяц) = "октябрь" Тогда
				ТекМесяцЧисло = 10;
			ИначеЕсли НРег(ТекМесяц) = "ноябрь" Тогда
				ТекМесяцЧисло = 11;
			ИначеЕсли НРег(ТекМесяц) = "декабрь" Тогда
				ТекМесяцЧисло = 12;
			КонецЕсли;
			
			ДатаНачалаПериода = Дата(Число(ТекГод), ТекМесяцЧисло, 01);
			ДатаКонцаПериода = КонецМесяца(ДатаНачалаПериода);
		ИначеЕсли Интервал = "Квартал" Тогда
			ТекГод = СокрЛП(Прав(СтрокаПериода, 4));
			НомерКвартала = Лев(СтрокаПериода, 1);
			
			Если НомерКвартала = "1" Тогда
				ТекМесяцЧисло = 1
			ИначеЕсли НомерКвартала = "2" Тогда
				ТекМесяцЧисло = 4
			ИначеЕсли НомерКвартала = "3" Тогда
				ТекМесяцЧисло = 7
			ИначеЕсли НомерКвартала = "4" Тогда
				ТекМесяцЧисло = 10
			КонецЕсли;
			
			ДатаНачалаПериода = Дата(Число(ТекГод), ТекМесяцЧисло, 01);
			ДатаКонцаПериода = КонецКвартала(ДатаНачалаПериода);
		Иначе
			ТекГод = СокрЛП(Лев(СтрокаПериода, 4));
			ДатаНачалаПериода = Дата(Число(ТекГод), 1, 01);
			ДатаКонцаПериода = КонецГода(ДатаНачалаПериода);
		КонецЕсли;
		
		ТекПериод = Новый СтандартныйПериод;
		ТекПериод.ДатаНачала = ДатаНачалаПериода;
		ТекПериод.ДатаОкончания = ДатаКонцаПериода;
	Исключение
		ТекПериод = Неопределено;
	КонецПопытки;

	Возврат ТекПериод;
	
КонецФункции

///////////////////////


// Для Стр_План-Факт

Функция ПолучитьСтруктуруИзРасшифровки(Расшифровка)
	
	РезультатРасшифровки = новый Структура("Задача, ВидОперации");
	ОбъектОтчет = РеквизитФормыВЗначение("Отчет");
	Данные = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	Родители = Данные.Элементы.Получить(Расшифровка).ПолучитьРодителей();
	
	Если Родители.Количество() >= 1 Тогда
		Поля = Родители[0].ПолучитьПоля();
		ПолеЗадача = Поля.Найти("Задача");
		РезультатРасшифровки.Задача = ?(ПолеЗадача = Неопределено, Справочники.Номенклатура.ПустаяСсылка(), ПолеЗадача.Значение);
	КонецЕсли;
	
	Если Родители.Количество() >= 2 Тогда
		Поля = Родители[1].ПолучитьПоля();
		ПолеВидОперации = Поля.Найти("ВидОперации");
		РезультатРасшифровки.ВидОперации = ПолеВидОперации.Значение;
	КонецЕсли;
	
	Возврат РезультатРасшифровки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПечатьРасшифровкаСтрПлана(ТабДок, КонецПериода, Объект, Задача, ВидОперации)
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Стр_ПланПоОбъекту.Регистратор КАК Документ,
	               |	Стр_ПланПоОбъекту.Задача,
	               |	Стр_ПланПоОбъекту.Объем,
	               |	Стр_ПланПоОбъекту.Сумма,
	               |	ВЫБОР
	               |		КОГДА Стр_ПланПоОбъекту.Объем <> 0
	               |			ТОГДА Стр_ПланПоОбъекту.Сумма / Стр_ПланПоОбъекту.Объем
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Цена
	               |ИЗ
	               |	РегистрНакопления.Стр_ПланПоОбъекту КАК Стр_ПланПоОбъекту
	               |ГДЕ
	               |	Стр_ПланПоОбъекту.Период <= &КонецПериода
	               |	И Стр_ПланПоОбъекту.Объект = &Объект
	               |	И Стр_ПланПоОбъекту.Задача В ИЕРАРХИИ(&Задача)
	               |	И Стр_ПланПоОбъекту.ВидОперации = &ВидОперации";
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("Объект",       Объект);
	Запрос.УстановитьПараметр("Задача",       Задача);
	Запрос.УстановитьПараметр("ВидОперации",  ВидОперации);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Макет = Отчеты.Стр_ПланФакт.ПолучитьМакет("РасшифровкаПлана");
	ОбластьШапка  = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтроки = Макет.ПолучитьОбласть("Строки");
	
	ОбластьШапка.Параметры.Объект = Объект;
	ОбластьШапка.Параметры.ВидОперации = ВидОперации;
	ТабДок.Вывести(ОбластьШапка);
	
	Пока Выборка.Следующий() Цикл
		ОбластьСтроки.Параметры.Заполнить(Выборка);
		ТабДок.Вывести(ОбластьСтроки);
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции	
//////////////////////

// для ГД_ПланФактИзм

&НаСервере
Функция ПараметрыРасшифровкиВНХ(Расшифровка)
	
	ОбъектОтчет = РеквизитФормыВЗначение("Отчет");
	Возврат ОбъектОтчет.ПолучитьСтруктуруРасшифровки(Отчет, Расшифровка, ДанныеРасшифровки);
	
КонецФункции

&НаСервере
Функция ПараметрыРасшифровки(Расшифровка)
	
	ОбъектОтчет = РеквизитФормыВЗначение("Отчет");
	ДР = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	Эл = ДР.Элементы.Получить(Расшифровка);
	ИмяПоля = Эл.ПолучитьПоля()[0].Поле;   
	Строка = Эл.ПолучитьРодителей()[0];
	Статья = Строка.ПолучитьПоля()[0].Значение;
	ВидДеятельности = Строка.ПолучитьРодителей()[0].ПолучитьРодителей()[0].ПолучитьПоля()[0].Значение;
	Если ТипЗнч(ВидДеятельности) = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств")  Тогда
		ВидДеятельности = ""
	КонецЕсли;
	
	ПериодОтчета = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Значение;
	ДатаНачалаОтчета = ПериодОтчета.ДатаНачала;
	ДатаКонцаОтчета = ПериодОтчета.ДатаОкончания;
	
	ДенежныеСчета = Новый Массив;
	Предприятие = Новый Массив;
	Организации = Неопределено;
	РасшифровкаПоОдномуПредприятию = Ложь;
	
	Если ИмяПоля = "План" ИЛИ ИмяПоля = "ПланМес"  ИЛИ ИмяПоля = "ПланКорр" ИЛИ ИмяПоля = "Факт" ИЛИ ИмяПоля = "ИтогПланСтКорр" ИЛИ ИмяПоля = "ИтогПланСтМес" ИЛИ ИмяПоля = "ИтогПланСт" ИЛИ ИмяПоля = "ИтогФактСт"   Тогда
		Попытка
			Столбец = Эл.ПолучитьРодителей()[1];
			Подразделение_Предприятие = Столбец.ПолучитьПоля()[0].Значение;
			//подразделение
			Если ТипЗнч(Подразделение_Предприятие.ссылка) = Тип("СправочникСсылка.СтруктураПредприятия")  Тогда
				Подразделение = Подразделение_Предприятие;
				Предприятие.Добавить(Подразделение.Владелец);
			КонецЕсли; 
			//предприятие
			Если ТипЗнч(Подразделение_Предприятие.ссылка) = Тип("СправочникСсылка.Предприятия")  Тогда
				Предприятие.Добавить(Подразделение_Предприятие);
				Подразделение = Ложь;
			КонецЕсли;
			
			//организации
			Если ТипЗнч(Подразделение_Предприятие.ссылка) = Тип("СправочникСсылка.Организации")  Тогда
				Организации = Подразделение_Предприятие;
				Подразделение = Ложь;
				Подразделение_Предприятие = Неопределено;
				Предприятие = БюджетныйНаСервере.ПолучитьПредприятия();
			КонецЕсли; 
			
			РасшифровкаПоОдномуПредприятию = Истина;
		Исключение
			// итоги
			Подразделение_Предприятие = Неопределено;
			
			// 28.01.13
			Предприятие = БюджетныйНаСервере.ПолучитьПредприятия();
			КолЭлементов = Предприятие.Количество();
			
			Для ОбрИнд = 1 По КолЭлементов Цикл
				Если ЗначениеЗаполнено(Предприятие[КолЭлементов - ОбрИнд]) = Ложь Тогда 
					Предприятие.Удалить(Предприятие.Найти(Предприятие[КолЭлементов - ОбрИнд]))
				КонецЕсли;					
			КонецЦикла;
			
			Предприятие.Добавить(Справочники.Предприятия.ПустаяСсылка());
			Подразделение = Ложь;
			
		КонецПопытки;	
		
		// 28.01.13 добавляем отбор по предприятию в структуру расшифровки
		ОтборПредприятий = Неопределено;
		ПодразделенияДляАО = Неопределено;
		
		Для Каждого ЭлементОтбора Из ОбъектОтчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
			
			Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.Использование И (ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.Предприятия") ИЛИ (ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений") И ЭлементОтбора.ПравоеЗначение.Количество() И ТипЗнч(ЭлементОтбора.ПравоеЗначение[0].Значение) = Тип("СправочникСсылка.Предприятия"))) Тогда
				ОтборПредприятий = ЭлементОтбора;
			КонецЕсли;
			
			Если ТипЗнч(ЭлементОтбора) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И Строка(ЭлементОтбора.Параметр) = "ПодразделенияДляАО" Тогда
				ПодразделенияДляАО = ЭлементОтбора.Значение;
			КонецЕсли;
			
			Если ТипЗнч(ЭлементОтбора) = Тип("ОтборКомпоновкиДанных") Тогда
				
				Если ОтборПредприятий = Неопределено Тогда 
					
					Для Каждого ЭлементЭлементаОтбора Из ЭлементОтбора.Элементы Цикл
						
						Если ЭлементЭлементаОтбора.Использование И (ТипЗнч(ЭлементЭлементаОтбора.ПравоеЗначение) = Тип("СправочникСсылка.Предприятия") ИЛИ (ТипЗнч(ЭлементЭлементаОтбора.ПравоеЗначение) = Тип("СписокЗначений") И ЭлементЭлементаОтбора.ПравоеЗначение.Количество() И ТипЗнч(ЭлементЭлементаОтбора.ПравоеЗначение[0].Значение) = Тип("СправочникСсылка.Предприятия"))) Тогда
							ОтборПредприятий = ЭлементЭлементаОтбора;
							Прервать;
						КонецЕсли;	
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	
		
		Если ОтборПредприятий <> Неопределено И Не РасшифровкаПоОдномуПредприятию Тогда
			//Предприятие.Очистить();
			
			Если ТипЗнч(ОтборПредприятий.ПравоеЗначение) = Тип("СправочникСсылка.Предприятия") Тогда
				Предприятие.Добавить(ОтборПредприятий.ПравоеЗначение);
			ИначеЕсли ТипЗнч(ОтборПредприятий.ПравоеЗначение) = Тип("СписокЗначений") Тогда
				
				Для Каждого ТекЭлемент Из ОтборПредприятий.ПравоеЗначение Цикл
					Предприятие.Добавить(ТекЭлемент.Значение);
				КонецЦикла;
				
			КонецЕсли;

		КонецЕсли;
		
		Если ИмяПоля = "Факт" ИЛИ ИмяПоля = "ИтогФактСт"  Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Учетный.Ссылка КАК Ссылка
			|ИЗ
			|	ПланСчетов.Учетный КАК Учетный
			|ГДЕ
			|	Учетный.ДенежныйСчет = ИСТИНА
			|	ИЛИ Учетный.Ссылка В ИЕРАРХИИ(&Ссылка)";
			
			
			ИерархияСчетов = Новый Массив;
			ИерархияСчетов.Добавить(ПланыСчетов.Учетный.Счет5501());
			ИерархияСчетов.Добавить(ПланыСчетов.Учетный.Счет50());
			ИерархияСчетов.Добавить(ПланыСчетов.Учетный.Счет51());
			Запрос.УстановитьПараметр("Ссылка", ИерархияСчетов);
			
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				ДенежныеСчета.Добавить(Выборка.Ссылка);			
			КонецЦикла;
			
			
			//ДенежныеСчета.Добавить(ПланыСчетов.Учетный.Счет5001());
			//ДенежныеСчета.Добавить(ПланыСчетов.Учетный.Счет5002());
			//ДенежныеСчета.Добавить(ПланыСчетов.Учетный.Счет5101());
			//ДенежныеСчета.Добавить(ПланыСчетов.Учетный.Счет5102());
			//ДенежныеСчета.Добавить(ПланыСчетов.Учетный.ЛицевыеСчета);
			//ДенежныеСчета.Добавить(ПланыСчетов.Учетный.ЛицевыеСчетаВал);
			//ДенежныеСчета.Добавить(ПланыСчетов.Учетный.ДепозитныеСчета);
			//ДенежныеСчета.Добавить(ПланыСчетов.Учетный._51_10);
			//ДенежныеСчета.Добавить(ПланыСчетов.Учетный.Счет5501());
			//ДенежныеСчета.Добавить(ПланыСчетов.Учетный.КраткосрочныеКредиты);
			//ДенежныеСчета.Добавить(ПланыСчетов.Учетный.ВиртуальныйРасчетныйСчет);
			
			Сценарий1 = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);
			
		Иначе
			
			ДенежныеСчета.Добавить(ПланыСчетов.Учетный.Счет5001());
			ДенежныеСчета.Добавить(ПланыСчетов.Учетный.Счет5101());	
			
			Сценарий1 = Новый Массив;
			
			Если ИмяПоля = "План" ИЛИ ИмяПоля = "ИтогПланСт" Тогда
				
				АктуальныеСцКВ = БюджетныйНаСервере.СписокАктуальныхСценариев(ДатаНачалаОтчета,, "Кв");
				
				Для Каждого Элемент Из АктуальныеСцКВ Цикл
					Сценарий1.Добавить(Элемент);
				КонецЦикла;
				
			КонецЕсли; 
			
			Если ИмяПоля = "ПланМес" ИЛИ ИмяПоля = "ИтогПланСтМес" Тогда
				
				АктуальныеСцМес = БюджетныйНаСервере.СписокАктуальныхСценариев(ДатаНачалаОтчета, ДатаКонцаОтчета, "Мес");
				
				Для Каждого Элемент Из АктуальныеСцМес Цикл
					Сценарий1.Добавить(Элемент);
				КонецЦикла;
				
			КонецЕсли; 
			
			Если ИмяПоля = "ПланКорр" ИЛИ ИмяПоля = "ИтогПланСтКорр" Тогда
								
				АктуальныеСцМес = БюджетныйНаСервере.СписокАктуальныхСценариев(ДатаНачалаОтчета, ДатаКонцаОтчета, "Мес");
				
				Для Каждого Элемент Из АктуальныеСцМес Цикл
					Сценарий1.Добавить(Элемент);
				КонецЦикла;
				
				Сценарий1.Добавить(Справочники.СценарииПланирования.ПланПоСЗ);
				
			КонецЕсли;    
			
		КонецЕсли; 
		
		
	КонецЕсли;
	
	СтруктураРасшифровки = Новый Структура;
	
	СтруктураРасшифровки.Вставить("Отчет", "Отчеты.Д_Расшифровка");
	СтруктураРасшифровки.Вставить("Счет", ДенежныеСчета);
	СтруктураРасшифровки.Вставить("Сценарий1", Сценарий1);
	
	// 07.02.13
	Если Не ЗначениеЗаполнено(Статья) Или Статья = Справочники.СтатьиДвиженияДенежныхСредств.Неклассифицировано Тогда
		Статья = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	КонецЕсли;	
	
	СтруктураРасшифровки.Вставить("Субконто1", Статья);
	
	//Если Не ОбщегоНазначенияПовтИсп.ЭтоБазаСпирт() Тогда 
	
	Если ЗначениеЗаполнено(Организации) Тогда
		СтруктураРасшифровки.Вставить("Субконто2", Организации);
	КонецЕсли;
		
	СтруктураРасшифровки.Вставить("Дата1", 	ДатаНачалаОтчета);
	СтруктураРасшифровки.Вставить("Дата2", ДатаКонцаОтчета);
	СтруктураРасшифровки.Вставить("ВидимостьШапки", 0);
	СтруктураРасшифровки.Вставить("Предприятие", Предприятие);
	СтруктураРасшифровки.Вставить("Подразделение", Подразделение);
	
	//28.01.13
	СтруктураРасшифровки.Вставить("ОтборПредприятий", ОтборПредприятий);
	СтруктураРасшифровки.Вставить("ПодразделенияДляАО", ПодразделенияДляАО);
	СтруктураРасшифровки.Вставить("РасшифровкаПоОдномуПредприятию", РасшифровкаПоОдномуПредприятию);
	
	Возврат СтруктураРасшифровки;
	
КонецФункции

////////////////////////////////////

// для Стр_ФактПоЗадачам

&НаСервере
Функция ПолучитьПараметрыРасшифровкиОтчетаСтр_ФактПоЗадачам(Расшифровка)
	
	ОбъектОтчет = РеквизитФормыВЗначение("Отчет");
	ДР = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	Эл = ДР.Элементы.Получить(Расшифровка);
	ИмяПоля = Эл.ПолучитьПоля()[0].Поле;   
	Строка = Эл.ПолучитьРодителей()[0];
	
	ЗадачаСтр = Строка.ПолучитьПоля()[0].Значение;
	ОбъектСтр = ПолучитьТекущийОбъектСтроительства(Строка);
	//ОбъектСтр = Строка.ПолучитьРодителей()[0].ПолучитьРодителей()[0].ПолучитьПоля()[0].Значение;
	//  Строка.ПолучитьРодителей()[0].ПолучитьРодителей()[0].ПолучитьРодителей()[0].ПолучитьРодителей()[0].ПолучитьПоля()
	
	Если ИмяПоля = "Материалы" Тогда
		ВидЗатратСтр = Перечисления.ВидыЗатрат.Материалы
	ИначеЕсли ИмяПоля = "Зарплата" Тогда
		ВидЗатратСтр = Перечисления.ВидыЗатрат.ОплатаТруда;
	ИначеЕсли ИмяПоля = "Услуги" Тогда
		ВидЗатратСтр = Перечисления.ВидыЗатрат.Услуги
	Иначе
		ВидЗатратСтр = Перечисления.ВидыЗатрат.ПустаяСсылка()
	КонецЕсли;
	
	ПериодОтчета = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Значение;
	ДатаНачалаОтчета = ПериодОтчета.ДатаНачала;
	ДатаКонцаОтчета = ПериодОтчета.ДатаОкончания;
		
	СтруктураРасшифровки = Новый Структура;
	СтруктураРасшифровки.Вставить("Отчет", "Отчеты.Стр_РасшифровкаФакта");
	СтруктураРасшифровки.Вставить("НачалоПериода", ДатаНачалаОтчета);
	СтруктураРасшифровки.Вставить("КонецПериода", ДатаКонцаОтчета);
	СтруктураРасшифровки.Вставить("ВидЗатрат", ВидЗатратСтр);	
	СтруктураРасшифровки.Вставить("Задача", ЗадачаСтр);
	СтруктураРасшифровки.Вставить("Объект", ОбъектСтр);
		
	Возврат СтруктураРасшифровки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТекущийОбъектСтроительства(Эл)
	
	ТекОбъект = Неопределено;
		
	Пока Не ТипЗнч(ТекОбъект) = Тип("СправочникСсылка.Номенклатура") Цикл
		
		Попытка 
			Эл.ПолучитьПоля();
			ТекОбъект = Эл.ПолучитьПоля()[0].Значение;
			Если Не ТипЗнч(ТекОбъект) = Тип("СправочникСсылка.Номенклатура") Тогда
				Попытка
					Эл.ПолучитьРодителей();
					Эл = Эл.ПолучитьРодителей()[0];
				Исключение
					Прервать;
				КонецПопытки				
			КонецЕсли;
		Исключение
			Попытка
				Эл.ПолучитьРодителей();
				Эл = Эл.ПолучитьРодителей()[0];
			Исключение
				Прервать;
			КонецПопытки
		КонецПопытки;
		
	КонецЦикла;
		
	Возврат ТекОбъект;
	
КонецФункции

///////////////////////////////////

//Для ПП_ОстаткиПоБанковскимСчетам
&НаСервере
Функция ПараметрыДляРасшифровки_ОстаткиПоБанковскимСчетам(Расшифровка)
	ДР = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	Эл = ДР.Элементы.Получить(Расшифровка);
	Строка = Эл.ПолучитьРодителей()[0];
	Счет = Строка.ПолучитьПоля().Найти("Счет");
	Если НЕ Счет = Неопределено Тогда
		Возврат Строка.ПолучитьПоля().Найти("Счет").Значение;
	Иначе
		Возврат "Пусто"
	КонецЕсли;
КонецФункции

////////////////////////////////////

// для Д_ФинансовыйРезультат
&НаСервере
Процедура ПриЗагрузкеВариантаНаСервере(Настройки)
	//Если ТипЗНЧ(ЭтаФорма.ТекущийЭлемент) = ТИП("КнопкаФормы") Тогда //Сож+
	//	ОбщегоНазначения.ДействияПриЗагрузкеВариантаНаСервере(Отчет,РеквизитФормыВЗначение("Отчет").ЭтотОбъект.Метаданные().Имя,ЭтаФорма.КлючТекущегоВарианта);
	//ИначеЕсли ЭтаФорма.Параметры.Расшифровка = Неопределено тогда
	//	ОбщегоНазначения.ДействияПриЗагрузкеВариантаНаСервере(Отчет,РеквизитФормыВЗначение("Отчет").ЭтотОбъект.Метаданные().Имя,ЭтаФорма.КлючТекущегоВарианта);
	//	//ЭтаФорма.ЗаменитьПользовательскиеНастройки = истина;
	//КонецЕсли;
	
	//ПолучитьИзВременногоХранилища(КлючТекущегоВарианта);
	
	//НаименованиеТекущегоВарианта = КлючТекущегоВарианта;
	ПараметрТекущийВариант = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ТекущийВариант");
	Если Не ПараметрТекущийВариант = Неопределено Тогда
		ПараметрТекущийВариант.Значение = КлючТекущегоВарианта;
	КонецЕсли;
	
	ПараметрВыводаОформление = СтандартныеОтчетыКлиентСервер.ПолучитьПараметрВывода(Отчет.КомпоновщикНастроек.Настройки, "МакетОформления");
	Если Не ПараметрВыводаОформление.Использование Тогда
		СтандартныеОтчетыКлиентСервер.УстановитьПараметрВывода(Отчет.КомпоновщикНастроек.Настройки, "МакетОформления", "МакетКрасивый");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвойстваТабДока()
	
	Если ЭтаФорма.ИмяФормы = "Отчет.Д_ФинРез.Форма" Или ЭтаФорма.ИмяФормы = "ВнешнийОтчет.Д_ФинРез.Форма" Тогда
		Результат.ФиксацияСлева = 1;
	КонецЕсли;
	
КонецПроцедуры

// фоновое формирование финансового результата {
&НаСервере
Функция ЗапускФормированияОтчетаСервер()
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	МетаданныеОтчета = ОтчетОбъект.Метаданные();
	ИмяОтчета = МетаданныеОтчета.Имя;
	
	Если НЕ Метаданные.Отчеты.Содержит(МетаданныеОтчета) Тогда // если отчет внешний, то выполняем компоновку стандартно
		СкомпоноватьРезультат();
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПустаяСтрока(ДанныеРасшифровки) Тогда
		ДанныеРасшифровки = ПоместитьВоВременноеХранилище(Новый ДанныеРасшифровкиКомпоновкиДанных, УникальныйИдентификатор);
	КонецЕсли;
	
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("ИмяОтчета", ИмяОтчета);
	ПараметрыФормирования.Вставить("АдресДанныхРасшифровки", ДанныеРасшифровки);
	ПараметрыФормирования.Вставить("НастройкиКомпоновщика", Отчет.КомпоновщикНастроек.ПолучитьНастройки());
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(СтрШаблон("Отчеты.%1.ВыполнитьКомпоновкуВФоне", ИмяОтчета), ПараметрыФормирования, НастройкиЗапуска);
	
КонецФункции

&НаКлиенте
Процедура ЗавершениеФоновогоФормированияОтчетаКлиент(РезультатФоновойЗадачи, ДополнительныеПараметры) Экспорт
	
	Если РезультатФоновойЗадачи <> Неопределено И РезультатФоновойЗадачи.Статус = "Выполнено" Тогда
		Результат = ПолучитьИзВременногоХранилища(РезультатФоновойЗадачи.АдресРезультата);
		Элементы.Результат.ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
		Элементы.Результат.ОтображениеСостояния.Текст = "";
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
		//Заголовок = СтрЗаменить(Заголовок, " (формируется...)", "");
		//Заголовок = Заголовок + " (формируется...)";
		ПодключитьОбработчикОжидания("ЗавершениеФоновогоФормированияОтчетаКлиент", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыполнениеЗадания()
	
	Попытка
		
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			//Заголовок = СтрЗаменить(Заголовок, " (формируется...)", "");
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
			Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
			//Заголовок = СтрЗаменить(Заголовок, " (формируется...)", "");
			//Заголовок = Заголовок + " (формируется...)";
			ПодключитьОбработчикОжидания("ПроверитьВыполнениеЗадания", 0.1, Истина);
		КонецЕсли;
		
	Исключение
		//Заголовок = СтрЗаменить(Заголовок, " (формируется...)", "");
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

//}

///////////////////////


// Для Стр_План-Факт
Функция РасшифровкаФакта(Расшифровка) 
	
	ОбъектОтчет = РеквизитФормыВЗначение("Отчет");
	Данные = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	Поля = Данные.Элементы.Получить(Расшифровка).ПолучитьРодителей()[1].ПолучитьПоля();//Поле Вид операции значение Факт
	ПолеВидОперации = Поля.Найти("ВидОперации");
	Если ПолеВидОперации = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли ПолеВидОперации.Значение = "Факт" Тогда
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции	

Функция ПолучитьЗадачу(Расшифровка)
	
	ОбъектОтчет = РеквизитФормыВЗначение("Отчет");
	Данные = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	Поля = Данные.Элементы.Получить(Расшифровка).ПолучитьРодителей()[0].ПолучитьПоля();
	ПолеЗадача = Поля.Найти("Задача");
	Если ПолеЗадача = Неопределено Тогда
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	Иначе 
		Возврат ПолеЗадача.Значение;
	КонецЕсли;	
	
КонецФункции	

&НаСервере
Процедура ЗаполнитьНастройкамиПоУмолчанию(ЗаполняемыеНастройки) Экспорт
	
	Если ЗаполняемыеНастройки.Свойство("Отбор") Тогда
		Если ЗаполняемыеНастройки.Показатели Тогда
			// Добавление неактивных отборов по субконто в соответствии с выбранным счетом
			ОтборыДляУдаления = Новый Массив;
			Для Каждого ЭлементОтбора Из Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
				Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда 
					Если Найти(ЭлементОтбора.ЛевоеЗначение, "Субконто") > 0 ИЛИ Строка(ЭлементОтбора.ЛевоеЗначение) = "Валюта"
						ИЛИ (Найти(ЭлементОтбора.ЛевоеЗначение, "Подразделение") = 1 И НЕ Отчет.Счет.УчетПоПодразделениям) Тогда
						ОтборыДляУдаления.Добавить(ЭлементОтбора);
					КонецЕсли;
				КонецЕсли;
				Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
					ОтборыДляУдаления.Добавить(ЭлементОтбора);
				КонецЕсли;	
				
			КонецЦикла;
			
			Для Каждого ЭлементОтбора Из ОтборыДляУдаления Цикл
				Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);
			КонецЦикла;
			
			Если Отчет.Счет.Валютный Тогда
				Поле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Валюта"));
				СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(Отчет.КомпоновщикНастроек, "Валюта", Поле.Тип.ПривестиЗначение(Неопределено), , Ложь); 
			КонецЕсли;
			
			Если Не Отчет.Счет.УчетПоПодразделениям Тогда
				Подразделение = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//заполняем пользовательские отборы. Добавил 02.11.12. d11
	//УЧ_Сервер.ЗаполнитьОтборыВСтандартныхОтчетах(Отчет, КоличествоСубконто)	
	
	
КонецПроцедуры

// Для расшифровки материального отчета
&НаСервере
Функция ПолучитьСубконто1ДляРасшифровкиМатериальногоОтчета(Расшифровка)
	
	Субконто1_Р = Неопределено;
	Попытка
		Субконто1_Р = ПолучитьИзВременногоХранилища(ДанныеРасшифровки).Элементы.Получить(Расшифровка).ПолучитьРодителей()[0].ПолучитьПоля()[1].Значение;
	Исключение
	КонецПопытки;
		
	Возврат Субконто1_Р;
		
КонецФункции

//Уровни группировок

&НаСервере
Процедура СоздатьКнопкиУровнейГруппировок()
	
	Для Счетчик = 1 По 9 Цикл
		
		НоваяКоманда = Команды.Добавить("Уровень" + Строка(Счетчик));
		НоваяКоманда.Заголовок = "Уровень " + Строка(Счетчик);
		НоваяКоманда.Действие = "УровеньГруппировок";
		
		НоваяКнопка = Элементы.Добавить("КнопкаУровень" + Строка(Счетчик), Тип("КнопкаФормы"), Элементы.ПодменюУровеньГруппировок);
		НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		НоваяКнопка.ИмяКоманды = НоваяКоманда.Имя;
		НоваяКнопка.Видимость = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьКнопокУровней()
	
	КоличествоУровней = Мин(Результат.КоличествоУровнейГруппировокСтрок(), 9); //ограничим 9-ю уровнями
	Для Каждого ТекЭлемент Из Элементы.ПодменюУровеньГруппировок.ПодчиненныеЭлементы Цикл
		ТекЭлемент.Видимость = Ложь;
	КонецЦикла;
	
	Если КоличествоУровней > 0 Тогда
		Для Счетчик = 1 По КоличествоУровней Цикл
			Элементы["КнопкаУровень" + Строка(Счетчик)].Видимость = Истина;
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УровеньГруппировок(Команда)
	
	ВыбранныйУровень = Число(Прав(Команда.Имя, 1));
	Результат.ПоказатьУровеньГруппировокСтрок(ВыбранныйУровень - 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВариант(Команда)
	СтруктураПараметров = Новый Структура("КлючОбъекта, КлючТекущихНастроек, СтандартныеНастройки");
	ОткрытьФорму("ХранилищеНастроек.ХранилищеВариантовОтчетов.ФормаЗагрузки",,ЭтаФорма);
КонецПроцедуры

// перенос польсовательских настроек между вариантами отчета
&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	
	//Если НЕ ЭтаФорма.Параметры.ЭтоРасшифровка тогда
	//Если ЭтаФорма.ЗаменитьПользовательскиеНастройки тогда
	//	ОбщегоНазначения.ДействияПриЗагрузкеПользовательскихНастроекНаСервере(Отчет,РеквизитФормыВЗначение("Отчет").ЭтотОбъект.Метаданные().Имя);
	//	ЭтаФорма.ЗаменитьПользовательскиеНастройки = ложь;
	//иначе  // иначе эти настройки не загрузятся при следующем изменеии варианта
	//	ОбщегоНазначения.ДействияПриСохраненииПользовательскихНастроекНаСервере(Отчет,РеквизитФормыВЗначение("Отчет").ЭтотОбъект.Метаданные().Имя,Настройки);
	//КонецЕсли;
	
	Если Истина Тогда
		
		ЭлементЭквВал = Новый ПараметрКомпоновкиДанных("ЭквивалентнаяВалюта");
		
		Для каждого ТекЭл Из Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
			Если ТипЗнч(ТекЭл) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И ТекЭл.Параметр = ЭлементЭквВал Тогда
				ТекЭл.Использование = Ложь;
				ТекЭл.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			КонецЕсли; 
		КонецЦикла;
		
	КонецЕсли;
	
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	//ОбщегоНазначения.ДействияПриСохраненииПользовательскихНастроекНаСервере(Отчет,РеквизитФормыВЗначение("Отчет").ЭтотОбъект.Метаданные().Имя,Настройки);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьИСохранить(Команда)
	
	ДиалогВыбораФайла =	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Фильтр		 = "Файл Excel (*.xlsx)|*.xlsx*";
	ДиалогВыбораФайла.Расширение	 = "xlsx";
	ДиалогВыбораФайла.Заголовок		 = "Выберите файл";
	ДиалогВыбораФайла.ПолноеИмяФайла = ПутьКФайлу;
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ПутьКФайлу = ДиалогВыбораФайла.ПолноеИмяФайла;
	КонецЕсли;
	
	ТабДок = Новый ТабличныйДокумент;
	
	СтруктураРезультата = СформироватьИСохранитьНаСервере();
	МассивРезультата = СтруктураРезультата.ТекМассив;
	МассивИменКолонок = СтруктураРезультата.МассивИменКолонок;
	
	//ТабДок.Записать(ПутьКФайлу, ТипФайлаТабличногоДокумента.XLSX);
	
	//Попытка
	//	Эксель = Новый COMОбъект("Excel.Application");
	//Исключение
	//	Сообщить(ОписаниеОшибки() + " Программа Exсel не установлена на данном компьютере!");
	//	Возврат;
	//КонецПопытки;
	//
	//Книга = Эксель.WorkBooks.Add();
	//
	//Лист = Книга.WorkSheets(1);
	//Лист = Книга.Sheets.Add();
	//ПервыйОбход = Истина;
	//СтруктураКолонок = Новый Структура;
	//СчетчикСтрок = 2;
	//Для Каждого ЭлементМассива Из МассивРезультата Цикл
	//	СчетчикКолонок = 1;
	//	Для Каждого ЭлементСтруктуры Из ЭлементМассива Цикл
	//		Если ПервыйОбход Тогда
	//			Лист.Cells(1,СчетчикКолонок).Value = ЭлементСтруктуры.Ключ;
	//		КонецЕсли;
	//		Лист.Cells(СчетчикСтрок,СчетчикКолонок).Value = Строка(ЭлементСтруктуры.Значение);
	//		СчетчикКолонок = СчетчикКолонок + 1;
	//	КонецЦикла;
	//	СчетчикСтрок = СчетчикСтрок + 1;
	//	ПервыйОбход = Ложь;
	//КонецЦикла;
	//
	//Попытка
	//	Книга.SaveAs(ПутьКФайлу);
	//Исключение
	//	Сообщить(ОписаниеОшибки()+" Файл не сохранен!");
	//	Возврат;
	//КонецПопытки;
	
	Connection =Новый COMОбъект("ADODB.Connection");
	
	СтрокаПодключения = "
	|Provider=Microsoft.ACE.OLEDB.12.0;
	|Data Source="+ПутьКФайлу+";
	|Extended Properties=""Excel 12.0 Xml;HDR=No;"";";
	
	//подключение к источнику данных
	Попытка
		Connection.Open(СтрокаПодключения);
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	// Создаем объект ADOX.Catalog
	Catalog = Новый COMОбъект("ADOX.Catalog");
	Catalog.ActiveConnection = Connection;
	
	ТекстЗапроса = "INSERT INTO [Table] ";//(";
	
	// Создаем таблицу и добавляем в неё столбцы
	Table = Новый COMОбъект("ADOX.Table");
	Table.Name = "Table";
	ТекстЗапросаКолонки = "";
	Для Каждого Колонка Из МассивИменКолонок Цикл
		ТекстЗапросаКолонки = ТекстЗапросаКолонки + "`" + Колонка + "`,";
		Column = Новый COMОбъект("ADOX.Column");
		Column.Name = Колонка;
		Column.Type = 202; //5 - число, 202 - строка, 7 - дата;
		Table.Columns.Append(Column);
	КонецЦикла;
	// Присоединяем таблицу
	Catalog.Tables.Append(Table);
	Table = Неопределено;
	Catalog = Неопределено;
	
	ТекстЗапросаКолонки = Лев(ТекстЗапросаКолонки, СтрДлина(ТекстЗапросаКолонки) - 1);
	
	ТекстЗапроса = ТекстЗапроса + " VALUES ";//+ ТекстЗапросаКолонки + ") VALUES ";
	
	//Создание и выполнение запроса к файлу
	Command = Новый COMОбъект("ADODB.Command");
	Command.ActiveConnection = Connection;       
	Command.CommandType = 1;
	
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	
	ТекстЗапросаЗначения = "";
	Для Каждого ЭлементМассива Из МассивРезультата Цикл
		ТекстЗапросаЗначения = " (";
		Для Каждого ЭлементСтруктуры Из ЭлементМассива Цикл
			ТекстЗапросаЗначения = ТекстЗапросаЗначения + "'" + Строка(СтрЗаменить(ЭлементСтруктуры.Значение, "'", "''")) + "',";
		КонецЦикла;
		ТекстЗапросаЗначения = Лев(ТекстЗапросаЗначения, СтрДлина(ТекстЗапросаЗначения) - 1);
		ТекстЗапросаЗначения = ТекстЗапросаЗначения + ")";//," + Символы.ПС;
		Command.CommandText = ТекстЗапроса + ТекстЗапросаЗначения;
		Попытка         
			RecordSet = Command.Execute();
		Исключение 
			Сообщить(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		//Прервать;
	КонецЦикла;
	//ТекстЗапросаЗначения = Лев(ТекстЗапросаЗначения, СтрДлина(ТекстЗапросаЗначения) - 2);
	//
	//ТекстЗапроса = ТекстЗапроса + ТекстЗапросаЗначения;
	//	
	//RecordSet = Новый COMОбъект("ADODB.RecordSet");
	//
	//Попытка         
	//	RecordSet = Command.Execute();
	//Исключение 
	//	Сообщить(ОписаниеОшибки());
	//	Возврат;
	//КонецПопытки;
	
	// Закрываем соединение
	Command = Неопределено;
	Connection.Close();
	Connection = Неопределено;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Отчет сформирован и сохранен!";
	Сообщение.Сообщить();
	
КонецПроцедуры

Функция СформироватьИСохранитьНаСервере()
	
	ТаблицаРезультата = Новый ТаблицаЗначений;
	
	СКД = РеквизитФормыВЗначение("Отчет").ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");	
	НастройкиКомпоновщика = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, НастройкиКомпоновщика, ДанныеРасшифровки, Неопределено, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультата);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
	Возврат ТабЗначВМассив(ТаблицаРезультата);
	
КонецФункции

Функция ТабЗначВМассив(ТаблицаЗначений)
	
    ТекМассив = Новый Массив;
    Для Каждого СтрокаТаблицы из ТаблицаЗначений Цикл
        ТекСтруктура = Новый Структура;
        Счетчик = 0;
        Для Каждого СтрокаСтруктуры из СтрокаТаблицы Цикл
            Если НЕ ТипЗнч(СтрокаСтруктуры) = Тип(ТаблицаЗначений) тогда
                ТекСтруктура.Вставить(ТаблицаЗначений.Колонки[Счетчик].Имя,СтрокаТаблицы[Счетчик]);
            Иначе
                ТекСтруктура.Вставить(ТаблицаЗначений.Колонки[Счетчик].Имя,ТабЗначВМассив(СтрокаСтруктуры));
            КонецЕсли;
            Счетчик = Счетчик + 1;
        КонецЦикла;
        ТекМассив.Добавить(ТекСтруктура);
    КонецЦикла;
    
    КолонкиТЗ = ТаблицаЗначений.Колонки;
    МассивИменКолонок = Новый Массив;
    Для Каждого Колонка Из КолонкиТЗ Цикл
   		МассивИменКолонок.Добавить(Колонка.Имя);
   	КонецЦикла; 
    
    СтруктураВозврата = Новый Структура;
    СтруктураВозврата.Вставить("ТекМассив", ТекМассив);
    СтруктураВозврата.Вставить("МассивИменКолонок", МассивИменКолонок);
    
    Возврат СтруктураВозврата;
    
КонецФункции
//Сож+
&НаКлиенте
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	Если ЭтотОбъект.ИмяФормы = "Отчет.ОтчетПоДебиторскойЗадолженности.Форма" Тогда 
    МРасшифровываемых = Новый Массив();
    МРасшифровываемых.Добавить("Контрагент");
 	МРасшифровываемых.Добавить("Договор");
	МРасшифровываемых.Добавить("Организация");
	МРасшифровываемых.Добавить("Предприятие");

//Полученное значение 
    РасшифрЗначение = ПолучитьРасшифровкуНаСервере(Расшифровка, МРасшифровываемых); 

	Если РасшифрЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
    СтандартнаяОбработка = Ложь;
       	
	ПараметрыРасшифровки = ПролучитьДанныеРасшифровки(Расшифровка, ДополнительныеПараметры);

// Прописываем доступные действия. Если какое то действие не указать, оно не будет доступно пользователю

    ОбрРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(Отчет));

    ВыпДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.нет;
    ПараметрВыполненногоДействия = Неопределено;
    ДоступДействия = Новый Массив;
	ДоступДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
	//ДоступДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Отфильтровать);
	//ДоступДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Оформить);
	//ДоступДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать);
	//ДоступДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Сгруппировать);
	//ДоступДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Упорядочить);

	 ДопПункты = Новый СписокЗначений;
	ОбщСтрока = "Сформировать заявку на оплату " + """" + Строка(ТипЗнч(РасшифрЗначение)) + " = " + РасшифрЗначение + """";
	ДопПункты.Добавить( 1, ОбщСтрока);
   	ОбрРасшифровки.ВыбратьДействие(Расшифровка, ВыпДействие, ПараметрВыполненногоДействия, ДоступДействия,ДопПункты);
	Если ВыпДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет Тогда
	ИначеЕсли ВыпДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда	
		ОткрытьЗначение(ПараметрВыполненногоДействия);
	Иначе 
		Документ =ПолучитьФорму("Документ.Д_ЗаявкаНаФинансирование.ФормаОбъекта");
		Документ.Объект.Дата = ТекущаяДата();
		Документ.Объект.Предприятие = ПараметрыРасшифровки.Предприятие;
		Документ.Объект.Организация = ПараметрыРасшифровки.Организация;
		Документ.Объект.Контрагент =  ПараметрыРасшифровки.Контрагент;
		Документ.Объект.Договор =  ПараметрыРасшифровки.Договор;
		Документ.открыть();
	КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПролучитьДанныеРасшифровки(Расшифровка, ДополнительныеПараметры)
	
	ПараметрыРасшифровки = Новый Структура;
	
	ПолученныеДанные = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	ЭлементРасшифровки = ПолученныеДанные.Элементы[Расшифровка].ПолучитьПоля()[0];
	ПараметрыРасшифровки.Вставить("Договор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	ПараметрыРасшифровки.Вставить("Организация", Справочники.Организации.ПустаяСсылка());			
	ПараметрыРасшифровки.Вставить("Предприятие", Справочники.Предприятия.ПустаяСсылка());
	ПараметрыРасшифровки.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	
		
	Если ЭлементРасшифровки.Поле = "Контрагент" или ЭлементРасшифровки.Поле = "Договор" или ЭлементРасшифровки.Поле = "Организация" или ЭлементРасшифровки.Поле = "Предприятие" Тогда
		Если ЭлементРасшифровки.Поле = "Контрагент" Тогда
			Контрагент = ПолученныеДанные.Элементы[Расшифровка].ПолучитьРодителей()[0].ПолучитьПоля()[0];
			ПараметрыРасшифровки.Вставить("Контрагент", Контрагент.Значение);
		ИначеЕсли ЭлементРасшифровки.Поле = "Договор" Тогда
			Договор = ПолученныеДанные.Элементы[Расшифровка].ПолучитьРодителей()[0].ПолучитьПоля()[0];
			ПараметрыРасшифровки.Вставить("Договор", Договор.Значение);
			ПараметрыРасшифровки.Вставить("Контрагент", Договор.Значение.Владелец);
			ПараметрыРасшифровки.Вставить("Организация",Договор.Значение.Организация);
		КонецЕсли;		
	КонецЕсли;
		
	НастройкиОтчета = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	ОбъектОтчет = РеквизитФормыВЗначение("Отчет");
	ДР = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	Эл = ДР.Элементы.Получить(Расшифровка);
	ИмяПоля = Эл.ПолучитьПоля()[0].Поле;   
	Строка = Эл.ПолучитьРодителей()[0];
	Попытка
		Если  типЗнч(Строка.ПолучитьРодителей()[0].ПолучитьРодителей()[0].ПолучитьРодителей()[0].ПолучитьРодителей()[0].ПолучитьПоля()[0].Значение) = Тип("СправочникСсылка.Предприятия") Тогда
			ПР =  Строка.ПолучитьРодителей()[0].ПолучитьРодителей()[0].ПолучитьРодителей()[0].ПолучитьРодителей()[0].ПолучитьПоля()[0].Значение;
		ИначеЕсли ТипЗнч(Строка.ПолучитьРодителей()[0].ПолучитьРодителей()[0].ПолучитьРодителей()[0].ПолучитьРодителей()[0].ПолучитьРодителей()[0].ПолучитьРодителей()[0].ПолучитьПоля()[0].Значение)  = Тип("СправочникСсылка.Предприятия") Тогда 
			ПР =  Строка.ПолучитьРодителей()[0].ПолучитьРодителей()[0].ПолучитьРодителей()[0].ПолучитьРодителей()[0].ПолучитьРодителей()[0].ПолучитьРодителей()[0].ПолучитьПоля()[0].Значение;
		КонецЕсли;
	Исключение
	КонецПопытки;
		
	Если ПР <> Неопределено  Тогда
		ПараметрыРасшифровки.Предприятие = ПР;
	КонецЕсли;	
		
	Возврат ПараметрыРасшифровки;
	
КонецФункции
&НаСервере
Функция ПолучитьРасшифровкуНаСервере(Расшифровка, МассивИменРасшифровки, ЭтоГруппа = Ложь)
	Попытка
		Данные = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
		Поля = Данные.Элементы.Получить(Расшифровка).ПолучитьПоля();
		Для Каждого ИмяРасшифровки Из МассивИменРасшифровки Цикл
			ПолеНоменкл = Поля.Найти(ИмяРасшифровки);
			Если Не ПолеНоменкл = Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Возврат ПолеНоменкл.Значение;
	Исключение
	КонецПопытки;
КонецФункции
//Сож-

///////////////////////////////////


&НаСервере
Функция СтруктураРасшифровкиСводныйФинРез(ДанныеРасшифровки, Расшифровка)
	
	ДР = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	Эл = ДР.Элементы.Получить(Расшифровка);
	
	СтруктураВозврата = Новый Структура;
	
	СтруктураВозврата.Вставить("Предприятие", Эл.ПолучитьРодителей()[0].ПолучитьПоля()[0].Значение);
	СтруктураВозврата.Вставить("Период",      Эл.ПолучитьРодителей()[1].ПолучитьПоля()[0].Значение);
	
	ОбъектОтчет = РеквизитФормыВЗначение("Отчет");	
	
	ПользНастройки = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	
	СтруктураВозврата.Вставить("Сценарий1", ПользНастройки.Элементы[0].Значение);
	СтруктураВозврата.Вставить("Сценарий2", ПользНастройки.Элементы[1].Значение);
	СтруктураВозврата.Вставить("Сценарий2Использование", ПользНастройки.Элементы[1].Использование);
	СтруктураВозврата.Вставить("ПериодОтчета", ПользНастройки.Элементы[3].Значение);
	СтруктураВозврата.Вставить("ЭквивалентнаяВалюта", ПользНастройки.Элементы[2].Значение);
	СтруктураВозврата.Вставить("Интервал", ПользНастройки.Элементы[4].Значение);
	СтруктураВозврата.Вставить("ОкруглятьДоЦелого", ПользНастройки.Элементы[5].Значение);
	
	Возврат СтруктураВозврата;
	
КонецФункции	

// для ГД_Источники_Рег_Учетный {
&НаСервере
Функция ПараметрыРасшифровкиГДИсточники(Расшифровка)
	
	СтруктураРасшифровки = Новый Структура;
	
	ДР = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	Эл = ДР.Элементы.Получить(Расшифровка);
	Строка = Эл.ПолучитьРодителей()[0];
	Статья = Строка.ПолучитьПоля()[0].Значение;
	ВидДеятельности = Строка.ПолучитьРодителей()[0].ПолучитьРодителей()[0].ПолучитьПоля()[0].Значение;
	
	Если ТипЗнч(ВидДеятельности) = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств")  Тогда
		ВидДеятельности = ""
	КонецЕсли;
	
	Если Эл.ПолучитьПоля()[0].Поле = "ИтогСумма" Тогда
		Источник = "Итог";
		СтруктураРасшифровки.Вставить("Субконто2", Неопределено);
	Иначе
		Столбец = Эл.ПолучитьРодителей()[1];
		Источник = Столбец.ПолучитьПоля()[0].Значение; 
		СтруктураРасшифровки.Вставить("Субконто2", Источник);
	КонецЕсли;
		
	ВыбПериод = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0];
	ДатаНач = ВыбПериод.Значение.ДатаНачала;
	ДатаКон = ВыбПериод.Значение.ДатаОкончания;
	
	//определяем счета
	ДенежныеСчета = Новый Массив;
	ДенежныеСчета.Добавить(ПланыСчетов.Учетный.Счет50());
	ДенежныеСчета.Добавить(ПланыСчетов.Учетный.Счет51());

	СтруктураРасшифровки.Вставить("Отчет", "Отчеты.Д_Расшифровка");
	СтруктураРасшифровки.Вставить("Счет", ДенежныеСчета);
	СтруктураРасшифровки.Вставить("Сценарий1",Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина));
	СтруктураРасшифровки.Вставить("Субконто1", Статья);
	СтруктураРасшифровки.Вставить("Дата1", ДатаНач);
	СтруктураРасшифровки.Вставить("Дата2", ДатаКон);
	СтруктураРасшифровки.Вставить("ВидимостьШапки", 0);
	
	Если Источник = "Итог" Тогда
		ТекПредприятие = ПараметрыСеанса.ДоступныеПредприятия
	Иначе
		ТекПредприятие = ПолучитьПредприятиеДляРасшифровки(СтруктураРасшифровки);
	КонецЕсли;
	
	СтруктураРасшифровки.Вставить("Предприятие", ТекПредприятие);
			
	//ОбластьДанныеСтолбцы.Параметры.Расшифровка = СтруктураРасшифровки;
	
	Возврат СтруктураРасшифровки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредприятиеДляРасшифровки(СтруктураПараметров)
	
	ЗапросПр = Новый Запрос;
	
	ЗапросПр.УстановитьПараметр("НачДата", СтруктураПараметров.Дата1);
	ЗапросПр.УстановитьПараметр("КонДата", СтруктураПараметров.Дата2);
	ЗапросПр.УстановитьПараметр("Субконто1", СтруктураПараметров.Субконто1);
	ЗапросПр.УстановитьПараметр("Субконто2", СтруктураПараметров.Субконто2);
	ЗапросПр.УстановитьПараметр("СценарийФакт", Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина));
	Масс = Новый Массив;
	Масс.Добавить(ПланыСчетов.Учетный.НайтиПоКоду("50"));
	Масс.Добавить(ПланыСчетов.Учетный.НайтиПоКоду("51"));
	
	ЗапросПр.УстановитьПараметр("СчетаДС", Масс);
	
	
	ЗапросПр.Текст = "ВЫБРАТЬ
	                 |	УчетныйОстаткиИОбороты.Предприятия КАК Предприятие
	                 |ИЗ
	                 |	РегистрБухгалтерии.Учетный.ОстаткиИОбороты(
	                 |			&НачДата,
	                 |			&КонДата,
	                 |			,
	                 |			,
	                 |			Счет В ИЕРАРХИИ (&СчетаДС),
	                 |			,
	                 |			Субконто1 = &Субконто1
	                 |				И Субконто2 = &Субконто2
	                 |				И СценарийПлана = &СценарийФакт) КАК УчетныйОстаткиИОбороты";


   Выборка = ЗапросПр.Выполнить().Выбрать();
   
   Пока Выборка.Следующий() Цикл
   		Предприятие = Выборка.Предприятие;
	КонецЦикла; 
	
	Возврат Предприятие;
	
КонецФункции

//}
