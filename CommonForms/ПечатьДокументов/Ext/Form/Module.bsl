
&НаСервере
&Вместо("ВосстановитьНастройкиПечатныхФорм")
Процедура УУ_ВосстановитьНастройкиПечатныхФорм(СохраненныеНастройкиПечатныхФорм)

	Если СохраненныеНастройкиПечатныхФорм = Неопределено Тогда
		СохраненныеНастройкиПечатныхФорм = НастройкиКомплектаПоУмолчанию;
	КонецЕсли;
	
	Если СохраненныеНастройкиПечатныхФорм = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТЗ_ТекущиеНастройкиПФ = НастройкиПечатныхФорм.Выгрузить();
	ТЗ_ТекущиеНастройкиПФ.Колонки.Добавить("ИмяМакетаСохраненнойНастройки");
	
	Для Каждого ТекСтрокаТЗ Из ТЗ_ТекущиеНастройкиПФ Цикл		
		ИндексПозицииРазделителя = СтрНайти(ТекСтрокаТЗ.ИмяМакета, ".", НаправлениеПоиска.СКонца);
		
		Если ЗначениеЗаполнено(ИндексПозицииРазделителя) Тогда
			ТекСтрокаТЗ.ИмяМакетаСохраненнойНастройки = Прав(ТекСтрокаТЗ.ИмяМакета, СтрДлина(ТекСтрокаТЗ.ИмяМакета) - ИндексПозицииРазделителя); 
		Иначе
			ТекСтрокаТЗ.ИмяМакетаСохраненнойНастройки = ТекСтрокаТЗ.ИмяМакета;
		КонецЕсли;

	КонецЦикла;
	
	Для Каждого СохраненнаяНастройка Из СохраненныеНастройкиПечатныхФорм Цикл 
		
		Если СохраненнаяНастройка.ИмяМакета = "УниверсальныйПередаточныйДокументКомплект" Тогда
			НайденныеНастройки = ТЗ_ТекущиеНастройкиПФ.НайтиСтроки(Новый Структура("Название", "Универсальный передаточный документ"));
		Иначе
			НайденныеНастройки = ТЗ_ТекущиеНастройкиПФ.НайтиСтроки(Новый Структура("ИмяМакетаСохраненнойНастройки", СохраненнаяНастройка.ИмяМакета));
		КонецЕсли;
						
		Если Не НайденныеНастройки.Количество() Тогда
			НайденныеНастройки = ТЗ_ТекущиеНастройкиПФ.НайтиСтроки(Новый Структура("ПозицияПоУмолчанию", СохраненнаяНастройка.ПозицияПоУмолчанию));							
		КонецЕсли;
		
		Для Каждого НастройкаПечатнойФормы Из НайденныеНастройки Цикл
			ИндексСтроки = ТЗ_ТекущиеНастройкиПФ.Индекс(НастройкаПечатнойФормы);
			//НастройкиПечатныхФорм.Сдвинуть(ИндексСтроки, НастройкиПечатныхФорм.Количество()-1 - ИндексСтроки); // сдвиг в конец
			НастройкиПечатныхФорм[ИндексСтроки].Количество = СохраненнаяНастройка.Количество;
			НастройкиПечатныхФорм[ИндексСтроки].Печатать = НастройкиПечатныхФорм[ИндексСтроки].Количество > 0;
		КонецЦикла;  
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
&Вместо("СформироватьПечатныеФормы") 
Функция УУ_СформироватьПечатныеФормы(ИменаМакетов, Отказ)
		Результат = Неопределено;
	// Формирование табличных документов.
	Если ЗначениеЗаполнено(Параметры.ИсточникДанных) Тогда
		Если ТипЗнч(ПараметрыВывода) = Тип("Структура") И ПараметрыВывода.Свойство("КодЯзыка") Тогда
			ПараметрыВывода.КодЯзыка = ТекущийЯзык;
		КонецЕсли;
		УправлениеПечатью.ПечатьПоВнешнемуИсточнику(
			Параметры.ИсточникДанных,
			Параметры.ПараметрыИсточника,
			Результат,
			ОбъектыПечати,
			ПараметрыВывода);
	Иначе
		ТипыОбъектовПечати = Новый Массив;
		Параметры.ПараметрыПечати.Свойство("ТипыОбъектовПечати", ТипыОбъектовПечати);
		
		ДополнительныеПараметры = Неопределено;
		Параметры.ПараметрыПечати.Свойство("ДополнительныеПараметры", ДополнительныеПараметры);
		
		ПечатныеФормы = УправлениеПечатью.СформироватьПечатныеФормы(Параметры.ИмяМенеджераПечати, ИменаМакетов,
			Параметры.ПараметрКоманды, ДополнительныеПараметры, ТипыОбъектовПечати, ТекущийЯзык);
		ОбъектыПечати = ПечатныеФормы.ОбъектыПечати;
		ПараметрыВывода = ПечатныеФормы.ПараметрыВывода;
		Результат = ПечатныеФормы.КоллекцияПечатныхФорм;
	КонецЕсли;
	
	// Установка признака сохранения печатной формы в файл (не открывать форму, сразу сохранять в файл).
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Параметры.ПараметрыПечати, "ФиксированныйКомплект") И НЕ Параметры.ПараметрыПечати.ФиксированныйКомплект тогда 
		Если ТипЗнч(Параметры.ПараметрыПечати) = Тип("Структура") И Параметры.ПараметрыПечати.Свойство("ФорматСохранения")
			И ЗначениеЗаполнено(Параметры.ПараметрыПечати.ФорматСохранения) Тогда
			НайденныйФормат = УправлениеПечатью.НастройкиФорматовСохраненияТабличногоДокумента().Найти(ТипФайлаТабличногоДокумента[Параметры.ПараметрыПечати.ФорматСохранения], "ТипФайлаТабличногоДокумента");
			Если НайденныйФормат <> Неопределено Тогда
				НастройкиФорматаСохранения = Новый Структура("ТипФайлаТабличногоДокумента,Представление,Расширение,Фильтр");
				ЗаполнитьЗначенияСвойств(НастройкиФорматаСохранения, НайденныйФормат);
				НастройкиФорматаСохранения.Фильтр = НастройкиФорматаСохранения.Представление + "|*." + НастройкиФорматаСохранения.Расширение;
				НастройкиФорматаСохранения.ТипФайлаТабличногоДокумента = Параметры.ПараметрыПечати.ФорматСохранения;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат; 
	
КонецФункции 

&После("ПриСозданииНаСервере")
Процедура УУ_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка) 	
	
	ЭтоМаршрутныйЛист = Ложь;
	Если Параметры.Свойство("ПараметрыПечати") тогда
		Если Параметры.ПараметрыПечати.Свойство("ДокументыИсточника") тогда
			Для каждого ДокументИсточника из Параметры.ПараметрыПечати.ДокументыИсточника цикл
				Если ТипЗнч(ДокументИсточника.Значение) = Тип("ДокументСсылка.сабМаршрутныйЛист") тогда
					ЭтоМаршрутныйЛист = Истина; 
					ДанныеМЛ = ПолучитьДанныеМЛ(ДокументИсточника.Значение);
					Для каждого НастройкаПФ из НастройкиПечатныхФорм цикл 
						НовыйТабДок = ИзменитьТабличныйДокументМЛ(ЭтотОбъект[НастройкаПФ.ИмяРеквизита], ОбъектыПечати, ДанныеМЛ);
						ЭтотОбъект[НастройкаПФ.ИмяРеквизита] = НовыйТабДок;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;  
	КонецЕсли; 
	
	Если ЭтоМаршрутныйЛист тогда
		
		ГруппаКнопки = Элементы.Найти("ГруппаСохранитьОтправить");
		
		Если ГруппаКнопки <> Неопределено тогда
			
			КомандаСК = Команды.Добавить("сабСохранитьКомплектПечатиВФайлКоманда"); 
			КомандаСК.Действие = "сабСохранитьКомплектПечатиВФайл";
			КомандаСК.Заголовок = "Сохранить комплект в файл"; 
			КомандаСК.Подсказка = "Сохранить комплект в файл";
			
			КнопкаПанели = Элементы.Добавить("сабСохранениеКомплекта", Тип("КнопкаФормы"), ГруппаКнопки); 
			КнопкаПанели.Заголовок = "Сохранить комплект в файл"; 
			
			КнопкаПанели.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
			КнопкаПанели.ИмяКоманды = "сабСохранитьКомплектПечатиВФайлКоманда";
			КнопкаПанели.Картинка = БиблиотекаКартинок.СохранитьНастройкиОтчета;	  
			КнопкаПанели.ОтображениеПодсказки = ОтображениеПодсказки.Всплывающая;
			
		КонецЕсли;
		
		ДобавляемыеРеквизиты = Новый Массив;
		
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТиповС = Новый ОписаниеТипов(Массив);
		
		Если Не БюджетныйНаСервере.ЕстьСвойствоОбъекта(ЭтотОбъект, "ИсточникВызоваКоманды") Тогда
			ИсточникВызоваКоманды = Новый РеквизитФормы("ИсточникВызоваКоманды", ОписаниеТиповС, ,);
			ДобавляемыеРеквизиты.Добавить(ИсточникВызоваКоманды);
			ЭтотОбъект.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		КонецЕсли; 
		
		
		ГруппаПечать = Элементы.Найти("КоманднаяПанельЛеваяЧасть");
		
		Если ГруппаПечать <> Неопределено тогда
			
			КомандаСК = Команды.Добавить("сабПечатьНабораКоманда"); 
			КомандаСК.Действие = "сабПечатьНабора";
			КомандаСК.Заголовок = "Печать набора"; 
			КомандаСК.Подсказка = "Печать своего набора документов согласно способам оплаты и очередности точек маршрутного листа";
			
			КнопкаПанели = Элементы.Добавить("сабПечатьНабораКнопка", Тип("КнопкаФормы"), ГруппаПечать); 
			КнопкаПанели.Заголовок = "Печать набора"; 
			
			КнопкаПанели.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
			КнопкаПанели.ИмяКоманды = "сабПечатьНабораКоманда";
			КнопкаПанели.Картинка = БиблиотекаКартинок.ПечатьСразу;
			КнопкаПанели.ОтображениеПодсказки = ОтображениеПодсказки.Всплывающая;
			КнопкаПанели.Отображение = ОтображениеКнопки.КартинкаИТекст;
			
		КонецЕсли;  
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИзменитьТабличныйДокументМЛ(ПечатнаяФорма, ОбъектыПечати, ДанныеМЛ) 
	
	ТабДок = Новый ТабличныйДокумент;
	
	Если ОбъектыПечати.Количество() = 0 Тогда
		Возврат ТабДок;
	КонецЕсли;
	
	Для каждого Стр из ДанныеМЛ цикл
		Если ОбъектыПечати.НайтиПоЗначению(Стр.Реализация) <> Неопределено тогда
			ИмяОбласти = ОбъектыПечати.НайтиПоЗначению(Стр.Реализация).Представление;	
			Область = ПечатнаяФорма.Области.Найти(ИмяОбласти);
			Если Область <> Неопределено тогда 
				ТабличныйДокумент = ПечатнаяФорма.ПолучитьОбласть(Область.Верх, , Область.Низ); 
				ПоследняяСтрока = ТабличныйДокумент.Область(ТабличныйДокумент.ВысотаТаблицы, , ТабличныйДокумент.ВысотаТаблицы, );
				ПоследняяСтрока.КонецСтраницы = Ложь;
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ПечатнаяФорма, УправлениеПечатью.КопируемыеСвойстваТабличногоДокумента());
				ТабДок.Вывести(ТабличныйДокумент);
				ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
				ЗаполнитьЗначенияСвойств(ТабДок, ПечатнаяФорма, УправлениеПечатью.КопируемыеСвойстваТабличногоДокумента()); 
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТабДок;
		
КонецФункции

&НаКлиенте
Процедура сабСохранитьКомплектПечатиВФайл(Команда) 
	ЭтотОбъект.ИсточникВызоваКоманды = "ПечатьКомплектаМЛ";
	Оповещение = Новый ОписаниеОповещения("СохранениеКомплекта", ЭтотОбъект, Новый Структура("ИсточникКоманды","ПечатьКомплекта")); 
	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(Оповещение);		
КонецПроцедуры 


&НаКлиенте
Процедура СохранениеКомплекта(РасширениеПодключено, ДополнительныеПараметры) Экспорт
	
	РасширениеДляРаботыСФайламиПодключено = РасширениеПодключено;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОбъектыПечати", ОбъектыПечати);
	ПараметрыФормы.Вставить("РасширениеДляРаботыСФайламиПодключено", РасширениеПодключено);
	ПараметрыФормы.Вставить("ПечатьКомплектаМЛ",Истина);
	ОткрытьФорму("ОбщаяФорма.СохранениеПечатнойФормы", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура сабПечатьНабора(Команда)	
	Пакет = сабПечатьНабораНаСервере(); 
	Пакет.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
КонецПроцедуры

&НаСервере
Функция сабПечатьНабораНаСервере();

	Пакет = Новый ПакетОтображаемыхДокументов; 
	Пакет.КоличествоЭкземпляров = Копий;
	КоличествоИтерацийДляОднойРеализации = 1;
	УПДДобавлены = Ложь;

	Для каждого ДокументИсточника из Параметры.ПараметрыПечати.ДокументыИсточника цикл 
		
		ДанныеМЛ = ПолучитьДанныеМЛ(ДокументИсточника.Значение); 
		
		Для каждого Стр из ДанныеМЛ цикл 	
			//Если Стр.ОплатаНаличными тогда
			//	НастройкаПФ = НастройкиПечатныхФорм.НайтиСтроки(Новый Структура("Название","Товарный чек"));
			//	Если НастройкаПФ <> Неопределено тогда 
			//		НастройкаПечатнойФормы= НастройкаПФ[0]; 
			//		КоличествоИтерацийДляОднойРеализации = 1;
			//	иначе
			//		Сообщить("Для пакета документов не выбран ""Товарный чек""."); 
			//		Продолжить;
			//	КонецЕсли;						
			//Иначе
			//	НастройкаПФ = НастройкиПечатныхФорм.НайтиСтроки(Новый Структура("Название","Универсальный передаточный документ"));	
			//	Если НастройкаПФ <> Неопределено тогда
			//		НастройкаПечатнойФормы = НастройкаПФ[0];
			//		УПДДобавлены = Истина; 
			//		КоличествоИтерацийДляОднойРеализации = 2;
			//	иначе
			//		Сообщить("Для пакета документов не выбран ""Универсальный передаточный документ"".");
			//		Продолжить;
			//	КонецЕсли;	
			//КонецЕсли;
			
			Если Стр.ТипПФ = "ТоварныйЧек" тогда
				НастройкаПФ = НастройкиПечатныхФорм.НайтиСтроки(Новый Структура("Название","Товарный чек"));
				Если НастройкаПФ <> Неопределено И НастройкаПФ.Количество()>0 тогда 
					НастройкаПечатнойФормы= НастройкаПФ[0]; 
					КоличествоИтерацийДляОднойРеализации = 1;
				иначе
					Сообщить("Для пакета документов не выбран ""Товарный чек""."); 
					Продолжить;
				КонецЕсли;						
			ИначеЕсли Стр.ТипПФ = "УПД" тогда
				НастройкаПФ = НастройкиПечатныхФорм.НайтиСтроки(Новый Структура("Название","Универсальный передаточный документ"));	
				Если НастройкаПФ <> Неопределено И НастройкаПФ.Количество()>0 тогда
					НастройкаПечатнойФормы = НастройкаПФ[0];
					УПДДобавлены = Истина; 
					КоличествоИтерацийДляОднойРеализации = 2;
				иначе
					Сообщить("Для пакета документов не выбран ""Универсальный передаточный документ"".");
					Продолжить;
				КонецЕсли;
			ИначеЕсли Стр.ТипПФ = "ТоварнаяУПР" тогда
				НастройкаПФ = НастройкиПечатныхФорм.НайтиСтроки(Новый Структура("Название","Товарна накладная (упр)"));
				Если НастройкаПФ <> Неопределено И НастройкаПФ.Количество()>0 тогда 
					НастройкаПечатнойФормы= НастройкаПФ[0]; 
					КоличествоИтерацийДляОднойРеализации = 1;
				иначе
					Сообщить("Для пакета документов не выбрана ""Товарная накладная (упр)""."); 
					Продолжить;
				КонецЕсли;
			ИначеЕсли Стр.ТипПФ = "РасходМатериалов" тогда
				НастройкаПФ = НастройкиПечатныхФорм.НайтиСтроки(Новый Структура("Название","Требование накладная"));
				Если НастройкаПФ <> Неопределено И НастройкаПФ.Количество()>0 тогда 
					НастройкаПечатнойФормы= НастройкаПФ[0]; 
					КоличествоИтерацийДляОднойРеализации = 1;
				иначе
					Сообщить("Для пакета документов не выбрана ""Требование накладная""."); 
					Продолжить;
				КонецЕсли;	
			КонецЕсли;		

			
			Для к=1 по КоличествоИтерацийДляОднойРеализации цикл
				
				Если к = 2 тогда 
					Если УПДДобавлены тогда 
						НастройкаПФ = НастройкиПечатныхФорм.НайтиСтроки(Новый Структура("Название","Счет на оплату"));	
						Если НастройкаПФ <> Неопределено И НастройкаПФ.Количество()>0 тогда
							НастройкаПечатнойФормы = НастройкаПФ[0];
						иначе
							Сообщить("Для пакета документов не выбран ""Счет на оплату"".");
							Продолжить;
						КонецЕсли;		
					КонецЕсли; 
				КонецЕсли;
				
				Если Не НастройкаПечатнойФормы.Печатать Тогда
					Продолжить;
				КонецЕсли;
				
				ПечатнаяФорма = ЭтотОбъект[НастройкаПечатнойФормы.ИмяРеквизита];
				
				Если ВычислитьИспользованиеВывода(ПечатнаяФорма) = ИспользованиеВывода.Запретить Тогда
					Продолжить;
				КонецЕсли;
				
				Если ПечатнаяФорма.Защита Тогда
					Продолжить;
				КонецЕсли;
				
				Если ПечатнаяФорма.ВысотаТаблицы = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ПечатныеФормыПоОбъектам = УправлениеПечатью.ПечатныеФормыПоОбъектам(ПечатнаяФорма, ОбъектыПечати);
				СоответствиеОбъектаПечатнойФорме = ПечатныеФормыПоОбъектам.Получить(Стр.Реализация); 
				
				ОбъектПечати = Стр.Реализация;                          
				ПечатнаяФорма = СоответствиеОбъектаПечатнойФорме;
				ЗаданныеИменаПечатныхФорм = ОбщегоНазначения.ЗначениеИзСтрокиXML(НастройкаПечатнойФормы.ИмяФайлаПечатнойФормы);
				
				ДобавитьВПакетДокументов(Пакет,ПечатнаяФорма,НастройкаПечатнойФормы.Количество);
				Пакет.РазборПоКопиям = Ложь;	
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;

	Возврат	Пакет;

КонецФункции

&НаСервере
Функция ПолучитьДанныеМЛ(МЛ)
	
	Запрос = Новый Запрос; 
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	сабМаршрутныйЛистТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	//               |	сабМаршрутныйЛистТабличнаяЧасть.Реализация КАК Реализация,
	//               |	ВЫБОР
	//               |		КОГДА ТИПЗНАЧЕНИЯ(сабМаршрутныйЛистТабличнаяЧасть.Реализация) = ТИП(Документ.УЧ_Реализация)
	//               |			ТОГДА ИСТИНА
	//               |		ИНАЧЕ ВЫБОР
	//               |				КОГДА ТИПЗНАЧЕНИЯ(сабМаршрутныйЛистТабличнаяЧасть.Реализация) = ТИП(Документ.РозничнаяПродажа)
	//               |					ТОГДА ИСТИНА
	//               |				ИНАЧЕ ЛОЖЬ
	//               |			КОНЕЦ
	//               |	КОНЕЦ КАК ОплатаНаличными,
	//               |	ВЫБОР
	//               |		КОГДА ТИПЗНАЧЕНИЯ(сабМаршрутныйЛистТабличнаяЧасть.Реализация) = ТИП(Документ.УЧ_Реализация)
	//               |			ТОГДА ВЫРАЗИТЬ(сабМаршрутныйЛистТабличнаяЧасть.Реализация КАК Документ.УЧ_Реализация).Номер
	//               |		ИНАЧЕ ВЫБОР
	//               |				КОГДА ТИПЗНАЧЕНИЯ(сабМаршрутныйЛистТабличнаяЧасть.Реализация) = ТИП(Документ.РозничнаяПродажа)
	//               |					ТОГДА ВЫРАЗИТЬ(сабМаршрутныйЛистТабличнаяЧасть.Реализация КАК Документ.РозничнаяПродажа).Номер
	//               |				ИНАЧЕ сабМаршрутныйЛистТабличнаяЧасть.Реализация.Номер
	//               |			КОНЕЦ
	//               |	КОНЕЦ КАК НомерДокумента,
	//               |	сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента КАК ЗаказКлиента,
	//               |	СчетНаОплатуПокупателю.Ссылка КАК СчетНаОплату,
	//               |	СчетНаОплатуПокупателю.Номер КАК НомерСчета
	//               |ИЗ
	//               |	Документ.сабМаршрутныйЛист.ТабличнаяЧасть КАК сабМаршрутныйЛистТабличнаяЧасть
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	//               |		ПО сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента = СчетНаОплатуПокупателю.Заказ
	//               |ГДЕ
	//               |	сабМаршрутныйЛистТабличнаяЧасть.Ссылка = &Ссылка
	//			   |	И ТИПЗНАЧЕНИЯ(сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента) <> ТИП(Документ.сабМаршрутныйЛист)
	//               |
	//               |УПОРЯДОЧИТЬ ПО
	//               |	НомерСтроки";  
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	сабМаршрутныйЛистТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|	сабМаршрутныйЛистТабличнаяЧасть.Реализация КАК Реализация,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(сабМаршрутныйЛистТабличнаяЧасть.Реализация) = ТИП(Документ.УЧ_Реализация)
	|				И ДокументЗаказКлиента.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ""ТоварнаяУПР""
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(сабМаршрутныйЛистТабличнаяЧасть.Реализация) = ТИП(Документ.РозничнаяПродажа)
	|					ТОГДА ""ТоварныйЧек""
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ТИПЗНАЧЕНИЯ(сабМаршрутныйЛистТабличнаяЧасть.Реализация) = ТИП(Документ.РеализацияТоваровУслуг)
	|								И ДокументЗаказКлиента.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|							ТОГДА ""УПД""
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ДокументЗаказКлиента.БезвозмезднаяПередача
	|										И ТИПЗНАЧЕНИЯ(сабМаршрутныйЛистТабличнаяЧасть.Реализация) = ТИП(Документ.ТребованиеНакладная)
	|									ТОГДА ""РасходМатериалов""
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК ТипПФ,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(сабМаршрутныйЛистТабличнаяЧасть.Реализация) = ТИП(Документ.УЧ_Реализация)
	|			ТОГДА ВЫРАЗИТЬ(сабМаршрутныйЛистТабличнаяЧасть.Реализация КАК Документ.УЧ_Реализация).Номер
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(сабМаршрутныйЛистТабличнаяЧасть.Реализация) = ТИП(Документ.РозничнаяПродажа)
	|					ТОГДА ВЫРАЗИТЬ(сабМаршрутныйЛистТабличнаяЧасть.Реализация КАК Документ.РозничнаяПродажа).Номер
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ТИПЗНАЧЕНИЯ(сабМаршрутныйЛистТабличнаяЧасть.Реализация) = ТИП(Документ.ТребованиеНакладная)
	|							ТОГДА ВЫРАЗИТЬ(сабМаршрутныйЛистТабличнаяЧасть.Реализация КАК Документ.ТребованиеНакладная).Номер
	|						ИНАЧЕ сабМаршрутныйЛистТабличнаяЧасть.Реализация.Номер
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК НомерДокумента,
	|	сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента КАК ЗаказКлиента,
	|	СчетНаОплатуПокупателю.Ссылка КАК СчетНаОплату,
	|	СчетНаОплатуПокупателю.Номер КАК НомерСчета
	|ИЗ
	|	Документ.сабМаршрутныйЛист.ТабличнаяЧасть КАК сабМаршрутныйЛистТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|		ПО сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента = СчетНаОплатуПокупателю.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ДокументЗаказКлиента
	|		ПО сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента = ДокументЗаказКлиента.Ссылка
	|ГДЕ
	|	сабМаршрутныйЛистТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТИПЗНАЧЕНИЯ(сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента) <> ТИП(Документ.сабМаршрутныйЛист)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка",МЛ);
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Возврат Выгрузка;
	
КонецФункции

&НаСервере
Функция ЧтениеXMLСтроки(СтрокаXML)
	
	ДанныеДокументов = Новый ТаблицаЗначений;
	ДанныеДокументов.Колонки.Добавить("Ключ");
	ДанныеДокументов.Колонки.Добавить("Значение");
	
	Чтение = Новый ЧтениеXML;
    Чтение.УстановитьСтроку(СтрокаXML);
    
    //прочитаем начало xml файла
    //Чтение.ПерейтиКСодержимому();
    
    //прочитаем начало корневого элемента
    //Чтение.Прочитать();
    
    //читаем содержимое пока текущим не станет конец корневого элемента, т.к. мы писали туда только целые элементы справочника,
    //а сериализатор читает каждый из их полностью, то мы упремся именно в конец корневого
	Пока Чтение.Прочитать() Цикл
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя = "Key" тогда
			НоваяСтрока = ДанныеДокументов.Добавить();
	    	НоваяСтрока.Ключ = ФабрикаXDTO.ПрочитатьXML(Чтение).Значение;  
			НоваяСтрока.Значение = ФабрикаXDTO.ПрочитатьXML(Чтение).Значение; 
		КонецЕсли;
    КонецЦикла;
    
    Чтение.Закрыть();
КонецФункции

&НаСервере
&Вместо("ПоместитьТабличныеДокументыВоВременноеХранилище")
Функция УУ_ПоместитьТабличныеДокументыВоВременноеХранилище(ПереданныеНастройки) 
	
	НастройкиСохранения = НастройкиСохранения();
	ЗаполнитьЗначенияСвойств(НастройкиСохранения, ПереданныеНастройки);
	
	Результат = Новый Массив;
	
	ИмяВременногоКаталога = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолучитьИмяВременногоФайла());
	СоздатьКаталог(ИмяВременногоКаталога);
	
	ВыбранныеФорматыСохранения = НастройкиСохранения.ФорматыСохранения;
	ПереводитьИменаФайловВТранслит = НастройкиСохранения.ПереводитьИменаФайловВТранслит;
	ТаблицаФорматов = УправлениеПечатью.НастройкиФорматовСохраненияТабличногоДокумента();
	
	ОбъектыДляПрикрепления = Неопределено;
	Если ПереданныеНастройки.Свойство("ОбъектыДляПрикрепления") Тогда
		ОбъектыДляПрикрепления = ОбщегоНазначения.СкопироватьРекурсивно(ПереданныеНастройки.ОбъектыДляПрикрепления);
	КонецЕсли;
	
	// сохранение печатных форм

	//Сохранение комплекта в PDF одним Файлом 
	Если БюджетныйНаСервере.ЕстьСвойствоОбъекта(ЭтотОбъект, "ИсточникВызоваКоманды") тогда
		
		Если ЭтотОбъект.ИсточникВызоваКоманды = "ПечатьКомплектаМЛ" тогда
			
			ОбработанныеПечатныеФормы = Новый Массив;
			
			Для каждого ДокументИсточника из Параметры.ПараметрыПечати.ДокументыИсточника цикл 
				
				СписокПФ = Новый СписокЗначений;
				Пакет = Новый ПакетОтображаемыхДокументов;
				Пакет.КоличествоЭкземпляров = Копий;
				
				Для Каждого НастройкаПечатнойФормы Из НастройкиПечатныхФорм Цикл
					
					Если Не НастройкаПечатнойФормы.Печатать Тогда
						Продолжить;
					КонецЕсли;
					
					ПечатнаяФорма = ЭтотОбъект[НастройкаПечатнойФормы.ИмяРеквизита];
					
					Если ВычислитьИспользованиеВывода(ПечатнаяФорма) = ИспользованиеВывода.Запретить Тогда
						Продолжить;
					КонецЕсли;
					
					Если ПечатнаяФорма.Защита Тогда
						Продолжить;
					КонецЕсли;
					
					Если ПечатнаяФорма.ВысотаТаблицы = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					ПечатныеФормыПоОбъектам = УправлениеПечатью.ПечатныеФормыПоОбъектам(ПечатнаяФорма, ОбъектыПечати);
					Для Каждого СоответствиеОбъектаПечатнойФорме Из ПечатныеФормыПоОбъектам Цикл
						ОбъектПечати = СоответствиеОбъектаПечатнойФорме.Ключ;
						ПечатнаяФорма = СоответствиеОбъектаПечатнойФорме.Значение;
						ЗаданныеИменаПечатныхФорм = ОбщегоНазначения.ЗначениеИзСтрокиXML(НастройкаПечатнойФормы.ИмяФайлаПечатнойФормы);
						
						ПечатныеФормыДляДокументаИсточника = ВыбратьПечатныеФормыДляДокументаИсточника(ДокументИсточника,ЗаданныеИменаПечатныхФорм);
						НайдСтроки = ПечатныеФормыДляДокументаИсточника.НайтиСтроки(Новый Структура("Ключ",ОбъектПечати));
						Если НайдСтроки.Количество()=0 тогда
							Продолжить;
						КонецЕсли;
						
						ДобавитьВПакетДокументов(Пакет,ПечатнаяФорма,НастройкаПечатнойФормы.Количество);
						
						Если ОбъектыДляПрикрепления <> Неопределено И ОбъектыДляПрикрепления[ОбъектПечати] <> Истина Тогда
							Продолжить;
						КонецЕсли;
						
					КонецЦикла;
				КонецЦикла;
				
				Для Каждого ВыбранныйФормат Из ВыбранныеФорматыСохранения Цикл
					ТипФайла = ТипФайлаТабличногоДокумента[ВыбранныйФормат];
					НастройкиФормата = ТаблицаФорматов.НайтиСтроки(Новый Структура("ТипФайлаТабличногоДокумента", ТипФайла))[0];
					
					ИмяФайла = "Комплект маршрутного листа №" + ДокументИсточника.Значение.Номер + " от " + Формат(ДокументИсточника.Значение.Дата,"ДФ=dd.MM.yy");
					ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
					
					Если ПереводитьИменаФайловВТранслит Тогда
						ИмяФайла = СтроковыеФункции.СтрокаЛатиницей(ИмяФайла);
					КонецЕсли;
					
					РасширениеФайла = НастройкиФормата.Расширение;
					ИмяФайлаСРасширением = ИмяФайла + "." + РасширениеФайла;
					ПолноеИмяФайла = ИмяВременногоКаталога + ИмяФайлаСРасширением;
					
					МаксимальнаяДлина = 218; // https://docs.microsoft.com/en-us/office/troubleshoot/office-suite-issues/error-open-document
					Если ТипФайла = ТипФайлаТабличногоДокумента.XLS И СтрДлина(ПолноеИмяФайла) > МаксимальнаяДлина Тогда
						МаксимальнаяДлина = МаксимальнаяДлина - 5; // Резерв для формирования уникального имени.
						Если СтрДлина(ИмяВременногоКаталога) < МаксимальнаяДлина Тогда
							ИмяФайла = Лев(ИмяФайла, МаксимальнаяДлина - СтрДлина(ИмяВременногоКаталога) - СтрДлина(РасширениеФайла) - 1);
							ИмяФайлаСРасширением = ИмяФайла + "." + РасширениеФайла;
							ПолноеИмяФайла = ИмяВременногоКаталога + ИмяФайлаСРасширением;
						КонецЕсли;
					КонецЕсли;
					
					ПолноеИмяФайла = ФайловаяСистема.УникальноеИмяФайла(ПолноеИмяФайла);
					Пакет.ЗаписатьФайлДляПечати(ПолноеИмяФайла);
					
					Если ТипФайла = ТипФайлаТабличногоДокумента.HTML Тогда
						УправлениеПечатью.ВставитьКартинкиВHTML(ПолноеИмяФайла);
					КонецЕсли;
					
					ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
					ПутьВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификаторХранилища);
					ОписаниеФайла = Новый Структура;
					ОписаниеФайла.Вставить("Представление", ИмяФайлаСРасширением);
					ОписаниеФайла.Вставить("АдресВоВременномХранилище", ПутьВоВременномХранилище);
					ОписаниеФайла.Вставить("ОбъектПечати", ОбъектПечати);
					Если ТипФайла = ТипФайлаТабличногоДокумента.ANSITXT Тогда
						ОписаниеФайла.Вставить("Кодировка", "windows-1251");
					КонецЕсли;
					Результат.Добавить(ОписаниеФайла);
				КонецЦикла;
				
			КонецЦикла;
			
			УдалитьФайлы(ИмяВременногоКаталога);
			
			Возврат Результат;  
			
		КонецЕсли;
		
	КонецЕсли;

	//Типовое сохранение
	ОбработанныеПечатныеФормы = Новый Массив;
	Для Каждого НастройкаПечатнойФормы Из НастройкиПечатныхФорм Цикл
		
		Если НЕ ПустаяСтрока(НастройкаПечатнойФормы.ОфисныеДокументы) Тогда
			
			ФайлыОфисныхДокументов = ОбщегоНазначения.ЗначениеИзСтрокиXML(НастройкаПечатнойФормы.ОфисныеДокументы);
			
			Для Каждого ФайлОфисногоДокумента Из ФайлыОфисныхДокументов Цикл
				ИмяФайла = УправлениеПечатью.ИмяФайлаОфисногоДокумента(ФайлОфисногоДокумента.Значение);
				ОписаниеФайла = Новый Структура;
				ОписаниеФайла.Вставить("Представление", ИмяФайла);
				ОписаниеФайла.Вставить("ОбъектПечати", ?(ТипЗнч(ФайлОфисногоДокумента.Значение) = Тип("Строка"), Неопределено, ФайлОфисногоДокумента.Значение));
				Если ОбъектыДляПрикрепления <> Неопределено И ОбъектыДляПрикрепления[ОписаниеФайла.ОбъектПечати] <> Истина Тогда
					Продолжить;
				КонецЕсли;
				ОписаниеФайла.Вставить("АдресВоВременномХранилище", ФайлОфисногоДокумента.Ключ);
				ОписаниеФайла.Вставить("ЭтоОфисныйДокумент", Истина);
				Результат.Добавить(ОписаниеФайла);
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;
		
		Если Не НастройкаПечатнойФормы.Печатать Тогда
			Продолжить;
		КонецЕсли;
		
		ПечатнаяФорма = ЭтотОбъект[НастройкаПечатнойФормы.ИмяРеквизита];
		Если ОбработанныеПечатныеФормы.Найти(ПечатнаяФорма) = Неопределено Тогда
			ОбработанныеПечатныеФормы.Добавить(ПечатнаяФорма);
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если ВычислитьИспользованиеВывода(ПечатнаяФорма) = ИспользованиеВывода.Запретить Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПечатнаяФорма.Защита Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПечатнаяФорма.ВысотаТаблицы = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПечатныеФормыПоОбъектам = УправлениеПечатью.ПечатныеФормыПоОбъектам(ПечатнаяФорма, ОбъектыПечати);
		Для Каждого СоответствиеОбъектаПечатнойФорме Из ПечатныеФормыПоОбъектам Цикл
			ОбъектПечати = СоответствиеОбъектаПечатнойФорме.Ключ;
			ПечатнаяФорма = СоответствиеОбъектаПечатнойФорме.Значение;
			
			Если ОбъектыДляПрикрепления <> Неопределено И ОбъектыДляПрикрепления[ОбъектПечати] <> Истина Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого ВыбранныйФормат Из ВыбранныеФорматыСохранения Цикл
				ТипФайла = ТипФайлаТабличногоДокумента[ВыбранныйФормат];
				НастройкиФормата = ТаблицаФорматов.НайтиСтроки(Новый Структура("ТипФайлаТабличногоДокумента", ТипФайла))[0];
				ЗаданныеИменаПечатныхФорм = ОбщегоНазначения.ЗначениеИзСтрокиXML(НастройкаПечатнойФормы.ИмяФайлаПечатнойФормы);
				
				ИмяФайла = УправлениеПечатью.ИмяФайлаПечатнойФормыОбъекта(ОбъектПечати, ЗаданныеИменаПечатныхФорм, НастройкаПечатнойФормы.Название);
				ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
				
				Если ПереводитьИменаФайловВТранслит Тогда
					ИмяФайла = СтроковыеФункции.СтрокаЛатиницей(ИмяФайла);
				КонецЕсли;
				
				РасширениеФайла = НастройкиФормата.Расширение;
				ИмяФайлаСРасширением = ИмяФайла + "." + РасширениеФайла;
				ПолноеИмяФайла = ИмяВременногоКаталога + ИмяФайлаСРасширением;
				
				МаксимальнаяДлина = 218; // https://docs.microsoft.com/en-us/office/troubleshoot/office-suite-issues/error-open-document
				Если ТипФайла = ТипФайлаТабличногоДокумента.XLS И СтрДлина(ПолноеИмяФайла) > МаксимальнаяДлина Тогда
					МаксимальнаяДлина = МаксимальнаяДлина - 5; // Резерв для формирования уникального имени.
					Если СтрДлина(ИмяВременногоКаталога) < МаксимальнаяДлина Тогда
						ИмяФайла = Лев(ИмяФайла, МаксимальнаяДлина - СтрДлина(ИмяВременногоКаталога) - СтрДлина(РасширениеФайла) - 1);
						ИмяФайлаСРасширением = ИмяФайла + "." + РасширениеФайла;
						ПолноеИмяФайла = ИмяВременногоКаталога + ИмяФайлаСРасширением;
					КонецЕсли;
				КонецЕсли;
				
				ПолноеИмяФайла = ФайловаяСистема.УникальноеИмяФайла(ПолноеИмяФайла);
				ПечатнаяФорма.Записать(ПолноеИмяФайла, ТипФайла);
				
				Если ТипФайла = ТипФайлаТабличногоДокумента.HTML Тогда
					УправлениеПечатью.ВставитьКартинкиВHTML(ПолноеИмяФайла);
				КонецЕсли;
				
				ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
				ПутьВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификаторХранилища);
				ОписаниеФайла = Новый Структура;
				ОписаниеФайла.Вставить("Представление", ИмяФайлаСРасширением);
				ОписаниеФайла.Вставить("АдресВоВременномХранилище", ПутьВоВременномХранилище);
				ОписаниеФайла.Вставить("ОбъектПечати", ОбъектПечати);
				Если ТипФайла = ТипФайлаТабличногоДокумента.ANSITXT Тогда
					ОписаниеФайла.Вставить("Кодировка", "windows-1251");
				КонецЕсли;
				Результат.Добавить(ОписаниеФайла);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	УдалитьФайлы(ИмяВременногоКаталога);
	
	Возврат Результат;
	
КонецФункции


&НаСервере 
Функция ВыбратьПечатныеФормыДляДокументаИсточника(ДокументИсточник, ЗаданныеИменаПечатныхФорм)
	
КС = Новый КвалификаторыСтроки(200);
Массив = Новый Массив;
Массив.Добавить(Тип("Строка"));
ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);

ТаблицаСоответствия = Новый ТаблицаЗначений;
ТаблицаСоответствия.Колонки.Добавить("Ссылка",ОбщегоНазначения.ОписаниеТипаВсеСсылки()); 
ТаблицаСоответствия.Колонки.Добавить("Имя",ОписаниеТиповС);

Для каждого Стр из ЗаданныеИменаПечатныхФорм цикл 
	НоваяСтрокаТС = ТаблицаСоответствия.Добавить();
	НоваяСтрокаТС.Ссылка = Стр.Ключ; 
	НоваяСтрокаТС.Имя = Стр.Значение;
КонецЦикла;   

Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
               |	сабМаршрутныйЛистТабличнаяЧасть.Реализация КАК Реализация
               |ПОМЕСТИТЬ ВТДокументыМЛ
               |ИЗ
               |	Документ.сабМаршрутныйЛист.ТабличнаяЧасть КАК сабМаршрутныйЛистТабличнаяЧасть
               |ГДЕ
               |	сабМаршрутныйЛистТабличнаяЧасть.Ссылка = &Ссылка
			   |	И ТИПЗНАЧЕНИЯ(сабМаршрутныйЛистТабличнаяЧасть.ЗаказКлиента) <> ТИП(Документ.сабМаршрутныйЛист)
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	ТаблицаСоответствия.Ссылка КАК Ссылка,
               |	ТаблицаСоответствия.Имя КАК Имя
               |ПОМЕСТИТЬ ВТПечатныеФормы
               |ИЗ
               |	&ТаблицаСоответствия КАК ТаблицаСоответствия
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	ВТПечатныеФормы.Ссылка КАК Ссылка,
               |	ВТПечатныеФормы.Имя КАК Имя
               |ПОМЕСТИТЬ ВТРезульт
               |ИЗ
               |	ВТДокументыМЛ КАК ВТДокументыМЛ
               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПечатныеФормы КАК ВТПечатныеФормы
               |		ПО ВТДокументыМЛ.Реализация = ВТПечатныеФормы.Ссылка
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	ВТПечатныеФормы.Ссылка КАК Ключ,
               |	ВТПечатныеФормы.Имя КАК Значение
               |ИЗ
               |	ВТРезульт КАК ВТРезульт
               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПечатныеФормы КАК ВТПечатныеФормы
               |		ПО ВТРезульт.Имя = ВТПечатныеФормы.Имя";

Запрос.УстановитьПараметр("Ссылка",ДокументИсточник.Значение);
Запрос.УстановитьПараметр("ТаблицаСоответствия",ТаблицаСоответствия);
Возврат  Запрос.Выполнить().Выгрузить();

КонецФункции

&НаСервере
Процедура ПрисоединитьТабличныйДокумент(ОсновнойДокумент, Знач ПрисоединяемыйДокумент, Знач СоздатьФорматСтрок = Ложь) 
	
	Если ОсновнойДокумент.ВысотаТаблицы > 0 тогда 
		ОсновнойДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;

	ВремТабДок = Новый ТабличныйДокумент;
	ОбластьЯчеек = ВремТабДок.Вывести(ПрисоединяемыйДокумент);
	
	Если СоздатьФорматСтрок Тогда
		ОбластьЯчеек.СоздатьФорматСтрок();
	КонецЕсли;
	
	ОсновнойДокумент.Вывести(ВремТабДок);

	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВПакетДокументов(Пакет,ПечатнаяФорма,КоличествоЭкземпляров)
	
	Пакет.РазборПоКопиям = Ложь;
	// Добавляем вложенный пакет для третьего документа
	ВложенныйПакет = Новый ПакетОтображаемыхДокументов;
	ЭлементПакета3 = Пакет.Состав.Добавить();
	ВложенныйПакет.РазборПоКопиям = Ложь;
	ЭлементПакета3.Данные = ВложенныйПакет;
	
	// Документ во вложенном пакете печатается в 2 экземплярах
	ВложенныйПакет.КоличествоЭкземпляров = КоличествоЭкземпляров;
	
	// Добавляем документ во вложенный пакет
	ЭлементВложенногоПакета1 = ВложенныйПакет.Состав.Добавить();
	ЭлементВложенногоПакета1.Данные = ПоместитьВоВременноеХранилище(ПечатнаяФорма, УникальныйИдентификаторХранилища);
	 
КонецПроцедуры


