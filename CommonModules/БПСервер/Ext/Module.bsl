#Область РаботаСЗадачами

Процедура ВыполнитьЗадачу(Задача, ДействиеПоУмолчанию = Ложь, ПроверкаУспешно = Ложь, Комментарии) Экспорт
	НачатьТранзакцию();
	Если ТипЗнч(Задача) = Тип("ЗадачаСсылка.Задача") тогда
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Задача.Задача");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Задача);
		Блокировка.Заблокировать();
	КонецЕсли;
	
	Если ТипЗнч(Задача) = Тип("ЗадачаСсылка.Задача") тогда		
		ЗадачаОбъект = Задача.ПолучитьОбъект();
		ЗадачаОбъект.Прочитать();
	ИначеЕсли ТипЗнч(Задача) = Тип("ЗадачаОбъект.Задача") тогда
		ЗадачаОбъект = Задача;
	КонецЕсли;
		
	ЗадачаОбъект.Комментарии = Комментарии;
	ЗадачаОбъект.РезультатВыполнения = ПроверкаУспешно;
	ЗадачаОбъект.Выполнена = Ложь;
	ЗадачаОбъект.ВыполнитьЗадачу();
	ПараметрыСеанса.СчетчикОповещенийОЗадачах = 3; //новых задач нет
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Функция ПроверкаЗадачи(Задача) Экспорт
	//если заявка или задача помечена на удаление
	Если Задача.ПометкаУдаления Тогда
		Сообщить("Помеченная на удаление задача не может быть выполнена.");
		Возврат 1;
	КонецЕсли;
	
	Если Задача.Выполнена Тогда
		Сообщить("Данная задача уже выполнена " + ?(ПараметрыСеанса.ДоступныеПользователи.Найти(Задача.Пользователь) = Неопределено, " пользователем " + Строка(Задача.Пользователь), " вами") + ".");
		Возврат 1;
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(Задача.Заявка) И ТипЗнч(Задача) = Тип("ЗадачаСсылка.Задача") И (Задача.Заявка.ПометкаУдаления ИЛИ ПустаяСтрока(Задача.Заявка)) Тогда
		Сообщить("Родительская заявка помечена на удаление или удалена. Выполнение задачи невозможно.");
		Возврат 2;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции // ()

Функция НоваяЗадача(Исполнитель, Заголовок, БП, ТочкаМаршрутаБизнесПроцесса, ВозвратСсылки = Ложь, Предприятие = "", ДокументОбязательныйКПрикреплению = Неопределено, ВРаботе = Ложь, СтрокаТЧБП = Неопределено) Экспорт
	
	Задача = Задачи.Задача.СоздатьЗадачу();		
	Задача.Заявка = БП.Заявка;
	Задача.Дата = ТекущаяДата();
		
	Задача.Наименование = Заголовок;
	
	Задача.БизнесПроцесс  = БП;
	Задача.ТочкаМаршрута  = ТочкаМаршрутаБизнесПроцесса;
	
	Задача.Автор = ПараметрыСеанса.ТекущийПользователь;
	Задача.Описание = БП.Описание;
	Задача.Исполнитель = Исполнитель;
	
	Задача.ВРаботе = ВРаботе;
	Если ЗначениеЗаполнено(ДокументОбязательныйКПрикреплению) Тогда
		Задача.ДокументОбязательныйКПрикреплению = ДокументОбязательныйКПрикреплению;
	КонецЕсли;
	
	Если НЕ СтрокаТЧБП = Неопределено Тогда
		Задача.ИДГруппы = СтрокаТЧБП.ИдГруппы;
		Если ЗначениеЗаполнено(СтрокаТЧБП.ВремяНаВыполнение) Тогда //устанавливаем срок выполнения задачи
			
			Срок = ТекущаяДата();
			НовыйЧас = 1;
			Пока НовыйЧас <= СтрокаТЧБП.ВремяНаВыполнение Цикл 
				Срок = Срок + 60 * 60;
				Если Час(Срок) >=9 И Час(Срок)<18 Тогда
					Если НЕ Час(Срок) = 13 Тогда //обед с 13 до 14
						НовыйЧас = НовыйЧас + 1;
					КонецЕсли;			
				КонецЕсли;
			КонецЦикла; 
			
			//проверка выходного дня
			РабочийДень = Ложь;
			Пока НЕ РабочийДень = Истина Цикл
				ГодКалендаря = Год(Срок);		
				Календарь = Справочники.Календари.НайтиПоНаименованию(Формат(ГодКалендаря,"ЧГ=0"), Истина);
				РабочийДень = БПСервер.ПолучитьПризнакРабочегоДня(Календарь,ГодКалендаря,Срок);
				Если РабочийДень = Неопределено ИЛИ РабочийДень = Истина Тогда
					Прервать;	
				КонецЕсли;
				Срок = Срок + 24 * 60 * 60;
			КонецЦикла;
			Задача.СрокВыполнения = Срок;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТЧБП.РольПользователя) Тогда
			Задача.РольПользователя	= СтрокаТЧБП.РольПользователя;
			Задача.РольИсполнителя	= СтрокаТЧБП.РольПользователя;
		Иначе
			
			ВидДокумента = Справочники.Д_ВидыВнутреннихДокументов.НайтиПоРеквизиту("ИмяДокумента", Задача.Заявка.Метаданные().Имя);
			
			Если ЗначениеЗаполнено(ВидДокумента) Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				               |	РолиИсполнителей.Ссылка КАК Ссылка
				               |ИЗ
				               |	Справочник.РолиИсполнителей КАК РолиИсполнителей
				               |ГДЕ
				               |	РолиИсполнителей.ВидДокумента = &ВидДокумента
				               |	И РолиИсполнителей.РольПоУмолчанию = ИСТИНА";
				
				Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
				
				Результат = Запрос.Выполнить();
				Выборка = Результат.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					Задача.РольПользователя	= Выборка.Ссылка;
					Задача.РольИсполнителя	= Выборка.Ссылка;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//++ д1 10.10.18 вставка переопределяемых
	сабОбщегоНазначенияПереопределяемый.ДозаполнитьНоваяЗадача(Задача, Исполнитель, Заголовок, БП, ТочкаМаршрутаБизнесПроцесса, ВозвратСсылки, Предприятие, ДокументОбязательныйКПрикреплению, ВРаботе, СтрокаТЧБП);
	//--д1
	
	Задача.Записать();
	Если ВозвратСсылки Тогда
		Возврат Задача.Ссылка;
	Иначе
		Возврат Задача;
	КонецЕсли;
КонецФункции

Функция ВыполнитьКомандуЗадачиБП(Задача, ИмяКоманды, знач ДанныеФормы = Неопределено, ВызваноИзФормыЗадачи = истина, ИмяСоответствующейФормы = Неопределено) экспорт
	
	Если Задача.Выполнена Тогда 
		Сообщить("Задача " + Строка(Задача) + " уже выполнена пользователем " + Строка(Задача.Пользователь) + ".");
		Возврат Ложь;
	КонецЕсли;
	
	Если ПроверкаЗадачи(Задача) <> 0 тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДопДанные = Новый Структура;
	
	ДопДанные.Вставить("ИмяКоманды", ИмяКоманды);
	
	//Текущий пользователь недоступен при выгрузке из МУ, поэтому добавим вручную
	Если ДанныеФормы <> Неопределено и ДанныеФормы.Свойство("ТекущийПользователь") тогда
		ДопДанные.Вставить("ТекущийПользователь", ДанныеФормы.ТекущийПользователь);
	иначе
		ДопДанные.Вставить("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	КонецЕсли;
	
	Если ДанныеФормы <> Неопределено И ДанныеФормы.Свойство("Комментарий") тогда
		ДопДанные.Вставить("Комментарий", ДанныеФормы.Комментарий);
	Иначе
		ДопДанные.Вставить("Комментарий", "");
	КонецЕсли;
	
	Если ДанныеФормы <> Неопределено И ДанныеФормы.Свойство("СрокОкончания") тогда
		ДопДанные.Вставить("СрокОкончания", ДанныеФормы.СрокОкончания);
	Иначе
		ДопДанные.Вставить("СрокОкончания", Дата('00010101'));
	КонецЕсли;
	
	Если ДанныеФормы <> Неопределено И ДанныеФормы.Свойство("ОтправлятьКомментарий") тогда
		ДопДанные.Вставить("ОтправлятьКомментарий", ДанныеФормы.ОтправлятьКомментарий);
	Иначе
		ДопДанные.Вставить("ОтправлятьКомментарий", Ложь);
	КонецЕсли;
	
	Если ДанныеФормы <> Неопределено И ДанныеФормы.Свойство("СозданныйПользователь") тогда
		ДопДанные.Вставить("СозданныйПользователь", ДанныеФормы.СозданныйПользователь);
	Иначе
		ДопДанные.Вставить("СозданныйПользователь", Ложь);
	КонецЕсли;
	
	//если выполняем чисто задачку
	Если Не ЗначениеЗаполнено(Задача.Заявка) Тогда
		ЗадачаОб = Задача.ПолучитьОбъект();
		ЗадачаОб.Комментарии =  ДопДанные.Комментарий;
	   	ЗадачаОб.Выполнена = Истина;
		ЗадачаОб.ДатаИсполнения = ТекущаяДата();
	    ЗадачаОб.Записать();
		Возврат Истина;
	КонецЕсли;
	
	
	//   ========================
	// *** Оповещение и поручение ***
	
	//ЗаписатьЛогВЧат(" -- Зашел в БПСервер, Интерактивно = " + ВызваноИзФормыЗадачи);
	//ЗаписатьЛогВЧат("Задача = " + Задача);
	//ЗаписатьЛогВЧат("ИмяКоманды = " + ИмяКоманды);
	//ЗаписатьЛогВЧат(ДопДанные);
	//
	Если ТипЗнч(Задача.Заявка) = Тип("ДокументСсылка.БП_Оповещение") Тогда
		
		
		Если ИмяКоманды = "Выполнено" тогда
			Результат = Оповещение_Исполнение_ВыполненоСервер(Задача, Истина, Истина, ДопДанные);
		ИначеЕсли ИмяКоманды = "Отказаться" Тогда
			Результат = Оповещение_Исполнение_ВыполненоСервер(Задача, Ложь, Истина, ДопДанные);
		КонецЕсли;
		
		Возврат Результат;
		
	ИначеЕсли ТипЗнч(Задача.Заявка) = Тип("ДокументСсылка.БП_Поручение") Тогда
		
		Если ДанныеФормы.Свойство("ПрикрепитьДокумент") Тогда
			ДопДанные.Вставить("ПрикрепитьДокумент", ДанныеФормы.ПрикрепитьДокумент);
		КонецЕсли;
		Если ДанныеФормы.Свойство("ПричинаПросрочки") Тогда
			ДопДанные.Вставить("ПричинаПросрочки", ДанныеФормы.ПричинаПросрочки);
			КонецЕсли;
		Если ДанныеФормы.Свойство("ПричинаВозврата") Тогда
			ДопДанные.Вставить("ПричинаВозврата", ДанныеФормы.ПричинаВозврата);
		КонецЕсли;
		
		Если ИмяКоманды = "Выполнено" тогда                  //исполнитель выполняет задачу
			Результат = Поручение_Исполнение_ВыполненоСервер(Задача, ДопДанные);
		ИначеЕсли ИмяКоманды = "ЗаявкаСогласована" Тогда     //автор подтверждает ее выполнение
			Результат = Поручение_Контроль_ВыполненоСервер(Задача, Истина, ДопДанные);
		ИначеЕсли ИмяКоманды = "НаДоработку" Тогда            //автор возвращает задание обратно
			Результат = Поручение_Контроль_ВыполненоСервер(Задача, Ложь, ДопДанные);
		КонецЕсли;
		
		Возврат Результат;
		
	КонецЕсли;
	
	//   ========================
	// *** Заполнение дополнительных данных для бизнес-процессов ***
	
	БП = Задача.БизнесПроцесс;  //БП = БизнесПроцессы.Согласование1.НайтиПоНомеру(0);
	Если НЕ ЗначениеЗаполнено(ИмяСоответствующейФормы) Тогда
		ИмяСоответствующейФормы = БизнесПроцессы[БП.Метаданные().Имя].ИмяФормыВыполненияЗадачи(Задача.ТочкаМаршрута);
	КонецЕсли;
	
	Если ВызваноИзФормыЗадачи Тогда
		
		Если ДанныеФормы.Свойство("ДопОповещение") тогда          //Таблицы Адресаты и ДопОповещения выполняют одну и ту же функцию, Обзовем все ДопОповещение
			ДопДанные.Вставить("ДопОповещение", ДанныеФормыВЗначение(ДанныеФормы.ДопОповещение, Тип("ТаблицаЗначений")));
		ИначеЕсли ДанныеФормы.Свойство("Адресаты") тогда       
			ДопДанные.Вставить("ДопОповещение", ДанныеФормыВЗначение(ДанныеФормы.Адресаты, Тип("ТаблицаЗначений")));
		КонецЕсли;	
		
		Если ДанныеФормы.Свойство("ДопОповещениеПервоначальное") тогда      //Таблицы Адресаты и ДопОповещения выполняют одну и ту же функцию, Обзовем все ДопОповещение
			ДопДанные.Вставить("ДопОповещениеПервоначальное", ДанныеФормыВЗначение(ДанныеФормы.ДопОповещениеПервоначальное, Тип("ТаблицаЗначений")));
		ИначеЕсли ДанныеФормы.Свойство("АдресатыПервоначальное") тогда   
			ДопДанные.Вставить("ДопОповещениеПервоначальное", ДанныеФормыВЗначение(ДанныеФормы.АдресатыПервоначальное, Тип("ТаблицаЗначений")));
		КонецЕсли;	
		
		Если ДанныеФормы.Свойство("ДопИсполнение") тогда
			ДопДанные.Вставить("ДопИсполнение", ДанныеФормыВЗначение(ДанныеФормы.ДопИсполнение, Тип("ТаблицаЗначений")));
		КонецЕсли;		
		Если ДанныеФормы.Свойство("ДопИсполнениеПервоначальное") тогда
			ДопДанные.Вставить("ДопИсполнениеПервоначальное", ДанныеФормыВЗначение(ДанныеФормы.ДопИсполнениеПервоначальное, Тип("ТаблицаЗначений")));
		КонецЕсли;		
		Если ДанныеФормы.Свойство("ДопСогласование") тогда
			ДопДанные.Вставить("ДопСогласование", ДанныеФормыВЗначение(ДанныеФормы.ДопСогласование, Тип("ТаблицаЗначений")));
		КонецЕсли;		
		Если ДанныеФормы.Свойство("ДопСогласованиеПервоначальное") тогда
			ДопДанные.Вставить("ДопСогласованиеПервоначальное", ДанныеФормыВЗначение(ДанныеФормы.ДопСогласованиеПервоначальное, Тип("ТаблицаЗначений")));
		КонецЕсли;
		
		Если ДанныеФормы.Свойство("ТаблицаЧастичнойОплаты") тогда
			ДопДанные.Вставить("ТаблицаЧастичнойОплаты", ДанныеФормыВЗначение(ДанныеФормы.ТаблицаЧастичнойОплаты, Тип("ТаблицаЗначений")));
		КонецЕсли;		
		
		Если ДанныеФормы.Свойство("ЗаявкаЗакрыта") тогда
			ДопДанные.Вставить("ЗаявкаЗакрыта", ДанныеФормы.ЗаявкаЗакрыта);
		КонецЕсли;		
		
	Иначе //Для вызовов из обработок или мобильного приложения подгружаем таблицы из БП, не меняя их
		
		Если БП.Метаданные().ТабличныеЧасти.Найти("ДопОповещение") <> Неопределено тогда     //Таблицы Адресаты и ДопОповещения выполняют одну и ту же функцию, Обзовем все ДопОповещение
			ДопДанные.Вставить("ДопОповещение", БП.ДопОповещение.Выгрузить());
			ДопДанные.Вставить("ДопОповещениеПервоначальное", БП.ДопОповещение.Выгрузить());		
		ИначеЕсли БП.Метаданные().ТабличныеЧасти.Найти("Адресаты") <> Неопределено тогда  
			ДопДанные.Вставить("ДопОповещение", БП.Адресаты.Выгрузить());
			ДопДанные.Вставить("ДопОповещениеПервоначальное", БП.Адресаты.Выгрузить());
		КонецЕсли;
		
		Если БП.Метаданные().ТабличныеЧасти.Найти("ДопИсполнение") <> Неопределено тогда
			ДопДанные.Вставить("ДопИсполнение", БП.ДопИсполнение.Выгрузить());
			ДопДанные.Вставить("ДопИсполнениеПервоначальное", БП.ДопИсполнение.Выгрузить());
		КонецЕсли;
		Если БП.Метаданные().ТабличныеЧасти.Найти("ДопСогласование") <> Неопределено тогда
			ДопДанные.Вставить("ДопСогласование", БП.ДопСогласование.Выгрузить());
			ДопДанные.Вставить("ДопСогласованиеПервоначальное", БП.ДопСогласование.Выгрузить());
		КонецЕсли;
				
	КонецЕсли;
	
	//Дополнительные параметры для служебной записки
	//Если ТипЗнч(Задача.Заявка) = Тип("ДокументСсылка.Д_СлужебнаяЗаписка") Тогда
		Если ДанныеФормы <> Неопределено и ДанныеФормы.Свойство("ДопКомментарийОтправитьДалее") тогда
			ДопДанные.Вставить("ДопКомментарийОтправитьДалее", ДанныеФормы.ДопКомментарийОтправитьДалее);
		иначе
			ДопДанные.Вставить("ДопКомментарийОтправитьДалее", "");
		КонецЕсли;
	//КонецЕсли;
		
	//ЗаписатьЛогВЧат(" -- Зашел в БПСервер, Интерактивно = " + ВызваноИзФормыЗадачи);
	//ЗаписатьЛогВЧат("Задача = " + Задача);
	//ЗаписатьЛогВЧат("ИмяСоответствующейФормы = " + ИмяСоответствующейФормы);
	//ЗаписатьЛогВЧат("ИмяКоманды = " + ИмяКоманды);
	//ЗаписатьЛогВЧат(ДопДанные);
	
	// Согласование
	Если (ИмяСоответствующейФормы = "ФормаСогласования"
		ИЛИ Задача.ТочкаМаршрута = БизнесПроцессы.Согласование1.ТочкиМаршрута.Действие2
		ИЛИ Задача.ТочкаМаршрута = БизнесПроцессы.Согласование1.ТочкиМаршрута.Действие4
		ИЛИ Задача.ТочкаМаршрута = БизнесПроцессы.Согласование2.ТочкиМаршрута.Действие2
		ИЛИ Задача.ТочкаМаршрута = БизнесПроцессы.Согласование2.ТочкиМаршрута.Действие4
		ИЛИ Задача.ТочкаМаршрута = БизнесПроцессы.Согласование3.ТочкиМаршрута.Действие2
		ИЛИ Задача.ТочкаМаршрута = БизнесПроцессы.СогласованиеОбщее.ТочкиМаршрута.Действие2)		
		И НЕ ТипЗнч(БП) = Тип("БизнесПроцессСсылка.ЗаявкиАдминистратору") тогда 
		
		Если ТипЗнч(БП) = Тип("БизнесПроцессСсылка.Согласование1") или ТипЗнч(БП) = Тип("БизнесПроцессСсылка.СогласованиеОбщее") тогда
			
			Если ИмяКоманды = "ЗаявкаСогласована"  или ИмяКоманды = "ОтправитьДалее" тогда
				
				//добавляем Дивизионера в маршрут для строительного направления
				Если ИмяКоманды = "ОтправитьДалее" Тогда
					Дивизионер = ПолучитьСотрудникаПоОсновнойДолжности(Задача.Предприятие, Перечисления.ОсновныеДолжностиПредприятия.Дивизионер);
					Если ЗначениеЗаполнено(Дивизионер) И ЗначениеЗаполнено(Задача.Заявка) Тогда
						ТипВнДокумента = Справочники.Д_ВидыВнутреннихДокументов.НайтиПоРеквизиту("ИмяДокумента", Задача.Заявка.Метаданные().Имя);
						Если ЗначениеЗаполнено(ТипВнДокумента) И ТипВнДокумента.ДобавлятьУправляющегоПриОтказеСогласования Тогда
							НоваяСтрока = ДопДанные.ДопСогласование.Добавить();
							НоваяСтрока.СубъектСогласования = Дивизионер;
							НоваяСтрока.Обязателен = Истина;
						КонецЕсли; 
					КонецЕсли;
				КонецЕсли;
				//конецДобавления
				
				Результат = БПОбщее_Согласование_ВыполненоСервер(Задача, Истина, Истина, Задача.Исполнитель, ДопДанные);
			ИначеЕсли ИмяКоманды = "НаДоработку" тогда
				Результат = БПОбщее_Согласование_ВыполненоСервер(Задача, Ложь, Истина, Задача.Исполнитель, ДопДанные);
			ИначеЕсли ИмяКоманды = "ОтменаЗаявки" тогда
				Результат = БПОбщее_Согласование_ВыполненоСервер(Задача, Ложь, Ложь, Задача.Исполнитель, ДопДанные);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(БП) = Тип("БизнесПроцессСсылка.Согласование2") или ТипЗнч(БП) = Тип("БизнесПроцессСсылка.Согласование3") тогда
			
			Если ИмяКоманды = "ЗаявкаСогласована" или ИмяКоманды = "ОтправитьДалее" тогда
				Результат = БПСЗ_Согласование_ВыполненоСервер(Задача, Истина, Истина, Задача.Исполнитель, ДопДанные);
			ИначеЕсли ИмяКоманды = "НаДоработку" тогда
				Результат = БПСЗ_Согласование_ВыполненоСервер(Задача, Ложь, Истина, Задача.Исполнитель, ДопДанные);
			ИначеЕсли ИмяКоманды = "ОтменаЗаявки" тогда
				Результат = БПСЗ_Согласование_ВыполненоСервер(Задача, Ложь, Ложь, Задача.Автор, ДопДанные);
			КонецЕсли;
			
		КонецЕсли;
		
	// Контроль	
	ИначеЕсли (ИмяСоответствующейФормы = "ФормаКонтроля" 
		ИЛИ Задача.ТочкаМаршрута = БизнесПроцессы.Согласование1.ТочкиМаршрута.Действие3
		ИЛИ Задача.ТочкаМаршрута = БизнесПроцессы.Согласование2.ТочкиМаршрута.Действие3
		ИЛИ Задача.ТочкаМаршрута = БизнесПроцессы.Согласование3.ТочкиМаршрута.Действие3) И НЕ ТипЗнч(БП) = Тип("БизнесПроцессСсылка.ЗаявкиАдминистратору") Тогда //добавил точки Д1 от 30.07.14
		
			Если ИмяКоманды = "ЗаявкаСогласована" тогда
				Результат = КонтрольОФК_ВыполненоСервер(Задача, Истина, Истина, ДопДанные);
			ИначеЕсли ИмяКоманды = "НаДоработку" тогда
				Результат = КонтрольОФК_ВыполненоСервер(Задача, Ложь, Истина, ДопДанные);
			ИначеЕсли ИмяКоманды = "ОтменаЗаявки" тогда
				Результат = КонтрольОФК_ВыполненоСервер(Задача, Ложь, Ложь, ДопДанные);
			КонецЕсли;
		
	// Оплата или ознакомление	
	ИначеЕсли (ИмяСоответствующейФормы = "ФормаОплаты" 
		ИЛИ	Задача.ТочкаМаршрута = БизнесПроцессы.Согласование1.ТочкиМаршрута.Действие5
		ИЛИ	Задача.ТочкаМаршрута = БизнесПроцессы.Согласование2.ТочкиМаршрута.Действие5
		ИЛИ	Задача.ТочкаМаршрута = БизнесПроцессы.Согласование3.ТочкиМаршрута.Действие5
		ИЛИ	Задача.ТочкаМаршрута = БизнесПроцессы.Согласование3.ТочкиМаршрута.Действие6
		ИЛИ	Задача.ТочкаМаршрута = БизнесПроцессы.СогласованиеОбщее.ТочкиМаршрута.Действие5
		ИЛИ	Задача.ТочкаМаршрута = БизнесПроцессы.СогласованиеОбщее.ТочкиМаршрута.Действие4)
		И НЕ ТипЗнч(БП) = Тип("БизнесПроцессСсылка.ЗаявкиАдминистратору") тогда
			Если ИмяКоманды = "ЗаявкаОплачена" тогда
				Результат = Оплата_ВыполненоСервер(Задача, Истина, Истина, ДопДанные);
			ИначеЕсли ИмяКоманды = "НаДоработку" тогда
				Результат = Оплата_ВыполненоСервер(Задача, Ложь, Истина, ДопДанные);
			ИначеЕсли ИмяКоманды = "ОтменаЗаявки" тогда
				Результат = Оплата_ВыполненоСервер(Задача, Ложь, Ложь, ДопДанные);
			КонецЕсли;
			
	//Исполнение		
	ИначеЕсли (ИмяСоответствующейФормы = "ФормаИсполнения" 
		ИЛИ Задача.ТочкаМаршрута = БизнесПроцессы.СогласованиеОбщее.ТочкиМаршрута.Действие3
		ИЛИ Задача.ТочкаМаршрута = БизнесПроцессы.Согласование3.ТочкиМаршрута.Действие4)
		И НЕ ТипЗнч(БП) = Тип("БизнесПроцессСсылка.ЗаявкиАдминистратору")тогда
			Если ИмяКоманды = "ЗаявкаОплачена" тогда
				Результат = БПОбщее_Согласование_ИсполнитьСервер(Задача, Истина, Истина, Задача.Исполнитель, ДопДанные);
			ИначеЕсли ИмяКоманды = "НаДоработку" тогда
				Результат = БПОбщее_Согласование_ИсполнитьСервер(Задача, Ложь, Истина, Задача.Исполнитель, ДопДанные);
			ИначеЕсли ИмяКоманды = "ОтменаЗаявки" тогда
				Результат = БПОбщее_Согласование_ИсполнитьСервер(Задача, Ложь, Ложь, Задача.Исполнитель, ДопДанные);
			КонецЕсли;
			
		//подготовка		
	ИначеЕсли (ИмяСоответствующейФормы = "ФормаПодготовки" 
		ИЛИ Задача.ТочкаМаршрута = БизнесПроцессы.СогласованиеОбщее.ТочкиМаршрута.Действие1
		ИЛИ Задача.ТочкаМаршрута = БизнесПроцессы.Согласование1.ТочкиМаршрута.Действие1
		ИЛИ Задача.ТочкаМаршрута = БизнесПроцессы.Согласование2.ТочкиМаршрута.Действие1
		ИЛИ Задача.ТочкаМаршрута = БизнесПроцессы.Согласование3.ТочкиМаршрута.Действие1)
		И НЕ ТипЗнч(БП) = Тип("БизнесПроцессСсылка.ЗаявкиАдминистратору")тогда
			Если ИмяКоманды = "ЗаявкаОплачена" тогда
				Результат = БПОбщее_Согласование_ЗавершитьСервер(Задача, Истина, Истина, Задача.Исполнитель, ДопДанные);
			ИначеЕсли ИмяКоманды = "ОтправитьИЗакрыть" тогда
				Результат = БПОбщее_Согласование_ОтправитьСервер(Задача, Ложь, Истина, Задача.Исполнитель, ДопДанные);
			КонецЕсли;
			
	//универсальная форма
	ИначеЕсли ТипЗнч(БП) = Тип("БизнесПроцессСсылка.ЗаявкиАдминистратору") тогда
	
			Если ДанныеФормы <> Неопределено И ДанныеФормы.Свойство("ДобавляемыеВДоступИБ") тогда
				ДопДанные.Вставить("ДобавляемыеВДоступИБ", ДанныеФормы.ДобавляемыеВДоступИБ);
			Иначе
				ДопДанные.Вставить("ДобавляемыеВДоступИБ", Неопределено);
			КонецЕсли;
	
			Если ИмяКоманды = "ЗаявкаОплачена" ИЛИ ИмяКоманды = "ЗаявкаСогласована" тогда
				ДопДанные.Вставить("ИмяКоманды", ИмяКоманды);
				Результат = ОбращениеТП_ПринятьОтклонить(Задача, Истина, Истина, Задача.Исполнитель, ДопДанные);
			ИначеЕсли ИмяКоманды = "НаДоработку" тогда
				ДопДанные.Вставить("ИмяКоманды", ИмяКоманды);
				Результат = ОбращениеТП_ПринятьОтклонить(Задача, Ложь, Истина, Задача.Исполнитель, ДопДанные);
			ИначеЕсли ИмяКоманды = "Завершить" тогда
				ДопДанные.Вставить("ИмяКоманды", ИмяКоманды);
				Результат = БПОбщее_Согласование_ЗавершитьСервер(Задача, Ложь, Истина, Задача.Исполнитель, ДопДанные);
			КонецЕсли;
	КонецЕсли;
	
	//ЗаписатьЛогВЧат("Результат = " + Результат);
	//ЗаписатьЛогВЧат(" -- Вышел из БПСервер");
	БПСервер.ЗаписатьДействиеПользователяВЛог(Задача, ИмяКоманды);
		
	Возврат Результат;
	
КонецФункции

Процедура СкорректироватьЗадачиПриИзмененииМаршрута(БПОбъект) Экспорт
	
	Если ТипЗнч(БПОбъект) = Тип("БизнесПроцессОбъект.СогласованиеОбщее") И НЕ БПОбъект.ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Задача.Ссылка,
		               |	Задача.Исполнитель,
		               |	Задача.Заявка,
		               |	Задача.ИДГруппы
		               |ИЗ
		               |	Задача.Задача КАК Задача
		               |ГДЕ
		               |	Задача.БизнесПроцесс = &БизнесПроцесс
		               |	И Задача.Выполнена = ЛОЖЬ
		               |	И Задача.ТочкаМаршрута = &ТочкаМаршрута";
					 
		
		Запрос.УстановитьПараметр("БизнесПроцесс", БПОбъект.Ссылка);
		Запрос.УстановитьПараметр("ТочкаМаршрута", БизнесПроцессы.СогласованиеОбщее.ТочкиМаршрута.Действие2);
		
		Результат = Запрос.Выполнить();
		ВыборкаТЗ = Результат.Выгрузить();
		
		ПустойИДГруппы = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		
		//удаляем лишние задачи                                                           ,
		Для каждого Выборка Из ВыборкаТЗ Цикл
			ОтобранныеСроки = БПОбъект.ДопСогласование.НайтиСтроки(Новый Структура("СубъектСогласования, Согласовано", Выборка.Исполнитель, Ложь));
			Если Не ОтобранныеСроки.Количество() Тогда //пользоатель удален из маршрута
				КомментарийЗадачи = "Пользователь " + Строка(ПараметрыСеанса.ТекущийПользователь) + " удалил из маршрута пользователя " + Строка(Выборка.Исполнитель);
				БПСервер.ВыполнитьЗадачу(Выборка.Ссылка, 0, "", КомментарийЗадачи);
			КонецЕсли;
		КонецЦикла;
		
		//создаем недостающие задачи  
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Согласовано", Ложь);
		ПараметрыОтбора.Вставить("Пройден", Ложь);
		ОтобранныеСтрокиБП = БПОбъект.ДопСогласование.НайтиСтроки(ПараметрыОтбора);
		Для каждого ТекСтрока Из ОтобранныеСтрокиБП Цикл
			ОтобранныеСроки = ВыборкаТЗ.НайтиСтроки(Новый Структура("Исполнитель", ТекСтрока.СубъектСогласования));
			Если НЕ ОтобранныеСроки.Количество() Тогда
				Если БПОбъект.ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно И (ВыборкаТЗ.Количество() = 0 ИЛИ ВыборкаТЗ.Количество() <> 0 И (НЕ ВыборкаТЗ[0].ИДГруппы = ТекСтрока.ИдГруппы ИЛИ ТекСтрока.ИдГруппы = ПустойИДГруппы)) Тогда
					Продолжить;				
				КонецЕсли;
				Задача = БПСервер.НоваяЗадача(
				ТекСтрока.СубъектСогласования, 
				"Согласовать " + Выборка.Заявка.Метаданные().Синоним, 
				БПОбъект.Ссылка, 
				БизнесПроцессы.СогласованиеОбщее.ТочкиМаршрута.Действие2);
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	
КонецПроцедуры

Функция ПолучитьЗадачуИсполнителяПоЗаданию(ТекЗадание) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Задача.Ссылка
	               |ИЗ
	               |	Задача.Задача КАК Задача
	               |ГДЕ
	               |	ВЫРАЗИТЬ(Задача.Заявка КАК Документ.БП_Поручение) В (&Заявка)
	               |	И Задача.Исполнитель В(&Исполнитель)
	               |	И Задача.Выполнена = ЛОЖЬ
	               |	И Задача.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Заявка", ТекЗадание);
	Запрос.УстановитьПараметр("Исполнитель", ПараметрыСеанса.ДоступныеПользователи);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;		
	КонецЦикла;
	
	
	
КонецФункции // ()

Процедура ПеренаправитьЗадачиСервер(МассивЗадач, СтруктураПараметров, Отказ) Экспорт
	НачатьТранзакцию();
	Для каждого ТекЗадача Из МассивЗадач Цикл
		ТекИсполнитель = ТекЗадача.Исполнитель;
		ТекНаименование = ТекЗадача.Наименование;
		ТекБП = ТекЗадача.БизнесПроцесс;
		ТекЗаявка = ТекЗадача.Заявка;
		Если ЗначениеЗаполнено(ТекБП) Тогда
			ТекБПОбъект = ТекБП.ПолучитьОбъект();
			//опрашиваем каждый тип бизнес-процесса
			
			СоздаватьЗадачуКопированием = Ложь; //нужно в случае отсутствия табл части на точке маршрута
			//БП СогласованиеОбщее
			Если ТипЗнч(ТекБП) = Тип("БизнесПроцессСсылка.СогласованиеОбщее") Тогда
				Если ТекЗадача.ТочкаМаршрута = БизнесПроцессы.СогласованиеОбщее.ТочкиМаршрута.Действие2 Тогда
					ОтобранныеСтроки = ТекБПОбъект.ДопСогласование.НайтиСтроки(Новый Структура("СубъектСогласования, Пройден", ТекИсполнитель, Ложь)); 
					Для каждого ТекСтрока Из ОтобранныеСтроки Цикл
						ТекСтрока.СубъектСогласования = СтруктураПараметров.НовыйИсполнитель;
						Прервать; //находим первого, в случае нескольких одинаковых в маршруте
					КонецЦикла;
				ИначеЕсли ТекЗадача.ТочкаМаршрута = БизнесПроцессы.СогласованиеОбщее.ТочкиМаршрута.Действие3 Тогда
					ТекБПОбъект = ТекБП.ПолучитьОбъект();
					ОтобранныеСтроки = ТекБПОбъект.ДопИсполнение.НайтиСтроки(Новый Структура("Исполнитель, Исполнено", ТекИсполнитель, Ложь)); 
					Для каждого ТекСтрока Из ОтобранныеСтроки Цикл
						ТекСтрока.Исполнитель = СтруктураПараметров.НовыйИсполнитель;
						СоздаватьЗадачуКопированием = Истина;
						Прервать; //находим первого, в случае нескольких одинаковых в маршруте
					КонецЦикла;
				ИначеЕсли ТекЗадача.ТочкаМаршрута = БизнесПроцессы.СогласованиеОбщее.ТочкиМаршрута.Действие5 Тогда
					ТекБПОбъект = ТекБП.ПолучитьОбъект();
					ОтобранныеСтроки = ТекБПОбъект.ДопОповещение.НайтиСтроки(Новый Структура("Пользователь, Оповещен", ТекИсполнитель, Ложь)); 
					СоздаватьЗадачуКопированием = Истина;
					Для каждого ТекСтрока Из ОтобранныеСтроки Цикл
						ТекСтрока.Пользователь = СтруктураПараметров.НовыйИсполнитель;
						Прервать; //находим первого, в случае нескольких одинаковых в маршруте
					КонецЦикла;
				Иначе
					СоздаватьЗадачуКопированием = Истина;
				КонецЕсли;
			ИначеЕсли ТипЗнч(ТекБП) = Тип("БизнесПроцессСсылка.Согласование3") Тогда
				Если ТекЗадача.ТочкаМаршрута = БизнесПроцессы.Согласование3.ТочкиМаршрута.Действие2 Тогда
					ОтобранныеСтроки = ТекБПОбъект.ДопСогласование.НайтиСтроки(Новый Структура("СубъектСогласования, Пройден", ТекИсполнитель, Ложь)); 
					Для каждого ТекСтрока Из ОтобранныеСтроки Цикл
						ТекСтрока.СубъектСогласования = СтруктураПараметров.НовыйИсполнитель;
						Прервать; //находим первого, в случае нескольких одинаковых в маршруте
					КонецЦикла;
					СоздаватьЗадачуКопированием = ТекЗадача.Заявка.ОтправлятьВсем;
				ИначеЕсли ТекЗадача.ТочкаМаршрута = БизнесПроцессы.Согласование3.ТочкиМаршрута.Действие4 Тогда
					ТекБПОбъект = ТекБП.ПолучитьОбъект();
					ОтобранныеСтроки = ТекБПОбъект.ДопИсполнение.НайтиСтроки(Новый Структура("Исполнитель, Пройдено", ТекИсполнитель, Ложь)); 
					Для каждого ТекСтрока Из ОтобранныеСтроки Цикл
						ТекСтрока.Исполнитель = СтруктураПараметров.НовыйИсполнитель;
						СоздаватьЗадачуКопированием = Истина;
						Прервать; //находим первого, в случае нескольких одинаковых в маршруте
					КонецЦикла;
				ИначеЕсли ТекЗадача.ТочкаМаршрута = БизнесПроцессы.Согласование3.ТочкиМаршрута.Действие6 Тогда
					ТекБПОбъект = ТекБП.ПолучитьОбъект();
					ОтобранныеСтроки = ТекБПОбъект.Адресаты.НайтиСтроки(Новый Структура("СубъектСогласования, Согласовано", ТекИсполнитель, Ложь)); 
					СоздаватьЗадачуКопированием = Истина;
					Для каждого ТекСтрока Из ОтобранныеСтроки Цикл
						ТекСтрока.СубъектСогласования = СтруктураПараметров.НовыйИсполнитель;
						Прервать; //находим первого, в случае нескольких одинаковых в маршруте
					КонецЦикла;
				Иначе
					СоздаватьЗадачуКопированием = Истина;
				КонецЕсли;
			ИначеЕсли ТипЗнч(ТекБП) = Тип("БизнесПроцессСсылка.Согласование1") Тогда
				Если ТекЗадача.ТочкаМаршрута = БизнесПроцессы.Согласование1.ТочкиМаршрута.Действие2 ИЛИ ТекЗадача.ТочкаМаршрута = БизнесПроцессы.Согласование1.ТочкиМаршрута.Действие4 Тогда
					ОтобранныеСтроки = ТекБПОбъект.ДопСогласование.НайтиСтроки(Новый Структура("СубъектСогласования, Пройден", ТекИсполнитель, Ложь)); 
					Для каждого ТекСтрока Из ОтобранныеСтроки Цикл
						ТекСтрока.СубъектСогласования = СтруктураПараметров.НовыйИсполнитель;
						Прервать; //находим первого, в случае нескольких одинаковых в маршруте
					КонецЦикла;
				ИначеЕсли ТекЗадача.ТочкаМаршрута = БизнесПроцессы.Согласование1.ТочкиМаршрута.Действие5 Тогда
					ТекБПОбъект = ТекБП.ПолучитьОбъект();
					ОтобранныеСтроки = ТекБПОбъект.ДопИсполнение.НайтиСтроки(Новый Структура("Исполнитель, Пройдено", ТекИсполнитель, Ложь)); 
					Для каждого ТекСтрока Из ОтобранныеСтроки Цикл
						ТекСтрока.Исполнитель = СтруктураПараметров.НовыйИсполнитель;
						СоздаватьЗадачуКопированием = Истина;
						Прервать; //находим первого, в случае нескольких одинаковых в маршруте
					КонецЦикла;
				Иначе
					СоздаватьЗадачуКопированием = Истина;
				КонецЕсли;
			ИначеЕсли ТипЗнч(ТекБП) = Тип("БизнесПроцессСсылка.Согласование2") Тогда
				Если ТекЗадача.ТочкаМаршрута = БизнесПроцессы.Согласование2.ТочкиМаршрута.Действие2 ИЛИ ТекЗадача.ТочкаМаршрута = БизнесПроцессы.Согласование2.ТочкиМаршрута.Действие4 Тогда
					ОтобранныеСтроки = ТекБПОбъект.ДопСогласование.НайтиСтроки(Новый Структура("СубъектСогласования, Пройден", ТекИсполнитель, Ложь)); 
					Для каждого ТекСтрока Из ОтобранныеСтроки Цикл
						ТекСтрока.СубъектСогласования = СтруктураПараметров.НовыйИсполнитель;
						Прервать; //находим первого, в случае нескольких одинаковых в маршруте
					КонецЦикла;
				ИначеЕсли ТекЗадача.ТочкаМаршрута = БизнесПроцессы.Согласование1.ТочкиМаршрута.Действие5 Тогда
					ТекБПОбъект = ТекБП.ПолучитьОбъект();
					ОтобранныеСтроки = ТекБПОбъект.Адресаты.НайтиСтроки(Новый Структура("СубъектСогласования, Согласовано", ТекИсполнитель, Ложь)); 
					СоздаватьЗадачуКопированием = Истина;
					Для каждого ТекСтрока Из ОтобранныеСтроки Цикл
						ТекСтрока.СубъектСогласования = СтруктураПараметров.НовыйИсполнитель;
						Прервать; //находим первого, в случае нескольких одинаковых в маршруте
					КонецЦикла;
				Иначе
					СоздаватьЗадачуКопированием = Истина;
				КонецЕсли;
			ИначеЕсли ТипЗнч(ТекБП) = Тип("БизнесПроцессСсылка.ЗаявкиАдминистратору") Тогда
				Если ТекЗадача.ТочкаМаршрута = БизнесПроцессы.ЗаявкиАдминистратору.ТочкиМаршрута.Действие2 Тогда
					ОтобранныеСтроки = ТекБПОбъект.ДопСогласование.НайтиСтроки(Новый Структура("СубъектСогласования, Пройден", ТекИсполнитель, Ложь)); 
					Для каждого ТекСтрока Из ОтобранныеСтроки Цикл
						ТекСтрока.СубъектСогласования = СтруктураПараметров.НовыйИсполнитель;
						Прервать; //находим первого, в случае нескольких одинаковых в маршруте
					КонецЦикла;
				Иначе
					СоздаватьЗадачуКопированием = Истина;
					Если ТекЗадача.ТочкаМаршрута = БизнесПроцессы.ЗаявкиАдминистратору.ТочкиМаршрута.Действие4 Тогда
						БПСервер.ЗавершитьХронометражПоПредмету(ТекущаяДата(), ТекЗадача.Заявка);
						БПСервер.СтартоватьХронометражПоПредмету(ТекущаяДата(), ТекЗадача.Заявка, ТекЗадача.Заявка, СтруктураПараметров.НовыйИсполнитель);
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Отказ = Истина;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ТекЗаявка) = Тип("ДокументСсылка.БП_Оповещение") Тогда
			СоздаватьЗадачуКопированием = Истина;
			ТекБПОбъект = ТекЗаявка.ПолучитьОбъект();
			ОтобранныеСтроки = ТекБПОбъект.СписокИсполнителей.НайтиСтроки(Новый Структура("Исполнитель, Исполнено", ТекИсполнитель, Ложь)); 
			Для каждого Тектрока Из ОтобранныеСтроки Цикл
				Тектрока.Исполнено = Истина;
				Тектрока.ДатаВыполнения = ТекущаяДата();
				Тектрока.Комментарии = "Перенаправлено на " + Строка(СтруктураПараметров.НовыйИсполнитель);
			КонецЦикла; 
			НоваяСтрока = ТекБПОбъект.СписокИсполнителей.Добавить();
			НоваяСтрока.Исполнитель = СтруктураПараметров.НовыйИсполнитель;
			
		ИначеЕсли ТипЗнч(ТекЗаявка) = Тип("ДокументСсылка.БП_Поручение") Тогда
			СоздаватьЗадачуКопированием = Истина;
			ТекБПОбъект = ТекЗаявка.ПолучитьОбъект();
			ОтобранныеСтроки = ТекБПОбъект.СписокИсполнителей.НайтиСтроки(Новый Структура("Исполнитель, Исполнено", ТекИсполнитель, Ложь));
			Для каждого Тектрока Из ОтобранныеСтроки Цикл
				Тектрока.Исполнено = Истина;
				Тектрока.ДатаВыполнения = ТекущаяДата();
				Тектрока.Пользователь = ПараметрыСеанса.ТекущийПользователь;
				Тектрока.Комментарии = "Перенаправлено на " + Строка(СтруктураПараметров.НовыйИсполнитель);
			КонецЦикла; 
			НоваяСтрока = ТекБПОбъект.СписокИсполнителей.Добавить();
			НоваяСтрока.Исполнитель = СтруктураПараметров.НовыйИсполнитель;
			Если ОтобранныеСтроки.Количество() Тогда
				НоваяСтрока.СрокИсполнения = ОтобранныеСтроки[0].СрокИсполнения;
				НоваяСтрока.ПричинаВозврата = ОтобранныеСтроки[0].ПричинаВозврата;
			КонецЕсли;
			
		Иначе
			ТекБПОбъект = Неопределено;
			СоздаватьЗадачуКопированием = Истина;	
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			ТекПользовательАвтор = ?(ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПользователь), ПараметрыСеанса.ТекущийПользователь, Справочники.Пользователи.Система);
			Комментарий = "Пользователь " + Строка(ТекПользовательАвтор) + " перенаправил задачу на " + Строка(СтруктураПараметров.НовыйИсполнитель) + "." + ?(ЗначениеЗаполнено(СтруктураПараметров.Комментарий), " Комментарий: " + СтруктураПараметров.Комментарий, "");
			
			
			//Если СоздаватьЗадачуКопированием Тогда //когда нельзя выполнять
			
			
			НоваяЗадача = ТекЗадача.Скопировать();
			НоваяЗадача.Автор = ТекПользовательАвтор;
			НоваяЗадача.Дата = ТекущаяДата();
			НоваяЗадача.ДатаНачала = ТекущаяДата();
			НоваяЗадача.Наименование = СтрЗаменить(НоваяЗадача.Наименование, Строка(НоваяЗадача.Исполнитель), Строка(СтруктураПараметров.НовыйИсполнитель));
			НоваяЗадача.Исполнитель = СтруктураПараметров.НовыйИсполнитель;
			НоваяЗадача.БизнесПроцесс = ТекЗадача.БизнесПроцесс;
			НоваяЗадача.ТочкаМаршрута = ТекЗадача.ТочкаМаршрута;
			НоваяЗадача.ВРаботе = Ложь;
			НоваяЗадача.Записать();
			
			ТекЗадачаОбъект = ТекЗадача.ПолучитьОбъект();
			ТекЗадачаОбъект.Выполнена = Истина;
			ТекЗадачаОбъект.Комментарии = Комментарий;
			ТекЗадачаОбъект.Записать();
			
			
			Если НЕ ТекБПОбъект = Неопределено Тогда
				Если ТипЗнч(ТекБПОбъект) = Тип("БизнесПроцессОбъект.СогласованиеОбщее") Тогда
					ТекБПОбъект.ИсторияСогласования = ТекБПОбъект.ИсторияСогласования + ?(ТекБПОбъект.ИсторияСогласования = "", "", "
					|")+ Строка(ТекущаяДата()) + ": " + Комментарий;
				Иначе
					Попытка //пытаемся записать истрорию в БР
						ТекБПОбъект.Комментарии = ТекБПОбъект.Комментарии + ?(ТекБПОбъект.Комментарии = "", "", "
						|")+ Строка(ТекущаяДата()) + ": " + Комментарий;
					Исключение
					КонецПопытки;
				КонецЕсли;
				
				ТекБПОбъект.Записать();
			КонецЕсли;
			
			
			//Иначе	
			//	БПСервер.ВыполнитьЗадачу(ТекЗадача, 0, "", Комментарий);
			//КонецЕсли;
			//условие закомментил д1 13.07.16
		КонецЕсли;
		
		
	КонецЦикла; 
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура СнятьПометкуНовая(ТекЗадача, ОбновлятьСписокЗадач = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	БП_ДелегированиеЗадач.Замещающий
	               |ИЗ
	               |	РегистрСведений.БП_ДелегированиеЗадач КАК БП_ДелегированиеЗадач
	               |ГДЕ
	               |	БП_ДелегированиеЗадач.Задача = &Задача
	               |	И БП_ДелегированиеЗадач.Замещающий В(&Замещающий)";
	
	Запрос.УстановитьПараметр("Задача", ТекЗадача);
	Запрос.УстановитьПараметр("Замещающий", ПараметрыСеанса.ДоступныеПользователи);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать().Количество();
	
	Если Выборка Тогда
		
		НаборЗаписейНовыхЗадач = РегистрыСведений.ОтслеживаниеЗаявок.СоздатьНаборЗаписей();
		НаборЗаписейНовыхЗадач.Отбор.Документ.Установить(ТекЗадача);
		НаборЗаписейНовыхЗадач.Прочитать();
		НаборЗаписейНовыхЗадач.Очистить();
		НаборЗаписейНовыхЗадач.Записать();
		ОбновлятьСписокЗадач = Истина;
	КонецЕсли;
	
	
	//Если ТекЗадача.Новая Тогда
	//	ТекОб = ТекЗадача.ПолучитьОбъект();
	//	ТекОб.Новая = Ложь;
	//	ТекОб.Записать();
	//КонецЕсли;
	
КонецПроцедуры

Процедура ЗаголовокЗадачиИзЗаявки(Объект, ЭтаФорма) Экспорт

	Если  ЗначениеЗаполнено(Объект.Заявка) И Метаданные.Документы.Содержит(Объект.Заявка.Метаданные()) Тогда
		РеквизитыЗаявки = БюджетныйНаСервере.ВернутьРеквизиты(Объект.Заявка, "Номер, Дата");
		ЭтаФорма.АвтоЗаголовок = Ложь;
		ЭтаФорма.Заголовок = Объект.Наименование + " №" + РеквизитыЗаявки.Номер + " от " + РеквизитыЗаявки.Дата;
	КонецЕсли;
	

КонецПроцедуры // ()

Функция ИзменитьЗадачу(ТекБп, ТекЗаявка, РазрешитьРедактирвованиеДокумента, ПричинаОтмены = "", АдресВозврата = "Автор", Пользователь = Неопределено) Экспорт
	
	НачатьТранзакцию();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Задача.Ссылка,
	|	Задача.Исполнитель
	|ИЗ
	|	Задача.Задача КАК Задача
	|ГДЕ
	|	Задача.БизнесПроцесс = &БизнесПроцесс
	|	И Задача.Выполнена = ЛОЖЬ
	|	И Задача.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("БизнесПроцесс", ТекБп);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Комментарий = "Пользователь " + Строка(ПараметрыСеанса.ТекущийПользователь) + " вернул объект на доработку." + ?(ЗначениеЗаполнено(ПричинаОтмены), " Причина:" + ПричинаОтмены, "");
	//меняем маршрут
	ТекБПОбъект = ТекБп.ПолучитьОбъект();
	Пока Выборка.Следующий() Цикл
		СтруктураОтбора = Новый Структура("СубъектСогласования", Выборка.Исполнитель);
		Если РазрешитьРедактирвованиеДокумента Тогда
			ОтобранныеСтроки = ТекБПОбъект.ДопСогласование;
		Иначе
			ОтобранныеСтроки = ТекБПОбъект.ДопСогласование.НайтиСтроки(СтруктураОтбора);
		КонецЕсли;
		Для каждого ТекСтрока Из ОтобранныеСтроки Цикл
			ТекСтрока.Пользователь = ПараметрыСеанса.ТекущийПользователь;
			ТекСтрока.Согласовано = Ложь;
			ТекСтрока.НомерИтерации = ТекСтрока.НомерИтерации + 1;
			Если НЕ РазрешитьРедактирвованиеДокумента Тогда
				ТекСтрока.Пройден = Истина;
			ИначеЕсли НЕ ТекСтрока.Пройден Тогда 
				ТекСтрока.Пройден = Истина;
				Прервать;				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Попытка
		ТекБПОбъект.ОснованиеЗаблокирован = НЕ РазрешитьРедактирвованиеДокумента;
		ТекБПОбъект.Записать();
	Исключение
		Возврат Ложь;	
	КонецПопытки; 
	
	//выполняем задачу 
	Выборка.Сбросить();
	Пока Выборка.Следующий() Цикл
		Попытка
			БПСервер.ВыполнитьЗадачу(Выборка.Ссылка, 0, "", Комментарий);
		Исключение
			Возврат Ложь;	
		КонецПопытки;
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	Возврат Истина;
КонецФункции

#КонецОбласти 

#Область ОбщееСогласование
	
Функция ЗапретПлана(Предприятие, ЦФО, СтатьяДДС) Экспорт
	
	МассивПредприятий = БюджетныйНаСервере.ПолучитьПредприятия();
	
	
	
	//Если НЕ ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.ФинансистОфис Тогда
		Если Не ПустаяСтрока(ЦФО) И НЕ Предприятие = ЦФО Тогда
			
			Если НЕ МассивПредприятий.Найти(ЦФО) = Неопределено Тогда
				Возврат 0;
			КонецЕсли;
			
			
			
			Возврат 1;
			
		//КонецЕсли;
		
		
		
	КонецЕсли;
	Возврат 0;
	
КонецФункции // ЗапретПлана()

Процедура ОповеститьПользователяОбОтмененныхПозициях(Заявка) Экспорт
	
	ТекстОповещения = "";
	СтрукрутаПоиска = Новый Структура("ОтменаОплаты, Рецензент", Истина, ПараметрыСеанса.ТекущийПользователь);
	МассивПозиций = Заявка.ЗаявкаБезнал.НайтиСтроки(СтрукрутаПоиска);
	Если МассивПозиций.Количество() Тогда
		ТекстОповещения = ТекстОповещения + "Пользователь " + Строка(ПараметрыСеанса.ТекущийПользователь) + " отменил следующие оплаты в реестре платежей №" + Строка(Заявка.Номер) 
		+ " от " + Строка(Заявка.Дата) + ":";	
		Для каждого ТекПозиция Из МассивПозиций Цикл
			ТекстОповещения = ТекстОповещения + "
			| Позиция №" + Строка(ТекПозиция.НомерСтроки) + " на сумму " + Строка(ТекПозиция.СуммаДДС) + " по статье <" + Строка(ТекПозиция.СтатьяДДС) + "> (" 
			+ Строка(ТекПозиция.НазначениеПлатежа) + "). Причина: " + Строка(ТекПозиция.Комментарии);	
		КонецЦикла;   
	КонецЕсли;
	
	Если НЕ ТекстОповещения = "" Тогда
		НачатьТранзакцию();
		//создаем документ оповещение
		НовоеОповещение = Документы.БП_Оповещение.СоздатьДокумент();
		НовоеОповещение.Автор = ПараметрыСеанса.ТекущийПользователь;
		НовоеОповещение.Дата = ТекущаяДата();
		НовоеОповещение.ДатаНачала = ТекущаяДата();
		НовоеОповещение.Описание = ТекстОповещения;
		НовоеОповещение.Стартован = Истина;
		НоваяСтрока = НовоеОповещение.СписокИсполнителей.Добавить();
		НоваяСтрока.Исполнитель = Заявка.Автор;
		НовоеОповещение.Записать();
		
		НовоеОповещениеСсылка = НовоеОповещение.Ссылка;
		
		
		Задача = Задачи.Задача.СоздатьЗадачу();		
		Задача.Заявка = НовоеОповещениеСсылка;
		Задача.Дата = ТекущаяДата();
		Задача.Наименование = "Сообщение: частично отменена оплата в реестре платежей №" + Строка(Заявка.Номер);
		
		//Задача.БизнесПроцесс  = ЭтотОбъект.Ссылка;
		//Задача.ТочкаМаршрута  = ТочкаМаршрутаБизнесПроцесса;
		
		Задача.Автор = ПараметрыСеанса.ТекущийПользователь;
		Задача.Описание = ТекстОповещения;
		Задача.Исполнитель = Заявка.Автор;
		Задача.Записать();
		ЗафиксироватьТранзакцию();
		//ФормируемыеЗадачи.Добавить(Задача);
	КонецЕсли;
	
КонецПроцедуры

Процедура СогласованиеУтверждение(Задача, БП, ПроверкаУспешно, Пройден, НаДоработке, Исполнитель, ТЗ, Комментарий, ВидДокументСтрока, ОбновлятьТЧ = Истина, ТЗПервоначальное = Неопределено, ДопДанные = Неопределено) Экспорт
	
	//добавляем комментарии в историю переписки
	//добавлено д1. 11.12.17. для интерфейсной настройки комментов
	Если ЗначениеЗаполнено(Задача.РольИсполнителя) Тогда
		КомУтвердительно = ?(ЗначениеЗаполнено(Задача.РольИсполнителя.КомментарийЖурналУтвердительно), Задача.РольИсполнителя.КомментарийЖурналУтвердительно, "Согласовано");
		КомОтрицательно = ?(ЗначениеЗаполнено(Задача.РольИсполнителя.КомментарийЖурналОтрицательно), Задача.РольИсполнителя.КомментарийЖурналОтрицательно, "Не согласовано");
		КомСЗамечаниями = ?(ЗначениеЗаполнено(Задача.РольИсполнителя.КомментарийЖурналСЗамечаниями), Задача.РольИсполнителя.КомментарийЖурналСЗамечаниями, "Согласовано с замечаниями");
	Иначе
		КомУтвердительно = "Согласовано";
		КомОтрицательно = "Не согласовано";
		КомСЗамечаниями = "Согласовано с замечаниями";
	КонецЕсли;//конец добавления д1. 11.12.17

	ИмяКоманды = Неопределено;
	РезультатВыполнения = Неопределено;
	Если НЕ ДопДанные = Неопределено Тогда
		Если ДопДанные.Свойство("ИмяКоманды") Тогда
			ИмяКоманды = ДопДанные.ИмяКоманды;
		КонецЕсли;
		Если ДопДанные.Свойство("РезультатВыполнения") Тогда
			РезультатВыполнения = ДопДанные.РезультатВыполнения;
		КонецЕсли;
	КонецЕсли;
	
	Если Пройден Тогда
		ЗадачаКомментарии = Строка(ТекущаяДата()) + ": " + ?(ПроверкаУспешно, ?(ИмяКоманды = "ОтправитьДалее", КомСЗамечаниями, КомУтвердительно), КомОтрицательно) + " пользователем " + Строка(ПараметрыСеанса.ТекущийПользователь) + ":
		|" + ?(ЗначениеЗаполнено(Комментарий), Комментарий, "--комментарий отсутствует--");
		Если ТипЗнч(БП) = Тип("БизнесПроцессОбъект.СогласованиеОбщее") Тогда
			БП.ИсторияСогласования = БП.ИсторияСогласования + ?(ПустаяСтрока(БП.ИсторияСогласования), "", "
			|") + ЗадачаКомментарии;
		Иначе
			БП.Комментарии = БП.Комментарии + ?(ПустаяСтрока(БП.Комментарии), "", "
			|") + ЗадачаКомментарии;
		КонецЕсли;
	КонецЕсли;
	
	//умная обработка ТЗ
	//добавляем новые
	Если НЕ ТЗПервоначальное = Неопределено И (ТипЗнч(БП.Ссылка) = Тип("БизнесПроцессСсылка.СогласованиеОбщее") ИЛИ ТипЗнч(БП.Ссылка) = Тип("БизнесПроцессСсылка.Согласование1")) И (НЕ БП.ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно) Тогда
		
		НоваяТЗ = ТЗ.Скопировать();
		ОтобранныеСтроки = НоваяТЗ.НайтиСтроки(Новый Структура("Согласовано", Истина));
		Для каждого ТекСтрока Из ОтобранныеСтроки Цикл
			НоваяТЗ.Удалить(ТекСтрока);
		КонецЦикла; 
		
		МассивНовых = Новый Массив;
		Для каждого ТекСтрока Из НоваяТЗ Цикл
			Если ТЗПервоначальное.Найти(ТекСтрока.СубъектСогласования, "СубъектСогласования") = Неопределено Тогда
				
				СтрокаИсходная = ТЗ.Найти(ТекСтрока.СубъектСогласования);
				Если НЕ СтрокаИсходная = Неопределено Тогда
					ИндексСтроки = ТЗ.Индекс(СтрокаИсходная);
				Иначе
					ИндексСтроки = ТЗ.Количество() - 1;
				КонецЕсли;
				
				НоваяСтрока = БП.ДопСогласование.Вставить(ИндексСтроки);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока); 
				//НоваяСтрока.СубъектСогласования = ТекСтрока.СубъектСогласования;		
			КонецЕсли;
		КонецЦикла;
		
		//удаляем "лишние"
		МассивУдаленных = Новый Массив;
		Для каждого ТекСтрока Из ТЗПервоначальное Цикл
			Если НоваяТЗ.Найти(ТекСтрока.СубъектСогласования, "СубъектСогласования") = Неопределено Тогда
				МассивУдаленных.Добавить(ТекСтрока.СубъектСогласования);
			КонецЕсли;
		КонецЦикла;
		Для каждого ТекУдаленный Из МассивУдаленных Цикл
			ОтобранныеСтроки = БП.ДопСогласование.НайтиСтроки(Новый Структура("СубъектСогласования, Согласовано", ТекУдаленный, Ложь));
			Для каждого ТекСтрока Из ОтобранныеСтроки Цикл
				БП.ДопСогласование.Удалить(ТекСтрока);		
			КонецЦикла; 
		КонецЦикла;
	Иначе
		Если НЕ ТЗ = Неопределено Тогда
			БП.ДопСогласование.Загрузить(ТЗ);	
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПроверкаУспешно И НЕ Пройден Тогда
		Строки = БП.ДопСогласование.НайтиСтроки(Новый Структура("Пользователь", ПараметрыСеанса.ТекущийПользователь));  //если заявку отменили
	Иначе	
		Строки = БП.ДопСогласование.НайтиСтроки(Новый Структура("СубъектСогласования", Исполнитель));
	КонецЕсли;	
	
	Если Строки.Количество() = 0 Тогда //если нет в списке рецензентов (например автор или офк)
		//Исполнитель = Задача.Исполнитель;
		Пройден = Истина;
		Строки = БП.ДопСогласование.НайтиСтроки(Новый Структура("СубъектСогласования", Задача.Исполнитель));
	КонецЕсли;
	
	Для каждого ТекСтрока Из Строки Цикл
		Если ТекСтрока.Пройден И ТекСтрока.Согласовано И ПроверкаУспешно Тогда   // для работы механизма "ОТМЕНЫ СОГЛАСОВАНИЯ"
			Продолжить;
		КонецЕсли;	
		ТекСтрока.Пройден = Пройден;
		ТекСтрока.Согласовано = ПроверкаУспешно;
		ТекСтрока.ДатаВыполнения = ТекущаяДата();
		ТекСтрока.Комментарии = ?(Пройден, Комментарий, "Отменил(а) " + ВидДокументСтрока + ". " + Комментарий);
		ТекСтрока.Пользователь = ПараметрыСеанса.ТекущийПользователь;
		ТекСтрока.РезультатВыполнения = РезультатВыполнения;
		Если Пройден Тогда
			НаДоработке = 1 - ПроверкаУспешно;
		КонецЕсли;
		Прервать;
		//ТекСтрока.НомерИтерации = ТекСтрока.НомерИтерации + 1;
	КонецЦикла;
	
	//если последний утвердил СЗ, но не все утвердили, то статус "на доработке"
	ПройденыНеВсе = БП.ДопСогласование.НайтиСтроки(Новый Структура("Пройден", Ложь));
	Если ПройденыНеВсе.Количество() = 0 Тогда
		СогласовалиВсеВсе = БП.ДопСогласование.НайтиСтроки(Новый Структура("Согласовано", Ложь));
		Если СогласовалиВсеВсе.Количество() <> 0 Тогда
			НаДоработке = Истина;		
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ОбработатьИсполнение(Задача, БП, ПроверкаУспешно, Пройден, НаДоработке, Исполнитель, ТЗ, Комментарий, ВидДокументСтрока, ТЗПервоначальное) Экспорт
	
	//добавляем комментарии в историю переписки
	Если Пройден Тогда
		Задача.Комментарии = Строка(ТекущаяДата()) + ": "  + ?(ПроверкаУспешно, "Исполнено ", "Отклонено исполнение ") + " пользователем " + Строка(ПараметрыСеанса.ТекущийПользователь) + ":
		|" + ?(ЗначениеЗаполнено(Комментарий), Комментарий, "--комментарий отсутствует--");
		БП.Комментарии = БП.Комментарии + ?(ПустаяСтрока(БП.Комментарии), "", "
		|") + Задача.Комментарии;
	КонецЕсли;
	
	ДобавитьИсполнителей(БП, ТЗ, ТЗПервоначальное);
	
	Строки = БП.ДопИсполнение.НайтиСтроки(Новый Структура("Исполнитель", Исполнитель));
	
	Если НЕ Строки.Количество() Тогда //если нет в списке рецензентов (например автор или офк)
		Исполнитель = Задача.Исполнитель;
		Пройден = Истина;
		Строки = БП.ДопИсполнение.НайтиСтроки(Новый Структура("Исполнитель", Исполнитель));
	КонецЕсли;
	
	Для каждого ТекСтрока Из Строки Цикл
		ТекСтрока.Пройдено = Пройден;
		ТекСтрока.Исполнено = ПроверкаУспешно;
		ТекСтрока.Комментарии = ?(Пройден, Комментарий, "Отменил(а) " + ВидДокументСтрока + ". " + Комментарий);
		ТекСтрока.Пользователь = ПараметрыСеанса.ТекущийПользователь;
		Если Пройден Тогда
			НаДоработке = 1 - ПроверкаУспешно;
		КонецЕсли;
	КонецЦикла;
	
	//если последний утвердил СЗ, но не все утвердили, то статус "на доработке"
	ПройденыНеВсе = БП.ДопИсполнение.НайтиСтроки(Новый Структура("Пройдено", Ложь));
	Если НЕ ПройденыНеВсе.Количество() Тогда
		ИсполнилиВсе = БП.ДопИсполнение.НайтиСтроки(Новый Структура("Исполнено", Ложь));
		Если ИсполнилиВсе.Количество() Тогда
			НаДоработке = Истина;		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

#КонецОбласти 

#Область РаботаСПользователями
	
Функция ПолучитьМассивПользователей(Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	сабОтпускаСотрудников.Пользователь,
	               |	сабОтпускаСотрудников.Замещающий
	               |ИЗ
	               |	Справочник.сабОтпускаСотрудников КАК сабОтпускаСотрудников
	               |ГДЕ
	               |	сабОтпускаСотрудников.ПользовательСогласовал = ИСТИНА
	               |	И сабОтпускаСотрудников.ЗамещающийСогласовал = ИСТИНА
	               |	И сабОтпускаСотрудников.ДатаНачала <= &ТекДата
	               |	И сабОтпускаСотрудников.ДатаОкончания >= &ТекДата
	               |	И сабОтпускаСотрудников.Замещающий = &Испол
	               |	И сабОтпускаСотрудников.ПометкаУдаления = ЛОЖЬ
	               |	И НЕ сабОтпускаСотрудников.ОтпускникОтсутствуетВБазе";
	
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Испол", Пользователь);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	МассивПользователей = Новый Массив;
	
	
	//в случае замещения должностей добавляеюся пользователи-отпускники и их должности
	Пока Выборка.Следующий() Цикл
		
		Отпускник = Выборка.Пользователь;
		МассивПользователей.Добавить(Отпускник);
		
		// 25.09.2015 добавляем тех, кого замещает отпускник {
		ЗапросЗам = Новый Запрос;
		ЗапросЗам.Текст = "ВЫБРАТЬ
		                  |	сабОтпускаСотрудников.Пользователь,
		                  |	сабОтпускаСотрудников.Замещающий
		                  |ИЗ
		                  |	Справочник.сабОтпускаСотрудников КАК сабОтпускаСотрудников
		                  |ГДЕ
		                  |	сабОтпускаСотрудников.ПользовательСогласовал = ИСТИНА
		                  |	И сабОтпускаСотрудников.ЗамещающийСогласовал = ИСТИНА
		                  |	И сабОтпускаСотрудников.ДатаНачала <= &ТекДата
		                  |	И сабОтпускаСотрудников.ДатаОкончания >= &ТекДата
		                  |	И сабОтпускаСотрудников.Замещающий = &Испол
		                  |	И сабОтпускаСотрудников.ПометкаУдаления = ЛОЖЬ
		                  |	И НЕ сабОтпускаСотрудников.ОтпускникОтсутствуетВБазе";
		
		ЗапросЗам.УстановитьПараметр("ТекДата", ТекущаяДата());
		ЗапросЗам.УстановитьПараметр("Испол", Отпускник);
		
		РезультатЗам = ЗапросЗам.Выполнить();
		ВыборкаЗам = РезультатЗам.Выбрать();
		
		Пока ВыборкаЗам.Следующий() Цикл
			МассивПользователей.Добавить(ВыборкаЗам.Пользователь);
		КонецЦикла;
		//}
		
	КонецЦикла;
	
	МассивПользователей.Добавить(Пользователь);
	
	
	//добавляем группы пользователей
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ГруппыПользователей.Ссылка
	               |ИЗ
	               |	Справочник.ГруппыПользователей КАК ГруппыПользователей
	               |ГДЕ
	               |	ГруппыПользователей.Состав.Пользователь В(&Пользователи)";
	
	Запрос.УстановитьПараметр("Пользователи", МассивПользователей);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивПользователей.Добавить(Выборка.Ссылка);		
	КонецЦикла;
	
	Возврат МассивПользователей;
	
КонецФункции // ()

Функция ПолучитьЗамещающихОтпускника(Отпускник) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	сабОтпускаСотрудников.Пользователь КАК Пользователь,
	|	сабОтпускаСотрудников.Замещающий КАК Замещающий
	|ИЗ
	|	Справочник.сабОтпускаСотрудников КАК сабОтпускаСотрудников
	|ГДЕ
	|	сабОтпускаСотрудников.ПользовательСогласовал = ИСТИНА
	|	И сабОтпускаСотрудников.ЗамещающийСогласовал = ИСТИНА
	|	И сабОтпускаСотрудников.ДатаНачала <= &ТекДата
	|	И сабОтпускаСотрудников.ДатаОкончания >= &ТекДата
	|	И сабОтпускаСотрудников.ПометкаУдаления = ЛОЖЬ
	|	И НЕ сабОтпускаСотрудников.ОтпускникОтсутствуетВБазе
	|	И сабОтпускаСотрудников.Пользователь = &Пользователь
	|
	|СГРУППИРОВАТЬ ПО
	|	сабОтпускаСотрудников.Замещающий,
	|	сабОтпускаСотрудников.Пользователь";
	
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Пользователь", Отпускник);
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("Замещающий");
	
КонецФункции // ()

Функция ВернутьЗамещающего(ТекПользователь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	сабОтпускаСотрудников.Пользователь,
	|	сабОтпускаСотрудников.Замещающий,
	|	сабОтпускаСотрудников.ДатаОкончания
	|ИЗ
	|	Справочник.сабОтпускаСотрудников КАК сабОтпускаСотрудников
	|ГДЕ
	|	сабОтпускаСотрудников.ПользовательСогласовал = ИСТИНА
	|	И сабОтпускаСотрудников.ЗамещающийСогласовал = ИСТИНА
	|	И сабОтпускаСотрудников.ДатаНачала <= &ТекДата
	|	И сабОтпускаСотрудников.ДатаОкончания >= &ТекДата
	|	И сабОтпускаСотрудников.Пользователь = &Испол
	|	И сабОтпускаСотрудников.ПометкаУдаления = ЛОЖЬ
	|	И сабОтпускаСотрудников.ТехническийОтпуск = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Испол", ТекПользователь);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ДатаОкончания = Неопределено;
	ОбъектВозврата = ТекПользователь;
	
	Пока Выборка.Следующий() Цикл
		ОбъектВозврата = Выборка.Замещающий;
		ДатаОкончания = Выборка.ДатаОкончания;
	КонецЦикла;
	
	Возврат Новый Структура("ТекПользователь, ДатаОкончания", ОбъектВозврата, ДатаОкончания) ;
	
КонецФункции // ()

Функция ПолучитьДолжность(ТекДата, ТекПользователь) Экспорт
	Если ТекПользователь.Пустая() Тогда
		Возврат Неопределено;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ДолжностиПользователяСрезПоследних.Должность
		|ИЗ
		|	РегистрСведений.ДолжностиПользователя.СрезПоследних(, Пользователь = &Пользователь) КАК ДолжностиПользователяСрезПоследних";
		
		Запрос.УстановитьПараметр("Пользователь", ТекПользователь);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Возврат Выборка.Должность;	
			
		КонецЦикла;
	КонецЕсли; 
КонецФункции // ()

Функция ПолучитьИмяИДолжностьПользователя(Период, Пользователь) Экспорт
	
	Должности = РегистрыСведений.ДолжностиПользователя.СрезПоследних(Период, Новый Структура("Пользователь", Пользователь) );
	
	Если Должности.Количество() Тогда
		ТекДолжность = Должности[0].Должность;			
	КонецЕсли;
	
	Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") И Пользователь.ШифроватьсяВДокументообороте = Истина И ЗначениеЗаполнено(ТекДолжность) Тогда 
		ПредставлениеПользователя = "";
		Должность = Строка(ТекДолжность);
	ИначеЕсли ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") И Пользователь.ШифроватьсяВДокументообороте = Истина И НЕ ЗначениеЗаполнено(ТекДолжность) Тогда
		ПредставлениеПользователя = Пользователь.Наименование;
		Должность = "";
	Иначе
		ПредставлениеПользователя = Пользователь.Наименование;
		Должность = ?(ЗначениеЗаполнено(ТекДолжность), "(" + Строка(ТекДолжность) + ")", "");
	КонецЕсли;
	
	СтруктураВозврата  = Новый Структура();
	СтруктураВозврата.Вставить("ПредставлениеПользователя", ПредставлениеПользователя);
	СтруктураВозврата.Вставить("Должность", Должность);
	
	Возврат СтруктураВозврата;
	
КонецФункции	

Функция ПолучитьСотрудникаПоОсновнойДолжности(Предприятие, Должность, Подразделение = Неопределено) Экспорт
	Если Не ЗначениеЗаполнено(Предприятие) Тогда
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОсновныеДолжностиПредприятия.Сотрудник,
	|	ИСТИНА КАК ПроверочноеПоле
	|ПОМЕСТИТЬ ВТ_ПоПодразделениям
	|ИЗ
	|	РегистрСведений.ОсновныеДолжностиПредприятия КАК ОсновныеДолжностиПредприятия
	|ГДЕ
	|	ОсновныеДолжностиПредприятия.Предприятие = &Предприятие
	|	И ОсновныеДолжностиПредприятия.Должность = &Должность
	|	И ОсновныеДолжностиПредприятия.Подразделение = &Подразделение
	|	И НЕ ОсновныеДолжностиПредприятия.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПоПодразделениям.Сотрудник
	|ИЗ
	|	ВТ_ПоПодразделениям КАК ВТ_ПоПодразделениям
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОсновныеДолжностиПредприятия.Сотрудник
	|ИЗ
	|	РегистрСведений.ОсновныеДолжностиПредприятия КАК ОсновныеДолжностиПредприятия
	|ГДЕ
	|	ОсновныеДолжностиПредприятия.Предприятие = &Предприятие
	|	И ОсновныеДолжностиПредприятия.Должность = &Должность
	|	И ОсновныеДолжностиПредприятия.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|	И НЕ ИСТИНА В
	|				(ВЫБРАТЬ
	|					ВТ_ПоПодразделениям.ПроверочноеПоле
	|				ИЗ
	|					ВТ_ПоПодразделениям КАК ВТ_ПоПодразделениям)";
	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	Запрос.УстановитьПараметр("Должность", Должность);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.Пользователи.ПустаяСсылка();
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Сотрудник;
		КонецЦикла;
	КонецЕсли;	
	
КонецФункции

//Записывает текущийСтатус пользователя
Процедура ЗаписатьТекущийСтатус(ТекущийСтатус, Пользователь = Неопределено, ДействителенДо = Неопределено, Дата = Неопределено) Экспорт
	НоборЗаписей = РегистрыСведений.БП_ТекущиеСтатусы.СоздатьМенеджерЗаписи();
    НоборЗаписей.Период = ?(Дата = Неопределено, ТекущаяДата(), Дата);
	НоборЗаписей.Пользователь = ?(Пользователь = Неопределено, ПараметрыСеанса.ТекущийПользователь, Пользователь);
	НоборЗаписей.ТекущийСтатус = ТекущийСтатус;
	НоборЗаписей.ДействителенДо = ДействителенДо;	
	НоборЗаписей.Записать();
КонецПроцедуры

Функция ПолучитьТекущийСтатус(ТекПользователь = Неопределено) Экспорт
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
               |	БП_ТекущиеСтатусыСрезПоследних.Период,
               |	БП_ТекущиеСтатусыСрезПоследних.Пользователь,
               |	БП_ТекущиеСтатусыСрезПоследних.ТекущийСтатус,
               |	БП_ТекущиеСтатусыСрезПоследних.ДействителенДо
               |ИЗ
               |	РегистрСведений.БП_ТекущиеСтатусы.СрезПоследних(&Дата, Пользователь = &Пользователь) КАК БП_ТекущиеСтатусыСрезПоследних";

Запрос.УстановитьПараметр("Пользователь", ?(ТекПользователь = Неопределено, ПараметрыСеанса.ТекущийПользователь, ТекПользователь));
Запрос.УстановитьПараметр("Дата", ТекущаяДата());
Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();

Пока Выборка.Следующий() Цикл

	Возврат Новый Структура("Период, Пользователь, ТекущийСтатус, ДействителенДо", Выборка.Период, Выборка.Пользователь, Выборка.ТекущийСтатус, Выборка.ДействителенДо) ;	

КонецЦикла;

	

КонецФункции // ()

//т.к. добавлено делегирование, то у 1 задачи может быть несколько исполнителей
//данная функция опрашивает их все
Функция ТекПользовательИсполнительЗадачи(ТекЗадача, ПроверятьПодчиненных = Ложь) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	БП_ДелегированиеЗадач.Замещающий КАК Исполнитель,
	               |	NULL КАК Пользователь
	               |ИЗ
	               |	РегистрСведений.БП_ДелегированиеЗадач КАК БП_ДелегированиеЗадач
	               |ГДЕ
	               |	БП_ДелегированиеЗадач.Задача В(&Задача)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	NULL,
	               |	ГруппыПользователейСостав.Пользователь
	               |ИЗ
	               |	РегистрСведений.БП_ДелегированиеЗадач КАК БП_ДелегированиеЗадач
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	               |		ПО БП_ДелегированиеЗадач.Замещающий = ГруппыПользователейСостав.Ссылка
	               |ГДЕ
	               |	БП_ДелегированиеЗадач.Задача В(&Задача)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ГруппыПользователейСостав.Пользователь";             
	
	Запрос.УстановитьПараметр("Задача", ТекЗадача);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если НЕ ПараметрыСеанса.ДоступныеПользователи.Найти(Выборка.Исполнитель) = Неопределено Тогда
			Возврат Истина;
		КонецЕсли; 	
		Если ПроверятьПодчиненных И НЕ БПСервер.ПолучитьМассивПрямыхПодчиненных().Найти(Выборка.Исполнитель) = Неопределено Тогда
			Возврат Истина;
		КонецЕсли; 	
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

Функция ТекПользовательИсполнительДокумента(ТекДокумент, ПроверкаВозможностиРедактирования = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Метаданные.ОпределяемыеТипы.сабЗаявкиБизнесПроцессов.Тип.СодержитТип(ТипЗнч(ТекДокумент)) = Ложь Тогда //для не согласуемых документов возврадаем истина
		Возврат Истина;	
	КонецЕсли;
	
	//для прочих объектов всегда можно редактировать
	Попытка
		
		Если НЕ Метаданные.ЖурналыДокументов.ВнутренниеДокументы.РегистрируемыеДокументы.Содержит(ТекДокумент.Метаданные()) Тогда
			Возврат Истина;	
		КонецЕсли;
		
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Согласование1Точки.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ТочкиДоработки
	               |ИЗ
	               |	БизнесПроцесс.Согласование1.Точки КАК Согласование1Точки
	               |ГДЕ
	               |	Согласование1Точки.Ссылка = ЗНАЧЕНИЕ(БизнесПроцесс.Согласование1.ТочкаМаршрута.Действие1)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Согласование2Точки.Ссылка
	               |ИЗ
	               |	БизнесПроцесс.Согласование2.Точки КАК Согласование2Точки
	               |ГДЕ
	               |	Согласование2Точки.Ссылка = ЗНАЧЕНИЕ(БизнесПроцесс.Согласование2.ТочкаМаршрута.Действие1)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Согласование3Точки.Ссылка
	               |ИЗ
	               |	БизнесПроцесс.Согласование3.Точки КАК Согласование3Точки
	               |ГДЕ
	               |	Согласование3Точки.Ссылка = ЗНАЧЕНИЕ(БизнесПроцесс.Согласование3.ТочкаМаршрута.Действие1)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	УтверждениеБюджетаТочки.Ссылка
	               |ИЗ
	               |	БизнесПроцесс.УтверждениеБюджета.Точки КАК УтверждениеБюджетаТочки
	               |ГДЕ
	               |	УтверждениеБюджетаТочки.Ссылка = ЗНАЧЕНИЕ(БизнесПроцесс.УтверждениеБюджета.ТочкаМаршрута.Действие1)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗаявкиАдминистраторуТочки.Ссылка
	               |ИЗ
	               |	БизнесПроцесс.ЗаявкиАдминистратору.Точки КАК ЗаявкиАдминистраторуТочки
	               |ГДЕ
	               |	(ЗаявкиАдминистраторуТочки.Ссылка = ЗНАЧЕНИЕ(БизнесПроцесс.ЗаявкиАдминистратору.ТочкаМаршрута.Действие1)
	               |			ИЛИ ЗаявкиАдминистраторуТочки.Ссылка = ЗНАЧЕНИЕ(БизнесПроцесс.ЗаявкиАдминистратору.ТочкаМаршрута.Действие3)
	               |			ИЛИ ЗаявкиАдминистраторуТочки.Ссылка = ЗНАЧЕНИЕ(БизнесПроцесс.ЗаявкиАдминистратору.ТочкаМаршрута.Действие4))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	СогласованиеОбщееТочки.Ссылка
	               |ИЗ
	               |	БизнесПроцесс.СогласованиеОбщее.Точки КАК СогласованиеОбщееТочки
	               |ГДЕ
	               |	СогласованиеОбщееТочки.Ссылка = ЗНАЧЕНИЕ(БизнесПроцесс.СогласованиеОбщее.ТочкаМаршрута.Действие1)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Согласование1ДопСогласование.СубъектСогласования КАК СубъектСогласования,
	               |	ЛОЖЬ КАК МожетРедактировать
	               |ПОМЕСТИТЬ Разрешения
	               |ИЗ
	               |	БизнесПроцесс.Согласование1.ДопСогласование КАК Согласование1ДопСогласование
	               |ГДЕ
	               |	Согласование1ДопСогласование.Ссылка.Заявка = &Документ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Согласование2ДопСогласование.СубъектСогласования,
	               |	ЛОЖЬ
	               |ИЗ
	               |	БизнесПроцесс.Согласование2.ДопСогласование КАК Согласование2ДопСогласование
	               |ГДЕ
	               |	Согласование2ДопСогласование.Ссылка.Заявка = &Документ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Согласование3ДопСогласование.СубъектСогласования,
	               |	ЛОЖЬ
	               |ИЗ
	               |	БизнесПроцесс.Согласование3.ДопСогласование КАК Согласование3ДопСогласование
	               |ГДЕ
	               |	Согласование3ДопСогласование.Ссылка.Заявка = &Документ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	УтверждениеБюджетаДопСогласование.СубъектСогласования,
	               |	ЛОЖЬ
	               |ИЗ
	               |	БизнесПроцесс.УтверждениеБюджета.ДопСогласование КАК УтверждениеБюджетаДопСогласование
	               |ГДЕ
	               |	УтверждениеБюджетаДопСогласование.Ссылка.Заявка = &Документ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗаявкиАдминистраторуДопСогласование.СубъектСогласования,
	               |	ИСТИНА
	               |ИЗ
	               |	БизнесПроцесс.ЗаявкиАдминистратору.ДопСогласование КАК ЗаявкиАдминистраторуДопСогласование
	               |ГДЕ
	               |	ЗаявкиАдминистраторуДопСогласование.Ссылка.Заявка = &Документ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	СогласованиеОбщееДопСогласование.СубъектСогласования,
	               |	СогласованиеОбщееДопСогласование.МожетРедактировать
	               |ИЗ
	               |	БизнесПроцесс.СогласованиеОбщее.ДопСогласование КАК СогласованиеОбщееДопСогласование
	               |ГДЕ
	               |	СогласованиеОбщееДопСогласование.Ссылка.Заявка = &Документ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СогласованиеОбщее.Заявка КАК Заявка,
	               |	СогласованиеОбщее.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ БП
	               |ИЗ
	               |	БизнесПроцесс.СогласованиеОбщее КАК СогласованиеОбщее
	               |ГДЕ
	               |	СогласованиеОбщее.Заявка = &Документ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СогласованиеОбщее.Заявка,
	               |	СогласованиеОбщее.Ссылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Согласование1.Заявка,
	               |	Согласование1.Ссылка
	               |ИЗ
	               |	БизнесПроцесс.Согласование1 КАК Согласование1
	               |ГДЕ
	               |	Согласование1.Заявка = &Документ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Согласование1.Заявка,
	               |	Согласование1.Ссылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Согласование2.Заявка,
	               |	Согласование2.Ссылка
	               |ИЗ
	               |	БизнесПроцесс.Согласование2 КАК Согласование2
	               |ГДЕ
	               |	Согласование2.Заявка = &Документ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Согласование2.Заявка,
	               |	Согласование2.Ссылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Согласование3.Заявка,
	               |	Согласование3.Ссылка
	               |ИЗ
	               |	БизнесПроцесс.Согласование3 КАК Согласование3
	               |ГДЕ
	               |	Согласование3.Заявка = &Документ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Согласование3.Заявка,
	               |	Согласование3.Ссылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	УтверждениеБюджета.Заявка,
	               |	УтверждениеБюджета.Ссылка
	               |ИЗ
	               |	БизнесПроцесс.УтверждениеБюджета КАК УтверждениеБюджета
	               |ГДЕ
	               |	УтверждениеБюджета.Заявка = &Документ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	УтверждениеБюджета.Заявка,
	               |	УтверждениеБюджета.Ссылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗаявкиАдминистратору.Заявка,
	               |	ЗаявкиАдминистратору.Ссылка
	               |ИЗ
	               |	БизнесПроцесс.ЗаявкиАдминистратору КАК ЗаявкиАдминистратору
	               |ГДЕ
	               |	ЗаявкиАдминистратору.Заявка = &Документ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаявкиАдминистратору.Заявка,
	               |	ЗаявкиАдминистратору.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	БП_ДелегированиеЗадач.Задача КАК Задача,
	               |	БП_ДелегированиеЗадач.Замещающий КАК Замещающий,
	               |	NULL КАК Пользователь
	               |ПОМЕСТИТЬ ТекЗадачи
	               |ИЗ
	               |	РегистрСведений.БП_ДелегированиеЗадач КАК БП_ДелегированиеЗадач
	               |ГДЕ
	               |	БП_ДелегированиеЗадач.Задача.Заявка В(&Документ)
	               |	И БП_ДелегированиеЗадач.Задача.Выполнена = ЛОЖЬ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	БП_ДелегированиеЗадач.Задача,
	               |	NULL,
	               |	ГруппыПользователейСостав.Пользователь
	               |ИЗ
	               |	РегистрСведений.БП_ДелегированиеЗадач КАК БП_ДелегированиеЗадач
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	               |		ПО БП_ДелегированиеЗадач.Замещающий = ГруппыПользователейСостав.Ссылка
	               |ГДЕ
	               |	БП_ДелегированиеЗадач.Задача.Заявка В(&Документ)
	               |	И БП_ДелегированиеЗадач.Задача.Выполнена = ЛОЖЬ
	               |	И НЕ ГруппыПользователейСостав.Ссылка ЕСТЬ NULL
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТекЗадачи.Замещающий КАК Исполнитель
	               |ИЗ
	               |	ТекЗадачи КАК ТекЗадачи
	               |ГДЕ
	               |	ТекЗадачи.Задача.Заявка В(&Документ)
	               |	И ТекЗадачи.Задача.Выполнена = ЛОЖЬ
	               |	И (ВЫБОР
	               |				КОГДА &ПроверкаВозможностиРедактирования
	               |					ТОГДА ТекЗадачи.Замещающий В
	               |							(ВЫБРАТЬ
	               |								Разрешения.СубъектСогласования КАК СубъектСогласования
	               |							ИЗ
	               |								Разрешения КАК Разрешения
	               |							ГДЕ
	               |								Разрешения.МожетРедактировать = ИСТИНА)
	               |				ИНАЧЕ ТекЗадачи.Замещающий В
	               |						(ВЫБРАТЬ
	               |							Разрешения.СубъектСогласования КАК СубъектСогласования
	               |						ИЗ
	               |							Разрешения КАК Разрешения)
	               |			КОНЕЦ
	               |			ИЛИ ТекЗадачи.Задача.ТочкаМаршрута В
	               |				(ВЫБРАТЬ
	               |					ТочкиДоработки.Ссылка КАК Ссылка
	               |				ИЗ
	               |					ТочкиДоработки КАК ТочкиДоработки))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВнутренниеДокументы.Автор
	               |ИЗ
	               |	ЖурналДокументов.ВнутренниеДокументы КАК ВнутренниеДокументы
	               |ГДЕ
	               |	ВнутренниеДокументы.Ссылка = &Документ
	               |	И НЕ ВнутренниеДокументы.Ссылка В
	               |				(ВЫБРАТЬ
	               |					БП.Заявка КАК Заявка
	               |				ИЗ
	               |					БП КАК БП)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Д_ОбращенияВТехПоддержку.Автор
	               |ИЗ
	               |	Документ.Д_ОбращенияВТехПоддержку КАК Д_ОбращенияВТехПоддержку
	               |ГДЕ
	               |	Д_ОбращенияВТехПоддержку.Ссылка = &Документ
	               |	И НЕ Д_ОбращенияВТехПоддержку.Ссылка В
	               |				(ВЫБРАТЬ
	               |					БП.Заявка КАК Заявка
	               |				ИЗ
	               |					БП КАК БП)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	&ТекущийПользователь
	               |ИЗ
	               |	ЖурналДокументов.ВнутренниеДокументы КАК ВнутренниеДокументы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ БП КАК БП
	               |		ПО ВнутренниеДокументы.Ссылка = БП.Заявка
	               |ГДЕ
	               |	ВнутренниеДокументы.Ссылка = &Документ
	               |	И НЕ ВнутренниеДокументы.Ссылка В
	               |				(ВЫБРАТЬ
	               |					БП.Заявка КАК Заявка
	               |				ИЗ
	               |					БП КАК БП)
	               |	И БП.Ссылка ЕСТЬ NULL";             
	
	Запрос.УстановитьПараметр("Документ", ТекДокумент);
	Запрос.УстановитьПараметр("ПроверкаВозможностиРедактирования", ПроверкаВозможностиРедактирования);
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		Если НЕ ПараметрыСеанса.ДоступныеПользователи.Найти(Выборка.Исполнитель) = Неопределено Тогда
			Возврат Истина;
		КонецЕсли; 	
		
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьРуководителя(Пользователь, Дата = Неопределено) Экспорт
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДолжностиПользователяСрезПоследних.Руководитель
	|ИЗ
	|	РегистрСведений.ДолжностиПользователя.СрезПоследних(&Дата, Пользователь = &Пользователь) КАК ДолжностиПользователяСрезПоследних";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Дата", Дата);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Возврат Выборка.Руководитель;	
		
	КонецЦикла;
	
	
	
КонецФункции // ()

Функция ПользовательВСети(ТекущийПользователь) Экспорт
	
	Результат = Ложь;
	СеансыИнформационнойБазы = ПолучитьСеансыИнформационнойБазы();
	ТекПользователиМассив = Новый Массив;
	Для Каждого СеансИБ Из СеансыИнформационнойБазы Цикл
		ТекПользователиМассив.Добавить(СеансИБ.Пользователь.Имя);
	КонецЦикла;	
	Если НЕ ТекПользователиМассив.Найти(ТекущийПользователь.Наименование) = Неопределено Тогда
		Результат = Истина;                      
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПользовательПодчиненный(Подчиненный, Руководитель) Экспорт
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
|	ДолжностиПользователяСрезПоследних.Пользователь,
|	ДолжностиПользователяСрезПоследних.Руководитель
|ИЗ
|	РегистрСведений.ДолжностиПользователя.СрезПоследних КАК ДолжностиПользователяСрезПоследних
|ГДЕ
|	(ДолжностиПользователяСрезПоследних.Руководитель В
|				(ВЫБРАТЬ
|					ДолжностиПользователяСрезПоследних.Пользователь
|				ИЗ
|					РегистрСведений.ДолжностиПользователя.СрезПоследних(, Руководитель В (&Руководитель)) КАК ДолжностиПользователяСрезПоследних)
|			ИЛИ ДолжностиПользователяСрезПоследних.Руководитель В (&Руководитель))
|	И ДолжностиПользователяСрезПоследних.Пользователь = &Пользователь";

Запрос.УстановитьПараметр("Пользователь", Подчиненный);
Запрос.УстановитьПараметр("Руководитель", Руководитель);

Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();

Пока Выборка.Следующий() Цикл

	Возврат Истина;	

КонецЦикла;

Возврат Ложь;

	

КонецФункции // ()

Функция ПолучитьМассивПрямыхПодчиненных() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДолжностиПользователяСрезПоследних.Пользователь
	               |ИЗ
	               |	РегистрСведений.ДолжностиПользователя.СрезПоследних КАК ДолжностиПользователяСрезПоследних
	               |ГДЕ
	               |	ДолжностиПользователяСрезПоследних.Руководитель В(&Руководитель)
	               |	И ДолжностиПользователяСрезПоследних.Пользователь.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Руководитель", БПСервер.ПолучитьМассивПользователей());
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("Пользователь");
	
КонецФункции // ()

#КонецОбласти

#Область КУдалению

Процедура ИзменитьСостояниеДокумента(СсылкаЗаявка, НаДоработке = Ложь, ДоступностьЗаявки = Ложь, ТекСостояниеПоУмолчанию = Неопределено, ГлавныйКомДиректор = Неопределено, СтруктураПараметров = Неопределено) Экспорт
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//|	Задача.Ссылка,
	//|	Задача.ТочкаМаршрута
	//|ИЗ
	//|	Задача.Задача КАК Задача
	//|ГДЕ
	//|	Задача.Выполнена = ЛОЖЬ
	//|	И Задача.Заявка = &Заявка";
	//
	//Запрос.УстановитьПараметр("Заявка", СсылкаЗаявка);
	//
	//Результат = Запрос.Выполнить();
	//Выборка = Результат.Выбрать();
	//
	//Если ТипЗнч(СсылкаЗаявка) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") Тогда
	//	Согласование = Перечисления.Д_СостоянияДокументов.НаСогласовании;
	//	ТекБп = БизнесПроцессы.Согласование1;
	//ИначеЕсли ТипЗнч(СсылкаЗаявка) = Тип("ДокументСсылка.Д_СлужебнаяЗаписка") Тогда
	//	Если НЕ СсылкаЗаявка.ВидСЗ = Справочники.Д_ВидыВнутреннихДокументов.КорректировкаБюджета Тогда
	//		ТекБп = БизнесПроцессы.Согласование3;
	//	Иначе
	//		ТекБп = БизнесПроцессы.Согласование2;		
	//	КонецЕсли;
	//	Согласование = Перечисления.Д_СостоянияДокументов.НаУтверждении;
	//ИначеЕсли ТипЗнч(СсылкаЗаявка) = Тип("ДокументСсылка.Д_ЗаявкаНаОтгрузку") Тогда
	//	Согласование = Перечисления.Д_СостоянияДокументов.НаСогласовании;
	//	ТекБп = БизнесПроцессы.ЗаявкиНаОтгрузку;
	//ИначеЕсли ТипЗнч(СсылкаЗаявка) = Тип("ДокументСсылка.Д_ЗаявкаНаЗакупкуСырья") Тогда
	//	Согласование = Перечисления.Д_СостоянияДокументов.НаСогласовании;
	//	ТекБп = БизнесПроцессы.ЗаявкиНаЗакупку;
	//ИначеЕсли ТипЗнч(СсылкаЗаявка) = Тип("ДокументСсылка.Д_СогласованиеТрат") Тогда
	//	Согласование = Перечисления.Д_СостоянияДокументов.НаСогласовании;
	//	ТекБп = БизнесПроцессы.СогласованиеТрат;
	//ИначеЕсли ТипЗнч(СсылкаЗаявка) = Тип("ДокументСсылка.Д_ОбращенияВТехПоддержку") Тогда
	//	Согласование = Перечисления.Д_СостоянияДокументов.НаСогласовании;
	//	ТекБп = БизнесПроцессы.ЗаявкиАдминистратору;
	//ИначеЕсли ТипЗнч(СсылкаЗаявка) = Тип("ДокументСсылка.Д_Бюджет") Тогда // нет Состояния!
	//	Возврат;
	//	
	//КонецЕсли;
	//
	//Пока Выборка.Следующий() Цикл
	//	ТекСостояние = Перечисления.Д_СостоянияДокументов.НаПодготовке;
	//	Если ТекБп = БизнесПроцессы.Согласование3  ИЛИ ТекБп = БизнесПроцессы.ЗаявкиНаЗакупку ИЛИ ТекБп = БизнесПроцессы.СогласованиеТрат ИЛИ ТекБп = БизнесПроцессы.УтверждениеБюджета Тогда
	//		Если Выборка.ТочкаМаршрута = ТекБп.ТочкиМаршрута.Действие1 Тогда
	//			Если НаДоработке Тогда
	//				ТекСостояние = Перечисления.Д_СостоянияДокументов.НаДоработке;
	//			Иначе
	//				ТекСостояние = Перечисления.Д_СостоянияДокументов.НаПодготовке;
	//			КонецЕсли;
	//		ИначеЕсли Выборка.ТочкаМаршрута = ТекБп.ТочкиМаршрута.Действие2 Тогда
	//			ТекСостояние = Согласование;
	//		ИначеЕсли Выборка.ТочкаМаршрута = ТекБп.ТочкиМаршрута.Действие5 Тогда
	//			ТекСостояние = Перечисления.Д_СостоянияДокументов.НаИсполнении;
	//		КонецЕсли;
	//	ИначеЕсли ТекБп = БизнесПроцессы.ЗаявкиАдминистратору Тогда
	//		Если Выборка.ТочкаМаршрута = ТекБп.ТочкиМаршрута.Действие1 Тогда
	//			Если НаДоработке Тогда
	//				ТекСостояние = Перечисления.Д_СостоянияДокументов.НаДоработке;
	//			Иначе
	//				ТекСостояние = Перечисления.Д_СостоянияДокументов.НаПодготовке;
	//			КонецЕсли;
	//		ИначеЕсли Выборка.ТочкаМаршрута = ТекБп.ТочкиМаршрута.Действие2 Тогда
	//			ТекСостояние = Согласование;
	//		ИначеЕсли Выборка.ТочкаМаршрута = ТекБп.ТочкиМаршрута.Действие3 Тогда
	//			ТекСостояние = Перечисления.Д_СостоянияДокументов.НаРассмотрении;
	//		ИначеЕсли Выборка.ТочкаМаршрута = ТекБп.ТочкиМаршрута.Действие4 Тогда
	//			ТекСостояние = Перечисления.Д_СостоянияДокументов.ВРазработке;
	//		ИначеЕсли Выборка.ТочкаМаршрута = ТекБп.ТочкиМаршрута.Действие5 Тогда
	//			ТекСостояние = Перечисления.Д_СостоянияДокументов.НаИсполнении;
	//		КонецЕсли;
	//	ИначеЕсли ТекБп = БизнесПроцессы.ЗаявкиНаОтгрузку Тогда
	//		Если Выборка.ТочкаМаршрута = ТекБп.ТочкиМаршрута.Действие1 Тогда
	//			Если НаДоработке Тогда
	//				ТекСостояние = Перечисления.Д_СостоянияДокументов.НаДоработке;
	//			Иначе
	//				ТекСостояние = Перечисления.Д_СостоянияДокументов.НаПодготовке;
	//			КонецЕсли;
	//		ИначеЕсли Выборка.ТочкаМаршрута = ТекБп.ТочкиМаршрута.Действие2 Тогда
	//			ТекСостояние = Согласование;
	//		ИначеЕсли Выборка.ТочкаМаршрута = ТекБп.ТочкиМаршрута.Действие5 Тогда
	//			ТекСостояние = Перечисления.Д_СостоянияДокументов.Исполнен;
	//		ИначеЕсли Выборка.ТочкаМаршрута = ТекБп.ТочкиМаршрута.Исполнение Тогда
	//			ТекСостояние = Перечисления.Д_СостоянияДокументов.НаИсполнении;
	//		КонецЕсли;
	//	Иначе
	//		Если Выборка.ТочкаМаршрута = ТекБп.ТочкиМаршрута.Действие1 Тогда
	//			Если НаДоработке Тогда
	//				ТекСостояние = Перечисления.Д_СостоянияДокументов.НаДоработке;
	//			Иначе
	//				ТекСостояние = Перечисления.Д_СостоянияДокументов.НаПодготовке;
	//			КонецЕсли;
	//		ИначеЕсли Выборка.ТочкаМаршрута = ТекБп.ТочкиМаршрута.Действие2 Тогда
	//			ТекСостояние = Согласование;
	//		ИначеЕсли Выборка.ТочкаМаршрута = ТекБп.ТочкиМаршрута.Действие3 Тогда
	//			ТекСостояние = Перечисления.Д_СостоянияДокументов.НаПроверке;
	//		ИначеЕсли Выборка.ТочкаМаршрута = ТекБп.ТочкиМаршрута.Действие4 Тогда
	//			ТекСостояние = Согласование;
	//		ИначеЕсли Выборка.ТочкаМаршрута = ТекБп.ТочкиМаршрута.Действие5 Тогда
	//			ТекСостояние = Перечисления.Д_СостоянияДокументов.НаИсполнении;
	//		КонецЕсли;	
	//	КонецЕсли;
	//	Если ТекБп = БизнесПроцессы.СогласованиеТрат Тогда //если согласование трат, то указывает траты
	//		КоличествоПринятое = Выборка.Ссылка.БизнесПроцесс.КоличествоПринятое;
	//		ПризнакТрат = Выборка.Ссылка.БизнесПроцесс.ПризнакТрат;
	//	Иначе
	//		КоличествоПринятое = 0;
	//		ПризнакТрат = "";
	//	КонецЕсли;
	//	
	//	
	//КонецЦикла;
	//
	////добавил по умолчанию
	//Если НЕ ТекСостояниеПоУмолчанию = Неопределено Тогда
	//	ТекСостояние = ТекСостояниеПоУмолчанию;	
	//КонецЕсли;
	//РежимЗаписи = РежимЗаписиДокумента.Запись;
	//Заявка = СсылкаЗаявка.ПолучитьОбъект();
	//Если Выборка.Количество() ИЛИ НЕ ТекСостояниеПоУмолчанию = Неопределено Тогда
	//	
	//	Если ДоступностьЗаявки Тогда
	//		Заявка.Доступность = ДоступностьЗаявки;		
	//	КонецЕсли;		
	//	
	//	
	//	Заявка.СостояниеДокумента = ТекСостояние;
	//	
	//	
	//	Если ТекБп = БизнесПроцессы.СогласованиеТрат Тогда //если согласование трат, то указывает траты
	//		Заявка.КоличествоПринятое = КоличествоПринятое;
	//		Заявка.ПризнакТрат = ПризнакТрат;
	//		Если НЕ ГлавныйКомДиректор = Неопределено Тогда
	//			Заявка.ГлавныйКомДиректор = ГлавныйКомДиректор;			
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//	Если НЕ СтруктураПараметров = Неопределено  Тогда //если согласование трат, то указывает траты
	//		Если СтруктураПараметров.Свойство("БухНоменклатура") Тогда
	//			Заявка.БухНоменклатура = СтруктураПараметров.БухНоменклатура;
	//			Заявка.БухЮрЛицо = СтруктураПараметров.БухЮрЛицо;
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//	
	//	
	//	Если ТекБп = БизнесПроцессы.ЗаявкиНаОтгрузку И (ТекСостояние = Перечисления.Д_СостоянияДокументов.НаИсполнении или ТекСостояние = Перечисления.Д_СостоянияДокументов.Исполнен) Тогда //если соргласование трат, то указывает траты
	//		РежимЗаписи = РежимЗаписиДокумента.Проведение;			
	//	КонецЕсли;
	//	
	//	Если ТекБп = БизнесПроцессы.ЗаявкиНаЗакупку И ТекСостояние = Перечисления.Д_СостоянияДокументов.НаИсполнении Тогда //если соргласование трат, то указывает траты
	//		РежимЗаписи = РежимЗаписиДокумента.Проведение;			
	//	КонецЕсли;
	//	
	//Иначе
	//	Заявка.СостояниеДокумента = Перечисления.Д_СостоянияДокументов.Исполнен;		
	//КонецЕсли;
	//
	//Если ТекБп = БизнесПроцессы.Согласование1 Тогда //если заявка, то ищем отмененные позиции
	//	ОповеститьПользователяОбОтмененныхПозициях(Заявка);		
	//КонецЕсли;
	//
	//Заявка.Записать(РежимЗаписи);
	
	
	
КонецПроцедуры

Процедура ЗаписатьДействиеПользователяВЛог(Задача, Действие) Экспорт
	
	//ЕстьСвободноеМесто = Ложь;
	//ДействиеСоСчетчиком = Действие;
	//Счетчик = 0;
	//
	//МенеджерЗаписи = РегистрыСведений.ЛогДействийПользователейСБП.СоздатьМенеджерЗаписи();	
	//Пока Не ЕстьСвободноеМесто Цикл	
	//	МенеджерЗаписи.Дата         = ТекущаяДата();
	//	МенеджерЗаписи.Пользователь = ОбщегоНазначения.ТекущийПользователь();
	//	МенеджерЗаписи.Задача       = Задача;
	//	МенеджерЗаписи.Действие     = ДействиеСоСчетчиком;
	//	МенеджерЗаписи.Прочитать();
	//	Если МенеджерЗаписи.Выбран() Тогда
	//		Счетчик = Счетчик + 1;
	//		ДействиеСоСчетчиком = Действие + " (" + Счетчик + ")";
	//	Иначе
	//		ЕстьСвободноеМесто = Истина;
	//	КонецЕсли;
	//КонецЦикла;
	//
	//МенеджерЗаписи.Дата         = ТекущаяДата();
	//МенеджерЗаписи.Пользователь = ОбщегоНазначения.ТекущийПользователь();
	//МенеджерЗаписи.Задача       = Задача;
	//МенеджерЗаписи.Действие     = ДействиеСоСчетчиком;		
	//МенеджерЗаписи.Записать();
	
КонецПроцедуры

Процедура ЗаменитьНаименованияПользователей() Экспорт
	
	Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//|	Пользователи.Ссылка,
	//|	Пользователи.Наименование КАК ИмяПользователя
	//|ИЗ
	//|	Справочник.Пользователи КАК Пользователи
	//|ГДЕ
	//|	НЕ Пользователи.Наименование = Пользователи.ИмяПользователя";
	//
	////Запрос.УстановитьПараметр("", );
	//
	//Результат = Запрос.Выполнить();
	//Выборка = Результат.Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//	Если ЗначениеЗаполнено(Выборка.ИмяПользователя) Тогда
	//		ТекОб = Выборка.Ссылка.ПолучитьОбъект();
	//		ТекОб.Наименование = Выборка.ИмяПользователя;
	//		ТекОб.Записать();	
	//	КонецЕсли;
	//	
	//	
	//КонецЦикла;
	
	
КонецПроцедуры

Функция ИспользуетсяМеханизмЧастичнойОплаты(ТекПредприятие) Экспорт
	
	//Результат = сабОбщегоНазначения.ПолучитьЗначениеСвойства(ТекПредприятие, "Механизм частичной оплаты");
	//
	//Если Результат = Истина Тогда
	//	Возврат Истина;
	//Иначе 
		Возврат Ложь;
	//КонецЕсли;	
	
КонецФункции

Процедура ЗаписатьЛогВЧат(Сообщение) Экспорт
		
	МенеджерЗаписи = РегистрыСведений.Ч_СообщенияЧата.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.ИдентификаторСообщения = новый УникальныйИдентификатор();
	МенеджерЗаписи.Автор = Справочники.Пользователи.НайтиПоНаименованию("Веб");   //?(ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПользователь), ПараметрыСеанса.ТекущийПользователь, Справочники.Пользователи.НайтиПоНаименованию("Веб"));
	МенеджерЗаписи.Кому  = Справочники.Пользователи.НайтиПоНаименованию("Администратор");	
	МенеджерЗаписи.ДатаВремя = ТекущаяДата();
	                                                
	Если ТипЗнч(Сообщение) = Тип("Строка") тогда
		МенеджерЗаписи.Текст = Сообщение;
	ИначеЕсли ТипЗнч(Сообщение) = Тип("Структура") Тогда
		ТекстСообщения = "";
		Для Каждого ТекПара из Сообщение цикл
			Значение = ?(ТипЗнч(ТекПара.Значение) = Тип("ТаблицаЗначений"), "ТЗ, " + ТекПара.Значение.Количество() + " элементов", ТекПара.Значение);
			ТекстСообщения = ТекстСообщения + "Структура: " + ТекПара.Ключ + " = " + Значение + Символы.ПС;
		КонецЦикла;
		МенеджерЗаписи.Текст = ТекстСообщения;
	КонецЕсли;
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МАКСИМУМ(Ч_СообщенияЧата.НомерСообщения) КАК НомерСообщения
	               |ИЗ
	               |	РегистрСведений.Ч_СообщенияЧата КАК Ч_СообщенияЧата";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	НомерСообщения = Выборка.НомерСообщения;
	МенеджерЗаписи.НомерСообщения = НомерСообщения + 1;
	
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Функция МеханизмСНесколькимиИсполнителями(ТекПредприятие) Экспорт
	
	//Результат = сабОбщегоНазначения.ПолучитьЗначениеСвойства(ТекПредприятие, "Механизм с несколькими исполнителями");
	//
	//Если Результат = Истина Тогда
	//	Возврат Истина;
	//Иначе 
		Возврат Ложь;
	//КонецЕсли;	
	
КонецФункции

#КонецОбласти

#Область РаботаСОповещениями

Процедура СоздатьОповещение(Пользователи, ТекстОповещения, Заголовок, Гиперссылка = "", ОткрыватьФорму = Ложь, Автор = Неопределено, ТемаДокумента = Неопределено, СтруктураПараметров = Неопределено) Экспорт
	
	Если ТипЗнч(Пользователи) = Тип("Массив") Тогда	
		МассивАдресатов = Пользователи;
	Иначе
		МассивАдресатов = Новый Массив;
		Если ЗначениеЗаполнено(Пользователи) Тогда
			МассивАдресатов.Добавить(Пользователи);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ МассивАдресатов.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	//создаем документ оповещение
	ТекАвтор = ?(Автор = Неопределено, ПараметрыСеанса.ТекущийПользователь, Справочники.Пользователи.Система);
	НовоеОповещение = Документы.БП_Оповещение.СоздатьДокумент();
	НовоеОповещение.Автор = ТекАвтор;
	НовоеОповещение.Дата = ТекущаяДата();
	НовоеОповещение.ДатаНачала = ТекущаяДата();
	НовоеОповещение.Гиперссылка = Гиперссылка;
	НовоеОповещение.Документ = Гиперссылка;
	//НовоеОповещение.ГиперссылкаСтрока = ПолучитьНавигационнуюСсылку(Гиперссылка);
	НовоеОповещение.Описание = ТекстОповещения;
	НовоеОповещение.Стартован = Истина;
	НовоеОповещение.ОткрыватьФорму = ОткрыватьФорму;
	НовоеОповещение.Тема = Заголовок;
	НовоеОповещение.СтруктураПараметров = Новый ХранилищеЗначения(СтруктураПараметров);//храним настройки
	
	//в случае оповещения на установку нового срока записываем в сообщение старый срок
	
	Если НЕ СтруктураПараметров = Неопределено Тогда
		Если СтруктураПараметров.Свойство("СтарыйСрокЗадачи") Тогда
			НовоеОповещение.СтарыйСрок = СтруктураПараметров.СтарыйСрокЗадачи;
			НовоеОповещение.НовыйСрок = СтруктураПараметров.НовыйСрокЗадачи;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ТемаДокумента = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	БП_Оповещение.Тема,
		|	БП_Оповещение.Документ
		|ИЗ
		|	Документ.БП_Оповещение КАК БП_Оповещение
		|ГДЕ
		|	БП_Оповещение.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ТемаДокумента);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НовоеОповещение.Тема = Выборка.Тема;
			НовоеОповещение.Документ = Выборка.Документ;
		КонецЦикла;
		Если НовоеОповещение.Документ = Неопределено Тогда
			НовоеОповещение.Документ = ТемаДокумента;
		КонецЕсли;	
	КонецЕсли;	
	
	
	Для каждого ТекСтрока Из МассивАдресатов Цикл
		НоваяСтрока = НовоеОповещение.СписокИсполнителей.Добавить();
		НоваяСтрока.Исполнитель = ТекСтрока;
	КонецЦикла; 
	
	НовоеОповещение.Записать();
	
	НовоеОповещениеСсылка = НовоеОповещение.Ссылка;
	
	Для каждого Пользователь Из МассивАдресатов Цикл
		
		Задача = Задачи.Задача.СоздатьЗадачу();		
		Задача.Заявка = НовоеОповещениеСсылка;
		Задача.Дата = ТекущаяДата();
		Задача.Наименование = "Прочитать сообщение";
		Задача.Гиперссылка = Гиперссылка;
		Задача.ОткрыватьФорму = ОткрыватьФорму;
		Задача.Автор = ТекАвтор;
		Задача.Описание = ТекстОповещения;
		Задача.Исполнитель = Пользователь;
		Задача.Записать();
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура СообщитьОбИзмененииМаршрута(Объект, ТЗ, ТЗПервоначальное) Экспорт
	
	Если Объект.Заявка.Автор = ПараметрыСеанса.ТекущийПользователь Тогда
		Возврат;
	КонецЕсли;	
	
	Если ТЗПервоначальное = Неопределено Тогда
		Возврат;
	Иначе
		СообщитьОбИзменении = Истина;
	КонецЕсли;
	Если ТЗПервоначальное.Количество() = ТЗ.Количество() Тогда
		СообщитьОбИзменении = Ложь;
		Для Индекс = 0 По ТЗПервоначальное.Количество() - 1 Цикл
			Если Не ТЗПервоначальное.Получить(Индекс).СубъектСогласования = ТЗ.Получить(Индекс).СубъектСогласования Тогда
				СообщитьОбИзменении = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
	Если СообщитьОбИзменении Тогда
		СогласующиеСтарогоМаршрута 	= "";
		СогласующиеНовогоМаршрута 	= "";
		Для Каждого СтрокаТЗПервоначальное Из ТЗПервоначальное Цикл
			СогласующиеСтарогоМаршрута = СогласующиеСтарогоМаршрута + "
			| " + СтрокаТЗПервоначальное.СубъектСогласования;
		КонецЦикла;
		Для Каждого СтрокаТЗ Из ТЗ Цикл
			СогласующиеНовогоМаршрута = СогласующиеНовогоМаршрута + "
			| " + СтрокаТЗ.СубъектСогласования;
		КонецЦикла;
		
		
		СоздатьОповещение(Объект.Заявка.Автор, "Пользователь " + Строка(ПараметрыСеанса.ТекущийПользователь) + " изменил маршрут согласования документа " + Строка(Объект.Заявка) + ":
		|
		|Старый маршрут: " + СогласующиеСтарогоМаршрута + "
		|
		|Новый маршрут: " + СогласующиеНовогоМаршрута, "Оповещение об изменении маршрута" , Объект.Заявка, , Справочники.Пользователи.Система, "Изменен маршрут");
	КонецЕсли;
	
КонецПроцедуры	

Процедура ОповещаемОСЗ(ТекСЗ, Событие, Исключения) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Пользователи.Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.КонтрольСлужебок = ИСТИНА
	|	И Пользователи.КонтрольСлужебокПользователи.Пользователь = &Пользователь
	|	И НЕ Пользователи.Ссылка В (&Исключения)";
	
	Запрос.УстановитьПараметр("Пользователь", ТекСЗ.Автор);
	Запрос.УстановитьПараметр("Исключения", Исключения);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Если Выборка.Количество() Тогда
		Если Событие = "Отправка" Тогда
			БПСервер.СоздатьОповещение(Выборка, "Пользователь " + Строка(ПараметрыСеанса.ТекущийПользователь) + " отправил документ №" + Строка(ТекСЗ.Номер) + " на утверждение.", "Контроль документа: пользователь " + Строка(ПараметрыСеанса.ТекущийПользователь) + " отправил документ", ТекСЗ);
		ИначеЕсли Событие = "Утверждение" Тогда	
			БПСервер.СоздатьОповещение(Выборка, "Документ " + Строка(ТекСЗ) + " доступен для просмотра.", "Контроль документа: утверждено " + Строка(ТекСЗ), ТекСЗ);
		ИначеЕсли  Событие = "НЕУтверждение" Тогда
			БПСервер.СоздатьОповещение(Выборка, "Документ " + Строка(ТекСЗ) + " не утвержден.", "Контроль документа: не утверждено " + Строка(ТекСЗ), ТекСЗ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОповеститьОДоработке(БП, Исполнитель, СтрОснование) Экспорт
	
	МассивОзн = Новый Массив;
	
	Для Каждого Эл Из БП.ДопОповещение Цикл
		МассивОзн.Добавить(Эл.Пользователь);
	КонецЦикла;
	
	Если МассивОзн.Количество() Тогда
		БПСервер.СоздатьОповещение(МассивОзн, "Документ " +Строка(БП.Заявка) + ", отправлен на доработку пользователем "+ Строка(Исполнитель) + ?(ЗначениеЗаполнено(СтрОснование), " по причине: "+ СтрОснование +".", "."), "Документ " +Строка(БП.Заявка) + ", отправлен на доработку.", БП.Заявка,,Справочники.Пользователи.Система);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область РаботаСОповещениямиПоНевыполненнымЗадачам
	
Функция МассивНевыполненныхЗадач(НЕОбнулятьСчетчик = Истина) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Задача.Ссылка,
	               |	ВЫБОР
	               |		КОГДА ОтслеживаниеЗаявок.Документ ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК Новая
	               |ИЗ
	               |	Задача.Задача КАК Задача
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтслеживаниеЗаявок КАК ОтслеживаниеЗаявок
	               |		ПО (ОтслеживаниеЗаявок.Документ = Задача.Ссылка)
	               |ГДЕ
	               |	Задача.Исполнитель В(&ТекущийПользователь)
	               |	И Задача.Выполнена = ЛОЖЬ
	               |	И Задача.ПометкаУдаления = ЛОЖЬ
	               |	И Задача.ВРаботе = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ДоступныеПользователи);
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	МассивЗадач = Новый Массив;
	МассивВсехЗадач = Новый Массив;
	МассивНовыхЗадач = Новый Массив;
	МассивПоступившихЗадач = Новый Массив;
	
	//Если ПараметрыСеанса.СчетчикОповещенийОЗадачах Тогда
	Если ПараметрыСеанса.МассивНевыполненныхЗадач.Свойство("МассивПоступившихЗадач") И НЕОбнулятьСчетчик Тогда
		Для каждого ТекЭлемент Из ПараметрыСеанса.МассивНевыполненныхЗадач.МассивПоступившихЗадач Цикл
			МассивПоступившихЗадач.Добавить(ТекЭлемент);
		КонецЦикла; 
	КонецЕсли;
	//КонецЕсли;
	НовыеЗадачи = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Новая Тогда
			МассивНовыхЗадач.Добавить(Выборка.Ссылка);
			Если ПараметрыСеанса.МассивНевыполненныхЗадач.МассивЗадач.Найти(Выборка.Ссылка) = Неопределено И НЕОбнулятьСчетчик Тогда
				НовыеЗадачи = Истина;
				МассивПоступившихЗадач.Добавить(Выборка.Ссылка);
			КонецЕсли;
			МассивЗадач.Добавить(Выборка.Ссылка);	 
		КонецЕсли;
		МассивВсехЗадач.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Стру = Новый Структура("МассивЗадач, МассивВсехЗадач, МассивНовыхЗадач, НовыеЗадачи, МассивПоступившихЗадач", Новый ФиксированныйМассив(МассивЗадач), Новый ФиксированныйМассив(МассивВсехЗадач), Новый ФиксированныйМассив(МассивНовыхЗадач), НовыеЗадачи, Новый ФиксированныйМассив(МассивПоступившихЗадач));
	ПараметрыСеанса.МассивНевыполненныхЗадач = Новый ФиксированнаяСтруктура(Стру);
	Возврат Стру;
	
	
КонецФункции

Процедура ОчиститьПоступившиеЗадачи() Экспорт

	МассивЗадач = ПараметрыСеанса.МассивНевыполненныхЗадач.МассивЗадач; 
	МассивВсехЗадач = ПараметрыСеанса.МассивНевыполненныхЗадач.МассивВсехЗадач;
	МассивНовыхЗадач = ПараметрыСеанса.МассивНевыполненныхЗадач.МассивНовыхЗадач;
	НовыеЗадачи = ПараметрыСеанса.МассивНевыполненныхЗадач.НовыеЗадачи;
	МассивПоступившихЗадач = Новый ФиксированныйМассив(Новый Массив);
	Стру = Новый Структура("МассивЗадач, МассивВсехЗадач, МассивНовыхЗадач, НовыеЗадачи, МассивПоступившихЗадач", МассивЗадач, МассивВсехЗадач, МассивНовыхЗадач, НовыеЗадачи, МассивПоступившихЗадач);
	ПараметрыСеанса.МассивНевыполненныхЗадач = Новый ФиксированнаяСтруктура(Стру);

КонецПроцедуры


Функция ПолучитьЗначениеСчетчика() Экспорт
	
	Возврат ПараметрыСеанса.СчетчикОповещенийОЗадачах;	
	
КонецФункции

Функция ПолучитьПараметрыМассив() Экспорт
	
	Возврат ПараметрыСеанса.МассивНевыполненныхЗадач.МассивПоступившихЗадач;	
	
КонецФункции

#КонецОбласти 

#Область Общие

Функция СерверноеВремя() Экспорт
	Возврат ТекущаяДата();	
КонецФункции // ()

Функция ПроверкаГруппы(ВыбранноеЗначение) Экспорт
	
	Возврат ВыбранноеЗначение.ЭтоГруппа;	
	
КонецФункции // ()

Функция ДобавитьГруппу(ВыбранноеЗначение) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Пользователи.Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Родитель = &Родитель
	|	И Пользователи.ЭтоГруппа = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Родитель", ВыбранноеЗначение);
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	
КонецФункции // ()

Функция ПолучитьКонстантуНаСервере(ИмяКонстанты) экспорт
	Возврат Истина;	
КонецФункции

Процедура УстановитьКонстантуНаСервере(ИмяКонстанты, Значение) экспорт
	Константы[ИмяКонстанты].Установить(Значение);	
КонецПроцедуры

Процедура РазобратьСтрокуПоСловам(ИсходнаяСтрока, ПолученнаяСтрока)
	
	КоличествоСимволовВСтроке = СтрДлина(ИсходнаяСтрока);
	ПродолжатьРазбиениеСтроки = Ложь;
	НачИндекс = 1;
	Если КоличествоСимволовВСтроке < 40 Тогда
		ПолученнаяСтрока = ПолученнаяСтрока + ИсходнаяСтрока;
	Иначе	
		Для Индекс = 1 По КоличествоСимволовВСтроке Цикл
			ПолученныйИндекс = Найти(Сред(ИсходнаяСтрока, НачИндекс, Индекс-НачИндекс), " ");
			Если Индекс = КоличествоСимволовВСтроке Тогда
				ДопСтрока = ИсходнаяСтрока;
				ПолученнаяСтрока = ПолученнаяСтрока + ДопСтрока; 
				Прервать;
			ИначеЕсли ПолученныйИндекс <> 0 Тогда
				НачИндекс = Индекс;
				ДопСтрока = Лев(ИсходнаяСтрока, Индекс-1); 
				Если СтрДлина(ДопСтрока) >= 40 Тогда
					ПолученнаяСтрока = ПолученнаяСтрока + ДопСтрока + "
					|"; 
					ПродолжатьРазбиениеСтроки = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	Если ПродолжатьРазбиениеСтроки Тогда
		РазобратьСтрокуПоСловам(Прав(ИсходнаяСтрока, КоличествоСимволовВСтроке - Индекс + 1), ПолученнаяСтрока);
	КонецЕсли;	
	
КонецПроцедуры	

Функция ПолучитьПолноеИмяФормы(Ссылка) Экспорт
	
	Возврат Ссылка.Метаданные().ОсновнаяФормаОбъекта.ПолноеИмя();
	
КОнецФункции	

Функция ПрикрепленныеФайлы(ТекДокумент) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Файлы.Ссылка КАК Файл
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.ДокументыПоФайлу.ВладелецФайла = &ВладелецФайла";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ТекДокумент);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить().ВыгрузитьКолонку("Файл");;
	Возврат Выборка;

КонецФункции // ()

Функция ПолучитьПрикрепленныеОбъектыДляПечати(Ссылка) Экспорт
	ЗапросПоФайлам = Новый Запрос;
	ЗапросПоФайлам.Текст = 
	"ВЫБРАТЬ
	|	ПрикрепленныеОбъекты.Объект КАК Файл,
	|	ПрикрепленныеОбъекты.ВладелецИмяТЧ КАК ВладелецИмяТЧ
	|ИЗ
	|	РегистрСведений.ПрикрепленныеОбъекты КАК ПрикрепленныеОбъекты
	|ГДЕ
	|	ПрикрепленныеОбъекты.Владелец В(&ВладелецФайла)";
	ЗапросПоФайлам.УстановитьПараметр("ВладелецФайла", Ссылка);
	ВыборкаПоФайлам = ЗапросПоФайлам.Выполнить().Выбрать();

	Возврат ВыборкаПоФайлам;

КонецФункции // ()

Функция ПолучитьПрикрепленныеФайлыЗаявкиНаФинансирование(ТекЗаявкаНаФинансирование) Экспорт
	
	ФайлыТекЗаявки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПрикрепленныеОбъекты.Объект
	               |ИЗ
	               |	РегистрСведений.ПрикрепленныеОбъекты КАК ПрикрепленныеОбъекты
	               |ГДЕ
	               |	ПрикрепленныеОбъекты.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец", ТекЗаявкаНаФинансирование);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ФайлыТекЗаявки.Добавить(Выборка.Объект);
	КонецЦикла;
	
	Возврат ФайлыТекЗаявки;
	
КонецФункции

Функция ПолучитьПризнакРабочегоДня(Календарь, Год, ДатаГрафика) Экспорт
	
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КалендарныеГрафики.ДеньВключенВГрафик
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|ГДЕ
	|	КалендарныеГрафики.Календарь = &Календарь
	|	И КалендарныеГрафики.Год = &Год
	|	И КалендарныеГрафики.ДатаГрафика = &ДатаГрафика";
	Запрос.УстановитьПараметр("Календарь",?(Календарь = Неопределено, Справочники.Календари.НайтиПоНаименованию("Российская Федерация", Истина), Календарь));
	Запрос.УстановитьПараметр("Год", Год);
	Запрос.УстановитьПараметр("ДатаГрафика",НачалоДня(ДатаГрафика));
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДеньВключенВГрафик	
	Иначе
		
	КонецЕсли;	
КонецФункции

Функция СоздатьЗапросСписокМоихЗадач() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГруппыПользователей.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ТекПользователи
	               |ИЗ
	               |	Справочник.ГруппыПользователей КАК ГруппыПользователей
	               |ГДЕ
	               |	ГруппыПользователей.Состав.Пользователь В(&ТекущийПользователь)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ГруппыПользователей.Ссылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	&ТекущийПользователь
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОтслеживаниеЗаявок.Пользователь КАК Пользователь,
	               |	ОтслеживаниеЗаявок.Документ КАК Документ
	               |ПОМЕСТИТЬ ВТ_Отслеживаемые
	               |ИЗ
	               |	РегистрСведений.ОтслеживаниеЗаявок КАК ОтслеживаниеЗаявок
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТекПользователи КАК ТекПользователи
	               |		ПО ОтслеживаниеЗаявок.Пользователь = ТекПользователи.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	БП_ДелегированиеЗадач.Задача КАК Задача,
	               |	БП_ДелегированиеЗадач.Замещающий КАК Замещающий,
	               |	БП_ДелегированиеЗадач.Делигирована КАК Делигирована,
	               |	БП_ДелегированиеЗадач.Пользователь КАК Пользователь,
	               |	БП_ДелегированиеЗадач.ДатаПеренаправления КАК ДатаПеренаправления,
	               |	БП_ДелегированиеЗадач.Комментарий КАК Комментарий,
	               |	БП_ДелегированиеЗадач.Автор КАК Автор,
	               |	БП_ДелегированиеЗадач.Инициатор КАК Инициатор,
	               |	ЛОЖЬ КАК НаКонтроле
	               |ПОМЕСТИТЬ ВТ_Задачи
	               |ИЗ
	               |	РегистрСведений.БП_ДелегированиеЗадач КАК БП_ДелегированиеЗадач
	               |ГДЕ
	               |	(БП_ДелегированиеЗадач.Замещающий В (&Испол)
	               |			ИЛИ БП_ДелегированиеЗадач.Автор В (&Испол)
	               |				И ВЫБОР
	               |					КОГДА &ВсеИсходящиеЗадачи
	               |						ТОГДА ИСТИНА
	               |					ИНАЧЕ БП_ДелегированиеЗадач.Задача.Дата >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ), ДЕНЬ, -1)
	               |				КОНЕЦ
	               |			ИЛИ БП_ДелегированиеЗадач.Инициатор В (&Испол))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Д_ТекущаяЗадача.ТекущаяЗадача,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	ИСТИНА
	               |ИЗ
	               |	ВТ_Отслеживаемые КАК ВТ_Отслеживаемые
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Д_ТекущаяЗадача КАК Д_ТекущаяЗадача
	               |		ПО ВТ_Отслеживаемые.Документ = Д_ТекущаяЗадача.Документ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВыбранныеЗадачи.Ссылка КАК Ссылка,
	               |	ВыбранныеЗадачи.ПометкаУдаления КАК ПометкаУдаления,
	               |	ВыбранныеЗадачи.Номер КАК Номер,
	               |	ВЫБОР
	               |		КОГДА ВТ_Задачи.ДатаПеренаправления > ВыбранныеЗадачи.Дата
	               |			ТОГДА ВТ_Задачи.ДатаПеренаправления
	               |		ИНАЧЕ ВыбранныеЗадачи.Дата
	               |	КОНЕЦ КАК Дата,
	               |	ВыбранныеЗадачи.БизнесПроцесс КАК БизнесПроцесс,
	               |	ВыбранныеЗадачи.ТочкаМаршрута КАК ТочкаМаршрута,
	               |	ВыбранныеЗадачи.Наименование КАК Наименование,
	               |	ВыбранныеЗадачи.Выполнена КАК Выполнена,
	               |	ВыбранныеЗадачи.Предприятие КАК Предприятие,
	               |	ВыбранныеЗадачи.Автор КАК ЗадачаОт,
	               |	ВыбранныеЗадачи.Комментарии КАК Комментарии,
	               |	ВыбранныеЗадачи.Описание КАК Описание,
	               |	ВыбранныеЗадачи.ДатаНачала КАК ДатаНачала,
	               |	ВыбранныеЗадачи.ДатаИсполнения КАК ДатаИсполнения,
	               |	ВыбранныеЗадачи.Должность КАК Должность,
	               |	ВыбранныеЗадачи.Исполнитель КАК Исполнитель,
	               |	ВыбранныеЗадачи.Представление КАК Представление,
	               |	ВТ_Задачи.Инициатор КАК Инициатор,
	               |	1 КАК ИндексКартинки,
	               |	ВыбранныеЗадачи.ТочкаМаршрута КАК Состояние,
	               |	ПРЕДСТАВЛЕНИЕ(ВыбранныеЗадачи.ТочкаМаршрута) КАК ТочкаМаршрутаПредставление,
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(ВыбранныеЗадачи.Заявка) = ТИП(Документ.Д_ЗаявкаНАОплату)
	               |			ТОГДА ВЫРАЗИТЬ(ВыбранныеЗадачи.Заявка КАК Документ.Д_ЗаявкаНаОплату).ОплатыЧастичноОтменены
	               |	КОНЕЦ КАК ОтменаОплаты,
	               |	ВЫБОР
	               |		КОГДА ВыбранныеЗадачи.ТочкаМаршрута = ЗНАЧЕНИЕ(БизнесПроцесс.Согласование1.ТочкаМаршрута.Действие5)
	               |				ИЛИ ВыбранныеЗадачи.ТочкаМаршрута = ЗНАЧЕНИЕ(БизнесПроцесс.Согласование2.ТочкаМаршрута.Действие5)
	               |				ИЛИ ВыбранныеЗадачи.ТочкаМаршрута = ЗНАЧЕНИЕ(БизнесПроцесс.Согласование3.ТочкаМаршрута.Действие5)
	               |				ИЛИ ВыбранныеЗадачи.ТочкаМаршрута = ЗНАЧЕНИЕ(БизнесПроцесс.Согласование3.ТочкаМаршрута.Действие6)
	               |				ИЛИ ВыбранныеЗадачи.ТочкаМаршрута = ЗНАЧЕНИЕ(БизнесПроцесс.ЗаявкиАдминистратору.ТочкаМаршрута.Действие5)
	               |				ИЛИ ВыбранныеЗадачи.ТочкаМаршрута = ЗНАЧЕНИЕ(БизнесПроцесс.ЗаявкиАдминистратору.ТочкаМаршрута.Действие6)
	               |				ИЛИ ВыбранныеЗадачи.ТочкаМаршрута = ЗНАЧЕНИЕ(БизнесПроцесс.СогласованиеОбщее.ТочкаМаршрута.Действие5)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК НаИсполнении,
	               |	ВЫБОР
	               |		КОГДА (ВыбранныеЗадачи.ТочкаМаршрута = ЗНАЧЕНИЕ(БизнесПроцесс.Согласование1.ТочкаМаршрута.Действие1)
	               |				ИЛИ ВыбранныеЗадачи.ТочкаМаршрута = ЗНАЧЕНИЕ(БизнесПроцесс.УтверждениеБюджета.ТочкаМаршрута.Действие1)
	               |				ИЛИ ВыбранныеЗадачи.ТочкаМаршрута = ЗНАЧЕНИЕ(БизнесПроцесс.СогласованиеОбщее.ТочкаМаршрута.Действие1)
	               |				ИЛИ ВыбранныеЗадачи.ТочкаМаршрута = ЗНАЧЕНИЕ(БизнесПроцесс.ЗаявкиАдминистратору.ТочкаМаршрута.Действие1))
	               |				И ВыбранныеЗадачи.БизнесПроцесс.ОснованиеЗаблокирован = ИСТИНА
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК НаДоработке,
	               |	ВЫБОР
	               |		КОГДА ВыбранныеЗадачи.Заявка ССЫЛКА Документ.Д_ЗаявкаНаОплату
	               |			ТОГДА ВЫРАЗИТЬ(ВыбранныеЗадачи.Заявка КАК Документ.Д_ЗаявкаНаОплату).ДатаОплаты
	               |		ИНАЧЕ ВыбранныеЗадачи.СрокВыполнения
	               |	КОНЕЦ КАК СрокВыполнения,
	               |	ЕСТЬNULL(ВТ_Задачи.Комментарий, """") КАК КомментарийДелегирования,
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(ВыбранныеЗадачи.Заявка) = ТИП(Документ.Д_ЗаявкаНАОплату)
	               |			ТОГДА ВЫРАЗИТЬ(ВыбранныеЗадачи.Заявка КАК Документ.Д_ЗаявкаНаОплату).СуммаДокумента
	               |	КОНЕЦ КАК СуммаДокумента,
	               |	ВТ_Задачи.ДатаПеренаправления КАК ДатаПеренаправления,
	               |	ВЫБОР
	               |		КОГДА ВыбранныеЗадачи.НеДелегировать = ИСТИНА
	               |			ТОГДА ""Запрещено""
	               |		ИНАЧЕ ""Разрешено""
	               |	КОНЕЦ КАК Делегирование,
	               |	ВЫБОР
	               |		КОГДА ВыбранныеЗадачи.СрокВыполнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |			ТОГДА 1
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ВыбранныеЗадачи.СрокВыполнения < &ТекущаяДата
	               |					ТОГДА 0
	               |				ИНАЧЕ 1
	               |			КОНЕЦ
	               |	КОНЕЦ КАК СтатусЗадачи,
	               |	ВЫБОР
	               |		КОГДА ВТ_Задачи.Замещающий В (&Испол)
	               |			ТОГДА ВЫБОР
	               |					КОГДА НЕ ВТ_Задачи.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	               |						ТОГДА ""Делегированные мне""
	               |					КОГДА ВыбранныеЗадачи.ВРаботе = ИСТИНА
	               |						ТОГДА ""В работе""
	               |					ИНАЧЕ ""Входящие""
	               |				КОНЕЦ
	               |		КОГДА ВТ_Задачи.Автор В (&Испол)
	               |			ТОГДА ""Исходящие""
	               |		КОГДА ВТ_Задачи.Инициатор В (&Испол)
	               |			ТОГДА ""Инициированные""
	               |		КОГДА ВТ_Задачи.НаКонтроле
	               |			ТОГДА ""На контроле""
	               |	КОНЕЦ КАК Пункт,
	               |	ВЫБОР
	               |		КОГДА ВыбранныеЗадачи.Заявка = НЕОПРЕДЕЛЕНО
	               |			ТОГДА ""Задача""
	               |		ИНАЧЕ ТИПЗНАЧЕНИЯ(ВыбранныеЗадачи.Заявка)
	               |	КОНЕЦ КАК ТипДокумента,
	               |	1 КАК Колич,
	               |	ВЫБОР
	               |		КОГДА ВыбранныеЗадачи.СрокВыполнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |			ТОГДА 0
	               |		ИНАЧЕ РАЗНОСТЬДАТ(&ТекущаяДата, ВыбранныеЗадачи.СрокВыполнения, ДЕНЬ)
	               |	КОНЕЦ КАК ОсталосьДней,
	               |	ВыбранныеЗадачи.Заявка КАК Документ,
	               |	ВыбранныеЗадачи.ВРаботе КАК ВРаботе,
	               |	ВыбранныеЗадачи.Проект КАК Проект
	               |ПОМЕСТИТЬ ВТ_ВыбранныеЗадачи
	               |ИЗ
	               |	ВТ_Задачи КАК ВТ_Задачи
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.Задача КАК ВыбранныеЗадачи
	               |		ПО ВТ_Задачи.Задача = ВыбранныеЗадачи.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ВыбранныеЗадачи.Ссылка КАК Ссылка,
	               |	ВТ_ВыбранныеЗадачи.ПометкаУдаления КАК ПометкаУдаления,
	               |	ВТ_ВыбранныеЗадачи.Номер КАК Номер,
	               |	ВТ_ВыбранныеЗадачи.Дата КАК Дата,
	               |	ВТ_ВыбранныеЗадачи.БизнесПроцесс КАК БизнесПроцесс,
	               |	ВТ_ВыбранныеЗадачи.ТочкаМаршрута КАК ТочкаМаршрута,
	               |	ВТ_ВыбранныеЗадачи.Наименование КАК Наименование,
	               |	ВТ_ВыбранныеЗадачи.Выполнена КАК Выполнена,
	               |	ВТ_ВыбранныеЗадачи.Предприятие КАК Предприятие,
	               |	ВТ_ВыбранныеЗадачи.ЗадачаОт КАК ЗадачаОт,
	               |	ВТ_ВыбранныеЗадачи.Комментарии КАК Комментарии,
	               |	ВТ_ВыбранныеЗадачи.Описание КАК Описание,
	               |	ВТ_ВыбранныеЗадачи.ДатаНачала КАК ДатаНачала,
	               |	ВТ_ВыбранныеЗадачи.ДатаИсполнения КАК ДатаИсполнения,
	               |	ВТ_ВыбранныеЗадачи.Должность КАК Должность,
	               |	ВТ_ВыбранныеЗадачи.Исполнитель КАК Исполнитель,
	               |	ВТ_ВыбранныеЗадачи.Представление КАК Представление,
	               |	ВТ_ВыбранныеЗадачи.Инициатор КАК Инициатор,
	               |	ВТ_ВыбранныеЗадачи.Состояние КАК Состояние,
	               |	ВТ_ВыбранныеЗадачи.ТочкаМаршрутаПредставление КАК ТочкаМаршрутаПредставление,
	               |	ВТ_ВыбранныеЗадачи.ОтменаОплаты КАК ОтменаОплаты,
	               |	ВТ_ВыбранныеЗадачи.НаИсполнении КАК НаИсполнении,
	               |	ВТ_ВыбранныеЗадачи.НаДоработке КАК НаДоработке,
	               |	ВТ_ВыбранныеЗадачи.СрокВыполнения КАК СрокВыполнения,
	               |	ВТ_ВыбранныеЗадачи.КомментарийДелегирования КАК КомментарийДелегирования,
	               |	ВТ_ВыбранныеЗадачи.СуммаДокумента КАК СуммаДокумента,
	               |	ВТ_ВыбранныеЗадачи.ДатаПеренаправления КАК ДатаПеренаправления,
	               |	ВТ_ВыбранныеЗадачи.Делегирование КАК Делегирование,
	               |	ВТ_ВыбранныеЗадачи.СтатусЗадачи КАК СтатусЗадачи,
	               |	ВТ_ВыбранныеЗадачи.Пункт КАК Пункт,
	               |	ВТ_ВыбранныеЗадачи.ТипДокумента КАК ТипДокумента,
	               |	ВТ_ВыбранныеЗадачи.ОсталосьДней КАК ОсталосьДней,
	               |	ВТ_ВыбранныеЗадачи.Документ КАК Документ,
	               |	1 КАК ИндексКартинки,
	               |	ВЫБОР
	               |		КОГДА НЕ ОтслеживаниеЗаявок.Документ ЕСТЬ NULL
	               |			ТОГДА ВЫБОР
	               |					КОГДА ""Входящие"" = ""Входящие""
	               |						ТОГДА 1
	               |					ИНАЧЕ 2
	               |				КОНЕЦ
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК КартинкаЗадачи,
	               |	ВЫБОР
	               |		КОГДА ОтслеживаниеЗаявок.Документ ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК Новая,
	               |	1 КАК Колич,
	               |	ВЫБОР
	               |		КОГДА ОтслеживаниеЗаявок.Документ ЕСТЬ NULL
	               |			ТОГДА 0
	               |		ИНАЧЕ 1
	               |	КОНЕЦ КАК КоличНовая,
	               |	ВЫБОР
	               |		КОГДА ВТ_Отслеживаемые.Документ ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ВТ_Отслеживаемые.Документ ССЫЛКА Документ.Д_СлужебнаяЗаписка
	               |					ТОГДА ИСТИНА
	               |				ИНАЧЕ ЛОЖЬ
	               |			КОНЕЦ
	               |	КОНЕЦ КАК Отслеживается,
	               |	ВТ_ВыбранныеЗадачи.ВРаботе КАК ВРаботе,
	               |	ВТ_ВыбранныеЗадачи.Документ.Дата КАК ДатаДокумента,
	               |	ВЫБОР
	               |		КОГДА ВТ_ВыбранныеЗадачи.Документ ССЫЛКА Справочник.Контрагенты
	               |				ИЛИ ВТ_ВыбранныеЗадачи.Документ ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА ВТ_ВыбранныеЗадачи.Документ
	               |		ИНАЧЕ ВТ_ВыбранныеЗадачи.Документ.Номер
	               |	КОНЕЦ КАК НомерДокумента,
	               |	ВЫБОР
	               |		КОГДА сабХронометражСрезПоследних.ДатаОкончанияРабот = ДАТАВРЕМЯ(1, 1, 1)
	               |			ТОГДА ""Пауза""
	               |		ИНАЧЕ ""Старт""
	               |	КОНЕЦ КАК КомандаСписка,
	               |	сабХронометражСрезПоследних.ДатаНачалаРабот КАК ДатаНачалаРабот,
	               |	сабХронометражСрезПоследних.ДатаОкончанияРабот КАК ДатаОкончанияРабот,
	               |	сабХронометражСрезПоследних.Период КАК Период,
	               |	ВТ_ВыбранныеЗадачи.Проект КАК Проект,
	               |	ВЫБОР
	               |		КОГДА ВТ_ВыбранныеЗадачи.Пункт = ""В работе""
	               |			ТОГДА ""Входящие""
	               |		ИНАЧЕ ВТ_ВыбранныеЗадачи.Пункт
	               |	КОНЕЦ КАК Пункт2
	               |ИЗ
	               |	ВТ_ВыбранныеЗадачи КАК ВТ_ВыбранныеЗадачи
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтслеживаниеЗаявок КАК ОтслеживаниеЗаявок
	               |		ПО ВТ_ВыбранныеЗадачи.Ссылка = ОтслеживаниеЗаявок.Документ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Отслеживаемые КАК ВТ_Отслеживаемые
	               |		ПО ВТ_ВыбранныеЗадачи.Документ = ВТ_Отслеживаемые.Документ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.сабХронометраж.СрезПоследних КАК сабХронометражСрезПоследних
	               |		ПО (ВЫБОР
	               |				КОГДА ВТ_ВыбранныеЗадачи.Документ = НЕОПРЕДЕЛЕНО
	               |					ТОГДА ВТ_ВыбранныеЗадачи.Ссылка
	               |				ИНАЧЕ ВТ_ВыбранныеЗадачи.Документ
	               |			КОНЕЦ = сабХронометражСрезПоследних.Предмет)
	               |			И (сабХронометражСрезПоследних.Завершено = ЛОЖЬ)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Пункт,
	               |	Дата УБЫВ";
				   
	Возврат Запрос;			   
				   
КонецФункции

Функция УпаковатьТекстXML(Значение) Экспорт
	
	Хранилище = Новый ХранилищеЗначения(Значение, Новый СжатиеДанных(9));
	ТекстXML = СериализаторXDTO.XMLСтрока(Хранилище);
	Возврат ТекстXML;
	
КонецФункции

Функция РаспаковатьТекстXML(ТекстXML) Экспорт
	
	Возврат СериализаторXDTO.XMLЗначение(Тип("ХранилищеЗначения"), ТекстXML).Получить();
	
КонецФункции

Функция СекудныВСтрокуВремени(Секунды) Экспорт
	Если ЗначениеЗаполнено(Секунды) И ТипЗнч(Секунды) = Тип("Число") Тогда
		Часов = Цел(Секунды/3600);
		Минут = Цел((Секунды - Часов * 3600) / 60);;
		Секунд     = (Секунды - Часов * 3600 - Минут * 60);
	Иначе
		Часов = 0;
		Минут = 0;
		Секунд     = 0;
	КонецЕсли;
	
	Возврат Формат(Часов,"ЧН=00; ЧВН=") + ":" + Формат(Минут,"ЧЦ=2; ЧН=00; ЧВН=") + ":" + Формат(Секунд,"ЧЦ=2; ЧН=00; ЧВН=");
	
КонецФункции // ()

// Функция для склонения одного слова!!!
// z1 - само слово
// z2 - номер падежа
// z3 - пол
// z4 - 1-склонять как фамилию, 2-имя, 3-отчество
Функция ПадежС(z1,Знач z2=2,Знач z3="*",z4=0) Экспорт
	z5=Найти(z1,"-");
	z6=?(z5=0,"","-"+ПадежС(Сред(z1,z5+1,СтрДлина(z1)-z5+1),z2,z3,z4));
	z1=НРег(?(z5=0,z1,Лев(z1,z5-1)));
	z7=Прав(z1,3);z8=Прав(z7,2);z9=Прав(z8,1);
	z5=СтрДлина(z1);
	za=Найти("ая ия ел ок яц ий па да ца ша ба та га ка",z8);
	zb=Найти("аеёийоуэюяжнгхкчшщ",Лев(z7,1));
	zc=Макс(z2,-z2);
	zd=?(za=4,5,Найти("айяь",z9));
	zd=?((zc=1)или(z9=".")или((z4=2)и(Найти("оиеу"+?(z3="ч","","бвгджзклмнпрстфхцчшщъ"),z9)>0))или((z4=1)и(Найти("мия мяэ лия кия жая лея",z7)>0)),9,?((zd=4)и(z3="ч"),2,?(z4=1,?(Найти("оеиую",z9)+Найти("их ых аа еа ёа иа оа уа ыа эа юа яа",z8)>0,9,?(z3<>"ч",?(za=1,7,?(z9="а",?(za>18,1,6),9)),?(((Найти("ой ый",z8)>0)и(z5>4)и(Прав(z1,4)<>"опой"))или((zb>10)и(za=16)),8,zd))),zd)));
	ze=Найти("лец вей бей дец пец мец нец рец вец аец иец ыец бер",z7);
	zf=?((zd=8)и(zc<>5),?((zb>15)или(Найти("жий ний",z7)>0),"е","о"),?(z1="лев","ьв",?((Найти("аеёийоуэюя",Сред(z1,z5-3 ,1))=0)и((zb>11)или(zb=0))и(ze<>45),"",?(za=7,"л",?(za=10,"к",?(za=13,"йц",?(ze=0,"",?(ze<12,"ь"+?(ze=1,"ц",""),?(ze<37,"ц",?(ze<49,"йц","р"))))))))));
	//  zf=?((zd=9)или((z4=3)и(z3="ы")),z1,Лев(z1,z5-?((zd>6)или(zf<>""),2,?(zd>0,1,0)))+zf+СокрП(Сред("а у а "+Сред("оыые",Найти("внч",z9)+1,1)+"ме "+?(Найти("гжкхш",Лев(z8,1))>0,"и","ы")+" е у ойе я ю я ем"+?(za=16,"и","е")+" и е ю ейе и и ь ьюи и и ю ейи ойойу ойойойойуюойойгомуго"+?((zf="е")или(za=16)или((zb>12)и(zb<16)),"и","ы")+"мм",10*zd+2*zc-3,2)));
	zf=?((zd=9)или((z4=3)и(Прав(z1,1)="ы")),z1,Лев(z1,z5-?((zd>6)или(zf<>""),2,?(zd>0,1,0)))+zf+СокрП(Сред("а у а "+Сред("оыые",Найти("внч",z9)+1,1)+"ме "+?(Найти("гжкхш",Лев(z8,1))>0,"и","ы")+" е у ойе я ю я ем"+?(za=16,"и","е")+" и е ю ейе и и ь ьюи и и ю ейи ойойу ойойойойуюойойгомуго"+?((zf="е")или(za=16)или((zb>12)и(zb<16)),"и","ы")+"мм",10*zd+2*zc-3,2)));
	Возврат ?(""=z1,"",?(z4>0,ВРег(Лев(zf,1))+?((z2<0)и(z4>1),".",Сред(zf,2)),zf)+z6);
КонецФункции

// Функция для склонения ФИО!!!
// z1 - фамилия имя отчество, например, Железняков Юрий Юрьевич
// z2 - Падеж ( по  умолчанию = 2 - родительный) 
// 1 - именительный ( кто?         ) Железняков Юрий Юрьевич
// 2 - родительный  ( нет кого?    ) Железнякова Юрия Юрьевича     
// 3 - дательный    ( кому?        ) Железнякову Юрию Юрьевичу 
// 4 - винительный  ( вижу кого?   ) Железнякова Юрия Юрьевича  
// 5 - творительный ( кем?         ) Железняковым Юрием Юрьевичем    
// 6 - предложный   ( о ком?       ) Железнякове Юрии Юрьевиче 
// z3 - параметр Пол может не указываться, но при наличии фамилий с 
// инициалами точное определение пола невозможно, поэтому предлагается задавать пол этим
// параметром  1 - мужской 2 - женский  
// z4 - состав фио на выходе, "1" - фамилия, "2" - имя, "3" - отчество, можно комбинировать
// Если Падеж(Фио ,1 ,3),       то на выходе получим Фамилия Имя Отчество и т.д.
// Если Падеж(Фио ,1 ,3,"1" ),  то                   Фамилия 
// Если Падеж(Фио ,1 ,3,"2" ),  то                   Имя 
// Если Падеж(Фио ,1 ,3,"3" ),  то                   Отчество 
// Если Падеж(Фио, 1 ,3,"12" ), то                   Фамилия Имя 
// Если Падеж(Фио, 1 ,3,"23" ), то                   Имя Отчество 
Функция Падеж(z1,z2=2,z3=3,z4="123",z5=1) Экспорт
	z6=Нрег(Прав(СокрП(z1),4));
	z7=Прав(z6,1);
	Возврат?(z5<4,Падеж(СокрЛП(СтрЗаменить(Сред(z1,Найти(z1+" "," ")+1),".",". ")),z2,z3,СтрЗаменить(z4,z5,ПадежС(?((z5=3)и(z7="ы"),z1,Лев(z1,Найти(z1+" "," ")-1)),z2,Сред("ча"+z7,?(z3=3,?(z6="оглы",1,?(z6="кызы",1,3)),z3),1),z5)+" "),z5+1),z4);
КонецФункции                             

Процедура ОчиститьМассовоеСообщениеПользователям() Экспорт 
	
	Если БюджетныйНаСервере.РольДоступнаСервер("Администратор") Тогда
		БПСервер.УстановитьКонстантуНаСервере("МассовоеСообщениеПользователям", "");
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьИмяДокументаПоСинониму(Синоним) Экспорт
	
	ИмяДока = "";
	
	Для Каждого ТекОбъект Из Метаданные.Документы Цикл
		
		Если ТекОбъект.Синоним = Синоним Тогда
			ИмяДока = ТекОбъект.Имя;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИмяДока;
	
КонецФункции

Функция СписокВидовСЗ(Родитель, Фильтр) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Д_ВидыВнутреннихДокументов.Ссылка КАК Ссылка,
	               |	Д_ВидыВнутреннихДокументов.Наименование КАК Наименование,
	               |	Д_ВидыВнутреннихДокументов.Код КАК Код,
	               |	ВЫБОР
	               |		КОГДА Д_ВидыВнутреннихДокументов.Ссылка В
	               |				(ВЫБРАТЬ
	               |					Д_ВидыВнутреннихДокументов.Родитель
	               |				ИЗ
	               |					Справочник.Д_ВидыВнутреннихДокументов КАК Д_ВидыВнутреннихДокументов)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ЭтоРодитель,
	               |	Д_ВидыВнутреннихДокументов.Родитель.Код КАК РодительКод,
	               |	Д_ВидыВнутреннихДокументов.ИмяДокумента КАК ИмяДокумента,
	               |	Д_ВидыВнутреннихДокументов.ИмяСписка КАК ИмяСписка,
	               |	Д_ВидыВнутреннихДокументов.Комментарий КАК Комментарий
	               |ИЗ
	               |	Справочник.Д_ВидыВнутреннихДокументов КАК Д_ВидыВнутреннихДокументов
	               |ГДЕ
	               |	Д_ВидыВнутреннихДокументов.Родитель = &Родитель
	               |	И ВЫБОР
	               |			КОГДА ""Все документы"" В (&Фильтр)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ Д_ВидыВнутреннихДокументов.Ссылка В (&Фильтр)
	               |		КОНЕЦ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Родитель", ?(Родитель = Неопределено, Справочники.Д_ВидыВнутреннихДокументов.ПустаяСсылка(), Родитель));
	Запрос.УстановитьПараметр("Фильтр", Фильтр);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	МассивСтруктуры = Новый Массив;
	Если Родитель = Неопределено Тогда
		СтруктураДоков = Новый Структура;
		СтруктураДоков.Вставить("Ссылка", "Все документы");
		СтруктураДоков.Вставить("Наименование", "Все документы");
		СтруктураДоков.Вставить("Код", "011");
		СтруктураДоков.Вставить("ЭтоРодитель", Ложь);
		СтруктураДоков.Вставить("РодительКод", null);
		СтруктураДоков.Вставить("ИмяСписка", "Все документы");
		СтруктураДоков.Вставить("Комментарий", "Открыть полный список внутренних документов");
		МассивСтруктуры.Добавить(СтруктураДоков);
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		Попытка
			Если НЕ ПравоДоступа("Просмотр", Метаданные.Документы[Выборка.ИмяДокумента]) Тогда
				Продолжить;	
			КонецЕсли;
		Исключение
			Продолжить;
		КонецПопытки;
		СтруктураДоков = Новый Структура;
		СтруктураДоков.Вставить("Ссылка", Выборка.Ссылка);
		СтруктураДоков.Вставить("Наименование", Выборка.Наименование);
		СтруктураДоков.Вставить("Код", Выборка.Код);
		СтруктураДоков.Вставить("ЭтоРодитель", Выборка.ЭтоРодитель);
		СтруктураДоков.Вставить("РодительКод", Выборка.РодительКод);
		СтруктураДоков.Вставить("ИмяСписка", Выборка.ИмяСписка);
		СтруктураДоков.Вставить("Комментарий", Выборка.Комментарий);
		МассивСтруктуры.Добавить(СтруктураДоков);
	КонецЦикла;
	Возврат МассивСтруктуры;
	
КонецФункции // ()

Функция ПроверкаВозможностиРедактированияФайлаИПрикрепления(Объект, АдресВремХранилища = Неопределено, Владелец = Неопределено) Экспорт

	//проверкаСуществующего
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПрикрепленныеОбъекты.Владелец КАК Владелец,
		               |	ПрикрепленныеОбъекты.Объект КАК Объект
		               |ИЗ
		               |	РегистрСведений.ПрикрепленныеОбъекты КАК ПрикрепленныеОбъекты
		               |ГДЕ
		               |	ВЫБОР
		               |			КОГДА &Владелец = НЕОПРЕДЕЛЕНО
		               |				ТОГДА ИСТИНА
		               |			ИНАЧЕ ПрикрепленныеОбъекты.Владелец = &Владелец
		               |		КОНЕЦ
		               |	И ПрикрепленныеОбъекты.Объект = &Объект";
		
		Запрос.УстановитьПараметр("Владелец", Владелец);
		Запрос.УстановитьПараметр("Объект", Объект);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		ЗаблокированныйВладелец = Неопределено;
		
		Если Выборка.Количество() Тогда
			ЕстьЗапись = Истина;
			Если Владелец = Неопределено Тогда
				Пока Выборка.Следующий() Цикл
					Если РегистрыСведений.ПрикрепленныеОбъекты.ПроверитьВладельца(Выборка.Владелец) ИЛИ НЕ БПСервер.ТекПользовательИсполнительДокумента(Выборка.Владелец, Ложь) Тогда
						ЗаблокированныйВладелец = Выборка.Владелец;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			ЕстьЗапись = Ложь;		
		КонецЕсли;
		
		ТекСписок = Новый СписокЗначений;
		
		
		Если ЗначениеЗаполнено(АдресВремХранилища) Тогда
			Попытка
				ТекСписок = ПолучитьИзВременногоХранилища(АдресВремХранилища);
				Если ТекСписок = Неопределено Тогда
					ТекСписок = Новый СписокЗначений;
				КонецЕсли;
			Исключение
				ТекСписок = Новый СписокЗначений;
			КонецПопытки;
		КонецЕсли;
		
		Возврат Новый Структура("ЕстьЗапись, ТекСписок, ЗаблокированныйВладелец", ЕстьЗапись, ТекСписок, ЗаблокированныйВладелец); 
		

	КонецФункции // ()

Функция ЧислоРабочихДнейВПериоде(Дата1, Дата2 = Неопределено) Экспорт
	
	Если Дата2 = Неопределено Тогда
		Дата2 = КонецМесяца(Дата1);	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КалендарныеГрафики.ДатаГрафика) КАК ДатаГрафика
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|ГДЕ
	|	КалендарныеГрафики.ДатаГрафика <= КОНЕЦПЕРИОДА(&Дата2, День)
	|	И КалендарныеГрафики.ДатаГрафика >= НАЧАЛОПЕРИОДА(&Дата1, День)
	|	И КалендарныеГрафики.ДеньВключенВГрафик = ИСТИНА";
	
	Запрос.УстановитьПараметр("Дата1", Дата1);
	Запрос.УстановитьПараметр("Дата2", Дата2);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Возврат Выборка.ДатаГрафика;
		
	КонецЦикла;
	
	Возврат 0;	
	

КонецФункции // ()

Функция ВернутьСледующийРабочийДень(Дата, Направление = 1) Экспорт
	ДниДоСрока = 0;
	РабочийДень = Ложь;
	Пока НЕ РабочийДень = Истина Цикл
		ГодКалендаря = Год(Дата);		
		Календарь = Справочники.Календари.НайтиПоНаименованию(Формат(ГодКалендаря,"ЧГ=0"), Истина);
		Если Не ЗначениеЗаполнено(Календарь) Тогда
			Календарь = Справочники.Календари.НайтиПоНаименованию("Российская Федерация", Истина);
		КонецЕсли;
		РабочийДень = БПСервер.ПолучитьПризнакРабочегоДня(Календарь,ГодКалендаря,НачалоДня(Дата + Направление * (ДниДоСрока + 1) * 24 * 60 * 60));
		Если РабочийДень = Неопределено Тогда
			ДниДоСрока = 1;
			Прервать;	
		КонецЕсли;
		ДниДоСрока = ДниДоСрока + 1;
	КонецЦикла;
	Возврат Дата + Направление * ДниДоСрока * 24*60*60;
	
КонецФункции // ()

#КонецОбласти 

#Область РаботаСБизнесПроцессами

Функция НайтиТекущийБПСервер(ТекЗаявка) Экспорт
	
	//Если ТипЗнч(ТекЗаявка) = Тип("ЗадачаСсылка.Задача") Тогда
	//	ТекЗаявка = ТекЗаявка.Заявка;
	//ИначеЕсли ТипЗнч(ТекЗаявка) = Тип("БизнесПроцессСсылка.СогласованиеОбщее") ИЛИ ТипЗнч(ТекЗаявка) = Тип("БизнесПроцессСсылка.Согласование1") ИЛИ ТипЗнч(ТекЗаявка) = Тип("БизнесПроцессСсылка.Согласование3") ИЛИ ТипЗнч(ТекЗаявка) = Тип("БизнесПроцессСсылка.ЗаявкиАдминистратору") ИЛИ ТипЗнч(ТекЗаявка) = Тип("БизнесПроцессСсылка.УтверждениеБюджета") Тогда
	//	ТекЗаявка = ТекЗаявка.Заявка;	
	//КонецЕсли;
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//|	Согласование1.Ссылка
	//|ИЗ
	//|	БизнесПроцесс.Согласование1 КАК Согласование1
	//|ГДЕ
	//|	Согласование1.Заявка = &Заявка
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	Согласование2.Ссылка
	//|ИЗ
	//|	БизнесПроцесс.Согласование2 КАК Согласование2
	//|ГДЕ
	//|	Согласование2.Заявка = &Заявка
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	Согласование3.Ссылка
	//|ИЗ
	//|	БизнесПроцесс.Согласование3 КАК Согласование3
	//|ГДЕ
	//|	Согласование3.Заявка = &Заявка
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	СогласованиеОбщее.Ссылка
	//|ИЗ
	//|	БизнесПроцесс.СогласованиеОбщее КАК СогласованиеОбщее
	//|ГДЕ
	//|	СогласованиеОбщее.Заявка = &Заявка
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	ЗаявкиАдминистратору.Ссылка
	//|ИЗ
	//|	БизнесПроцесс.ЗаявкиАдминистратору КАК ЗаявкиАдминистратору
	//|ГДЕ
	//|	ЗаявкиАдминистратору.Заявка = &Заявка";
	//
	//Запрос.УстановитьПараметр("Заявка", ТекЗаявка);
	//
	//Результат = Запрос.Выполнить();
	//Выборка = Результат.Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//	Возврат Выборка.Ссылка;	
	//КонецЦикла;
	
	Возврат Неопределено;
	
	
	
	
КонецФункции // ()

Функция ПоискБП(БПИмя, Ссылка) Экспорт
	//ищем созданные бизнес-процессы
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//|	ЗаявкиНаЗакупку.Ссылка
	//|ИЗ
	//|	БизнесПроцесс." + БПИмя + " КАК ЗаявкиНаЗакупку
	//|ГДЕ
	//|   ЗаявкиНаЗакупку.ПометкаУдаления = Ложь
	//|	И ЗаявкиНаЗакупку.Заявка = &Заявка";
	//
	//Запрос.УстановитьПараметр("Заявка", Ссылка);
	//
	//Результат = Запрос.Выполнить();
	//Выборка = Результат.Выбрать();
	//Если Выборка.Следующий() Тогда
	//	Возврат Выборка.Ссылка;
	//Иначе
		Возврат Неопределено;	
	//КонецЕсли;
КонецФункции // ()

Процедура УдалитьБПИЗадачиУниверсальная(ДокБП, Пометка)
	
	//удаляем бизнесс-процессы
	//Для каждого ТекБПМетаданные Из Метаданные.БизнесПроцессы Цикл
		//ИмяБП = ТекБПМетаданные.Имя;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Согласование1.Ссылка
		               |ИЗ
		               |	БизнесПроцесс.Согласование1 КАК Согласование1
		               |ГДЕ
		               |	Согласование1.Заявка = &Заявка
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	Согласование2.Ссылка
		               |ИЗ
		               |	БизнесПроцесс.Согласование2 КАК Согласование2
		               |ГДЕ
		               |	Согласование2.Заявка = &Заявка
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	Согласование3.Ссылка
		               |ИЗ
		               |	БизнесПроцесс.Согласование3 КАК Согласование3
		               |ГДЕ
		               |	Согласование3.Заявка = &Заявка
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	УтверждениеБюджета.Ссылка
		               |ИЗ
		               |	БизнесПроцесс.УтверждениеБюджета КАК УтверждениеБюджета
		               |ГДЕ
		               |	УтверждениеБюджета.Заявка = &Заявка
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ЗаявкиАдминистратору.Ссылка
		               |ИЗ
		               |	БизнесПроцесс.ЗаявкиАдминистратору КАК ЗаявкиАдминистратору
		               |ГДЕ
		               |	ЗаявкиАдминистратору.Заявка = &Заявка
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	СогласованиеОбщее.Ссылка
		               |ИЗ
		               |	БизнесПроцесс.СогласованиеОбщее КАК СогласованиеОбщее
		               |ГДЕ
		               |	СогласованиеОбщее.Заявка = &Заявка";
		
		Запрос.УстановитьПараметр("Заявка", ДокБП);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			БПОбъект = Выборка.Ссылка.ПолучитьОбъект();
			БПОбъект.УстановитьПометкуУдаления(Пометка);
			БПОбъект.Записать();
		КонецЦикла;
	//КонецЦикла;
	
	//удаляем задачи
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Задача.Ссылка
	|ИЗ
	|	Задача.Задача КАК Задача
	|ГДЕ
	|	Задача.Заявка = &Заявка";
	
	Запрос.УстановитьПараметр("Заявка", ДокБП);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекЗадача = Выборка.Ссылка.ПолучитьОбъект();
		ТекЗадача.УстановитьПометкуУдаления(Пометка);
		ТекЗадача.Записать();
	КонецЦикла;
	
	//удаляем оповещения
	//ИмяБП = ТекБПМетаданные.Имя;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Согласование1.Ссылка
	|ИЗ
	|	Документ.БП_Оповещение КАК Согласование1
	|ГДЕ
	|	Согласование1.Гиперссылка = &Заявка";
	
	Запрос.УстановитьПараметр("Заявка", ДокБП);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		БПОбъект = Выборка.Ссылка.ПолучитьОбъект();
		БПОбъект.УстановитьПометкуУдаления(Пометка);
		БПОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Функция СтадияИсполненияОбщая(ТекБП) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Задача.Ссылка,
	|	Задача.ТочкаМаршрута
	|ИЗ
	|	Задача.Задача КАК Задача
	|ГДЕ
	|	Задача.ПометкаУдаления = ЛОЖЬ
	|	И Задача.Выполнена = ЛОЖЬ
	|	И Задача.БизнесПроцесс = &БизнесПроцесс";
	
	Запрос.УстановитьПараметр("БизнесПроцесс", ТекБП);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ТекСтадия = Неопределено;	
	Пока Выборка.Следующий() Цикл
		ТекСтадия = Выборка.ТочкаМаршрута;	
	КонецЦикла;
	
	Возврат НЕ ТочкиПроцессов("исполнение").Найти(ТекСтадия) = Неопределено Или НЕ ТочкиПроцессов("ознакомление").Найти(ТекСтадия) = Неопределено Или ТекБП.Завершен;
	
	
КонецФункции // ()

Функция ЕстьПоискПодчиненныеДокументы(ИмяДокумента, ТекСсылка, КонкретныйТип = "", КонкретноеПредприятие = "") Экспорт
	Если КонкретныйТип = "" Тогда
		МассивТипов = Новый Массив;
		//МассивТипов.Добавить("КЗ_АвансовыйОтчет");
		//МассивТипов.Добавить("Л_ПутевойЛист");
		//МассивТипов.Добавить("ПР_Отгрузка");
		//МассивТипов.Добавить("Д_УведомлениеРАР");
		//МассивТипов.Добавить("Л_ОтправкаВагонов");
		МассивТипов.Добавить("КадровыеДвижения");
		СпрДок = "Документ";
		ДокОснование = "ДокОснование";
	Иначе
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(КонкретныйТип);
		Если КонкретныйТип = "ДоговорыКонтрагентов" Тогда
			СпрДок = "Справочник";
			ДокОснование = "ДокументОснование";
		ИначеЕсли КонкретныйТип = "ДополнительныеСоглашенияДоговоров" Тогда
			СпрДок = "Справочник";
			ДокОснование = "ДокументОснование";
		Иначе
			СпрДок = "Документ";
			ДокОснование = "ДокОснование";
		КонецЕсли;
	КонецЕсли;
	
	МассивПочиненных = Новый Массив;
	Для каждого ТекТип Из МассивТипов Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	КЗ_АвансовыйОтчет.Ссылка
		|ИЗ
		|	" + СпрДок + "." + ТекТип + " КАК КЗ_АвансовыйОтчет
		|ГДЕ
		|	КЗ_АвансовыйОтчет." + ДокОснование + " = &ДокОснование";
		
		Запрос.УстановитьПараметр("ДокОснование", ТекСсылка);
		Если НЕ КонкретноеПредприятие = "" И НЕ КонкретныйТип = "" Тогда
			Запрос.УстановитьПараметр("Предприятие", КонкретноеПредприятие);
			Запрос.Текст = Запрос.Текст + "
				|И КЗ_АвансовыйОтчет.Предприятие = &Предприятие";
		КонецЕсли;
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			МассивПочиненных.Добавить(Выборка.Ссылка);		
		КонецЦикла;
	КонецЦикла; 
	
	Возврат  МассивПочиненных;
	
	
КонецФункции // ()

//процедура используется при установке/снятии пометки удаления следующих объектов:
//-Служебная записка
//-Заявка на оплату
Процедура ОповеститьОбИзмененииСтатусаДокумента(ТекОбъект)  Экспорт
	СтруктураПоиска = Новый Структура("Согласовано", Истина);
	МассивСогласовавших = Новый Массив;
	МассивИсполнителей = Новый Массив;
	ТекБП = НайтиТекущийБПСервер(ТекОбъект.Ссылка);
	Если ЗначениеЗаполнено(ТекБП) Тогда
		ОтобранныеСтроки = ТекБП.ДопСогласование.НайтиСтроки(СтруктураПоиска);
		Для каждого ТекСтрока Из ОтобранныеСтроки Цикл
			Если ТекОбъект.ПометкаУдаления Тогда
				Сообщить("Пользователь """ + Строка(ТекСтрока.СубъектСогласования) + """ оповещен об удалении документа.");		
			Иначе	
				Сообщить("Пользователь """ + Строка(ТекСтрока.СубъектСогласования) + """ оповещен о восстановлении документа.");		
			КонецЕсли;
			МассивСогласовавших.Добавить(ТекСтрока.СубъектСогласования);
		КонецЦикла;
		
		Попытка //если в бизнес процессе есть ДопИсполнение
			ОтобранныеСтроки = ТекБП.ДопИсполнение.НайтиСтроки(Новый Структура("ПринятоКИсполнению", Истина));
			Для каждого ТекСтрока Из ОтобранныеСтроки Цикл
				Если ТекОбъект.ПометкаУдаления Тогда
					Сообщить("Пользователь """ + Строка(ТекСтрока.Исполнитель) + """ оповещен об удалении документа.");		
				Иначе	
					Сообщить("Пользователь """ + Строка(ТекСтрока.Исполнитель) + """ оповещен о восстановлении документа.");		
				КонецЕсли;
				МассивИсполнителей.Добавить(ТекСтрока.Исполнитель);
			КонецЦикла;
			
		Исключение
			//нет доп исполнения
		КонецПопытки;
		
		
		Если МассивСогласовавших.Количество() Тогда
			Если ТекОбъект.ПометкаУдаления Тогда
				БПСервер.СоздатьОповещение(МассивСогласовавших, Строка(ТекОбъект.Ссылка) + " , которую Вы согласовали, помечена на удаление пользователем """ + Строка(ПараметрыСеанса.ТекущийПользователь) + """, процесс утверждения прерван.", "Сообщение: помечено на удаление " + Строка(ТекОбъект.Ссылка), ТекОбъект.Ссылка,,"Системное сообщение");
			Иначе
				БПСервер.СоздатьОповещение(МассивСогласовавших, "С документа " + Строка(ТекОбъект.Ссылка) + " , который Вы согласовали, снята пометка на удаление пользователем """ + Строка(ПараметрыСеанса.ТекущийПользователь) + """, процесс утверждения возобновлен.", "Сообщение: снята пометка на удаление " + Строка(ТекОбъект.Ссылка), ТекОбъект.Ссылка,, "Системное сообщение");
			КонецЕсли;
		КонецЕсли;
		
		Если МассивИсполнителей.Количество() Тогда
			Если ТекОбъект.ПометкаУдаления Тогда
				БПСервер.СоздатьОповещение(МассивИсполнителей, Строка(ТекОбъект.Ссылка) + " , которую Вы приняли к исполнению, помечена на удаление пользователем """ + Строка(ПараметрыСеанса.ТекущийПользователь) + """, процесс утверждения прерван.", "Сообщение: помечено на удаление " + Строка(ТекОбъект.Ссылка), ТекОбъект.Ссылка,,"Системное сообщение");
			Иначе
				БПСервер.СоздатьОповещение(МассивИсполнителей, "С документа " + Строка(ТекОбъект.Ссылка) + " , который Вы приняли к исполнению, снята пометка на удаление пользователем """ + Строка(ПараметрыСеанса.ТекущийПользователь) + """, процесс утверждения возобновлен.", "Сообщение: снята пометка на удаление " + Строка(ТекОбъект.Ссылка), ТекОбъект.Ссылка,, "Системное сообщение");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

//процедура используется при "Ознакомлении и завершении БП" следующих объектов:
//-Служебная записка
//-Заявка на оплату
Процедура ОповеститьОНеутвержденииДокумента(ТекДокументСсылка, БПСсылка) Экспорт
	СтруктураПоиска = Новый Структура("Согласовано", Истина);
	МассивСогласовавших = Новый Массив;
	ОтобранныеСтроки = БПСсылка.ДопСогласование.НайтиСтроки(СтруктураПоиска);
	Для каждого ТекСтрока Из ОтобранныеСтроки Цикл
		Сообщить("Пользователь """ + Строка(ТекСтрока.СубъектСогласования) + """ оповещен о том, что документ не утвержден/не согласован.");		
		МассивСогласовавших.Добавить(ТекСтрока.СубъектСогласования);
	КонецЦикла;
	Если МассивСогласовавших.Количество() Тогда
		БПСервер.СоздатьОповещение(МассивСогласовавших, "Документ " + Строка(ТекДокументСсылка) + ", который Вы согласовали, в конечном итоге не утвержден/не согласован, бизнес-процесс завершен.", "Сообщение: документ не согласован " + Строка(ТекДокументСсылка), ТекДокументСсылка,,"Системное сообщение");
	КонецЕсли;
КонецПроцедуры

//сравнивает стадию бизнес-процесса СогласованиеОбщий
Функция СравнитьСтадию(СтадияСтрока, ТекЗаявка) Экспорт
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//|	Задача.Ссылка,
	//|	Задача.ТочкаМаршрута
	//|ИЗ
	//|	Задача.Задача КАК Задача
	//|ГДЕ
	//|	Задача.Заявка = &Заявка
	//|	И Задача.Выполнена = ЛОЖЬ
	//|	И Задача.ПометкаУдаления = ЛОЖЬ";
	//
	//Запрос.УстановитьПараметр("Заявка", ТекЗаявка);
	//
	//Результат = Запрос.Выполнить();
	//Выборка = Результат.Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//	Возврат БизнесПроцессы.СогласованиеОбщее.ТочкиМаршрута[СтадияСтрока] = Выборка.ТочкаМаршрута ИЛИ 
	//	БизнесПроцессы.Согласование1.ТочкиМаршрута[СтадияСтрока] = Выборка.ТочкаМаршрута;		
	//КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции // ()

Функция  ПроверитьОтслеживаниеЗаявки(СсылкаНаДокумент, Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;	
	
	Если Не СсылкаНаДокумент.Пустая() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтслеживаниеЗаявок.Документ
		|ИЗ
		|	РегистрСведений.ОтслеживаниеЗаявок КАК ОтслеживаниеЗаявок
		|ГДЕ
		|	ОтслеживаниеЗаявок.Документ = &Документ
		|	И ОтслеживаниеЗаявок.Пользователь = &Пользователь";
		Запрос.УстановитьПараметр("Документ", СсылкаНаДокумент);
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Возврат Истина;
		КонецЦикла;	
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции	

Процедура ОтслеживатьЗаявкуНаСервере(ОтслеживатьСЗ, СсылкаНаДокумент, Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;	
	
	НаборЗаписей = РегистрыСведений.ОтслеживаниеЗаявок.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписей.Отбор.Документ.Установить(СсылкаНаДокумент);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	Если ОтслеживатьСЗ Тогда
		Запись = НаборЗаписей.Добавить();
		Запись.Пользователь = Пользователь;
		Запись.Документ = СсылкаНаДокумент;
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ПолучитьТекущуюТочкуМаршрута(Док) Экспорт
	
	Если ТипЗнч(Док) = Тип("Массив") Тогда
		Если Док.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		//ВидДока = Док[0].Метаданные().Имя;
		Документ = Док[0];
	Иначе
		//ВидДока = Док.Метаданные().Имя;
		Документ = Док;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Д_ТекущаяЗадача.ТочкаМаршрута
	               |ИЗ
	               |	РегистрСведений.Д_ТекущаяЗадача КАК Д_ТекущаяЗадача
	               |ГДЕ
	               |	Д_ТекущаяЗадача.Документ = &Документ";
	Запрос.УстановитьПараметр("Документ", Документ);
	
	// закомментированно 20.11.14 {
	//// бп и реквизиты в зависимости от вида документа
	//Если ВидДока =  "Д_ЗаявкаНаОтгрузку" Тогда
	//	БП1 = "ЗаявкиНаОтгрузку";
	//	БП2 = "СогласованиеОбщее";
	//	СЗНеСогласована1 = "СогласованиеОбщее.СЗНеСогласована";
	//	СЗНеСогласована2 = "ЗаявкиНаОтгрузку.НеСогласована";
	//ИначеЕсли ВидДока = "Д_ЗаявкаНаОплату" Тогда
	//	БП1 = "Согласование1";
	//	БП2 = "Согласование1";
	//	СЗНеСогласована1 = "Null";
	//	СЗНеСогласована2 = "Null";
	//ИначеЕсли ВидДока = "Д_ЗаявкаНаЗакупкуСырья" Тогда
	//	БП1 = "ЗаявкиНаЗакупку";
	//	БП2 = "ЗаявкиНаЗакупку";
	//	СЗНеСогласована1 = "СогласованиеОбщее.СЗНеСогласована";
	//	СЗНеСогласована2 = "ЗаявкиНаОтгрузку.СЗНеСогласована";
	//ИначеЕсли ВидДока = "Д_СогласованиеТрат" Тогда
	//	БП1 = "СогласованиеТрат";
	//	БП2 = "СогласованиеТрат";
	//	СЗНеСогласована1 = "СогласованиеОбщее.СЗНеСогласована";
	//	СЗНеСогласована2 = "ЗаявкиНаОтгрузку.СЗНеСогласована";
	//ИначеЕсли ВидДока = "Д_СлужебнаяЗаписка" Тогда
	//	БП1 = "Согласование2";
	//	БП2 = "Согласование3";
	//	СЗНеСогласована1 = "СогласованиеОбщее.СЗНеСогласована";
	//	СЗНеСогласована2 = "ЗаявкиНаОтгрузку.СЗНеСогласована";
	//Иначе
	//	БП1 = "СогласованиеОбщее";
	//	БП2 = "Согласование3";
	//	СЗНеСогласована1 = "СогласованиеОбщее.НеСогласована";
	//	СЗНеСогласована2 = "ЗаявкиНаОтгрузку.СЗНеСогласована";
	//КонецЕсли;
	//
	//Запрос = Новый Запрос;	
	//Запрос.УстановитьПараметр("ТекущийДокумент", Документ);
	//
	//Запрос.Текст = "ВЫБРАТЬ
	//|	Документ" +ВидДока +".Ссылка,
	//|	ЕстьNull(ВЫБОР
	//|				КОГДА Согласование.Завершен = ИСТИНА
	//|					ТОГДА ВЫБОР
	//|							КОГДА Согласование.НеСогласована = ИСТИНА
	//|								ТОГДА ""Не согласовано""
	//|							ИНАЧЕ ""Согласовано""
	//|						КОНЕЦ
	//|				ИНАЧЕ Задача.ТочкаМаршрута
	//|			КОНЕЦ, ""Подготовка"") КАК ТочкаМаршрута
	//|ИЗ
	//|	Документ." +ВидДока +" КАК Документ" +ВидДока +"
	//|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//|			МАКСИМУМ(Задача.ТочкаМаршрута) КАК ТочкаМаршрута,
	//|			Задача.Заявка КАК Заявка,
	//|			МИНИМУМ(Задача.Исполнитель) КАК Исполнитель
	//|		ИЗ
	//|			Задача.Задача КАК Задача
	//|		ГДЕ
	//|			Задача.ПометкаУдаления = ЛОЖЬ
	//|			И Задача.Выполнена = ЛОЖЬ
	//|		
	//|		СГРУППИРОВАТЬ ПО
	//|			Задача.Заявка) КАК Задача
	//|		ПО Документ" +ВидДока +".Ссылка = Задача.Заявка
	//|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//|			СогласованиеОбщее.Завершен КАК Завершен,
	//|			" +СЗНеСогласована1+ " КАК НеСогласована,
	//|			СогласованиеОбщее.Заявка КАК Заявка,
	//|			СогласованиеОбщее.Ссылка КАК Ссылка
	//|		ИЗ
	//|			БизнесПроцесс." +БП1+ " КАК СогласованиеОбщее
	//|		ГДЕ
	//|			СогласованиеОбщее.Заявка = &ТекущийДокумент
	//|		
	//|		ОБЪЕДИНИТЬ ВСЕ
	//|		
	//|		ВЫБРАТЬ
	//|			ЗаявкиНаОтгрузку.Завершен,
	//|			" +СЗНеСогласована2+ ",
	//|			ЗаявкиНаОтгрузку.Заявка,
	//|			ЗаявкиНаОтгрузку.Ссылка
	//|		ИЗ
	//|			БизнесПроцесс." +БП2+ " КАК ЗаявкиНаОтгрузку
	//|		ГДЕ
	//|			ЗаявкиНаОтгрузку.Заявка = &ТекущийДокумент) КАК Согласование
	//|		ПО Документ" +ВидДока +".Ссылка = Согласование.Заявка
	//|ГДЕ
	//|	Документ" +ВидДока +".Ссылка = &ТекущийДокумент";
	//}
	
	Результат = Запрос.Выполнить();
	ТЗ_Рез = Результат.Выгрузить();
	
	Возврат ?(ТЗ_Рез.Количество(), ТЗ_Рез[0].ТочкаМаршрута, "");
	
КонецФункции

Функция ЗаполнитьПодчиненныеДоки(Объект) Экспорт
		СтруктураНеобходимостиПодчиненного = НуженПодчиненный(Объект);
	Если СтруктураНеобходимостиПодчиненного.ИсполнительДолженСоздатьНаОсновании Тогда
		Если СтруктураНеобходимостиПодчиненного.РольИсполнителя = "Кассир" Тогда
			ТипЗаявки = "УЧ_АвансовыйОтчет";
			Массив = Новый Массив;
			Массив.Добавить(Тип("ДокументСсылка.УЧ_АвансовыйОтчет"));
			ОписаниеТиповЧ = Новый ОписаниеТипов(Массив);
		ИначеЕсли СтруктураНеобходимостиПодчиненного.РольИсполнителя ="Учетчик" Тогда
			ТипЗаявки = "УЧ_АвансовыйОтчет";
			Массив = Новый Массив;
			Массив.Добавить(Тип("ДокументСсылка.УЧ_АвансовыйОтчет"));
			ОписаниеТиповЧ = Новый ОписаниеТипов(Массив);
		ИначеЕсли СтруктураНеобходимостиПодчиненного.РольИсполнителя ="КУ" Тогда
			ТипЗаявки = "УЧ_АвансовыйОтчет";
			ТипЗаявкиКУ="УЧ_АвансовыйОтчет";
			Массив = Новый Массив;
			Массив.Добавить(Тип("ДокументСсылка.УЧ_АвансовыйОтчет"));
			//Массив.Добавить(Тип("ДокументСсылка.КЗ_АвансовыйОтчет"));
			ОписаниеТиповЧ = Новый ОписаниеТипов(Массив);
		//ИначеЕсли СтруктураНеобходимостиПодчиненного.РольИсполнителя = "ЗавЛаб" Тогда
		//	ТипЗаявки = "ПР_Отгрузка";
		//	Массив = Новый Массив;
		//	Массив.Добавить(Тип("ДокументСсылка.ПР_Отгрузка"));
		//	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив);
		ИначеЕсли СтруктураНеобходимостиПодчиненного.РольИсполнителя = "Кадровик" Тогда
			ТипЗаявки = "КадровыеДвижения";
			Массив = Новый Массив;
			Массив.Добавить(Тип("ДокументСсылка.КадровыеДвижения"));
			ОписаниеТиповЧ = Новый ОписаниеТипов(Массив);
		КонецЕсли;
		
		Возврат Новый Структура("ОписаниеТиповЧ, ТипЗаявки, ТипЗаявкиКУ", ОписаниеТиповЧ, ТипЗаявки, ТипЗаявкиКУ) 
		
	КонецЕсли;
	

КонецФункции // ()

Функция НуженПодчиненный(Объект, ТочкаМаршрута = Неопределено) Экспорт
	
	Если БПСервер.ТочкиПроцессов("исполнение").Найти(Объект.ТочкаМаршрута) = Неопределено Тогда //не точка исполнения
		Возврат Новый Структура("ИсполнительДолженСоздатьНаОсновании, РольИсполнителя", Ложь, "");
	КонецЕсли;
	
	ИсполнительДолженСоздатьНаОсновании = Ложь;
	РольИсполнителя = "";
	Если ТипЗнч(Объект.Заявка) = тип("ДокументСсылка.Д_ЗаявкаНаОтгрузку") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ОсновныеДолжностиПредприятия.Предприятие
		|ИЗ
		|	РегистрСведений.ОсновныеДолжностиПредприятия КАК ОсновныеДолжностиПредприятия
		|ГДЕ
		|	ОсновныеДолжностиПредприятия.Должность = ЗНАЧЕНИЕ(Перечисление.ОсновныеДолжностиПредприятия.Логист)
		|	И ОсновныеДолжностиПредприятия.Сотрудник В(&Сотрудник)";
					   
		Запрос.УстановитьПараметр("Сотрудник", БПСервер.ПолучитьМассивПользователей());
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Не Объект.Заявка.ТипРеализации = "Спирт№2" Тогда 
			
			Если Выборка.Количество() Тогда
				ИсполнительДолженСоздатьНаОсновании = Истина; //исполнение принял один ответственный за автодоставку
				РольИсполнителя = "ОтвАвто";
			КонецЕсли;
			
			//Если НЕ БПСервер.ПолучитьМассивПользователей().Найти(Константы.ОтветственныйРАР.Получить()) = Неопределено Тогда
			//	ИсполнительДолженСоздатьНаОсновании = Истина; //исполнение принял ответсвенный за уведомления	
			//	РольИсполнителя = "ОтвРАР";
			//КонецЕсли;
			
			//Если НЕ БПСервер.ПолучитьМассивПользователей().Найти(Константы.БП_ОтветственныйЗаЖДДоставку.Получить()) = Неопределено Тогда
			//	ИсполнительДолженСоздатьНаОсновании = Истина; //исполнение принял ответсвенный за жд	
			//	РольИсполнителя = "ОтвЖД";
			//КонецЕсли;
			
		Иначе
			
			ИсполнительДолженСоздатьНаОсновании = Ложь;
			
		КонецЕсли;
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ОсновныеДолжностиПредприятия.Предприятие
		|ИЗ
		|	РегистрСведений.ОсновныеДолжностиПредприятия КАК ОсновныеДолжностиПредприятия
		|ГДЕ
		|	ОсновныеДолжностиПредприятия.Должность = ЗНАЧЕНИЕ(Перечисление.ОсновныеДолжностиПредприятия.ЗавЛабораторией)
		|	И ОсновныеДолжностиПредприятия.Сотрудник В(&Сотрудник)";
		
		Запрос.УстановитьПараметр("Сотрудник", БПСервер.ПолучитьМассивПользователей());
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Количество() Тогда
			ИсполнительДолженСоздатьНаОсновании = Истина; //исполнение принял один из зав лаборатории
			РольИсполнителя = "ЗавЛаб";
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Объект.Заявка) = тип("ДокументСсылка.Д_ЗаявкаНаАвансовыйОтчет") Тогда
		ИсполнительДолженСоздатьНаОсновании = Истина; //факт авансового отчета нужен всегда
		//Если (рольдоступна("сабУчетчик")) и не РольДоступна("Кассир") тогда 
		//	РольИсполнителя = "Учетчик";
		//ИначеЕсли (РольДоступна("Кассир") ИЛИ РольДоступна("КассирПредприятия")) и не (рольдоступна("сабУчетчик")) тогда
		РольИсполнителя = "Кассир";
		//ИначеЕсли (рольдоступна("сабУчетчик")) и РольДоступна("Кассир") тогда
		//	РольИсполнителя="КУ";
		//Иначе
		//	РольИсполнителя = "Учетчик";	
		//КонецЕсли;	
	КонецЕсли;
	
	//заявка на кадровое движение
	Если ТипЗнч(Объект.Заявка) = тип("ДокументСсылка.Д_ЗаявкаНаКадровоеДвижение") Тогда
		ИсполнительДолженСоздатьНаОсновании = Истина; //факт авансового отчета нужен всегда
		РольИсполнителя = "Кадровик";
	КонецЕсли;

	//заявка согласование договора
	Если ЗначениеЗаполнено(Объект.РольИсполнителя.НеобходомоСоздатьДокумент) Тогда
		Если ТипЗнч(Объект.Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаСогласованиеДоговора") Тогда
			Если Объект.Заявка.ВидСЗ = Справочники.Д_ВидыВнутреннихДокументов.ЗаявкаНаСогласованиеДоговора Тогда
				ИсполнительДолженСоздатьНаОсновании = Истина;
				РольИсполнителя = "УчетчикСоздательДоговора";
			ИначеЕсли Объект.Заявка.ВидСЗ = Справочники.Д_ВидыВнутреннихДокументов.ЗаявкаНаСогласованиеДопСоглашения Тогда
				ИсполнительДолженСоздатьНаОсновании = Истина;
				РольИсполнителя = "УчетчикСоздательДопСоглашения";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Новый Структура("ИсполнительДолженСоздатьНаОсновании, РольИсполнителя", ИсполнительДолженСоздатьНаОсновании, РольИсполнителя);
	
КонецФункции // ()

Функция ИмяДокумента(ТекСсылка) Экспорт
	
	Возврат ТекСсылка.Метаданные().Имя;
	
КонецФункции // ()

Функция ТочкиПроцессов(ВидТочки = "согласование") Экспорт
	МассивТочек = Новый Массив;
	
	Если ВидТочки = "согласование" Тогда
		МассивТочек.Добавить(БизнесПроцессы.Согласование1.ТочкиМаршрута.Действие2);
		МассивТочек.Добавить(БизнесПроцессы.Согласование1.ТочкиМаршрута.Действие4);
		МассивТочек.Добавить(БизнесПроцессы.Согласование2.ТочкиМаршрута.Действие2);
		МассивТочек.Добавить(БизнесПроцессы.Согласование2.ТочкиМаршрута.Действие4);
		МассивТочек.Добавить(БизнесПроцессы.Согласование3.ТочкиМаршрута.Действие2);
		МассивТочек.Добавить(БизнесПроцессы.УтверждениеБюджета.ТочкиМаршрута.Действие2);
		МассивТочек.Добавить(БизнесПроцессы.ЗаявкиАдминистратору.ТочкиМаршрута.Действие2);
		МассивТочек.Добавить(БизнесПроцессы.СогласованиеОбщее.ТочкиМаршрута.Действие2);
	ИначеЕсли ВидТочки = "доработка" Тогда
		МассивТочек.Добавить(БизнесПроцессы.Согласование1.ТочкиМаршрута.Действие1);
		МассивТочек.Добавить(БизнесПроцессы.Согласование2.ТочкиМаршрута.Действие1);
		МассивТочек.Добавить(БизнесПроцессы.Согласование3.ТочкиМаршрута.Действие1);
		МассивТочек.Добавить(БизнесПроцессы.УтверждениеБюджета.ТочкиМаршрута.Действие1);
		МассивТочек.Добавить(БизнесПроцессы.ЗаявкиАдминистратору.ТочкиМаршрута.Действие1);
		МассивТочек.Добавить(БизнесПроцессы.СогласованиеОбщее.ТочкиМаршрута.Действие1);
	ИначеЕсли ВидТочки = "исполнение" Тогда
		//МассивТочек.Добавить(БизнесПроцессы.Согласование1.ТочкиМаршрута.Действие5);
		МассивТочек.Добавить(БизнесПроцессы.Согласование3.ТочкиМаршрута.Действие4);
		МассивТочек.Добавить(БизнесПроцессы.СогласованиеОбщее.ТочкиМаршрута.Действие3);
	ИначеЕсли ВидТочки = "ознакомление" Тогда
		МассивТочек.Добавить(БизнесПроцессы.Согласование2.ТочкиМаршрута.Действие5);
		МассивТочек.Добавить(БизнесПроцессы.Согласование3.ТочкиМаршрута.Действие5);
		МассивТочек.Добавить(БизнесПроцессы.Согласование3.ТочкиМаршрута.Действие6);
		МассивТочек.Добавить(БизнесПроцессы.УтверждениеБюджета.ТочкиМаршрута.Действие5);
		МассивТочек.Добавить(БизнесПроцессы.СогласованиеОбщее.ТочкиМаршрута.Действие4);
		МассивТочек.Добавить(БизнесПроцессы.СогласованиеОбщее.ТочкиМаршрута.Действие5);
	ИначеЕсли ВидТочки = "рассмотрение" Тогда
		МассивТочек.Добавить(БизнесПроцессы.ЗаявкиАдминистратору.ТочкиМаршрута.Действие3);
	ИначеЕсли ВидТочки = "выполнение" Тогда
		МассивТочек.Добавить(БизнесПроцессы.ЗаявкиАдминистратору.ТочкиМаршрута.Действие4);
	ИначеЕсли ВидТочки = "проверка" Тогда
		//МассивТочек.Добавить(БизнесПроцессы.Согласование1.ТочкиМаршрута.Действие3);
		МассивТочек.Добавить(БизнесПроцессы.Согласование2.ТочкиМаршрута.Действие3);
		МассивТочек.Добавить(БизнесПроцессы.Согласование3.ТочкиМаршрута.Действие3);
		МассивТочек.Добавить(БизнесПроцессы.ЗаявкиАдминистратору.ТочкиМаршрута.Действие6);
		МассивТочек.Добавить(БизнесПроцессы.ЗаявкиАдминистратору.ТочкиМаршрута.Действие5);
	КонецЕсли;
	
	Возврат МассивТочек;
КонецФункции // ()

Функция ЗаполнитьИсториюНаСервере(Документ) Экспорт
	
	ТекстСообщения = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БП_Оповещение.Автор,
	|	БП_Оповещение.ДатаЗавершения КАК ДатаЗавершения,
	|	БП_Оповещение.Описание,
	|	0 КАК Порядок
	|ИЗ
	|	Документ.БП_Оповещение КАК БП_Оповещение
	|ГДЕ
	|	БП_Оповещение.ДатаЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|	И БП_Оповещение.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БП_Оповещение.Автор,
	|	БП_Оповещение.ДатаЗавершения,
	|	БП_Оповещение.Описание,
	|	1
	|ИЗ
	|	Документ.БП_Оповещение КАК БП_Оповещение
	|ГДЕ
	|	БП_Оповещение.Документ = &Документ
	|	И БП_Оповещение.ДатаЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	ДатаЗавершения";
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("Ссылка", Документ);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Порядок = 0 Тогда
			ТекстСообщения = ТекстСообщения + Выборка.ДатаЗавершения + " " + Выборка.Автор + " написал: " + Выборка.Описание + "
			|";
		Иначе	
			ТекстСообщения = ТекстСообщения + Выборка.ДатаЗавершения + " " + Выборка.Автор + " ответил: " + Выборка.Описание + "
			|";
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекстСообщения;
	
КонецФункции	

Функция ПолучитьУчастниковБизнесПРоцесса(ПредметОбсуждения) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Согласование1ДопСогласование.СубъектСогласования
	|ИЗ
	|	БизнесПроцесс.Согласование1.ДопСогласование КАК Согласование1ДопСогласование
	|ГДЕ
	|	Согласование1ДопСогласование.Ссылка.Заявка В(&Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Согласование2ДопСогласование.СубъектСогласования
	|ИЗ
	|	БизнесПроцесс.Согласование2.ДопСогласование КАК Согласование2ДопСогласование
	|ГДЕ
	|	Согласование2ДопСогласование.Ссылка.Заявка В(&Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Согласование3ДопСогласование.СубъектСогласования
	|ИЗ
	|	БизнесПроцесс.Согласование3.ДопСогласование КАК Согласование3ДопСогласование
	|ГДЕ
	|	Согласование3ДопСогласование.Ссылка.Заявка В(&Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УтверждениеБюджетаДопСогласование.СубъектСогласования
	|ИЗ
	|	БизнесПроцесс.УтверждениеБюджета.ДопСогласование КАК УтверждениеБюджетаДопСогласование
	|ГДЕ
	|	УтверждениеБюджетаДопСогласование.Ссылка.Заявка В(&Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаявкиАдминистраторуДопСогласование.СубъектСогласования
	|ИЗ
	|	БизнесПроцесс.ЗаявкиАдминистратору.ДопСогласование КАК ЗаявкиАдминистраторуДопСогласование
	|ГДЕ
	|	ЗаявкиАдминистраторуДопСогласование.Ссылка.Заявка В(&Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СогласованиеОбщееДопСогласование.СубъектСогласования
	|ИЗ
	|	БизнесПроцесс.СогласованиеОбщее.ДопСогласование КАК СогласованиеОбщееДопСогласование
	|ГДЕ
	|	СогласованиеОбщееДопСогласование.Ссылка.Заявка В(&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", ПредметОбсуждения);
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("СубъектСогласования");
	
КонецФункции // ()

Процедура ДобавитьКомментарии(ТекстФормат, Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КомментарииКДокументам.Документ КАК Документ,
	               |	КомментарииКДокументам.Дата КАК Дата,
	               |	КомментарииКДокументам.ТекстФорматированный КАК ТекстФорматированный,
	               |	КомментарииКДокументам.Автор КАК Автор
	               |ИЗ
	               |	РегистрСведений.КомментарииКДокументам КАК КомментарииКДокументам
	               |ГДЕ
	               |	КомментарииКДокументам.Документ = &Документ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата";
	
	Запрос.УстановитьПараметр("Документ", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество() Тогда
		БПСервер.НовыйПараграфТекстФД(ТекстФормат, Символы.ПС);
		БПСервер.НовыйПараграфТекстФД(ТекстФормат, "Комментарии: ", Истина);
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		БПСервер.НовыйПараграфТекстФД(ТекстФормат, "Дата: " + Строка(Выборка.Дата) + ", Автор: " + Строка(Выборка.Автор));
		БПСервер.ДобавитьЭлементыФР(ТекстФормат, Выборка.ТекстФорматированный.Получить());
		//БПСервер.НовыйПараграфТекстФД(ТекстФормат, Символы.ПС);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКомментарийСервер(Комментарий, Ссылка) Экспорт
	Если ТипЗнч(Комментарий) = Тип("Строка") Тогда
		Если Не ЗначениеЗаполнено(Комментарий) Тогда
			Возврат;	
		КонецЕсли;
		ТекКомментарий = Новый ФорматированныйДокумент;
		БПСервер.НовыйПараграфТекстФД(ТекКомментарий, Комментарий);
	ИначеЕсли ТипЗнч(Комментарий) = Тип("ФорматированныйДокумент") Тогда	
		ТекКомментарий = Комментарий;
	Иначе
		Возврат;
	КонецЕсли;
	НоваяЗапись = РегистрыСведений.КомментарииКДокументам.СоздатьМенеджерЗаписи();
	НоваяЗапись.Автор = ПараметрыСеанса.ТекущийПользователь;
	НоваяЗапись.Дата = ТекущаяДата();
	НоваяЗапись.Документ = Ссылка;
	НоваяЗапись.ТекстФорматированный = Новый ХранилищеЗначения(ТекКомментарий, Новый СжатиеДанных(9));
	НоваяЗапись.Записать();
КонецПроцедуры

#КонецОбласти 

#Область ПодпискиНаСобытия

Процедура ДокументыСогласуемыеПередЗаписьюПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	//удаляем подчиненные документы (бизнес-процессы, задачи, оповещения)
	Если ЗначениеЗаполнено(Источник.Ссылка) И НЕ Источник.Ссылка.ПометкаУдаления = Источник.ПометкаУдаления Тогда //при удалении бизнес-процесса удаляем задачи
		НачатьТранзакцию();
		УдалитьБПИЗадачиУниверсальная(Источник.Ссылка, Источник.ПометкаУдаления);
		//оповещаем о пометке на удаление документа
		ОповеститьОбИзмененииСтатусаДокумента(Источник);
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	//присваиваем автора
	//Эл = Метаданные.ОбщиеРеквизиты.Автор.Состав.Найти(Источник.Метаданные());
	Если НЕ Источник.Метаданные().Реквизиты.Найти("Автор") = Неопределено И НЕ ЗначениеЗаполнено(Источник.Автор) Тогда
		Источник.Автор = ПараметрыСеанса.ТекущийПользователь;	
	КонецЕсли;
	
	//универсальность ВидаСЗ
	Если НЕ Источник.Метаданные().Реквизиты.Найти("ВидСЗ") = Неопределено И НЕ ЗначениеЗаполнено(Источник.ВидСЗ) Тогда
		Источник.ВидСЗ = Справочники.Д_ВидыВнутреннихДокументов.НайтиПоРеквизиту("ИмяДокумента", Источник.Ссылка.Метаданные().Имя, Справочники.Д_ВидыВнутреннихДокументов.ПустаяСсылка());
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ДокументыСогласуемыеПриЗаписиОбработчик(Источник, Отказ) Экспорт
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.Д_ЗаявкаНаФинансирование") Тогда
		МассивЗаписей = Новый Массив;
		МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Значение2, Признак", Источник.Ссылка, "Предприятия", Источник.Предприятие, Источник.Подразделение, "Предприятие"));
		ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
		МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Значение2, Признак", Источник.Ссылка, "Предприятия", Источник.ЦФО, Неопределено, "Предприятие"));
		ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьТекущуюЗадачуПриЗаписи(Источник, Отказ) Экспорт
	
	//Доп. проверка на возможность ведения учета в этой базе
	//Если Не ОбщегоНазначенияПовтИсп.ЭтоБазаСпирт() И Не Отказ И ТипЗнч(Источник) = Тип("ЗадачаОбъект.Задача") Тогда
	//	Отказ = ОбщегоНазначенияКлиентСервер.ПроверитьДокументНаВозможностьЗаписиПоОрганизации(Источник);
	//	
	//	Если Отказ Тогда
	//		Сообщить("С 03.10.2014 данный тип документов ведется в новой базе");
	//		Возврат;
	//	КонецЕсли;	
	//КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ЗадачаОбъект.Задача") И ТипЗнч(Источник.Заявка) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(Источник.БизнесПроцесс) Тогда
		ТекДокумент = Источник.БизнесПроцесс.Заявка;	
	ИначеЕсли ТипЗнч(Источник) = Тип("ЗадачаОбъект.Задача") Тогда	
		ТекДокумент = Источник.Заявка;
	Иначе
		ТекДокумент = Источник.Ссылка;
	КонецЕсли;
	
	//найти бизнес процессы
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Согласование2.Ссылка,
	               |	Согласование2.Завершен
	               |ИЗ
	               |	БизнесПроцесс.Согласование2 КАК Согласование2
	               |ГДЕ
	               |	Согласование2.Заявка = &Заявка
	               |	И Согласование2.ПометкаУдаления = ЛОЖЬ
	               |	И Согласование2.Стартован = ИСТИНА
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Согласование3.Ссылка,
	               |	Согласование3.Завершен
	               |ИЗ
	               |	БизнесПроцесс.Согласование3 КАК Согласование3
	               |ГДЕ
	               |	Согласование3.Заявка = &Заявка
	               |	И Согласование3.ПометкаУдаления = ЛОЖЬ
	               |	И Согласование3.Стартован = ИСТИНА
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Согласование1.Ссылка,
	               |	Согласование1.Завершен
	               |ИЗ
	               |	БизнесПроцесс.Согласование1 КАК Согласование1
	               |ГДЕ
	               |	Согласование1.Заявка = &Заявка
	               |	И Согласование1.ПометкаУдаления = ЛОЖЬ
	               |	И Согласование1.Стартован = ИСТИНА
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗаявкиАдминистратору.Ссылка,
	               |	ЗаявкиАдминистратору.Завершен
	               |ИЗ
	               |	БизнесПроцесс.ЗаявкиАдминистратору КАК ЗаявкиАдминистратору
	               |ГДЕ
	               |	ЗаявкиАдминистратору.Заявка = &Заявка
	               |	И ЗаявкиАдминистратору.ПометкаУдаления = ЛОЖЬ
	               |	И ЗаявкиАдминистратору.Стартован = ИСТИНА
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	СогласованиеОбщее.Ссылка,
	               |	СогласованиеОбщее.Завершен
	               |ИЗ
	               |	БизнесПроцесс.СогласованиеОбщее КАК СогласованиеОбщее
	               |ГДЕ
	               |	СогласованиеОбщее.Заявка = &Заявка
	               |	И СогласованиеОбщее.ПометкаУдаления = ЛОЖЬ
	               |	И СогласованиеОбщее.Стартован = ИСТИНА";
	
	Запрос.УстановитьПараметр("Заявка", ТекДокумент);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ТекущийБизнесПроцесс = Неопределено;
	БПЗавершен = Ложь;
	Если Выборка.Количество() Тогда
		Выборка.Следующий();
		ТекущийБизнесПроцесс = Выборка.Ссылка;
		БПЗавершен = Выборка.Завершен;
	ИначеЕсли ЗначениеЗаполнено(ТекДокумент) Тогда //если БП еше не создан
		НаборЗаписей = РегистрыСведений.Д_ТекущаяЗадача.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(ТекДокумент);
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Документ = ТекДокумент;
		НоваяЗапись.ТекущаяЗадача = "На подготовке";
		НоваяЗапись.ТочкаМаршрута = "На подготовке";
		НаборЗаписей.Записать(Истина);
		Если Не (ТипЗнч(ТекДокумент) = Тип("СправочникСсылка.Контрагенты") Или ТипЗнч(ТекДокумент) = Тип("СправочникСсылка.Организации")) Тогда
			ДобавитьДоступность(Новый Структура("Документ, ИмяРеквизита, Значение, Признак", ТекДокумент, "Пользователи", ТекДокумент.Автор, "Авторство"));
		КонецЕсли;
	КонецЕсли;
	
	//найти текущие задачи по документу
	Если ЗначениеЗаполнено(ТекущийБизнесПроцесс) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Задача.Ссылка КАК ТекущаяЗадача,
		               |	Задача.Исполнитель КАК Исполнители,
		               |	Задача.БизнесПроцесс,
		               |	Задача.Заявка КАК Документ,
		               |	Задача.ТочкаМаршрута,
		               |	Задача.Описание,
		               |	Задача.Наименование,
		               |	Задача.БизнесПроцесс.Завершен,
		               |	Задача.ВРаботе
		               |ИЗ
		               |	Задача.Задача КАК Задача
		               |ГДЕ
		               |	Задача.Заявка = &ТекДокумент
		               |	И Задача.Выполнена = ЛОЖЬ
		               |	И Задача.ПометкаУдаления = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("ТекДокумент", ТекДокумент);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		НаборЗаписей = РегистрыСведений.Д_ТекущаяЗадача.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(ТекДокумент);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		
		
		
		Если Выборка.Количество() > 1 Тогда
			Исполнители = "";
			Пока Выборка.Следующий() Цикл
				Исполнители = Исполнители + Строка(Выборка.Исполнители) + ", ";
				ЗаполнитьЗначенияСвойств(НоваяЗапись,Выборка);
				НоваяЗапись.Исполнители = Исполнители;
			КонецЦикла; 
		ИначеЕсли Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(НоваяЗапись,Выборка);
		Иначе
			
			НоваяЗапись.Документ = ТекДокумент;
			
			Если ТипЗнч(ТекДокумент) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") Тогда
				Если ТипЗнч(Источник) = Тип("ЗадачаОбъект.Задача") И ТипЗнч(Источник.Заявка) = Тип("СправочникСсылка.Контрагенты") Тогда
					НоваяЗапись.Исполнители = Источник.Исполнитель;
					НоваяЗапись.ТекущаяЗадача = "Согласование контрагента";
					НоваяЗапись.ТочкаМаршрута = "Согласование контрагента";
				Иначе
					Если ТекущийБизнесПроцесс.НеСогласовано ИЛИ ТекДокумент.ПометкаУдаления Тогда
						НоваяЗапись.ТекущаяЗадача = "Не согласовано!";
						НоваяЗапись.ТочкаМаршрута = "Не согласовано!";
					Иначе
						НоваяЗапись.ТекущаяЗадача = "Согласовано и оплачено";
						НоваяЗапись.ТочкаМаршрута = "Согласовано и оплачено";
					КонецЕсли;
				КонецЕсли;
			Иначе
				НеСогласовано = ТекущийБизнесПроцесс.НеСогласовано;
				
				Если НеСогласовано ИЛИ ТекДокумент.ПометкаУдаления Тогда
					НоваяЗапись.ТекущаяЗадача = "Отклонено";
					НоваяЗапись.ТочкаМаршрута = "Отклонено";
				Иначе
					Если ТипЗнч(ТекДокумент) = Тип("ДокументСсылка.Д_ОбращенияВТехПоддержку") Тогда
						НоваяЗапись.ТекущаяЗадача = "Выполнено";
						НоваяЗапись.ТочкаМаршрута = "Выполнено";
					ИначеЕсли ТипЗнч(ТекДокумент) = Тип("ДокументСсылка.Д_СлужебнаяЗаписка") Тогда
						НоваяЗапись.ТекущаяЗадача = "Утверждено";
						НоваяЗапись.ТочкаМаршрута = "Утверждено";
					Иначе
						НоваяЗапись.ТекущаяЗадача = "Согласовано и исполнено";
						НоваяЗапись.ТочкаМаршрута = "Согласовано и исполнено";
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			НоваяЗапись.БизнесПроцессЗавершен = БПЗавершен;
			
		КонецЕсли;
		НаборЗаписей.Записать(Истина);
		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура БППриЗаписиПриЗаписи(Источник, Отказ) Экспорт
	
	МассивЗаписей = Новый Массив;
	
	Заявка = Неопределено;
	
	Если ТипЗнч(Источник) = Тип("БизнесПроцессОбъект.Согласование1") Тогда
		
		Заявка = БюджетныйНаСервере.ВернутьРеквизиты(Источник.Ссылка, "Заявка").Заявка;
		
		РеквизитыЗаявки = БюджетныйНаСервере.ВернутьРеквизиты(Заявка, "Подразделение, Предприятие, Инициатор");
		
		ОчиститьНаборРегистра(Новый Структура("Документ", Заявка));
		
		МассивДобавляемыхПользователей = Новый Массив;
		
		//добавляем автора
		МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Признак", Заявка, "Пользователи", Источник.Автор, "Авторство"));
		ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
		МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Признак", Заявка, "Пользователи", Источник.Заявка.Инициатор, "Авторство"));
		ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);	
		МассивДобавляемыхПользователей.Добавить(Источник.Автор);
		МассивДобавляемыхПользователей.Добавить(Источник.Заявка.Инициатор);
		
		//добавляем инициатора
		МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Признак", Заявка, "Пользователи", РеквизитыЗаявки.Инициатор, "Авторство"));
		ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
		МассивДобавляемыхПользователей.Добавить(РеквизитыЗаявки.Инициатор);
		
		//добавляем сотрудника ОФК
		Если ЗначениеЗаполнено(Источник.ПользовательОФК) Тогда
			МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Признак", Заявка, "Пользователи", Источник.ПользовательОФК, "Согласование"));
			ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
			МассивДобавляемыхПользователей.Добавить(Источник.ПользовательОФК);
		КонецЕсли;
		
		Если Источник.КонтрольСогласованияОФК Тогда
			ОФК = Справочники.ГруппыПользователей.НайтиПоНаименованию("ОФК", Истина);
			
			Если ЗначениеЗаполнено(ОФК) Тогда
				МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Признак", Заявка, "ГруппыПользователей", ОФК, "Согласование"));
				ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
				
				Для Каждого ТекСтрГруппы Из ОФК.Состав Цикл
					Если ЗначениеЗаполнено(ТекСтрГруппы.Пользователь) Тогда
						МассивДобавляемыхПользователей.Добавить(ТекСтрГруппы.Пользователь);
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
				
		//добавляем согласователей
		Для каждого ТекСтрока Из Источник.ДопСогласование Цикл
			//Если ТекСтрока.Пройден Тогда
				МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Признак", Заявка, "Пользователи", ТекСтрока.Пользователь, "Согласование"));
				ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
				МассивДобавляемыхПользователей.Добавить(ТекСтрока.Пользователь);
				
				Если НЕ ТекСтрока.Пользователь = ТекСтрока.СубъектСогласования Тогда
					МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Признак", Заявка, "Пользователи", ТекСтрока.СубъектСогласования, "Согласование"));
					ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
					МассивДобавляемыхПользователей.Добавить(ТекСтрока.СубъектСогласования);
				КонецЕсли;
			//КонецЕсли;
		КонецЦикла;
		//добавляем ознакамливающихся
		Для каждого ТекСтрока Из Источник.ДопОповещение Цикл
			МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Признак", Заявка, "Пользователи", ТекСтрока.Пользователь, "Ознакомление"));
			ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
			МассивДобавляемыхПользователей.Добавить(ТекСтрока.Пользователь);
		КонецЦикла;
		//добавляем исполнителей
		Для каждого ТекСтрока Из Источник.ДопИсполнение Цикл
			//Если ТекСтрока.Пройдено Тогда
				МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Признак", Заявка, "Пользователи", ТекСтрока.Исполнитель, "Исполнение"));
				ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
				МассивДобавляемыхПользователей.Добавить(ТекСтрока.Исполнитель);
			//КонецЕсли;
		КонецЦикла;
		
		ТекИсполнительОплаты = Документы.Д_ЗаявкаНаОплату.ПолучитьИсполнителяОплаты(Заявка);
		МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Признак", Заявка, "Пользователи", ТекИсполнительОплаты, "Исполнение"));
		ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
		МассивДобавляемыхПользователей.Добавить(ТекИсполнительОплаты);
		//добавляем предприятия/подразделение из шапки
		//ДобавитьДоступность(Новый Структура("Документ, ИмяРеквизита, Значение, Значение2, Признак", Заявка, "Подразделения", РеквизитыЗаявки.Подразделение, "Подразделение"));
		МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Значение2, Признак", Заявка, "Предприятия", РеквизитыЗаявки.Предприятие, РеквизитыЗаявки.Подразделение, "Предприятие"));
		ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
		//добавляем предприятия/подразделение из ТЧ и статьи осн сырья
		Для каждого ТекСтрока Из Заявка.ЗаявкаБезНал Цикл
			Стру = Новый Структура("Документ, ИмяРеквизита, Значение, Значение2, Признак", Заявка, "Предприятия", ТекСтрока.ЦФО, ТекСтрока.Подразделение, "ЦФО");
			
			Если СтатьяСырья(ТекСтрока.СтатьяДДС) Тогда
				Стру = Новый Структура("Документ, ИмяРеквизита, Значение, Значение2, Значение3, Признак", Заявка, "Предприятия", ТекСтрока.ЦФО, ТекСтрока.Подразделение, ТекСтрока.СтатьяДДС, "ЦФО");
			КонецЕсли;
			
			МассивЗаписей.Добавить(Стру);
			ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
			
			// добавление участников маршрута реестра в ознакомление с заявками на оплату в него входящими			
			Если Не ЗначениеЗаполнено(ТекСтрока.ЗаявкаНаФинансирование) Тогда
				Продолжить;
			КонецЕсли;
			
			ТекБПЗФ = НайтиТекущийБПСервер(ТекСтрока.ЗаявкаНаФинансирование);
			
			Если ТекБПЗФ = Неопределено Тогда
				Продолжить;
			КонецЕсли;			
			
			ТекБПЗФОбъект = ТекБПЗФ.ПолучитьОбъект();
			ТЧОзнакомление = ТекБПЗФОбъект.ДоступнаПользователям;
			
			Для Каждого ДобавляемыйПользователь Из МассивДобавляемыхПользователей Цикл
				
				Если Не ЗначениеЗаполнено(ДобавляемыйПользователь) Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТЧОзнакомление.Найти(ДобавляемыйПользователь, "Пользователь") = Неопределено Тогда
					НоваяСтрока = ТЧОзнакомление.Добавить();
					НоваяСтрока.Пользователь = ДобавляемыйПользователь;	
				КонецЕсли;
				
				МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Признак", ТекСтрока.ЗаявкаНаФинансирование, "Пользователи", ДобавляемыйПользователь, "Ознакомление"));
				ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
			КонецЦикла;
			
			ТекБПЗФОбъект.Записать();
			
		КонецЦикла;
					
	ИначеЕсли ТипЗнч(Источник) = Тип("БизнесПроцессОбъект.Согласование2") Тогда
		
		Заявка = БюджетныйНаСервере.ВернутьРеквизиты(Источник.Ссылка, "Заявка").Заявка;
		
		РеквизитыЗаявки = БюджетныйНаСервере.ВернутьРеквизиты(Заявка, "Подразделение, Предприятие");
		
		ОчиститьНаборРегистра(Новый Структура("Документ", Заявка));
		
		//добавляем автора
		МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Признак", Заявка, "Пользователи", Источник.Автор, "Авторство"));
		ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
		//добавляем согласователей
		Для каждого ТекСтрока Из Источник.ДопСогласование Цикл
			//Если ТекСтрока.Пройден Тогда
				МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Признак", Заявка, "Пользователи", ТекСтрока.Пользователь, "Согласование"));
				ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
				Если НЕ ТекСтрока.Пользователь = ТекСтрока.СубъектСогласования Тогда
					МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Признак", Заявка, "Пользователи", ТекСтрока.СубъектСогласования, "Согласование"));
					ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
				КонецЕсли;
			//КонецЕсли;
		КонецЦикла;
		
		//добавляем ОФК
		Если Источник.КонтрольСогласованияОФК Тогда
			ОФК = Справочники.ГруппыПользователей.НайтиПоНаименованию("ОФК", Истина);
			Если ЗначениеЗаполнено(ОФК) Тогда
				МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Признак", Заявка, "ГруппыПользователей", ОФК, "Согласование"));
				ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
			КонецЕсли;
		КонецЕсли;
		
		//добавляем ознакомителей
		Для каждого ТекСтрока Из Источник.Адресаты Цикл
			//Если ТекСтрока.Согласовано Тогда
				МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Признак", Заявка, "Пользователи", ТекСтрока.Пользователь, "Ознакомление"));
				ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
			//КонецЕсли;
		КонецЦикла;
		
		
		//добавляем предприятия/подразделение из шапки
		МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Значение2, Признак", Заявка, "Предприятия", РеквизитыЗаявки.Предприятие, РеквизитыЗаявки.Подразделение, "Предприятие"));
		ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
		//добавляем предприятия/подразделение из ТЧ и статьи осн сырья
		Для каждого ТекСтрока Из Заявка.СЗ Цикл
			Стру = Новый Структура("Документ, ИмяРеквизита, Значение, Значение2, Признак", Заявка, "Предприятия", ТекСтрока.ЦФО, ТекСтрока.ВидДеятельности, "ЦФО");
			МассивЗаписей.Добавить(Стру);
			ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
			
		КонецЦикла;
	ИначеЕсли ТипЗнч(Источник) = Тип("БизнесПроцессОбъект.Согласование3") Тогда
		
		Заявка = БюджетныйНаСервере.ВернутьРеквизиты(Источник.Ссылка, "Заявка").Заявка;
		
		РеквизитыЗаявки = БюджетныйНаСервере.ВернутьРеквизиты(Заявка, "Подразделение, Предприятие, ДоступнаПользователям");
		
		ОчиститьНаборРегистра(Новый Структура("Документ", Заявка));
		
		//добавляем автора
		МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Признак", Заявка, "Пользователи", Источник.Автор, "Авторство"));
		ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
		//добавляем согласователей
		Для каждого ТекСтрока Из Источник.ДопСогласование Цикл
			//Если ТекСтрока.Пройден Тогда
				МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Признак", Заявка, "Пользователи", ТекСтрока.Пользователь, "Согласование"));
				ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
				Если НЕ ТекСтрока.Пользователь = ТекСтрока.СубъектСогласования Тогда
					МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Признак", Заявка, "Пользователи", ТекСтрока.СубъектСогласования, "Согласование"));
					ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
				КонецЕсли;
			//КонецЕсли;
		КонецЦикла;
		
		//добавляем ОФК
		Если Источник.КонтрольСогласованияОФК Тогда
			ОФК = Справочники.ГруппыПользователей.НайтиПоНаименованию("ОФК", Истина);
			Если ЗначениеЗаполнено(ОФК) Тогда
				МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Признак", Заявка, "ГруппыПользователей", ОФК, "Согласование"));
				ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
			КонецЕсли;
		КонецЕсли;
		
		//добавляем исполнителей
		Для каждого ТекСтрока Из Источник.ДопИсполнение Цикл
			//Если ТекСтрока.Пройдено Тогда
			МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Признак", Заявка, "Пользователи", ТекСтрока.Пользователь, "Исполнение"));
				ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
			//КонецЕсли;
		КонецЦикла;
		//добавляем ознакомителей
		Для каждого ТекСтрока Из Источник.Адресаты Цикл
			//Если ТекСтрока.Согласовано Тогда
				МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Признак", Заявка, "Пользователи", ТекСтрока.СубъектСогласования, "Ознакомление"));
				ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
			//КонецЕсли;
		КонецЦикла;
		
		//добавляем предприятия/подразделение из шапки
		Если РеквизитыЗаявки.ДоступнаПользователям Тогда
			МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Значение2, Признак", Заявка, "Предприятия", РеквизитыЗаявки.Предприятие, РеквизитыЗаявки.Подразделение, "Предприятие"));
			ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Источник) = Тип("БизнесПроцессОбъект.СогласованиеОбщее") Тогда
		
		Заявка = БюджетныйНаСервере.ВернутьРеквизиты(Источник.Ссылка, "Заявка").Заявка;
		
		ОчиститьНаборРегистра(Новый Структура("Документ", Заявка));
		
		//добавляем автора
		МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Признак", Заявка, "Пользователи", Источник.Автор, "Авторство"));
		ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
		
		//добавляем согласователей
		Для каждого ТекСтрока Из Источник.ДопСогласование Цикл
			МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Признак", Заявка, "Пользователи", ТекСтрока.Пользователь, "Согласование"));
			ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
			Если НЕ ТекСтрока.Пользователь = ТекСтрока.СубъектСогласования Тогда
				МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Признак", Заявка, "Пользователи", ТекСтрока.СубъектСогласования, "Согласование"));
				//Если ТекСтрока.Пройден Тогда
					ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
				//КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		//добавляем ОФК
		Если Источник.КонтрольСогласованияОФК Тогда
			ОФК = Справочники.ГруппыПользователей.НайтиПоНаименованию("ОФК", Истина);
			Если ЗначениеЗаполнено(ОФК) Тогда
				МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Признак", Заявка, "ГруппыПользователей", ОФК, "Согласование"));
				ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
			КонецЕсли;
		КонецЕсли;
		
		//добавляем исполнителей
		Для каждого ТекСтрока Из Источник.ДопИсполнение Цикл
			//Если ТекСтрока.Пройдено Тогда
				МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Признак", Заявка, "Пользователи", ТекСтрока.Пользователь, "Исполнение"));
				ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
			//КонецЕсли;
		КонецЦикла;
		//добавляем ознакомителей
		Для каждого ТекСтрока Из Источник.ДопОповещение Цикл
			//Если ТекСтрока.Оповещен Тогда
				МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Признак", Заявка, "Пользователи", ТекСтрока.Пользователь, "Ознакомление"));
				ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
			//КонецЕсли;
		КонецЦикла;
		
		//добавляем доступность
		Для каждого ТекСтрока Из Источник.ДоступнаПользователям Цикл
			МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Признак", Заявка, "Пользователи", ТекСтрока.Пользователь, "Ознакомление"));
			ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);			
		КонецЦикла;
				
		Если ТипЗнч(Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаОтгрузку") Тогда
			
			РеквизитыЗаявки = БюджетныйНаСервере.ВернутьРеквизиты(Заявка, "Док, ПодразделениеДок, Предприятие, Подразделение, Предприятие2, Подразделение2, ТипРеализации");
			
			//добавляем предприятия/подразделение из шапки
			МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Значение2, Значение3, Признак", Заявка, "Предприятия", РеквизитыЗаявки.Док, РеквизитыЗаявки.ПодразделениеДок, РеквизитыЗаявки.ТипРеализации, "Предприятие"));
			ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
			Если ЗначениеЗаполнено(РеквизитыЗаявки.Предприятие) Тогда
				МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Значение2, Значение3, Признак", Заявка, "Предприятия", РеквизитыЗаявки.Предприятие, РеквизитыЗаявки.Подразделение, РеквизитыЗаявки.ТипРеализации, "Предприятие"));
				ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
			КонецЕсли;
			Если ЗначениеЗаполнено(РеквизитыЗаявки.Предприятие2) Тогда
				МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Значение2, Значение3, Признак", Заявка, "Предприятия", РеквизитыЗаявки.Предприятие2, РеквизитыЗаявки.Подразделение2, РеквизитыЗаявки.ТипРеализации, "Предприятие"));
				ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
			КонецЕсли;
		ИначеЕсли ТипЗнч(Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаАвансовыйОтчет") Тогда
			//добавляем предприятия/подразделение из шапки
			МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Признак", Заявка, "Предприятия", Заявка.Предприятие, "Предприятие"));
			ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
			//добавляем предприятия/подразделение из ТЧ 
			Для Каждого ТекСтрока Из Заявка.Затраты Цикл
				Стру = Новый Структура("Документ, ИмяРеквизита, Значение, Значение2, Признак", Заявка, "Предприятия", ТекСтрока.Предприятие, ТекСтрока.Подразделение, "ЦФО");
				Если СтатьяСырья(ТекСтрока.Статья) Тогда
					Стру = Новый Структура("Документ, ИмяРеквизита, Значение, Значение2, Значение3, Признак", Заявка, "Предприятия", ТекСтрока.Предприятие, ТекСтрока.Подразделение, ТекСтрока.Статья, "ЦФО");
				КонецЕсли;
				МассивЗаписей.Добавить(Стру);
				ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
			КонецЦикла;
		Иначе //остальные документы
			Если НЕ Заявка.Метаданные().Реквизиты.Найти("Предприятие") = Неопределено Тогда
				Если НЕ Заявка.Метаданные().Реквизиты.Найти("Подразделение") = Неопределено Тогда
					Если НЕ Заявка.Метаданные().Реквизиты.Найти("ДоступнаПользователям") = Неопределено Тогда
						РеквизитыЗаявки = БюджетныйНаСервере.ВернутьРеквизиты(Заявка, "Предприятие, Подразделение, ДоступнаПользователям");
					Иначе
						РеквизитыЗаявки = БюджетныйНаСервере.ВернутьРеквизиты(Заявка, "Предприятие, Подразделение");
						РеквизитыЗаявки.Вставить("ДоступнаПользователям", Истина);
					КонецЕсли;
				Иначе
					РеквизитыЗаявки = БюджетныйНаСервере.ВернутьРеквизиты(Заявка, "Предприятие");
					РеквизитыЗаявки.Вставить("ДоступнаПользователям", Истина);
					РеквизитыЗаявки.Вставить("Подразделение", "");
				КонецЕсли;
				Если РеквизитыЗаявки.ДоступнаПользователям Тогда
					МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Значение2, Признак", Заявка, "Предприятия", РеквизитыЗаявки.Предприятие, РеквизитыЗаявки.Подразделение, "Предприятие"));
					ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
		
	ИначеЕсли ТипЗнч(Источник) = Тип("БизнесПроцессОбъект.ЗаявкиАдминистратору") Тогда
		
		Заявка = БюджетныйНаСервере.ВернутьРеквизиты(Источник.Ссылка, "Заявка").Заявка;
		
		ОчиститьНаборРегистра(Новый Структура("Документ", Заявка));
		
		//добавляем автора
		МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Признак", Заявка, "Пользователи", Источник.Автор, "Авторство"));
		ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
		
		//добавляем согласователей
		Для каждого ТекСтрока Из Источник.ДопСогласование Цикл
			//Если ТекСтрока.Пройден Тогда
				МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Признак", Заявка, "Пользователи", ТекСтрока.Пользователь, "Согласование"));
				ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
				Если НЕ ТекСтрока.Пользователь = ТекСтрока.СубъектСогласования Тогда
					МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Признак", Заявка, "Пользователи", ТекСтрока.СубъектСогласования, "Согласование"));
					ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
				КонецЕсли;
			//КонецЕсли;
		КонецЦикла;
		//добавляем ознакомителей
		Для каждого ТекСтрока Из Источник.ДопОповещение Цикл
			//Если ТекСтрока.Оповещен Тогда
				МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Признак", Заявка, "Пользователи", ТекСтрока.Пользователь, "Ознакомление"));
				ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
			//КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("БизнесПроцессОбъект.УтверждениеБюджета") Тогда
		
		Заявка = Источник.Ссылка;
		
		//РеквизитыЗаявки = БюджетныйНаСервере.ВернутьРеквизиты(Заявка, "Подразделение, Предприятие, ДоступнаПользователям");
		
		ОчиститьНаборРегистра(Новый Структура("Документ", Заявка));
		
		//добавляем автора
		МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Признак", Заявка, "Пользователи", Источник.Автор, "Авторство"));
		ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
		//добавляем согласователей
		Для каждого ТекСтрока Из Источник.ДопСогласование Цикл
			//Если ТекСтрока.Пройден Тогда
				МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Признак", Заявка, "Пользователи", ТекСтрока.Пользователь, "Согласование"));
				ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
				Если НЕ ТекСтрока.Пользователь = ТекСтрока.СубъектСогласования Тогда
					МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Признак", Заявка, "Пользователи", ТекСтрока.СубъектСогласования, "Согласование"));
					ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
				КонецЕсли;
			//КонецЕсли;
		КонецЦикла;
				
		////добавляем предприятия/подразделение из шапки
		//Если РеквизитыЗаявки.ДоступнаПользователям Тогда
		//	МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Значение2, Признак", Заявка, "Предприятия", РеквизитыЗаявки.Предприятие, РеквизитыЗаявки.Подразделение, "Предприятие"));
		//	ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
		//КонецЕсли;

		
	КонецЕсли;
	
	//дополняем записи текущими отпускниками
	МассивЗамещающихСтрок = Новый Массив;
	Для каждого ТекЗапись Из МассивЗаписей Цикл
		Если ТекЗапись.Свойство("Значение") И ТипЗнч(ТекЗапись.Значение) = Тип("СправочникСсылка.Пользователи") Тогда
			Замещающие = ПолучитьЗамещающихОтпускника(ТекЗапись.Значение);
			Для каждого ТекЗамещающий Из Замещающие Цикл
				НовСтру = Новый Структура;
				Для каждого ТекКлюч Из ТекЗапись Цикл
					НовСтру.Вставить(ТекКлюч.Ключ, ТекКлюч.Значение);
					Если ТекКлюч.Ключ = "Значение" Тогда
						НовСтру.Значение = ТекЗамещающий;					
					КонецЕсли;
				КонецЦикла; 
				МассивЗамещающихСтрок.Добавить(НовСтру);
				ДобавитьДоступность(МассивЗамещающихСтрок[МассивЗамещающихСтрок.Количество()-1]);
			КонецЦикла; 
		КонецЕсли;	
	КонецЦикла;
	
	Для каждого ТекЗаписьЗамещающего Из МассивЗамещающихСтрок Цикл
		МассивЗаписей.Добавить(ТекЗаписьЗамещающего);
	КонецЦикла;
	
	//дополняем исполнителями
	Если НЕ Заявка = Неопределено Тогда
		
		ВсеИсполнители = ПолучитьПройденныхИсполнителейПроцесса(Источник.Ссылка);
		Для каждого ТекИсполнитель Из ВсеИсполнители Цикл
			УжеДоступно = Ложь;
			Для каждого ТекДоступность Из МассивЗаписей Цикл
				Если ТекЗапись.Свойство("Значение") И ТекЗапись.Значение = ТекИсполнитель Тогда
					УжеДоступно = Истина;			
				КонецЕсли;	
			КонецЦикла;
			
			Если НЕ УжеДоступно И ЗначениеЗаполнено(ТекИсполнитель) Тогда
				МассивЗаписей.Добавить(Новый Структура("Документ, ИмяРеквизита, Значение, Признак", Заявка, "Пользователи", ТекИсполнитель, "Исполнение"));		
				ДобавитьДоступность(МассивЗаписей[МассивЗаписей.Количество()-1]);
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	//доступность файлов
	УстановитьДоступностьФайлов(МассивЗаписей, Источник);
	
КонецПроцедуры

Функция ПолучитьПройденныхИсполнителейПроцесса(БизнесПроцесс) Экспорт
	Если Не ЗначениеЗаполнено(БизнесПроцесс) Тогда
		Возврат Новый Массив;	
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Задача.Пользователь КАК Пользователь,
	               |	Задача.Исполнитель КАК Исполнитель
	               |ИЗ
	               |	Задача.Задача КАК Задача
	               |ГДЕ
	               |	Задача.БизнесПроцесс = &БизнесПроцесс
	               |	И Задача.ПометкаУдаления = ЛОЖЬ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Задача.Пользователь,
	               |	Задача.Исполнитель";
	
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();
	НовМас = Новый Массив;
	Для каждого ТекЗнч Из Выборка Цикл
		Если НовМас.Найти(ТекЗнч.Исполнитель) = Неопределено Тогда
			НовМас.Добавить(ТекЗнч.Исполнитель);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекЗнч.Пользователь) И НЕ ТекЗнч.Пользователь = ТекЗнч.Исполнитель Тогда
			Если НовМас.Найти(ТекЗнч.Пользователь) = Неопределено Тогда
				НовМас.Добавить(ТекЗнч.Пользователь);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат НовМас;
	
КонецФункции // ()

Процедура БППередЗаписьюПередЗаписью1(Источник, Отказ) Экспорт
	//проверка на еще один бп
	//Метаданные().Имя
	Если Источник.Ссылка.Пустая() Тогда
		Источник.ДатаНачала = ТекущаяДата();	
	КонецЕсли;
	Если Источник.Завершен И Источник.ДатаЗавершения = Дата('00010101') Тогда
		Источник.ДатаЗавершения = ТекущаяДата();	
	КонецЕсли;
	
	//добавляю ВРЕМЕННО!!!!!!
	//Для каждого ТекПользователь Из Источник.ДопСогласование Цикл
	//	Если НЕ ТекПользователь.СубъектСогласования = Константы.РуководительУС.Получить() Тогда
	//		ТекПользователь.РезультирующееСогласование = ТекПользователь.СубъектСогласования.РезультирующееСогласование;
	//	КонецЕсли;
	//КонецЦикла;
	
	
	Если Источник.Ссылка.Пустая() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ТекБП.Ссылка
		|ИЗ
		|	БизнесПроцесс." + Источник.Метаданные().Имя + " КАК ТекБП
		|ГДЕ
		|	ТекБП.Заявка = &Заявка";
		
		Запрос.УстановитьПараметр("Заявка", Источник.Заявка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Количество() Тогда
			Сообщить("Бизнес-процесс уже запущен. Запуск 2-х и более бизнес-процессов для одного документа невозможен.");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	//проверка на пустые строки маршрутов
	Если ТипЗнч(Источник) = Тип("БизнесПроцессОбъект.ЗаявкиАдминистратору") Тогда
		МассивПустых = Новый Массив;
		Для каждого ТекСтрока Из Источник.ДопСогласование Цикл
			Если Не ЗначениеЗаполнено(ТекСтрока.СубъектСогласования) Тогда
				МассивПустых.Добавить(ТекСтрока);			
			КонецЕсли;			
		КонецЦикла; 
		Для каждого ТекСтрока Из МассивПустых Цикл
			Источник.ДопСогласование.Удалить(ТекСтрока);	
		КонецЦикла; 
		
		МассивПустых = Новый Массив;
		Для каждого ТекСтрока Из Источник.ДопОповещение Цикл
			Если Не ЗначениеЗаполнено(ТекСтрока.Пользователь) Тогда
				МассивПустых.Добавить(ТекСтрока);			
			КонецЕсли;			
		КонецЦикла; 
		Для каждого ТекСтрока Из МассивПустых Цикл
			Источник.ДопОповещение.Удалить(ТекСтрока);	
		КонецЦикла; 
		
	КонецЕсли;
	
	
	
КонецПроцедуры

Процедура сабОтложенныйСтартБП() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Д_ОбращенияВТехПоддержку.Ссылка КАК Ссылка,
	               |	Д_ОбращенияВТехПоддержку.ОтИмени КАК ОтИмени,
	               |	Д_ОбращенияВТехПоддержку.Примечания КАК Примечания,
	               |	Д_ОбращенияВТехПоддержку.Содержание КАК Содержание,
	               |	Д_ОбращенияВТехПоддержку.ДопСогласование.(
	               |		Ссылка КАК Ссылка,
	               |		НомерСтроки КАК НомерСтроки,
	               |		СубъектСогласования КАК СубъектСогласования
	               |	) КАК ДопСогласование
	               |ИЗ
	               |	Документ.Д_ОбращенияВТехПоддержку КАК Д_ОбращенияВТехПоддержку
	               |		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.ЗаявкиАдминистратору КАК ЗаявкиАдминистратору
	               |		ПО Д_ОбращенияВТехПоддержку.Ссылка = ЗаявкиАдминистратору.Заявка
	               |ГДЕ
	               |	ЗаявкиАдминистратору.Ссылка ЕСТЬ NULL
	               |	И НАЧАЛОПЕРИОДА(Д_ОбращенияВТехПоддержку.ДатаНачалаРабот, ДЕНЬ) <= &ТекущаяДата
	               |	И Д_ОбращенияВТехПоддержку.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НовыйБП = БизнесПроцессы.ЗаявкиАдминистратору.СоздатьБизнесПроцесс();	
		
		НовыйБП.Автор = ПараметрыСеанса.ТекущийПользователь;
		НовыйБП.ОтИмени = Выборка.ОтИмени;
		НовыйБП.Описание = ?(ЗначениеЗаполнено(Выборка.Примечания), Выборка.Примечания, Выборка.Содержание);
		НовыйБП.Дата = ТекущаяДата();
		НовыйБП.Заявка = Выборка.Ссылка;
		НовыйБП.ОснованиеЗаблокирован = Истина;
		//добавляем "кому" в список рецензентов
		
		ВыборкаДопСогласование = Выборка.ДопСогласование.Выбрать();
		Пока ВыборкаДопСогласование.Следующий() Цикл
			НоваяСтрока = НовыйБП.ДопСогласование.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДопСогласование);	
		КонецЦикла; 
		
		НовыйБП.Записать();
		НовыйБП.Старт();
		//БПСервер.ИзменитьСостояниеДокумента(Объект.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область РаботаСПечатью
	
Процедура ПоказатьРецензентов(ТабДок, ДокументОбъект, ТипБюджета, МассивСсылок, ОбластьПримечанияПараметры = "", РецензентКомментарий = Неопределено, МассивОткрытыхИсторий = Неопределено, МассивОткрытыхИсторийАвтора = Неопределено) Экспорт
	
	Возврат;
	
	Макет = ПолучитьОбщийМакет("РезультатыСогласования");
	
	ЭтоФормДок = ТипЗнч(ТабДок) = Тип("ФорматированныйДокумент");
	
	ОбластьСогласование22 = Макет.ПолучитьОбласть("ШапкаСогласование");
	
	ТаблицаСогласований = Неопределено;
	ТаблицаБП			= Неопределено;
	ВыборкаИсп = Новый ТаблицаЗначений;
	ВыборкаОзн = Новый ТаблицаЗначений;
	
	МассивБП = Новый Массив;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") Тогда
		МассивБП.Добавить(Метаданные.БизнесПроцессы.Согласование1);
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.Д_ОбращенияВТехПоддержку") Тогда
		МассивБП.Добавить(Метаданные.БизнесПроцессы.ЗаявкиАдминистратору);	
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.Д_СлужебнаяЗаписка") Тогда
		МассивБП.Добавить(Метаданные.БизнесПроцессы.Согласование2);
		МассивБП.Добавить(Метаданные.БизнесПроцессы.Согласование3);
		МассивБП.Добавить(Метаданные.БизнесПроцессы.СогласованиеОбщее);
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.Д_ЗаявкаНаКорректировкуБюджета") Тогда
		МассивБП.Добавить(Метаданные.БизнесПроцессы.Согласование2);
		МассивБП.Добавить(Метаданные.БизнесПроцессы.СогласованиеОбщее);
		ОбластьОтступа = Макет.ПолучитьОбласть("ОтступДляБюджета");
		ТабДок.Вывести(ОбластьОтступа);
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.Д_Бюджет") Тогда
		МассивБП.Добавить(Метаданные.БизнесПроцессы.УтверждениеБюджета);
		ОбластьОтступа = Макет.ПолучитьОбласть("ОтступДляБюджета");
		Если ЭтоФормДок Тогда //позже
		Иначе
			ТабДок.Вывести(ОбластьОтступа);
		КонецЕсли;
	Иначе
		МассивБП.Добавить(Метаданные.БизнесПроцессы.СогласованиеОбщее);
	КонецЕсли;
	
	ОбластьПримечанияАвтораШапка = Макет.ПолучитьОбласть("ПримечанияАвтораШапка");
	ОбластьПримечанияАвтора = Макет.ПолучитьОбласть("ПримечанияАвтора");
	ОбластьПримечанияСогласователя = Макет.ПолучитьОбласть("ПримечанияСогласователя");
	ОбластьШапка22 = Макет.ПолучитьОбласть("Штампы");
	
	Для Каждого ТекБп Из МассивБП Цикл
		
		ЗапросБП = Новый Запрос;
		ЗапросБП.Текст =
		"ВЫБРАТЬ
		|	Согласование.Ссылка КАК БизнесПроцесс,
		|	Согласование.ДатаНачала КАК ДатаНачала,
		|	Согласование.ДатаЗавершения,
		|	Согласование.Описание,
		|	ВЫБОР
		|		КОГДА Согласование.Завершен = ЛОЖЬ
		|			ТОГДА РАЗНОСТЬДАТ(Согласование.ДатаНачала, &ТекДата, МИНУТА) / 60
		|		ИНАЧЕ РАЗНОСТЬДАТ(Согласование.ДатаНачала, Согласование.ДатаЗавершения, МИНУТА) / 60
		|	КОНЕЦ КАК ДлительностьЧас,
		|	ВЫБОР
		|		КОГДА Согласование.Завершен = ЛОЖЬ
		|			ТОГДА ""(в процессе)""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ВПроцессе,
		|	ВЫБОР
		|		КОГДА Согласование.Завершен = ЛОЖЬ
		|			ТОГДА РАЗНОСТЬДАТ(Согласование.ДатаНачала, &ТекДата, МИНУТА)
		|		ИНАЧЕ РАЗНОСТЬДАТ(Согласование.ДатаНачала, Согласование.ДатаЗавершения, МИНУТА)
		|	КОНЕЦ КАК ДлительностьМин,
		|	Согласование.Заявка," + ?(ТекБп.Имя = "Согласование1" ИЛИ ТекБп.Имя = "Согласование2" ИЛИ ТекБп.Имя = "Согласование3", "
		|	Согласование.ПроверенОФК,
		|	Согласование.СогласованОФК,
		|	Согласование.КомментарииОФК,
		|	Согласование.ПользовательОФК,", "") + "
		|	Согласование.Автор
		|ИЗ
		|	БизнесПроцесс." + ТекБп.Имя + " КАК Согласование
		|ГДЕ
		|	Согласование.Заявка В(&Заявка)
		|	И Согласование.ПометкаУдаления = Ложь";
		ЗапросБП.Параметры.Вставить("Заявка", 	МассивСсылок);
		ЗапросБП.Параметры.Вставить("ТекДата", 	ТекущаяДата());
		РезультатБП = ЗапросБП.Выполнить();
		ВыборкаБП 	= РезультатБП.Выбрать();
		
		ЕстьТипБП = (ТекБп = Метаданные.БизнесПроцессы.УтверждениеБюджета);
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	УтверждениеБюджетаДопСогласование.Ссылка,
		|	МАКСИМУМ(УтверждениеБюджетаДопСогласование.НомерСтроки) КАК НомерСтроки,
		|	УтверждениеБюджетаДопСогласование.Согласовано,
		|	УтверждениеБюджетаДопСогласование.Пройден,
		|	УтверждениеБюджетаДопСогласование.СубъектСогласования,
		|	УтверждениеБюджетаДопСогласование.РезультатВыполнения,
		|	УтверждениеБюджетаДопСогласование.ДатаВыполнения КАК ДатаСогласования,
		|	УтверждениеБюджетаДопСогласование.Пользователь КАК Пользователь,
		|	ПОДСТРОКА(УтверждениеБюджетаДопСогласование.Комментарии, 1, 700) КАК КомментарииБП
		|ПОМЕСТИТЬ ВТ_БП
		|ИЗ
		|	БизнесПроцесс." + ТекБп.Имя + ".ДопСогласование КАК УтверждениеБюджетаДопСогласование
		|ГДЕ
		|	УтверждениеБюджетаДопСогласование.Ссылка.Заявка = &Заявка
		|	" + ?(ЕстьТипБП, "И УтверждениеБюджетаДопСогласование.Ссылка.ТипБюджета = &ТипБюджета", "") + "
		|	И УтверждениеБюджетаДопСогласование.Ссылка.ПометкаУдаления = ЛОЖЬ " + ?(Истина, "", " И УтверждениеБюджетаДопСогласование.Пройден = ИСТИНА") + "
		|
		|СГРУППИРОВАТЬ ПО
		|	УтверждениеБюджетаДопСогласование.Пройден,
		|	УтверждениеБюджетаДопСогласование.ДатаВыполнения,
		|	УтверждениеБюджетаДопСогласование.СубъектСогласования,
		|	УтверждениеБюджетаДопСогласование.РезультатВыполнения,
		|	ПОДСТРОКА(УтверждениеБюджетаДопСогласование.Комментарии, 1, 700),
		|	УтверждениеБюджетаДопСогласование.Ссылка,
		|	УтверждениеБюджетаДопСогласование.Согласовано,
		|	УтверждениеБюджетаДопСогласование.Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_БП.Ссылка,
		|	ВТ_БП.НомерСтроки,
		|	ВТ_БП.Согласовано,
		|	ВТ_БП.Пройден,
		|	ВТ_БП.СубъектСогласования,
		|	ВТ_БП.РезультатВыполнения,
		|	ВТ_БП.ДатаСогласования,
		|	ВТ_БП.Пользователь,
		|	ВТ_БП.КомментарииБП,
		|	МАКСИМУМ(Задача.Ссылка) КАК ЗадачаСсылка
		|ПОМЕСТИТЬ ВТ_БП_МаксЗадача
		|ИЗ
		|	ВТ_БП КАК ВТ_БП
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.Задача КАК Задача
		|		ПО ВТ_БП.Ссылка = Задача.БизнесПроцесс
		|			И ВТ_БП.СубъектСогласования = Задача.Исполнитель
		|ГДЕ
		|	Задача.ПометкаУдаления = ЛОЖЬ И Задача.ТочкаМаршрута В(&ТочкаМаршрута) 
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_БП.Ссылка,
		|	ВТ_БП.НомерСтроки,
		|	ВТ_БП.Согласовано,
		|	ВТ_БП.Пройден,
		|	ВТ_БП.СубъектСогласования,
		|	ВТ_БП.РезультатВыполнения,
		|	ВТ_БП.ДатаСогласования,
		|	ВТ_БП.Пользователь,
		|	ВТ_БП.КомментарииБП
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_БП.Ссылка,
		|	ВТ_БП.НомерСтроки,
		|	ВТ_БП.Согласовано,
		|	ВТ_БП.Пройден,
		|	ВТ_БП.СубъектСогласования,
		|	ВТ_БП.РезультатВыполнения,
		|	ВТ_БП.ДатаСогласования,
		|	ВТ_БП.Пользователь,
		|	ВТ_БП.КомментарииБП,
		|	NULL
		|ИЗ
		|	ВТ_БП КАК ВТ_БП
		|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.Задача КАК Задача
		|		ПО ВТ_БП.Ссылка = Задача.БизнесПроцесс
		|			И ВТ_БП.СубъектСогласования = Задача.Исполнитель
		|ГДЕ
		|	Задача.Ссылка ЕСТЬ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_БП.Ссылка,
		|	ВТ_БП.НомерСтроки,
		|	ВТ_БП.Согласовано,
		|	ВТ_БП.Пройден,
		|	ВТ_БП.СубъектСогласования,
		|	ВТ_БП.РезультатВыполнения,
		|	ВТ_БП.ДатаСогласования,
		|	ВТ_БП.Пользователь,
		|	ВТ_БП.КомментарииБП
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_БП_МаксЗадача.Ссылка,
		|	ВТ_БП_МаксЗадача.НомерСтроки,
		|	ВТ_БП_МаксЗадача.Согласовано,
		|	ВТ_БП_МаксЗадача.Пройден,
		|	ВТ_БП_МаксЗадача.СубъектСогласования,
		|	ВТ_БП_МаксЗадача.РезультатВыполнения,
		|	ВТ_БП_МаксЗадача.ДатаСогласования,
		|	ВТ_БП_МаксЗадача.Пользователь,
		|	ВТ_БП_МаксЗадача.КомментарииБП,
		|	ВТ_БП_МаксЗадача.ЗадачаСсылка.Комментарии КАК Комментарии
		|ИЗ
		|	ВТ_БП_МаксЗадача КАК ВТ_БП_МаксЗадача
		|
		|УПОРЯДОЧИТЬ ПО
		|НомерСтроки";
		Запрос.УстановитьПараметр("Заявка", 	ДокументОбъект);
		Запрос.УстановитьПараметр("ТипБюджета", ТипБюджета);
		Запрос.УстановитьПараметр("ТочкаМаршрута", ТочкиПроцессов("согласование"));		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выгрузить();
		
		Если ТаблицаБП = Неопределено И ВыборкаБП.Количество() Тогда
			ТаблицаБП = РезультатБП.Выгрузить();
		ИначеЕсли ВыборкаБП.Количество() Тогда
			Пока ВыборкаБП.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаБП.Добавить(), ВыборкаБП);
			КонецЦикла;
		КонецЕсли;	
		
		// отдельная таблицаБП для утверждения бюджета
		Если ЕстьТипБП Тогда
			КолСтрок = ТаблицаБП.Количество();
			
			Для ОбрИнд = 1 По КолСтрок Цикл
				
				Если ТаблицаБП[КолСтрок - ОбрИнд].БизнесПроцесс.ТипБюджета = ТипБюджета Тогда
					Продолжить;
				КонецЕсли;
				
				ТаблицаБП.Удалить(КолСтрок - ОбрИнд);
				
			КонецЦикла;
			
		КонецЕсли;
		//
		
		Если ТаблицаСогласований = Неопределено И Выборка.Количество() Тогда
			ТаблицаСогласований = Результат.Выгрузить();
		ИначеЕсли Выборка.Количество() Тогда			
			Для Каждого ТекСтрока Из Выборка Цикл
				НоваяСтрока = ТаблицаСогласований.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			КонецЦикла; 
		КонецЕсли;
		
	КонецЦикла;
	
	//09.10.12 должность из регистра сведений
	
	Если ТаблицаБП <> Неопределено Тогда
		
		ЗапросПоСогласованию = Новый Запрос;
		ЗапросПоСогласованию.Текст = 
		"ВЫБРАТЬ
		|	Задача.Исполнитель КАК Исполнитель,
		|	Задача.ДатаИсполнения,
		|	Задача.Комментарии,
		|	Задача.РезультатВыполнения
		|ИЗ
		|	Задача.Задача КАК Задача
		|ГДЕ
		|	Задача.Заявка В (&Ссылка)
		|	И Задача.ТочкаМаршрута В(&ТочкаМаршрута)";
		ЗапросПоСогласованию.УстановитьПараметр("Ссылка", ДокументОбъект);
		ЗапросПоСогласованию.УстановитьПараметр("ТочкаМаршрута", ТочкиПроцессов("согласование"));
		ТаблицаПоСогласованию = ЗапросПоСогласованию.Выполнить().Выгрузить();
		
		ЗапросПоАвтору = Новый Запрос;
		ЗапросПоАвтору.Текст = 
		"ВЫБРАТЬ
		|	Задача.ДатаИсполнения,
		|	Задача.Комментарии,
		|	Задача.Исполнитель
		|ИЗ
		|	Задача.Задача КАК Задача
		|ГДЕ
		|	Задача.Заявка В (&Ссылка)
		|	И Задача.ТочкаМаршрута В (&ТочкаМаршрута)
		|	И Задача.Исполнитель = &Исполнитель
		|	И Задача.Выполнена";
		ЗапросПоАвтору.УстановитьПараметр("Ссылка", ДокументОбъект);
		ЗапросПоАвтору.УстановитьПараметр("Исполнитель", ДокументОбъект.Автор);
		ЗапросПоАвтору.УстановитьПараметр("ТочкаМаршрута", ТочкиПроцессов("доработка"));
		ТаблицаПоАвтору = ЗапросПоАвтору.Выполнить().Выгрузить();
		
		СтруктураПоиска = Новый Структура("Заявка", ДокументОбъект);
		МассивСтрокБП = ТаблицаБП.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаБП Из МассивСтрокБП Цикл
			
			Если ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.Д_СлужебнаяЗаписка") ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") Тогда
				
				Если (ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.Д_СлужебнаяЗаписка") И Не ДокументОбъект.ВидСЗ = Справочники.Д_ВидыВнутреннихДокументов.ЗаявкаНаСогласованиеДоговора) ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") Тогда
					ТекОбластьИнициатора = Макет.ПолучитьОбласть("ШтампыЗаголовок");
					Финансист = ?(ПустаяСтрока(ДокументОбъект.Автор), ДокументОбъект.Предприятие.Финансист, ДокументОбъект.Автор);
					
					// di имя пользователя и должность
					ИмяДолжность = ПолучитьИмяИДолжностьПользователя(СтрокаБП.БизнесПроцесс.Дата, Финансист);
					
					ТекОбластьИнициатора.Параметры.ИнициаторЗаявки = ИмяДолжность.ПредставлениеПользователя;
					//ТекОбластьИнициатора.Параметры.Должность = ?(ЗначениеЗаполнено(ИмяДолжность.Должность), ИмяДолжность.Должность, "");		
					//
					
					Оттиск = Финансист.ФайлКартинки;
					Если НЕ ПустаяСтрока(Оттиск) Тогда
						КартинкаИнициатора = Оттиск.ФайлХранилище.Получить();
					Иначе	
						КартинкаИнициатора = Новый Картинка;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(КартинкаИнициатора) Тогда
						ТекОбластьИнициатора.Рисунки.ОттискИнициатора.Картинка = КартинкаИнициатора;
					КонецЕсли;
					
					ТекОбластьИнициатора.Параметры.Заполнить(СтрокаБП);
					
					Если ЭтоФормДок Тогда //позже
						НовыйПараграфТекстФДИзОбластиТД(ТабДок, ТекОбластьИнициатора);
					Иначе
						ТабДок.Вывести(ТекОбластьИнициатора);
					КонецЕсли;
					
					МассивКомментариевАвтора = ТаблицаПоАвтору.НайтиСтроки(Новый Структура("Исполнитель", ДокументОбъект.Автор));
					ЕстьПримечаниеАвтора = Ложь;
					Если МассивКомментариевАвтора.Количество() > 1 Тогда
						Если ЭтоФормДок Тогда //позже
							НовыйПараграфТекстФД(ТабДок, " "); 
							НовыйПараграфТекстФДИзОбластиТД(ТабДок, ОбластьПримечанияАвтора,,,Новый Структура("Шрифт, Отступ", Новый Шрифт(,8,, Истина), 1));
						Иначе
							ТабДок.Вывести(ОбластьПримечанияАвтораШапка);
						КонецЕсли;
						
						МассивКомментариевАвтора.Удалить(МассивКомментариевАвтора.Количество() - 1);
						
						Для Каждого СтрокаМассиваКомментариев Из МассивКомментариевАвтора Цикл
							ОбластьПримечанияАвтора.Параметры.ТекстПримечанияАвтора = Строка(СтрокаМассиваКомментариев.ДатаИсполнения) + ": " + ?(ПустаяСтрока(СтрокаМассиваКомментариев.Комментарии), "комметарий отсутствует...", СтрокаМассиваКомментариев.Комментарии);
							Если ЭтоФормДок Тогда //позже
								НовыйПараграфТекстФД(ТабДок, " ");
							Иначе
								ТабДок.Вывести(ОбластьПримечанияАвтора);
							КонецЕсли;
							ЕстьПримечаниеАвтора = Истина;
						КонецЦикла;
					КонецЕсли;
					//Если ЕстьПримечаниеАвтора И (МассивОткрытыхИсторийАвтора = Неопределено ИЛИ (НЕ МассивОткрытыхИсторийАвтора = Неопределено И МассивОткрытыхИсторийАвтора.Найти(ДокументОбъект.Автор) = Неопределено)) Тогда
					//	ТекОбластьИнициатора.Параметры.РасшифровкаЕстьКомментарий = Новый Структура("Ссылка, ПечатьКомментариевАвтора, РецензентКомментарий, МассивОткрытыхИсторийАвтора", МассивСсылок, Истина, ДокументОбъект.Автор, МассивОткрытыхИсторийАвтора);
					//	ТекОбластьИнициатора.Параметры.ЕстьКомментарий = "Показать комментарии...";
					//	ТекОбластьИнициатора.Параметры.КомментарииАвтора = ЕдинственноеПримечаниеАвтора;
					//ИначеЕсли КоличествоКомментариевАвтора > 1 Тогда
					//	ТекОбластьИнициатора.Параметры.РасшифровкаЕстьКомментарий = Новый Структура("Ссылка, ПечатьКомментариевАвтора, РецензентКомментарий, МассивОткрытыхИсторийАвтора", МассивСсылок, Ложь, ДокументОбъект.Автор, МассивОткрытыхИсторийАвтора);
					//	ТекОбластьИнициатора.Параметры.ЕстьКомментарий = "Скрыть комментарии...";
					//	ТекОбластьИнициатора.Параметры.КомментарииАвтора = ТекстПримечанияАвтора;
					//КонецЕсли;
					//Если ЭтоФормДок Тогда //позже
					//Иначе
					//	ТабДок.Вывести(ТекОбластьИнициатора);
					//КонецЕсли;
					
					//ОФКНеСогласует = ((ТипЗнч(СтрокаБП.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование1") ИЛИ ТипЗнч(СтрокаБП.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование3")) И ЗначениеЗаполнено(ДокументОбъект.Предприятие) И ДокументОбъект.Предприятие.НеКонтролироватьОФК И Не СтрокаБП.БизнесПроцесс.КонтрольСогласованияОФК) Или
					//					(ТипЗнч(СтрокаБП.БизнесПроцесс) = Тип("БизнесПроцессСсылка.СогласованиеОбщее") И Не СтрокаБП.БизнесПроцесс.КонтрольСогласованияОФК); 				
					//
					//Если ОФКНеСогласует Тогда
					//	ТекОбластьИнициатора = Макет.ПолучитьОбласть("ШтампыЗаголовокОФКНеПроизводится");
					//Иначе
					//	ТекОбластьИнициатора = Макет.ПолучитьОбласть("ШтампыЗаголовокОФК");
					//	
					//	//шщем ОФК в согласователях
					//	СотрудникОФКБазы = БизнесПроцессы.Согласование1.ПолучитьСотрудникаОФК(ДокументОбъект);
					//	
					//	Если ТипЗнч(СтрокаБП.БизнесПроцесс) = Тип("БизнесПроцессСсылка.СогласованиеОбщее") Тогда
					//		Для каждого ТекСтрокаСогласователь Из СтрокаБП.БизнесПроцесс.ДопСогласование Цикл
					//			Если ПользовательЯвляетсяОФК(ТекСтрокаСогласователь.СубъектСогласования) ИЛИ ТекСтрокаСогласователь.РольПользователя = "Проверка ОФК" Тогда
					//				ПользовательОФК = ТекСтрокаСогласователь.СубъектСогласования;
					//				ПроверенОФК = ТекСтрокаСогласователь.Пройден;
					//				СогласованОФК = ТекСтрокаСогласователь.Согласовано;
					//				КомментарииОФК = ТекСтрокаСогласователь.Комментарии;
					//			КонецЕсли;	
					//		КонецЦикла;
					//	ИначеЕсли ТипЗнч(СтрокаБП.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование1") Тогда //добавляем обход ТЧ
					//		ЕстьОФКвТЧ = Ложь;
					//		Для каждого ТекСтрокаСогласователь Из СтрокаБП.БизнесПроцесс.ДопСогласование Цикл
					//			Если ПользовательЯвляетсяОФК(ТекСтрокаСогласователь.СубъектСогласования) ИЛИ ТекСтрокаСогласователь.РольПользователя = "Проверка ОФК" Тогда
					//				ПользовательОФК = ТекСтрокаСогласователь.СубъектСогласования;
					//				ПроверенОФК = ТекСтрокаСогласователь.Пройден;
					//				СогласованОФК = ТекСтрокаСогласователь.Согласовано;
					//				КомментарииОФК = ТекСтрокаСогласователь.Комментарии;
					//				ЕстьОФКвТЧ = Истина;
					//			КонецЕсли;	
					//		КонецЦикла;
					//		Если НЕ ЕстьОФКвТЧ Тогда
					//			ПользовательОФК = СтрокаБП.ПользовательОФК;
					//			ПроверенОФК = СтрокаБП.ПроверенОФК;
					//			СогласованОФК = СтрокаБП.СогласованОФК;
					//			КомментарииОФК = СтрокаБП.КомментарииОФК + "(" + Строка(СтрокаБП.ПользовательОФК) + ")";
					//		КонецЕсли; //конец добавления
					//	Иначе 
					//		ПользовательОФК = СтрокаБП.ПользовательОФК;
					//		ПроверенОФК = СтрокаБП.ПроверенОФК;
					//		СогласованОФК = СтрокаБП.СогласованОФК;
					//		КомментарииОФК = СтрокаБП.КомментарииОФК + "(" + Строка(СтрокаБП.ПользовательОФК) + ")";
					//	КонецЕсли;
					//	
					//	Если НЕ ПользовательОФК = Неопределено Тогда
					//		
					//		ТекОбластьИнициатора.Параметры.ПроверенОФК = ПроверенОФК;
					//		ТекОбластьИнициатора.Параметры.СогласованОФК = СогласованОФК;
					//		Если Не ПустаяСтрока(ПользовательОФК) Тогда
					//			ТекОбластьИнициатора.Параметры.КомментарииОФК = КомментарииОФК;				
					//		КонецЕсли;
					//		
					//		Если ТипЗнч(ПользовательОФК) = Тип("СправочникСсылка.Пользователи") Тогда
					//			Оттиск = ПользовательОФК.ФайлКартинки;
					//		Иначе
					//			Оттиск = Неопределено;
					//		КонецЕсли;
					//		Если НЕ ПустаяСтрока(Оттиск) Тогда
					//			Картинка = Оттиск.ФайлХранилище.Получить();
					//		Иначе	
					//			Картинка = Новый Картинка;
					//		КонецЕсли;
					//		Если ЗначениеЗаполнено(Картинка) Тогда
					//			ТекОбластьИнициатора.Рисунки.ОттискОФК.Картинка = Картинка;
					//		КонецЕсли;
					//		
					//	КонецЕсли;
					//КонецЕсли;
				КонецЕсли;
				
				ТекБП = БПСервер.НайтиТекущийБПСервер(ДокументОбъект);
				
				Если ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.Д_СлужебнаяЗаписка") Тогда
					
					// 12.10.2012 добавление ознакомившихся 
					ЗапросОзнакомления = Новый Запрос;
					ЗапросОзнакомления.УстановитьПараметр("ДатаБП", ?(НЕ ТекБП = Неопределено, ТекБП.Дата, ДокументОбъект.Дата)); 
					ЗапросОзнакомления.УстановитьПараметр("ТекБП", ТекБп);
					ЗапросОзнакомления.УстановитьПараметр("ТочкаМаршрута", БизнесПроцессы.Согласование3.ТочкиМаршрута.Действие6);
					
					ЗапросИсп = Новый Запрос;
					ЗапросИсп.УстановитьПараметр("ДатаБП", ?(НЕ ТекБП = Неопределено, ТекБП.Дата, ДокументОбъект.Дата)); 
					ЗапросИсп.УстановитьПараметр("ТочкаМаршрута", БизнесПроцессы.Согласование3.ТочкиМаршрута.Действие4);
					ЗапросИсп.УстановитьПараметр("ТекБП", ТекБп);
					
					Если ТипЗнч(ТекБП) = Тип("БизнесПроцессСсылка.Согласование3") И НЕ ТекБП.ПодтверждениеОзнакомления Тогда 
						
						ЗапросОзнакомления.Текст = "ВЫБРАТЬ
						                           |	МАКСИМУМ(Задача.Ссылка) КАК ТекущаяЗадача,
						                           |	Задача.БизнесПроцесс,
						                           |	Задача.Исполнитель,
						                           |	Задача.Пользователь
						                           |ПОМЕСТИТЬ ВТ_ПоследняяЗадача
						                           |ИЗ
						                           |	Задача.Задача КАК Задача
						                           |ГДЕ
						                           |	Задача.Выполнена = ИСТИНА
						                           |	И Задача.ТочкаМаршрута = &ТочкаМаршрута
						                           |	И Задача.БизнесПроцесс = &ТекБП
						                           |
						                           |СГРУППИРОВАТЬ ПО
						                           |	Задача.БизнесПроцесс,
						                           |	Задача.Исполнитель,
						                           |	Задача.Пользователь
						                           |;
						                           |
						                           |////////////////////////////////////////////////////////////////////////////////
						                           |ВЫБРАТЬ
						                           |	ДолжностиПользователяСрезПоследних.Должность,
						                           |	ВТ_ПоследняяЗадача.ТекущаяЗадача.ДатаИсполнения КАК Дата,
						                           |	ВТ_ПоследняяЗадача.ТекущаяЗадача.Комментарии КАК Комментарии,
						                           |	ВТ_ПоследняяЗадача.Исполнитель КАК СубъектСогласования,
						                           |	ВТ_ПоследняяЗадача.ТекущаяЗадача.Выполнена КАК Согласовано,
						                           |	ВТ_ПоследняяЗадача.ТекущаяЗадача.Пользователь КАК Пользователь
						                           |ИЗ
						                           |	ВТ_ПоследняяЗадача КАК ВТ_ПоследняяЗадача
						                           |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДолжностиПользователя.СрезПоследних(&ДатаБП, ) КАК ДолжностиПользователяСрезПоследних
						                           |		ПО ВТ_ПоследняяЗадача.ТекущаяЗадача.Пользователь = ДолжностиПользователяСрезПоследних.Пользователь
						                           |
						                           |УПОРЯДОЧИТЬ ПО
						                           |	Дата";
						
						ЗапросИсп.Текст = "ВЫБРАТЬ
						                  |	ДопИсполнение.Исполнено,
						                  |	ДолжностиПользователяСрезПоследних.Должность,
						                  |	ДопИсполнение.Пользователь,
						                  |	ДопИсполнение.Исполнитель КАК СубъектСогласования,
						                  |	ДопИсполнение.Комментарии,
						                  |	Задача.ДатаИсполнения КАК Дата
						                  |ИЗ
						                  |	БизнесПроцесс.Согласование3.ДопИсполнение КАК ДопИсполнение
						                  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДолжностиПользователя.СрезПоследних(&ДатаБП, ) КАК ДолжностиПользователяСрезПоследних
						                  |		ПО ДопИсполнение.Пользователь = ДолжностиПользователяСрезПоследних.Пользователь
						                  |		ЛЕВОЕ СОЕДИНЕНИЕ Задача.Задача КАК Задача
						                  |		ПО ДопИсполнение.Исполнитель = Задача.Исполнитель
						                  |ГДЕ
						                  |	ДопИсполнение.Ссылка = &ТекБП
						                  |	И ДопИсполнение.Пройдено = ИСТИНА
						                  |	И Задача.Выполнена = ИСТИНА
						                  |	И Задача.ТочкаМаршрута = &ТочкаМаршрута
						                  |	И Задача.БизнесПроцесс = &ТекБП";
										  
						ВыборкаИсп = ЗапросИсп.Выполнить().Выгрузить();
						ВыборкаОзн = ЗапросОзнакомления.Выполнить().Выгрузить();
						 												
					ИначеЕсли ТипЗнч(ТекБП) = Тип("БизнесПроцессСсылка.Согласование3") И ТекБП.ПодтверждениеОзнакомления Тогда
						
						ЗапросОзнакомления.Текст = "ВЫБРАТЬ
						                           |	МАКСИМУМ(Задача.Ссылка) КАК ТекущаяЗадача,
						                           |	Задача.БизнесПроцесс,
						                           |	Задача.Исполнитель,
						                           |	Задача.Пользователь
						                           |ПОМЕСТИТЬ ВТ_ПоследняяЗадача
						                           |ИЗ
						                           |	Задача.Задача КАК Задача
						                           |ГДЕ
						                           |	Задача.Выполнена = ИСТИНА
						                           |	И Задача.ТочкаМаршрута = &ТочкаМаршрута
						                           |	И Задача.БизнесПроцесс = &ТекБП
						                           |
						                           |СГРУППИРОВАТЬ ПО
						                           |	Задача.БизнесПроцесс,
						                           |	Задача.Исполнитель,
						                           |	Задача.Пользователь
						                           |;
						                           |
						                           |////////////////////////////////////////////////////////////////////////////////
						                           |ВЫБРАТЬ
						                           |	ДолжностиПользователяСрезПоследних.Должность,
						                           |	ВТ_ПоследняяЗадача.ТекущаяЗадача.ДатаИсполнения КАК Дата,
						                           |	ВТ_ПоследняяЗадача.ТекущаяЗадача.Комментарии КАК Комментарии,
						                           |	ВТ_ПоследняяЗадача.Исполнитель КАК СубъектСогласования,
						                           |	ВТ_ПоследняяЗадача.ТекущаяЗадача.Выполнена КАК Согласовано,
						                           |	ВТ_ПоследняяЗадача.ТекущаяЗадача.Пользователь КАК Пользователь
						                           |ИЗ
						                           |	ВТ_ПоследняяЗадача КАК ВТ_ПоследняяЗадача
						                           |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДолжностиПользователя.СрезПоследних(&ДатаБП, ) КАК ДолжностиПользователяСрезПоследних
						                           |		ПО ВТ_ПоследняяЗадача.ТекущаяЗадача.Пользователь = ДолжностиПользователяСрезПоследних.Пользователь
						                           |
						                           |УПОРЯДОЧИТЬ ПО
						                           |	Дата";
						
						ЗапросИсп.Текст = "ВЫБРАТЬ
						                  |	ДопИсполнение.Пользователь КАК Пользователь,
						                  |	ДопИсполнение.Исполнено,
						                  |	ДолжностиПользователяСрезПоследних.Должность,
						                  |	ДопИсполнение.Исполнитель КАК СубъектСогласования,
						                  |	ДопИсполнение.Комментарии,
						                  |	Задача.ДатаИсполнения КАК Дата
						                  |ИЗ
						                  |	БизнесПроцесс.Согласование3.ДопИсполнение КАК ДопИсполнение
						                  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДолжностиПользователя.СрезПоследних(&ДатаБП, ) КАК ДолжностиПользователяСрезПоследних
						                  |		ПО ДопИсполнение.Пользователь = ДолжностиПользователяСрезПоследних.Пользователь
						                  |		ЛЕВОЕ СОЕДИНЕНИЕ Задача.Задача КАК Задача
						                  |		ПО ДопИсполнение.Исполнитель = Задача.Исполнитель
						                  |ГДЕ
						                  |	ДопИсполнение.Ссылка = &ТекБП
						                  |	И ДопИсполнение.Пройдено = ИСТИНА
						                  |	И Задача.Выполнена = ИСТИНА
						                  |	И Задача.ТочкаМаршрута = &ТочкаМаршрута
						                  |	И Задача.БизнесПроцесс = &ТекБП";
										  
						ВыборкаИсп = ЗапросИсп.Выполнить().Выгрузить();
						ВыборкаОзн = ЗапросОзнакомления.Выполнить().Выгрузить();
						
					КонецЕсли;	
					
				// обращение №2 база ЛП, показ нескольких исполнителей	
				ИначеЕсли ТипЗнч(ТекБП) = Тип("БизнесПроцессСсылка.Согласование1") Тогда	
					
					ЗапросИсп = Новый Запрос;
					ЗапросИсп.УстановитьПараметр("ДатаБП", ?(НЕ ТекБП = Неопределено, ТекБП.Дата, ДокументОбъект.Дата)); 
					ЗапросИсп.УстановитьПараметр("ТочкаМаршрута", БизнесПроцессы.Согласование1.ТочкиМаршрута.Действие5);
					ЗапросИсп.УстановитьПараметр("ТекБП", ТекБп);
					
					ЗапросИсп.Текст = "ВЫБРАТЬ
					                  |	Согласование1ДопИсполнение.Исполнено,
					                  |	ДолжностиПользователяСрезПоследних.Должность,
					                  |	Согласование1ДопИсполнение.Пользователь,
					                  |	Согласование1ДопИсполнение.Исполнитель КАК СубъектСогласования,
					                  |	Согласование1ДопИсполнение.Комментарии,
					                  |	NULL КАК Дата,
					                  |	Согласование1ДопИсполнение.Пройдено
					                  |ИЗ
					                  |	БизнесПроцесс.Согласование1.ДопИсполнение КАК Согласование1ДопИсполнение
					                  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДолжностиПользователя.СрезПоследних(&ДатаБП, ) КАК ДолжностиПользователяСрезПоследних
					                  |		ПО Согласование1ДопИсполнение.Пользователь = ДолжностиПользователяСрезПоследних.Пользователь
					                  |ГДЕ
					                  |	Согласование1ДопИсполнение.Ссылка = &ТекБП
					                  |	И Согласование1ДопИсполнение.Пройдено = ЛОЖЬ
					                  |
					                  |ОБЪЕДИНИТЬ ВСЕ
					                  |
					                  |ВЫБРАТЬ
					                  |	Согласование1ДопИсполнение.Исполнено,
					                  |	ДолжностиПользователяСрезПоследних.Должность,
					                  |	Согласование1ДопИсполнение.Пользователь,
					                  |	Согласование1ДопИсполнение.Исполнитель,
					                  |	Согласование1ДопИсполнение.Комментарии,
					                  |	Задача.ДатаИсполнения,
					                  |	Согласование1ДопИсполнение.Пройдено
					                  |ИЗ
					                  |	БизнесПроцесс.Согласование1.ДопИсполнение КАК Согласование1ДопИсполнение
					                  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДолжностиПользователя.СрезПоследних(&ДатаБП, ) КАК ДолжностиПользователяСрезПоследних
					                  |		ПО Согласование1ДопИсполнение.Пользователь = ДолжностиПользователяСрезПоследних.Пользователь
					                  |		ЛЕВОЕ СОЕДИНЕНИЕ Задача.Задача КАК Задача
					                  |		ПО Согласование1ДопИсполнение.Исполнитель = Задача.Исполнитель
					                  |ГДЕ
					                  |	Согласование1ДопИсполнение.Ссылка = &ТекБП
					                  |	И Задача.ТочкаМаршрута = &ТочкаМаршрута
					                  |	И Задача.БизнесПроцесс = &ТекБП
					                  |	И Задача.Выполнена = ИСТИНА
					                  |	И Согласование1ДопИсполнение.Пройдено = ИСТИНА";
						
					ВыборкаИсп = ЗапросИсп.Выполнить().Выгрузить();
				КонецЕсли;	
				
			КонецЕсли;
			
			Если ТаблицаСогласований <> Неопределено Тогда			
				Если ТаблицаСогласований.Колонки.Найти("Должность") = Неопределено Тогда
					ТаблицаСогласований.Колонки.Добавить("Должность")
				КонецЕсли;
				Если ТаблицаСогласований.Колонки.Найти("ПредставлениеПользователя") = Неопределено Тогда
					ТаблицаСогласований.Колонки.Добавить("ПредставлениеПользователя")
				КонецЕсли;
				Для каждого ТекСтрока Из ТаблицаСогласований Цикл
					Если ЗначениеЗаполнено(ТекСтрока.Пользователь) Тогда
						
						ИмяДолжность = ПолучитьИмяИДолжностьПользователя(ТекСтрока.Ссылка.Дата, ТекСтрока.Пользователь);
						
						ТекСтрока.ПредставлениеПользователя = ИмяДолжность.ПредставлениеПользователя;
						//ТекСтрока.Должность = ?(ЗначениеЗаполнено(ИмяДолжность.Должность), ИмяДолжность.Должность, "");
						
					КонецЕсли;	
				КонецЦикла; 
				
				ВыводимШапку = Истина;
				
				Если ЭтоФормДок Тогда //позже
				Иначе
					ТабДок.НачатьГруппуСтрок("Показать согласование", Истина);
				КонецЕсли;	
				Для Каждого ВыборкаСогласование Из ТаблицаСогласований Цикл
					
					Если Истина Или НЕ ПустаяСтрока(ВыборкаСогласование.Пользователь) Тогда
						
						ЕстьПримечание = Ложь;
						
						// особый вид для строителей
						//Если ДокументОбъект.Метаданные().Реквизиты.Найти("ВидСЗ") <> Неопределено И ДокументОбъект.ВидСЗ = Справочники.Д_ВидыВнутреннихДокументов.СогласованиеДоговораСтроительство Тогда
						//	ОбластьШапка22 = Макет.ПолучитьОбласть("ШтампыСтроительство");
						//	ОбластьПримечания = ОбластьШапка22.Область("ОтметкаСтроительство");
						//Иначе
							
							//ОбластьПримечания = ОбластьШапка22.Область("Отметка");
						//КонецЕсли;
						
						Если ВыводимШапку Тогда
							Если ЭтоФормДок Тогда //позже
								НовыйПараграфТекстФД(ТабДок, " ");
								НовыйПараграфТекстФД(ТабДок, "Результаты согласования:", Истина);
							Иначе
								ТабДок.Вывести(ОбластьСогласование22);
							КонецЕсли;
								ВыводимШапку = Ложь;
						КонецЕсли;
						
						Если НЕ ВыборкаСогласование.Пройден Тогда
							// особый вид для строителей
							//Если ДокументОбъект.Метаданные().Реквизиты.Найти("ВидСЗ") <> Неопределено И ДокументОбъект.ВидСЗ = Справочники.Д_ВидыВнутреннихДокументов.СогласованиеДоговораСтроительство Тогда
							//	ОбластьНепройденных = Макет.ПолучитьОбласть("НепройденныеСтроительство");
							//Иначе
								ОбластьНепройденных = Макет.ПолучитьОбласть("Непройденные");
							//КонецЕсли;
							ИмяДолжность = ПолучитьИмяИДолжностьПользователя(СтрокаБП.БизнесПроцесс.Дата, ВыборкаСогласование.СубъектСогласования);
							ОбластьНепройденных.Параметры.ПредставлениеПользователя = ИмяДолжность.ПредставлениеПользователя;
							//ОбластьНепройденных.Параметры.Должность = ?(ЗначениеЗаполнено(ИмяДолжность.Должность), ИмяДолжность.Должность, "");		
							Если ЭтоФормДок Тогда //позже
								НовыйПараграфТекстФД(ТабДок, " ");
								НовыйПараграфТекстФДИзОбластиТД(ТабДок, ОбластьНепройденных, Истина,, Новый Структура("ДопТекст, ЦветШрифта", " (Не пройден)", Новый Цвет(153, 153, 153)));
							Иначе
								ТабДок.Вывести(ОбластьНепройденных);
							КонецЕсли;
							Продолжить;	
							
						КонецЕсли;
						
						
						ОбластьШапка22.Параметры.Заполнить(ВыборкаСогласование);
						ОбластьШапка22.Параметры.ПредставлениеПользователя = ВыборкаСогласование.ПредставлениеПользователя;
						//ОбластьШапка22.Параметры.Должность = ВыборкаСогласование.Должность;
						// если датаСогласования пустая, берем ее из задачи {
						ТекДатаСогласования = ВыборкаСогласование.ДатаСогласования;
						Если Не ЗначениеЗаполнено(ТекДатаСогласования) Тогда
							СтрокаСогл = ТаблицаПоСогласованию.Найти(ВыборкаСогласование.Пользователь, "Исполнитель");
							Если СтрокаСогл <> Неопределено Тогда
								ТекДатаСогласования = СтрокаСогл.ДатаИсполнения;
							КонецЕсли;
						КонецЕсли;	
						//}
						ОбластьШапка22.Параметры.ДатаСогласования = ТекДатаСогласования;
						
						Если НЕ МассивОткрытыхИсторий = Неопределено И НЕ МассивОткрытыхИсторий.Найти(ВыборкаСогласование.Пользователь) = Неопределено Тогда
							ТекстПримечания = ТекстПримечания + "В результате: " + ?(ЗначениеЗаполнено(ВыборкаСогласование.РезультатВыполнения), ВыборкаСогласование.РезультатВыполнения, ?(ВыборкаСогласование.Согласовано, "Да.", "Нет!"));
							ОбластьШапка22.Параметры.Комментарии = ТекстПримечания;
						Иначе
							ОбластьШапка22.Параметры.Комментарии = ВыборкаСогласование.КомментарииБП;
							Если Найти(ОбластьШапка22.Параметры.Комментарии, "Ознакомлен(а), отправлено далее по маршруту!") = 0 Тогда
								ОбластьШапка22.Параметры.Отметка = ?(ЗначениеЗаполнено(ВыборкаСогласование.РезультатВыполнения), ВыборкаСогласование.РезультатВыполнения, ?(ВыборкаСогласование.Согласовано, "Да.", "Нет!"));
							КонецЕсли;
						КонецЕсли;
						
						
						//добавлено условие, если кто-то согласовывает за кого-то
						СогласованоВместо = "";
						Если НЕ ВыборкаСогласование.СубъектСогласования = ВыборкаСогласование.Пользователь Тогда
							НеИсполнитель = Ложь;
							Если ТипЗнч(ВыборкаСогласование.СубъектСогласования) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
								Если НЕ ВыборкаСогласование.СубъектСогласования.Состав.НайтиСтроки(Новый Структура("Пользователь",ВыборкаСогласование.Пользователь)).Количество()  Тогда
									НеИсполнитель = Истина;
								КонецЕсли;
							Иначе
								НеИсполнитель = Истина;							
							КонецЕсли;
							Если НеИсполнитель Тогда
								СогласованоВместо = "
								|Задача выполнена вместо: " + Строка(ВыборкаСогласование.СубъектСогласования);
							КонецЕсли;
						КонецЕсли;
						
						МассивЭлементовСогласования = ТаблицаПоСогласованию.НайтиСтроки(Новый Структура("Исполнитель", ВыборкаСогласование.СубъектСогласования));
						
						Если МассивЭлементовСогласования.Количество() Тогда
							ОбластьШапка22.Параметры.Комментарии = МассивЭлементовСогласования[МассивЭлементовСогласования.Количество() - 1].Комментарии + СогласованоВместо;
						КонецЕсли;
						
						Если ЭтоФормДок Тогда //позже
							НовыйПараграфТекстФД(ТабДок, " ");
							НовыйПараграфТекстФДИзОбластиТД(ТабДок, ОбластьШапка22);
						Иначе
							ТабДок.Вывести(ОбластьШапка22);
						КонецЕсли;
						
						Если Не ПустаяСтрока(ОбластьПримечанияПараметры) Тогда
							Если МассивЭлементовСогласования.Количество() > 1 Тогда
								ТЗ_ЭлементыСогласования = ТаблицаПоСогласованию.СкопироватьКолонки();
								Для Каждого ТекЭл Из МассивЭлементовСогласования Цикл
									НСтрока = ТЗ_ЭлементыСогласования.Добавить();
                                    ЗаполнитьЗначенияСвойств(НСтрока, ТекЭл);
								КонецЦикла;
								ТЗ_ЭлементыСогласования.Сортировать("ДатаИсполнения Возр"); 
								МассивЭлементовСогласования = ТЗ_ЭлементыСогласования;
							КонецЕсли;
							ТекстПримечания = "";
							Если МассивЭлементовСогласования.Количество() > 1 Тогда
								Если ЭтоФормДок Тогда //позже
									НовыйПараграфТекстФД(ТабДок, "История:", Ложь, Новый Структура("Шрифт, Отступ", Новый Шрифт(,8,, Истина), 1)); 
								Иначе
									ТабДок.Вывести(ОбластьПримечанияАвтораШапка);
								КонецЕсли;
								
								МассивЭлементовСогласования.Удалить(МассивЭлементовСогласования.Количество() - 1);
								
								Для Каждого СтрокаМассиваСогласования Из МассивЭлементовСогласования Цикл
									ОбластьПримечанияСогласователя.Параметры.ТекстПримечанияСогласователя = Строка(СтрокаМассиваСогласования.ДатаИсполнения) + ": " + ?(ПустаяСтрока(СтрокаМассиваСогласования.Комментарии), "комметарий отсутствует...", СтрокаМассиваСогласования.Комментарии);
									Если ЭтоФормДок Тогда //позже
										НовыйПараграфТекстФДИзОбластиТД(ТабДок, ОбластьПримечанияСогласователя,,,Новый Структура("Шрифт, Отступ", Новый Шрифт(,8,, Истина), 1));
									Иначе
										ТабДок.Вывести(ОбластьПримечанияСогласователя);
									КонецЕсли;
									ЕстьПримечание = Истина;
								КонецЦикла;
							КонецЕсли;
							
						КонецЕсли;
						
						// добавлено временно комментарий из задачи
						Если ЗначениеЗаполнено(СтрокаМассиваСогласования) Тогда
							ВыборкаСогласование.Комментарии = СтрокаМассиваСогласования.Комментарии;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если ЭтоФормДок Тогда //позже
				Иначе
					ТабДок.ЗакончитьГруппуСтрок();
				КонецЕсли;
			КонецЕсли;
			
			
			//исполнение
			Если ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.Д_СлужебнаяЗаписка") ИЛИ (ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") И НЕ ОбщегоНазначенияПовтИсп.ЭтоБазаСпирт()) Тогда
				ОбластьОзнакомлениеШапка = Макет.ПолучитьОбласть("ШапкаИсполнения");
				ОбластьОзнакомление = Макет.ПолучитьОбласть("ШтампыИсполнения");
				Если ВыборкаИсп.Количество() Тогда
					Если ЭтоФормДок Тогда //позже
					Иначе
						ТабДок.Вывести(ОбластьОзнакомлениеШапка);
					КонецЕсли;
				КонецЕсли;
				Для каждого ТекИсп Из ВыборкаИсп Цикл
					
					Если ТекИсп.Пройдено Тогда
						ИмяДолжность = ПолучитьИмяИДолжностьПользователя(НайтиТекущийБПСервер(ДокументОбъект.Ссылка).Дата, ТекИсп.Пользователь);
						ОбластьОзнакомление.Параметры.ПредставлениеПользователя = ИмяДолжность.ПредставлениеПользователя;
						//ОбластьОзнакомление.Параметры.Должность = ?(ЗначениеЗаполнено(ИмяДолжность.Должность), ИмяДолжность.Должность, "");
						ОбластьОзнакомление.Параметры.Заполнить(ТекИсп);
						
						//добавлено условие, если кто-то согласовывает за кого-то
						Если НЕ ТекИсп.СубъектСогласования = ТекИсп.Пользователь Тогда
							НеИсполнитель = Ложь;
							Если ТипЗнч(ТекИсп.СубъектСогласования) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
								Если НЕ ТекИсп.СубъектСогласования.Состав.НайтиСтроки(Новый Структура("Пользователь",ТекИсп.Пользователь)).Количество()  Тогда
									НеИсполнитель = Истина;
								КонецЕсли;
							Иначе
								НеИсполнитель = Истина;							
							КонецЕсли;
							Если НеИсполнитель Тогда
								ОбластьОзнакомление.Параметры.Комментарии = ОбластьОзнакомление.Параметры.Комментарии + "
							|Задача выполнена вместо: " + Строка(ТекИсп.СубъектСогласования);
							КонецЕсли;;
						КонецЕсли;
						//конец добавления условия
						
						ОбластьОзнакомление.Параметры.ДатаИсполнения = ТекИсп.Дата;
						Если ЭтоФормДок Тогда //позже
							НовыйПараграфТекстФДИзОбластиТД(ТабДок, ОбластьОзнакомление);
						Иначе
							ТабДок.Вывести(ОбластьОзнакомление);
						КонецЕсли;
					Иначе
						ИмяДолжность = ПолучитьИмяИДолжностьПользователя(НайтиТекущийБПСервер(ДокументОбъект.Ссылка).Дата, ТекИсп.СубъектСогласования);
						ОбластьНепройденных = Макет.ПолучитьОбласть("Непройденные");
						ОбластьНепройденных.Параметры.ПредставлениеПользователя = ИмяДолжность.ПредставлениеПользователя;
						//ОбластьНепройденных.Параметры.Должность = ?(ЗначениеЗаполнено(ИмяДолжность.Должность), ИмяДолжность.Должность, "");  
						Если ЭтоФормДок Тогда //позже
						Иначе
							ТабДок.Вывести(ОбластьНепройденных);
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли; //конец исполнения
			
			
			// ознакомление
			Если ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.Д_СлужебнаяЗаписка") Тогда
				ОбластьОзнакомлениеШапка = Макет.ПолучитьОбласть("ШапкаОзнакомление");
				ОбластьОзнакомление = Макет.ПолучитьОбласть("ШтампыОзнакомление");
				Если ВыборкаОзн.Количество() Тогда
					Если ЭтоФормДок Тогда //позже
					Иначе
						ТабДок.Вывести(ОбластьОзнакомлениеШапка);
					КонецЕсли;
				КонецЕсли;
				Для каждого ТекОзн Из ВыборкаОзн Цикл
					ИмяДолжность = ПолучитьИмяИДолжностьПользователя(НайтиТекущийБПСервер(ДокументОбъект.Ссылка).Дата, ТекОзн.Пользователь);
					ОбластьОзнакомление.Параметры.ПредставлениеПользователя = ИмяДолжность.ПредставлениеПользователя;
					//ОбластьОзнакомление.Параметры.Должность = ?(ЗначениеЗаполнено(ИмяДолжность.Должность), ИмяДолжность.Должность, "");
					ОбластьОзнакомление.Параметры.ДатаОзнакомления = ТекОзн.Дата;
					ОбластьОзнакомление.Параметры.Ознакомление = ТекОзн.Согласовано;
					ОбластьОзнакомление.Параметры.Комментарии = ТекОзн.Комментарии;
					//добавлено условие, если кто-то согласовывает за кого-то
					Если НЕ ТекОзн.СубъектСогласования = ТекОзн.Пользователь Тогда
						НеИсполнитель = Ложь;
						Если ТипЗнч(ТекОзн.СубъектСогласования) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
							Если НЕ ТекОзн.СубъектСогласования.Состав.НайтиСтроки(Новый Структура("Пользователь",ТекОзн.Пользователь)).Количество()  Тогда
								НеИсполнитель = Истина;
							КонецЕсли;
						Иначе
							НеИсполнитель = Истина;							
						КонецЕсли;
						Если НеИсполнитель Тогда
							ОбластьОзнакомление.Параметры.Комментарии = "" + ОбластьОзнакомление.Параметры.Комментарии + "
							|Задача выполнена вместо: " + Строка(ТекОзн.СубъектСогласования);
						КонецЕсли;
					КонецЕсли;
					Если ЭтоФормДок Тогда //позже
						НовыйПараграфТекстФДИзОбластиТД(ТабДок, ОбластьОзнакомление);
					Иначе
						ТабДок.Вывести(ОбластьОзнакомление);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли; //конец ознакомления
			
			//выводим вопросы по документу
			ВывестиВопросыПоДокументу(ТабДок, ДокументОбъект, Ложь);
			
			//выводим обсуждение по документу
			ВывестиОбсужденияПоДокументу(ТабДок, ДокументОбъект, Ложь);	
					
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НовыйПараграфТекстФДИзОбластиТД(ФормДок, Область, Горизонтально = Истина, ПропускатьНезаполненные = Ложь, ДопПараметры = Неопределено) Экспорт
	МассивПараметров = ПолучитьМассивИменПараметров(Область);
	ТекИндекс = 0;
	
	ДопТекст = "";
	Если Не ДопПараметры = Неопределено Тогда
		Если ДопПараметры.Свойство("ДопТекст") Тогда
			ДопТекст = ДопПараметры.ДопТекст;		
		КонецЕсли;
	КонецЕсли;
	
	Если Горизонтально Тогда
		СобраннаяСтрока	= "";
		ТекКомментарий = "";
		Для каждого ТекПараметр Из Область.Параметры Цикл
			Если ЗначениеЗаполнено(ТекПараметр) ИЛИ НЕ ПропускатьНезаполненные Тогда
				Если МассивПараметров[ТекИндекс] = "Комментарии" Тогда
					ФорматироватьИменаПараметров(МассивПараметров[ТекИндекс]);
					ТекКомментарий = ТекКомментарий + ?(МассивПараметров[ТекИндекс] = "", "", МассивПараметров[ТекИндекс] + ": ") + ТекПараметр + ДопТекст + ", ";
				Иначе
					ФорматироватьИменаПараметров(МассивПараметров[ТекИндекс]);
					СобраннаяСтрока = СобраннаяСтрока + ?(МассивПараметров[ТекИндекс] = "", "", МассивПараметров[ТекИндекс] + ": ") + ТекПараметр + ДопТекст + ", ";
				КонецЕсли;
			КонецЕсли;
			ТекИндекс = ТекИндекс + 1;
		КонецЦикла;
		СобраннаяСтрока = Лев(СобраннаяСтрока, СтрДлина(СобраннаяСтрока)-2);
		НовыйПараграфТекстФД(ФормДок, СобраннаяСтрока, Истина, ДопПараметры);
		Если Не ТекКомментарий = "" Тогда
			НовыйПараграфТекстФД(ФормДок, ТекКомментарий, , Новый Структура("Шрифт", Новый Шрифт(,8)));
		КонецЕсли;
		//НовыйПараграфТекстФД(ФормДок, "---------------------------------",, ДопПараметры);
	Иначе
		Для каждого ТекПараметр Из Область.Параметры Цикл
			ФорматироватьИменаПараметров(МассивПараметров[ТекИндекс]);
			НовыйПараграфТекстФД(ФормДок, МассивПараметров[ТекИндекс] + ": " + ТекПараметр + ДопТекст,, ДопПараметры);
			ТекИндекс = ТекИндекс + 1;
		КонецЦикла; 
	КонецЕсли;
	

КонецПроцедуры

Процедура ФорматироватьИменаПараметров(Строка)
	Строка = СтрЗаменить(Строка, "ПредставлениеПользователя", "");
	Строка = СтрЗаменить(Строка, "ДатаСогласования", "Дата");	
	Строка = СтрЗаменить(Строка, "Отметка", "Результат");
	Строка = СтрЗаменить(Строка, "ТекстПримечанияСогласователя", "");
	Строка = СтрЗаменить(Строка, "ТекстПримечанияАвтора", "Комментарии автора");
	Строка = СтрЗаменить(Строка, "КомментарииАвтора", "");
	Строка = СтрЗаменить(Строка, "ИнициаторЗаявки", "Инициатор");
	Строка = СтрЗаменить(Строка, "Комментарии", "");
КонецПроцедуры

Процедура НовыйПараграфТекстФД(ФормДок, Текст, ШрифтЖирный = Ложь, ДопПараметры = Неопределено) Экспорт
	НовПар = ФормДок.Элементы.Добавить(Тип("КоллекцияЭлементовФорматированногоДокумента"));
	НовТекст = НовПар.Элементы.Добавить(Тип("КоллекцияЭлементовФорматированногоДокумента"));
	НовТекст.Текст = Текст;
	НовТекст.Шрифт = Новый Шрифт(,,ШрифтЖирный);
	
	Если НЕ ДопПараметры = Неопределено Тогда
		Если ДопПараметры.Свойство("ЦветШрифта") Тогда
			НовТекст.ЦветТекста = ДопПараметры.ЦветШрифта;
		КонецЕсли;
		Если ДопПараметры.Свойство("Шрифт") Тогда
			НовТекст.Шрифт = ДопПараметры.Шрифт;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ()

Процедура ДобавитьЭлементыФР(ДокументПолучатель, ИсходныйДокумент) Экспорт
	Для Каждого Параграф Из ИсходныйДокумент.Элементы Цикл
		НовыйПараграф = ДокументПолучатель.Элементы.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйПараграф, Параграф);
		Для Каждого ЭлементПараграфа Из Параграф.Элементы Цикл
			Если Тип(ЭлементПараграфа) = Тип("ТекстФорматированногоДокумента") Тогда
				НовыйТекст = НовыйПараграф.Элементы.Добавить(ЭлементПараграфа.Текст);
				Если НЕ НовыйТекст = Неопределено Тогда
					ЗаполнитьЗначенияСвойств(НовыйТекст, ЭлементПараграфа);
					НовыйТекст.Шрифт = Новый Шрифт(ЭлементПараграфа.Шрифт);
				КонецЕсли;
			ИначеЕсли Тип(ЭлементПараграфа) = Тип("ПереводСтрокиФорматированногоДокумента") Тогда
				НовыйПараграф.Элементы.Добавить(, Тип("ПереводСтрокиФорматированногоДокумента"));
			ИначеЕсли Тип(ЭлементПараграфа) = Тип("КартинкаФорматированногоДокумента") Тогда
				НоваяКартинка = НовыйПараграф.Элементы.Добавить(ЭлементПараграфа.Картинка, Тип("КартинкаФорматированногоДокумента"));
				//НоваяКартинка.НавигационнаяСсылка = ЭлементПараграфа.НавигационнаяСсылка;
				ЗаполнитьЗначенияСвойств(НоваяКартинка, ЭлементПараграфа);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьМассивИменПараметров(ОбластьТабДокумента) Экспорт
    МассивИменПараметров = Новый Массив;
    Для НомерСтроки = 1 По ОбластьТабДокумента.ВысотаТаблицы Цикл
        Для НомерКолонки = 1 По ОбластьТабДокумента.ШиринаТаблицы Цикл
            Ячейка = ОбластьТабДокумента.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
            Если Ячейка.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр Тогда
               //если такого параметра еще нет, то добавим его
 
                Если МассивИменПараметров.Найти(Ячейка.Параметр) = Неопределено тогда
                    МассивИменПараметров.Добавить(Ячейка.Параметр);
                КонецЕсли;
            ИначеЕсли Ячейка.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Шаблон Тогда
               //выделим все параметры в шаблоне в отдельные строки
 
                ТекстШаблона = Ячейка.Текст;
                ТекстШаблона = СтрЗаменить(ТекстШаблона, "[", Символы.ПС + "[");
                ТекстШаблона = СтрЗаменить(ТекстШаблона, "]", Символы.ПС);
                Для Счетчик = 1 По СтрЧислоСтрок(ТекстШаблона) Цикл
                    ТекСтрока = СтрПолучитьСтроку(ТекстШаблона, Счетчик);
                    Если Лев(ТекСтрока, 1) = "[" тогда
                        ИмяПараметра = Сред(ТекСтрока, 2);
                       //если такого параметра еще нет, то добавим его
 
                        Если МассивИменПараметров.Найти(ИмяПараметра) = Неопределено тогда
                            МассивИменПараметров.Добавить(ИмяПараметра);
                        КонецЕсли;
                    КонецЕсли;
                КонецЦикла; 
            КонецЕсли//конец проверки, что в ячейке - текст, параметр или шаблон
 
        КонецЦикла//конец обхода по колонкам
 
    КонецЦикла;//конец обхода по строкам
 
    Возврат МассивИменПараметров;
КонецФункции

Процедура ВывестиВопросыПоДокументу(ТабДок, ДокументОбъект, ГруппаРазвернута, КоличествоСтрок = 0) Экспорт
	
	Макет = ПолучитьОбщийМакет("РезультатыСогласования");
	
	ЭтоФормДок = ТипЗнч(ТабДок) = Тип("ФорматированныйДокумент");
	
	//Выведим историю переписки
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БП_ОповещениеСписокИсполнителей.Ссылка.Автор КАК Автор,
	|	БП_ОповещениеСписокИсполнителей.Ссылка.Описание КАК Описание,
	|	БП_ОповещениеСписокИсполнителей.Исполнитель,
	|	БП_ОповещениеСписокИсполнителей.Ссылка.Дата КАК Дата
	|ИЗ
	|	Документ.БП_Оповещение.СписокИсполнителей КАК БП_ОповещениеСписокИсполнителей
	|ГДЕ
	|	БП_ОповещениеСписокИсполнителей.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И БП_ОповещениеСписокИсполнителей.Ссылка.Документ В(&Документ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата
	|АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("Документ", ДокументОбъект);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	
	КоличествоСтрок = Выборка.Количество();
	
	Если ТабДок = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Если ЭтоФормДок Тогда //позже
	Иначе
		ТабДок.НачатьГруппуСтрок("Вопросы по документу", ГруппаРазвернута);
	КонецЕсли;
	Если Выборка.Количество() Тогда
		
		
		ШапкаИстория = Макет.ПолучитьОбласть("ШапкаИстория");
		ШапкаИстория.Параметры.ВидОбсуждения = "Вопросы по документу";
		ШапкаИстория.Параметры.КоличествоВопросов = " (" + Строка(Выборка.Количество()) + ")";
		//ШапкаИстория.Параметры.КоличествоВопросовРасш = Новый Структура("РазвернутьСвернутьГруппу, ЗаявкаНаОплатуПечать, Документ", Ложь, Истина, ДокументОбъект);
		
		ШапкаИстория.Вывод = ИспользованиеВывода.Запретить;
		Если ГруппаРазвернута Тогда
			ШапкаИстория.Параметры.Ссылка = ДокументОбъект[0];		
		КонецЕсли;
		Если ЭтоФормДок Тогда //позже
		Иначе
			ТабДок.Вывести(ШапкаИстория);
		КонецЕсли;	
		СтрокаИстории = Макет.ПолучитьОбласть("СтрокаИстория");
		Пока Выборка.Следующий() Цикл
			СтрокаИстории.Параметры.Автор 		= Выборка.Автор;
			СтрокаИстории.Параметры.Дата 		= Выборка.Дата;
			СтрокаИстории.Параметры.Описание 	= Выборка.Описание;
			Если ЭтоФормДок Тогда //позже
			Иначе
				ТабДок.Вывести(СтрокаИстории);
			КонецЕсли;
		КонецЦикла;
		Если ЭтоФормДок Тогда //позже
		Иначе
			ТабДок.ЗакончитьГруппуСтрок();
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ВывестиЗаметкиПоДокументу(ТабДок, ДокументОбъект, ГруппаРазвернута, КоличествоСтрок = 0) Экспорт
	
	Макет = ПолучитьОбщийМакет("РезультатыСогласования");
	
	//Выведим историю переписки
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Заметки.ТекстСодержания КАК Описание,
	|	Заметки.Автор КАК Автор,
	|	Заметки.ДатаИзменения КАК Дата
	|ИЗ
	|	Справочник.Заметки КАК Заметки
	|ГДЕ
	|	Заметки.Предмет В (&Документ)";
	Запрос.УстановитьПараметр("Документ", ДокументОбъект);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	
	КоличествоСтрок = Выборка.Количество();
	
	Если ТабДок = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ТабДок.НачатьГруппуСтрок("Заметки по документу", ГруппаРазвернута);
	
	Если Выборка.Количество() Тогда
		
		
		ШапкаИстория = Макет.ПолучитьОбласть("ШапкаИстория");
		ШапкаИстория.Параметры.ВидОбсуждения = "Заметки по документу";
		ШапкаИстория.Параметры.КоличествоВопросов = " (" + Строка(Выборка.Количество()) + ")";
		//ШапкаИстория.Параметры.КоличествоВопросовРасш = Новый Структура("РазвернутьСвернутьГруппу, ЗаявкаНаОплатуПечать, Документ", Ложь, Истина, ДокументОбъект);
		
		ШапкаИстория.Вывод = ИспользованиеВывода.Запретить;
		Если ГруппаРазвернута Тогда
			ШапкаИстория.Параметры.Ссылка = ДокументОбъект[0];		
		КонецЕсли;
		ТабДок.Вывести(ШапкаИстория);
		
		СтрокаИстории = Макет.ПолучитьОбласть("СтрокаИстория");
		Пока Выборка.Следующий() Цикл
			СтрокаИстории.Параметры.Автор 		= Выборка.Автор;
			СтрокаИстории.Параметры.Дата 		= Выборка.Дата;
			СтрокаИстории.Параметры.Описание 	= Выборка.Описание;
			ТабДок.Вывести(СтрокаИстории);
		КонецЦикла;
		ТабДок.ЗакончитьГруппуСтрок();
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ВывестиОбсужденияПоДокументу(ТабДок, ДокументОбъект, ГруппаРазвернута, КоличествоСтрок = 0) Экспорт
	
	Макет = ПолучитьОбщийМакет("РезультатыСогласования");
	
	ЭтоФормДок = ТипЗнч(ТабДок) = Тип("ФорматированныйДокумент");
	
	//Выведим историю переписки
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Ч_СообщенияЧата.Автор,
	|	Ч_СообщенияЧата.ДатаВремя КАК Дата,
	|	Ч_СообщенияЧата.Текст КАК Описание
	|ИЗ
	|	РегистрСведений.Ч_СообщенияЧата КАК Ч_СообщенияЧата
	|ГДЕ
	|	Ч_СообщенияЧата.Документ В(&Документ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата
	|АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("Документ", ДокументОбъект);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	
	КоличествоСтрок = Выборка.Количество();
	
	Если ТабДок = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Если ЭтоФормДок Тогда //позже
	Иначе
		ТабДок.НачатьГруппуСтрок("Обсуждение документа", ГруппаРазвернута);
	КонецЕсли;	
	Если Выборка.Количество() Тогда
		
		
		ШапкаИстория = Макет.ПолучитьОбласть("ШапкаИстория");
		ШапкаИстория.Параметры.ВидОбсуждения = "Обсуждение документа";
		ШапкаИстория.Параметры.КоличествоВопросов = " (" + Строка(Выборка.Количество()) + ")";
		//ШапкаИстория.Параметры.КоличествоВопросовРасш = Новый Структура("РазвернутьСвернутьГруппу, ЗаявкаНаОплатуПечать, Документ", Ложь, Истина, ДокументОбъект);
		
		ШапкаИстория.Вывод = ИспользованиеВывода.Запретить;
		Если ГруппаРазвернута Тогда
			ШапкаИстория.Параметры.Ссылка =  ДокументОбъект[0];		
		КонецЕсли;
		Если ЭтоФормДок Тогда //позже
		Иначе
			ТабДок.Вывести(ШапкаИстория);
		КонецЕсли;
		СтрокаИстории = Макет.ПолучитьОбласть("СтрокаИстория");
		Пока Выборка.Следующий() Цикл
			СтрокаИстории.Параметры.Автор 		= Выборка.Автор;
			СтрокаИстории.Параметры.Дата 		= Выборка.Дата;
			СтрокаИстории.Параметры.Описание 	= Выборка.Описание;
			Если ЭтоФормДок Тогда //позже
			Иначе
				ТабДок.Вывести(СтрокаИстории);
			КонецЕсли;
		КонецЦикла;
		Если ЭтоФормДок Тогда //позже
		Иначе
			ТабДок.ЗакончитьГруппуСтрок();
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ВывестиРанееВыполненныеВамиЗадачиПоДокументу(ТабДок, ДокументОбъект, ГруппаРазвернута, КоличествоСтрок = 0, ТекстОтвета = "", ТекПользователь = Неопределено) Экспорт
	
	Если ТекПользователь = Неопределено Тогда
		ТекПользователь = ПараметрыСеанса.ТекущийПользователь;	
	КонецЕсли;
	МассивПользователей = БПСервер.ПолучитьМассивПользователей(ТекПользователь);	
	
	МассивТочекДляПроверкиПовтора = Новый Массив;	
	МассивТочекДляПроверкиПовтора.Добавить(БизнесПроцессы.Согласование1.ТочкиМаршрута.Действие3);
	МассивТочекДляПроверкиПовтора.Добавить(БизнесПроцессы.Согласование1.ТочкиМаршрута.Действие2);
	МассивТочекДляПроверкиПовтора.Добавить(БизнесПроцессы.Согласование1.ТочкиМаршрута.Действие4);
	МассивТочекДляПроверкиПовтора.Добавить(БизнесПроцессы.Согласование1.ТочкиМаршрута.Действие5);
	МассивТочекДляПроверкиПовтора.Добавить(БизнесПроцессы.Согласование2.ТочкиМаршрута.Действие2);
	МассивТочекДляПроверкиПовтора.Добавить(БизнесПроцессы.Согласование2.ТочкиМаршрута.Действие3);
	МассивТочекДляПроверкиПовтора.Добавить(БизнесПроцессы.Согласование2.ТочкиМаршрута.Действие4);
	МассивТочекДляПроверкиПовтора.Добавить(БизнесПроцессы.СогласованиеОбщее.ТочкиМаршрута.Действие2);
	МассивТочекДляПроверкиПовтора.Добавить(БизнесПроцессы.СогласованиеОбщее.ТочкиМаршрута.Действие3);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Задача.Ссылка
	               |ИЗ
	               |	Задача.Задача КАК Задача
	               |ГДЕ
	               |	Задача.Выполнена = ИСТИНА
	               |	И Задача.Заявка = &Заявка
	               |	И Задача.ПометкаУдаления = ЛОЖЬ
	               |	И (Задача.Пользователь В (&ПользователиСписок)
	               |			ИЛИ Задача.Исполнитель В (&ПользователиСписок))
	               |	И Задача.ТочкаМаршрута В(&СписокТочекМаршрута)";
	
	Запрос.УстановитьПараметр("Заявка", ДокументОбъект);
	Запрос.УстановитьПараметр("ПользователиСписок", МассивПользователей);
	Запрос.УстановитьПараметр("СписокТочекМаршрута", МассивТочекДляПроверкиПовтора);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();
	
	Если Выборка.Количество() Тогда
		ТекстОтвета = "Вы уже согласовывали этот документ";
	    Возврат;
	КонецЕсли;
	
	//ВывестиОтчетПоВыполнениюЗадачДокумента(ТабДок, Выборка.ВыгрузитьКолонку("Ссылка"));

	
	//Пока Выборка.Следующий() Цикл
	//	
	//	
	//	
	//КонецЦикла;
	
	
КонецПроцедуры

Процедура ВывестиОтчетПоВыполнениюЗадачДокумента(ТабДок, ДокументОбъект) Экспорт
	
	БизнесПроцессы.СогласованиеОбщее.ОтчетОВыполнении(ТабДок, ДокументОбъект);
	
КонецПроцедуры

Функция РасчетРабочейРазницы(Дата1, Дата2, ВыборкаДат) Экспорт
	
	
	//Срок = Дата2;
	//
	//Если (Час(Срок) > 18 И Час(Срок) < 24) ИЛИ (Час(Срок) >= 0 И Час(Срок) < 9) Тогда //конец дня
	//	Срок = Срок + 15 * 60 * 60; //перенос на след день		
	//КонецЕсли;
	//
	////проверка выходного дня
	//РабочийДень = Ложь;
	//Пока НЕ РабочийДень = Истина Цикл
	//	ГодКалендаря = Год(Срок);		
	//	Календарь = Справочники.Календари.НайтиПоНаименованию(Формат(ГодКалендаря,"ЧГ=0"), Истина);
	//	РабочийДень = БПСервер.ПолучитьПризнакРабочегоДня(Календарь,ГодКалендаря,Срок);
	//	Если РабочийДень = Неопределено Тогда
	//		Прервать;	
	//	КонецЕсли;
	//	Срок = Срок + 24 * 60 * 60;
	//КонецЦикла;
	//Задача.СрокВыполнения = Срок;
	
	Если ЗначениеЗаполнено(Дата2) И ЗначениеЗаполнено(Дата1) И НЕ Дата1 > Дата2 Тогда
		
		
		День = День(Дата2);
		Час = Час(Дата2);
		
		ГодКалендаря = Год(Дата1);
		Календарь = Справочники.Календари.НайтиПоНаименованию(Формат(ГодКалендаря,"ЧГ=0"), Истина);
		РабочийДень = Истина;
		
		
		//Запрос = Новый запрос;
		//Запрос.Текст = "ВЫБРАТЬ
		//               |	КалендарныеГрафики.ДеньВключенВГрафик,
		//               |	КалендарныеГрафики.Год,
		//               |	КалендарныеГрафики.Календарь,
		//               |	КалендарныеГрафики.ДатаГрафика
		//               |ИЗ
		//               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		//               |ГДЕ
		//               |	КалендарныеГрафики.Календарь = &Календарь
		//               |	И КалендарныеГрафики.Год = &Год";
		//Запрос.УстановитьПараметр("Календарь",Календарь);
		//Запрос.УстановитьПараметр("Год", ГодКалендаря);
		////Запрос.УстановитьПараметр("ДатаГрафика",НачалоДня(ДатаГрафика));
		//ВыборкаДат = Запрос.Выполнить().Выгрузить();
		
		
		
		КоличествоСекунд = 1;
		Для ТекСекунда = 1 По (Дата2 - Дата1) Цикл
			ТекДата = Дата1 + ТекСекунда;
			Если НЕ День(ТекДата) = День Тогда
				День = День(ТекДата);
				ГодКалендаря = Год(ТекДата);
				ОтобранныеСтроки = ВыборкаДат.НайтиСтроки(Новый Структура("Год, Календарь, ДатаГрафика", ГодКалендаря, Календарь, НачалоДня(ТекДата)));
				Если ОтобранныеСтроки.Количество() Тогда
					РабочийДень = ОтобранныеСтроки[0].ДеньВключенВГрафик;
				Иначе
					Календарь = Справочники.Календари.НайтиПоНаименованию(Формат(ГодКалендаря,"ЧГ=0"), Истина);
					РабочийДень = БПСервер.ПолучитьПризнакРабочегоДня(Календарь,ГодКалендаря,НачалоДня(ТекДата));
				КонецЕсли;
				
				Если РабочийДень = Неопределено Тогда
					РабочийДень = Истина;	
				КонецЕсли;
			КонецЕсли;
			Если РабочийДень Тогда
				НачалоРабДня = Макс(ТекДата, НачалоДня(ТекДата) + 9 * 60 * 60);
				КонецРабДня = Мин(Дата2, НачалоДня(ТекДата) + 18 * 60 * 60);
				Обед = 0;
				Если Час(КонецРабДня) >= 13 И Час(НачалоРабДня) < 13 Тогда //обед
					Обед = 1;
				КонецЕсли;
				КоличествоСекунд = КоличествоСекунд + (КонецРабДня - НачалоРабДня - Обед * 60 * 60);
			КонецЕсли;
			ТекСекунда = ТекСекунда + ((НачалоДня(ТекДата + 24*60*60) + 9 * 60*60) - ТекДата) - 1;
			
		КонецЦикла; 
		
		
		ДлительностьЧас = Цел(КоличествоСекунд / 60 / 60);
		ДлительностьМин = Окр((КоличествоСекунд / 60 / 60 - Цел(КоличествоСекунд / 60 / 60)) * 60, 0);
		
		Возврат Строка(ДлительностьЧас) + " ч " + Строка(ДлительностьМин) + " мин";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	
	
	
КонецФункции // ()

Функция ПолучитьВсеДатыКалендаря() Экспорт

		//	ГодКалендаря = Год(Дата1);
		//Календарь = Справочники.Календари.НайтиПоНаименованию(Формат(ГодКалендаря,"ЧГ=0"), Истина);
		//РабочийДень = БПСервер.ПолучитьПризнакРабочегоДня(Календарь,ГодКалендаря,Дата1);
		
		
		Запрос = Новый запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	КалендарныеГрафики.ДеньВключенВГрафик,
		               |	КалендарныеГрафики.Год,
		               |	КалендарныеГрафики.Календарь,
		               |	КалендарныеГрафики.ДатаГрафика
		               |ИЗ
		               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики";
		//Запрос.УстановитьПараметр("Календарь",Календарь);
		//Запрос.УстановитьПараметр("Год", ГодКалендаря);
		//Запрос.УстановитьПараметр("ДатаГрафика",НачалоДня(ДатаГрафика));
		ВыборкаДат = Запрос.Выполнить().Выгрузить();
		Возврат ВыборкаДат; 

КонецФункции // ()

#КонецОбласти

#Область РаботаСМаршрутами

Процедура ДобавитьОзнакомителей(БП, ТЗОзнакомление, ТЗОзнакомлениеПервоначальное) Экспорт
	
	Запрос = Новый Запрос;
	Текст = 
	"ВЫБРАТЬ
	|	ТЗОзнакомлениеПервоначальное.СубъектСогласования
	|ПОМЕСТИТЬ ВТ_Первоначальное
	|ИЗ
	|	&ТЗОзнакомлениеПервоначальное КАК ТЗОзнакомлениеПервоначальное
	|ГДЕ
	|	НЕ ТЗОзнакомлениеПервоначальное.Согласовано
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗОзнакомление.СубъектСогласования
	|ПОМЕСТИТЬ ВТ_Ознакомление
	|ИЗ
	|	&ТЗОзнакомление КАК ТЗОзнакомление
	|ГДЕ
	|	НЕ ТЗОзнакомление.Согласовано
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Ознакомление.СубъектСогласования
	|ИЗ
	|	ВТ_Ознакомление КАК ВТ_Ознакомление
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Первоначальное КАК ВТ_Первоначальное
	|		ПО (ЛОЖЬ)
	|ГДЕ
	|	НЕ ВТ_Ознакомление.СубъектСогласования В
	|				(ВЫБРАТЬ
	|					ВТ_Первоначальное.СубъектСогласования
	|				ИЗ
	|					ВТ_Первоначальное КАК ВТ_Первоначальное)";
	Если ТипЗнч(БП) = Тип("БизнесПроцессОбъект.Согласование1") ИЛИ ТипЗнч(БП) = Тип("БизнесПроцессОбъект.СогласованиеОбщее") ИЛИ ТипЗнч(БП) = Тип("БизнесПроцессОбъект.ЗаявкиАдминистратору") Тогда
		ТекстЗапроса = СтрЗаменить(Текст, "СубъектСогласования", "Пользователь"); 
		Текст = СтрЗаменить(ТекстЗапроса, "Согласовано", "Оповещен"); 
	КонецЕсли;
	Запрос.Текст = Текст;
	Запрос.УстановитьПараметр("ТЗОзнакомлениеПервоначальное", ТЗОзнакомлениеПервоначальное); 
	Запрос.УстановитьПараметр("ТЗОзнакомление", ТЗОзнакомление); 
	Выборка = Запрос.Выполнить().Выбрать();  
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(БП) = Тип("БизнесПроцессОбъект.Согласование1") ИЛИ ТипЗнч(БП) = Тип("БизнесПроцессОбъект.СогласованиеОбщее") ИЛИ ТипЗнч(БП) = Тип("БизнесПроцессОбъект.ЗаявкиАдминистратору") Тогда
			НоваяСтрока = БП.ДопОповещение.Добавить();
		Иначе
			НоваяСтрока = БП.Адресаты.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка); 
	КонецЦикла;
	
	//удалим из ТЧ лишних
	Запрос = Новый Запрос;
	Текст = 
	"ВЫБРАТЬ
	|	ТЗОзнакомлениеПервоначальное.СубъектСогласования
	|ПОМЕСТИТЬ ВТ_Первоначальное
	|ИЗ
	|	&ТЗОзнакомлениеПервоначальное КАК ТЗОзнакомлениеПервоначальное
	|ГДЕ
	|	НЕ ТЗОзнакомлениеПервоначальное.Согласовано
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗОзнакомление.СубъектСогласования
	|ПОМЕСТИТЬ ВТ_Ознакомление
	|ИЗ
	|	&ТЗОзнакомление КАК ТЗОзнакомление
	|ГДЕ
	|	НЕ ТЗОзнакомление.Согласовано
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Первоначальное.СубъектСогласования
	|ИЗ
	|	ВТ_Первоначальное КАК ВТ_Первоначальное
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Ознакомление КАК ВТ_Ознакомление
	|		ПО (ЛОЖЬ)
	|ГДЕ
	|	НЕ ВТ_Первоначальное.СубъектСогласования В
	|				(ВЫБРАТЬ
	|					ВТ_Ознакомление.СубъектСогласования
	|				ИЗ
	|					ВТ_Ознакомление КАК ВТ_Ознакомление)";
	Если ТипЗнч(БП) = Тип("БизнесПроцессОбъект.Согласование1") ИЛИ ТипЗнч(БП) = Тип("БизнесПроцессОбъект.СогласованиеОбщее") ИЛИ ТипЗнч(БП) = Тип("БизнесПроцессОбъект.ЗаявкиАдминистратору") Тогда
		ТекстЗапроса = СтрЗаменить(Текст, "СубъектСогласования", "Пользователь"); 
		Текст = СтрЗаменить(ТекстЗапроса, "Согласовано", "Оповещен"); 
	КонецЕсли;
	Запрос.Текст = Текст;
	Запрос.УстановитьПараметр("ТЗОзнакомлениеПервоначальное", ТЗОзнакомлениеПервоначальное); 
	Запрос.УстановитьПараметр("ТЗОзнакомление", ТЗОзнакомление); 
	Выборка = Запрос.Выполнить().Выбрать();  
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(БП) = Тип("БизнесПроцессОбъект.Согласование1") ИЛИ ТипЗнч(БП) = Тип("БизнесПроцессОбъект.СогласованиеОбщее")  ИЛИ ТипЗнч(БП) = Тип("БизнесПроцессОбъект.ЗаявкиАдминистратору") Тогда
			УдаляемыеСтроки = БП.ДопОповещение.НайтиСтроки(Новый Структура("Пользователь", Выборка.Пользователь));
			Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
				БП.ДопОповещение.Удалить(УдаляемаяСтрока);	
			КонецЦикла;	
		Иначе
			УдаляемыеСтроки = БП.Адресаты.НайтиСтроки(Новый Структура("СубъектСогласования", Выборка.СубъектСогласования));
			Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
				БП.Адресаты.Удалить(УдаляемаяСтрока);	
			КонецЦикла;	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры	

Процедура ДобавитьСогласователей(БП, ТЗСогласование, ТЗСогласованиеПервоначальное) Экспорт
	
	//заполняем индексы
	Мас = Новый Массив;
	Мас.Добавить(Тип("Число"));
	ТЗСогласование.Колонки.Добавить("Индекс2", Новый ОписаниеТипов(Мас));
	Для каждого ТекСтрока Из ТЗСогласование Цикл
		ТекСтрока.Индекс2 = ТЗСогласование.Индекс(ТекСтрока);	
	КонецЦикла; 
	
	//ищем новые строки
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СогласованиеПервоначальное.СубъектСогласования
	|ПОМЕСТИТЬ ВТ_Первоначальное
	|ИЗ
	|	&СогласованиеПервоначальное КАК СогласованиеПервоначальное
	|ГДЕ
	|	НЕ СогласованиеПервоначальное.Пройден
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Согласование.СубъектСогласования,
	|	Согласование.Индекс2
	|ПОМЕСТИТЬ ВТ_Согласование
	|ИЗ
	|	&Согласование КАК Согласование
	|ГДЕ
	|	НЕ Согласование.Пройден
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Согласование.СубъектСогласования,
	|	ВТ_Согласование.Индекс2
	|ИЗ
	|	ВТ_Согласование КАК ВТ_Согласование
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Первоначальное КАК ВТ_Первоначальное
	|		ПО (ЛОЖЬ)
	|ГДЕ
	|	НЕ ВТ_Согласование.СубъектСогласования В
	|				(ВЫБРАТЬ
	|					ВТ_Первоначальное.СубъектСогласования
	|				ИЗ
	|					ВТ_Первоначальное КАК ВТ_Первоначальное)";
	Запрос.УстановитьПараметр("СогласованиеПервоначальное", ТЗСогласованиеПервоначальное); 
	Запрос.УстановитьПараметр("Согласование", ТЗСогласование); 
	Выборка = Запрос.Выполнить().Выбрать();  
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = БП.ДопСогласование.Вставить(Выборка.Индекс2);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка); 
	КонецЦикла;
	
	//удалим из ТЧ лишних
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СогласованиеПервоначальное.СубъектСогласования
	|ПОМЕСТИТЬ ВТ_Первоначальное
	|ИЗ
	|	&СогласованиеПервоначальное КАК СогласованиеПервоначальное
	|ГДЕ
	|	НЕ СогласованиеПервоначальное.Пройден
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Согласование.СубъектСогласования
	|ПОМЕСТИТЬ ВТ_Согласование
	|ИЗ
	|	&Согласование КАК Согласование
	|ГДЕ
	|	НЕ Согласование.Пройден
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Первоначальное.СубъектСогласования
	|ИЗ
	|	ВТ_Первоначальное КАК ВТ_Первоначальное
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Согласование КАК ВТ_Согласование
	|		ПО (ЛОЖЬ)
	|ГДЕ
	|	НЕ ВТ_Первоначальное.СубъектСогласования В
	|				(ВЫБРАТЬ
	|					ВТ_Согласование.СубъектСогласования
	|				ИЗ
	|					ВТ_Согласование КАК ВТ_Согласование)";
	Запрос.УстановитьПараметр("СогласованиеПервоначальное", ТЗСогласованиеПервоначальное); 
	Запрос.УстановитьПараметр("Согласование", ТЗСогласование); 
	Выборка = Запрос.Выполнить().Выбрать();  
	Пока Выборка.Следующий() Цикл
		УдаляемыеСтроки = БП.ДопСогласование.НайтиСтроки(Новый Структура("СубъектСогласования", Выборка.СубъектСогласования));
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			БП.ДопСогласование.Удалить(УдаляемаяСтрока);	
		КонецЦикла;	
	КонецЦикла;
	
КонецПроцедуры	

Процедура ДобавитьИсполнителей(БП, ТЗИсполнение, ТЗИсполнениеПервоначальное) Экспорт
	
	//заполняем индексы
	Мас = Новый Массив;
	Мас.Добавить(Тип("Число"));
	ТЗИсполнение.Колонки.Добавить("Индекс2", Новый ОписаниеТипов(Мас));
	Для каждого ТекСтрока Из ТЗИсполнение Цикл
		ТекСтрока.Индекс2 = ТЗИсполнение.Индекс(ТекСтрока);	
	КонецЦикла; 
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсполнениеПервоначальное.Исполнитель
	|ПОМЕСТИТЬ ВТ_Первоначальное
	|ИЗ
	|	&ИсполнениеПервоначальное КАК ИсполнениеПервоначальное
	|ГДЕ
	|	НЕ ИсполнениеПервоначальное.Пройдено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Исполнение.Исполнитель,
	|	Исполнение.Индекс2
	|ПОМЕСТИТЬ ВТ_Исполнение
	|ИЗ
	|	&Исполнение КАК Исполнение
	|ГДЕ
	|	НЕ Исполнение.Пройдено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Исполнение.Исполнитель,
	|	ВТ_Исполнение.Индекс2
	|ИЗ
	|	ВТ_Исполнение КАК ВТ_Исполнение
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Первоначальное КАК ВТ_Первоначальное
	|		ПО (ЛОЖЬ)
	|ГДЕ
	|	НЕ ВТ_Исполнение.Исполнитель В
	|				(ВЫБРАТЬ
	|					ВТ_Первоначальное.Исполнитель
	|				ИЗ
	|					ВТ_Первоначальное КАК ВТ_Первоначальное)";
	Запрос.УстановитьПараметр("ИсполнениеПервоначальное", ТЗИсполнениеПервоначальное); 
	Запрос.УстановитьПараметр("Исполнение", ТЗИсполнение); 
	Выборка = Запрос.Выполнить().Выбрать();  
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = БП.ДопИсполнение.Вставить(Выборка.Индекс2);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка); 
	КонецЦикла;
	
	//удалим из ТЧ лишних
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсполнениеПервоначальное.Исполнитель
	|ПОМЕСТИТЬ ВТ_Первоначальное
	|ИЗ
	|	&ИсполнениеПервоначальное КАК ИсполнениеПервоначальное
	|ГДЕ
	|	НЕ ИсполнениеПервоначальное.Пройдено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Исполнение.Исполнитель
	|ПОМЕСТИТЬ ВТ_Исполнение
	|ИЗ
	|	&Исполнение КАК Исполнение
	|ГДЕ
	|	НЕ Исполнение.Пройдено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Первоначальное.Исполнитель
	|ИЗ
	|	ВТ_Первоначальное КАК ВТ_Первоначальное
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Исполнение КАК ВТ_Исполнение
	|		ПО (ЛОЖЬ)
	|ГДЕ
	|	НЕ ВТ_Первоначальное.Исполнитель В
	|				(ВЫБРАТЬ
	|					ВТ_Исполнение.Исполнитель
	|				ИЗ
	|					ВТ_Исполнение КАК ВТ_Исполнение)";
	Запрос.УстановитьПараметр("ИсполнениеПервоначальное", ТЗИсполнениеПервоначальное); 
	Запрос.УстановитьПараметр("Исполнение", ТЗИсполнение); 
	Выборка = Запрос.Выполнить().Выбрать();  
	Пока Выборка.Следующий() Цикл
		УдаляемыеСтроки = БП.ДопИсполнение.НайтиСтроки(Новый Структура("Исполнитель", Выборка.Исполнитель));
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			БП.ДопИсполнение.Удалить(УдаляемаяСтрока);	
		КонецЦикла;	
	КонецЦикла;
	
КонецПроцедуры	

//Процедура добавляет пользователя в маршрту бизнес-процесса по его представлению(должность, основная должность, пользователь)
//БП - ссылка на бизнес-процесс
//ИтяТЧ - имя табличной части БП
//ДокументОснование - документ, являющийся инициатором бизес-процесса
//Предприятие - предприятие основной должности пользователя
//Дата - дата актуальности должности пользователя
Процедура ДобавитьРецензентовВМаршрут(БП, ИмяТЧ, ДокументОснование, Предприятие = Неопределено, Дата = Неопределено, ТипБюджета = Неопределено) Экспорт
	
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
	
	ТаблицаПользователей = Новый ТаблицаЗначений;
	
	МассТипво = Новый Массив;
	МассТипво.Добавить(Тип("Число"));
	ТипЧ = Новый ОписаниеТипов(МассТипво);

	ТаблицаПользователей.Колонки.Добавить("НомерСтроки", ТипЧ);
	ТаблицаПользователей.Колонки.Добавить("ТекПользователь");
	ТаблицаПользователей.Колонки.Добавить("Маршрут"); 
	ТаблицаПользователей.Колонки.Добавить("ДокументОбязательныйКПрикреплению");
	ТаблицаПользователей.Колонки.Добавить("Действие");
	ТаблицаПользователей.Колонки.Добавить("РольПользователя"); 
	ТаблицаПользователей.Колонки.Добавить("ИДГруппы"); 
	ТаблицаПользователей.Колонки.Добавить("ТипГруппы");
	ТаблицаПользователей.Колонки.Добавить("Уровень"); 
	ТаблицаПользователей.Колонки.Добавить("Обязателен"); 
	ТаблицаПользователей.Колонки.Добавить("МожетРедактировать"); 
	ТаблицаПользователей.Колонки.Добавить("ВремяНаВыполнение"); 
	ТаблицаПользователей.Колонки.Добавить("СрокВыполнения"); 
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	МаршрутыДвиженияЗаявок.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.МаршрутыДвиженияЗаявок КАК МаршрутыДвиженияЗаявок
		|ГДЕ
		|	МаршрутыДвиженияЗаявок.Предопределенный = ИСТИНА";
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Количество() Тогда
			Пока Выборка.Следующий() Цикл
				ОсновнойМаршрут = Выборка.Ссылка;
			КонецЦикла;
		Иначе
			ОсновнойМаршрут = Справочники.МаршрутыДвиженияЗаявок.НайтиПоНаименованию("Основной маршрут", Истина);
		КонецЕсли;
		
				
		//добавим учетчика, если кредиторка
		ЗапросПредприятия = Новый Запрос;
		ЗапросПредприятия.Текст = 
		"ВЫБРАТЬ
		|	Д_ЗаявкаНаОплату.Предприятие
		|ИЗ
		|	Документ.Д_ЗаявкаНаОплату КАК Д_ЗаявкаНаОплату
		|ГДЕ
		|	Д_ЗаявкаНаОплату.Ссылка = &Ссылка
		|	И НЕ Д_ЗаявкаНаОплату.ПризнакПредоплаты";
		ЗапросПредприятия.УстановитьПараметр("Ссылка", ДокументОснование);
		ВыборкаПредприятия = ЗапросПредприятия.Выполнить().Выбрать();
		Пока ВыборкаПредприятия.Следующий() Цикл
			Пользователь = ПолучитьСотрудникаПоОсновнойДолжности(ВыборкаПредприятия.Предприятие, Перечисления.ОсновныеДолжностиПредприятия.Учетчик);
			Если Не Пользователь.Пустая() Тогда
				СтрокаПоПользователям = ТаблицаПользователей.Добавить();
				СтрокаПоПользователям.ТекПользователь = Пользователь;
				СтрокаПоПользователям.НомерСтроки     = "0а";
				СтрокаПоПользователям.Маршрут 		  = ОсновнойМаршрут;
			КонецЕсли;	
		КонецЦикла;		
		
		//добавим финансистов, если предприятия в ТЧ и шапке отличаются
		ЗапросПредприятия = Новый Запрос;
		ЗапросПредприятия.Текст = 
		"ВЫБРАТЬ
		|	Д_ЗаявкаНаОплатуЗаявкаБезнал.ЦФО
		|ИЗ
		|	Документ.Д_ЗаявкаНаОплату.ЗаявкаБезнал КАК Д_ЗаявкаНаОплатуЗаявкаБезнал
		|ГДЕ
		|	НЕ Д_ЗаявкаНаОплатуЗаявкаБезнал.ЦФО = Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка.Предприятие
		|	И Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка = &Ссылка";
		ЗапросПредприятия.УстановитьПараметр("Ссылка", ДокументОснование);
		ВыборкаПредприятия = ЗапросПредприятия.Выполнить().Выбрать();
		Пока ВыборкаПредприятия.Следующий() Цикл
			Пользователь = ПолучитьСотрудникаПоОсновнойДолжности(ВыборкаПредприятия.ЦФО, Перечисления.ОсновныеДолжностиПредприятия.Финансист);
			Если Не Пользователь.Пустая() Тогда
				СтрокаПоПользователям = ТаблицаПользователей.Добавить();
				СтрокаПоПользователям.ТекПользователь = Пользователь;
				СтрокаПоПользователям.НомерСтроки     = "0б";
				СтрокаПоПользователям.Маршрут 		  = ОсновнойМаршрут;
			КонецЕсли;	
		КонецЦикла;	
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Д_ЗаявкаНаОплатуЗаявкаБезнал.ЦФО КАК ЦФО,
		|	Д_ЗаявкаНаОплатуЗаявкаБезнал.СтатьяДДС КАК СтатьяДДС,
		|	Д_ЗаявкаНаОплатуЗаявкаБезнал.НомерСтроки КАК НомерСтроки,
		|	Д_ЗаявкаНаОплатуЗаявкаБезнал.Подразделение КАК Подразделение,
		|	Д_ЗаявкаНаОплатуЗаявкаБезнал.ВыдачаВПодОтчет КАК ВыдачаВПодОтчет,
		|	Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка.ТипИсточника КАК ТипИсточника
		|ПОМЕСТИТЬ ВТ_ДанныеЗаявки
		|ИЗ
		|	Документ.Д_ЗаявкаНаОплату.ЗаявкаБезнал КАК Д_ЗаявкаНаОплатуЗаявкаБезнал
		|ГДЕ
		|	Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Д_ЗаявкаНаФинансирование.Предприятие,
		|	Д_ЗаявкаНаФинансирование.СтатьяДДС,
		|	1,
		|	Д_ЗаявкаНаФинансирование.Подразделение,
		|	Д_ЗаявкаНаФинансирование.ВыдачаВПодОтчет,
		|	Д_ЗаявкаНаФинансирование.Ссылка.ТипИсточника
		|ИЗ
		|	Документ.Д_ЗаявкаНаФинансирование КАК Д_ЗаявкаНаФинансирование
		|ГДЕ
		|	Д_ЗаявкаНаФинансирование.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявок.Ссылка КАК Ссылка,
		|	МаршрутыДвиженияЗаявок.ВерсияДанных КАК ВерсияДанных,
		|	МаршрутыДвиженияЗаявок.ПометкаУдаления КАК ПометкаУдаления,
		|	МаршрутыДвиженияЗаявок.Предопределенный КАК Предопределенный,
		|	МаршрутыДвиженияЗаявок.Код КАК Код,
		|	МаршрутыДвиженияЗаявок.Наименование КАК Наименование,
		|	МаршрутыДвиженияЗаявок.Предприятие КАК Предприятие,
		|	МаршрутыДвиженияЗаявок.СтатьяДДС КАК СтатьяДДС,
		|	МаршрутыДвиженияЗаявок.Комментарий КАК Комментарий,
		|	МаршрутыДвиженияЗаявок.Автор КАК Автор,
		|	МаршрутыДвиженияЗаявок.ВидДокумента КАК ВидДокумента,
		|	МаршрутыДвиженияЗаявок.Подразделение КАК Подразделение,
		|	МаршрутыДвиженияЗаявок.ТипРеализации КАК ТипРеализации,
		|	МаршрутыДвиженияЗаявок.ТипПлатежа КАК ТипПлатежа,
		|	МаршрутыДвиженияЗаявок.ВыдачаВПодОтчет КАК ВыдачаВПодОтчет,
		|	МаршрутыДвиженияЗаявок.Служба КАК Служба
		|ПОМЕСТИТЬ ВТ_МаршрутыДвиженияЗаявок
		|ИЗ
		|	Справочник.МаршрутыДвиженияЗаявок КАК МаршрутыДвиженияЗаявок
		|ГДЕ
		|	МаршрутыДвиженияЗаявок.ВидДокумента В(&РеестрЗаявок)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявокПредприятияПодразделения.Ссылка КАК Ссылка,
		|	МаршрутыДвиженияЗаявокПредприятияПодразделения.НомерСтроки КАК НомерСтроки,
		|	МаршрутыДвиженияЗаявокПредприятияПодразделения.Предприятие КАК Предприятие,
		|	МаршрутыДвиженияЗаявокПредприятияПодразделения.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТ_МаршрутыДвиженияЗаявокПредприятия
		|ИЗ
		|	Справочник.МаршрутыДвиженияЗаявок.ПредприятияПодразделения КАК МаршрутыДвиженияЗаявокПредприятияПодразделения
		|ГДЕ
		|	МаршрутыДвиженияЗаявокПредприятияПодразделения.Ссылка.ВидДокумента В(&РеестрЗаявок)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявокСтатьиДДС.Ссылка КАК Ссылка,
		|	МаршрутыДвиженияЗаявокСтатьиДДС.НомерСтроки КАК НомерСтроки,
		|	МаршрутыДвиженияЗаявокСтатьиДДС.СтатьяДДС КАК СтатьяДДС
		|ПОМЕСТИТЬ ВТ_МаршрутыДвиженияЗаявокСтатьиДДС
		|ИЗ
		|	Справочник.МаршрутыДвиженияЗаявок.СтатьиДДС КАК МаршрутыДвиженияЗаявокСтатьиДДС
		|ГДЕ
		|	МаршрутыДвиженияЗаявокСтатьиДДС.Ссылка.ВидДокумента В(&РеестрЗаявок)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_МаршрутыДвиженияЗаявокПредприятия.Предприятие КАК Предприятие,
		|	ВТ_МаршрутыДвиженияЗаявокПредприятия.Подразделение КАК Подразделение,
		|	ВТ_МаршрутыДвиженияЗаявокСтатьиДДС.СтатьяДДС КАК СтатьяДДС,
		|	ВТ_МаршрутыДвиженияЗаявок.ТипПлатежа КАК ТипПлатежа,
		|	ВТ_МаршрутыДвиженияЗаявок.Ссылка КАК Ссылка,
		|	ВТ_МаршрутыДвиженияЗаявок.ВидДокумента КАК ВидДокумента,
		|	ВТ_МаршрутыДвиженияЗаявок.ВыдачаВПодОтчет КАК ВыдачаВПодОтчет,
		|	ВТ_МаршрутыДвиженияЗаявок.ПометкаУдаления КАК ПометкаУдаления,
		|	ВТ_МаршрутыДвиженияЗаявок.ТипРеализации КАК ТипРеализации
		|ПОМЕСТИТЬ ВТ_МаршрутыДвиженияЗаявокСводныеДанные
		|ИЗ
		|	ВТ_МаршрутыДвиженияЗаявок КАК ВТ_МаршрутыДвиженияЗаявок
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаршрутыДвиженияЗаявокПредприятия КАК ВТ_МаршрутыДвиженияЗаявокПредприятия
		|		ПО ВТ_МаршрутыДвиженияЗаявок.Ссылка = ВТ_МаршрутыДвиженияЗаявокПредприятия.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаршрутыДвиженияЗаявокСтатьиДДС КАК ВТ_МаршрутыДвиженияЗаявокСтатьиДДС
		|		ПО ВТ_МаршрутыДвиженияЗаявок.Ссылка = ВТ_МаршрутыДвиженияЗаявокСтатьиДДС.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявокПредприятияПодразделения.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ПустоеПодразделение
		|ИЗ
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные КАК МаршрутыДвиженияЗаявокПредприятияПодразделения
		|ГДЕ
		|	МаршрутыДвиженияЗаявокПредприятияПодразделения.Предприятие <> ЗНАЧЕНИЕ(Справочник.Предприятия.ПустаяСсылка)
		|	И МаршрутыДвиженияЗаявокПредприятияПодразделения.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявокПредприятияПодразделения.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_НеПустоеПредприятие
		|ИЗ
		|	Справочник.МаршрутыДвиженияЗаявок.ПредприятияПодразделения КАК МаршрутыДвиженияЗаявокПредприятияПодразделения
		|ГДЕ
		|	МаршрутыДвиженияЗаявокПредприятияПодразделения.Предприятие <> ЗНАЧЕНИЕ(Справочник.Предприятия.ПустаяСсылка)
		|	И МаршрутыДвиженияЗаявокПредприятияПодразделения.Ссылка.ВидДокумента В(&РеестрЗаявок)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявокСтатьиДДС.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_НеПустаяСтатьяДДС
		|ИЗ
		|	Справочник.МаршрутыДвиженияЗаявок.СтатьиДДС КАК МаршрутыДвиженияЗаявокСтатьиДДС
		|ГДЕ
		|	МаршрутыДвиженияЗаявокСтатьиДДС.СтатьяДДС <> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
		|	И МаршрутыДвиженияЗаявокСтатьиДДС.Ссылка.ВидДокумента В(&РеестрЗаявок)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеЗаявки.НомерСтроки КАК НомерСтрокиВладельца,
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка КАК Ссылка,
		|	ВТ_ДанныеЗаявки.ЦФО КАК ЦФО,
		|	ВТ_ДанныеЗаявки.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТ_СтатьяПодразделениеПредприятие_ТипПлатежа_ВПодОтчет
		|ИЗ
		|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные КАК ВТ_МаршрутыДвиженияЗаявокСводныеДанные
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НеПустаяСтатьяДДС КАК ВТ_НеПустаяСтатьяДДС
		|			ПО (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустаяСтатьяДДС.Ссылка))
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НеПустоеПредприятие КАК ВТ_НеПустоеПредприятие
		|			ПО (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустоеПредприятие.Ссылка))
		|		ПО (ВТ_ДанныеЗаявки.ТипИсточника = ЗНАЧЕНИЕ(Перечисление.Д_ИсточникиСредств.БезНал)
		|				ИЛИ ВТ_ДанныеЗаявки.ВыдачаВПодОтчет = ВЫБОР
		|					КОГДА ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВыдачаВПодОтчет = 1
		|						ТОГДА ИСТИНА
		|					КОГДА ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВыдачаВПодОтчет = -1
		|						ТОГДА ЛОЖЬ
		|					ИНАЧЕ 0
		|				КОНЕЦ)
		|			И (ВТ_ДанныеЗаявки.ЦФО В (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Предприятие))
		|			И (ВТ_ДанныеЗаявки.СтатьяДДС В (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.СтатьяДДС))
		|			И ВТ_ДанныеЗаявки.ТипИсточника = ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ТипПлатежа
		|			И (ВТ_ДанныеЗаявки.Подразделение В (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Подразделение))
		|ГДЕ
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Предприятие В (ВТ_ДанныеЗаявки.ЦФО)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.СтатьяДДС В (ВТ_ДанныеЗаявки.СтатьяДДС)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустоеПредприятие.Ссылка)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВидДокумента В(&РеестрЗаявок)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Подразделение В (ВТ_ДанныеЗаявки.Подразделение)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустаяСтатьяДДС.Ссылка)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ТипПлатежа <> ЗНАЧЕНИЕ(Перечисление.Д_ИсточникиСредств.ПустаяССылка)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВыдачаВПодОтчет <> 0
		|	И НЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка,
		|	ВТ_ДанныеЗаявки.ЦФО,
		|	ВТ_ДанныеЗаявки.Подразделение,
		|	ВТ_ДанныеЗаявки.НомерСтроки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	НЕОПРЕДЕЛЕНО,
		|	NULL,
		|	NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СтатьяПодразделениеПредприятие_ТипПлатежа_ВПодОтчет.НомерСтрокиВладельца КАК НомерСтрокиВладельца,
		|	ВТ_СтатьяПодразделениеПредприятие_ТипПлатежа_ВПодОтчет.Ссылка КАК Ссылка,
		|	ВТ_СтатьяПодразделениеПредприятие_ТипПлатежа_ВПодОтчет.ЦФО КАК ЦФО,
		|	ВТ_СтатьяПодразделениеПредприятие_ТипПлатежа_ВПодОтчет.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТ_СтатьяПодразделениеПредприятие_ТипПлатежа
		|ИЗ
		|	ВТ_СтатьяПодразделениеПредприятие_ТипПлатежа_ВПодОтчет КАК ВТ_СтатьяПодразделениеПредприятие_ТипПлатежа_ВПодОтчет
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_СтатьяПодразделениеПредприятие_ТипПлатежа_ВПодОтчет.Ссылка,
		|	ВТ_СтатьяПодразделениеПредприятие_ТипПлатежа_ВПодОтчет.ЦФО,
		|	ВТ_СтатьяПодразделениеПредприятие_ТипПлатежа_ВПодОтчет.Подразделение,
		|	ВТ_СтатьяПодразделениеПредприятие_ТипПлатежа_ВПодОтчет.НомерСтрокиВладельца
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ДанныеЗаявки.НомерСтроки,
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка,
		|	ВТ_ДанныеЗаявки.ЦФО,
		|	ВТ_ДанныеЗаявки.Подразделение
		|ИЗ
		|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные КАК ВТ_МаршрутыДвиженияЗаявокСводныеДанные
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НеПустоеПредприятие КАК ВТ_НеПустоеПредприятие
		|			ПО (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустоеПредприятие.Ссылка))
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НеПустаяСтатьяДДС КАК ВТ_НеПустаяСтатьяДДС
		|			ПО (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустаяСтатьяДДС.Ссылка))
		|		ПО ВТ_ДанныеЗаявки.ТипИсточника = ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ТипПлатежа
		|			И (ВТ_ДанныеЗаявки.ЦФО В (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Предприятие))
		|			И (ВТ_ДанныеЗаявки.Подразделение В (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Подразделение))
		|			И (ВТ_ДанныеЗаявки.СтатьяДДС В (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.СтатьяДДС))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатьяПодразделениеПредприятие_ТипПлатежа_ВПодОтчет КАК ВТ_СтатьяПодразделениеПредприятие_ТипПлатежа_ВПодОтчет
		|		ПО (НЕ ВТ_ДанныеЗаявки.НомерСтроки В (ВТ_СтатьяПодразделениеПредприятие_ТипПлатежа_ВПодОтчет.НомерСтрокиВладельца))
		|ГДЕ
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Предприятие В (ВТ_ДанныеЗаявки.ЦФО)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.СтатьяДДС В (ВТ_ДанныеЗаявки.СтатьяДДС)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустоеПредприятие.Ссылка)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВидДокумента В(&РеестрЗаявок)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Подразделение В (ВТ_ДанныеЗаявки.Подразделение)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустаяСтатьяДДС.Ссылка)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ТипПлатежа <> ЗНАЧЕНИЕ(Перечисление.Д_ИсточникиСредств.ПустаяССылка)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВыдачаВПодОтчет = 0
		|	И НЕ ВТ_ДанныеЗаявки.НомерСтроки В
		|				(ВЫБРАТЬ
		|					ВТ_СтатьяПодразделениеПредприятие_ТипПлатежа_ВПодОтчет.НомерСтрокиВладельца
		|				ИЗ
		|					ВТ_СтатьяПодразделениеПредприятие_ТипПлатежа_ВПодОтчет КАК ВТ_СтатьяПодразделениеПредприятие_ТипПлатежа_ВПодОтчет)
		|	И НЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка,
		|	ВТ_ДанныеЗаявки.ЦФО,
		|	ВТ_ДанныеЗаявки.Подразделение,
		|	ВТ_ДанныеЗаявки.НомерСтроки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	НЕОПРЕДЕЛЕНО,
		|	NULL,
		|	NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СтатьяПодразделениеПредприятие_ТипПлатежа.НомерСтрокиВладельца КАК НомерСтрокиВладельца,
		|	ВТ_СтатьяПодразделениеПредприятие_ТипПлатежа.Ссылка КАК Ссылка,
		|	ВТ_СтатьяПодразделениеПредприятие_ТипПлатежа.ЦФО КАК ЦФО,
		|	ВТ_СтатьяПодразделениеПредприятие_ТипПлатежа.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТ_СтатьяПодразделениеПредприятие
		|ИЗ
		|	ВТ_СтатьяПодразделениеПредприятие_ТипПлатежа КАК ВТ_СтатьяПодразделениеПредприятие_ТипПлатежа
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_СтатьяПодразделениеПредприятие_ТипПлатежа.Ссылка,
		|	ВТ_СтатьяПодразделениеПредприятие_ТипПлатежа.ЦФО,
		|	ВТ_СтатьяПодразделениеПредприятие_ТипПлатежа.Подразделение,
		|	ВТ_СтатьяПодразделениеПредприятие_ТипПлатежа.НомерСтрокиВладельца
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ДанныеЗаявки.НомерСтроки,
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка,
		|	ВТ_ДанныеЗаявки.ЦФО,
		|	ВТ_ДанныеЗаявки.Подразделение
		|ИЗ
		|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные КАК ВТ_МаршрутыДвиженияЗаявокСводныеДанные
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НеПустоеПредприятие КАК ВТ_НеПустоеПредприятие
		|			ПО (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустоеПредприятие.Ссылка))
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НеПустаяСтатьяДДС КАК ВТ_НеПустаяСтатьяДДС
		|			ПО (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустаяСтатьяДДС.Ссылка))
		|		ПО (ВТ_ДанныеЗаявки.СтатьяДДС В (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.СтатьяДДС))
		|			И (ВТ_ДанныеЗаявки.Подразделение В (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Подразделение))
		|			И (ВТ_ДанныеЗаявки.ЦФО В (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Предприятие))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатьяПодразделениеПредприятие_ТипПлатежа КАК ВТ_СтатьяПодразделениеПредприятие_ТипПлатежа
		|		ПО (НЕ ВТ_ДанныеЗаявки.НомерСтроки В (ВТ_СтатьяПодразделениеПредприятие_ТипПлатежа.НомерСтрокиВладельца))
		|ГДЕ
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Предприятие В (ВТ_ДанныеЗаявки.ЦФО)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.СтатьяДДС В (ВТ_ДанныеЗаявки.СтатьяДДС)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустоеПредприятие.Ссылка)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВидДокумента В(&РеестрЗаявок)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Подразделение В (ВТ_ДанныеЗаявки.Подразделение)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустаяСтатьяДДС.Ссылка)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ТипПлатежа = ЗНАЧЕНИЕ(Перечисление.Д_ИсточникиСредств.ПустаяССылка)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВыдачаВПодОтчет = 0
		|	И НЕ ВТ_ДанныеЗаявки.НомерСтроки В
		|				(ВЫБРАТЬ
		|					ВТ_СтатьяПодразделениеПредприятие_ТипПлатежа.НомерСтрокиВладельца
		|				ИЗ
		|					ВТ_СтатьяПодразделениеПредприятие_ТипПлатежа КАК ВТ_СтатьяПодразделениеПредприятие_ТипПлатежа)
		|	И НЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка,
		|	ВТ_ДанныеЗаявки.ЦФО,
		|	ВТ_ДанныеЗаявки.Подразделение,
		|	ВТ_ДанныеЗаявки.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СтатьяПодразделениеПредприятие.НомерСтрокиВладельца КАК НомерСтрокиВладельца,
		|	ВТ_СтатьяПодразделениеПредприятие.Ссылка КАК Ссылка,
		|	ВТ_СтатьяПодразделениеПредприятие.ЦФО КАК ЦФО,
		|	ВТ_СтатьяПодразделениеПредприятие.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТ_СтатьяИПредприятие_ТипПлатежа_ВПодОтчет
		|ИЗ
		|	ВТ_СтатьяПодразделениеПредприятие КАК ВТ_СтатьяПодразделениеПредприятие
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_СтатьяПодразделениеПредприятие.Ссылка,
		|	ВТ_СтатьяПодразделениеПредприятие.ЦФО,
		|	ВТ_СтатьяПодразделениеПредприятие.Подразделение,
		|	ВТ_СтатьяПодразделениеПредприятие.НомерСтрокиВладельца
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ДанныеЗаявки.НомерСтроки,
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка,
		|	ВТ_ДанныеЗаявки.ЦФО,
		|	ВТ_ДанныеЗаявки.Подразделение
		|ИЗ
		|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные КАК ВТ_МаршрутыДвиженияЗаявокСводныеДанные
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПустоеПодразделение КАК ВТ_ПустоеПодразделение
		|			ПО (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_ПустоеПодразделение.Ссылка))
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НеПустоеПредприятие КАК ВТ_НеПустоеПредприятие
		|			ПО (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустоеПредприятие.Ссылка))
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НеПустаяСтатьяДДС КАК ВТ_НеПустаяСтатьяДДС
		|			ПО (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустаяСтатьяДДС.Ссылка))
		|		ПО (ВТ_ДанныеЗаявки.ТипИсточника = ЗНАЧЕНИЕ(Перечисление.Д_ИсточникиСредств.БезНал)
		|				ИЛИ ВТ_ДанныеЗаявки.ВыдачаВПодОтчет = ВЫБОР
		|					КОГДА ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВыдачаВПодОтчет = 1
		|						ТОГДА ИСТИНА
		|					КОГДА ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВыдачаВПодОтчет = -1
		|						ТОГДА ЛОЖЬ
		|					ИНАЧЕ 0
		|				КОНЕЦ)
		|			И ВТ_ДанныеЗаявки.ТипИсточника = ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ТипПлатежа
		|			И (ВТ_ДанныеЗаявки.ЦФО В (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Предприятие))
		|			И (ВТ_ДанныеЗаявки.СтатьяДДС В (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.СтатьяДДС))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатьяПодразделениеПредприятие КАК ВТ_СтатьяПодразделениеПредприятие
		|		ПО (НЕ ВТ_ДанныеЗаявки.НомерСтроки В (ВТ_СтатьяПодразделениеПредприятие.НомерСтрокиВладельца))
		|ГДЕ
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Предприятие В (ВТ_ДанныеЗаявки.ЦФО)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.СтатьяДДС В (ВТ_ДанныеЗаявки.СтатьяДДС)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустоеПредприятие.Ссылка)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВидДокумента В(&РеестрЗаявок)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_ПустоеПодразделение.Ссылка)
		|	И НЕ ВТ_ДанныеЗаявки.НомерСтроки В
		|				(ВЫБРАТЬ
		|					ВТ_СтатьяПодразделениеПредприятие.НомерСтрокиВладельца
		|				ИЗ
		|					ВТ_СтатьяПодразделениеПредприятие КАК ВТ_СтатьяПодразделениеПредприятие)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустаяСтатьяДДС.Ссылка)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ТипПлатежа <> ЗНАЧЕНИЕ(Перечисление.Д_ИсточникиСредств.ПустаяССылка)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВыдачаВПодОтчет <> 0
		|	И НЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка,
		|	ВТ_ДанныеЗаявки.ЦФО,
		|	ВТ_ДанныеЗаявки.Подразделение,
		|	ВТ_ДанныеЗаявки.НомерСтроки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	НЕОПРЕДЕЛЕНО,
		|	NULL,
		|	NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СтатьяИПредприятие_ТипПлатежа_ВПодОтчет.НомерСтрокиВладельца КАК НомерСтрокиВладельца,
		|	ВТ_СтатьяИПредприятие_ТипПлатежа_ВПодОтчет.Ссылка КАК Ссылка,
		|	ВТ_СтатьяИПредприятие_ТипПлатежа_ВПодОтчет.ЦФО КАК ЦФО,
		|	ВТ_СтатьяИПредприятие_ТипПлатежа_ВПодОтчет.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТ_СтатьяИПредприятие_ТипПлатежа
		|ИЗ
		|	ВТ_СтатьяИПредприятие_ТипПлатежа_ВПодОтчет КАК ВТ_СтатьяИПредприятие_ТипПлатежа_ВПодОтчет
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_СтатьяИПредприятие_ТипПлатежа_ВПодОтчет.Ссылка,
		|	ВТ_СтатьяИПредприятие_ТипПлатежа_ВПодОтчет.ЦФО,
		|	ВТ_СтатьяИПредприятие_ТипПлатежа_ВПодОтчет.Подразделение,
		|	ВТ_СтатьяИПредприятие_ТипПлатежа_ВПодОтчет.НомерСтрокиВладельца
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ДанныеЗаявки.НомерСтроки,
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка,
		|	ВТ_ДанныеЗаявки.ЦФО,
		|	ВТ_ДанныеЗаявки.Подразделение
		|ИЗ
		|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные КАК ВТ_МаршрутыДвиженияЗаявокСводныеДанные
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПустоеПодразделение КАК ВТ_ПустоеПодразделение
		|			ПО (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_ПустоеПодразделение.Ссылка))
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НеПустаяСтатьяДДС КАК ВТ_НеПустаяСтатьяДДС
		|			ПО (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустаяСтатьяДДС.Ссылка))
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НеПустоеПредприятие КАК ВТ_НеПустоеПредприятие
		|			ПО (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустоеПредприятие.Ссылка))
		|		ПО ВТ_ДанныеЗаявки.ТипИсточника = ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ТипПлатежа
		|			И (ВТ_ДанныеЗаявки.ЦФО В (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Предприятие))
		|			И (ВТ_ДанныеЗаявки.СтатьяДДС В (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.СтатьяДДС))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатьяИПредприятие_ТипПлатежа_ВПодОтчет КАК ВТ_СтатьяИПредприятие_ТипПлатежа_ВПодОтчет
		|		ПО (НЕ ВТ_ДанныеЗаявки.НомерСтроки В (ВТ_СтатьяИПредприятие_ТипПлатежа_ВПодОтчет.НомерСтрокиВладельца))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатьяПодразделениеПредприятие КАК ВТ_СтатьяПодразделениеПредприятие
		|		ПО (НЕ ВТ_ДанныеЗаявки.НомерСтроки В (ВТ_СтатьяПодразделениеПредприятие.НомерСтрокиВладельца))
		|ГДЕ
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Предприятие В (ВТ_ДанныеЗаявки.ЦФО)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.СтатьяДДС В (ВТ_ДанныеЗаявки.СтатьяДДС)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустоеПредприятие.Ссылка)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВидДокумента В(&РеестрЗаявок)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_ПустоеПодразделение.Ссылка)
		|	И НЕ ВТ_ДанныеЗаявки.НомерСтроки В
		|				(ВЫБРАТЬ
		|					ВТ_СтатьяИПредприятие_ТипПлатежа_ВПодОтчет.НомерСтрокиВладельца
		|				ИЗ
		|					ВТ_СтатьяИПредприятие_ТипПлатежа_ВПодОтчет КАК ВТ_СтатьяИПредприятие_ТипПлатежа_ВПодОтчет)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустаяСтатьяДДС.Ссылка)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ТипПлатежа <> ЗНАЧЕНИЕ(Перечисление.Д_ИсточникиСредств.ПустаяССылка)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВыдачаВПодОтчет = 0
		|	И НЕ ВТ_ДанныеЗаявки.НомерСтроки В
		|				(ВЫБРАТЬ
		|					ВТ_СтатьяПодразделениеПредприятие.НомерСтрокиВладельца
		|				ИЗ
		|					ВТ_СтатьяПодразделениеПредприятие КАК ВТ_СтатьяПодразделениеПредприятие)
		|	И НЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка,
		|	ВТ_ДанныеЗаявки.ЦФО,
		|	ВТ_ДанныеЗаявки.Подразделение,
		|	ВТ_ДанныеЗаявки.НомерСтроки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	НЕОПРЕДЕЛЕНО,
		|	NULL,
		|	NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СтатьяИПредприятие_ТипПлатежа.НомерСтрокиВладельца КАК НомерСтрокиВладельца,
		|	ВТ_СтатьяИПредприятие_ТипПлатежа.Ссылка КАК Ссылка,
		|	ВТ_СтатьяИПредприятие_ТипПлатежа.ЦФО КАК ЦФО,
		|	ВТ_СтатьяИПредприятие_ТипПлатежа.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТ_СтатьяИПредприятие
		|ИЗ
		|	ВТ_СтатьяИПредприятие_ТипПлатежа КАК ВТ_СтатьяИПредприятие_ТипПлатежа
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_СтатьяИПредприятие_ТипПлатежа.Ссылка,
		|	ВТ_СтатьяИПредприятие_ТипПлатежа.ЦФО,
		|	ВТ_СтатьяИПредприятие_ТипПлатежа.Подразделение,
		|	ВТ_СтатьяИПредприятие_ТипПлатежа.НомерСтрокиВладельца
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ДанныеЗаявки.НомерСтроки,
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка,
		|	ВТ_ДанныеЗаявки.ЦФО,
		|	ВТ_ДанныеЗаявки.Подразделение
		|ИЗ
		|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные КАК ВТ_МаршрутыДвиженияЗаявокСводныеДанные
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПустоеПодразделение КАК ВТ_ПустоеПодразделение
		|			ПО (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_ПустоеПодразделение.Ссылка))
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НеПустоеПредприятие КАК ВТ_НеПустоеПредприятие
		|			ПО (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустоеПредприятие.Ссылка))
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НеПустаяСтатьяДДС КАК ВТ_НеПустаяСтатьяДДС
		|			ПО (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустаяСтатьяДДС.Ссылка))
		|		ПО (ВТ_ДанныеЗаявки.ЦФО В (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Предприятие))
		|			И (ВТ_ДанныеЗаявки.СтатьяДДС В (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.СтатьяДДС))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатьяИПредприятие_ТипПлатежа КАК ВТ_СтатьяИПредприятие_ТипПлатежа
		|		ПО (НЕ ВТ_ДанныеЗаявки.НомерСтроки В (ВТ_СтатьяИПредприятие_ТипПлатежа.НомерСтрокиВладельца))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатьяПодразделениеПредприятие КАК ВТ_СтатьяПодразделениеПредприятие
		|		ПО (НЕ ВТ_ДанныеЗаявки.НомерСтроки В (ВТ_СтатьяПодразделениеПредприятие.НомерСтрокиВладельца))
		|ГДЕ
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Предприятие В (ВТ_ДанныеЗаявки.ЦФО)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.СтатьяДДС В (ВТ_ДанныеЗаявки.СтатьяДДС)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустоеПредприятие.Ссылка)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВидДокумента В(&РеестрЗаявок)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_ПустоеПодразделение.Ссылка)
		|	И НЕ ВТ_ДанныеЗаявки.НомерСтроки В
		|				(ВЫБРАТЬ
		|					ВТ_СтатьяИПредприятие_ТипПлатежа.НомерСтрокиВладельца
		|				ИЗ
		|					ВТ_СтатьяИПредприятие_ТипПлатежа КАК ВТ_СтатьяИПредприятие_ТипПлатежа)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустаяСтатьяДДС.Ссылка)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ТипПлатежа = ЗНАЧЕНИЕ(Перечисление.Д_ИсточникиСредств.ПустаяССылка)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВыдачаВПодОтчет = 0
		|	И НЕ ВТ_ДанныеЗаявки.НомерСтроки В
		|				(ВЫБРАТЬ
		|					ВТ_СтатьяПодразделениеПредприятие.НомерСтрокиВладельца
		|				ИЗ
		|					ВТ_СтатьяПодразделениеПредприятие КАК ВТ_СтатьяПодразделениеПредприятие)
		|	И НЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка,
		|	ВТ_ДанныеЗаявки.ЦФО,
		|	ВТ_ДанныеЗаявки.Подразделение,
		|	ВТ_ДанныеЗаявки.НомерСтроки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка КАК Ссылка,
		|	ВТ_ДанныеЗаявки.НомерСтроки КАК НомерСтрокиВладельца,
		|	ВТ_ДанныеЗаявки.ЦФО КАК ЦФО,
		|	ВТ_ДанныеЗаявки.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТ_ПредприятиеПодразделение_ТипПлатежа_ВПодОтчет
		|ИЗ
		|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные КАК ВТ_МаршрутыДвиженияЗаявокСводныеДанные
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НеПустоеПредприятие КАК ВТ_НеПустоеПредприятие
		|			ПО (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустоеПредприятие.Ссылка))
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НеПустаяСтатьяДДС КАК ВТ_НеПустаяСтатьяДДС
		|			ПО (НЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустаяСтатьяДДС.Ссылка))
		|		ПО (ВТ_ДанныеЗаявки.ТипИсточника = ЗНАЧЕНИЕ(Перечисление.Д_ИсточникиСредств.БезНал)
		|				ИЛИ ВТ_ДанныеЗаявки.ВыдачаВПодОтчет = ВЫБОР
		|					КОГДА ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВыдачаВПодОтчет = 1
		|						ТОГДА ИСТИНА
		|					КОГДА ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВыдачаВПодОтчет = -1
		|						ТОГДА ЛОЖЬ
		|					ИНАЧЕ 0
		|				КОНЕЦ)
		|			И (ВТ_ДанныеЗаявки.ЦФО В (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Предприятие))
		|			И (ВТ_ДанныеЗаявки.Подразделение В (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Подразделение))
		|			И ВТ_ДанныеЗаявки.ТипИсточника = ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ТипПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СтатьяИПредприятие КАК ВТ_СтатьяИПредприятие
		|		ПО (НЕ ВТ_ДанныеЗаявки.НомерСтроки В (ВТ_СтатьяИПредприятие.НомерСтрокиВладельца))
		|ГДЕ
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Предприятие В (ВТ_ДанныеЗаявки.ЦФО)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Подразделение В (ВТ_ДанныеЗаявки.Подразделение)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустоеПредприятие.Ссылка)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВидДокумента В(&РеестрЗаявок)
		|	И НЕ ВТ_ДанныеЗаявки.НомерСтроки В
		|				(ВЫБРАТЬ
		|					ВТ_СтатьяИПредприятие.НомерСтрокиВладельца
		|				ИЗ
		|					ВТ_СтатьяИПредприятие КАК ВТ_СтатьяИПредприятие)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ТипПлатежа <> ЗНАЧЕНИЕ(Перечисление.Д_ИсточникиСредств.ПустаяССылка)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВыдачаВПодОтчет <> 0
		|	И НЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ПометкаУдаления
		|	И НЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В
		|				(ВЫБРАТЬ
		|					ВТ_НеПустаяСтатьяДДС.Ссылка
		|				ИЗ
		|					ВТ_НеПустаяСтатьяДДС КАК ВТ_НеПустаяСтатьяДДС)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка,
		|	ВТ_ДанныеЗаявки.ЦФО,
		|	ВТ_ДанныеЗаявки.Подразделение,
		|	ВТ_ДанныеЗаявки.НомерСтроки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО,
		|	NULL,
		|	NULL,
		|	NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПредприятиеПодразделение_ТипПлатежа_ВПодОтчет.Ссылка КАК Ссылка,
		|	ВТ_ПредприятиеПодразделение_ТипПлатежа_ВПодОтчет.НомерСтрокиВладельца КАК НомерСтрокиВладельца,
		|	ВТ_ПредприятиеПодразделение_ТипПлатежа_ВПодОтчет.ЦФО КАК ЦФО,
		|	ВТ_ПредприятиеПодразделение_ТипПлатежа_ВПодОтчет.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТ_ПредприятиеПодразделение_ТипПлатежа
		|ИЗ
		|	ВТ_ПредприятиеПодразделение_ТипПлатежа_ВПодОтчет КАК ВТ_ПредприятиеПодразделение_ТипПлатежа_ВПодОтчет
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ПредприятиеПодразделение_ТипПлатежа_ВПодОтчет.Ссылка,
		|	ВТ_ПредприятиеПодразделение_ТипПлатежа_ВПодОтчет.ЦФО,
		|	ВТ_ПредприятиеПодразделение_ТипПлатежа_ВПодОтчет.Подразделение,
		|	ВТ_ПредприятиеПодразделение_ТипПлатежа_ВПодОтчет.НомерСтрокиВладельца
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка,
		|	ВТ_ДанныеЗаявки.НомерСтроки,
		|	ВТ_ДанныеЗаявки.ЦФО,
		|	ВТ_ДанныеЗаявки.Подразделение
		|ИЗ
		|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные КАК ВТ_МаршрутыДвиженияЗаявокСводныеДанные
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НеПустаяСтатьяДДС КАК ВТ_НеПустаяСтатьяДДС
		|			ПО (НЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустаяСтатьяДДС.Ссылка))
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НеПустоеПредприятие КАК ВТ_НеПустоеПредприятие
		|			ПО (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустоеПредприятие.Ссылка))
		|		ПО ВТ_ДанныеЗаявки.ТипИсточника = ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ТипПлатежа
		|			И (ВТ_ДанныеЗаявки.ЦФО В (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Предприятие))
		|			И (ВТ_ДанныеЗаявки.Подразделение В (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Подразделение))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПредприятиеПодразделение_ТипПлатежа_ВПодОтчет КАК ВТ_ПредприятиеПодразделение_ТипПлатежа_ВПодОтчет
		|		ПО (НЕ ВТ_ДанныеЗаявки.НомерСтроки В (ВТ_ПредприятиеПодразделение_ТипПлатежа_ВПодОтчет.НомерСтрокиВладельца))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатьяИПредприятие КАК ВТ_СтатьяИПредприятие
		|		ПО (НЕ ВТ_ДанныеЗаявки.НомерСтроки В (ВТ_СтатьяИПредприятие.НомерСтрокиВладельца))
		|ГДЕ
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Предприятие В (ВТ_ДанныеЗаявки.ЦФО)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Подразделение В (ВТ_ДанныеЗаявки.Подразделение)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустоеПредприятие.Ссылка)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВидДокумента В(&РеестрЗаявок)
		|	И НЕ ВТ_ДанныеЗаявки.НомерСтроки В
		|				(ВЫБРАТЬ
		|					ВТ_СтатьяИПредприятие.НомерСтрокиВладельца
		|				ИЗ
		|					ВТ_СтатьяИПредприятие КАК ВТ_СтатьяИПредприятие)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ТипПлатежа <> ЗНАЧЕНИЕ(Перечисление.Д_ИсточникиСредств.ПустаяССылка)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВыдачаВПодОтчет = 0
		|	И НЕ ВТ_ДанныеЗаявки.НомерСтроки В
		|				(ВЫБРАТЬ
		|					ВТ_ПредприятиеПодразделение_ТипПлатежа_ВПодОтчет.НомерСтрокиВладельца
		|				ИЗ
		|					ВТ_ПредприятиеПодразделение_ТипПлатежа_ВПодОтчет КАК ВТ_ПредприятиеПодразделение_ТипПлатежа_ВПодОтчет)
		|	И НЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ПометкаУдаления
		|	И НЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В
		|				(ВЫБРАТЬ
		|					ВТ_НеПустаяСтатьяДДС.Ссылка
		|				ИЗ
		|					ВТ_НеПустаяСтатьяДДС КАК ВТ_НеПустаяСтатьяДДС)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка,
		|	ВТ_ДанныеЗаявки.ЦФО,
		|	ВТ_ДанныеЗаявки.Подразделение,
		|	ВТ_ДанныеЗаявки.НомерСтроки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО,
		|	NULL,
		|	NULL,
		|	NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПредприятиеПодразделение_ТипПлатежа.Ссылка КАК Ссылка,
		|	ВТ_ПредприятиеПодразделение_ТипПлатежа.НомерСтрокиВладельца КАК НомерСтрокиВладельца,
		|	ВТ_ПредприятиеПодразделение_ТипПлатежа.ЦФО КАК ЦФО,
		|	ВТ_ПредприятиеПодразделение_ТипПлатежа.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТ_ПредприятиеПодразделение
		|ИЗ
		|	ВТ_ПредприятиеПодразделение_ТипПлатежа КАК ВТ_ПредприятиеПодразделение_ТипПлатежа
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ПредприятиеПодразделение_ТипПлатежа.Ссылка,
		|	ВТ_ПредприятиеПодразделение_ТипПлатежа.ЦФО,
		|	ВТ_ПредприятиеПодразделение_ТипПлатежа.Подразделение,
		|	ВТ_ПредприятиеПодразделение_ТипПлатежа.НомерСтрокиВладельца
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка,
		|	ВТ_ДанныеЗаявки.НомерСтроки,
		|	ВТ_ДанныеЗаявки.ЦФО,
		|	ВТ_ДанныеЗаявки.Подразделение
		|ИЗ
		|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные КАК ВТ_МаршрутыДвиженияЗаявокСводныеДанные
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НеПустоеПредприятие КАК ВТ_НеПустоеПредприятие
		|			ПО (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустоеПредприятие.Ссылка))
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НеПустаяСтатьяДДС КАК ВТ_НеПустаяСтатьяДДС
		|			ПО (НЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустаяСтатьяДДС.Ссылка))
		|		ПО (ВТ_ДанныеЗаявки.ЦФО В (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Предприятие))
		|			И (ВТ_ДанныеЗаявки.Подразделение В (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Подразделение))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПредприятиеПодразделение_ТипПлатежа КАК ВТ_ПредприятиеПодразделение_ТипПлатежа
		|		ПО (НЕ ВТ_ДанныеЗаявки.НомерСтроки В (ВТ_ПредприятиеПодразделение_ТипПлатежа.НомерСтрокиВладельца))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатьяИПредприятие КАК ВТ_СтатьяИПредприятие
		|		ПО (НЕ ВТ_ДанныеЗаявки.НомерСтроки В (ВТ_СтатьяИПредприятие.НомерСтрокиВладельца))
		|ГДЕ
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Предприятие В (ВТ_ДанныеЗаявки.ЦФО)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Подразделение В (ВТ_ДанныеЗаявки.Подразделение)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустоеПредприятие.Ссылка)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВидДокумента В(&РеестрЗаявок)
		|	И НЕ ВТ_ДанныеЗаявки.НомерСтроки В
		|				(ВЫБРАТЬ
		|					ВТ_СтатьяИПредприятие.НомерСтрокиВладельца
		|				ИЗ
		|					ВТ_СтатьяИПредприятие КАК ВТ_СтатьяИПредприятие)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ТипПлатежа = ЗНАЧЕНИЕ(Перечисление.Д_ИсточникиСредств.ПустаяССылка)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВыдачаВПодОтчет = 0
		|	И НЕ ВТ_ДанныеЗаявки.НомерСтроки В
		|				(ВЫБРАТЬ
		|					ВТ_ПредприятиеПодразделение_ТипПлатежа.НомерСтрокиВладельца
		|				ИЗ
		|					ВТ_ПредприятиеПодразделение_ТипПлатежа КАК ВТ_ПредприятиеПодразделение_ТипПлатежа)
		|	И НЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ПометкаУдаления
		|	И НЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В
		|				(ВЫБРАТЬ
		|					ВТ_НеПустаяСтатьяДДС.Ссылка
		|				ИЗ
		|					ВТ_НеПустаяСтатьяДДС КАК ВТ_НеПустаяСтатьяДДС)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка,
		|	ВТ_ДанныеЗаявки.ЦФО,
		|	ВТ_ДанныеЗаявки.Подразделение,
		|	ВТ_ДанныеЗаявки.НомерСтроки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПредприятиеПодразделение.Ссылка КАК Ссылка,
		|	ВТ_ПредприятиеПодразделение.НомерСтрокиВладельца КАК НомерСтрокиВладельца,
		|	ВТ_ПредприятиеПодразделение.ЦФО КАК ЦФО,
		|	ВТ_ПредприятиеПодразделение.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТ_Предприятие_ТипПлатежа_ВПодОтчет
		|ИЗ
		|	ВТ_ПредприятиеПодразделение КАК ВТ_ПредприятиеПодразделение
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ПредприятиеПодразделение.Ссылка,
		|	ВТ_ПредприятиеПодразделение.ЦФО,
		|	ВТ_ПредприятиеПодразделение.Подразделение,
		|	ВТ_ПредприятиеПодразделение.НомерСтрокиВладельца
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка,
		|	ВТ_ДанныеЗаявки.НомерСтроки,
		|	ВТ_ДанныеЗаявки.ЦФО,
		|	ВТ_ДанныеЗаявки.Подразделение
		|ИЗ
		|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные КАК ВТ_МаршрутыДвиженияЗаявокСводныеДанные
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПустоеПодразделение КАК ВТ_ПустоеПодразделение
		|			ПО (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_ПустоеПодразделение.Ссылка))
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НеПустоеПредприятие КАК ВТ_НеПустоеПредприятие
		|			ПО (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустоеПредприятие.Ссылка))
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НеПустаяСтатьяДДС КАК ВТ_НеПустаяСтатьяДДС
		|			ПО (НЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустаяСтатьяДДС.Ссылка))
		|		ПО (ВТ_ДанныеЗаявки.ТипИсточника = ЗНАЧЕНИЕ(Перечисление.Д_ИсточникиСредств.БезНал)
		|				ИЛИ ВТ_ДанныеЗаявки.ВыдачаВПодОтчет = ВЫБОР
		|					КОГДА ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВыдачаВПодОтчет = 1
		|						ТОГДА ИСТИНА
		|					КОГДА ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВыдачаВПодОтчет = -1
		|						ТОГДА ЛОЖЬ
		|					ИНАЧЕ 0
		|				КОНЕЦ)
		|			И (ВТ_ДанныеЗаявки.ЦФО В (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Предприятие))
		|			И ВТ_ДанныеЗаявки.ТипИсточника = ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ТипПлатежа
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПредприятиеПодразделение КАК ВТ_ПредприятиеПодразделение
		|		ПО (НЕ ВТ_ДанныеЗаявки.НомерСтроки В (ВТ_ПредприятиеПодразделение.НомерСтрокиВладельца))
		|ГДЕ
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Предприятие В (ВТ_ДанныеЗаявки.ЦФО)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустоеПредприятие.Ссылка)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВидДокумента В(&РеестрЗаявок)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_ПустоеПодразделение.Ссылка)
		|	И НЕ ВТ_ДанныеЗаявки.НомерСтроки В
		|				(ВЫБРАТЬ
		|					ВТ_ПредприятиеПодразделение.НомерСтрокиВладельца
		|				ИЗ
		|					ВТ_ПредприятиеПодразделение КАК ВТ_ПредприятиеПодразделение)
		|	И НЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В
		|				(ВЫБРАТЬ
		|					ВТ_НеПустаяСтатьяДДС.Ссылка
		|				ИЗ
		|					ВТ_НеПустаяСтатьяДДС КАК ВТ_НеПустаяСтатьяДДС)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ТипПлатежа <> ЗНАЧЕНИЕ(Перечисление.Д_ИсточникиСредств.ПустаяССылка)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВыдачаВПодОтчет <> 0
		|	И НЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка,
		|	ВТ_ДанныеЗаявки.ЦФО,
		|	ВТ_ДанныеЗаявки.Подразделение,
		|	ВТ_ДанныеЗаявки.НомерСтроки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО,
		|	NULL,
		|	NULL,
		|	NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Предприятие_ТипПлатежа_ВПодОтчет.Ссылка КАК Ссылка,
		|	ВТ_Предприятие_ТипПлатежа_ВПодОтчет.НомерСтрокиВладельца КАК НомерСтрокиВладельца,
		|	ВТ_Предприятие_ТипПлатежа_ВПодОтчет.ЦФО КАК ЦФО,
		|	ВТ_Предприятие_ТипПлатежа_ВПодОтчет.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТ_Предприятие_ТипПлатежа
		|ИЗ
		|	ВТ_Предприятие_ТипПлатежа_ВПодОтчет КАК ВТ_Предприятие_ТипПлатежа_ВПодОтчет
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Предприятие_ТипПлатежа_ВПодОтчет.Ссылка,
		|	ВТ_Предприятие_ТипПлатежа_ВПодОтчет.ЦФО,
		|	ВТ_Предприятие_ТипПлатежа_ВПодОтчет.Подразделение,
		|	ВТ_Предприятие_ТипПлатежа_ВПодОтчет.НомерСтрокиВладельца
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка,
		|	ВТ_ДанныеЗаявки.НомерСтроки,
		|	ВТ_ДанныеЗаявки.ЦФО,
		|	ВТ_ДанныеЗаявки.Подразделение
		|ИЗ
		|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные КАК ВТ_МаршрутыДвиженияЗаявокСводныеДанные
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПустоеПодразделение КАК ВТ_ПустоеПодразделение
		|			ПО (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_ПустоеПодразделение.Ссылка))
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НеПустоеПредприятие КАК ВТ_НеПустоеПредприятие
		|			ПО (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустоеПредприятие.Ссылка))
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НеПустаяСтатьяДДС КАК ВТ_НеПустаяСтатьяДДС
		|			ПО (НЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустаяСтатьяДДС.Ссылка))
		|		ПО ВТ_ДанныеЗаявки.ТипИсточника = ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ТипПлатежа
		|			И (ВТ_ДанныеЗаявки.ЦФО В (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Предприятие))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатьяИПредприятие КАК ВТ_СтатьяИПредприятие
		|		ПО (НЕ ВТ_ДанныеЗаявки.НомерСтроки В (ВТ_СтатьяИПредприятие.НомерСтрокиВладельца))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПредприятиеПодразделение КАК ВТ_ПредприятиеПодразделение
		|		ПО (НЕ ВТ_ДанныеЗаявки.НомерСтроки В (ВТ_ПредприятиеПодразделение.НомерСтрокиВладельца))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Предприятие_ТипПлатежа_ВПодОтчет КАК ВТ_Предприятие_ТипПлатежа_ВПодОтчет
		|		ПО (НЕ ВТ_ДанныеЗаявки.НомерСтроки В (ВТ_Предприятие_ТипПлатежа_ВПодОтчет.НомерСтрокиВладельца))
		|ГДЕ
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Предприятие В (ВТ_ДанныеЗаявки.ЦФО)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустоеПредприятие.Ссылка)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВидДокумента В(&РеестрЗаявок)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_ПустоеПодразделение.Ссылка)
		|	И НЕ ВТ_ДанныеЗаявки.НомерСтроки В
		|				(ВЫБРАТЬ
		|					ВТ_ПредприятиеПодразделение.НомерСтрокиВладельца
		|				ИЗ
		|					ВТ_ПредприятиеПодразделение КАК ВТ_ПредприятиеПодразделение)
		|	И НЕ ВТ_ДанныеЗаявки.НомерСтроки В
		|				(ВЫБРАТЬ
		|					ВТ_СтатьяИПредприятие.НомерСтрокиВладельца
		|				ИЗ
		|					ВТ_СтатьяИПредприятие КАК ВТ_СтатьяИПредприятие)
		|	И НЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В
		|				(ВЫБРАТЬ
		|					ВТ_НеПустаяСтатьяДДС.Ссылка
		|				ИЗ
		|					ВТ_НеПустаяСтатьяДДС КАК ВТ_НеПустаяСтатьяДДС)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ТипПлатежа <> ЗНАЧЕНИЕ(Перечисление.Д_ИсточникиСредств.ПустаяССылка)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВыдачаВПодОтчет = 0
		|	И НЕ ВТ_ДанныеЗаявки.НомерСтроки В
		|				(ВЫБРАТЬ
		|					ВТ_Предприятие_ТипПлатежа_ВПодОтчет.НомерСтрокиВладельца
		|				ИЗ
		|					ВТ_Предприятие_ТипПлатежа_ВПодОтчет КАК ВТ_Предприятие_ТипПлатежа_ВПодОтчет)
		|	И НЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка,
		|	ВТ_ДанныеЗаявки.ЦФО,
		|	ВТ_ДанныеЗаявки.Подразделение,
		|	ВТ_ДанныеЗаявки.НомерСтроки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Предприятие_ТипПлатежа.Ссылка КАК Ссылка,
		|	ВТ_Предприятие_ТипПлатежа.НомерСтрокиВладельца КАК НомерСтрокиВладельца,
		|	ВТ_Предприятие_ТипПлатежа.ЦФО КАК ЦФО,
		|	ВТ_Предприятие_ТипПлатежа.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТ_Предприятие
		|ИЗ
		|	ВТ_Предприятие_ТипПлатежа КАК ВТ_Предприятие_ТипПлатежа
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Предприятие_ТипПлатежа.Ссылка,
		|	ВТ_Предприятие_ТипПлатежа.ЦФО,
		|	ВТ_Предприятие_ТипПлатежа.Подразделение,
		|	ВТ_Предприятие_ТипПлатежа.НомерСтрокиВладельца
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка,
		|	ВТ_ДанныеЗаявки.НомерСтроки,
		|	ВТ_ДанныеЗаявки.ЦФО,
		|	ВТ_ДанныеЗаявки.Подразделение
		|ИЗ
		|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные КАК ВТ_МаршрутыДвиженияЗаявокСводныеДанные
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПустоеПодразделение КАК ВТ_ПустоеПодразделение
		|			ПО (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_ПустоеПодразделение.Ссылка))
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НеПустоеПредприятие КАК ВТ_НеПустоеПредприятие
		|			ПО (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустоеПредприятие.Ссылка))
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НеПустаяСтатьяДДС КАК ВТ_НеПустаяСтатьяДДС
		|			ПО (НЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустаяСтатьяДДС.Ссылка))
		|		ПО (ВТ_ДанныеЗаявки.ЦФО В (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Предприятие))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПредприятиеПодразделение КАК ВТ_ПредприятиеПодразделение
		|		ПО (НЕ ВТ_ДанныеЗаявки.НомерСтроки В (ВТ_ПредприятиеПодразделение.НомерСтрокиВладельца))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатьяИПредприятие КАК ВТ_СтатьяИПредприятие
		|		ПО (НЕ ВТ_ДанныеЗаявки.НомерСтроки В (ВТ_СтатьяИПредприятие.НомерСтрокиВладельца))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Предприятие_ТипПлатежа КАК ВТ_Предприятие_ТипПлатежа
		|		ПО (НЕ ВТ_ДанныеЗаявки.НомерСтроки В (ВТ_Предприятие_ТипПлатежа.НомерСтрокиВладельца))
		|ГДЕ
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Предприятие В (ВТ_ДанныеЗаявки.ЦФО)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустоеПредприятие.Ссылка)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВидДокумента В(&РеестрЗаявок)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_ПустоеПодразделение.Ссылка)
		|	И НЕ ВТ_ДанныеЗаявки.НомерСтроки В
		|				(ВЫБРАТЬ
		|					ВТ_ПредприятиеПодразделение.НомерСтрокиВладельца
		|				ИЗ
		|					ВТ_ПредприятиеПодразделение КАК ВТ_ПредприятиеПодразделение)
		|	И НЕ ВТ_ДанныеЗаявки.НомерСтроки В
		|				(ВЫБРАТЬ
		|					ВТ_СтатьяИПредприятие.НомерСтрокиВладельца
		|				ИЗ
		|					ВТ_СтатьяИПредприятие КАК ВТ_СтатьяИПредприятие)
		|	И НЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В
		|				(ВЫБРАТЬ
		|					ВТ_НеПустаяСтатьяДДС.Ссылка
		|				ИЗ
		|					ВТ_НеПустаяСтатьяДДС КАК ВТ_НеПустаяСтатьяДДС)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ТипПлатежа = ЗНАЧЕНИЕ(Перечисление.Д_ИсточникиСредств.ПустаяССылка)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВыдачаВПодОтчет = 0
		|	И НЕ ВТ_ДанныеЗаявки.НомерСтроки В
		|				(ВЫБРАТЬ
		|					ВТ_Предприятие_ТипПлатежа.НомерСтрокиВладельца
		|				ИЗ
		|					ВТ_Предприятие_ТипПлатежа КАК ВТ_Предприятие_ТипПлатежа)
		|	И НЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка,
		|	ВТ_ДанныеЗаявки.ЦФО,
		|	ВТ_ДанныеЗаявки.Подразделение,
		|	ВТ_ДанныеЗаявки.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СтатьяИПредприятие.НомерСтрокиВладельца КАК НомерСтрокиВладельца,
		|	ВТ_СтатьяИПредприятие.Ссылка КАК Ссылка,
		|	ВТ_СтатьяИПредприятие.ЦФО КАК ЦФО,
		|	ВТ_СтатьяИПредприятие.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТ_Статьи_ТипПлатежа_ВПодОтчет
		|ИЗ
		|	ВТ_СтатьяИПредприятие КАК ВТ_СтатьяИПредприятие
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_СтатьяИПредприятие.Ссылка,
		|	ВТ_СтатьяИПредприятие.ЦФО,
		|	ВТ_СтатьяИПредприятие.Подразделение,
		|	ВТ_СтатьяИПредприятие.НомерСтрокиВладельца
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ДанныеЗаявки.НомерСтроки,
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка,
		|	ВТ_ДанныеЗаявки.ЦФО,
		|	ВТ_ДанныеЗаявки.Подразделение
		|ИЗ
		|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные КАК ВТ_МаршрутыДвиженияЗаявокСводныеДанные
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НеПустоеПредприятие КАК ВТ_НеПустоеПредприятие
		|			ПО (НЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустоеПредприятие.Ссылка))
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПустоеПодразделение КАК ВТ_ПустоеПодразделение
		|			ПО (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_ПустоеПодразделение.Ссылка))
		|		ПО (ВТ_ДанныеЗаявки.ТипИсточника = ЗНАЧЕНИЕ(Перечисление.Д_ИсточникиСредств.БезНал)
		|				ИЛИ ВТ_ДанныеЗаявки.ВыдачаВПодОтчет = ВЫБОР
		|					КОГДА ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВыдачаВПодОтчет = 1
		|						ТОГДА ИСТИНА
		|					КОГДА ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВыдачаВПодОтчет = -1
		|						ТОГДА ЛОЖЬ
		|					ИНАЧЕ 0
		|				КОНЕЦ)
		|			И ВТ_ДанныеЗаявки.ТипИсточника = ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ТипПлатежа
		|			И (ВТ_ДанныеЗаявки.СтатьяДДС В (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.СтатьяДДС))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СтатьяИПредприятие КАК ВТ_СтатьяИПредприятие
		|		ПО (НЕ ВТ_ДанныеЗаявки.НомерСтроки В (ВТ_СтатьяИПредприятие.НомерСтрокиВладельца))
		|ГДЕ
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.СтатьяДДС В (ВТ_ДанныеЗаявки.СтатьяДДС)
		|	И НЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В
		|				(ВЫБРАТЬ
		|					ВТ_НеПустоеПредприятие.Ссылка
		|				ИЗ
		|					ВТ_НеПустоеПредприятие КАК ВТ_НеПустоеПредприятие)
		|	И НЕ ВТ_ДанныеЗаявки.НомерСтроки В
		|				(ВЫБРАТЬ
		|					ВТ_СтатьяИПредприятие.НомерСтрокиВладельца
		|				ИЗ
		|					ВТ_СтатьяИПредприятие КАК ВТ_СтатьяИПредприятие)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВидДокумента В(&РеестрЗаявок)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_ПустоеПодразделение.Ссылка)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ТипПлатежа <> ЗНАЧЕНИЕ(Перечисление.Д_ИсточникиСредств.ПустаяССылка)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВыдачаВПодОтчет <> 0
		|	И НЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка,
		|	ВТ_ДанныеЗаявки.ЦФО,
		|	ВТ_ДанныеЗаявки.Подразделение,
		|	ВТ_ДанныеЗаявки.НомерСтроки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	НЕОПРЕДЕЛЕНО,
		|	NULL,
		|	NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Статьи_ТипПлатежа_ВПодОтчет.НомерСтрокиВладельца КАК НомерСтрокиВладельца,
		|	ВТ_Статьи_ТипПлатежа_ВПодОтчет.Ссылка КАК Ссылка,
		|	ВТ_Статьи_ТипПлатежа_ВПодОтчет.ЦФО КАК ЦФО,
		|	ВТ_Статьи_ТипПлатежа_ВПодОтчет.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТ_Статьи_ТипПлатежа
		|ИЗ
		|	ВТ_Статьи_ТипПлатежа_ВПодОтчет КАК ВТ_Статьи_ТипПлатежа_ВПодОтчет
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Статьи_ТипПлатежа_ВПодОтчет.Ссылка,
		|	ВТ_Статьи_ТипПлатежа_ВПодОтчет.ЦФО,
		|	ВТ_Статьи_ТипПлатежа_ВПодОтчет.Подразделение,
		|	ВТ_Статьи_ТипПлатежа_ВПодОтчет.НомерСтрокиВладельца
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ДанныеЗаявки.НомерСтроки,
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка,
		|	ВТ_ДанныеЗаявки.ЦФО,
		|	ВТ_ДанныеЗаявки.Подразделение
		|ИЗ
		|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные КАК ВТ_МаршрутыДвиженияЗаявокСводныеДанные
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НеПустоеПредприятие КАК ВТ_НеПустоеПредприятие
		|			ПО (НЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустоеПредприятие.Ссылка))
		|		ПО ВТ_ДанныеЗаявки.ТипИсточника = ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ТипПлатежа
		|			И (ВТ_ДанныеЗаявки.СтатьяДДС В (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.СтатьяДДС))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Статьи_ТипПлатежа_ВПодОтчет КАК ВТ_Статьи_ТипПлатежа_ВПодОтчет
		|		ПО (НЕ ВТ_ДанныеЗаявки.НомерСтроки В (ВТ_Статьи_ТипПлатежа_ВПодОтчет.НомерСтрокиВладельца))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатьяИПредприятие КАК ВТ_СтатьяИПредприятие
		|		ПО (НЕ ВТ_ДанныеЗаявки.НомерСтроки В (ВТ_СтатьяИПредприятие.НомерСтрокиВладельца))
		|ГДЕ
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.СтатьяДДС В (ВТ_ДанныеЗаявки.СтатьяДДС)
		|	И НЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В
		|				(ВЫБРАТЬ
		|					ВТ_НеПустоеПредприятие.Ссылка
		|				ИЗ
		|					ВТ_НеПустоеПредприятие КАК ВТ_НеПустоеПредприятие)
		|	И НЕ ВТ_ДанныеЗаявки.НомерСтроки В
		|				(ВЫБРАТЬ
		|					ВТ_СтатьяИПредприятие.НомерСтрокиВладельца
		|				ИЗ
		|					ВТ_СтатьяИПредприятие КАК ВТ_СтатьяИПредприятие)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВидДокумента В(&РеестрЗаявок)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ТипПлатежа <> ЗНАЧЕНИЕ(Перечисление.Д_ИсточникиСредств.ПустаяССылка)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВыдачаВПодОтчет = 0
		|	И НЕ ВТ_ДанныеЗаявки.НомерСтроки В
		|				(ВЫБРАТЬ
		|					ВТ_Статьи_ТипПлатежа_ВПодОтчет.НомерСтрокиВладельца
		|				ИЗ
		|					ВТ_Статьи_ТипПлатежа_ВПодОтчет КАК ВТ_Статьи_ТипПлатежа_ВПодОтчет)
		|	И НЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка,
		|	ВТ_ДанныеЗаявки.ЦФО,
		|	ВТ_ДанныеЗаявки.Подразделение,
		|	ВТ_ДанныеЗаявки.НомерСтроки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	НЕОПРЕДЕЛЕНО,
		|	NULL,
		|	NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Статьи_ТипПлатежа.НомерСтрокиВладельца КАК НомерСтрокиВладельца,
		|	ВТ_Статьи_ТипПлатежа.Ссылка КАК Ссылка,
		|	ВТ_Статьи_ТипПлатежа.ЦФО КАК ЦФО,
		|	ВТ_Статьи_ТипПлатежа.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТ_Статьи
		|ИЗ
		|	ВТ_Статьи_ТипПлатежа КАК ВТ_Статьи_ТипПлатежа
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Статьи_ТипПлатежа.Ссылка,
		|	ВТ_Статьи_ТипПлатежа.ЦФО,
		|	ВТ_Статьи_ТипПлатежа.Подразделение,
		|	ВТ_Статьи_ТипПлатежа.НомерСтрокиВладельца
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ДанныеЗаявки.НомерСтроки,
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка,
		|	ВТ_ДанныеЗаявки.ЦФО,
		|	ВТ_ДанныеЗаявки.Подразделение
		|ИЗ
		|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные КАК ВТ_МаршрутыДвиженияЗаявокСводныеДанные
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НеПустоеПредприятие КАК ВТ_НеПустоеПредприятие
		|			ПО (НЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустоеПредприятие.Ссылка))
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НеПустаяСтатьяДДС КАК ВТ_НеПустаяСтатьяДДС
		|			ПО (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустаяСтатьяДДС.Ссылка))
		|		ПО (ВТ_ДанныеЗаявки.СтатьяДДС В (ВТ_МаршрутыДвиженияЗаявокСводныеДанные.СтатьяДДС))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Статьи_ТипПлатежа КАК ВТ_Статьи_ТипПлатежа
		|		ПО (НЕ ВТ_ДанныеЗаявки.НомерСтроки В (ВТ_Статьи_ТипПлатежа.НомерСтрокиВладельца))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатьяИПредприятие КАК ВТ_СтатьяИПредприятие
		|		ПО (НЕ ВТ_ДанныеЗаявки.НомерСтроки В (ВТ_СтатьяИПредприятие.НомерСтрокиВладельца))
		|ГДЕ
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.СтатьяДДС В (ВТ_ДанныеЗаявки.СтатьяДДС)
		|	И НЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В
		|				(ВЫБРАТЬ
		|					ВТ_НеПустоеПредприятие.Ссылка
		|				ИЗ
		|					ВТ_НеПустоеПредприятие КАК ВТ_НеПустоеПредприятие)
		|	И НЕ ВТ_ДанныеЗаявки.НомерСтроки В
		|				(ВЫБРАТЬ
		|					ВТ_СтатьяИПредприятие.НомерСтрокиВладельца
		|				ИЗ
		|					ВТ_СтатьяИПредприятие КАК ВТ_СтатьяИПредприятие)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВидДокумента В(&РеестрЗаявок)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ТипПлатежа = ЗНАЧЕНИЕ(Перечисление.Д_ИсточникиСредств.ПустаяССылка)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВыдачаВПодОтчет = 0
		|	И НЕ ВТ_ДанныеЗаявки.НомерСтроки В
		|				(ВЫБРАТЬ
		|					ВТ_Статьи_ТипПлатежа.НомерСтрокиВладельца
		|				ИЗ
		|					ВТ_Статьи_ТипПлатежа КАК ВТ_Статьи_ТипПлатежа)
		|	И НЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ПометкаУдаления
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустаяСтатьяДДС.Ссылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка,
		|	ВТ_ДанныеЗаявки.ЦФО,
		|	ВТ_ДанныеЗаявки.Подразделение,
		|	ВТ_ДанныеЗаявки.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Статьи.Ссылка КАК Ссылка,
		|	ВТ_Статьи.НомерСтрокиВладельца КАК НомерСтрокиВладельца,
		|	ВТ_Статьи.ЦФО КАК ЦФО,
		|	ВТ_Статьи.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТ_ИтоговыеДанные_ТипПлатежа_ВПодОтчет
		|ИЗ
		|	ВТ_Статьи КАК ВТ_Статьи
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Статьи.Ссылка,
		|	ВТ_Статьи.ЦФО,
		|	ВТ_Статьи.Подразделение,
		|	ВТ_Статьи.НомерСтрокиВладельца
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка,
		|	ВТ_ДанныеЗаявки.НомерСтроки,
		|	ВТ_ДанныеЗаявки.ЦФО,
		|	ВТ_ДанныеЗаявки.Подразделение
		|ИЗ
		|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные КАК ВТ_МаршрутыДвиженияЗаявокСводныеДанные
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НеПустаяСтатьяДДС КАК ВТ_НеПустаяСтатьяДДС
		|			ПО (НЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустаяСтатьяДДС.Ссылка))
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НеПустоеПредприятие КАК ВТ_НеПустоеПредприятие
		|			ПО (НЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустоеПредприятие.Ссылка))
		|		ПО (ВТ_ДанныеЗаявки.ТипИсточника = ЗНАЧЕНИЕ(Перечисление.Д_ИсточникиСредств.БезНал)
		|				ИЛИ ВТ_ДанныеЗаявки.ВыдачаВПодОтчет = ВЫБОР
		|					КОГДА ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВыдачаВПодОтчет = 1
		|						ТОГДА ИСТИНА
		|					КОГДА ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВыдачаВПодОтчет = -1
		|						ТОГДА ЛОЖЬ
		|					ИНАЧЕ 0
		|				КОНЕЦ)
		|			И ВТ_ДанныеЗаявки.ТипИсточника = ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ТипПлатежа
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Статьи КАК ВТ_Статьи
		|		ПО (НЕ ВТ_ДанныеЗаявки.НомерСтроки В (ВТ_Статьи.НомерСтрокиВладельца))
		|ГДЕ
		|	НЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В
		|				(ВЫБРАТЬ
		|					ВТ_НеПустаяСтатьяДДС.Ссылка
		|				ИЗ
		|					ВТ_НеПустаяСтатьяДДС КАК ВТ_НеПустаяСтатьяДДС)
		|	И НЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В
		|				(ВЫБРАТЬ
		|					ВТ_НеПустоеПредприятие.Ссылка
		|				ИЗ
		|					ВТ_НеПустоеПредприятие КАК ВТ_НеПустоеПредприятие)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВидДокумента В(&РеестрЗаявок)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ТипПлатежа <> ЗНАЧЕНИЕ(Перечисление.Д_ИсточникиСредств.ПустаяССылка)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВыдачаВПодОтчет <> 0
		|	И НЕ ВТ_ДанныеЗаявки.НомерСтроки В
		|				(ВЫБРАТЬ
		|					ВТ_Статьи.НомерСтрокиВладельца
		|				ИЗ
		|					ВТ_Статьи КАК ВТ_Статьи)
		|	И НЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка,
		|	ВТ_ДанныеЗаявки.ЦФО,
		|	ВТ_ДанныеЗаявки.Подразделение,
		|	ВТ_ДанныеЗаявки.НомерСтроки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Предприятие.Ссылка,
		|	ВТ_Предприятие.НомерСтрокиВладельца,
		|	ВТ_Предприятие.ЦФО,
		|	ВТ_Предприятие.Подразделение
		|ИЗ
		|	ВТ_Предприятие КАК ВТ_Предприятие
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Предприятие.Ссылка,
		|	ВТ_Предприятие.ЦФО,
		|	ВТ_Предприятие.Подразделение,
		|	ВТ_Предприятие.НомерСтрокиВладельца
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ИтоговыеДанные_ТипПлатежа_ВПодОтчет.Ссылка КАК Ссылка,
		|	ВТ_ИтоговыеДанные_ТипПлатежа_ВПодОтчет.НомерСтрокиВладельца КАК НомерСтрокиВладельца,
		|	ВТ_ИтоговыеДанные_ТипПлатежа_ВПодОтчет.ЦФО КАК ЦФО,
		|	ВТ_ИтоговыеДанные_ТипПлатежа_ВПодОтчет.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТ_ИтоговыеДанные_ТипПлатежа
		|ИЗ
		|	ВТ_ИтоговыеДанные_ТипПлатежа_ВПодОтчет КАК ВТ_ИтоговыеДанные_ТипПлатежа_ВПодОтчет
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ИтоговыеДанные_ТипПлатежа_ВПодОтчет.Ссылка,
		|	ВТ_ИтоговыеДанные_ТипПлатежа_ВПодОтчет.ЦФО,
		|	ВТ_ИтоговыеДанные_ТипПлатежа_ВПодОтчет.Подразделение,
		|	ВТ_ИтоговыеДанные_ТипПлатежа_ВПодОтчет.НомерСтрокиВладельца
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка,
		|	ВТ_ДанныеЗаявки.НомерСтроки,
		|	ВТ_ДанныеЗаявки.ЦФО,
		|	ВТ_ДанныеЗаявки.Подразделение
		|ИЗ
		|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные КАК ВТ_МаршрутыДвиженияЗаявокСводныеДанные
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НеПустаяСтатьяДДС КАК ВТ_НеПустаяСтатьяДДС
		|			ПО (НЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустаяСтатьяДДС.Ссылка))
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НеПустоеПредприятие КАК ВТ_НеПустоеПредприятие
		|			ПО (НЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В (ВТ_НеПустоеПредприятие.Ссылка))
		|		ПО ВТ_ДанныеЗаявки.ТипИсточника = ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ТипПлатежа
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИтоговыеДанные_ТипПлатежа_ВПодОтчет КАК ВТ_ИтоговыеДанные_ТипПлатежа_ВПодОтчет
		|		ПО (НЕ ВТ_ДанныеЗаявки.НомерСтроки В (ВТ_ИтоговыеДанные_ТипПлатежа_ВПодОтчет.НомерСтрокиВладельца))
		|ГДЕ
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВидДокумента В(&РеестрЗаявок)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ТипПлатежа <> ЗНАЧЕНИЕ(Перечисление.Д_ИсточникиСредств.ПустаяССылка)
		|	И ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ВыдачаВПодОтчет = 0
		|	И НЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные.ПометкаУдаления
		|	И НЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В
		|				(ВЫБРАТЬ
		|					ВТ_НеПустаяСтатьяДДС.Ссылка
		|				ИЗ
		|					ВТ_НеПустаяСтатьяДДС КАК ВТ_НеПустаяСтатьяДДС)
		|	И НЕ ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка В
		|				(ВЫБРАТЬ
		|					ВТ_НеПустоеПредприятие.Ссылка
		|				ИЗ
		|					ВТ_НеПустоеПредприятие КАК ВТ_НеПустоеПредприятие)
		|	И НЕ ВТ_ДанныеЗаявки.НомерСтроки В
		|				(ВЫБРАТЬ
		|					ВТ_ИтоговыеДанные_ТипПлатежа_ВПодОтчет.НомерСтрокиВладельца
		|				ИЗ
		|					ВТ_ИтоговыеДанные_ТипПлатежа_ВПодОтчет КАК ВТ_ИтоговыеДанные_ТипПлатежа_ВПодОтчет)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_МаршрутыДвиженияЗаявокСводныеДанные.Ссылка,
		|	ВТ_ДанныеЗаявки.ЦФО,
		|	ВТ_ДанныеЗаявки.Подразделение,
		|	ВТ_ДанныеЗаявки.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ИтоговыеДанные_ТипПлатежа.Ссылка КАК Маршрут,
		|	ВТ_ИтоговыеДанные_ТипПлатежа.ЦФО КАК ЦФО,
		|	ВТ_ИтоговыеДанные_ТипПлатежа.Подразделение КАК Подразделение,
		|	ВТ_ИтоговыеДанные_ТипПлатежа.НомерСтрокиВладельца КАК НомерСтрокиДокумента
		|ПОМЕСТИТЬ ВТ_КонечныеДанные
		|ИЗ
		|	ВТ_ИтоговыеДанные_ТипПлатежа КАК ВТ_ИтоговыеДанные_ТипПлатежа
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ИтоговыеДанные_ТипПлатежа.Ссылка,
		|	ВТ_ИтоговыеДанные_ТипПлатежа.ЦФО,
		|	ВТ_ИтоговыеДанные_ТипПлатежа.Подразделение,
		|	ВТ_ИтоговыеДанные_ТипПлатежа.НомерСтрокиВладельца
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявок.Ссылка,
		|	ВТ_ДанныеЗаявки.ЦФО,
		|	ВТ_ДанныеЗаявки.Подразделение,
		|	ВТ_ДанныеЗаявки.НомерСтроки
		|ИЗ
		|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки,
		|	Справочник.МаршрутыДвиженияЗаявок КАК МаршрутыДвиженияЗаявок
		|ГДЕ
		|	НЕ МаршрутыДвиженияЗаявок.Ссылка В
		|				(ВЫБРАТЬ
		|					ВТ_НеПустаяСтатьяДДС.Ссылка
		|				ИЗ
		|					ВТ_НеПустаяСтатьяДДС КАК ВТ_НеПустаяСтатьяДДС)
		|	И НЕ МаршрутыДвиженияЗаявок.Ссылка В
		|				(ВЫБРАТЬ
		|					ВТ_НеПустоеПредприятие.Ссылка
		|				ИЗ
		|					ВТ_НеПустоеПредприятие КАК ВТ_НеПустоеПредприятие)
		|	И МаршрутыДвиженияЗаявок.ВидДокумента В(&РеестрЗаявок)
		|	И МаршрутыДвиженияЗаявок.Ссылка.ТипПлатежа = ЗНАЧЕНИЕ(Перечисление.Д_ИсточникиСредств.ПустаяССылка)
		|	И МаршрутыДвиженияЗаявок.Ссылка.ВыдачаВПодОтчет = 0
		|	И НЕ ВТ_ДанныеЗаявки.НомерСтроки В
		|				(ВЫБРАТЬ
		|					ВТ_ИтоговыеДанные_ТипПлатежа.НомерСтрокиВладельца
		|				ИЗ
		|					ВТ_ИтоговыеДанные_ТипПлатежа КАК ВТ_ИтоговыеДанные_ТипПлатежа)
		|	И НЕ МаршрутыДвиженияЗаявок.Ссылка.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	МаршрутыДвиженияЗаявок.Ссылка,
		|	ВТ_ДанныеЗаявки.ЦФО,
		|	ВТ_ДанныеЗаявки.Подразделение,
		|	ВТ_ДанныеЗаявки.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_КонечныеДанные.Маршрут КАК Маршрут,
		|	""Согласование"" КАК Действие,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.СубъектСогласования КАК СубъектСогласования,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.НомерСтроки КАК НомерСтроки,
		|	ВТ_КонечныеДанные.ЦФО КАК Предприятие,
		|	ВЫБОР
		|		КОГДА ВТ_КонечныеДанные.ЦФО.УчетПоПодразделениям
		|			ТОГДА ВТ_КонечныеДанные.Подразделение
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Подразделение,
		|	ЗНАЧЕНИЕ(Справочник.Д_ТипыПрикрепляемыхДокументов.ПустаяСсылка) КАК ДокументОбязательныйКПрикреплению,
		|	ЕСТЬNULL(МаршрутыДвиженияЗаявокДопУсловия.Условие, """") КАК ДопУсловие,
		|	ВТ_КонечныеДанные.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.РольПользователя КАК РольПользователя,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.ИДГруппы КАК ИДГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.ТипГруппы КАК ТипГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.Уровень КАК Уровень,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.Обязателен КАК Обязателен,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.МожетРедактировать КАК МожетРедактировать,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.ВремяНаВыполнение КАК ВремяНаВыполнение
		|ИЗ
		|	ВТ_КонечныеДанные КАК ВТ_КонечныеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок.МаршрутЗаявки КАК МаршрутыДвиженияЗаявокМаршрутЗаявки
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок.ДопУсловия КАК МаршрутыДвиженияЗаявокДопУсловия
		|			ПО МаршрутыДвиженияЗаявокМаршрутЗаявки.ИДСтроки = МаршрутыДвиженияЗаявокДопУсловия.ИУДСтрокиВладельца
		|		ПО ВТ_КонечныеДанные.Маршрут = МаршрутыДвиженияЗаявокМаршрутЗаявки.Ссылка
		|ГДЕ
		|	НЕ МаршрутыДвиженияЗаявокМаршрутЗаявки.СубъектСогласования ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_КонечныеДанные.Маршрут,
		|	""Исполнение"",
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.Исполнитель,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.НомерСтроки,
		|	ВТ_КонечныеДанные.ЦФО,
		|	ВЫБОР
		|		КОГДА ВТ_КонечныеДанные.ЦФО.УчетПоПодразделениям
		|			ТОГДА ВТ_КонечныеДанные.Подразделение
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	ЗНАЧЕНИЕ(Справочник.Д_ТипыПрикрепляемыхДокументов.ПустаяСсылка),
		|	ЕСТЬNULL(МаршрутыДвиженияЗаявокДопУсловия.Условие, """"),
		|	ВТ_КонечныеДанные.НомерСтрокиДокумента,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.РольПользователя,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.ИДГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.ТипГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.Уровень,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ
		|	ВТ_КонечныеДанные КАК ВТ_КонечныеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок.МаршрутИсполнения КАК МаршрутыДвиженияЗаявокМаршрутИсполнения
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок.ДопУсловия КАК МаршрутыДвиженияЗаявокДопУсловия
		|			ПО МаршрутыДвиженияЗаявокМаршрутИсполнения.ИДСтроки = МаршрутыДвиженияЗаявокДопУсловия.ИУДСтрокиВладельца
		|		ПО ВТ_КонечныеДанные.Маршрут = МаршрутыДвиженияЗаявокМаршрутИсполнения.Ссылка
		|ГДЕ
		|	НЕ МаршрутыДвиженияЗаявокМаршрутИсполнения.Исполнитель ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_КонечныеДанные.Маршрут,
		|	""Ознакомление"",
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.Пользователь,
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.НомерСтроки,
		|	ВТ_КонечныеДанные.ЦФО,
		|	ВЫБОР
		|		КОГДА ВТ_КонечныеДанные.ЦФО.УчетПоПодразделениям
		|			ТОГДА ВТ_КонечныеДанные.Подразделение
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	ЗНАЧЕНИЕ(Справочник.Д_ТипыПрикрепляемыхДокументов.ПустаяСсылка),
		|	"""",
		|	ВТ_КонечныеДанные.НомерСтрокиДокумента,
		|	"""",
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.ИДГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.ТипГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.Уровень,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ
		|	ВТ_КонечныеДанные КАК ВТ_КонечныеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок.МаршрутОзнакомления КАК МаршрутыДвиженияЗаявокМаршрутОзнакомления
		|		ПО ВТ_КонечныеДанные.Маршрут = МаршрутыДвиженияЗаявокМаршрутОзнакомления.Ссылка
		|ГДЕ
		|	НЕ МаршрутыДвиженияЗаявокМаршрутОзнакомления.Пользователь ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Справочники.Д_ВидыВнутреннихДокументов.ЗаявкаНаОплату);
		//МассивТипов.Добавить(Справочники.Д_ВидыВнутреннихДокументов.ЗаявкаНаФинансирование);
		Запрос.УстановитьПараметр("РеестрЗаявок", МассивТипов);
				
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.Д_ЗаявкаНаСогласованиеДоговора") Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Д_ЗаявкаНаСогласованиеДоговора.Предприятие КАК Предприятие,
		|	Д_ЗаявкаНаСогласованиеДоговора.СтрЦФО КАК СтрЦФО
		|ПОМЕСТИТЬ ВТ_ЗаявкаНаСогласованиеДоговора
		|ИЗ
		|	Документ.Д_ЗаявкаНаСогласованиеДоговора КАК Д_ЗаявкаНаСогласованиеДоговора
		|ГДЕ
		|	Д_ЗаявкаНаСогласованиеДоговора.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.СубъектСогласования КАК СубъектСогласования,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.НомерСтроки КАК НомерСтроки,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.Ссылка КАК Маршрут,
		|	""Согласование"" КАК Действие,
		|	ЗНАЧЕНИЕ(Справочник.Д_ТипыПрикрепляемыхДокументов.ПустаяСсылка) КАК ДокументОбязательныйКПрикреплению,
		|	ВТ_ЗаявкаНаСогласованиеДоговора.Предприятие КАК Предприятие,
		|	ВТ_ЗаявкаНаСогласованиеДоговора.СтрЦФО КАК Подразделение,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.РольПользователя КАК РольПользователя,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.ИДГруппы КАК ИДГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.ТипГруппы КАК ТипГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.Уровень КАК Уровень,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.ДопУсловия КАК ДопУсловия,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.Обязателен КАК Обязателен,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.МожетРедактировать КАК МожетРедактировать,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.ВремяНаВыполнение КАК ВремяНаВыполнение
		|ИЗ
		|	ВТ_ЗаявкаНаСогласованиеДоговора КАК ВТ_ЗаявкаНаСогласованиеДоговора
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок.МаршрутЗаявки КАК МаршрутыДвиженияЗаявокМаршрутЗаявки
		|		ПО ВТ_ЗаявкаНаСогласованиеДоговора.СтрЦФО = МаршрутыДвиженияЗаявокМаршрутЗаявки.Ссылка.Служба
		|ГДЕ
		|	НЕ МаршрутыДвиженияЗаявокМаршрутЗаявки.СубъектСогласования ЕСТЬ NULL
		|	И МаршрутыДвиженияЗаявокМаршрутЗаявки.Ссылка.ВидДокумента = &ВидДокумента
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.Пользователь,
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.НомерСтроки,
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.Ссылка,
		|	""Ознакомление"",
		|	ЗНАЧЕНИЕ(Справочник.Д_ТипыПрикрепляемыхДокументов.ПустаяСсылка),
		|	ВТ_ЗаявкаНаСогласованиеДоговора.Предприятие,
		|	ВТ_ЗаявкаНаСогласованиеДоговора.СтрЦФО,
		|	"""",
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.ИДГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.ТипГруппы,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ
		|	ВТ_ЗаявкаНаСогласованиеДоговора КАК ВТ_ЗаявкаНаСогласованиеДоговора
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок.МаршрутОзнакомления КАК МаршрутыДвиженияЗаявокМаршрутОзнакомления
		|		ПО ВТ_ЗаявкаНаСогласованиеДоговора.СтрЦФО = МаршрутыДвиженияЗаявокМаршрутОзнакомления.Ссылка.Служба
		|ГДЕ
		|	НЕ МаршрутыДвиженияЗаявокМаршрутОзнакомления.Пользователь ЕСТЬ NULL
		|	И МаршрутыДвиженияЗаявокМаршрутОзнакомления.Ссылка.ВидДокумента = &ВидДокумента
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.Исполнитель,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.НомерСтроки,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.Ссылка,
		|	""Исполнение"",
		|	ЗНАЧЕНИЕ(Справочник.Д_ТипыПрикрепляемыхДокументов.ПустаяСсылка),
		|	ВТ_ЗаявкаНаСогласованиеДоговора.Предприятие,
		|	ВТ_ЗаявкаНаСогласованиеДоговора.СтрЦФО,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.РольПользователя,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.ИДГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.ТипГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.Уровень,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.ДопУсловия,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ
		|	ВТ_ЗаявкаНаСогласованиеДоговора КАК ВТ_ЗаявкаНаСогласованиеДоговора
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок.МаршрутИсполнения КАК МаршрутыДвиженияЗаявокМаршрутИсполнения
		|		ПО ВТ_ЗаявкаНаСогласованиеДоговора.СтрЦФО = МаршрутыДвиженияЗаявокМаршрутИсполнения.Ссылка.Служба
		|ГДЕ
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.Ссылка.ВидДокумента = &ВидДокумента";
		Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
		Если ДокументОснование.ВидСЗ = Справочники.Д_ВидыВнутреннихДокументов.ЗаявкаНаСогласованиеДоговора ИЛИ ДокументОснование.ВидСЗ = Справочники.Д_ВидыВнутреннихДокументов.ЗаявкаНаСогласованиеДопСоглашения Тогда
			ВидДокумента = Справочники.Д_ВидыВнутреннихДокументов.ЗаявкаНаСогласованиеДоговора;
		//ИначеЕсли ДокументОснование.ВидСЗ = Справочники.Д_ВидыВнутреннихДокументов.СогласованиеДоговораСтроительствоТендер Тогда
		//	ВидДокумента = "Согласование договора (строительство-тендер)";
		//ИначеЕсли ДокументОснование.ВидСЗ = Справочники.Д_ВидыВнутреннихДокументов.СогласованиеДоговораТММ Тогда
		//	ВидДокумента = "Заявка на согласование договора по проведению ТММ";
		//ИначеЕсли ДокументОснование.ВидСЗ = Справочники.Д_ВидыВнутреннихДокументов.СогласованиеДоговораПоОплатеРБ Тогда
		//	ВидДокумента = "Заявка на согласование договора по оплате РБ(Премии)";
		Иначе 
			ВидДокумента = "";
		КонецЕсли;
		Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.Д_ЗаявкаНаОтгрузку") Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.СубъектСогласования КАК СубъектСогласования,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.НомерСтроки КАК НомерСтроки,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.Ссылка КАК Маршрут,
		|	""Согласование"" КАК Действие,
		|	NULL КАК ДокументОбязательныйКПрикреплению,
		|	Д_ЗаявкаНаОтгрузку.Предприятие КАК Предприятие,
		|	Д_ЗаявкаНаОтгрузку.Подразделение КАК Подразделение,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.РольПользователя КАК РольПользователя,
		|	ЕСТЬNULL(МаршрутыДвиженияЗаявокДопУсловия.Условие, """") КАК ДопУсловие,
		|	1 КАК НомерСтрокиДокумента,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.ИДГруппы КАК ИДГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.ТипГруппы КАК ТипГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.Уровень КАК Уровень,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.Обязателен КАК Обязателен,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.МожетРедактировать КАК МожетРедактировать
		|ИЗ
		|	Документ.Д_ЗаявкаНаОтгрузку КАК Д_ЗаявкаНаОтгрузку
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок.МаршрутЗаявки КАК МаршрутыДвиженияЗаявокМаршрутЗаявки
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок.ДопУсловия КАК МаршрутыДвиженияЗаявокДопУсловия
		|			ПО МаршрутыДвиженияЗаявокМаршрутЗаявки.ИДСтроки = МаршрутыДвиженияЗаявокДопУсловия.ИУДСтрокиВладельца
		|		ПО Д_ЗаявкаНаОтгрузку.Предприятие = МаршрутыДвиженияЗаявокМаршрутЗаявки.Ссылка.Предприятие
		|			И Д_ЗаявкаНаОтгрузку.ТипРеализации = МаршрутыДвиженияЗаявокМаршрутЗаявки.Ссылка.ТипРеализации
		|ГДЕ
		|	Д_ЗаявкаНаОтгрузку.Ссылка = &Ссылка
		|	И НЕ МаршрутыДвиженияЗаявокМаршрутЗаявки.СубъектСогласования ЕСТЬ NULL
		|	И МаршрутыДвиженияЗаявокМаршрутЗаявки.Ссылка.ВидДокумента = &ВидДокумента
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.Исполнитель,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.НомерСтроки,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.Ссылка,
		|	""Исполнение"",
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.ДокументОбязательныйКПрикреплению,
		|	Д_ЗаявкаНаОтгрузку.Предприятие,
		|	Д_ЗаявкаНаОтгрузку.Подразделение,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.РольПользователя,
		|	ЕСТЬNULL(МаршрутыДвиженияЗаявокДопУсловия.Условие, """"),
		|	1,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.ИДГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.ТипГруппы,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ
		|	Документ.Д_ЗаявкаНаОтгрузку КАК Д_ЗаявкаНаОтгрузку
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок.МаршрутИсполнения КАК МаршрутыДвиженияЗаявокМаршрутИсполнения
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок.ДопУсловия КАК МаршрутыДвиженияЗаявокДопУсловия
		|			ПО МаршрутыДвиженияЗаявокМаршрутИсполнения.ИДСтроки = МаршрутыДвиженияЗаявокДопУсловия.ИУДСтрокиВладельца
		|		ПО Д_ЗаявкаНаОтгрузку.Предприятие = МаршрутыДвиженияЗаявокМаршрутИсполнения.Ссылка.Предприятие
		|			И Д_ЗаявкаНаОтгрузку.ТипРеализации = МаршрутыДвиженияЗаявокМаршрутИсполнения.Ссылка.ТипРеализации
		|ГДЕ
		|	Д_ЗаявкаНаОтгрузку.Ссылка = &Ссылка
		|	И МаршрутыДвиженияЗаявокМаршрутИсполнения.Ссылка.ВидДокумента = &ВидДокумента
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.Пользователь,
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.НомерСтроки,
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.Ссылка,
		|	""Ознакомление"",
		|	NULL,
		|	Д_ЗаявкаНаОтгрузку.Предприятие,
		|	Д_ЗаявкаНаОтгрузку.Подразделение,
		|	"""",
		|	"""",
		|	1,
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.ИДГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.ТипГруппы,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ
		|	Документ.Д_ЗаявкаНаОтгрузку КАК Д_ЗаявкаНаОтгрузку
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок.МаршрутОзнакомления КАК МаршрутыДвиженияЗаявокМаршрутОзнакомления
		|		ПО Д_ЗаявкаНаОтгрузку.Предприятие = МаршрутыДвиженияЗаявокМаршрутОзнакомления.Ссылка.Предприятие
		|			И Д_ЗаявкаНаОтгрузку.ТипРеализации = МаршрутыДвиженияЗаявокМаршрутОзнакомления.Ссылка.ТипРеализации
		|ГДЕ
		|	Д_ЗаявкаНаОтгрузку.Ссылка = &Ссылка
		|	И МаршрутыДвиженияЗаявокМаршрутОзнакомления.Ссылка.ВидДокумента = &ВидДокумента";
		Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
		Запрос.УстановитьПараметр("ВидДокумента", Справочники.Д_ВидыВнутреннихДокументов.ЗаявкаНаОтгрузку);

	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.Д_ЗаявкаНаКадровоеДвижение") Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Д_ЗаявкаНаКадровоеДвижение.ПредприятиеУпр КАК ПредприятиеУпр,
		|	Д_ЗаявкаНаКадровоеДвижение.ПодразделениеУпр КАК ПодразделениеУпр,
		|	Д_ЗаявкаНаКадровоеДвижение.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ДанныеЗаявки
		|ИЗ
		|	Документ.Д_ЗаявкаНаКадровоеДвижение КАК Д_ЗаявкаНаКадровоеДвижение
		|ГДЕ
		|	Д_ЗаявкаНаКадровоеДвижение.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявок.Ссылка КАК Ссылка,
		|	ВТ_ДанныеЗаявки.ПредприятиеУпр КАК ПредприятиеУпр,
		|	ВТ_ДанныеЗаявки.ПодразделениеУпр КАК ПодразделениеУпр
		|ПОМЕСТИТЬ ВТ_Предприятие_Подразделение
		|ИЗ
		|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок КАК МаршрутыДвиженияЗаявок
		|		ПО ВТ_ДанныеЗаявки.ПредприятиеУпр = МаршрутыДвиженияЗаявок.Предприятие
		|			И ВТ_ДанныеЗаявки.ПодразделениеУпр = МаршрутыДвиженияЗаявок.Подразделение
		|			И (МаршрутыДвиженияЗаявок.ВидДокумента = &ВидДокумента)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявок.Ссылка КАК Ссылка,
		|	ВТ_ДанныеЗаявки.ПредприятиеУпр КАК ПредприятиеУпр,
		|	ВТ_ДанныеЗаявки.ПодразделениеУпр КАК ПодразделениеУпр
		|ПОМЕСТИТЬ ВТ_Предприятие
		|ИЗ
		|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок КАК МаршрутыДвиженияЗаявок
		|		ПО ВТ_ДанныеЗаявки.ПредприятиеУпр = МаршрутыДвиженияЗаявок.Предприятие
		|			И (МаршрутыДвиженияЗаявок.ВидДокумента = &ВидДокумента)
		|			И (МаршрутыДвиженияЗаявок.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявок.Ссылка КАК Ссылка,
		|	ВТ_ДанныеЗаявки.ПредприятиеУпр КАК ПредприятиеУпр,
		|	ВТ_ДанныеЗаявки.ПодразделениеУпр КАК ПодразделениеУпр
		|ПОМЕСТИТЬ ВТ_Все
		|ИЗ
		|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок КАК МаршрутыДвиженияЗаявок
		|		ПО (МаршрутыДвиженияЗаявок.ВидДокумента = &ВидДокумента)
		|			И (МаршрутыДвиженияЗаявок.Предприятие = ЗНАЧЕНИЕ(Справочник.Предприятия.ПустаяСсылка))
		|			И (МаршрутыДвиженияЗаявок.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявок.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(ВТ_Предприятие_Подразделение.ПредприятиеУпр, ЕСТЬNULL(ВТ_Предприятие.ПредприятиеУпр, ВТ_Все.ПредприятиеУпр)) КАК Предприятие,
		|	ЕСТЬNULL(ВТ_Предприятие_Подразделение.ПодразделениеУпр, ЕСТЬNULL(ВТ_Предприятие.ПодразделениеУпр, ВТ_Все.ПодразделениеУпр)) КАК Подразделение
		|ПОМЕСТИТЬ ВТ_НайденныйМаршрут
		|ИЗ
		|	Справочник.МаршрутыДвиженияЗаявок КАК МаршрутыДвиженияЗаявок
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Предприятие_Подразделение КАК ВТ_Предприятие_Подразделение
		|		ПО МаршрутыДвиженияЗаявок.Ссылка = ВТ_Предприятие_Подразделение.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Предприятие КАК ВТ_Предприятие
		|		ПО МаршрутыДвиженияЗаявок.Ссылка = ВТ_Предприятие.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Все КАК ВТ_Все
		|		ПО МаршрутыДвиженияЗаявок.Ссылка = ВТ_Все.Ссылка
		|ГДЕ
		|	ВЫБОР
		|			КОГДА НЕ ВТ_Предприятие_Подразделение.Ссылка ЕСТЬ NULL
		|				ТОГДА МаршрутыДвиженияЗаявок.Ссылка = ВТ_Предприятие_Подразделение.Ссылка
		|			ИНАЧЕ ВЫБОР
		|					КОГДА НЕ ВТ_Предприятие.Ссылка ЕСТЬ NULL
		|						ТОГДА МаршрутыДвиженияЗаявок.Ссылка = ВТ_Предприятие.Ссылка
		|					ИНАЧЕ МаршрутыДвиженияЗаявок.Ссылка = ВТ_Все.Ссылка
		|				КОНЕЦ
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.Ссылка КАК Маршрут,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.НомерСтроки КАК НомерСтроки,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.СубъектСогласования КАК СубъектСогласования,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.РольПользователя КАК РольПользователя,
		|	""Согласование"" КАК Действие,
		|	NULL КАК ДокументОбязательныйКПрикреплению,
		|	ВТ_НайденныйМаршрут.Предприятие КАК Предприятие,
		|	ВТ_НайденныйМаршрут.Подразделение КАК Подразделение,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.РольПользователя КАК РольПользователя1,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.ИДГруппы КАК ИДГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.ТипГруппы КАК ТипГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.Уровень КАК Уровень,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.Обязателен КАК Обязателен,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.МожетРедактировать КАК МожетРедактировать
		|ИЗ
		|	ВТ_НайденныйМаршрут КАК ВТ_НайденныйМаршрут
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок.МаршрутЗаявки КАК МаршрутыДвиженияЗаявокМаршрутЗаявки
		|		ПО ВТ_НайденныйМаршрут.Ссылка = МаршрутыДвиженияЗаявокМаршрутЗаявки.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.Ссылка,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.НомерСтроки,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.Исполнитель,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.РольПользователя,
		|	""Исполнение"",
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.ДокументОбязательныйКПрикреплению,
		|	ВТ_НайденныйМаршрут.Предприятие,
		|	ВТ_НайденныйМаршрут.Подразделение,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.РольПользователя,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.ИДГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.ТипГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.Уровень,
		|	NULL,
		|	NULL
		|ИЗ
		|	ВТ_НайденныйМаршрут КАК ВТ_НайденныйМаршрут
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок.МаршрутИсполнения КАК МаршрутыДвиженияЗаявокМаршрутИсполнения
		|		ПО ВТ_НайденныйМаршрут.Ссылка = МаршрутыДвиженияЗаявокМаршрутИсполнения.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.Ссылка,
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.НомерСтроки,
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.Пользователь,
		|	NULL,
		|	""Ознакомление"",
		|	NULL,
		|	ВТ_НайденныйМаршрут.Предприятие,
		|	ВТ_НайденныйМаршрут.Подразделение,
		|	NULL,
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.ИДГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.ТипГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.Уровень,
		|	NULL,
		|	NULL
		|ИЗ
		|	ВТ_НайденныйМаршрут КАК ВТ_НайденныйМаршрут
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок.МаршрутОзнакомления КАК МаршрутыДвиженияЗаявокМаршрутОзнакомления
		|		ПО ВТ_НайденныйМаршрут.Ссылка = МаршрутыДвиженияЗаявокМаршрутОзнакомления.Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
		Запрос.УстановитьПараметр("ВидДокумента", Справочники.Д_ВидыВнутреннихДокументов.ЗаявкаНаКадровоеДвижение);
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.Д_ЗаявкаНаКорректировкуБюджета") Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Д_ЗаявкаНаКорректировкуБюджета.Предприятие КАК Предприятие,
		|	Д_ЗаявкаНаКорректировкуБюджета.Подразделение КАК Подразделение,
		|	Д_ЗаявкаНаКорректировкуБюджета.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ДанныеЗаявки
		|ИЗ
		|	Документ.Д_ЗаявкаНаКорректировкуБюджета КАК Д_ЗаявкаНаКорректировкуБюджета
		|ГДЕ
		|	Д_ЗаявкаНаКорректировкуБюджета.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявок.Ссылка КАК Ссылка,
		|	ВТ_ДанныеЗаявки.Предприятие КАК Предприятие,
		|	ВТ_ДанныеЗаявки.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТ_Предприятие_Подразделение
		|ИЗ
		|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок КАК МаршрутыДвиженияЗаявок
		|		ПО ВТ_ДанныеЗаявки.Предприятие = МаршрутыДвиженияЗаявок.Предприятие
		|			И ВТ_ДанныеЗаявки.Подразделение = МаршрутыДвиженияЗаявок.Подразделение
		|			И (МаршрутыДвиженияЗаявок.ВидДокумента = &ВидДокумента)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявок.Ссылка КАК Ссылка,
		|	ВТ_ДанныеЗаявки.Предприятие КАК Предприятие,
		|	ВТ_ДанныеЗаявки.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТ_Предприятие
		|ИЗ
		|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок КАК МаршрутыДвиженияЗаявок
		|		ПО (МаршрутыДвиженияЗаявок.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
		|			И ВТ_ДанныеЗаявки.Предприятие = МаршрутыДвиженияЗаявок.Предприятие
		|			И (МаршрутыДвиженияЗаявок.ВидДокумента = &ВидДокумента)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявок.Ссылка КАК Ссылка,
		|	ВТ_ДанныеЗаявки.Предприятие КАК Предприятие,
		|	ВТ_ДанныеЗаявки.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТ_Все
		|ИЗ
		|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок КАК МаршрутыДвиженияЗаявок
		|		ПО (МаршрутыДвиженияЗаявок.Предприятие = ЗНАЧЕНИЕ(Справочник.Предприятия.ПустаяСсылка))
		|			И (МаршрутыДвиженияЗаявок.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
		|			И (МаршрутыДвиженияЗаявок.ВидДокумента = &ВидДокумента)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявок.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(ВТ_Предприятие_Подразделение.Предприятие, ЕСТЬNULL(ВТ_Предприятие.Предприятие, ВТ_Все.Предприятие)) КАК Предприятие,
		|	ЕСТЬNULL(ВТ_Предприятие_Подразделение.Подразделение, ЕСТЬNULL(ВТ_Предприятие.Подразделение, ВТ_Все.Подразделение)) КАК Подразделение
		|ПОМЕСТИТЬ ВТ_НайденныйМаршрут
		|ИЗ
		|	Справочник.МаршрутыДвиженияЗаявок КАК МаршрутыДвиженияЗаявок
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Предприятие_Подразделение КАК ВТ_Предприятие_Подразделение
		|		ПО МаршрутыДвиженияЗаявок.Ссылка = ВТ_Предприятие_Подразделение.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Предприятие КАК ВТ_Предприятие
		|		ПО МаршрутыДвиженияЗаявок.Ссылка = ВТ_Предприятие.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Все КАК ВТ_Все
		|		ПО МаршрутыДвиженияЗаявок.Ссылка = ВТ_Все.Ссылка
		|ГДЕ
		|	ВЫБОР
		|			КОГДА НЕ ВТ_Предприятие_Подразделение.Ссылка ЕСТЬ NULL
		|				ТОГДА МаршрутыДвиженияЗаявок.Ссылка = ВТ_Предприятие_Подразделение.Ссылка
		|			ИНАЧЕ ВЫБОР
		|					КОГДА НЕ ВТ_Предприятие.Ссылка ЕСТЬ NULL
		|						ТОГДА МаршрутыДвиженияЗаявок.Ссылка = ВТ_Предприятие.Ссылка
		|					ИНАЧЕ МаршрутыДвиженияЗаявок.Ссылка = ВТ_Все.Ссылка
		|				КОНЕЦ
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.Ссылка КАК Маршрут,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.НомерСтроки КАК НомерСтроки,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.СубъектСогласования КАК СубъектСогласования,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.РольПользователя КАК РольПользователя,
		|	""Согласование"" КАК Действие,
		|	NULL КАК ДокументОбязательныйКПрикреплению,
		|	ВТ_НайденныйМаршрут.Предприятие КАК Предприятие,
		|	ВТ_НайденныйМаршрут.Подразделение КАК Подразделение,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.ИДГруппы КАК ИДГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.ТипГруппы КАК ТипГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.Уровень КАК Уровень,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.Обязателен КАК Обязателен,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.МожетРедактировать КАК МожетРедактировать
		|ИЗ
		|	ВТ_НайденныйМаршрут КАК ВТ_НайденныйМаршрут
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок.МаршрутЗаявки КАК МаршрутыДвиженияЗаявокМаршрутЗаявки
		|		ПО ВТ_НайденныйМаршрут.Ссылка = МаршрутыДвиженияЗаявокМаршрутЗаявки.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.Ссылка,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.НомерСтроки,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.Исполнитель,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.РольПользователя,
		|	""Исполнение"",
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.ДокументОбязательныйКПрикреплению,
		|	ВТ_НайденныйМаршрут.Предприятие,
		|	ВТ_НайденныйМаршрут.Подразделение,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.ИДГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.ТипГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.Уровень,
		|	NULL,
		|	NULL
		|ИЗ
		|	ВТ_НайденныйМаршрут КАК ВТ_НайденныйМаршрут
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок.МаршрутИсполнения КАК МаршрутыДвиженияЗаявокМаршрутИсполнения
		|		ПО ВТ_НайденныйМаршрут.Ссылка = МаршрутыДвиженияЗаявокМаршрутИсполнения.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.Ссылка,
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.НомерСтроки,
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.Пользователь,
		|	NULL,
		|	""Ознакомление"",
		|	NULL,
		|	ВТ_НайденныйМаршрут.Предприятие,
		|	ВТ_НайденныйМаршрут.Подразделение,
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.ИДГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.ТипГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.Уровень,
		|	NULL,
		|	NULL
		|ИЗ
		|	ВТ_НайденныйМаршрут КАК ВТ_НайденныйМаршрут
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок.МаршрутОзнакомления КАК МаршрутыДвиженияЗаявокМаршрутОзнакомления
		|		ПО ВТ_НайденныйМаршрут.Ссылка = МаршрутыДвиженияЗаявокМаршрутОзнакомления.Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
		Запрос.УстановитьПараметр("ВидДокумента", Справочники.Д_ВидыВнутреннихДокументов.КорректировкаБюджета);

	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.Д_БюджетПрочихПроектов") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Д_БюджетПрочихПроектов.Предприятие КАК Предприятие,
		|	Д_БюджетПрочихПроектов.Подразделение КАК Подразделение,
		|	Д_БюджетПрочихПроектов.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ДанныеЗаявки
		|ИЗ
		|	Документ.Д_БюджетПрочихПроектов КАК Д_БюджетПрочихПроектов
		|ГДЕ
		|	Д_БюджетПрочихПроектов.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявок.Ссылка КАК Ссылка,
		|	ВТ_ДанныеЗаявки.Предприятие КАК Предприятие,
		|	ВТ_ДанныеЗаявки.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТ_Предприятие_Подразделение
		|ИЗ
		|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок КАК МаршрутыДвиженияЗаявок
		|		ПО ВТ_ДанныеЗаявки.Предприятие = МаршрутыДвиженияЗаявок.Предприятие
		|			И ВТ_ДанныеЗаявки.Подразделение = МаршрутыДвиженияЗаявок.Подразделение
		|			И (МаршрутыДвиженияЗаявок.ВидДокумента = &ВидДокумента)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявок.Ссылка КАК Ссылка,
		|	ВТ_ДанныеЗаявки.Предприятие КАК Предприятие,
		|	ВТ_ДанныеЗаявки.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТ_Предприятие
		|ИЗ
		|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок КАК МаршрутыДвиженияЗаявок
		|		ПО (МаршрутыДвиженияЗаявок.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
		|			И ВТ_ДанныеЗаявки.Предприятие = МаршрутыДвиженияЗаявок.Предприятие
		|			И (МаршрутыДвиженияЗаявок.ВидДокумента = &ВидДокумента)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявок.Ссылка КАК Ссылка,
		|	ВТ_ДанныеЗаявки.Предприятие КАК Предприятие,
		|	ВТ_ДанныеЗаявки.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТ_Все
		|ИЗ
		|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок КАК МаршрутыДвиженияЗаявок
		|		ПО (МаршрутыДвиженияЗаявок.Предприятие = ЗНАЧЕНИЕ(Справочник.Предприятия.ПустаяСсылка))
		|			И (МаршрутыДвиженияЗаявок.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
		|			И (МаршрутыДвиженияЗаявок.ВидДокумента = &ВидДокумента)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявок.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(ВТ_Предприятие_Подразделение.Предприятие, ЕСТЬNULL(ВТ_Предприятие.Предприятие, ВТ_Все.Предприятие)) КАК Предприятие,
		|	ЕСТЬNULL(ВТ_Предприятие_Подразделение.Подразделение, ЕСТЬNULL(ВТ_Предприятие.Подразделение, ВТ_Все.Подразделение)) КАК Подразделение
		|ПОМЕСТИТЬ ВТ_НайденныйМаршрут
		|ИЗ
		|	Справочник.МаршрутыДвиженияЗаявок КАК МаршрутыДвиженияЗаявок
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Предприятие_Подразделение КАК ВТ_Предприятие_Подразделение
		|		ПО МаршрутыДвиженияЗаявок.Ссылка = ВТ_Предприятие_Подразделение.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Предприятие КАК ВТ_Предприятие
		|		ПО МаршрутыДвиженияЗаявок.Ссылка = ВТ_Предприятие.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Все КАК ВТ_Все
		|		ПО МаршрутыДвиженияЗаявок.Ссылка = ВТ_Все.Ссылка
		|ГДЕ
		|	ВЫБОР
		|			КОГДА НЕ ВТ_Предприятие_Подразделение.Ссылка ЕСТЬ NULL
		|				ТОГДА МаршрутыДвиженияЗаявок.Ссылка = ВТ_Предприятие_Подразделение.Ссылка
		|			ИНАЧЕ ВЫБОР
		|					КОГДА НЕ ВТ_Предприятие.Ссылка ЕСТЬ NULL
		|						ТОГДА МаршрутыДвиженияЗаявок.Ссылка = ВТ_Предприятие.Ссылка
		|					ИНАЧЕ МаршрутыДвиженияЗаявок.Ссылка = ВТ_Все.Ссылка
		|				КОНЕЦ
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.Ссылка КАК Маршрут,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.НомерСтроки КАК НомерСтроки,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.СубъектСогласования КАК СубъектСогласования,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.РольПользователя КАК РольПользователя,
		|	""Согласование"" КАК Действие,
		|	ВТ_НайденныйМаршрут.Предприятие КАК Предприятие,
		|	ВТ_НайденныйМаршрут.Подразделение КАК Подразделение,
		|	NULL КАК ДокументОбязательныйКПрикреплению,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.ИДГруппы КАК ИДГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.ТипГруппы КАК ТипГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.Уровень КАК Уровень,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.Обязателен КАК Обязателен,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.МожетРедактировать КАК МожетРедактировать
		|ИЗ
		|	ВТ_НайденныйМаршрут КАК ВТ_НайденныйМаршрут
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок.МаршрутЗаявки КАК МаршрутыДвиженияЗаявокМаршрутЗаявки
		|		ПО ВТ_НайденныйМаршрут.Ссылка = МаршрутыДвиженияЗаявокМаршрутЗаявки.Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
		Запрос.УстановитьПараметр("ВидДокумента", "Бюджет оперативный");
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.Д_Бюджет") Тогда	
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.НомерСтроки КАК НомерСтроки,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.СубъектСогласования КАК СубъектСогласования,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.Комментарии КАК Комментарии,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.Уровень КАК Уровень,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.ТипГруппы КАК ТипГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.ИДГруппы КАК ИДГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.ВремяНаВыполнение КАК ВремяНаВыполнение,
		|	""Согласование"" КАК Действие,
		|	ЕСТЬNULL(МаршрутыДвиженияЗаявокДопУсловия.Условие, """") КАК ДопУсловие,
		|	МаршрутыДвиженияЗаявокДопУсловия.Ссылка КАК Маршрут,
		|	МаршрутыДвиженияЗаявокДопУсловия.Ссылка.Предприятие КАК Предприятие,
		|	ЗНАЧЕНИЕ(Справочник.Д_ТипыПрикрепляемыхДокументов.ПустаяСсылка) КАК ДокументОбязательныйКПрикреплению,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.РольПользователя КАК РольПользователя,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.Обязателен КАК Обязателен,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.МожетРедактировать КАК МожетРедактировать
		|ИЗ
		|	Справочник.МаршрутыДвиженияЗаявок.МаршрутЗаявки КАК МаршрутыДвиженияЗаявокМаршрутЗаявки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок.ДопУсловия КАК МаршрутыДвиженияЗаявокДопУсловия
		|		ПО МаршрутыДвиженияЗаявокМаршрутЗаявки.Ссылка = МаршрутыДвиженияЗаявокДопУсловия.Ссылка
		|			И МаршрутыДвиженияЗаявокМаршрутЗаявки.ИДСтроки = МаршрутыДвиженияЗаявокДопУсловия.ИУДСтрокиВладельца
		|ГДЕ
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.Ссылка.ВидДокумента = ""Бюджет""
		|	И МаршрутыДвиженияЗаявокМаршрутЗаявки.Ссылка.Предприятие = &Предприятие
		|	И МаршрутыДвиженияЗаявокМаршрутЗаявки.Ссылка.ТипБюджета = &ТипБюджета";
		
		Запрос.УстановитьПараметр("Предприятие", Предприятие);
		Запрос.УстановитьПараметр("ТипБюджета", ТипБюджета);
		
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.Д_ЗаявкаНаТорговлю") Тогда	
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Д_ЗаявкаНаТорговлю.Предприятие КАК Предприятие,
		|	Д_ЗаявкаНаТорговлю.Подразделение КАК Подразделение,
		|	Д_ЗаявкаНаТорговлю.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ДанныеЗаявки
		|ИЗ
		|	Документ.Д_ЗаявкаНаТорговлю КАК Д_ЗаявкаНаТорговлю
		|ГДЕ
		|	Д_ЗаявкаНаТорговлю.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявок.Ссылка КАК Ссылка,
		|	ВТ_ДанныеЗаявки.Предприятие КАК Предприятие,
		|	ВТ_ДанныеЗаявки.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТ_Предприятие_Подразделение
		|ИЗ
		|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок КАК МаршрутыДвиженияЗаявок
		|		ПО ВТ_ДанныеЗаявки.Предприятие = МаршрутыДвиженияЗаявок.Предприятие
		|			И ВТ_ДанныеЗаявки.Подразделение = МаршрутыДвиженияЗаявок.Подразделение
		|			И (МаршрутыДвиженияЗаявок.ВидДокумента = &ВидДокумента)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявок.Ссылка КАК Ссылка,
		|	ВТ_ДанныеЗаявки.Предприятие КАК Предприятие,
		|	ВТ_ДанныеЗаявки.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТ_Предприятие
		|ИЗ
		|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок КАК МаршрутыДвиженияЗаявок
		|		ПО (МаршрутыДвиженияЗаявок.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
		|			И ВТ_ДанныеЗаявки.Предприятие = МаршрутыДвиженияЗаявок.Предприятие
		|			И (МаршрутыДвиженияЗаявок.ВидДокумента = &ВидДокумента)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявок.Ссылка КАК Ссылка,
		|	ВТ_ДанныеЗаявки.Предприятие КАК Предприятие,
		|	ВТ_ДанныеЗаявки.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТ_Все
		|ИЗ
		|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок КАК МаршрутыДвиженияЗаявок
		|		ПО (МаршрутыДвиженияЗаявок.Предприятие = ЗНАЧЕНИЕ(Справочник.Предприятия.ПустаяСсылка))
		|			И (МаршрутыДвиженияЗаявок.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
		|			И (МаршрутыДвиженияЗаявок.ВидДокумента = &ВидДокумента)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявок.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(ВТ_Предприятие_Подразделение.Предприятие, ЕСТЬNULL(ВТ_Предприятие.Предприятие, ВТ_Все.Предприятие)) КАК Предприятие,
		|	ЕСТЬNULL(ВТ_Предприятие_Подразделение.Подразделение, ЕСТЬNULL(ВТ_Предприятие.Подразделение, ВТ_Все.Подразделение)) КАК Подразделение
		|ПОМЕСТИТЬ ВТ_НайденныйМаршрут
		|ИЗ
		|	Справочник.МаршрутыДвиженияЗаявок КАК МаршрутыДвиженияЗаявок
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Предприятие_Подразделение КАК ВТ_Предприятие_Подразделение
		|		ПО МаршрутыДвиженияЗаявок.Ссылка = ВТ_Предприятие_Подразделение.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Предприятие КАК ВТ_Предприятие
		|		ПО МаршрутыДвиженияЗаявок.Ссылка = ВТ_Предприятие.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Все КАК ВТ_Все
		|		ПО МаршрутыДвиженияЗаявок.Ссылка = ВТ_Все.Ссылка
		|ГДЕ
		|	ВЫБОР
		|			КОГДА НЕ ВТ_Предприятие_Подразделение.Ссылка ЕСТЬ NULL
		|				ТОГДА МаршрутыДвиженияЗаявок.Ссылка = ВТ_Предприятие_Подразделение.Ссылка
		|			ИНАЧЕ ВЫБОР
		|					КОГДА НЕ ВТ_Предприятие.Ссылка ЕСТЬ NULL
		|						ТОГДА МаршрутыДвиженияЗаявок.Ссылка = ВТ_Предприятие.Ссылка
		|					ИНАЧЕ МаршрутыДвиженияЗаявок.Ссылка = ВТ_Все.Ссылка
		|				КОНЕЦ
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.Ссылка КАК Маршрут,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.НомерСтроки КАК НомерСтроки,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.СубъектСогласования КАК СубъектСогласования,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.РольПользователя КАК РольПользователя,
		|	""Согласование"" КАК Действие,
		|	NULL КАК ДокументОбязательныйКПрикреплению,
		|	ВТ_НайденныйМаршрут.Предприятие КАК Предприятие,
		|	ВТ_НайденныйМаршрут.Подразделение КАК Подразделение,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.ИДГруппы КАК ИДГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.ТипГруппы КАК ТипГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.Уровень КАК Уровень,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.Обязателен КАК Обязателен,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.МожетРедактировать КАК МожетРедактировать
		|ИЗ
		|	ВТ_НайденныйМаршрут КАК ВТ_НайденныйМаршрут
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок.МаршрутЗаявки КАК МаршрутыДвиженияЗаявокМаршрутЗаявки
		|		ПО ВТ_НайденныйМаршрут.Ссылка = МаршрутыДвиженияЗаявокМаршрутЗаявки.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.Ссылка,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.НомерСтроки,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.Исполнитель,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.РольПользователя,
		|	""Исполнение"",
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.ДокументОбязательныйКПрикреплению,
		|	ВТ_НайденныйМаршрут.Предприятие,
		|	ВТ_НайденныйМаршрут.Подразделение,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.ИДГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.ТипГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.Уровень,
		|	NULL,
		|	NULL
		|ИЗ
		|	ВТ_НайденныйМаршрут КАК ВТ_НайденныйМаршрут
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок.МаршрутИсполнения КАК МаршрутыДвиженияЗаявокМаршрутИсполнения
		|		ПО ВТ_НайденныйМаршрут.Ссылка = МаршрутыДвиженияЗаявокМаршрутИсполнения.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.Ссылка,
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.НомерСтроки,
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.Пользователь,
		|	NULL,
		|	""Ознакомление"",
		|	NULL,
		|	ВТ_НайденныйМаршрут.Предприятие,
		|	ВТ_НайденныйМаршрут.Подразделение,
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.ИДГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.ТипГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.Уровень,
		|	NULL,
		|	NULL
		|ИЗ
		|	ВТ_НайденныйМаршрут КАК ВТ_НайденныйМаршрут
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок.МаршрутОзнакомления КАК МаршрутыДвиженияЗаявокМаршрутОзнакомления
		|		ПО ВТ_НайденныйМаршрут.Ссылка = МаршрутыДвиженияЗаявокМаршрутОзнакомления.Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
		Запрос.УстановитьПараметр("ВидДокумента", Справочники.Д_ВидыВнутреннихДокументов.ЗаявкаНаЗакупкуПродажу);
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.Д_ЗаявкаНаФинансирование") Тогда	
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Д_ЗаявкаНаФинансирование.ЦФО = ЗНАЧЕНИЕ(Справочник.Предприятия.ПустаяСсылка)
		|			ТОГДА Д_ЗаявкаНаФинансирование.Предприятие
		|		ИНАЧЕ Д_ЗаявкаНаФинансирование.ЦФО
		|	КОНЕЦ КАК Предприятие,
		|	Д_ЗаявкаНаФинансирование.Подразделение КАК Подразделение,
		|	Д_ЗаявкаНаФинансирование.Ссылка КАК Ссылка,
		|	Д_ЗаявкаНаФинансирование.ТипИсточника КАК ТипИсточника
		|ПОМЕСТИТЬ ВТ_ДанныеЗаявки
		|ИЗ
		|	Документ.Д_ЗаявкаНаФинансирование КАК Д_ЗаявкаНаФинансирование
		|ГДЕ
		|	Д_ЗаявкаНаФинансирование.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявокПредприятияПодразделения.Ссылка КАК Ссылка,
		|	ВТ_ДанныеЗаявки.Предприятие КАК Предприятие,
		|	ВТ_ДанныеЗаявки.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТ_Предприятие_Подразделение
		|ИЗ
		|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок.ПредприятияПодразделения КАК МаршрутыДвиженияЗаявокПредприятияПодразделения
		|		ПО ВТ_ДанныеЗаявки.Предприятие = МаршрутыДвиженияЗаявокПредприятияПодразделения.Предприятие
		|			И ВТ_ДанныеЗаявки.Подразделение = МаршрутыДвиженияЗаявокПредприятияПодразделения.Подразделение
		|			И (МаршрутыДвиженияЗаявокПредприятияПодразделения.Ссылка.ВидДокумента = &ВидДокумента)
		|			И (МаршрутыДвиженияЗаявокПредприятияПодразделения.Ссылка.ТипПлатежа = ЗНАЧЕНИЕ(Перечисление.Д_ИсточникиСредств.ПустаяСсылка)
		|				ИЛИ МаршрутыДвиженияЗаявокПредприятияПодразделения.Ссылка.ТипПлатежа = ВТ_ДанныеЗаявки.ТипИсточника)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявокПредприятияПодразделения.Ссылка КАК Ссылка,
		|	ВТ_ДанныеЗаявки.Предприятие КАК Предприятие,
		|	ВТ_ДанныеЗаявки.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТ_Предприятие
		|ИЗ
		|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок.ПредприятияПодразделения КАК МаршрутыДвиженияЗаявокПредприятияПодразделения
		|		ПО (МаршрутыДвиженияЗаявокПредприятияПодразделения.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
		|			И ВТ_ДанныеЗаявки.Предприятие = МаршрутыДвиженияЗаявокПредприятияПодразделения.Предприятие
		|			И (МаршрутыДвиженияЗаявокПредприятияПодразделения.Ссылка.ВидДокумента = &ВидДокумента)
		|			И (МаршрутыДвиженияЗаявокПредприятияПодразделения.Ссылка.ТипПлатежа = ЗНАЧЕНИЕ(Перечисление.Д_ИсточникиСредств.ПустаяСсылка)
		|				ИЛИ МаршрутыДвиженияЗаявокПредприятияПодразделения.Ссылка.ТипПлатежа = ВТ_ДанныеЗаявки.ТипИсточника)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявок.Ссылка КАК Ссылка,
		|	ВТ_ДанныеЗаявки.Предприятие КАК Предприятие,
		|	ВТ_ДанныеЗаявки.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТ_Все
		|ИЗ
		|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок КАК МаршрутыДвиженияЗаявок
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок.ПредприятияПодразделения КАК МаршрутыДвиженияЗаявокПредприятияПодразделения
		|			ПО МаршрутыДвиженияЗаявок.Ссылка = МаршрутыДвиженияЗаявокПредприятияПодразделения.Ссылка
		|		ПО (МаршрутыДвиженияЗаявок.ТипПлатежа = ЗНАЧЕНИЕ(Перечисление.Д_ИсточникиСредств.ПустаяСсылка)
		|				ИЛИ МаршрутыДвиженияЗаявок.ТипПлатежа = ВТ_ДанныеЗаявки.ТипИсточника)
		|			И (МаршрутыДвиженияЗаявок.ВидДокумента = &ВидДокумента)
		|ГДЕ
		|	МаршрутыДвиженияЗаявокПредприятияПодразделения.Ссылка ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявок.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(ВТ_Предприятие_Подразделение.Предприятие, ЕСТЬNULL(ВТ_Предприятие.Предприятие, ВТ_Все.Предприятие)) КАК Предприятие,
		|	ЕСТЬNULL(ВТ_Предприятие_Подразделение.Подразделение, ЕСТЬNULL(ВТ_Предприятие.Подразделение, ВТ_Все.Подразделение)) КАК Подразделение
		|ПОМЕСТИТЬ ВТ_НайденныйМаршрут
		|ИЗ
		|	Справочник.МаршрутыДвиженияЗаявок КАК МаршрутыДвиженияЗаявок
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Предприятие_Подразделение КАК ВТ_Предприятие_Подразделение
		|		ПО МаршрутыДвиженияЗаявок.Ссылка = ВТ_Предприятие_Подразделение.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Предприятие КАК ВТ_Предприятие
		|		ПО МаршрутыДвиженияЗаявок.Ссылка = ВТ_Предприятие.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Все КАК ВТ_Все
		|		ПО МаршрутыДвиженияЗаявок.Ссылка = ВТ_Все.Ссылка
		|ГДЕ
		|	ВЫБОР
		|			КОГДА НЕ ВТ_Предприятие_Подразделение.Ссылка ЕСТЬ NULL
		|				ТОГДА МаршрутыДвиженияЗаявок.Ссылка = ВТ_Предприятие_Подразделение.Ссылка
		|			ИНАЧЕ ВЫБОР
		|					КОГДА НЕ ВТ_Предприятие.Ссылка ЕСТЬ NULL
		|						ТОГДА МаршрутыДвиженияЗаявок.Ссылка = ВТ_Предприятие.Ссылка
		|					ИНАЧЕ МаршрутыДвиженияЗаявок.Ссылка = ВТ_Все.Ссылка
		|				КОНЕЦ
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.Ссылка КАК Маршрут,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.НомерСтроки КАК НомерСтроки,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.СубъектСогласования КАК СубъектСогласования,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.РольПользователя КАК РольПользователя,
		|	""Согласование"" КАК Действие,
		|	NULL КАК ДокументОбязательныйКПрикреплению,
		|	ВТ_НайденныйМаршрут.Предприятие КАК Предприятие,
		|	ВТ_НайденныйМаршрут.Подразделение КАК Подразделение,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.ИДГруппы КАК ИДГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.ТипГруппы КАК ТипГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.Уровень КАК Уровень,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.Обязателен КАК Обязателен,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.МожетРедактировать КАК МожетРедактировать
		|ИЗ
		|	ВТ_НайденныйМаршрут КАК ВТ_НайденныйМаршрут
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок.МаршрутЗаявки КАК МаршрутыДвиженияЗаявокМаршрутЗаявки
		|		ПО ВТ_НайденныйМаршрут.Ссылка = МаршрутыДвиженияЗаявокМаршрутЗаявки.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.Ссылка,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.НомерСтроки,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.Исполнитель,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.РольПользователя,
		|	""Исполнение"",
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.ДокументОбязательныйКПрикреплению,
		|	ВТ_НайденныйМаршрут.Предприятие,
		|	ВТ_НайденныйМаршрут.Подразделение,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.ИДГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.ТипГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.Уровень,
		|	NULL,
		|	NULL
		|ИЗ
		|	ВТ_НайденныйМаршрут КАК ВТ_НайденныйМаршрут
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок.МаршрутИсполнения КАК МаршрутыДвиженияЗаявокМаршрутИсполнения
		|		ПО ВТ_НайденныйМаршрут.Ссылка = МаршрутыДвиженияЗаявокМаршрутИсполнения.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.Ссылка,
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.НомерСтроки,
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.Пользователь,
		|	NULL,
		|	""Ознакомление"",
		|	NULL,
		|	ВТ_НайденныйМаршрут.Предприятие,
		|	ВТ_НайденныйМаршрут.Подразделение,
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.ИДГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.ТипГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.Уровень,
		|	NULL,
		|	NULL
		|ИЗ
		|	ВТ_НайденныйМаршрут КАК ВТ_НайденныйМаршрут
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок.МаршрутОзнакомления КАК МаршрутыДвиженияЗаявокМаршрутОзнакомления
		|		ПО ВТ_НайденныйМаршрут.Ссылка = МаршрутыДвиженияЗаявокМаршрутОзнакомления.Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
		Запрос.УстановитьПараметр("ВидДокумента", Справочники.Д_ВидыВнутреннихДокументов.ЗаявкаНаФинансирование);
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.Д_ЗаявкаНаАвансовыйОтчет") Тогда	
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Д_ЗаявкаНаАвансовыйОтчетЗатраты.Предприятие КАК Предприятие,
		|	Д_ЗаявкаНаАвансовыйОтчетЗатраты.Подразделение КАК Подразделение,
		|	Д_ЗаявкаНаАвансовыйОтчетЗатраты.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ДанныеЗаявки
		|ИЗ
		|	Документ.Д_ЗаявкаНаАвансовыйОтчет.Затраты КАК Д_ЗаявкаНаАвансовыйОтчетЗатраты
		|ГДЕ
		|	Д_ЗаявкаНаАвансовыйОтчетЗатраты.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявок.Ссылка КАК Ссылка,
		|	ВТ_ДанныеЗаявки.Предприятие КАК Предприятие,
		|	ВТ_ДанныеЗаявки.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТ_Предприятие_Подразделение
		|ИЗ
		|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок КАК МаршрутыДвиженияЗаявок
		|		ПО ВТ_ДанныеЗаявки.Предприятие = МаршрутыДвиженияЗаявок.Предприятие
		|			И ВТ_ДанныеЗаявки.Подразделение = МаршрутыДвиженияЗаявок.Подразделение
		|			И (МаршрутыДвиженияЗаявок.ВидДокумента = &ВидДокумента)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявок.Ссылка КАК Ссылка,
		|	ВТ_ДанныеЗаявки.Предприятие КАК Предприятие,
		|	ВТ_ДанныеЗаявки.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТ_Предприятие
		|ИЗ
		|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок КАК МаршрутыДвиженияЗаявок
		|		ПО (МаршрутыДвиженияЗаявок.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
		|			И ВТ_ДанныеЗаявки.Предприятие = МаршрутыДвиженияЗаявок.Предприятие
		|			И (МаршрутыДвиженияЗаявок.ВидДокумента = &ВидДокумента)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявок.Ссылка КАК Ссылка,
		|	ВТ_ДанныеЗаявки.Предприятие КАК Предприятие,
		|	ВТ_ДанныеЗаявки.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТ_Все
		|ИЗ
		|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок КАК МаршрутыДвиженияЗаявок
		|		ПО (МаршрутыДвиженияЗаявок.Предприятие = ЗНАЧЕНИЕ(Справочник.Предприятия.ПустаяСсылка))
		|			И (МаршрутыДвиженияЗаявок.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
		|			И (МаршрутыДвиженияЗаявок.ВидДокумента = &ВидДокумента)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявок.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(ВТ_Предприятие_Подразделение.Предприятие, ЕСТЬNULL(ВТ_Предприятие.Предприятие, ВТ_Все.Предприятие)) КАК Предприятие,
		|	ЕСТЬNULL(ВТ_Предприятие_Подразделение.Подразделение, ЕСТЬNULL(ВТ_Предприятие.Подразделение, ВТ_Все.Подразделение)) КАК Подразделение
		|ПОМЕСТИТЬ ВТ_НайденныйМаршрут
		|ИЗ
		|	Справочник.МаршрутыДвиженияЗаявок КАК МаршрутыДвиженияЗаявок
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Предприятие_Подразделение КАК ВТ_Предприятие_Подразделение
		|		ПО МаршрутыДвиженияЗаявок.Ссылка = ВТ_Предприятие_Подразделение.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Предприятие КАК ВТ_Предприятие
		|		ПО МаршрутыДвиженияЗаявок.Ссылка = ВТ_Предприятие.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Все КАК ВТ_Все
		|		ПО МаршрутыДвиженияЗаявок.Ссылка = ВТ_Все.Ссылка
		|ГДЕ
		|	ВЫБОР
		|			КОГДА НЕ ВТ_Предприятие_Подразделение.Ссылка ЕСТЬ NULL
		|				ТОГДА МаршрутыДвиженияЗаявок.Ссылка = ВТ_Предприятие_Подразделение.Ссылка
		|			ИНАЧЕ ВЫБОР
		|					КОГДА НЕ ВТ_Предприятие.Ссылка ЕСТЬ NULL
		|						ТОГДА МаршрутыДвиженияЗаявок.Ссылка = ВТ_Предприятие.Ссылка
		|					ИНАЧЕ МаршрутыДвиженияЗаявок.Ссылка = ВТ_Все.Ссылка
		|				КОНЕЦ
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.Ссылка КАК Маршрут,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.НомерСтроки КАК НомерСтроки,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.СубъектСогласования КАК СубъектСогласования,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.РольПользователя КАК РольПользователя,
		|	""Согласование"" КАК Действие,
		|	NULL КАК ДокументОбязательныйКПрикреплению,
		|	ВТ_НайденныйМаршрут.Предприятие КАК Предприятие,
		|	ВТ_НайденныйМаршрут.Подразделение КАК Подразделение,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.ИДГруппы КАК ИДГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.ТипГруппы КАК ТипГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.Уровень КАК Уровень,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.Обязателен КАК Обязателен,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.МожетРедактировать КАК МожетРедактировать
		|ИЗ
		|	ВТ_НайденныйМаршрут КАК ВТ_НайденныйМаршрут
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок.МаршрутЗаявки КАК МаршрутыДвиженияЗаявокМаршрутЗаявки
		|		ПО ВТ_НайденныйМаршрут.Ссылка = МаршрутыДвиженияЗаявокМаршрутЗаявки.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.Ссылка,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.НомерСтроки,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.Исполнитель,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.РольПользователя,
		|	""Исполнение"",
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.ДокументОбязательныйКПрикреплению,
		|	ВТ_НайденныйМаршрут.Предприятие,
		|	ВТ_НайденныйМаршрут.Подразделение,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.ИДГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.ТипГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.Уровень,
		|	NULL,
		|	NULL
		|ИЗ
		|	ВТ_НайденныйМаршрут КАК ВТ_НайденныйМаршрут
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок.МаршрутИсполнения КАК МаршрутыДвиженияЗаявокМаршрутИсполнения
		|		ПО ВТ_НайденныйМаршрут.Ссылка = МаршрутыДвиженияЗаявокМаршрутИсполнения.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.Ссылка,
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.НомерСтроки,
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.Пользователь,
		|	NULL,
		|	""Ознакомление"",
		|	NULL,
		|	ВТ_НайденныйМаршрут.Предприятие,
		|	ВТ_НайденныйМаршрут.Подразделение,
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.ИДГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.ТипГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.Уровень,
		|	NULL,
		|	NULL
		|ИЗ
		|	ВТ_НайденныйМаршрут КАК ВТ_НайденныйМаршрут
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок.МаршрутОзнакомления КАК МаршрутыДвиженияЗаявокМаршрутОзнакомления
		|		ПО ВТ_НайденныйМаршрут.Ссылка = МаршрутыДвиженияЗаявокМаршрутОзнакомления.Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.Д_ЗаявкаНаАвансовыйОтчет") Тогда
			Запрос.УстановитьПараметр("ВидДокумента", Справочники.Д_ВидыВнутреннихДокументов.ЗаявкаНаАвансовыйОтчет);
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.Д_СлужебнаяЗаписка") Тогда
			Запрос.УстановитьПараметр("ВидДокумента", Справочники.Д_ВидыВнутреннихДокументов.Произвольная);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.Д_СлужебнаяЗаписка") Тогда	
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Д_СлужебнаяЗаписка.Предприятие КАК Предприятие,
		|	Д_СлужебнаяЗаписка.Подразделение КАК Подразделение,
		|	Д_СлужебнаяЗаписка.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ДанныеЗаявки
		|ИЗ
		|	Документ.Д_СлужебнаяЗаписка КАК Д_СлужебнаяЗаписка
		|ГДЕ
		|	Д_СлужебнаяЗаписка.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявок.Ссылка КАК Ссылка,
		|	ВТ_ДанныеЗаявки.Предприятие КАК Предприятие,
		|	ВТ_ДанныеЗаявки.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТ_Предприятие_Подразделение
		|ИЗ
		|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок КАК МаршрутыДвиженияЗаявок
		|		ПО ВТ_ДанныеЗаявки.Предприятие = МаршрутыДвиженияЗаявок.Предприятие
		|			И ВТ_ДанныеЗаявки.Подразделение = МаршрутыДвиженияЗаявок.Подразделение
		|			И (МаршрутыДвиженияЗаявок.ВидДокумента = &ВидДокумента)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявок.Ссылка КАК Ссылка,
		|	ВТ_ДанныеЗаявки.Предприятие КАК Предприятие,
		|	ВТ_ДанныеЗаявки.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТ_Предприятие
		|ИЗ
		|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок КАК МаршрутыДвиженияЗаявок
		|		ПО (МаршрутыДвиженияЗаявок.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
		|			И ВТ_ДанныеЗаявки.Предприятие = МаршрутыДвиженияЗаявок.Предприятие
		|			И (МаршрутыДвиженияЗаявок.ВидДокумента = &ВидДокумента)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявок.Ссылка КАК Ссылка,
		|	ВТ_ДанныеЗаявки.Предприятие КАК Предприятие,
		|	ВТ_ДанныеЗаявки.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТ_Все
		|ИЗ
		|	ВТ_ДанныеЗаявки КАК ВТ_ДанныеЗаявки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок КАК МаршрутыДвиженияЗаявок
		|		ПО (МаршрутыДвиженияЗаявок.Предприятие = ЗНАЧЕНИЕ(Справочник.Предприятия.ПустаяСсылка))
		|			И (МаршрутыДвиженияЗаявок.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
		|			И (МаршрутыДвиженияЗаявок.ВидДокумента = &ВидДокумента)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявок.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(ВТ_Предприятие_Подразделение.Предприятие, ЕСТЬNULL(ВТ_Предприятие.Предприятие, ВТ_Все.Предприятие)) КАК Предприятие,
		|	ЕСТЬNULL(ВТ_Предприятие_Подразделение.Подразделение, ЕСТЬNULL(ВТ_Предприятие.Подразделение, ВТ_Все.Подразделение)) КАК Подразделение
		|ПОМЕСТИТЬ ВТ_НайденныйМаршрут
		|ИЗ
		|	Справочник.МаршрутыДвиженияЗаявок КАК МаршрутыДвиженияЗаявок
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Предприятие_Подразделение КАК ВТ_Предприятие_Подразделение
		|		ПО МаршрутыДвиженияЗаявок.Ссылка = ВТ_Предприятие_Подразделение.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Предприятие КАК ВТ_Предприятие
		|		ПО МаршрутыДвиженияЗаявок.Ссылка = ВТ_Предприятие.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Все КАК ВТ_Все
		|		ПО МаршрутыДвиженияЗаявок.Ссылка = ВТ_Все.Ссылка
		|ГДЕ
		|	ВЫБОР
		|			КОГДА НЕ ВТ_Предприятие_Подразделение.Ссылка ЕСТЬ NULL
		|				ТОГДА МаршрутыДвиженияЗаявок.Ссылка = ВТ_Предприятие_Подразделение.Ссылка
		|			ИНАЧЕ ВЫБОР
		|					КОГДА НЕ ВТ_Предприятие.Ссылка ЕСТЬ NULL
		|						ТОГДА МаршрутыДвиженияЗаявок.Ссылка = ВТ_Предприятие.Ссылка
		|					ИНАЧЕ МаршрутыДвиженияЗаявок.Ссылка = ВТ_Все.Ссылка
		|				КОНЕЦ
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.Ссылка КАК Маршрут,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.НомерСтроки КАК НомерСтроки,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.СубъектСогласования КАК СубъектСогласования,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.РольПользователя КАК РольПользователя,
		|	""Согласование"" КАК Действие,
		|	NULL КАК ДокументОбязательныйКПрикреплению,
		|	ВТ_НайденныйМаршрут.Предприятие КАК Предприятие,
		|	ВТ_НайденныйМаршрут.Подразделение КАК Подразделение,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.ИДГруппы КАК ИДГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.ТипГруппы КАК ТипГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.Уровень КАК Уровень,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.Обязателен КАК Обязателен,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.МожетРедактировать КАК МожетРедактировать
		|ИЗ
		|	ВТ_НайденныйМаршрут КАК ВТ_НайденныйМаршрут
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок.МаршрутЗаявки КАК МаршрутыДвиженияЗаявокМаршрутЗаявки
		|		ПО ВТ_НайденныйМаршрут.Ссылка = МаршрутыДвиженияЗаявокМаршрутЗаявки.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.Ссылка,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.НомерСтроки,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.Исполнитель,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.РольПользователя,
		|	""Исполнение"",
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.ДокументОбязательныйКПрикреплению,
		|	ВТ_НайденныйМаршрут.Предприятие,
		|	ВТ_НайденныйМаршрут.Подразделение,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.ИДГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.ТипГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутИсполнения.Уровень,
		|	NULL,
		|	NULL
		|ИЗ
		|	ВТ_НайденныйМаршрут КАК ВТ_НайденныйМаршрут
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок.МаршрутИсполнения КАК МаршрутыДвиженияЗаявокМаршрутИсполнения
		|		ПО ВТ_НайденныйМаршрут.Ссылка = МаршрутыДвиженияЗаявокМаршрутИсполнения.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.Ссылка,
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.НомерСтроки,
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.Пользователь,
		|	NULL,
		|	""Ознакомление"",
		|	NULL,
		|	ВТ_НайденныйМаршрут.Предприятие,
		|	ВТ_НайденныйМаршрут.Подразделение,
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.ИДГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.ТипГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутОзнакомления.Уровень,
		|	NULL,
		|	NULL
		|ИЗ
		|	ВТ_НайденныйМаршрут КАК ВТ_НайденныйМаршрут
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок.МаршрутОзнакомления КАК МаршрутыДвиженияЗаявокМаршрутОзнакомления
		|		ПО ВТ_НайденныйМаршрут.Ссылка = МаршрутыДвиженияЗаявокМаршрутОзнакомления.Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
		Запрос.УстановитьПараметр("ВидДокумента", Справочники.Д_ВидыВнутреннихДокументов.Произвольная);
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("СправочникСсылка.сабОтпускаСотрудников") Тогда	
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.НомерСтроки КАК НомерСтроки,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.СубъектСогласования КАК СубъектСогласования,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.Комментарии КАК Комментарии,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.Уровень КАК Уровень,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.ТипГруппы КАК ТипГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.ИДГруппы КАК ИДГруппы,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.ВремяНаВыполнение КАК ВремяНаВыполнение,
		|	""Согласование"" КАК Действие,
		|	ЕСТЬNULL(МаршрутыДвиженияЗаявокДопУсловия.Условие, """") КАК ДопУсловие,
		|	МаршрутыДвиженияЗаявокДопУсловия.Ссылка КАК Маршрут,
		|	МаршрутыДвиженияЗаявокДопУсловия.Ссылка.Предприятие КАК Предприятие,
		|	ЗНАЧЕНИЕ(Справочник.Д_ТипыПрикрепляемыхДокументов.ПустаяСсылка) КАК ДокументОбязательныйКПрикреплению,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.РольПользователя КАК РольПользователя,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.Обязателен КАК Обязателен,
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.МожетРедактировать КАК МожетРедактировать
		|ИЗ
		|	Справочник.МаршрутыДвиженияЗаявок.МаршрутЗаявки КАК МаршрутыДвиженияЗаявокМаршрутЗаявки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МаршрутыДвиженияЗаявок.ДопУсловия КАК МаршрутыДвиженияЗаявокДопУсловия
		|		ПО МаршрутыДвиженияЗаявокМаршрутЗаявки.Ссылка = МаршрутыДвиженияЗаявокДопУсловия.Ссылка
		|			И МаршрутыДвиженияЗаявокМаршрутЗаявки.ИДСтроки = МаршрутыДвиженияЗаявокДопУсловия.ИУДСтрокиВладельца
		|ГДЕ
		|	МаршрутыДвиженияЗаявокМаршрутЗаявки.Ссылка.ВидДокумента = ""Согласование отпуска""";
		
		Запрос.УстановитьПараметр("Предприятие", Предприятие);
		Запрос.УстановитьПараметр("ТипБюджета", ТипБюджета);
		
	Иначе
		Возврат;	
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		//делаем в попытке так как не везде есть доп условие(в идеале везде добавить)
		Попытка
			Если Не ДопУсловиеВыполнено(Выборка.ДопУсловие, ДокументОснование, Выборка.НомерСтрокиДокумента) Тогда
				Продолжить;
			КонецЕсли;	
		Исключение
		КонецПопытки;
		
		ПредставлениеПользователя = Выборка.СубъектСогласования;
		Если ТипЗнч(ПредставлениеПользователя) = Тип("ПеречислениеСсылка.ОсновныеДолжностиПредприятия") Тогда
			Пользователь = ПолучитьСотрудникаПоОсновнойДолжности(Выборка.Предприятие, ПредставлениеПользователя, ?(ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.Д_Бюджет"), Неопределено, Выборка.Подразделение));
		ИначеЕсли ТипЗнч(ПредставлениеПользователя) = Тип("СправочникСсылка.Д_Должности") Тогда
			Пользователь = Справочники.Пользователи.НайтиПоРеквизиту("Должность", ПредставлениеПользователя);	
		ИначеЕсли ТипЗнч(ПредставлениеПользователя) = Тип("СправочникСсылка.Пользователи") ИЛИ ТипЗнч(ПредставлениеПользователя) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
			Пользователь = ПредставлениеПользователя; 	
		КонецЕсли;	
		
		Если Не Пользователь.Пустая() Тогда
			СтрокаПоПользователям = ТаблицаПользователей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПоПользователям, Выборка);
			СтрокаПоПользователям.ТекПользователь 	= Пользователь;
			СтрокаПоПользователям.НомерСтроки     	= Строка(Выборка.НомерСтроки);
		КонецЕсли;	
	КонецЦикла;
	
	ТаблицаПользователей.Сортировать("НомерСтроки");
	
	Если ИмяТч = "ДопСогласование" Тогда
		ПользователиПоДействию = ТаблицаПользователей.НайтиСтроки(Новый Структура("Действие", "Согласование"));
		ИмяПользователяВТч = "СубъектСогласования";
	ИначеЕсли ИмяТч = "ДопИсполнение" Тогда
		ПользователиПоДействию = ТаблицаПользователей.НайтиСтроки(Новый Структура("Действие", "Исполнение"));
		ИмяПользователяВТч = "Исполнитель";
	ИначеЕсли ИмяТч = "ДопОповещение" Тогда
		ПользователиПоДействию = ТаблицаПользователей.НайтиСтроки(Новый Структура("Действие", "Ознакомление"));
		ИмяПользователяВТч = "Пользователь";
	ИначеЕсли ИмяТч = "Адресаты" Тогда
		ПользователиПоДействию = ТаблицаПользователей.НайтиСтроки(Новый Структура("Действие", "Ознакомление"));
		ИмяПользователяВТч = "СубъектСогласования";
	КонецЕсли;	
	
	Для Каждого ТекСтрокаПользователь Из ПользователиПоДействию Цикл
		ОтобранныеСтроки = БП[ИмяТЧ].НайтиСтроки(Новый Структура(ИмяПользователяВТч, ТекСтрокаПользователь.ТекПользователь));
		Если ОтобранныеСтроки.Количество() = 0 Тогда
			СтрокаМаршрута = БП[ИмяТЧ].Добавить();
			Если ИмяТч = "ДопСогласование" Тогда
				ЗаполнитьЗначенияСвойств(СтрокаМаршрута, ТекСтрокаПользователь);
				СтрокаМаршрута.СубъектСогласования = ТекСтрокаПользователь.ТекПользователь;
				Попытка
					СтрокаМаршрута.МаршрутДвижения = ТекСтрокаПользователь.Маршрут;
				Исключение
				КонецПопытки;
				Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") И ТипЗнч(ТекСтрокаПользователь.ТекПользователь) = Тип("СправочникСсылка.Пользователи") Тогда 
					СтрокаМаршрута.РезультирующееСогласование = ТекСтрокаПользователь.ТекПользователь.РезультирующееСогласование;
				КонецЕсли;
				Попытка
					СтрокаМаршрута.РольПользователя = ТекСтрокаПользователь.РольПользователя;
				Исключение
				КонецПопытки;
				Попытка
					СтрокаМаршрута.ИДГруппы = ТекСтрокаПользователь.ИДГруппы;
				Исключение
				КонецПопытки;
				Попытка
					СтрокаМаршрута.ТипГруппы = ТекСтрокаПользователь.ТипГруппы;
				Исключение
				КонецПопытки;
				Попытка
					СтрокаМаршрута.Уровень = ТекСтрокаПользователь.Уровень;
				Исключение
				КонецПопытки;
				Попытка
					СтрокаМаршрута.Обязателен = ТекСтрокаПользователь.Обязателен;
				Исключение
				КонецПопытки;
				Попытка
					СтрокаМаршрута.МожетРедактировать = ТекСтрокаПользователь.МожетРедактировать;
				Исключение
				КонецПопытки;				
				//добавлена замена на автора. д1 23.11.17
				Попытка
					Если СтрокаМаршрута.СубъектСогласования = Справочники.Пользователи.АвторДокумента Тогда
						СтрокаМаршрута.СубъектСогласования = ДокументОснование.Автор;	
					КонецЕсли;
				Исключение
				КонецПопытки; //конец
			ИначеЕсли ИмяТч = "ДопИсполнение" Тогда
				СтрокаМаршрута.Исполнитель = ТекСтрокаПользователь.ТекПользователь;
				//СтрокаМаршрута.ДокументОбязательныйКПрикреплению = ТекСтрокаПользователь.ДокументОбязательныйКПрикреплению;
				ЗаполнитьЗначенияСвойств(СтрокаМаршрута, ТекСтрокаПользователь);
				Попытка
					СтрокаМаршрута.РольПользователя = ТекСтрокаПользователь.РольПользователя;
				Исключение
				КонецПопытки;				
				//добавлена замена на автора. д1 23.11.17
				Попытка
					Если СтрокаМаршрута.Исполнитель = Справочники.Пользователи.АвторДокумента Тогда
						СтрокаМаршрута.Исполнитель = ДокументОснование.Автор;	
					КонецЕсли;
				Исключение
				КонецПопытки; //конец

			ИначеЕсли ИмяТч = "ДопОповещение" Тогда
				СтрокаМаршрута.Пользователь = ТекСтрокаПользователь.ТекПользователь;
				//добавлена замена на автора. д1 23.11.17
				Попытка
					Если СтрокаМаршрута.Пользователь = Справочники.Пользователи.АвторДокумента Тогда
						СтрокаМаршрута.Пользователь = ДокументОснование.Автор;	
					КонецЕсли;
				Исключение
				КонецПопытки; //конец
			ИначеЕсли ИмяТч = "Адресаты" Тогда
				СтрокаМаршрута.СубъектСогласования = ТекСтрокаПользователь.ТекПользователь;
				//добавлена замена на автора. д1 23.11.17
				Попытка
					Если СтрокаМаршрута.СубъектСогласования = Справочники.Пользователи.АвторДокумента Тогда
						СтрокаМаршрута.СубъектСогласования = ДокументОснование.Автор;	
					КонецЕсли;
				Исключение
				КонецПопытки; //конец
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
		
КонецПроцедуры	

Функция ПолучитьТекстыВопросов(Задача, НомерКнопки) Экспорт
	
	Если Задача.ТочкаМаршрута = БизнесПроцессы.ЗаявкиАдминистратору.ТочкиМаршрута.Действие1 ИЛИ
		Задача.ТочкаМаршрута = БизнесПроцессы.Согласование1.ТочкиМаршрута.Действие1 ИЛИ 
		Задача.ТочкаМаршрута = БизнесПроцессы.СогласованиеОбщее.ТочкиМаршрута.Действие1 Тогда
		Если НомерКнопки = 1 Тогда
			СтруктураВопростов = Новый Структура("Вопрос, СообщениеОбОшибке", "Вы уверены что хотите повторно запустить процесс?", "");
		ИначеЕсли НомерКнопки = 2 Тогда
			СтруктураВопростов = Новый Структура("Вопрос, СообщениеОбОшибке", "Вы уверены что хотите завершить процесс по документу?", "");
		КонецЕсли;
	ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.СогласованиеОбщее.ТочкиМаршрута.Действие2 Тогда
		Если НомерКнопки = 1 Тогда
			СтруктураВопростов = Новый Структура("Вопрос, СообщениеОбОшибке", "Вы уверены что хотите согласовать документ?", "");
		ИначеЕсли НомерКнопки = 2 Тогда
			СтруктураВопростов = Новый Структура("Вопрос, СообщениеОбОшибке", "Вы уверены что хотите отправить на доработку?", "Не указана причина возврата на доработку");
		ИначеЕсли НомерКнопки = 3 Тогда
			СтруктураВопростов = Новый Структура("Вопрос, СообщениеОбОшибке", "Вы уверены что хотите согласовать документ с замечаниями?", "Не указаны замечания");
		КонецЕсли;
	Иначе
		Если НомерКнопки = 1 Тогда
			СтруктураВопростов = Новый Структура("Вопрос, СообщениеОбОшибке", "Вы уверены что хотите выполнить задачу?", "");
		ИначеЕсли НомерКнопки = 2 Тогда
			СтруктураВопростов = Новый Структура("Вопрос, СообщениеОбОшибке", "Вы уверены что хотите отправить на доработку?", "Не указана причина возврата на доработку");
		КонецЕсли;
	КонецЕсли;
	
	
	
	Возврат СтруктураВопростов;

КонецФункции // ()

#КонецОбласти 

#Область Служебные

Процедура ОчиститьНаборРегистра(Параметры)
	
	НаборЗаписей = РегистрыСведений.Д_ДоступностьДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Параметры.Документ);
	//НоваяЗапись = НаборЗаписей.Добавить();
	//НоваяЗапись.Документ = Параметры.Документ;
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Процедура ДобавитьДоступность(Параметры)
	НаборЗаписей = РегистрыСведений.Д_ДоступностьДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Параметры.Документ);
	НаборЗаписей.Отбор.Значение.Установить(Параметры.Значение);
	НоваяЗапись = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяЗапись, Параметры);
	НоваяЗапись.ИмяДокумента = Параметры.Документ.Метаданные().Имя;
	НаборЗаписей.Записать(Истина);
КонецПроцедуры

Функция ПолучитьУжеСозданныеЗадачи(БП)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Задача.Ссылка
	|ИЗ
	|	Задача.Задача КАК Задача
	|ГДЕ
	|	Задача.БизнесПроцесс = &БизнесПроцесс";
	Запрос.УстановитьПараметр("БизнесПроцесс", БП);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Новый Массив;
	Иначе
		Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
КонецФункции

Функция ЗадвоениеЗадач(БП, МассивУжеСозданных)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Задача.ПометкаУдаления,
	|	Задача.БизнесПроцесс,
	|	Задача.ТочкаМаршрута,
	|	Задача.Наименование,
	|	Задача.Выполнена,
	|	Задача.Заявка,
	|	Задача.Предприятие,
	|	Задача.Автор,
	|	Задача.ДатаНачала,
	|	Задача.ДатаИсполнения,
	|	Задача.РезультатВыполнения,
	|	Задача.Пользователь,
	|	Задача.Гиперссылка,
	|	Задача.ОткрыватьФорму,
	|	Задача.Новая,
	|	Задача.СрокВыполнения,
	|	Задача.НеДелегировать,
	|	Задача.ВРаботе,
	|	Задача.ДокументОбязательныйКПрикреплению,
	|	Задача.Исполнитель,
	|	Задача.Должность,
	|	СУММА(1) КАК КоличествоЗадач
	|ПОМЕСТИТЬ Вт_НачДанные
	|ИЗ
	|	Задача.Задача КАК Задача
	|ГДЕ
	|	НЕ Задача.Ссылка В (&СписокЗадач)
	|	И Задача.БизнесПроцесс = &БизнесПроцесс
	|
	|СГРУППИРОВАТЬ ПО
	|	Задача.ДатаНачала,
	|	Задача.ДатаИсполнения,
	|	Задача.РезультатВыполнения,
	|	Задача.Пользователь,
	|	Задача.Гиперссылка,
	|	Задача.ОткрыватьФорму,
	|	Задача.ПометкаУдаления,
	|	Задача.Выполнена,
	|	Задача.Заявка,
	|	Задача.Предприятие,
	|	Задача.Автор,
	|	Задача.ДокументОбязательныйКПрикреплению,
	|	Задача.Исполнитель,
	|	Задача.Должность,
	|	Задача.БизнесПроцесс,
	|	Задача.ТочкаМаршрута,
	|	Задача.Наименование,
	|	Задача.Новая,
	|	Задача.СрокВыполнения,
	|	Задача.НеДелегировать,
	|	Задача.ВРаботе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вт_НачДанные.КоличествоЗадач
	|ИЗ
	|	Вт_НачДанные КАК Вт_НачДанные
	|ГДЕ
	|	Вт_НачДанные.КоличествоЗадач > 1";
	Запрос.УстановитьПараметр("СписокЗадач", МассивУжеСозданных);
	Запрос.УстановитьПараметр("БизнесПроцесс", БП);
	
	Результат = Запрос.Выполнить();

	Возврат Не Результат.Пустой();
	
КонецФункции	

Процедура ОзнакомитьсяСДокументом(ТекЗаявка)
	Если ТипЗнч(ТекЗаявка) = Тип("ДокументСсылка.БП_Оповещение") Тогда
		РеквизитыОповещения = БюджетныйНаСервере.ВернутьРеквизиты(ТекЗаявка, "Гиперссылка");
		Если НЕ РеквизитыОповещения.Гиперссылка = Неопределено Тогда
			ТекБП = БПСервер.НайтиТекущийБПСервер(РеквизитыОповещения.Гиперссылка);
			Если НЕ ТекБП = Неопределено Тогда
				ТекБПОбъект = ТекБП.ПолучитьОбъект();
				Если ТипЗнч(ТекБП) = Тип("БизнесПроцессСсылка.СогласованиеОбщее") Тогда
					ОтобранныеСтроки = ТекБПОбъект.ДопОповещение.НайтиСтроки(Новый Структура("Пользователь", ПараметрыСеанса.ТекущийПользователь)); 
					Для каждого ТекСтрока Из ОтобранныеСтроки Цикл
						ТекСтрока.Оповещен = Истина;
						//ТекСтрока.Пользователь = ПараметрыСеанса.ТекущийПользователь;
					КонецЦикла;
					ТекБПОбъект.Записать();
				ИначеЕсли ТипЗнч(ТекБП) = Тип("БизнесПроцессСсылка.Согласование1") Тогда	
					ОтобранныеСтроки = ТекБПОбъект.ДопОповещение.НайтиСтроки(Новый Структура("Пользователь", ПараметрыСеанса.ТекущийПользователь)); 
					Для каждого ТекСтрока Из ОтобранныеСтроки Цикл
						ТекСтрока.Оповещен = Истина;
						ТекСтрока.Пользователь = ПараметрыСеанса.ТекущийПользователь;
					КонецЦикла;
					ТекБПОбъект.Записать();
				ИначеЕсли ТипЗнч(ТекБП) = Тип("БизнесПроцессСсылка.Согласование3") Тогда
					ОтобранныеСтроки = ТекБПОбъект.Адресаты.НайтиСтроки(Новый Структура("СубъектСогласования", ПараметрыСеанса.ТекущийПользователь)); 
					Для каждого ТекСтрока Из ОтобранныеСтроки Цикл
						ТекСтрока.Согласовано = Истина;
						ТекСтрока.Пользователь = ПараметрыСеанса.ТекущийПользователь;
					КонецЦикла;
					ТекБПОбъект.Записать();
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	
КонецПроцедуры

Функция ДопУсловиеВыполнено(ДопУсловие, Документ, НомерСтроки)
	
	Если Не ЗначениеЗаполнено(ДопУсловие) Тогда
		Возврат Истина;
	КонецЕсли;	
	
	ТаблицаУсловий = РаспаковатьТекстXML(ДопУсловие);
	
	УсловиеВыполнено = Истина;
	
	Для Каждого СтрокаУсловий Из ТаблицаУсловий Цикл
		//Определение реквизита для проверки
		Если СтрокаУсловий.Реквизит = "Сумма документа" Тогда
			РеквизитДляСравнения = Документ.СуммаДокумента;
		ИначеЕсли СтрокаУсловий.Реквизит = "Источник" Тогда
			РеквизитДляСравнения = Документ.ЗаявкаБезнал[НомерСтроки - 1].Источник;
		ИначеЕсли СтрокаУсловий.Реквизит = "ИнвПроект" Тогда
			РеквизитДляСравнения = Документ.ЗаявкаБезнал[НомерСтроки - 1].ИнвПроект;
		ИначеЕсли СтрокаУсловий.Реквизит = "Скидка (ДДУ)" Тогда
			РеквизитДляСравнения = Документ.Скидка;
		Иначе
			РеквизитДляСравнения = Документ[СтрокаУсловий.Реквизит];
		КонецЕсли;
		//Проверка условий
		Если СтрокаУсловий.ВидСравнения	= ВидСравнения.Равно Тогда
			Если НЕ РеквизитДляСравнения = СтрокаУсловий.Значение Тогда
				УсловиеВыполнено = Ложь;
				Продолжить;
			КонецЕсли;
		ИначеЕсли СтрокаУсловий.ВидСравнения = ВидСравнения.Больше Тогда
			Если НЕ РеквизитДляСравнения > СтрокаУсловий.Значение Тогда
				УсловиеВыполнено = Ложь;
				Продолжить;
			КонецЕсли;
		ИначеЕсли СтрокаУсловий.ВидСравнения = ВидСравнения.БольшеИлиРавно Тогда
			Если НЕ РеквизитДляСравнения >= СтрокаУсловий.Значение Тогда
				УсловиеВыполнено = Ложь;
				Продолжить;
			КонецЕсли;	
		ИначеЕсли СтрокаУсловий.ВидСравнения = ВидСравнения.Меньше Тогда
			Если НЕ РеквизитДляСравнения < СтрокаУсловий.Значение Тогда
				УсловиеВыполнено = Ложь;
				Продолжить;
			КонецЕсли;	
		ИначеЕсли СтрокаУсловий.ВидСравнения = ВидСравнения.МеньшеИлиРавно Тогда
			Если НЕ РеквизитДляСравнения <= СтрокаУсловий.Значение Тогда
				УсловиеВыполнено = Ложь;
				Продолжить;
			КонецЕсли;	
		ИначеЕсли СтрокаУсловий.ВидСравнения = ВидСравнения.НеРавно Тогда
			Если НЕ РеквизитДляСравнения <> СтрокаУсловий.Значение Тогда
				УсловиеВыполнено = Ложь;
				Продолжить;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	
	Возврат УсловиеВыполнено;
	
КонецФункции

#КонецОбласти 

#Область ПрочиеКВыяснению

Функция СтатьяСырья(ТекСтатья) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПользователиДоступныеСтатьи.Ссылка
	|ИЗ
	|	Справочник.Пользователи.ДоступныеСтатьи КАК ПользователиДоступныеСтатьи
	|ГДЕ
	|	ПользователиДоступныеСтатьи.СтатьяДДС В ИЕРАРХИИ(&ТекСтатья)";
	
	Запрос.УстановитьПараметр("ТекСтатья", ТекСтатья);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		Возврат Истина;	
	
	КонецЕсли;
	
	
	Возврат Ложь;	

КонецФункции // ()

Функция ПараметрыТекущегоПользователя() Экспорт
	возврат ПользователиИнформационнойБазы.ТекущийПользователь().ПолноеИмя;	
КонецФункции

Функция ДоступныеНаправления(Пользователь = Неопределено) Экспорт
	Если Пользователь = Неопределено Тогда
		Пользователь = ПараметрыСеанса.ТекущийПользователь;	
	КонецЕсли;
	
	Если ПараметрыСеанса.ДоступныеНаправления.Количество() Тогда
		СписокНаправлений = Новый Массив;
		Для каждого ТекПП Из ПараметрыСеанса.ДоступныеНаправления Цикл
			СписокНаправлений.Добавить(ТекПП);	
		КонецЦикла; 			
		СписокНеНаправлений = Новый Массив;
		Для каждого ТекПП Из ПараметрыСеанса.НеДоступныеНаправления Цикл
			СписокНеНаправлений.Добавить(ТекПП);	
		КонецЦикла; 			
		
		Возврат Новый Структура("ДоступныеНаправления, НеДоступныеНаправления", СписокНаправлений, СписокНеНаправлений);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ОсновныеДолжностиПредприятия.Предприятие.Родитель КАК Ссылка
	               |ИЗ
	               |	РегистрСведений.ОсновныеДолжностиПредприятия КАК ОсновныеДолжностиПредприятия
	               |ГДЕ
	               |	НЕ ОсновныеДолжностиПредприятия.Предприятие.Родитель = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	               |	И НЕ ОсновныеДолжностиПредприятия.Предприятие.Родитель = НЕОПРЕДЕЛЕНО
	               |	И ОсновныеДолжностиПредприятия.Сотрудник В(&Сотрудник)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НаправленияДеятельности.Ссылка
	               |ИЗ
	               |	Справочник.НаправленияДеятельности КАК НаправленияДеятельности
	               |ГДЕ
	               |	ЛОЖЬ В
	               |			(ВЫБРАТЬ
	               |				Пользователи.ДоступныПредприятияИзСписка
	               |			ИЗ
	               |				Справочник.Пользователи КАК Пользователи
	               |			ГДЕ
	               |				Пользователи.Ссылка В (&Сотрудник))";
				   
	Запрос.УстановитьПараметр("Сотрудник", БПСервер.ПолучитьМассивПользователей());
	
	Результат = Запрос.Выполнить();
	ВыборкаДоступные = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	МассивНедоступныхНаправлений = Новый Массив;
	НедоступныеНаправления = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НаправленияДеятельности.Ссылка,
	|	НаправленияДеятельности.Наименование
	|ИЗ
	|	Справочник.НаправленияДеятельности КАК НаправленияДеятельности
	|ГДЕ
	|	НЕ НаправленияДеятельности.Ссылка В (&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", ВыборкаДоступные);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивНедоступныхНаправлений.Добавить(Выборка.Наименование);
		НедоступныеНаправления.Добавить(Выборка.Ссылка);	
	КонецЦикла;
	
	Возврат Новый Структура("ДоступныеНаправления, НеДоступныеНаправления, НеДоступныеНаправленияСтрока", ВыборкаДоступные, НедоступныеНаправления, МассивНедоступныхНаправлений); 
КонецФункции // ()

Процедура ВернутьОтмененныеЗаякиНаДоработку(Задача) Экспорт
	Если Задача.ТочкаМаршрута = БизнесПроцессы.Согласование1.ТочкиМаршрута.Действие1 Тогда
		УстановитьПривилегированныйРежим(Истина);
		ТекОбРеестр = Задача.Заявка.ПолучитьОбъект();
		Для каждого ТекСтрока Из ТекОбРеестр.ЗаявкаБезнал Цикл
			ТекСтрока.ОтменаОплаты = Истина;
			ТекСтрока.Комментарии = Строка(Задача.Заявка) + " не согласован и отменен!";
			ОтправитьНаДоработкуБПЗаявки(ТекСтрока);
			ТекСтрока.ЗаявкаНаФинансирование = Неопределено;
		КонецЦикла; 
		ТекОбРеестр.Записать();
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
КонецПроцедуры

Процедура АкцептоватьЗаявкиНаОплату(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ТекущееПП = Ссылка;
	
	ЭтоДВижениеДС = Ложь;
	Если ТипЗнч(ТекущееПП) = Тип("ДокументСсылка.УЧ_ДвижениеДС") и ТипЗнч(ТекущееПП.ДокОснование) = Тип("ДокументСсылка.ПлатежноеПоручение") И ЗначениеЗаполнено(ТекущееПП.ДокОснование) И НЕ ТекущееПП.ДокОснование.Акцептован Тогда
		ТекущееПП = ТекущееПП.ДокОснование;
		ЭтоДВижениеДС = Истина;	
	КонецЕсли;
	
	Если ТипЗнч(ТекущееПП) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		Если ТипЗнч(ТекущееПП.Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаФинансирование") И ЗначениеЗаполнено(ТекущееПП.Заявка) Тогда
			Если ТекущееПП.Заявка.Сумма = ТекущееПП.СуммаДокумента Тогда
				ЗаявкаНаОплатуОбъект = ТекущееПП.Заявка.ПолучитьОбъект();
				ЗаявкаНаОплатуОбъект.Акцептован = Истина;
				ЗаявкаНаОплатуОбъект.СуммаОплачено = ТекущееПП.СуммаДокумента;
				ЗаявкаНаОплатуОбъект.Записать();
			Иначе
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				               |	СУММА(ПлатежноеПоручение.СуммаДокумента) КАК СуммаДокумента
				               |ИЗ
				               |	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
				               |ГДЕ
				               |	ПлатежноеПоручение.Заявка = &Заявка
				               |	И ПлатежноеПоручение.ПометкаУдаления = ЛОЖЬ";
				
				Запрос.УстановитьПараметр("Заявка", ТекущееПП.Заявка);
				
				Результат = Запрос.Выполнить();
				Выборка = Результат.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					ЗаявкаНаОплатуОбъект = ТекущееПП.Заявка.ПолучитьОбъект();
					ЗаявкаНаОплатуОбъект.Акцептован = (ТекущееПП.Заявка.Сумма = Выборка.СуммаДокумента);
					ЗаявкаНаОплатуОбъект.СуммаОплачено = Выборка.СуммаДокумента;
					ЗаявкаНаОплатуОбъект.Записать();
				КонецЦикла;
				
			КонецЕсли;
			
			Если ЭтоДВижениеДС Тогда
				ТекущееППОбъект = ТекущееПП.ПолучитьОбъект();
				ТекущееППОбъект.Акцептован = Истина;
				ТекущееППОбъект.Записать();			
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли ТипЗнч(ТекущееПП) = Тип("ДокументСсылка.УЧ_ДвижениеДС") Тогда
		Если ТипЗнч(ТекущееПП.ДокОснование) = Тип("ДокументСсылка.Д_ЗаявкаНаФинансирование") И ЗначениеЗаполнено(ТекущееПП.ДокОснование) Тогда
			Если ТекущееПП.ДокОснование.Сумма = ТекущееПП.СуммаДокумента Тогда
				ЗаявкаНаОплатуОбъект = ТекущееПП.ДокОснование.ПолучитьОбъект();
				ЗаявкаНаОплатуОбъект.Акцептован = Истина;
				ЗаявкаНаОплатуОбъект.СуммаОплачено = ТекущееПП.СуммаДокумента;
				ЗаявкаНаОплатуОбъект.Записать();
			Иначе
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				               |	СУММА(УЧ_ДвижениеДС.СуммаДокумента) КАК СуммаДокумента
				               |ИЗ
				               |	Документ.УЧ_ДвижениеДС КАК УЧ_ДвижениеДС
				               |ГДЕ
				               |	УЧ_ДвижениеДС.ПометкаУдаления = ЛОЖЬ
				               |	И УЧ_ДвижениеДС.ДокОснование = &Заявка";
				
				Запрос.УстановитьПараметр("Заявка", ТекущееПП.ДокОснование);
				
				Результат = Запрос.Выполнить();
				Выборка = Результат.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					ЗаявкаНаОплатуОбъект = ТекущееПП.ДокОснование.ПолучитьОбъект();
					ЗаявкаНаОплатуОбъект.Акцептован = (ТекущееПП.ДокОснование.Сумма = Выборка.СуммаДокумента);
					ЗаявкаНаОплатуОбъект.СуммаОплачено = Выборка.СуммаДокумента;
					ЗаявкаНаОплатуОбъект.Записать();
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ОтправитьНаДоработкуБПЗаявки(ТекСтрока) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Задача.Ссылка КАК Задача,
	               |	Задача.Выполнена КАК Выполнена,
	               |	Задача.БизнесПроцесс КАК БизнесПроцесс
	               |ИЗ
	               |	Задача.Задача КАК Задача
	               |ГДЕ
	               |	Задача.Заявка = &Заявка
	               |	И Задача.ПометкаУдаления = ЛОЖЬ
	               |	И Задача.Заявка.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Заявка", ТекСтрока.ЗаявкаНаФинансирование);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();
	
	НевыполненныеЗадачи = Выборка.НайтиСтроки(Новый Структура("Выполнена", Ложь));
	Для каждого ТекСтрокаВыборки Из НевыполненныеЗадачи Цикл
		БПСервер.ИзменитьЗадачу(ТекСтрокаВыборки.БизнесПроцесс, ТекСтрока.ЗаявкаНаФинансирование, Ложь, ТекСтрока.Комментарии);
		Возврат;
	КонецЦикла;
	
	Если Выборка.Количество() Тогда
		ТекБП = Выборка[0].БизнесПроцесс;
		ТекБПОб = ТекБП.ПолучитьОбъект();
		ТекБПОб.Стартован = Ложь;
		ТекБПОб.Завершен = Ложь;
		Для каждого ТекСтрокаИсп Из ТекБПОб.ДопИсполнение Цикл
			ТекСтрокаИсп.Исполнено = Ложь;	
		КонецЦикла;
		ТекБПОб.ИсторияСогласования = ТекБПОб.ИсторияСогласования + ?(ПустаяСтрока(ТекБПОб.ИсторияСогласования), "", "
		|") + Строка(ТекущаяДата()) + ": " + ПараметрыСеанса.ТекущийПользователь + " вернул(а) на доработку:
		|" + ТекСтрока.Комментарии;
		ТекБПОб.Записать();
		
		Задача = БПСервер.НоваяЗадача(
		ТекБП.Автор, 
		"Доработать", 
		ТекБП, 
		БизнесПроцессы.СогласованиеОбщее.ТочкиМаршрута.Действие1);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область Регламентные

Процедура ПроверкаВыполненияЗадачПодчиненных() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыбранныеЗадачи.Ссылка КАК Ссылка,
	|	ВыбранныеЗадачи.Исполнитель КАК Исполнитель,
	|	ВыбранныеЗадачи.Предприятие КАК Предприятие,
	|	ВыбранныеЗадачи.Заявка КАК Заявка,
	|	ДолжностиПользователяСрезПоследних.Руководитель КАК Руководитель,
	|	ВыбранныеЗадачи.Наименование КАК Наименование,
	|	ВыбранныеЗадачи.БизнесПроцесс КАК БизнесПроцесс,
	|	ЕСТЬNULL(БП_ТекущиеСтатусыСрезПоследних.ТекущийСтатус, ЗНАЧЕНИЕ(Перечисление.БП_ТекущийСтатус.НаРаботе)) КАК Статус
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	Задача.Задача КАК ВыбранныеЗадачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДолжностиПользователя.СрезПоследних(&ТекДата, ) КАК ДолжностиПользователяСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БП_ТекущиеСтатусы.СрезПоследних(&ТекДата, ) КАК БП_ТекущиеСтатусыСрезПоследних
	|			ПО ДолжностиПользователяСрезПоследних.Руководитель = БП_ТекущиеСтатусыСрезПоследних.Пользователь
	|		ПО ВыбранныеЗадачи.Исполнитель = ДолжностиПользователяСрезПоследних.Пользователь
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БП_ДелегированиеЗадач КАК БП_ДелегированиеЗадач
	|		ПО (БП_ДелегированиеЗадач.Задача = ВыбранныеЗадачи.Ссылка)
	|ГДЕ
	|	ВыбранныеЗадачи.ПометкаУдаления = ЛОЖЬ
	|	И ВыбранныеЗадачи.Выполнена = ЛОЖЬ
	|	И (ТИПЗНАЧЕНИЯ(ВыбранныеЗадачи.Заявка) = ТИП(Документ.Д_ЗаявкаНаОплату)
	|			ИЛИ ТИПЗНАЧЕНИЯ(ВыбранныеЗадачи.Заявка) = ТИП(Документ.Д_ЗаявкаНаАвансовыйОтчет)
	|			ИЛИ ТИПЗНАЧЕНИЯ(ВыбранныеЗадачи.Заявка) = ТИП(Документ.Д_ЗаявкаНаОтгрузку)
	|			ИЛИ ТИПЗНАЧЕНИЯ(ВыбранныеЗадачи.Заявка) = ТИП(Документ.Д_КорректировкаДокумента)
	|			ИЛИ ТИПЗНАЧЕНИЯ(ВыбранныеЗадачи.Заявка) = ТИП(Документ.Д_СлужебнаяЗаписка)
	|			ИЛИ ТИПЗНАЧЕНИЯ(ВыбранныеЗадачи.Заявка) = ТИП(Документ.БП_Поручение))
	|	И ВыбранныеЗадачи.Дата >= ДОБАВИТЬКДАТЕ(&ТекДата, МЕСЯЦ, -1)
	|	И ВыбранныеЗадачи.СрокВыполнения <= &ТекДата
	|	И ЕСТЬNULL(БП_ТекущиеСтатусыСрезПоследних.ТекущийСтатус, ЗНАЧЕНИЕ(Перечисление.БП_ТекущийСтатус.НаРаботе)) = ЗНАЧЕНИЕ(Перечисление.БП_ТекущийСтатус.НаРаботе)
	|	И ВЫБОР
	|			КОГДА БП_ДелегированиеЗадач.Задача ЕСТЬ NULL 
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВЫБОР
	|					КОГДА БП_ДелегированиеЗадач.Делигирована
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОНЕЦ
	|	И ВыбранныеЗадачи.НеДелегировать = ЛОЖЬ
	|	И ВыбранныеЗадачи.СрокВыполнения < &ТекДата
	|	И НЕ ВыбранныеЗадачи.ВРаботе
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БП_ДелегированиеЗадач.Задача,
	|	БП_ДелегированиеЗадач.Замещающий,
	|	БП_ДелегированиеЗадач.Задача.Предприятие,
	|	БП_ДелегированиеЗадач.Задача.Заявка,
	|	ДолжностиПользователяСрезПоследних.Руководитель,
	|	БП_ДелегированиеЗадач.Задача.Наименование,
	|	БП_ДелегированиеЗадач.Задача.БизнесПроцесс,
	|	ЕСТЬNULL(БП_ТекущиеСтатусыСрезПоследних.ТекущийСтатус, ЗНАЧЕНИЕ(Перечисление.БП_ТекущийСтатус.НаРаботе))
	|ИЗ
	|	РегистрСведений.БП_ДелегированиеЗадач КАК БП_ДелегированиеЗадач
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДолжностиПользователя.СрезПоследних(&ТекДата, ) КАК ДолжностиПользователяСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БП_ТекущиеСтатусы.СрезПоследних(&ТекДата, ) КАК БП_ТекущиеСтатусыСрезПоследних
	|			ПО ДолжностиПользователяСрезПоследних.Руководитель = БП_ТекущиеСтатусыСрезПоследних.Пользователь
	|		ПО БП_ДелегированиеЗадач.Замещающий = ДолжностиПользователяСрезПоследних.Пользователь
	|ГДЕ
	|	ЕСТЬNULL(БП_ТекущиеСтатусыСрезПоследних.ТекущийСтатус, ЗНАЧЕНИЕ(Перечисление.БП_ТекущийСтатус.НаРаботе)) = ЗНАЧЕНИЕ(Перечисление.БП_ТекущийСтатус.НаРаботе)
	|	И НЕ БП_ДелегированиеЗадач.Делигирована
	|	И (ТИПЗНАЧЕНИЯ(БП_ДелегированиеЗадач.Задача.Заявка) = ТИП(Документ.Д_ЗаявкаНаОплату)
	|			ИЛИ ТИПЗНАЧЕНИЯ(БП_ДелегированиеЗадач.Задача.Заявка) = ТИП(Документ.Д_ЗаявкаНаАвансовыйОтчет)
	|			ИЛИ ТИПЗНАЧЕНИЯ(БП_ДелегированиеЗадач.Задача.Заявка) = ТИП(Документ.Д_ЗаявкаНаОтгрузку)
	|			ИЛИ ТИПЗНАЧЕНИЯ(БП_ДелегированиеЗадач.Задача.Заявка) = ТИП(Документ.Д_КорректировкаДокумента)
	|			ИЛИ ТИПЗНАЧЕНИЯ(БП_ДелегированиеЗадач.Задача.Заявка) = ТИП(Документ.Д_СлужебнаяЗаписка)
	|			ИЛИ ТИПЗНАЧЕНИЯ(БП_ДелегированиеЗадач.Задача.Заявка) = ТИП(Документ.БП_Поручение))
	|	И ДОБАВИТЬКДАТЕ(БП_ДелегированиеЗадач.ДатаПеренаправления, ДЕНЬ, 1) <= &ТекДата
	|	И БП_ДелегированиеЗадач.ДатаПеренаправления >= ДОБАВИТЬКДАТЕ(&ТекДата, МЕСЯЦ, -1)
	|	И БП_ДелегированиеЗадач.Задача.СрокВыполнения < &ТекДата
	|	И НЕ БП_ДелегированиеЗадач.Задача.ВРаботе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Данные.Ссылка,
	|	ВТ_Данные.Исполнитель,
	|	ВТ_Данные.Предприятие,
	|	ВТ_Данные.Заявка,
	|	ВТ_Данные.Руководитель,
	|	ВТ_Данные.Наименование,
	|	ВТ_Данные.БизнесПроцесс,
	|	ВТ_Данные.Статус,
	|	БП_ДелегированиеЗадач.Задача,
	|	ВТ_Данные.БизнесПроцесс.Автор,
	|	ВТ_Данные.Заявка.Автор,
	|	ВТ_Данные.Ссылка.Автор КАК Автор
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БП_ДелегированиеЗадач КАК БП_ДелегированиеЗадач
	|		ПО ВТ_Данные.Ссылка = БП_ДелегированиеЗадач.Задача
	|			И ВТ_Данные.Руководитель = БП_ДелегированиеЗадач.Замещающий
	|ГДЕ
	|	НЕ ВТ_Данные.Руководитель ЕСТЬ NULL 
	|	И НЕ ВТ_Данные.Руководитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	И БП_ДелегированиеЗадач.Задача ЕСТЬ NULL 
	|	И ВЫБОР
	|			КОГДА ВТ_Данные.Заявка ССЫЛКА Документ.БП_Оповещение
	|					ИЛИ ВТ_Данные.Заявка ССЫЛКА Документ.БП_Поручение
	|				ТОГДА ВТ_Данные.Руководитель <> ВТ_Данные.Заявка.Автор
	|			ИНАЧЕ ВТ_Данные.БизнесПроцесс.Автор <> ВТ_Данные.Руководитель
	|		КОНЕЦ";
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Выборка = Запрос.Выполнить().Выбрать();
	
	//массив пользователей-исключений
	МассивНеделегирующих = Новый Массив;
	МассивНеделегирующих.Добавить(Справочники.Пользователи.ПустаяСсылка()); //нужно исправить!!!
	
	Пока Выборка.Следующий() Цикл
		
		Если МассивНеделегирующих.Найти(Выборка.Руководитель) = Неопределено Тогда
			
			НаборЗаписей = РегистрыСведений.БП_ДелегированиеЗадач.СоздатьНаборЗаписей();
			СтрокаНабора 						= НаборЗаписей.Добавить();
			СтрокаНабора.Задача 				= Выборка.Ссылка;
			СтрокаНабора.Делигирована 			= Ложь;
			СтрокаНабора.Автор 					= Выборка.Автор;
			Если ЗначениеЗаполнено(Выборка.БизнесПроцесс) Тогда
				СтрокаНабора.Инициатор 			= Выборка.БизнесПроцессАвтор;
			ИначеЕсли ТипЗнч(Выборка.Заявка) = Тип("ДокументСсылка.БП_Оповещение") ИЛИ  ТипЗнч(Выборка.Заявка) = Тип("ДокументСсылка.БП_Поручение") Тогда
				СтрокаНабора.Инициатор 			= Выборка.ЗаявкаАвтор;
			КонецЕсли;
			СтрокаНабора.Замещающий 			= Выборка.Руководитель;
			СтрокаНабора.Пользователь 			= Выборка.Исполнитель;
			СтрокаНабора.ДатаПеренаправления 	= ТекущаяДата();
			СтрокаНабора.Комментарий 			= "Задача просрочена пользователем " + Выборка.Исполнитель;
			НаборЗаписей.Записать(Ложь);
		КонецЕсли;
		
	КонецЦикла;  
	
КонецПроцедуры

Процедура ОповеститьОПросроченныхЗаданиях() экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	БП_ДелегированиеЗадач.Задача.Заявка КАК Задача,
	               |	БП_ДелегированиеЗадач.Пользователь КАК Подчиненный,
	               |	БП_ДелегированиеЗадач.Задача.СрокВыполнения КАК СрокВыполнения,
	               |	БП_ДелегированиеЗадач.Замещающий КАК Замещающий,
	               |	БП_ДелегированиеЗадач.Задача.Заявка.Тема КАК ЗаявкаТема,
	               |	БП_ДелегированиеЗадач.Задача.Заявка.Описание КАК ЗаявкаОписание,
	               |	БП_ДелегированиеЗадач.Задача.Заявка.ДатаНачала КАК ЗаявкаДатаНачала,
	               |	БП_ДелегированиеЗадач.Задача.Заявка.Автор КАК ЗаявкаАвтор,
	               |	1 КАК Количество,
	               |	БП_ДелегированиеЗадач.Задача.Заявка.Номер КАК ЗаявкаНомер
	               |ИЗ
	               |	РегистрСведений.БП_ДелегированиеЗадач КАК БП_ДелегированиеЗадач
	               |ГДЕ
	               |	ТИПЗНАЧЕНИЯ(БП_ДелегированиеЗадач.Задача.Заявка) = ТИП(Документ.БП_Поручение)
	               |	И БП_ДелегированиеЗадач.Задача.СрокВыполнения < &ТекДата
	               |	И НЕ БП_ДелегированиеЗадач.Задача.Заявка.Автор = БП_ДелегированиеЗадач.Замещающий
	               |ИТОГИ
	               |	СУММА(Количество)
	               |ПО
	               |	Замещающий";
	
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	
	Результат = Запрос.Выполнить();
	ВыборкаГруппировки = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Замещающий");
	
	НачатьТранзакцию();

	Пока ВыборкаГруппировки.Следующий() Цикл
		Выборка = Результат.Выбрать();
		СообщениеПользователюИтоговое = "Внимание!";
		
		//собственные
		СтруктураОтбора = Новый Структура("Замещающий", ВыборкаГруппировки.Замещающий);
		
		СообщениеИсполнителю = "";
		СообщениеПодчиненному = "";
		КолвоСвоих = 0;
		КолвоПодчиненных = 0;
		
		Пока Выборка.НайтиСледующий(СтруктураОтбора) Цикл
			Если Не ЗначениеЗаполнено(Выборка.Задача) ИЛИ Не ЗначениеЗаполнено(Выборка.СрокВыполнения) Тогда
				Продолжить;			
			КонецЕсли;
			ТекСооб = "
				|
				|" + "Задание №" + Строка(Выборка.ЗаявкаНомер) + " от " + Строка(Выборка.ЗаявкаАвтор) + " от " + Формат(Выборка.ЗаявкаДатаНачала, "ДФ=dd.MM.yyyy") + "
				|Тема: " + Строка(Выборка.ЗаявкаТема) + "
				|Срок выполнения: " + Строка(Выборка.СрокВыполнения);
			Если ЗначениеЗаполнено(Выборка.Подчиненный) Тогда
				//СообщениеПодчиненному = СообщениеПодчиненному + ТекСооб + "
				//|Исполнитель (подчиненный): " + Строка(Выборка.Подчиненный);
				//КолвоПодчиненных = КолвоПодчиненных + 1;
			Иначе
				СообщениеИсполнителю = СообщениеИсполнителю + ТекСооб;
				КолвоСвоих = КолвоСвоих + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если КолвоСвоих Тогда
			СообщениеПользователюИтоговое = СообщениеПользователюИтоговое + "
			|У вас имеются невыполненные задания, срок выполнения по которым уже истек (всего " + КолвоСвоих + ")!
			|Пожалуйста, примите меры для их выполнения, либо согласуйте (через механизм управления сроками задач в 1С) новый срок.";
			СообщениеПользователюИтоговое = СообщениеПользователюИтоговое + СообщениеИсполнителю;
		КонецЕсли;
		
		Если КолвоПодчиненных Тогда
			СообщениеПользователюИтоговое = СообщениеПользователюИтоговое + "
			|
			|У ваших подчиненных имеются невыполненные задания, делегированные на вас, с истекшим сроков выполнения (всего " + КолвоПодчиненных + ")!
			|Пожалуйста, примите меры для их выполнения, либо согласуйте (через механизм управления сроками задач в 1С) новый срок.";
			СообщениеПользователюИтоговое = СообщениеПользователюИтоговое + СообщениеПодчиненному;
		КонецЕсли;
		
		
		Если КолвоСвоих ИЛИ КолвоПодчиненных Тогда
			
			СтруктураОтчета = Новый Структура;
			СтруктураОтчета.Вставить("ИмяФормыДокумента", "БП_Поручение.Форма.ФормаСпискаЗадачПоЗаданиям");
			//СтруктураОтчета.Вставить("Параметр0", ПараметрКоманды.Сценарий);
			//СтруктураОтчета.Вставить("Параметр1", ПараметрКоманды.ТипКвоты);
			//СтруктураОтчета.Вставить("Параметр2", ПараметрКоманды);
			СтруктураОтчета.Вставить("Отбор", Неопределено);
			СтруктураОтчета.Вставить("Группировка", Неопределено);
			СтруктураОтчета.Вставить("Заголовок", "Перейти к списку просроченных заданий...");
			
			
			БПСервер.СоздатьОповещение(ВыборкаГруппировки.Замещающий, СообщениеПользователюИтоговое, "Уведомление о просроченных заданиях",,,Справочники.Пользователи.Система, "Уведомление о просроченных заданиях", СтруктураОтчета); 
		КонецЕсли;
		
		
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	

КонецПроцедуры

Процедура ПеренаправитьЗадачиУдаленных() экспорт
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ДолжностиПользователяСрезПоследних.Руководитель КАК Руководитель,
	             |	Задача.Ссылка КАК ЗадачаСсылка
	             |ИЗ
	             |	Задача.Задача КАК Задача
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДолжностиПользователя.СрезПоследних КАК ДолжностиПользователяСрезПоследних
	             |		ПО Задача.Исполнитель = ДолжностиПользователяСрезПоследних.Пользователь
	             |ГДЕ
	             |	Задача.ПометкаУдаления = ЛОЖЬ
	             |	И Задача.Выполнена = ЛОЖЬ
	             |	И Задача.Исполнитель.ПометкаУдаления = ИСТИНА
	             |	И НЕ ТИПЗНАЧЕНИЯ(Задача.Заявка) = ТИП(Документ.БП_Оповещение)";
	
	Рез=Запрос.Выполнить().Выбрать();
	Пока Рез.Следующий() цикл
		
		Руководитель = ?(ЗначениеЗаполнено(Рез.Руководитель), Рез.Руководитель, Справочники.Пользователи.Система);
		СтруктураПараметров = Новый Структура("НовыйИсполнитель, Комментарий", Руководитель, "Перенаправлено в связи с удалением пользователя из базы"); 
		Отказ = Ложь;
		МассивЗадач = Новый Массив;
		МассивЗадач.Добавить(Рез.ЗадачаСсылка);
		БПСервер.ПеренаправитьЗадачиСервер(МассивЗадач, СтруктураПараметров, Отказ);
		
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнениеБизнесПроцессов

Функция БПОбщее_Согласование_ЗавершитьСервер(Задача, ПроверкаУспешно, ВставлятьКомм, Исполнитель, ДопДанные)

	НачатьТранзакцию();
	
	//добавляем комментарии в историю переписки
	ТекБП = Задача.БизнесПроцесс.ПолучитьОбъект();
	ТекБП.ДатаЗавершения = ТекущаяДата();
	ТекБП.Завершен = Истина;
	ТекБП.НеСогласовано = Истина;
	ТекБП.ОснованиеЗаблокирован = Истина;
	ТекБП.Записать();
	
	БПСервер.ДобавитьКомментарийСервер(ДопДанные.Комментарий, Задача.Заявка);
	
	БПСервер.ВыполнитьЗадачу(Задача, 0, "", "Отклонено автором! Комментарии: " + ДопДанные.Комментарий);
	
	//ЗаписатьТекущуюЗадачуПриЗаписи(Задача, Ложь);
	
	//ТекЗаявка = Задача.Заявка.ПолучитьОбъект();     
	//ТекЗаявка.УстановитьПометкуУдаления(Истина);  //закоментировано в связи с установкой некорректного статуса документов
	//ТекЗаявка.Записать();
	БПСервер.ОповеститьОНеутвержденииДокумента(Задача.Заявка, Задача.БизнесПроцесс);
	
	ЗафиксироватьТранзакцию();
	

КонецФункции // ()

Функция БПОбщее_Согласование_ОтправитьСервер(Задача, ПроверкаУспешно, ВставлятьКомм, Исполнитель, ДопДанные)

	НачатьТранзакцию();
	
	//добавляем комментарии в историю переписки
	ТекБП = Задача.БизнесПроцесс.ПолучитьОбъект();
	//Объект.Комментарии = Строка(ТекущаяДата()) + ": " + ПараметрыСеанса.ТекущийПользователь + " отправил(а):
	//	|" + ДопДанные.Комментарий;
	
	Если ТипЗнч(Задача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.СогласованиеОбщее") Тогда
		ТекБП.ИсторияСогласования = ТекБП.ИсторияСогласования + ?(ПустаяСтрока(ТекБП.ИсторияСогласования), "", "
		|") + Строка(ТекущаяДата()) + ": " + ПараметрыСеанса.ТекущийПользователь + " отправил(а):
		|" + ДопДанные.Комментарий;
	Иначе
		ТекБП.Комментарии = ТекБП.Комментарии + ?(ПустаяСтрока(ТекБП.Комментарии), "", "
		|") + Строка(ТекущаяДата()) + ": " + ПараметрыСеанса.ТекущийПользователь + " отправил(а):
		|" + ДопДанные.Комментарий;
	КонецЕсли;
	
	
	//делаем несогласованных непройденными при повторном согласовании	
	Для каждого ТекСтрока Из ТекБП.ДопСогласование Цикл
		Если ТекСтрока.Пройден И НЕ текСтрока.Согласовано Тогда
			ТекСтрока.Пройден = 0;		
		КонецЕсли;	
	КонецЦикла;
	
	Для каждого ТекСтрока Из ТекБП.ДопИсполнение Цикл
		Если ТекСтрока.Пройдено И НЕ текСтрока.Исполнено Тогда
			ТекСтрока.Пройдено = 0;		
		КонецЕсли;	
	КонецЦикла; 
	
	//Если ТипЗнч(Задача.Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаОтгрузку") Тогда
	//	Контроллер = Константы.БП_КонтролерОтгрузки.Получить();
	//	Если ТекБП.КонтрольСогласованияОФК И ТекБП.ДопСогласование.Найти(Контроллер, "СубъектСогласования") = Неопределено Тогда
	//		НоваяСтрока = ТекБП.ДопСогласование.Добавить();
	//		НоваяСтрока.СубъектСогласования = Контроллер;	
	//	КонецЕсли;
	//КонецЕсли;
	
	Если ТипЗнч(Задача.Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") ИЛИ ТипЗнч(Задача.Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаФинансирование") Тогда
		РеквизитыЗаявки = БюджетныйНаСервере.ВернутьРеквизиты(Задача.Заявка, "Комментарий");
		ТекБП.Описание = РеквизитыЗаявки.Комментарий; //обновляем описание БП
	КонецЕсли;
	
	ТекБП.ОснованиеЗаблокирован = Истина;
	//ТекБП.КонтрольСогласованияОФК = КонтрольСогласованияОФК;
	ТекБП.Записать();
	
	БПСервер.ВыполнитьЗадачу(Задача, 0, "", ДопДанные.Комментарий);
	
	ЗафиксироватьТранзакцию();

КонецФункции // ()

Функция БПОбщее_Согласование_ИсполнитьСервер(Задача, ПроверкаУспешно, ВставлятьКомм, Исполнитель, ДопДанные, ВидИсполнения = "")

	//добавляем комментарии в историю переписки
	НачатьТранзакцию();
	Объект = Задача.ПолучитьОбъект();
	ТекЗаявка = Объект.БизнесПроцесс.ПолучитьОбъект();
	Если ВставлятьКомм Тогда
		Комментарий = Строка(ТекущаяДата()) + ": " + ПараметрыСеанса.ТекущийПользователь + ?(ПроверкаУспешно, "", " не") + ?(ВидИсполнения = "исполнить", " исполнил(а):", " принял(а) к исполнению:") + "
		|" + ДопДанные.Комментарий;
		ТекЗаявка.ИсторияСогласования = ТекЗаявка.ИсторияСогласования + ?(ПустаяСтрока(ТекЗаявка.ИсторияСогласования), "", "
		|") + Комментарий;
	КонецЕсли;
	
	Объект.Записать();
	
	//ТЗ = ДопСогласование.Выгрузить();
	//ТекЗаявка.ДопСогласование.Загрузить(ТЗ);
	
	НаДоработке = 0;
	//Принято = Ложь;
	ТекЗаяка = Объект.Заявка;
	
	Если ВставлятьКомм Тогда // если заявка согласована или нет
		ДоступныеПользователи = БПСервер.ПолучитьМассивПользователей();
		//Если ДопДанные.Комментарий = "Автовыполнение при старте оплаты Реестра" Тогда
			//Если Не ДоступныеПользователи.Найти(ПараметрыСеанса.ТекущийПользователь) = Неопределено Тогда
			//	ДоступныеПользователи.Добавить(ПараметрыСеанса.ТекущийПользователь);
			//КонецЕсли;
		//	ЕстьДоступКзаявке = Истина;
		//Иначе
			
		//КонецЕсли;
		ЕстьДоступКзаявке = (ДопДанные.Комментарий = "Автовыполнение при старте оплаты Реестра");
		
		Для каждого ТекПользователь Из ДоступныеПользователи Цикл
			ОтобранныеСтроки = ТекЗаявка.ДопИсполнение.НайтиСтроки(Новый Структура("ПринятоКИсполнению, Исполнено, Исполнитель", Ложь, Ложь, ТекПользователь)); 
			
			Если НЕ ОтобранныеСтроки.Количество() Тогда
				ОтобранныеСтроки = ТекЗаявка.ДопИсполнение.НайтиСтроки(Новый Структура("Исполнено, Исполнитель", Ложь, ТекПользователь)); 
			КонецЕсли;
			
			Если НЕ ОтобранныеСтроки.Количество() И ДопДанные.Комментарий = "Автовыполнение при старте оплаты Реестра" Тогда
				ОтобранныеСтроки = ТекЗаявка.ДопИсполнение.НайтиСтроки(Новый Структура("Исполнено", Ложь));
			КонецЕсли;
			
			Если ОтобранныеСтроки.Количество() Тогда
				Для каждого ТекСтрока Из ОтобранныеСтроки Цикл
					//Если ТекСтрока.ПринятоКИсполнению Тогда
					//	ТекСтрока.Исполнено = ПроверкаУспешно;
					//	Если ТекСтрока.Исполнено Тогда
					//		ТекСтрока.Пройдено = Истина;
					//	Иначе
					//		ТекСтрока.Пройдено = Ложь;
					//	КонецЕсли;
					//Иначе
					ТекСтрока.ПринятоКИсполнению = ВставлятьКомм;
					ТекСтрока.Исполнено = ПроверкаУспешно;
					ТекСтрока.Пройдено = ВставлятьКомм;
					//Принято = Истина;
					//КонецЕсли;
					ТекСтрока.НомерИтерации = ТекСтрока.НомерИтерации + 1;
					ТекСтрока.Комментарии = ДопДанные.Комментарий;
					ТекСтрока.Пользователь = ПараметрыСеанса.ТекущийПользователь;
					НаДоработке = 1 - ПроверкаУспешно;
					ЕстьДоступКзаявке = Истина;
					Прервать;		
				КонецЦикла;
			Иначе
				ОтобранныеСтроки = ТекЗаявка.ДопИсполнение.НайтиСтроки(Новый Структура("ПринятоКИсполнению, Исполнено, Исполнитель", Истина, Истина, ТекПользователь));
				Если ОтобранныеСтроки.Количество() Тогда
					ЕстьДоступКзаявке = Истина;				
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьДоступКзаявке Тогда
			Сообщить("Вы не можете принять к исполнению.");
			Возврат Ложь;			
		КонецЕсли;
		
	Иначе //если заявка отменена
		СтруктураПоиска = Новый Структура("Пользователь", ПараметрыСеанса.ТекущийПользователь);
		МассивСтрок = ТекЗаявка.ДопИсполнение.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрок.Количество() Тогда //если отменяет один из рецензентов
			Для каждого ТекСтрока Из МассивСтрок Цикл
				ТекСтрока.Пройдено = 0;
				ТекСтрока.Исполнено = 0;
				ТекСтрока.ПринятоКИсполнению = 0;
				ТекСтрока.НомерИтерации = ТекСтрока.НомерИтерации + 1;
				ТекСтрока.Комментарии = "Отменил(а). " + Строка(ДопДанные.Комментарий);
				Комментарий = "Отменил(а). " +  ДопДанные.Комментарий;
				ТекСтрока.Пользователь = ПараметрыСеанса.ТекущийПользователь;
			КонецЦикла;
		Иначе //если отменяет не рецензент
			Для каждого ТекСтрока Из ТекЗаявка.ДопИсполнение Цикл
				Если НЕ ТекСтрока.Пройдено Тогда
					ТекСтрока.Пройдено = Истина;
					ТекСтрока.НомерИтерации = ТекСтрока.НомерИтерации + 1;
					ТекСтрока.Комментарии =  "Отменил(а). " + Строка(ДопДанные.Комментарий);
					Комментарий = "Отменил(а). " +  ДопДанные.Комментарий;
					НаДоработке = 1;
					//ТекСтрока.Пользователь = ПараметрыСеанса.ТекущийПользователь;
					Прервать;
				КонецЕсли;			
			КонецЦикла; 		
		КонецЕсли;
	КонецЕсли;
	ТекЗаявка.Записать();
	
	//Если Принято Тогда //если принято, но не выполнено
	//	
	//	Задача = БПСервер.НоваяЗадача(
	//	ПараметрыСеанса.ТекущийПользователь, 
	//	"Исполнить " + ТекЗаяка.Метаданные().Синоним + ": " + Строка(ПараметрыСеанса.ТекущийПользователь), 
	//	Объект.БизнесПроцесс, 
	//	БизнесПроцессы.СогласованиеОбщее.ТочкиМаршрута.Действие3,
	//	,
	//	Объект.Предприятие, Объект.ДокументОбязательныйКПрикреплению, Истина);
	//	
	//	// 01.02.13 di
	//	Если НаДоработке Тогда
	//		БПСервер.ВыполнитьЗадачу(Задача.Ссылка,0, ?(ПроверкаУспешно, "Да.", "Нет."), Комментарий);
	//	КонецЕсли;	
	//	
	//КонецЕсли;	
	
	// 27.02.13
	//БП = Объект.БизнесПроцесс.ПолучитьОбъект();
	
	//Если БП.ХранилищеТабДока.Получить() = Неопределено Тогда
	//	
	//	// 10.10.2012 создание таб дока и помещение его в хранилище
	//	ТабДок = Новый ТабличныйДокумент;
	//	
	//	МассивДоков = Новый Массив;
	//	МассивДоков.Добавить(БП.Заявка);
	//	
	//	Если ТипЗнч(БП.Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаАвансовыйОтчет") Тогда
	//		Документы.Д_ЗаявкаНаАвансовыйОтчет.Печать(ТабДок, МассивДоков)
	//	ИначеЕсли ТипЗнч(БП.Заявка) = Тип("ДокументСсылка.Д_КорректировкаДокумента") Тогда
	//		Документы.Д_КорректировкаДокумента.Печать(ТабДок, МассивДоков)
	//	КонецЕсли;
	//	
	//	АдресВХ = ПоместитьВоВременноеХранилище(ТабДок, Новый УникальныйИдентификатор());
	//	РеквизитСХранилищем = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресВХ));
	//	БП.ХранилищеТабДока = РеквизитСХранилищем;
	//	
	//КонецЕсли;
	
	//БП.Записать();
	
	Если Объект.ТочкаМаршрута = БизнесПроцессы.СогласованиеОбщее.ТочкиМаршрута.Действие3 
		И ТипЗнч(Объект.Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаОтгрузку") И Не ПроверкаУспешно И ВставлятьКомм Тогда	
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Задача.Ссылка,
		|	Задача.Исполнитель
		|ИЗ
		|	Задача.Задача КАК Задача
		|ГДЕ
		|	Задача.БизнесПроцесс = &БизнесПроцесс
		|	И Задача.ТочкаМаршрута = &ТочкаМаршрута
		|	И НЕ Задача.Выполнена";
		Запрос.УстановитьПараметр("БизнесПроцесс", Объект.БизнесПроцесс);
		Запрос.УстановитьПараметр("ТочкаМаршрута", БизнесПроцессы.СогласованиеОбщее.ТочкиМаршрута.Действие3);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			БПСервер.ВыполнитьЗадачу(Выборка.Ссылка,0, ?(ПроверкаУспешно, "Да.", "Нет."), ДопДанные.Комментарий);
			Если Не Выборка.Исполнитель = ПараметрыСеанса.ТекущийПользователь Тогда
				БПСервер.СоздатьОповещение(Выборка.Исполнитель, "Пользователь " + ПараметрыСеанса.ТекущийПользователь + " отправил заявку на доработку по причине: " + ДопДанные.Комментарий, "Отправка на доработку заявки " + Объект.Заявка);	
			КонецЕсли;	
		КонецЦикла;	
	Иначе		
		БПСервер.ВыполнитьЗадачу(Объект.Ссылка,0, ?(ПроверкаУспешно, "Да.", "Нет."), ДопДанные.Комментарий);
	КонецЕсли;	
	
	ЗафиксироватьТранзакцию();
	Возврат Истина
КонецФункции

Функция ОбращениеТП_ПринятьОтклонить(Задача, ПроверкаУспешно, ВставлятьКомм, Исполнитель, ДопДанные)

	НачатьТранзакцию();
	Объект = Задача.ПолучитьОбъект();
	ЗаявкаОбъект = Объект.Заявка.ПолучитьОбъект();
	БП = Объект.БизнесПроцесс.ПолучитьОбъект();
	ЕстьНовыеСогласователи = Ложь; // для досогласований с точки рассмотрения обращения
	
	Если Объект.ТочкаМаршрута = БизнесПроцессы.ЗаявкиАдминистратору.ТочкиМаршрута.Действие6 Тогда
		БП.СогласованоДействие5 = ПроверкаУспешно;
		НовыйКомент = ?(ПроверкаУспешно, " проверил(а) работу по обращению", " вернул(а) обращение на доработку");
		
		//отправляем электронное письмо на почту из инициатора
		УстановитьПривилегированныйРежим(Истина);
		Документы.Д_ОбращенияВТехПоддержку.ОтправитьОповещениеДокументомПоEMAIL(ЗаявкаОбъект.ОтИмени, Объект.Заявка, ДопДанные.Комментарий);
		УстановитьПривилегированныйРежим(Ложь);
		
	ИначеЕсли Объект.ТочкаМаршрута = БизнесПроцессы.ЗаявкиАдминистратору.ТочкиМаршрута.Действие3 Тогда
		БП.СогласованоДействие3 = ПроверкаУспешно;
		БП.Администратор = ПараметрыСеанса.ТекущийПользователь;
		ЕстьНовыеСогласователи = ДопДанные.ДопСогласование.НайтиСтроки(Новый Структура("Пройден", Ложь)).Количество();
		Если ЕстьНовыеСогласователи И ПроверкаУспешно Тогда
			НовыйКомент = " отправил(а) обращение на досогласование";	
		Иначе
			НовыйКомент = ?(ПроверкаУспешно, " принял(а) обращение в работу", " отклонил(а) обращение");	
		КонецЕсли;
	ИначеЕсли Объект.ТочкаМаршрута = БизнесПроцессы.ЗаявкиАдминистратору.ТочкиМаршрута.Действие5 Тогда
		БП.СогласованоДействие4 = ПроверкаУспешно;
		НовыйКомент = ?(ПроверкаУспешно, " ознакомился(а) с результатом", " вернул(а) обращение на доработку");
		ЗаявкаОбъект.ДатаНачалаРабот = ТекущаяДата();
	ИначеЕсли Объект.ТочкаМаршрута = БизнесПроцессы.ЗаявкиАдминистратору.ТочкиМаршрута.Действие1 Тогда
		Если ДопДанные.ИмяКоманды = "Завершить" Тогда //если обращ отклонено
			Возврат БПОбщее_Согласование_ЗавершитьСервер(Задача, Истина, Истина, Задача.Исполнитель, ДопДанные);
		Иначе
			НовыйКомент = ?(ПроверкаУспешно, " отправил(а) обращение", " завершил(а) обращение");
			БП.ОснованиеЗаблокирован = Истина;
		КонецЕсли; 
	ИначеЕсли Объект.ТочкаМаршрута = БизнесПроцессы.ЗаявкиАдминистратору.ТочкиМаршрута.Действие2 Тогда
		НовыйКомент = ?(ПроверкаУспешно, " согласовал(а) обращение", " вернул(а) обращение на доработку");			
	Иначе
		НовыйКомент = ?(ПроверкаУспешно, " выполнил(а) работу по обращению", " вернул(а) обращение на доработку");
		БП.Администратор = ПараметрыСеанса.ТекущийПользователь;
		ЗаявкаОбъект.Ответ = ДопДанные.Комментарий;
		ЗаявкаОбъект.Администратор = ПараметрыСеанса.ТекущийПользователь;
		ЗаявкаОбъект.СозданныйПользователь = ДопДанные.СозданныйПользователь;
		Если ЗаявкаОбъект.ВидЗаявки = "Доступ к базам 1с" Тогда
			Для Каждого ТекСтрока Из ДопДанные.ДобавляемыеВДоступИБ Цикл
				НоваяСтрока = ЗаявкаОбъект.ДобавляемыеВДоступИБ.Добавить();
				НоваяСтрока.ИнформационнаяБаза = ТекСтрока.ИнформационнаяБаза;
			КонецЦикла;
		КонецЕсли;
		
		//завершаем хронометраж
		БПСервер.ЗавершитьХронометражПоПредмету(ТекущаяДата(), ЗаявкаОбъект.Ссылка);
		
	КонецЕсли;
	
	//добавляем комментарии в историю переписки
	Если ВставлятьКомм Тогда
		Комментарий = Строка(ТекущаяДата()) + ": " + ПараметрыСеанса.ТекущийПользователь + НовыйКомент + ":
		|" + ДопДанные.Комментарий;
		БП.Комментарии = БП.Комментарии + ?(ПустаяСтрока(БП.Комментарии), "", "
		|") + Комментарий;
		
		БПСервер.ДобавитьКомментарийСервер(ДопДанные.Комментарий, Объект.Заявка);
	КонецЕсли;
	
	БП.ДопСогласование.Загрузить(ДопДанные.ДопСогласование);
	
	//добавляем
	Если ВставлятьКомм Тогда // если заявка согласована или нет
		Если Объект.ТочкаМаршрута = БизнесПроцессы.ЗаявкиАдминистратору.ТочкиМаршрута.Действие2 Тогда //если точка маршрута согласование
			ДоступныеПользователи = БПСервер.ПолучитьМассивПользователей();
			ЕстьДоступКзаявке = Ложь;
			Для каждого ТекСтрока Из БП.ДопСогласование Цикл
				Если НЕ ТекСтрока.Пройден И НЕ ДоступныеПользователи.Найти(ТекСтрока.СубъектСогласования) = Неопределено Тогда
					ТекСтрока.Пройден = 1;
					ТекСтрока.Согласовано = ПроверкаУспешно;
					ТекСтрока.ДатаВыполнения = ТекущаяДата();
					ТекСтрока.Комментарии = ДопДанные.Комментарий;
					ТекСтрока.Пользователь = ПараметрыСеанса.ТекущийПользователь;
					ЕстьДоступКзаявке = Истина;
					Прервать;		
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
		
	Иначе //если заявка отменена
		СтруктураПоиска = Новый Структура("Пользователь", ПараметрыСеанса.ТекущийПользователь);
		МассивСтрок = БП.ДопСогласование.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрок.Количество() Тогда //если отменяет один из рецензентов
			Для каждого ТекСтрока Из МассивСтрок Цикл
				ТекСтрока.Пройден = 0;
				ТекСтрока.Согласовано = 0;
				ТекСтрока.ДатаВыполнения = ТекущаяДата();
				ТекСтрока.Комментарии = "Отменил(а) обращение. " + Строка(ДопДанные.Комментарий);
				//Комментарий = "Отменил(а) обращение. " +  ДопДанные.Комментарий;
				ТекСтрока.Пользователь = ПараметрыСеанса.ТекущийПользователь;
			КонецЦикла;
		Иначе //если отменяет не рецензент
			Для каждого ТекСтрока Из БП.ДопСогласование Цикл
				Если НЕ ТекСтрока.Пройден Тогда
					ТекСтрока.Пройден = 1;
					ТекСтрока.Комментарии =  "Отменил(а) обращение. " + Строка(ДопДанные.Комментарий);
					//Комментарий = "Отменил(а) обращение. " +  ДопДанные.Комментарий;
					НаДоработке = 1;
					//ТекСтрока.Пользователь = ПараметрыСеанса.ТекущийПользователь;
					Прервать;
				КонецЕсли;			
			КонецЦикла; 		
		КонецЕсли;
	КонецЕсли;
	
	//делаем несогласованных непройденными при повторном согласовании
	Если ПроверкаУспешно Тогда
		Для каждого ТекСтрока Из БП.ДопСогласование Цикл
			Если ТекСтрока.Пройден И НЕ текСтрока.Согласовано Тогда
				ТекСтрока.Пройден = 0;		
			КонецЕсли;	
		КонецЦикла; 
	КонецЕсли;

	
	
	БП.Записать();
	
	
	
	//ЗаявкаОбъект.ИндикаторВыполнения = 100;
	//ЗаявкаОбъект.СостояниеДокумента = ?(ПроверкаУспешно, Перечисления.Д_СостоянияДокументов.НаИсполнении, Перечисления.Д_СостоянияДокументов.НаДоработке);
	ЗаявкаОбъект.СрокОкончанияРабот = ДопДанные.СрокОкончания;
	ЗаявкаОбъект.Записать();
	
	Если ЕстьНовыеСогласователи Тогда //направляем на допсогласование, создаем задачу согласования
		
		//выполняем текущую задачу
		Объект.Выполнена = Истина;
		Объект.Комментарии = "Отправлено на досогласование" + ?(ЗначениеЗаполнено(ДопДанные.Комментарий), ": " + ДопДанные.Комментарий, "");;
		Объект.Записать();
		
		//создаем задачу согласования
		Для каждого РольПользователь Из ДопДанные.ДопСогласование  Цикл
			Если РольПользователь.Пройден Тогда
				Продолжить;		
			КонецЕсли;
			Если РольПользователь.СубъектСогласования.Пустая() Тогда
				Продолжить;		
			КонецЕсли;
		
			ЗадачаНовая = Задачи.Задача.СоздатьЗадачу();		
			ЗадачаНовая.Заявка = ЗаявкаОбъект.Ссылка;
			ЗадачаНовая.Дата = ТекущаяДата();
			ЗадачаНовая.Наименование = "Согласовать обращение в техподдержку " + Строка(ЗаявкаОбъект.РазделПрограммы) + ", " + Строка(ЗаявкаОбъект.ВидЗаявки);
			
			ЗадачаНовая.БизнесПроцесс  = БП.Ссылка;
			ЗадачаНовая.ТочкаМаршрута  = БизнесПроцессы.ЗаявкиАдминистратору.ТочкиМаршрута.Действие2;
			
			ЗадачаНовая.Автор = ПараметрыСеанса.ТекущийПользователь;
			ЗадачаНовая.Описание = БП.Описание;
			//Сообщить(ТипЗнч(РольПользователь));
			ЗадачаНовая.Исполнитель = РольПользователь.СубъектСогласования;
			
			ЗадачаНовая.Записать();
			Прервать;
		КонецЦикла; 
	Иначе
		БПСервер.ВыполнитьЗадачу(Объект.Ссылка, 0, ?(ПроверкаУспешно, "Да.", "Нет."), ДопДанные.Комментарий);
		
		//стартуем хронометраж после выполнения текзадачи
		Если Объект.ТочкаМаршрута = БизнесПроцессы.ЗаявкиАдминистратору.ТочкиМаршрута.Действие3 И ПроверкаУспешно Тогда
			БПСервер.СтартоватьХронометражПоПредмету(ТекущаяДата(), ЗаявкаОбъект.Ссылка, ЗаявкаОбъект.Ссылка); 
		КонецЕсли;
		
		Если ПроверкаУспешно И Объект.ТочкаМаршрута = БизнесПроцессы.ЗаявкиАдминистратору.ТочкиМаршрута.Действие3 Тогда
			БПРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(БП.Ссылка, "Автор, ОтИмени");
			МассивАдресатов = Новый Массив;
			Если НЕ ПараметрыСеанса.ТекущийПользователь = БПРеквизиты.Автор Тогда
				МассивАдресатов.Добавить(БПРеквизиты.Автор);
			КонецЕсли;
			Если ЗначениеЗаполнено(БПРеквизиты.ОтИмени) И МассивАдресатов.Найти(БПРеквизиты.ОтИмени) = Неопределено И ТипЗнч(БПРеквизиты.ОтИмени) = Тип("СправочникСсылка.Пользователи") И НЕ ПараметрыСеанса.ТекущийПользователь = БПРеквизиты.ОтИмени Тогда
				МассивАдресатов.Добавить(БПРеквизиты.ОтИмени);
			КонецЕсли;
			Если МассивАдресатов.Количество() Тогда
				
				БПСервер.СоздатьОповещение(МассивАдресатов, Строка(ПараметрыСеанса.ТекущийПользователь) + " принял " + Строка(Объект.Заявка) + " к исполнению.
				|Примерный срок выполнения работ - " + ?(НЕ ДопДанные.СрокОкончания = Дата('000101010000'), Строка(ДопДанные.СрокОкончания), "не указан") + ".
				|Вы можете следить за процессом выполнения работ в разделе Техподдержка на вкладке Документооборот.
				|По завершении работ вы получите сообщение на Рабочий стол 1С.
				|
				|Комментарии:
				|" + Строка(ДопДанные.Комментарий), "Обращение №" + Строка(Объект.Заявка.Номер) + " принято к исполнению", Объект.Заявка, Истина);	
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	
	ЗафиксироватьТранзакцию();
	Возврат Истина;

КонецФункции

Функция БПСЗ_Согласование_ВыполненоСервер(Задача, ПроверкаУспешно, Пройден, Исполнитель, ДопДанные)
	
	Если Не Задача.ТочкаМаршрута = БизнесПроцессы.Согласование2.ТочкиМаршрута.Действие6 Тогда
	
		НачатьТранзакцию();
		БП 								= Задача.БизнесПроцесс.ПолучитьОбъект();
		ЗадачаОбъект					= Задача.ПолучитьОбъект();
		ТЗДопСогласование 				= ДопДанные.ДопСогласование.Скопировать();
		ТЗДопСогласованиеПервоначальное	= ДопДанные.ДопСогласованиеПервоначальное.Скопировать();
		ТекущийПользователь             = ДопДанные.ТекущийПользователь;
		
		// ***  Развилка между БП.Согласование2 и БП.Согласование3 -----((
		Если ТипЗнч(Задача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование3") Тогда
			
			ТЗДопСогласованиеПервоначальноеНеСогласованные= ДопДанные.ДопСогласованиеПервоначальное.Скопировать();
			ТЗИсполнение 								= ДопДанные.ДопИсполнение;
			ТЗИсполнениеПервоначальное 					= ДопДанные.ДопИсполнениеПервоначальное;
			//удаляем согласованые в первоначальной таблице
			ОтобранныеСтроки = ТЗДопСогласованиеПервоначальноеНеСогласованные.НайтиСтроки(Новый Структура("Согласовано", Истина));
			Для каждого ТекСтрока Из ОтобранныеСтроки Цикл
				ТЗДопСогласованиеПервоначальноеНеСогласованные.Удалить(ТекСтрока);	
			КонецЦикла;
			
		КонецЕсли;
		// ***  Развилка между БП.Согласование2 и БП.Согласование3 -----))
		
		НаДоработке = Ложь;
		
		Если ДопДанные.ДопКомментарийОтправитьДалее <> "" Тогда
			Комментарий = ДопДанные.ДопКомментарийОтправитьДалее + ДопДанные.Комментарий;
		Иначе
			Комментарий = ДопДанные.Комментарий;
		КонецЕсли;	
		
		// ***  Развилка между БП.Согласование2 и БП.Согласование3 -----((
		Если ТипЗнч(Задача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование3") Тогда
			
			Если ЗадачаОбъект.ТочкаМаршрута.Имя = "Действие4" Тогда 
				БПСервер.ОбработатьИсполнение(ЗадачаОбъект, БП, ПроверкаУспешно, Пройден, НаДоработке, Исполнитель, ТЗИсполнение, Комментарий, "СЗ", ТЗИсполнениеПервоначальное);
			Иначе	
				Если БП.ОтправлятьВсем Тогда
					БПСервер.СогласованиеУтверждение(ЗадачаОбъект,
					БП,
					ПроверкаУспешно,
					Пройден,
					НаДоработке,
					Исполнитель,
					ТЗДопСогласование,
					Комментарий,
					"СЗ",
					,
					ТЗДопСогласованиеПервоначальноеНеСогласованные);
				Иначе 
					БПСервер.СогласованиеУтверждение(ЗадачаОбъект,
					БП,
					ПроверкаУспешно,
					Пройден,
					НаДоработке,
					Исполнитель,
					ТЗДопСогласование,
					Комментарий,
					"СЗ");
				КонецЕсли;
				//Добавим в исполнение рецензентов 
				БПСервер.ДобавитьИсполнителей(БП, ТЗИсполнение, ТЗИсполнениеПервоначальное);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Задача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование2") Тогда //-----
			
			БПСервер.СогласованиеУтверждение(ЗадачаОбъект,
									БП,
									ПроверкаУспешно,
									Пройден,
									НаДоработке,
									Исполнитель,
									ТЗДопСогласование,
									Комментарий,
									"СЗ");
									
		КонецЕсли;
		// ***  Развилка между БП.Согласование2 и БП.Согласование3 -----))
		
		//Добавим в ознакомление рецензентов 
		БПСервер.ДобавитьОзнакомителей(БП, ДопДанные.ДопОповещение, ДопДанные.ДопОповещениеПервоначальное);
		
		БП.Записать();
		БПСервер.ВыполнитьЗадачу(Задача, 0, ?(ПроверкаУспешно, "Да.", "Нет."), Комментарий);
		БПСервер.ИзменитьСостояниеДокумента(Задача.Заявка, НаДоработке);
		//Оповестим автора об изменении маршрута бизнес-процесса
		БПСервер.СообщитьОбИзмененииМаршрута(ЗадачаОбъект, ТЗДопСогласование, ТЗДопСогласованиеПервоначальное);
		
		//оповестим отслеживающих о прохождении маршрута
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтслеживаниеЗаявок.Пользователь
		|ИЗ
		|	РегистрСведений.ОтслеживаниеЗаявок КАК ОтслеживаниеЗаявок
		|ГДЕ
		|	ОтслеживаниеЗаявок.Документ = &Документ
		|	И ОтслеживаниеЗаявок.Пользователь <> &ТекПользователь";
		Запрос.УстановитьПараметр("Документ", Задача.Заявка);
		Запрос.УстановитьПараметр("ТекПользователь", ДопДанные.ТекущийПользователь);
		РезультатЗапроса = Запрос.Выполнить();
		
		// ***  Развилка между БП.Согласование2 и БП.Согласование3 -----((
		Если ТипЗнч(Задача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование3") ИЛИ ТипЗнч(Задача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.СогласованиеОбщее") Тогда
		
			Если Не РезультатЗапроса.Пустой() И (Задача.ТочкаМаршрута = БизнесПроцессы.Согласование2.ТочкиМаршрута.Действие2 ИЛИ
				Задача.ТочкаМаршрута = БизнесПроцессы.Согласование2.ТочкиМаршрута.Действие4 ИЛИ 
				Задача.ТочкаМаршрута = БизнесПроцессы.Согласование3.ТочкиМаршрута.Действие2 ИЛИ 
				Задача.ТочкаМаршрута = БизнесПроцессы.СогласованиеОбщее.ТочкиМаршрута.Действие2) Тогда
				МассивПользователей = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Пользователь");
				ТекстОповещения = "Документ " + Строка(Задача.Заявка) + " был " + 
				?(ДопДанные.ДопКомментарийОтправитьДалее <> "", "отправлен далее по маршруту", ?(ПроверкаУспешно, "согласован.", "отклонен.")) + 
				" " + ТекущаяДата() + " пользователем " + ДопДанные.ТекущийПользователь + "
				|" + Комментарий;
				БПСервер.СоздатьОповещение(МассивПользователей, ТекстОповещения, "Оповещение о прохождении маршрута документом " + Задача.Заявка, Задача.Заявка, Истина);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Задача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование2") Тогда //-----
			
			Если Не РезультатЗапроса.Пустой() Тогда
				МассивПользователей = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Пользователь"); 
				ТекстОповещения = "Документ " + Строка(Задача.Заявка) + " был " + 
				?(ДопДанные.ДопКомментарийОтправитьДалее <> "", "отправлен далее по маршруту", ?(ПроверкаУспешно, "согласован.", "отклонен.")) + 
				" " + ТекущаяДата() + " пользователем " + ДопДанные.ТекущийПользователь + "
				|" + Комментарий;
				БПСервер.СоздатьОповещение(МассивПользователей, ТекстОповещения, "Оповещение о прохождении маршрута документом " + Задача.Заявка, Задача.Заявка, Истина);
			КонецЕсли;	
			
		КонецЕсли;	
		// ***  Развилка между БП.Согласование2 и БП.Согласование3 -----))
		
		
		// ***  Для БП.Согласование3 -----((
		//Если это исполнение, проверим не нужно ли оповестить согласующих об исполнении СЗ			
		Если ТипЗнч(Задача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование3") и Задача.ТочкаМаршрута.Имя = "Действие4" Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	БП_ПоручениеСписокИсполнителей.Ссылка.Автор КАК Автор,
			|	БП_ПоручениеСписокИсполнителей.Ссылка,
			|	БП_ПоручениеСписокИсполнителей.Ссылка.Описание
			|ИЗ
			|	Документ.БП_Поручение.СписокИсполнителей КАК БП_ПоручениеСписокИсполнителей
			|ГДЕ
			|	БП_ПоручениеСписокИсполнителей.Ссылка.БизнесПроцессИсполнения = &БизнесПроцессИсполнения
			|	И БП_ПоручениеСписокИсполнителей.Исполнитель = &Исполнитель";
			Запрос.УстановитьПараметр("БизнесПроцессИсполнения", БП.Ссылка);
			Запрос.УстановитьПараметр("Исполнитель", Исполнитель);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				
				ВыбраннаяЗаявка = Выборка.Ссылка.ПолучитьОбъект();
				СтруктураПоиска = Новый Структура("Исполнитель", ДопДанные.ТекущийПользователь);
				НайденныеСтроки = ВыбраннаяЗаявка.СписокИсполнителей.НайтиСтроки(СтруктураПоиска);
				Для Каждого ТекСтрока Из НайденныеСтроки Цикл
					ТекСтрока.Пользователь = ДопДанные.ТекущийПользователь;
					КомментарийПоИсполнению = "Пользователь " + ДопДанные.ТекущийПользователь + " исполнил " + БП.Заявка;
					ТекСтрока.Комментарии = КомментарийПоИсполнению;
					ТекСтрока.Исполнено = Истина;
					ТекСтрока.ДатаВыполнения = ТекущаяДата();
				КонецЦикла;
				
				СтруктураПоиска = Новый Структура("Исполнено", Ложь);
				Если НЕ ВыбраннаяЗаявка.СписокИсполнителей.НайтиСтроки(СтруктураПоиска).Количество() И НЕ ВыбраннаяЗаявка.КонтрольИсполнения Тогда
					ВыбраннаяЗаявка.Завершен = Истина;
					ВыбраннаяЗаявка.Записать(РежимЗаписиДокумента.Проведение);
				Иначе
					ВыбраннаяЗаявка.Записать();
				КонецЕсли;
				
				НовЗадача 				= Задачи.Задача.СоздатьЗадачу();		
				НовЗадача.Заявка 		= Выборка.Ссылка;
				НовЗадача.Дата 			= ТекущаяДата();
				НовЗадача.Наименование  = "Проверить исполнение: " + БП.Заявка + " пользователем " + ДопДанные.ТекущийПользователь;
				НовЗадача.Автор 		= ДопДанные.ТекущийПользователь;
				НовЗадача.Описание 		= Выборка.Описание;
				НовЗадача.Исполнитель 	= Выборка.Автор;
				НовЗадача.Записать();
				
			КонецЦикла;
			
		КонецЕсли;
		// *** Для БП.Согласование3 -----))
		
		ЗафиксироватьТранзакцию();
	
	Иначе
		
		НачатьТранзакцию();
		
		БП = Задача.БизнесПроцесс.ПолучитьОбъект();
		НаДоработке = Ложь;
		ОтобранныеСтроки = БП.Адресаты.НайтиСтроки(Новый Структура("СубъектСогласования", Исполнитель)); 
		Для каждого ТекСтрока Из ОтобранныеСтроки Цикл
			ТекСтрока.Согласовано = Истина;
			ТекСтрока.Пользователь = ДопДанные.ТекущийПользователь;
			ТекСтрока.Комментарии = Комментарий;
		КонецЦикла;
		БП.Записать();
		БПСервер.ВыполнитьЗадачу(Задача, 0, ?(ПроверкаУспешно, "Да.", "Нет."), "");
		БПСервер.ИзменитьСостояниеДокумента(Задача.Заявка, НаДоработке);
		
		ЗафиксироватьТранзакцию();
	
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция БПОбщее_Согласование_ВыполненоСервер(Задача, ПроверкаУспешно, Пройден, Исполнитель, ДопДанные)
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;	
	ЭлементБлокировки = Блокировка.Добавить("Задача.Задача");
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Задача);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;	
	//Если ТипЗнч(Задача.Бизнеспроцесс) = Тип("БизнесПроцессСсылка.Согласование1") тогда
	ЭлементБлокировкиБП = Блокировка.Добавить("БизнесПроцесс." + Задача.БизнесПроцесс.Метаданные().Имя );
	//ИначеЕсли ТипЗнч(Задача.Бизнеспроцесс) = Тип("БизнесПроцессСсылка.СогласованиеОбщее") тогда
		//ЭлементБлокировкиБП = Блокировка.Добавить("БизнесПроцесс.СогласованиеОбщее");
	//ИначеЕсли ТипЗнч(Задача.Бизнеспроцесс) = Тип("БизнесПроцессСсылка.ЗаявкиАдминистратору") тогда
	//	ЭлементБлокировкиБП = Блокировка.Добавить("БизнесПроцесс.СогласованиеОбщее");
	//КонецЕсли;
	ЭлементБлокировкиБП.УстановитьЗначение("Ссылка", Задача.БизнесПроцесс);
	ЭлементБлокировкиБП.Режим = РежимБлокировкиДанных.Исключительный;	
	Блокировка.Заблокировать();
	
	МассивУжеСозданныхЗадач = ПолучитьУжеСозданныеЗадачи(Задача.БизнесПроцесс);
	
	БПОбъект     = Задача.БизнесПроцесс.ПолучитьОбъект();
	ЗадачаОбъект = Задача.ПолучитьОбъект();
	
	ТекущийПользователь             = ДопДанные.ТекущийПользователь;
	
	//обновим в согласовании рецензентов 
	Если ДопДанные.Свойство("ДопСогласование") Тогда
		БПСервер.ДобавитьСогласователей(БПОбъект, ДопДанные.ДопСогласование, ДопДанные.ДопСогласованиеПервоначальное);
	КонецЕсли;
	
	//обновим в исполнение рецензентов 
	Если ДопДанные.Свойство("ДопИсполнение") Тогда
		БПСервер.ДобавитьИсполнителей(БПОбъект, ДопДанные.ДопИсполнение, ДопДанные.ДопИсполнениеПервоначальное);
	КонецЕсли;
	
	//обновим в ознакомление рецензентов 
	Если ДопДанные.Свойство("ДопОповещение") Тогда
		БПСервер.ДобавитьОзнакомителей(БПОбъект, ДопДанные.ДопОповещение, ДопДанные.ДопОповещениеПервоначальное);	
	КонецЕсли;
	
	НаДоработке = Ложь;
	
	Если ДопДанные.ДопКомментарийОтправитьДалее <> "" Тогда
		Комментарий = ДопДанные.ДопКомментарийОтправитьДалее + ДопДанные.Комментарий;
	Иначе
		Комментарий = ДопДанные.Комментарий;
	КонецЕсли;	

	
	ДоступныеПользователи = БПСервер.ПолучитьМассивПользователей();
	ЕстьДоступКзаявке = Ложь;
	Для Каждого ТекСтрока Из БПОбъект.ДопСогласование Цикл
		Если НЕ ТекСтрока.Пройден И НЕ ДоступныеПользователи.Найти(ТекСтрока.СубъектСогласования) = Неопределено Тогда
			ЕстьДоступКзаявке = Истина;
			Прервать;		
		КонецЕсли;	
	КонецЦикла;
	
	//добавлнено 11.01.13. д1
	ЕстьВМаршруте = Ложь;
	Для каждого ТекПользователь Из ДоступныеПользователи Цикл
		Если НЕ БПОбъект.ДопСогласование.Найти(ТекПользователь, "СубъектСогласования") = Неопределено Тогда
			ЕстьВМаршруте = Истина;			
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьДоступКзаявке И НЕ ЕстьВМаршруте Тогда
		Сообщить("Вы не можете согласовать данную заявку, т.к вас нет в маршруте.");
		Возврат Ложь;			
	КонецЕсли;
	
	//добавлено д1. 18.11.17. для интерфейсной настройки комментов
	Если ЗначениеЗаполнено(ЗадачаОбъект.РольИсполнителя) Тогда
		КомУтвердительно = ?(ЗначениеЗаполнено(ЗадачаОбъект.РольИсполнителя.КомментарийУтвердительно), ЗадачаОбъект.РольИсполнителя.КомментарийУтвердительно + ".", "Да.");
		КомОтрицательно = ?(ЗначениеЗаполнено(ЗадачаОбъект.РольИсполнителя.КомментарийОтрицательно), ЗадачаОбъект.РольИсполнителя.КомментарийОтрицательно + ".", "Нет.");
		КомСЗамечаниями = ?(ЗначениеЗаполнено(ЗадачаОбъект.РольИсполнителя.КомментарийСЗамечаниями), ЗадачаОбъект.РольИсполнителя.КомментарийСЗамечаниями + ".", "Да, с замечаниями.");
	Иначе
		КомУтвердительно = "Да.";
		КомОтрицательно = "Нет.";
		КомСЗамечаниями = "Да, с замечаниями.";
	КонецЕсли;//конец добавления д1. 18.11.17

	ДопДанные.Вставить("РезультатВыполнения", ?(ПроверкаУспешно, ?(ДопДанные.ИмяКоманды = "ОтправитьДалее", КомСЗамечаниями, КомУтвердительно), КомОтрицательно));
	
	//отмечаем выполнение в бизнес процессе
	БПСервер.СогласованиеУтверждение(ЗадачаОбъект,
	БПОбъект,
	ПроверкаУспешно,
	Пройден,
	НаДоработке,
	ЗадачаОбъект.Исполнитель,
	ДопДанные.ДопСогласование,
	Комментарий,
	"документ",
	,
	ДопДанные.ДопСогласование,
	ДопДанные); //для совместимости
	БПОбъект.Записать();
	
	//выполняем задачу (почти стандартно)
	
	
	БПСервер.ВыполнитьЗадачу(Задача, 0, ДопДанные.РезультатВыполнения, Комментарий);
	
	//в случае изменения маршрута выполняем задачи пользователей
	БПСервер.СкорректироватьЗадачиПриИзмененииМаршрута(БПОбъект);
	
	//Оповестим автора об изменении маршрута бизнес-процесса
	БПСервер.СообщитьОбИзмененииМаршрута(Задача, ДопДанные.ДопСогласование, ДопДанные.ДопСогласованиеПервоначальное);
	
	//***Для Заявок на оплату(( 
	Если ТипЗнч(Задача.Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") тогда	
		БПСервер.ОповеститьПользователяОбОтмененныхПозициях(Задача.Заявка);
		Если ЗадвоениеЗадач(Задача.БизнесПроцесс, МассивУжеСозданныхЗадач) Тогда
			ОтменитьТранзакцию();
		КонецЕсли;	
		Если Не ПроверкаУспешно Тогда
			Если ЗначениеЗаполнено(Задача.Заявка.Инициатор) Тогда
				СоздатьОповещение(Задача.Заявка.Инициатор, "Заявка была отклонена пользователем " + ТекущийПользователь + " по причине: " + Задача.Комментарии, "Сообщение об отмене инициированной заявки", Задача.Заявка);
			КонецЕсли;	
		КонецЕсли;
		//выполняем задачи заявок на финансирование
		ВыполнитьЗадачиОплатыЗаявокНаФинансирование(Задача.Заявка);
	КонецЕсли;
	//***Для Заявок на оплату))
	
	
	//оповестим отслеживающих о прохождении маршрута
	Если ТипЗнч(Задача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.СогласованиеОбщее") ИЛИ ТипЗнч(Задача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование1") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтслеживаниеЗаявок.Пользователь
		|ИЗ
		|	РегистрСведений.ОтслеживаниеЗаявок КАК ОтслеживаниеЗаявок
		|ГДЕ
		|	ОтслеживаниеЗаявок.Документ = &Документ
		|	И ОтслеживаниеЗаявок.Пользователь <> &ТекПользователь";
		Запрос.УстановитьПараметр("Документ", Задача.Заявка);
		Запрос.УстановитьПараметр("ТекПользователь", ДопДанные.ТекущийПользователь);
		РезультатЗапроса = Запрос.Выполнить();
		
		// ***  Развилка между БП.Согласование2 и БП.Согласование3 -----((
		Если Не РезультатЗапроса.Пустой()  Тогда
			Если (Задача.ТочкаМаршрута = БизнесПроцессы.СогласованиеОбщее.ТочкиМаршрута.Действие2) ИЛИ (Задача.ТочкаМаршрута = БизнесПроцессы.Согласование1.ТочкиМаршрута.Действие2) ИЛИ (Задача.ТочкаМаршрута = БизнесПроцессы.Согласование1.ТочкиМаршрута.Действие4) Тогда
				МассивПользователей = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Пользователь");
				ТекстОповещения = "Документ " + Строка(Задача.Заявка) + " был " + 
				?(ДопДанные.ДопКомментарийОтправитьДалее <> "", "отправлен далее по маршруту", ?(ПроверкаУспешно, "согласован.", "отклонен.")) + 
				" " + ТекущаяДата() + " пользователем " + ДопДанные.ТекущийПользователь + "
				|" + ДопДанные.Комментарий;
				БПСервер.СоздатьОповещение(МассивПользователей, ТекстОповещения, "Оповещение о прохождении маршрута документом " + Задача.Заявка, Задача.Заявка, Истина);
			КонецЕсли;
		КонецЕсли;	
		// ***  Развилка между БП.Согласование2 и БП.Согласование3 -----))
	КонецЕсли;
	
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
	
КонецФункции

Функция КонтрольОФК_ВыполненоСервер(Задача, ПроверкаУспешно, Пройден, ДопДанные)
	
	СзИлиЗаявка = ?(ТипЗнч(Задача.Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату"), "заявку", "СЗ");
	
	НачатьТранзакцию();
	
	//добавляем комментарии в историю переписки
	БПОбъект 	 = Задача.БизнесПроцесс.ПолучитьОбъект();
	ЗадачаОбъект = Задача.ПолучитьОбъект();
	Комментарий  = ДопДанные.Комментарий;
	ТекущийПользователь             = ДопДанные.ТекущийПользователь;
	
	Если Пройден Тогда
		ЗадачаОбъект.Комментарии = Строка(ТекущаяДата()) + ": " + ТекущийПользователь + " проверил " + СзИлиЗаявка + ":
		|" + Комментарий;
		БПОбъект.Комментарии = БПОбъект.Комментарии + ?(ПустаяСтрока(БПОбъект.Комментарии), "", "
		|") + ЗадачаОбъект.Комментарии;
	КонецЕсли;
	
	БПОбъект.СогласованоДействие3 = ПроверкаУспешно;
	
	ТЗДопСогласование = ДопДанные.ДопСогласование;
	ТЗДопСогласованиеПервоначальное = ДопДанные.ДопСогласованиеПервоначальное;
	БПОбъект.ДопСогласование.Загрузить(ТЗДопСогласование);
	
	Если ДопДанные.Свойство("ДопОповещение") И (ТипЗнч(Задача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование2") или ТипЗнч(Задача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование3")) тогда
		ТЗДопОповещение = ДопДанные.ДопОповещение;
		БПОбъект.Адресаты.Загрузить(ТЗДопОповещение);
	КонецЕсли;
	Если ДопДанные.Свойство("ДопИсполнение") И ТипЗнч(Задача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование3") тогда
		ТЗДопИсполнение = ДопДанные.ДопИсполнение;
		БПОбъект.ДопИсполнение.Загрузить(ТЗДопИсполнение);
	КонецЕсли;
	
	
	//добавляем
	
	Если НЕ Пройден Тогда // если заявка отменена
		СтруктураПоиска = Новый Структура("Пользователь", ТекущийПользователь);
		МассивСтрок = БПОбъект.ДопСогласование.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрок.Количество() Тогда //если отменяет один из рецензентов
			Для каждого ТекСтрока Из МассивСтрок Цикл
				ТекСтрока.Пройден = 0;
				ТекСтрока.Согласовано = 0;
				ТекСтрока.ДатаВыполнения = ТекущаяДата();
				ТекСтрока.Комментарии = "Отменил(а) " + СзИлиЗаявка + ". " + Строка(Комментарий);
				Комментарий = "Отменил(а) " + СзИлиЗаявка + ". " +  Комментарий;
				ТекСтрока.Пользователь = ТекущийПользователь;
			КонецЦикла;
		Иначе //если отменяет не рецензент
			Комментарий = "Отменил(а) " + СзИлиЗаявка + ". " +  Комментарий;
		КонецЕсли;
	Иначе // если заявка согласована(или нет) ОФК
		БПОбъект.ПроверенОФК = Истина;
		БПОбъект.СогласованОФК = ПроверкаУспешно;
		БПОбъект.КомментарииОФК = Комментарий;	
		БПОбъект.ПользовательОФК = ТекущийПользователь;
	КонецЕсли;
	

	БПОбъект.Записать();
	
	БПСервер.ВыполнитьЗадачу(Задача, 0, ?(ПроверкаУспешно, "Да.", "Нет."), Комментарий);
	
	Если ТипЗнч(Задача.Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") тогда	
		БПСервер.ОповеститьПользователяОбОтмененныхПозициях(Задача.Заявка);
	ИначеЕсли ТипЗнч(Задача.Заявка) = Тип("ДокументСсылка.Д_СлужебнаяЗаписка") Тогда
		БПСервер.ИзменитьСостояниеДокумента(Задача.Заявка, НЕ ПроверкаУспешно);
	КонецЕсли;
	
	//Оповестим автора об изменении маршрута бизнес-процесса
	БПСервер.СообщитьОбИзмененииМаршрута(Задача, ТЗДопСогласование, ТЗДопСогласованиеПервоначальное);
	
	//Для Заявок на оплату 
	Если ТипЗнч(Задача.Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") тогда	
		Если Не ПроверкаУспешно Тогда
			Если ЗначениеЗаполнено(Задача.Заявка.Инициатор) Тогда
				СоздатьОповещение(Задача.Заявка.Инициатор, "Заявка была отклонена пользователем " + ТекущийПользователь + " по причине: " + Задача.Комментарии, "Сообщение об отмене инициированной заявки", Задача.Заявка);
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	// 
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
	
КонецФункции

Функция Оплата_ВыполненоСервер(Задача, ПроверкаУспешно, Пройден, ДопДанные)
	
	НачатьТранзакцию();
	
	БП = Задача.БизнесПроцесс.ПолучитьОбъект();
	ЗадачаОбъект = Задача.ПолучитьОбъект();
	Комментарий = ДопДанные.Комментарий;
	ТекущийПользователь = ДопДанные.ТекущийПользователь;
	СзИлиЗаявка = ?(ТипЗнч(Задача.Заявка) = Тип("ДокументСсылка.Д_СлужебнаяЗаписка"), "СЗ", "заявку");
	ЗадачаЗаявка = Задача.Заявка;
	
	ЗаявкаЗакрыта = Ложь;
	
	Если ДопДанные.Свойство("ЗаявкаЗакрыта") И ДопДанные.ЗаявкаЗакрыта = Истина Тогда
		ТекстДействияИсполнителя = " закрыл(а)";
		ЗаявкаЗакрыта = Истина;
	Иначе	
		Если Задача.РольПользователя = "РешениеОбОплате" Или Задача.РольПользователя = "ДопПроверка" Тогда
			ТекстДействияИсполнителя = " отправил(а) на оплату";
		Иначе
			ТекстДействияИсполнителя = " оплатил(а)";
		КонецЕсли;	
	КонецЕсли;
	
	//   ***Развилка по БП -----((
		Если ТипЗнч(ЗадачаЗаявка) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") Тогда
			ЗадачаОбъект.Комментарии = Строка(ТекущаяДата()) + ": " + ТекущийПользователь + 
				?(Пройден, ?(ПроверкаУспешно, "", " не") + ТекстДействияИсполнителя, " отменил(а)") + " заявку:
				|" + Комментарий;
				БП.Комментарии = БП.Комментарии + "
				|" + ЗадачаОбъект.Комментарии;
		ИначеЕсли ТипЗнч(Задача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование2") ИЛИ ТипЗнч(Задача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование3") Тогда
			БП = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
			ЗадачаОбъект.Комментарии = Строка(ТекущаяДата()) + ": "  + ?(ПроверкаУспешно, "Ознакомлено ", "Ознакомление отклонено ") + " пользователем " + Строка(ПараметрыСеанса.ТекущийПользователь) + ":
		|" + ?(ЗначениеЗаполнено(Комментарий), Комментарий, "--комментарий отсутствует--");
			БП.Комментарии = БП.Комментарии + "
			|" + ЗадачаОбъект.Комментарии;
		Иначе 
			ЗадачаОбъект.Комментарии = Строка(ТекущаяДата()) + ": " + ТекущийПользователь + " ознакомился с согласованием:
			|" + ?(ЗначениеЗаполнено(Комментарий), Комментарий, "--комментарий отсутствует--");
			БП.ИсторияСогласования = БП.ИсторияСогласования + "
			|" + ЗадачаОбъект.Комментарии;
		КонецЕсли;
	//   ***Развилка по БП -----))
		
	БП.СогласованоДействие4 = ПроверкаУспешно;
	
	Если НЕ Пройден Тогда // если заявка согласована или нет
		СтруктураПоиска = Новый Структура("Пользователь", ТекущийПользователь);
		МассивСтрок = БП.ДопСогласование.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрок.Количество() Тогда //если отменяет один из рецензентов
			Для каждого ТекСтрока Из МассивСтрок Цикл
				ТекСтрока.Пройден = 0;
				ТекСтрока.Согласовано = 0;
				ТекСтрока.ДатаВыполнения = ТекущаяДата();
				ТекСтрока.Комментарии = "Отменил(а) " + СзИлиЗаявка + ". " + Строка(Комментарий);
				Комментарий = "Отменил(а) " + СзИлиЗаявка + ". " +  Комментарий;
				ТекСтрока.Пользователь = ТекущийПользователь;
			КонецЦикла;
		Иначе //если отменяет не рецензент
			Комментарий = "Отменил(а) " + СзИлиЗаявка + ". " +  Комментарий;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Задача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование3") тогда
		ДоступныеПользователи = БПСервер.ПолучитьМассивПользователей();
		Для каждого ТекСтрока Из БП.Адресаты Цикл
			Если НЕ ДоступныеПользователи.Найти(ТекСтрока.СубъектСогласования) = Неопределено Тогда
				ТекСтрока.Согласовано = ПроверкаУспешно;
				ТекСтрока.Комментарии = Комментарий;
				ТекСтрока.Пользователь = ТекущийПользователь;
				//Прервать;		
			КонецЕсли;	
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Задача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.СогласованиеОбщее") тогда
		ДоступныеПользователи = БПСервер.ПолучитьМассивПользователей();
		Для каждого ТекСтрока Из БП.ДопОповещение Цикл
			Если НЕ ДоступныеПользователи.Найти(ТекСтрока.Пользователь) = Неопределено Тогда
				ТекСтрока.Оповещен = ПроверкаУспешно;
				//ТекСтрока.Комментарии = Комментарий;
				//ТекСтрока.Пользователь = ТекущийПользователь;
				//Прервать;		
			КонецЕсли;	
		КонецЦикла;
		//проверка на уже созданные подчиненные документы. только ав отчеты
		Если ЗначениеЗаполнено(ЗадачаЗаявка) И ТипЗнч(ЗадачаЗаявка) = Тип("ДокументСсылка.Д_ЗаявкаНаАвансовыйОтчет") Тогда
			Если НЕ ПроверкаУспешно Тогда
				ПодчиненныеДоки = БПСервер.ЕстьПоискПодчиненныеДокументы(ЗадачаЗаявка.Метаданные().Имя,
				ЗадачаЗаявка,
				"УЧ_АвансовыйОтчет",
				?(ТипЗнч(ЗадачаЗаявка) = Тип("ДокументСсылка.Д_ЗаявкаНаОтгрузку"), Задача.Предприятие, ""));
				
				ЕстьНепомеченные = Ложь;
				Для каждого ТекДок Из ПодчиненныеДоки Цикл
					Если НЕ ТекДок.ПометкаУдаления Тогда
						ЕстьНепомеченные = Истина;					
					КонецЕсли;
				КонецЦикла; 
				
				Если ЕстьНепомеченные Тогда
					ТекстОшибки = "Вернуть на доработку невозможно, т.к. есть созданные на основании документы!";
					Возврат Новый Структура("Результат, ТекстОшибки", Ложь, ТекстОшибки);				
				КонецЕсли;				
			КонецЕсли;
		КонецЕсли;
		
		//конец проверки
	КонецЕсли;
	
	//   ***Развилка по БП -----((
	//Если ТипЗнч(ЗадачаЗаявка) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") или ТипЗнч(ЗадачаЗаявка) = Тип("ДокументСсылка.Д_СлужебнаяЗаписка") Тогда
	//	Если БП.ХранилищеТабДока.Получить() = Неопределено Тогда
	//	
	//		// 10.10.2012 создание таб дока и помещение его в хранилище
	//		ТабДок = Новый ТабличныйДокумент;
	//	
	//		МассивДоков = Новый Массив;
	//		МассивДоков.Добавить(БП.Заявка);
	//		
	//		Если ТипЗнч(ЗадачаЗаявка) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") Тогда
	//			Документы.Д_ЗаявкаНаОплату.Печать(ТабДок, МассивДоков, "ПечатьБезНалБух");
	//		ИначеЕсли ТипЗнч(ЗадачаЗаявка) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") тогда
	//			Документы.Д_СлужебнаяЗаписка.Печать(ТабДок, МассивДоков);
	//		КонецЕсли;
	//	
	//		АдресВХ = ПоместитьВоВременноеХранилище(ТабДок, Новый УникальныйИдентификатор());
	//		РеквизитСХранилищем = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресВХ));
	//		БП.ХранилищеТабДока = РеквизитСХранилищем;

	//	КонецЕсли;
	//КонецЕсли;
	//   ***Развилка по БП -----))
	
	//   ***Развилка по БП -----((
	Если ТипЗнч(ЗадачаЗаявка) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") Тогда
		ТекЗаявка = ЗадачаЗаявка.ПолучитьОбъект();
		Если Задача.РольПользователя = "РешениеОбОплате" Тогда
			Для Каждого СтрокаЧастичнойОплаты Из ДопДанные.ТаблицаЧастичнойОплаты Цикл
				СтрокиЗаявки = ТекЗаявка.ЗаявкаБезнал.НайтиСтроки(Новый Структура("УИДСтроки", СтрокаЧастичнойОплаты.УИДСтроки));
				Для Каждого СтрокаЗаявки Из СтрокиЗаявки Цикл
					Если ДопДанные.ЗаявкаЗакрыта = Истина Тогда
						СтрокаЗаявки.ЗаявленнаяСумма = СтрокаЗаявки.СуммаДДС;
						СтрокаЗаявки.СуммаДДС = СтрокаЗаявки.УжеОплачено;
						Если Не СтрокаЗаявки.СтавкаНДС = сабОбщегоНазначения.ПолучитьЭлементНДС("Произвольная") Тогда
							СтавкаНДС = сабОбщегоНазначения.ПолучитьЭлементНДС("Произвольная").Ставка;
							СтрокаЗаявки.СуммаНДС = СтрокаЗаявки.СуммаДДС - (СтрокаЗаявки.СуммаДДС) / ((СтавкаНДС + 100) / 100);
						Иначе
							СтрокаЗаявки.СуммаНДС = 0;
						КонецЕсли;	
					Иначе
						СтрокаЗаявки.СуммаЧастичнойОплаты = СтрокаЧастичнойОплаты.СуммаЧастичнойОплаты;
					КонецЕсли;	
				КонецЦикла;
			КонецЦикла;	
		ИначеЕсли Задача.РольПользователя = "ИсполнительОплаты" Тогда
			Для Каждого СтрокаЗаявки Из ТекЗаявка.ЗаявкаБезнал Цикл
				СтрокаЗаявки.УжеОплачено = СтрокаЗаявки.УжеОплачено + СтрокаЗаявки.СуммаЧастичнойОплаты;
				СтрокаЗаявки.СуммаЧастичнойОплаты = 0;
			КонецЦикла;	
		КонецЕсли;
		ТекЗаявка.Записать();
		
		Если Пройден Тогда // если заявка согласована или нет
			ДоступныеПользователи = БПСервер.ПолучитьМассивПользователей();
			ЕстьДоступКзаявке = Ложь;
			
			Для каждого ТекПользователь Из ДоступныеПользователи Цикл
				ОтобранныеСтроки = БП.ДопИсполнение.НайтиСтроки(Новый Структура("ПринятоКИсполнению, Исполнено, Исполнитель", Ложь, Ложь, ТекПользователь)); 
				Если НЕ ОтобранныеСтроки.Количество() Тогда
					ОтобранныеСтроки = БП.ДопИсполнение.НайтиСтроки(Новый Структура("Исполнено, Исполнитель", Ложь, ТекПользователь)); 
				КонецЕсли;
				
				Если ЗаявкаЗакрыта = Истина Тогда
					ОтобранныеСтроки = БП.ДопИсполнение;
				КонецЕсли;	
				
				Если ОтобранныеСтроки.Количество() Тогда
					Для каждого ТекСтрока Из ОтобранныеСтроки Цикл
						ТекСтрока.ПринятоКИсполнению = Истина;
						ТекСтрока.Исполнено = ПроверкаУспешно;
						ТекСтрока.Пройдено = Пройден;
						ТекСтрока.НомерИтерации = ТекСтрока.НомерИтерации + 1;
						ТекСтрока.Комментарии = ДопДанные.Комментарий;
						ТекСтрока.Пользователь = ПараметрыСеанса.ТекущийПользователь;
						НаДоработке = 1 - ПроверкаУспешно;
						ЕстьДоступКзаявке = Истина;
						Если Не ЗаявкаЗакрыта = Истина Тогда
							Прервать;
						КонецЕсли;	
					КонецЦикла;
				Иначе
					ОтобранныеСтроки = БП.ДопИсполнение.НайтиСтроки(Новый Структура("ПринятоКИсполнению, Исполнено, Исполнитель", Истина, Истина, ТекПользователь));
					Если ОтобранныеСтроки.Количество() Тогда
						ЕстьДоступКзаявке = Истина;				
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ ЕстьДоступКзаявке Тогда
				Сообщить("Вы не можете принять к исполнению.");
				Возврат Ложь;			
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	//   ***Развилка по БП -----))
	
	БП.Записать();	
	БПСервер.ВыполнитьЗадачу(Задача, 0, ?(ПроверкаУспешно, "Да.", "Нет."), Комментарий);
	
	//Если ТипЗнч(ЗадачаЗаявка) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") И ПроверкаУспешно Тогда //выполняем подзадачи исполнения по заявкам на оплату
	//	ВыполнитьЗадачиИсполненияЗаявокаОплату(ЗадачаЗаявка, Комментарий); 
	//КонецЕсли;
	
	Если ТипЗнч(Задача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование1") тогда
		БПСервер.ОповеститьПользователяОбОтмененныхПозициях(ЗадачаЗаявка);	
	//ИначеЕсли ТипЗнч(Задача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование2") тогда
	//	Заявка = БП.Заявка.ПолучитьОбъект();
	//	//Заявка.СостояниеДокумента = ?(ПроверкаУспешно, Перечисления.Д_СостоянияДокументов.Исполнен, Перечисления.Д_СостоянияДокументов.НаДоработке);	
	//	Заявка.Записать();		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	возврат Истина;
		
КонецФункции

Функция Оповещение_Исполнение_ВыполненоСервер(Задача, ПроверкаУспешно, Пройден, ДопДанные)
	
	НачатьТранзакцию();
	
	Комментарий               = ДопДанные.Комментарий;
	ОтправлятьКомментарий     = ДопДанные.ОтправлятьКомментарий;
	Документ                  = Задача.Заявка.Документ;
	ТипСообщенияИзменеикСрока = ЗначениеЗаполнено(Задача.Заявка.НовыйСрок);//тип сообщение - уведомление на изменение срока	
	
	БП = Задача.Заявка.ПолучитьОбъект();
	СтруктураПоиска = Новый Структура("Исполнитель", ДопДанные.ТекущийПользователь);
	НайдденныеСтроки = БП.СписокИсполнителей.НайтиСтроки(СтруктураПоиска);
	Для каждого ТекСтрока Из НайдденныеСтроки Цикл
		ТекСтрока.Комментарии = Комментарий;
		ТекСтрока.Исполнено = Истина;
		ТекСтрока.ДатаВыполнения = ТекущаяДата();
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("Исполнено", Ложь);
	Если НЕ БП.СписокИсполнителей.НайтиСтроки(СтруктураПоиска).Количество() Тогда
		БП.Завершен = Истина;
		БП.Записать(РежимЗаписиДокумента.Проведение);
	Иначе
		БП.Записать();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Комментарий) И ОтправлятьКомментарий Тогда
		Если ТипЗнч(Задача.Заявка) = Тип("ДокументСсылка.БП_Оповещение") Тогда
			БПСервер.СоздатьОповещение(Задача.Автор, Строка(Комментарий), "Ответ на " + Строка(Задача.Заявка), Задача.Гиперссылка,,,Задача.Заявка);
		Иначе
			БПСервер.СоздатьОповещение(Задача.Автор, "Пользователь " + ДопДанные.ТекущийПользователь 
			+ " ответил в комментариях к оповещению:
			|" + Строка(Комментарий), "Ответ на " + Строка(Задача.Заявка), Задача.Гиперссылка);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Документ) = Тип("ЗадачаСсылка.Задача") И ТипСообщенияИзменеикСрока Тогда
		БПСервер.СоздатьОповещение(Задача.Автор, "Запрос на изменение срока по задаче " + Строка(Документ) + ?(ПроверкаУспешно, " удовлетворен.", " не удовлетворен."),"Ответ на запрос об изменениии срока выполнения задачи", Задача.Гиперссылка,,,Задача.Заявка);
	КонецЕсли;
	
		Если ТипЗнч(Документ) = Тип("ЗадачаСсылка.Задача") И ТипСообщенияИзменеикСрока Тогда
		ТекОбЗадача = Документ.ПолучитьОбъект();
		Если НЕ ПроверкаУспешно Тогда
			ТекОбЗадача.СрокВыполнения = Задача.Заявка.СтарыйСрок;
		Иначе
			ТекОбЗадача.СрокВыполнения = Задача.Заявка.НовыйСрок;
		КонецЕсли;
		ТекОбЗадача.Записать();
	КонецЕсли;
		
	БПСервер.ВыполнитьЗадачу(Задача, 0, "", Комментарий);	
	
	ЗафиксироватьТранзакцию();
	
	ОзнакомитьсяСДокументом(Задача.Заявка);
	
	Возврат Истина;
	
КонецФункции

Функция Поручение_Исполнение_ВыполненоСервер(Задача, ДопДанные)
	
	Комментарий = ДопДанные.Комментарий;
	
	НачатьТранзакцию();
	БП = Задача.Заявка.ПолучитьОбъект();
	СтруктураПоиска = Новый Структура("Исполнитель", ДопДанные.ТекущийПользователь);
	НайдденныеСтроки = БП.СписокИсполнителей.НайтиСтроки(СтруктураПоиска);
	Для каждого ТекСтрока Из НайдденныеСтроки Цикл
		ТекСтрока.Пользователь = ДопДанные.ТекущийПользователь;
		ТекСтрока.Комментарии = Комментарий;
		ТекСтрока.Приложение = ?(ДопДанные.Свойство("ПрикрепитьДокумент"), ДопДанные.ПрикрепитьДокумент, Неопределено);	
		ТекСтрока.Исполнено = Истина;
		ТекСтрока.ДатаВыполнения = ТекущаяДата();
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("Исполнено", Ложь);
	Если НЕ БП.СписокИсполнителей.НайтиСтроки(СтруктураПоиска).Количество() И НЕ Бп.КонтрольИсполнения Тогда
		БП.Завершен = Истина;
		БП.Записать(РежимЗаписиДокумента.Проведение);
	Иначе
		БП.Записать();
	КонецЕсли;
	
	БПСервер.ВыполнитьЗадачу(Задача, 0, "", Комментарий);
	
	
	
	Если Бп.КонтрольИсполнения И ПараметрыСеанса.ТекущийПользователь <> БП.Автор Тогда
		НоваяЗадача = Задачи.Задача.СоздатьЗадачу();		
		НоваяЗадача.Заявка = Задача.Заявка;
		НоваяЗадача.Дата = ТекущаяДата();
		НоваяЗадача.Наименование = "Проверить выполние задания:" + Строка(ДопДанные.ТекущийПользователь);
		НоваяЗадача.Автор = ДопДанные.ТекущийПользователь;
		НоваяЗадача.Описание = Задача.Описание;
		НоваяЗадача.Исполнитель = БП.Автор;
		НоваяЗадача.Записать();
	КонецЕсли;
	
	//++саб д1 21.03.18
	БПСервер.ЗавершитьХронометражПоПредмету(ТекущаяДата(), Задача.Заявка);

	
	ЗафиксироватьТранзакцию();
	
	
	Возврат Истина;
	
КонецФункции

Функция Поручение_Контроль_ВыполненоСервер(Задача, ПроверкаУспешно, ДопДанные)
	
	Комментарий = ДопДанные.Комментарий;
	ПричинаВозврата = ?(ДопДанные.Свойство("ПричинаВозврата"), ДопДанные.ПричинаВозврата, "");
	
	БП = Задача.Заявка.ПолучитьОбъект();
	СтруктураПоиска = Новый Структура("Исполнитель", Задача.Автор);
	НайдденныеСтроки = БП.СписокИсполнителей.НайтиСтроки(СтруктураПоиска);
	Для каждого ТекСтрока Из НайдденныеСтроки Цикл
		ТекСтрока.ПричинаВозврата = ПричинаВозврата;
		ТекСтрока.Исполнено = ПроверкаУспешно;
		ТекСтрока.ВРаботе = ПроверкаУспешно;
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("Исполнено", Ложь);
	Если НЕ БП.СписокИсполнителей.НайтиСтроки(СтруктураПоиска).Количество() Тогда
		БП.Завершен = Истина;
		БП.Записать(РежимЗаписиДокумента.Проведение);
	Иначе
		БП.Записать();	
	КонецЕсли;
	
	БПСервер.ВыполнитьЗадачу(Задача, 0, ПроверкаУспешно, Комментарий);
	
	Если Не ПроверкаУспешно Тогда
		НоваяЗадача = Задачи.Задача.СоздатьЗадачу();		
		НоваяЗадача.Заявка = Задача.Заявка;
		НоваяЗадача.Дата = ТекущаяДата();
		НоваяЗадача.Наименование = "Доработать по заданию";
		НоваяЗадача.Автор = ДопДанные.ТекущийПользователь;
		НоваяЗадача.Описание = Задача.Описание;
		НоваяЗадача.Исполнитель = Задача.Автор;
		НоваяЗадача.Записать();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ОтправитьИЗакрытьЗаданиеСервер(Объект) Экспорт
	НачатьТранзакцию();
	Для каждого ТекИсполнитель Из Объект.СписокИсполнителей  Цикл
		
		Задача = Задачи.Задача.СоздатьЗадачу();		
		Задача.Заявка = Объект.Ссылка;
		Задача.Дата = ТекущаяДата();
		Задача.Наименование = ?(ЗначениеЗаполнено(Объект.Тема), Объект.Тема, "Выполнить задание");
		Задача.СрокВыполнения = ТекИсполнитель.СрокИсполнения;
		Задача.Автор = Объект.Автор;
		Задача.Описание = Объект.Описание;
		Задача.Исполнитель = ТекИсполнитель.Исполнитель;
		Задача.Записать();
		
		//ФормируемыеЗадачи.Добавить(Задача);
		
	КонецЦикла;
	
	//записываем задание еще раз (неоптимально, а как?)
	ТекОбъект = Объект.Ссылка.ПолучитьОбъект();
	ТекОбъект.Стартован = Истина;
	ТекОбъект.Завершен = Ложь;
	Для каждого ТекСтрока Из ТекОбъект.СписокИсполнителей Цикл
		ТекСтрока.ВРаботе = Ложь;
		ТекСтрока.Исполнено = Ложь;
		ТекСтрока.Пользователь = "";
		ТекСтрока.Комментарии = "";
	КонецЦикла; 
	ТекОбъект.Записать();
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ОбновитьЗаданияИсполнителям(Объект) Экспорт
	НачатьТранзакцию();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	БП_ДелегированиеЗадач.Задача,
	|	БП_ДелегированиеЗадач.Замещающий
	|ИЗ
	|	РегистрСведений.БП_ДелегированиеЗадач КАК БП_ДелегированиеЗадач
	|ГДЕ
	|	БП_ДелегированиеЗадач.Задача.Заявка = &Задача";
	
	Запрос.УстановитьПараметр("Задача", Объект);
	
	Результат = Запрос.Выполнить();
	ВыборкаЗадач = Результат.Выгрузить();
	
	//обновляем/добавляем задания
	Для каждого ТекИсполнитель Из Объект.СписокИсполнителей  Цикл
		ТекСтроки = ВыборкаЗадач.НайтиСтроки(Новый Структура("Замещающий", ТекИсполнитель.Исполнитель));
		Если ТекСтроки.Количество()  Тогда //обновление задания
			Для каждого ВыборкаЗадача Из ТекСтроки Цикл
				ВыборкаЗадачаОбъект = ВыборкаЗадача.Задача.ПолучитьОбъект();
				//Если НЕ ВыборкаЗадачаОбъект.СрокВыполнения = ТекИсполнитель.СрокИсполнения Тогда	//доп оповещение в случае изменения срока
				//	БПСервер.СоздатьОповещение(ВыборкаЗадача.Замещающий, "Срок исполнения по заданию изменен пользователем " + Строка(ПараметрыСеанса.ТекущийПользователь), "Изменен срок исполнения задания", Объект);
				//КонецЕсли;
				ВыборкаЗадачаОбъект.СрокВыполнения = ТекИсполнитель.СрокИсполнения;
				ВыборкаЗадачаОбъект.Описание = Объект.Описание;
				ВыборкаЗадачаОбъект.Записать();
			КонецЦикла;
		Иначе //новое задание
			Задача = Задачи.Задача.СоздатьЗадачу();		
			Задача.Заявка = Объект.Ссылка;
			Задача.Дата = ТекущаяДата();
			Задача.Наименование = "Выполнить задание";
			Задача.СрокВыполнения = ТекИсполнитель.СрокИсполнения;
			Задача.Автор = Объект.Автор;
			Задача.Описание = Объект.Описание;
			Задача.Исполнитель = ТекИсполнитель.Исполнитель;
			Задача.Записать();
		КонецЕсли;
	КонецЦикла;
	
	//удаляем задания у удаленных пользователей и оповещаем их
	Для каждого ВыборкаЗадача1 Из ВыборкаЗадач Цикл
		Если НЕ Объект.СписокИсполнителей.НайтиСтроки(Новый Структура("Исполнитель", ВыборкаЗадача1.Замещающий)).Количество() Тогда
			ВыборкаЗадачаОбъект = ВыборкаЗадача1.Задача.ПолучитьОбъект();
			//ВыборкаЗадачаОбъект.СрокВыполнения = ТекИсполнитель.СрокИсполнения;
			ВыборкаЗадачаОбъект.ПометкаУдаления = Истина;
			ВыборкаЗадачаОбъект.Описание = Объект.Описание;
			ВыборкаЗадачаОбъект.Записать();
			
			//создаем оповещение исполнителю
			БПСервер.СоздатьОповещение(ВыборкаЗадача1.Замещающий, "Задание отменено пользователем " + Строка(ПараметрыСеанса.ТекущийПользователь), "Задание отменено", Объект);
		КонецЕсли;	
	КонецЦикла; 
	
	////записываем задание еще раз (неоптимально, а как?)
	//ТекОбъект = Объект.Ссылка.ПолучитьОбъект();
	//ТекОбъект.Стартован = Истина;
	//ТекОбъект.Завершен = Ложь;
	//Для каждого ТекСтрока Из ТекОбъект.СписокИсполнителей Цикл
	//	ТекСтрока.ВРаботе = Ложь;
	//	ТекСтрока.Исполнено = Ложь;
	//	ТекСтрока.Пользователь = "";
	//	ТекСтрока.Комментарии = "";
	//КонецЦикла; 
	//ТекОбъект.Записать();
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ВыполнитьЗадачиОплатыЗаявокНаФинансирование(Заявка)
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//|	Д_ЗаявкаНаОплатуЗаявкаБезнал.ЗаявкаНаФинансирование КАК ЗаявкаНаФинансирование
	//|ПОМЕСТИТЬ Врем
	//|ИЗ
	//|	Документ.Д_ЗаявкаНаОплату.ЗаявкаБезнал КАК Д_ЗаявкаНаОплатуЗаявкаБезнал
	//|ГДЕ
	//|	Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка = &Ссылка
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	Задача.Ссылка КАК Задача,
	//|	Задача.БизнесПроцесс КАК БизнесПроцесс,
	//|	Задача.Заявка КАК Заявка
	//|ИЗ
	//|	Задача.Задача КАК Задача
	//|ГДЕ
	//|	Задача.Заявка В
	//|			(ВЫБРАТЬ
	//|				Врем.ЗаявкаНаФинансирование КАК ЗаявкаНаФинансирование
	//|			ИЗ
	//|				Врем КАК Врем)
	//|	И Задача.Выполнена = ЛОЖЬ";
	//
	//Запрос.УстановитьПараметр("Ссылка", Заявка);
	//
	//Результат = Запрос.Выполнить();
	//Выборка = Результат.Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//	БПСервер.ВыполнитьЗадачу(Выборка.Задача,, Истина, "Выполнена автоматически по факту выполнения Реестра");
	//КонецЦикла;

КонецПроцедуры

Процедура ВыполнитьЗадачиИсполненияЗаявокаОплату(ЗадачаЗаявка, Комментарий) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.ЗаявкаНаФинансирование КАК ЗаявкаНаФинансирование,
	               |	Задача.Ссылка КАК Задача
	               |ИЗ
	               |	Документ.Д_ЗаявкаНаОплату.ЗаявкаБезнал КАК Д_ЗаявкаНаОплатуЗаявкаБезнал
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.Задача КАК Задача
	               |		ПО Д_ЗаявкаНаОплатуЗаявкаБезнал.ЗаявкаНаФинансирование = Задача.Заявка
	               |			И (Задача.Выполнена = ЛОЖЬ)
	               |			И (Задача.ТочкаМаршрута = ЗНАЧЕНИЕ(БизнесПроцесс.СогласованиеОбщее.ТочкаМаршрута.Действие3))
	               |ГДЕ
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка = &Ссылка
	               |	И НЕ Д_ЗаявкаНаОплатуЗаявкаБезнал.ЗаявкаНаФинансирование = ЗНАЧЕНИЕ(Документ.Д_ЗаявкаНаФинансирование.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Ссылка", ЗадачаЗаявка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		БПСервер.ВыполнитьКомандуЗадачиБП(Выборка.Задача, "ЗаявкаОплачена", Новый Структура("Комментарий", Комментарий), Ложь, "ФормаУниверсальная");
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСтруктуруРеквизитовФормы(Форма) экспорт
	
	Результат = новый Структура();
	
	Попытка
		Результат.Вставить("Адресаты", Форма.Адресаты);
	Исключение
	КонецПопытки;	
	Попытка
		Результат.Вставить("АдресатыПервоначальное", Форма.АдресатыПервоначальное);
	Исключение
	КонецПопытки;
	
	Попытка
		Результат.Вставить("ДопОповещение", Форма.ДопОповещение);
	Исключение
	КонецПопытки;	
	Попытка
		Результат.Вставить("ДопОповещениеПервоначальное", Форма.ДопОповещениеПервоначальное);
	Исключение
	КонецПопытки;
	
	Попытка
		Результат.Вставить("ДопИсполнение", Форма.ДопИсполнение);
	Исключение
	КонецПопытки;	
	Попытка
		Результат.Вставить("ДопИсполнениеПервоначальное", Форма.ДопИсполнениеПервоначальное);
	Исключение
	КонецПопытки;
	
	Попытка
		Результат.Вставить("ДопСогласование", Форма.ДопСогласование);
	Исключение
	КонецПопытки;	
	Попытка
		Результат.Вставить("ДопСогласованиеПервоначальное", Форма.ДопСогласованиеПервоначальное);
	Исключение
	КонецПопытки;
	
	Попытка
		Результат.Вставить("ТаблицаЧастичнойОплаты", Форма.ТаблицаЧастичнойОплаты);
	Исключение
	КонецПопытки;
	
	Попытка
		Результат.Вставить("Комментарий", Форма.Комментарий);
	Исключение
		Результат.Вставить("Комментарий", "");
	КонецПопытки;
	
	Попытка
		Результат.Вставить("Комментарий", Форма.ЗадачаКомментарий);
	Исключение
		Если НЕ Результат.Свойство("Комментарий") Тогда
			Результат.Вставить("Комментарий", "");
		КонецЕсли;
	КонецПопытки;
	
	Попытка
		Результат.Вставить("ОтправлятьКомментарий", ЗначениеЗаполнено(Форма.Комментарий));
	Исключение
		Результат.Вставить("ОтправлятьКомментарий", Ложь);
	КонецПопытки;
	
	Попытка
		Результат.Вставить("СрокОкончания", Форма.СрокОкончания);
	Исключение
		Результат.Вставить("СрокОкончания", Дата('00010101'));
	КонецПопытки;

	Попытка
		Результат.Вставить("ПрикрепитьДокумент", Форма.ПрикрепитьДокумент);
	Исключение
		Результат.Вставить("ПрикрепитьДокумент", Неопределено);
	КонецПопытки;
	
	Попытка
		Результат.Вставить("СозданныйПользователь", Форма.СозданныйПользователь);
	Исключение
		Результат.Вставить("СозданныйПользователь", Неопределено);
	КонецПопытки;
	
	Попытка
		Результат.Вставить("ДобавляемыеВДоступИБ", Форма.ДобавляемыеВДоступИБ);
	Исключение
	КонецПопытки;
	
	Попытка
		Результат.Вставить("ЗаявкаЗакрыта", Форма.ЗаявкаЗакрыта);
	Исключение
	КонецПопытки;
	
	возврат Результат;
	
КонецФункции

#КонецОбласти 

#Область КПереносу

Функция НайтиПлатежкиНоНомеруЗадачи(НомерЗадачи) Экспорт
	
	Если Не ЗначениеЗаполнено(НомерЗадачи) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлатежноеПоручение.Ссылка
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|ГДЕ
	|	ПлатежноеПоручение.НомерЗадачи = &НомерЗадачи
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УЧ_РК.Ссылка
	|ИЗ
	|	Документ.УЧ_РК КАК УЧ_РК
	|ГДЕ
	|	УЧ_РК.НомерЗадачи = &НомерЗадачи";
	Запрос.УстановитьПараметр("НомерЗадачи", НомерЗадачи);
	РезультатЗапроса = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;	
	
КонецФункции

Функция ПроверитьНаличиеПлатежныхДокументовБезНал(Объект, ВозвратСуществующих = Ложь) Экспорт
	
	Заявка = Объект.Заявка;
	МассивСтрокБезПП = Новый Массив;
	
	Если ТипЗнч(Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") Тогда
		
		Если НЕ Объект.ТочкаМаршрута = БизнесПроцессы.Согласование1.ТочкиМаршрута.Действие5 Тогда
			Возврат МассивСтрокБезПП;
		КонецЕсли;
		
		Запрос = новый Запрос;      
		Запрос.УстановитьПараметр("Заявка", Заявка);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПлатежноеПоручениеСтрокиЗаявкиНаОплату.УИДСтрокиДокОснования КАК УИДСтрокиДокОснования,
		               |	ПлатежноеПоручениеСтрокиЗаявкиНаОплату.Ссылка.УИН КАК УИН,
		               |	ПлатежноеПоручениеСтрокиЗаявкиНаОплату.Ссылка.УИДСтроки КАК УИДСтроки,
		               |	ПлатежноеПоручениеСтрокиЗаявкиНаОплату.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.ПлатежноеПоручение.СтрокиЗаявкиНаОплату КАК ПлатежноеПоручениеСтрокиЗаявкиНаОплату
		               |ГДЕ
		               |	(ПлатежноеПоручениеСтрокиЗаявкиНаОплату.ДокОснование = &Заявка
		               |			ИЛИ ПлатежноеПоручениеСтрокиЗаявкиНаОплату.Ссылка.Заявка = &Заявка
		               |			ИЛИ ПлатежноеПоручениеСтрокиЗаявкиНаОплату.ДокОснование В
		               |				(ВЫБРАТЬ
		               |					Д_ЗаявкаНаОплатуЗаявкаБезнал.ЗаявкаНаФинансирование КАК ЗаявкаНаФинансирование
		               |				ИЗ
		               |					Документ.Д_ЗаявкаНаОплату.ЗаявкаБезнал КАК Д_ЗаявкаНаОплатуЗаявкаБезнал
		               |				ГДЕ
		               |					Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка = &Заявка
		               |					И НЕ Д_ЗаявкаНаОплатуЗаявкаБезнал.ЗаявкаНаФинансирование = ЗНАЧЕНИЕ(Документ.Д_ЗаявкаНаФинансирование.ПустаяСсылка)))
		               |	И НЕ ПлатежноеПоручениеСтрокиЗаявкиНаОплату.Ссылка.ПометкаУдаления
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ПлатежноеПоручениеТабличнаяЧасть.УИДСтрокиЗаявки,
		               |	ПлатежноеПоручениеТабличнаяЧасть.Ссылка.УИН,
		               |	ПлатежноеПоручениеТабличнаяЧасть.Ссылка.УИДСтроки,
		               |	ПлатежноеПоручениеТабличнаяЧасть.Ссылка
		               |ИЗ
		               |	Документ.ПлатежноеПоручение.ТабличнаяЧасть КАК ПлатежноеПоручениеТабличнаяЧасть
		               |ГДЕ
		               |	НЕ ПлатежноеПоручениеТабличнаяЧасть.Ссылка.ПометкаУдаления
		               |	И (ПлатежноеПоручениеТабличнаяЧасть.Ссылка.Заявка = &Заявка
		               |			ИЛИ ПлатежноеПоручениеТабличнаяЧасть.Ссылка.Заявка В
		               |				(ВЫБРАТЬ
		               |					Д_ЗаявкаНаОплатуЗаявкаБезнал.ЗаявкаНаФинансирование КАК ЗаявкаНаФинансирование
		               |				ИЗ
		               |					Документ.Д_ЗаявкаНаОплату.ЗаявкаБезнал КАК Д_ЗаявкаНаОплатуЗаявкаБезнал
		               |				ГДЕ
		               |					Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка = &Заявка
		               |					И НЕ Д_ЗаявкаНаОплатуЗаявкаБезнал.ЗаявкаНаФинансирование = ЗНАЧЕНИЕ(Документ.Д_ЗаявкаНаФинансирование.ПустаяСсылка)))
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	УЧ_ДвижениеДС.ГУИДОснования,
		               |	NULL,
		               |	NULL,
		               |	УЧ_ДвижениеДС.Ссылка
		               |ИЗ
		               |	Документ.УЧ_ДвижениеДС КАК УЧ_ДвижениеДС
		               |ГДЕ
		               |	НЕ УЧ_ДвижениеДС.Ссылка.ПометкаУдаления
		               |	И (УЧ_ДвижениеДС.ДокОснование = &Заявка
		               |			ИЛИ УЧ_ДвижениеДС.ДокОснование В
		               |				(ВЫБРАТЬ
		               |					Д_ЗаявкаНаОплатуЗаявкаБезнал.ЗаявкаНаФинансирование КАК ЗаявкаНаФинансирование
		               |				ИЗ
		               |					Документ.Д_ЗаявкаНаОплату.ЗаявкаБезнал КАК Д_ЗаявкаНаОплатуЗаявкаБезнал
		               |				ГДЕ
		               |					Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка = &Заявка
		               |					И НЕ Д_ЗаявкаНаОплатуЗаявкаБезнал.ЗаявкаНаФинансирование = ЗНАЧЕНИЕ(Документ.Д_ЗаявкаНаФинансирование.ПустаяСсылка)))";
		
		Выгрузка = Запрос.Выполнить().Выгрузить();
		
		Если НЕ ВозвратСуществующих Тогда //строки без документов оплаты
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ГруппыПользователей.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ГруппыПользователей КАК ГруппыПользователей
			|ГДЕ
			|	ГруппыПользователей.Состав.Пользователь В(&ТекущийПользователь)";
			
			Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
			
			ДоступныеГруппы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

			
			Для Каждого СтрокаЗаявки Из Заявка.ЗаявкаБезнал Цикл
				
				Если ЗначениеЗаполнено(СтрокаЗаявки.Источник) И НЕ СтрокаЗаявки.Источник.Ответственный = ПараметрыСеанса.ТекущийПользователь И ДоступныеГруппы.Найти(СтрокаЗаявки.Источник.Ответственный) = Неопределено Тогда
					Продолжить;//чужая строка
				КонецЕсли;
				
				Если Выгрузка.Найти(СтрокаЗаявки.УИДСтроки, "УИДСтрокиДокОснования") = Неопределено И Выгрузка.Найти(СтрокаЗаявки.УИДСтроки, "УИН") = Неопределено И Выгрузка.Найти(СтрокаЗаявки.УИДСтроки, "УИДСтроки") = Неопределено И Не СтрокаЗаявки.ОтменаОплаты Тогда
					МассивСтрокБезПП.Добавить(СтрокаЗаявки.НомерСтроки);				
				КонецЕсли;
				
			КонецЦикла;
		Иначе //документы оплаты
			Для каждого ТекСтрока Из Выгрузка Цикл
				МассивСтрокБезПП.Добавить(ТекСтрока.Ссылка);
			КонецЦикла; 	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивСтрокБезПП;
	
КонецФункции // ()

Функция ПроверитьНаличиеПлатежныхДокументовБезНалЗаявка(Объект, ВозвратСуществующих = Ложь) Экспорт
	
	Заявка = Объект.Заявка;
	МассивСтрокБезПП = Новый Массив;
	ТекущийПользовательАвторДокументов = Истина;
	
	Если ТипЗнч(Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаФинансирование") И (Ложь ИЛИ ВозвратСуществующих) Тогда
		Если НЕ Объект.ТочкаМаршрута = БизнесПроцессы.СогласованиеОбщее.ТочкиМаршрута.Действие3 
			И НЕ Объект.ТочкаМаршрута = БизнесПроцессы.СогласованиеОбщее.ТочкиМаршрута.Действие4 
			И НЕ Объект.ТочкаМаршрута = БизнесПроцессы.СогласованиеОбщее.ТочкиМаршрута.Действие5 Тогда
				МассивСтрокБезПП.Добавить(""); //строчка-заглушка для количества
				Возврат Новый Структура("МассивСтрокБезПП, ЭтоОзнакомление, ТекущийПользовательАвторДокументов", МассивСтрокБезПП, Объект.ТочкаМаршрута = БизнесПроцессы.СогласованиеОбщее.ТочкиМаршрута.Действие4 ИЛИ Объект.ТочкаМаршрута = БизнесПроцессы.СогласованиеОбщее.ТочкиМаршрута.Действие5, ТекущийПользовательАвторДокументов ) ;
		КонецЕсли;
		
		Запрос = новый Запрос;      
		Запрос.УстановитьПараметр("Заявка", Заявка);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПлатежноеПоручение.Ссылка КАК Ссылка,
		               |	ПлатежноеПоручение.Автор КАК Автор
		               |ИЗ
		               |	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
		               |ГДЕ
		               |	ПлатежноеПоручение.Заявка = &Заявка
		               |	И ПлатежноеПоручение.ПометкаУдаления = ЛОЖЬ
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	УЧ_ДвижениеДС.Ссылка,
		               |	УЧ_ДвижениеДС.Автор
		               |ИЗ
		               |	Документ.УЧ_ДвижениеДС КАК УЧ_ДвижениеДС
		               |ГДЕ
		               |	УЧ_ДвижениеДС.ПометкаУдаления = ЛОЖЬ
		               |	И УЧ_ДвижениеДС.ДокОснование = &Заявка";
		
		Выгрузка = Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрокаЗаявки Из Выгрузка Цикл
			МассивСтрокБезПП.Добавить(СтрокаЗаявки.Ссылка);
			ТекущийПользовательАвторДокументов = МИН(ПараметрыСеанса.ТекущийПользователь = СтрокаЗаявки.Автор, ТекущийПользовательАвторДокументов);
		КонецЦикла;		
	ИначеЕсли НЕ ВозвратСуществующих Тогда
		МассивСтрокБезПП.Добавить("");
	КонецЕсли;
	
	Возврат Новый Структура("МассивСтрокБезПП, ЭтоОзнакомление, ТекущийПользовательАвторДокументов", МассивСтрокБезПП, Объект.ТочкаМаршрута = БизнесПроцессы.СогласованиеОбщее.ТочкиМаршрута.Действие4 ИЛИ Объект.ТочкаМаршрута = БизнесПроцессы.СогласованиеОбщее.ТочкиМаршрута.Действие5, ТекущийПользовательАвторДокументов ) ;

КонецФункции // ()

Функция ПолучитьПППоЗаявке(ЗаявкаНаФинансирование) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПлатежноеПоручение.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	               |ГДЕ
	               |	ПлатежноеПоручение.Заявка = &Заявка
	               |	И ПлатежноеПоручение.ПометкаУдаления = ЛОЖЬ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	УЧ_ДвижениеДС.Ссылка
	               |ИЗ
	               |	Документ.УЧ_ДвижениеДС КАК УЧ_ДвижениеДС
	               |ГДЕ
	               |	УЧ_ДвижениеДС.ДокОснование = &Заявка
	               |	И УЧ_ДвижениеДС.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Заявка", ЗаявкаНаФинансирование);
	
	Результат = Запрос.Выполнить();
	Возврат ?(Результат.Выбрать().Количество(), Истина, Ложь);
КонецФункции // ()

Процедура УдалитьПППоЗаявке(Задача) Экспорт
	
	МассивСтрокСПП = БПСервер.ПроверитьНаличиеПлатежныхДокументовБезНал(Задача, Истина);
	Для каждого ТекДок Из МассивСтрокСПП Цикл
		ТекДокОб = ТекДок.ПолучитьОбъект();
		ТекДокОб.УстановитьПометкуУдаления(Истина);
		ТекДокОб.Записать();
	КонецЦикла; 
	СтруктураСтрокСПП = БПСервер.ПроверитьНаличиеПлатежныхДокументовБезНалЗаявка(Задача, Истина);
	Для каждого ТекДок Из СтруктураСтрокСПП.МассивСтрокБезПП Цикл
		ТекДокОб = ТекДок.ПолучитьОбъект();
		ТекДокОб.УстановитьПометкуУдаления(Истина);
		ТекДокОб.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьИсполнителейЗаявки(Объект, ТекстПредупреждения, НуженВозврат) Экспорт
	
	Если ТипЗнч(Объект.Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") Тогда
		
		Если НЕ Объект.ТочкаМаршрута = БизнесПроцессы.Согласование1.ТочкиМаршрута.Действие1 Тогда
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Д_ЗаявкаНаОплатуЗаявкаБезнал.Источник.Ответственный КАК ИсточникОтветственный
		|ИЗ
		|	Документ.Д_ЗаявкаНаОплату.ЗаявкаБезнал КАК Д_ЗаявкаНаОплатуЗаявкаБезнал
		|ГДЕ
		|	Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	Д_ЗаявкаНаОплатуЗаявкаБезнал.Источник.Ответственный";
		
		Запрос.УстановитьПараметр("Ссылка", Объект.Заявка);
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		ТекБП = Объект.БизнесПроцесс;
		
		КусокТекста1 = "";	
		Для каждого Выборка Из Результат Цикл
			Если ЗначениеЗаполнено(Выборка.ИсточникОтветственный) И НЕ ТекБП.ДопИсполнение.НайтиСтроки(Новый Структура("Исполнитель", Выборка.ИсточникОтветственный)).Количество() Тогда
				КусокТекста1 = КусокТекста1 + "
				| - " + Строка(Выборка.ИсточникОтветственный) + " (нужен в маршруте)" ;
				НуженВозврат = Истина;
			КонецЕсли;	
		КонецЦикла;
		
		КусокТекста2 = "";
		Для каждого ТекСтрока Из ТекБП.ДопИсполнение Цикл
			Если ЗначениеЗаполнено(ТекСтрока.Исполнитель) И НЕ Результат.НайтиСтроки(Новый Структура("ИсточникОтветственный", ТекСтрока.Исполнитель)).Количество() Тогда
				КусокТекста2 = КусокТекста2 + "
				| - " + Строка(ТекСтрока.Исполнитель) + " (не нужен в маршруте)" ;
				НуженВозврат = Истина;
			КонецЕсли;	
		КонецЦикла;
		
		Если ЗначениеЗаполнено(КусокТекста1) ИЛИ ЗначениеЗаполнено(КусокТекста2) Тогда
			ТекстПредупреждения = "В маршруте найдены неверные исполнители: " + КусокТекста1 + КусокТекста2 + "
			| Будет произведено обновление списка исполнителей в маршруте. Продолжить?";
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Объект.Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаАвансовыйОтчет") Тогда
		
		Если НЕ Объект.ТочкаМаршрута = БизнесПроцессы.СогласованиеОбщее.ТочкиМаршрута.Действие1 Тогда
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Д_ЗаявкаНаАвансовыйОтчет.Кассир КАК ИсточникОтветственный
		               |ИЗ
		               |	Документ.Д_ЗаявкаНаАвансовыйОтчет КАК Д_ЗаявкаНаАвансовыйОтчет
		               |ГДЕ
		               |	Д_ЗаявкаНаАвансовыйОтчет.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Объект.Заявка);
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		ТекБП = Объект.БизнесПроцесс;
		
		КусокТекста1 = "";	
		Для каждого Выборка Из Результат Цикл
			Если ЗначениеЗаполнено(Выборка.ИсточникОтветственный) И НЕ ТекБП.ДопИсполнение.НайтиСтроки(Новый Структура("Исполнитель", Выборка.ИсточникОтветственный)).Количество() Тогда
				КусокТекста1 = КусокТекста1 + "
				| - " + Строка(Выборка.ИсточникОтветственный) + " (нужен в маршруте)" ;
				НуженВозврат = Истина;
			КонецЕсли;	
		КонецЦикла;
		
		КусокТекста2 = "";
		Для каждого ТекСтрока Из ТекБП.ДопИсполнение Цикл
			Если ЗначениеЗаполнено(ТекСтрока.Исполнитель) И НЕ Результат.НайтиСтроки(Новый Структура("ИсточникОтветственный", ТекСтрока.Исполнитель)).Количество() Тогда
				КусокТекста2 = КусокТекста2 + "
				| - " + Строка(ТекСтрока.Исполнитель) + " (не нужен в маршруте)" ;
				НуженВозврат = Истина;
			КонецЕсли;	
		КонецЦикла;
		
		Если ЗначениеЗаполнено(КусокТекста1) ИЛИ ЗначениеЗаполнено(КусокТекста2) Тогда
			ТекстПредупреждения = "В маршруте найдены неверные исполнители: " + КусокТекста1 + КусокТекста2 + "
			| Будет произведено обновление списка исполнителей в маршруте. Продолжить?";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

 
#КонецОбласти 

#Область УправлениеУниверсальнойФормойЗадачи

Процедура НастроитьДоступностьКнопок(Задача, ЗаголовокДа, ЗаголовокНет, ИмяКомандыДа, ИмяКомандыНет, ВидимостьРазрешенияРедактирования) Экспорт
	ЗаголовокДа = "";
	ЗаголовокНет = "";
	ИмяКомандыДа = "";
	ИмяКомандыНет = "";
	ВидимостьРазрешенияРедактирования = Ложь;

	
	ЭтоИсполнитель = БПСервер.ТекПользовательИсполнительЗадачи(Задача);
	Объект = БюджетныйНаСервере.ВернутьРеквизиты(Задача, "БизнесПроцесс, ТочкаМаршрута, Заявка, Заявка.Автор, Автор, Ссылка, РольИсполнителя");
	
	Если ТипЗнч(Объект.РольИсполнителя) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		СвойстваРолиИсполнителя = БюджетныйНаСервере.ВернутьРеквизиты(Объект.РольИсполнителя, "ИмяКомандыУтвердительно, ИмяКомандыОтрицательно, НаименованиеЗадачи"); 
	Иначе
		СвойстваРолиИсполнителя = Неопределено;	
	КонецЕсли;

	
	//согласование1, согласование2, согласованиеОбщее
	Если ТипЗнч(Объект.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование1") 
		ИЛИ ТипЗнч(Объект.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование2")
		ИЛИ ТипЗнч(Объект.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование3")
		ИЛИ ТипЗнч(Объект.БизнесПроцесс) = Тип("БизнесПроцессСсылка.СогласованиеОбщее") Тогда
		
		//берем имяКоманд из роли исполнителя. д1 14.11.17
		Если ЗначениеЗаполнено(Задача.РольИсполнителя) И ТипЗнч(Задача.РольИсполнителя) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			ИмяКомандыУтвердительно = Задача.РольИсполнителя.ИмяКомандыУтвердительно;
			ИмяКомандыОтрицательно = Задача.РольИсполнителя.ИмяКомандыОтрицательно;
			ИмяКомандыСЗамечаниями = Задача.РольИсполнителя.ИмяКомандыСЗамечаниями;
		Иначе
			ИмяКомандыУтвердительно = "Согласовано";
			ИмяКомандыОтрицательно = "Не согласовано";
		КонецЕсли;
		//конец имяКоманд
		
		
		Если Найти(НРег(Строка(Объект.ТочкаМаршрута)), "доработать") ИЛИ Найти(НРег(Строка(Объект.ТочкаМаршрута)), "доработка") Тогда //наДоработке
			ЗаголовокДа = ?(ЭтоИсполнитель, "Отправить повторно", "");
			ЗаголовокНет = ?(ЭтоИсполнитель, "Завершить", "");
			ИмяКомандыДа = "ОтправитьИЗакрыть";
			ИмяКомандыНет = ?(ЭтоИсполнитель, "ЗаявкаОплачена", "");
			ВидимостьРазрешенияРедактирования = Истина;
		ИначеЕсли Найти(НРег(Строка(Объект.ТочкаМаршрута)), "согласование") ИЛИ Найти(НРег(Строка(Объект.ТочкаМаршрута)), "утверждение") ИЛИ Найти(НРег(Строка(Объект.ТочкаМаршрута)), "согласовать") Тогда //согласование, утверждение
			ЗаголовокДа = ?(ЭтоИсполнитель, ИмяКомандыУтвердительно, "");
			ЗаголовокНет = ?(ЭтоИсполнитель, ИмяКомандыОтрицательно, "Отменить");
			ИмяКомандыДа = "ЗаявкаСогласована";
			ИмяКомандыНет = ?(ЭтоИсполнитель, "НаДоработку", "ОтменаЗаявки");			
		ИначеЕсли Объект.ТочкаМаршрута = БизнесПроцессы.Согласование1.ТочкиМаршрута.Действие5 Тогда
			ЗаголовокДа = ?(ЭтоИсполнитель, "Принять к оплате", "");
			ЗаголовокНет = ?(ЭтоИсполнитель, "Вернуть на доработку", "Отменить");
			ИмяКомандыДа = "ЗаявкаОплачена";
			ИмяКомандыНет = ?(ЭтоИсполнитель, "НаДоработку", "ОтменаЗаявки");			
		ИначеЕсли Объект.ТочкаМаршрута = БизнесПроцессы.Согласование1.ТочкиМаршрута.Действие3 Тогда
			ЗаголовокДа = ?(ЭтоИсполнитель, "Проверить", "");
			ЗаголовокНет = ?(ЭтоИсполнитель, "Вернуть на доработку", "Отменить");
			ИмяКомандыДа = "ЗаявкаСогласована";
			ИмяКомандыНет = "НаДоработку";
		ИначеЕсли Найти(НРег(Строка(Объект.ТочкаМаршрута)), "исполнение") ИЛИ Найти(НРег(Строка(Объект.ТочкаМаршрута)), "исполнить") Тогда
			ЗаголовокДа = ?(ЭтоИсполнитель, "Выполнить", "");
			ЗаголовокНет = ?(ЭтоИсполнитель, "Вернуть на доработку", "Отменить");
			ИмяКомандыДа = "ЗаявкаОплачена";
			ИмяКомандыНет = ?(ЭтоИсполнитель, "НаДоработку", "ОтменаЗаявки");
			Если ТипЗнч(Объект.Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаФинансирование") Тогда 
				Если Ложь Тогда
					ЗаголовокДа = ?(ЭтоИсполнитель, "Принять к оплате", "");
				Иначе
					ЗаголовокДа = ?(ЭтоИсполнитель, "Принять в реестр", "");				
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Найти(НРег(Строка(Объект.ТочкаМаршрута)), "ознакомление") ИЛИ Найти(НРег(Строка(Объект.ТочкаМаршрута)), "ознакомиться") Тогда
			ЗаголовокДа = ?(ЭтоИсполнитель, "Ознакомиться", "");
			ЗаголовокНет = ?(ЭтоИсполнитель, "Вернуть на доработку", "Отменить");
			ИмяКомандыДа = "ЗаявкаОплачена";
			ИмяКомандыНет = ?(ЭтоИсполнитель, "НаДоработку", "ОтменаЗаявки");			
		КонецЕсли;
	КонецЕсли;
	
	//БПОповещение, БПЗадание
	Если ТипЗнч(Объект.Заявка) = Тип("ДокументСсылка.БП_Оповещение") Тогда
		ЗаголовокДа = ?(ЭтоИсполнитель, "Прочитано", "");
		ЗаголовокНет = "";
		ИмяКомандыДа = "Выполнено";
		ИмяКомандыНет = "Отказаться";
	КонецЕсли;
	
	Если ТипЗнч(Объект.Заявка) = Тип("ДокументСсылка.БП_Поручение") Тогда
		ЗаголовокДа = ?(ЭтоИсполнитель, "Выполнено", "");
		ЗаголовокНет = "Отменить";
		ИмяКомандыДа = "Выполнено";
		ИмяКомандыНет = "";
		
		ТекМассивПользователей = ПараметрыСеанса.ДоступныеПользователи;
		Если НЕ ТекМассивПользователей.Найти(Объект.ЗаявкаАвтор) = Неопределено Тогда
			Если НЕ (не ТекМассивПользователей.Найти(Объект.Автор) = Неопределено И БПСервер.ТекПользовательИсполнительЗадачи(Объект.Ссылка)) Тогда //в случае если автор сам ставит себе задачи
				ЗаголовокДа = ?(ЭтоИсполнитель, "Проверено", "");
				ЗаголовокНет = "";
				ИмяКомандыДа = "ЗаявкаСогласована";
				ИмяКомандыНет = "НаДоработку";
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Заявка) Тогда
		ЗаголовокДа = ?(ЭтоИсполнитель, "Выполнено", "");
		ЗаголовокНет = "";
		ИмяКомандыДа = "Выполнено";
		ИмяКомандыНет = "";
	КонецЕсли;
	
	//заявки в ТехПоддержку
	Если ТипЗнч(Объект.БизнесПроцесс) = Тип("БизнесПроцессСсылка.ЗаявкиАдминистратору") Тогда 
		Если Объект.ТочкаМаршрута = БизнесПроцессы.ЗаявкиАдминистратору.ТочкиМаршрута.Действие3 Тогда
			//Элементы.СрокОкончания.Доступность = Истина;	
			ЗаголовокДа = ?(ЭтоИсполнитель, "Принято", "");
			ЗаголовокНет = ?(ЭтоИсполнитель, "Вернуть на доработку", "Отменить");
			ИмяКомандыДа = "ЗаявкаОплачена";
			ИмяКомандыНет = "НаДоработку";
		ИначеЕсли Объект.ТочкаМаршрута = БизнесПроцессы.ЗаявкиАдминистратору.ТочкиМаршрута.Действие4 Тогда
			//Элементы.СрокОкончания.Доступность = Истина;	
			ЗаголовокДа = ?(ЭтоИсполнитель, "Выполнено", "");
			ЗаголовокНет = ?(ЭтоИсполнитель, "", "Отменить");
			ИмяКомандыДа = "ЗаявкаОплачена";
			ИмяКомандыНет = "НаДоработку";
		ИначеЕсли Объект.ТочкаМаршрута = БизнесПроцессы.ЗаявкиАдминистратору.ТочкиМаршрута.Действие6 Тогда
			//Элементы.СрокОкончания.Доступность = Истина;	
			ЗаголовокДа = ?(ЭтоИсполнитель, "Проверено", "");
			ЗаголовокНет = ?(ЭтоИсполнитель, "Вернуть на доработку", "Отменить");
			ИмяКомандыДа = "ЗаявкаОплачена";
			ИмяКомандыНет = "НаДоработку";
		ИначеЕсли Объект.ТочкаМаршрута = БизнесПроцессы.ЗаявкиАдминистратору.ТочкиМаршрута.Действие5 Тогда
			//Элементы.СрокОкончания.Доступность = Истина;	
			ЗаголовокДа = ?(ЭтоИсполнитель, "Ознакомиться", "");
			ЗаголовокНет = ?(ЭтоИсполнитель, "Вернуть на доработку", "Отменить");
			ИмяКомандыДа = "ЗаявкаОплачена";
			ИмяКомандыНет = "НаДоработку";
		ИначеЕсли Объект.ТочкаМаршрута = БизнесПроцессы.ЗаявкиАдминистратору.ТочкиМаршрута.Действие1 Тогда //наДоработке
			ЗаголовокДа = ?(ЭтоИсполнитель, "Отправить повторно", "");
			ЗаголовокНет = ?(ЭтоИсполнитель, "Завершить", "");
			ИмяКомандыДа = "ЗаявкаОплачена";
			ИмяКомандыНет = "Завершить";
			ВидимостьРазрешенияРедактирования = Истина;
		ИначеЕсли Объект.ТочкаМаршрута = БизнесПроцессы.ЗаявкиАдминистратору.ТочкиМаршрута.Действие2 Тогда //согласование
			ЗаголовокДа = ?(ЭтоИсполнитель, "Согласовано", "");
			ЗаголовокНет = ?(ЭтоИсполнитель, "Вернуть на доработку", "");
			ИмяКомандыДа = "ЗаявкаОплачена";
			ИмяКомандыНет = "НаДоработку";
		КонецЕсли;
	КонецЕсли;
	
	//Если НЕ ЗаголовокДа = ЗаголовокКнопкиДа Тогда
	ЗаголовокДа = ЗаголовокДа;
	ЗаголовокНет = ЗаголовокНет;
	
	Если Не СвойстваРолиИсполнителя = Неопределено Тогда
		Если ЗначениеЗаполнено(СвойстваРолиИсполнителя.ИмяКомандыУтвердительно) Тогда
			ЗаголовокДа = ?(ЭтоИсполнитель, СвойстваРолиИсполнителя.ИмяКомандыУтвердительно, "");
		КонецЕсли;
		Если ЗначениеЗаполнено(СвойстваРолиИсполнителя.ИмяКомандыОтрицательно) Тогда
			ЗаголовокНет = ?(ЭтоИсполнитель, СвойстваРолиИсполнителя.ИмяКомандыОтрицательно, "");
		КонецЕсли;
	КонецЕсли;
	//Элементы.РазрещитьРедактировать.Видимость = ВидимостьРазрешенияРедактирования И Объект.БизнесПроцесс.ОснованиеЗаблокирован;
	
	
	
КонецПроцедуры

#КонецОбласти
	
#Область РаботаСХронометражем

Процедура СтартоватьХронометражПоПредмету(ТекДата, Предмет, ДанныеПредмета, ТекИсполнитель = Неопределено) Экспорт
	
	//стартуем хронометраж
	СтруктураДанныхПредмета = Новый Структура;
	Если ТипЗнч(ДанныеПредмета) = Тип("ДокументСсылка.Д_ОбращенияВТехПоддержку") Тогда
		СтруктураДанныхПредмета.Вставить("Заголовок", ДанныеПредмета.Примечания);		
		СтруктураДанныхПредмета.Вставить("ИнициаторРабот", ДанныеПредмета.Автор);
	ИначеЕсли ТипЗнч(ДанныеПредмета) = Тип("РегистрСведенийЗапись.Ч_СообщенияЧата") Тогда
		СтруктураДанныхПредмета.Вставить("Заголовок", ДанныеПредмета.ОписаниеИнцидента);		
		СтруктураДанныхПредмета.Вставить("ИнициаторРабот", ДанныеПредмета.Автор);
	ИначеЕсли ТипЗнч(ДанныеПредмета) = Тип("ДокументСсылка.БП_Поручение") Тогда
		СтруктураДанныхПредмета.Вставить("Заголовок", ДанныеПредмета.Тема);		
		СтруктураДанныхПредмета.Вставить("ИнициаторРабот", ДанныеПредмета.Автор);
		СтруктураДанныхПредмета.Вставить("Содержание", ДанныеПредмета.Описание);
		СтруктураДанныхПредмета.Вставить("СрокОкончанияРабот", ДанныеПредмета.ОбщийСрокИсполнения);
	ИначеЕсли ТипЗнч(ДанныеПредмета) = Тип("ЗадачаСсылка.Задача") Тогда
		СтруктураДанныхПредмета.Вставить("Заголовок", ДанныеПредмета.Наименование);		
		СтруктураДанныхПредмета.Вставить("ИнициаторРабот", ДанныеПредмета.Автор);
		СтруктураДанныхПредмета.Вставить("Содержание", ДанныеПредмета.Описание);
		СтруктураДанныхПредмета.Вставить("СрокОкончанияРабот", ДанныеПредмета.СрокВыполнения);
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.сабХронометраж.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ТекДата);
	НаборЗаписей.Отбор.Предмет.Установить(Предмет);
	НаборЗаписей.Прочитать();
	Если НЕ НаборЗаписей.Количество() Тогда
		НоваяЗапись = НаборЗаписей.Добавить();
		Если НЕ ДанныеПредмета = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ДанныеПредмета);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураДанныхПредмета);
		НоваяЗапись.ДатаОкончанияРабот = Дата('00010101'); // не стартуем сразу хронометраж на первой записи. первый старт только вручную
		НоваяЗапись.ДатаНачалаРабот = ТекДата;
		НоваяЗапись.Предмет = Предмет;
		НоваяЗапись.Исполнитель = ?(ЗначениеЗаполнено(ТекИсполнитель), ТекИсполнитель, ПараметрыСеанса.ТекущийПользователь);
		НоваяЗапись.Период = ТекДата;
	КонецЕсли;
	НаборЗаписей.Записать();
	//конец старта хронометража
	
КонецПроцедуры

Процедура ПаузаСтартХронометраж(Период, Предмет, Команда, ДанныеПредмета = Неопределено) Экспорт
	
	НаборЗаписей = РегистрыСведений.сабХронометраж.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Период);
	НаборЗаписей.Отбор.Предмет.Установить(Предмет);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() Тогда
		ТекЗапись = НаборЗаписей.Получить(0);
		ТекЗапись.ДатаОкончанияРабот = ТекущаяДата();	
	КонецЕсли;
	Если Команда = "Пауза" Тогда //останавливаем текзапись
		Если Не ДанныеПредмета = Неопределено И НЕ ЗначениеЗаполнено(ТекЗапись.Заголовок) Тогда
			ЗаполнитьЗначенияСвойств(ТекЗапись, ДанныеПредмета);
		КонецЕсли;	    
		НаборЗаписей.Записать();
	КонецЕсли;
	
	Если Команда = "Старт" Тогда //инициируем новую запись
		БПСервер.СтартоватьХронометражПоПредмету(ТекущаяДата(), Предмет, ?(ТекЗапись = Неопределено, Предмет, ТекЗапись));
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьТекущуюЗаписьХронометража(Период, Предмет, СтруктураДанныхКЗамене) Экспорт

	ТЧПоследнихЗаписей = РегистрыСведений.сабХронометраж.СрезПоследних(Период, Новый Структура("Предмет", Предмет));
	Если ТЧПоследнихЗаписей.Количество() Тогда
		НаборЗаписей = РегистрыСведений.сабХронометраж.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ТЧПоследнихЗаписей[0].Период);
		НаборЗаписей.Отбор.Предмет.Установить(Предмет);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() Тогда
			ТекЗапись = НаборЗаписей.Получить(0);
			ЗаполнитьЗначенияСвойств(ТекЗапись, СтруктураДанныхКЗамене); 
		КонецЕсли;
		НаборЗаписей.Записать();
	КонецЕсли;

КонецПроцедуры

Процедура ЗавершитьХронометражПоПредмету(ТекДата, Предмет) Экспорт
	
	ТЧПоследнихЗаписей = РегистрыСведений.сабХронометраж.СрезПоследних(ТекДата, Новый Структура("Предмет", Предмет));
	Если ТЧПоследнихЗаписей.Количество() Тогда
		Если ТЧПоследнихЗаписей[0].Завершено Тогда
			Возврат;		
		КонецЕсли;
		НаборЗаписей = РегистрыСведений.сабХронометраж.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ТЧПоследнихЗаписей[0].Период);
		НаборЗаписей.Отбор.Предмет.Установить(Предмет);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() Тогда
			ТекЗапись = НаборЗаписей.Получить(0);
			Если ТекЗапись.ДатаОкончанияРабот = Дата('00010101') Тогда
				ТекЗапись.ДатаОкончанияРабот = ТекДата;
			КонецЕсли;
			ТекЗапись.Завершено = Истина;
		КонецЕсли;
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДоступностьФайлов(МассивЗаписей, Источник)
	
	//поучаем прикрепленные файлы
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПрикрепленныеОбъекты.Объект
	               |ИЗ
	               |	РегистрСведений.ПрикрепленныеОбъекты КАК ПрикрепленныеОбъекты
	               |ГДЕ
	               |	ПрикрепленныеОбъекты.Владелец = &Владелец
	               |	И ТИПЗНАЧЕНИЯ(ПрикрепленныеОбъекты.Объект) = ТИП(Справочник.Файлы)";
	
	Запрос.УстановитьПараметр("Владелец", Источник.Заявка);
	
	Результат = Запрос.Выполнить();
	ПрикрепленныеФайлы = Результат.Выгрузить().ВыгрузитьКолонку("Объект");
	
	Если ТипЗнч(Источник.Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") Тогда
		
		Для каждого ТекСтрока Из Источник.Заявка.ЗаявкаБезнал Цикл
			
			Если ЗначениеЗаполнено(ТекСтрока.Приложение) Тогда
				ПрикрепленныеФайлы.Добавить(ТекСтрока.Приложение);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекСтрока.ЗаявкаНаФинансирование) Тогда
				ФайлыЗаявкиНаФинансирование = ПолучитьПрикрепленныеФайлыЗаявкиНаФинансирование(ТекСтрока.ЗаявкаНаФинансирование);
				
				Для Каждого ФайлЗаякиНаФин Из ФайлыЗаявкиНаФинансирование Цикл
					ПрикрепленныеФайлы.Добавить(ФайлЗаякиНаФин);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ПрикрепленныеФайлы.Количество() Тогда
		Возврат; //нет прикрепленных файлов	
	КонецЕсли;
	
	НачатьТранзакцию();
	УстановитьПривилегированныйРежим(Истина);
	ГруппаПрикрепленныхФайлов = Справочники.ПапкиФайлов.НайтиПоНаименованию("Прикрепленные файлы", Истина);
	//создаем папку файлов по представлению документа-заявки
	ГруппаФайлов = Справочники.ПапкиФайлов.НайтиПоНаименованию(Строка(Источник.Заявка), Истина);
	
	Если Не ЗначениеЗаполнено(ГруппаФайлов) Тогда
	    ГруппаФайлов = Справочники.ПапкиФайлов.СоздатьЭлемент();	
		ГруппаФайлов.Наименование = Строка(Источник.Заявка);
		ГруппаФайлов.Родитель = ГруппаПрикрепленныхФайлов;
		ГруппаФайлов.Записать();
		ГруппаФайлов = ГруппаФайлов.Ссылка;
		
		//удаляем наследовательность
		НаборЗаписей = РегистрыСведений.НаследованиеНастроекПравОбъектов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(ГруппаФайлов);
		НоваяЗаписб = НаборЗаписей.Добавить();
		НоваяЗаписб.Объект = ГруппаФайлов;
		НоваяЗаписб.Родитель = ГруппаФайлов;
		НоваяЗаписб.Наследовать = Ложь;
		НаборЗаписей.Записать();
	КонецЕсли;
	
	//добавляем првав участников
	
	МассивГруппФайлов = Новый Массив;
	МассивГруппФайлов.Добавить(ГруппаФайлов); //добавляем новую папкм
	Для каждого ТекФайл Из ПрикрепленныеФайлы Цикл
		Если ТипЗнч(ТекФайл) = Тип("СправочникСсылка.Файлы") И ЗначениеЗаполнено(ТекФайл.ВладелецФайла) И МассивГруппФайлов.Найти(ТекФайл.ВладелецФайла) = Неопределено И ТекФайл.ВладелецФайла.Родитель = ГруппаПрикрепленныхФайлов Тогда
			МассивГруппФайлов.Добавить(ТекФайл.ВладелецФайла); //добавляем текущие папки, в которых находятся файлы
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого ТекГруппаФайлов Из МассивГруппФайлов Цикл
		
		ГруппыПравСтруктура = РегистрыСведений.НастройкиПравОбъектов.Прочитать(ТекГруппаФайлов);
		ГруппыПрав = ГруппыПравСтруктура.Настройки;
		Если ТекГруппаФайлов = ГруппаФайлов Тогда
			ГруппыПрав.Очистить();
		КонецЕсли;
		
		Для каждого ТекОтбор Из МассивЗаписей Цикл
			
			Если (ТекОтбор.ИмяРеквизита = "Пользователи" ИЛИ ТекОтбор.ИмяРеквизита = "ГруппыПользователей") И ЗначениеЗаполнено(ТекОтбор.Значение) Тогда
				ЗапрещеноРедактироватьДокумент = РегистрыСведений.ПрикрепленныеОбъекты.ПроверитьВладельца(Источник.Заявка);
				
				Если НЕ ЗапрещеноРедактироватьДокумент И ТекОтбор.Признак = "Авторство" Тогда
					НайденныеСтрокиПрав = ГруппыПрав.НайтиСтроки(Новый Структура("Пользователь", ТекОтбор.Значение));
					
					Если НайденныеСтрокиПрав.Количество() Тогда
						НоваяСтрока = НайденныеСтрокиПрав[0];
					Иначе
						НоваяСтрока = ГруппыПрав.Добавить();				
					КонецЕсли;
					
					НоваяСтрока.ВладелецНастройки = ТекГруппаФайлов;
					НоваяСтрока.Пользователь = ТекОтбор.Значение;
					НоваяСтрока.ДобавлениеФайлов = Истина;
					НоваяСтрока.ИзменениеФайлов = Истина;
					НоваяСтрока.ПометкаУдаленияФайлов = Истина;
					НоваяСтрока.Чтение = Истина;
				Иначе
					
					Если НЕ ГруппыПрав.НайтиСтроки(Новый Структура("Пользователь", ТекОтбор.Значение)).Количество() Тогда
						НоваяСтрока = ГруппыПрав.Добавить();
						НоваяСтрока.ВладелецНастройки = ТекГруппаФайлов;
						НоваяСтрока.Пользователь = ТекОтбор.Значение;
						НоваяСтрока.ДобавлениеФайлов = Истина;
						НоваяСтрока.Чтение = Истина;
					КонецЕсли;	
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		РегистрыСведений.НастройкиПравОбъектов.Записать(ТекГруппаФайлов, ГруппыПрав, Ложь);
	КонецЦикла; 

	//расширяем права на файл прикрепленные файлы в новую папку
	Для каждого ТекФайл Из ПрикрепленныеФайлы Цикл
		
		Если ТипЗнч(ТекФайл) = Тип("СправочникСсылка.Файлы") Тогда
			Об = ТекФайл.ПолучитьОбъект();
			
			Если (НЕ ЗначениеЗаполнено(Об.ВладелецФайла) ИЛИ НЕ Об.ВладелецФайла.Родитель = ГруппаПрикрепленныхФайлов) И НЕ Об.ВладелецФайла = ГруппаФайлов Тогда //только если новый файл без группы
				Об.ВладелецФайла = ГруппаФайлов;
				Об.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла; 
	
	УстановитьПривилегированныйРежим(Ложь);	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

#КонецОбласти

 
