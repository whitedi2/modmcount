Функция ПроверкаКассира(КодСчета) Экспорт 
	//СписокСчетов = Новый СписокЗначений;
	//Счета = Константы.СчетаКассира.Получить();
	//Для к = 1 По СтрЧислоСтрок(Счета) Цикл
	//	ТекКодСчета = СокрЛП(СтрПолучитьСтроку(Счета,к));
	//	СписокСчетов.Добавить(ТекКодСчета);
	//КонецЦикла;
	//Если СписокСчетов.НайтиПоЗначению(КодСчета) = Неопределено Тогда
	//	Возврат Ложь;
	//Иначе
		Возврат Истина;
	//КонецЕсли;
КонецФункции

Функция ВалютныйСчет(Счет) Экспорт
	Возврат Счет.Валютный;
КонецФункции // ()


Функция ДенежныйСчет(Счет) Экспорт
	//МассивДенСчетов = Новый Массив;
	//МассивДенСчетов.Добавить(ПланыСчетов.Казна.Касса);
	//МассивДенСчетов.Добавить(ПланыСчетов.Казна.КассаВалюта);
	//Если Не ОбщегоНазначенияПовтИсп.ЭтоБазаСпирт() Тогда
	//	МассивДенСчетов.Добавить(ПланыСчетов.Казна.КорреспондентскийСчет);
	//	МассивДенСчетов.Добавить(ПланыСчетов.Казна.КорреспондентскийСчетВалюта);
	//	МассивДенСчетов.Добавить(ПланыСчетов.Казна.ДепозитныйСчет);
	//	МассивДенСчетов.Добавить(ПланыСчетов.Казна.ДепозитныйСчетВалюта);
	//КонецЕсли;
	Возврат Ложь;
КонецФункции // ()

//считаем курс для казны
Функция СреднийКурсКазна(ДатаОст, Счет, Валюта, Предприятие, Подразделение, Источник = Неопределено, ВидОстатка = "Курс") Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КазнаОстатки.ВалютнаяСуммаОстаток = 0
	|			ТОГДА 0
	|		ИНАЧЕ КазнаОстатки.СуммаОстаток / КазнаОстатки.ВалютнаяСуммаОстаток
	|	КОНЕЦ КАК Курс,
	|	СУММА(КазнаОстатки.ВалютнаяСуммаОстаток) КАК ВалютнаяСуммаОстаток,
	|	СУММА(КазнаОстатки.СуммаОстаток) КАК СуммаОстаток
	|ИЗ
	|	РегистрБухгалтерии.Казна.Остатки(
	|			&ДатаОст,
	|			Счет = &Счет,
	|			,
	|			Предприятия = &Предприятие
	|				И ВЫБОР
	|					КОГДА &УчетПоПодразделениям = ИСТИНА
	|						ТОГДА Подразделение = &Подразделение
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|				И Валюта = &Валюта
	|				И ВЫБОР
	|					КОГДА &Источник = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Субконто1 = &Источник
	|				КОНЕЦ) КАК КазнаОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА КазнаОстатки.ВалютнаяСуммаОстаток = 0
	|			ТОГДА 0
	|		ИНАЧЕ КазнаОстатки.СуммаОстаток / КазнаОстатки.ВалютнаяСуммаОстаток
	|	КОНЕЦ";
	
	Запрос.УстановитьПараметр("ДатаОст", ДатаОст);
	Запрос.УстановитьПараметр("Счет", Счет);
	Запрос.УстановитьПараметр("Валюта", Валюта);
	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	Запрос.УстановитьПараметр("УчетПоПодразделениям", Предприятие.УчетПоПодразделениям И Счет.УчетПоПодразделениям);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Источник", Источник);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		СтруктураОстатка = Новый Структура("Курс, ВалютнаяСумма, Сумма", Выборка.Курс, Выборка.ВалютнаяСуммаОстаток, Выборка.СуммаОстаток);
		Возврат СтруктураОстатка;
	Иначе
		Возврат Новый Структура("Курс, ВалютнаяСумма, Сумма", 0, 0, 0);
	КонецЕсли;
	
	
КонецФункции // ()



Процедура УстановкаПодчиненныхДокументов(Движения, Ссылка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УЧ_ДвижениеДС.Ссылка КАК Регистратор,
	               |	УЧ_ДвижениеДС.НомерСтроки,
	               |	УЧ_ДвижениеДС.Предприятие,
	               |	УЧ_ДвижениеДС.ГУИДОснования
	               |ИЗ
	               |	Документ.УЧ_ДвижениеДС КАК УЧ_ДвижениеДС
	               |ГДЕ
	               |	УЧ_ДвижениеДС.ДокОснование = &ДокОснование";
	
	Запрос.УстановитьПараметр("ДокОснование", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	
	ИндексСтроки = 1;
	Для каждого ТекЗапись Из Движения.Казна Цикл
		СтруктураПоискаПоГУИД = Новый Структура("ГУИДОснования", ТекЗапись.ГУИДСтроки);
		Выборка.Сбросить();
		НашлиПоГУИД = Ложь;
		Пока Выборка.НайтиСледующий(СтруктураПоискаПоГУИД) Цикл
			Если ТекЗапись.СчетДт = ПланыСчетов.Казна.ТекущиеСчета Тогда
				Если ТекЗапись.СубконтоДт.Предприятия = Выборка.Предприятие Тогда
					ТекЗапись.ПодчиненныйДокументДт = Выборка.Регистратор;				
				КонецЕсли;
			КонецЕсли;
			Если ТекЗапись.СчетКт = ПланыСчетов.Казна.ТекущиеСчета Тогда
				Если ТекЗапись.СубконтоКт.Предприятия = Выборка.Предприятие Тогда
					ТекЗапись.ПодчиненныйДокументКт = Выборка.Регистратор;				
				КонецЕсли;
			КонецЕсли;
			НашлиПоГУИД = Истина;
		КонецЦикла;
		
		//если не нашли по ГУИД ищем по номеру строки
		Если Не НашлиПоГУИД Тогда
			СтруктураПоиска = Новый Структура("НомерСтроки", ИндексСтроки); 
			Выборка.Сбросить();
			Пока Выборка.НайтиСледующий(СтруктураПоиска) Цикл
				Если ТекЗапись.СчетДт = ПланыСчетов.Казна.ТекущиеСчета Тогда
					Если ТекЗапись.СубконтоДт.Предприятия = Выборка.Предприятие Тогда
						ТекЗапись.ПодчиненныйДокументДт = Выборка.Регистратор;				
					КонецЕсли;
				КонецЕсли;
				Если ТекЗапись.СчетКт = ПланыСчетов.Казна.ТекущиеСчета Тогда
					Если ТекЗапись.СубконтоКт.Предприятия = Выборка.Предприятие Тогда
						ТекЗапись.ПодчиненныйДокументКт = Выборка.Регистратор;				
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ИндексСтроки = ИндексСтроки + 1;	
	КонецЦикла;
КонецПроцедуры

Функция ЕстьПодчиненныеДоки(ДокОснование, ГУИДСтроки = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ДокОснование) Тогда
		
		Если НЕ ГУИДСтроки = Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	УЧ_ДвижениеДС.Ссылка
			|ИЗ
			|	Документ.УЧ_ДвижениеДС КАК УЧ_ДвижениеДС
			|ГДЕ
			|	УЧ_ДвижениеДС.ДокОснование = &ДокОснование
			|	И НЕ УЧ_ДвижениеДС.ПометкаУдаления
			|	И УЧ_ДвижениеДС.ГУИДОснования = &ГУИДОснования";
			Запрос.УстановитьПараметр("ДокОснование", ДокОснование);
			Запрос.УстановитьПараметр("ГУИДОснования", ГУИДСтроки);
		Иначе
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	УЧ_ДвижениеДС.Ссылка
			|ИЗ
			|	Документ.УЧ_ДвижениеДС КАК УЧ_ДвижениеДС
			|ГДЕ
			|	УЧ_ДвижениеДС.ДокОснование = &ДокОснование
			|	И НЕ УЧ_ДвижениеДС.ПометкаУдаления";
			Запрос.УстановитьПараметр("ДокОснование", ДокОснование);
		КонецЕсли;
		
		Результат = Запрос.Выполнить();
		
		Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	КонецЕсли;
	
	Возврат Новый Массив;
	
КонецФункции // ()

Процедура УдалитьПодчиненныйДокумент(ТекДок) Экспорт
	
	ТекДокОб = ТекДок.ПолучитьОбъект();
	Сообщить("Документ " + Строка(ТекДок) + " помечен на удаление.");
	ТекДокОб.УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры

Процедура УстановитьGUIDПриКопированииПриКопировании(Источник, ОбъектКопирования) Экспорт
	
	Для Каждого ТабЧастьМетаданные ИЗ Метаданные.НайтиПоТипу(ТипЗнч(Источник)).ТабличныеЧасти Цикл
		Для Каждого СтрокаТЧ ИЗ Источник[ТабЧастьМетаданные.Имя] Цикл
			Попытка
				СтрокаТЧ.ГУИДСтроки = Новый УникальныйИдентификатор;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОповеститьОбИзмененииДокументаПередЗаписьюПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТабЧастьМетаданные ИЗ Метаданные.НайтиПоТипу(ТипЗнч(Источник)).ТабличныеЧасти Цикл
		ТаблицаБыло = Источник.Ссылка[ТабЧастьМетаданные.Имя].Выгрузить();	
		ТаблицаСтало = Источник[ТабЧастьМетаданные.Имя].Выгрузить();
	КонецЦикла;	
	
	КолонкиТаблицы = ТаблицаБыло.Колонки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КазнаДвиженияССубконто.ГУИДСтроки,
	|	КазнаДвиженияССубконто.ПодчиненныйДокументДт,
	|	КазнаДвиженияССубконто.ПодчиненныйДокументКт
	|ПОМЕСТИТЬ ВТ_ПодчиненныеДокументы
	|ИЗ
	|	РегистрБухгалтерии.Казна.ДвиженияССубконто(, , Регистратор = &Регистратор, , ) КАК КазнаДвиженияССубконто
	|ГДЕ
	|	(КазнаДвиженияССубконто.ПодчиненныйДокументДт <> ЗНАЧЕНИЕ(Документ.Уч_ДвижениеДС.ПустаяСсылка)
	|			ИЛИ КазнаДвиженияССубконто.ПодчиненныйДокументКт <> ЗНАЧЕНИЕ(Документ.Уч_ДвижениеДС.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВТ_ПодчиненныеДокументы.ПодчиненныйДокументДт.Автор, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Автор,
	|	ВТ_ПодчиненныеДокументы.ГУИДСтроки
	|ИЗ
	|	ВТ_ПодчиненныеДокументы КАК ВТ_ПодчиненныеДокументы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВТ_ПодчиненныеДокументы.ПодчиненныйДокументКт.Автор, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)),
	|	ВТ_ПодчиненныеДокументы.ГУИДСтроки
	|ИЗ
	|	ВТ_ПодчиненныеДокументы КАК ВТ_ПодчиненныеДокументы
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ПодчиненныеДокументы.ГУИДСтроки,
	|	ЕСТЬNULL(ВТ_ПодчиненныеДокументы.ПодчиненныйДокументКт.Автор, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|ИТОГИ ПО
	|	Автор";
	Запрос.УстановитьПараметр("Регистратор", Источник.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Автор = Справочники.Пользователи.ПустаяСсылка() Тогда
			Продолжить;
		КонецЕсли;
		Если сабОбщегоНазначения.ПолучитьЗначениеСвойства(Выборка.Автор, "Не оповещать об изменениях в документах казны") = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		Сообщение = "";
		ВыборкаДетальныеЗаписи = Выборка.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтрокаБыло = ТаблицаБыло.Найти(ВыборкаДетальныеЗаписи.ГУИДСтроки, "ГУИДСтроки");
			СтрокаСтало = ТаблицаСтало.Найти(ВыборкаДетальныеЗаписи.ГУИДСтроки, "ГУИДСтроки");
			Если СтрокаСтало = Неопределено Тогда                                                   
				Сообщение = Сообщение + ?(Сообщение = "", "%", " ") + "была удалена строка № " + СтрокаБыло.НомерСтроки + "
				|";
			Иначе
				Для Каждого КолонкаТаблицы Из КолонкиТаблицы Цикл
					Если СтрокаБыло[КолонкаТаблицы.Имя] <> СтрокаСтало[КолонкаТаблицы.Имя] Тогда
						Сообщение = Сообщение + ?(Сообщение = "", "%", " ") + "в строке № " + СтрокаБыло.НомерСтроки + " реквизит " + КолонкаТаблицы.Заголовок + " был изменен " + ПараметрыСеанса.ТекущийПользователь + " с " + СтрокаБыло[КолонкаТаблицы.Имя] + " на " + СтрокаСтало[КолонкаТаблицы.Имя] + "
						|";
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;	
		КонецЦикла;
		
		Если Сообщение <> "" Тогда
			НовоеСообщение = СтрЗаменить(Сообщение, "%", "В документе " + Источник.Ссылка + " ");
			БПСервер.СоздатьОповещение(Выборка.Автор, НовоеСообщение, "Изменения в документах по казне!"); 
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура КурсовыеРазницыКазнаОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт     
	 //переопределяемая процедура	
КонецПроцедуры

Процедура КурсовыеРазницыВалютаОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	 //переопределяемая процедура	
КонецПроцедуры

Функция ПолучитьОстатокПоИсточникуСоСчета98(ДатаПолучения, Источник) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(КазнаОстатки.СуммаОстатокКт, 0) - ЕСТЬNULL(КазнаОстатки.СуммаОстатокДт, 0) КАК СуммаОстаток
	               |ИЗ
	               |	РегистрБухгалтерии.Казна.Остатки(&ДатаОст, Счет = &Счет, , Субконто2 = &Источник) КАК КазнаОстатки";
	Запрос.УстановитьПараметр("ДатаОст", ДатаПолучения);
	Запрос.УстановитьПараметр("Счет", ПланыСчетов.Казна._980_02);
	Запрос.УстановитьПараметр("Источник", Источник.Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		СуммаОст = Выборка.СуммаОстаток
	Иначе
		СуммаОст = 0
	КонецЕсли;
	
	Возврат СуммаОст;
	
КонецФункции

Процедура СформироватьДвиженияПоПереоценке98Счета(ТекущийДокумент, КурсЦБ, СрКурс, СрВалютнаяСумма, СтруктураРеквизитовТЧ = Неопределено, НулевойВалютныйОстаток = Ложь) Экспорт
	 //переопределяемая процедура	
КонецПроцедуры

Процедура СформироватьДвиженияСписанияС98Счета(ТекущийДокумент, ОстатокПоСчету98, СрВалютнаяСумма, СтруктураРеквизитовТЧ = Неопределено, СоздатьДвижениеПриходаПоРегистру98 = Ложь, ДвиженияПоТабличнойЧасти = Ложь) Экспорт
	 //переопределяемая процедура	
КонецПроцедуры

Процедура СформироватьДвиженияПоПереоценке91Счета(ТекущийДокумент, ЛокальныйКурс, СрКурс, СрВалютнаяСумма, ОстатокПоСчету, СтруктураРеквизитовТЧ = Неопределено) Экспорт
	 //переопределяемая процедура	
КонецПроцедуры

Функция ПолучитьСуммуПереоценки91(ТекущийДокумент, ЛокальныйКурс, СрКурс, СрВалютнаяСумма, ОстатокПоСчету, СтруктураРеквизитовТЧ = Неопределено) Экспорт
		
	Если БюджетныйНаСервере.ПринадлежитПодсистеме(ТекущийДокумент.Ссылка, "сабУправленческийУчет") Тогда
		ТекВалютнаяСумма = ?(СтруктураРеквизитовТЧ = Неопределено, ТекущийДокумент.ВалютнаяСумма1, СтруктураРеквизитовТЧ.ВалютнаяСумма);
		ТекКурсДокумента = ?(СтруктураРеквизитовТЧ = Неопределено, ТекущийДокумент.Курс1, СтруктураРеквизитовТЧ.Курс);
	Иначе
		ТекВалютнаяСумма = ?(СтруктураРеквизитовТЧ = Неопределено, ТекущийДокумент.ВалютнаяСумма, СтруктураРеквизитовТЧ.ВалютнаяСумма);
		ТекКурсДокумента = ?(СтруктураРеквизитовТЧ = Неопределено, ТекущийДокумент.Курс, СтруктураРеквизитовТЧ.Курс);
	КонецЕсли;

	СуммаПереоценки91 = (ТекКурсДокумента - Окр(СрКурс, 5)) * ТекВалютнаяСумма;
	
	Если СуммаПереоценки91 > ОстатокПоСчету Тогда
		СуммаПереоценки91 = ?(ОстатокПоСчету < 0, -ОстатокПоСчету, ОстатокПоСчету);
	КонецЕсли;
	
	Возврат СуммаПереоценки91;
	
КонецФункции

Функция СчетДляТекущейПереоценки(ТекущийСчет) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Учетный.Ссылка
	               |ИЗ
	               |	ПланСчетов.Учетный КАК Учетный
	               |ГДЕ
	               |	Учетный.Ссылка = &ТекущийСчет
	               |	И (Учетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Учетный.Касса))
	               |			ИЛИ Учетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Учетный.РасчетныйСчет)))";
	Запрос.УстановитьПараметр("ТекущийСчет", ТекущийСчет);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Возврат Выборка.Следующий();
	
КонецФункции
