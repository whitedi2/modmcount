//запускается при открытии формы документа
Процедура ДействияПриОткрытииФормыДокумента(Форма) Экспорт
		
	//установка видимости подразделения
	сабОбщегоНазначенияКлиентСервер.СкрытьПодразделения(Форма);
	сабОбщегоНазначенияКлиентСервер.СкрытьОрганизацию(Форма);
		
КонецПроцедуры

Функция ВыбратьФайлExcel() Экспорт 
	Режим = РежимДиалогаВыбораФайла.Открытие;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	
	ДиалогОткрытияФайла.ПолноеИмяФайла 	   = "";
	Фильтр = "Файл Excel |*.xls?";
	ДиалогОткрытияФайла.Фильтр 			   = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок 		   = "Выберите файл";
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ПутьКФайлу = ДиалогОткрытияФайла.ПолноеИмяФайла;
	КонецЕсли;
	Возврат ПутьКФайлу;
КонецФункции // ВыбратьФайл()

//запускается при открытии формы документа
Функция ПриОткрытииДокумента(Форма, Объект, ТекФорма, НеСкрыватьПодразделения = Истина , ПроверятьДоступность = Истина) Экспорт
	//видимость реквизита "предприятие" на форме
	Попытка
		МассивПП = БюджетныйНаСервере.ПолучитьПредприятия();
		Если МассивПП.Количество() = 1 Тогда
			Если НЕ ЗначениеЗаполнено(Объект.Предприятие) Тогда
				Объект.Предприятие = МассивПП.Получить(0);
			КонецЕсли;	
			Форма.Предприятие.Доступность = 0;
			//Форма.Предприятие.Видимость = 0;
		КонецЕсли;	
	Исключение
		
	КонецПопытки; 
	
	//Глобальная дата запрета
	Если  НЕ БюджетныйНаСервере.РольДоступнаСервер("Администратор") И НЕ БюджетныйНаСервере.РольДоступнаСервер("ОФК") 
		И НЕ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.Д_Бюджет") Тогда
		Если  БюджетныйНаСервере.ПринадлежитПодсистеме(Объект.Ссылка,"сабУправленческийУчет") Тогда
			ГлобальнаяДата = сабОбщегоНазначения.ПолучитьДатуЗапрета(Объект);
			ДатаЗакрытияУчетПредприятие = УЧ_Сервер.ДатаЛокальногоЗапрета(Объект.Предприятие);
			Если БюджетныйНаСервере.РольДоступнаСервер("Финансист") Тогда
				ДатаЗакрытия = ГлобальнаяДата;				
			Иначе
				ДатаЗакрытия = Макс(ГлобальнаяДата,ДатаЗакрытияУчетПредприятие);
			КонецЕсли;
		Иначе
			ДатаЗакрытия = Дата('00010101');	
		КонецЕсли;
		ИсточникДата = Объект.Дата;	
		Если ИсточникДата <= ДатаЗакрытия  Тогда
			ТекФорма.ТолькоПросмотр = Истина
		КонецЕсли;
	КонецЕсли;
	
	//установка видимости подразделения
	Если НеСкрыватьПодразделения Тогда
		сабОбщегоНазначенияКлиентСервер.СкрытьПодразделения(ТекФорма);
	КонецЕсли;
		
	Возврат Ложь;
		
КонецФункции


Процедура НазначитьСубконто(Элементы, Форма, ИмяСубконто1, ИмяСубконто2 = Неопределено, ИмяСубконто3 = Неопределено, Счет, ИмяПодразделение = Неопределено, ИмяВалюта = Неопределено, ВозможностьИзменения = Ложь) Экспорт
	
	ДанныеСчета = УправленческийУчетПовтИсп.ПолучитьСвойстваСчета(Счет);
	
	Наименование1 = ДанныеСчета.ВидСубконто1Наименование;;
	Наименование2 =  ДанныеСчета.ВидСубконто2Наименование;;
	Наименование3 =  ДанныеСчета.ВидСубконто3Наименование;;
	
	Элементы[ИмяСубконто1].Заголовок = Наименование1;
	Если НЕ ИмяСубконто2 = Неопределено Тогда
		Элементы[ИмяСубконто2].Заголовок = Наименование2;
	КонецЕсли;
	Если НЕ ИмяСубконто3 = Неопределено Тогда
		Элементы[ИмяСубконто3].Заголовок = Наименование3;
	КонецЕсли;
	
	Если Наименование1 = "" Тогда
		Если ВозможностьИзменения Тогда
			Форма.Объект[ИмяСубконто1] = "";		
		КонецЕсли;
		
		Элементы[ИмяСубконто1].Доступность = Ложь;
	Иначе
		Элементы[ИмяСубконто1].Доступность = Истина;
	КонецЕсли;
	
	Если НЕ ИмяСубконто2 = Неопределено Тогда
		Если Наименование2 = "" Тогда
			Если ВозможностьИзменения Тогда
				Форма.Объект[ИмяСубконто2] = "";		
			КонецЕсли;
			Элементы[ИмяСубконто2].Доступность = Ложь;
		Иначе
			Элементы[ИмяСубконто2].Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ИмяСубконто3 = Неопределено Тогда
		Если Наименование3 = "" Тогда
			Если ВозможностьИзменения Тогда
				Форма.Объект[ИмяСубконто3] = "";		
			КонецЕсли;
			Элементы[ИмяСубконто2].Доступность = Ложь;
		Иначе
			Элементы[ИмяСубконто2].Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	//Если ТипЗнч(Объект.Контрагент) = ТипЗнч(Объект.КорСубконто1) И ПустаяСтрока(Объект.КорСубконто1) Тогда
	//	Объект.КорСубконто1 = Объект.Контрагент;
	//КонецЕсли;
	
	Если Не ИмяПодразделение = Неопределено Тогда
		Если НЕ БюджетныйНаСервере.ВернутьРеквизит(Счет, "УчетПоПодразделениям") Тогда
			Если ВозможностьИзменения Тогда
				Форма.Объект[ИмяПодразделение] = "";
			КонецЕсли;
			Элементы[ИмяПодразделение].Доступность = Ложь;
		Иначе
			Элементы[ИмяПодразделение].Доступность = Истина;	
		КонецЕсли;
	КонецЕсли;
	
	
	Если Не ИмяВалюта = Неопределено Тогда
		Если НЕ ТипЗнч(ИмяВалюта) = Тип("Массив") Тогда
			МассивВалюта = Новый Массив;
			МассивВалюта.Добавить(ИмяВалюта);
		Иначе
			МассивВалюта = ИмяВалюта; 	
		КонецЕсли;
		Для каждого текСтрока Из МассивВалюта Цикл
			Элементы[текСтрока].Доступность = ДанныеСчета.Валютный;
		КонецЦикла; 
	КонецЕсли;
	//ВалДрВид = ОбСчет.Валютный;
	//Если ТипЗнч(Объект.ИсточникПолучателя) = ТипЗнч(Объект.КорСубконто2) И ПустаяСтрока(Объект.КорСубконто2) Тогда
	//	Объект.КорСубконто2 = Объект.ИсточникПолучателя;
	//КонецЕсли;
	
КонецПроцедуры

Процедура УниверсальнаяПечать(ОбъектСсылка, ЭтоСсылка = Ложь, ДопПараметры = Неопределено) Экспорт
	
	Попытка
		
		СтандартнаяОбработка = Ложь;
		//{{_КОНСТРУКТОР_ПЕЧАТИ(Печать)
		ТабДок = Новый ТабличныйДокумент;
		
		МассивСсылок = Новый Массив;
		Если ТипЗнч(ОбъектСсылка) = Тип("Массив") Тогда
			МассивСсылок = ОбъектСсылка;
		Иначе			
			ТекСсылка = ?(ЭтоСсылка, ОбъектСсылка, ОбъектСсылка.Ссылка);
			МассивСсылок.Добавить(ТекСсылка);
		КонецЕсли;
		
		ИмяДока = БюджетныйНаСервере.УниверсальнаяПечатьСервер(ТабДок, МассивСсылок,, ДопПараметры);		
		
		Если ТипЗнч(ТабДок) = Тип("ТабличныйДокумент") Тогда
			
			ТабДок.ОтображатьСетку = Ложь;
			ТабДок.Защита = Ложь;
			ТабДок.ТолькоПросмотр = Истина;
			ТабДок.ОтображатьЗаголовки = Истина;
			ТабДок.АвтоМасштаб = Истина;
			Если ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") Или ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.Д_СлужебнаяЗаписка") Тогда
				ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			КонецЕсли;	
			
			Попытка
				ФормаПечати = ПолучитьФорму("Документ." + ИмяДока+ ".Форма.ФормаПечати");
				ФормаПечати.Заголовок = Строка(?(МассивСсылок.Количество() > 1, ТипЗнч(МассивСсылок[0]), МассивСсылок[0])) + " Форма печати";
				ФормаПечати.ТабДок = ТабДок;
				ФормаПечати.Открыть();
				
			Исключение
				ФормаПечати = ПолучитьФорму("ОбщаяФорма.ФормаПечатиДокумента", Новый Структура("Ссылка", МассивСсылок),,МассивСсылок[0]);
				ФормаПечати.Заголовок = Строка(?(МассивСсылок.Количество() > 1, ТипЗнч(МассивСсылок[0]), МассивСсылок[0]));
				ФормаПечати.Результат = ТабДок;
				Если ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") И БюджетныйНаСервере.РольДоступнаСервер("Финансист") Тогда //если финансист согласовывает чужую заявку, то может выбрать целевую статью
					ФормаПечати.РедактированиеСтатьиДДС = Истина;
				Конецесли;
				ФормаПечати.Открыть();
				
			КонецПопытки;
		ИначеЕсли ТипЗнч(ТабДок) = Тип("ФорматированныйДокумент") Тогда
			
			//печать в форматируемый документ. д1 23.09.18
			ФормаПечати = ПолучитьФорму("ОбщаяФорма.ФормаПечатиФорматируемогоДокумента", Новый Структура("Ссылка", МассивСсылок),,МассивСсылок[0]);
			ФормаПечати.Заголовок = Строка(?(МассивСсылок.Количество() > 1, ТипЗнч(МассивСсылок[0]), МассивСсылок[0]));
			ФормаПечати.ТекстДокумента = ТабДок;
			ФормаПечати.Открыть();
			
		КонецЕсли;
		
	Исключение
		Предупреждение("Ошибка формы просмотра: " + ОписаниеОшибки());	
	КонецПопытки; 
	
	
КонецПроцедуры

//запускается при открытии формы элемента справочника
Процедура ПриОткрытииСправочника(Элементы, ОбъектСсылка) Экспорт
	Если ОбъектСсылка.Свойство("Предприятие") Тогда
		ТекПредприятие = ОбъектСсылка.Предприятие;
	ИначеЕсли ОбъектСсылка.Свойство("Владелец") И ТипЗнч(ОбъектСсылка.Владелец) = Тип("СправочникСсылка.Предприятия") Тогда
		ТекПредприятие = ОбъектСсылка.Владелец;
	Иначе
		ТекПредприятие = Неопределено;
	КонецЕсли;
	Если НЕ ТекПредприятие = Неопределено Тогда
		МассивПП = БюджетныйНаСервере.ПолучитьПредприятия();
		Если МассивПП.Количество() = 1 Тогда
			Если НЕ ЗначениеЗаполнено(ТекПредприятие) Тогда
				Если ОбъектСсылка.Свойство("Предприятие") Тогда
					ОбъектСсылка.Предприятие = МассивПП.Получить(0);
				Иначе	
					ОбъектСсылка.Владелец = МассивПП.Получить(0);
				КонецЕсли;
			КонецЕсли;
			Если НЕ Элементы.Найти("Предприятие") = Неопределено Тогда
				Элементы.Предприятие.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ТекПредприятие) И НЕ БюджетныйНаСервере.РольАдминаДоступнаСервер() Тогда
				Если НЕ Элементы.Найти("Предприятие") = Неопределено Тогда
					Элементы.Предприятие.Доступность = Ложь;		
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(ОбъектСсылка.Ссылка) = Тип("СправочникСсылка.ОбъектыСтроительства") ИЛИ ТипЗнч(ОбъектСсылка.Ссылка) = Тип("СправочникСсылка.Номенклатура")  
		ИЛИ ТипЗнч(ОбъектСсылка.Ссылка) = Тип("СправочникСсылка.ОсновныеСредства") ИЛИ ТипЗнч(ОбъектСсылка.Ссылка) = Тип("СправочникСсылка.Организации")
		ИЛИ ТипЗнч(ОбъектСсылка.Ссылка) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		СтруктураДоступностиНаправлений = БПСервер.ДоступныеНаправления();
		Для каждого ТекНедоступноеНаправление Из СтруктураДоступностиНаправлений.НеДоступныеНаправления Цикл
			Если НЕ Элементы.Найти(Строка(ТекНедоступноеНаправление)) = Неопределено Тогда
				Элементы[Строка(ТекНедоступноеНаправление)].Видимость = Ложь;	
			КонецЕсли;
		КонецЦикла;
		//Если СтруктураДоступностиНаправлений.ДоступныеНаправления.Количество() = 1 Тогда
		//	Если НЕ Элементы.Найти("НаправлениеДеятельности") = Неопределено Тогда
		//		Элементы["НаправлениеДеятельности"].Видимость = Ложь;
		//		Если НЕ ЗначениеЗаполнено(ОбъектСсылка.НаправлениеДеятельности) Тогда
		//			ОбъектСсылка.НаправлениеДеятельности = СтруктураДоступностиНаправлений.ДоступныеНаправления[0];				
		//		КонецЕсли;
		//	КонецЕсли;
		//Иначе //если недоступно ни одно, либо несколько направлений
		//	Если НЕ Элементы.Найти("НаправлениеДеятельности") = Неопределено Тогда
		//		Элементы["НаправлениеДеятельности"].Видимость = Истина;
		//	КонецЕсли;
		//КонецЕсли;
		//Если НЕ Элементы.Найти("НаправленияДеятельностиСтраницы") = Неопределено И НЕ Элементы.Найти(Строка(ОбъектСсылка.НаправлениеДеятельности)) = Неопределено Тогда
		//	Элементы["НаправленияДеятельностиСтраницы"].ТекущаяСтраница = Элементы[Строка(ОбъектСсылка.НаправлениеДеятельности)];
		//КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//входяшие параметры:
//Дата1 - начало периода
//Дата2 - конец периода
//Сценарий1 - списокзначений сценариев
//Субконто1 - Субконто1
//Субконто2 - Субконто2
//Счет - массив счетов
Процедура РасшифроватьСумму(Элемент, Расшифровка, СчитатьПоЦФО = Ложь) Экспорт
	
	ТабДок2 = Новый ТабличныйДокумент;
	
	МассивСчетов = Новый Массив;
	Если НЕ ТипЗнч(Расшифровка.Счет) = Тип("Массив") Тогда
		МассивСчетов.Добавить(Расшифровка.Счет);
	Иначе
		МассивСчетов = Расшифровка.Счет;	
	КонецЕсли;
	
	СписокСценариев = Новый СписокЗначений;
	Если НЕ ТипЗнч(Расшифровка.Сценарий1) = Тип("Массив") Тогда
		СписокСценариев.Добавить(Расшифровка.Сценарий1);
	Иначе
		СписокСценариев.ЗагрузитьЗначения(Расшифровка.Сценарий1);
	КонецЕсли;
	
	МассивСценариев = СписокСценариев.ВыгрузитьЗначения();
	
	// закомментированно di 05.02.13
	//Если ТипЗнч(Расшифровка.Предприятие) = Тип("Массив") Тогда
	//	МассивПредприятий = Расшифровка.Предприятие;
	//Иначе
	//	МассивПредприятий = Новый Массив;
	//	МассивПредприятий.Добавить(Расшифровка.Предприятие);
	//КонецЕсли;
	//
	
	// di 05.02.13
	МассивПредприятий = Новый Массив;
	
	Если ТипЗнч(Расшифровка.Предприятие) = Тип("Массив") Или ТипЗнч(Расшифровка.Предприятие) = Тип("ФиксированныйМассив") Тогда
		Для Каждого Эл Из Расшифровка.Предприятие Цикл
			Если ЗначениеЗаполнено(Эл) Тогда
				МассивПредприятий.Добавить(Эл);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Расшифровка.Предприятие) = Тип("СправочникСсылка.Предприятия") Тогда
		Если ЗначениеЗаполнено(Расшифровка.Предприятие) Тогда
			МассивПредприятий.Добавить(Расшифровка.Предприятие);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Расшифровка.Свойство("Субконто2") Тогда
		Расшифровка.Вставить("Субконто2", Неопределено);
	КонецЕсли; 
	
	ПараметрКоманды = Новый 
	Структура("Дата1, Дата2, Счет, Сценарий1, Предприятие, Субконто1, ВидимостьШапки, Субконто2, СчитатьПоЦФО", Расшифровка.Дата1,
	Расшифровка.Дата2, 
	МассивСчетов, СписокСценариев, Расшифровка.Предприятие, Расшифровка.Субконто1, 
	Расшифровка.ВидимостьШапки, Расшифровка.Субконто2, СчитатьПоЦФО);
	
	
	
	Если Расшифровка.Свойство("Подразделение") Тогда
		ТекПодразделение = Расшифровка.Подразделение;
	Иначе
		ТекПодразделение = "";		
	КонецЕсли;	
	
	ФормаПечати = ПолучитьФорму("Отчет.Д_Расшифровка.Форма");
	ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Значение = Новый СписокЗначений;
	ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Значение.ЗагрузитьЗначения(МассивСценариев);
	
	// 24.01.13 передаем массив отобранных предприятий в расшифровку
	// di 05.02.13
	ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[1].Значение = Новый СписокЗначений;
	ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[1].Значение.ЗагрузитьЗначения(МассивПредприятий);

	ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[2].Значение = ТекПодразделение;
	ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[3].Значение = Новый СписокЗначений;
	ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[3].Значение.ЗагрузитьЗначения(МассивСчетов);
	ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[4].Значение.ДатаНачала = Расшифровка.Дата1;
	ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[4].Значение.ДатаОкончания = Расшифровка.Дата2;
	ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[5].Использование = (НЕ Расшифровка.Субконто1 = Неопределено);
	ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[5].Значение = Расшифровка.Субконто1;
	ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[6].Использование = (НЕ Расшифровка.Субконто2 = Неопределено);	
	ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[6].Значение = Расшифровка.Субконто2;
	ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[7].Использование = СчитатьПоЦФО;	
	ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[7].Значение = СчитатьПоЦФО;
	
	//ФормаПечати.ТабДок = ТабДок2;
	//Если Расшифровка.Свойство("Взаиморасчеты") Тогда
	//	ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[7].Использование = Истина;
	//	ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[7].Значение = Расшифровка.Взаиморасчеты;
	//Иначе
	//	ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[7].Значение = Истина;
	//	ФормаПечати.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[7].Использование = Ложь;
	//КонецЕсли;	
	
	
	ФормаПечати.СкомпоноватьРезультат();
	ФормаПечати.Открыть();
		
КонецПроцедуры

//Функция печатает табличный документ на указаном принтере 
Функция ПечатьPDF(ТабДокумент, ИндексPDFПринтера)
//	Состояние("Идет печать на PDF-принтере ...");
//	Результат = ИСТИНА;
//	
//	Попытка
//		// Создадим новый табличный документ и полностью скопируем в него содержимое из исходного (а также все необходимые настройки) 
//		ТабличныйДокумент = Новый ТабличныйДокумент;
//		ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ТабДокумент, "КодЯзыкаМакета,ОбластьПечати,КоличествоЭкземпляров,ОриентацияСтраницы,АвтоМасштаб,ПолеСверху,ПолеСлева,ПолеСнизу,ПолеСправа,РазмерКолонтитулаСверху,РазмерКолонтитулаСнизу,ФиксированныйФон,ФоноваяКартинка,ЧерноБелыйПросмотр,ПовторятьПриПечатиКолонки,ПовторятьПриПечатиСтроки");
//		ТабличныйДокумент.МасштабПечати            = ?(ТабДокумент.МасштабПечати            = Неопределено,  100, ТабДокумент.МасштабПечати);
//		ТабличныйДокумент.РазборПоКопиям        = ?(ТабДокумент.РазборПоКопиям            = Неопределено, ЛОЖЬ, ТабДокумент.РазборПоКопиям);
//		ТабличныйДокумент.ЧерноБелаяПечать        = ?(ТабДокумент.ЧерноБелаяПечать        = Неопределено, ЛОЖЬ, ТабДокумент.ЧерноБелаяПечать);
//		ТабличныйДокумент.ЭкземпляровНаСтранице    = ?(ТабДокумент.ЭкземпляровНаСтранице    = Неопределено,    0, ТабДокумент.ЭкземпляровНаСтранице);
//		ТабличныйДокумент.Вывести(ТабДокумент);
//		
//		// Печатаем 
//		ТабличныйДокумент.ИмяПринтера = СокрЛП("Bullzip PDF Printer");
//		ТабличныйДокумент.Напечатать(ИСТИНА);
//		
//		// Нужно дождаться окончания формирования PDF файла 
//		PDFФайл = Новый Файл(ИмяPDFФайла);
//		ДатаОкончания = ТекущаяДата() + ТаймаутОжиданияПечати;
//		Пока НЕ (PDFФайл.Существует()ИЛИ(ТекущаяДата() >= ДатаОкончания)) Цикл
//			// Ждем пока файл не станет доступным 
//		КонецЦикла;
//		Результат = PDFФайл.Существует();
//	Исключение
//		Результат = ЛОЖЬ;
//	КонецПопытки;
//	
//	Возврат Результат;
КонецФункции

Процедура СоздатьФайлPDF(Таб, ИмяФайла) Экспорт
	
	//Путь = БюджетныйНаСервере.ВернутьРеквизит(БюджетныйНаСервере.ПолучитьПользователя(), "КаталогПользователя");
	//Если ПустаяСтрока(Путь) Тогда
	//	Предупреждение("Каталог пользователя " + Строка(БюджетныйНаСервере.ПолучитьПользователя()) + " не назначен.");
	//	Возврат;
	//КонецЕсли;

	//Сообщить("В текущей версии платформы 1С, сохранять в формат PDF необходимо с помощью стандартного сохранения (Файл-Сохранить)");
	Попытка
		Принтер=Новый ComObject("Bullzip.PDFPrinterSettings");
		принтер.SetValue("output", ИмяФайла);
		принтер.SetValue("ShowSaveAS", "never");
		принтер.SetValue("ShowProgress", "no");
		принтер.SetValue("ShowProgressFinished", "no");
		принтер.SetValue("ShowSettings", "never");
		принтер.SetValue("ShowPDF", "no");
		принтер.SetValue("ConfirmOverwrite","no");
		принтер.SetValue("OwnerPassword","ghjt[fkb15Hfp");
		принтер.SetValue("Permissions",61636);
		принтер.WriteSettings();
		Таб.Автомасштаб=Истина;
		Таб.Имяпринтера="Bullzip PDF Printer";
		
				
		
		Таб.Напечатать(Истина);
		PDFФайл = Новый Файл(ИмяФайла);
		
		Пока  НЕ PDFФайл.Существует() Цикл
			ОбработкаПрерыванияПользователя();
		КонецЦикла;
						
	Исключение
		Сообщить(ОписаниеОшибки());
		Сообщить("Необходимо установить ""Bullzip PDF Printer"", обратитесь к системному администратору."); 
	КонецПопытки;     
    
КонецПроцедуры

Процедура ОтправитьФайл()
	
	
	
КонецПроцедуры

//доп подтверждение нажатия кнопок согласования в бизнес-процессах
Функция СогласоватьБизнесПроцесс(ПараметрКоманды) Экспорт
	Если БюджетныйНаСервере.ВернутьРеквизит(БюджетныйНаСервере.ПолучитьПользователя(), "ДопПодтверждениеНажатияКнопок") Тогда
		Если НЕ Вопрос("Вы уверены что хотите " + ПараметрКоманды + "?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да  Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ()
 
Функция НачалоВыбораСубконто(Счет, Субконто, НомерСубконто, Элемент, СтандартнаяОбработка, Контрагент = Неопределено, Стрк = Неопределено) Экспорт

	Кол = БюджетныйНаСервере.КоличествоСубконто(Счет);
	Если Кол < НомерСубконто Тогда
		СтандартнаяОбработка = Ложь;
	Иначе
		Если НЕ Контрагент = Неопределено Тогда
			Если ТипЗнч(Субконто) = Тип("СправочникСсылка.Контрагенты") Тогда
				СтандартнаяОбработка = Ложь;
				ТекФорма = ПолучитьФорму("Справочник.Контрагенты.ФормаВыбора", Новый Структура("ТекущаяСтрока", Субконто), Элемент);
				ТекФорма.ТекЭлемент = Контрагент;
				ТекФорма.Открыть();
			КонецЕсли;
		КонецЕсли;
		//Если ТипЗнч(Субконто) = Тип("СправочникСсылка.Предприятия")  Тогда   //старая форма с отбором по ролям и реквизиту(учет) в предприятии Русаков
		//	СтандартнаяОбработка = Ложь;
		//	ОткрытьФорму("Справочник.Предприятия.Форма.ФормаВыбора", Новый Структура("ТекущаяСтрока, ТекСчет", Субконто, Счет),Элемент);
		//ИначеЕсли
		Если ТипЗнч(Субконто) = Тип("СправочникСсылка.ОбъектыСтроительства")  Тогда
			СтандартнаяОбработка = Ложь;
			ОткрытьФорму("Справочник.ОбъектыСтроительства.ФормаВыбора", Новый Структура("ТекущаяСтрока", Субконто),Элемент);
		ИначеЕсли ТипЗнч(Субконто) = Тип("СправочникСсылка.Кассы") И НЕ Стрк = Неопределено Тогда
			СтандартнаяОбработка = Ложь;
			ОткрытьФорму("Справочник.Кассы.ФормаВыбора", Новый Структура("ДатаТек,ПредприятиеТек,ТекущаяСтрока", Стрк.ДатаДок,Стрк.ПредприятиеДок,Субконто),Элемент);
		//ИначеЕсли Счет = ПланыСчетов.Учетный._62_07 И НЕ Стрк = Неопределено Тогда
		//	СтандартнаяОбработка = Ложь;
		//	ОткрытьФорму("Документ.Тур_НакладнаяПоБилетам.Форма.ФормаВыбораСОстатком", Новый Структура("ДатаТек,ПредприятиеТек,СубконтоТек,ТекущаяСтрока", Стрк.ДатаДок,Стрк.ПредприятиеДок,Стрк.ПервоеСубконто,Субконто),Элемент);
		КонецЕсли;
		
	КонецЕсли;

КонецФункции // ()

Процедура ДоступностьСубконтоПриАктивизации(Элемент, Элементы, Счет, ИмяПоляПодразделение = Неопределено, ИмяПолеСубконто1 = Неопределено, ИмяПолеСубконто2 = Неопределено, ИмяПолеСубконто3 = Неопределено, ИмяПолеВалюта = Неопределено, ИмяПолеВалютнаяСумма = Неопределено, Предприятие = Неопределено, НоваяСтрока = Ложь) Экспорт

	Если Элемент.ТекущийЭлемент.Имя = ИмяПоляПодразделение Тогда
		ТекПодр = БюджетныйНаСервере.ВернутьРеквизит(Счет, "УчетПоПодразделениям");
		Элементы[ИмяПоляПодразделение].ТолькоПросмотр = НЕ ТекПодр;
		//Если НоваяСтрока Тогда
		//	Элементы[ИмяПоляПодразделение].Доступность = ТекПодр;
		//КонецЕсли;
		//Элементы[ИмяПоляПодразделение].ПропускатьПриВводе = НЕ ТекПодр;
	КонецЕсли;
	
	Кол = БюджетныйНаСервере.КоличествоСубконто(Счет);

	Если Элемент.ТекущийЭлемент.Имя = ИмяПолеСубконто1 Тогда
		Если НоваяСтрока Тогда
			Элементы[ИмяПолеСубконто1].Доступность = НЕ (Кол < 1);
		Иначе
			Элементы[ИмяПолеСубконто1].ТолькоПросмотр = (Кол < 1);
		КонецЕсли;
		Элементы[ИмяПолеСубконто1].ПропускатьПриВводе = (Кол < 1);
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя = ИмяПолеСубконто2 Тогда
		Если НоваяСтрока Тогда
			Элементы[ИмяПолеСубконто2].Доступность = НЕ (Кол < 2);
		Иначе
			 Элементы[ИмяПолеСубконто2].ТолькоПросмотр = (Кол < 2);
		КонецЕсли;
		//Элементы[ИмяПолеСубконто2].ПропускатьПриВводе = (Кол < 2);
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя = ИмяПолеСубконто3 Тогда
		Если НоваяСтрока Тогда
			Элементы[ИмяПолеСубконто3].Доступность = НЕ (Кол < 3);
		Иначе
			Элементы[ИмяПолеСубконто3].ТолькоПросмотр = (Кол < 3);
		КонецЕсли;
		//Элементы[ИмяПолеСубконто3].ПропускатьПриВводе = (Кол < 3);
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя = ИмяПолеВалюта ИЛИ Элемент.ТекущийЭлемент.Имя = ИмяПолеВалютнаяСумма Тогда
		ВалютныйСчет = БюджетныйНаСервере.ВернутьРеквизит(Счет, "Валютный");
		Если ВалютныйСчет Тогда
			Если НЕ Предприятие = Неопределено Тогда
				Если НЕ БюджетныйНаСервере.ВернутьРеквизит(Предприятие, "ВедетсяВалютныйУчет") И НЕ УЧ_Сервер.ДенежныйСчет(Счет) Тогда
					ВалютныйСчет = Ложь;	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Элементы[ИмяПолеВалюта].ТолькоПросмотр = НЕ ВалютныйСчет;
		Элементы[ИмяПолеВалютнаяСумма].ТолькоПросмотр = НЕ ВалютныйСчет;
		//Элементы[ИмяПолеВалюта].ПропускатьПриВводе = НЕ ВалютныйСчет;
		//Элементы[ИмяПолеВалютнаяСумма].ПропускатьПриВводе = НЕ ВалютныйСчет;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ДобавитьМаршрутВХранилище(Элемент, Копирование) Экспорт
	ТекБП = БПСервер.НайтиТекущийБПСервер(Элемент.ТекущаяСтрока);
	Если НЕ ТекБП = Неопределено Тогда
		Если Копирование Тогда
			АдресХранилищаМаршрута = ПоместитьВоВременноеХранилище(ТекБП, Новый УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПоказатьСтарыйМаршрут(Элементы, МаршрутЗаявкиОснования) Экспорт

	ВидимостьЭлементовСтарогоМаршрута = Ложь;
	Если НЕ АдресХранилищаМаршрута = Неопределено Тогда
		СтарыйБП = ПолучитьИзВременногоХранилища(АдресХранилищаМаршрута);
		Если ЗначениеЗаполнено(СтарыйБП) Тогда
			Если ТипЗнч(СтарыйБП) = Тип("БизнесПроцессСсылка.СогласованиеОбщее") ИЛИ ТипЗнч(СтарыйБП) = Тип("БизнесПроцессСсылка.Согласование1") Тогда
				ВидимостьЭлементовСтарогоМаршрута = Истина;
				МаршрутЗаявкиОснования = СтарыйБП;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//Элементы.МаршрутЗаявкиОснования.Видимость = ВидимостьЭлементовСтарогоМаршрута;
	//Элементы.ЗаполнитьМаршрутИзСтарого.Видимость = ВидимостьЭлементовСтарогоМаршрута;

КонецПроцедуры

Процедура УниверсальноеВыполнениеКоманды(ПараметрКоманды, ПараметрыВыполненияКоманды, ДопПараметры = Неопределено) Экспорт
	Если ТипЗнч(ПараметрыВыполненияКоманды) = Тип("Строка") Тогда
		ИмяКоманды = ПараметрыВыполненияКоманды;
	Иначе
		ИмяКоманды = Прав(ПараметрыВыполненияКоманды.НавигационнаяСсылка,СтрДлина(ПараметрыВыполненияКоманды.НавигационнаяСсылка) - 14); 
	КонецЕсли;
	
	Если Не типЗнч(ПараметрКоманды) = Тип("Массив") Тогда
		МассивСсылка = Новый Массив;
		МассивСсылка.Добавить(ПараметрКоманды);
	Иначе
		МассивСсылка = ПараметрКоманды;	
	КонецЕсли;
	          
	КлючУникальности = "" + МассивСсылка[0].УникальныйИдентификатор() + "___" + ИмяКоманды;
	
	Если ИмяКоманды = "Документ.Д_ЗаявкаНаОплату.Команда.ПроверкаСоответствияБюджету"
		ИЛИ ИмяКоманды = "Документ.Д_ЗаявкаНаФинансирование.Команда.ПроверкаСоответствияБюджету" Тогда
		
		ТабДок = Новый ТабличныйДокумент;
		БюджетныйНаСервере.ПечатьДокументов(ТабДок, МассивСсылка, ИмяКоманды);
		
		ТабДок.ОтображатьСетку = Ложь;
		ТабДок.Защита = Ложь;
		ТабДок.ТолькоПросмотр = Истина;
		ТабДок.ОтображатьЗаголовки = Истина;
		ТабДок.ОтображатьГруппировки = Истина;
		ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ТабДок.АвтоМасштаб = Истина;
		ТабДок.Область("C9:C12").Сгруппировать("План подробно");
		ТабДок.Область("C17:C24").Сгруппировать("Факт прочих заявок подробно");
		ТабДок.ПоказатьУровеньГруппировокКолонок(0);
		
		ФормаПечати = ПолучитьФорму("ОбщаяФорма.ФормаПечатиДокумента",,,КлючУникальности);
		ФормаПечати.Результат = ТабДок;
		//ФормаПечати.ГруппироватьЗаявки = Истина;
		Если МассивСсылка.Количество() = 1 Тогда
			ФормаПечати.Заявка = МассивСсылка[0];
		КонецЕсли;
		ФормаПечати.Открыть();
	ИначеЕсли ИмяКоманды = "ОбщаяПечатьВопросовПоДокументу" Тогда
		ТабДок = Новый ТабличныйДокумент;
		БПСервер.ВывестиВопросыПоДокументу(ТабДок, МассивСсылка, Истина);
		ТабДок.ОтображатьСетку = Ложь;
		ТабДок.Защита = Ложь;
		ТабДок.ТолькоПросмотр = Истина;
		ТабДок.ОтображатьЗаголовки = Истина;
		ТабДок.ОтображатьГруппировки = Истина;
		ТабДок.АвтоМасштаб = Истина;
		ФормаПечати = ПолучитьФорму("ОбщаяФорма.ФормаПечатиДокумента",,,КлючУникальности);
		ФормаПечати.Автозаголовок = Ложь;
		ФормаПечати.Заголовок = "Форма печати: Вопросы по " + Строка(МассивСсылка[0]);
		ФормаПечати.Результат = ТабДок;
		ФормаПечати.Открыть();
	ИначеЕсли ИмяКоманды = "ОбщаяПечатьЗаметокПоДокументу" Тогда
		ТабДок = Новый ТабличныйДокумент;
		БПСервер.ВывестиЗаметкиПоДокументу(ТабДок, МассивСсылка, Истина);
		ТабДок.ОтображатьСетку = Ложь;
		ТабДок.Защита = Ложь;
		ТабДок.ТолькоПросмотр = Истина;
		ТабДок.ОтображатьЗаголовки = Истина;
		ТабДок.ОтображатьГруппировки = Истина;
		ТабДок.АвтоМасштаб = Истина;
		ФормаПечати = ПолучитьФорму("ОбщаяФорма.ФормаПечатиДокумента",,,КлючУникальности);
		ФормаПечати.Автозаголовок = Ложь;
		ФормаПечати.Заголовок = "Форма печати: Заметки по " + Строка(МассивСсылка[0]);
		ФормаПечати.Результат = ТабДок;
		ФормаПечати.Открыть();	
	ИначеЕсли ИмяКоманды = "ОбщаяПечатьОбсужденийПоДокументу" Тогда
		ТабДок = Новый ТабличныйДокумент;
		БПСервер.ВывестиОбсужденияПоДокументу(ТабДок, МассивСсылка, Истина);
		ТабДок.ОтображатьСетку = Ложь;
		ТабДок.Защита = Ложь;
		ТабДок.ТолькоПросмотр = Истина;
		ТабДок.ОтображатьЗаголовки = Истина;
		ТабДок.ОтображатьГруппировки = Истина;
		ТабДок.АвтоМасштаб = Истина;
		ФормаПечати = ПолучитьФорму("ОбщаяФорма.ФормаПечатиДокумента",,,КлючУникальности);
		ФормаПечати.Автозаголовок = Ложь;
		ФормаПечати.Заголовок = "Форма печати: Обсуждение по " + Строка(МассивСсылка[0]);
		ФормаПечати.Результат = ТабДок;
		ФормаПечати.Открыть();
	ИначеЕсли ИмяКоманды = "БизнесПроцесс.СогласованиеОбщее.Команда.ОбсудитьДокумент" Тогда
		Если ТипЗнч(ПараметрКоманды) = Тип("ЗадачаСсылка.Задача") Тогда
			ПредметОбсуждения = БюджетныйНаСервере.ВернутьРеквизиты(ПараметрКоманды, "Заявка").Заявка;	
		Иначе	
			ПредметОбсуждения = ПараметрКоманды;
		КонецЕсли;
		
		//ищем существующее обсуждение
		Комната = сабВнутреннийЧатСервер.ПолучитьОбсуждениеПредмета(ПредметОбсуждения);
		Если НЕ Комната = Неопределено Тогда
			Оповестить("ЗаписьНовойГруппыСПредметомОбсуждения", Новый Структура("НоваяГруппа", Комната));
			Возврат;
		КонецЕсли;
		//конец поиска
		
		ТекФорма = ПолучитьФорму("Справочник.сабЧат_ГруппыЧата.Форма.ФормаЭлемента", Новый Структура("ПредметОбсуждения", ПредметОбсуждения));
		ТекФорма.Заголовок = "Создание комнаты обсуждения: " + Строка(ПредметОбсуждения);
		ТекФорма.Объект.Документ = ПредметОбсуждения;
		ТекФорма.Объект.Наименование = "Обсуждение: " + Строка(ПредметОбсуждения);
		Для каждого ТекУчастник Из БПСервер.ПолучитьУчастниковБизнесПРоцесса(ПредметОбсуждения) Цикл
			НоваяСтрока = ТекФорма.Объект.Пользователи.Добавить();
			НоваяСтрока.Пользователь = ТекУчастник;
			//НоваяСтрока.ИБ = сабОбщегоНазначения.ПолучитьТекущуюИБ();
		КонецЦикла; 
		ТекФорма.Открыть();
	ИначеЕсли ИмяКоманды = "БизнесПроцесс.СогласованиеОбщее.Команда.ОтчетПоВыполнению" Тогда
		ТабДок = Новый ТабличныйДокумент;
		БПСервер.ВывестиОтчетПоВыполнениюЗадачДокумента(ТабДок, МассивСсылка);
		ТабДок.ОтображатьСетку = Ложь;
		ТабДок.Защита = Ложь;
		ТабДок.ТолькоПросмотр = Ложь;
		ТабДок.ОтображатьЗаголовки = Ложь;
		ТекФорма = ПолучитьФорму("ОбщаяФорма.ФормаПечатиДокумента");
		ТекФорма.Результат = ТабДок;
		ТекФорма.Автозаголовок = Ложь;
		ТекФорма.Заголовок = "Форма печати: Отчет по выполнению " + Строка(МассивСсылка[0]);
		ТекФорма.Открыть();
		
	ИначеЕсли  ИмяКоманды = "Справочник.Пользователи.Команда.СообщениеПользователю" Тогда
		//Вставить содержимое обработчика.
		ПараметрыФормы = Новый Структура("", );
		ТекФорма = ПолучитьФорму("Документ.БП_Оповещение.ФормаОбъекта", Новый Структура("Ключ", МассивСсылка),, Истина);
		Для каждого ТекЭлемент Из МассивСсылка Цикл
			Если БюджетныйНаСервере.ВернутьРеквизит(ТекЭлемент, "ЭтоГруппа") Тогда
				НовыйМассивПользователей = сабОбщегоНазначения.ДобавитьПодчиненных(ТекЭлемент, МассивСсылка);
				Для каждого ТекСтрока Из НовыйМассивПользователей Цикл
					НоваяСтрока = ТекФорма.Объект.СписокИсполнителей.Добавить();
					НоваяСтрока.Исполнитель = ТекСтрока;
				КонецЦикла; 
			Иначе
				НоваяСтрока = ТекФорма.Объект.СписокИсполнителей.Добавить();
				НоваяСтрока.Исполнитель = ТекЭлемент;
			КонецЕсли;
		КонецЦикла;
		Если Не ДопПараметры = Неопределено И ДопПараметры.Свойство("Документ") Тогда
			ТекФорма.Объект.Тема = "Сообщение к документу: " + Строка(ДопПараметры.Документ);		
		КонецЕсли;
		ТекФорма.Открыть();
	ИначеЕсли ИмяКоманды = "Документ.Д_ЗаявкаНаОплату.Команда.ПечатьПлатежки"
		ИЛИ ИмяКоманды = "Документ.Д_ЗаявкаНаФинансирование.Команда.ПечатьПлатежки" 
		ИЛИ ИмяКоманды = "Документ.Д_ЗаявкаНаОплату.Команда.ПечатьПлатежкиСУчетомНазначения" 
		ИЛИ ИмяКоманды = "Документ.Д_ЗаявкаНаОплату.Команда.ПроверкаЗадолженности" 
		ИЛИ ИмяКоманды = "Документ.Д_ЗаявкаНаОплату.Команда.ПроверкаТекущегоСчета"
		ИЛИ ИмяКоманды = "Справочник.Контрагенты.Команда.КарточкаКонтрагента"
		ИЛИ ИмяКоманды = "Документ.Д_СлужебнаяЗаписка.Команда.ПрямоеПревышениеБюджета"
		ИЛИ ИмяКоманды = "Документ.УЧ_Реализация.Команда.Торг12"
		ИЛИ ИмяКоманды = "Документ.УЧ_Реализация.Команда.ТТН"
		ИЛИ ИмяКоманды = "Документ.УЧ_Стр_ДоговорДолевогоУчастия.Команда.ПечатьДоговора"
		ИЛИ ИмяКоманды = "Документ.УЧ_Стр_ДоговорДолевогоУчастия.Команда.СостояниеПомещения" Тогда
		ТабДок = Новый ТабличныйДокумент;
		ЕстьЧтоПечатать = Ложь;
		БюджетныйНаСервере.ПечатьДокументов(ТабДок, МассивСсылка, ИмяКоманды, ЕстьЧтоПечатать);
		Если ЕстьЧтоПечатать Тогда
			ТабДок.ОтображатьСетку = Ложь;
			ТабДок.Защита = Ложь;
			ТабДок.ТолькоПросмотр = Истина;
			ТабДок.ОтображатьЗаголовки = Истина;
			ТабДок.АвтоМасштаб = Истина;
			ФормаПечати = ПолучитьФорму("ОбщаяФорма.ФормаПечатиДокумента",,,КлючУникальности);
			ФормаПечати.Результат = ТабДок;
			ФормаПечати.Открыть();
		КонецЕсли;
		
	ИначеЕсли ИмяКоманды = "Документ.Д_ЗаявкаНаТорговлю.Команда.ИсторияДокумента" Тогда
		ТабДок = Новый ТабличныйДокумент;
		БПСервер.ПечатьИсторииЗаявкиЗакупки(ТабДок, ПараметрКоманды);
		
		ТабДок.ОтображатьСетку = Ложь;
		ТабДок.Защита = Ложь;
		ТабДок.ТолькоПросмотр = Истина;
		ТабДок.ОтображатьЗаголовки = Истина;
		ТабДок.АвтоМасштаб = Истина;
		ТабДок.Показать();
		
	ИначеЕсли ИмяКоманды = "Документ.УЧ_ДвижениеДС.Команда.ПечатьУчет" Тогда
		ТабДок = Новый ТабличныйДокумент;
		БюджетныйНаСервере.ПечатьДокументов(ТабДок, МассивСсылка, ИмяКоманды);
		ТабДок.ОтображатьСетку = Ложь;
		ТабДок.Защита = Ложь;
		ТабДок.ТолькоПросмотр = Истина;
		ТабДок.ОтображатьЗаголовки = Истина;
		ТабДок.АвтоМасштаб = Истина;
		ФормаПечати = ПолучитьФорму("ОбщаяФорма.ФормаПечатиДокумента",,,КлючУникальности);
		ФормаПечати.Результат = ТабДок;
		ФормаПечати.Открыть();
	ИначеЕсли ИмяКоманды = "Документ.УЧ_АктСверкиВзаиморасчетов.Команда.ПечатьАктСверки" Тогда
		ТабДок = Новый ТабличныйДокумент;
		БюджетныйНаСервере.ПечатьДокументов(ТабДок, МассивСсылка, ИмяКоманды);
		ТабДок.ОтображатьСетку = Ложь;
		ТабДок.Защита = Ложь;
		ТабДок.ТолькоПросмотр = Истина;
		ТабДок.ОтображатьЗаголовки = Истина;
		ТабДок.АвтоМасштаб = Истина;
		ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ФормаПечати = ПолучитьФорму("ОбщаяФорма.ФормаПечатиДокумента",,,КлючУникальности);
		ФормаПечати.Результат = ТабДок;
		ФормаПечати.Открыть();
		
	ИначеЕсли ИмяКоманды = "Документ.Д_ЗаявкаНаОплату.Команда.Реестр" Тогда
		ОткрытьФорму("Отчет.РеестрЗаявокНаОплату.Форма",,,КлючУникальности);
	Иначе
		БюджетныйНаКлиенте.УниверсальнаяПечать(МассивСсылка, Истина, Новый Структура("ИмяКоманды", ИмяКоманды));
	КонецЕсли;
	
КонецПроцедуры




Функция НачалоВыбораПодразделения(Счет, СтандартнаяОбработка) Экспорт
	Если НЕ БюджетныйНаСервере.ВернутьРеквизит(Счет, "УчетПоПодразделениям") Тогда
		СтандартнаяОбработка = Ложь;	
	КонецЕсли;	
КонецФункции

//проверяем доступность заявки для выполнения
Функция ЗадачаВыполнена(ТекЗадача) Экспорт
	Если ТекЗадача.Выполнена Тогда //если задача уже выполнена
		Сообщить("Задача " + Строка(ТекЗадача.Ссылка) + " уже выполнена пользователем " + Строка(ТекЗадача.Пользователь) + ".");
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции // ()

Функция Просуммировать(Результат) Экспорт
	Сумма = 0;
	Для Каждого Область Из Результат.ВыделенныеОбласти Цикл
		Если ТипЗнч(Область) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Для ИндексСтрока = Область.Верх По Область.Низ Цикл
				Для ИндексКолонка = Область.Лево По Область.Право Цикл
					Попытка
						Сумма = Сумма + Число(СтрЗаменить(Результат.Область("R" + Формат(ИндексСтрока, "ЧГ=0") + "C" + Формат(ИндексКолонка, "ЧГ=0")) .Текст, " ", ""));
					Исключение
					КонецПопытки;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Возврат Сумма;
КонецФункции // ()

Функция КопироватьВБуфер(ИтогоСумма) Экспорт

    Объект = Новый COMОбъект("htmlfile");
    Объект.ParentWindow.ClipboardData.Setdata("Text", ИтогоСумма);
	
КонецФункции // ()
 
Процедура ДобавитьГруппуПользователей(Элементы, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт

		//Если выбрана группа
	Если Не ВыбранноеЗначение = Неопределено Тогда
		Если БПСервер.ПроверкаГруппы(ВыбранноеЗначение) Тогда
			СтандартнаяОбработка = Ложь;
			МассивПользователей = БПСервер.ДобавитьГруппу(ВыбранноеЗначение);
			Индекс = 0;
			Для каждого ТекПользователь Из МассивПользователей Цикл
				Если Индекс Тогда
					Элементы.Адресаты.ДобавитьСтроку();
				КонецЕсли;
				Элементы.Адресаты.ТекущиеДанные.Пользователь = ТекПользователь;
				Индекс = Индекс + 1;
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;


КонецПроцедуры

//создает задачу "согласовать контрагента" и возвращает ссылку на нее
Функция СоздатьКонтрагента() Экспорт
	
	Наименование = "";
	ТекЗадача = Неопределено;
	СтруктураКонтрагента = ОткрытьФормуМодально("Справочник.Контрагенты.Форма.ФормаБППредварительная");
	
	Если НЕ СтруктураКонтрагента = Неопределено Тогда
		СтруктураЗапроса = БюджетныйНаСервере.НайтиПодобныеЭлементыСправочника(СтруктураКонтрагента.Наименование);
		Если НЕ СтруктураЗапроса = Ложь Тогда
			Если Вопрос("Найдены похожие контрагенты в общем справочнике. Желаете выбрать нужного контрагента из найденных?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да  Тогда
				Отказ = Истина;
				ТекКонтрагент = ОткрытьФормуМодально("Справочник.Контрагенты.Форма.ФормаВыбораПолная", СтруктураЗапроса);
				Если НЕ ТекКонтрагент = Неопределено Тогда
					Если БюджетныйНаСервере.РольДоступнаСервер("РасчетныйОтдел") Тогда
						ОткрытьЗначение(ТекКонтрагент);
					Иначе
						
						ТекПредприятие = БюджетныйНаСервере.ПолучитьПредприятие();
						
						Если ПустаяСтрока(ТекПредприятие) И НЕ БюджетныйНаСервере.РольДоступнаСервер("РасчетныйОтдел") Тогда
							ТекПредприятие = ОткрытьФормуМодально("Справочник.Предприятия.ФормаВыбора");
							Если ПустаяСтрока(ТекПредприятие) Тогда
								Возврат Неопределено;
							КонецЕсли;
						КонецЕсли;
						
						БюджетныйНаСервере.ЗаписатьКонтрагента(ТекКонтрагент, ТекПредприятие);
						ОповеститьОбИзменении(ТекКонтрагент);					
					КонецЕсли;
				КонецЕсли;
			Иначе
				//Описание = "";
				//Если ВвестиСтроку(Описание, "Введите описание контрагента") Тогда
					ТекЗадача = БюджетныйНаСервере.ЗапуститьЗадачуСогласования(СтруктураКонтрагента, ТекПредприятие);
					ПоказатьОповещениеПользователя("Согласование контрагента: " + Строка(СтруктураКонтрагента.Наименование), ПолучитьНавигационнуюСсылку(ТекЗадача), Строка(ТекЗадача));
				//КонецЕсли;
			КонецЕсли;
		Иначе
			//Описание = "";
			//Если ВвестиСтроку(Описание, "Введите описание контрагента") Тогда
				ТекЗадача = БюджетныйНаСервере.ЗапуститьЗадачуСогласования(СтруктураКонтрагента, ТекПредприятие);
				ПоказатьОповещениеПользователя("Согласование контрагента: " + Строка(СтруктураКонтрагента.Наименование), ПолучитьНавигационнуюСсылку(ТекЗадача), Строка(ТекЗадача));		
			//КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат ТекЗадача;
	ОповеститьОбИзменении(Тип("ЗадачаСсылка.Задача"));
КонецФункции

Процедура ФормаТолькоПросмотр(Объект, ЭтаФорма, Достуность, ОграничитьПолностью = Ложь) Экспорт
	//Если НЕ БюджетныйНаСервере.РольАдминаДоступнаСервер() Тогда   //заблочил д1 02.11.17
		Для каждого ТекЭлемент Из ЭтаФорма.Элементы Цикл
			Если ТипЗнч(ТекЭлемент) = Тип("ГруппаФормы") ИЛИ ТипЗнч(ТекЭлемент) = Тип("ДекорацияФормы") Тогда
				Продолжить;
			КонецЕсли;	
			Попытка
				ТекЭлемент.ТолькоПросмотр = Достуность;
			Исключение
				Если ОграничитьПолностью Тогда
					ТекЭлемент.Доступность = 1 - Достуность;	
				КонецЕсли;
			КонецПопытки;
		КонецЦикла; 
	//КонецЕсли;
КонецПроцедуры


Процедура УстановитьДоступность(ТекСтрока, ПоляОбъекта) Экспорт
	
	Если ПоляОбъекта.Свойство("Счет") Тогда
		ТекСчет = ТекСтрока[ПоляОбъекта["Счет"]];
	иначе
		ТекСчет = ТекСтрока.КорСчет;
	КонецЕсли;
	
	ДанныеСчета = УправленческийУчетПовтИсп.ПолучитьСвойстваСчета(ТекСчет, ПоляОбъекта.Предприятие);
	ЭтоТаблица = Истина;
	
	Для Индекс = 1 По 3 Цикл
		Если Индекс <= ДанныеСчета.КоличествоСубконто Тогда
			Если ПоляОбъекта.Свойство("Субконто" + Индекс) Тогда
				//Объект.Проводки[ПоляОбъекта["Субконто" + Индекс]] = ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"].ПривестиЗначение(Объект[ПоляОбъекта["Субконто" + Индекс]]);
				//Если ЭтоТаблица Тогда
					ТекСтрока[ПоляОбъекта["Субконто" + Индекс] + "Доступность"] = Истина;
					Если ПоляОбъекта.Свойство("Элементы") Тогда
						ПоляОбъекта.Элементы[ПоляОбъекта["ЭлементСубконто" + Индекс]].ПодсказкаВвода = ДанныеСчета["ВидСубконто" + Индекс + "Наименование"];
					КонецЕсли;
				//КонецЕсли;	
			КонецЕсли;
			
			Если Индекс = 2 И ПоляОбъекта.Свойство("Субконто" + Индекс + "ВладелецРазличен") Тогда
				ТекСтрока[ПоляОбъекта["Субконто" + Индекс] + "ВладелецРазличен"] = ДанныеСчета["ВидСубконто" + Индекс + "ВладелецРазличен"];//на форму на всякий случай значение доступности владельца
				Если ПоляОбъекта.Свойство("ЭлементСубконто" + Индекс + "БезВладельца") Тогда
					ПоляОбъекта.Элементы[ПоляОбъекта["ЭлементСубконто" + Индекс + "БезВладельца"]].ПодсказкаВвода = ДанныеСчета["ВидСубконто" + Индекс + "Наименование"];
				КонецЕсли;
			КонецЕсли;
			
			
			
		Иначе 
			Если ПоляОбъекта.Свойство("Субконто" + Индекс) Тогда
				Попытка
					ТекСтрока[ПоляОбъекта["Субконто" + Индекс]] = Неопределено;
				Исключение
				КонецПопытки;
				Если ЭтоТаблица Тогда
					ТекСтрока[ПоляОбъекта["Субконто" + Индекс] + "Доступность"] = Ложь;
					Если ПоляОбъекта.Свойство("Элементы") Тогда
						ПоляОбъекта.Элементы[ПоляОбъекта["ЭлементСубконто" + Индекс]].ПодсказкаВвода = ДанныеСчета["ВидСубконто" + Индекс + "Наименование"];
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если ПоляОбъекта.Свойство("Субконто" + Индекс + "ВладелецРазличен") Тогда
				ТекСтрока[ПоляОбъекта["Субконто" + Индекс] + "ВладелецРазличен"] = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПоляОбъекта.Свойство("Подразделение") И ТекСтрока.Свойство(ПоляОбъекта["Подразделение"] + "Доступность") Тогда
		ТекСтрока[ПоляОбъекта["Подразделение"] + "Доступность"] = ДанныеСчета.УчетПоПодразделениям;
		Если ПоляОбъекта.Свойство("Элементы") Тогда
			ПоляОбъекта.Элементы[ПоляОбъекта["ЭлементПодразделение"]].ПодсказкаВвода = ДанныеСчета.СинонимПодразделения;
		КонецЕсли;
	КонецЕсли;
	
	Если ПоляОбъекта.Свойство("Количество") Тогда
		ТекСтрока[ПоляОбъекта["Количество"] + "Доступность"] = ДанныеСчета.Количественный;
	КонецЕсли;
	
	Если ПоляОбъекта.Свойство("Валюта") Тогда	
		ВалютаТолькоДенежныйСчет = ПоляОбъекта.Свойство("ВалютаТолькоДенежныйСчет") И ПоляОбъекта.ВалютаТолькоДенежныйСчет;
		ЕстьРасшифровкаСуммы = ПоляОбъекта.Свойство("ЕстьРасшифровкаСуммы") И ПоляОбъекта.ЕстьРасшифровкаСуммы;
		Если ПоляОбъекта.Свойство("ДоговорВалютный") Тогда
			ВидимостьВалюты = ?(ВалютаТолькоДенежныйСчет, (ДанныеСчета.Валютный И ДанныеСчета.ДенежныйСчет) Или ТекСтрока.ДоговорВалютный, ДанныеСчета.ВалютныйРеквизит Или ТекСтрока.ДоговорВалютный);
		Иначе
			 ВидимостьВалюты = ?(ВалютаТолькоДенежныйСчет, (ДанныеСчета.Валютный И ДанныеСчета.ДенежныйСчет), ДанныеСчета.ВалютныйРеквизит);
		КонецЕсли;
		ТекСтрока[ПоляОбъекта["Валюта"] + "Доступность"] = ВидимостьВалюты;
		ТекСтрока[ПоляОбъекта["ВалютнаяСумма"] + "Доступность"] = ВидимостьВалюты ИЛИ ЕстьРасшифровкаСуммы;
		
		Если ПоляОбъекта.Свойство("Элементы") И ПоляОбъекта.Свойство("ЭлементВалюта") Тогда
			ПоляОбъекта.Элементы[ПоляОбъекта["ЭлементВалюта"]].ПодсказкаВвода = "Валюта";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПоляОбъекта.Свойство("ВалютаДт") Тогда
		ТекСтрока[ПоляОбъекта["ВалютаДт"] + "Доступность"] = ДанныеСчета.Валютный;
		//ТекСтрока[ПоляОбъекта["ВалютнаяСуммаДт"] + "Доступность"] = ДанныеСчета.Валютный;
	КонецЕсли;
	
	Если ПоляОбъекта.Свойство("ВалютаКт") Тогда
		ТекСтрока[ПоляОбъекта["ВалютаКт"] + "Доступность"] = ДанныеСчета.Валютный;
		//ТекСтрока[ПоляОбъекта["ВалютнаяСуммаКт"] + "Доступность"] = ДанныеСчета.Валютный;
	КонецЕсли;
	
	Если ПоляОбъекта.Свойство("КоличествоДт") Тогда
		ТекСтрока[ПоляОбъекта["КоличествоДт"] + "Доступность"] = ДанныеСчета.Количественный;
	КонецЕсли;
	
	Если ПоляОбъекта.Свойство("КоличествоКт") Тогда
		ТекСтрока[ПоляОбъекта["КоличествоКт"] + "Доступность"] = ДанныеСчета.Количественный;
	КонецЕсли;
	
	
	Если ПоляОбъекта.Свойство("КорСчет79") Тогда
		Попытка
			ТекСтрока["КорСчет79"] = ПоляОбъекта.КорСчет79;
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

//добавляет выбранный маршрут в ТЧ ДопСогласование
Процедура ДобавитьМаршрут(МассивПользователей, ТЧ, ИмяКолонки, Предприятия) Экспорт
	
	Для каждого ТекПользователь Из МассивПользователей Цикл
		Если ТипЗнч(ТекПользователь) = Тип("СправочникСсылка.Пользователи") Тогда
			НоваяСтрока = ТЧ.Добавить();
			Если НоваяСтрока.Свойство("Автор") Тогда
				НоваяСтрока.Автор = БюджетныйНаСервере.ПолучитьПользователя();
			КонецЕсли;
			НоваяСтрока[ИмяКолонки] = ТекПользователь;
			Если НоваяСтрока.Свойство("РезультирующееСогласование") Тогда
				РезультирующееСогласование = БюджетныйНаСервере.ВернутьРеквизиты(ТекПользователь, "РезультирующееСогласование");
				НоваяСтрока.РезультирующееСогласование = РезультирующееСогласование.РезультирующееСогласование;
			КонецЕсли;
			
		Иначе
			Для каждого ТекПредприятие Из Предприятия Цикл
				ТекПол = БюджетныйНаСервере.ВернутьРеквизиты(ТекПредприятие, ТекПользователь);
				Если ЗначениеЗаполнено(ТекПол[ТекПользователь]) Тогда
					НоваяСтрока = ТЧ.Добавить();
					Если НоваяСтрока.Свойство("Автор") Тогда
						НоваяСтрока.Автор = БюджетныйНаСервере.ПолучитьПользователя();
					КонецЕсли;
					НоваяСтрока[ИмяКолонки] = ТекПол[ТекПользователь];
				КонецЕсли;
				Если НоваяСтрока.Свойство("РезультирующееСогласование") Тогда
					РезультирующееСогласование = БюджетныйНаСервере.ВернутьРеквизиты(ТекПол[ТекПользователь], "РезультирующееСогласование");
					НоваяСтрока.РезультирующееСогласование = РезультирующееСогласование.РезультирующееСогласование;
				КонецЕсли;
				
			КонецЦикла; 
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры  

Процедура ВыборЗаявкиНаОтгрузку(ТекПредприятие, Элемент, ИмяФормы = Неопределено) Экспорт
	
	Если ИмяФормы = Неопределено Тогда
		ИмяФормы = "Документ.Д_ЗаявкаНаОтгрузку.ФормаВыбора";
	КонецЕсли;
	
	ТекФорма = ПолучитьФорму(ИмяФормы,,Элемент); 
	
	НовыйОтборГруппа = ТекФорма.Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	НовыйОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	НовыйОтбор = НовыйОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Док");
	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	НовыйОтбор.ПравоеЗначение = ТекПредприятие;
	
	НовыйОтбор = НовыйОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Предприятие");
	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	НовыйОтбор.ПравоеЗначение = ТекПредприятие;
	
	НовыйОтбор = НовыйОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Предприятие2");
	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	НовыйОтбор.ПравоеЗначение = ТекПредприятие;
	ТекФорма.Открыть();
	
	

КонецПроцедуры
 
Процедура ОтправитьИЗакрытьЗадание(БылСтартован, БылЗавершен, ПараметрКоманды) Экспорт

	
	Если НЕ БылСтартован Тогда
		БПСервер.ОтправитьИЗакрытьЗаданиеСервер(ПараметрКоманды);
		ОповеститьОбИзменении(Тип("СправочникСсылка.Пользователи"));
		//ИначеЕсли БылЗавершен Тогда
		//	Если Вопрос("Внимание! Результаты уже выполненных исполнителями заданий сотрутся. Возобновить задания? ", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да  Тогда
		//		БПСервер.ОтправитьИЗакрытьЗаданиеСервер(ПараметрКоманды);
		//		ОповеститьОбИзменении(Тип("СправочникСсылка.Пользователи"));
		//	КонецЕсли;
	Иначе
		БПСервер.ОбновитьЗаданияИсполнителям(ПараметрКоманды);
		ОповеститьОбИзменении(Тип("СправочникСсылка.Пользователи"));
	КонецЕсли;
	Оповестить("ЗакрытьФормуЗадания");
	Оповестить("ОбновитьСписокЗадач");
	

КонецПроцедуры


////////////////////////////////////
//проверка пароля

&НаКлиенте
Функция ПроверитьПароль(ТекстПароля, БезСообщения = Ложь) Экспорт
    ОчиститьСообщения();
	
	Если СтрДлина(ТекстПароля) < 6 Тогда
		Если НЕ БезСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Пароль должен состоять минимум из 6 символов!",, "Пароль2");	
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;	
	
	RUS = СодержитСимволы(1, ТекстПароля);
	ru = СодержитСимволы(2, ТекстПароля);
	ENS = СодержитСимволы(3, ТекстПароля);
	en = СодержитСимволы(4, ТекстПароля);
	DG = СодержитСимволы(5, ТекстПароля);
	//SC = СодержитСимволы(6, ТекстПароля);
	Ответ = Истина;
	Если RUS ИЛИ ru Тогда
		Если НЕ БезСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Пароль содержит недопустимые символы!",, "Пароль2");	
		КонецЕсли;
		Ответ = ЛОЖЬ;
	КонецЕсли;
	Если en+DG < 2 Тогда
		Если НЕ БезСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Пароль не удовлетворяет уровню сложности!",, "Пароль2");	
		КонецЕсли;
		Ответ = ЛОЖЬ;
	КонецЕсли;
	Возврат Ответ;
	//Сообщить("Русские буквы в ВЕРХНЕМ регистре: " + RU);
	//Сообщить("Русские буквы в нижнем регистре: " + ru);
	//Сообщить("Латинские буквы в ВЕРХНЕМ регистре: " + EN);
	//Сообщить("Латинские буквы в нижнем регистре: " + en);
	//Сообщить("Цифры: " + DG);
	//Сообщить("Специальные сиволы: " + SC);
КонецФункции


&НаКлиенте
Функция СодержитСимволы(ТипСимволов, ПроверяемыйТекст)
   /// ТипСимволов:
   ///   1 - Русские буквы в ВЕРХНЕМ регистре
   
   ///   2 - Русские буквы в нижнем регистре
   
   ///   3 - Латинские буквы в ВЕРХНЕМ регистре
   
   ///   4 - Латинские буквы в нижнем регистре
   
   ///   5 - Цифры
   
   ///   6 - Специальные сиволы
   
 
    НаборОбязательныхСимволов_RU_U = "ЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ";
    НаборОбязательныхСимволов_RU_L = "йцукенгшщзхъфывапролджэячсмитьбю";
    НаборОбязательныхСимволов_EN_U = "QWERTYUIOPASDFGHJKLZXCVBNM";
    НаборОбязательныхСимволов_EN_L = "qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM";
    НаборОбязательныхСимволов_DG = "0123456789";
    НаборОбязательныхСимволов_SC = "№!@#$%^&*()_+-|/\?.><,*;:`~";

    
    ЭталонныйНаборСимволов = "";
    Если ТипСимволов = 1 Тогда
        ЭталонныйНаборСимволов = НаборОбязательныхСимволов_RU_U;
    ИначеЕсли ТипСимволов = 2 Тогда
        ЭталонныйНаборСимволов = НаборОбязательныхСимволов_RU_L;
    ИначеЕсли ТипСимволов = 3 Тогда
        ЭталонныйНаборСимволов = НаборОбязательныхСимволов_EN_U;
    ИначеЕсли ТипСимволов = 4 Тогда
        ЭталонныйНаборСимволов = НаборОбязательныхСимволов_EN_L;
    ИначеЕсли ТипСимволов = 5 Тогда
        ЭталонныйНаборСимволов = НаборОбязательныхСимволов_DG;
    ИначеЕсли ТипСимволов = 6 Тогда
        ЭталонныйНаборСимволов = НаборОбязательныхСимволов_SC;
    КонецЕсли;
    
    содержит = Ложь;
    Если НЕ ПустаяСтрока(ЭталонныйНаборСимволов) Тогда
        Для а = 1 По СтрДлина(ПроверяемыйТекст) Цикл
            код1 = КодСимвола(Сред(ПроверяемыйТекст, а, 1));
            Для б = 1 По СтрДлина(ЭталонныйНаборСимволов) Цикл
                код2 = КодСимвола(Сред(ЭталонныйНаборСимволов, б, 1));
                Если код1 = код2 Тогда
                    содержит = Истина;
                    Прервать;
                КонецЕсли;
            КонецЦикла;
            Если содержит Тогда
                Прервать;
            КонецЕсли;
        КонецЦикла;
    КонецЕсли;
    
    Возврат содержит;
    
КонецФункции

////////////////////////////////////

//////////
//работа с реквизитами красивая
Процедура ЗаполнитьСписокРеквизита(ЭтаФорма, ИмяРеквизита, МассивЗначений, ТекЗначение = Неопределено, ВыбиратьИзСписка = Истина) Экспорт
	//ЭтаФорма.Элементы[ИмяРеквизита].СписокВыбора.Очистить();
	//
	//Если ЗначениеЗаполнено(ТекЗначение) Тогда
	//	Если НЕ ТипЗнч(ТекЗначение) = Тип("Массив") Тогда
	//    	МассивЗначений = Новый Массив;
	//		МассивЗначений.Добавить(ТекЗначение);
	//	Иначе
	//		МассивЗначений = ТекЗначение;	
	//	КонецЕсли;
	//	Для каждого ТекЭл Из МассивЗначений Цикл
	//		Если ЗначениеЗаполнено(ТекЭл) И ЭтаФорма.Элементы[ИмяРеквизита].СписокВыбора.НайтиПоЗначению(ТекЭл) = Неопределено Тогда
	//			ЭтаФорма.Элементы[ИмяРеквизита].СписокВыбора.Добавить(ТекЭл);
	//		КонецЕсли;
	//	КонецЦикла; 
	//КонецЕсли;
	//
	//Если ТипЗнч(МассивЗначений) = Тип("СписокЗначений") Тогда
	//	МассивЗначений = МассивЗначений.ВыгрузитьЭлементы();
	//КонецЕсли;
	//
	//Для каждого ТекЭлемент Из МассивЗначений Цикл
	//	Если ЗначениеЗаполнено(ТекЭлемент) И ЭтаФорма.Элементы[ИмяРеквизита].СписокВыбора.НайтиПоЗначению(ТекЭлемент) = Неопределено Тогда
	//		ЭтаФорма.Элементы[ИмяРеквизита].СписокВыбора.Добавить(ТекЭлемент);
	//	КонецЕсли;
	//КонецЦикла; 
	//
	//Если НЕ ЭтаФорма.Элементы[ИмяРеквизита].СписокВыбора.Количество() Тогда
	//	ЭтаФорма.Элементы[ИмяРеквизита].БыстрыйВыбор = Ложь;
	//	ЭтаФорма.Элементы[ИмяРеквизита].РежимВыбораИзСписка = Ложь;
	//Иначе
	//	Если ВыбиратьИзСписка Тогда
	//		ЭтаФорма.Элементы[ИмяРеквизита].БыстрыйВыбор = Истина;
	//		ЭтаФорма.Элементы[ИмяРеквизита].РежимВыбораИзСписка = Истина;
	//		ЭтаФорма.Элементы[ИмяРеквизита].СписокВыбора.Добавить("Выбрать из списка...");
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

Процедура ПриНачалеВыбораРеквизитаВСписке(ЭтаФорма, ИмяРеквизита, ТекЗначение, ИмяСправочника, ТекРеквизит, СтандартнаяОбработка, МенятьМодифицированность = Ложь, ТочноеИмя = Ложь) Экспорт
	СтандартнаяОбработка = Ложь;
	Если Не ТекЗначение = Неопределено Тогда
		Если ТекЗначение.Значение = "Выбрать из списка..." Тогда
			ТекВыбор1 = ПолучитьФорму("Справочник." + ИмяСправочника + ".ФормаВыбора", Новый Структура("ТекущаяСтрока, РежимВыбора", ТекРеквизит, Истина));
			Для каждого ТекПараметр Из ЭтаФорма.Элементы[Прав(ИмяРеквизита, СтрДлина(ИмяРеквизита) - ?(ТочноеИмя, 0, 13))].СвязиПараметровВыбора Цикл
				НовыйОтбор = ТекВыбор1.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); //слабое место "Список"
				НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Прав(ТекПараметр.Имя, СтрДлина(ТекПараметр.Имя) - 6));
				НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				НовыйОтбор.ПравоеЗначение = ЭтаФорма.Объект[Прав(ТекПараметр.ПутьКДанным, СтрДлина(ТекПараметр.ПутьКДанным) - 7)];
			КонецЦикла;
			ТекВыбор = ТекВыбор1.ОткрытьМодально();
			Если НЕ ТекВыбор = Неопределено Тогда
				Если ЭтаФорма.Элементы[ИмяРеквизита].СписокВыбора.НайтиПоЗначению(ТекВыбор) = Неопределено Тогда
					ЭтаФорма.Элементы[ИмяРеквизита].СписокВыбора.Вставить(ЭтаФорма.Элементы[ИмяРеквизита].СписокВыбора.Количество() - 1, ТекВыбор);
				КонецЕсли;
				ТекРеквизит = ТекВыбор;
			Иначе
				Возврат;
			КонецЕсли;
		Иначе
			ТекРеквизит = ТекЗначение.Значение;
		КонецЕсли;
		Если МенятьМодифицированность Тогда
			Модифицированность = Истина
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСписокРеквизитаДубль2(ЭтаФорма, ИмяРеквизита, МассивЗначений, ТекЗначение = Неопределено) Экспорт
	ЭтаФорма[ИмяРеквизита].Очистить();
	
	Если ЗначениеЗаполнено(ТекЗначение) Тогда
		Если НЕ ТипЗнч(ТекЗначение) = Тип("Массив") Тогда
	    	МассивЗначений = Новый Массив;
			МассивЗначений.Добавить(ТекЗначение);
		Иначе
			МассивЗначений = ТекЗначение;	
		КонецЕсли;
		Для каждого ТекЭл Из МассивЗначений Цикл
			Если ЗначениеЗаполнено(ТекЭл) И ЭтаФорма[ИмяРеквизита].НайтиПоЗначению(ТекЭл) = Неопределено Тогда
				ЭтаФорма[ИмяРеквизита].Добавить(ТекЭл);
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	Если ТипЗнч(МассивЗначений) = Тип("СписокЗначений") Тогда
		МассивЗначений = МассивЗначений.ВыгрузитьЭлементы();
	КонецЕсли;
	
	Для каждого ТекЭлемент Из МассивЗначений Цикл
		Если ЗначениеЗаполнено(ТекЭлемент) И ЭтаФорма[ИмяРеквизита].НайтиПоЗначению(ТекЭлемент) = Неопределено Тогда
			ЭтаФорма[ИмяРеквизита].Добавить(ТекЭлемент);
		КонецЕсли;
	КонецЦикла; 
	
	Если ЭтаФорма[ИмяРеквизита].Количество() Тогда
		//ЭтаФорма.Элементы[ИмяРеквизита].БыстрыйВыбор = Истина;
		//ЭтаФорма.Элементы[ИмяРеквизита].РежимВыбораИзСписка = Истина;
		ЭтаФорма[ИмяРеквизита].Добавить("Выбрать из списка...");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриНачалеВыбораРеквизитаВСпискеДубль2(ЭтаФорма, ИмяРеквизита, ТекЗначение, ИмяСправочника, ТекРеквизит, СтандартнаяОбработка, МенятьМодифицированность = Ложь) Экспорт
	СтандартнаяОбработка = Ложь;
	Если Не ТекЗначение = Неопределено Тогда
		Если ТекЗначение.Значение = "Выбрать из списка..." Тогда
			ТекВыбор1 = ПолучитьФорму("Справочник." + ИмяСправочника + ".ФормаВыбора", Новый Структура("ТекущаяСтрока", ТекРеквизит));
			Для каждого ТекПараметр Из ЭтаФорма.Элементы[Прав(ИмяРеквизита, СтрДлина(ИмяРеквизита) - 13)].СвязиПараметровВыбора Цикл
				НовыйОтбор = ТекВыбор1.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); //слабое место "Список"
				НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Прав(ТекПараметр.Имя, СтрДлина(ТекПараметр.Имя) - 6));
				НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				НовыйОтбор.ПравоеЗначение = ЭтаФорма.Объект[Прав(ТекПараметр.ПутьКДанным, СтрДлина(ТекПараметр.ПутьКДанным) - 7)];
			КонецЦикла;
			ТекВыбор = ТекВыбор1.ОткрытьМодально();
			Если НЕ ТекВыбор = Неопределено Тогда
				Если ЭтаФорма[ИмяРеквизита].НайтиПоЗначению(ТекВыбор) = Неопределено Тогда
					ЭтаФорма[ИмяРеквизита].Вставить(ЭтаФорма[ИмяРеквизита].Количество() - 1, ТекВыбор);
				КонецЕсли;
				ТекРеквизит = ТекВыбор;
			Иначе
				Возврат;
			КонецЕсли;
		Иначе
			ТекРеквизит = ТекЗначение.Значение;
		КонецЕсли;
		Если МенятьМодифицированность Тогда
			Модифицированность = Истина
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

///////////

Процедура УстановитьОтслеживаниеДокумента(ПараметрКоманды, Элементы) Экспорт
	Если ТипЗнч(ПараметрКоманды) = Тип("ЗадачаСсылка.Задача") Тогда
		ТекДокумент = БюджетныйНаСервере.ВернутьРеквизит(ПараметрКоманды, "Заявка");
	Иначе
		ТекДокумент = ПараметрКоманды;	
	КонецЕсли;
	
	ОтслеживатьСЗ = НЕ БПСервер.ПроверитьОтслеживаниеЗаявки(ТекДокумент);	
	БПСервер.ОтслеживатьЗаявкуНаСервере(ОтслеживатьСЗ, ТекДокумент);
	Если НЕ Элементы.Найти("ФормаБизнесПроцессСогласованиеОбщееОтслеживатьДокумент") = Неопределено Тогда
		Элементы.ФормаБизнесПроцессСогласованиеОбщееОтслеживатьДокумент.Пометка = ОтслеживатьСЗ;
	КонецЕсли;
	Состояние("Отслеживание документа """ + Строка(ТекДокумент) + "" + ?(ОтслеживатьСЗ, " ВКЛЮЧЕНО.", " ВЫКЛЮЧЕНО"));
	//Сообщить("Отслеживание документа """ + Строка(ТекДокумент) + "" + ?(ОтслеживатьСЗ, " ВКЛЮЧЕНО.", " ВЫКЛЮЧЕНО"));
	Оповестить("ОбновитьСписокЗадач");
КонецПроцедуры

Процедура ПриНажатииHTML(Элемент, ДанныеСобытия, СтандартнаяОбработка, ТекстHTML = "") Экспорт
	СтандартнаяОбработка = Ложь;
	Если Лев(ДанныеСобытия.Href, 6) = "v8doc:" Тогда 
		НавигационнаяСсылка = Сред(ДанныеСобытия.Href, 7);
		ПерейтиПоНавигационнойСсылке(НавигационнаяСсылка);
	Иначе
		Если ЗначениеЗаполнено(ДанныеСобытия.Href) И ЗначениеЗаполнено(ТекстHTML) Тогда
			ТекстHTML = "<HTML><HEAD>
			|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type><LINK rel=stylesheet type=text/css href=""__STYLE__""><BASE href=""v8config://26d610bd-8712-4000-956d-0edbe58646d8/mdobject/idcf715f2f-493b-44cc-8c21-3424f7d402ea/8eb4fad1-1fa6-403e-970f-2c12dbb43e23"">
			|<META name=GENERATOR content=""MSHTML 11.00.9600.17041""></HEAD>
			|<BODY><font face=""Tahoma, Geneva, sans-serif"">";
			ТекстHTML = ТекстHTML + "<script type=""text/javascript"">function message() {location = """ + ДанныеСобытия.Href + """;}</script>";
			ТекстHTML = ТекстHTML + "</font></BODY></HTML>";
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры


Функция РелизНовее(РелизПлатформы, РелизОбновления) Экспорт
	
	Если РелизПлатформы = "" ИЛИ РелизОбновления = "" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НачСтр = 1;
	МассивЧисел1 = Новый Массив;
	Для Сим = 1  по СтрДлина(РелизПлатформы)  Цикл
		Если Сред(РелизПлатформы, Сим, 1) = "." Тогда
			МассивЧисел1.Добавить(Число(Сред(РелизПлатформы, НачСтр, Сим - НачСтр)));
			НачСтр = Сим + 1;	
		КонецЕсли;
	КонецЦикла;
	МассивЧисел1.Добавить(Число(Сред(РелизПлатформы, НачСтр, Сим - НачСтр)));
	
	НачСтр = 1;
	МассивЧисел2 = Новый Массив;
	Для Сим = 1  по СтрДлина(РелизОбновления)  Цикл
		Если Сред(РелизОбновления, Сим, 1) = "." Тогда
			МассивЧисел2.Добавить(Число(Сред(РелизОбновления, НачСтр, Сим - НачСтр)));
			НачСтр = Сим + 1;	
		КонецЕсли;
	КонецЦикла;
	МассивЧисел2.Добавить(Число(Сред(РелизОбновления, НачСтр, Сим - НачСтр)));
	
	Для Т = 0 По МассивЧисел1.Количество() - 1 Цикл
		Если МассивЧисел1[Т] < МассивЧисел2[Т] Тогда
			Возврат Истина;
		ИначеЕсли МассивЧисел1[Т] > МассивЧисел2[Т] Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат Ложь;

	

КонецФункции // ()


//используется в формах исполнения СогласованияОбщий для создания подчиненных документов
#Область ИсполнениеСогласованиеОбщее 
	

Процедура ДобавитьПодчиненныйВИсполнение(Объект, Элементы, Элемент, Отказ, Копирование, Родитель, Группа) Экспорт

		Отказ = Истина;
	
	//ТипДокументаНаОсновании = ВернутьТипПодчиненногоДокументаНаСервере();
	//
	//Если ТипДокументаНаОсновании = "" Тогда
	//	Возврат
	//ИначеЕсли ТипДокументаНаОсновании = "ПР_Отгрузка" Тогда
	//	ОтгрузкаФакт(Неопределено);
	//ИначеЕсли ТипДокументаНаОсновании = "Л_ПутевойЛист" Тогда
	//	АвтоТранспорт(Неопределено); 
	//Иначе	
	//	ОткрытьФорму("Документ." + ТипДокументаНаОсновании + ".ФормаОбъекта", Новый Структура("Основание", Объект.Заявка), Элемент);
	//КонецЕсли;	
	
	Если Элементы.ПодчиненныеДокументыДокумент.ОграничениеТипа.СодержитТип(Тип("ДокументСсылка.КЗ_АвансовыйОтчет")) ИЛИ Элементы.ПодчиненныеДокументыДокумент.ОграничениеТипа.СодержитТип(Тип("ДокументСсылка.УЧ_АвансовыйОтчет")) Тогда
		
		Если БюджетныйНаСервере.ПолучитьРольПользователя()="Учетчик" Тогда
			ОткрытьФорму("Документ.УЧ_АвансовыйОтчет.ФормаОбъекта", Новый Структура("Основание", Объект.Заявка), Элемент); 	
		ИначеЕсли БюджетныйНаСервере.ПолучитьРольПользователя()="Кассир" тогда
			ОткрытьФорму("Документ.КЗ_АвансовыйОтчет.ФормаОбъекта", Новый Структура("Основание", Объект.Заявка), Элемент); 				
		ИначеЕсли БюджетныйНаСервере.ПолучитьРольПользователя()="КУ" тогда
			СписокКнопок = Новый СписокЗначений;
			СписокКнопок.Добавить(КодВозвратаДиалога.Да, "Кассовый");
			СписокКнопок.Добавить(КодВозвратаДиалога.Нет, "Учетный");
			СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, "Отмена");
			Ответ = Вопрос("Создать Авансовый отчет",СписокКнопок, 0);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ОткрытьФорму("Документ.КЗ_АвансовыйОтчет.ФормаОбъекта", Новый Структура("Основание", Объект.Заявка), Элемент);
			ИначеЕсли Ответ=КодВозвратаДиалога.Нет тогда
				ОткрытьФорму("Документ.УЧ_АвансовыйОтчет.ФормаОбъекта", Новый Структура("Основание", Объект.Заявка), Элемент); 	
			ИначеЕсли Ответ=КодВозвратаДиалога.Отмена тогда				
				Возврат;
			КонецЕсли; 
	
			
		КонецЕсли;
		
	//ИначеЕсли Элементы.ПодчиненныеДокументыДокумент.ОграничениеТипа.СодержитТип(Тип("ДокументСсылка.Л_ПутевойЛист")) Тогда	
	//	АвтоТранспорт(Объект, Неопределено); 	
	//ИначеЕсли Элементы.ПодчиненныеДокументыДокумент.ОграничениеТипа.СодержитТип(Тип("ДокументСсылка.Д_УведомлениеРАР"))	Тогда
	//	ОткрытьФорму("Документ.Д_УведомлениеРАР.ФормаОбъекта", Новый Структура("Основание", Объект.Заявка), Элемент);
	//ИначеЕсли Элементы.ПодчиненныеДокументыДокумент.ОграничениеТипа.СодержитТип(Тип("ДокументСсылка.ПР_Отгрузка")) Тогда	
	//	ОтгрузкаФакт(Объект, Неопределено);
	//ИначеЕсли Элементы.ПодчиненныеДокументыДокумент.ОграничениеТипа.СодержитТип(Тип("ДокументСсылка.Л_ОтправкаВагонов"))	Тогда
	//	ОткрытьФорму("Документ.Л_ОтправкаВагонов.ФормаОбъекта", Новый Структура("Основание", Объект.Заявка), Элемент);
	ИначеЕсли Элементы.ПодчиненныеДокументыДокумент.ОграничениеТипа.СодержитТип(Тип("ДокументСсылка.КадровыеДвижения"))	Тогда
		
		РеквизитыЗаявки = БюджетныйНаСервере.ВернутьРеквизиты(Объект.Заявка, "Сотрудник, ДолжностьРегл, ДолжностьУпр, Фамилия, Имя, Отчество, ПредприятиеУпр, ПредприятиеУпр.Родитель");
		
		НовыйСотрудник = РеквизитыЗаявки.Сотрудник;
		Если ТипЗнч(РеквизитыЗаявки.Сотрудник) = Тип("Строка") Тогда
			НовыйСотрудник = БюджетныйНаСервере.НайтиСотрудника(РеквизитыЗаявки);
			Если НовыйСотрудник = Неопределено Тогда
				Если Вопрос("Сотрудник """ + Строка(РеквизитыЗаявки.Сотрудник) + """ в заявке не является элементом справочника ""Сотрудники"". Создать сотрудника в папке Кадрового учета?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да  Тогда
					НовыйСотрудникФорма = ПолучитьФорму("Справочник.Сотрудники.ФормаОбъекта");
					ЗаполнитьЗначенияСвойств(НовыйСотрудникФорма.Объект, РеквизитыЗаявки);
					НовыйСотрудникФорма.Объект.Родитель = ПредопределенноеЗначение("Справочник.Сотрудники.ПЕРСОНАЛ");
					
					Если ЗначениеЗаполнено(РеквизитыЗаявки.ПредприятиеУпр) Тогда
						НоваяСтрока = НовыйСотрудникФорма.Объект.Предприятия.Добавить();
						НоваяСтрока.Предприятие = РеквизитыЗаявки.ПредприятиеУпр;
						//НовыйСотрудникФорма.Объект.НаправлениеДеятельности = РеквизитыЗаявки.ПредприятиеУпрНаправлениеДеятельности;					
						НовыйСотрудникФорма.Объект.ОсновноеПредприятие = РеквизитыЗаявки.ПредприятиеУпр;
					КонецЕсли;
					
					НовыйСотрудникФорма.ОткрытьМодально();
					НовыйСотрудник = НовыйСотрудникФорма.Объект.Ссылка;
				КонецЕсли;		
			КонецЕсли;
		КонецЕсли;
		
		ДолжностиСовпадают = (РеквизитыЗаявки.ДолжностьУпр = РеквизитыЗаявки.ДолжностьРегл);
		НоваяДолжностьУпр = РеквизитыЗаявки.ДолжностьУпр;
		НоваяДолжностьРегл = РеквизитыЗаявки.ДолжностьРегл;
		Если ТипЗнч(РеквизитыЗаявки.ДолжностьУпр) = Тип("Строка") Тогда
			НоваяДолжностьУпр = БюджетныйНаСервере.НайтиДолжность(РеквизитыЗаявки.ДолжностьУпр);
			Если НоваяДолжностьУпр = Неопределено Тогда
				Если Вопрос("Управленческая должность """ + Строка(РеквизитыЗаявки.ДолжностьУпр) + """ в заявке не является элементом справочника ""Должности"". Создать должность в папке Кадрового учета?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да  Тогда
					НоваяДолжностьУпрФорма = ПолучитьФорму("Справочник.Д_Должности.ФормаОбъекта");
					НоваяДолжностьУпрФорма.Объект.Родитель = ПредопределенноеЗначение("Справочник.Д_Должности.ДолжностиКадровогоУчета");
					НоваяДолжностьУпрФорма.Объект.Наименование = РеквизитыЗаявки.ДолжностьУпр;
					НоваяДолжностьУпрФорма.ОткрытьМодально();
					НоваяДолжностьУпр = НоваяДолжностьУпрФорма.Объект.Ссылка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(РеквизитыЗаявки.ДолжностьРегл) = Тип("Строка") И НЕ ДолжностиСовпадают  Тогда 
			НоваяДолжностьРегл = БюджетныйНаСервере.НайтиДолжность(РеквизитыЗаявки.ДолжностьРегл);
			Если НоваяДолжностьРегл = Неопределено Тогда
				Если Вопрос("Регламентная должность """ + Строка(РеквизитыЗаявки.ДолжностьРегл) + """ в заявке не является элементом справочника ""Должности"". Создать должность в папке Кадрового учета?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да  Тогда
					НоваяДолжностьРеглФорма = ПолучитьФорму("Справочник.Д_Должности.ФормаОбъекта");
					НоваяДолжностьРеглФорма.Объект.Родитель = ПредопределенноеЗначение("Справочник.Д_Должности.ДолжностиКадровогоУчета");
					НоваяДолжностьРеглФорма.Объект.Наименование = РеквизитыЗаявки.ДолжностьРегл;
					НоваяДолжностьРеглФорма.ОткрытьМодально();
					НоваяДолжностьРегл = НоваяДолжностьРеглФорма.Объект.Ссылка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ТекФорма = ПолучитьФорму("Документ.КадровыеДвижения.ФормаОбъекта", Новый Структура("Основание", Объект.Заявка), Элемент);
		ТекФорма.Объект.Сотрудник = НовыйСотрудник;
		
		Для каждого ТекСТрока Из ТекФорма.Объект.УчетныеДанныеПрежние Цикл
			ТекСТрока.Должность = НоваяДолжностьУпр;
		КонецЦикла;
		Для каждого ТекСТрока Из ТекФорма.Объект.УчетныеДанные Цикл
			ТекСТрока.Должность = НоваяДолжностьУпр;
		КонецЦикла;
		Для каждого ТекСТрока Из ТекФорма.Объект.РегламентированныеДанныеПрежние Цикл
			ТекСТрока.Должность = НоваяДолжностьРегл;
		КонецЦикла; 
		Для каждого ТекСТрока Из ТекФорма.Объект.РегламентированныеДанные Цикл
			ТекСТрока.Должность = НоваяДолжностьРегл;
		КонецЦикла; 
		
		ТекФорма.Открыть();
		
	КонецЕсли;

КонецПроцедуры

Процедура АвтоТранспорт(Объект, Команда)
	РеквизитыЗаявки = БюджетныйНаСервере.ВернутьРеквизиты(Объект.Заявка, "Док, ПодразделениеДок, ТипРеализации, Ссылка, Предприятие, Грузополучатель, Количество, Предприятие2, Количество2, Номенклатура, Номенклатура2, Подразделение, Подразделение2");
	
	Если Объект.Предприятие = РеквизитыЗаявки.Предприятие Тогда
		НоваяФорма = ПолучитьФорму("Документ.Л_ПутевойЛист.ФормаОбъекта");  
		НоваяФорма.Объект.Получатель = РеквизитыЗаявки.Грузополучатель;
		НоваяФорма.Объект.Количество = РеквизитыЗаявки.Количество;
		НоваяФорма.Объект.Подразделение = РеквизитыЗаявки.Подразделение;
		НоваяФорма.Объект.Отправитель = РеквизитыЗаявки.Предприятие;
		НоваяФорма.Объект.ДокОснование = РеквизитыЗаявки.Ссылка;
		НоваяФорма.Объект.ТипПродукции = РеквизитыЗаявки.ТипРеализации;
		НоваяФорма.Объект.Плательщик = РеквизитыЗаявки.Док;
		НоваяФорма.Объект.ПодразделениеПлательщика = РеквизитыЗаявки.ПодразделениеДок;
		НоваяФорма.Открыть();
	ИначеЕсли Объект.Предприятие = РеквизитыЗаявки.Предприятие2 Тогда
		НоваяФорма = ПолучитьФорму("Документ.Л_ПутевойЛист.ФормаОбъекта");  
		НоваяФорма.Объект.Получатель = РеквизитыЗаявки.Грузополучатель;
		НоваяФорма.Объект.Количество = РеквизитыЗаявки.Количество2;
		НоваяФорма.Объект.Подразделение = РеквизитыЗаявки.Подразделение2;
		НоваяФорма.Объект.Отправитель = РеквизитыЗаявки.Предприятие2;
		НоваяФорма.Объект.ДокОснование = РеквизитыЗаявки.Ссылка;
		НоваяФорма.Объект.ТипПродукции = РеквизитыЗаявки.ТипРеализации;
		НоваяФорма.Объект.Плательщик = РеквизитыЗаявки.Док;
		НоваяФорма.Объект.ПодразделениеПлательщика = РеквизитыЗаявки.ПодразделениеДок;
		НоваяФорма.Открыть();
	Иначе
		Предупреждение("Невозможно создать документ. Обратитесь к администратору.");
	КонецЕсли;
КонецПроцедуры

Процедура ОтгрузкаФакт(Объект, Команда)
	
	РеквизитыЗаявки = БюджетныйНаСервере.ВернутьРеквизиты(Объект.Заявка, "Ссылка, Предприятие, Грузополучатель, Количество, Предприятие2, Количество2, Номенклатура, Номенклатура2, Подразделение, Подразделение2");
	
	Если Объект.Предприятие = РеквизитыЗаявки.Предприятие Тогда
		НоваяФорма = ПолучитьФорму("Документ.ПР_Отгрузка.ФормаОбъекта");  
		НоваяФорма.Объект.Контрагент = РеквизитыЗаявки.Грузополучатель;
		НоваяФорма.Объект.Количество = РеквизитыЗаявки.Количество;
		
		ПервичнаяНом = БюджетныйНаСервере.ПолучитьПервичнуюНоменклатуру(РеквизитыЗаявки.Номенклатура);
		
		НоваяФорма.Объект.Номенклатура = ПервичнаяНом;
		НоваяФорма.Объект.Подразделение = РеквизитыЗаявки.Подразделение;
		НоваяФорма.Объект.Предприятие = РеквизитыЗаявки.Предприятие;
		НоваяФорма.Объект.ДокОснование = РеквизитыЗаявки.Ссылка;
		НоваяФорма.Открыть();
	ИначеЕсли Объект.Предприятие = РеквизитыЗаявки.Предприятие2 Тогда
		НоваяФорма = ПолучитьФорму("Документ.ПР_Отгрузка.ФормаОбъекта");  
		НоваяФорма.Объект.Контрагент = РеквизитыЗаявки.Грузополучатель;
		НоваяФорма.Объект.Количество = РеквизитыЗаявки.Количество2;
		
		ПервичнаяНом = БюджетныйНаСервере.ПолучитьПервичнуюНоменклатуру(РеквизитыЗаявки.Номенклатура2);
		
		НоваяФорма.Объект.Номенклатура = ПервичнаяНом;
		НоваяФорма.Объект.Подразделение = РеквизитыЗаявки.Подразделение2;
		НоваяФорма.Объект.Предприятие = РеквизитыЗаявки.Предприятие2;
		НоваяФорма.Объект.ДокОснование = РеквизитыЗаявки.Ссылка;
		НоваяФорма.Открыть();
	Иначе
		Предупреждение("Невозможно создать документ. Обратитесь к администратору.");
	КонецЕсли;
КонецПроцедуры

Процедура ВыборПодчиненногоДокумента(Объект, Элементы, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт

		СтандартнаяОбработка = Ложь;
	
	//ТипДокументаНаОсновании = ВернутьТипПодчиненногоДокументаНаСервере();
	//
	//Если ТипДокументаНаОсновании = "" Тогда
	//	Возврат
	//ИначеЕсли ТипДокументаНаОсновании = "ПР_Отгрузка" Тогда
	//	ОтгрузкаФакт(Неопределено);
	//ИначеЕсли ТипДокументаНаОсновании = "Л_ПутевойЛист" Тогда
	//	АвтоТранспорт(Неопределено); 
	//Иначе	
	//	ОткрытьФорму("Документ." + ТипДокументаНаОсновании + ".ФормаОбъекта", Новый Структура("Основание", Объект.Заявка), Элемент);
	//КонецЕсли;	
	
	Если Элементы.ПодчиненныеДокументыДокумент.ОграничениеТипа.СодержитТип(Тип("ДокументСсылка.КЗ_АвансовыйОтчет")) Тогда
		ОткрытьФорму("Документ.КЗ_АвансовыйОтчет.ФормаОбъекта", Новый Структура("Основание", Объект.Заявка), Элемент);
	ИначеЕсли Элементы.ПодчиненныеДокументыДокумент.ОграничениеТипа.СодержитТип(Тип("ДокументСсылка.ПР_Отгрузка")) Тогда	
		ОтгрузкаФакт(Объект, Неопределено);
	КонецЕсли;

КонецПроцедуры

Процедура ПроверкаИсполнения(Объект, ПодчиненныеДокументы, НуженВозврат = Ложь, ТекстПредупреждения = "") Экспорт
	СтруктураНеобходимостиПодчиненного = БПСервер.НуженПодчиненный(Объект);
	
	Если СтруктураНеобходимостиПодчиненного.ИсполнительДолженСоздатьНаОсновании Тогда
		//Если Текст = "исполнить" Тогда
			//Если ЗначениеЗаполнено(Объект.ДокументОбязательныйКПрикреплению) Тогда
			Для каждого ТекСтрока Из ПодчиненныеДокументы Цикл
				Если Не ЗначениеЗаполнено(ТекСтрока.Документ) Тогда
					ИндексСтроки = ПодчиненныеДокументы.Индекс(ТекСтрока);
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Строка не должна быть пустой!";
					Сообщение.Поле = "ПодчиненныеДокументы[" + Строка(ИндексСтроки) + "].Документ";
					//Сообщение.УстановитьДанные();
					Сообщение.Сообщить(); 
					НуженВозврат = Истина;
				//Иначе
				//	УстановитьДокОснованиеНаСервере(ТекСтрока.Документ);
				КонецЕсли;
			КонецЦикла;
			Если НЕ ПодчиненныеДокументы.Количество() Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Вы не создали документ на основании текущей заявки!";
				Сообщение.Поле = "ПодчиненныеДокументы";
				//Сообщение.УстановитьДанные();
				Сообщение.Сообщить();
				НуженВозврат = Истина;
			КонецЕсли;
		//КонецЕсли;
	КонецЕсли;
	
	//реестр заявки на оплату проверка
	МассивСтрокБезПП = БПСервер.ПроверитьНаличиеПлатежныхДокументовБезНал(Объект);
	
	Если МассивСтрокБезПП.Количество() Тогда
		ТекстПредупреждения = "Не созданы платежные документы по не отмененным строкам заявки. Строки: ";
		
		Для Каждого НомерСтр Из МассивСтрокБезПП Цикл
			ТекстПредупреждения = ТекстПредупреждения + Символы.ПС + НомерСтр;
		КонецЦикла;
		
		НуженВозврат = Неопределено;
	КонецЕсли;
	
	//заявка на оплату проверка
	СтруктураСтрокСПП = БПСервер.ПроверитьНаличиеПлатежныхДокументовБезНалЗаявка(Объект);
	
	Если НЕ СтруктураСтрокСПП.МассивСтрокБезПП.Количество() Тогда
		ТекстПредупреждения = "По данной заявке на оплату не созданы документы оплаты.";
		
		НуженВозврат = Неопределено;
	КонецЕсли;
	

КонецПроцедуры

Процедура ПроверкаИсполненияДоработка(Объект, ПодчиненныеДокументы, НуженВозврат = Ложь, ТекстПредупреждения = "") Экспорт
		
	//реестр заявки на оплату проверка
	МассивСтрокСПП = БПСервер.ПроверитьНаличиеПлатежныхДокументовБезНал(Объект, Истина);
	
	Если МассивСтрокСПП.Количество() Тогда
		ТекстПредупреждения = "Вы уже создали платежные документы по строкам заявки. При возврате на доработку они будут помечены на удаление. Документы: ";
		
		Для Каждого НомерСтр Из МассивСтрокСПП Цикл
			ТекстПредупреждения = ТекстПредупреждения + Символы.ПС + НомерСтр;
		КонецЦикла;
		
		НуженВозврат = Неопределено;
	КонецЕсли;
	
	//заявка на оплату проверка
	СтруктураСтрокСПП = БПСервер.ПроверитьНаличиеПлатежныхДокументовБезНалЗаявка(Объект, Истина);
	
	Если СтруктураСтрокСПП.МассивСтрокБезПП.Количество() И НЕ СтруктураСтрокСПП.ТекущийПользовательАвторДокументов И СтруктураСтрокСПП.ЭтоОзнакомление Тогда
		ПоказатьПредупреждение(,"Невозможно отправить на доработку, т.е. по данной заявке на оплату уже созданы документы оплаты"); 
		НуженВозврат = Истина;
	ИначеЕсли СтруктураСтрокСПП.МассивСтрокБезПП.Количество() И Не СтруктураСтрокСПП.МассивСтрокБезПП[0] = "" Тогда
		ТекстПредупреждения = "По данной заявке на оплату уже созданы документы оплаты. При возврате на доработку они будут помечены на удаление.";
		НуженВозврат = Неопределено;
	КонецЕсли;
	
	БПСервер.ВернутьОтмененныеЗаякиНаДоработку(Объект);

КонецПроцедуры

#КонецОбласти 

Процедура ОтправитьПоЭлектроннойПочтеКлиент(ЭтаФорма, Элементы) Экспорт
	
	ОтображениеСостояния = Элементы.Результат.ОтображениеСостояния;
	Если ОтображениеСостояния.Видимость = Истина
		И ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность Тогда
		
		ТекстВопроса = НСтр("ru = 'Отчет не сформирован. Сформировать?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		ЭтаФорма.СкомпоноватьРезультат(РежимКомпоновкиРезультата.Авто);
	КонецЕсли;
	
	ТабличныеДокументы = Новый СписокЗначений;
	Попытка
		НаименованиеТекущегоВарианта = ЭтаФорма.НаименованиеТекущегоВарианта;
	Исключение
		НаименованиеТекущегоВарианта = "Основной";
	КонецПопытки;
	ТабличныеДокументы.Добавить(ЭтаФорма.Результат, НаименованиеТекущегоВарианта);	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТабличныеДокументы", ТабличныеДокументы);
	ПараметрыФормы.Вставить("Тема", НаименованиеТекущегоВарианта);
	ПараметрыФормы.Вставить("Заголовок", СтрЗаменить(
	НСтр("ru = 'Отправка отчета ""%1"" по почте'"),
	"%1",
	НаименованиеТекущегоВарианта));
	
	ОткрытьФорму("ОбщаяФорма.ОтправкаТабличныхДокументовПоПочте", ПараметрыФормы, , );
	
	
КонецПроцедуры

///////////////////////////////работа с HTML открытием файла/////////////////////////
Процедура ОткрытьВФормеHTML(СтруктураФайла) Экспорт

	ТекФорма = ПолучитьФорму("Справочник.Файлы.Форма.ФормаHTML");	
	ТабДок = ТекФорма.HTMLСтраница;
	Успешно = Истина;
	РаботаСGDrive.ВывестиСодержимоеHTML(СтруктураФайла, Успешно);
	Если НЕ Успешно Тогда
		Предупреждение("Ошибка открытия файла. Попробуйте скачать файл и открыть его вручную");
		Возврат;
	КонецЕсли;
	
	ТекФорма.HTMLСтраница = "<HTML><HEAD>
	|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type><LINK rel=stylesheet type=text/css href=""__STYLE__""><BASE href=""v8config://26d610bd-8712-4000-956d-0edbe58646d8/mdobject/idcf715f2f-493b-44cc-8c21-3424f7d402ea/8eb4fad1-1fa6-403e-970f-2c12dbb43e23"">
	|<META name=GENERATOR content=""MSHTML 11.00.9600.17041""></HEAD>
	|<BODY><font face=""Tahoma, Geneva, sans-serif"">";
	ТекФорма.HTMLСтраница = ТекФорма.HTMLСтраница + "<script type=""text/javascript"">function message() {location = ""https://drive.google.com/file/d/" + СтруктураФайла.File_ID + """;}</script>";

	ТекФорма.HTMLСтраница = ТекФорма.HTMLСтраница + "</font></BODY></HTML>";
	
	//ТекФорма.HTMLСтраница = "https://drive.google.com/file/d/" + СтруктураФайла.File_ID;
	
	ТекФорма.СкриптЗапускался = Ложь;
	ТекФорма.HTMLИсходный = "https://drive.google.com/file/d/" + СтруктураФайла.ETag;
	ТекФорма.Заголовок = СтруктураФайла.Ссылка; 
	ТекФорма.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура Реквизит1ПередУдалением(Элемент, Отказ) Экспорт
	Если Элемент.ТекущиеДанные.Пользователь = "Согласование" ИЛИ Элемент.ТекущиеДанные.Пользователь = "Исполнение" ИЛИ Элемент.ТекущиеДанные.Пользователь = "Ознакомление" Тогда
		Отказ = Истина;	
	КонецЕсли;
КонецПроцедуры

Процедура ПоместитьОтчетДляСогласователейВоВременноеХранилище(ТекущийБП) Экспорт
	
	ТекЗаявка = БюджетныйНаСервере.ВернутьРеквизит(ТекущийБП, "Заявка");
	БезБюджетаПроизводства = БюджетныйНаСервере.ВернутьРеквизит(ТекЗаявка, "БезБюджетаПроизводства");
	БПТипБюджета = БюджетныйНаСервере.ВернутьРеквизит(ТекущийБП, "ТипБюджета");
	ТекВалюта = БюджетныйНаСервере.ВернутьРеквизит(ТекЗаявка, "Валюта");
	ТекПредприятие = БюджетныйНаСервере.ВернутьРеквизит(ТекЗаявка, "Предприятие");
	//НаправлениеДеятельности = БюджетныйНаСервере.ВернутьРеквизит(ТекПредприятие, "НаправлениеДеятельности");
	ВалютаРубль = БюджетныйНаСервере.ВалютаПоУмолчанию();
	
	Если Не ЗначениеЗаполнено(ТекВалюта) Тогда
		ТекВалюта = ВалютаРубль;
	КонецЕсли;
	
	Если ТипЗнч(ТекЗаявка) = Тип("ДокументСсылка.Д_Бюджет") И БезБюджетаПроизводства Тогда
		
		Если Строка(БПТипБюджета) = "Бюджет затрат" ИЛИ Строка(БПТипБюджета) = "Бюджет текущих затрат" ИЛИ Строка(БПТипБюджета) = "Корректировки бюджета производства и затрат" Тогда
			
			//Если Строка(НаправлениеДеятельности) = "Ритейл" ИЛИ Строка(НаправлениеДеятельности) = "Личное" ИЛИ Строка(НаправлениеДеятельности) = "Гостиничное" Тогда
				ТабДок = ЗаполнитьТабличныйДокументДляСогласователейВалюта(ТекущийБП, ТекВалюта = ВалютаРубль);				
			//Иначе
			//	ТабДок = БюджетныйНаСервере.ЗаполнитьТабличныйДокументДляСогласователей(ТекущийБП);
			//КонецЕсли;
			
		Иначе
			ТабДок = Новый ТабличныйДокумент;
		КонецЕсли;
		
		АдресВХ = ПоместитьВоВременноеХранилище(ТабДок, Новый УникальныйИдентификатор());
		//РеквизитСХранилищем = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресВХ));
		РеквизитСХранилищем = БюджетныйНаСервере.ВернутьЗначениеИзВременногоХранилища(АдресВХ);
		БюджетныйНаСервере.ЗаполнитьХранилищеТабДокаТекущегоБП(ТекущийБП, РеквизитСХранилищем);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьТабличныйДокументДляСогласователейВалюта(БП, ЭтоРубли) Экспорт
	
	// получаем те параметры, которые недоступны на клиенте
	ТекЗаявка = БюджетныйНаСервере.ВернутьРеквизит(БП, "Заявка");  
	ТекСценарий = БюджетныйНаСервере.ВернутьРеквизит(ТекЗаявка, "Сценарий");
	ТекСценарийПП = БюджетныйНаСервере.ВернутьРеквизит(ТекЗаявка, "СценарийПП");
	ТекПредприятие = БюджетныйНаСервере.ВернутьРеквизит(ТекЗаявка, "Предприятие");
	
	// отчет бюджета отправляемый на согласование (№3780 только показатели)
	ТабДокОтчетПоказатели = Новый ТабличныйДокумент;
	Если БюджетныйНаСервере.ВернутьРеквизит(БП, "Предприятие") = БюджетныйНаСервере.ВернутьОтель() Тогда
		ФормаОП = ПолучитьФорму("Отчет.Б_ДокументОтправляемыйНаСогласование.ФормаОбъекта");
		ФормаОП.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Значение = ТекЗаявка;
		ФормаОП.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Использование = Истина;
		ФормаОП.СкомпоноватьРезультат();
		ТабДокОтчетПоказатели = ФормаОП.Результат;
	КонецЕсли;
	
	// если корректировочный бюджет заполняем таблицу корректировок
	КорректировочныйБюджет = РасчетыБюджет.ЭтоКорректировочныйБюджет(ТекСценарий);
	
	Если КорректировочныйБюджет Тогда
		ТабДокКорректировки = Новый ТабличныйДокумент;
		Если ЭтоРубли Тогда
			БюджетныйНаСервере.ПечатьКорректировок(ТабДокКорректировки, ТекЗаявка);
		Иначе
			БюджетныйНаСервере.ПечатьВалютныхКорректировок(ТабДокКорректировки, ТекЗаявка);
		КонецЕсли;
	КонецЕсли;
	
	// №3780
	
	ТабДокОтступ = БюджетныйНаСервере.ПолучитьТабДокОтступ();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Предприятие", ТекПредприятие);
	СтруктураПараметров.Вставить("ВыбПериод", Новый СтандартныйПериод(НачалоДня(БюджетныйНаСервере.ВернутьРеквизит(ТекСценарий, "АктуальнаяДата")), КонецДня(БюджетныйНаСервере.ВернутьРеквизит(ТекСценарий, "ДатаКонца"))));
	СтруктураПараметров.Вставить("ДатаНач", СтруктураПараметров.ВыбПериод.ДатаНачала);
	СтруктураПараметров.Вставить("ДатаКон", СтруктураПараметров.ВыбПериод.ДатаОкончания);
	СтруктураПараметров.Вставить("ЭквивалентнаяВалюта", БюджетныйНаСервере.ВернутьРеквизит(ТекПредприятие, "ОсновнаяВалютаУчета"));
	СтруктураПараметров.Вставить("Интервал", "Месяц");
	
			
	ФормаФР = ПолучитьФорму("Отчет.Д_ФинансовыйРезультат.ФормаОбъекта");
	ФормаФР.УстановитьТекущийВариант("Отель");
	ИдентификаторПредприятия = "";
	
	Для Каждого ЭлементНастроекФР Из ФормаФР.Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ЭлементНастроекФР.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Предприятия") Тогда
			ИдентификаторПредприятия = ЭлементНастроекФР.ИдентификаторПользовательскойНастройки;
		КонецЕсли;
	КонецЦикла;
	
	ЭлементыНастроекФР = ФормаФР.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	
	Для Каждого ЭлементНастроекФР Из ЭлементыНастроекФР Цикл
		Если ТипЗнч(ЭлементНастроекФР) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			Если ЭлементНастроекФР.Параметр 				= Новый ПараметрКомпоновкиДанных("Сценарий1") Тогда
				ЭлементНастроекФР.Значение 					= ?(КорректировочныйБюджет, ТекСценарийПП, ТекСценарий);
				ЭлементНастроекФР.Использование 			= Истина;
			ИначеЕсли ЭлементНастроекФР.Параметр 				= Новый ПараметрКомпоновкиДанных("Сценарий2") Тогда
				Если КорректировочныйБюджет Тогда	
					ЭлементНастроекФР.Значение = ТекСценарий;
					ЭлементНастроекФР.Использование = Истина;	
				Иначе
					ЭлементНастроекФР.Использование = Ложь;	
				КонецЕсли;
			ИначеЕсли ЭлементНастроекФР.Параметр = Новый ПараметрКомпоновкиДанных("ВыбПериод") Тогда
				ЭлементНастроекФР.Значение.ДатаНачала 		= СтруктураПараметров.ДатаНач;
				ЭлементНастроекФР.Значение.ДатаОкончания 	= СтруктураПараметров.ДатаКон; 
				ЭлементНастроекФР.Использование 			= Истина;
			ИначеЕсли ЭлементНастроекФР.Параметр = Новый ПараметрКомпоновкиДанных("Интервал") Тогда
				ЭлементНастроекФР.Значение 					= "Месяц";
				ЭлементНастроекФР.Использование 			= Истина;
			ИначеЕсли ЭлементНастроекФР.Параметр = Новый ПараметрКомпоновкиДанных("Сводный") Тогда
				ЭлементНастроекФР.Значение 					= Ложь;
				ЭлементНастроекФР.Использование 			= Истина;
			ИначеЕсли ЭлементНастроекФР.Параметр = Новый ПараметрКомпоновкиДанных("ЭквивалентнаяВалюта") Тогда
				ЭлементНастроекФР.Значение 					= СтруктураПараметров.ЭквивалентнаяВалюта;
				ЭлементНастроекФР.Использование 			= Истина;	
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЭлементНастроекФР) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ЭлементНастроекФР.ИдентификаторПользовательскойНастройки = ИдентификаторПредприятия Тогда
				ЭлементНастроекФР.ПравоеЗначение = СтруктураПараметров.Предприятие;
				ЭлементНастроекФР.Использование = Истина;
			Иначе
				ЭлементНастроекФР.Использование = Ложь;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЭлементыНастроекФР) = Тип("ОтборКомпоновкиДанных") Тогда
			Для Каждого ЭлементОтбораКД Из ЭлементыНастроекФР.Элементы Цикл
				Если ЭлементОтбораКД.ИдентификаторПользовательскойНастройки = ИдентификаторПредприятия Тогда
					ЭлементОтбораКД.ПравоеЗначение = СтруктураПараметров.Предприятие;
					ЭлементОтбораКД.Использование = Истина;
				Иначе
					ЭлементОтбораКД.Использование = Ложь;
				КонецЕсли;
			КонецЦикла;			
		КонецЕсли;	
	КонецЦикла;
	
	ФормаФР.СкомпоноватьРезультат();
	ТабДокОтчетФР = ФормаФР.Результат;
	
	Если Не ЭтоРубли Тогда
		
		ФормаФР_ЭВ = ПолучитьФорму("Отчет.Д_ФинансовыйРезультат.ФормаОбъекта");
		ФормаФР_ЭВ.УстановитьТекущийВариант("Отель");
		ИдентификаторПредприятия = "";
		
		Для Каждого ЭлементНастроекФР Из ФормаФР_ЭВ.Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
			Если ЭлементНастроекФР.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Предприятия") Тогда
				ИдентификаторПредприятия = ЭлементНастроекФР.ИдентификаторПользовательскойНастройки;
			КонецЕсли;
		КонецЦикла;
		
		ЭлементыНастроекФР = ФормаФР_ЭВ.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
		
		Для Каждого ЭлементНастроекФР Из ЭлементыНастроекФР Цикл
			Если ТипЗнч(ЭлементНастроекФР) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
				Если ЭлементНастроекФР.Параметр 				= Новый ПараметрКомпоновкиДанных("Сценарий1") Тогда
					ЭлементНастроекФР.Значение 					= ?(КорректировочныйБюджет, ТекСценарийПП, ТекСценарий);
					ЭлементНастроекФР.Использование 			= Истина;
				ИначеЕсли ЭлементНастроекФР.Параметр 				= Новый ПараметрКомпоновкиДанных("Сценарий2") Тогда
					Если КорректировочныйБюджет Тогда	
						ЭлементНастроекФР.Значение = ТекСценарий;
						ЭлементНастроекФР.Использование = Истина;	
					Иначе
						ЭлементНастроекФР.Использование = Ложь;	
					КонецЕсли;
				ИначеЕсли ЭлементНастроекФР.Параметр = Новый ПараметрКомпоновкиДанных("ВыбПериод") Тогда
					ЭлементНастроекФР.Значение.ДатаНачала 		= СтруктураПараметров.ДатаНач;
					ЭлементНастроекФР.Значение.ДатаОкончания 	= СтруктураПараметров.ДатаКон; 
					ЭлементНастроекФР.Использование 			= Истина;
				ИначеЕсли ЭлементНастроекФР.Параметр = Новый ПараметрКомпоновкиДанных("Интервал") Тогда
					ЭлементНастроекФР.Значение 					= "Месяц";
					ЭлементНастроекФР.Использование 			= Истина;
				ИначеЕсли ЭлементНастроекФР.Параметр = Новый ПараметрКомпоновкиДанных("Сводный") Тогда
					ЭлементНастроекФР.Значение 					= Ложь;
					ЭлементНастроекФР.Использование 			= Истина;
				//ИначеЕсли ЭлементНастроекФР.Параметр = Новый ПараметрКомпоновкиДанных("ЭквивалентнаяВалюта") Тогда
				//	ЭлементНастроекФР.Значение 					= ПредопределенноеЗначение("Справочник.Валюты.НациональнаяВалюта");
				//	ЭлементНастроекФР.Использование 			= Истина;	
				КонецЕсли;
			ИначеЕсли ТипЗнч(ЭлементНастроекФР) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Если ЭлементНастроекФР.ИдентификаторПользовательскойНастройки = ИдентификаторПредприятия Тогда
					ЭлементНастроекФР.ПравоеЗначение = СтруктураПараметров.Предприятие;
					ЭлементНастроекФР.Использование = Истина;
				Иначе
					ЭлементНастроекФР.Использование = Ложь;
				КонецЕсли;
			ИначеЕсли ТипЗнч(ЭлементыНастроекФР) = Тип("ОтборКомпоновкиДанных") Тогда
				Для Каждого ЭлементОтбораКД Из ЭлементыНастроекФР.Элементы Цикл
					Если ЭлементОтбораКД.ИдентификаторПользовательскойНастройки = ИдентификаторПредприятия Тогда
						ЭлементОтбораКД.ПравоеЗначение = СтруктураПараметров.Предприятие;
						ЭлементОтбораКД.Использование = Истина;
					Иначе
						ЭлементОтбораКД.Использование = Ложь;
					КонецЕсли;
				КонецЦикла;		
			КонецЕсли;	
		КонецЦикла;
		
		ФормаФР_ЭВ.СкомпоноватьРезультат();
		ТабДокОтчетФР_ЭВ = ФормаФР_ЭВ.Результат;
		
	КонецЕсли;
	
	ФормаДДС = ПолучитьФорму("Отчет.Д_ОтчетОДДС1.ФормаОбъекта");
	ФормаДДС.УстановитьТекущийВариант("БезПодр2");
	ИдентификаторПредприятия = "";
	
	Для Каждого ЭлементНастроекДДС Из ФормаДДС.Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ЭлементНастроекДДС.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Предприятия") Тогда
			ИдентификаторПредприятия = ЭлементНастроекДДС.ИдентификаторПользовательскойНастройки;
		КонецЕсли;
	КонецЦикла;
	
	ЭлементыНастроекДДС = ФормаДДС.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	
	Для Каждого ЭлементНастроекДДС Из ЭлементыНастроекДДС Цикл
		Если ТипЗнч(ЭлементНастроекДДС) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			Если ЭлементНастроекДДС.Параметр = Новый ПараметрКомпоновкиДанных("Сценарий1") Тогда
				ЭлементНастроекДДС.Значение 				= ?(КорректировочныйБюджет, ТекСценарийПП, ТекСценарий);
				ЭлементНастроекДДС.Использование 			= Истина;
			ИначеЕсли ЭлементНастроекДДС.Параметр = Новый ПараметрКомпоновкиДанных("Сценарий2") Тогда
				Если КорректировочныйБюджет Тогда
					ЭлементНастроекДДС.Значение = ТекСценарий; 
					ЭлементНастроекДДС.Использование = Истина;
				Иначе
					ЭлементНастроекДДС.Использование = Ложь;
				КонецЕсли;
			ИначеЕсли ЭлементНастроекДДС.Параметр = Новый ПараметрКомпоновкиДанных("Период") Тогда
				ЭлементНастроекДДС.Значение.ДатаНачала 		= СтруктураПараметров.ДатаНач;
				ЭлементНастроекДДС.Значение.ДатаОкончания 	= СтруктураПараметров.ДатаКон; 
				ЭлементНастроекДДС.Использование 			= Истина;
			ИначеЕсли ЭлементНастроекДДС.Параметр = Новый ПараметрКомпоновкиДанных("Интервал") Тогда
				ЭлементНастроекДДС.Значение 				= "Месяц";
				ЭлементНастроекДДС.Использование 			= Истина;
			ИначеЕсли ЭлементНастроекДДС.Параметр = Новый ПараметрКомпоновкиДанных("Сводный") Тогда
				ЭлементНастроекДДС.Значение 				= Ложь;
				ЭлементНастроекДДС.Использование 			= Истина;
			ИначеЕсли ЭлементНастроекДДС.Параметр = Новый ПараметрКомпоновкиДанных("ЭквивалентнаяВалюта") Тогда
				ЭлементНастроекДДС.Значение 				= СтруктураПараметров.ЭквивалентнаяВалюта;
				ЭлементНастроекДДС.Использование 			= Истина;	
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЭлементНастроекДДС) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ЭлементНастроекДДС.ИдентификаторПользовательскойНастройки = ИдентификаторПредприятия Тогда
				ЭлементНастроекДДС.ПравоеЗначение = СтруктураПараметров.Предприятие;
				ЭлементНастроекДДС.Использование = Истина;
			Иначе
				ЭлементНастроекДДС.Использование = Ложь;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЭлементНастроекДДС) = Тип("ОтборКомпоновкиДанных") Тогда
			Для Каждого ЭлементОтбораКД Из ЭлементНастроекДДС.Элементы Цикл
				Если ЭлементОтбораКД.ИдентификаторПользовательскойНастройки = ИдентификаторПредприятия Тогда
					ЭлементОтбораКД.ПравоеЗначение = СтруктураПараметров.Предприятие;
					ЭлементОтбораКД.Использование = Истина;
				Иначе
					ЭлементОтбораКД.Использование = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
	КонецЦикла;
	
	ФормаДДС.СкомпоноватьРезультат();
	ТабДокОтчетДДС = ФормаДДС.Результат;
	
	Если Не ЭтоРубли Тогда
		
		ФормаДДС_ЭВ = ПолучитьФорму("Отчет.Д_ОтчетОДДС1.ФормаОбъекта");
		ФормаДДС_ЭВ.УстановитьТекущийВариант("БезПодр2");
		ИдентификаторПредприятия = "";
		
		Для Каждого ЭлементНастроекДДС Из ФормаДДС_ЭВ.Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
			Если ЭлементНастроекДДС.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Предприятия") Тогда
				ИдентификаторПредприятия = ЭлементНастроекДДС.ИдентификаторПользовательскойНастройки;
			КонецЕсли;
		КонецЦикла;
		
		ЭлементыНастроекДДС = ФормаДДС_ЭВ.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
		
		Для Каждого ЭлементНастроекДДС Из ЭлементыНастроекДДС Цикл
			Если ТипЗнч(ЭлементНастроекДДС) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
				Если ЭлементНастроекДДС.Параметр = Новый ПараметрКомпоновкиДанных("Сценарий1") Тогда
					ЭлементНастроекДДС.Значение 				= ?(КорректировочныйБюджет, ТекСценарийПП, ТекСценарий);
					ЭлементНастроекДДС.Использование 			= Истина;
				ИначеЕсли ЭлементНастроекДДС.Параметр = Новый ПараметрКомпоновкиДанных("Сценарий2") Тогда
					Если КорректировочныйБюджет Тогда
						ЭлементНастроекДДС.Значение = ТекСценарий; 
						ЭлементНастроекДДС.Использование 			= Истина;
					Иначе
						ЭлементНастроекДДС.Использование = Ложь;
					КонецЕсли;
				ИначеЕсли ЭлементНастроекДДС.Параметр = Новый ПараметрКомпоновкиДанных("Период") Тогда
					ЭлементНастроекДДС.Значение.ДатаНачала 		= СтруктураПараметров.ДатаНач;
					ЭлементНастроекДДС.Значение.ДатаОкончания 	= СтруктураПараметров.ДатаКон; 
					ЭлементНастроекДДС.Использование 			= Истина;
				ИначеЕсли ЭлементНастроекДДС.Параметр = Новый ПараметрКомпоновкиДанных("Интервал") Тогда
					ЭлементНастроекДДС.Значение 				= "Месяц";
					ЭлементНастроекДДС.Использование 			= Истина;
				ИначеЕсли ЭлементНастроекДДС.Параметр = Новый ПараметрКомпоновкиДанных("Сводный") Тогда
					ЭлементНастроекДДС.Значение 				= Ложь;
					ЭлементНастроекДДС.Использование 			= Истина;
				//ИначеЕсли ЭлементНастроекДДС.Параметр = Новый ПараметрКомпоновкиДанных("ЭквивалентнаяВалюта") Тогда
				//	ЭлементНастроекДДС.Значение 				= ПредопределенноеЗначение("Справочник.Валюты.НациональнаяВалюта");
				//	ЭлементНастроекДДС.Использование 			= Истина;	
				КонецЕсли;
			ИначеЕсли ТипЗнч(ЭлементНастроекДДС) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Если ЭлементНастроекДДС.ИдентификаторПользовательскойНастройки = ИдентификаторПредприятия Тогда
					ЭлементНастроекДДС.ПравоеЗначение = СтруктураПараметров.Предприятие;
					ЭлементНастроекДДС.Использование = Истина;
				Иначе
					ЭлементНастроекДДС.Использование = Ложь;
				КонецЕсли;
			ИначеЕсли ТипЗнч(ЭлементНастроекДДС) = Тип("ОтборКомпоновкиДанных") Тогда
				Для Каждого ЭлементОтбораКД Из ЭлементНастроекДДС.Элементы Цикл
					Если ЭлементОтбораКД.ИдентификаторПользовательскойНастройки = ИдентификаторПредприятия Тогда
						ЭлементОтбораКД.ПравоеЗначение = СтруктураПараметров.Предприятие;
						ЭлементОтбораКД.Использование = Истина;
					Иначе
						ЭлементОтбораКД.Использование = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;	
		КонецЦикла;
		
		ФормаДДС_ЭВ.СкомпоноватьРезультат();
		ТабДокОтчетДДС_ЭВ = ФормаДДС_ЭВ.Результат;
		
	КонецЕсли;
	
	// конец №3780
	
	
	// результат согласования
	ТабДокРецензенты = Новый ТабличныйДокумент;
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(ТекЗаявка);
	Макет = БюджетныйНаСервере.ПолучитьОбщийМакетСервер("РезультатыСогласования");
	БПСервер.ПоказатьРецензентов(ТабДокРецензенты, ТекЗаявка, БюджетныйНаСервере.ВернутьРеквизит(БП, "ТипБюджета"), МассивСсылок, "Штампы|Отметка");
	
	Если Не ЭтоРубли Тогда
		ТабДок = БюджетныйНаСервере.СформироватьТабДокДляСогласователейВалюта(ТабДокРецензенты, ТабДокОтчетПоказатели, ТабДокКорректировки, ТабДокОтступ, ТабДокОтчетФР, ТабДокОтчетФР_ЭВ, ТабДокОтчетДДС, ТабДокОтчетДДС_ЭВ, КорректировочныйБюджет);
	Иначе
		ТабДок = БюджетныйНаСервере.СформироватьТабДокДляСогласователейВалюта(ТабДокРецензенты, ТабДокОтчетПоказатели, ТабДокКорректировки, ТабДокОтступ, ТабДокОтчетФР, Неопределено, ТабДокОтчетДДС, Неопределено, КорректировочныйБюджет);
	КонецЕсли;
		
	Возврат ТабДок;
	
КонецФункции

#Область ПроцедурыМодуляПриложения
Процедура ПередНачаломРаботыСистемы(Отказ) Экспорт
	#Если ВебКлиент Или МобильныйКлиент Или МобильноеПриложениеКлиент Тогда
		IP = Неопределено;
		ИмяКомпьютера = Неопределено;
		ПользовательWindows = Неопределено;
	#иначе  
		IP = ПолучитьIP();
		ИмяКомпьютера = ИмяКомпьютера();
		ПользовательWindows = ПолучитьПользователяWindows();
	#КонецЕсли
	
	
	
	
	СтруктураПоиска = Новый Структура;
	//СтруктураПоиска.Вставить("ИмяПользователя", ПараметрыТекПользователяИмя);
	СтруктураПоиска.Вставить("IP", IP);
	СтруктураПоиска.Вставить("ИмяКомпьютера", ИмяКомпьютера);
	СтруктураПоиска.Вставить("ПользовательWindows", ПользовательWindows);
	
	БюджетныйНаСервере.ЗаполнитьСтруктуруПараметрами(СтруктураПоиска);
	
	//СтруктураНайденного = БюджетныйНаСервере.НайтиИУстановитьПользователя(СтруктураПоиска);
	//ТекРезультат = ОткрытьФормуМодально("Справочник.Пользователи.Форма.ФормаЗаявкиНаСозданиеПользователя");
	//Если НЕ СтруктураПоиска.Найден Тогда
	//	Предупреждение("Учетная запись отсутствует в списке зарегистрированных. Работа системы будет завершена.");
	//	Отказ = Истина;
	//	возврат;
	//Иначе
		//Если СтруктураПоиска.ПользовательОСЗ Тогда
		//	Предупреждение("Доступ к ""старой"" базе заблокирован в связи с переводом Вашего функционала в новую базу 1С: СПИРТЫ.
		//	|Если Вы уверены, что доступ к ""старой"" базе Вам точно необходим, обратитесь к своему функциональному руководителю/куратору на предмет временного восстановления доступа.
		//	|Обращения в техподдержку 1С ""напрямую"" по поводу доступа рассматриваться не будут.");
		//	Отказ = Истина;
		//	возврат;
		//ИначеЕсли СтруктураПоиска.ПользовательДив3 Тогда
		//	Предупреждение("Доступ к ""старой"" базе заблокирован в связи с переводом Вашего функционала в новую базу 1С: Див3.
		//	|Если Вы уверены, что доступ к ""старой"" базе Вам точно необходим, обратитесь к Колесникову М на предмет временного восстановления доступа.
		//	|Обращения в техподдержку 1С ""напрямую"" по поводу доступа рассматриваться не будут.");
		//	Отказ = Истина;
		//	возврат;
		//Если СтруктураПоиска.ПометкаУдаления Тогда
		//	Предупреждение("Ваша учетная запись заблокирована.
		//	|Для восстановления доступа, обратитесь к своему функциональному руководителю/куратору.
		//	|Обращения в техподдержку 1С ""напрямую"" по поводу доступа рассматриваться не будут.");
		//	Отказ = Истина;
		//	возврат;
		//КонецЕсли;
		
		//Если СтруктураПоиска.Наименование = "Новый пользователь" Тогда
		//	ТекРезультат = ОткрытьФормуМодально("Справочник.Пользователи.Форма.ФормаВыбораДействий");
		//	Если Не ЗначениеЗаполнено(ТекРезультат) Тогда
		//		Отказ = Истина;
		//		Возврат;
		//	КонецЕсли;
		//Иначе
			//ПарольПодходитПоСложности = БюджетныйНаКлиенте.ПроверитьПароль(СтруктураПоиска.Пароль, Истина);
			//Если Не ЗначениеЗаполнено(СтруктураПоиска.ДатаПоследнегоВхода) ИЛИ Не ЗначениеЗаполнено(СтруктураПоиска.Пароль) ИЛИ НЕ ПарольПодходитПоСложности Тогда
			//	Если НЕ ПарольПодходитПоСложности Тогда
			//		Предупреждение("Ваш пароль на вход 1С слишком простой и не соответствует требованиям политики безопасности. Введите новый пароль.");			
			//	КонецЕсли; 
			//	ТекРезультат = ОткрытьФормуМодально("Справочник.Пользователи.Форма.ФормаРегистрации", Новый Структура("Ключ", СтруктураПоиска.Пользователь) );
			//	Если Не ЗначениеЗаполнено(ТекРезультат) Тогда
			//		Отказ = Истина;
			//		Возврат;		
			//	КонецЕсли;
			//КонецЕсли;
	//	КонецЕсли;
	//	
	//КонецЕсли; 
	
	//Если Не БюджетныйНаСервере.ПроверитьИнтерфейс(СтруктураПоиска.ВариантИнтерфейса) Тогда
	БюджетныйНаСервере.НастоитьИнтерфейс(СтруктураПоиска.ВариантИнтерфейса);	
	//	#Если Не ВебКлиент И Не МобильныйКлиент И Не МобильноеПриложениеКлиент Тогда
	//		//ПодключитьОбработчикОжидания("ЗапускСистемы", 5, Истина);
	//		ЗапуститьСистему();
	//		Отказ = Истина;
	//		Возврат;
	//		//ПоказатьПредупреждение(Новый ОписаниеОповещения("ИнтерфейсОбновленЗавершение", ЭтотОбъект), "Интерфейс обновлен! Перезапустите, пожалуйста, 1С");
	//	#КонецЕсли
	//КонецЕсли;
	
	// компьютеры пользователей
	//#Если Не ВебКлиент И Не МобильныйКлиент И Не МобильноеПриложениеКлиент Тогда
	//	Если СтруктураПоиска.ВключитьКонтрольВхода и СтруктураПоиска.РезультатПроверки = 1 Тогда
	//		ОткрытьФормуМодально("РегистрСведений.КомпьютерыПользователей.Форма.ФормаУстановкиСоответствия");
	//	ИначеЕсли СтруктураПоиска.ВключитьКонтрольВхода и СтруктураПоиска.РезультатПроверки = 2 Тогда
	//		ПараметрыФормы = новый Структура("Хозяин", СтруктураПоиска.Хозяин);
	//		ПроверенПоСМС = ОткрытьФормуМодально("РегистрСведений.КомпьютерыПользователей.Форма.ФормаПодтвержденияСМС", ПараметрыФормы);
	//		Если ПроверенПоСМС = Ложь Тогда
	//			Отказ = Истина;
	//			Возврат;
	//		КонецЕсли;
	//	КонецЕсли;
	//#КонецЕсли
	
	
	//#Если Не ВебКлиент И Не МобильныйКлиент И Не МобильноеПриложениеКлиент Тогда
	//	Если СтруктураПоиска.ПроверитьМонопольностьВхода Тогда
	//		ПоказатьПредупреждение(Неопределено, "Пользователь уже имеет открытые сеансы. Работа системы будет завершена.", 15);
	//		Отказ = Истина;
	//	КонецЕсли;
	//#КонецЕсли
	
	//прочие записи и установки
	Если НЕ СтруктураПоиска = Неопределено И СтруктураПоиска.Свойство("ИмяКомпьютера") Тогда
		БюджетныйНаСервере.ОбновитьЛогПользователя(СтруктураПоиска.ИмяКомпьютера, Ложь, СтруктураПоиска.IP, СтруктураПоиска.ПользовательWindows);
	КонецЕсли;
	
	//ПодключитьОбработчикОжидания("ОповеститьОбАварийномОтключении",180);
	
	//БПСервер.ОчиститьМассовоеСообщениеПользователям();
	//ПодключитьОбработчикОжидания("ПоказатьМассовоеСообщениеПользователям",60);
	
	
	ПодключитьОбработчикОжидания("УстановитьПользователяНаКлиенте", 1800);
	
	//#Если Не ВебКлиент И Не МобильныйКлиент И Не МобильноеПриложениеКлиент Тогда
	//	ОбновленитьПлатформуКлиента(Отказ);
	//#КонецЕсли
	
	//Если БюджетныйНаСервере.ПолучитьПараметрыСеанса("УстановленРежимГорячейЛинии") Тогда
	//	ОткрытьФормуМодально("Документ.Д_ОбращенияВТехПоддержку.Форма.ТехПоддержка1");
	//	Отказ = Истина;
	//	Возврат;
	//	//	УстановитьПараметрыФункциональныхОпцийИнтерфейса(Новый Структура("ПользовательСистемное", ПредопределенноеЗначение("Справочник.Пользователи.Система")));
	//	//	ОбновитьИнтерфейс();
	//КонецЕсли;
	
КонецПроцедуры

Процедура ПриНачалеРаботыСистемы() Экспорт

	//УстановитьЗаголовокПриложения(БюджетныйНаСервере.ВернутьЗаголовокКонфигурации());
	
	// бсп
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске();
	// конец бсп
		
	//подключаем опрос чата
	//ПодключитьОбработчикОжидания("ВыводВсплывающегоСообщенияЧата", 120);
	
	//БПСервер.МассивНевыполненныхЗадач(Ложь);
	//ПодключитьОбработчикОжидания("ПоискНовыхЗадач", 240);
	
	//ищем закрытые аварийно формы документов
	сабОбщегоНазначенияКлиент.ПоказатьНесохраненныеДанные();
	
	// di 25.04.16 проверяем релиз платформы у пользователя
	//сабОбщегоНазначения.ПроверитьРелизПлатформыПользователя();
	
	//ПодключитьОбработчикОжидания("ОбработчикОжиданияПроверкиДинамическогоОбновления", 3*60);
	
	//push уведомления
	#Если МобильныйКлиент Или МобильноеПриложениеКлиент Тогда
		//НомерПриложения = "944084000028";
		IDПодписчика = ДоставляемыеУведомления.ПолучитьИдентификаторПодписчикаУведомлений();//получаем FCM
		БюджетныйНаСервере.УстановитьPushID(IDПодписчика);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриПолученииУведоммления", БюджетныйНаКлиенте);
		ДоставляемыеУведомления.ПодключитьОбработчикУведомлений(ОписаниеОповещения);
	#КонецЕсли
	
КонецПроцедуры

Процедура ПриПолученииУведоммления(Уведомление, Локальное, Показано, ДопПараметр) Экспорт
	Если ЗначениеЗаполнено(Уведомление.Данные) Тогда
		ТекЗадача = БюджетныйНаСервере.ПолучитьЗадачуПоНомеру(Уведомление.Данные);
		Если Не ТекЗадача = Неопределено И Локальное Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ПриПолученииУведоммленияЗавершение", ЭтотОбъект, Новый Структура("ТекЗадача", ТекЗадача)), "Поступила новая задача! Открыть?", РежимДиалогаВопрос.ДаНет);
		Иначе
			//ОткрытьФорму("Задача.Задача.ФормаОбъекта", Новый Структура("Ключ", ТекЗадача));			
		КонецЕсли;
	КонецЕсли;
	//Сообщить(Уведомление);
КонецПроцедуры

Процедура ПриПолученииУведоммленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ТекЗадача = ДополнительныеПараметры.ТекЗадача;
	
	
	Если РезультатВопроса = КодВозвратаДиалога.Да  Тогда
		ОткрытьФорму("Задача.Задача.ФормаОбъекта", Новый Структура("Ключ", ТекЗадача));			
	КонецЕсли;

КонецПроцедуры


Процедура ПриЗавершенииРаботыСистемы() Экспорт
	
	#Если Не ВебКлиент И Не МобильныйКлиент И Не МобильноеПриложениеКлиент Тогда	
		IP = ПолучитьIP();
		БюджетныйНаСервере.ОбновитьЛогПользователя(ИмяКомпьютера(), Истина, IP);
	#КонецЕсли
	
	
КонецПроцедуры

Процедура ПередЗавершениемРаботыСистемы(Отказ) Экспорт
	
	//ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗавершениемРаботыСистемыЗавершение", ЭтотОбъект, ), "Вы уверены, что хотите завершить работу программы?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

Процедура ПередЗавершениемРаботыСистемыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	//ТекПольз = ДополнительныеПараметры.ТекПольз;
	
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет  Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	

КонецПроцедуры

Процедура ОбработкаВнешнегоСобытия(Источник, Событие, Данные) Экспорт
		

КонецПроцедуры
#КонецОбласти 

Процедура ВыводВсплывающегоОкна(КоличествоНевыполненныхЗадач) Экспорт
	
	#Если МобильныйКлиент Или МобильноеПриложениеКлиент Тогда
		Сообщить("Имеются новые задачи: " + Строка(КоличествоНевыполненныхЗадач), СтатусСообщения.Важное);
	#Иначе
		ПоказатьОповещениеПользователя("Сообщение 1С", "e1cib/navigationpoint/startpage", "Имеются новые задачи: " + Строка(КоличествоНевыполненныхЗадач),БиблиотекаКартинок.Задача,СтатусОповещенияПользователя.Важное,Новый УникальныйИдентификатор);
	#КонецЕсли
	
КонецПроцедуры

Функция  ПолучитьIP()
	
	IP = "";
	MACAddress = Неопределено;
	ИПАдрес = "";
	Попытка
		ServicesSet = ПолучитьCOMОбъект("winmgmts:\\localhost\root\cimv2");
	Исключение
		Возврат IP;
	КонецПопытки;
	MyItems = ServicesSet.ExecQuery("Select * From Win32_NetworkAdapterConfiguration Where IPEnabled = True");
	Для Каждого MyItem Из MyItems Цикл
		MACAddress = MyItem.MACAddress;
		Если ЗначениеЗаполнено(MACAddress) Тогда
			IPAddress = Неопределено;
			Для Каждого IPAddress Из MyItem.IPAddress Цикл
				Если ЗначениеЗаполнено(IPAddress) Тогда
					IP = IPAddress;
					прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Возврат IP;
	
КонецФункции	

Функция ПолучитьПользователяWindows()
	
	WScriptNetwork = новый COMОбъект("WScript.Network");
	Домен = СокрЛП(WScriptNetwork.UserDomain);
	Юзер  = СокрЛП(WScriptNetwork.UserName);
	Если ЗначениеЗаполнено(Домен) Тогда
		Возврат Домен + "\" + Юзер;
	Иначе 
		Возврат Юзер;
	КонецЕсли;
	
КонецФункции

Процедура ОчиститьВременнуюПапку(ТекПольз)
	
	//Пользователь = БюджетныйНаСервере.ПолучитьПользователя();
	
	ОчиститьВременнуюПапкуНаСервере(ТекПольз);   
	
КонецПроцедуры

Процедура ОчиститьВременнуюПапкуНаСервере(Пользователь)
	Каталог =  БюджетныйНаСервере.ВернутьРеквизит(Пользователь, "КаталогПользователя") ;
	Если ЗначениеЗаполнено(Каталог) Тогда
		Каталог =  Каталог + "\";		
		МассивФайлов = НайтиФайлы(Каталог,"*.*");
		КоличествоФайлов = МассивФайлов.Количество();
		ИндексФайла = 0;
		Если КоличествоФайлов > 0 Тогда 
			Для каждого ФайлКаталога Из МассивФайлов Цикл 
				
				ИндексФайла = ИндексФайла + 1;
				Состояние("Очистка папки временных файлов", 100/КоличествоФайлов*ИндексФайла);
				
				Если ФайлКаталога.ЭтоФайл() Тогда                                             				
					ИмяФайл = ФайлКаталога.Имя;
					ФайлВХранилище = БюджетныйНаСервере.НайтиФайлНаСервере(ИмяФайл);
					Если ЗначениеЗаполнено(ФайлВХранилище) И БюджетныйНаСервере.ВернутьРеквизит(ФайлВХранилище,"Размер") = Окр(ФайлКаталога.Размер()/1024,2) Тогда 
						Попытка
							УдалитьФайлы(ФайлКаталога.ПолноеИмя);
						Исключение
							Сообщить(ОписаниеОшибки());
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновленитьПлатформуКлиента(Отказ)
	#Если ВебКлиент Или МобильныйКлиент Или МобильноеПриложениеКлиент Тогда
		
	#иначе
		
		ТекущийРелизПлатформы =""; 
		СтруктураНайденного = Новый Структура;
		УЧ_Сервер.ПроверитьРелизПлатформыТекущегоПользоваетляНаНезаполненность(ТекущийРелизПлатформы, СтруктураНайденного);
		
		НомерСимволаVDI = Найти(ВРег(ИмяКомпьютера()),ВРег("DMZ"));
		//Если пользователь не подключился по VDI
		Если НомерСимволаVDI =0 Тогда     			
			
			РелизОбновления = СтруктураНайденного.ПолучитьРелизОбновленияНаСервере;
			
			Если БюджетныйНаКлиенте.РелизНовее(ТекущийРелизПлатформы,РелизОбновления) Тогда
				Если Вопрос("Внимание! Доступно обновление клиента 1С до версии " + Строка(РелизОбновления) + "! Процесс обновления может занять от 5 до 15 минут, в зависимости от скорости вашего Интернета.
					|Обновить сейчас?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да  Тогда
					
					//ОткрытьФормуМодально("ОбщаяФорма.ОбнаруженРелизОбновленияПлатформы");
					СисИнфо = Новый СистемнаяИнформация;
					Если Лев(СисИнфо.ВерсияОС,20)<> "Microsoft Windows XP" Тогда
						Попытка
							ИмяФайла = КаталогПрограммы()+"Test.txt";
							ТД = Новый ТекстовыйДокумент;
							ТД.Записать(ИмяФайла);
						Исключение
							Обновить = ОткрытьФормуМодально("ОбщаяФорма.ЗапуститьОтАдминистратора");
							//Если Обновить = Неопределено Тогда
							ЗавершитьРаботуСистемы(Ложь);	
							//КонецЕсли;
							Возврат
						КонецПопытки;
						УдалитьФайлы(ИмяФайла);
					КонецЕсли;
					
					Форма = ПолучитьФорму("Обработка.ОбновлениеПлатформы.Форма.Форма");
					Форма.Элементы.ОбновитьПлатформуНаКлиенте1.Видимость = Ложь;
					Форма.ОбновлятьПриЗапуске = Истина;
					Форма.ОткрытьМодально();
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Пользователь %1 обновил 1С на компьютере %2", БюджетныйНаСервере.ПолучитьПользователя(), ИмяКомпьютера());
					сабВнутреннийЧатСервер.СоздатьНовоеСообщениеЧата(Неопределено, ТекстСообщения, Истина, Ложь, ПредопределенноеЗначение("Справочник.Пользователи.Система")); 
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры

Процедура ИзменитьПутьКБазе(СтарыйПуть, НовыйПуть)
	
	WSH = Новый COMobject("wscript.shell"); 
	ПрофильПользователя = WSH.ExpandEnvironmentStrings("%APPDATA%");//Возвращает используемое по умолчанию размещение данных приложений
	
	Каталог1CEStart = ПрофильПользователя + "\1C\1CEStart\";    
	КаталогСуществует = КаталогИлиФайлСуществует(Каталог1CEStart);    
	
	Если КаталогСуществует  = Ложь Тогда
		Сообщить("Не найден каталог инфрормационной базы.");
		Возврат;
	КонецЕсли;
	
	ОбновитьGUID = Истина;
	
	// Заменим GUID в списке баз на новый
	Файлibases = Каталог1CEStart + "ibases.v8i"; // путь к списку информационных баз пользователя
	Если КаталогИлиФайлСуществует(Файлibases) Тогда
		
		СписокБаз = Новый ТекстовыйДокумент;
		СписокБаз.Прочитать(Файлibases);
		
		ТекстФайла = СписокБаз.ПолучитьТекст();
		ТекстФайла = СтрЗаменить(ТекстФайла, СтарыйПуть, НовыйПуть);
		
		СписокБаз.УстановитьТекст(ТекстФайла);
		СписокБаз.Записать(Файлibases);
		Предупреждение("Путь к информационной базе изменен. Выполните, пожалуйста, повторнй запуск 1С!");
		
		//Позиция = Найти(ТекстФайла, "Connect=Srvr=""10.20.0.240"";Ref=""uchet_spirt_old""");
		
		//Если Позиция = 0 Тогда
		//	НовыйGUID = Новый УникальныйИдентификатор;
		//	
		//	// Если такой идентификатор уже есть - получим новый и снова проверим
		//	Пока Найти(ТекстФайла, НовыйGUID) > 0 Цикл
		//		НовыйGUID = Новый УникальныйИдентификатор;
		//	КонецЦикла;    
		//	
		//	ТекстФайлаНовый = ТекстФайла + "
		//	|[УК]
		//	|Connect=Srvr=""10.20.0.240"";Ref=""uchet_spirt_old"";
		//	|ID=" + Строка(НовыйGUID) + "
		//	|OrderInList=0
		//	|Folder=/
		//	|OrderInTree=0
		//	|External=0
		//	|ClientConnectionSpeed=Normal
		//	|App=Auto
		//	|WA=1
		//	|Version=8.3
		//	|DefaultVersion=8.3.5.1068";
		//	
		//	СписокБаз.УстановитьТекст(ТекстФайлаНовый);
		//	СписокБаз.Записать(Файлibases);
		//КонецЕсли;
	КонецЕсли;
	
	//ТекРекв = БюджетныйНаСервере.ВернутьРеквизиты(ТекущийПользователь, "ИмяПользователя, Пароль");
	//
	//ЗапуститьПриложение(ТекПолноеНаим + "\1cestart.exe ENTERPRISE /S""10.20.0.240\uchet_spirt"" /N""" + ТекРекв.ИмяПользователя + """ /P""" + ТекРекв.Пароль + """");
	
КонецПроцедуры

Функция КаталогИлиФайлСуществует(Путь)
	
	КаталогНаДиске = Новый Файл(Путь);
	
	Если КаталогНаДиске.Существует() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;    
	
КонецФункции

Процедура ВыводВсплывающегоСообщенияЧатаКлиент() Экспорт
	
	ТекЗапись = сабВнутреннийЧатСервер.ПолучитьПоследнююЗапись();
	Если НЕ ТекЗапись = Неопределено Тогда
		#Если МобильныйКлиент Или МобильноеПриложениеКлиент Тогда
			Сообщить(Строка(ТекЗапись.Автор) + ":
			|" + Формат(ТекЗапись.ДатаВремя, "ДЛФ=T") + "
			|" + ТекЗапись.Текст, СтатусСообщения.Важное);
		#Иначе
			ПоказатьОповещениеПользователя("Сообщение чата 1С",,Строка(ТекЗапись.Автор) + ":
			|" + Формат(ТекЗапись.ДатаВремя, "ДЛФ=T") + "
			|" + ТекЗапись.Текст, БиблиотекаКартинок.Документ,СтатусОповещенияПользователя.Информация,Новый УникальныйИдентификатор);
		#КонецЕсли
		
	КонецЕсли;
	
	
КонецПроцедуры

// Процедура выполняет необходимые действия формирования текста назначения
// платежа.
//
Процедура СформироватьНазначениеПлатежа(ТекСтрока, НазначениеПлатежа, БезНалогаНДС,  ИзменениеСуммы = Ложь, ИменаРеквизитов = Неопределено) Экспорт
	
	Если ИменаРеквизитов = Неопределено Тогда
		ИменаРеквизитов = Новый Структура;
		ИменаРеквизитов.Вставить("СуммаДокумента", "СуммаДокумента");
	КонецЕсли;
	
	Если ИзменениеСуммы Тогда
		ПозицияСуммы = Найти(ТекСтрока.НазначениеПлатежа, "Сумма ");
		Если ПозицияСуммы = 0
		   И ЗначениеЗаполнено(ТекСтрока.НазначениеПлатежа) Тогда
			ТекстНазначение = ТекСтрока.НазначениеПлатежа;
		Иначе
			ТекстНазначение = Лев(ТекСтрока.НазначениеПлатежа, ПозицияСуммы - 1);
			Возврат;//если уже есть сумма
		КонецЕсли;
		Если Прав(ТекстНазначение, 1) = Символы.ПС Тогда
			ТекстНазначение = Лев(ТекстНазначение, СтрДлина(ТекстНазначение) - 1);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекстНазначение) Тогда
			ТекстНазначение = НазначениеПлатежа;
		КонецЕсли;
	Иначе
		ТекстНазначение = НазначениеПлатежа;
	КонецЕсли;
		
	ТекстСумма = Строка(Формат(ТекСтрока[ИменаРеквизитов.СуммаДокумента], "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ="));
	
	ТекстНДС = "";
	СтавкаНДС = сабОбщегоНазначения.ПолучитьСтавкуНДС(ТекСтрока.СтавкаНДС);
		
	Если ЗначениеЗаполнено(ТекСтрока.СтавкаНДС) И НЕ БезНалогаНДС Тогда
		ТекстНДС = НСтр("ru = 'НДС(%СтавкаНДС%) %СуммаНДС%'");
		ТекстНДС = СтрЗаменить(ТекстНДС, "%СтавкаНДС%", Строка(ТекСтрока.СтавкаНДС));
		ТекстНДС = СтрЗаменить(ТекстНДС, "%СуммаНДС%", Строка(Формат(ТекСтрока.СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=")));
		ТекстНДС = СтрЗаменить(ТекстНДС, "(Произвольная)", "");
	ИначеЕсли ТекСтрока.СтавкаНДС = сабОбщегоНазначения.ПолучитьЭлементНДС("Произвольная") Тогда
		ТекстНДС = НСтр("ru = 'НДС(%СтавкаНДС%) %СуммаНДС%'");
		ТекстНДС = СтрЗаменить(ТекстНДС, "(%СтавкаНДС%)", "");
		ТекстНДС = СтрЗаменить(ТекстНДС, "%СуммаНДС%", Строка(Формат(ТекСтрока.СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=")))		
	КонецЕсли;
	
	ТекстНазначениеПлатежа = НСтр(
		"ru = '%ТекстНазначение%
		|Сумма %ТекстСумма%
		|%ЗначениеСтавкиНДС% %ТекстНДС%'"
	);
	ТекстНазначениеПлатежа = СтрЗаменить(ТекстНазначениеПлатежа, "%ТекстНазначение%", ТекстНазначение);
	ТекстНазначениеПлатежа = СтрЗаменить(ТекстНазначениеПлатежа, "%ТекстСумма%", ТекстСумма);
	ТекстНазначениеПлатежа = СтрЗаменить(ТекстНазначениеПлатежа, "%ЗначениеСтавкиНДС%", ?((БезНалогаНДС ИЛИ НЕ ЗначениеЗаполнено(ТекСтрока.СтавкаНДС)) И НЕ ТекСтрока.СтавкаНДС = сабОбщегоНазначения.ПолучитьЭлементНДС("Произвольная"), НСтр("ru = 'Без налога (НДС)'"), НСтр("ru = 'В т.ч. '")));
	ТекстНазначениеПлатежа = СтрЗаменить(ТекстНазначениеПлатежа, "%ТекстНДС%", ТекстНДС);
	
	НазначениеПлатежа = ТекстНазначениеПлатежа;
	
КонецПроцедуры // СформироватьНазначениеПлатежа()


