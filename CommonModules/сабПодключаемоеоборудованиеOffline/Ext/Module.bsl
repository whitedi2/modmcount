
#Область ПрограммныйИнтерфейс

// Процедура вызывается при очистке товаров в устройстве.
// Выполняет запись информации в узел плана обмена.
//
// Параметры:
//  Устройство       - СправочникСсылка.ПодключаемоеОборудование - Ссылка на устройство.
//  ВыполненоУспешно - Булево - Признак успешного выполнения операции.
//
Процедура ПриОчисткеТоваровВУстройстве(Устройство, ВыполненоУспешно = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.УзелИнформационнойБазы КАК УзелИнформационнойБазы
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.Ссылка = &Устройство");
	
	Запрос.УстановитьПараметр("Устройство", Устройство);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	НачатьТранзакцию();
	Попытка
		
		Пока Выборка.Следующий() Цикл
			УзелОбъект = Выборка.УзелИнформационнойБазы.ПолучитьОбъект();
			УзелОбъект.ДатаВыгрузки      = ТекущаяДатаСеанса();
			УзелОбъект.ВыгрузкаВыполнена = ВыполненоУспешно;
			УзелОбъект.Записать();
		КонецЦикла;
		
		ЗарегистрироватьИзменения(Устройство);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Розничные продажи'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Процедура вызывается при выгрузке товаров в устройство.
// Выполняет запись информации в узел плана обмена.
//
// Параметры:
//  Устройство       - СправочникСсылка.ПодключаемоеОборудование - Ссылка на устройство.
//  ВыполненоУспешно - Булево - Признак успешного выполнения операции.
//
Процедура ПриВыгрузкеТоваровВУстройство(Устройство, СтруктураДанные, ВыполненоУспешно = Истина, РасширеннаяВыгрузка = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.УзелИнформационнойБазы                             КАК УзелИнформационнойБазы,
	|	ПодключаемоеОборудование.ПравилоОбмена                                      КАК ПравилоОбмена,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.ВыгружатьИзменения, Истина) КАК ВыгружатьИзменения
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.Ссылка = &Устройство");
	
	Запрос.УстановитьПараметр("Устройство", Устройство);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	НачатьТранзакцию();
	Попытка
		
		Пока Выборка.Следующий() Цикл
			
			Если ВыполненоУспешно И СтруктураДанные <> Неопределено Тогда
				
				Если Выборка.ВыгружатьИзменения Тогда
					
					Набор = РегистрыСведений.КодыТоваровПодключаемогоОборудованияOffline.СоздатьНаборЗаписей();
					
					Если РасширеннаяВыгрузка Тогда
						Коллекция = СтруктураДанные.МассивКодовSKU;
					Иначе
						Коллекция = СтруктураДанные.Данные;
					КонецЕсли;
					
					Для Каждого СтрокаТЧ Из Коллекция Цикл
						
						Набор.Отбор.ПравилоОбмена.Значение = Выборка.ПравилоОбмена;
						Набор.Отбор.ПравилоОбмена.Использование = Истина;
						
						Набор.Отбор.Код.Значение = ?(РасширеннаяВыгрузка, СтрокаТЧ, СтрокаТЧ.КодВРегистре);
						Набор.Отбор.Код.Использование = Истина;
						
						ПланыОбмена.УдалитьРегистрациюИзменений(Выборка.УзелИнформационнойБазы, Набор);
						
					КонецЦикла;
					
				Иначе
					
					ПланыОбмена.УдалитьРегистрациюИзменений(Выборка.УзелИнформационнойБазы);
					
				КонецЕсли;
				
			КонецЕсли;
			
			УзелОбъект = Выборка.УзелИнформационнойБазы.ПолучитьОбъект();
			УзелОбъект.ДатаВыгрузки      = ТекущаяДатаСеанса();
			УзелОбъект.ВыгрузкаВыполнена = ВыполненоУспешно;
			УзелОбъект.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Розничные продажи'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#Область ВыгрузкаТоваров

// Функция возвращает структуру с данными в формате, необходимом для выгрузки списка товаров в весы с печатью этикеток.
//
// Параметры:
//  Устройство - СправочникСсылка.ПодключаемоеОборудование - Устройство для которого необходимо получить данные.
//  ТолькоИзмененные - Булево - Флаг получения только измененных данных.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//  * Данные - Массив - Выгружаемые данные.
//  * КоличествоНеВыгруженныхСтрокСОшибками - Число - Количество строк с ошибками.
//  * ЧастичнаяВыгрузка - Булево - Признак частичной выгрузки.
//  * Параметры - Структура - см. функцию ПолучитьПараметрыУстройства.
//
Функция ПолучитьДанныеДляВесов(Устройство, ТолькоИзмененные = Истина) Экспорт
	
	Параметры = ПолучитьПараметрыУстройства(Устройство);
	Если Параметры = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры.Вставить("ЧастичнаяВыгрузка", ТолькоИзмененные И Параметры.ВыгружатьИзменения);
	
	ВозвращаемоеЗначение = Новый Структура(
		"Данные, КоличествоНеВыгруженныхСтрокСОшибками, ЧастичнаяВыгрузка, Параметры",
		Новый Массив,
		0,
		ТолькоИзмененные И Параметры.ВыгружатьИзменения,
		Параметры);
	
	Таблица = ПолучитьТаблицуТоваровКВыгрузке(Устройство, Параметры, Истина);
	
	МаксимальныйКодВесовогоТовара = МаксимальныйКодВесовогоТовара();
	
	Для Каждого СтрокаТЧ Из Таблица Цикл
		
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ВозвращаемоеЗначение.КоличествоНеВыгруженныхСтрокСОшибками = ВозвращаемоеЗначение.КоличествоНеВыгруженныхСтрокСОшибками + 1;
			Продолжить;
		КонецЕсли;
		
		Штрихкод = СтрокаТЧ.МассивШтрихкодов[0];
		
		ЭлементМассива = Новый Структура("КодВРегистре, PLU, Код, Штрихкод, Наименование, Цена, ОписаниеТовара", 0, 0, 0, "", "" , 0, "");
		// Все коды товаров в правилах выгрузки начинаются с 100000
		Если СтрокаТЧ.Код > МаксимальныйКодВесовогоТовара Тогда
			ЭлементМассива.PLU = Число(СтрокаТЧ.Код - МаксимальныйКодВесовогоТовара);
		Иначе
			ЭлементМассива.PLU = Число(СтрокаТЧ.Код);
		КонецЕсли;
		ЭлементМассива.КодВРегистре = Число(СтрокаТЧ.Код);
		ЭлементМассива.Код          = Число(Сред(Штрихкод, 3, 5));
		Если СтрокаТЧ.Используется Тогда
			ЭлементМассива.Наименование   = Строка(СтрокаТЧ.Номенклатура);
			ЭлементМассива.ОписаниеТовара = СтрокаТЧ.ОписаниеТовара;
			ЭлементМассива.Цена           = СтрокаТЧ.Цена;
		КонецЕсли;
		
		ВозвращаемоеЗначение.Данные.Добавить(ЭлементМассива);
		
	КонецЦикла;

	Возврат ВозвращаемоеЗначение;

КонецФункции

// Функция получает параметры устройства
//
// Параметры:
//  Устройство - СправочникСсылка.ПодключаемоеОборудование - Ссылка на устройство.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//  * ПравилоОбмена - СправочникСсылка.ПравилаОбменаСПодключаемымОборудованием - Правило обмена.
//  * УзелИнформационнойБазы - ПланОбменаСсылка - узел информационной базы.
//  * Склад - СправочникСсылка.Склады - Склад.
//  * ВидЦены - СправочникСсылка.ВидыЦен - Вид цены.
//  * ТипОборудования - ПеречислениеСсылка.ТипыОборудования - тип оборудования.
//  * МаксимальныйКод - Число - Максимальный код.
//  * ВыгружатьИзменения - Булево - Признак необходимости выгрузки изменений.
//
Функция ПолучитьПараметрыУстройства(Устройство) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.ПравилоОбмена КАК ПравилоОбмена,
	|	ПодключаемоеОборудование.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.Подразделение.РозничныйВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) КАК ВидЦены,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК Склад,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.МаксимальныйКод, 0) КАК МаксимальныйКод,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.ВыгружатьИзменения, ИСТИНА) КАК ВыгружатьИзменения,
	|	ПодключаемоеОборудование.ТипОборудования КАК ТипОборудования,
	|	ПодключаемоеОборудование.ПравилоОбмена.Подразделение КАК Подразделение,
	|	ПодключаемоеОборудование.ПравилоОбмена.Подразделение.Владелец КАК Предприятие
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.Ссылка = &Устройство";
	
	Запрос.УстановитьПараметр("Устройство", Устройство);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ПравилоОбмена",          Выборка.ПравилоОбмена);
	ВозвращаемоеЗначение.Вставить("УзелИнформационнойБазы", Выборка.УзелИнформационнойБазы);
	ВозвращаемоеЗначение.Вставить("Склад",                  Выборка.Склад);
	ВозвращаемоеЗначение.Вставить("ВидЦены",                Выборка.ВидЦены);
	ВозвращаемоеЗначение.Вставить("ТипОборудования",        Выборка.ТипОборудования);
	ВозвращаемоеЗначение.Вставить("МаксимальныйКод",        Выборка.МаксимальныйКод + МаксимальныйКодВесовогоТовара());
	ВозвращаемоеЗначение.Вставить("ВыгружатьИзменения",     Выборка.ВыгружатьИзменения);
	ВозвращаемоеЗначение.Вставить("Подразделение",          Выборка.Подразделение);
	ВозвращаемоеЗначение.Вставить("Предприятие",            Выборка.Предприятие);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Функция регистрирует изменения для устройства.
//
// Параметры:
//  Устройство - СправочникСсылка.ПодключаемоеОборудование - Ссылка на устройство.
//
Процедура ЗарегистрироватьИзменения(Устройство) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	КодыТоваровПодключаемогоОборудованияOffline.Код КАК Код,
	|	КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена КАК ПравилоОбмена
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
	|		ПО ПодключаемоеОборудование.ПравилоОбмена = КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена
	|ГДЕ
	|	КодыТоваровПодключаемогоОборудованияOffline.Используется
	|	И ПодключаемоеОборудование.Ссылка = &Устройство");
	
	Запрос.УстановитьПараметр("Устройство", Устройство);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	НачатьТранзакцию();
	Попытка
		
		Набор = РегистрыСведений.КодыТоваровПодключаемогоОборудованияOffline.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			
			Набор.Отбор.ПравилоОбмена.Значение = Выборка.ПравилоОбмена;
			Набор.Отбор.ПравилоОбмена.Использование = Истина;
			
			Набор.Отбор.Код.Значение = Выборка.Код;
			Набор.Отбор.Код.Использование = Истина;
			
			ПланыОбмена.ЗарегистрироватьИзменения(Выборка.УзелИнформационнойБазы, Набор);
		
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Розничные продажи'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Процедура заполняет структуру прайс-листа для выгрузке на ККМ Offline в расширенном формате (с группами товаров)
//
Процедура ЗаполнитьСтруктуруПрайсЛистаИзДанныхКВыгрузке(СтруктураПрайсЛиста, ТоварыКВыгрузке) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТоварыКВыгруке.Код КАК Код,
	|	ТоварыКВыгруке.КодГруппы КАК КодГруппы,
	|	ТоварыКВыгруке.Группа КАК Группа,
	|	ТоварыКВыгруке.ЭтоГруппа КАК ЭтоГруппа,
	|	ТоварыКВыгруке.Артикул КАК Артикул,
	|	ТоварыКВыгруке.Весовой КАК Весовой,
	|	ТоварыКВыгруке.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТоварыКВыгруке.КодЕдиницыИзмерения КАК КодЕдиницыИзмерения,
	|	ТоварыКВыгруке.НаименованиеЕдиницыИзмерения КАК НаименованиеЕдиницыИзмерения,
	|	ТоварыКВыгруке.КоэффициентУпаковки КАК КоэффициентУпаковки,
	|	ТоварыКВыгруке.Номенклатура КАК Номенклатура,
	|	ТоварыКВыгруке.Наименование КАК Наименование,
	|	ТоварыКВыгруке.Остаток КАК Остаток,
	|	ТоварыКВыгруке.СтавкаНДС КАК СтавкаНДС,
	|	ТоварыКВыгруке.Алкоголь КАК Алкоголь,
	|	ТоварыКВыгруке.Маркируемый КАК Маркируемый,
	|	ТоварыКВыгруке.КодВидаАлкогольнойПродукции КАК КодВидаАлкогольнойПродукции,
	|	ТоварыКВыгруке.ЕмкостьТары КАК ЕмкостьТары,
	|	ТоварыКВыгруке.Крепость КАК Крепость,
	|	ТоварыКВыгруке.ИННПроизводителя КАК ИННПроизводителя,
	|	ТоварыКВыгруке.КПППроизводителя КАК КПППроизводителя,
	|	ТоварыКВыгруке.Упаковка КАК Упаковка,
	|	ТоварыКВыгруке.УпаковкаНаименование КАК УпаковкаНаименование,
	|	ТоварыКВыгруке.Характеристика КАК Характеристика,
	//Считаем что упаково и характеристик нет
	|	ЛОЖЬ КАК ЕстьХарактеристики,
	|	ЛОЖЬ КАК ЕстьУпаковки,
	//|	ВЫБОР
	//|		КОГДА ТоварыКВыгруке.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	//|			ТОГДА ЛОЖЬ
	//|		ИНАЧЕ ИСТИНА
	//|	КОНЕЦ КАК ЕстьХарактеристики,
	//|	ВЫБОР
	//|		КОГДА ТоварыКВыгруке.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	//|			ТОГДА ЛОЖЬ
	//|		ИНАЧЕ ИСТИНА
	//|	КОНЕЦ КАК ЕстьУпаковки,
	|	ТоварыКВыгруке.ХарактеристикаНаименование КАК ХарактеристикаНаименование,
	|	ТоварыКВыгруке.Цена КАК Цена,
	|	ТоварыКВыгруке.Штрихкод КАК Штрихкод,
	|	ТоварыКВыгруке.ПодакцизныйТовар КАК ПодакцизныйТовар,
	|	ТоварыКВыгруке.ТипНоменклатуры КАК ТипНоменклатуры
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&ТоварыКВыгруке КАК ТоварыКВыгруке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Наименование КАК Наименование,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.ХарактеристикаНаименование КАК ХарактеристикаНаименование,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.УпаковкаНаименование КАК УпаковкаНаименование,
	|	Товары.КодГруппы КАК КодГруппы,
	|	Товары.Группа КАК Группа,
	|	Товары.ЭтоГруппа КАК ЭтоГруппа,
	|	Товары.Артикул КАК Артикул,
	|	Товары.Весовой КАК Весовой,
	|	Товары.КодЕдиницыИзмерения КАК КодЕдиницыИзмерения,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.НаименованиеЕдиницыИзмерения КАК НаименованиеЕдиницыИзмерения,
	|	Товары.Код КАК Код,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.Остаток КАК Остаток,
	|	Товары.Цена КАК Цена,
	|	Товары.Штрихкод КАК Штрихкод,
	|	Товары.Алкоголь КАК Алкоголь,
	|	Товары.Маркируемый КАК Маркируемый,
	|	Товары.КодВидаАлкогольнойПродукции КАК КодВидаАлкогольнойПродукции,
	|	Товары.ЕмкостьТары КАК ЕмкостьТары,
	|	Товары.Крепость КАК Крепость,
	|	Товары.ИННПроизводителя КАК ИННПроизводителя,
	|	Товары.КПППроизводителя КАК КПППроизводителя,
	|	Товары.КоэффициентУпаковки КАК КоэффициентУпаковки,
	|	Товары.ТипНоменклатуры КАК ТипНоменклатуры,
	|	Товары.ПодакцизныйТовар КАК ПодакцизныйТовар,
	|	Товары.ЕстьХарактеристики КАК ЕстьХарактеристики,
	|	Товары.ЕстьУпаковки КАК ЕстьУпаковки
	|ИЗ
	|	Товары КАК Товары
	|ИТОГИ
	|	МАКСИМУМ(Наименование),
	|	МАКСИМУМ(ХарактеристикаНаименование),
	|	МАКСИМУМ(КодГруппы),
	|	МАКСИМУМ(Группа),
	|	МАКСИМУМ(ЭтоГруппа),
	|	МАКСИМУМ(Артикул),
	|	МАКСИМУМ(Весовой),
	|	МАКСИМУМ(КодЕдиницыИзмерения),
	|	МАКСИМУМ(ЕдиницаИзмерения),
	|	МАКСИМУМ(НаименованиеЕдиницыИзмерения),
	|	МАКСИМУМ(Код),
	|	МАКСИМУМ(СтавкаНДС),
	|	МАКСИМУМ(ТипНоменклатуры),
	|	МАКСИМУМ(ЕстьХарактеристики),
	|	МАКСИМУМ(ЕстьУпаковки),
	|	МАКСИМУМ(Штрихкод),
	|	МАКСИМУМ(ПодакцизныйТовар),
	|	МАКСИМУМ(Алкоголь),
	|	МАКСИМУМ(Маркируемый),
	|	МАКСИМУМ(КодВидаАлкогольнойПродукции),
	|	МАКСИМУМ(ЕмкостьТары),
	|	МАКСИМУМ(Крепость),
	|	МАКСИМУМ(ИННПроизводителя),
	|	МАКСИМУМ(КПППроизводителя),
	|	МАКСИМУМ(Цена),
	|	МАКСИМУМ(Остаток)
	|ПО
	|	Номенклатура,
	|	Характеристика");
	
	Запрос.УстановитьПараметр("ТоварыКВыгруке", ТоварыКВыгрузке);
	РезультатЗапроса = Запрос.Выполнить();
	
	МассивПодобранныхЕИ = Новый Массив;
	ВыборкаПоНоменклатуре = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоНоменклатуре.Следующий() Цикл
		
		Если ВыборкаПоНоменклатуре.ЭтоГруппа Тогда
			
			ЗаписьГруппа = МенеджерОфлайнОборудования.ПолучитьЗаписьГруппыТоваров();
			
			ЗаписьГруппа.Код = Строка(Формат(ВыборкаПоНоменклатуре.Код, "ЧГ=0"));
			
			Если ЗначениеЗаполнено(ВыборкаПоНоменклатуре.КодГруппы) Тогда
				ЗаписьГруппа.КодГруппы = Строка(Формат(ВыборкаПоНоменклатуре.КодГруппы, "ЧГ=0"));
				ЗаписьГруппа.УникальныйИдентификаторГруппы = ВыборкаПоНоменклатуре.Группа.УникальныйИдентификатор();
			КонецЕсли;
			
			ЗаписьГруппа.Наименование = ВыборкаПоНоменклатуре.Наименование;
			ЗаписьГруппа.УникальныйИдентификатор = ВыборкаПоНоменклатуре.Номенклатура.УникальныйИдентификатор();
			СтруктураПрайсЛиста.ГруппыТоваров.Добавить(ЗаписьГруппа);
			
		Иначе
			
			ЗаписьТовар = МенеджерОфлайнОборудования.ПолучитьЗаписьТовара();
			
			Если ЗначениеЗаполнено(ВыборкаПоНоменклатуре.КодГруппы) Тогда
				ЗаписьТовар.КодГруппы = Строка(Формат(ВыборкаПоНоменклатуре.КодГруппы, "ЧГ=0"));
				ЗаписьТовар.УникальныйИдентификаторГруппы = ВыборкаПоНоменклатуре.Группа.УникальныйИдентификатор();
			КонецЕсли;
			
			ЗаписьТовар.Наименование     = ВыборкаПоНоменклатуре.Наименование;
			ЗаписьТовар.Артикул          = ВыборкаПоНоменклатуре.Артикул;
			ЗаписьТовар.ЭтоВесовойТовар  = ВыборкаПоНоменклатуре.Весовой;
			ЗаписьТовар.КодЕдиницыИзмерения = ВыборкаПоНоменклатуре.КодЕдиницыИзмерения;
			ЗаписьТовар.ЭтоАлкоголь      = ВыборкаПоНоменклатуре.Алкоголь;
			ЗаписьТовар.Код              = Строка(Формат(ВыборкаПоНоменклатуре.Код, "ЧГ=0"));
			ЗаписьТовар.СтавкаНДС        = ВыборкаПоНоменклатуре.СтавкаНДС.Ставка;
			ЗаписьТовар.ПризнакПредметаРасчета = ПризнакПредметаРасчетаФискальнойОперации(
			ВыборкаПоНоменклатуре.ТипНоменклатуры,
			ВыборкаПоНоменклатуре.ПодакцизныйТовар);
			
			Если ЗаписьТовар.ЭтоАлкоголь Тогда
				ЗаписьТовар.АлкогольныеРеквизиты.Маркируемый = ВыборкаПоНоменклатуре.Маркируемый;
				ЗаписьТовар.АлкогольныеРеквизиты.КодВидаАлкогольнойПродукции = ВыборкаПоНоменклатуре.КодВидаАлкогольнойПродукции;
				ЗаписьТовар.АлкогольныеРеквизиты.ЕмкостьТары = ВыборкаПоНоменклатуре.ЕмкостьТары;
				ЗаписьТовар.АлкогольныеРеквизиты.Крепость = ВыборкаПоНоменклатуре.Крепость;
				ЗаписьТовар.АлкогольныеРеквизиты.ИННПроизводителя = ВыборкаПоНоменклатуре.ИННПроизводителя;
				ЗаписьТовар.АлкогольныеРеквизиты.КПППроизводителя = ВыборкаПоНоменклатуре.КПППроизводителя;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаПоНоменклатуре.ЕдиницаИзмерения) Тогда
				УникальныйИдентификаторЕИ = ВыборкаПоНоменклатуре.ЕдиницаИзмерения.УникальныйИдентификатор();
				Если МассивПодобранныхЕИ.Найти(УникальныйИдентификаторЕИ) = Неопределено Тогда
					ЕдиницаИзмеренияККМ = МенеджерОфлайнОборудования.ПолучитьЗаписьЕдиницыИзмерения();
					ЕдиницаИзмеренияККМ.Код = ВыборкаПоНоменклатуре.КодЕдиницыИзмерения;
					ЕдиницаИзмеренияККМ.Наименование = ВыборкаПоНоменклатуре.НаименованиеЕдиницыИзмерения;
					ЕдиницаИзмеренияККМ.УникальныйИдентификатор = УникальныйИдентификаторЕИ;
					
					СтруктураПрайсЛиста.ЕдиницыИзмерения.Добавить(ЕдиницаИзмеренияККМ);
					МассивПодобранныхЕИ.Добавить(УникальныйИдентификаторЕИ);
				КонецЕсли;
				ЗаписьТовар.УникальныйИдентификаторЕдиницыИзмерения = УникальныйИдентификаторЕИ;
			КонецЕсли;
			
			ЗаписьТовар.УникальныйИдентификатор = ВыборкаПоНоменклатуре.Номенклатура.УникальныйИдентификатор();
			Если ВыборкаПоНоменклатуре.ЕстьХарактеристики Тогда
				
				ЗаписьТовар.ИмеетХарактеристики = Истина;
				ЗаписьТовар.ИмеетУпаковки       = Ложь;
				
				ВыборкаПоХарактеристикам = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаПоХарактеристикам.Следующий() Цикл
					
					ЗаписьХарактеристика = МенеджерОфлайнОборудования.ПолучитьЗаписьХарактеристики();
					ЗаписьХарактеристика.Наименование = ВыборкаПоХарактеристикам.ХарактеристикаНаименование;
					
					Если ВыборкаПоХарактеристикам.ЕстьУпаковки Тогда
						
						ЗаписьХарактеристика.ИмеетУпаковки       = Истина;
						
						ВыборкаПоУпаковкам = ВыборкаПоХарактеристикам.Выбрать();
						
						Пока ВыборкаПоУпаковкам.Следующий() Цикл
							ЗаписьУпаковка = МенеджерОфлайнОборудования.ПолучитьЗаписьУпаковки();
							Если ВыборкаПоНоменклатуре.Весовой Тогда 
								
								ЗаписьУпаковка.Код      = Сред(ВыборкаПоУпаковкам.Штрихкод, 3, 5);
							Иначе
								Если ЗначениеЗаполнено(ВыборкаПоУпаковкам.Штрихкод) Тогда
									МассивШК = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВыборкаПоУпаковкам.Штрихкод,",",,);
									Для каждого СтрокаШтрихкод Из МассивШК Цикл
										ЗаписьШтрихкода = МенеджерОфлайнОборудования.ПолучитьЗаписьШтрихкода();
										ЗаписьШтрихкода.Штрихкод = СтрокаШтрихкод;
										ЗаписьУпаковка.Штрихкоды.Добавить(ЗаписьШтрихкода);
									КонецЦикла; 
								КонецЕсли;
								ЗаписьУпаковка.Код      = Строка(Формат(ВыборкаПоУпаковкам.Код, "ЧГ=0"));
							КонецЕсли;
							ЗаписьУпаковка.Цена     = ВыборкаПоУпаковкам.Цена;
							ЗаписьУпаковка.Остаток  = ВыборкаПоУпаковкам.Остаток;
							ЗаписьУпаковка.Коэффициент = ВыборкаПоУпаковкам.КоэффициентУпаковки;
							ЗаписьУпаковка.Наименование  = ВыборкаПоУпаковкам.УпаковкаНаименование;
							
							Если ЗначениеЗаполнено(ВыборкаПоУпаковкам.Упаковка) Тогда
								ЗаписьУпаковка.УникальныйИдентификатор = ВыборкаПоУпаковкам.Упаковка.УникальныйИдентификатор();
							Иначе	
								ЗаписьУпаковка.УникальныйИдентификатор = Неопределено;
							КонецЕсли;
							
							ЗаписьХарактеристика.Упаковки.Добавить(ЗаписьУпаковка);
							
						КонецЦикла;
						
					Иначе
						ЗаписьХарактеристика.ИмеетУпаковки       = Ложь;
						Если ВыборкаПоНоменклатуре.Весовой Тогда 
							ЗаписьХарактеристика.Код = Сред(ВыборкаПоХарактеристикам.Штрихкод, 3, 5);
						Иначе
							Если ЗначениеЗаполнено(ВыборкаПоХарактеристикам.Штрихкод) Тогда
								МассивШК = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВыборкаПоХарактеристикам.Штрихкод,",",,);
								Для каждого СтрокаШтрихкод Из МассивШК Цикл
									ЗаписьШтрихкода = МенеджерОфлайнОборудования.ПолучитьЗаписьШтрихкода();
									ЗаписьШтрихкода.Штрихкод = СтрокаШтрихкод;
									ЗаписьХарактеристика.Штрихкоды.Добавить(ЗаписьШтрихкода);
								КонецЦикла;
							КонецЕсли;
							ЗаписьХарактеристика.Код  = Строка(Формат(ВыборкаПоХарактеристикам.Код, "ЧГ=0"));
						КонецЕсли;
						
						ЗаписьХарактеристика.Цена     = ВыборкаПоХарактеристикам.Цена;
						ЗаписьХарактеристика.Остаток  = ВыборкаПоХарактеристикам.Остаток;
						
					КонецЕсли;
					
					ЗаписьХарактеристика.УникальныйИдентификатор = ВыборкаПоХарактеристикам.Характеристика.УникальныйИдентификатор();
					
					ЗаписьТовар.Характеристики.Добавить(ЗаписьХарактеристика);
					
				КонецЦикла;
				
			ИначеЕсли ВыборкаПоНоменклатуре.ЕстьУпаковки И НЕ ВыборкаПоНоменклатуре.ЕстьХарактеристики Тогда
				
				ВыборкаПоПустойХарактеристике = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				ВыборкаПоПустойХарактеристике.Следующий();
				
				ВыборкаПоУпаковкам = ВыборкаПоПустойХарактеристике.Выбрать();
				
				ЗаписьТовар.ИмеетУпаковки       = Истина;
				ЗаписьТовар.ИмеетХарактеристики = Ложь;
				
				Пока ВыборкаПоУпаковкам.Следующий() Цикл
					
					ЗаписьУпаковка = МенеджерОфлайнОборудования.ПолучитьЗаписьУпаковки();
					
					Если ВыборкаПоНоменклатуре.Весовой Тогда 
						ЗаписьУпаковка.Код      = Сред(ВыборкаПоУпаковкам.Штрихкод, 3, 5);
					Иначе
						Если ЗначениеЗаполнено(ВыборкаПоУпаковкам.Штрихкод) Тогда
							МассивШК = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВыборкаПоУпаковкам.Штрихкод,",",,);
							Для каждого СтрокаШтрихкод Из МассивШК Цикл
								ЗаписьШтрихкода = МенеджерОфлайнОборудования.ПолучитьЗаписьШтрихкода();
								ЗаписьШтрихкода.Штрихкод = СтрокаШтрихкод;
								ЗаписьУпаковка.Штрихкоды.Добавить(ЗаписьШтрихкода);
							КонецЦикла;
						КонецЕсли;
						ЗаписьУпаковка.Код      = Строка(Формат(ВыборкаПоУпаковкам.Код, "ЧГ=0"));
					КонецЕсли;
					
					ЗаписьУпаковка.Цена     = ВыборкаПоУпаковкам.Цена;
					ЗаписьУпаковка.Остаток  = ВыборкаПоУпаковкам.Остаток;
					ЗаписьУпаковка.Коэффициент = ВыборкаПоУпаковкам.КоэффициентУпаковки;
					ЗаписьУпаковка.Наименование  = ВыборкаПоУпаковкам.УпаковкаНаименование;
					
					Если ЗначениеЗаполнено(ВыборкаПоУпаковкам.Упаковка) Тогда
						ЗаписьУпаковка.УникальныйИдентификатор = ВыборкаПоУпаковкам.Упаковка.УникальныйИдентификатор();
					Иначе
						ЗаписьУпаковка.УникальныйИдентификатор = Неопределено;
					КонецЕсли;
					
					ЗаписьТовар.Упаковки.Добавить(ЗаписьУпаковка);
					
				КонецЦикла;
				
			Иначе
				
				Если ВыборкаПоНоменклатуре.Весовой Тогда 
					ЗаписьТовар.Код      = Сред(ВыборкаПоНоменклатуре.Штрихкод, 3, 5);
				Иначе
					Если ЗначениеЗаполнено(ВыборкаПоНоменклатуре.Штрихкод) Тогда
						МассивШК = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВыборкаПоНоменклатуре.Штрихкод,",",,);
						Для каждого СтрокаШтрихкод Из МассивШК Цикл
							ЗаписьШтрихкода = МенеджерОфлайнОборудования.ПолучитьЗаписьШтрихкода();
							ЗаписьШтрихкода.Штрихкод = СтрокаШтрихкод;
							ЗаписьТовар.Штрихкоды.Добавить(ЗаписьШтрихкода);
						КонецЦикла;
					КонецЕсли;
					ЗаписьТовар.Код = Строка(Формат(ВыборкаПоНоменклатуре.Код, "ЧГ=0"));
				КонецЕсли;
				ЗаписьТовар.Цена     = ВыборкаПоНоменклатуре.Цена;
				ЗаписьТовар.Остаток  = ВыборкаПоНоменклатуре.Остаток;
				
				ЗаписьТовар.ИмеетУпаковки       = Ложь;
				ЗаписьТовар.ИмеетХарактеристики = Ложь;
				
			КонецЕсли;
			
			СтруктураПрайсЛиста.Товары.Добавить(ЗаписьТовар);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСРегистромКодыТоваровПодключаемогоОборудования

// Максимальный код весового товара.
// 
// Возвращаемое значение:
//  Число - Максимальный код весового товара.
//
Функция МаксимальныйКодВесовогоТовара() Экспорт
	
	Возврат 99999;
	
КонецФункции

// Функция возвращает максимальный код товара в регистре КодыТоваровПодключаемогоОборудованияOffline
// для заданного правила обмена.
//
// Параметры:
//  ПравилоОбмена - СправочникСсылка.ПравилаОбменаСПодключаемымОборудованиемOffline - Правило обмена.
//
// Возвращаемое значение:
//  Число - Максимальный код товарара для заданного правила обмена.
//
Функция ПолучитьМаксимальныйКод(ПравилоОбмена) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(КодыТоваровПодключаемогоОборудованияOffline.Код), 0) КАК Код
	|ИЗ
	|	РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
	|ГДЕ
	|	КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена = &ПравилоОбмена");
	
	Запрос.УстановитьПараметр("ПравилоОбмена", ПравилоОбмена);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	МаксимальныйКодВесовогоТовара = МаксимальныйКодВесовогоТовара();
	
	Если Выборка.Следующий() Тогда
		
		Код = Выборка.Код;
		Если Код < МаксимальныйКодВесовогоТовара Тогда
			Код = МаксимальныйКодВесовогоТовара;	
		КонецЕсли;
		
		Возврат Код;

	Иначе
		Возврат МаксимальныйКодВесовогоТовара;
	КонецЕсли;
	
КонецФункции

// Функция возвращает таблицу свободных кодов товара в регистре КодыТоваровПодключаемогоОборудованияOffline
// для заданного правила обмена. Свободными являются коды, для которых не задана соответствующая номенклатура.
//
// Параметры:
//  ПравилоОбмена - СправочникСсылка.ПравилаОбменаСПодключаемымОборудованиемOffline - Правило обмена.
//  Количество - Число - Необходимое количество свободных кодов.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица свободных кодов товаров с колонками:
//  * Код - Число - свободный код.
//
Функция ПолучитьСвободныеКоды(ПравилоОбмена, Количество = 0) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ //ПЕРВЫЕ
	|	КодыТоваровПодключаемогоОборудованияOffline.Код КАК Код
	|ИЗ
	|	РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
	|ГДЕ
	|	КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена = &ПравилоОбмена
	|	И КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодыТоваровПодключаемогоОборудованияOffline.Код Возр");
	
	Запрос.УстановитьПараметр("ПравилоОбмена", ПравилоОбмена);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ПЕРВЫЕ", ?(Количество = 0,"","ПЕРВЫЕ" + " " + Формат(Количество, "ЧГ=0")));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Процедура записывает в регистр КодыТоваровПодключаемогоОборудованияOffline
// код для заданного правила обмена и соответствующие ему параметры номенклатуры
//
// Параметры:
//  ПравилоОбмена - СправочникСсылка.ПравилаОбменаСПодключаемымОборудованиемOffline
//  Данные        - Структура - Структура, содержащая поля:
//   * Номенклатура - СправочникСсылка.Номенклатура - Номенклатура.
//   * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика.
//   * Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения - Упаковка.
//  Код           - Число - Код товара в разрезе правила обмена.
//  Используется  - Число - Признак того, что товар соответствует заданному в правиле обмена отбору.
//
Процедура ЗаписатьКод(Данные, ПравилоОбмена, Код, Используется) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.КодыТоваровПодключаемогоОборудованияOffline.СоздатьМенеджерЗаписи();
	
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Данные);
	
	МенеджерЗаписи.Код             = Код;
	МенеджерЗаписи.ПравилоОбмена   = ПравилоОбмена;
	МенеджерЗаписи.Используется    = Используется;
	
	МенеджерЗаписи.Записать();

КонецПроцедуры

// Процедура очищает параметры номенклатуры для записи, соответствущей коду в пределах правила обмена
// в регистре КодыТоваровПодключаемогоОборудованияOffline.
// Такая запись становится свободной.
//
// Параметры:
//  ПравилоОбмена - СправочникСсылка.ПравилаОбменаСПодключаемымОборудованиемOffline - Правило обмена.
//  Код           - Число - Код товара в разрезе правила обмена.
//
Процедура УдалитьКод(ПравилоОбмена, Код) Экспорт
	
	ЗаписатьКод(Новый Структура("Номенклатура, Характеристика, Упаковка"), ПравилоОбмена, Код , Ложь);
	
КонецПроцедуры

// Процедура обновляет записи в регистре КодыТоваровПодключаемогоОборудованияOffline
// в соответствии с правилом обмена. Записи, не соответствующие отбору правила становятся
// неиспользуемыми. Добавляются новые записи, соответствующие отбору, если такие будут найдены.
//
// Параметры:
//  ПравилоОбмена - СправочникСсылка.ПравилаОбменаСПодключаемымОборудованиемOffline - Правило обмена.
//
Процедура ОбновитьКодыТоваров(ПравилоОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПравилаОбменаСПодключаемымОборудованиемOffline.Подразделение.РозничныйВидЦены КАК ВидЦены,
	|	ПравилаОбменаСПодключаемымОборудованиемOffline.ЕдиницаИзмеренияВеса КАК ЕдиницаИзмеренияВеса,
	|	ПравилаОбменаСПодключаемымОборудованиемOffline.НастройкиКомпоновкиДанных КАК НастройкиКомпоновкиДанных,
	|	ПравилаОбменаСПодключаемымОборудованиемOffline.ТипПодключаемогоОборудования КАК ТипПодключаемогоОборудования
	|ИЗ
	|	Справочник.ПравилаОбменаСПодключаемымОборудованиемOffline КАК ПравилаОбменаСПодключаемымОборудованиемOffline
	|ГДЕ
	|	ПравилаОбменаСПодключаемымОборудованиемOffline.Ссылка = &ПравилоОбмена");
	
	Запрос.УстановитьПараметр("ПравилоОбмена", ПравилоОбмена);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	Если Выборка.ТипПодключаемогоОборудования = Перечисления.ТипыПодключаемогоОборудования.ККМОфлайн Тогда
		СхемаКомпоновкиДанных = Справочники.ПравилаОбменаСПодключаемымОборудованиемOffline.ПолучитьМакет("ОбновлениеКодовТоваровККМ");
	ИначеЕсли Выборка.ТипПодключаемогоОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток Тогда
		СхемаКомпоновкиДанных = Справочники.ПравилаОбменаСПодключаемымОборудованиемOffline.ПолучитьМакет("ОбновлениеPLUКодовТоваров");
	Иначе
		ВызватьИсключение НСтр("ru = 'Некорректный тип подключаемого оборудования'");
	КонецЕсли;
	
	// Подготовка компоновщика макета компоновки данных, загрузка настроек
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	Компоновщик.ЗагрузитьНастройки(Выборка.НастройкиКомпоновкиДанных.Получить());
	Компоновщик.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	// Заполнение структуры отчета и выбранных полей.
	Компоновщик.Настройки.Структура.Очистить();
	
	ГруппировкаДетальныеЗаписи = Компоновщик.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаДетальныеЗаписи.Использование = Истина;
	
	Компоновщик.Настройки.Выбор.Элементы.Очистить();
	
	ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Номенклатура");
	ВыбранноеПоле.Использование = Истина;
	
	Если Ложь Тогда//ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Характеристика");
		ВыбранноеПоле.Использование = Истина;
	КонецЕсли;
	
	Если Истина Тогда //ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Упаковка");
		ВыбранноеПоле.Использование = Истина;
	КонецЕсли;
	
	ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("СоответствуетОтбору");
	ВыбранноеПоле.Использование = Истина;
	
	ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Код");
	ВыбранноеПоле.Использование = Истина;
	
	ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Используется");
	ВыбранноеПоле.Использование = Истина;
	
	ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Весовой");
	ВыбранноеПоле.Использование = Истина;
	
	//СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(Компоновщик);
	
	// Компоновка макета и исполнение запроса.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Компоновщик.ПолучитьНастройки(), , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("Дата");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ТекущаяДатаСеанса();
	КонецЕсли;
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ВидЦены");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = Выборка.ВидЦены;
	КонецЕсли;
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ПравилоОбмена");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПравилоОбмена;
	КонецЕсли;
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ЕдиницаИзмеренияВеса");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = Выборка.ЕдиницаИзмеренияВеса;
	КонецЕсли;
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ФорматШтрихкода");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = РегистрыСведений.ШтрихкодыНоменклатуры.ФорматВесовогоШтрихкода(РегистрыСведений.ШтрихкодыНоменклатуры.ПрефиксУзлаШтрихкода());
	КонецЕсли;
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ДанныеОтчета = Новый ТаблицаЗначений();
	ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
	ДанныеОтчета = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	НачатьТранзакцию();
	Попытка
		
		PLU = ПолучитьМаксимальныйКод( ПравилоОбмена) + 1;
		СвободныеPLU = ПолучитьСвободныеКоды(ПравилоОбмена);
		Для Каждого Капсула Из ДанныеОтчета Цикл
			Если Капсула.СоответствуетОтбору Тогда
				Если Не ЗначениеЗаполнено(Капсула.Код) Тогда
					
					Если СвободныеPLU.Количество() = 0 Тогда
						ЗаписатьКод(Капсула, ПравилоОбмена, PLU, Истина);
						PLU = PLU + 1;
					Иначе
						ЗаписатьКод(Капсула, ПравилоОбмена, СвободныеPLU[0].Код, Истина);
						СвободныеPLU.Удалить(0);
					КонецЕсли;
					
				Иначе
					ЗаписатьКод(Капсула, ПравилоОбмена, Капсула.Код, Истина);
				КонецЕсли;
			Иначе
				ЗаписатьКод(Капсула, ПравилоОбмена, Капсула.Код, Ложь);
			КонецЕсли;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Розничные продажи'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Процедура выполняет обновление кодов товаров для всех правил обмена.
//
Процедура РегламентноеЗаданиеОбновитьКодыТоваров() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбновлениеКодовТоваровПодключаемогоОборудования);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление кодов товаров подключаемого оборудования Offline'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
	                         УровеньЖурналаРегистрации.Информация, , ,
	                         НСтр("ru = 'Начато регламентное обновление кодов товаров подключаемого оборудования Offline.'"));
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПравилаОбменаСПодключаемымОборудованиемOffline.Ссылка КАК ПравилоОбмена
	|ИЗ
	|	Справочник.ПравилаОбменаСПодключаемымОборудованиемOffline КАК ПравилаОбменаСПодключаемымОборудованиемOffline");
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Попытка
			ОбновитьКодыТоваров(Выборка.ПравилоОбмена);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление кодов товаров подключаемого оборудования Offline'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			                         УровеньЖурналаРегистрации.Ошибка, , ,
			                         НСтр("ru = 'Во время регламентного обновления кодов товаров подключаемого оборудования Offline произошла ошибка.'")
			                         + Символы.ПС + ИнформацияОбОшибке().Описание);
		КонецПопытки;
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление кодов товаров подключаемого оборудования Offline'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
	                         УровеньЖурналаРегистрации.Информация, , ,
	                         НСтр("ru = 'Закончено регламентное обновление кодов товаров подключаемого оборудования Offline.'"));
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаТоваров

// Функция возвращает таблицу товаров с данными к выгрузке в устройство.
//
// Параметры:
//  Устройство - СправочникСсылка.ПодключаемоеОборудование - Устройство для которого необходимо получить данные
//  ТолькоИзмененные - Булево - Флаг получения только измененных данных.
//  ОбновитьКодыТоваров - Булево - Флаг обновления кодов товаров перед получением данных.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица товаров к выгрузке.
//
Функция ПолучитьТаблицуТоваровКВыгрузке(Устройство, Параметры, ОбновитьКодыТоваров = Ложь, Штрихкод = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьСерииНоменклатуры = Ложь;//ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад", Новый Структура("Склад", Параметры.Склад));
	
	Если ОбновитьКодыТоваров Тогда
		ОбновитьКодыТоваров(Параметры.ПравилоОбмена);
	КонецЕсли;
	
	ВыгружатьГруппы = Истина;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|МаркетинговыеМероприятия.Номенклатура КАК Номенклатура,
	|МаркетинговыеМероприятия.ЦенаРеализации КАК ЦенаРеализации
	|ПОМЕСТИТЬ ВТ_Маркетинг
	|ИЗ
	|	РегистрСведений.МаркетинговыеМероприятия КАК МаркетинговыеМероприятия
	|ГДЕ
	|	МаркетинговыеМероприятия.ДатаРеализацииКон >= &ТекущаяДата
	|	И МаркетинговыеМероприятия.ДатаРеализацииНач <= &ТекущаяДата
	|	И МаркетинговыеМероприятия.Подразделение = &Подразделение
	|	И МаркетинговыеМероприятия.Предприятие = &Предприятие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|	ВЫБРАТЬ
	|	КодыТоваровПодключаемогоОборудованияOffline.Используется КАК Используется,
	|	КодыТоваровПодключаемогоОборудованияOffline.Код КАК Код,
	|	КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.Родитель.Код КАК КодГруппы,
	|	КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.Родитель КАК Группа,
	|	КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ЭтоГруппа КАК ЭтоГруппа,
	|	КодыТоваровПодключаемогоОборудованияOffline.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.Артикул,"""")            КАК Артикул,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.НаименованиеПолное,"""")       КАК НоменклатураНаименование,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.НаименованиеПолное,"""") КАК НоменклатураНаименованиеПолное,
	|	"""" КАК ОписаниеТовара,
	|	КодыТоваровПодключаемогоОборудованияOffline.Характеристика КАК Характеристика,
	|	""""       КАК ХарактеристикаНаименование,
	|	"""" КАК ХарактеристикаНаименованиеПолное,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ЕдиницаИзмерения.Код, """") КАК КодЕдиницыИзмерения,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ЕдиницаИзмерения.Наименование, """") КАК НаименованиеЕдиницыИзмерения,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ЕдиницаИзмерения, """") КАК ЕдиницаИзмерения,
	|	КодыТоваровПодключаемогоОборудованияOffline.Упаковка КАК Упаковка,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Упаковка.Наименование, """") КАК УпаковкаНаименование,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК КоэффициентУпаковки,
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """") КАК Штрихкод,
	|	ЕстьNULL(ВТ_Маркетинг.ЦенаРеализации, (ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1)
	|		/ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)) *
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)) КАК Цена,
	|	УчетныйОстатки.КоличествоОстаток КАК Остаток,
	|	ВЫБОР
	|		КОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес)
	|			ТОГДА Истина
	|		ИНАЧЕ Ложь
	|	КОНЕЦ КАК Весовой,
	|	КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.АлкогольнаяПродукция КАК ПодакцизныйТовар,
	|	
	|	//ИспользованиеСерий ВЫБОР КОГДА 1 В (ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК Т ГДЕ Т.Склад = &ПравилоОбменаСклад И Т.ПолитикаУчетаСерий.УказыватьПриОтгрузкеВРозницу И Т.Ссылка = КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ВидНоменклатуры) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК УказыватьСерииПриОтгрузкеВРозницу,
	|	
	|	ВЫБОР
	|		КОГДА КодыТоваровПодключаемогоОборудованияOfflineИзменения.Узел = &УзелИнформационнойБазы
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИндексКартинкиЕстьИзменения,
	|	
	|	КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	
	|	КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.АлкогольнаяПродукция КАК Алкоголь,
	|	
	|	ВЫБОР
	|		КОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.АлкогольнаяПродукция
	|			ТОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ВидАлкогольнойПродукцииЕГАИС.Маркируемый
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Маркируемый,
	|	
	|	ВЫБОР
	|		КОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.АлкогольнаяПродукция
	|			ТОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ВидАлкогольнойПродукцииЕГАИС.Код
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КодВидаАлкогольнойПродукции,
	|	
	|	ВЫБОР
	|		КОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.АлкогольнаяПродукция
	|			ТОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ОбъемДАЛ * 10
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ЕмкостьТары,
	|	
	|	ВЫБОР
	|		КОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.АлкогольнаяПродукция
	|			ТОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.Крепость
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Крепость,
	|	
	|	ВЫБОР
	|		КОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.АлкогольнаяПродукция
	|			ТОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.Производитель.ИНН
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ИННПроизводителя,
	|	
	|	ВЫБОР
	|		КОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.АлкогольнаяПродукция
	|			ТОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.Производитель.КПП
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КПППроизводителя
	|
	|ИЗ
	|	РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(&ТекущаяДата, Склад = &ПравилоОбменаСклад) КАК СвободныеОстатки
	//|		ПО КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = СвободныеОстатки.Номенклатура
	//|			И КодыТоваровПодключаемогоОборудованияOffline.Характеристика = СвободныеОстатки.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|			И КодыТоваровПодключаемогоОборудованияOffline.Характеристика = ШтрихкодыНоменклатуры.Характеристика
	|			И КодыТоваровПодключаемогоОборудованияOffline.Упаковка = ШтрихкодыНоменклатуры.Упаковка
	|			//ВесыСПечатьюЭтикеток И ШтрихкодыНоменклатуры.Штрихкод ПОДОБНО &ФорматШтрихкода
	|			И (КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины <> ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес) Или ШтрихкодыНоменклатуры.Штрихкод ПОДОБНО &ФорматШтрихкода)
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, ВидЦены = &ВидЦены И Подразделение = &Подразделение И Предприятие = &Предприятие) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	//|			И КодыТоваровПодключаемогоОборудованияOffline.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline.Изменения КАК КодыТоваровПодключаемогоОборудованияOfflineИзменения
	|		ПО КодыТоваровПодключаемогоОборудованияOffline.Код = КодыТоваровПодключаемогоОборудованияOfflineИзменения.Код
	|		И КодыТоваровПодключаемогоОборудованияOfflineИзменения.ПравилоОбмена = &ПравилоОбмена
	|		И КодыТоваровПодключаемогоОборудованияOfflineИзменения.Узел = &УзелИнформационнойБазы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Учетный.Остатки(
	|			&ТекущаяДата,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ГотоваяПродукция)
	|				ИЛИ Счет = ЗНАЧЕНИЕ(ПланСчетов.Учетный.Товары),
	|			,
	|			Предприятия = &Предприятие И Подразделение = &Подразделение) КАК УчетныйОстатки
	|		ПО КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена.Склад = УчетныйОстатки.Субконто2
	|			И КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена.Подразделение = УчетныйОстатки.Подразделение
	|			И КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = УчетныйОстатки.Субконто1
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Маркетинг КАК ВТ_Маркетинг
	|	ПО КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = ВТ_Маркетинг.Номенклатура
	|ГДЕ
	|	КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена = &ПравилоОбмена
	|	И КодыТоваровПодключаемогоОборудованияOffline.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ВЫБОР
	|			КОГДА &ОтборПоШтрихкоду = ИСТИНА
	|				ТОГДА ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, &ПустаяСтрока) = &Штрихкод
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	
	|//ТолькоИзмененные И КодыТоваровПодключаемогоОборудованияOfflineИзменения.ПравилоОбмена = &ПравилоОбмена
	|//ТолькоИзмененные И КодыТоваровПодключаемогоОборудованияOfflineИзменения.Узел = &УзелИнформационнойБазы
	
	|ИТОГИ
	|	МАКСИМУМ(Штрихкод)
	|ПО
	|	Код");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки1", "1");
		//Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		//	"КодыТоваровПодключаемогоОборудованияOffline.Упаковка",
		//	"КодыТоваровПодключаемогоОборудованияOffline.Номенклатура"));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки2", "1");
		//Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		//	"ЦеныНоменклатурыСрезПоследних.Упаковка",
		//	"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
		
	//Запрос.Текст = СтрЗаменить(Запрос.Текст,
	//	"&ТекстЗапросаТипИзмеряемойВеличиныЕдиницыИзмерения",
	//	Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
	//		"ТипИзмеряемойВеличины",
	//		"КодыТоваровПодключаемогоОборудованияOffline.Упаковка",
	//		"КодыТоваровПодключаемогоОборудованияOffline.Номенклатура"));

	Если Параметры.ЧастичнаяВыгрузка Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//ТолькоИзмененные","");
	КонецЕсли;
	
	Если ИспользоватьСерииНоменклатуры Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//ИспользованиеСерий","");
	КонецЕсли;
	
	Если Параметры.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//ВесыСПечатьюЭтикеток","");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ФорматШтрихкода",        РегистрыСведений.ШтрихкодыНоменклатуры.ФорматВесовогоШтрихкода(РегистрыСведений.ШтрихкодыНоменклатуры.ПрефиксУзлаШтрихкода()));
	Запрос.УстановитьПараметр("ПравилоОбмена",          Параметры.ПравилоОбмена);
	Запрос.УстановитьПараметр("ПравилоОбменаСклад",     Параметры.Склад);
	Запрос.УстановитьПараметр("ВидЦены",                Параметры.ВидЦены);
	Запрос.УстановитьПараметр("УзелИнформационнойБазы", Параметры.УзелИнформационнойБазы);
	Запрос.УстановитьПараметр("ТекущаяДата",            КонецДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ОтборПоШтрихкоду",       НЕ ПустаяСтрока(Штрихкод));
	Запрос.УстановитьПараметр("Штрихкод",               Штрихкод);
	Запрос.УстановитьПараметр("ПустаяСтрока",           "");
	Запрос.УстановитьПараметр("Подразделение", 			Параметры.Подразделение);
	Запрос.УстановитьПараметр("Предприятие", 			Параметры.Предприятие);
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Используется",       Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("Код",                Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("КодГруппы",          Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Группа",			  Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("ЭтоГруппа",       	  Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("Артикул",            Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Номенклатура",       Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("Характеристика",     Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("ХарактеристикаНаименование", Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Упаковка",           Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ТаблицаТоваров.Колонки.Добавить("УпаковкаНаименование",Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("КоэффициентУпаковки", Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения",   Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ТаблицаТоваров.Колонки.Добавить("КодЕдиницыИзмерения", Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("НаименованиеЕдиницыИзмерения", Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Наименование",       Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("НаименованиеПолное", Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("ОписаниеТовара",     Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Штрихкод",           Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("МассивШтрихкодов",   Новый ОписаниеТипов("Массив"));
	ТаблицаТоваров.Колонки.Добавить("Цена",               Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Остаток",            Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Весовой",            Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("ПодакцизныйТовар",   Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("ТипНоменклатуры",    Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры"));
	
	ТаблицаТоваров.Колонки.Добавить("ТребуетсяУказаниеСерий", Новый ОписаниеТипов("Булево"));
	
	ТаблицаТоваров.Колонки.Добавить("ЕстьОшибки",                  Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("ИндексКартинкиЕстьИзменения", Новый ОписаниеТипов("Число"));
	
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС",					Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
	ТаблицаТоваров.Колонки.Добавить("Алкоголь",						Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("Маркируемый",					Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("КодВидаАлкогольнойПродукции",	Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("ЕмкостьТары",					Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Крепость",						Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("ИННПроизводителя",				Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("КПППроизводителя",				Новый ОписаниеТипов("Строка"));
	
	ВыборкаПоКодам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных();
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ШтрихкодыНоменклатуры");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		ПрефиксУзлаШтрихкода                      = РегистрыСведений.ШтрихкодыНоменклатуры.ПрефиксУзлаШтрихкода();
		МаксимальноеЗначениеКодаВесовыхШтрихкодов = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьМаксимальноеЗначениеКодаВесовыхШтрихкодов();
		МаксимальныйКодВесовогоТовара             = РегистрыСведений.ШтрихкодыНоменклатуры.МаксимальныйКодВесовогоТовара();
		
		Пока ВыборкаПоКодам.Следующий() Цикл
			
			НоваяСтрока = ТаблицаТоваров.Добавить();
		
			Выборка = ВыборкаПоКодам.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.Весовой Тогда
					Штрихкод = РегистрыСведений.ШтрихкодыНоменклатуры.ПодготовитьШтрихкод(Выборка.Штрихкод);
				Иначе
					Штрихкод = СокрЛП(Выборка.Штрихкод);
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(НоваяСтрока.Код) Тогда
					
					НоваяСтрока.Используется                = Выборка.Используется;
					НоваяСтрока.Код                         = Выборка.Код;
					НоваяСтрока.КодГруппы                   = Число(Прав(Выборка.КодГруппы, 10));
					НоваяСтрока.Группа                   	= Выборка.Группа;
					НоваяСтрока.ЭтоГруппа                   = Выборка.ЭтоГруппа;
					НоваяСтрока.Артикул                     = Выборка.Артикул;
					НоваяСтрока.Номенклатура                = Выборка.Номенклатура;
					НоваяСтрока.Характеристика              = Выборка.Характеристика;
					НоваяСтрока.ХарактеристикаНаименование  = Выборка.ХарактеристикаНаименование;
					НоваяСтрока.Упаковка                    = Выборка.Упаковка;
					НоваяСтрока.УпаковкаНаименование        = Выборка.УпаковкаНаименование;
					НоваяСтрока.КоэффициентУпаковки         = Выборка.КоэффициентУпаковки;
					НоваяСтрока.Наименование                = Выборка.НоменклатураНаименование;//НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(Выборка.НоменклатураНаименование, Выборка.ХарактеристикаНаименование) + ?(ЗначениеЗаполнено(Выборка.УпаковкаНаименование),", " + Выборка.УпаковкаНаименование + ")","");
					НоваяСтрока.НаименованиеПолное          = Выборка.НоменклатураНаименованиеПолное;//НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(Выборка.НоменклатураНаименованиеПолное, Выборка.ХарактеристикаНаименованиеПолное) + ?(ЗначениеЗаполнено(Выборка.УпаковкаНаименование),", " + Выборка.УпаковкаНаименование + ")","");
					НоваяСтрока.ОписаниеТовара              = Выборка.ОписаниеТовара;
					НоваяСтрока.Цена                        = Выборка.Цена;
					НоваяСтрока.Остаток                     = Выборка.Остаток;
					НоваяСтрока.Весовой                     = Выборка.Весовой;
					НоваяСтрока.ИндексКартинкиЕстьИзменения = Выборка.ИндексКартинкиЕстьИзменения;
					НоваяСтрока.Штрихкод                    = Штрихкод;
					НоваяСтрока.КодЕдиницыИзмерения         = Выборка.КодЕдиницыИзмерения;
					НоваяСтрока.ЕдиницаИзмерения            = Выборка.ЕдиницаИзмерения;
					НоваяСтрока.НаименованиеЕдиницыИзмерения= Выборка.НаименованиеЕдиницыИзмерения;
					НоваяСтрока.ТипНоменклатуры             = Выборка.ТипНоменклатуры;
					НоваяСтрока.ПодакцизныйТовар            = Выборка.ПодакцизныйТовар;
					
					Если ИспользоватьСерииНоменклатуры Тогда
						НоваяСтрока.ТребуетсяУказаниеСерий  = Выборка.УказыватьСерииПриОтгрузкеВРозницу;
					КонецЕсли;
					
					НоваяСтрока.Алкоголь                    = Выборка.Алкоголь;
					НоваяСтрока.СтавкаНДС                   = Выборка.СтавкаНДС;
					НоваяСтрока.Маркируемый                 = Выборка.Маркируемый;
					НоваяСтрока.КодВидаАлкогольнойПродукции = Выборка.КодВидаАлкогольнойПродукции;
					НоваяСтрока.ЕмкостьТары                 = Выборка.ЕмкостьТары;
					НоваяСтрока.Крепость                    = Выборка.Крепость;
					НоваяСтрока.ИННПроизводителя            = Выборка.ИННПроизводителя;
					НоваяСтрока.КПППроизводителя            = Выборка.КПППроизводителя;
					
				Иначе
					НоваяСтрока.Штрихкод = НоваяСтрока.Штрихкод + "," + Штрихкод;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Штрихкод) Тогда
					НоваяСтрока.МассивШтрихкодов.Добавить(Штрихкод);
				КонецЕсли;
				
			КонецЦикла;
			
			Если НоваяСтрока.Весовой
				И ОбновитьКодыТоваров
				И (Не ЗначениеЗаполнено(НоваяСтрока.Штрихкод)) Тогда
				
					Если МаксимальноеЗначениеКодаВесовыхШтрихкодов = Неопределено ИЛИ МаксимальноеЗначениеКодаВесовыхШтрихкодов >= МаксимальныйКодВесовогоТовара Тогда
						ВызватьИсключение РегистрыСведений.ШтрихкодыНоменклатуры.ТекстСообщенияНетСвободныхКодовВесовыхШтрихкодов();
					КонецЕсли;
					
					МаксимальноеЗначениеКодаВесовыхШтрихкодов = МаксимальноеЗначениеКодаВесовыхШтрихкодов + 1;
					
					Штрихкод = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьШтрихкодВесовогоТовараПоКоду(МаксимальноеЗначениеКодаВесовыхШтрихкодов, ПрефиксУзлаШтрихкода);
					
					Попытка
						
						МенеджерЗаписиШтрихкода = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
						МенеджерЗаписиШтрихкода.Номенклатура   = НоваяСтрока.Номенклатура;
						МенеджерЗаписиШтрихкода.Характеристика = НоваяСтрока.Характеристика;
						МенеджерЗаписиШтрихкода.Упаковка       = НоваяСтрока.Упаковка;
						МенеджерЗаписиШтрихкода.Штрихкод       = Штрихкод;
						МенеджерЗаписиШтрихкода.Записать();
						
						НоваяСтрока.Штрихкод = РегистрыСведений.ШтрихкодыНоменклатуры.ПодготовитьШтрихкод(Штрихкод);
						НоваяСтрока.МассивШтрихкодов.Добавить(НоваяСтрока.Штрихкод);
						
					Исключение
						
						НоваяСтрока.Штрихкод = "";
						НоваяСтрока.МассивШтрихкодов.Очистить();
						
					КонецПопытки;
					
			КонецЕсли;
			
			Если НоваяСтрока.Весовой Тогда
				
				Если НоваяСтрока.МассивШтрихкодов.Количество() = 0 Тогда
					НоваяСтрока.ЕстьОшибки = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(НоваяСтрока.Цена)
				ИЛИ Не ЗначениеЗаполнено(НоваяСтрока.Наименование)
				ИЛИ (Не ЗначениеЗаполнено(НоваяСтрока.Штрихкод) И Параметры.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток)
				ИЛИ (ЗначениеЗаполнено(Параметры.МаксимальныйКод) И НоваяСтрока.Код > Параметры.МаксимальныйКод) Тогда
				НоваяСтрока.ЕстьОшибки = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
		//Добавим группы
		Если ВыгружатьГруппы Тогда
			ЗапросПоГруппам = Новый Запрос;
			ЗапросПоГруппам.Текст = 
			"ВЫБРАТЬ
			|	Номенклатура.Ссылка КАК Номенклатура,
			|	Номенклатура.ЭтоГруппа КАК ЭтоГруппа,
			|	Номенклатура.Код КАК Код,
			|	Номенклатура.Родитель КАК Группа,
			|	Номенклатура.Родитель.Код КАК КодГруппы,
			|	Номенклатура.Наименование КАК Наименование
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Ссылка В(&Ссылка)
			|ИТОГИ ПО
			|	Номенклатура ТОЛЬКО ИЕРАРХИЯ";
			ЗапросПоГруппам.УстановитьПараметр("Ссылка", ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура"));
			
			ВыборкаПоГруппам = ЗапросПоГруппам.Выполнить().Выбрать();
			Пока ВыборкаПоГруппам.Следующий() Цикл
				Если ВыборкаПоГруппам.ЭтоГруппа Тогда
					НайденныеСтроки = ТаблицаТоваров.НайтиСтроки(Новый Структура("Номенклатура", ВыборкаПоГруппам.Номенклатура));
					Если НайденныеСтроки.Количество() = 0 Тогда
						НоваяСтрока = ТаблицаТоваров.Добавить();
						НоваяСтрока.Код                         = Число(Прав(ВыборкаПоГруппам.Код, 10));
						НоваяСтрока.КодГруппы                   = ?(ЗначениеЗаполнено(ВыборкаПоГруппам.Группа), Число(Прав(ВыборкаПоГруппам.Группа.Код, 10)), "");
						НоваяСтрока.Группа                   	= ВыборкаПоГруппам.Группа;
						НоваяСтрока.ЭтоГруппа                   = ВыборкаПоГруппам.ЭтоГруппа;
						НоваяСтрока.Номенклатура                = ВыборкаПоГруппам.Номенклатура;
						НоваяСтрока.Наименование                = ВыборкаПоГруппам.Наименование;
						НоваяСтрока.НаименованиеПолное          = ВыборкаПоГруппам.Наименование;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;	
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ОписаниеОшибки = НСтр("ru = 'При подготовке данных к выгрузке произошла ошибка.
		                            |Дополнительное описание:
		                            |%ДополнительноеОписание%'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание));
		
		ТаблицаТоваров.Очистить();
		
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТаблицаТоваров;
	
КонецФункции

#КонецОбласти

#Область ТоварыПравилаВыгрузки

// Функция возвращает таблицу товаров с данными о товарам для правила выгрузки с ценами
//
// Параметры:
//  ПравилоОбмена - СправочникСсылка.ПравилаОбменаСПодключаемымОборудованиемOffline - Правило обмена.
//  ВидЦены - СправочникСсылка.ВидыЦен - Вид цены.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица товаров
//
Функция ПолучитьТаблицуТоваровДляПравила(ПравилоОбмена, ВидЦены) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросПараметры = Новый Запрос(
	"ВЫБРАТЬ
	|	ПравилаОбменаСПодключаемымОборудованиемOffline.ТипПодключаемогоОборудования КАК ТипОборудования
	|ИЗ
	|	Справочник.ПравилаОбменаСПодключаемымОборудованиемOffline КАК ПравилаОбменаСПодключаемымОборудованиемOffline
	|ГДЕ
	|	ПравилаОбменаСПодключаемымОборудованиемOffline.Ссылка = &Ссылка");
	
	ЗапросПараметры.УстановитьПараметр("Ссылка", ПравилоОбмена);
	
	Параметры = ЗапросПараметры.Выполнить().Выбрать();
	Параметры.Следующий();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КодыТоваровПодключаемогоОборудованияOffline.Используется КАК Используется,
	|	КодыТоваровПодключаемогоОборудованияOffline.Код КАК Код,
	|	КодыТоваровПодключаемогоОборудованияOffline.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.Наименование, """")       КАК НоменклатураНаименование,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.НаименованиеПолное, """") КАК НоменклатураНаименованиеПолное,
	|	КодыТоваровПодключаемогоОборудованияOffline.Характеристика КАК Характеристика,
	|	//ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Характеристика.Наименование, """")       КАК ХарактеристикаНаименование,
	|	//ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Характеристика.НаименованиеПолное, """") КАК ХарактеристикаНаименованиеПолное,
	|	КодыТоваровПодключаемогоОборудованияOffline.Упаковка КАК Упаковка,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Упаковка.Наименование, """") КАК УпаковкаНаименование,
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
	|	(ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1)
	|		/ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)) *
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	|	ВЫБОР
	|		КОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес)
	|			ТОГДА Истина
	|		ИНАЧЕ Ложь
	|	КОНЕЦ КАК Весовой
	|ИЗ
	|	РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|			И КодыТоваровПодключаемогоОборудованияOffline.Характеристика = ШтрихкодыНоменклатуры.Характеристика
	|			И КодыТоваровПодключаемогоОборудованияOffline.Упаковка = ШтрихкодыНоменклатуры.Упаковка
	|			//ВесыСПечатьюЭтикеток И ШтрихкодыНоменклатуры.Штрихкод ПОДОБНО &ФорматШтрихкода
	|			И (КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины <> ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес) Или ШтрихкодыНоменклатуры.Штрихкод ПОДОБНО &ФорматШтрихкода)
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			//И КодыТоваровПодключаемогоОборудованияOffline.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|ГДЕ
	|	КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена = &ПравилоОбмена
	|ИТОГИ
	|	МАКСИМУМ(Штрихкод)
	|ПО
	|	Код");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки1", "1");
		//Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		//	"КодыТоваровПодключаемогоОборудованияOffline.Упаковка",
		//	"КодыТоваровПодключаемогоОборудованияOffline.Номенклатура"));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки2", "1");
		//Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		//	"ЦеныНоменклатурыСрезПоследних.Упаковка",
		//	"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
		
	//Запрос.Текст = СтрЗаменить(Запрос.Текст,
	//	"&ТекстЗапросаТипИзмеряемойВеличиныЕдиницыИзмерения",
	//	Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
	//		"ТипИзмеряемойВеличины",
	//		"КодыТоваровПодключаемогоОборудованияOffline.Упаковка",
	//		"КодыТоваровПодключаемогоОборудованияOffline.Номенклатура"));
	
	Если Параметры.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//ВесыСПечатьюЭтикеток","");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ФорматШтрихкода", РегистрыСведений.ШтрихкодыНоменклатуры.ФорматВесовогоШтрихкода(РегистрыСведений.ШтрихкодыНоменклатуры.ПрефиксУзлаШтрихкода()));
	Запрос.УстановитьПараметр("ПравилоОбмена",   ПравилоОбмена);
	Запрос.УстановитьПараметр("ВидЦены",         ВидЦены);
	Запрос.УстановитьПараметр("ТекущаяДата",     КонецДня(ТекущаяДатаСеанса()));
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Используется",       Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("Код",                Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Номенклатура",       Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("Характеристика",     Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("Упаковка",           Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ТаблицаТоваров.Колонки.Добавить("Наименование",       Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("НаименованиеПолное", Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Штрихкод",           Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Цена",               Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Весовой",            Новый ОписаниеТипов("Булево"));
	
	ВыборкаПоКодам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоКодам.Следующий() Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		Выборка = ВыборкаПоКодам.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Весовой Тогда
				Штрихкод = РегистрыСведений.ШтрихкодыНоменклатуры.ПодготовитьШтрихкод(Выборка.Штрихкод);
			Иначе
				Штрихкод = СокрЛП(Выборка.Штрихкод);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(НоваяСтрока.Код) Тогда
				НоваяСтрока.Используется       = Выборка.Используется;
				НоваяСтрока.Код                = Выборка.Код;
				НоваяСтрока.Номенклатура       = Выборка.Номенклатура;
				НоваяСтрока.Характеристика     = Выборка.Характеристика;
				НоваяСтрока.Упаковка           = Выборка.Упаковка;
				НоваяСтрока.Наименование = Выборка.НоменклатураНаименование;
				//НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				//	Выборка.НоменклатураНаименование,
				//	Выборка.ХарактеристикаНаименование,
				//	Выборка.УпаковкаНаименование);
				НоваяСтрока.НаименованиеПолное = Выборка.НоменклатураНаименованиеПолное;
				//НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				//	Выборка.НоменклатураНаименованиеПолное,
				//	Выборка.ХарактеристикаНаименованиеПолное,
				//	Выборка.УпаковкаНаименование);
				НоваяСтрока.Цена               = Выборка.Цена;
				НоваяСтрока.Весовой            = Выборка.Весовой;
				НоваяСтрока.Штрихкод           = Штрихкод;
			Иначе
				НоваяСтрока.Штрихкод = НоваяСтрока.Штрихкод + ", " + Штрихкод;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТаблицаТоваров;
	
КонецФункции

#КонецОбласти

// заполнение переопределяемых процедур модуля МенеджерОфлайнОборудованияПереопределяемый

Процедура ЗаполнитьНастройкиККМ(ОфлайнОборудование, НастройкиОборудования) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПравилаОбмена.Склад КАК Склад,
	|	ПодключаемоеОборудование.Организация КАК Организация,
	|	ПодключаемоеОборудование.Организация.Наименование КАК НаименованиеОрганизации,
	|	ПравилаОбмена.Склад КАК Магазин,
	|	ПравилаОбмена.Склад.Наименование КАК НаименованиеМагазина,
	|	ПодключаемоеОборудование.Организация.ИНН КАК ИНН,
	|	ПодключаемоеОборудование.Организация.КПП КАК КПП
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаОбменаСПодключаемымОборудованиемOffline КАК ПравилаОбмена
	|			ПО ПодключаемоеОборудование.ПравилоОбмена = ПравилаОбмена.Ссылка
	|ГДЕ
	|	ПодключаемоеОборудование.Ссылка = &ОфлайнОборудование";
	
	Запрос.УстановитьПараметр("ОфлайнОборудование", ОфлайнОборудование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		НастройкиОборудования.НаименованиеОрганизации = Выборка.НаименованиеОрганизации;
		НастройкиОборудования.НаименованиеМагазина = Выборка.НаименованиеМагазина;
		НастройкиОборудования.ИНН = Выборка.ИНН;
		НастройкиОборудования.КПП = Выборка.КПП;
		
		//МестоТочкиПродажи
		НастройкиОборудования.АдресТочкиПродажи = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Выборка.Магазин, Справочники.ВидыКонтактнойИнформации.АдресСклада);
		
		//АдресТочкиПродажи
		
		//СистемыНалогообложения
		ДатаСеанса = ТекущаяДатаСеанса();
		НалогообложениеНДС = Справочники.Организации.НалогообложениеНДС(Выборка.Организация, Выборка.Склад, ДатаСеанса);
		
		НастройкиОборудования.СистемыНалогообложения.Добавить(НалогообложениеНДС);
		
		//ЭлектроннаяПочтаОтправителяЧека
		УстановитьПривилегированныйРежим(Истина);
		СистемнаяУчетнаяЗапись = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
		НастройкиОборудования.ЭлектроннаяПочтаОтправителяЧека = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СистемнаяУчетнаяЗапись,
			"АдресЭлектроннойПочты");
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	ТипЭлектроннойОплаты = МенеджерОфлайнОборудования.ТипЭлектроннойОплатыПлатежнаяКарта();
	ВидОплатыККМ = МенеджерОфлайнОборудования.ПолучитьЗаписьВидЭлектроннойОплаты();
	
	ВидОплатыККМ.Код 						= 1;
	ВидОплатыККМ.Наименование 				= НСтр("ru='Оплата платежной картой'");
	ВидОплатыККМ.ТипЭлектроннойОплаты 		= ТипЭлектроннойОплаты;
	
	НастройкиОборудования.ВидыЭлектроннойОплаты.Добавить(ВидОплатыККМ);
	

	ТипЭлектроннойОплаты = МенеджерОфлайнОборудования.ТипЭлектроннойОплатыБанковскийКредит();
	ВидОплатыККМ = МенеджерОфлайнОборудования.ПолучитьЗаписьВидЭлектроннойОплаты();
	
	ВидОплатыККМ.Код 						= 2;
	ВидОплатыККМ.Наименование 				= НСтр("ru='Оплата банковским кредитом'");
	ВидОплатыККМ.ТипЭлектроннойОплаты 		= ТипЭлектроннойОплаты;
	
	НастройкиОборудования.ВидыЭлектроннойОплаты.Добавить(ВидОплатыККМ);
	
	ТипЭлектроннойОплаты = МенеджерОфлайнОборудования.ТипЭлектроннойОплатыПодарочныйСертификат();
	ВидОплатыККМ = МенеджерОфлайнОборудования.ПолучитьЗаписьВидЭлектроннойОплаты();
	
	ВидОплатыККМ.Код 						= 3;
	ВидОплатыККМ.Наименование 				= НСтр("ru='Оплата подарочным сертификатом'");
	ВидОплатыККМ.ТипЭлектроннойОплаты 		= ТипЭлектроннойОплаты;
	
	НастройкиОборудования.ВидыЭлектроннойОплаты.Добавить(ВидОплатыККМ);
	
	ТипЭлектроннойОплаты = МенеджерОфлайнОборудования.ТипЭлектроннойОплатыБонусы();
	ВидОплатыККМ = МенеджерОфлайнОборудования.ПолучитьЗаписьВидЭлектроннойОплаты();
	
	ВидОплатыККМ.Код 						= 4;
	ВидОплатыККМ.Наименование 				= НСтр("ru='Оплата бонусами'");
	ВидОплатыККМ.ТипЭлектроннойОплаты 		= ТипЭлектроннойОплаты;
	
	НастройкиОборудования.ВидыЭлектроннойОплаты.Добавить(ВидОплатыККМ);
	
КонецПроцедуры

Процедура ЗаполнитьПрайсЛистККМ(ОфлайнОборудование, ПрайсЛист, ПолнаяВыгрузка) Экспорт
	
	Параметры = ПолучитьПараметрыУстройства(ОфлайнОборудование);
	
	Если Параметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.ПравилоОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ЧастичнаяВыгрузка", НЕ ПолнаяВыгрузка И Параметры.ВыгружатьИзменения);
	Параметры.Вставить("ВыгружатьГруппыТоваров", Ложь);
	
	ТоварыКВыгрузке = ПолучитьТаблицуТоваровКВыгрузке(ОфлайнОборудование, Параметры, Истина);
	ЗаполнитьСтруктуруПрайсЛистаИзДанныхКВыгрузке(ПрайсЛист, ТоварыКВыгрузке);
	
КонецПроцедуры

Процедура ЗаполнитьПрайсЛистККМПоШтрихкоду(ОфлайнОборудование, ПрайсЛист, Штрихкод) Экспорт
	
	Параметры = ПолучитьПараметрыУстройства(ОфлайнОборудование);
	
	Если Параметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.ПравилоОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ЧастичнаяВыгрузка", Ложь);
	Параметры.Вставить("ВыгружатьГруппыТоваров", Ложь);
	
	ТоварыКВыгрузке = ПолучитьТаблицуТоваровКВыгрузке(ОфлайнОборудование, Параметры, Истина);
	ЗаполнитьСтруктуруПрайсЛистаИзДанныхКВыгрузке(ПрайсЛист, ТоварыКВыгрузке);
	
КонецПроцедуры

Процедура УдалитьРегистрациюПрайсЛистаПослеВыгрузки(ОфлайнОборудование) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Параметры = ПолучитьПараметрыУстройства(ОфлайнОборудование);
	Параметры.Вставить("ЧастичнаяВыгрузка", Истина);
	Параметры.Вставить("ВыгружатьГруппыТоваров", Ложь);
	
	ТоварыКВыгрузке = ПолучитьТаблицуТоваровКВыгрузке(ОфлайнОборудование, Параметры, Истина);
	
	СтруктураДанных = ?(Параметры.ВыгружатьИзменения, Новый Структура("МассивКодовSKU", ТоварыКВыгрузке.ВыгрузитьКолонку("Код")), Неопределено);
	ПриВыгрузкеТоваровВУстройство(ОфлайнОборудование, СтруктураДанных, Истина, Истина);
	
КонецПроцедуры

Процедура ЗагрузитьОтчетыОПродажахИзККМТиповая(Устройство, ДанныеОПродажах, Отказ, СообщениеОбОшибке) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СправочникПодключаемоеОборудование.ПравилоОбмена КАК ПравилоОбмена,
	|	СправочникПодключаемоеОборудование.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	КассыККМ.КассаККМ КАК КассаККМ,
	|	КассыККМ.КассаККМ.ВалютаДенежныхСредств КАК Валюта,
	|	СправочникПодключаемоеОборудование.ПравилоОбмена.Склад КАК Склад,
	|	СправочникПодключаемоеОборудование.ПравилоОбмена.Склад.РозничныйВидЦены КАК ВидЦены,
	|	СправочникПодключаемоеОборудование.ПравилоОбмена.Склад.РозничныйВидЦены.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	КассыККМ.КассаККМ.Владелец КАК Организация
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК СправочникПодключаемоеОборудование
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиРМК.КассыККМ КАК КассыККМ
	|		ПО КассыККМ.ПодключаемоеОборудование = СправочникПодключаемоеОборудование.Ссылка
	|		 И КассыККМ.Ссылка.РабочееМесто = &РабочееМесто
	|ГДЕ
	|	СправочникПодключаемоеОборудование.Ссылка = &Устройство");
	
	Запрос.УстановитьПараметр("Устройство", Устройство);
	Запрос.УстановитьПараметр("РабочееМесто", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Код",        Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Цена",       Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Скидка",     Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Сумма",      Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Весовой",    Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("Штрихкод", Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТаблицаТоваров.Колонки.Добавить("УникальныйИдентификатор", Новый ОписаниеТипов("Строка"));
	
	ТаблицаШтрихкодовАкцизов = Новый ТаблицаЗначений;
	ТаблицаШтрихкодовАкцизов.Колонки.Добавить("Код",  Новый ОписаниеТипов("Число"));
	ТаблицаШтрихкодовАкцизов.Колонки.Добавить("ШтрихкодАлкогольнойМарки", Новый ОписаниеТипов("Строка"));
	ТаблицаШтрихкодовАкцизов.Колонки.Добавить("УникальныйИдентификатор", Новый ОписаниеТипов("Строка"));
	
	Для Каждого ОтчетОПродажах Из ДанныеОПродажах Цикл
		Для Каждого ЧекККМ Из ОтчетОПродажах.Чеки Цикл
			Если ЧекККМ.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств Тогда
				ЭтоЧекНаВозврат = Ложь;
			ИначеЕсли ЧекККМ.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств Тогда
				ЭтоЧекНаВозврат = Истина;
			Иначе
				Продолжить;
			КонецЕсли;
			
			Для Каждого СтрокаТЧ Из ЧекККМ.Товары Цикл
				
				Если НЕ (СтрокаТЧ.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты
					ИЛИ СтрокаТЧ.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой
					ИЛИ СтрокаТЧ.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой) Тогда
					
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ТаблицаТоваров.Добавить();
				
				// Преобразование кода
				НоваяСтрока.Код = СтрокаТЧ.Код;
				Если НоваяСтрока.Код <= МаксимальныйКодВесовогоТовара() Тогда
					НоваяСтрока.Штрихкод = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьШтрихкодВесовогоТовараПоКоду(НоваяСтрока.Код,,Истина);
					НоваяСтрока.Весовой = Истина;
				КонецЕсли;
				НоваяСтрока.Количество 	= ?(ЭтоЧекНаВозврат, -СтрокаТЧ.Количество, СтрокаТЧ.Количество);
				НоваяСтрока.Сумма 		= ?(ЭтоЧекНаВозврат, -СтрокаТЧ.Сумма, СтрокаТЧ.Сумма);
				НоваяСтрока.Цена 		= СтрокаТЧ.Цена;
				НоваяСтрока.СтавкаНДС 	= ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС);
				НоваяСтрока.УникальныйИдентификатор = ОтчетОПродажах.УникальныйИдентификатор;
				Для каждого ШтрихкодАлкогольнойМарки Из СтрокаТЧ.ШтрихкодАлкогольнойПродукции Цикл
					Если НЕ ЭтоЧекНаВозврат Тогда
						НоваяСтрокаШтрихкод = ТаблицаШтрихкодовАкцизов.Добавить();
						НоваяСтрокаШтрихкод.УникальныйИдентификатор = НоваяСтрока.УникальныйИдентификатор;
						НоваяСтрокаШтрихкод.Код = НоваяСтрока.Код;
						НоваяСтрокаШтрихкод.ШтрихкодАлкогольнойМарки = ШтрихкодАлкогольнойМарки;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Товары.Код        КАК Код,
	|	Товары.Цена       КАК Цена,
	|	Товары.Количество КАК Количество,
	|	Товары.Скидка     КАК Скидка,
	|	Товары.Сумма      КАК Сумма,
	|	Товары.Весовой                            КАК Весовой,
	|	ВЫРАЗИТЬ(Товары.Штрихкод КАК Строка(200)) КАК Штрихкод,
	|	ВЫРАЗИТЬ(Товары.УникальныйИдентификатор КАК Строка(200)) КАК УникальныйИдентификатор
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&ТаблицаЗначений КАК Товары
	|;
	|
	|ВЫБРАТЬ
	|	Товары.Код                      КАК Код,
	|	ВЫРАЗИТЬ(Товары.ШтрихкодАлкогольнойМарки КАК Строка(200)) КАК ШтрихкодАлкогольнойМарки,
	|	ВЫРАЗИТЬ(Товары.УникальныйИдентификатор КАК Строка(200))КАК УникальныйИдентификатор
	|ПОМЕСТИТЬ ВтТаблицаШтрихкодов
	|ИЗ
	|	&ТаблицаШтрихкодов КАК Товары
	|;
	|
	|ВЫБРАТЬ
	|	Товары.Код                      КАК Код,
	|	ШтрихкодыУпаковокТоваров.Ссылка КАК АкцизнаяМарка,
	|	Товары.ШтрихкодАлкогольнойМарки КАК ШтрихкодАлкогольнойМарки,
	|	Товары.УникальныйИдентификатор  КАК УникальныйИдентификатор
	|ПОМЕСТИТЬ ВтТоварыСАкцизнымиМарками
	|ИЗ
	|	ВтТаблицаШтрихкодов КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО Товары.ШтрихкодАлкогольнойМарки = ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.сабТипыНоменклатуры.ПустаяСсылка)) КАК ТипНоменклатуры,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))                 КАК Номенклатура,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))             КАК Упаковка,
	|	
	|	Товары.Количество                                                                                 КАК КоличествоУпаковок,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) * Товары.Количество КАК Количество,
	|	Товары.Цена                                                                                       КАК Цена,
	|	Товары.Сумма                                                                                      КАК Сумма,
	|	Товары.Скидка                                                                                     КАК ПроцентРучнойСкидки,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.СтавкаНДС, ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка)) КАК СтавкаНДС,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ПодакцизныйТовар, ЛОЖЬ) КАК ПодакцизныйТовар,
	|	Товары.УникальныйИдентификатор                                                                    КАК УникальныйИдентификатор
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
	|		ПО Товары.Код = КодыТоваровПодключаемогоОборудованияOffline.Код
	|			И КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена = &ПравилоОбмена
	|			И НЕ Товары.Весовой
	|ГДЕ
	|	Не Товары.Весовой
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.сабТипыНоменклатуры.ПустаяСсылка)) КАК ТипНоменклатуры,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))                 КАК Номенклатура,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))             КАК Упаковка,
	|	
	|	Товары.Количество                                                                                 КАК КоличествоУпаковок,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) * Товары.Количество КАК Количество,
	|	Товары.Цена                                                                                       КАК Цена,
	|	Товары.Сумма                                                                                      КАК Сумма,
	|	Товары.Скидка                                                                                     КАК ПроцентРучнойСкидки,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.СтавкаНДС, ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка)) КАК СтавкаНДС,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ПодакцизныйТовар, ЛОЖЬ) КАК ПодакцизныйТовар,
	|	Товары.УникальныйИдентификатор                                                                    КАК УникальныйИдентификатор
	|ИЗ
	|	Товары КАК Товары
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|		ПО ПОДСТРОКА(Товары.Штрихкод, 3, 5) = ПОДСТРОКА(Штрихкоды.Штрихкод, 3, 5)
	|			И Штрихкоды.Штрихкод ПОДОБНО &ФорматШтрихкода
	|			И Товары.Весовой
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
	|		ПО КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена = &ПравилоОбмена
	|			И Штрихкоды.Номенклатура   = КодыТоваровПодключаемогоОборудованияOffline.Номенклатура
	|			И Штрихкоды.Характеристика = КодыТоваровПодключаемогоОборудованияOffline.Характеристика
	|			И Штрихкоды.Упаковка       = КодыТоваровПодключаемогоОборудованияOffline.Упаковка
	|			И Товары.Весовой
	|
	|ГДЕ
	|	Товары.Весовой
	|
	|ИТОГИ ПО
	|	Товары.УникальныйИдентификатор;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))                 КАК Номенклатура,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	|	Товары.АкцизнаяМарка                                                                                                               КАК АкцизнаяМарка,
	|	АкцизныеМаркиЕГАИС.Справка2                                                                                                        КАК Справка2,
	|	Товары.ШтрихкодАлкогольнойМарки                                                                                                    КАК ШтрихкодАлкогольнойМарки,
	|	Товары.УникальныйИдентификатор                                                                    КАК УникальныйИдентификатор
	|ИЗ
	|	ВтТоварыСАкцизнымиМарками КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
	|		ПО Товары.Код = КодыТоваровПодключаемогоОборудованияOffline.Код
	|			И КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена = &ПравилоОбмена
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
	|		ПО Товары.АкцизнаяМарка = АкцизныеМаркиЕГАИС.АкцизнаяМарка
	|			И АкцизныеМаркиЕГАИС.ОрганизацияЕГАИС = &ОрганизацияЕГАИС
	|");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"КодыТоваровПодключаемогоОборудованияOffline.Упаковка",
		"КодыТоваровПодключаемогоОборудованияOffline.Номенклатура"));
	ОрганизацияЕГАИС = ПолучитьОрганизациюЕГАИС(Выборка.Склад, Выборка.Организация);
	
	Запрос.УстановитьПараметр("ПравилоОбмена",   Выборка.ПравилоОбмена);
	Запрос.УстановитьПараметр("ТаблицаЗначений", ТаблицаТоваров);
	Запрос.УстановитьПараметр("ТаблицаШтрихкодов", ТаблицаШтрихкодовАкцизов);
	Запрос.УстановитьПараметр("ФорматШтрихкода", РегистрыСведений.ШтрихкодыНоменклатуры.ФорматВесовогоШтрихкода("_", Истина));
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаПоИдентификаторам = РезультатЗапроса[РезультатЗапроса.Количество()-2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ТаблицаАкцизныеМарки = РезультатЗапроса[РезультатЗапроса.Количество()-1].Выгрузить();
	Пока ВыборкаПоИдентификаторам.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаПоИдентификаторам.УникальныйИдентификатор) Тогда
			
			УИ = Новый УникальныйИдентификатор(ВыборкаПоИдентификаторам.УникальныйИдентификатор);
			
			ОтчетСсылка = Документы.ОтчетОРозничныхПродажах.ПолучитьСсылку(УИ);
			
			ОтчетОРозничныхПродажахОбъект = ОтчетСсылка.ПолучитьОбъект();
			
			Если ОтчетОРозничныхПродажахОбъект = Неопределено Тогда
				ОтчетОРозничныхПродажахОбъект = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
				ОтчетОРозничныхПродажахОбъект.УстановитьСсылкуНового(ОтчетСсылка);
			КонецЕсли;
			
		Иначе
			
			ОтчетОРозничныхПродажахОбъект = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
			
		КонецЕсли;
		ОтчетОРозничныхПродажахОбъект.Дата               = ТекущаяДатаСеанса();
		ОтчетОРозничныхПродажахОбъект.Валюта             = Выборка.Валюта;
		ОтчетОРозничныхПродажахОбъект.ВидЦены            = Выборка.ВидЦены;
		ОтчетОРозничныхПродажахОбъект.КассаККМ           = Выборка.КассаККМ;
		ОтчетОРозничныхПродажахОбъект.Комментарий        = НСтр("ru = 'Загружено из ККМ Offline:'") + " " + Устройство;
		ОтчетОРозничныхПродажахОбъект.НалогообложениеНДС = Справочники.Организации.НалогообложениеНДС(Выборка.Организация, Выборка.Склад, ТекущаяДатаСеанса());
		ОтчетОРозничныхПродажахОбъект.Организация        = Выборка.Организация;
		ОтчетОРозничныхПродажахОбъект.Ответственный      = Пользователи.ТекущийПользователь();
		ОтчетОРозничныхПродажахОбъект.Подразделение      = Неопределено;
		ОтчетОРозничныхПродажахОбъект.Склад              = Выборка.Склад;
		ОтчетОРозничныхПродажахОбъект.ЦенаВключаетНДС    = Выборка.ЦенаВключаетНДС;
		ОтчетОРозничныхПродажахОбъект.ОрганизацияЕГАИС   = ОрганизацияЕГАИС;
		
		ТаблицаНаборов = Новый ТаблицаЗначений;
		ТаблицаНаборов.Колонки.Добавить("Номенклатура");
		ТаблицаНаборов.Колонки.Добавить("Характеристика");
		ТаблицаНаборов.Колонки.Добавить("Количество");
		ТаблицаНаборов.Колонки.Добавить("Цена");
		ТаблицаНаборов.Колонки.Добавить("ПроцентРучнойСкидки");
		ТаблицаНаборов.Колонки.Добавить("ПодакцизныйТовар");
		ТаблицаНаборов.Колонки.Добавить("СтавкаНДС");
		
		ВыборкаПоТоварам = ВыборкаПоИдентификаторам.Выбрать();
		Пока ВыборкаПоТоварам.Следующий() Цикл
			
			Если ВыборкаПоТоварам.ТипНоменклатуры <> Перечисления.сабТипыНоменклатуры.Набор Тогда
			
				НоваяСтрока = ОтчетОРозничныхПродажахОбъект.Товары.Добавить();
				НоваяСтрока.Номенклатура        = ВыборкаПоТоварам.Номенклатура;
				НоваяСтрока.Характеристика      = ВыборкаПоТоварам.Характеристика;
				НоваяСтрока.Упаковка            = ВыборкаПоТоварам.Упаковка;
				НоваяСтрока.Количество          = ВыборкаПоТоварам.Количество;
				НоваяСтрока.КоличествоУпаковок  = ВыборкаПоТоварам.КоличествоУпаковок;
				НоваяСтрока.Сумма               = ВыборкаПоТоварам.Сумма;
				НоваяСтрока.Цена                = ВыборкаПоТоварам.Цена;
				НоваяСтрока.ПроцентРучнойСкидки = ВыборкаПоТоварам.ПроцентРучнойСкидки;
				
				Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
					//НоваяСтрока.СтавкаНДС = СтавкаНДС(ОтчетОРозничныхПродажахОбъект.НалогообложениеНДС, ВыборкаПоТоварам.ПодакцизныйТовар, ВыборкаПоТоварам.СтавкаНДС);
				КонецЕсли;
				
				НоваяСтрока.СуммаРучнойСкидки   = Окр(НоваяСтрока.КоличествоУпаковок * НоваяСтрока.Цена * НоваяСтрока.ПроцентРучнойСкидки / 100, 2);
				//НоваяСтрока.СуммаНДС            = Ценообразование.РассчитатьСуммуНДС(НоваяСтрока.Сумма, НоваяСтрока.СтавкаНДС, Выборка.ЦенаВключаетНДС);
				//НоваяСтрока.Партнер             = Справочники.Партнеры.РозничныйПокупатель;
				
			Иначе
				
				НоваяСтрока = ТаблицаНаборов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоТоварам);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ВыборкаПоИдентификаторам.УникальныйИдентификатор) Тогда
			СтрокиПоИдентификатору = ТаблицаАкцизныеМарки.НайтиСтроки(Новый Структура("УникальныйИдентификатор", ВыборкаПоИдентификаторам.УникальныйИдентификатор));
		Иначе
			СтрокиПоИдентификатору = ТаблицаАкцизныеМарки;
		КонецЕсли;
		
		Для Каждого СтрокаАкциз Из СтрокиПоИдентификатору Цикл
			
			Если ЗначениеЗаполнено(СтрокаАкциз.ШтрихкодАлкогольнойМарки) Тогда
				АкцизнаяМарка = СтрокаАкциз.АкцизнаяМарка;
				
				Если НЕ ЗначениеЗаполнено(АкцизнаяМарка) Тогда
					АкцизнаяМарка = Справочники.ШтрихкодыУпаковокТоваров.СгенерироватьАкцизнуюМарку(
						СтрокаАкциз.ШтрихкодАлкогольнойМарки,
						СтрокаАкциз.Номенклатура,
						СтрокаАкциз.Характеристика);
				КонецЕсли;
				НоваяСтрока = ОтчетОРозничныхПродажахОбъект.АкцизныеМарки.Добавить();
				НоваяСтрока.АкцизнаяМарка = АкцизнаяМарка;
				НоваяСтрока.Справка2 = СтрокаАкциз.Справка2;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаНаборов.Свернуть("Номенклатура,Характеристика,ПроцентРучнойСкидки,СтавкаНДС,Цена,ПодакцизныйТовар","Количество");
		
		//Для Каждого ВыборкаПоТоварам Из ТаблицаНаборов Цикл
		//	
		//	МассивСтрокНабора = Новый Массив;
		//	Данные = Комплектующие(
		//		ВыборкаПоТоварам.Номенклатура,
		//		ВыборкаПоТоварам.Характеристика);
		//	
		//	Для Каждого СтрокаТЧ Из Данные Цикл
		//		
		//		НоваяСтрока = ОтчетОРозничныхПродажахОбъект.Товары.Добавить();
		//		НоваяСтрока.НоменклатураНабора   = СтрокаТЧ.НоменклатураНабора;
		//		НоваяСтрока.ХарактеристикаНабора = СтрокаТЧ.ХарактеристикаНабора;
		//		НоваяСтрока.Номенклатура         = СтрокаТЧ.Номенклатура;
		//		НоваяСтрока.Характеристика       = СтрокаТЧ.Характеристика;
		//		НоваяСтрока.Упаковка             = СтрокаТЧ.Упаковка;
		//		НоваяСтрока.КоличествоУпаковок   = ВыборкаПоТоварам.Количество * СтрокаТЧ.КоличествоУпаковок;
		//		НоваяСтрока.Количество           = ВыборкаПоТоварам.Количество * СтрокаТЧ.КоличествоУпаковок * СтрокаТЧ.Коэффициент;
		//		НоваяСтрока.ПроцентРучнойСкидки  = ВыборкаПоТоварам.ПроцентРучнойСкидки;
		//		
		//		Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
		//			НоваяСтрока.СтавкаНДС = СтавкаНДС(ОтчетОРозничныхПродажахОбъект.НалогообложениеНДС, СтрокаТЧ.ПодакцизныйТовар, ВыборкаПоТоварам.СтавкаНДС);
		//		КонецЕсли;
		//		
		//		НоваяСтрока.Партнер = Справочники.Партнеры.РозничныйПокупатель;
		//		
		//		МассивСтрокНабора.Добавить(НоваяСтрока);
		//		
		//	КонецЦикла;
		//	
		//	Отбор = Новый Структура;
		//	Отбор.Вставить("НоменклатураНабора", ВыборкаПоТоварам.Номенклатура);
		//	Отбор.Вставить("ХарактеристикаНабора", ВыборкаПоТоварам.Характеристика);
		//	
		//	ПараметрыЗаполнения = Новый Структура( // Параметры заполнения
		//				"Дата, Валюта, ВидЦены, ПоляЗаполнения",
		//				ОтчетОРозничныхПродажахОбъект.Дата,
		//				ОтчетОРозничныхПродажахОбъект.Валюта,
		//				ОтчетОРозничныхПродажахОбъект.ВидЦены,
		//				"Цена");
		//	
		//	КоэффициентыПропорциональностиРасчетаЦенНаборов = НаборыСервер.КоэффициентыРаспределения(
		//		ОтчетОРозничныхПродажахОбъект.Товары.Выгрузить(Отбор),
		//		ПараметрыЗаполнения);
		//	
		//	ОбщаяСтоимость = 0;
		//	СуммаКРаспределению = ВыборкаПоТоварам.Цена * ВыборкаПоТоварам.Количество;
		//	
		//	СлужебнаяТЧ = Новый ТаблицаЗначений;
		//	СлужебнаяТЧ.Колонки.Добавить("СтрокаТЧ");
		//	СлужебнаяТЧ.Колонки.Добавить("Количество");
		//	СлужебнаяТЧ.Колонки.Добавить("Стоимость");
		//	Для Каждого ТекущаяСтрока Из МассивСтрокНабора Цикл
		//		
		//		Стоимость = КоэффициентыПропорциональностиРасчетаЦенНаборов.Найти(ТекущаяСтрока.НомерСтроки, "НомерСтроки").Цена;
		//		Количество = ?(ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ТекущаяСтрока, "КоличествоУпаковок"), ТекущаяСтрока.КоличествоУпаковок, ТекущаяСтрока.Количество);
		//		
		//		НоваяСтрока = СлужебнаяТЧ.Добавить();
		//		НоваяСтрока.СтрокаТЧ = ТекущаяСтрока;
		//		НоваяСтрока.Стоимость = Стоимость;
		//		НоваяСтрока.Количество = Количество;
		//		
		//		ОбщаяСтоимость = ОбщаяСтоимость + Стоимость;
		//		
		//	КонецЦикла;
		//	СлужебнаяТЧ.Сортировать("Количество УБЫВ");
		//	
		//	НомерСтроки = 0;
		//	КоличествоСтрок = СлужебнаяТЧ.Количество();
		//	Для Каждого СтрокаСлужебнойТЧ Из СлужебнаяТЧ Цикл
		//		
		//		НомерСтроки = НомерСтроки + 1;
		//		
		//		ТекущаяСтрока = СтрокаСлужебнойТЧ.СтрокаТЧ;
		//		Стоимость = СтрокаСлужебнойТЧ.Стоимость;
		//		Количество = СтрокаСлужебнойТЧ.Количество;
		//		
		//		Если Количество <> 0 И ОбщаяСтоимость <> 0 Тогда
		//			ТекущаяСтрока.Цена = Окр(((Стоимость / ОбщаяСтоимость) * СуммаКРаспределению) / Количество, 2);
		//		Иначе
		//			ТекущаяСтрока.Цена = 0;
		//		КонецЕсли;
		//		
		//		ОбщаяСтоимость = ОбщаяСтоимость - Стоимость;
		//		СуммаКРаспределению = СуммаКРаспределению - ТекущаяСтрока.Цена * Количество;
		//		
		//		Погрешность = 0;
		//		Если НомерСтроки = КоличествоСтрок Тогда
		//			Погрешность = СуммаКРаспределению;
		//		КонецЕсли;
		//		
		//		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ОтчетОРозничныхПродажахОбъект);
		//		
		//		СтруктураДействий = Новый Структура;
		//		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		//		СтруктураДействий.Вставить("ПересчитатьСумму");
		//		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
		//		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомПогрешностиОкругления", Погрешность);
		//		
		//		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		//		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		//	
		//	КонецЦикла;
		//	
		//КонецЦикла;
		
		Попытка
			Если ОтчетОРозничныхПродажахОбъект.ПроверитьЗаполнение() Тогда
				ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		Исключение
			ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
		
		НачатьТранзакцию();
		
		УзелОбъект = Выборка.УзелИнформационнойБазы.ПолучитьОбъект();
		УзелОбъект.ДатаЗагрузки = ТекущаяДатаСеанса();
		УзелОбъект.Записать();
		Для каждого СтрокаАкциз Из СтрокиПоИдентификатору Цикл
		
			НаборЗаписей = РегистрыСведений.АкцизныеМаркиЕГАИС.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ОрганизацияЕГАИС.Установить(ОрганизацияЕГАИС, Истина);
			НаборЗаписей.Отбор.АкцизнаяМарка.Установить(СтрокаАкциз.АкцизнаяМарка, Истина);
			
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() = 1 Тогда
				НоваяЗапись = НаборЗаписей[0];
				НоваяЗапись.Статус = Перечисления.СтатусыАкцизныхМарок.Реализована;
				
				Попытка
					НаборЗаписей.Записать();
				Исключение
					ОтменитьТранзакцию();
					
					ТекстОшибки = НСтр("ru = 'При записи акцизных марок произошла ошибка:
					                         |%1'");
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						СтрШаблон(ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
					
					//ИнтеграцияЕГАИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
					//	СтрШаблон(ТекстОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
					
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ЗагрузитьОтчетыОПродажахИзККМ(Устройство, ДанныеОПродажах, Отказ, СообщениеОбОшибке) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СправочникПодключаемоеОборудование.ПравилоОбмена КАК ПравилоОбмена,
	|	СправочникПодключаемоеОборудование.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	КассыККМ.КассаККМ КАК КассаККМ,
	|	СправочникПодключаемоеОборудование.ПравилоОбмена.Склад КАК Склад,
	|	СправочникПодключаемоеОборудование.ПравилоОбмена.Подразделение КАК Подразделение,
	|	СправочникПодключаемоеОборудование.ПравилоОбмена.Подразделение.Владелец КАК Предприятие,
	|	СправочникПодключаемоеОборудование.ПравилоОбмена.Подразделение.РозничныйВидЦены КАК ВидЦены,
	|	ИСТИНА КАК ЦенаВключаетНДС,
	|	СправочникПодключаемоеОборудование.Организация КАК Организация,
	|	ЕСТЬNULL(НастройкиРМКЭквайринговыеТерминалы.ЭквайринговыйТерминал, ЗНАЧЕНИЕ(Справочник.ЭквайринговыеТерминалы.ПустаяСсылка)) КАК ЭквайринговыйТерминал
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК СправочникПодключаемоеОборудование
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиРМК.КассыККМ КАК КассыККМ
	|		ПО (КассыККМ.ПодключаемоеОборудование = СправочникПодключаемоеОборудование.Ссылка)
	|			И (КассыККМ.Ссылка.РабочееМесто = &РабочееМесто)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиРМК.ЭквайринговыеТерминалы КАК НастройкиРМКЭквайринговыеТерминалы
	|		ПО (НастройкиРМКЭквайринговыеТерминалы.Ссылка.РабочееМесто = &РабочееМесто)
	|			И (НастройкиРМКЭквайринговыеТерминалы.ПодключаемоеОборудованиеККТ = СправочникПодключаемоеОборудование.Ссылка)
	|ГДЕ
	|	СправочникПодключаемоеОборудование.Ссылка = &Устройство");
	
	Запрос.УстановитьПараметр("Устройство", Устройство);
	Запрос.УстановитьПараметр("РабочееМесто", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Сообщить("Рабочее место " + МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента() + " не содержит указанные магазины! Загрузка отменена!");
		Возврат;
	КонецЕсли;
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Код",        Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Цена",       Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Скидка",     Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Сумма",      Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Весовой",    Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("Штрихкод",   Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС",  Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
	ТаблицаТоваров.Колонки.Добавить("УникальныйИдентификатор", Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("СуммаНал",         Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("СуммаБнал",        Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("ДатаЗакрытияСмены",Новый ОписаниеТипов("Дата"));
	ТаблицаТоваров.Колонки.Добавить("ЭтоЧекНаВозврат",  Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("ПроцентСкидкиНаценки",   Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("АбсолютнаяСкидка",       Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("КоличествоЧеков",       Новый ОписаниеТипов("Число"));
	
	ТаблицаШтрихкодовАкцизов = Новый ТаблицаЗначений;
	ТаблицаШтрихкодовАкцизов.Колонки.Добавить("Код",  Новый ОписаниеТипов("Число"));
	ТаблицаШтрихкодовАкцизов.Колонки.Добавить("ШтрихкодАлкогольнойМарки", Новый ОписаниеТипов("Строка"));
	ТаблицаШтрихкодовАкцизов.Колонки.Добавить("УникальныйИдентификатор", Новый ОписаниеТипов("Строка"));
	
	ТаблицаДвиженийДС = Новый ТаблицаЗначений;
	ТаблицаДвиженийДС.Колонки.Добавить("ТипДвижения", Новый ОписаниеТипов("Строка"));
	ТаблицаДвиженийДС.Колонки.Добавить("Сумма",       Новый ОписаниеТипов("Число"));
	ТаблицаДвиженийДС.Колонки.Добавить("Дата", 	   Новый ОписаниеТипов("Строка"));
	ТаблицаДвиженийДС.Колонки.Добавить("УникальныйИдентификатор", Новый ОписаниеТипов("Строка"));
	
	Для Каждого ОтчетОПродажах Из ДанныеОПродажах Цикл
		КоличествоЧеков = 0;
		Для Каждого ЧекККМ Из ОтчетОПродажах.Чеки Цикл
			СуммаБНал = 0;
			СуммаНал = 0;
			Если ЧекККМ.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств Тогда
				ЭтоЧекНаВозврат = Ложь;
			ИначеЕсли ЧекККМ.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств Тогда
				ЭтоЧекНаВозврат = Истина;
			Иначе
				Продолжить;
			КонецЕсли;
			
			Для Каждого СтрокаТЧ Из ЧекККМ.Товары Цикл
				Если НЕ (СтрокаТЧ.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты
					ИЛИ СтрокаТЧ.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой
					ИЛИ СтрокаТЧ.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой) Тогда
					
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ТаблицаТоваров.Добавить();
				
				НоваяСтрока.ЭтоЧекНаВозврат = ЭтоЧекНаВозврат;
				НоваяСтрока.Код = СтрокаТЧ.Код;
				Если НоваяСтрока.Код <= МаксимальныйКодВесовогоТовара() Тогда
					НоваяСтрока.Штрихкод = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьШтрихкодВесовогоТовараПоКоду(НоваяСтрока.Код,,Истина);
					НоваяСтрока.Весовой = Истина;
				КонецЕсли;
				НоваяСтрока.Количество 	= СтрокаТЧ.Количество;//?(ЭтоЧекНаВозврат, -СтрокаТЧ.Количество, СтрокаТЧ.Количество);
				НоваяСтрока.Сумма 		= СтрокаТЧ.Сумма;//?(ЭтоЧекНаВозврат, -СтрокаТЧ.Сумма, СтрокаТЧ.Сумма);
				НоваяСтрока.Цена 		= СтрокаТЧ.Цена;
				НоваяСтрока.ПроцентСкидкиНаценки = СтрокаТЧ.ПроцентСкидкиНаценки;
				НоваяСтрока.АбсолютнаяСкидка = СтрокаТЧ.АбсолютнаяСкидка;
				//НоваяСтрока.СтавкаНДС 	= ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС);
				Если ЭтоЧекНаВозврат Тогда
					НоваяСтрока.УникальныйИдентификатор = ЧекККМ.УникальныйИдентификатор;
				Иначе	
					НоваяСтрока.УникальныйИдентификатор = ОтчетОПродажах.УникальныйИдентификатор;
				КонецЕсли;
				НоваяСтрока.ДатаЗакрытияСмены = ОтчетОПродажах.ДатаЗакрытияСмены;
				Для каждого ШтрихкодАлкогольнойМарки Из СтрокаТЧ.ШтрихкодАлкогольнойПродукции Цикл
					Если НЕ ЭтоЧекНаВозврат Тогда
						НоваяСтрокаШтрихкод = ТаблицаШтрихкодовАкцизов.Добавить();
						НоваяСтрокаШтрихкод.УникальныйИдентификатор = НоваяСтрока.УникальныйИдентификатор;
						НоваяСтрокаШтрихкод.Код = НоваяСтрока.Код;
						НоваяСтрокаШтрихкод.ШтрихкодАлкогольнойМарки = ШтрихкодАлкогольнойМарки;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			Для Каждого СтрокаОплат Из ЧекККМ.Оплаты Цикл
				СуммаНал = СуммаНал + СтрокаОплат.СуммаНаличнойОплаты;
				СуммаБНал = СуммаБНал + СтрокаОплат.СуммаЭлектроннойОплаты;	
			КонецЦикла;
			НоваяСтрока.СуммаНал = СуммаНал;
			НоваяСтрока.СуммаБНал = СуммаБНал;
			КоличествоЧеков = КоличествоЧеков + 1;
		КонецЦикла;
		Если Не НоваяСтрока = Неопределено Тогда
			НоваяСтрока.КоличествоЧеков = КоличествоЧеков;
		КонецЕсли;	
		//Создадим Движения ДС
		Для Каждого ДвижениеДС Из ОтчетОПродажах.ДвиженияДС Цикл
			СтрокаДС = ТаблицаДвиженийДС.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДС, ДвижениеДС);
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаТоваров.Свернуть("Код, Цена, Весовой, Штрихкод, СтавкаНДС, УникальныйИдентификатор, ДатаЗакрытияСмены, ЭтоЧекНаВозврат, ПроцентСкидкиНаценки, КоличествоЧеков","Количество, Скидка, Сумма, СуммаНал, СуммаБНал, АбсолютнаяСкидка");
	
	Для Каждого СтрокаТЧДвиженияДС Из ТаблицаДвиженийДС Цикл
		Если ЗначениеЗаполнено(СтрокаТЧДвиженияДС.УникальныйИдентификатор) Тогда
			УИ = Новый УникальныйИдентификатор(СтрокаТЧДвиженияДС.УникальныйИдентификатор);
			ОтчетСсылка = Документы.УЧ_ДвижениеДС.ПолучитьСсылку(УИ);
			ДокументДСОбъект = ОтчетСсылка.ПолучитьОбъект();
			Если ДокументДСОбъект = Неопределено Тогда
				ДокументДСОбъект = Документы.УЧ_ДвижениеДС.СоздатьДокумент();
				ДокументДСОбъект.УстановитьСсылкуНового(ОтчетСсылка);
			КонецЕсли;
		Иначе
			ДокументДСОбъект = Документы.УЧ_ДвижениеДС.СоздатьДокумент();
		КонецЕсли;
		
		ДокументДСОбъект.Дата = Дата(СтрокаТЧДвиженияДС.Дата);
		ДокументДСОбъект.Предприятие = Выборка.Предприятие;
		ДокументДСОбъект.Подразделение = Выборка.Подразделение;
		ДокументДСОбъект.ВидОперации = Перечисления.ВидыОперацийДвиженияДС.КассовыйОрдер;
		ДокументДСОбъект.Субконто2 = Выборка.КассаККМ;
		ДокументДСОбъект.Счет = ПланыСчетов.Учетный.Счет5001();
		Если СтрокаТЧДвиженияДС.ТипДвижения = "Выемка" Тогда
			ДокументДСОбъект.ПриходРасход = Перечисления.ВидыОперацийПлатежноеПоручение.Оплата;
			ДокументДСОбъект.Содержание = "Выемка из кассы магазина";
		ИначеЕсли СтрокаТЧДвиженияДС.ТипДвижения = "Внесение" Тогда
			ДокументДСОбъект.ПриходРасход = Перечисления.ВидыОперацийПлатежноеПоручение.Поступление;
			ДокументДСОбъект.Содержание = "Внесение в кассу магазина";
		КонецЕсли;
		ДокументДСОбъект.СуммаДокумента = СтрокаТЧДвиженияДС.Сумма;
		ДокументДСОбъект.Проводки.Очистить();
		СтрокаПроводки = ДокументДСОбъект.Проводки.Добавить();
		СтрокаПроводки.Сумма = СтрокаТЧДвиженияДС.Сумма;
		Попытка
			ДокументДСОбъект.Записать();
		Исключение
		КонецПопытки;	
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Товары.Код        КАК Код,
	|	Товары.Цена       КАК Цена,
	|	Товары.Количество КАК Количество,
	|	Товары.Скидка     КАК Скидка,
	|	Товары.Сумма      КАК Сумма,
	|	Товары.СуммаНал   КАК СуммаНал,
	|	Товары.СуммаБНал  КАК СуммаБНал,
	|	Товары.ДатаЗакрытияСмены КАК ДатаЗакрытияСмены,
	|	Товары.ЭтоЧекНаВозврат КАК ЭтоЧекНаВозврат,
	|	Товары.КоличествоЧеков КАК КоличествоЧеков,
	|	Товары.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	Товары.АбсолютнаяСкидка КАК АбсолютнаяСкидка,
	|	Товары.Весовой                            КАК Весовой,
	|	ВЫРАЗИТЬ(Товары.Штрихкод КАК Строка(200)) КАК Штрихкод,
	|	ВЫРАЗИТЬ(Товары.УникальныйИдентификатор КАК Строка(200)) КАК УникальныйИдентификатор
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&ТаблицаЗначений КАК Товары
	|;
	|
	|ВЫБРАТЬ
	|	Товары.Код                      КАК Код,
	|	ВЫРАЗИТЬ(Товары.ШтрихкодАлкогольнойМарки КАК Строка(200)) КАК ШтрихкодАлкогольнойМарки,
	|	ВЫРАЗИТЬ(Товары.УникальныйИдентификатор КАК Строка(200))КАК УникальныйИдентификатор
	|ПОМЕСТИТЬ ВтТаблицаШтрихкодов
	|ИЗ
	|	&ТаблицаШтрихкодов КАК Товары
	|;
	|
	|ВЫБРАТЬ
	|	Товары.Код                      КАК Код,
	//|	ШтрихкодыУпаковокТоваров.Ссылка КАК АкцизнаяМарка,
	|	Товары.ШтрихкодАлкогольнойМарки КАК ШтрихкодАлкогольнойМарки,
	|	Товары.УникальныйИдентификатор  КАК УникальныйИдентификатор
	|ПОМЕСТИТЬ ВтТоварыСАкцизнымиМарками
	|ИЗ
	|	ВтТаблицаШтрихкодов КАК Товары
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	//|		ПО Товары.ШтрихкодАлкогольнойМарки = ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.сабТипыНоменклатуры.ПустаяСсылка)) КАК ТипНоменклатуры,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))                 КАК Номенклатура,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))             КАК Упаковка,
	|	
	|	Товары.Количество                                                                                 КАК КоличествоУпаковок,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) * Товары.Количество КАК Количество,
	|	Товары.Цена                                                                                       КАК Цена,
	|	Товары.Сумма                                                                                      КАК Сумма,
	|	Товары.Скидка                                                                                     КАК ПроцентРучнойСкидки,
	|	Товары.СуммаНал                                                                                   КАК СуммаНал,
	|	Товары.СуммаБНал                                                                                  КАК СуммаБНал,
	|	Товары.ДатаЗакрытияСмены                                                                          КАК ДатаЗакрытияСмены,
	|	Товары.ЭтоЧекНаВозврат                                                                            КАК ЭтоЧекНаВозврат,
	|	Товары.КоличествоЧеков                                                                            КАК КоличествоЧеков,
	|	Товары.ПроцентСкидкиНаценки                                                                       КАК ПроцентСкидкиНаценки,
	|	Товары.АбсолютнаяСкидка                                                                           КАК АбсолютнаяСкидка,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.СтавкаНДС, ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)) КАК СтавкаНДС,
	//|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ПодакцизныйТовар, ЛОЖЬ) КАК ПодакцизныйТовар,
	|	ЛОЖЬ КАК ПодакцизныйТовар,
	|	Товары.УникальныйИдентификатор                                                                    КАК УникальныйИдентификатор
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
	|		ПО Товары.Код = КодыТоваровПодключаемогоОборудованияOffline.Код
	|			И КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена = &ПравилоОбмена
	|			И НЕ Товары.Весовой
	|ГДЕ
	|	Не Товары.Весовой
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.сабТипыНоменклатуры.ПустаяСсылка)) КАК ТипНоменклатуры,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))                 КАК Номенклатура,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))             КАК Упаковка,
	|	
	|	Товары.Количество                                                                                 КАК КоличествоУпаковок,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) * Товары.Количество КАК Количество,
	|	Товары.Цена                                                                                       КАК Цена,
	|	Товары.Сумма                                                                                      КАК Сумма,
	|	Товары.Скидка                                                                                     КАК ПроцентРучнойСкидки,
	|	Товары.СуммаНал                                                                                   КАК СуммаНал,
	|	Товары.СуммаБНал                                                                                  КАК СуммаБНал,
	|	Товары.ДатаЗакрытияСмены                                                                          КАК ДатаЗакрытияСмены,
	|	Товары.ЭтоЧекНаВозврат                                                                            КАК ЭтоЧекНаВозврат,
	|	Товары.КоличествоЧеков                                                                            КАК КоличествоЧеков,
	|	Товары.ПроцентСкидкиНаценки                                                                       КАК ПроцентСкидкиНаценки,
	|	Товары.АбсолютнаяСкидка                                                                           КАК АбсолютнаяСкидка,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.СтавкаНДС, ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)) КАК СтавкаНДС,
	//|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ПодакцизныйТовар, ЛОЖЬ) КАК ПодакцизныйТовар,
	|	ЛОЖЬ КАК ПодакцизныйТовар,
	|	Товары.УникальныйИдентификатор                                                                    КАК УникальныйИдентификатор
	|ИЗ
	|	Товары КАК Товары
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|		ПО ПОДСТРОКА(Товары.Штрихкод, 3, 5) = ПОДСТРОКА(Штрихкоды.Штрихкод, 3, 5)
	|			И Штрихкоды.Штрихкод ПОДОБНО &ФорматШтрихкода
	|			И Товары.Весовой
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
	|		ПО КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена = &ПравилоОбмена
	|			И Штрихкоды.Номенклатура   = КодыТоваровПодключаемогоОборудованияOffline.Номенклатура
	|			И Штрихкоды.Характеристика = КодыТоваровПодключаемогоОборудованияOffline.Характеристика
	|			И Штрихкоды.Упаковка       = КодыТоваровПодключаемогоОборудованияOffline.Упаковка
	|			И Товары.Весовой
	|
	|ГДЕ
	|	Товары.Весовой
	|
	|ИТОГИ
	|	МАКСИМУМ(ДатаЗакрытияСмены),
	|	МАКСИМУМ(ЭтоЧекНаВозврат),
	|	МАКСИМУМ(КоличествоЧеков),
	|	Сумма(СуммаНал),
	|	Сумма(СуммаБНал)
	|ПО
	|	Товары.УникальныйИдентификатор;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))                 КАК Номенклатура,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	//|	Товары.АкцизнаяМарка                                                                                                               КАК АкцизнаяМарка,
	//|	АкцизныеМаркиЕГАИС.Справка2                                                                                                        КАК Справка2,
	|	""""                                                                                                               КАК АкцизнаяМарка,
	|	""""                                                                                                        КАК Справка2,
	|	Товары.ШтрихкодАлкогольнойМарки                                                                                                    КАК ШтрихкодАлкогольнойМарки,
	|	Товары.УникальныйИдентификатор                                                                    КАК УникальныйИдентификатор
	|ИЗ
	|	ВтТоварыСАкцизнымиМарками КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
	|		ПО Товары.Код = КодыТоваровПодключаемогоОборудованияOffline.Код
	|			И КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена = &ПравилоОбмена
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
	//|		ПО Товары.АкцизнаяМарка = АкцизныеМаркиЕГАИС.АкцизнаяМарка
	//|			И АкцизныеМаркиЕГАИС.ОрганизацияЕГАИС = &ОрганизацияЕГАИС
	|");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки", "1");
		//Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		//"КодыТоваровПодключаемогоОборудованияOffline.Упаковка",
		//"КодыТоваровПодключаемогоОборудованияOffline.Номенклатура"));
	//ОрганизацияЕГАИС = РозничныеПродажи.ПолучитьОрганизациюЕГАИС(Выборка.Склад, Выборка.Организация);
	
	Запрос.УстановитьПараметр("ПравилоОбмена",   Выборка.ПравилоОбмена);
	Запрос.УстановитьПараметр("ТаблицаЗначений", ТаблицаТоваров);
	Запрос.УстановитьПараметр("ТаблицаШтрихкодов", ТаблицаШтрихкодовАкцизов);
	Запрос.УстановитьПараметр("ФорматШтрихкода", РегистрыСведений.ШтрихкодыНоменклатуры.ФорматВесовогоШтрихкода("_", Истина));
	//Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаПоИдентификаторам = РезультатЗапроса[РезультатЗапроса.Количество()-2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ТаблицаАкцизныеМарки = РезультатЗапроса[РезультатЗапроса.Количество()-1].Выгрузить();
	Пока ВыборкаПоИдентификаторам.Следующий() Цикл
		Если ВыборкаПоИдентификаторам.ЭтоЧекНаВозврат Тогда
			ЭтоПродажа = Ложь;
			ДокументРеализацииВозврата = "УЧ_Возврат";
		Иначе
			ЭтоПродажа = Истина;
			ДокументРеализацииВозврата = "УЧ_Реализация";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаПоИдентификаторам.УникальныйИдентификатор) Тогда
			
			УИ = Новый УникальныйИдентификатор(ВыборкаПоИдентификаторам.УникальныйИдентификатор);
			
			ОтчетСсылка = Документы[ДокументРеализацииВозврата].ПолучитьСсылку(УИ);
			
			ОтчетОРозничныхПродажахОбъект = ОтчетСсылка.ПолучитьОбъект();
			
			Если ОтчетОРозничныхПродажахОбъект = Неопределено Тогда
				ОтчетОРозничныхПродажахОбъект = Документы[ДокументРеализацииВозврата].СоздатьДокумент();
				ОтчетОРозничныхПродажахОбъект.УстановитьСсылкуНового(ОтчетСсылка);
			КонецЕсли;
			
		Иначе
			
			ОтчетОРозничныхПродажахОбъект = Документы[ДокументРеализацииВозврата].СоздатьДокумент();
			
		КонецЕсли;
		ОтчетОРозничныхПродажахОбъект.Дата               = ВыборкаПоИдентификаторам.ДатаЗакрытияСмены;
		ОтчетОРозничныхПродажахОбъект.Валюта             = УЧ_Сервер.НациональнаяВалюта();//Выборка.Валюта;
		//ОтчетОРозничныхПродажахОбъект.ВидЦены            = Выборка.ВидЦены;
		//ОтчетОРозничныхПродажахОбъект.КассаККМ           = Выборка.КассаККМ;
		ОтчетОРозничныхПродажахОбъект.Комментарий        = НСтр("ru = 'Загружено из ККМ Offline:'") + " " + Устройство;
		//ОтчетОРозничныхПродажахОбъект.НалогообложениеНДС = Справочники.Организации.НалогообложениеНДС(Выборка.Организация, Выборка.Склад, ТекущаяДатаСеанса());
		ОтчетОРозничныхПродажахОбъект.Организация        = Выборка.Организация;
		ОтчетОРозничныхПродажахОбъект.Автор      		 = Пользователи.ТекущийПользователь();
		Если ЭтоПродажа Тогда
			ОтчетОРозничныхПродажахОбъект.Подразделение      = Выборка.Подразделение; //ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Пользователи.ТекущийПользователь());
			ОтчетОРозничныхПродажахОбъект.Склад              = Выборка.Склад;
			ОтчетОРозничныхПродажахОбъект.ВидОперации        = Перечисления.ВидыОперацийРеализация.ZОтчет;
			ОтчетОРозничныхПродажахОбъект.КоличествоЧеков 	 = ВыборкаПоИдентификаторам.КоличествоЧеков;
		Иначе
			ОтчетОРозничныхПродажахОбъект.ВидДеятельности      = Выборка.Подразделение;
			ОтчетОРозничныхПродажахОбъект.ВидОперации = "Возврат";
		КонецЕсли;	
		ОтчетОРозничныхПродажахОбъект.СуммаВключаетНДС 	 = Выборка.ЦенаВключаетНДС;
		ОтчетОРозничныхПродажахОбъект.Предприятие 		 = Выборка.Предприятие;
		ОтчетОРозничныхПродажахОбъект.Контрагент 		 = Справочники.Контрагенты.НайтиПоНаименованию("Частное лицо", Истина);
		
		РеквизитыДоговора = сабОперОбщегоНазначения.ПолучитьДоговорКонтрагентаПоУмолчанию(ОтчетОРозничныхПродажахОбъект.Контрагент);
		Если ЗначениеЗаполнено(РеквизитыДоговора.Договор) Тогда
			ОтчетОРозничныхПродажахОбъект.Договор = РеквизитыДоговора.Договор;
		КонецЕсли;
		
		СчетВзаиморасчетов = БюджетныйНаСервере.ВернутьРеквизит(ОтчетОРозничныхПродажахОбъект.Договор, "СчетВзаиморасчетов");
		Если ЗначениеЗаполнено(СчетВзаиморасчетов) И НЕ ЗначениеЗаполнено(ОтчетОРозничныхПродажахОбъект.Счет) Тогда
			ОтчетОРозничныхПродажахОбъект.Счет = СчетВзаиморасчетов;
		Иначе
			ОтчетОРозничныхПродажахОбъект.Счет = ПланыСчетов.Учетный.Счет6201();
		КонецЕсли;
		Если ОтчетОРозничныхПродажахОбъект.Счет = ПредопределенноеЗначение("ПланСчетов.Учетный.ВНХТоварные") Тогда
			ОтчетОРозничныхПродажахОбъект.ПредприятиеПоставщик = БюджетныйНаСервере.ВернутьРеквизит(ОтчетОРозничныхПродажахОбъект.Контрагент, "ПредприятиеХодлинга");
			ОтчетОРозничныхПродажахОбъект.ДоговорВн = БюджетныйНаСервере.ВернутьРеквизит(ОтчетОРозничныхПродажахОбъект.Договор, "ВнутрихолдинговыйДоговор");
		КонецЕсли;	

		//ОтчетОРозничныхПродажахОбъект.ОрганизацияЕГАИС   = ОрганизацияЕГАИС;
		
		ОтчетОРозничныхПродажахОбъект.СуммаНаличногоРасчета = ВыборкаПоИдентификаторам.СуммаНал;
		Если Не ВыборкаПоИдентификаторам.СуммаБНал = 0 Тогда
			Если ЭтоПродажа Тогда
				ОтчетОРозничныхПродажахОбъект.ОплатаПлатежнымиКартами.Очистить();
				СтрокаПлатежныхКарт = ОтчетОРозничныхПродажахОбъект.ОплатаПлатежнымиКартами.Добавить();
				СтрокаПлатежныхКарт.ЭквайринговыйТерминал = Выборка.ЭквайринговыйТерминал;
				СтрокаПлатежныхКарт.Сумма = ВыборкаПоИдентификаторам.СуммаБНал;
				Если ЗначениеЗаполнено(СтрокаПлатежныхКарт.ЭквайринговыйТерминал) Тогда
					СтрокаПлатежныхКарт.ПроцентКомиссии = СтрокаПлатежныхКарт.ЭквайринговыйТерминал.ПроцентКомиссииПриПродаже;
					СтрокаПлатежныхКарт.СуммаКомиссии = СтрокаПлатежныхКарт.Сумма * СтрокаПлатежныхКарт.ПроцентКомиссии / 100;
				КонецЕсли;
			Иначе
				ОтчетОРозничныхПродажахОбъект.СуммаБезналичногоРасчета = ВыборкаПоИдентификаторам.СуммаБНал;
			КонецЕсли;	
		КонецЕсли;
					
		ТаблицаНаборов = Новый ТаблицаЗначений;
		ТаблицаНаборов.Колонки.Добавить("Номенклатура");
		ТаблицаНаборов.Колонки.Добавить("Характеристика");
		ТаблицаНаборов.Колонки.Добавить("Количество");
		ТаблицаНаборов.Колонки.Добавить("Цена");
		ТаблицаНаборов.Колонки.Добавить("ПроцентРучнойСкидки");
		ТаблицаНаборов.Колонки.Добавить("ПодакцизныйТовар");
		ТаблицаНаборов.Колонки.Добавить("СтавкаНДС");
		
		ВыборкаПоТоварам = ВыборкаПоИдентификаторам.Выбрать();
		ОтчетОРозничныхПродажахОбъект.Товары.Очистить();
		Пока ВыборкаПоТоварам.Следующий() Цикл
			Если ВыборкаПоТоварам.ТипНоменклатуры <> Перечисления.сабТипыНоменклатуры.Услуга Тогда
				НоваяСтрока = ОтчетОРозничныхПродажахОбъект.Товары.Добавить();
				
				НоваяСтрока.Номенклатура        = ВыборкаПоТоварам.Номенклатура;
				//НоваяСтрока.Характеристика      = ВыборкаПоТоварам.Характеристика;
				//НоваяСтрока.Упаковка            = ВыборкаПоТоварам.Упаковка;
				НоваяСтрока.Количество          = ВыборкаПоТоварам.Количество;
				//НоваяСтрока.КоличествоУпаковок  = ВыборкаПоТоварам.КоличествоУпаковок;
				НоваяСтрока.Сумма               = ВыборкаПоТоварам.Сумма;
				НоваяСтрока.СуммаОтгрузки       = ВыборкаПоТоварам.Сумма;
				НоваяСтрока.Цена                = ВыборкаПоТоварам.Цена;
				Если ЭтоПродажа Тогда
					НоваяСтрока.ПроцентСкидкиНаценки = ВыборкаПоТоварам.ПроцентСкидкиНаценки;
					НоваяСтрока.АбсолютнаяСкидка = ВыборкаПоТоварам.АбсолютнаяСкидка;
				КонецЕсли;
								
				//Установим НДС и артикул
				Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
					ТекРеквизиты = БюджетныйНаСервере.ВернутьРеквизиты(НоваяСтрока.Номенклатура, "СтавкаНДС, Код, Счет10", Ложь);
					НоваяСтрока.СтавкаНДС = ТекРеквизиты.СтавкаНДС;
					НоваяСтрока.Счет = ТекРеквизиты.Счет10;
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ОтчетОРозничныхПродажахОбъект.СуммаВключаетНДС);
				КонецЕсли;
				
				//Если ЗначениеЗаполнено(НоваяСтрока.Наименование) Тогда
					//НоваяСтрока.СтавкаНДС = СтавкаНДС(ОтчетОРозничныхПродажахОбъект.НалогообложениеНДС, ВыборкаПоТоварам.ПодакцизныйТовар, ВыборкаПоТоварам.СтавкаНДС);
				//КонецЕсли;
				
				//НоваяСтрока.СуммаРучнойСкидки   = Окр(НоваяСтрока.КоличествоУпаковок * НоваяСтрока.Цена * НоваяСтрока.ПроцентРучнойСкидки / 100, 2);
				//НоваяСтрока.СуммаНДС            = Ценообразование.РассчитатьСуммуНДС(НоваяСтрока.Сумма, НоваяСтрока.СтавкаНДС, Выборка.ЦенаВключаетНДС);
				//НоваяСтрока.Партнер             = Справочники.Партнеры.РозничныйПокупатель;
			Иначе
				НоваяСтрока = ТаблицаНаборов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоТоварам);
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ВыборкаПоИдентификаторам.УникальныйИдентификатор) Тогда
			СтрокиПоИдентификатору = ТаблицаАкцизныеМарки.НайтиСтроки(Новый Структура("УникальныйИдентификатор", ВыборкаПоИдентификаторам.УникальныйИдентификатор));
		Иначе
			СтрокиПоИдентификатору = ТаблицаАкцизныеМарки;
		КонецЕсли;
		
		//закоментил до разбота работы ЕГАИС
		//Для Каждого СтрокаАкциз Из СтрокиПоИдентификатору Цикл
		//	
		//	Если ЗначениеЗаполнено(СтрокаАкциз.ШтрихкодАлкогольнойМарки) Тогда
		//		АкцизнаяМарка = СтрокаАкциз.АкцизнаяМарка;
		//		
		//		Если НЕ ЗначениеЗаполнено(АкцизнаяМарка) Тогда
		//			АкцизнаяМарка = Справочники.ШтрихкодыУпаковокТоваров.СгенерироватьАкцизнуюМарку(
		//				СтрокаАкциз.ШтрихкодАлкогольнойМарки,
		//				СтрокаАкциз.Номенклатура,
		//				СтрокаАкциз.Характеристика);
		//		КонецЕсли;
		//		НоваяСтрока = ОтчетОРозничныхПродажахОбъект.АкцизныеМарки.Добавить();
		//		НоваяСтрока.АкцизнаяМарка = АкцизнаяМарка;
		//		НоваяСтрока.Справка2 = СтрокаАкциз.Справка2;
		//		
		//	КонецЕсли;
		//	
		//КонецЦикла;
		
		ТаблицаНаборов.Свернуть("Номенклатура,Характеристика,ПроцентРучнойСкидки,СтавкаНДС,Цена,ПодакцизныйТовар","Количество");
		
		//Для Каждого ВыборкаПоТоварам Из ТаблицаНаборов Цикл
		//	
		//	МассивСтрокНабора = Новый Массив;
		//	Данные = ШтрихкодированиеНоменклатурыСервер.Комплектующие(
		//		ВыборкаПоТоварам.Номенклатура,
		//		ВыборкаПоТоварам.Характеристика);
		//	
		//	Для Каждого СтрокаТЧ Из Данные Цикл
		//		
		//		НоваяСтрока = ОтчетОРозничныхПродажахОбъект.Товары.Добавить();
		//		НоваяСтрока.НоменклатураНабора   = СтрокаТЧ.НоменклатураНабора;
		//		НоваяСтрока.ХарактеристикаНабора = СтрокаТЧ.ХарактеристикаНабора;
		//		НоваяСтрока.Номенклатура         = СтрокаТЧ.Номенклатура;
		//		НоваяСтрока.Характеристика       = СтрокаТЧ.Характеристика;
		//		НоваяСтрока.Упаковка             = СтрокаТЧ.Упаковка;
		//		НоваяСтрока.КоличествоУпаковок   = ВыборкаПоТоварам.Количество * СтрокаТЧ.КоличествоУпаковок;
		//		НоваяСтрока.Количество           = ВыборкаПоТоварам.Количество * СтрокаТЧ.КоличествоУпаковок * СтрокаТЧ.Коэффициент;
		//		НоваяСтрока.ПроцентРучнойСкидки  = ВыборкаПоТоварам.ПроцентРучнойСкидки;
		//		
		//		Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
		//			НоваяСтрока.СтавкаНДС = СтавкаНДС(ОтчетОРозничныхПродажахОбъект.НалогообложениеНДС, СтрокаТЧ.ПодакцизныйТовар, ВыборкаПоТоварам.СтавкаНДС);
		//		КонецЕсли;
		//		
		//		НоваяСтрока.Партнер = Справочники.Партнеры.РозничныйПокупатель;
		//		
		//		МассивСтрокНабора.Добавить(НоваяСтрока);
		//		
		//	КонецЦикла;
		//	
		//	Отбор = Новый Структура;
		//	Отбор.Вставить("НоменклатураНабора", ВыборкаПоТоварам.Номенклатура);
		//	Отбор.Вставить("ХарактеристикаНабора", ВыборкаПоТоварам.Характеристика);
		//	
		//	ПараметрыЗаполнения = Новый Структура( // Параметры заполнения
		//				"Дата, Валюта, ВидЦены, ПоляЗаполнения",
		//				ОтчетОРозничныхПродажахОбъект.Дата,
		//				ОтчетОРозничныхПродажахОбъект.Валюта,
		//				ОтчетОРозничныхПродажахОбъект.ВидЦены,
		//				"Цена");
		//	
		//	КоэффициентыПропорциональностиРасчетаЦенНаборов = НаборыСервер.КоэффициентыРаспределения(
		//		ОтчетОРозничныхПродажахОбъект.Товары.Выгрузить(Отбор),
		//		ПараметрыЗаполнения);
		//	
		//	ОбщаяСтоимость = 0;
		//	СуммаКРаспределению = ВыборкаПоТоварам.Цена * ВыборкаПоТоварам.Количество;
		//	
		//	СлужебнаяТЧ = Новый ТаблицаЗначений;
		//	СлужебнаяТЧ.Колонки.Добавить("СтрокаТЧ");
		//	СлужебнаяТЧ.Колонки.Добавить("Количество");
		//	СлужебнаяТЧ.Колонки.Добавить("Стоимость");
		//	Для Каждого ТекущаяСтрока Из МассивСтрокНабора Цикл
		//		
		//		Стоимость = КоэффициентыПропорциональностиРасчетаЦенНаборов.Найти(ТекущаяСтрока.НомерСтроки, "НомерСтроки").Цена;
		//		Количество = ?(ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ТекущаяСтрока, "КоличествоУпаковок"), ТекущаяСтрока.КоличествоУпаковок, ТекущаяСтрока.Количество);
		//		
		//		НоваяСтрока = СлужебнаяТЧ.Добавить();
		//		НоваяСтрока.СтрокаТЧ = ТекущаяСтрока;
		//		НоваяСтрока.Стоимость = Стоимость;
		//		НоваяСтрока.Количество = Количество;
		//		
		//		ОбщаяСтоимость = ОбщаяСтоимость + Стоимость;
		//		
		//	КонецЦикла;
		//	СлужебнаяТЧ.Сортировать("Количество УБЫВ");
		//	
		//	НомерСтроки = 0;
		//	КоличествоСтрок = СлужебнаяТЧ.Количество();
		//	Для Каждого СтрокаСлужебнойТЧ Из СлужебнаяТЧ Цикл
		//		
		//		НомерСтроки = НомерСтроки + 1;
		//		
		//		ТекущаяСтрока = СтрокаСлужебнойТЧ.СтрокаТЧ;
		//		Стоимость = СтрокаСлужебнойТЧ.Стоимость;
		//		Количество = СтрокаСлужебнойТЧ.Количество;
		//		
		//		Если Количество <> 0 И ОбщаяСтоимость <> 0 Тогда
		//			ТекущаяСтрока.Цена = Окр(((Стоимость / ОбщаяСтоимость) * СуммаКРаспределению) / Количество, 2);
		//		Иначе
		//			ТекущаяСтрока.Цена = 0;
		//		КонецЕсли;
		//		
		//		ОбщаяСтоимость = ОбщаяСтоимость - Стоимость;
		//		СуммаКРаспределению = СуммаКРаспределению - ТекущаяСтрока.Цена * Количество;
		//		
		//		Погрешность = 0;
		//		Если НомерСтроки = КоличествоСтрок Тогда
		//			Погрешность = СуммаКРаспределению;
		//		КонецЕсли;
		//		
		//		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ОтчетОРозничныхПродажахОбъект);
		//		
		//		СтруктураДействий = Новый Структура;
		//		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		//		СтруктураДействий.Вставить("ПересчитатьСумму");
		//		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
		//		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомПогрешностиОкругления", Погрешность);
		//		
		//		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		//		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		//	
		//	КонецЦикла;
		//	
		//КонецЦикла;
		
		//временно грузим только пекарню
		//Если Устройство.Наименование = "Пекарня на Артамонова_Эвотор" Тогда
			Попытка
				Если ОтчетОРозничныхПродажахОбъект.ПроверитьЗаполнение() Тогда
					ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Иначе
					ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
			Исключение
				ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецПопытки;
			
			//создадим сразу внесение денег от покупателя
			Если ОтчетОРозничныхПродажахОбъект.СуммаНаличногоРасчета <> 0 Тогда
				ЗапросПКО = Новый Запрос;
				ЗапросПКО.Текст = 
				"ВЫБРАТЬ
				|	УЧ_ДвижениеДС.Ссылка КАК Ссылка
				|ИЗ
				|	Документ.УЧ_ДвижениеДС КАК УЧ_ДвижениеДС
				|ГДЕ
				|	УЧ_ДвижениеДС.ДокОснование = &ДокОснование";
				ЗапросПКО.УстановитьПараметр("ДокОснование", ОтчетОРозничныхПродажахОбъект.Ссылка); 
				РезультатЗапросаПКО = ЗапросПКО.Выполнить();
				Если РезультатЗапросаПКО.Пустой() Тогда
					ДокументДСОбъект = Документы.УЧ_ДвижениеДС.СоздатьДокумент();
				Иначе
					ВыборкаПКО = РезультатЗапросаПКО.Выбрать();
					Пока ВыборкаПКО.Следующий() Цикл
						ДокументДСОбъект = ВыборкаПКО.Ссылка.ПолучитьОбъект();
					КонецЦикла;
				КонецЕсли;	
				
				ДокументДСОбъект.Дата = ОтчетОРозничныхПродажахОбъект.Дата;
				ДокументДСОбъект.Предприятие = Выборка.Предприятие;
				ДокументДСОбъект.Подразделение = Выборка.Подразделение;
				ДокументДСОбъект.ВидОперации = Перечисления.ВидыОперацийДвиженияДС.КассовыйОрдер;
				ДокументДСОбъект.Субконто2 = Выборка.КассаККМ;
				Если ЭтоПродажа Тогда
					ДокументДСОбъект.ПриходРасход = Перечисления.ВидыОперацийПлатежноеПоручение.Поступление;
					ДокументДСОбъект.Содержание = "Внесение оплаты розничным покупателем";
					ДокументДСОбъект.Комментарий = "Внесение оплаты розничным покупателем";
				Иначе
					ДокументДСОбъект.ПриходРасход = Перечисления.ВидыОперацийПлатежноеПоручение.Оплата;
					ДокументДСОбъект.Содержание = "Возврат ДС розничному покупателю";
					ДокументДСОбъект.Комментарий = "Возврат ДС розничному покупателю";
				КонецЕсли;
				ДокументДСОбъект.СуммаДокумента = ОтчетОРозничныхПродажахОбъект.СуммаНаличногоРасчета;
				ДокументДСОбъект.Контрагент = ОтчетОРозничныхПродажахОбъект.Контрагент;
				ДокументДСОбъект.Договор =  ОтчетОРозничныхПродажахОбъект.Договор;
				ДокументДСОбъект.Счет = ПланыСчетов.Учетный.Счет5001();
				ДокументДСОбъект.ДокОснование = ОтчетОРозничныхПродажахОбъект.Ссылка;
				ДокументДСОбъект.Проводки.Очистить();
				СтрокаПроводки = ДокументДСОбъект.Проводки.Добавить();
				СтрокаПроводки.Сумма = ОтчетОРозничныхПродажахОбъект.СуммаНаличногоРасчета;
				СтрокаПроводки.ФинСтатья = Справочники.СтатьиДвиженияДенежныхСредств.ВыручкаОтРеализацииОсновнойПродукции;
				СтрокаПроводки.КорСчет = ПланыСчетов.Учетный.Счет6201();
				СтрокаПроводки.КорСубконто1 = ОтчетОРозничныхПродажахОбъект.Контрагент;
				СтрокаПроводки.КорСубконто2 = ОтчетОРозничныхПродажахОбъект.Договор;
				Попытка
					ДокументДСОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					ДокументДСОбъект.Записать();
				КонецПопытки;	
			КонецЕсли;
		//КонецЕсли;
		
		НачатьТранзакцию();
		
		УзелОбъект = Выборка.УзелИнформационнойБазы.ПолучитьОбъект();
		УзелОбъект.ДатаЗагрузки = ТекущаяДатаСеанса();
		УзелОбъект.Записать();
		//Для каждого СтрокаАкциз Из СтрокиПоИдентификатору Цикл
		//
		//	НаборЗаписей = РегистрыСведений.АкцизныеМаркиЕГАИС.СоздатьНаборЗаписей();
		//	НаборЗаписей.Отбор.ОрганизацияЕГАИС.Установить(ОрганизацияЕГАИС, Истина);
		//	НаборЗаписей.Отбор.АкцизнаяМарка.Установить(СтрокаАкциз.АкцизнаяМарка, Истина);
		//	
		//	НаборЗаписей.Прочитать();
		//	
		//	Если НаборЗаписей.Количество() = 1 Тогда
		//		НоваяЗапись = НаборЗаписей[0];
		//		НоваяЗапись.Статус = Перечисления.СтатусыАкцизныхМарок.Реализована;
		//		
		//		Попытка
		//			НаборЗаписей.Записать();
		//		Исключение
		//			ОтменитьТранзакцию();
		//			
		//			ТекстОшибки = НСтр("ru = 'При записи акцизных марок произошла ошибка:
		//			                         |%1'");
		//			
		//			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		//				СтрШаблон(ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		//			
		//			ИнтеграцияЕГАИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
		//				СтрШаблон(ТекстОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		//			
		//		КонецПопытки;
		//	КонецЕсли;
		//КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СтавкаНДС(НалогообложениеНДС, ПодакцизныйТовар, СтавкаНДСНоменклатуры)
	
	СтавкаНДС = Неопределено;
	
	Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
		СтавкаНДС = СтавкаНДСНоменклатуры;
	ИначеЕсли НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС Тогда
		СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	ИначеЕсли НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД Тогда
		Если ПодакцизныйТовар Тогда
			СтавкаНДС = СтавкаНДСНоменклатуры;
		Иначе
			СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
	ИначеЕсли НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНаЭкспорт Тогда
		СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
	ИначеЕсли НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя Тогда
		СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118;
	Иначе
		СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
	
	Возврат СтавкаНДС;
	
КонецФункции

Функция ПолучитьСтавкуНДС(СтавкаНДСККМ)
	
	Если СтавкаНДСККМ = МенеджерОфлайнОборудования.ПолучитьСтавкуБезНДС() Тогда
		
		Возврат Перечисления.СтавкиНДС.БезНДС;
		
	ИначеЕсли СтавкаНДСККМ = МенеджерОфлайнОборудования.ПолучитьСтавкуНДС0() Тогда
		
		Возврат Перечисления.СтавкиНДС.НДС0;
		
	ИначеЕсли СтавкаНДСККМ = МенеджерОфлайнОборудования.ПолучитьСтавкуНДС10() Тогда
		
		Возврат Перечисления.СтавкиНДС.НДС10;
		
	ИначеЕсли СтавкаНДСККМ = МенеджерОфлайнОборудования.ПолучитьСтавкуНДС18() Тогда
		
		Возврат Перечисления.СтавкиНДС.НДС18;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтавкуНДСККМ(СтавкаНДС)
	
	Возврат СтавкаНДС.Ставка;
	
	//Если СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
	//	
	//	Возврат МенеджерОфлайнОборудования.ПолучитьСтавкуБезНДС();
	//	
	//ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
	//	
	//	Возврат МенеджерОфлайнОборудования.ПолучитьСтавкуНДС0();
	//	
	//ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
	//	
	//	Возврат МенеджерОфлайнОборудования.ПолучитьСтавкуНДС10();
	//	
	//ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
	//	
	//	Возврат МенеджерОфлайнОборудования.ПолучитьСтавкуНДС18();
	//	
	//КонецЕсли;
	
КонецФункции

#КонецОбласти

Функция ПризнакПредметаРасчетаФискальнойОперации(ТипНоменклатуры, ПодакцизныйТовар) Экспорт
	
	ВозвращаемоеЗначение = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Товар");
	
	Если ПодакцизныйТовар Тогда
		ВозвращаемоеЗначение = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПодакцизныйТовар");
	КонецЕсли;
	
	Если ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.сабТипыНоменклатуры.Работа") Тогда
		ВозвращаемоеЗначение = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Работа");
	ИначеЕсли ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.сабТипыНоменклатуры.Услуга") Тогда
		ВозвращаемоеЗначение = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Услуга");
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получает организацию ЕГАИС по складу/организации.
//
// Параметры:
//  Склад		 - СправочникСсылка.Склады - склад документа.
//  Организация	 - СправочникСсылка.Организации - организация документа.
// 
// Возвращаемое значение:
//  СправочникСсылка.КлассификаторОрганизацийЕГАИС - организация ЕГАИС.
//
Функция ПолучитьОрганизациюЕГАИС(Склад, Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КлассификаторОрганизацийЕГАИС.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.ТорговыйОбъект = &Склад
	|	И КлассификаторОрганизацийЕГАИС.Контрагент = &Организация";
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Организация", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка
	КонецЕсли;
	
	Возврат Неопределено
	
КонецФункции
