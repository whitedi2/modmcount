
Процедура ДействияПриСозданииФормыСправочника(Форма, Параметры = Неопределено) экспорт
	
	Элементы = Форма.Элементы;
	ЭтоНовый = Ложь;
	Если Лев(Форма.ИмяФормы, 5) = "Отчет" Тогда
		Объект = Форма.Отчет;
		ЭтоНовый = Истина;
	ИначеЕсли Форма.Параметры.Свойство("Ключ") Тогда //попробуем так отловить форму документа
		Объект = Форма.Объект;
		ЭтоОбъект = Истина;
		ЭтоНовый = НЕ ЗначениеЗаполнено(Объект.Ссылка);
	ИначеЕсли Лев(Форма.ИмяФормы, 9) = "Обработка" Тогда
		Объект = Форма.Объект;
	Иначе
		Объект = Новый Структура;;
	КонецЕсли;

	
	//обрабатывает параметр "ОтборВСписке"
	Если ЭтоНовый И НЕ Параметры = Неопределено Тогда
		Если Параметры.Свойство("ОтборВСписке") Тогда
			Для каждого ТекСтрокаОтбора Из Параметры.ОтборВСписке.Элементы Цикл
				Если ТекСтрокаОтбора.Использование Тогда
					Если Объект.Свойство(Строка(ТекСтрокаОтбора.ЛевоеЗначение)) И НЕ ЗначениеЗаполнено(Объект[Строка(ТекСтрокаОтбора.ЛевоеЗначение)]) И ТекСтрокаОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
						Объект[Строка(ТекСтрокаОтбора.ЛевоеЗначение)] = ТекСтрокаОтбора.ПравоеЗначение;
						Если ТипЗнч(ТекСтрокаОтбора.ПравоеЗначение) = Тип("СправочникСсылка.Предприятия") Тогда
							Если Объект.Свойство("ПредприятияНоменклатуры") Тогда
								НоваяСтрокаТЧ = Объект.ПредприятияНоменклатуры.Добавить();
								НоваяСтрокаТЧ.Предприятие = ТекСтрокаОтбора.ПравоеЗначение;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;		
			КонецЦикла; 	
		КонецЕсли;
	КонецЕсли;
	//конец обработкм "ОтборВСписке"
	
	Если Объект.Свойство("Предприятие") Тогда
		ТекПредприятие = Объект.Предприятие;
	ИначеЕсли Объект.Свойство("Владелец") И ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Предприятия") Тогда
		ТекПредприятие = Объект.Владелец;
	Иначе
		ТекПредприятие = Неопределено;
	КонецЕсли;
	Если НЕ ТекПредприятие = Неопределено Тогда
		МассивПП = БюджетныйНаСервере.ПолучитьПредприятия();
		Если МассивПП.Количество() = 1 Тогда
			Если НЕ ЗначениеЗаполнено(ТекПредприятие) Тогда
				Если Объект.Свойство("Предприятие") Тогда
					Объект.Предприятие = МассивПП.Получить(0);
				Иначе	
					Объект.Владелец = МассивПП.Получить(0);
				КонецЕсли;
			КонецЕсли;
			Если ТипЗнч(Объект.Ссылка) <> Тип("СправочникСсылка.Номенклатура") И ТипЗнч(Объект.Ссылка) <> Тип("СправочникСсылка.Номенклатура") И НЕ Элементы.Найти("Предприятие") = Неопределено Тогда
				Элементы.Предприятие.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ТекПредприятие) И НЕ БюджетныйНаСервере.РольАдминаДоступнаСервер() И НЕ рольдоступна("сабУчетчик") Тогда
				Если НЕ Элементы.Найти("Предприятие") = Неопределено Тогда
					Элементы.Предприятие.Доступность = Ложь;		
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Свойство("Ссылка") Тогда
		
		Если (ЗначениеЗаполнено(ПараметрыСеанса.ТекущееПредприятие)) И НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
			Если ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.Контрагенты") ИЛИ ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.Номенклатура") Тогда
				
				Если ЗначениеЗаполнено(ПараметрыСеанса.ТекущееПредприятие) Тогда
					
					Если ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.Контрагенты") Тогда
						
						Если Объект.Предприятия.НайтиСтроки(Новый Структура("Предприятие", ПараметрыСеанса.ТекущееПредприятие)).Количество() Тогда
							НовСтр = Объект.Предприятия.Добавить();
							НовСтр.Предприятие = ПараметрыСеанса.ТекущееПредприятие;
						КонецЕсли;
						
					Иначе
						
						Если НЕ Объект.ПредприятияНоменклатуры.НайтиСтроки(Новый Структура("Предприятие", ПараметрыСеанса.ТекущееПредприятие)).Количество() Тогда
							НовСтр = Объект.ПредприятияНоменклатуры.Добавить();
							НовСтр.Предприятие = ПараметрыСеанса.ТекущееПредприятие;	
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	//ПараметрыВыбора в реквизиты. д1 16.02.18
	Если Форма.Параметры.Свойство("ПараметрыВыбора") Тогда
		Для каждого ТекСтрока Из Форма.Параметры.ПараметрыВыбора Цикл
			Если Объект.Свойство(ТекСтрока.Ключ) Тогда
				МетаданныеОбекта = Объект.Ссылка.Метаданные();
				ЭтоСтандартныйРеквизит = Ложь;
				Для каждого текРеквизит Из МетаданныеОбекта.СтандартныеРеквизиты Цикл
					Если текРеквизит.Имя = ТекСтрока.Ключ Тогда
						ЭтоСтандартныйРеквизит = Истина	
					КонецЕсли;
				КонецЦикла;
				Если Не ЭтоСтандартныйРеквизит Тогда
					Форма.Объект[ТекСтрока.Ключ] = ТекСтрока.Значение;		
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли; //конец параметров
		
	сабОбщегоНазначенияПереопределяемый.ДействияПриСозданииФормыСправочника(Форма, Параметры);
	
КонецПроцедуры

Процедура ДействияПриСозданииФормыДокумента(Форма, СкрыватьПодразделения = Истина, ДопПараметры = Неопределено) Экспорт
	
	ЭтоОбъект = Ложь;
	ЭтоКопирование = Ложь;
	Если Лев(Форма.ИмяФормы, 5) = "Отчет" Тогда
		Объект = Форма.Отчет;
	ИначеЕсли Форма.Параметры.Свойство("Ключ") Тогда //попробуем так отловить форму документа
		Объект = Форма.Объект;
		ЭтоОбъект = Истина;
		Если ТипЗнч(ДопПараметры) = Тип("Структура") И ДопПараметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(ДопПараметры.ЗначениеКопирования) Тогда
			ЭтоКопирование = Истина;		
		КонецЕсли;
	ИначеЕсли Лев(Форма.ИмяФормы, 9) = "Обработка" Тогда
		Объект = Форма.Объект;
	Иначе
		Объект = Неопределено;
	КонецЕсли;
	
	ПодставлятьЗначения = Ложь;
	Если НЕ Объект = Неопределено Тогда
		Если Объект.Свойство("Ссылка") Тогда
			Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
				ПодставлятьЗначения = Истина;
				// +  Ничуговская 11.02.2020
				Иначе
				сабОбщегоНазначения.ПроверитьФормуНаДатуЗапрета(Форма);
				// -  Ничуговская
			КонецЕсли;
		Иначе
			ПодставлятьЗначения = Истина;	
		КонецЕсли;
	КонецЕсли;
	
	ОперативныйУчет = Ложь;
	
	Если ПодставлятьЗначения Тогда
		
		ЗаполнятьОрганизацию = Объект.Свойство("Организация") И (НЕ ЗначениеЗаполнено(Объект.Организация) ИЛИ ЗначениеЗаполнено(ПараметрыСеанса.ТекущееПредприятие));
		
		Если НЕ (ЭтоКопирование ИЛИ ?(Форма.Параметры.Свойство("Основание"),ЗначениеЗаполнено(Форма.Параметры.Основание),ЛОЖЬ)) Тогда
			
			//видимость реквизита "предприятие" на форме
			Если ЗначениеЗаполнено(ПараметрыСеанса.ТекущееПредприятие) Тогда
				Если Объект.Свойство("Предприятие") Тогда
					Объект.Предприятие = ПараметрыСеанса.ТекущееПредприятие;		
					Если Объект.Свойство("Организация") И ЗаполнятьОрганизацию Тогда
						Объект.Организация = Объект.Предприятие.ОсновнаяОрганизация;					
					КонецЕсли;
				ИначеЕсли Объект.Свойство("Организация") И ЗаполнятьОрганизацию Тогда	
					Объект.Организация = ПараметрыСеанса.ТекущееПредприятие;		
				КонецЕсли;
			КонецЕсли;
			
			//видимость реквизита "подразделение" на форме
			Если ЗначениеЗаполнено(ПараметрыСеанса.ТекущееПодразделение) Тогда
				Если Объект.Свойство("ВидДеятельности") Тогда
					Объект.ВидДеятельности = ПараметрыСеанса.ТекущееПодразделение;
					Если Объект.Свойство("Организация") Тогда
						ОрганизацияСсылка = Объект.ВидДеятельности.Организация;
						Если ЗначениеЗаполнено(ОрганизацияСсылка) И ЗаполнятьОрганизацию Тогда
							Объект.Организация = ОрганизацияСсылка;					
						КонецЕсли; 
					КонецЕсли;
				КонецЕсли;
				Если Объект.Свойство("Подразделение") Тогда
					Объект.Подразделение = ПараметрыСеанса.ТекущееПодразделение;
					Если Объект.Свойство("Организация") Тогда
						ОрганизацияСсылка = Объект.Подразделение.Организация;
						Если ЗначениеЗаполнено(ОрганизацияСсылка) И ЗаполнятьОрганизацию Тогда
							Объект.Организация = ОрганизацияСсылка;					
						КонецЕсли; 
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если Объект.Свойство("ВидДеятельности") Тогда
					Если Не ЗначениеЗаполнено(Объект.ВидДеятельности) И ЗначениеЗаполнено(ПараметрыСеанса.ТекущееПредприятие) И НЕ ПараметрыСеанса.ТекущееПредприятие.УчетПоПодразделениям Тогда
						Объект.ВидДеятельности = ПараметрыСеанса.ТекущееПредприятие.ВидДеятельности;
					КонецЕсли;
					Если ЗначениеЗаполнено(Объект.ВидДеятельности) Тогда
						Если Объект.Свойство("Организация") Тогда
							ОрганизацияСсылка = Объект.ВидДеятельности.Организация;
							Если ЗначениеЗаполнено(ОрганизацияСсылка) И ЗаполнятьОрганизацию Тогда
								Объект.Организация = ОрганизацияСсылка;					
							КонецЕсли; 
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если Объект.Свойство("Подразделение") Тогда
					Если Не ЗначениеЗаполнено(Объект.Подразделение) И ЗначениеЗаполнено(ПараметрыСеанса.ТекущееПредприятие) И НЕ ПараметрыСеанса.ТекущееПредприятие.УчетПоПодразделениям Тогда
						Объект.Подразделение = ПараметрыСеанса.ТекущееПредприятие.ВидДеятельности;
					КонецЕсли;
					Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
						Если Объект.Свойство("Организация") Тогда
							ОрганизацияСсылка = Объект.Подразделение.Организация;
							Если ЗначениеЗаполнено(ОрганизацияСсылка) И ЗаполнятьОрганизацию Тогда
								Объект.Организация = ОрганизацияСсылка;					
							КонецЕсли; 
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;

		
		Если ЭтоОбъект Тогда
			//добавим на форму группу, на которой будут отображаться статус объекта: пометка удаления, проведен
			сабОбщегоНазначения.ОтобразитьСостояниеДокумента(Форма);  
			
			//Глобальная дата запрета
			сабОбщегоНазначения.ПроверитьФормуНаДатуЗапрета(Форма);
		КонецЕсли;
		
	КонецЕсли;
	
	
	//установка видимости подразделения
	Если СкрыватьПодразделения Тогда
		сабОбщегоНазначенияКлиентСервер.СкрытьПодразделения(Форма);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыСеанса.ТекущееПредприятие) Тогда
		сабОбщегоНазначенияКлиентСервер.СкрытьПредприятие(Форма, ПараметрыСеанса.ТекущийПользователь);
		//сабОбщегоНазначенияКлиентСервер.СкрытьОрганизацию(Форма);
	КонецЕсли;
	
	//устанавливаем связи параметров выбора
	Если НЕ Объект = Неопределено И Объект.Свойство("Договор") Тогда
		Если НЕ Форма.Элементы.Найти("Договор") = Неопределено Тогда
			МассивПараметровВыбора = Новый Массив;
			МассивПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Контрагент", РежимИзмененияСвязанногоЗначения.Очищать));
			Если Объект.Свойство("Организация") И ЗначениеЗаполнено(Объект.Организация) И ОперативныйУчет Тогда
				МассивПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация", РежимИзмененияСвязанногоЗначения.Очищать));
			Иначе
				МассивПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Предприятие", "Объект.Предприятие", РежимИзмененияСвязанногоЗначения.Очищать));
			КонецЕсли;
			Форма.Элементы.Договор.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
		КонецЕсли;
	КонецЕсли;
	
	//ПараметрыВыбора в реквизиты. д1 16.02.18
	Если НЕ Объект = Неопределено И Объект.Свойство("Ссылка") Тогда
		Если Форма.Параметры.Свойство("ПараметрыВыбора") Тогда
			Для каждого ТекСтрока Из Форма.Параметры.ПараметрыВыбора Цикл
				Если Форма.Объект.Свойство(ТекСтрока.Ключ) Тогда
					МетаданныеОбекта = Объект.Ссылка.Метаданные();
					ЭтоСтандартныйРеквизит = Ложь;
					Для каждого текРеквизит Из МетаданныеОбекта.СтандартныеРеквизиты Цикл
						Если текРеквизит.Имя = ТекСтрока.Ключ Тогда
							ЭтоСтандартныйРеквизит = Истина	
						КонецЕсли;
					КонецЦикла;
					Если Не ЭтоСтандартныйРеквизит Тогда
						Форма.Объект[ТекСтрока.Ключ] = ТекСтрока.Значение;		
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;//конец параметров
	
	ДобавитьУсловноеОформление(Форма, Объект);
	
	ДобавитьОбщиеРеквизиты(Форма, Объект, ДопПараметры);
	
	сабОбщегоНазначенияПереопределяемый.ДействияПриСозданииФормыДокумента(Форма, Объект);
	
	Если НЕ Объект = Неопределено И Объект.Свойство("Ссылка") И Объект.Свойство("Дата") Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
			Форма.Объект.Дата = ОбщегоНазначения.ТекущаяДатаПользователя();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Если УЧ_Сервер.ДатаБлокировкиИзмененияДокументов(Форма.Объект.Предприятие)>Форма.Объект.Дата  Тогда
				БюджетныйНаСервере.ФормаТолькоПросмотр(Объект,Форма,Истина,Истина);
				//Разрешение команд печати
				Для каждого ТекЭлемент Из Форма.Элементы Цикл
					Если ТипЗнч(ТекЭлемент) = Тип("ГруппаФормы") ИЛИ ТипЗнч(ТекЭлемент) = Тип("ДекорацияФормы") Тогда
						Продолжить;
					КонецЕсли;
					Если Найти(ТекЭлемент.Родитель.Заголовок,"Печать") <> 0 Тогда
						Попытка
							ТекЭлемент.ТолькоПросмотр = Ложь;
						Исключение
						КонецПопытки;
						ТекЭлемент.Доступность = Истина;						
					КонецЕсли;
					
					Если Лев(Форма.ИмяФормы,11) = "Документ.Д_"	Тогда
						Если ТекЭлемент.Имя = "СправочникФайлыПрикрепленныеФайлы" Тогда
							ТекЭлемент.Доступность = Истина;
						КонецЕсли;				
					КонецЕсли;
					
				КонецЦикла;
				//
			КонецЕсли;			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьУсловноеОформление(Форма, Объект, ЦиклОбхода = 0)
	Если Объект = Неопределено ИЛИ НЕ Объект.Свойство("Ссылка") Тогда
		Возврат;	
	КонецЕсли;
	
	ИмяПоляКорсубконто1Доступность = "";
	ИмяЭлементаКорСубконто1 = "";
	ИмяРеквизитаКорСубконто1 = "";
	ИмяПоляКорсубконто2Доступность = "";
	ИмяЭлементаКорСубконто2 = "";
	ИмяРеквизитаКорСубконто2 = "";
	ИмяПоляКорсубконто3Доступность = "";
	ИмяЭлементаКорСубконто3 = "";
	ИмяРеквизитаКорСубконто3 = "";
	ИмяПоляКоличествоДоступность = "";
	ИмяЭлементаКоличество = "";
	ИмяЭлементаЦена = "";
	ИмяПоляПодразделениеДоступность = "";
	ИмяЭлементаПодразделение = "";
	ИмяРеквизитаПодразделение = "";
	ИмяПоляВалютаДоступность = "";
	ИмяЭлементаВалюта = "";
	ИмяРеквизитаВалюта = "";
	ИмяЭлементаВалютаКурс = "";
	ИмяРеквизитаВалютаКурс = "";
	ИмяЭлементаВалютаСумма = "";
	ИмяРеквизитаВалютаКурс = "";

	ИмяСвойста = "";
	ЗначениеСвойства = Ложь;
	
	// условное оформление только просмотр
	НужноОформитьТипСписания = Ложь;
	ЕстьВалюта = Ложь;
	ИмяРеквизитаСчет = "";
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.УЧ_АвансовыйОтчет") Тогда
		ИмяПоляКорсубконто1Доступность = "Объект.ТабличнаяЧасть.КорСубконто1Доступность";
		ИмяЭлементаКорСубконто1 = "ТабличнаяЧастьКорСубконто1";
		ИмяРеквизитаКорСубконто1 = "Объект.ТабличнаяЧасть.КорСубконто1";
		ИмяПоляКорсубконто2Доступность = "Объект.ТабличнаяЧасть.КорСубконто2Доступность";
		ИмяЭлементаКорСубконто2 = "ТабличнаяЧастьКорСубконто2";
		ИмяЭлементаКорСубконто2ВладелецРазличен = "ТабличнаяЧастьКорСубконто2БезВладельца";
		ИмяРеквизитаКорСубконто2 = "Объект.ТабличнаяЧасть.КорСубконто2";
		ИмяПоляКорсубконто3Доступность = "Объект.ТабличнаяЧасть.КорСубконто3Доступность";
		ИмяЭлементаКорСубконто3 = "ТабличнаяЧастьКорСубконто3";
		ИмяРеквизитаКорСубконто3 = "Объект.ТабличнаяЧасть.КорСубконто3";
		ИмяПоляКоличествоДоступность = "Объект.ТабличнаяЧасть.КоличествоДоступность";
		ИмяЭлементаКоличество = "ТабличнаяЧастьКоличество";
		ИмяЭлементаЦена = "ТабличнаяЧастьЦена";
		ИмяПоляПодразделениеДоступность = "Объект.ТабличнаяЧасть.ПодразделениеДоступность";
		ИмяЭлементаПодразделение = "ПодразделениеКт";
		ИмяРеквизитаПодразделение = "Объект.ТабличнаяЧасть.КорПодразделение";
		ИмяСвойста = "ТолькоПросмотр";
		ЗначениеСвойства = Истина;
		НужноОформитьТипСписания = Истина;
		
		ЭлементОформления  = Форма.УсловноеОформление.Элементы.Добавить();
		ЭлементОформления.Использование = Истина;
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоляКорсубконто2Доступность); // имя поля
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; // либо задаем свой
		ЭлементОтбора.ПравоеЗначение = Истина;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизитаКорСубконто2); // имя поля
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено; // либо задаем свой
		ЭлементОтбора.Использование = Истина;
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", "<...>");
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Ложь);
		//ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(128,128,128));
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлементаКорСубконто2ВладелецРазличен);
		ПолеОформления.Использование = Истина;
		
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.УЧ_ДвижениеДС") Тогда
		
		Если ЦиклОбхода = 0 Тогда
			ИмяПоляКорсубконто1Доступность = "Объект.Проводки.КорСубконто1Доступность";
			ИмяЭлементаКорСубконто1 = "ПроводкиСубконто1Дебет";
			ИмяРеквизитаКорСубконто1 = "Объект.Проводки.КорСубконто1";
			ИмяПоляКорсубконто2Доступность = "Объект.Проводки.КорСубконто2Доступность";
			ИмяЭлементаКорСубконто2 = "ПроводкиСубконто2Дебет";
			ИмяЭлементаКорСубконто2ВладелецРазличен = "ПроводкиКорСубконто2БезВладельца";
			ИмяРеквизитаКорСубконто2 = "Объект.Проводки.КорСубконто2";
			ИмяПоляКорсубконто3Доступность = "Объект.Проводки.КорСубконто3Доступность";
			ИмяЭлементаКорСубконто3 = "ПроводкиСубконто3Дебет";
			ИмяРеквизитаКорСубконто3 = "Объект.Проводки.КорСубконто3";
			ИмяПоляКоличествоДоступность = "Объект.Проводки.КоличествоДоступность";
			ИмяЭлементаКоличество = "ПроводкиКоличество";
			ИмяЭлементаЦена = "ПроводкиКоличество";
			ИмяПоляПодразделениеДоступность = "Объект.Проводки.ПодразделениеДоступность";
			ИмяЭлементаПодразделение = "ПроводкиПодразделение";
			ИмяРеквизитаПодразделение = "Объект.Проводки.Подразделение";
			ИмяПоляВалютаДоступность = "Объект.Проводки.КорВалСуммаДоступность";
			ИмяЭлементаВалюта = "ПроводкиВалюта";
			ИмяРеквизитаВалюта = "Объект.Проводки.Валюта";
			//ИмяЭлементаВалютаКурс = "ПроводкиКурс";
			//ИмяРеквизитаВалютаКурс = "Объект.Проводки.Курс";
			ИмяЭлементаВалютаСумма = "ПроводкиВалСумма";
			ИмяРеквизитаВалютаКурс = "Объект.Проводки.КорВалСумма";
			ИмяСвойста = "ТолькоПросмотр";
			ЗначениеСвойства = Истина;
			ЕстьВалюта = Истина;
			ИмяРеквизитаСчет = "Объект.Проводки.КорСчет";
			
			ЭлементОформления  = Форма.УсловноеОформление.Элементы.Добавить();
			ЭлементОформления.Использование = Истина;
			ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоляКорсубконто2Доступность); // имя поля
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; // либо задаем свой
			ЭлементОтбора.ПравоеЗначение = Истина;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Проводки.КорСубконто2БезВладельца"); // имя поля
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено; // либо задаем свой
			ЭлементОтбора.Использование = Истина;
			ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", "<...>");
			ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Ложь);
			//ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(128,128,128));
			ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
			ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлементаКорСубконто2ВладелецРазличен);
			ПолеОформления.Использование = Истина;
			
			ДобавитьУсловноеОформление(Форма, Объект, 1);
			
		ИначеЕсли ЦиклОбхода = 1 Тогда
			ИмяПоляКорсубконто1Доступность = "Объект.Проводки.КорСубконтоУслуг1Доступность";
			ИмяЭлементаКорСубконто1 = "ПроводкиКорСубконтоУслугТЧ1";
			ИмяРеквизитаКорСубконто1 = "Объект.Проводки.КорСубконтоУслуг1";
			ИмяПоляКорсубконто2Доступность = "Объект.Проводки.КорСубконтоУслуг2Доступность";
			ИмяЭлементаКорСубконто2 = "ПроводкиКорСубконтоУслугТЧ2";
			ИмяЭлементаКорСубконто2ВладелецРазличен = "";
			ИмяРеквизитаКорСубконто2 = "Объект.Проводки.КорСубконтоУслуг2";
			ИмяПоляКорсубконто3Доступность = "Объект.Проводки.КорСубконтоУслуг3Доступность";
			ИмяЭлементаКорСубконто3 = "ПроводкиКорСубконтоУслугТЧ3";
			ИмяРеквизитаКорСубконто3 = "Объект.Проводки.КорСубконтоУслуг3";
			ИмяПоляКоличествоДоступность = "";
			ИмяЭлементаКоличество = "";
			ИмяЭлементаЦена = "";
			ИмяПоляПодразделениеДоступность = "";
			ИмяЭлементаПодразделение = "";
			ИмяРеквизитаПодразделение = "";
			ИмяСвойста = "Видимость";
			ЗначениеСвойства = Ложь;
			ДобавитьУсловноеОформление(Форма, Объект, 2);
		ИначеЕсли ЦиклОбхода = 2 Тогда
			ИмяПоляКорсубконто1Доступность = "Объект.Проводки.КорСубконто791Доступность";
			ИмяЭлементаКорСубконто1 = "ПроводкиКорСубконто794";
			ИмяРеквизитаКорСубконто1 = "Объект.Проводки.КорСубконто791";
			ИмяПоляКорсубконто2Доступность = "Объект.Проводки.КорСубконто792Доступность";
			ИмяЭлементаКорСубконто2 = "ПроводкиКорСубконто795";
			ИмяЭлементаКорСубконто2ВладелецРазличен = "";
			ИмяРеквизитаКорСубконто2 = "Объект.Проводки.КорСубконто792";
			ИмяПоляКорсубконто3Доступность = "Объект.Проводки.КорСубконто793Доступность";
			ИмяЭлементаКорСубконто3 = "ПроводкиКорСубконто793";
			ИмяРеквизитаКорСубконто3 = "Объект.Проводки.КорСубконто793";
			ИмяПоляКоличествоДоступность = "";
			ИмяЭлементаКоличество = "";
			ИмяЭлементаЦена = "";
			ИмяПоляПодразделениеДоступность = "";
			ИмяЭлементаПодразделение = "";
			ИмяРеквизитаПодразделение = "";
			ИмяСвойста = "Видимость";
			ЗначениеСвойства = Ложь;
	
		КонецЕсли;
		
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.УЧ_ПеремещениеМатериаловВПроизводство") ИЛИ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.УЧ_НачислениеЗП") Тогда
		ИмяПоляКорсубконто1Доступность = "Объект.ТабличнаяЧасть.КорСубконто1Доступность";
		ИмяЭлементаКорСубконто1 = "ТабличнаяЧастьКорСубконто1";
		ИмяРеквизитаКорСубконто1 = "Объект.ТабличнаяЧасть.КорСубконто1";
		ИмяПоляКорсубконто2Доступность = "Объект.ТабличнаяЧасть.КорСубконто2Доступность";
		ИмяЭлементаКорСубконто2 = "ТабличнаяЧастьКорСубконто2";
		ИмяРеквизитаКорСубконто2 = "Объект.ТабличнаяЧасть.КорСубконто2";
		ИмяПоляКорсубконто3Доступность = "Объект.ТабличнаяЧасть.КорСубконто3Доступность";
		ИмяЭлементаКорСубконто3 = "ТабличнаяЧастьКорСубконто3";
		ИмяРеквизитаКорСубконто3 = "Объект.ТабличнаяЧасть.КорСубконто3";
		ИмяПоляКоличествоДоступность = "Объект.ТабличнаяЧасть.КоличествоДоступность";
		ИмяЭлементаКоличество = "ТабличнаяЧастьКоличество";
		ИмяЭлементаЦена = "ТабличнаяЧастьЦена";
		ИмяПоляПодразделениеДоступность = "Объект.ТабличнаяЧасть.КорПодразделениеДоступность";
		ИмяЭлементаПодразделение = "ТабличнаяЧастьКорПодразделение";
		ИмяРеквизитаПодразделение = "Объект.ТабличнаяЧасть.КорПодразделение";
		ИмяСвойста = "Видимость";
		ЗначениеСвойства = Ложь;
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.УЧ_ПоступлениеТоваров") Тогда
		ИмяПоляКорсубконто1Доступность = "Объект.Услуги.Субконто1Доступность";
		ИмяЭлементаКорСубконто1 = "УслугиСубконто1";
		ИмяРеквизитаКорСубконто1 = "Объект.Услуги.Субконто1";
		ИмяПоляКорсубконто2Доступность = "Объект.Услуги.Субконто2Доступность";
		ИмяЭлементаКорСубконто2 = "УслугиСубконто2";
		ИмяРеквизитаКорСубконто2 = "Объект.Услуги.Субконто2";
		ИмяПоляКорсубконто3Доступность = "Объект.Услуги.Субконто3Доступность";
		ИмяЭлементаКорСубконто3 = "УслугиСубконто3";
		ИмяРеквизитаКорСубконто3 = "Объект.Услуги.Субконто3";
		ИмяПоляКоличествоДоступность = "Объект.Услуги.КоличествоДоступность";
		ИмяЭлементаКоличество = "ТабличнаяЧастьКоличество";
		ИмяЭлементаЦена = "ТабличнаяЧастьЦена";
		ИмяПоляПодразделениеДоступность = "Объект.Услуги.ПодразделениеДоступность";
		ИмяЭлементаПодразделение = "УслугиПодразделение";
		ИмяРеквизитаПодразделение = "Объект.Услуги.Подразделение";
		ИмяСвойста = "Видимость";
		ЗначениеСвойства = Ложь;
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.УЧ_Реализация") Тогда
		
		Если ЦиклОбхода = 0 Тогда
			
			ИмяПоляКорсубконто1Доступность = "Объект.Услуги.Субконто1Доступность";
			ИмяЭлементаКорСубконто1 = "УслугиНоменклатура";
			ИмяРеквизитаКорСубконто1 = "Объект.Услуги.Номенклатура";
			ИмяПоляКорсубконто2Доступность = "Объект.Услуги.Субконто2Доступность";
			ИмяЭлементаКорСубконто2 = "УслугиСубконто2";
			ИмяРеквизитаКорСубконто2 = "Объект.Услуги.Субконто2";
			ИмяПоляКорсубконто3Доступность = "Объект.Услуги.Субконто3Доступность";
			ИмяЭлементаКорСубконто3 = "УслугиСубконто3";
			ИмяРеквизитаКорСубконто3 = "Объект.Услуги.Субконто3";
			ИмяПоляКоличествоДоступность = "Объект.Услуги.КоличествоДоступность";
			ИмяЭлементаКоличество = "УслугиКоличество";
			ИмяЭлементаЦена = "УслугиЦена";
			ИмяПоляПодразделениеДоступность = "Объект.Услуги.ПодразделениеДоступность";
			ИмяЭлементаПодразделение = "УслугиПодразделение";
			ИмяРеквизитаПодразделение = "Объект.Услуги.Подразделение";
			ИмяСвойста = "Видимость";
			ЗначениеСвойства = Ложь;
			
			ДобавитьУсловноеОформление(Форма, Объект, 1);
			
		ИначеЕсли ЦиклОбхода = 1 Тогда
			
			ИмяПоляКорсубконто1Доступность = "Объект.ПрочиеНачисления.Субконто1Доступность";
			ИмяЭлементаКорСубконто1 = "ВерхиСубконто1";
			ИмяРеквизитаКорСубконто1 = "Объект.ПрочиеНачисления.Субконто1";
			ИмяПоляКорсубконто2Доступность = "Объект.ПрочиеНачисления.Субконто2Доступность";
			ИмяЭлементаКорСубконто2 = "ВерхиСубконто2";
			ИмяРеквизитаКорСубконто2 = "Объект.ПрочиеНачисления.Субконто2";
			ИмяПоляКорсубконто3Доступность = "Объект.ПрочиеНачисления.Субконто3Доступность";
			ИмяЭлементаКорСубконто3 = "ВерхиСубконто3";
			ИмяРеквизитаКорСубконто3 = "Объект.ПрочиеНачисления.Субконто3";
			ИмяПоляКоличествоДоступность = "";
			ИмяЭлементаКоличество = "";
			ИмяЭлементаЦена = "";
			ИмяПоляПодразделениеДоступность = "Объект.ПрочиеНачисления.ПодразделениеДоступность";
			ИмяЭлементаПодразделение = "ВерхиПодразделение";
			ИмяРеквизитаПодразделение = "Объект.ПрочиеНачисления.Подразделение";
			ИмяСвойста = "Видимость";
			ЗначениеСвойства = Ложь;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.УЧ_ВзаимозачетыПредприятий") Тогда
		ИмяПоляКорсубконто1Доступность = "Объект.Состав.КорСубконто1Доступность";
		ИмяЭлементаКорСубконто1 = "СоставСубконто1";
		ИмяРеквизитаКорСубконто1 = "Объект.Состав.КорСубконто1";
		ИмяПоляКорсубконто2Доступность = "Объект.Состав.КорСубконто2Доступность";
		ИмяЭлементаКорСубконто2 = "СоставСубконто2";
		ИмяРеквизитаКорСубконто2 = "Объект.Состав.КорСубконто2";
		ИмяПоляКорсубконто3Доступность = "Объект.Состав.КорСубконто3Доступность";
		ИмяЭлементаКорСубконто3 = "СоставСубконто3";
		ИмяРеквизитаКорСубконто3 = "Объект.Состав.КорСубконто3";
		ИмяПоляКоличествоДоступность = "Объект.Состав.КоличествоДоступность";
		ИмяЭлементаКоличество = "ТабличнаяЧастьКоличество";
		ИмяЭлементаЦена = "ТабличнаяЧастьЦена";
		ИмяПоляПодразделениеДоступность = "Объект.Состав.ПодразделениеДоступность";
		ИмяЭлементаПодразделение = "СоставПодразделение";
		ИмяРеквизитаПодразделение = "Объект.Состав.Подразделение";
		ИмяСвойста = "Видимость";
		ЗначениеСвойства = Ложь;
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.УЧ_СписаниеТоваров") Тогда
		ИмяПоляКорсубконто1Доступность = "Объект.ТабличнаяЧасть.Субконто1Доступность";
		ИмяЭлементаКорСубконто1 = "ТабличнаяЧастьСубконто1";
		ИмяРеквизитаКорСубконто1 = "Объект.ТабличнаяЧасть.Субконто1";
		ИмяПоляКорсубконто2Доступность = "Объект.ТабличнаяЧасть.Субконто2Доступность";
		ИмяЭлементаКорСубконто2 = "ТабличнаяЧастьСубконто2";
		ИмяРеквизитаКорСубконто2 = "Объект.ТабличнаяЧасть.Субконто2";
		ИмяПоляКорсубконто3Доступность = "Объект.ТабличнаяЧасть.Субконто3Доступность";
		ИмяЭлементаКорСубконто3 = "ТабличнаяЧастьСубконто3";
		ИмяРеквизитаКорСубконто3 = "Объект.ТабличнаяЧасть.Субконто2";
		ИмяПоляКоличествоДоступность = "Объект.ТабличнаяЧасть.КоличествоДоступность";
		ИмяЭлементаКоличество = "ТабличнаяЧастьКоличество";
		ИмяЭлементаЦена = "ТабличнаяЧастьЦена";
		ИмяПоляПодразделениеДоступность = "Объект.ТабличнаяЧасть.КорПодразделениеДоступность";
		ИмяЭлементаПодразделение = "ТабличнаяЧастьКорПодразделение";
		ИмяРеквизитаПодразделение = "Объект.ТабличнаяЧасть.КорПодразделение";
		ИмяСвойста = "Видимость";
		ЗначениеСвойства = Ложь;
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.УЧ_ОприходованиеТоваров") Тогда
		ИмяПоляКорсубконто1Доступность = "Объект.ТабличнаяЧасть.Субконто1Доступность";
		ИмяЭлементаКорСубконто1 = "ТабличнаяЧастьСубконто1";
		ИмяРеквизитаКорСубконто1 = "Объект.ТабличнаяЧасть.Субконто1";
		ИмяПоляКорсубконто2Доступность = "Объект.ТабличнаяЧасть.Субконто2Доступность";
		ИмяЭлементаКорСубконто2 = "ТабличнаяЧастьСубконто2";
		ИмяРеквизитаКорСубконто2 = "Объект.ТабличнаяЧасть.Субконто2";
		ИмяПоляКорсубконто3Доступность = "Объект.ТабличнаяЧасть.Субконто3Доступность";
		ИмяЭлементаКорСубконто3 = "ТабличнаяЧастьСубконто3";
		ИмяРеквизитаКорСубконто3 = "Объект.ТабличнаяЧасть.Субконто2";
		ИмяПоляКоличествоДоступность = "Объект.ТабличнаяЧасть.КоличествоДоступность";
		ИмяЭлементаКоличество = "ТабличнаяЧастьКоличество";
		ИмяЭлементаЦена = "ТабличнаяЧастьЦена";
		ИмяПоляПодразделениеДоступность = "Объект.ТабличнаяЧасть.КорПодразделениеДоступность";
		ИмяЭлементаПодразделение = "ТабличнаяЧастьКорПодразделение";
		ИмяРеквизитаПодразделение = "Объект.ТабличнаяЧасть.КорПодразделение";
		ИмяСвойста = "Видимость";
		ЗначениеСвойства = Ложь;
	//ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.УЧ_Закрытие25") Тогда
		
		//ИмяПоляКорсубконто1Доступность = "Объект.Номенклатура.Субконто1Доступность";
		//ИмяЭлементаКорСубконто1 = "НоменклатураСубконто1";
		//ИмяРеквизитаКорСубконто1 = "Объект.Номенклатура.Номенклатура";
		//ИмяПоляКорсубконто2Доступность = "Объект.Услуги.Субконто2Доступность";
		//ИмяЭлементаКорСубконто2 = "НоменклатураСубконто2";
		//ИмяРеквизитаКорСубконто2 = "Объект.Номенклатура.Субконто2";
		//ИмяПоляКорсубконто3Доступность = "Объект.Номенклатура.Субконто3Доступность";
		//ИмяЭлементаКорСубконто3 = "НоменклатураСубконто3";
		//ИмяРеквизитаКорСубконто3 = "Объект.Номенклатура.Субконто3";
		//ИмяПоляКоличествоДоступность = "Объект.Номенклатура.КоличествоДоступность";
		//ИмяЭлементаКоличество = "";
		//ИмяЭлементаЦена = "";
		//ИмяПоляПодразделениеДоступность = "Объект.Номенклатура.ПодразделениеДоступность";
		//ИмяЭлементаПодразделение = "УслугиПодразделение";
		//ИмяРеквизитаПодразделение = "Объект.Номенклатура.Подразделение";
		//ИмяСвойста = "Видимость";
		//ЗначениеСвойства = Ложь;
	Иначе
		Возврат;
	КонецЕсли;
	
	ЭлементОформления  = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоляКорсубконто1Доступность); // имя поля
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; // либо задаем свой
	ЭлементОтбора.ПравоеЗначение = Ложь;
	ЭлементОтбора.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлементаКорСубконто1);
	ПолеОформления.Использование = Истина;
	
	ЭлементОформления  = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоляКорсубконто2Доступность); // имя поля
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; // либо задаем свой
	ЭлементОтбора.ПравоеЗначение = Ложь;
	ЭлементОтбора.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра(ИмяСвойста, ЗначениеСвойства);
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлементаКорСубконто2);
	ПолеОформления.Использование = Истина;
	
	ЭлементОформления  = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоляКорсубконто3Доступность); // имя поля
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; // либо задаем свой
	ЭлементОтбора.ПравоеЗначение = Ложь;
	ЭлементОтбора.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра(ИмяСвойста, ЗначениеСвойства);
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлементаКорСубконто3);
	ПолеОформления.Использование = Истина;
	
	ЭлементОформления  = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоляКорсубконто1Доступность); // имя поля
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; // либо задаем свой
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизитаКорСубконто1); // имя поля
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено; // либо задаем свой
	ЭлементОтбора.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", "<...>");
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Ложь);
	//ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(128,128,128));
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлементаКорСубконто1);
	ПолеОформления.Использование = Истина;
	
	ЭлементОформления  = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоляКорсубконто2Доступность); // имя поля
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; // либо задаем свой
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизитаКорСубконто2); // имя поля
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено; // либо задаем свой
	ЭлементОтбора.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", "<...>");
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Ложь);
	//ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(128,128,128));
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлементаКорСубконто2);
	ПолеОформления.Использование = Истина;
	
	ЭлементОформления  = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоляКорсубконто3Доступность); // имя поля
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; // либо задаем свой
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизитаКорСубконто3); // имя поля
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено; // либо задаем свой
	ЭлементОтбора.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", "<...>");
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Ложь);
	//ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(128,128,128));
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлементаКорСубконто3);
	ПолеОформления.Использование = Истина;
	
	ЭлементОформления  = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоляКоличествоДоступность); // имя поля
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; // либо задаем свой
	ЭлементОтбора.ПравоеЗначение = Ложь;
	ЭлементОтбора.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра(ИмяСвойста, ЗначениеСвойства);
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлементаКоличество);
	ПолеОформления.Использование = Истина;
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлементаЦена);
	ПолеОформления.Использование = Истина;
	
	ЭлементОформления  = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоляПодразделениеДоступность); // имя поля
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; // либо задаем свой
	ЭлементОтбора.ПравоеЗначение = Ложь;
	ЭлементОтбора.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлементаПодразделение);
	ПолеОформления.Использование = Истина;
	
	//ЭлементОформления  = Форма.УсловноеОформление.Элементы.Добавить();
	//ЭлементОформления.Использование = Истина;
	//ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоляПодразделениеДоступность); // имя поля
	//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; // либо задаем свой
	//ЭлементОтбора.ПравоеЗначение = Истина;
	//ЭлементОтбора.Использование = Истина;
	//ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	//ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	//ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлементаПодразделение);
	//ПолеОформления.Использование = Истина;
	
	
	ЭлементОформления  = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоляПодразделениеДоступность); // имя поля
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; // либо задаем свой
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизитаПодразделение); // имя поля
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено; // либо задаем свой
	ЭлементОтбора.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", "<...>");
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Ложь);
	//ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(128,128,128));
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлементаПодразделение);
	ПолеОформления.Использование = Истина;
	
	Если НужноОформитьТипСписания Тогда
		
		ЭлементОформления  = Форма.УсловноеОформление.Элементы.Добавить();
		ЭлементОформления.Использование = Истина;
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТабличнаяЧасть.ТипСписания"); // имя поля
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; // либо задаем свой
		ЭлементОтбора.ПравоеЗначение = ПредопределенноеЗначение("Перечисление.сабТипыНоменклатуры.Материалы");
		ЭлементОтбора.Использование = Истина;
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ТабличнаяЧастьКорСчет");
		ПолеОформления.Использование = Истина;		
		
	КонецЕсли;
	
	Если ЕстьВалюта Тогда
		
		ЭлементОформления  = Форма.УсловноеОформление.Элементы.Добавить();
		ЭлементОформления.Использование = Истина;
		ЭлементОтбораГруппа = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ЭлементОтбораГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
		
		ЭлементОтбора = ЭлементОтбораГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоляВалютаДоступность); // имя поля
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; // либо задаем свой
		ЭлементОтбора.ПравоеЗначение = Ложь;
		ЭлементОтбора.Использование = Истина;
		
		ЭлементОтбора = ЭлементОтбораГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизитаСчет); // имя поля
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено; // либо задаем свой
		ЭлементОтбора.Использование = Истина;
		
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлементаВалюта);
		ПолеОформления.Использование = Истина;
		//ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		//ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		//ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлементаВалютаКурс);
		//ПолеОформления.Использование = Истина;
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлементаВалютаСумма);
		ПолеОформления.Использование = Истина;
		
		
		ЭлементОформления  = Форма.УсловноеОформление.Элементы.Добавить();
		ЭлементОформления.Использование = Истина;
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоляВалютаДоступность); // имя поля
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; // либо задаем свой
		ЭлементОтбора.ПравоеЗначение = Истина;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизитаВалюта); // имя поля
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено; // либо задаем свой
		ЭлементОтбора.Использование = Истина;
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", "<...>");
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Ложь);
		//ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(128,128,128));
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлементаВалюта);
		ПолеОформления.Использование = Истина;
		
	КонецЕсли;
	
	
	
КонецПроцедуры

Процедура ДобавитьОбщиеРеквизиты(Форма, Объект, ДопПараметры) Экспорт
	
	Если Объект = Неопределено ИЛИ НЕ Объект.Свойство("Ссылка") Тогда
		Возврат;	
	КонецЕсли;
	
	Если ТипЗнч(ДопПараметры) = Тип("Структура") И ДопПараметры.Свойство("ОбщиеРеквизитыНеПеремещать") И ДопПараметры.ОбщиеРеквизитыНеПеремещать Тогда
		Возврат;	
	КонецЕсли;
			
	ЕстьСвойствоКомментарий = Объект.Свойство("Комментарий");
	ЕстьСвойствоАвтор = Объект.Свойство("Автор");
	
	Родитель = Форма;
	//Если (ЕстьСвойствоКомментарий И Форма.Элементы.Найти("Комментарий") = Неопределено) И (ЕстьСвойствоАвтор И Форма.Элементы.Найти("Автор") = Неопределено) Тогда
	
	Если Форма.Элементы.Найти("саб_ГруппаФормыОбщРекв") = Неопределено Тогда
		
		НоваяКнопка = Форма.Элементы.Добавить("саб_ГруппаФормыОбщРекв", Тип("ГруппаФормы"), );
		НоваяКнопка.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		//НоваяКнопка.Заголовок = ТекПодсистема.Синоним;
		НоваяКнопка.ОтображатьЗаголовок = Ложь;
		НоваяКнопка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		НоваяКнопка.Отображение = ОтображениеОбычнойГруппы.Нет;
		
		Родитель = НоваяКнопка;
		//КонецЕсли;
		
		Если ЕстьСвойствоКомментарий Тогда
			Если Форма.Элементы.Найти("Комментарий") = Неопределено  Тогда
				ЭлементФормыНовый = Форма.Элементы.Вставить("саб_ЭлементКомментарий", Тип("ПолеФормы"), Родитель); 
				ЭлементФормыНовый.ПутьКДанным = "Объект.Комментарий";
				ЭлементФормыНовый.Заголовок = "Комментарий";
				ЭлементФормыНовый.Вид = ВидПоляФормы.ПолеВвода;
			Иначе
				Форма.Элементы.Переместить(Форма.Элементы.Комментарий, Родитель);
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьСвойствоАвтор  Тогда
			Если Форма.Элементы.Найти("Автор") = Неопределено Тогда
				ЭлементФормыНовый = Форма.Элементы.Вставить("саб_ЭлементАвтор", Тип("ПолеФормы"), Родитель); 
				ЭлементФормыНовый.ПутьКДанным = "Объект.Автор";
				ЭлементФормыНовый.Заголовок = "Автор";
				ЭлементФормыНовый.Вид = ВидПоляФормы.ПолеНадписи;
				ЭлементФормыНовый.Гиперссылка = Истина;
			Иначе
				Форма.Элементы.Переместить(Форма.Элементы.Автор, Родитель);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
				Форма.Объект.Автор = ПараметрыСеанса.ТекущийПользователь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	//если есть БУ док
	Если ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Форма.Параметры.Свойство("ДокументБУ") Тогда
		
		ДобавляемыеРеквизиты	= Новый Массив;
		Если Не ЕстьСвойствоОбъекта(Форма, "ДокументБУ") Тогда
			Реквизит_ДокументБУ = Новый РеквизитФормы("ДокументБУ",	Документы.ТипВсеСсылки(),	, "Документ БУ");
			ДобавляемыеРеквизиты.Добавить(Реквизит_ДокументБУ);
			Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		КонецЕсли;	
		
		МассТип = Новый Массив;
		МассТип.Добавить(Тип("Булево"));
		ТипБулево = Новый ОписаниеТипов(МассТип);
		
		ДобавляемыеРеквизиты	= Новый Массив;
		Если Не ЕстьСвойствоОбъекта(Форма, "АвтообновленияЗаблокированы") Тогда
			Реквизит_АвтообновленияЗаблокированы = Новый РеквизитФормы("АвтообновленияЗаблокированы", ТипБулево,	, "Автообновления заблокированы");
			ДобавляемыеРеквизиты.Добавить(Реквизит_АвтообновленияЗаблокированы);
			Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		КонецЕсли;	

		НаборЗаписей = РегистрыСведений.сабОбработкаДокументов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументУУ.Установить(Объект.Ссылка);
		НаборЗаписей.Прочитать();
		Для каждого ТекЗапись Из НаборЗаписей Цикл
			
			Если Не ТипЗнч(ТекЗапись.ДокументУУ) = ТипЗнч(Объект.Ссылка) Тогда
				Прервать;
			КонецЕсли;
			
			Если Форма.Элементы.Найти("ГруппаДокументБУ") = Неопределено Тогда
				
				Группа = Форма.Элементы.Добавить(
				"ГруппаДокументБУ",
				Тип("ГруппаФормы"),
				Форма);
				
				Группа.Заголовок = "Документ-основание БУ";
				Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
				Группа.Поведение  = ПоведениеОбычнойГруппы.Свертываемая;
				Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
				Группа.ОтображениеУправления = ОтображениеУправленияОбычнойГруппы.Картинка;
				Группа.Отображение = ОтображениеОбычнойГруппы.Нет;
				
				НовыйЭлемент = Форма.Элементы.Добавить("ДокументБУ", Тип("ПолеФормы"), Группа);
				НовыйЭлемент.ПутьКДанным                  = "ДокументБУ";
				НовыйЭлемент.Вид                          = ВидПоляФормы.ПолеНадписи;
				НовыйЭлемент.Гиперссылка 				  = Истина;
				
				Форма.ДокументБУ = ТекЗапись.ДокументБУ;
				
				НовыйЭлемент = Форма.Элементы.Добавить("АвтообновленияЗаблокированы", Тип("ПолеФормы"), Группа);
				НовыйЭлемент.ПутьКДанным                  = "АвтообновленияЗаблокированы";
				НовыйЭлемент.Вид                          = ВидПоляФормы.ПолеФлажка;
				НовыйЭлемент.ВидФлажка                    = ВидФлажка.Выключатель;
				НовыйЭлемент.ПоложениеЗаголовка 		  = ПоложениеЗаголовкаЭлементаФормы.Право;
				
				Форма.АвтообновленияЗаблокированы = ТекЗапись.АвтообновленияЗаблокированы;
				
				сабОбщегоНазначенияБУХ.ДобавитьИсториюИзмененийБУХДока(Форма,Группа);
				
			КонецЕсли;
			
			Прервать;
			
		КонецЦикла;
		
		Если Не НаборЗаписей.Количество() И Форма.Параметры.Свойство("ДокументБУ") Тогда
		
			Если Форма.Элементы.Найти("ГруппаДокументБУ") = Неопределено Тогда
				
				Группа = Форма.Элементы.Добавить(
				"ГруппаДокументБУ",
				Тип("ГруппаФормы"),
				Форма);
				
				Группа.Заголовок = "Документ-основание БУ";
				Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
				Группа.Поведение  = ПоведениеОбычнойГруппы.Свертываемая;
				Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
				Группа.ОтображениеУправления = ОтображениеУправленияОбычнойГруппы.Картинка;
				Группа.Отображение = ОтображениеОбычнойГруппы.Нет;
				
				НовыйЭлемент = Форма.Элементы.Добавить("ДокументБУ", Тип("ПолеФормы"), Группа);
				НовыйЭлемент.ПутьКДанным                  = "ДокументБУ";
				НовыйЭлемент.Вид                          = ВидПоляФормы.ПолеНадписи;
				НовыйЭлемент.Гиперссылка 				  = Истина;
				
				Форма.ДокументБУ = Форма.Параметры.ДокументБУ;
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьСвойствоОбъекта(Объект, ИмяСвойства) Экспорт
    ЕстьСвоство = Ложь;
    
    Структура = Новый Структура(ИмяСвойства, Неопределено);
    
    ЗаполнитьЗначенияСвойств(Структура, Объект);
    
    Если Структура[ИмяСвойства] = Неопределено Тогда
        Структура[ИмяСвойства] = Ложь;
        
        ЗаполнитьЗначенияСвойств(Структура, Объект);
        
        Если Структура[ИмяСвойства] <> Ложь Тогда
            ЕстьСвоство = Истина;
        КонецЕсли;
    Иначе
        ЕстьСвоство = Истина;
    КонецЕсли;
    
    Возврат ЕстьСвоство;
КонецФункции

Процедура ФормаТолькоПросмотр(Объект, ЭтаФорма, Достуность, ОграничитьПолностью = Ложь) Экспорт
	Если НЕ БюджетныйНаСервере.РольАдминаДоступнаСервер() Тогда   //заблочил д1 02.11.17
		Для каждого ТекЭлемент Из ЭтаФорма.Элементы Цикл
			Если ТипЗнч(ТекЭлемент) = Тип("ГруппаФормы") ИЛИ ТипЗнч(ТекЭлемент) = Тип("ДекорацияФормы") Тогда
				Продолжить;
			КонецЕсли;	
			Попытка
				ТекЭлемент.ТолькоПросмотр = МАКС(ТекЭлемент.ТолькоПросмотр, Достуность);
			Исключение
				Если ОграничитьПолностью Тогда
					ТекЭлемент.Доступность = 1 - Достуность;	
				КонецЕсли;
			КонецПопытки;
		КонецЦикла; 
	КонецЕсли;
КонецПроцедуры

//для отражения записанных документов в регистрах сведений и дальнейшего формирования структуры
Процедура ЗаписатьВРегистрСведений(Ссылка) Экспорт
	//Документы.ГД_Движения.ПустаяСсылка().ПометкаУдаления
	
	//запись в регистр записванных документов
	НаборЗаписей = РегистрыСведений.Д_ЗаписанныеДокументы.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПредставлениеДокумента.Установить(Ссылка);
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Дата = Ссылка.Дата;
	НоваяЗапись.Предприятие = Ссылка.Предприятие;
	НоваяЗапись.Сценарий = Ссылка.Сценарий;
	НоваяЗапись.Название = Ссылка.Ссылка;
	НоваяЗапись.ПредставлениеДокумента = Ссылка;
	НоваяЗапись.НомерДокумента = Ссылка.Номер;
	НоваяЗапись.Редактор = ПараметрыСеанса.ТекущийПользователь;
	НоваяЗапись.ДатаРедакции = ТекущаяДата();
	НоваяЗапись.Проведен = Ссылка.Проведен;
	НоваяЗапись.ПометкаУдаления = Ссылка.ПометкаУдаления;
	
	НаборЗаписей.Записать();
	
	////запись в регистр редакции
	//НаборЗаписей = РегистрыСведений.Д_РедакцияДокументов.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.ПредставлениеДокумента.Установить(Ссылка);
	//НаборЗаписей.Отбор.Дата.Установить(ТекущаяДата());
	//НоваяЗапись = НаборЗаписей.Добавить();
	//НоваяЗапись.ПредставлениеДокумента = Ссылка;
	//НоваяЗапись.Дата = ТекущаяДата();
	//НоваяЗапись.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	//
	//Если Ссылка.ПометкаУдаления Тогда
	//	НоваяЗапись.Комментарий = "Документ помечен на удаление.";
	//иначе
	//	НоваяЗапись.Комментарий = "Документ записан.";
	//КонецЕсли;
	//
	//НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура УдалитьИзРегистраСведений(Ссылка) Экспорт
	НаборЗаписей = РегистрыСведений.Д_ЗаписанныеДокументы.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПредставлениеДокумента.Установить(Ссылка);
	//НоваяЗапись = НаборЗаписей.Добавить();
	//НоваяЗапись.Дата = Ссылка.Дата;
	//НоваяЗапись.Предприятие = Ссылка.Предприятие;
	//НоваяЗапись.Сценарий = Ссылка.Сценарий;
	//НоваяЗапись.Название = Ссылка.Ссылка;
	//НоваяЗапись.ПредставлениеДокумента = Ссылка;
	//НоваяЗапись.НомерДокумента = Ссылка.Номер;
	НаборЗаписей.Записать();
КонецПроцедуры

Функция ПолучитьПрефикс (Источник) Экспорт
			
	Если НЕ Источник.Метаданные().Реквизиты.Найти("Предприятие") = Неопределено Тогда
		Префикс = Источник.Предприятие.ПрефиксПредприятия;
	Иначе
		Префикс = "";
	КонецЕсли;
	
	Возврат Префикс;

КонецФункции // ПолучитьПрефикс ()

Функция ПолучитьИсточник(Источник) Экспорт
	
	Если Источник = Перечисления.Д_ИсточникиСредств.БезНал Тогда
		ИсточникСчет = ПланыСчетов.Учетный.Счет5101();
	иначеесли Источник = Перечисления.Д_ИсточникиСредств.Нал тогда
		ИсточникСчет = ПланыСчетов.Учетный.Счет5001();
	иначеесли ПустаяСтрока(Источник) тогда
		ИсточникСчет = ПланыСчетов.Учетный.Счет5101();
	Иначе
		ИсточникСчет = ПланыСчетов.Учетный.Счет5501();		
	КонецЕсли; 
	возврат ИсточникСчет
	
КонецФункции // ПолучитьИсточник()

Функция ОпределитьПроизводимуюНоменклатуру (Предприятие, Сценарий, ДатаНач, ДатаКон) Экспорт
	//определяем производимые номенклатуры
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	БюджетныйОбороты.Субконто1 КАК Номенклатура,
	|	БюджетныйОбороты.КорСубконто1,
	|	ЕСТЬNULL(БюджетныйОбороты.КоличествоОборотДт, 0) КАК Объем1
	|ИЗ
	|	РегистрБухгалтерии.Бюджетный.Обороты(
	|			&Дата1,
	|			&Дата2,
	|			,
	|			Счет = &Счет,
	|			,
	|			Предприятия = &Предприятия
	|				И СценарийПлана = &Сценарий1,
	|			КорСчет = &КорСчет,
	|			) КАК БюджетныйОбороты";
	
	Запрос.УстановитьПараметр("Предприятия", Предприятие);
	Запрос.УстановитьПараметр("Сценарий1", Сценарий);
	Запрос.УстановитьПараметр("Дата1", ДатаНач);
	Запрос.УстановитьПараметр("Дата2", ДатаКон);
	Запрос.УстановитьПараметр("Счет", ПланыСчетов.Учетный.Счет43());
	Запрос.УстановитьПараметр("КорСчет", ПланыСчетов.Учетный.Счет40());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	СписокНоменклатур = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		СписокНоменклатур.Добавить(Выборка.Номенклатура);
		
	КонецЦикла;
	Возврат СписокНоменклатур;
	
	
КонецФункции

Функция ОпределитьРеализуемуюНоменклатуру (Предприятие, Сценарий, ДатаНач, ДатаКон) Экспорт
	//определяем производимые номенклатуры
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	БюджетныйОбороты.Субконто1 КАК Номенклатура,
	|	ЕСТЬNULL(БюджетныйОбороты.КоличествоОборотКт, 0) КАК Объем1
	|ИЗ
	|	РегистрБухгалтерии.Бюджетный.Обороты(
	|			&Дата1,
	|			&Дата2,
	|			,
	|			Счет = &Счет
	|					ИЛИ Счет = &Счет2,
	|			,
	|			Предприятия = &Предприятия
	|				И СценарийПлана = &Сценарий1,
	|			КорСчет = &КорСчет,
	|			) КАК БюджетныйОбороты";
	
	Запрос.УстановитьПараметр("Предприятия", Предприятие);
	Запрос.УстановитьПараметр("Сценарий1", Сценарий);
	Запрос.УстановитьПараметр("Дата1", ДатаНач);
	Запрос.УстановитьПараметр("Дата2", ДатаКон);
	Запрос.УстановитьПараметр("Счет", ПланыСчетов.Учетный.Счет43());
	Запрос.УстановитьПараметр("Счет2", ПланыСчетов.Учетный.Счет41());
	Запрос.УстановитьПараметр("КорСчет", ПланыСчетов.Учетный.Счет9002());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	СписокНоменклатур = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		СписокНоменклатур.Добавить(Выборка.Номенклатура);
	КонецЦикла;
	Возврат СписокНоменклатур;
	
	
КонецФункции

//заполняет список предприятий в отчетах
//Массив групп
//1 - работающие проекты
//2 - развив проекты
//3 - проекты М1
//4 - затратные
//5 - Ликвидационные
//6 - Офис
//7 - Водочные
Процедура ЗаполнитьСписокПредприятия(Список, МассивГрупп, ВключатьПодчиненные = Ложь) Экспорт
		
	Перем Отбор;
	
	УстановитьПривилегированныйРежим(Истина);
	Группы = Новый Массив;
	Если НЕ МассивГрупп = 0 Тогда
		Для каждого Группа Из МассивГрупп Цикл
			Если Группа = 1 Тогда
				Группы.Добавить(Перечисления.Д_ТипыПредприятий.АРаботающее);		
			КонецЕсли;
			Если Группа = 2 Тогда
				Группы.Добавить(Перечисления.Д_ТипыПредприятий.БРазвивающееся);		
			КонецЕсли;
			Если Группа = 3 Тогда
				Группы.Добавить(Перечисления.Д_ТипыПредприятий.ВПроектыМ1);		
			КонецЕсли;
			Если Группа = 4 Тогда
				Группы.Добавить(Перечисления.Д_ТипыПредприятий.ГЗатратные);		
			КонецЕсли;
			Если Группа = 5 Тогда
				Группы.Добавить(Перечисления.Д_ТипыПредприятий.ДЛиквидационные);		
			КонецЕсли;
			Если Группа = 6 Тогда
				Группы.Добавить(Перечисления.Д_ТипыПредприятий.ЕОфис);		
			КонецЕсли;
			Если Группа = 7 Тогда
				Группы.Добавить(Перечисления.Д_ТипыПредприятий.ЖВодочныеПроекты);		
			КонецЕсли;
			
		КонецЦикла; 	
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыСеанса.ТекущееПредприятие) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Предприятия.Ссылка КАК Ссылка,
		               |	Предприятия.Родитель
		               |ИЗ
		               |	Справочник.Предприятия КАК Предприятия
		               |ГДЕ
		               |	ВЫБОР
		               |			КОГДА &БезОтбора = НЕОПРЕДЕЛЕНО
		               |				ТОГДА ИСТИНА
		               |			ИНАЧЕ Предприятия.ТипПредприятия В (&ТипПредприятия)
		               |		КОНЕЦ
		               |	И Предприятия.Ссылка В(&ТекущееПредприятие)
		               |	И Предприятия.ПометкаУдаления = ЛОЖЬ
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Предприятия.Наименование";
		
		Запрос.УстановитьПараметр("ТипПредприятия", Группы);
		Запрос.УстановитьПараметр("ТекущееПредприятие", БюджетныйНаСервере.ПолучитьПредприятия());
		Если НЕ МассивГрупп = 0 Тогда
			Отбор = 1;	
		КонецЕсли;
		Запрос.УстановитьПараметр("БезОтбора", Отбор);
		
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		//Отчет.Предприятие.ТипЗначения = Тип("Справочник.Предприятия");
		
		Пока Выборка.Следующий() Цикл
			Список.Добавить(Выборка.Ссылка);			
		КонецЦикла;
	иначе
		Список.Добавить(ПараметрыСеанса.ТекущееПредприятие);
		Список.НайтиПоЗначению(ПараметрыСеанса.ТекущееПредприятие).Пометка = 1;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// получаем выборку в разрезе субконто по факту по счету
Функция ПолучитьФактПоСчету(Счет, Предприятие, Дата) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	УчетныйОстаткиИОбороты.Счет,
	|	УчетныйОстаткиИОбороты.Субконто1,
	|	УчетныйОстаткиИОбороты.Предприятия,
	|	УчетныйОстаткиИОбороты.СценарийПлана,
	|	УчетныйОстаткиИОбороты.СуммаКонечныйОстаток,
	|	УчетныйОстаткиИОбороты.КоличествоНачальныйОстаток
	|ИЗ
	|	РегистрБухгалтерии.Учетный.ОстаткиИОбороты(&Дата1, &Дата1, , , , , ) КАК УчетныйОстаткиИОбороты
	|ГДЕ
	|	УчетныйОстаткиИОбороты.Счет = &Счет
	|	И УчетныйОстаткиИОбороты.Предприятия = &Предприятия
	|	И УчетныйОстаткиИОбороты.СценарийПлана = &СценарийПлана";
	
	Запрос.УстановитьПараметр("Счет", Счет);
	Запрос.УстановитьПараметр("Предприятия", Предприятие);
	Запрос.УстановитьПараметр("СценарийПлана", Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина));
	Запрос.УстановитьПараметр("Дата1", Дата);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	
	Возврат Результат.Выбрать();
	
	
	
КонецФункции // ()

//в данный момент функция простейшая, т.к. планы счетов идентичны
//в дальнейшем можно сделать дополнительное соответствие счетов
Функция ПолучитьСоответствиеСчета(СчетФакта) Экспорт
	ТекСчет = ПланыСчетов.Учетный.НайтиПоКоду(СчетФакта.Код);
	Если НЕ ЗначениеЗаполнено(ТекСчет) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	СоответствиеПлановСчетов.БюджетныйСчет
		|ИЗ
		|	РегистрСведений.СоответствиеПлановСчетов КАК СоответствиеПлановСчетов
		|ГДЕ
		|	СоответствиеПлановСчетов.УчетныйСчет = &УчетныйСчет";
		
		Запрос.УстановитьПараметр("УчетныйСчет", СчетФакта);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.БюджетныйСчет;
		КонецЦикла;
	Иначе
		Возврат ТекСчет;
	КонецЕсли;
КонецФункции // ()

//получаем МАССИВ предприятий из параметров сеанса
//ФлагВсе = 1 - выбираются все доступные пользователю предприятия
//ФлагВсе = 0 - выбираются все доступные пользователю предприятия, либо одно текущее(ПараметрСеанса.ТекущееПредприятие) 
Функция ПолучитьПредприятия(ФлагВсе = ЛОЖЬ, Пользователь = Неопределено, Родитель = Ложь, ПолучатьПредопределенные = Ложь) Экспорт
	
	СписокПредприятий = Новый Массив;
	
	//если параматр сеанса заполнен, то не делать обсчет по предприятиям
	Если ПараметрыСеанса.ДоступныеПредприятия.Количество() И Пользователь = Неопределено И Родитель = Ложь Тогда
		
		Для каждого ТекПП Из ПараметрыСеанса.ДоступныеПредприятия Цикл
			
			//Если ТекПП.Предопределенный Тогда
			//	
			//	Если ПолучатьПредопределенные Тогда
			//		СписокПредприятий.Добавить(ТекПП);					
			//	КонецЕсли;
			//	
			//Иначе
				СписокПредприятий.Добавить(ТекПП);
			//КонецЕсли;
			
		КонецЦикла;	
		
		Возврат СписокПредприятий;	
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Предприятия.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Предприятия КАК Предприятия
	               |ГДЕ
	               |	(Предприятия.Ссылка В ИЕРАРХИИ
	               |				(ВЫБРАТЬ
	               |					Предприятия.Ссылка КАК Ссылка
	               |				ИЗ
	               |					Справочник.Предприятия КАК Предприятия
	               |						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДолжностиПредприятия КАК ОсновныеДолжностиПредприятия
	               |						ПО
	               |							ОсновныеДолжностиПредприятия.Предприятие = Предприятия.Ссылка
	               |				ГДЕ
	               |					ОсновныеДолжностиПредприятия.Сотрудник В (&ТекПользователь))
	               |			ИЛИ ЛОЖЬ В
	               |				(ВЫБРАТЬ
	               |					Пользователи.ДоступныПредприятияИзСписка
	               |				ИЗ
	               |					Справочник.Пользователи КАК Пользователи
	               |				ГДЕ
	               |					Пользователи.Ссылка В (&ТекПользователь)))
	               |	И Предприятия.ЭтоГруппа = ЛОЖЬ
	               |	И ВЫБОР
	               |			КОГДА &ЭтоАдмин
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ Предприятия.ПометкаУдаления = ЛОЖЬ
	               |		КОНЕЦ
	               |	И ВЫБОР
	               |			КОГДА &ПолучатьПредопределенные
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ Предприятия.Предопределенный = ЛОЖЬ
	               |		КОНЕЦ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("ТекПользователь", ?(Пользователь = Неопределено, ПараметрыСеанса.ДоступныеПользователи, Пользователь));
	Запрос.УстановитьПараметр("ЭтоАдмин", БюджетныйНаСервере.РольАдминаДоступнаСервер());
	Запрос.УстановитьПараметр("ПолучатьПредопределенные", ПолучатьПредопределенные); 
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если СписокПредприятий.Найти(Выборка.Ссылка) = Неопределено Тогда
			СписокПредприятий.Добавить(Выборка.Ссылка);						
		КонецЕсли;
	КонецЦикла;
		
	Возврат СписокПредприятий;
	
КонецФункции // ПолучитьПредприятие()

//получаем пользователя из параметров сеанса
Функция ПолучитьПользователя() Экспорт
	Возврат ПараметрыСеанса.ТекущийПользователь;
КонецФункции // ПолучитьПользователя()

//получаем должность пользователя из параметров сеанса
Функция ПолучитьДолжностьПользователя() Экспорт
	
	Если ПустаяСтрока(ПараметрыСеанса.ТекущийПользователь) Тогда //если пользователь-администратор
		Возврат "";
	иначе
		Возврат ПараметрыСеанса.ТекущийПользователь.Должность;
	конецесли;
	
КонецФункции // ПолучитьПользователя(

//получаем предприятие из параметров сеанса
Функция ПолучитьПредприятие() Экспорт
	Возврат ПараметрыСеанса.ТекущееПредприятие;
КонецФункции // ПолучитьПользователя()


//ПодпискаНаСобытие ДокументыПриЗаписиПриЗаписи
Процедура ДокументыПриЗаписиПриЗаписи(Источник, Отказ) Экспорт
	
	
	//проверка на возможность редактирования
	Попытка
		
		ТекПользователь = БюджетныйНаСервере.ПолучитьПользователя();
		Сценарий = Источник.Сценарий;
		ЗапретРедактирования = Ложь;
		ЗапретРедактированияБО = Ложь;
		ПараметрыТекущегоБюджета = БюджетныйНаСервере.ПолучитьПоследнююЗаписьПараметровБюджета(Источник.Предприятие, Сценарий);
		
		Если ЗначениеЗаполнено(ПараметрыТекущегоБюджета) Тогда
			ЗапретРедактирования = ПараметрыТекущегоБюджета.ПризнакРедактирования;
			ЗапретРедактированияБО = ПараметрыТекущегоБюджета.ПризнакРедактированияБО;
		КонецЕсли;
		
		Если ЗапретРедактирования И НЕ РольДоступна("БюджетныйОтдел") И НЕ РольДоступна("Администратор") И НЕ РольДоступна("КоммерсантОтвКвоты") Тогда
			Сообщить("Сценарий " + Строка(Сценарий) + " недоступен для записи.");
			Отказ = Истина;
		ИначеЕсли ЗапретРедактированияБО И РольДоступна("БюджетныйОтдел") И НЕ РольДоступна("Администратор") И НЕ РольДоступна("КоммерсантОтвКвоты") Тогда
			Сообщить("Сценарий " + Строка(Сценарий) + " недоступен для записи.");
			Отказ = Истина;
		КонецЕсли;
		
		Если Не Отказ И НЕ Сценарий = Неопределено Тогда
			ЗаписатьВРегистрСведений(Источник.Ссылка);	
		КонецЕсли;
		
	Исключение
		
	КонецПопытки;
	
	
	
	
	
КонецПроцедуры

//ПодпискаНаСобытие ПриЗаписиСправочника
Процедура ПриЗаписиЭлементовСправочниковПриЗаписи(Источник, Отказ) Экспорт
	
КонецПроцедуры

//ПодпискаНаСобытие ПриУстановкиКодаСправочника
Процедура ПриУстановкеКодаСправочникаПриУстановкеНовогоКода(Источник, СтандартнаяОбработка, Префикс) Экспорт
	Префикс = БюджетныйНаСервере.ПолучитьПрефикс(Источник);
КонецПроцедуры

//ПодпискаНаСобытие ПриУстановкиНомераДокумента
Процедура ПриУстановкеНовогоНомераПриУстановкеНовогоНомера(Источник, СтандартнаяОбработка, Префикс) Экспорт
	Префикс = БюджетныйНаСервере.ПолучитьПрефикс(Источник);
КонецПроцедуры

//Получаем период сценария
Функция ПолучитьПериодСценария(Сценарий) Экспорт
	Возврат Новый Структура("Дата1, Дата2", Сценарий.ДатаНачала,Сценарий.ДатаКонца)
КонецФункции // () 

//Получаем дату начала сценария
Функция ПолучитьДатуНачалаСценария(Сценарий) Экспорт
	Возврат ПолучитьПериодСценария(Сценарий).Дата1
КонецФункции

//ПриСозданииНаСервере формы списка и отбора справочника (в разрезе предприятий)
Процедура ПриСозданииФормаСправочника(Список) Экспорт
	Список.Параметры.УстановитьЗначениеПараметра("ТекущееПредприятие", БюджетныйНаСервере.ПолучитьПредприятия());	
КонецПроцедуры

//Найти и провести документы после изменения себестоимости
//пока обработка проводит только документ ОбъемПроизводства
Процедура НайтиИПровестиДокумент(ТипДокумента, Дата, Сценарий, Предприятие) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Д_ЗаписанныеДокументы.ПредставлениеДокумента
	|ИЗ
	|	РегистрСведений.Д_ЗаписанныеДокументы КАК Д_ЗаписанныеДокументы
	|ГДЕ
	|	Д_ЗаписанныеДокументы.Дата МЕЖДУ &Дата1 И &Дата2
	|	И Д_ЗаписанныеДокументы.Сценарий = &Сценарий
	|	И Д_ЗаписанныеДокументы.Предприятие = &Предприятие";
	
	Запрос.УстановитьПараметр("Дата1", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("Дата2", КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ИсходныйДокумент = Выборка.ПредставлениеДокумента;
		НовыйДокумент = ИсходныйДокумент.ПолучитьОбъект();
		Если НЕ ИсходныйДокумент.ПометкаУдаления И Выборка.ПредставлениеДокумента.Метаданные().Имя = ТипДокумента Тогда
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			//Сообщить(Выборка.ПредставлениеДокумента);
			//Сообщить("Документ " + Строка(ИсходныйДокумент) + " перепроведен.");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//получает данные двойного клика по СКД
//парам - Структура
//Эл - Элементы расшифровки
//функция возвращает структуру с необходимыми параметрами
Функция ПолучитьДанныеРасшифровкиСКД(Парам, Эл) Экспорт
	
	Параметр1 = Эл.ПолучитьРодителей()[0];
	Пока НЕ Число(Параметр1.Идентификатор) = 0 Цикл
		Если НЕ ТипЗнч(Параметр1) = Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") Тогда
			Если Парам.Свойство(Строка(Параметр1.ПолучитьПоля()[0].Поле)) Тогда
				Парам[Строка(Параметр1.ПолучитьПоля()[0].Поле)] = Параметр1.ПолучитьПоля()[0].Значение;
			КонецЕсли;
		КонецЕсли;
		Параметр1 = Параметр1.ПолучитьРодителей()[0];
	КонецЦикла;
	
	Возврат Парам;
КонецФункции // ()

//возвращает реквизит объекта
Функция ВернутьРеквизит(ОбъектСсылка, Реквизит) Экспорт
	Попытка
		Возврат ОбъектСсылка[Реквизит];	
	Исключение
		Возврат Неопределено;
	КонецПопытки;
КонецФункции // ()

Функция СправочникНайтиПоНаименованию(ИмяСправочника, Наименование, ТочноеСоответствие) Экспорт
	
	Возврат Справочники[ИмяСправочника].НайтиПоНаименованию(Наименование, ТочноеСоответствие);
	
КонецФункции

Функция СправочникНайтиПоКоду(ИмяСправочника, Код, Родитель, Владелец) Экспорт
	
	Если Родитель = Неопределено и Владелец = Неопределено Тогда 
		Возврат Справочники[ИмяСправочника].НайтиПоКоду(Код);
	ИначеЕсли Родитель <> Неопределено и Владелец <> Неопределено Тогда 
		Возврат Справочники[ИмяСправочника].НайтиПоКоду(Код,Родитель,Владелец);	
	ИначеЕсли Владелец = Неопределено Тогда 
		Возврат Справочники[ИмяСправочника].НайтиПоКоду(Код,Родитель);
	ИначеЕсли Родитель = Неопределено Тогда 
		Возврат Справочники[ИмяСправочника].НайтиПоКоду(Код,,Владелец);
	КонецЕсли;	
		
КонецФункции


//возвращает структуру с нужными реквизитами, реквизиты - строковой тип через запятую
Функция ВернутьРеквизиты(ОбъектСсылка, Реквизиты, ОшибкаНесуществующих = Истина) Экспорт
	
	Если ОбъектСсылка = Неопределено ИЛИ ОбъектСсылка = NULL Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектМетаданныхИмя = ОбъектСсылка.Метаданные().Имя;
	
	
	ТипВЗапрос = "";
	Если Метаданные.Справочники.Содержит(ОбъектСсылка.Метаданные()) Тогда
		ТипВЗапрос = "Справочник";
	ИначеЕсли  Метаданные.Документы.Содержит(ОбъектСсылка.Метаданные()) Тогда
		ТипВЗапрос = "Документ";
	ИначеЕсли  Метаданные.Задачи.Содержит(ОбъектСсылка.Метаданные()) Тогда
		ТипВЗапрос = "Задача";
	ИначеЕсли  Метаданные.БизнесПроцессы.Содержит(ОбъектСсылка.Метаданные()) Тогда
		ТипВЗапрос = "БизнесПроцесс";
	ИначеЕсли  Метаданные.ПланыСчетов.Содержит(ОбъектСсылка.Метаданные()) Тогда
		ТипВЗапрос = "ПланСчетов";
	Иначе
		Возврат Неопределено;	
	КонецЕсли;
	
	МассивПараметров = Новый Массив;
	НачСимвол = 1; ЕстьЗапятая = Ложь;
	Для ИндексСимвола = 1 По СтрДлина(Реквизиты) Цикл
		Если Сред(Реквизиты, ИндексСимвола, 1) = "," Тогда
			МассивПараметров.Добавить(СокрЛП(Сред(Реквизиты, НачСимвол, ИндексСимвола - НачСимвол)));	
			НачСимвол = ИндексСимвола + 1;
			ЕстьЗапятая = Истина;
		КонецЕсли;
		Если ИндексСимвола = СтрДлина(Реквизиты) Тогда
			Если НЕ ЕстьЗапятая Тогда
				НачСимвол = 0;		
			КонецЕсли;
			МассивПараметров.Добавить(СокрЛП(Сред(Реквизиты, НачСимвол, ИндексСимвола - НачСимвол + 1)));
		КонецЕсли;
	КонецЦикла;
	
	//добавлено в случае отсутствия параметров д1 13.12.17
	МассивПолейКУдалению = Новый Массив;
	Если НЕ ОшибкаНесуществующих Тогда
		Для каждого ТекПоле Из МассивПараметров Цикл
			ЕстьРеквизит = Ложь;
			Для каждого ТекСтандартныйРеквизит Из ОбъектСсылка.Метаданные().СтандартныеРеквизиты Цикл
				Если ТекСтандартныйРеквизит.Имя = ТекПоле Тогда
					ЕстьРеквизит = Истина;
				КонецЕсли;	
			КонецЦикла; 
			
			Если НЕ ОбъектСсылка.Метаданные().Реквизиты.Найти(ТекПоле) = Неопределено Тогда
				ЕстьРеквизит = Истина;
			КонецЕсли;
			
			Если Метаданные.ПланыСчетов.Содержит(ОбъектСсылка.Метаданные()) Тогда
				Если НЕ ОбъектСсылка.Метаданные().ПризнакиУчета.Найти(ТекПоле) = Неопределено Тогда
					ЕстьРеквизит = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЕстьРеквизит Тогда
				МассивПолейКУдалению.Добавить(ТекПоле);
			КонецЕсли;				
		КонецЦикла;
		
		Для каждого ТекПолеКУдалению Из МассивПолейКУдалению Цикл
			МассивПараметров.Удалить(МассивПараметров.Найти(ТекПолеКУдалению));		
		КонецЦикла; 		
	КонецЕсли;// конец добавления
	
	ТексПолей = "";
	Для каждого ТекПоле Из МассивПараметров Цикл
		Если СтрНайти(ТекПоле, "Спр.") Тогда
			ТексПолей = ТексПолей + ТекПоле + ",
			|	";
		Иначе	
			ТексПолей = ТексПолей + "Спр." + ТекПоле + ", 
			|	";
		КонецЕсли;
	КонецЦикла; 
	ТексПолей = Лев(ТексПолей, СтрДлина(ТексПолей) - 4);
	
	ЭтоПустаяСсылка = НЕ ЗначениеЗаполнено(ОбъектСсылка);
	
	Если НЕ ЭтоПустаяСсылка Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	" + ТексПолей + "
		|ИЗ
		|	" + ТипВЗапрос + "." + ОбъектМетаданныхИмя + " КАК Спр
		|ГДЕ
		|	Спр.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ОбъектСсылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выгрузить();
		Если НЕ Выборка.Количество() Тогда	//для удаляемых с шифтом
			Возврат Неопределено;		
		КонецЕсли; 
		ВыбДанные = Выборка[0];
		
		СтруктураВозврата = Новый Структура;	
		Для каждого ТекКолонка Из Выборка.Колонки Цикл
			СтруктураВозврата.Вставить(СтрЗаменить(ТекКолонка.Имя, ".", ""), ВыбДанные[?(НЕ ЭтоПустаяСсылка, СтрЗаменить(ТекКолонка.Имя, ".", ""), ТекКолонка.Имя)]);	
		КонецЦикла;

	Иначе
		
		ВыбДанные = ОбъектСсылка;
		СтруктураВозврата = Новый Структура;	
		Для каждого ТекКолонка Из МассивПараметров Цикл
			СтруктураВозврата.Вставить(СтрЗаменить(ТекКолонка, ".", ""), ВыбДанные[?(НЕ ЭтоПустаяСсылка, СтрЗаменить(ТекКолонка, ".", ""), ТекКолонка)]);	
		КонецЦикла;

	КонецЕсли;
		
	//добавлено в случае отсутствия параметров д1 13.12.17
	Для каждого ТекУдаленноеПоле Из МассивПолейКУдалению Цикл
		СтруктураВозврата.Вставить(ТекУдаленноеПоле, NULL);	
	КонецЦикла; 
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СтруктураВозврата;

КонецФункции // ()

//устанавливает значение реквизита (строка, число)
Процедура ПрисвоитьРеквизит(ОбъектСсылка, Реквизит, Значение) Экспорт
	Объект2 = ОбъектСсылка.ПолучитьОбъект();
	Объект2[Реквизит] = Значение;	
	Объект2.Записать();
КонецПроцедуры // ()

//возвращает структуру бюджетов на видам для текущей даты
Функция ПолучитьВидыБюджетовНаДату(ТекДата, Утвержден = Истина, ДатаОкончания = Неопределено) Экспорт
		
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		
		МассивБюджетов = Новый Массив;
		ДатаТекущегоМесяца = НачалоМесяца(ТекДата);
		
		Пока ДатаТекущегоМесяца <= НачалоМесяца(ДатаОкончания) Цикл
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	СценарииПланирования.Ссылка,
			               |	СценарииПланирования.ВидБюджета
			               |ИЗ
			               |	Справочник.СценарииПланирования КАК СценарииПланирования
			               |ГДЕ
			               |	СценарииПланирования.ДатаНачала < &ТекДата
			               |	И СценарииПланирования.ДатаКонца >= &ТекДата
			               |	И НЕ СценарииПланирования.ВидБюджета = &ВидБюджета
			               |	И СценарииПланирования.ПометкаУдаления = ЛОЖЬ";
			
			Запрос.УстановитьПараметр("ТекДата", ДатаТекущегоМесяца);
			Запрос.УстановитьПараметр("ВидБюджета", Перечисления.Д_ВидыБюджета.ВариантБюджета);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			ПустойБюджет = Справочники.СценарииПланирования.ПустаяСсылка();
			СтруктураБюджетов = Новый Структура("ГодовойБюджет, КвартальныйБюджет, МесячныйБюджет, КорректировочныйБюджет", ПустойБюджет, ПустойБюджет, ПустойБюджет, ПустойБюджет);			
			Т = Перечисления.Д_ВидыБюджета.МесячныйБюджет.Метаданные();
			
			Пока Выборка.Следующий() Цикл
				
				Если Не ПустаяСтрока(Выборка.ВидБюджета) Тогда
					
					Если Утвержден Тогда
						
						Если Не РасчетыБюджет.ПБ_СценарийУтвержден(Выборка.Ссылка) Тогда
							Продолжить;
						КонецЕсли;
						
					КонецЕсли;
					
					СтруктураБюджетов[СтрЗаменить(Строка(Выборка.ВидБюджета), " ", "")] = Выборка.Ссылка;		
				КонецЕсли;
				
			КонецЦикла;
			
			МассивБюджетов.Добавить(СтруктураБюджетов);			
			ДатаТекущегоМесяца = ДобавитьМесяц(ДатаТекущегоМесяца, 1)
			
		КонецЦикла;
		
		Возврат МассивБюджетов
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	СценарииПланирования.Ссылка,
		               |	СценарииПланирования.ВидБюджета
		               |ИЗ
		               |	Справочник.СценарииПланирования КАК СценарииПланирования
		               |ГДЕ
		               |	СценарииПланирования.ДатаНачала < &ТекДата
		               |	И СценарииПланирования.ДатаКонца >= &ТекДата
		               |	И НЕ СценарииПланирования.ВидБюджета = &ВидБюджета
		               |	И СценарииПланирования.ПометкаУдаления = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("ТекДата", НачалоМесяца(ТекДата));
		Запрос.УстановитьПараметр("ВидБюджета", Перечисления.Д_ВидыБюджета.ВариантБюджета);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		ПустойБюджет = Справочники.СценарииПланирования.ПустаяСсылка();
		СтруктураБюджетов = Новый Структура("ГодовойБюджет, КвартальныйБюджет, МесячныйБюджет, КорректировочныйБюджет", ПустойБюджет, ПустойБюджет, ПустойБюджет, ПустойБюджет);
		Т = Перечисления.Д_ВидыБюджета.МесячныйБюджет.Метаданные();
		
		Пока Выборка.Следующий() Цикл
			
			Если Утвержден Тогда
				
				Если Не РасчетыБюджет.ПБ_СценарийУтвержден(Выборка.Ссылка) Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ПустаяСтрока(Выборка.ВидБюджета) Тогда
				СтруктураБюджетов[СтрЗаменить(Строка(Выборка.ВидБюджета), " ", "")] = Выборка.Ссылка;		
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат СтруктураБюджетов;
		
	КонецЕсли;	
		
КонецФункции

Функция ПроверкаПринадлежностиПредприятия(Предприятие) Экспорт
	МассивПредприятий = ПолучитьПредприятия();
	Если НЕ МассивПредприятий.Найти(Предприятие) = Неопределено Тогда
		Возврат 1;
	КонецЕсли;
	Возврат 0;
КонецФункции // ()

Функция ОбратнаяВнутрихолдинговаяСтатья(Статья, Предприятие = Неопределено) Экспорт
	
	ОбрСтатья = Статья.ОбратнаяСтатьяВНХ;
	
	Если Не ЗначениеЗаполнено(ОбрСтатья) И НЕ Предприятие = Неопределено И НЕ Предприятие.ЭтоГруппа Тогда
		ОбрСтатья = Предприятие.УчетнаяПолитика.СтатьяВНХПоступление;
	КонецЕсли;
	
	Возврат ОбрСтатья;
	
КонецФункции

Функция ПрямыеРасходы(Агент,Предприятие) Экспорт
	Если Агент = Предприятие Тогда
		Возврат Истина
	ИначеЕсли
		Агент.Родитель = Предприятие ИЛИ Предприятие.Родитель = Агент Тогда
		Возврат Истина
	ИначеЕсли
		НЕ Агент.Родитель.Пустая() И Агент.Родитель = Предприятие.Родитель Тогда
		Возврат Истина
	Иначе
		Возврат Ложь
	КонецЕсли;
КонецФункции

//создает прямые и непрямые движения на основании платежки и заявки
Процедура Документы2(ТаблицаДокумента,ТаблицаДокументаВнутр) Экспорт
	Если ТаблицаДокументаВнутр.Количество() > 0 Тогда
		//Внутрихолдинговые по одному предприятию
		НовыйДокументВн = Документы.ГД_Движения.СоздатьДокумент();
		НовыйДокументВн.Дата = ТаблицаДокументаВнутр[0].Дата;
		НовыйДокументВн.Предприятие = ТаблицаДокументаВнутр[0].Агент;
		НовыйДокументВн.ТипИсточника = ТаблицаДокументаВнутр[0].ТипИсточника;
		НовыйДокументВн.Автор = ПараметрыСеанса.ТекущийПользователь;
		Для Каждого ТекСтрокаДокумента Из ТаблицаДокументаВнутр Цикл
			НоваяСтрока = НовыйДокументВн.ТабличнаяЧасть1.Добавить();							
			НоваяСтрока.Платежка = ТекСтрокаДокумента.Платежка;
			НоваяСтрока.Статья = ТекСтрокаДокумента.Статья;
			НоваяСтрока.Источник = ТекСтрокаДокумента.Плательщик;
			НоваяСтрока.СуммаПриход = 0;
			НоваяСтрока.СуммаРасход = ТекСтрокаДокумента.Сумма;
			НоваяСтрока.Контрагент = ТекСтрокаДокумента.Получатель;
			НоваяСтрока.Описание =  "" + ТекСтрокаДокумента.НазначениеПлатежа;
			
			//Внутрихолдинговые платежи
			НоваяСтрока1 = НовыйДокументВн.ТабличнаяЧасть1.Добавить();							
			НоваяСтрока1.Платежка = ТекСтрокаДокумента.Платежка;
			НоваяСтрока1.Источник = ТекСтрокаДокумента.Получатель;
			НоваяСтрока1.Статья = ОбратнаяВнутрихолдинговаяСтатья(ТекСтрокаДокумента.Статья);
			НоваяСтрока1.СуммаПриход = ТекСтрокаДокумента.Сумма;
			НоваяСтрока1.СуммаРасход = 0;
			НоваяСтрока1.Контрагент = ТекСтрокаДокумента.Плательщик;
			НоваяСтрока1.Описание =  "" + ТекСтрокаДокумента.НазначениеПлатежа;									
			Если НовыйДокументВн.ТабличнаяЧасть1.Количество() > 0 Тогда
				НовыйДокументВн.Записать();
			КонецЕсли;
			Если ТипЗнч(ТекСтрокаДокумента.Платежка) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") Тогда
				ЗаявкаОбъект = ТекСтрокаДокумента.Платежка.ПолучитьОбъект();
				ЗаявкаОбъект.ЗаявкаБезнал[ТекСтрокаДокумента.НомерСтроки - 1].ПлатежноеПоручение = НовыйДокументВн.Ссылка;
				ЗаявкаОбъект.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ТаблицаДокумента.Количество() > 0 Тогда
		//Остальные	
		НовыйДокумент = Документы.ГД_Движения.СоздатьДокумент();
		НовыйДокумент.Дата = ТаблицаДокумента[0].Дата;
		НовыйДокумент.Предприятие = ТаблицаДокумента[0].Агент;
		НовыйДокумент.ТипИсточника = ТаблицаДокумента[0].ТипИсточника;
		НовыйДокумент.Автор = ПараметрыСеанса.ТекущийПользователь;
		Для Каждого ТекСтрокаДокумента Из ТаблицаДокумента Цикл
			//Прямые платежи
			Если ПрямыеРасходы(ТекСтрокаДокумента.Агент,ТекСтрокаДокумента.Подразделение) Тогда
				НоваяСтрока = НовыйДокумент.ТабличнаяЧасть1.Добавить();							
				НоваяСтрока.Платежка = ТекСтрокаДокумента.Платежка;
				НоваяСтрока.Статья = ТекСтрокаДокумента.Статья;
				НоваяСтрока.Описание =  "" + ТекСтрокаДокумента.НазначениеПлатежа;
				//НовыйДокумент.Записать();
				Если ТипЗнч(ТекСтрокаДокумента.Плательщик)=Тип("СправочникСсылка.Кассы") Тогда
					НоваяСтрока.Источник = ТекСтрокаДокумента.Плательщик;
					НоваяСтрока.СуммаПриход = 0;
					НоваяСтрока.СуммаРасход = ТекСтрокаДокумента.Сумма;
					Если ТипЗнч(ТекСтрокаДокумента.Получатель)=Тип("СправочникСсылка.Кассы") Тогда
						НоваяСтрока.Контрагент = ТекСтрокаДокумента.Получатель;
						//Внутрихолдинговые платежи
						НовыйДокумент1 = Документы.ГД_Движения.СоздатьДокумент();
						НовыйДокумент1.Дата = ТаблицаДокумента[0].Дата;
						НовыйДокумент1.Предприятие = ПП_Сервер.ПолучитьПредприятие(ТаблицаДокумента[0].Дата,ТекСтрокаДокумента.Получатель);
						НовыйДокумент1.ТипИсточника = ТаблицаДокумента[0].ТипИсточника;
						НовыйДокумент1.Автор = ПараметрыСеанса.ТекущийПользователь;
						НоваяСтрока1 = НовыйДокумент1.ТабличнаяЧасть1.Добавить();							
						НоваяСтрока1.Платежка = ТекСтрокаДокумента.Платежка;
						НоваяСтрока1.Описание =  "" + ТекСтрокаДокумента.НазначениеПлатежа;									
						НоваяСтрока1.Источник = ТекСтрокаДокумента.Получатель;
						НоваяСтрока1.Статья = ОбратнаяВнутрихолдинговаяСтатья(ТекСтрокаДокумента.Статья);
						НоваяСтрока1.СуммаПриход = ТекСтрокаДокумента.Сумма;
						НоваяСтрока1.СуммаРасход = 0;
						НоваяСтрока1.Контрагент = ТекСтрокаДокумента.Плательщик;
						Попытка
							НовыйДокумент1.Записать();
						Исключение
							Сообщить(ИнформацияОбОшибке().ИсходнаяСтрока);
							Сообщить(ИнформацияОбОшибке().Описание);
							НовыйДокумент1.Записать(РежимЗаписиДокумента.Запись);
						КонецПопытки;
					Иначе
						НоваяСтрока.Контрагент = ТекСтрокаДокумента.Получатель;
					КонецЕсли;
				Иначе
					НоваяСтрока.Источник = ТекСтрокаДокумента.Получатель;
					НоваяСтрока.СуммаПриход = ТекСтрокаДокумента.Сумма;
					НоваяСтрока.СуммаРасход = 0;
					НоваяСтрока.Контрагент = ТекСтрокаДокумента.Плательщик;
				КонецЕсли;
				Если НовыйДокумент.ТабличнаяЧасть1.Количество() > 0 Тогда
					Попытка
						НовыйДокумент.Записать();
					Исключение
						Сообщить(ИнформацияОбОшибке().ИсходнаяСтрока);
						Сообщить(ИнформацияОбОшибке().Описание);
						НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
					КонецПопытки;
				КонецЕсли;
				Если ТипЗнч(ТекСтрокаДокумента.Платежка) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") Тогда
					ЗаявкаОбъект = ТекСтрокаДокумента.Платежка.ПолучитьОбъект();
					ЗаявкаОбъект.ЗаявкаБезнал[ТекСтрокаДокумента.НомерСтроки - 1].ПлатежноеПоручение = НовыйДокумент.Ссылка;
					ЗаявкаОбъект.Записать();
				КонецЕсли;
				
				//Непрямые платежи
			Иначе
				НовыйДокумент2 = Документы.ГД_ДвиженияНеПрямойПервичный.СоздатьДокумент();
				НовыйДокумент2.Дата = ТаблицаДокумента[0].Дата;
				НовыйДокумент2.Агент = ТаблицаДокумента[0].Агент;
				НовыйДокумент2.ТипИсточника = ТаблицаДокумента[0].ТипИсточника;
				НовыйДокумент2.Предприятие = ТекСтрокаДокумента.Подразделение;
				НовыйДокумент2.СтатьяДДС = ТекСтрокаДокумента.Статья;
				Если ТипЗнч(ТекСтрокаДокумента.Плательщик)=Тип("СправочникСсылка.Кассы") Тогда
					НовыйДокумент2.Источник = ТекСтрокаДокумента.Плательщик;
					НовыйДокумент2.Контрагент = ТекСтрокаДокумента.Получатель;
					НовыйДокумент2.СуммаПриход = 0;
					НовыйДокумент2.СуммаРасход = ТекСтрокаДокумента.Сумма;
				Иначе
					НовыйДокумент2.Источник = ТекСтрокаДокумента.Получатель;
					НовыйДокумент2.Контрагент = ТекСтрокаДокумента.Плательщик;
					НовыйДокумент2.СуммаПриход = ТекСтрокаДокумента.Сумма;
					НовыйДокумент2.СуммаРасход = 0;
				КонецЕсли;
				НовыйДокумент2.Платежка = ТекСтрокаДокумента.Платежка;
				НовыйДокумент2.Описание =  "" + ТекСтрокаДокумента.НазначениеПлатежа;
				Попытка
					НовыйДокумент2.Записать();
				Исключение
					Сообщить(ИнформацияОбОшибке().ИсходнаяСтрока);
					Сообщить(ИнформацияОбОшибке().Описание);
					НовыйДокумент2.Записать(РежимЗаписиДокумента.Запись);
				КонецПопытки;
				Если ТипЗнч(ТекСтрокаДокумента.Платежка) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") Тогда
					ЗаявкаОбъект = ТекСтрокаДокумента.Платежка.ПолучитьОбъект();
					ЗаявкаОбъект.ЗаявкаБезнал[ТекСтрокаДокумента.НомерСтроки - 1].ПлатежноеПоручение = НовыйДокумент2.Ссылка;
					ЗаявкаОбъект.Записать();
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

//создает прямые и непрямые движения на основании платежки и заявки
Процедура ДокументыНовСтар(ТаблицаДокумента,ТаблицаДокументаВнутр) Экспорт
	Если ТаблицаДокументаВнутр.Количество() > 0 Тогда
		//Внутрихолдинговые по одному предприятию
		Для Каждого ТекСтрокаДокумента Из ТаблицаДокументаВнутр Цикл
			НовыйДокументВн = Документы.ГД_ДвиженияВНХПервичный.СоздатьДокумент();
			НовыйДокументВн.Дата = ТекСтрокаДокумента.Дата;
			НовыйДокументВн.Предприятие = ТекСтрокаДокумента.Агент;
			НовыйДокументВн.ПредприятиеПолучатель = ПП_Сервер.ПолучитьПредприятие(ТекСтрокаДокумента.Дата,ТекСтрокаДокумента.Получатель);
			НовыйДокументВн.ТипИсточника = ТекСтрокаДокумента.ТипИсточника;
			НовыйДокументВн.Автор = ПараметрыСеанса.ТекущийПользователь;
			НовыйДокументВн.Платежка = ТекСтрокаДокумента.Платежка;
			НовыйДокументВн.СтатьяДДС = ТекСтрокаДокумента.Статья;
			НовыйДокументВн.Источник = ТекСтрокаДокумента.Плательщик;
			НовыйДокументВн.ИсточникПолучателя = ТекСтрокаДокумента.Получатель;
			НовыйДокументВн.СуммаРасход = ТекСтрокаДокумента.Сумма;
			НовыйДокументВн.Описание =  "" + ТекСтрокаДокумента.НазначениеПлатежа;
			НовыйДокументВн.Записать(РежимЗаписиДокумента.Проведение);
			Если ТипЗнч(ТекСтрокаДокумента.Платежка) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") Тогда
				ЗаявкаОбъект = ТекСтрокаДокумента.Платежка.ПолучитьОбъект();
				ЗаявкаОбъект.ЗаявкаБезнал[ТекСтрокаДокумента.НомерСтроки - 1].ПлатежноеПоручение = НовыйДокументВн.Ссылка;
				ЗаявкаОбъект.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ТаблицаДокумента.Количество() > 0 Тогда
		НовыйДокумент = Документы.ГД_ДвиженияНеПрямойПервичный.СоздатьДокумент();
		НовыйДокумент.Дата = ТаблицаДокумента[0].Дата;
		НовыйДокумент.Агент = ТаблицаДокумента[0].Агент;
		НовыйДокумент.ТипИсточника = ТаблицаДокумента[0].ТипИсточника;
		НовыйДокумент.Автор = ПараметрыСеанса.ТекущийПользователь;
		НовыйДокумент.Платежка = ТаблицаДокумента[0].Платежка;
		НовыйДокумент.Описание =  "" + ТаблицаДокумента[0].НазначениеПлатежа;
		Если ТипЗнч(ТаблицаДокумента[0].Плательщик)=Тип("СправочникСсылка.Кассы") Тогда
			НовыйДокумент.Источник = ТаблицаДокумента[0].Плательщик;
			ИсточникТ = ТаблицаДокумента[0].Плательщик;
			НовыйДокумент.Контрагент = ТаблицаДокумента[0].Получатель;
			НовыйДокумент.ПриходРасход = 1;
		Иначе
			НовыйДокумент.Источник = ТаблицаДокумента[0].Получатель;
			ИсточникТ = ТаблицаДокумента[0].Получатель;
			НовыйДокумент.Контрагент = ТаблицаДокумента[0].Плательщик;
			НовыйДокумент.ПриходРасход = 0;
		КонецЕсли;
		Для Каждого ТекСтрокаДокумента Из ТаблицаДокумента Цикл
			НоваяСтрока = НовыйДокумент.ТабличнаяЧасть1.Добавить();							
			НоваяСтрока.ПредприятиеТ = ТекСтрокаДокумента.Подразделение;
			НоваяСтрока.СтатьяДДСТ = ТекСтрокаДокумента.Статья;
			НоваяСтрока.СуммаТ = ТекСтрокаДокумента.Сумма;
		КонецЦикла;
		Попытка
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить(ИнформацияОбОшибке().ИсходнаяСтрока);
			Сообщить(ИнформацияОбОшибке().Описание);
			НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
		Если ТипЗнч(ТекСтрокаДокумента.Платежка) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") Тогда
			ЗаявкаОбъект = ТекСтрокаДокумента.Платежка.ПолучитьОбъект();
			ЗаявкаОбъект.ЗаявкаБезнал[ТекСтрокаДокумента.НомерСтроки - 1].ПлатежноеПоручение = НовыйДокумент.Ссылка;
			ЗаявкаОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//создает прямые и непрямые движения на основании платежки и заявки
Процедура ДокументыНов(ТаблицаДокумента,ТаблицаДокументаВнутр) Экспорт
	Если ТаблицаДокументаВнутр.Количество() > 0 Тогда
		//Внутрихолдинговые по одному предприятию
		Для Каждого ТекСтрокаДокумента Из ТаблицаДокументаВнутр Цикл
			НовыйДокументВн = Документы.ГД_ДвиженияОбщий.СоздатьДокумент();
			НовыйДокументВн.ВидОперации = Перечисления.ВидОперации.ВНХДвижениеДС;
			НовыйДокументВн.Дата = ТекСтрокаДокумента.Дата;
			НовыйДокументВн.Агент = ТекСтрокаДокумента.Агент;
			НовыйДокументВн.Предприятие = ПП_Сервер.ПолучитьПредприятие(ТекСтрокаДокумента.Дата,ТекСтрокаДокумента.Получатель);
			НовыйДокументВн.ТипИсточника = ТекСтрокаДокумента.ТипИсточника;
			НовыйДокументВн.Автор = ПараметрыСеанса.ТекущийПользователь;
			НовыйДокументВн.Платежка = ТекСтрокаДокумента.Платежка;
			НовыйДокументВн.ВПодотчет = ТекСтрокаДокумента.Подотчет;
			НовыйДокументВн.Через = ТекСтрокаДокумента.Через;
			НовыйДокументВн.СтатьяВНХ = ТекСтрокаДокумента.Статья;
			НовыйДокументВн.Источник = ТекСтрокаДокумента.Плательщик;
			НовыйДокументВн.ИсточникПолучателя = ТекСтрокаДокумента.Получатель;
			НовыйДокументВн.СуммаРасход = ТекСтрокаДокумента.Сумма;
			НовыйДокументВн.Описание =  "" + ТекСтрокаДокумента.НазначениеПлатежа;
			НовыйДокументВн.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним);
			НовыйДокументВн.Записать();
			Если ТипЗнч(ТекСтрокаДокумента.Платежка) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") Тогда
				ЗаявкаОбъект = ТекСтрокаДокумента.Платежка.ПолучитьОбъект();
				ЗаявкаОбъект.ЗаявкаБезнал[ТекСтрокаДокумента.НомерСтроки - 1].ПлатежноеПоручение = НовыйДокументВн.Ссылка;
				ЗаявкаОбъект.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ТаблицаДокумента.Количество() > 0 Тогда
		
		//определяем ВидОперации (прямая/непрямая)
		ВидОперации = Перечисления.ВидОперации.ПрямоеДвижениеДС;
		РасшифровкаНужна = Ложь;
		Для каждого ТекСтрока Из ТаблицаДокумента Цикл
			Если НЕ БюджетныйНаСервере.ПрямыеРасходы(ТекСтрока.Агент, ТекСтрока.Подразделение) Тогда
				ВидОперации = Перечисления.ВидОперации.НепрямоеДвижениеДС;
				РасшифровкаНужна = Истина;
			КонецЕсли;
			Если НЕ ТекСтрока.Агент = ТекСтрока.Подразделение Тогда
				РасшифровкаНужна = Истина;
			КонецЕсли;
		КонецЦикла;
		Если ТаблицаДокумента.Количество() > 1 Тогда
			РасшифровкаНужна = Истина;		
		КонецЕсли;
		
		НовыйДокумент = Документы.ГД_ДвиженияОбщий.СоздатьДокумент();
		НовыйДокумент.ВидОперации = ВидОперации;
		НовыйДокумент.Дата = ТаблицаДокумента[0].Дата;
		НовыйДокумент.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним);
		НовыйДокумент.Агент = ТаблицаДокумента[0].Агент;
		НовыйДокумент.ТипИсточника = ТаблицаДокумента[0].ТипИсточника;
		НовыйДокумент.Автор = ПараметрыСеанса.ТекущийПользователь;
		НовыйДокумент.ВПодотчет = ТаблицаДокумента[0].Подотчет;
		НовыйДокумент.Через = ТаблицаДокумента[0].Через;
		НовыйДокумент.Платежка = ТаблицаДокумента[0].Платежка;
		НовыйДокумент.Описание =  "" + ТаблицаДокумента[0].НазначениеПлатежа;
		Если ТипЗнч(ТаблицаДокумента[0].Плательщик)=Тип("СправочникСсылка.Кассы") Тогда
			НовыйДокумент.Источник = ТаблицаДокумента[0].Плательщик;
			//ИсточникТ = ТаблицаДокумента[0].Плательщик;
			НовыйДокумент.Контрагент = ТаблицаДокумента[0].Получатель;
			НовыйДокумент.НепрямойПриход = "Расход";
		Иначе
			НовыйДокумент.Источник = ТаблицаДокумента[0].Получатель;
			//ИсточникТ = ТаблицаДокумента[0].Получатель;
			НовыйДокумент.Контрагент = ТаблицаДокумента[0].Плательщик;
			НовыйДокумент.НепрямойПриход = "Приход";
		КонецЕсли;
		
		//определяем нужна ли расшифровка для одной строки
		
		Если РасшифровкаНужна Тогда
			Для Каждого ТекСтрокаДокумента Из ТаблицаДокумента Цикл
				НоваяСтрока = НовыйДокумент.ТабличнаяЧасть1.Добавить();							
				НоваяСтрока.ПредприятиеТ = ТекСтрокаДокумента.Подразделение;
				НоваяСтрока.СтатьяДДСТ = ТекСтрокаДокумента.Статья;
				НоваяСтрока.СуммаТ = ТекСтрокаДокумента.Сумма;
			КонецЦикла;
			НовыйДокумент.ПрямойСписок = Истина;
		Иначе
			НовыйДокумент.СтатьяДДС = ТаблицаДокумента[0].Статья;
			Если ТипЗнч(ТаблицаДокумента[0].Плательщик)=Тип("СправочникСсылка.Кассы") Тогда
				НовыйДокумент.СуммаРасход = ТаблицаДокумента[0].Сумма;
			Иначе
				НовыйДокумент.СуммаПриход = ТаблицаДокумента[0].Сумма;
				
			КонецЕсли;
		КонецЕсли;
		
		//Попытка
		//	НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		//Исключение
		//	Сообщить(ИнформацияОбОшибке().ИсходнаяСтрока);
		//	Сообщить(ИнформацияОбОшибке().Описание);
		НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
		Если ТипЗнч(ТаблицаДокумента[0].Платежка) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") Тогда
			ЗаявкаОбъект = ТаблицаДокумента[0].Платежка.ПолучитьОбъект();
			ЗаявкаОбъект.ЗаявкаБезнал[ТаблицаДокумента[0].НомерСтроки - 1].ПлатежноеПоручение = НовыйДокумент.Ссылка;
			Сообщить(ЗаявкаОбъект.ЗаявкаБезнал[ТаблицаДокумента[0].НомерСтроки - 1].ПлатежноеПоручение);
			ЗаявкаОбъект.Записать();
		КонецЕсли;
		//КонецПопытки;
		//Если ТипЗнч(ТекСтрокаДокумента.Платежка) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") Тогда
		//	ЗаявкаОбъект = ТекСтрокаДокумента.Платежка.ПолучитьОбъект();
		//	ЗаявкаОбъект.ЗаявкаБезнал[ТекСтрокаДокумента.НомерСтроки - 1].ПлатежноеПоручение = НовыйДокумент.Ссылка;
		//	ЗаявкаОбъект.Записать();
		//КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//возвращает ссылку на актуальный сценарий по выбранной дате
Функция ПолучитьАктуальныйСценарий(ТекДата, Утвержден = Истина) Экспорт 
	
	СтруктураБюджетов = ПолучитьВидыБюджетовНаДату(ТекДата, Утвержден);
	
	Если НЕ ПустаяСтрока(СтруктураБюджетов.МесячныйБюджет) Тогда
		АктуальныйСценарий = СтруктураБюджетов.МесячныйБюджет;
	ИначеЕсли НЕ ПустаяСтрока(СтруктураБюджетов.КвартальныйБюджет) Тогда
		АктуальныйСценарий = СтруктураБюджетов.КвартальныйБюджет;
	ИначеЕсли НЕ ПустаяСтрока(СтруктураБюджетов.ГодовойБюджет) Тогда
		АктуальныйСценарий = СтруктураБюджетов.ГодовойБюджет;
	Иначе
		АктуальныйСценарий = Справочники.СценарииПланирования.ПустаяСсылка();
	КонецЕсли;
	
	Возврат АктуальныйСценарий;
	
КонецФункции // ПолучитьАктуальныйСценарий()

Процедура РасшифровкуНаПечать(ТабДок, ПараметрКоманды) Экспорт
	Отчеты.Д_Расшифровка.ЗаполнитьТаблицу(ТабДок, ПараметрКоманды);
КонецПроцедуры

//ищет подобные элементы в справочнике контрагенты
//поиск осуществляется на подобие наименование и по первым 3-м символам в названии
//в случае нахождения возвращает текст исходного запроса и структуру
Функция НайтиПодобныеЭлементыСправочника(Наименование) Экспорт
	Запрос = Новый Запрос;
	
	Параметр = Лев(Наименование, 4);
	
	Наименование2 = "%" + Наименование + "%";
	Параметр = "%" + Параметр + "%";
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Контрагенты.Ссылка,
	               |	Контрагенты.Наименование,
	               |	ЕСТЬNULL(ПроверкаОбъектовБД.Проверен, ИСТИНА) КАК Проверен,
	               |	Контрагенты.ИНН,
	               |	Контрагенты.Код,
	               |	Контрагенты.Описание
	               |ИЗ
	               |	Справочник.Контрагенты КАК Контрагенты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроверкаОбъектовБД КАК ПроверкаОбъектовБД
	               |		ПО Контрагенты.Ссылка = ПроверкаОбъектовБД.Объект
	               |ГДЕ
	               |	(Контрагенты.Наименование ПОДОБНО &Наименование
	               |			ИЛИ Контрагенты.Наименование ПОДОБНО &Параметр)"; 
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Наименование", Наименование2);
	Запрос.УстановитьПараметр("Параметр", Параметр);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("ТекстЗапроса, Наименование, Параметр", ТекстЗапроса, Наименование2, Параметр);	 
	Иначе
		Возврат ЛОЖЬ;
	КонецЕсли;
	
КонецФункции // (

//создает новый элемент файл в виде ссылки на файл
//МойФайл - двоичные данные
Функция ЗагрузитьИСоздатьЭлементФайл(ПутьКФайлу, ИмяФайла, ТекРазмер) Экспорт
	НовФайл = Справочники.Файлы.СоздатьЭлемент();
	НовФайл.Наименование = ИмяФайла;
	//Если СсылкаФайл = ПутьКФайлу Тогда
	//ФайлХранилище = Новый ХранилищеЗначения(МойФайл);
	//НовФайл.ФайлХранилище = ФайлХранилище;
	//КонецЕсли;
	НовФайл.ПутьКФайлу = ПутьКФайлу;
	НовФайл.Размер = ТекРазмер / 1024;
	НовФайл.ВидФайла = "ДругойФайл";
	НовФайл.Записать();
	Возврат НовФайл.Ссылка;
КонецФункции

Функция ПолучитьДатуЗапрета() Экспорт
	Возврат Дата('00010101');
КонецФункции // ()

//возвращает стаку акциза на дату
Функция ВернутьТекСтавку(ТекДата, Номенклатура) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Д_СтавкиАкцизаСрезПоследних.СтавкаАкциза
	|ИЗ
	|	РегистрСведений.Д_СтавкиАкциза.СрезПоследних(&Дата, Номенклатура = &Номенклатура) КАК Д_СтавкиАкцизаСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", ТекДата);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.СтавкаАкциза;	
	Иначе
		Возврат 0;
	КонецЕсли;;
КонецФункции

//проверяет принадлежность пользователя указанной группе
Функция ПроверитьПринадлежностьГруппе(ТекПользователь, Группа) Экспорт
	ТекГруппа = Справочники.Пользователи.НайтиПоНаименованию(Группа, Истина);
	Возврат ТекПользователь.ПринадлежитЭлементу(ТекГруппа);
	
КонецФункции // ()

//валюта по умолчанию - российский рубль
Функция ВалютаПоУмолчанию() Экспорт
	
	Возврат УЧ_Сервер.НациональнаяВалюта();	
	
КонецФункции // ()

Функция ТекущийКурс(Валюта, Дата, Предприятие) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КурсыВалютСрезПоследних.Курс КАК Курс
	               |ИЗ
	               |	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &ПредприятиеВалюта) КАК КурсыВалютСрезПоследних
	               |ГДЕ
	               |	КурсыВалютСрезПоследних.Валюта = &Валюта";
	
	Запрос.УстановитьПараметр("Валюта", Валюта);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ПредприятиеВалюта", Предприятие.ОсновнаяВалютаУчета);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Курс;
	Иначе
		Возврат 1; 
	КонецЕсли;	
	
КонецФункции // ()

//сумма прописью
Функция ФорматироватьСуммуПрописьюПлатежногоДокумента(Сумма, Валюта = Неопределено, ВыводитьСуммуБезКопеек = Ложь) Экспорт
	
	Результат     = Сумма;
	ЦелаяЧасть    = Цел(Сумма);
	ФорматСтрока  = "Л=ru_RU; ДП=Ложь";
	Если Валюта = Неопределено Тогда
		ПарамПредмета = УЧ_Сервер.НациональнаяВалюта().ПараметрыПрописи;
	Иначе
		ПарамПредмета = Валюта.ПараметрыПрописи;
	КонецЕсли;
	
	
	Если Результат = ЦелаяЧасть Тогда
		Если ВыводитьСуммуБезКопеек Тогда
			Результат = ЧислоПрописью(Результат, ФорматСтрока, ПарамПредмета);
			Результат = Лев(Результат, Найти(Результат, "0") - 1);
		Иначе
			Результат = ЧислоПрописью(Результат, ФорматСтрока, ПарамПредмета);
		КонецЕсли;
	Иначе
		Результат = ЧислоПрописью(Результат, ФорматСтрока, ПарамПредмета);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ФорматироватьСуммуПрописьюПлатежногоДокумента()

Процедура УстановитьПользователя(Элемент, СтруктураПользователя = Неопределено, ПривилегированныйРежим = Ложь) Экспорт
	
	Если ПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Если СтруктураПользователя = Неопределено Тогда
		ТекЭлемент = Элемент;
	Иначе
		ТекЭлемент = СтруктураПользователя;	
	КонецЕсли;
	
	ПараметрыСеанса.ТекущийПользователь = Элемент;
	 	
	//доступные направления
	//ПараметрыСеанса.ОграничиватьНаправления = ТекЭлемент.ОграничитьНаправления;
	СтруктураНаправлений = БПСервер.ДоступныеНаправления(Элемент);
	ПараметрыСеанса.ДоступныеНаправления = Новый ФиксированныйМассив(СтруктураНаправлений.ДоступныеНаправления);
	ПараметрыСеанса.НеДоступныеНаправления = Новый ФиксированныйМассив(СтруктураНаправлений.НеДоступныеНаправления);
	
	//доступные пользователи
	ПараметрыСеанса.ДоступныеПользователи = Новый ФиксированныйМассив(БПСервер.ПолучитьМассивПользователей());
	
	//доступные предприятия
	МассивПредприятий = ПолучитьПредприятия();
	ПараметрыСеанса.ДоступныеПредприятия = Новый ФиксированныйМассив(МассивПредприятий);
	
	Если МассивПредприятий.Количество() = 1 Тогда 
		ПараметрыСеанса.ТекущееПредприятие = МассивПредприятий[0];	
		//ИначеЕсли НЕ Константы.сабИспользоватьНесколькоПредприятий.Получить() Тогда 
		//	ПараметрыСеанса.ТекущееПредприятие = Константы.сабОсновноеПредприятие.Получить();  
	Иначе
		Для каждого ЭлементПредприятие Из МассивПредприятий Цикл
			Если ЭлементПредприятие.ИспользоватьПоУмолчанию Тогда
				ПараметрыСеанса.ТекущееПредприятие = ЭлементПредприятие;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ПараметрыСеанса.РольАдминаДоступна = РольДоступна("Администратор");
	
	//доступные подразделения
	ПараметрыСеанса.ДоступныеПодразделения = Новый ФиксированныйМассив(ПолучитьПодразделения(МассивПредприятий));
	
	Если ПараметрыСеанса.ДоступныеПодразделения.Количество() = 1 Тогда
		ПараметрыСеанса.ТекущееПодразделение = ПараметрыСеанса.ДоступныеПодразделения[0];
	КонецЕсли;
	
	//доступные источники
	Если ПараметрыСеанса.ДоступныеИсточники.Количество()=0 Тогда 
		ПараметрыСеанса.ДоступныеИсточники = Новый ФиксированныйМассив(ПолучитьМассивИсточников());
	КонецЕсли;
	
	// di 14.03.13 
	ПараметрыСеанса.ДоступныеСчета = Новый ФиксированныйМассив(ПолучитьМассивСчетов());
	
	ПараметрыСеанса.ОграничиватьПодразделения = ТекЭлемент.ОграничениеПодразделений;
	ПараметрыСеанса.ОграничиватьПредприятия = ТекЭлемент.ДоступныПредприятияИзСписка;
	
	МассивПредприятийПросмотр = ПолучитьПредприятияПросмотр(МассивПредприятий);
	ПараметрыСеанса.ДоступныеПредприятияПросмотр = Новый ФиксированныйМассив(МассивПредприятийПросмотр);
	
	//смсКоммуникатор.УстановитьИмяПользователяИПароль(Константы.смсИмяПользователя.Получить(), Константы.смсПарольПользователя.Получить());
	
	Если ПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПредприятияПросмотр(ДоступныеПредприятия)
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//|	ПользователиДоступныеПредприятие.Предприятие
	//|ИЗ
	//|	Справочник.Пользователи.ДоступныеПредприятие КАК ПользователиДоступныеПредприятие
	//|ГДЕ
	//|	ПользователиДоступныеПредприятие.Ссылка В(&Ссылка)
	//|	И ПользователиДоступныеПредприятие.ТолькоПросмотр = ИСТИНА";
	//
	//Запрос.УстановитьПараметр("Ссылка", ПараметрыСеанса.ДоступныеПользователи);
	//
	//Результат = Запрос.Выполнить();
	//Возврат Результат.Выгрузить().ВыгрузитьКолонку("Предприятие");
	
	 возврат Новый Массив; //нужно доработать предприятия на только просмотр
	
	
КонецФункции // ()

Функция ПолучитьМассивИсточников(ТекДата = Неопределено) Экспорт
	Если ПараметрыСеанса.ДоступныеИсточники.Количество() Тогда
		Массив = Новый Массив;
		Для Каждого ЭлементФиксМассива ИЗ ПараметрыСеанса.ДоступныеИсточники Цикл
			Массив.Добавить(ЭлементФиксМассива);
		КонецЦикла;
		Возврат Массив;	
	КонецЕсли;
	
	МассивЮрЛиц = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Д_ИсточникППСрезПоследних.БанковскиеСчета
	               |ИЗ
	               |	РегистрСведений.Д_ИсточникПП.СрезПоследних(&ТекДата, ) КАК Д_ИсточникППСрезПоследних
	               |ГДЕ
	               |	(Д_ИсточникППСрезПоследних.Предприятие В (&ДоступныеПредприятия)
	               |			ИЛИ Д_ИсточникППСрезПоследних.Предприятие В
	               |				(ВЫБРАТЬ
	               |					Предприятия.Родитель
	               |				ИЗ
	               |					Справочник.Предприятия КАК Предприятия
	               |				ГДЕ
	               |					Предприятия.Ссылка В (&ДоступныеПредприятия)))
	               |	И НЕ Д_ИсточникППСрезПоследних.Предприятие = ЗНАЧЕНИЕ(Справочник.Предприятия.ПустаяСсылка)
	               |	И НЕ &ОграничениеИсточников
	               |	И ТИПЗНАЧЕНИЯ(Д_ИсточникППСрезПоследних.БанковскиеСчета) = ТИП(Справочник.БанковскиеСчета)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Д_ИсточникППСрезПоследних.БанковскиеСчета
	               |ИЗ
	               |	РегистрСведений.Д_ИсточникПП.СрезПоследних(&ТекДата, ) КАК Д_ИсточникППСрезПоследних
	               |ГДЕ
	               |	НЕ Д_ИсточникППСрезПоследних.Предприятие = ЗНАЧЕНИЕ(Справочник.Предприятия.ПустаяСсылка)
	               |	И НЕ &ОграничениеИсточников
	               |	И ТИПЗНАЧЕНИЯ(Д_ИсточникППСрезПоследних.БанковскиеСчета) = ТИП(Справочник.Кассы)
	               |	И Д_ИсточникППСрезПоследних.БанковскиеСчета.Подразделение В(&ДоступныеПодразделения)
	               |	И (Д_ИсточникППСрезПоследних.Предприятие В (&ДоступныеПредприятия)
	               |			ИЛИ Д_ИсточникППСрезПоследних.Предприятие В
	               |				(ВЫБРАТЬ
	               |					Предприятия.Родитель
	               |				ИЗ
	               |					Справочник.Предприятия КАК Предприятия
	               |				ГДЕ
	               |					Предприятия.Ссылка В (&ДоступныеПредприятия)))";
	
	Запрос.УстановитьПараметр("ДоступныеПредприятия", ПараметрыСеанса.ДоступныеПредприятия);
	Запрос.УстановитьПараметр("ДоступныеПодразделения", ПараметрыСеанса.ДоступныеПодразделения);
	Запрос.УстановитьПараметр("ТекДата", ?(ТекДата = Неопределено, ТекущаяДата(), ТекДата));
	Запрос.УстановитьПараметр("ОграничениеИсточников", ПараметрыСеанса.ТекущийПользователь.ОграничениеИсточников);
	Результат = Запрос.Выполнить();
	ТекМассив = Результат.Выгрузить().ВыгрузитьКолонку("БанковскиеСчета");
	Для каждого ТекПользователь Из ПараметрыСеанса.ДоступныеПользователи Цикл
		Если НЕ ТипЗнч(ТекПользователь) = Тип("СправочникСсылка.Пользователи") Тогда Продолжить; КонецЕсли;
		Для каждого ТекСтрока Из ТекПользователь.ДоступныеИсточники Цикл
			Если ЗначениеЗаполнено(ТекСтрока.Источник) Тогда
				Если ТипЗнч(ТекСтрока.Источник) = Тип("СправочникСсылка.Кассы") Тогда
					ТекМассив.Добавить(ТекСтрока.Источник);
				Иначе
					МассивЮрЛиц.Добавить(ТекСтрока.Источник);				
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
	КонецЦикла;
	
	//добавляем банковские счета юрлиц
	Если МассивЮрЛиц.Количество() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	БанковскиеСчета.Источник
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.Владелец В(&Владелец)";
		
		Запрос.УстановитьПараметр("Владелец", МассивЮрЛиц);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Источник) Тогда
				ТекМассив.Добавить(Выборка.Источник);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТекМассив;
КонецФункции

Функция ПолучитьМассивСчетов()
	
	// di 14.03.13
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПользователиДосупныеСчета.Счет КАК Счет,
	               |	МИНИМУМ(ПользователиДосупныеСчета.Ссылка.ОграничениеСчетов) КАК ОграничениеСчетов,
	               |	МИНИМУМ(ПользователиДосупныеСчета.Ссылка.РазрешитьВсеСчетаКроме) КАК РазрешитьВсеСчетаКроме
	               |ПОМЕСТИТЬ СчетаПользователя
	               |ИЗ
	               |	Справочник.Пользователи.ДосупныеСчета КАК ПользователиДосупныеСчета
	               |ГДЕ
	               |	ПользователиДосупныеСчета.Ссылка В ИЕРАРХИИ(&ДоступныеПользователи)
	               |	И НЕ ИСТИНА В
	               |				(ВЫБРАТЬ
	               |					ИСТИНА КАК Поле1
	               |				ИЗ
	               |					Справочник.Пользователи КАК Пользователи
	               |				ГДЕ
	               |					Пользователи.ОграничениеСчетов = ЛОЖЬ
	               |					И Пользователи.Ссылка В ИЕРАРХИИ (&ДоступныеПользователи))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПользователиДосупныеСчета.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Учетный.Ссылка КАК Счет,
	               |	Учетный.Код КАК Код,
	               |	Учетный.КодБыстрогоВыбора КАК КодБыстрогоВыбора
	               |ИЗ
	               |	ПланСчетов.Учетный КАК Учетный
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА ИСТИНА В
	               |					(ВЫБРАТЬ
	               |						СчетаПользователя.РазрешитьВсеСчетаКроме КАК РазрешитьВсеСчетаКроме
	               |					ИЗ
	               |						СчетаПользователя КАК СчетаПользователя)
	               |				ТОГДА НЕ Учетный.Ссылка В
	               |							(ВЫБРАТЬ
	               |								СчетаПользователя.Счет КАК Счет
	               |							ИЗ
	               |								СчетаПользователя КАК СчетаПользователя)
	               |			ИНАЧЕ ЛОЖЬ
	               |		КОНЕЦ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	СчетаПользователя.Счет,
	               |	СчетаПользователя.Счет.Код,
	               |	СчетаПользователя.Счет.КодБыстрогоВыбора
	               |ИЗ
	               |	СчетаПользователя КАК СчетаПользователя
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА ИСТИНА В
	               |					(ВЫБРАТЬ
	               |						СчетаПользователя.ОграничениеСчетов КАК ОграничениеСчетов
	               |					ИЗ
	               |						СчетаПользователя КАК СчетаПользователя
	               |					ГДЕ
	               |						СчетаПользователя.РазрешитьВсеСчетаКроме = ЛОЖЬ)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЛОЖЬ
	               |		КОНЕЦ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	КодБыстрогоВыбора";
	
	Запрос.УстановитьПараметр("ДоступныеПользователи", ПараметрыСеанса.ДоступныеПользователи);
	
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("Счет");
	
КонецФункции

Процедура НайтиИУстановитьПользователя(ТекСтру) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Пользователи.Ссылка,
	               |	Пользователи.ОтключитьКонтрольМонопольногоВхода,
	               |	Пользователи.ОповещениеВсплывающееОкно,
	               |	ВЫБОР
	               |		КОГДА ИСТИНА В
	               |					(ВЫБРАТЬ
	               |						ВЫБОР
	               |							КОГДА НЕ ОсновныеДолжностиПредприятия.Подразделение ЕСТЬ NULL 
	               |									И НЕ ОсновныеДолжностиПредприятия.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	               |								ТОГДА ИСТИНА
	               |							ИНАЧЕ ЛОЖЬ
	               |						КОНЕЦ КАК Поле1
	               |					ИЗ
	               |						РегистрСведений.ОсновныеДолжностиПредприятия КАК ОсновныеДолжностиПредприятия
	               |					ГДЕ
	               |						ОсновныеДолжностиПредприятия.Сотрудник.Наименование В (&Наименование))
	               |				И ИСТИНА В
	               |					(ВЫБРАТЬ
	               |						Пользователи.ДоступныПредприятияИзСписка
	               |					ИЗ
	               |						Справочник.Пользователи КАК Пользователи
	               |					ГДЕ
	               |						Пользователи.Наименование В (&Наименование))
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ОграничениеПодразделений,
	               |	Пользователи.ДоступныПредприятияИзСписка,
	               |	Пользователи.РелизПлатформы,
	               |	ВЫБОР
	               |		КОГДА Пользователи.Ссылка В ИЕРАРХИИ (&ГруппаОСЗ)
	               |				И Пользователи.ПометкаУдаления = ИСТИНА
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ПользовательОСЗ,
	               |	Пользователи.ПометкаУдаления,
	               |	Пользователи.ВариантИнтерфейса,
	               |	ВЫБОР
	               |		КОГДА Пользователи.Ссылка В ИЕРАРХИИ (&ГруппаДив3)
	               |				И Пользователи.ПометкаУдаления = ИСТИНА
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ПользовательДив3
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |ГДЕ
	               |	Пользователи.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", ТекСтру.Наименование);
	
	ГруппаUSF = Справочники.Пользователи.НайтиПоНаименованию("USF", Истина);
	ГруппаДив3 = Справочники.Пользователи.НайтиПоНаименованию("Див3", Истина);
	Запрос.УстановитьПараметр("ГруппаОСЗ", ?(ЗначениеЗаполнено(ГруппаUSF), ГруппаUSF, Неопределено));
	
	
	Запрос.УстановитьПараметр("ГруппаДив3", ?(ЗначениеЗаполнено(ГруппаДив3), ГруппаДив3, Неопределено));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		//ТекСтру = Новый Структура;
		ТекСтру.Вставить("Найден", Истина);
		ТекСтру.Вставить("ПользовательОСЗ", Выборка.ПользовательОСЗ);
		ТекСтру.Вставить("ПользовательДив3", Выборка.ПользовательДив3);
		ТекСтру.Вставить("ПометкаУдаления", Выборка.ПометкаУдаления);
		ТекСтру.Вставить("Пользователь", Выборка.Ссылка);
		ТекСтру.Вставить("ДатаПоследнегоВхода", ТекущаяДата());
		ТекСтру.Вставить("ОповещениеВсплывающееОкно", Выборка.ОповещениеВсплывающееОкно);
		//ТекСтру.Вставить("ОграничитьНаправления", Выборка.ОграничитьНаправления);
		ТекСтру.Вставить("ОграничениеПодразделений", Выборка.ОграничениеПодразделений);
		ТекСтру.Вставить("ДоступныПредприятияИзСписка", Выборка.ДоступныПредприятияИзСписка);
		
		СистемнаяИнф = Новый СистемнаяИнформация;
		
		Если Не ЗначениеЗаполнено(Выборка.РелизПлатформы) Тогда
			ТекСтру.Вставить("РелизПлатформы", СистемнаяИнф.ВерсияПриложения);
		Иначе
			ТекСтру.Вставить("РелизПлатформы", Выборка.РелизПлатформы);
		КонецЕсли;
		
		ТекСтру.Вставить("ПолучитьРелизОбновленияНаСервере", "");  
		ТекСтру.Вставить("Пароль", "");
		ТекСтру.Вставить("РольАдмина", БюджетныйНаСервере.РольАдминаДоступнаСервер());
		ТекСтру.Вставить("ВариантИнтерфейса", Выборка.ВариантИнтерфейса);
		//Для каждого ТекПольз Из СтруктураТекПользователь Цикл
		//	ТекСтру.Вставить(ТекПольз.Ключ, ТекПольз.Значение);
		//КонецЦикла; 
		
		УстановитьПользователя(Выборка.Ссылка, ТекСтру, Истина);
		ТекСтру.Вставить("СоответствиеПользователяИКомпьютера", БюджетныйНаСервере.СоответствиеПользователяИКомпьютера());
		ТекСтру.Вставить("ПроверитьМонопольностьВхода", БюджетныйНаСервере.ПроверитьМонопольностьВхода());
		
		//Возврат ТекСтру
	Иначе
		ТекСтру =  Новый Структура("Найден", Ложь);
	КонецЕсли;
	
	ПараметрыСеанса.ДопПараметры = Новый ФиксированнаяСтруктура(ТекСтру);
	
КонецПроцедуры

Процедура ОбновитьЛогПользователя(ИмяКомпа, ЭтоЗавершениеРаботы = Ложь, IP = "", ПользовательWindows = "") Экспорт
	
	#Если Не ВебКлиент И Не МобильныйКлиент И Не МобильноеПриложениеКлиент Тогда
		
		Если Не ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПользователь) Тогда
			Возврат;		
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ЛогированиеВходаПользователейВБазу.Пользователь,
		               |	ЛогированиеВходаПользователейВБазу.ИмяКомпьютера
		               |ИЗ
		               |	РегистрСведений.ЛогированиеВходаПользователейВБазу КАК ЛогированиеВходаПользователейВБазу
		               |ГДЕ
		               |	ЛогированиеВходаПользователейВБазу.Пользователь = &Пользователь
		               |	И ЛогированиеВходаПользователейВБазу.ИмяКомпьютера = &ИмяКомпьютера";
		Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
		Запрос.УстановитьПараметр("ИмяКомпьютера", ?(ЗначениеЗаполнено(ИмяКомпа), ИмяКомпа, "Веб-клиент"));
		РезультатЗапроса = Запрос.Выполнить();
		//Если РезультатЗапроса.Пустой() Тогда
		//	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Пользователь %1 зашел с нового компьютера %2", ПараметрыСеанса.ТекущийПользователь, ?(ЗначениеЗаполнено(ИмяКомпа), ИмяКомпа, "Веб-клиент"));
		//	сабВнутреннийЧатСервер.СоздатьНовоеСообщениеЧата(Неопределено, ТекстСообщения, Истина, Ложь, Справочники.Пользователи.НайтиПоНаименованию("Система", Истина)); 
		//КонецЕсли;
		
		//запишем данные о входе пользователя в базу
		НаборЗаписей = РегистрыСведений.ЛогированиеВходаПользователейВБазу.СоздатьНаборЗаписей();
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.Дата 			= ТекущаяДата();
		НоваяЗапись.Пользователь 	= ПараметрыСеанса.ТекущийПользователь;
		НоваяЗапись.ИмяКомпьютера 	= ?(ЗначениеЗаполнено(ИмяКомпа), ИмяКомпа, "Веб-клиент");
		НоваяЗапись.ТипПодключения 	= ТекущийРежимЗапуска();
		НоваяЗапись.Действие 		= ?(ЭтоЗавершениеРаботы, "Завершение работы", "Начало работы");
		НоваяЗапись.IP = IP;
		НоваяЗапись.ПользовательWindows = ПользовательWindows;
		НаборЗаписей.Записать(Ложь);
		
		Если ЭтоЗавершениеРаботы Тогда
			Возврат;
		КонецЕсли;	
		
		ПараметрыСеанса.УстановленРежимГорячейЛинии = РежимГорячейЛинии1С();
		
		//НаборЗаписейДопСвойства = РегистрыСведений.ДополнительныеСвойстваПользователя.СоздатьНаборЗаписей();
		//НаборЗаписейДопСвойства.Отбор.Пользователь.Установить(ПараметрыСеанса.ТекущийПользователь);
		//НаборЗаписейДопСвойства.Прочитать();
		//НаборЗаписейДопСвойства.Очистить();
		//Запись = НаборЗаписейДопСвойства.Добавить();
		//Запись.Пользователь = ПараметрыСеанса.ТекущийПользователь;
		//Запись.ДатаПоследнегоВхода = ТекущаяДата();
		//Запись.РежимГорячейЛинии = Ложь;
		//Запись.ОтключитьОтображениеПодсистем = Истина;
		//Запись.сабИспользоватьНесколькоПредприятий = НЕ ЗначениеЗаполнено(ПараметрыСеанса.ТекущееПредприятие);
		//НаборЗаписейДопСвойства.Записать();
		
		//рег сведений компьютеры пользователей
		
		МенеджерЗаписи = РегистрыСведений.КомпьютерыПользователей.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Пользователь = сабОбщегоНазначения.ТекущийПользователь();
		МенеджерЗаписи.Компьютер    = ?(ЗначениеЗаполнено(ИмяКомпа), ИмяКомпа, "Веб-клиент");
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.КоличествоВходов = МенеджерЗаписи.КоличествоВходов + 1;
		Иначе
			МенеджерЗаписи.Пользователь = сабОбщегоНазначения.ТекущийПользователь();
			МенеджерЗаписи.Компьютер    = ?(ЗначениеЗаполнено(ИмяКомпа), ИмяКомпа, "Веб-клиент");
			МенеджерЗаписи.КоличествоВходов = 1;
		КонецЕсли;
		МенеджерЗаписи.Записать();
		
		УстановитьПривилегированныйРежим(Ложь);
		
	#КонецЕсли
	
КонецПроцедуры

Функция СоответствиеПользователяИКомпьютера() Экспорт
	
	#Если ВебКлиент Или МобильныйКлиент Или МобильноеПриложениеКлиент Тогда
		Возврат Истина;	 
	#КонецЕсли 
	
	
	Если Истина Тогда
		// 06.06.2012 компьютеры пользователей
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекПользователь", Справочники.Пользователи.НайтиПоНаименованию(ИмяПользователя()));
		Запрос.УстановитьПараметр("ТекКомпьютер", ИмяКомпьютера());
		Запрос.Текст = "ВЫБРАТЬ
		|	КомпьютерыПользователей.Пользователь,
		|	КомпьютерыПользователей.Компьютер,
		|	КомпьютерыПользователей.НачальныеДанные
		|ИЗ
		|	РегистрСведений.КомпьютерыПользователей КАК КомпьютерыПользователей
		|ГДЕ
		|	КомпьютерыПользователей.Пользователь = &ТекПользователь
		|	И КомпьютерыПользователей.Компьютер = &ТекКомпьютер
		|	И КомпьютерыПользователей.НачальныеДанные = ИСТИНА";
		
		ТЗ = Запрос.Выполнить().Выгрузить();	
		СоответствиеКП = ?(ТЗ.Количество() > 0, Истина, Ложь);
	КонецЕсли;
	
	//Если Константы.КонтрольДоступа.Получить() = Ложь ИЛИ ПараметрыСеанса.РольАдминаДоступна Тогда
		СоответствиеКП = Истина;
	//КонецЕсли;
	
	Возврат СоответствиеКП;
	
КонецФункции	

//Возвращаемые значения:
//	Структура("РезультатПроверки, ВключитьКонтрольВхода, Хозяин"),
//		РезультатПроверки:
//		0: вход разрешен
//		1: запросить соответвие компьютера и пользователя
//		2: данный комп привязан к другому пользователю
Функция ПроверитьСоответствиеКомпьютераИПользователя() Экспорт
	
	ТекущийПользователь = сабОбщегоНазначения.ТекущийПользователь();
	СтруктураРезультат = Новый Структура("РезультатПроверки, ВключитьКонтрольВхода, Хозяин");
	СтруктураРезультат.ВключитьКонтрольВхода = ТекущийПользователь.ВключитьКонтрольВхода;
	
	Если РольДоступна("Администратор") Тогда
		СтруктураРезультат.РезультатПроверки = 0;
		Возврат СтруктураРезультат;
	КонецЕсли;
	
	//На не личных компьютерах контроль не осуществляем
	ОбщественныеКомпьютеры = новый Массив;
	//ОбщественныеКомпьютеры.Добавить("DMZ-APP5");
	ОбщественныеКомпьютеры.Добавить("APP0");
	Если ОбщественныеКомпьютеры.Найти(ИмяКомпьютера()) <> Неопределено Тогда
		СтруктураРезультат.РезультатПроверки = 0;
		Возврат СтруктураРезультат;
	КонецЕсли;
	
	//если компьютер привязан к пользователю, возвращаем 0
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("Компьютер",    ИмяКомпьютера());
	Запрос.Текст = "ВЫБРАТЬ
	               |	1 КАК Поле1
	               |ИЗ
	               |	РегистрСведений.КомпьютерыПользователей КАК КомпьютерыПользователей
	               |ГДЕ
	               |	КомпьютерыПользователей.Компьютер = &Компьютер
	               |	И КомпьютерыПользователей.Пользователь = &Пользователь
	               |	И КомпьютерыПользователей.Основной";
	Если Не Запрос.Выполнить().Пустой() Тогда
		СтруктураРезультат.РезультатПроверки = 0;
		Возврат СтруктураРезультат;
	КонецЕсли;
	
	//Проверяем, привязан ли компьютер к другому пользователю
	Запрос.Текст = "ВЫБРАТЬ
	               |	КомпьютерыПользователей.Пользователь
	               |ИЗ
	               |	РегистрСведений.КомпьютерыПользователей КАК КомпьютерыПользователей
	               |ГДЕ
	               |	КомпьютерыПользователей.Компьютер = &Компьютер
	               |	И КомпьютерыПользователей.Основной";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураРезультат.РезультатПроверки = 2;
		СтруктураРезультат.Хозяин = Выборка.Пользователь;
		Возврат СтруктураРезультат;
	Иначе
		СтруктураРезультат.РезультатПроверки = 1;
		Возврат СтруктураРезультат;
	КонецЕсли;
	
	
КонецФункции

Функция РольДоступнаСервер(Роль) Экспорт
	Возврат РольДоступна(Роль);
КонецФункции // ()

Функция КоличествоСубконто(Счет) Экспорт
	Попытка
		КолСубконто = Счет.ВидыСубконто.Количество();	
	Исключение
		КолСубконто = 0;
	КонецПопытки;
	Возврат КолСубконто;
КонецФункции 

Процедура УЧОбработкаПредприятияОбработкаПроверкиЗаполнения(Источник, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	//ТекСтрокаОбъект = Источник;
	//ТипДляПроверки = Тип("СправочникСсылка.Предприятия");
	//
	//ТипДляПроверки2 = Тип("ПланСчетовСсылка.Учетный");
	//
	//Для каждого ТабличнаяЧасть Из ТекСтрокаОбъект.Метаданные().ТабличныеЧасти Цикл
	//	ТабличнаяЧастьИмя = ТабличнаяЧасть.Имя;
	//	ДанныеТЗ = ТекСтрокаОбъект[ТабличнаяЧастьИмя];
	//	ТабЗнач = ДанныеТЗ.Выгрузить();
	//	
	//	
	//	//ищем элемент в табличных частях
	//	Для КолонкиТЗ = 0 По ТабЗнач.Колонки.Количество() - 1 Цикл
	//		Для СтрочкиТЗ = 0 По ТабЗнач.Количество() - 1 Цикл
	//			Если ТипЗнч(ТабЗнач[СтрочкиТЗ][КолонкиТЗ]) = ТипДляПроверки Тогда
	//				Если НЕ ТабЗнач[СтрочкиТЗ][КолонкиТЗ].Учет И НЕ ПустаяСтрока(ТабЗнач[СтрочкиТЗ][КолонкиТЗ]) Тогда
	//					сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(
	//					ТекСтрокаОбъект,
	//					"В табличной части " + ТабличнаяЧастьИмя + " в строке " + Строка(СтрочкиТЗ + 1) + " выбрано неверное предприятие " + Строка(ТабЗнач[СтрочкиТЗ][КолонкиТЗ])  + ". По данному предприятию учет не ведется.",
	//					ТабличнаяЧастьИмя,
	//					СтрочкиТЗ + 1,
	//					ТабЗнач.Колонки[КолонкиТЗ].Имя,
	//					Отказ);
	//				КонецЕсли;
	//			КонецЕсли;
	//			
	//			Если ТипЗнч(ТабЗнач[СтрочкиТЗ][КолонкиТЗ]) = ТипДляПроверки2 Тогда
	//				Если ТабЗнач[СтрочкиТЗ][КолонкиТЗ].ЗапретитьИспользоватьВПроводках И НЕ ПустаяСтрока(ТабЗнач[СтрочкиТЗ][КолонкиТЗ]) Тогда
	//					сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(
	//					ТекСтрокаОбъект,
	//					"В табличной части " + ТабличнаяЧастьИмя + " в строке " + Строка(СтрочкиТЗ + 1) + " неверно выбран счет " + Строка(ТабЗнач[СтрочкиТЗ][КолонкиТЗ])  + ". По данному счету проводки невозможны.",
	//					ТабличнаяЧастьИмя,
	//					СтрочкиТЗ + 1,
	//					ТабЗнач.Колонки[КолонкиТЗ].Имя,
	//					Отказ);
	//				КонецЕсли;
	//			КонецЕсли;
	//			
	//			
	//		КонецЦикла;
	//	КонецЦикла;
	//	ТекСтрокаОбъект[ТабличнаяЧастьИмя].Загрузить(ТабЗнач);
	//КонецЦикла;
	//
	////ищем взначение в реквизитах
	//Для каждого Реквизит Из ТекСтрокаОбъект.Метаданные().Реквизиты Цикл
	//	РеквизитИмя = Реквизит.Имя;
	//	
	//	
	//	Если ТипЗнч(ТекСтрокаОбъект[РеквизитИмя]) = ТипДляПроверки Тогда
	//		Если НЕ ТекСтрокаОбъект[РеквизитИмя].Учет И НЕ ПустаяСтрока(ТекСтрокаОбъект[РеквизитИмя]) Тогда
	//			сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(
	//			ТекСтрокаОбъект,
	//			"Реквизит " + РеквизитИмя + " содержит неверное предприятие " + Строка(ТекСтрокаОбъект[РеквизитИмя])  + ". По данному предприятию учет не ведется.",
	//			,
	//			,
	//			РеквизитИмя,
	//			Отказ);				
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//	Если ТипЗнч(ТекСтрокаОбъект[РеквизитИмя]) = ТипДляПроверки2 Тогда
	//		Если ТекСтрокаОбъект[РеквизитИмя].ЗапретитьИспользоватьВПроводках И НЕ ПустаяСтрока(ТекСтрокаОбъект[РеквизитИмя]) Тогда
	//			сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(
	//			ТекСтрокаОбъект,
	//			"Реквизит " + РеквизитИмя + " содержит неверный счет " + Строка(ТекСтрокаОбъект[РеквизитИмя])  + ". По данному счету проводки невозможны.",
	//			,
	//			,
	//			РеквизитИмя,
	//			Отказ);				
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДоступныеИточники() Экспорт
	ТекПользователи = БПСервер.ПолучитьМассивПользователей();
	МассивИсточников = Новый Массив;
	Ограничение = Ложь;
	Для каждого ТекПользователь Из ТекПользователи Цикл
		Если ТекПользователь.ОграничениеИсточников Тогда
			Для каждого ТекИсточник Из ПараметрыСеанса.ТекущийПользователь.ДоступныеИсточники Цикл
				МассивИсточников.Добавить(ТекИсточник.Источник);	
			КонецЦикла; 	
			Ограничение = Истина;
		Иначе
			Ограничение = Ложь;
			МассивИсточников = Новый Массив;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Новый Структура("Ограничение, ДоступныеИсточники", Ограничение, МассивИсточников);	
КонецФункции // ()

Функция ПолучитьДоступнуюНоменклатуру() Экспорт
	ТекПользователи = БПСервер.ПолучитьМассивПользователей();
	МассивНоменклатуры = Новый Массив;
	МассивТиповНоменклатуры = Новый Массив;
	Ограничение = Ложь;
	Для каждого ТекПользователь Из ТекПользователи Цикл
		Если ТекПользователь.ОграничитьНоменклатуру Тогда
			Для каждого ТекИсточник Из ПараметрыСеанса.ТекущийПользователь.ДоступнаяНоменклатура Цикл
				Если ТипЗнч(ТекИсточник.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
					МассивНоменклатуры.Добавить(ТекИсточник.Номенклатура);	
				Иначе
					МассивТиповНоменклатуры.Добавить(ТекИсточник.Номенклатура);
				КонецЕсли;
			КонецЦикла; 	
			Ограничение = Истина;
		Иначе
			Ограничение = Ложь;
			МассивНоменклатуры = Новый Массив;
			МассивТиповНоменклатуры = Новый Массив;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Новый Структура("Ограничение, ДоступнаяНоменклатура, ДоступныеТипы", Ограничение, МассивНоменклатуры, МассивТиповНоменклатуры);	
КонецФункции // ()

//список предприятий, которые являются подэлементами
Функция СписокДоступных(ТекПредприятие) Экспорт
	
	Если НЕ ПустаяСтрока(ТекПредприятие.Родитель) Тогда
		ТекПредприятие = ТекПредприятие.Родитель;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Предприятия.Ссылка
	|ИЗ
	|	Справочник.Предприятия КАК Предприятия
	|ГДЕ
	|	Предприятия.Родитель = &Родитель";
	
	Запрос.УстановитьПараметр("Родитель", ТекПредприятие);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	МассивПП = Новый Массив;
	МассивПП.Добавить(ТекПредприятие);
	Пока Выборка.Следующий() Цикл
		МассивПП.Добавить(Выборка.Ссылка);		
	КонецЦикла;
	
	Возврат МассивПП;
	
КонецФункции // ( 

Процедура ПередЗаписиЭлементовСправочниковПриЗаписи(Источник, Отказ) Экспорт
	
	Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", НЕ ЗначениеЗаполнено(Источник.Ссылка));
	
	ЗаписьПредприятия = Ложь;
	
	Если НЕ Источник.Метаданные().Реквизиты.Найти("Предприятие") = Неопределено Тогда
		Если Источник.ЭтоГруппа Тогда
			Если НЕ Источник.Метаданные().Реквизиты.Предприятие.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы Тогда
				ЗаписьПредприятия = Истина;
			КонецЕсли;
		Иначе
			Если НЕ Источник.Метаданные().Реквизиты.Предприятие.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Группы Тогда
				ЗаписьПредприятия = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//Если ЗаписьПредприятия Тогда
	//	
	//	ТекРодитель = Источник.Предприятие.Родитель;
	//	Если ЗначениеЗаполнено(ТекРодитель) Тогда
	//		Источник.Предприятие = ТекРодитель;
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
	//добавляем предприятие в ТЧ
	Если Не ЗначениеЗаполнено(Источник.Ссылка) И ЗначениеЗаполнено(ПараметрыСеанса.ТекущееПредприятие) Тогда
		Если НЕ Источник.Метаданные().ТабличныеЧасти.Найти("ПредприятияНоменклатуры") = Неопределено И НЕ Источник.ПредприятияНоменклатуры.Количество() Тогда
			НоваяСтрока = Источник.ПредприятияНоменклатуры.Добавить();
			НоваяСтрока.Предприятие = ПараметрыСеанса.ТекущееПредприятие;		
		КонецЕсли;		
	КонецЕсли;
	
	Если НЕ Источник.Метаданные().Реквизиты.Найти("Предприятие") = Неопределено Тогда
		Если ЗначениеЗаполнено(ПараметрыСеанса.ТекущееПредприятие) И Не ЗначениеЗаполнено(Источник.Предприятие) Тогда
			Источник.Предприятие = ПараметрыСеанса.ТекущееПредприятие;	
		КонецЕсли;	
	КонецЕсли;
	
	//Эл = Метаданные.ОбщиеРеквизиты.Предприятие.Состав.Найти(Источник.Метаданные());
	Если НЕ Источник.Метаданные().Реквизиты.Найти("Предприятие") = Неопределено Тогда
		Если Не ЗначениеЗаполнено(Источник.Предприятие) Тогда
			Источник.Предприятие = ПараметрыСеанса.ТекущееПредприятие;
		КонецЕсли;
	КонецЕсли; 
	
	//добавляем автора и редактора
	Если НЕ Источник.Метаданные().Реквизиты.Найти("Автор") = Неопределено И Не ЗначениеЗаполнено(Источник.Ссылка) Тогда
		Источник.Автор = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Источник.Ссылка) Тогда
		//Эл = Метаданные.ОбщиеРеквизиты.Автор.Состав.Найти(Источник.Метаданные());
		Если НЕ Источник.Метаданные().Реквизиты.Найти("Автор") = Неопределено Тогда
			Источник.Автор = ПараметрыСеанса.ТекущийПользователь;
		КонецЕсли; 
	КонецЕсли;
	
	//Эл = Метаданные.ОбщиеРеквизиты.Редактор.Состав.Найти(Источник.Метаданные());
	Если НЕ Источник.Метаданные().Реквизиты.Найти("Редактор") = Неопределено  Тогда
		Источник.Редактор = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;

	ЗаписатьИзмененныеРеквизитыОбъекта(Источник, Ложь);
	
КонецПроцедуры

Процедура ЗаполнениеДоковГДУчетОбработкаПроверкиЗаполнения(Источник, Отказ, ПроверяемыеРеквизиты) Экспорт
	//проверям на возможность создания документа по "чужому" предприятию
	Попытка
		ТекПредприятие = ?(ТипЗнч(Источник) = Тип("ДокументОбъект.ГД_ДвиженияОбщий"), Источник.Агент, Источник.Предприятие); 
		//Сообщить(ТипЗнч(Источник));
		//Сообщить(Источник.Агент);
		//Сообщить(Источник.Предприятие);
		//Сообщить(ТекПредприятие);
		Если БюджетныйНаСервере.ПолучитьПредприятия().Найти(ТекПредприятие) = Неопределено Тогда
			сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(
			Источник,
			"Нет прав на создание документов по данному предприятию.",
			,
			,
			"Предприятие",
			Отказ);	
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	//Если ТипЗнч(Источник) = Тип("ДокументОбъект.ГД_ДвиженияОбщийВторичный")  Тогда
	//	ИсточникДата = Мин(Источник.Дата, Источник.ДатаУчетная);
	//	ПолеДата = "ДатаУчетная";
	//Иначе
		ИсточникДата = Источник.Дата;	
		ПолеДата = "Дата";
	//КонецЕсли;
	
	Если НЕ РольДоступна("Администратор") И НЕ РольДоступна("ОФК") Тогда	
		Попытка
			ДатаЗакрытияУчет = УЧ_Сервер.ДатаЛокальногоЗапрета(Источник.Предприятие);
			
			Если ИсточникДата <= ДатаЗакрытияУчет Тогда
				//НельзяПроводить = Истина;
				//Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_РеализацияНовый") Тогда
				//	Для каждого ТекСтрока Из Источник.НачислениеДоставки Цикл
				//		Если ЗначениеЗаполнено(ТекСтрока.Дата2) Тогда
				//			НельзяПроводить = Ложь;					
				//		КонецЕсли;
				//	КонецЦикла; 
				//КонецЕсли;
				//Если НельзяПроводить Тогда
				сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(
				Источник,
				"Невозможно редактирование документов ранее даты закрытия (" + Формат(ДатаЗакрытияУчет, "ДФ=dd.MM.yy") + ") по предприятию " + Строка(Источник.Предприятие) + ".",
				,
				,
				ПолеДата,
				Отказ);	
				//КонецЕсли;
			КонецЕсли;
			
			ДатаЗакрытияУчет = УЧ_Сервер.ДатаЛокальногоЗапрета(Источник.Агент);
			Если ИсточникДата <= ДатаЗакрытияУчет И ТипЗнч(Источник) = Тип("ДокументОбъект.ГД_ДвиженияОбщий") Тогда
				сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(
				Источник,
				"Невозможно редактирование документов ранее даты закрытия (" + Формат(ДатаЗакрытияУчет, "ДФ=dd.MM.yy") + ") по предприятию " + Строка(Источник.Агент) + ".",
				,
				,
				ПолеДата,
				Отказ);	
			КонецЕсли;
			
			
			
		Исключение
			
		КонецПопытки;
		
		
		//установка основного подразделения
		
		
		//Проверка на редактирование документа, сохраненного раньше даты запрета редактирования
		
		Попытка
			ДатаЗапрета = УЧ_Сервер.ДатаЛокальногоЗапрета(Источник.Предприятие);
			ДвижениеИсточника = РегистрыБухгалтерии.Учетный.ВыбратьПоРегистратору(Источник.ссылка);
			Если ДвижениеИсточника.Следующий() Тогда
				Если ДвижениеИсточника.Период <= ДатаЗапрета Тогда
					//НельзяПроводить = Истина;
					//Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_РеализацияНовый") Тогда
					//	Для каждого ТекСтрока Из Источник.НачислениеДоставки Цикл
					//		Если ЗначениеЗаполнено(ТекСтрока.Дата2) Тогда
					//			НельзяПроводить = Ложь;					
					//		КонецЕсли;
					//	КонецЦикла; 
					//КонецЕсли;
					//Если НельзяПроводить Тогда
					
					сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(
					Источник,
					"Невозможно редактирование документов ранее даты запрета редактирования (" + Формат(ДатаЗапрета, "ДФ=dd.MM.yy") + ") .",
					,
					,
					ПолеДата,
					Отказ);
					//КонецЕсли;
				КонецЕсли; 
			КонецЕсли;
		Исключение
		КонецПопытки;
		
	КонецЕсли;
КонецПроцедуры

Функция УниверсальнаяПечатьСервер(ТабДок, ПараметрКоманды, МобильныйКлиент = Ложь, ДопПараменты = Неопределено) Экспорт
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
		ИмяДока = ПараметрКоманды[0].ПолучитьОбъект().Метаданные().Имя;
	Иначе	
		ИмяДока = ПараметрКоманды.ПолучитьОбъект().Метаданные().Имя;
	КонецЕсли;
	
	Если ИмяДока = "УтверждениеБюджета" Тогда
		Документы.Д_Бюджет.Печать(ТабДок, ПараметрКоманды[0], ПараметрКоманды[0].ТипБюджета);
	ИначеЕсли ИмяДока = "Д_ЗаявкаНаФинансирование" Тогда //замена печати за заявочную
		ИмяДока = "Д_ЗаявкаНаОплату";
		Документы[ИмяДока].Печать(ТабДок, ПараметрКоманды);
	ИначеЕсли ИмяДока = "Д_СлужебнаяЗаписка" ИЛИ ИмяДока = "Д_ОбращенияВТехПоддержку" Тогда
		Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
			Значение = ПараметрКоманды[0];
		Иначе
			Значение = ПараметрКоманды;		
		КонецЕсли;
		Если НЕ Значение.Метаданные().Реквизиты.Найти("ТекстФорматированный") = Неопределено И ТипЗнч(Значение.ТекстФорматированный) = Тип("ХранилищеЗначения") Тогда
			ФормДок = Значение.ТекстФорматированный.Получить();
			Если ТипЗнч(ФормДок) = Тип("ФорматированныйДокумент") Тогда
				ЕстьЭлементы = ФормДок.Элементы.Количество();
				Если ЕстьЭлементы Тогда
					ТабДок = ФормДок;
					Документы[ИмяДока].ПечатьФорматируемогоДокумента(ТабДок, ПараметрКоманды,,,,МобильныйКлиент);
					Возврат  ИмяДока;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Документы[ИмяДока].Печать(ТабДок, ПараметрКоманды,,,,МобильныйКлиент);
	ИначеЕсли ИмяДока = "Д_ЗаявкаНаСогласованиеДоговора" Тогда
		ТабДок = ФормДок;
		Документы[ИмяДока].ПечатьФорматируемогоДокумента(ТабДок, ПараметрКоманды,,,,МобильныйКлиент);
		Возврат  ИмяДока;
	Иначе
		Попытка
			Если ТипЗнч(ДопПараменты) = Тип("Структура") И ДопПараменты.Свойство("ИмяКоманды") Тогда
				Если ДопПараменты.ИмяКоманды = "Документ.УЧ_АвансовыйОтчет.Команда.ПечатьАО1" Тогда
					Документы[ИмяДока].ПечатьАвансовогоОтчета(ТабДок, ПараметрКоманды); 
				ИначеЕсли ДопПараменты.ИмяКоманды = "Документ.сабМаршрутныйЛист.Команда.МаршрутныйЛистНовый" Или ДопПараменты.ИмяКоманды = "Документ.сабМаршрутныйЛист.Команда.МаршрутныйЛистНовыйФакт" Или ДопПараменты.ИмяКоманды = "Документ.сабМаршрутныйЛист.Команда.МаршрутныйЛистНовыйПланФакт" Тогда //02.03.2022
   					Документы[ИмяДока].ПечатьМаршрутныйЛистНовый(ТабДок, ПараметрКоманды, ДопПараменты.ИмяКоманды);                         //02.03.2022
				ИначеЕсли ДопПараменты.ИмяКоманды = "Документ.сабМаршрутныйЛист.Команда.МаршрутныйЛистНаборЗаказа" Или ДопПараменты.ИмяКоманды = "Документ.сабМаршрутныйЛист.Команда.МаршрутныйЛистНаборЗаказаФакт" Тогда
   					Документы[ИмяДока].ПечатьМаршрутныйЛистНовый(ТабДок, ПараметрКоманды, ДопПараменты.ИмяКоманды);
				ИначеЕсли ДопПараменты.ИмяКоманды = "Документ.сабМаршрутныйЛист.Команда.МаршрутныйЛистНаборЗаказаВесовой" Тогда
   					Документы[ИмяДока].ПечатьМаршрутныйЛистНовый(ТабДок, ПараметрКоманды, ДопПараменты.ИмяКоманды);   
				Иначе
					Документы[ИмяДока].Печать(ТабДок, ПараметрКоманды);
				КонецЕсли;
			Иначе
				Документы[ИмяДока].Печать(ТабДок, ПараметрКоманды);
			КонецЕсли;
		Исключение
			Справочники[ИмяДока].Печать(ТабДок, ПараметрКоманды);
		КонецПопытки;
	КонецЕсли;
	
	//Документы.Д_ЗаявкаНаОтгрузку.Печать(ТабДок, ПараметрКоманды);		
	Возврат  ИмяДока;
КонецФункции

Процедура УстановкаВремениДоковПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	//Источник.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним);
КонецПроцедуры

Функция ПолучитьФормуДокумента(ТекДокументСсылка) Экспорт
	Возврат "Документ." + ТекДокументСсылка.ПолучитьОбъект().Метаданные().Имя + ".ФормаОбъекта";
КонецФункции // 4()

//подписка документы перед записью
Процедура ДокументыПередЗаписьюПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	ТекПп = Неопределено;
	
	Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", НЕ ЗначениеЗаполнено(Источник.Ссылка));
	Источник.ДополнительныеСвойства.Вставить("ДатаДокументаСдвинутаВперед", Ложь);
	
	Если НЕ Источник.Метаданные().Реквизиты.Найти("Предприятие") = Неопределено Тогда
		ТекПп = Источник.Предприятие;
		//обнуление номера документа, если сохранено с другим прежприятием
		Если ЗначениеЗаполнено(Источник.Ссылка) И НЕ ТекПп = Источник.Ссылка.Предприятие Тогда
			Источник.Номер = "";			
		КонецЕсли; //конец обнуления
	КонецЕсли;
	
	ТекПпЭтоГруппа = ?(НЕ ТекПп = Неопределено, ТекПп.ЭтоГруппа, Ложь);
	
	//Если ТекПп.УчетПоПодразделениям Тогда
	//	Возврат;	
	//КонецЕсли;
	//Если НЕ ТекПпЭтоГруппа И ЗначениеЗаполнено(ТекПп) И НЕ ТекПп.УчетПоПодразделениям И ТекПп.ВидДеятельности.Пустая() Тогда
	//	Сообщить("Укажите подразделение по-умолчанию на вкладке Учетная политика элемента справочника предприятия.");
	//	Отказ = Истина;
	//	Возврат;
	//КонецЕсли;
	
	//Если НЕ ТекПп = Неопределено И НЕ ТекПп.УчетПоОрганизациям И ТекПп.ОсновнаяОрганизация.Пустая() Тогда
	//	Сообщить("Укажите организацию по-умолчанию на вкладке Учетная политика элемента справочника предприятия.");
	//	Отказ = Истина;
	//	Возврат;
	//КонецЕсли;
	
	//блокировка при закрытии периода
	Если НЕ ТекПп = Неопределено И НЕ ТекПпЭтоГруппа Тогда
		
		//Если  ПринадлежитПодсистеме(Источник.Ссылка,"сабКазна") Тогда
		//	ДатаБлокировки = УЧ_Сервер.ДатаЗапретаКазна(); 
		//Иначе
			ДатаБлокировки = УЧ_Сервер.ДатаЛокальногоЗапрета(ТекПп);
		//КонецЕсли;
	Иначе
		ДатаБлокировки = Дата('00010101000000');	
		
	КонецЕсли;
	//Если НЕ ПринадлежитПодсистеме(Источник.Ссылка,"Производство") И Источник.Дата <= ДатаБлокировки И НЕ РольДоступна("Администратор") И НЕ РольДоступна("ОФК") И НЕ ТипЗнч(Источник) = Тип("ДокументОбъект.Д_Бюджет") И НЕ ТипЗнч(Источник) = Тип("ДокументОбъект.Д_ЗаявкаНаСогласованиеДоговора") Тогда   //Важно
	//	Сообщить("Сохранение документов на дату ранее, чем " + Строка(ДатаБлокировки) + " невозможно."); 
	//	Отказ = Истина;
	//КонецЕсли;
	
	// контроль обработки документов {
	Если Источник.ДополнительныеСвойства.ЭтоНовый И Источник.ДополнительныеСвойства.Свойство("ДокументБУ") Тогда
		
		Если ДокументОбработан(Источник.ДополнительныеСвойства.ДокументБУ) Тогда
			Сообщить("Документ БУ уже обработан, запись текущего документа невозможна."); 
			Отказ = Истина;   
		КонецЕсли;
		
	КонецЕсли;
	//}
	
	ТипДляпроверки = Тип("СправочникСсылка.СтруктураПредприятия");
	
	Если НЕ ТекПп = Неопределено И НЕ ТекПпЭтоГруппа Тогда
		ТекПодразделение = ТекПп.ВидДеятельности;
		ТекОрганизация = ТекПп.ОсновнаяОрганизация;
	КонецЕсли;
	
	//заполение пустого подразделения подразделением по умолчанию
	Если НЕ ТекПпЭтоГруппа И (НЕ ТекПп = Неопределено И НЕ ТекПп.УчетПоПодразделениям) ИЛИ (НЕ ТекПп = Неопределено И (ТипЗнч(Источник) = Тип("ДокументОбъект.Д_Бюджет") ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.Д_БюджетПрочихПроектов"))) Тогда
		Для каждого ТабличнаяЧасть Из Источник.Метаданные().ТабличныеЧасти Цикл
			ТабличнаяЧастьИмя = ТабличнаяЧасть.Имя;
			ДанныеТЗ = Источник[ТабличнаяЧастьИмя];
			ТабЗнач = ДанныеТЗ.Выгрузить();
			
			//ищем элемент в табличных частях
			ЕстьКолонкаФинЦФО = НЕ ТабЗнач.Колонки.Найти("ФинЦФО") = Неопределено;
			Для КолонкиТЗ = 0 По ТабЗнач.Колонки.Количество() - 1 Цикл
				Для СтрочкиТЗ = 0 По ТабЗнач.Количество() - 1 Цикл
					Если ТипЗнч(ТабЗнач[СтрочкиТЗ][КолонкиТЗ]) = ТипДляПроверки И НЕ ЗначениеЗаполнено(ТабЗнач[СтрочкиТЗ][КолонкиТЗ]) Тогда
						Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_ДвижениеДС") Тогда
							Если ЗначениеЗаполнено(ТабЗнач[СтрочкиТЗ]["ФинЦФО"]) И НЕ ТабЗнач[СтрочкиТЗ]["ФинЦФО"] = Источник.Предприятие Тогда
								ТабЗнач[СтрочкиТЗ][КолонкиТЗ] = ТабЗнач[СтрочкиТЗ]["ФинЦФО"].ВидДеятельности;
							Иначе
								ТабЗнач[СтрочкиТЗ][КолонкиТЗ] = ТекПодразделение;
							КонецЕсли;
						КонецЕсли; 
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			Источник[ТабличнаяЧастьИмя].Загрузить(ТабЗнач);
		КонецЦикла;
		
		//ищем взначение в реквизитах
		Для каждого Реквизит Из Источник.Метаданные().Реквизиты Цикл
			РеквизитИмя = Реквизит.Имя;
			Если ТипЗнч(Источник[РеквизитИмя]) = ТипДляПроверки И ПустаяСтрока(Источник[РеквизитИмя]) Тогда
				Источник[РеквизитИмя] = ТекПодразделение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//заполение пустой организации организацией по умолчанию
	Если НЕ ТекПпЭтоГруппа И НЕ ТекПп = Неопределено И НЕ ТекПп.УчетПоОрганизациям Тогда
		ТипДляПроверкиОрганизации = Тип("СправочникСсылка.Организации");
		//ищем взначение в реквизитах
		Для каждого Реквизит Из Источник.Метаданные().Реквизиты Цикл
			РеквизитИмя = Реквизит.Имя;
			Если ТипЗнч(Источник[РеквизитИмя]) = ТипДляПроверкиОрганизации И ПустаяСтрока(Источник[РеквизитИмя]) Тогда
				Источник[РеквизитИмя] = ТекОрганизация;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;		
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.Д_БюджетПрочихПроектов") Тогда
		Для каждого ТабличнаяЧасть Из Источник.Метаданные().ТабличныеЧасти Цикл
			ТабличнаяЧастьИмя = ТабличнаяЧасть.Имя;
			ДанныеТЗ = Источник[ТабличнаяЧастьИмя];
			ТабЗнач = ДанныеТЗ.Выгрузить();
			
			Для ИндСтр = 0 По ТабЗнач.Количество() - 1 Цикл
				ТекПредприятие = ТабЗнач[ИндСтр].ЦФО;
				Если ТекПредприятие.УчетПоПодразделениям Тогда
					КолонкаПодр = ?(ТабЗнач.Колонки.Найти("Подразделение") = Неопределено, ТабЗнач.Колонки.Найти("ВидДеятельности"), ТабЗнач.Колонки.Найти("Подразделение"));
					ИндексКолонкиПодр = ТабЗнач.Колонки.Индекс(КолонкаПодр);
					Если Не ЗначениеЗаполнено(ТабЗнач[ИндСтр][ИндексКолонкиПодр]) Тогда
						ТабЗнач[ИндСтр][ИндексКолонкиПодр] = ТекПредприятие.ВидДеятельности;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			//ищем элемент в табличных частях
			Для КолонкиТЗ = 0 По ТабЗнач.Колонки.Количество() - 1 Цикл
				Для СтрочкиТЗ = 0 По ТабЗнач.Количество() - 1 Цикл
					Если ТипЗнч(ТабЗнач[СтрочкиТЗ][КолонкиТЗ]) = ТипДляПроверки И ПустаяСтрока(ТабЗнач[СтрочкиТЗ][КолонкиТЗ]) Тогда
						Если НЕ ТабЗнач.Колонки[КолонкиТЗ].Имя = "ФинПодразделение" Тогда
							ТабЗнач[СтрочкиТЗ][КолонкиТЗ] = ТекПодразделение;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			Источник[ТабличнаяЧастьИмя].Загрузить(ТабЗнач);
		КонецЦикла;
	КонецЕсли;

	ФоновыйАвтор = Справочники.Пользователи.НайтиПоНаименованию("ОтправкаСерверныхОповещений", Истина);

	//добавляем автора и редактора
	Если Не ЗначениеЗаполнено(Источник.Ссылка) Тогда
		//Эл = Метаданные.ОбщиеРеквизиты.Автор.Состав.Найти(Источник.Метаданные());
		Если НЕ Источник.Метаданные().Реквизиты.Найти("Автор") = Неопределено Тогда
			Если ФоновыйАвтор = ПараметрыСеанса.ТекущийПользователь Тогда
				Источник.Автор = Неопределено;	
			Иначе
				Источник.Автор = ПараметрыСеанса.ТекущийПользователь;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	
	//Эл = Метаданные.ОбщиеРеквизиты.Редактор.Состав.Найти(Источник.Метаданные());
	Если НЕ Источник.Метаданные().Реквизиты.Найти("Редактор") = Неопределено И НЕ ФоновыйАвтор = ПараметрыСеанса.ТекущийПользователь Тогда
		Источник.Редактор = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	//УСТАНАВЛИВАЕМ РЕАЛЬНУЮ ДАТУ ЗАПИСИ ДОКУМЕНТА
	//Если это новый документ, то 
	Если НЕ Источник.Метаданные().Реквизиты.Найти("ДатаСозданияДокумента") = Неопределено Тогда
		Источник.ДатаСозданияДокумента = ТекущаяДата();
	КонецЕсли;
	
	//устанавливаем тайминг
	сабОбщегоНазначенияБУХ.УстановитьТайминг(Источник);
	
	//корректируем 23:59:59
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_ЗакрытиеПериода") Тогда
		Источник.Дата = КонецДня(Источник.Дата);
	Иначе
		Источник.Дата = МИН(Источник.Дата, КонецДня(Источник.Дата) - 9);	
	КонецЕсли;
	
	ЗаписатьИзмененныеРеквизитыОбъекта(Источник, Истина);
	
КонецПроцедуры

Процедура УстановитьПроверкуДокумента(Источник, Принудительно = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Ссылка = Источник.Ссылка;
	//Если (РольАдминаДоступнаСервер()) Тогда //продумать алгоритм - для теста только проверка администратором
	ЕстьТип = Метаданные.РегистрыСведений.ПараметрыДокументов.Измерения.Документ.Тип.СодержитТип(ТипЗнч(Источник.Ссылка));
	
	Если НЕ Источник.Метаданные().Реквизиты.Найти("Предприятие") = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	РегистрСведений.ОсновныеДолжностиПредприятия КАК ОсновныеДолжностиПредприятия
		|ГДЕ
		|	ОсновныеДолжностиПредприятия.Предприятие = &Предприятие
		|	И ОсновныеДолжностиПредприятия.Должность = Значение(Перечисление.ОсновныеДолжностиПредприятия.Учетчик)
		|	И ОсновныеДолжностиПредприятия.Сотрудник В(&Пользователи)";
		
		Запрос.УстановитьПараметр("Предприятие", Источник.Предприятие);
		Запрос.УстановитьПараметр("Пользователи", ПараметрыСеанса.ДоступныеПользователи);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Количество() ИЛИ Принудительно Тогда
			Если ЕстьТип Тогда
				НоваяЗапись = РегистрыСведений.ПараметрыДокументов.СоздатьМенеджерЗаписи();
				НоваяЗапись.Период = ТекущаяДата();
				НоваяЗапись.Документ = Ссылка;
				НоваяЗапись.Пользователь = ПараметрыСеанса.ТекущийПользователь;
				НоваяЗапись.Статус = Перечисления.СтатусПриПроверкеОбъектовБД.Проверен;
				НоваяЗапись.Записать(Истина);
			КонецЕсли;
		КонецЕсли; 			
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	//КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьПроверкуДокумента(Источник, Принудительно = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	НоваяЗапись = РегистрыСведений.ПараметрыДокументов.СоздатьМенеджерЗаписи();
	НоваяЗапись.Период = ТекущаяДата();
	НоваяЗапись.Документ = Источник.Ссылка;
	НоваяЗапись.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	НоваяЗапись.Статус = Перечисления.СтатусПриПроверкеОбъектовБД.НаПроверке;
	НоваяЗапись.Записать(Истина);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ДокументПодразделениеИстина(ОбъектСсылка, ТекПП) Экспорт
	
	НайденнаяСтрока = ТекПП.СписокДокументовПодразделения.Найти(ОбъектСсылка.Метаданные().Имя, "Документ");
	Если Не НайденнаяСтрока = Неопределено Тогда
		Возврат НайденнаяСтрока.УчетПоПодразделениям;
	КонецЕсли;
	
	//Для каждого ТекСтрока Из ТекПП.СписокДокументовПодразделения Цикл
	//	ТекДокумент = "ДокументСсылка." + ТекСтрока.Документ;
	//	Если ТипОбъектСсылка = Тип(ТекДокумент) Тогда
	//		Возврат ТекСтрока.УчетПоПодразделениям;
	//	КонецЕсли;
	//КонецЦикла; 	
	
	Возврат ложь;
	
КонецФункции // ()

Функция РольАдминаДоступнаСервер() Экспорт
	
	Возврат РольДоступна("Администратор") ИЛИ РольДоступна("АдминистраторСистемы");	
	
	
КонецФункции // ()

//вспомогательная процедура. запускается только из клиентской процедуры "СоздатьКонтрагента"
Процедура ЗаписатьКонтрагента(ТекКонтрагент, ТекПредприятие) Экспорт
	
	ОбъектКонтрагент = ТекКонтрагент.ПолучитьОбъект();
	
	СтруктураПоиска = Новый Структура("Предприятие", ТекПредприятие);
	Если ОбъектКонтрагент.Предприятия.НайтиСтроки(СтруктураПоиска).Количество() тогда
		Сообщить("Предприятие " + Строка(ТекПредприятие) + " уже доступно.");
		//СтандартнаяОбработка = Ложь;
		Возврат;	
	КонецЕсли;	
	
	НоваяСтрока = ОбъектКонтрагент.Предприятия.Добавить();
	НоваяСтрока.Предприятие = ТекПредприятие;
	ОбъектКонтрагент.Записать();
КонецПроцедуры

//вспомогательная процедура. запускается только из клиентской процедуры "СоздатьКонтрагента"
Функция ЗапуститьЗадачуСогласования(СтруктураКонтрагента, ТекПредприятие) Экспорт
	//НачатьТранзакцию();
	//Задача = Задачи.Задача.СоздатьЗадачу();		
	//Задача.Заявка = Справочники.Контрагенты.ПустаяСсылка();
	//Задача.Дата = ТекущаяДата();
	//Задача.Наименование = "Согласовать нового контрагента: " + Строка(СтруктураКонтрагента.Наименование);
	//Задача.Автор = ПараметрыСеанса.ТекущийПользователь;
	//Задача.Комментарии = СтруктураКонтрагента.Наименование;
	//Задача.Описание = "ИНН: " + ?(СтруктураКонтрагента.Учетный, "Учетный", СтруктураКонтрагента.ИНН) + "# " + СтруктураКонтрагента.Описание;;
	//Задача.Предприятие = СтруктураКонтрагента.Предприятие;
	//Задача.Исполнитель = Константы.БП_КонтролерОтгрузки.Получить();
	//Если СтруктураКонтрагента.КонтрагентЯвляетсяПокупателем Тогда //если контрагент-покупатель
	//	НоваяСтрока = Задача.ПараметрыЗадачи.Добавить();
	//	НоваяСтрока.Параметр = "ДатаОтветственный";
	//	НоваяСтрока.Значение = СтруктураКонтрагента.ДатаОтветственный;
	//	НоваяСтрока = Задача.ПараметрыЗадачи.Добавить();
	//	НоваяСтрока.Параметр = "Ответственный";
	//	НоваяСтрока.Значение = СтруктураКонтрагента.Ответственный;
	//	НоваяСтрока = Задача.ПараметрыЗадачи.Добавить();
	//	НоваяСтрока.Параметр = "ДатаКомДиректор";
	//	НоваяСтрока.Значение = СтруктураКонтрагента.ДатаКомДиректор;
	//	НоваяСтрока = Задача.ПараметрыЗадачи.Добавить();
	//	НоваяСтрока.Параметр = "КомДиректор";
	//	НоваяСтрока.Значение = СтруктураКонтрагента.КомДиректор;
	//КонецЕсли;
	//НоваяСтрока = Задача.ПараметрыЗадачи.Добавить();
	//НоваяСтрока.Параметр = "ПолноеНаим";
	//НоваяСтрока.Значение = СтруктураКонтрагента.ПолноеНаименование;
	//Задача.Записать();
	//ЗафиксироватьТранзакцию();
	//Возврат Задача.Ссылка;
	возврат Неопределено
КонецФункции

Процедура УЧ_ОтменаПоведенияОбработкаУдаленияПроведения(Источник, Отказ) Экспорт
	Если НЕ БюджетныйНаСервере.РольАдминаДоступнаСервер() И (ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_ДвижениеДС") И НЕ РольДоступна("Финансист")) Тогда
		Если УЧ_Сервер.ДатаЛокальногоЗапрета(Источник.Предприятие) >= Источник.Дата Тогда
			//Если ТипЗнч(Источник) = Тип("ДокументОбъект.ГД_ДвиженияОбщийВторичный") Тогда
			//	ИсточникДата = Мин(Источник.Дата, Источник.ДатаУчетная);
			//	ПолеДата = "ДатаУчетная";
			//Иначе
				ИсточникДата = Источник.Дата;	
				ПолеДата = "Дата";
			//КонецЕсли;
			
			сабОбщегоНазначенияКлиентСервер.СообщитьОбОшибке(
			Источник,
			"Невозможна отмена проведения ранее даты закрытия (" + Формат(Источник.Предприятие.ДатаЗакрытияУчет, "ДФ=dd.MM.yy") + ") по предприятию " + Строка(Источник.Предприятие) + ".",
			,
			,
			ПолеДата,
			Отказ);
		КонецЕсли;
		
		
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьКалендарьнаСервере(ИмяКалендаря) Экспорт
	Возврат Справочники.Календари.НайтиПоНаименованию(ИмяКалендаря)	
КонецФункции

Функция ПолучитьПризнакРабочегоДня(Календарь, Год, ДатаГрафика) Экспорт
	
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КалендарныеГрафики.ДеньВключенВГрафик
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|ГДЕ
	|	КалендарныеГрафики.Календарь = &Календарь
	|	И КалендарныеГрафики.Год = &Год
	|	И КалендарныеГрафики.ДатаГрафика = &ДатаГрафика";
	Запрос.УстановитьПараметр("Календарь",Календарь);
	Запрос.УстановитьПараметр("Год", Год);
	Запрос.УстановитьПараметр("ДатаГрафика",ДатаГрафика);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДеньВключенВГрафик	
	Иначе
		
	КонецЕсли;	
КонецФункции

Функция ПолучитьПодразделения(Владелец) Экспорт
	МассивПодразделений = Новый Массив;
	МассивПолныхПП = Новый Массив;
	МассивОграниченныхПП = Новый Массив;
	
	//Если Не ПараметрыСеанса.ТекущийПользователь.ДоступныПредприятияИзСписка Тогда
	//	МассивПолныхПП = ПараметрыСеанса.ДоступныеПредприятия; 
	//Иначе
	//	Для каждого ТекПредприятие Из ПараметрыСеанса.ДоступныеПредприятия Цикл
	//		ТекСтрока = ПараметрыСеанса.ТекущийПользователь.ДоступныеПредприятие.Найти(ТекПредприятие, "Предприятие");
	//		Если НЕ ТекСтрока = Неопределено Тогда
	//			Если ТекСтрока.ОграничиватьПодразделения Тогда
	//				ОтобранныеПодразделения = ПараметрыСеанса.ТекущийПользователь.ДоступныеПодразделения.НайтиСтроки(Новый Структура("Предприятие", ТекПредприятие)); 
	//				Для каждого ТекПодразделение Из ОтобранныеПодразделения Цикл
	//					МассивПодразделений.Добавить(ТекПодразделение.Подразделение);				
	//				КонецЦикла;
	//			Иначе
	//				МассивПолныхПП.Добавить(ТекПредприятие);
	//			КонецЕсли;
	//		Иначе
	//			МассивПолныхПП.Добавить(ТекПредприятие);	
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтруктураПредприятия.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.СтруктураПредприятия КАК СтруктураПредприятия";
	
	Запрос.УстановитьПараметр("ДоступныеПользователи", ПараметрыСеанса.ДоступныеПользователи);
	
	Результат = Запрос.Выполнить();
	МассивПодразделений = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	
	//неоптимально. к исправлению. если более 2 подраделения доступно (магаз+произв) 
	//Если МассивПодразделений.Количество() > 2 Тогда //пустое всегда доступно, т.к возможны ошибки в документах
		МассивПодразделений.Добавить(Справочники.СтруктураПредприятия.ПустаяСсылка());
	//КонецЕсли;
	
		
	Возврат МассивПодразделений;
КонецФункции // ()

Функция ВедетсяУчетПоПодразделениям(ТекПП) Экспорт
	
	Возврат ТекПП.УчетПоПодразделениям;	
	
КонецФункции // ()

Функция ПолучитьВариантыСценария(Сценарий) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СценарииПланирования.Ссылка
	|ИЗ
	|	Справочник.СценарииПланирования КАК СценарииПланирования
	|ГДЕ
	|	СценарииПланирования.Родитель = &Родитель
	|	И СценарииПланирования.ВидБюджета = &ВидБюджета";
	
	Запрос.УстановитьПараметр("Родитель", Сценарий);
	Запрос.УстановитьПараметр("ВидБюджета", Перечисления.Д_ВидыБюджета.ВариантБюджета);
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции // ()

Функция ПолучитьСценарийГод(ТекДата) Экспорт
	
	СтруктураБюджетов = ПолучитьВидыБюджетовНаДату(ТекДата, Ложь);
	
	Возврат СтруктураБюджетов.ГодовойБюджет;
	
КонецФункции // ()

Функция ПолучитьСценарийКвартал(ТекДата) Экспорт
	
	СтруктураБюджетов = ПолучитьВидыБюджетовНаДату(ТекДата, Ложь);
	
	Возврат СтруктураБюджетов.КвартальныйБюджет;
	
КонецФункции // ()

Функция ПолучитьСценарийМесяц(ТекДата) Экспорт
	
	СтруктураБюджетов = ПолучитьВидыБюджетовНаДату(ТекДата, Ложь);
	
	Возврат СтруктураБюджетов.МесячныйБюджет;
	
КонецФункции // ()

Функция СписокАктуальныхСценариев(ТекДата, ДатаОкончания = Неопределено, ПризнакПериода) Экспорт
	
	МассивСценариев = Новый Массив;
	
	Если ПризнакПериода = "Кв" Тогда 
		
		СтруктураБюджетов = ПолучитьВидыБюджетовНаДату(ТекДата, Ложь);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Сценарий", ?(ЗначениеЗаполнено(СтруктураБюджетов.КвартальныйБюджет), СтруктураБюджетов.КвартальныйБюджет, СтруктураБюджетов.ГодовойБюджет));
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВЫБОР
		               |		КОГДА СценарииПланирования.Ссылка ЕСТЬ NULL 
		               |			ТОГДА СценарииПланирования.Родитель
		               |		ИНАЧЕ СценарииПланирования.Ссылка
		               |	КОНЕЦ КАК Сценарий
		               |ИЗ
		               |	Справочник.СценарииПланирования КАК СценарииПланирования
		               |ГДЕ
		               |	(СценарииПланирования.ВидБюджета = ЗНАЧЕНИЕ(Перечисление.Д_ВидыБюджета.ВариантБюджета)
		               |			ИЛИ СценарииПланирования.Родитель.ВидБюджета = ЗНАЧЕНИЕ(Перечисление.Д_ВидыБюджета.ВариантБюджета))
		               |	И СценарииПланирования.Родитель = &Сценарий";
		ТЗ_Рез = Запрос.Выполнить().Выгрузить();
		
		СценарийРодитель = ?(ЗначениеЗаполнено(СтруктураБюджетов.КвартальныйБюджет), СтруктураБюджетов.КвартальныйБюджет, СтруктураБюджетов.ГодовойБюджет);
		
		Если ЗначениеЗаполнено(СценарийРодитель) Тогда
			МассивСценариев.Добавить(СценарийРодитель);
		КонецЕсли;
		
		Для Каждого Строка Из ТЗ_Рез Цикл
			МассивСценариев.Добавить(Строка.Сценарий);
		КонецЦикла;
		
	Иначе
		
		МассивБюджетов = ПолучитьВидыБюджетовНаДату(ТекДата, Ложь, ДатаОкончания);
		
		Для Каждого Элемент Из МассивБюджетов Цикл 
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Сценарий", ?(ЗначениеЗаполнено(Элемент.МесячныйБюджет), Элемент.МесячныйБюджет, Элемент.КвартальныйБюджет));
			Запрос.Текст = "ВЫБРАТЬ
			               |	ВЫБОР
			               |		КОГДА СценарииПланирования.Ссылка ЕСТЬ NULL 
			               |			ТОГДА СценарииПланирования.Родитель
			               |		ИНАЧЕ СценарииПланирования.Ссылка
			               |	КОНЕЦ КАК Сценарий
			               |ИЗ
			               |	Справочник.СценарииПланирования КАК СценарииПланирования
			               |ГДЕ
			               |	(СценарииПланирования.ВидБюджета = ЗНАЧЕНИЕ(Перечисление.Д_ВидыБюджета.ВариантБюджета)
			               |			ИЛИ СценарииПланирования.Родитель.ВидБюджета = ЗНАЧЕНИЕ(Перечисление.Д_ВидыБюджета.ВариантБюджета))
			               |	И СценарииПланирования.Родитель = &Сценарий";
			ТЗ_Рез = Запрос.Выполнить().Выгрузить();
			
			СценарийРодитель = ?(ЗначениеЗаполнено(Элемент.МесячныйБюджет), Элемент.МесячныйБюджет, Элемент.КвартальныйБюджет);
			
			Если ЗначениеЗаполнено(СценарийРодитель) Тогда
				
				Если МассивСценариев.Найти(СценарийРодитель) = Неопределено Тогда
					МассивСценариев.Добавить(СценарийРодитель)
				КонецЕсли;
				
			КонецЕсли;
			
			Для Каждого Строка Из ТЗ_Рез Цикл
				
				Если МассивСценариев.Найти(Строка.Сценарий) = Неопределено Тогда
					МассивСценариев.Добавить(Строка.Сценарий)
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивСценариев;	
	
КонецФункции

Функция ПользовательВБазе(ТекПользователь)
	
	СеансыИнформационнойБазы = ПолучитьСеансыИнформационнойБазы();
	
	Для Каждого СеансИБ Из СеансыИнформационнойБазы Цикл
		
		//СтрПользователя.Приложение   = ПредставлениеПриложения(СеансИБ.ИмяПриложения);
		//СтрПользователя.НачалоРаботы = СеансИБ.НачалоСеанса;
		//СтрПользователя.Компьютер    = СеансИБ.ИмяКомпьютера;
		//СтрПользователя.Сеанс        = СеансИБ.НомерСеанса;
		//СтрПользователя.Соединение   = СеансИБ.НомерСоединения;
		//
		//Если СеансИБ.Пользователь <> Неопределено Тогда
		//	СтрПользователя.Пользователь		= СеансИБ.Пользователь.Имя;
		//	СтрПользователя.ИмяПользователя		= СеансИБ.Пользователь.ПолноеИмя;
		//	//СтрПользователя.ПользовательСсылка	= СеансИБ.Пользователь.Ссылка;
		//Иначе
		//	СтрПользователя.Пользователь    = "";
		//	СтрПользователя.ИмяПользователя = "";
		//КонецЕсли;
	КонецЦикла;		
	
	
КонецФункции // ()

Функция ПолучитьИндексПиктограммыФайла(Знач РасширениеФайлаТолькоТекст) Экспорт
	
	РасширениеФайлаТолькоТекст = Прав(РасширениеФайлаТолькоТекст, 5);
	ИндексТочки = Найти(РасширениеФайлаТолькоТекст, ".");
	РасширениеФайлаТолькоТекст = Сред(РасширениеФайлаТолькоТекст, ИндексТочки);
	
	Если РасширениеФайлаТолькоТекст = Неопределено Тогда
		Возврат 35;
	КонецЕсли;		
	
	РасширениеФайлаБезТочки = РасширениеФайлаТолькоТекст;
	
	Если Лев(РасширениеФайлаБезТочки, 1) = "." Тогда
		РасширениеФайлаБезТочки = Сред(РасширениеФайлаБезТочки, 2);
	КонецЕсли;
	
	Расширение = "." + НРег(РасширениеФайлаБезТочки) + ";";
	
	Если Найти(".dt;.cd;.cf;.cfu;",Расширение) <> 0 Тогда
		Возврат 5; //Файлы 1С
	ИначеЕсли Расширение = ".mxl;" Тогда
		Возврат 6; //Табличный Файл 
	ИначеЕсли Найти(".txt;.log;.ini;",Расширение) <> 0 Тогда
		Возврат 7; // Текстовый Файл
	ИначеЕсли Расширение = ".epf;" Тогда
		Возврат 8; //Внешние обработки
	ИначеЕсли Найти(".ico;.wmf;.emf;",Расширение) <> 0 Тогда
		Возврат 9; // Картинки
	ИначеЕсли Найти(".htm;.html;.url;.mht;.mhtml;",Расширение) <> 0 Тогда
		Возврат 10; // HTML
	ИначеЕсли Найти(".doc;.dot;.rtf;.docx;",Расширение) <> 0 Тогда
		Возврат 11; // Файл Microsoft Word 
	ИначеЕсли Найти(".xls;.xlw;.xlsx;",Расширение) <> 0 Тогда
		Возврат 12; // Файл Microsoft Excel
	ИначеЕсли Найти(".ppt;.pps;",Расширение) <> 0 Тогда
		Возврат 13; // Файл Microsoft PowerPoint
	ИначеЕсли Найти(".vsd;",Расширение) <> 0 Тогда
		Возврат 14; // Файл Microsoft Visio
	ИначеЕсли Найти(".mpp;",Расширение) <> 0 Тогда
		Возврат 15; // Файл Microsoft Visio
	ИначеЕсли Найти(".mdb;.adp;.mda;.mde;.ade;",Расширение) <> 0 Тогда
		Возврат 16; // База данных Microsoft Access
	ИначеЕсли Найти(".xml;",Расширение) <> 0 Тогда
		Возврат 17; // xml
	ИначеЕсли Найти(".msg;",Расширение) <> 0 Тогда
		Возврат 18; // Письмо электронной почты
	ИначеЕсли Найти(".zip;.rar;.arj;.cab;.lzh;.ace;",Расширение) <> 0 Тогда
		Возврат 19; // Архивы
	ИначеЕсли Найти(".exe;.com;.bat;.cmd;",Расширение) <> 0 Тогда
		Возврат 20; // Исполняемые файлы
	ИначеЕсли Найти(".grs;",Расширение) <> 0 Тогда
		Возврат 21; // Графическая схема
	ИначеЕсли Найти(".geo;",Расширение) <> 0 Тогда
		Возврат 22; // Географическая схема
	ИначеЕсли Найти(".jpg;.jpeg;.jp2;.jpe;",Расширение) <> 0 Тогда
		Возврат 23; // jpg
	ИначеЕсли Найти(".bmp;.dib;",Расширение) <> 0 Тогда
		Возврат 24; // bmp
	ИначеЕсли Найти(".tif;",Расширение) <> 0 Тогда
		Возврат 25; // tif
	ИначеЕсли Найти(".gif;",Расширение) <> 0 Тогда
		Возврат 26; // gif
	ИначеЕсли Найти(".png;",Расширение) <> 0 Тогда
		Возврат 27; // png
	ИначеЕсли Найти(".pdf;",Расширение) <> 0 Тогда
		Возврат 28; // pdf
	ИначеЕсли Найти(".odt;",Расширение) <> 0 Тогда
		Возврат 29; // Open Office writer
	ИначеЕсли Найти(".odf;",Расширение) <> 0 Тогда
		Возврат 30; // Open Office math
	ИначеЕсли Найти(".odp;",Расширение) <> 0 Тогда
		Возврат 31; // Open Office Impress
	ИначеЕсли Найти(".odg;",Расширение) <> 0 Тогда
		Возврат 32; // Open Office draw
	ИначеЕсли Найти(".ods;",Расширение) <> 0 Тогда
		Возврат 33; // Open Office calc
	ИначеЕсли Найти(".mp3;",Расширение) <> 0 Тогда
		Возврат 34;
	Иначе
		Возврат 4
	КонецЕсли;
	
КонецФункции // ()

//расчет плановой с/с по определенной номенклатуре
Функция ПолучитьПлановуюСебестоимость(Предприятие, Номенклатура, ТекДата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БюджетныйОбороты.СуммаОборот КАК Сумма,
	|	БюджетныйОбороты1.КоличествоОборотДт КАК Количество,
	|	ВЫБОР
	|		КОГДА НЕ БюджетныйОбороты1.КоличествоОборотДт = 0
	|			ТОГДА БюджетныйОбороты.СуммаОборот / БюджетныйОбороты1.КоличествоОборотДт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Цена
	|ИЗ
	|	РегистрБухгалтерии.Бюджетный.Обороты(
	|			&Дата1,
	|			&Дата2,
	|			,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ВыпускПродукции),
	|			,
	|			СценарийПлана = &АктуальныйСценарий
	|				И Предприятия = &Предприятие
	|				И Субконто1 = &Номенклатура,
	|			КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ОсновноеПрво),
	|			) КАК БюджетныйОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Бюджетный.Обороты(
	|				&Дата1,
	|				&Дата2,
	|				,
	|				Счет = ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ГотоваяПродукция),
	|				,
	|				СценарийПлана = &АктуальныйСценарий
	|					И Предприятия = &Предприятие
	|					И Субконто1 = &Номенклатура,
	|				,
	|				) КАК БюджетныйОбороты1
	|		ПО БюджетныйОбороты.Субконто1 = БюджетныйОбороты1.Субконто1";
	
	Запрос.УстановитьПараметр("Дата1", НачалоМесяца(ТекДата));
	Запрос.УстановитьПараметр("Дата2", КонецМесяца(ТекДата));
	Запрос.УстановитьПараметр("АктуальныйСценарий", БюджетныйНаСервере.ПолучитьАктуальныйСценарий(ТекДата));
	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	Запрос.УстановитьПараметр("Номенклатура", ?(ЗначениеЗаполнено(Номенклатура.НоменклатураПервичная), Номенклатура.НоменклатураПервичная, Номенклатура));
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Возврат Выборка.Цена;	
		
	КонецЦикла;
	Возврат 0;	
	
	
	
КонецФункции // ()

//расчет плановой с/с по определенной номенклатуре
Функция ПолучитьПлановуюСебестоимостьПоРегиструСведений(Предприятие, Номенклатура, ТекДата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Д_ПараметрыНоменклатурыСрезПоследних.СебестоимостьПолнаяБезНалогов
	               |ИЗ
	               |	РегистрСведений.Д_ПараметрыНоменклатуры.СрезПоследних(
	               |			&Дата1,
	               |			Предприятие = &Предприятие
	               |				И СценарийПлана = &АктуальныйСценарий
	               |				И Номенклатура = &Номенклатура) КАК Д_ПараметрыНоменклатурыСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата1", ТекДата);
	//Запрос.УстановитьПараметр("Дата2", КонецМесяца(ТекДата));
	Запрос.УстановитьПараметр("АктуальныйСценарий", БюджетныйНаСервере.ПолучитьАктуальныйСценарий(ТекДата));
	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	Запрос.УстановитьПараметр("Номенклатура", ?(ЗначениеЗаполнено(Номенклатура.НоменклатураПервичная), Номенклатура.НоменклатураПервичная, Номенклатура));
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Возврат Выборка.СебестоимостьПолнаяБезНалогов;	
		
	КонецЦикла;
	Возврат 0;	
	
	
	
КонецФункции // ()

Функция ТарифРЖД() Экспорт
	Возврат Справочники.СтатьиЗатрат.НайтиПоКоду("2133.17");
КонецФункции // ()

//логгирование изменений документа по реквизитам
Процедура СформироватьЛог(Объект, СтрокаРеквизитов, ИмяДокумента, ДатаНачалаРедактирования, ПризнакНового) Экспорт
	
	//ТекЗапись = "";
	//Если НЕ ПустаяСтрока(СтрокаРеквизитов) Тогда
	//	Для каждого ТекРеквизит Из Объект.Ссылка.Метаданные().Реквизиты Цикл
	//		НомерЗнакаНачало = Найти(СтрокаРеквизитов, ТекРеквизит.Имя);
	//		НомерЗнакаКонец = СтрДлина(СтрокаРеквизитов);
	//		ТекЗначениеРеквизита = "";
	//		Если НомерЗнакаНачало Тогда
	//			Для ИндексСимола = НомерЗнакаНачало + СтрДлина(ТекРеквизит.Имя) + 2 По НомерЗнакаКонец Цикл
	//				Если Сред(СтрокаРеквизитов, ИндексСимола, 2) = "&&" Тогда
	//					НомерЗнакаКонец = ИндексСимола;
	//					НомерЗнакаНачало = НомерЗнакаНачало + СтрДлина(ТекРеквизит.Имя) + 2;
	//					ТекЗначениеРеквизита = Сред(СтрокаРеквизитов, НомерЗнакаНачало, НомерЗнакаКонец - НомерЗнакаНачало);
	//					Прервать;		
	//				КонецЕсли;			
	//			КонецЦикла;
	//			
	//		КонецЕсли;
	//		
	//		Если НЕ Строка(Объект[ТекРеквизит.Имя]) = ТекЗначениеРеквизита Тогда
	//			ТекЗапись = ТекЗапись + ?(ПустаяСтрока(ТекЗапись), "", "
	//			|
	//			|") + ТекРеквизит.Имя + " Было """ + ТекЗначениеРеквизита 
	//			+ """" + ", Стало """ + Строка(Объект[ТекРеквизит.Имя]) + """";
	//		КонецЕсли;
	//		
	//		
	//	КонецЦикла; 
	//Иначе
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = "ВЫБРАТЬ
	//	|	*
	//	|ИЗ
	//	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	//	|ГДЕ
	//	|	ПлатежноеПоручение.Ссылка В(&Ссылка)";
	//	
	//	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	//	
	//	Результат = Запрос.Выполнить();
	//	Выборка = Результат.Выгрузить();
	//	Для каждого ТекРеквизит Из Объект.Ссылка.Метаданные().Реквизиты Цикл
	//		Если НЕ Объект[ТекРеквизит.Имя] = Выборка[0][ТекРеквизит.Имя] Тогда
	//			
	//			ТекЗапись = ТекЗапись + ?(ПустаяСтрока(ТекЗапись), "", "
	//			|
	//			|") + ТекРеквизит.Имя + " Было """ + Строка(Выборка[0][ТекРеквизит.Имя]) 
	//			+ """" + ", Стало """ + Строка(Объект[ТекРеквизит.Имя]) + """";
	//			
	//			
	//		КонецЕсли;
	//	КонецЦикла;	
	//КонецЕсли;
	//
	//Если НЕ ПустаяСтрока(ТекЗапись) Тогда
	//	ТекДата = ТекущаяДата();
	//	НаборЗаписей = РегистрыСведений.ЛогиДокумента.СоздатьНаборЗаписей();
	//	НаборЗаписей.Отбор.Документ.Установить(Объект.Ссылка);
	//	НаборЗаписей.Отбор.Период.Установить(ТекДата);
	//	НаборЗаписей.Прочитать();
	//	
	//	Если НаборЗаписей.Количество() Тогда //если есть записи в регистре
	//		НаборЗаписей[0].ЗаписьЛога = ТекЗапись;	
	//	Иначе //если нет записей в регистре
	//		НоваяЗапись = НаборЗаписей.Добавить();
	//		НоваяЗапись.Документ = Объект.Ссылка;
	//		НоваяЗапись.ЗаписьЛога = ТекЗапись;
	//		НоваяЗапись.Автор = ПараметрыСеанса.ТекущийПользователь;
	//		НоваяЗапись.Период = ТекДата;
	//		НоваяЗапись.ДатаНачалаРедактирования = ДатаНачалаРедактирования;
	//		НоваяЗапись.ДатаОкончанияРедактирования = ТекДата;
	//		НоваяЗапись.ЗаписьНовогоДокумента = ПризнакНового;
	//	КонецЕсли;                                                                                                     
	//	НаборЗаписей.Записать();
	//КонецЕсли;
	//
	
КонецПроцедуры

//формируем деревозначений подчиненных документов
Функция ОдновитьДеревоЗначенийДляЗаявкиНаОтгрузку(Ссылка, ОтражатьДокументыФакта) Экспорт
	//Дер = Новый ДеревоЗначений;
	//Дер.Колонки.Добавить("ТипДокумента");
	//Дер.Колонки.Добавить("Ссылка");
	//Дер.Колонки.Добавить("Дата");
	//Дер.Колонки.Добавить("Номер");
	//Дер.Колонки.Добавить("ТекущаяЗадача");
	//Дер.Колонки.Добавить("Предприятие");
	//Дер.Колонки.Добавить("КартинкаДокумента");
	//Дер.Колонки.Добавить("Количество");
	//Дер.Колонки.Добавить("ТекущийИсполнитель");
	//Дер.Колонки.Добавить("ТочкаМаршрута");
	//Дер.Колонки.Добавить("Подразделение");
	//Дер.Колонки.Добавить("ТекущийДокумент");
	//Дер.Колонки.Добавить("Автор");
	//
	////добавляем главного родителя
	//Если Дер.Строки.Найти(Ссылка, "Ссылка", Истина) = Неопределено Тогда
	//	
	//	НоваяСтрока = Дер.Строки.Добавить();
	//	ЗаполнитьЗначенияСвойств(НоваяСтрока, Ссылка);
	//	НоваяСтрока.КартинкаДокумента = ?(Ссылка.Проведен, 1, ?(Ссылка.ПометкаУдаления, 2, 0));
	//	НоваяСтрока.ТекущийДокумент = Истина;
	//	
	//КонецЕсли;
	//
	////первый уровень
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//|	Д_ЗаявкаНаОтгрузкуНовая.Ссылка КАК Ссылка,
	//|	""Заявка на отгрузку"" КАК ТипДокумента,
	//|	Д_ЗаявкаНаОтгрузкуНовая.Номер,
	//|	Д_ЗаявкаНаОтгрузкуНовая.Дата,
	//|	ВЫБОР
	//|		КОГДА Д_ЗаявкаНаОтгрузкуНовая.Проведен
	//|			ТОГДА 1
	//|		ИНАЧЕ ВЫБОР
	//|				КОГДА Д_ЗаявкаНаОтгрузкуНовая.ПометкаУдаления
	//|					ТОГДА 3
	//|				ИНАЧЕ 0
	//|			КОНЕЦ
	//|	КОНЕЦ КАК КартинкаДокумента,
	//|	Д_ЗаявкаНаОтгрузкуНовая.Предприятие,
	//|	Д_ЗаявкаНаОтгрузкуНовая.Количество,
	//|	Д_ЗаявкаНаОтгрузкуНовая.Подразделение,
	//|	Д_ЗаявкаНаОтгрузкуНовая.Автор,
	//|	ВЫБОР
	//|		КОГДА СогласованиеОбщее.Завершен = ИСТИНА
	//|			ТОГДА ""Выполнено""
	//|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(Задача.ТочкаМаршрута)
	//|	КОНЕЦ КАК ТочкаМаршрута,
	//|	МАКСИМУМ(Задача.Исполнитель) КАК ТекущийИсполнитель
	//|ИЗ
	//|	Документ.Д_ЗаявкаНаОтгрузкуНовая КАК Д_ЗаявкаНаОтгрузкуНовая
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Задача КАК Задача
	//|		ПО Д_ЗаявкаНаОтгрузкуНовая.Ссылка = Задача.Заявка
	//|			И (Задача.Выполнена = ЛОЖЬ)
	//|			И (Задача.ПометкаУдаления = ЛОЖЬ)
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СогласованиеОбщее КАК СогласованиеОбщее
	//|		ПО Д_ЗаявкаНаОтгрузкуНовая.Ссылка = СогласованиеОбщее.Заявка
	//|			И (СогласованиеОбщее.ПометкаУдаления = ЛОЖЬ)
	//|ГДЕ
	//|	Д_ЗаявкаНаОтгрузкуНовая.ДокОснование = &ДокументОснование
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	Д_ЗаявкаНаОтгрузкуНовая.Ссылка,
	//|	Д_ЗаявкаНаОтгрузкуНовая.Номер,
	//|	Д_ЗаявкаНаОтгрузкуНовая.Дата,
	//|	Д_ЗаявкаНаОтгрузкуНовая.Предприятие,
	//|	Д_ЗаявкаНаОтгрузкуНовая.Количество,
	//|	Д_ЗаявкаНаОтгрузкуНовая.Подразделение,
	//|	Д_ЗаявкаНаОтгрузкуНовая.Автор,
	//|	ВЫБОР
	//|		КОГДА Д_ЗаявкаНаОтгрузкуНовая.Проведен
	//|			ТОГДА 2
	//|		ИНАЧЕ ВЫБОР
	//|				КОГДА Д_ЗаявкаНаОтгрузкуНовая.ПометкаУдаления
	//|					ТОГДА 3
	//|				ИНАЧЕ 1
	//|			КОНЕЦ
	//|	КОНЕЦ,
	//|	ВЫБОР
	//|		КОГДА СогласованиеОбщее.Завершен = ИСТИНА
	//|			ТОГДА ""Выполнено""
	//|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(Задача.ТочкаМаршрута)
	//|	КОНЕЦ
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	Д_ЗаявкаНаДокументы.Ссылка,
	//|	""Заявка на документы"",
	//|	Д_ЗаявкаНаДокументы.Номер,
	//|	Д_ЗаявкаНаДокументы.Дата,
	//|	ВЫБОР
	//|		КОГДА Д_ЗаявкаНаДокументы.Проведен
	//|			ТОГДА 2
	//|		ИНАЧЕ ВЫБОР
	//|				КОГДА Д_ЗаявкаНаДокументы.ПометкаУдаления
	//|					ТОГДА 3
	//|				ИНАЧЕ 1
	//|			КОНЕЦ
	//|	КОНЕЦ,
	//|	Д_ЗаявкаНаДокументы.Предприятие,
	//|	Д_ЗаявкаНаДокументы.Количество,
	//|	Д_ЗаявкаНаДокументы.Подразделение,
	//|	Д_ЗаявкаНаДокументы.Автор,
	//|	ВЫБОР
	//|		КОГДА СогласованиеОбщее.Завершен = ИСТИНА
	//|			ТОГДА ""Выполнено""
	//|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(Задача.ТочкаМаршрута)
	//|	КОНЕЦ,
	//|	МАКСИМУМ(Задача.Исполнитель)
	//|ИЗ
	//|	Документ.Д_ЗаявкаНаДокументы КАК Д_ЗаявкаНаДокументы
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Задача КАК Задача
	//|		ПО Д_ЗаявкаНаДокументы.Ссылка = Задача.Заявка
	//|			И (Задача.Выполнена = ЛОЖЬ)
	//|			И (Задача.ПометкаУдаления = ЛОЖЬ)
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СогласованиеОбщее КАК СогласованиеОбщее
	//|		ПО Д_ЗаявкаНаДокументы.Ссылка = СогласованиеОбщее.Заявка
	//|			И (СогласованиеОбщее.ПометкаУдаления = ЛОЖЬ)
	//|ГДЕ
	//|	Д_ЗаявкаНаДокументы.ДокОснование = &ДокументОснование
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	Д_ЗаявкаНаДокументы.Ссылка,
	//|	Д_ЗаявкаНаДокументы.Номер,
	//|	Д_ЗаявкаНаДокументы.Дата,
	//|	Д_ЗаявкаНаДокументы.Предприятие,
	//|	Д_ЗаявкаНаДокументы.Количество,
	//|	Д_ЗаявкаНаДокументы.Подразделение,
	//|	Д_ЗаявкаНаДокументы.Автор,
	//|	ВЫБОР
	//|		КОГДА Д_ЗаявкаНаДокументы.Проведен
	//|			ТОГДА 2
	//|		ИНАЧЕ ВЫБОР
	//|				КОГДА Д_ЗаявкаНаДокументы.ПометкаУдаления
	//|					ТОГДА 3
	//|				ИНАЧЕ 1
	//|			КОНЕЦ
	//|	КОНЕЦ,
	//|	ВЫБОР
	//|		КОГДА СогласованиеОбщее.Завершен = ИСТИНА
	//|			ТОГДА ""Выполнено""
	//|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(Задача.ТочкаМаршрута)
	//|	КОНЕЦ
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	Д_КорректировкаДокумента.Ссылка,
	//|	""Заявка на документы"",
	//|	Д_КорректировкаДокумента.Номер,
	//|	Д_КорректировкаДокумента.Дата,
	//|	ВЫБОР
	//|		КОГДА Д_КорректировкаДокумента.Проведен
	//|			ТОГДА 2
	//|		ИНАЧЕ ВЫБОР
	//|				КОГДА Д_КорректировкаДокумента.ПометкаУдаления
	//|					ТОГДА 3
	//|				ИНАЧЕ 1
	//|			КОНЕЦ
	//|	КОНЕЦ,
	//|	Д_КорректировкаДокумента.ДокОснование.Предприятие,
	//|	NULL,
	//|	Д_КорректировкаДокумента.ДокОснование.Подразделение,
	//|	Д_КорректировкаДокумента.Автор,
	//|	ВЫБОР
	//|		КОГДА СогласованиеОбщее.Завершен = ИСТИНА
	//|			ТОГДА ""Выполнено""
	//|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(Задача.ТочкаМаршрута)
	//|	КОНЕЦ,
	//|	МАКСИМУМ(Задача.Исполнитель)
	//|ИЗ
	//|	Документ.Д_КорректировкаДокумента КАК Д_КорректировкаДокумента
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Задача КАК Задача
	//|		ПО Д_КорректировкаДокумента.Ссылка = Задача.Заявка
	//|			И (Задача.Выполнена = ЛОЖЬ)
	//|			И (Задача.ПометкаУдаления = ЛОЖЬ)
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СогласованиеОбщее КАК СогласованиеОбщее
	//|		ПО Д_КорректировкаДокумента.Ссылка = СогласованиеОбщее.Заявка
	//|			И (СогласованиеОбщее.ПометкаУдаления = ЛОЖЬ)
	//|ГДЕ
	//|	Д_КорректировкаДокумента.ДокОснование = &ДокументОснование
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	Д_КорректировкаДокумента.Ссылка,
	//|	Д_КорректировкаДокумента.Номер,
	//|	Д_КорректировкаДокумента.Дата,
	//|	Д_КорректировкаДокумента.Автор,
	//|	ВЫБОР
	//|		КОГДА Д_КорректировкаДокумента.Проведен
	//|			ТОГДА 2
	//|		ИНАЧЕ ВЫБОР
	//|				КОГДА Д_КорректировкаДокумента.ПометкаУдаления
	//|					ТОГДА 3
	//|				ИНАЧЕ 1
	//|			КОНЕЦ
	//|	КОНЕЦ,
	//|	Д_КорректировкаДокумента.ДокОснование.Предприятие,
	//|	Д_КорректировкаДокумента.ДокОснование.Подразделение,
	//|	ВЫБОР
	//|		КОГДА СогласованиеОбщее.Завершен = ИСТИНА
	//|			ТОГДА ""Выполнено""
	//|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(Задача.ТочкаМаршрута)
	//|	КОНЕЦ";
	//Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	//
	//Результат = Запрос.Выполнить();
	//Выборка = Результат.Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//	ТекРодитель = Дер.Строки.Найти(Ссылка, "Ссылка", Истина);
	//	Если НЕ ТекРодитель = Неопределено Тогда
	//		
	//		НоваяСтрока = ТекРодитель.Строки.Добавить();
	//		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	//	КонецЕсли;
	//	
	//КонецЦикла;
	//
	//
	////второй уровень
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	УЧ_РеализацияНовый.Ссылка,
	//               |	""Реализация по учету"" КАК Поле1,
	//               |	УЧ_РеализацияНовый.Номер,
	//               |	УЧ_РеализацияНовый.Дата,
	//               |	УЧ_РеализацияНовый.ДокументОснование,
	//               |	УЧ_РеализацияНовый.Предприятие,
	//               |	ВЫБОР
	//               |		КОГДА УЧ_РеализацияНовый.Проведен
	//               |			ТОГДА 2
	//               |		ИНАЧЕ ВЫБОР
	//               |				КОГДА УЧ_РеализацияНовый.ПометкаУдаления
	//               |					ТОГДА 3
	//               |				ИНАЧЕ 1
	//               |			КОНЕЦ
	//               |	КОНЕЦ КАК Поле2,
	//               |	УЧ_РеализацияНовый.ВидДеятельности,
	//               |	0 КАК Количество,
	//               |	УЧ_РеализацияНовый.Автор,
	//               |	NULL КАК Поле3,
	//               |	NULL КАК Поле4
	//               |ИЗ
	//               |	Документ.УЧ_Реализация КАК УЧ_РеализацияНовый
	//               |ГДЕ
	//               |	УЧ_РеализацияНовый.ДокументОснование В(&ДокОснование)
	//               |
	//               |СГРУППИРОВАТЬ ПО
	//               |	Д_КорректировкаДокумента.Ссылка,
	//               |	Д_КорректировкаДокумента.Номер,
	//               |	Д_КорректировкаДокумента.Дата,
	//               |	Д_КорректировкаДокумента.ДокОснование,
	//               |	Д_КорректировкаДокумента.ДокОснование.Предприятие,
	//               |	Д_КорректировкаДокумента.ДокОснование.Подразделение,
	//               |	Д_КорректировкаДокумента.Автор,
	//               |	ВЫБОР
	//               |		КОГДА Д_КорректировкаДокумента.Проведен
	//               |			ТОГДА 2
	//               |		ИНАЧЕ ВЫБОР
	//               |				КОГДА Д_КорректировкаДокумента.ПометкаУдаления
	//               |					ТОГДА 3
	//               |				ИНАЧЕ 1
	//               |			КОНЕЦ
	//               |	КОНЕЦ,
	//               |	ВЫБОР
	//               |		КОГДА СогласованиеОбщее.Завершен = ИСТИНА
	//               |			ТОГДА ""Выполнено""
	//               |		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(Задача.ТочкаМаршрута)
	//               |	КОНЕЦ";
	//
	//Запрос.УстановитьПараметр("ДокОснование", Результат.Выгрузить().ВыгрузитьКолонку("Ссылка"));
	//
	//Результат = Запрос.Выполнить();
	//Выборка = Результат.Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//	ТекРодитель = Дер.Строки.Найти(Выборка.ДокОснование, "Ссылка", Истина);
	//	Если НЕ ТекРодитель = Неопределено Тогда
	//		
	//		НоваяСтрока = ТекРодитель.Строки.Добавить();
	//		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	//
	//Если ОтражатьДокументыФакта Тогда
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = "ВЫБРАТЬ
	//	|	УЧ_РеализацияТрУслуг.Ссылка,
	//	|	""Реализация тр. услуг по учету"" КАК ТипДокумента,
	//	|	УЧ_РеализацияТрУслуг.Номер,
	//	|	УЧ_РеализацияТрУслуг.Дата,
	//	|	УЧ_РеализацияТрУслуг.ДокОснование,
	//	|	УЧ_РеализацияТрУслуг.Предприятие,
	//	|	ВЫБОР
	//	|		КОГДА УЧ_РеализацияТрУслуг.Проведен
	//	|			ТОГДА 1
	//	|		ИНАЧЕ ВЫБОР
	//	|				КОГДА УЧ_РеализацияТрУслуг.ПометкаУдаления
	//	|					ТОГДА 3
	//	|				ИНАЧЕ 0
	//	|			КОНЕЦ
	//	|	КОНЕЦ КАК КартинкаДокумента,
	//	|	УЧ_РеализацияТрУслуг.Автор
	//	|ИЗ
	//	|	Документ.УЧ_РеализацияТрУслуг КАК УЧ_РеализацияТрУслуг
	//	|ГДЕ
	//	|	УЧ_РеализацияТрУслуг.ДокОснование В(&ДокОснование)";
	//	
	//	Запрос.УстановитьПараметр("ДокОснование", Результат.Выгрузить().ВыгрузитьКолонку("Ссылка"));
	//	
	//	Результат = Запрос.Выполнить();
	//	Выборка = Результат.Выбрать();
	//	
	//	Пока Выборка.Следующий() Цикл
	//		ТекРодитель = Дер.Строки.Найти(Выборка.ДокОснование, "Ссылка", Истина);
	//		Если НЕ ТекРодитель = Неопределено Тогда
	//			НоваяСтрока = ТекРодитель.Строки.Добавить();
	//			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	//		КонецЕсли;
	//		//ТекРодитель = ТекРодитель.Строки.Найти(Выборка.ДокОснование, "Ссылка");
	//	КонецЦикла;
	//КонецЕсли;
	//
	//
	//Возврат Дер;
	
	
КонецФункции

//формируем деревозначений подчиненных документов
Функция ОдновитьДеревоЗначений(Ссылка, Дер = Неопределено, ПараметрКоманды = Неопределено, РасширеннаяДетализация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Дер = Неопределено Тогда
		Дер = Новый ДеревоЗначений;
		Дер.Колонки.Добавить("ТипДокумента");
		Дер.Колонки.Добавить("Ссылка");
		Дер.Колонки.Добавить("Дата");
		Дер.Колонки.Добавить("Номер");
		Дер.Колонки.Добавить("ТекущаяЗадача");
		Дер.Колонки.Добавить("Предприятие");
		Дер.Колонки.Добавить("КартинкаДокумента");
		Дер.Колонки.Добавить("Количество");
		Дер.Колонки.Добавить("ТекущийИсполнитель");
		Дер.Колонки.Добавить("ТочкаМаршрута");
		Дер.Колонки.Добавить("Подразделение");
		Дер.Колонки.Добавить("ТекущийДокумент");
		Дер.Колонки.Добавить("Автор");
		Дер.Колонки.Добавить("СуммаДокумента");
	КонецЕсли;
	
	Если НЕ ТипЗнч(Ссылка) = Тип("Массив") Тогда
		ТекРодители = Новый Массив;
		ТекРодители.Добавить(Ссылка);
		//ищем исконного родителя
		
		ТипМетаданныхСсылки = Ссылка.Метаданные();
		МассивТиповРеквизитов = Новый Массив;
		МассивТиповРеквизитов.Добавить(ТипМетаданныхСсылки.Реквизиты);
		МассивТиповРеквизитов.Добавить(ТипМетаданныхСсылки.СтандартныеРеквизиты);
		Для каждого ТекТипРеквизитов Из МассивТиповРеквизитов Цикл
			Для каждого ТекРеквизит Из ТекТипРеквизитов Цикл
				Для каждого ТекТип Из ТекРеквизит.Тип.Типы() Цикл
					Если НЕ ТекТип = Тип("Дата") И НЕ ТекТип = Тип("Булево") И НЕ ТекТип = Тип("Число") И НЕ ТекТип = Тип("Строка") И НЕ ТекТип = Тип("ХранилищеЗначения") Тогда
						Типп = Новый(ТекТип);
						Если (НЕ Метаданные.Документы.Найти(Типп.Метаданные().Имя) = Неопределено) И НЕ ТекРеквизит.Имя = "Ссылка" Тогда
							Если ЗначениеЗаполнено(Ссылка[ТекРеквизит.Имя]) И ТипЗнч(Типп) = ТипЗнч(Ссылка[ТекРеквизит.Имя]) Тогда
								Дер = ОдновитьДеревоЗначений(Ссылка[ТекРеквизит.Имя],,ПараметрКоманды, РасширеннаяДетализация);
								Возврат Дер;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла; 
			КонецЦикла;
		КонецЦикла;//конец поиска исконного родителя
		
		НоваяСтрока = Дер.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Ссылка);
		ЗаполнитьСуммуДокументаДляТипов(НоваяСтрока, Ссылка);
		НоваяСтрока.ТекущийДокумент = (Ссылка = ПараметрКоманды);
		Попытка
			НоваяСтрока.КартинкаДокумента = ?(Ссылка.Проведен, 1, ?(Ссылка.ПометкаУдаления, 3, 0));
		Исключение
			НоваяСтрока.КартинкаДокумента = ?(Ссылка.ПометкаУдаления, 3, 0);		
		КонецПопытки;
		
	Иначе
		ТекРодители = Ссылка;
	КонецЕсли;
	
	Для каждого ТекСсылка Из ТекРодители Цикл
		
		ТипМетаданныхСсылки = ТекСсылка.Метаданные();
		ТаблицаПодчиненных = Новый ТаблицаЗначений;
		ТаблицаПодчиненных.Колонки.Добавить("Уровень");
		ТаблицаПодчиненных.Колонки.Добавить("ИмяДокумента");
		ТаблицаПодчиненных.Колонки.Добавить("ИмяРеквизита");
		ТаблицаПодчиненных.Колонки.Добавить("ИмяОбъектаМетаданных");
		
		СоответствиеМетаданных = Новый Соответствие;
		СоответствиеМетаданных.Вставить(Метаданные.Документы, "Документ");
		СоответствиеМетаданных.Вставить(Метаданные.Справочники, "Справочник");
		
		Если РасширеннаяДетализация Тогда
			СоответствиеМетаданных.Вставить(Метаданные.БизнесПроцессы, "БизнесПроцесс");
			СоответствиеМетаданных.Вставить(Метаданные.Задачи, "Задача");
			//СоответствиеМетаданных.Вставить(Метаданные.Справочники, "Справочник");
		КонецЕсли;
		
		Для каждого ТекОбъектМетаданных Из СоответствиеМетаданных Цикл
			Для каждого ТекДокумент Из ТекОбъектМетаданных.Ключ Цикл
				//Если ТипМетаданныхСсылки = ТекДокумент Тогда
				//	Если Не ТекДокумент.Имя = "БП_Поручение" Тогда
				//		Продолжить; //обрубаем однотипные доки			
				//	КонецЕсли;
				//КонецЕсли;
				//заменил на условие по ссылке							
				
				//для справочников отключаем, кроме опознавания
				Если ТекОбъектМетаданных.Значение = "Справочник" И НЕ ТекДокумент.Имя = "ОпознаваниеПлатежей" Тогда
					Продолжить;				
				КонецЕсли;
				
				МассивТиповРеквизитов = Новый Массив;
				МассивТиповРеквизитов.Добавить(ТекДокумент.Реквизиты);
				МассивТиповРеквизитов.Добавить(ТекДокумент.СтандартныеРеквизиты);
				Для каждого ТекТипРеквизитов Из МассивТиповРеквизитов Цикл
					Для каждого ТекРеквизит Из ТекТипРеквизитов Цикл
						Для каждого ТекТип Из ТекРеквизит.Тип.Типы() Цикл
							Если НЕ ТекТип = Тип("Дата") И НЕ ТекТип = Тип("Булево") И НЕ ТекТип = Тип("Число") И НЕ ТекТип = Тип("Строка") И НЕ ТекТип = Тип("ХранилищеЗначения") И НЕ ТекРеквизит.Имя = "Ссылка" Тогда
								Типп = Новый(ТекТип);
								Если ТипЗнч(ТекСсылка) = ТипЗнч(Типп) Тогда
									НоваяСтрока = ТаблицаПодчиненных.Добавить();
									НоваяСтрока.Уровень = 1;
									НоваяСтрока.ИмяДокумента = ТекДокумент.Имя;
									НоваяСтрока.ИмяРеквизита = ТекРеквизит.Имя;
									НоваяСтрока.ИмяОбъектаМетаданных = СоответствиеМетаданных[ТекОбъектМетаданных.Ключ];
								КонецЕсли;
							КонецЕсли;
						КонецЦикла; 
					КонецЦикла;
				КонецЦикла; 
				
			КонецЦикла;
			
			
		КонецЦикла;
		
		//частные случаи
		ОтобранныеСтрокиТЧ = ТаблицаПодчиненных.НайтиСтроки(Новый Структура("ИмяДокумента, ИмяРеквизита", "Задача", "Заявка"));
		Для каждого ТекСтрока Из ОтобранныеСтрокиТЧ Цикл
			ТаблицаПодчиненных.Удалить(ТекСтрока);			
		КонецЦикла; 
		//конец частных случаев
		
		МассивПодчиненных = Новый Массив;
		Для каждого ТекСтрока Из ТаблицаПодчиненных Цикл
			
			Если ТекСтрока.ИмяОбъектаМетаданных = "Документ" Тогда
				ЧастьЗапроса = ",
				|	ВЫБОР
				|		КОГДА Д_ЗаявкаНаОтгрузкуНовая.Проведен
				|			ТОГДА 1
				|		ИНАЧЕ ВЫБОР
				|				КОГДА Д_ЗаявкаНаОтгрузкуНовая.ПометкаУдаления
				|					ТОГДА 3
				|				ИНАЧЕ 0
				|			КОНЕЦ
				|	КОНЕЦ КАК КартинкаДокумента";
			Иначе
				ЧастьЗапроса = ",
				|	1 КАК КартинкаДокумента";	
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|*" + ЧастьЗапроса + "
			|ИЗ
			|	" + ТекСтрока.ИмяОбъектаМетаданных + "." + ТекСтрока.ИмяДокумента + " КАК Д_ЗаявкаНаОтгрузкуНовая
			|ГДЕ
			|	Д_ЗаявкаНаОтгрузкуНовая." + ТекСтрока.ИмяРеквизита + " = &ДокументОснование";
			Запрос.УстановитьПараметр("ДокументОснование", ТекСсылка);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Если Дер.Строки.Количество() Тогда
					ТекРодитель = Дер.Строки.Найти(ТекСсылка, "Ссылка", Истина);
				Иначе
					ТекРодитель = Дер;
				КонецЕсли;
				Если НЕ ТекРодитель = Неопределено И Дер.Строки.Найти(Выборка.Ссылка, "Ссылка", Истина) = Неопределено Тогда
					ДобавлятьПодчиненный = Истина;
					//Если ТипЗнч(ПараметрКоманды) = Тип("ДокументСсылка.Д_ЗаявкаНаОтгрузку") И ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.Д_ЗаявкаНаОтгрузку") И НЕ (Выборка.Ссылка = ПараметрКоманды) Тогда
					//	ДобавлятьПодчиненный = Ложь;					
					//КонецЕсли;
					Если ДобавлятьПодчиненный Тогда
						НоваяСтрока = ТекРодитель.Строки.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
						ЗаполнитьСуммуДокументаДляТипов(НоваяСтрока, Выборка);
						НоваяСтрока.ТекущийДокумент = (Выборка.Ссылка = ПараметрКоманды);				
						МассивПодчиненных.Добавить(Выборка.Ссылка);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		Если МассивПодчиненных.Количество() Тогда
			ОдновитьДеревоЗначений(МассивПодчиненных, Дер, ПараметрКоманды, РасширеннаяДетализация);
		//Иначе
		//	Прервать;	
		КонецЕсли;
	КонецЦикла; 
	
	
	
	Возврат Дер;
	
	
КонецФункции

Процедура ЗаполнитьСуммуДокументаДляТипов(НоваяСтрока, Ссылка)
	
	Попытка
		
		Если ТипЗнч(Ссылка.Ссылка) = Тип("ДокументСсылка.Д_ЗаявкаНаФинансирование") Тогда
			НоваяСтрока.СуммаДокумента = Ссылка.Сумма;
		ИначеЕсли ТипЗнч(Ссылка.Ссылка) = Тип("ДокументСсылка.Д_ЗаявкаНаСогласованиеДоговора") Тогда
			НоваяСтрока.СуммаДокумента = Ссылка.Сумма;
		КонецЕсли;
		
	Исключение
		
	КонецПопытки;
	
КонецПроцедуры


Функция СписокЛицензий(ТекКонтрагент, ТекДата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КС_Лицензии.Ссылка
	|ИЗ
	|	Справочник.КС_Лицензии КАК КС_Лицензии
	|ГДЕ
	|	КС_Лицензии.ДатаВыдачи <= &ТекДата
	|	И КС_Лицензии.ДатаОкончания >= &ТекДата
	|	И КС_Лицензии.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", ТекКонтрагент);
	Запрос.УстановитьПараметр("ТекДата", ТекДата);
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	
	
КонецФункции // ()

Функция ПолучитьДоговор(Предприятие, Контрагент, ТекДата) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка,
	|	ДоговорыКонтрагентов.Дата КАК ДатаДоговора
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Владелец
	|	И ДоговорыКонтрагентов.СрокДействия > &ТекДата
	|	И ДоговорыКонтрагентов.Предприятие = &Предприятие
	|	И ДоговорыКонтрагентов.Дата <= &ТекДата";
	
	Запрос.УстановитьПараметр("Владелец", Контрагент);
	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	Запрос.УстановитьПараметр("ТекДата", ТекДата);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ТекДоговор = Неопределено;
	Пока Выборка.Следующий() Цикл
		Если ТекДоговор = Неопределено Тогда
			ТекДоговор = Выборка.Ссылка;
		Иначе
			Если Выборка.ДатаДоговора > ТекДоговор.ДатаДоговора Тогда
				ТекДоговор = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ТекДоговор = Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	КС_ПротоколыСогласования.Ссылка
		|ИЗ
		|	Справочник.КС_ПротоколыСогласования КАК КС_ПротоколыСогласования
		|ГДЕ
		|	КС_ПротоколыСогласования.Владелец = &Владелец
		|
		|УПОРЯДОЧИТЬ ПО
		|	КС_ПротоколыСогласования.Дата УБЫВ";
		
		Запрос.УстановитьПараметр("Владелец", ТекДоговор);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		ТекПротокол = Неопределено;
		Пока Выборка.Следующий() Цикл
			
			ТекПротокол = Выборка.Ссылка;   
			
		КонецЦикла;
		
		
	КонецЕсли;
	
	Возврат Новый Структура("Договор, Протокол", ТекДоговор, ТекПротокол);
	
	
КонецФункции // ()

//Проверка на наличие новых новостей у пользователя
Функция ПроверкаНаНовыеНовости(ЭтоНовость = Истина) Экспорт
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	Новости.Новость
	//|ИЗ
	//|	РегистрСведений.Новости КАК Новости
	//|ГДЕ
	//|	Новости.Пользователь = &Пользователь
	//|	И НЕ Новости.НовостьПрочитана
	//|	И ВЫБОР
	//|			КОГДА &ЭтоНовость = ЛОЖЬ
	//|				ТОГДА ТИПЗНАЧЕНИЯ(Новости.Новость) = ТИП(СТРОКА)
	//|			ИНАЧЕ Новости.Новость ССЫЛКА Документ.Новости
	//|		КОНЕЦ";
	//Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	//Запрос.УстановитьПараметр("ЭтоНовость", ЭтоНовость);
	//Возврат Запрос.Выполнить().Выбрать().Количество();
	
	Возврат 0;
	
КонецФункции	

//Получение пустой ссылки по названию справочника
Функция ПолучитьПустуюСсылкуСправочника(НазваниеСправочника) Экспорт
	Возврат Справочники[НазваниеСправочника].ПустаяССылка();
КонецФункции // ()

// di 14.03.13 
Функция ПолучитьДоступныйСчет(ТекСчет) Экспорт
	
	Если ПараметрыСеанса.ДоступныеСчета.Количество() Тогда
		
		Если ПараметрыСеанса.ДоступныеСчета.Найти(ТекСчет) = Неопределено Тогда
			Возврат ПараметрыСеанса.ДоступныеСчета[0];
		Иначе
			Возврат ТекСчет;
		КонецЕсли;
		
	Иначе
		
		Возврат ТекСчет;
		
	КонецЕсли;
	
КонецФункции

Функция ПроверитьМонопольностьВхода() Экспорт
	
	#Если ВебКлиент Или МобильныйКлиент Или МобильноеПриложениеКлиент Тогда
	 
	 	Возврат Ложь;	
	 
	 #КонецЕсли
	
	//ТекущийНомерСоединения = НомерСоединенияИнформационнойБазы();
	//УникальныйИдентификаторПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
	//
	//МассивСоединений = ПолучитьСоединенияИнформационнойБазы();
	//Для Каждого ТекСоединение Из МассивСоединений Цикл
	//	Если (ТекСоединение.ИмяПриложения = "1CV8C")
	//		И (НЕ ТекСоединение.НомерСоединения = ТекущийНомерСоединения)
	//		И (НЕ ТекСоединение.Пользователь = Неопределено)
	//		И (ТекСоединение.Пользователь.УникальныйИдентификатор = УникальныйИдентификаторПользователя)
	//		И (ТекСоединение.Пользователь.ПолноеИмя = ПараметрыСеанса.ТекущийПользователь.Наименование)
	//		И НЕ ПараметрыСеанса.ТекущийПользователь.ОтключитьКонтрольМонопольногоВхода Тогда
	//		Возврат Истина;
	//	КонецЕсли;    
	//КонецЦикла; 
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьТекущиеУсловияКонтрагента(Контрагент, Дата, СоответстиеИменам = Ложь) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Если СоответстиеИменам Тогда
		Запрос.Текст = "ВЫБРАТЬ
		|	КС_УсловияКонтрагентаСрезПоследних.МесячнаяПотребность,
		|	КС_УсловияКонтрагентаСрезПоследних.Цена,
		|	КС_УсловияКонтрагентаСрезПоследних.ЛимитДЗ,
		|	КС_УсловияКонтрагентаСрезПоследних.ЛимитПДЗ,
		|	КС_УсловияКонтрагентаСрезПоследних.МаксКоличествоДнейПросрочки,
		|	КС_УсловияКонтрагентаСрезПоследних.Отсрочка,
		|	КС_УсловияКонтрагентаСрезПоследних.Предоплата,
		|	КС_УсловияКонтрагентаСрезПоследних.Верх,
		|	КС_УсловияКонтрагентаСрезПоследних.ТипСпирта,
		|	КС_УсловияКонтрагентаСрезПоследних.НДС,
		|	КС_УсловияКонтрагентаСрезПоследних.ЕдИзмерения
		|ИЗ
		|	РегистрСведений.КС_УсловияКонтрагента.СрезПоследних(&ТекДата, Контрагент = &Контрагент) КАК КС_УсловияКонтрагентаСрезПоследних";
	Иначе	
		Запрос.Текст = "ВЫБРАТЬ
		|	КС_УсловияКонтрагентаСрезПоследних.МесячнаяПотребность КАК ТекущаяМесячнаяПотребность,
		|	КС_УсловияКонтрагентаСрезПоследних.Цена КАК ТекЦена,
		|	КС_УсловияКонтрагентаСрезПоследних.ЛимитДЗ КАК ТекущийЛимитДЗ,
		|	КС_УсловияКонтрагентаСрезПоследних.ЛимитПДЗ КАК ТекущийЛимитПДЗ,
		|	КС_УсловияКонтрагентаСрезПоследних.МаксКоличествоДнейПросрочки КАК ТекМаксКоличествоДнейПросрочки,
		|	КС_УсловияКонтрагентаСрезПоследних.Отсрочка КАК ТекОтсрочка,
		|	КС_УсловияКонтрагентаСрезПоследних.Предоплата КАК ТекПредоплата,
		|	КС_УсловияКонтрагентаСрезПоследних.Верх КАК ТекВерх,
		|	КС_УсловияКонтрагентаСрезПоследних.НДС КАК ТекНДС,
		|	КС_УсловияКонтрагентаСрезПоследних.ТипСпирта КАК ТекТипСпирта,
		|	КС_УсловияКонтрагентаСрезПоследних.ЕдИзмерения КАК ТекЕдИзмерения
		|ИЗ
		|	РегистрСведений.КС_УсловияКонтрагента.СрезПоследних(&ТекДата, Контрагент = &Контрагент) КАК КС_УсловияКонтрагентаСрезПоследних";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТекДата", Дата);
	ТекРодитель = Контрагент.Родитель;
	ТекКонтрагент = Контрагент;
	//Сож+
	Если  Типзнч(ТекРодитель.ГруппаКлиентов) = Тип("Булево") Тогда
		Если ЗначениеЗаполнено(ТекРодитель) И (ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты")) И ТекРодитель.ГруппаКлиентов Тогда
			ТекКонтрагент = ТекРодитель;	
		КонецЕсли;
	КонецЕсли;
	//Сож-
	Запрос.УстановитьПараметр("Контрагент", ТекКонтрагент);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();
	
	Если Не Выборка.Количество() И Не ТекКонтрагент = Контрагент Тогда
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выгрузить();
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура;
	Если Выборка.Количество() Тогда
		Для каждого ТекКолонка Из Выборка.Колонки Цикл
			СтруктураРеквизитов.Вставить(ТекКолонка.Имя, Выборка[0][ТекКолонка.Имя]); 
		КонецЦикла; 
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	Возврат СтруктураРеквизитов;	
КонецФункции // ()

Функция ПолучитьТекущиеДоговоренностиКонтрагента(Контрагент, Предприятие, Дата, СоответстиеИменам = Ложь) Экспорт
	Запрос = Новый Запрос;
	Если СоответстиеИменам Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	КС_РеестрДоговоренностейСрезПоследних.Цена,
		               |	КС_РеестрДоговоренностейСрезПоследних.Верх
		               |ИЗ
		               |	РегистрСведений.КС_РеестрДоговоренностей.СрезПоследних(
		               |			&ТекДата,
		               |			Контрагент = &Контрагент
		               |				И Предприятие = &Предприятие) КАК КС_РеестрДоговоренностейСрезПоследних";
	Иначе	
		Запрос.Текст = "ВЫБРАТЬ
		               |	КС_РеестрДоговоренностейСрезПоследних.Цена КАК ТекЦена,
		               |	КС_РеестрДоговоренностейСрезПоследних.Верх КАК ТекВерх
		               |ИЗ
		               |	РегистрСведений.КС_РеестрДоговоренностей.СрезПоследних(
		               |			&ТекДата,
		               |			Контрагент = &Контрагент
		               |				И Предприятие = &Предприятие) КАК КС_РеестрДоговоренностейСрезПоследних";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТекДата", Дата);
	ТекРодитель = Контрагент.Родитель;
	ТекКонтрагент = Контрагент;
	Если ЗначениеЗаполнено(ТекРодитель) И (ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты")) И ТекРодитель.ГруппаКлиентов Тогда
		ТекКонтрагент = ТекРодитель;	
	КонецЕсли;
	Запрос.УстановитьПараметр("Контрагент", ТекКонтрагент);
	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();
	
	СтруктураРеквизитов = Новый Структура;
	Если Выборка.Количество() Тогда
		Для каждого ТекКолонка Из Выборка.Колонки Цикл
			СтруктураРеквизитов.Вставить(ТекКолонка.Имя, Выборка[0][ТекКолонка.Имя]); 
		КонецЦикла; 
	КонецЕсли;
	Возврат СтруктураРеквизитов;	
КонецФункции // ()

Функция ВХранилище(КлючУникальности, ИмяФайла) Экспорт
	
	//ИмяФайлаНаСервере = Константы.ПутьКМестуХраненияФайлов.Получить() + "\" + ИмяФайла;
	//Данные = Новый ДвоичныеДанные(ИмяФайлаНаСервере);
	//Если Данные = Неопределено Тогда
	//	Возврат Неопределено;
	//КонецЕсли;	
	
	Возврат Неопределено;
КонецФункции

Функция РежимГорячейЛинии1С() Экспорт
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ЕСТЬNULL(ДополнительныеСвойстваПользователя.РежимГорячейЛинии, ЛОЖЬ) КАК РежимГорячейЛинии
	//|ИЗ
	//|	РегистрСведений.ДополнительныеСвойстваПользователя КАК ДополнительныеСвойстваПользователя
	//|ГДЕ
	//|	ДополнительныеСвойстваПользователя.Пользователь = &Пользователь";
	//Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//	Возврат Выборка.РежимГорячейЛинии;
	//КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции	

//max 25.06.13
Функция ПринадлежитПодсистеме(ТекСсылка,ТекПодсистема) Экспорт
	Возврат Истина;
КонецФункции

Функция ПолучитьПоследнийВариантКвоты(Сценарий, ТипКвоты) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	КС_Квоты.Ссылка,
	|	КС_Квоты.Дата КАК Дата
	|ИЗ
	|	Документ.КС_Квоты КАК КС_Квоты
	|ГДЕ
	|	КС_Квоты.ТипКвоты = &ТипКвоты
	|	И КС_Квоты.ПометкаУдаления = ЛОЖЬ
	|	И КС_Квоты.Сценарий = &Сценарий
	|	И ВЫБОР
	|			КОГДА &ТипКвоты = ""Общая квота""
	|				ТОГДА КС_Квоты.Недоступен = ИСТИНА
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.УстановитьПараметр("ТипКвоты", ТипКвоты);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
	
	
	
КонецФункции // ()

Функция ИнтервалМеньшеПериода(Период, Интервал) Экспорт
	
	МеньшеПериода = Ложь;
	
	КонМес = Месяц(Период.ДатаОкончания + 1);
	Если Год(Период.ДатаОкончания + 1) > Год(Период.ДатаОкончания) Тогда
		РазностьЛет = Год(Период.ДатаОкончания + 1) - Год(Период.ДатаОкончания);
		КонМес = КонМес + 12*РазностьЛет;
	КонецЕсли;
	
	МесяцевВПериоде = ?(КонМес - Месяц(Период.ДатаНачала) < 0, -(КонМес - Месяц(Период.ДатаНачала)), КонМес - Месяц(Период.ДатаНачала));
	Если Интервал = "Месяц" ИЛИ Интервал = Перечисления.Д_Интервал.Помесячно Тогда
		МесяцевВИнтервале = 1;
	ИначеЕсли Интервал = "Квартал" ИЛИ Интервал = Перечисления.Д_Интервал.Поквартально Тогда
		МесяцевВИнтервале = 3;
	Иначе
		МесяцевВИнтервале = 12;
	КонецЕсли;
	
	Если МесяцевВИнтервале < МесяцевВПериоде Тогда	
		МеньшеПериода = Истина;
	КонецЕсли;
	
	Возврат МеньшеПериода;
	
КонецФункции

Процедура ПровестиСРежимом(Ссылка) Экспорт
	ТекО = Ссылка.ПолучитьОбъект();
	ТекО.Записать(РежимЗаписиДокумента.Проведение);
КонецПроцедуры

Функция НайтиФайлНаСервере(ИмяФайла) Экспорт
	Возврат Справочники.Файлы.НайтиПоНаименованию(ИмяФайла)
КонецФункции

Функция ПолучитьСписокОснований(Предприятие, Сценарий, Месяц, Статья) Экспорт
	
КонецФункции

Функция ПолучитьПоследнийВариантГрафика(Сценарий, ТипКвоты) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	КС_ГрафикОтгрузок.Ссылка,
	|	КС_ГрафикОтгрузок.Дата КАК Дата
	|ИЗ
	|	Документ.КС_ГрафикОтгрузок КАК КС_ГрафикОтгрузок
	|ГДЕ
	|	КС_ГрафикОтгрузок.ПометкаУдаления = ЛОЖЬ
	|	И КС_ГрафикОтгрузок.Сценарий = &Сценарий
	|	И ВЫБОР
	|			КОГДА &ТипКвоты = ""Общая квота""
	|				ТОГДА КС_ГрафикОтгрузок.Недоступен = ИСТИНА
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ТипКвоты = ""Общая квота""
	|				ТОГДА КС_ГрафикОтгрузок.ТипГрафика = ""Общий график""
	|			ИНАЧЕ КС_ГрафикОтгрузок.ТипГрафика = ""Вариант общего графика""
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.УстановитьПараметр("ТипКвоты", ТипКвоты);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
	
	
	
КонецФункции // ()

Функция ПолучитьДеревоПредприятий(Подразделения) Экспорт
	
	ДеревоПредприятий = Новый ДеревоЗначений;
	ДеревоПредприятий.Колонки.Добавить("Пометка");
	ДеревоПредприятий.Колонки.Добавить("Значение");
	
	ТекПр = БюджетныйНаСервере.ПолучитьПредприятия();
	МассивПредприятий = Новый Массив;
	
	Для Каждого Эл Из ТекПр Цикл
		
		Если Не ЗначениеЗаполнено(Эл) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Эл.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		МассивПредприятий.Добавить(Эл);
		
		СтрокаПредприятия = ДеревоПредприятий.Строки.Добавить();
		СтрокаПредприятия.Значение = Эл;
		СтрокаПредприятия.Пометка = Ложь;
		
	КонецЦикла;
	
	Если Подразделения Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	СтруктураПредприятия.Ссылка КАК Подразделение,
		               |	СтруктураПредприятия.Предприятие КАК Предприятие
		               |ИЗ
		               |	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		               |ГДЕ
		               |	СтруктураПредприятия.Предприятие В(&ТекущееПредприятие)
		               |	И СтруктураПредприятия.Предприятие.ПометкаУдаления = ЛОЖЬ
		               |	И СтруктураПредприятия.ПометкаУдаления = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("ТекущееПредприятие", МассивПредприятий);

		Результат = Запрос.Выполнить();
		ТЗ_Подразделения = Результат.Выгрузить();
	
		Для Каждого СтрокаПр Из ДеревоПредприятий.Строки Цикл
		
			СтруктураОтбора = Новый Структура("Предприятие", СтрокаПр.Значение);		
			МассивПодразделений = ТЗ_Подразделения.НайтиСтроки(СтруктураОтбора);
		
			Для Каждого ЭлПодр Из МассивПодразделений Цикл
			
				СтрокаПодразделения = СтрокаПр.Строки.Добавить();
				СтрокаПодразделения.Значение = ЭлПодр.Подразделение;
				СтрокаПодразделения.Пометка = Ложь;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
		
	Возврат ДеревоПредприятий;
	
КонецФункции

Функция ПолучитьДеревоПредприятийПоТипам(Подразделения) Экспорт
	
	ДеревоП = Новый ДеревоЗначений;
	ДеревоП.Колонки.Добавить("Значение");
	ДеревоП.Колонки.Добавить("Пометка");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Предприятия.Ссылка,
	               |	Предприятия.ТипПредприятия КАК ТипПредприятия,
	               |	ЕСТЬNULL(Предприятия.ТипПредприятия.ПорядковыйНомер, """") КАК ТипПредприятияПорядковыйНомер
	               |ИЗ
	               |	Справочник.Предприятия КАК Предприятия
	               |ГДЕ
	               |	Предприятия.ПометкаУдаления = ЛОЖЬ
	               |ИТОГИ ПО
	               |	ТипПредприятия";
				   
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();
	Выборка.Сортировать("ТипПредприятияПорядковыйНомер Возр");
	
	ТЗ_Типы = Выборка.Скопировать();
	ТЗ_Типы.Свернуть("ТипПредприятия");
	МассивПредприятий = Новый Массив;
	
	Для Каждого ТекСтрокаТип Из ТЗ_Типы Цикл
		
		НовыйТипПр = ДеревоП.Строки.Добавить();
		НовыйТипПр.Значение = ТекСтрокаТип.ТипПредприятия;
		ПредприятияТипа = Выборка.НайтиСтроки(Новый Структура("ТипПредприятия", ТекСтрокаТип.ТипПредприятия));
		
		Для Каждого ТекСтрокаПр Из ПредприятияТипа Цикл
			
			Если Не ЗначениеЗаполнено(ТекСтрокаПр.Ссылка) Тогда
				Продолжить;
			КонецЕсли;
			
			НовоеПредприятие = НовыйТипПр.Строки.Добавить();
			НовоеПредприятие.Значение = ТекСтрокаПр.Ссылка;
			МассивПредприятий.Добавить(ТекСтрокаПр.Ссылка);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если Подразделения Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	СтруктураПредприятия.Ссылка КАК Подразделение,
		               |	СтруктураПредприятия.Предприятие КАК Предприятие
		               |ИЗ
		               |	Справочник.СтруктураПредприятия КАК ВидыДеятельности
		               |ГДЕ
		               |	СтруктураПредприятия.Предприятие В(&ТекущееПредприятие)
		               |	И СтруктураПредприятия.Предприятие.ПометкаУдаления = ЛОЖЬ
		               |	И СтруктураПредприятия.ПометкаУдаления = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("ТекущееПредприятие", МассивПредприятий);

		Результат = Запрос.Выполнить();
		ТЗ_Подразделения = Результат.Выгрузить();
	
		Для Каждого СтрокаТип Из ДеревоП.Строки Цикл
			
			Для Каждого СтрокаПр Из СтрокаТип.Строки Цикл
			
				СтруктураОтбора = Новый Структура("Предприятие", СтрокаПр.Значение);		
				МассивПодразделений = ТЗ_Подразделения.НайтиСтроки(СтруктураОтбора);
		
				Для Каждого ЭлПодр Из МассивПодразделений Цикл
			
					СтрокаПодразделения = СтрокаПр.Строки.Добавить();
					СтрокаПодразделения.Значение = ЭлПодр.Подразделение;
					СтрокаПодразделения.Пометка = Ложь;
				
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДеревоП;
	
КонецФункции

Функция ВернутьТабличныйДокументДляСогласователей(ТекущийБизнесПроцесс) Экспорт
	
	ТабДок = Новый ТабличныйДокумент;	
	ТабличныйДокументДляСогласователей = ТекущийБизнесПроцесс.ХранилищеТабДока.Получить();
	Если Не ТабличныйДокументДляСогласователей = Неопределено Тогда
			ТабДок = ТабличныйДокументДляСогласователей
	КонецЕсли;
	
	Возврат ТабДок;
	
КонецФункции

Функция ЗаполнитьТабличныйДокументДляСогласователей(БП) Экспорт
			
	// отчет фр проекта
	ТабДокФРПроекта = Новый ТабличныйДокумент;
	НастройкиОтчета = Новый Структура;
	НастройкиОтчета.Вставить("Сценарий1", БП.Заявка.Сценарий);
	НастройкиОтчета.Вставить("Сценарий2", Справочники.СценарииПланирования.ПустаяСсылка());
	НастройкиОтчета.Вставить("Помесячно", Перечисления.Д_Интервал.Помесячно);
	ПериодОтчета = Новый СтандартныйПериод;
	ПериодОтчета.ДатаНачала = БП.Заявка.Сценарий.АктуальнаяДата;
	ПериодОтчета.ДатаОкончания = БП.Заявка.Сценарий.ДатаКонца;
	НастройкиОтчета.Вставить("Период", ПериодОтчета);
	НастройкиОтчета.Вставить("ВыборПредприятийПоТипу", Ложь);
	МассивПредприятий = Новый Массив;
	МассивПредприятий.Добавить(БП.Предприятие);
	НастройкиОтчета.Вставить("Предприятие", МассивПредприятий);
	НастройкиОтчета.Вставить("ВидОтчета", 2);
	СформироватьТабличыйДокументФРПроекта(НастройкиОтчета, ТабДокФРПроекта);
	
	// отчет о ддс
	ТабДокОтчетДДС = Новый ТабличныйДокумент;
	ОтчетОбъект = Отчеты.Д_ОтчетОДДС1.Создать();
	ОтчетОбъект.Период = ПериодОтчета;
	ОтчетОбъект.Сценарий1 = БП.Заявка.Сценарий;
	ОтчетОбъект.ВариантСценария1 = Справочники.СценарииПланирования.ПустаяСсылка();
	ОтчетОбъект.Сценарий2 = Справочники.СценарииПланирования.ПустаяСсылка();
	ОтчетОбъект.Предприятие = БП.Предприятие;
	ОтчетОбъект.Помесячно = Перечисления.Д_Интервал.Помесячно;
	ОтчетОбъект.Сводный = Ложь;
	// период
	ЭлементПериод = СтандартныеОтчетыКлиентСервер.ПолучитьПараметр(ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки, "Период");
	ЭлементПериод.Использование = Истина;
	ЭлементПериод.Значение.ДатаНачала = БП.Заявка.Сценарий.АктуальнаяДата;
	ЭлементПериод.Значение.ДатаОкончания = БП.Заявка.Сценарий.ДатаКонца;
	// сценарий1
	ЭлементСценарий1 = СтандартныеОтчетыКлиентСервер.ПолучитьПараметр(ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки, "Сценарий1");
	ЭлементСценарий1.Использование = Истина;
	ЭлементСценарий1.Значение = БП.Заявка.Сценарий;
	// предприятие 
	ИдентификаторПользовательскойНастройки = ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор.Элементы[0].ИдентификаторПользовательскойНастройки;
	ЭлементОтбора = ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдентификаторПользовательскойНастройки);
	ЭлементОтбора.ПравоеЗначение = БП.Предприятие;
	// интервал 
	ЭлементИнтервал = СтандартныеОтчетыКлиентСервер.ПолучитьПараметр(ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки, "Интервал");
	ЭлементИнтервал.Использование = Истина;
	ЭлементИнтервал.Значение = "Месяц";
	// подразделения 
		//ЭлементПодразделения = ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Получить(6);
		//ЭлементПодразделения.Значение = Ложь;
	// сводный 
	ЭлементСводный = СтандартныеОтчетыКлиентСервер.ПолучитьПараметр(ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки, "Сводный");
	ЭлементСводный.Значение = Ложь;
	//Валюты
	//ЭлементИнтервал = СтандартныеОтчетыКлиентСервер.ПолучитьПараметр(ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки, "ДатаКурса");
	//ЭлементИнтервал.Использование = Истина;
	//ЭлементИнтервал.Значение = ТекущаяДата();
	ЭлементИнтервал = СтандартныеОтчетыКлиентСервер.ПолучитьПараметр(ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки, "ЭквивалентнаяВалюта");
	ЭлементИнтервал.Использование = Истина;
	ЭлементИнтервал.Значение = УЧ_Сервер.НациональнаяВалюта();
	
	ОтчетОбъект.СкомпоноватьРезультат(ТабДокОтчетДДС);
	
	// результат согласования
	ТабДокРецензенты = Новый ТабличныйДокумент;
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(БП.Заявка);
	Макет = ПолучитьОбщийМакет("РезультатыСогласования");
	БПСервер.ПоказатьРецензентов(ТабДокРецензенты, БП.Заявка, БП.ТипБюджета, МассивСсылок, "Штампы|Отметка");
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Присоединить(ТабДокФРПроекта);
	ТабДок.Вывести(ТабДокОтчетДДС);
	ТабДок.Вывести(ТабДокРецензенты);
	
	Возврат ТабДок;
	
КонецФункции

Процедура ПечатьВалютныхКорректировок(ТабДокКорректировки, ТекЗаявка) Экспорт
	Документы.Д_Бюджет.ПечатьВалютныеКорректировки(ТабДокКорректировки, ТекЗаявка);
КонецПроцедуры

Процедура ПечатьКорректировок(ТабДокКорректировки, ТекЗаявка) Экспорт
	Документы.Д_Бюджет.ПечатьКорректировки(ТабДокКорректировки, ТекЗаявка);
КонецПроцедуры

Процедура СформироватьТабличыйДокументФРПроекта(Отчет, ТабДок) Экспорт
	
	//при выборе сценария факта в одном из полей Сценарий
	ПланСчетов1 = ?(Отчет.Сценарий1 = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина), ПланыСчетов.Учетный, ПланыСчетов.Учетный);
	ПланСчетов2 = ?(Отчет.Сценарий2 = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина), ПланыСчетов.Учетный, ПланыСчетов.Учетный);
	Регистр1 = ?(Отчет.Сценарий1 = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина), "Учетный", "Бюджетный");
	Регистр2 = ?(Отчет.Сценарий2 = Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина), "Учетный", "Бюджетный");
	
	
	//определяем таблицу значений, в которую будем вносить все значения
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Шрифт"); //1) 1-обычный, 2 - жирный, 3 - курсив
	
	ТЗ.Колонки.Добавить("Порядок");//2) для структурирования дальнейшего вывода
	ТЗ.Колонки.Добавить("Признак");//3) для уникальности строки
	//порядок и признак выступают уникальным идентификтором строки
	
	ТЗ.Колонки.Добавить("Предприятие");//4) для обозначения разных предприятий
	
	ТЗ.Колонки.Добавить("Значение");//5)
	ТЗ.Колонки.Добавить("Резерв1");
	ТЗ.Колонки.Добавить("Резерв2");
	ТЗ.Колонки.Добавить("Резерв3");
	ТЗ.Колонки.Добавить("Резерв4");
	ТЗ.Колонки.Добавить("Резерв5");
	НаборИмен = ""; ИндексКолонки = 10;
	Для Кол = 1 По 100 Цикл // добавляем заранее все колонки в ТЗ с индекса 9
		ИмяКол = "Колонка" + строка(Кол);
		НаборИмен = НаборИмен + ИмяКол + ",";
		ТЗ.Колонки.Добавить(ИмяКол);
	КонецЦикла; 
	
	Попытка
	    ЭтотОбъект2 = ВнешниеОтчеты.Создать("Д_ФРПроектов");	
	Исключение
		ЭтотОбъект2 = Отчеты.Д_ФРПроектов;
	КонецПопытки;

	
	Если НЕ ПустаяСтрока(Отчет.Сценарий1) и  НЕ ПустаяСтрока(Отчет.Сценарий2) Тогда
		Макет = ЭтотОбъект2.ПолучитьМакет("МакетПланФакт");
	иначе
		Макет = ЭтотОбъект2.ПолучитьМакет("Макет");
	КонецЕсли; 
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка|СтолбецНачало");
	
	ОбластьШапкаПредпр = Макет.ПолучитьОбласть("ШапкаПредприятие|СтолбецНачало");
	ОбластьШапкаПредпрСтолбцы = Макет.ПолучитьОбласть("ШапкаПредприятие|ДанныеСтолбца");
			
	ОбластьИтогоПредприятие = Макет.ПолучитьОбласть("ИтогоПоПредприятию|СтолбецНачало");
	ОбластьИтогоПредприятиеСтолбцы = Макет.ПолучитьОбласть("ИтогоПоПредприятию|ДанныеСтолбца");
	
	ТабДок.Очистить();
	ВставлятьРазделительСтраниц = Ложь;
	
	
	Интервал = ?(Отчет.Помесячно = Перечисления.Д_Интервал.Помесячно, 1, 
	?(Отчет.Помесячно = Перечисления.Д_Интервал.Поквартально, 3, 12));
	
	КлючПериод = ?(Отчет.Помесячно = Перечисления.Д_Интервал.Помесячно, "Месяц", ?(
	Отчет.Помесячно = Перечисления.Д_Интервал.Поквартально, "Квартал", "Год"));
	
	НачалоПериода = ?(Отчет.Помесячно = Перечисления.Д_Интервал.Помесячно, Месяц(Отчет.Период.ДатаНачала),?(
	Отчет.Помесячно = Перечисления.Д_Интервал.Поквартально, ОпределитьКвартал(Месяц(Отчет.Период.ДатаНачала)), Год(Отчет.Период.ДатаНачала)));
	
	КонецПериода = ?(Отчет.Помесячно = Перечисления.Д_Интервал.Помесячно, Месяц(Отчет.Период.ДатаОкончания),?(
	Отчет.Помесячно = Перечисления.Д_Интервал.Поквартально, ОпределитьКвартал(Месяц(Отчет.Период.ДатаОкончания)), Год(Отчет.Период.ДатаОкончания)));
	
	
	ВсегоПериодов = КонецПериода - НачалоПериода + 1;
	
		
	ПредприятияМассив = Новый Массив;	                                     
	
	Если Отчет.ВыборПредприятийПоТипу Тогда
		Для каждого ТекТип Из Отчет.Предприятие.ПолучитьЭлементы() Цикл
			Для Каждого Т Из ТекТип.ПолучитьЭлементы() Цикл
				Если Т.Пометка Тогда
					ПредприятияМассив.Добавить(Т.Значение);			
				КонецЕсли;			
			КонецЦикла;	
		КонецЦикла;	
	Иначе		
		Если ТипЗнч(Отчет.Предприятие) = Тип("Массив") Тогда
			ПредприятияМассив = Отчет.Предприятие
		Иначе	
			Для каждого Т Из Отчет.Предприятие.ПолучитьЭлементы() Цикл
				Если Т.Пометка Тогда
					ПредприятияМассив.Добавить(Т.Значение);				
				КонецЕсли;		
			КонецЦикла; 
		КонецЕсли;		
	КонецЕсли;
	
	//Предпр = Т.Значение;
	ДатаНач = Отчет.Период.ДатаНачала;
	ДатаКон = Отчет.Период.ДатаОкончания;
	СчетчикМесяцев = 0;
	СчетчикНоменклатур = 0;
	КоэффициентОтступа = 0;

	
	Если Отчет.ВидОтчета = 1 ИЛИ Отчет.ВидОтчета = 0 Тогда
		//90.3
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	-ЕСТЬNULL(ДанныеСценарий1.СуммаОборот, 0) КАК Сумма1,
		|	-ЕСТЬNULL(ДанныеСценарий2.СуммаОборот, 0) КАК Сумма2,
		|	ВЫБОР
		|		КОГДА " + КлючПериод + "(ДанныеСценарий1.Период) ЕСТЬ NULL 
		|			ТОГДА " + КлючПериод + "(ДанныеСценарий2.Период)
		|		ИНАЧЕ " + КлючПериод + "(ДанныеСценарий1.Период)
		|	КОНЕЦ КАК Период,
		|	ВЫБОР
		|		КОГДА ДанныеСценарий1.Субконто2 ЕСТЬ NULL 
		|			ТОГДА ДанныеСценарий2.Субконто2
		|		ИНАЧЕ ДанныеСценарий1.Субконто2
		|	КОНЕЦ КАК Статья,
		|	ВЫБОР
		|		КОГДА ДанныеСценарий1.Субконто2.Родитель ЕСТЬ NULL 
		|			ТОГДА ДанныеСценарий2.Субконто2.Родитель
		|		ИНАЧЕ ДанныеСценарий1.Субконто2.Родитель
		|	КОНЕЦ КАК Родитель1,
		|	ВЫБОР
		|		КОГДА ДанныеСценарий1.Предприятия ЕСТЬ NULL 
		|			ТОГДА ДанныеСценарий2.Предприятия
		|		ИНАЧЕ ДанныеСценарий1.Предприятия
		|	КОНЕЦ КАК Предприятие
		|ПОМЕСТИТЬ Данные
		|ИЗ
		|	РегистрБухгалтерии." + Регистр1 + ".Обороты(
		|			&Дата1,
		|			&Дата2,
		|			" + КлючПериод + ",
		|			Счет = &Счет,
		|			,
		|			Предприятия В ИЕРАРХИИ (&Предприятия)
		|				И СценарийПлана = &Сценарий1,
		|			,
		|			) КАК ДанныеСценарий1
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрБухгалтерии." + Регистр2 + ".Обороты(
		|				&Дата1,
		|				&Дата2,
		|				" + КлючПериод + ",
		|				Счет = &Счет2,
		|				,
		|				Предприятия В ИЕРАРХИИ (&Предприятия)
		|					И СценарийПлана = &Сценарий2,
		|				,
		|				) КАК ДанныеСценарий2
		|		ПО ДанныеСценарий1.Субконто2 = ДанныеСценарий2.Субконто2
		|			И (" + КлючПериод + "(ДанныеСценарий1.Период) = " + КлючПериод + "(ДанныеСценарий2.Период))
		|			И ДанныеСценарий1.Субконто1 = ДанныеСценарий2.Субконто1
		|			И ДанныеСценарий1.Предприятия = ДанныеСценарий2.Предприятия
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	-ЕСТЬNULL(ДанныеСценарий1.СуммаОборот, 0),
		|	-ЕСТЬNULL(ДанныеСценарий2.СуммаОборот, 0),
		|	ВЫБОР
		|		КОГДА " + КлючПериод + "(ДанныеСценарий1.Период) ЕСТЬ NULL 
		|			ТОГДА " + КлючПериод + "(ДанныеСценарий2.Период)
		|		ИНАЧЕ " + КлючПериод + "(ДанныеСценарий1.Период)
		|	КОНЕЦ,
		|	""Выручка от реализации"",
		|	""Доходы"",
		|	ВЫБОР
		|		КОГДА ДанныеСценарий1.Предприятия ЕСТЬ NULL 
		|			ТОГДА ДанныеСценарий2.Предприятия
		|		ИНАЧЕ ДанныеСценарий1.Предприятия
		|	КОНЕЦ
		|ИЗ
		|	РегистрБухгалтерии."+ Регистр1 +".Обороты(
		|			&Дата1,
		|			&Дата2,
		|			"+ КлючПериод +",
		|			Счет В (&СчетаДоход),
		|			,
		|			Предприятия В ИЕРАРХИИ (&Предприятия)
		|				И СценарийПлана = &Сценарий1,
		|			,
		|			) КАК ДанныеСценарий1
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрБухгалтерии."+ Регистр2 +".Обороты(
		|				&Дата1,
		|				&Дата2,
		|				"+ КлючПериод +",
		|				Счет В (&СчетаДоход2),
		|				,
		|				Предприятия В ИЕРАРХИИ (&Предприятия)
		|					И СценарийПлана = &Сценарий2,
		|				,
		|				) КАК ДанныеСценарий2
		|		ПО ДанныеСценарий1.Субконто2 = ДанныеСценарий2.Субконто2
		|			И ("+ КлючПериод +"(ДанныеСценарий1.Период) = "+ КлючПериод +"(ДанныеСценарий2.Период))
		|			И ДанныеСценарий1.Субконто1 = ДанныеСценарий2.Субконто1
		|			И ДанныеСценарий1.Предприятия = ДанныеСценарий2.Предприятия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтатьиЗатрат.Ссылка КАК Статья,
		|	СтатьиЗатрат.ЭтоГруппа,
		|	ЕСТЬNULL(Данные.Сумма1, 0) КАК Сумма1,
		|	ЕСТЬNULL(Данные.Сумма2, 0) КАК Сумма2,
		|	ЕСТЬNULL(Данные.Период, 0) КАК Период,
		|	Данные.Предприятие
		|ИЗ
		|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
		|		ПОЛНОЕ СОЕДИНЕНИЕ Данные КАК Данные
		|		ПО (СтатьиЗатрат.Ссылка = Данные.Статья
		|				ИЛИ СтатьиЗатрат.Ссылка = Данные.Родитель1)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СтатьиЗатрат.Код";
	ИначеЕсли Отчет.ВидОтчета = 2 ИЛИ Отчет.ВидОтчета = 4 тогда
		
		//90.3
		Запрос = Новый Запрос;							   
	    Запрос.Текст = "ВЫБРАТЬ
					   |	-ЕСТЬNULL(ДанныеСценарий1.СуммаОборот, 0) КАК Сумма1,
					   |	"+ КлючПериод +"(ДанныеСценарий1.Период) КАК Период,
					   |	ДанныеСценарий1.Субконто2 КАК Статья,
					   |	ДанныеСценарий1.Субконто2.Родитель КАК Родитель1,
					   |	ДанныеСценарий1.Предприятия КАК Предприятие,
					   |	БюджетныйДвиженияССубконто1.Содержание КАК Содержание,
					   |	0 КАК Сумма2
					   |ПОМЕСТИТЬ Данные
					   |ИЗ
					   |	РегистрБухгалтерии." + Регистр1 + ".Обороты(
					   |			&Дата1,
					   |			&Дата2,
					   |			Запись,
					   |			Счет = &Счет,
					   |			,
					   |			Предприятия В ИЕРАРХИИ (&Предприятия)
					   |				И СценарийПлана = &Сценарий1,
					   |			,
					   |			) КАК ДанныеСценарий1
					   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии." + Регистр1 + ".ДвиженияССубконто(
					   |				&Дата1,
					   |				&Дата2,
					   |				Предприятия В ИЕРАРХИИ (&Предприятия)
					   |					И СценарийПлана = &Сценарий1,
					   |				,
					   |				) КАК БюджетныйДвиженияССубконто1
					   |		ПО ДанныеСценарий1.Регистратор = БюджетныйДвиженияССубконто1.Регистратор
					   |			И ДанныеСценарий1.НомерСтроки = БюджетныйДвиженияССубконто1.НомерСтроки
					   |
					   |ОБЪЕДИНИТЬ ВСЕ
					   |
					   |ВЫБРАТЬ
					   |	0,
					   |	"+ КлючПериод +"(ДанныеСценарий2.Период),
					   |	ДанныеСценарий2.Субконто2,
					   |	ДанныеСценарий2.Субконто2.Родитель,
					   |	ДанныеСценарий2.Предприятия,
					   |	БюджетныйДвиженияССубконто2.Содержание,
					   |	-ЕСТЬNULL(ДанныеСценарий2.СуммаОборот, 0)
					   |ИЗ
					   |	РегистрБухгалтерии." + Регистр2 + ".Обороты(
					   |			&Дата1,
					   |			&Дата2,
					   |			Запись,
					   |			Счет = &Счет2,
					   |			,
					   |			Предприятия В ИЕРАРХИИ (&Предприятия)
					   |				И СценарийПлана = &Сценарий2,
					   |			,
					   |			) КАК ДанныеСценарий2
					   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии." + Регистр2 + ".ДвиженияССубконто(
					   |				&Дата1,
					   |				&Дата2,
					   |				Предприятия В ИЕРАРХИИ (&Предприятия)
					   |					И СценарийПлана = &Сценарий2,
					   |				,
					   |				) КАК БюджетныйДвиженияССубконто2
					   |		ПО ДанныеСценарий2.Регистратор = БюджетныйДвиженияССубконто2.Регистратор
					   |			И ДанныеСценарий2.НомерСтроки = БюджетныйДвиженияССубконто2.НомерСтроки
					   |
					   |ОБЪЕДИНИТЬ ВСЕ
					   |
					   |ВЫБРАТЬ
					   |	-ЕСТЬNULL(ДанныеСценарий1.СуммаОборот, 0),
					   |	"+ КлючПериод +"(ДанныеСценарий1.Период),
					   |	""Выручка от реализации"",
					   |	""Доходы"",
					   |	ДанныеСценарий1.Предприятия,
					   |	БюджетныйДвиженияССубконто1.Содержание,
					   |	0
					   |ИЗ
					   |	РегистрБухгалтерии." + Регистр1 + ".Обороты(
					   |			&Дата1,
					   |			&Дата2,
					   |			Запись,
					   |			Счет В (&СчетаДоход),
					   |			,
					   |			Предприятия В ИЕРАРХИИ (&Предприятия)
					   |				И СценарийПлана = &Сценарий1,
					   |			,
					   |			) КАК ДанныеСценарий1
					   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии." + Регистр1 + ".ДвиженияССубконто(
					   |				&Дата1,
					   |				&Дата2,
					   |				Предприятия В ИЕРАРХИИ (&Предприятия)
					   |					И СценарийПлана = &Сценарий1,
					   |				,
					   |				) КАК БюджетныйДвиженияССубконто1
					   |		ПО ДанныеСценарий1.Регистратор = БюджетныйДвиженияССубконто1.Регистратор
					   |			И ДанныеСценарий1.НомерСтроки = БюджетныйДвиженияССубконто1.НомерСтроки
					   |
					   |ОБЪЕДИНИТЬ ВСЕ
					   |
					   |ВЫБРАТЬ
					   |	0,
					   |	"+ КлючПериод +"(ДанныеСценарий2.Период),
					   |	""Выручка от реализации"",
					   |	""Доходы"",
					   |	ДанныеСценарий2.Предприятия,
					   |	БюджетныйДвиженияССубконто2.Содержание,
					   |	-ЕСТЬNULL(ДанныеСценарий2.СуммаОборот, 0)
					   |ИЗ
					   |	РегистрБухгалтерии." + Регистр2 + ".Обороты(
					   |			&Дата1,
					   |			&Дата2,
					   |			Запись,
					   |			Счет В (&СчетаДоход2),
					   |			,
					   |			Предприятия В ИЕРАРХИИ (&Предприятия)
					   |				И СценарийПлана = &Сценарий2,
					   |			,
					   |			) КАК ДанныеСценарий2
					   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии." + Регистр2 + ".ДвиженияССубконто(
					   |				&Дата1,
					   |				&Дата2,
					   |				Предприятия В ИЕРАРХИИ (&Предприятия)
					   |					И СценарийПлана = &Сценарий2,
					   |				,
					   |				) КАК БюджетныйДвиженияССубконто2
					   |		ПО ДанныеСценарий2.Регистратор = БюджетныйДвиженияССубконто2.Регистратор
					   |			И ДанныеСценарий2.НомерСтроки = БюджетныйДвиженияССубконто2.НомерСтроки
					   |;
					   |
					   |////////////////////////////////////////////////////////////////////////////////
					   |ВЫБРАТЬ
					   |	СтатьиЗатрат.Ссылка КАК Статья,
					   |	СтатьиЗатрат.ЭтоГруппа,
					   |	ЕСТЬNULL(Данные.Период, 0) КАК Период,
					   |	Данные.Предприятие,
					   |	Данные.Содержание,
					   |	Данные.Сумма1,
					   |	Данные.Сумма2
					   |ИЗ
					   |	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
					   |		ПОЛНОЕ СОЕДИНЕНИЕ Данные КАК Данные
					   |		ПО (СтатьиЗатрат.Ссылка = Данные.Статья
					   |				ИЛИ СтатьиЗатрат.Ссылка = Данные.Родитель1)
					   |
					   |УПОРЯДОЧИТЬ ПО
					   |	СтатьиЗатрат.Код";
		
	ИначеЕсли Отчет.ВидОтчета = 3 Тогда
						
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Предприятия", ПредприятияМассив);
	Запрос.УстановитьПараметр("Сценарий1", Отчет.Сценарий1);
	Запрос.УстановитьПараметр("Сценарий2", Отчет.Сценарий2);
	Запрос.УстановитьПараметр("Дата1", ДатаНач);
	Запрос.УстановитьПараметр("Дата2", ДатаКон);
	Запрос.УстановитьПараметр("Счет", ПланСчетов1.РасходыПоРеал);
	Запрос.УстановитьПараметр("Счет2", ПланСчетов2.РасходыПоРеал);
	СчетаДоход = Новый Массив;
	СчетаДоход.Добавить(ПланСчетов1.ВыручкаОтРеал);
	СчетаДоход.Добавить(ПланСчетов1.РеалОС);
	СчетаДоход2 = Новый Массив;
	СчетаДоход2.Добавить(ПланСчетов2.ВыручкаОтРеал);
	СчетаДоход2.Добавить(ПланСчетов2.РеалОС);
	Запрос.УстановитьПараметр("СчетаДоход", СчетаДоход);
	Запрос.УстановитьПараметр("СчетаДоход2", СчетаДоход2);
	РезультатЗатраты = Запрос.Выполнить();
	
	//91 счет
	Запрос = Новый Запрос;
	Если Отчет.ВидОтчета = 1 ИЛИ Отчет.ВидОтчета = 0 Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА " + КлючПериод + "(Прочие1.Период) ЕСТЬ NULL 
		|			ТОГДА " + КлючПериод + "(Прочие2.Период)
		|		ИНАЧЕ " + КлючПериод + "(Прочие1.Период)
		|	КОНЕЦ КАК Период,
		|	ВЫБОР
		|		КОГДА Прочие1.Субконто1 ЕСТЬ NULL 
		|			ТОГДА Прочие2.Субконто1
		|		ИНАЧЕ Прочие1.Субконто1
		|	КОНЕЦ КАК Статья,
		|	-ЕСТЬNULL(Прочие1.СуммаОборот, 0) КАК Сумма1,
		|	-ЕСТЬNULL(Прочие2.СуммаОборот, 0) КАК Сумма2,
		|	ВЫБОР
		|		КОГДА Прочие1.Предприятия ЕСТЬ NULL 
		|			ТОГДА Прочие2.Предприятия
		|		ИНАЧЕ Прочие1.Предприятия
		|	КОНЕЦ КАК Предприятие,
		|	ВЫБОР
		|		КОГДА Прочие1.Субконто2 ЕСТЬ NULL 
		|			ТОГДА Прочие2.Субконто2
		|		ИНАЧЕ Прочие1.Субконто2
		|	КОНЕЦ КАК Деятельность,
		|	ВЫБОР
		|		КОГДА Прочие1.КорСубконто1 ЕСТЬ NULL 
		|			ТОГДА Прочие2.КорСубконто1
		|		ИНАЧЕ Прочие1.КорСубконто1
		|	КОНЕЦ КАК Статья25,
		|	ВЫБОР
		|		КОГДА Прочие1.КорСубконто1 ЕСТЬ NULL 
		|			ТОГДА Прочие2.КорСубконто1.Код
		|		ИНАЧЕ Прочие1.КорСубконто1.Код
		|	КОНЕЦ КАК Статья25Код,
		|	ВЫБОР
		|		КОГДА Прочие1.КорСубконто1.Родитель ЕСТЬ NULL 
		|			ТОГДА Прочие2.КорСубконто1.Родитель
		|		ИНАЧЕ Прочие1.КорСубконто1.Родитель
		|	КОНЕЦ КАК КорРодитель,
		|	ВЫБОР
		|		КОГДА Прочие1.КорСчет ЕСТЬ NULL 
		|			ТОГДА Прочие2.КорСчет
		|		ИНАЧЕ Прочие1.КорСчет
		|	КОНЕЦ КАК КорСчет
		|ИЗ
		|	РегистрБухгалтерии." + Регистр1 + ".Обороты(
		|			&Дата1,
		|			&Дата2,
		|			" + КлючПериод + ",
		|			Счет = &СчетДт2,
		|			,
		|			Предприятия В ИЕРАРХИИ (&Предприятия)
		|				И СценарийПлана = &Сценарий1,
        |			,
		|			) КАК Прочие1
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрБухгалтерии." + Регистр2 + ".Обороты(
		|				&Дата1,
		|				&Дата2,
		|				" + КлючПериод + ",
		|				Счет = &СчетДт3,
		|				,
		|				Предприятия В ИЕРАРХИИ (&Предприятия)
		|					И СценарийПлана = &Сценарий2,
		|			,
		|				) КАК Прочие2
		|		ПО (" + КлючПериод + "(Прочие1.Период) = " + КлючПериод + "(Прочие2.Период))
		|			И Прочие1.Субконто1 = Прочие2.Субконто1
		|			И Прочие1.Предприятия = Прочие2.Предприятия
		|			И Прочие1.Субконто2 = Прочие2.Субконто2
		|			И Прочие1.КорСчет = Прочие2.КорСчет
		|			И Прочие1.КорСубконто1 = Прочие2.КорСубконто1
		|
		|УПОРЯДОЧИТЬ ПО
		|	Статья,Статья25Код";
		
	ИначеЕсли Отчет.ВидОтчета = 2 ИЛИ Отчет.ВидОтчета = 4 тогда
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	" + КлючПериод + "(Прочие1.Период) КАК Период,
		               |	Прочие1.Субконто1 КАК Статья,
		               |	-ЕСТЬNULL(Прочие1.СуммаОборот, 0) КАК Сумма1,
		               |	0 КАК Сумма2,
					   |	Прочие1.КорСчет КАК КорСчет,
					   |	Прочие1.КорСубконто1 КАК Статья25,
                       |	Прочие1.КорСубконто1.Код КАК Статья25Код,
					   |	Прочие1.КорСубконто1.Родитель КАК КорРодитель,
		               |	Прочие1.Предприятия КАК Предприятие,
		               |	Прочие1.Субконто2 КАК Деятельность,
		               |	БюджетныйДвиженияССубконто1.Содержание КАК Содержание
		               |ИЗ
		               |	РегистрБухгалтерии." + Регистр1 + ".Обороты(
		               |			&Дата1,
		               |			&Дата2,
		               |			Запись,
		               |			Счет = &СчетДт2,
		               |			,
		               |			Предприятия В ИЕРАРХИИ (&Предприятия)
		               |				И СценарийПлана = &Сценарий1,
		               |			,
		               |			) КАК Прочие1
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии." + Регистр1 + ".ДвиженияССубконто(
		               |				&Дата1,
		               |				&Дата2,
		               |				Предприятия В ИЕРАРХИИ (&Предприятия)
		               |					И СценарийПлана = &Сценарий1,
		               |				,
		               |				) КАК БюджетныйДвиженияССубконто1
		               |		ПО Прочие1.Регистратор = БюджетныйДвиженияССубконто1.Регистратор
		               |			И Прочие1.НомерСтроки = БюджетныйДвиженияССубконто1.НомерСтроки
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	" + КлючПериод + "(Прочие2.Период),
		               |	Прочие2.Субконто1,
		               |	0,
		               |	-ЕСТЬNULL(Прочие2.СуммаОборот, 0),
					   |	Прочие2.КорСчет КАК КорСчет,
					   |	Прочие2.КорСубконто1 КАК Статья25,
                       |	Прочие2.КорСубконто1.Код КАК Статья25Код,
					   |	Прочие2.КорСубконто1.Родитель КАК КорРодитель,
		               |	Прочие2.Предприятия,
		               |	Прочие2.Субконто2,
		               |	БюджетныйДвиженияССубконто2.Содержание
		               |ИЗ
		               |	РегистрБухгалтерии." + Регистр2 + ".Обороты(
		               |			&Дата1,
		               |			&Дата2,
		               |			Запись,
		               |			Счет = &СчетДт3,
		               |			,
		               |			Предприятия В ИЕРАРХИИ (&Предприятия)
		               |				И СценарийПлана = &Сценарий2,
		               |			,
		               |			) КАК Прочие2
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии." + Регистр2 + ".ДвиженияССубконто(
		               |				&Дата1,
		               |				&Дата2,
		               |				Предприятия В ИЕРАРХИИ (&Предприятия)
		               |					И СценарийПлана = &Сценарий2,
		               |				,
		               |				) КАК БюджетныйДвиженияССубконто2
		               |		ПО Прочие2.Регистратор = БюджетныйДвиженияССубконто2.Регистратор
		               |			И Прочие2.НомерСтроки = БюджетныйДвиженияССубконто2.НомерСтроки
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Статья, Статья25Код";
	ИначеЕсли Отчет.ВидОтчета = 3 Тогда
		
	КонецЕсли;
		
	Запрос.УстановитьПараметр("Предприятия", ПредприятияМассив);
	Запрос.УстановитьПараметр("Сценарий1", Отчет.Сценарий1);
	Запрос.УстановитьПараметр("Сценарий2", Отчет.Сценарий2);
	Запрос.УстановитьПараметр("Дата1", ДатаНач);
	Запрос.УстановитьПараметр("Дата2", ДатаКон);
	Запрос.УстановитьПараметр("СчетДт2", ПланСчетов1.ДоходыИРасходы);
	Запрос.УстановитьПараметр("СчетДт3", ПланСчетов2.ДоходыИРасходы);
	РезультатПрочиеЗатраты = Запрос.Выполнить();
	
	
		
	
	Для каждого Предприятие  Из ПредприятияМассив Цикл
		
		//очищаем массив и присваиваем числовой тип
		ТекущиеЗатраты1 = Новый Массив(50);
		ТекущиеЗатраты2 = Новый Массив(50);
		ТекущиеДоходы1 = Новый Массив(50);
		ТекущиеДоходы2 = Новый Массив(50);
		ПрочиеЗатраты1 = Новый Массив(50);
		ПрочиеЗатраты2 = Новый Массив(50);
		Для т = 0 По 49 Цикл
			ТекущиеЗатраты1[т] = 0;
			ТекущиеЗатраты2[т] = 0;
			ТекущиеДоходы1[т] = 0;
			ТекущиеДоходы2[т] = 0;			
			ПрочиеЗатраты1[т] = 0;
			ПрочиеЗатраты2[т] = 0;
		КонецЦикла;
		
		//опрос 90.3
		СтруктураПоиска = Новый Структура("Предприятие", Предприятие);
		Выборка = РезультатЗатраты.Выбрать();
		Пока Выборка.НайтиСледующий(СтруктураПоиска) цикл
			
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока[0] = 1;
			НоваяСтрока[1] = 0;
			НоваяСтрока[2] = Строка("Ном") + строка("Объем производства");
			НоваяСтрока[3] = Выборка.Предприятие;
			НоваяСтрока[4] = "Объем производства " + Строка("Ном");
			
			СчетчикМесяцев = Выборка.Период - НачалоПериода + 1;
			КоэффициентОтступа = ?(ПустаяСтрока(Отчет.Сценарий2), 0, СчетчикМесяцев * 2 - 2);
			
					
			НоваяСтрокаД = ТЗ.Добавить();
			НоваяСтрокаД[0] = 0;
			НоваяСтрокаД[1] = 0;
			НоваяСтрокаД[2] = Строка("Ном") + "Доходы";
			НоваяСтрокаД[3] = Выборка.Предприятие;
			НоваяСтрокаД[4] = "Доходы";
						
			Если Не ЗначениеЗаполнено(Выборка.Статья) Тогда	
				НоваяСтрокаД[СчетчикМесяцев * 2 + 9 + КоэффициентОтступа] = Выборка.Сумма1;
				НоваяСтрокаД[СчетчикМесяцев * 2+ 11 + КоэффициентОтступа] = Выборка.Сумма2;
				ТекущиеДоходы1[СчетчикМесяцев] = ТекущиеДоходы1[СчетчикМесяцев] + Выборка.Сумма1; 
				ТекущиеДоходы2[СчетчикМесяцев] = ТекущиеДоходы2[СчетчикМесяцев] + Выборка.Сумма2;
				Если Отчет.ВидОтчета = 2 ИЛИ Отчет.ВидОтчета = 4 Тогда
					НоваяСтрока = ТЗ.Добавить();
					НоваяСтрока[0] = 4;
					НоваяСтрока[1] = 0;
					НоваяСтрока[2] = Строка("НомДоход");
					НоваяСтрока[3] = Выборка.Предприятие;
					НоваяСтрока[4] = Выборка.Содержание;
					НоваяСтрока[СчетчикМесяцев * 2 + 9 + КоэффициентОтступа] = Выборка.Сумма1;
					НоваяСтрока[СчетчикМесяцев * 2+ 11 + КоэффициентОтступа] = Выборка.Сумма2;
				КонецЕсли;
				Продолжить;
			КонецЕсли;	
			
			НоваяСтрокаР = ТЗ.Добавить();
			НоваяСтрокаР[0] = 0;
			НоваяСтрокаР[1] = 0;
			НоваяСтрокаР[2] = Строка("Ном") + "Расходы";
			НоваяСтрокаР[3] = Выборка.Предприятие;
			НоваяСтрокаР[4] = "Расходы";
			НоваяСтрокаР[СчетчикМесяцев * 2 + 9 + КоэффициентОтступа] = 0;
			НоваяСтрокаР[СчетчикМесяцев * 2+ 11 + КоэффициентОтступа] = 0;
			
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока[0] = 1 - Выборка.ЭтоГруппа;
			
			Если НЕ Выборка.ЭтоГруппа Тогда
				ТекущиеЗатраты1[СчетчикМесяцев] = ТекущиеЗатраты1[СчетчикМесяцев] + Выборка.Сумма1; 
				ТекущиеЗатраты2[СчетчикМесяцев] = ТекущиеЗатраты2[СчетчикМесяцев] + Выборка.Сумма2;									
			КонецЕсли;
			
			
			НоваяСтрока[1] = 0;
			НоваяСтрока[2] = Строка("Ном") + строка(Выборка.Статья);
			НоваяСтрока[3] = Выборка.Предприятие;
			НоваяСтрока[4] = Выборка.Статья;
			НоваяСтрока[СчетчикМесяцев * 2 + 9 + КоэффициентОтступа] = - Выборка.Сумма1;
			НоваяСтрока[СчетчикМесяцев * 2+ 11 + КоэффициентОтступа] = - Выборка.Сумма2;
			
			Если НЕ Выборка.ЭтоГруппа И (Отчет.ВидОтчета = 2 ИЛИ Отчет.ВидОтчета = 4) Тогда
				НоваяСтрока = ТЗ.Добавить();
				НоваяСтрока[0] = 4;
				НоваяСтрока[1] = 0;
				НоваяСтрока[2] = Строка("Ном") + строка(Выборка.Статья);
				НоваяСтрока[3] = Выборка.Предприятие;
				НоваяСтрока[4] = Выборка.Содержание;
				НоваяСтрока[СчетчикМесяцев * 2 + 9 + КоэффициентОтступа] = - Выборка.Сумма1;
				НоваяСтрока[СчетчикМесяцев * 2+ 11 + КоэффициентОтступа] = - Выборка.Сумма2;
			КонецЕсли;
		КонецЦикла;
		
		//итого по тек.деятельности
		
		Для СчетчикМесяцев = 1 По ВсегоПериодов Цикл
			Если ТекущиеЗатраты1[СчетчикМесяцев] ИЛИ ТекущиеЗатраты2[СчетчикМесяцев] Тогда
				КоэффициентОтступа = ?(ПустаяСтрока(Отчет.Сценарий2), 0, СчетчикМесяцев * 2 - 2);
				СтрокаРасходов = ТЗ.НайтиСтроки(Новый Структура("Значение, Предприятие", "Расходы", Выборка.Предприятие));
				СтрокаРасходов[0][СчетчикМесяцев * 2 + 9 + КоэффициентОтступа] = -ТекущиеЗатраты1[СчетчикМесяцев];
				СтрокаРасходов[0][СчетчикМесяцев * 2+ 11 + КоэффициентОтступа] = -ТекущиеЗатраты2[СчетчикМесяцев]; 
									
				НоваяСтрока = ТЗ.Добавить();
				НоваяСтрока[0] = 0; 
				НоваяСтрока[1] = 0;
				НоваяСтрока[2] = Строка("Ном") + строка("Прибыль по основной деятельности");
				НоваяСтрока[3] = Выборка.Предприятие;
				НоваяСтрока[4] = "Прибыль по основной деятельности";
				НоваяСтрока[СчетчикМесяцев * 2 + 9 + КоэффициентОтступа] = ТекущиеДоходы1[СчетчикМесяцев] + ТекущиеЗатраты1[СчетчикМесяцев];
				НоваяСтрока[СчетчикМесяцев * 2+ 11 + КоэффициентОтступа] = ТекущиеДоходы2[СчетчикМесяцев] + ТекущиеЗатраты2[СчетчикМесяцев];
			КонецЕсли;
		КонецЦикла;
		
		//опрос 91
		СтруктураПоиска = Новый Структура("Предприятие", Предприятие);
		Выборка = РезультатПрочиеЗатраты.Выбрать();
		Пока Выборка.НайтиСледующий(СтруктураПоиска) цикл
			
			Если Не ТЗ.НайтиСтроки(Новый Структура("Значение, Предприятие", "Объем производства Ном", Выборка.Предприятие)).Количество() Тогда
				НоваяСтрока = ТЗ.Добавить();
				НоваяСтрока[0] = 1;
				НоваяСтрока[1] = 0;
				НоваяСтрока[2] = Строка("Ном") + строка("Объем производства");
				НоваяСтрока[3] = Выборка.Предприятие;
				НоваяСтрока[4] = "Объем производства " + Строка("Ном");
			КонецЕсли;	
				
			СчетчикМесяцев = Выборка.Период - НачалоПериода + 1;
			КоэффициентОтступа = ?(ПустаяСтрока(Отчет.Сценарий2), 0, СчетчикМесяцев * 2 - 2);
			
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока[0] = 1;	
			НоваяСтрока[1] = 0;
			НоваяСтрока[2] = Строка(Выборка.Предприятие) + Строка(Выборка.Статья);
			НоваяСтрока[3] = Выборка.Предприятие;
			НоваяСтрока[4] = Выборка.Статья;
			НоваяСтрока[СчетчикМесяцев * 2 + 9 + КоэффициентОтступа] = - Выборка.Сумма1;
			НоваяСтрока[СчетчикМесяцев * 2+ 11 + КоэффициентОтступа] = - Выборка.Сумма2;
			ПрочиеЗатраты1[СчетчикМесяцев] = ПрочиеЗатраты1[СчетчикМесяцев] + Выборка.Сумма1;
			ПрочиеЗатраты2[СчетчикМесяцев] = ПрочиеЗатраты2[СчетчикМесяцев] + Выборка.Сумма2;
			
			Если Отчет.ВидОтчета = 2 ИЛИ Отчет.ВидОтчета = 4 Тогда
				НоваяСтрока = ТЗ.Добавить();
				НоваяСтрока[0] = 4;
				НоваяСтрока[1] = 0;
				НоваяСтрока[2] = Строка("Ном") + строка(Выборка.Статья);
				НоваяСтрока[3] = Выборка.Предприятие;
				НоваяСтрока[4] = Выборка.Содержание;
				НоваяСтрока[СчетчикМесяцев * 2 + 9 + КоэффициентОтступа] = - Выборка.Сумма1;
				НоваяСтрока[СчетчикМесяцев * 2+ 11 + КоэффициентОтступа] = - Выборка.Сумма2;
			КонецЕсли;
			
			Если Выборка.Статья = Справочники.СтатьиДоходовРасходов.Простой ИЛИ Выборка.Статья = Справочники.СтатьиДоходовРасходов.ПереносОстатков Тогда
				//КорСтатьи
				НоваяСтрокаГ = ТЗ.Добавить();
				НоваяСтрокаГ[0] = 2;	
				НоваяСтрокаГ[1] = 0;
				НоваяСтрокаГ[3] = Выборка.Предприятие;
				Если Выборка.КорСчет = ПланыСчетов.Учетный.Счет25() ИЛИ Выборка.КорСчет = ПланыСчетов.Учетный.Счет25() Тогда
					НоваяСтрокаГ[2] = Строка(Выборка.Предприятие) + Строка(Выборка.КорРодитель);
					НоваяСтрокаГ[4] = Выборка.КорРодитель;
					НоваяСтрока = ТЗ.Добавить();
					НоваяСтрока[0] = 4;	
					НоваяСтрока[1] = 0;
					НоваяСтрока[2] = Строка(Выборка.Предприятие) + Строка(Выборка.Статья25);
					НоваяСтрока[3] = Выборка.Предприятие;
					НоваяСтрока[4] = Выборка.Статья25;
					НоваяСтрока[СчетчикМесяцев * 2 + 9 + КоэффициентОтступа] = - Выборка.Сумма1;
					НоваяСтрока[СчетчикМесяцев * 2+ 11 + КоэффициентОтступа] = - Выборка.Сумма2;
					//ПрочиеЗатраты1[СчетчикМесяцев] = ПрочиеЗатраты1[СчетчикМесяцев] + Выборка.Сумма1;
					//ПрочиеЗатраты2[СчетчикМесяцев] = ПрочиеЗатраты2[СчетчикМесяцев] + Выборка.Сумма2;       // 24.05.13
				Иначе
					НоваяСтрокаГ[2] = Строка(Выборка.Предприятие) + "ПРОЧИЕ";
					НоваяСтрокаГ[4] = "ПРОЧИЕ";
				КонецЕсли;
				НоваяСтрокаГ[СчетчикМесяцев * 2 + 9 + КоэффициентОтступа] = - Выборка.Сумма1;
				НоваяСтрокаГ[СчетчикМесяцев * 2+ 11 + КоэффициентОтступа] = - Выборка.Сумма2;				
			КонецЕсли;
		КонецЦикла;
		
		Для СчетчикМесяцев = 1 По ВсегоПериодов Цикл
			КоэффициентОтступа = ?(ПустаяСтрока(Отчет.Сценарий2), 0, СчетчикМесяцев * 2 - 2);
			Если ПрочиеЗатраты1[СчетчикМесяцев] ИЛИ ПрочиеЗатраты2[СчетчикМесяцев] ИЛИ ТекущиеЗатраты1[СчетчикМесяцев] ИЛИ ТекущиеЗатраты2[СчетчикМесяцев] ИЛИ ТекущиеДоходы1[СчетчикМесяцев] ИЛИ ТекущиеДоходы2[СчетчикМесяцев] Тогда
				НоваяСтрока = ТЗ.Добавить();
				НоваяСтрока[0] = 0; // 29.10.12	
				НоваяСтрока[1] = 0;
				НоваяСтрока[2] = Строка(Предприятие) + "ИТОГО ФИНАНСОВЫЙ РЕЗУЛЬТАТ";
				НоваяСтрока[3] = Предприятие;
				НоваяСтрока[4] = "ИТОГО ФИНАНСОВЫЙ РЕЗУЛЬТАТ";
				НоваяСтрока[СчетчикМесяцев * 2 + 9 + КоэффициентОтступа] = ТекущиеДоходы1[СчетчикМесяцев] + ПрочиеЗатраты1[СчетчикМесяцев] + ТекущиеЗатраты1[СчетчикМесяцев];
				НоваяСтрока[СчетчикМесяцев * 2+ 11 + КоэффициентОтступа] = ТекущиеДоходы2[СчетчикМесяцев] + ПрочиеЗатраты2[СчетчикМесяцев] + ТекущиеЗатраты2[СчетчикМесяцев];
			КонецЕсли;
		КонецЦикла;
		
		
	КонецЦикла;
	
	
	
	//сворачиваем таблицу значений и выводим на печать		
	ТЗ.Свернуть("Шрифт, Порядок, Признак, Предприятие, Значение", НаборИмен);
	
	// квартал помесячно год поквартально 
	ТекПериод = Отчет.Период;
	ТекИнтервал = Отчет.Помесячно;
	ИнтервалМеньше = БюджетныйНаСервере.ИнтервалМеньшеПериода(ТекПериод, ТекИнтервал);
	
	ТабДок.НачатьАвтогруппировкуСтрок();
	Для Строчка = 0 По ТЗ.Количество()-1 Цикл
		
		Если Лев(ТЗ[Строчка][4], 18) = "Объем производства" Тогда // выводим шапку
			
			ОбластьШапка.Параметры.Месяц = ПредставлениеПериода(Отчет.Период.ДатаНачала, Отчет.Период.ДатаОкончания);
			ТабДок.Вывести(ОбластьШапка);
			ОбластьШапкаПредпр.Параметры.Предприятие = ТЗ[Строчка][3];
			ТабДок.Вывести(ОбластьШапкаПредпр, 0);
			Период = 0;
			Для Колонка = 1 По ВсегоПериодов * ?(ПустаяСтрока(Отчет.Сценарий2), 1, 2) Цикл
				Период = Период + Интервал;
				ОбластьШапкаПредпрСтолбцы.Параметры.Сценарий1 = Отчет.Сценарий1;
				Если ВсегоПериодов > 1 Тогда
					ОбластьШапкаПредпрСтолбцы.Параметры.Месяц = ПредставлениеПериода(НачалоМесяца(ДобавитьМесяц(Отчет.Период.ДатаНачала, Период - Интервал)), КонецМесяца(ДобавитьМесяц(Отчет.Период.ДатаНачала, Период - 1)));	
				иначе
					ОбластьШапкаПредпрСтолбцы.Параметры.Месяц = ПредставлениеПериода(Отчет.Период.ДатаНачала, Отчет.Период.ДатаОкончания);	
				КонецЕсли; 
				
				//ОбластьШапкаСтолбцы.Параметры.Объем1 = ТЗ[Строчка][Колонка * 2 + 4];
				Если НЕ ПустаяСтрока(Отчет.Сценарий2)  Тогда
					ОбластьШапкаПредпрСтолбцы.Параметры.Сценарий2 = Отчет.Сценарий2;
					//ОбластьШапкаСтолбцы.Параметры.Объем2 = ТЗ[Строчка][Колонка * 2 + 6];
					//ОбластьШапкаСтолбцы.Параметры.Объем3 = ОбластьШапкаСтолбцы.Параметры.Объем2 - ОбластьШапкаСтолбцы.Параметры.Объем1;
					Колонка = Колонка + 1;
				КонецЕсли;
				ТабДок.Присоединить(ОбластьШапкаПредпрСтолбцы, 0);
			КонецЦикла;
			
			Если ИнтервалМеньше Тогда				
				ОбластьШапкаПредпрСтолбцы.Параметры.Сценарий1 = Отчет.Сценарий1;
				ОбластьШапкаПредпрСтолбцы.Параметры.Месяц = "Итого";	
				Если НЕ ПустаяСтрока(Отчет.Сценарий2)  Тогда
					ОбластьШапкаПредпрСтолбцы.Параметры.Сценарий2 = Отчет.Сценарий2;
				КонецЕсли;
				ТабДок.Присоединить(ОбластьШапкаПредпрСтолбцы, 0);	
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		ИтогоСумма1 = 0;
		ИтогоСумма2 = 0;
		
		//получаем шрифт
		ОбластьДанные = Макет.ПолучитьОбласть("Строка" + строка(ТЗ[Строчка][0]) + "|СтолбецНачало");
		ОбластьДанныеСтолбцы = Макет.ПолучитьОбласть("Строка" + строка(ТЗ[Строчка][0]) + "|ДанныеСтолбца");			
		
		//получаем данные
		ОбластьДанные.Параметры.Статья = ТЗ[Строчка][4];
		
		Если (Лев(ТЗ[Строчка][4], 6) = "Доходы" И СтрДлина(ТЗ[Строчка][4]) = 6) ИЛИ (Лев(ТЗ[Строчка][4], 7) = "Расходы" И СтрДлина(ТЗ[Строчка][4]) = 7) Тогда
			ТекУровень = 1
		ИначеЕсли ТипЗнч(ТЗ[Строчка][4]) = Тип("СправочникСсылка.СтатьиЗатрат") ИЛИ ТипЗнч(ТЗ[Строчка][4]) = Тип("СправочникСсылка.СтатьиДоходовРасходов") Тогда
			ТекУровень = ?(ТЗ[Строчка][4].ЭтоГруппа ИЛИ ЗначениеЗаполнено(ТЗ[Строчка][4].Родитель) = Ложь, 2, 3);
		Иначе
			ТекУровень = ?(ТЗ[Строчка][0] = 4, 4, 0);
		КонецЕсли;
			
		ТабДок.Вывести(ОбластьДанные, ТекУровень);
		Период = 0;
		Для Колонка = 1 По ВсегоПериодов * ?(ПустаяСтрока(Отчет.Сценарий2), 1, 2) Цикл
			Период = Период + Интервал;
			ОбластьДанныеСтолбцы.Параметры.Сумма1 = ТЗ[Строчка][Колонка * 2 + 4];
			ИтогоСумма1 = ИтогоСумма1 + ТЗ[Строчка][Колонка * 2 + 4]; 
			Если НЕ ПустаяСтрока(Отчет.Сценарий2)  Тогда
				ОбластьДанныеСтолбцы.Параметры.Сумма2 = ТЗ[Строчка][Колонка * 2 + 6];
				ИтогоСумма2 = ИтогоСумма2 + ТЗ[Строчка][Колонка * 2 + 6];
				ОбластьДанныеСтолбцы.Параметры.Сумма3 = ОбластьДанныеСтолбцы.Параметры.Сумма2 - ОбластьДанныеСтолбцы.Параметры.Сумма1;
				Колонка = Колонка + 1;
			КонецЕсли;
			
			СтруктураРасшифровки = Новый Структура;
			СтруктураРасшифровки.Вставить("Отчет", "Отчеты.Д_Расшифровка");
			СтруктураРасшифровки.Вставить("Счет", ПланСчетов1.ЗатратыНаПрво);
			СтруктураРасшифровки.Вставить("Предприятие", ТЗ[Строчка][3]);
			СтруктураРасшифровки.Вставить("Субконто1", ТЗ[Строчка][4]);
			СтруктураРасшифровки.Вставить("Дата1", ?(ВсегоПериодов > 1, НачалоМесяца(ДобавитьМесяц(Отчет.Период.ДатаНачала, Период - Интервал)), Отчет.Период.ДатаНачала));
			СтруктураРасшифровки.Вставить("Дата2", ?(ВсегоПериодов > 1, КонецМесяца(ДобавитьМесяц(Отчет.Период.ДатаНачала, Период - 1)), Отчет.Период.ДатаОкончания));
			СтруктураРасшифровки.Вставить("ВидимостьШапки", 0);
			СтруктураРасшифровки.Вставить("Сценарий1", Отчет.Сценарий1);
			
			ОбластьДанныеСтолбцы.Параметры.Расшифровка = СтруктураРасшифровки;
			Если НЕ ПустаяСтрока(Отчет.Сценарий2)  Тогда
				СтруктураРасшифровки2 = Новый Структура;
				СтруктураРасшифровки2.Вставить("Отчет", "Отчеты.Д_Расшифровка");
				СтруктураРасшифровки2.Вставить("Счет", ПланСчетов2.ЗатратыНаПрво);
				СтруктураРасшифровки2.Вставить("Предприятие", ТЗ[Строчка][3]);
				СтруктураРасшифровки2.Вставить("Субконто1", ТЗ[Строчка][4]);
				СтруктураРасшифровки2.Вставить("Дата1", ?(ВсегоПериодов > 1, НачалоМесяца(ДобавитьМесяц(Отчет.Период.ДатаНачала, Период - Интервал)), Отчет.Период.ДатаНачала));
				СтруктураРасшифровки2.Вставить("Дата2", ?(ВсегоПериодов > 1, КонецМесяца(ДобавитьМесяц(Отчет.Период.ДатаНачала, Период - 1)), Отчет.Период.ДатаОкончания));
				СтруктураРасшифровки2.Вставить("ВидимостьШапки", 0);
				СтруктураРасшифровки2.Вставить("Сценарий1", Отчет.Сценарий2);
				ОбластьДанныеСтолбцы.Параметры.Расшифровка2 = СтруктураРасшифровки2;
			КонецЕсли;
			
			ТабДок.Присоединить(ОбластьДанныеСтолбцы, ТекУровень);
			
			//Колонка = Колонка + 1;
		КонецЦикла;
		
		Если ИнтервалМеньше Тогда			
			ОбластьДанныеСтолбцы.Параметры.Сумма1 = ИтогоСумма1; 
			Если НЕ ПустаяСтрока(Отчет.Сценарий2)  Тогда
				ОбластьДанныеСтолбцы.Параметры.Сумма2 = ИтогоСумма2;
				ОбластьДанныеСтолбцы.Параметры.Сумма3 = ИтогоСумма2 - ИтогоСумма1;
			КонецЕсли;
			
			ТабДок.Присоединить(ОбластьДанныеСтолбцы, ТекУровень);
			
			СтруктураРасшифровки = Новый Структура;
			СтруктураРасшифровки.Вставить("Отчет", "Отчеты.Д_Расшифровка");
			СтруктураРасшифровки.Вставить("Счет", ПланСчетов1.ЗатратыНаПрво);
			СтруктураРасшифровки.Вставить("Предприятие", ТЗ[Строчка][3]);
			СтруктураРасшифровки.Вставить("Субконто1", ТЗ[Строчка][4]);
			СтруктураРасшифровки.Вставить("Дата1", Отчет.Период.ДатаНачала);
			СтруктураРасшифровки.Вставить("Дата2", Отчет.Период.ДатаОкончания);
			СтруктураРасшифровки.Вставить("ВидимостьШапки", 0);
			СтруктураРасшифровки.Вставить("Сценарий1", Отчет.Сценарий1);
			
			ОбластьДанныеСтолбцы.Параметры.Расшифровка = СтруктураРасшифровки;
			Если НЕ ПустаяСтрока(Отчет.Сценарий2)  Тогда
				СтруктураРасшифровки2 = Новый Структура;
				СтруктураРасшифровки2.Вставить("Отчет", "Отчеты.Д_Расшифровка");
				СтруктураРасшифровки2.Вставить("Счет", ПланСчетов2.ЗатратыНаПрво);
				СтруктураРасшифровки2.Вставить("Предприятие", ТЗ[Строчка][3]);
				СтруктураРасшифровки2.Вставить("Субконто1", ТЗ[Строчка][4]);
				СтруктураРасшифровки2.Вставить("Дата1", Отчет.Период.ДатаНачала);
				СтруктураРасшифровки2.Вставить("Дата2", Отчет.Период.ДатаОкончания);
				СтруктураРасшифровки2.Вставить("ВидимостьШапки", 0);
				СтруктураРасшифровки2.Вставить("Сценарий1", Отчет.Сценарий2);
				ОбластьДанныеСтолбцы.Параметры.Расшифровка2 = СтруктураРасшифровки2;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбластьОтступа = Макет.ПолучитьОбласть("ОтступДляБДДС");
	Если ТипЗнч(Отчет) = Тип("Структура") Тогда
		ТабДок.Вывести(ОбластьОтступа)
	КонецЕсли;
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
				
КонецПроцедуры

Функция ОпределитьКвартал(НомерМесяца) Экспорт
	
	Если НомерМесяца / 3 <= 1 Тогда
		Возврат 1;
	ИначеЕсли НомерМесяца / 3 > 1 И НомерМесяца / 3 <= 2 Тогда 
		Возврат 2;
	ИначеЕсли  НомерМесяца / 3 > 2 И НомерМесяца / 3 <= 3 Тогда
		Возврат 3;
	ИначеЕсли НомерМесяца / 3 > 3 И НомерМесяца / 3 <= 4 Тогда
		Возврат 4;	
	КонецЕсли;
	
КонецФункции // ()

Функция ПериодовВИнтервале(ДатаНачалаИнтервала, ДатаОкончанияИнтервала, Переодичность) Экспорт
	
	ВсегоПериодов = 1;
	
	ЗапросИнтервалов = Новый ЗАпрос;
	ЗапросИнтервалов.УстановитьПараметр("ДатаНач", НачалоМесяца(ДатаНачалаИнтервала));
	ЗапросИнтервалов.УстановитьПараметр("ДатаКон", КонецМесяца(ДатаОкончанияИнтервала) + 1);
	ЗапросИнтервалов.Текст = "ВЫБРАТЬ
	                        |	РАЗНОСТЬДАТ(&ДатаНач, &ДатаКон, " + ?(Переодичность = Перечисления.Д_Интервал.Помесячно, "МЕСЯЦ",?(
	Переодичность = Перечисления.Д_Интервал.Поквартально, "КВАРТАЛ", "ГОД")) + ") КАК КоличествоИнт";
	РезультатИнт = ЗапросИнтервалов.Выполнить();						
	ВыборкаИнт = РезультатИнт.Выбрать();
	
	Пока ВыборкаИнт.Следующий() Цикл
		ВсегоПериодов = ВыборкаИнт.КоличествоИнт
	КонецЦикла;

	Возврат ВсегоПериодов;
	
КонецФункции

Процедура ЗаполнитьСтруктуруПараметрами(СтруктураПоиска) Экспорт
	
	ДопПараметры = Новый Массив;
	ДопПараметры.Добавить(Метаданные.ПараметрыСеанса.ДоступныеПредприятия);
	ДопПараметры.Добавить(Метаданные.ПараметрыСеанса.СчетчикОповещенийОЗадачах);
	ДопПараметры.Добавить(Метаданные.ПараметрыСеанса.МассивНевыполненныхЗадач);
	ДопПараметры.Добавить(Метаданные.ПараметрыСеанса.РольАдминаДоступна);
	ДопПараметры.Добавить(Метаданные.ПараметрыСеанса.ДоступныеПользователи);
	ДопПараметры.Добавить(Метаданные.ПараметрыСеанса.ДоступныеПодразделения);
	ДопПараметры.Добавить(Метаданные.ПараметрыСеанса.ОграничиватьПодразделения);
	ДопПараметры.Добавить(Метаданные.ПараметрыСеанса.ОграничиватьПредприятия);
	ДопПараметры.Добавить(Метаданные.ПараметрыСеанса.ДоступныеИсточники);
	ДопПараметры.Добавить(Метаданные.ПараметрыСеанса.АктивныйПользователь);
	ДопПараметры.Добавить(Метаданные.ПараметрыСеанса.ДоступныеПредприятияПросмотр);
	ДопПараметры.Добавить(Метаданные.ПараметрыСеанса.ДоступныеСчета);
	ДопПараметры.Добавить(Метаданные.ПараметрыСеанса.ДоступныеНаправления);
	ДопПараметры.Добавить(Метаданные.ПараметрыСеанса.ОграничиватьНаправления);
	ДопПараметры.Добавить(Метаданные.ПараметрыСеанса.НеДоступныеНаправления);
	//ДопПараметры.Добавить(Метаданные.ПараметрыСеанса.смсПользователь);
	//ДопПараметры.Добавить(Метаданные.ПараметрыСеанса.смсПароль);
	//ДопПараметры.Добавить(Метаданные.ПараметрыСеанса.смсОсновнойСервер);
	//ДопПараметры.Добавить(Метаданные.ПараметрыСеанса.смсКорректировкаUTC);
	ДопПараметры.Добавить(Метаданные.ПараметрыСеанса.ДопПараметры);
	ДопПараметры.Добавить(Метаданные.ПараметрыСеанса.СтруктураПараметровФормСпискаДокументооборота);
	//ДопПараметры.Добавить(Метаданные.ПараметрыСеанса.смсНомерСессии);
	ДопПараметры.Добавить(Метаданные.ПараметрыСеанса.ТекущееПредприятие);
	
	
	Для каждого ТекПараметрСеанса Из ДопПараметры Цикл
		Если ПравоДоступа("Получение", ТекПараметрСеанса) Тогда
			Если НЕ ТипЗнч(ПараметрыСеанса[ТекПараметрСеанса.Имя]) = Тип("ФиксированнаяСтруктура") Тогда
				СтруктураПоиска.Вставить(ТекПараметрСеанса.Имя, ПараметрыСеанса[ТекПараметрСеанса.Имя]);	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекСтрокаСтруктуры Из ПараметрыСеанса.ДопПараметры Цикл
		СтруктураПоиска.Вставить(ТекСтрокаСтруктуры.Ключ, ТекСтрокаСтруктуры.Значение);	
	КонецЦикла;
	
	КонтрольВхода = ПроверитьСоответствиеКомпьютераИПользователя();
	Для каждого ТекСтрокаСтруктуры Из КонтрольВхода Цикл
		СтруктураПоиска.Вставить(ТекСтрокаСтруктуры.Ключ, ТекСтрокаСтруктуры.Значение);	
	КонецЦикла;
	
КонецПроцедуры

Процедура НастоитьИнтерфейс(знач ВариантИнтерфейса) Экспорт
	
	НачальнаяСтраница = Новый НастройкиНачальнойСтраницы;
	СоставФорм = НачальнаяСтраница.ПолучитьСоставФорм();
	
	ЕстьИзменения = Ложь;
	Если РольДоступна("сабМенеджерПоПродажам") Тогда //только заказы
		
		СоставФорм.ЛеваяКолонка.Очистить();
		СоставФорм.ПраваяКолонка.Очистить();
		СоставФорм.ЛеваяКолонка.Добавить("Документ.ЗаказКлиента.Форма.ФормаСписка");
		ЕстьИзменения = Истина;
		
	КонецЕсли;
		
	Если РольДоступна("сабКладовщик") Тогда //только заказы
				
		СоставФорм.ЛеваяКолонка.Очистить();
		СоставФорм.ПраваяКолонка.Очистить();
		#Если МобильныйКлиент Тогда
			СоставФорм.ЛеваяКолонка.Добавить("Документ.ЗаказПоставщику.Форма.ФормаТСД");
		#Иначе
			СоставФорм.ЛеваяКолонка.Добавить("Документ.сабМаршрутныйЛист.Форма.ФормаСпискаСбора");
		#КонецЕсли			
		ЕстьИзменения = Истина;
		
	КонецЕсли;
	
	Если РольДоступна("ДокументооборотСлужебныеЗапискиПросмотр") Тогда //только документооборот
		
		СоставФорм.ЛеваяКолонка.Очистить();
		СоставФорм.ПраваяКолонка.Очистить();
		ЕстьИзменения = Истина;
		
	КонецЕсли;
	
	Если РольДоступна("Казначей") ИЛИ БюджетныйНаСервере.РольАдминаДоступнаСервер() Тогда //реестр оплат
		Если СоставФорм.ПраваяКолонка.Найти("РегистрСведений.сабГрафикПлатежей.Форма.ФормаСпискаДляНачальноСтраницы") = Неопределено Тогда
			СоставФорм.ПраваяКолонка.Добавить("РегистрСведений.сабГрафикПлатежей.Форма.ФормаСпискаДляНачальноСтраницы");
			ЕстьИзменения = Истина;
		КонецЕсли;
	Иначе
		Если Не СоставФорм.ПраваяКолонка.Найти("РегистрСведений.сабГрафикПлатежей.Форма.ФормаСпискаДляНачальноСтраницы") = Неопределено Тогда
			СоставФорм.ПраваяКолонка.Удалить("РегистрСведений.сабГрафикПлатежей.Форма.ФормаСпискаДляНачальноСтраницы");
			ЕстьИзменения = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ИспользоватьБизнесПроцессы = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ИспользоватьБизнесПроцессы", Истина).Значение;
	Если Не ИспользоватьБизнесПроцессы = Неопределено И ИспользоватьБизнесПроцессы Тогда //реестр оплат
		Если СоставФорм.ЛеваяКолонка.Найти("Справочник.Задача.Форма.СписокМоихЗадач7") = Неопределено Тогда
			СоставФорм.ЛеваяКолонка.Добавить("Справочник.Задача.Форма.СписокМоихЗадач7");
			ЕстьИзменения = Истина;
		КонецЕсли;
	Иначе
		Если Не СоставФорм.ПраваяКолонка.Найти("Справочник.Задача.Форма.СписокМоихЗадач7") = Неопределено Тогда
			СоставФорм.ПраваяКолонка.Удалить("Справочник.Задача.Форма.СписокМоихЗадач7");
			ЕстьИзменения = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьИзменения Тогда
		НачальнаяСтраница.УстановитьСоставФорм(СоставФорм);
		ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиНачальнойСтраницы", "", НачальнаяСтраница);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(справочники.сабМониторВнедрения.НайтиПоНаименованию("ИспользоватьФО", Истина)) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Константы.сабПодсистемаКазначейство.Установить(Истина);
		Константы.сабПодсистемаБюджетирование.Установить(Истина);
		Константы.сабПодсистемаДокументооборот.Установить(справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("ИспользоватьБизнесПроцессы"));
		Константы.сабПодсистемаОперативныйУчет.Установить(Истина);
		
		ТекЭл = Справочники.сабМониторВнедрения.НайтиПоНаименованию("ИспользоватьФО", Истина);
		
		Если ЗначениеЗаполнено(ТекЭл) Тогда
			ТекЭлОб = ТекЭл.ПолучитьОбъект();
		Иначе
			ТекЭлОб = Справочники.сабМониторВнедрения.СоздатьЭлемент();
		КонецЕсли;
		
		ТекЭлОб.Наименование = "ИспользоватьФО";
		ТекЭлОб.Значение = Истина;
		ТекЭлОб.Записать();
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьИнтерфейс(знач ВариантИнтерфейса) Экспорт
	
	//настройка форм начальной страницы
	
	//НастройкаиНС = Новый НастройкиНачальнойСтраницы;
	//ТекНастройки = НастройкаиНС.ПолучитьСоставФорм();
	//ЕстьЗначение = Ложь;
	//Для каждого ТекНастройка Из ТекНастройки.ЛеваяКолонка Цикл
	//	Если ТекНастройка = "Документ.Д_ОбращенияВТехПоддержку.Форма.ТехПоддержка1" Тогда
	//		ЕстьЗначение = Истина;
	//	КонецЕсли;
	//КонецЦикла; 
	//
	//ТекНастройки.ЛеваяКолонка.Удалить(0);
	//Если НЕ ЕстьЗначение Тогда
	//	ТекНастройки.ЛеваяКолонка.Добавить("Документ.Д_ОбращенияВТехПоддержку.Форма.ТехПоддержка1");	
	//	НастройкаиНС.УстановитьСоставФорм(ТекНастройки);
	//КонецЕсли;
	

	
	//проверка текущего интерфейса
	ВариантИнтерфейса = ?(ВариантИнтерфейса = "Версия8_2", "Версия8_2", "Такси");	
	НастройкиКлиента = ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиКлиентскогоПриложения");
	
	Попытка
				
		Возврат НастройкиКлиента.ВариантИнтерфейсаКлиентскогоПриложения = ВариантИнтерфейсаКлиентскогоПриложения[ВариантИнтерфейса] 
			И НастройкиКлиента.ВариантМасштабаФормКлиентскогоПриложения = ВариантМасштабаФормКлиентскогоПриложения.Авто; 
										
	Исключение
		Возврат Ложь;	
	КонецПопытки; 
	
	
КонецФункции // ()

Функция ЭтоИнтерфейсТакси() Экспорт
	
	//НастройкиКлиента = ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиКлиентскогоПриложения");
	Возврат Истина;
	
КонецФункции

Функция ПолучитьДеревоПредприятийПоНаправлениям(СкрыватьНеактуальные = Ложь) Экспорт
	
	ДеревоПредприятий = Новый ДеревоЗначений;
	ДеревоПредприятий.Колонки.Добавить("Пометка");
	ДеревоПредприятий.Колонки.Добавить("Значение");
	
	НеактуальныеТипы = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Предприятия.Ссылка КАК Предприятие,
	               |	Предприятия.Родитель КАК НаправлениеДеятельности,
	               |	Предприятия.Родитель
	               |ИЗ
	               |	Справочник.Предприятия КАК Предприятия
	               |ГДЕ
	               |	Предприятия.ПометкаУдаления = ЛОЖЬ
	               |	И ВЫБОР
	               |			КОГДА &СкрыватьНеактуальные
	               |				ТОГДА НЕ Предприятия.ТипПредприятия В (&ТипНеактуальные)
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |	И Предприятия.Ссылка В ИЕРАРХИИ(&ДоступныеПредприятия)
	               |	И Предприятия.ЭтоГруппа = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Предприятия.Наименование,
	               |	Предприятия.Родитель.Наименование
	               |ИТОГИ ПО
	               |	НаправлениеДеятельности";
				   
	Запрос.Параметры.Вставить("СкрыватьНеактуальные", СкрыватьНеактуальные);
	Запрос.Параметры.Вставить("ТипНеактуальные", НеактуальныеТипы);
	Запрос.Параметры.Вставить("ДоступныеПредприятия", ПараметрыСеанса.ДоступныеПредприятия);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	СтрокаНаправления = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		
		//Если Не ЗначениеЗаполнено(Выборка.НаправлениеДеятельности) Тогда
		//	Продолжить;
		//КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Выборка.Предприятие) И ЗначениеЗаполнено(Выборка.НаправлениеДеятельности) Тогда
			СтрокаНаправления = ДеревоПредприятий.Строки.Добавить();
			СтрокаНаправления.Значение = Выборка.НаправлениеДеятельности;
			СтрокаНаправления.Пометка = Ложь;
			Продолжить;
		ИначеЕсли СтрокаНаправления = Неопределено Тогда
			Если ЗначениеЗаполнено(Выборка.Предприятие) Тогда
				СтрокаПредприятия = ДеревоПредприятий.Строки.Добавить();
				СтрокаПредприятия.Значение = Выборка.Предприятие;
				СтрокаПредприятия.Пометка = Ложь;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		СтрокаПредприятия = СтрокаНаправления.Строки.Добавить();
		СтрокаПредприятия.Значение = Выборка.Предприятие;
		СтрокаПредприятия.Пометка = Ложь;
		
	КонецЦикла;
			
	Возврат ДеревоПредприятий;
	
КонецФункции

Функция ПолучитьЛимитыНаПрибыльУчастников(Предприятие, Сценарий) Экспорт
	
	ПланСчетов1 = ПланыСчетов.Учетный;			
	ДатаНачала = НачалоМесяца(Сценарий.АктуальнаяДата);
	ДатаОкончания = КонецМесяца(Сценарий.АктуальнаяДата);
		
	ДенежныеСчета1 = Новый Массив;
	ДенежныеСчета1.Добавить(ПланСчетов1.Счет99());
	ДенежныеСчета1.Добавить(ПланСчетов1.Счет99());	
	
	Счета901 = Новый Массив;
	Счета901.Добавить(ПланСчетов1.Счет90());
	Счета901.Добавить(ПланСчетов1.Счет91());	
	
	//считаем обороты по счетам 90 и 91
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	-ЕСТЬNULL(БюджетныйОбороты1.СуммаОборот, 0) КАК Сумма1,
	               |	МЕСЯЦ(БюджетныйОбороты1.Период) КАК Период
	               |ИЗ
	               |	РегистрБухгалтерии.Бюджетный.Обороты(
	               |			&Дата1,
	               |			&Дата2,
	               |			Месяц,
	               |			Счет В ИЕРАРХИИ (&Счет1),
	               |			,
	               |			СценарийПлана = &Сценарий
	               |				И Предприятия = &Предприятие,
	               |			,
	               |			) КАК БюджетныйОбороты1
	               |АВТОУПОРЯДОЧИВАНИЕ";
		
	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.УстановитьПараметр("Дата1", ДатаНачала);
	Запрос.УстановитьПараметр("Дата2", Новый Граница(ДатаОкончания, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Счет1", Счета901);
	Результат9091 = Запрос.Выполнить();
	
	//считаем обороты по счетам 75.2 и 99
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	БюджетныйОбороты1.Субконто1.ТипУчредителя КАК ТипУчредителя,
	               |	-ЕСТЬNULL(БюджетныйОбороты1.СуммаОборот, 0) КАК Сумма1,
	               |	МЕСЯЦ(БюджетныйОбороты1.Период) КАК Период
	               |ИЗ
	               |	РегистрБухгалтерии.Бюджетный.Обороты(
	               |			&Дата1,
	               |			&Дата2,
	               |			Месяц,
	               |			Счет В (&Счет1),
	               |			,
	               |			СценарийПлана = &Сценарий1
	               |				И Предприятия = &Предприятие,
	               |			КорСчет В (&Счет2),
	               |			) КАК БюджетныйОбороты1
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	
	
	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	Запрос.УстановитьПараметр("Сценарий1", Сценарий);
	Запрос.УстановитьПараметр("Дата1", ДатаНачала);
	Запрос.УстановитьПараметр("Дата2", Новый Граница(ДатаОкончания, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Счет1", ПланСчетов1.Счет7502());
    Запрос.УстановитьПараметр("Счет2", ДенежныеСчета1);	
	Результат = Запрос.Выполнить();
	
			
	Выборка9091 = Результат9091.Выбрать();
	
	// проверка
	Пока Выборка9091.Следующий() Цикл
		
		Выборка = Результат.Выбрать();
		
		Проверка = 0;
		Пока Выборка.Следующий() Цикл
			Проверка = Проверка + Выборка.Сумма1;
		КонецЦикла;
		
		Если НЕ Окр(Выборка9091.Сумма1, 0) = Окр(Проверка, 0) Тогда
			Сообщить("Прибыль по предприятию " + Предприятие + ", сценарию " + Сценарий + " не распределена. Распределено: " + Строка(Окр(Проверка, 0)) + ". ЧА: " +  Строка(Окр(Выборка9091.Сумма1, 0)));
		КонецЕсли;
					
	КонецЦикла;
	
	ПрибВсего1 = 0;
	ПрибВсего2 = 0;
	
	Воронеж = Справочники.Д_СтатьиОборотки.Воронеж;
	Z = Справочники.Д_СтатьиОборотки.Z;
	КБР = Справочники.Д_СтатьиОборотки.КБР;
	Дядя = Справочники.Д_СтатьиОборотки.НайтиПоНаименованию("Дядя", Истина);
	// новый учр
	Р = Справочники.Д_СтатьиОборотки.Р;
	
	ТЗ = Результат.Выгрузить();
	ТЗ.Свернуть("ТипУчредителя, Период", "Сумма1");
	
	ПрибыльУчров = Новый Соответствие;
	
	Для Каждого Строка Из ТЗ Цикл
		ПрибыльУчров.Вставить(Строка.ТипУчредителя, Строка.Сумма1);
	КонецЦикла;
	
	Возврат ПрибыльУчров;
	
КонецФункции

Функция ПолучитьЛимитПоОплатеТруда(Счет, Предприятие, Сценарий, ВидОстатка = "") Экспорт
	
	Лимит = 0;
	ТекДата = КонецМесяца(Сценарий.АктуальнаяДата);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	БюджетныйОбороты.Субконто1,
	               |	ВЫБОР
	               |		КОГДА &ВидОстатка = ""Дт""
	               |			ТОГДА БюджетныйОбороты.СуммаОборотДт
	               |		КОГДА &ВидОстатка = ""Кт""
	               |			ТОГДА БюджетныйОбороты.СуммаОборотКт
	               |		ИНАЧЕ БюджетныйОбороты.СуммаОборот
	               |	КОНЕЦ КАК Сумма
	               |ИЗ
	               |	РегистрБухгалтерии.Бюджетный.Обороты(
	               |			&ДатаНач,
	               |			&ДатаКон,
	               |			,
	               |			Счет = &Счет,
	               |			,
	               |			СценарийПлана = &Сценарий
	               |				И Предприятия = &Предприятие,
	               |			НЕ КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Управленческий.Вспомогательный),
	               |			) КАК БюджетныйОбороты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	БюджетныйОбороты.Субконто1,
	               |	ВЫБОР
	               |		КОГДА &ВидОстатка = ""Дт""
	               |			ТОГДА БюджетныйОбороты.СуммаОборотДт
	               |		КОГДА &ВидОстатка = ""Кт""
	               |			ТОГДА БюджетныйОбороты.СуммаОборотКт
	               |		ИНАЧЕ БюджетныйОбороты.СуммаОборот
	               |	КОНЕЦ";
				   
	Запрос.УстановитьПараметр("Счет", Счет);
	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.УстановитьПараметр("ДатаНач", Сценарий.АктуальнаяДата);
	Запрос.УстановитьПараметр("ДатаКон", Новый Граница(ТекДата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВидОстатка", ВидОстатка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Лимит = Лимит + Выборка.Сумма
	КонецЦикла;
	
	Возврат Лимит;
	
КонецФункции

Функция ПолучитьОстатокПоСчету(Счет, Предприятие, Сценарий, ВидОстатка = "") Экспорт
	
	Остаток = 0;
	ТекДата = КонецМесяца(Сценарий.АктуальнаяДата);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(ВЫБОР
	               |			КОГДА &ВидОстатка = ""Дт""
	               |				ТОГДА БюджетныйОстатки.СуммаОстатокДт
	               |			КОГДА &ВидОстатка = ""Кт""
	               |				ТОГДА БюджетныйОстатки.СуммаОстатокКт
	               |			ИНАЧЕ БюджетныйОстатки.СуммаОстаток
	               |		КОНЕЦ) КАК Сумма,
	               |	БюджетныйОстатки.Субконто1
	               |ИЗ
	               |	РегистрБухгалтерии.Бюджетный.Остатки(
	               |			&ДатаКон,
	               |			Счет = &Счет,
	               |			,
	               |			СценарийПлана = &Сценарий
	               |				И Предприятия = &Предприятие) КАК БюджетныйОстатки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	БюджетныйОстатки.Субконто1";
				   
	Запрос.УстановитьПараметр("Счет", Счет);
	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.УстановитьПараметр("ДатаКон", Новый Граница(ТекДата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВидОстатка", ВидОстатка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Остаток = Остаток + Выборка.Сумма
	КонецЦикла;
	
	Возврат Остаток;
	
КонецФункции

Процедура ФормаДокументаПриСозданииНаСервере(Форма, НеСкрыватьПодразделения = Истина) Экспорт
	
	Если Лев(Форма.ИмяФормы, 5) = "Отчет" Тогда
		Объект = Форма.Отчет;
	Иначе
		Объект = Форма.Объект;	
	КонецЕсли;
	
	
	//доступность реквизита "предприятие" на форме
	Попытка
		МассивПП = БюджетныйНаСервере.ПолучитьПредприятия();
		Если МассивПП.Количество() = 1 Тогда
			Если НЕ ЗначениеЗаполнено(Объект.Предприятие) Тогда
				Объект.Предприятие = МассивПП.Получить(0);
			КонецЕсли;	
			Форма.Элементы.Предприятие.Доступность = 0;
		КонецЕсли;	
	Исключение
		
	КонецПопытки; 
	
	
	//Дата запрета
	Если  НЕ БюджетныйНаСервере.РольДоступнаСервер("Администратор") И НЕ БюджетныйНаСервере.РольДоступнаСервер("ОФК") 
		И НЕ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.Д_Бюджет") Тогда
		Если  БюджетныйНаСервере.ПринадлежитПодсистеме(Объект.Ссылка,"сабУправленческийУчет") Тогда
			ГлобальнаяДата = ДатыЗапретаИзменения.ПолучитьДатуЗапрета(Объект.Ссылка);    //УЧ_Сервер.ДатаГлобальногоЗапрета();
			ДатаЗакрытияУчетПредприятие = УЧ_Сервер.ДатаЛокальногоЗапрета(Объект.Предприятие);
			Если БюджетныйНаСервере.РольДоступнаСервер("Финансист") Тогда
				ДатаЗакрытия = ГлобальнаяДата;				
			Иначе
				ДатаЗакрытия = Макс(ГлобальнаяДата,ДатаЗакрытияУчетПредприятие);
			КонецЕсли;
		Иначе
			ДатаЗакрытия = Дата('00010101');	
		КонецЕсли;
		ИсточникДата = Объект.Дата;	
		Если ИсточникДата <= ДатаЗакрытия  Тогда
			Форма.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
	
	//установка видимости подразделения
	Если НеСкрыватьПодразделения Тогда
		//СкрытьПодразделения(Форма.Объект, Форма);
		
		Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ГД_ДвиженияОбщий") Тогда
			ТекПП = Объект.Агент;
		Иначе
			ТекПП = Объект.Предприятие;		
		КонецЕсли; 
		Если ТекПП.Пустая() Тогда
			Возврат;	
		КонецЕсли;
		
		УчетПоПодразделениям = БюджетныйНаСервере.ВернутьРеквизит(ТекПП, "УчетПоПодразделениям");
		Если НЕ УчетПоПодразделениям Тогда
			УчетПоПодразделениям = БюджетныйНаСервере.ДокументПодразделениеИстина(Объект.Ссылка, ТекПП);
		КонецЕсли;
		
		Для каждого ТекЭлемент Из Форма.Элементы Цикл
			Если ТекЭлемент.Имя = "Подразделение" ИЛИ ТекЭлемент.Имя = "ПодразделениеДт" ИЛИ ТекЭлемент.Имя = "ПодразделениеКт" ИЛИ ТекЭлемент.Имя = "ВидДеятельности"
				ИЛИ Прав(ТекЭлемент.Имя, 13) = "Подразделение" Тогда
				ТекЭлемент.Видимость = УчетПоПодразделениям;
			КонецЕсли;
		КонецЦикла; 	
	КонецЕсли;
	
КонецПроцедуры

Функция ПредставлениеСтатьиВСтроительныхОтчетах(Ссылка) Экспорт
	
	Если ТипЗнч(Ссылка) = Тип("Строка") Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	Представление = "";
	Родитель = Ссылка.Родитель;
	Родитель2 = Родитель.Родитель;
	Родитель3 = Родитель2.Родитель;
	Родитель4 = Родитель3.Родитель;
	Родитель5 = Родитель4.Родитель;
	Родитель6 = Родитель5.Родитель;
	
	//Элемент справочника: ПустаяСсылка (корень) - Предпроектная, проектная и разрешительная документация - Проект - Рабочий проект
	//Возвращает: Проект - Рабочий проект	
	Возврат Представление + 
				?(ЗначениеЗаполнено(Родитель6.Родитель), Родитель6.Наименование + " - ", "") + 
				?(ЗначениеЗаполнено(Родитель5.Родитель), Родитель5.Наименование + " - ", "") + 
				?(ЗначениеЗаполнено(Родитель4.Родитель), Родитель4.Наименование + " - ", "") + 
				?(ЗначениеЗаполнено(Родитель3.Родитель), Родитель3.Наименование + " - ", "") + 
				?(ЗначениеЗаполнено(Родитель2.Родитель), Родитель2.Наименование + " - ", "") + 
				?(ЗначениеЗаполнено(Родитель.Родитель), Родитель.Наименование + " - ", "") +
				Ссылка.Наименование;
	
КонецФункции

Функция ПолучитьРодителяВерхнегоУровня(знач Ссылка) Экспорт
	
	Если Ссылка = "Поступление" Или Ссылка = "Гашение" Или Ссылка = "Проценты оплачено" Тогда
		Возврат "Кредиты";
	ИначеЕсли ТипЗнч(Ссылка) = Тип("Строка") Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	Пока ЗначениеЗаполнено(Ссылка.Родитель) Цикл
		Ссылка = Ссылка.Родитель;
	КонецЦикла;
	Возврат Ссылка;
	
КонецФункции

Функция ПолучитьРодителяВерхнегоУровняКод(знач Ссылка) Экспорт
	
	Если ТипЗнч(Ссылка) = Тип("Строка") Тогда
		Возврат "яя"; //выводим последним
	КонецЕсли;
	
	РодительВерхнегоУровня = ПолучитьРодителяВерхнегоУровня(Ссылка);
	Возврат РодительВерхнегоУровня.Код;
	
КонецФункции

Процедура ПечатьДокументов(ТабДок, ПараметрКоманды, ИмяКоманды, ЕстьЧтоПечатать = Ложь) Экспорт
	ЕстьЧтоПечатать = Истина;
	Если ИмяКоманды = "Документ.Д_ЗаявкаНаОплату.Команда.ПроверкаСоответствияБюджету" ИЛИ ИмяКоманды = "Документ.Д_ЗаявкаНаФинансирование.Команда.ПроверкаСоответствияБюджету" Тогда
		Документы.Д_ЗаявкаНаОплату.ПроверкаСоответствия(ТабДок, ПараметрКоманды);
	ИначеЕсли ИмяКоманды = "Документ.Д_ЗаявкаНаОплату.Команда.ПечатьБезНал" Тогда
		Документы.Д_ЗаявкаНаОплату.Печать(ТабДок, ПараметрКоманды);
	ИначеЕсли ИмяКоманды = "Документ.Д_ЗаявкаНаОплату.Команда.ПечатьПлатежки" ИЛИ ИмяКоманды = "Документ.Д_ЗаявкаНаФинансирование.Команда.ПечатьПлатежки" Тогда
		Документы.Д_ЗаявкаНаОплату.ПечатьПлатежки(ТабДок, ПараметрКоманды, ЕстьЧтоПечатать);
	ИначеЕсли ИмяКоманды = "Документ.Д_ЗаявкаНаОплату.Команда.ПроверкаЗадолженности" Тогда
		Документы.Д_ЗаявкаНаОплату.ПроверкаЗадолженности(ТабДок, ПараметрКоманды);
	ИначеЕсли ИмяКоманды = "Документ.Д_ЗаявкаНаОплату.Команда.ПроверкаТекущегоСчета"  Тогда
		Документы.Д_ЗаявкаНаОплату.ПроверкаТекущегоСчета(ТабДок, ПараметрКоманды);
	ИначеЕсли ИмяКоманды = "Справочник.Контрагенты.Команда.КарточкаКонтрагента"  Тогда
		Справочники.Контрагенты.ПечатьКарточки(ПараметрКоманды, ТабДок);
	ИначеЕсли ИмяКоманды = "Документ.Д_СлужебнаяЗаписка.Команда.ПрямоеПревышениеБюджета"  Тогда
		Документы.Д_СлужебнаяЗаписка.ПрямоеПревышениеБюджетаПечать(ТабДок, ПараметрКоманды);
	ИначеЕсли ИмяКоманды = "Документ.УЧ_Стр_ДоговорДолевогоУчастия.Команда.ПечатьДоговора" Тогда
		Документы.УЧ_Стр_ДоговорДолевогоУчастия.ПечатьДоговора(ТабДок, ПараметрКоманды);
	ИначеЕсли ИмяКоманды = "Документ.УЧ_Стр_ДоговорДолевогоУчастия.Команда.СостояниеПомещения" Тогда
		Документы.УЧ_Стр_ДоговорДолевогоУчастия.ПечатьСостояниеПомещения(ТабДок, ПараметрКоманды);
	ИначеЕсли ИмяКоманды = "Документ.УЧ_Реализация.Команда.Торг12" Тогда
		Документы.УЧ_Реализация.ПечатьТорг12(ТабДок, ПараметрКоманды);
	ИначеЕсли ИмяКоманды = "Документ.УЧ_Реализация.Команда.ТТН" Тогда
		Документы.УЧ_Реализация.ПечатьТТН(ТабДок, ПараметрКоманды);
	ИначеЕсли ИмяКоманды = "Документ.УЧ_ДвижениеДС.Команда.ПечатьУчет" Тогда
		Документы.УЧ_ДвижениеДС.ПечатьУчет(ТабДок, ПараметрКоманды);
	ИначеЕсли ИмяКоманды = "Документ.УЧ_АктСверкиВзаиморасчетов.Команда.ПечатьАктСверки" Тогда
		Документы.УЧ_АктСверкиВзаиморасчетов.Печать(ТабДок, ПараметрКоманды);
	КонецЕсли;
КонецПроцедуры

//Возвращает параметры сеанса по указанному имени
Функция ПолучитьПараметрыСеанса(ИмяПараметров) Экспорт
	
	Возврат ПараметрыСеанса[ИмяПараметров];
	
КонецФункции	

Функция ПолучитьСтатьюДДСДляЗакупнойНоменклатуры(ВидЗакупки) Экспорт
	
		Возврат Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка()
	
КонецФункции

Функция ПроверкаДоступностиЗП(Предприятие = Неопределено) Экспорт
	
	Попытка
	 	СсылкаСчета = ПланыСчетов.Учетный.Счет70().Ссылка.Код;
		СсылкаСчета = ПланыСчетов.Учетный.Счет70().Ссылка.Наименование;
	 Исключение
	 	Возврат Ложь;
	 КонецПопытки;
	 Возврат Истина;
	
	//Если Не ЗначениеЗаполнено(Предприятие) Тогда
	//	Возврат Истина; //нет ограничений на пустое предприятие	
	//КонецЕсли;
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//|	Пользователи.ДоступныПредприятияИзСписка
	//|ИЗ
	//|	Справочник.Пользователи КАК Пользователи
	//|ГДЕ
	//|	Пользователи.ДоступныПредприятияИзСписка = ЛОЖЬ
	//|	И Пользователи.Ссылка В(&Пользователи)";
	//
	//Запрос.УстановитьПараметр("Пользователи", ПараметрыСеанса.ДоступныеПользователи);
	//
	//Результат = Запрос.Выполнить();
	//Выборка = Результат.Выбрать();
	//
	//Если Выборка.Количество() Тогда
	//	Возврат Истина;	//нет ограничений по предприятиям - крутые пользователи
	//КонецЕсли;
	//
	//МассивКрутыхРолей = Новый Массив;
	//МассивКрутыхРолей.Добавить("Администратор");
	//МассивКрутыхРолей.Добавить("ФинансоваяДирекция");
	//МассивКрутыхРолей.Добавить("УСУК");
	//
	//Для каждого ТекРоль Из МассивКрутыхРолей Цикл
	//	Если РольДоступна(ТекРоль) Тогда
	//		Возврат Истина;	//крутая роль пользователя - нет ограничений
	//	КонецЕсли;
	//КонецЦикла; 
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	ОсновныеДолжностиПредприятия.ДоступКДаннымПоЗП
	//               |ИЗ
	//               |	РегистрСведений.ОсновныеДолжностиПредприятия КАК ОсновныеДолжностиПредприятия
	//               |ГДЕ
	//               |	(ОсновныеДолжностиПредприятия.Предприятие = &Предприятие
	//               |			ИЛИ ОсновныеДолжностиПредприятия.Предприятие В
	//               |				(ВЫБРАТЬ
	//               |					ВЫБОР
	//               |						КОГДА Предприятия.Родитель = ЗНАЧЕНИЕ(Справочник.Предприятия.ПустаяСсылка)
	//               |							ТОГДА НЕОПРЕДЕЛЕНО
	//               |						ИНАЧЕ Предприятия.Родитель
	//               |					КОНЕЦ КАК Поле1
	//               |				ИЗ
	//               |					Справочник.Предприятия КАК Предприятия
	//               |				ГДЕ
	//               |					Предприятия.Ссылка = &Предприятие))
	//               |	И ОсновныеДолжностиПредприятия.Сотрудник В ИЕРАРХИИ (&Сотрудники)
	//               |	И ОсновныеДолжностиПредприятия.ДоступКДаннымПоЗП = ИСТИНА";
	//
	//Запрос.УстановитьПараметр("Предприятие", Предприятие);
	//Запрос.УстановитьПараметр("Сотрудники", ПараметрыСеанса.ДоступныеПользователи);
	//
	//Результат = Запрос.Выполнить();
	//Выборка = Результат.Выбрать();
	//
	//Если НЕ Выборка.Количество() Тогда
	//	Возврат Ложь; //здесь есть ограничение по доступности ЗП
	//КонецЕсли;
	//
	//Возврат Истина;
	
	
КонецФункции

Функция ПолучитьПоследнююЗаписьПараметровБюджета(Предприятие, Сценарий) Экспорт
	
	СтруктураВозврата = Неопределено;
	НаборЗаписей = РегистрыСведений.Б_ПараметрыБюджета.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Предприятие.Установить(Предприятие);
	НаборЗаписей.Отбор.Сценарий.Установить(Сценарий);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() Тогда
		СтруктураВозврата = Новый Структура();
		СтруктураВозврата.Вставить("Утвержден", НаборЗаписей[0].Утвержден);
		СтруктураВозврата.Вставить("ПризнакРедактирования", НаборЗаписей[0].ПризнакРедактирования);
		СтруктураВозврата.Вставить("ПризнакРедактированияБО", НаборЗаписей[0].ПризнакРедактированияБО);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ИзменитьПоследнююЗаписьПараметровБюджета(Предприятие, Сценарий, Утвержден, ПризнакРедактирования,  ПризнакРедактированияБО) Экспорт
	
	НаборЗаписей = РегистрыСведений.Б_ПараметрыБюджета.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Предприятие.Установить(Предприятие);
	НаборЗаписей.Отбор.Сценарий.Установить(Сценарий);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() Тогда
		НаборЗаписей[0].Утвержден = Утвержден;
		НаборЗаписей[0].ПризнакРедактирования = ПризнакРедактирования;
		НаборЗаписей[0].ПризнакРедактированияБО = ПризнакРедактированияБО;
		
		Если Не ЗначениеЗаполнено(НаборЗаписей[0].Валюта) Тогда
			НаборЗаписей[0].Валюта = Предприятие.ОсновнаяВалютаУчета;
		КонецЕсли;
	// <<-- Номер: 4343, Дата: 10.07.2018	
	Иначе
		
		НаборЗаписей = РегистрыСведений.Б_ПараметрыБюджета.СоздатьМенеджерЗаписи();
		НаборЗаписей.Предприятие = Предприятие;
		НаборЗаписей.Сценарий    = Сценарий;
		НаборЗаписей.Валюта      = ?(ЗначениеЗаполнено(Предприятие), Предприятие.ОсновнаяВалютаУчета, Неопределено);
		НаборЗаписей.Утвержден   = Утвержден;
		НаборЗаписей.ПризнакРедактирования   = ПризнакРедактирования;
		НаборЗаписей.ПризнакРедактированияБО = ПризнакРедактированияБО;
	// 4343 -->>	
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры	

Функция ВернутьЗаголовокКонфигурации() Экспорт
	//ЗаголовокКонстанты = Константы.ЗаголовокКонфигурации.Получить();
	//Если НЕ ЗначениеЗаполнено(ЗаголовокКонстанты)  Тогда
	//	ЗаголовокКонстанты = Метаданные.Синоним;
	//КонецЕсли;

	Возврат "";	

КонецФункции // ()

Функция ПолучитьРазрешенныеПредприятияПоСчетам(Счет) Экспорт
	
	МассивПредприятий = Новый Массив;
	ДоступныВсе = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоступностьСчетовПоПредприятиям.Предприятие,
	|	ДоступностьСчетовПоПредприятиям.ДоступныВсе
	|ИЗ
	|	РегистрСведений.ДоступностьСчетовПоПредприятиям КАК ДоступностьСчетовПоПредприятиям
	|ГДЕ
	|	ДоступностьСчетовПоПредприятиям.Пользователь = &Пользователь
	|	И ДоступностьСчетовПоПредприятиям.Счет = &Счет";
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Счет", Счет);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДоступныВсе = Выборка.ДоступныВсе;
		Если ДоступныВсе Тогда 
			Прервать;
		КонецЕсли;
		МассивПредприятий.Добавить(Выборка.Предприятие);
	КонецЦикла;
		
	Если ДоступныВсе Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Предприятия.Ссылка
		|ИЗ
		|	Справочник.Предприятия КАК Предприятия
		|ГДЕ
		|	НЕ Предприятия.ПометкаУдаления";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МассивПредприятий.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивПредприятий;
	
КонецФункции	

Процедура Регл_ОбновитьНумерациюОбъектов() Экспорт
	
	ОбновитьНумерациюОбъектов();
	
КонецПроцедуры

Функция РольФинансистаДоступна() Экспорт
	Возврат РольДоступна("Финансист") ИЛИ РольДоступна("ФинансистБезУчета");
КонецФункции // ()

Функция ПолучитьПлановыйКурс(Сценарий, ЭквивалентнаяВалюта) Экспорт
	
	Курс = 1;
	
	Если ЗначениеЗаполнено(Сценарий) И Сценарий <> Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Б_ПлановыеКурсыВалютСрезПоследних.Курс
		|ИЗ
		|	РегистрСведений.Б_ПлановыеКурсыВалют.СрезПоследних(
		|			&ТекДата,
		|			Сценарий = &Сценарий
		|				И Валюта1 = &EUR
		|				И Валюта2 = &ЭквивалентнаяВалюта) КАК Б_ПлановыеКурсыВалютСрезПоследних";
		
		Запрос.УстановитьПараметр("ТекДата", Сценарий.АктуальнаяДата);
		Запрос.УстановитьПараметр("Сценарий", Сценарий);
		Запрос.УстановитьПараметр("EUR", Справочники.Валюты.НайтиПоНаименованию("EUR"));
		Запрос.УстановитьПараметр("ЭквивалентнаяВалюта", ЭквивалентнаяВалюта);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
		
			Курс = Выборка.Курс;
		
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Курс;
	
КонецФункции

Функция ЭтоПредприятиеНерезидент(Предприятие) Экспорт
	Возврат (ЗначениеЗаполнено(Предприятие.ОсновнаяВалютаУчета) И НЕ Предприятие.ОсновнаяВалютаУчета = УЧ_Сервер.НациональнаяВалюта()) ИЛИ Строка(Предприятие) = "Отель (Брюссель)";
КонецФункции // ()

// функции необходимые для корректного формирования отчетов по проекту Отель (Брюссель)
Функция ВернутьОтель() Экспорт
	Возврат Справочники.Предприятия.НайтиПоНаименованию("Отель (Брюссель)");
КонецФункции

Функция ВернутьСубконто66СчетаОтель() Экспорт
	
	КредитКазны = Справочники.ДоговорыКредитовИДепозитов.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ДоговорыКредитовИДепозитов.Ссылка
	               |ИЗ
	               |	Справочник.ДоговорыКредитовИДепозитов КАК Кредиты
	               |ГДЕ
	               |	ДоговорыКредитовИДепозитов.Предприятие = &Отель
	               |	И ДоговорыКредитовИДепозитов.Наименование = ""Кредит казны""
	               |	И ДоговорыКредитовИДепозитов.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("Отель", ВернутьОтель());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		КредитКазны = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат КредитКазны;
	
КонецФункции

Функция ПолучитьОбщийМакетСервер(ИмяМакета) Экспорт
	Возврат ПолучитьОбщийМакет(ИмяМакета);
КонецФункции

Функция ПолучитьТабДокОтступ() Экспорт
	
	ТабДокОтступ = Новый ТабличныйДокумент;
	МакетОтступ = ПолучитьОбщийМакет("РезультатыСогласования");
	ОбластьОтступа = МакетОтступ.ПолучитьОбласть("ОтступДляБюджета");
	ТабДокОтступ.Вывести(ОбластьОтступа);

	Возврат ТабДокОтступ;
	
КонецФункции

Функция СформироватьТабДокДляСогласователейВалюта(ТабДокРецензенты, ТабДокОтчетПоказатели, ТабДокКорректировки, ТабДокОтступ, ТабДокОтчетФР, ТабДокОтчетФР_ЭВ, ТабДокОтчетДДС, ТабДокОтчетДДС_ЭВ, КорректировочныйБюджет) Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	//ТабДок.Присоединить(ТабДокФРПроекта);
	ТабДок.Вывести(ТабДокОтчетПоказатели);
	Если КорректировочныйБюджет Тогда
		ТабДок.Вывести(ТабДокКорректировки);
	КонецЕсли;
	ТабДок.Вывести(ТабДокОтступ);
	ТабДок.Вывести(ТабДокОтчетФР);
	Если Не ТабДокОтчетФР_ЭВ = Неопределено Тогда
		ТабДок.Вывести(ТабДокОтчетФР_ЭВ);
	КонецЕсли;
	//ТабДок.Вывести(ТабДокОтступ);
	ТабДок.Вывести(ТабДокОтчетДДС);
	ТабДок.Вывести(ТабДокОтступ);
	Если Не ТабДокОтчетДДС_ЭВ = Неопределено Тогда
		ТабДок.Вывести(ТабДокОтчетДДС_ЭВ);
		ТабДок.Вывести(ТабДокОтступ);
	КонецЕсли;
	ТабДок.Вывести(ТабДокРецензенты);
	
	Возврат ТабДок;
	
КонецФункции

Функция ВернутьЗначениеИзВременногоХранилища(АдресВХ) Экспорт
	Возврат Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресВХ));
КонецФункции

Процедура ЗаполнитьХранилищеТабДокаТекущегоБП(ТекущийБП, РеквизитСХранилищем) Экспорт
	
	БПОбъект = ТекущийБП.ПолучитьОбъект();
	БПОбъект.ХранилищеТабДока = РеквизитСХранилищем;
	БПОбъект.Записать();
	
КонецПроцедуры	

Функция ПредставлениеНоменклатурыДляФР(ТекНом) Экспорт
	
	ПредставлениеН = "";
	
	Если ЗначениеЗаполнено(ТекНом) Тогда
		ПредставлениеН = ПредставлениеН + Строка(ТекНом) + " (чистая цена / количество) Прибыль от реализации:";
	Иначе
		ПредставлениеН = ПредставлениеН + "<...>" + " (чистая цена / количество) Прибыль от реализации:";
	КонецЕсли;
	
	Возврат ПредставлениеН;
	
КонецФункции

Функция ВернутьПредприятиеПоНаименованию(НаименованиеПредприятия) Экспорт
	Возврат Справочники.Предприятия.НайтиПоНаименованию(НаименованиеПредприятия);
КонецФункции
// 

//Подписки на событие для регистрации изменений{
&НаСервере
Процедура ПередЗаписьюСправочникаРегистрацияИзмененияОбъектовПередЗаписью(Источник, Отказ) Экспорт
	
	ЗаписатьИзмененныеРеквизитыОбъекта(Источник, Ложь);
	
	//Если Константы.ИспользоватьБизнесПроцессПроверкиКонтрагентов.Получить() Тогда //используются проверки при создании элементов справочников
	//	ПроверитьРеквизитыНаСогласованностьЭлементов(Источник, Отказ);	
	//КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюДокументаРегистрацияИзмененияОбъектовПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	//Если Не ОбщегоНазначенияПовтИсп.ЭтоБазаСпирт() Тогда
	//	Отказ = ПроверитьДокументНаВозможностьЗаписиПоОрганизации(Источник);	
	//	Если Отказ Тогда
	//		Сообщить("С 03.10.2014 данный тип документов ведется в новой базе");
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	
	ЗаписатьИзмененныеРеквизитыОбъекта(Источник, Истина);
	
	//Если Константы.ИспользоватьБизнесПроцессПроверкиКонтрагентов.Получить() Тогда //используются проверки при создании элементов справочников
	//	ПроверитьРеквизитыНаСогласованностьЭлементов(Источник, Отказ);	
	//КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиСправочникаДокументаРегистрацияНовогоОбъектаПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("ЭтоНовый") И Источник.ДополнительныеСвойства.ЭтоНовый = Истина Тогда
		ЗаписатьВводНовогоДокументаСправочника(Источник);		
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("Проведен") Тогда
		Источник.ДополнительныеСвойства.Удалить("Проведен");
		Если Источник.Проведен Тогда
			ЗаписатьПроведениеДокумента(Источник, Истина);
		Иначе	
			ЗаписатьПроведениеДокумента(Источник, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("НеПроведен") Тогда
		Источник.ДополнительныеСвойства.Удалить("НеПроведен");
		Если Источник.Проведен Тогда
			ЗаписатьПроведениеДокумента(Источник, Истина);	
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьРеквизитыНаСогласованностьЭлементов(Источник, Отказ);	
	
	УстановитьПроверкуДокумента(Источник);
	
КонецПроцедуры

// Производит запись (или отказывает в записи) значений измененных реквизитов объекта
//	Вызывается перед записью справочника (документа)
//
&НаСервере
Процедура ЗаписатьИзмененныеРеквизитыОбъекта(Источник, ЭтоДокумент = Ложь) Экспорт
	
	МетаданныеИсточника = Источник.Метаданные();
	
	РегистрСписокОбъектов	= РегистрыСведений.ОбъектыДляРегистрацииИзмененийИБ;
	Отбор					= Новый Структура("Объект", МетаданныеИсточника.ПолноеИмя());
	
	НеобходимаРегистрация = РегистрСписокОбъектов.Получить(Отбор)["Регистрировать"];
	
	Если Не НеобходимаРегистрация Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.Ссылка.Пустая() Тогда
		// Потом выловим это свойство в событии при записи - для регистрации нового 
		Если Не Источник.ДополнительныеСвойства.Свойство("ЭтоНовый") Тогда
			Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если ЭтоДокумент Тогда
		Если Источник.Проведен Тогда
			Источник.ДополнительныеСвойства.Вставить("Проведен");
		Иначе
			Источник.ДополнительныеСвойства.Вставить("НеПроведен");
		КонецЕсли;
	КонецЕсли;
	
	СсылкаНаИсточник		= Источник.Ссылка;
	Период					= ТекущаяДата();	
	ТипДействияПользователя = "Изменение";
	Пользователь			= ПараметрыСеанса.ТекущийПользователь;
	
	// Регистрация изменений в реквизитах
	ИмяРегистраСведений		= "ИзмененияРеквизитовОбъектовИБ";
	СтруктураЗаписиРегистра	= Новый Структура("Период,Объект,ИмяРеквизита,ИмяТабличнойЧасти,НомерСтрокиТЧ,СтароеЗначение,НовоеЗначение,ТипДействияПользователя,Пользователь",
	Период, СсылкаНаИсточник, "", "", Неопределено,,, ТипДействияПользователя, Пользователь);
	
	ЕстьИзменения = Ложь;
	
	Для Каждого Реквизит Из МетаданныеИсточника.Реквизиты Цикл
		ИмяРеквизита = Реквизит.Имя;
		Если ТипЗнч(СсылкаНаИсточник[ИмяРеквизита]) = Тип("ХранилищеЗначения") Или ИмяРеквизита = "Редактор" Тогда
			Продолжить;
		КонецЕсли;	
		Если Не СсылкаНаИсточник[ИмяРеквизита] = Источник[ИмяРеквизита] Тогда
			СтруктураЗаписиРегистра.ИмяРеквизита			= ИмяРеквизита;
			СтруктураЗаписиРегистра.СтароеЗначение			= СсылкаНаИсточник	[ИмяРеквизита];
			СтруктураЗаписиРегистра.НовоеЗначение			= Источник			[ИмяРеквизита];
			СтруктураЗаписиРегистра.ТипДействияПользователя	= ТипДействияПользователя;
			
			ДобавитьЗаписьВРегистрСведений(СтруктураЗаписиРегистра, ИмяРегистраСведений);
			ЕстьИзменения = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Реквизит Из МетаданныеИсточника.СтандартныеРеквизиты Цикл
		ИмяРеквизита = Реквизит.Имя;
		Если Не СсылкаНаИсточник[ИмяРеквизита] = Источник[ИмяРеквизита] Тогда
			НовоеЗначение			= Источник[ИмяРеквизита];
			ТипДействияПользователя	= "Изменение";
			
			СтруктураЗаписиРегистра.ИмяРеквизита	= ИмяРеквизита;
			СтруктураЗаписиРегистра.СтароеЗначение	= СсылкаНаИсточник[ИмяРеквизита];
			СтруктураЗаписиРегистра.НовоеЗначение	= НовоеЗначение;
			
			Если ИмяРеквизита = "ПометкаУдаления" Тогда
				ТипДействияПользователя = ?(НовоеЗначение, "ПометкаНаУдаление", "СнятиеПометкиНаУдаление");
			ИначеЕсли ИмяРеквизита = "Родитель" Тогда
				ТипДействияПользователя = "Перенос в другую группу";
			КонецЕсли;
			
			СтруктураЗаписиРегистра.ТипДействияПользователя = ТипДействияПользователя;
			
			ДобавитьЗаписьВРегистрСведений(СтруктураЗаписиРегистра, ИмяРегистраСведений);
			ЕстьИзменения = Истина;
		КонецЕсли;
	КонецЦикла;
	
	// Табличные части
	Для Каждого ТЧ Из МетаданныеИсточника.ТабличныеЧасти Цикл
		ИмяТабличнойЧасти = ТЧ.Имя;
		
		ДанныеТЧОбъекта	= Источник			[ИмяТабличнойЧасти];
		ДанныеТЧСсылки	= СсылкаНаИсточник	[ИмяТабличнойЧасти];
		
		КоличествоСтрокВТЧОбъекта	= ДанныеТЧОбъекта	.Количество();
		КоличествоСтрокВТЧСсылки	= ДанныеТЧСсылки	.Количество();
		
		СтруктураЗаписиРегистра.ИмяТабличнойЧасти = ИмяТабличнойЧасти;
		
		// Обходим каждую строку
		КоличествоИзменений = 0;
		Для НомерСтрокиТЧ = 1 По Макс(КоличествоСтрокВТЧОбъекта, КоличествоСтрокВТЧСсылки) Цикл
			КоличествоИзменений = КоличествоИзменений + 1;
			
			Если КоличествоИзменений > 100 Тогда //много изменений
				СтруктураЗаписиРегистра.ИмяРеквизита	= "";
				СтруктураЗаписиРегистра.СтароеЗначение	= "";
				СтруктураЗаписиРегистра.НовоеЗначение	= "";
				СтруктураЗаписиРегистра.НомерСтрокиТЧ	= НомерСтрокиТЧ;
				ТипДействияПользователя	= "Более 100 измений в ТЧ, запись прервана";
				СтруктураЗаписиРегистра.ТипДействияПользователя = ТипДействияПользователя;
				ДобавитьЗаписьВРегистрСведений(СтруктураЗаписиРегистра, ИмяРегистраСведений);
				ЕстьИзменения = Истина;
				Прервать;
			КонецЕсли;
				
			СтрокаТЧОбъекта	= ?(КоличествоСтрокВТЧОбъекта< НомерСтрокиТЧ, Неопределено, ДанныеТЧОбъекта[НомерСтрокиТЧ-1]);
			СтрокаТЧСсылки	= ?(КоличествоСтрокВТЧСсылки < НомерСтрокиТЧ, Неопределено, ДанныеТЧСсылки [НомерСтрокиТЧ-1]);
			
			ДобавлениеСтрок = СтрокаТЧСсылки = Неопределено;
			УдалениеСтрок = СтрокаТЧОбъекта = Неопределено;
			
			Если ДобавлениеСтрок Тогда //нет смысла пореквизитно, т.к. алгоритм сравнения некорректен
				ТипДействияПользователя = "Добавление строк";
				СтруктураЗаписиРегистра.ИмяРеквизита	= "";
				СтруктураЗаписиРегистра.СтароеЗначение	= "";
				СтруктураЗаписиРегистра.НовоеЗначение	= "";
				СтруктураЗаписиРегистра.НомерСтрокиТЧ	= НомерСтрокиТЧ;
				СтруктураЗаписиРегистра.ТипДействияПользователя = ТипДействияПользователя;
				ДобавитьЗаписьВРегистрСведений(СтруктураЗаписиРегистра, ИмяРегистраСведений);
				ЕстьИзменения = Истина;
				Продолжить;
			КонецЕсли;
			Если УдалениеСтрок Тогда //нет смысла пореквизитно, т.к. алгоритм сравнения некорректен
				ТипДействияПользователя = "Удаление строк";
				СтруктураЗаписиРегистра.ИмяРеквизита	= "";
				СтруктураЗаписиРегистра.СтароеЗначение	= "";
				СтруктураЗаписиРегистра.НовоеЗначение	= "";
				СтруктураЗаписиРегистра.НомерСтрокиТЧ	= НомерСтрокиТЧ;
				СтруктураЗаписиРегистра.ТипДействияПользователя = ТипДействияПользователя;
				ДобавитьЗаписьВРегистрСведений(СтруктураЗаписиРегистра, ИмяРегистраСведений);
				ЕстьИзменения = Истина;
				Продолжить;
			КонецЕсли;

			// Обходим реквизиты строки
			Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
				ИмяРеквизита = Реквизит.Имя;
				Если УдалениеСтрок Или Не СтрокаТЧСсылки[ИмяРеквизита] = СтрокаТЧОбъекта[ИмяРеквизита] Тогда
					СтруктураЗаписиРегистра.ИмяРеквизита	= ИмяРеквизита;
					СтруктураЗаписиРегистра.СтароеЗначение	= ?(СтрокаТЧСсылки = Неопределено, "", СтрокаТЧСсылки [ИмяРеквизита]);
					СтруктураЗаписиРегистра.НовоеЗначение	= ?(СтрокаТЧОбъекта= Неопределено, "", СтрокаТЧОбъекта[ИмяРеквизита]);
					СтруктураЗаписиРегистра.НомерСтрокиТЧ	= НомерСтрокиТЧ;
					ТипДействияПользователя	= "Изменение строки";
					СтруктураЗаписиРегистра.ТипДействияПользователя = ТипДействияПользователя;
					ДобавитьЗаписьВРегистрСведений(СтруктураЗаписиРегистра, ИмяРегистраСведений);
					ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	//установка модифицированности для обработки УУ
	сабОбщегоНазначенияБУХ.УстановитьМодифицированностьУУДокумента(Источник, Источник.Ссылка, Неопределено, ЕстьИзменения);
	
КонецПроцедуры	

// Добавляет одну запись в регистр сведений по переданным значениям структуры
//
// Параметры:
//  СтруктураЗаписи - Структура - структура по значениям которой необходимо создать набор записей и заполнить этот набор
//  ИмяРегистра     - Строка - имя регистра сведений, в который необходимо добавить запись
// 
&НаСервере
Процедура ДобавитьЗаписьВРегистрСведений(СтруктураЗаписи, ИмяРегистра) Экспорт
	
	НаборЗаписей = СоздатьНаборЗаписейРегистраСведений(СтруктураЗаписи, ИмяРегистра);
	
	// добавляем только одну запись в новый набор записей
	НоваяЗапись = НаборЗаписей.Добавить();
	
	// заполняем значения свойств записи из переданной структуры
	ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураЗаписи);
	
	Если ТипЗнч(СтруктураЗаписи.Объект) = Тип("СправочникСсылка.Контрагенты") И ИмяРегистра = "ИзмененияРеквизитовОбъектовИБ" И 
		(РольДоступна("РасчетныйОтдел") ИЛИ РольДоступна("ОФК")) Тогда
		НоваяЗапись.ИзменениеПроверено = Истина;		
	КонецЕсли;
	
	// записываем набор записей
	НаборЗаписей.Записать();
	
КонецПроцедуры // ДобавитьЗаписьВРегистрСведений

// Создает набор записей регистра сведений по переданным значениям структуры
//
// Параметры:
//  СтруктураЗаписи - Структура - структура по значениям которой необходимо создать набор записей и заполнить этот набор
//  ИмяРегистра     - Строка - имя регистра сведений
// 
&НаСервере
Функция СоздатьНаборЗаписейРегистраСведений(СтруктураЗаписи, ИмяРегистра) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	
	// создаем набор записей регистра
	НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	
	// устанавливаем отбор по измерениям регистра
	Для Каждого Измерение ИЗ МетаданныеРегистра.Измерения Цикл
		
		// если задано значение в структуре, то отбор устанавливаем
		Если СтруктураЗаписи.Свойство(Измерение.Имя) Тогда
			
			НаборЗаписей.Отбор[Измерение.Имя].Установить(СтруктураЗаписи[Измерение.Имя]);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// устанавливаем отбор по стандартным реквизитам регистра (периоду)
	Для Каждого Реквизит ИЗ МетаданныеРегистра.СтандартныеРеквизиты Цикл
		
		// если задано значение в структуре, то отбор устанавливаем
		Если СтруктураЗаписи.Свойство(Реквизит.Имя) Тогда
			
			НаборЗаписей.Отбор[Реквизит.Имя].Установить(СтруктураЗаписи[Реквизит.Имя]);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НаборЗаписей;
	
КонецФункции // СоздатьНаборЗаписейРегистраСведений

// Регистрирует ввод нового элемента справочника (нового документа) в системе регистрации изменений
// реквизитов объектов. Если у объекта в "дополнительных свойствах" есть ключ "ЭтоНовый" (устанавливается
// в подписке на событие "ПерезЗаписью"), то считается, что был ввод нового элемента.
//
&НаСервере
Процедура ЗаписатьВводНовогоДокументаСправочника(Источник, ЭтоДокумент = Ложь)
	
	МетаданныеИсточника = Источник.Метаданные();
	
	РегистрСписокОбъектов	= РегистрыСведений.ОбъектыДляРегистрацииИзмененийИБ;
	Отбор					= Новый Структура("Объект", МетаданныеИсточника.ПолноеИмя());
	
	НеобходимаРегистрация = РегистрСписокОбъектов.Получить(Отбор)["Регистрировать"];
	
	Если Не НеобходимаРегистрация Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаИсточник		= Источник.Ссылка;
	Период					= ТекущаяДата();
	ТипДействияПользователя = "Ввод нового";
	Пользователь			= ПараметрыСеанса.ТекущийПользователь;
	
	СтруктураЗаписиРегистра	= Новый Структура("Период,Объект,ИмяРеквизита,ИмяТабличнойЧасти,НомерСтрокиТЧ,СтароеЗначение,НовоеЗначение,ТипДействияПользователя,Пользователь",
	Период, СсылкаНаИсточник, "", "", Неопределено,,, ТипДействияПользователя, Пользователь);
	
	ДобавитьЗаписьВРегистрСведений(СтруктураЗаписиРегистра, "ИзмененияРеквизитовОбъектовИБ");
	
КонецПроцедуры // ЗаписатьВводНовогоДокументаСправочника

// Регистрирует проведение/отмену проведения документа в системе регистрации изменений
// реквизитов объектов
//
&НаСервере
Процедура ЗаписатьПроведениеДокумента(Источник, Проведение)
	
	МетаданныеИсточника = Источник.Метаданные();
	
	РегистрСписокОбъектов	= РегистрыСведений.ОбъектыДляРегистрацииИзмененийИБ;
	Отбор					= Новый Структура("Объект", МетаданныеИсточника.ПолноеИмя());
	
	НеобходимаРегистрация = РегистрСписокОбъектов.Получить(Отбор)["Регистрировать"];
	
	Если Не НеобходимаРегистрация Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаИсточник		= Источник.Ссылка;
	Период					= ТекущаяДата();
	Если Проведение Тогда
		ТипДействияПользователя = "Проведение";
	Иначе
		ТипДействияПользователя = "Отмена проведения";
	КонецЕсли;	
	Пользователь			= ПараметрыСеанса.ТекущийПользователь;
	
	СтруктураЗаписиРегистра	= Новый Структура("Период,Объект,ИмяРеквизита,ИмяТабличнойЧасти,НомерСтрокиТЧ,СтароеЗначение,НовоеЗначение,ТипДействияПользователя,Пользователь",
	Период, СсылкаНаИсточник, "", "", Неопределено,,, ТипДействияПользователя, Пользователь);
	
	ДобавитьЗаписьВРегистрСведений(СтруктураЗаписиРегистра, "ИзмененияРеквизитовОбъектовИБ");
	
КонецПроцедуры // ЗаписатьВводНовогоДокументаСправочника

//Проверяет реквизиты документа/справочника такие как: контрагент, номенклатура и пр. на момент согласованности этих элементов
//
&НаСервере
Процедура ПроверитьРеквизитыНаСогласованностьЭлементов(Источник, Отказ)
	
	//Проверяем контрагента, отказываемся от записи, если элемент не проверен
	ТипКонтрагент = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	
	ТаблицаПроверяемыхРекувизитов = Новый ТаблицаЗначений;
	ТаблицаПроверяемыхРекувизитов.Колонки.Добавить("ИмяРеквизита", Новый ОписаниеТипов("Строка"));
	ТаблицаПроверяемыхРекувизитов.Колонки.Добавить("ЗначениеРеквизита", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаПроверяемыхРекувизитов.Колонки.Добавить("ИмяТабличнойЧасти", Новый ОписаниеТипов("Строка"));
	ТаблицаПроверяемыхРекувизитов.Колонки.Добавить("НомерСтрокиТЧ", Новый ОписаниеТипов("Строка"));
	
	Для Каждого Реквизит Из Источник.Метаданные().Реквизиты Цикл
		Если Реквизит.Тип = ТипКонтрагент Или Реквизит.Тип.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
			Если Не ТипЗнч(Источник[Реквизит.Имя]) = Тип("СправочникСсылка.Контрагенты") Тогда
				Продолжить;
			КонецЕсли;	
			СтрокаТЗПроверяемыхРеквизитов 					= ТаблицаПроверяемыхРекувизитов.Добавить();
			СтрокаТЗПроверяемыхРеквизитов.ИмяРеквизита 		= Реквизит.Синоним;
			СтрокаТЗПроверяемыхРеквизитов.ЗначениеРеквизита = Источник[Реквизит.Имя];
		КонецЕсли;
	КонецЦикла;	
	
	Для Каждого ТабличнаяЧасть Из Источник.Метаданные().ТабличныеЧасти Цикл
		Для Каждого РеквизитТЧ Из ТабличнаяЧасть.Реквизиты Цикл
			Если РеквизитТЧ.Тип = ТипКонтрагент Или РеквизитТЧ.Тип.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
				Для Каждого СтрокаТЧИсточника Из Источник[ТабличнаяЧасть.Имя] Цикл
					Если Не ТипЗнч(СтрокаТЧИсточника[РеквизитТЧ.Имя]) = Тип("СправочникСсылка.Контрагенты") Тогда
						Продолжить;
					КонецЕсли;	
					СтрокаТЗПроверяемыхРеквизитов 					= ТаблицаПроверяемыхРекувизитов.Добавить();
					СтрокаТЗПроверяемыхРеквизитов.ИмяРеквизита 		= РеквизитТЧ.Синоним;
					СтрокаТЗПроверяемыхРеквизитов.ЗначениеРеквизита = СтрокаТЧИсточника[РеквизитТЧ.Имя];
					СтрокаТЗПроверяемыхРеквизитов.ИмяТабличнойЧасти = ТабличнаяЧасть.Синоним;
					СтрокаТЗПроверяемыхРеквизитов.НомерСтрокиТЧ 	= Источник[ТабличнаяЧасть.Имя].Индекс(СтрокаТЧИсточника) + 1;
				КонецЦикла;	
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПроверяемыхРеквизитов.ИмяРеквизита,
	|	ТаблицаПроверяемыхРеквизитов.ЗначениеРеквизита,
	|	ТаблицаПроверяемыхРеквизитов.ИмяТабличнойчасти,
	|	ТаблицаПроверяемыхРеквизитов.НомерСтрокиТЧ
	|ПОМЕСТИТЬ ВТ_ПроверяемыеРеквизиты
	|ИЗ
	|	&ТаблицаПроверяемыхРеквизитов КАК ТаблицаПроверяемыхРеквизитов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПроверяемыеРеквизиты.ИмяРеквизита,
	|	ВТ_ПроверяемыеРеквизиты.ЗначениеРеквизита,
	|	ВТ_ПроверяемыеРеквизиты.ИмяТабличнойчасти,
	|	ВТ_ПроверяемыеРеквизиты.НомерСтрокиТЧ,
	|	ЕСТЬNULL(ПроверкаОбъектовБД.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусПриПроверкеОбъектовБД.Проверен)) КАК Статус
	|ИЗ
	|	ВТ_ПроверяемыеРеквизиты КАК ВТ_ПроверяемыеРеквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроверкаОбъектовБД КАК ПроверкаОбъектовБД
	|		ПО ВТ_ПроверяемыеРеквизиты.ЗначениеРеквизита = ПроверкаОбъектовБД.Объект
	|ГДЕ
	|	ЕСТЬNULL(ПроверкаОбъектовБД.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусПриПроверкеОбъектовБД.Проверен)) = ЗНАЧЕНИЕ(Перечисление.СтатусПриПроверкеОбъектовБД.Отклонен)";
	Запрос.УстановитьПараметр("ТаблицаПроверяемыхРеквизитов", ТаблицаПроверяемыхРекувизитов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;	
	
	Отказ = Истина;
	ВыборкаОтклоненныхРеквизитов = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаОтклоненныхРеквизитов.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаОтклоненныхРеквизитов.НомерСтрокиТЧ) Тогда
			Сообщить("В строке " + ВыборкаОтклоненныхРеквизитов.НомерСтрокиТЧ + " табличной части " + ВыборкаОтклоненныхРеквизитов.ИмяТабличнойчасти + " реквизит " + ВыборкаОтклоненныхРеквизитов.ИмяРеквизита + " - выбран отклоненный элемент" + "(" + ВыборкаОтклоненныхРеквизитов.ЗначениеРеквизита + ")! Запись невозможна!");
		Иначе
			Сообщить("В реквизите документа " + ВыборкаОтклоненныхРеквизитов.ИмяРеквизита + "(" + ВыборкаОтклоненныхРеквизитов.ЗначениеРеквизита + ") выбран отклоненный элемент! Запись невозможна!");
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	
//}

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   * Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   * Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   * ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                    Обработчики обновления таких библиотек должны быть вызваны ранее
//                                    обработчиков обновления данной библиотеки.
//                                    При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                    порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                    в процедуре ПриДобавленииПодсистем общего модуля
//                                    ПодсистемыКонфигурацииПереопределяемый.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = "САБ_УправлениеБизнесом";
	Описание.Версия = "1.0";
	
КонецПроцедуры

Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	СтандартнаяОбработка = Истина;
КонецПроцедуры

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре.
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Монопольно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Обработчики этого события для подсистем БСП добавляются через подписку на служебное событие:
	// "СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления".
	//
	// Процедуры обработки этого события всех подсистем БСП имеют то же имя, что и эта процедура,
	// но размещены в своих подсистемах.
	// Чтобы найти процедуры можно выполнить глобальный поиск по имени процедуры.
	// Чтобы найти модули в которых размещены процедуры, можно выполнить поиск по имени события.
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления");
	
	Для каждого Обработчик Из ОбработчикиСобытия Цикл
		Если Обработчик.Подсистема <> "СтандартныеПодсистемы" Тогда
			Продолжить;
		КонецЕсли;
		Обработчик.Модуль.ПриДобавленииОбработчиковОбновления(Обработчики);
	КонецЦикла;
	
	Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "1.0.0.0";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "БюджетныйНаСервере.НачальноеЗаполнениеИБ";
	
	
КонецПроцедуры

Процедура НачальноеЗаполнениеИБ() Экспорт
	сабОбновлениеВерсииИБ.НачальноеЗаполнениеИБПараметрыСчетов();
	//сабОбновлениеВерсииИБ.НачальноеЗаполнениеИБВалютаУчета();
	//сабОбновлениеВерсииИБ.НачальноеЗаполнениеВидовКонтактнойИнформации();
	сабОбновлениеВерсииИБ.НачальноеЗаполнениеПапокФайлов();
	сабОбновлениеВерсииИБ.ЗаполнитьСтавкиНДС();
	сабОбновлениеВерсииИБ.сабСоздатьПоставляемыеГруппыДоступа();
	сабОбновлениеВерсииИБ.СоздатьСтатьиБаланса();
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
	// Обработчики этого события для подсистем БСП добавляются через подписку на служебное событие:
	// "СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПередОбновлениемИнформационнойБазы".
	//
	// Процедуры обработки этого события всех подсистем БСП имеют то же имя, что и эта процедура,
	// но размещены в своих подсистемах.
	// Чтобы найти процедуры можно выполнить глобальный поиск по имени процедуры.
	// Чтобы найти модули в которых размещены процедуры, можно выполнить поиск по имени события.
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПередОбновлениемИнформационнойБазы");
	
	Для каждого Обработчик Из ОбработчикиСобытия Цикл
		Если Обработчик.Подсистема <> "СтандартныеПодсистемы" Тогда
			Продолжить;
		КонецЕсли;
		Обработчик.Модуль.ПередОбновлениемИнформационнойБазы();
	КонецЦикла;
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - если установить Истина, то будет выведена форма
//                                с описанием обновлений. По умолчанию, Истина.
//                                Возвращаемое значение.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
// Пример обхода выполненных обработчиков обновления:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
	// Вызываем процедуры-обработчики служебного события "ПослеОбновленияИнформационнойБазы".
	// (Для быстрого перехода к процедурам-обработчикам выполнить глобальный поиск по имени события.).
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПослеОбновленияИнформационнойБазы");
	
	Для каждого Обработчик Из ОбработчикиСобытия Цикл
		Если Обработчик.Подсистема <> "СтандартныеПодсистемы" Тогда
			Продолжить;
		КонецЕсли;
		Обработчик.Модуль.ПослеОбновленияИнформационнойБазы(ПредыдущаяВерсия, ТекущаяВерсия,
			ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(ОбработчикиПерехода) Экспорт
	
КонецПроцедуры

Процедура ПриЗавершенииПереходаСДругойПрограммы(ПредыдущееИмяКонфигурации, ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	ПредыдущееИмяКонфигурации = "САБ_УправлениеБизнесом";
	ПредыдущаяВерсияКонфигурации = "0.9";

КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры 

// проверяет доступность роли у пользователя и у всех, кого он замещает
Функция РольДоступнаПользователю(Роль) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	РольДоступнаПользователю = Ложь;
	
	Если РольДоступна(Роль) Тогда
		РольДоступнаПользователю = Истина;
	Иначе
		
		Для Каждого ТекПользователь Из ПараметрыСеанса.ДоступныеПользователи Цикл
			ТекПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ТекПользователь.Наименование);
			
			Если Не ТекПользовательИБ = Неопределено Тогда
				
				Если ТекПользовательИБ.Роли.Содержит(Метаданные.Роли.Найти(Роль)) Тогда
					РольДоступнаПользователю = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РольДоступнаПользователю;
	
КонецФункции

Процедура ЗагрузитьКурсыВалютРегл() Экспорт
	
	ТекДата = ТекущаяДата();
	СтатусСегодня = ЗагрузитьКурсыВалютНаДату(ТекДата, Истина);
	
	//После 15:00 загрузим также курсы на завтра
	СтатусНаЗавтра = "Не выполнялось";
	
	Если Час(ТекДата) >= 15 Тогда 
		СтатусНаЗавтра = ЗагрузитьКурсыВалютНаДату(ТекДата + 86400, Ложь);
	КонецЕсли;
	
	// рассчитываем кросс-курсы на основании загруженных курсов
	РассчитатьКроссКурсыПоЗагруженнымКурсам(ТекДата, ТекДата);

	ТекстОповещения = "Выполнена процедура ЗагрузитьКурсыВалютРегл(), 
	|СтатусСегодня = " + СтатусСегодня + ", 
	|СтатусНаЗавтра = " + СтатусНаЗавтра + ", 
	|Пользователь = " + ПараметрыСеанса.ТекущийПользователь + ",
	|Время = " + ТекДата;
	//БПСервер.СоздатьОповещение(Справочники.Пользователи.НайтиПоНаименованию("Ходин Е", Истина), ТекстОповещения, "Регламентная процедура");
	
КонецПроцедуры

Функция ЗагрузитьКурсыВалютНаДату(Период, знач СоздаватьДокументОстаткиПоСчетам = Ложь) Экспорт
	
	Если ТипЗнч(Период) = Тип("Дата") Тогда
		НачалоПериода = НачалоДня(Период);
		КонецПериода  = КонецДня(Период);
	ИначеЕсли ТипЗнч(Период) = Тип("СтандартныйПериод") Тогда
		НачалоПериода = Период.ДатаНачала;
		КонецПериода  = Период.ДатаОкончания;
	КонецЕсли;
	
	ЗагрузкаКурсов = Обработки.КурсыВалютРБК.Создать();
	ЗагружаемыеВалюты = РаботаСКурсамиВалют.ПолучитьМассивЗагружаемыхВалют();
	
	Для Каждого ЭлементВалюта Из ЗагружаемыеВалюты Цикл
		НоваяСтрока = ЗагрузкаКурсов.СписокВалют.Добавить();
		НоваяСтрока.Валюта = ЭлементВалюта;
		НоваяСтрока.КодВалюты = ЭлементВалюта.Код;		
	КонецЦикла;
	
	//Загрузим курсы в регистр КурсыВалют
	СтатусОперации = РаботаСКурсамиВалютКлиентСервер.ЗагрузитьКурсыВалютПоПараметрам(
				ЗагрузкаКурсов.СписокВалют,
				НачалоПериода,
				КонецПериода);
				
	//Создадим документ ОстаткиПоСчетам
	//Если СоздаватьДокументОстаткиПоСчетам И НачалоДня(НачалоПериода) = НачалоДня(КонецПериода) И НачалоДня(НачалоПериода) = НачалоДня(ТекущаяДата()) Тогда
		//Запрос = новый Запрос;
		//Запрос.Текст = "ВЫБРАТЬ
		//               |	ОстаткиПоСчетамКурсы.Ссылка,
		//               |	ОстаткиПоСчетамКурсы.НомерСтроки,
		//               |	ОстаткиПоСчетамКурсы.Валюта,
		//               |	ОстаткиПоСчетамКурсы.Курс
		//               |ИЗ
		//               |	Документ.ОстаткиПоСчетам.Курсы КАК ОстаткиПоСчетамКурсы
		//               |ГДЕ
		//               |	ОстаткиПоСчетамКурсы.Ссылка.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ) И КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
		//               |	И ОстаткиПоСчетамКурсы.Ссылка.ВидОперации = &ВидОперации
		//               |	И НЕ ОстаткиПоСчетамКурсы.Ссылка.ПометкаУдаления";
		//Запрос.УстановитьПараметр("Дата", НачалоПериода);
		//Запрос.УстановитьПараметр("ВидОперации", "Остатки для ФК");
		//РезультатЗапроса = Запрос.Выполнить();
		//
		//Если РезультатЗапроса.Пустой() Тогда
		//	ДокументОстатки = Документы.ОстаткиПоСчетам.СоздатьДокумент();
		//	ДокументОстатки.Дата = ТекущаяДата();
		//	ДокументОстатки.ВидОперации = "Остатки для ФК";
		//	ЗапросКурсы = новый Запрос;
		//	ЗапросКурсы.Текст = "ВЫБРАТЬ
		//	|	КурсыВалют.Период,
		//	|	КурсыВалют.Валюта,
		//	|	КурсыВалют.Курс,
		//	|	КурсыВалют.Кратность,
		//	|	КурсыВалют.ЛокальныйКурс
		//	|ИЗ
		//	|	РегистрСведений.КурсыВалют КАК КурсыВалют
		//	|ГДЕ
		//	|	КурсыВалют.Период = &Период
		//	|	И КурсыВалют.Валюта В(&ЗагружаемыеВалюты)";
		//	ЗапросКурсы.УстановитьПараметр("Период", НачалоДня(ТекущаяДата()));
		//	ЗапросКурсы.УстановитьПараметр("ЗагружаемыеВалюты", ЗагружаемыеВалюты);
		//	Выборка = ЗапросКурсы.Выполнить().Выбрать();
		//	
		//	Пока Выборка.Следующий() Цикл
		//		НоваяСтрока = ДокументОстатки.Курсы.Добавить();
		//		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		//	КонецЦикла;
		//	Если ДокументОстатки.Курсы.Количество() > 0 Тогда
		//		ДокументОстатки.Записать();
		//		ДокументОстатки.Автор = Справочники.Пользователи.Система;
		//		ДокументОстатки.Записать(РежимЗаписиДокумента.Проведение); //костыль: записываем 2 раза, чтобы автор был Системное
		//	КонецЕсли;
		//КонецЕсли;
		
	//КонецЕсли;
	
	Возврат СтатусОперации;
	
КонецФункции

Процедура ОбменТПЗарегистрироватьИзменениеПередЗаписью(Источник, Отказ) Экспорт

	//ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписью("ОбменУниверсальный", Источник, Отказ);
	
КонецПроцедуры

Процедура ОбменТПЗарегистрироватьИзменениеДокументаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	//ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюДокумента("ОбменУниверсальный", Источник, Отказ, РежимЗаписи, РежимПроведения);	
	
КонецПроцедуры

Процедура УстановкаПараметровСеанса(ТребуемыеПараметры) Экспорт

	Если ТребуемыеПараметры = Неопределено Тогда
		
		ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.ПустаяСсылка();
		ПараметрыСеанса.ТекущееПредприятие = Справочники.Предприятия.ПустаяСсылка();
		ПараметрыСеанса.ТекущееПодразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
		ПараметрыСеанса.ДоступныеПредприятия = Новый ФиксированныйМассив(Новый Массив);
		ПараметрыСеанса.ДоступныеПредприятияПросмотр = Новый ФиксированныйМассив(Новый Массив);
		ПараметрыСеанса.СчетчикОповещенийОЗадачах = 0;
		ПараметрыСеанса.МассивНевыполненныхЗадач = Новый ФиксированнаяСтруктура(Новый Структура("МассивЗадач, МассивВсехЗадач, МассивНовыхЗадач, НовыеЗадачи", Новый ФиксированныйМассив(Новый Массив), Новый ФиксированныйМассив(Новый Массив), Новый ФиксированныйМассив(Новый Массив), Ложь));
		ПараметрыСеанса.ДоступныеПользователи = Новый ФиксированныйМассив(Новый Массив);
		ПараметрыСеанса.ДоступныеПодразделения = Новый ФиксированныйМассив(Новый Массив);
		ПараметрыСеанса.ДоступныеИсточники = Новый ФиксированныйМассив(Новый Массив);
		ПараметрыСеанса.ДоступныеСчета = Новый ФиксированныйМассив(Новый Массив);    // di 14.03.13
		ПараметрыСеанса.ОграничиватьПодразделения = Ложь;
		ПараметрыСеанса.ОграничиватьПредприятия = Ложь;
		ПараметрыСеанса.АктивныйПользователь = "Все доступные";
		ПараметрыСеанса.ОграничиватьНаправления = Ложь;
		ПараметрыСеанса.ДоступныеНаправления = Новый ФиксированныйМассив(Новый Массив);
		ПараметрыСеанса.НеДоступныеНаправления = Новый ФиксированныйМассив(Новый Массив);
		ПараметрыСеанса.ДопПараметры = Новый ФиксированнаяСтруктура(Новый Структура);
		//ПараметрыСеанса.смсНомерСессии = 0;
		ПараметрыСеанса.РольАдминаДоступна = Ложь;
		//ПараметрыСеанса.смсПользователь = "";
		//ПараметрыСеанса.смсПароль = "";
		//ПараметрыСеанса.смсОсновнойСервер = Ложь;
		//ПараметрыСеанса.смсКорректировкаUTC = 0;
		ПараметрыСеанса.СтруктураПараметровФормСпискаДокументооборота = Новый ФиксированнаяСтруктура(Новый Структура);
		ПараметрыСеанса.УстановленРежимГорячейЛинии = Ложь;
		ПараметрыСеанса.РабочееМестоКлиента = Справочники.РабочиеМеста.ПустаяСсылка();
		//ПараметрыСеанса.АвторизованныйПользователь = Справочники.ВнешниеПользователи.ПустаяСсылка();
		//заполняем параметры сеанса
		БюджетныйНаСервере.НайтиИУстановитьПользователя(Новый Структура("Наименование", ПолноеИмяПользователя()));
		
		//ПараметрыСеанса.ИдентификаторСеансаЕГАИС = Новый УникальныйИдентификатор;
		
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьПлановыйКурсВалюты(Сценарий, Валюта1, Валюта2) Экспорт
	
	КурсВалюты = УЧ_Сервер.ПолучитьКурсВалют(Валюта1, Валюта2, Сценарий.АктуальнаяДата);
	
	НаборЗаписейУст = РегистрыСведений.Б_ПлановыеКурсыВалют.СоздатьНаборЗаписей();
	НаборЗаписейУст.Отбор.Сценарий.Установить(Сценарий);
	НаборЗаписейУст.Отбор.Валюта1.Установить(Валюта1);
	НаборЗаписейУст.Отбор.Валюта2.Установить(Валюта2);
	НаборЗаписейУст.Прочитать();
	
	НЗ = НаборЗаписейУст.Добавить();
	НЗ.Валюта1 = Валюта1;
	НЗ.Валюта2 = Валюта2;
	НЗ.Период = Сценарий.АктуальнаяДата;
	НЗ.Сценарий = Сценарий;
	НЗ.Курс = ?(КурсВалюты = 0, 1, КурсВалюты);
	НаборЗаписейУст.Записать(Ложь);	
	
КонецПроцедуры

Процедура ДокументыПроверкаЗаполненияОбработкаПроверкиЗаполнения(Источник, Отказ, ПроверяемыеРеквизиты) Экспорт
	Если Истина Тогда
		МассивКУдалению = Новый Массив;
		МассивКУдалению.Добавить("Договор");
		МассивКУдалению.Добавить("Подразделение");
		МассивКУдалению.Добавить("Контрагент");
		Для каждого ТекИмяРеквизита Из МассивКУдалению Цикл
			Если НЕ ПроверяемыеРеквизиты.Найти(ТекИмяРеквизита) = Неопределено Тогда
				ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти(ТекИмяРеквизита));			
			КонецЕсли;
		КонецЦикла; 	
	КонецЕсли;
КонецПроцедуры

Функция УчетТМЦПоПодразделениям(Предприятие) Экспорт
	Возврат Предприятие.УчетнаяПолитика.УчетТМЦПоПодразделениям;
КонецФункции // ()

Процедура УстановитьPushID(ID) Экспорт
	РегистрыСведений.PushПользователиID.УстановитьPushID(ПараметрыСеанса.ТекущийПользователь, ID);
КонецПроцедуры

Функция СериализоватьОбъект(Значение) Экспорт
	ДеревоВОбъектXDTO = СериализаторXDTO.ЗаписатьXDTO(Значение);
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку();
	ПараметрыXML = Новый ПараметрыЗаписиXML("UTF-8", "1.0", Ложь);
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ДеревоВОбъектXDTO);
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции 

Функция ДеСериализоватьОбъект(СтрокаXML) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	Попытка
		Значение = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
		ЧтениеXML.Закрыть();
	Исключение
	//	Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Значение;
	
КонецФункции

Функция ПолучитьЗадачуПоНомеру(Номер) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Задача.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Задача КАК Задача
	|ГДЕ
	|	Задача.Номер = &Номер";
	
	Запрос.УстановитьПараметр("Номер", Номер);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;		
	КонецЦикла;
КонецФункции // ()

Процедура РассчитатьКроссКурсыПоЗагруженнымКурсам(НачалоПериодаЗагрузки, ОкончаниеПериодаЗагрузки) Экспорт
	
	ВыборкаВалюта1 = Справочники.Валюты.Выбрать();
	ВыборкаВалюта2 = Справочники.Валюты.Выбрать();
	НацВалюта = УЧ_Сервер.НациональнаяВалюта();
	
	Пока ВыборкаВалюта1.Следующий() Цикл
		
		Если ВыборкаВалюта1.Ссылка = НацВалюта Тогда
			Продолжить;
		КонецЕсли;
					
			Пока ВыборкаВалюта2.Следующий() Цикл
				
				Если ВыборкаВалюта2.Ссылка = ВыборкаВалюта1.Ссылка Или ВыборкаВалюта2.Ссылка = НацВалюта Тогда
					Продолжить;
				КонецЕсли;
				
				ДатаПолученияКурса = КонецДня(НачалоПериодаЗагрузки);
				
				Пока ДатаПолученияКурса <= КонецДня(ОкончаниеПериодаЗагрузки) Цикл
					
					ПоказателиВалюты1 = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаПолученияКурса, Новый Структура("Валюта, БазоваяВалюта", ВыборкаВалюта1.Ссылка, НацВалюта));
					ПоказателиВалюты2 = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаПолученияКурса, Новый Структура("Валюта, БазоваяВалюта", ВыборкаВалюта2.Ссылка, НацВалюта));
					КурсВалюты1 = ?(ЗначениеЗаполнено(ПоказателиВалюты1.Курс), ПоказателиВалюты1.Курс, 0);
					КурсВалюты2 = ?(ЗначениеЗаполнено(ПоказателиВалюты2.Курс), ПоказателиВалюты2.Курс, 0);
					
					Если КурсВалюты2 > 0 Тогда
						ЗаписьКурсовВалют = РегистрыСведений.КурсыВалют.СоздатьМенеджерЗаписи();
						ЗаписьКурсовВалют.Валюта   = ВыборкаВалюта1.Ссылка;
						ЗаписьКурсовВалют.БазоваяВалюта   = ВыборкаВалюта2.Ссылка;
						ЗаписьКурсовВалют.Период    = ДатаПолученияКурса;
						ЗаписьКурсовВалют.Курс      = КурсВалюты1 / КурсВалюты2;
						ЗаписьКурсовВалют.Кратность = 1;
						ЗаписьКурсовВалют.Записать();
					КонецЕсли;	
					
					ДатаПолученияКурса = ДатаПолученияКурса + 60*60*24;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;

КонецПроцедуры

Функция ДокументОбработан(ДокументБУ)
	
	Если Не ЗначениеЗаполнено(ДокументБУ) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РегистрСведенийсабОбработкаДокументов.ДокументУУ КАК ДокументУУ
	               |ИЗ
	               |	РегистрСведений.сабОбработкаДокументов КАК РегистрСведенийсабОбработкаДокументов
	               |ГДЕ
	               |	РегистрСведенийсабОбработкаДокументов.ДокументБУ = &ДокументБУ";
	Запрос.УстановитьПараметр("ДокументБУ", ДокументБУ);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если ЗначениеЗаполнено(Выборка.ДокументУУ) Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции
