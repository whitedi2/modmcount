
Функция ПолучитьДатуЗапрета(знач Объект, знач Пользователь = Неопределено) Экспорт
	
	Возврат Дата('00010101'); //БУ_заглушка
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДатыЗапретаИзмененияСрезПоследних.ДатаЗапрета
	               |ИЗ
	               |	РегистрСведений.ДатыЗапретаИзменения.СрезПоследних(&ТекДата, ) КАК ДатыЗапретаИзмененияСрезПоследних
	               |ГДЕ
	               |	ДатыЗапретаИзмененияСрезПоследних.Объект = ЗНАЧЕНИЕ(Перечисление.ВидыНазначенияДатЗапрета.ДляВсехИнформационныхБаз)
	               |	И ДатыЗапретаИзмененияСрезПоследних.Пользователь = ЗНАЧЕНИЕ(Перечисление.ВидыНазначенияДатЗапрета.ДляВсехПользователей)";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОбщаяДатаЗапрета = Выборка.ДатаЗапрета;
	КонецЕсли;
	ОбщаяДатаЗапрета = ?(ЗначениеЗаполнено(ОбщаяДатаЗапрета), ОбщаяДатаЗапрета, УЧ_Сервер.ДатаГлобальногоЗапрета());   
	
	Если ТипЗнч(Объект) <> Тип("РегистрБухгалтерииЗапись.Учетный") И ТипЗнч(Объект) <> Тип("РегистрБухгалтерииВыборка.Учетный") 
		И ТипЗнч(Объект) <> Тип("ДанныеФормыСтруктура") 
		И Не ЗначениеЗаполнено(Объект) Тогда
			Возврат КонецДня(ОбщаяДатаЗапрета);
	КонецЕсли;
	
	Если Пользователь = Неопределено Тогда
		Пользователь = сабОбщегоНазначения.ТекущийПользователь();
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Предприятия") Тогда
		Предприятие = Объект;
	ИначеЕсли ТипЗнч(Объект) = Тип("РегистрБухгалтерииЗапись.Учетный") Или ТипЗнч(Объект) = Тип("РегистрБухгалтерииВыборка.Учетный") Тогда
		Предприятие = Объект.Предприятия;
	Иначе
		Попытка
			Предприятие = Объект.Предприятие;
		Исключение  
			Возврат КонецДня(ОбщаяДатаЗапрета);
		КонецПопытки;
	КонецЕсли;
	НаправлениеДеятельности = Предприятие.Родитель;
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	Запрос.УстановитьПараметр("НаправлениеДеятельности", НаправлениеДеятельности);	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВложенныйЗапрос.Пользователь,
	               |	ВложенныйЗапрос.Объект,
	               |	ВложенныйЗапрос.ДатаЗапрета,
	               |	ВЫБОР
	               |		КОГДА ВложенныйЗапрос.Пользователь ССЫЛКА Справочник.Пользователи
	               |			ТОГДА 1
	               |		КОГДА ВложенныйЗапрос.Пользователь ССЫЛКА Справочник.ГруппыПользователей
	               |			ТОГДА ВЫБОР КОГДА ВложенныйЗапрос.Пользователь.Родитель = ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ПустаяСсылка)	ТОГДА 2.9
	               |						КОГДА ВложенныйЗапрос.Пользователь.Родитель.Родитель = ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ПустаяСсылка) ТОГДА 2.8
	               |						ИНАЧЕ 2
	               |				  КОНЕЦ
	               |		КОГДА ВложенныйЗапрос.Пользователь ССЫЛКА Перечисление.ВидыНазначенияДатЗапрета
	               |			ТОГДА 3
	               |	КОНЕЦ КАК ПриоритетПоПользователям,
	               |	ВЫБОР
	               |		КОГДА ВложенныйЗапрос.Объект ССЫЛКА Справочник.Предприятия
	               |			ТОГДА 1
	               |		КОГДА ВложенныйЗапрос.Объект ССЫЛКА Справочник.НаправленияДеятельности
	               |			ТОГДА 2
	               |		КОГДА ВложенныйЗапрос.Объект ССЫЛКА Перечисление.ВидыНазначенияДатЗапрета
	               |			ТОГДА 3
	               |	КОНЕЦ КАК ПриоритетПоОбъектам
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ДатыЗапретаИзмененияСрезПоследних.Объект КАК Объект,
	               |		ДатыЗапретаИзмененияСрезПоследних.Пользователь КАК Пользователь,
	               |		МИНИМУМ(ДатыЗапретаИзмененияСрезПоследних.ДатаЗапрета) КАК ДатаЗапрета
	               |	ИЗ
	               |		РегистрСведений.ДатыЗапретаИзменения.СрезПоследних(&ТекДата, ) КАК ДатыЗапретаИзмененияСрезПоследних
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	               |			ПО (ДатыЗапретаИзмененияСрезПоследних.Пользователь = ГруппыПользователейСостав.Ссылка
	               |					ИЛИ ДатыЗапретаИзмененияСрезПоследних.Пользователь = ГруппыПользователейСостав.Ссылка.Родитель)
	               |	ГДЕ
	               |		(ДатыЗапретаИзмененияСрезПоследних.Пользователь = &Пользователь
	               |				ИЛИ ГруппыПользователейСостав.Пользователь = &Пользователь
	               |				ИЛИ ДатыЗапретаИзмененияСрезПоследних.Пользователь = ЗНАЧЕНИЕ(Перечисление.ВидыНазначенияДатЗапрета.ПоВсемПользователям))
	               |		И (ДатыЗапретаИзмененияСрезПоследних.Объект = &Предприятие
	               |				ИЛИ ДатыЗапретаИзмененияСрезПоследних.Объект = ЗНАЧЕНИЕ(Перечисление.ВидыНазначенияДатЗапрета.ПоВсемОбъектам))
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ДатыЗапретаИзмененияСрезПоследних.Объект,
	               |		ДатыЗапретаИзмененияСрезПоследних.Пользователь) КАК ВложенныйЗапрос
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПриоритетПоПользователям,
	               |	ПриоритетПоОбъектам";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ДатаЗапрета) Тогда
			Возврат КонецДня(Выборка.ДатаЗапрета);
		КонецЕсли;
	КонецЦикла;
	
	Возврат КонецДня(ОбщаяДатаЗапрета);
		
КонецФункции

Процедура ПроверитьФормуНаДатуЗапрета(Форма) Экспорт
	
	Если Лев(Форма.ИмяФормы, 5) = "Отчет" Тогда
		Объект = Форма.Отчет;
	Иначе
		Объект = Форма.Объект;	
	КонецЕсли;
	
	
	Если  НЕ БюджетныйНаСервере.РольДоступнаСервер("Администратор") И НЕ БюджетныйНаСервере.РольДоступнаСервер("ОФК") 
		И НЕ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.Д_Бюджет") И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если  БюджетныйНаСервере.ПринадлежитПодсистеме(Объект.Ссылка,"сабУправленческийУчет") Тогда
			ГлобальнаяДата = сабОбщегоНазначения.ПолучитьДатуЗапрета(Объект);
			ДатаЗакрытияУчетПредприятие = УЧ_Сервер.ДатаЛокальногоЗапрета(Объект.Предприятие);
			Если БюджетныйНаСервере.РольДоступнаСервер("Финансист") Тогда
				ДатаЗакрытия = ГлобальнаяДата;				
			Иначе
				ДатаЗакрытия = Макс(ГлобальнаяДата,ДатаЗакрытияУчетПредприятие);
			КонецЕсли;
		Иначе
			ДатаЗакрытия = Дата('00010101');	
		КонецЕсли;
		ИсточникДата = Объект.Дата;	
		Если ИсточникДата <= ДатаЗакрытия  Тогда
			Форма.ТолькоПросмотр = Истина
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает значение полученного свойства объекта.
//
// Параметры:
//  Объект      - Ссылка на владельца свойств.
//  Свойство 	- ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения.
// Возвращаемое значение :
//   Значение свойства, либо Неопределено, если свойство не задано
//
Функция ПолучитьЗначениеСвойства(Объект, знач Свойство) Экспорт

	Если ТипЗнч(Свойство) = Тип("Строка") Тогда
		Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(Свойство);
		Если Не ЗначениеЗаполнено(Свойство) Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
		
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаСвойств.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ТаблицаСвойств
		|ГДЕ
		|	ТаблицаСвойств.Объект = &Объект
		|	И ТаблицаСвойств.Свойство = &Свойство";
	
	Запрос = Новый Запрос;
		
	Запрос.Параметры.Вставить("Объект", Объект);
	Запрос.Параметры.Вставить("Свойство", Свойство);
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
 		Возврат Выборка.Значение;
	КонецЦикла;	
	
КонецФункции	

//получаем пользователя из параметров сеанса
Функция ТекущийПользователь() Экспорт
	Возврат ПараметрыСеанса.ТекущийПользователь;
КонецФункции // ПолучитьПользователя()

Функция ПолучитьТекущуюИБ() Экспорт

	Возврат Неопределено;	

КонецФункции // ()

&НаСервере
Функция ДобавитьПодчиненных(ТекЭлемент, ПараметрКоманды) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Пользователи.Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	(Пользователи.Родитель = &Родитель
	|			ИЛИ Пользователи.Родитель.Родитель = &Родитель
	|			ИЛИ Пользователи.Родитель.Родитель.Родитель = &Родитель
	|			ИЛИ Пользователи.Родитель.Родитель.Родитель.Родитель = &Родитель)";
	
	Запрос.УстановитьПараметр("Родитель", ТекЭлемент);
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	
	
	
	
КонецФункции

//Добавляет на форму картинку состояния перед номером док-да
Процедура ОтобразитьСостояниеДокумента(Форма, ТекущийОбъект = Неопределено) Экспорт
	
	Если Лев(Форма.ИмяФормы, 5) = "Отчет" Тогда
		Возврат;
	Иначе
		Ссылка = ?(ТекущийОбъект = Неопределено, Форма.Объект.Ссылка, ТекущийОбъект);
	КонецЕсли;
	
	Если Не ЭтоДокумент(Ссылка.Метаданные()) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекЭлемент Из Форма.Элементы Цикл
		Если ТипЗнч(ТекЭлемент) = Тип("ПолеФормы") И ТекЭлемент.ПутьКДанным = "Объект.Номер" И ТекЭлемент.Имя <> "ПолеНомерНовый" Тогда
			ПолеНомер = ТекЭлемент;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПолеНомер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.Элементы.Найти("ПолеСостояние") = Неопределено Тогда
		//Добавляем новый реквизит и поле в форму
		ДобавляемыеРеквизиты = Новый Массив;
		Реквизит = Новый РеквизитФормы("СостояниеДокумента", Новый ОписаниеТипов("Число", новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		Попытка
			Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		Исключение
			Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты, ДобавляемыеРеквизиты);
		КонецПопытки;	
		
		ГруппаНомерИСостояние = Форма.Элементы.Вставить("ГруппаНомерИСостояние", Тип("ГруппаФормы"), ПолеНомер.Родитель, ПолеНомер);
		ГруппаНомерИСостояние.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаНомерИСостояние.ОтображатьЗаголовок = Ложь;
		ГруппаНомерИСостояние.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаНомерИСостояние.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		
		//добавляем кнопку "Проверено д1 29.11.19
		ДобавитьКомандуПроверено(Форма, ТекущийОбъект, ГруппаНомерИСостояние);
		
		//добавляем картинку Состояния
		ПолеСостояние = Форма.Элементы.Вставить("ПолеСостояние", Тип("ПолеФормы"), ГруппаНомерИСостояние);
		ПолеСостояние.Вид 				= ВидПоляФормы.ПолеКартинки;
		ПолеСостояние.ПутьКДанным 		= "СостояниеДокумента";
		ПолеСостояние.ПоложениеЗаголовка= ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеСостояние.Ширина = 3;
		ПолеСостояние.Высота = 1;
		ПолеСостояние.КартинкаЗначений  = БиблиотекаКартинок.СостоянияДокумента;
		ПолеСостояние.Рамка			    = новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
		ПолеСостояние.РастягиватьПоГоризонтали = Ложь;
		ПолеСостояние.РастягиватьПоВертикали   = Ложь;
		
		Форма.Элементы.Переместить(ПолеНомер, ГруппаНомерИСостояние);
		
		
	КонецЕсли;
	
	//Если Ссылка.ПометкаУдаления Тогда
	//	Форма.СостояниеДокумента = 2;
	//ИначеЕсли Ссылка.Проведен Тогда
	//	Форма.СостояниеДокумента = 1;
	//Иначе
	//	Форма.СостояниеДокумента = 0;
	//КонецЕсли;
	
	РучнаяКорректировка = Неопределено;
	
	Если Форма.Объект.Свойство("РучнаяКорректировка", РучнаяКорректировка) Тогда
		Если Ссылка.РучнаяКорректировка Тогда
			Если Ссылка.ПометкаУдаления Тогда
				Форма.СостояниеДокумента = 10;
			ИначеЕсли Ссылка.Проведен Тогда
				Форма.СостояниеДокумента = 8;
			Иначе
				Форма.СостояниеДокумента = 9;
			КонецЕсли;	
		Иначе
			Если Ссылка.ПометкаУдаления Тогда
				Форма.СостояниеДокумента = 2;
			ИначеЕсли Ссылка.Проведен Тогда
				Форма.СостояниеДокумента = 1;
			Иначе
				Форма.СостояниеДокумента = 0;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Ссылка.ПометкаУдаления Тогда
			Форма.СостояниеДокумента = 2;
		ИначеЕсли Ссылка.Проведен Тогда
			Форма.СостояниеДокумента = 1;
		Иначе
			Форма.СостояниеДокумента = 0;
		КонецЕсли;		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДобавитьКомандуПроверено(Форма, ТекущийОбъект, ГруппаНомерИСостояние)
	
	УстановитьПривилегированныйРежим(Истина);
	Ссылка = Форма.Объект.Ссылка;
	
	Если Не ТипЗнч(Ссылка) = Тип("ДокументСсылка.УЧ_ДвижениеДС") И Не ТипЗнч(Ссылка) = Тип("ДокументСсылка.УЧ_АвансовыйОтчет") Тогда //ограничиваем видимость для типов
		Возврат;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ЕстьТип = Метаданные.РегистрыСведений.ПараметрыДокументов.Измерения.Документ.Тип.СодержитТип(ТипЗнч(Ссылка));
		Если ЕстьТип Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ПараметрыДокументовСрезПоследних.Статус КАК Статус
			|ИЗ
			|	РегистрСведений.ПараметрыДокументов.СрезПоследних(, Документ = &Документ) КАК ПараметрыДокументовСрезПоследних
			|ГДЕ
			|	ПараметрыДокументовСрезПоследних.Статус = Значение(Перечисление.СтатусПриПроверкеОбъектовБД.Проверен)";
			
			Запрос.УстановитьПараметр("Документ", Ссылка);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			ЕстьЗапись = Ложь;
			Пока Выборка.Следующий() Цикл
				ЕстьЗапись = Истина;
			КонецЦикла;
			
			Если НЕ Ссылка.Метаданные().Реквизиты.Найти("Предприятие") = Неопределено Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	ИСТИНА КАК Поле1
				|ИЗ
				|	РегистрСведений.ОсновныеДолжностиПредприятия КАК ОсновныеДолжностиПредприятия
				|ГДЕ
				|	ОсновныеДолжностиПредприятия.Предприятие = &Предприятие
				|	И ОсновныеДолжностиПредприятия.Должность = Значение(Перечисление.ОсновныеДолжностиПредприятия.Учетчик)
				|	И ОсновныеДолжностиПредприятия.Сотрудник В(&Пользователи)";
				
				Запрос.УстановитьПараметр("Предприятие", Ссылка.Предприятие);
				Запрос.УстановитьПараметр("Пользователи", ПараметрыСеанса.ДоступныеПользователи);
				
				Результат = Запрос.Выполнить();
				Выборка = Результат.Выбрать();
				
				Если Выборка.Количество() ИЛИ БюджетныйНаСервере.РольАдминаДоступнаСервер() Тогда
					Если ЕстьТип Тогда
						
						ГруппаКоманднаяПанель = Форма.Элементы.Вставить("КоманднаяПанельПроверено", Тип("ГруппаФормы"), ГруппаНомерИСостояние);
						ГруппаКоманднаяПанель.Вид = ВидГруппыФормы.КоманднаяПанель;
						//ГруппаНомерИСостояние.ОтображатьЗаголовок = Ложь;
						//ГруппаНомерИСостояние.Отображение = ОтображениеОбычнойГруппы.Нет;
						//ГруппаНомерИСостояние.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
						
						НоваяКоманда = Форма.Команды.Добавить("КомандаПроверено");
						НоваяКоманда.Действие = "ПровереноПоУчету";
						НоваяКоманда.Отображение = ОтображениеКнопки.Картинка;
						НоваяКоманда.Картинка = БиблиотекаКартинок.ЗеленаяГалочка;
						НоваяКоманда.Подсказка  = "Установить/снять отметку о проверке объекта";
						НовыйЭлемент = Форма.Элементы.Вставить("КомандаПроверено", Тип("КнопкаФормы"), ГруппаКоманднаяПанель);
						НовыйЭлемент.ИмяКоманды = "КомандаПроверено";
						НовыйЭлемент.Пометка = ЕстьЗапись;
					КонецЕсли;
				КонецЕсли; 			
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры


// Определяет принадлежность объекта метаданных к общему типу "Документ".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
//  Возвращаемое значение:
//   Булево.
//
Функция ЭтоДокумент(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.Документы.Содержит(ОбъектМетаданных);
	
КонецФункции

&НаСервере
// Определяет соответствие релиза платформы у пользователя и в параметрах сеанса
Процедура ПроверитьРелизПлатформыПользователя() Экспорт
	
	ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	Если Не ПараметрыСеанса.ДопПараметры.РелизПлатформы = ТекПользователь.РелизПлатформы И Не ТекПользователь.Предопределенный Тогда
		ПользовательОбъект = ПараметрыСеанса.ТекущийПользователь.ПолучитьОбъект();
		ПользовательОбъект.РелизПлатформы = ПараметрыСеанса.ДопПараметры.РелизПлатформы;
		ПользовательОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// получает соответствие для объекта ИБ из соответствующего регистра
Функция ПолучитьОбъектСоответствия(ИсходныйОбъект) Экспорт
	
	ОбъектС = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА сабСоответствиеОбъектовИнформационнойБазы.Объект1 = &ОбъектИсх
	               |			ТОГДА сабСоответствиеОбъектовИнформационнойБазы.Объект2
	               |		КОГДА сабСоответствиеОбъектовИнформационнойБазы.Объект2 = &ОбъектИсх
	               |			ТОГДА сабСоответствиеОбъектовИнформационнойБазы.Объект1
	               |		ИНАЧЕ NULL
	               |	КОНЕЦ КАК ОбъектСоотв
	               |ИЗ
	               |	РегистрСведений.сабСоответствиеОбъектовИнформационнойБазы КАК сабСоответствиеОбъектовИнформационнойБазы
	               |ГДЕ
	               |	(сабСоответствиеОбъектовИнформационнойБазы.Объект1 = &ОбъектИсх
	               |			ИЛИ сабСоответствиеОбъектовИнформационнойБазы.Объект2 = &ОбъектИсх)";
				   
	Запрос.УстановитьПараметр("ОбъектИсх", ИсходныйОбъект);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ОбъектС = Выборка.ОбъектСоотв
	КонецЕсли;
	
	Возврат ОбъектС;
	
КонецФункции

Функция КоличествоСообщенийПоСчету(БанковскийСчет) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Д_СлужебнаяЗаписка.Ссылка
	               |ИЗ
	               |	Документ.Д_СлужебнаяЗаписка КАК Д_СлужебнаяЗаписка
	               |ГДЕ
	               |	Д_СлужебнаяЗаписка.БанковскийСчет = &БанковскийСчет
	               |	И Д_СлужебнаяЗаписка.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	
	Результат = Запрос.Выполнить();
	КоличествоСообщений = Результат.Выбрать().Количество();
	
	Возврат Новый Структура("КоличествоСообщенийОЗакрытии", КоличествоСообщений);
	
КонецФункции // ()

Функция СчетНеработающий(СтатусБанковскогоСчета) Экспорт
	Возврат СтатусБанковскогоСчета = Перечисления.сабСтатусыБанковскихСчетов.ПодИнкассовым ИЛИ
	СтатусБанковскогоСчета = Перечисления.сабСтатусыБанковскихСчетов.ПрочаяБлокировка ИЛИ СтатусБанковскогоСчета = Перечисления.сабСтатусыБанковскихСчетов.Закрыт;
КонецФункции // ()

Функция БанкНеработающий(СтатусБанка) Экспорт
	Возврат СтатусБанка = Перечисления.сабСтатусыБанков.НаСтадииЗакрытия ИЛИ
	СтатусБанка = Перечисления.сабСтатусыБанков.ПрочааНеблагонадежность ИЛИ СтатусБанка = Перечисления.сабСтатусыБанков.Закрыт;
КонецФункции // ()

Функция ЕстьРеквизитИлиОбщийРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Экспорт
	
	Если НЕ (МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено) тогда
		Возврат Истина;
	КонецЕсли;
	
	Эл = Метаданные.ОбщиеРеквизиты[ИмяРеквизита].Состав.Найти(МетаданныеДокумента);
	Если НЕ МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено ИЛИ Эл.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать Тогда
		Возврат Истина;
	иначе
		Возврат Ложь;
	КонецЕсли; 

КонецФункции // ЕстьРеквизитИлиОбщийРеквизитДокумента()

// Функция возвращает дату за &КоличествоДней рабочих дней от указанной даты
// В случае, если уменьшенная дата выходит за пределы года, то возвращает начало года
//
// Параметры
//	Дата - дата, от которой мы отнимаем дни
//	КоличествоДней - количество рабочих дней, которое нужно вычесть из указанной даты. 1 - вчера, 2 - позавчера и т.д.
Функция ПолучитьДатуЗаНРабочихДнейДо(Дата, КоличествоДней) Экспорт
	
	Календарь = Справочники.Календари.НайтиПоНаименованию("Российская Федерация");
	
	Если Календарь.Пустая() Тогда
		Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Не заполнен календарь за %1 год (Справочник Календари). Некоторые механизмы могут работать некорректно.", Формат(Дата, "ДФ=гггг")));
		Возврат НачалоГода(Дата);
	КонецЕсли;
	
	КалендарьПрошлыйГод = Справочники.Календари.НайтиПоНаименованию(Формат(Год(Дата) - 1, "ЧГ=0"));
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КалендарныеГрафики.ДатаГрафика КАК ДатаГрафика
	               |ИЗ
	               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	               |ГДЕ
	               |	КалендарныеГрафики.ДатаГрафика <= &ДатаГрафика
	               |	И КалендарныеГрафики.ДеньВключенВГрафик
	               |	И (КалендарныеГрафики.Календарь = &Календарь ИЛИ КалендарныеГрафики.Календарь = &КалендарьПрошлыйГод)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаГрафика УБЫВ";
	Запрос.УстановитьПараметр("ДатаГрафика", Дата);
	Запрос.УстановитьПараметр("Календарь", Календарь);
	Запрос.УстановитьПараметр("КалендарьПрошлыйГод", КалендарьПрошлыйГод);
	РезультатЗапроса = Запрос.Выполнить();
	МассивДат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ДатаГрафика");
	
	Если МассивДат.Количество() >= КоличествоДней + 1 Тогда
		Возврат МассивДат[КоличествоДней];
	Иначе 
		Возврат НачалоГода(Дата);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьСчетУчетаНоменклатуры(Номенклатура) Экспорт
	
	Счет = Неопределено;
	Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		СчетМатериалов = Номенклатура.Счет10;
		Если ЗначениеЗаполнено(СчетМатериалов) Тогда
			Счет = СчетМатериалов;
			Возврат Счет;
		КонецЕсли; 
	КонецЕсли;
	
	Если Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Материалы Тогда
		Счет = Номенклатура.Счет10;
	ИначеЕсли Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Или Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Комплектующие Тогда
		Счет = ПланыСчетов.Учетный.Счет41();
	Иначе
		Счет = ПланыСчетов.Учетный.Счет43();
	КонецЕсли;
	
	Возврат Счет;
	
КонецФункции

Функция ИспользованиеНесколькихПредпирятий() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МАКСИМУМ(ДополнительныеСвойстваПользователя.сабИспользоватьНесколькоПредприятий) КАК сабИспользоватьНесколькоПредприятий
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСвойстваПользователя КАК ДополнительныеСвойстваПользователя
	               |ГДЕ
	               |	ДополнительныеСвойстваПользователя.Пользователь В(&Пользователь)";
	
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ДоступныеПользователи);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.сабИспользоватьНесколькоПредприятий;	
	КонецЦикла;
	Возврат  Ложь;

КонецФункции // ()


#Область сабРаботаСФайлами
Функция ВХранилище(ФайлСсылка) Экспорт
	
	//ИмяФайлаНаСервере = Константы.ПутьКМестуХраненияФайлов.Получить() + "\" + ФайлСсылка.Наименование;
	//
	//Данные = Новый ДвоичныеДанные(ИмяФайлаНаСервере);
	//
	//Если Данные = Неопределено Тогда
	//	Возврат Неопределено;
	//КонецЕсли;	
	
	Возврат Неопределено;
	
КонецФункции

Функция ВХранилищеСтарое(ФайлСсылка) Экспорт
	Данные = ФайлСсылка.ПолучитьОбъект().ФайлХранилище.Получить();
	Если Данные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	
	Возврат ПоместитьВоВременноеХранилище(Данные);
КонецФункции

Процедура ЗаписатьИспользованиеФайловНаСервере(ФайлСсылка, Событие) Экспорт
	
	//ИспользованиеФайла = РегистрыСведений.ИспользованиеФайлов.СоздатьНаборЗаписей();
	//Запись 						= ИспользованиеФайла.Добавить();       
	//Запись.Дата 				= ТекущаяДата();
	//Запись.Пользователь 		= ПараметрыСеанса.ТекущийПользователь;
	//Запись.Предприятие 			= ФайлСсылка.Предприятие;
	//Запись.ВидФайла 			= ФайлСсылка.ВидФайла;
	//Запись.НормативныйДокумент 	= ФайлСсылка.НормативныйДокумент;
	//Запись.Файл 				= ФайлСсылка.Ссылка;
	//Запись.Событие 				= "Просмотр";
	//ИспользованиеФайла.Записать(Ложь);
	Если ТипЗнч(ФайлСсылка) = Тип(Справочники.Файлы) Тогда
		Запись = РегистрыСведений.ИспользованиеФайлов.СоздатьМенеджерЗаписи();
		Запись.Дата 				= ТекущаяДата();
		Запись.Пользователь 		= ПараметрыСеанса.ТекущийПользователь;
		Запись.Предприятие 			= ФайлСсылка.Предприятие;
		Запись.ВидФайла 			= ФайлСсылка.ВидФайла;
		Запись.НормативныйДокумент 	= ФайлСсылка.НормативныйДокумент;
		Запись.Файл 				= ФайлСсылка.Ссылка;
		Запись.Событие 				= Событие;
		Запись.Записать();
	КонецЕсли;
КонецПроцедуры	

Функция НайтиВладельцаПрикрепленногоФайла(СуществующийФайл) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрикрепленныеОбъекты.Владелец
	|ИЗ
	|	РегистрСведений.ПрикрепленныеОбъекты КАК ПрикрепленныеОбъекты
	|ГДЕ
	|	ВЫРАЗИТЬ(ПрикрепленныеОбъекты.Объект КАК Справочник.Файлы).Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", СуществующийФайл);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Владелец;	
		КонецЦикла;
	КонецЕсли;	
	
КонецФункции	

Функция ПроверитьВладельцаПрикрепленногоОбъекта(ВладелецФайла) Экспорт
	
	Если ТипЗнч(ВладелецФайла) = Тип("ДокументСсылка.БП_Оповещение") Тогда
		Если ВладелецФайла.Стартован Тогда
			ОснованиеЗаблокирован = Истина;
		Иначе
			ОснованиеЗаблокирован = Ложь;
		КонецЕсли;
	//ИначеЕсли ТипЗнч(ВладелецФайла) = Тип("ДокументСсылка.Д_ОбращенияВТехПоддержку") Тогда
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ ПЕРВЫЕ 1
	//	|	Задача.ТочкаМаршрута
	//	|ИЗ
	//	|	Справочник.Задача КАК Задача
	//	|ГДЕ
	//	|	Задача.Заявка = &Заявка
	//	|	И НЕ Задача.ПометкаУдаления
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	Задача.Дата УБЫВ";
	//	Запрос.УстановитьПараметр("Заявка", ВладелецФайла); 
	//	РезультатЗапроса = Запрос.Выполнить();
	//	Если РезультатЗапроса.Пустой() Тогда
	//		ОснованиеЗаблокирован = Ложь;
	//	Иначе	
	//		Выборка = РезультатЗапроса.Выбрать();
	//		Пока Выборка.Следующий() Цикл
	//			Если Выборка.ТочкаМаршрута = БизнесПроцессы.ЗаявкиАдминистратору.ТочкиМаршрута.Действие1 Тогда
	//				ОснованиеЗаблокирован = Ложь;
	//			Иначе
	//				ОснованиеЗаблокирован = Истина;
	//			КонецЕсли;
	//		КонецЦикла;	
	//	КонецЕсли;	
	Иначе	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(Задача.БизнесПроцесс.ОснованиеЗаблокирован, ЛОЖЬ) КАК ОснованиеЗаблокирован
		|ИЗ
		|	Справочник.Задача КАК Задача
		|ГДЕ
		|	Задача.Заявка = &Заявка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(Задача.БизнесПроцесс.ОснованиеЗаблокирован, ЛОЖЬ)";
		Запрос.УстановитьПараметр("Заявка", ВладелецФайла); 
		Выборка = Запрос.Выполнить().Выбрать();		
		ОснованиеЗаблокирован = Ложь;
		Пока Выборка.Следующий() Цикл 
			Если Выборка.ОснованиеЗаблокирован Тогда
				ОснованиеЗаблокирован = Истина;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
	Возврат ОснованиеЗаблокирован;
	
КонецФункции

Функция СоздатьФайлВБД(Имя, СсылкаФайл, Размер, ВидФайла, Владелец = Неопределено, ПараметрыВыбора = Неопределено) Экспорт
	
	ТекПредприятие = БюджетныйНаСервере.ПолучитьПредприятия()[0];
	Если НЕ ПараметрыВыбора = Неопределено Тогда
		Если ПараметрыВыбора.Свойство("Предприятие") И ЗначениеЗаполнено(ПараметрыВыбора.Предприятие) Тогда
			ТекПредприятие = ПараметрыВыбора.Предприятие;	
		КонецЕсли;
	КонецЕсли;
	
	НовФайл = Справочники.Файлы.СоздатьЭлемент();
	НовФайл.Наименование = Имя;
	//Если СсылкаФайл = "" Тогда
	//	ФайлХранилище = Новый ХранилищеЗначения(МойФайл);
	//	НовФайл.ФайлХранилище = ФайлХранилище;
	//КонецЕсли;
	НовФайл.ПутьКФайлу = СсылкаФайл;
	НовФайл.Размер = Размер / 1024;
	НовФайл.ВидФайла = ВидФайла;
	Если ВидФайла = "НормативныйДокумент" Тогда
		НовФайл.НормативныйДокумент = Истина;	
		Если НЕ БюджетныйНаСервере.РольДоступнаСервер("Администратор") И НЕ ИмяПользователя() = "ОФК" И НЕ ИмяПользователя() = "БюджетныйОтдел" Тогда
			Сообщить("Невозможно записать нормативный документ: недостаточно прав.");		
			Возврат Справочники.Файлы.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;	
	//НовФайл.Родитель = Справочники.Файлы.Бюджет;
	НовФайл.Дата = ТекущаяДата();
	НовФайл.Предприятие = ТекПредприятие;
	Если Владелец <> Неопределено Тогда
		Попытка
			НовФайл.Предприятие = Владелец.Предприятие;
		Исключение
			НовФайл.Предприятие = ТекПредприятие;
		КонецПопытки;
	Иначе
		НовФайл.Предприятие = ТекПредприятие;
	КонецЕсли;	
	НовФайл.Записать();
	
	Возврат НовФайл.Ссылка;
	
КонецФункции

Процедура КопироватьФайлНаСервере(НовыйФайл, АдресХранилища) Экспорт
	
	ИмяФайлаНаСервере = "\" + НовыйФайл.Наименование;
	
	ФайлОбъект = НовыйФайл.ПолучитьОбъект();
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресХранилища);
	ВыбФайл = Новый Файл(ИмяФайлаНаСервере);
	ДвоичныеДанные.Записать(ИмяФайлаНаСервере);
			
КонецПроцедуры

Функция ПроверитьДубли(Имя) Экспорт
	
	ИмяФайлаНаСервере = "\" + Имя;
	
	Файл = Новый Файл(ИмяФайлаНаСервере);
	
	Возврат Файл.Существует()
	
КонецФункции	

Процедура ПрикрепитьФайлКДокументу(СтруктураПараметровВыполнения) Экспорт
	
	Если СтруктураПараметровВыполнения.Свойство("ЭтоСканирование") И СтруктураПараметровВыполнения.ЭтоСканирование Тогда
		//НаборЗаписейРегистраПО = РегистрыСведений.ПрикрепленныеОбъекты.СоздатьНаборЗаписей();
		//НаборЗаписейРегистраПО.Отбор.Владелец.Установить(СтруктураПараметровВыполнения.Владелец);
		//НаборЗаписейРегистраПО.Прочитать();
		//
		//НоваяЗапись = НаборЗаписейРегистраПО.Добавить();
		//НоваяЗапись.Владелец = СтруктураПараметровВыполнения.Владелец;
		//НоваяЗапись.Объект	= СтруктураПараметровВыполнения.Файл;
		//НоваяЗапись.Автор	= ПараметрыСеанса.ТекущийВнешнийПользователь;
		//
		//НаборЗаписейРегистраПО.Записать();
		//
		НаборЗаписейРегистраСП = РегистрыСведений.СтатусыПроверкиАрхивируемыхФайлов.СоздатьНаборЗаписей();
		НаборЗаписейРегистраСП.Отбор.Владелец.Установить(СтруктураПараметровВыполнения.ДокументВладелец);
		НаборЗаписейРегистраСП.Отбор.Файл.Установить(СтруктураПараметровВыполнения.Файл);
		НаборЗаписейРегистраСП.Прочитать();
		
		НоваяЗапись = НаборЗаписейРегистраСП.Добавить();
		НоваяЗапись.Период = ТекущаяДата();
		НоваяЗапись.Владелец = СтруктураПараметровВыполнения.ДокументВладелец;
		НоваяЗапись.Файл	= СтруктураПараметровВыполнения.Файл;
		НоваяЗапись.СтатусПроверки = "Не проверен";
		
		НаборЗаписейРегистраСП.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


Функция ВывестиТиповойОтчет(СтруктураПараметров, АдресХранилища) Экспорт
	
	//Результат = Новый ТабличныйДокумент;

	УправленческийУчетПовтИсп.ВывестиОтчет(СтруктураПараметров.ОтчетОбъект, СтруктураПараметров.Результат, СтруктураПараметров.ДанныеРасшифровки, СтруктураПараметров.Схема, СтруктураПараметров.ВыводитьПолностью);
	
	ПоместитьВоВременноеХранилище(СтруктураПараметров, АдресХранилища);
	
	Возврат АдресХранилища;
	
КонецФункции // ()

Процедура УстановитьЗначениеДополнительногоСвойства(ТекущаяСсылка, НаименованиеДополнительногоСвойства, ЗначениеДополнительногоСвойства) Экспорт

	НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ТекущаяСсылка);
	
	ТекСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(НаименованиеДополнительногоСвойства);
	
	НаборЗаписей.Отбор.Свойство.Установить(ТекСвойство);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	Запись = НаборЗаписей.Добавить();
	Запись.Объект = ТекущаяСсылка;
	Запись.Свойство = ТекСвойство;
	Запись.Значение = ЗначениеДополнительногоСвойства;
	
	НаборЗаписей.Записать(Истина);

КонецПроцедуры // УстановитьЗначениеДополнительногоСвойства()
 
Функция ПолучитьСуммуНаСервере(Предприятие, Подразделение, Сотрудник, Дата, ВидНачисления) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КадровоеСостояниеСотрудниковУпрСрезПоследних.РазмерЗП КАК РазмерЗП,
	               |	КадровоеСостояниеСотрудниковУпрСрезПоследних.ДатаПриема КАК ДатаПриема
	               |ИЗ
	               |	РегистрСведений.КадровоеСостояниеСотрудниковУпр.СрезПоследних(
	               |			&Дата,
	               |			Сотрудник = &Сотрудник
	               |				И Предприятие = &Предприятие
	               |				И Подразделение = &Подразделение
	               |				И ВидНачисления = &ВидНачисления) КАК КадровоеСостояниеСотрудниковУпрСрезПоследних
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	КадровоеСостояниеСотрудниковРеглСрезПоследних.РазмерЗП * 0.87,
	               |	КадровоеСостояниеСотрудниковРеглСрезПоследних.ДатаПриема
	               |ИЗ
	               |	РегистрСведений.КадровоеСостояниеСотрудниковРегл.СрезПоследних(
	               |			&Дата,
	               |			Сотрудник = &Сотрудник
	               |				И Подразделение = &Подразделение
	               |				И ВидНачисления = &ВидНачисления) КАК КадровоеСостояниеСотрудниковРеглСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", ?(НачалоДня(ТекущаяДата()) = Дата, ТекущаяДата(), Дата));
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	Запрос.УстановитьПараметр("Подразделение", ?(Предприятие.УчетПоПодразделениям, Подразделение, Предприятие.ВидДеятельности));
	Запрос.УстановитьПараметр("ВидНачисления", ВидНачисления);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Новый Структура("Оклад, ДатаПриема", Выборка.РазмерЗП, Выборка.ДатаПриема);		
	КонецЦикла;
	
	Возврат Новый Структура("Оклад, ДатаПриема", 0, Дата('00010101'));
	

КонецФункции

//Сож+
Функция ДанныеФайлаДляОткрытия(ФайлИлиВерсияСсылка, ИдентификаторФормы = Неопределено,
	РабочийКаталогВладельца = Неопределено, ПредыдущийАдресФайла = Неопределено) Экспорт
	
	
	
	 Если ТипЗнч(ФайлИлиВерсияСсылка) = Тип("СправочникСсылка.Файлы") Тогда
		ФайлСсылка = ФайлИлиВерсияСсылка;
		ВерсияСсылка = Неопределено;
	Иначе
		ФайлСсылка = Неопределено;
		ВерсияСсылка = ФайлИлиВерсияСсылка;
	КонецЕсли;

	 ДанныеФайла = ДанныеФайла(ФайлИлиВерсияСсылка);
	ТипХраненияФайла = ДанныеФайла.Версия.ТипХраненияФайла;
	 Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске И ДанныеФайла.Версия <> Неопределено Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВерсииФайлов.ПутьКФайлу КАК ПутьКФайлу,
		|	ВерсииФайлов.Том КАК Том
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов
		|ГДЕ
		|	ВерсииФайлов.Ссылка = &Версия";
		
		Запрос.Параметры.Вставить("Версия", ДанныеФайла.Версия);
		
		ДанныеФайлаТом = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
		ДанныеФайлаПутьКФайлу = "";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДанныеФайлаТом = Выборка.Том;
			ДанныеФайлаПутьКФайлу = Выборка.ПутьКФайлу;
		КонецЕсли;
		
		Если НЕ ДанныеФайлаТом.Пустая() Тогда
			ПолныйПуть = РаботаСФайламиВТомахСлужебный.ПолныйПутьТома(ДанныеФайлаТом) + ДанныеФайлаПутьКФайлу; 
			Попытка
				ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПуть);
				// Работаем только с текущей версией - для не-текущей ссылку получаем в ПолучитьНавигационнуюСсылкуДляОткрытия.
				ДанныеФайла.НавигационнаяСсылкаТекущейВерсии = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
			Исключение
				
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	ПредыдущийАдресФайла = ДанныеФайла.НавигационнаяСсылкаТекущейВерсии;
	
	//Возврат ДанныеФайла;

	Возврат  ДвоичныеДанные;
	
	
КонецФункции
Функция ДанныеФайла(ФайлИлиВерсияСсылка) Экспорт
	
	Если ТипЗнч(ФайлИлиВерсияСсылка) = Тип("СправочникСсылка.Файлы") Тогда
		ФайлСсылка = ФайлИлиВерсияСсылка;
		ВерсияСсылка = Неопределено;
	Иначе
		ФайлСсылка = Неопределено;
		ВерсияСсылка = ФайлИлиВерсияСсылка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Если ФайлСсылка <> Неопределено Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Файлы.Ссылка КАК Ссылка,
		|	Файлы.Код КАК Код,
		|	Файлы.Редактирует КАК Редактирует,
		|	Файлы.ТекущаяВерсия КАК ТекущаяВерсия,
		|	Файлы.ВладелецФайла КАК ВладелецФайла,
		|	Файлы.ХранитьВерсии КАК ХранитьВерсии,
		|	Файлы.ПометкаУдаления КАК ПометкаУдаления,
		|	ВерсииФайлов.ПолноеНаименование КАК ПолноеНаименование,
		|	ВерсииФайлов.Расширение КАК Расширение,
		|	ВерсииФайлов.Размер КАК Размер,
		|	ВерсииФайлов.НомерВерсии КАК НомерВерсии,
		|	ВерсииФайлов.ПутьКФайлу КАК ПутьКФайлу,
		|	ВерсииФайлов.Том КАК Том,
		|	ВерсииФайлов.ДатаМодификацииУниверсальная КАК ДатаМодификацииУниверсальная,
		|	ВерсииФайлов.Автор КАК Автор,
		|	ВерсииФайлов.СтатусИзвлеченияТекста КАК СтатусИзвлеченияТекста,
		|	Файлы.Зашифрован КАК Зашифрован,
		|	Файлы.ДатаЗаема КАК ДатаЗаема
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииФайлов КАК ВерсииФайлов
		|		ПО Файлы.ТекущаяВерсия = ВерсииФайлов.Ссылка";
		
		Если ТипЗнч(ФайлСсылка) = Тип("Массив") Тогда 
			Запрос.Текст = Запрос.Текст + " ГДЕ Файлы.Ссылка В (&Файл) ";
		Иначе
			Запрос.Текст = Запрос.Текст + " ГДЕ Файлы.Ссылка = &Файл ";
		КонецЕсли;
		
		Запрос.Параметры.Вставить("Файл", ФайлСсылка);
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Файлы.Ссылка КАК Ссылка,
		|	Файлы.Код КАК Код,
		|	Файлы.Редактирует КАК Редактирует,
		|	Файлы.ТекущаяВерсия КАК ТекущаяВерсия,
		|	Файлы.ВладелецФайла КАК ВладелецФайла,
		|	Файлы.ХранитьВерсии КАК ХранитьВерсии,
		|	Файлы.ПометкаУдаления КАК ПометкаУдаления,
		|	ВерсииФайлов.ПолноеНаименование КАК ПолноеНаименование,
		|	ВерсииФайлов.Расширение КАК Расширение,
		|	ВерсииФайлов.Размер КАК Размер,
		|	ВерсииФайлов.НомерВерсии КАК НомерВерсии,
		|	ВерсииФайлов.ПутьКФайлу КАК ПутьКФайлу,
		|	ВерсииФайлов.Том КАК Том,
		|	ВерсииФайлов.ДатаМодификацииУниверсальная КАК ДатаМодификацииУниверсальная,
		|	ВерсииФайлов.Автор КАК Автор,
		|	ВерсииФайлов.СтатусИзвлеченияТекста КАК СтатусИзвлеченияТекста,
		|	Файлы.Зашифрован КАК Зашифрован,
		|	Файлы.ДатаЗаема КАК ДатаЗаема
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииФайлов КАК ВерсииФайлов
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ВерсииФайлов.Ссылка = &Версия
		|	И Файлы.Ссылка = ВерсииФайлов.Владелец";
		
		Запрос.Параметры.Вставить("Версия", ВерсияСсылка);
		
	КонецЕсли;
	
	МассивДанныеФайла = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	
		ДанныеФайла = Новый Структура;
		ДанныеФайла.Вставить("Ссылка", Выборка.Ссылка);
		ДанныеФайла.Вставить("КодФайла", Выборка.Код);
		ДанныеФайла.Вставить("Редактирует", Выборка.Редактирует);
		ДанныеФайла.Вставить("Владелец", Выборка.ВладелецФайла);
		ДанныеФайла.Вставить("НавигационнаяСсылка", ПолучитьНавигационнуюСсылку(Выборка.Ссылка));
		
		Если ВерсияСсылка <> Неопределено Тогда
			ДанныеФайла.Вставить("Версия", ВерсияСсылка);
		Иначе
			ДанныеФайла.Вставить("Версия", Выборка.ТекущаяВерсия);
		КонецЕсли;	

		ДанныеФайла.Вставить("ТекущаяВерсия", Выборка.ТекущаяВерсия);
		
		СтруктураКлюча = Новый Структура("ВерсияФайла", ДанныеФайла.ТекущаяВерсия);
		КлючЗаписи = РегистрыСведений.ХранимыеФайлыВерсий.СоздатьКлючЗаписи(СтруктураКлюча);
		НавигационнаяСсылкаТекущейВерсии = ПолучитьНавигационнуюСсылку(КлючЗаписи, "ХранимыйФайл");
		ДанныеФайла.Вставить("НавигационнаяСсылкаТекущейВерсии", НавигационнаяСсылкаТекущейВерсии);
		
	
		
		
		ДанныеФайла.Вставить("Размер", Выборка.Размер);
		ДанныеФайла.Вставить("НомерВерсии", Выборка.НомерВерсии);
		ДанныеФайла.Вставить("ДатаМодификацииУниверсальная", Выборка.ДатаМодификацииУниверсальная);
		ДанныеФайла.Вставить("Расширение", Выборка.Расширение);
		ДанныеФайла.Вставить("ПолноеНаименованиеВерсии", СокрЛП(Выборка.ПолноеНаименование));
		ДанныеФайла.Вставить("ХранитьВерсии", Выборка.ХранитьВерсии);
		ДанныеФайла.Вставить("ПометкаУдаления", Выборка.ПометкаУдаления);
		ДанныеФайла.Вставить("АвторТекущейВерсии", Выборка.Автор);
		ДанныеФайла.Вставить("Зашифрован", Выборка.Зашифрован);
		ДанныеФайла.Вставить("ДатаЗаема", Выборка.ДатаЗаема);
		
			
		МассивДанныеФайла.Добавить(ДанныеФайла);
		
	КонецЦикла;
	
	// Если был передан массив - возвращаем массив.
	Если ТипЗнч(ФайлСсылка) = Тип("Массив") Тогда 
		Возврат МассивДанныеФайла;
	КонецЕсли;

	Если МассивДанныеФайла.Количество() > 0 Тогда 
		Возврат МассивДанныеФайла[0];
	Иначе
		Возврат Новый Структура;
	КонецЕсли;
	
КонецФункции

//Сож-

//подписка на событие для создания строк графика платежей
Процедура сабПлатКалПриЗаписиОбъектовПриЗаписи(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") Тогда
		ТекБП = БПСервер.НайтиТекущийБПСервер(Источник.Ссылка);	
		ТекТочкаМаршрута = БПСервер.ПолучитьТекущуюТочкуМаршрута(Источник.Ссылка);
		
		Если НЕ ЗначениеЗаполнено(ТекТочкаМаршрута) Тогда
			
			Если ЗначениеЗаполнено(ТекБП) И ТекБП.Завершен Тогда
				ТекТочкаМаршрута = Перечисления.Согласование1ТочкиМаршрута.Завершение;
			Иначе 	
				ТекТочкаМаршрута = Перечисления.Согласование1ТочкиМаршрута.Старт;
			КонецЕсли;
			
		КонецЕсли;
		
		//график платежей
		Если Источник.ДополнительныеСвойства.Модифицирован Тогда
			
			//запрос по заявка на оплату
			МассивЗаявок = Новый Массив;
			
			Для каждого ТекСТрока Из Источник.ЗаявкаБезнал Цикл
				
				Если ЗначениеЗаполнено(ТекСтрока.ЗаявкаНаФинансирование) Тогда
					МассивЗаявок.Добавить(ТекСтрока.ЗаявкаНаФинансирование);				
				КонецЕсли;
				
			КонецЦикла; 
				
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	сабГрафикПлатежей.Документ КАК ДокументЗапись
			               |ИЗ
			               |	РегистрСведений.сабГрафикПлатежей КАК сабГрафикПлатежей
			               |ГДЕ
			               |	сабГрафикПлатежей.Документ В(&Документы)
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	сабГрафикПлатежей.Документ";
			
			Запрос.УстановитьПараметр("Документы", МассивЗаявок);
			
			Результат = Запрос.Выполнить();
			ВыборкаЗаписей = Результат.Выгрузить().ВыгрузитьКолонку("ДокументЗапись");
				
			НаборЗаписей = РегистрыСведений.сабГрафикПлатежей.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Документ.Установить(Источник.Ссылка);
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			
			Если Источник.ПометкаУдаления Тогда
				НаборЗаписей.Записать();
				Возврат;		
			КонецЕсли;
			
			Для каждого ТекСтрока Из Источник.ЗаявкаБезнал Цикл
				Если ТекСтрока.ОтменаОплаты Тогда
					Продолжить;				
				КонецЕсли;
				
				Если Не ВыборкаЗаписей.Найти(ТекСтрока.ЗаявкаНаФинансирование) = Неопределено Тогда
					НаборЗаписей2 = РегистрыСведений.сабГрафикПлатежей.СоздатьНаборЗаписей();
					НаборЗаписей2.Отбор.Документ.Установить(ТекСтрока.ЗаявкаНаФинансирование);
					//НаборЗаписей2.Отбор.ДатаПлатежа.Установить(?(ТекСтрока.ДатаПлатежа = Дата('00010101'), ТекущаяДата(), ТекСтрока.ДатаПлатежа));
					//НаборЗаписей2.Отбор.УИДСтрокиДокумента.Установить("");
					НаборЗаписей2.Прочитать();
					Для каждого ТекЗаписьНабора Из НаборЗаписей2 Цикл
						Если ?(ТекСтрока.ДатаПлатежа = Дата('00010101'), ТекущаяДата(), ТекСтрока.ДатаПлатежа) = ТекЗаписьНабора.ДатаПлатежа И
							НЕ ТекЗаписьНабора.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ Тогда
							Если ТекЗаписьНабора.УИДСтрокиДокумента = "" ИЛИ ТекСтрока.УИДСтроки = ТекЗаписьНабора.УИДСтрокиДокумента Тогда
								НоваяСтрока = ТекЗаписьНабора;
								ДатаПлатежа = НоваяСтрока.ДатаПлатежа;
								ЕстьЗаявкаНаОплату = Истина;
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					ТекТочкаМаршрута = Перечисления.Согласование1ТочкиМаршрута.Действие5;
					//Продолжить; //обрабатываем заявку на оплату отдельно
				Иначе
					//НаборЗаписей.Отбор.Документ.Установить(Источник.Ссылка);
					//НаборЗаписей.Прочитать();
					
					// закомментированно di 06.12.2018, если больше одной строки в реестре, в график попадала только первая строка
					//Если НаборЗаписей.Количество() Тогда
					//	НоваяСтрока = НаборЗаписей[0];
					//Иначе	
						НоваяСтрока = НаборЗаписей.Добавить();
						НоваяСтрока.Документ = Источник.Ссылка;
						НоваяСтрока.ДатаПлатежа = Источник.ДатаОплаты;
					//КонецЕсли;
					
					НаборЗаписей2 = Неопределено;
					ДатаПлатежа = НоваяСтрока.ДатаПлатежа;
					ЕстьЗаявкаНаОплату = Ложь;
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				НоваяСтрока.НазначениеПлатежа = ТекСтрока.НазначениеПлатежаБух;
				НоваяСтрока.НазначениеПлатежаУчет = ТекСтрока.НазначениеПлатежа;
				НоваяСтрока.ДатаПлатежа = ДатаПлатежа; //дату платежа не изменяем
				ЭтоДоход = НоваяСтрока.СтатьяДДС.Доход;
				НоваяСтрока.Сумма = ?(ЭтоДоход, -ТекСтрока.СуммаДДС, ТекСтрока.СуммаДДС);
				НоваяСтрока.СуммаНДС = ?(ЭтоДоход, -ТекСтрока.СуммаНДС, ТекСтрока.СуммаНДС);
				НоваяСтрока.ВалютнаяСумма = ?(ЭтоДоход, -ТекСтрока.ВалютнаяСумма, ТекСтрока.ВалютнаяСумма);
				НоваяСтрока.ВалютнаяСуммаКонтрагента = ?(ЭтоДоход, -ТекСтрока.ВалютнаяСуммаКонтрагента, ТекСтрока.ВалютнаяСуммаКонтрагента);
				Если НЕ ЕстьЗаявкаНаОплату Тогда
					НоваяСтрока.Предприятие = Источник.Предприятие;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(НоваяСтрока.Предприятие) Тогда
					НоваяСтрока.Предприятие = ТекСтрока.БанковскийСчет.Предприятие;
				КонецЕсли;
				НоваяСтрока.ПодразделениеЦФО = ТекСтрока.Подразделение;
				НоваяСтрока.Комментарий = Источник.Комментарий;
				НоваяСтрока.УИДСтрокиДокумента = ТекСтрока.УИДСтроки;
				НоваяСтрока.ТочкаМаршрута = ?(ТекТочкаМаршрута = Перечисления.Согласование1ТочкиМаршрута.Действие5 ИЛИ ТекТочкаМаршрута = Перечисления.Согласование1ТочкиМаршрута.Завершение ИЛИ Не ЗначениеЗаполнено(НоваяСтрока.ТочкаМаршрута), ТекТочкаМаршрута, НоваяСтрока.ТочкаМаршрута);
				НоваяСтрока.ДопПризнак = ТекСтрока.ИнвПроект;
				
				Если ТекСтрока.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ОплатаВНХ Тогда
					
					НоваяСтрока = Неопределено;
					Для каждого ТекЗаписьНабора Из НаборЗаписей2 Цикл
						Если ТекЗаписьНабора.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ 
							И ТекЗаписьНабора.ДатаПлатежа = ТекСтрока.ДатаПлатежа Тогда
							Если ТекЗаписьНабора.УИДСтрокиДокумента = "" ИЛИ ТекЗаписьНабора.УИДСтрокиДокумента = ТекЗаписьНабора.УИДСтрокиДокумента Тогда
								НоваяСтрока = ТекЗаписьНабора;
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;					

					Если НоваяСтрока = Неопределено Тогда
						НоваяСтрока = НаборЗаписей.Добавить();
						НоваяСтрока.Документ = Источник.Ссылка;
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
					НоваяСтрока.НазначениеПлатежа = ТекСтрока.НазначениеПлатежаБух;
					НоваяСтрока.НазначениеПлатежаУчет = ТекСтрока.НазначениеПлатежа;
					НоваяСтрока.Сумма = ТекСтрока.СуммаДДС;
					Если ТипЗнч(ТекСтрока.Контрагент) = Тип("СправочникСсылка.Предприятия") Тогда //если наличка
						НоваяСтрока.Предприятие = ТекСтрока.Контрагент;
						НоваяСтрока.Источник = ТекСтрока.ИсточникПолучатель;
						НоваяСтрока.Контрагент = НоваяСтрока.Предприятие;
						ТекВалютаПолучателя = ТекСтрока.Контрагент.ОсновнаяВалютаУчета;
					Иначе
						НоваяСтрока.Предприятие = ТекСтрока.СчетКонтрагента.Предприятие;
						НоваяСтрока.Источник = ТекСтрока.СчетКонтрагента;
						НоваяСтрока.Организация = ТекСтрока.Контрагент;
						НоваяСтрока.Контрагент = ТекСтрока.Организация;
						НоваяСтрока.СчетКонтрагента = ТекСтрока.БанковскийСчет;	
					КонецЕсли;
					НоваяСтрока.СтатьяДДС = БюджетныйНаСервере.ОбратнаяВнутрихолдинговаяСтатья(НоваяСтрока.СтатьяДДС, НоваяСтрока.Предприятие);
					НоваяСтрока.ЦФО = НоваяСтрока.Предприятие;
					НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ;
					//НоваяСтрока.ПодразделениеЦФО = ТекСтрока.Подразделение;
					НоваяСтрока.Комментарий = Источник.Комментарий;
					НоваяСтрока.ДатаПлатежа = ДатаПлатежа;
					НоваяСтрока.УИДСтрокиДокумента = ТекСтрока.УИДСтроки;
					НоваяСтрока.ТочкаМаршрута = ?(ТекТочкаМаршрута = Перечисления.Согласование1ТочкиМаршрута.Действие5 ИЛИ ТекТочкаМаршрута = Перечисления.Согласование1ТочкиМаршрута.Завершение ИЛИ Не ЗначениеЗаполнено(НоваяСтрока.ТочкаМаршрута), ТекТочкаМаршрута, НоваяСтрока.ТочкаМаршрута);
					
				ИначеЕсли ТекСтрока.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.СнятиеНаличных ИЛИ ТекСтрока.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ВзносНаличнымиВБанк Тогда
					
					НоваяСтрока = Неопределено;
					Для каждого ТекЗаписьНабора Из НаборЗаписей2 Цикл
						Если ТекЗаписьНабора.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ 
							И ТекЗаписьНабора.Сумма = ТекСтрока.СуммаДДС Тогда
							Если ТекЗаписьНабора.УИДСтрокиДокумента = "" ИЛИ ТекЗаписьНабора.УИДСтрокиДокумента = ТекЗаписьНабора.УИДСтрокиДокумента Тогда
								НоваяСтрока = ТекЗаписьНабора;
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;					

					Если НоваяСтрока = Неопределено Тогда
						НоваяСтрока = НаборЗаписей.Добавить();
						НоваяСтрока.Документ = Источник.Ссылка;
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник);
					НоваяСтрока.СтатьяДДС = БюджетныйНаСервере.ОбратнаяВнутрихолдинговаяСтатья(НоваяСтрока.СтатьяДДС, НоваяСтрока.Предприятие);
					
					//НоваяСтрока.Сумма = ТекСтрока.СуммаДДС;
					//НоваяСтрока.Предприятие = Источник.Предприятие;
					//НоваяСтрока.ЦФО = Источник.Предприятие;
					Если ТекСтрока.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ВзносНаличнымиВБанк Тогда
						НоваяСтрока.Источник = НоваяСтрока.СчетКонтрагента;	
					Иначе	
						Если ЗначениеЗаполнено(НоваяСтрока.ИсточникПолучатель) Тогда
							НоваяСтрока.Источник = НоваяСтрока.ИсточникПолучатель;
						Иначе	
							НоваяСтрока.Источник = Справочники.Кассы.Виртуальный;
						КонецЕсли;
					КонецЕсли;
					НоваяСтрока.НазначениеПлатежа = ТекСтрока.НазначениеПлатежаБух;
					НоваяСтрока.НазначениеПлатежаУчет = ТекСтрока.НазначениеПлатежа;
					НоваяСтрока.Организация = ТекСтрока.Контрагент;
					НоваяСтрока.Контрагент = ТекСтрока.Организация;
					НоваяСтрока.СчетКонтрагента = ТекСтрока.БанковскийСчет;
					НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ;
					НоваяСтрока.ПодразделениеЦФО = ТекСтрока.Подразделение;
					НоваяСтрока.Комментарий = Источник.Комментарий;
					НоваяСтрока.ДатаПлатежа = ДатаПлатежа;
					НоваяСтрока.УИДСтрокиДокумента = ТекСтрока.УИДСтроки;
					НоваяСтрока.ТочкаМаршрута = ?(ТекТочкаМаршрута = Перечисления.Согласование1ТочкиМаршрута.Действие5 ИЛИ ТекТочкаМаршрута = Перечисления.Согласование1ТочкиМаршрута.Завершение ИЛИ Не ЗначениеЗаполнено(НоваяСтрока.ТочкаМаршрута), ТекТочкаМаршрута, НоваяСтрока.ТочкаМаршрута);
				КонецЕсли;
				
				Если Не НаборЗаписей2 = Неопределено Тогда
					НаборЗаписей2.Записать();
				КонецЕсли;
				
			КонецЦикла;
			
			НаборЗаписей.Записать();
			
			СкорректироватьЗаписиБюджетаПоНаборуЗаписей(НаборЗаписей);

		Иначе //обычная перезапись строк регистра (например при пометке удаления)
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Д_ЗаявкаНаОплатуЗаявкаБезнал.ЗаявкаНаФинансирование КАК Ссылка,
			|	Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка.ПометкаУдаления КАК ПометкаУдаления
			|ИЗ
			|	Документ.Д_ЗаявкаНаОплату.ЗаявкаБезнал КАК Д_ЗаявкаНаОплатуЗаявкаБезнал
			|ГДЕ
			|	Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка = &Ссылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Д_ЗаявкаНаОплату.Ссылка,
			|	Д_ЗаявкаНаОплату.ПометкаУдаления
			|ИЗ
			|	Документ.Д_ЗаявкаНаОплату КАК Д_ЗаявкаНаОплату
			|ГДЕ
			|	Д_ЗаявкаНаОплату.Ссылка = &Ссылка";
			
			Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Если Не ЗначениеЗаполнено(Выборка.Ссылка) Тогда
					Продолжить;			
				КонецЕсли;
				
				НаборЗаписей = РегистрыСведений.сабГрафикПлатежей.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Документ.Установить(Выборка.Ссылка);
				НаборЗаписей.Прочитать();
				
				Для каждого ТекЗапись Из НаборЗаписей Цикл
					ТекЗапись.ОснованиеПометкаУдаления = Выборка.ПометкаУдаления;			
				КонецЦикла; 			
				
				НаборЗаписей.Записать();
				
			КонецЦикла;			
			
		КонецЕсли;
				
	ИначеЕсли ТипЗнч(Источник.Ссылка) = Тип("СправочникСсылка.Задача") И НЕ Источник.Выполнена Тогда
		Если ТипЗнч(Источник.Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") Тогда
			ТекБП = Источник.БизнесПроцесс;
			ТекТочкаМаршрута = Источник.ТочкаМаршрута;
			
			Если НЕ ЗначениеЗаполнено(ТекТочкаМаршрута) Тогда
				Если ЗначениеЗаполнено(ТекБП) И ТекБП.Завершен Тогда
					ТекТочкаМаршрута = Перечисления.Согласование1ТочкиМаршрута.Завершение;
				Иначе 	
					ТекТочкаМаршрута = Перечисления.Согласование1ТочкиМаршрута.Старт;
				КонецЕсли;
			Иначе //сразу кидаем на оплату при запуске реестра платежей
				ТекТочкаМаршрута = ?(ТекТочкаМаршрута = Перечисления.Согласование1ТочкиМаршрута.Действие2 ИЛИ ТекТочкаМаршрута = Перечисления.Согласование1ТочкиМаршрута.Действие4, Перечисления.Согласование1ТочкиМаршрута.Действие5, ТекТочкаМаршрута);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекТочкаМаршрута) Тогда
				//график платежей
				НаборЗаписей = РегистрыСведений.сабГрафикПлатежей.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Документ.Установить(Источник.Заявка);
				НаборЗаписей.Прочитать();
				ОснованиеПометкаУдаления = Источник.ПометкаУдаления;
				//Если НЕ Источник.ПометкаУдаления Тогда
				Для каждого ТекЗапись Из НаборЗаписей Цикл
					ТекЗапись.ТочкаМаршрута = ТекТочкаМаршрута;
					ТекЗапись.ОснованиеПометкаУдаления = ОснованиеПометкаУдаления;
				КонецЦикла;
				//Иначе
				//	НаборЗаписей.Очистить();	
				//КонецЕсли;
				НаборЗаписей.Записать();
				
				//график платежей по заявкам
				Если ТипЗнч(Источник.Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаОплату") Тогда
					Для каждого ТекСТрока Из Источник.Заявка.ЗаявкаБезнал Цикл
						Если ЗначениеЗаполнено(ТекСтрока.ЗаявкаНаФинансирование) Тогда
							НаборЗаписей = РегистрыСведений.сабГрафикПлатежей.СоздатьНаборЗаписей();
							НаборЗаписей.Отбор.Документ.Установить(ТекСтрока.ЗаявкаНаФинансирование);
							НаборЗаписей.Отбор.ДатаПлатежа.Установить(?(ТекСтрока.ДатаПлатежа = Дата('00010101'), ТекущаяДата(), ТекСтрока.ДатаПлатежа));
							НаборЗаписей.Прочитать();
							ОснованиеПометкаУдаления = ТекСтрока.ЗаявкаНаФинансирование.ПометкаУдаления;
							//Если НЕ ТекСтрока.ЗаявкаНаФинансирование.ПометкаУдаления Тогда
							Для каждого ТекЗапись Из НаборЗаписей Цикл
								ТекЗапись.ТочкаМаршрута = ТекТочкаМаршрута;
								ТекЗапись.ОснованиеПометкаУдаления = ОснованиеПометкаУдаления;
							КонецЦикла; 
							//Иначе
							//	НаборЗаписей.Очистить();	
							//КонецЕсли;
							НаборЗаписей.Записать();
						КонецЕсли;
					КонецЦикла; 
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Источник.Заявка) = Тип("ДокументСсылка.Д_ЗаявкаНаФинансирование") Тогда
			ТекБП = Источник.БизнесПроцесс;
			ТекТочкаМаршрута = Источник.ТочкаМаршрута;
			ТекРеестр = Источник.Заявка.РеестрЗаявок;
			
			Если НЕ ЗначениеЗаполнено(ТекРеестр) Тогда //только для безреестровых
				//график платежей
				НаборЗаписей = РегистрыСведений.сабГрафикПлатежей.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Документ.Установить(Источник.Заявка);
				НаборЗаписей.Прочитать();
				ОснованиеПометкаУдаления = Источник.ПометкаУдаления;
				//Если НЕ Источник.ПометкаУдаления Тогда
				Для каждого ТекЗапись Из НаборЗаписей Цикл
					Если ТекТочкаМаршрута = Перечисления.СогласованиеОбщееТочкиМаршрута.Действие1 Тогда
						ТекЗапись.ТочкаМаршрута = Перечисления.Согласование1ТочкиМаршрута.Действие1;
					ИначеЕсли ТекТочкаМаршрута = Перечисления.СогласованиеОбщееТочкиМаршрута.Действие3 ИЛИ ТекТочкаМаршрута = Перечисления.СогласованиеОбщееТочкиМаршрута.Действие4 ИЛИ ТекТочкаМаршрута = Перечисления.СогласованиеОбщееТочкиМаршрута.Действие5 Тогда	
						ТекЗапись.ТочкаМаршрута = Перечисления.Согласование1ТочкиМаршрута.Действие4;
					Иначе
						ТекЗапись.ТочкаМаршрута = Перечисления.Согласование1ТочкиМаршрута.Действие2;
					КонецЕсли;
					ТекЗапись.ОснованиеПометкаУдаления = ОснованиеПометкаУдаления;
				КонецЦикла;
				//Иначе
				//	НаборЗаписей.Очистить();	
				//КонецЕсли;
				НаборЗаписей.Записать();
			КонецЕсли;

		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.Д_ЗаявкаНаФинансирование") Тогда
		ТекБП = БПСервер.НайтиТекущийБПСервер(Источник.Ссылка);	
		ТочкаМаршрутаЗадачи = БПСервер.ПолучитьТекущуюТочкуМаршрута(Источник.Ссылка);
		
		БПЗавершен = Ложь;
		Если НЕ ЗначениеЗаполнено(ТекТочкаМаршрута) Тогда
			Если ЗначениеЗаполнено(ТекБП) И ТекБП.Завершен Тогда
				БПЗавершен = Истина;
				ТекТочкаМаршрута = Перечисления.Согласование1ТочкиМаршрута.Действие4;
			Иначе 	
				ТекТочкаМаршрута = Перечисления.Согласование1ТочкиМаршрута.Старт;
			КонецЕсли;
		Иначе
			ТекТочкаМаршрута = ?(ТочкаМаршрутаЗадачи = Перечисления.СогласованиеОбщееТочкиМаршрута.Действие3, Перечисления.Согласование1ТочкиМаршрута.Действие4, Перечисления.Согласование1ТочкиМаршрута.Действие2);
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.сабГрафикПлатежей.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Источник.Ссылка);
		НаборЗаписей.Прочитать();

		//график платежей
		Если Источник.ДополнительныеСвойства.Модифицирован Тогда
			НаборЗаписей = РегистрыСведений.сабГрафикПлатежей.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Документ.Установить(Источник.Ссылка);
			НаборЗаписей.Прочитать();
			ВернутьСуммуБюджета(Источник);
			НаборЗаписей.Очистить();
			Если Источник.ПометкаУдаления ИЛИ БПЗавершен Тогда
				НаборЗаписей.Записать();
				Возврат;		
			КонецЕсли;
			НоваяСтрока = НаборЗаписей.Добавить();
			НоваяСтрока.Документ = Источник.Ссылка;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник);
			ЭтоДоход = НоваяСтрока.СтатьяДДС.Доход;
			НоваяСтрока.Сумма = ?(ЭтоДоход, -Источник.Сумма, Источник.Сумма);
			НоваяСтрока.СуммаНДС = ?(ЭтоДоход, -Источник.СуммаНДС, Источник.СуммаНДС);
			НоваяСтрока.ВалютнаяСумма = ?(ЭтоДоход, -Источник.ВалютнаяСумма, Источник.ВалютнаяСумма);
			НоваяСтрока.ВалютнаяСуммаКонтрагента = ?(ЭтоДоход, -Источник.ВалютнаяСуммаКонтрагента, Источник.ВалютнаяСуммаКонтрагента);
			//НоваяСтрока.ЦФО = Источник.Предприятие;
			//НоваяСтрока.Предприятие = ?(ЗначениеЗаполнено(Источник.БанковскийСчет.Предприятие), Источник.БанковскийСчет.Предприятие, Источник.Предприятие);
			Если Не ЗначениеЗаполнено(НоваяСтрока.Предприятие) Тогда
				НоваяСтрока.Предприятие = ПП_Сервер.ПолучитьПредприятие(Источник.Дата, Источник.Источник);
			КонецЕсли;
			НоваяСтрока.ПодразделениеЦФО = Источник.Подразделение;
			ВалютаПредприятия = ?(ЗначениеЗаполнено(НоваяСтрока.Предприятие.ОсновнаяВалютаУчета), НоваяСтрока.Предприятие.ОсновнаяВалютаУчета, УЧ_Сервер.НациональнаяВалюта());
			//Если ЗначениеЗаполнено(Источник.Валюта) И НЕ Источник.Валюта = ВалютаПредприятия Тогда
			//	ПлановыйКурс = РасчетыБюджет.ПолучитьПлановыйКурс(БюджетныйНаСервере.ПолучитьАктуальныйСценарий(Источник.Дата, Истина), Источник.Валюта, ВалютаПредприятия, Источник.Дата);
			//	//НоваяСтрока.ВалютнаяСумма = НоваяСтрока.Сумма;
			//	НоваяСтрока.Сумма = ?(ПлановыйКурс.Курс, НоваяСтрока.ВалютнаяСумма * ПлановыйКурс.Курс, НоваяСтрока.ВалютнаяСумма);
			//КонецЕсли;
			НоваяСтрока.Комментарий = Источник.Комментарий;
			НоваяСтрока.ДатаПлатежа = Источник.ДатаОплаты;
			//НоваяСтрока.УИДСтрокиДокумента = ТекСтрока.УИДСтроки;
			Если Не Источник.РасшифровкаПлатежа Тогда
				Для каждого ТекСтрокаРасш Из Источник.ТабличнаяЧасть Цикл
					НоваяСтрока.УИДСтрокиДокумента = ТекСтрокаРасш.УИДСтроки;
				КонецЦикла;
			КонецЕсли;
			НоваяСтрока.ДопПризнак = Источник.ИнвПроект;
			НоваяСтрока.ТочкаМаршрута = ТекТочкаМаршрута;
			НоваяСтрока.Источник = ?(Источник.ТипИсточника = Перечисления.Д_ИсточникиСредств.Казна, Справочники.Кассы.Виртуальный, НоваяСтрока.Источник);
			
			ИспользуемыйБюджет = Источник.СтрокиГрафикаБюджета.НайтиСтроки(Новый Структура("Использовать", Истина)); 
			Для каждого ТекСтрокаБюджета Из ИспользуемыйБюджет Цикл
				НоваяСтрока.УИДСтрокиБюджета = ТекСтрокаБюджета.УИДСтроки;
			КонецЦикла; 
			
			Если Источник.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ОплатаВНХ Тогда
				НоваяСтрока = НаборЗаписей.Добавить();
				НоваяСтрока.Документ = Источник.Ссылка;
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник);
				//НоваяСтрока.Сумма = ТекСтрока.СуммаДДС;
				Если ТипЗнч(Источник.Контрагент) = Тип("СправочникСсылка.Предприятия") Тогда //если наличка
					НоваяСтрока.Предприятие = Источник.Контрагент;
					НоваяСтрока.Источник = Источник.ИсточникПолучатель;
					НоваяСтрока.Контрагент = Источник.Предприятие;
					ТекВалютаПолучателя = Источник.Контрагент.ОсновнаяВалютаУчета;
				Иначе
					НоваяСтрока.Предприятие = Источник.СчетКонтрагента.Предприятие;
					НоваяСтрока.Источник = Источник.СчетКонтрагента;
					НоваяСтрока.Организация = Источник.Контрагент;
					НоваяСтрока.Контрагент = Источник.Организация;
					НоваяСтрока.СчетКонтрагента = Источник.БанковскийСчет;
					ТекВалютаПолучателя = Источник.СчетКонтрагента.ВалютаДенежныхСредств;
				КонецЕсли;				
				НоваяСтрока.СтатьяДДС = БюджетныйНаСервере.ОбратнаяВнутрихолдинговаяСтатья(НоваяСтрока.СтатьяДДС, НоваяСтрока.Предприятие);
				НоваяСтрока.ЦФО = НоваяСтрока.Предприятие;
				//Если ЗначениеЗаполнено(ТекВалютаПолучателя) И НЕ ТекВалютаПолучателя = ВалютаПредприятия Тогда
				//	ПлановыйКурс = РасчетыБюджет.ПолучитьПлановыйКурс(БюджетныйНаСервере.ПолучитьАктуальныйСценарий(Источник.Дата, Истина), ТекВалютаПолучателя, ВалютаПредприятия, Источник.Дата);
				//	//НоваяСтрока.ВалютнаяСумма = НоваяСтрока.Сумма;
				//	НоваяСтрока.Сумма = ?(ПлановыйКурс.Курс, НоваяСтрока.ВалютнаяСумма * ПлановыйКурс.Курс, НоваяСтрока.ВалютнаяСумма);
				//КонецЕсли;
				НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ;
				//НоваяСтрока.ПодразделениеЦФО = ТекСтрока.Подразделение;
				НоваяСтрока.Комментарий = Источник.Комментарий;
				НоваяСтрока.ДатаПлатежа = Источник.ДатаОплаты;
				//НоваяСтрока.УИДСтрокиДокумента = ТекСтрока.УИДСтроки;
				Если Не Источник.РасшифровкаПлатежа Тогда
					Для каждого ТекСтрокаРасш Из Источник.ТабличнаяЧасть Цикл
						НоваяСтрока.УИДСтрокиДокумента = ТекСтрокаРасш.УИДСтроки;
					КонецЦикла;
				КонецЕсли;
				НоваяСтрока.ТочкаМаршрута = ТекТочкаМаршрута;
			ИначеЕсли Источник.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.СнятиеНаличных ИЛИ Источник.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ВзносНаличнымиВБанк Тогда
				НоваяСтрока = НаборЗаписей.Добавить();
				НоваяСтрока.Документ = Источник.Ссылка;
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник);
				НоваяСтрока.СтатьяДДС = БюджетныйНаСервере.ОбратнаяВнутрихолдинговаяСтатья(НоваяСтрока.СтатьяДДС, НоваяСтрока.Предприятие);
				//НоваяСтрока.Сумма = ТекСтрока.СуммаДДС;
				//НоваяСтрока.Предприятие = Источник.Предприятие;
				//НоваяСтрока.ЦФО = Источник.Предприятие;
				Если Источник.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ВзносНаличнымиВБанк Тогда
					НоваяСтрока.Источник = Источник.СчетКонтрагента;
				Иначе	
					Если ЗначениеЗаполнено(Источник.ИсточникПолучатель) Тогда
						НоваяСтрока.Источник = Источник.ИсточникПолучатель;
					Иначе	
						НоваяСтрока.Источник = Справочники.Кассы.Виртуальный;
					КонецЕсли;
				КонецЕсли;
				НоваяСтрока.Организация = Источник.Контрагент;
				НоваяСтрока.Контрагент = Источник.Организация;
				НоваяСтрока.СчетКонтрагента = Источник.БанковскийСчет;
				НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ;
				НоваяСтрока.ПодразделениеЦФО = Источник.Подразделение;
				НоваяСтрока.Комментарий = Источник.Комментарий;
				НоваяСтрока.ДатаПлатежа = Источник.ДатаОплаты;
				//НоваяСтрока.УИДСтрокиДокумента = ТекСтрока.УИДСтроки;
				Если Не Источник.РасшифровкаПлатежа Тогда
					Для каждого ТекСтрокаРасш Из Источник.ТабличнаяЧасть Цикл
						НоваяСтрока.УИДСтрокиДокумента = ТекСтрокаРасш.УИДСтроки;
					КонецЦикла;
				КонецЕсли;
				НоваяСтрока.ТочкаМаршрута = ТекТочкаМаршрута;
			КонецЕсли;
			НаборЗаписей.Записать();
			
			СкорректироватьЗаписиБюджета(Источник);
			
		ИначеЕсли Не ЗначениеЗаполнено(Источник.РеестрЗаявок) Тогда //обычная перезапись, например при удалении заявки
			НаборЗаписей = РегистрыСведений.сабГрафикПлатежей.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Документ.Установить(Источник.Ссылка);
			НаборЗаписей.Прочитать();
			
			Для каждого ТекЗапись Из НаборЗаписей Цикл
				Если БПЗавершен Тогда
					ТекЗапись.ТочкаМаршрута = ТекТочкаМаршрута;			
				КонецЕсли;
				ТекЗапись.ОснованиеПометкаУдаления = Источник.ПометкаУдаления;
				//ТекЗапись.УИДСтрокиДокумента = "";
			КонецЦикла; 			
			
			НаборЗаписей.Записать();
			
			Если Источник.ПометкаУдаления Тогда
				ВернутьСуммуБюджета(Источник);
			КонецЕсли;
			
		КонецЕсли;	
	ИначеЕсли ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.Д_Бюджет") Тогда
		Если Источник.Сценарий.СоздаватьГрафикОплат Тогда
			
			ТекТочкаМаршрута = Перечисления.Согласование1ТочкиМаршрута.Старт;
			
			Если Источник.ПометкаУдаления Тогда
				НаборЗаписей = РегистрыСведений.сабГрафикПлатежей.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Документ.Установить(Источник.Ссылка);
				НаборЗаписей.Записать();
				Возврат;		
			КонецЕсли;
			//НаборЗаписей.Прочитать();
			
			//график платежей
			Если Источник.ДополнительныеСвойства.Модифицирован Тогда
				//НаборЗаписей = РегистрыСведений.сабГрафикПлатежей.СоздатьНаборЗаписей();
				//НаборЗаписей.Отбор.Документ.Установить(Источник.Ссылка);
				//НаборЗаписей.Прочитать();
				//НаборЗаписей.Очистить();
				//Если Источник.ПометкаУдаления Тогда
				//	НаборЗаписей.Записать();
				//	Возврат;		
				//КонецЕсли;
				
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				               |	Д_БюджетЗатраты.НомерСтроки КАК НомерСтроки,
				               |	Д_БюджетЗатраты.Ссылка.Предприятие КАК Предприятие,
				               |	Д_БюджетЗатраты.Ссылка.Номер КАК Номер,
				               |	Д_БюджетЗатраты.Ссылка.Дата КАК Дата,
				               |	Д_БюджетЗатраты.Ссылка.Сценарий КАК Сценарий,
				               |	Д_БюджетЗатраты.СуммаБДДС КАК СуммаБДДС,
				               |	Д_БюджетЗатраты.СтатьяБДДС КАК СтатьяБДДС,
				               |	Д_БюджетЗатраты.Источник КАК Источник,
				               |	Д_БюджетЗатраты.Подразделение КАК Подразделение,
				               |	Д_БюджетЗатраты.Месяц КАК Месяц,
				               |	Д_БюджетЗатраты.СчетОрганизации КАК СчетОрганизации,
				               |	Д_БюджетЗатраты.СчетОрганизации.Предприятие КАК СчетОрганизацииПредприятие,
				               |	Д_БюджетЗатраты.Ссылка.Предприятие.ОсновнаяВалютаУчета КАК ПредприятиеОсновнаяВалютаУчета,
				               |	Д_БюджетЗатраты.СчетОрганизации.Владелец КАК СчетОрганизацииВладелец,
				               |	Д_БюджетЗатраты.УИД КАК УИД,
				               |	Д_БюджетЗатраты.Основание КАК Основание
				               |ПОМЕСТИТЬ ВремТЗ
				               |ИЗ
				               |	Документ.Д_Бюджет.Затраты КАК Д_БюджетЗатраты
				               |ГДЕ
				               |	Д_БюджетЗатраты.Ссылка = &Ссылка
				               |
				               |ОБЪЕДИНИТЬ ВСЕ
				               |
				               |ВЫБРАТЬ
				               |	Д_БюджетЗатратыКП.НомерСтроки,
				               |	Д_БюджетЗатратыКП.Ссылка.Предприятие,
				               |	Д_БюджетЗатратыКП.Ссылка.Номер,
				               |	Д_БюджетЗатратыКП.Ссылка.Дата,
				               |	Д_БюджетЗатратыКП.Ссылка.Сценарий,
				               |	Д_БюджетЗатратыКП.СуммаБДДС,
				               |	Д_БюджетЗатратыКП.СтатьяБДДС,
				               |	Д_БюджетЗатратыКП.Источник,
				               |	Д_БюджетЗатратыКП.Подразделение,
				               |	Д_БюджетЗатратыКП.Месяц,
				               |	Д_БюджетЗатратыКП.СчетОрганизации,
				               |	Д_БюджетЗатратыКП.СчетОрганизации.Предприятие,
				               |	Д_БюджетЗатратыКП.Ссылка.Предприятие.ОсновнаяВалютаУчета,
				               |	Д_БюджетЗатратыКП.СчетОрганизации.Владелец,
				               |	ВЫБОР
				               |		КОГДА НЕ Д_БюджетЗатратыКП.КлючАналитикиСтрокиЗатрат = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиБюджетов.ПустаяСсылка)
				               |			ТОГДА Д_БюджетЗатратыКП.КлючАналитикиСтрокиЗатрат.УИДСтроки
				               |		ИНАЧЕ Д_БюджетЗатратыКП.УИД
				               |	КОНЕЦ,
				               |	ВЫБОР
				               |		КОГДА НЕ Д_БюджетЗатратыКП.КлючАналитикиСтрокиЗатрат = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиБюджетов.ПустаяСсылка)
				               |			ТОГДА Д_БюджетЗатратыКП.КлючАналитикиСтрокиЗатрат.Основание
				               |		ИНАЧЕ Д_БюджетЗатратыКП.Основание
				               |	КОНЕЦ
				               |ИЗ
				               |	Документ.Д_Бюджет.ЗатратыКП КАК Д_БюджетЗатратыКП
				               |ГДЕ
				               |	Д_БюджетЗатратыКП.Ссылка = &Ссылка
				               |;
				               |
				               |////////////////////////////////////////////////////////////////////////////////
				               |ВЫБРАТЬ
				               |	МАКСИМУМ(ВремТЗ.НомерСтроки) КАК НомерСтроки,
				               |	ВремТЗ.Предприятие КАК Предприятие,
				               |	ВремТЗ.Номер КАК Номер,
				               |	ВремТЗ.Дата КАК Дата,
				               |	ВремТЗ.Сценарий КАК Сценарий,
				               |	СУММА(ВремТЗ.СуммаБДДС) КАК СуммаБДДС,
				               |	ВремТЗ.СтатьяБДДС КАК СтатьяБДДС,
				               |	ВремТЗ.Источник КАК Источник,
				               |	ВремТЗ.Подразделение КАК Подразделение,
				               |	ВремТЗ.Месяц КАК Месяц,
				               |	ВремТЗ.СчетОрганизации КАК СчетОрганизации,
				               |	ВремТЗ.СчетОрганизацииПредприятие КАК СчетОрганизацииПредприятие,
				               |	ВремТЗ.ПредприятиеОсновнаяВалютаУчета КАК ПредприятиеОсновнаяВалютаУчета,
				               |	ВремТЗ.СчетОрганизацииВладелец КАК СчетОрганизацииВладелец,
				               |	ВремТЗ.УИД КАК УИД,
				               |	ВремТЗ.Основание КАК Основание
				               |ИЗ
				               |	ВремТЗ КАК ВремТЗ
				               |
				               |СГРУППИРОВАТЬ ПО
				               |	ВремТЗ.Дата,
				               |	ВремТЗ.Предприятие,
				               |	ВремТЗ.Номер,
				               |	ВремТЗ.Сценарий,
				               |	ВремТЗ.СтатьяБДДС,
				               |	ВремТЗ.Подразделение,
				               |	ВремТЗ.Источник,
				               |	ВремТЗ.Месяц,
				               |	ВремТЗ.СчетОрганизации,
				               |	ВремТЗ.СчетОрганизацииПредприятие,
				               |	ВремТЗ.ПредприятиеОсновнаяВалютаУчета,
				               |	ВремТЗ.СчетОрганизацииВладелец,
				               |	ВремТЗ.УИД,
				               |	ВремТЗ.Основание";
				
				Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
				
				Результат = Запрос.Выполнить();
				Выборка = Результат.Выгрузить();
				
				НаборЗаписей = РегистрыСведений.сабГрафикПлатежей.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Документ.Установить(Источник.Ссылка);
				//НаборЗаписей.Отбор.УИДСтрокиДокумента.Установить(ТекСтрока.УИД);
				НаборЗаписей.Прочитать();
				НаборЗаписей.Очистить();
				
				Для каждого ТекСтрока Из Выборка Цикл
					
					Если ТекСтрока.Месяц > Источник.Дата Тогда
						Продолжить;					
					КонецЕсли;

					//Если НаборЗаписей.Количество() Тогда
					//	НоваяСтрока = НаборЗаписей[0];
					//Иначе
						НоваяСтрока = НаборЗаписей.Добавить();
						НоваяСтрока.ДатаПлатежа = НачалоМесяца(ТекСтрока.Месяц);
					//КонецЕсли;
					
					НоваяСтрока.Документ = Источник.Ссылка;
					НоваяСтрока.УИДСтрокиДокумента = ?(ЗначениеЗаполнено(ТекСтрока.УИД), ТекСтрока.УИД, Строка(Источник.Номер) + "Затраты" + Строка(ТекСтрока.НомерСтроки));
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
					НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Оплата;
					НоваяСтрока.Сценарий = Источник.Сценарий;
					НоваяСтрока.НазначениеПлатежа = ТекСтрока.Основание;
					НоваяСтрока.НазначениеПлатежаУчет = ТекСтрока.Основание;
					НоваяСтрока.Источник = ТекСтрока.СчетОрганизации;
					НоваяСтрока.Предприятие = ?(ЗначениеЗаполнено(ТекСтрока.СчетОрганизации), ТекСтрока.СчетОрганизацииПредприятие, Источник.Предприятие);
					НоваяСтрока.ЦФО = Источник.Предприятие;
					НоваяСтрока.ПодразделениеЦФО = ТекСтрока.Подразделение;
					НоваяСтрока.СтатьяДДС = ТекСТрока.СтатьяБДДС;
					НоваяСтрока.Сумма = ТекСТрока.СуммаБДДС;
					ВалютаПредприятия = ?(ЗначениеЗаполнено(ТекСтрока.ПредприятиеОсновнаяВалютаУчета), ТекСтрока.ПредприятиеОсновнаяВалютаУчета, УЧ_Сервер.НациональнаяВалюта());
					Если ЗначениеЗаполнено(Источник.Валюта) И НЕ Источник.Валюта = ВалютаПредприятия Тогда
						ПлановыйКурс = РасчетыБюджет.ПолучитьПлановыйКурс(Источник.Сценарий, Источник.Валюта, ВалютаПредприятия, Источник.Дата);
						//НоваяСтрока.ВалютнаяСумма = НоваяСтрока.Сумма;
						НоваяСтрока.Сумма = ?(ПлановыйКурс.Курс, НоваяСтрока.ВалютнаяСумма * ПлановыйКурс.Курс, НоваяСтрока.ВалютнаяСумма);
					Иначе
						НоваяСтрока.Валюта = НоваяСтрока.Предприятие.ОсновнаяВалютаУчета;	
					КонецЕсли;
					//НоваяСтрока.НазначениеПлатежаУчет = ТекСтрока.Основание;
					НоваяСтрока.ТочкаМаршрута = ТекТочкаМаршрута;
					НоваяСтрока.Источник = ?(ТекСтрока.Источник = Перечисления.Д_ИсточникиСредств.Казна, Справочники.Кассы.Виртуальный, ТекСтрока.СчетОрганизации);
					Если ТипЗнч(НоваяСтрока.Источник) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
						НоваяСтрока.Организация = ТекСтрока.СчетОрганизацииВладелец;				
					КонецЕсли;
					
				КонецЦикла; 
				
				НаборЗаписей.Записать();
			Иначе //обычная перезапись, например при удалении заявки
				НаборЗаписей = РегистрыСведений.сабГрафикПлатежей.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Документ.Установить(Источник.Ссылка);
				НаборЗаписей.Прочитать();
				
				Для каждого ТекЗапись Из НаборЗаписей Цикл
					ТекЗапись.ОснованиеПометкаУдаления = Источник.ПометкаУдаления;			
				КонецЦикла; 			
				
				НаборЗаписей.Записать();
			КонецЕсли;
		Иначе
			НаборЗаписей = РегистрыСведений.сабГрафикПлатежей.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Документ.Установить(Источник.Ссылка);
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
		КонецЕсли;
	ИначеЕсли ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.Д_ЗаявкаНаКорректировкуБюджета") Тогда
		АктуальныйСценарий = БюджетныйНаСервере.ПолучитьАктуальныйСценарий(Источник.Дата, Ложь);
		Если АктуальныйСценарий.СоздаватьГрафикОплат Тогда
			
			ТекТочкаМаршрута = Перечисления.Согласование1ТочкиМаршрута.Старт;
			
			Если Источник.ПометкаУдаления Тогда
				НаборЗаписей = РегистрыСведений.сабГрафикПлатежей.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Документ.Установить(Источник.Ссылка);
				НаборЗаписей.Записать();
				Возврат;		
			КонецЕсли;
			//НаборЗаписей.Прочитать();
			
			//график платежей
			Если Источник.ДополнительныеСвойства.Модифицирован Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				               |	Д_ЗаявкаНаКорректировкуБюджетаСЗ.НомерСтроки КАК НомерСтроки,
				               |	Д_ЗаявкаНаКорректировкуБюджетаСЗ.Ссылка.Предприятие КАК Предприятие,
				               |	Д_ЗаявкаНаКорректировкуБюджетаСЗ.Ссылка.Номер КАК Номер,
				               |	Д_ЗаявкаНаКорректировкуБюджетаСЗ.Ссылка.Дата КАК Дата,
				               |	Д_ЗаявкаНаКорректировкуБюджетаСЗ.СуммаБДДС КАК СуммаБДДС,
				               |	Д_ЗаявкаНаКорректировкуБюджетаСЗ.СтатьяБДДС КАК СтатьяБДДС,
				               |	Д_ЗаявкаНаКорректировкуБюджетаСЗ.Источник КАК Источник,
				               |	Д_ЗаявкаНаКорректировкуБюджетаСЗ.ВидДеятельности КАК Подразделение,
				               |	НАЧАЛОПЕРИОДА(Д_ЗаявкаНаКорректировкуБюджетаСЗ.Ссылка.Дата, МЕСЯЦ) КАК Месяц,
				               |	Д_ЗаявкаНаКорректировкуБюджетаСЗ.Ссылка.Предприятие.ОсновнаяВалютаУчета КАК ПредприятиеОсновнаяВалютаУчета,
				               |	Д_ЗаявкаНаКорректировкуБюджетаСЗ.УИД КАК УИД,
				               |	Д_ЗаявкаНаКорректировкуБюджетаСЗ.Основание КАК Основание,
				               |	Д_ЗаявкаНаКорректировкуБюджетаСЗ.КлючАналитикиБюджета КАК КлючАналитикиБюджета,
				               |	Д_ЗаявкаНаКорректировкуБюджетаСЗ.КлючАналитикиСтрокиЗатрат КАК КлючАналитикиСтрокиЗатрат
				               |ПОМЕСТИТЬ ВремТЗ
				               |ИЗ
				               |	Документ.Д_ЗаявкаНаКорректировкуБюджета.СЗ КАК Д_ЗаявкаНаКорректировкуБюджетаСЗ
				               |ГДЕ
				               |	Д_ЗаявкаНаКорректировкуБюджетаСЗ.Ссылка = &Ссылка
				               |;
				               |
				               |////////////////////////////////////////////////////////////////////////////////
				               |ВЫБРАТЬ
				               |	МАКСИМУМ(ВремТЗ.НомерСтроки) КАК НомерСтроки,
				               |	ВремТЗ.Предприятие КАК Предприятие,
				               |	ВремТЗ.Номер КАК Номер,
				               |	ВремТЗ.Дата КАК Дата,
				               |	СУММА(ВремТЗ.СуммаБДДС) КАК СуммаБДДС,
				               |	ВремТЗ.СтатьяБДДС КАК СтатьяБДДС,
				               |	ВремТЗ.Источник КАК Источник,
				               |	ВремТЗ.Подразделение КАК Подразделение,
				               |	ВремТЗ.Месяц КАК Месяц,
				               |	ВремТЗ.ПредприятиеОсновнаяВалютаУчета КАК ПредприятиеОсновнаяВалютаУчета,
				               |	ВремТЗ.УИД КАК УИД,
				               |	ВремТЗ.Основание КАК Основание,
				               |	ВремТЗ.КлючАналитикиБюджета КАК КлючАналитикиБюджета,
				               |	ВремТЗ.КлючАналитикиСтрокиЗатрат КАК КлючАналитикиСтрокиЗатрат
				               |ИЗ
				               |	ВремТЗ КАК ВремТЗ
				               |
				               |СГРУППИРОВАТЬ ПО
				               |	ВремТЗ.Дата,
				               |	ВремТЗ.Предприятие,
				               |	ВремТЗ.Номер,
				               |	ВремТЗ.СтатьяБДДС,
				               |	ВремТЗ.Подразделение,
				               |	ВремТЗ.Источник,
				               |	ВремТЗ.Месяц,
				               |	ВремТЗ.ПредприятиеОсновнаяВалютаУчета,
				               |	ВремТЗ.УИД,
				               |	ВремТЗ.Основание,
				               |	ВремТЗ.КлючАналитикиБюджета,
				               |	ВремТЗ.КлючАналитикиСтрокиЗатрат";
				
				Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
				
				Результат = Запрос.Выполнить();
				Выборка = Результат.Выгрузить();
				
				НаборЗаписей = РегистрыСведений.сабГрафикПлатежей.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Документ.Установить(Источник.Ссылка);
				//НаборЗаписей.Отбор.УИДСтрокиДокумента.Установить(ТекСтрока.УИД);
				НаборЗаписей.Прочитать();
				НаборЗаписей.Очистить();
				
				Для каждого ТекСтрока Из Выборка Цикл
					
					Если ТекСтрока.Месяц > Источник.Дата Тогда
						Продолжить;					
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ТекСтрока.КлючАналитикиСтрокиЗатрат) Тогда
						НаборЗаписейБюдж = РегистрыСведений.сабГрафикПлатежей.СоздатьНаборЗаписей();
						НаборЗаписейБюдж.Отбор.УИДСтрокиДокумента.Установить(ТекСтрока.КлючАналитикиСтрокиЗатрат.УИДСтроки);
						НаборЗаписейБюдж.Прочитать();
						Для каждого ТекСтрокаБюдж Из НаборЗаписейБюдж Цикл
							ТекСтрокаБюдж.Сумма = ТекСтрокаБюдж.Сумма + ТекСтрока.СуммаБДДС;
						КонецЦикла;
						НаборЗаписейБюдж.Записать();
					Иначе
						НоваяСтрока = НаборЗаписей.Добавить();
						НоваяСтрока.ДатаПлатежа = НачалоМесяца(ТекСтрока.Месяц);
						НоваяСтрока.Документ = Источник.Ссылка;
						НоваяСтрока.УИДСтрокиДокумента = ?(ЗначениеЗаполнено(ТекСтрока.УИД), ТекСтрока.УИД, Строка(Источник.Номер) + "Корр" + Строка(ТекСтрока.НомерСтроки));
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
						НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Оплата;
						НоваяСтрока.Сценарий = АктуальныйСценарий;
						НоваяСтрока.НазначениеПлатежа = ТекСтрока.Основание;
						НоваяСтрока.НазначениеПлатежаУчет = ТекСтрока.Основание;
						//НоваяСтрока.Источник = ТекСтрока.СчетОрганизации;
						НоваяСтрока.Предприятие = Источник.Предприятие;
						НоваяСтрока.ЦФО = ТекСтрока.Предприятие;
						НоваяСтрока.ПодразделениеЦФО = ТекСтрока.Подразделение;
						НоваяСтрока.СтатьяДДС = ТекСТрока.СтатьяБДДС;
						НоваяСтрока.Сумма = ТекСТрока.СуммаБДДС;
						ВалютаПредприятия = ?(ЗначениеЗаполнено(ТекСтрока.ПредприятиеОсновнаяВалютаУчета), ТекСтрока.ПредприятиеОсновнаяВалютаУчета, УЧ_Сервер.НациональнаяВалюта());
						//Если ЗначениеЗаполнено(Источник.Валюта) И НЕ Источник.Валюта = ВалютаПредприятия Тогда
						//	ПлановыйКурс = РасчетыБюджет.ПолучитьПлановыйКурс(Источник.Сценарий, Источник.Валюта, ВалютаПредприятия, Источник.Дата);
						//	//НоваяСтрока.ВалютнаяСумма = НоваяСтрока.Сумма;
						//	НоваяСтрока.Сумма = ?(ПлановыйКурс.Курс, НоваяСтрока.ВалютнаяСумма * ПлановыйКурс.Курс, НоваяСтрока.ВалютнаяСумма);
						//Иначе
							НоваяСтрока.Валюта = ВалютаПредприятия;	
						//КонецЕсли;
						//НоваяСтрока.НазначениеПлатежаУчет = ТекСтрока.Основание;
						НоваяСтрока.ТочкаМаршрута = ТекТочкаМаршрута;
						//НоваяСтрока.Источник = ?(ТекСтрока.Источник = Перечисления.Д_ИсточникиСредств.Казна, Справочники.Кассы.Виртуальный, ТекСтрока.СчетОрганизации);
						Если ТипЗнч(НоваяСтрока.Источник) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
							НоваяСтрока.Организация = ТекСтрока.СчетОрганизацииВладелец;				
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла; 
				
				НаборЗаписей.Записать();
			Иначе //обычная перезапись, например при удалении заявки
				НаборЗаписей = РегистрыСведений.сабГрафикПлатежей.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Документ.Установить(Источник.Ссылка);
				НаборЗаписей.Прочитать();
				
				Для каждого ТекЗапись Из НаборЗаписей Цикл
					ТекЗапись.ОснованиеПометкаУдаления = Источник.ПометкаУдаления;			
				КонецЦикла; 			
				
				НаборЗаписей.Записать();
			КонецЕсли;
		Иначе
			НаборЗаписей = РегистрыСведений.сабГрафикПлатежей.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Документ.Установить(Источник.Ссылка);
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
		КонецЕсли;
	ИначеЕсли ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		Если Источник.ДополнительныеСвойства.Свойство("Модифицирован") И Источник.ДополнительныеСвойства.Модифицирован Тогда
			НаборЗаписей = РегистрыСведений.сабГрафикПлатежей.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Документ.Установить(Источник.Ссылка);
			НаборЗаписей.Прочитать();
			сабОбщегоНазначения.ВернутьСуммуБюджета(Источник, НаборЗаписей);
			НаборЗаписей.Очистить();
			НоваяСтрока = НаборЗаписей.Добавить();
			НоваяСтрока.Документ = Источник.Ссылка;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник);
			НоваяСтрока.Сумма = Источник.Товары.Итог("Сумма");
			НоваяСтрока.СуммаНДС = Источник.Товары.Итог("СуммаНДС");
			Если Источник.Товары.Количество() Тогда
				НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(Источник.Товары[0].СтавкаНДС);
			КонецЕсли;
			НоваяСтрока.Предприятие = Источник.Организация.Предприятие;
			НоваяСтрока.ЦФО = Источник.Организация.Предприятие;
			НоваяСтрока.ПодразделениеЦФО = Источник.ПодразделениеОрганизации;
			НоваяСтрока.Комментарий = Источник.Комментарий;
			НоваяСтрока.ДатаПлатежа = Источник.ДополнительныеСвойства.СрокОплаты;
			НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Поступление;
			НоваяСтрока.Источник = Источник.СтруктурнаяЕдиница;
			НоваяСтрока.Договор = Источник.ДоговорКонтрагента;
			НоваяСтрока.Валюта = Источник.ВалютаДокумента;
			НоваяСтрока.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателя;
			НаборЗаписей.Записать();
			
			сабОбщегоНазначения.СкорректироватьЗаписиБюджетаПоНаборуЗаписей(НаборЗаписей);
			
		Иначе //обычная перезапись, например при удалении заявки
			НаборЗаписей = РегистрыСведений.сабГрафикПлатежей.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Документ.Установить(Источник.Ссылка);
			НаборЗаписей.Прочитать();
			
			Для каждого ТекЗапись Из НаборЗаписей Цикл
				ТекЗапись.ОснованиеПометкаУдаления = Источник.ПометкаУдаления;			
			КонецЦикла; 			
			
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура сабОчисткаСтарыхСтрокГрафикаПлатежей() Экспорт
	
	ПолныйНаборЗаписей = РегистрыСведений.сабГрафикПлатежей.СоздатьНаборЗаписей();
	МассивкУдалению = Новый Массив;
	ПолныйНаборЗаписей.Прочитать();
	Для каждого ТекЗапись Из ПолныйНаборЗаписей Цикл
		Если Не ЗначениеЗаполнено(ТекЗапись.Документ) Тогда //очищаем без дока-основания, глючные
			МассивкУдалению.Добавить(ТекЗапись);
		ИначеЕсли ТекЗапись.ДатаПлатежа < ТекущаяДата() - 7*24*60*60 И ЗначениеЗаполнено(ТекЗапись.УИДСтрокиДокумента) Тогда //очищаем старые в реестрах
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Согласование1.Завершен КАК Завершен
			|ИЗ
			|	Документ.Д_ЗаявкаНаОплату.ЗаявкаБезнал КАК Д_ЗаявкаНаОплатуЗаявкаБезнал
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Согласование1 КАК Согласование1
			|		ПО Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка = Согласование1.Заявка
			|			И (Согласование1.Завершен = ИСТИНА)
			|ГДЕ
			|	Д_ЗаявкаНаОплатуЗаявкаБезнал.УИДСтроки = &УИДСтроки";
			
			Запрос.УстановитьПараметр("УИДСтроки", ТекЗапись.УИДСтрокиДокумента);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Если Выборка.Следующий() Тогда
				МассивкУдалению.Добавить(ТекЗапись);
			КонецЕсли;;
			
		ИначеЕсли НЕ ТекЗапись.Сумма Тогда //пустые
			МассивкУдалению.Добавить(ТекЗапись);
		ИначеЕсли ТипЗнч(ТекЗапись.Документ) = Тип("ДокументСсылка.Д_Бюджет") И НачалоМесяца(ТекЗапись.Документ.Дата) < НачалоМесяца(ТекущаяДата()) Тогда //очищаем от старых бюджетных строк
			МассивкУдалению.Добавить(ТекЗапись);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекСтрока Из МассивкУдалению Цикл
		ПолныйНаборЗаписей.Удалить(ТекСтрока);
	КонецЦикла;
	
	ПолныйНаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ВернутьСуммуБюджета(Источник, НаборЗаписей = Неопределено) Экспорт
	
	Если Не НаборЗаписей = Неопределено Тогда
		Для каждого ТекСтрока Из НаборЗаписей Цикл
			Если ЗначениеЗаполнено(ТекСтрока.УИДСтрокиБюджета) Тогда			
				НаборБюджета = РегистрыСведений.сабГрафикПлатежей.СоздатьНаборЗаписей();
				НаборБюджета.Отбор.УИДСтрокиДокумента.Установить(ТекСтрока.УИДСтрокиБюджета);
				НаборБюджета.Прочитать();
				Для каждого ТекСтрокаНабораБюджета Из НаборБюджета Цикл
					ТекСтрокаНабораБюджета.Сумма = ТекСтрокаНабораБюджета.Сумма + ТекСтрока.Сумма;
				КонецЦикла;
				НаборБюджета.Записать();
			КонецЕсли;	
		КонецЦикла;
	Иначе	
		//НайденныеСтроки = Источник.СтрокиГрафикаБюджета.НайтиСтроки(Новый Структура("Использовать", Истина));
		//Для каждого ТекСтрока Из НайденныеСтроки Цикл
		//	Если НЕ ТекСтрока.Использовать ИЛИ Не ЗначениеЗаполнено(ТекСтрока.УИДСтроки) Тогда
		//		Продолжить;					
		//	КонецЕсли;
		//	НаборБюджета = РегистрыСведений.сабГрафикПлатежей.СоздатьНаборЗаписей();
		//	НаборБюджета.Отбор.УИДСтрокиДокумента.Установить(ТекСтрока.УИДСтроки);
		//	НаборБюджета.Прочитать();
		//	Для каждого ТекСтрокаНабораБюджета Из НаборБюджета Цикл
		//		Если Источник.РасшифровкаПлатежа Тогда
		//			НайденныеСтрокиРасшифровки = Источник.ТабличнаяЧасть.НайтиСтроки(Новый Структура("УИДСтроки", ТекСтрока.УИДСтрокиРасшифровки));
		//			Если НайденныеСтрокиРасшифровки.Количество() Тогда
		//				ТекСуммаЗаявки = НайденныеСтрокиРасшифровки[0].Сумма;
		//			Иначе
		//				ТекСуммаЗаявки = 0;	
		//			КонецЕсли;
		//		Иначе
		//			ТекСуммаЗаявки = Источник.Сумма;
		//		КонецЕсли;
		//		Если ТекСтрокаНабораБюджета.УИДСтрокиДокумента = ТекСтрока.УИДСтроки И ТекСтрокаНабораБюджета.Сумма = ТекСтрока.СуммаБюджета Тогда
		//			Если ТекСтрокаНабораБюджета.Сумма > ТекСуммаЗаявки Тогда
		//				ТекСтрокаНабораБюджета.Сумма = ТекСтрокаНабораБюджета.Сумма + ТекСуммаЗаявки;
		//			Иначе
		//				ТекСтрокаНабораБюджета.Сумма = 0;						
		//			КонецЕсли;					
		//		КонецЕсли;
		//	КонецЦикла;
		//	НаборБюджета.Записать();
		//КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура СкорректироватьЗаписиБюджетаПоНаборуЗаписей(НаборЗаписей) Экспорт
	
	НайденныеСтроки = НаборЗаписей;
	Для каждого ТекСтрока Из НайденныеСтроки Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	сабГрафикПлатежей.Документ КАК Документ,
		               |	сабГрафикПлатежей.Источник КАК Источник,
		               |	сабГрафикПлатежей.УИДСтрокиДокумента КАК УИДСтроки,
		               |	сабГрафикПлатежей.Сумма КАК Сумма,
		               |	сабГрафикПлатежей.Сумма КАК СуммаБюджета,
		               |	сабГрафикПлатежей.НазначениеПлатежаУчет КАК Основание
		               |ИЗ
		               |	РегистрСведений.сабГрафикПлатежей КАК сабГрафикПлатежей
		               |ГДЕ
		               |	сабГрафикПлатежей.ЦФО = &ЦФО
		               |	И сабГрафикПлатежей.СтатьяДДС = &СтатьяДДС
		               |	И сабГрафикПлатежей.Документ.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		               |	И НЕ сабГрафикПлатежей.Сценарий = ЗНАЧЕНИЕ(Справочник.СценарииПланирования.ПустаяСсылка)
		               |	И сабГрафикПлатежей.Источник = &Источник";
		
		Запрос.УстановитьПараметр("ЦФО", ТекСтрока.ЦФО);
		Запрос.УстановитьПараметр("Источник", ТекСтрока.Источник);
		Запрос.УстановитьПараметр("СтатьяДДС", ТекСтрока.СтатьяДДС);
		Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(ТекСтрока.ДатаПлатежа));
		Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(ТекСтрока.ДатаПлатежа));
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НаборБюджета = РегистрыСведений.сабГрафикПлатежей.СоздатьНаборЗаписей();
			НаборБюджета.Отбор.Документ.Установить(Выборка.Документ);
			НаборБюджета.Прочитать();
			ТекСумма = ТекСтрока.Сумма;
			Для каждого ТекСтрокаНабораБюджета Из НаборБюджета Цикл
				Если НЕ ТекСтрокаНабораБюджета.Сумма Тогда
					Продолжить;				
				КонецЕсли;
				Если ТекСтрокаНабораБюджета.ЦФО = ТекСтрока.ЦФО И ТекСтрокаНабораБюджета.СтатьяДДС = ТекСтрока.СтатьяДДС И ТекСтрокаНабораБюджета.Источник = ТекСтрока.Источник Тогда
					Если ТекСтрокаНабораБюджета.Сумма > ТекСумма Тогда
						ТекСтрокаНабораБюджета.Сумма = ТекСтрокаНабораБюджета.Сумма - ТекСумма;
					Иначе
						ТекСумма = ТекСумма - ТекСтрокаНабораБюджета.Сумма;
						ТекСтрокаНабораБюджета.Сумма = 0;
					КонецЕсли;
					ТекСтрока.УИДСтрокиБюджета = ТекСтрокаНабораБюджета.УИДСтрокиДокумента;
				КонецЕсли;
			КонецЦикла;
			НаборБюджета.Записать();
		КонецЦикла;
	КонецЦикла;
	
	НайденныеСтроки.Записать();

КонецПроцедуры

Процедура СкорректироватьЗаписиБюджета(Источник) Экспорт

	НайденныеСтроки = Источник.СтрокиГрафикаБюджета.НайтиСтроки(Новый Структура("Использовать", Истина));
	Для каждого ТекСтрока Из НайденныеСтроки Цикл
		Если НЕ ТекСтрока.Использовать ИЛИ Не ЗначениеЗаполнено(ТекСтрока.УИДСтроки) Тогда
			Продолжить;					
		КонецЕсли;
		НаборБюджета = РегистрыСведений.сабГрафикПлатежей.СоздатьНаборЗаписей();
		НаборБюджета.Отбор.УИДСтрокиДокумента.Установить(ТекСтрока.УИДСтроки);
		НаборБюджета.Прочитать();
		Для каждого ТекСтрокаНабораБюджета Из НаборБюджета Цикл
			Если Источник.РасшифровкаПлатежа Тогда
				НайденныеСтрокиРасшифровки = Источник.ТабличнаяЧасть.НайтиСтроки(Новый Структура("УИДСтроки", ТекСтрока.УИДСтрокиРасшифровки));
				Если НайденныеСтрокиРасшифровки.Количество() Тогда
					ТекСуммаЗаявки = НайденныеСтрокиРасшифровки[0].Сумма;
				Иначе
					ТекСуммаЗаявки = 0;	
				КонецЕсли;
			Иначе
				ТекСуммаЗаявки = Источник.Сумма;
			КонецЕсли;
			Если ТекСтрокаНабораБюджета.УИДСтрокиДокумента = ТекСтрока.УИДСтроки Тогда
				Если ТекСтрокаНабораБюджета.Сумма > ТекСуммаЗаявки Тогда
					ТекСтрокаНабораБюджета.Сумма = ТекСтрокаНабораБюджета.Сумма - ТекСуммаЗаявки;
				Иначе
					ТекСтрокаНабораБюджета.Сумма = 0;						
				КонецЕсли;					
			КонецЕсли;
		КонецЦикла;
		НаборБюджета.Записать();
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьОплатыСрокИзГрафика(Документ) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МАКСИМУМ(сабГрафикПлатежей.ДатаПлатежа) КАК ДатаПлатежа
	               |ИЗ
	               |	РегистрСведений.сабГрафикПлатежей КАК сабГрафикПлатежей
	               |ГДЕ
	               |	сабГрафикПлатежей.Документ = &Документ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаПлатежа";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.ДатаПлатежа;
	КонецЦикла;

КонецФункции // ()

// Функция возвращает название месяца по его номеру
//
Функция ПолучитьТекущийМесяцСервер(НомерМесяца) Экспорт

	Месяцы = Новый Массив;
	Месяцы.Добавить("Январь");
	Месяцы.Добавить("Февраль");
	Месяцы.Добавить("Март");
	Месяцы.Добавить("Апрель");
	Месяцы.Добавить("Май");
	Месяцы.Добавить("Июнь");
	Месяцы.Добавить("Июль");
	Месяцы.Добавить("Август");
	Месяцы.Добавить("Сентябрь");
	Месяцы.Добавить("Октябрь");
	Месяцы.Добавить("Ноябрь");
	Месяцы.Добавить("Декабрь");
		
	Возврат Месяцы[НомерМесяца - 1];

КонецФункции // ПолучитьТекущийМесяцСервер()

// <Описание функции>
//
Функция ПолучитьРасстояниеМеждуПунктами(Пункт1, Пункт2) Экспорт

	РасстоянияМеждуПунктами = РегистрыСведений.Л_РасстоянияМеждуПунктами;
	ОтборПунктов = Новый Структура;
	ОтборПунктов.Вставить("Пункт1", Пункт1);
	ОтборПунктов.Вставить("Пункт2", Пункт2);
	ОтборПунктов1 = Новый Структура;
	ОтборПунктов1.Вставить("Пункт1", Пункт2);
	ОтборПунктов1.Вставить("Пункт2",  Пункт1);
	
	Возврат ?(РасстоянияМеждуПунктами.Получить(ОтборПунктов).Расстояние = 0, РасстоянияМеждуПунктами.Получить(ОтборПунктов1), РасстоянияМеждуПунктами.Получить(ОтборПунктов)); 

КонецФункции // ПолучитьРасстояниеМеждуПунктами() 

//
//
Функция ПолучитьДоступныеВагоныНаДатуПлан(Период) Экспорт
	
	ЗапросВагонов = Новый Запрос;
	ЗапросВагонов.УстановитьПараметр("Период", Период);
	ЗапросВагонов.Текст = "ВЫБРАТЬ
	                      |	Л_МестоположенияТСПланСрезПоследних.Пункт,
	                      |	КОЛИЧЕСТВО(Л_МестоположенияТСПланСрезПоследних.ТранспортноеСредство) КАК КоличествоЦистерн
	                      |ИЗ
	                      |	РегистрСведений.Л_МестоположенияТСПлан.СрезПоследних(&Период, КоличествоГруза = 0) КАК Л_МестоположенияТСПланСрезПоследних
	                      |ГДЕ
	                      |	Л_МестоположенияТСПланСрезПоследних.Зарезервирован = ЛОЖЬ
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	Л_МестоположенияТСПланСрезПоследних.Пункт";
						  
	ТЗ_Рез = ЗапросВагонов.Выполнить().Выгрузить();
	
	Возврат ТЗ_Рез;
	
КонецФункции

Функция ПроверитьПотребностиНаДату(Период) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", Период);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Л_ПотребностиКонтрагентовНаМесяцПлан.Количество
	               |ИЗ
	               |	РегистрСведений.Л_ПотребностиКонтрагентовНаМесяцПлан КАК Л_ПотребностиКонтрагентовНаМесяцПлан
	               |ГДЕ
	               |	Л_ПотребностиКонтрагентовНаМесяцПлан.Период = &Дата";
				   
	ТЗ_Рез = Запрос.Выполнить().Выгрузить();
	
	Возврат ТЗ_Рез.Количество();
	
КонецФункции

// Функция возвращает таблицу фактических остатков по заводам на заданный период 
//
Функция ПолучитьФактическиеОстаткиПоЗаводу(Завод, Период) Экспорт

	ЗапросОстатков = Новый Запрос;
	ЗапросОстатков.УстановитьПараметр("Период", НачалоМесяца(Период));
	ЗапросОстатков.УстановитьПараметр("Завод", Завод);
	ЗапросОстатков.Текст  = "ВЫБРАТЬ
	                        |	Л_ВводОстатковОстатки.Завод,
	                        |	СУММА(Л_ВводОстатковОстатки.Остаток) КАК Остаток
	                        |ИЗ
	                        |	Документ.Л_ВводОстатков.Остатки КАК Л_ВводОстатковОстатки
	                        |ГДЕ
	                        |	Л_ВводОстатковОстатки.Ссылка.Дата = &Период
	                        |	И Л_ВводОстатковОстатки.Завод = &Завод
	                        |
	                        |СГРУППИРОВАТЬ ПО
	                        |	Л_ВводОстатковОстатки.Завод";
							
	ТЗ_Остатки = ЗапросОстатков.Выполнить().Выгрузить();
	
	Возврат ТЗ_Остатки;	

КонецФункции // ПроверитьОстаткиПоЗаводам()

// Функция возвращает планируемый объем производства завода на заданный месяц
//
Функция ПолучитьПланПроизводстваНаМесяц(Завод, Период) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Завод", Завод);
	Запрос.УстановитьПараметр("НачМес", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонМес", КонецМесяца(Период));
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Л_ПланПроизводстваНаМесяц.КолПроизводстваПлан
	               |ИЗ
	               |	Документ.Л_ПланПроизводстваНаМесяц КАК Л_ПланПроизводстваНаМесяц
	               |ГДЕ
	               |	Л_ПланПроизводстваНаМесяц.Дата >= &НачМес
	               |	И Л_ПланПроизводстваНаМесяц.Завод = &Завод
	               |	И Л_ПланПроизводстваНаМесяц.Дата <= &КонМес";
				   
	ТЗ_Рез = Запрос.Выполнить().Выгрузить();
	
	ОбщийОбъем = 0;
	
	Для Каждого Строка Из ТЗ_Рез Цикл
		ОбщийОбъем = ОбщийОбъем + Строка.КолПроизводстваПлан;
	КонецЦикла;
	
	Возврат ОбщийОбъем
		
КонецФункции

// Функция возвращает таблицу потребностей по контрагентам на заданный период
//
Функция ПолучитьПотребностиКонтрагентов(Период) Экспорт

	ЗапросПотребностей = Новый Запрос;
	ЗапросПотребностей.УстановитьПараметр("ДатаКон", Период);
	ЗапросПотребностей.Текст = "ВЫБРАТЬ
	                           |	Л_КоличествоСпиртаВЗаказеОбороты.Заказ,
	                           |	Л_КоличествоСпиртаВЗаказеОбороты.НомерНоменклатуры КАК НомерНоменклатурыПотр,
	                           |	Л_КоличествоСпиртаВЗаказеОбороты.КоличествоПриход КАК Количество
	                           |ИЗ
	                           |	РегистрНакопления.Л_КоличествоСпиртаВЗаказе.Обороты(, &ДатаКон, , ) КАК Л_КоличествоСпиртаВЗаказеОбороты";
							   
	ТЗ_Потребности = ЗапросПотребностей.Выполнить().Выгрузить();
	
	Возврат ТЗ_Потребности;

КонецФункции // ПолучитьПотребностиКонтрагентов()

// Функция возвращает таблицу вагонов, находящихся на станции
//
Функция ПолучитьВагоныНаСтанции(Период, Станция, ПолучатьСвободные) Экспорт

	ЗапросВагонов = Новый Запрос;
	ЗапросВагонов.УстановитьПараметр("Станция", Станция);
	ЗапросВагонов.УстановитьПараметр("Период", Период);
	ЗапросВагонов.Текст = "ВЫБРАТЬ
	                      |	Л_МестоположенияТСПланСрезПоследнихСт.Период КАК ДатаПрибытия,
	                      |	Л_МестоположенияТСПланСрезПоследнихСт.ТранспортноеСредство КАК Вагон,
	                      |	Л_МестоположенияТСПланСрезПоследнихСт.КоличествоГруза КАК КоличествоГруза,
	                      |	Л_МестоположенияТСПланСрезПоследнихСт.НомерНоменклатуры КАК НомерНоменклатуры,
	                      |	Л_МестоположенияТСПланСрезПоследнихСт.Зарезервирован КАК Зарезервирован
	                      |ИЗ
	                      |	РегистрСведений.Л_МестоположенияТСПлан.СрезПоследних(&Период, Пункт = &Станция) КАК Л_МестоположенияТСПланСрезПоследнихСт
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Л_МестоположенияТСПлан.СрезПоследних КАК Л_МестоположенияТСПланСрезПоследних
	                      |		ПО Л_МестоположенияТСПланСрезПоследнихСт.ТранспортноеСредство = Л_МестоположенияТСПланСрезПоследних.ТранспортноеСредство
	                      |			И Л_МестоположенияТСПланСрезПоследнихСт.Период = Л_МестоположенияТСПланСрезПоследних.Период
	                      |ГДЕ
	                      |	Л_МестоположенияТСПланСрезПоследнихСт.КоличествоГруза = 0
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ДатаПрибытия";
						  
	ТЗ_ВагоныНаСтанции = ЗапросВагонов.Выполнить().Выгрузить();
	
	КолвоСтрок = ТЗ_ВагоныНаСтанции.Количество();
	Для ОбратныйИндекс = 1 По КолвоСтрок Цикл
		Если ТЗ_ВагоныНаСтанции[КолвоСтрок - ОбратныйИндекс].Зарезервирован Тогда
			Если Не ПолучатьСвободные Тогда
				Продолжить;
			КонецЕсли
		Иначе
			Если ПолучатьСвободные Тогда
				Продолжить;
			КонецЕсли	
		КонецЕсли;
		ТЗ_ВагоныНаСтанции.Удалить(КолвоСтрок - ОбратныйИндекс);	
	КонецЦикла;
	
	Возврат ТЗ_ВагоныНаСтанции;

КонецФункции // ПолучитьВагоны()
  
//Функция возвращает ссылку на контрагента "Спецтранс" ,который является нашим перевозчиком
//Используется для передачи в СКД
&НаСервере
Функция ПолучитьСпецтранс() Экспорт
	Возврат Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", "5260310532")
КонецФункции

&НаСервере
Функция ПолучитьОТК() Экспорт
	Возврат Справочники.Предприятия.НайтиПоНаименованию("ОТК")
КонецФункции


Функция ПолучитьСтатью() Экспорт 
	Возврат Справочники.СтатьиЗатрат.НайтиПоКоду("2060.08");
КонецФункции

Функция ПолучитьСрезВагоновНаДату(Дата) Экспорт
				
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДата", Дата);
	Запрос.Текст = "ВЫБРАТЬ
	               |	МАКСИМУМ(Л_ОтправкаВагоновСобытияСВагонами.ДатаСобытия) КАК ДатаСобытия,
	               |	Л_ОтправкаВагоновСобытияСВагонами.Ссылка.Вагон КАК Вагон,
	               |	МАКСИМУМ(Л_ОтправкаВагоновСобытияСВагонами.Ссылка.Дата) КАК Дата
	               |ПОМЕСТИТЬ последнееСобытие
	               |ИЗ
	               |	Документ.Л_ОтправкаВагонов.СобытияСВагонами КАК Л_ОтправкаВагоновСобытияСВагонами
	               |ГДЕ
	               |	Л_ОтправкаВагоновСобытияСВагонами.ДатаСобытия <= &ТекДата
	               |	И Л_ОтправкаВагоновСобытияСВагонами.Ссылка.Вагон <> ЗНАЧЕНИЕ(Справочник.Л_Вагоны.ПустаяСсылка)
	               |	И Л_ОтправкаВагоновСобытияСВагонами.Событие <> ЗНАЧЕНИЕ(Справочник.Л_СобытияЖД.ПромежуточнаяСтанция)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Л_ОтправкаВагоновСобытияСВагонами.Ссылка.Вагон
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(последнееСобытие.ДатаСобытия) КАК ДатаСобытия,
	               |	последнееСобытие.Вагон,
	               |	Л_ОтправкаВагоновСобытияСВагонами.Ссылка КАК Док,
	               |	МАКСИМУМ(Л_ОтправкаВагоновСобытияСВагонами.Событие) КАК Событие
	               |ИЗ
	               |	последнееСобытие КАК последнееСобытие
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Л_ОтправкаВагонов.СобытияСВагонами КАК Л_ОтправкаВагоновСобытияСВагонами
	               |		ПО последнееСобытие.Вагон = Л_ОтправкаВагоновСобытияСВагонами.Ссылка.Вагон
	               |			И последнееСобытие.ДатаСобытия = Л_ОтправкаВагоновСобытияСВагонами.ДатаСобытия
	               |ГДЕ
	               |	Л_ОтправкаВагоновСобытияСВагонами.Событие <> ЗНАЧЕНИЕ(Справочник.Л_СобытияЖД.ПромежуточнаяСтанция)
	               |	И Л_ОтправкаВагоновСобытияСВагонами.Ссылка.ПометкаУдаления = ЛОЖЬ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	последнееСобытие.Вагон,
	               |	Л_ОтправкаВагоновСобытияСВагонами.Ссылка
	               |АВТОУПОРЯДОЧИВАНИЕ";
				   
	//Запрос.Текст = "ВЫБРАТЬ
	//			   |	МАКСИМУМ(Л_ОтправкаВагоновСобытияСВагонами.ДатаСобытия) КАК ДатаСобытия,
	//			   |	Л_ОтправкаВагоновСобытияСВагонами.Ссылка.Вагон
	//			   |ПОМЕСТИТЬ ПоследнееСобытиеПоРейсу
	//			   |ИЗ
	//			   |	Документ.Л_ОтправкаВагонов.СобытияСВагонами КАК Л_ОтправкаВагоновСобытияСВагонами
	//			   |ГДЕ
	//			   |	Л_ОтправкаВагоновСобытияСВагонами.ДатаСобытия <= &ТекДата
	//			   |	И Л_ОтправкаВагоновСобытияСВагонами.Ссылка.Вагон <> ЗНАЧЕНИЕ(Справочник.Л_Вагоны.Пустаяссылка)
	//			   |	И Л_ОтправкаВагоновСобытияСВагонами.Событие <> ЗНАЧЕНИЕ(Справочник.Л_СобытияЖД.ПромежуточнаяСтанция)
	//			   |
	//			   |СГРУППИРОВАТЬ ПО
	//			   |	Л_ОтправкаВагоновСобытияСВагонами.Ссылка.Вагон
	//			   |;
	//			   |
	//			   |////////////////////////////////////////////////////////////////////////////////
	//			   |ВЫБРАТЬ
	//			   |	МАКСИМУМ(Л_ОтправкаВагоновСобытияСВагонами.НомерСтроки) КАК НомерСтроки,
	//			   |	МАКСИМУМ(Л_ОтправкаВагоновСобытияСВагонами.ДатаСобытия) КАК ДатаСобытия,
	//			   |	Л_ОтправкаВагоновСобытияСВагонами.Ссылка,
	//			   |	Л_ОтправкаВагоновСобытияСВагонами.Ссылка.Вагон
	//			   |ПОМЕСТИТЬ ПоследнееСНомеромПоследнейСтроки
	//			   |ИЗ
	//			   |	Документ.Л_ОтправкаВагонов.СобытияСВагонами КАК Л_ОтправкаВагоновСобытияСВагонами
	//			   |ГДЕ
	//			   |	Л_ОтправкаВагоновСобытияСВагонами.Событие <> ЗНАЧЕНИЕ(Справочник.Л_СобытияЖД.ПромежуточнаяСтанция)
	//			   |
	//			   |СГРУППИРОВАТЬ ПО
	//			   |	Л_ОтправкаВагоновСобытияСВагонами.Ссылка,
	//			   |	Л_ОтправкаВагоновСобытияСВагонами.Ссылка.Вагон
	//			   |;
	//			   |
	//			   |////////////////////////////////////////////////////////////////////////////////
	//			   |ВЫБРАТЬ
	//			   |	ПоследнееСНомеромПоследнейСтроки.Ссылка,
	//			   |	ПоследнееСНомеромПоследнейСтроки.НомерСтроки
	//			   |ПОМЕСТИТЬ ПоследниеДокументИНомерСтроки
	//			   |ИЗ
	//			   |	ПоследнееСобытиеПоРейсу КАК ПоследнееСобытиеПоРейсу
	//			   |		ЛЕВОЕ СОЕДИНЕНИЕ ПоследнееСНомеромПоследнейСтроки КАК ПоследнееСНомеромПоследнейСтроки
	//			   |		ПО ПоследнееСобытиеПоРейсу.ДатаСобытия = ПоследнееСНомеромПоследнейСтроки.ДатаСобытия
	//			   |			И ПоследнееСобытиеПоРейсу.Вагон = ПоследнееСНомеромПоследнейСтроки.Вагон
	//			   |;
	//			   |
	//			   |////////////////////////////////////////////////////////////////////////////////
	//			   |ВЫБРАТЬ
	//			   |	Л_ОтправкаВагоновСобытияСВагонами.Событие,
	//			   |	Л_ОтправкаВагоновСобытияСВагонами.ДатаСобытия,
	//			   |	Л_ОтправкаВагоновСобытияСВагонами.Ссылка КАК Док,
	//			   |	Л_ОтправкаВагоновСобытияСВагонами.Ссылка.Вагон
	//			   |ИЗ
	//			   |	ПоследниеДокументИНомерСтроки КАК ПоследниеДокументИНомерСтроки
	//			   |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Л_ОтправкаВагонов.СобытияСВагонами КАК Л_ОтправкаВагоновСобытияСВагонами
	//			   |		ПО ПоследниеДокументИНомерСтроки.Ссылка = Л_ОтправкаВагоновСобытияСВагонами.Ссылка
	//			   |			И ПоследниеДокументИНомерСтроки.НомерСтроки = Л_ОтправкаВагоновСобытияСВагонами.НомерСтроки";			   
				   
	ТЗ_ВсеСобытия = Запрос.Выполнить().Выгрузить();
		
	ТЗ_ВсеСобытия.Сортировать("Вагон Возр, ДатаСобытия Возр");
	
	Возврат ТЗ_ВсеСобытия;
	
КонецФункции

Функция ПолучитьРегион(Адрес) Экспорт
	Возврат Лев(Адрес, Найти(Адрес, ",")-1)	
КонецФункции

Функция КоличествоПрикрепленныхФайлов(Ссылка) экспорт
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	КОЛИЧЕСТВО(Файлы.Ссылка) КАК Количество
	//|ИЗ
	//|	Справочник.Файлы КАК Файлы
	//|ГДЕ
	//|	Файлы.ДокументыПоФайлу.ВладелецФайла = &ВладелецФайла";
	//Запрос.УстановитьПараметр("ВладелецФайла", Ссылка);
	//Выборка = Запрос.Выполнить().Выбрать();
	//КоличествоФайлов = 0;
	//Пока Выборка.Следующий() Цикл
	//	КоличествоФайлов = Выборка.Количество;	
	//КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	1 КАК Поле1
	               |ИЗ
	               |	РегистрСведений.ПрикрепленныеОбъекты КАК ПрикрепленныеОбъекты
	               |ГДЕ
	               |	ПрикрепленныеОбъекты.Владелец = &Владелец
	               |	И ПрикрепленныеОбъекты.ВладелецИмяТЧ = """"";
	
	Запрос.УстановитьПараметр("Владелец", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Возврат Выборка.Количество();
	
КонецФункции

Процедура ОбновитьКоличествоПрикрепленныхФайловСервер(Форма) экспорт
	//Если ТипЗнч(Форма.Объект.Ссылка) = Тип("ЗадачаСсылка.Задача") тогда
	//	КоличествоФайлов = КоличествоПрикрепленныхФайлов(Форма.Объект.Заявка);
	//	Если КоличествоФайлов = 0 Тогда
	//		Форма.Элементы.ОткрытьФайл.Видимость = Ложь;
	//	Иначе
	//		Форма.Элементы.ОткрытьФайл.Видимость = Истина;
	//		Форма.Элементы.ОткрытьФайл.Заголовок = "Прикрепленные объекты (" + КоличествоФайлов + ")";
	//	КонецЕсли;
	//иначе
		Если НЕ Форма.Элементы.Найти("СправочникФайлыПрикрепленныеФайлы") = Неопределено Тогда
			КоличествоФайлов = КоличествоПрикрепленныхФайлов(Форма.Объект.Ссылка);
			Если КоличествоФайлов = 0 Тогда
				Форма.Элементы.СправочникФайлыПрикрепленныеФайлы.Заголовок = "Прикрепленные объекты";
			Иначе
				Форма.Элементы.СправочникФайлыПрикрепленныеФайлы.Заголовок = "Прикрепленные объекты (" + КоличествоФайлов + ")";
			КонецЕсли;
		КонецЕсли;
	//КонецЕсли;
КонецПроцедуры


Функция ИмеютсяНесохраненныеДанные() экспорт
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	АвтосохранениеДанных.Дата
	               |ИЗ
	               |	РегистрСведений.АвтосохранениеДанных КАК АвтосохранениеДанных
	               |ГДЕ
	               |	АвтосохранениеДанных.Пользователь = &Пользователь
	               |	И НЕ АвтосохранениеДанных.Объект = НЕОПРЕДЕЛЕНО";
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	
	Возврат НЕ ?(Результат.Количество(),Ложь, Истина);
	
КонецФункции

Процедура АвтосохранениеРеквизитовФормы(Форма) экспорт
	
	СохраняемыеРеквизиты = новый Структура;  //ссылка = Документы.УЧ_Операция.НайтиПоНомеру("0"); Реквизиты = ссылка.Метаданные().Реквизиты;
	
	Реквизиты = Форма.Объект.Ссылка.Метаданные().Реквизиты;
	Для Каждого Реквизит Из Реквизиты Цикл
		Если ТипЗнч(Форма.Объект.Ссылка[Реквизит.Имя]) <> Тип("ХранилищеЗначения") Тогда
			СохраняемыеРеквизиты.Вставить(Реквизит.Имя, Форма.Объект[Реквизит.Имя]);
		КонецЕсли;
	КонецЦикла;
	
	ТабличныеЧасти = Форма.Объект.Ссылка.Метаданные().ТабличныеЧасти;
	Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		СохраняемыеРеквизиты.Вставить(ТабличнаяЧасть.Имя, Форма.Объект[ТабличнаяЧасть.Имя].Выгрузить());
	КонецЦикла;
	
	МенеджерЗаписи = РегистрыСведений.АвтосохранениеДанных.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = БюджетныйНаСервере.ПолучитьПользователя();
	МенеджерЗаписи.Объект       = Форма.Объект.Ссылка;
	МенеджерЗаписи.Данные       = новый ХранилищеЗначения(СохраняемыеРеквизиты);
	МенеджерЗаписи.Дата			= ТекущаяДата();
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Процедура ВосстановлениеРеквизитовФормы(Форма) экспорт

	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	АвтосохранениеДанных.Данные
	               |ИЗ
	               |	РегистрСведений.АвтосохранениеДанных КАК АвтосохранениеДанных
	               |ГДЕ
	               |	АвтосохранениеДанных.Пользователь = &Пользователь
	               |	И АвтосохранениеДанных.Объект = &Объект";
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Объект = Форма.Объект.Ссылка;
	Запрос.УстановитьПараметр("Объект", Объект);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда	
		Данные = Выборка.Данные.Получить();
		Для Каждого ТекРеквизит Из Данные Цикл
			
			Если Объект.Метаданные().Реквизиты.Найти(ТекРеквизит.Ключ) <> Неопределено Тогда
				Форма.Объект[ТекРеквизит.Ключ] = ТекРеквизит.Значение;
			ИначеЕсли Объект.Метаданные().ТабличныеЧасти.Найти(ТекРеквизит.Ключ) <> Неопределено Тогда
				Форма.Объект[ТекРеквизит.Ключ].Загрузить(ТекРеквизит.Значение);
			КонецЕсли;
						
		КонецЦикла;		
	КонецЕсли;
	
	Форма.Заголовок = Форма.Заголовок + " (Режим восстановления)";
	
КонецПроцедуры

Процедура ОчиститьАвтосохраненияОбъекта(Ссылка) экспорт
	
	НаборЗаписей = РегистрыСведений.АвтосохранениеДанных.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(БюджетныйНаСервере.ПолучитьПользователя());
	НаборЗаписей.Отбор.Объект.Установить(Ссылка);
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура НоваяСтрокаРегистраБух(
	Движения,
	Дата,
	Предприятие,
	Сценарий,
	Содержание,
	СчетДт,
	СубконтоДт1,
	СубконтоДт2,
	СубконтоДт3,
	ПодразделениеДт,
	КоличествоДт,
	ВалютаДт,
	ВалСуммаДт,
	СчетКт,
	СубконтоКт1,
	СубконтоКт2,
	СубконтоКт3,
	ПодразделениеКт,
	КоличествоКт,
	ВалютаКт,
	ВалСуммаКт,
	Сумма,
	Приход,
	ФинЦФО = Неопределено,
	ФинПодразделениеЦФО = Неопределено)	Экспорт
	
	Условие_79_55 = (СчетДт = ПланыСчетов.Учетный.Счет5501() И СчетКт.Родитель = ПланыСчетов.Учетный.Счет79()) ИЛИ (СчетКт = ПланыСчетов.Учетный.Счет5501() И СчетДт.Родитель = ПланыСчетов.Учетный.Счет79());
	
	Движение = Движения.Учетный.Добавить();
	Движение.Период = Дата;
	Движение.Предприятия = Предприятие;
	Движение.СценарийПлана = Сценарий;
	Движение.Содержание = Содержание;
	Если Приход Тогда
		
		Если ЗначениеЗаполнено(СчетДт) Тогда
			Движение.СчетДт = СчетДт;
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,СчетДт,1,СубконтоДт1);
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,СчетДт,2,СубконтоДт2);
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,СчетДт,3,СубконтоДт3);
			
			Если СчетДт.УчетПоПодразделениям Тогда
				Движение.ПодразделениеДт = ПодразделениеДт;	
			КонецЕсли;
			
			
			Если СчетДт.Количественный Тогда
				Движение.КоличествоДт = КоличествоДт;
			КонецЕсли;
			Если СчетДт.Валютный И (УЧ_Сервер.ДенежныйСчет(СчетДт) ИЛИ Предприятие.ВедетсяВалютныйУчет) Тогда
				Движение.ВалютаДт = ВалютаДт;	
				Движение.ВалютнаяСуммаДт = ВалСуммаДт;	
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетКт) Тогда
			Движение.СчетКт = СчетКт;
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,СчетКт,1,СубконтоКт1);
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,СчетКт,2,СубконтоКт2);
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,СчетКт,3,СубконтоКт3);
			
			Если СчетКт.УчетПоПодразделениям Тогда
				Движение.ПодразделениеКт = ПодразделениеКт;	
			КонецЕсли;
			Если СчетКт.Количественный Тогда
				Движение.КоличествоКт = КоличествоКт;
			КонецЕсли;
			Если СчетКт.Валютный И (УЧ_Сервер.ДенежныйСчет(СчетКт) ИЛИ Предприятие.ВедетсяВалютныйУчет) Тогда
				Движение.ВалютаКт = ВалютаКт;	
				Движение.ВалютнаяСуммаКт = ВалСуммаКт;	
			КонецЕсли;
		КонецЕсли;
		
		//Если Движение.СчетДт.УчетПоЦФО ИЛИ Движение.СчетКт.УчетПоЦФО Тогда
		//	Если Субконто2 = сабОбщегоНазначенияПовтИсп.ПолучитьПредопределенныйИсточник() И Условие_79_55 Тогда 
		//		Движение.ЦФО = Предприятие;
		//		Движение.ПодразделениеЦФО = ?(ЗначениеЗаполнено(ПодразделениеДт), ПодразделениеДт, ПодразделениеКт);
		//	Иначе
		//		Движение.ЦФО = ФинЦФО;
		//		Движение.ПодразделениеЦФО = ФинПодразделениеЦФО;
		//	КонецЕсли;
		//КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(СчетДт) Тогда
			Движение.СчетКт = СчетДт;
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,СчетДт,1,СубконтоДт1);
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,СчетДт,2,СубконтоДт2);
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоКт,СчетДт,3,СубконтоДт3);
			
			Если СчетДт.УчетПоПодразделениям Тогда
				Движение.ПодразделениеКт = ПодразделениеДт;	
			КонецЕсли;
			Если СчетДт.Количественный Тогда
				Движение.КоличествоКт = КоличествоДт;
			КонецЕсли;
			Если СчетДт.Валютный И (УЧ_Сервер.ДенежныйСчет(СчетДт) ИЛИ Предприятие.ВедетсяВалютныйУчет) Тогда
				Движение.ВалютаКт = ВалютаДт;	
				Движение.ВалютнаяСуммаКт = ВалСуммаДт;	
			КонецЕсли;
		КонецЕсли;
		
		
		Если ЗначениеЗаполнено(СчетКт) Тогда
			Движение.СчетДт = СчетКт;
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,СчетКт,1,СубконтоКт1);
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,СчетКт,2,СубконтоКт2);
			УЧ_Сервер.УстановитьСубконто(Движение.СубконтоДт,СчетКт,3,СубконтоКт3);
			
			Если СчетКт.УчетПоПодразделениям Тогда
				Движение.ПодразделениеДт = ПодразделениеКт;	
			КонецЕсли;
			Если СчетКт.Количественный Тогда
				Движение.КоличествоДт = КоличествоКт;
			КонецЕсли;
			Если СчетКт.Валютный  И (УЧ_Сервер.ДенежныйСчет(СчетКт) ИЛИ Предприятие.ВедетсяВалютныйУчет) Тогда
				Движение.ВалютаДт = ВалютаКт;	
				Движение.ВалютнаяСуммаДт = ВалСуммаКт;	
			КонецЕсли;
		КонецЕсли;
		
		
		//Если Движение.СчетДт.УчетПоЦФО ИЛИ Движение.СчетКт.УчетПоЦФО Тогда
		//	Если Субконто2 = сабОбщегоНазначенияПовтИсп.ПолучитьПредопределенныйИсточник() И Условие_79_55 Тогда 
		//		Движение.ЦФО = Предприятие;
		//		Движение.ПодразделениеЦФО = ?(ЗначениеЗаполнено(ПодразделениеДт), ПодразделениеДт, ПодразделениеКт);
		//	Иначе
		//		Движение.ЦФО = ФинЦФО;
		//		Движение.ПодразделениеЦФО = ФинПодразделениеЦФО;
		//	КонецЕсли;
		//КонецЕсли;
		
	КонецЕсли;	
	Движение.Сумма = Сумма;
КонецПроцедуры

Процедура сабПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, СхемаКомпоновкиДанных, КомпоновщикНастроек) Экспорт
	Если Ложь Тогда
		Возврат;
	КонецЕсли;
	
	//скрываем поле экв вал
	СКД = СхемаКомпоновкиДанных;
	Для каждого ТекНабор Из СКД.НаборыДанных Цикл
		Если ТипЗнч(ТекНабор) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
			Для каждого ТекНабор2 Из ТекНабор.Элементы Цикл
				ТекНабор2.Запрос = СтрЗаменить(ТекНабор2.Запрос, "&ЭквивалентнаяВалюта", "Значение(Справочник.Валюты.ПустаяСсылка)");
			КонецЦикла;	
		Иначе
			ТекНабор.Запрос = СтрЗаменить(ТекНабор.Запрос, "&ЭквивалентнаяВалюта", "Значение(Справочник.Валюты.ПустаяСсылка)");
		КонецЕсли;
	КонецЦикла; 
	//СКД.НаборыДанных.НаборДанных1.Запрос = СтрЗаменить(СКД.НаборыДанных.НаборДанных1.Запрос, "&ЭквивалентнаяВалюта", "Значение(Справочник.Валюты.НациональнаяВалюта)");
	//СКД.Параметры.ЭквивалентнаяВалюта.ВключатьВДоступныеПоля = Ложь;
	//СКД.Параметры.ЭквивалентнаяВалюта.ОграничениеИспользования = Истина;
	//СКД.Параметры.ЭквивалентнаяВалюта.Использование = ИспользованиеПараметраКомпоновкиДанных.Авто;
	ЭлементЭквВал = Новый ПараметрКомпоновкиДанных("ЭквивалентнаяВалюта");
	Для каждого ТекПараметр Из СКД.Параметры Цикл
		Если ТекПараметр.Имя = "ЭквивалентнаяВалюта" Тогда
			ТекПараметр.ВключатьВДоступныеПоля = Ложь;
			ТекПараметр.ОграничениеИспользования = Истина;
			ТекПараметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Авто;
		КонецЕсли;
	КонецЦикла; 
	//Для каждого ТекВариант Из СКД.ВариантыНастроек Цикл
	//	Для каждого ТекЭл Из ТекВариант.Настройки.ПараметрыДанных.Элементы Цикл
	//		Если ТипЗнч(ТекЭл) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И ТекЭл.Параметр = ЭлементЭквВал Тогда
	//			ТекЭл.Использование = Ложь;
	//		КонецЕсли; 
	//	КонецЦикла;
	//КонецЦикла; 
КонецПроцедуры
 
//+ Ничуговская 07.05.19

//при формировании расшифровок ОСВ, субконто могут передаваться в отбор с неправильным индексом,
//процедура исправляет индекс субконто в соответствии с типом правого значения отбора
//Процедура СкорректироватьОтборыПоСубконто(Настройки, Счет) Экспорт
//	
//	Для Каждого ЭлементОтбора Из Настройки.Отбор.Элементы Цикл
//		
//		Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Субконто1") или ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Субконто2") или ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Субконто3") Тогда
//			
//			ТипПрЗначения = ТипЗнч(ЭлементОтбора.ПравоеЗначение);
//			СубконтоНайдено = Ложь;
//			
//			Для Каждого ТекСубконто Из Счет.ВидыСубконто Цикл
//				
//				Если ТекСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипПрЗначения) Тогда
//					
//					СубконтоНайдено = Истина;
//					ЭлементОтбора.ЛевоеЗначение =  Новый ПолеКомпоновкиДанных("Субконто"+ТекСубконто.НомерСтроки);
//					Прервать;
//					
//				КонецЕсли;
//				
//			КонецЦикла;
//			
//			Если Не СубконтоНайдено Тогда
//				 ЭлементОтбора.Использование = Ложь;
//			КонецЕсли;
//			
//		КонецЕсли;	
//		
//	КонецЦикла;	
//	
//КонецПроцедуры

Процедура УстановитьСвойствоЭлемента(Элементы, ИмяЭлемента, ИмяСвойства, Значение) Экспорт
	
	Если Не Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
		Элементы[ИмяЭлемента][ИмяСвойства] = Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбнулениеНумерацииПП() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	НЕ БанковскиеСчета.НомерПлатежки = 0";
	
	//Запрос.УстановитьПараметр("", );
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекОб = Выборка.Ссылка.ПолучитьОбъект();
		ТекОб.НомерПлатежки = 0;
		ТекОб.Записать();
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ОбновитьВспомДанныеБСП() Экспорт
	
	РежимНастройки = "";
	ДанныеПодсистемыБазоваяФункциональность = Истина;
	ПараметрыСлужебныхСобытий = Истина;
	ОтчетыРасширений = Истина;
	ГруппыЗначенийДоступа = Истина;
	НаследованиеНастроекПравОбъектов = Истина;
	ЗначенияГрусппДоступа = Истина;
	НастройкиПравОбъектов = Истина;
	ТаблицыГруппДоступа = Истина;
	НаборыЗначенийДоступа = Истина;
	ПоставляемыеПрофилиГруппДоступа = Истина;
	СоставыГруппПользователей = Истина;
	ИдентификаторыОбъектовРасширений = Истина;
	РолиПользователейИнформационнойБазы = Истина;
	ДанныеПодсистемыИнформацияПриЗапуске = Истина;
	РегистрСведенийПакетыИнформацииПриЗапуске = Истина;
	ИндексПоискаОтчетов = Истина;
	ДанныеПодсистемыВариантыОтчетов = Истина;
	ОписаниеВозможныхПравДляНастройкиПравОбъектов = Истина;
	ОтчетыКонфигурации = Истина;
	ЗависимостиПрав = Истина;
	СвойстваВидовДоступа = Истина;
	ДанныеПодсистемыУправлениеДоступом = Истина;
	ПараметрыРаботыПользователей = Истина;
	ДанныеПодсистемыПользователи = Истина;
	КэшПрограммныхИнтерфейсов = Истина;
	ИдентификаторыОбъектовМетаданных = Истина;
	ПраваРолей = Истина;
	ОписаниеПоставляемыхПрофилейГруппДоступа = Истина;
	ДанныеПодсистемыУправлениеДоступом = Истина;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// СтандартныеПодсистемы БазоваяФункциональность
	Если РежимНастройки = ""
	 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыБазоваяФункциональность
	 ИЛИ РежимНастройки = "СложнаяНастройка" И ПараметрыСлужебныхСобытий Тогда
		
		ЕстьИзменения = Ложь;
		Константы.ПараметрыСлужебныхСобытий.СоздатьМенеджерЗначения().Обновить(ЕстьИзменения);
		
		//Если ЕстьИзменения Тогда
		//	ЕстьОбщиеИзменения = Истина;
		//	ВыделитьИзменения("ДанныеПодсистемыБазоваяФункциональность, ПараметрыСлужебныхСобытий");
		//КонецЕсли;
	КонецЕсли;
	
	Если РежимНастройки = ""
	 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыБазоваяФункциональность
	 ИЛИ РежимНастройки = "СложнаяНастройка" И ИдентификаторыОбъектовМетаданных Тогда
		
		ЕстьИзменения = Ложь;
		Справочники.ИдентификаторыОбъектовМетаданных.ОбновитьДанныеСправочника(ЕстьИзменения);
		
		//Если ЕстьИзменения Тогда
		//	ЕстьОбщиеИзменения = Истина;
		//	ВыделитьИзменения("ДанныеПодсистемыБазоваяФункциональность, ИдентификаторыОбъектовМетаданных");
		//КонецЕсли;
	КонецЕсли;
	
	Если РежимНастройки = ""
	 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыБазоваяФункциональность
	 ИЛИ РежимНастройки = "СложнаяНастройка" И КэшПрограммныхИнтерфейсов Тогда
		
		ЕстьИзменения = Ложь;
		//ОчиститьКэшПрограммныхИнтерфейсов(ЕстьИзменения);
		
		//Если ЕстьИзменения Тогда
		//	ЕстьОбщиеИзменения = Истина;
		//	ВыделитьИзменения("ДанныеПодсистемыБазоваяФункциональность, КэшПрограммныхИнтерфейсов");
		//КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы Пользователи
	Если РежимНастройки = ""
	 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыПользователи
	 ИЛИ РежимНастройки = "СложнаяНастройка" И ПараметрыРаботыПользователей Тогда
		
		ЕстьИзменения = Ложь;
		Константы.ПараметрыРаботыПользователей.СоздатьМенеджерЗначения().ОбновитьОбщиеПараметры(ЕстьИзменения);
		Константы.ПараметрыРаботыПользователей.СоздатьМенеджерЗначения().ПроверитьНазначениеРолей(, Истина);
		
		//Если ЕстьИзменения Тогда
		//	ЕстьОбщиеИзменения = Истина;
		//	ВыделитьИзменения("ДанныеПодсистемыПользователи, ПараметрыРаботыПользователей");
		//КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
	
		Если РежимНастройки = ""
		 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыУправлениеДоступом
		 ИЛИ РежимНастройки = "СложнаяНастройка" И ПраваРолей Тогда
			
			ЕстьИзменения = Ложь;
			РегистрыСведений["ПраваРолей"].ОбновитьДанныеРегистра(ЕстьИзменения);
			
			//Если ЕстьИзменения Тогда
			//	ЕстьОбщиеИзменения = Истина;
			//	ВыделитьИзменения("ДанныеПодсистемыУправлениеДоступом, ПраваРолей");
			//КонецЕсли;
		КонецЕсли;
		
		Если РежимНастройки = ""
		 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыУправлениеДоступом
		 ИЛИ РежимНастройки = "СложнаяНастройка" И ЗависимостиПрав Тогда
			
			ЕстьИзменения = Ложь;
			РегистрыСведений["ЗависимостиПравДоступа"].ОбновитьДанныеРегистра(ЕстьИзменения);
			
			//Если ЕстьИзменения Тогда
			//	ЕстьОбщиеИзменения = Истина;
			//	ВыделитьИзменения("ДанныеПодсистемыУправлениеДоступом, ЗависимостиПрав");
			//КонецЕсли;
		КонецЕсли;
		
		Если РежимНастройки = ""
		 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыУправлениеДоступом
		 ИЛИ РежимНастройки = "СложнаяНастройка" И СвойстваВидовДоступа Тогда
			
			ЕстьИзменения = Ложь;
			Менеджер = Константы["ПараметрыОграниченияДоступа"].СоздатьМенеджерЗначения();
			Менеджер.ОбновитьОписаниеСвойствВидовДоступа(ЕстьИзменения);
			
			//Если ЕстьИзменения Тогда
			//	ЕстьОбщиеИзменения = Истина;
			//	ВыделитьИзменения("ДанныеПодсистемыУправлениеДоступом, СвойстваВидовДоступа");
			//КонецЕсли;
		КонецЕсли;
		
		Если РежимНастройки = ""
		 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыУправлениеДоступом
		 ИЛИ РежимНастройки = "СложнаяНастройка" И ОписаниеПоставляемыхПрофилейГруппДоступа Тогда
			
			ЕстьИзменения = Ложь;
			Справочники["ПрофилиГруппДоступа"].ОбновитьСоставПредопределенныхПрофилей(ЕстьИзменения);
			Справочники["ПрофилиГруппДоступа"].ОбновитьОписаниеПоставляемыхПрофилей(ЕстьИзменения);
			
			//Если ЕстьИзменения Тогда
			//	ЕстьОбщиеИзменения = Истина;
			//	ВыделитьИзменения("ДанныеПодсистемыУправлениеДоступом, ОписаниеПоставляемыхПрофилейГруппДоступа");
			//КонецЕсли;
		КонецЕсли;
		
		Если РежимНастройки = ""
		 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыУправлениеДоступом
		 ИЛИ РежимНастройки = "СложнаяНастройка" И ОписаниеВозможныхПравДляНастройкиПравОбъектов Тогда
			
			ЕстьИзменения = Ложь;
			РегистрыСведений["НастройкиПравОбъектов"].ОбновитьВозможныеПраваДляНастройкиПравОбъектов(
				ЕстьИзменения);
			
			//Если ЕстьИзменения Тогда
			//	ЕстьОбщиеИзменения = Истина;
			//	ВыделитьИзменения("ДанныеПодсистемыУправлениеДоступом, ОписаниеВозможныхПравДляНастройкиПравОбъектов");
			//КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
	// СтандартныеПодсистемы ВариантыОтчетов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВариантыОтчетов") Тогда
		МодульВариантыОтчетов = ОбщегоНазначения.ОбщийМодуль("ВариантыОтчетов");
		
		Настройки = Новый Структура;
		Настройки.Вставить("ОбщиеДанные",       Истина);
		Настройки.Вставить("РазделенныеДанные", Ложь);
		
		Если РежимНастройки = ""
			ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыВариантыОтчетов
			ИЛИ РежимНастройки = "СложнаяНастройка" И ОтчетыКонфигурации Тогда
			
			Настройки.Вставить("Конфигурация", Истина);
			Настройки.Вставить("Расширения",   Ложь);
			Настройки.Вставить("Оперативное",  Истина);
			Настройки.Вставить("Отложенное",   Ложь);
			Настройки.Вставить("Полное",       Ложь);
			Обновление = МодульВариантыОтчетов.Обновить(Настройки);
			
			//Если Обновление.ЕстьИзменения Тогда
			//	ЕстьОбщиеИзменения = Истина;
			//	ВыделитьИзменения(Элементы.ДанныеПодсистемыВариантыОтчетов.Имя + "," + Элементы.ОтчетыКонфигурации.Имя);
			//КонецЕсли;
			
		КонецЕсли;
		
		Если РежимНастройки = ""
			ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыВариантыОтчетов
			ИЛИ РежимНастройки = "СложнаяНастройка" И ИндексПоискаОтчетов Тогда
			
			Настройки.Вставить("Конфигурация", Истина);
			Настройки.Вставить("Расширения",   Ложь);
			Настройки.Вставить("Оперативное",  Ложь);
			Настройки.Вставить("Отложенное",   Истина);
			Настройки.Вставить("Полное",       Истина);
			Обновление = МодульВариантыОтчетов.Обновить(Настройки);
			
			//Если Обновление.ЕстьИзменения Тогда
			//	ЕстьОбщиеИзменения = Истина;
			//	ВыделитьИзменения(Элементы.ДанныеПодсистемыВариантыОтчетов.Имя + "," + Элементы.ИндексПоискаОтчетов.Имя);
			//КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы ИнформацияПриЗапуске
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ИнформацияПриЗапуске") Тогда
		Если РежимНастройки = ""
			ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыИнформацияПриЗапуске
			ИЛИ РежимНастройки = "СложнаяНастройка" И РегистрСведенийПакетыИнформацииПриЗапуске Тогда
			
			МодульИнформацияПриЗапуске = ОбщегоНазначения.ОбщийМодуль("ИнформацияПриЗапуске");
			Обновление = МодульИнформацияПриЗапуске.Обновить();
			//Если Обновление.ЕстьИзменения Тогда
			//	ЕстьОбщиеИзменения = Истина;
			//	ВыделитьИзменения(Элементы.ДанныеПодсистемыИнформацияПриЗапуске.Имя + "," + Элементы.РегистрСведенийПакетыИнформацииПриЗапуске.Имя);
			//КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	
	УстановитьПривилегированныйРежим(Истина);
	
	// СтандартныеПодсистемы БазоваяФункциональность
	Если РежимНастройки = ""
	 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыБазоваяФункциональность
	 ИЛИ РежимНастройки = "СложнаяНастройка" И ИдентификаторыОбъектовРасширений Тогда
		
		ЕстьИзменения = Ложь;
		Справочники.ИдентификаторыОбъектовРасширений.ОбновитьДанныеСправочника(ЕстьИзменения);
		
		//Если ЕстьИзменения Тогда
		//	ЕстьОбщиеИзменения = Истина;
		//	ВыделитьИзменения("ДанныеПодсистемыБазоваяФункциональность, ИдентификаторыОбъектовРасширений");
		//КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы Пользователи
	Если РежимНастройки = ""
	 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыПользователи
	 ИЛИ РежимНастройки = "СложнаяНастройка" И СоставыГруппПользователей Тогда
		
		ЕстьИзменения = Ложь;
		РегистрыСведений["СоставыГруппПользователей"].ОбновитьДанныеРегистра(ЕстьИзменения);
		
		//Если ЕстьИзменения Тогда
		//	ЕстьОбщиеИзменения = Истина;
		//	ВыделитьИзменения("ДанныеПодсистемыПользователи, СоставыГруппПользователей");
		//КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступомСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступомСлужебный");
		
		Если РежимНастройки = ""
		 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыУправлениеДоступом
		 ИЛИ РежимНастройки = "СложнаяНастройка" И ПоставляемыеПрофилиГруппДоступа Тогда
			
			ЕстьИзменения = Ложь;
			Справочники["ГруппыДоступа"].ПометитьНаУдалениеГруппыДоступаПомеченныхПрофилей(ЕстьИзменения);
			Справочники["ПрофилиГруппДоступа"].ОбновитьПоставляемыеПрофили(ЕстьИзменения);
			
			//Если ЕстьИзменения Тогда
			//	ЕстьОбщиеИзменения = Истина;
			//	ВыделитьИзменения("ДанныеПодсистемыУправлениеДоступом, ПоставляемыеПрофилиГруппДоступа");
			//КонецЕсли;
		КонецЕсли;
		
		Если РежимНастройки = ""
		 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыУправлениеДоступом
		 ИЛИ РежимНастройки = "СложнаяНастройка" И РолиПользователейИнформационнойБазы Тогда
			
			ЕстьИзменения = Ложь;
			МодульУправлениеДоступомСлужебный.ОбновитьРолиПользователей(, , ЕстьИзменения);
			
			//Если ЕстьИзменения Тогда
			//	ЕстьОбщиеИзменения = Истина;
			//	ВыделитьИзменения("ДанныеПодсистемыУправлениеДоступом, РолиПользователейИнформационнойБазы");
			//КонецЕсли;
		КонецЕсли;
		
		Если РежимНастройки = ""
		 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыУправлениеДоступом
		 ИЛИ РежимНастройки = "СложнаяНастройка" И ТаблицыГруппДоступа Тогда
			
			ЕстьИзменения = Ложь;
			РегистрыСведений["ТаблицыГруппДоступа"].ОбновитьДанныеРегистра( , , ЕстьИзменения);
			
			//Если ЕстьИзменения Тогда
			//	ЕстьОбщиеИзменения = Истина;
			//	ВыделитьИзменения("ДанныеПодсистемыУправлениеДоступом, ТаблицыГруппДоступа");
			//КонецЕсли;
		КонецЕсли;
		
		Если РежимНастройки = ""
		 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыУправлениеДоступом
		 ИЛИ РежимНастройки = "СложнаяНастройка" И ЗначенияГрусппДоступа Тогда
			
			ЕстьИзменения = Ложь;
			РегистрыСведений["ЗначенияГруппДоступа"].ОбновитьДанныеРегистра( , ЕстьИзменения);
			
			//Если ЕстьИзменения Тогда
			//	ЕстьОбщиеИзменения = Истина;
			//	ВыделитьИзменения("ДанныеПодсистемыУправлениеДоступом, ЗначенияГруппДоступа");
			//КонецЕсли;
		КонецЕсли;
		
		Если РежимНастройки = ""
		 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыУправлениеДоступом
		 ИЛИ РежимНастройки = "СложнаяНастройка" И НаследованиеНастроекПравОбъектов Тогда
			
			ЕстьИзменения = Ложь;
			РегистрыСведений["НаследованиеНастроекПравОбъектов"].ОбновитьДанныеРегистра(, ЕстьИзменения);
			
			//Если ЕстьИзменения Тогда
			//	ЕстьОбщиеИзменения = Истина;
			//	ВыделитьИзменения("ДанныеПодсистемыУправлениеДоступом, НаследованиеНастроекПравОбъектов");
			//КонецЕсли;
		КонецЕсли;
		
		Если РежимНастройки = ""
		 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыУправлениеДоступом
		 ИЛИ РежимНастройки = "СложнаяНастройка" И НастройкиПравОбъектов Тогда
			
			ЕстьИзменения = Ложь;
			РегистрыСведений["НастройкиПравОбъектов"].ОбновитьВспомогательныеДанныеРегистра(ЕстьИзменения);
			
			//Если ЕстьИзменения Тогда
			//	ЕстьОбщиеИзменения = Истина;
			//	ВыделитьИзменения("ДанныеПодсистемыУправлениеДоступом, НастройкиПравОбъектов");
			//КонецЕсли;
		КонецЕсли;
		
		Если РежимНастройки = ""
		 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыУправлениеДоступом
		 ИЛИ РежимНастройки = "СложнаяНастройка" И ГруппыЗначенийДоступа Тогда
			
			ЕстьИзменения = Ложь;
			РегистрыСведений["ГруппыЗначенийДоступа"].ОбновитьДанныеРегистра(ЕстьИзменения);
			
			//Если ЕстьИзменения Тогда
			//	ЕстьОбщиеИзменения = Истина;
			//	ВыделитьИзменения("ДанныеПодсистемыУправлениеДоступом, ГруппыЗначенийДоступа");
			//КонецЕсли;
		КонецЕсли;
		
		Если РежимНастройки = ""
		 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыУправлениеДоступом
		 ИЛИ РежимНастройки = "СложнаяНастройка" И НаборыЗначенийДоступа Тогда
			
			ЕстьИзменения = Ложь;
			РегистрыСведений["НаборыЗначенийДоступа"].ОбновитьДанныеРегистра(ЕстьИзменения);
			
			//Если ЕстьИзменения Тогда
			//	ЕстьОбщиеИзменения = Истина;
			//	ВыделитьИзменения("ДанныеПодсистемыУправлениеДоступом, НаборыЗначенийДоступа");
			//КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы ВариантыОтчетов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВариантыОтчетов") Тогда
		МодульВариантыОтчетов = ОбщегоНазначения.ОбщийМодуль("ВариантыОтчетов");
		
		Настройки = Новый Структура;
		Настройки.Вставить("ОбщиеДанные",       Ложь);
		Настройки.Вставить("РазделенныеДанные", Истина);
		Настройки.Вставить("Конфигурация",      Истина);
		Настройки.Вставить("Расширения",        Ложь);
		
		Если РежимНастройки = ""
			ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыВариантыОтчетов
			ИЛИ РежимНастройки = "СложнаяНастройка" И ОтчетыКонфигурации Тогда
			
			Настройки.Вставить("Оперативное",  Истина);
			Настройки.Вставить("Отложенное",   Ложь);
			Настройки.Вставить("Полное",       Ложь);
			Обновление = МодульВариантыОтчетов.Обновить(Настройки);
			
			//Если Обновление.ЕстьИзменения Тогда
			//	ЕстьОбщиеИзменения = Истина;
			//	ВыделитьИзменения(Элементы.ДанныеПодсистемыВариантыОтчетов.Имя + "," + Элементы.ОтчетыКонфигурации.Имя);
			//КонецЕсли;
			
		КонецЕсли;
		
		Если РежимНастройки = ""
			ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыВариантыОтчетов
			ИЛИ РежимНастройки = "СложнаяНастройка" И ИндексПоискаОтчетов Тогда
			
			Настройки.Вставить("Оперативное",  Ложь);
			Настройки.Вставить("Отложенное",   Истина);
			Настройки.Вставить("Полное",       Истина);
			Обновление = МодульВариантыОтчетов.Обновить(Настройки);
			
			//Если Обновление.ЕстьИзменения Тогда
			//	ЕстьОбщиеИзменения = Истина;
			//	ВыделитьИзменения(Элементы.ДанныеПодсистемыВариантыОтчетов.Имя + "," + Элементы.ИндексПоискаОтчетов.Имя);
			//КонецЕсли;
			
		КонецЕсли;
		
		Настройки = Новый Структура;
		Настройки.Вставить("ОбщиеДанные",       Истина);
		Настройки.Вставить("РазделенныеДанные", Истина);
		Настройки.Вставить("Конфигурация",      Ложь);
		Настройки.Вставить("Расширения",        Истина);
		
		Если РежимНастройки = ""
			ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыВариантыОтчетов
			ИЛИ РежимНастройки = "СложнаяНастройка" И ОтчетыРасширений Тогда
			
			Настройки.Вставить("Оперативное",  Истина);
			Настройки.Вставить("Отложенное",   Истина);
			Настройки.Вставить("Полное",       Истина);
			Обновление = МодульВариантыОтчетов.Обновить(Настройки);
			
			//Если Обновление.ЕстьИзменения Тогда
			//	ЕстьОбщиеИзменения = Истина;
			//	ВыделитьИзменения(Элементы.ДанныеПодсистемыВариантыОтчетов.Имя + "," + Элементы.ОтчетыРасширений.Имя);
			//КонецЕсли;
			
		КонецЕсли;
		
		Если РежимНастройки = ""
			ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыВариантыОтчетов
			ИЛИ РежимНастройки = "СложнаяНастройка" И ИндексПоискаОтчетов Тогда
			
			Настройки.Вставить("Оперативное",  Ложь);
			Настройки.Вставить("Отложенное",   Истина);
			Настройки.Вставить("Полное",       Истина);
			Обновление = МодульВариантыОтчетов.Обновить(Настройки);
			
			//Если Обновление.ЕстьИзменения Тогда
			//	ЕстьОбщиеИзменения = Истина;
			//	ВыделитьИзменения(Элементы.ДанныеПодсистемыВариантыОтчетов.Имя + "," + Элементы.ИндексПоискаОтчетов.Имя);
			//КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Функция СтатьиЗарплатыУП(Предприятие) Экспорт
	
	МассивСтатей = Новый Массив;
	Для каждого ТекСтрока Из Предприятие.УчетнаяПолитика.СтатьиДДСЗаработнойПлаты Цикл
		МассивСтатей.Добавить(ТекСтрока.СтатьяДДС);	
	КонецЦикла; 

	Возврат МассивСтатей;

КонецФункции // ()

Функция ЭтаСсылкаДокумент(Ссылка) Экспорт
	
	Попытка
		Возврат ОбщегоНазначения.ЭтоДокумент(Ссылка.Метаданные());
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Функция ЭтаСсылкаУчетныйДокумент(Ссылка) Экспорт
	
	Если Не ЭтаСсылкаДокумент(Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Ссылка.Метаданные().Движения.Содержит(Метаданные.РегистрыБухгалтерии.Учетный);
	
КонецФункции

Функция ЭтаСсылкаСправочник(Ссылка) Экспорт
	
	Попытка
		Возврат ОбщегоНазначения.ЭтоСправочник(Ссылка.Метаданные());
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Процедура сабПриЗаписиОрганизацииСчетаПриЗаписи(Источник, Отказ) Экспорт
	
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.Организации") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	сабСоответствияОрганизацийПредприятиям.Организация КАК Организация,
		|	сабСоответствияОрганизацийПредприятиям.Предприятие КАК Предприятие
		|ИЗ
		|	РегистрСведений.сабСоответствияОрганизацийПредприятиям КАК сабСоответствияОрганизацийПредприятиям
		|ГДЕ
		|	сабСоответствияОрганизацийПредприятиям.Организация = &Организация";
		
		Запрос.УстановитьПараметр("Организация", Источник.Ссылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Не Выборка.Количество() Тогда
			НоваяЗапись = РегистрыСведений.сабСоответствияОрганизацийПредприятиям.СоздатьМенеджерЗаписи();
			НоваяЗапись.Организация = Источник.Ссылка;
			НоваяЗапись.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Д_ИсточникПП.БанковскиеСчета КАК БанковскиеСчета
		|ИЗ
		|	РегистрСведений.Д_ИсточникПП КАК Д_ИсточникПП
		|ГДЕ
		|	Д_ИсточникПП.БанковскиеСчета = &БанковскиеСчета";
		
		Запрос.УстановитьПараметр("БанковскиеСчета", Источник.Ссылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Не Выборка.Количество() Тогда
			НоваяЗапись = РегистрыСведений.Д_ИсточникПП.СоздатьМенеджерЗаписи();
			НоваяЗапись.БанковскиеСчета = Источник.Ссылка;
			НоваяЗапись.Период = НачалоМесяца(ТекущаяДата());
			НоваяЗапись.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьЭлементНДС(Наименование) Экспорт

	Возврат Справочники.СтавкиНДС.НайтиПоНаименованию(Наименование, Истина);

КонецФункции // ()

Функция ПолучитьСтавкуНДС(СтавкаНДСЭлемент) Экспорт

	Возврат СтавкаНДСЭлемент.Ставка;

КонецФункции // ()

