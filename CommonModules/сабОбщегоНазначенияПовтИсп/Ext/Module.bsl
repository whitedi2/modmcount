Функция ПолучиьПользователяАдминистратор() Экспорт

	Возврат Справочники.Пользователи.Администратор;	

КонецФункции // ()

Функция ПолучиьГруппуТехподдержки() Экспорт

	Возврат Справочники.сабЧат_ГруппыЧата.Техподдержка;	

КонецФункции // ()


Функция ПолучитьПредопределенныйИсточник() Экспорт
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	 |	Кассы.Ссылка
	 |ИЗ
	 |	Справочник.Кассы КАК Кассы
	 |ГДЕ
	 |	Кассы.Предопределенный = ИСТИНА";
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Пока Выборка.Следующий() Цикл	 
		Возврат Выборка.Ссылка;	 
	 КонецЦикла;
КонецФункции // ()

Функция ПолучитьСоответвиеСчетов() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	СоответствияСчетов = Новый Соответствие;
	СоответствияСчетов.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.Оплата"), ПланыСчетов.Учетный.НайтиПоКоду("60.01"));
	СоответствияСчетов.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ОплатаВНХ"), ПланыСчетов.Учетный.НайтиПоКоду("79.01"));
	СоответствияСчетов.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога"), ПланыСчетов.Учетный.НайтиПоКоду("68.02"));
	СоответствияСчетов.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПеречислениеСотруднику"), ПланыСчетов.Учетный.НайтиПоКоду("71.01"));
	СоответствияСчетов.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.Поступление"), ПланыСчетов.Учетный.НайтиПоКоду("62.01"));
	СоответствияСчетов.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ"), ПланыСчетов.Учетный.НайтиПоКоду("79.01"));
	СоответствияСчетов.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПоступлениеОтСотрудника"), ПланыСчетов.Учетный.НайтиПоКоду("71.01"));
	СоответствияСчетов.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПоступленияПоЭквайрингу"), ПланыСчетов.Учетный.НайтиПоКоду("76.01"));
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СоответствияСчетов;
	
КонецФункции // ()

Функция ПолучитьСоответвиеВидовДоговоров() Экспорт
	
	СоответствияСчетов = Новый Соответствие;
	СоответствияСчетов.Вставить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.ПокупательОсновнойПродукции"), ПредопределенноеЗначение("ПланСчетов.Учетный.ПокупателиОсн"));
	СоответствияСчетов.Вставить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.ПокупательПрочейПродукции"), ПредопределенноеЗначение("ПланСчетов.Учетный.ПокупателиПроч"));
	СоответствияСчетов.Вставить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.ПоставщикТоваров"), ПредопределенноеЗначение("ПланСчетов.Учетный.ПоставщикиОсн"));
	СоответствияСчетов.Вставить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.ПоставщикУслуг"), ПредопределенноеЗначение("ПланСчетов.Учетный.ПоставщикиУсл"));
	СоответствияСчетов.Вставить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"), ПредопределенноеЗначение("ПланСчетов.Учетный.ПрочиеВзаиморасчеты"));
	СоответствияСчетов.Вставить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.ПрочиеПокупатели"), ПредопределенноеЗначение("ПланСчетов.Учетный.ПокупателиПроч"));
	СоответствияСчетов.Вставить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку"), ПредопределенноеЗначение("ПланСчетов.Учетный.ПрочиеВзаиморасчеты"));
	СоответствияСчетов.Вставить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаПродажу"), ПредопределенноеЗначение("ПланСчетов.Учетный.ПрочиеВзаиморасчеты"));
	СоответствияСчетов.Вставить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку"), ПредопределенноеЗначение("ПланСчетов.Учетный.ПрочиеВзаиморасчеты"));
	СоответствияСчетов.Вставить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаПродажу"), ПредопределенноеЗначение("ПланСчетов.Учетный.ПрочиеВзаиморасчеты"));
	СоответствияСчетов.Вставить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СНеризедентом"), ПредопределенноеЗначение("ПланСчетов.Учетный.ПрочиеВзаиморасчеты"));
	
	Возврат СоответствияСчетов;
	
КонецФункции // ()

Функция ПроверитьУстановкуКлюча() Экспорт

	ДанныеЛицензии = РегистрыСведений.сабСоответствияОрганизацийПредприятиям.ПроверитьУстановкуКлюча();
	//КлючУстановлен = Ложь;
	
	Возврат ДанныеЛицензии.КлючЛицензии;
	
КонецФункции // ()

Функция ПолучитьСерийныйУчет() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	УчетСерий = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетныйВидыСубконто.ВидСубконто КАК ВидСубконто,
	|	УчетныйВидыСубконто.ВидСубконто.ТипЗначения КАК ТипЗначения
	|ИЗ
	|	ПланСчетов.Учетный.ВидыСубконто КАК УчетныйВидыСубконто
	|ГДЕ
	|	УчетныйВидыСубконто.Ссылка.Код = ""41""";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаТипСубконто = РезультатЗапроса.Выбрать();
	Пока ВыборкаТипСубконто.Следующий() Цикл
		Если ВыборкаТипСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.СерииНоменклатуры")) Тогда
			УчетСерий = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	Возврат УчетСерий;
КонецФункции 

Функция ПолучитьНаличиеСерийногоУчетаДляСчета(Счет) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	УчетСерий = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетныйВидыСубконто.ВидСубконто КАК ВидСубконто,
	|	УчетныйВидыСубконто.ВидСубконто.ТипЗначения КАК ТипЗначения
	|ИЗ
	|	ПланСчетов.Учетный.ВидыСубконто КАК УчетныйВидыСубконто
	|ГДЕ
	|	УчетныйВидыСубконто.Ссылка = &Счет";
	Запрос.УстановитьПараметр("Счет",Счет);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаТипСубконто = РезультатЗапроса.Выбрать();
	Пока ВыборкаТипСубконто.Следующий() Цикл
		Если ВыборкаТипСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.СерииНоменклатуры")) Тогда
			УчетСерий = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	Возврат УчетСерий;
КонецФункции