////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ПРОВЕРКИ НЕОБХОДИМОСТИ ПРОВЕДЕНИЯ ДОКУМЕНТОВ ПО РАЗДЕЛАМ УЧЕТА

// Функция возвращает признак необходимости контроля отрицальных остатков товаров при списании.
//
Функция ОтключитьКонтрольОтрицательныхОстатков() Экспорт
	
	Возврат Константы.ОтключитьКонтрольОтрицательныхОстатков.Получить();
	
КонецФункции // ОтключитьКонтрольОтрицательныхОстатков()

// Функция возвращает признак необходимости отражения на счетах расчетов с контрагентами on-line.
//
Функция ПроводитьПоРасчетамСКонтрагентами(Организация, Период) Экспорт
	
	Возврат Истина;
	
КонецФункции // ПроводитьПоРасчетамСКонтрагентами()

// Функция возвращает признак необходимости отражения в регистрах НДС on-line.
//
Функция ПроводитьПоНДС(Организация, Период) Экспорт
	
	Возврат Истина;
	
КонецФункции // ПроводитьПоНДС()

// Функция возвращает признак необходимости отражения по налоговому учету.
//
Функция ПроводитьПоНУ(Организация, Период) Экспорт
	
	Возврат Истина;
	
КонецФункции // ПроводитьПоНУ()

// Функция возвращает признак необходимости отражения на счетах учетам МПЗ on-line.
//
Функция ПроводитьПоСписаниюМПЗ(Организация, Период) Экспорт
	
	Возврат Истина;
	
КонецФункции // ПроводитьПоСписаниюМПЗ()

// Функция возвращает 1, если используется учет зарплаты ведется во внешней программе, иначе 0.
//
Функция УчетЗарплатыИКадровВоВнешнейПрограмме() Экспорт
	
	Возврат ?(Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить(), 1, 0);

КонецФункции // УчетЗарплатыИКадровВоВнешнейПрограмме()

// Процедура устанавливает настройки для ведения учета зарплаты во внешней программе.
//
// Параметры:
//	ВестиУчетЗарплатыИКадровВоВнешнейПрограмме - Булево
//
Процедура УстановитьУчетЗарплатыИКадровВоВнешнейПрограмме(ВестиУчетЗарплатыИКадровВоВнешнейПрограмме) Экспорт

	Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Установить(ВестиУчетЗарплатыИКадровВоВнешнейПрограмме);
	
	Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.Установить(НЕ ВестиУчетЗарплатыИКадровВоВнешнейПрограмме);
		
	//УчетЗарплаты.УстановитьНастройкиУчетаЗарплаты(ВестиУчетЗарплатыИКадровВоВнешнейПрограмме);
	
КонецПроцедуры // УстановитьУчетЗарплатыИКадровВоВнешнейПрограмме()

// Функция возвращает 1, если используется учет зарплаты ведется сводно, иначе 0.
//
Функция ВедетсяУчетРасчетовПоЗарплатеСводно() Экспорт
	
	Возврат Константы.ВедетсяУчетРасчетовПоЗарплатеСводно.Получить();

КонецФункции // ВедетсяУчетРасчетовПоЗарплатеСводно()

// Процедура устанавливает настройки для ведения учета зарплаты во внешней программе.
//
// Параметры:
//	ВестиУчетЗарплатыИКадровВоВнешнейПрограмме - Булево
//
Процедура УстановитьПараметрыУчетаРасчетовПоЗарплате(ВедетсяУчетРасчетовПоЗарплатеСводно) Экспорт

	Константы.ВедетсяУчетРасчетовПоЗарплатеСводно.Установить(ВедетсяУчетРасчетовПоЗарплатеСводно);
	Константы.ВедетсяУчетРасчетовПоЗарплатеПоРаботникам.Установить(НЕ ВедетсяУчетРасчетовПоЗарплатеСводно);

КонецПроцедуры // УстановитьПараметрыУчетаРасчетовПоЗарплате()

// Функция возвращает Истина, если в конфигурации поддерживается отгрузка без перехода права собственности.
//
Функция ПоддерживаетсяОтгрузкаБезПереходаПраваСобственности() Экспорт

	Возврат Истина; 

КонецФункции // ПоддерживаетсяОтгрузкаБезПереходаПраваСобственности()

// Функция возвращает Истина, если в настройках организации указано, что ведется производственная деятельность.
//
Функция ВедетсяПроизводственнаяДеятельность(Организация, Период) Экспорт

 	Возврат Ложь;
 	
КонецФункции // ВедетсяПроизводственнаяДеятельность()

// Функция возвращает Истина, если в конфигурации ведется учет по валютам.
//
Функция ИспользоватьВалютныйУчет() Экспорт

	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьВалютныйУчет");

КонецФункции // ИспользоватьВалютныйУчет()

// Функция возвращает ИСТИНА, если документ считается проведенным.
//
Функция ДокументПроведен(ДокументСсылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если УправленческийУчетКлиентСерверПереопределяемый.ЭтоРегламентнаяОперация(ДокументСсылка) Тогда

		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Состояние");		
		Возврат (РеквизитыДокумента.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено);

	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОперацияБух") Тогда
	
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "ПометкаУдаления");
		Возврат НЕ РеквизитыДокумента.ПометкаУдаления;

	Иначе
	
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Проведен");
		Возврат РеквизитыДокумента.Проведен;
	
	КонецЕсли;	

КонецФункции // ДокументПроведен()

// Процедура формирует сообщение об ошибке при выполнении рег. операции.
//
Процедура СообщитьОбОшибкеРегОперацииСНавигацией(Знач ТекстСообщения, Знач СсылкаНаОшибочныйОбъект = Неопределено, Отказ = Истина, РегОперация) Экспорт
	
	Документы.РегламентнаяОперация.ОтправитьСлужебноеСообщение(
		ТекстСообщения, 
		СсылкаНаОшибочныйОбъект, 
		Отказ, 
		РегОперация);
	
КонецПроцедуры // СообщитьОбОшибкеРегОперацииСНавигацией()

///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ СВОЙСТВ ДОГОВОРА

//Функция возвращает организацию по договору
//
Функция ПолучитьОрганизациюПоДоговору(Договор) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "Организация");
	
КонецФункции // ПолучитьОрганизациюПоДоговору()

//Функция возвращает контрагента по договору
//
Функция ПолучитьКонтрагентаПоДоговору(Договор) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, УправленческийУчетКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаКонтрагентДоговора());
	
КонецФункции // ПолучитьКонтрагентаПоДоговору()

//Функция возвращает вид расчетов по договору
// Параметры
//		ДоговорКонтрагента 				- СправочникСсылка.ДоговорыКонтрагентов
//
// Возвращаемое значение
//      ПеречислениеСсылка.ВидыРасчетовПоДоговорам
//
Функция ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента) Экспорт
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если ВалютаВзаиморасчетов(ДоговорКонтрагента) = ВалютаРегламентированногоУчета 
	 ИЛИ НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетов(ДоговорКонтрагента)) Тогда
		ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВВалютеРегламентированногоУчета;

	ИначеЕсли РасчетыВУсловныхЕдиницах(ДоговорКонтрагента) Тогда
		ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВУсловныхЕдиницах;

	Иначе
		ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте;

	Конецесли;

	Возврат ВидРасчетовПоДоговору;

КонецФункции // ОпределениеВидаРасчетовПоПараметрамДоговора()

//Функция возвращает валюту договора
// Параметры
//		ДоговорКонтрагента 				- СправочникСсылка.ДоговорыКонтрагентов
//
// Возвращаемое значение
//      СправочникСсылка.Валюты
Функция ВалютаВзаиморасчетов(ДоговорКонтрагента) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	
КонецФункции // ВалютаВзаиморасчетов()

//Функция возвращает признак расчетов в условных единицах
// Параметры
//		ДоговорКонтрагента 				- СправочникСсылка.ДоговорыКонтрагентов
//
// Возвращаемое значение
//      Булево (ИСТИНА если расчеты ведуться в условных единицах)
Функция РасчетыВУсловныхЕдиницах(ДоговорКонтрагента) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "РасчетыВУсловныхЕдиницах");
	
КонецФункции // РасчетыВУсловныхЕдиницах()

//Функция возвращет пустое значение договора
//
Функция ПолучитьПустоеЗначениеДоговора() Экспорт
	
	Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
КонецФункции // ПолучитьПустоеЗначениеДоговора()

//Функция возвращает текст, для получения свойства ВидДоговора в запросе
//
Функция ТекстЗапросаВидДоговора(ИмяПоля) Экспорт
	
	// Для УП будет
	//
	// ВЫРАЗИТЬ(ПолеДоговор КАК Справочник.ДоговорыКонтрагентов).ХозяйственнаяОперация
	
	ИмяРеквизитаВидДоговора = УправленческийУчетКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаВидДоговора();
	
	Возврат СтрЗаменить("ВЫРАЗИТЬ(ПолеДоговор КАК Справочник.ДоговорыКонтрагентов)." + ИмяРеквизитаВидДоговора, "ПолеДоговор", ИмяПоля); 
	
КонецФункции // ТекстЗапросаВидДоговора()

//Функция возвращает текст, для получения свойства РасчетыВУсловныхЕденицах в запросе
//
Функция ТекстЗапросаРасчетыВУЕ(ИмяПоля) Экспорт
	
	Возврат СтрЗаменить("ВЫРАЗИТЬ(ПолеДоговор КАК Справочник.ДоговорыКонтрагентов).РасчетыВУсловныхЕдиницах", "ПолеДоговор", ИмяПоля);
	
КонецФункции // ТекстЗапросаРасчетыВУЕ()

// Функция ТекстЗапросаУчетАгентскогоНДС возвращает текст для получения свойства 
// УчетАгентскогоНДС для договора.
//
Функция ТекстЗапросаУчетАгентскогоНДС(ИмяПоля) Экспорт

	Возврат "ВЫРАЗИТЬ(" + ИмяПоля + " КАК Справочник.ДоговорыКонтрагентов).УчетАгентскогоНДС";

КонецФункции // ТекстЗапросаУчетАгентскогоНДС()

// Функция ТекстЗапросаВидАгентскогоДоговора возвращает текст запроса для получения
// свойства договора ВидАгентскогоДоговора.
//
Функция ТекстЗапросаВидАгентскогоДоговора(ИмяПоля) Экспорт

	Возврат "ВЫРАЗИТЬ(" + ИмяПоля + " КАК Справочник.ДоговорыКонтрагентов).ВидАгентскогоДоговора";

КонецФункции // ТекстЗапросаВидАгентскогоДоговора()

// Получает договор контрагента по умолчанию с учетом условий отбора. Возвращается основной договор или единственный или пустая ссылка
//
// Параметры
//  ВладелецДоговора	–	<СправочникСсылка.Контрагенты> 
//							Контрагент, договор которого нужно получить
//  ОрганизацияДоговора	–	<СправочникСсылка.Организации> 
//							Организация, договор которой нужно получить
//  СписокВидовДоговора	–	<Массив> или <СписокЗначений>, состоящий из значений типа <ПеречислениеСсылка.ВидыДоговоровКонтрагентов> 
//							Нужные виды договора
//  СтруктураПараметров	–	<Структура>
//							Структура дополнительных параметров отбора договоров по реквизитам.
//							Элементы структуры СтруктураПараметров:
//							Ключ - имя реквизита договора, Значение - еще одна структура
//							
//							Элементы структуры, которая находится в Значение:
//							Ключ - "ЗначениеОтбора", Значение - значение реквизита договора для отбора. Обязательный элемент.
//							Ключ - "ВидСравненияОтбора", Значение - <ВидСравнения>. Необязательный элемент, по умолчанию ВидСравнения.Равно
//
// Возвращаемое значение:
//   <СправочникСсылка.ДоговорыКонтрагентов> – найденный счет или пустая ссылка
//
Функция УстановитьДоговорКонтрагента(ДоговорКонтрагента,ВладелецДоговора, ОрганизацияДоговора, СписокВидовДоговора=неопределено, СтруктураПараметров = Неопределено) Экспорт

	НовыйДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();

	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка,
	|	ВЫБОР
	|		КОГДА СправочникВладелец.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК СправочникВладелец
	|		ПО ДоговорыКонтрагентов.Владелец = СправочникВладелец.Ссылка
	|			И ДоговорыКонтрагентов.Ссылка = СправочникВладелец.ОсновнойДоговорКонтрагента
	|ГДЕ
	|	&ТекстФильтра
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.УстановитьПараметр("ВладелецДоговора", ВладелецДоговора);
	ГоловнаяОрганизацияДоговора = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(ОрганизацияДоговора);
	Запрос.УстановитьПараметр("ОрганизацияДоговора", ГоловнаяОрганизацияДоговора);
	Запрос.УстановитьПараметр("СписокВидовДоговора", СписокВидовДоговора);
	
	ИмяРеквизитаКонтрагент = УправленческийУчетКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаКонтрагентДоговора();
	ИмяРеквизитаВидДоговора = УправленческийУчетКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаВидДоговора();
	
	ТекстФильтра = "
	|	ДоговорыКонтрагентов." + ИмяРеквизитаКонтрагент + " = &ВладелецДоговора
	|	И ДоговорыКонтрагентов.Организация = &ОрганизацияДоговора
	|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ"
	+?(СписокВидовДоговора<>неопределено,"
	|	И ДоговорыКонтрагентов." + ИмяРеквизитаВидДоговора + " В (&СписокВидовДоговора)","");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		Для каждого Параметр Из СтруктураПараметров Цикл
			ИмяРеквизита = Параметр.Ключ;
			СтруктураОтбора = Параметр.Значение;
			
			ВидСравненияЗапроса = "";

			Если НЕ СтруктураОтбора.Свойство("ВидСравненияОтбора") Тогда
				ВидСравненияЗапроса = "=";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Равно Тогда
				ВидСравненияЗапроса = "=";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеРавно Тогда
				ВидСравненияЗапроса = "<>";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВСписке Тогда
				ВидСравненияЗапроса = "В";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВСписке Тогда
				ВидСравненияЗапроса = "НЕ В";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВИерархии Тогда
				ВидСравненияЗапроса = "В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВСпискеПоИерархии Тогда
				ВидСравненияЗапроса = "В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВСпискеПоИерархии Тогда
				ВидСравненияЗапроса = "НЕ В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВИерархии Тогда
				ВидСравненияЗапроса = "НЕ В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Больше Тогда
				ВидСравненияЗапроса = ">";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.БольшеИлиРавно Тогда
				ВидСравненияЗапроса = ">=";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Меньше Тогда
				ВидСравненияЗапроса = "<";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.МеньшеИлиРавно Тогда
				ВидСравненияЗапроса = "<=";
			Иначе // другие варианты 
				ВидСравненияЗапроса = "=";
			КонецЕсли;
			
			ТекстФильтра = ТекстФильтра + "
			|	И ДоговорыКонтрагентов." + ИмяРеквизита + " " + ВидСравненияЗапроса + " (&" + ИмяРеквизита + ")";
			Запрос.УстановитьПараметр(ИмяРеквизита, СтруктураОтбора.ЗначениеОтбора);
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстФильтра", ТекстФильтра);
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
	
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		НайденОсновнойДоговор = Выборка.Приоритет = 1;
		НайденОдинДоговор     = Выборка.Количество() = 1;
		
		Если НайденОсновнойДоговор ИЛИ НайденОдинДоговор Тогда
			НовыйДоговор = Выборка.Ссылка;
		КонецЕсли;
	
	КонецЕсли;
	
	РеквизитыДоговора = ПолучитьРеквизитыДоговораКонтрагента(ДоговорКонтрагента);
	
	Если (НЕ ЗначениеЗаполнено(ДоговорКонтрагента)) 
		ИЛИ (РеквизитыДоговора.Владелец <> ВладелецДоговора ИЛИ РеквизитыДоговора.Организация <> ГоловнаяОрганизацияДоговора)  Тогда	
		ДоговорКонтрагента = НовыйДоговор;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ПолучитьДоговорКонтрагента()

// Функция ЭтоВидДоговораСПоставщиком возвращает ИСТИНА, 
// если договор с таким видом является договором с поставщиком.
//
Функция ЭтоВидДоговораСПоставщиком(ВидДоговораХозОперация) Экспорт

	Возврат ВидДоговораХозОперация = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;

КонецФункции // ЭтоВидДоговораСПоставщиком()

// Функция ЭтоВидДоговораСПокупателем возвращает ИСТИНА, 
// если договор с таким видом является договором с покупателем.
//
Функция ЭтоВидДоговораСПокупателем(ВидДоговораХозОперация) Экспорт

	Возврат ВидДоговораХозОперация = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;

КонецФункции // ЭтоВидДоговораСПокупателем()

// Функция ЭтоВидДоговораСКомитентом возвращает ИСТИНА, 
// если договор с таким видом является договором с комитентом.
//
Функция ЭтоВидДоговораСКомитентом(ВидДоговораХозОперация) Экспорт

	Возврат ВидДоговораХозОперация = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;

КонецФункции // ЭтоВидДоговораСКомитентом()

// Функция ЭтоВидДоговораСКомиссионером возвращает ИСТИНА, 
// если договор с таким видом является договором с комиссионером.
//
Функция ЭтоВидДоговораСКомиссионером(ВидДоговораХозОперация) Экспорт

	Возврат ВидДоговораХозОперация = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;

КонецФункции // ЭтоВидДоговораСКомиссионером()

// Функция ЭтоВидДоговораСКомитентом возвращает ИСТИНА, 
// если договор с таким видом является договором с комитентом.
//
Функция ЭтоВидДоговораСКомитентомНаЗакупку(ВидДоговораХозОперация) Экспорт

	Возврат ВидДоговораХозОперация = Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку;

КонецФункции // ЭтоВидДоговораСКомитентом()

// Функция ЭтоВидДоговораСКомиссионером возвращает ИСТИНА, 
// если договор с таким видом является договором с комиссионером.
//
Функция ЭтоВидДоговораСКомиссионеромНаЗакупку(ВидДоговораХозОперация) Экспорт

	Возврат ВидДоговораХозОперация = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку;

КонецФункции // ЭтоВидДоговораСКомиссионером()

// Функция ПолучитьВидДоговораСПоставщиком возвращает значение вида договоров, 
// которые используются при расчетах с поставщиками.
//
Функция ПолучитьВидДоговораСПоставщиком() Экспорт

	Возврат Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;

КонецФункции // ПолучитьВидДоговораСПоставщиком()

// Функция ПолучитьВидДоговораСПокупателем возвращает значение вида договоров, 
// которые используются при расчетах с покупателями.
//
Функция ПолучитьВидДоговораСПокупателем() Экспорт

	Возврат Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;

КонецФункции // ПолучитьВидДоговораСПокупателем()

// Функция ПолучитьВидДоговораСКомиссионером возвращает значение вида договоров, 
// которые используются при расчетах с комиссионерами.
//
Функция ПолучитьВидДоговораСКомиссионером() Экспорт

	Возврат Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;

КонецФункции // ПолучитьВидДоговораСКомиссионером()

// Функция ПолучитьВидДоговораСКомитентом возвращает значение вида договоров, 
// которые используются при расчетах с комитентами.
//
Функция ПолучитьВидДоговораСКомитентом() Экспорт

	Возврат Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;

КонецФункции // ПолучитьВидДоговораСКомитентом()

// Функция ПолучитьВидДоговораСКомиссионеромНаЗакупку возвращает значение вида договоров, 
// которые используются при расчетах с комиссионерами на закупку.
//
Функция ПолучитьВидДоговораСКомиссионеромНаЗакупку() Экспорт

	Возврат Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку;

КонецФункции // ПолучитьВидДоговораСКомиссионеромНаЗакупку()

// Функция ПолучитьВидДоговораСКомитентомНаЗакупку возвращает значение вида договоров, 
// которые используются при расчетах с комитентами на закупку.
//
Функция ПолучитьВидДоговораСКомитентомНаЗакупку() Экспорт

	Возврат Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку;

КонецФункции // ПолучитьВидДоговораСКомитентом()

// Функция ПолучитьМассивВидовДоговоров возвращает массив видов договоров
// в соответствии с переданными параметрами. Функцию можно использовать для
// сокращения числа вызова отдельных функций, возвращающих по одному значению.
//
// Параметры:
//		СПоставщиком - Булево, признак включения видов договоров с поставщиком
//		СПокупателем - Булево, признак включения видов договоров с покупателем
//		СКомитентом  - Булево, признак включения видов договоров с комитентом
//		СКомиссионером  - Булево, признак включения видов договоров с комиссионером
//
Функция ПолучитьМассивВидовДоговоров(СПоставщиком = Ложь, СПокупателем = Ложь, 
	СКомитентом = Ложь, СКомиссионером = Ложь, 
	СКомитентомНаЗакупку = Ложь, СКомиссионеромНаЗакупку = Ложь) Экспорт

	МассивВидыДоговоров = Новый Массив;
	
	Если СПоставщиком Тогда
		МассивВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	КонецЕсли;

	Если СПокупателем Тогда
		МассивВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	КонецЕсли;

	Если СКомитентом Тогда
		МассивВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	КонецЕсли;

	Если СКомиссионером Тогда
		МассивВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	КонецЕсли;

	Если СКомитентомНаЗакупку Тогда
		МассивВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
	КонецЕсли;

	Если СКомиссионеромНаЗакупку Тогда
		МассивВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
	КонецЕсли;

	Возврат МассивВидыДоговоров;

КонецФункции // ПолучитьМассивВидовДоговоров()

// Функция ПолучитьРеквизитыДоговора() возвращает структуру со реквизитами договора, 
// используемыми при проведении документов по регламентированному учету. Функция используется 
// для унификации имен реквизитов справочника ДоговорыКонтрагентов при обращении к ним 
// из разных конфигураций, при этом типы самих реквизитов могут различаться в разных 
// конфигурациях.
//
// Параметры:
//  ДоговорКонтрагента - СправочникСсылка.ДоговорыКонтрагентов.
//
// Возвращаемое значение:
//  Структура с ключами:
//		Ссылка				 - СправочникСсылка.ДоговорыКонтрагентов, ссылка на сам договор
//		ВалютаВзаиморасчетов - СправочникСсылка.Валюты, валюта взаиморасчетов по договору
//		Организация 		 - СправочникСсылка.Организации, организация, с которой заключен договор
//		Владелец 			 - СправочникСсылка.Контрагент, контрагент, с которым заключен договор
//		ВидДоговора 		 - ПеречислениеСсылка.ВидыДоговоровКонтрагентов  (БП)
//							   или ПеречислениеСсылка.ХозяйственныеОперации (УП) 
//		ТипЦен				 - СправочникСсылка.ТипыЦенНоменклатуры (БП)
//							   или НЕОПРЕДЕЛЕНО (УП)
//		УчетАгентскогоНДС	 - Булево
//		ВидАгентскогоДоговора- ПеречислениеСсылка.ВидыАгентскихДоговоров
//		РасчетыВУсловныхЕдиницах - Булево
//		
//		
Функция ПолучитьРеквизитыДоговораКонтрагента(ДоговорКонтрагента) Экспорт

	СтруктураРеквизиты = Новый Структура();
	СтруктураРеквизиты.Вставить("Ссылка",  				Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("ВалютаВзаиморасчетов",	Справочники.Валюты.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("Владелец",				Справочники.Контрагенты.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("Организация",			Справочники.Организации.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("ТипЦен",				Справочники.ТипыЦенНоменклатуры.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("ВидДоговора",			Перечисления.ВидыДоговоровКонтрагентов.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("УчетАгентскогоНДС",	Ложь);
	СтруктураРеквизиты.Вставить("ВидАгентскогоДоговора",Перечисления.ВидыАгентскихДоговоров.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("РасчетыВУсловныхЕдиницах",Ложь);

	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		СтруктураРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента,
																		"Ссылка,
																		|ВалютаВзаиморасчетов,
																		|Владелец,
																		|Организация,
																		|ТипЦен,
																		|ВидДоговора,
																		|УчетАгентскогоНДС,
																		|ВидАгентскогоДоговора,
																		|РасчетыВУсловныхЕдиницах");
	КонецЕсли;
	
	Возврат СтруктураРеквизиты;

КонецФункции // ПолучитьРеквизитыДоговора()

// Функция возвращает договор с контрагентом из переданного документа.
//
Функция ПолучитьДоговорКонтрагентаИзДокумента(ДокументОснование) Экспорт

	ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();

	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда

		// Взять первый договор из табличной части
		Если ДокументОснование.ДоговорКонтрагента.Пустая() Тогда
			Если ДокументОснование.РасшифровкаПлатежа.Количество() > 0 Тогда
				ДоговорКонтрагента = ДокументОснование.РасшифровкаПлатежа[0].ДоговорКонтрагента;
			КонецЕсли;
		Иначе
			ДоговорКонтрагента = ДокументОснование.ДоговорКонтрагента;
		КонецЕсли;

	КонецЕсли;

	Возврат ДоговорКонтрагента;

КонецФункции // ПолучитьДоговорКонтрагентаИзДокумента()

///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ СВОЙСТВ СКЛАДА

// Функция ТекстЗапросаНоменклатурнаяГруппаСклада возвращает текст запроса
// для получения НоменклатурнойГруппы из склада.
//
Функция ТекстЗапросаНоменклатурнаяГруппаСклада(ИмяПоля) Экспорт

	Возврат "ВЫРАЗИТЬ(" + ИмяПоля + " КАК Справочник.Склады).НоменклатурнаяГруппа"; 

КонецФункции // ТекстЗапросаНоменклатурнаяГруппаСклада()

///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ СВОЙСТВ НОМЕНКЛАТУРЫ

//Параметры контекста - структура содержащая поля
//Дата 				- обязательный
//Организация 		- обязательный
//Склад		 		- не обязательный
//ТипЦен 			- не обязательный
//ВалютаДокумента	- не обязательный
//Курс	 			- не обязательный
//Кратность			- не обязательный
//СуммаВключаетНДС	- не обязательный
//СтавкаНДС			- не обязательный (Если параметр передан, то будет использована переданная ставка, иначе ставка из номенклатуры)
//
Функция ПолучитьСведенияОНоменклатуре(Номенклатура, ПараметрыКонтекста) Экспорт

	СведенияОНоменклатуре = Новый Структура();

	РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, 
																		"Наименование, НаименованиеПолное,
																		|СтавкаНДС, НоменклатурнаяГруппа,
																		|Код, Артикул, Услуга, ЕдиницаИзмерения, 
																		|СтранаПроисхождения, НомерГТД");

	//Добавим свойства номенклатуры
	СтавкаНДС = ?(ПараметрыКонтекста.Свойство("СтавкаНДС") И ЗначениеЗаполнено(ПараметрыКонтекста.СтавкаНДС), ПараметрыКонтекста.СтавкаНДС, РеквизитыНоменклатуры.СтавкаНДС);

	СведенияОНоменклатуре.Вставить("Номенклатура",         Номенклатура);
	СведенияОНоменклатуре.Вставить("Наименование",         ?(ПустаяСтрока(РеквизитыНоменклатуры.НаименованиеПолное), РеквизитыНоменклатуры.Наименование, РеквизитыНоменклатуры.НаименованиеПолное));
	СведенияОНоменклатуре.Вставить("СтавкаНДС",            СтавкаНДС);
	СведенияОНоменклатуре.Вставить("ЕдиницаИзмерения",     РеквизитыНоменклатуры.ЕдиницаИзмерения);
	СведенияОНоменклатуре.Вставить("НоменклатурнаяГруппа", РеквизитыНоменклатуры.НоменклатурнаяГруппа);
	СведенияОНоменклатуре.Вставить("СтранаПроисхождения",  РеквизитыНоменклатуры.СтранаПроисхождения);
	СведенияОНоменклатуре.Вставить("НомерГТД",             РеквизитыНоменклатуры.НомерГТД);
	СведенияОНоменклатуре.Вставить("Код",		           РеквизитыНоменклатуры.Код);
	СведенияОНоменклатуре.Вставить("Артикул",	           РеквизитыНоменклатуры.Артикул);
	СведенияОНоменклатуре.Вставить("Услуга",	           РеквизитыНоменклатуры.Услуга);

	//Определим цену номенклатуры
	ВалютаРегламентированногоУчета = ?(ПараметрыКонтекста.Свойство("ВалютаРегламентированногоУчета"),
										ПараметрыКонтекста.ВалютаРегламентированногоУчета,
										Константы.ВалютаРегламентированногоУчета.Получить());
	ТипЦен = Неопределено;
	Если НЕ ПараметрыКонтекста.Свойство("ТипЦен", ТипЦен) Тогда
		СведенияОНоменклатуре.Вставить("Цена", 0);
	ИначеЕсли НЕ ЗначениеЗаполнено(ТипЦен) Тогда
		СведенияОНоменклатуре.Вставить("Цена", 0);
	Иначе
		ВалютаДокумента = ?(ПараметрыКонтекста.Свойство("ВалютаДокумента"), ПараметрыКонтекста.ВалютаДокумента, ВалютаРегламентированногоУчета);
		Если ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
			КурсНаДату   = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента,ПараметрыКонтекста.Дата);
			КурсДок      = ?(ПараметрыКонтекста.Свойство("Курс"), ПараметрыКонтекста.Курс, КурсНаДату.Курс);
			КратностьДок = ?(ПараметрыКонтекста.Свойство("Кратность"), ПараметрыКонтекста.Кратность, КурсНаДату.Кратность);
		Иначе
			КурсДок      = 1;
			КратностьДок = 1;
		КонецЕсли;
		Цена = Ценообразование.ПолучитьЦенуНоменклатуры(Номенклатура, ТипЦен, ПараметрыКонтекста.Дата, ВалютаДокумента, КурсДок, КратностьДок);

		Если ЗначениеЗаполнено(Цена) Тогда
			СуммаВключаетНДС = ?(ПараметрыКонтекста.Свойство("СуммаВключаетНДС"), ПараметрыКонтекста.СуммаВключаетНДС, Ложь);
			Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				Цена,
				ТипЦен.ЦенаВключаетНДС,
				СуммаВключаетНДС,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС));
		КонецЕсли;
		СведенияОНоменклатуре.Вставить("Цена", Цена);
	КонецЕсли;

	Склад = Неопределено;
	Если ПараметрыКонтекста.Свойство("Склад", Склад) И ЗначениеЗаполнено(Склад) И Склад.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		СведенияОНоменклатуре.Вставить("ЦенаВРознице", Ценообразование.ПолучитьЦенуНоменклатуры(Номенклатура, Склад.ТипЦенРозничнойТорговли, ПараметрыКонтекста.Дата, ВалютаРегламентированногоУчета, 1, 1));
	Иначе
		СведенияОНоменклатуре.Вставить("ЦенаВРознице", 0);
	КонецЕсли;

	//Определим счета учета номенклатуры
	Склад = ?(ПараметрыКонтекста.Свойство("Склад"), ПараметрыКонтекста.Склад, Неопределено);
	СведенияОНоменклатуре.Вставить("СчетаУчета", ПолучитьСчетаУчетаНоменклатуры(ПараметрыКонтекста.Организация, Номенклатура, Склад));
	СведенияОНоменклатуре.Вставить("Комиссионный", ЗначениеЗаполнено(СведенияОНоменклатуре.СчетаУчета.СчетУчета) И СведенияОНоменклатуре.СчетаУчета.СчетУчета.Забалансовый);
	СведенияОНоменклатуре.Вставить("ОтражениеВУСН", ?(СведенияОНоменклатуре.Комиссионный, Перечисления.ОтражениеВУСН.НеПринимаются, Перечисления.ОтражениеВУСН.Принимаются));

	СчетДоходов = СведенияОНоменклатуре.СчетаУчета.СчетДоходов;
	СведенияОНоменклатуре.Вставить("ДоходЕНВД", УправленческийУчетВызовСервераПовтИсп.СчетОтноситсяКДеятельностиЕНВД(СчетДоходов));
	Если ЗначениеЗаполнено(СчетДоходов) И (СчетДоходов.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы) <> Неопределено) Тогда
		СведенияОНоменклатуре.Вставить("Субконто", РеквизитыНоменклатуры.НоменклатурнаяГруппа);
	Иначе
		СведенияОНоменклатуре.Вставить("Субконто", Неопределено);
	КонецЕсли;

	Возврат СведенияОНоменклатуре;

КонецФункции

// Функция возвращает Истина, если переданная номенклатура является услугой.
//
Функция НоменклатураЯвляетсяУслугой(Номенклатура) Экспорт

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "Услуга");

КонецФункции // НоменклатураЯвляетсяУслугой()

// Функция возвращает выражение на языке запросов для получения признака услуги 
// от поля типа Номенклатура.
//
Функция ТекстЗапросаЭтоУслуга(ПолеНоменклатура) Экспорт

	Возврат "ЕСТЬNULL(ВЫРАЗИТЬ(" + ПолеНоменклатура + " КАК Справочник.Номенклатура).Услуга, ЛОЖЬ)";

КонецФункции // ТекстЗапросаЭтоУслуга

///////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ОПРЕДЕЛЕНИЯ ТИПОВ

//Функция возвращает типы значений, для которых имеет смысл отбор по организации
//
Функция ТипыСвязанныеСОрганизацией() Экспорт
	
	Возврат Новый ОписаниеТипов(Документы.ТипВсеСсылки(), 
		"СправочникСсылка.БанковскиеСчета,СправочникСсылка.ПодразделенияОрганизаций,
		|СправочникСсылка.ДоговорыКонтрагентов,СправочникСсылка.РегистрацииВНалоговомОргане");
		
КонецФункции // ТипыСвязанныеСОрганизацией()

///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ СВОЙСТВ ОРГАНИЗАЦИИ

//Функция возвращает значение головной организации
//
Функция ГоловнаяОрганизация(Организация) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ГоловнаяОрганизация");
	
КонецФункции // ГоловнаяОрганизация()

//Функция возвращает признак того, что организация является обособленным
//подразделением выделенным на отдельный баланс
//
Функция ОбособленноеПодразделение(Организация) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ОбособленноеПодразделение");
	
КонецФункции // ОбособленноеПодразделение()

// Формирует список головных организаций предприятия
//
Функция ПолучитьСписокГоловныхОрганизаций() Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	Организации.Ссылка,
	                      |	Организации.Наименование КАК Наименование
	                      |ИЗ
	                      |	Справочник.Организации КАК Организации
	                      |ГДЕ
	                      |	Организации.ГоловнаяОрганизация = Организации.Ссылка
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Наименование");

	СписокОрганизаций = Новый СписокЗначений;

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		СписокОрганизаций.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;

	Возврат СписокОрганизаций;

КонецФункции

// Формирует список обособленных структурных подразделений организации
//
Функция ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование  КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &Организация
	|	И Организации.Ссылка <> &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";

	СписокОП = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать(); 
	Пока Выборка.Следующий() Цикл
		СписокОП.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;

	Возврат СписокОП;

КонецФункции // ПолучитьСписокОбособленныхПодразделенийОрганизации()

// Функция ПолучитьБанковскийСчетПоУмолчанию возвращает ссылку на 
// банковский счет организации или контрагента по умолчанию.
//
// Параметры:
//	ЮрФизЛицо 	- СправочникСсылка.Организации, СправочникСсылка.Контрагенты, лицо, 
//					для которого возвращается банковский счет.
//	Валюта 		- СправочникСсылка.Валюты, требуется для единообразия с БРУ и УП
//
// Возвращаемое значение:
// 	СправочникСсылка.БанковскиеСчета - основной банковский счет.
//
Функция ПолучитьБанковскийСчетПоУмолчанию(ЮрФизЛицо, Валюта = Неопределено) Экспорт

	БанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
	
	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации")
		ИЛИ ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты")  Тогда
		
		БанковскийСчет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЮрФизЛицо, "ОсновнойБанковскийСчет");
		
	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникОбъект.Организации")
		ИЛИ ТипЗнч(ЮрФизЛицо) = Тип("СправочникОбъект.Контрагенты") Тогда
		
		БанковскийСчет = ЮрФизЛицо.ОсновнойБанковскийСчет;
		
	КонецЕсли;
	
	Возврат БанковскийСчет;

КонецФункции // ПолучитьБанковскийСчетПоУмолчанию()

// Функция СтруктураОрганизации возвращает структуру с реквизитами организации
//
Функция СтруктураОрганизации(Организация) Экспорт

	СписокОП = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация).Скопировать();
	СписокОП.Добавить(Организация.Ссылка);

	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ГоловнаяОрганизация, ОбособленноеПодразделение, ЕстьОбособленныеПодразделения");
	
	СписокГО = Новый СписокЗначений;
	СписокГО.Добавить(РеквизитыОрганизации.ГоловнаяОрганизация);
	
	Если РеквизитыОрганизации.ЕстьОбособленныеПодразделения Тогда
		ТипОрганизации = "ГО";
	ИначеЕсли РеквизитыОрганизации.ОбособленноеПодразделение Тогда
		ТипОрганизации = "ОП";
	Иначе
		ТипОрганизации = "Простая";
	КонецЕсли;
		
	СвойстваОрганизации = Новый Структура("Тип, Организация, ГоловнаяОрганизация", ТипОрганизации, СписокОП, СписокГО);
	
	Возврат СвойстваОрганизации;
	
КонецФункции // СтруктураОрганизации()

///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ СВЕДЕНИЙ ОБ ОРГАНИЗАЦИИ ИЛИ КОНТРАГЕНТЕ

//  Функция формирует сведения об указанном ЮрФизЛице. К сведениям относятся -
// наименование, адрес, номер телефона, банковские реквизиты.
//
// Параметры: 
//  ЮрФизЛицо   - организация или физическое лицо, о котором собираются сведения.
//  ДатаПериода - дата, на которую выбираются сведения о ЮрФизЛице.
//  ДляФизЛицаТолькоИнициалы - Для физ. лица выводить только инициалы имени и отчества.
//
// Возвращаемое значение:
//  Сведения - собранные сведения.
//
Функция СведенияОЮрФизЛице(ЮрФизЛицо, ДатаПериода = '20200101', ДляФизЛицаТолькоИнициалы = Истина, Знач БанковскийСчет = Неопределено) Экспорт

	Сведения = Новый Структура("Представление, ПолноеНаименование, СокращенноеНаименование, НаименованиеДляПечатныхФорм, ФИОПБОЮЛ,
		|КодПоОКПО, ИНН, КПП, Телефоны, ЮридическийАдрес, Банк, БИК, КоррСчет, НомерСчета, АдресБанка");
	
	Если НЕ ЗначениеЗаполнено(ЮрФизЛицо) Тогда
		Возврат Сведения;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(БанковскийСчет) Тогда
		БанковскийСчет	= ПолучитьБанковскийСчетПоУмолчанию(ЮрФизЛицо);
	КонецЕсли;
	
	Запрос	= Новый Запрос;
	Запрос.УстановитьПараметр("ЮрФизЛицо",			ЮрФизЛицо);
	Запрос.УстановитьПараметр("БанковскийСчет",		БанковскийСчет);
	Запрос.УстановитьПараметр("ЮридическоеЛицо",	Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	Запрос.УстановитьПараметр("ФизическоеЛицо",		Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Представление КАК Наименование,
	|	Организации.НаименованиеПолное КАК ПолноеНаименование,
	|	Организации.ИНН,
	|	ВЫБОР
	|		КОГДА Организации.ЮридическоеФизическоеЛицо = &ЮридическоеЛицо
	|			ТОГДА Организации.КПП
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КПП,
	|	Организации.КодПоОКПО КАК КодПоОКПО,
	|	Организации.НаименованиеСокращенное КАК СокращенноеНаименование,
	|	ВЫБОР
	|		КОГДА Организации.ВариантНаименованияДляПечатныхФорм = ЗНАЧЕНИЕ(Перечисление.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование)
	|			ТОГДА Организации.НаименованиеСокращенное
	|		ИНАЧЕ Организации.НаименованиеПолное
	|	КОНЕЦ КАК НаименованиеДляПечатныхФорм,
	|	ВЫБОР
	|		КОГДА Организации.ЮридическоеФизическоеЛицо = &ФизическоеЛицо
	|			ТОГДА Организации.ИндивидуальныйПредприниматель.Наименование
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ИндивидуальныйПредприниматель,
	|	ВЫБОР
	|		КОГДА Организации.ЮридическоеФизическоеЛицо = &ФизическоеЛицо
	|			ТОГДА Организации.СвидетельствоСерияНомер
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК СвидетельствоСерияНомер,
	|	ВЫБОР
	|		КОГДА Организации.ЮридическоеФизическоеЛицо = &ФизическоеЛицо
	|			ТОГДА Организации.СвидетельствоДатаВыдачи
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК СвидетельствоДатаВыдачи,
	|	ВЫБОР
	|		КОГДА Организации.ЮридическоеФизическоеЛицо = &ФизическоеЛицо
	|			ТОГДА Организации.ИндивидуальныйПредприниматель
	|		ИНАЧЕ Организации.Ссылка
	|	КОНЕЦ КАК ИсточникКонтактнойИнформации,
	|	ВЫБОР
	|		КОГДА Организации.ЮридическоеФизическоеЛицо = &ФизическоеЛицо
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации)
	|	КОНЕЦ КАК ВидыКонтактнойИнформацииЮрАдрес,
	|	ВЫБОР
	|		КОГДА Организации.ЮридическоеФизическоеЛицо = &ФизическоеЛицо
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации)
	|	КОНЕЦ КАК ВидыКонтактнойИнформацииФактАдрес,
	|	ВЫБОР
	|		КОГДА Организации.ЮридическоеФизическоеЛицо = &ФизическоеЛицо
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации)
	|	КОНЕЦ КАК ВидыКонтактнойИнформацииТелефон
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &ЮрФизЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Контрагенты.Представление,
	|	Контрагенты.НаименованиеПолное,
	|	Контрагенты.ИНН,
	|	ВЫБОР
	|		КОГДА Контрагенты.ЮридическоеФизическоеЛицо = &ЮридическоеЛицо
	|			ТОГДА Контрагенты.КПП
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	Контрагенты.КодПоОКПО,
	|	Контрагенты.Представление,
	|	Контрагенты.НаименованиеПолное,
	|	Контрагенты.НаименованиеПолное,
	|	"""",
	|	"""",
	|	Контрагенты.Ссылка,
	|	ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента),
	|	ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента),
	|	ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента)
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка = &ЮрФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БанковскиеСчета.НомерСчета КАК НомерСчета,
	|	БанковскиеСчета.Банк КАК Банк,
	|	РеквизитыБанка.Код КАК БИК,
	|	РеквизитыБанка.КоррСчет КАК КоррСчет,
	|	РеквизитыБанка.Адрес КАК АдресБанка,
	|	БанковскиеСчета.БанкДляРасчетов КАК БанкДляРасчетов,
	|	РеквизитыБанкаРасчетов.Код КАК БИКБанкаДляРасчетов,
	|	РеквизитыБанкаРасчетов.КоррСчет КАК КоррСчетБанкаДляРасчетов,
	|	РеквизитыБанкаРасчетов.Адрес КАК АдресБанкаДляРасчетов
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанковРФ КАК РеквизитыБанка
	|		ПО БанковскиеСчета.Банк = РеквизитыБанка.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанковРФ КАК РеквизитыБанкаРасчетов
	|		ПО БанковскиеСчета.БанкДляРасчетов = РеквизитыБанкаРасчетов.Ссылка
	|ГДЕ
	|	БанковскиеСчета.Ссылка = &БанковскийСчет";
	
	Результаты	= Запрос.ВыполнитьПакет();
	
	Если НЕ Результаты[0].Пустой() Тогда
	
		ДанныеЮрФизЛица	= Результаты[0].Выбрать();
		Если ДанныеЮрФизЛица.Следующий() Тогда
			
			Сведения.Вставить("ПолноеНаименование",				СокрЛП(ДанныеЮрФизЛица.ПолноеНаименование));
			Сведения.Вставить("СокращенноеНаименование",		СокрЛП(ДанныеЮрФизЛица.СокращенноеНаименование));
			Сведения.Вставить("НаименованиеДляПечатныхФорм",	СокрЛП(ДанныеЮрФизЛица.НаименованиеДляПечатныхФорм));
			Сведения.Вставить("Представление",					СокрЛП(ДанныеЮрФизЛица.Наименование));
			Сведения.Вставить("ФИОПБОЮЛ",						ФизическиеЛицаСервер.ФамилияИнициалыФизЛица(ДанныеЮрФизЛица.ИндивидуальныйПредприниматель));
			
			Сведения.Вставить("ИНН",		ДанныеЮрФизЛица.ИНН);
			Сведения.Вставить("КодПоОКПО",	ДанныеЮрФизЛица.КодПоОКПО);
			Сведения.Вставить("КПП",		ДанныеЮрФизЛица.КПП);
			
			Если НЕ ПустаяСтрока(ДанныеЮрФизЛица.СвидетельствоСерияНомер) Тогда
				Сведения.Вставить("Свидетельство",	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'свидетельство %1 от %2'"),
					ДанныеЮрФизЛица.СвидетельствоСерияНомер, Формат(ДанныеЮрФизЛица.СвидетельствоДатаВыдачи, "ДЛФ=D")));
			Иначе
				Сведения.Вставить("Свидетельство",	"");
			КонецЕсли;
				
			Сведения.Вставить("ЮридическийАдрес",	УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(
				ДанныеЮрФизЛица.ИсточникКонтактнойИнформации, ДанныеЮрФизЛица.ВидыКонтактнойИнформацииЮрАдрес));
			Сведения.Вставить("ФактическийАдрес",	УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(
				ДанныеЮрФизЛица.ИсточникКонтактнойИнформации, ДанныеЮрФизЛица.ВидыКонтактнойИнформацииФактАдрес));
			Сведения.Вставить("Телефоны",			УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(
				ДанныеЮрФизЛица.ИсточникКонтактнойИнформации, ДанныеЮрФизЛица.ВидыКонтактнойИнформацииТелефон));

			Если НЕ ЗначениеЗаполнено(Сведения.ПолноеНаименование) Тогда
				Сведения.ПолноеНаименование = Сведения.Представление;
			КонецЕсли;
		
		КонецЕсли;
	
	КонецЕсли;
	
	Если НЕ Результаты[1].Пустой() Тогда
		
		ДанныеБанковскогоСчета	= Результаты[1].Выбрать();
		Если ДанныеБанковскогоСчета.Следующий() Тогда
			
			Сведения.Вставить("НомерСчета",	ДанныеБанковскогоСчета.НомерСчета);
			
			Если ЗначениеЗаполнено(ДанныеБанковскогоСчета.БанкДляРасчетов) Тогда
				Сведения.Вставить("Банк",		ДанныеБанковскогоСчета.БанкДляРасчетов);
				Сведения.Вставить("БИК",		ДанныеБанковскогоСчета.БИКБанкаДляРасчетов);
				Сведения.Вставить("АдресБанка",	ДанныеБанковскогоСчета.АдресБанкаДляРасчетов);
				Сведения.Вставить("КоррСчет",	ДанныеБанковскогоСчета.КоррСчетБанкаДляРасчетов);
			Иначе
				Сведения.Вставить("Банк",		ДанныеБанковскогоСчета.Банк);
				Сведения.Вставить("БИК",		ДанныеБанковскогоСчета.БИК);
				Сведения.Вставить("АдресБанка",	ДанныеБанковскогоСчета.АдресБанка);
				Сведения.Вставить("КоррСчет",	ДанныеБанковскогоСчета.КоррСчет);
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Сведения;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ СВОЙСТВ ПОДРАЗДЕЛЕНИЯ

// Функция возвращает ссылку на пустое подразделение.
//
Функция ПустоеПодразделение() Экспорт

	Возврат Справочники.ПодразделенияОрганизаций.ПустаяСсылка();

КонецФункции // ПустоеПодразделение()

// Функция возвращает Истина, если переданное подразделение может быть выбрано для 
// указанной организации.
//                         
Функция ПодразделениеПринадлежитОрганизации(Подразделение, Организация) Экспорт

	Результат = Ложь;

	Если ЗначениеЗаполнено(Подразделение) И ЗначениеЗаполнено(Организация) Тогда
	
		ИмяРеквизитаОрганизации = УправленческийУчетКлиентСерверПереопределяемый.ИмяРеквизитаОрганизацияПодразделения();
	
		Если ЗначениеЗаполнено(ИмяРеквизитаОрганизации) Тогда
			РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Подразделение, ИмяРеквизитаОрганизации);
			Результат = (РеквизитыПодразделения[ИмяРеквизитаОрганизации] = Организация);
		Иначе
			// Если для подразделения нет явно указанного владельца, то считаем, что любое подразделение может 
			// принадлежать любой организации.
			Результат = Истина;
		КонецЕсли;
	
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПодразделениеПринадлежитОрганизации()

// Функция возвращает организацию, соответствующую переданному подразделению.
// Если передан параметр ТекущаяВыбраннаяОрганизация и его значение не противоречит 
// соответствию подразделения и организации, то возвращает значение параметра ТекущаяВыбраннаяОрганизация.
//
Функция ОрганизацияПодразделения(Подразделение, ТекущаяВыбраннаяОрганизация = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(Подразделение) Тогда
		Возврат ТекущаяВыбраннаяОрганизация;
	КонецЕсли;
	
	ИмяРеквизитаОрганизации = УправленческийУчетКлиентСерверПереопределяемый.ИмяРеквизитаОрганизацияПодразделения();
	
	Если НЕ ЗначениеЗаполнено(ИмяРеквизитаОрганизации) Тогда
		// Если нет явно заданного владельца, то оставляем текущую организацию.
		Возврат ТекущаяВыбраннаяОрганизация;
	КонецЕсли;
	
	РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Подразделение, ИмяРеквизитаОрганизации);
	Если ЗначениеЗаполнено(ТекущаяВыбраннаяОрганизация) 
		И РеквизитыПодразделения[ИмяРеквизитаОрганизации] = ТекущаяВыбраннаяОрганизация Тогда
		Возврат ТекущаяВыбраннаяОрганизация;
	ИначеЕсли ЗначениеЗаполнено(РеквизитыПодразделения[ИмяРеквизитаОрганизации]) Тогда
		Возврат РеквизитыПодразделения[ИмяРеквизитаОрганизации];
	Иначе
		Возврат ТекущаяВыбраннаяОрганизация;
	КонецЕсли;

КонецФункции // ОрганизацияПодразделения()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛУЧЕНИЯ НАСТРОЕК ПОЛЬЗОВАТЕЛЕЙ

// Функция возвращает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Настройка    - Строка - вид настройки, значение по умолчанию которой необходимо получить
//  Пользователь - СправочникСсылка.Пользователи - пользователь программы, настройка которого
//				   запрашивается, если параметр не передается настройка возвращается для текущего пользователя
//
// Возвращаемое значение:
//  Значение по умолчанию для настройки.
//
Функция ПолучитьЗначениеПоУмолчанию(Настройка, Пользователь = Неопределено) Экспорт

	Если ВРег(Настройка) = ВРег("ОсновнаяОрганизация") Тогда
		ПустоеЗначение = Справочники.Организации.ПустаяСсылка();
	ИначеЕсли ВРег(Настройка) = ВРег("ОсновноеПодразделениеОрганизации") Тогда
		ПустоеЗначение = ПустоеПодразделение();
	ИначеЕсли ВРег(Настройка) = ВРег("ОсновнойСклад") Тогда
		ПустоеЗначение = Справочники.Склады.ПустаяСсылка();
	Иначе
		Возврат Неопределено;
	КонецЕсли;

	ЗначениеНастройки = ХранилищеОбщихНастроек.Загрузить(ВРег(Настройка),,, Пользователь);

	Если ТипЗнч(ЗначениеНастройки) = Тип("СправочникСсылка.Организации")
		ИЛИ ТипЗнч(ЗначениеНастройки) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		Попытка
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеНастройки, "Наименование");
		Исключение
			ЗначениеНастройки = ПустоеЗначение;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ?(ЗначениеНастройки = Неопределено, ПустоеЗначение, ЗначениеНастройки);
    
КонецФункции // ПолучитьЗначениеПоУмолчанию()

///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ ИНФОРМАЦИИ О ПОСТАВЩИКЕ ПО ПАРТИЯМ

//Процедура получает из документов партий информацию о
//комитенте, договоре комитента и счетах расчетов с комитентом
//
Процедура ЗаполнитьПараметрыПартийТоваровКомитентов(ТаблицаТоварыСПартиями, Реквизиты, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВалютаРеглУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ТаблицаТоварыСПартиями", ТаблицаТоварыСПартиями);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоварыСПартиями.Партия КАК Партия
	|ПОМЕСТИТЬ ТаблицаПартий
	|ИЗ
	|	&ТаблицаТоварыСПартиями КАК ТаблицаТоварыСПартиями
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаПартий.Партия КАК Партия
	|ПОМЕСТИТЬ ДокументыПТиУ
	|ИЗ
	|	ТаблицаПартий КАК ТаблицаПартий
	|ГДЕ
	|	ТаблицаПартий.Партия ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаПартий.Партия КАК Партия
	|ПОМЕСТИТЬ ДокументыПартия
	|ИЗ
	|	ТаблицаПартий КАК ТаблицаПартий
	|ГДЕ
	|	ТаблицаПартий.Партия ССЫЛКА Документ.Партия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Ссылка КАК Партия,
	|	ПоступлениеТоваровУслуг.Контрагент КАК Комитент,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента КАК ДоговорКомиссии,
	|	ПоступлениеТоваровУслуг.СчетУчетаРасчетовСКонтрагентом КАК СчетРасчетовСКомитентом,
	|	ПоступлениеТоваровУслуг.СчетУчетаРасчетовПоАвансам КАК СчетАвансовСКомитентом,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаРасчетовСКомитентом,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	ЛОЖЬ КАК РасчетыВУсловныхЕдиницах,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровУслуг.ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаРеглУчета
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РасчетыВВалюте,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента.УчетАгентскогоНДС КАК УчетАгентскогоНДС
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка В
	|			(ВЫБРАТЬ
	|				ДокументыПТиУ.Партия
	|			ИЗ
	|				ДокументыПТиУ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Партия.Ссылка,
	|	Партия.Контрагент,
	|	Партия.ДоговорКонтрагента,
	|	Партия.СчетУчетаРасчетовСКомитентом,
	|	Партия.СчетУчетаРасчетовСКомитентом,
	|	Партия.ДоговорКонтрагента.ВалютаВзаиморасчетов,
	|	Партия.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	ЛОЖЬ,
	|	ВЫБОР
	|		КОГДА Партия.ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаРеглУчета
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	Партия.ДоговорКонтрагента.УчетАгентскогоНДС КАК УчетАгентскогоНДС
	|ИЗ
	|	Документ.Партия КАК Партия
	|ГДЕ
	|	Партия.Ссылка В
	|			(ВЫБРАТЬ
	|				ДокументыПартия.Партия
	|			ИЗ
	|				ДокументыПартия)";

	// Заменяем обращение к виду договора и признаку агентского НДС через переопределяемые функции.
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
								"ПоступлениеТоваровУслуг.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора",
								ТекстЗапросаВидДоговора("ПоступлениеТоваровУслуг.ДоговорКонтрагента") + " КАК ВидДоговора");
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
								"Партия.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора",
								ТекстЗапросаВидДоговора("Партия.ДоговорКонтрагента") + " КАК ВидДоговора");
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
								"ПоступлениеТоваровУслуг.ДоговорКонтрагента.УчетАгентскогоНДС КАК УчетАгентскогоНДС",
								ТекстЗапросаУчетАгентскогоНДС("ПоступлениеТоваровУслуг.ДоговорКонтрагента") + " КАК УчетАгентскогоНДС");
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
								"Партия.ДоговорКонтрагента.УчетАгентскогоНДС КАК УчетАгентскогоНДС",
								ТекстЗапросаУчетАгентскогоНДС("Партия.ДоговорКонтрагента") + " КАК УчетАгентскогоНДС");
	
	ТаблицаПараметровПартий = Запрос.Выполнить().Выгрузить();
	ТаблицаПараметровПартий.Индексы.Добавить("Партия");
	
	Для каждого СтрокаПартии Из ТаблицаТоварыСПартиями Цикл
		
		СтрокаПараметровПартии = ТаблицаПараметровПартий.Найти(СтрокаПартии.Партия, "Партия");
		Если СтрокаПараметровПартии <> Неопределено Тогда
		
			ЗаполнитьЗначенияСвойств(СтрокаПартии, СтрокаПараметровПартии);
			
			Если НЕ ЗначениеЗаполнено(СтрокаПартии.СчетРасчетовСКомитентом) 
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаПартии.СчетАвансовСКомитентом) Тогда
				СчетаРасчетов = ПолучитьСчетаРасчетовСКонтрагентом(
					Реквизиты.Организация, СтрокаПартии.Комитент, СтрокаПартии.ДоговорКомиссии);
			КонецЕсли;
				
			Если НЕ ЗначениеЗаполнено(СтрокаПартии.СчетРасчетовСКомитентом) Тогда
				Если НЕ ЗначениеЗаполнено(СчетаРасчетов.СчетРасчетовСКомитентом) Тогда
					ТекстОшибки = НСтр("ru='При списании комиссионных товаров не определен счет расчетов с комитентом по партии ""%Партия%""'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Партия%", СтрокаПартии.Партия);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Реквизиты.Регистратор, , , Отказ);
				Иначе
					СтрокаПартии.СчетРасчетовСКомитентом = СчетаРасчетов.СчетРасчетовСКомитентом;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаПартии.СчетАвансовСКомитентом) Тогда
				Если НЕ ЗначениеЗаполнено(СчетаРасчетов.СчетАвансов) Тогда
					СтрокаПартии.СчетАвансовСКомитентом = СчетаРасчетов.СчетРасчетовСКомитентом;
				Иначе
					СтрокаПартии.СчетАвансовСКомитентом = СчетаРасчетов.СчетАвансов;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
		
			ТекстОшибки = НСтр("ru='При списании комиссионных товаров не определены параметры партии ""%Партия%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Партия%", СтрокаПартии.Партия);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Реквизиты.Регистратор, , , Отказ);
		
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПараметрыПартийТоваровКомитентов()

///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ ИНФОРМАЦИИ О ЦЕНАХ НОМЕНКЛАТУРЫ И СЕБЕСТОИМОСТИ СПИСАНИЯ

//Функция возвращает соотвествие Номенклатура - Цена (в рублях)
//в функцию передаются параметры цены - Тип (вид) цен, период (дата), валюта, курс и кратность
//номенклатура передается как массив
//
//Полученное значение используется для оперделения учетных цен (не цен продажи)
//
Функция ПодготовитьСоответствиеНоменклатураЦена(СтруктураПараметров) Экспорт
	
	Период       = СтруктураПараметров.Период;
	ТипЦен       = СтруктураПараметров.ТипЦен;
	Валюта       = СтруктураПараметров.Валюта;
	Курс         = СтруктураПараметров.Курс;
	Кратность    = СтруктураПараметров.Кратность;
	Номенклатура = СтруктураПараметров.Номенклатура;

	СоответствиеНоменклатураЦена = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Период,
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс,
	|	КурсыВалютСрезПоследних.Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсыВалютСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатуры.Номенклатура,
	|	ЦеныНоменклатуры.Цена,
	|	ЦеныНоменклатуры.Валюта,
	|	КурсыВалют.Курс,
	|	КурсыВалют.Кратность
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Период,
	|			Номенклатура В (&Номенклатура)
	|				И ТипЦен = &ТипЦен) КАК ЦеныНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
	|		ПО ЦеныНоменклатуры.Валюта = КурсыВалют.Валюта";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЦенаНоменклатуры = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Выборка.Цена,
			Выборка.Валюта,	Валюта, 
		    Выборка.Курс, Выборка.Кратность,
		    Курс, Кратность);

		СоответствиеНоменклатураЦена.Вставить(Выборка.Номенклатура, ЦенаНоменклатуры);
		
	КонецЦикла;

	Возврат СоответствиеНоменклатураЦена;

КонецФункции // ПодготовитьСоответствиеНоменклатураЦена()

// Получает сумму списания активов для заполнения печатных форм документов
//
Функция ПолучитьСуммуСписанияАктивов(МассивРегистраторов, ДатаНач, ДатаКон) Экспорт
	
	ПроводкиДокумента = Новый ТаблицаЗначений;
	ПроводкиДокумента.Колонки.Добавить("Регистратор");
	ПроводкиДокумента.Колонки.Добавить("Номенклатура");
	ПроводкиДокумента.Колонки.Добавить("Количество");
	ПроводкиДокумента.Колонки.Добавить("Сумма");
	ТаблицаСуммСписания = Новый ТаблицаЗначений;
	ТаблицаСуммСписания.Колонки.Добавить("Регистратор", 	Документы.ТипВсеСсылки());
	ТаблицаСуммСписания.Колонки.Добавить("Номенклатура", 	Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаСуммСписания.Колонки.Добавить("Количество", 		ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 3));
	ТаблицаСуммСписания.Колонки.Добавить("Сумма", 			ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.Регистратор,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК СубконтоКт2,
	|	СУММА(ХозрасчетныйДвиженияССубконто.КоличествоКт) КАК КоличествоКт,
	|	СУММА(ХозрасчетныйДвиженияССубконто.Сумма) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(&ДатаНач, &ДатаКон, Регистратор В (&МассивРегистраторов) И (НЕ СчетКт = &СчетГТД)) КАК ХозрасчетныйДвиженияССубконто
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйДвиженияССубконто.Регистратор,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт1,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт2";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("МассивРегистраторов", МассивРегистраторов);
	Запрос.УстановитьПараметр("СчетГТД", ПланыСчетов.Хозрасчетный.ГТД);
	
	ПроводкиДокумента = Запрос.Выполнить().Выгрузить();
	Для Каждого ПроводкаДокумента Из ПроводкиДокумента Цикл
		Если ТипЗнч(ПроводкаДокумента.СубконтоКт1) = Тип("СправочникСсылка.Номенклатура") Тогда
			Строка = ТаблицаСуммСписания.Добавить();
			Строка.Регистратор 	= ПроводкаДокумента.Регистратор;
			Строка.Номенклатура = ПроводкаДокумента.СубконтоКт1;
			Строка.Количество   = ПроводкаДокумента.КоличествоКт;
			Строка.Сумма        = ПроводкаДокумента.Сумма;
		КонецЕсли;
		Если ТипЗнч(ПроводкаДокумента.СубконтоКт2) = Тип("СправочникСсылка.Номенклатура") Тогда
			Строка = ТаблицаСуммСписания.Добавить();
			Строка.Регистратор 	= ПроводкаДокумента.Регистратор;
			Строка.Номенклатура = ПроводкаДокумента.СубконтоКт2;
			Строка.Количество   = ПроводкаДокумента.КоличествоКт;
			Строка.Сумма        = ПроводкаДокумента.Сумма;
		КонецЕсли;
	КонецЦикла;
	ТаблицаСуммСписания.Свернуть("Регистратор, Номенклатура","Количество,Сумма");
	
  Возврат  ТаблицаСуммСписания;
  
КонецФункции // ПолучитьСуммуСписанияАктивов()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛУЧЕНИЯ СЧЕТОВ УЧЕТА ПО УМОЛЧАНИЮ

// Функция возвращает возможные счета учета расчетов с контрагентом
//
// Параметры:
//  Организация - по которой выполняется поиск
//  Контрагент  - по которому выполняется поиск
//  Договор     - по которому выполняется поиск
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета расчетов
// 
Функция ПолучитьСчетаРасчетовСКонтрагентом(Знач Организация, Знач Контрагент, Знач Договор) Экспорт

	Результат = Новый Структура("СчетРасчетов, 
	                            |СчетАвансов,
	                            |СчетРасчетовПокупателя, 
	                            |СчетАвансовПокупателя, 
	                            |СчетРасчетовПоПретензиям,
	                            |СчетРасчетовСКомитентом,
	                            |СчетУчетаТары,
	                            |СчетУчетаТарыПокупателя,
	                            |СчетУчетаДоходовПоТаре,
	                            |СчетУчетаРасходовПоТаре");

	Если ТипЗнч(Договор) = Тип("ПеречислениеСсылка.ВидыРасчетовПоДоговорам") Тогда
		ВидРасчетовПоДоговору = Договор;
		Договор = ПолучитьПустоеЗначениеДоговора();
	Иначе							
		ВидРасчетовПоДоговору = ОпределениеВидаРасчетовПоПараметрамДоговора(Договор);
	КонецЕсли;

	СписокГруппКонтрагентов = ОбщегоНазначенияБПВызовСервера.ПолучитьСписокВышеСтоящихГрупп(Контрагент);
	
	СписокГруппДоговоров = ОбщегоНазначенияБПВызовСервера.ПолучитьСписокВышеСтоящихГрупп(Договор);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("Контрагент",        Контрагент);
	Запрос.УстановитьПараметр("Договор",           Договор);
	Запрос.УстановитьПараметр("ВидРасчетов",       ВидРасчетовПоДоговору);
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойКонтрагент",  Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойДоговор",     ПолучитьПустоеЗначениеДоговора());
	Запрос.УстановитьПараметр("ПустойВидРасчетов", Перечисления.ВидыРасчетовПоДоговорам.ПустаяСсылка());
	
	Индекс = 1;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	" + Индекс + " КАК Приоритет,
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетРасчетовПоПретензиям,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаДоходовПоТаре,
	|	СчетУчетаРасходовПоТаре
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	
	|	Организация = &Организация И
	|	Контрагент  = &Контрагент И
	|	Договор     = &Договор И НЕ &Договор = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаДоговоров Из СписокГруппДоговоров Цикл
		
		Запрос.УстановитьПараметр("ГруппаДоговоров" + Индекс, ГруппаДоговоров);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Индекс + ",
		|	СчетУчетаРасчетовСПоставщиком,
		|	СчетУчетаАвансовВыданных,
		|	СчетУчетаРасчетовСПокупателем,
		|	СчетУчетаАвансовПолученных,
		|	СчетРасчетовПоПретензиям,
		|	СчетУчетаРасчетовСКомитентом,
		|	СчетУчетаРасчетовПоТареСПоставщиком,
		|	СчетУчетаРасчетовПоТареСПокупателем,
		|	СчетУчетаДоходовПоТаре,
		|	СчетУчетаРасходовПоТаре
		|
		|ИЗ
		|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
		|
		|ГДЕ
		|	ВидРасчетовПоДоговору = &ВидРасчетов И
		|	Организация           = &Организация И
		|	Контрагент            = &Контрагент И
		|	Договор               = &ГруппаДоговоров" + Индекс + "
		|";
		
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетРасчетовПоПретензиям,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаДоходовПоТаре,
	|	СчетУчетаРасходовПоТаре
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ВидРасчетов И
	|	Организация = &Организация И
	|	Контрагент  = &Контрагент И
	|	Договор     = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаКонтрагентов Из СписокГруппКонтрагентов Цикл
		
		Запрос.УстановитьПараметр("ГруппаКонтрагентов" + Индекс, ГруппаКонтрагентов);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Индекс + ",
		|	СчетУчетаРасчетовСПоставщиком,
		|	СчетУчетаАвансовВыданных,
		|	СчетУчетаРасчетовСПокупателем,
		|	СчетУчетаАвансовПолученных,
		|	СчетРасчетовПоПретензиям,
		|	СчетУчетаРасчетовСКомитентом,
		|	СчетУчетаРасчетовПоТареСПоставщиком,
		|	СчетУчетаРасчетовПоТареСПокупателем,
		|	СчетУчетаДоходовПоТаре,
		|	СчетУчетаРасходовПоТаре
		|
		|ИЗ
		|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
		|
		|ГДЕ
		|	ВидРасчетовПоДоговору = &ВидРасчетов И
		|	Организация           = &Организация И
		|	Контрагент            = &ГруппаКонтрагентов" + Индекс + " И
		|	Договор               = &ПустойДоговор
		|";
		
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетРасчетовПоПретензиям,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаДоходовПоТаре,
	|	СчетУчетаРасходовПоТаре
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ВидРасчетов И
	|	Организация           = &Организация И
	|	Контрагент            = &ПустойКонтрагент И
	|	Договор               = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаДоговоров Из СписокГруппДоговоров Цикл
		
		Запрос.УстановитьПараметр("ГруппаДоговоров" + Индекс, ГруппаДоговоров);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Индекс + ",
		|	СчетУчетаРасчетовСПоставщиком,
		|	СчетУчетаАвансовВыданных,
		|	СчетУчетаРасчетовСПокупателем,
		|	СчетУчетаАвансовПолученных,
		|	СчетРасчетовПоПретензиям,
		|	СчетУчетаРасчетовСКомитентом,
		|	СчетУчетаРасчетовПоТареСПоставщиком,
		|	СчетУчетаРасчетовПоТареСПокупателем,
		|	СчетУчетаДоходовПоТаре,
		|	СчетУчетаРасходовПоТаре
		|
		|ИЗ
		|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
		|
		|ГДЕ
		|	ВидРасчетовПоДоговору = &ВидРасчетов И
		|	Организация           = &ПустаяОрганизация И
		|	Контрагент            = &Контрагент И
		|	Договор               = &ГруппаДоговоров" + Индекс + "
		|";
		
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетРасчетовПоПретензиям,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаДоходовПоТаре,
	|	СчетУчетаРасходовПоТаре
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ВидРасчетов И
	|	Организация = &ПустаяОрганизация И
	|	Контрагент  = &Контрагент И
	|	Договор     = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаКонтрагентов Из СписокГруппКонтрагентов Цикл
		
		Запрос.УстановитьПараметр("ГруппаКонтрагентов" + Индекс, ГруппаКонтрагентов);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Индекс + ",
		|	СчетУчетаРасчетовСПоставщиком,
		|	СчетУчетаАвансовВыданных,
		|	СчетУчетаРасчетовСПокупателем,
		|	СчетУчетаАвансовПолученных,
		|	СчетРасчетовПоПретензиям,
		|	СчетУчетаРасчетовСКомитентом,
		|	СчетУчетаРасчетовПоТареСПоставщиком,
		|	СчетУчетаРасчетовПоТареСПокупателем,
		|	СчетУчетаДоходовПоТаре,
		|	СчетУчетаРасходовПоТаре
		|
		|ИЗ
		|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
		|
		|ГДЕ
		|	ВидРасчетовПоДоговору = &ВидРасчетов И
		|	Организация           = &ПустаяОрганизация И
		|	Контрагент            = &ГруппаКонтрагентов" + Индекс + " И
		|	Договор               = &ПустойДоговор
		|";
		
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетРасчетовПоПретензиям,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаДоходовПоТаре,
	|	СчетУчетаРасходовПоТаре
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ПустойВидРасчетов И
	|	Организация           = &Организация И
	|	Контрагент            = &Контрагент И
	|	Договор               = &Договор И НЕ &Договор = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетРасчетовПоПретензиям,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаДоходовПоТаре,
	|	СчетУчетаРасходовПоТаре
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ПустойВидРасчетов И
	|	Организация           = &Организация И
	|	Контрагент            = &Контрагент И
	|	Договор               = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетРасчетовПоПретензиям,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаДоходовПоТаре,
	|	СчетУчетаРасходовПоТаре
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ПустойВидРасчетов И
	|	Организация           = &Организация И
	|	Контрагент            = &ПустойКонтрагент И
	|	Договор               = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетРасчетовПоПретензиям,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаДоходовПоТаре,
	|	СчетУчетаРасходовПоТаре
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ВидРасчетов И
	|	Организация           = &ПустаяОрганизация И
	|	Контрагент            = &ПустойКонтрагент И
	|	Договор               = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетРасчетовПоПретензиям,
	|	СчетУчетаРасчетовСКомитентом,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаДоходовПоТаре,
	|	СчетУчетаРасходовПоТаре
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ПустойВидРасчетов И
	|	Организация           = &ПустаяОрганизация И
	|	Контрагент            = &ПустойКонтрагент И
	|	Договор               = &ПустойДоговор
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда

		Результат.СчетРасчетов              = Выборка.СчетУчетаРасчетовСПоставщиком;
		Результат.СчетАвансов               = Выборка.СчетУчетаАвансовВыданных;
		Результат.СчетРасчетовПокупателя    = Выборка.СчетУчетаРасчетовСПокупателем;
		Результат.СчетАвансовПокупателя     = Выборка.СчетУчетаАвансовПолученных;
		Результат.СчетРасчетовПоПретензиям  = Выборка.СчетРасчетовПоПретензиям;
		Результат.СчетРасчетовСКомитентом   = Выборка.СчетУчетаРасчетовСКомитентом;
		Результат.СчетУчетаТары             = Выборка.СчетУчетаРасчетовПоТареСПоставщиком;
		Результат.СчетУчетаТарыПокупателя   = Выборка.СчетУчетаРасчетовПоТареСПокупателем;

		Результат.СчетУчетаДоходовПоТаре  = Выборка.СчетУчетаДоходовПоТаре;
		Результат.СчетУчетаРасходовПоТаре = Выборка.СчетУчетаРасходовПоТаре;

	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьСчетаРасчетовСКонтрагентом()

Функция ПолучитьСчетаУчетаВНТТ(Организация, Склад, Дата, УчетнаяПолитикаНУ) Экспорт
	
	СтруктураВозврата = Новый Структура("
	|СчетДоходовОтРеализации, 
	|СчетРасходовОтРеализации");
	
	Отбор = Новый Структура("ТорговаяТочка");
	Отбор.ТорговаяТочка = Склад;
	СрезПоследних   = РегистрыСведений.СчетаУчетаВНТТ.СрезПоследних(Дата, Отбор);

	Если СрезПоследних.Количество() = 0 Тогда
		СтруктураВозврата.СчетДоходовОтРеализации  = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СтруктураВозврата.СчетРасходовОтРеализации = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	Иначе
		СтруктураВозврата.СчетДоходовОтРеализации  = СрезПоследних[0].СчетДоходовОтРеализации;
		СтруктураВозврата.СчетРасходовОтРеализации = СрезПоследних[0].СчетРасходовОтРеализации;
	КонецЕсли;
	
	Если (СтруктураВозврата.СчетДоходовОтРеализации = ПланыСчетов.Хозрасчетный.ПустаяСсылка()) 
		И (СтруктураВозврата.СчетРасходовОтРеализации = ПланыСчетов.Хозрасчетный.ПустаяСсылка()) Тогда 
		Если УчетнаяПолитикаНУ.РозничнаяТорговляОблагаетсяЕНВД Тогда
			СтруктураВозврата.СчетДоходовОтРеализации = ПланыСчетов.Хозрасчетный.ВыручкаЕНВД;
			СтруктураВозврата.СчетРасходовОтРеализации = ПланыСчетов.Хозрасчетный.СебестоимостьПродажЕНВД;
		Иначе
			СтруктураВозврата.СчетДоходовОтРеализации = ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД;
			СтруктураВозврата.СчетРасходовОтРеализации = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Функция возвращает счета учета номенклатуры по выбранной организации.
//
// Параметры:
//  Организация         - организация, по которой определяются счета учета
//  Склад		        - место хранения, по которому определяются счета учета
//  Номенклатура        - номенклатура, по которой определяются счета учета
//  Дата                - дата, на которую определяются счета учета
//  ОсобыйПорядокНалогообложения - признак того, что необходимо получить счета для особого порядка налогообложения (Патент, ЕНВД)
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета расчетов
// 
Функция ПолучитьСчетаУчетаНоменклатуры(Организация, Номенклатура, Склад = Неопределено, Дата = Неопределено, ОсобыйПорядокНалогообложения = Ложь) Экспорт

	ПустойСчет = ПланыСчетов.Хозрасчетный.ПустаяСсылка();

	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("СчетУчета", 			ПустойСчет);
	СтруктураВозврата.Вставить("СчетУчетаЯвляетсяЗабалансовым", Ложь);
	СтруктураВозврата.Вставить("СчетУчетаНДС", 			ПустойСчет);
	СтруктураВозврата.Вставить("СчетУчетаНДСПродажи", 	ПустойСчет);
	СтруктураВозврата.Вставить("СчетНДСТаможни", 		ПустойСчет);
	СтруктураВозврата.Вставить("СчетУчетаДавСырья", 	ПустойСчет);
	СтруктураВозврата.Вставить("СчетПередачи", 			ПустойСчет);
	СтруктураВозврата.Вставить("СчетУчетаДоп", 			ПустойСчет);
	СтруктураВозврата.Вставить("СчетПередачиЗаб", 		ПустойСчет);
	СтруктураВозврата.Вставить("СчетДоходов", 			ПустойСчет);
	СтруктураВозврата.Вставить("СчетРасходов", 			ПустойСчет);
	СтруктураВозврата.Вставить("Субконто1", 			Неопределено);
	СтруктураВозврата.Вставить("Субконто2", 			Неопределено);
	СтруктураВозврата.Вставить("Субконто3", 			Неопределено);

	МассивСклад			 = Новый Массив();
	МассивТипСклада		 = Новый Массив();
	МассивНоменклатура	 = Новый Массив();
	МассивОрганизация	 = Новый Массив();
	
	МассивСклад.Добавить(Справочники.Склады.ПустаяСсылка());
	МассивТипСклада.Добавить(Перечисления.ТипыСкладов.ПустаяСсылка());
	МассивНоменклатура.Добавить(Справочники.Номенклатура.ПустаяСсылка());
	МассивОрганизация.Добавить(Справочники.Организации.ПустаяСсылка());
		
	Если ЗначениеЗаполнено(Склад) Тогда
		МассивСклад.Добавить(Склад);
		МассивТипСклада.Добавить(Склад.ТипСклада);
	КонецЕсли;
	
	МассивНоменклатура.Добавить(Номенклатура);
	СписокГрупп = ОбщегоНазначенияБПВызовСервера.ПолучитьСписокВышеСтоящихГрупп(Номенклатура);
	Для каждого Элемент Из СписокГрупп Цикл
		МассивНоменклатура.Добавить(Элемент);
	КонецЦикла;
	
	МассивОрганизация.Добавить(Организация);
	
	ТестЗапрос = Новый Запрос();
	
	ТестЗапрос.УстановитьПараметр("Организация",        МассивОрганизация);
	ТестЗапрос.УстановитьПараметр("Номенклатура",       МассивНоменклатура);
	ТестЗапрос.УстановитьПараметр("Склад",			    МассивСклад);
	ТестЗапрос.УстановитьПараметр("ТипСклада",			МассивТипСклада);
	
	ТестЗапрос.Текст = "
	|ВЫБРАТЬ
	|	СчетаУчетаНоменклатуры.Организация КАК Организация,
	|	СчетаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	СчетаУчетаНоменклатуры.Номенклатура.ЭтоГруппа КАК ЭтоГруппа,
	|	СчетаУчетаНоменклатуры.Склад КАК Склад,
	|	СчетаУчетаНоменклатуры.ТипСклада КАК ТипСклада,
	|	СчетаУчетаНоменклатуры.СчетУчета КАК СчетУчета,
	|	ЕСТЬNULL(СчетаУчетаНоменклатуры.СчетУчета.Забалансовый, ЛОЖЬ) КАК СчетУчетаЯвляетсяЗабалансовым,
	|	СчетаУчетаНоменклатуры.СчетУчетаНДСПоПриобретеннымЦенностям КАК СчетУчетаНДСПоПриобретеннымЦенностям,
	|	СчетаУчетаНоменклатуры.СчетУчетаНДСПоРеализации КАК СчетУчетаНДСПоРеализации,
	|	СчетаУчетаНоменклатуры.СчетУчетаНДСУплаченногоНаТаможне КАК СчетУчетаНДСУплаченногоНаТаможне,
	|	СчетаУчетаНоменклатуры.СчетУчетаЗабалансовый КАК СчетУчетаЗабалансовый,
	|	СчетаУчетаНоменклатуры.СчетУчетаПередачи КАК СчетУчетаПередачи,
	|	СчетаУчетаНоменклатуры.СчетУчетаПередачиЗабалансовый КАК СчетУчетаПередачиЗабалансовый,
	|	СчетаУчетаНоменклатуры.СчетДоходовОтРеализации КАК СчетДоходовОтРеализации,
	|	СчетаУчетаНоменклатуры.СчетРасходовОтРеализации КАК СчетРасходовОтРеализации,
	|	СчетаУчетаНоменклатуры.Субконто1 КАК Субконто1,
	|	СчетаУчетаНоменклатуры.Субконто2 КАК Субконто2,
	|	СчетаУчетаНоменклатуры.Субконто3 КАК Субконто3
	|ИЗ
	|	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
	|	
	|ГДЕ
	|	СчетаУчетаНоменклатуры.Организация В (&Организация)
	|	И СчетаУчетаНоменклатуры.Номенклатура В (&Номенклатура)
	|	И СчетаУчетаНоменклатуры.Склад В (&Склад)
	|	И СчетаУчетаНоменклатуры.ТипСклада В (&ТипСклада)";
	
	ТаблицаЗапроса = ТестЗапрос.Выполнить().Выгрузить();
	ТаблицаЗапроса.Колонки.Добавить("Глубина");
	Для Каждого Строка Из ТаблицаЗапроса Цикл
		Если Строка.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
			Строка.Глубина = 0;
		Иначе
			Строка.Глубина = СтрДлина(Строка.Номенклатура.ПолныйКод());
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаЗапроса.Сортировать("Глубина Убыв, Склад Убыв, ТипСклада Убыв, Организация Убыв", Новый СравнениеЗначений);

	Если ТаблицаЗапроса.Количество() > 0 Тогда

		СведенияОСчетах = ТаблицаЗапроса[0];
		
		СтруктураВозврата.СчетУчета                     = СведенияОСчетах.СчетУчета;
		СтруктураВозврата.СчетУчетаЯвляетсяЗабалансовым = СведенияОСчетах.СчетУчетаЯвляетсяЗабалансовым;
		
		СтруктураВозврата.СчетУчетаНДС        = СведенияОСчетах.СчетУчетаНДСПоПриобретеннымЦенностям;
		СтруктураВозврата.СчетУчетаНДСПродажи = СведенияОСчетах.СчетУчетаНДСПоРеализации;
		СтруктураВозврата.СчетНДСТаможни      = СведенияОСчетах.СчетУчетаНДСУплаченногоНаТаможне;
		СтруктураВозврата.СчетУчетаДоп        = СведенияОСчетах.СчетУчета;
		СтруктураВозврата.СчетУчетаДавСырья   = СведенияОСчетах.СчетУчетаЗабалансовый;
		СтруктураВозврата.СчетДоходов         = СведенияОСчетах.СчетДоходовОтРеализации;
		СтруктураВозврата.СчетПередачи        = СведенияОСчетах.СчетУчетаПередачи;
		СтруктураВозврата.СчетПередачиЗаб     = СведенияОСчетах.СчетУчетаПередачиЗабалансовый;
		СтруктураВозврата.СчетРасходов        = СведенияОСчетах.СчетРасходовОтРеализации;

		СтруктураВозврата.Субконто1      = СведенияОСчетах.Субконто1;
		СтруктураВозврата.Субконто2    	 = СведенияОСчетах.Субконто2;
		СтруктураВозврата.Субконто3    	 = СведенияОСчетах.Субконто3;

	КонецЕсли;
	
	ДатаУчетнойПолитики	= ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	
	Если ОсобыйПорядокНалогообложения
		ИЛИ УчетнаяПолитика.ПрименяетсяОсобыйПорядокНалогообложения(Организация, ДатаУчетнойПолитики) Тогда
		
		СтруктураВозврата.СчетДоходов	= ПланыСчетов.Хозрасчетный.ВыручкаЕНВД;
		СтруктураВозврата.СчетРасходов	= ПланыСчетов.Хозрасчетный.СебестоимостьПродажЕНВД;
		
	КонецЕсли;

	Возврат СтруктураВозврата;

КонецФункции // ПолучитьСчетаУчетаНоменклатуры()

// Функция возвращает счета учета по выбранному объекту строительства.
//
// Параметры:
//  Организация - организация, по которой выполняется поиск
//  Объект      - объект строительства, по которому выполняется поиск
//
// Возвращаемое значение:
//  Структура - структура, содержащая счета учета объекта строительства
// 
Функция СчетаУчетаОбъектовСтроительства(Организация, Объект) Экспорт

	ПустойСчет = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	Результат = Новый Структура("СчетУчета, СчетУчетаНДС", ПустойСчет, ПустойСчет);

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("ПустойОбъект",      Справочники.ОбъектыСтроительства.ПустаяСсылка());
	Запрос.УстановитьПараметр("Объект",            Объект);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СчетБухгалтерскогоУчета КАК СчетУчета,
	|	СчетБухгалтерскогоУчетаНДС КАК СчетУчетаНДС
	|ИЗ
	|	РегистрСведений.ОбъектыСтроительстваОрганизаций КАК ОбъектыСтроительстваОрганизаций
	|
	|ГДЕ
	|	Организация = &Организация И
	|	ОбъектСтроительства = &Объект
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	СчетБухгалтерскогоУчета КАК СчетУчета,
	|	СчетБухгалтерскогоУчетаНДС КАК СчетУчетаНДС
	|ИЗ
	|	РегистрСведений.ОбъектыСтроительстваОрганизаций КАК ОбъектыСтроительстваОрганизаций
	|
	|ГДЕ
	|	Организация = &Организация И
	|	ОбъектСтроительства = &ПустойОбъект
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	СчетБухгалтерскогоУчета КАК СчетУчета,
	|	СчетБухгалтерскогоУчетаНДС КАК СчетУчетаНДС
	|ИЗ
	|	РегистрСведений.ОбъектыСтроительстваОрганизаций КАК ОбъектыСтроительстваОрганизаций
	|
	|ГДЕ
	|	Организация = &ПустаяОрганизация И
	|	ОбъектСтроительства = &Объект
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	СчетБухгалтерскогоУчета КАК СчетУчета,
	|	СчетБухгалтерскогоУчетаНДС КАК СчетУчетаНДС
	|ИЗ
	|	РегистрСведений.ОбъектыСтроительстваОрганизаций КАК ОбъектыСтроительстваОрганизаций
	|
	|ГДЕ
	|	Организация = &ПустаяОрганизация И
	|	ОбъектСтроительства = &ПустойОбъект";
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда

		Результат.СчетУчета  = Выборка.СчетУчета;
		Результат.СчетУчетаНДС = Выборка.СчетУчетаНДС;

	КонецЕсли;

	Возврат Результат;

КонецФункции // СчетаУчетаОбъектовСтроительства()

// Функция возвращает массив счетов, которые необходимо регламентно переоценивать.
// 
Функция СчетаПодлежащиеПереоценке() Экспорт
	
	// Валютные счета, подлежащие переоценке
	// Все балансовые валютные счета
	// Счета, переоцениваемые в особом порядке, исключаются
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Валютный
	|	И (НЕ Хозрасчетный.Забалансовый)
	|	И (НЕ Хозрасчетный.Ссылка В
	|				(ВЫБРАТЬ
	|					СчетаСОсобымПорядкомПереоценки.Счет
	|				ИЗ
	|					РегистрСведений.СчетаСОсобымПорядкомПереоценкиБУ КАК СчетаСОсобымПорядкомПереоценки))";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");

КонецФункции

// Функция возвращает массив счетов учета выручки по деятельности,
// относящейся к ЕНВД.
// 
Функция СчетаВыручкиЕНВД() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет90_01", ПланыСчетов.Хозрасчетный.Выручка);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	РегистрСведений.СчетаДоходовИРасходовЕНВД КАК СчетаДоходовИРасходовЕНВД
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ПО СчетаДоходовИРасходовЕНВД.Счет = Хозрасчетный.Ссылка
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&Счет90_01)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Хозрасчетный.Порядок";
	ТаблицаСчетов = Запрос.Выполнить().Выгрузить();

	Возврат ТаблицаСчетов.ВыгрузитьКолонку("Счет");

КонецФункции

// Функция возвращает массив счетов учета расходов по деятельности,
// относящейся к ЕНВД.
// 
Функция СчетаРасходовЕНВД() Экспорт

	Запрос = Новый Запрос;

	Массив = Новый Массив;
	Массив.Добавить(ПланыСчетов.Хозрасчетный.СебестоимостьПродаж);           // 90.02
	Массив.Добавить(ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажу);      // 90.07
	Массив.Добавить(ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходы); // 90.08
	Запрос.УстановитьПараметр("СчетаРасходов", Массив);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	РегистрСведений.СчетаДоходовИРасходовЕНВД КАК СчетаДоходовИРасходовЕНВД
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ПО СчетаДоходовИРасходовЕНВД.Счет = Хозрасчетный.Ссылка
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаРасходов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Хозрасчетный.Порядок";
	ТаблицаСчетов = Запрос.Выполнить().Выгрузить();

	Возврат ТаблицаСчетов.ВыгрузитьКолонку("Счет");

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ АНАЛИТИКИ ПЛАНА СЧЕТОВ

// Функция возвращает возможные виды субконто на счетах расчетов с бюджетом по налогам и сборам
//
// Параметры: нет
//
// Возвращаемое значение:
//  Структура
// 
Функция ВидыСубконтоРасчетовПоНалогамИСборам() Экспорт
	
	Возврат(Неопределено);
	
КонецФункции


