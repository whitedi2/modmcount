
// ПРОЦЕДУРА "ПриИзменении" НА СЕРВЕРЕ.
// ВЫЗОВ ЭТОЙ ПРОЦЕДУРЫ ДОЛЖЕН ОСУЩЕСТВЛЯТЬСЯ ИЗ КЛИЕНТСКОГО МОДУЛЯ
// ПРИ НЕОБХОДИМОСТИ ВЫПОЛНЕНИЯ НА СЕРВЕРЕ.
//
// СтруктураДействий - Структура. Возможно передавать следующие поля:
//  "ПроверитьХарактеристикуПоВладельцу", Характеристика.
//  "ПроверитьЗаполнитьУпаковкуПоВладельцу"      , Упаковка.
//  "ЗаполнитьОбъемВесУпаковки"	        , Упаковка.
//  "ПересчитатьКоличествоЕдиниц".
//  "ПересчитатьКоличествоЕдиницПлан".
//  "ПересчитатьКоличествоЕдиницФакт". ИмяФакта
//  "ОчиститьКоличествоУчет"
//  "ЗаполнитьЦенуПродажи"              , СтруктураПараметровДействия.
//  "ЗаполнитьЦенуПродажиНазначенную"   , СтруктураПараметровДействия.
//  "ЗаполнитьЦенуПоВидуЦен"            , СтруктураПараметровДействия.
//  "ПересчитатьСумму".
//  "ПересчитатьСуммуСУчетомРучнойСкидки"     , СтруктураПараметровДействия.
//  "ПересчитатьСуммуСУчетомАвтоматическойСкидки"     , СтруктураПараметровДействия.
//  "ПересчитатьЦенуЗаУпаковку".
//  "ПересчитатьСуммуНДС".
//  "ЗаполнитьСтавкуНДС".
//  "ПересчитатьКоличествоУпаковок"., Имя
//  "ПересчитатьКоличествоУпаковок"., ИмяФакта
//  "ЗаполнитьНоменклатуруПоНоменклатуреПоставщика".
//  "ПересчитатьСуммуФакт",ИмяКоличества.
//  "ЗаполнитьЦенуЗакупки"            , СтруктураПараметровДействия
//  "ЗаполнитьЦенуПрошлойЗакупки"            , СтруктураПараметровДействия

// Процедура при измерении реквизитов в ТЧ на сервере.
//
Процедура ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ЗначениеИзСтруктуры;
	
	СоответствиеДействий = Новый Соответствие;
	
	// Для случая когда процедура вызывается напрямую с сервера.
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДС") Тогда
		ПересчитатьСуммыНДССервер(СтруктураТЧ, СтруктураДействий, КэшированныеЗначения, СоответствиеДействий);
		
	Иначе
		Если СтруктураДействий.Свойство("НеобходимоОбработатьВсюТЧ") Тогда
			Для Каждого ТекСтрока Из СтруктураТЧ.СтрокиТЧ Цикл
				НоваяСтруктураДействий = Новый Структура;
				ОбщегоНазначенияРТКлиентСервер.ДобавитьВСтруктуру(НоваяСтруктураДействий, СтруктураДействий);
				СоответствиеДействий.Вставить(ТекСтрока, НоваяСтруктураДействий);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	
	Если СтруктураТЧ.Свойство("СтрокиТЧ", ЗначениеИзСтруктуры) Тогда
		Для Каждого ТекущаяСтрока Из ЗначениеИзСтруктуры Цикл
			ТекСтруктураДействий = СоответствиеДействий[ТекущаяСтрока];
			Если ТекСтруктураДействий <> Неопределено Тогда
				ОбработатьСтрокуТЧСервер(ТекущаяСтрока, ТекСтруктураДействий, КэшированныеЗначения);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если СтруктураТЧ.Свойство("ТекущаяСтрока", ЗначениеИзСтруктуры) Тогда
		ОбработатьСтрокуТЧСервер(ЗначениеИзСтруктуры, СтруктураДействий, КэшированныеЗначения);
	КонецЕсли;

КонецПроцедуры

// Процедура обработки строки ТЧ на сервере.
//
Процедура ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ПроверитьАссортиментСтроки(ТекущаяСтрока                                 , СтруктураДействий);
	ПроверитьЗапретРозничнойПродажи(ТекущаяСтрока                            , СтруктураДействий);
	ПроверитьСерийныеНомераПоВладельцуСервер(ТекущаяСтрока                   , СтруктураДействий, КэшированныеЗначения);
	ПроверитьНеобходимостьВводаАкцизнойМарки(ТекущаяСтрока                   , СтруктураДействий, КэшированныеЗначения);
	ПроверитьНеобходимостьВводаСправкиНаАлкоголь(ТекущаяСтрока              , СтруктураДействий, КэшированныеЗначения);
	ПроверитьНезаполненностьСтрокиПоступленияТоваровЕГАИССервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОчиститьДанныеПоЗаказуСервер(ТекущаяСтрока                               , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьДанныеПоДокументуПродажиВСтрокеТЧСервер(ТекущаяСтрока           , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьТипНоменклатурыВСтрокеТЧСервер(ТекущаяСтрока                    , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьДоговорПлатежногоАгентаВСтрокеТЧСервер(ТекущаяСтрока            , СтруктураДействий, КэшированныеЗначения);
	ПроверитьФлагРезервированияВСтрокеТЧСервер(ТекущаяСтрока                 , СтруктураДействий, КэшированныеЗначения);
	ПроверитьКорректностьЗаполнитьХарактеристикиИУпаковкиСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьКоличествоУпаковокВСтрокеТЧСервер(ТекущаяСтрока               , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьКоличествоУпаковокФактВСтрокеТЧСервер(ТекущаяСтрока           , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьКоличествоЕдиницПланВСтрокеТЧСервер(ТекущаяСтрока             , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьКоличествоЕдиницФактВСтрокеТЧСервер(ТекущаяСтрока             , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьОчиститьКоличествоУчетВСтрокеТЧСервер(ТекущаяСтрока           , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьКоличествоЕдиницВСтрокеТЧСервер(ТекущаяСтрока                 , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЗаполнитьОбъемВесПоУпаковкеВСтрокеТЧСервер(ТекущаяСтрока        , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьЦенуЗаУпаковкуВСтрокеТЧСервер(ТекущаяСтрока                   , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьСкладПродажиВСтрокеТЧСервер(ТекущаяСтрока                       , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьОрганизациюПродажиВСтрокеТЧСервер(ТекущаяСтрока                 , СтруктураДействий, КэшированныеЗначения);
	ОбнулитьЦенуВСтрокеТЧСервер(ТекущаяСтрока                                , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЦенуПродажиВСтрокеТЧСервер(ТекущаяСтрока                        , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЦенуПродажиНазначеннуюВСтрокеТЧСервер(ТекущаяСтрока             , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЦенуПоВидуЦенВСтрокеТЧСервер(ТекущаяСтрока                      , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЦенуЗакупкиВСтрокеТЧСервер(ТекущаяСтрока                        , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЦенуПрошлойЗакупкиВСтрокеТЧСервер(ТекущаяСтрока                 , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьСтавкуНДСВСтрокеТЧСервер(ТекущаяСтрока                          , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьСтавкуНДСВСтрокеСкладВСтрокеТЧСервер(ТекущаяСтрока              , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьСтавкуНДСВСтрокеСкладВШапкеТЧСервер(ТекущаяСтрока               , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуРучнойСкидкиВСтрокеТЧСервер(ТекущаяСтрока                , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьПроцентРучнойСкидкиВСтрокеТЧСервер(ТекущаяСтрока              , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуВСтрокеТЧСервер(ТекущаяСтрока                            , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуФактВСтрокеТЧСервер(ТекущаяСтрока                        , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьЦенуСкидкуПоСуммеВПродажахВСтрокеТЧСервер(ТекущаяСтрока       , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьЦенуСкидкуПоСуммеВЗакупкахВСтрокеТЧСервер(ТекущаяСтрока       , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуСУчетомАвтоматическойСкидкиВСтрокеТЧСервер(ТекущаяСтрока , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуСУчетомРучнойСкидкиВСтрокеТЧСервер(ТекущаяСтрока         , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуНДСВСтрокеТЧСервер(ТекущаяСтрока                         , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуСНДСВСтрокеТЧСервер(ТекущаяСтрока                        , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуНДСПоСуммеСНДСВСтрокеТЧСервер(ТекущаяСтрока              , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЗаполнитьРеквизитыПоНоменклатуреВСтрокеТЧСервер(ТекущаяСтрока   , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуВозвратСУчетомОснованияВСтрокеТЧСервер(ТекущаяСтрока     , СтруктураДействий, КэшированныеЗначения);
	ПроставитьПродавцаВСтрокеТЧСервер(ТекущаяСтрока                          , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуПоСуммеСНДСВСтрокеТЧСервер(ТекущаяСтрока                 , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьЦенуПоСуммеВЗакупкахВСтрокеТЧСервер(ТекущаяСтрока             , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьПредставлениеТаблоВСтрокеТЧСервер(ТекущаяСтрока                 , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьРасхожденияВСтрокеТЧСервер(ТекущаяСтрока                      , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьКиЗВСтрокеСервер(ТекущаяСтрока                                  , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьGTINВСтроке(ТекущаяСтрока                                       , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьПризнакХарактеристикиИспользуются(ТекущаяСтрока                 , СтруктураДействий, КэшированныеЗначения);
	ПроверитьСерииПоВладельцу(ТекущаяСтрока                                  , СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

// ПРОЦЕДУРЫ ПЕРЕСЧЕТА И ЗАПОЛНЕНИЯ СЕРВЕР.

// Процедура пересчета "ПроверитьСерийныеНомераПоВладельцу"
//
Процедура ПроверитьСерийныеНомераПоВладельцуСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Перем СтруктураПараметровДействия;

	Если СтруктураДействий.Свойство("ПроверитьСерийныеНомераПоВладельцу", СтруктураПараметровДействия) Тогда
		Если СтруктураПараметровДействия = Неопределено ИЛИ НЕ СтруктураПараметровДействия.Свойство("МассивСерийныхНомеров") Тогда
			ТекущаяСтрока.КлючСвязиСерийныхНомеров = 0;
		ИначеЕсли ТекущаяСтрока.КлючСвязиСерийныхНомеров <> 0 И Справочники.СерийныеНомера.СерийныеНомераНеПринадлежатВладельцу(ТекущаяСтрока.Номенклатура, СтруктураПараметровДействия.МассивСерийныхНомеров) Тогда
			ТекущаяСтрока.КлючСвязиСерийныхНомеров = 0;
		КонецЕсли;
		ТекущаяСтрока.ИспользоватьСерийныеНомера = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Номенклатура, "ИспользоватьСерийныеНомера");
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ПроверитьХарактеристикуПоВладельцу" и "ПроверитьЗаполнитьУпаковкуПоВладельцу".
//
Процедура ПроверитьКорректностьЗаполнитьХарактеристикиИУпаковкиСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Перем Характеристика;
	Перем Упаковка;
	СтруктураПараметровДействия = Неопределено;

	ПроверитьХарактеристикуПоВладельцу = СтруктураДействий.Свойство("ПроверитьХарактеристикуПоВладельцу", Характеристика);
	ПроверитьЗаполнитьУпаковкуПоВладельцу       = СтруктураДействий.Свойство("ПроверитьЗаполнитьУпаковкуПоВладельцу", Упаковка);

	Если ПроверитьХарактеристикуПоВладельцу Или ПроверитьЗаполнитьУпаковкуПоВладельцу Тогда
		РезультатПроверки = Справочники.Номенклатура.ПроверитьПринадлежностьХарактеристикиИУпаковкиВладельцу(ТекущаяСтрока.Номенклатура, Характеристика, Упаковка);

		ЗаполнитьЗначенияСвойств(ТекущаяСтрока,РезультатПроверки);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура пересчета "ПересчитатьКоличествоЕдиниц"
//
Процедура ПересчитатьКоличествоЕдиницВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиниц") Тогда
		ТекущаяСтрока.Количество = ТекущаяСтрока.КоличествоУпаковок
		   * ПолучитьКоэффициентУпаковкиСервер(ТекущаяСтрока.Упаковка, КэшированныеЗначения);
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ЗаполнитьОбъемВесУпаковки"
//
Процедура ЗаполнитьЗаполнитьОбъемВесПоУпаковкеВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	Если СтруктураДействий.Свойство("ЗаполнитьОбъемВесУпаковки") Тогда
		ТекущаяСтрока.ОбъемУпаковки = ПолучитьОбъемУпаковкиСервер(ТекущаяСтрока.Упаковка, КэшированныеЗначения);
		ТекущаяСтрока.ВесУпаковки = ПолучитьВесУпаковкиСервер(ТекущаяСтрока.Упаковка, КэшированныеЗначения);
	КонецЕсли;
КонецПроцедуры

// Процедура пересчета "ПересчитатьКоличествоЕдиницПлан"
//
Процедура ПересчитатьКоличествоЕдиницПланВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницПлан") Тогда
		ТекущаяСтрока.КоличествоПлан = ТекущаяСтрока.КоличествоУпаковокПлан
		   * ПолучитьКоэффициентУпаковкиСервер(ТекущаяСтрока.Упаковка, КэшированныеЗначения);
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ПересчитатьКоличествоЕдиницФакт"
//
Процедура ПересчитатьКоличествоЕдиницФактВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	ИмяФакта = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницФакт",ИмяФакта) Тогда
		ТекущаяСтрока["Количество" + ИмяФакта]  = ТекущаяСтрока["КоличествоУпаковок" + ИмяФакта]
		   * ПолучитьКоэффициентУпаковкиСервер(ТекущаяСтрока.Упаковка, КэшированныеЗначения);
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ОчиститьКоличествоУчет"
//
Процедура ПересчитатьОчиститьКоличествоУчетВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если СтруктураДействий.Свойство("ОчиститьКоличествоУчет") Тогда
		
		ТекущаяСтрока.Количество 		 = 0;
		ТекущаяСтрока.КоличествоУпаковок = 0;
		
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ПересчитатьЦенуЗаУпаковку"
//
Процедура ПересчитатьЦенуЗаУпаковкуВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Перем КоличествоЕдиницДоПересчета;

	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаУпаковку", КоличествоЕдиницДоПересчета)
	   И КоличествоЕдиницДоПересчета <> 0 И НЕ КоличествоЕдиницДоПересчета = Неопределено Тогда
		ТекущаяСтрока.Цена = ТекущаяСтрока.Цена
		   / КоличествоЕдиницДоПересчета
		   * ТекущаяСтрока.Количество;
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ЗаполнитьЦенуПродажиНазначенную"
//
Процедура ЗаполнитьЦенуПродажиНазначеннуюВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажиНазначенную", СтруктураПараметровДействия) Тогда
		
		Если ТекущаяСтрока.Номенклатура.ТипНоменклатуры = Перечисления.сабТипыНоменклатуры.ПодарочныйСертификат Тогда
			
			ТекущаяСтрока.Цена = ТекущаяСтрока.Номенклатура.Номинал;
			
		Иначе
			
			ЗаполнитьЦенуПродажиПоЦенамНоменклатурыВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ЗаполнитьЦенуПродажи"
//
Процедура ЗаполнитьЦенуПродажиВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Перем СтруктураПараметровДействия;

	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажи", СтруктураПараметровДействия) Тогда
		
		ТекущаяДатаСеанса = ТекущаяДатаСеанса();
		Если СтруктураПараметровДействия.Дата = НачалоДня(ТекущаяДатаСеанса) Тогда
			СтруктураПараметровДействия.Дата = ТекущаяДатаСеанса;
		КонецЕсли;
		
		Цена = ЗапасыСервер.ПолучитьЦенуПродажи(
			СтруктураПараметровДействия.ОбъектЦенообразования,
			СтруктураПараметровДействия.Дата, 
			ТекущаяСтрока.Номенклатура, 
			ТекущаяСтрока.Характеристика, ТекущаяСтрока.Упаковка,
			СтруктураПараметровДействия.ПриводитьКМинимальнойЦене);
			
		Если Цена > 0 Тогда
			ТекущаяСтрока.Цена = Цена;
		Иначе
			ТекущаяСтрока.Цена = 0;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ЗаполнитьЦенуПоВидуЦен"
//
Процедура ЗаполнитьЦенуПоВидуЦенВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Перем СтруктураПараметровДействия;

	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПоВидуЦен", СтруктураПараметровДействия) Тогда
		
		Цена = ЗапасыСервер.ПолучитьЦенуПоВидуЦен(
			СтруктураПараметровДействия.ВидЦены, 
			СтруктураПараметровДействия.Дата, 
			ТекущаяСтрока.Номенклатура, 
			ТекущаяСтрока.Характеристика, 
			ТекущаяСтрока.Упаковка);
			
		Если Цена > 0 Тогда
			ТекущаяСтрока.Цена = Цена;	
		КонецЕсли;	
		
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ЗаполнитьЦенуПродажиНазначенную" и "ЗаполнитьЦенуПродажи".
//
Процедура ЗаполнитьЦенуПродажиПоЦенамНоменклатурыВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажиНазначенную", СтруктураПараметровДействия) 
		ИЛИ СтруктураДействий.Свойство("ЗаполнитьЦенуПродажи", СтруктураПараметровДействия) Тогда
		
		ТекущаяДатаСеанса = ТекущаяДатаСеанса();
		Если СтруктураПараметровДействия.Дата = НачалоДня(ТекущаяДатаСеанса) Тогда
			СтруктураПараметровДействия.Дата = ТекущаяДатаСеанса;
		КонецЕсли;
		
		Цена = ЗапасыСервер.ПолучитьЦенуПродажиПоЦенамНоменклатуры(
			СтруктураПараметровДействия.ОбъектЦенообразования, 
			СтруктураПараметровДействия.Дата, 
			ТекущаяСтрока.Номенклатура, 
			ТекущаяСтрока.Характеристика, 
			ТекущаяСтрока.Упаковка, 
			СтруктураПараметровДействия.ПриводитьКМинимальнойЦене);
			
		Если Цена > 0 Тогда
			ТекущаяСтрока.Цена = Цена;
		Иначе
			ТекущаяСтрока.Цена = 0;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ЗаполнитьЦенуЗакупки"
//
Процедура ЗаполнитьЦенуЗакупкиВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Перем СтруктураПараметровДействия;

	Если СтруктураДействий.Свойство("ЗаполнитьЦенуЗакупки", СтруктураПараметровДействия) Тогда
				
		Цена = ЗапасыСервер.ПолучитьЦенуПоследнейЗакупки(
			СтруктураПараметровДействия.Дата,
			СтруктураПараметровДействия.Магазин,
			СтруктураПараметровДействия.Контрагент, 
			СтруктураПараметровДействия.Ссылка, 
			ТекущаяСтрока.Номенклатура, 
			ТекущаяСтрока.Характеристика, 
			ТекущаяСтрока.Упаковка);
			
		Если Цена > 0 Тогда
			ТекущаяСтрока.Цена = Цена;	
		КонецЕсли;	
			
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ЗаполнитьЦенуПрошлойЗакупки"
//
Процедура ЗаполнитьЦенуПрошлойЗакупкиВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Перем СтруктураПараметровДействия;

	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПрошлойЗакупки", СтруктураПараметровДействия) Тогда
				
		Цена = ЗапасыСервер.ПолучитьЦенуПоследнейЗакупки(
			СтруктураПараметровДействия.Дата,
			Справочники.Магазины.ПустаяСсылка(),
			Справочники.Контрагенты.ПустаяСсылка(), 
			СтруктураПараметровДействия.Ссылка, 
			ТекущаяСтрока.Номенклатура, 
			ТекущаяСтрока.Характеристика, 
			ТекущаяСтрока.Упаковка);
					
		ТекущаяСтрока.ЦенаПрошлойЗакупки = Цена;
					
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ЗаполнитьСтавкуНДС"
//
Процедура ЗаполнитьСтавкуНДСВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Перем НалогообложениеНДС;

	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДС", НалогообложениеНДС) Тогда
		
		Если НалогообложениеНДС = Истина Тогда
			СтавкаНДС = Справочники.Номенклатура.ПолучитьРеквизитыНоменклатуры(ТекущаяСтрока.Номенклатура).СтавкаНДС;
		ИначеЕсли НалогообложениеНДС = Ложь Тогда
			//СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			СтавкаНДС = ТекущаяСтрока.Номенклатура.СтавкаНДС;
		Иначе
			СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
		КонецЕсли;

		ТекущаяСтрока.СтавкаНДС = СтавкаНДС;
		    		
	КонецЕсли;	
	
КонецПроцедуры

// Процедура пересчета "ЗаполнитьСтавкуНДССкладВСтроке"
//
Процедура ЗаполнитьСтавкуНДСВСтрокеСкладВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДССкладВСтроке", СтруктураПараметровДействия) Тогда
		
		СтавкаНДСПоУмолчанию = Перечисления.СтавкиНДС.БезНДС;
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИСТИНА КАК НеОблагаетсяНДС
		|ИЗ
		|	РегистрСведений.ПримененияЕНВД.СрезПоследних(
		|			&Дата,
		|			Организация = &ОрганизацияСклада
		|				И Склад = &Склад) КАК ПримененияЕНВД
		|ГДЕ
		|	ПримененияЕНВД.РозничнаяТорговляОблагаетсяЕНВД
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(&Дата, Организация = &Организация) КАК Налогообложение
		|ГДЕ
		|	Налогообложение.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Упрощенная)");
		
		Запрос.УстановитьПараметр("Склад"            , ТекущаяСтрока.Склад);
		Запрос.УстановитьПараметр("ОрганизацияСклада", ТекущаяСтрока.Склад.Организация);
		
		Если СтруктураПараметровДействия.Свойство("ОрганизацияПоСкладу") Тогда
			Запрос.УстановитьПараметр("Организация"  , ТекущаяСтрока.Склад.Организация);
		Иначе
			Запрос.УстановитьПараметр("Организация"  , СтруктураПараметровДействия.Организация);
		КонецЕсли;
		Запрос.УстановитьПараметр("Дата"             , СтруктураПараметровДействия.Дата);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		СтавкаНДС = Неопределено;
		
		Если Выборка.Следующий() Тогда
			
			СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			
		Иначе
			
			СтавкаНДС = ТекущаяСтрока.Номенклатура.СтавкаНДС;
			
			Если Не ЗначениеЗаполнено(СтавкаНДС) Тогда
				
				СтавкаНДС = СтавкаНДСПоУмолчанию;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТекущаяСтрока.СтавкаНДС = СтавкаНДС;
		
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ЗаполнитьСтавкуНДССкладВШапке"
//
Процедура ЗаполнитьСтавкуНДСВСтрокеСкладВШапкеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДССкладВШапке", СтруктураПараметровДействия) Тогда
				
		СтавкаНДСПоУмолчанию = Перечисления.СтавкиНДС.БезНДС;
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИСТИНА КАК НеОблагаетсяНДС
		|ИЗ
		|	РегистрСведений.ПримененияЕНВД.СрезПоследних(
		|			&Дата,
		|			Организация = &ОрганизацияСклада
		|				И Склад = &Склад) КАК ПримененияЕНВД
		|ГДЕ
		|	ПримененияЕНВД.РозничнаяТорговляОблагаетсяЕНВД
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(&Дата, Организация = &Организация) КАК Налогообложение
		|ГДЕ
		|	Налогообложение.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Упрощенная)");
		
			
		Запрос.УстановитьПараметр("Склад"            , СтруктураПараметровДействия.Склад);
		Запрос.УстановитьПараметр("ОрганизацияСклада", СтруктураПараметровДействия.Склад.Организация);
		Запрос.УстановитьПараметр("Организация"      , СтруктураПараметровДействия.Организация);
		Запрос.УстановитьПараметр("Дата"             , СтруктураПараметровДействия.Дата);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		СтавкаНДС = Неопределено;
		
		Если Выборка.Следующий() Тогда
			
			СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			
		Иначе
			
			СтавкаНДС = ТекущаяСтрока.Номенклатура.СтавкаНДС;
			
			Если Не ЗначениеЗаполнено(СтавкаНДС) Тогда
				
				СтавкаНДС = СтавкаНДСПоУмолчанию;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТекущаяСтрока.СтавкаНДС = СтавкаНДС;
		
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ПересчитатьСумму"
//
Процедура ПересчитатьСуммуВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Если СтруктураДействий.Свойство("ПересчитатьСумму") Тогда
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Цена * ТекущаяСтрока.КоличествоУпаковок;
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ОбнулитьЦену"
//
Процедура ОбнулитьЦенуВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	ИмяРеквизитаЦены = "";
	Если СтруктураДействий.Свойство("ОбнулитьЦену", ИмяРеквизитаЦены) Тогда
		Если Не ЗначениеЗаполнено(ИмяРеквизитаЦены) Тогда
			ИмяРеквизитаЦены = "Цена"
		КонецЕсли;
		ТекущаяСтрока[ИмяРеквизитаЦены] = 0;
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ПересчитатьСуммуФакт"
//
Процедура ПересчитатьСуммуФактВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	ИмяКоличества = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуФакт",ИмяКоличества) Тогда
		Если Не ЗначениеЗаполнено(ИмяКоличества) Тогда
			ИмяКоличества = "КоличествоУпаковокФакт";
		КонецЕсли;
		ТекущаяСтрока.СуммаФакт = ТекущаяСтрока.Цена * ТекущаяСтрока[ИмяКоличества];
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ПересчитатьПроцентРучнойСкидки"
//
Процедура ПересчитатьПроцентРучнойСкидкиВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьПроцентРучнойСкидки", СтруктураПараметровДействия) Тогда
		
		Если ТекущаяСтрока.КоличествоУпаковок * ТекущаяСтрока.Цена <> 0 Тогда
			ТекущаяСтрока.ПроцентРучнойСкидки = Окр(100*ТекущаяСтрока.СуммаРучнойСкидки / (ТекущаяСтрока.КоличествоУпаковок *ТекущаяСтрока.Цена), 2);
		Иначе
			ТекущаяСтрока.ПроцентРучнойСкидки = 0;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ПересчитатьСуммуРучнойСкидки"
//
Процедура ПересчитатьСуммуРучнойСкидкиВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуРучнойСкидки", СтруктураПараметровДействия) Тогда
		
		ТекущаяСтрока.СуммаРучнойСкидки = Окр(ТекущаяСтрока.КоличествоУпаковок *ТекущаяСтрока.Цена * ТекущаяСтрока.ПроцентРучнойСкидки / 100, 2);
		
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ПересчитатьЦенуСкидкуПоСуммеВПродажах"
//
Процедура ПересчитатьЦенуСкидкуПоСуммеВПродажахВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВПродажах", СтруктураПараметровДействия) Тогда
		
		ИспользоватьРучныеСкидки = Ложь;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если СтруктураПараметровДействия.Свойство("ИспользоватьРучныеСкидки") Тогда
				ИспользоватьРучныеСкидки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ИспользоватьАвтоматическиеСкидки = Ложь;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если СтруктураПараметровДействия.Свойство("ИспользоватьАвтоматическиеСкидки") Тогда
				ИспользоватьАвтоматическиеСкидки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ИспользоватьРучныеСкидки И КэшированныеЗначения.ИспользоватьРучныеСкидкиВПродажах = Неопределено Тогда
			КэшированныеЗначения.ИспользоватьРучныеСкидкиВПродажах = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
		КонецЕсли;
		
		Если ИспользоватьАвтоматическиеСкидки И КэшированныеЗначения.ИспользоватьАвтоматическиеСкидкиВПродажах = Неопределено Тогда
			КэшированныеЗначения.ИспользоватьАвтоматическиеСкидкиВПродажах = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
		КонецЕсли;
		
		// Если используются ручные скидки - перерасчитаем процент и сумму ручной скидки, иначе перерасчитываем цену.
		Если ИспользоватьРучныеСкидки И КэшированныеЗначения.ИспользоватьРучныеСкидкиВПродажах Тогда
				
				Если ТекущаяСтрока.КоличествоУпаковок = 0 Тогда
					Сумма = ТекущаяСтрока.Цена;
				Иначе
					Сумма = ТекущаяСтрока.Цена * ТекущаяСтрока.КоличествоУпаковок;
				КонецЕсли;
				
				Если Сумма = 0 Или ТекущаяСтрока.Сумма = 0 Тогда
					
					ТекущаяСтрока.Цена                = ТекущаяСтрока.Сумма;
					ТекущаяСтрока.СуммаРучнойСкидки   = 0;
					ТекущаяСтрока.ПроцентРучнойСкидки = 0;
					
				Иначе
					
					ТекущаяСтрока.СуммаРучнойСкидки   = Сумма - ТекущаяСтрока.Сумма;
					ТекущаяСтрока.ПроцентРучнойСкидки = Окр(100*ТекущаяСтрока.СуммаРучнойСкидки / Сумма, 2);
					
				КонецЕсли;
			
		Иначе
			
			Если ТекущаяСтрока.КоличествоУпаковок = 0 Тогда
				ТекущаяСтрока.Цена = ТекущаяСтрока.Сумма;
			Иначе
				ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока.КоличествоУпаковок, 2);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИспользоватьАвтоматическиеСкидки Тогда
			Если КэшированныеЗначения.ИспользоватьАвтоматическиеСкидкиВПродажах Тогда
				ТекущаяСтрока.СуммаАвтоматическойСкидки   = 0;
				ТекущаяСтрока.ПроцентАвтоматическойСкидки = 0;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура пересчета "ПересчитатьЦенуСкидкуПоСуммеВЗакупках"
//
Процедура ПересчитатьЦенуСкидкуПоСуммеВЗакупкахВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВЗакупках", СтруктураПараметровДействия) Тогда
		
		// Если используются ручные скидки - перерасчитаем процент и сумму ручной скидки, иначе перерасчитываем цену.
		ИспользоватьРучныеСкидки = Ложь;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если СтруктураПараметровДействия.Свойство("ИспользоватьРучныеСкидки") Тогда
				ИспользоватьРучныеСкидки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ИспользоватьРучныеСкидки И КэшированныеЗначения.ИспользоватьРучныеСкидкиВЗакупках = Неопределено Тогда
			
			//КэшированныеЗначения.ИспользоватьРучныеСкидкиВЗакупках = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВЗакупках");
			КэшированныеЗначения.ИспользоватьРучныеСкидкиВЗакупках = Ложь;
			
		КонецЕсли;
		
		// Если используются ручные скидки - перерасчитаем процент и сумму ручной скидки, иначе перерасчитываем цену.
		Если ИспользоватьРучныеСкидки И КэшированныеЗначения.ИспользоватьРучныеСкидкиВЗакупках Тогда
			
				Если ТекущаяСтрока.КоличествоУпаковок = 0 Тогда
					Сумма = ТекущаяСтрока.Цена;
				Иначе
					Сумма = ТекущаяСтрока.Цена * ТекущаяСтрока.КоличествоУпаковок;
				КонецЕсли;
				
				Если Сумма = 0 Или ТекущаяСтрока.Сумма = 0 Тогда
					
					ТекущаяСтрока.Цена                = ТекущаяСтрока.Сумма;
					ТекущаяСтрока.СуммаРучнойСкидки   = 0;
					ТекущаяСтрока.ПроцентРучнойСкидки = 0;
					
				Иначе
					
					ТекущаяСтрока.СуммаРучнойСкидки   = Сумма - ТекущаяСтрока.Сумма;
					ТекущаяСтрока.ПроцентРучнойСкидки = Окр(100*ТекущаяСтрока.СуммаРучнойСкидки / Сумма, 2);
					
				КонецЕсли;
			
		Иначе
			
			Если ТекущаяСтрока.КоличествоУпаковок = 0 Тогда
				ТекущаяСтрока.Цена = ТекущаяСтрока.Сумма;
			Иначе
				ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока.КоличествоУпаковок, 2);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура пересчета "ПересчитатьЦенуПоСуммеВЗакупках"
//
Процедура ПересчитатьЦенуПоСуммеВЗакупкахВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуПоСуммеВЗакупках", СтруктураПараметровДействия) Тогда
		
		Если ТекущаяСтрока.КоличествоУпаковок = 0 Тогда
			ТекущаяСтрока.Цена = ТекущаяСтрока.Сумма;
		Иначе
			ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока.КоличествоУпаковок, 2);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура пересчета "ПересчитатьЦенуПоСуммеФакт"
//
Процедура ПересчитатьЦенуПоСуммеФактВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуПоСуммеФакт", СтруктураПараметровДействия) Тогда
						
		Если ТекущаяСтрока.КоличествоУпаковокФакт = 0 Тогда
			
			ТекущаяСтрока.Цена = ТекущаяСтрока.СуммаФакт;
			
		Иначе
			
			ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.СуммаФакт / ТекущаяСтрока.КоличествоУпаковокФакт, 2);
			
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

// Процедура пересчета "ПересчитатьСуммуСУчетомРучнойСкидки"
//
Процедура ПересчитатьСуммуСУчетомРучнойСкидкиВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомРучнойСкидки", СтруктураПараметровДействия) Тогда
		
		Очищать = Неопределено;
		ПересчитыватьСуммуСкидки = Неопределено;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			
			СтруктураПараметровДействия.Свойство("Очищать", Очищать);
			СтруктураПараметровДействия.Свойство("ПересчитыватьСуммуСкидки", ПересчитыватьСуммуСкидки);
			
			Если Очищать = Истина Тогда
				
				ТекущаяСтрока.СуммаРучнойСкидки   = 0;
				ТекущаяСтрока.ПроцентРучнойСкидки = 0;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ПересчитыватьСуммуСкидки = Ложь Тогда


			ТекущаяСтрока.СуммаРучнойСкидки = Окр(ТекущаяСтрока.КоличествоУпаковок *ТекущаяСтрока.Цена * ТекущаяСтрока.ПроцентРучнойСкидки / 100, 2);
		КонецЕсли;
		
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаРучнойСкидки;
		
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ПересчитатьСуммуСУчетомАвтоматическойСкидки"
//
Процедура ПересчитатьСуммуСУчетомАвтоматическойСкидкиВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомАвтоматическойСкидки", СтруктураПараметровДействия) Тогда
		
		Очищать = Неопределено;
		ПересчитыватьСуммуСкидки = Неопределено;
		Если СтруктураПараметровДействия <> Неопределено Тогда

			
			СтруктураПараметровДействия.Свойство("Очищать", Очищать);
			СтруктураПараметровДействия.Свойство("ПересчитыватьСуммуСкидки", ПересчитыватьСуммуСкидки);
			
			Если Очищать = Истина Тогда
				
				ТекущаяСтрока.СуммаАвтоматическойСкидки = 0;
				ТекущаяСтрока.ПроцентАвтоматическойСкидки = 0;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПересчитыватьСуммуСкидки <> Ложь Тогда
			ТекущаяСтрока.СуммаАвтоматическойСкидки = Окр(ТекущаяСтрока.КоличествоУпаковок *ТекущаяСтрока.Цена * ТекущаяСтрока.ПроцентАвтоматическойСкидки / 100, 2);
		КонецЕсли;
		
		Скидка = ТекущаяСтрока.СуммаАвтоматическойСкидки;
		
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Сумма - Скидка;
		
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ПересчитатьСуммуНДС"
//
Процедура ПересчитатьСуммуНДСВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДС", СтруктураПараметровДействия) Тогда
		
		Если КэшированныеЗначения.Свойство("ПроцентыСтавокНДС") Тогда
			ТекПроцентНДС = КэшированныеЗначения.ПроцентыСтавокНДС[ТекущаяСтрока.СтавкаНДС];
		Иначе
			КэшированныеЗначения.Вставить("ПроцентыСтавокНДС", Новый Соответствие);
			ТекПроцентНДС = Неопределено;
		КонецЕсли;
		
		Если ТекПроцентНДС = Неопределено Тогда
			
			ТекПроцентНДС = ОбработкаТабличнойЧастиТоварыКлиентСерверПовтИсп.ПолучитьСтавкуНДСЧислом(ТекущаяСтрока.СтавкаНДС);
			КэшированныеЗначения.ПроцентыСтавокНДС.Вставить(ТекущаяСтрока.СтавкаНДС, ТекПроцентНДС);
			
		КонецЕсли;
		
		ТекущаяСтрока.СуммаНДС = РассчитатьСуммуНДС(ТекущаяСтрока.Сумма, ТекущаяСтрока.СтавкаНДС, СтруктураПараметровДействия.ЦенаВключаетНДС);
		
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ПересчитатьСуммуНДСПоСуммеСНДС"
//
Процедура ПересчитатьСуммуНДСПоСуммеСНДСВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДСПоСуммеСНДС", СтруктураПараметровДействия) Тогда
		
		Если КэшированныеЗначения.Свойство("ПроцентыСтавокНДС") Тогда
			ТекПроцентНДС = КэшированныеЗначения.ПроцентыСтавокНДС[ТекущаяСтрока.СтавкаНДС];
		Иначе
			КэшированныеЗначения.Вставить("ПроцентыСтавокНДС", Новый Соответствие);
			ТекПроцентНДС = Неопределено;
		КонецЕсли;
		
		Если ТекПроцентНДС = Неопределено Тогда
			
			ТекПроцентНДС = ОбработкаТабличнойЧастиТоварыКлиентСерверПовтИсп.ПолучитьСтавкуНДСЧислом(ТекущаяСтрока.СтавкаНДС);
			КэшированныеЗначения.ПроцентыСтавокНДС.Вставить(ТекущаяСтрока.СтавкаНДС, ТекПроцентНДС);
			
		КонецЕсли;
		
		ИмяРеквизитаСумма = "СуммаВсего";
		Если СтруктураПараметровДействия.Свойство("ИмяРеквизитаСуммаВсего") Тогда
			ИмяРеквизитаСумма = СтруктураПараметровДействия.ИмяРеквизитаСуммаВсего;
		КонецЕсли;
		
		ТекущаяСтрока.СуммаНДС = РассчитатьСуммуНДСПоСуммеСНДС(ТекущаяСтрока[ИмяРеквизитаСумма], ТекПроцентНДС, СтруктураПараметровДействия.ЦенаВключаетНДС);
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура пересчета "ПересчитатьСуммуПоСуммеСНДС"
//
Процедура ПересчитатьСуммуПоСуммеСНДСВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПоСуммеСНДС", СтруктураПараметровДействия) Тогда
		
		ИмяРеквизитаСумма = "СуммаВсего";
		Если СтруктураПараметровДействия.Свойство("ИмяРеквизитаСуммаВсего") Тогда
			ИмяРеквизитаСумма = СтруктураПараметровДействия.ИмяРеквизитаСуммаВсего;
		КонецЕсли;
		
		Если СтруктураПараметровДействия.ЦенаВключаетНДС Тогда
			ТекущаяСтрока.Сумма = ТекущаяСтрока[ИмяРеквизитаСумма];
		Иначе
			ТекущаяСтрока.Сумма = ТекущаяСтрока[ИмяРеквизитаСумма] - ТекущаяСтрока.СуммаНДС;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура пересчета "ПересчитатьСуммуСНДС"
//
Процедура ПересчитатьСуммуСНДСВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСНДС", СтруктураПараметровДействия) Тогда
		
		ТекущаяСтрока.СуммаСНДС = ТекущаяСтрока.Сумма + ?(СтруктураПараметровДействия.ЦенаВключаетНДС, 0, ТекущаяСтрока.СуммаНДС);
	
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ПересчитатьКоличествоУпаковок"
//
Процедура ПересчитатьКоличествоУпаковокВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Имя = "";
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок",Имя) Тогда
		ТекущаяСтрока["КоличествоУпаковок" + Имя] = ТекущаяСтрока["Количество" + Имя]
		   / ПолучитьКоэффициентУпаковкиСервер(ТекущаяСтрока.Упаковка, КэшированныеЗначения);
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ПересчитатьКоличествоУпаковокФакт"
//
Процедура ПересчитатьКоличествоУпаковокФактВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	ИмяФакта = "";
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокФакт",ИмяФакта) Тогда
		ТекущаяСтрока["КоличествоУпаковок" + ИмяФакта] = ТекущаяСтрока["Количество" + ИмяФакта]
		   / ПолучитьКоэффициентУпаковкиСервер(ТекущаяСтрока.Упаковка, КэшированныеЗначения);
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ПересчитатьСуммуНДС"
//
Процедура ПересчитатьСуммыНДССервер(СтруктураТЧ, СтруктураДействий, КэшированныеЗначения, СоответствиеДействий)

	Перем СтруктураПараметровДействия;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДС", СтруктураПараметровДействия) Тогда
		Если СтруктураПараметровДействия.Свойство("НеобходимоОбработатьВсюТЧ") Тогда
			Для Каждого ТекСтрока Из СтруктураТЧ.СтрокиТЧ Цикл
				НоваяСтруктураДействий = Новый Структура;
				ОбщегоНазначенияРТКлиентСервер.ДобавитьВСтруктуру(НоваяСтруктураДействий, СтруктураДействий);
				СоответствиеДействий.Вставить(ТекСтрока, НоваяСтруктураДействий);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ЗаполнитьТипНоменклатуры"
//
Процедура ЗаполнитьТипНоменклатурыВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Если СтруктураДействий.Свойство("ЗаполнитьТипНоменклатуры") Тогда
		
		Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	Номенклатура.ТипНоменклатуры   КАК ТипНоменклатуры
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Ссылка = &Номенклатура
			|");

		Запрос.УстановитьПараметр("Номенклатура", ТекущаяСтрока.Номенклатура);

		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ТекущаяСтрока.ТипНоменклатуры = Выборка.ТипНоменклатуры;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТипНоменклатурыВСтрокеТЧСервер()

// Процедура заполнения типа номенклатуры в ТЧ.
//
Процедура ЗаполнитьТипНоменклатурыВТЧСервер(ТаблицаФормы) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,
	|	ТаблицаТоваров.Номенклатура
	|ПОМЕСТИТЬ ТаблицаЗапроса
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗапроса.НомерСтроки,
	|	ТаблицаЗапроса.Номенклатура,
	|	ТаблицаЗапроса.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
	|ИЗ
	|	ТаблицаЗапроса КАК ТаблицаЗапроса";
	
	Запрос.УстановитьПараметр("ТаблицаТоваров",  ТаблицаФормы.Выгрузить(,"НомерСтроки,Номенклатура"));
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрТабл Из ТаблицаФормы Цикл
		
		СтрокаРезультата = ТаблицаРезультата[СтрТабл.НомерСтроки-1];
		
		СтрТабл.ТипНоменклатуры = СтрокаРезультата.ТипНоменклатуры;
		
	КонецЦикла;
	

КонецПроцедуры

// Процедура заполнения типа оплат в ТЧ.
//
Процедура ЗаполнитьТипыОплатВТЧСервер(Объект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Оплата.ВидОплаты
	|ПОМЕСТИТЬ ТаблицаВидов
	|ИЗ
	|	&Оплата КАК Оплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидов.ВидОплаты.ТипОплаты КАК ТипОплаты
	|ИЗ
	|	ТаблицаВидов КАК ТаблицаВидов";
	
	Запрос.УстановитьПараметр("Оплата", Объект.Оплата.Выгрузить());
	
	Результат = Запрос.Выполнить();
	ТаблицаТиповОплат = Результат.Выгрузить();
	МассивТиповОплат = ТаблицаТиповОплат.ВыгрузитьКолонку("ТипОплаты");
	
	ТаблицаОплата = Объект.Оплата.Выгрузить();
	ТаблицаОплата.ЗагрузитьКолонку(МассивТиповОплат, "ТипОплаты");
	
	Объект.Оплата.Загрузить(ТаблицаОплата);
	
КонецПроцедуры

// Процедура заполнения использования серийных номеров в ТЧ.
//
Процедура ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(ТаблицаФормы) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,
	|	ТаблицаТоваров.Номенклатура
	|ПОМЕСТИТЬ ТаблицаЗапроса
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗапроса.НомерСтроки,
	|	ТаблицаЗапроса.Номенклатура,
	|	ТаблицаЗапроса.Номенклатура.ИспользоватьСерийныеНомера КАК ИспользоватьСерийныеНомера
	|ИЗ
	|	ТаблицаЗапроса КАК ТаблицаЗапроса";
	
	Запрос.УстановитьПараметр("ТаблицаТоваров",  ТаблицаФормы.Выгрузить(,"НомерСтроки,Номенклатура"));
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрТабл Из ТаблицаФормы Цикл
		
		СтрокаРезультата = ТаблицаРезультата[СтрТабл.НомерСтроки-1];
		
		СтрТабл.ИспользоватьСерийныеНомера = СтрокаРезультата.ИспользоватьСерийныеНомера;
		
	КонецЦикла;
	

КонецПроцедуры

// Процедура пересчета "ЗаполнитьРеквизитыПоНоменклатуре"
//
Процедура ЗаполнитьЗаполнитьРеквизитыПоНоменклатуреВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Перем СтруктураПараметровДействия;

	Если СтруктураДействий.Свойство("ЗаполнитьРеквизитыПоНоменклатуре", СтруктураПараметровДействия) Тогда
		Реквизиты = Справочники.Номенклатура.ПолучитьРеквизитыНоменклатуры(ТекущаяСтрока.Номенклатура);
		ТекущаяСтрока.ЭтоУслуга               = Реквизиты.ЭтоУслуга;
		ТекущаяСтрока.ЭтоПодарочныйСертификат = Реквизиты.ЭтоПодарочныйСертификат;
	КонецЕсли;

КонецПроцедуры

// Процедура заполнения договора платежного агента в ТЧ.
//
Процедура ЗаполнитьДоговорПлатежногоАгентаВТЧСервер(ТаблицаФормы) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,
	|	ТаблицаТоваров.Номенклатура
	|ПОМЕСТИТЬ ТаблицаЗапроса
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗапроса.НомерСтроки,
	|	ТаблицаЗапроса.Номенклатура,
	|	ТаблицаЗапроса.Номенклатура.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента
	|ИЗ
	|	ТаблицаЗапроса КАК ТаблицаЗапроса";
	
	Запрос.УстановитьПараметр("ТаблицаТоваров",  ТаблицаФормы.Выгрузить(,"НомерСтроки,Номенклатура"));
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрТабл Из ТаблицаФормы Цикл
		
		СтрокаРезультата = ТаблицаРезультата[СтрТабл.НомерСтроки-1];
		
		СтрТабл.ДоговорПлатежногоАгента = СтрокаРезультата.ДоговорПлатежногоАгента;
		
	КонецЦикла;
	

КонецПроцедуры

// Процедура заполнения договора платежного агента в строке ТЧ.
//
Процедура ЗаполнитьДоговорПлатежногоАгентаВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт

	Если СтруктураДействий.Свойство("ЗаполнитьДоговорПлатежногоАгента") Тогда
		
		Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	Номенклатура.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Ссылка = &Номенклатура
			|");

		Запрос.УстановитьПараметр("Номенклатура", ТекущаяСтрока.Номенклатура);

		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ТекущаяСтрока.ДоговорПлатежногоАгента = Выборка.ДоговорПлатежногоАгента;
		КонецЕсли;
		
	КонецЕсли;
	

КонецПроцедуры

// Процедура заполнения договора платежного агента в строке ТЧ.
//
Процедура ЗаполнитьПредставлениеТаблоВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем ТекстЗапроса;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПредставлениеТабло", ТекстЗапроса) Тогда
		Если ЗначениеЗаполнено(ТекстЗапроса) 
			И ЗначениеЗаполнено( ТекущаяСтрока.Номенклатура) Тогда
			
			ПостроительЗапроса = Новый ПостроительЗапроса;
			ПостроительЗапроса.Текст = ТекстЗапроса;
			ПостроительЗапроса.ЗаполнитьНастройки();
			
			Запрос = Новый Запрос;
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("Ссылка", ТекущаяСтрока.Номенклатура);
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			ТекстНадписи = "";
			Если Выборка.Следующий() Тогда
				Разделитель = "";
				Для каждого ДоступноеПоле Из ПостроительЗапроса.ДоступныеПоля Цикл
					Значение = Выборка[ДоступноеПоле.Имя];
					ТекстНадписи = ТекстНадписи + Разделитель + Строка(Значение);
					Разделитель = " ";
				КонецЦикла;
				ТекущаяСтрока.ПредставлениеТабло = ТекстНадписи;
			КонецЕсли;
		Иначе
			ТекущаяСтрока.ПредставлениеТабло = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммуВозвратСУчетомОснованияВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	Перем СтруктураПараметровДействия;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуВозвратСУчетомОснования", СтруктураПараметровДействия) Тогда
		
		ЦенаВСтроке = НайтиЦенуВозврата(ТекущаяСтрока, СтруктураПараметровДействия.Основание);
		
		Если ЗначениеЗаполнено(ЦенаВСтроке) Тогда
			ТекущаяСтрока.Сумма = ЦенаВСтроке * ТекущаяСтрока.КоличествоУпаковок;
		Иначе
			ТекущаяСтрока.Сумма = ТекущаяСтрока.Цена * ТекущаяСтрока.КоличествоУпаковок;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПроставитьПродавцаВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	Перем Продавец;

	Если СтруктураДействий.Свойство("ПроставитьПродавца", Продавец) Тогда
		
		ТекущаяСтрока.Продавец = Продавец;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДанныеПоДокументуПродажиВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	Перем ИмяДокумента;

	Если СтруктураДействий.Свойство("ЗаполнитьДанныеПоДокументуПродажи", ИмяДокумента) Тогда
		
		СвойстваСтроки = ПолучитьСтруктуруСтрокиТоваровВДокументеПродажи(ТекущаяСтрока.ЧекККМ, 
																		 ИмяДокумента, 
																		 ТекущаяСтрока.Номенклатура, 
																		 ТекущаяСтрока.Характеристика);
		
		Если Не СвойстваСтроки = Неопределено Тогда
			
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СвойстваСтроки, , "Сумма");
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Процедура пересчета "ПересчитатьРасхождения"
//
Процедура ПересчитатьРасхожденияВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Если СтруктураДействий.Свойство("ПересчитатьРасхождения") Тогда
		
		ТекущаяСтрока.КоличествоУпаковокРасхождения = ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.КоличествоУпаковокВДокументе;
		ТекущаяСтрока.ЕстьРасхождения               = ТекущаяСтрока.КоличествоУпаковокРасхождения <> 0;
		
		Если ТекущаяСтрока.КоличествоУпаковокРасхождения = 0 Тогда
			ТекущаяСтрока.ВариантУчетаРасхождения = ПредопределенноеЗначение("Перечисление.ВариантыУчетаРасхождений.ПустаяСсылка");
			
		ИначеЕсли ТекущаяСтрока.КоличествоУпаковокРасхождения > 0
			И ТекущаяСтрока.ВариантУчетаРасхождения = ПредопределенноеЗначение("Перечисление.ВариантыУчетаРасхождений.ЗаСчетПеревозчика") Тогда
			
			ТекущаяСтрока.ВариантУчетаРасхождения = ПредопределенноеЗначение("Перечисление.ВариантыУчетаРасхождений.ПустаяСсылка");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура заполнения колонок "ХарактеристикиИспользуются" в формах.
// Параметры:
//	ТаблицаФормы - ДанныеФормыКоллекция
//	ПараметрыЗаполнения - структура
//		возможное поле (необязательное):
//  СуффиксДопРеквизита - суффикс реквизитов "Номенклатура" и "Характеристика", если в ТЧ есть такие реквизиты.
Процедура ЗаполнитьПризнакИспользованияХарактеристик(ТаблицаФормы, ПараметрыЗаполнения = Неопределено, НомерСтроки = Неопределено) Экспорт
	
	Перем СуффиксДопРеквизита;
	
	Если ТаблицаФормы.Количество() = 0
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаполнения <> Неопределено Тогда
		
		ПараметрыЗаполнения.Свойство("СуффиксДопРеквизита",СуффиксДопРеквизита);	
		
	КонецЕсли;
	
	Если НомерСтроки = Неопределено Тогда
		Запрос = Новый Запрос;
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаТоваров.НомерСтроки,";
		Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
			ТекстЗапроса = ТекстЗапроса + "	
		|	ТаблицаТоваров.Номенклатура" + СуффиксДопРеквизита +"  КАК Номенклатура" + СуффиксДопРеквизита +","; 
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "	
		|	ТаблицаТоваров.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ТаблицаТоваров
		|ИЗ
		|	&ТаблицаТоваров КАК ТаблицаТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТоваров.НомерСтроки,";
		Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
			ТекстЗапроса = ТекстЗапроса + "	
			|	ВЫБОР
			|		КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры)
			|				ИЛИ ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)	
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ХарактеристикиИспользуются" + СуффиксДопРеквизита +",";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "	
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры)
		|			ИЛИ ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ХарактеристикиИспользуются
		|ИЗ
		|	ТаблицаТоваров КАК ТаблицаТоваров
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
		Запрос.Текст = ТекстЗапроса;
		
		СтрокаДопРеквизитов = ?(Не ЗначениеЗаполнено(СуффиксДопРеквизита), "", ",Номенклатура"+СуффиксДопРеквизита);
		Запрос.УстановитьПараметр("ТаблицаТоваров",  ТаблицаФормы.Выгрузить(,"НомерСтроки,Номенклатура"+СтрокаДопРеквизитов));
		
		ТаблицаПризнаков = Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрТабл Из ТаблицаФормы Цикл
			
			СтрокаХарактеристик = ТаблицаПризнаков[СтрТабл.НомерСтроки-1];
			
			СтрТабл.ХарактеристикиИспользуются = СтрокаХарактеристик.ХарактеристикиИспользуются;
			Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
				СтрТабл["ХарактеристикиИспользуются"+СуффиксДопРеквизита] = СтрокаХарактеристик["ХарактеристикиИспользуются"+СуффиксДопРеквизита];
			КонецЕсли;
			
		КонецЦикла;
	Иначе
		ОбрабатываемаяСтрока = ТаблицаФормы.НайтиПоИдентификатору(НомерСтроки);
		Запрос = Новый Запрос;
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	1 КАК НомерСтроки,";
		Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
			ТекстЗапроса = ТекстЗапроса + "	
		|	ТаблицаТоваров" + СуффиксДопРеквизита +"  КАК Номенклатура" + СуффиксДопРеквизита +","; 
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "	
		|	ТаблицаТоваров.Ссылка КАК Номенклатура
		|ПОМЕСТИТЬ ТаблицаТоваров
		|ИЗ
		|	Справочник.Номенклатура КАК ТаблицаТоваров
		|ГДЕ
		|	ТаблицаТоваров.Ссылка = &Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТоваров.НомерСтроки,";
		Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
			ТекстЗапроса = ТекстЗапроса + "	
			|	ВЫБОР
			|		КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры)
			|				ИЛИ ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)	
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ХарактеристикиИспользуются" + СуффиксДопРеквизита +",";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "	
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры)
		|			ИЛИ ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ХарактеристикиИспользуются
		|ИЗ
		|	ТаблицаТоваров КАК ТаблицаТоваров
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Номенклатура", ОбрабатываемаяСтрока.Номенклатура);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ОбрабатываемаяСтрока.ХарактеристикиИспользуются = Выборка.ХарактеристикиИспользуются;
			Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
				ОбрабатываемаяСтрока["ХарактеристикиИспользуются" + СуффиксДопРеквизита] = Выборка["ХарактеристикиИспользуются" + СуффиксДопРеквизита];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверки заполнения колонок "Характеристика" в формах.
// Параметры:
//	Объект - ДокументОбъект (СправочникОбъект и т.п.).
//  МассивНепроверяемыхРеквизитов - массив реквизитов, которые не нужно проверять платформенной проверкой.
//	Отказ - отказ продолжения операции.
//	ПараметрыЗаполнения - структура
//		возможные поля (все необязательные):
//  СуффиксДопРеквизита - суффикс реквизитов "Номенклатура" и "Характеристика", если в ТЧ есть такие реквизиты,
//						например, "Оприходование", если в ТЧ помимо "Номенклатура" и "Характеристика" есть еще
//						"НоменклатураОприходование" и "ХарактеристикаОприходование".
//	ИмяТЧ - имя проверяемой табличной части, если оно отличается от "Товары".
Процедура ПроверитьЗаполнениеХарактеристик(Объект,МассивНепроверяемыхРеквизитов,Отказ,ПараметрыПроверки = Неопределено) Экспорт
	
	Перем СуффиксДопРеквизита;
	Перем ИмяТЧ;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПроверки <> Неопределено Тогда
		
		ПараметрыПроверки.Свойство("ИмяТЧ",ИмяТЧ);
		ПараметрыПроверки.Свойство("СуффиксДопРеквизита",СуффиксДопРеквизита);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяТЧ) Тогда
		ИмяТЧ = "Товары";
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить(ИмяТЧ+".Характеристика");
	
	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
		МассивНепроверяемыхРеквизитов.Добавить(ИмяТЧ+".Характеристика"+СуффиксДопРеквизита);
	КонецЕсли;
	
	МетаданныеОбъекта = Объект.Метаданные();
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,";
	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
		ТекстЗапроса = ТекстЗапроса + "
	|	ТаблицаТоваров.Номенклатура"+СуффиксДопРеквизита+" КАК Номенклатура"+СуффиксДопРеквизита+",
	|	ТаблицаТоваров.Характеристика"+СуффиксДопРеквизита+" КАК Характеристика"+СуффиксДопРеквизита+",";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ СтрокиСОшибками
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)";
	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
		ТекстЗапроса = ТекстЗапроса + "
	|	ИЛИ ТаблицаТоваров.Характеристика"+СуффиксДопРеквизита+" = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиСОшибками.НомерСтроки,";
	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
		ТекстЗапроса = ТекстЗапроса + "	
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры)
		|				ИЛИ ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры))
		|			И СтрокиСОшибками.Характеристика"+СуффиксДопРеквизита+" = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НеЗаполненаХарактеристика" + СуффиксДопРеквизита +",";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "	
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры)
	|			ИЛИ ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры))
	|			И СтрокиСОшибками.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеЗаполненаХарактеристика
	|ИЗ
	|	СтрокиСОшибками КАК СтрокиСОшибками
	|ГДЕ
	|	(ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры)
	|			ИЛИ ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры))
	| 	И СтрокиСОшибками.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)";
	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
		ТекстЗапроса = ТекстЗапроса + "
	|	ИЛИ (ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры)
	|			ИЛИ ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры))
	|	И СтрокиСОшибками.Характеристика"+СуффиксДопРеквизита+" = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	СтрокаДопРеквизитов = ?(Не ЗначениеЗаполнено(СуффиксДопРеквизита), "", ",Номенклатура"+СуффиксДопРеквизита+",Характеристика"+СуффиксДопРеквизита);
	Запрос.УстановитьПараметр("ТаблицаТоваров",  Объект[ИмяТЧ].Выгрузить(,"НомерСтроки,Номенклатура,Характеристика"+СтрокаДопРеквизитов));
	
	ШаблонСообщения = НСтр("ru='Не заполнена колонка ""%Характеристика%"" в строке %НомерСтроки% списка ""%ТаблицаТовары%"".'");
	
	Выборка = Запрос.Выполнить().Выбрать();
	ПредставлениеТЧ                      = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним;
	ПредставлениеРеквизитаХарактеристика = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты.Характеристика.Синоним;
	ПредставлениеРеквизитаХарактеристикаДоп = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты["Характеристика"+СуффиксДопРеквизита].Синоним;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.НеЗаполненаХарактеристика Тогда
			
			ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Характеристика%", ПредставлениеРеквизитаХарактеристика);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаТовары%", ПредставлениеТЧ);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
			
			Поле
			= ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "Характеристика");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект",Отказ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СуффиксДопРеквизита)
			И Выборка["НеЗаполненаХарактеристика" + СуффиксДопРеквизита] Тогда
			
			ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Характеристика%", ПредставлениеРеквизитаХарактеристикаДоп);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаТовары%", ПредставлениеТЧ);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "Характеристика"+СуффиксДопРеквизита);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект",Отказ);
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

// Процедура проверки заполнения колонки "Номенклатура" в документах.
// Параметры:
//	Объект - ДокументОбъект
//	Отказ - отказ продолжения операции.
//	ПараметрыПроверки - структура
//		возможные поля (все необязательные):
//  ИмяРеквизита - имя проверяемого реквизита с типом СправочникСсылка.Номенклатура, по умолчанию "Номенклатура".
//	ИмяТЧ - имя проверяемой табличной части, по умолчанию "Товары".
Процедура ПроверитьЗаполнениеТЧПриНаличииОбменаСУправлениемТорговлей(Объект, Отказ, ПараметрыПроверки = Неопределено) Экспорт
	
	Перем ИмяРеквизита;
	Перем ИмяТЧ;
		
	ИспользуетсяОбменСУправлениемТорговлей = Константы.ИспользуетсяОбменСУправлениемТорговлей.Получить();
	Если НЕ ИспользуетсяОбменСУправлениемТорговлей Тогда
		Возврат;
	КонецЕсли;	
	
	ИмяТЧ = "Товары";
	ИмяРеквизита = "Номенклатура";
	
	Если ПараметрыПроверки <> Неопределено Тогда
		Если ПараметрыПроверки.Свойство("ИмяТЧ") Тогда
			ИмяТЧ = ПараметрыПроверки.ИмяТЧ;
		КонецЕсли;	
		Если ПараметрыПроверки.Свойство("ИмяРеквизита") Тогда
			ИмяРеквизита = ПараметрыПроверки.ИмяРеквизита;
		КонецЕсли;			
	КонецЕсли;
			
	МетаданныеОбъекта = Объект.Метаданные();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&ТаблицаТоваров КАК Товары
	|ГДЕ
	|	Товары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура,
	|	СправочникНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.сабТипыНоменклатуры.Товар)
	|			ТОГДА 1
	|		КОГДА СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.сабТипыНоменклатуры.Услуга)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЕстьТовары,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.сабТипыНоменклатуры.ПодарочныйСертификат)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЕстьСертификаты
	|ПОМЕСТИТЬ Т
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура
	|ИЗ
	|	Т КАК ТоварыСводно
	|		ЛЕВОЕ СОЕДИНЕНИЕ Т КАК Товары
	|		ПО (ИСТИНА)
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.НомерСтроки,
	|	Товары.ТипНоменклатуры
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ТоварыСводно.ЕстьТовары) = 1 И
	|	МАКСИМУМ(ТоварыСводно.ЕстьСертификаты) = 1 И
	|	Товары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.сабТипыНоменклатуры.ПодарочныйСертификат)");
	
	
	ТаблицаТоваров = Объект[ИмяТЧ].Выгрузить(,"НомерСтроки," + ИмяРеквизита);
	КолонкаТаблицыТоваров = ТаблицаТоваров.Колонки[ИмяРеквизита];
	КолонкаТаблицыТоваров.Имя = "Номенклатура";
	Запрос.УстановитьПараметр("ТаблицаТоваров",  ТаблицаТоваров);
	
	ПредставлениеТЧ                      = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним;
	ПредставлениеРеквизитаНоменклатура   = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты[ИмяРеквизита].Синоним;
	ШаблонСообщения = НСтр("ru='В строке %НомерСтроки% в колонке ""%Номенклатура%"" списка ""%ТаблицаТоваров%""
	|указан подарочный сертификат.
	|При совместном использовании с конфигурацией ""Управление торговлей 11"" 
	|операции с подарочными сертификатами оформляются отдельным документом'");
	ШаблонСообщения = СтрЗаменить(ШаблонСообщения, "%Номенклатура%", ПредставлениеРеквизитаНоменклатура);
	ШаблонСообщения = СтрЗаменить(ШаблонСообщения, "%ТаблицаТоваров%", ПредставлениеТЧ);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, ИмяРеквизита),
			"Объект",
			Отказ);
			
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьКоэффициентУпаковкиСервер(ТекУпаковка, КэшированныеЗначения)

	Если ЗначениеЗаполнено(ТекУпаковка) Тогда
		ТекКоэффициент = КэшированныеЗначения.КоэффициентыУпаковок[ТекУпаковка];
		Если ТекКоэффициент = Неопределено Тогда
			ТекКоэффициент = ТекУпаковка.Коэффициент;
			КэшированныеЗначения.КоэффициентыУпаковок.Вставить(ТекУпаковка, ТекКоэффициент);
			КэшированныеЗначения.ОбъемУпаковок.Вставить(ТекУпаковка, ТекУпаковка.Объем);
			КэшированныеЗначения.ВесУпаковок.Вставить(ТекУпаковка, ТекУпаковка.Вес);
		КонецЕсли;
	Иначе
		ТекКоэффициент = 1;
	КонецЕсли;

	Возврат ТекКоэффициент;

КонецФункции

Функция ПолучитьВесУпаковкиСервер(ТекУпаковка, КэшированныеЗначения)

	Если ЗначениеЗаполнено(ТекУпаковка) Тогда
		ТекВес = КэшированныеЗначения.ВесУпаковок[ТекУпаковка];
		Если ТекВес = Неопределено Тогда
			ТекВес = ТекУпаковка.Вес;
			КэшированныеЗначения.КоэффициентыУпаковок.Вставить(ТекУпаковка, ТекУпаковка.Коэффициент);
			КэшированныеЗначения.ОбъемУпаковок.Вставить(ТекУпаковка, ТекУпаковка.Объем);
			КэшированныеЗначения.ВесУпаковок.Вставить(ТекУпаковка, ТекВес);
		КонецЕсли;
	Иначе
		ТекВес = 0;
	КонецЕсли;

	Возврат ТекВес;

КонецФункции

Функция ПолучитьОбъемУпаковкиСервер(ТекУпаковка, КэшированныеЗначения)

	Если ЗначениеЗаполнено(ТекУпаковка) Тогда
		ТекОбъем = КэшированныеЗначения.ОбъемУпаковок[ТекУпаковка];
		Если ТекОбъем = Неопределено Тогда
			ТекОбъем = ТекУпаковка.Объем;
			КэшированныеЗначения.КоэффициентыУпаковок.Вставить(ТекУпаковка, ТекУпаковка.Коэффициент);
			КэшированныеЗначения.ОбъемУпаковок.Вставить(ТекУпаковка, ТекОбъем);
			КэшированныеЗначения.ВесУпаковок.Вставить(ТекУпаковка, ТекУпаковка.Вес);
		КонецЕсли;
	Иначе
		ТекОбъем = 0;
	КонецЕсли;

	Возврат ТекОбъем;

КонецФункции

// Рассчитывает сумму НДС от суммы в зависимости от включения НДС в цену.
//
// Сумма           - Число - Сумма, от которой необходимо рассчитать сумму НДС.
// СтавкаНДС       - ПеречислениеСсылка.СтавкиНДС - Ставка НДС
// ЦенаВключаетНДС - Булево - Признак включения НДС в цену.
//
Функция РассчитатьСуммуНДС(Сумма, СтавкаНДС, ЦенаВключаетНДС = Истина) Экспорт
	
	ПроцентНДС = ОбработкаТабличнойЧастиТоварыКлиентСерверПовтИсп.ПолучитьСтавкуНДСЧислом(СтавкаНДС);
	
	Если ЦенаВключаетНДС Тогда
		СуммаНДС = Сумма * ПроцентНДС / (ПроцентНДС + 1);
	Иначе
		СуммаНДС = Сумма * ПроцентНДС;
	КонецЕсли;
	
	Возврат СуммаНДС;
	
КонецФункции 

// Рассчитывает сумму НДС по сумме с НДС.
//
// Сумма           - Число - Сумма, от которой необходимо рассчитать сумму НДС.
// ПроцентНДС      - Число - Процент ставки НДС.
// ЦенаВключаетНДС - Булево - Признак включения НДС в цену.
//
Функция РассчитатьСуммуНДСПоСуммеСНДС(Сумма, ПроцентНДС, ЦенаВключаетНДС = Истина) Экспорт
	
	Если ЦенаВключаетНДС Тогда
		СуммаНДС = Сумма * ПроцентНДС / (ПроцентНДС + 1);
	Иначе
		СуммаНДС = Сумма * (1 - 1 / (ПроцентНДС + 1));
	КонецЕсли;
	
	Возврат СуммаНДС;
	
КонецФункции

// Процедуры проверки заполнения реквизита Количество и КоличествоУпаковок в документах.
//
Процедура ПроверитьЗаполнениеКоличества(Объект, ПроверяемыеРеквизиты, Отказ, ИмяТабЧасти = "Товары") Экспорт
	
	ИмяРеквизита = "КоличествоУпаковок";
	
	ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти(ИмяТабЧасти + ".Количество"));
	ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти(ИмяТабЧасти + ".КоличествоУпаковок"));
	
	ШаблонОшибкаКоличества = НСтр("ru = 'Не заполнена колонка ""Количество"" в строке №%1 списка ""%2""'");
	ШаблонОшибкаПересчета = НСтр("ru = 'Обнаружено нулевое количество при пересчете в единицу хранения в строке %1 списка ""%2""'");
	
	Для Каждого СтрокаТаб Из Объект[ИмяТабЧасти] Цикл
		Если СтрокаТаб.Количество = 0 И СтрокаТаб.КоличествоУпаковок <> 0 Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибкаПересчета,
				Строка(СтрокаТаб.НомерСтроки),
				ИмяТабЧасти
			);
			
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,
				Объект,
				ОбщегоНазначенияРТ.ПолучитьТекстДляВыдачиСообщенийПоСтрокеТЧ(ИмяТабЧасти, СтрокаТаб.НомерСтроки, ИмяРеквизита),
				,
				Отказ
			);
			
		ИначеЕсли СтрокаТаб.Количество = 0 Или СтрокаТаб.КоличествоУпаковок = 0 Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибкаКоличества,
				Строка(СтрокаТаб.НомерСтроки),
				ИмяТабЧасти
			);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,
				Объект,
				ОбщегоНазначенияРТ.ПолучитьТекстДляВыдачиСообщенийПоСтрокеТЧ(ИмяТабЧасти, СтрокаТаб.НомерСтроки, ИмяРеквизита),
				,
				Отказ
			);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполнения склада продажи в строках.
//
Процедура ЗаполнитьСкладПродажиВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Перем СтруктураПараметровДействия;

	Если СтруктураДействий.Свойство("ЗаполнитьСкладПродажи", СтруктураПараметровДействия) Тогда
		Если НЕ ТекущаяСтрока.Номенклатура.ТипНоменклатуры = Перечисления.сабТипыНоменклатуры.Услуга Тогда
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
			|	РаспределениеПродаж.Склад,
			|	ВЫБОР
			|		КОГДА РаспределениеПродаж.ТоварнаяГруппа = &ТоварнаяГруппа
			|			ТОГДА ВЫБОР
			|					КОГДА РаспределениеПродаж.РабочееМесто = &РабочееМесто
			|						ТОГДА 1
			|					ИНАЧЕ 2
			|				КОНЕЦ
			|		ИНАЧЕ ВЫБОР
			|				КОГДА РаспределениеПродаж.РабочееМесто = &РабочееМесто
			|					ТОГДА 3
			|				ИНАЧЕ 4
			|			КОНЕЦ
			|	КОНЕЦ КАК ПолеУпорядочивания
			|ИЗ
			|	РегистрСведений.РаспределениеПродаж КАК РаспределениеПродаж
			|ГДЕ
			|	РаспределениеПродаж.Магазин = &Магазин
			|	И (РаспределениеПродаж.ТоварнаяГруппа = &ТоварнаяГруппа
			|			ИЛИ РаспределениеПродаж.ТоварнаяГруппа = ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка))
			|	И (РаспределениеПродаж.РабочееМесто = &РабочееМесто
			|			ИЛИ РаспределениеПродаж.РабочееМесто = ЗНАЧЕНИЕ(Справочник.РабочиеМеста.ПустаяСсылка))
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПолеУпорядочивания");
			
			Запрос.УстановитьПараметр("Магазин", СтруктураПараметровДействия.Магазин);
			Запрос.УстановитьПараметр("РабочееМесто", СтруктураПараметровДействия.РабочееМесто);
			Запрос.УстановитьПараметр("ТоварнаяГруппа", ТекущаяСтрока.Номенклатура.ТоварнаяГруппа);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Если Выборка.Следующий() Тогда
				ТекущаяСтрока.Склад = Выборка.Склад;
			Иначе
				ТекущаяСтрока.Склад = СтруктураПараметровДействия.Магазин.СкладПродажи;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура заполнения организации продажи в строках.
//
Процедура ЗаполнитьОрганизациюПродажиВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Перем СтруктураПараметровДействия;

	Если СтруктураДействий.Свойство("ЗаполнитьОрганизациюПродажи", СтруктураПараметровДействия) Тогда
		
		Если ТекущаяСтрока.Номенклатура.ТипНоменклатуры = Перечисления.сабТипыНоменклатуры.Услуга Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
			|	РаспределениеПродажУслугПоОрганизациям.Организация,
			|	ВЫБОР
			|		КОГДА РаспределениеПродажУслугПоОрганизациям.ТоварнаяГруппа = &ТоварнаяГруппа
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК ПолеУпорядочивания
			|ИЗ
			|	РегистрСведений.РаспределениеПродажУслугПоОрганизациям КАК РаспределениеПродажУслугПоОрганизациям
			|ГДЕ
			|	РаспределениеПродажУслугПоОрганизациям.Магазин = &Магазин
			|	И (РаспределениеПродажУслугПоОрганизациям.ТоварнаяГруппа = &ТоварнаяГруппа
			|			ИЛИ РаспределениеПродажУслугПоОрганизациям.ТоварнаяГруппа = ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка))
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПолеУпорядочивания");
			
			Запрос.УстановитьПараметр("Магазин", СтруктураПараметровДействия.Магазин);
			Запрос.УстановитьПараметр("ТоварнаяГруппа", ТекущаяСтрока.Номенклатура.ТоварнаяГруппа);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Если Выборка.Следующий() Тогда
				ТекущаяСтрока.Организация = Выборка.Организация;
			КонецЕсли;
			
		Иначе
			ТекущаяСтрока.Организация = ТекущаяСтрока.Склад.Организация;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Организация) Тогда
			ТекущаяСтрока.Организация = СтруктураПараметровДействия.Магазин.СкладПродажи.Организация;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Процедура заполнения организации продажи в ТЧ.
//
Процедура ЗаполнитьОрганизациюПродажиВТЧСервер(ТаблицаФормы, СтруктураПараметров) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	РаспределениеПродажУслугПоОрганизациям.ТоварнаяГруппа,
	|	РаспределениеПродажУслугПоОрганизациям.Организация
	|ПОМЕСТИТЬ ТаблицаРаспределенияУслуг
	|ИЗ
	|	РегистрСведений.РаспределениеПродажУслугПоОрганизациям КАК РаспределениеПродажУслугПоОрганизациям
	|ГДЕ
	|	РаспределениеПродажУслугПоОрганизациям.Магазин = &Магазин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Склад КАК Справочник.Склады) КАК Склад
	|ПОМЕСТИТЬ ТаблицаЗапроса
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗапроса.НомерСтроки,
	|	ТаблицаЗапроса.Номенклатура,
	|	ТаблицаЗапроса.Номенклатура.ТоварнаяГруппа КАК ТоварнаяГруппа
	|ПОМЕСТИТЬ ТаблицаУслуга
	|ИЗ
	|	ТаблицаЗапроса КАК ТаблицаЗапроса
	|ГДЕ
	|	ТаблицаЗапроса.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.сабТипыНоменклатуры.Услуга)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Организация КАК Организация,
	|	ВложенныйЗапрос.Приоритет КАК Приоритет
	|ПОМЕСТИТЬ ТаблицаУслугиОрганизации
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаУслуга.НомерСтроки КАК НомерСтроки,
	|		ТаблицаУслуга.Номенклатура КАК Номенклатура,
	|		ТаблицаРаспределенияУслуг.Организация КАК Организация,
	|		1 КАК Приоритет
	|	ИЗ
	|		ТаблицаУслуга КАК ТаблицаУслуга
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРаспределенияУслуг КАК ТаблицаРаспределенияУслуг
	|			ПО ТаблицаУслуга.ТоварнаяГруппа = ТаблицаРаспределенияУслуг.ТоварнаяГруппа
	|	ГДЕ
	|		(НЕ ТаблицаУслуга.ТоварнаяГруппа = ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаУслуга.НомерСтроки,
	|		ТаблицаУслуга.Номенклатура,
	|		ТаблицаРаспределенияУслуг.Организация,
	|		2
	|	ИЗ
	|		ТаблицаУслуга КАК ТаблицаУслуга
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРаспределенияУслуг КАК ТаблицаРаспределенияУслуг
	|			ПО (ТаблицаУслуга.ТоварнаяГруппа = ТаблицаРаспределенияУслуг.ТоварнаяГруппа
	|					ИЛИ ТаблицаРаспределенияУслуг.ТоварнаяГруппа = ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка))
	|	ГДЕ
	|		ТаблицаУслуга.ТоварнаяГруппа = ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаУслуга.НомерСтроки,
	|		ТаблицаУслуга.Номенклатура,
	|		&ОрганизацияПоУмолчанию,
	|		3
	|	ИЗ
	|		ТаблицаУслуга КАК ТаблицаУслуга) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗапроса.НомерСтроки,
	|	ТаблицаЗапроса.Номенклатура,
	|	ТаблицаЗапроса.Склад.Организация КАК Организация
	|ИЗ
	|	ТаблицаЗапроса КАК ТаблицаЗапроса
	|ГДЕ
	|	(НЕ ТаблицаЗапроса.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.сабТипыНоменклатуры.Услуга))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.НомерСтроки,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Организация
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаУслугиОрганизации.НомерСтроки КАК НомерСтроки,
	|		ТаблицаУслугиОрганизации.Номенклатура КАК Номенклатура,
	|		ТаблицаУслугиОрганизации.Организация КАК Организация
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ТаблицаУслугиОрганизации.НомерСтроки КАК НомерСтроки,
	|			ТаблицаУслугиОрганизации.Номенклатура КАК Номенклатура,
	|			МИНИМУМ(ТаблицаУслугиОрганизации.Приоритет) КАК Приоритет
	|		ИЗ
	|			ТаблицаУслугиОрганизации КАК ТаблицаУслугиОрганизации
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТаблицаУслугиОрганизации.Номенклатура,
	|			ТаблицаУслугиОрганизации.НомерСтроки) КАК ВложенныйЗапрос
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаУслугиОрганизации КАК ТаблицаУслугиОрганизации
	|			ПО ВложенныйЗапрос.НомерСтроки = ТаблицаУслугиОрганизации.НомерСтроки
	|				И ВложенныйЗапрос.Номенклатура = ТаблицаУслугиОрганизации.Номенклатура
	|				И ВложенныйЗапрос.Приоритет = ТаблицаУслугиОрганизации.Приоритет) КАК ВложенныйЗапрос";
	
	Запрос.УстановитьПараметр("ТаблицаТоваров"        ,  ТаблицаФормы.Выгрузить(,"НомерСтроки,Номенклатура, Склад"));
	Запрос.УстановитьПараметр("Магазин"               ,  СтруктураПараметров.Магазин);
	Запрос.УстановитьПараметр("ОрганизацияПоУмолчанию",  СтруктураПараметров.Магазин.СкладПродажи.Организация);
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрТабл Из ТаблицаФормы Цикл
		
		СтрокаРезультата = ТаблицаРезультата[СтрТабл.НомерСтроки-1];
		
		СтрТабл.Организация = СтрокаРезультата.Организация;
		
	КонецЦикла;
	

КонецПроцедуры

// Процедура заполняет представление табло. Используется в РМК
//
Процедура ЗаполнитьПредставлениеТаблоСервер(ТаблицаФормы, СтруктураДействий) Экспорт
	
	Перем ТекстЗапроса;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПредставлениеТабло", ТекстЗапроса) Тогда
		Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
			Для каждого ТекущаяСтрока Из ТаблицаФормы Цикл
				ЗаполнитьПредставлениеТаблоВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнения организации в сериях.
//
Процедура ЗаполнитьОрганизациюВСериях(ТаблицаИсточник, ТаблицаПриема) Экспорт
	
	Для каждого СтрокаПриема Из ТаблицаПриема Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура"  , СтрокаПриема.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", СтрокаПриема.Характеристика);
		
		СтрокиИсточника = ТаблицаИсточник.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиИсточника.Количество() > 0  Тогда
			
			СтрокаПриема.Организация = СтрокиИсточника[0].Организация;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КолвоЭлементовКоллекции = ТаблицаПриема.Количество();
	Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
		ЭлементКоллекции = ТаблицаПриема[КолвоЭлементовКоллекции - ОбратныйИндекс];

		Если НЕ ЗначениеЗаполнено(ЭлементКоллекции.Организация) Тогда
			ТаблицаПриема.Удалить(ЭлементКоллекции);
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры

// Функция поиска цены возврата.
//
// Параметры:
//  СтрокаТабличнойЧасти - ссылка на строку табличной части.
//  Основание - документ основание.
//
// Возвращаемое значение:
//   Число - цена возврата
//
Функция НайтиЦенуВозврата(СтрокаТабличнойЧасти, Основание) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.Количество = 0
	|			ТОГДА ВложенныйЗапрос.Сумма
	|		ИНАЧЕ ВложенныйЗапрос.Сумма / ВложенныйЗапрос.Количество
	|	КОНЕЦ КАК Цена
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(ЧекККМТовары.Сумма) КАК Сумма,
	|		СУММА(ВЫБОР
	|				КОГДА &Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|					ТОГДА ЧекККМТовары.Количество
	|				ИНАЧЕ ЧекККМТовары.КоличествоУпаковок
	|			КОНЕЦ) КАК Количество
	|	ИЗ
	|		Документ.ЧекККМ.Товары КАК ЧекККМТовары
	|	ГДЕ
	|		ЧекККМТовары.Ссылка = &Ссылка
	|		И ЧекККМТовары.Номенклатура = &Номенклатура
	|		И ЧекККМТовары.Характеристика = &Характеристика
	|		И (ЧекККМТовары.Упаковка = &Упаковка
	|				ИЛИ &Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка))) КАК ВложенныйЗапрос";
	
	Запрос.УстановитьПараметр("Ссылка"        , Основание);
	Запрос.УстановитьПараметр("Упаковка"      , СтрокаТабличнойЧасти.Упаковка);
	Запрос.УстановитьПараметр("Номенклатура"  , СтрокаТабличнойЧасти.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Цена;
	Иначе
		Возврат 0;
	КонецЕсли;
	

КонецФункции // НайтиЦенуВозврата()

// Получает по документу, номенклатуре и характеристике номенклатуры, таблицу строк номенклатуры.
//
// Параметры:
//  Документ - ссылка на документ.
//  МетаданныеНаименование - имя метаданных документа.
//  Номенклатура
//  Характеристика
//  ПолучитьДокументПродажи - Булево
//
// Возвращаемое значение:
//   Таблица Значений
//
Функция ПолучитьТаблицуСтрокДокументаПродажи(Документ, МетаданныеНаименование, Номенклатура, Характеристика) Экспорт

	ПолучитьДокументПродажиЧекаККМ = МетаданныеНаименование = "ЧекККМ";
	
	Если ПолучитьДокументПродажиЧекаККМ Тогда
		СтрокаДокументаПродажи = " ПЕРВЫЕ 1	ДокументПродажиТовары.Ссылка.ОтчетОРозничныхПродажах КАК ДокументПродажи, "
	Иначе
		СтрокаДокументаПродажи = " РАЗЛИЧНЫЕ ДокументПродажиТовары.Ссылка КАК ДокументПродажи,";
	КонецЕсли;
	
	СтрокаПродавец = "ДокументПродажиТовары.Продавец";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ " + СтрокаДокументаПродажи + "
	|	ДокументПродажиТовары.Количество КАК КоличествоВДокументеПродажи,
	|	ДокументПродажиТовары.Сумма,
	|	ДокументПродажиТовары.СтавкаНДС,
	|	" + СтрокаПродавец + " КАК Продавец,
	|	ВЫБОР
	|		КОГДА ДокументПродажиТовары.Количество = 0
	|			ТОГДА ДокументПродажиТовары.Цена
	|		ИНАЧЕ ДокументПродажиТовары.Сумма / ДокументПродажиТовары.Количество
	|	КОНЕЦ КАК Цена
	|ИЗ
	|	Документ." + МетаданныеНаименование +  ".Товары КАК ДокументПродажиТовары
	|ГДЕ
	|	ДокументПродажиТовары.Ссылка = &Ссылка
	|	И ДокументПродажиТовары.Номенклатура = &Номенклатура
	|	И ДокументПродажиТовары.Характеристика = &Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	Цена";

	
	Запрос.УстановитьПараметр("Ссылка", Документ);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);

	
	ТаблицаСтрок = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаСтрок;

КонецФункции

// Получает по документу, номенклатуре и характеристике номенклатуры, строку таблицы.
//
// Параметры:
//  Документ - ссылка на документ.
//  МетаданныеНаименование - имя метаданных документа.
//  Номенклатура
//  Характеристика
//  ПолучитьДокументПродажи - Булево
//
// Возвращаемое значение:
//   Строка таблицы Значений
//
Функция ПолучитьСтруктуруСтрокиТоваровВДокументеПродажи(Документ, МетаданныеНаименование, Номенклатура, Характеристика) Экспорт
	
	Перем Результат;
	
	Результат = Неопределено;
	
	ТаблицаСтрок = ПолучитьТаблицуСтрокДокументаПродажи(Документ, МетаданныеНаименование, Номенклатура, Характеристика);
	
	Если НЕ ТаблицаСтрок.Количество() = 0 Тогда
		Результат = ТаблицаСтрок[0];
	КонецЕсли;
	
	Возврат Результат;

КонецФункции


// Функция добавления серийных номеров в ТЧ.
//
Функция ДобавитьСерийныеНомераВТабличнуюЧасть(ТЧСерийныеНомера, МассивСерийныхНомеров, ТекущийКлючСвязи)  Экспорт

	НовыйКлючСвязи = 0;

	Если ТекущийКлючСвязи <> 0 Тогда

		Для Каждого СтрокаТЧ Из ТЧСерийныеНомера.НайтиСтроки(Новый Структура("КлючСвязиСерийныхНомеров", ТекущийКлючСвязи)) Цикл
			ТЧСерийныеНомера.Удалить(ТЧСерийныеНомера.Индекс(СтрокаТЧ));
		КонецЦикла;

	КонецЕсли;

	Если МассивСерийныхНомеров.Количество() = 0 Тогда

		НовыйКлючСвязи = 0;

	Иначе

		Если ТекущийКлючСвязи = 0 Тогда

			ВремКлючСвязи = 0;
			Для Каждого СтрокаТЧ Из ТЧСерийныеНомера Цикл
				Если ВремКлючСвязи < СтрокаТЧ.КлючСвязиСерийныхНомеров Тогда
					ВремКлючСвязи = СтрокаТЧ.КлючСвязиСерийныхНомеров;
				КонецЕсли;
			КонецЦикла;

			НовыйКлючСвязи = ВремКлючСвязи + 1;

		Иначе
			НовыйКлючСвязи = ТекущийКлючСвязи;
		КонецЕсли;

		Для Каждого СерийныйНомер Из МассивСерийныхНомеров Цикл

			НоваяСтрокаСН = ТЧСерийныеНомера.Добавить();
			НоваяСтрокаСН.СерийныйНомер            = СерийныйНомер;
			НоваяСтрокаСН.КлючСвязиСерийныхНомеров = НовыйКлючСвязи;

		КонецЦикла;
	КонецЕсли;

	Возврат НовыйКлючСвязи;

КонецФункции

/////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С СЕРИЯМИ

// Процедура заполняет статусы указания серий в строках ТЧ товары (комментарий содержит описание подсистемы серий).
//
// Возможные статусы указания серий:
//
//  0 - Серии указывать не требуется
//  нечетные статусы - количество по сериям не совпадает с количеством товаров
//  четные статусы   - количество по сериям не совпадает с количеством товаров
//		 1,2  - серии указываются справочно
//       3,4  - по сериям учитываются остатки, серии указываются по факту отбора
//       5,6  - по сериям учитываются остатки, серии указываются при планировании отбора,
//					заполняются по FEFO (используются только в документах отгрузки товаров)
//       7,8  - по сериям учитываются остатки, серии указываются при планировании отбора
//       9,10 - по сериям учитываются остатки, серии указываются при планировании отгрузки,
//				по сериям формируются движения по регистру СвободныеОстатки (как при приходе, так и при расходе)
//  11 - серии не указаны, указание не обязательно (используется только в заказах).
//
// Параметры процедуры:
//
//		Объект - объект, в котором нужно заполнить статусы. Тип: ДанныеФормыСтруктура или ДокументОбъект.
//
//      ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соответствующей процедурой модуля
//                               менеджера документа (обработки).
//			Содержит свойства:
//				ОБЯЗАТЕЛЬНЫЕ:
//					ИспользоватьСерииНоменклатуры - признак, нужно ли в документе заполнять статусы указания серий.
//					ПоляСвязиСерий - массив с именами реквизитов ТЧ Товары и ТЧ Серии, по которым устанавливается
//									 связь между табличными частями (поля связи "Номенклатура" и "Характеристика" 
//									 присутствуют всегда, их отдельно указывать не нужно).
//					СкладскиеОперации - массив значений ПеречислениеСсылка.СкладскиеОперации - складские операции, оформляемые
//					                    документом НЕОБЯЗАТЕЛЬНЫЕ:
//                  ТолькоПросмотр - признак того, что серии в документе можно только просматривать (значение по
//                                   умолчанию ЛОЖЬ).
//					ТоварВШапке - признак, что параметры указания серий определены для товара в шапке (иначе - для товара в ТЧ)
//					              (значение по умолчанию ЛОЖЬ).
//					БлокироватьДанныеФормы - признак того, что перед открытием форму указания серий, нужно заблокировать форму
//					                         документа (значение по умолчанию ИСТИНА) если ТолькоПросмотр = Истина, то данные формы
//					                         не блокируются.
//              	
//					ИмяТЧТовары - имя табличной части со списком товаров (значение по умолчанию - "Товары").
//              	ИмяТЧСерии - имя табличной части со списком серий (значение по умолчанию - "Серии").
//              	ИмяПоляКоличество - имя поля в ТЧ "Товары", в котором пользователь редактирует количество (значение по
//              	                    умолчанию - "КоличествоУпаковок").
//              	ИмяПоляСклад     - имя реквизита склада (значение по умолчанию - "Склад").
//					ИмяПоляПомещение - имя реквизита помещения, если не задано, значит в документе нет помещений.
//              	
//					ПроцедураЗаполненияСерий - содержит имя документа: если параметр задан, то заполнение статусов указания серий
//					                           делается одноименной процедурой, размещенной в модуле менеджера документа.
//					
//					ЭтоОрдер - признак того, что документ является ордером (значение по умолчанию ЛОЖЬ).
//					ЭтоЗаказ - признак того, что документ является заказом (значение по умолчанию ЛОЖЬ).
//					ЭтоНакладная - признак того, что документ является накладной (значение по умолчанию ЛОЖЬ).
//					
//					ПроверкаОтбора       - на адресном складе перед проверкой должны быть заполнены все серии, по которым ведется
//					                       учет остатков.
//
//      СтрокиТоваровДляОбработки - массив строк товаров, в которых нужно заполнить статусы указания серий,
//									если передано "Неопределено", то статусы заполняются во всех строках товаров.
//      
//		СтрокиСерийДляОбработки - массив строк серий, по данным которых нужно заполнить статусы указания серий,
//									если передано "Неопределено", то учитываются все строки серий.
//		
Процедура ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий,СтрокиТоваровДляОбработки = Неопределено, СтрокиСерийДляОбработки = Неопределено) Экспорт
	
	ИмяТЧТовары = "";
	ТоварВШапке = Ложь;
	Если Не ПараметрыУказанияСерий.Свойство("ТоварВШапке", ТоварВШапке) Тогда
		ТоварВШапке = Ложь;
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяТЧТовары", ИмяТЧТовары) Тогда
		ИмяТЧТовары = "Товары";
	КонецЕсли;
	
	Если Не (ТоварВШапке
		Или Объект[ИмяТЧТовары].Количество() <> 0 ) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяМенеджера = "";
	
	Если ПараметрыУказанияСерий.Свойство("ПроцедураЗаполненияСерий",ИмяМенеджера) Тогда
		Если ПараметрыУказанияСерий.Свойство("ЭтоОбработка")
		   И ПараметрыУказанияСерий.ЭтоОбработка Тогда
			Обработки[ИмяМенеджера].ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий,СтрокиТоваровДляОбработки,СтрокиСерийДляОбработки);
		Иначе
			Документы[ИмяМенеджера].ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий,СтрокиТоваровДляОбработки,СтрокиСерийДляОбработки);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ИмяТЧСерии  = "";
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяТЧСерии", ИмяТЧСерии) Тогда
		ИмяТЧСерии = "Серии";
	КонецЕсли;
	
	Если ИмяТЧТовары = ИмяТЧСерии Тогда
		ЗаполнитьСтатусУказанияСерииВТЧТовары(Объект, Объект[ИмяТЧТовары],ПараметрыУказанияСерий);
		Возврат;
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.Свойство("ЭтоЗаказ") Тогда
		ЭтоЗаказ = ПараметрыУказанияСерий.ЭтоЗаказ
	Иначе
		ЭтоЗаказ = Ложь;
	КонецЕсли;
	
	ИмяПоляМагазин = "";
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяПоляМагазин", ИмяПоляМагазин) Тогда
		ИмяПоляМагазин = "Магазин";
	КонецЕсли;
	
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
			Если ТоварВШапке Тогда
				Если ЭтоЗаказ Тогда
					Объект.УказыватьСерии = Ложь;
				КонецЕсли;
				Объект.СтатусУказанияСерий = 0;	
			Иначе
				Для Каждого СтрТабл Из Объект[ИмяТЧТовары] Цикл
					СтрТабл.СтатусУказанияСерий = 0;	
					Если ЭтоЗаказ Тогда
						СтрТабл.УказыватьСерии = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	
	Если ЭтоЗаказ
		И Не ТоварВШапке
		И ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаКомплектующихДляСборки) = Неопределено 
		И ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаКомплектовДляРазборки) = Неопределено Тогда
		ЕстьОтменаСтроки = Истина;
	Иначе
		ЕстьОтменаСтроки = Ложь;
	КонецЕсли;
	
	ТекстПоляВыбораТовары = "";
	ТекстПоляВыбораСерии = "";
	ТекстПоляСвязиСоединениеТоварыСерии = "";
	ТекстПоляСвязиСоединениеТоварыВсеТовары = "";
	ТекстПоляСвязиВыгружаемыеКолонкиТовары = "";
	ТекстПоляСвязиВыгружаемыеКолонкиСерии = "";
	
	Для Каждого СтрокаМассива Из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстПоляВыбораТовары = ТекстПоляВыбораТовары + "
		|	ТаблицаТоваров." + СтрокаМассива + ",";
		ТекстПоляВыбораСерии = ТекстПоляВыбораСерии + "
		|	ТаблицаСерий." + СтрокаМассива + ",";
		ТекстПоляСвязиСоединениеТоварыСерии = ТекстПоляСвязиСоединениеТоварыСерии + "
	|			И ТаблицаТоваровДляЗапроса."+СтрокаМассива+" = ТаблицаСерийДляЗапроса."+СтрокаМассива;
		ТекстПоляСвязиСоединениеТоварыВсеТовары = ТекстПоляСвязиСоединениеТоварыВсеТовары + "
	|			И ТаблицаТоваров."+СтрокаМассива+" = ТаблицаТоваровДляЗапроса." + СтрокаМассива;
		ТекстПоляСвязиВыгружаемыеКолонкиТовары = ТекстПоляСвязиВыгружаемыеКолонкиТовары + ", " + СтрокаМассива;
		ТекстПоляСвязиВыгружаемыеКолонкиСерии = ТекстПоляСвязиВыгружаемыеКолонкиСерии + ", " + СтрокаМассива;
	КонецЦикла;
	
	Если ЕстьОтменаСтроки Тогда
		ТекстПоляВыбораТовары = ТекстПоляВыбораТовары + "
		|	ТаблицаТоваров.Отменено,";
		ТекстПоляСвязиВыгружаемыеКолонкиТовары = ТекстПоляСвязиВыгружаемыеКолонкиТовары + ", Отменено";
		УсловиеПоОтмененнойСтроке = "		КОГДА ТаблицаТоваров.Отменено 
									|			ТОГДА 0 ";
	Иначе
		УсловиеПоОтмененнойСтроке = "		КОГДА ЛОЖЬ 
									|			ТОГДА 0 ";
	КонецЕсли;
	
	ТекстПоляСвязиСоединениеМагазин = " ПО (МагазиныПолитикиУчетаСерий.Магазин = &Магазин)";

	ТекстЗапроса = 
	"ВЫБРАТЬ " +
	ТекстПоляВыбораТовары + "
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Количество,
	|	ТаблицаТоваров.СтатусУказанияСерий,
	|	ТаблицаТоваров.НомерСтроки
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ " +
	ТекстПоляВыбораТовары + "
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	СУММА(ТаблицаТоваров.Количество) КАК Количество,
	|	ТаблицаТоваров.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры
	|ПОМЕСТИТЬ ТаблицаТоваровДляЗапроса
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров ";
	Если ЕстьОтменаСтроки Тогда
	ТекстЗапроса = ТекстЗапроса + "
	|ГДЕ
	|	НЕ ТаблицаТоваров.Отменено ";
	КонецЕсли;	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|СГРУППИРОВАТЬ ПО " +
	ТекстПоляВыбораТовары + "
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Номенклатура.ВидНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ " +
	ТекстПоляВыбораСерии + "
	|	ТаблицаСерий.Номенклатура,
	|	ТаблицаСерий.Характеристика,
	|	ТаблицаСерий.Количество
	|ПОМЕСТИТЬ ТаблицаСерий
	|ИЗ
	|	&ТаблицаСерий КАК ТаблицаСерий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ " +
	ТекстПоляВыбораСерии + "
	|	ТаблицаСерий.Номенклатура,
	|	ТаблицаСерий.Характеристика,
	|	СУММА(ТаблицаСерий.Количество) КАК Количество
	|ПОМЕСТИТЬ ТаблицаСерийДляЗапроса
	|ИЗ
	|	ТаблицаСерий КАК ТаблицаСерий
	|
	|СГРУППИРОВАТЬ ПО " +
	ТекстПоляВыбораСерии + "
	|	ТаблицаСерий.Номенклатура,
	|	ТаблицаСерий.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР "+
		 УсловиеПоОтмененнойСтроке + "
	|		ИНАЧЕ ВЫБОР
	|				КОГДА МагазиныПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
	|					ТОГДА 0
	|				ИНАЧЕ ВЫБОР
	|						КОГДА (&СправочныйВводСерий)
	|							ТОГДА ВЫБОР
	|										КОГДА ТаблицаТоваровДляЗапроса.Количество = ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0)
	|												И ТаблицаТоваровДляЗапроса.Количество > 0
	|											ТОГДА 2
	|										ИНАЧЕ 11
	|									КОНЕЦ
	|						КОГДА ((&ЭтоОрдер
	|									ИЛИ (НЕ Магазины.ИспользоватьОрдернуюСхемуПриОтгрузке)
	|										И &ЭтоНакладная)
	|									И (МагазиныПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеКлиенту
	|											И &ОтгрузкаКлиенту
	|										ИЛИ МагазиныПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеВРозницу
	|											И &ОтгрузкаВРозницу
	|										ИЛИ МагазиныПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеКомплектующихДляСборки
	|											И &ОтгрузкаКомплектующихДляСборки
	|											И ((НЕ &ТоварВШапке)
	|												ИЛИ &ЭтоОрдер)
	|										ИЛИ МагазиныПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеКомплектовДляРазборки
	|											И &ОтгрузкаКомплектовДляРазборки
	|											И (&ТоварВШапке
	|												ИЛИ &ЭтоОрдер)
	|										ИЛИ МагазиныПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеПоВозвратуПоставщику
	|											И &ОтгрузкаПоВозвратуПоставщику))
	|							ТОГДА ВЫБОР
	|											КОГДА ТаблицаТоваровДляЗапроса.Количество = ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0)
	|													И ТаблицаТоваровДляЗапроса.Количество > 0
	|												ТОГДА 2
	|											ИНАЧЕ 1
	|									КОНЕЦ
	|						КОГДА (&ЭтоОрдер
	|									ИЛИ (НЕ Магазины.ИспользоватьОрдернуюСхемуПриПеремещении)
	|										И &ЭтоНакладная)
	|										И (МагазиныПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеПоПеремещению
	|											И &ОтгрузкаПоПеремещению)
	|							ТОГДА ВЫБОР
	|											КОГДА ТаблицаТоваровДляЗапроса.Количество = ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0)
	|													И ТаблицаТоваровДляЗапроса.Количество > 0
	|												ТОГДА 2
	|											ИНАЧЕ 1
	|									КОНЕЦ
	|						КОГДА МагазиныПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемке
	|								И (НЕ &ЭтоЗаказ)
	|								И (&ЭтоОрдер
	|									ИЛИ (НЕ Магазины.ИспользоватьОрдернуюСхемуПриПоступлении)
	|										И &ЭтоНакладная)
	|								И (МагазиныПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеОтПоставщика
	|										И &ПриемкаОтПоставщика
	|									ИЛИ МагазиныПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеПоВозвратуОтКлиента
	|										И &ПриемкаПоВозвратуОтКлиента
	|									ИЛИ МагазиныПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеКомплектующихПослеРазборки
	|										И &ПриемкаКомплектующихПослеРазборки
	|										И ((НЕ &ТоварВШапке)
	|											ИЛИ &ЭтоОрдер)
	|									ИЛИ МагазиныПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеСобранныхКомплектов
	|										И &ПриемкаСобранныхКомплектов
	|										И (&ТоварВШапке
	|											ИЛИ &ЭтоОрдер))
	|							ТОГДА ВЫБОР
	|											КОГДА ТаблицаТоваровДляЗапроса.Количество = ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0)
	|													И ТаблицаТоваровДляЗапроса.Количество > 0
	|												ТОГДА 2
	|											ИНАЧЕ 1
	|									КОНЕЦ
	|						КОГДА МагазиныПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемке
	|								И (НЕ &ЭтоЗаказ)
	|								И (&ЭтоОрдер
	|									ИЛИ (НЕ Магазины.ИспользоватьОрдернуюСхемуПриПеремещении)
	|										И &ЭтоНакладная)
	|								И (МагазиныПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеПоПеремещению
	|										И &ПриемкаПоПеремещению)
	|							ТОГДА ВЫБОР
	|											КОГДА ТаблицаТоваровДляЗапроса.Количество = ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0)
	|													И ТаблицаТоваровДляЗапроса.Количество > 0
	|												ТОГДА 2
	|											ИНАЧЕ 1
	|									КОНЕЦ
	|						КОГДА МагазиныПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтраженииИзлишковНедостачПорчи
	|								И (&ЭтоОрдер
	|									ИЛИ (НЕ Магазины.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач)
	|										И &ЭтоНакладная)
	|								И (&ОтражениеИзлишков
	|									ИЛИ &ОтражениеНедостач
	|									ИЛИ &МаркировкаПродукцииДляГИСМ
	|									ИЛИ &ОтражениеПорчи)
	|							ТОГДА ВЫБОР
	|											КОГДА ТаблицаТоваровДляЗапроса.Количество = ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0)
	|													И ТаблицаТоваровДляЗапроса.Количество > 0
	|												ТОГДА 2
	|											ИНАЧЕ 1
	|									КОНЕЦ
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ ТаблицаСтатусов
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаТоваровДляЗапроса КАК ТаблицаТоваровДляЗапроса
	|			ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСерийДляЗапроса КАК ТаблицаСерийДляЗапроса
	|			ПО ТаблицаТоваровДляЗапроса.Номенклатура = ТаблицаСерийДляЗапроса.Номенклатура
	|				И ТаблицаТоваровДляЗапроса.Характеристика = ТаблицаСерийДляЗапроса.Характеристика " +
					ТекстПоляСвязиСоединениеТоварыСерии + "
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК МагазиныПолитикиУчетаСерий
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Магазины КАК Магазины
	|				ПО МагазиныПолитикиУчетаСерий.Магазин = Магазины.Ссылка" +
				ТекстПоляСвязиСоединениеМагазин + "
	|			И ТаблицаТоваровДляЗапроса.ВидНоменклатуры = МагазиныПолитикиУчетаСерий.Ссылка
	|		ПО ТаблицаТоваров.Номенклатура = ТаблицаТоваровДляЗапроса.Номенклатура
	|			И ТаблицаТоваров.Характеристика = ТаблицаТоваровДляЗапроса.Характеристика" +
				ТекстПоляСвязиСоединениеТоварыВсеТовары + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСтатусов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаСтатусов.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	ТаблицаСтатусов КАК ТаблицаСтатусов
	|ГДЕ
	|	ТаблицаСтатусов.СтатусУказанияСерий <> ТаблицаСтатусов.СтарыйСтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;

	Запрос.УстановитьПараметр("Магазин", Объект[ИмяПоляМагазин]);
	
	Запрос.УстановитьПараметр("ТоварВШапке", ТоварВШапке);
	
 	УстановитьПараметрыЗапросаПоПараметрамУказанияСерий(Запрос,ПараметрыУказанияСерий);
	
	Если ТоварВШапке Тогда
		
		ТаблицаТоваров = Новый ТаблицаЗначений;
		ТаблицаТоваров.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаТоваров.Колонки.Добавить("Характеристика",Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаТоваров.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
		ТаблицаТоваров.Колонки.Добавить("НомерСтроки",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(5,0,ДопустимыйЗнак.Неотрицательный)));
		ТаблицаТоваров.Колонки.Добавить("СтатусУказанияСерий",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(2,0,ДопустимыйЗнак.Неотрицательный)));
		
		Для Каждого СтрокаМассива Из ПараметрыУказанияСерий.ПоляСвязи Цикл
			Типы = Новый Массив;
			Типы.Добавить(ТипЗнч(Объект[СтрокаМассива]));
			ТаблицаТоваров.Колонки.Добавить(СтрокаМассива,Новый ОписаниеТипов(Типы));
		КонецЦикла;
		
		СтрокаТовара = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовара,Объект);
		СтрокаТовара.НомерСтроки = 1;
		
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика" + ТекстПоляСвязиВыгружаемыеКолонкиТовары);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска,Объект);
		
		НайденныеСтрокиСерий =  Объект[ИмяТЧСерии].НайтиСтроки(СтруктураПоиска);
		
		Запрос.УстановитьПараметр("ТаблицаТоваров",ТаблицаТоваров);
		Запрос.УстановитьПараметр("ТаблицаСерий", Объект[ИмяТЧСерии].Выгрузить(НайденныеСтрокиСерий,"Номенклатура, Характеристика, Количество" + ТекстПоляСвязиВыгружаемыеКолонкиСерии));
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
		
 			Объект.СтатусУказанияСерий = Выборка.СтатусУказанияСерий;
			Если ЭтоЗаказ Тогда
				Если (Выборка.СтатусУказанияСерий = 11
					Или Выборка.СтатусУказанияСерий = 0) Тогда
					Объект.УказыватьСерии = Ложь;
				Иначе
					Объект.УказыватьСерии = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	Иначе	
		Если СтрокиСерийДляОбработки <> Неопределено
			И СтрокиТоваровДляОбработки <> Неопределено Тогда
			Запрос.УстановитьПараметр("ТаблицаТоваров", Объект[ИмяТЧТовары].Выгрузить(СтрокиТоваровДляОбработки,"Номенклатура, Характеристика, Количество,НомерСтроки, СтатусУказанияСерий" + ТекстПоляСвязиВыгружаемыеКолонкиТовары));
			Запрос.УстановитьПараметр("ТаблицаСерий", Объект[ИмяТЧСерии].Выгрузить(СтрокиСерийДляОбработки,"Номенклатура, Характеристика, Количество" + ТекстПоляСвязиВыгружаемыеКолонкиСерии));
		Иначе
			Запрос.УстановитьПараметр("ТаблицаТоваров", Объект[ИмяТЧТовары].Выгрузить(,"Номенклатура, Характеристика, Количество,НомерСтроки, СтатусУказанияСерий" + ТекстПоляСвязиВыгружаемыеКолонкиТовары));
			Запрос.УстановитьПараметр("ТаблицаСерий", Объект[ИмяТЧСерии].Выгрузить(,"Номенклатура, Характеристика, Количество" + ТекстПоляСвязиВыгружаемыеКолонкиСерии));
		КонецЕсли;
		
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтрТабл = Объект[ИмяТЧТовары][Выборка.НомерСтроки - 1];
			
			СтрТабл.СтатусУказанияСерий = Выборка.СтатусУказанияСерий;
			
			Если ЭтоЗаказ Тогда
				Если (Выборка.СтатусУказанияСерий = 11
					Или Выборка.СтатусУказанияСерий = 0) Тогда
					СтрТабл.УказыватьСерии = Ложь;
				Иначе
					СтрТабл.УказыватьСерии = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Процедура заполнения колонки "СтатусУказанияСерий" в формах, в которых серия редактируется в одной таблице с
// товарами.
// Параметры:
//	Объект - объект, в котором нужно заполнить статусы. Тип: ДанныеФормыСтруктура или ДокументОбъект.
//	ТЧ - табличная часть
//  ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соответствующей процедурой модуля
//                           менеджера документа.
//  СтрокиТоваровДляОбработки - массив строк товаров, в которых нужно заполнить статусы указания серий,
//									если передано "Неопределено", то статусы заполняются во всех строках.
Процедура ЗаполнитьСтатусУказанияСерииВТЧТовары(Объект,ТЧ,ПараметрыУказанияСерий,СтрокиТоваровДляОбработки = Неопределено)
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
			Для Каждого СтрТабл Из ТЧ Цикл
				СтрТабл.СтатусУказанияСерий = 0;
				СтрТабл.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
			КонецЦикла;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Серия,
	|	ТаблицаТоваров.СтатусУказанияСерий,
	|	ТаблицаТоваров.НомерСтроки
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА (НЕ МагазиныПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL )
	|			ТОГДА ВЫБОР
	|					КОГДА МагазиныПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПересчетеТоваров
	|							И (&ОтражениеРезультатовПересчетов
	|							ИЛИ &Пересчет)
	|						ТОГДА 2
	|					КОГДА МагазиныПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтраженииИзлишковНедостачПорчи
	|							И (&ЭтоОрдер
	|								ИЛИ (НЕ Магазины.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач))
	|							И (&ОтражениеИзлишков
	|								ИЛИ &ОтражениеНедостач)
	|						ТОГДА 2
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ТаблицаТовары.Серия КАК Справочник.СерииНоменклатуры).ВидНоменклатуры = ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СерияУказанаКорректно
	|ПОМЕСТИТЬ ТаблицаСтатусов
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК МагазиныПолитикиУчетаСерий
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Магазины КАК Магазины
	|			ПО МагазиныПолитикиУчетаСерий.Магазин = Магазины.Ссылка
	|		ПО (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = МагазиныПолитикиУчетаСерий.Ссылка)
	|			И (МагазиныПолитикиУчетаСерий.Магазин = &Магазин)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСтатусов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаСтатусов.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ТаблицаСтатусов.СерияУказанаКорректно КАК СерияУказанаКорректно
	|ИЗ
	|	ТаблицаСтатусов КАК ТаблицаСтатусов
	|ГДЕ
	|	(ТаблицаСтатусов.СтарыйСтатусУказанияСерий <> ТаблицаСтатусов.СтатусУказанияСерий
	|			ИЛИ (НЕ ТаблицаСтатусов.СерияУказанаКорректно))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Если СтрокиТоваровДляОбработки = Неопределено Тогда
		Запрос.УстановитьПараметр("ТаблицаТоваров", ТЧ.Выгрузить(,"НомерСтроки,Номенклатура,СтатусУказанияСерий,Серия"));
	Иначе
		Запрос.УстановитьПараметр("ТаблицаТоваров", ТЧ.Выгрузить(СтрокиТоваровДляОбработки,"НомерСтроки,Номенклатура,СтатусУказанияСерий, Серия"));
	КонецЕсли;
		
	Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
	
	УстановитьПараметрыЗапросаПоПараметрамУказанияСерий(Запрос,ПараметрыУказанияСерий);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрТабл = ТЧ[Выборка.НомерСтроки - 1];
		
		СтрТабл.СтатусУказанияСерий = Выборка.СтатусУказанияСерий;
		Если Выборка.СтатусУказанияСерий = 0
			Или Не Выборка.СерияУказанаКорректно Тогда
			СтрТабл.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполнения параметров запроса по параметрам указания серий товаров.
// Параметры:
// Запрос - Запрос - Запрос, для которого устанавливаются параметры.
// ПараметрыУказанияСерий - Структура - Структура параметров указания серий.
Процедура УстановитьПараметрыЗапросаПоПараметрамУказанияСерий(Запрос,ПараметрыУказанияСерий) Экспорт
	
	Если ПараметрыУказанияСерий.Свойство("ЭтоОрдер") Тогда
		Запрос.УстановитьПараметр("ЭтоОрдер", ПараметрыУказанияСерий.ЭтоОрдер);
	Иначе
		Запрос.УстановитьПараметр("ЭтоОрдер", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.Свойство("ЭтоНакладная") Тогда
		Запрос.УстановитьПараметр("ЭтоНакладная", ПараметрыУказанияСерий.ЭтоНакладная);
	Иначе
		Запрос.УстановитьПараметр("ЭтоНакладная", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.Свойство("ЭтоЗаказ") Тогда
		Запрос.УстановитьПараметр("ЭтоЗаказ", ПараметрыУказанияСерий.ЭтоЗаказ);
	Иначе
		Запрос.УстановитьПараметр("ЭтоЗаказ", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.Свойство("СправочныйВводСерий") Тогда
		Запрос.УстановитьПараметр("СправочныйВводСерий", ПараметрыУказанияСерий.СправочныйВводСерий);
	Иначе
		Запрос.УстановитьПараметр("СправочныйВводСерий", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаВРозницу) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтгрузкаВРозницу", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтгрузкаВРозницу", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаКлиенту) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтгрузкаКлиенту", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтгрузкаКлиенту", Ложь);
	КонецЕсли;
		
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаКомплектующихДляСборки) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтгрузкаКомплектующихДляСборки", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтгрузкаКомплектующихДляСборки", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаКомплектовДляРазборки) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтгрузкаКомплектовДляРазборки", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтгрузкаКомплектовДляРазборки", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаПоВозвратуПоставщику) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтгрузкаПоВозвратуПоставщику", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтгрузкаПоВозвратуПоставщику", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаПоПеремещению) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтгрузкаПоПеремещению", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтгрузкаПоПеремещению", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ПриемкаОтПоставщика) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПриемкаОтПоставщика", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПриемкаОтПоставщика", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ПриемкаПоВозвратуОтКлиента) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПриемкаПоВозвратуОтКлиента", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПриемкаПоВозвратуОтКлиента", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ПриемкаПоПеремещению) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПриемкаПоПеремещению", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПриемкаПоПеремещению", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ПриемкаПоПрочемуОприходованию) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПриемкаПоПрочемуОприходованию", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПриемкаПоПрочемуОприходованию", Ложь);            
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ПриемкаСобранныхКомплектов) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПриемкаСобранныхКомплектов", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПриемкаСобранныхКомплектов", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ПриемкаКомплектующихПослеРазборки) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПриемкаКомплектующихПослеРазборки", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПриемкаКомплектующихПослеРазборки", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтражениеИзлишков) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтражениеИзлишков", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтражениеИзлишков", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтражениеНедостач) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтражениеНедостач", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтражениеНедостач", Ложь);
	КонецЕсли;

	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтражениеПорчи) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтражениеПорчи", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтражениеПорчи", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.Пересчет) <> Неопределено Тогда
		Запрос.УстановитьПараметр("Пересчет", Истина);
	Иначе
		Запрос.УстановитьПараметр("Пересчет", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтражениеРезультатовПересчетов) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтражениеРезультатовПересчетов", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтражениеРезультатовПересчетов", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.МаркировкаПродукцииДляГИСМ) <> Неопределено Тогда
		Запрос.УстановитьПараметр("МаркировкаПродукцииДляГИСМ", Истина);
	Иначе
		Запрос.УстановитьПараметр("МаркировкаПродукцииДляГИСМ", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.Свойство("ПроверкаОтбора") Тогда
		Запрос.УстановитьПараметр("ПроверкаОтбора", ПараметрыУказанияСерий.ПроверкаОтбора);
	Иначе
		Запрос.УстановитьПараметр("ПроверкаОтбора", Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, предусматривает ли политика указания серий на переданном Магазине указание серий 
// и проверяет принадлежность серии.
//	Параметры:
//		Номенклатура - СправочникСсылка.Номенклатура
//		Магазин - СправочникСсылка.Магазин
//		ИмяПараметраПолитикиУчетаСерий - Строка - имя реквизита политики учета серий, по которому нужно проверить
//			статус указания серий.
//	Возвращаемое значение:
//		Структура:
//			СтатусУказанияСерий - Строка - статус указания серий.
//			Серия - СправочникСсылка.СерииНоменклатуры - если серия принадлежит тому же виду номенклатуры,
//				то переданная серия, иначе - пустая ссылка.
//
Функция СерияУказанаКорректно(Магазин, Номенклатура, Серия, ИмяПараметраПолитикиУчетаСерий) Экспорт
	Результат = Новый Структура("СтатусУказанияСерий,Серия");
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий." + ИмяПараметраПолитикиУчетаСерий + "
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ВидыНоменклатурыПолитикиУчетаСерий
	|		ПО Номенклатура.ВидНоменклатуры = ВидыНоменклатурыПолитикиУчетаСерий.Ссылка
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура
	|	И ВидыНоменклатурыПолитикиУчетаСерий.Магазин = &Магазин
	|	И ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий." + ИмяПараметраПолитикиУчетаСерий;
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Магазин", Магазин);
	
	Если Запрос.Выполнить().Пустой() Тогда
		Результат.СтатусУказанияСерий = 0;
	Иначе
		Результат.СтатусУказанияСерий = 2;
	КонецЕсли;
	
	Если Результат.СтатусУказанияСерий = 0 Тогда
		Результат.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
	Иначе
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Серия, "ВидНоменклатуры")
			 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидНоменклатуры") Тогда
			Результат.Серия = Серия;
		Иначе
			Результат.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Процедура проверяет правильность указания серий товаров по статусам в ТЧ "Товары".
//Если статусы
//       1 - количество по сериям не совпадает с количеством товаров (движения по сериям делать не нужно)
//       3 - количество по сериям не совпадает с количеством товаров (нужно делать движения по сериям)
//       5 - количество по сериям не совпадает с количеством товаров (нужно делать движения по сериям, серии
//           заполняются по FEFO)
//       7 - количество по сериям не совпадает с количеством товаров (серии указываются при планировании отгрузки)
// то выдается ошибка.
// Параметры:
//		ДокументОбъект - ДокументОбъект, в котором нужно проверить указание серий.
//      ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соответствующей процедурой модуля
//                               менеджера документа.
//		Отказ - признак ошибки проверки.
Процедура ПроверитьЗаполнениеСерий(
	ДокументОбъект, 
	ПараметрыУказанияСерий, 
	Отказ, 
	МассивНепроверяемыхРеквизитов = Неопределено, 
	ВыдаватьСообщения = Истина, 
	ТекстСообщения = "") Экспорт
	
	ИмяТЧТовары = "";
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяТЧТовары", ИмяТЧТовары) Тогда
		ИмяТЧТовары = "Товары";
	КонецЕсли;
	
	Если МассивНепроверяемыхРеквизитов <> Неопределено Тогда
		МассивНепроверяемыхРеквизитов.Добавить(ИмяТЧТовары+".Серия");
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТЧСерии  = "";
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяТЧСерии", ИмяТЧСерии) Тогда
		ИмяТЧСерии = "Серии";
	КонецЕсли;
	
	Если ИмяТЧТовары = ИмяТЧСерии Тогда
		
		ИмяПоляКоличество = "";
		
		Если Не ПараметрыУказанияСерий.Свойство("ИмяПоляКоличество", ИмяПоляКоличество) Тогда
			ИмяПоляКоличество = "КоличествоУпаковок";
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаСерий.НомерСтроки КАК НомерСтроки,
		|	ТаблицаСерий.Номенклатура КАК Номенклатура,
		|	ТаблицаСерий.Серия КАК Серия,
		|	ТаблицаСерий."+ИмяПоляКоличество+" КАК КоличествоУпаковок,
		|	ТаблицаСерий.СтатусУказанияСерий КАК СтатусУказанияСерий
		|ПОМЕСТИТЬ ТаблицаСерий
		|ИЗ
		|	&ТаблицаСерий КАК ТаблицаСерий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСерий.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаСерий.Номенклатура) КАК ТоварПредставление,
		|	ВЫБОР
		|		КОГДА ТаблицаСерий.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СерияНеЗаполнена,
		|	ВЫБОР
		|		КОГДА (НЕ ВЫРАЗИТЬ(ТаблицаСерий.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользоватьКоличествоСерии)
		|				И ТаблицаСерий.КоличествоУпаковок <> 1
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОшибкаКоличества
		|ИЗ
		|	ТаблицаСерий КАК ТаблицаСерий
		|ГДЕ
		|	ТаблицаСерий.СтатусУказанияСерий <> 0
		|	И (ТаблицаСерий.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|			ИЛИ (НЕ ВЫРАЗИТЬ(ТаблицаСерий.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользоватьКоличествоСерии)
		|				И ТаблицаСерий.КоличествоУпаковок <> 1)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки,
		|	СерияНеЗаполнена,
		|	ОшибкаКоличества";
		
		Запрос.УстановитьПараметр("ТаблицаСерий",ДокументОбъект[ИмяТЧТовары].Выгрузить(,"НомерСтроки,Номенклатура,Серия,СтатусУказанияСерий, " + ИмяПоляКоличество));
		
		Если ВыдаватьСообщения Тогда
			Выборка = Запрос.Выполнить().Выбрать();
			
			МетаданныеОбъекта = ДокументОбъект.Метаданные();
			ПредставлениеТЧ = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧТовары].Синоним;
			
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.СерияНеЗаполнена Тогда
					ТекстСообщения = НСтр("ru = 'Не заполнена колонка ""Серия"" в строке %НомерСтроки% списка ""%ПредставлениеТЧ%""'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Строка(Выборка.НомерСтроки));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеТЧ%", ПредставлениеТЧ);
					
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧТовары, Выборка.НомерСтроки, "Серия");
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект",Отказ);
				КонецЕсли;
				
				Если Выборка.ОшибкаКоличества Тогда
					ТекстСообщения = НСтр("ru = 'В строке %НомерСтроки% количество должно равняться 1, т.к. политика учета серий товара"
					+ " ""%ТоварПредставление%"" предусматривает, что количество по любой серии этого товара всегда будет равно 1""'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Строка(Выборка.НомерСтроки));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТоварПредставление%", Выборка.ТоварПредставление);
					
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧТовары, Выборка.НомерСтроки, "КоличествоУпаковок");
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ДокументОбъект,Поле,"Объект",Отказ);
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			Если Не Запрос.Выполнить().Пустой() Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ТекстПоляВыбораТовары = "";
	ТекстПоляВыбораСерии = "";
	ТекстПоляСвязиСоединениеТоварыСерии = "";
	ТекстПоляСвязиСоединениеТоварыВсеТовары = "";
	ТекстПоляСвязиВыгружаемыеКолонкиТовары = "";
	ТекстПоляСвязиВыгружаемыеКолонкиСерии = "";
	
	Для Каждого СтрокаМассива Из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстПоляВыбораТовары = ТекстПоляВыбораТовары + "
		|	ТаблицаТоваров." + СтрокаМассива + ",";
		ТекстПоляВыбораСерии = ТекстПоляВыбораСерии + "
		|	ТаблицаСерий." + СтрокаМассива + ",";
		ТекстПоляСвязиСоединениеТоварыСерии = ТекстПоляСвязиСоединениеТоварыСерии + "
	|			И ТаблицаТоваровДляЗапроса."+СтрокаМассива+" = ТаблицаСерийДляЗапроса."+СтрокаМассива;
		ТекстПоляСвязиСоединениеТоварыВсеТовары = ТекстПоляСвязиСоединениеТоварыВсеТовары + "
	|			И ТаблицаТоваров."+СтрокаМассива+" = ТаблицаТоваровДляЗапроса." + СтрокаМассива;
		ТекстПоляСвязиВыгружаемыеКолонкиТовары = ТекстПоляСвязиВыгружаемыеКолонкиТовары + ", " + СтрокаМассива;
		ТекстПоляСвязиВыгружаемыеКолонкиСерии = ТекстПоляСвязиВыгружаемыеКолонкиСерии + ", " + СтрокаМассива;
	КонецЦикла;
	
	Если ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") <> Неопределено Тогда
		ИмяПоляКоличество       = "КоличествоУпаковок";
		ИмяПоляЕдиницаИзмерения = "Упаковка";
	Иначе
		ИмяПоляКоличество       = "Количество";
		ИмяПоляЕдиницаИзмерения = "Номенклатура.ЕдиницаИзмерения";
	КонецЕсли;
	
	ТекстПоляСвязиВыгружаемыеКолонкиТовары = ТекстПоляСвязиВыгружаемыеКолонкиТовары + ", " + ИмяПоляКоличество;
	ТекстПоляСвязиВыгружаемыеКолонкиСерии = ТекстПоляСвязиВыгружаемыеКолонкиСерии + ", " + ИмяПоляКоличество;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ " +
	ТекстПоляВыбораТовары + "
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров." + ИмяПоляКоличество + " КАК Количество,
	|	ТаблицаТоваров.СтатусУказанияСерий,
	|	ТаблицаТоваров.НомерСтроки
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|   ТаблицаТоваров.СтатусУказанияСерий В (1,3,5,7,9)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ " +
	ТекстПоляВыбораТовары + "
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров."  +ИмяПоляЕдиницаИзмерения + " КАК ЕдиницаИзмерения,
	|	ТаблицаТоваров.Характеристика,
	|	СУММА(ТаблицаТоваров.Количество) КАК Количество
	|ПОМЕСТИТЬ ТаблицаТоваровДляЗапроса
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|
	|СГРУППИРОВАТЬ ПО " +
	ТекстПоляВыбораТовары + "
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров."  +ИмяПоляЕдиницаИзмерения + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ " +
	ТекстПоляВыбораСерии + "
	|	ТаблицаСерий.Номенклатура,
	|	ТаблицаСерий.Характеристика,
	|	ТаблицаСерий." + ИмяПоляКоличество + " КАК Количество
	|ПОМЕСТИТЬ ТаблицаСерий
	|ИЗ
	|	&ТаблицаСерий КАК ТаблицаСерий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ " +
	ТекстПоляВыбораСерии + "
	|	ТаблицаСерий.Номенклатура,
	|	ТаблицаСерий.Характеристика,
	|	СУММА(ТаблицаСерий.Количество) КАК Количество
	|ПОМЕСТИТЬ ТаблицаСерийДляЗапроса
	|ИЗ
	|	ТаблицаСерий КАК ТаблицаСерий
	|
	|СГРУППИРОВАТЬ ПО " +
	ТекстПоляВыбораСерии + "
	|	ТаблицаСерий.Номенклатура,
	|	ТаблицаСерий.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0) КАК КоличествоСерий,
	|	ТаблицаТоваровДляЗапроса.Количество КАК КоличествоТоваров,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТоваровДляЗапроса.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТоваров.Номенклатура) КАК Номенклатура,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТоваров.Характеристика) КАК Характеристика
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваровДляЗапроса КАК ТаблицаТоваровДляЗапроса
	|			ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСерийДляЗапроса КАК ТаблицаСерийДляЗапроса
	|			ПО ТаблицаТоваровДляЗапроса.Номенклатура = ТаблицаСерийДляЗапроса.Номенклатура
	|				И ТаблицаТоваровДляЗапроса.Характеристика = ТаблицаСерийДляЗапроса.Характеристика "
					+ ТекстПоляСвязиСоединениеТоварыСерии + "
	|		ПО ТаблицаТоваров.Номенклатура = ТаблицаТоваровДляЗапроса.Номенклатура
	|			И ТаблицаТоваров.Характеристика = ТаблицаТоваровДляЗапроса.Характеристика "
					+ ТекстПоляСвязиСоединениеТоварыВсеТовары + "
	|ГДЕ
	|	ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0) <> ТаблицаТоваровДляЗапроса.Количество
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", ДокументОбъект[ИмяТЧТовары].Выгрузить(,"НомерСтроки,СтатусУказанияСерий,Номенклатура,Характеристика"+ТекстПоляСвязиВыгружаемыеКолонкиТовары));
	Запрос.УстановитьПараметр("ТаблицаСерий", ДокументОбъект[ИмяТЧСерии].Выгрузить(,"Номенклатура,Характеристика"+ТекстПоляСвязиВыгружаемыеКолонкиСерии));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если ВыдаватьСообщения Тогда
		
		Пока Выборка.Следующий() Цикл
			
			ТекстСообщения = НСтр("ru = 'Для товара ""%Товар%""  указано по сериям %КоличествоСерий% %ЕдиницаИзмерения%. Необходимо указать %КоличествоТоваров% %ЕдиницаИзмерения%. Исправьте серии.'");
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Товар%",ОбщегоНазначенияРТ.ПолучитьПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоСерий%",Выборка.КоличествоСерий);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоТоваров%",Выборка.КоличествоТоваров);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЕдиницаИзмерения%",Выборка.ЕдиницаИзмерения);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧТовары, Выборка.НомерСтроки, "СтатусыСерийИПодарочныхСертификатов");
			
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				Отказ = Истина;
			#Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					ДокументОбъект,
					Поле,
					"Объект",
					Отказ);
			#КонецЕсли
			
		КонецЦикла;
	Иначе
		Если Не Запрос.Выполнить().Пустой() Тогда
			
			Пока Выборка.Следующий() Цикл
				
				ТекстСообщения = НСтр("ru = 'Для товара ""%Товар%""  указано по сериям %КоличествоСерий% %ЕдиницаИзмерения%. Необходимо указать %КоличествоТоваров% %ЕдиницаИзмерения%. Исправьте серии.'");
				
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Товар%",ОбщегоНазначенияРТ.ПолучитьПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоСерий%",Выборка.КоличествоСерий);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоТоваров%",Выборка.КоличествоТоваров);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЕдиницаИзмерения%",Выборка.ЕдиницаИзмерения);
				
				Прервать;
			КонецЦикла;
			
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура проверяет правильность указания серий товаров по статусам в шапке документа.
//Если статусы
//       1 - количество по сериям не совпадает с количеством товаров (движения по сериям делать не нужно)
//       3 - количество по сериям не совпадает с количеством товаров (нужно делать движения по сериям)
// то выдается ошибка.
// Параметры:
//		ДокументОбъект - ДокументОбъект, в котором нужно проверить указание серий.
//      ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соответствующей процедурой модуля
//                               менеджера документа.
//		Отказ - признак ошибки проверки.
Процедура ПроверитьЗаполнениеСерийВШапке(ДокументОбъект,ПараметрыУказанияСерий,Отказ) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДокументОбъект.СтатусУказанияСерий = 1
		Или ДокументОбъект.СтатусУказанияСерий = 3 Тогда 
		
		ТекстСообщения = НСтр("ru = 'Для товара ""%Товар%"" необходимо указать серии'");
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Товар%",ОбщегоНазначенияРТ.ПолучитьПредставлениеНоменклатуры(ДокументОбъект.Номенклатура, ДокументОбъект.Характеристика) );
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Номенклатура","Объект",Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Фукнция помещает строки ТЧ "Серии", соответствующие ключевым полям во временное хранилище, для передачи в форму
// редактирования серий.
// Параметры:
//		Объект - ДанныеФормыСтруктура - основной реквизит формы документа.
//      ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соответствующей процедурой модуля
//                               менеджера документа.
//      ТекущиеДанныеИдентификатор - идентификатор текущей строки товаров в форме документа.
//      УникальныйИдентификаторФормы - уникальный идентификатор формы, к которому привязываются данные, помещенные во
//                                     временное хранилище.
// Возвращаемое значение
//		Структура параметров формы указания серий.
Функция ПоместитьСерииВХранилище(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, Форма) Экспорт
	ТоварВШапке = Ложь;
	Если Не ПараметрыУказанияСерий.Свойство("ТоварВШапке", ТоварВШапке) Тогда
		ТоварВШапке = Ложь;
	КонецЕсли;
	
	УникальныйИдентификаторФормы = Форма.УникальныйИдентификатор;
	
	ТолькоПросмотр = Ложь;
	БлокироватьДанныеФормы = Истина;
	
	Если Не ПараметрыУказанияСерий.Свойство("ТолькоПросмотр",ТолькоПросмотр) Тогда
		ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.Свойство("БлокироватьДанныеФормы",БлокироватьДанныеФормы) Тогда
		БлокироватьДанныеФормы = Истина;
	КонецЕсли;
	
	// Если нужно будет изменять количество, то данные формы нужно заблокировать.
	// Если заблокировать не удастся - вылетит исключение.
	Если Не ТолькоПросмотр
		И БлокироватьДанныеФормы Тогда
		Форма.ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	ПроверкаДокумента = ПараметрыУказанияСерий.Свойство("ПроверкаТоваровВДокументе");
	
	ИмяТЧТовары  = "";
	ИмяТЧСерии   = "";
	ИмяПоляПомещение = "";
	ЭтоЗаказ = Ложь;
	ИмяКолонкиКоличество         = "";
	ИмяКолонкиКоличествоУпаковок = "";
	
	Если Не ПараметрыУказанияСерий.Свойство("ЭтоЗаказ",ЭтоЗаказ) Тогда
		ЭтоЗаказ = Ложь;
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяТЧТовары", ИмяТЧТовары) Тогда
		ИмяТЧТовары = "Товары";
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяТЧСерии", ИмяТЧСерии) Тогда
		ИмяТЧСерии = "Серии";
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяПоляПомещение", ИмяПоляПомещение) Тогда
		ИмяПоляПомещение = "";
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяКолонкиКоличество", ИмяКолонкиКоличество) Тогда
		ИмяКолонкиКоличество = "Количество";
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяКолонкиКоличествоУпаковок", ИмяКолонкиКоличествоУпаковок) Тогда
		ИмяКолонкиКоличествоУпаковок = "КоличествоУпаковок";
	КонецЕсли;
	
	
	ТекстПоляСвязи = "";
	ТекстВыбораТоваров = "";
	
	Для Каждого СтрокаМассива Из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстВыбораТоваров = ТекстВыбораТоваров + "
		|	ТаблицаТоваров."  + СтрокаМассива + ", ";
		
		ТекстПоляСвязи = ТекстПоляСвязи + "," + СтрокаМассива  ;
	КонецЦикла;
	

	РегистрироватьСерии = ОбработкаТабличнойЧастиТоварыКлиентСервер.НеобходимоРегистрироватьСерии(ПараметрыУказанияСерий);
	
	Если ТоварВШапке Тогда
		ТекущиеДанные = Объект;
	Иначе
		ТекущиеДанные = Объект[ИмяТЧТовары].НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	КонецЕсли;

	ЕстьУпаковки = ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") <> Неопределено;
	НомераСтрокДокумента = "";
	
	Если ТоварВШапке Тогда
		КоличествоВДокументе = Объект.Количество;
		СтруктураПоиска = Новый Структура("Номенклатура,Характеристика"+ТекстПоляСвязи);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска,Объект);
	Иначе
		СтруктураПоиска = Новый Структура("Номенклатура,Характеристика"+ТекстПоляСвязи);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска,ТекущиеДанные);
		
		НайденныеСтрокиТоваров = Объект[ИмяТЧТовары].НайтиСтроки(СтруктураПоиска);
		
		КоличествоВДокументе = 0;
		Для Каждого СтрокаМассива Из НайденныеСтрокиТоваров Цикл
			ИмяКолонкиКоличество         = ?(ПроверкаДокумента, "КоличествоВДокументе"        , ИмяКолонкиКоличество);
			ИмяКолонкиКоличествоУпаковок = ?(ПроверкаДокумента, "КоличествоУпаковокВДокументе", ИмяКолонкиКоличествоУпаковок);
			
			Если ЕстьУпаковки Тогда
				КоличествоВДокументе = КоличествоВДокументе + СтрокаМассива[ИмяКолонкиКоличествоУпаковок];
			Иначе
				КоличествоВДокументе = КоличествоВДокументе + СтрокаМассива[ИмяКолонкиКоличество];
			КонецЕсли;
			
			НомераСтрокДокумента = НомераСтрокДокумента + Строка(СтрокаМассива.НомерСтроки) + ", ";
		КонецЦикла;
		
		Если Не ПустаяСтрока(НомераСтрокДокумента) Тогда
			НомераСтрокДокумента = Лев(НомераСтрокДокумента, СтрДлина(НомераСтрокДокумента)-2);
		КонецЕсли;
	КонецЕсли;
	
	НайденныеСтрокиСерий = Объект[ИмяТЧСерии].НайтиСтроки(СтруктураПоиска);
	
	ТаблицаСерий = Новый ТаблицаЗначений;
	ТаблицаСерий.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаСерий.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаСерий.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	
	Если ПроверкаДокумента Тогда
		ТаблицаСерий.Колонки.Добавить("КоличествоНеОтгружать", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
		ТаблицаСерий.Колонки.Добавить("КоличествоУпаковокНеОтгружать", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
		ТаблицаСерий.Колонки.Добавить("КоличествоВДокументе", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
		ТаблицаСерий.Колонки.Добавить("КоличествоУпаковокВДокументе", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	КонецЕсли;
	
	Для Каждого СтрокаМассива Из НайденныеСтрокиСерий Цикл
		
		НоваяСтрока = ТаблицаСерий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМассива);
		
		Если Не ЕстьУпаковки Тогда
			НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
			Если ПроверкаДокумента Тогда
				НоваяСтрока.КоличествоУпаковокНеОтгружать = НоваяСтрока.КоличествоНеОтгружать;
				Если Не ЕстьУпаковки Тогда
					НоваяСтрока.КоличествоУпаковокВДокументе = НоваяСтрока.КоличествоВДокументе;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ТаблицаСерий,УникальныйИдентификаторФормы);
	
	ПараметрыФормыУказанияСерий = Новый Структура("Номенклатура,Характеристика,СтатусУказанияСерий,ХарактеристикиИспользуются"+ТекстПоляСвязи);
	ПараметрыФормыУказанияСерий.Вставить("НомераСтрокДокумента", НомераСтрокДокумента); 
	
	Если НЕ ТоварВШапке Тогда
		АдресВоВременномХранилищеНайденныеСтрокиТоваров = ПоместитьВоВременноеХранилище(НайденныеСтрокиТоваров,УникальныйИдентификаторФормы);
		ПараметрыФормыУказанияСерий.Вставить("НайденныеСтрокиТоваров", АдресВоВременномХранилищеНайденныеСтрокиТоваров);
		
		ПараметрыФормыУказанияСерий.Вставить("НомерСтроки", ТекущиеДанные.НомерСтроки);
		
	КонецЕсли;
	
	Если ТоварВШапке Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыФормыУказанияСерий,Объект);
		Если ЭтоЗаказ Тогда
			ПараметрыФормыУказанияСерий.Вставить("КлючУникальности",1);		
		КонецЕсли;
	Иначе
		ЗаполнитьЗначенияСвойств(ПараметрыФормыУказанияСерий,ТекущиеДанные);
		Если ЭтоЗаказ Тогда
			ПараметрыФормыУказанияСерий.Вставить("КлючУникальности",0);		
			ПараметрыФормыУказанияСерий.УказыватьСерии = Истина;		
		КонецЕсли;
	КонецЕсли;
	
	ИмяПоляМагазин = "";
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяПоляМагазин", ИмяПоляМагазин) Тогда
		ИмяПоляМагазин = "Магазин";
	КонецЕсли;
	
	ПараметрыФормыУказанияСерий.Вставить("АдресВоВременномХранилище",АдресВоВременномХранилище);
	ПараметрыФормыУказанияСерий.Вставить("РегистрироватьСерии",Истина);
	ПараметрыФормыУказанияСерий.Вставить("Магазин",Объект[ИмяПоляМагазин]);
	ПараметрыФормыУказанияСерий.Вставить("Помещение","");
	ПараметрыФормыУказанияСерий.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	ПараметрыФормыУказанияСерий.Вставить("Количество",КоличествоВДокументе);
	ПараметрыФормыУказанияСерий.Вставить("АдресВоВременномХранилище",АдресВоВременномХранилище);
	ПараметрыФормыУказанияСерий.Вставить("СерииВТЧТовары",ИмяТЧСерии = ИмяТЧТовары);
	Если Объект.Свойство("Ссылка") Тогда
		ПараметрыФормыУказанияСерий.Вставить("Регистратор",Объект.Ссылка);
	КонецЕсли;
	ПараметрыФормыУказанияСерий.Вставить("ПараметрыУказанияСерий",ПараметрыУказанияСерий);
	
	ИмяФормы = "Обработка.ПодборСерийВДокументы.Форма.ФормаРегистрацииСерий";
	
	ПараметрыФормыУказанияСерий.Вставить("ИмяФормы", ИмяФормы);
	
	Возврат ПараметрыФормыУказанияСерий;
	
КонецФункции

// Процедура извлекает из временного хранилища серии, указанные в форме редактирования серий, помещает эти строки в ТЧ
// "Серии" документа, перерасчитывает статусы указания серий строках товаров.
// Параметры:
//		Объект - ДанныеФормыСтруктура - основной реквизит формы документа.
//      ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соответствующей процедурой модуля
//                               менеджера документа.
//      ПараметрыФормыУказанияСерий - структура, которая была передана в форму редактирования серий как параметры формы.
Процедура ОбработатьУказаниеСерий(Объект, ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий, СтруктураДействий = Неопределено) Экспорт
	
	ИмяТЧТовары = "";
	ИмяТЧСерии  = "";
	ЭтоЗаказ    = Ложь;
	ТоварВШапке = Ложь;
	Если Не ПараметрыУказанияСерий.Свойство("ТоварВШапке", ТоварВШапке) Тогда
		ТоварВШапке = Ложь;
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяТЧТовары", ИмяТЧТовары) Тогда
		ИмяТЧТовары = "Товары";
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяТЧСерии", ИмяТЧСерии) Тогда
		ИмяТЧСерии = "Серии";
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.Свойство("ЭтоЗаказ", ЭтоЗаказ) Тогда
		ЭтоЗаказ = Ложь;
	КонецЕсли;
	
	
	// Если обрабатывается результаты формы подбора серий,
	// то серии целиком загружаются из обработки.
	Если Не ПараметрыФормыУказанияСерий.РегистрироватьСерии Тогда 
		
		СтруктураВозврата = ПолучитьИзВременногоХранилища(ПараметрыФормыУказанияСерий.АдресВоВременномХранилище);
		Объект[ИмяТЧСерии].Загрузить(СтруктураВозврата.ТаблицаСерий);
		
		Если ЭтоЗаказ Тогда
			Если ТоварВШапке Тогда
				Объект.УказыватьСерии = СтруктураВозврата.ТаблицаСерий.Количество() > 0;
			Иначе
				ТаблицаТоваров = СтруктураВозврата.ТаблицаТоваров;
				Для Каждого СтрТабл Из ТаблицаТоваров Цикл
					НомераСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрТабл.НомераСтрокДокумента, ", ");
					
					Для Каждого НомерСтроки Из НомераСтрок Цикл
						
						СтрокаТабличнойЧасти = Объект[ИмяТЧТовары][Число(Формат(НомерСтроки,"ЧГ=0"))-1];
						СтрокаТабличнойЧасти.УказыватьСерии = СтрТабл.УказыватьСерии;
						
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
		
		Возврат;
	КонецЕсли;
	
	// Удалим прежние строки серий.
	ТекстПоляСвязи = "";
	
	Для Каждого СтрокаМассива Из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстПоляСвязи = ТекстПоляСвязи + "," + СтрокаМассива  ;
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("Номенклатура,Характеристика"+ТекстПоляСвязи);
	ЗаполнитьЗначенияСвойств(СтруктураПоиска,ПараметрыФормыУказанияСерий);
	НайденныеСтрокиСерий = Объект[ИмяТЧСерии].НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаМассива Из НайденныеСтрокиСерий Цикл
		
		Объект[ИмяТЧСерии].Удалить(СтрокаМассива);
		
	КонецЦикла;
	
	// Добавим новые строки серий
	ТаблицаСерий = ПолучитьИзВременногоХранилища(ПараметрыФормыУказанияСерий.АдресВоВременномХранилище);
	
	Для Каждого СтрТабл Из ТаблицаСерий Цикл
		
		НоваяСтрока = Объект[ИмяТЧСерии].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ПараметрыФормыУказанияСерий);
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрТабл);
	
	КонецЦикла;
	
	Если ИмяТЧСерии = ИмяТЧТовары Тогда
		Возврат;
	КонецЕсли;
	
	
	ЕстьУпаковки = ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") <> Неопределено; 
	
	Если ЕстьУпаковки Тогда
		КоличествоСерий = ТаблицаСерий.Итог("КоличествоУпаковок");
	Иначе
		КоличествоСерий = ТаблицаСерий.Итог("Количество");
	КонецЕсли;	
	
	ИмяКолонкиКоличество         = "";
	ИмяКолонкиКоличествоУпаковок = "";
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяКолонкиКоличество", ИмяКолонкиКоличество) Тогда
		ИмяКолонкиКоличество = "Количество";
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяКолонкиКоличествоУпаковок", ИмяКолонкиКоличествоУпаковок) Тогда
		ИмяКолонкиКоличествоУпаковок = "КоличествоУпаковок";
	КонецЕсли;
	
	КоличествоТоваров = ПараметрыФормыУказанияСерий.Количество;
	
	Если ТоварВШапке Тогда
		
		СерииУказаныПолностью = (КоличествоСерий = КоличествоТоваров
								И КоличествоТоваров > 0);
		
		ЧетныйСтатус = Объект.СтатусУказанияСерий % 2 = 0;
		
		Если Не ЧетныйСтатус
			И СерииУказаныПолностью Тогда
			Объект.СтатусУказанияСерий = Объект.СтатусУказанияСерий + 1;
		ИначеЕсли ЧетныйСтатус
			И Не СерииУказаныПолностью Тогда
			Объект.СтатусУказанияСерий = Объект.СтатусУказанияСерий - 1;
		КонецЕсли;
		
	Иначе
		
		НайденныеСтрокиТоваров = Объект[ИмяТЧТовары].НайтиСтроки(СтруктураПоиска);
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		
		Если ПараметрыФормыУказанияСерий.Свойство("ЗначениеВозврата") 
			И НЕ ПустаяСтрока(ПараметрыФормыУказанияСерий.ЗначениеВозврата.АдресИзмененныеРеквизиты) Тогда
			
			ИзмененныеРеквизиты = ПолучитьИзВременногоХранилища(ПараметрыФормыУказанияСерий.ЗначениеВозврата.АдресИзмененныеРеквизиты);
			Если НЕ ИзмененныеРеквизиты = Неопределено Тогда
				Товары = Объект[ИмяТЧТовары];
				Для Каждого ИзмененныйРеквизит Из ИзмененныеРеквизиты Цикл
					
					СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
					
					СтрокаТоваров = Товары[ИзмененныйРеквизит.НомерСтроки-1];
					
					Если ИзмененныйРеквизит.ИмяРеквизита = "Количество" Тогда
						ИмяРеквизита = ИмяКолонкиКоличество;
					ИначеЕсли ИзмененныйРеквизит.ИмяРеквизита = "КоличествоУпаковок" Тогда
						ИмяРеквизита = ИмяКолонкиКоличествоУпаковок;
					ИначеЕсли ИзмененныйРеквизит.ИмяРеквизита = "Упаковка" Тогда
						ИмяРеквизита = "Упаковка";
					КонецЕсли;
					
					СтрокаТоваров[ИмяРеквизита] = ИзмененныйРеквизит.Значение;
					
					Если ИзмененныйРеквизит.ИмяРеквизита = "Упаковка" Тогда
						Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаУпаковку") Тогда
							СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", СтрокаТоваров.Количество);
						КонецЕсли;
					КонецЕсли;
					
					КоличествоДоПересчета = СтрокаТоваров.Количество;
					ОбработатьСтрокуТЧСервер(СтрокаТоваров, СтруктураДействий, КэшированныеЗначения);
					Дельта = СтрокаТоваров.Количество - КоличествоДоПересчета;
					КоличествоТоваров = КоличествоТоваров + Дельта;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли КоличествоСерий <> КоличествоТоваров 
			И СтруктураДействий <> Неопределено
			И СтруктураДействий.Свойство("ОбновлятьКоличествоТоваровПриРегистрацииСерий")
			И СтруктураДействий.ОбновлятьКоличествоТоваровПриРегистрацииСерий Тогда
			
			ЕстьПересчетКоличества = Ложь;
			
			Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиниц") Тогда
				СтруктураДействий.Удалить("ПересчитатьКоличествоЕдиниц");
				ЕстьПересчетКоличества = Истина;
			КонецЕсли;
			
			Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок") Тогда
				СтруктураДействий.Удалить("ПересчитатьКоличествоУпаковок");
				ЕстьПересчетКоличества = Истина;
			КонецЕсли;
			
			КоличествоКРаспределению = КоличествоСерий - КоличествоТоваров;
			
			Для Каждого СтрокаТоваров Из НайденныеСтрокиТоваров Цикл
				Дельта = КоличествоКРаспределению;
				
				Если ЕстьУпаковки Тогда
					Если -Дельта > СтрокаТоваров[ИмяКолонкиКоличествоУпаковок] Тогда
						Дельта = -СтрокаТоваров[ИмяКолонкиКоличествоУпаковок];
						СтрокаТоваров[ИмяКолонкиКоличествоУпаковок] = 0;
					Иначе
						СтрокаТоваров[ИмяКолонкиКоличествоУпаковок] = СтрокаТоваров[ИмяКолонкиКоличествоУпаковок] + Дельта;
					КонецЕсли;
					
					Если ЕстьПересчетКоличества Тогда
						СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
					КонецЕсли;
				Иначе
					Если -Дельта > СтрокаТоваров[ИмяКолонкиКоличество] Тогда
						Дельта = -СтрокаТоваров[ИмяКолонкиКоличество];
						СтрокаТоваров[ИмяКолонкиКоличество] = 0;
					Иначе
						СтрокаТоваров[ИмяКолонкиКоличество] = СтрокаТоваров[ИмяКолонкиКоличество] + Дельта;
					КонецЕсли;
					
					Если ЕстьПересчетКоличества Тогда
						СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
					КонецЕсли;
				КонецЕсли;
				
				КоличествоТоваров = КоличествоТоваров + Дельта;
				
				КоличествоКРаспределению = КоличествоКРаспределению - Дельта;
				
				ОбработатьСтрокуТЧСервер(СтрокаТоваров, СтруктураДействий, КэшированныеЗначения);
				
				Если КоличествоКРаспределению = 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
				
		СерииУказаныПолностью = (КоличествоСерий = КоличествоТоваров И КоличествоТоваров > 0);
		
		Для Каждого СтрокаМассива Из НайденныеСтрокиТоваров Цикл
			
			Если ПараметрыУказанияСерий.Свойство("СправочныйВводСерий")
				И ПараметрыУказанияСерий.СправочныйВводСерий Тогда
				
				Если СерииУказаныПолностью Тогда
					СтрокаМассива.СтатусУказанияСерий = 2;
				Иначе
					СтрокаМассива.СтатусУказанияСерий = 11;
				КонецЕсли;
			Иначе
				ЧетныйСтатус = СтрокаМассива.СтатусУказанияСерий % 2 = 0;
				
				Если Не ЧетныйСтатус
					И СерииУказаныПолностью Тогда
					СтрокаМассива.СтатусУказанияСерий = СтрокаМассива.СтатусУказанияСерий + 1;
				ИначеЕсли ЧетныйСтатус
					И Не СерииУказаныПолностью Тогда
					СтрокаМассива.СтатусУказанияСерий = СтрокаМассива.СтатусУказанияСерий - 1;
				КонецЕсли;
			КонецЕсли;
			
			Если ПараметрыУказанияСерий.Свойство("ЭтоПеремещениеМеждуСкладами")
				И ПараметрыУказанияСерий.ЭтоПеремещениеМеждуСкладами Тогда
				
				ЧетныйСтатус = СтрокаМассива.СтатусУказанияСерийОтправитель % 2 = 0;
				
				Если Не ЧетныйСтатус
					И СерииУказаныПолностью Тогда
					СтрокаМассива.СтатусУказанияСерийОтправитель = СтрокаМассива.СтатусУказанияСерийОтправитель + 1;
				ИначеЕсли ЧетныйСтатус
					И Не СерииУказаныПолностью Тогда
					СтрокаМассива.СтатусУказанияСерийОтправитель = СтрокаМассива.СтатусУказанияСерийОтправитель - 1;
				КонецЕсли;
				
				ЧетныйСтатус = СтрокаМассива.СтатусУказанияСерийПолучатель % 2 = 0;
				
				Если Не ЧетныйСтатус
					И СерииУказаныПолностью Тогда
					СтрокаМассива.СтатусУказанияСерийПолучатель = СтрокаМассива.СтатусУказанияСерийПолучатель + 1;
				ИначеЕсли ЧетныйСтатус
					И Не СерииУказаныПолностью Тогда
					СтрокаМассива.СтатусУказанияСерийПолучатель = СтрокаМассива.СтатусУказанияСерийПолучатель - 1;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Получаем количество введенных серий
Функция КоличествоСерийВТаблице(ПараметрыФормыУказанияСерий) Экспорт
	
	ТаблицаСерий = ПолучитьИзВременногоХранилища(ПараметрыФормыУказанияСерий.АдресВоВременномХранилище);
	КоличествоСерий = ТаблицаСерий.Итог("КоличествоУпаковок");
	Возврат КоличествоСерий;
	
КонецФункции

// Процедура пересчитывает статусы указания серий в строках товаров, если это необходимо, переподчиняет строки серий
// другим строкам.
// ТЧ "Товары"
// Параметры:
//		Объект - ДанныеФормыСтруктура - основной реквизит формы документа.
//      ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соответствующей процедурой модуля
//                               менеджера документа.
//      ТекущиеДанныеИдентификатор - идентификатор текущей строки товаров в форме документа.
//		КэшированныеЗначения - структура кеша реквизитов текущей строки товаров.
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения, ЗапускИзРМК = Ложь) Экспорт
	
	ИмяТЧТовары = "";
	ИмяТЧСерии  = "";
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяТЧТовары", ИмяТЧТовары) Тогда
		ИмяТЧТовары = "Товары";
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяТЧСерии", ИмяТЧСерии) Тогда
		ИмяТЧСерии = "Серии";
	КонецЕсли;
	
	Если ЗапускИзРМК Тогда
		ТекущаяСтрока = ТекущаяСтрокаИдентификатор;
	ИначеЕсли ТекущаяСтрокаИдентификатор <> Неопределено Тогда
		ТекущаяСтрока = Объект[ИмяТЧТовары].НайтиПоИдентификатору(ТекущаяСтрокаИдентификатор);
	Иначе
		ТекущаяСтрока = Неопределено; // Значит, строку удалили.
	КонецЕсли;
	
	Если ИмяТЧТовары = ИмяТЧСерии Тогда
		НайденныеСтрокиТоваров = Новый Массив;
		НайденныеСтрокиТоваров.Добавить(ТекущаяСтрока);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий,НайденныеСтрокиТоваров);
		Возврат;
	КонецЕсли;
	
	ТекстПоляСвязи = "";
	
	Для Каждого СтрокаМассива Из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстПоляСвязи = ТекстПоляСвязи + "," + СтрокаМассива  ;
	КонецЦикла;
	
	ЕстьУпаковки = ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") <> Неопределено; 
	ЕстьПризнакУказанияСерий = ПараметрыУказанияСерий.ПоляСвязи.Найти("УказыватьСерии") <> Неопределено;
	
	
	// Если строка новая (в т.ч. скопированная) - будет кэшировано Неопределено.
	// Тогда не нужно искать строки со старыми значениями.
	Если КэшированныеЗначения.Номенклатура <> Неопределено Тогда
		СтруктураПоискаСтарыеЗначения = Новый Структура("Номенклатура,Характеристика"+ТекстПоляСвязи);
		ЗаполнитьЗначенияСвойств(СтруктураПоискаСтарыеЗначения,КэшированныеЗначения);
		
		НайденныеСтрокиТоваров = Объект[ИмяТЧТовары].НайтиСтроки(СтруктураПоискаСтарыеЗначения);
		НайденныеСтрокиСерий = Объект[ИмяТЧСерии].НайтиСтроки(СтруктураПоискаСтарыеЗначения);
	Иначе
		НайденныеСтрокиТоваров = Новый Массив;
		НайденныеСтрокиСерий   = Новый Массив;
	КонецЕсли;
	
	// Если поменялись ключевые поля:
	// - возможно нужно переподчинять серии
	// - статус указания серий нужно пересчитывать в строках по новым ключевым полям и по старым.
	Если ТекущаяСтрока <> Неопределено 
		И Не ОбщегоНазначенияРТКлиентСервер.СтруктурыРавны(КэшированныеЗначения, ТекущаяСтрока, "Номенклатура,Характеристика"+ТекстПоляСвязи) Тогда
		
		ПереподчинитьСерии    = Ложь;
		ПересчитатьКоличество = Ложь;
		// Определим, нужно ли переподчинять серии. Это нужно если:
		// - серии относились только к одной строке
		// - новые и старые ключевые поля поддерживают одну политику учета.
		// Если строки нужно переподчинять, то определим, нужно ли пересчитывать количество.
		Если КэшированныеЗначения.Номенклатура <> Неопределено 
			// Т.к. строк с такими ключевыми полями не осталось больше не осталось, значит такая строка была одна.
			И НайденныеСтрокиТоваров.Количество() = 0 Тогда
			
			// Т.е. изменились поля, от которых политика учета не зависит.
			Если КэшированныеЗначения.Номенклатура = ТекущаяСтрока.Номенклатура Тогда
				Если (Не ЕстьПризнакУказанияСерий 
					Или КэшированныеЗначения.УказыватьСерии = ТекущаяСтрока.УказыватьСерии) Тогда
					ПереподчинитьСерии = Истина;
				Иначе
					ПереподчинитьСерии = Ложь;
				КонецЕсли;
			Иначе // Будем переподчинять, если не поменялся вид номенклатуры.
				ВидНоменклатурыТекущий = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КэшированныеЗначения.Номенклатура,"ВидНоменклатуры");
				ВидНоменклатурыНовый   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Номенклатура, "ВидНоменклатуры");
				
				ПереподчинитьСерии = (ВидНоменклатурыТекущий = ВидНоменклатурыНовый);
			КонецЕсли;
			
			Если ПереподчинитьСерии
				И ЕстьУпаковки
				И КэшированныеЗначения.Упаковка <> ТекущаяСтрока.Упаковка Тогда
				
				ПересчитатьКоличество = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Если строка удалена, то в качестве текущих значений будет передано Неопределено.
		// Тогда не нужно искать строки с новыми значениями.
		СтруктураПоискаНовыеЗначения = Новый Структура("Номенклатура,Характеристика"+ТекстПоляСвязи);
		ЗаполнитьЗначенияСвойств(СтруктураПоискаНовыеЗначения,ТекущаяСтрока);
		
		НайденныеСтрокиТоваровНовые = Объект[ИмяТЧТовары].НайтиСтроки(СтруктураПоискаНовыеЗначения);    
		
		// Добавим строки по новым ключевым полям в массив строк для пересчета статуса указания серий.
		
		// При объединении массивов будем обходить меньший массив.
		Если НайденныеСтрокиТоваров.Количество() < НайденныеСтрокиТоваровНовые.Количество() Тогда
			Для Каждого СтрокаМассива Из НайденныеСтрокиТоваров Цикл
				НайденныеСтрокиТоваровНовые.Добавить(СтрокаМассива);
			КонецЦикла;
			НайденныеСтрокиТоваров = НайденныеСтрокиТоваровНовые;
		Иначе
			Для Каждого СтрокаМассива Из НайденныеСтрокиТоваровНовые Цикл
				НайденныеСтрокиТоваров.Добавить(СтрокаМассива);
			КонецЦикла;
		КонецЕсли;
		
		// Определим массив строк серий, который должен участвовать в пересчете статусов,
		Если ПереподчинитьСерии Тогда
			// Сначала переподчиним серии
			
			Для Каждого СтрокаМассива Из НайденныеСтрокиСерий Цикл
				
				ЗаполнитьЗначенияСвойств(СтрокаМассива,ТекущаяСтрока, "Номенклатура,Характеристика"+ТекстПоляСвязи);
				
				Если ПересчитатьКоличество Тогда
					ПересчитатьКоличествоУпаковокВСтрокеТЧСервер(СтрокаМассива, Новый Структура("ПересчитатьКоличествоУпаковок"), КэшированныеЗначения);
				КонецЕсли;
				
			КонецЦикла;
			
			// Если серии переподчинены, то достаточно произвести поиск по новым полям поиска.
			НайденныеСтрокиСерий = Объект[ИмяТЧСерии].НайтиСтроки(СтруктураПоискаНовыеЗначения);
			
		Иначе	
			НайденныеСтрокиСерийНовые = Объект[ИмяТЧСерии].НайтиСтроки(СтруктураПоискаНовыеЗначения);
			
			// Если серии не переподчинены, то к строкам по старым ключевым полям нужно добавить строки по новым ключевым полям.
			
			// При объединении массивов будем обходить меньший массив.
			Если НайденныеСтрокиСерий.Количество() < НайденныеСтрокиСерийНовые.Количество() Тогда
				Для Каждого СтрокаМассива Из НайденныеСтрокиСерий Цикл
					НайденныеСтрокиСерийНовые.Добавить(СтрокаМассива);
				КонецЦикла;
				НайденныеСтрокиСерий = НайденныеСтрокиСерийНовые;
			Иначе
				Для Каждого СтрокаМассива Из НайденныеСтрокиСерийНовые Цикл
					НайденныеСтрокиСерий.Добавить(СтрокаМассива);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НайденныеСтрокиТоваров.Количество() > 0 Тогда 
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий,НайденныеСтрокиТоваров,НайденныеСтрокиСерий);
	КонецЕсли;
	
КонецПроцедуры

// Процедура пересчитывает статус указания серий для товара в шапке документа, если это необходимо, переподчиняет
// строки серий.
// Параметры:
//		Объект - ДанныеФормыСтруктура - основной реквизит формы документа.
//      ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соответствующей процедурой модуля
//                               менеджера документа.
//		КэшированныеЗначения - структура кеша реквизитов текущей строки товаров.
Процедура ЗаполнитьСтатусыУказанияСерийПриИзмененииТовараВШапке(Объект, Знач ПараметрыУказанияСерий, КэшированныеЗначения) Экспорт
	
	ИмяТЧСерии  = "";
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяТЧСерии", ИмяТЧСерии) Тогда
		ИмяТЧСерии = "Серии";
	КонецЕсли;
	
	ТекстПоляСвязи = "";
	
	Для Каждого СтрокаМассива Из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстПоляСвязи = ","+ ТекстПоляСвязи + СтрокаМассива  ;
	КонецЦикла;
	
	ЕстьУпаковки = ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") <> Неопределено; 
	
	
	// Если поменялись ключевые поля:
	// - возможно нужно переподчинять серии
	// - статус указания серий нужно пересчитывать в строках по новым ключевым полям и по старым.
	
	ИзменилисьКлючевыеПоля = Ложь;
	
	Если КэшированныеЗначения.НоменклатураШапка <> Объект.Номенклатура
		Или  КэшированныеЗначения.ХарактеристикаШапка <> Объект.Характеристика Тогда
		ИзменилисьКлючевыеПоля = Истина;
	Иначе	
		Для Каждого СтрокаМассива Из ПараметрыУказанияСерий.ПоляСвязи Цикл
			Если КэшированныеЗначения[СтрокаМассива+"Шапка"] <> Объект[СтрокаМассива] Тогда
				ИзменилисьКлючевыеПоля = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ПересчитатьСтатус = Ложь;

	Если ИзменилисьКлючевыеПоля Тогда
		
		ПереподчинитьСерии    = Ложь;
		ПересчитатьКоличество = Ложь;
		// Определим, нужно ли переподчинять серии. Это нужно если:
		// - серии относились только к одной строке
		// - новые и старые ключевые поля поддерживают одну политику учета.
		// Если строки нужно переподчинять, то определим, нужно ли пересчитывать количество.
		
		// Т.е. изменились поля, от которых политика учета не зависит.
		Если КэшированныеЗначения.НоменклатураШапка = Объект.Номенклатура Тогда
			ПереподчинитьСерии = Истина;
		Иначе // Будем переподчинять, если не поменялся вид номенклатуры.
			ВидНоменклатурыТекущий = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КэшированныеЗначения.НоменклатураШапка,"ВидНоменклатуры");
			ВидНоменклатурыНовый   = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Номенклатура, "ВидНоменклатуры");
			
			ПереподчинитьСерии = (ВидНоменклатурыТекущий = ВидНоменклатурыНовый);
			ПересчитатьСтатус  = Не (ВидНоменклатурыТекущий = ВидНоменклатурыНовый);
		КонецЕсли;
		
		Если ПереподчинитьСерии
			И ЕстьУпаковки
			И КэшированныеЗначения.УпаковкаШапка <> Объект.Упаковка Тогда
			
			ПересчитатьКоличество = Истина;
			
		КонецЕсли;
			
		Если ПереподчинитьСерии Тогда		
			СтруктураПоискаСтарыеЗначения = Новый Структура("Номенклатура,Характеристика"+ТекстПоляСвязи);
			Для Каждого КлючИЗначение Из СтруктураПоискаСтарыеЗначения Цикл
				СтруктураПоискаСтарыеЗначения[КлючИЗначение.Ключ] = КэшированныеЗначения[КлючИЗначение.Ключ+"Шапка"]	
			КонецЦикла;
			
			НайденныеСтрокиСерий = Объект[ИмяТЧСерии].НайтиСтроки(СтруктураПоискаСтарыеЗначения);
			
			Для Каждого СтрокаМассива Из НайденныеСтрокиСерий Цикл
				
				ЗаполнитьЗначенияСвойств(СтрокаМассива,Объект, "Номенклатура,Характеристика"+ТекстПоляСвязи);
				
				Если ПересчитатьКоличество Тогда
					ПересчитатьКоличествоУпаковокВСтрокеТЧСервер(СтрокаМассива, Новый Структура("ПересчитатьКоличествоУпаковок"), КэшированныеЗначения);
				КонецЕсли;	
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьУпаковки Тогда
		Если КэшированныеЗначения.КоличествоУпаковокШапка <> Объект.КоличествоУпаковок Тогда
			ПересчитатьСтатус = Истина;
		КонецЕсли;
	Иначе
		Если КэшированныеЗначения.КоличествоШапка <> Объект.Количество Тогда
			ПересчитатьСтатус = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ПересчитатьСтатус Тогда 
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий,Неопределено,Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет накладную сериями, указанными в заказе.
//		ДокументОбъект - ДокументОбъект, в котором нужно заполнить серии.
//      ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соответствующей процедурой модуля
//                               менеджера документа.
Процедура ЗаполнитьСерииПоЗаказам(Объект,ПараметрыУказанияСерий) Экспорт
	
	ЕстьТоварВШапке = ПараметрыУказанияСерий.Свойство("Шапка");
	
	Если ЕстьТоварВШапке Тогда
		Если Не ПараметрыУказанияСерий.ТЧ.ИспользоватьСерииНоменклатуры
			И Не ПараметрыУказанияСерий.Шапка.ИспользоватьСерииНоменклатуры Тогда
			Возврат;
		КонецЕсли;
		ПараметрыУказанияСерийЗаполнение = ПараметрыУказанияСерий.ТЧ;
	Иначе
		Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
			Возврат;
		КонецЕсли;
		ПараметрыУказанияСерийЗаполнение = ПараметрыУказанияСерий;
	КонецЕсли;
	
	
	ИмяТЧТовары  = "";
	ИмяТЧСерии   = "";
		
	Если Не ПараметрыУказанияСерийЗаполнение.Свойство("ИмяТЧТовары", ИмяТЧТовары) Тогда              
		ИмяТЧТовары = "Товары";
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерийЗаполнение.Свойство("ИмяТЧСерии", ИмяТЧСерии) Тогда
		ИмяТЧСерии = "Серии";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.ДокументРезерваСерий,";
	ТекстЗапроса = ТекстЗапроса + "
	|	&Магазин КАК Магазин";
	ТекстЗапроса = ТекстЗапроса + "
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезервыСерийТоваров.Номенклатура,
	|	РезервыСерийТоваров.Характеристика,
	|	РезервыСерийТоваров.ДокументРезерваСерий,
	|	РезервыСерийТоваров.Склад,
	|	РезервыСерийТоваров.Серия,
	|	СУММА(РезервыСерийТоваров.Количество) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		РезервыСерийТоваровОстатки.Номенклатура КАК Номенклатура,
	|		РезервыСерийТоваровОстатки.Характеристика КАК Характеристика,
	|		РезервыСерийТоваровОстатки.ДокументРезерва КАК ДокументРезерваСерий,
	|		РезервыСерийТоваровОстатки.Склад КАК Склад,
	|		РезервыСерийТоваровОстатки.Серия КАК Серия,
	|		РезервыСерийТоваровОстатки.КоличествоОстаток КАК Количество
	|	ИЗ
	|		РегистрНакопления.РезервыСерийТоваров.Остатки(
	|				,
	|				(ДокументРезерва, Склад, Номенклатура, Характеристика) В
	|						(ВЫБРАТЬ
	|							ТаблицаТовары.ДокументРезерваСерий КАК ДокументРезерва,
	|							ТаблицаТовары.Склад,
	|							ТаблицаТовары.Номенклатура,
	|							ТаблицаТовары.Характеристика
	|						ИЗ
	|							ТаблицаТовары КАК ТаблицаТовары)
	|					И Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) КАК РезервыСерийТоваровОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РезервыСерийТоваров.Номенклатура,
	|		РезервыСерийТоваров.Характеристика,
	|		РезервыСерийТоваров.ДокументРезерва,
	|		РезервыСерийТоваров.Склад,
	|		РезервыСерийТоваров.Серия,
	|		РезервыСерийТоваров.Количество
	|	ИЗ
	|		РегистрНакопления.РезервыСерийТоваров КАК РезервыСерийТоваров
	|	ГДЕ
	|		РезервыСерийТоваров.Регистратор = &Регистратор
	|		И РезервыСерийТоваров.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) КАК РезервыСерийТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	РезервыСерийТоваров.Номенклатура,
	|	РезервыСерийТоваров.Серия,
	|	РезервыСерийТоваров.Склад,
	|	РезервыСерийТоваров.ДокументРезерваСерий,
	|	РезервыСерийТоваров.Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	РезервыСерийТоваров.Склад,
	|	РезервыСерийТоваров.ДокументРезерваСерий,
	|	РезервыСерийТоваров.Номенклатура,
	|	РезервыСерийТоваров.Характеристика";

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Регистратор",Объект.Ссылка);
	
	ТаблицаТовары = Объект[ИмяТЧТовары].Выгрузить(,"Номенклатура,Характеристика,ДокументРезерваСерий");
	
	Если ЕстьТоварВШапке Тогда
		СтрокаТоваров = ТаблицаТовары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТоваров, Объект);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаТовары",ТаблицаТовары);
	Запрос.УстановитьПараметр("Магазин",Объект.Магазин);
	ПоляГруппировки = "Характеристика,Номенклатура,ДокументРезерваСерий";
		
	Выборка = Запрос.Выполнить().Выбрать();

	ТекущаяГруппировка = Новый Структура(ПоляГруппировки);
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбщегоНазначенияРТКлиентСервер.СтруктурыРавны(ТекущаяГруппировка, Выборка, ПоляГруппировки) Тогда
			
			ЗаполнитьЗначенияСвойств(ТекущаяГруппировка, Выборка);
			
			НайденныеСтрокиСерий = Объект[ИмяТЧСерии].НайтиСтроки(ТекущаяГруппировка);
			
			Для Каждого СтрокаМассива Из НайденныеСтрокиСерий Цикл
				
				Объект[ИмяТЧСерии].Удалить(СтрокаМассива);
				
			КонецЦикла;
			
		КонецЕсли;
			
		НоваяСтрокаСерий = Объект[ИмяТЧСерии].Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСерий,Выборка);
		
	КонецЦикла;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ПЕРЕСОРТИЦЕЙ

// Процедура проверки выбора номенклатуры при пересортице.
//
Процедура ПроверитьВыборНоменклатуры(ДокументОбъект, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПересортицаТоваровСписания.НомерСтроки,
	|	ПересортицаТоваровСписания.Номенклатура,
	|	&Номенклатура КАК ГрафаПроверки
	|ПОМЕСТИТЬ ПересортицаТоваровСписания
	|ИЗ
	|	&ПересортицаТоваровСписания КАК ПересортицаТоваровСписания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПересортицаТоваровОприходования.НоменклатураОприходование КАК Номенклатура,
	|	ПересортицаТоваровОприходования.НомерСтроки,
	|	&НоменклатураОприходование КАК ГрафаПроверки
	|ПОМЕСТИТЬ ПересортицаТоваровОприходования
	|ИЗ
	|	&ПересортицаТоваровОприходования КАК ПересортицаТоваровОприходования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПересортицаТоваровСписания.НомерСтроки,
	|	ПересортицаТоваровСписания.Номенклатура,
	|	ПересортицаТоваровСписания.ГрафаПроверки,
	|	ВЫБОР
	|		КОГДА ПересортицаТоваровСписания.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.сабТипыНоменклатуры.Услуга)
	|			ТОГДА &Услуга
	|		ИНАЧЕ &ИспользованиеНомеровПодарочныхСертификатов
	|	КОНЕЦ КАК НаименованиеОшибки
	|ИЗ
	|	ПересортицаТоваровСписания КАК ПересортицаТоваровСписания
	|ГДЕ
	|	(ПересортицаТоваровСписания.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.сабТипыНоменклатуры.Услуга)
	|			ИЛИ ПересортицаТоваровСписания.Номенклатура.ИспользоватьСерийныеНомера)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПересортицаТоваровОприходования.НомерСтроки,
	|	ПересортицаТоваровОприходования.Номенклатура,
	|	ПересортицаТоваровОприходования.ГрафаПроверки,
	|	ВЫБОР
	|		КОГДА ПересортицаТоваровОприходования.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.сабТипыНоменклатуры.Услуга)
	|			ТОГДА &Услуга
	|		ИНАЧЕ &ИспользованиеНомеровПодарочныхСертификатов
	|	КОНЕЦ
	|ИЗ
	|	ПересортицаТоваровОприходования КАК ПересортицаТоваровОприходования
	|ГДЕ
	|	(ПересортицаТоваровОприходования.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.сабТипыНоменклатуры.Услуга)
	|			ИЛИ ПересортицаТоваровОприходования.Номенклатура.ИспользоватьСерийныеНомера)";
	
	Запрос.УстановитьПараметр("Номенклатура", "Номенклатура");
	Запрос.УстановитьПараметр("НоменклатураОприходование", "НоменклатураОприходование");
	Запрос.УстановитьПараметр("Услуга", "Услуга");
	Запрос.УстановитьПараметр("ИспользованиеНомеровПодарочныхСертификатов", "Использование номеров подарочных сертификатов");
	
	Запрос.УстановитьПараметр("ПересортицаТоваровСписания", ДокументОбъект["Товары"].Выгрузить(,"НомерСтроки,Номенклатура"));
	Запрос.УстановитьПараметр("ПересортицаТоваровОприходования", ДокументОбъект["Товары"].Выгрузить(,"НомерСтроки,НоменклатураОприходование"));
	
	Результат = Запрос.Выполнить();
	ТаблицаЗапроса = Результат.Выгрузить();
	
	Для каждого СтрокаТЗ Из ТаблицаЗапроса Цикл
		
		Если СтрокаТЗ.ГрафаПроверки = "НоменклатураОприходование" Тогда
			Если СтрокаТЗ.НаименованиеОшибки = "Услуга" Тогда
				ТекстСообщения = НСтр("ru = 'В строке %1 номенклатура оприходования %2 указана услуга'"); 
			Иначе
				ТекстСообщения = НСтр("ru = 'В строке %1 по номенклатуре оприходования %2 ведется учет по номерам подарочных сертификатов'"); 
			КонецЕсли;
		Иначе
			Если СтрокаТЗ.НаименованиеОшибки = "Услуга" Тогда
				ТекстСообщения = НСтр("ru = 'В строке %1 номенклатура списания %2 указана услуга'"); 
			Иначе
				ТекстСообщения = НСтр("ru = 'В строке %1 по номенклатуре оприходования %2 ведется учет по номерам подарочных сертификатов'"); 
			КонецЕсли;
		КонецЕсли;
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения,
			СтрокаТЗ.НомерСтроки,
			СтрокаТЗ.Номенклатура
		);
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТЗ.НомерСтроки, СтрокаТЗ.ГрафаПроверки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			ДокументОбъект,
			Поле,
			,
			Отказ
		);

		
	КонецЦикла;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////
// ПРОЧИЕ

Процедура ПроверитьАссортиментСтроки(ТекущаяСтрока, СтруктураДействий)
	
	Перем СтруктураПараметровДействия, ЗначениеСвойства;
	
	Если Не СтруктураДействий.Свойство("ПроверитьАссортиментСтроки", СтруктураПараметровДействия) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметровДействия.ПроверитьТоварВЗаказе) Тогда
		Если ТоварСодержитсяВЗаказе(ТекущаяСтрока.Номенклатура, СтруктураПараметровДействия.ПроверитьТоварВЗаказе) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураСостояния = АссортиментСервер.СтруктураСостоянияАссортиментаТовараВФормате(ТекущаяСтрока.Номенклатура,
																						СтруктураПараметровДействия.Магазин,
																						СтруктураПараметровДействия.Дата);
	
	Если НЕ СтруктураСостояния[СтруктураПараметровДействия.ИмяРесурсаАссортимента] Тогда
		
		ТекстСообщения = СтруктураПараметровДействия.ТекстСообщения;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекущаяСтрока.Номенклатура);
		Если СтруктураПараметровДействия.РазрешатьДобавление Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				СтруктураПараметровДействия.Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект." + СтруктураПараметровДействия.ИмяТабличнойЧасти,
																	ТекущаяСтрока.НомерСтроки,
																	"Номенклатура"));
		Иначе
			ТекущаяСтрока.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТоварСодержитсяВЗаказе(Номенклатура, Заказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказПоставщикуТовары.Номенклатура
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|ГДЕ
	|	ЗаказПоставщикуТовары.Ссылка = &Ссылка
	|	И ЗаказПоставщикуТовары.Номенклатура = &Номенклатура";
	Запрос.УстановитьПараметр("Ссылка", Заказ);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

Процедура ПроверитьЗапретРозничнойПродажи(ТекущаяСтрока, СтруктураДействий)
	
	Перем СтруктураПараметровДействия, ЗначениеСвойства;
	
	Если Не СтруктураДействий.Свойство("ПроверитьЗапретРозничнойПродажи", СтруктураПараметровДействия) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	Если СкидкиНаценкиСерверПереопределяемый.ЗапрещенаПродажаТовара(ТекущаяСтрока.Номенклатура,
																	СтруктураПараметровДействия.Магазин,
																	СтруктураПараметровДействия.Дата) Тогда
		ТекстСообщения = СтруктураПараметровДействия.ТекстСообщения;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекущаяСтрока.Номенклатура);
		ТекущаяСтрока.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Процедура очистки колонок табличной части.
//
Процедура ОчиститьКолонкиТабличнойЧасти(Форма, ИмяТабличнойЧасти, ИменаКолонок) Экспорт

	ТзТовары = Форма.Объект.Товары.Выгрузить();
	ТзТовары.ЗаполнитьЗначения(0, ИменаКолонок);
	Форма.Объект.Товары.Загрузить(ТзТовары);

КонецПроцедуры

// Процедура очистки табличной части.
//
Процедура ОчиститьТабличнуюЧасть(Форма, ИмяТабличнойЧасти) Экспорт

	Форма.Объект[ИмяТабличнойЧасти].Очистить();

КонецПроцедуры

// Функция получения суммы документа без подарочных сертификатов.
//
Функция ПолучитьСуммуДокументаБезПодарочныхСертификатов(Объект, ИмяТЧ = "Товары") Экспорт
	
	СуммаДокументаБезПодарочныхСертификатов = Объект[ИмяТЧ].Итог("Сумма");
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ТипНоменклатуры", Перечисления.сабТипыНоменклатуры.ПодарочныйСертификат);
	
	СтрокиПодарочныхСертификатов = Объект[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаПодарочногоСертификата Из СтрокиПодарочныхСертификатов Цикл
	
		СуммаДокументаБезПодарочныхСертификатов = СуммаДокументаБезПодарочныхСертификатов - СтрокаПодарочногоСертификата.Сумма;
	
	КонецЦикла;
	
	Возврат СуммаДокументаБезПодарочныхСертификатов;
	
КонецФункции

// Процедура проверки соответствия флага и типа номенклатуры в строке.
//
Процедура ПроверитьФлагРезервированияВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Если СтруктураДействий.Свойство("ПроверитьФлагРезервирования") Тогда
		
		Если ТекущаяСтрока.Резервировать И ТекущаяСтрока.ТипНоменклатуры = Перечисления.сабТипыНоменклатуры.Услуга Тогда
			
			ТекущаяСтрока.Резервировать = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьФлагРезервированияВСтрокеТЧСервер()

Процедура ОчиститьДанныеПоЗаказуСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Если СтруктураДействий.Свойство("ОчиститьДанныеПоЗаказу") Тогда
		
		ТекущаяСтрока.КодСтроки = 0;
		ТекущаяСтрока.ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
		
	КонецЕсли;

КонецПроцедуры

// Процедура проверки соответствия резервирования и типа номенклатуры.
//
Процедура ПроверитьСоответствиеФлагаРезервированиеИТипаНоменклатуры(
	ДокументОбъект, 
	ИмяТабличнойЧасти, 
	Отказ
	) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Резервировать
	|ПОМЕСТИТЬ ТабТоварыВСЕ
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабТовары.Номенклатура.Наименование КАК Наименование,
	|	ТабТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТабТоварыВСЕ КАК ТабТовары
	|ГДЕ
	|	ТабТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.сабТипыНоменклатуры.Услуга)
	|	И ТабТовары.Резервировать
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Товары", ДокументОбъект[ИмяТабличнойЧасти].Выгрузить());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В строке №%1 резервируется Номенклатура: %2, являющаяся услугой'"),
			Выборка.НомерСтроки,
			Выборка.Наименование
		);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДокументОбъект,
			ИмяТабличнойЧасти+"[" + (Выборка.НомерСтроки - 1) + "].Номенклатура" ,
			,
			Отказ
		);
	КонецЦикла;

	

КонецПроцедуры

// Процедура заполняет признак "ЕстьПродажиПоСтроке", используемый при интерактивной работе с заказами.
//
Процедура ЗаполнитьПризнакЕстьПродажиПоСтроке(Заказ, ТаблицаФормы) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьРезервированиеПоЗаказамПокупателей") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателяТовары.НомерСтроки,
	|	ЗаказПокупателяТовары.КодСтроки КАК КодСтроки
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТаблицаТоваров КАК ЗаказПокупателяТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказыПокупателей.КодСтроки КАК КодСтроки
	|ПОМЕСТИТЬ ТаблицаРегистра
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей КАК ЗаказыПокупателей
	|ГДЕ
	|	ЗаказыПокупателей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ЗаказыПокупателей.Заказано > 0
	|	И ЗаказыПокупателей.Заказ = &Заказ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.КодСтроки,
	|	ВЫБОР
	|		КОГДА ТаблицаРегистра.КодСтроки ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьПродажиПоСтроке
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРегистра КАК ТаблицаРегистра
	|		ПО ТаблицаДокумента.КодСтроки = ТаблицаРегистра.КодСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	
	Запрос.УстановитьПараметр("ТаблицаТоваров",  ТаблицаФормы.Выгрузить(,"НомерСтроки,КодСтроки"));
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	ТаблицаПризнаков = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрТабл Из ТаблицаФормы Цикл
		
		СтрокаПризнаков = ТаблицаПризнаков[СтрТабл.НомерСтроки-1];
		
		СтрТабл.ЕстьПродажиПоСтроке = СтрокаПризнаков.ЕстьПродажиПоСтроке;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверка заполнения поля "Доля стоимости" в документе Сборка товаров.
//
Процедура ПроверитьЗаполнениеДолейСтоимости(Объект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки = Неопределено) Экспорт
	
	МассивНепроверяемыхРеквизитов.Добавить("Товары.ДоляСтоимости");
	МетаданныеОбъекта = Объект.Метаданные();
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ СтрокиСОшибками
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.ДоляСтоимости = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиСОшибками.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	СтрокиСОшибками КАК СтрокиСОшибками
	|ГДЕ
	|	НЕ СтрокиСОшибками.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.сабТипыНоменклатуры.Услуга)";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", Объект.Товары.Выгрузить(,"НомерСтроки,Номенклатура,ДоляСтоимости"));
	
	ШаблонСообщения = НСтр("ru='Не заполнена колонка ""%Доля стоимости%"" в строке %НомерСтроки% списка ""%ТаблицаТовары%"".'");
	
	Выборка = Запрос.Выполнить().Выбрать();
	ПредставлениеТЧ            = МетаданныеОбъекта.ТабличныеЧасти.Товары.Синоним;
	ПредставлениеДоляСтоимости = МетаданныеОбъекта.ТабличныеЧасти.Товары.Реквизиты.ДоляСтоимости.Синоним;
	
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Доля стоимости%", ПредставлениеДоляСтоимости);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаТовары%", ПредставлениеТЧ);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "ДоляСтоимости");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект",Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СтруктураЗаполненияСкладаПродажиВСтрокеТЧ(Объект) Экспорт
	
	СтуктураРезультат = Новый Структура;
	СтуктураРезультат.Вставить("Магазин", Объект.Магазин);
	СтуктураРезультат.Вставить("РабочееМесто", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КассаККМ, "РабочееМесто"));
	Возврат СтуктураРезультат;
	
КонецФункции

//
Процедура УдалитьНесвязанныеСерийныеНомера(Форма) Экспорт
	
	КлючиСерийныхНомеров = Форма.Объект.СерийныеНомера.Выгрузить();
	КлючиСерийныхНомеров.Свернуть("КлючСвязиСерийныхНомеров");
	Для Каждого СтрокаКлюча ИЗ КлючиСерийныхНомеров Цикл
		СтруктураКлюча = Новый Структура;
		СтруктураКлюча.Вставить("КлючСвязиСерийныхНомеров", СтрокаКлюча.КлючСвязиСерийныхНомеров);
		СтрокиТоваров = Форма.Объект.Товары.НайтиСтроки(СтруктураКлюча);
		Если СтрокиТоваров.Количество() = 0 Тогда
			УдаляемыеСтроки = Форма.Объект.СерийныеНомера.НайтиСтроки(СтруктураКлюча);
			Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
				Форма.Объект.СерийныеНомера.Удалить(УдаляемаяСтрока);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//
Процедура УдалитьНесвязанныеАкцизы(Форма) Экспорт
	
	Ключи = Форма.Объект.АкцизныеМарки.Выгрузить();
	Ключи.Свернуть("КлючСвязи");
	Для Каждого СтрокаКлюча ИЗ Ключи Цикл
		СтруктураКлюча = Новый Структура;
		СтруктураКлюча.Вставить("КлючСвязи", СтрокаКлюча.КлючСвязи);
		СтрокиТоваров = Форма.Объект.Товары.НайтиСтроки(СтруктураКлюча);
		Если СтрокиТоваров.Количество() = 0 Тогда
			УдаляемыеСтроки = Форма.Объект.АкцизныеМарки.НайтиСтроки(СтруктураКлюча);
			Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
				Форма.Объект.АкцизныеМарки.Удалить(УдаляемаяСтрока);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет данные на заполненность для использования связи ЕГАИС
Процедура ЗаполнитьНаличиеОшибокДанныхЕГАИС(ТаблицаФормы) Экспорт
	
	Если ТаблицаФормы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаФормы Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			Если СтрокаТаблицы.ХарактеристикиИспользуются Тогда
				Если ЗначениеЗаполнено(СтрокаТаблицы.Характеристика)  Тогда
					СтрокаТаблицы.ЕстьОшибкиВЗаполненииСтроки = Ложь;
				Иначе
					СтрокаТаблицы.ЕстьОшибкиВЗаполненииСтроки = Истина;
				КонецЕсли;
			Иначе
				СтрокаТаблицы.ЕстьОшибкиВЗаполненииСтроки = Ложь;
			КонецЕсли;
		Иначе
			СтрокаТаблицы.ЕстьОшибкиВЗаполненииСтроки = Истина;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

// Процедура заполнения необходимости ввода акцизной марки.
//
Процедура ЗаполнитьНеобходимостьВводаАкцизнойМарки(ТаблицаФормы, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПроверяемаяДата = ТекущаяДатаСеанса();
	
	Если НЕ ДополнительныеПараметры = Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("Дата") Тогда
			ПроверяемаяДата = ДополнительныеПараметры.Дата;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ИнтеграцияЕГАИСВызовСервера.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(ПроверяемаяДата) Тогда
		Для Каждого СтрТабл Из ТаблицаФормы Цикл
			СтрТабл.НеобходимостьВводаАкцизнойМарки = Ложь;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,
	|	ТаблицаТоваров.Номенклатура
	|ПОМЕСТИТЬ ТаблицаЗапроса
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗапроса.НомерСтроки,
	|	ТаблицаЗапроса.Номенклатура,
	|	ТаблицаЗапроса.Номенклатура.ВидАлкогольнойПродукцииЕГАИС.Маркируемый КАК НеобходимостьВводаАкцизнойМарки
	|ИЗ
	|	ТаблицаЗапроса КАК ТаблицаЗапроса";
	
	Запрос.УстановитьПараметр("ТаблицаТоваров",  ТаблицаФормы.Выгрузить(,"НомерСтроки,Номенклатура"));
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрТабл Из ТаблицаФормы Цикл
		
		СтрокаРезультата = ТаблицаРезультата[СтрТабл.НомерСтроки-1];
		
		СтрТабл.НеобходимостьВводаАкцизнойМарки = СтрокаРезультата.НеобходимостьВводаАкцизнойМарки;
		
	КонецЦикла;
	

КонецПроцедуры

// Процедура заполнения необходимости ввода акцизной марки.
//
Процедура ЗаполнитьНеобходимостьВводаСправкиНаАлкоголь(ТаблицаФормы, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПроверяемаяДата = ТекущаяДатаСеанса();
	
	Если НЕ ДополнительныеПараметры = Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("Дата") Тогда
			ПроверяемаяДата = ДополнительныеПараметры.Дата;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ИнтеграцияЕГАИСРТ.НужноРаботатьСЕГАИС(ПроверяемаяДата) Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаФормы Цикл
			СтрокаТаблицы.НеобходимостьВводаСправкиНаАлкоголь = Ложь;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,
	|	ТаблицаТоваров.Номенклатура
	|ПОМЕСТИТЬ ТаблицаЗапроса
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗапроса.НомерСтроки,
	|	ТаблицаЗапроса.Номенклатура,
	|	ЕСТЬNULL(ТаблицаЗапроса.Номенклатура.АлкогольнаяПродукция, ЛОЖЬ) КАК НеобходимостьВводаСправкиНаАлкоголь
	|ИЗ
	|	ТаблицаЗапроса КАК ТаблицаЗапроса";
	
	Запрос.УстановитьПараметр("ТаблицаТоваров",  ТаблицаФормы.Выгрузить(,"НомерСтроки,Номенклатура"));
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрТабл Из ТаблицаФормы Цикл
		
		СтрокаРезультата = ТаблицаРезультата[СтрТабл.НомерСтроки-1];
		
		СтрТабл.НеобходимостьВводаСправкиНаАлкоголь = СтрокаРезультата.НеобходимостьВводаСправкиНаАлкоголь;
		
	КонецЦикла;
	

КонецПроцедуры

// Проверяет полноту заполненности данных строки Постпуления товаров
//
Процедура ПроверитьНезаполненностьСтрокиПоступленияТоваровЕГАИССервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Если СтруктураДействий.Свойство("ПроверитьНезаполненностьСтрокиПоступленияТоваровЕГАИС") Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			Если ТекущаяСтрока.ХарактеристикиИспользуются Тогда
				Если ЗначениеЗаполнено(ТекущаяСтрока.Характеристика)  Тогда
					ТекущаяСтрока.ЕстьОшибкиВЗаполненииСтроки = Ложь;
				Иначе
					ТекущаяСтрока.ЕстьОшибкиВЗаполненииСтроки = Истина;
				КонецЕсли;
			Иначе
				ТекущаяСтрока.ЕстьОшибкиВЗаполненииСтроки = Ложь;
			КонецЕсли;
		Иначе
			ТекущаяСтрока.ЕстьОшибкиВЗаполненииСтроки = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьНеобходимостьВводаАкцизнойМарки(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Перем СтруктураПараметровДействия;

	Если СтруктураДействий.Свойство("ПроверитьНеобходимостьВводаАкцизнойМарки", СтруктураПараметровДействия) Тогда
		ПроверяемаяДата = ТекущаяДатаСеанса();
		
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если СтруктураПараметровДействия.Свойство("Дата") Тогда
				ПроверяемаяДата = СтруктураПараметровДействия.Дата;
			КонецЕсли;
		КонецЕсли;
		
		Если ИнтеграцияЕГАИСВызовСервера.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(ПроверяемаяДата) Тогда
			ДанныеПродукции = ИнтеграцияЕГАИСРТ.ДанныеАлкогольнойПродукции(ТекущаяСтрока.Номенклатура);
			Если ДанныеПродукции.ЭтоАлкогольнаяПродукция
				И ДанныеПродукции.Маркируемый
				И НЕ ДанныеПродукции.ПродаетсяВРозлив Тогда
				ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки = Истина;
			Иначе
				ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки = Ложь;
			КонецЕсли;
		Иначе
			ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьНеобходимостьВводаСправкиНаАлкоголь(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Перем СтруктураПараметровДействия;

	Если СтруктураДействий.Свойство("ПроверитьНеобходимостьВводаСправкиНаАлкоголь", СтруктураПараметровДействия) Тогда
		ПроверяемаяДата = ТекущаяДатаСеанса();
		
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если СтруктураПараметровДействия.Свойство("Дата") Тогда
				ПроверяемаяДата = СтруктураПараметровДействия.Дата;
			КонецЕсли;
		КонецЕсли;
		
		Если ИнтеграцияЕГАИСРТ.НужноРаботатьСЕГАИС(ПроверяемаяДата) Тогда
			ТекущаяСтрока.НеобходимостьВводаСправкиНаАлкоголь = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Номенклатура, "АлкогольнаяПродукция");
		Иначе
			ТекущаяСтрока.НеобходимостьВводаСправкиНаАлкоголь = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


Процедура ЗаполнитьGTINВСтроке(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	Перем Параметры;
	
	Если СтруктураДействий.Свойство("ЗаполнитьGTINВСтроке", Параметры) Тогда
		Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ШтрихкодыНоменклатуры.Владелец КАК Номенклатура,
			|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
			|	ШтрихкодыНоменклатуры.Штрихкод КАК GTIN
			|ИЗ
			|	РегистрСведений.Штрихкоды КАК ШтрихкодыНоменклатуры
			|ГДЕ
			|	ШтрихкодыНоменклатуры.Владелец = &Номенклатура
			|	И ВЫБОР
			|			КОГДА &ХарактеристикаЗаполнена
			|				ТОГДА ШтрихкодыНоменклатуры.Характеристика = &Характеристика
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ";
		Запрос.УстановитьПараметр("Номенклатура", ТекущаяСтрока.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", ТекущаяСтрока.Характеристика);
		Запрос.УстановитьПараметр("ХарактеристикаЗаполнена", ЗначениеЗаполнено(ТекущаяСтрока.Характеристика));
		ТаблицаGTIN = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицаGTIN.Количество() = 1 Тогда
			СтрокаТаблицы = ТаблицаGTIN.Получить(0);
			Если МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(СтрокаТаблицы.GTIN) Тогда
				ТекущаяСтрока.GTIN = СтрокаТаблицы.GTIN;
			КонецЕсли;
		ИначеЕсли ТаблицаGTIN.Найти(ТекущаяСтрока.GTIN, "GTIN") <> Неопределено Тогда
			// ничего не делаем, GTIN подходит
		Иначе
			ТекущаяСтрока.GTIN = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


// Процедура заполнение реквизитов КиЗ
Процедура ЗаполнитьКиЗВСтрокеСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ЗаполнитьКиЗВСтроке", СтруктураПараметровДействия) Тогда
		Если ОбщегоНазначенияРТКлиентСервер.ЕстьРеквизитОбъекта(ТекущаяСтрока, "НоменклатураКиЗ") Тогда
			ТекущаяСтрока.НоменклатураКиЗ   = СтруктураПараметровДействия.НоменклатураКиЗ;
			ТекущаяСтрока.ХарактеристикаКиЗ = СтруктураПараметровДействия.ХарактеристикаКиЗ;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакХарактеристикиИспользуются(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	Перем Параметры;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакХарактеристикиИспользуются", Параметры) Тогда
		
		Номенклатура = Параметры.Номенклатура;
		ХарактеристикиИспользуются = Параметры.ХарактеристикиИспользуются;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)
		|				ИЛИ Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИспользованиеХарактеристик
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ТекущаяСтрока[Номенклатура]);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			ТекущаяСтрока[ХарактеристикиИспользуются] = Выборка.ИспользованиеХарактеристик;
		Иначе
			ТекущаяСтрока[ХарактеристикиИспользуются] = Ложь;
		КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСерииПоВладельцу(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	Перем Параметры;
	
	Если СтруктураДействий.Свойство("ПроверитьСерииПоВладельцу", Параметры) Тогда
		
		Владелец = Параметры.Владелец;
		Если ТипЗнч(Владелец) = Тип("СправочникСписок.Номенклатура") Тогда
			Владелец = Владелец.ВидНоменклатуры;
		КонецЕсли;
		
		Если НЕ ТипЗнч(Владелец) = Тип("СправочникСписок.ВидыНоменклатуры") Тогда
			Возврат
		КонецЕсли;
		
		Магазин = Параметры.Магазин;
		ПроверяемыеЗначения = Параметры.ПроверяемыеЗначения;
		
		ТаблицаРеквизитов = Новый ТаблицаЗначений;
		ТаблицаРеквизитов.Колонки.Добавить("ИмяРеквизита", Новый ОписаниеТипов("Стока"));
		ТаблицаРеквизитов.Колонки.Добавить("ЗначениеРеквизита", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
		
		Для каждого ПроверяемоеЗначение Из ПроверяемыеЗначения Цикл
			СтрокаТаблицы = ТаблицаРеквизитов.Добавить();
			СтрокаТаблицы.ИмяРеквизита = ПроверяемоеЗначение.Ключ;
			СтрокаТаблицы.ЗначениеРеквизита = ПроверяемоеЗначение.Значение;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаРеквизитов.ИмяРеквизита,
		|	ТаблицаРеквизитов.ЗначениеРеквизита
		|ПОМЕСТИТЬ ТаблицаРеквизитов
		|ИЗ
		|	&ТаблицаРеквизитов КАК ТаблицаРеквизитов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаРеквизитов.ИмяРеквизита,
		|	ВЫРАЗИТЬ(ТаблицаРеквизитов.ЗначениеРеквизита КАК Справочник.СерииНоменклатуры) КАК ЗначениеРеквизита
		|ПОМЕСТИТЬ ТаблицаСТипами
		|ИЗ
		|	ТаблицаРеквизитов КАК ТаблицаРеквизитов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСТипами.ИмяРеквизита,
		|	ТаблицаСТипами.ЗначениеРеквизита
		|ИЗ
		|	ТаблицаСТипами КАК ТаблицаСТипами
		|ГДЕ
		|	ТаблицаСТипами.ЗначениеРеквизита.ВидНоменклатуры <> &ВидНоменклатуры";
		
		Запрос.УстановитьПараметр("ВидНоменклатуры", Владелец);
		Запрос.УстановитьПараметр("ТаблицаРеквизитов", ТаблицаРеквизитов);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ТекущаяСтрока[Выборка.ИмяРеквизита] = Справочники.СерииНоменклатуры.ПустаяСсылка();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры
