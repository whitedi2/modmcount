Процедура УстановитьПользователяНаКлиенте() Экспорт
	
	БюджетныйНаСервере.НайтиИУстановитьПользователя(Новый Структура("Наименование", БПСервер.ПараметрыТекущегоПользователя()));
	
КонецПроцедуры	

Процедура ОповеститьОбАварийномОтключении() Экспорт
	ВремяОтключения = БПСервер.ПолучитьКонстантуНаСервере("ВремяАварияногоОтключения");
	ВремяНачала	    = БПСервер.ПолучитьКонстантуНаСервере("ДлительностьПрофилактическихРабот");
	Если ВремяОтключения > БПСервер.СерверноеВремя() Тогда 
		ОсталосьВсего = ВремяОтключения - ТекущаяДата();
		ОсталосьМинут = Цел(ОсталосьВсего/60);
		ОсталосьСекунд = ОсталосьВсего % 60;
		ТекстСообщения = БПСервер.ПолучитьКонстантуНаСервере("ТекстСообщенияОбАварийномОтключении");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"#min#", Строка(ОсталосьМинут));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "#dl#", ВремяНачала);
		ТекстСообщения = Формат(ТекущаяДата(), "ДЛФ=T") + ": " + ТекстСообщения;
		Сообщить(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

Процедура ПоказатьМассовоеСообщениеПользователям() экспорт
	
	МассовоеСообщениеПользователям = БПСервер.ПолучитьКонстантуНаСервере("МассовоеСообщениеПользователям");
	Если Не ПустаяСтрока(МассовоеСообщениеПользователям) Тогда
		Сообщить(МассовоеСообщениеПользователям);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыводВсплывающегоСообщенияЧата() Экспорт
	БюджетныйНаКлиенте.ВыводВсплывающегоСообщенияЧатаКлиент();
КонецПроцедуры

// Обработчик ожидания проверяет, что информационная база была обновлена динамически, и 
// сообщает об этом пользователю.
//
Процедура ОбработчикОжиданияПроверкиДинамическогоОбновления() Экспорт
	
	//Если Не КонтрольДинамическогоОбновленияКонфигурацииВызовСервера.КонфигурацияБДБылаИзмененаДинамически() Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//ОтключитьОбработчикОжидания("ОбработчикОжиданияПроверкиДинамическогоОбновления");
	//
	//
	//
	//ТекстСообщения = НСтр("ru = 'Версия программы обновлена (внесены изменения в конфигурацию информационной базы).
	//|Для дальнейшей работы рекомендуется перезапустить программу.
	//|Перезапустить?'");
	//
	////Ответ = Вопрос(ТекстСообщения, РежимДиалогаВопрос.ДаНет);	
	////Если Ответ = КодВозвратаДиалога.Да Тогда
	////	ЗавершитьРаботуСистемы(Истина, Истина);
	////Иначе
	//	УстановитьЗаголовокПриложения(БюджетныйНаСервере.ВернутьЗаголовокКонфигурации() + " <!Конфигурация изменена>");
	////КонецЕсли;
	
	
КонецПроцедуры

Процедура ПоискНовыхЗадач() Экспорт  
	
	СтруктураВыполнения = БПСервер.МассивНевыполненныхЗадач();
	КоличествоНевыполненныхЗадач = СтруктураВыполнения.МассивПоступившихЗадач.Количество(); 
	Если КоличествоНевыполненныхЗадач И СтруктураВыполнения.НовыеЗадачи Тогда
		//выводим окно
		БюджетныйНаКлиенте.ВыводВсплывающегоОкна(КоличествоНевыполненныхЗадач);
		//воспроизводим звук
		//БюджетныйНаКлиенте.ВоспроизвестиЗвук("Уведомление");
		
	КонецЕсли;
	
	//КоличествоНевыполненныхЗадач = БПСервер.ПолучитьПараметрыМассив().Количество();
	//Если КоличествоНевыполненныхЗадач Тогда
	//	Если БПСервер.ПолучитьЗначениеСчетчика() < 1 Тогда //3 нужно прописывать в настройках пользователя
	//		//ПодключитьОбработчикОжидания("ВыводВсплывающегоОкна", 5);
	//		ВыводВсплывающегоОкна(КоличествоНевыполненныхЗадач);
	//	Иначе
	//		СтруктураВыполнения = БПСервер.МассивНевыполненныхЗадач();
	//	КонецЕсли;
	//Иначе
	//	СтруктураВыполнения = БПСервер.МассивНевыполненныхЗадач(Ложь);
	//КонецЕсли;
	
	//предупреждение о завершении работы программы
	//ВремяДоЗавершения = БПСервер.ВремяДоЗавершения();
	//Если ВремяДоЗавершения > БПСервер.СерверноеВремя() Тогда
	//	ОткрытьФорму("Обработка.ЗакрытиеПрограммы.Форма",,,); 
	//КонецЕсли; 
	
КонецПроцедуры
