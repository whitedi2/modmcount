Функция ПолучитьМаксКоличествоСубконто() Экспорт
	
	Возврат Метаданные.ПланыСчетов.Учетный.МаксКоличествоСубконто;
	
КонецФункции


Функция ПолучитьСвойстваСчета(СчетСсылка, Предприятие = Неопределено) Экспорт
	
	//убираем ужасное использование "через точку"
	УстановитьПривилегированныйРежим(Истина);
	СчетВидыСубконто = СчетСсылка.ВидыСубконто;
	Счет = БюджетныйНаСервере.ВернутьРеквизиты(СчетСсылка, "Ссылка, Наименование, Код, Родитель, Вид, Забалансовый, Валютный, Количественный, УчетПоПодразделениям, Крахмал, ДенежныйСчет", Ложь);
	
	ДанныеСчета = Новый Структура;
	
	ДанныеСчета.Вставить("Ссылка"                         , Счет.Ссылка);
	ДанныеСчета.Вставить("Наименование"                   , Счет.Наименование);
	ДанныеСчета.Вставить("Код"                            , Счет.Код);
	ДанныеСчета.Вставить("Родитель"                       , Счет.Родитель);
	ДанныеСчета.Вставить("Наименование"                   , Счет.Наименование);
	ДанныеСчета.Вставить("Вид"                            , Счет.Вид);
	ДанныеСчета.Вставить("Забалансовый"                   , Счет.Забалансовый);
	
	Если НЕ Предприятие = Неопределено И НЕ Предприятие.ЭтоГруппа Тогда
		ДанныеПредприятия = БюджетныйНаСервере.ВернутьРеквизиты(Предприятие, "ВедетсяВалютныйУчет, УчетПоПодразделениям");
	Иначе
		ДанныеПредприятия = Новый Структура("ВедетсяВалютныйУчет, УчетПоПодразделениям", Истина, Истина);
	КонецЕсли;
	
	Если ДанныеПредприятия = Неопределено Тогда
		ДанныеПредприятия = Новый Структура("ВедетсяВалютныйУчет, УчетПоПодразделениям", Ложь, Ложь);
	КонецЕсли;
	
	//ДанныеСчета.Вставить("ЗапретитьИспользоватьВПроводках", Счет.ЗапретитьИспользоватьВПроводках);
	Попытка
		Если Не Предприятие = Неопределено Тогда
			Если УЧ_Сервер.ДенежныйСчет(Счет.Ссылка) Тогда
				ДанныеСчета.Вставить("Валютный", Счет.Валютный);
			Иначе
				ДанныеСчета.Вставить("Валютный", Ложь);
			КонецЕсли;
		Иначе
			ДанныеСчета.Вставить("Валютный", Счет.Валютный);		
		КонецЕсли;
	Исключение
	КонецПопытки;
	ДанныеСчета.Вставить("ВалютныйРеквизит"               , Счет.Валютный);
	ДанныеСчета.Вставить("Количественный"                 , Счет.Количественный);
	ДанныеСчета.Вставить("УчетПоПодразделениям"           , Счет.УчетПоПодразделениям И ДанныеПредприятия.УчетПоПодразделениям);
	ДанныеСчета.Вставить("ДенежныйСчет"	                  , Счет.ДенежныйСчет);
	Попытка
		ДанныеСчета.Вставить("Крахмал"                  , Счет.Крахмал);	
	Исключение
	КонецПопытки; 
	ДанныеСчета.Вставить("КоличествоСубконто"             , СчетВидыСубконто.Количество());
	
	МаксКоличествоСубконто = ПолучитьМаксКоличествоСубконто();
	Для Индекс = 1 По МаксКоличествоСубконто Цикл
		Если Индекс <= СчетВидыСубконто.Количество() Тогда
			ДанныеСчета.Вставить("ВидСубконто" + Индекс,                   СчетВидыСубконто[Индекс - 1].ВидСубконто);
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "Наименование",  Строка(СчетВидыСубконто[Индекс - 1].ВидСубконто));
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "ТипЗначения",   СчетВидыСубконто[Индекс - 1].ВидСубконто.ТипЗначения);
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "ТипЗначенияСтрока",   Строка(ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"]));
			//ДанныеСчета.Вставить("ВидСубконто" + Индекс + "Суммовой",      Строка(Счет.ВидыСубконто[Индекс - 1].Суммовой));
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "ТолькоОбороты", Строка(СчетВидыСубконто[Индекс - 1].ТолькоОбороты));
			
			//проверка владельца субконто2
			Если Индекс = 2 Тогда
				ВладелецРазличен = Истина;
				Для каждого ТипСубконто2 Из СчетВидыСубконто[Индекс - 1].ВидСубконто.ТипЗначения.Типы() Цикл
					Если ТипСубконто2 = Тип("Строка") Тогда
						Продолжить;				
					КонецЕсли;
					СубСсылка2 = Новый(ТипСубконто2);
					ЕстьВладелец = Ложь;
					Для каждого ТекСтандРекв Из СубСсылка2.Метаданные().СтандартныеРеквизиты Цикл
						Если ТекСтандРекв.Имя = "Владелец" Тогда
							ЕстьВладелец = Истина;
						КонецЕсли;
					КонецЦикла;
					Если ЕстьВладелец Тогда
						ТипыРеквВладельца = СубСсылка2.Метаданные().СтандартныеРеквизиты.Владелец.Тип.Типы();
						Для каждого ТипРеквВладельца Из ТипыРеквВладельца Цикл
							СубСсылкаВладельца = Новый(ТипРеквВладельца);
							Для каждого ТипСубконто1 Из СчетВидыСубконто[Индекс - 2].ВидСубконто.ТипЗначения.Типы() Цикл
								СубСсылка1 = Новый(ТипСубконто1);
								Если ТипЗнч(СубСсылкаВладельца) = ТипЗнч(СубСсылка1) Тогда
									ВладелецРазличен = Ложь;
								КонецЕсли;
							КонецЦикла;					
						КонецЦикла; 
					КонецЕсли;
				КонецЦикла;
				ДанныеСчета.Вставить("ВидСубконто" + Индекс + "ВладелецРазличен", ВладелецРазличен);
			КонецЕсли;
			
			
		Иначе
			ДанныеСчета.Вставить("ВидСубконто" + Индекс,                   Неопределено);
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "Наименование",  Неопределено);
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "ТипЗначения",   Неопределено);
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "ТипЗначенияСтрока",   Неопределено);
			//ДанныеСчета.Вставить("ВидСубконто" + Индекс + "Суммовой",      Ложь);
			ДанныеСчета.Вставить("ВидСубконто" + Индекс + "ТолькоОбороты", Ложь);
		КонецЕсли;
	КонецЦикла;
	
	//доступность счета. добавил д1 20.07.16
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МИНИМУМ(Пользователи.ОграничениеСчетов) КАК ОграничениеСчетов,
	|	МИНИМУМ(Пользователи.РазрешитьВсеСчетаКроме) КАК РазрешитьВсеСчетаКроме
	|ПОМЕСТИТЬ Пользователи
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка В(&МассиПолзьзователей)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Учетный.Ссылка КАК Счет,
	|	ТИПЗНАЧЕНИЯ(ПользователиДосупныеСчета.Ссылка) КАК Поле1,
	|	Пользователи.ОграничениеСчетов КАК ОграничениеСчетов,
	|	Пользователи.РазрешитьВсеСчетаКроме КАК РазрешитьВсеСчетаКроме
	|ИЗ
	|	ПланСчетов.Учетный КАК Учетный
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.ДосупныеСчета КАК ПользователиДосупныеСчета
	|		ПО Учетный.Ссылка = ПользователиДосупныеСчета.Счет
	|			И (ПользователиДосупныеСчета.Ссылка В (&МассиПолзьзователей)),
	|	Пользователи КАК Пользователи
	|ГДЕ
	|	Учетный.Ссылка В(&Счет)
	|	И ВЫБОР
	|			КОГДА Пользователи.ОграничениеСчетов = ИСТИНА
	|					И Пользователи.РазрешитьВсеСчетаКроме = ЛОЖЬ
	|				ТОГДА НЕ ПользователиДосупныеСчета.Ссылка ЕСТЬ NULL
	|			КОГДА Пользователи.ОграничениеСчетов = ИСТИНА
	|					И Пользователи.РазрешитьВсеСчетаКроме = ИСТИНА
	|				ТОГДА ПользователиДосупныеСчета.Ссылка ЕСТЬ NULL
	|			КОГДА Пользователи.ОграничениеСчетов = ЛОЖЬ
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("МассиПолзьзователей", БПСервер.ПолучитьМассивПользователей());
	Запрос.УстановитьПараметр("Счет", Счет.Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеСчета.Вставить("ДоступностьСчета", ?(Выборка.Количество(), Истина, Ложь));
	ДанныеСчета.Вставить("СинонимПодразделения", Метаданные.Справочники.СтруктураПредприятия.Синоним);
	//конец добавления доступности
	
	Возврат ДанныеСчета;
	
КонецФункции

Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Отчет     = Форма.Отчет;
	Параметры = Форма.Параметры;
	РежимРасшифровкиСКД = Ложь;
	
	Если Параметры.Свойство("РежимРасшифровки") Тогда 
		Отчет.РежимРасшифровки = Параметры.РежимРасшифровки;
	ИначеЕсли Параметры.Свойство("ИДРасшифровки") И Параметры.ИДРасшифровки = "сабОтчетПоУчетномуРегистру" Тогда 
		Если Параметры.Свойство("Расшифровка") Тогда
			РежимРасшифровкиСКД = Параметры.Расшифровка;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("ВидРасшифровки") Тогда 
		// 1 - из временного хранилища, 2 - из параметров формы
		Если Параметры.ВидРасшифровки = 1 Тогда
			ДанныеОбъекта = ПолучитьИзВременногоХранилища(Параметры.АдресНастроек);
			ПользовательскиеНастройки = ДанныеОбъекта.НастройкиРасшифровки[Параметры.ИДРасшифровки];
		ИначеЕсли Параметры.ВидРасшифровки = 2 Тогда
			ПользовательскиеНастройки = Параметры.ПользовательскиеНастройки;
		КонецЕсли;
		
		//Развернутое сальдо
		Если НЕ ДанныеОбъекта = Неопределено Тогда
			Если ТипЗнч(ДанныеОбъекта.Объект) = Тип("ОтчетОбъект.сабОборотноСальдоваяВедомость") И Форма.Отчет.Свойство("РазвернутоеСальдо") Тогда
				Параметры.ЗаполняемыеНастройки.Вставить("РазвернутоеСальдоТЧ", ДанныеОбъекта.Объект.РазвернутоеСальдо.Выгрузить());
				Если ТипЗнч(Форма.Отчет.РазвернутоеСальдо) = Тип("Булево") Тогда
					Для каждого ТекСтрока Из ДанныеОбъекта.Объект.РазвернутоеСальдо Цикл
						Если ПользовательскиеНастройки.ДополнительныеСвойства.Счет = ТекСтрока.Счет Тогда
							Форма.Отчет.РазвернутоеСальдо = Истина;						
						КонецЕсли;				
					КонецЦикла; 				
				КонецЕсли;				
			КонецЕсли;
		КонецЕсли;
		
		// Установка пользовательских настроек
		Отчет.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки              = "Отбор";
		Отчет.КомпоновщикНастроек.Настройки.Порядок.ИдентификаторПользовательскойНастройки            = "Порядок";
		Отчет.КомпоновщикНастроек.Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
		
		// Загрузка пользовательских настроек в компоновщик настроек отчета
		Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
		
		// Получение основных настроек компоновщика настроек, с учетом пользовательских настроек
		Настройки = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
		
		// Загрузка основных настроек
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
		
		// Установка значений реквизитов отчета
		// 31.07.2015 для отчета по записям учетного регистра алгоритм передачи параметров и отборов иной
		Если Параметры.Свойство("ИДРасшифровки") И Параметры.ИДРасшифровки = "сабОтчетПоУчетномуРегистру" Тогда
			
			// Очистка пользовательских настроек
			Отчет.КомпоновщикНастроек.Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
			Отчет.КомпоновщикНастроек.Настройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
			
			//очищаем лишние елементы отбора
			МассивЛишнихЭлементовОтбора = Новый Массив;
			Для каждого ТекСтрокаОтбора Из Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
				Если ТекСтрокаОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
					МассивЛишнихЭлементовОтбора.Добавить(ТекСтрокаОтбора);				
				КонецЕсли;
				Если ТекСтрокаОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СценарийПлана") Тогда
					МассивЛишнихЭлементовОтбора.Добавить(ТекСтрокаОтбора);				
				КонецЕсли;			
			КонецЦикла; 
			
			Для каждого ТекЭлементКУдалению Из МассивЛишнихЭлементовОтбора Цикл
				Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ТекЭлементКУдалению);		
			КонецЦикла;
			
			//фильтруем параметры отчета
			Для Каждого ЭлементСтруктуры Из ПользовательскиеНастройки.ДополнительныеСвойства Цикл
				
				Если ЭлементСтруктуры.Ключ = "Организация" Тогда
					СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(Отчет.КомпоновщикНастроек, "Предприятия", ЭлементСтруктуры.Значение, ВидСравненияКомпоновкиДанных.Равно, Истина, Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ); 
					Продолжить;
				КонецЕсли;
				
				Если ЭлементСтруктуры.Ключ = "СценарийПлана" Тогда
					СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(Отчет.КомпоновщикНастроек, "СценарийПлана", ЭлементСтруктуры.Значение, ВидСравненияКомпоновкиДанных.Равно, Истина, Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ); 
					Продолжить;
				КонецЕсли;
				
				
				Если Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы.Найти(ЭлементСтруктуры.Ключ) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЭлементСтруктуры.Ключ = "Период" Тогда
					СтандартныеОтчетыКлиентСервер.УстановитьПараметр(Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, Новый ПараметрКомпоновкиДанных(ЭлементСтруктуры.Ключ), ЭлементСтруктуры.Значение, Истина);
					Продолжить;
				КонецЕсли;
				
				Если ЭлементСтруктуры.Ключ = "Счет" Тогда
					СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(Отчет.КомпоновщикНастроек, ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение, ВидСравненияКомпоновкиДанных.ВИерархии, Истина, Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ); 
					Продолжить;
				КонецЕсли;
				
				СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(Отчет.КомпоновщикНастроек, ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение, ВидСравненияКомпоновкиДанных.Равно, Истина, Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ); 
				
			КонецЦикла;
			
		Иначе
			
			// Очистка пользовательских настроек
			Отчет.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
			Отчет.КомпоновщикНастроек.Настройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
			Отчет.КомпоновщикНастроек.Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
			
			Для Каждого ЭлементСтруктуры Из ПользовательскиеНастройки.ДополнительныеСвойства Цикл
				Если Отчет.Свойство(ЭлементСтруктуры.Ключ) Тогда
					Отчет[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
				КонецЕсли;
			КонецЦикла;
			
			//ЗаполняемыеНастройки = Новый Структура("Показатели, Группировка, Отбор",
			//Истина, Истина, Истина);
			//Форма.ЗаполнитьНастройкамиПоУмолчанию(ЗаполняемыеНастройки);
			
			//некоторые настройки отчета транслируем на форму отчета-расшифровки
			Если БюджетныйНаСервере.ЕстьСвойствоОбъекта(ДанныеОбъекта.Объект, "КомпоновщикНастроек") Тогда
				КомпоновщикНастроекНастройки = ДанныеОбъекта.Объект.КомпоновщикНастроек.Настройки;
			ИначеЕсли БюджетныйНаСервере.ЕстьСвойствоОбъекта(ДанныеОбъекта.Объект, "НастройкиКомпоновкиДанных") Тогда
				КомпоновщикНастроекНастройки = ДанныеОбъекта.Объект.НастройкиКомпоновкиДанных;
			Иначе
				КомпоновщикНастроекНастройки = Неопределено;
			КонецЕсли;
			
			Если Не КомпоновщикНастроекНастройки = Неопределено Тогда
				Для Каждого ЭлементСтруктуры Из КомпоновщикНастроекНастройки.ДополнительныеСвойства Цикл
					Если БюджетныйНаСервере.ЕстьСвойствоОбъекта(Форма, ЭлементСтруктуры.Ключ) Тогда
						//Если ЭлементСтруктуры.Ключ = "СкрыватьНастройкиПриФормированииОтчета" Тогда
						Форма[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
						//КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;	
		
		// эквивалентная валюта в расшифровке
		Попытка 
			Если Форма.Отчет.Свойство("ЭквивалентнаяВалюта") И ДанныеОбъекта.Объект.Метаданные().Реквизиты.Найти("ЭквивалентнаяВалюта") <> Неопределено Тогда
				Форма.Отчет.ЭквивалентнаяВалюта = ДанныеОбъекта.Объект.ЭквивалентнаяВалюта
			КонецЕсли
		Исключение
			Форма.Отчет.ЭквивалентнаяВалюта = УЧ_Сервер.НациональнаяВалюта()
		КонецПопытки;
		
		// дата курса в расшифровке
		//Попытка 
		//	Если Форма.Отчет.Свойство("ДатаКурса") И ДанныеОбъекта.Объект.Метаданные().Реквизиты.Найти("ДатаКурса") <> Неопределено Тогда
		//		Форма.Отчет.ДатаКурса = ДанныеОбъекта.Объект.ДатаКурса
		//	КонецЕсли
		//Исключение
		//	Форма.Отчет.ДатаКурса = Дата("00010101");
		//КонецПопытки
		
	КонецЕсли;
	
	ОбъектОтчет = Форма.РеквизитФормыВЗначение("Отчет");
	Если Не ЗначениеЗаполнено(Форма.СхемаКомпоновкиДанных) Тогда
		Форма.СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(ОбъектОтчет.СхемаКомпоновкиДанных, Форма.УникальныйИдентификатор);
	КонецЕсли;
	Форма.ДанныеРасшифровки = ПоместитьВоВременноеХранилище(Форма.ДанныеРасшифровки          , Форма.УникальныйИдентификатор);
	
	Попытка
		Форма.НаборПоказателей = Новый ФиксированныйМассив(ОбъектОтчет.НаборПоказателей);
	Исключение
		Форма.НаборПоказателей = Неопределено;
	КонецПопытки;
	
	ПараметрМакетОформления = СтандартныеОтчетыКлиентСервер.ПолучитьПараметрВывода(Отчет.КомпоновщикНастроек.Настройки, "МакетОформления");
	СписокМакетовОформления = ПолучитьСписокМакетовОформления(); 
	Для Каждого ЭлементСписка Из СписокМакетовОформления Цикл
		Форма.Элементы.МакетОформления.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	Если Не БюджетныйНаСервере.ЭтоИнтерфейсТакси() Или 
		ПараметрМакетОформления.Использование И Не ПустаяСтрока(ПараметрМакетОформления.Значение) И СписокМакетовОформления.НайтиПоЗначению(ПараметрМакетОформления.Значение) <> Неопределено Тогда
		Форма.МакетОформления = ПараметрМакетОформления.Значение;
	Иначе
		Форма.МакетОформления = "МакетКрасивый";        
	КонецЕсли;
	СтандартныеОтчетыКлиентСервер.УстановитьПараметрВывода(Отчет.КомпоновщикНастроек.Настройки,	"МакетОформления", Форма.МакетОформления);
	
	Попытка
		Форма.Элементы.ПанельНастроек.Пометка = Форма.Элементы.ГруппаПанельНастроек.Видимость;
	Исключение
	КонецПопытки;
	
	Попытка 
		РежимРасшифровкиОтчета = Отчет.РежимРасшифровки;
	Исключение
		РежимРасшифровкиОтчета = РежимРасшифровкиСКД;
	КонецПопытки;
	
	Если РежимРасшифровкиОтчета Тогда
		СтандартнаяОбработка = Ложь;
		Попытка
			Форма.ИзменениеСхемыКомпоновкиДанных();
		Исключение
		КонецПопытки;
		Если Параметры.Свойство("ЗаполняемыеНастройки") Тогда
			Форма.ЗаполнитьНастройкамиПоУмолчанию(Параметры.ЗаполняемыеНастройки);
		КонецЕсли;
		Форма.СформироватьОтчетСервер();
	КонецЕсли;
	
	
	//Форма.ДоступныеПериодыОтчета = ПолучитьДоступныеПериодыОтчета();
	//ПолучитьСписокДоступныхПериодов(Форма.ДоступныеПериодыОтчета.День, 
	//	Форма.Элементы.ВидПериода.СписокВыбора);
	
КонецПроцедуры

Функция ПолучитьДоступныеПериодыОтчета() Экспорт
	
	ДоступныеПериодыОтчета = Новый Структура;
	Для Каждого ЗначениеПеречисления Из Метаданные.Перечисления.ДоступныеПериодыОтчета.ЗначенияПеречисления Цикл
		ДоступныеПериодыОтчета.Вставить(
		ЗначениеПеречисления.Имя, Перечисления.ДоступныеПериодыОтчета[ЗначениеПеречисления.Имя]);
	КонецЦикла;
	
	Возврат ДоступныеПериодыОтчета;
	
КонецФункции

Функция ПолучитьСписокМакетовОформления() Экспорт
	
	СписокМакетовОформления = Новый СписокЗначений;
	Для Каждого ОбщийМакет Из Метаданные.ОбщиеМакеты Цикл
		Если ОбщийМакет.ТипМакета = Метаданные.СвойстваОбъектов.ТипМакета.МакетОформленияКомпоновкиДанных Тогда
			СписокМакетовОформления.Добавить(ОбщийМакет.Имя, ОбщийМакет.Синоним);
		КонецЕсли;
	КонецЦикла;
	
	СписокМакетовОформления.Добавить("Основной");
	СписокМакетовОформления.Добавить("Яркий");
	СписокМакетовОформления.Добавить("Море");
	СписокМакетовОформления.Добавить("Арктика");
	СписокМакетовОформления.Добавить("Зеленый");
	СписокМакетовОформления.Добавить("Античный");
	
	Возврат СписокМакетовОформления;
	
КонецФункции

Процедура ПолучитьСписокДоступныхПериодов(МинимальныйПериод, СписокПериодов, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Если ТипЗнч(СписокПериодов) <> Тип("СписокЗначений") тогда
		Возврат;
	КонецЕсли;
	
	СписокДоступныхПериодов = Новый СписокЗначений;
	СписокДоступныхПериодов.Добавить(Перечисления.ДоступныеПериодыОтчета.День);
	СписокДоступныхПериодов.Добавить(Перечисления.ДоступныеПериодыОтчета.Неделя);
	СписокДоступныхПериодов.Добавить(Перечисления.ДоступныеПериодыОтчета.Декада);
	СписокДоступныхПериодов.Добавить(Перечисления.ДоступныеПериодыОтчета.Месяц);
	СписокДоступныхПериодов.Добавить(Перечисления.ДоступныеПериодыОтчета.Квартал);
	СписокДоступныхПериодов.Добавить(Перечисления.ДоступныеПериодыОтчета.Полугодие);
	СписокДоступныхПериодов.Добавить(Перечисления.ДоступныеПериодыОтчета.Год);
	
	СписокДоступныхПериодов.Добавить(Перечисления.ДоступныеПериодыОтчета.ПроизвольныйПериод);
	
	ЭлементСписка = СписокДоступныхПериодов.НайтиПоЗначению(МинимальныйПериод);
	Если ЭлементСписка <> Неопределено Тогда
		ИндексЭлемента = СписокДоступныхПериодов.Индекс(ЭлементСписка);
		Для Сч = ИндексЭлемента По СписокДоступныхПериодов.Количество() - 1 Цикл
			Период = СписокДоступныхПериодов.Получить(Сч);
			СписокПериодов.Добавить(Период.Значение, Период.Представление);
		КонецЦикла;
		Если ЗначениеПоУмолчанию = Неопределено Тогда
			ЗначениеПоУмолчанию = СписокПериодов[0].Значение;
		КонецЕсли;
	Иначе
		Возврат; 
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриСохраненииПользовательскихНастроекНаСервере(ФормаОтчета, Настройки, СохранятьТолькоРеквизиты = Ложь) Экспорт
	
	ОбъектОтчет = ФормаОтчета.РеквизитФормыВЗначение("Отчет");
	
	ОтчетМетаданные = ОбъектОтчет.Метаданные();
	
	Если НЕ СохранятьТолькоРеквизиты Тогда
		ТекущиеНастройки = ОбъектОтчет.КомпоновщикНастроек.Настройки;
		
		// Очистка пользовательских настроек
		ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
		ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
		ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
		
		// Установка пользовательских настроек
		ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "Отбор";
		ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "Порядок";
		ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
	КонецЕсли;
	
	// Сохранение реквизитов отчета
	ДополнительныеСвойства = Новый Структура;
	Для Каждого Реквизит Из ОтчетМетаданные.Реквизиты Цикл
		ДополнительныеСвойства.Вставить(Реквизит.Имя, ОбъектОтчет[Реквизит.Имя]);
	КонецЦикла;
	Для Каждого Реквизит Из ОтчетМетаданные.ТабличныеЧасти Цикл
		ДополнительныеСвойства.Вставить(Реквизит.Имя, ОбъектОтчет[Реквизит.Имя].Выгрузить());
	КонецЦикла;
	
	Если НЕ СохранятьТолькоРеквизиты Тогда
		// Сохранение реквизитов формы
		ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", ФормаОтчета.ВыводитьЗаголовок);
		ДополнительныеСвойства.Вставить("ВыводитьПодвал"   , ФормаОтчета.ВыводитьПодвал);	
		ДополнительныеСвойства.Вставить("МакетОформления"  , ФормаОтчета.МакетОформления);
		ДополнительныеСвойства.Вставить("СкрыватьНастройкиПриФормированииОтчета"  , ФормаОтчета.СкрыватьНастройкиПриФормированииОтчета);
	КонецЕсли;
	
	Настройки.ДополнительныеСвойства.Вставить("ДанныеОтчета", Новый ХранилищеЗначения(ДополнительныеСвойства));
	
КонецПроцедуры

Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(ФормаОтчета, Настройки, ЗагружатьТолькоРеквизиты = Ложь) Экспорт
	
	Если Настройки = Неопределено Тогда
		// Установка настроек по умолчанию
		//УстановитьНастройкиПоУмолчанию(ФормаОтчета);		
	Иначе 
		// Восстановление сохраненных настроек
		Если Настройки.ДополнительныеСвойства.Свойство("ДанныеОтчета") Тогда
			ДополнительныеСвойства = Настройки.ДополнительныеСвойства.ДанныеОтчета.Получить();
			Для Каждого ЭлементСтруктуры Из ДополнительныеСвойства Цикл
				// Восстановление реквизитов отчета
				Если ФормаОтчета.Отчет.Свойство(ЭлементСтруктуры.Ключ) Тогда
					Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("ТаблицаЗначений") Тогда
						ФормаОтчета.Отчет[ЭлементСтруктуры.Ключ].Загрузить(ЭлементСтруктуры.Значение);
					Иначе
						ФормаОтчета.Отчет[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
					КонецЕсли;
				КонецЕсли;
				
				Если Не ЗагружатьТолькоРеквизиты Тогда
					// Восстановление реквизитов формы
					Если ЭлементСтруктуры.Ключ = "ВыводитьЗаголовок" Тогда
						ФормаОтчета.ВыводитьЗаголовок = ЭлементСтруктуры.Значение;
					ИначеЕсли ЭлементСтруктуры.Ключ = "ВыводитьПодвал" Тогда
						ФормаОтчета.ВыводитьПодвал = ЭлементСтруктуры.Значение;
					ИначеЕсли ЭлементСтруктуры.Ключ = "МакетОформления" Тогда
						
						Если Не БюджетныйНаСервере.ЭтоИнтерфейсТакси() Или Не ПустаяСтрока(ЭлементСтруктуры.Значение) И ФормаОтчета.Элементы.МакетОформления.СписокВыбора.НайтиПоЗначению(ЭлементСтруктуры.Значение) <> Неопределено Тогда
							ФормаОтчета.МакетОформления = ЭлементСтруктуры.Значение;
						Иначе
							ФормаОтчета.МакетОформления = "МакетКрасивый";        
						КонецЕсли;
						
						СтандартныеОтчетыКлиентСервер.УстановитьПараметрВывода(
						ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, 
						"МакетОформления", ФормаОтчета.МакетОформления);
					ИначеЕсли ЭлементСтруктуры.Ключ = "СкрыватьНастройкиПриФормированииОтчета" Тогда
						ФормаОтчета.СкрыватьНастройкиПриФормированииОтчета = ЭлементСтруктуры.Значение;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если Не ЗагружатьТолькоРеквизиты Тогда
			ТекущиеНастройки = ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки;
			
			// Установка пользовательских настроек
			ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "Отбор";
			ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "Порядок";
			ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
			
			// Перенос пользовательских настроек в основные
			ФормаОтчета.Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(Настройки);
			ФормаОтчета.Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(ФормаОтчета.Отчет.КомпоновщикНастроек.ПолучитьНастройки());
			
			// Очистка пользовательских настроек
			ТекущиеНастройки = ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки;
			ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
			ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
			ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПараметрыРасшифровкиОтчета(Адрес, ИдентификаторОбъекта, Расшифровка, ПараметрыРасшифровки) Экспорт
	
	ДанныеОбъекта = ПолучитьИзВременногоХранилища(Адрес.Адрес);
	
	ДанныеОбъекта.Объект = ДанныеФормыВЗначение(Адрес.Объект, Тип("ОтчетОбъект." + ИдентификаторОбъекта));
	//ДанныеОбъекта.Объект.КомпоновщикНастроек.ПередКомпоновкойМакета(ПолучитьИзВременногоХранилища(Адрес.АдресСКД));
	//ДанныеОбъекта.ДанныеРасшифровки.Настройки = ДанныеОбъекта.Объект.КомпоновщикНастроек.ПолучитьНастройки();
	//Если ТипЗнч(ДанныеОбъекта.Объект) = Тип("Структура") Тогда
	ДанныеОбъекта.Объект.ПередКомпоновкойМакета(ПолучитьИзВременногоХранилища(Адрес.АдресСКД), ДанныеОбъекта.Объект);
	//Иначе	
	//ДанныеОбъекта.Объект.ПередКомпоновкойМакета(ПолучитьИзВременногоХранилища(Адрес.АдресСКД));
	//КонецЕсли; 
	
	
	
	ОбъектОтчет       = ДанныеОбъекта.Объект;
	ДанныеРасшифровки = ДанныеОбъекта.ДанныеРасшифровки;
	СписокПунктовМеню = ПараметрыРасшифровки.СписокПунктовМеню;
	
	МассивПолей = ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки, , Истина);
	
	
	НастройкиРасшифровки = Новый Структура;
	Если СписокПунктовМеню <> Неопределено Тогда
		Для Каждого ПунктМеню Из СписокПунктовМеню Цикл
			Если ТипЗнч(ПунктМеню.Значение) = Тип("Строка") Тогда
				НастройкиРасшифровки.Вставить(ПунктМеню.Значение, ПолучитьНастройкиДляРасшифровки(ПунктМеню.Значение, ИдентификаторОбъекта, МассивПолей, ОбъектОтчет));
			КонецЕсли;
		КонецЦикла;
		
		ДанныеОбъекта.Вставить("НастройкиРасшифровки", НастройкиРасшифровки);
		//Адрес = ПоместитьВоВременноеХранилище(ДанныеОбъекта, Адрес);
		
		//ПараметрыРасшифровки.Вставить("СписокПунктовМеню", СписокПунктовМеню);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ДанныеОбъекта, Адрес.Адрес);
	
	
	Возврат ПараметрыРасшифровки;
	
КонецФункции

Функция ПолучитьПараметрыРасшифровкиОтчетаДляМеню(Адрес, ИдентификаторОбъекта, Расшифровка) Экспорт
	
	ПараметрыРасшифровки = Новый Структура;
	ДанныеОбъекта = ПолучитьИзВременногоХранилища(Адрес.Адрес);
	//
	//ДанныеОбъекта.Объект = ДанныеФормыВЗначение(Адрес.Объект, Тип("ОбъектОтчет." + ИдентификаторОбъекта));
	//ДанныеОбъекта.Объект.ПередКомпоновкойМакета(ПолучитьИзВременногоХранилища(Адрес.АдресСКД));
	
	//НастройкиДляКомпоновкиМакета = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	//МакетОформленияОбъект = неопределено;
	//МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанныхОбъект, НастройкиДляКомпоновкиМакета, ДанныеОбъекта.ДанныеРасшифровки, МакетОформленияОбъект);
	
	
	//ДанныеОбъекта.ДанныеРасшифровки.Настройки = ДанныеОбъекта.Объект.КомпоновщикНастроек.ПолучитьНастройки();
	//ОбновитьДанныеРасшифровкиНаСервере(ПолучитьИзВременногоХранилища(Адрес.АдресСКД),Адрес.Адрес,Адрес.Объект, ИдентификаторОбъекта);
	
	
	
	
	ОбъектОтчет       = Неопределено;
	ДанныеРасшифровки = ДанныеОбъекта.ДанныеРасшифровки;
	
	
	ПараметрыРасшифровки = Новый Структура;
	//ДанныеОбъекта = ПолучитьИзВременногоХранилища(Адрес);
	//
	//ОбъектОтчет       = ДанныеОбъекта.Объект;
	//ДанныеРасшифровки = ДанныеОбъекта.ДанныеРасшифровки;
	
	Если ИдентификаторОбъекта = "сабАнализСубконто"
		Или ИдентификаторОбъекта = "сабАнализСчета"
		Или ИдентификаторОбъекта = "сабОборотноСальдоваяВедомость"
		Или ИдентификаторОбъекта = "сабОборотноСальдоваяВедомостьПоСчету"
		Или ИдентификаторОбъекта = "ОборотыМеждуСубконто"
		Или ИдентификаторОбъекта = "ОборотыСчета"
		Или ИдентификаторОбъекта = "СводныеПроводки" 
		Или ИдентификаторОбъекта = "КЗ_ОборотноСальдоваяВедомость"
		Или ИдентификаторОбъекта = "КЗ_ОборотноСальдоваяВедомостьПоСчету"
		Или ИдентификаторОбъекта = "Д_ОборотноСальдоваяВедомостьПоСчету"
		Или ИдентификаторОбъекта = "КЗ_АнализСчета"
		Или ИдентификаторОбъекта = "Д_ОборотноСальдоваяВедомость" Тогда
		ПараметрыРасшифровки.Вставить("ОткрытьЗначение", Ложь);
		
		МассивПолей = ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки, , Истина);
		
		ЕстьПоказатель  = Ложь;
		ЕстьКорЗначение = Ложь;
		ЕстьСчет        = Истина;
		ПервыйЭлемент   = Неопределено;
		Счет            = Неопределено;
		КорСчет         = Неопределено;
		Период          = Неопределено;
		Для Каждого Элемент Из МассивПолей Цикл
			Если ТипЗнч(Элемент) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
				Если ПервыйЭлемент = Неопределено И Элемент.Поле <> "Показатель" Тогда 
					ПервыйЭлемент = Элемент;
				КонецЕсли;
				Если Элемент.Поле = "Показатель" Тогда
					ЕстьПоказатель = Истина;
				КонецЕсли;
				Если Найти(Элемент.Поле, "Кор") = 1 Тогда
					ЕстьКорЗначение = Истина;
				КонецЕсли;
				Если Элемент.Поле = "КорСчет" Тогда
					КорСчет = Элемент.Значение;
				КонецЕсли;
				Если Элемент.Поле = "Счет" Тогда
					Счет = Элемент.Значение;
				КонецЕсли;
				Если Элемент.Поле = "Период" Тогда
					Период = Элемент.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ФормироватьОСВПоСчету            = Ложь;
		ФормироватьАнализСчета           = Ложь;
		ФормироватьОборотыСчетаПоМесяцам = Ложь;
		ФормироватьОборотыСчетаПоДням    = Ложь;
		ФормироватьКарточкуСчета         = Ложь;
		ФормироватьКарточкуСубконто      = Ложь;
		ФормироватьОтчетПоПроводкам      = Ложь;
		ФормироватьОтчетПоРегистру	     = Ложь;
		
		ПредставлениеДляОСВПоСчету            = НСтр("ru = 'ОСВ по счету %Счет%'");
		ПредставлениеДляКарточкиСчета         = НСтр("ru = 'Карточка счета %Счет%'");
		ПредставлениеДляАнализаСчета          = НСтр("ru = 'Анализ счета %Счет%'");
		ПредставлениеДляОборотыСчетаПоМесяцам = НСтр("ru = 'Обороты счета %Счет% по месяцам'");
		ПредставлениеДляОборотыСчетаПоДням    = НСтр("ru = 'Обороты счета %Счет% по дням'");
		ПредставлениеДляКарточкиСубконто      = НСтр("ru = 'Карточка субконто'");
		ПредставлениеДляОтчетаПоПроводкам     = НСтр("ru = 'Отчет по проводкам'");
		ПредставлениеОткрытьЗначение          = НСтр("ru = 'Открыть ""%Значение%""'");
		ПредставлениеДляОтчетаПоРегистру      = НСтр("ru = 'Записи регистра по счету %Счет%'");
		
		ПредставлениеДляОСВПоСчету            = СтрЗаменить(ПредставлениеДляОСВПоСчету           , "%Счет%", Счет);
		ПредставлениеДляКарточкиСчета         = СтрЗаменить(ПредставлениеДляКарточкиСчета        , "%Счет%", Счет);
		ПредставлениеДляАнализаСчета          = СтрЗаменить(ПредставлениеДляАнализаСчета         , "%Счет%", Счет);
		ПредставлениеДляОборотыСчетаПоМесяцам = СтрЗаменить(ПредставлениеДляОборотыСчетаПоМесяцам, "%Счет%", Счет);
		ПредставлениеДляОборотыСчетаПоДням    = СтрЗаменить(ПредставлениеДляОборотыСчетаПоДням   , "%Счет%", Счет);
		ПредставлениеДляОтчетаПоРегистру      = СтрЗаменить(ПредставлениеДляОтчетаПоРегистру     , "%Счет%", Счет);
		
		УстановитьВсеПоказатели = Ложь;
		СписокПунктовМеню = Новый СписокЗначений;
		Если ПервыйЭлемент <> Неопределено Тогда
			Если ИдентификаторОбъекта = "сабОборотноСальдоваяВедомость" Тогда
				Если Не ЕстьПоказатель И ЗначениеЗаполнено(ПервыйЭлемент.Значение)  И Не СтандартныеОтчетыКлиентСервер.ПростойТип(ПервыйЭлемент.Значение) Тогда
					Представление = СтрЗаменить(ПредставлениеОткрытьЗначение, "%Значение%", ПервыйЭлемент.Значение);
					СписокПунктовМеню.Добавить(ПервыйЭлемент.Значение, Представление);
				КонецЕсли;
				СписокПунктовМеню.Добавить("сабОборотноСальдоваяВедомостьПоСчету", ПредставлениеДляОСВПоСчету);
				СписокПунктовМеню.Добавить("сабКарточкаСчета"                    , ПредставлениеДляКарточкиСчета);
				СписокПунктовМеню.Добавить("сабАнализСчета"                      , ПредставлениеДляАнализаСчета);
				СписокПунктовМеню.Добавить("сабОтчетПоУчетномуРегистру"       , ПредставлениеДляОтчетаПоРегистру);
				//СписокПунктовМеню.Добавить("ОборотыСчетаПоМесяцам"            , ПредставлениеДляОборотыСчетаПоМесяцам);
				//СписокПунктовМеню.Добавить("ОборотыСчетаПоДням"               , ПредставлениеДляОборотыСчетаПоДням);
				
				УстановитьВсеПоказатели = Истина;
			ИначеЕсли
				ИдентификаторОбъекта = "КЗ_ОборотноСальдоваяВедомость" Тогда
				Если Не ЕстьПоказатель И ЗначениеЗаполнено(ПервыйЭлемент.Значение)  И Не СтандартныеОтчетыКлиентСервер.ПростойТип(ПервыйЭлемент.Значение) Тогда
					Представление = СтрЗаменить(ПредставлениеОткрытьЗначение, "%Значение%", ПервыйЭлемент.Значение);
					СписокПунктовМеню.Добавить(ПервыйЭлемент.Значение, Представление);
				КонецЕсли;
				СписокПунктовМеню.Добавить("КЗ_ОборотноСальдоваяВедомостьПоСчету", ПредставлениеДляОСВПоСчету);
				СписокПунктовМеню.Добавить("КЗ_КарточкаСчета"                    , ПредставлениеДляКарточкиСчета);
				СписокПунктовМеню.Добавить("КЗ_АнализСчета"                      , ПредставлениеДляАнализаСчета);
				//СписокПунктовМеню.Добавить("ОборотыСчетаПоМесяцам"            , ПредставлениеДляОборотыСчетаПоМесяцам);
				//СписокПунктовМеню.Добавить("ОборотыСчетаПоДням"               , ПредставлениеДляОборотыСчетаПоДням);
				
				УстановитьВсеПоказатели = Истина;
			ИначеЕсли
				ИдентификаторОбъекта = "Д_ОборотноСальдоваяВедомость" Тогда
				Если Не ЕстьПоказатель И ЗначениеЗаполнено(ПервыйЭлемент.Значение)  И Не СтандартныеОтчетыКлиентСервер.ПростойТип(ПервыйЭлемент.Значение) Тогда
					Представление = СтрЗаменить(ПредставлениеОткрытьЗначение, "%Значение%", ПервыйЭлемент.Значение);
					СписокПунктовМеню.Добавить(ПервыйЭлемент.Значение, Представление);
				КонецЕсли;
				СписокПунктовМеню.Добавить("Д_ОборотноСальдоваяВедомостьПоСчету", ПредставлениеДляОСВПоСчету);
				СписокПунктовМеню.Добавить("Д_КарточкаСчета"                    , ПредставлениеДляКарточкиСчета);
				//СписокПунктовМеню.Добавить("Д_АнализСчета"                      , ПредставлениеДляАнализаСчета);
				//СписокПунктовМеню.Добавить("ОборотыСчетаПоМесяцам"            , ПредставлениеДляОборотыСчетаПоМесяцам);
				//СписокПунктовМеню.Добавить("ОборотыСчетаПоДням"               , ПредставлениеДляОборотыСчетаПоДням);
				
				УстановитьВсеПоказатели = Истина;
				
			Иначе
				Если ЕстьПоказатель Тогда
					// Если расшифровывается показатель, то необходимо сразу формировать отчет
					Если ИдентификаторОбъекта = "сабАнализСубконто" Тогда
						Если Счет <> Неопределено Тогда 
							СписокПунктовМеню.Добавить("сабКарточкаСчета");
						Иначе
							СписокПунктовМеню.Добавить("КарточкаСубконто");	
						КонецЕсли;
					ИначеЕсли ИдентификаторОбъекта = "сабАнализСчета" Тогда
						Если ЕстьКорЗначение Тогда
							СписокПунктовМеню.Добавить("сабОтчетПоПроводкам");
						Иначе
							СписокПунктовМеню.Добавить("сабКарточкаСчета");		
						КонецЕсли;
					ИначеЕсли ИдентификаторОбъекта = "КЗ_АнализСчета" Тогда
						Если ЕстьКорЗначение Тогда
							СписокПунктовМеню.Добавить("КЗ_ОтчетПоПроводкам");
						Иначе
							СписокПунктовМеню.Добавить("КЗ_КарточкаСчета");		
						КонецЕсли;
						
					ИначеЕсли ИдентификаторОбъекта = "сабОборотноСальдоваяВедомостьПоСчету" Тогда
						СписокПунктовМеню.Добавить("сабКарточкаСчета", ПредставлениеДляКарточкиСчета);
						СписокПунктовМеню.Добавить("сабОтчетПоУчетномуРегистру", ПредставлениеДляОтчетаПоРегистру);
					ИначеЕсли ИдентификаторОбъекта = "КЗ_ОборотноСальдоваяВедомостьПоСчету" Тогда
						СписокПунктовМеню.Добавить("КЗ_КарточкаСчета", ПредставлениеДляКарточкиСчета);
					ИначеЕсли ИдентификаторОбъекта = "Д_ОборотноСальдоваяВедомостьПоСчету" Тогда
						СписокПунктовМеню.Добавить("Д_КарточкаСчета", ПредставлениеДляКарточкиСчета);
					ИначеЕсли ИдентификаторОбъекта = "ОборотыМеждуСубконто" Тогда
						СписокПунктовМеню.Добавить("сабОтчетПоПроводкам", ПредставлениеДляОтчетаПоПроводкам);
					ИначеЕсли ИдентификаторОбъекта = "ОборотыСчета" Тогда				
						СписокПунктовМеню.Добавить("сабОтчетПоПроводкам", ПредставлениеДляОтчетаПоПроводкам);
					ИначеЕсли ИдентификаторОбъекта = "СводныеПроводки" Тогда
						СписокПунктовМеню.Добавить("сабОтчетПоПроводкам", ПредставлениеДляОтчетаПоПроводкам);
					КонецЕсли;
				Иначе
					Если ИдентификаторОбъекта = "СводныеПроводки" Тогда
						СписокПунктовМеню.Добавить("сабОтчетПоПроводкам", ПредставлениеДляОтчетаПоПроводкам);
						УстановитьВсеПоказатели = Истина;
					Иначе 
						Если ЗначениеЗаполнено(ПервыйЭлемент.Значение) И Не СтандартныеОтчетыКлиентСервер.ПростойТип(ПервыйЭлемент.Значение) Тогда
							Представление = СтрЗаменить(ПредставлениеОткрытьЗначение, "%Значение%", ПервыйЭлемент.Значение);
							СписокПунктовМеню.Добавить(ПервыйЭлемент.Значение, Представление);
						КонецЕсли;
						Если ИдентификаторОбъекта = "сабАнализСубконто" Тогда
							Если Счет <> Неопределено Тогда 
								СписокПунктовМеню.Добавить("сабКарточкаСчета", ПредставлениеДляКарточкиСчета);
							Иначе
								СписокПунктовМеню.Добавить("КарточкаСубконто", ПредставлениеДляКарточкиСубконто);
							КонецЕсли;	
						ИначеЕсли ИдентификаторОбъекта = "сабАнализСчета" Тогда
							Если ЕстьКорЗначение Тогда 
								СписокПунктовМеню.Добавить("сабОтчетПоПроводкам", ПредставлениеДляОтчетаПоПроводкам);
							Иначе
								СписокПунктовМеню.Добавить("сабКарточкаСчета", ПредставлениеДляКарточкиСчета);
							КонецЕсли;
						ИначеЕсли ИдентификаторОбъекта = "КЗ_АнализСчета" Тогда
							Если ЕстьКорЗначение Тогда 
								СписокПунктовМеню.Добавить("КЗ_ОтчетПоПроводкам", ПредставлениеДляОтчетаПоПроводкам);
							Иначе
								СписокПунктовМеню.Добавить("КЗ_КарточкаСчета", ПредставлениеДляКарточкиСчета);
							КонецЕсли;
							
						ИначеЕсли ИдентификаторОбъекта = "сабОборотноСальдоваяВедомостьПоСчету" Тогда
							СписокПунктовМеню.Добавить("сабКарточкаСчета", ПредставлениеДляКарточкиСчета);
							СписокПунктовМеню.Добавить("сабОтчетПоУчетномуРегистру", ПредставлениеДляОтчетаПоРегистру);
						ИначеЕсли ИдентификаторОбъекта = "КЗ_ОборотноСальдоваяВедомостьПоСчету" Тогда
							СписокПунктовМеню.Добавить("КЗ_КарточкаСчета", ПредставлениеДляКарточкиСчета);
						ИначеЕсли ИдентификаторОбъекта = "Д_ОборотноСальдоваяВедомостьПоСчету" Тогда
							СписокПунктовМеню.Добавить("Д_КарточкаСчета", ПредставлениеДляКарточкиСчета);	
						ИначеЕсли ИдентификаторОбъекта = "ОборотыМеждуСубконто" Тогда
							СписокПунктовМеню.Добавить("сабОтчетПоПроводкам", ПредставлениеДляОтчетаПоПроводкам);
							//ИначеЕсли ИдентификаторОбъекта = "ОборотыСчета" Тогда				
							СписокПунктовМеню.Добавить("сабОтчетПоПроводкам", ПредставлениеДляОтчетаПоПроводкам);
						КонецЕсли; 
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПараметрыРасшифровки.Вставить("ОткрытьЗначение", Истина);
		МассивРасшифровки = ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля();
		ПараметрыРасшифровки.Вставить("Значение"       , МассивРасшифровки[0].Значение);
		Если МассивРасшифровки.Количество() > 1 Тогда //если еще и номер строки передается. ????
			ПараметрыРасшифровки.Вставить("НомерСтроки"       , МассивРасшифровки[1].Значение);
		КонецЕсли;
	КонецЕсли;
	
	НастройкиРасшифровки = Новый Структура;
	Если СписокПунктовМеню <> Неопределено Тогда
		//Для Каждого ПунктМеню Из СписокПунктовМеню Цикл
		//	Если ТипЗнч(ПунктМеню.Значение) = Тип("Строка") Тогда
		//		НастройкиРасшифровки.Вставить(ПунктМеню.Значение, ПолучитьНастройкиДляРасшифровки(ПунктМеню.Значение, ИдентификаторОбъекта, МассивПолей, ОбъектОтчет));
		//	КонецЕсли;
		//КонецЦикла;
		
		//ДанныеОбъекта.Вставить("НастройкиРасшифровки", НастройкиРасшифровки);
		//Адрес = ПоместитьВоВременноеХранилище(ДанныеОбъекта, Адрес);
		
		ПараметрыРасшифровки.Вставить("СписокПунктовМеню", СписокПунктовМеню);
	КонецЕсли;
	
	//ПоместитьВоВременноеХранилище(ДанныеОбъекта, Адрес.Адрес);
	
	
	Возврат ПараметрыРасшифровки;
	
КонецФункции

Функция ПолучитьНастройкиДляРасшифровки(ИДРасшифровки, ИдентификаторОбъекта, МассивПолей, ОбъектОтчет)
	
	ЕстьПоказатель  = Ложь;
	ЕстьКорЗначение = Ложь;
	ЕстьСчет        = Истина;
	ПервыйЭлемент   = Неопределено;
	Счет            = Неопределено;
	КорСчет         = Неопределено;
	Период          = Неопределено;
	Для Каждого Элемент Из МассивПолей Цикл
		Если ТипЗнч(Элемент) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
			Если ПервыйЭлемент = Неопределено И Элемент.Поле <> "Показатель" Тогда 
				ПервыйЭлемент = Элемент;
			КонецЕсли;
			Если Элемент.Поле = "Показатель" Тогда
				ЕстьПоказатель = Истина;
			КонецЕсли;
			Если Найти(Элемент.Поле, "Кор") = 1 Тогда
				ЕстьКорЗначение = Истина;
			КонецЕсли;
			Если Элемент.Поле = "КорСчет" Тогда
				КорСчет = Элемент.Значение;
			КонецЕсли;
			Если Элемент.Поле = "Счет" Тогда
				Счет = Элемент.Значение;
			КонецЕсли;
			Если Элемент.Поле = "Период" Тогда
				Период = Элемент.Значение;
			КонецЕсли;
			Если Элемент.Поле = "БухТипРесурса" Тогда
				БухТипРесурса = Элемент.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДобавитьОтборПоВидСубконто    = Истина;
	ДобавитьОтборПоВидКорСубконто = Истина;
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	
	ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";
	
	Если ИДРасшифровки = "КарточкаСубконто" Тогда
		ДополнительныеСвойства.Вставить("СписокВидовСубконто", ОбъектОтчет.СписокВидовСубконто.Скопировать());
	ИначеЕсли ИДРасшифровки = "ОборотыСчетаПоДням" Тогда
		ДополнительныеСвойства.Вставить("Периодичность", 6);
	ИначеЕсли ИДРасшифровки = "ОборотыСчетаПоМесяцам" Тогда
		ДополнительныеСвойства.Вставить("Периодичность", 9);
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
	
	Если ИДРасшифровки = "КарточкаСубконто"
		Или ИДРасшифровки = "сабОтчетПоПроводкам" Или ИДРасшифровки = "КЗ_ОтчетПоПроводкам" Тогда
		ЕстьСчет = Ложь;
	Иначе
		ДополнительныеСвойства.Вставить("Счет", Счет);
	КонецЕсли;
	
	СписокПолейОтборов = Новый Массив;
	Для каждого Отбор из МассивПолей Цикл
		Если ТипЗнч(Отбор) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") тогда
			Если Отбор.Значение = NULL тогда
				Продолжить;
			КонецЕсли;
			Если Отбор.Поле = "Счет" И (ИдентификаторОбъекта = "сабАнализСчета" Или ИдентификаторОбъекта = "ОборотыСчета") Тогда
				ЗначениеСчет = ?(Счет.Уровень() > ОбъектОтчет.Счет.Уровень(), Счет, ОбъектОтчет.Счет);
				// 03.08.15 в расшифровку передаем счет и кор счет, а не счет дт и счет кт
				//Если ЗначениеЗаполнено(БухТипРесурса) Тогда
				//	СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Счет" + БухТипРесурса, ЗначениеСчет, ВидСравненияКомпоновкиДанных.ВИерархии);
				//Иначе	
				СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле, ЗначениеСчет, ВидСравненияКомпоновкиДанных.ВИерархии);
				//КонецЕсли;
			ИначеЕсли (Отбор.Поле = "Счет" Или Отбор.Поле = "КорСчет") И Не ЕстьСчет Тогда
				// 03.08.15 в расшифровку передаем счет и кор счет, а не счет дт и счет кт
				//Если ЗначениеЗаполнено(БухТипРесурса) Тогда
				//	СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Счет" + ?(БухТипРесурса = "Дт", "Кт", "Дт"), Отбор.Значение, ВидСравненияКомпоновкиДанных.ВИерархии);
				//Иначе
				СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле, Отбор.Значение, ВидСравненияКомпоновкиДанных.ВИерархии);
				//КонецЕсли;
			ИначеЕсли Отбор.Поле = "Счет" И ЕстьСчет Тогда	
			ИначеЕсли Найти(Отбор.Поле, "Субконто") = 1 тогда
				Если ИдентификаторОбъекта = "ОборотыМеждуСубконто" Тогда
					Если Счет <> Неопределено Тогда 
						ИндексСубконто = Сред(Отбор.Поле, 9, 1); 
						ПозицияСубконто = Найти(Отбор.Поле, "Субконто");
						ИндексСубконтоОтчет = Счет.ВидыСубконто.Найти(ОбъектОтчет.СписокВидовСубконто[Число(ИндексСубконто) - 1].Значение, "ВидСубконто").НомерСтроки;
						СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Субконто" + ИндексСубконтоОтчет, Отбор.Значение, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));
					Иначе
						СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле, Отбор.Значение, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));
						ИндексСубконто = Число(Сред(Отбор.Поле, 9));
						СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Вид" + Отбор.Поле, ОбъектОтчет.СписокВидовСубконто[ИндексСубконто - 1].Значение);
					КонецЕсли;
					ДобавитьОтборПоВидСубконто = Ложь;
				ИначеЕсли ИдентификаторОбъекта = "сабАнализСубконто" И ИДРасшифровки = "сабКарточкаСчета" Тогда
					ИндексСубконто = Сред(Отбор.Поле, 9, 1); 
					ПозицияСубконто = Найти(Отбор.Поле, "Субконто");
					НайденнаяСтрока = Счет.ВидыСубконто.Найти(ОбъектОтчет.СписокВидовСубконто[Число(ИндексСубконто) - 1].Значение, "ВидСубконто");
					Если НайденнаяСтрока <> Неопределено Тогда
						ИндексСубконтоОтчет = НайденнаяСтрока.НомерСтроки;
						СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, СтрЗаменить(Строка(Отбор.Поле), "Субконто" + ИндексСубконто, "Субконто" + ИндексСубконтоОтчет), Отбор.Значение);
					КонецЕсли;
				Иначе
					ПозицияСубконто = Найти(Отбор.Поле, "Субконто");
					СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Сред(Отбор.Поле, ПозицияСубконто, СтрДлина(Отбор.Поле) - ПозицияСубконто + 1), Отбор.Значение);
				КонецЕсли;
				СписокПолейОтборов.Добавить(Отбор.Поле);
			ИначеЕсли Найти(Отбор.Поле, "КорСубконто") = 1 тогда
				
				Если ИдентификаторОбъекта = "ОборотыМеждуСубконто" Тогда
					
					Если КорСчет <> Неопределено Тогда
						ИндексКорСубконто = Сред(Отбор.Поле, 12, 1); 
						ПозицияКорСубконто = Найти(Отбор.Поле, "КорСубконто");
						ИндексКорСубконтоОтчет = КорСчет.ВидыСубконто.Найти(ОбъектОтчет.СписокВидовКорСубконто[Число(ИндексКорСубконто) - 1].Значение, "ВидСубконто").НомерСтроки;
						СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "КорСубконто" + ИндексКорСубконтоОтчет, Отбор.Значение, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));	
					Иначе
						СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле, Отбор.Значение, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));
						ИндексСубконто = Число(Сред(Отбор.Поле, 12));
						СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Вид" + Отбор.Поле, ОбъектОтчет.СписокВидовКорСубконто[ИндексСубконто - 1].Значение);
					КонецЕсли;
					
					ДобавитьОтборПоВидКорСубконто = Ложь;
				ИначеЕсли ИдентификаторОбъекта = "сабАнализСчета" Тогда // отбор по кор субконто для расшифровки отчета "Анализ счета"
					СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле, Отбор.Значение, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));
				КонецЕсли;
				
			ИначеЕсли Отбор.Поле = "Подразделение" тогда
				Если ЗначениеЗаполнено(Отбор.Значение) Тогда
					//ДополнительныеСвойства.Вставить("Подразделение", Отбор.Значение);            //Закомментировано для повторного формирования КарточкиСчета с сохранением отбора по подразделению.
					СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле, Отбор.Значение);
				Иначе
					СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле, Отбор.Значение);
				КонецЕсли;
			ИначеЕсли Отбор.Поле = "Организация" Тогда
				ДополнительныеСвойства.Вставить("Организация", Отбор.Значение);
			ИначеЕсли Отбор.Поле = "СценарийПлана" Тогда
				ДополнительныеСвойства.Вставить("СценарийПлана", Отбор.Значение);
			ИначеЕсли Отбор.Поле = "Показатель" Тогда 
				Показатель = Отбор.Значение;
			ИначеЕсли Отбор.Поле = "Период" Или Отбор.Поле = "Регистратор" Или Отбор.Поле = "БухТипРесурса" Тогда 
			Иначе
				Если Отбор.Иерархия Тогда
					СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле, Отбор.Значение, ВидСравненияКомпоновкиДанных.ВИерархии);
				Иначе
					СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле, Отбор.Значение);
				КонецЕсли;
			КонецЕсли;	
		ИначеЕсли ТипЗнч(Отбор) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если Отбор.Представление = "###ОтборПоОрганизацииСОП###" Тогда
				Для Каждого ЭлементОтбора Из Отбор.Элементы Цикл
					Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
						ДополнительныеСвойства.Вставить("Организация"                      , Отбор.ПравоеЗначение);
						ДополнительныеСвойства.Вставить("ВключатьОбособленныеПодразделения", Истина);
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли Отбор.Представление = "###Контроль###" Тогда
			КонецЕсли;
		ИначеЕсли ТипЗнч(Отбор) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если СписокПолейОтборов.Найти(Строка(Отбор.ЛевоеЗначение)) = Неопределено Тогда
				Если Найти(Отбор.ЛевоеЗначение, "Субконто") = 1 И ИдентификаторОбъекта = "сабАнализСубконто" И ИДРасшифровки = "сабКарточкаСчета" Тогда
					ИндексСубконто = Сред(Отбор.ЛевоеЗначение, 9, 1); 
					ПозицияСубконто = Найти(Отбор.ЛевоеЗначение, "Субконто");
					НайденнаяСтрока = Счет.ВидыСубконто.Найти(ОбъектОтчет.СписокВидовСубконто[Число(ИндексСубконто) - 1].Значение, "ВидСубконто");
					Если НайденнаяСтрока <> Неопределено Тогда
						ИндексСубконтоОтчет = НайденнаяСтрока.НомерСтроки;
						СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, СтрЗаменить(Строка(Отбор.ЛевоеЗначение), "Субконто" + ИндексСубконто, "Субконто" + ИндексСубконтоОтчет), Отбор.ПравоеЗначение, Отбор.ВидСравнения);
					КонецЕсли;
				ИначеЕсли Отбор.Представление = "###ОтборПоОрганизации###" Тогда
					ДополнительныеСвойства.Вставить("Организация"                      , Отбор.ПравоеЗначение);
					ДополнительныеСвойства.Вставить("ВключатьОбособленныеПодразделения", Ложь);
				ИначеЕсли Отбор.Представление = "###ОтборПоСценариюПлана###" Тогда
					ДополнительныеСвойства.Вставить("СценарийПлана"                      , Отбор.ПравоеЗначение);
				ИначеЕсли Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") 
					И Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
					ДополнительныеСвойства.Вставить("Подразделение", Отбор.ПравоеЗначение);
				Иначе
					СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.ЛевоеЗначение, Отбор.ПравоеЗначение, Отбор.ВидСравнения);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ИдентификаторОбъекта = "ОборотыМеждуСубконто" Тогда
		Если ДобавитьОтборПоВидСубконто Тогда
			Индекс = 1;
			Для Каждого ВидСубконто Из ОбъектОтчет.СписокВидовСубконто Цикл
				Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
					СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "ВидСубконто" + Индекс, ВидСубконто.Значение);
					Индекс = Индекс + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ДобавитьОтборПоВидКорСубконто Тогда
			Индекс = 1;
			Для Каждого ВидСубконто Из ОбъектОтчет.СписокВидовКорСубконто Цикл
				Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
					СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "ВидКорСубконто" + Индекс, ВидСубконто.Значение);
					Индекс = Индекс + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если Период <> Неопределено Тогда
		ТекущийПериод = ?(ТипЗнч(Период) = Тип("СтандартныйПериод"), Период, Неопределено);
		
		Если ТипЗнч(Период) = Тип("Дата") Тогда
			ДополнительныеСвойства.Вставить("НачалоПериода", Период);
		Иначе
			ДополнительныеСвойства.Вставить("НачалоПериода", ОбъектОтчет.НачалоПериода);
		КонецЕсли;
		
		Попытка
			
			Если ОбъектОтчет.Периодичность = 0 Тогда
				ВидПериода = Перечисления.ДоступныеПериодыОтчета.ПроизвольныйПериод
			ИначеЕсли ОбъектОтчет.Периодичность = 6 Тогда
				ВидПериода = Перечисления.ДоступныеПериодыОтчета.День
			ИначеЕсли ОбъектОтчет.Периодичность = 7 Тогда
				ВидПериода = Перечисления.ДоступныеПериодыОтчета.Неделя
			ИначеЕсли ОбъектОтчет.Периодичность = 8 Тогда
				ВидПериода = Перечисления.ДоступныеПериодыОтчета.Декада
			ИначеЕсли ОбъектОтчет.Периодичность = 9 Тогда
				ВидПериода = Перечисления.ДоступныеПериодыОтчета.Месяц
			ИначеЕсли ОбъектОтчет.Периодичность = 10 Тогда
				ВидПериода = Перечисления.ДоступныеПериодыОтчета.Квартал
			ИначеЕсли ОбъектОтчет.Периодичность = 11 Тогда
				ВидПериода = Перечисления.ДоступныеПериодыОтчета.Полугодие
			ИначеЕсли ОбъектОтчет.Периодичность = 12 Тогда
				ВидПериода = Перечисления.ДоступныеПериодыОтчета.Год	
			КонецЕсли;
			
		Исключение
			ВидПериода = Перечисления.ДоступныеПериодыОтчета.ПроизвольныйПериод
		КонецПопытки;
		
		ДатаКонцаПериода = СтандартныеОтчетыКлиентСервер.КонецПериодаОтчета(ВидПериода, ДополнительныеСвойства.НачалоПериода, Перечисления);
		ДополнительныеСвойства.Вставить("КонецПериода", ДатаКонцаПериода);//СтандартныеОтчетыКлиентСервер.КонецПериода(Период, ОбъектОтчет.Периодичность));
		
		Попытка 
			
			Если Не ЗначениеЗаполнено(ТекущийПериод) Тогда
				ТекущийПериод = Новый СтандартныйПериод;
				ТекущийПериод.ДатаНачала = ДополнительныеСвойства.НачалоПериода;
				ТекущийПериод.ДатаОкончания = ДополнительныеСвойства.КонецПериода;
			КонецЕсли;
			
			ДополнительныеСвойства.Вставить("Период" , ТекущийПериод);
			
		Исключение
			ДополнительныеСвойства.Вставить("Период" , ОбъектОтчет.Период);
		КонецПопытки;
		
	Иначе
		ДополнительныеСвойства.Вставить("НачалоПериода", ОбъектОтчет.НачалоПериода);
		ДополнительныеСвойства.Вставить("КонецПериода" , ОбъектОтчет.КонецПериода);
		ДополнительныеСвойства.Вставить("Период" , ОбъектОтчет.Период);
	КонецЕсли;
	
	УстановитьВсеПоказатели = Истина;
	// Настройка показателей
	//Для Каждого ЭлементСтруктуры Из ФормаРасшифровка.ДанныеОтчета.ПоказателиОтчета Цикл
	//	ЭлементСтруктуры.Значение.Значение = Ложь;
	//КонецЦикла;
	Если УстановитьВсеПоказатели Тогда
		Для Каждого ИмяПоказателя Из ОбъектОтчет.НаборПоказателей Цикл
			ДополнительныеСвойства.Вставить("Показатель" + ИмяПоказателя , ОбъектОтчет["Показатель" + ИмяПоказателя]);
		КонецЦикла;
	Иначе
		Если Показатель = "Контроль" Тогда
			ДополнительныеСвойства.Вставить("ПоказательБУ", ОбъектОтчет.ПоказательБУ);
			ДополнительныеСвойства.Вставить("ПоказательНУ", ОбъектОтчет.ПоказательНУ);
			ДополнительныеСвойства.Вставить("ПоказательПР", ОбъектОтчет.ПоказательПР);
			ДополнительныеСвойства.Вставить("ПоказательВР", ОбъектОтчет.ПоказательВР);
		Иначе
			ДополнительныеСвойства.Вставить("Показатель" + Показатель , Истина);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПользовательскиеНастройки;
	
КонецФункции

Функция ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки, ТекущийОтчет = Неопределено, ВключатьРесурсы = Ложь) Экспорт
	
	МассивПолейРасшифровки = Новый Массив;
	
	Если ТипЗнч(Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") 
		И ТипЗнч(Расшифровка) <> Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
		Возврат МассивПолейРасшифровки;
	КонецЕсли;
	
	Если ТекущийОтчет = Неопределено Тогда
		ТекущийОтчет = ДанныеРасшифровки;
	КонецЕсли;
	
	// Добавим поля родительских группировок
	ДобавитьРодителей(ДанныеРасшифровки.Элементы[Расшифровка], ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы);
	
	Количество = МассивПолейРасшифровки.Количество();
	Для Индекс = 1 По Количество Цикл
		ОбратныйИндекс = Количество - Индекс;
		Для ИндексВнутри = 0 По ОбратныйИндекс - 1 Цикл
			Если МассивПолейРасшифровки[ОбратныйИндекс].Поле = МассивПолейРасшифровки[ИндексВнутри].Поле Тогда
				МассивПолейРасшифровки.Удалить(ОбратныйИндекс);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Добавим отбор, установленный в отчете
	Для каждого ЭлементОтбора Из ТекущийОтчет.Настройки.Отбор.Элементы Цикл
		Если Не ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		МассивПолейРасшифровки.Добавить(ЭлементОтбора);
	КонецЦикла;
	
	Возврат МассивПолейРасшифровки;
	
КонецФункции

Функция ДобавитьРодителей(ЭлементРасшифровки, ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы = Ложь)  Экспорт
	
	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Для каждого Поле Из ЭлементРасшифровки.ПолучитьПоля() Цикл
			//ДоступноеПоле = ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(Новый ПолеКомпоновкиДанных(Поле.Поле), ТекущийОтчет);
			//Если ДоступноеПоле = Неопределено И НЕ Поле.Поле = "Счет" Тогда
			//	Продолжить;
			//КонецЕсли;
			//Если Не ВключатьРесурсы И ДоступноеПоле.Ресурс Тогда
			//	Продолжить;
			//КонецЕсли;
			МассивПолейРасшифровки.Добавить(Поле);
		КонецЦикла;
	КонецЕсли;
	Для каждого Родитель Из ЭлементРасшифровки.ПолучитьРодителей() Цикл
		ДобавитьРодителей(Родитель, ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы);
	КонецЦикла;
	
КонецФункции

Функция ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ПолеКомпоновкиДанных, ОбластьПоиска) Экспорт
	
	Если ТипЗнч(ПолеКомпоновкиДанных) = Тип("Строка") Тогда
		ПолеПоиска = Новый ПолеКомпоновкиДанных(ПолеКомпоновкиДанных);
	Иначе
		ПолеПоиска = ПолеКомпоновкиДанных;
	КонецЕсли;
	
	Если ТипЗнч(ОбластьПоиска) = Тип("КомпоновщикНастроекКомпоновкиДанных")
		Или ТипЗнч(ОбластьПоиска) = Тип("ДанныеРасшифровкиКомпоновкиДанных")
		Или ТипЗнч(ОбластьПоиска) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		Возврат ОбластьПоиска.Настройки.ДоступныеПоляВыбора.НайтиПоле(ПолеПоиска);
	Иначе
		Возврат ОбластьПоиска.НайтиПоле(ПолеПоиска);
	КонецЕсли;
	
КонецФункции

Процедура ВывестиОтчет(ОбъектОтчет, Результат, ДанныеРасшифровки, Схема = Неопределено, ВыводитьПолностью = Истина) Экспорт
	
	Отказ = Ложь;
	ДанныеРасшифровкиОбъект = Неопределено;
	ПараметрыИсполненияОтчета = Неопределено;
	
	// Изменение представления и наложения ограничения типа значения
	Если (ОбъектОтчет.ИмяОтчета = "сабОборотноСальдоваяВедомостьПоСчету" или ОбъектОтчет.ИмяОтчета = "Д_ОборотноСальдоваяВедомостьПоСчету") И ЗначениеЗаполнено(ОбъектОтчет.Счет) Тогда 
		КоличествоСубконто = УправленческийУчетПовтИсп.ПолучитьСвойстваСчета(ОбъектОтчет.Счет).КоличествоСубконто;
		ИмяПоляПрефикс = "Субконто";
		Для Индекс = 1 По КоличествоСубконто Цикл
			Поле = Схема.НаборыДанных.ОсновнойНаборДанных.Поля.Найти(ИмяПоляПрефикс + Индекс);
			Если Поле <> Неопределено Тогда
				ТипЗначения = ОбъектОтчет.Счет.ВидыСубконто[Индекс - 1].ВидСубконто.ТипЗначения;
				Поле.ТипЗначения = ТипЗначения;
				Поле.Заголовок   = ОбъектОтчет.Счет.ВидыСубконто[Индекс - 1].ВидСубконто.Наименование;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//перезаполение компоновщиканастроек
	Если ТипЗнч(ОбъектОтчет) = Тип("Структура") Тогда
		Объект = Отчеты[ОбъектОтчет.ИмяОтчета].Создать();
		ОбъектОтчет.КомпоновщикНастроек = Объект.КомпоновщикНастроек;
		//ОбъектОтчет.КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		ОбъектОтчет.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
		Если ОбъектОтчет.Свойство("КомпоновщикНастроекНастройки") Тогда
			ОбъектОтчет.КомпоновщикНастроек.ЗагрузитьНастройки(ОбъектОтчет.КомпоновщикНастроекНастройки);
		КонецЕсли; 
	Иначе
		Объект = ОбъектОтчет;		
	КонецЕсли;
	
	ОбъектОтчет.НачалоПериода = ОбъектОтчет.Период.ДатаНачала;
	ОбъектОтчет.КонецПериода  = ОбъектОтчет.Период.ДатаОкончания;
	
	Попытка
		ПараметрыИсполненияОтчета = Объект.ПолучитьПараметрыИсполненияОтчета();
	Исключение
	КонецПопытки;
	
	ИспользоватьПриВыводеЗаголовка             = Ложь;
	ИспользоватьПриВыводеПодвала               = Ложь;
	ИспользоватьПередКомпоновкойМакета         = Ложь;
	ИспользоватьПослеКомпоновкиМакета          = Ложь;
	ИспользоватьПередВыводомЭлементаРезультата = Ложь;
	ИспользоватьПослеВыводаРезультата          = Ложь;
	ИспользоватьДанныеРасшифровки              = Истина;
	
	
	Если ПараметрыИсполненияОтчета <> Неопределено Тогда
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПриВыводеЗаголовка") Тогда
			ИспользоватьПриВыводеЗаголовка = ПараметрыИсполненияОтчета.ИспользоватьПриВыводеЗаголовка;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПриВыводеПодвала") Тогда
			ИспользоватьПриВыводеПодвала = ПараметрыИсполненияОтчета.ИспользоватьПриВыводеПодвала;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПередКомпоновкойМакета") Тогда
			ИспользоватьПередКомпоновкойМакета = ПараметрыИсполненияОтчета.ИспользоватьПередКомпоновкойМакета;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПослеКомпоновкиМакета") Тогда
			ИспользоватьПослеКомпоновкиМакета = ПараметрыИсполненияОтчета.ИспользоватьПослеКомпоновкиМакета;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПередВыводомЭлементаРезультата") Тогда
			ИспользоватьПередВыводомЭлементаРезультата = ПараметрыИсполненияОтчета.ИспользоватьПередВыводомЭлементаРезультата;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПослеВыводаРезультата") Тогда
			ИспользоватьПослеВыводаРезультата = ПараметрыИсполненияОтчета.ИспользоватьПослеВыводаРезультата;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьДанныеРасшифровки") Тогда
			ИспользоватьДанныеРасшифровки = ПараметрыИсполненияОтчета.ИспользоватьДанныеРасшифровки;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Схема) = Тип("Строка") Тогда
		Если ЭтоАдресВременногоХранилища(Схема) Тогда
			СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(Схема);
		КонецЕсли;
	Иначе
		СхемаКомпоновкиДанных = Схема;
	КонецЕсли;
	
	//Если ТипЗнч(ОбъектОтчет) = Тип("Структура") Тогда
	//	Если ТипЗнч(ОбъектОтчет.КомпоновщикНастроек) = Тип("Строка") Тогда
	//		ТекущиеНастройки = ПолучитьИзВременногоХранилища(ОбъектОтчет.КомпоновщикНастроек);	
	//	Иначе	
	//		ТекущиеНастройки = ОбъектОтчет.КомпоновщикНастроек;	
	//	КонецЕсли;
	//	Для каждого ТекНастройка Из ОбъектОтчет.КомпоновщикНастроекПараметрыДанных Цикл
	//		НоваяСтрокаПараметровДанных = ОбъектОтчет.КомпоновщикНастроек.ПараметрыДанных.Элементы.Добавить();
	//		
	//	
	//	КонецЦикла; 
	//Иначе
	ТекущиеНастройки = ОбъектОтчет.КомпоновщикНастроек.Настройки;
	//КонецЕсли;
	
	
	ВыводитьЗаголовок = Истина;
	ВыводитьПодвал    = Истина;
	Если ТекущиеНастройки.ДополнительныеСвойства.Свойство("ВыводитьЗаголовок") Тогда
		ВыводитьЗаголовок = ТекущиеНастройки.ДополнительныеСвойства.ВыводитьЗаголовок;
	КонецЕсли;
	Если ТекущиеНастройки.ДополнительныеСвойства.Свойство("ВыводитьПодвал") Тогда
		ВыводитьПодвал = ТекущиеНастройки.ДополнительныеСвойства.ВыводитьПодвал;
	КонецЕсли;
	
	Результат.Очистить();
	
	Если ВыводитьЗаголовок Тогда
		Если ИспользоватьПриВыводеЗаголовка Тогда
			Объект.ПриВыводеЗаголовка(Результат);
		Иначе
			ВывестиЗаголовокОтчета(ОбъектОтчет, Результат);
		КонецЕсли;
	КонецЕсли;
	
	
	Если ВыводитьПолностью Тогда
		Попытка
			ВнешниеНаборыДанных = Объект.ПолучитьВнешниеНаборыДанных();
		Исключение
		КонецПопытки;
		
		//Если ТипЗнч(ОбъектОтчет) = Тип("Структура") Тогда
		//	Объект.ПередКомпоновкойМакета(СхемаКомпоновкиДанных, ОбъектОтчет);
		//	НастройкиДляКомпоновкиМакета = ОбъектОтчет.КомпоновщикНастроек;
		//Иначе	
		Если ИспользоватьПередКомпоновкойМакета Тогда
			//Если ТипЗнч(ОбъектОтчет) = Тип("Структура") Тогда
			Объект.ПередКомпоновкойМакета(СхемаКомпоновкиДанных, ОбъектОтчет);
			//Иначе	
			//	Объект.ПередКомпоновкойМакета(СхемаКомпоновкиДанных);
			//КонецЕсли; 
		КонецЕсли;
		//Объект.КомпоновщикНастроек.Восстановить();
		
		НастройкиДляКомпоновкиМакета = ОбъектОтчет.КомпоновщикНастроек.Настройки;
		Объект.КомпоновщикНастроек.ЗагрузитьНастройки(ТекущиеНастройки);
		//КонецЕсли; 
		
		
		МакетОформления = УстановитьМакетОформленияОтчета(ОбъектОтчет, НастройкиДляКомпоновкиМакета);
		
		//Сгенерируем макет компоновки данных при помощи компоновщика макета
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		Попытка
			
			//В качестве схемы компоновки будет выступать схема самого отчета
			//В качестве настроек отчета - текущие настройки отчета
			//Данные расшифровки будем помещать в ДанныеРасшифровки
			Если ИспользоватьДанныеРасшифровки Тогда 
				МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиДляКомпоновкиМакета, ДанныеРасшифровкиОбъект, МакетОформления);
			Иначе
				МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиДляКомпоновкиМакета, , МакетОформления);
			КонецЕсли;
			
			//Вызываем событие отчета
			Если ИспользоватьПослеКомпоновкиМакета Тогда
				Если ТипЗнч(ОбъектОтчет) = Тип("Структура") Тогда
					ОбъектОтчет.Вставить("ВысотаШапки", 0);
					Объект.ПослеКомпоновкиМакета(МакетКомпоновки, ОбъектОтчет);
				Иначе
					Объект.ПослеКомпоновкиМакета(МакетКомпоновки);
				КонецЕсли; 
			КонецЕсли;
			
			//Создадим и инициализируем процессор компоновки
			ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
			Если ВнешниеНаборыДанных = Неопределено Тогда
				ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровкиОбъект, Истина);
			Иначе
				ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровкиОбъект, Истина);
			КонецЕсли;	
			
			
			//Создадим и инициализируем процессор вывода результата
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
			ПроцессорВывода.УстановитьДокумент(Результат);
			
			УстановитьПривилегированныйРежим(Истина);
			Если ИспользоватьПередВыводомЭлементаРезультата Тогда
				
				//Обозначим начало вывода
				ПроцессорВывода.НачатьВывод();
				
				//Основной цикл вывода отчета
				Пока Истина Цикл
					
					//ОбработкаПрерыванияПользователя();
					//Получим следующий элемент результата компоновки
					ЭлементРезультата = ПроцессорКомпоновки.Следующий();
					
					Если ЭлементРезультата = Неопределено Тогда
						//Следующий элемент не получен - заканчиваем цикл вывода
						Прервать;
					Иначе
						
						Отказ = Ложь;
						
						Если ТипЗнч(ОбъектОтчет) = Тип("Структура") Тогда
							Объект.ПередВыводомЭлементаРезультата(МакетКомпоновки, ДанныеРасшифровкиОбъект, ЭлементРезультата,, ОбъектОтчет);
						Иначе	
							Объект.ПередВыводомЭлементаРезультата(МакетКомпоновки, ДанныеРасшифровкиОбъект, ЭлементРезультата);
						КонецЕсли; 
						
						Если Не Отказ Тогда
							//Элемент получен - выведем его при помощи процессора вывода
							ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
						КонецЕсли;	
					КонецЕсли;
				КонецЦикла;
				
				//Завершение вывода отчета
				ПроцессорВывода.ЗакончитьВывод();
			Иначе
				ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
			КонецЕсли;
			УстановитьПривилегированныйРежим(Ложь);
			
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Пока ИнформацияОбОшибке.Причина <> Неопределено Цикл
				ИнформацияОбОшибке = ИнформацияОбОшибке.Причина;
			КонецЦикла;
			ТекстСообщения = НСтр("ru = 'Отчет не сформирован!'") + Символы.ПС + ИнформацияОбОшибке.Описание;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Отказ = Истина;
		КонецПопытки;
	КонецЕсли;
	
	//П = Новый ХранилищеЗначения(Новый Структура("ДанныеРасшифровки", ДанныеРасшифровкиОбъект));
	ДанныеРасшифровки = ПоместитьВоВременноеХранилище(Новый Структура("Объект, ДанныеРасшифровки", ОбъектОтчет, ДанныеРасшифровкиОбъект), ДанныеРасшифровки);
	
	
	Если Не Отказ Тогда
		Если ВыводитьПодвал Тогда
			Если ИспользоватьПриВыводеПодвала Тогда 
				Объект.ПриВыводеПодвала(Результат);
			Иначе
				ВывестиПодвалОтчета(ОбъектОтчет, Результат);
			КонецЕсли;
		КонецЕсли;
		
		Если ИспользоватьПослеВыводаРезультата Тогда
			Если ТипЗнч(ОбъектОтчет) = Тип("Структура") Тогда
				Объект.ПослеВыводаРезультата(Результат, ОбъектОтчет);
			Иначе	
				Объект.ПослеВыводаРезультата(Результат);
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиЗаголовокОтчета(ОбъектОтчет, Результат) Экспорт	
	
	Объект = Отчеты[ОбъектОтчет.ИмяОтчета].Создать();
	
	Макет = ПолучитьОбщийМакет("сабОбщиеОбластиСтандартногоОтчета");
	ОбластьЗаголовок        = Макет.ПолучитьОбласть("ОбластьЗаголовок");
	ОбластьОписаниеНастроек = Макет.ПолучитьОбласть("ОписаниеНастроек");
	ОбластьОрганизация      = Макет.ПолучитьОбласть("Организация");
	ОбластьИнформацияОФормирователе = Макет.ПолучитьОбласть("ИнформацияОФормирователе");
	
	// Организация
	Если ЗначениеЗаполнено(ОбъектОтчет.Организация) Тогда
		ТекстОрганизация = ПолучитьТекстОрганизация(ОбъектОтчет.Организация, Ложь);
		ОбластьОрганизация.Параметры.НазваниеОрганизации = ТекстОрганизация;
		Результат.Вывести(ОбластьОрганизация);
	КонецЕсли;
	
	// Текст заголовка
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = Объект.ПолучитьТекстЗаголовка(, ОбъектОтчет);
	Результат.Вывести(ОбластьЗаголовок);
	
	Если ТипЗнч(ОбъектОтчет) = Тип("Структура") Тогда
		ИдентификаторОбъекта = ОбъектОтчет.ИдентификаторОбъекта;	
	Иначе	
		ИдентификаторОбъекта = ПолучитьИдентификаторОбъекта(ОбъектОтчет);	
	КонецЕсли; 
	
	// Показатели отчета
	ПоказыватьВыводимыеДанные = Ложь;
	ТекстВыводимыеДанные = "";
	КоличествоПоказателей = 0;
	Для Каждого ИмяПоказателя Из ОбъектОтчет.НаборПоказателей Цикл
		Если ТипЗнч(ИмяПоказателя) = Тип("КлючИЗначение") Тогда
			СинонимПоказателя = ИмяПоказателя.Значение;
			ИмяПоказателя = ИмяПоказателя.Ключ;
		Иначе
			СинонимПоказателя = ОбъектОтчет.Метаданные().Реквизиты["Показатель" + ИмяПоказателя].Синоним + ", ";	
		КонецЕсли; 
		Если ОбъектОтчет["Показатель" + ИмяПоказателя] Тогда
			ТекстВыводимыеДанные = ТекстВыводимыеДанные + СинонимПоказателя;
			КоличествоПоказателей = КоличествоПоказателей + 1;
		КонецЕсли;
	КонецЦикла;
	//ТекстВыводимыеДанные = Лев(ТекстВыводимыеДанные, СтрДлина(ТекстВыводимыеДанные) - 2);
	
	Если КоличествоПоказателей = 1 Тогда
		ПоказыватьВыводимыеДанные = Истина;
	КонецЕсли;
	Если ПоказыватьВыводимыеДанные Тогда 
		ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = НСтр("ru = 'Выводимые данные:'");
		ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстВыводимыеДанные;
		Результат.Вывести(ОбластьОписаниеНастроек);
	КонецЕсли;
	
	// Отбор
	//Если ТипЗнч(ОбъектОтчет) = Тип("Структура") Тогда
	//	ТекстОтбор = Строка(ОбъектОтчет.КомпоновщикНастроек.Отбор);
	//Иначе	
	ТекстОтбор = Строка(ОбъектОтчет.КомпоновщикНастроек.Настройки.Отбор);
	//КонецЕсли; 
	ТекстПодразделение = "";
	Если ЗначениеЗаполнено(ОбъектОтчет.Подразделение) Тогда
		ТекстПодразделение = НСтр("ru = 'Подразделение Равно'") + " """ + ОбъектОтчет.Подразделение + """";
	КонецЕсли;
	Если Не ПустаяСтрока(ТекстОтбор) И Не ПустаяСтрока(ТекстПодразделение) Тогда
		ТекстОтбор = ТекстПодразделение + НСтр("ru = ' И '") + ТекстОтбор;
	ИначеЕсли ПустаяСтрока(ТекстОтбор) И Не ПустаяСтрока(ТекстПодразделение) Тогда
		ТекстОтбор = ТекстПодразделение;
	КонецЕсли;
	Если Не ПустаяСтрока(ТекстОтбор) Тогда
		ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = НСтр("ru = 'Отбор:'");
		ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстОтбор;
		Результат.Вывести(ОбластьОписаниеНастроек);
	КонецЕсли;
	
	Если ИдентификаторОбъекта <>  "ОтчетОбъект.сабОборотноСальдоваяВедомость" 
		И ИдентификаторОбъекта <> "ОтчетОбъект.сабКарточкаСчета"
		И ИдентификаторОбъекта <> "ОтчетОбъект.КарточкаСубконто"
		
		И ИдентификаторОбъекта <> "ОтчетОбъект.сабОтчетПоПроводкам"
		И ИдентификаторОбъекта <>  "ОтчетОбъект.КЗ_ОборотноСальдоваяВедомость"
		И ИдентификаторОбъекта <>  "ОтчетОбъект.Д_ОборотноСальдоваяВедомость"
		И ИдентификаторОбъекта <> "ОтчетОбъект.КЗ_КарточкаСчета"
		И ИдентификаторОбъекта <> "ОтчетОбъект.КЗ_ОтчетПоПроводкам" Тогда
		// Сортировка
		ТекстСортировка = "";
		//Если ТипЗнч(ОбъектОтчет) = Тип("Структура") Тогда
		//	ТекПорядок = ОбъектОтчет.КомпоновщикНастроек.Порядок;
		//	ДоступныеПоля = ОбъектОтчет.КомпоновщикНастроек;
		//Иначе
		ТекПорядок = ОбъектОтчет.КомпоновщикНастроек.Настройки.Порядок;	
		ДоступныеПоля = ОбъектОтчет.КомпоновщикНастроек;
		//КонецЕсли; 
		Для Каждого СтрокаПорядок Из ТекПорядок.Элементы Цикл
			Если СтрокаПорядок.Использование Тогда
				ТекстСортировка = ТекстСортировка + ПолучитьСвойствоПоля(ДоступныеПоля, СтрокаПорядок.Поле);
				ТекстСортировка = ТекстСортировка + " " + Строка(СтрокаПорядок.ТипУпорядочивания) + ", ";
			КонецЕсли;
		КонецЦикла;
		ТекстСортировка = Лев(ТекстСортировка, СтрДлина(ТекстСортировка) - 2);
		
		Если Не ПустаяСтрока(ТекстСортировка) Тогда
			ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = НСтр("ru = 'Сортировка:'");
			ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстСортировка;
			Результат.Вывести(ОбластьОписаниеНастроек);
		КонецЕсли;
	КонецЕсли;
	
	// ИнформацияОФормирователе	
	Если ИдентификаторОбъекта = "ОтчетОбъект.сабОборотноСальдоваяВедомостьПоСчету" ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.сабКарточкаСчета" Тогда
		ОбластьИнформацияОФормирователе.Параметры.ТекДата = ТекущаяДата();
		ОбластьИнформацияОФормирователе.Параметры.ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
		Результат.Вывести(ОбластьИнформацияОФормирователе);
	КонецЕсли;
	
	Результат.Область("R1:R" + Результат.ВысотаТаблицы).Имя = "Заголовок";
	
КонецПроцедуры

Функция ПолучитьСвойствоПоля(ЭлементСтруктура, Поле, Свойство = "Заголовок") Экспорт
	
	Если ТипЗнч(ЭлементСтруктура) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Коллекция = ЭлементСтруктура.Настройки.ДоступныеПоляВыбора;
	Иначе
		Коллекция = ЭлементСтруктура;
	КонецЕсли;
	
	ПолеСтрокой = Строка(Поле);
	ПозицияКвадратнойСкобки = Найти(ПолеСтрокой, "[");
	Окончание = "";
	Заголовок = "";
	Если ПозицияКвадратнойСкобки > 0 Тогда
		Окончание = Сред(ПолеСтрокой, ПозицияКвадратнойСкобки);
		ПолеСтрокой = Лев(ПолеСтрокой, ПозицияКвадратнойСкобки - 2);
	КонецЕсли;
	
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолеСтрокой, ".");
	
	Если Не ПустаяСтрока(Окончание) Тогда
		МассивСтрок.Добавить(Окончание);
	КонецЕсли;
	
	ДоступныеПоля = Коллекция.Элементы;
	ПолеПоиска = "";
	Для Индекс = 0 По МассивСтрок.Количество() - 1 Цикл
		ПолеПоиска = ПолеПоиска + ?(Индекс = 0, "", ".") + МассивСтрок[Индекс];
		ДоступноеПоле = ДоступныеПоля.Найти(ПолеПоиска);
		Если ДоступноеПоле <> Неопределено Тогда
			ДоступныеПоля = ДоступноеПоле.Элементы;
		КонецЕсли;
	КонецЦикла;
	
	Если ДоступноеПоле <> Неопределено Тогда
		Если Свойство = "ДоступноеПоле" Тогда
			Результат = ДоступноеПоле;
		Иначе
			Результат = ДоступноеПоле[Свойство]; 
		КонецЕсли;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИдентификаторОбъекта(ОбъектОтчет) Экспорт
	
	Возврат "ОтчетОбъект." + ОбъектОтчет.Метаданные().Имя;
	
КонецФункции

Процедура ВывестиПодвалОтчета(ОбъектОтчет, Результат) Экспорт
	
	Макет = ПолучитьОбщийМакет("сабОбщиеОбластиСтандартногоОтчета");
	ОбластьПодписи = Макет.ПолучитьОбласть("Подписи");
	
	Результат.Вывести(ОбластьПодписи);
	
КонецПроцедуры

Функция УстановитьМакетОформленияОтчета(ОбъектОтчет, НастройкаКомпоновкиДанных) Экспорт
	
	//Попытка
	//	НастройкиФормы = ОбъектОтчет.НастройкиФормы;
	
	МакетОформления = Неопределено;
	
	//	Если НастройкиФормы.МакетОформления = 0 Тогда // Зеленый
	//		УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", "МакетОформленияОтчетовЗеленый");
	//	ИначеЕсли НастройкиФормы.МакетОформления = 1 Тогда // Черно-белый
	//		УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", "МакетОформленияОтчетовЧерноБелый");
	//	ИначеЕсли НастройкиФормы.МакетОформления = 2 Тогда 
	//		УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", "Основной");
	//	ИначеЕсли НастройкиФормы.МакетОформления = 3 Тогда 
	//		УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", "Яркий");
	//	ИначеЕсли НастройкиФормы.МакетОформления = 4 Тогда 
	//		УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", "Море");
	//	ИначеЕсли НастройкиФормы.МакетОформления = 5 Тогда 
	//		УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", "Арктика");
	//	ИначеЕсли НастройкиФормы.МакетОформления = 6 Тогда 
	//		УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", "Зеленый");
	//	ИначеЕсли НастройкиФормы.МакетОформления = 7 Тогда 
	//		УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", "Античный");
	//	КонецЕсли;
	//Исключение
	//	УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", "МакетОформленияОтчетовЗеленый");
	//КонецПопытки;
	//
	Возврат МакетОформления;
	
КонецФункции

Функция ПолучитьТекстОрганизация(Организация = Неопределено, ВключатьОбособленныеПодразделения = Ложь) Экспорт
	
	ТекстОрганизации = "";
	Попытка
		Если ЗначениеЗаполнено(Организация) Тогда
			Если ВключатьОбособленныеПодразделения Тогда
				ТекстОрганизации = "";
			Иначе
				//СведенияОбОрганизации = ОбщегоНазначенияБП.СведенияОЮрФизЛице(Организация);
				ТекстОрганизации = Организация;
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Возврат ТекстОрганизации;
	
КонецФункции

Функция КоличествоПоказателей(ОбъектОтчет) Экспорт 
	
	КоличествоПоказателей = 0;
	Для Каждого ИмяПоказателя Из ОбъектОтчет.НаборПоказателей Цикл
		Если ОбъектОтчет["Показатель" + ?(ТипЗнч(ИмяПоказателя) = Тип("КлючИЗначение"), ИмяПоказателя.Ключ, ИмяПоказателя)] Тогда
			КоличествоПоказателей = КоличествоПоказателей + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КоличествоПоказателей;
	
КонецФункции

Процедура ДобавитьДополнительныеПоля(ОбъектОтчет, КомпоновщикНастроек = Неопределено) Экспорт
	Если КомпоновщикНастроек = Неопределено Тогда
		КомпоновщикНастроек = ОбъектОтчет.КомпоновщикНастроек;
	КонецЕсли;
	
	Если ОбъектОтчет.РазмещениеДополнительныхПолей = 0 Тогда
		РасположениеРеквизитов = РасположениеРеквизитовКомпоновкиДанных.ВместеСВладельцем;
	ИначеЕсли ОбъектОтчет.РазмещениеДополнительныхПолей = 1 Тогда
		РасположениеРеквизитов = РасположениеРеквизитовКомпоновкиДанных.Отдельно;
	КонецЕсли;
	
	СтандартныеОтчетыКлиентСервер.УстановитьПараметрВывода(КомпоновщикНастроек, "РасположениеРеквизитов", РасположениеРеквизитов); 
	
	Для Каждого ПолеГруппировки Из ОбъектОтчет.ДополнительныеПоля Цикл 
		Если ПолеГруппировки.Использование Тогда
			СтандартныеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек, ПолеГруппировки.Поле);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьГруппировкуПоПериоду(ОбъектОтчет, Структура) Экспорт
	
	Если ОбъектОтчет.Периодичность > 0 Тогда
		Если ТипЗнч(Структура) = Тип("ГруппировкаКомпоновкиДанных") Тогда 
			Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ИначеЕсли ТипЗнч(Структура) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			Структура = Структура.Структура.Добавить();
		КонецЕсли;
		ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование  = Истина;
		ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(?(ОбъектОтчет.Периодичность = 2, "Регистратор", "Период"));		
		Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));	
		Если ОбъектОтчет.Периодичность = 2 Тогда
			СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(Структура.Отбор, "Регистратор", 0, ВидСравненияКомпоновкиДанных.Заполнено);
			СтандартныеОтчетыКлиентСервер.УстановитьПараметрВывода(Структура, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОтборПоОрганизации(ОбъектОтчет, ВПользовательскиеНастройки = Истина) Экспорт
	
	Если ЗначениеЗаполнено(ОбъектОтчет.Организация) Тогда
		НовыйОтбор = СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ОбъектОтчет.КомпоновщикНастроек, "Организация", ОбъектОтчет.Организация,,, ВПользовательскиеНастройки);
		НовыйОтбор.Представление = "###ОтборПоОрганизации###"; 
	КонецЕсли;
	
	Попытка
		
		Если ЗначениеЗаполнено(ОбъектОтчет.СценарийПлана) Тогда
			НовыйОтбор = СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ОбъектОтчет.КомпоновщикНастроек, "СценарийПлана", ОбъектОтчет.СценарийПлана,,, ВПользовательскиеНастройки);
			НовыйОтбор.Представление = "###ОтборПоСценариюПлана###"; 
		КонецЕсли;
		
	Исключение
		
	КонецПопытки;
	
	
КонецПроцедуры

Процедура ДобавитьОтборДляПоказателяКонтроль(ОбъектОтчет, ВПользовательскиеНастройки = Истина) Экспорт
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("БУ");
	//МассивПоказателей.Добавить("НУ");
	//МассивПоказателей.Добавить("ПР");
	//МассивПоказателей.Добавить("ВР");
	//Если ОбъектОтчет.ПоказательКонтроль Тогда 
	//	Отбор = ОбъектОтчет.КомпоновщикНастроек.Настройки.Отбор;
	//	Если ВПользовательскиеНастройки Тогда
	//		Для Каждого ЭлементНастройки Из ОбъектОтчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл	
	//			Если ЭлементНастройки.ИдентификаторПользовательскойНастройки = ОбъектОтчет.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки Тогда
	//				Отбор = ЭлементНастройки;
	//			КонецЕсли;
	//		КонецЦикла;
	//	КонецЕсли;
	//	ГруппаОтборИЛИ = Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	//	ГруппаОтборИЛИ.Представление = "###Контроль###";
	//	ГруппаОтборИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	//	СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаОтборИЛИ, "СальдоНаНачалоПериода.КонтрольНачальныйОстатокДт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
	//	СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаОтборИЛИ, "СальдоНаНачалоПериода.КонтрольНачальныйОстатокКт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
	//	СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаОтборИЛИ, "ОборотыЗаПериод.КонтрольОборотДт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
	//	СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаОтборИЛИ, "ОборотыЗаПериод.КонтрольОборотКт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
	//	СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаОтборИЛИ, "СальдоНаКонецПериода.КонтрольКонечныйОстатокДт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
	//	СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаОтборИЛИ, "СальдоНаКонецПериода.КонтрольКонечныйОстатокКт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
	//	Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
	//		Если ОбъектОтчет["Показатель" + ИмяПоказателя] Тогда 
	//			СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаОтборИЛИ, "СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйОстатокДт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
	//			СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаОтборИЛИ, "СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйОстатокКт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
	//			СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаОтборИЛИ, "ОборотыЗаПериод." + ИмяПоказателя + "ОборотДт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
	//			СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаОтборИЛИ, "ОборотыЗаПериод." + ИмяПоказателя + "ОборотКт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
	//			СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаОтборИЛИ, "СальдоНаКонецПериода." + ИмяПоказателя + "КонечныйОстатокДт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
	//			СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаОтборИЛИ, "СальдоНаКонецПериода." + ИмяПоказателя + "КонечныйОстатокКт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьМакетШапки(МакетКомпоновки, Тело = Неопределено, ТипМакета = "Заголовок") Экспорт
	
	ЕстьПустойМакет = Ложь;
	
	Если Тело = Неопределено Тогда
		Тело = МакетКомпоновки.Тело;
	КонецЕсли;
	
	Если Тело.Количество() > 0 Тогда
		Если ТипМакета = "Заголовок" Тогда
			НачальныйИндекс = 0;
			КонечныйИндекс  = Тело.Количество();
			ИтераторПрямой  = Истина;
		ИначеЕсли ТипМакета = "Подвал" Тогда 
			НачальныйИндекс = Тело.Количество() - 1;
			КонечныйИндекс  = 0;
			ИтераторПрямой  = Ложь;
		КонецЕсли;
		
		Индекс = НачальныйИндекс;
		Пока Индекс <> КонечныйИндекс Цикл
			Элемент = Тело[Индекс];
			Если ТипЗнч(Элемент) = Тип("МакетОбластиМакетаКомпоновкиДанных") Тогда
				Если ЕстьПустойМакет Тогда
					ЕстьПустойМакет = Ложь;
				Иначе
					Возврат МакетКомпоновки.Макеты[Элемент.Макет];
				КонецЕсли;
			ИначеЕсли ТипЗнч(Элемент) = Тип("ДиаграммаМакетаКомпоновкиДанных") Тогда
				ЕстьПустойМакет = Истина;			
			КонецЕсли;
			
			Если ИтераторПрямой Тогда
				Индекс = Индекс + 1;
			Иначе
				Индекс = Индекс - 1;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьМакетПодвала(МакетКомпоновки, Тело = Неопределено) Экспорт
	
	Если Тело = Неопределено Тогда
		Тело = МакетКомпоновки.Тело;
	КонецЕсли;
	
	Для Каждого Элемент Из Тело Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппировкаМакетаКомпоновкиДанных") Тогда
			Если Не ПустаяСтрока(Элемент.МакетПодвала) Тогда
				Возврат МакетКомпоновки.Макеты[Элемент.МакетПодвала];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, ПолеГруппировки, ИскатьВДетальныхЗаписях = Ложь, ТипМакета = "Заголовок") Экспорт
	
	МассивМакетов = Новый Массив;
	
	ОбойтиТелоМакетаКомпоновки(МакетКомпоновки, МакетКомпоновки.Тело, МассивМакетов, ПолеГруппировки, ИскатьВДетальныхЗаписях, ТипМакета);	
	
	Возврат МассивМакетов;
	
КонецФункции

Процедура ОбойтиТелоМакетаКомпоновки(МакетКомпоновки, Тело, МассивМакетов, ПолеГруппировки, ИскатьВДетальныхЗаписях = Ложь, ТипМакета) 
	
	Для Каждого Элемент Из Тело Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппировкаМакетаКомпоновкиДанных") Тогда
			Для Каждого ЭлементГруппировки Из Элемент.Группировка Цикл
				Если Найти(ЭлементГруппировки.ИмяПоля, ПолеГруппировки) = 1 Тогда 
					МакетТело = ПолучитьМакетШапки(МакетКомпоновки, Элемент.Тело, ТипМакета);
					Если МакетТело <> Неопределено Тогда
						МассивМакетов.Добавить(МакетТело);  
					КонецЕсли;
					МакетТелоИерархии = ПолучитьМакетШапки(МакетКомпоновки, Элемент.ТелоИерархии, ТипМакета);
					Если МакетТелоИерархии <> Неопределено Тогда
						МассивМакетов.Добавить(МакетТелоИерархии);
					КонецЕсли;
				КонецЕсли; 
				ОбойтиТелоМакетаКомпоновки(МакетКомпоновки, Элемент.Тело, МассивМакетов, ПолеГруппировки, ИскатьВДетальныхЗаписях, ТипМакета);
			КонецЦикла;
		КонецЕсли;
		Если ИскатьВДетальныхЗаписях Тогда
			Если ТипЗнч(Элемент) = Тип("ЗаписиМакетаКомпоновкиДанных") Тогда
				Если Элемент.Имя = ПолеГруппировки Тогда
					МассивМакетов.Добавить(ПолучитьМакетШапки(МакетКомпоновки, Элемент.Тело));	
				КонецЕсли;
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаРезультатаОтчета(ОбъектОтчет, Результат) Экспорт
	
	//// Выводим надписи вертикально, если количество точек диаграмм больше 9
	//Для Каждого Рисунок Из Результат.Рисунки Цикл
	//	Попытка
	//		Если ТипЗнч(Рисунок.Объект) = Тип("Диаграмма") Тогда
	//			Рисунок.Объект.ОбластьПостроения.ВертикальныеМетки  = (Рисунок.Объект.Точки.Количество() > 9);
	//			Рисунок.Объект.ОбластьПостроения.ФорматШкалыЗначений = "ЧГ=3,0";
	//			Рисунок.Объект.ОбластьЛегенды.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
	//			
	//			Рисунок.Объект.ПоложениеПодписейШкалыЗначенийИзмерительнойДиаграммы = ПоложениеПодписейШкалыЗначенийИзмерительнойДиаграммы.НаШкале;
	//			Рисунок.Объект.ПодписиШкалыЗначенийИзмерительнойДиаграммыВдольШкалы = Истина;
	//			Рисунок.Объект.ТолщинаШкалыИзмерительнойДиаграммы                   = 3;
	//			Рисунок.Объект.ФорматЗначенийВПодписях                              = "ЧДЦ=2; ЧГ=3,0";
	//		КонецЕсли;
	//	Исключение
	//	КонецПопытки;
	//КонецЦикла;
	
	Если ТипЗнч(ОбъектОтчет) = Тип("Структура") Тогда
		Имя = ОбъектОтчет.ИмяОтчета;
	Иначе
		Имя = ОбъектОтчет.Метаданные().Имя;
	КонецЕсли;
	Результат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + Имя;
	
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(ОбъектОтчет, Отказ) Экспорт
	
	Если ЗначениеЗаполнено(ОбъектОтчет.КонецПериода) И ОбъектОтчет.НачалоПериода > ОбъектОтчет.КонецПериода Тогда
		ТекстСообщения = НСтр("ru = 'Дата начала периода не может быть больше даты конца периода'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Отчет.НачалоПериода",, Отказ);
	КонецЕсли;
	
	КоличествоПоказателей = 0;
	ПервыйПоказатель = "";
	Для Каждого ЭлементНабора Из ОбъектОтчет.НаборПоказателей Цикл
		КоличествоПоказателей = КоличествоПоказателей + ОбъектОтчет["Показатель" + ЭлементНабора];
		Если ПустаяСтрока(ПервыйПоказатель) Тогда
			ПервыйПоказатель = "Показатель" + ЭлементНабора;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоПоказателей = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не выбран показатель(и)'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Отчет." + ПервыйПоказатель,, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКопиюОписанияМакета(ОписаниеМакета, ФормаЗаписи = Неопределено) Экспорт
	
	Если ФормаЗаписи = Неопределено Тогда
		ФормаЗаписи = "{http://v8.1c.ru/8.1/data-composition-system/composition-template}";
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ОписаниеМакета, "item", ФормаЗаписи);
	СтрокаXML = ЗаписьXML.Закрыть();
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	Возврат СериализаторXDTO.ПрочитатьXML(ЧтениеXML, ТипЗнч(ОписаниеМакета));
	
КонецФункции

Функция ПолучитьТекстПоМаркерам(Текст, МаркерНачало, МаркерКонец) Экспорт
	
	ПозицияМаркерНачало = Найти(Текст, МаркерНачало) + СтрДлина(МаркерНачало);
	ПозицияМаркерКонец  = Найти(Текст, МаркерКонец);
	
	Возврат СокрЛП(Сред(Текст, ПозицияМаркерНачало, ПозицияМаркерКонец - ПозицияМаркерНачало - 1));
	
КонецФункции

Функция ПолучитьСписокСчетовПоСубсчетам(Таблица) Экспорт
	
	СписокСчетовПоСубсчетам = Новый СписокЗначений;
	Для каждого СтрокаТаблицы Из Таблица Цикл
		Если СтрокаТаблицы.ПоСубсчетам И СтрокаТаблицы.Использование Тогда
			СписокСчетовПоСубсчетам.Добавить(СтрокаТаблицы.Счет);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокСчетовПоСубсчетам;
	
КонецФункции

Функция СкопироватьПараметрСхемыКомпоновкиДанных(СхемаКомпоновкиДанных, Приемник, Источник, ЗначениеПриемника = Неопределено) Экспорт
	
	Если ТипЗнч(СхемаКомпоновкиДанных) = Тип("СхемаКомпоновкиДанных") Тогда
		Параметры = СхемаКомпоновкиДанных.Параметры;
		
		НовыйПараметр = Параметры.Найти(Приемник);
		Если НовыйПараметр = Неопределено Тогда
			НовыйПараметр = Параметры.Добавить();
		КонецЕсли;
		
		ПараметрИсточник = Параметры.Найти(Источник);
		
		Если ПараметрИсточник = Неопределено Тогда
			Возврат Неопределено;
		Иначе
			ЗаполнитьЗначенияСвойств(НовыйПараметр, ПараметрИсточник);
			НовыйПараметр.Имя = Приемник;
			Если ЗначениеПриемника <> Неопределено Тогда
				НовыйПараметр.Значение = ЗначениеПриемника;
			КонецЕсли;
		КонецЕсли;
		
		Возврат НовыйПараметр;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ОбновитьДанныеРасшифровкиНаСервере(Знач СхемаКомпоновкиДанных,Знач ДанныеРасшифровки,Знач отчет, ТипОтчета) Экспорт
	
	ОбъектОтчет = ДанныеФормыВЗначение(Отчет,Тип("ОтчетОбъект." + ТипОтчета));
	Объект = Отчеты[ОбъектОтчет.ИмяОтчета].Создать();
	
	ДанныеРасшифровкиОбъект = Неопределено;
	ПараметрыИсполненияОтчета = Неопределено;
	
	Попытка
		ПараметрыИсполненияОтчета = ОбъектОтчет.ПолучитьПараметрыИсполненияОтчета();
	Исключение
	КонецПопытки;
	
	ИспользоватьПередКомпоновкойМакета         = Ложь;
	ИспользоватьПослеКомпоновкиМакета          = Ложь;
	
	Если ПараметрыИсполненияОтчета <> Неопределено Тогда
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПередКомпоновкойМакета") Тогда
			ИспользоватьПередКомпоновкойМакета = ПараметрыИсполненияОтчета.ИспользоватьПередКомпоновкойМакета;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПослеКомпоновкиМакета") Тогда
			ИспользоватьПослеКомпоновкиМакета = ПараметрыИсполненияОтчета.ИспользоватьПослеКомпоновкиМакета;
		КонецЕсли;
	КонецЕсли;
	
	Схема = СхемаКомпоновкиДанных;   
	Если ТипЗнч(Схема) = Тип("Строка") Тогда
		Если ЭтоАдресВременногоХранилища(Схема) Тогда
			СхемаКомпоновкиДанныхОбъект = ПолучитьИзВременногоХранилища(Схема);
		КонецЕсли;
	Иначе
		СхемаКомпоновкиДанныхОбъект = Схема;
	КонецЕсли;
	
	Если ИспользоватьПередКомпоновкойМакета Тогда
		ОбъектОтчет.ПередКомпоновкойМакета(СхемаКомпоновкиДанных);
	КонецЕсли;
	ОбъектОтчет.КомпоновщикНастроек.Восстановить();
	
	НастройкиДляКомпоновкиМакета = Отчет.КомпоновщикНастроек.Настройки;
	МакетОформленияОбъект = неопределено;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанныхОбъект, НастройкиДляКомпоновкиМакета, ДанныеРасшифровкиОбъект, МакетОформленияОбъект);
	
	Если ИспользоватьПослеКомпоновкиМакета Тогда
		ОбъектОтчет.Вставить("ВысотаШапки", 0);
		Объект.ПослеКомпоновкиМакета(МакетКомпоновки, ОбъектОтчет);
	КонецЕсли;
	
	СохраненныеДанныхРасшифровки = ПолучитьИзВременногоХранилища(ДанныеРасшифровки).ДанныеРасшифровки;
	СохраненныеДанныхРасшифровки.Настройки = ДанныеРасшифровкиОбъект.Настройки;
	
	возврат ПоместитьВоВременноеХранилище(Новый Структура("Объект, ДанныеРасшифровки",ОбъектОтчет , СохраненныеДанныхРасшифровки), ДанныеРасшифровки);	
	
Конецфункции

Функция ДатьДоступНаВсеПредприятия() Экспорт
	МассивДоступныхПП = ПараметрыСеанса.ДоступныеПредприятия;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Предприятия.Ссылка
	|ИЗ
	|	Справочник.Предприятия КАК Предприятия";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ПараметрыСеанса.ДоступныеПредприятия = Новый ФиксированныйМассив(Выборка);	
	
	Возврат МассивДоступныхПП
КонецФункции

Процедура УстановитьДоступНаПредприятия(МассивДоступныхПП) Экспорт
	ПараметрыСеанса.ДоступныеПредприятия = МассивДоступныхПП;
КонецПроцедуры