Процедура НачальноеЗаполнениеИБПараметрыСчетов() Экспорт

//план счетов. установка этородитель и выстрого ввода
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УчетныйВидыСубконто.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ДенежныеСчета
	               |ИЗ
	               |	ПланСчетов.Учетный.ВидыСубконто КАК УчетныйВидыСубконто
	               |ГДЕ
	               |	УчетныйВидыСубконто.ВидСубконто = &ВидСубконто
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Учетный.Родитель КАК Ссылка
	               |ПОМЕСТИТЬ Родители
	               |ИЗ
	               |	ПланСчетов.Учетный КАК Учетный
	               |ГДЕ
	               |	НЕ Учетный.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ПустаяСсылка)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Учетный.Родитель
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Учетный.Ссылка КАК Ссылка,
	               |	Учетный.ЗапретитьИспользоватьВПроводках КАК ЗапретитьИспользоватьВПроводках,
	               |	Учетный.КодБыстрогоВыбора КАК КодБыстрогоВыбора,
	               |	ВЫБОР
	               |		КОГДА Учетный.Ссылка В
	               |				(ВЫБРАТЬ
	               |					Родители.Ссылка КАК Ссылка
	               |				ИЗ
	               |					Родители КАК Родители)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ЭтоРодитель,
	               |	Учетный.Код КАК Код,
	               |	ВЫБОР
	               |		КОГДА Учетный.Ссылка В ИЕРАРХИИ (&СчетаНоменклатуры)
				   |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК СчетУчетаНоменклатуры,
	               |	Учетный.СчетУчетаНоменклатуры КАК СчетУчетаНоменклатурыТекущий,
	               |	Учетный.Ссылка В
	               |		(ВЫБРАТЬ
	               |			ДенежныеСчета.Ссылка КАК Ссылка
	               |		ИЗ
	               |			ДенежныеСчета КАК ДенежныеСчета) КАК ДенежныйСчет,
	               |	Учетный.ДенежныйСчет КАК ДенежныйСчетТекущий
	               |ИЗ
	               |	ПланСчетов.Учетный КАК Учетный";
	
	Запрос.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи ДДС", Истина));
	СчетаНоменклатуры = Новый Массив;
	СчетаНоменклатуры.Добавить(ПланыСчетов.Учетный.НайтиПоКоду("10"));
	СчетаНоменклатуры.Добавить(ПланыСчетов.Учетный.НайтиПоКоду("41"));
	СчетаНоменклатуры.Добавить(ПланыСчетов.Учетный.НайтиПоКоду("43"));
	Запрос.УстановитьПараметр("СчетаНоменклатуры", СчетаНоменклатуры);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЭтоРодитель И НЕ Выборка.ЗапретитьИспользоватьВПроводках Тогда
			СчетОб = Выборка.Ссылка.ПолучитьОбъект();
			СчетОб.ЗапретитьИспользоватьВПроводках = Истина;
			СчетОб.Записать();
			Продолжить;
		КонецЕсли;
		
		СчетОб = Выборка.Ссылка.ПолучитьОбъект();
		Перезаписать = Ложь;
		КодБыстрогоДоступа = СтрЗаменить(Выборка.Код, ".", "");
		Если НЕ Выборка.КодБыстрогоВыбора = КодБыстрогоДоступа Тогда
			СчетОб.КодБыстрогоВыбора = КодБыстрогоДоступа;
			Перезаписать = Истина;
		КонецЕсли;
		
		Если НЕ Выборка.СчетУчетаНоменклатурыТекущий = Выборка.СчетУчетаНоменклатуры Тогда
			СчетОб.СчетУчетаНоменклатуры = Выборка.СчетУчетаНоменклатуры;
			Перезаписать = Истина;
		КонецЕсли;
		
		Если НЕ Выборка.ДенежныйСчетТекущий = Выборка.ДенежныйСчет Тогда
			СчетОб.ДенежныйСчет = Выборка.ДенежныйСчет;
			Перезаписать = Истина;
		КонецЕсли;
		
		Если Перезаписать Тогда
			СчетОб.Записать();
		КонецЕсли;
	КонецЦикла;	

КонецПроцедуры

Процедура ОбновлениеКонтрагентовУчетный() Экспорт
	//замена галочки на реквизит
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Контрагенты.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Контрагенты КАК Контрагенты
	               |ГДЕ
	               |	Контрагенты.Учетный = ИСТИНА
	               |	И НЕ Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.Учетный)";
	
	Запрос.УстановитьПараметр("", );
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Учетный = Перечисления.ЮрФизЛицо.Учетный;
	Пока Выборка.Следующий() Цикл
		Об = Выборка.Ссылка.ПолучитьОбъект();
		Об.ЮрФизЛицо = Учетный;
		Об.Записать();		
	КонецЦикла;
	
	
	
КонецПроцедуры

Процедура ОбновитьВидыСЗ() Экспорт
	
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	МАКСИМУМ(Д_ВидыВнутреннихДокументов.Ссылка) КАК Ссылка,
	                |	Д_ВидыВнутреннихДокументов.ИмяДокумента КАК ИмяДокумента
	                |ИЗ
	                |	Справочник.Д_ВидыВнутреннихДокументов КАК Д_ВидыВнутреннихДокументов
	                |ГДЕ
	                |	НЕ Д_ВидыВнутреннихДокументов.ИмяДокумента = """"
	                |	И Д_ВидыВнутреннихДокументов.Родитель = ЗНАЧЕНИЕ(Справочник.Д_ВидыВнутреннихДокументов.ПустаяСсылка)
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	Д_ВидыВнутреннихДокументов.ИмяДокумента";
	 
	 //Запрос.УстановитьПараметр("", );
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	         
	 Соотв = Новый Соответствие;
	 
	 Пока Выборка.Следующий() Цикл
	 	Соотв.Вставить(Выборка.ИмяДокумента, Выборка.Ссылка);	 
	 КонецЦикла;
	 

	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	 |	ВнутренниеДокументы.Ссылка КАК Ссылка
	 |ИЗ
	 |	ЖурналДокументов.ВнутренниеДокументы КАК ВнутренниеДокументы
	 |ГДЕ
	 |	ВнутренниеДокументы.ВидДокумента = &ВидДокумента";
	 
	 Запрос.УстановитьПараметр("ВидДокумента", Справочники.Д_ВидыВнутреннихДокументов.ПустаяСсылка());
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Пока Выборка.Следующий() Цикл
	 	МетаданныеИмя = Выборка.Ссылка.Метаданные().Имя;	
	 	ВыбОб = Выборка.Ссылка.ПолучитьОбъект();
		ВыбОб.ВидСЗ = Соотв.Получить((МетаданныеИмя));
	    ВыбОб.Записать(РежимЗаписиДокумента.Запись);
	 КонецЦикла;
	 

КонецПроцедуры

Процедура ОбновитьБанкСчетаОрганизаций() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	БанковскиеСчетаОрганизаций.Ссылка КАК Ссылка,
	               |	Д_ИсточникППСрезПоследних.Предприятие КАК Предприятие,
	               |	Д_ИсточникППСрезПоследних.ОтветственноеЛицо КАК Ответственный
	               |ИЗ
	               |	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Д_ИсточникПП.СрезПоследних КАК Д_ИсточникППСрезПоследних
	               |		ПО БанковскиеСчетаОрганизаций.Ссылка = Д_ИсточникППСрезПоследних.БанковскиеСчета
	               |			И (НЕ БанковскиеСчетаОрганизаций.Предприятие = Д_ИсточникППСрезПоследних.Предприятие)";
	
	Запрос.УстановитьПараметр("", );
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СчетОб = Выборка.Ссылка.ПолучитьОбъект();	
		ЗаполнитьЗначенияСвойств(СчетОб, Выборка);
		СчетОб.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура ПерезаписатьФизЛица() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Сотрудники.Ссылка КАК Ссылка,
	               |	Сотрудники.ВерсияДанных КАК ВерсияДанных,
	               |	Сотрудники.ПометкаУдаления КАК ПометкаУдаления,
	               |	Сотрудники.Родитель КАК Родитель,
	               |	Сотрудники.ЭтоГруппа КАК ЭтоГруппа,
	               |	Сотрудники.Код КАК Код,
	               |	Сотрудники.Наименование КАК Наименование,
	               |	Сотрудники.ОсновноеПредприятие КАК ОсновноеПредприятие,
	               |	Сотрудники.Коммерсант КАК Коммерсант,
	               |	Сотрудники.Должность КАК Должность,
	               |	Сотрудники.СтраховойНомерПФР КАК СтраховойНомерПФР,
	               |	Сотрудники.Фамилия КАК Фамилия,
	               |	Сотрудники.Имя КАК Имя,
	               |	Сотрудники.Отчество КАК Отчество,
	               |	Сотрудники.Пользователь КАК Пользователь,
	               |	Сотрудники.ДатаРождения КАК ДатаРождения,
	               |	Сотрудники.Пол КАК Пол,
	               |	Сотрудники.ВодительскоеУдостоверение КАК ВодительскоеУдостоверение,
	               |	Сотрудники.IDПоЗагрузкеИзТурникета КАК IDПоЗагрузкеИзТурникета,
	               |	Сотрудники.Статус КАК Статус,
	               |	Сотрудники.ДатаУвольнения КАК ДатаУвольнения,
	               |	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	               |ИЗ
	               |	Справочник.Сотрудники КАК Сотрудники
	               |ГДЕ
	               |	Сотрудники.ЭтоГруппа = ЛОЖЬ";
	
	//Запрос.УстановитьПараметр("", );
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ФизическоеЛицо) Тогда
			ТекОб = Выборка.ФизическоеЛицо.ПолучитьОбъект();
		Иначе
			ТекОб = Справочники.ФизическиеЛица.СоздатьЭлемент();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ТекОб, Выборка);
		//ТекОб.Код = "";
		ТекОб.Записать();
		Если НЕ ЗначениеЗаполнено(Выборка.ФизическоеЛицо) Тогда
			ТекОбСотр = Выборка.Ссылка.ПолучитьОбъект();
			ТекОбСотр.ФизическоеЛицо = ТекОб.Ссылка;
			ТекОбСотр.Записать();			
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры

Процедура СоздатьСтатьиБаланса() Экспорт
	
	НайденнаяКорневаяСтатья = НайтиСтатью("Статьи учетного баланса", "1", Истина, Справочники.Д_СтатьиОборотки.ПустаяСсылка());
	
	Если ЗначениеЗаполнено(НайденнаяКорневаяСтатья) Тогда
		Возврат;
	КонецЕсли;
	
	ТЗ_Счета = Новый ТаблицаЗначений;
	ТЗ_Счета.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Учетный"));
	ТЗ_Счета.Колонки.Добавить("ВидОстатка", Новый ОписаниеТипов("ПеречислениеСсылка.УЧ_ВидОстаткаПоСчету"));
	
	ВО_Дебет = Перечисления.УЧ_ВидОстаткаПоСчету.Дебет;
	ВО_Кредит = Перечисления.УЧ_ВидОстаткаПоСчету.Кредит;
	ВО_ДебетСвернутый = Перечисления.УЧ_ВидОстаткаПоСчету.ДебетСвернутый;
	ВО_КредитСвернутый = Перечисления.УЧ_ВидОстаткаПоСчету.КредитСвернутый;
	ВО_ДебетРазвернутый = Перечисления.УЧ_ВидОстаткаПоСчету.ДебетРазвернутый;
	ВО_КредитРазвернутый = Перечисления.УЧ_ВидОстаткаПоСчету.КредитРазвернутый;
	ВО_ДебетСвернутыйСубконто1 = Перечисления.УЧ_ВидОстаткаПоСчету.ДебетСвернутыйСубконто1;
	ВО_КредитСвернутыйСубконто1 = Перечисления.УЧ_ВидОстаткаПоСчету.КредитСвернутыйСубконто1;
	
	Корень = СоздатьСтатью("Статьи учетного баланса", "1", Истина);
	
	// АКТИВЫ
	Актив = СоздатьСтатью("Актив", "100000", Истина, Корень);
	
	// Внеоборотные активы
	ВнеоборотныеАктивы = СоздатьСтатью("А. Внеоборотные активы", "110000", Истина, Актив);
	
	ДобавитьСтрокуВТЗСчетов(ТЗ_Счета, ПланыСчетов.Учетный.НайтиПоКоду("01"), ВО_Дебет);	
	ОсновныеСредства = СоздатьСтатью("Основные средства", "111000", Ложь, ВнеоборотныеАктивы,, ТЗ_Счета);
	ТЗ_Счета.Очистить();
	
	ДобавитьСтрокуВТЗСчетов(ТЗ_Счета, ПланыСчетов.Учетный.НайтиПоКоду("08"), ВО_ДебетСвернутыйСубконто1);	
	ВложенияВоВнеоб = СоздатьСтатью("Вложения во внеобортные активы", "112000", Ложь, ВнеоборотныеАктивы,, ТЗ_Счета);
	ТЗ_Счета.Очистить();
		
	ПрочиеВнеоборотные = СоздатьСтатью("Прочие внеобортные активы", "113000", Ложь, ВнеоборотныеАктивы,, ТЗ_Счета);

	// Оборотные активы
	ОборотныеАктивы = СоздатьСтатью("В. Оборотные активы", "120000", Истина, Актив);
	
	// Запасы
	Запасы = СоздатьСтатью("Запасы, в т.ч.", "121000", Истина, ОборотныеАктивы);
	
	ДобавитьСтрокуВТЗСчетов(ТЗ_Счета, ПланыСчетов.Учетный.НайтиПоКоду("10"), ВО_ДебетСвернутый);	
	СырьеИМатериалы = СоздатьСтатью("Сырье, материалы", "121100", Ложь, Запасы,, ТЗ_Счета);
	ТЗ_Счета.Очистить();
		
	ДобавитьСтрокуВТЗСчетов(ТЗ_Счета, ПланыСчетов.Учетный.НайтиПоКоду("20"), ВО_ДебетСвернутый);	
	НЗВ = СоздатьСтатью("Незавершенное производство", "121200", Ложь, Запасы,, ТЗ_Счета);
	ТЗ_Счета.Очистить();
		
	ДобавитьСтрокуВТЗСчетов(ТЗ_Счета, ПланыСчетов.Учетный.НайтиПоКоду("41"), ВО_ДебетСвернутый);	
	Товары = СоздатьСтатью("Товары", "121300", Ложь, Запасы,, ТЗ_Счета);
	ТЗ_Счета.Очистить();
	
	ДобавитьСтрокуВТЗСчетов(ТЗ_Счета, ПланыСчетов.Учетный.НайтиПоКоду("43"), ВО_ДебетСвернутый);	
	ГотоваяПродукция = СоздатьСтатью("Готовая продукция", "121400", Ложь, Запасы,, ТЗ_Счета);
	ТЗ_Счета.Очистить();
	
	// Денежные средства
	ДобавитьСтрокуВТЗСчетов(ТЗ_Счета, ПланыСчетов.Учетный.НайтиПоКоду("50"), ВО_ДебетСвернутый);	
	ДобавитьСтрокуВТЗСчетов(ТЗ_Счета, ПланыСчетов.Учетный.НайтиПоКоду("51"), ВО_ДебетСвернутый);	
	ДобавитьСтрокуВТЗСчетов(ТЗ_Счета, ПланыСчетов.Учетный.НайтиПоКоду("57"), ВО_ДебетСвернутый);	
	//ДобавитьСтрокуВТЗСчетов(ТЗ_Счета, ПланыСчетов.Учетный._5703, ВО_ДебетСвернутый);	
	ДенежныеСредства = СоздатьСтатью("Денежные средства", "121500", Ложь, ОборотныеАктивы,, ТЗ_Счета);
	ТЗ_Счета.Очистить();
	
	// ДЗ поставщиков
	ДобавитьСтрокуВТЗСчетов(ТЗ_Счета, ПланыСчетов.Учетный.НайтиПоКоду("60"), ВО_ДебетРазвернутый);	
	ДобавитьСтрокуВТЗСчетов(ТЗ_Счета, ПланыСчетов.Учетный.НайтиПоКоду("68"), ВО_ДебетРазвернутый);	
	ДобавитьСтрокуВТЗСчетов(ТЗ_Счета, ПланыСчетов.Учетный.НайтиПоКоду("69"), ВО_ДебетРазвернутый);	
	ДобавитьСтрокуВТЗСчетов(ТЗ_Счета, ПланыСчетов.Учетный.НайтиПоКоду("70"), ВО_ДебетРазвернутый);	
	ДобавитьСтрокуВТЗСчетов(ТЗ_Счета, ПланыСчетов.Учетный.НайтиПоКоду("71"), ВО_ДебетРазвернутый);
	ДобавитьСтрокуВТЗСчетов(ТЗ_Счета, ПланыСчетов.Учетный.НайтиПоКоду("73"), ВО_ДебетРазвернутый);
	ДобавитьСтрокуВТЗСчетов(ТЗ_Счета, ПланыСчетов.Учетный.НайтиПоКоду("76"), ВО_ДебетРазвернутый);
	ДЗПоставщиков = СоздатьСтатью("Дебиторская задолженность поставщиков и подрядчиков", "121600", Ложь, ОборотныеАктивы,, ТЗ_Счета);
	ТЗ_Счета.Очистить();

	// ДЗ покупателей
	ДобавитьСтрокуВТЗСчетов(ТЗ_Счета, ПланыСчетов.Учетный.НайтиПоКоду("62"), ВО_ДебетРазвернутый);		
	ДЗПокупателей = СоздатьСтатью("Дебиторская задолженность покупателей", "121700", Ложь, ОборотныеАктивы,, ТЗ_Счета);
	ТЗ_Счета.Очистить();
	
	// Расходы буд периодов
	ДобавитьСтрокуВТЗСчетов(ТЗ_Счета, ПланыСчетов.Учетный.НайтиПоКоду("97"), ВО_ДебетСвернутый);		
	РасходыБудущихПериодовСтатья = СоздатьСтатью("Расходы будущих периодов", "121800", Ложь, ОборотныеАктивы,, ТЗ_Счета);
	ТЗ_Счета.Очистить();
	
	// ВНХ
	ДобавитьСтрокуВТЗСчетов(ТЗ_Счета, ПланыСчетов.Учетный.НайтиПоКоду("79"), ВО_ДебетРазвернутый);		
	ВНХРасчеты = СоздатьСтатью("Внутрихолдинговые расчеты", "121900", Ложь, ОборотныеАктивы,, ТЗ_Счета);
	ТЗ_Счета.Очистить();

	ПрочиеОборотыеАктивы = СоздатьСтатью("Прочие оборотные активы", "122000", Ложь, ОборотныеАктивы,, ТЗ_Счета);
	
	// ПАССИВЫ
	Пассив = СоздатьСтатью("Пассив", "200000", Истина, Корень);
	
	// Капитал и резервы
	КапиталИРезервы = СоздатьСтатью("А. Капитал и резервы", "210000", Истина, Пассив);
	
	// Вложения учров
	ДобавитьСтрокуВТЗСчетов(ТЗ_Счета, ПланыСчетов.Учетный.НайтиПоКоду("75.01"), ВО_КредитРазвернутый);	
	ВложенияУчредителей = СоздатьСтатью("Вложения учредителей", "211000", Ложь, КапиталИРезервы,, ТЗ_Счета);
	ТЗ_Счета.Очистить();

	// Добавочный капитал
	ДобавитьСтрокуВТЗСчетов(ТЗ_Счета, ПланыСчетов.Учетный.НайтиПоКоду("82"), ВО_КредитСвернутый);	
	ДобавочныйКапитал = СоздатьСтатью("Добавочный капитал", "212000", Ложь, КапиталИРезервы,, ТЗ_Счета);
	ТЗ_Счета.Очистить();

	// Резервный капитал
	ДобавитьСтрокуВТЗСчетов(ТЗ_Счета, ПланыСчетов.Учетный.НайтиПоКоду("83"), ВО_КредитСвернутый);	
	РезервныйКапитал = СоздатьСтатью("Резервный капитал", "213000", Ложь, КапиталИРезервы,, ТЗ_Счета);
	ТЗ_Счета.Очистить();
	
	// Долгосрочные обязательства
	ДолгосрочныеОбязательства = СоздатьСтатью("В. Долгосрочные обязательства", "220000", Истина, Пассив);
	
	// Кредиты
	ДобавитьСтрокуВТЗСчетов(ТЗ_Счета, ПланыСчетов.Учетный.НайтиПоКоду("67"), ВО_КредитРазвернутый);	
	КредитыИЗаймыДолгосрочные = СоздатьСтатью("Кредиты и займы долгосрочные", "221000", Ложь, ДолгосрочныеОбязательства,, ТЗ_Счета);
	ТЗ_Счета.Очистить();
	
	ПрочиеОбязательства = СоздатьСтатью("Прочие обязательства", "222000", Ложь, ДолгосрочныеОбязательства,, ТЗ_Счета);
	
	//Краткосрочные обязательства
	КраткосрочныеОбязательства = СоздатьСтатью("С. Краткосрочные обязательства", "230000", Истина, Пассив);
	
	ДобавитьСтрокуВТЗСчетов(ТЗ_Счета, ПланыСчетов.Учетный.НайтиПоКоду("66"), ВО_КредитРазвернутый);	
	КредитыИЗаймыКраткосрочные = СоздатьСтатью("Кредиты и займы краткосрочные", "231000", Ложь, КраткосрочныеОбязательства,, ТЗ_Счета);
	ТЗ_Счета.Очистить();
	
	// Кредиторская задолженность
	КредиторскаяЗадолженность = СоздатьСтатью("Кредиторская задолженность", "232000", Истина, КраткосрочныеОбязательства);
	
	// Задолженность перед контрагентами
	ДобавитьСтрокуВТЗСчетов(ТЗ_Счета, ПланыСчетов.Учетный.НайтиПоКоду("60"), ВО_КредитРазвернутый);
	ДобавитьСтрокуВТЗСчетов(ТЗ_Счета, ПланыСчетов.Учетный.НайтиПоКоду("62"), ВО_КредитРазвернутый);
	ДобавитьСтрокуВТЗСчетов(ТЗ_Счета, ПланыСчетов.Учетный.НайтиПоКоду("76"), ВО_КредитРазвернутый);
	ДобавитьСтрокуВТЗСчетов(ТЗ_Счета, ПланыСчетов.Учетный.НайтиПоКоду("71"), ВО_КредитРазвернутый);
	ЗадолженностьПередКонтрагентами = СоздатьСтатью("Задолженность перед контрагентами", "232100", Ложь, КредиторскаяЗадолженность,, ТЗ_Счета);
	ТЗ_Счета.Очистить();

	// Задолженность по налоговым обязательствам
	ДобавитьСтрокуВТЗСчетов(ТЗ_Счета, ПланыСчетов.Учетный.НайтиПоКоду("68"), ВО_КредитРазвернутый);		
	ДобавитьСтрокуВТЗСчетов(ТЗ_Счета, ПланыСчетов.Учетный.НайтиПоКоду("69"), ВО_КредитРазвернутый);		
	ЗадолженностьПоНалоговымОбязательствам = СоздатьСтатью("Задолженность по налоговым обязательствам", "232200", Ложь, КредиторскаяЗадолженность,, ТЗ_Счета);
	ТЗ_Счета.Очистить();

	// Задолженность по выплатам сотрудникам
	ДобавитьСтрокуВТЗСчетов(ТЗ_Счета, ПланыСчетов.Учетный.НайтиПоКоду("70"), ВО_Кредит);		
	ЗадолженностьПоВыплатамСотрудникам = СоздатьСтатью("Задолженность по выплатам сотрудникам", "232300", Ложь, КредиторскаяЗадолженность,, ТЗ_Счета);
	ТЗ_Счета.Очистить();
	
	// Расчеты по выплате доходов
	ДобавитьСтрокуВТЗСчетов(ТЗ_Счета, ПланыСчетов.Учетный.НайтиПоКоду("75.02"), ВО_КредитСвернутыйСубконто1);
	ДобавитьСтрокуВТЗСчетов(ТЗ_Счета, ПланыСчетов.Учетный.НайтиПоКоду("84"), ВО_КредитРазвернутый);	
	РасчетыПоВыплатеДоходов = СоздатьСтатью("Расчеты по выплате доходов", "233000", Ложь, КраткосрочныеОбязательства,, ТЗ_Счета);
	ТЗ_Счета.Очистить();
	
	// Доходы будущих периодов
	ДобавитьСтрокуВТЗСчетов(ТЗ_Счета, ПланыСчетов.Учетный.НайтиПоКоду("98"), ВО_КредитСвернутый);		
	ДоходыБудущихПериодов = СоздатьСтатью("Доходы будущих периодов", "234000", Ложь, КраткосрочныеОбязательства,, ТЗ_Счета);
	ТЗ_Счета.Очистить();
	
	// ВНХ пассив
	ДобавитьСтрокуВТЗСчетов(ТЗ_Счета, ПланыСчетов.Учетный.НайтиПоКоду("79"), ВО_КредитРазвернутый);		
	ВНХРасчетыПассив = СоздатьСтатью("Внутрихолдинговые расчеты", "235000", Ложь, КраткосрочныеОбязательства,, ТЗ_Счета);
	ТЗ_Счета.Очистить();

	ПрочиеОбязательства = СоздатьСтатью("Прочие обязательства", "236000", Ложь, КраткосрочныеОбязательства,, ТЗ_Счета);
	
	// ЧА
	ДобавитьСтрокуВТЗСчетов(ТЗ_Счета, ПланыСчетов.Учетный.НайтиПоКоду("20"), ВО_ДебетСвернутый);		
	ДобавитьСтрокуВТЗСчетов(ТЗ_Счета, ПланыСчетов.Учетный.НайтиПоКоду("40"), ВО_ДебетСвернутый);		
	ДобавитьСтрокуВТЗСчетов(ТЗ_Счета, ПланыСчетов.Учетный.НайтиПоКоду("44"), ВО_ДебетСвернутый);		
	ДобавитьСтрокуВТЗСчетов(ТЗ_Счета, ПланыСчетов.Учетный.НайтиПоКоду("90"), ВО_КредитСвернутый);		
	ДобавитьСтрокуВТЗСчетов(ТЗ_Счета, ПланыСчетов.Учетный.НайтиПоКоду("91"), ВО_КредитСвернутый);
	ДобавитьСтрокуВТЗСчетов(ТЗ_Счета, ПланыСчетов.Учетный.НайтиПоКоду("99"), ВО_КредитСвернутый);
	
	ЧистыеАктивы = СоздатьСтатью("Изменения чистых активов", "300000", Ложь, Корень, Истина, ТЗ_Счета);
	
КонецПроцедуры

Функция СоздатьСтатью(Наименование, Код, ЭтоГруппа, Родитель = Неопределено, РазницаЧА = Ложь, Счета = Неопределено)
	
	НайденнаяСтатья = НайтиСтатью(Наименование, Код, ЭтоГруппа, Родитель);
	
	Если ЗначениеЗаполнено(НайденнаяСтатья) Тогда
		Возврат НайденнаяСтатья;
	КонецЕсли;
	
	Если ЭтоГруппа Тогда
		НоваяСтатья = Справочники.Д_СтатьиОборотки.СоздатьГруппу()
	Иначе
		НоваяСтатья = Справочники.Д_СтатьиОборотки.СоздатьЭлемент();
		НоваяСтатья.РазницаЧА = РазницаЧА;
		
		Если Не Счета = Неопределено Тогда
			
			Для Каждого ТекСтрока Из Счета Цикл
				НСтрСчета = НоваяСтатья.Счета.Добавить();
				НСтрСчета.Счет = ТекСтрока.Счет;
				НСтрСчета.ВидОстатка = ТекСтрока.ВидОстатка;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НоваяСтатья.Наименование = Наименование;
	НоваяСтатья.Код = Код;
	НоваяСтатья.Родитель = ?(ЗначениеЗаполнено(Родитель), Родитель, Справочники.Д_СтатьиОборотки.ПустаяСсылка());
	
	НоваяСтатья.Записать();
	
	Возврат НоваяСтатья.Ссылка;
	
КонецФункции

Функция НайтиСтатью(Наименование, Код, ЭтоГруппа, Родитель)
	
	НайденнаяСтатья = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Д_СтатьиОборотки.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Д_СтатьиОборотки КАК Д_СтатьиОборотки
	               |ГДЕ
	               |	Д_СтатьиОборотки.Наименование = &Наименование
	               |	И Д_СтатьиОборотки.Код = &Код
	               |	И Д_СтатьиОборотки.ЭтоГруппа = &ЭтоГруппа
	               |	И Д_СтатьиОборотки.Родитель = &Родитель
	               |	И Д_СтатьиОборотки.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("Код", Код);
	Запрос.УстановитьПараметр("ЭтоГруппа", ЭтоГруппа);
	Запрос.УстановитьПараметр("Родитель", Родитель);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		НайденнаяСтатья = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат НайденнаяСтатья;
	
КонецФункции

Процедура ДобавитьСтрокуВТЗСчетов(ТЗ, Счет, ВидОстатка)
	
	НСтрТЗ = ТЗ.Добавить();
	НСтрТЗ.Счет = Счет;
	НСтрТЗ.ВидОстатка = ВидОстатка;
	
КонецПроцедуры

Процедура НачальноеЗаполнениеИБВалютаУчета() Экспорт

	Новаязапись = РегистрыСведений.КурсыВалют.СоздатьМенеджерЗаписи();
	Новаязапись.Валюта = УЧ_Сервер.НациональнаяВалюта();
	Новаязапись.Кратность = 1;
	Новаязапись.Курс = 1;
	Новаязапись.Период = НачалоГода(ТекущаяДата());;
	Новаязапись.Записать();
	
	НачальноеЗаполнениеВидыДеятельностиДДС();
	
КонецПроцедуры

Процедура НачальноеЗаполнениеВидыДеятельностиДДС() Экспорт
	
	//заполним по кодам
	ТД = Перечисления.саб_Фин_ВидыДеятельности.ТД;
	ФД = Перечисления.саб_Фин_ВидыДеятельности.ФД;
	ИД = Перечисления.саб_Фин_ВидыДеятельности.ИД;
	ВХП = Перечисления.саб_Фин_ВидыДеятельности.ВХП;
	
	МассивФД = Новый Массив;
	МассивФД.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("7100.01"));
	МассивФД.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("7200.03"));
	МассивФД.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("1600.01"));
	МассивФД.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("1800.01"));
	МассивФД.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("4100.01"));
	МассивФД.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("4400.021"));
	МассивФД.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("4400.01"));
	МассивФД.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("4600.01"));
	МассивФД.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("7100.02"));
	МассивФД.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("7200.01"));
	МассивФД.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("1800.02"));
	МассивФД.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("1800.02"));
	
	МассивИД = Новый Массив;
	МассивИД.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("3100.01"));
	МассивИД.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("3200.01"));
	МассивИД.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("3300.01"));
	
	МассивВНХ = Новый Массив;
	МассивВНХ.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("5100.011"));
	МассивВНХ.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("5200.011"));

	//заполним уровень
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтатьиДДС.Ссылка КАК Ссылка,
	               |	СтатьиДДС.ЭтоГруппа КАК ЭтоГруппа
	               |ИЗ
	               |	Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДДС
	               |
	               |ДЛЯ ИЗМЕНЕНИЯ
	               |	Справочник.СтатьиДвиженияДенежныхСредств";
	
	Запрос.УстановитьПараметр("", );
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекУровень = Выборка.Ссылка.Уровень();
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СпрОбъект.Уровень = ТекУровень;
		
		Если НЕ Выборка.ЭтоГруппа Тогда
			Если НЕ МассивФД.Найти(Выборка.Ссылка) = Неопределено Тогда
				СпрОбъект.ВидДеятельности = ФД;
			ИначеЕсли НЕ МассивИД.Найти(Выборка.Ссылка) = Неопределено Тогда
				СпрОбъект.ВидДеятельности = ИД;
			ИначеЕсли НЕ МассивВНХ.Найти(Выборка.Ссылка) = Неопределено Тогда
				СпрОбъект.ВидДеятельности = ВХП;
			Иначе
				СпрОбъект.ВидДеятельности = ТД;	
			КонецЕсли;
			
		
		КонецЕсли;
		
		СпрОбъект.Записать();
	КонецЦикла;
	
	ЗаполнениеСтатейЗатратИСчетовУчета();

КонецПроцедуры

Процедура ЗаполнениеСтатейЗатратИСчетовУчета() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтатьиДвиженияДенежныхСредств.Ссылка КАК Ссылка,
	               |	СтатьиЗатрат.Ссылка КАК СтатьяЗатрат,
	               |	СтатьиДвиженияДенежныхСредств.Код КАК КодСтатьиДДС
	               |ИЗ
	               |	Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	               |		ПО СтатьиДвиженияДенежныхСредств.Код = СтатьиЗатрат.Код
	               |ГДЕ
	               |	СтатьиДвиженияДенежныхСредств.ЭтоГруппа = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("", );
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Об = Выборка.Ссылка.ПолучитьОбъект();
		Перезапись = Ложь;
		Если ЗначениеЗаполнено(Выборка.СтатьяЗатрат) Тогда
			Об.СтатьяЗатрат = Выборка.СтатьяЗатрат;
			Перезапись = Истина;	
		КонецЕсли;
		
		Если Выборка.КодСтатьиДДС = "1100.01" ИЛИ Выборка.КодСтатьиДДС = "1100.02" Тогда
			Об.СчетУчета = ПланыСчетов.Учетный.НайтиПоКоду("62.01");
			Перезапись = Истина;
		ИначеЕсли Выборка.КодСтатьиДДС = "2060.06" ИЛИ Выборка.КодСтатьиДДС = "2060.07" ИЛИ Выборка.КодСтатьиДДС = "2080.01" Тогда
			Об.СчетУчета = ПланыСчетов.Учетный.НайтиПоКоду("60.01");
			Перезапись = Истина;
		ИначеЕсли Выборка.КодСтатьиДДС = "2100.06" ИЛИ Выборка.КодСтатьиДДС = "2060.07" ИЛИ Выборка.КодСтатьиДДС = "2080.03"
			 ИЛИ Выборка.КодСтатьиДДС = "2100.05" Тогда
			Об.СчетУчета = ПланыСчетов.Учетный.НайтиПоКоду("25");
			Перезапись = Истина;
		ИначеЕсли Выборка.КодСтатьиДДС = "2100.071" ИЛИ Выборка.КодСтатьиДДС = "2100.021" ИЛИ Выборка.КодСтатьиДДС = "2100.01"
			 ИЛИ Выборка.КодСтатьиДДС = "2100.072" ИЛИ Выборка.КодСтатьиДДС = "2100.074" ИЛИ Выборка.КодСтатьиДДС = "2100.074"
			 ИЛИ Выборка.КодСтатьиДДС = "2080.021" ИЛИ Выборка.КодСтатьиДДС = "2080.022" ИЛИ Выборка.КодСтатьиДДС = "2080.07"
			  ИЛИ Выборка.КодСтатьиДДС = "2040.01" ИЛИ Выборка.КодСтатьиДДС = "2050.01" ИЛИ Выборка.КодСтатьиДДС = "2060.03"
			  ИЛИ Выборка.КодСтатьиДДС = "2100.073" ИЛИ Выборка.КодСтатьиДДС = "2011.07" Тогда
			Об.СчетУчета = ПланыСчетов.Учетный.НайтиПоКоду("60.03");
			Перезапись = Истина;
		ИначеЕсли Выборка.КодСтатьиДДС = "2080.051" Тогда
			Об.СчетУчета = ПланыСчетов.Учетный.НайтиПоКоду("71.01");
			Перезапись = Истина;
		ИначеЕсли Выборка.КодСтатьиДДС = "2070.01" ИЛИ Выборка.КодСтатьиДДС = "2070.02"  ИЛИ Выборка.КодСтатьиДДС = "2070.05" Тогда
			Об.СчетУчета = ПланыСчетов.Учетный.НайтиПоКоду("70");
			Перезапись = Истина;
		ИначеЕсли Выборка.КодСтатьиДДС = "2070.03" Тогда
			Об.СчетУчета = ПланыСчетов.Учетный.НайтиПоКоду("68.02");
			Перезапись = Истина;
		ИначеЕсли Выборка.КодСтатьиДДС = "2120.01" ИЛИ Выборка.КодСтатьиДДС = "2120.02"  ИЛИ Выборка.КодСтатьиДДС = "2120.03"
			ИЛИ Выборка.КодСтатьиДДС = "2120.04" ИЛИ Выборка.КодСтатьиДДС = "2120.05"  ИЛИ Выборка.КодСтатьиДДС = "2120.06"   ИЛИ Выборка.КодСтатьиДДС = "2120.07" Тогда
			Об.СчетУчета = ПланыСчетов.Учетный.НайтиПоКоду("68.01");
			Перезапись = Истина;			
		ИначеЕсли Выборка.КодСтатьиДДС = "2070.04" Тогда
			Об.СчетУчета = ПланыСчетов.Учетный.НайтиПоКоду("69");
			Перезапись = Истина;
		ИначеЕсли Выборка.КодСтатьиДДС = "2011.01" Тогда
			Об.СчетУчета = ПланыСчетов.Учетный.НайтиПоКоду("60.01");
			Перезапись = Истина;
		ИначеЕсли Выборка.КодСтатьиДДС = "2030.01" Тогда
			Об.СчетУчета = ПланыСчетов.Учетный.НайтиПоКоду("60.02");
			Перезапись = Истина;
		ИначеЕсли Выборка.КодСтатьиДДС = "3200.01" ИЛИ Выборка.КодСтатьиДДС = "3300.01" Тогда
			Об.СчетУчета = ПланыСчетов.Учетный.НайтиПоКоду("60.05");
			Перезапись = Истина;
		КонецЕсли;
		
		Если Перезапись Тогда
			Об.Записать();		
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура НачальноеЗаполнениеВидовКонтактнойИнформации() Экспорт

	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Skype");
	ПараметрыВида.Вид = "SkypeПользователя";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 3;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	//ПараметрыВида.НастройкиПроверки.ТолькоНациональныйАдрес = Истина; //адрес
	//ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина; //емейл
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ФактАдресКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 1;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ПочтовыйАдресКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 2;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ЮрАдресКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 3;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = "ТелефонКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 4;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = "ФаксКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 5;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("АдресЭлектроннойПочты");
	ПараметрыВида.Вид = "EmailКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 6;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("АдресЭлектроннойПочты");
	ПараметрыВида.Вид = "EmailКонтрагентаДляЗаказов";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 7;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Другое");
	ПараметрыВида.Вид = "ДругаяИнформацияКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 8;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ФактАдресОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 1;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ПочтовыйАдресОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 2;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ЮрАдресОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 3;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = "ТелефонОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 4;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = "ФаксОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 5;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("АдресЭлектроннойПочты");
	ПараметрыВида.Вид = "EmailОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 6;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Другое");
	ПараметрыВида.Вид = "ДругаяИнформацияОрганизации";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 7;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);

	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "АдресПодразделения";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 1;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = "ТелефонСотрудникаКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 1;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("АдресЭлектроннойПочты");
	ПараметрыВида.Вид = "EmailСотрудникаКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 2;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);

	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Skype");
	ПараметрыВида.Вид = "SkypeСотрудникаКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 3;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);

	ЗаполнитьКИСотрудниковКонтрагентов();

КонецПроцедуры

Процедура ЗаполнитьКИСотрудниковКонтрагентов() Экспорт
	
	ГруппаОбъект = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("СправочникСотрудникиКонтрагентов", Истина);
	
	Если ЗначениеЗаполнено(ГруппаОбъект) Тогда
		
		ТекОб = ГруппаОбъект.ПолучитьОбъект();
		ТекОб.Используется = Истина;
		ТекОб.Записать();
		
		ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
		ПараметрыВида.Вид = "ТелефонСотрудникаКонтрагента";
		ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
		ПараметрыВида.Порядок = 1;
		УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
		
		ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("АдресЭлектроннойПочты");
		ПараметрыВида.Вид = "EmailСотрудникаКонтрагента";
		ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
		ПараметрыВида.Порядок = 2;
		УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
		
		ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Skype");
		ПараметрыВида.Вид = "SkypeСотрудникаКонтрагента";
		ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
		ПараметрыВида.Порядок = 3;
		УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ЗаполнитьУчетныеПолитикиПроектов() Экспорт
	УчетнаяПолитикаОбъект = Справочники.УчетныеПолитики.Общая.ПолучитьОбъект();
	
	СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("2210.");
	Если ЗначениеЗаполнено(СтатьяДДС) Тогда
		НоваяСтрока = УчетнаяПолитикаОбъект.СтатьиДДСПредставительские.Добавить();
		НоваяСтрока.СтатьяДДС = СтатьяДДС;	
	КонецЕсли;
	
	СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("2210.05");
	Если ЗначениеЗаполнено(СтатьяДДС) Тогда
		НоваяСтрока = УчетнаяПолитикаОбъект.СтатьиДДСПредставительские.Добавить();
		НоваяСтрока.СтатьяДДС = СтатьяДДС;	
	КонецЕсли;
	
	СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("2210.04");
	Если ЗначениеЗаполнено(СтатьяДДС) Тогда
		НоваяСтрока = УчетнаяПолитикаОбъект.СтатьиДДСПредставительские.Добавить();
		НоваяСтрока.СтатьяДДС = СтатьяДДС;	
	КонецЕсли;

	Если УчетнаяПолитикаОбъект.СтатьиДДСПредставительские.Количество() Тогда
		УчетнаяПолитикаОбъект.КонтрольДДСПоПредставительским = Истина;	
	КонецЕсли;
	
	УчетнаяПолитикаОбъект.КурсовыеРазницыДоход = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("1800.01");
	УчетнаяПолитикаОбъект.КурсовыеРазницыРасход = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("1800.02");

	УчетнаяПолитикаОбъект.Записать();
КонецПроцедуры

Процедура НачальноеЗаполнениеПапокФайлов() Экспорт
	НоваяПапка = Справочники.ПапкиФайлов.СоздатьЭлемент();
	НоваяПапка.Наименование = "Общие файлы";
	НоваяПапка.Записать();
	
	//права на папки
	ВсеПользователи = Справочники.ГруппыПользователей.ВсеПользователи;
	Право1 = РегистрыСведений.НастройкиПравОбъектов.СоздатьМенеджерЗаписи();
	Право1.Активность 	 				= Истина;
	Право1.НаследованиеРазрешено  		= Истина;
	Право1.Объект  						= НоваяПапка.Ссылка;
	Право1.Пользователь  				= ВсеПользователи;
	Право1.ПорядокНастройки  			= 4;
	Право1.Право  						= "ДобавлениеФайлов";
	//Право1.ПравоЗапрещено
	//Право1.УровеньЗапрещенияИзменения
	//Право1.УровеньЗапрещенияПрава
	//Право1.УровеньЗапрещенияЧтения
	//Право1.УровеньРазрешенияИзменения
	Право1.УровеньРазрешенияПрава 		= 2;
	//Право1.УровеньРазрешенияЧтения
	Право1.Записать();
	
	Право1 = РегистрыСведений.НастройкиПравОбъектов.СоздатьМенеджерЗаписи();
	Право1.Активность  					= Истина;
	Право1.НаследованиеРазрешено  		= Истина;
	Право1.Объект  						= НоваяПапка.Ссылка;
	Право1.Пользователь  				= ВсеПользователи;
	Право1.ПорядокНастройки  			= 3;
	Право1.Право  						= "ИзменениеФайлов";
	//Право1.ПравоЗапрещено
	//Право1.УровеньЗапрещенияИзменения
	//Право1.УровеньЗапрещенияПрава
	//Право1.УровеньЗапрещенияЧтения
	Право1.УровеньРазрешенияИзменения 	= 2;
	Право1.УровеньРазрешенияПрава 	 	= 2;
	//Право1.УровеньРазрешенияЧтения
	Право1.Записать();
	
	Право1 = РегистрыСведений.НастройкиПравОбъектов.СоздатьМенеджерЗаписи();
	Право1.Активность  					= Истина;
	Право1.НаследованиеРазрешено  		= Истина;
	Право1.Объект  						= НоваяПапка.Ссылка;
	Право1.Пользователь  				= ВсеПользователи;
	Право1.ПорядокНастройки  			= 5;
	Право1.Право  						= "ПометкаУдаленияФайлов";
	//Право1.ПравоЗапрещено
	//Право1.УровеньЗапрещенияИзменения
	//Право1.УровеньЗапрещенияПрава
	//Право1.УровеньЗапрещенияЧтения
	//Право1.УровеньРазрешенияИзменения
	Право1.УровеньРазрешенияПрава  		= 2;
	//Право1.УровеньРазрешенияЧтения
	Право1.Записать();
	
	Право1 = РегистрыСведений.НастройкиПравОбъектов.СоздатьМенеджерЗаписи();
	Право1.Активность 					= Истина;
	Право1.НаследованиеРазрешено 		= Истина;
	Право1.Объект 						= НоваяПапка.Ссылка;
	Право1.Пользователь 				= ВсеПользователи;
	Право1.ПорядокНастройки 			= 1;
	Право1.Право 						= "Чтение";
	//Право1.ПравоЗапрещено
	//Право1.УровеньЗапрещенияИзменения
	//Право1.УровеньЗапрещенияПрава
	//Право1.УровеньЗапрещенияЧтения
	//Право1.УровеньРазрешенияИзменения
	Право1.УровеньРазрешенияПрава 		= 2;
	Право1.УровеньРазрешенияЧтения 		= 2;
	Право1.Записать();
	
	
	НоваяПапка = Справочники.ПапкиФайлов.СоздатьЭлемент();
	НоваяПапка.Наименование = "Прикрепленные файлы";
	НоваяПапка.Записать();
	
	//права на папки
	ВсеПользователи = Справочники.ГруппыПользователей.ВсеПользователи;
	Право1 = РегистрыСведений.НастройкиПравОбъектов.СоздатьМенеджерЗаписи();
	Право1.Активность 	 				= Истина;
	Право1.НаследованиеРазрешено  		= Истина;
	Право1.Объект  						= НоваяПапка.Ссылка;
	Право1.Пользователь  				= ВсеПользователи;
	Право1.ПорядокНастройки  			= 4;
	Право1.Право  						= "ДобавлениеФайлов";
	//Право1.ПравоЗапрещено
	//Право1.УровеньЗапрещенияИзменения
	//Право1.УровеньЗапрещенияПрава
	//Право1.УровеньЗапрещенияЧтения
	//Право1.УровеньРазрешенияИзменения
	Право1.УровеньРазрешенияПрава 		= 2;
	//Право1.УровеньРазрешенияЧтения
	Право1.Записать();
	
	Право1 = РегистрыСведений.НастройкиПравОбъектов.СоздатьМенеджерЗаписи();
	Право1.Активность  					= Истина;
	Право1.НаследованиеРазрешено  		= Истина;
	Право1.Объект  						= НоваяПапка.Ссылка;
	Право1.Пользователь  				= ВсеПользователи;
	Право1.ПорядокНастройки  			= 3;
	Право1.Право  						= "ИзменениеФайлов";
	//Право1.ПравоЗапрещено
	//Право1.УровеньЗапрещенияИзменения
	//Право1.УровеньЗапрещенияПрава
	//Право1.УровеньЗапрещенияЧтения
	Право1.УровеньРазрешенияИзменения 	= 2;
	Право1.УровеньРазрешенияПрава 	 	= 2;
	//Право1.УровеньРазрешенияЧтения
	Право1.Записать();
	
	Право1 = РегистрыСведений.НастройкиПравОбъектов.СоздатьМенеджерЗаписи();
	Право1.Активность  					= Истина;
	Право1.НаследованиеРазрешено  		= Истина;
	Право1.Объект  						= НоваяПапка.Ссылка;
	Право1.Пользователь  				= ВсеПользователи;
	Право1.ПорядокНастройки  			= 5;
	Право1.Право  						= "ПометкаУдаленияФайлов";
	//Право1.ПравоЗапрещено
	//Право1.УровеньЗапрещенияИзменения
	//Право1.УровеньЗапрещенияПрава
	//Право1.УровеньЗапрещенияЧтения
	//Право1.УровеньРазрешенияИзменения
	Право1.УровеньРазрешенияПрава  		= 2;
	//Право1.УровеньРазрешенияЧтения
	Право1.Записать();
	
	Право1 = РегистрыСведений.НастройкиПравОбъектов.СоздатьМенеджерЗаписи();
	Право1.Активность 					= Истина;
	Право1.НаследованиеРазрешено 		= Истина;
	Право1.Объект 						= НоваяПапка.Ссылка;
	Право1.Пользователь 				= ВсеПользователи;
	Право1.ПорядокНастройки 			= 1;
	Право1.Право 						= "Чтение";
	//Право1.ПравоЗапрещено
	//Право1.УровеньЗапрещенияИзменения
	//Право1.УровеньЗапрещенияПрава
	//Право1.УровеньЗапрещенияЧтения
	//Право1.УровеньРазрешенияИзменения
	Право1.УровеньРазрешенияПрава 		= 2;
	Право1.УровеньРазрешенияЧтения 		= 2;
	Право1.Записать();
КонецПроцедуры

Процедура ОбновитьЦФОПоЗаявкам() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.Д_ЗаявкаНаОплату.ЗаявкаБезнал КАК Д_ЗаявкаНаОплатуЗаявкаБезнал
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Д_ЗаявкаНаОплату.РасшифровкиСтрок КАК Д_ЗаявкаНаОплатуРасшифровкиСтрок
	               |		ПО Д_ЗаявкаНаОплатуЗаявкаБезнал.УИДСтроки = Д_ЗаявкаНаОплатуРасшифровкиСтрок.УИДСтрокиЗаявки
	               |ГДЕ
	               |	НЕ Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка.Предприятие = Д_ЗаявкаНаОплатуЗаявкаБезнал.ЦФО
	               |	И Д_ЗаявкаНаОплатуРасшифровкиСтрок.Ссылка ЕСТЬ NULL
	               |	И НЕ Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка.Предприятие = ЗНАЧЕНИЕ(Справочник.Предприятия.ПустаяСсылка)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Д_ЗаявкаНаОплатуЗаявкаБезнал.Ссылка";
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекОб = Выборка.Ссылка.ПолучитьОбъект();
		Записывать = Ложь;
		Для каждого ТекСтрока Из ТекОб.ЗаявкаБезнал Цикл
			Если НЕ ТекОб.Предприятие = ТекСтрока.ЦФО Тогда
				НоваяСтрока = ТекОб.РасшифровкиСтрок.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				НоваяСтрока.Сумма = ТекСтрока.СуммаДДС;
				НоваяСтрока.УИДСтрокиЗаявки = ТекСтрока.УИДСтроки;
				Записывать = Истина;
			КонецЕсли;
		КонецЦикла;
		Если Записывать Тогда
			ТекОб.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьСтавкиНДС() Экспорт
	Попытка
	
		Об = Справочники.СтавкиНДС.НДС10.ПолучитьОбъект();
		Об.Ставка = 10;
		Об.Записать();
	
	Исключение
	
	КонецПопытки;		
	
	Попытка
	
		Об = Справочники.СтавкиНДС.НДС18.ПолучитьОбъект();
		Об.Ставка = 18;
		Об.Записать();
	
	Исключение
	
	КонецПопытки;		
	
	Попытка
		
		Об = Справочники.СтавкиНДС.НДС20.ПолучитьОбъект();
		Об.Ставка = 20;
		Об.Записать();
		
	Исключение
		
	КонецПопытки;		


КонецПроцедуры

Процедура ПереводНоменклатурыНДС18_20() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.НДС18)
	|	И Номенклатура.ЭтоГруппа = ЛОЖЬ";
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Ставка20 = Справочники.СтавкиНДС.НДС20;
	
	Пока Выборка.Следующий() Цикл
		Об = Выборка.Ссылка.ПолучитьОбъект();
		Об.СтавкаНДС = Ставка20;
		Об.Записать();		  
	КонецЦикла;

КонецПроцедуры

Процедура ОбновлениеКорВалютыДвиженияДС() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УЧ_ДвижениеДСПроводки.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.УЧ_ДвижениеДС.Проводки КАК УЧ_ДвижениеДСПроводки
	               |ГДЕ
	               |	УЧ_ДвижениеДСПроводки.ВалСумма <> 0
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	УЧ_ДвижениеДСПроводки.Ссылка";
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Об = Выборка.Ссылка.ПолучитьОбъект();
		Для каждого ТекСтрока Из Об.Проводки Цикл
			ТекСтрока.КорВалСумма = ТекСтрока.ВалСумма;		
		КонецЦикла; 
		Если Об.Проводки.Количество() Тогда
			Об.Проводки[0].ВалСумма = Об.ВалютнаяСумма1;		
		КонецЕсли;
		Об.Записать();		  
	КонецЦикла;

КонецПроцедуры

Процедура ОбновлениеДокаРасчетаПроцентов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УЧ_РасчетПроцентов.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.УЧ_РасчетПроцентов КАК УЧ_РасчетПроцентов
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	УЧ_РасчетПроцентов.Ссылка";
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Об = Выборка.Ссылка.ПолучитьОбъект();
		Об.ВидОперации = Перечисления.ВидыОперацийПроцентыПоКредитам.ПроцентыПоКазне;
		Об.Записать();		  
	КонецЦикла;

КонецПроцедуры

Процедура ОбновлениеЦФОВЗаявкахНаОплату() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Д_ЗаявкаНаФинансирование.Ссылка КАК Ссылка,
	               |	Д_ИсточникППСрезПоследних.Предприятие КАК ПредприятиеИсточника
	               |ИЗ
	               |	Документ.Д_ЗаявкаНаФинансирование КАК Д_ЗаявкаНаФинансирование
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Д_ИсточникПП.СрезПоследних КАК Д_ИсточникППСрезПоследних
	               |		ПО Д_ЗаявкаНаФинансирование.Источник = Д_ИсточникППСрезПоследних.БанковскиеСчета
	               |			И (НЕ Д_ЗаявкаНаФинансирование.Источник = НЕОПРЕДЕЛЕНО)";
	
	//Запрос.УстановитьПараметр("", );
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ТекОбъект.ЦФО = ТекОбъект.Предприятие;
		ТекОбъект.Предприятие = ?(ЗначениеЗаполнено(Выборка.ПредприятиеИсточника), Выборка.ПредприятиеИсточника, ТекОбъект.Предприятие); 
		ТекОбъект.Записать();	
	КонецЦикла;
КонецПроцедуры

Процедура ОбновлениеРегистраКурсовВалют() Экспорт
	
	НаборКурсов = РегистрыСведений.КурсыВалют.СоздатьНаборЗаписей();
	НаборКурсов.Прочитать();
	НацВалюта = УЧ_Сервер.НациональнаяВалюта();
	
	Для Каждого ТекЗапись Из НаборКурсов Цикл
		
		Если Не ЗначениеЗаполнено(ТекЗапись.БазоваяВалюта) Тогда
			ТекЗапись.БазоваяВалюта = НацВалюта;
		КонецЕсли;
		
		// курс рубля {
		Если Не ТекЗапись.Курс = 0 И Не ТекЗапись.Валюта = НацВалюта Тогда
			ЗаписьКурсовВалют = РегистрыСведений.КурсыВалют.СоздатьМенеджерЗаписи();
			
			ЗаписьКурсовВалют.Валюта    = НацВалюта;
			ЗаписьКурсовВалют.БазоваяВалюта    = ТекЗапись.Валюта;
			ЗаписьКурсовВалют.Период    = ТекЗапись.Период;
			ЗаписьКурсовВалют.Курс      = 1 / ТекЗапись.Курс;
			ЗаписьКурсовВалют.ЛокальныйКурс = ?(ТекЗапись.ЛокальныйКурс = 0, 0, 1 / ТекЗапись.ЛокальныйКурс);
			ЗаписьКурсовВалют.Кратность = ТекЗапись.Кратность;
			ЗаписьКурсовВалют.Записать();
		КонецЕсли;
		//}
		
	КонецЦикла;

	НаборКурсов.Записать();
	
	НаборЗаписейКроссКурсов = РегистрыСведений.КроссКурсыВалют.СоздатьНаборЗаписей();
	НаборЗаписейКроссКурсов.Прочитать();
	ТаблицаКроссКурсов = НаборЗаписейКроссКурсов.Выгрузить();
	
	Для Каждого ТекСтрокаКроссКурса Из ТаблицаКроссКурсов Цикл
		НоваяЗаписьКурсаВалют = РегистрыСведений.КурсыВалют.СоздатьМенеджерЗаписи();
		НоваяЗаписьКурсаВалют.Период = ТекСтрокаКроссКурса.Период;
		НоваяЗаписьКурсаВалют.Валюта = ТекСтрокаКроссКурса.Валюта1;
		НоваяЗаписьКурсаВалют.БазоваяВалюта = ТекСтрокаКроссКурса.Валюта2;
		НоваяЗаписьКурсаВалют.Курс = ТекСтрокаКроссКурса.Курс;
		НоваяЗаписьКурсаВалют.Записать();
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнениеПоставляемыхНалоговИСборов() Экспорт
	
	//Справочники.НалогиИСборы.СоздатьПоставляемыеЭлементы();
	
КонецПроцедуры	

#Область ПрофилиДоступа
Процедура сабСоздатьПоставляемыеГруппыДоступа() Экспорт
	 	
	СоздатьПоставляемуюГруппуДоступа("b767d9cf-0169-11ea-96c4-08606e6eb56d", СвойстваПрофиляАдминистраторПолный());
	СоздатьПоставляемуюГруппуДоступа("bde331bf-0169-11ea-96c4-08606e6eb56d", СвойстваПрофиляКассир());
	СоздатьПоставляемуюГруппуДоступа("bde331c0-0169-11ea-96c4-08606e6eb56d", СвойстваПрофиляОперационист());
	СоздатьПоставляемуюГруппуДоступа("c617996c-0169-11ea-96c4-08606e6eb56d", СвойстваПрофиляПользователь());
	//СоздатьПоставляемуюГруппуДоступа("601d76ec-0628-11ea-8d33-0050568f6c49", СвойстваПрофиляПросмотрПолный());
	СоздатьПоставляемуюГруппуДоступа("c617996d-0169-11ea-96c4-08606e6eb56d", СвойстваПрофиляУчастникДокументооборота());
	СоздатьПоставляемуюГруппуДоступа("cd7c9609-0169-11ea-96c4-08606e6eb56d", СвойстваПрофиляУчетчик());
	СоздатьПоставляемуюГруппуДоступа("d441d66b-0169-11ea-96c4-08606e6eb56d", СвойстваПрофиляУчетчикПросмотр());
	//СоздатьПоставляемуюГруппуДоступа("d441d66c-0169-11ea-96c4-08606e6eb56d", СвойстваПрофиляУчетчикРасширенный());
	СоздатьПоставляемуюГруппуДоступа("dc5c0463-0169-11ea-96c4-08606e6eb56d", СвойстваПрофиляФинансист());
	СоздатьПоставляемуюГруппуДоступа("dc5c0464-0169-11ea-96c4-08606e6eb56d", СвойстваПрофиляФинКонтроль());
	СоздатьПоставляемуюГруппуДоступа("dc5c0465-0169-11ea-96c4-08606e6eb56d", СвойстваПрофиляМенеджерПоПродажам());
	СоздатьПоставляемуюГруппуДоступа("dc5c0466-0169-11ea-96c4-08606e6eb56d", СвойстваПрофиляКладовщик());
	
КонецПроцедуры

Процедура СоздатьПоставляемуюГруппуДоступа(ГУИД, СвойстваПрофиля)
	
	СсылкаНаПрофильСуществует = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвойстваПрофиля.Ссылка, "Ссылка") <> Неопределено);
	Если не СсылкаНаПрофильСуществует Тогда
		Возврат;
	КонецЕсли;

	// Поиск по идентификатору.
	УникальныйИдентификатор = Новый УникальныйИдентификатор(ГУИД);
	Ссылка = Справочники.ГруппыДоступа.ПолучитьСсылку(УникальныйИдентификатор);
	СсылкаСуществует = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Ссылка") <> Неопределено);
	Если СсылкаСуществует Тогда
		Возврат;
	КонецЕсли;
	             
	// Поиск по профилю.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ГруппыДоступа.Ссылка
	|ИЗ
	|	Справочник.ГруппыДоступа КАК ГруппыДоступа
	|ГДЕ
	|	ГруппыДоступа.Профиль = &Профиль
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГруппыДоступа.ПометкаУдаления";
	Запрос.УстановитьПараметр("Профиль", СвойстваПрофиля.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	// Создание новой группы.
	ГруппаДоступаОбъект = Справочники.ГруппыДоступа.СоздатьЭлемент();
	ГруппаДоступаОбъект.УстановитьСсылкуНового(Ссылка);
	ГруппаДоступаОбъект.Наименование = СвойстваПрофиля.Наименование;
	//ГруппаДоступаОбъект.Описание     = СвойстваПрофиля.Комментарий;
	ГруппаДоступаОбъект.Профиль      = СвойстваПрофиля.Ссылка;	
	ГруппаДоступаОбъект.Записать();
		
КонецПроцедуры

Функция СвойстваПрофиляАдминистраторПолный()
	
	Результат = Новый Структура("Ссылка, УникальныйИдентификатор, Наименование, Комментарий");
	Результат.Наименование = "Администратор полный (упр)";
	Результат.Комментарий ="";
	Результат.УникальныйИдентификатор = Новый УникальныйИдентификатор("35f4a899-0169-11ea-96c4-08606e6eb56d");
	Результат.Ссылка = Справочники.ПрофилиГруппДоступа.ПолучитьСсылку(Результат.УникальныйИдентификатор);
		
	ПрофильСуществует = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.Ссылка, "Ссылка") <> Неопределено);
	
	Если Не ПрофильСуществует Тогда
		// Профиль создается в случае отсутствия.
		ПрофильОбъект = Справочники.ПрофилиГруппДоступа.СоздатьЭлемент();
		ПрофильОбъект.УстановитьСсылкуНового(Результат.Ссылка);
		ПрофильОбъект.Наименование         = Результат.Наименование;
		ПрофильОбъект.Комментарий          = Результат.Комментарий;
		ПрофильОбъект.Назначение.Добавить().ТипПользователей = Справочники.Пользователи.ПустаяСсылка();
		ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.Администратор);
		ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.Администрирование);
		ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.БюджетныйОтдел);
		ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ДобавлениеИзменениеАдресныхСведений);
		ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ДобавлениеИзменениеВариантовОтчетов);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ДобавлениеИзменениеВзаимодействий);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ДобавлениеИзменениеВидовКонтактнойИнформации);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ДобавлениеИзменениеВнешнихПользователей);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ДобавлениеИзменениеГрафиковРаботы);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ДобавлениеИзменениеДополнительныхОтчетовИОбработок);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ДобавлениеИзменениеДополнительныхРеквизитовИСведений);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ДобавлениеИзменениеИсполнителейРолейПоОбъектамАдресации);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ДобавлениеИзменениеКалендарныхГрафиков);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ДобавлениеИзменениеПользователей);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ИзменениеДополнительныхСведений);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ИзменениеМакетовПечатныхФорм);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ИзменениеУчастниковГруппДоступа);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ИспользованиеВариантовОтчетов);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ИспользованиеГлобальныхДополнительныхОтчетовИОбработок);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ИспользованиеДополнительныхОтчетовИОбработок);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ИспользованиеЗаметок);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ИспользованиеНапоминаний);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ИспользованиеТекущихДел);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ИспользованиеУниверсальногоОтчета);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ИспользованиеУчетныхЗаписейЭлектроннойПочты);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.НастройкаСинхронизацииФайлов);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ОбновлениеКонфигурацииБазыДанных);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ПросмотрОписанияИзмененийПрограммы);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.РедактированиеРеквизитовОбъектов);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.РежимВсеФункции);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.РучнаяКорректировкаДвиженийДокументов);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.сабСотрудникИТ);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.СохранениеДанныхПользователя);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ЧтениеВерсийОбъектов);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ЧтениеВерсийПодсистем);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ЧтениеВнешнихПользователей);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ЧтениеГрафиковРаботы);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ЧтениеДополнительныхСведений);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ЧтениеИнформацииОВерсияхОбъектов);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ЧтениеНаборовЗначенийДоступа);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ЧтениеОбщихНастроекУзловИнформационныхБаз);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ЧтениеПодключаемогоОборудования);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ЧтениеРегистрБухгалтерииУчетный);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ЧтениеУзловПлановОбмена);
		// При обновлении ИБ важно, чтобы изменения уехали в подчиненный узел.
		ПрофильОбъект.Записать();
	КонецЕсли;

	Возврат Результат;
	
КонецФункции	

Функция СвойстваПрофиляКассир()
	
	Результат = Новый Структура("Ссылка, УникальныйИдентификатор, Наименование, Комментарий");
	Результат.Наименование = "Кассир (упр)";
	Результат.Комментарий ="";
	Результат.УникальныйИдентификатор = Новый УникальныйИдентификатор("3fe6e49d-0169-11ea-96c4-08606e6eb56d");
	Результат.Ссылка = Справочники.ПрофилиГруппДоступа.ПолучитьСсылку(Результат.УникальныйИдентификатор);
		
	ПрофильСуществует = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.Ссылка, "Ссылка") <> Неопределено);
	
	Если Не ПрофильСуществует Тогда
		// Профиль создается в случае отсутствия.
		ПрофильОбъект = Справочники.ПрофилиГруппДоступа.СоздатьЭлемент();
		ПрофильОбъект.УстановитьСсылкуНового(Результат.Ссылка);
		ПрофильОбъект.Наименование         = Результат.Наименование;
		ПрофильОбъект.Комментарий          = Результат.Комментарий;
		ПрофильОбъект.Назначение.Добавить().ТипПользователей = Справочники.Пользователи.ПустаяСсылка();
		ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.КассирПредприятия);
		
		// При обновлении ИБ важно, чтобы изменения уехали в подчиненный узел.
		ПрофильОбъект.Записать();
	КонецЕсли;

	Возврат Результат;
	
КонецФункции	

Функция СвойстваПрофиляОперационист()
	
	Результат = Новый Структура("Ссылка, УникальныйИдентификатор, Наименование, Комментарий");
	Результат.Наименование = "Операционист (упр)";
	Результат.Комментарий ="";
	Результат.УникальныйИдентификатор = Новый УникальныйИдентификатор("489280ea-0169-11ea-96c4-08606e6eb56d");
	Результат.Ссылка = Справочники.ПрофилиГруппДоступа.ПолучитьСсылку(Результат.УникальныйИдентификатор);
		
	ПрофильСуществует = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.Ссылка, "Ссылка") <> Неопределено);
	
	Если Не ПрофильСуществует Тогда
		// Профиль создается в случае отсутствия.
		ПрофильОбъект = Справочники.ПрофилиГруппДоступа.СоздатьЭлемент();
		ПрофильОбъект.УстановитьСсылкуНового(Результат.Ссылка);
		ПрофильОбъект.Наименование         = Результат.Наименование;
		ПрофильОбъект.Комментарий          = Результат.Комментарий;
		ПрофильОбъект.Назначение.Добавить().ТипПользователей = Справочники.Пользователи.ПустаяСсылка();
		ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.сабОперационист);
		
		// При обновлении ИБ важно, чтобы изменения уехали в подчиненный узел.
		ПрофильОбъект.Записать();
	КонецЕсли;

	Возврат Результат;
	
КонецФункции	

Функция СвойстваПрофиляПользователь()
	
	Результат = Новый Структура("Ссылка, УникальныйИдентификатор, Наименование, Комментарий");
	Результат.Наименование = "Базовые права (упр)";
	Результат.Комментарий ="";
	Результат.УникальныйИдентификатор = Новый УникальныйИдентификатор("6e9b3a39-0169-11ea-96c4-08606e6eb56d");
	Результат.Ссылка = Справочники.ПрофилиГруппДоступа.ПолучитьСсылку(Результат.УникальныйИдентификатор);
		
	ПрофильСуществует = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.Ссылка, "Ссылка") <> Неопределено);
	
	Если Не ПрофильСуществует Тогда
		// Профиль создается в случае отсутствия.
		ПрофильОбъект = Справочники.ПрофилиГруппДоступа.СоздатьЭлемент();
		ПрофильОбъект.УстановитьСсылкуНового(Результат.Ссылка);
		ПрофильОбъект.Наименование         = Результат.Наименование;
		ПрофильОбъект.Комментарий          = Результат.Комментарий;
		ПрофильОбъект.Назначение.Добавить().ТипПользователей = Справочники.Пользователи.ПустаяСсылка();
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.БазовыеПрава);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ДобавлениеИзменениеАдресныхСведений);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ЗапускВебКлиента);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ЗапускТонкогоКлиента);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ИзменениеМакетовПечатныхФорм);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ИспользованиеЗаметок);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ИспользованиеНапоминаний);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ИспользованиеТекущихДел);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ИспользованиеУчетныхЗаписейЭлектроннойПочты);
		ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.сабПользователь);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.сабПользовательСети);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.РаботаСПапкамиФайлов);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ЧтениеВерсийОбъектов);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ЧтениеДополнительныхСведений);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ЧтениеИнформацииОВерсияхОбъектов);
		// При обновлении ИБ важно, чтобы изменения уехали в подчиненный узел.
		ПрофильОбъект.Записать();
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция СвойстваПрофиляПросмотрПолный()
	
	Результат = Новый Структура("Ссылка, УникальныйИдентификатор, Наименование, Комментарий");
	Результат.Наименование = "Просмотр полный";
	Результат.Комментарий ="";
	Результат.УникальныйИдентификатор = Новый УникальныйИдентификатор("564bcaec-0628-11ea-8d33-0050568f6c49");
	Результат.Ссылка = Справочники.ПрофилиГруппДоступа.ПолучитьСсылку(Результат.УникальныйИдентификатор);
		
	ПрофильСуществует = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.Ссылка, "Ссылка") <> Неопределено);
	
	Если Не ПрофильСуществует Тогда
		// Профиль создается в случае отсутствия.
		ПрофильОбъект = Справочники.ПрофилиГруппДоступа.СоздатьЭлемент();
		ПрофильОбъект.УстановитьСсылкуНового(Результат.Ссылка);
		ПрофильОбъект.Наименование         = Результат.Наименование;
		ПрофильОбъект.Комментарий          = Результат.Комментарий;
		ПрофильОбъект.Назначение.Добавить().ТипПользователей = Справочники.Пользователи.ПустаяСсылка();
		ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ПросмотрПолный);		
		// При обновлении ИБ важно, чтобы изменения уехали в подчиненный узел.
		ПрофильОбъект.Записать();
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция СвойстваПрофиляУчастникДокументооборота()
	
	Результат = Новый Структура("Ссылка, УникальныйИдентификатор, Наименование, Комментарий");
	Результат.Наименование = "Участник документооборота (упр)";
	Результат.Комментарий ="";
	Результат.УникальныйИдентификатор = Новый УникальныйИдентификатор("7e0c16da-0169-11ea-96c4-08606e6eb56d");
	Результат.Ссылка = Справочники.ПрофилиГруппДоступа.ПолучитьСсылку(Результат.УникальныйИдентификатор);
		
	ПрофильСуществует = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.Ссылка, "Ссылка") <> Неопределено);
	
	Если Не ПрофильСуществует Тогда
		// Профиль создается в случае отсутствия.
		ПрофильОбъект = Справочники.ПрофилиГруппДоступа.СоздатьЭлемент();
		ПрофильОбъект.УстановитьСсылкуНового(Результат.Ссылка);
		ПрофильОбъект.Наименование         = Результат.Наименование;
		ПрофильОбъект.Комментарий          = Результат.Комментарий;
		ПрофильОбъект.Назначение.Добавить().ТипПользователей = Справочники.Пользователи.ПустаяСсылка();
		ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ДокументооборотЗаявкиНаОплату);
		ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ДокументооборотСлужебныеЗаписки);
		ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ДокументооборотСлужебныеЗапискиПросмотр);
		// При обновлении ИБ важно, чтобы изменения уехали в подчиненный узел.
		ПрофильОбъект.Записать();
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция СвойстваПрофиляУчетчик()
	
	Результат = Новый Структура("Ссылка, УникальныйИдентификатор, Наименование, Комментарий");
	Результат.Наименование = "Учетчик (упр)";
	Результат.Комментарий ="";
	Результат.УникальныйИдентификатор = Новый УникальныйИдентификатор("8839ed3a-0169-11ea-96c4-08606e6eb56d");
	Результат.Ссылка = Справочники.ПрофилиГруппДоступа.ПолучитьСсылку(Результат.УникальныйИдентификатор);
		
	ПрофильСуществует = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.Ссылка, "Ссылка") <> Неопределено);
	
	Если Не ПрофильСуществует Тогда
		// Профиль создается в случае отсутствия.
		ПрофильОбъект = Справочники.ПрофилиГруппДоступа.СоздатьЭлемент();
		ПрофильОбъект.УстановитьСсылкуНового(Результат.Ссылка);
		ПрофильОбъект.Наименование         = Результат.Наименование;
		ПрофильОбъект.Комментарий          = Результат.Комментарий;
		ПрофильОбъект.Назначение.Добавить().ТипПользователей = Справочники.Пользователи.ПустаяСсылка();
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ПодсистемаУчет);
		ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.сабУчетчик);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.УчетчикПросмотр);
		// При обновлении ИБ важно, чтобы изменения уехали в подчиненный узел.
		ПрофильОбъект.Записать();
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция СвойстваПрофиляУчетчикПросмотр()
	
	Результат = Новый Структура("Ссылка, УникальныйИдентификатор, Наименование, Комментарий");
	Результат.Наименование = "Учетчик просмотр (упр)";
	Результат.Комментарий ="";
	Результат.УникальныйИдентификатор = Новый УникальныйИдентификатор("9446f881-0169-11ea-96c4-08606e6eb56d");
	Результат.Ссылка = Справочники.ПрофилиГруппДоступа.ПолучитьСсылку(Результат.УникальныйИдентификатор);
		
	ПрофильСуществует = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.Ссылка, "Ссылка") <> Неопределено);
	
	Если Не ПрофильСуществует Тогда
		// Профиль создается в случае отсутствия.
		ПрофильОбъект = Справочники.ПрофилиГруппДоступа.СоздатьЭлемент();
		ПрофильОбъект.УстановитьСсылкуНового(Результат.Ссылка);
		ПрофильОбъект.Наименование         = Результат.Наименование;
		ПрофильОбъект.Комментарий          = Результат.Комментарий;
		ПрофильОбъект.Назначение.Добавить().ТипПользователей = Справочники.Пользователи.ПустаяСсылка();
		ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.УчетчикПросмотр);
		// При обновлении ИБ важно, чтобы изменения уехали в подчиненный узел.
		ПрофильОбъект.Записать();
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция СвойстваПрофиляУчетчикРасширенный()
	
	Результат = Новый Структура("Ссылка, УникальныйИдентификатор, Наименование, Комментарий");
	Результат.Наименование = "Учетчик расширенный";
	Результат.Комментарий ="";
	Результат.УникальныйИдентификатор = Новый УникальныйИдентификатор("9b85cfd6-0169-11ea-96c4-08606e6eb56d");
	Результат.Ссылка = Справочники.ПрофилиГруппДоступа.ПолучитьСсылку(Результат.УникальныйИдентификатор);
		
	ПрофильСуществует = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.Ссылка, "Ссылка") <> Неопределено);
	
	Если Не ПрофильСуществует Тогда
		// Профиль создается в случае отсутствия.
		ПрофильОбъект = Справочники.ПрофилиГруппДоступа.СоздатьЭлемент();
		ПрофильОбъект.УстановитьСсылкуНового(Результат.Ссылка);
		ПрофильОбъект.Наименование         = Результат.Наименование;
		ПрофильОбъект.Комментарий          = Результат.Комментарий;
		ПрофильОбъект.Назначение.Добавить().ТипПользователей = Справочники.Пользователи.ПустаяСсылка();
		ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.сабРевизор);
		// При обновлении ИБ важно, чтобы изменения уехали в подчиненный узел.
		ПрофильОбъект.Записать();
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция СвойстваПрофиляФинансист()
	
	Результат = Новый Структура("Ссылка, УникальныйИдентификатор, Наименование, Комментарий");
	Результат.Наименование = "Финансист (упр)";
	Результат.Комментарий ="";
	Результат.УникальныйИдентификатор = Новый УникальныйИдентификатор("a8bcdec8-0169-11ea-96c4-08606e6eb56d");
	Результат.Ссылка = Справочники.ПрофилиГруппДоступа.ПолучитьСсылку(Результат.УникальныйИдентификатор);
		
	ПрофильСуществует = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.Ссылка, "Ссылка") <> Неопределено);
	
	Если Не ПрофильСуществует Тогда
		// Профиль создается в случае отсутствия.
		ПрофильОбъект = Справочники.ПрофилиГруппДоступа.СоздатьЭлемент();
		ПрофильОбъект.УстановитьСсылкуНового(Результат.Ссылка);
		ПрофильОбъект.Наименование         = Результат.Наименование;
		ПрофильОбъект.Комментарий          = Результат.Комментарий;
		ПрофильОбъект.Назначение.Добавить().ТипПользователей = Справочники.Пользователи.ПустаяСсылка();
		ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.Финансист);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ФинансистПросмотр);
		// При обновлении ИБ важно, чтобы изменения уехали в подчиненный узел.
		ПрофильОбъект.Записать();
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция СвойстваПрофиляФинКонтроль()
	
	Результат = Новый Структура("Ссылка, УникальныйИдентификатор, Наименование, Комментарий");
	Результат.Наименование = "Фин. контроль (упр)";
	Результат.Комментарий ="";
	Результат.УникальныйИдентификатор = Новый УникальныйИдентификатор("a8bcdec9-0169-11ea-96c4-08606e6eb56d");
	Результат.Ссылка = Справочники.ПрофилиГруппДоступа.ПолучитьСсылку(Результат.УникальныйИдентификатор);
		
	ПрофильСуществует = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.Ссылка, "Ссылка") <> Неопределено);
	
	Если Не ПрофильСуществует Тогда
		// Профиль создается в случае отсутствия.
		ПрофильОбъект = Справочники.ПрофилиГруппДоступа.СоздатьЭлемент();
		ПрофильОбъект.УстановитьСсылкуНового(Результат.Ссылка);
		ПрофильОбъект.Наименование         = Результат.Наименование;
		ПрофильОбъект.Комментарий          = Результат.Комментарий;
		ПрофильОбъект.Назначение.Добавить().ТипПользователей = Справочники.Пользователи.ПустаяСсылка();
		ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ОФК);
		// При обновлении ИБ важно, чтобы изменения уехали в подчиненный узел.
		ПрофильОбъект.Записать();
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция СвойстваПрофиляМенеджерПоПродажам()
	
	Результат = Новый Структура("Ссылка, УникальныйИдентификатор, Наименование, Комментарий");
	Результат.Наименование = "Менеджер по продажам (упр)";
	Результат.Комментарий ="";
	Результат.УникальныйИдентификатор = Новый УникальныйИдентификатор("a8bcdec8-0169-11ea-96e2-08606e6eb56d");
	Результат.Ссылка = Справочники.ПрофилиГруппДоступа.ПолучитьСсылку(Результат.УникальныйИдентификатор);
		
	ПрофильСуществует = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.Ссылка, "Ссылка") <> Неопределено);
	
	Если Не ПрофильСуществует Тогда
		// Профиль создается в случае отсутствия.
		ПрофильОбъект = Справочники.ПрофилиГруппДоступа.СоздатьЭлемент();
		ПрофильОбъект.УстановитьСсылкуНового(Результат.Ссылка);
		ПрофильОбъект.Наименование         = Результат.Наименование;
		ПрофильОбъект.Комментарий          = Результат.Комментарий;
		ПрофильОбъект.Назначение.Добавить().ТипПользователей = Справочники.Пользователи.ПустаяСсылка();
		ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.сабМенеджерПоПродажам);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ФинансистПросмотр);
		// При обновлении ИБ важно, чтобы изменения уехали в подчиненный узел.
		ПрофильОбъект.Записать();
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция СвойстваПрофиляКладовщик()
	
	Результат = Новый Структура("Ссылка, УникальныйИдентификатор, Наименование, Комментарий");
	Результат.Наименование = "Кладовщик (упр)";
	Результат.Комментарий ="";
	Результат.УникальныйИдентификатор = Новый УникальныйИдентификатор("a8bcdec7-0169-11ea-96e2-08606e6eb56d");
	Результат.Ссылка = Справочники.ПрофилиГруппДоступа.ПолучитьСсылку(Результат.УникальныйИдентификатор);
		
	ПрофильСуществует = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.Ссылка, "Ссылка") <> Неопределено);
	
	Если Не ПрофильСуществует Тогда
		// Профиль создается в случае отсутствия.
		ПрофильОбъект = Справочники.ПрофилиГруппДоступа.СоздатьЭлемент();
		ПрофильОбъект.УстановитьСсылкуНового(Результат.Ссылка);
		ПрофильОбъект.Наименование         = Результат.Наименование;
		ПрофильОбъект.Комментарий          = Результат.Комментарий;
		ПрофильОбъект.Назначение.Добавить().ТипПользователей = Справочники.Пользователи.ПустаяСсылка();
		ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.сабКладовщик);
		//ПрофильОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ФинансистПросмотр);
		// При обновлении ИБ важно, чтобы изменения уехали в подчиненный узел.
		ПрофильОбъект.Записать();
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

#КонецОбласти

