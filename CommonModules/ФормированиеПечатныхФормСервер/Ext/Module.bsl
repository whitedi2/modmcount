///////////////////////////////////////////////////////////////////////////////

// Функция выполняет проверку возможности печати документов.
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы.
//
// Возвращаемое значение:
//	Массив - Массив не проведенных документов.
//
Функция ПроверитьПроведенностьДокументов(МассивДокументов) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ." + МассивДокументов[0].Метаданные().Имя + " КАК Документ
	|ГДЕ
	|	Документ.Ссылка В (&МассивДокументов)
	|	И Не Документ.Проведен
	|");
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивНепроведенныхДокументов = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивНепроведенныхДокументов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивНепроведенныхДокументов;

КонецФункции

//  Функция формирует сведения об указанном ЮрФизЛице. К сведениям относятся -
// наименование, адрес, номер телефона, банковские реквизиты.
//
// Параметры: 
//  ЮрФизЛицо   - организация или физическое лицо, о котором собираются сведения.
//  ДатаПериода - дата, на которую выбираются сведения о ЮрФизЛице.
//  ДляФизЛицаТолькоИнициалы - Для физ. лица выводить только инициалы имени и отчества.
//  БанковскийСчет - Банковский счет, если счет не основной.
//
// Возвращаемое значение:
//  Сведения - собранные сведения.
//
Функция СведенияОЮрФизЛице(ЮрФизЛицо, ДатаПериода, ДляФизЛицаТолькоИнициалы = Истина, Знач БанковскийСчет = Неопределено) Экспорт

	Сведения = Новый Структура("Представление, ПолноеНаименование, КодПоОКПО, ИНН, КПП, Телефоны, ЮридическийАдрес, ФактическийАдрес");
	Запрос   = Новый Запрос;
	Данные   = Неопределено;

	Если НЕ ЗначениеЗаполнено(ЮрФизЛицо) Тогда
		Сведения.Вставить("НомерСчета", "");
		Сведения.Вставить("Банк", "");
		Сведения.Вставить("БИК", "");
		Сведения.Вставить("КоррСчет", "");
		Возврат Сведения;
	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("Строка") Тогда
		Сведения.Вставить("Представление",      ЮрФизЛицо);
		Сведения.Вставить("полноеНаименование", ЮрФизЛицо);
		Возврат Сведения;
	КонецЕсли;

	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
		ИмяСправочника = "Организации";
		Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
			БанковскийСчет = ЮрФизЛицо.ОсновнойБанковскийСчет;
		КонецЕсли;
		РеквизитыСчета = Справочники.БанковскиеСчета.УЧ_РеквизитыБанковскогоСчетаОрганизации(БанковскийСчет);

	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
		ИмяСправочника = "Контрагенты";
		Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
			БанковскийСчет = ЮрФизЛицо.ОсновнойБанковскийСчет;
		КонецЕсли;
		РеквизитыСчета = Справочники.БанковскиеСчета.УЧ_РеквизитыБанковскогоСчетаОрганизации(БанковскийСчет);
	Иначе
		Возврат Сведения;
	КонецЕсли;

	Запрос.УстановитьПараметр("ПарЮрФизЛицо", ЮрФизЛицо);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Представление       КАК Наименование,";
	
	
	Если ИмяСправочника = "Организации" Тогда
		
		Запрос.Текст = Запрос.Текст + "
		| Организации.НаименованиеСокращенное КАК ПолноеНаименование,";
	Иначе
		
		Запрос.Текст = Запрос.Текст + "
		| Организации.НаименованиеПолное КАК ПолноеНаименование,";
	КонецЕсли;	
	
	Запрос.Текст = Запрос.Текст + "
	|	Организации.ИНН                 КАК ИНН,
	|	Организации.КПП                 КАК КПП,";
	
	Запрос.Текст = Запрос.Текст + "
	|	Организации.КодПоОКПО           КАК КодПоОКПО";
	
	Если ИмяСправочника = "Организации" Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	Организации.СвидетельствоСерияНомер,
		|	Организации.СвидетельствоДатаВыдачи,
		|	Организации.НаименованиеПолное КАК НаименованиеПолноеПоУчредительнымДокументам,
		|	""""         КАК КодПоОКАТО";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	Справочник."+ИмяСправочника+" КАК Организации
	|
	|ГДЕ
	|	Организации.Ссылка = &ПарЮрФизЛицо";

	Данные = Запрос.Выполнить().Выбрать();
	Данные.Следующий();

	Сведения.Вставить("КодПоОКПО", Данные.КодПоОКПО);
	ТипЮрФизЛицо = ЮрФизЛицо.ЮридическоеФизическоеЛицо;
	Сведения.Вставить("ЮрФизЛицо", ТипЮрФизЛицо);
	Если ТипЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		Сведения.Вставить("КПП",       Данные.КПП);
		Сведения.Вставить("Свидетельство", "");
	Иначе
		Сведения.Вставить("КПП",       "");
		Если ИмяСправочника = "Организации" Тогда
			Сведения.Вставить("Свидетельство", "свидетельство " + Данные.СвидетельствоСерияНомер + " от " + Формат(Данные.СвидетельствоДатаВыдачи, "ДФ=dd.MM.yyyy"));
		КонецЕсли;
	КонецЕсли;

	Если ИмяСправочника = "Организации" Тогда
		
		Сведения.Вставить("НаименованиеПолноеПоУчредительнымДокументам",Данные.НаименованиеПолноеПоУчредительнымДокументам);
		Сведения.Вставить("КодПоОКАТО", Данные.КодПоОКАТО);
		Сведения.Вставить("НомерСчета", РеквизитыСчета.НомерСчета);
		Сведения.Вставить("Банк", РеквизитыСчета.Банк);
		Сведения.Вставить("БИК", РеквизитыСчета.БИК);
		Сведения.Вставить("КоррСчет", РеквизитыСчета.КоррСчет);
		
	ИначеЕсли ИмяСправочника = "Контрагенты" Тогда
		
		Сведения.Вставить("НомерСчета", РеквизитыСчета.НомерСчета);
		Сведения.Вставить("Банк", РеквизитыСчета.Банк);
		Сведения.Вставить("БИК", РеквизитыСчета.БИК);
		Сведения.Вставить("КоррСчет", РеквизитыСчета.КоррСчет);
		
	КонецЕсли;
	
	Сведения.Вставить("ПолноеНаименование", Данные.ПолноеНаименование);

	Если Данные <> Неопределено Тогда
		Сведения.Вставить("Представление",       Данные.Наименование);
		Сведения.Вставить("ИНН",                 Данные.ИНН);
		Сведения.Вставить("Телефоны",            ПолучитьТелефонИзКонтактнойИнформации(ЮрФизЛицо));
		Сведения.Вставить("ЮридическийАдрес",    ПолучитьАдресИзКонтактнойИнформации(ЮрФизЛицо,"Юридический"));
		Сведения.Вставить("ФактическийАдрес",    ПолучитьАдресИзКонтактнойИнформации(ЮрФизЛицо,"Фактический"));
		Сведения.Вставить("ПочтовыйАдрес",       ПолучитьАдресИзКонтактнойИнформации(ЮрФизЛицо,"Почтовый"));

		Если НЕ ЗначениеЗаполнено(Сведения.ПолноеНаименование) Тогда
			Сведения.ПолноеНаименование = Сведения.Представление;
		КонецЕсли;
	КонецЕсли;

	Возврат Сведения;

КонецФункции // СведенияОЮрФизЛице()

// Функция находит актуальное значение адреса в контакной информации.
//
// Параметры:
//  Объект - СправочникСсылка, объект контактной информации.
//  ТипАдреса - тип контактной информации.
//
// Возвращаемое значение
//  Строка - представление найденного адреса.
//
Функция ПолучитьАдресИзКонтактнойИнформации(Объект, ТипАдреса = "") Экспорт

	Если ЗначениеЗаполнено(Объект) Тогда
		
		Если ТипАдреса = "Фактический" Тогда
			Начало = "Факт";
		ИначеЕсли ТипАдреса = "Регистрации" Или ТипАдреса = "Юридический" Тогда
			Начало = "Юр";
		ИначеЕсли ТипАдреса = "Почтовый" Тогда
			Начало = "Почтовый";
		Иначе
			Начало = "";
		КонецЕсли;
		
		Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
			Окончание = "Организации";
			ВладелецКонтактнойИнформации = Объект;
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
			Окончание = "Контрагента";
			ВладелецКонтактнойИнформации = Объект;
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			Окончание = "Подразделения";
			ВладелецКонтактнойИнформации = Объект;
		КонецЕсли;
		
		ВидАдреса = Справочники.ВидыКонтактнойИнформации[Начало + "Адрес" + Окончание].Ссылка;

		ТабЗн = ВладелецКонтактнойИнформации.КонтактнаяИнформация.Выгрузить();
		
		НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ВидАдреса));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Возврат НайденныеСтроки[0].Представление;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";

КонецФункции // ПолучитьАдресИзКонтактнойИнформации()

// Функция находит актуальное значение телефона в контакной информации.
//
// Параметры:
//  Объект - СправочникСсылка, объект контактной информации.
//
// Возвращаемое значение
//  Строка - представление найденного телефона.
//
Функция ПолучитьТелефонИзКонтактнойИнформации(Объект)

	Если ЗначениеЗаполнено(Объект) Тогда
	
		Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
			Окончание = "Организации";
			ВладелецКонтактнойИнформации = Объект;
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
			Окончание = "Контрагента";
			ВладелецКонтактнойИнформации = Объект;
		КонецЕсли;

		ВидТелефона = Справочники.ВидыКонтактнойИнформации["Телефон" + Окончание].Ссылка;

		ТабЗн           = ВладелецКонтактнойИнформации.КонтактнаяИнформация.Выгрузить();
		НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Телефон, ВидТелефона));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Возврат НайденныеСтроки[0].Представление;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции // ПолучитьТелефонИзКонтактнойИнформации()

// Возвращает структуру данных со сводным описанием контрагента.
//
// Параметры: 
//  СписокСведений - список значений со значенийми параметров организации
//   СписокСведений формируется функцией СведенияОЮрФизЛице.
//  Список         - список запрашиваемых параметров организаиии.
//  СПрефиксом     - Признак выводить или нет префикс параметра организации.
//
// Возвращаемое значение:
//  Строка - описатель организации / контрагента / физ.лица.
//
Функция ОписаниеОрганизации(СписокСведений, Список = "", СПрефиксом = Истина) Экспорт

	Если ПустаяСтрока(Список) Тогда
		Список = "ПолноеНаименование,ИНН,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет";
	КонецЕсли;
	
	Список = СтрЗаменить(Список, "БанковскиеРеквизиты", "НомерСчета,Банк,БИК,КоррСчет");

	Результат = "";

	СоответствиеПараметров = Новый Соответствие();
	СоответствиеПараметров.Вставить("ПолноеНаименование", " ");
	СоответствиеПараметров.Вставить("ИНН",                " ИНН ");
	СоответствиеПараметров.Вставить("КПП",                " КПП ");
	СоответствиеПараметров.Вставить("ЮридическийАдрес",   " ");
	СоответствиеПараметров.Вставить("ФактическийАдрес",   " ");
	СоответствиеПараметров.Вставить("Телефоны",           " тел.: ");
	СоответствиеПараметров.Вставить("НомерСчета",         " р/с ");
	СоответствиеПараметров.Вставить("Банк",               " в банке ");
	СоответствиеПараметров.Вставить("БИК",                " БИК ");
	СоответствиеПараметров.Вставить("КоррСчет",           " к/с ");
	СоответствиеПараметров.Вставить("КодПоОКПО",          " Код по ОКПО ");
	СоответствиеПараметров.Вставить("КодПоОКАТО",         " Код по ОКАТО ");

	Список          = Список + ?(Прав(Список, 1) = ",", "", ",");
	ЧислоПараметров = СтрЧислоВхождений(Список, ",");

	Для Счетчик = 1 По ЧислоПараметров Цикл

		ПозЗапятой = Найти(Список, ",");

		Если ПозЗапятой > 0  Тогда
			
			ИмяПараметра = Лев(Список, ПозЗапятой - 1);
			Список       = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));

			Попытка
				СтрокаДополнения = "";
				СписокСведений.Свойство(ИмяПараметра, СтрокаДополнения);

				Если ПустаяСтрока(СтрокаДополнения) Тогда
					Продолжить;
				КонецЕсли;

				Префикс = СоответствиеПараметров[ИмяПараметра];
				Если Не ПустаяСтрока(Результат)  Тогда
					Результат = Результат + ",";
				КонецЕсли; 

				Результат = Результат + ?(СПрефиксом = Истина, Префикс, "") + СтрокаДополнения;
			Исключение
				
				ТекстСообщения  = НСтр("ru='Не удалось определить значение параметра организации: %ИмяПараметра%'");
				ТекстСообщения  = СтрЗаменить(ТекстСообщения, "%ИмяПараметра%", ИмяПараметра);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			КонецПопытки;

		КонецЕсли;

	КонецЦикла;

	Возврат СокрЛП(Результат);

КонецФункции // ОписаниеОрганизации()

// Функция возвращает информацию об ответственных лицах организации и их должностях.
Функция ОтветственныеЛицаОрганизаций(Организация, ДатаСреза, Исполнитель = Неопределено, ПолноеФИО = Ложь) Экспорт

	Результат = Новый Структура("Руководитель, РуководительДолжность, ГлавныйБухгалтер, Кассир, Исполнитель, ИсполнительДолжность, ОтветственныйЗаРегистры");

	Если Организация <> Неопределено Тогда
		
		ЗапросПоЛицам = Новый Запрос();
		ЗапросПоЛицам.УстановитьПараметр("Организация", Организация);
		ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
					
		ЗапросПоЛицам.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо,
		|	ЕСТЬNULL(ОтветственныеЛицаОрганизацийСрезПоследних.Должность.Наименование, """") КАК Должность,
		|	ВЫБОР
		|		КОГДА ФИОФизЛицСрезПоследних.ФизЛицо ЕСТЬ NULL 
		|			ТОГДА ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование
		|ИНАЧЕ";
		
		Если Не ПолноеФИО Тогда
			ЗапросПоЛицам.Текст = ЗапросПоЛицам.Текст +"
			|ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
			|				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
			|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
			|				ИНАЧЕ """"
			|			КОНЕЦ + ВЫБОР
			|				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
			|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
			|				ИНАЧЕ """"
			|			КОНЕЦ";
		Иначе
			ЗапросПоЛицам.Текст = ЗапросПоЛицам.Текст +"
			|ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество";
		КонецЕсли;
		
		ЗапросПоЛицам.Текст = ЗапросПоЛицам.Текст + "
		|	КОНЕЦ КАК ФИОПолное
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо ССЫЛКА Справочник.ФизическиеЛица) КАК ФИОФизЛицСрезПоследних
		|		ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо";
		
		Выборка = ЗапросПоЛицам.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда
				Результат.Руководитель            = Выборка.ФИОПолное;
				Результат.РуководительДолжность   = Выборка.Должность;
				
			ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер Тогда
				Результат.ГлавныйБухгалтер        = Выборка.ФИОПолное;
				
			ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Кассир Тогда
				Результат.Кассир                  = Выборка.ФИОПолное;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	Возврат Результат;

КонецФункции // ОтветственныеЛицаОрганизаций()

Функция СформироватьЗаголовокДокумента(Шапка, НазваниеДокумента = "", ФорматДаты = "") Экспорт
	
	Если НазваниеДокумента = ""
		И Шапка.Свойство("Представление")
		И ЗначениеЗаполнено(Шапка.Представление) Тогда
		
		ПоложениеНомера = Найти(Шапка.Представление,Шапка.Номер);
		
		Если ПоложениеНомера > 0 Тогда
			НазваниеДокумента = СокрЛП(Лев(Шапка.Представление,ПоложениеНомера-1));
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ФорматДаты) Тогда
		ФорматДаты = "ДФ='дд ММММ гггг'";
	КонецЕсли;
	
	Возврат НазваниеДокумента + " № " + ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Ложь, Истина)
	                          + " от " + Формат(Шапка.Дата, ФорматДаты) + " г.";
	
КонецФункции // СформироватьЗаголовокДокумента()

// Функция возвращает представление номенклатуры для печати.
//
// Параметры:
// 		НаименованиеНоменклатуры - Строка
// 		Характеристика - Строка
// 		Упаковка - Строка
// 		Серия - Строка
// 		Содержание - Строка
//
// Возвращаемое значение:
// 		Строка - Представление номенклатуры для печати.
//
Функция ПолучитьПредставлениеНоменклатурыДляПечати(
	НаименованиеНоменклатуры,
	Характеристика = Неопределено,
	Упаковка = Неопределено,
	Серия = Неопределено,
	Содержание = Неопределено) Экспорт
	
	ПредставлениеНоменклатуры = СокрЛП(НаименованиеНоменклатуры);
	
	Если ЗначениеЗаполнено(Содержание) Тогда
		
		ПредставлениеНоменклатуры = Содержание;
		
	ИначеЕсли (ЗначениеЗаполнено(Характеристика) И НЕ Характеристика = "<>")
		ИЛИ ЗначениеЗаполнено(Упаковка)
		ИЛИ ЗначениеЗаполнено(Серия) Тогда
		
		ТекстВСкобках = "";
		Если ЗначениеЗаполнено(Характеристика) Тогда
			ТекстВСкобках = ТекстВСкобках + ", " + Характеристика;
		КонецЕсли;
		Если ЗначениеЗаполнено(Упаковка) Тогда
			ТекстВСкобках = ТекстВСкобках + ", " + Упаковка;
		КонецЕсли;
		Если ЗначениеЗаполнено(Серия) Тогда
			ТекстВСкобках = ТекстВСкобках + ", " + Серия;
		КонецЕсли;
		ПредставлениеНоменклатуры = ПредставлениеНоменклатуры + " ("+ Сред(ТекстВСкобках, 3) + ")";
		
	КонецЕсли;
	
	Возврат ПредставлениеНоменклатуры;
	
КонецФункции // ПолучитьПредставлениеНоменклатурыДляПечати()

// Функция формирует фамилию и инициалы либо по наименованию элемента спр-ка ФизическиеЛица
//  либо по переданным строкам.
//  Если передан Объект, то извлеченная из него строка считается совокупностью.
//  Фамилия + Имя + Отчество, разделенными пробелами.
//
// Параметры:
//  Объект		- строка или ссылка или объект элемента спр-ка ФизическиеЛица.
//  Фамилия		- фамилия физ. лица.
//  Имя			- имя физ. лица.
//  Отчество	- отчество физ. лица.
//
// Возвращаемое значение 
//  Фамилия и Инициалы одной строкой. Побочные эффекты - переданная целая строка.
//  Побочные эффекты - переданная целая строка разбивается на подстроки, соответствующие
//  отдельным Фамилии,Имени и Отчеству.
//
Функция ФамилияИнициалыФизЛица(Объект = "", Фамилия = " ", Имя = " ", Отчество = " ") Экспорт

	ТипОбъекта = ТипЗнч(Объект);
	
	Если ТипОбъекта = Тип("Строка") Тогда
		ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(Объект)," ");
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ФизическиеЛица") Или ТипОбъекта = Тип("СправочникОбъект.ФизическиеЛица") Тогда
		ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(Объект.Наименование)," ");
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Сотрудники") Или ТипОбъекта = Тип("СправочникОбъект.Сотрудники") Тогда
		ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(Объект.Наименование)," ");	
	Иначе
		
		// Используем возможно переданные отдельные строки.
		Возврат ?(Не ПустаяСтрока(Фамилия), 
				Фамилия + ?(Не ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." + ?(Не ПустаяСтрока(Отчество),Лев(Отчество,1)+".", ""), ""),
				"")
	КонецЕсли;
	
	КоличествоПодстрок = ФИО.Количество();
	Фамилия            = ?(КоличествоПодстрок > 0,ФИО[0],"");
	Имя                = ?(КоличествоПодстрок > 1,ФИО[1],"");
	Отчество           = ?(КоличествоПодстрок > 2,ФИО[2],"");
	
	Возврат ?(Не ПустаяСтрока(Фамилия), 
				Фамилия + ?(Не ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." + ?(Не ПустаяСтрока(Отчество),Лев(Отчество,1)+".", ""), ""),
				"");
				
КонецФункции // ФамилияИнициалыФизЛица()

// Функция собирает фамилию, имя и отчество физ. лица на указанную дату.
//
// Параметры: 
//  ФизЛицо.    - физ. лицо, для которго необходимо получить данные.
//  ДатаПериода - дата получения сведений.
//
// Возвращаемое значение:
//  Структура с данными.
//
Функция ФамилияИмяОтчество(ФизЛицо, ДатаПериода) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПарФизЛицо",     ФизЛицо);
	Запрос.УстановитьПараметр("ПарДатаПериода", ДатаПериода);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Фамилия,
	|	Имя,
	|	Отчество
	|ИЗ
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&ПарДатаПериода, ФизЛицо = &ПарФизЛицо)
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Результат = Новый Структура("Фамилия, Имя, Отчество");

	Результат.Фамилия  = ?(Не ЗначениеЗаполнено(Шапка.Фамилия),  "", Шапка.Фамилия);
	Результат.Имя      = ?(Не ЗначениеЗаполнено(Шапка.Имя),      "", Шапка.Имя);
	Результат.Отчество = ?(Не ЗначениеЗаполнено(Шапка.Отчество), "", Шапка.Отчество);

	Возврат Результат;

КонецФункции // ФамилияИмяОтчество()

// Функция возвращает, имя дополнительной колонки, выводимой в таблицу товаров.
//
Функция ИмяДополнительнойКолонки() Экспорт
	
	ДопКолонка =  Неопределено;
	
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		Возврат "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		Возврат "Код";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции // ИмяДополнительнойКолонки()

// Функция формирует представление суммы прописью в указанной валюте.
//
// Параметры:
//  Сумма - Число - Сумма, которую надо представить прописью.
//  Валюта - СправочникСсылка.Валюты - Валюта, в которой нужно представить сумму.
//  ВыводитьСуммуБезКопеек - Булево - Флаг представления суммы без копеек.
//
// Возвращаемое значение:
//  Строка - сумма прописью
//
Функция СформироватьСуммуПрописью(Знач Сумма, ВыводитьСуммуБезКопеек = Ложь) Экспорт
	
	Результат         = ?(Сумма < 0, -Сумма, Сумма);
	ЦелаяЧасть        = Цел(Результат);
	ФорматСтрока      = "Л=ru_RU; ДП=Ложь";
	ПараметрыПредмета = "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2";
	
	Попытка
		
		Если Результат = ЦелаяЧасть Тогда
			
			Если ВыводитьСуммуБезКопеек Тогда
				
				Результат = ЧислоПрописью(Результат, ФорматСтрока, ПараметрыПредмета);
				Результат = Лев(Результат, Найти(Результат, "0") - 1);
				
			Иначе
				
				Результат = ЧислоПрописью(Результат, ФорматСтрока, ПараметрыПредмета);
				
			КонецЕсли;
			
		Иначе
			
			Результат = ЧислоПрописью(Результат, ФорматСтрока, ПараметрыПредмета);
			
		КонецЕсли;
		
	Исключение
		Результат = "";
	КонецПопытки;

	Возврат Результат;
	
КонецФункции // СформироватьСуммуПрописью()

// Стандартная для данной конфигурации функция форматирования прописи количества.
//
// Параметры: 
//  Количество - число, которое мы хотим форматировать.
//
// Возвращаемое значение:
//  Отформатированное должным образом строковое представление количества.
//
Функция КоличествоПрописью(Количество) Экспорт

	ЦелаяЧасть   = Цел(Количество);
	ДробнаяЧасть = Окр(Количество - ЦелаяЧасть, 3);

	Если ДробнаяЧасть = Окр(ДробнаяЧасть,0) Тогда
		ПараметрыПрописи = ", , , , , , , , 0";
	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 1) Тогда
		ПараметрыПрописи = "целая, целых, целых, ж, десятая, десятых, десятых, м, 1";
	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 2) Тогда
		ПараметрыПрописи = "целая, целых, целых, ж, сотая, сотых, сотых, м, 2";
	Иначе
		ПараметрыПрописи = "целая, целых, целых, ж, тысячная, тысячных, тысячных, м, 3";
	КонецЕсли;

	Возврат ЧислоПрописью(Количество, ,ПараметрыПрописи);

КонецФункции // КоличествоПрописью()

// Стандартная для данной конфигурации функция форматирования сумм.
//
// Параметры: 
//  Сумма  - число, которое мы хотим форматировать, 
//           будет добавлено представление валюты.
//  ЧН     - строка, представляющая нулевое значение числа,
//  ЧРГ    - символ-разделитель групп целой части числа.
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление суммы.
//
Функция ФорматСумм(Знач Сумма, Валюта = "руб.", ЧН = "0,00", ЧРГ = " ") Экспорт
	
	Сумма = ?(Сумма < 0, -Сумма, Сумма);
	ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2" +
					?(НЕ ЗначениеЗаполнено(ЧН), "", ";" + "ЧН=" + ЧН) +
					?(НЕ ЗначениеЗаполнено(ЧРГ),"", ";" + "ЧРГ=" + ЧРГ);
	РезультирующаяСтрока = СокрЛ(Формат(Сумма, ФорматнаяСтрока));
	
	РезультирующаяСтрока = РезультирующаяСтрока + " " + СокрП(Валюта);
	
	Возврат РезультирующаяСтрока;

КонецФункции // ФорматСумм()

///////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ЗАПОЛНЕНИЯ ТАБЛИЧНЫХ ДОКУМЕНТОВ ПЕЧАТНЫХ ФОРМ

// Процедура обнуления итоговых сумм по странице.
//
Процедура ОбнулитьИтогиПоСтранице(ИтоговыеСуммы)
	
	ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице = 0;
	ИтоговыеСуммы.ИтогоМассаНеттоНаСтранице  = 0;
	ИтоговыеСуммы.ИтогоМестНаСтранице        = 0;
	ИтоговыеСуммы.ИтогоКоличествоНаСтранице  = 0;
	ИтоговыеСуммы.ИтогоСуммаНаСтранице       = 0;
	ИтоговыеСуммы.ИтогоНДСНаСтранице         = 0;
	ИтоговыеСуммы.ИтогоСуммаСНДСНаСтранице   = 0;
	
КонецПроцедуры // ОбнулитьИтогиПоСтранице()

// Функция формирует представление суммы в рублях и копейках.
//
// Параметры:
//  Сумма - Число - Сумма, которую необходимо отформатировать.
//  Валюта - СправочникСсылка.Валюты - Валюта, в которой нужно представить сумму.
//
// Возвращаемое значение
//  Строка - Отформатированная сумма.
//
Функция СуммаРубКоп(Сумма) Экспорт
	
	Рубли = Цел(Сумма);
	Копейки = Окр(100 * (Сумма - Рубли), 0, 1);
	СуммаРубКоп = "" 
		+ Формат(Рубли, "ЧДЦ=0; ЧГ=0")
		+ " руб. " 
		+ Цел(Копейки /10) 
		+ (Копейки - 10 * Цел(Копейки / 10))
		+" коп."
	;
	
	Возврат СуммаРубКоп;
	
КонецФункции // СуммаРубКоп()


//ФОРМИРОВАНИЕ 1-Т(ТТН)

// Процедура заполняет табличный документ ТТН.
//
Процедура ЗаполнитьТабличныйДокументТТН(ТабличныйДокумент, Запрос, ОбъектыПечати) Экспорт
	
	
	ЕдиницаИзмеренияВеса           = Неопределено;
	
	ТабличныйДокумент.ПолеСверху = 0;
	ТабличныйДокумент.ПолеСлева = 5;
	ТабличныйДокумент.ПолеСнизу = 0;
	ТабличныйДокумент.ПолеСправа = 5;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ДанныеПечати = МассивРезультатов[0].Выбрать();
	ВыборкаПоДокументам = МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ТТН");
	
	ПервыйДокумент = Истина;
	Пока ДанныеПечати.Следующий() Цикл
	
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
			
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ЗаполнитьРеквизитыШапкиТТН(ДанныеПечати, Макет, ТабличныйДокумент);
				
		НомерСтраницы = 1;
		ИтоговыеСуммы = СтруктураИтоговыеСуммыТТН();
		
		ДанныеСтроки = СтруктураДанныеСтрокиТТН();
		
		// Создаем массив для проверки вывода.
		МассивВыводимыхОбластей = Новый Массив;
		
		// Выводим многострочную часть документа.
		ОбластьЗаголовокТаблицы      = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ОбластьМакета                = Макет.ПолучитьОбласть("Строка");
		ОбластьИтоговПоСтранице      = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьВсего                 = Макет.ПолучитьОбласть("Всего");
		ОбластьПодвала               = Макет.ПолучитьОбласть("Подвал");
		ОбластьТранспортногоРаздела  = Макет.ПолучитьОбласть("ТранспортныйРаздел");
		ОбластьСведенийОГрузе        = Макет.ПолучитьОбласть("СведенияОГрузе");
		ОбластьПодвалаСведенийОГрузе = Макет.ПолучитьОбласть("ПодвалСведенийОГрузе");
		ОбластьПрочихСведений        = Макет.ПолучитьОбласть("ПрочиеСведения");
		
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
		
		КоличествоСтрок = ВыборкаПоДокументам.Количество();
		
		СтрокаТовары = ВыборкаПоДокументам.Выбрать();
		Пока СтрокаТовары.Следующий() Цикл
			
			ДанныеСтроки.Номер = ДанныеСтроки.Номер + 1;
			
			ЗаполнитьРеквизитыСтрокиТовараТТН(ДанныеПечати, СтрокаТовары, ДанныеСтроки, ОбластьМакета, ЕдиницаИзмеренияВеса);
			
			Если ДанныеСтроки.Номер = 1 Тогда // первая строка
			
				ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
				ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
				
			Иначе
				
				МассивВыводимыхОбластей.Очистить();
				МассивВыводимыхОбластей.Добавить(ОбластьМакета);
				МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
				
				Если ДанныеСтроки.Номер = КоличествоСтрок Тогда
					
					МассивВыводимыхОбластей.Добавить(ОбластьВсего);
					МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
					
				КонецЕсли;
				
				Если ДанныеСтроки.Номер <> 1 И Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
					
					ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
					ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
					
					// Очистим итоги по странице.
					ОбнулитьИтогиПоСтранице(ИтоговыеСуммы);
					
					НомерСтраницы = НомерСтраницы + 1;
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
					ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			РассчитатьИтоговыеСуммыТТН(ИтоговыеСуммы, ДанныеСтроки);
			
		КонецЦикла;
		
		// Выводим итоги по последней странице.
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
		
		ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
		
		// Выводим итоги по документу в целом.
		ОбластьМакета = Макет.ПолучитьОбласть("Всего");
		ОбластьМакета.Параметры.Заполнить(ИтоговыеСуммы);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим подвал документа
		ДобавитьИтоговыеДанныеПодвалаТТН(ИтоговыеСуммы, ДанныеСтроки.Номер);
		ЗаполнитьРеквизитыПодвалаТТН(ДанныеПечати, ИтоговыеСуммы, Макет, ТабличныйДокумент, ЕдиницаИзмеренияВеса);
		
		МассивВыводимыхОбластей.Очистить();
		
		ЗаполнитьРеквизитыТранспортногоРазделаТТН(ДанныеПечати, Макет, ОбластьТранспортногоРаздела);
		
		МассивВыводимыхОбластей.Добавить(ОбластьТранспортногоРаздела);
		МассивВыводимыхОбластей.Добавить(ОбластьСведенийОГрузе);
		МассивВыводимыхОбластей.Добавить(ОбластьПодвалаСведенийОГрузе);
		МассивВыводимыхОбластей.Добавить(ОбластьПрочихСведений);
		
		Если Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьТранспортногоРаздела);
		ТабличныйДокумент.Вывести(ОбластьСведенийОГрузе);
		ТабличныйДокумент.Вывести(ОбластьПодвалаСведенийОГрузе);
		ТабличныйДокумент.Вывести(ОбластьПрочихСведений);
	
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТабличныйДокументТТН()

// Функция формирования структуры хранения итоговых суммы.
//
// Возвращаемое значение:
//	Структура - Структура хранения итоговых сумм.
//
Функция СтруктураИтоговыеСуммыТТН()
	
	Структура = Новый Структура;
	
	// Инициализация итогов по странице.
	Структура.Вставить("ИтогоМассаБруттоНаСтранице", 0);
	Структура.Вставить("ИтогоМестНаСтранице", 0);
	Структура.Вставить("ИтогоКоличествоНаСтранице", 0);
	Структура.Вставить("ИтогоСуммаНаСтранице", 0);
	Структура.Вставить("ИтогоМассаНеттоНаСтранице", 0);
	Структура.Вставить("ИтогоНДСНаСтранице", 0);
	Структура.Вставить("ИтогоСуммаСНДСНаСтранице", 0);
	
	// Инициализация итогов по документу.
	Структура.Вставить("ИтогоМассаБрутто", 0);
	Структура.Вставить("ИтогоМест", 0);
	Структура.Вставить("ИтогоКоличество", 0);
	Структура.Вставить("ИтогоСумма", 0);
	Структура.Вставить("ИтогоМассаНетто", 0);
	
	Структура.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", 0);
	Структура.Вставить("СуммаПрописью", "");
	
	Возврат Структура;
	
КонецФункции // СтруктураИтоговыеСуммы()

// Функция формирования структуры хранения данных строки.
//
//
// Возвращаемое значение:
//	Структура - Структура данных строки товаров.
//
Функция СтруктураДанныеСтрокиТТН()
	
	Структура = Новый Структура;
	Структура.Вставить("Номер", 0);
	Структура.Вставить("Мест", 0);
	Структура.Вставить("Количество", 0);
	Структура.Вставить("Цена", 0);
	Структура.Вставить("Сумма", 0);
	Структура.Вставить("МассаБрутто", 0);
	Структура.Вставить("МассаНетто", 0);
	
	Возврат Структура;
	
КонецФункции

// Процедура рассчитывает итоговые суммы с учетом строки товаров.
//
// Параметры:
//	ИтоговыеСуммы - Структура - Структура итоговых сумм документа.
//	ДанныеСтроки - Структура - Структура данных строки товаров.
//
Процедура РассчитатьИтоговыеСуммыТТН(ИтоговыеСуммы, ДанныеСтроки)
	
	// Увеличим итоги по странице.
	ИтоговыеСуммы.ИтогоМестНаСтранице        = ИтоговыеСуммы.ИтогоМестНаСтранице        + ДанныеСтроки.Мест;
	ИтоговыеСуммы.ИтогоКоличествоНаСтранице  = ИтоговыеСуммы.ИтогоКоличествоНаСтранице  + ДанныеСтроки.Количество;
	ИтоговыеСуммы.ИтогоСуммаНаСтранице       = ИтоговыеСуммы.ИтогоСуммаНаСтранице       + ДанныеСтроки.Сумма;
	ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице = ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице + ДанныеСтроки.МассаБрутто;
	ИтоговыеСуммы.ИтогоМассаНеттоНаСтранице  = ИтоговыеСуммы.ИтогоМассаНеттоНаСтранице  + ДанныеСтроки.МассаНетто;
	
	// Увеличим итоги по документу.
	ИтоговыеСуммы.ИтогоМест        = ИтоговыеСуммы.ИтогоМест        + ДанныеСтроки.Мест;
	ИтоговыеСуммы.ИтогоКоличество  = ИтоговыеСуммы.ИтогоКоличество  + ДанныеСтроки.Количество;
	ИтоговыеСуммы.ИтогоСумма       = ИтоговыеСуммы.ИтогоСумма       + ДанныеСтроки.Сумма;
	ИтоговыеСуммы.ИтогоМассаБрутто = ИтоговыеСуммы.ИтогоМассаБрутто + ДанныеСтроки.МассаБрутто;
	ИтоговыеСуммы.ИтогоМассаНетто  = ИтоговыеСуммы.ИтогоМассаНетто  + ДанныеСтроки.МассаНетто;
	
КонецПроцедуры 

// Процедура формирует итоговые данные для вывода в подвал.
//
Процедура ДобавитьИтоговыеДанныеПодвалаТТН(ИтоговыеСуммы, ВсегоНомеров)
	
	ИтоговыеСуммы.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", ЧислоПрописью(ВсегоНомеров, ,",,,,,,,,0"));
	ИтоговыеСуммы.Вставить("СуммаПрописью", СформироватьСуммуПрописью(ИтоговыеСуммы.ИтогоСумма));
	
КонецПроцедуры // ДобавитьИтоговыеДанныеПодвала()

// Процедура заполнения реквизитов строки товара.
//
// Параметры:
//	ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа.
//	СтрокаТовары - ВыборкаИзРезультатаЗапроса - Текущая строка товаров.
//	ДанныеСтроки - Структура - Данные строки товаров.
//	ОбластьМакета - ОбластьЯчеекТабличногоДокумента - Область для вывода строки товаров.
//	ТабличныйДокумент - Табличный документа.
//
Процедура ЗаполнитьРеквизитыСтрокиТовараТТН(ДанныеПечати, СтрокаТовары, ДанныеСтроки, ОбластьМакета, ЕдиницаИзмеренияВеса = Неопределено)
	
	ОбластьМакета.Параметры.ТоварНаименование = ПолучитьПредставлениеНоменклатурыДляПечати(СтрокаТовары.ТоварНаименование);
		
	ОбластьМакета.Параметры.ТоварКод = СтрокаТовары.ТоварКод;
	
	Если ЕдиницаИзмеренияВеса <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
			ДанныеСтроки.МассаБрутто = 0;
			ДанныеСтроки.МассаНетто = 0;
		Иначе
			ДанныеСтроки.МассаБрутто = СтрокаТовары.МассаБрутто;
			ДанныеСтроки.МассаНетто = СтрокаТовары.МассаНетто;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеСтроки.Сумма   = Окр((СтрокаТовары.Сумма + ?(ДанныеПечати.ЦенаВключаетНДС, 0, СтрокаТовары.СуммаНДС)), 2);
	
	ДанныеСтроки.Цена = ?(СтрокаТовары.Количество = 0, СтрокаТовары.Цена, ДанныеСтроки.Сумма / СтрокаТовары.Количество);
	
	Если СтрокаТовары.Весовой Тогда
		
		ДанныеСтроки.Мест = 0;
		ДанныеСтроки.Количество  = 0;
		
		ОбластьМакета.Параметры.Цена = ДанныеСтроки.Цена;
		ОбластьМакета.Параметры.Сумма = ДанныеСтроки.Сумма;
		ОбластьМакета.Параметры.Количество = 0;
		ОбластьМакета.Параметры.КоличествоМест = 0;
		ОбластьМакета.Параметры.БазоваяЕдиницаНаименование = "";
		ОбластьМакета.Параметры.ВидУпаковки = "";
		ОбластьМакета.Параметры.МассаНетто = СтрокаТовары.МассаНетто;
		
	Иначе
		ДанныеСтроки.Мест = СтрокаТовары.КоличествоМест;
		ДанныеСтроки.Количество  = СтрокаТовары.Количество;
		
		ОбластьМакета.Параметры.Цена = ДанныеСтроки.Цена;
		ОбластьМакета.Параметры.Сумма = ДанныеСтроки.Сумма;
		ОбластьМакета.Параметры.Количество = ДанныеСтроки.Количество;
		ОбластьМакета.Параметры.КоличествоМест = ДанныеСтроки.Мест;
		ОбластьМакета.Параметры.БазоваяЕдиницаНаименование = СтрокаТовары.БазоваяЕдиницаНаименование;
		ОбластьМакета.Параметры.ВидУпаковки = СтрокаТовары.ВидУпаковки;
		ОбластьМакета.Параметры.МассаНетто = 0;
	КонецЕсли;
		
КонецПроцедуры // ЗаполнитьРеквизитыСтрокиТовара()

// Процедура заполнения реквизитов шапки ТТН.
//
// Параметры:
//	ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа.
//	Макет - Макет ТТН
//	ТабличныйДокумент - Табличный документ.
//
Процедура ЗаполнитьРеквизитыШапкиТТН(ДанныеПечати, Макет, ТабличныйДокумент)
	
	// Выводим общие реквизиты шапки.
	СведенияОПокупателе       = СведенияОЮрФизЛице(ДанныеПечати.Контрагент,       ДанныеПечати.Дата);
	СведенияОГрузополучателе  = СведенияОЮрФизЛице(ДанныеПечати.Грузополучатель,  ДанныеПечати.Дата);
	СведенияОГрузоотправитель = СведенияОЮрФизЛице(ДанныеПечати.Грузоотправитель, ДанныеПечати.Дата);
	СведенияОПоставщике       = СведенияОЮрФизЛице(ДанныеПечати.Организация,      ДанныеПечати.Дата);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	ОбластьМакета.Параметры.НомерДокумента = ДанныеПечати.Номер;
	ОбластьМакета.Параметры.ДатаДокумента  = ДанныеПечати.Дата;
	
	Если ДанныеПечати.Организация = ДанныеПечати.Грузоотправитель Тогда
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ОписаниеОрганизации(СведенияОПоставщике,
		    "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны");
	Иначе
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ОписаниеОрганизации(СведенияОГрузоотправитель, 
			"ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны");
	КонецЕсли;
	
	ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ОписаниеОрганизации(СведенияОГрузополучателе, 
		"ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	
	ОбластьМакета.Параметры.ПредставлениеПлательщика = ОписаниеОрганизации(СведенияОПокупателе);
	
	// Выводим всевозможные коды
	ОбластьМакета.Параметры.ОрганизацияПоОКПО          = СведенияОГрузоотправитель.КодПоОКПО;
	ОбластьМакета.Параметры.ГрузополучательПоОКПО      = СведенияОГрузополучателе.КодПоОКПО;
	ОбластьМакета.Параметры.ПлательщикПоОКПО           = СведенияОПокупателе.КодПоОКПО;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры // ЗаполнитьРеквизитыШапкиТТН()

// Процедура заполнения реквизитов подвала ТТН.
//
// Параметры:
//	ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа.
//	ИтоговыеСуммы - Структура - Структура итоговых сумм документа.
//	Макет - Макет ТТН
//	ТабличныйДокумент - Табличный документ.
//
Процедура ЗаполнитьРеквизитыПодвалаТТН(ДанныеПечати, ИтоговыеСуммы, Макет, ТабличныйДокумент, ЕдиницаИзмеренияВеса = Неопределено)
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		
	ПолнаяДатаДокумента = Формат(ДанныеПечати.Дата, "ДФ=""дд ММММ гггг """"года""""""");
	ДлинаСтроки = СтрДлина(ПолнаяДатаДокумента);
	ПервыйРазделитель = Найти(ПолнаяДатаДокумента, " ");
	ВторойРазделитель = Найти(Прав(ПолнаяДатаДокумента, ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
	ОбластьМакета.Параметры.ДатаДокументаДень = """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель -1 ) + """";
	ОбластьМакета.Параметры.ДатаДокументаМесяц = Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1);
	ОбластьМакета.Параметры.ДатаДокументаГод = Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель);
	
	// Руководители
	Руководители = ФормированиеПечатныхФормСервер.ОтветственныеЛицаОрганизаций(ДанныеПечати.Руководители, ДанныеПечати.Дата);
	
	ОбластьМакета.Параметры.ФИОГлавБухгалтера     = ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(Руководители.ГлавныйБухгалтер);
	ОбластьМакета.Параметры.ФИОРуководителя       = ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(Руководители.Руководитель);
	ОбластьМакета.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;
		
	// Доверенность
	ОбластьМакета.Параметры.ДоверенностьНомер     = ДанныеПечати.ДоверенностьНомер;
	ОбластьМакета.Параметры.ДоверенностьДата      = Формат(ДанныеПечати.ДоверенностьДата, "ДФ='дд ММММ гггг'");
	ОбластьМакета.Параметры.ДоверенностьВыдана    = ДанныеПечати.ДоверенностьВыдана;
	ОбластьМакета.Параметры.ДоверенностьЧерезКого = ДанныеПечати.ДоверенностьЛицо;
	
	Если ИтоговыеСуммы.ИтогоМест > 0 Тогда
		ОбластьМакета.Параметры.ВсегоМестПрописью = ЧислоПрописью(ИтоговыеСуммы.ИтогоМест, ,",,,,,,,,0");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) И ИтоговыеСуммы.ИтогоМассаБрутто > 0 Тогда
		
		ОбластьМакета.Параметры.МассаГрузаБуттоПрописью = ЧислоПрописью(ИтоговыеСуммы.ИтогоМассаБрутто, ,",,,,,,,,0")+ " " + СокрЛП(ЕдиницаИзмеренияВеса) + ".";
		            
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) И ИтоговыеСуммы.ИтогоМассаНетто > 0 Тогда
		
		ОбластьМакета.Параметры.МассаГрузаНеттоПрописью = ЧислоПрописью(ИтоговыеСуммы.ИтогоМассаНетто, ,",,,,,,,,0")+ " " + СокрЛП(ЕдиницаИзмеренияВеса) + ".";
		            
	КонецЕсли;
	
	ОбластьМакета.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписейПрописью;
	ОбластьМакета.Параметры.ВсегоНаименованийПрописью = ЧислоПрописью(ДанныеПечати.КоличествоНаименований, ,",,,,,,,,0");
	ОбластьМакета.Параметры.СуммаПрописью = ИтоговыеСуммы.СуммаПрописью;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры // ЗаполнитьРеквизитыПодвалаТТН()

// Процедура заполнения реквизитов подвала ТТН.
//
// Параметры:
//	ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа.
//	ИтоговыеСуммы - Структура - Структура итоговых сумм документа.
//	Макет - Макет ТТН
//	ТабличныйДокумент - Табличный документ.
//
Процедура ЗаполнитьРеквизитыТранспортногоРазделаТТН(ДанныеПечати, Макет, ОбластьМакета)
	
	ОбластьМакета.Параметры.НомерДокумента = ДанныеПечати.Номер;
	
	ОбластьМакета.Параметры.ПредставлениеВодителя     = ФамилияИнициалыФизЛица(ДанныеПечати.Водитель);	
	
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);	
	
	СтандартнаяКарточка  = ДанныеПечати.ЛицензионнаяКарточка = "Стандартная";
	ОграниченнаяКарточка = ДанныеПечати.ЛицензионнаяКарточка = "Ограниченная";
	
	Если СтандартнаяКарточка
		Или ОграниченнаяКарточка Тогда
		ШрифтСтандарт   = Новый Шрифт(ОбластьМакета.Области.Стандарт.Шрифт, , , , , ,Не СтандартнаяКарточка);
		ШрифтОграничено = Новый Шрифт(ОбластьМакета.Области.Стандарт.Шрифт, , , , , ,Не ОграниченнаяКарточка);
	КонецЕсли;

	ОбластьМакета.Области.Стандарт.Шрифт   = ШрифтСтандарт;
	ОбластьМакета.Области.Ограничено.Шрифт = ШрифтОграничено;
	
КонецПроцедуры // ЗаполнитьРеквизитыПодвалаТТН()

// Процедура формирования печатной формы Переоценка товаров.
//
Процедура СформироватьПечатнуюФормуПереоценкиТоваров(МассивОбъектов, ОбъектыПечати, ПараметрыПечати, ТабДокумент) Экспорт
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ПереоценкаТоваров");
	ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	МассивМагазинов = ОпределитьМассивМагазиновДляПереоценки(ПараметрыПечати);
	
	ПервыйДокумент = Истина;
	Для Каждого ДокументПереоценки Из МассивОбъектов Цикл
		
		Для Каждого Магазин Из МассивМагазинов Цикл
			
			Если Не ПервыйДокумент Тогда
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ПервыйДокумент = Ложь;
			
			
			НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
			
			ИсходныеДанные = Новый ТаблицаЗначений;
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("Организация", ПараметрыПечати.Организация);
			СтруктураПараметров.Вставить("Склад",       ПараметрыПечати.Склад);
			СтруктураПараметров.Вставить("Магазин",     Магазин);
			СтруктураПараметров.Вставить("Регистратор", ДокументПереоценки);
			СтруктураПараметров.Вставить("ДатаНачала",  ДокументПереоценки.Дата -1);
			СтруктураПараметров.Вставить("ДатаОкончания", ДокументПереоценки.Дата);
			
			//ЗапасыСервер.ПолучитьДанныеТОРГ29(СтруктураПараметров, ИсходныеДанные);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
			ОбластьМакета.Параметры.ТекстЗаголовка = ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(ДокументПереоценки, НСтр("ru = 'Переоценка товаров'"));
			ТабДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Организация");
			ОбластьМакета.Параметры.Организация = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ПараметрыПечати.Организация, ДокументПереоценки.Дата), "ПолноеНаименование,");
			ТабДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Магазин");
			ОбластьМакета.Параметры.Магазин = Магазин;
			ТабДокумент.Вывести(ОбластьМакета);
			
			Если ЗначениеЗаполнено(ПараметрыПечати.Склад) Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("Склад");
				ОбластьМакета.Параметры.Склад = ПараметрыПечати.Склад;
				ТабДокумент.Вывести(ОбластьМакета);
			КонецЕсли;
			
			ОбластьМакета = Макет.ПолучитьОбласть("Основание");
			ОбластьМакета.Параметры.Основание = ДокументПереоценки;
			ТабДокумент.Вывести(ОбластьМакета);
			
			// Шапка таблицы
			ИмяДополнительнойКолонки = ФормированиеПечатныхФормСервер.ИмяДополнительнойКолонки();
			ВыводитьКоды = ?(ЗначениеЗаполнено(ИмяДополнительнойКолонки),Истина, Ложь);
			
			ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|ОбластьНомера");
			ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|ОбластьКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|ОбластьДанных");
			
			ТабДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ОбластьКодов.Параметры.ИмяКолонкиКодов = ИмяДополнительнойКолонки;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьДанных);
			
			// Строки таблицы
			ОбластьНомера = Макет.ПолучитьОбласть("Строка|ОбластьНомера");
			ОбластьКодов  = Макет.ПолучитьОбласть("Строка|ОбластьКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("Строка|ОбластьДанных");
			
			ИтогОтклонениеСтоимости = 0;
			НомерСтроки = 0;
			Приход = 0;
			Расход = 0;
			
			
			Для Каждого СтрокаТовары Из ИсходныеДанные Цикл
				
				НомерСтроки = НомерСтроки + 1;
				
				ОбластьНомера.Параметры.НомерСтроки = НомерСтроки;
				ТабДокумент.Вывести(ОбластьНомера);
				Если ВыводитьКоды Тогда
					Если ИмяДополнительнойКолонки = "Артикул" Тогда
						ОбластьКодов.Параметры.Артикул = СтрокаТовары.Артикул;
					Иначе
						ОбластьКодов.Параметры.Артикул = СтрокаТовары.Код;
					КонецЕсли;
					ТабДокумент.Присоединить(ОбластьКодов);
				КонецЕсли;
				ОбластьДанных.Параметры.Заполнить(СтрокаТовары);
				
				Если ИспользоватьХарактеристики Тогда
					ОбластьДанных.Параметры.Товар = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
					СтрокаТовары.Номенклатура,
					СтрокаТовары.Характеристика);
				Иначе
					ОбластьДанных.Параметры.Товар = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
					СтрокаТовары.Номенклатура);
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьДанных);
				
				ИтогОтклонениеСтоимости = ИтогОтклонениеСтоимости + СтрокаТовары.Отклонение;
				Если СтрокаТовары.Отклонение > 0 Тогда 
					Приход = Приход + СтрокаТовары.Отклонение;
				Иначе
					Расход = Расход + СтрокаТовары.Отклонение;
				КонецЕсли;
				
			КонецЦикла;
			
			// Итог
			ОбластьНомера = Макет.ПолучитьОбласть("Итог|ОбластьНомера");
			ОбластьКодов  = Макет.ПолучитьОбласть("Итог|ОбластьКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("Итог|ОбластьДанных");
			
			ТабДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ОбластьДанных.Параметры.ИтогОтклонениеСтоимости = ФормированиеПечатныхФормСервер.ФорматСумм(ИтогОтклонениеСтоимости);
			ОбластьДанных.Параметры.Приход = ФормированиеПечатныхФормСервер.ФорматСумм(Приход);
			ОбластьДанных.Параметры.Расход = ФормированиеПечатныхФормСервер.ФорматСумм(-Расход);
			ТабДокумент.Присоединить(ОбластьДанных);
			
			
			ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
			ОбластьМакета.Параметры.Ответственный = ДокументПереоценки.Ответственный;
			ТабДокумент.Вывести(ОбластьМакета);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ДокументПереоценки);
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет табличный документ Справка Б к ТТН.
//
Процедура ЗаполнитьТабличныйДокументТТНСправкаБ(ТабличныйДокумент, Запрос, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент.ПолеСверху = 15;
	ТабличныйДокумент.ПолеСлева = 5;
	ТабличныйДокумент.ПолеСнизу = 15;
	ТабличныйДокумент.ПолеСправа = 5;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ДанныеПечати = Запрос.Выполнить().Выбрать();
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ТТН_СправкаБ");
	ОсновнаяОбласть = Макет.ПолучитьОбласть("ОсновнаяОбласть");
	
	ПервыйДокумент = Истина;
	Пока ДанныеПечати.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		Иначе
			ПервыйДокумент = Ложь;
		КонецЕсли;
		
		//ЗаполнитьЗначенияСвойств(ОсновнаяОбласть.Параметры, ДанныеПечати);
		
		СведенияОПродавце = СведенияОЮрФизЛице(ДанныеПечати.Продавец, ДанныеПечати.ДатаТТН);
		СведенияОПокупателе = СведенияОЮрФизЛице(ДанныеПечати.Покупатель, ДанныеПечати.ДатаТТН);
		
		// обращение №733, нужно брать полное наименование
		ОсновнаяОбласть.Параметры.НаименованиеПродавца = ДанныеПечати.Продавец.НаименованиеПолное;
			//ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование");
		ОсновнаяОбласть.Параметры.НаименованиеПокупателя = ДанныеПечати.Покупатель.НаименованиеПолное;
			//ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование");
			
		// обращение №733 адрес отправителя из подразделения
		АдресОтправителяСогласноЛицензии = Неопределено;
		
		Если Не ДанныеПечати.Магазин.ДополнительныеРеквизиты.Найти(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Адрес согласно алкогольной лицензии"), "Свойство") = Неопределено Тогда
			АдресОтправителяСогласноЛицензии = ДанныеПечати.Магазин.ДополнительныеРеквизиты.Найти(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Адрес согласно алкогольной лицензии"), "Свойство").Значение
		КонецЕсли;
		
		ЛицензияОтправителя = Неопределено;
		ЛицензияОтправителяВыборка = Справочники.ЛицензииПоставщиковАлкогольнойПродукции.Выбрать(,ДанныеПечати.Магазин);
		
		Если ЛицензияОтправителяВыборка.Следующий() Тогда
			ЛицензияОтправителя = ЛицензияОтправителяВыборка;
		КонецЕсли;
		
		ОсновнаяОбласть.Параметры.АдресПродавца = ?(АдресОтправителяСогласноЛицензии = Неопределено, ОписаниеОрганизации(СведенияОПродавце, "ФактическийАдрес"), АдресОтправителяСогласноЛицензии);
		//ОписаниеОрганизации(СведенияОПродавце, "ФактическийАдрес");
		ОсновнаяОбласть.Параметры.АдресПокупателя =
		ОписаниеОрганизации(СведенияОПокупателе, "ФактическийАдрес");
		
		Если ЛицензияОтправителя = Неопределено Тогда
			ОсновнаяОбласть.Параметры.СтрокаЛицензииПродавца =
			ДанныеПечати.ЛицензияПродавцаНаименование +
			?(ЗначениеЗаполнено(ДанныеПечати.ЛицензияПродавцаДатаНачала), ", срок действия лицензии с " + Формат(ДанныеПечати.ЛицензияПродавцаДатаНачала, "ДЛФ=D"), "") +
			?(ЗначениеЗаполнено(ДанныеПечати.ЛицензияПродавцаДатаОкончания), " по " + Формат(ДанныеПечати.ЛицензияПродавцаДатаОкончания, "ДЛФ=D"), "") +
			?(ЗначениеЗаполнено(ДанныеПечати.ЛицензияПродавцаВыдана), " выдана " + ДанныеПечати.ЛицензияПродавцаВыдана, "");
		Иначе
			ОсновнаяОбласть.Параметры.СтрокаЛицензииПродавца =
			ЛицензияОтправителя.Наименование +
			?(ЗначениеЗаполнено(ЛицензияОтправителя.ДатаНачала), ", срок действия лицензии с " + Формат(ЛицензияОтправителя.ДатаНачала, "ДЛФ=D"), "") +
			?(ЗначениеЗаполнено(ЛицензияОтправителя.ДатаОкончания), " по " + Формат(ЛицензияОтправителя.ДатаОкончания, "ДЛФ=D"), "") +
			?(ЗначениеЗаполнено(ЛицензияОтправителя.КемВыдана), " выдана " + ЛицензияОтправителя.КемВыдана, "");
		КонецЕсли;
		
		ОсновнаяОбласть.Параметры.СтрокаЛицензииПокупателя =
			ДанныеПечати.ЛицензияПокупателяНаименование +
			?(ЗначениеЗаполнено(ДанныеПечати.ЛицензияПокупателяДатаНачала), ", срок действия лицензии с " + Формат(ДанныеПечати.ЛицензияПокупателяДатаНачала, "ДЛФ=D"), "") +
			?(ЗначениеЗаполнено(ДанныеПечати.ЛицензияПокупателяДатаОкончания), " по " + Формат(ДанныеПечати.ЛицензияПокупателяДатаОкончания, "ДЛФ=D"), "") +
			?(ЗначениеЗаполнено(ДанныеПечати.ЛицензияПокупателяВыдана), " выдана " + ДанныеПечати.ЛицензияПокупателяВыдана, "");
			
		ОсновнаяОбласть.Параметры.КодСтраныПродавца = ДанныеПечати.КодСтраныПродавца;
		ОсновнаяОбласть.Параметры.КодСтраныПокупателя = ДанныеПечати.КодСтраныПокупателя;
		
		ОсновнаяОбласть.Параметры.ИННКПППродавца =
			ОписаниеОрганизации(СведенияОПродавце, "ИНН") +
			" / " + ОписаниеОрганизации(СведенияОПродавце, "КПП");
		ОсновнаяОбласть.Параметры.ИННКПППокупателя =
			ОписаниеОрганизации(СведенияОПокупателе, "ИНН") +
			" / " + ОписаниеОрганизации(СведенияОПокупателе, "КПП");
		
		ОсновнаяОбласть.Параметры.НаименованиеПродукции = ДанныеПечати.НоменклатураНаименование;
		
		ОсновнаяОбласть.Параметры.Количество = Формат(ДанныеПечати.КоличествоДАЛ, "ЧРГ=' '") + " дал. / " +
			Формат(ДанныеПечати.КоличествоЕдиниц, "ЧРГ=' '") + " " + ДанныеПечати.НаименованиеЕдиницы;
			
		// обращение №733 номер без удаление префикса
		ОсновнаяОбласть.Параметры.НомерТТН = ДанныеПечати.НомерТТН;
		//ОсновнаяОбласть.Параметры.НомерТТН = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеПечати.НомерТТН, Ложь, Истина);
		
		ОсновнаяОбласть.Параметры.ДатаТТН = ДанныеПечати.ДатаТТН;
		
		РуководителиПродавца = ФормированиеПечатныхФормСервер.ОтветственныеЛицаОрганизаций(
												ДанныеПечати.Продавец, ДанныеПечати.ДатаТТН);
		ОсновнаяОбласть.Параметры.ОтветственныйПродавца = Строка(РуководителиПродавца.РуководительДолжность) + " "
			+ ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(РуководителиПродавца.Руководитель);
			
		РуководителиПокупателя = ФормированиеПечатныхФормСервер.ОтветственныеЛицаОрганизаций(
												ДанныеПечати.Покупатель, ДанныеПечати.ДатаТТН);
		ОсновнаяОбласть.Параметры.ОтветственныйПокупателя = Строка(РуководителиПокупателя.РуководительДолжность) + " "
			+ ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(РуководителиПокупателя.Руководитель);
		
		ТабличныйДокумент.Вывести(ОсновнаяОбласть);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТабличныйДокументТТНСправкаБ()

Функция ОпределитьМассивМагазиновДляПереоценки(ПараметрыПечати)
	
	МассивМагазинов = Новый Массив;
	
	Если ЗначениеЗаполнено(ПараметрыПечати.Магазин) Тогда
		
		МассивМагазинов.Добавить(ПараметрыПечати.Магазин);
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ПараметрыПечати.Магазин) И ЗначениеЗаполнено(ПараметрыПечати.ФорматМагазинов) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Магазины.Ссылка КАК Магазин
		|ИЗ
		|	Справочник.Магазины КАК Магазины
		|ГДЕ
		|	Магазины.ФорматМагазина = &ФорматМагазина";
		
		Запрос.УстановитьПараметр("ФорматМагазина", ПараметрыПечати.ФорматМагазинов);
		
		РезультатЗапроса = Запрос.Выполнить();
		МассивМагазинов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Магазин");
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ПараметрыПечати.Магазин) И НЕ ЗначениеЗаполнено(ПараметрыПечати.ФорматМагазинов) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Магазины.Ссылка КАК Магазин
		|ИЗ
		|	Справочник.Магазины КАК Магазины";
		
		РезультатЗапроса = Запрос.Выполнить();
		МассивМагазинов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Магазин");
		
	КонецЕсли;
	
	Возврат МассивМагазинов;
	
КонецФункции

// Задает область печати объекта в табличном документе. Необходимо использовать при выводе нескольких печатных форм
// в одном табличном документе для возможности печати комплектов документов, а также для возможности сохранения
// печатных форм в отдельных файлах.
// Необходимо вызывать после формирования каждой печатной формы в табличном документе.
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент - печатная форма;
//  НомерСтрокиНачало - Число - позиция начала очередной области в документе;
//  ОбъектыПечати - см. УправлениеПечатьюПереопределяемый.ПриПечати.ОбъектыПечати
//  Ссылка - ЛюбаяСсылка - объект печати.
//
// Пример:
//  Пока ВыборкаПоДокументам.Следующий() Цикл
//    НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
//    // ... вывод печатной формы в табличный документ ...
//    УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
//  КонецЦикла;
//
Процедура ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Ссылка) Экспорт
	
	//Если Не ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Ссылка)) Тогда
	//	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//	НСтр("ru = 'Недопустимое значение параметра ""Ссылка"",
	//		|ожидалось значение ссылочного типа, передано значение: ""%1"" (тип %2)'"), Ссылка, ТипЗнч(Ссылка));
	//	Попытка // Такая конструкция нужна для проброса стека в журнал регистрации.
	//		ВызватьИсключение ТекстСообщения;
	//	Исключение
	//		ЗаписьЖурналаРегистрации(НСтр("ru = 'Печать'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, , ,
	//			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	//	КонецПопытки;
	//	Возврат;
	//КонецЕсли;
	
	Элемент = ОбъектыПечати.НайтиПоЗначению(Ссылка);
	Если Элемент = Неопределено Тогда
		ИмяОбласти = "Документ_" + Формат(ОбъектыПечати.Количество() + 1, "ЧН=; ЧГ=");
		ОбъектыПечати.Добавить(Ссылка, ИмяОбласти);
	Иначе
		ИмяОбласти = Элемент.Представление;
	КонецЕсли;
	
	НомерСтрокиОкончание = ТабличныйДокумент.ВысотаТаблицы;
	ТабличныйДокумент.Область(НомерСтрокиНачало, , НомерСтрокиОкончание, ).Имя = ИмяОбласти;
	
	Если Не УправлениеПечатью.НастройкиПечати().ИспользоватьПодписиИПечати Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Рисунок Из ТабличныйДокумент.Рисунки Цикл
		ЭтоПодписьИПечать = Ложь;
		Для Каждого ИмяОбластиСПодписьюИПечатью Из УправлениеПечатью.ПрефиксыИменОбластейСПодписьюИПечатью() Цикл
			Если СтрНайти(Рисунок.Имя, ИмяОбластиСПодписьюИПечатью) > 0 Тогда
				ЭтоПодписьИПечать = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ЭтоПодписьИПечать Тогда
			Продолжить;
		КонецЕсли;
		Если Рисунок.ТипРисунка = ТипРисункаТабличногоДокумента.Картинка И СтрНайти(Рисунок.Имя, "_Документ_") = 0 Тогда
			Рисунок.Имя = Рисунок.Имя + "_" + ИмяОбласти;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
