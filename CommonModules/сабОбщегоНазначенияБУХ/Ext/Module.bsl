
Процедура сабОбработкиЗаполненияУчпетныхДокументовОбработкаЗаполнения(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	сабСоответствиеСчетовИСубконто.СчетБУ КАК СчетБУ,
	               |	сабСоответствиеСчетовИСубконто.СубконтоБУ1 КАК СубконтоБУ1,
	               |	сабСоответствиеСчетовИСубконто.СубконтоБУ2 КАК СубконтоБУ2,
	               |	сабСоответствиеСчетовИСубконто.СубконтоБУ3 КАК СубконтоБУ3,
	               |	сабСоответствиеСчетовИСубконто.СчетУУ КАК СчетУУ,
	               |	сабСоответствиеСчетовИСубконто.СубконтоУУ1 КАК СубконтоУУ1,
	               |	сабСоответствиеСчетовИСубконто.СубконтоУУ2 КАК СубконтоУУ2,
	               |	сабСоответствиеСчетовИСубконто.СубконтоУУ3 КАК СубконтоУУ3,
	               |	сабСоответствиеСчетовИСубконто.Комментарии КАК Комментарии,
	               |	сабСоответствиеСчетовИСубконто.ЗначениеСубконтоУУ1 КАК ЗначениеСубконтоУУ1,
	               |	сабСоответствиеСчетовИСубконто.ЗначениеСубконтоУУ2 КАК ЗначениеСубконтоУУ2,
	               |	сабСоответствиеСчетовИСубконто.ЗначениеСубконтоУУ3 КАК ЗначениеСубконтоУУ3
	               |ИЗ
	               |	РегистрСведений.сабСоответствиеСчетовИСубконто КАК сабСоответствиеСчетовИСубконто";
	
	Результат = Запрос.Выполнить();
	ВыборкаСоотв = Результат.Выгрузить();
	
	СоотвПодразделений = ПолучитьСоответствиеОрганизацийПодразделений();

	ЗаполнитьУЧ_Реализацию(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);
	ЗаполнитьУЧ_Реализацию2(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);
	ЗаполнитьУЧ_РеализациюZ(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);
	ЗаполнитьУЧ_РеализациюZРозн(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);   
	ЗаполнитьРеализациюУслугПоПереработке(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);

	ЗаполнитьУЧ_РеализациюОтчетКомиссионера(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);
	
	ЗаполнитьУЧ_Поступление(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);

	ЗаполнитьУЧ_ДвижДССписРс(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);
	
	ЗаполнитьУЧ_ДвижДСПостРс(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);

	ЗаполнитьУЧ_ДвижДСРКО(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);
	
	ЗаполнитьУЧ_ДвижДСПКО(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);
		
	ЗаполнитьУЧ_Операция(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);
	
	ЗаполнитьУЧ_Списание(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);
	ЗаполнитьУЧ_Списание2(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);
	
	ЗаполнитьУЧ_ПеремещениеМатериаловВПроизводство(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);
	ЗаполнитьУЧ_ПеремещениеМатериаловВПроизводство2(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);
	
	ЗаполнитьУЧ_ПеремещениеМатериаловВЭксплуатацию(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);

	ЗаполнитьУЧ_СписаниеМатериаловИзЭксплуатации(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);

	ЗаполнитьУЧ_ПеремещениеТоваров(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);
	
	ЗаполнитьУЧ_ВыпускПродукции(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);
	ЗаполнитьУЧ_ВыпускПродукции2(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);
	ЗаполнитьУЧ_ВыпускПродукции3(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);
	
	ЗаполнитьУЧ_АвансовыйОтчет(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);
	
	ЗаполнитьУЧ_Возврат(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);
	
	ЗаполнитьУЧ_ВозвратТоваровПоставщику(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);
	
	ЗаполнитьУЧ_КорректировкаПоступления(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);
	
	ЗаполнитьУЧ_КорректировкаРеализации(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);
	
	ЗаполнитьУЧ_Оприходование(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений); 
	
	ЗаполнитьУЧ_НачислениеЗП(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений); 
	
	ЗаполнитьУЧ_ВыплатаЗП(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений); 
	
	//Контроль остатков с учетом бронирования{
	НастройкаБронированиеТоваров = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройкиКонстанты("сабБронированиеТоваровВЗаказах");
	Если НастройкаБронированиеТоваров Тогда
		Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_Реализация") И ЗначениеЗаполнено(ДанныеЗаполнения)
			И Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ДанныеЗаполнения)) Тогда
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Заказ", ДанныеЗаполнения.Метаданные())
				И ЗначениеЗаполнено(ДанныеЗаполнения.Заказ) Тогда 
				Источник.ДополнительныеСвойства.Вставить("ЗаказСБронированием",ДанныеЗаполнения.Заказ);
			ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("СчетНаОплатуПокупателю", ДанныеЗаполнения.Метаданные()) 
				И ЗначениеЗаполнено(ДанныеЗаполнения.СчетНаОплатуПокупателю) Тогда 	  
				Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Заказ", ДанныеЗаполнения.СчетНаОплатуПокупателю.Метаданные())
					И ЗначениеЗаполнено(ДанныеЗаполнения.СчетНаОплатуПокупателю.Заказ) Тогда 
					Источник.ДополнительныеСвойства.Вставить("ЗаказСБронированием",ДанныеЗаполнения.СчетНаОплатуПокупателю.Заказ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	//}Контроль остатков с учетом бронирования
	
КонецПроцедуры

Процедура ЗаполнитьУЧ_ВыпускПродукции(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_ВыпускПродукции") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") Тогда
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, РучнаяКорректировка");
		Источник.Дата = ДанныеЗаполнения.Дата;
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.Организация);
		Если ЗначениеЗаполнено(СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации)) Тогда
			Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации);
		КонецЕсли;		
		ВыделятьНДС = Источник.Предприятие.УчетнаяПолитика.УчетНДС;
		Если Не ВыделятьНДС Тогда
			Источник.УчитыватьНДС = Ложь;
		Иначе
			Источник.СуммаВключаетНДС = Истина;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Материалы.Количество() Тогда
			Источник.ВидОперации = Перечисления.ВидыОперацииВыпускаПродукции.ПроизводствоПоСпецификации;
		Иначе	
			Источник.ВидОперации = Перечисления.ВидыОперацииВыпускаПродукции.Производство;
		КонецЕсли;
		
		Источник.ТабличнаяЧасть.Очистить();
		Источник.Услуги.Очистить();
		Источник.Материалы.Очистить();
		Источник.ВозвращенныеМатериалы.Очистить();
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.Продукция Цикл
			
			НайдСтроки =  Источник.ТабличнаяЧасть.НайтиСтроки(Новый Структура("Номенклатура", ТекСтрока.Номенклатура));
			Если НайдСтроки.Количество() Тогда
				НоваяСтрока = НайдСтроки[0];
				НоваяСтрока.Количество = НоваяСтрока.Количество + ТекСтрока.Количество;
			Иначе
				НоваяСтрока = Источник.ТабличнаяЧасть.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				НоваяСтрока.УИД = Новый УникальныйИдентификатор;
			КонецЕсли;
			
			НоваяСтрока.Склад = Источник.Склад;
			НоваяСтрока.Подразделение = Источник.Подразделение;
			
			Если Не НайдСтроки.Количество() Тогда
				
				НайденныеМатериалы = ДанныеЗаполнения.Материалы.НайтиСтроки(Новый Структура("Продукция", ТекСтрока.Номенклатура)); 
				Если Не НайденныеМатериалы.Количество() И ДанныеЗаполнения.Продукция.Количество() = 1 Тогда
					НайденныеМатериалы = ДанныеЗаполнения.Материалы;				
				КонецЕсли;
				Если Не НайденныеМатериалы.Количество() И ДанныеЗаполнения.Продукция.Количество() > 1 И ДанныеЗаполнения.Материалы.Количество() Тогда
					НайденныеМатериалы = ДанныеЗаполнения.Материалы.Выгрузить();
					НайденныеМатериалы.Очистить();
					Для Каждого ТекНайдСтрока Из ТекСтрока.Спецификация.ИсходныеКомплектующие Цикл
						НоваяСтрокаМатер = НайденныеМатериалы.Добавить();
						НоваяСтрокаМатер.Номенклатура = ТекНайдСтрока.Номенклатура;
						КоличВсего = 0;
						Для Каждого ТекНоваяСтрока Из ДанныеЗаполнения.Продукция.НайтиСтроки(Новый Структура("Номенклатура", ТекСтрока.Номенклатура)) Цикл
							КоличВсего = КоличВсего + ТекНоваяСтрока.Количество;
						КонецЦикла;
						НоваяСтрокаМатер.Количество = ТекСтрока.Спецификация.Количество * ТекНайдСтрока.Количество * КоличВсего;
						НайденныеМатериалы2 = ДанныеЗаполнения.Материалы.НайтиСтроки(Новый Структура("Номенклатура", НоваяСтрокаМатер.Номенклатура));
						Для Каждого ТекСтрокаСтатья Из НайденныеМатериалы2 Цикл
							НоваяСтрокаМатер.СтатьяЗатрат = ТекСтрокаСтатья.СтатьяЗатрат;
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
				
				Для каждого ТекСтрокаМатер Из НайденныеМатериалы Цикл
					НоваяСтрокаМатер = Источник.Материалы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаМатер, ТекСтрокаМатер);
					НоваяСтрокаМатер.Материал = ТекСтрокаМатер.Номенклатура;
					НоваяСтрокаМатер.УИДТЧ = НоваяСтрока.УИД;
					НоваяСтрокаМатер.Склад = Источник.Склад;
					
					Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрокаМатер.Счет));
					Для каждого ТекСчет Из Соотв Цикл
						НоваяСтрокаМатер.СчетСписания = ТекСчет.СчетУУ;
						Прервать;
					КонецЦикла; 
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
		//раскидываем количество пропорционально при несовпадении
		Для Каждого ТекСтрока Из ДанныеЗаполнения.Материалы Цикл
			ТекНайдСтроки = ДанныеЗаполнения.Материалы.НайтиСтроки(Новый Структура("Номенклатура", ТекСтрока.Номенклатура));
			Если ТекНайдСтроки.Количество() = 1 Тогда
				ТекНайдНовыеСтроки = Источник.Материалы.НайтиСтроки(Новый Структура("Материал", ТекСтрока.Номенклатура));
				КоличНарастающее = 0;
				КоличВсего = 0;
				ИндексСтроки = 0;
				Для Каждого ТекНоваяСтрока Из ТекНайдНовыеСтроки Цикл
					КоличВсего = КоличВсего + ТекНоваяСтрока.Количество;
				КонецЦикла;
				Для Каждого ТекНоваяСтрока Из ТекНайдНовыеСтроки Цикл
					ИндексСтроки = ИндексСтроки + 1;
					ТекНоваяСтрока.Количество = ТекНоваяСтрока.Количество * (ТекСтрока.Количество / КоличВсего);
					КоличНарастающее = КоличНарастающее + ТекНоваяСтрока.Количество;
					Если ИндексСтроки = ТекНайдНовыеСтроки.Количество() Тогда
						ТекНоваяСтрока.Количество = ТекНоваяСтрока.Количество + (ТекСтрока.Количество - КоличНарастающее);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла; 
		
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗаполнитьУЧ_ВыпускПродукции2(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_ВыпускПродукции") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеИзПереработки") Тогда
		
		ТранслироватьСчетаУчета = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("ТранслироватьСчетаУчетаНоменклатуры");
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, РучнаяКорректировка");
		Источник.Дата = ДанныеЗаполнения.Дата;
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.Организация);
		Если ЗначениеЗаполнено(СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации)) Тогда
			Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации);
		КонецЕсли;
		Источник.ВидОперации = Перечисления.ВидыОперацииВыпускаПродукции.ПоступлениеИзПереработки;
		Источник.УчитыватьНДС = НЕ ДанныеЗаполнения.НДСВключенВСтоимость;
		СуммаВключаетНДС = ДанныеЗаполнения.СуммаВключаетНДС;
		
		ВыделятьНДС = Источник.Предприятие.УчетнаяПолитика.УчетНДС;
		Если Не ВыделятьНДС Тогда
			Источник.УчитыватьНДС = Ложь;
		Иначе
			Источник.СуммаВключаетНДС = Истина;
		КонецЕсли;
		
		ОрганизацияКонтрагент = КонтрагентВОрганизациях(Источник.Контрагент, Источник, ДанныеЗаполнения);
		
		Если ОрганизацияКонтрагент.ЭтоОрганизация Тогда //ВНХ
			Источник.СчетКонтрагента = ПланыСчетов.Учетный.Счет7902(Источник.Предприятие);
			Источник.Контрагент = ОрганизацияКонтрагент.Организация;
			Источник.Договор = ДанныеЗаполнения.ДоговорКонтрагента.УЧ_Договор;
		Иначе
			Источник.Договор = ДанныеЗаполнения.ДоговорКонтрагента;
			Источник.СчетКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента.СчетВзаиморасчетов;
			Если Не ЗначениеЗаполнено(Источник.СчетКонтрагента) Тогда
				Источник.СчетКонтрагента = ПланыСчетов.Учетный.Счет6001();		
			КонецЕсли;
		КонецЕсли;
		
		Источник.ТабличнаяЧасть.Очистить();
		Источник.Услуги.Очистить();
		Источник.Материалы.Очистить();
		Источник.ВозвращенныеМатериалы.Очистить();
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.Продукция Цикл
			НоваяСтрока = Источник.ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.Склад = Источник.Склад;
			НоваяСтрока.Подразделение = Источник.Подразделение;
			НоваяСтрока.УИД = Новый УникальныйИдентификатор;
			
			Если ДанныеЗаполнения.Продукция.Количество() = 1 Тогда
				НайденныеМатериалы = ДанныеЗаполнения.ИспользованныеМатериалы;
			Иначе	
				НайденныеМатериалы = ДанныеЗаполнения.ИспользованныеМатериалы.НайтиСтроки(Новый Структура("Продукция", ТекСтрока.Номенклатура));
			КонецЕсли;
			Для каждого ТекСтрокаМатер Из НайденныеМатериалы Цикл
				НоваяСтрокаМатер = Источник.Материалы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаМатер, ТекСтрокаМатер);
				НоваяСтрокаМатер.Материал = ТекСтрокаМатер.Номенклатура;
				НоваяСтрокаМатер.УИДТЧ = НоваяСтрока.УИД;
				НоваяСтрокаМатер.Склад = Источник.Склад;
				НоваяСтрокаМатер.Продукция = НоваяСтрока.Номенклатура;
				
				Если ТранслироватьСчетаУчета Тогда
					Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрокаМатер.СчетУчета));
					Для каждого ТекСчет Из Соотв Цикл
						НоваяСтрокаМатер.СчетУчета = ТекСчет.СчетУУ;
						Прервать;
					КонецЦикла; 
				Иначе	
					НоваяСтрокаМатер.СчетУчета = Неопределено;	
				КонецЕсли;
				
			КонецЦикла;
			
			НайденныеУслуги = Новый Массив;
			Если ДанныеЗаполнения.Услуги.Количество() = ДанныеЗаполнения.Продукция.Количество() Тогда
				НайденныеУслуги.Добавить(ДанныеЗаполнения.Услуги[ДанныеЗаполнения.Продукция.Индекс(ТекСтрока)]);
			//Иначе	
			//	НайденныеУслуги = ДанныеЗаполнения.Услуги;
			КонецЕсли;
			Для каждого ТекСтрокаУслуги Из НайденныеУслуги Цикл
				НоваяСтрокаУслуги = Источник.Услуги.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаУслуги, ТекСтрокаУслуги);
				
				Если (НЕ СуммаВключаетНДС И (НЕ Источник.УчитыватьНДС Или ВыделятьНДС)) Тогда
					НоваяСтрокаУслуги.Сумма = ТекСтрокаУслуги.Сумма + ТекСтрокаУслуги.СуммаНДС;
					НоваяСтрокаУслуги.Цена = ?(НоваяСтрокаУслуги.Количество, НоваяСтрокаУслуги.Сумма / НоваяСтрокаУслуги.Количество, 0);
				КонецЕсли;
				НоваяСтрокаУслуги.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрокаУслуги.СтавкаНДС);
				
				НоваяСтрокаУслуги.УИДТЧ = НоваяСтрока.УИД;
				НоваяСтрокаУслуги.Продукция = НоваяСтрока.Номенклатура;
			КонецЦикла;
			
		КонецЦикла;
		
		МассивСтрок = Новый Массив;
		Для каждого ТекСтрокаМатер Из ДанныеЗаполнения.ИспользованныеМатериалы Цикл
			МассивСтрок.Добавить(0);
		КонецЦикла;
		
		Если НЕ Источник.Материалы.Количество() И ДанныеЗаполнения.ИспользованныеМатериалы.Количество() Тогда
			Для каждого НоваяСтрока Из Источник.ТабличнаяЧасть Цикл
				Для каждого ТекСтрокаМатер Из ДанныеЗаполнения.ИспользованныеМатериалы Цикл
	
					НоваяСтрокаМатер = Источник.Материалы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаМатер, ТекСтрокаМатер);
					НоваяСтрокаМатер.Материал = ТекСтрокаМатер.Номенклатура;
					НоваяСтрокаМатер.УИДТЧ = НоваяСтрока.УИД;
					НоваяСтрокаМатер.Склад = Источник.Склад;
					НоваяСтрокаМатер.Продукция = НоваяСтрока.Номенклатура;
					
					Если ТранслироватьСчетаУчета Тогда
						Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрокаМатер.СчетУчета));
						Для каждого ТекСчет Из Соотв Цикл
							НоваяСтрокаМатер.СчетУчета = ТекСчет.СчетУУ;
							Прервать;
						КонецЦикла;
					Иначе	
						НоваяСтрокаМатер.СчетУчета = Неопределено;	
					КонецЕсли;
					
					Если Источник.ТабличнаяЧасть.Индекс(ТекСтрокаМатер) = Источник.ТабличнаяЧасть.Количество() - 1 Тогда
						НоваяСтрокаМатер.Количество = ТекСтрокаМатер.Количество - МассивСтрок[ТекСтрокаМатер.НомерСтроки - 1];
					Иначе	
					    НоваяСтрокаМатер.Количество = НоваяСтрока.Количество / Источник.ТабличнаяЧасть.Итог("Количество") * ТекСтрокаМатер.Количество; 
					КонецЕсли;
					МассивСтрок[ТекСтрокаМатер.НомерСтроки - 1] = МассивСтрок[ТекСтрокаМатер.НомерСтроки - 1] + ТекСтрокаМатер.Количество;
					
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		МассивСтрок = Новый Массив;
		МассивСтрок2 = Новый Массив;
		МассивСтрок3 = Новый Массив;
		Для каждого ТекСтрокаМатер Из ДанныеЗаполнения.Услуги Цикл
			МассивСтрок.Добавить(0);
			МассивСтрок2.Добавить(0);
			МассивСтрок3.Добавить(0);
		КонецЦикла;
		
		Если НЕ Источник.Услуги.Количество() И ДанныеЗаполнения.Услуги.Количество() Тогда
			Для каждого НоваяСтрока Из Источник.ТабличнаяЧасть Цикл
				Для каждого ТекСтрокаУслуги Из ДанныеЗаполнения.Услуги Цикл
					
					НоваяСтрокаУслуги = Источник.Услуги.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаУслуги, ТекСтрокаУслуги);
					
					Если (НЕ СуммаВключаетНДС И (НЕ Источник.УчитыватьНДС Или ВыделятьНДС)) Тогда
						НоваяСтрокаУслуги.Сумма = ТекСтрокаУслуги.Сумма + ТекСтрокаУслуги.СуммаНДС;
						НоваяСтрокаУслуги.Цена = ?(НоваяСтрокаУслуги.Количество, НоваяСтрокаУслуги.Сумма / НоваяСтрокаУслуги.Количество, 0);
					КонецЕсли;
					НоваяСтрокаУслуги.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрокаУслуги.СтавкаНДС);
					
					НоваяСтрокаУслуги.УИДТЧ = НоваяСтрока.УИД;
					НоваяСтрокаУслуги.Продукция = НоваяСтрока.Номенклатура;
					
					Если Источник.ТабличнаяЧасть.Индекс(ТекСтрокаУслуги) = Источник.ТабличнаяЧасть.Количество() - 1 Тогда
						НоваяСтрокаУслуги.Сумма = НоваяСтрокаУслуги.Сумма - МассивСтрок[ТекСтрокаУслуги.НомерСтроки - 1];
						НоваяСтрокаУслуги.СуммаНДС = НоваяСтрокаУслуги.СуммаНДС - МассивСтрок2[ТекСтрокаУслуги.НомерСтроки - 1];
						НоваяСтрокаУслуги.Количество = НоваяСтрокаУслуги.Количество - МассивСтрок3[ТекСтрокаУслуги.НомерСтроки - 1];
					Иначе	
						НоваяСтрокаУслуги.Сумма = НоваяСтрока.Количество / Источник.ТабличнаяЧасть.Итог("Количество") * НоваяСтрокаУслуги.Сумма; 
						НоваяСтрокаУслуги.СуммаНДС = НоваяСтрока.Количество / Источник.ТабличнаяЧасть.Итог("Количество") * НоваяСтрокаУслуги.СуммаНДС; 
						НоваяСтрокаУслуги.Количество = НоваяСтрока.Количество / Источник.ТабличнаяЧасть.Итог("Количество") * НоваяСтрокаУслуги.Количество; 
					КонецЕсли;
					МассивСтрок[ТекСтрокаУслуги.НомерСтроки - 1] = МассивСтрок[ТекСтрокаУслуги.НомерСтроки - 1] + НоваяСтрокаУслуги.Сумма;
					МассивСтрок2[ТекСтрокаУслуги.НомерСтроки - 1] = МассивСтрок2[ТекСтрокаУслуги.НомерСтроки - 1] + НоваяСтрокаУслуги.СуммаНДС;
					МассивСтрок3[ТекСтрокаУслуги.НомерСтроки - 1] = МассивСтрок3[ТекСтрокаУслуги.НомерСтроки - 1] + НоваяСтрокаУслуги.Количество;
					
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Для каждого ТекСтрокаМатер Из ДанныеЗаполнения.ВозвращенныеМатериалы Цикл
			
			НоваяСтрокаМатер = Источник.ВозвращенныеМатериалы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаМатер, ТекСтрокаМатер);
			НоваяСтрокаМатер.Материал = ТекСтрокаМатер.Номенклатура;
			НоваяСтрокаМатер.Склад = Источник.Склад;
			
			Если ТранслироватьСчетаУчета Тогда
				Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрокаМатер.СчетУчета));
				Для каждого ТекСчет Из Соотв Цикл
					НоваяСтрокаМатер.СчетУчета = ТекСчет.СчетУУ;
					Прервать;
				КонецЦикла;
			Иначе	
				НоваяСтрокаМатер.СчетУчета = Неопределено;
			КонецЕсли;
			
			Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрокаМатер.СчетПередачи));
			Для каждого ТекСчет Из Соотв Цикл
				НоваяСтрокаМатер.СчетСписания = ТекСчет.СчетУУ;
				Прервать;
			КонецЦикла;
			Если Не ЗначениеЗаполнено(НоваяСтрокаМатер.СчетСписания) Тогда
				НоваяСтрокаМатер.СчетСписания = ПланыСчетов.Учетный.Счет1001();		
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗаполнитьУЧ_ВыпускПродукции3(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_ВыпускПродукции") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.КомплектацияНоменклатуры") Тогда
		
		ТранслироватьСчетаУчета = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("ТранслироватьСчетаУчетаНоменклатуры");
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, РучнаяКорректировка");
		Источник.Дата = ДанныеЗаполнения.Дата;
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие; 
		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.Организация);
		Если ЗначениеЗаполнено(СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации)) Тогда
			Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации);
		КонецЕсли;		
		ВыделятьНДС = Источник.Предприятие.УчетнаяПолитика.УчетНДС;
		Если Не ВыделятьНДС Тогда
			Источник.УчитыватьНДС = Ложь;
		Иначе
			Источник.СуммаВключаетНДС = Истина;
		КонецЕсли;
		
		Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация Тогда
			Источник.ВидОперации = Перечисления.ВидыОперацииВыпускаПродукции.Комплектация;
		Иначе 
			Источник.ВидОперации = Перечисления.ВидыОперацииВыпускаПродукции.Разукомплектация;
		КонецЕсли;
			
		Источник.ТабличнаяЧасть.Очистить();
		Источник.Услуги.Очистить();
		Источник.Материалы.Очистить();
		Источник.ВозвращенныеМатериалы.Очистить();
		
		НоваяСтрока = Источник.ТабличнаяЧасть.Добавить();
		НоваяСтрока.Номенклатура = ДанныеЗаполнения.Номенклатура;
		
		Если ТранслироватьСчетаУчета Тогда
			Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ДанныеЗаполнения.СчетУчета));
			Для каждого ТекСчет Из Соотв Цикл
				НоваяСтрока.СчетУчета = ТекСчет.СчетУУ;
				Прервать;
			КонецЦикла;
		Иначе	
			НоваяСтрока.СчетУчета = Неопределено;	
		КонецЕсли;
		
		НоваяСтрока.Склад = Источник.Склад;
		НоваяСтрока.Подразделение = Источник.Подразделение;
		НоваяСтрока.Количество = 1;
		НоваяСтрока.УИД = Новый УникальныйИдентификатор;
		
		Для каждого ТекСтрокаМатер Из ДанныеЗаполнения.Комплектующие Цикл
			Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация Тогда
				НоваяСтрокаМатер = Источник.Материалы.Добавить();
			Иначе 
				НоваяСтрокаМатер = Источник.ВозвращенныеМатериалы.Добавить();				
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(НоваяСтрокаМатер, ТекСтрокаМатер);
			НоваяСтрокаМатер.Материал = ТекСтрокаМатер.Номенклатура;
			НоваяСтрокаМатер.УИДТЧ = НоваяСтрока.УИД;
			НоваяСтрокаМатер.Склад = Источник.Склад;
			НоваяСтрокаМатер.Продукция = НоваяСтрока.Номенклатура;
			
			Если ТранслироватьСчетаУчета Тогда
				Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрокаМатер.СчетУчета));
				Для каждого ТекСчет Из Соотв Цикл
					НоваяСтрокаМатер.СчетУчета = ТекСчет.СчетУУ;
					Прервать;
				КонецЦикла; 
			Иначе	
				НоваяСтрокаМатер.СчетУчета = Неопределено;	
			КонецЕсли;
			
			Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация Тогда
				Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ДанныеЗаполнения.СчетУчета));
				Для каждого ТекСчет Из Соотв Цикл
					НоваяСтрокаМатер.СчетСписания = ТекСчет.СчетУУ;
					Прервать;
				КонецЦикла;
			КонецЕсли;
						
		КонецЦикла;
				
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗаполнитьУЧ_РеализациюZ(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)

	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_Реализация") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, РучнаяКорректировка, Касса"); 
		Если Не ЗначениеЗаполнено(Источник.Касса) Тогда
			Источник.Касса = ДанныеЗаполнения.Касса;
		КонецЕсли;
		Источник.ВидОперации = Перечисления.ВидыОперацийРеализация.ZОтчет;
		Источник.Дата = ДанныеЗаполнения.Дата;
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		//Источник.Договор = ДанныеЗаполнения.ДоговорКонтрагента;
		Источник.Счет = ПланыСчетов.Учетный.Счет6201();
		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.Организация);
		Если ЗначениеЗаполнено(СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации)) Тогда
			Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации);
		КонецЕсли;
		Источник.СтатьяДДС = ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств;
		Источник.УчитыватьНДС = Истина;
		СуммаВключаетНДС = ДанныеЗаполнения.СуммаВключаетНДС;
		
		ВыделятьНДС = Источник.Предприятие.УчетнаяПолитика.УчетНДС;
		Если Не ВыделятьНДС Тогда
			Источник.УчитыватьНДС = Ложь;
		Иначе
			Источник.СуммаВключаетНДС = Истина;
		КонецЕсли;
		
		Источник.Товары.Очистить();
		Источник.ПрочиеНачисления.Очистить();
		Источник.Услуги.Очистить();
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	РозничнаяПродажа.Ссылка КАК Ссылка,
		               |	РозничнаяПродажаВозврат.Ссылка КАК СсылкаВозврат
		               |ИЗ
		               |	Документ.РозничнаяПродажа КАК РозничнаяПродажа
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа КАК РозничнаяПродажаВозврат
		               |		ПО РозничнаяПродажа.Ссылка = РозничнаяПродажаВозврат.Основание И РозничнаяПродажаВозврат.ВидОперации = Значение(Перечисление.ВидыОперацийРозничнаяПродажа.Возврат) И РозничнаяПродажаВозврат.Проведен = Истина
		               |ГДЕ
		               |	РозничнаяПродажа.ОтчетОРозничныхПродажах = &ОтчетОРозничныхПродажах
		               |	И НЕ РозничнаяПродажа.ВидОперации = Значение(Перечисление.ВидыОперацийРозничнаяПродажа.Возврат)";
		
		Запрос.УстановитьПараметр("ОтчетОРозничныхПродажах", ДанныеЗаполнения.Ссылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		НастройкаФорма2 = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("КонтрольНоменклатурыДляФормы2ВЗаказеКлиента");

		Пока Выборка.Следующий() Цикл
			//ЭтоОплатаФорма2 = Ложь;
			//Если НастройкаФорма2 Тогда
			//	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ОплатаФорма2", Выборка.Ссылка.Метаданные()) Тогда
			//		Если Выборка.Ссылка["ОплатаФорма2"] Тогда
			//			ЭтоОплатаФорма2 = Истина;
			//		КонецЕсли;
			//	КонецЕсли;
			//КонецЕсли;
			
			Для каждого ТекСтрока Из Выборка.Ссылка.Товары Цикл
				НоваяСтрока = Источник.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				НоваяСтрока.СуммаОтгрузки = ТекСтрока.Сумма; 
				//Если ЭтоОплатаФорма2 Тогда
				//	НоваяСтрока.СуммаОтгрузки = ТекСтрока["СуммаФорма2"];
				//	НоваяСтрока.Цена = ТекСтрока["ЦенаФорма2"];
				//	НоваяСтрока.СуммаНДС = ТекСтрока["СуммаНДСФорма2"];
				//	НоваяСтрока.Сумма = ТекСтрока["СуммаФорма2"];
				//	Если (НЕ СуммаВключаетНДС И НЕ Источник.УчитыватьНДС) Тогда
				//		НоваяСтрока.Сумма = ТекСтрока["СуммаФорма2"] + ТекСтрока["СуммаНДСФорма2"];
				//		НоваяСтрока.СуммаОтгрузки =  ТекСтрока["СуммаФорма2"];
				//		НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
				//	КонецЕсли;
				//Иначе
					Если (НЕ СуммаВключаетНДС И (НЕ Источник.УчитыватьНДС Или ВыделятьНДС)) Тогда
						НоваяСтрока.Сумма = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
						НоваяСтрока.СуммаОтгрузки = ТекСтрока.Сумма;
						НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
					КонецЕсли;
				//КонецЕсли;
				НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрока.СтавкаНДС);
				НоваяСтрока.Контрагент = Выборка.Ссылка.Контрагент;
				НоваяСтрока.Договор = Выборка.Ссылка.Договор;
				НоваяСтрока.Касса = Выборка.Ссылка.Касса;
				
				Если ЗначениеЗаполнено(Выборка.СсылкаВозврат) Тогда
					
					//ЭтоОплатаФорма2 = Ложь;
					//Если НастройкаФорма2 Тогда
					//	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ОплатаФорма2", Выборка.СсылкаВозврат.Метаданные()) Тогда
					//		Если Выборка.СсылкаВозврат["ОплатаФорма2"] Тогда
					//			ЭтоОплатаФорма2 = Истина;
					//		КонецЕсли;
					//	КонецЕсли;
					//КонецЕсли;

					НайденныеСтроки = Выборка.СсылкаВозврат.Товары.НайтиСтроки(Новый Структура("Номенклатура", НоваяСтрока.Номенклатура));
					Для каждого ТекНайдСтрока Из НайденныеСтроки Цикл
						НоваяСтрока.Количество = НоваяСтрока.Количество - ТекНайдСтрока.Количество; 
						//Если ЭтоОплатаФорма2 Тогда
						//	Если (НЕ СуммаВключаетНДС И НЕ Источник.УчитыватьНДС) Тогда
						//		НоваяСтрока.Сумма = НоваяСтрока.Сумма - (ТекНайдСтрока["СуммаФорма2"] + ТекНайдСтрока["СуммаНДСФорма2"]);
						//		НоваяСтрока.СуммаОтгрузки = НоваяСтрока.СуммаОтгрузки  - ТекНайдСтрока["СуммаФорма2"];
						//		НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
						//	Иначе
						//		НоваяСтрока.Сумма = НоваяСтрока.Сумма - ТекНайдСтрока["СуммаФорма2"];
						//		НоваяСтрока.СуммаОтгрузки = НоваяСтрока.СуммаОтгрузки  - ТекНайдСтрока["СуммаФорма2"];
						//		НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
						//	КонецЕсли;
						//	НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаНДС - ТекНайдСтрока["СуммаНДСФорма2"];  
						//	
						//Иначе
							Если (НЕ СуммаВключаетНДС И (НЕ Источник.УчитыватьНДС Или ВыделятьНДС)) Тогда
								НоваяСтрока.Сумма = НоваяСтрока.Сумма - (ТекНайдСтрока.Сумма + ТекНайдСтрока.СуммаНДС);
								НоваяСтрока.СуммаОтгрузки = НоваяСтрока.СуммаОтгрузки  - ТекНайдСтрока.Сумма;
								НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
							Иначе
								НоваяСтрока.Сумма = НоваяСтрока.Сумма - ТекНайдСтрока.Сумма;
								НоваяСтрока.СуммаОтгрузки = НоваяСтрока.СуммаОтгрузки  - ТекНайдСтрока.Сумма;
								НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
							КонецЕсли;
							НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаНДС - ТекНайдСтрока.СуммаНДС;  
						//КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		Если Не Источник.Товары.Количество() Тогда
			//ЭтоОплатаФорма2 = Ложь;
			//Если НастройкаФорма2 Тогда
			//	Если ДанныеЗаполнения.Метаданные().ТабличныеЧасти["Товары"].Реквизиты.Найти("СуммаФорма2") <> Неопределено Тогда
			//		ЭтоОплатаФорма2 = Истина;
			//	КонецЕсли;
			//КонецЕсли;
			
			Для каждого ТекСтрока Из ДанныеЗаполнения.Товары Цикл
				НоваяСтрока = Источник.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				НоваяСтрока.СуммаОтгрузки = ТекСтрока.Сумма;
				//ЗаполенениеПоКолонкамФорма2 = Ложь;
				//Если ЭтоОплатаФорма2 Тогда
				//	Если ЗначениеЗаполнено(ТекСтрока["СуммаФорма2"]) Тогда
				//	НоваяСтрока.СуммаОтгрузки = ТекСтрока["СуммаФорма2"];
				//	НоваяСтрока.Цена = ТекСтрока["ЦенаФорма2"];
				//	НоваяСтрока.СуммаНДС = ТекСтрока["СуммаНДСФорма2"];
				//	НоваяСтрока.Сумма = ТекСтрока["СуммаФорма2"];
				//	Если (НЕ СуммаВключаетНДС И НЕ Источник.УчитыватьНДС) Тогда
				//		НоваяСтрока.Сумма = ТекСтрока["СуммаФорма2"] + ТекСтрока["СуммаНДСФорма2"];
				//		НоваяСтрока.СуммаОтгрузки =  ТекСтрока["СуммаФорма2"];
				//		НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
				//	КонецЕсли;
				//	ЗаполенениеПоКолонкамФорма2 = Истина; 
				//	КонецЕсли;
				//КонецЕсли;
				//Если Не ЗаполенениеПоКолонкамФорма2 Тогда
					Если (НЕ СуммаВключаетНДС И (НЕ Источник.УчитыватьНДС Или ВыделятьНДС)) Тогда
						НоваяСтрока.Сумма = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
						НоваяСтрока.СуммаОтгрузки = ТекСтрока.Сумма;
						НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
					КонецЕсли;
				//КонецЕсли;
				НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрока.СтавкаНДС);
			КонецЦикла; 
		КонецЕсли;
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.Оплата Цикл
			НоваяСтрока = Источник.ОплатаПлатежнымиКартами.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.Сумма = ТекСтрока.СуммаОплаты;
		КонецЦикла;
		
		//Для каждого ТекСтрока Из ДанныеЗаполнения.ШтрихкодыУпаковок Цикл
		//	НоваяСтрока = Источник.ШтрихкодыУпаковок.Добавить();
		//	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		//КонецЦикла;	
		Источник.СуммаНаличногоРасчета = Источник.Товары.Итог("СуммаОтгрузки") - Источник.ОплатаПлатежнымиКартами.Итог("Сумма");
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьУЧ_РеализациюZРозн(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)

	Если (ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_Реализация") ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_Возврат")) И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РозничнаяПродажа") Тогда
		
		Если Не ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Возврат Тогда
			
			Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
			Если ЗначениеЗаполнено(Источник.Ссылка) Тогда
				ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, Дата, Проведен");
			Иначе	
				ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, Проведен");
				Источник.Дата = ДанныеЗаполнения.Дата;
			КонецЕсли;
			Источник.Проведен = Не ДанныеЗаполнения.ПометкаУдаления;
			Источник.ВидОперации = Перечисления.ВидыОперацийРеализация.Товары;
			Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
			//Источник.Договор = ДанныеЗаполнения.ДоговорКонтрагента;
			Источник.Счет = ПланыСчетов.Учетный.Счет6201();
			Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.Организация);
			Источник.ПодразделениеКонтрагента = ДанныеЗаполнения.Заказ.ПодразделениеКонтрагента;
			
			Источник.УчитыватьНДС = Истина;
			СуммаВключаетНДС = ДанныеЗаполнения.СуммаВключаетНДС;
			
			ВыделятьНДС = Источник.Предприятие.УчетнаяПолитика.УчетНДС;
			Если Не ВыделятьНДС Тогда
				Источник.УчитыватьНДС = Ложь;
			Иначе
				Источник.СуммаВключаетНДС = Истина;
			КонецЕсли;
			
			Источник.Товары.Очистить();
			Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_Реализация") Тогда
				Источник.ПрочиеНачисления.Очистить();
				Источник.Услуги.Очистить();
			КонецЕсли;
						
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	РозничнаяПродажа.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.РозничнаяПродажа КАК РозничнаяПродажа
			|ГДЕ
			|	РозничнаяПродажа.Ссылка = &РозничнаяПродажа";
			
			Запрос.УстановитьПараметр("РозничнаяПродажа", ДанныеЗаполнения.Ссылка);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			НастройкаФорма2 = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("КонтрольНоменклатурыДляФормы2ВЗаказеКлиента");

			Пока Выборка.Следующий() Цикл
				
				ЭтоОплатаФорма2 = Ложь;
				Если НастройкаФорма2 Тогда
					Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ОплатаФорма2", Выборка.Ссылка.Метаданные()) Тогда
						Если Выборка.Ссылка["ОплатаФорма2"] Тогда
							ЭтоОплатаФорма2 = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Для каждого ТекСтрока Из Выборка.Ссылка.Товары Цикл
					НоваяСтрока = Источник.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
					НоваяСтрока.СуммаОтгрузки = ТекСтрока.Сумма;
					Если ЭтоОплатаФорма2 Тогда
						НоваяСтрока.СуммаОтгрузки = ТекСтрока["СуммаФорма2"];
						НоваяСтрока.Цена = ТекСтрока["ЦенаФорма2"];
						НоваяСтрока.СуммаНДС = ТекСтрока["СуммаНДСФорма2"];
						НоваяСтрока.Сумма = ТекСтрока["СуммаФорма2"];
						Если (НЕ СуммаВключаетНДС И (НЕ Источник.УчитыватьНДС Или ВыделятьНДС)) Тогда
							НоваяСтрока.Сумма = ТекСтрока["СуммаФорма2"] + ТекСтрока["СуммаНДСФорма2"];
							НоваяСтрока.СуммаОтгрузки =  ТекСтрока["СуммаФорма2"];
							НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
						КонецЕсли;
					Иначе
						Если (НЕ СуммаВключаетНДС И (НЕ Источник.УчитыватьНДС Или ВыделятьНДС)) Тогда
							НоваяСтрока.Сумма = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
							НоваяСтрока.СуммаОтгрузки = ТекСтрока.Сумма;
							НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
						КонецЕсли;
					КонецЕсли;
					НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрока.СтавкаНДС);
					НоваяСтрока.Контрагент = Выборка.Ссылка.Контрагент;
					НоваяСтрока.Договор = Выборка.Ссылка.Договор;
					Если ЗначениеЗаполнено(ТекСтрока.ШтрихкодУпаковки) Тогда
						НоваяСтрока = Источник.ШтрихкодыУпаковок.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
					КонецЕсли;
				КонецЦикла; 
				
			КонецЦикла;
		Иначе
			Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
			Если ЗначениеЗаполнено(Источник.Ссылка) Тогда
				ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, Дата, Проведен");
			Иначе	
				ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, Проведен");
				Источник.Дата = ДанныеЗаполнения.Дата;
			КонецЕсли;
			Источник.Проведен = Не ДанныеЗаполнения.ПометкаУдаления;
			Источник.ВидОперации = Перечисления.ВидыОперацийРеализация.Товары;
			Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
			
			Источник.Счет = ПланыСчетов.Учетный.Счет6201();
			//Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации);
			Источник.ПодразделениеКонтрагента = ДанныеЗаполнения.Заказ.ПодразделениеКонтрагента;
			
			Источник.УчитыватьНДС = Истина;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	РозничнаяПродажа.Ссылка КАК Ссылка,
			               |	сабОбработкаДокументов.ДокументУУ КАК ДокОснование
			               |ИЗ
			               |	Документ.РозничнаяПродажа КАК РозничнаяПродажа
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.сабОбработкаДокументов КАК сабОбработкаДокументов
			               |		ПО РозничнаяПродажа.Основание = сабОбработкаДокументов.ДокументБУ
			               |ГДЕ
			               |	РозничнаяПродажа.Ссылка = &РозничнаяПродажа";
			
			Запрос.УстановитьПараметр("РозничнаяПродажа", ДанныеЗаполнения.Ссылка);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Источник.Товары.Очистить();
			НастройкаФорма2 = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("КонтрольНоменклатурыДляФормы2ВЗаказеКлиента");

			Пока Выборка.Следующий() Цикл
				
				ЭтоОплатаФорма2 = Ложь;
				Если НастройкаФорма2 Тогда
					Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ОплатаФорма2", Выборка.Ссылка.Метаданные()) Тогда
						Если Выборка.Ссылка["ОплатаФорма2"] Тогда
							ЭтоОплатаФорма2 = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Источник.ДокОснование = Выборка.ДокОснование;
				
				Для каждого ТекСтрока Из Выборка.Ссылка.Товары Цикл
					НоваяСтрока = Источник.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
					НоваяСтрока.СуммаОтгрузки = ТекСтрока.Сумма; 
					Если ЭтоОплатаФорма2 Тогда
						НоваяСтрока.СуммаОтгрузки = ТекСтрока["СуммаФорма2"];
						НоваяСтрока.Цена = ТекСтрока["ЦенаФорма2"];
						НоваяСтрока.СуммаНДС = ТекСтрока["СуммаНДСФорма2"];
						НоваяСтрока.Сумма = ТекСтрока["СуммаФорма2"];
						Если (НЕ СуммаВключаетНДС И (НЕ Источник.УчитыватьНДС Или ВыделятьНДС)) Тогда
							НоваяСтрока.Сумма = ТекСтрока["СуммаФорма2"] + ТекСтрока["СуммаНДСФорма2"];
							НоваяСтрока.СуммаОтгрузки =  ТекСтрока["СуммаФорма2"];
							НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
						КонецЕсли;
					Иначе
						Если (НЕ СуммаВключаетНДС И (НЕ Источник.УчитыватьНДС Или ВыделятьНДС)) Тогда
							НоваяСтрока.Сумма = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
							НоваяСтрока.СуммаОтгрузки = ТекСтрока.Сумма;
							НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
						КонецЕсли;
					КонецЕсли;
					НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрока.СтавкаНДС);
					//НоваяСтрока.Контрагент = Выборка.Ссылка.Контрагент;
					//НоваяСтрока.Договор = Выборка.Ссылка.Договор;
					Если ЗначениеЗаполнено(ТекСтрока.ШтрихкодУпаковки) Тогда
						НоваяСтрока = Источник.ШтрихкодыУпаковок.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
					КонецЕсли;
				КонецЦикла; 
			КонецЦикла;			
		КонецЕсли;
		
		Если ДанныеЗаполнения.СерииНоменклатуры.Количество() Тогда
			Источник.СерииНоменклатуры.Очистить();
			Для каждого ТекСтрока Из ДанныеЗаполнения.СерииНоменклатуры Цикл
				НоваяСтрока = Источник.СерииНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			КонецЦикла;
			
			//корректировка количества по сериям
			Для каждого ТекСтрока Из Источник.Товары Цикл
				Количество = ТекСтрока.Количество;
				НайденныеСерии = Источник.СерииНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура, НомерСтрокиРеализации", ТекСтрока.Номенклатура, ТекСтрока.НомерСтроки));
				Для каждого ТекНайдСтрока Из НайденныеСерии Цикл
					Если ТекНайдСтрока.Количество > Количество Тогда
						ТекНайдСтрока.Количество = Количество;	
						Количество = 0;			
					Иначе
						Количество = Количество - ТекНайдСтрока.Количество;
					КонецЕсли;
				КонецЦикла;
				Если Количество Тогда
					Если НайденныеСерии.Количество() Тогда
						ТекНайдСтрока.Количество = ТекНайдСтрока.Количество + Количество;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//Если Не Источник.Товары.Количество() Тогда
		//	Для каждого ТекСтрока Из ДанныеЗаполнения.Товары Цикл
		//		НоваяСтрока = Источник.Товары.Добавить();
		//		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		//		НоваяСтрока.СуммаОтгрузки = ТекСтрока.Сумма;
		//		Если НЕ Источник.СуммаВключаетНДС И НЕ Источник.УчитыватьНДС Тогда
		//			НоваяСтрока.Сумма = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
		//			НоваяСтрока.СуммаОтгрузки = ТекСтрока.Сумма;
		//			НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
		//		КонецЕсли;
		//		НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрока.СтавкаНДС);
		//	КонецЦикла; 
		//КонецЕсли;
		
		//Для каждого ТекСтрока Из ДанныеЗаполнения.Оплата Цикл
		//	НоваяСтрока = Источник.ОплатаПлатежнымиКартами.Добавить();
		//	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		//	НоваяСтрока.Сумма = ТекСтрока.СуммаОплаты;
		//КонецЦикла;
		
		//Источник.СуммаНаличногоРасчета = Источник.Товары.Итог("СуммаОтгрузки") - Источник.ОплатаПлатежнымиКартами.Итог("Сумма");
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьУЧ_Реализацию(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)

	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_Реализация") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		ТранслироватьСчетаУчета = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("ТранслироватьСчетаУчетаНоменклатуры");
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, РучнаяКорректировка");
		Источник.Дата = ДанныеЗаполнения.Дата;
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		Источник.Валюта = ДанныеЗаполнения.ВалютаДокумента;
		Если ЗначениеЗаполнено(Источник.Валюта) И Не Источник.Валюта = УЧ_Сервер.НациональнаяВалюта() Тогда
			Источник.ФлагВалюты = Истина;
			Источник.Курс = ДанныеЗаполнения.КурсВзаиморасчетов;
		КонецЕсли;
		ОрганизацияКонтрагент = КонтрагентВОрганизациях(Источник.Контрагент, Источник, ДанныеЗаполнения);
		
		Если ОрганизацияКонтрагент.ЭтоОрганизация Тогда //ВНХ
			Источник.Счет = ПланыСчетов.Учетный.Счет7902(Источник.Предприятие);
			Источник.Контрагент = ОрганизацияКонтрагент.Организация;
			Источник.Договор = ДанныеЗаполнения.ДоговорКонтрагента.УЧ_Договор;
		Иначе
			Источник.Счет = ДанныеЗаполнения.ДоговорКонтрагента.СчетВзаиморасчетов;
			Если Не ЗначениеЗаполнено(Источник.Счет) Тогда
				Источник.Счет = ПланыСчетов.Учетный.НайтиПоКоду("62.01");		
			КонецЕсли;
			Источник.ПодразделениеКонтрагента = ДанныеЗаполнения.Заказ.ПодразделениеКонтрагента;
			Источник.Договор = ДанныеЗаполнения.ДоговорКонтрагента;
		КонецЕсли;
		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.Организация);
		Если ЗначениеЗаполнено(СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации)) Тогда
			Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации);
		КонецЕсли;
		Источник.УчитыватьНДС = Истина;
		СуммаВключаетНДС = ДанныеЗаполнения.СуммаВключаетНДС; 
		
		ВыделятьНДС = Источник.Предприятие.УчетнаяПолитика.УчетНДС;
		Если Не ВыделятьНДС Тогда
			Источник.УчитыватьНДС = Ложь;
		Иначе
			Источник.СуммаВключаетНДС = Истина;
		КонецЕсли;
		
		РеквСФВыд = УчетНДСПереопределяемый.РеквизитыДляНадписиОСчетеФактуреВыданном(ДанныеЗаполнения,);
		Если РеквСФВыд <> Неопределено Тогда
			
			Источник.ДатаСчетФактуры = РеквСФВыд.ДатаСчетаФактуры;
			Источник.НомерСчетФактуры = РеквСФВыд.НомерСчетаФактуры;
			Источник.ИсправлениеСФ = РеквСФВыд.Исправление;
			
		КонецЕсли;
		
		Источник.Товары.Очистить();
		Источник.ПрочиеНачисления.Очистить();
		Источник.Услуги.Очистить();
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Источник.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.СуммаОтгрузки = ТекСтрока.Сумма;
			//Источник.ВидОперации = Перечисления.ВидыОперацийРеализация.Товары;
			Если (НЕ СуммаВключаетНДС И (НЕ Источник.УчитыватьНДС Или ВыделятьНДС)) Тогда
				НоваяСтрока.Сумма = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
				НоваяСтрока.СуммаОтгрузки = НоваяСтрока.Сумма;
				НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
			КонецЕсли;
			НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрока.СтавкаНДС);
			
			Если ТранслироватьСчетаУчета Тогда
				//не переносим СчетУчета, т.к. в УУ своя логика подбора счета работает
				Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрока.СчетУчета));
				Для каждого ТекСчет Из Соотв Цикл
					НоваяСтрока.Счет = ТекСчет.СчетУУ;
					Прервать;
				КонецЦикла;
			Иначе	
				НоваяСтрока.Счет = Неопределено;
			КонецЕсли;
			
			Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрока.ПереданныеСчетУчета));
			Для каждого ТекСчет Из Соотв Цикл
				НоваяСтрока.СчетПередачи = ТекСчет.СчетУУ;
				Прервать;
			КонецЦикла;
			
		КонецЦикла;
		Счет9001 = ПланыСчетов.Учетный.Счет9001();
		Для каждого ТекСтрока Из ДанныеЗаполнения.Услуги Цикл
			НоваяСтрока = Источник.Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.Счет90 = Счет9001;
			НоваяСтрока.Субконто1 = ТекСтрока.Номенклатура;
			НоваяСтрока.СуммаОтгрузки = ТекСтрока.Сумма;
			//Источник.ВидОперации = Перечисления.ВидыОперацийРеализация.Услуги;
			Если (НЕ СуммаВключаетНДС И (НЕ Источник.УчитыватьНДС Или ВыделятьНДС)) Тогда
				НоваяСтрока.Сумма = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
				НоваяСтрока.СуммаОтгрузки = НоваяСтрока.Сумма;
				НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
			КонецЕсли;
			
			НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрока.СтавкаНДС);
			НоваяСтрока.СодержаниеУслуги = ТекСтрока.Содержание;
		КонецЦикла;
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.ШтрихкодыУпаковок Цикл
			НоваяСтрока = Источник.ШтрихкодыУпаковок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЦикла;
		
		Если ДанныеЗаполнения.СерииНоменклатуры.Количество() Тогда
			Источник.СерииНоменклатуры.Очистить();
			Для каждого ТекСтрока Из ДанныеЗаполнения.СерииНоменклатуры Цикл
				НоваяСтрока = Источник.СерииНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			КонецЦикла;
			//корректировка количества по сериям
			Для каждого ТекСтрока Из Источник.Товары Цикл
				Количество = ТекСтрока.Количество;
				НайденныеСерии = Источник.СерииНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура, НомерСтрокиРеализации", ТекСтрока.Номенклатура, ТекСтрока.НомерСтроки));
				Для каждого ТекНайдСтрока Из НайденныеСерии Цикл
					Если ТекНайдСтрока.Количество > Количество Тогда
						ТекНайдСтрока.Количество = Количество;	
						Количество = 0;			
					Иначе
						Количество = Количество - ТекНайдСтрока.Количество;
					КонецЕсли;
				КонецЦикла;
				Если Количество Тогда
					Если НайденныеСерии.Количество() Тогда
						ТекНайдСтрока.Количество = ТекНайдСтрока.Количество + Количество;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Источник.ВидОперации = Перечисления.ВидыОперацийРеализация.ТоварыИУслуги;
		Если ДанныеЗаполнения.Товары.Количество() И НЕ ДанныеЗаполнения.Услуги.Количество() Тогда
			Источник.ВидОперации = Перечисления.ВидыОперацийРеализация.Товары;
		ИначеЕсли ДанныеЗаполнения.Услуги.Количество() И НЕ ДанныеЗаполнения.Товары.Количество() Тогда	
			Источник.ВидОперации = Перечисления.ВидыОперацийРеализация.Услуги;
		КонецЕсли;
		
		Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПередачаТоваров Тогда
			Источник.ВидОперации = Перечисления.ВидыОперацийРеализация.ПередачаНаРеализацию;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьРеализациюУслугПоПереработке(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)

	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_Реализация") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, РучнаяКорректировка");
		Источник.Дата = ДанныеЗаполнения.Дата;
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		Источник.Валюта = ДанныеЗаполнения.ВалютаДокумента;
		
		Если ЗначениеЗаполнено(Источник.Валюта) И Не Источник.Валюта = УЧ_Сервер.НациональнаяВалюта() Тогда
			Источник.ФлагВалюты = Истина;
			Источник.Курс = ДанныеЗаполнения.КурсВзаиморасчетов;
		КонецЕсли; 
		
		ОрганизацияКонтрагент = КонтрагентВОрганизациях(Источник.Контрагент, Источник, ДанныеЗаполнения);
		
		Если ОрганизацияКонтрагент.ЭтоОрганизация Тогда //ВНХ
			Источник.Счет = ПланыСчетов.Учетный.Счет7902(Источник.Предприятие);
			Источник.Контрагент = ОрганизацияКонтрагент.Организация;
			Источник.Договор = ДанныеЗаполнения.ДоговорКонтрагента.УЧ_Договор;
		Иначе
			Источник.Счет = ДанныеЗаполнения.ДоговорКонтрагента.СчетВзаиморасчетов;
			
			Если Не ЗначениеЗаполнено(Источник.Счет) Тогда
				Источник.Счет = ПланыСчетов.Учетный.НайтиПоКоду("62.01");		
			КонецЕсли;
			
			Источник.Договор = ДанныеЗаполнения.ДоговорКонтрагента;
		КонецЕсли;  
		
		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.Организация);
		
		Если ЗначениеЗаполнено(СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации)) Тогда
			Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации);
		КонецЕсли; 
		
		Источник.УчитыватьНДС = Истина;
		СуммаВключаетНДС = ДанныеЗаполнения.СуммаВключаетНДС; 
		
		ВыделятьНДС = Источник.Предприятие.УчетнаяПолитика.УчетНДС;
		
		Если Не ВыделятьНДС Тогда
			Источник.УчитыватьНДС = Ложь;
		Иначе
			Источник.СуммаВключаетНДС = Истина;
		КонецЕсли;
		
		РеквСФВыд = УчетНДСПереопределяемый.РеквизитыДляНадписиОСчетеФактуреВыданном(ДанныеЗаполнения,);
		
		Если РеквСФВыд <> Неопределено Тогда
			
			Источник.ДатаСчетФактуры = РеквСФВыд.ДатаСчетаФактуры;
			Источник.НомерСчетФактуры = РеквСФВыд.НомерСчетаФактуры;
			Источник.ИсправлениеСФ = РеквСФВыд.Исправление;
			
		КонецЕсли;
		
		Источник.Товары.Очистить();
		Источник.ПрочиеНачисления.Очистить();
		Источник.Услуги.Очистить(); 
		Источник.МатериалыЗаказчика.Очистить();
		
		Счет9001 = ПланыСчетов.Учетный.Счет9001();  
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.Услуги Цикл
			НоваяСтрока = Источник.Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.Счет90 = Счет9001;
			НоваяСтрока.Субконто1 = ТекСтрока.Номенклатура;
			НоваяСтрока.СуммаОтгрузки = ТекСтрока.Сумма;
			//Источник.ВидОперации = Перечисления.ВидыОперацийРеализация.Услуги;
			Если (НЕ СуммаВключаетНДС И (НЕ Источник.УчитыватьНДС Или ВыделятьНДС)) Тогда
				НоваяСтрока.Сумма = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
				НоваяСтрока.СуммаОтгрузки = НоваяСтрока.Сумма;
				НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
			КонецЕсли;
			
			НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрока.СтавкаНДС);
			НоваяСтрока.СодержаниеУслуги = ТекСтрока.Содержание;
		КонецЦикла;
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.МатериалыЗаказчика Цикл
			НоваяСтрока = Источник.МатериалыЗаказчика.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			СтрокаСоответствияСчета = ВыборкаСоотв.Найти(ТекСтрока.СчетУчета, "СчетБУ");
			
			Если Не СтрокаСоответствияСчета = Неопределено Тогда
				НоваяСтрока.СчетУчета = СтрокаСоответствияСчета.СчетУУ; 
			КонецЕсли;
			
		КонецЦикла;
		
		Источник.ВидОперации = Перечисления.ВидыОперацийРеализация.УслугиПоПереработке;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьУЧ_РеализациюОтчетКомиссионера(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)

	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_Реализация") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		
		ТранслироватьСчетаУчета = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("ТранслироватьСчетаУчетаНоменклатуры");
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, РучнаяКорректировка");
		Источник.Дата = ДанныеЗаполнения.Дата;
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		Источник.Валюта = ДанныеЗаполнения.ВалютаДокумента;
		Если ЗначениеЗаполнено(Источник.Валюта) И Не Источник.Валюта = УЧ_Сервер.НациональнаяВалюта() Тогда
			Источник.ФлагВалюты = Истина;
			Источник.Курс = ДанныеЗаполнения.КурсВзаиморасчетов;
		КонецЕсли;
		ОрганизацияКонтрагент = КонтрагентВОрганизациях(Источник.Контрагент, Источник, ДанныеЗаполнения);
		Источник.ВидОперации = Перечисления.ВидыОперацийРеализация.ПродажаСРеализации;
		
		Если ОрганизацияКонтрагент.ЭтоОрганизация Тогда //ВНХ
			Источник.Счет = ПланыСчетов.Учетный.Счет7902(Источник.Предприятие);
			Источник.Контрагент = ОрганизацияКонтрагент.Организация;
			Источник.Договор = ДанныеЗаполнения.ДоговорКонтрагента.УЧ_Договор;
		Иначе
			Источник.Счет = ДанныеЗаполнения.ДоговорКонтрагента.СчетВзаиморасчетов;
			Если Не ЗначениеЗаполнено(Источник.Счет) Тогда
				Источник.Счет = ПланыСчетов.Учетный.НайтиПоКоду("62.01");		
			КонецЕсли;
			//Источник.ПодразделениеКонтрагента = ДанныеЗаполнения.Заказ.ПодразделениеКонтрагента;
			Источник.Договор = ДанныеЗаполнения.ДоговорКонтрагента;
		КонецЕсли;
		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.Организация);
		Если ЗначениеЗаполнено(СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации)) Тогда
			Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации);
		КонецЕсли;
		Источник.УчитыватьНДС = Истина;
		СуммаВключаетНДС = ДанныеЗаполнения.СуммаВключаетНДС;
		
		ВыделятьНДС = Источник.Предприятие.УчетнаяПолитика.УчетНДС;
		Если Не ВыделятьНДС Тогда
			Источник.УчитыватьНДС = Ложь;
		Иначе
			Источник.СуммаВключаетНДС = Истина;
		КонецЕсли;
		
		РеквСФВыд = УчетНДСПереопределяемый.РеквизитыДляНадписиОСчетеФактуреВыданном(ДанныеЗаполнения,);
		Если РеквСФВыд <> Неопределено Тогда
			
			Источник.ДатаСчетФактуры = РеквСФВыд.ДатаСчетаФактуры;
			Источник.НомерСчетФактуры = РеквСФВыд.НомерСчетаФактуры;
			Источник.ИсправлениеСФ = РеквСФВыд.Исправление;
			
		КонецЕсли;
		
		Источник.Товары.Очистить();
		Источник.ПрочиеНачисления.Очистить();
		Источник.Услуги.Очистить();
		Источник.ТоварыВозвращенные.Очистить();
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.Товары Цикл
			
			НоваяСтрока = Источник.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			
			НоваяСтрока.СуммаОтгрузки = ТекСтрока.Сумма;
			
			Если (НЕ СуммаВключаетНДС И (НЕ Источник.УчитыватьНДС Или ВыделятьНДС)) Тогда
				НоваяСтрока.Сумма = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
				НоваяСтрока.СуммаОтгрузки = НоваяСтрока.Сумма;
				НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
			КонецЕсли;
			НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрока.СтавкаНДС);
			
			Если ТранслироватьСчетаУчета Тогда
				Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрока.СчетУчета));
				Для каждого ТекСчет Из Соотв Цикл
					НоваяСтрока.Счет = ТекСчет.СчетУУ;
					Прервать;
				КонецЦикла;
			Иначе	
				НоваяСтрока.Счет = Неопределено;	
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.ТоварыВозвращенные Цикл
			
			НоваяСтрока = Источник.ТоварыВозвращенные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			
			НоваяСтрока.СуммаОтгрузки = ТекСтрока.Сумма;
			
			Если (НЕ СуммаВключаетНДС И (НЕ Источник.УчитыватьНДС Или ВыделятьНДС)) Тогда
				НоваяСтрока.Сумма = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
				НоваяСтрока.СуммаОтгрузки = НоваяСтрока.Сумма;
				НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
			КонецЕсли;
			НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрока.СтавкаНДС);
			
			Если ТранслироватьСчетаУчета Тогда
				Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрока.СчетУчета));
				Для каждого ТекСчет Из Соотв Цикл
					НоваяСтрока.Счет = ТекСчет.СчетУУ;
					Прервать;
				КонецЦикла;
			Иначе	
				НоваяСтрока.Счет = Неопределено;
			КонецЕсли;
			
		КонецЦикла;
				
		Если ДанныеЗаполнения.СерииНоменклатуры.Количество() Тогда
			Источник.СерииНоменклатуры.Очистить();
			Для каждого ТекСтрока Из ДанныеЗаполнения.СерииНоменклатуры Цикл
				НоваяСтрока = Источник.СерииНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			КонецЦикла;
			//корректировка количества по сериям
			Для каждого ТекСтрока Из Источник.Товары Цикл
				Количество = ТекСтрока.Количество;
				НайденныеСерии = Источник.СерииНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура, НомерСтрокиРеализации", ТекСтрока.Номенклатура, ТекСтрока.НомерСтроки));
				Для каждого ТекНайдСтрока Из НайденныеСерии Цикл
					Если ТекНайдСтрока.Количество > Количество Тогда
						ТекНайдСтрока.Количество = Количество;	
						Количество = 0;			
					Иначе
						Количество = Количество - ТекНайдСтрока.Количество;
					КонецЕсли;
				КонецЦикла;
				Если Количество Тогда
					Если НайденныеСерии.Количество() Тогда
						ТекНайдСтрока.Количество = ТекНайдСтрока.Количество + Количество;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьУЧ_Поступление(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_ПоступлениеТоваров") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		ТранслироватьСчетаУчета = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("ТранслироватьСчетаУчетаНоменклатуры");
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, РучнаяКорректировка");
		Источник.Дата = ДанныеЗаполнения.Дата;
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		Источник.Валюта = ДанныеЗаполнения.ВалютаДокумента;
		Если ЗначениеЗаполнено(Источник.Валюта) И Не Источник.Валюта = УЧ_Сервер.НациональнаяВалюта() Тогда
			Источник.ФлагВалюты = Истина;
			Источник.Курс = ДанныеЗаполнения.КурсВзаиморасчетов;
		КонецЕсли;
		
		//СуммаВключаетНДС = ДанныеЗаполнения.СуммаВключаетНДС;
		Источник.УчитыватьНДС = НЕ ДанныеЗаполнения.НДСВключенВСтоимость;
		СуммаВключаетНДС = ДанныеЗаполнения.СуммаВключаетНДС;
		
		ВыделятьНДС = Источник.Предприятие.УчетнаяПолитика.УчетНДС;
		Если Не ВыделятьНДС Тогда
			Источник.УчитыватьНДС = Ложь;
		Иначе
			Источник.СуммаВключаетНДС = Истина;
		КонецЕсли;
		
		ОрганизацияКонтрагент = КонтрагентВОрганизациях(Источник.Контрагент, Источник, ДанныеЗаполнения);
		
		Если ОрганизацияКонтрагент.ЭтоОрганизация Тогда //ВНХ
			Источник.СчетКонтрагента = ПланыСчетов.Учетный.Счет7902(Источник.Предприятие);
			Источник.Контрагент = ОрганизацияКонтрагент.Организация;
			Источник.Договор = ДанныеЗаполнения.ДоговорКонтрагента.УЧ_Договор;
		Иначе
			Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ДанныеЗаполнения.СчетУчетаРасчетовСКонтрагентом));
			Для каждого ТекСчет Из Соотв Цикл
				Источник.СчетКонтрагента = ТекСчет.СчетУУ;
				Прервать;
			КонецЦикла;
			Источник.Договор = ДанныеЗаполнения.ДоговорКонтрагента;
			Если Не ЗначениеЗаполнено(Источник.СчетКонтрагента) ИЛИ (НЕ Источник.СчетКонтрагента = ПланыСчетов.Учетный.Счет7601() И НЕ Источник.СчетКонтрагента.Родитель = ПланыСчетов.Учетный.Счет76()) Тогда
				Источник.СчетКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента.СчетВзаиморасчетов;
				Если Не ЗначениеЗаполнено(Источник.СчетКонтрагента) Тогда
					Источник.СчетКонтрагента = ПланыСчетов.Учетный.Счет6001();		
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 
		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.Организация);
		Если ЗначениеЗаполнено(СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации)) Тогда
			Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации);
		КонецЕсли;
		
		Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			Источник.ВидОперации = Перечисления.ВидыПоступлений.ТМЦВПереработку;
		Иначе
			
			Если ДанныеЗаполнения.Товары.Количество() ИЛИ ДанныеЗаполнения.Топливо.Количество() ИЛИ ДанныеЗаполнения.ОсновныеСредства.Количество() ИЛИ ДанныеЗаполнения.ОбъектыСтроительства.Количество() ИЛИ ДанныеЗаполнения.Оборудование.Количество() Тогда
				Источник.ВидОперации = Перечисления.ВидыПоступлений.Поступление;
				
				Если ДанныеЗаполнения.Услуги.Количество() Тогда
					Источник.ВидОперации = Перечисления.ВидыПоступлений.ПоступлениеТМЦИУслуг;
				ИначеЕсли ДанныеЗаполнения.ОсновныеСредства.Количество() Тогда
					Источник.ВидОперации = Перечисления.ВидыПоступлений.ПоступлениеОС;
				КонецЕсли;
				
			Иначе	
				Источник.ВидОперации = Перечисления.ВидыПоступлений.ПоступлениеУслуг;
			КонецЕсли;			

		КонецЕсли;
				
		Если ДанныеЗаполнения.ЭтоУниверсальныйДокумент Тогда
			Источник.ДатаВходящегоСчФ = ДанныеЗаполнения.ДатаВходящегоДокумента;
			Источник.НомерВходящегоСчФ = ДанныеЗаполнения.НомерВходящегоДокумента;			
		КонецЕсли;
		
		РеквСФПол = УчетНДСПереопределяемый.РеквизитыДляНадписиОСчетеФактуреПолученном(ДанныеЗаполнения,);
		Если РеквСФПол <> Неопределено Тогда
			
			Источник.ДатаВходящегоСчФ = РеквСФПол.ДатаСчетаФактуры;
			Источник.НомерВходящегоСчФ = РеквСФПол.НомерСчетаФактуры;
			//Источник.ИсправлениеСФ = РеквСФПол.ИсправлениеСФ;
			
		КонецЕсли;

		Источник.ТабличнаяЧасть.Очистить();
		Источник.ПрочиеНачисления.Очистить();
		Источник.Услуги.Очистить();
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Источник.ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.Склад = Источник.Склад;
			НоваяСтрока.Подразделение = Источник.Подразделение;
			
			Если (НЕ СуммаВключаетНДС И (НЕ Источник.УчитыватьНДС Или ВыделятьНДС)) Тогда
				НоваяСтрока.Сумма = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
				НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
			КонецЕсли;
			
			Если ТранслироватьСчетаУчета Тогда
				Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрока.СчетУчета));
				Для каждого ТекСчет Из Соотв Цикл
					НоваяСтрока.СчетУчета = ТекСчет.СчетУУ;
					Прервать;
				КонецЦикла;
			Иначе	
				НоваяСтрока.СчетУчета = Неопределено;	
			КонецЕсли;
			
			Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрока.СчетЗатрат));
			Для каждого ТекСчет Из Соотв Цикл
				НоваяСтрока.СчетЗатрат = ТекСчет.СчетУУ;
				НоваяСтрока.СтатьяЗатрат = ТекСтрока.Субконто1;
				Прервать;
			КонецЦикла;
			
			НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрока.СтавкаНДС);
			
		КонецЦикла;
		
		Если ДанныеЗаполнения.СерииНоменклатуры.Количество() Тогда
			Источник.СерииНоменклатуры.Очистить();
			Для каждого ТекСтрока Из ДанныеЗаполнения.СерииНоменклатуры Цикл
				НоваяСтрока = Источник.СерииНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			КонецЦикла;
			//корректировка количества по сериям
			Для каждого ТекСтрока Из Источник.ТабличнаяЧасть Цикл
				Количество = ТекСтрока.Количество;
				НайденныеСерии = Источник.СерииНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура, НомерСтрокиРеализации", ТекСтрока.Номенклатура, ТекСтрока.НомерСтроки));
				Для каждого ТекНайдСтрока Из НайденныеСерии Цикл
					Если ТекНайдСтрока.Количество > Количество Тогда
						ТекНайдСтрока.Количество = Количество;	
						Количество = 0;			
					Иначе
						Количество = Количество - ТекНайдСтрока.Количество;
					КонецЕсли;
				КонецЦикла;
				Если Количество Тогда
					Если НайденныеСерии.Количество() Тогда
						ТекНайдСтрока.Количество = ТекНайдСтрока.Количество + Количество;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.Топливо Цикл
			НоваяСтрока = Источник.ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.Склад = Источник.Склад;
			НоваяСтрока.Подразделение = Источник.Подразделение;
			
			Если (НЕ СуммаВключаетНДС И (НЕ Источник.УчитыватьНДС Или ВыделятьНДС)) Тогда
				НоваяСтрока.Сумма = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
				НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
			КонецЕсли;
			
			НоваяСтрока.СчетУчета = ПланыСчетов.Учетный.НайтиПоКоду("10.03");
			Если Не ЗначениеЗаполнено(НоваяСтрока.СчетУчета) Тогда
				НоваяСтрока.СчетУчета = НоваяСтрока.Номенклатура.Счет10;
			КонецЕсли;
		
			НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрока.СтавкаНДС);
			
		КонецЦикла;
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.ОсновныеСредства Цикл
			НоваяСтрока = Источник.ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.Номенклатура = ТекСтрока.ОсновноеСредство;
			НоваяСтрока.Склад = Источник.Склад;
			НоваяСтрока.Подразделение = Источник.Подразделение;
			
			Если (НЕ СуммаВключаетНДС И (НЕ Источник.УчитыватьНДС Или ВыделятьНДС)) Тогда
				НоваяСтрока.Сумма = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
				НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
			КонецЕсли;
			
			Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрока.СчетУчета));
			Для каждого ТекСчет Из Соотв Цикл
				НоваяСтрока.СчетУчета = ТекСчет.СчетУУ;
				Прервать;
			КонецЦикла;
			
			НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрока.СтавкаНДС);
			
		КонецЦикла;
		
		Счет44 = ПланыСчетов.Учетный.Счет44(); 
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.Услуги Цикл
			НоваяСтрока = Источник.Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			
			Если (НЕ СуммаВключаетНДС И (НЕ Источник.УчитыватьНДС Или ВыделятьНДС)) Тогда
				НоваяСтрока.Сумма = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
				НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
			КонецЕсли;
			
			НоваяСтрока.Подразделение = Источник.Подразделение;
			Если Не ЗначениеЗаполнено(НоваяСтрока.Подразделение) Тогда
				НоваяСтрока.Подразделение = СоотвПодразделений.Получить(ТекСтрока.ПодразделениеЗатрат);
			КонецЕсли;
			
			НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрока.СтавкаНДС);
			
			Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрока.СчетЗатрат));
			Для каждого ТекСчет Из Соотв Цикл
				НоваяСтрока.СчетЗатрат = ТекСчет.СчетУУ;
				ИндексСубконто = 0;
				Для каждого ТекСубконто Из ТекСчет.СчетУУ.ВидыСубконто Цикл
					ИндексСубконто = ИндексСубконто + 1;
					Если ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ1 Тогда
						НоваяСтрока.Субконто1 = ТекСтрока["Субконто" + Строка(ИндексСубконто)];
						Если НЕ ТипЗнч(НоваяСтрока.Субконто1) = ТипЗнч(ТекСтрока["Субконто" + Строка(ИндексСубконто)]) Тогда
							НоваяСтрока.Субконто1 = Неопределено;
						КонецЕсли;
					ИначеЕсли ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ2 Тогда
						НоваяСтрока.Субконто2 = ТекСтрока["Субконто" + Строка(ИндексСубконто)];
						Если НЕ ТипЗнч(НоваяСтрока.Субконто2) = ТипЗнч(ТекСтрока["Субконто" + Строка(ИндексСубконто)]) Тогда
							НоваяСтрока.Субконто2 = Неопределено;
						КонецЕсли;
					ИначеЕсли ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ3 Тогда
						НоваяСтрока.Субконто3 = ТекСтрока["Субконто" + Строка(ИндексСубконто)];
						Если НЕ ТипЗнч(НоваяСтрока.Субконто3) = ТипЗнч(ТекСтрока["Субконто" + Строка(ИндексСубконто)]) Тогда
							НоваяСтрока.Субконто3 = Неопределено;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла; 
				
				Прервать;
			КонецЦикла;
			
			АнализЗаменыСтатьи91(НоваяСтрока, Новый Структура("КорСчет, КорСубконто1, КорСубконто2", "СчетЗатрат", "Субконто1", "Субконто2"));
			
			Если НоваяСтрока.СчетЗатрат = Счет44 Тогда 
				АнализЗаменыСчета44(НоваяСтрока, Источник.Предприятие, Новый Структура("СчетЗатрат, Субконто1, Субконто2", "СчетЗатрат", "Субконто1", "Субконто2"));
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.Оборудование Цикл
			НоваяСтрока = Источник.ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.Склад = Источник.Склад;
			НоваяСтрока.Подразделение = Источник.Подразделение;
			
			Если (НЕ СуммаВключаетНДС И (НЕ Источник.УчитыватьНДС Или ВыделятьНДС)) Тогда
				НоваяСтрока.Сумма = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
				НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
			КонецЕсли;
			
			Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрока.СчетУчета));
			Для каждого ТекСчет Из Соотв Цикл
				НоваяСтрока.СчетУчета = ТекСчет.СчетУУ;
				Прервать;
			КонецЦикла;
			
			//Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрока.СчетЗатрат));
			//Для каждого ТекСчет Из Соотв Цикл
			//	НоваяСтрока.СчетЗатрат = ТекСчет.СчетУУ;
			//	НоваяСтрока.СтатьяЗатрат = ТекСтрока.Субконто1;
			//	Прервать;
			//КонецЦикла;
			
			НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрока.СтавкаНДС);
			
		КонецЦикла;
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.ШтрихкодыУпаковок Цикл
			НоваяСтрока = Источник.ШтрихкодыУпаковок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЦикла;	
			
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗаполнитьУЧ_ДвижДССписРс(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_ДвижениеДС") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, РучнаяКорректировка");
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		Источник.Субконто2 = ДанныеЗаполнения.СчетОрганизации;
		
		Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ДанныеЗаполнения.СчетБанк));
		Для каждого ТекСчет Из Соотв Цикл
			Источник.Счет = ТекСчет.СчетУУ;
			Прервать;
		КонецЦикла;
		Если Не ЗначениеЗаполнено(Источник.Счет) Тогда
			Источник.Счет = ПланыСчетов.Учетный.НайтиПоКоду("51.01");
		КонецЕсли;
		
		Источник.ВидОперации = Перечисления.ВидыОперацийДвиженияДС.БанковскаяВыписка;
		Источник.Договор = ДанныеЗаполнения.ДоговорКонтрагента;
		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.Организация);
		Если ЗначениеЗаполнено(СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации)) Тогда
			Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации); 
		КонецЕсли;
		//Если Не ЗначениеЗаполнено(Источник.Подразделение) Тогда
		//	Если ЗначениеЗаполнено(СоотвПодразделений.Получить(ДанныеЗаполнения.Организация)) Тогда
		//		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.Организация); 
		//	КонецЕсли;
		//КонецЕсли;
		Источник.Валюта1 = ДанныеЗаполнения.ВалютаДокумента;
		ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Оплата;
		
		КорСчет = ПланыСчетов.Учетный.Счет6001();
		СтатьяДДС = ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств;
		
		КорСубконто1 = Неопределено;
		КорСубконто2 = Неопределено;
		КорСубконто3 = Неопределено;
		
		Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ДанныеЗаполнения.СчетУчетаРасчетовСКонтрагентом));
		Для каждого ТекСчет Из Соотв Цикл
			КорСчет = ТекСчет.СчетУУ;
			ИндексСубконто = 0;
			Для каждого ТекСубконто Из ТекСчет.СчетУУ.ВидыСубконто Цикл
				ИндексСубконто = ИндексСубконто + 1;
				Если ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ1 Тогда
					КорСубконто1 = ДанныеЗаполнения["СубконтоДт" + Строка(ИндексСубконто)];
					Если НЕ ТипЗнч(КорСубконто1) = ТипЗнч(ДанныеЗаполнения["СубконтоДт" + Строка(ИндексСубконто)]) Тогда
						КорСубконто1 = Неопределено;
					КонецЕсли;
				ИначеЕсли ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ2 Тогда
					КорСубконто2 = ДанныеЗаполнения["СубконтоДт" + Строка(ИндексСубконто)];
					Если НЕ ТипЗнч(КорСубконто2) = ТипЗнч(ДанныеЗаполнения["СубконтоДт" + Строка(ИндексСубконто)]) Тогда
						КорСубконто2 = Неопределено;
					КонецЕсли;
				ИначеЕсли ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ3 Тогда
					КорСубконто3 = ДанныеЗаполнения["СубконтоДт" + Строка(ИндексСубконто)];
					Если НЕ ТипЗнч(КорСубконто3) = ТипЗнч(ДанныеЗаполнения["СубконтоДт" + Строка(ИндексСубконто)]) Тогда
						КорСубконто3 = Неопределено;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла; 
			Прервать;
		КонецЦикла;
		
		Если ДанныеЗаполнения.РасшифровкаПлатежа.Количество() = 1 Тогда
			Если ЗначениеЗаполнено(ДанныеЗаполнения.РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентом) Тогда
				Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ДанныеЗаполнения.РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентом));
				Для каждого ТекСчет Из Соотв Цикл
					КорСчет = ТекСчет.СчетУУ;
					КорСубконто1 = Неопределено;
					КорСубконто2 = Неопределено;
					КорСубконто3 = Неопределено;
					Прервать;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		СчетДоговор = Источник.Договор.СчетВзаиморасчетов;
		Если ЗначениеЗаполнено(СчетДоговор) Тогда
			КорСчет = СчетДоговор;		
		КонецЕсли;
		
		ОрганизацияКонтрагент = КонтрагентВОрганизациях(Источник.Контрагент, Источник, ДанныеЗаполнения);
		
		Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП
			Или ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику Тогда
			ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеСотруднику;
			КорСчет = ПланыСчетов.Учетный.Счет70();
			КорСубконто1 = ДанныеЗаполнения.Контрагент;
			КорСубконто2 = Неопределено;
			ТекВедомость = ДанныеЗаполнения.ПлатежнаяВедомость;
			Если Не ЗначениеЗаполнено(ТекВедомость) Тогда
				Для каждого ТекСтрокаВедомость Из ДанныеЗаполнения.ПеречислениеЗаработнойПлаты Цикл
					ТекВедомость = ТекСтрокаВедомость.Ведомость;
				КонецЦикла;
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.сабОбработкаДокументов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ДокументБУ.Установить(ТекВедомость);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() <> 0 Тогда
				Для Каждого стрНабора из НаборЗаписей Цикл
					КорСубконто3 = стрНабора.ДокументУУ;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу Тогда
			ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеСотруднику;
			КорСчет = ПланыСчетов.Учетный.НайтиПоКоду("71.01");
			КорСубконто1 = ДанныеЗаполнения.Контрагент;
			КорСубконто2 = Неопределено;
			КорСубконто3 = Неопределено;
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда //ВНХ платеж
			ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ОплатаВНХ;
			//Запрос = Новый Запрос;
			//Запрос.Текст = "ВЫБРАТЬ
			//|	УчетнаяПолитикаСрезПоследних.ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств КАК ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств
			//|ИЗ
			//|	РегистрСведений.УчетнаяПолитика.СрезПоследних(&ТекДата, Организация = &Организация) КАК УчетнаяПолитикаСрезПоследних";
			//
			//Запрос.УстановитьПараметр("ТекДата", ДанныеЗаполнения.Дата);
			//Запрос.УстановитьПараметр("Организация", ДанныеЗаполнения.Организация);
			//
			//Результат = Запрос.Выполнить();
			//Выборка = Результат.Выбрать();
			
			//Использовать57 = Истина;
			//Пока Выборка.Следующий() Цикл
			//	Использовать57 = Выборка.ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств;				
			//КонецЦикла;
			//Если Использовать57 Тогда
				КорСчет = ПланыСчетов.Учетный.НайтиПоКоду("57.01");
				КорСубконто1 = ДанныеЗаполнения.Организация;
				КорСубконто2 = Справочники.ВнутренниеДоговоры.НайтиПоРеквизиту("ДоговорКонтрагента", Источник.Договор);
				КорСубконто3 = Неопределено;
				Источник.Контрагент = ДанныеЗаполнения.Организация;
			//Иначе
			//	Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ДанныеЗаполнения.СчетУчетаРасчетовСКонтрагентом));
			//	Для каждого ТекСчет Из Соотв Цикл
			//		КорСчет = ТекСчет.СчетУУ;
			//		Прервать;
			//	КонецЦикла;
			//	Если Не ЗначениеЗаполнено(КорСчет) Тогда
			//		КорСчет = ПланыСчетов.Учетный.Счет5101();
			//	КонецЕсли;
			//	КорСубконто1 = Источник.Предприятие.УчетнаяПолитика.СтатьяВНХПоступление;
			//	КорСубконто2 = ДанныеЗаполнения.СчетКонтрагента;
			//	КорСубконто3 = Неопределено;
			//КонецЕсли;
			СтатьяДДС = Источник.Предприятие.УчетнаяПолитика.СтатьяВНХОплата;
			
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.СнятиеНаличных Тогда //ВНХ платеж
			ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.СнятиеНаличных;
			//Запрос = Новый Запрос;
			//Запрос.Текст = "ВЫБРАТЬ
			//|	УчетнаяПолитикаСрезПоследних.ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств КАК ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств
			//|ИЗ
			//|	РегистрСведений.УчетнаяПолитика.СрезПоследних(&ТекДата, Организация = &Организация) КАК УчетнаяПолитикаСрезПоследних";
			//
			//Запрос.УстановитьПараметр("ТекДата", ДанныеЗаполнения.Дата);
			//Запрос.УстановитьПараметр("Организация", ДанныеЗаполнения.Организация);
			//
			//Результат = Запрос.Выполнить();
			//Выборка = Результат.Выбрать();
			
			//Использовать57 = Истина;
			//Пока Выборка.Следующий() Цикл
			//	Использовать57 = Выборка.ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств;				
			//КонецЦикла;
			//Если Использовать57 Тогда
				КорСчет = ПланыСчетов.Учетный.НайтиПоКоду("57.01");
				КорСубконто1 = ОрганизацияКонтрагент.Организация;
				КорСубконто2 = Справочники.ВнутренниеДоговоры.НайтиПоРеквизиту("ДоговорКонтрагента", Источник.Договор);
				КорСубконто3 = Неопределено;
			//Иначе
			//	КорСчет = ПланыСчетов.Учетный.Счет5001();
			//	КорСубконто1 = Источник.Предприятие.УчетнаяПолитика.СтатьяВНХПоступление;
			//	КорСубконто2 = ДанныеЗаполнения.СчетКонтрагента;
			//	КорСубконто3 = Неопределено;
			//КонецЕсли;
			СтатьяДДС = Источник.Предприятие.УчетнаяПолитика.СтатьяВНХОплата; 
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита Тогда
			Если КорСчет = ПланыСчетов.Учетный.Счет6001() Тогда
				КорСчет = ПланыСчетов.Учетный.НайтиПоКоду("67.01");
			КонецЕсли;
			КорСубконто1 = Источник.Контрагент;
			КорСубконто2 = Источник.Договор.УЧ_Договор;
			КорСубконто3 = Неопределено;
		ИначеЕсли ОрганизацияКонтрагент.ЭтоОрганизация Тогда //ВНХ платеж
			ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ОплатаВНХ;
			//Если Источник.Предприятие = ОрганизацияКонтрагент.Предприятие Тогда
			//	КорСчет = ПланыСчетов.Учетный.НайтиПоКоду("57.01");
			//Иначе
				КорСчет = ПланыСчетов.Учетный.Счет7901();
			//КонецЕсли;
			КорСубконто1 = ОрганизацияКонтрагент.Организация;
			КорСубконто2 = Справочники.ВнутренниеДоговоры.НайтиПоРеквизиту("ДоговорКонтрагента", Источник.Договор);
			КорСубконто3 = Неопределено;
			СтатьяДДС = Источник.Предприятие.УчетнаяПолитика.СтатьяВНХОплата;
		ИначеЕсли УЧ_Сервер.ДенежныеБезналичныеСчета(КорСчет) Тогда
			ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ОплатаВНХ;
			КорСубконто1 = Источник.Предприятие.УчетнаяПолитика.СтатьяВНХПоступление;
			КорСубконто2 = ДанныеЗаполнения.СчетКонтрагента;
			КорСубконто3 = Неопределено;
			СтатьяДДС = Источник.Предприятие.УчетнаяПолитика.СтатьяВНХОплата;
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту Тогда
			КорСчет = ПланыСчетов.Учетный.НайтиПоКоду("58.02");
			КорСубконто1 = Источник.Контрагент;
			КорСубконто2 = Источник.Договор.УЧ_Договор;
			КорСубконто3 = Неопределено;
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма Тогда
			Если КорСчет = ПланыСчетов.Учетный.Счет6001() Тогда
				КорСчет = ПланыСчетов.Учетный.НайтиПоКоду("67.03");
			КонецЕсли;
			КорСубконто1 = Источник.Контрагент;
			КорСубконто2 = Источник.Договор.УЧ_Договор;
			КорСубконто3 = Неопределено;
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю Тогда
			КорСчет = ПланыСчетов.Учетный.Счет6201();
			КорСубконто1 = Источник.Контрагент;
			КорСубконто2 = Источник.Договор;
			КорСубконто3 = Неопределено; 
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя Тогда
			КорСчет = ПланыСчетов.Учетный.Счет99();
		Иначе
			Если Не ЗначениеЗаполнено(КорСубконто1) Тогда
				КорСубконто1 = Источник.Контрагент;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(КорСубконто2) Тогда
				КорСубконто2 = Источник.Договор;
			КонецЕсли;
		КонецЕсли;
		
		Источник.ПриходРасход = ВидОперации;
		
		//статью из заявки
		ОчищатьСтатьюДДСПриСозданииПлатежногоПоручения = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("ОчищатьСтатьюДДСПриСозданииПлатежногоПоручения");
		Если ОчищатьСтатьюДДСПриСозданииПлатежногоПоручения Тогда
			Если ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ПлатежноеПоручение") И ЗначениеЗаполнено(ДанныеЗаполнения.ДокументОснование.Заявка) Тогда
				СтатьяДДС = ДанныеЗаполнения.ДокументОснование.Заявка.СтатьяДДС;
				Источник.Подразделение = ДанныеЗаполнения.ДокументОснование.Заявка.Подразделение;
				Для Каждого ТекСтрока Из Источник.Проводки Цикл
					Если Не ЗначениеЗаполнено(ТекСтрока.ФинПодразделение) Тогда
						ТекСтрока.ФинПодразделение = Источник.Подразделение;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Источник.Проводки.Очистить();
		
		Если НЕ ДанныеЗаполнения.РасшифровкаПлатежа.Количество() Тогда
			
			НоваяСтрока = Источник.Проводки.Добавить();
			//ЗаполнитьЗначенияСвойств(НоваяСтрока, ТДанныеЗаполнения);
			НоваяСтрока.ФинЦФО = Источник.Предприятие;
			Если Не ЗначениеЗаполнено(НоваяСтрока.ФинПодразделение) Тогда
				НоваяСтрока.ФинПодразделение = Источник.Подразделение;	
			КонецЕсли;	
			НоваяСтрока.ФинСтатья = СтатьяДДС;
			НоваяСтрока.Сумма = ДанныеЗаполнения.СуммаДокумента;
			НоваяСтрока.Содержание = ДанныеЗаполнения.НазначениеПлатежа;
			
			НоваяСтрока.КорСчет = КорСчет;
			НоваяСтрока.КорСубконто1 = КорСубконто1;
			НоваяСтрока.КорСубконто2 = КорСубконто2;
			НоваяСтрока.КорСубконто3 = КорСубконто3;
			
			Если ЗначениеЗаполнено(Источник.Валюта1) И НЕ Источник.Валюта1 = УЧ_Сервер.НациональнаяВалюта() Тогда
				Источник.Курс1 = УЧ_Сервер.СредневзвешенныйКурсУчет(Источник.Дата, Источник.Субконто2, Источник.Валюта1).Курс;
				Источник.ВалютнаяСумма1 = ДанныеЗаполнения.СуммаДокумента;
				Источник.СуммаДокумента = Источник.Курс1 * Источник.ВалютнаяСумма1;
				НоваяСтрока.ВалСумма = ДанныеЗаполнения.СуммаДокумента;
				НоваяСтрока.Сумма = Источник.Курс1 * НоваяСтрока.ВалСумма;
				НоваяСтрока.Курс = Источник.Курс1;
			КонецЕсли;
			
			АнализЗаменыСтатьи91(НоваяСтрока);
			
		Иначе
			Источник.СуммаДокумента = 0;
			Источник.ВалютнаяСумма1 = 0;
			НациональнаяВалюта = УЧ_Сервер.НациональнаяВалюта();
			
			Для каждого ТекСтрока Из ДанныеЗаполнения.РасшифровкаПлатежа Цикл
				
				ТекСуммаПлатежа = ?(ДанныеЗаполнения.РасшифровкаПлатежа.Количество() = 1, ДанныеЗаполнения.СуммаДокумента, ТекСтрока.СуммаПлатежа);
				
				НоваяСтрока = Источник.Проводки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				НоваяСтрока.ФинЦФО = Источник.Предприятие;
				
				Если Не ЗначениеЗаполнено(НоваяСтрока.ФинПодразделение) Тогда
					НоваяСтрока.ФинПодразделение = Источник.Подразделение;	
				КонецЕсли;
				
				НоваяСтрока.ФинСтатья = СтатьяДДС;
				НоваяСтрока.Содержание = ДанныеЗаполнения.НазначениеПлатежа;
				
				Если ЗначениеЗаполнено(Источник.Валюта1) И НЕ Источник.Валюта1 = НациональнаяВалюта Тогда					
					НоваяСтрока.ВалСумма = ТекСуммаПлатежа;    
					Источник.ВалютнаяСумма1 = Источник.ВалютнаяСумма1 + ТекСуммаПлатежа;
					НоваяСтрока.Курс = ТекСтрока.КурсВзаиморасчетов / ?(ТекСтрока.КратностьВзаиморасчетов, ТекСтрока.КратностьВзаиморасчетов, 1);  
					Источник.Курс1 = НоваяСтрока.Курс;
					Источник.КурсУстановленПользователем = Истина;
					НоваяСтрока.Сумма = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(ТекСуммаПлатежа,
					Источник.Валюта1, НациональнаяВалюта, ТекСтрока.КурсВзаиморасчетов, 1, ТекСтрока.КратностьВзаиморасчетов, 1);  
					
					Источник.СуммаДокумента = Источник.СуммаДокумента + НоваяСтрока.Сумма;
				Иначе
					НоваяСтрока.Сумма = ТекСуммаПлатежа;
					Источник.СуммаДокумента = Источник.СуммаДокумента + НоваяСтрока.Сумма;
				КонецЕсли;
				
				Если Не ОрганизацияКонтрагент.ЭтоОрганизация Тогда //ВНХ платеж
					
					Если ДанныеЗаполнения.РасшифровкаПлатежа.Количество() > 1 И ЗначениеЗаполнено(ТекСтрока.СчетУчетаРасчетовСКонтрагентом) Тогда
						Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрока.СчетУчетаРасчетовСКонтрагентом));
						
						Для каждого ТекСчет Из Соотв Цикл
							КорСчет = ТекСчет.СчетУУ;
							Прервать;
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли; 
				
				НоваяСтрока.КорСчет = КорСчет;
				НоваяСтрока.КорСубконто1 = КорСубконто1;
				НоваяСтрока.КорСубконто2 = КорСубконто2;
				НоваяСтрока.КорСубконто3 = КорСубконто3;
				
				АнализЗаменыСтатьи91(НоваяСтрока);
				
			КонецЦикла; 
			
		КонецЕсли;
		
		Если ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
			Источник.ДокОснование = ДанныеЗаполнения.ДокументОснование;
			Источник.ГУИДОснования = ДанныеЗаполнения.ДокументОснование.УИДСтроки;
			
			Если ДанныеЗаполнения.ДокументОснование.ТабличнаяЧасть.Количество() = Источник.Проводки.Количество() Тогда
				ИндексСтроки = 0;
				//Источник.СуммаДокумента = 0;
				
				Для Каждого ТекСтрока Из ДанныеЗаполнения.ДокументОснование.ТабличнаяЧасть Цикл
					Источник.Проводки[ИндексСтроки].УИДСтрокиЗаявки = ТекСтрока.УИДСтрокиЗаявки;
					Источник.Проводки[ИндексСтроки].КлючАналитикиБюджета = ТекСтрока.КлючАналитикиБюджета;
					//Источник.Проводки[ИндексСтроки].Сумма = ТекСтрока.Сумма;
					//Источник.СуммаДокумента = Источник.СуммаДокумента + ТекСтрока.Сумма;
				КонецЦикла; 
				
			ИначеЕсли ДанныеЗаполнения.ДокументОснование.ТабличнаяЧасть.Количество() > 1 И Источник.Проводки.Количество() = 1 И ДанныеЗаполнения.ДокументОснование.СуммаДокумента = Источник.Проводки.Итог("Сумма") Тогда
				ТекСтрока = Источник.Проводки[0];
				
				Для каждого ТекСтрокаИсточника Из ДанныеЗаполнения.ДокументОснование.ТабличнаяЧасть Цикл
					НоваяСтрока = Источник.Проводки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаИсточника);
					НоваяСтрока.ФинСтатья = ТекСтрокаИсточника.СтатьяДДС;
					НоваяСтрока.ФинПодразделение = ТекСтрокаИсточника.Подразделение;
				КонецЦикла;
				
				Источник.Проводки.Удалить(ТекСтрока);
			КонецЕсли;
			
		КонецЕсли;
		
		Источник.РасшифровкаОплаты = Источник.Проводки.Количество() > 1;
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗаполнитьУЧ_ДвижДСПостРс(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_ДвижениеДС") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, РучнаяКорректировка");
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		Источник.Субконто2 = ДанныеЗаполнения.СчетОрганизации;
		
		Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ДанныеЗаполнения.СчетБанк));
		Для каждого ТекСчет Из Соотв Цикл
			Источник.Счет = ТекСчет.СчетУУ;
			Прервать;
		КонецЦикла;
		Если Не ЗначениеЗаполнено(Источник.Счет) Тогда
			Источник.Счет = ПланыСчетов.Учетный.НайтиПоКоду("51.01");
		КонецЕсли;
		
		Источник.ВидОперации = Перечисления.ВидыОперацийДвиженияДС.БанковскаяВыписка;
		Источник.Договор = ДанныеЗаполнения.ДоговорКонтрагента; 
		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.Организация);
		Если ЗначениеЗаполнено(СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации)) Тогда
			Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации);
		КонецЕсли;
		//Если Не ЗначениеЗаполнено(Источник.Подразделение) Тогда
		//	Если ЗначениеЗаполнено(СоотвПодразделений.Получить(ДанныеЗаполнения.Организация)) Тогда
		//		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.Организация);
		//	КонецЕсли;
		//КонецЕсли;
		
		Источник.Валюта1 = ДанныеЗаполнения.ВалютаДокумента;
		ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Поступление;
		
		КорСчет = ПланыСчетов.Учетный.Счет6201();
		СтатьяДДС = ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств;
		
		КорСубконто1 = Неопределено;
		КорСубконто2 = Неопределено;
		КорСубконто3 = Неопределено;
		
		Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ДанныеЗаполнения.СчетУчетаРасчетовСКонтрагентом));
		Для каждого ТекСчет Из Соотв Цикл
			КорСчет = ТекСчет.СчетУУ;
			ИндексСубконто = 0;
			Для каждого ТекСубконто Из ТекСчет.СчетУУ.ВидыСубконто Цикл
				ИндексСубконто = ИндексСубконто + 1;
				Если ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ1 Тогда
					КорСубконто1 = ДанныеЗаполнения["СубконтоКт" + Строка(ИндексСубконто)];
					Если НЕ ТипЗнч(КорСубконто1) = ТипЗнч(ДанныеЗаполнения["СубконтоКт" + Строка(ИндексСубконто)]) Тогда
						КорСубконто1 = Неопределено;
					КонецЕсли;
				ИначеЕсли ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ2 Тогда
					КорСубконто2 = ДанныеЗаполнения["СубконтоКт" + Строка(ИндексСубконто)];
					Если НЕ ТипЗнч(КорСубконто2) = ТипЗнч(ДанныеЗаполнения["СубконтоКт" + Строка(ИндексСубконто)]) Тогда
						КорСубконто2 = Неопределено;
					КонецЕсли;
				ИначеЕсли ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ3 Тогда
					КорСубконто3 = ДанныеЗаполнения["СубконтоКт" + Строка(ИндексСубконто)];
					Если НЕ ТипЗнч(КорСубконто3) = ТипЗнч(ДанныеЗаполнения["СубконтоКт" + Строка(ИндексСубконто)]) Тогда
						КорСубконто3 = Неопределено;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла; 
			Прервать;
		КонецЦикла;
		
		Если ДанныеЗаполнения.РасшифровкаПлатежа.Количество() = 1 Тогда
			Если ЗначениеЗаполнено(ДанныеЗаполнения.РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентом) Тогда
				Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ДанныеЗаполнения.РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентом));
				Для каждого ТекСчет Из Соотв Цикл
					КорСчет = ТекСчет.СчетУУ;
					Прервать;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		СчетДоговор = Источник.Договор.СчетВзаиморасчетов;
		Если ЗначениеЗаполнено(СчетДоговор) Тогда
			КорСчет = СчетДоговор;		
		КонецЕсли;
        
		ОрганизацияКонтрагент = КонтрагентВОрганизациях(Источник.Контрагент, Источник, ДанныеЗаполнения);
		СуммаУслуг = 0;
		
		Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПереводСДругогоСчета Тогда
			ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ;
			КорСчет = ПланыСчетов.Учетный.НайтиПоКоду("57.01");
			КорСубконто1 = ДанныеЗаполнения.Организация;
			КорСубконто2 = Неопределено;
			КорСубконто3 = Неопределено;
			Источник.Контрагент = ДанныеЗаполнения.Организация;
			СтатьяДДС = Источник.Предприятие.УчетнаяПолитика.СтатьяВНХОплата;
		ИначеЕсли ОрганизацияКонтрагент.ЭтоОрганизация Тогда //ВНХ платеж
			ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ;
			//Если Источник.Предприятие = ОрганизацияКонтрагент.Предприятие Тогда
			//	КорСчет = ПланыСчетов.Учетный.НайтиПоКоду("57.01");
			//Иначе
				КорСчет = ПланыСчетов.Учетный.Счет7901();
			//КонецЕсли;
			КорСубконто1 = ОрганизацияКонтрагент.Организация;
			КорСубконто2 = Справочники.ВнутренниеДоговоры.НайтиПоРеквизиту("ДоговорКонтрагента", Источник.Договор);
			КорСубконто3 = Неопределено;
			СтатьяДДС = Источник.Предприятие.УчетнаяПолитика.СтатьяВНХПоступление;
		ИначеЕсли УЧ_Сервер.ДенежныеБезналичныеСчета(КорСчет) Тогда
			ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ;
			КорСчет = ПланыСчетов.Учетный.Счет5101();
			КорСубконто1 = Источник.Предприятие.УчетнаяПолитика.СтатьяВНХОплата;
			КорСубконто2 = ДанныеЗаполнения.СчетКонтрагента;
			КорСубконто3 = Неопределено;
			СтатьяДДС = Источник.Предприятие.УчетнаяПолитика.СтатьяВНХОплата;
		ИначеЕсли УЧ_Сервер.ДенежныеНаличныеСчета(КорСчет) ИЛИ ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВзносНаличными Тогда
			ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ;
			КорСчет = ПланыСчетов.Учетный.Счет5001();
			Для каждого ТекСтрока Из ДанныеЗаполнения.РасшифровкаПлатежа Цикл
				Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрока.СчетУчетаРасчетовСКонтрагентом));
				Для каждого ТекСчет Из Соотв Цикл
					КорСчет = ТекСчет.СчетУУ;
					Прервать;
				КонецЦикла;
			КонецЦикла;
			Если УЧ_Сервер.ДенежныеНаличныеСчета(КорСчет) Тогда
				КорСубконто1 = Источник.Предприятие.УчетнаяПолитика.СтатьяВНХОплата;
				КорСубконто2 = ДанныеЗаполнения.СчетКонтрагента;
				КорСубконто3 = Неопределено;
			Иначе	
				КорСубконто1 = Источник.Контрагент;
				КорСубконто2 = Источник.Договор.УЧ_Договор;
				КорСубконто3 = Неопределено;
			КонецЕсли;
			СтатьяДДС = Источник.Предприятие.УчетнаяПолитика.СтатьяВНХОплата;
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаКонтрагентом Тогда
			КорСчет = ПланыСчетов.Учетный.НайтиПоКоду("58.02");
			КорСубконто1 = Источник.Контрагент;
			КорСубконто2 = Источник.Договор.УЧ_Договор;
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеЗайма Тогда
			Если КорСчет = ПланыСчетов.Учетный.Счет6201() Тогда
				КорСчет = ПланыСчетов.Учетный.НайтиПоКоду("67.03");
			КонецЕсли;
			КорСубконто1 = Источник.Контрагент;
			КорСубконто2 = Источник.Договор.УЧ_Договор;
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеКредита Тогда
			ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Поступление;
			Если КорСчет = ПланыСчетов.Учетный.Счет6001() Тогда
				КорСчет = ПланыСчетов.Учетный.НайтиПоКоду("67.01");
			КонецЕсли;
			КорСубконто1 = Источник.Контрагент;
			КорСубконто2 = Источник.Договор.УЧ_Договор;
		ИначеЕсли КорСчет = ПланыСчетов.Учетный.НайтиПоКоду("57.03") ИЛИ ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда
			ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПоступленияПоЭквайрингу;
			Если КорСчет = ПланыСчетов.Учетный.Счет6201() Тогда
				КорСчет = ПланыСчетов.Учетный.НайтиПоКоду("57.03");
			КонецЕсли;
			КорСубконто1 = Источник.Контрагент;
			КорСубконто2 = Источник.Договор;
			КорСчетУслуг = Неопределено;
			Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ДанныеЗаполнения.СчетУчетаРасчетовСКонтрагентом));
			Для каждого ТекСчет Из Соотв Цикл
				КорСчетУслуг = ТекСчет.СчетУУ;
				Прервать;
			КонецЦикла;
			СуммаУслуг = ДанныеЗаполнения.СуммаУслуг;
			Если Не ЗначениеЗаполнено(КорСчетУслуг) Тогда
				КорСчетУслуг = ПланыСчетов.Учетный.Счет91();			
			КонецЕсли;
			КорСубконтоУслуг1 = ДанныеЗаполнения.СубконтоКт1;
			КорСубконтоУслуг2 = ДанныеЗаполнения.СубконтоКт2;
			КорСубконтоУслуг3 = ДанныеЗаполнения.СубконтоКт3;
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика Тогда
			КорСчет = ПланыСчетов.Учетный.Счет6001();
			КорСубконто1 = Источник.Контрагент;
			КорСубконто2 = Источник.Договор;
		Иначе
			Если Не ЗначениеЗаполнено(КорСубконто1) Тогда
				КорСубконто1 = Источник.Контрагент;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(КорСубконто2) Тогда
				КорСубконто2 = Источник.Договор;
			КонецЕсли;
		КонецЕсли;
		
		Источник.ПриходРасход = ВидОперации;


		Источник.Проводки.Очистить();
		
		Если НЕ ДанныеЗаполнения.РасшифровкаПлатежа.Количество() Тогда
			
			НоваяСтрока = Источник.Проводки.Добавить();
			//ЗаполнитьЗначенияСвойств(НоваяСтрока, ТДанныеЗаполнения);
			НоваяСтрока.ФинЦФО = Источник.Предприятие;
			НоваяСтрока.ФинСтатья = СтатьяДДС;
			НоваяСтрока.Сумма = ДанныеЗаполнения.СуммаДокумента;
			НоваяСтрока.Содержание = ДанныеЗаполнения.НазначениеПлатежа;
			
			НоваяСтрока.КорСчет = КорСчет;
			НоваяСтрока.КорСубконто1 = КорСубконто1;
			НоваяСтрока.КорСубконто2 = КорСубконто2;
			НоваяСтрока.КорСубконто3 = КорСубконто3;
			
			Если СуммаУслуг Тогда
				НоваяСтрока.СуммаУслуг = СуммаУслуг;
				НоваяСтрока.КорСчетУслуг = КорСчетУслуг;
				НоваяСтрока.КорСубконтоУслуг1 = КорСубконтоУслуг1;
				НоваяСтрока.КорСубконтоУслуг2 = КорСубконтоУслуг2;
				НоваяСтрока.КорСубконтоУслуг3 = КорСубконтоУслуг3;
				АнализЗаменыСтатьи91(НоваяСтрока, Новый Структура("КорСчет, КорСубконто1, КорСубконто2", "КорСчетУслуг", "КорСубконтоУслуг1", "КорСубконтоУслуг2"));	
			КонецЕсли;
			
			АнализЗаменыСтатьи91(НоваяСтрока);	
			
		Иначе
			Источник.СуммаДокумента = 0;
			Источник.ВалютнаяСумма1 = 0;
			Для каждого ТекСтрока Из ДанныеЗаполнения.РасшифровкаПлатежа Цикл
				
				ТекСуммаПлатежа = ?(ДанныеЗаполнения.РасшифровкаПлатежа.Количество() = 1, ДанныеЗаполнения.СуммаДокумента, ТекСтрока.СуммаПлатежа);
				
				НоваяСтрока = Источник.Проводки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				НоваяСтрока.ФинЦФО = Источник.Предприятие;
				НоваяСтрока.ФинСтатья = СтатьяДДС;
				НоваяСтрока.Сумма = ТекСуммаПлатежа;
				Источник.СуммаДокумента = Источник.СуммаДокумента + НоваяСтрока.Сумма; 
				НоваяСтрока.Содержание = ДанныеЗаполнения.НазначениеПлатежа;
				
				Если ЗначениеЗаполнено(Источник.Валюта1) И НЕ Источник.Валюта1 = УЧ_Сервер.НациональнаяВалюта() И Не ТекСтрока.СуммаВзаиморасчетов = ТекСуммаПлатежа Тогда
					НоваяСтрока.Сумма = ?(ТекСтрока.СуммаВзаиморасчетов И НЕ ТекСтрока.СуммаВзаиморасчетов = ТекСтрока.СуммаПлатежа, ТекСтрока.СуммаВзаиморасчетов, ТекСуммаПлатежа);
					НоваяСтрока.ВалСумма = ТекСуммаПлатежа;
					НоваяСтрока.Курс = ТекСтрока.КурсВзаиморасчетов / ?(ТекСтрока.КратностьВзаиморасчетов, ТекСтрока.КратностьВзаиморасчетов, 1);
					Источник.ВалютнаяСумма1 = Источник.ВалютнаяСумма1 + ТекСуммаПлатежа;
					Источник.Курс1 = НоваяСтрока.Курс;
				КонецЕсли;

				Если Не ОрганизацияКонтрагент.ЭтоОрганизация Тогда //ВНХ платеж
					Если ДанныеЗаполнения.РасшифровкаПлатежа.Количество() > 1 И ЗначениеЗаполнено(ТекСтрока.СчетУчетаРасчетовСКонтрагентом) Тогда
						Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрока.СчетУчетаРасчетовСКонтрагентом));
						Для каждого ТекСчет Из Соотв Цикл
							КорСчет = ТекСчет.СчетУУ;
							Прервать;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				НоваяСтрока.КорСчет = КорСчет;
				НоваяСтрока.КорСубконто1 = КорСубконто1;
				НоваяСтрока.КорСубконто2 = КорСубконто2;
				НоваяСтрока.КорСубконто3 = КорСубконто3;
				
				Если СуммаУслуг Тогда
					НоваяСтрока.СуммаУслуг = СуммаУслуг;
					НоваяСтрока.КорСчетУслуг = КорСчетУслуг;
					НоваяСтрока.КорСубконтоУслуг1 = КорСубконтоУслуг1;
					НоваяСтрока.КорСубконтоУслуг2 = КорСубконтоУслуг2;
					НоваяСтрока.КорСубконтоУслуг3 = КорСубконтоУслуг3;
					СуммаУслуг = 0;
					АнализЗаменыСтатьи91(НоваяСтрока, Новый Структура("КорСчет, КорСубконто1, КорСубконто2", "КорСчетУслуг", "КорСубконтоУслуг1", "КорСубконтоУслуг2"));	
				КонецЕсли;
				
				АнализЗаменыСтатьи91(НоваяСтрока);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Источник.РасшифровкаОплаты = Источник.Проводки.Количество() > 1;
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗаполнитьУЧ_ДвижДСРКО(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_ДвижениеДС") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, РучнаяКорректировка");
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		//Источник.Субконто2 = ДанныеЗаполнения.СчетОрганизации;
		
		КорСубконто1 = Неопределено;
		КорСубконто2 = Неопределено;
		КорСубконто3 = Неопределено;
		
		Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ДанныеЗаполнения.СчетКасса));
		
		Для каждого ТекСчет Из Соотв Цикл
			Источник.Счет = ТекСчет.СчетУУ;
			Если Не ЗначениеЗаполнено(Источник.Субконто2) Тогда
				Источник.Субконто2 = ТекСчет.ЗначениеСубконтоУУ2;
			КонецЕсли;
			Прервать;
		КонецЦикла; 
		
		Если Не ЗначениеЗаполнено(Источник.Счет) Тогда
			Источник.Счет = ПланыСчетов.Учетный.НайтиПоКоду("50.01");
		КонецЕсли;
		
		Источник.ВидОперации = Перечисления.ВидыОперацийДвиженияДС.КассовыйОрдер;
		ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Оплата;
		Источник.Договор = ДанныеЗаполнения.ДоговорКонтрагента;
		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.Организация);
		Если ЗначениеЗаполнено(СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации)) Тогда
			Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации);
		КонецЕсли;
		//Если Не ЗначениеЗаполнено(Источник.Подразделение) Тогда
		//	Если ЗначениеЗаполнено(СоотвПодразделений.Получить(ДанныеЗаполнения.Организация)) Тогда
		//		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.Организация); 
		//	КонецЕсли;
		//КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Источник.Субконто2) И ЗначениеЗаполнено(Источник.Подразделение) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	Кассы.Ссылка КАК Ссылка
			               |ИЗ
			               |	Справочник.Кассы КАК Кассы
			               |ГДЕ
			               |	Кассы.Подразделение = &Подразделение
			               |	И Кассы.ПометкаУдаления = ЛОЖЬ";
			
			Запрос.УстановитьПараметр("Подразделение", Источник.Подразделение);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Источник.Субконто2 = Выборка.Ссылка;
			КонецЦикла;  
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Источник.Субконто2) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	Кассы.Ссылка КАК Ссылка
			               |ИЗ
			               |	Справочник.Кассы КАК Кассы
			               |ГДЕ
			               |	Кассы.Предприятие = &Предприятие
			               |	И Кассы.ВидИсточника = &ВидИсточника
			               |	И Кассы.ПометкаУдаления = ЛОЖЬ";
			
			Запрос.УстановитьПараметр("Предприятие", Источник.Предприятие);
			Запрос.УстановитьПараметр("ВидИсточника", Перечисления.ГД_ВидыИсточников.Касса);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Если Выборка.Количество() = 1 Тогда
				Пока Выборка.Следующий() Цикл
					Источник.Субконто2 = Выборка.Ссылка;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Источник.Субконто2) Тогда
			Источник.Субконто2 = Справочники.Кассы.НайтиПоНаименованию("Касса организации", Истина);
		КонецЕсли;
		
		КорСчет = ПланыСчетов.Учетный.Счет6001();
		СтатьяДДС = ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств;
		
		Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ДанныеЗаполнения.СчетУчетаРасчетовСКонтрагентом));
		Для каждого ТекСчет Из Соотв Цикл
			КорСчет = ТекСчет.СчетУУ;
			ИндексСубконто = 0;
			Для каждого ТекСубконто Из ТекСчет.СчетУУ.ВидыСубконто Цикл
				ИндексСубконто = ИндексСубконто + 1;
				Если ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ1 Тогда
					КорСубконто1 = ДанныеЗаполнения["СубконтоДт" + Строка(ИндексСубконто)];
					Если НЕ ТипЗнч(КорСубконто1) = ТипЗнч(ДанныеЗаполнения["СубконтоДт" + Строка(ИндексСубконто)]) Тогда
						КорСубконто1 = Неопределено;
					КонецЕсли;
				ИначеЕсли ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ2 Тогда
					КорСубконто2 = ДанныеЗаполнения["СубконтоДт" + Строка(ИндексСубконто)];
					Если НЕ ТипЗнч(КорСубконто2) = ТипЗнч(ДанныеЗаполнения["СубконтоДт" + Строка(ИндексСубконто)]) Тогда
						КорСубконто2 = Неопределено;
					КонецЕсли;
				ИначеЕсли ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ3 Тогда
					КорСубконто3 = ДанныеЗаполнения["СубконтоДт" + Строка(ИндексСубконто)];
					Если НЕ ТипЗнч(КорСубконто3) = ТипЗнч(ДанныеЗаполнения["СубконтоДт" + Строка(ИндексСубконто)]) Тогда
						КорСубконто3 = Неопределено;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла; 
			Прервать;
		КонецЦикла;
		
		Если ДанныеЗаполнения.РасшифровкаПлатежа.Количество() = 1 Тогда
			Если ЗначениеЗаполнено(ДанныеЗаполнения.РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентом) Тогда
				Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ДанныеЗаполнения.РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентом));
				Для каждого ТекСчет Из Соотв Цикл
					КорСчет = ТекСчет.СчетУУ;
					Прервать;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		СчетДоговор = Источник.Договор.СчетВзаиморасчетов;
		Если ЗначениеЗаполнено(СчетДоговор) Тогда
			КорСчет = СчетДоговор;		
		КонецЕсли;
		
		ОрганизацияКонтрагент = КонтрагентВОрганизациях(Источник.Контрагент, Источник, ДанныеЗаполнения);
		
		Если ОрганизацияКонтрагент.ЭтоОрганизация Тогда //ВНХ платеж
			ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ОплатаВНХ;
			//Если Источник.Предприятие = ОрганизацияКонтрагент.Предприятие Тогда
			//	КорСчет = ПланыСчетов.Учетный.НайтиПоКоду("57.01");
			//Иначе
				КорСчет = ПланыСчетов.Учетный.Счет7901();
			//КонецЕсли;
			КорСубконто1 = ОрганизацияКонтрагент.Организация;
			КорСубконто2 = Справочники.ВнутренниеДоговоры.НайтиПоРеквизиту("ДоговорКонтрагента", Источник.Договор);
			КорСубконто3 = Неопределено;
			СтатьяДДС = Источник.Предприятие.УчетнаяПолитика.СтатьяВНХПоступление;
		ИначеЕсли УЧ_Сервер.ДенежныеБезналичныеСчета(КорСчет) ИЛИ ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
			ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ОплатаВНХ;
			КорСчет = ПланыСчетов.Учетный.Счет5101();
			КорСубконто1 = Источник.Предприятие.УчетнаяПолитика.СтатьяВНХОплата;
			КорСубконто2 = ДанныеЗаполнения.СчетОрганизации;
			КорСубконто3 = Неопределено;
			СтатьяДДС = Источник.Предприятие.УчетнаяПолитика.СтатьяВНХОплата;
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу Тогда
			ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеСотруднику;
			КорСчет = ПланыСчетов.Учетный.НайтиПоКоду("71.01");
			КорСубконто1 = Источник.Контрагент;
			КорСубконто2 = Источник.Договор;
			КорСубконто3 = Неопределено;
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаЗаймаКонтрагенту Тогда
			КорСчет = ПланыСчетов.Учетный.НайтиПоКоду("58.02");
			КорСубконто1 = Источник.Контрагент;
			КорСубконто2 = Источник.Договор.УЧ_Договор;
			КорСубконто3 = Неопределено;
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратЗайма Тогда
			Если КорСчет = ПланыСчетов.Учетный.Счет6001() Тогда
				КорСчет = ПланыСчетов.Учетный.НайтиПоКоду("67.03");
			КонецЕсли;
			КорСубконто1 = Источник.Контрагент;
			КорСубконто2 = Источник.Договор.УЧ_Договор;
			КорСубконто3 = Неопределено;
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
			ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеСотруднику;
			КорСчет = ПланыСчетов.Учетный.Счет70();
			КорСубконто1 = ДанныеЗаполнения.Контрагент;
			КорСубконто2 = Неопределено;
			
			ТекВедомость = ДанныеЗаполнения.ПлатежнаяВедомость;
			Если Не ЗначениеЗаполнено(ТекВедомость) Тогда
				Для каждого ТекСтрокаВедомость Из ДанныеЗаполнения.ВыплатаЗаработнойПлаты Цикл
					ТекВедомость = ТекСтрокаВедомость.Ведомость;
				КонецЦикла;
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.сабОбработкаДокументов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ДокументБУ.Установить(ТекВедомость);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() <> 0 Тогда
				Для Каждого стрНабора из НаборЗаписей Цикл
					КорСубконто3 = стрНабора.ДокументУУ;
				КонецЦикла;
			КонецЕсли;
		Иначе
			ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Оплата;
			Если Не ЗначениеЗаполнено(КорСубконто1) Тогда
				КорСубконто1 = Источник.Контрагент;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(КорСубконто2) Тогда
				КорСубконто2 = Источник.Договор;
			КонецЕсли;
		КонецЕсли;
		
		Источник.ПриходРасход = ВидОперации;
		
		Источник.Проводки.Очистить();
		
		Если НЕ ДанныеЗаполнения.РасшифровкаПлатежа.Количество() Тогда
			
			НоваяСтрока = Источник.Проводки.Добавить();
			//ЗаполнитьЗначенияСвойств(НоваяСтрока, ТДанныеЗаполнения);
			НоваяСтрока.ФинЦФО = Источник.Предприятие;
			НоваяСтрока.ФинСтатья = СтатьяДДС;
			НоваяСтрока.Сумма = ДанныеЗаполнения.СуммаДокумента;
			НоваяСтрока.Содержание = ДанныеЗаполнения.Основание;
			
			НоваяСтрока.КорСчет = КорСчет;
			НоваяСтрока.КорСубконто1 = КорСубконто1;
			НоваяСтрока.КорСубконто2 = КорСубконто2;
			НоваяСтрока.КорСубконто3 = КорСубконто3;
			
			АнализЗаменыСтатьи91(НоваяСтрока);
			
		Иначе
			
			Для каждого ТекСтрока Из ДанныеЗаполнения.РасшифровкаПлатежа Цикл
				
				НоваяСтрока = Источник.Проводки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				НоваяСтрока.ФинЦФО = Источник.Предприятие;
				НоваяСтрока.ФинСтатья = СтатьяДДС;
				НоваяСтрока.Сумма = ТекСтрока.СуммаПлатежа;
				НоваяСтрока.Содержание = ДанныеЗаполнения.Основание;
				
				Если Не ОрганизацияКонтрагент.ЭтоОрганизация Тогда //ВНХ платеж
					Если ДанныеЗаполнения.РасшифровкаПлатежа.Количество()> 1 И ЗначениеЗаполнено(ТекСтрока.СчетУчетаРасчетовСКонтрагентом) Тогда
						Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрока.СчетУчетаРасчетовСКонтрагентом));
						Для каждого ТекСчет Из Соотв Цикл
							КорСчет = ТекСчет.СчетУУ;
							Прервать;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				НоваяСтрока.КорСчет = КорСчет;
				НоваяСтрока.КорСубконто1 = КорСубконто1;
				НоваяСтрока.КорСубконто2 = КорСубконто2;
				НоваяСтрока.КорСубконто3 = КорСубконто3;
				
				АнализЗаменыСтатьи91(НоваяСтрока);
				
			КонецЦикла; 
			
		КонецЕсли;
		
		Источник.РасшифровкаОплаты = Источник.Проводки.Количество() > 1;
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗаполнитьУЧ_ДвижДСПКО(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_ДвижениеДС") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, РучнаяКорректировка");
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		//Источник.Субконто2 = ДанныеЗаполнения.СчетОрганизации;
		
		КорСубконто1 = Неопределено;
		КорСубконто2 = Неопределено;
		КорСубконто3 = Неопределено;

		Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ДанныеЗаполнения.СчетКасса));
		Для каждого ТекСчет Из Соотв Цикл
			Источник.Счет = ТекСчет.СчетУУ; 
			Если Не ЗначениеЗаполнено(Источник.Субконто2) Тогда
				Источник.Субконто2 = ТекСчет.ЗначениеСубконтоУУ2; 
			КонецЕсли;
			Прервать;
		КонецЦикла;
		Если Не ЗначениеЗаполнено(Источник.Счет) Тогда
			Источник.Счет = ПланыСчетов.Учетный.НайтиПоКоду("50.01");
		КонецЕсли;
		
		Источник.ВидОперации = Перечисления.ВидыОперацийДвиженияДС.КассовыйОрдер;
		ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Поступление;
		Источник.Договор = ДанныеЗаполнения.ДоговорКонтрагента;
		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.Организация);
		Если ЗначениеЗаполнено(СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации)) Тогда
			Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации);
		КонецЕсли;
		//Если Не ЗначениеЗаполнено(Источник.Подразделение) Тогда
		//	Если ЗначениеЗаполнено(СоотвПодразделений.Получить(ДанныеЗаполнения.Организация)) Тогда
		//		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.Организация);
		//	КонецЕсли;
		//КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Источник.Субконто2) И ЗначениеЗаполнено(Источник.Подразделение) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	Кассы.Ссылка КАК Ссылка
			               |ИЗ
			               |	Справочник.Кассы КАК Кассы
			               |ГДЕ
			               |	Кассы.Подразделение = &Подразделение
			               |	И Кассы.ПометкаУдаления = ЛОЖЬ";
			
			Запрос.УстановитьПараметр("Подразделение", Источник.Подразделение);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Источник.Субконто2 = Выборка.Ссылка;
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Источник.Субконто2) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	Кассы.Ссылка КАК Ссылка
			               |ИЗ
			               |	Справочник.Кассы КАК Кассы
			               |ГДЕ
			               |	Кассы.Предприятие = &Предприятие
			               |	И Кассы.ВидИсточника = &ВидИсточника
			               |	И Кассы.ПометкаУдаления = ЛОЖЬ";
			
			Запрос.УстановитьПараметр("Предприятие", Источник.Предприятие);
			Запрос.УстановитьПараметр("ВидИсточника", Перечисления.ГД_ВидыИсточников.Касса);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Если Выборка.Количество() = 1 Тогда
				Пока Выборка.Следующий() Цикл
					Источник.Субконто2 = Выборка.Ссылка;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Источник.Субконто2) Тогда
			Источник.Субконто2 = Справочники.Кассы.НайтиПоНаименованию("Касса организации", Истина);
		КонецЕсли;
		
		КорСчет = ПланыСчетов.Учетный.Счет6201();
		СтатьяДДС = ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств;
		
		Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ДанныеЗаполнения.СчетУчетаРасчетовСКонтрагентом));
		Для каждого ТекСчет Из Соотв Цикл
			КорСчет = ТекСчет.СчетУУ;
			ИндексСубконто = 0;
			Для каждого ТекСубконто Из ТекСчет.СчетУУ.ВидыСубконто Цикл
				ИндексСубконто = ИндексСубконто + 1;
				Если ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ1 Тогда
					КорСубконто1 = ДанныеЗаполнения["СубконтоКт" + Строка(ИндексСубконто)];
					Если НЕ ТипЗнч(КорСубконто1) = ТипЗнч(ДанныеЗаполнения["СубконтоКт" + Строка(ИндексСубконто)]) Тогда
						КорСубконто1 = Неопределено;
					КонецЕсли;
				ИначеЕсли ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ2 Тогда
					КорСубконто2 = ДанныеЗаполнения["СубконтоКт" + Строка(ИндексСубконто)];
					Если НЕ ТипЗнч(КорСубконто2) = ТипЗнч(ДанныеЗаполнения["СубконтоКт" + Строка(ИндексСубконто)]) Тогда
						КорСубконто2 = Неопределено;
					КонецЕсли;
				ИначеЕсли ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ3 Тогда
					КорСубконто3 = ДанныеЗаполнения["СубконтоКт" + Строка(ИндексСубконто)];
					Если НЕ ТипЗнч(КорСубконто3) = ТипЗнч(ДанныеЗаполнения["СубконтоКт" + Строка(ИндексСубконто)]) Тогда
						КорСубконто3 = Неопределено;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла; 
			Прервать;
		КонецЦикла;
		
		Если ДанныеЗаполнения.РасшифровкаПлатежа.Количество() = 1 Тогда
			Если ЗначениеЗаполнено(ДанныеЗаполнения.РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентом) Тогда
				Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ДанныеЗаполнения.РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентом));
				Для каждого ТекСчет Из Соотв Цикл
					КорСчет = ТекСчет.СчетУУ;
					Прервать;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		СчетДоговор = Источник.Договор.СчетВзаиморасчетов;
		Если ЗначениеЗаполнено(СчетДоговор) Тогда
			КорСчет = СчетДоговор;		
		КонецЕсли;
		
		ОрганизацияКонтрагент = КонтрагентВОрганизациях(Источник.Контрагент, Источник, ДанныеЗаполнения);
		
		Если ОрганизацияКонтрагент.ЭтоОрганизация Тогда //ВНХ платеж
			ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ;
			//Если Источник.Предприятие = ОрганизацияКонтрагент.Предприятие Тогда
			//	КорСчет = ПланыСчетов.Учетный.НайтиПоКоду("57.01");
			//Иначе
				КорСчет = ПланыСчетов.Учетный.Счет7901();
			//КонецЕсли;
			КорСубконто1 = ОрганизацияКонтрагент.Организация;
			КорСубконто2 = Справочники.ВнутренниеДоговоры.НайтиПоРеквизиту("ДоговорКонтрагента", Источник.Договор);
			КорСубконто3 = Неопределено;
			СтатьяДДС = Источник.Предприятие.УчетнаяПолитика.СтатьяВНХПоступление;
		ИначеЕсли УЧ_Сервер.ДенежныеБезналичныеСчета(КорСчет) ИЛИ ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке Тогда
			ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПоступлениеВНХ;
			КорСчет = ПланыСчетов.Учетный.НайтиПоКоду("57.01");
			КорСубконто1 = ДанныеЗаполнения.Организация;
			КорСубконто2 = Справочники.ВнутренниеДоговоры.НайтиПоРеквизиту("ДоговорКонтрагента", Источник.Договор);
			КорСубконто3 = Неопределено;
			Источник.Контрагент = ДанныеЗаполнения.Организация;
			СтатьяДДС = Источник.Предприятие.УчетнаяПолитика.СтатьяВНХОплата;
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратЗаймаКонтрагентом Тогда
			КорСчет = ПланыСчетов.Учетный.НайтиПоКоду("58.02");
			КорСубконто1 = Источник.Контрагент;
			КорСубконто2 = Источник.Договор.УЧ_Договор;
			КорСубконто3 = Неопределено;
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеЗайма Тогда
			Если КорСчет = ПланыСчетов.Учетный.Счет6201() Тогда
				КорСчет = ПланыСчетов.Учетный.НайтиПоКоду("67.03");
			КонецЕсли;
			КорСубконто1 = Источник.Контрагент;
			КорСубконто2 = Источник.Договор.УЧ_Договор;
			КорСубконто3 = Неопределено; 
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПодотчетногоЛица Тогда
			
			Если КорСчет = ПланыСчетов.Учетный.Счет6201() Тогда
				КорСчет = ПланыСчетов.Учетный.НайтиПоКоду("71.01");
			КонецЕсли; 
			
			КорСубконто1 = Источник.Контрагент;		
		Иначе
			ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Поступление;
			Если Не ЗначениеЗаполнено(КорСубконто1) Тогда
				КорСубконто1 = Источник.Контрагент;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(КорСубконто2) Тогда
				КорСубконто2 = Источник.Договор;
			КонецЕсли;
		КонецЕсли;
		
		Источник.ПриходРасход = ВидОперации;

		Источник.Проводки.Очистить();
		
		Если НЕ ДанныеЗаполнения.РасшифровкаПлатежа.Количество() Тогда
			
			НоваяСтрока = Источник.Проводки.Добавить();
			//ЗаполнитьЗначенияСвойств(НоваяСтрока, ТДанныеЗаполнения);
			НоваяСтрока.ФинЦФО = Источник.Предприятие;
			НоваяСтрока.ФинСтатья = СтатьяДДС;
			НоваяСтрока.Сумма = ДанныеЗаполнения.СуммаДокумента;
			НоваяСтрока.Содержание = ДанныеЗаполнения.Основание;
			
			НоваяСтрока.КорСчет = КорСчет;
			НоваяСтрока.КорСубконто1 = КорСубконто1;
			НоваяСтрока.КорСубконто2 = КорСубконто2;
			НоваяСтрока.КорСубконто3 = КорСубконто3;
			
			АнализЗаменыСтатьи91(НоваяСтрока);
			
		Иначе
			
			Для каждого ТекСтрока Из ДанныеЗаполнения.РасшифровкаПлатежа Цикл
				
				НоваяСтрока = Источник.Проводки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				НоваяСтрока.ФинЦФО = Источник.Предприятие;
				НоваяСтрока.ФинСтатья = СтатьяДДС;
				НоваяСтрока.Сумма = ТекСтрока.СуммаПлатежа;
				НоваяСтрока.Содержание = ДанныеЗаполнения.Основание;
				
				Если Не ОрганизацияКонтрагент.ЭтоОрганизация Тогда //ВНХ платеж
					Если ДанныеЗаполнения.РасшифровкаПлатежа.Количество() > 1 И ЗначениеЗаполнено(ТекСтрока.СчетУчетаРасчетовСКонтрагентом) Тогда
						Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрока.СчетУчетаРасчетовСКонтрагентом));
						Для каждого ТекСчет Из Соотв Цикл
							КорСчет = ТекСчет.СчетУУ;
							Прервать;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				НоваяСтрока.КорСчет = КорСчет;
				НоваяСтрока.КорСубконто1 = КорСубконто1;
				НоваяСтрока.КорСубконто2 = КорСубконто2;
				НоваяСтрока.КорСубконто3 = КорСубконто3;
				
				АнализЗаменыСтатьи91(НоваяСтрока);
				
			КонецЦикла; 
			
		КонецЕсли;
		
		Источник.РасшифровкаОплаты = Источник.Проводки.Количество() > 1;
	КонецЕсли;
			
КонецПроцедуры

Процедура АнализЗаменыСтатьи91(НоваяСтрока, СтруктураИмен = Неопределено, СчетЗатрат = Неопределено)
	
	Если СтруктураИмен = Неопределено Тогда
		СтруктураИмен = Новый Структура("КорСчет, КорСубконто1, КорСубконто2", "КорСчет", "КорСубконто1", "КорСубконто2");
	КонецЕсли;

	//анализ статей 91
	Если ТипЗнч(НоваяСтрока[СтруктураИмен.КорСубконто1]) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
		РеквизитыСтатьи = БюджетныйНаСервере.ВернутьРеквизиты(НоваяСтрока[СтруктураИмен.КорСубконто1], "СтатьяЗатрат, СчетЗатрат"); 
		Если ЗначениеЗаполнено(РеквизитыСтатьи.СтатьяЗатрат) Тогда
			Если СчетЗатрат = Неопределено Тогда
				НоваяСтрока[СтруктураИмен.КорСчет] = ?(ЗначениеЗаполнено(РеквизитыСтатьи.СчетЗатрат), РеквизитыСтатьи.СчетЗатрат, ПланыСчетов.Учетный.Счет9003());
			КонецЕсли;
			Если НоваяСтрока[СтруктураИмен.КорСчет] = ПланыСчетов.Учетный.Счет9003() ИЛИ НоваяСтрока[СтруктураИмен.КорСчет] = ПланыСчетов.Учетный.Счет20() Тогда
				НоваяСтрока[СтруктураИмен.КорСубконто1] = Неопределено;
				НоваяСтрока[СтруктураИмен.КорСубконто2] = РеквизитыСтатьи.СтатьяЗатрат;
			Иначе
				НоваяСтрока[СтруктураИмен.КорСубконто1] = РеквизитыСтатьи.СтатьяЗатрат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура АнализЗаменыСчета44(НоваяСтрока, Предприятие, СтруктураИмен = Неопределено)
	
	Если СтруктураИмен = Неопределено Тогда
		СтруктураИмен = Новый Структура("СчетЗатрат, Субконто1, Субконто2", "СчетЗатрат", "Субконто1", "Субконто2");
	КонецЕсли;
	
	УчетнаяПолитикаПредприятия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предприятие, "УчетнаяПолитика");
	
	Если Не ЗначениеЗаполнено(УчетнаяПолитикаПредприятия) Или Не ЗначениеЗаполнено(НоваяСтрока[СтруктураИмен.Субконто1]) Тогда
		Возврат;
	КонецЕсли;
	
	Если УчетнаяПолитикаПредприятия.СтатьиЗатратСДополнительнойАналитикой.Найти(НоваяСтрока[СтруктураИмен.Субконто1], "СтатьяЗатрат") <> Неопределено 
		Или УчетнаяПолитикаПредприятия.СтатьиЗатратСДополнительнойАналитикой.Найти(НоваяСтрока[СтруктураИмен.Субконто1].Родитель, "СтатьяЗатрат") <> Неопределено Тогда
		
		НоваяСтрока[СтруктураИмен.СчетЗатрат] = ПланыСчетов.Учетный.Счет9003();
		НоваяСтрока[СтруктураИмен.Субконто2] = НоваяСтрока[СтруктураИмен.Субконто1];  
		
		Попытка
			НоваяСтрока[СтруктураИмен.Субконто1] = НоваяСтрока.Номенклатура;
		Исключение 
			НоваяСтрока[СтруктураИмен.Субконто1] = "";
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьУЧ_Операция(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_Операция") И НЕ ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ХозрасчетныйДвиженияССубконто.Период КАК Период,
		|	ХозрасчетныйДвиженияССубконто.Регистратор КАК Регистратор,
		|	ХозрасчетныйДвиженияССубконто.НомерСтроки КАК НомерСтроки,
		|	ХозрасчетныйДвиженияССубконто.Активность КАК Активность,
		|	ХозрасчетныйДвиженияССубконто.СчетДт КАК СчетДт,
		|	ХозрасчетныйДвиженияССубконто.СубконтоДт1 КАК СубконтоДт1,
		|	ХозрасчетныйДвиженияССубконто.ВидСубконтоДт1 КАК ВидСубконтоДт1,
		|	ХозрасчетныйДвиженияССубконто.СубконтоДт2 КАК СубконтоДт2,
		|	ХозрасчетныйДвиженияССубконто.ВидСубконтоДт2 КАК ВидСубконтоДт2,
		|	ХозрасчетныйДвиженияССубконто.СубконтоДт3 КАК СубконтоДт3,
		|	ХозрасчетныйДвиженияССубконто.ВидСубконтоДт3 КАК ВидСубконтоДт3,
		|	ХозрасчетныйДвиженияССубконто.СчетКт КАК СчетКт,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
		|	ХозрасчетныйДвиженияССубконто.ВидСубконтоКт1 КАК ВидСубконтоКт1,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК СубконтоКт2,
		|	ХозрасчетныйДвиженияССубконто.ВидСубконтоКт2 КАК ВидСубконтоКт2,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт3 КАК СубконтоКт3,
		|	ХозрасчетныйДвиженияССубконто.ВидСубконтоКт3 КАК ВидСубконтоКт3,
		|	ХозрасчетныйДвиженияССубконто.Организация КАК Организация,
		|	ХозрасчетныйДвиженияССубконто.ВалютаДт КАК ВалютаДт,
		|	ХозрасчетныйДвиженияССубконто.ВалютаКт КАК ВалютаКт,
		|	ХозрасчетныйДвиженияССубконто.ПодразделениеДт КАК ПодразделениеДт,
		|	ХозрасчетныйДвиженияССубконто.ПодразделениеКт КАК ПодразделениеКт,
		|	ХозрасчетныйДвиженияССубконто.Сумма КАК Сумма,
		|	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаДт КАК ВалСуммаДт,
		|	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаКт КАК ВалСуммаКт,
		|	ХозрасчетныйДвиженияССубконто.КоличествоДт КАК КоличествоДт,
		|	ХозрасчетныйДвиженияССубконто.КоличествоКт КАК КоличествоКт,
		|	ХозрасчетныйДвиженияССубконто.СуммаНУДт КАК СуммаНУДт,
		|	ХозрасчетныйДвиженияССубконто.СуммаНУКт КАК СуммаНУКт,
		|	ХозрасчетныйДвиженияССубконто.СуммаПРДт КАК СуммаПРДт,
		|	ХозрасчетныйДвиженияССубконто.СуммаПРКт КАК СуммаПРКт,
		|	ХозрасчетныйДвиженияССубконто.СуммаВРДт КАК СуммаВРДт,
		|	ХозрасчетныйДвиженияССубконто.СуммаВРКт КАК СуммаВРКт,
		|	ХозрасчетныйДвиженияССубконто.Содержание КАК Содержание,
		|	сабСоответствияОрганизацийПредприятиям.Предприятие КАК Предприятие,
		|	сабСоответствиеСчетовИСубконто.СубконтоБУ1 КАК СубконтоБУДт1,
		|	сабСоответствиеСчетовИСубконто.СубконтоБУ2 КАК СубконтоБУДт2,
		|	сабСоответствиеСчетовИСубконто.СубконтоБУ3 КАК СубконтоБУДт3,
		|	сабСоответствиеСчетовИСубконто.ЗначениеСубконтоУУ1 КАК ЗначениеСубконтоУУДт1,
		|	сабСоответствиеСчетовИСубконто.ЗначениеСубконтоУУ2 КАК ЗначениеСубконтоУУДт2,
		|	сабСоответствиеСчетовИСубконто.ЗначениеСубконтоУУ3 КАК ЗначениеСубконтоУУДт3,
		|	сабСоответствиеСчетовИСубконто.СчетУУ КАК СчетДебет,
		|	сабСоответствиеСчетовИСубконто1.СчетУУ КАК СчетКредит,
		|	сабСоответствиеСчетовИСубконто1.СубконтоБУ1 КАК СубконтоБУКт1,
		|	сабСоответствиеСчетовИСубконто1.СубконтоБУ2 КАК СубконтоБУКт2,
		|	сабСоответствиеСчетовИСубконто1.СубконтоБУ3 КАК СубконтоБУКт3,
		|	сабСоответствиеСчетовИСубконто1.ЗначениеСубконтоУУ1 КАК ЗначениеСубконтоУУКт1,
		|	сабСоответствиеСчетовИСубконто1.ЗначениеСубконтоУУ2 КАК ЗначениеСубконтоУУКт2,
		|	сабСоответствиеСчетовИСубконто1.ЗначениеСубконтоУУ3 КАК ЗначениеСубконтоУУКт3
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто КАК ХозрасчетныйДвиженияССубконто
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.сабСоответствияОрганизацийПредприятиям КАК сабСоответствияОрганизацийПредприятиям
		|		ПО ХозрасчетныйДвиженияССубконто.Организация = сабСоответствияОрганизацийПредприятиям.Организация
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.сабСоответствиеСчетовИСубконто КАК сабСоответствиеСчетовИСубконто
		|		ПО ХозрасчетныйДвиженияССубконто.СчетДт = сабСоответствиеСчетовИСубконто.СчетБУ
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.сабСоответствиеСчетовИСубконто КАК сабСоответствиеСчетовИСубконто1
		|		ПО ХозрасчетныйДвиженияССубконто.СчетКт = сабСоответствиеСчетовИСубконто1.СчетБУ
		|ГДЕ
		|	ХозрасчетныйДвиженияССубконто.Регистратор = &Регистратор
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор,
		|	Период
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос.УстановитьПараметр("Регистратор", ДанныеЗаполнения);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
				
		Если НЕ Выборка.Количество() Тогда
			Возврат;	
		КонецЕсли;
		
		ИспользоватьМОЛ = ПланыСчетов.Учетный.МОЛИспользуются();
		СчетМЦ02 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("МЦ.02");
		СчетМЦ03 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("МЦ.03");
		СчетМЦ04 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("МЦ.04");
		СчетЗатрат26 = ПланыСчетов.Учетный.Счет26();
		Счет44 = ПланыСчетов.Учетный.Счет44();  
		Счет68_01 = Планысчетов.Учетный.Счет6801();
		СпособУчетаНДСУчитываетсяВСтоимости = Перечисления.СпособыучетаНДС.УчитываетсяВCтоимости;
		Источник.Проводки.Очистить();
		
		Пока Выборка.Следующий() Цикл  			
			Источник.Предприятие = Выборка.Предприятие;
			Источник.Дата = Выборка.Период;
			Источник.ПересчитыватьЦенуСписанияВПроводках = Истина;
			
			// распределение НДС только то что учитывается в стоимости {
			Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.РаспределениеНДС") 
				И (Выборка.СубконтоДт3 <> СпособУчетаНДСУчитываетсяВСтоимости И Выборка.СубконтоКт3 <> СпособУчетаНДСУчитываетсяВСтоимости) 
				Или (Выборка.СчетДебет = Счет68_01 И Выборка.СчетКредит = Счет68_01) Тогда
				
				Продолжить;
			КонецЕсли;
			//}
			
			НоваяСтрока = Источник.Проводки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Количество = Выборка.КоличествоКт;
			НоваяСтрока.ПодразделениеДт = СоотвПодразделений.Получить(Выборка.ПодразделениеДт);
			НоваяСтрока.ПодразделениеКт = СоотвПодразделений.Получить(Выборка.ПодразделениеКт);
			
			Для СубИндекс = 1 По 3 Цикл
				
				Если Выборка["ВидСубконтоДт" + СубИндекс] = Выборка.СубконтоБУДт1 Тогда
					НоваяСтрока["Субконто" + СубИндекс + "Дебет"] = Выборка["СубконтоДт" + 1];
					
					Если НЕ ТипЗнч(НоваяСтрока["Субконто" + СубИндекс + "Дебет"]) = ТипЗнч(Выборка["СубконтоДт" + 1]) Тогда
						НоваяСтрока["Субконто" + СубИндекс + "Дебет"] = Неопределено;
					КонецЕсли;
					
				ИначеЕсли Выборка["ВидСубконтоДт" + СубИндекс] = Выборка.СубконтоБУДт2 Тогда
					НоваяСтрока["Субконто" + СубИндекс + "Дебет"] = Выборка["СубконтоДт" + 2];
					
					Если НЕ ТипЗнч(НоваяСтрока["Субконто" + СубИндекс + "Дебет"]) = ТипЗнч(Выборка["СубконтоДт" + 2]) Тогда
						НоваяСтрока["Субконто" + СубИндекс + "Дебет"] = Неопределено;
					КонецЕсли;
					
					Если НоваяСтрока.СчетДебет.ВидыСубконто.Количество() > 1 И НоваяСтрока.СчетДебет.ВидыСубконто[1].ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ДоговорыКредитовИДепозитов"))
						И ЗначениеЗаполнено(Выборка["СубконтоДт" + 2]) И ТипЗнч(Выборка["СубконтоДт" + 2]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
						
						НоваяСтрока["Субконто" + СубИндекс + "Дебет"] = Выборка["СубконтоДт" + 2].УЧ_Договор;	
					КонецЕсли;
					
				ИначеЕсли Выборка["ВидСубконтоДт" + СубИндекс] = Выборка.СубконтоБУДт3 ИЛИ ТипДокумент(Выборка["СубконтоДт" + 3]) Тогда
					ДокументУУ = Выборка["СубконтоДт" + 3];
					
					Если ЗначениеЗаполнено(Выборка["СубконтоДт" + 3]) Тогда
						ДокументУУ = ПодобратьУУДокумент(Выборка["СубконтоДт" + 3]);
						
						Если Не ЗначениеЗаполнено(ДокументУУ) Тогда
							ДокументУУ = Выборка["СубконтоДт" + 3];
						КонецЕсли;
						
					КонецЕсли;
					
					НоваяСтрока["Субконто" + СубИндекс + "Дебет"] = ДокументУУ;
					
					Если НЕ ТипЗнч(НоваяСтрока["Субконто" + СубИндекс + "Дебет"]) = ТипЗнч(Выборка["СубконтоДт" + 3]) И НЕ ЗначениеЗаполнено(ДокументУУ) Тогда
						НоваяСтрока["Субконто" + СубИндекс + "Дебет"] = Неопределено;
					КонецЕсли;
					
				КонецЕсли;
				
				Если Выборка["ВидСубконтоКт" + СубИндекс] = Выборка.СубконтоБУКт1 Тогда
					НоваяСтрока["Субконто" + СубИндекс + "Кредит"] = Выборка["СубконтоКт" + 1];
					
					Если НЕ ТипЗнч(НоваяСтрока["Субконто" + СубИндекс + "Кредит"]) = ТипЗнч(Выборка["СубконтоКт" + 1]) Тогда
						НоваяСтрока["Субконто" + СубИндекс + "Кредит"] = Неопределено;
					КонецЕсли;
					
				ИначеЕсли Выборка["ВидСубконтоКт" + СубИндекс] = Выборка.СубконтоБУКт2 Тогда
					НоваяСтрока["Субконто" + СубИндекс + "Кредит"] = Выборка["СубконтоКт" + 2];
					                   
					Если НЕ ТипЗнч(НоваяСтрока["Субконто" + СубИндекс + "Кредит"]) = ТипЗнч(Выборка["СубконтоКт" + 2]) Тогда
						НоваяСтрока["Субконто" + СубИндекс + "Кредит"] = Неопределено;
					КонецЕсли;
					
					Если НоваяСтрока.СчетКредит.ВидыСубконто.Количество() > 1 И НоваяСтрока.СчетКредит.ВидыСубконто[1].ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ДоговорыКредитовИДепозитов"))
						И ЗначениеЗаполнено(Выборка["СубконтоКт" + 2]) И ТипЗнч(Выборка["СубконтоКт" + 2]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
						
						НоваяСтрока["Субконто" + СубИндекс + "Кредит"] = Выборка["СубконтоКт" + 2].УЧ_Договор;	
					КонецЕсли;
					
				ИначеЕсли Выборка["ВидСубконтоКт" + СубИндекс] = Выборка.СубконтоБУКт3 ИЛИ ТипДокумент(Выборка["СубконтоКт" + 3]) Тогда
					ДокументУУ = Выборка["СубконтоКт" + 3];
					
					Если ЗначениеЗаполнено(Выборка["СубконтоКт" + 3]) Тогда
						ДокументУУ = ПодобратьУУДокумент(Выборка["СубконтоКт" + 3]);
						
						Если Не ЗначениеЗаполнено(ДокументУУ) Тогда
							ДокументУУ = Выборка["СубконтоКт" + 3];
						КонецЕсли;
						
					КонецЕсли;
					
					НоваяСтрока["Субконто" + СубИндекс + "Кредит"] = ДокументУУ;
					
					Если НЕ ТипЗнч(НоваяСтрока["Субконто" + СубИндекс + "Кредит"]) = ТипЗнч(Выборка["СубконтоКт" + 3]) И НЕ ЗначениеЗаполнено(ДокументУУ) Тогда
						НоваяСтрока["Субконто" + СубИндекс + "Кредит"] = Неопределено;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Выборка["ЗначениеСубконтоУУДт" + СубИндекс]) Тогда
					НоваяСтрока["Субконто" + СубИндекс + "Дебет"] = Выборка["ЗначениеСубконтоУУДт" + СубИндекс];
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Выборка["ЗначениеСубконтоУУКт" + СубИндекс]) Тогда
					НоваяСтрока["Субконто" + СубИндекс + "Кредит"] = Выборка["ЗначениеСубконтоУУКт" + СубИндекс];
				КонецЕсли;
				
			КонецЦикла;
			
			//анализ на ВНХ
			Если ТипЗнч(НоваяСтрока["Субконто1Дебет"]) = Тип("СправочникСсылка.Контрагенты") Тогда
				ОрганизацияКонтрагент = КонтрагентВОрганизациях(НоваяСтрока["Субконто1Дебет"], Источник, ДанныеЗаполнения);	
				
				Если ОрганизацияКонтрагент.ЭтоОрганизация Тогда //ВНХ
					НоваяСтрока.СчетДебет = ПланыСчетов.Учетный.Счет7902(Источник.Предприятие);
					НоваяСтрока["Субконто1Дебет"] = ОрганизацияКонтрагент.Организация;
					
					Если ТипЗнч(НоваяСтрока["Субконто2Дебет"]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
						НоваяСтрока["Субконто2Дебет"] = НоваяСтрока["Субконто2Дебет"].УЧ_Договор;
					КонецЕсли; 
					
				КонецЕсли;
				
			КонецЕсли; 
			
			Если ТипЗнч(НоваяСтрока["Субконто1Кредит"]) = Тип("СправочникСсылка.Контрагенты") Тогда
				ОрганизацияКонтрагент = КонтрагентВОрганизациях(НоваяСтрока["Субконто1Кредит"], Источник, ДанныеЗаполнения);	
				
				Если ОрганизацияКонтрагент.ЭтоОрганизация Тогда //ВНХ
					НоваяСтрока.СчетКредит = ПланыСчетов.Учетный.Счет7902(Источник.Предприятие);
					НоваяСтрока["Субконто1Кредит"] = ОрганизацияКонтрагент.Организация;
					
					Если ТипЗнч(НоваяСтрока["Субконто2Кредит"]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
						НоваяСтрока["Субконто2Кредит"] = НоваяСтрока["Субконто2Кредит"].УЧ_Договор;
					КонецЕсли;
					
				КонецЕсли;  
				
			КонецЕсли;
			
			//анализ статей 91
			Если ТипЗнч(НоваяСтрока["Субконто1Дебет"]) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
				РеквизитыСтатьи = БюджетныйНаСервере.ВернутьРеквизиты(НоваяСтрока["Субконто1Дебет"], "СтатьяЗатрат, СчетЗатрат"); 
				
				Если ЗначениеЗаполнено(РеквизитыСтатьи.СтатьяЗатрат) Тогда
					НоваяСтрока.СчетДебет = ?(ЗначениеЗаполнено(РеквизитыСтатьи.СчетЗатрат), РеквизитыСтатьи.СчетЗатрат, ПланыСчетов.Учетный.Счет9003());
					
					Если НоваяСтрока.СчетДебет = ПланыСчетов.Учетный.Счет9003() ИЛИ НоваяСтрока.СчетДебет = ПланыСчетов.Учетный.Счет20() Тогда
						НоваяСтрока["Субконто1Дебет"] = Неопределено;
						НоваяСтрока["Субконто2Дебет"] = РеквизитыСтатьи.СтатьяЗатрат;
					Иначе
						НоваяСтрока["Субконто1Дебет"] = РеквизитыСтатьи.СтатьяЗатрат;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли; 
			
			Если ТипЗнч(НоваяСтрока["Субконто1Кредит"]) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
				РеквизитыСтатьи = БюджетныйНаСервере.ВернутьРеквизиты(НоваяСтрока["Субконто1Кредит"], "СтатьяЗатрат, СчетЗатрат"); 
				
				Если ЗначениеЗаполнено(РеквизитыСтатьи.СтатьяЗатрат) Тогда
					НоваяСтрока.СчетКредит = ?(ЗначениеЗаполнено(РеквизитыСтатьи.СчетЗатрат), РеквизитыСтатьи.СчетЗатрат, ПланыСчетов.Учетный.Счет9003());
					
					Если НоваяСтрока.СчетКредит = ПланыСчетов.Учетный.Счет9003() ИЛИ НоваяСтрока.СчетКредит = ПланыСчетов.Учетный.Счет20() Тогда
						НоваяСтрока["Субконто1Кредит"] = Неопределено;
						НоваяСтрока["Субконто2Кредит"] = РеквизитыСтатьи.СтатьяЗатрат;
					Иначе
						НоваяСтрока["Субконто1Кредит"] = РеквизитыСтатьи.СтатьяЗатрат;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			//добавление КорСчета для учета по МОЛ забалансовых счетов
			Если ИспользоватьМОЛ Тогда
				
				Если Не ЗначениеЗаполнено(НоваяСтрока.СчетКредит) И (Выборка.СчетДт = СчетМЦ02 ИЛИ Выборка.СчетДт = СчетМЦ03 ИЛИ Выборка.СчетДт = СчетМЦ04) Тогда
					НоваяСтрока.СчетКредит = СчетЗатрат26;
				ИначеЕсли Не ЗначениеЗаполнено(НоваяСтрока.СчетДебет) И (Выборка.СчетКт = СчетМЦ02 ИЛИ Выборка.СчетКт = СчетМЦ03 ИЛИ Выборка.СчетКт = СчетМЦ04) Тогда
					НоваяСтрока.СчетДебет = СчетЗатрат26;
				КонецЕсли;
				
			КонецЕсли;
			
			Если НоваяСтрока.СчетДебет = Счет44 Тогда
				АнализЗаменыСчета44(НоваяСтрока, Источник.Предприятие, Новый Структура("СчетЗатрат, Субконто1, Субконто2", "СчетДебет", "Субконто1Дебет", "Субконто2Дебет"));
			КонецЕсли;
			
			Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.РаспределениеНДС") Тогда
				
				Если НоваяСтрока.СчетДебет = Счет68_01 Тогда
					НоваяСтрока["Субконто1Дебет"] = Выборка.ЗначениеСубконтоУУДт1;
					НоваяСтрока["Субконто2Дебет"] = Выборка.Организация;
				ИначеЕсли НоваяСтрока.СчетКредит = Счет68_01 Тогда
					НоваяСтрока["Субконто1Кредит"] = Выборка.ЗначениеСубконтоУУКт1;
					НоваяСтрока["Субконто2Кредит"] = Выборка.Организация;
				КонецЕсли;
				
			КонецЕсли;

		КонецЦикла;
		
		Источник.Комментарий = ДанныеЗаполнения;
		
	КонецЕсли;
			
КонецПроцедуры

Функция ТипДокумент(ДокументБУ)

	Возврат ТипЗнч(ДокументБУ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") ИЛИ ТипЗнч(ДокументБУ) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг");

КонецФункции // ()


Функция ПодобратьУУДокумент(ДокументБУ)
	
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	сабОбработкаДокументов.ДокументУУ КАК ДокументУУ
		|ИЗ
		|	РегистрСведений.сабОбработкаДокументов КАК сабОбработкаДокументов
		|ГДЕ
		|	сабОбработкаДокументов.ДокументБУ = &ДокументБУ";
		
		Запрос.УстановитьПараметр("ДокументБУ", ДокументБУ);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.ДокументУУ;			
		КонецЦикла;

КонецФункции // ()

Процедура ЗаполнитьУЧ_Списание(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_СписаниеТоваров") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СписаниеТоваров") Тогда
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, РучнаяКорректировка");
		Источник.Дата = ДанныеЗаполнения.Дата;
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		Источник.ВидОперации = Перечисления.ВидыОперацийСписания.Брак;
		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.Организация);
		Если ЗначениеЗаполнено(СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации)) Тогда
			Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации);
		КонецЕсли;
		Источник.ТабличнаяЧасть.Очистить();
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Источник.ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.Товар = ТекСтрока.Номенклатура;
		КонецЦикла; 
				
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗаполнитьУЧ_Списание2(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_СписаниеТоваров") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПередачаТоваров") И ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.БезвозмезднаяПередача Тогда
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, РучнаяКорректировка");
		Источник.Дата = ДанныеЗаполнения.Дата;
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		Источник.ВидОперации = Перечисления.ВидыОперацийСписания.Дегустация; //как правило бесплатно на дегустацию
		Источник.Счет = ПланыСчетов.Учетный.НайтиПоКоду("44");
		Источник.Субконто1 = Источник.Предприятие.УчетнаяПолитика.СтатьяРасходовНаДегустацию;
		Если Не ЗначениеЗаполнено(Источник.Субконто1) Тогда
			Источник.Субконто1 = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Списание материалов", Истина);
		КонецЕсли; 
		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.Организация);
		Если ЗначениеЗаполнено(СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации)) Тогда
			Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации);
		КонецЕсли;
		Источник.ТабличнаяЧасть.Очистить();
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Источник.ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока,,"Цена, Сумма");
			НоваяСтрока.Товар = ТекСтрока.Номенклатура;
		КонецЦикла;
		
		Если ДанныеЗаполнения.СерииНоменклатуры.Количество() Тогда
			Источник.СерииНоменклатуры.Очистить();
			Для каждого ТекСтрока Из ДанныеЗаполнения.СерииНоменклатуры Цикл
				НоваяСтрока = Источник.СерииНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			КонецЦикла;
			//корректировка количества по сериям
			Для каждого ТекСтрока Из Источник.ТабличнаяЧасть Цикл
				Количество = ТекСтрока.Количество;
				НайденныеСерии = Источник.СерииНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура, НомерСтрокиРеализации", ТекСтрока.Товар, ТекСтрока.НомерСтроки));
				Для каждого ТекНайдСтрока Из НайденныеСерии Цикл
					Если ТекНайдСтрока.Количество > Количество Тогда
						ТекНайдСтрока.Количество = Количество;	
						Количество = 0;			
					Иначе
						Количество = Количество - ТекНайдСтрока.Количество;
					КонецЕсли;
				КонецЦикла;
				Если Количество Тогда
					Если НайденныеСерии.Количество() Тогда
						ТекНайдСтрока.Количество = ТекНайдСтрока.Количество + Количество;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
				
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗаполнитьУЧ_АвансовыйОтчет(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_АвансовыйОтчет") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, РучнаяКорректировка");
		Источник.Дата = ДанныеЗаполнения.Дата;
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		//Источник.ВидОперации = Перечисления.ВидыОперацийСписания.Брак;
		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.Организация);
		Если ЗначениеЗаполнено(СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации)) Тогда
			Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации);
		КонецЕсли;
		Источник.Сотрудник = ДанныеЗаполнения.ФизЛицо;
		Источник.Счет71 = сабОбщегоНазначенияБУХ.ПолучитьСчетПоКоду("71.01");
		
		Источник.УчитыватьНДС = НЕ ДанныеЗаполнения.НДСВключенВСтоимость;
		СуммаВключаетНДС = ДанныеЗаполнения.СуммаВключаетНДС;
		
		ВыделятьНДС = Источник.Предприятие.УчетнаяПолитика.УчетНДС;
		Если Не ВыделятьНДС Тогда
			Источник.УчитыватьНДС = Ложь;
		Иначе
			Источник.СуммаВключаетНДС = Истина;
		КонецЕсли;
		
		Источник.ТабличнаяЧасть.Очистить();
		
		Счет44 = ПланыСчетов.Учетный.Счет44();
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Источник.ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.ТипСписания = Перечисления.сабТипыНоменклатуры.Материалы;
			Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрока.СчетУчета));
			Для каждого ТекСчет Из Соотв Цикл
				НоваяСтрока.КорСчет = ТекСчет.СчетУУ;
				Прервать;
			КонецЦикла;
			НоваяСтрока.КорСубконто1 = ТекСтрока.Номенклатура;
			НоваяСтрока.КорСубконто2 = ДанныеЗаполнения.Склад;
		КонецЦикла;
		
		МассивТЧ = Новый Массив;
		МассивТЧ.Добавить("Прочее");
		МассивТЧ.Добавить("Билеты");
		
		Для каждого ТекТЧ Из МассивТЧ Цикл
			
			Для каждого ТекСтрока Из ДанныеЗаполнения[ТекТЧ] Цикл
				НоваяСтрока = Источник.ТабличнаяЧасть.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				НоваяСтрока.ТипСписания = Перечисления.сабТипыНоменклатуры.Прочее;
				Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрока.СчетЗатрат));
				
				Для каждого ТекСчет Из Соотв Цикл
					НоваяСтрока.КорСчет = ТекСчет.СчетУУ;
					
					Если Не ЗначениеЗаполнено(НоваяСтрока.КорСчет) Тогда
						НоваяСтрока.КорСчет = ПланыСчетов.Учетный.Счет25();
						ТекСчет.СчетУУ = НоваяСтрока.КорСчет;
					КонецЕсли;
					
					ИндексСубконто = 0;
					
					Для каждого ТекСубконто Из ТекСчет.СчетУУ.ВидыСубконто Цикл
						ИндексСубконто = ИндексСубконто + 1;
						
						Если ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ1 Тогда
							НоваяСтрока.КорСубконто1 = ТекСтрока["Субконто" + Строка(ИндексСубконто)];
							
							Если НЕ ТипЗнч(НоваяСтрока.КорСубконто1) = ТипЗнч(ТекСтрока["Субконто" + Строка(ИндексСубконто)]) Тогда
								НоваяСтрока.КорСубконто1 = Неопределено;
							КонецЕсли;
							
						ИначеЕсли ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ2 Тогда
							НоваяСтрока.КорСубконто2 = ТекСтрока["Субконто" + Строка(ИндексСубконто)];
							
							Если НЕ ТипЗнч(НоваяСтрока.КорСубконто2) = ТипЗнч(ТекСтрока["Субконто" + Строка(ИндексСубконто)]) Тогда
								НоваяСтрока.КорСубконто2 = Неопределено;
							КонецЕсли;    
							
						ИначеЕсли ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ3 Тогда
							НоваяСтрока.КорСубконто3 = ТекСтрока["Субконто" + Строка(ИндексСубконто)];
							
							Если НЕ ТипЗнч(НоваяСтрока.КорСубконто3) = ТипЗнч(ТекСтрока["Субконто" + Строка(ИндексСубконто)]) Тогда
								НоваяСтрока.КорСубконто3 = Неопределено;
							КонецЕсли;    
							
						КонецЕсли;         
						
					КонецЦикла; 
										
					Прервать;
				КонецЦикла;
				
				Если НоваяСтрока.КорСчет = Счет44 Тогда  
					АнализЗаменыСчета44(НоваяСтрока, Источник.Предприятие, Новый Структура("СчетЗатрат, Субконто1, Субконто2", "КорСчет", "КорСубконто1", "КорСубконто2"));
				КонецЕсли;

				Если (НЕ СуммаВключаетНДС И (НЕ Источник.УчитыватьНДС Или ВыделятьНДС)) Тогда
					НоваяСтрока.Сумма = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
					НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
				КонецЕсли;
				
				НоваяСтрока.КорПодразделение = Источник.Подразделение;
				
				Если Не ЗначениеЗаполнено(НоваяСтрока.КорПодразделение) Тогда
					НоваяСтрока.КорПодразделение = СоотвПодразделений.Получить(ТекСтрока.ПодразделениеЗатрат);
				КонецЕсли;
				
				НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрока.СтавкаНДС);
				
			КонецЦикла;
			
		КонецЦикла;
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.Суточные Цикл
			НоваяСтрока = Источник.ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.ТипСписания = Перечисления.сабТипыНоменклатуры.Прочее;
			Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ДанныеЗаполнения.СчетЗатрат));
			
			Для каждого ТекСчет Из Соотв Цикл
				НоваяСтрока.КорСчет = ТекСчет.СчетУУ;
				
				Если Не ЗначениеЗаполнено(НоваяСтрока.КорСчет) Тогда
					НоваяСтрока.КорСчет = ПланыСчетов.Учетный.Счет25();
					ТекСчет.СчетУУ = НоваяСтрока.КорСчет;
				КонецЕсли;
				
				ИндексСубконто = 0;
				
				Для каждого ТекСубконто Из ТекСчет.СчетУУ.ВидыСубконто Цикл
					ИндексСубконто = ИндексСубконто + 1;
					
					Если ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ1 Тогда
						НоваяСтрока.КорСубконто1 = ДанныеЗаполнения["Субконто" + Строка(ИндексСубконто)];
						
						Если НЕ ТипЗнч(НоваяСтрока.КорСубконто1) = ТипЗнч(ДанныеЗаполнения["Субконто" + Строка(ИндексСубконто)]) Тогда
							НоваяСтрока.КорСубконто1 = Неопределено;
						КонецЕсли;
						
					ИначеЕсли ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ2 Тогда
						НоваяСтрока.КорСубконто2 = ДанныеЗаполнения["Субконто" + Строка(ИндексСубконто)];
						
						Если НЕ ТипЗнч(НоваяСтрока.КорСубконто2) = ТипЗнч(ДанныеЗаполнения["Субконто" + Строка(ИндексСубконто)]) Тогда
							НоваяСтрока.КорСубконто2 = Неопределено;
						КонецЕсли;
						
					ИначеЕсли ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ3 Тогда
						НоваяСтрока.КорСубконто3 = ДанныеЗаполнения["Субконто" + Строка(ИндексСубконто)];
						
						Если НЕ ТипЗнч(НоваяСтрока.КорСубконто3) = ТипЗнч(ДанныеЗаполнения["Субконто" + Строка(ИндексСубконто)]) Тогда
							НоваяСтрока.КорСубконто3 = Неопределено;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла; 
				
				Прервать;
			КонецЦикла;
			
			Если НоваяСтрока.КорСчет = Счет44 Тогда  
				АнализЗаменыСчета44(НоваяСтрока, Источник.Предприятие, Новый Структура("СчетЗатрат, Субконто1, Субконто2", "КорСчет", "КорСубконто1", "КорСубконто2"));
			КонецЕсли;

		КонецЦикла;
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.ОплатаПоставщикам Цикл
			НоваяСтрока = Источник.ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.ТипСписания = Перечисления.сабТипыНоменклатуры.Прочее;
			
			Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрока.СчетУчетаРасчетовСКонтрагентом));
			
			Для каждого ТекСчет Из Соотв Цикл
				НоваяСтрока.КорСчет = ТекСчет.СчетУУ;
				Прервать;
			КонецЦикла;
			
			Если Не ЗначениеЗаполнено(НоваяСтрока.КорСчет) Тогда
				НоваяСтрока.КорСчет = ПланыСчетов.Учетный.Счет6001();
			КонецЕсли;
			НоваяСтрока.КорСубконто1 = ТекСтрока.Контрагент;
			НоваяСтрока.КорСубконто2 = ТекСтрока.ДоговорКонтрагента;
			
			Если НоваяСтрока.КорСчет = Счет44 Тогда  
				АнализЗаменыСчета44(НоваяСтрока, Источник.Предприятие, Новый Структура("СчетЗатрат, Субконто1, Субконто2", "КорСчет", "КорСубконто1", "КорСубконто2"));
			КонецЕсли;

		КонецЦикла; 
			
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗаполнитьУЧ_Возврат(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)

	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_Возврат") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	сабОбработкаДокументов.ДокументУУ КАК ДокументУУ
		|ИЗ
		|	РегистрСведений.сабОбработкаДокументов КАК сабОбработкаДокументов
		|ГДЕ
		|	сабОбработкаДокументов.ДокументБУ = &ДокументБУ";
		
		Запрос.УстановитьПараметр("ДокументБУ", ДанныеЗаполнения.Сделка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Источник.ДокОснование = Выборка.ДокументУУ;		
		КонецЦикла;
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, РучнаяКорректировка");
		Источник.Дата = ДанныеЗаполнения.Дата;
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		Источник.Договор = ДанныеЗаполнения.ДоговорКонтрагента;
		Источник.Счет = ДанныеЗаполнения.ДоговорКонтрагента.СчетВзаиморасчетов;
		Если Не ЗначениеЗаполнено(Источник.Счет) Тогда
			Источник.Счет = ПланыСчетов.Учетный.НайтиПоКоду("62.01");		
		КонецЕсли;
		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.Организация);
		Если ЗначениеЗаполнено (СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации)) Тогда
			Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации);
		КонецЕсли;
		Если ТипЗнч(ДанныеЗаполнения.Сделка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			Источник.ПодразделениеКонтрагента = ДанныеЗаполнения.Сделка.Заказ.ПодразделениеКонтрагента;
		КонецЕсли;
		
		Источник.УчитыватьНДС = Истина;
		СуммаВключаетНДС = ДанныеЗаполнения.СуммаВключаетНДС;
		
		ВыделятьНДС = Источник.Предприятие.УчетнаяПолитика.УчетНДС;
		Если Не ВыделятьНДС Тогда
			Источник.УчитыватьНДС = Ложь;
		Иначе
			Источник.СуммаВключаетНДС = Истина;
		КонецЕсли;
		
		Источник.Товары.Очистить();
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Источник.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.СуммаОтгрузки = ТекСтрока.Сумма;
			Источник.ВидОперации = Перечисления.ВидыОперацийРеализация.Товары;
			Если НЕ СуммаВключаетНДС И (НЕ Источник.УчитыватьНДС Или ВыделятьНДС) Тогда
				НоваяСтрока.Сумма = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
				НоваяСтрока.СуммаОтгрузки = НоваяСтрока.Сумма;
				НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
			КонецЕсли;
			НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрока.СтавкаНДС);
			НоваяСтрока.ДокументРеализации = Источник.ДокОснование; 
			НоваяСтрока.Счет = ПодобратьСчетДляУЧВозврат(НоваяСтрока,ТекСтрока,ВыборкаСоотв);
		КонецЦикла;
		
		//синхронизация ТЧ серий бух и упр документа
		Если ДанныеЗаполнения.СерииНоменклатуры.Количество() Тогда
			Источник.СерииНоменклатуры.Очистить();
			Для каждого ТекСтрока Из ДанныеЗаполнения.СерииНоменклатуры Цикл
				НоваяСтрока = Источник.СерииНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			КонецЦикла;
			//корректировка количества по сериям
			Для каждого ТекСтрока Из Источник.Товары Цикл
				Количество = ТекСтрока.Количество;
				НайденныеСерии = Источник.СерииНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура, НомерСтрокиРеализации", ТекСтрока.Номенклатура, ТекСтрока.НомерСтроки));
				Для каждого ТекНайдСтрока Из НайденныеСерии Цикл
					Если ТекНайдСтрока.Количество > Количество Тогда
						ТекНайдСтрока.Количество = Количество;	
						Количество = 0;			
					Иначе
						Количество = Количество - ТекНайдСтрока.Количество;
					КонецЕсли;
				КонецЦикла;
				Если Количество Тогда
					Если НайденныеСерии.Количество() Тогда
						ТекНайдСтрока.Количество = ТекНайдСтрока.Количество + Количество;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		//Счет9001 = ПланыСчетов.Учетный.Счет9001();
		//Для каждого ТекСтрока Из ДанныеЗаполнения.Услуги Цикл
		//	НоваяСтрока = Источник.Услуги.Добавить();
		//	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		//	НоваяСтрока.Счет90 = Счет9001;
		//	НоваяСтрока.Субконто1 = ТекСтрока.Номенклатура;
		//	НоваяСтрока.СуммаОтгрузки = ТекСтрока.Сумма;
		//	Источник.ВидОперации = Перечисления.ВидыОперацийРеализация.Услуги;
		//	Если НЕ Источник.СуммаВключаетНДС И НЕ Источник.УчитыватьНДС Тогда
		//		НоваяСтрока.Сумма = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
		//		НоваяСтрока.СуммаОтгрузки = НоваяСтрока.Сумма;
		//		НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
		//	КонецЕсли;
		//	
		//	НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрока.СтавкаНДС);
		//КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьУЧ_ВозвратТоваровПоставщику(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_ВозвратТоваровПоставщику") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		
		ТранслироватьСчетаУчета = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("ТранслироватьСчетаУчетаНоменклатуры");
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	сабОбработкаДокументов.ДокументУУ КАК ДокументУУ
		|ИЗ
		|	РегистрСведений.сабОбработкаДокументов КАК сабОбработкаДокументов
		|ГДЕ
		|	сабОбработкаДокументов.ДокументБУ = &ДокументБУ";
		
		Запрос.УстановитьПараметр("ДокументБУ", ДанныеЗаполнения.Сделка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Источник.ДокОснование = Выборка.ДокументУУ;		
		КонецЦикла;
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, РучнаяКорректировка");
		Источник.Дата = ДанныеЗаполнения.Дата;
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		Источник.Договор = ДанныеЗаполнения.ДоговорКонтрагента;
		Источник.СчетКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента.СчетВзаиморасчетов;
		Если Не ЗначениеЗаполнено(Источник.СчетКонтрагента) Тогда
			Источник.СчетКонтрагента = ПланыСчетов.Учетный.НайтиПоКоду("60.01");		
		КонецЕсли;
		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.Организация);
		Если ЗначениеЗаполнено(СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации)) Тогда
			Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации);
		КонецЕсли;
		
		//СуммаВключаетНДС = ДанныеЗаполнения.СуммаВключаетНДС;
		Источник.УчитыватьНДС = НЕ ДанныеЗаполнения.НДСВключенВСтоимость;
		СуммаВключаетНДС = ДанныеЗаполнения.СуммаВключаетНДС;
		
		ВыделятьНДС = Источник.Предприятие.УчетнаяПолитика.УчетНДС;
		Если Не ВыделятьНДС Тогда
			Источник.УчитыватьНДС = Ложь;
		Иначе
			Источник.СуммаВключаетНДС = Истина;
		КонецЕсли;
		
		//Если ДанныеЗаполнения.Товары.Количество() Тогда
		Источник.ВидОперации = Перечисления.ВидыПоступлений.Поступление;
		//	Если ДанныеЗаполнения.Услуги.Количество() Тогда
		//		Источник.ВидОперации = Перечисления.ВидыПоступлений.ПоступлениеТМЦИУслуг;
		//	КонецЕсли;
		//Иначе	
		//	Источник.ВидОперации = Перечисления.ВидыПоступлений.ПоступлениеУслуг;
		//КонецЕсли;
		
		Источник.Товары.Очистить();  
		
		//синхронизация ТЧ серий бух и упр документа
		Если ДанныеЗаполнения.СерииНоменклатуры.Количество() Тогда
			Источник.СерииНоменклатуры.Очистить();
			Для каждого ТекСтрока Из ДанныеЗаполнения.СерииНоменклатуры Цикл
				НоваяСтрока = Источник.СерииНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			КонецЦикла;
			//корректировка количества по сериям
			Для каждого ТекСтрока Из Источник.Товары Цикл
				Количество = ТекСтрока.Количество;
				НайденныеСерии = Источник.СерииНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура, НомерСтрокиРеализации", ТекСтрока.Номенклатура, ТекСтрока.НомерСтроки));
				Для каждого ТекНайдСтрока Из НайденныеСерии Цикл
					Если ТекНайдСтрока.Количество > Количество Тогда
						ТекНайдСтрока.Количество = Количество;	
						Количество = 0;			
					Иначе
						Количество = Количество - ТекНайдСтрока.Количество;
					КонецЕсли;
				КонецЦикла;
				Если Количество Тогда
					Если НайденныеСерии.Количество() Тогда
						ТекНайдСтрока.Количество = ТекНайдСтрока.Количество + Количество;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		
		// разбиваем пропорционально сериям поступления. закомментировано, не уверен что это нужно, попробуем сделать проще {
		Если ЗначениеЗаполнено(Источник.ДокОснование) Тогда
			ТЗ_КоличествоНоменклатурыДанныхЗаполнения = ДанныеЗаполнения.Товары.Выгрузить();
			ТЗ_КоличествоНоменклатурыДанныхЗаполнения.Свернуть("Номенклатура", "Количество");
			
			ТЗ_НоменклатураСерииПоступления = Источник.ДокОснование.ТабличнаяЧасть.Выгрузить();
			ТЗ_НоменклатураСерииПоступления.Свернуть("Номенклатура, СерияНоменклатуры", "Количество");
			
			Для Каждого ТекСтрокаТЗКолНом Из ТЗ_КоличествоНоменклатурыДанныхЗаполнения Цикл
				КоличетсвоКРаспределению = ТекСтрокаТЗКолНом.Количество;
				НайденныеСтрокиСерийНоменклатуры = ТЗ_НоменклатураСерииПоступления.НайтиСтроки(Новый Структура("Номенклатура", ТекСтрокаТЗКолНом.Номенклатура));
				
				Для ИндСтрНС = 0 По НайденныеСтрокиСерийНоменклатуры.Количество() - 1 Цикл
					НоваяСтрока = Источник.Товары.Добавить();
					НоваяСтрока.Номенклатура = НайденныеСтрокиСерийНоменклатуры[ИндСтрНС].Номенклатура;
					НоваяСтрока.СерияНоменклатуры  = НайденныеСтрокиСерийНоменклатуры[ИндСтрНС].СерияНоменклатуры; 
					
					Если ИндСтрНС = НайденныеСтрокиСерийНоменклатуры.Количество() - 1 Тогда
						НоваяСтрока.Количество = ТекСтрокаТЗКолНом.Количество;
					Иначе
						НоваяСтрока.Количество = Мин(ТекСтрокаТЗКолНом.Количество / НайденныеСтрокиСерийНоменклатуры.Количество(), НайденныеСтрокиСерийНоменклатуры[ИндСтрНС].Количество);
					КонецЕсли;
					
					ТекСтрокаТЗКолНом.Количество = ТекСтрокаТЗКолНом.Количество - НоваяСтрока.Количество;
					
					НайденныеСтрокиВозврата = ДанныеЗаполнения.Товары.НайтиСтроки(Новый Структура("Номенклатура", НайденныеСтрокиСерийНоменклатуры[ИндСтрНС].Номенклатура));
					
					Если НайденныеСтрокиВозврата.Количество() Тогда
						ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденныеСтрокиВозврата[0],,"Количество, Сумма, СуммаНДС");
						НоваяСтрока.Склад = Источник.Склад;
						НоваяСтрока.Сумма = (НайденныеСтрокиВозврата[0].Сумма / КоличетсвоКРаспределению) * НоваяСтрока.Количество;
						НоваяСтрока.СуммаНДС = (НайденныеСтрокиВозврата[0].СуммаНДС / КоличетсвоКРаспределению)* НоваяСтрока.Количество;
						
						Если (НЕ СуммаВключаетНДС И (НЕ Источник.УчитыватьНДС Или ВыделятьНДС)) Тогда
							НоваяСтрока.Сумма = НоваяСтрока.Сумма + НоваяСтрока.СуммаНДС;
							НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
						КонецЕсли;
						
						Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", НайденныеСтрокиВозврата[0].СчетУчета));
						
						Для каждого ТекСчет Из Соотв Цикл
							НоваяСтрока.СчетУчета = ТекСчет.СчетУУ;
							Прервать;
						КонецЦикла;
						
						НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(НайденныеСтрокиВозврата[0].СтавкаНДС);						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;    
			
		Иначе
			
			Для каждого ТекСтрока Из ДанныеЗаполнения.Товары Цикл
				НоваяСтрока = Источник.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				НоваяСтрока.Склад = Источник.Склад;
				//НоваяСтрока.Подразделение = Источник.Подразделение;
				
				Если (НЕ СуммаВключаетНДС И (НЕ Источник.УчитыватьНДС Или ВыделятьНДС)) Тогда
					НоваяСтрока.Сумма = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
					НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
				КонецЕсли;
				
				Если ТранслироватьСчетаУчета Тогда
					Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрока.СчетУчета));
					Для каждого ТекСчет Из Соотв Цикл
						НоваяСтрока.СчетУчета = ТекСчет.СчетУУ;
						Прервать;
					КонецЦикла;
				Иначе	
					НоваяСтрока.СчетУчета = Неопределено;
				КонецЕсли;
				
				НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрока.СтавкаНДС);
				
				// берем первую найденную серию из поступления {
				//Если ЗначениеЗаполнено(Источник.ДокОснование) Тогда
				//	НайденныеСтрокиПоступления = Источник.ДокОснование.ТабличнаяЧасть.НайтиСтроки(Новый Структура("Номенклатура", ТекСтрока.Номенклатура));
				//	
				//	Если НайденныеСтрокиПоступления.Количество() И ЗначениеЗаполнено(НайденныеСтрокиПоступления[0].СерияНоменклатуры) Тогда
				//		НоваяСтрока.СерияНоменклатуры = НайденныеСтрокиПоступления[0].СерияНоменклатуры;
				//	КонецЕсли;
				//	
				//КонецЕсли;
				//}
				
			КонецЦикла; 

		КонецЕсли;
		//} конец закомментировано 	
				
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗаполнитьУЧ_КорректировкаРеализации(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)

	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_КорректировкаРеализации") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	сабОбработкаДокументов.ДокументУУ КАК ДокументУУ
		|ИЗ
		|	РегистрСведений.сабОбработкаДокументов КАК сабОбработкаДокументов
		|ГДЕ
		|	сабОбработкаДокументов.ДокументБУ = &ДокументБУ";
		
		Запрос.УстановитьПараметр("ДокументБУ", ДанныеЗаполнения.ИсправляемыйДокументРеализации);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Источник.ДокОснование = Выборка.ДокументУУ;		
		КонецЦикла;
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, РучнаяКорректировка");
		Источник.Дата = ДанныеЗаполнения.Дата;
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		Источник.Договор = ДанныеЗаполнения.ДоговорКонтрагента;
		Источник.СчетКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента.СчетВзаиморасчетов;
		Если Не ЗначениеЗаполнено(Источник.СчетКонтрагента) Тогда
			Источник.СчетКонтрагента = ПланыСчетов.Учетный.НайтиПоКоду("62.01");		
		КонецЕсли;
		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.Организация);
		Если ЗначениеЗаполнено(СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации)) Тогда
			Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации);
		КонецЕсли;
		Источник.УчитыватьНДС = Истина;
		СуммаВключаетНДС = ДанныеЗаполнения.СуммаВключаетНДС;
		
		ВыделятьНДС = Источник.Предприятие.УчетнаяПолитика.УчетНДС;
		Если Не ВыделятьНДС Тогда
			Источник.УчитыватьНДС = Ложь;
		Иначе
			Источник.СуммаВключаетНДС = Истина;
			Источник.ЦенаВключаетНДС = Истина;
		КонецЕсли;
		
		Источник.Товары.Очистить();
		Источник.Услуги.Очистить();
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Источник.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			//НоваяСтрока.СуммаОтгрузки = ТекСтрока.Сумма;
			//Источник.ВидОперации = Перечисления.ВидыОперацийРеализация.Товары;
			Если НЕ СуммаВключаетНДС И (НЕ Источник.УчитыватьНДС Или ВыделятьНДС) Тогда
				НоваяСтрока.Сумма = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
				//НоваяСтрока.СуммаОтгрузки = НоваяСтрока.Сумма;
				НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
			КонецЕсли;
			НоваяСтрока.СтавкаНДСДоИзменения = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрока.СтавкаНДСДоИзменения);
			НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрока.СтавкаНДС);
			
			Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрока.СчетУчета));
			Для каждого ТекСчет Из Соотв Цикл
				НоваяСтрока.Счет = ТекСчет.СчетУУ;
				Прервать;
			КонецЦикла;
			
		КонецЦикла;
		Счет9001 = ПланыСчетов.Учетный.Счет9001();
		Для каждого ТекСтрока Из ДанныеЗаполнения.Услуги Цикл
			НоваяСтрока = Источник.Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.СчетДоходов = Счет9001;
			НоваяСтрока.Номенклатура = ТекСтрока.Номенклатура;
			//НоваяСтрока.СуммаОтгрузки = ТекСтрока.Сумма;
			//Источник.ВидОперации = Перечисления.ВидыОперацийРеализация.Услуги;
			Если НЕ СуммаВключаетНДС И (НЕ Источник.УчитыватьНДС Или ВыделятьНДС) Тогда
				НоваяСтрока.Сумма = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
				//НоваяСтрока.СуммаОтгрузки = НоваяСтрока.Сумма;
				НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
			КонецЕсли;
			НоваяСтрока.СтавкаНДСДоИзменения = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрока.СтавкаНДСДоИзменения);
			НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрока.СтавкаНДС);
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьУЧ_КорректировкаПоступления(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_КорректировкаПоступления") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		
		ТранслироватьСчетаУчета = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("ТранслироватьСчетаУчетаНоменклатуры");
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	сабОбработкаДокументов.ДокументУУ КАК ДокументУУ
		|ИЗ
		|	РегистрСведений.сабОбработкаДокументов КАК сабОбработкаДокументов
		|ГДЕ
		|	сабОбработкаДокументов.ДокументБУ = &ДокументБУ";
		
		Запрос.УстановитьПараметр("ДокументБУ", ДанныеЗаполнения.ИсправляемыйДокументПоступления);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Источник.ДокОснование = Выборка.ДокументУУ;		
		КонецЦикла;
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, РучнаяКорректировка");
		Источник.Дата = ДанныеЗаполнения.Дата;
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		Источник.Договор = ДанныеЗаполнения.ДоговорКонтрагента;
		Источник.СчетКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента.СчетВзаиморасчетов;
		Если Не ЗначениеЗаполнено(Источник.СчетКонтрагента) Тогда
			Источник.СчетКонтрагента = ПланыСчетов.Учетный.НайтиПоКоду("60.01");		
		КонецЕсли;
		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.Организация);
		Если ЗначениеЗаполнено(СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации)) Тогда
			Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации);
		КонецЕсли;
		СуммаВключаетНДС = ДанныеЗаполнения.СуммаВключаетНДС;
		Источник.УчитыватьНДС = НЕ ДанныеЗаполнения.НДСВключенВСтоимость;
		
		ВыделятьНДС = Источник.Предприятие.УчетнаяПолитика.УчетНДС;
		Если Не ВыделятьНДС Тогда
			Источник.УчитыватьНДС = Ложь;
		Иначе
			Источник.ЦенаВключаетНДС = Истина;
		КонецЕсли;
		
		Источник.Товары.Очистить();
		Источник.Услуги.Очистить();
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Источник.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.Склад = Источник.Склад;
			//НоваяСтрока.Подразделение = Источник.Подразделение;
			
			Если НЕ Источник.УчитыватьНДС Тогда
				НоваяСтрока.Сумма = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
				НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
				НоваяСтрока.СуммаДоИзменения = ТекСтрока.СуммаДоИзменения + ТекСтрока.СуммаНДСДоИзменения;
				НоваяСтрока.ЦенаДоИзменения = ?(НоваяСтрока.КоличествоДоИзменения, НоваяСтрока.СуммаДоИзменения / НоваяСтрока.КоличествоДоИзменения, 0);
			КонецЕсли;
			
			Если ТранслироватьСчетаУчета Тогда
				Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрока.СчетУчета));
				Для каждого ТекСчет Из Соотв Цикл
					НоваяСтрока.СчетУчета = ТекСчет.СчетУУ;
					Прервать;
				КонецЦикла;
			Иначе	
				НоваяСтрока.СчетУчета = Неопределено;
			КонецЕсли;
			
			НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрока.СтавкаНДС);
			НоваяСтрока.СтавкаНДСДоИзменения = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрока.СтавкаНДСДоИзменения);
			
		КонецЦикла;
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.Услуги Цикл
			НоваяСтрока = Источник.Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			
			Если НЕ Источник.УчитыватьНДС Тогда
				НоваяСтрока.Сумма = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
				НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
				НоваяСтрока.СуммаДоИзменения = ТекСтрока.СуммаДоИзменения + ТекСтрока.СуммаНДСДоИзменения;
				НоваяСтрока.ЦенаДоИзменения = ?(НоваяСтрока.КоличествоДоИзменения, НоваяСтрока.СуммаДоИзменения / НоваяСтрока.КоличествоДоИзменения, 0);
			КонецЕсли;
			
			НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрока.СтавкаНДС);
			НоваяСтрока.СтавкаНДСДоИзменения = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрока.СтавкаНДСДоИзменения);
			
			Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрока.СчетЗатрат));
			Для каждого ТекСчет Из Соотв Цикл
				НоваяСтрока.СчетЗатрат = ТекСчет.СчетУУ;
				Прервать;
			КонецЦикла;
			
		КонецЦикла; 
		
		Если ДанныеЗаполнения.СерииНоменклатуры.Количество() Тогда
			Источник.СерииНоменклатуры.Очистить();
			Для каждого ТекСтрока Из ДанныеЗаполнения.СерииНоменклатуры Цикл
				НоваяСтрока = Источник.СерииНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			КонецЦикла;
			//корректировка количества по сериям
			Для каждого ТекСтрока Из Источник.Товары Цикл
				Количество = ТекСтрока.Количество;
				НайденныеСерии = Источник.СерииНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура, НомерСтрокиРеализации", ТекСтрока.Номенклатура, ТекСтрока.НомерСтроки));
				Для каждого ТекНайдСтрока Из НайденныеСерии Цикл
					Если ТекНайдСтрока.Количество > Количество Тогда
						ТекНайдСтрока.Количество = Количество;	
						Количество = 0;			
					Иначе
						Количество = Количество - ТекНайдСтрока.Количество;
					КонецЕсли;
				КонецЦикла;
				Если Количество Тогда
					Если НайденныеСерии.Количество() Тогда
						ТекНайдСтрока.Количество = ТекНайдСтрока.Количество + Количество;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗаполнитьУЧ_ПеремещениеМатериаловВПроизводство(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_ПеремещениеМатериаловВПроизводство") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ТребованиеНакладная") Тогда
		
		ТранслироватьСчетаУчета = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("ТранслироватьСчетаУчетаНоменклатуры");
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, РучнаяКорректировка, Субконто1, Субконто2, Субконто3");
		Источник.Дата = ДанныеЗаполнения.Дата;
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.Организация);
		Если ЗначениеЗаполнено(СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации)) Тогда
			Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации);
		КонецЕсли;	
		Источник.ВидОперации = Перечисления.ВидыОперацийПередачиТоваровВПроизводство.ПередачаВПроизводство;
		
		Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ДанныеЗаполнения.СчетЗатрат));
		Для каждого ТекСчет Из Соотв Цикл
			Источник.Счет = ТекСчет.СчетУУ;
			ИндексСубконто = 0;
			Для каждого ТекСубконто Из Источник.Счет.ВидыСубконто Цикл
				ИндексСубконто = ИндексСубконто + 1;
				Если ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ1 Тогда
					Источник.Субконто1 = ДанныеЗаполнения["Субконто" + Строка(ИндексСубконто)];
					Если НЕ ТипЗнч(Источник.Субконто1) = ТипЗнч(ДанныеЗаполнения["Субконто" + Строка(ИндексСубконто)]) ИЛИ (ЗначениеЗаполнено(ТекСчет["СубконтоБУ" + Строка(ИндексСубконто)]) И Не ТекСубконто.ВидСубконто.ТипЗначения.Типы()[0] = ТекСчет["СубконтоБУ" + Строка(ИндексСубконто)].ТипЗначения.Типы()[0]) Тогда
						Источник.Субконто1 = Неопределено;
						Если ТекСубконто.ВидСубконто.ТипЗначения.Типы().Количество() И ЗначениеЗаполнено(ТекСчет.СубконтоБУ3) И ТекСчет.СубконтоБУ3.ТипЗначения.Типы().Количество() И ТекСубконто.ВидСубконто.ТипЗначения.Типы()[0] = ТекСчет.СубконтоБУ3.ТипЗначения.Типы()[0] Тогда //3-е субконто для 20 счета
							Источник.Субконто1 = ДанныеЗаполнения["Субконто3"];	
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ2 Тогда
					Источник.Субконто2 = ДанныеЗаполнения["Субконто" + Строка(ИндексСубконто)];
					Если НЕ ТипЗнч(Источник.Субконто2) = ТипЗнч(ДанныеЗаполнения["Субконто" + Строка(ИндексСубконто)]) Тогда
						Источник.Субконто2 = Неопределено;
					КонецЕсли;
				ИначеЕсли ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ3 Тогда
					Источник.Субконто3 = ДанныеЗаполнения["Субконто" + Строка(ИндексСубконто)];
					Если НЕ ТипЗнч(Источник.Субконто3) = ТипЗнч(ДанныеЗаполнения["Субконто" + Строка(ИндексСубконто)]) Тогда
						Источник.Субконто3 = Неопределено;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			АнализЗаменыСтатьи91(Источник, Новый Структура("КорСчет, КорСубконто1, КорСубконто2", "Счет", "Субконто1", "Субконто2"), Источник.Счет);
			Прервать;
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(Источник.Счет) Тогда
			Источник.Счет = ПланыСчетов.Учетный.Счет26();
		КонецЕсли;
		
		Источник.ТабличнаяЧасть.Очистить();
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.Материалы Цикл
			НоваяСтрока = Источник.ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			
			Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрока.СчетЗатрат));
			Для каждого ТекСчет Из Соотв Цикл
				НоваяСтрока.КорСчет = ТекСчет.СчетУУ;
				ИндексСубконто = 0;
				Для каждого ТекСубконто Из ТекСчет.СчетУУ.ВидыСубконто Цикл
					ИндексСубконто = ИндексСубконто + 1;
					Если ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ1 Тогда
						НоваяСтрока.КорСубконто1 = ТекСтрока["Субконто" + Строка(ИндексСубконто)];
						Если НЕ ТипЗнч(НоваяСтрока.КорСубконто1) = ТипЗнч(ТекСтрока["Субконто" + Строка(ИндексСубконто)]) ИЛИ (ЗначениеЗаполнено(ТекСчет["СубконтоБУ" + Строка(ИндексСубконто)]) И Не ТекСубконто.ВидСубконто.ТипЗначения.Типы()[0] = ТекСчет["СубконтоБУ" + Строка(ИндексСубконто)].ТипЗначения.Типы()[0]) Тогда
							НоваяСтрока.КорСубконто1 = Неопределено;
							Если ТекСубконто.ВидСубконто.ТипЗначения.Типы().Количество() И ЗначениеЗаполнено(ТекСчет.СубконтоБУ3) И  ТекСчет.СубконтоБУ3.ТипЗначения.Типы().Количество() И ТекСубконто.ВидСубконто.ТипЗначения.Типы()[0] = ТекСчет.СубконтоБУ3.ТипЗначения.Типы()[0] Тогда //3-е субконто для 20 счета
								НоваяСтрока.КорСубконто1 = ТекСтрока["Субконто3"];	
							КонецЕсли;
						КонецЕсли;
					ИначеЕсли ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ2 Тогда
						НоваяСтрока.КорСубконто2 = ТекСтрока["Субконто" + Строка(ИндексСубконто)];
						Если НЕ ТипЗнч(НоваяСтрока.КорСубконто2) = ТипЗнч(ТекСтрока["Субконто" + Строка(ИндексСубконто)]) Тогда
							НоваяСтрока.КорСубконто2 = Неопределено;
						КонецЕсли;
					ИначеЕсли ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ3 Тогда
						НоваяСтрока.КорСубконто3 = ТекСтрока["Субконто" + Строка(ИндексСубконто)];
						Если НЕ ТипЗнч(НоваяСтрока.КорСубконто3) = ТипЗнч(ТекСтрока["Субконто" + Строка(ИндексСубконто)]) Тогда
							НоваяСтрока.КорСубконто3 = Неопределено;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
                АнализЗаменыСтатьи91(НоваяСтрока,,НоваяСтрока.КорСчет);
			КонецЦикла;
			
			Если ТранслироватьСчетаУчета Тогда
				Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрока.Счет));
				Для каждого ТекСчет Из Соотв Цикл
					НоваяСтрока.СчетУчета = ТекСчет.СчетУУ;
					Прервать;
				КонецЦикла;
				Если Не ЗначениеЗаполнено(НоваяСтрока.СчетУчета) Тогда
					НоваяСтрока.СчетУчета = ПланыСчетов.Учетный.Счет1001();		
				КонецЕсли;
			Иначе	
				НоваяСтрока.СчетУчета = Неопределено;
			КонецЕсли;
			
			НоваяСтрока.КорПодразделение = СоотвПодразделений.Получить(ТекСтрока.ПодразделениеЗатрат);
			
			Если ЗначениеЗаполнено(НоваяСтрока.КорСчет) И (Не НоваяСтрока.КорСчет = Источник.Счет ИЛИ НЕ НоваяСтрока.КорСубконто1 = Источник.Субконто1 ИЛИ НЕ НоваяСтрока.КорСубконто2 = Источник.Субконто2 ИЛИ НЕ НоваяСтрока.КорСубконто3 = Источник.Субконто3) Тогда
				Источник.Счет = Неопределено;
				Источник.Субконто1 = Неопределено;
				Источник.Субконто2 = Неопределено;
				Источник.Субконто3 = Неопределено;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДанныеЗаполнения.СерииНоменклатуры.Количество() Тогда
			Источник.СерииНоменклатуры.Очистить();
			Для каждого ТекСтрока Из ДанныеЗаполнения.СерииНоменклатуры Цикл
				НоваяСтрока = Источник.СерииНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			КонецЦикла;
			//корректировка количества по сериям
			//Для каждого ТекСтрока Из Источник.ТабличнаяЧасть Цикл
			//	Количество = ТекСтрока.Количество;
			//	НайденныеСерии = Источник.СерииНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура, НомерСтрокиРеализации", ТекСтрока.Товар, ТекСтрока.НомерСтроки));
			//	Для каждого ТекНайдСтрока Из НайденныеСерии Цикл
			//		Если ТекНайдСтрока.Количество > Количество Тогда
			//			ТекНайдСтрока.Количество = Количество;	
			//			Количество = 0;			
			//		Иначе
			//			Количество = Количество - ТекНайдСтрока.Количество;
			//		КонецЕсли;
			//	КонецЦикла;
			//	Если Количество Тогда
			//		Если НайденныеСерии.Количество() Тогда
			//			ТекНайдСтрока.Количество = ТекНайдСтрока.Количество + Количество;
			//		КонецЕсли;
			//	КонецЕсли;
			//КонецЦикла;
		КонецЕсли;

				
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗаполнитьУЧ_ПеремещениеМатериаловВПроизводство2(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_ПеремещениеМатериаловВПроизводство") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПередачаТоваров") И ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку Тогда
		
		ТранслироватьСчетаУчета = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("ТранслироватьСчетаУчетаНоменклатуры");
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, РучнаяКорректировка");
		Источник.Дата = ДанныеЗаполнения.Дата;
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие; 
		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.Организация);
		Если ЗначениеЗаполнено(СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации)) Тогда
			Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации);
		КонецЕсли;
		Источник.ВидОперации = Перечисления.ВидыОперацийПередачиТоваровВПроизводство.ПередачаПереработчику;
		
		Источник.Счет = ПланыСчетов.Учетный.НайтиПоКоду("10.07");
		Источник.Субконто2 = ДанныеЗаполнения.Контрагент; 
		Если ЗначениеЗаполнено(СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеЗатрат)) Тогда
			Источник.КорПодразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеЗатрат);
		КонецЕсли;
		Источник.ТабличнаяЧасть.Очистить();
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Источник.ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			
			Если ТранслироватьСчетаУчета Тогда
				Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрока.СчетУчета));
				Для каждого ТекСчет Из Соотв Цикл
					НоваяСтрока.СчетУчета = ТекСчет.СчетУУ;
					Прервать;
				КонецЦикла;
				Если Не ЗначениеЗаполнено(НоваяСтрока.СчетУчета) Тогда
					НоваяСтрока.СчетУчета = ПланыСчетов.Учетный.Счет1001();		
				КонецЕсли;
			Иначе	
				НоваяСтрока.СчетУчета = Неопределено;
			КонецЕсли;
			
			//Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрока.СчетПередачи));
			//Для каждого ТекСчет Из Соотв Цикл
			//	НоваяСтрока.СчетСписания = ТекСчет.СчетУУ;
			//	Прервать;
			//КонецЦикла;
			//Если Не ЗначениеЗаполнено(НоваяСтрока.СчетСписания) Тогда
			//	НоваяСтрока.СчетСписания = Источник.Счет;		
			//КонецЕсли;
			
		КонецЦикла; 
				
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗаполнитьУЧ_ПеремещениеМатериаловВЭксплуатацию(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_ПеремещениеМатериаловВПроизводство") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПередачаМатериаловВЭксплуатацию") Тогда
		
		ТранслироватьСчетаУчета = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("ТранслироватьСчетаУчетаНоменклатуры");
		
		ИспользоватьМОЛ = ПланыСчетов.Учетный.МОЛИспользуются();
		СчетМЦ02 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("МЦ.02");
		СчетМЦ03 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("МЦ.03");
		СчетМЦ04 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("МЦ.04");
		Счет1004 = ПланыСчетов.Учетный.НайтиПоКоду("10.04");
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, РучнаяКорректировка");
		Источник.Дата = ДанныеЗаполнения.Дата;
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие; 
		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.Организация);
		Если ЗначениеЗаполнено(СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации)) Тогда
			Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации); 
		КонецЕсли;
		Источник.ВидОперации = Перечисления.ВидыОперацийПередачиТоваровВПроизводство.ПередачаВПроизводство;
		Источник.ОтражатьЗаБалансом = НЕ ИспользоватьМОЛ;
		
		ТекСчетЗатрат = ПланыСчетов.Учетный.Счет26();
		
		Источник.ТабличнаяЧасть.Очистить();
		
		ТаблЧасти = Новый Массив;
		ТаблЧасти.Добавить("Спецодежда");
		ТаблЧасти.Добавить("Спецоснастка");
		ТаблЧасти.Добавить("ИнвентарьИХозяйственныеПринадлежности");
		ТаблЧасти.Добавить("ВозвратнаяТара");		
		
		Для каждого ТекТЧ Из ТаблЧасти Цикл
			
			Для каждого ТекСтрока Из ДанныеЗаполнения[ТекТЧ] Цикл
				НоваяСтрока = Источник.ТабличнаяЧасть.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				
				Если ТранслироватьСчетаУчета Тогда
					Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ",ТекСтрока.СчетУчета));
					Для каждого ТекСчет Из Соотв Цикл
						НоваяСтрока.СчетУчета = ТекСчет.СчетУУ;
						Прервать;
					КонецЦикла;
					Если Не ЗначениеЗаполнено(НоваяСтрока.СчетУчета) Тогда
						НоваяСтрока.СчетУчета = ПланыСчетов.Учетный.Счет1001();		
					КонецЕсли;
				Иначе	
					НоваяСтрока.СчетУчета = Неопределено;		
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТекСтрока.СпособОтраженияРасходов) И НЕ ИспользоватьМОЛ Тогда
					Если НЕ ТекСтрока.СпособОтраженияРасходов.Способы.Количество() Тогда
						СчетЗатрат = ПланыСчетов.Хозрасчетный.НайтиПоКоду("26");	
					Иначе	
						СчетЗатрат = ТекСтрока.СпособОтраженияРасходов.Способы[0].СчетЗатрат;
						НоваяСтрока.КорСубконто1 = ТекСтрока.СпособОтраженияРасходов.Способы[0].Субконто1;
						НоваяСтрока.КорСубконто2 = ТекСтрока.СпособОтраженияРасходов.Способы[0].Субконто2;
						НоваяСтрока.КорСубконто3 = ТекСтрока.СпособОтраженияРасходов.Способы[0].Субконто3;
						НоваяСтрока.КорПодразделение = СоотвПодразделений.Получить(ТекСтрока.СпособОтраженияРасходов.Способы[0].ПодразделениеОрганизации);
					КонецЕсли;
					Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", СчетЗатрат));
					Для каждого ТекСчет Из Соотв Цикл
						НоваяСтрока.КорСчет = ТекСчет.СчетУУ;
						Прервать;
					КонецЦикла;
				Иначе
					Если ИспользоватьМОЛ Тогда
						Если ТекТЧ = "Спецодежда" Тогда
							ТекСчет = СчетМЦ02;
							НоваяСтрока.КорСубконто3 = ТекСтрока.ФизЛицо;
						ИначеЕсли ТекТЧ = "Спецоснастка" Тогда	
							ТекСчет = СчетМЦ03;
						Иначе
							ТекСчет = СчетМЦ04;
							НоваяСтрока.КорСубконто3 = ТекСтрока.ФизЛицо;
						КонецЕсли;
						Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСчет));
						Для каждого ТекСчет Из Соотв Цикл
							НоваяСтрока.КорСчет = ТекСчет.СчетУУ;
							Прервать;
						КонецЦикла;
                       	Если Не ЗначениеЗаполнено(НоваяСтрока.КорСчет) Тогда
							НоваяСтрока.КорСчет = Счет1004;
						КонецЕсли;
						НоваяСтрока.КорСубконто1 = ТекСтрока.Номенклатура;
						НоваяСтрока.КорСубконто2 = ?(ЗначениеЗаполнено(Источник.Склад), Источник.Склад, НоваяСтрока.Склад);
					Иначе	
						НоваяСтрока.КорСчет = ТекСчетЗатрат;	
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла; 
		КонецЦикла;
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗаполнитьУЧ_СписаниеМатериаловИзЭксплуатации(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_СписаниеТоваров") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СписаниеМатериаловИзЭксплуатации") Тогда
		
		ТранслироватьСчетаУчета = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("ТранслироватьСчетаУчетаНоменклатуры");
		
		ИспользоватьМОЛ = ПланыСчетов.Учетный.МОЛИспользуются();
		СчетМЦ02 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("МЦ.02");
		СчетМЦ03 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("МЦ.03");
		СчетМЦ04 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("МЦ.04");
		Счет1004 = ПланыСчетов.Учетный.НайтиПоКоду("10.04");
		
		ТекСчетЗатрат = ПланыСчетов.Учетный.Счет26();
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, РучнаяКорректировка");
		Источник.Дата = ДанныеЗаполнения.Дата;
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.Организация);
		Если ЗначениеЗаполнено(СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации)) Тогда
			Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации);
		КонецЕсли;
		Источник.ВидОперации = Перечисления.ВидыОперацийСписания.Брак;
		Источник.Счет = ТекСчетЗатрат;
		
		Источник.ТабличнаяЧасть.Очистить();
		
		ТаблЧасти = Новый Массив;
		ТаблЧасти.Добавить("Спецодежда");
		ТаблЧасти.Добавить("Спецоснастка");
		ТаблЧасти.Добавить("ИнвентарьИХозяйственныеПринадлежности");
		
		Для каждого ТекТЧ Из ТаблЧасти Цикл
			
			Для каждого ТекСтрока Из ДанныеЗаполнения[ТекТЧ] Цикл
				НоваяСтрока = Источник.ТабличнаяЧасть.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				НоваяСтрока.Товар = ТекСтрока.Номенклатура;
				
				Если ТекТЧ = "Спецодежда" Тогда
					ТекСчет = СчетМЦ02;
					НоваяСтрока.МОЛ = ТекСтрока.ФизЛицо;
				ИначеЕсли ТекТЧ = "Спецоснастка" Тогда	
					ТекСчет = СчетМЦ03;
				Иначе
					ТекСчет = СчетМЦ04;
					НоваяСтрока.МОЛ = ТекСтрока.ФизЛицо;
				КонецЕсли;
				
				Если ТранслироватьСчетаУчета Тогда
					Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСчет));
					Для каждого ТекСчет Из Соотв Цикл
						НоваяСтрока.СчетУчета = ТекСчет.СчетУУ;
						Прервать;
					КонецЦикла;
					Если Не ЗначениеЗаполнено(НоваяСтрока.СчетУчета) Тогда
						НоваяСтрока.СчетУчета = Счет1004;
					КонецЕсли;
				Иначе	
					НоваяСтрока.СчетУчета = Неопределено;
				КонецЕсли;
				
				НоваяСтрока.СчетЗатрат = ТекСчетЗатрат;
				
			КонецЦикла; 
		КонецЦикла;
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗаполнитьУЧ_ПеремещениеТоваров(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_ПеремещениеТоваров") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		
		ТранслироватьСчетаУчета = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("ТранслироватьСчетаУчетаНоменклатуры");
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, РучнаяКорректировка");
		Источник.Дата = ДанныеЗаполнения.Дата;
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		Источник.ВидОперации = Перечисления.ВидыПеремещений.Перемещение;
		//Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.Организация);
		Если ЗначениеЗаполнено(СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОтправитель)) Тогда
			Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОтправитель);
		КонецЕсли;
		Если ЗначениеЗаполнено(СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеПолучатель)) Тогда
			Источник.ПодразделениеПолучатель = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеПолучатель); 
		КонецЕсли;
		Источник.Склад = ДанныеЗаполнения.СкладОтправитель;
		
		Источник.ТабличнаяЧасть.Очистить();
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Источник.ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			
			Если ТранслироватьСчетаУчета Тогда
				Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрока.СчетУчета));
				Для каждого ТекСчет Из Соотв Цикл
					НоваяСтрока.СчетУчетаБУ = ТекСчет.СчетУУ;
					Прервать;
				КонецЦикла;
				
				Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрока.НовыйСчетУчета));
				Для каждого ТекСчет Из Соотв Цикл
					НоваяСтрока.НовыйСчетУчетаБУ = ТекСчет.СчетУУ;
					Прервать;
				КонецЦикла; 
			Иначе	
				НоваяСтрока.СчетУчетаБУ = Неопределено;
				НоваяСтрока.НовыйСчетУчетаБУ = Неопределено;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДанныеЗаполнения.СерииНоменклатуры.Количество() Тогда
			Источник.СерииНоменклатуры.Очистить();
			Для каждого ТекСтрока Из ДанныеЗаполнения.СерииНоменклатуры Цикл
				НоваяСтрока = Источник.СерииНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			КонецЦикла;
			//корректировка количества по сериям
			Для каждого ТекСтрока Из Источник.ТабличнаяЧасть Цикл
				Количество = ТекСтрока.Количество;
				НайденныеСерии = Источник.СерииНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура, НомерСтрокиРеализации", ТекСтрока.Номенклатура, ТекСтрока.НомерСтроки));
				Для каждого ТекНайдСтрока Из НайденныеСерии Цикл
					Если ТекНайдСтрока.Количество > Количество Тогда
						ТекНайдСтрока.Количество = Количество;	
						Количество = 0;			
					Иначе
						Количество = Количество - ТекНайдСтрока.Количество;
					КонецЕсли;
				КонецЦикла;
				Если Количество Тогда
					Если НайденныеСерии.Количество() Тогда
						ТекНайдСтрока.Количество = ТекНайдСтрока.Количество + Количество;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
				
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗаполнитьУЧ_Оприходование(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_ОприходованиеТоваров") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОприходованиеТоваров") Тогда
		
		ТранслироватьСчетаУчета = Справочники.сабМониторВнедрения.ПолучитьЗначениеНастройки("ТранслироватьСчетаУчетаНоменклатуры");
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, РучнаяКорректировка");
		Источник.Дата = ДанныеЗаполнения.Дата;
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		Источник.ВидОперации = Перечисления.ВидыОперацийСписания.Брак;
		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.Организация);
		Если ЗначениеЗаполнено(СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации)) Тогда
			Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации); 
		КонецЕсли;
		Источник.Счет = ПланыСчетов.Учетный.Счет91();
		Источник.Субконто1 = Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("Оприходование излишков", Истина);
		
		Источник.ТабличнаяЧасть.Очистить();
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Источник.ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.Товар = ТекСтрока.Номенклатура;
			
			Если ТранслироватьСчетаУчета Тогда
				Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрока.СчетУчета));
				Для каждого ТекСчет Из Соотв Цикл
					НоваяСтрока.СчетУчета = ТекСчет.СчетУУ;
					Прервать;
				КонецЦикла; 
			Иначе	
				НоваяСтрока.СчетУчета = Неопределено;
			КонецЕсли;
			
		КонецЦикла;
		
		//синхронизация ТЧ серий бух и упр документа
		Если ДанныеЗаполнения.СерииНоменклатуры.Количество() Тогда
			Источник.СерииНоменклатуры.Очистить();
			Для каждого ТекСтрока Из ДанныеЗаполнения.СерииНоменклатуры Цикл
				НоваяСтрока = Источник.СерииНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			КонецЦикла;
			//корректировка количества по сериям
			Для каждого ТекСтрока Из Источник.ТабличнаяЧасть Цикл
				Количество = ТекСтрока.Количество;
				НайденныеСерии = Источник.СерииНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура, НомерСтрокиРеализации", ТекСтрока.Товар, ТекСтрока.НомерСтроки));
				Для каждого ТекНайдСтрока Из НайденныеСерии Цикл
					Если ТекНайдСтрока.Количество > Количество Тогда
						ТекНайдСтрока.Количество = Количество;	
						Количество = 0;			
					Иначе
						Количество = Количество - ТекНайдСтрока.Количество;
					КонецЕсли;
				КонецЦикла;
				Если Количество Тогда
					Если НайденныеСерии.Количество() Тогда
						ТекНайдСтрока.Количество = ТекНайдСтрока.Количество + Количество;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗаполнитьУЧ_НачислениеЗП(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_НачислениеЗП") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.НачислениеЗарплаты") Тогда
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, Проведен");
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.Подразделение);
		
		Если ЗначениеЗаполнено(СоотвПодразделений.Получить(ДанныеЗаполнения.Подразделение)) Тогда
			Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.Подразделение);
		КонецЕсли;

		КорСчет = Неопределено;
		КорСубконто1 = Неопределено;
		КорСубконто2 = Неопределено;
		КорСубконто3 = Неопределено;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ПорядокОтраженияЗарплатыВБухУчете.Счет КАК Счет,
		|	ПорядокОтраженияЗарплатыВБухУчете.СпособОтраженияЗарплатыВБухУчете.Наименование КАК Наименование,
		|	ПорядокОтраженияЗарплатыВБухУчете.СпособОтраженияЗарплатыВБухУчете КАК СпособОтраженияЗарплатыВБухУчете,
		|	ПорядокОтраженияЗарплатыВБухУчете.ОтражениеВУСН КАК ОтражениеВУСН,
		|	ПорядокОтраженияЗарплатыВБухУчете.Субконто1 КАК Субконто1,
		|	ПорядокОтраженияЗарплатыВБухУчете.Субконто2 КАК Субконто2,
		|	ПорядокОтраженияЗарплатыВБухУчете.Субконто3 КАК Субконто3
		|ИЗ
		|	РегистрСведений.ПорядокОтраженияЗарплатыВБухУчете КАК ПорядокОтраженияЗарплатыВБухУчете";
		
		Запрос.УстановитьПараметр("Наименование", "Отражение начислений по умолчанию");
		
		Результат = Запрос.Выполнить();
		ВыборкаРезультат = Результат.Выгрузить();
		
		Для Каждого Выборка Из ВыборкаРезультат Цикл
			
			Если Не Выборка.Наименование = "Отражение начислений по умолчанию" ИЛИ Выборка.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются Тогда
				Продолжить;			
			КонецЕсли; 
			
			Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", Выборка.Счет));
			
			Для каждого ТекСчет Из Соотв Цикл
				КорСчет = ТекСчет.СчетУУ;
				ИндексСубконто = 0;
				
				Для каждого ТекСубконто Из КорСчет.ВидыСубконто Цикл
					ИндексСубконто = ИндексСубконто + 1;
					
					Если ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ1 Тогда
						КорСубконто1 = Выборка["Субконто" + Строка(ИндексСубконто)];
						
						Если НЕ ТипЗнч(КорСубконто1) = ТипЗнч(Выборка["Субконто" + Строка(ИндексСубконто)]) Тогда
							КорСубконто1 = Неопределено;
						КонецЕсли;  
						
					ИначеЕсли ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ2 Тогда
						КорСубконто2 = Выборка["Субконто" + Строка(ИндексСубконто)];
						
						Если НЕ ТипЗнч(КорСубконто2) = ТипЗнч(Выборка["Субконто" + Строка(ИндексСубконто)]) Тогда
							КорСубконто2 = Неопределено;
						КонецЕсли; 
						
					ИначеЕсли ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ3 Тогда
						КорСубконто3 = Выборка["Субконто" + Строка(ИндексСубконто)];
						
						Если НЕ ТипЗнч(КорСубконто3) = ТипЗнч(Выборка["Субконто" + Строка(ИндексСубконто)]) Тогда
							КорСубконто3 = Неопределено;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Прервать;
			КонецЦикла;
			
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(КорСчет) Тогда
			Источник.СчетНачисления = ПланыСчетов.Учетный.Счет26();
			Источник.Субконто1 = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Оплата труда", Истина);
		КонецЕсли;
		
		МассивСпособов = Новый Массив;
		
		Источник.Субконто_НДФЛ =  Справочники.ВидыНалоговИПлатежейВБюджет.НайтиПоНаименованию("НДФЛ исчисленный налоговым агентом", Истина);
		Источник.Субконто_ПФР = Справочники.ВидыНалоговИПлатежейВБюджет.НайтиПоНаименованию("Страховые взносы в ПФР", Истина);
		Источник.Субконто_ФСС = Справочники.ВидыНалоговИПлатежейВБюджет.НайтиПоНаименованию("Страховые взносы в ФСС", Истина);
		Источник.Субконто_ФССНесч = Справочники.ВидыНалоговИПлатежейВБюджет.НайтиПоНаименованию("Страховые взносы в ФСС от несчастных случаев", Истина);
		Источник.Субконто_ФФОМС = Справочники.ВидыНалоговИПлатежейВБюджет.НайтиПоНаименованию("Страховые взносы в ФФОМС", Истина);
		Источник.Субконто_ВзносыПоЕдиномуТарифу = Справочники.ВидыНалоговИПлатежейВБюджет.НайтиПоНаименованию("Страховые взносы по единому тарифу", Истина);
		
		Источник.ТабличнаяЧасть.Очистить();
		Источник.Удержания.Очистить();
		
		//ВидНачисленияПоУмолчанию = Справочники.ВидыНачисленийОплатыТруда.НайтиПоКоду("000000001");
		ВидНачисленияПоУмолчанию = Справочники.ВидыНачисленийОплатыТруда.ПустаяСсылка();
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВидыНачисленийОплатыТруда.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыНачисленийОплатыТруда КАК ВидыНачисленийОплатыТруда
		|ГДЕ
		|	ВидыНачисленийОплатыТруда.РасчетНалоговИВзносов = ИСТИНА
		|	И ВидыНачисленийОплатыТруда.Организация = &Организация";
		
		Запрос.УстановитьПараметр("Организация", ДанныеЗаполнения.Организация);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ВидНачисленияПоУмолчанию = Выборка.Ссылка;	
		КонецЦикла;
		
		Для каждого ТекСтрока0 Из ДанныеЗаполнения.Сотрудники Цикл
			
			НоваяСтрока = Источник.ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока0);
			НоваяСтрока.УИДСтроки = Новый УникальныйИдентификатор;
			НоваяСтрока.ВидНачисления = ВидНачисленияПоУмолчанию;
			НоваяСтрока.ФизическоеЛицо = НоваяСтрока.Сотрудник.ФизическоеЛицо;
			НоваяСтрока.КорСчет = Источник.СчетНачисления;
			НайденныеСтроки = ДанныеЗаполнения.Начисления.НайтиСтроки(Новый Структура("Сотрудник", ТекСтрока0.Сотрудник));
			
			Для каждого ТекСтрока Из НайденныеСтроки Цикл
				НоваяСтрока.Сумма = НоваяСтрока.Сумма + ТекСтрока.Результат;
				
				НоваяСтрока.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.Организация);
				
				Если ЗначениеЗаполнено(СоотвПодразделений.Получить(ТекСтрока.Подразделение)) Тогда
					НоваяСтрока.Подразделение = СоотвПодразделений.Получить(ТекСтрока.Подразделение);
				КонецЕсли;
				
				Если НЕ НоваяСтрока.Подразделение = Источник.Подразделение Тогда
					Источник.Подразделение = Неопределено;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(ТекСтрока.Начисление.СпособОтраженияЗарплатыВБухучете) Тогда
					НоваяСтрока.КорСчет = КорСчет;	
					НоваяСтрока.КорСубконто1 = КорСубконто1;
				    НоваяСтрока.КорСубконто2 = КорСубконто2;
					НоваяСтрока.КорСубконто3 = КорСубконто3;
				Иначе
					НайденныйСпособ = ВыборкаРезультат.НайтиСтроки(Новый Структура("СпособОтраженияЗарплатыВБухУчете", ТекСтрока.Начисление.СпособОтраженияЗарплатыВБухучете));
					
					Для Каждого Выборка Из НайденныйСпособ Цикл
						Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", Выборка.Счет));
						
						Для каждого ТекСчет Из Соотв Цикл
							КорСчет = ТекСчет.СчетУУ;
							ИндексСубконто = 0;
							
							Для каждого ТекСубконто Из КорСчет.ВидыСубконто Цикл
								ИндексСубконто = ИндексСубконто + 1;
								
								Если ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ1 Тогда
									КорСубконто1 = Выборка["Субконто" + Строка(ИндексСубконто)];
									
									Если НЕ ТипЗнч(КорСубконто1) = ТипЗнч(Выборка["Субконто" + Строка(ИндексСубконто)]) Тогда
										КорСубконто1 = Неопределено;
									КонецЕсли;
									
								ИначеЕсли ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ2 Тогда
									КорСубконто2 = Выборка["Субконто" + Строка(ИндексСубконто)];
									
									Если НЕ ТипЗнч(КорСубконто2) = ТипЗнч(Выборка["Субконто" + Строка(ИндексСубконто)]) Тогда
										КорСубконто2 = Неопределено;
									КонецЕсли; 
									
								ИначеЕсли ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ3 Тогда
									КорСубконто3 = Выборка["Субконто" + Строка(ИндексСубконто)];
									
									Если НЕ ТипЗнч(КорСубконто3) = ТипЗнч(Выборка["Субконто" + Строка(ИндексСубконто)]) Тогда
										КорСубконто3 = Неопределено;
									КонецЕсли;
									
								КонецЕсли; 
								
							КонецЦикла;
							
							Прервать;
						КонецЦикла;
						
						НоваяСтрока.КорСчет = КорСчет;	
						НоваяСтрока.КорСубконто1 = КорСубконто1;
						НоваяСтрока.КорСубконто2 = КорСубконто2;
						НоваяСтрока.КорСубконто3 = КорСубконто3;

					КонецЦикла; 
					
				КонецЕсли;
				
				Если МассивСпособов.Найти(ТекСтрока.Начисление.СпособОтраженияЗарплатыВБухучете) = Неопределено Тогда
					МассивСпособов.Добавить(ТекСтрока.Начисление.СпособОтраженияЗарплатыВБухучете);				
				КонецЕсли;  
				
			КонецЦикла;
			
			НайденныеСтроки = ДанныеЗаполнения.Удержания.НайтиСтроки(Новый Структура("Сотрудник", НоваяСтрока.ФизическоеЛицо));
			
			Для каждого ТекСтрока Из НайденныеСтроки Цикл
				НоваяСтрокаУд = Источник.Удержания.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаУд, ТекСтрока); 
				
				НайденныеСтроки = Источник.ТабличнаяЧасть.НайтиСтроки(Новый Структура("ФизическоеЛицо", ТекСтрока.Сотрудник));
				
				Для каждого ТекНайдСтрока Из НайденныеСтроки Цикл
					НоваяСтрокаУд.Сотрудник = ТекНайдСтрока.Сотрудник;
					НоваяСтрокаУд.ВидНачисления = ТекНайдСтрока.ВидНачисления;
					НоваяСтрокаУд.УИДСтрокиНачислений = ТекНайдСтрока.УИДСтроки;
				КонецЦикла;
				
				НоваяСтрокаУд.Сумма = ТекСтрока.Результат;
			КонецЦикла;
			
			НайденныеСтроки = ДанныеЗаполнения.НДФЛ.НайтиСтроки(Новый Структура("ФизическоеЛицо", НоваяСтрока.ФизическоеЛицо));
			
			Для каждого ТекСтрока Из НайденныеСтроки Цикл
				НоваяСтрока.СуммаНДФЛ = НоваяСтрока.СуммаНДФЛ + ТекСтрока.Налог + ТекСтрока.НалогСПревышения;			
			КонецЦикла;
			
			НоваяСтрока.Сумма = НоваяСтрока.Сумма - НоваяСтрока.СуммаНДФЛ;
			
			НайденныеСтроки = ДанныеЗаполнения.Взносы.НайтиСтроки(Новый Структура("ФизическоеЛицо", НоваяСтрока.ФизическоеЛицо));
			
			Для каждого ТекСтрока Из НайденныеСтроки Цикл
				НоваяСтрока.СуммаФФОМС = НоваяСтрока.СуммаФФОМС + ТекСтрока.ФФОМС;
				НоваяСтрока.СуммаФСС = НоваяСтрока.СуммаФСС + ТекСтрока.ФСС;
				НоваяСтрока.СуммаПФР = НоваяСтрока.СуммаПФР + ТекСтрока.ПФРДоПредельнойВеличины + ТекСтрока.ПФРСПревышения;
				НоваяСтрока.СуммаФССНесчСл = НоваяСтрока.СуммаФССНесчСл + ТекСтрока.ФССНесчастныеСлучаи;
			КонецЦикла;
			
			НоваяСтрока.Сотрудник = НоваяСтрока.Сотрудник.ФизическоеЛицо;
			
		КонецЦикла;
		
		Если МассивСпособов.Количество() = 1 Тогда
			Источник.СчетНачисления = КорСчет;
			Источник.Субконто1 = КорСубконто1;
			Источник.Субконто2 = КорСубконто2;
			Источник.Субконто3 = КорСубконто3;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_НачислениеЗП") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОтражениеЗарплатыВБухучете") Тогда		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, Проведен");
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		//Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.Подразделение);
		//Источник.СчетНачисления = ПланыСчетов.Учетный.Счет25();
		//Источник.Субконто1 = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Оплата труда", Истина);
		
		Источник.Субконто_НДФЛ =  Справочники.ВидыНалоговИПлатежейВБюджет.НайтиПоНаименованию("НДФЛ исчисленный налоговым агентом", Истина);
		Источник.Субконто_ПФР = Справочники.ВидыНалоговИПлатежейВБюджет.НайтиПоНаименованию("Страховые взносы в ПФР", Истина);
		Источник.Субконто_ФСС = Справочники.ВидыНалоговИПлатежейВБюджет.НайтиПоНаименованию("Страховые взносы в ФСС", Истина);
		Источник.Субконто_ФССНесч = Справочники.ВидыНалоговИПлатежейВБюджет.НайтиПоНаименованию("Страховые взносы в ФСС от несчастных случаев", Истина);
		Источник.Субконто_ФФОМС = Справочники.ВидыНалоговИПлатежейВБюджет.НайтиПоНаименованию("Страховые взносы в ФФОМС", Истина);
		Источник.Субконто_ВзносыПоЕдиномуТарифу = Справочники.ВидыНалоговИПлатежейВБюджет.НайтиПоНаименованию("Страховые взносы по единому тарифу", Истина);
		
		КорСчет = Неопределено;
		КорСубконто1 = Неопределено;
		КорСубконто2 = Неопределено;
		КорСубконто3 = Неопределено;
		
		//ВидНачисленияПоУмолчанию = Справочники.ВидыНачисленийОплатыТруда.НайтиПоКоду("000000001");
		ВидНачисленияПоУмолчанию = Справочники.ВидыНачисленийОплатыТруда.ПустаяСсылка();
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВидыНачисленийОплатыТруда.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыНачисленийОплатыТруда КАК ВидыНачисленийОплатыТруда
		|ГДЕ
		|	ВидыНачисленийОплатыТруда.РасчетНалоговИВзносов = ИСТИНА
		|	И ВидыНачисленийОплатыТруда.Организация = &Организация";
		
		Запрос.УстановитьПараметр("Организация", ДанныеЗаполнения.Организация);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ВидНачисленияПоУмолчанию = Выборка.Ссылка;	
		КонецЦикла;

		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ПорядокОтраженияЗарплатыВБухУчете.Счет КАК Счет,
		|	ПорядокОтраженияЗарплатыВБухУчете.СпособОтраженияЗарплатыВБухУчете.Наименование КАК Наименование,
		|	ПорядокОтраженияЗарплатыВБухУчете.СпособОтраженияЗарплатыВБухУчете КАК СпособОтраженияЗарплатыВБухУчете,
		|	ПорядокОтраженияЗарплатыВБухУчете.ОтражениеВУСН КАК ОтражениеВУСН,
		|	ПорядокОтраженияЗарплатыВБухУчете.Субконто1 КАК Субконто1,
		|	ПорядокОтраженияЗарплатыВБухУчете.Субконто2 КАК Субконто2,
		|	ПорядокОтраженияЗарплатыВБухУчете.Субконто3 КАК Субконто3
		|ИЗ
		|	РегистрСведений.ПорядокОтраженияЗарплатыВБухУчете КАК ПорядокОтраженияЗарплатыВБухУчете";
		
		Запрос.УстановитьПараметр("Наименование", "Отражение начислений по умолчанию");
		
		Результат = Запрос.Выполнить();
		ВыборкаРезультат = Результат.Выгрузить();
		
		Для Каждого Выборка Из ВыборкаРезультат Цикл
			
			Если Не Выборка.Наименование = "Отражение начислений по умолчанию" ИЛИ Выборка.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются Тогда
				Продолжить;			
			КонецЕсли;   
			
			Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", Выборка.Счет));
			
			Для каждого ТекСчет Из Соотв Цикл
				КорСчет = ТекСчет.СчетУУ;
				ИндексСубконто = 0;
				
				Для каждого ТекСубконто Из КорСчет.ВидыСубконто Цикл
					ИндексСубконто = ИндексСубконто + 1;
					
					Если ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ1 Тогда
						КорСубконто1 = Выборка["Субконто" + Строка(ИндексСубконто)];
						
						Если НЕ ТипЗнч(КорСубконто1) = ТипЗнч(Выборка["Субконто" + Строка(ИндексСубконто)]) Тогда
							КорСубконто1 = Неопределено;
						КонецЕсли;
						
					ИначеЕсли ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ2 Тогда
						КорСубконто2 = Выборка["Субконто" + Строка(ИндексСубконто)];
						
						Если НЕ ТипЗнч(КорСубконто2) = ТипЗнч(Выборка["Субконто" + Строка(ИндексСубконто)]) Тогда
							КорСубконто2 = Неопределено;
						КонецЕсли;
						
					ИначеЕсли ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ3 Тогда
						КорСубконто3 = Выборка["Субконто" + Строка(ИндексСубконто)];
						
						Если НЕ ТипЗнч(КорСубконто3) = ТипЗнч(Выборка["Субконто" + Строка(ИндексСубконто)]) Тогда
							КорСубконто3 = Неопределено;
						КонецЕсли; 
						
					КонецЕсли;
					
				КонецЦикла;
				
				Прервать;
			КонецЦикла;
			
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(КорСчет) Тогда
			Источник.СчетНачисления = ПланыСчетов.Учетный.Счет26();
			Источник.Субконто1 = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Оплата труда", Истина);
		КонецЕсли;
		
		МассивСпособов = Новый Массив;
		
		Источник.ТабличнаяЧасть.Очистить();
		Источник.Удержания.Очистить();
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВидыНачисленийОплатыТруда.Ссылка КАК Ссылка,
		|	ВидыНачисленийОплатыТруда.ВидОперации КАК ВидОперации
		|ИЗ
		|	Справочник.ВидыНачисленийОплатыТруда КАК ВидыНачисленийОплатыТруда
		|ГДЕ
		|	НЕ ВидыНачисленийОплатыТруда.ВидОперации = Значение(Перечисление.ВидыОперацийПоЗарплате.ПустаяСсылка)";
		
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		СоотвВидовОпераций = Новый Соответствие;
		
		Пока Выборка.Следующий() Цикл
			СоотвВидовОпераций.Вставить(Выборка.ВидОперации, Выборка.Ссылка);
		КонецЦикла;
		
		ТЗ_ФЛ_ВидыНачислений = ДанныеЗаполнения.НачисленнаяЗарплатаИВзносы.Выгрузить();
		ТЗ_ФЛ_ВидыНачислений.Свернуть("ФизическоеЛицо, Подразделение, ВидОперации, СпособОтраженияЗарплатыВБухучете");
		
		Для каждого ТекСтрока0 Из ДанныеЗаполнения.ФизическиеЛица Цикл
			
			НайденныеСтроки_ФЛ_ВидыНачислений = ТЗ_ФЛ_ВидыНачислений.НайтиСтроки(Новый Структура("ФизическоеЛицо", ТекСтрока0.ФизическоеЛицо));
			
			Для Каждого ТекСтрока_ФЛ_ВидыНачислений Из НайденныеСтроки_ФЛ_ВидыНачислений Цикл
				НоваяСтрока = Источник.ТабличнаяЧасть.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока_ФЛ_ВидыНачислений); 
				НоваяСтрока.УИДСтроки = Новый УникальныйИдентификатор;
				НоваяСтрока.ВидНачисления = ?(ЗначениеЗаполнено(ТекСтрока_ФЛ_ВидыНачислений.СпособОтраженияЗарплатыВБухучете.УУ_ВидНачисления), ТекСтрока_ФЛ_ВидыНачислений.СпособОтраженияЗарплатыВБухучете.УУ_ВидНачисления, ВидНачисленияПоУмолчанию);
				
				ВидОперации = СоотвВидовОпераций.Получить(ТекСтрока_ФЛ_ВидыНачислений.ВидОперации);
				
				Если ЗначениеЗаполнено(ВидОперации) Тогда
					НоваяСтрока.ВидНачисления = ВидОперации;
				КонецЕсли;
				
				НоваяСтрока.Сотрудник = НоваяСтрока.ФизическоеЛицо; 				
				НоваяСтрока.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.Организация);
				
				Если ЗначениеЗаполнено(СоотвПодразделений.Получить(ТекСтрока_ФЛ_ВидыНачислений.Подразделение)) Тогда
					НоваяСтрока.Подразделение = СоотвПодразделений.Получить(ТекСтрока_ФЛ_ВидыНачислений.Подразделение);
				КонецЕсли;
				
				Если НЕ НоваяСтрока.Подразделение = Источник.Подразделение Тогда
					Источник.Подразделение = Неопределено;
				КонецЕсли;
				
				НоваяСтрока.КорСчет = Источник.СчетНачисления;
				
				НайденныеСтроки = ДанныеЗаполнения.НачисленнаяЗарплатаИВзносы.НайтиСтроки(
				Новый Структура("ФизическоеЛицо, Подразделение, ВидОперации, СпособОтраженияЗарплатыВБухучете", 
				ТекСтрока_ФЛ_ВидыНачислений.ФизическоеЛицо, 
				ТекСтрока_ФЛ_ВидыНачислений.Подразделение, 
				ТекСтрока_ФЛ_ВидыНачислений.ВидОперации, 
				ТекСтрока_ФЛ_ВидыНачислений.СпособОтраженияЗарплатыВБухучете));
				
				Для каждого ТекСтрока Из НайденныеСтроки Цикл															
					НоваяСтрока.Сумма = НоваяСтрока.Сумма + ТекСтрока.Сумма;
					
					НоваяСтрока.СуммаФФОМС = НоваяСтрока.СуммаФФОМС + ТекСтрока.ФФОМС;
					НоваяСтрока.СуммаФСС = НоваяСтрока.СуммаФСС + ТекСтрока.ФСС;
					НоваяСтрока.СуммаПФР = НоваяСтрока.СуммаПФР + ТекСтрока.ПФРДоПредельнойВеличины + ТекСтрока.ПФРСПревышения;
					НоваяСтрока.СуммаФССНесчСл = НоваяСтрока.СуммаФССНесчСл + ТекСтрока.ФССНесчастныеСлучаи;
					НоваяСтрока.СуммаВзносыПоЕдиномуТарифу = НоваяСтрока.СуммаВзносыПоЕдиномуТарифу + ТекСтрока.ВзносыПоЕдиномуТарифу;
					
					Если Не ЗначениеЗаполнено(ТекСтрока.СпособОтраженияЗарплатыВБухучете) Тогда
						НоваяСтрока.КорСчет = КорСчет;	
						НоваяСтрока.КорСубконто1 = КорСубконто1;
						НоваяСтрока.КорСубконто2 = КорСубконто2;
						НоваяСтрока.КорСубконто3 = КорСубконто3;
					Иначе
						НайденныйСпособ = ВыборкаРезультат.НайтиСтроки(Новый Структура("СпособОтраженияЗарплатыВБухУчете", ТекСтрока.СпособОтраженияЗарплатыВБухучете));
						
						Для Каждого Выборка Из НайденныйСпособ Цикл
							Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", Выборка.Счет));
							
							Для каждого ТекСчет Из Соотв Цикл
								КорСчет = ТекСчет.СчетУУ;
								ИндексСубконто = 0;
								
								Для каждого ТекСубконто Из КорСчет.ВидыСубконто Цикл
									ИндексСубконто = ИндексСубконто + 1;
									
									Если ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ1 Тогда
										КорСубконто1 = Выборка["Субконто" + Строка(ИндексСубконто)];
										
										Если НЕ ТипЗнч(КорСубконто1) = ТипЗнч(Выборка["Субконто" + Строка(ИндексСубконто)]) Тогда
											КорСубконто1 = Неопределено;
										КонецЕсли; 
										
									ИначеЕсли ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ2 Тогда
										КорСубконто2 = Выборка["Субконто" + Строка(ИндексСубконто)];
										
										Если НЕ ТипЗнч(КорСубконто2) = ТипЗнч(Выборка["Субконто" + Строка(ИндексСубконто)]) Тогда
											КорСубконто2 = Неопределено;
										КонецЕсли;  
										
									ИначеЕсли ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ3 Тогда
										КорСубконто3 = Выборка["Субконто" + Строка(ИндексСубконто)];
										
										Если НЕ ТипЗнч(КорСубконто3) = ТипЗнч(Выборка["Субконто" + Строка(ИндексСубконто)]) Тогда
											КорСубконто3 = Неопределено;
										КонецЕсли;  
										
									КонецЕсли;
									
								КонецЦикла; 
								
								Прервать;
							КонецЦикла; 
							
							НоваяСтрока.КорСчет = КорСчет;	
							НоваяСтрока.КорСубконто1 = КорСубконто1;
							НоваяСтрока.КорСубконто2 = КорСубконто2;
							НоваяСтрока.КорСубконто3 = КорСубконто3;
							
						КонецЦикла;
						
						Если МассивСпособов.Найти(ТекСтрока.СпособОтраженияЗарплатыВБухучете) = Неопределено Тогда
							МассивСпособов.Добавить(ТекСтрока.СпособОтраженияЗарплатыВБухучете);				
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				
			КонецЦикла;
			
			/////////////////////////////////////////////////////////////////
			НайденныеСтроки = ДанныеЗаполнения.УдержаннаяЗарплата.НайтиСтроки(Новый Структура("ФизическоеЛицо", НоваяСтрока.ФизическоеЛицо));
			
			Для каждого ТекСтрока Из НайденныеСтроки Цикл
				НоваяСтрокаУд = Источник.Удержания.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаУд, ТекСтрока); 
				
				ВидОперации = СоотвВидовОпераций.Получить(ТекСтрока.ВидОперации);
				
				Если ЗначениеЗаполнено(ВидОперации) Тогда
					НоваяСтрокаУд.ВидУдержания = ВидОперации;
				КонецЕсли;
				
				НайденныеСтроки = Источник.ТабличнаяЧасть.НайтиСтроки(Новый Структура("ФизическоеЛицо", ТекСтрока.ФизическоеЛицо));
				
				Для каждого ТекНайдСтрока Из НайденныеСтроки Цикл
					НоваяСтрокаУд.Сотрудник = ТекНайдСтрока.Сотрудник;
					НоваяСтрокаУд.ВидНачисления = ТекНайдСтрока.ВидНачисления;
					НоваяСтрокаУд.УИДСтрокиНачислений = ТекНайдСтрока.УИДСтроки;
				КонецЦикла;
				
				НоваяСтрокаУд.Сумма = ТекСтрока.Сумма;
			КонецЦикла;
			
			НайденныеСтроки = ДанныеЗаполнения.НачисленныйНДФЛ.НайтиСтроки(Новый Структура("ФизическоеЛицо", НоваяСтрока.ФизическоеЛицо));
			НайденныеСтрокиТабличнойЧасти = Источник.ТабличнаяЧасть.НайтиСтроки(Новый Структура("ФизическоеЛицо", НоваяСтрока.ФизическоеЛицо)); 
			
			Для каждого ТекСтрока Из НайденныеСтроки Цикл
				НайденныеСтрокиТабличнойЧасти[0].СуммаНДФЛ = НайденныеСтрокиТабличнойЧасти[0].СуммаНДФЛ + ТекСтрока.Сумма;
			КонецЦикла;
			
			НайденныеСтрокиТабличнойЧасти[0].Сумма = НайденныеСтрокиТабличнойЧасти[0].Сумма - НайденныеСтрокиТабличнойЧасти[0].СуммаНДФЛ;
			
		КонецЦикла;
		
		Если МассивСпособов.Количество() = 1 Тогда
			Источник.СчетНачисления = КорСчет;
			Источник.Субконто1 = КорСубконто1;
			Источник.Субконто2 = КорСубконто2;
			Источник.Субконто3 = КорСубконто3;
		КонецЕсли;
		
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗаполнитьУЧ_ВыплатаЗП(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_ВыплатаЗП") И (ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплаты") ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк") ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу")) Тогда
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, Проведен");
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплаты") Тогда
			Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.Организация); 
			Если ЗначениеЗаполнено(СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации)) Тогда
				Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации); 
			КонецЕсли;
		Иначе
			Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.Организация); 
			Если ЗначениеЗаполнено(СоотвПодразделений.Получить(ДанныеЗаполнения.Подразделение)) Тогда
				Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.Подразделение);
			КонецЕсли;
		КонецЕсли;
		
		СчетСписания = ПланыСчетов.Учетный.Счет70();
		
		Источник.ТабличнаяЧасть.Очистить();
		
		ВидНачисления = Справочники.ВидыНачисленийОплатыТруда.ПустаяСсылка();
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВидыНачисленийОплатыТруда.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыНачисленийОплатыТруда КАК ВидыНачисленийОплатыТруда
		|ГДЕ
		|	ВидыНачисленийОплатыТруда.РасчетНалоговИВзносов = ИСТИНА
		|	И ВидыНачисленийОплатыТруда.Организация = &Организация";
		
		Запрос.УстановитьПараметр("Организация", ДанныеЗаполнения.Организация);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ВидНачисления = Выборка.Ссылка;	
		КонецЦикла;
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.Зарплата Цикл
			НоваяСтрока = Источник.ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.ВидНачисления = ВидНачисления;
			Если Не ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплаты") Тогда
				НоваяСтрока.Сумма = ТекСтрока.КВыплате;
			КонецЕсли;
			НоваяСтрока.Сотрудник = НоваяСтрока.ФизическоеЛицо;
			//НоваяСтрока.ФизическоеЛицо = НоваяСтрока.Сотрудник.ФизическоеЛицо;
		КонецЦикла;
		
		Источник.ТабличнаяЧасть.Свернуть("Сотрудник, Предприятие, Подразделение, ВидНачисления, Комментарий, КорПодразделение, ДокументВыплаты, ФизическоеЛицо", "Сумма, СуммаВыплачено"); 
				
	КонецЕсли;
			
КонецПроцедуры

Процедура сабПередЗаписьюДокументыБППередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.СчетНаОплатуПокупателю") Тогда
		Если НЕ Источник.ДополнительныеСвойства.Свойство("Модифицирован") Тогда
			Источник.ДополнительныеСвойства.Вставить("Модифицирован", Ложь);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьСчетПоКоду(Код) Экспорт
	Возврат ПланыСчетов.Учетный.НайтиПоКоду(Код);
КонецФункции // ()

Функция ПолучитьСоотвСчетовИСубконто(ТекСтру) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	сабСоответствиеСчетовИСубконто.СчетБУ КАК СчетБУ,
	               |	сабСоответствиеСчетовИСубконто.СубконтоБУ1 КАК СубконтоБУ1,
	               |	сабСоответствиеСчетовИСубконто.СубконтоБУ2 КАК СубконтоБУ2,
	               |	сабСоответствиеСчетовИСубконто.СубконтоБУ3 КАК СубконтоБУ3,
	               |	сабСоответствиеСчетовИСубконто.СчетУУ КАК СчетУУ,
	               |	сабСоответствиеСчетовИСубконто.СубконтоУУ1 КАК СубконтоУУ1,
	               |	сабСоответствиеСчетовИСубконто.СубконтоУУ2 КАК СубконтоУУ2,
	               |	сабСоответствиеСчетовИСубконто.СубконтоУУ3 КАК СубконтоУУ3,
	               |	сабСоответствиеСчетовИСубконто.Комментарии КАК Комментарии
	               |ИЗ
	               |	РегистрСведений.сабСоответствиеСчетовИСубконто КАК сабСоответствиеСчетовИСубконто
	               |ГДЕ
	               |	сабСоответствиеСчетовИСубконто.СчетБУ = &СчетБУ";
	
	Запрос.УстановитьПараметр("СчетБУ", ТекСтру.Счет);
	Результат = Запрос.Выполнить();
	ВыборкаСоотв = Результат.Выгрузить();

	Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтру.Счет));
	НовСтру = Новый Структура("Счет, Субконто1, Субконто2, Субконто3");
	Для каждого ТекСчет Из Соотв Цикл
		НовСтру.Вставить("Счет", ТекСчет.СчетУУ);
		ИндексСубконто = 0;
		Для каждого ТекСубконто Из ТекСчет.СчетУУ.ВидыСубконто Цикл
			ИндексСубконто = ИндексСубконто + 1;
			Если ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ1 Тогда
				НовСтру.Вставить("Субконто1", ТекСтру["Субконто" + Строка(ИндексСубконто)]);
			ИначеЕсли ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ2 Тогда
				НовСтру.Вставить("Субконто2", ТекСтру["Субконто" + Строка(ИндексСубконто)]);
			ИначеЕсли ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ3 Тогда
				НовСтру.Вставить("Субконто3", ТекСтру["Субконто" + Строка(ИндексСубконто)]);
			КонецЕсли;
		КонецЦикла; 
		
		Прервать;
	КонецЦикла;
	
	Возврат НовСтру;

КонецФункции // ()

Процедура УстановитьМодифицированностьБУДокумента(ЭтотОбъект, Документ, РежимЗаписи = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(Документ) Тогда
		
		Изменены = Ложь;    
		
		// Проверка реквизитов
		Для каждого реквизит из ЭтотОбъект.Метаданные().Реквизиты Цикл
			Если Не ЭтотОбъект[Реквизит.Имя] = ЭтотОбъект.Ссылка[Реквизит.Имя] тогда 
				Изменены = Истина;
			КонецЕсли;
		КонецЦикла;
		
		// Проверка стандартных реквизитов
		Для каждого реквизит из ЭтотОбъект.Метаданные().СтандартныеРеквизиты Цикл
			Если Не ЭтотОбъект[Реквизит.Имя] = ЭтотОбъект.Ссылка[Реквизит.Имя] тогда 
				Изменены = Истина;
			КонецЕсли;
		КонецЦикла;
		
		//проведен не передается в ПередЗаписью, поэтому вручную
		Если Не РежимЗаписи = Неопределено Тогда
			Если РежимЗаписи = РежимЗаписиДокумента.Проведение И НЕ ЭтотОбъект["Проведен"] Тогда
				ЭтотОбъект["Проведен"] = Истина;
				Изменены = Истина;
			ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения И ЭтотОбъект["Проведен"] Тогда	
				ЭтотОбъект["Проведен"] = Ложь;
				Изменены = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// Проверка реквизитов ТЧ
		Для каждого ТЧ из ЭтотОбъект.Метаданные().ТабличныеЧасти Цикл
			ТЗОбъекта = ЭтотОбъект[ТЧ.Имя].Выгрузить(); 
			ТЗСсылкиНаОбъект = ЭтотОбъект.Ссылка[ТЧ.Имя].Выгрузить(); 
			ТЗОбъекта = ЗначениеВСтрокуВнутр(ТЗОбъекта);
			ТЗСсылкиНаОбъект = ЗначениеВСтрокуВнутр(ТЗСсылкиНаОбъект);
			Если ТЗОбъекта <> ТЗСсылкиНаОбъект Тогда
				Изменены = Истина;    
			КонецЕсли;
		КонецЦикла;
		
		Если Изменены Тогда
			НаборЗаписей = РегистрыСведений.сабОбработкаДокументов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ДокументБУ.Установить(Документ);
			НаборЗаписей.Прочитать();
			Для каждого ТекЗапись Из НаборЗаписей Цикл
				Если ЗначениеЗаполнено(ТекЗапись.ДокументУУ) Тогда
					Если НЕ ТекЗапись.ПервичныйДокументУУ  Тогда
						ТекЗапись.Модифицирован = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла; 
			НаборЗаписей.Записать();
		КонецЕсли;
		
		//удалить запись ошибки обработанного
		НаборЗаписей = РегистрыСведений.сабДокументОшибкаФоновогоПроведения.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументБУ.Установить(ЭтотОбъект.Ссылка);
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	УстановитьТайминг(ЭтотОбъект);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура УстановитьМодифицированностьУУДокумента(ЭтотОбъект, Документ, РежимЗаписи = Неопределено, Изменены) Экспорт
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат;	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Изменены Тогда
		НаборЗаписей = РегистрыСведений.сабОбработкаДокументов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументУУ.Установить(Документ);
		НаборЗаписей.Прочитать();
		Для каждого ТекЗапись Из НаборЗаписей Цикл
			Если ЗначениеЗаполнено(ТекЗапись.ДокументБУ) И ТекЗапись.ПервичныйДокументУУ Тогда
				ТекЗапись.Модифицирован = Истина;
			КонецЕсли;
		КонецЦикла; 
		НаборЗаписей.Записать();
	КонецЕсли;
	
	Запись = РегистрыСведений.сабОбработкаДокументов.СоздатьМенеджерЗаписи();
	Запись.ДокументУУ = Документ;
	Запись.Прочитать();
	
	Если Запись.Выбран() Тогда
		ЗаписьСущесвует = Истина;
		//удалить запись ошибки обработанного
		НаборЗаписей = РегистрыСведений.сабДокументОшибкаФоновогоПроведения.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументБУ.Установить(Запись.ДокументБУ);
		НаборЗаписей.Записать();
	Иначе
		ЗаписьСуществует = Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура УстановитьТайминг(ЭтотОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	//установка времени по настройкам тайминга
	ИмяДока = ЭтотОбъект.Ссылка.Метаданные().Имя;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СабНастройкиТайминга.Ссылка КАК Ссылка,
	|	СабНастройкиТайминга.Время КАК Время,
	|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(СабНастройкиТайминга.Время, ДЕНЬ), СабНастройкиТайминга.Время, СЕКУНДА) КАК Разница
	|ИЗ
	|	Справочник.СабНастройкиТайминга КАК СабНастройкиТайминга
	|ГДЕ
	|	СабНастройкиТайминга.ПометкаУдаления = ЛОЖЬ
	|	И СабНастройкиТайминга.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", ИмяДока);
	Запрос.УстановитьПараметр("ТекДата", ЭтотОбъект.Дата);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЭтотОбъект.Дата = НачалоДня(ЭтотОбъект.Дата) + Выборка.Разница;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

Функция ПроверитьДоступМодуля() Экспорт
	Возврат ПравоДоступа("Просмотр", Метаданные.Подсистемы.модульУправленка);
КонецФункции // ()

Процедура АвтозаполнениеПоказателейНаСервере() Экспорт
	ТекГруппа = Справочники.сабФинансовыеПоказатели.НайтиПоНаименованию("Исходные данные", Истина);
	Если ЗначениеЗаполнено(ТекГруппа) Тогда
		НоваяГруппа = ТекГруппа.ПолучитьОбъект();
	Иначе
		НоваяГруппа = Справочники.сабФинансовыеПоказатели.СоздатьГруппу();
	КонецЕсли;
	НоваяГруппа.Наименование = "Исходные данные";
	НоваяГруппа.Порядок = 1;
	НоваяГруппа.Записать();
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник, ТипДанных, ВидОстатка", "Счет", "90.01", "Обороты", "КредитСвернутый"));
	СоздатьПоказатель(
	"Выручка", 
	СтрокиЧислителя, 
	Неопределено, 
	Перечисления.сабСуммСред.Сумма, 
	НоваяГруппа.Ссылка);
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник, ТипДанных, ВидОстатка", "Счет", "90.02", "Обороты", "ДебетСвернутый"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник, ТипДанных, ВидОстатка", "Счет", "90.03", "Обороты", "дебетСвернутый"));
	СоздатьПоказатель(
	"Затраты", 
	СтрокиЧислителя, 
	Неопределено, 
	Перечисления.сабСуммСред.Сумма, 
	НоваяГруппа.Ссылка);
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник, ТипДанных, ВидОстатка", "Счет", "90.01", "Обороты", "КредитСвернутый"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник, ТипДанных, ВидОстатка", "Счет", "90.02", "Обороты", "КредитСвернутый"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник, ТипДанных, ВидОстатка", "Счет", "90.03", "Обороты", "КредитСвернутый"));
	СоздатьПоказатель(
	"Прибыль", 
	СтрокиЧислителя, 
	Неопределено, 
	Перечисления.сабСуммСред.Сумма, 
	НоваяГруппа.Ссылка);
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "Статья", "Дебиторская задолженность покупателей"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "Статья", "Дебиторская задолженность поставщиков и подрядчиков"));
	СоздатьПоказатель(
	"Дебиторская задолженность", 
	СтрокиЧислителя, 
	Неопределено, 
	Перечисления.сабСуммСред.Среднее, 
	НоваяГруппа.Ссылка);
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "Статья", "Денежные средства"));
	СоздатьПоказатель(
	"Денежные средства", 
	СтрокиЧислителя, 
	Неопределено, 
	Перечисления.сабСуммСред.Среднее, 
	НоваяГруппа.Ссылка);

	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "Статья", "Кредиты и займы краткосрочные"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "Статья", "Кредиты и займы долгосрочные"));
	СоздатьПоказатель(
	"Заемный капитал", 
	СтрокиЧислителя, 
	Неопределено, 
	Перечисления.сабСуммСред.Среднее, 
	НоваяГруппа.Ссылка);

	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "Статья", "Готовая продукция"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "Статья", "Незавершенное производство"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "Статья", "Сырье, материалы"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "Статья", "Товары"));
	СоздатьПоказатель(
	"Запасы", 
	СтрокиЧислителя, 
	Неопределено, 
	Перечисления.сабСуммСред.Среднее, 
	НоваяГруппа.Ссылка);
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "Статья", "Задолженность перед контрагентами"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "Статья", "Задолженность по выплатам сотрудникам"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "Статья", "Задолженность по налоговым обязательствам"));
	СоздатьПоказатель(
	"Кредиторская задолженность", 
	СтрокиЧислителя, 
	Неопределено, 
	Перечисления.сабСуммСред.Среднее, 
	НоваяГруппа.Ссылка);
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "Статья", "Готовая продукция"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "Статья", "Незавершенное производство"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "Статья", "Сырье, материалы"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "Статья", "Дебиторская задолженность покупателей"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "Статья", "Дебиторская задолженность поставщиков и подрядчиков"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "Статья", "Денежные средства"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "Статья", "Прочие оборотные активы"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "Статья", "Расходы будущих периодов"));
	СоздатьПоказатель(
	"Оборотные средства", 
	СтрокиЧислителя, 
	Неопределено, 
	Перечисления.сабСуммСред.Среднее, 
	НоваяГруппа.Ссылка);
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "Статья", "Основные средства"));
	СоздатьПоказатель(
	"Основные средства", 
	СтрокиЧислителя, 
	Неопределено, 
	Перечисления.сабСуммСред.Среднее, 
	НоваяГруппа.Ссылка);

	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник, ТипДанных, ВидОстатка", "Счет", "75.01", "Остатки", "КредитСвернутый"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник, ТипДанных, ВидОстатка", "Счет", "75.02", "Остатки", "КредитСвернутый"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник, ТипДанных, ВидОстатка", "Счет", "84", "Остатки", "КредитСвернутый"));
	СоздатьПоказатель(
	"Собственный капитал", 
	СтрокиЧислителя, 
	Неопределено, 
	Перечисления.сабСуммСред.Среднее, 
	НоваяГруппа.Ссылка);
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник, ТипДанных, ВидОстатка", "Счет", "58", "Остатки", "ДебетСвернутый"));
	СоздатьПоказатель(
	"Краткосрочные фин. вложения", 
	СтрокиЧислителя, 
	Неопределено, 
	Перечисления.сабСуммСред.Среднее, 
	НоваяГруппа.Ссылка);
	
	ТекГруппа = Справочники.сабФинансовыеПоказатели.НайтиПоНаименованию("Ликвидность", Истина);
	Если ЗначениеЗаполнено(ТекГруппа) Тогда
		НоваяГруппа = ТекГруппа.ПолучитьОбъект();
	Иначе
		НоваяГруппа = Справочники.сабФинансовыеПоказатели.СоздатьГруппу();
	КонецЕсли;
	НоваяГруппа.Наименование = "Ликвидность";
	НоваяГруппа.Порядок = 2;
	НоваяГруппа.Записать();
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Оборотные средства"));
	СтрокиЗнаменателя = Новый Массив;
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Кредиторская задолженность"));
	СоздатьПоказатель(
	"Коэффициент текущей ликвидности", 
	СтрокиЧислителя, 
	СтрокиЗнаменателя, 
	Перечисления.сабСуммСред.Среднее, 
	НоваяГруппа.Ссылка,
	,
	Новый Структура("НормаЗнак, НормаЧисло", ">", 2));
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Денежные средства"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Краткосрочные фин. вложения"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Дебиторская задолженность"));
	СтрокиЗнаменателя = Новый Массив;
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Кредиторская задолженность"));
	СоздатьПоказатель(
	"Коэффициент быстрой ликвидности", 
	СтрокиЧислителя, 
	СтрокиЗнаменателя, 
	Перечисления.сабСуммСред.Среднее, 
	НоваяГруппа.Ссылка,
	,
	Новый Структура("НормаЗнак, НормаЧисло", ">", 0.7));
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Денежные средства"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Краткосрочные фин. вложения"));
	СтрокиЗнаменателя = Новый Массив;
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Кредиторская задолженность"));
	СоздатьПоказатель(
	"Коэффициент абсолютной ликвидности", 
	СтрокиЧислителя, 
	СтрокиЗнаменателя, 
	Перечисления.сабСуммСред.Среднее, 
	НоваяГруппа.Ссылка,
	,
	Новый Структура("НормаЗнак, НормаЧисло", ">", 0.3));
	
	ТекГруппа = Справочники.сабФинансовыеПоказатели.НайтиПоНаименованию("Финансовая устойчивость", Истина);
	Если ЗначениеЗаполнено(ТекГруппа) Тогда
		НоваяГруппа = ТекГруппа.ПолучитьОбъект();
	Иначе
		НоваяГруппа = Справочники.сабФинансовыеПоказатели.СоздатьГруппу();
	КонецЕсли;
	НоваяГруппа.Наименование = "Финансовая устойчивость";
	НоваяГруппа.Порядок = 3;
	НоваяГруппа.Записать();
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Собственный капитал"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Заемный капитал"));
	СтрокиЗнаменателя = Новый Массив;
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Собственный капитал"));
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Заемный капитал"));
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Кредиторская задолженность"));
	СоздатьПоказатель(
	"Коэффициент финансовой устойчивости", 
	СтрокиЧислителя, 
	СтрокиЗнаменателя, 
	Перечисления.сабСуммСред.Среднее, 
	НоваяГруппа.Ссылка,
	,
	Новый Структура("НормаЗнак, НормаЧисло", ">", 0.9));
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Заемный капитал"));
	СтрокиЗнаменателя = Новый Массив;
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Собственный капитал"));
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Заемный капитал"));
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Кредиторская задолженность"));
	СоздатьПоказатель(
	"Коэффициент финансовой зависимости", 
	СтрокиЧислителя, 
	СтрокиЗнаменателя, 
	Перечисления.сабСуммСред.Среднее, 
	НоваяГруппа.Ссылка,
	,
	Новый Структура("НормаЗнак, НормаЧисло", ">", 0.5));

	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Собственный капитал"));
	СтрокиЗнаменателя = Новый Массив;
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Собственный капитал"));
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Заемный капитал"));
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Кредиторская задолженность"));
	СоздатьПоказатель(
	"Коэффициент автономии", 
	СтрокиЧислителя, 
	СтрокиЗнаменателя, 
	Перечисления.сабСуммСред.Среднее, 
	НоваяГруппа.Ссылка,
	,
	Новый Структура("НормаЗнак, НормаЧисло", ">", 0.5));
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Собственный капитал"));
	СтрокиЗнаменателя = Новый Массив;
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Оборотные средства"));
	СоздатьПоказатель(
	"Коэффициент обеспеченности собственными оборотными средствами", 
	СтрокиЧислителя, 
	СтрокиЗнаменателя, 
	Перечисления.сабСуммСред.Среднее, 
	НоваяГруппа.Ссылка,
	,
	Новый Структура("НормаЗнак, НормаЧисло", ">", 0.2));

	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Заемный капитал"));
	СтрокиЗнаменателя = Новый Массив;
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Собственный капитал"));
	СоздатьПоказатель(
	"Коэффициент соотношения заемных и собственных средств", 
	СтрокиЧислителя, 
	СтрокиЗнаменателя, 
	Перечисления.сабСуммСред.Среднее, 
	НоваяГруппа.Ссылка,
	,
	Новый Структура("НормаЗнак, НормаЧисло", ">", 1));
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Оборотные средства"));
	СтрокиЗнаменателя = Новый Массив;
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Оборотные средства"));
	СоздатьПоказатель(
	"Коэффициент маневренности собственных средств", 
	СтрокиЧислителя, 
	СтрокиЗнаменателя, 
	Перечисления.сабСуммСред.Среднее, 
	НоваяГруппа.Ссылка,
	,
	Новый Структура("НормаЗнак, НормаЧисло", ">", 0.5));
	
	ТекГруппа = Справочники.сабФинансовыеПоказатели.НайтиПоНаименованию("Деловая активность", Истина);
	Если ЗначениеЗаполнено(ТекГруппа) Тогда
		НоваяГруппа = ТекГруппа.ПолучитьОбъект();
	Иначе
		НоваяГруппа = Справочники.сабФинансовыеПоказатели.СоздатьГруппу();
	КонецЕсли;
	НоваяГруппа.Наименование = "Деловая активность";
	НоваяГруппа.Порядок = 4;
	НоваяГруппа.Записать();
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Выручка"));
	СтрокиЗнаменателя = Новый Массив;
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Основные средства"));
	СоздатьПоказатель(
	"Коэффициент оборачиваемости основных средств", 
	СтрокиЧислителя, 
	СтрокиЗнаменателя, 
	Перечисления.сабСуммСред.Среднее, 
	НоваяГруппа.Ссылка);

	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Выручка"));
	СтрокиЗнаменателя = Новый Массив;
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Оборотные средства"));
	СоздатьПоказатель(
	"Коэффициент оборачиваемости оборотных средств", 
	СтрокиЧислителя, 
	СтрокиЗнаменателя, 
	Перечисления.сабСуммСред.Среднее, 
	НоваяГруппа.Ссылка);
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Выручка"));
	СтрокиЗнаменателя = Новый Массив;
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Запасы"));
	СоздатьПоказатель(
	"Коэффициент оборачиваемости запасов", 
	СтрокиЧислителя, 
	СтрокиЗнаменателя, 
	Перечисления.сабСуммСред.Среднее, 
	НоваяГруппа.Ссылка);
	
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Выручка"));
	СтрокиЗнаменателя = Новый Массив;
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Дебиторская задолженность"));
	СоздатьПоказатель(
	"Коэффициент оборачиваемости дебиторской задолженности", 
	СтрокиЧислителя, 
	СтрокиЗнаменателя, 
	Перечисления.сабСуммСред.Среднее, 
	НоваяГруппа.Ссылка);
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Выручка"));
	СтрокиЗнаменателя = Новый Массив;
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Кредиторская задолженность"));
	СоздатьПоказатель(
	"Коэффициент оборачиваемости кредиторской задолженности", 
	СтрокиЧислителя, 
	СтрокиЗнаменателя, 
	Перечисления.сабСуммСред.Среднее, 
	НоваяГруппа.Ссылка);
	
	ТекГруппа = Справочники.сабФинансовыеПоказатели.НайтиПоНаименованию("Рентабельность", Истина);
	Если ЗначениеЗаполнено(ТекГруппа) Тогда
		НоваяГруппа = ТекГруппа.ПолучитьОбъект();
	Иначе
		НоваяГруппа = Справочники.сабФинансовыеПоказатели.СоздатьГруппу();
	КонецЕсли;
	НоваяГруппа.Наименование = "Рентабельность";
	НоваяГруппа.Порядок = 5;
	НоваяГруппа.Записать();
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Прибыль"));
	СтрокиЗнаменателя = Новый Массив;
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Оборотные средства"));
	СоздатьПоказатель(
	"Рентабельность активов", 
	СтрокиЧислителя, 
	СтрокиЗнаменателя, 
	Перечисления.сабСуммСред.Сумма, 
	НоваяГруппа.Ссылка,
	,
	Новый Структура("НормаЗнак, НормаЧисло", ">", 0.3));
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Прибыль"));
	СтрокиЗнаменателя = Новый Массив;
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Выручка"));
	СоздатьПоказатель(
	"Рентабельность продаж", 
	СтрокиЧислителя, 
	СтрокиЗнаменателя, 
	Перечисления.сабСуммСред.Сумма, 
	НоваяГруппа.Ссылка,
	,
	Новый Структура("НормаЗнак, НормаЧисло", ">", 0.15));
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Прибыль"));
	СтрокиЗнаменателя = Новый Массив;
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Собственный капитал"));
	СоздатьПоказатель(
	"Рентабельность собственного капитала", 
	СтрокиЧислителя, 
	СтрокиЗнаменателя, 
	Перечисления.сабСуммСред.Среднее, 
	НоваяГруппа.Ссылка,
	,
	Новый Структура("НормаЗнак, НормаЧисло", ">", 0.3));
	
	
КонецПроцедуры

Процедура СоздатьПоказатель(Наименование, СтрокиЧислителя, СтрокиЗнаменателя, ПромежЗначения, Родитель, Знак = "Плюс", Норматив = Неопределено)
	
	Если Норматив = Неопределено Тогда
		Норматив = Новый Структура;	
	КонецЕсли;
	
	ТекЭлемент = Справочники.сабФинансовыеПоказатели.НайтиПоНаименованию(Наименование, Истина);
	Если ЗначениеЗаполнено(ТекЭлемент) Тогда
		НовыйЭлемент = ТекЭлемент.ПолучитьОбъект();
	Иначе
		НовыйЭлемент = Справочники.сабФинансовыеПоказатели.СоздатьЭлемент();
	КонецЕсли;
	НовыйЭлемент.Наименование = Наименование;
	НовыйЭлемент.Родитель = Родитель;
	НовыйЭлемент.РасчетныеДанные.Очистить();
	Если ТипЗнч(СтрокиЧислителя) = Тип("Массив") Тогда
		Для каждого ТекСтрока Из СтрокиЧислителя Цикл
			НоваяСтрока = НовыйЭлемент.РасчетныеДанные.Добавить();
			Если ТекСтрока.Тип = "Счет" Тогда
				НоваяСтрока.Источник = ПланыСчетов.Учетный.НайтиПоКоду(ТекСтрока.Источник);
				НоваяСтрока.ТипДанных = Перечисления.сабТипыДанныхПоСчету[ТекСтрока.ТипДанных];
				НоваяСтрока.ВидОстатка = Перечисления.УЧ_ВидОстаткаПоСчету[ТекСтрока.ВидОстатка];
			ИначеЕсли ТекСтрока.Тип = "Статья" Тогда
				НоваяСтрока.Источник = Справочники.Д_СтатьиОборотки.НайтиПоНаименованию(ТекСтрока.Источник, Истина);
			ИначеЕсли ТекСтрока.Тип = "ФинП" Тогда
				НоваяСтрока.Источник = Справочники.сабФинансовыеПоказатели.НайтиПоНаименованию(ТекСтрока.Источник, Истина);
			КонецЕсли;
			НоваяСтрока.Знак = Знак;
		КонецЦикла;
	КонецЕсли;
	НовыйЭлемент.РасчетныеДанныеЗнаменатель.Очистить();
	Если ТипЗнч(СтрокиЗнаменателя) = Тип("Массив") Тогда
		Для каждого ТекСтрока Из СтрокиЗнаменателя Цикл
			НоваяСтрока = НовыйЭлемент.РасчетныеДанныеЗнаменатель.Добавить();
			Если ТекСтрока.Тип = "Счет" Тогда
				НоваяСтрока.Источник = ПланыСчетов.Учетный.НайтиПоКоду(ТекСтрока.Источник);
				НоваяСтрока.ТипДанных = Перечисления.сабТипыДанныхПоСчету[ТекСтрока.ТипДанных];
				НоваяСтрока.ВидОстатка = Перечисления.УЧ_ВидОстаткаПоСчету[ТекСтрока.ВидОстатка];
			ИначеЕсли ТекСтрока.Тип = "Статья" Тогда
				НоваяСтрока.Источник = Справочники.Д_СтатьиОборотки.НайтиПоНаименованию(ТекСтрока.Источник, Истина);
			ИначеЕсли ТекСтрока.Тип = "ФинП" Тогда
				НоваяСтрока.Источник = Справочники.сабФинансовыеПоказатели.НайтиПоНаименованию(ТекСтрока.Источник, Истина);
			КонецЕсли;
			НоваяСтрока.Знак = Знак;
		КонецЦикла;
	КонецЕсли;
	НовыйЭлемент.РасчетПромежуточныхЗначений = ПромежЗначения;
	ЗаполнитьЗначенияСвойств(НовыйЭлемент, Норматив);
    НовыйЭлемент.Записать();

КонецПроцедуры

Процедура ДобавитьИсториюИзмененийБУХДока(Форма, Группа) Экспорт
	
	Если Не ЗначениеЗаполнено(Форма.ДокументБУ) Тогда
		Возврат;	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипОбъекта = Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоРеквизиту("Имя", Форма.ДокументБУ.Метаданные().Имя);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиВерсионированияОбъектов.ТипОбъекта КАК ТипОбъекта,
	|	НастройкиВерсионированияОбъектов.Использовать КАК Использовать
	|ИЗ
	|	РегистрСведений.НастройкиВерсионированияОбъектов КАК НастройкиВерсионированияОбъектов
	|ГДЕ
	|	НастройкиВерсионированияОбъектов.ТипОбъекта = &ТипОбъекта";
	
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	ВклВерс = Истина;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ВклВерс = ВыборкаДетальныеЗаписи.Использовать;
	КонецЦикла;
	
	КолВерсСтруктура = ПолучитьКоличествоВерсий(Форма.ДокументБУ);
	КолВерс = КолВерсСтруктура.КоличествоИзмененныхВерсий;

	Если ВклВерс = Истина И КолВерс > 0 Тогда
		НоваяКоманда = Форма.Команды.Добавить("КомандаПоказатьИзмененияВерсий");
		НоваяКоманда.Действие = "ПоказатьИзмененияВерсий";//Имя процедуры
		НоваяКоманда.Заголовок = "Показать изменения";
		
		НовыйЭлемент = Форма.Элементы.Добавить("ЭлементПоказатьИзмененияВерсий",
		Тип("КнопкаФормы"),
		Группа);
		НовыйЭлемент.ИмяКоманды = "КомандаПоказатьИзмененияВерсий";
		НовыйЭлемент.Вид = ВидКнопкиФормы.Гиперссылка;
		НовыйЭлемент.Картинка = БиблиотекаКартинок.ИсторияДанных;
		
	Иначе
		Если Не Форма.Элементы.Найти("ЭлементПоказатьИзмененияВерсий") = Неопределено Тогда
			Форма.Элементы.Удалить(Форма.Элементы.ЭлементПоказатьИзмененияВерсий);
		КонецЕсли;
		Если Не Форма.Элементы.Найти("ЭлементПерезаполнитьПоДокументу") = Неопределено Тогда
			Форма.Элементы.Удалить(Форма.Элементы.ЭлементПерезаполнитьПоДокументу);
		КонецЕсли;
	КонецЕсли;
	
	//05.12.23 Белых - показываем команду обновления всегда, кроме ПервичныйУУ
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	сабОбработкаДокументов.ДокументБУ КАК ДокументБУ,
	|	сабОбработкаДокументов.ДокументУУ КАК ДокументУУ
	|ИЗ
	|	РегистрСведений.сабОбработкаДокументов КАК сабОбработкаДокументов
	|ГДЕ
	|	сабОбработкаДокументов.ДокументБУ = &ДокументБУ
	|	И сабОбработкаДокументов.ПервичныйДокументУУ = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ДокументБУ", Форма.ДокументБУ);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество() Тогда
		
		НоваяКоманда = Форма.Команды.Добавить("КомандаПерезаполнитьПоДокументу");
		НоваяКоманда.Действие = "ПерезаполнитьПоДокументу";//Имя процедуры
		НоваяКоманда.Заголовок = "Перезаполнить";
		
		НовыйЭлемент = Форма.Элементы.Добавить("ЭлементПерезаполнитьПоДокументу",
		Тип("КнопкаФормы"),
		Группа);
		НовыйЭлемент.ИмяКоманды = "КомандаПерезаполнитьПоДокументу";
		НовыйЭлемент.Вид = ВидКнопкиФормы.Гиперссылка;
		НовыйЭлемент.Картинка = БиблиотекаКартинок.Обновить;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

Процедура ДобавитьИсториюИзмененийУУДока(Форма, Группа) Экспорт
	
	Попытка
		Если Не ЗначениеЗаполнено(Форма.ДокументУУ) Тогда
			Возврат;	
		КонецЕсли;
	Исключение
		Возврат;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипОбъекта = "Документ."+Форма.ДокументУУ.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыДляРегистрацииИзмененийИБ.Объект КАК Объект,
	|	ОбъектыДляРегистрацииИзмененийИБ.Регистрировать КАК Использовать
	|ИЗ
	|	РегистрСведений.ОбъектыДляРегистрацииИзмененийИБ КАК ОбъектыДляРегистрацииИзмененийИБ
	|ГДЕ
	|	ОбъектыДляРегистрацииИзмененийИБ.Объект = &ТипОбъекта";
	
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	ВклВерс = Истина;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ВклВерс = ВыборкаДетальныеЗаписи.Использовать;
	КонецЦикла;
	
	КолВерсСтруктура = ПолучитьКоличествоВерсийУУ(Форма.ДокументУУ);
	КолВерс = КолВерсСтруктура.КоличествоИзмененныхВерсий;
	
	Если ВклВерс = Истина И КолВерс > 0 Тогда
		
		Если Форма.Элементы.Найти("НадписьУУИзменения") = Неопределено Тогда
			НовыйЭлемент = Форма.Элементы.Добавить("НадписьУУИзменения", Тип("ДекорацияФормы"), Группа);
			НовыйЭлемент.Заголовок = "Есть изменения УУ документа-основания!";
			НовыйЭлемент.ЦветТекста = Новый Цвет(255,0,0);
		КонецЕсли;

		//Если Форма.Элементы.Найти("ЭлементПоказатьИзмененияВерсий") = Неопределено Тогда
		//	
		//	НоваяКоманда = Форма.Команды.Добавить("КомандаПоказатьИзмененияВерсий");
		//	НоваяКоманда.Действие = "ПоказатьИзмененияВерсий";//Имя процедуры
		//	НоваяКоманда.Заголовок = "Показать изменения";
		//	
		//	НовыйЭлемент = Форма.Элементы.Добавить("ЭлементПоказатьИзмененияВерсий",
		//	Тип("КнопкаФормы"),
		//	Группа);
		//	НовыйЭлемент.ИмяКоманды = "КомандаПоказатьИзмененияВерсий";
		//	НовыйЭлемент.Вид = ВидКнопкиФормы.Гиперссылка;
		//	НовыйЭлемент.Картинка = БиблиотекаКартинок.ИсторияДанных;
		//	
		//КонецЕсли;
		//
		//Если Форма.Элементы.Найти("ЭлементПерезаполнитьПоДокументу") = Неопределено Тогда
		//	
		//	НоваяКоманда = Форма.Команды.Добавить("КомандаПерезаполнитьПоДокументу");
		//	НоваяКоманда.Действие = "ПерезаполнитьПоДокументу";//Имя процедуры
		//	НоваяКоманда.Заголовок = "Перезаполнить";
		//	
		//	НовыйЭлемент = Форма.Элементы.Добавить("ЭлементПерезаполнитьПоДокументу",
		//	Тип("КнопкаФормы"),
		//	Группа);
		//	НовыйЭлемент.ИмяКоманды = "КомандаПерезаполнитьПоДокументу";
		//	НовыйЭлемент.Вид = ВидКнопкиФормы.Гиперссылка;
		//	НовыйЭлемент.Картинка = БиблиотекаКартинок.Обновить;
		//	
		//КонецЕсли;
		
	Иначе
		Если Не Форма.Элементы.Найти("НадписьУУИзменения") = Неопределено Тогда
			Форма.Элементы.Удалить(Форма.Элементы.НадписьУУИзменения);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

Функция ПолучитьКоличествоВерсийУУ(ДокументУУ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	сабОбработкаДокументов.ДокументБУ КАК ДокументБУ,
	               |	сабОбработкаДокументов.ДокументУУ КАК ДокументУУ,
	               |	сабОбработкаДокументов.ДатаОбработки КАК ДатаОбработки
	               |ИЗ
	               |	РегистрСведений.сабОбработкаДокументов КАК сабОбработкаДокументов
	               |ГДЕ
	               |	сабОбработкаДокументов.ДокументУУ = &ДокументУУ
	               |	И сабОбработкаДокументов.ПервичныйДокументУУ = ИСТИНА
	               |	И сабОбработкаДокументов.Модифицирован = ИСТИНА";
	
	Запрос.УстановитьПараметр("ДокументУУ", ДокументУУ);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДатаОбработки = Выборка.ДатаОбработки;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИзмененияРеквизитовОбъектовИБ.Объект КАК Объект,
		|	Максимум(ИзмененияРеквизитовОбъектовИБ.Период) КАК ДатаВерсии,
		|   Сумма(1) КАК КоличествоВерсий,
		| 	Сумма(Выбор Когда ИзмененияРеквизитовОбъектовИБ.Период > &ДатаОбработки Тогда 1 Иначе 0 Конец) КАК КоличествоИзмененныхВерсий
		|ИЗ
		|	РегистрСведений.ИзмененияРеквизитовОбъектовИБ КАК ИзмененияРеквизитовОбъектовИБ
		|ГДЕ
		|	ИзмененияРеквизитовОбъектовИБ.Объект = &Объект
		|
		|СГРУППИРОВАТЬ ПО
		|ИзмененияРеквизитовОбъектовИБ.Объект";
		
		Запрос.УстановитьПараметр("Объект", ДокументУУ);
		Запрос.УстановитьПараметр("ДатаДока", ДокументУУ.Дата);
		Запрос.УстановитьПараметр("ДатаОбработки", ДатаОбработки);
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		Для каждого ТекСтрока Из РезультатЗапроса Цикл
			Возврат Новый Структура("КоличествоВерсий, КоличествоИзмененныхВерсий", ТекСтрока.КоличествоВерсий, ?(ТекСтрока.КоличествоИзмененныхВерсий, ТекСтрока.КоличествоИзмененныхВерсий + 1, 0));
		КонецЦикла;
		Возврат Новый Структура("КоличествоВерсий, КоличествоИзмененныхВерсий", 0, 0);
		
	КонецЦикла;
	
	Возврат Новый Структура("КоличествоВерсий, КоличествоИзмененныхВерсий", 0, 0);
	
КонецФункции

Функция ПолучитьКоличествоВерсий(ДокументБУ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	сабОбработкаДокументов.ДокументБУ КАК ДокументБУ,
	               |	сабОбработкаДокументов.ДокументУУ КАК ДокументУУ,
	               |	сабОбработкаДокументов.ДатаОбработки КАК ДатаОбработки
	               |ИЗ
	               |	РегистрСведений.сабОбработкаДокументов КАК сабОбработкаДокументов
	               |ГДЕ
	               |	сабОбработкаДокументов.ДокументБУ = &ДокументБУ
	               |	И сабОбработкаДокументов.Модифицирован = ИСТИНА
	               |	И сабОбработкаДокументов.ПервичныйДокументУУ = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ДокументБУ", ДокументБУ);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДатаОбработки = Выборка.ДатаОбработки;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВерсииОбъектов.Объект КАК Объект,
		|	Максимум(ВерсииОбъектов.ДатаВерсии) КАК ДатаВерсии,
		|   Сумма(1) КАК КоличествоВерсий,
		| 	Сумма(Выбор Когда ВерсииОбъектов.ДатаВерсии > &ДатаОбработки Тогда 1 Иначе 0 Конец) КАК КоличествоИзмененныхВерсий
		|ИЗ
		|	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
		|ГДЕ
		|	ВерсииОбъектов.Объект = &Объект
		|
		|СГРУППИРОВАТЬ ПО
		|ВерсииОбъектов.Объект";
		
		Запрос.УстановитьПараметр("Объект", ДокументБУ);
		Запрос.УстановитьПараметр("ДатаДока", ДокументБУ.Дата);
		Запрос.УстановитьПараметр("ДатаОбработки", ДатаОбработки);
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		Для каждого ТекСтрока Из РезультатЗапроса Цикл
			ТекСтрока.КоличествоИзмененныхВерсий = ?(ТекСтрока.КоличествоИзмененныхВерсий, ТекСтрока.КоличествоИзмененныхВерсий + 1, 0);
			Если ТекСтрока.КоличествоИзмененныхВерсий > ТекСтрока.КоличествоВерсий Тогда
				ТекСтрока.КоличествоИзмененныхВерсий = ТекСтрока.КоличествоВерсий;		
			КонецЕсли;			
			Возврат Новый Структура("КоличествоВерсий, КоличествоИзмененныхВерсий", ТекСтрока.КоличествоВерсий, ТекСтрока.КоличествоИзмененныхВерсий);
		КонецЦикла;
		Возврат Новый Структура("КоличествоВерсий, КоличествоИзмененныхВерсий", 0, 0);
		
	КонецЦикла;
	
	Возврат Новый Структура("КоличествоВерсий, КоличествоИзмененныхВерсий", 0, 0);
	
КонецФункции

Функция КонтрагентВОрганизациях(Контрагент, Источник, ДанныеЗаполнения) Экспорт
	
	Если Не ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат Новый Структура("ЭтоОрганизация, Организация, Предприятие", Ложь, Неопределено, Неопределено);	
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(Контрагент.ЭтоОрганизация) И Контрагент.ОрганизацияВГОВНХ Тогда
	Если Контрагент.ОрганизацияВГОВНХ Тогда
		Возврат Новый Структура("ЭтоОрганизация, Организация, Предприятие", Истина, Контрагент.ЭтоОрганизация, 
		?(ЗначениеЗаполнено(Контрагент.ЭтоОрганизация),Контрагент.ЭтоОрганизация.Предприятие,Справочники.Предприятия.ПустаяСсылка()));	
	КонецЕсли;
	
	КонтрагентИНН = Контрагент.ИНН;
	Если Не ЗначениеЗаполнено(КонтрагентИНН) Тогда
		Возврат Новый Структура("ЭтоОрганизация, Организация, Предприятие", Ложь, Неопределено, Неопределено);	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Организации.Ссылка КАК Организация,
	               |	Организации.Предприятие КАК Предприятие
	               |ИЗ
	               |	Справочник.Организации КАК Организации
	               |ГДЕ
	               |	Организации.ИНН = &ИНН";
	
	Запрос.УстановитьПараметр("ИНН", КонтрагентИНН);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокиИсключений = Источник.Предприятие.УчетнаяПолитика.ИсключенияВГО.НайтиСтроки(Новый Структура("Предприятие1, Предприятие2", Источник.Предприятие, Выборка.Предприятие));
		Если СтрокиИсключений.Количество() Тогда
			Возврат Новый Структура("ЭтоОрганизация, Организация, Предприятие", Ложь, Неопределено, Неопределено);	
		КонецЕсли;
		
		Возврат Новый Структура("ЭтоОрганизация, Организация, Предприятие", Истина, Выборка.Организация, Выборка.Предприятие);	
	КонецЦикла;
	
	Возврат Новый Структура("ЭтоОрганизация, Организация, Предприятие", Ложь, Неопределено, Неопределено);	
	
КонецФункции // ()

Функция ПолучитьДатуПроизводстваДляСерииНоменклатуры(СерияНоменклатурыСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СерииНоменклатуры.ДатаПроизводства КАК ДатаПроизводства
	|ИЗ
	|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|ГДЕ
	|	СерииНоменклатуры.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",СерияНоменклатурыСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Дата(1,1,1);
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();  
		Возврат Выборка.ДатаПроизводства;
	КонецЕсли;;
	
КонецФункции

Функция ПодобратьСчетДляУЧВозврат(НоваяСтрока,ТекСтрокаБух,ВыборкаСоотв)
	
	Если ЗначениеЗаполнено(НоваяСтрока.ДокументРеализации) И ТипЗнч(НоваяСтрока.ДокументРеализации) = Тип("ДокументСсылка.УЧ_Реализация") Тогда
		Если НоваяСтрока.ДокументРеализации.Товары.Количество() >= НоваяСтрока.НомерСтроки Тогда
			СтрокаПоИндексу = НоваяСтрока.ДокументРеализации.Товары[НоваяСтрока.НомерСтроки-1];
			Если СтрокаПоИндексу.Номенклатура = НоваяСтрока.Номенклатура Тогда
				Если ЗначениеЗаполнено(СтрокаПоИндексу.Счет) Тогда
					Возврат СтрокаПоИндексу.Счет;
				КонецЕсли; 
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	Учетный.СчетКт КАК СчетКт
				|ИЗ
				|	РегистрБухгалтерии.Учетный КАК Учетный
				|ГДЕ
				|	Учетный.Регистратор = &Регистратор
				|	И Учетный.НомерСтрокиДок = &НомерСтрокиДок
				|	И Учетный.СчетКт В ИЕРАРХИИ(&МассивСчетов)";
				МассивСчетов = Новый Массив;
				МассивСчетов.Добавить(ПланыСчетов.Учетный.Счет10());
				МассивСчетов.Добавить(ПланыСчетов.Учетный.Счет41());
				МассивСчетов.Добавить(ПланыСчетов.Учетный.Счет43());
				МассивСчетов.Добавить(ПланыСчетов.Учетный.Счет01());
				
				Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
				Запрос.УстановитьПараметр("НомерСтрокиДок", СтрокаПоИндексу.НомерСтроки);
				Запрос.УстановитьПараметр("Регистратор", НоваяСтрока.ДокументРеализации);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				Выборка = РезультатЗапроса.Выбрать();
				Если Выборка.Следующий() Тогда
					Возврат Выборка.СчетКт;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		СтруктураДляПоиска = Новый Структура("Номенклатура",НоваяСтрока.Номенклатура);
		МассивНайденныхСтрокПоНоменклатуре = НоваяСтрока.ДокументРеализации.Товары.НайтиСтроки(СтруктураДляПоиска); 
		Если МассивНайденныхСтрокПоНоменклатуре.Количество() > 0 Тогда
			Если ЗначениеЗаполнено(МассивНайденныхСтрокПоНоменклатуре[0].Счет) Тогда
				Возврат МассивНайденныхСтрокПоНоменклатуре[0].Счет;
			КонецЕсли;
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Учетный.СчетКт КАК СчетКт
			|ИЗ
			|	РегистрБухгалтерии.Учетный КАК Учетный
			|ГДЕ
			|	Учетный.Регистратор = &Регистратор
			|	И Учетный.НомерСтрокиДок = &НомерСтрокиДок
			|	И Учетный.СчетКт В ИЕРАРХИИ(&МассивСчетов)";
			МассивСчетов = Новый Массив;
			МассивСчетов.Добавить(ПланыСчетов.Учетный.Счет10());
			МассивСчетов.Добавить(ПланыСчетов.Учетный.Счет41());
			МассивСчетов.Добавить(ПланыСчетов.Учетный.Счет43());
			МассивСчетов.Добавить(ПланыСчетов.Учетный.Счет01());
			
			Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
			Запрос.УстановитьПараметр("НомерСтрокиДок", МассивНайденныхСтрокПоНоменклатуре[0].НомерСтроки);
			Запрос.УстановитьПараметр("Регистратор", НоваяСтрока.ДокументРеализации);
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				Возврат Выборка.СчетКт;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекСтрокаБух.СчетУчета) Тогда
		МассивНайденыхСтрокСчета = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ",ТекСтрокаБух.СчетУчета));	
		Если МассивНайденыхСтрокСчета.Количество() > 0 Тогда
			Возврат МассивНайденыхСтрокСчета[0].СчетУУ; 
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПланыСчетов.Учетный.ПустаяСсылка();
	
КонецФункции

Процедура ЗаполнитьУЧ_Реализацию2(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)

	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_Реализация") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, РучнаяКорректировка");
		Источник.Дата = ДанныеЗаполнения.Дата;
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		Источник.Валюта = ДанныеЗаполнения.ВалютаДокумента;
		Если ЗначениеЗаполнено(Источник.Валюта) И Не Источник.Валюта = УЧ_Сервер.НациональнаяВалюта() Тогда
			Источник.ФлагВалюты = Истина;
			Источник.Курс = ДанныеЗаполнения.КурсВзаиморасчетов;
		КонецЕсли;
		ОрганизацияКонтрагент = КонтрагентВОрганизациях(Источник.Контрагент, Источник, ДанныеЗаполнения);
		
		Если ОрганизацияКонтрагент.ЭтоОрганизация Тогда //ВНХ
			Источник.Счет = ПланыСчетов.Учетный.Счет7902(Источник.Предприятие);
			Источник.Контрагент = ОрганизацияКонтрагент.Организация;
			Источник.Договор = ДанныеЗаполнения.ДоговорКонтрагента.УЧ_Договор;
		Иначе
			Источник.Счет = ДанныеЗаполнения.ДоговорКонтрагента.СчетВзаиморасчетов;
			Если Не ЗначениеЗаполнено(Источник.Счет) Тогда
				Источник.Счет = ПланыСчетов.Учетный.НайтиПоКоду("62.01");		
			КонецЕсли;
			//Источник.ПодразделениеКонтрагента = ДанныеЗаполнения.Заказ.ПодразделениеКонтрагента;
			Источник.Договор = ДанныеЗаполнения.ДоговорКонтрагента;
		КонецЕсли;
		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.Организация); 
		Если ЗначениеЗаполнено(СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации)) Тогда
			Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации);
		КонецЕсли;
		Источник.УчитыватьНДС = Истина;
		СуммаВключаетНДС = ДанныеЗаполнения.СуммаВключаетНДС;
		
		ВыделятьНДС = Источник.Предприятие.УчетнаяПолитика.УчетНДС;
		Если Не ВыделятьНДС Тогда
			Источник.УчитыватьНДС = Ложь;
		Иначе
			Источник.СуммаВключаетНДС = Истина;
		КонецЕсли;
		
		РеквСФВыд = УчетНДСПереопределяемый.РеквизитыДляНадписиОСчетеФактуреВыданном(ДанныеЗаполнения,);
		Если РеквСФВыд <> Неопределено Тогда
			
			Источник.ДатаСчетФактуры = РеквСФВыд.ДатаСчетаФактуры;
			Источник.НомерСчетФактуры = РеквСФВыд.НомерСчетаФактуры;
			Источник.ИсправлениеСФ = РеквСФВыд.Исправление;
			
		КонецЕсли;
		
		Источник.Товары.Очистить();
		Источник.ПрочиеНачисления.Очистить();
		Источник.Услуги.Очистить();
		
		Счет9001 = ПланыСчетов.Учетный.Счет9001();
		Для каждого ТекСтрока Из ДанныеЗаполнения.Услуги Цикл
			НоваяСтрока = Источник.Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.Счет90 = Счет9001;
			НоваяСтрока.Субконто1 = ТекСтрока.Номенклатура;
			НоваяСтрока.СуммаОтгрузки = ТекСтрока.Сумма;
			Источник.ВидОперации = Перечисления.ВидыОперацийРеализация.Услуги;
			Если (НЕ СуммаВключаетНДС И (НЕ Источник.УчитыватьНДС Или ВыделятьНДС)) Тогда
				НоваяСтрока.Сумма = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
				НоваяСтрока.СуммаОтгрузки = НоваяСтрока.Сумма;
				НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
			КонецЕсли;
			
			НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрока.СтавкаНДС);
			//НоваяСтрока.СодержаниеУслуги = ТекСтрока.Содержание;
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ФормаДокументаУУОбработкаБУПередЗаписью(ФормаДокументаУУ, ТекущийДокументУУ) Экспорт
	
	Если БюджетныйНаСервере.ЕстьСвойствоОбъекта(ФормаДокументаУУ, "ДокументБУ") И ЗначениеЗаполнено(ФормаДокументаУУ.ДокументБУ) 
		И Не ТекущийДокументУУ.ДополнительныеСвойства.Свойство("ДокументБУ") Тогда 
		
		ТекущийДокументУУ.ДополнительныеСвойства.Вставить("ДокументБУ", ФормаДокументаУУ.ДокументБУ);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСоответствиеОрганизацийПодразделений() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтруктураПредприятия.Организация КАК ПодразделениеОрганизации,
	               |	СтруктураПредприятия.Ссылка КАК ПодразделениеПредприятия
	               |ИЗ
	               |	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	               |ГДЕ
	               |	НЕ СтруктураПредприятия.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПодразделенияОрганизаций.Ссылка,
	               |	ВЫБОР
	               |		КОГДА ПодразделенияОрганизаций.сабПодразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	               |			ТОГДА СтруктураПредприятия.Ссылка
	               |		ИНАЧЕ ПодразделенияОрганизаций.сабПодразделение
	               |	КОНЕЦ
	               |ИЗ
	               |	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	               |		ПО ПодразделенияОрганизаций.Ссылка = СтруктураПредприятия.ПодразделениеОрганизации
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Организации.Ссылка,
	               |	Организации.сабПодразделение
	               |ИЗ
	               |	Справочник.Организации КАК Организации
	               |ГДЕ
	               |	НЕ Организации.сабПодразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)";
	
	Результат = Запрос.Выполнить();
	ВыборкаПодразделений = Результат.Выгрузить();
	СоотвПодразделений = Новый Соответствие;
	Для каждого ТекСтрока Из ВыборкаПодразделений Цикл
		СоотвПодразделений.Вставить(ТекСтрока.ПодразделениеОрганизации, ТекСтрока.ПодразделениеПредприятия);	
	КонецЦикла;
	
	Возврат СоотвПодразделений;

КонецФункции // ()

