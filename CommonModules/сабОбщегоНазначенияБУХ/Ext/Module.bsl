
Процедура сабОбработкиЗаполненияУчпетныхДокументовОбработкаЗаполнения(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	сабСоответствиеСчетовИСубконто.СчетБУ КАК СчетБУ,
	               |	сабСоответствиеСчетовИСубконто.СубконтоБУ1 КАК СубконтоБУ1,
	               |	сабСоответствиеСчетовИСубконто.СубконтоБУ2 КАК СубконтоБУ2,
	               |	сабСоответствиеСчетовИСубконто.СубконтоБУ3 КАК СубконтоБУ3,
	               |	сабСоответствиеСчетовИСубконто.СчетУУ КАК СчетУУ,
	               |	сабСоответствиеСчетовИСубконто.СубконтоУУ1 КАК СубконтоУУ1,
	               |	сабСоответствиеСчетовИСубконто.СубконтоУУ2 КАК СубконтоУУ2,
	               |	сабСоответствиеСчетовИСубконто.СубконтоУУ3 КАК СубконтоУУ3,
	               |	сабСоответствиеСчетовИСубконто.Комментарии КАК Комментарии,
	               |	сабСоответствиеСчетовИСубконто.ЗначениеСубконтоУУ1 КАК ЗначениеСубконтоУУ1,
	               |	сабСоответствиеСчетовИСубконто.ЗначениеСубконтоУУ2 КАК ЗначениеСубконтоУУ2,
	               |	сабСоответствиеСчетовИСубконто.ЗначениеСубконтоУУ3 КАК ЗначениеСубконтоУУ3
	               |ИЗ
	               |	РегистрСведений.сабСоответствиеСчетовИСубконто КАК сабСоответствиеСчетовИСубконто";
	
	Результат = Запрос.Выполнить();
	ВыборкаСоотв = Результат.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПодразделенияОрганизаций.Ссылка КАК ПодразделениеОрганизации,
	               |	СтруктураПредприятия.Ссылка КАК ПодразделениеПредприятия
	               |ИЗ
	               |	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	               |		ПО ПодразделенияОрганизаций.Ссылка = СтруктураПредприятия.ПодразделениеОрганизации";
	
	Результат = Запрос.Выполнить();
	ВыборкаПодразделений = Результат.Выгрузить();
	СоотвПодразделений = Новый Соответствие;
	Для каждого ТекСтрока Из ВыборкаПодразделений Цикл
		СоотвПодразделений.Вставить(ТекСтрока.ПодразделениеОрганизации, ТекСтрока.ПодразделениеПредприятия);	
	КонецЦикла; 

	ЗаполнитьУЧ_Реализацию(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);
	
	ЗаполнитьУЧ_РеализациюZ(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);
	
	ЗаполнитьУЧ_РеализациюZРозн(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);
	
	ЗаполнитьУЧ_Поступление(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);

	ЗаполнитьУЧ_ДвижДССписРс(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);
	
	ЗаполнитьУЧ_ДвижДСПостРс(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);

	ЗаполнитьУЧ_ДвижДСРКО(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);
	
	ЗаполнитьУЧ_ДвижДСПКО(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);
		
	ЗаполнитьУЧ_Операция(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);
	
	ЗаполнитьУЧ_Списание(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);
	
	ЗаполнитьУЧ_Списание2(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);
	
	ЗаполнитьУЧ_ПеремещениеМатериаловВПроизводство(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);
	
	ЗаполнитьУЧ_ПеремещениеТоваров(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);
	
	ЗаполнитьУЧ_ВыпускПродукции(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);

    ЗаполнитьУЧ_АвансовыйОтчет(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);
	
	ЗаполнитьУЧ_Возврат(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);
	
	ЗаполнитьУЧ_ВозвратТоваровПоставщику(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);

	ЗаполнитьУЧ_КорректировкаПоступления(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);
	
	ЗаполнитьУЧ_КорректировкаРеализации(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений);
	
	ЗаполнитьУЧ_Оприходование(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений); 
	
КонецПроцедуры

Процедура ЗаполнитьУЧ_ВыпускПродукции(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_ВыпускПродукции") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") Тогда
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, РучнаяКорректировка");
		Источник.Дата = ДанныеЗаполнения.Дата;
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации);
				
		Если ДанныеЗаполнения.Материалы.Количество() Тогда
			Источник.ВидОперации = Перечисления.ВидыОперацииВыпускаПродукции.ПроизводствоПоСпецификации;
		Иначе	
			Источник.ВидОперации = Перечисления.ВидыОперацииВыпускаПродукции.Производство;
		КонецЕсли;
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.Продукция Цикл
			НоваяСтрока = Источник.ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.Склад = Источник.Склад;
			НоваяСтрока.Подразделение = Источник.Подразделение;
			НоваяСтрока.УИД = Новый УникальныйИдентификатор;
			
			НайденныеМатериалы = ДанныеЗаполнения.Материалы.НайтиСтроки(Новый Структура("Продукция", ТекСтрока.Номенклатура)); 
			Для каждого ТекСтрокаМатер Из НайденныеМатериалы Цикл
				НоваяСтрокаМатер = Источник.Материалы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаМатер, ТекСтрокаМатер);
				НоваяСтрокаМатер.Материал = ТекСтрокаМатер.Номенклатура;
				НоваяСтрокаМатер.УИДТЧ = НоваяСтрока.УИД;
				НоваяСтрокаМатер.Склад = Источник.Склад;
				
				Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрокаМатер.Счет));
				Для каждого ТекСчет Из Соотв Цикл
					НоваяСтрокаМатер.СчетСписания = ТекСчет.СчетУУ;
					Прервать;
				КонецЦикла; 
				
			КонецЦикла;
			
		КонецЦикла; 
		
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗаполнитьУЧ_РеализациюZ(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)

	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_Реализация") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, РучнаяКорректировка");
		Источник.ВидОперации = Перечисления.ВидыОперацийРеализация.ZОтчет;
		Источник.Дата = ДанныеЗаполнения.Дата;
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		//Источник.Договор = ДанныеЗаполнения.ДоговорКонтрагента;
		Источник.Счет = ПланыСчетов.Учетный.Счет6201();
		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации);
		
		Источник.УчитыватьНДС = Истина;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	РозничнаяПродажа.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РозничнаяПродажа КАК РозничнаяПродажа
		|ГДЕ
		|	РозничнаяПродажа.ОтчетОРозничныхПродажах = &ОтчетОРозничныхПродажах";
		
		Запрос.УстановитьПараметр("ОтчетОРозничныхПродажах", ДанныеЗаполнения.Ссылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Для каждого ТекСтрока Из Выборка.Ссылка.Товары Цикл
				НоваяСтрока = Источник.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				НоваяСтрока.СуммаОтгрузки = ТекСтрока.Сумма;
				Если НЕ Источник.СуммаВключаетНДС И НЕ Источник.УчитыватьНДС Тогда
					НоваяСтрока.Сумма = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
					НоваяСтрока.СуммаОтгрузки = ТекСтрока.Сумма;
					НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
				КонецЕсли;
				НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрока.СтавкаНДС);
				НоваяСтрока.Контрагент = Выборка.Ссылка.Контрагент;
				НоваяСтрока.Договор = Выборка.Ссылка.Договор;
			КонецЦикла; 
			
		КонецЦикла;
		
		Если Не Источник.Товары.Количество() Тогда
			Для каждого ТекСтрока Из ДанныеЗаполнения.Товары Цикл
				НоваяСтрока = Источник.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				НоваяСтрока.СуммаОтгрузки = ТекСтрока.Сумма;
				Если НЕ Источник.СуммаВключаетНДС И НЕ Источник.УчитыватьНДС Тогда
					НоваяСтрока.Сумма = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
					НоваяСтрока.СуммаОтгрузки = ТекСтрока.Сумма;
					НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
				КонецЕсли;
				НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрока.СтавкаНДС);
			КонецЦикла; 
		КонецЕсли;
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.Оплата Цикл
			НоваяСтрока = Источник.ОплатаПлатежнымиКартами.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.Сумма = ТекСтрока.СуммаОплаты;
		КонецЦикла;
		
		//Для каждого ТекСтрока Из ДанныеЗаполнения.ШтрихкодыУпаковок Цикл
		//	НоваяСтрока = Источник.ШтрихкодыУпаковок.Добавить();
		//	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		//КонецЦикла;	
		
		Источник.СуммаНаличногоРасчета = Источник.Товары.Итог("СуммаОтгрузки") - Источник.ОплатаПлатежнымиКартами.Итог("Сумма");
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьУЧ_РеализациюZРозн(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)

	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_Реализация") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РозничнаяПродажа") Тогда
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер");
		Источник.ВидОперации = Перечисления.ВидыОперацийРеализация.Товары;
		Источник.Дата = ДанныеЗаполнения.Дата;
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		//Источник.Договор = ДанныеЗаполнения.ДоговорКонтрагента;
		Источник.Счет = ПланыСчетов.Учетный.Счет6201();
		//Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации);
		Источник.ПодразделениеКонтрагента = ДанныеЗаполнения.Заказ.ПодразделениеКонтрагента;
		
		Источник.УчитыватьНДС = Истина;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	РозничнаяПродажа.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РозничнаяПродажа КАК РозничнаяПродажа
		|ГДЕ
		|	РозничнаяПродажа.Ссылка = &РозничнаяПродажа";
		
		Запрос.УстановитьПараметр("РозничнаяПродажа", ДанныеЗаполнения.Ссылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Для каждого ТекСтрока Из Выборка.Ссылка.Товары Цикл
				НоваяСтрока = Источник.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				НоваяСтрока.СуммаОтгрузки = ТекСтрока.Сумма;
				Если НЕ Источник.СуммаВключаетНДС И НЕ Источник.УчитыватьНДС Тогда
					НоваяСтрока.Сумма = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
					НоваяСтрока.СуммаОтгрузки = ТекСтрока.Сумма;
					НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
				КонецЕсли;
				НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрока.СтавкаНДС);
				НоваяСтрока.Контрагент = Выборка.Ссылка.Контрагент;
				НоваяСтрока.Договор = Выборка.Ссылка.Договор;
				Если ЗначениеЗаполнено(ТекСтрока.ШтрихкодУпаковки) Тогда
					НоваяСтрока = Источник.ШтрихкодыУпаковок.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				КонецЕсли;
			КонецЦикла; 
			
		КонецЦикла;
		
		
		//Если Не Источник.Товары.Количество() Тогда
		//	Для каждого ТекСтрока Из ДанныеЗаполнения.Товары Цикл
		//		НоваяСтрока = Источник.Товары.Добавить();
		//		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		//		НоваяСтрока.СуммаОтгрузки = ТекСтрока.Сумма;
		//		Если НЕ Источник.СуммаВключаетНДС И НЕ Источник.УчитыватьНДС Тогда
		//			НоваяСтрока.Сумма = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
		//			НоваяСтрока.СуммаОтгрузки = ТекСтрока.Сумма;
		//			НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
		//		КонецЕсли;
		//		НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрока.СтавкаНДС);
		//	КонецЦикла; 
		//КонецЕсли;
		
		//Для каждого ТекСтрока Из ДанныеЗаполнения.Оплата Цикл
		//	НоваяСтрока = Источник.ОплатаПлатежнымиКартами.Добавить();
		//	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		//	НоваяСтрока.Сумма = ТекСтрока.СуммаОплаты;
		//КонецЦикла;
		
		//Источник.СуммаНаличногоРасчета = Источник.Товары.Итог("СуммаОтгрузки") - Источник.ОплатаПлатежнымиКартами.Итог("Сумма");
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьУЧ_Реализацию(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)

	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_Реализация") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, РучнаяКорректировка");
		Источник.Дата = ДанныеЗаполнения.Дата;
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		Источник.Договор = ДанныеЗаполнения.ДоговорКонтрагента;
		Источник.Счет = ДанныеЗаполнения.ДоговорКонтрагента.СчетВзаиморасчетов;
		Если Не ЗначениеЗаполнено(Источник.Счет) Тогда
			Источник.Счет = ПланыСчетов.Учетный.НайтиПоКоду("62.01");		
		КонецЕсли;
		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации);
		Источник.ПодразделениеКонтрагента = ДанныеЗаполнения.Заказ.ПодразделениеКонтрагента;
		
		Источник.УчитыватьНДС = Истина;
		
		Источник.Товары.Очистить();
		Источник.ПрочиеНачисления.Очистить();
		Источник.Услуги.Очистить();
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Источник.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.СуммаОтгрузки = ТекСтрока.Сумма;
			Источник.ВидОперации = Перечисления.ВидыОперацийРеализация.Товары;
			Если НЕ Источник.СуммаВключаетНДС И НЕ Источник.УчитыватьНДС Тогда
				НоваяСтрока.Сумма = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
				НоваяСтрока.СуммаОтгрузки = НоваяСтрока.Сумма;
				НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
			КонецЕсли;
			НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрока.СтавкаНДС);
		КонецЦикла;
		Счет9001 = ПланыСчетов.Учетный.Счет9001();
		Для каждого ТекСтрока Из ДанныеЗаполнения.Услуги Цикл
			НоваяСтрока = Источник.Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.Счет90 = Счет9001;
			НоваяСтрока.Субконто1 = ТекСтрока.Номенклатура;
			НоваяСтрока.СуммаОтгрузки = ТекСтрока.Сумма;
			Источник.ВидОперации = Перечисления.ВидыОперацийРеализация.Услуги;
			Если НЕ Источник.СуммаВключаетНДС И НЕ Источник.УчитыватьНДС Тогда
				НоваяСтрока.Сумма = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
				НоваяСтрока.СуммаОтгрузки = НоваяСтрока.Сумма;
				НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
			КонецЕсли;
			
			НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрока.СтавкаНДС);
		КонецЦикла;
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.ШтрихкодыУпаковок Цикл
			НоваяСтрока = Источник.ШтрихкодыУпаковок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЦикла;	

		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьУЧ_Поступление(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_ПоступлениеТоваров") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, РучнаяКорректировка");
		Источник.Дата = ДанныеЗаполнения.Дата;
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		Источник.Договор = ДанныеЗаполнения.ДоговорКонтрагента;
		Источник.СчетКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента.СчетВзаиморасчетов;
		Если Не ЗначениеЗаполнено(Источник.СчетКонтрагента) Тогда
			Источник.СчетКонтрагента = ПланыСчетов.Учетный.НайтиПоКоду("60.01");		
		КонецЕсли;
		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации);
		
		//СуммаВключаетНДС = ДанныеЗаполнения.СуммаВключаетНДС;
		Источник.УчитыватьНДС = Истина;
		
		Если ДанныеЗаполнения.Товары.Количество() ИЛИ ДанныеЗаполнения.Топливо.Количество() Тогда
			Источник.ВидОперации = Перечисления.ВидыПоступлений.Поступление;
			Если ДанныеЗаполнения.Услуги.Количество() Тогда
				Источник.ВидОперации = Перечисления.ВидыПоступлений.ПоступлениеТМЦИУслуг;
			КонецЕсли;
		Иначе	
			Источник.ВидОперации = Перечисления.ВидыПоступлений.ПоступлениеУслуг;
		КонецЕсли;
		
		Источник.ТабличнаяЧасть.Очистить();
		Источник.ПрочиеНачисления.Очистить();
		Источник.Услуги.Очистить();

		Для каждого ТекСтрока Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Источник.ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.Склад = Источник.Склад;
			НоваяСтрока.Подразделение = Источник.Подразделение;
			
			Если НЕ Источник.СуммаВключаетНДС И НЕ Источник.УчитыватьНДС Тогда
				НоваяСтрока.Сумма = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
				НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
			КонецЕсли;
			
			Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрока.СчетУчета));
			Для каждого ТекСчет Из Соотв Цикл
				НоваяСтрока.СчетУчета = ТекСчет.СчетУУ;
				Прервать;
			КонецЦикла;
			
			НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрока.СтавкаНДС);
			
		КонецЦикла;
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.Топливо Цикл
			НоваяСтрока = Источник.ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.Склад = Источник.Склад;
			НоваяСтрока.Подразделение = Источник.Подразделение;
			
			Если НЕ Источник.СуммаВключаетНДС И НЕ Источник.УчитыватьНДС Тогда
				НоваяСтрока.Сумма = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
				НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
			КонецЕсли;
			
			НоваяСтрока.СчетУчета = ПланыСчетов.Учетный.НайтиПоКоду("10.03");
			Если Не ЗначениеЗаполнено(НоваяСтрока.СчетУчета) Тогда
				НоваяСтрока.СчетУчета = НоваяСтрока.Номенклатура.Счет10;
			КонецЕсли;
		
			НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрока.СтавкаНДС);
			
		КонецЦикла; 

		Для каждого ТекСтрока Из ДанныеЗаполнения.Услуги Цикл
			НоваяСтрока = Источник.Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			
			Если НЕ Источник.СуммаВключаетНДС И НЕ Источник.УчитыватьНДС Тогда
				НоваяСтрока.Сумма = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
				НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
			КонецЕсли;
			
			НоваяСтрока.Подразделение = Источник.Подразделение;
			Если Не ЗначениеЗаполнено(НоваяСтрока.Подразделение) Тогда
				НоваяСтрока.Подразделение = СоотвПодразделений.Получить(ТекСтрока.ПодразделениеЗатрат);
			КонецЕсли;
			
			НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрока.СтавкаНДС);
			
			Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрока.СчетЗатрат));
			Для каждого ТекСчет Из Соотв Цикл
				НоваяСтрока.СчетЗатрат = ТекСчет.СчетУУ;
				ИндексСубконто = 0;
				Для каждого ТекСубконто Из ТекСчет.СчетУУ.ВидыСубконто Цикл
					ИндексСубконто = ИндексСубконто + 1;
					Если ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ1 Тогда
						НоваяСтрока.Субконто1 = ТекСтрока["Субконто" + Строка(ИндексСубконто)];
						Если НЕ ТипЗнч(НоваяСтрока.Субконто1) = ТипЗнч(ТекСтрока["Субконто" + Строка(ИндексСубконто)]) Тогда
							НоваяСтрока.Субконто1 = Неопределено;
						КонецЕсли;
					ИначеЕсли ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ2 Тогда
						НоваяСтрока.Субконто2 = ТекСтрока["Субконто" + Строка(ИндексСубконто)];
						Если НЕ ТипЗнч(НоваяСтрока.Субконто2) = ТипЗнч(ТекСтрока["Субконто" + Строка(ИндексСубконто)]) Тогда
							НоваяСтрока.Субконто2 = Неопределено;
						КонецЕсли;
					ИначеЕсли ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ3 Тогда
						НоваяСтрока.Субконто3 = ТекСтрока["Субконто" + Строка(ИндексСубконто)];
						Если НЕ ТипЗнч(НоваяСтрока.Субконто3) = ТипЗнч(ТекСтрока["Субконто" + Строка(ИндексСубконто)]) Тогда
							НоваяСтрока.Субконто3 = Неопределено;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла; 
				
				Прервать;
			КонецЦикла; 
			
		КонецЦикла;
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.ШтрихкодыУпаковок Цикл
			НоваяСтрока = Источник.ШтрихкодыУпаковок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЦикла;	
			
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗаполнитьУЧ_ДвижДССписРс(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_ДвижениеДС") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, РучнаяКорректировка");
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		Источник.Субконто2 = ДанныеЗаполнения.СчетОрганизации;
		Источник.Счет = ПланыСчетов.Учетный.НайтиПоКоду("51.01");
		Источник.ВидОперации = Перечисления.ВидыОперацийДвиженияДС.БанковскаяВыписка;
		Источник.ПриходРасход = Перечисления.ВидыОперацийПлатежноеПоручение.Оплата;
		Источник.Договор = ДанныеЗаполнения.ДоговорКонтрагента;
		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации);
		
		Источник.Проводки.Очистить();
		
		Если НЕ ДанныеЗаполнения.РасшифровкаПлатежа.Количество() Тогда
			
			НоваяСтрока = Источник.Проводки.Добавить();
			//ЗаполнитьЗначенияСвойств(НоваяСтрока, ТДанныеЗаполнения);
			НоваяСтрока.ФинЦФО = Источник.Предприятие;
			НоваяСтрока.ФинСтатья = ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств;
			НоваяСтрока.Сумма = ДанныеЗаполнения.СуммаДокумента;
			НоваяСтрока.Содержание = ДанныеЗаполнения.НазначениеПлатежа;
			
			Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ДанныеЗаполнения.СчетУчетаРасчетовСКонтрагентом));
			Для каждого ТекСчет Из Соотв Цикл
				НоваяСтрока.КорСчет = ТекСчет.СчетУУ;
				НоваяСтрока.КорСубконто1 = Источник.Контрагент;
				НоваяСтрока.КорСубконто2 = Источник.Договор;
				Прервать;
			КонецЦикла;
			
		Иначе
			
			Для каждого ТекСтрока Из ДанныеЗаполнения.РасшифровкаПлатежа Цикл
				
				НоваяСтрока = Источник.Проводки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				НоваяСтрока.ФинЦФО = Источник.Предприятие;
				НоваяСтрока.ФинСтатья = ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств;
				НоваяСтрока.Сумма = ТекСтрока.СуммаПлатежа;
				НоваяСтрока.Содержание = ДанныеЗаполнения.НазначениеПлатежа;
				
				Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрока.СчетУчетаРасчетовСКонтрагентом));
				Для каждого ТекСчет Из Соотв Цикл
					НоваяСтрока.КорСчет = ТекСчет.СчетУУ;
					НоваяСтрока.КорСубконто1 = Источник.Контрагент;
					НоваяСтрока.КорСубконто2 = Источник.Договор;
					Прервать;
				КонецЦикла;	
				
			КонецЦикла; 
			
		КонецЕсли;
		
		Источник.РасшифровкаОплаты = Источник.Проводки.Количество() > 1;
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗаполнитьУЧ_ДвижДСПостРс(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_ДвижениеДС") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, РучнаяКорректировка");
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		Источник.Субконто2 = ДанныеЗаполнения.СчетОрганизации;
		Источник.Счет = ПланыСчетов.Учетный.НайтиПоКоду("51.01");
		Источник.ВидОперации = Перечисления.ВидыОперацийДвиженияДС.БанковскаяВыписка;
		Источник.ПриходРасход = Перечисления.ВидыОперацийПлатежноеПоручение.Поступление;
		Источник.Договор = ДанныеЗаполнения.ДоговорКонтрагента;
		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации);
		
		Источник.Проводки.Очистить();
		
		Если НЕ ДанныеЗаполнения.РасшифровкаПлатежа.Количество() Тогда
			
			НоваяСтрока = Источник.Проводки.Добавить();
			//ЗаполнитьЗначенияСвойств(НоваяСтрока, ТДанныеЗаполнения);
			НоваяСтрока.ФинЦФО = Источник.Предприятие;
			НоваяСтрока.ФинСтатья = ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств;
			НоваяСтрока.Сумма = ДанныеЗаполнения.СуммаДокумента;
			НоваяСтрока.Содержание = ДанныеЗаполнения.НазначениеПлатежа;
			
			Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ДанныеЗаполнения.СчетУчетаРасчетовСКонтрагентом));
			
			Для каждого ТекСчет Из Соотв Цикл
				НоваяСтрока.КорСчет = ТекСчет.СчетУУ;
				НоваяСтрока.КорСубконто1 = Источник.Контрагент;
				НоваяСтрока.КорСубконто2 = Источник.Договор;
				Прервать;
			КонецЦикла;
			
		Иначе
			
			Для каждого ТекСтрока Из ДанныеЗаполнения.РасшифровкаПлатежа Цикл
				
				НоваяСтрока = Источник.Проводки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				НоваяСтрока.ФинЦФО = Источник.Предприятие;
				НоваяСтрока.ФинСтатья = ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств;
				НоваяСтрока.Сумма = ТекСтрока.СуммаПлатежа;
				НоваяСтрока.Содержание = ДанныеЗаполнения.НазначениеПлатежа;
				
				Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрока.СчетУчетаРасчетовСКонтрагентом));
				
				Для каждого ТекСчет Из Соотв Цикл
					НоваяСтрока.КорСчет = ТекСчет.СчетУУ;
					НоваяСтрока.КорСубконто1 = Источник.Контрагент;
					НоваяСтрока.КорСубконто2 = Источник.Договор;
					Прервать;
				КонецЦикла;	
				
			КонецЦикла;
			
		КонецЕсли;
		
		Источник.РасшифровкаОплаты = Источник.Проводки.Количество() > 1;
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗаполнитьУЧ_ДвижДСРКО(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_ДвижениеДС") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, РучнаяКорректировка");
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		//Источник.Субконто2 = ДанныеЗаполнения.СчетОрганизации;
		
		Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ДанныеЗаполнения.СчетКасса));
		
		Для каждого ТекСчет Из Соотв Цикл
			Источник.Счет = ТекСчет.СчетУУ;
			Источник.Субконто2 = ТекСчет.ЗначениеСубконтоУУ2;
			Прервать;
		КонецЦикла; 
		
		Если Не ЗначениеЗаполнено(Источник.Счет) Тогда
			Источник.Счет = ПланыСчетов.Учетный.НайтиПоКоду("50.01");
		КонецЕсли;
		
		
		Источник.ВидОперации = Перечисления.ВидыОперацийДвиженияДС.КассовыйОрдер;
		Источник.ПриходРасход = Перечисления.ВидыОперацийПлатежноеПоручение.Оплата;
		Источник.Договор = ДанныеЗаполнения.ДоговорКонтрагента;
		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации);
		
		Если Не ЗначениеЗаполнено(Источник.Субконто2) И ЗначениеЗаполнено(Источник.Подразделение) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Кассы.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Кассы КАК Кассы
			|ГДЕ
			|	Кассы.Подразделение = &Подразделение";
			
			Запрос.УстановитьПараметр("Подразделение", Источник.Подразделение);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Источник.Субконто2 = Выборка.Ссылка;
			КонецЦикла;  
			
		КонецЕсли;
		
		Источник.Проводки.Очистить();
		
		Если НЕ ДанныеЗаполнения.РасшифровкаПлатежа.Количество() Тогда
			
			НоваяСтрока = Источник.Проводки.Добавить();
			НоваяСтрока.ФинЦФО = Источник.Предприятие;
			НоваяСтрока.ФинСтатья = ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств;
			НоваяСтрока.Сумма = ДанныеЗаполнения.СуммаДокумента;
			НоваяСтрока.Содержание = ДанныеЗаполнения.Основание;
			
			Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу Тогда
				Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ПланыСчетов.Хозрасчетный.НайтиПоКоду("71.01")));
			Иначе
				Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ДанныеЗаполнения.СчетУчетаРасчетовСКонтрагентом));
			КонецЕсли; 
			
			Для каждого ТекСчет Из Соотв Цикл
				НоваяСтрока.КорСчет = ТекСчет.СчетУУ;
				НоваяСтрока.КорСубконто1 = Источник.Контрагент;
				НоваяСтрока.КорСубконто2 = Источник.Договор;
				Прервать;
			КонецЦикла;
			
		Иначе
			
			Для каждого ТекСтрока Из ДанныеЗаполнения.РасшифровкаПлатежа Цикл
				
				НоваяСтрока = Источник.Проводки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				НоваяСтрока.ФинЦФО = Источник.Предприятие;
				НоваяСтрока.ФинСтатья = ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств;
				НоваяСтрока.Сумма = ТекСтрока.СуммаПлатежа;
				НоваяСтрока.Содержание = ДанныеЗаполнения.Основание;
				
				Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрока.СчетУчетаРасчетовСКонтрагентом));
				
				Для каждого ТекСчет Из Соотв Цикл
					НоваяСтрока.КорСчет = ТекСчет.СчетУУ;
					НоваяСтрока.КорСубконто1 = Источник.Контрагент;
					НоваяСтрока.КорСубконто2 = Источник.Договор;
					Прервать;
				КонецЦикла;	
				
			КонецЦикла; 
			
		КонецЕсли;
		
		Источник.РасшифровкаОплаты = Источник.Проводки.Количество() > 1;
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗаполнитьУЧ_ДвижДСПКО(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_ДвижениеДС") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, РучнаяКорректировка");
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		//Источник.Субконто2 = ДанныеЗаполнения.СчетОрганизации;
		
		Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ДанныеЗаполнения.СчетКасса));
		
		Для каждого ТекСчет Из Соотв Цикл
			Источник.Счет = ТекСчет.СчетУУ;
			Источник.Субконто2 = ТекСчет.ЗначениеСубконтоУУ2;
			Прервать;
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(Источник.Счет) Тогда
			Источник.Счет = ПланыСчетов.Учетный.НайтиПоКоду("50.01");
		КонецЕсли;
		
		Источник.ВидОперации = Перечисления.ВидыОперацийДвиженияДС.КассовыйОрдер;
		Источник.ПриходРасход = Перечисления.ВидыОперацийПлатежноеПоручение.Поступление;
		Источник.Договор = ДанныеЗаполнения.ДоговорКонтрагента;
		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации);
		
		Если Не ЗначениеЗаполнено(Источник.Субконто2) И ЗначениеЗаполнено(Источник.Подразделение) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Кассы.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Кассы КАК Кассы
			|ГДЕ
			|	Кассы.Подразделение = &Подразделение";
			
			Запрос.УстановитьПараметр("Подразделение", Источник.Подразделение);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Источник.Субконто2 = Выборка.Ссылка;
			КонецЦикла;
			
		КонецЕсли;
		
		Источник.Проводки.Очистить();
		
		Если НЕ ДанныеЗаполнения.РасшифровкаПлатежа.Количество() Тогда
			
			НоваяСтрока = Источник.Проводки.Добавить();
			//ЗаполнитьЗначенияСвойств(НоваяСтрока, ТДанныеЗаполнения);
			НоваяСтрока.ФинЦФО = Источник.Предприятие;
			НоваяСтрока.ФинСтатья = ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств;
			НоваяСтрока.Сумма = ДанныеЗаполнения.СуммаДокумента;
			НоваяСтрока.Содержание = ДанныеЗаполнения.Основание;
			
			Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ДанныеЗаполнения.СчетУчетаРасчетовСКонтрагентом));
			
			Для каждого ТекСчет Из Соотв Цикл
				НоваяСтрока.КорСчет = ТекСчет.СчетУУ;
				НоваяСтрока.КорСубконто1 = Источник.Контрагент;
				НоваяСтрока.КорСубконто2 = Источник.Договор;
				Прервать;
			КонецЦикла;
			
		Иначе
			
			Для каждого ТекСтрока Из ДанныеЗаполнения.РасшифровкаПлатежа Цикл
				
				НоваяСтрока = Источник.Проводки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				НоваяСтрока.ФинЦФО = Источник.Предприятие;
				НоваяСтрока.ФинСтатья = ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств;
				НоваяСтрока.Сумма = ТекСтрока.СуммаПлатежа;
				НоваяСтрока.Содержание = ДанныеЗаполнения.Основание;
				
				Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрока.СчетУчетаРасчетовСКонтрагентом));
				
				Для каждого ТекСчет Из Соотв Цикл
					НоваяСтрока.КорСчет = ТекСчет.СчетУУ;
					НоваяСтрока.КорСубконто1 = Источник.Контрагент;
					НоваяСтрока.КорСубконто2 = Источник.Договор;
					Прервать;
				КонецЦикла;	
				
			КонецЦикла; 
			
		КонецЕсли;
		
		Источник.РасшифровкаОплаты = Источник.Проводки.Количество() > 1;
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗаполнитьУЧ_Операция(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_Операция") Тогда
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ХозрасчетныйДвиженияССубконто.Период КАК Период,
		|	ХозрасчетныйДвиженияССубконто.Регистратор КАК Регистратор,
		|	ХозрасчетныйДвиженияССубконто.НомерСтроки КАК НомерСтроки,
		|	ХозрасчетныйДвиженияССубконто.Активность КАК Активность,
		|	ХозрасчетныйДвиженияССубконто.СчетДт КАК СчетДт,
		|	ХозрасчетныйДвиженияССубконто.СубконтоДт1 КАК СубконтоДт1,
		|	ХозрасчетныйДвиженияССубконто.ВидСубконтоДт1 КАК ВидСубконтоДт1,
		|	ХозрасчетныйДвиженияССубконто.СубконтоДт2 КАК СубконтоДт2,
		|	ХозрасчетныйДвиженияССубконто.ВидСубконтоДт2 КАК ВидСубконтоДт2,
		|	ХозрасчетныйДвиженияССубконто.СубконтоДт3 КАК СубконтоДт3,
		|	ХозрасчетныйДвиженияССубконто.ВидСубконтоДт3 КАК ВидСубконтоДт3,
		|	ХозрасчетныйДвиженияССубконто.СчетКт КАК СчетКт,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
		|	ХозрасчетныйДвиженияССубконто.ВидСубконтоКт1 КАК ВидСубконтоКт1,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК СубконтоКт2,
		|	ХозрасчетныйДвиженияССубконто.ВидСубконтоКт2 КАК ВидСубконтоКт2,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт3 КАК СубконтоКт3,
		|	ХозрасчетныйДвиженияССубконто.ВидСубконтоКт3 КАК ВидСубконтоКт3,
		|	ХозрасчетныйДвиженияССубконто.Организация КАК Организация,
		|	ХозрасчетныйДвиженияССубконто.ВалютаДт КАК ВалютаДт,
		|	ХозрасчетныйДвиженияССубконто.ВалютаКт КАК ВалютаКт,
		|	ХозрасчетныйДвиженияССубконто.ПодразделениеДт КАК ПодразделениеДт,
		|	ХозрасчетныйДвиженияССубконто.ПодразделениеКт КАК ПодразделениеКт,
		|	ХозрасчетныйДвиженияССубконто.Сумма КАК Сумма,
		|	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаДт КАК ВалютнаяСуммаДт,
		|	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаКт КАК ВалютнаяСуммаКт,
		|	ХозрасчетныйДвиженияССубконто.КоличествоДт КАК КоличествоДт,
		|	ХозрасчетныйДвиженияССубконто.КоличествоКт КАК КоличествоКт,
		|	ХозрасчетныйДвиженияССубконто.СуммаНУДт КАК СуммаНУДт,
		|	ХозрасчетныйДвиженияССубконто.СуммаНУКт КАК СуммаНУКт,
		|	ХозрасчетныйДвиженияССубконто.СуммаПРДт КАК СуммаПРДт,
		|	ХозрасчетныйДвиженияССубконто.СуммаПРКт КАК СуммаПРКт,
		|	ХозрасчетныйДвиженияССубконто.СуммаВРДт КАК СуммаВРДт,
		|	ХозрасчетныйДвиженияССубконто.СуммаВРКт КАК СуммаВРКт,
		|	ХозрасчетныйДвиженияССубконто.Содержание КАК Содержание,
		|	сабСоответствияОрганизацийПредприятиям.Предприятие КАК Предприятие,
		|	сабСоответствиеСчетовИСубконто.СубконтоБУ1 КАК СубконтоБУДт1,
		|	сабСоответствиеСчетовИСубконто.СубконтоБУ2 КАК СубконтоБУДт2,
		|	сабСоответствиеСчетовИСубконто.СубконтоБУ3 КАК СубконтоБУДт3,
		|	сабСоответствиеСчетовИСубконто.ЗначениеСубконтоУУ1 КАК ЗначениеСубконтоУУДт1,
		|	сабСоответствиеСчетовИСубконто.ЗначениеСубконтоУУ2 КАК ЗначениеСубконтоУУДт2,
		|	сабСоответствиеСчетовИСубконто.ЗначениеСубконтоУУ3 КАК ЗначениеСубконтоУУДт3,
		|	сабСоответствиеСчетовИСубконто.СчетУУ КАК СчетДебет,
		|	сабСоответствиеСчетовИСубконто1.СчетУУ КАК СчетКредит,
		|	сабСоответствиеСчетовИСубконто1.СубконтоБУ1 КАК СубконтоБУКт1,
		|	сабСоответствиеСчетовИСубконто1.СубконтоБУ2 КАК СубконтоБУКт2,
		|	сабСоответствиеСчетовИСубконто1.СубконтоБУ3 КАК СубконтоБУКт3,
		|	сабСоответствиеСчетовИСубконто1.ЗначениеСубконтоУУ1 КАК ЗначениеСубконтоУУКт1,
		|	сабСоответствиеСчетовИСубконто1.ЗначениеСубконтоУУ2 КАК ЗначениеСубконтоУУКт2,
		|	сабСоответствиеСчетовИСубконто1.ЗначениеСубконтоУУ3 КАК ЗначениеСубконтоУУКт3
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто КАК ХозрасчетныйДвиженияССубконто
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.сабСоответствияОрганизацийПредприятиям КАК сабСоответствияОрганизацийПредприятиям
		|		ПО ХозрасчетныйДвиженияССубконто.Организация = сабСоответствияОрганизацийПредприятиям.Организация
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.сабСоответствиеСчетовИСубконто КАК сабСоответствиеСчетовИСубконто
		|		ПО ХозрасчетныйДвиженияССубконто.СчетДт = сабСоответствиеСчетовИСубконто.СчетБУ
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.сабСоответствиеСчетовИСубконто КАК сабСоответствиеСчетовИСубконто1
		|		ПО ХозрасчетныйДвиженияССубконто.СчетКт = сабСоответствиеСчетовИСубконто1.СчетБУ
		|ГДЕ
		|	ХозрасчетныйДвиженияССубконто.Регистратор = &Регистратор
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор,
		|	Период
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос.УстановитьПараметр("Регистратор", ДанныеЗаполнения);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
				
		Если НЕ Выборка.Количество() Тогда
			Возврат;	
		КонецЕсли;
		
		Источник.Проводки.Очистить();
		
		Пока Выборка.Следующий() Цикл
			Источник.Предприятие = Выборка.Предприятие;
			Источник.Дата = Выборка.Период;
			Источник.ПересчитыватьЦенуСписанияВПроводках = Истина;
			НоваяСтрока = Источник.Проводки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.ПодразделениеДт = СоотвПодразделений.Получить(Выборка.ПодразделениеДт);
			НоваяСтрока.ПодразделениеКт = СоотвПодразделений.Получить(Выборка.ПодразделениеКт);
			Для СубИндекс = 1 По 3 Цикл
				Если Выборка["ВидСубконтоДт" + СубИндекс] = Выборка.СубконтоБУДт1 Тогда
					НоваяСтрока["Субконто" + СубИндекс + "Дебет"] = Выборка["СубконтоДт" + 1];
					Если НЕ ТипЗнч(НоваяСтрока["Субконто" + СубИндекс + "Дебет"]) = ТипЗнч(Выборка["СубконтоДт" + 1]) Тогда
						НоваяСтрока["Субконто" + СубИндекс + "Дебет"] = Неопределено;
					КонецЕсли;
				ИначеЕсли Выборка["ВидСубконтоДт" + СубИндекс] = Выборка.СубконтоБУДт2 Тогда
					НоваяСтрока["Субконто" + СубИндекс + "Дебет"] = Выборка["СубконтоДт" + 2];
					Если НЕ ТипЗнч(НоваяСтрока["Субконто" + СубИндекс + "Дебет"]) = ТипЗнч(Выборка["СубконтоДт" + 2]) Тогда
						НоваяСтрока["Субконто" + СубИндекс + "Дебет"] = Неопределено;
					КонецЕсли;
				ИначеЕсли Выборка["ВидСубконтоДт" + СубИндекс] = Выборка.СубконтоБУДт3 Тогда
					НоваяСтрока["Субконто" + СубИндекс + "Дебет"] = Выборка["СубконтоДт" + 3];
					Если НЕ ТипЗнч(НоваяСтрока["Субконто" + СубИндекс + "Дебет"]) = ТипЗнч(Выборка["СубконтоДт" + 3]) Тогда
						НоваяСтрока["Субконто" + СубИндекс + "Дебет"] = Неопределено;
					КонецЕсли;
				КонецЕсли;
				
				Если Выборка["ВидСубконтоКт" + СубИндекс] = Выборка.СубконтоБУКт1 Тогда
					НоваяСтрока["Субконто" + СубИндекс + "Кредит"] = Выборка["СубконтоКт" + 1];
					Если НЕ ТипЗнч(НоваяСтрока["Субконто" + СубИндекс + "Кредит"]) = ТипЗнч(Выборка["СубконтоКт" + 1]) Тогда
						НоваяСтрока["Субконто" + СубИндекс + "Кредит"] = Неопределено;
					КонецЕсли;
				ИначеЕсли Выборка["ВидСубконтоКт" + СубИндекс] = Выборка.СубконтоБУКт2 Тогда
					НоваяСтрока["Субконто" + СубИндекс + "Кредит"] = Выборка["СубконтоКт" + 2];
					Если НЕ ТипЗнч(НоваяСтрока["Субконто" + СубИндекс + "Кредит"]) = ТипЗнч(Выборка["СубконтоКт" + 2]) Тогда
						НоваяСтрока["Субконто" + СубИндекс + "Кредит"] = Неопределено;
					КонецЕсли;
				ИначеЕсли Выборка["ВидСубконтоКт" + СубИндекс] = Выборка.СубконтоБУКт3 Тогда
					НоваяСтрока["Субконто" + СубИндекс + "Кредит"] = Выборка["СубконтоКт" + 3];
					Если НЕ ТипЗнч(НоваяСтрока["Субконто" + СубИндекс + "Кредит"]) = ТипЗнч(Выборка["СубконтоКт" + 3]) Тогда
						НоваяСтрока["Субконто" + СубИндекс + "Кредит"] = Неопределено;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Выборка["ЗначениеСубконтоУУДт" + СубИндекс]) Тогда
					НоваяСтрока["Субконто" + СубИндекс + "Дебет"] = Выборка["ЗначениеСубконтоУУДт" + СубИндекс];
				КонецЕсли;
				Если ЗначениеЗаполнено(Выборка["ЗначениеСубконтоУУКт" + СубИндекс]) Тогда
					НоваяСтрока["Субконто" + СубИндекс + "Дебет"] = Выборка["ЗначениеСубконтоУУКт" + СубИндекс];
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Источник.Комментарий = ДанныеЗаполнения;
		
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗаполнитьУЧ_Списание(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_СписаниеТоваров") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СписаниеТоваров") Тогда
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, РучнаяКорректировка");
		Источник.Дата = ДанныеЗаполнения.Дата;
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		Источник.ВидОперации = Перечисления.ВидыОперацийСписания.Брак;
		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации);
		
		Источник.ТабличнаяЧасть.Очистить();
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Источник.ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.Товар = ТекСтрока.Номенклатура;
		КонецЦикла; 
				
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗаполнитьУЧ_Списание2(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_СписаниеТоваров") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПередачаТоваров") Тогда
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, РучнаяКорректировка");
		Источник.Дата = ДанныеЗаполнения.Дата;
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		Источник.ВидОперации = Перечисления.ВидыОперацийСписания.Брак;
		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации);
		
		Источник.ТабличнаяЧасть.Очистить();
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Источник.ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока,,"Цена, Сумма");
			НоваяСтрока.Товар = ТекСтрока.Номенклатура;
		КонецЦикла; 
				
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗаполнитьУЧ_АвансовыйОтчет(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_АвансовыйОтчет") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, РучнаяКорректировка");
		Источник.Дата = ДанныеЗаполнения.Дата;
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		//Источник.ВидОперации = Перечисления.ВидыОперацийСписания.Брак;
		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации);
		Источник.Сотрудник = ДанныеЗаполнения.ФизЛицо;
		
		Источник.ТабличнаяЧасть.Очистить();
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Источник.ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.ТипСписания = Перечисления.ТипыНоменклатуры.Материалы;
			Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрока.СчетУчета));
			Для каждого ТекСчет Из Соотв Цикл
				НоваяСтрока.КорСчет = ТекСчет.СчетУУ;
				Прервать;
			КонецЦикла;
			НоваяСтрока.КорСубконто1 = ТекСтрока.Номенклатура;
			НоваяСтрока.КорСубконто2 = ДанныеЗаполнения.Склад;
		КонецЦикла;
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.Прочее Цикл
			НоваяСтрока = Источник.ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.ТипСписания = Перечисления.ТипыНоменклатуры.Прочее;
			НоваяСтрока.КорСчет = ПланыСчетов.Учетный.НайтиПоКоду("26");
			Если Не ЗначениеЗаполнено(НоваяСтрока.КорСчет) Тогда
				НоваяСтрока.КорСчет = ПланыСчетов.Учетный.Счет25();
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.ОплатаПоставщикам Цикл
			НоваяСтрока = Источник.ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.ТипСписания = Перечисления.ТипыНоменклатуры.Прочее;
			
			Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрока.СчетУчетаРасчетовСКонтрагентом));
			Для каждого ТекСчет Из Соотв Цикл
				НоваяСтрока.КорСчет = ТекСчет.СчетУУ;
				Прервать;
			КонецЦикла;
			
			Если Не ЗначениеЗаполнено(НоваяСтрока.КорСчет) Тогда
				НоваяСтрока.КорСчет = ПланыСчетов.Учетный.Счет6001();
			КонецЕсли;
			НоваяСтрока.КорСубконто1 = ТекСтрока.Контрагент;
			НоваяСтрока.КорСубконто2 = ТекСтрока.ДоговорКонтрагента;
		КонецЦикла; 

				
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗаполнитьУЧ_Возврат(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)

	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_Возврат") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	сабОбработкаДокументов.ДокументУУ КАК ДокументУУ
		|ИЗ
		|	РегистрСведений.сабОбработкаДокументов КАК сабОбработкаДокументов
		|ГДЕ
		|	сабОбработкаДокументов.ДокументБУ = &ДокументБУ";
		
		Запрос.УстановитьПараметр("ДокументБУ", ДанныеЗаполнения.Сделка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Источник.ДокОснование = Выборка.ДокументУУ;		
		КонецЦикла;
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, РучнаяКорректировка");
		Источник.Дата = ДанныеЗаполнения.Дата;
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		Источник.Договор = ДанныеЗаполнения.ДоговорКонтрагента;
		Источник.Счет = ДанныеЗаполнения.ДоговорКонтрагента.СчетВзаиморасчетов;
		Если Не ЗначениеЗаполнено(Источник.Счет) Тогда
			Источник.Счет = ПланыСчетов.Учетный.НайтиПоКоду("62.01");		
		КонецЕсли;
		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации);
		Если ТипЗнч(ДанныеЗаполнения.Сделка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			Источник.ПодразделениеКонтрагента = ДанныеЗаполнения.Сделка.Заказ.ПодразделениеКонтрагента;
		КонецЕсли;
		
		Источник.УчитыватьНДС = Истина;
		
		Источник.Товары.Очистить();
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Источник.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.СуммаОтгрузки = ТекСтрока.Сумма;
			Источник.ВидОперации = Перечисления.ВидыОперацийРеализация.Товары;
			Если НЕ Источник.СуммаВключаетНДС И НЕ Источник.УчитыватьНДС Тогда
				НоваяСтрока.Сумма = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
				НоваяСтрока.СуммаОтгрузки = НоваяСтрока.Сумма;
				НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
			КонецЕсли;
			НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрока.СтавкаНДС);
			НоваяСтрока.ДокументРеализации = Источник.ДокОснование;
		КонецЦикла;
		
		
		//Счет9001 = ПланыСчетов.Учетный.Счет9001();
		//Для каждого ТекСтрока Из ДанныеЗаполнения.Услуги Цикл
		//	НоваяСтрока = Источник.Услуги.Добавить();
		//	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		//	НоваяСтрока.Счет90 = Счет9001;
		//	НоваяСтрока.Субконто1 = ТекСтрока.Номенклатура;
		//	НоваяСтрока.СуммаОтгрузки = ТекСтрока.Сумма;
		//	Источник.ВидОперации = Перечисления.ВидыОперацийРеализация.Услуги;
		//	Если НЕ Источник.СуммаВключаетНДС И НЕ Источник.УчитыватьНДС Тогда
		//		НоваяСтрока.Сумма = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
		//		НоваяСтрока.СуммаОтгрузки = НоваяСтрока.Сумма;
		//		НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
		//	КонецЕсли;
		//	
		//	НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрока.СтавкаНДС);
		//КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьУЧ_ВозвратТоваровПоставщику(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_ВозвратТоваровПоставщику") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	сабОбработкаДокументов.ДокументУУ КАК ДокументУУ
		|ИЗ
		|	РегистрСведений.сабОбработкаДокументов КАК сабОбработкаДокументов
		|ГДЕ
		|	сабОбработкаДокументов.ДокументБУ = &ДокументБУ";
		
		Запрос.УстановитьПараметр("ДокументБУ", ДанныеЗаполнения.Сделка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Источник.ДокОснование = Выборка.ДокументУУ;		
		КонецЦикла;
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, РучнаяКорректировка");
		Источник.Дата = ДанныеЗаполнения.Дата;
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		Источник.Договор = ДанныеЗаполнения.ДоговорКонтрагента;
		Источник.СчетКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента.СчетВзаиморасчетов;
		Если Не ЗначениеЗаполнено(Источник.СчетКонтрагента) Тогда
			Источник.СчетКонтрагента = ПланыСчетов.Учетный.НайтиПоКоду("60.01");		
		КонецЕсли;
		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации);
		
		//СуммаВключаетНДС = ДанныеЗаполнения.СуммаВключаетНДС;
		Источник.УчитыватьНДС = Истина;
		
		//Если ДанныеЗаполнения.Товары.Количество() Тогда
			Источник.ВидОперации = Перечисления.ВидыПоступлений.Поступление;
		//	Если ДанныеЗаполнения.Услуги.Количество() Тогда
		//		Источник.ВидОперации = Перечисления.ВидыПоступлений.ПоступлениеТМЦИУслуг;
		//	КонецЕсли;
		//Иначе	
		//	Источник.ВидОперации = Перечисления.ВидыПоступлений.ПоступлениеУслуг;
		//КонецЕсли;
		
		Источник.Товары.Очистить();

		Для каждого ТекСтрока Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Источник.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.Склад = Источник.Склад;
			//НоваяСтрока.Подразделение = Источник.Подразделение;
			
			Если НЕ Источник.СуммаВключаетНДС И НЕ Источник.УчитыватьНДС Тогда
				НоваяСтрока.Сумма = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
				НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
			КонецЕсли;
			
			Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрока.СчетУчета));
			Для каждого ТекСчет Из Соотв Цикл
				НоваяСтрока.СчетУчета = ТекСчет.СчетУУ;
				Прервать;
			КонецЦикла;
			
			НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрока.СтавкаНДС);
			
		КонецЦикла; 
		
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗаполнитьУЧ_КорректировкаРеализации(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)

	//Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_Реализация") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
	//	
	//	Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
	//	ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер");
	//	Источник.Дата = ДанныеЗаполнения.Дата;
	//	Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
	//	Источник.Договор = ДанныеЗаполнения.ДоговорКонтрагента;
	//	Источник.Счет = ДанныеЗаполнения.ДоговорКонтрагента.СчетВзаиморасчетов;
	//	Если Не ЗначениеЗаполнено(Источник.Счет) Тогда
	//		Источник.Счет = ПланыСчетов.Учетный.НайтиПоКоду("62.01");		
	//	КонецЕсли;
	//	Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации);
	//	
	//	Источник.УчитыватьНДС = Истина;
	//	
	//	Для каждого ТекСтрока Из ДанныеЗаполнения.Товары Цикл
	//		НоваяСтрока = Источник.Товары.Добавить();
	//		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	//		НоваяСтрока.СуммаОтгрузки = ТекСтрока.Сумма;
	//		Источник.ВидОперации = Перечисления.ВидыОперацийРеализация.Товары;
	//		Если НЕ Источник.СуммаВключаетНДС И НЕ Источник.УчитыватьНДС Тогда
	//			НоваяСтрока.Сумма = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
	//			НоваяСтрока.СуммаОтгрузки = НоваяСтрока.Сумма;
	//			НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
	//		КонецЕсли;
	//		НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрока.СтавкаНДС);
	//	КонецЦикла;
	//	Счет9001 = ПланыСчетов.Учетный.Счет9001();
	//	Для каждого ТекСтрока Из ДанныеЗаполнения.Услуги Цикл
	//		НоваяСтрока = Источник.Услуги.Добавить();
	//		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	//		НоваяСтрока.Счет90 = Счет9001;
	//		НоваяСтрока.Субконто1 = ТекСтрока.Номенклатура;
	//		НоваяСтрока.СуммаОтгрузки = ТекСтрока.Сумма;
	//		Источник.ВидОперации = Перечисления.ВидыОперацийРеализация.Услуги;
	//		Если НЕ Источник.СуммаВключаетНДС И НЕ Источник.УчитыватьНДС Тогда
	//			НоваяСтрока.Сумма = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
	//			НоваяСтрока.СуммаОтгрузки = НоваяСтрока.Сумма;
	//			НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
	//		КонецЕсли;
	//		
	//		НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрока.СтавкаНДС);
	//	КонецЦикла;
	//	
	//КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьУЧ_КорректировкаПоступления(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_КорректировкаПоступления") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	сабОбработкаДокументов.ДокументУУ КАК ДокументУУ
		|ИЗ
		|	РегистрСведений.сабОбработкаДокументов КАК сабОбработкаДокументов
		|ГДЕ
		|	сабОбработкаДокументов.ДокументБУ = &ДокументБУ";
		
		Запрос.УстановитьПараметр("ДокументБУ", ДанныеЗаполнения.ИсправляемыйДокументПоступления);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Источник.ДокОснование = Выборка.ДокументУУ;		
		КонецЦикла;
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, РучнаяКорректировка");
		Источник.Дата = ДанныеЗаполнения.Дата;
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		Источник.Договор = ДанныеЗаполнения.ДоговорКонтрагента;
		Источник.СчетКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента.СчетВзаиморасчетов;
		Если Не ЗначениеЗаполнено(Источник.СчетКонтрагента) Тогда
			Источник.СчетКонтрагента = ПланыСчетов.Учетный.НайтиПоКоду("60.01");		
		КонецЕсли;
		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации);
		
		//СуммаВключаетНДС = ДанныеЗаполнения.СуммаВключаетНДС;
		Источник.УчитыватьНДС = Истина;
		
		Источник.Товары.Очистить();
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Источник.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.Склад = Источник.Склад;
			//НоваяСтрока.Подразделение = Источник.Подразделение;
			
			Если НЕ Источник.УчитыватьНДС Тогда
				НоваяСтрока.Сумма = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
				НоваяСтрока.Цена = ?(НоваяСтрока.Количество, НоваяСтрока.Сумма / НоваяСтрока.Количество, 0);
			КонецЕсли;
			
			//Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрока.СчетУчета));
			//Для каждого ТекСчет Из Соотв Цикл
			//	НоваяСтрока.СчетУчета = ТекСчет.СчетУУ;
			//	Прервать;
			//КонецЦикла;
			
			НоваяСтрока.СтавкаНДС = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрока.СтавкаНДС);
			НоваяСтрока.СтавкаНДСДоИзменения = сабОбщегоНазначенияБУХПовтИсп.СоотвСтавокНДСБУХУУ().Получить(ТекСтрока.СтавкаНДСДоИзменения);
			
		КонецЦикла; 
		
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗаполнитьУЧ_ПеремещениеМатериаловВПроизводство(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_ПеремещениеМатериаловВПроизводство") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ТребованиеНакладная") Тогда
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, РучнаяКорректировка");
		Источник.Дата = ДанныеЗаполнения.Дата;
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации);
		
		Источник.ТабличнаяЧасть.Очистить();
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.Материалы Цикл
			НоваяСтрока = Источник.ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			
			Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ?(ЗначениеЗаполнено(ДанныеЗаполнения.СчетЗатрат), ДанныеЗаполнения.СчетЗатрат, ТекСтрока.СчетЗатрат)));
			Для каждого ТекСчет Из Соотв Цикл
				НоваяСтрока.КорСчет = ТекСчет.СчетУУ;
				ИндексСубконто = 0;
				Для каждого ТекСубконто Из ТекСчет.СчетУУ.ВидыСубконто Цикл
					ИндексСубконто = ИндексСубконто + 1;
					Если ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ1 Тогда
						НоваяСтрока.КорСубконто1 = ДанныеЗаполнения["Субконто" + Строка(ИндексСубконто)];
						Если НЕ ТипЗнч(НоваяСтрока.КорСубконто1) = ТипЗнч(ДанныеЗаполнения["Субконто" + Строка(ИндексСубконто)]) Тогда
							НоваяСтрока.КорСубконто1 = Неопределено;
						КонецЕсли;
					ИначеЕсли ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ2 Тогда
						НоваяСтрока.КорСубконто2 = ДанныеЗаполнения["Субконто" + Строка(ИндексСубконто)];
						Если НЕ ТипЗнч(НоваяСтрока.КорСубконто2) = ТипЗнч(ДанныеЗаполнения["Субконто" + Строка(ИндексСубконто)]) Тогда
							НоваяСтрока.КорСубконто2 = Неопределено;
						КонецЕсли;
					ИначеЕсли ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ3 Тогда
						НоваяСтрока.КорСубконто3 = ДанныеЗаполнения["Субконто" + Строка(ИндексСубконто)];
						Если НЕ ТипЗнч(НоваяСтрока.КорСубконто3) = ТипЗнч(ДанныеЗаполнения["Субконто" + Строка(ИндексСубконто)]) Тогда
							НоваяСтрока.КорСубконто3 = Неопределено;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;

			КонецЦикла;
			
			НоваяСтрока.КорПодразделение = СоотвПодразделений.Получить(ТекСтрока.ПодразделениеЗатрат);
			
		КонецЦикла; 
				
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗаполнитьУЧ_ПеремещениеТоваров(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_ПеремещениеТоваров") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, РучнаяКорректировка");
		Источник.Дата = ДанныеЗаполнения.Дата;
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		Источник.ВидОперации = Перечисления.ВидыПеремещений.Перемещение;
		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОтправитель);
		Источник.ПодразделениеПолучатель = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеПолучатель);
		Источник.Склад = ДанныеЗаполнения.СкладОтправитель;
		
		Источник.ТабличнаяЧасть.Очистить();
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Источник.ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			
			Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрока.СчетУчета));
			Для каждого ТекСчет Из Соотв Цикл
				НоваяСтрока.СчетУчетаБУ = ТекСчет.СчетУУ;
				Прервать;
			КонецЦикла;
			
			Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтрока.НовыйСчетУчета));
			Для каждого ТекСчет Из Соотв Цикл
				НоваяСтрока.НовыйСчетУчетаБУ = ТекСчет.СчетУУ;
				Прервать;
			КонецЦикла; 

		КонецЦикла; 
				
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗаполнитьУЧ_Оприходование(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ВыборкаСоотв, СоотвПодразделений)
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_ОприходованиеТоваров") И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОприходованиеТоваров") Тогда
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения,, "Номер, РучнаяКорректировка");
		Источник.Дата = ДанныеЗаполнения.Дата;
		Источник.Предприятие = ДанныеЗаполнения.Организация.Предприятие;
		Источник.ВидОперации = Перечисления.ВидыОперацийСписания.Брак;
		Источник.Подразделение = СоотвПодразделений.Получить(ДанныеЗаполнения.ПодразделениеОрганизации);
		Источник.Счет = ПланыСчетов.Учетный.Счет91();
		Источник.Субконто1 = Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("Оприходование излишков", Истина);
		
		Источник.ТабличнаяЧасть.Очистить();
		
		Для каждого ТекСтрока Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Источник.ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.Товар = ТекСтрока.Номенклатура;
		КонецЦикла; 
				
	КонецЕсли;
			
КонецПроцедуры

Процедура сабПередЗаписьюДокументыБППередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.СчетНаОплатуПокупателю") Тогда
		Если НЕ Источник.ДополнительныеСвойства.Свойство("Модифицирован") Тогда
			Источник.ДополнительныеСвойства.Вставить("Модифицирован", Ложь);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьСчетПоКоду(Код) Экспорт
	Возврат ПланыСчетов.Учетный.НайтиПоКоду(Код);
КонецФункции // ()

Функция ПолучитьСоотвСчетовИСубконто(ТекСтру) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	сабСоответствиеСчетовИСубконто.СчетБУ КАК СчетБУ,
	               |	сабСоответствиеСчетовИСубконто.СубконтоБУ1 КАК СубконтоБУ1,
	               |	сабСоответствиеСчетовИСубконто.СубконтоБУ2 КАК СубконтоБУ2,
	               |	сабСоответствиеСчетовИСубконто.СубконтоБУ3 КАК СубконтоБУ3,
	               |	сабСоответствиеСчетовИСубконто.СчетУУ КАК СчетУУ,
	               |	сабСоответствиеСчетовИСубконто.СубконтоУУ1 КАК СубконтоУУ1,
	               |	сабСоответствиеСчетовИСубконто.СубконтоУУ2 КАК СубконтоУУ2,
	               |	сабСоответствиеСчетовИСубконто.СубконтоУУ3 КАК СубконтоУУ3,
	               |	сабСоответствиеСчетовИСубконто.Комментарии КАК Комментарии
	               |ИЗ
	               |	РегистрСведений.сабСоответствиеСчетовИСубконто КАК сабСоответствиеСчетовИСубконто
	               |ГДЕ
	               |	сабСоответствиеСчетовИСубконто.СчетБУ = &СчетБУ";
	
	Запрос.УстановитьПараметр("СчетБУ", ТекСтру.Счет);
	Результат = Запрос.Выполнить();
	ВыборкаСоотв = Результат.Выгрузить();

	Соотв = ВыборкаСоотв.НайтиСтроки(Новый Структура("СчетБУ", ТекСтру.Счет));
	НовСтру = Новый Структура("Счет, Субконто1, Субконто2, Субконто3");
	Для каждого ТекСчет Из Соотв Цикл
		НовСтру.Вставить("Счет", ТекСчет.СчетУУ);
		ИндексСубконто = 0;
		Для каждого ТекСубконто Из ТекСчет.СчетУУ.ВидыСубконто Цикл
			ИндексСубконто = ИндексСубконто + 1;
			Если ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ1 Тогда
				НовСтру.Вставить("Субконто1", ТекСтру["Субконто" + Строка(ИндексСубконто)]);
			ИначеЕсли ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ2 Тогда
				НовСтру.Вставить("Субконто2", ТекСтру["Субконто" + Строка(ИндексСубконто)]);
			ИначеЕсли ТекСубконто.ВидСубконто = ТекСчет.СубконтоУУ3 Тогда
				НовСтру.Вставить("Субконто3", ТекСтру["Субконто" + Строка(ИндексСубконто)]);
			КонецЕсли;
		КонецЦикла; 
		
		Прервать;
	КонецЦикла;
	
	Возврат НовСтру;

КонецФункции // ()

Процедура УстановитьМодифицированностьБУДокумента(ЭтотОбъект, Документ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(Документ) Тогда
		
		Изменены = Ложь;    
		
		// Проверка реквизитов
		Для каждого реквизит из ЭтотОбъект.Метаданные().Реквизиты Цикл
			Если Не ЭтотОбъект[Реквизит.Имя] = ЭтотОбъект.Ссылка[Реквизит.Имя] тогда 
				Изменены = Истина;
			КонецЕсли;
		КонецЦикла;
		
		// Проверка реквизитов ТЧ
		Для каждого ТЧ из ЭтотОбъект.Метаданные().ТабличныеЧасти Цикл
			ТЗОбъекта = ЭтотОбъект[ТЧ.Имя].Выгрузить(); 
			ТЗСсылкиНаОбъект = ЭтотОбъект.Ссылка[ТЧ.Имя].Выгрузить(); 
			ТЗОбъекта = ЗначениеВСтрокуВнутр(ТЗОбъекта);
			ТЗСсылкиНаОбъект = ЗначениеВСтрокуВнутр(ТЗСсылкиНаОбъект);
			Если ТЗОбъекта <> ТЗСсылкиНаОбъект Тогда
				Изменены = Истина;    
			КонецЕсли;
		КонецЦикла;
		
		Если Изменены Тогда
			НаборЗаписей = РегистрыСведений.сабОбработкаДокументов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ДокументБУ.Установить(Документ);
			НаборЗаписей.Прочитать();
			Для каждого ТекЗапись Из НаборЗаписей Цикл
				ТекЗапись.Модифицирован = Истина;		
			КонецЦикла; 
			НаборЗаписей.Записать();
		КонецЕсли;
		
		//удалить запись ошибки обработанного
		НаборЗаписей = РегистрыСведений.сабДокументОшибкаФоновогоПроведения.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументБУ.Установить(ЭтотОбъект.Ссылка);
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	УстановитьТайминг(ЭтотОбъект);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура УстановитьТайминг(ЭтотОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	//установка времени по настройкам тайминга
	ИмяДока = ЭтотОбъект.Ссылка.Метаданные().Имя;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СабНастройкиТайминга.Ссылка КАК Ссылка,
	|	СабНастройкиТайминга.Время КАК Время,
	|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(СабНастройкиТайминга.Время, ДЕНЬ), СабНастройкиТайминга.Время, СЕКУНДА) КАК Разница
	|ИЗ
	|	Справочник.СабНастройкиТайминга КАК СабНастройкиТайминга
	|ГДЕ
	|	СабНастройкиТайминга.ПометкаУдаления = ЛОЖЬ
	|	И СабНастройкиТайминга.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", ИмяДока);
	Запрос.УстановитьПараметр("ТекДата", ЭтотОбъект.Дата);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЭтотОбъект.Дата = НачалоДня(ЭтотОбъект.Дата) + Выборка.Разница;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

Функция ПроверитьДоступМодуля() Экспорт
	Возврат ПравоДоступа("Просмотр", Метаданные.Подсистемы.модульУправленка);
КонецФункции // ()

Процедура АвтозаполнениеПоказателейНаСервере() Экспорт
	ТекГруппа = Справочники.сабФинансовыеПоказатели.НайтиПоНаименованию("Исходные данные", Истина);
	Если ЗначениеЗаполнено(ТекГруппа) Тогда
		НоваяГруппа = ТекГруппа.ПолучитьОбъект();
	Иначе
		НоваяГруппа = Справочники.сабФинансовыеПоказатели.СоздатьГруппу();
	КонецЕсли;
	НоваяГруппа.Наименование = "Исходные данные";
	НоваяГруппа.Порядок = 1;
	НоваяГруппа.Записать();
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник, ТипДанных, ВидОстатка", "Счет", "90.01", "Обороты", "КредитСвернутый"));
	СоздатьПоказатель(
	"Выручка", 
	СтрокиЧислителя, 
	Неопределено, 
	Перечисления.сабСуммСред.Сумма, 
	НоваяГруппа.Ссылка);
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник, ТипДанных, ВидОстатка", "Счет", "90.02", "Обороты", "ДебетСвернутый"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник, ТипДанных, ВидОстатка", "Счет", "90.03", "Обороты", "дебетСвернутый"));
	СоздатьПоказатель(
	"Затраты", 
	СтрокиЧислителя, 
	Неопределено, 
	Перечисления.сабСуммСред.Сумма, 
	НоваяГруппа.Ссылка);
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник, ТипДанных, ВидОстатка", "Счет", "90.01", "Обороты", "КредитСвернутый"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник, ТипДанных, ВидОстатка", "Счет", "90.02", "Обороты", "КредитСвернутый"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник, ТипДанных, ВидОстатка", "Счет", "90.03", "Обороты", "КредитСвернутый"));
	СоздатьПоказатель(
	"Прибыль", 
	СтрокиЧислителя, 
	Неопределено, 
	Перечисления.сабСуммСред.Сумма, 
	НоваяГруппа.Ссылка);
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "Статья", "Дебиторская задолженность покупателей"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "Статья", "Дебиторская задолженность поставщиков и подрядчиков"));
	СоздатьПоказатель(
	"Дебиторская задолженность", 
	СтрокиЧислителя, 
	Неопределено, 
	Перечисления.сабСуммСред.Среднее, 
	НоваяГруппа.Ссылка);
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "Статья", "Денежные средства"));
	СоздатьПоказатель(
	"Денежные средства", 
	СтрокиЧислителя, 
	Неопределено, 
	Перечисления.сабСуммСред.Среднее, 
	НоваяГруппа.Ссылка);

	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "Статья", "Кредиты и займы краткосрочные"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "Статья", "Кредиты и займы долгосрочные"));
	СоздатьПоказатель(
	"Заемный капитал", 
	СтрокиЧислителя, 
	Неопределено, 
	Перечисления.сабСуммСред.Среднее, 
	НоваяГруппа.Ссылка);

	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "Статья", "Готовая продукция"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "Статья", "Незавершенное производство"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "Статья", "Сырье, материалы"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "Статья", "Товары"));
	СоздатьПоказатель(
	"Запасы", 
	СтрокиЧислителя, 
	Неопределено, 
	Перечисления.сабСуммСред.Среднее, 
	НоваяГруппа.Ссылка);
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "Статья", "Задолженность перед контрагентами"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "Статья", "Задолженность по выплатам сотрудникам"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "Статья", "Задолженность по налоговым обязательствам"));
	СоздатьПоказатель(
	"Кредиторская задолженность", 
	СтрокиЧислителя, 
	Неопределено, 
	Перечисления.сабСуммСред.Среднее, 
	НоваяГруппа.Ссылка);
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "Статья", "Готовая продукция"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "Статья", "Незавершенное производство"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "Статья", "Сырье, материалы"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "Статья", "Дебиторская задолженность покупателей"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "Статья", "Дебиторская задолженность поставщиков и подрядчиков"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "Статья", "Денежные средства"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "Статья", "Прочие оборотные активы"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "Статья", "Расходы будущих периодов"));
	СоздатьПоказатель(
	"Оборотные средства", 
	СтрокиЧислителя, 
	Неопределено, 
	Перечисления.сабСуммСред.Среднее, 
	НоваяГруппа.Ссылка);
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "Статья", "Основные средства"));
	СоздатьПоказатель(
	"Основные средства", 
	СтрокиЧислителя, 
	Неопределено, 
	Перечисления.сабСуммСред.Среднее, 
	НоваяГруппа.Ссылка);

	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник, ТипДанных, ВидОстатка", "Счет", "75.01", "Остатки", "КредитСвернутый"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник, ТипДанных, ВидОстатка", "Счет", "75.02", "Остатки", "КредитСвернутый"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник, ТипДанных, ВидОстатка", "Счет", "84", "Остатки", "КредитСвернутый"));
	СоздатьПоказатель(
	"Собственный капитал", 
	СтрокиЧислителя, 
	Неопределено, 
	Перечисления.сабСуммСред.Среднее, 
	НоваяГруппа.Ссылка);
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник, ТипДанных, ВидОстатка", "Счет", "58", "Остатки", "ДебетСвернутый"));
	СоздатьПоказатель(
	"Краткосрочные фин. вложения", 
	СтрокиЧислителя, 
	Неопределено, 
	Перечисления.сабСуммСред.Среднее, 
	НоваяГруппа.Ссылка);
	
	ТекГруппа = Справочники.сабФинансовыеПоказатели.НайтиПоНаименованию("Ликвидность", Истина);
	Если ЗначениеЗаполнено(ТекГруппа) Тогда
		НоваяГруппа = ТекГруппа.ПолучитьОбъект();
	Иначе
		НоваяГруппа = Справочники.сабФинансовыеПоказатели.СоздатьГруппу();
	КонецЕсли;
	НоваяГруппа.Наименование = "Ликвидность";
	НоваяГруппа.Порядок = 2;
	НоваяГруппа.Записать();
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Оборотные средства"));
	СтрокиЗнаменателя = Новый Массив;
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Кредиторская задолженность"));
	СоздатьПоказатель(
	"Коэффициент текущей ликвидности", 
	СтрокиЧислителя, 
	СтрокиЗнаменателя, 
	Перечисления.сабСуммСред.Сумма, 
	НоваяГруппа.Ссылка,
	,
	Новый Структура("НормаЗнак, НормаЧисло", ">", 2));
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Денежные средства"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Краткосрочные фин. вложения"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Дебиторская задолженность"));
	СтрокиЗнаменателя = Новый Массив;
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Кредиторская задолженность"));
	СоздатьПоказатель(
	"Коэффициент быстрой ликвидности", 
	СтрокиЧислителя, 
	СтрокиЗнаменателя, 
	Перечисления.сабСуммСред.Сумма, 
	НоваяГруппа.Ссылка,
	,
	Новый Структура("НормаЗнак, НормаЧисло", ">", 0.7));
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Денежные средства"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Краткосрочные фин. вложения"));
	СтрокиЗнаменателя = Новый Массив;
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Кредиторская задолженность"));
	СоздатьПоказатель(
	"Коэффициент абсолютной ликвидности", 
	СтрокиЧислителя, 
	СтрокиЗнаменателя, 
	Перечисления.сабСуммСред.Сумма, 
	НоваяГруппа.Ссылка,
	,
	Новый Структура("НормаЗнак, НормаЧисло", ">", 0.3));
	
	ТекГруппа = Справочники.сабФинансовыеПоказатели.НайтиПоНаименованию("Финансовая устойчивость", Истина);
	Если ЗначениеЗаполнено(ТекГруппа) Тогда
		НоваяГруппа = ТекГруппа.ПолучитьОбъект();
	Иначе
		НоваяГруппа = Справочники.сабФинансовыеПоказатели.СоздатьГруппу();
	КонецЕсли;
	НоваяГруппа.Наименование = "Финансовая устойчивость";
	НоваяГруппа.Порядок = 3;
	НоваяГруппа.Записать();
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Собственный капитал"));
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Заемный капитал"));
	СтрокиЗнаменателя = Новый Массив;
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Собственный капитал"));
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Заемный капитал"));
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Кредиторская задолженность"));
	СоздатьПоказатель(
	"Коэффициент финансовой устойчивости", 
	СтрокиЧислителя, 
	СтрокиЗнаменателя, 
	Перечисления.сабСуммСред.Сумма, 
	НоваяГруппа.Ссылка,
	,
	Новый Структура("НормаЗнак, НормаЧисло", ">", 0.9));
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Заемный капитал"));
	СтрокиЗнаменателя = Новый Массив;
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Собственный капитал"));
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Заемный капитал"));
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Кредиторская задолженность"));
	СоздатьПоказатель(
	"Коэффициент финансовой зависимости", 
	СтрокиЧислителя, 
	СтрокиЗнаменателя, 
	Перечисления.сабСуммСред.Сумма, 
	НоваяГруппа.Ссылка,
	,
	Новый Структура("НормаЗнак, НормаЧисло", ">", 0.5));

	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Собственный капитал"));
	СтрокиЗнаменателя = Новый Массив;
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Собственный капитал"));
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Заемный капитал"));
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Кредиторская задолженность"));
	СоздатьПоказатель(
	"Коэффициент автономии", 
	СтрокиЧислителя, 
	СтрокиЗнаменателя, 
	Перечисления.сабСуммСред.Сумма, 
	НоваяГруппа.Ссылка,
	,
	Новый Структура("НормаЗнак, НормаЧисло", ">", 0.5));
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Собственный капитал"));
	СтрокиЗнаменателя = Новый Массив;
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Оборотные средства"));
	СоздатьПоказатель(
	"Коэффициент обеспеченности собственными оборотными средствами", 
	СтрокиЧислителя, 
	СтрокиЗнаменателя, 
	Перечисления.сабСуммСред.Сумма, 
	НоваяГруппа.Ссылка,
	,
	Новый Структура("НормаЗнак, НормаЧисло", ">", 0.2));

	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Заемный капитал"));
	СтрокиЗнаменателя = Новый Массив;
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Собственный капитал"));
	СоздатьПоказатель(
	"Коэффициент соотношения заемных и собственных средств", 
	СтрокиЧислителя, 
	СтрокиЗнаменателя, 
	Перечисления.сабСуммСред.Сумма, 
	НоваяГруппа.Ссылка,
	,
	Новый Структура("НормаЗнак, НормаЧисло", ">", 1));
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Оборотные средства"));
	СтрокиЗнаменателя = Новый Массив;
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Оборотные средства"));
	СоздатьПоказатель(
	"Коэффициент маневренности собственных средств", 
	СтрокиЧислителя, 
	СтрокиЗнаменателя, 
	Перечисления.сабСуммСред.Сумма, 
	НоваяГруппа.Ссылка,
	,
	Новый Структура("НормаЗнак, НормаЧисло", ">", 0.5));
	
	ТекГруппа = Справочники.сабФинансовыеПоказатели.НайтиПоНаименованию("Деловая активность", Истина);
	Если ЗначениеЗаполнено(ТекГруппа) Тогда
		НоваяГруппа = ТекГруппа.ПолучитьОбъект();
	Иначе
		НоваяГруппа = Справочники.сабФинансовыеПоказатели.СоздатьГруппу();
	КонецЕсли;
	НоваяГруппа.Наименование = "Деловая активность";
	НоваяГруппа.Порядок = 4;
	НоваяГруппа.Записать();
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Выручка"));
	СтрокиЗнаменателя = Новый Массив;
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Основные средства"));
	СоздатьПоказатель(
	"Коэффициент оборачиваемости основных средств", 
	СтрокиЧислителя, 
	СтрокиЗнаменателя, 
	Перечисления.сабСуммСред.Сумма, 
	НоваяГруппа.Ссылка);

	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Выручка"));
	СтрокиЗнаменателя = Новый Массив;
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Оборотные средства"));
	СоздатьПоказатель(
	"Коэффициент оборачиваемости оборотных средств", 
	СтрокиЧислителя, 
	СтрокиЗнаменателя, 
	Перечисления.сабСуммСред.Сумма, 
	НоваяГруппа.Ссылка);
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Выручка"));
	СтрокиЗнаменателя = Новый Массив;
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Запасы"));
	СоздатьПоказатель(
	"Коэффициент оборачиваемости запасов", 
	СтрокиЧислителя, 
	СтрокиЗнаменателя, 
	Перечисления.сабСуммСред.Сумма, 
	НоваяГруппа.Ссылка);
	
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Выручка"));
	СтрокиЗнаменателя = Новый Массив;
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Дебиторская задолженность"));
	СоздатьПоказатель(
	"Коэффициент оборачиваемости дебиторской задолженности", 
	СтрокиЧислителя, 
	СтрокиЗнаменателя, 
	Перечисления.сабСуммСред.Сумма, 
	НоваяГруппа.Ссылка);
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Выручка"));
	СтрокиЗнаменателя = Новый Массив;
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Кредиторская задолженность"));
	СоздатьПоказатель(
	"Коэффициент оборачиваемости кредиторской задолженности", 
	СтрокиЧислителя, 
	СтрокиЗнаменателя, 
	Перечисления.сабСуммСред.Сумма, 
	НоваяГруппа.Ссылка);
	
	ТекГруппа = Справочники.сабФинансовыеПоказатели.НайтиПоНаименованию("Рентабельность", Истина);
	Если ЗначениеЗаполнено(ТекГруппа) Тогда
		НоваяГруппа = ТекГруппа.ПолучитьОбъект();
	Иначе
		НоваяГруппа = Справочники.сабФинансовыеПоказатели.СоздатьГруппу();
	КонецЕсли;
	НоваяГруппа.Наименование = "Рентабельность";
	НоваяГруппа.Порядок = 5;
	НоваяГруппа.Записать();
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Прибыль"));
	СтрокиЗнаменателя = Новый Массив;
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Оборотные средства"));
	СоздатьПоказатель(
	"Рентабельность активов", 
	СтрокиЧислителя, 
	СтрокиЗнаменателя, 
	Перечисления.сабСуммСред.Сумма, 
	НоваяГруппа.Ссылка,
	,
	Новый Структура("НормаЗнак, НормаЧисло", ">", 0.3));
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Прибыль"));
	СтрокиЗнаменателя = Новый Массив;
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Выручка"));
	СоздатьПоказатель(
	"Рентабельность продаж", 
	СтрокиЧислителя, 
	СтрокиЗнаменателя, 
	Перечисления.сабСуммСред.Сумма, 
	НоваяГруппа.Ссылка,
	,
	Новый Структура("НормаЗнак, НормаЧисло", ">", 0.15));
	
	СтрокиЧислителя = Новый Массив;
	СтрокиЧислителя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Прибыль"));
	СтрокиЗнаменателя = Новый Массив;
	СтрокиЗнаменателя.Добавить(Новый Структура("Тип, Источник", "ФинП", "Собственный капитал"));
	СоздатьПоказатель(
	"Рентабельность собственного капитала", 
	СтрокиЧислителя, 
	СтрокиЗнаменателя, 
	Перечисления.сабСуммСред.Сумма, 
	НоваяГруппа.Ссылка,
	,
	Новый Структура("НормаЗнак, НормаЧисло", ">", 0.3));
	
	
КонецПроцедуры

Процедура СоздатьПоказатель(Наименование, СтрокиЧислителя, СтрокиЗнаменателя, ПромежЗначения, Родитель, Знак = "Плюс", Норматив = Неопределено)
	
	Если Норматив = Неопределено Тогда
		Норматив = Новый Структура;	
	КонецЕсли;
	
	ТекЭлемент = Справочники.сабФинансовыеПоказатели.НайтиПоНаименованию(Наименование, Истина);
	Если ЗначениеЗаполнено(ТекЭлемент) Тогда
		НовыйЭлемент = ТекЭлемент.ПолучитьОбъект();
	Иначе
		НовыйЭлемент = Справочники.сабФинансовыеПоказатели.СоздатьЭлемент();
	КонецЕсли;
	НовыйЭлемент.Наименование = Наименование;
	НовыйЭлемент.Родитель = Родитель;
	НовыйЭлемент.РасчетныеДанные.Очистить();
	Если ТипЗнч(СтрокиЧислителя) = Тип("Массив") Тогда
		Для каждого ТекСтрока Из СтрокиЧислителя Цикл
			НоваяСтрока = НовыйЭлемент.РасчетныеДанные.Добавить();
			Если ТекСтрока.Тип = "Счет" Тогда
				НоваяСтрока.Источник = ПланыСчетов.Учетный.НайтиПоКоду(ТекСтрока.Источник);
				НоваяСтрока.ТипДанных = Перечисления.сабТипыДанныхПоСчету[ТекСтрока.ТипДанных];
				НоваяСтрока.ВидОстатка = Перечисления.УЧ_ВидОстаткаПоСчету[ТекСтрока.ВидОстатка];
			ИначеЕсли ТекСтрока.Тип = "Статья" Тогда
				НоваяСтрока.Источник = Справочники.Д_СтатьиОборотки.НайтиПоНаименованию(ТекСтрока.Источник, Истина);
			ИначеЕсли ТекСтрока.Тип = "ФинП" Тогда
				НоваяСтрока.Источник = Справочники.сабФинансовыеПоказатели.НайтиПоНаименованию(ТекСтрока.Источник, Истина);
			КонецЕсли;
			НоваяСтрока.Знак = Знак;
		КонецЦикла;
	КонецЕсли;
	НовыйЭлемент.РасчетныеДанныеЗнаменатель.Очистить();
	Если ТипЗнч(СтрокиЗнаменателя) = Тип("Массив") Тогда
		Для каждого ТекСтрока Из СтрокиЗнаменателя Цикл
			НоваяСтрока = НовыйЭлемент.РасчетныеДанныеЗнаменатель.Добавить();
			Если ТекСтрока.Тип = "Счет" Тогда
				НоваяСтрока.Источник = ПланыСчетов.Учетный.НайтиПоКоду(ТекСтрока.Источник);
				НоваяСтрока.ТипДанных = Перечисления.сабТипыДанныхПоСчету[ТекСтрока.ТипДанных];
				НоваяСтрока.ВидОстатка = Перечисления.УЧ_ВидОстаткаПоСчету[ТекСтрока.ВидОстатка];
			ИначеЕсли ТекСтрока.Тип = "Статья" Тогда
				НоваяСтрока.Источник = Справочники.Д_СтатьиОборотки.НайтиПоНаименованию(ТекСтрока.Источник, Истина);
			ИначеЕсли ТекСтрока.Тип = "ФинП" Тогда
				НоваяСтрока.Источник = Справочники.сабФинансовыеПоказатели.НайтиПоНаименованию(ТекСтрока.Источник, Истина);
			КонецЕсли;
			НоваяСтрока.Знак = Знак;
		КонецЦикла;
	КонецЕсли;
	НовыйЭлемент.РасчетПромежуточныхЗначений = ПромежЗначения;
	ЗаполнитьЗначенияСвойств(НовыйЭлемент, Норматив);
    НовыйЭлемент.Записать();

КонецПроцедуры

Процедура ДобавитьИсториюИзмененийБУХДока(Форма, Группа) Экспорт
	
	Если Не ЗначениеЗаполнено(Форма.ДокументБУ) Тогда
		Возврат;	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипОбъекта = Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоРеквизиту("Имя", Форма.ДокументБУ.Метаданные().Имя);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиВерсионированияОбъектов.ТипОбъекта КАК ТипОбъекта,
	|	НастройкиВерсионированияОбъектов.Использовать КАК Использовать
	|ИЗ
	|	РегистрСведений.НастройкиВерсионированияОбъектов КАК НастройкиВерсионированияОбъектов
	|ГДЕ
	|	НастройкиВерсионированияОбъектов.ТипОбъекта = &ТипОбъекта";
	
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	ВклВерс = Истина;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ВклВерс = ВыборкаДетальныеЗаписи.Использовать;
	КонецЦикла;
	
	КолВерс = ПолучитьКоличествоВерсий(Форма.ДокументБУ);

	Если ВклВерс = Истина И КолВерс > 0 Тогда
		НоваяКоманда = Форма.Команды.Добавить("КомандаПоказатьИзмененияВерсий");
		НоваяКоманда.Действие = "ПоказатьИзмененияВерсий";//Имя процедуры
		НоваяКоманда.Заголовок = "Показать изменения";
		
		НовыйЭлемент = Форма.Элементы.Добавить("ЭлементПоказатьИзмененияВерсий",
		Тип("КнопкаФормы"),
		Группа);
		НовыйЭлемент.ИмяКоманды = "КомандаПоказатьИзмененияВерсий";
		НовыйЭлемент.Вид = ВидКнопкиФормы.Гиперссылка;
		НовыйЭлемент.Картинка = БиблиотекаКартинок.ИсторияДанных;
		
		НоваяКоманда = Форма.Команды.Добавить("КомандаПерезаполнитьПоДокументу");
		НоваяКоманда.Действие = "ПерезаполнитьПоДокументу";//Имя процедуры
		НоваяКоманда.Заголовок = "Перезаполнить";
		
		НовыйЭлемент = Форма.Элементы.Добавить("ЭлементПерезаполнитьПоДокументу",
		Тип("КнопкаФормы"),
		Группа);
		НовыйЭлемент.ИмяКоманды = "КомандаПерезаполнитьПоДокументу";
		НовыйЭлемент.Вид = ВидКнопкиФормы.Гиперссылка;
		НовыйЭлемент.Картинка = БиблиотекаКартинок.Обновить;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

Функция ПолучитьКоличествоВерсий(ДокументБУ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	сабОбработкаДокументов.ДокументБУ КАК ДокументБУ,
	               |	сабОбработкаДокументов.ДокументУУ КАК ДокументУУ,
	               |	сабОбработкаДокументов.ДатаОбработки КАК ДатаОбработки
	               |ИЗ
	               |	РегистрСведений.сабОбработкаДокументов КАК сабОбработкаДокументов
	               |ГДЕ
	               |	сабОбработкаДокументов.ДокументБУ = &ДокументБУ";
	
	Запрос.УстановитьПараметр("ДокументБУ", ДокументБУ);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДатаОбработки = Выборка.ДатаОбработки;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВерсииОбъектов.Объект КАК Объект,
		|	ВерсииОбъектов.ДатаВерсии КАК ДатаВерсии,
		|	ВерсииОбъектов.Комментарий КАК Комментарий
		|ИЗ
		|	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
		|ГДЕ
		|	ВерсииОбъектов.Объект = &Объект И ВерсииОбъектов.ДатаВерсии > &ДатаОбработки И ВерсииОбъектов.ДатаВерсии > &ДатаДока";
		
		Запрос.УстановитьПараметр("Объект", ДокументБУ);
		Запрос.УстановитьПараметр("ДатаДока", ДокументБУ.Дата);
		Запрос.УстановитьПараметр("ДатаОбработки", ДатаОбработки);
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		Возврат ?(РезультатЗапроса.Количество(), РезультатЗапроса.Количество() + 1, 0);
	
	КонецЦикла;
	
    Возврат 0;
	
КонецФункции 
