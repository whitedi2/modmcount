// Добавляет отбор в коллекцию отборов компоновщика или группы отборов
//
// Параметры:
//		ЭлементСтруктуры - элемент структуры
//		Поле             - имя поля, по которому добавляется отбор
//		Значение         - значение отбора
//		ВидСравнения     - вид сравнений компоновки данных (по умолчанию: вид сравнения)
//		Использование    - признак использования отбора (по умолчанию: истина)
//
Функция ДобавитьОтбор(ЭлементСтруктуры, Знач Поле, Значение, ВидСравнения = Неопределено, Использование = Истина, ВПользовательскиеНастройки = Ложь, РежимОтображения = Неопределено) Экспорт
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Настройки.Отбор;
		
		Если ВПользовательскиеНастройки Тогда
			Для Каждого ЭлементНастройки Из ЭлементСтруктуры.ПользовательскиеНастройки.Элементы Цикл	
				Если ЭлементНастройки.ИдентификаторПользовательскойНастройки = ЭлементСтруктуры.Настройки.Отбор.ИдентификаторПользовательскойНастройки Тогда
					Отбор = ЭлементНастройки;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Отбор;
	Иначе
		Отбор = ЭлементСтруктуры;
	КонецЕсли;
		
	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	НовыйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлемент.Использование  = Использование;
	НовыйЭлемент.ЛевоеЗначение  = Поле;
	НовыйЭлемент.ВидСравнения   = ВидСравнения;
	НовыйЭлемент.ПравоеЗначение = Значение;
	Если РежимОтображения <> Неопределено Тогда
		НовыйЭлемент.РежимОтображения = РежимОтображения;
	КонецЕсли;
	
	Возврат НовыйЭлемент;
	
КонецФункции

Процедура УстановитьСостояние(Форма, НеИспользовать = Ложь) Экспорт
	
	Если НеИспользовать Тогда
		Форма.Элементы.Результат.ОтображениеСостояния.Видимость                      = Ложь;
		Форма.Элементы.Результат.ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
	Иначе
		Форма.Элементы.Результат.ОтображениеСостояния.Видимость                      = Истина;
		Форма.Элементы.Результат.ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	КонецЕсли;
	
	Форма.Элементы.Подразделение.Видимость = БюджетныйНаСервере.ВернутьРеквизит(Форма.Отчет.Организация, "УчетПоПодразделениям");
	Если Форма.Отчет.Свойство("Счет") Тогда
		Форма.Элементы.Подразделение.Видимость = МИН(Форма.Элементы.Подразделение.Видимость, БюджетныйНаСервере.ВернутьРеквизит(Форма.Отчет.Счет, "УчетПоПодразделениям"));
	КонецЕсли;
	Если НЕ Форма.Элементы.Подразделение.Видимость Тогда
		Форма.Отчет.Подразделение = "";	
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПараметрВывода(Настройка, ИмяПараметра) Экспорт
	
	МассивПараметров   = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяПараметра, ".");
	УровеньВложенности = МассивПараметров.Количество();
	
	Если УровеньВложенности > 1 Тогда
		ИмяПараметра = МассивПараметров[0];		
	КонецЕсли;
	
	Если ТипЗнч(Настройка) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройка.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	Иначе
		ЗначениеПараметра = Настройка.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	КонецЕсли;
	
	Если УровеньВложенности > 1 Тогда
		Для Индекс = 1 По УровеньВложенности - 1 Цикл
			ИмяПараметра = ИмяПараметра + "." + МассивПараметров[Индекс];
			ЗначениеПараметра = ЗначениеПараметра.ЗначенияВложенныхПараметров.Найти(ИмяПараметра); 
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЗначениеПараметра;  
	
КонецФункции

Процедура ОбновитьПредставлениеПериода(Форма, НачалоПериода, КонецПериода) Экспорт
	
	//Форма.ВидПериода = ПолучитьВидПериода(НачалоПериода, КонецПериода, Форма);
	СтандартПериод = Новый СтандартныйПериод;
	СтандартПериод.ДатаНачала = НачалоПериода;
	СтандартПериод.ДатаОкончания = КонецПериода;
	
	Форма.Отчет.Период     =  СтандартПериод;
	
КонецПроцедуры

Функция ПолучитьВидПериода(Знач НачалоПериода, Знач КонецПериода, Форма) Экспорт
	
	ВидПериода = Форма.ДоступныеПериодыОтчета.ПроизвольныйПериод;
	Если Не ЗначениеЗаполнено(НачалоПериода) ИЛИ Не ЗначениеЗаполнено(КонецПериода) Тогда
		ВидПериода = Форма.ДоступныеПериодыОтчета.ПроизвольныйПериод;
	Иначе
		НачалоПериода = НачалоДня(НачалоПериода);
		КонецПериода  = КонецДня(КонецПериода);
		Если НачалоПериода = НачалоДня(НачалоПериода) И КонецПериода = КонецДня(НачалоПериода) Тогда
			ВидПериода = Форма.ДоступныеПериодыОтчета.День;
		ИначеЕсли НачалоПериода = НачалоНедели(НачалоПериода) И КонецПериода = КонецНедели(НачалоПериода) Тогда
			ВидПериода = Форма.ДоступныеПериодыОтчета.Неделя;
		ИначеЕсли НачалоПериода = НачалоМесяца(НачалоПериода) И КонецПериода = КонецМесяца(НачалоПериода) Тогда
			ВидПериода = Форма.ДоступныеПериодыОтчета.Месяц;
		ИначеЕсли НачалоПериода = НачалоКвартала(НачалоПериода) И КонецПериода = КонецКвартала(НачалоПериода) Тогда
			ВидПериода = Форма.ДоступныеПериодыОтчета.Квартал;
		ИначеЕсли НачалоПериода = НачалоГода(НачалоПериода) И КонецПериода = КонецГода(НачалоПериода) Тогда
			ВидПериода = Форма.ДоступныеПериодыОтчета.Год;
		ИначеЕсли НачалоПериода = Дата(Год(НачалоПериода), 1, 1) И КонецПериода = Дата(Год(НачалоПериода), 5, 31, 23, 59, 59)
			ИЛИ НачалоПериода = Дата(Год(НачалоПериода), 6, 1) И КонецПериода = Дата(Год(НачалоПериода), 12, 31, 23, 59, 59) Тогда
			ВидПериода = Форма.ДоступныеПериодыОтчета.Полугодие;
		ИначеЕсли НачалоПериода = Дата(Год(НачалоПериода), Месяц(НачалоПериода), 1) 
			И КонецПериода = Дата(Год(НачалоПериода), Месяц(НачалоПериода), 10, 23, 59, 59)
			ИЛИ НачалоПериода = Дата(Год(НачалоПериода), Месяц(НачалоПериода), 11) 
			И КонецПериода = Дата(Год(НачалоПериода), Месяц(НачалоПериода), 20, 23, 59, 59)
			ИЛИ НачалоПериода = Дата(Год(НачалоПериода), Месяц(НачалоПериода), 1) 
			И КонецПериода = КонецМесяца(НачалоПериода)	Тогда
			ВидПериода = Форма.ДоступныеПериодыОтчета.Декада;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВидПериода;
	
КонецФункции

Функция ПолучитьПредставлениеПериода(НачалоПериода = Неопределено, КонецПериода = Неопределено, ТолькоДаты  = Ложь) Экспорт
	
	ТекстПериод = "";
	
	Если ЗначениеЗаполнено(КонецПериода) Тогда 
		Если КонецПериода >= НачалоПериода Тогда
			ТекстПериод = ?(ТолькоДаты, "", " за ") + ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(КонецПериода), "ФП");
		Иначе
			ТекстПериод = "";
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(НачалоПериода) И Не ЗначениеЗаполнено(КонецПериода) Тогда
		ТекстПериод = ?(ТолькоДаты, "", " за ") + ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(Дата(3999, 11, 11)), "ФП");
		ТекстПериод = СтрЗаменить(ТекстПериод, Сред(ТекстПериод, Найти(ТекстПериод, " - ")), " - ...");
	КонецЕсли;
	
	Возврат ТекстПериод;
	
КонецФункции

Функция ПолучитьПредставлениеПериодаОтчета(ВидПериода, НачалоПериода, КонецПериода, Форма) Экспорт
	
	Если ВидПериода = Форма.ДоступныеПериодыОтчета.ПроизвольныйПериод Тогда	
		Если Не ЗначениеЗаполнено(НачалоПериода) И Не ЗначениеЗаполнено(КонецПериода) Тогда
			Возврат "";
		Иначе
			Возврат Формат(НачалоПериода, "ДФ=dd.MM.yy") + " - " + Формат(КонецПериода, "ДФ=dd.MM.yy");
		КонецЕсли;
	Иначе
		Список = ПолучитьСписокПериодов(НачалоПериода, ВидПериода, Форма);
		
		ЭлементСписка = Список.НайтиПоЗначению(НачалоПериода);
		Если ЭлементСписка <> Неопределено тогда
			Возврат ЭлементСписка.Представление;
		Иначе
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ПолучитьСписокПериодов(НачалоПериода, ВидПериода, Форма) Экспорт
	                                                                                                  
	СписокПериодов = Новый СписокЗначений;
	Если НачалоПериода = '00010101' Тогда
		Возврат Новый СписокЗначений;
	Иначе
		ЗначениеНачалоПериода = НачалоПериода;
	КонецЕсли;
	
	Если ВидПериода = Форма.ДоступныеПериодыОтчета.Год Тогда
		ТекущийГод = Год(ЗначениеНачалоПериода);
		СписокПериодов.Добавить(Дата(ТекущийГод - 7, 1, 1), "Предыдущие года");
		Для Сч = ТекущийГод По ТекущийГод + 6 Цикл
			СписокПериодов.Добавить(Дата(Сч, 1, 1), Формат(Сч, "ЧГ=0"));
		КонецЦикла;
		СписокПериодов.Добавить(Дата(ТекущийГод + 7, 1, 1), "Последующие года");
		
	ИначеЕсли ВидПериода = Форма.ДоступныеПериодыОтчета.Полугодие Тогда
		ТекущийГод = Год(ЗначениеНачалоПериода);
		СписокПериодов.Добавить(Дата(ТекущийГод - 1, 1, 1), Формат(ТекущийГод - 1, "ЧГ=0") + "...");
		Для Сч = ТекущийГод По ТекущийГод + 1 Цикл
			СписокПериодов.Добавить(Дата(Сч, 1, 1), "I полугодие " + Формат(Сч, "ЧГ=0"));
			СписокПериодов.Добавить(Дата(Сч, 7, 1), "II полугодие " + Формат(Сч, "ЧГ=0"));
		КонецЦикла;
		СписокПериодов.Добавить(Дата(ТекущийГод + 2, 1, 1), Формат(ТекущийГод + 2, "ЧГ=0") + "...");
		
	ИначеЕсли ВидПериода = Форма.ДоступныеПериодыОтчета.Квартал Тогда
		ТекущийГод = Год(ЗначениеНачалоПериода);
		СписокПериодов.Добавить(Дата(ТекущийГод - 1, 1, 1), Формат(ТекущийГод - 1, "ЧГ=0") + "...");
		Для Сч = ТекущийГод По ТекущийГод Цикл
			СписокПериодов.Добавить(Дата(Сч, 1, 1), "I квартал " + Формат(Сч, "ЧГ=0"));
			СписокПериодов.Добавить(Дата(Сч, 4, 1), "II квартал " + Формат(Сч, "ЧГ=0"));
			СписокПериодов.Добавить(Дата(Сч, 7, 1), "III квартал " + Формат(Сч, "ЧГ=0"));
			СписокПериодов.Добавить(Дата(Сч, 10, 1), "IV квартал " + Формат(Сч, "ЧГ=0"));
		КонецЦикла;
		СписокПериодов.Добавить(Дата(ТекущийГод + 1, 1, 1), Формат(ТекущийГод + 1, "ЧГ=0") + "...");
		
	ИначеЕсли ВидПериода = Форма.ДоступныеПериодыОтчета.Месяц Тогда
		ТекущийГод = Год(ЗначениеНачалоПериода);
		СписокПериодов.Добавить(Дата(ТекущийГод - 1, 1, 1), Формат(ТекущийГод - 1, "ЧГ=0") + "...");
		Для Сч = 1 По 12 Цикл
			СписокПериодов.Добавить(Дата(ТекущийГод, Сч, 1), Формат(Дата(ТекущийГод, Сч, 1), "ДФ='MMMM yyyy'"));
		КонецЦикла;
		СписокПериодов.Добавить(Дата(ТекущийГод + 1, 1, 1), Формат(ТекущийГод + 1, "ЧГ=0") + "...");

	ИначеЕсли ВидПериода = Форма.ДоступныеПериодыОтчета.Декада Тогда
		ТекущийГод   = Год(ЗначениеНачалоПериода);
		ТекущийМесяц = Месяц(ЗначениеНачалоПериода);
		
		СчМесяц = ?(ТекущийМесяц - 4 < 1, 12 + ТекущийМесяц - 4, ТекущийМесяц - 4);
		СчГод   = ?(ТекущийМесяц - 4 < 1, ТекущийГод - 1       , ТекущийГод);
		Сч = 6;
		
		Период = Дата(?(СчМесяц <> 1, СчГод, СчГод - 1), ?(СчМесяц > 1, СчМесяц - 1, 12), 1);
		СписокПериодов.Добавить(Период, Формат(Период, "ДФ='MMMM yyyy'") + "...");
		Пока Сч >0 Цикл
			СписокПериодов.Добавить(Дата(СчГод, СчМесяц, 1),  "I дек. " + Нрег(Формат(Дата(СчГод, СчМесяц, 1), "ДФ='MMMM yyyy'")));
			СписокПериодов.Добавить(Дата(СчГод, СчМесяц, 11), "II дек. " + Нрег(Формат(Дата(СчГод, СчМесяц, 1), "ДФ='MMMM yyyy'")));
			СписокПериодов.Добавить(Дата(СчГод, СчМесяц, 21), "III дек. " + Нрег(Формат(Дата(СчГод, СчМесяц, 1), "ДФ='MMMM yyyy'")));
			СчМесяц = СчМесяц + 1;
			Если СчМесяц > 12 Тогда
				СчГод = СчГод + 1;
				СчМесяц = 1;
			КонецЕсли;
			Сч = Сч - 1;
		КонецЦикла;
		СписокПериодов.Добавить(Дата(СчГод, СчМесяц, 1), Формат(Дата(СчГод, СчМесяц, 1), "ДФ='MMMM yyyy'") + "...");
		
	ИначеЕсли ВидПериода = Форма.ДоступныеПериодыОтчета.Неделя Тогда
		НачалоНедели = НачалоНедели(ЗначениеНачалоПериода) - 21 * 86400;
		
		СписокПериодов.Добавить(НачалоНедели - 7 * 86400, "Пред. недели ...");
		Для Сч = 0 По 6 Цикл
			НачНедели = НачалоНедели + 7 * Сч * 86400;  
			КонНедели = КонецНедели(НачНедели);
			СписокПериодов.Добавить(НачНедели, Формат(НачНедели, "ДФ=dd.MM") + " - " + Формат(КонНедели, "ДФ=dd.MM"));
		КонецЦикла;
		СписокПериодов.Добавить(НачалоНедели + 7 * 86400, "След. недели ..." );
		
	ИначеЕсли ВидПериода = Форма.ДоступныеПериодыОтчета.День Тогда
		КонецНедели   = КонецНедели(ЗначениеНачалоПериода);
		ДатаДняНедели = НачалоНедели(ЗначениеНачалоПериода);
		
		СписокПериодов.Добавить(ДатаДняНедели - 86400, "Предыдущая неделя");
		
		Пока ДатаДняНедели < КонецНедели Цикл
			ДеньНед = ДеньНедели(ДатаДняНедели);
			
			СписокПериодов.Добавить(ДатаДняНедели, Формат(ДатаДняНедели, "ДФ='dd MMMM yyyy (ddd)'"));
			
			ДатаДняНедели = ДатаДняНедели + 86400;
		КонецЦикла;
		
		СписокПериодов.Добавить(КонецНедели + 1, "Следующая неделя");
	КонецЕсли;
		
	Возврат СписокПериодов;
	
КонецФункции

Функция УстановитьПараметрВывода(Настройка, ИмяПараметра, Значение, Использование = Истина) Экспорт
	
	ЗначениеПараметра = ПолучитьПараметрВывода(Настройка, ИмяПараметра);
	
	Если ЗначениеПараметра <> Неопределено Тогда
		ЗначениеПараметра.Использование = Использование;
		ЗначениеПараметра.Значение      = Значение;
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

Функция НачалоПериодаОтчета(ВидПериода, ДатаПериода, Форма) Экспорт
	
	НачалоПериода = ДатаПериода;
	
	Если ВидПериода = Форма.ДоступныеПериодыОтчета.Год Тогда
		НачалоПериода = НачалоГода(ДатаПериода);
		
	ИначеЕсли ВидПериода = Форма.ДоступныеПериодыОтчета.Полугодие Тогда
		Если Месяц(ДатаПериода) > 6 Тогда
			НачалоПериода = Дата(Год(ДатаПериода), 7, 1);
		Иначе
			НачалоПериода = Дата(Год(ДатаПериода), 1, 1);
		КонецЕсли;
		
	ИначеЕсли ВидПериода = Форма.ДоступныеПериодыОтчета.Квартал Тогда
		НачалоПериода = НачалоКвартала(ДатаПериода);
		
	ИначеЕсли ВидПериода = Форма.ДоступныеПериодыОтчета.Месяц Тогда
		НачалоПериода = НачалоМесяца(ДатаПериода);
		
	ИначеЕсли ВидПериода = Форма.ДоступныеПериодыОтчета.Декада Тогда
		Если День(ДатаПериода) <= 10 Тогда
			НачалоПериода = Дата(Год(ДатаПериода), Месяц(ДатаПериода), 1);
		ИначеЕсли День(ДатаПериода) > 10 И День(ДатаПериода) <= 20 Тогда
			НачалоПериода = Дата(Год(ДатаПериода), Месяц(ДатаПериода), 11);
		Иначе
			НачалоПериода = Дата(Год(ДатаПериода), Месяц(ДатаПериода), 21);
		КонецЕсли;
		
	ИначеЕсли ВидПериода = Форма.ДоступныеПериодыОтчета.Неделя Тогда
		НачалоПериода = НачалоНедели(ДатаПериода);
		
	ИначеЕсли ВидПериода = Форма.ДоступныеПериодыОтчета.День Тогда
		НачалоПериода = НачалоДня(ДатаПериода);
		
	КонецЕсли;
		
	Возврат НачалоПериода;
	
КонецФункции

Функция КонецПериодаОтчета(ВидПериода, ДатаПериода, Форма) Экспорт
	
	КонецПериода = ДатаПериода;
	
	Если ВидПериода = Форма.ДоступныеПериодыОтчета.Год Тогда
		КонецПериода = КонецГода(ДатаПериода);
		
	ИначеЕсли ВидПериода = Форма.ДоступныеПериодыОтчета.Полугодие Тогда
		Если Месяц(ДатаПериода) > 6 Тогда
			КонецПериода = КонецГода(ДатаПериода);
		Иначе
			КонецПериода = КонецДня(Дата(Год(ДатаПериода), 6, 30));
		КонецЕсли;
		
	ИначеЕсли ВидПериода = Форма.ДоступныеПериодыОтчета.Квартал Тогда
		КонецПериода = КонецКвартала(ДатаПериода);
		
	ИначеЕсли ВидПериода = Форма.ДоступныеПериодыОтчета.Месяц Тогда
		КонецПериода = КонецМесяца(ДатаПериода);
		
	ИначеЕсли ВидПериода = Форма.ДоступныеПериодыОтчета.Декада Тогда
		Если День(ДатаПериода) <= 10 Тогда
			КонецПериода = КонецДня(Дата(Год(ДатаПериода), Месяц(ДатаПериода), 10));
		ИначеЕсли День(ДатаПериода) > 10 И День(ДатаПериода) <= 20 Тогда
			КонецПериода = КонецДня(Дата(Год(ДатаПериода), Месяц(ДатаПериода), 20));
		Иначе
			КонецПериода = КонецМесяца(ДатаПериода);
		КонецЕсли;
		
	ИначеЕсли ВидПериода = Форма.ДоступныеПериодыОтчета.Неделя Тогда
		КонецПериода = КонецНедели(ДатаПериода);
		
	ИначеЕсли ВидПериода = Форма.ДоступныеПериодыОтчета.День Тогда
		КонецПериода = КонецДня(ДатаПериода);
		
	КонецЕсли;
		
	Возврат КонецПериода;
	
КонецФункции

Функция НачалоПериодаОтчетаФ(ВидПериода, ДатаПериода, ФормаОтчета) Экспорт
	
	НачалоПериода = ДатаПериода;
	
	Если ВидПериода = ФормаОтчета.ЗаГод тогда
		НачалоПериода = НачалоГода(ДатаПериода);
	ИначеЕсли ВидПериода = ФормаОтчета.ЗаПолугодие тогда
		Если Месяц(ДатаПериода) >= 6 тогда
			НачалоПериода = Дата(Год(ДатаПериода), 6, 1);
		Иначе
			НачалоПериода = Дата(Год(ДатаПериода), 1, 1);
		КонецЕсли;
	ИначеЕсли ВидПериода = ФормаОтчета.ЗаКвартал тогда
		НачалоПериода = НачалоКвартала(ДатаПериода);
	ИначеЕсли ВидПериода = ФормаОтчета.ЗаМесяц тогда
		НачалоПериода = НачалоМесяца(ДатаПериода);
	ИначеЕсли ВидПериода = ФормаОтчета.ЗаДекаду тогда
		Если День(ДатаПериода) <= 10 тогда
			НачалоПериода = Дата(Год(ДатаПериода), Месяц(ДатаПериода), 1);
		ИначеЕсли День(ДатаПериода) > 10 и День(ДатаПериода) <= 20 тогда
			НачалоПериода = Дата(Год(ДатаПериода), Месяц(ДатаПериода), 11);
		Иначе
			НачалоПериода = Дата(Год(ДатаПериода), Месяц(ДатаПериода), 21);
		КонецЕсли;
	ИначеЕсли ВидПериода = ФормаОтчета.ЗаНеделю тогда
		НачалоПериода = НачалоНедели(ДатаПериода);
	ИначеЕсли ВидПериода = ФормаОтчета.ЗаДень тогда
		НачалоПериода = НачалоДня(ДатаПериода);
	КонецЕсли;
		
	Возврат НачалоПериода;
	
КонецФункции

Функция КонецПериодаОтчетаФ(ВидПериода, ДатаПериода, ФормаОтчета) Экспорт
	
	КонецПериода = ДатаПериода;
	
	Если ВидПериода = ФормаОтчета.ЗаГод тогда
		КонецПериода = КонецГода(ДатаПериода);
	ИначеЕсли ВидПериода = ФормаОтчета.ЗаПолугодие тогда
		Если Месяц(ДатаПериода) > 6 тогда
			КонецПериода = КонецГода(ДатаПериода);
		Иначе
			КонецПериода = КонецДня(Дата(Год(ДатаПериода), 6, 30));
		КонецЕсли;
	ИначеЕсли ВидПериода = ФормаОтчета.ЗаКвартал тогда
		КонецПериода = КонецКвартала(ДатаПериода);
	ИначеЕсли ВидПериода = ФормаОтчета.ЗаМесяц тогда
		КонецПериода = КонецМесяца(ДатаПериода);
	ИначеЕсли ВидПериода = ФормаОтчета.ЗаДекаду тогда
		Если День(ДатаПериода) <= 10 тогда
			КонецПериода = КонецДня(Дата(Год(ДатаПериода), Месяц(ДатаПериода), 10));
		ИначеЕсли День(ДатаПериода) > 10 и День(ДатаПериода) <= 20 тогда
			КонецПериода = КонецДня(Дата(Год(ДатаПериода), Месяц(ДатаПериода), 20));
		Иначе
			КонецПериода = КонецМесяца(ДатаПериода);
		КонецЕсли;
	ИначеЕсли ВидПериода = ФормаОтчета.ЗаНеделю тогда
		КонецПериода = КонецНедели(ДатаПериода);
	ИначеЕсли ВидПериода = ФормаОтчета.ЗаДень тогда
		КонецПериода = КонецДня(ДатаПериода);
	КонецЕсли;
		
	Возврат КонецПериода;
	
КонецФункции

Функция ПолучитьВидПериодаФ(Знач НачалоПериода, Знач КонецПериода, ФормаОтчета) Экспорт
	
	НачалоПериода = НачалоДня(НачалоПериода);
	КонецПериода  = КонецДня(КонецПериода);
	
	Если НачалоПериода = НачалоДня(НачалоПериода) и КонецПериода = КонецДня(НачалоПериода) тогда
		Возврат ФормаОтчета.ЗаДень;
	ИначеЕсли НачалоПериода = НачалоНедели(НачалоПериода) и КонецПериода = КонецНедели(НачалоПериода) тогда
		Возврат ФормаОтчета.ЗаНеделю;
	ИначеЕсли НачалоПериода = НачалоМесяца(НачалоПериода) и КонецПериода = КонецМесяца(НачалоПериода) тогда
		Возврат ФормаОтчета.ЗаМесяц;
	ИначеЕсли НачалоПериода = НачалоКвартала(НачалоПериода) и КонецПериода = КонецКвартала(НачалоПериода) тогда
		Возврат ФормаОтчета.ЗаКвартал;
	ИначеЕсли НачалоПериода = НачалоГода(НачалоПериода) и КонецПериода = КонецГода(НачалоПериода) тогда
		Возврат ФормаОтчета.ЗаГод;
	ИначеЕсли (НачалоПериода = Дата(Год(НачалоПериода), 1, 1) и КонецПериода = Дата(Год(НачалоПериода), 6, 30, 23, 59, 59))
		или (НачалоПериода = Дата(Год(НачалоПериода), 6, 1) и КонецПериода = Дата(Год(НачалоПериода), 12, 31, 23, 59, 59)) тогда
		Возврат ФормаОтчета.ЗаПолугодие;
	ИначеЕсли (НачалоПериода = Дата(Год(НачалоПериода), Месяц(НачалоПериода), 1) и КонецПериода = Дата(Год(НачалоПериода), Месяц(НачалоПериода), 10, 23, 59, 59))
		или (НачалоПериода = Дата(Год(НачалоПериода), Месяц(НачалоПериода), 11) и КонецПериода = Дата(Год(НачалоПериода), Месяц(НачалоПериода), 20, 23, 59, 59))
		или (НачалоПериода = Дата(Год(НачалоПериода), Месяц(НачалоПериода), 1) и КонецПериода = КонецМесяца(НачалоПериода))	тогда
		Возврат ФормаОтчета.ЗаДекаду;
	Иначе
		Возврат ФормаОтчета.ЗаПроизвольныйПериод;
	КонецЕсли;
	
КонецФункции

Функция УстановитьПараметр(Настройки, Параметр, Значение, Использование = Истина) Экспорт
	
	ЗначениеПараметра = ПолучитьПараметр(Настройки, Параметр);
	
	Если ЗначениеПараметра <> Неопределено Тогда
		ЗначениеПараметра.Использование = Использование;
		ЗначениеПараметра.Значение      = Значение;
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

Функция ПолучитьПараметр(Настройки, Параметр) Экспорт
	
	ЗначениеПараметра = Неопределено;
	ПолеПараметр = ?(ТипЗнч(Параметр) = Тип("Строка"), Новый ПараметрКомпоновкиДанных(Параметр), Параметр);
	
	Если ТипЗнч(Настройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
	ИначеЕсли ТипЗнч(Настройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		Для Каждого ЭлементНастройки Из Настройки.Элементы Цикл
			Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И ЭлементНастройки.Параметр = ПолеПараметр Тогда
				ЗначениеПараметра = ЭлементНастройки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Настройки) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Для Каждого ЭлементНастройки Из Настройки.ПользовательскиеНастройки.Элементы Цикл
			Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И ЭлементНастройки.Параметр = ПолеПараметр Тогда
				ЗначениеПараметра = ЭлементНастройки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеПараметра = Неопределено Тогда
			ЗначениеПараметра = Настройки.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Настройки) = Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройки.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
	ИначеЕсли ТипЗнч(Настройки) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройки.Найти(ПолеПараметр);
	ИначеЕсли ТипЗнч(Настройки) = Тип("ОформлениеКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройки.НайтиЗначениеПараметра(ПолеПараметр);
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

Функция ДобавитьВыбранноеПоле(ЭлементСтруктуры, Знач Поле, Заголовок = Неопределено) Экспорт
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ВыбранныеПоля = ЭлементСтруктуры.Настройки.Выбор;
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиКомпоновкиДанных") Тогда
		ВыбранныеПоля = ЭлементСтруктуры.Выбор;
	Иначе
		ВыбранныеПоля = ЭлементСтруктуры;
	КонецЕсли;
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	ВыбранноеПоле = ВыбранныеПоля.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле = Поле;
	Если Заголовок <> Неопределено Тогда
		ВыбранноеПоле.Заголовок = Заголовок;
	КонецЕсли;
	
	Возврат ВыбранноеПоле;
	
КонецФункции

Функция ПолучитьИдентификаторОбъекта(Форма) Экспорт
	
	Возврат СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Форма.ИмяФормы, ".")[1];
	
КонецФункции

Функция ПростойТип(Значение) Экспорт
	
	ОписаниеПростыхТипов = Новый ОписаниеТипов("Дата, Строка, Булево, Число");
	
	Возврат ОписаниеПростыхТипов.СодержитТип(ТипЗнч(Значение));
	
КонецФункции

&НаСервере
Функция ПроверитьСчетПоПредприятиям(Счет, Предприятие) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	1 КАК Доступно
	|ИЗ
	|	РегистрСведений.ДоступностьСчетовПоПредприятиям КАК ДоступностьСчетовПоПредприятиям
	|ГДЕ
	|	ДоступностьСчетовПоПредприятиям.Счет = &Счет
	|	И ДоступностьСчетовПоПредприятиям.Пользователь = &Пользователь
	|	И (ДоступностьСчетовПоПредприятиям.ДоступныВсе
	|			ИЛИ ДоступностьСчетовПоПредприятиям.Предприятие = &Предприятие)";
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Счет", Счет);
	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции	

&НаСервере
Процедура ДобавитьОтборДоступныхПредприятийДляСчета(Отчет) Экспорт
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДоступностьСчетовПоПредприятиям.Предприятие,
	               |	ДоступностьСчетовПоПредприятиям.ДоступныВсе
	               |ИЗ
	               |	РегистрСведений.ДоступностьСчетовПоПредприятиям КАК ДоступностьСчетовПоПредприятиям
	               |ГДЕ
	               |	ДоступностьСчетовПоПредприятиям.Пользователь = &Пользователь
	               |	И ДоступностьСчетовПоПредприятиям.Счет = &Счет";
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Счет", Отчет.Счет);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДоступныВсеПредприятия = Ложь;
	СписокПредприятий = новый СписокЗначений;
	Для Каждого ТекПредприятие Из ПараметрыСеанса.ДоступныеПредприятия Цикл
		СписокПредприятий.Добавить(ТекПредприятие);
	КонецЦикла;
	Пока Выборка.Следующий() Цикл
		Если Выборка.ДоступныВсе Тогда
			ДоступныВсеПредприятия = Истина;
			Прервать;
		КонецЕсли;
		СписокПредприятий.Добавить(Выборка.Предприятие);
	КонецЦикла;
	
	Если Не ДоступныВсеПредприятия Тогда
		СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(Отчет.КомпоновщикНастроек, "Организация", СписокПредприятий, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВернутьЧерез(Содержание) Экспорт
	
	Позиция = Найти(Содержание, "**");
	Если Позиция Тогда
		Возврат Сред(Содержание, Позиция + 2, СтрДлина(Содержание) - 1);
	Иначе
		Позиция = Найти(Содержание, "ч/з");
		Если Позиция Тогда
			Возврат Сред(Содержание, Позиция + 3, СтрДлина(Содержание) - 1);
		Иначе
			Возврат "";			
		КонецЕсли;
	КонецЕсли;
	
КонецФункции	

Функция НайтиЭлементСтруктурыНастроек(Настройки, Имя) Экспорт
	
	Если ТипЗнч(Настройки) = Тип("ГруппировкаКомпоновкиДанных") Или ТипЗнч(Настройки) = Тип("ТаблицаКомпоновкиДанных") Или ТипЗнч(Настройки) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
		Если Настройки.Имя = Имя Тогда
			Возврат Настройки;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Настройки) = Тип("НастройкиКомпоновкиДанных") Или ТипЗнч(Настройки) = Тип("ГруппировкаКомпоновкиДанных") Или ТипЗнч(Настройки) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
		Для Каждого ТекЭлементСтруктуры Из Настройки.Структура Цикл
			Результат = НайтиЭлементСтруктурыНастроек(ТекЭлементСтруктуры, Имя);
			Если Результат <> Неопределено Тогда
				Возврат Результат
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Настройки) = Тип("ТаблицаКомпоновкиДанных") Тогда
		Для Каждого ТекЭлементСтруктуры Из Настройки.Строки Цикл
			Результат = НайтиЭлементСтруктурыНастроек(ТекЭлементСтруктуры, Имя);
			Если Результат <> Неопределено Тогда
				Возврат Результат
			КонецЕсли;
		КонецЦикла;
		Для Каждого ТекЭлементСтруктуры Из Настройки.Колонки Цикл
			Результат = НайтиЭлементСтруктурыНастроек(ТекЭлементСтруктуры, Имя);
			Если Результат <> Неопределено Тогда
				Возврат Результат
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	Возврат Неопределено;
	
КонецФункции

//Функция рекурсивно бежит по элементам структуры (группировки, таблицы) и ищет в каждой структуре элемент отбора с заданным представлением
//Первое найденное совпадение завершает поиск
//
// Параметры:
//		Настройки     - настройки СКД, группировки, таблицы
//		Представление - искомое представление
Функция НайтиЭлементОтбораКомпоновкиДанныхПоПредставлению(Настройки, Представление) Экспорт
	
	//*** Ищем в текущей настройке
	Если ТипЗнч(Настройки) <> Тип("ТаблицаКомпоновкиДанных") Тогда
		Для Каждого ЭлементОтбора Из Настройки.Отбор.Элементы Цикл
			Если ЭлементОтбора.Представление = Представление Тогда
				Возврат ЭлементОтбора;
			ИначеЕсли ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Для Каждого ЭлементГруппы Из ЭлементОтбора.Элементы Цикл
					Если ЭлементГруппы.Представление = Представление Тогда
						Возврат ЭлементГруппы;                                //глубже не спускаемся, надеюсь не понадобится
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//*** В текущей не нашли, ищем в подчиненных
	Если ТипЗнч(Настройки) = Тип("НастройкиКомпоновкиДанных") Или ТипЗнч(Настройки) = Тип("ГруппировкаКомпоновкиДанных") Или ТипЗнч(Настройки) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
		Для Каждого ЭлементСтруктуры Из Настройки.Структура Цикл
			Результат = НайтиЭлементОтбораКомпоновкиДанныхПоПредставлению(ЭлементСтруктуры, Представление);
			Если Результат <> Неопределено Тогда
				Возврат Результат
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Настройки) = Тип("ТаблицаКомпоновкиДанных") Тогда
		Для Каждого ЭлементСтруктуры Из Настройки.Строки Цикл
			Результат = НайтиЭлементОтбораКомпоновкиДанныхПоПредставлению(ЭлементСтруктуры, Представление);
			Если Результат <> Неопределено Тогда
				Возврат Результат
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ЭлементСтруктуры Из Настройки.Колонки Цикл
			Результат = НайтиЭлементОтбораКомпоновкиДанныхПоПредставлению(ЭлементСтруктуры, Представление);
			Если Результат <> Неопределено Тогда
				Возврат Результат
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

