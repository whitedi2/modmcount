///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ СО СЧЕТАМИ И СУБКОНТО

// Снимает/устанавливает активность проводок документа (бух. учет).
//
Процедура ПереключитьАктивностьПроводокБУ(Документ) Экспорт
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ПометкаУдаления") Тогда
		Возврат;
	КонецЕсли;

	ПроводкиДокумента = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	ПроводкиДокумента.Отбор.Регистратор.Установить(Документ);
	ПроводкиДокумента.Прочитать();

	КоличествоПроводок = ПроводкиДокумента.Количество();
	Если НЕ (КоличествоПроводок = 0) Тогда
		
		// Определяем текущую активность проводок по первой проводке
		ТекущаяАктивностьПроводок = ПроводкиДокумента[0].Активность;

		// Инвертируем текущую активность проводок
		ПроводкиДокумента.УстановитьАктивность(НЕ ТекущаяАктивностьПроводок);
		ПроводкиДокумента.ОбменДанными.Загрузка = Истина;
		ПроводкиДокумента.Записать();

	КонецЕсли;
		
КонецПроцедуры // ПереключитьАктивностьПроводокБУ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО СЧЕТАМИ И СУБКОНТО

// Процедура устанавливает субконто на счете. Если такое субконто на счете
// отсутствует, то ничего не делается.
//
// Параметры:
//		Счет - Счет, к которому относится субконто
//      Субконто - набор субконто
//		Номер или имя устанавливаемого субконто
//      Значение субконто - значение устанавливаемого субконто
//
Процедура УстановитьСубконто(Счет, Субконто, ИмяСубконто, ЗначениеСубконто) Экспорт

	Если НЕ ЗначениеЗаполнено(ИмяСубконто) Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваСчета = УправленческийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	
	Если ТипЗнч(ИмяСубконто) = Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные") Тогда
		
		ВидСубконто = ИмяСубконто;
		
		Если СвойстваСчета.ВидСубконто1 <> ВидСубконто
			И СвойстваСчета.ВидСубконто2 <> ВидСубконто
			И СвойстваСчета.ВидСубконто3 <> ВидСубконто Тогда
			
			Возврат;
			
		КонецЕсли;

	ИначеЕсли ТипЗнч(ИмяСубконто) = Тип("Число") Тогда

		Если ИмяСубконто > СвойстваСчета.КоличествоСубконто Тогда
			Возврат;
		КонецЕсли;

		ВидСубконто = СвойстваСчета["ВидСубконто" + ИмяСубконто];

	Иначе

		ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные[ИмяСубконто];

		Если СвойстваСчета.ВидСубконто1 <> ВидСубконто
			И СвойстваСчета.ВидСубконто2 <> ВидСубконто
			И СвойстваСчета.ВидСубконто3 <> ВидСубконто Тогда
			
			Возврат;
			
		КонецЕсли;

	КонецЕсли;
		
	Если ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
		
		Субконто.Вставить(ВидСубконто, ЗначениеСубконто);
		
	КонецЕсли;

КонецПроцедуры // УстановитьСубконто()

// Процедура устанавливает в проводке подразделение на счете, если по нему ведется учет по подразделениям
//
// Параметры:
//		Проводка - <запись регистра бухгалтерии> - проводка, в которой нужно установить подразделение
//      Подразделение - <ссылка на справочник подразделений> - устанавливаемое подразделение
//		ДтКт - <Строка> - если "Дт", подразделение устанавливается по дебету проводки, иначе по кредиту
//
Процедура УстановитьПодразделениеПроводки(Проводка, Подразделение, ДтКт = "Дт") Экспорт
	
	Если Проводка["Счет" + ДтКт].УчетПоПодразделениям Тогда
		Проводка["Подразделение" + ДтКт] = Подразделение;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает в проводке подразделения, если по счетам дебета и кредита ведется учет по подразделениям
//
// Параметры:
//		Проводка - <запись регистра бухгалтерии> - проводка, в которой нужно установить подразделения
//      ПодразделениеДт - <ссылка на справочник подразделений> - устанавливаемое подразделение по дебету
//      ПодразделениеКт - <ссылка на справочник подразделений> - устанавливаемое подразделение по кредиту
//
Процедура УстановитьПодразделенияПроводки(Проводка, ПодразделениеДт, ПодразделениеКт) Экспорт

	УстановитьПодразделениеПроводки(Проводка, ПодразделениеДт, "Дт");
	
	УстановитьПодразделениеПроводки(Проводка, ПодразделениеКт, "Кт");

КонецПроцедуры

Функция ПолучитьМассивСчетовССубсчетами(МассивСчетов, ОтборПоПризнакуСчетГруппа = Ложь, ОтборПоПризнакуВалютный = Неопределено, ОтборПоПризнакуЗабалансовый = Неопределено, СчетаИсключения = Неопределено)	Экспорт

	Если ОтборПоПризнакуСчетГруппа = Неопределено Тогда
		УсловиеПоСчтеамГруппам = "";
	Иначе
		УсловиеПоСчтеамГруппам = ?(ОтборПоПризнакуСчетГруппа, "И Хозрасчетный.ЗапретитьИспользоватьВПроводках", "И (НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках)");
	КонецЕсли; 
	
	Если ОтборПоПризнакуЗабалансовый = Неопределено Тогда
		УсловиеПоЗабалансовым = "";
	Иначе
		УсловиеПоЗабалансовым = ?(ОтборПоПризнакуЗабалансовый, "И Хозрасчетный.Забалансовый", "И (НЕ Хозрасчетный.Забалансовый)");
	КонецЕсли; 
	
	Если ОтборПоПризнакуВалютный = Неопределено Тогда
		УсловиеПоВалютным = "";
	Иначе
		УсловиеПоВалютным = ?(ОтборПоПризнакуВалютный, "И Хозрасчетный.Валютный", "И (НЕ Хозрасчетный.Валютный)");
	КонецЕсли; 
	
	Если СчетаИсключения = Неопределено ИЛИ СчетаИсключения.Количество() = 0 Тогда
		УсловиеПоИсключениям = "";
	Иначе
		УсловиеПоИсключениям = "И (НЕ Хозрасчетный.Ссылка В (&СчетаИсключения))";
	КонецЕсли; 
	
	Если МассивСчетов.Количество() = 0 Тогда
		УсловиеПоОтбору = "1 = 1";
	Иначе
		УсловиеПоОтбору = "Хозрасчетный.Ссылка В ИЕРАРХИИ(&МассивСчетов)";
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСчетов",    МассивСчетов);
	Запрос.УстановитьПараметр("СчетаИсключения", СчетаИсключения);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	" + УсловиеПоОтбору + "
	|	" + УсловиеПоСчтеамГруппам + "
	|	" + УсловиеПоВалютным + "
	|	" + УсловиеПоЗабалансовым + "
	|	" + УсловиеПоИсключениям + "
	|УПОРЯДОЧИТЬ ПО
	|	Хозрасчетный.Код
	|";
	
	МассивСчетовССубсчетами = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат МассивСчетовССубсчетами;

КонецФункции
 

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ДЛЯ РАСЧЕТА СУММ СПИСАНИЯ РБП

Функция РазностьДатВДнях(Дата1, Дата2)
	мДлинаСуток = 86400; // в секундах
	Возврат Окр((НачалоДня(Дата1) - НачалоДня(Дата2)) / мДлинаСуток);
КонецФункции

Функция СуммаСписанияЗаМесяц(СтатьяРасходовБудущихПериодов, Знач ДатаНачалаСписания, Знач ДатаОкончанияСписания, Остаток, ВспомогательныеДанные, мНачДата, мКонДата) Экспорт
	
	Если Остаток = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	ДатаНачалаСписания    = НачалоДня(ДатаНачалаСписания);
	ДатаОкончанияСписания = КонецДня(ДатаОкончанияСписания);
	
	ПоправкаНаВисокосныйГодВНачалеПериода = 0;
	ПоправкаНаВисокосныйГодВКонцеПериода  = 0;
	Если Лев(Строка(КонецМесяца(ДатаНачалаСписания)), 5) = "29.02" И НЕ Лев(Строка(ДатаНачалаСписания), 5) = "01.02" Тогда
		ПоправкаНаВисокосныйГодВНачалеПериода = -1;
	КонецЕсли;
	Если Лев(Строка(КонецМесяца(ДатаОкончанияСписания)), 5) = "29.02" Тогда
		ПоправкаНаВисокосныйГодВКонцеПериода = -1;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаНачалаСписания) Тогда
		Возврат 0;
		
	ИначеЕсли ДатаНачалаСписания > мКонДата Тогда
		Возврат 0;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаОкончанияСписания) Тогда
		Возврат 0;
		
	ИначеЕсли ДатаОкончанияСписания < мНачДата Тогда
		Возврат 0;
		
	ИначеЕсли ДатаОкончанияСписания < ДатаНачалаСписания Тогда
		Возврат 0;
		
	ИначеЕсли СтатьяРасходовБудущихПериодов.СпособПризнанияРасходов = Перечисления.СпособыПризнанияРасходов.ВОсобомПорядке Тогда
		Возврат 0;
		
	КонецЕсли;
	
	Если СтатьяРасходовБудущихПериодов.СпособПризнанияРасходов = Перечисления.СпособыПризнанияРасходов.ПоКалендарнымДням Тогда
		КоличествоДней = РазностьДатВДнях(ДатаОкончанияСписания, ДатаНачалаСписания) + 1;
		ЦенаДня = Остаток / КоличествоДней;
		Если КонецМесяца(ДатаОкончанияСписания) = КонецМесяца(ДатаНачалаСписания) Тогда 
			КоличествоДнейТекущегоМесяца = День(ДатаОкончанияСписания); 
			КоличествоДней = КоличествоДнейТекущегоМесяца;
			СуммаСписания  = Остаток;
		Иначе	
			КоличествоДнейТекущегоМесяца = РазностьДатВДнях(КонецМесяца(ДатаНачалаСписания), ДатаНачалаСписания) + 1; 
			СуммаСписания = ЦенаДня * КоличествоДнейТекущегоМесяца;
		КонецЕсли;
		
		Если Не ВспомогательныеДанные = Неопределено Тогда
			ВспомогательныеДанные.КоличествоМесяцевДней = КоличествоДней;
			ВспомогательныеДанные.КоличествоМесяцевДнейТекущегоПериода = КоличествоДнейТекущегоМесяца;
		КонецЕсли;
		
	Иначе
		
		ДоляПоследнегоМесяца = День(ДатаОкончанияСписания) / (День(КонецМесяца(ДатаОкончанияСписания)) + ПоправкаНаВисокосныйГодВКонцеПериода);
		Если КонецМесяца(ДатаНачалаСписания) = КонецМесяца(ДатаОкончанияСписания) Тогда
			ДоляТекущегоМесяца = ДоляПоследнегоМесяца;
			КоличествоМесяцев  = ДоляПоследнегоМесяца;
		Иначе
			ДоляТекущегоМесяца   = (РазностьДатВДнях(КонецМесяца(ДатаНачалаСписания), ДатаНачалаСписания) + 1 + ПоправкаНаВисокосныйГодВНачалеПериода) / (День(КонецМесяца(ДатаНачалаСписания)) + ПоправкаНаВисокосныйГодВНачалеПериода);
			КоличествоМесяцевСередины = 0;
			ТекущаяДата = ДобавитьМесяц(КонецМесяца(ДатаНачалаСписания), 1);
			Пока КонецМесяца(ДатаОкончанияСписания) >= ТекущаяДата Цикл
				КоличествоМесяцевСередины = КоличествоМесяцевСередины + 1;
				ТекущаяДата               = ДобавитьМесяц(ТекущаяДата, 1);
			КонецЦикла;
			КоличествоМесяцев = КоличествоМесяцевСередины - 1 + ДоляПоследнегоМесяца + ДоляТекущегоМесяца;
		КонецЕсли;
		
		СуммаСписания = ?(КоличествоМесяцев = 0, 0, Остаток * ДоляТекущегоМесяца / КоличествоМесяцев);
		
		Если Не ВспомогательныеДанные = Неопределено Тогда
			ВспомогательныеДанные.КоличествоМесяцевДней = КоличествоМесяцев;
			ВспомогательныеДанные.КоличествоМесяцевДнейТекущегоПериода = ДоляТекущегоМесяца;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Остаток > 0 Тогда
		Возврат Мин(СуммаСписания, Остаток);
	Иначе
		Возврат Макс(СуммаСписания, Остаток);
	КонецЕсли;
	
КонецФункции // СуммаСписанияЗаМесяц()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФОРМАМИ ДОКУМЕНТОВ ПО ДВИЖЕНИЮ ДЕНЕЖНЫХ СРЕДСТВ

Функция ПолучитьПодразделениеПоСчету(Подразделение, Счет, Организация, ПодразделениеПоУмолчанию = Неопределено) Экспорт

	Если НЕ Счет.УчетПоПодразделениям Тогда
		Подразделение = Неопределено;
		Возврат Подразделение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Подразделение) 
		И УправленческийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(Подразделение, Организация) Тогда
		Возврат Подразделение;
	КонецЕсли;
	
	Если ПодразделениеПоУмолчанию = Неопределено Тогда                                    
		ПодразделениеПоУмолчанию = УправленческийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
	КонецЕсли;

	Если ЗначениеЗаполнено(ПодразделениеПоУмолчанию) Тогда
		Если УправленческийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПодразделениеПоУмолчанию, Организация) Тогда
			Подразделение = ПодразделениеПоУмолчанию;
		Иначе
			Подразделение = Неопределено;
		КонецЕсли;
	Иначе
		Подразделение = Неопределено;
	КонецЕсли;
	
	Возврат Подразделение;
	
КонецФункции

Функция ПолучитьМассивСчетовДенежныхСредств(МассивСчетовОтбора, ОтборПоПризнакуВалютный = Ложь, СчетОтбораПоПризнакуВалютный = Неопределено, МассивСчетовИсключений = Неопределено) Экспорт
	
	МассивСчетов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСчетовОтбора"    , МассивСчетовОтбора);
	Запрос.УстановитьПараметр("МассивСчетовИсключений", МассивСчетовИсключений);
	
	Запрос.УстановитьПараметр("ОтбиратьПоПризнакуВалютный", ОтборПоПризнакуВалютный);
	   
	Если ТипЗнч(СчетОтбораПоПризнакуВалютный) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
		Запрос.УстановитьПараметр("Валютный", СчетОтбораПоПризнакуВалютный.Валютный);
	Иначе
		Запрос.УстановитьПараметр("Валютный", Ложь);
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет,
	|	Хозрасчетный.Код КАК Код,
	|	Хозрасчетный.Наименование КАК Наименование
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (&МассивСчетовОтбора)
	|	И (НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках)
	|	И (НЕ &ОтбиратьПоПризнакуВалютный
	|			ИЛИ Хозрасчетный.Валютный = &Валютный)
	|   И Хозрасчетный.Ссылка Не В (&МассивСчетовИсключений)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивСчетов.Добавить(Выборка.Счет);
	КонецЦикла;
	
	Возврат МассивСчетов;
	
КонецФункции


