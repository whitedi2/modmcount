// Функция проверяет возможность использования счета в проводках.
//
// Параметры:
//  Счет     - Проверяемый счет.
//  Сообщать - признак вывода сообщений.
//
// Возвращаемое значение:
//  Булево - возможность использования счета в проводках
//  
//
Функция СчетМожноИспользоватьВПроводках(Счет, Сообщать = Истина) Экспорт

	ДанныеСчета = УправленческийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	
	Если ТипЗнч(Счет) <> Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
		Возврат Ложь; // Неправильный тип
	КонецЕсли;

	Если Счет.Пустая() Тогда
		Возврат Истина; // Пустая ссылка может использоваться
	КонецЕсли;

	Если ДанныеСчета.ЗапретитьИспользоватьВПроводках Тогда

		Если Сообщать Тогда
			Предупреждение("Счет " + СокрЛП(ДанныеСчета.Код)+" """ + ДанныеСчета.Наименование + """ нельзя использовать в проводках.");
		КонецЕсли;

		Возврат Ложь; // Счет использовать в проводках нельзя

	КонецЕсли;

	Возврат Истина; // Счет можно использовать в проводках 

КонецФункции // СчетМожноИспользоватьВПроводках()

// Процедура устанавливает отборы в формах выбора субконто, такие как
// Организация, Контрагент и др.
//
// Параметры:
//  Элемент      - элемент управления, для которого устанавливается отбор
//  СтандартнаяОбработка - Булево, признак стандартной обработки выбора
//                 в элементе формы
//  СписокПараметров -СписокЗначений, в котором передаются параметры
//                 отбора для форм выбора партий, документов расчетов
//                 с контрагентами
//  ОграничениеТипаЭлемента - ОписаниеТипов, содержащее список допустимых
//                 типов элемента управления
//
Процедура ОбработатьВыборСубконто(Элемент,Элемент_Значение, СтандартнаяОбработка, Организация, СписокПараметров = Неопределено, ОграничениеТипаЭлемента = Неопределено) Экспорт
	
	Если НЕ ТипЗнч(ОграничениеТипаЭлемента) = Тип("ОписаниеТипов") Тогда
		
		ТипЭлемента = ТипЗнч(Элемент_Значение);
		Если ТипЭлемента = Неопределено Тогда
		    Возврат;
		КонецЕсли; 
		ОграничениеТипаЭлемента = Элемент.ОграничениеТипа;
		
	ИначеЕсли ОграничениеТипаЭлемента.Типы().Количество() > 0 Тогда
		
		ТипЭлемента = ТипЗнч(Элемент.Значение);
		Если ?(ТипЭлемента = Неопределено, Истина, не ОграничениеТипаЭлемента.СодержитТип(ТипЭлемента)) Тогда
			ТипЭлемента = ОграничениеТипаЭлемента.Типы()[0];
		КонецЕсли; 
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ТипЭлемента = УправленческийУчетКлиентСерверПереопределяемый.ТипЗначенияБанковскогоСчетаОрганизации() Тогда

		СтандартнаяОбработка = Ложь;
		УправленческийУчетКлиентПереопределяемый.ОткрытьФормуВыбораБанковскогоСчетОрганизации(Новый Структура("Владелец", Организация), Элемент);
		
	ИначеЕсли ТипЭлемента = УправленческийУчетКлиентСерверПереопределяемый.ТипПодразделения() Тогда

		СтандартнаяОбработка = Ложь;
		ИмяРеквизитаОрганизации = УправленческийУчетКлиентСерверПереопределяемый.ИмяРеквизитаОрганизацияПодразделения();
		Отбор = Новый Структура();
		Если ЗначениеЗаполнено(ИмяРеквизитаОрганизации) Тогда
			Отбор.Вставить(ИмяРеквизитаОрганизации, Организация);
		КонецЕсли;
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Отбор", Отбор);
		УправленческийУчетКлиентПереопределяемый.ОткрытьФормуВыбораПодразделения(ПараметрыФормы, Элемент);

	ИначеЕсли УправленческийУчетКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора().СодержитТип(ТипЭлемента) Тогда

		СтандартнаяОбработка = Ложь;
        ПараметрыФормы = Новый Структура;
		Отбор = Новый Структура;
		Если Организация <> Неопределено Тогда
			Отбор.Вставить("Организация", ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация));
		КонецЕсли;
		
		Если ТипЗнч(СписокПараметров) = Тип("Структура") И СписокПараметров.Свойство("Контрагент") Тогда
			Если ТипЗнч(СписокПараметров.Контрагент) =  Тип("СправочникСсылка.Контрагенты") Тогда
				Отбор.Вставить(УправленческийУчетКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаКонтрагентДоговора(), СписокПараметров.Контрагент);
			КонецЕсли;
		КонецЕсли; 
		
		ПараметрыФормы.Вставить("Отбор", Отбор);
		УправленческийУчетКлиентПереопределяемый.ОткрытьФормуВыбораДоговора(ПараметрыФормы, Элемент);

	ИначеЕсли ОграничениеТипаЭлемента = СписокПараметров.ПВХВидыСубконтоХозрасчетныеПартии 
	      ИЛИ ТипЭлемента = Тип("ДокументСсылка.Партия") Тогда

		СтандартнаяОбработка    = Ложь;
		ФормаВыбора=ПолучитьФорму("Документ.Партия.ФормаВыбора",,Элемент);

		Если ТипЗнч(СписокПараметров) = Тип("Структура") Тогда
			
			ФормаВыбора.Счет         = ?(СписокПараметров.Свойство("СчетУчета")		, СписокПараметров.СчетУчета	, Неопределено);
			ФормаВыбора.Номенклатура = ?(СписокПараметров.Свойство("Номенклатура")	, СписокПараметров.Номенклатура	, Неопределено);
			ФормаВыбора.Склад        = ?(СписокПараметров.Свойство("Склад")			, СписокПараметров.Склад		, Неопределено);
			
			Если СписокПараметров.Свойство("ЭтоНовыйДокумент")Тогда 
				Если СписокПараметров.ЭтоНовыйДокумент Тогда
					ФормаВыбора.КонПериода         = КонецДня(ТекущаяДата());
				Иначе
					ФормаВыбора.КонПериода         = СписокПараметров.Дата;
				КонецЕсли;
			Иначе
				ФормаВыбора.КонПериода = Неопределено; 
			КонецЕсли;
			
			Если СписокПараметров.Свойство("ВидСубконто") Тогда
				ФормаВыбора.ВидСубконто  = СписокПараметров.ВидСубконто;
			ИначеЕсли ОграничениеТипаЭлемента = СписокПараметров.ПВХВидыСубконтоХозрасчетныеПартииТипЗначения Тогда
				ФормаВыбора.ВидСубконто  = СписокПараметров.ПВХВидыСубконтоХозрасчетныеПартии;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ОграничениеТипаЭлемента =СписокПараметров.ПВХВидыСубконтоХозрасчетныеДокументыРасчетовСКонтрагентамиТипЗначения 
	      ИЛИ ТипЭлемента = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда

		Если ОграничениеТипаЭлемента = Неопределено Тогда
			ОграничениеТипаЭлемента = СписокПараметров.ПВХВидыСубконтоХозрасчетныеДокументыРасчетовСКонтрагентамиТипЗначения;
		КонецЕсли;   
		  
		СтандартнаяОбработка = Ложь;

		СтруктураПараметров  = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, КонецПериода, СчетДляОпределенияОстатков, СторонаСчета");

		Если ТипЗнч(СписокПараметров) = Тип("Структура") Тогда

			СтруктураПараметров.Вставить("Организация", Организация);

			Если СписокПараметров.Свойство("Контрагент") Тогда
				СтруктураПараметров.Вставить("Контрагент", СписокПараметров.Контрагент);
			КонецЕсли;

			Если СписокПараметров.Свойство("ДоговорКонтрагента") Тогда
				СтруктураПараметров.Вставить("ДоговорКонтрагента", СписокПараметров.ДоговорКонтрагента);
			КонецЕсли;

			Если СписокПараметров.Свойство("Дата") Тогда
				Если ТипЗнч(СписокПараметров.Дата) = Тип("Дата") Тогда
					СтруктураПараметров.Вставить("КонецПериода", СписокПараметров.Дата - 1);
				КонецЕсли;
			КонецЕсли;

			Если СписокПараметров.Свойство("СчетУчета") Тогда
				СтруктураПараметров.Вставить("СчетДляОпределенияОстатков", СписокПараметров.СчетУчета);
			КонецЕсли;

			Если СписокПараметров.Свойство("СторонаПроводки") Тогда
				СтруктураПараметров.Вставить("СторонаСчета", ?(СписокПараметров.СторонаПроводки = "Дт", 1, 0));
			КонецЕсли;
			
			Если СписокПараметров.Свойство("ЭтоНовыйДокумент") Тогда
				СтруктураПараметров.Вставить("ЭтоНовыйДокумент", СписокПараметров.ЭтоНовыйДокумент);
			КонецЕсли;

		КонецЕсли;

		УчетВзаиморасчетовКлиент.ВыборРасчетногоДокумента(СтруктураПараметров, Элемент, ОграничениеТипаЭлемента);

		Возврат;
	
	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.РегистрацииВНалоговомОргане") Тогда
		
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец",ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация)));
		ОткрытьФорму("Справочник.РегистрацииВНалоговомОргане.ФормаВыбора",ПараметрыФормы,Элемент);
	
	КонецЕсли;

КонецПроцедуры // ОбработатьВыборСубконто()

// Узнаем нужно ли что то перезаполнять и если нужно, то нужно ли задавать вопрос
//Процедура устанавливает два параметра: 
//ЗаполнятьСчета - метка о том нужно ли вообще что-либо перезаполнять
//ЗадаватьВопрос - в том случае если надо перезаполнять, то надо ли задавать вопрос
//				   о перезаполнении, если вопрос не будет задаваться то счета будет перезаполняться автом.
Процедура ПроверитьНеобходимостьПерезаполненияСчетовУчета(Знач ДокументОбъект, СтруктураОбязательныхПолей,СтруктураНеОбязательныхПолей, ЗадаватьВопрос, ЗаполнятьСчета) Экспорт
	ЗаполнятьСчета = Ложь;
	ЗадаватьВопрос = Ложь;
	
	//Проверяем заполнение обязательных	
	Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
		ЗначениеРеквизита = ДокументОбъект[КлючЗначение.Ключ];
		ЗначениеНовое = КлючЗначение.Значение; 
		
		Если (ЗначениеЗаполнено(ЗначениеРеквизита))И (ЗначениеРеквизита<>ЗначениеНовое)  Тогда
			ЗадаватьВопрос = Истина;
			ЗаполнятьСчета = Истина;
			Возврат;
		ИначеЕсли (НЕ ЗначениеЗаполнено(ЗначениеРеквизита)) Тогда
			ЗаполнятьСчета = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	//Проверяем заполнение не обязательных
	Для каждого КлючЗначение Из СтруктураНеОбязательныхПолей Цикл
		ЗначениеРеквизита = ДокументОбъект[КлючЗначение.Ключ];
		ЗначениеНовое = КлючЗначение.Значение; 
		
		Если ЗначениеЗаполнено(ЗначениеРеквизита) И (ЗначениеРеквизита<>ЗначениеНовое) Тогда
			ЗадаватьВопрос = Истина;
			ЗаполнятьСчета = Истина;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПроверитьНеобходимостьПерезаполненияСчетовУчета()
