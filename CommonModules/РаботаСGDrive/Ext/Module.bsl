
Функция ЗагрузитьФайлСервер(ИмяФайлаДляЗагрузки) Экспорт
	
	ПараметрыСоединения = Константы.сабGDriveParameters.Получить().Получить();
	
	client_id = ПараметрыСоединения.client_id;
	client_secret = ПараметрыСоединения.client_secret;
	access_token = ПараметрыСоединения.access_token;
	ContentType = ПолучитьТипКонтента(ИмяФайлаДляЗагрузки);
	folder_id = ПараметрыСоединения.folder_id;
	
	Boundary = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
	

	Файл = Новый Файл(ИмяФайлаДляЗагрузки);
	РазмерФайла = Файл.Размер();
	ИмяФайла = Файл.Имя;
	//Файл = Неопределено;
	
   	МассивФайловДляОбъединения = Новый Массив;
	
	
	имяФайлаОтправки1 = ПолучитьимяВременногоФайла("txt");    //Формируем начальный фрагмент файла POST-запроса
	ЗаписьТекста = Новый ЗаписьТекста(имяФайлаОтправки1, КодировкаТекста.ANSI);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Новый ЗаписьТекста(имяФайлаОтправки1, КодировкаТекста.UTF8,, Истина, Символы.ПС);
	
	// параметр "uid"
	
	ЗаписьТекста.Записать("--foo_bar_baz
							|Content-Type: application/json; charset=UTF-8
							|
							|{""title"":"""+ ИмяФайла + """,
							|""parents"": [{
    							|""id"": """ + folder_id +"""
  								|}]}
							|
							|--foo_bar_baz
							|Content-Type: " + ContentType + "
							|
							|");
	
	ЗаписьТекста.Закрыть();
	
	имяФайлаОтправки2 = ПолучитьимяВременногоФайла("txt");    //Формируем начальный фрагмент файла POST-запроса
	ЗаписьТекста = Новый ЗаписьТекста(имяФайлаОтправки2, КодировкаТекста.ANSI);
	ЗаписьТекста.Закрыть();
	
	ЗаписьТекста = Новый ЗаписьТекста(имяФайлаОтправки2, КодировкаТекста.UTF8,, Истина, Символы.ПС);
	
	// параметр "uid"
	ЗаписьТекста.Записать("|
							|--foo_bar_baz--");
	
	ЗаписьТекста.Закрыть();

	
	МассивИмен = Новый Массив;
	МассивИмен.Добавить(имяФайлаОтправки1);
	МассивИмен.Добавить(ИмяФайлаДляЗагрузки);
	МассивИмен.Добавить(имяФайлаОтправки2);
	
	ИмяФайлаОтправки = ПолучитьимяВременногоФайла();
	ОбъединитьФайлы(МассивИмен, ИмяФайлаОтправки);
	//Теперь сформированные фрагменты сообщения для сервера объединяем в один файл POST-запроса
	

	//Укажем длину POST-запроса Content-Length
    ФайлОтправки = Новый Файл(ИмяФайлаОтправки);
    РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер());
	
	
	СайтУРЛ = "www.googleapis.com";
	УРЛ = "/upload/drive/v2/files/";
	РезультатИмяФайла = ПолучитьИмяВременногоФайла();
	//ПараметрАвторизации = ПолучитьПараметрАвторизации();
	
	Соединение = Новый HTTPСоединение(СайтУРЛ, , , , , Истина);//"spreadsheets0.google.com"
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Authorization", "Bearer " + access_token);
	//Заголовки.Вставить("GData-Version", "3.0");
	Заголовки.Вставить("Content-Length", РазмерФайлаОтправки);
	Заголовки.Вставить("Content-Type", "multipart/form-data; boundary=""foo_bar_baz""");
	//Заголовки.Вставить("Slug", ИмяФайла);
	
	//Теперь можно отправлять GET или POST запросы гугловскому API.
	//Отправка POST Запроса
	Ответ = Соединение.ОтправитьДляОбработки(имяФайлаОтправки, УРЛ, РезультатИмяФайла, Заголовки);

	Возврат Ответ;
	
	
КонецФункции

Функция ПолучитьТипКонтента(ИмяФайлаДляЗагрузки)
	Расширение = ФайловыеФункцииКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяФайлаДляЗагрузки);
	
	Если Расширение = "xlx" или Расширение = "xlsx" Тогда
		ИмяТипа = "application/vnd.ms-excel";
	ИначеЕсли Расширение = "doc" или Расширение = "docx" Тогда
		ИмяТипа = "application/msword";
	ИначеЕсли Расширение = "pdf" Тогда
		ИмяТипа = "application/pdf";
	ИначеЕсли Расширение = "txt" Тогда
		ИмяТипа = "text/html";
	ИначеЕсли Расширение = "gif" Тогда
		ИмяТипа = "image/gif";
	ИначеЕсли Расширение = "jpg" Тогда
		ИмяТипа = "image/jpeg";
	ИначеЕсли Расширение = "png" Тогда
		ИмяТипа = "image/png";
	ИначеЕсли Расширение = "tif" Тогда
		ИмяТипа = "image/tiff";
	ИначеЕсли Расширение = "ico" Тогда
		ИмяТипа = "image/image/vnd.microsoft.icon";
	ИначеЕсли Расширение = "bmp" Тогда
		ИмяТипа = "image/vnd.wap.wbmp";
	ИначеЕсли Расширение = "avi" Тогда
		ИмяТипа = "video/mpeg";
	Иначе
		ИмяТипа = "multipart/mixed";
	КонецЕсли;
	
	Возврат ИмяТипа;

КонецФункции // ()

Процедура ВывестиСодержимоеHTML(СтруктураФайла, Успешно) Экспорт
	
	СтруктураУжеЗагруженногоФайла = ФайлУжеНаGDrive(СтруктураФайла.Ссылка);
	Если НЕ СтруктураУжеЗагруженногоФайла = Неопределено Тогда
		СтруктураФайла.Вставить("ETag", СтруктураУжеЗагруженногоФайла.Etag);
		СтруктураФайла.Вставить("File_ID", СтруктураУжеЗагруженногоФайла.FileID);
	Иначе
		ОтветЗагрузки = ЗагрузитьФайлСервер(СтруктураФайла.ИмяФайлаНаСервере);
		Если ОтветЗагрузки.КодСостояния = 200 Тогда //загружен успешно
			Etag = РаботаСGDrive.UnJSON(ОтветЗагрузки.Заголовки["ETag"]);
			СтруктураФайла.Вставить("ETag", Etag);
			СтруктураФайла.Вставить("File_ID", РаботаСGDrive.ПолучитьIDФайла(ETag));
			СоздатьЗаписьВРегистреФайлов(СтруктураФайла, СтруктураФайла.Ссылка);
		Иначе
			Успешно = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ФайлУжеНаGDrive(ФайлСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ФайлыGDrive.Etag,
	|	ФайлыGDrive.FileID
	|ИЗ
	|	РегистрСведений.ФайлыGDrive КАК ФайлыGDrive
	|ГДЕ
	|	ФайлыGDrive.Файл1С = &Файл1С";
	
	Запрос.УстановитьПараметр("Файл1С", ФайлСсылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Возврат Новый Структура("Etag, FileID", Выборка.Etag, Выборка.FileID) ;	
		
	КонецЦикла;
	
	Возврат Неопределено;
	

КонецФункции // ()

Процедура СоздатьЗаписьВРегистреФайлов(СтруктураФайла, ФайлСсылка)
	Запись = РегистрыСведений.ФайлыGDrive.СоздатьМенеджерЗаписи();
	Запись.Etag = СтруктураФайла.Etag;
	Запись.FileID = СтруктураФайла.File_ID;
	Запись.Файл1С = ФайлСсылка;
	Запись.ДатаЗагрузки = ТекущаяДата();
	Запись.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	Запись.Записать();
КонецПроцедуры

Функция ЕстьПараметрыGDrive() Экспорт

	Возврат ЗначениеЗаполнено(Константы.сабGDriveParameters.Получить()) И Константы.сабHTMLФормаПриОткрытииФайлала.Получить();

КонецФункции // ()

Функция ПолучитьИмяФайлаНаСервере(ФайлСсылка) Экспорт
	
	ИмяФайлаНаСервере = ФайловыеФункцииСлужебный.ПолныйПутьТома(ФайлСсылка.ТекущаяВерсияТом) + ФайлСсылка.ТекущаяВерсияПутьКФайлу;
	
	Файл = Новый Файл(ИмяФайлаНаСервере);
	Возврат Новый Структура("ФайлСуществует, ИмяФайлаНаСервере, Ссылка", Файл.Существует(), ИмяФайлаНаСервере, ФайлСсылка) ;

КонецФункции // ()

Процедура ОчитскаGDrive() Экспорт
	Если РаботаСGDrive.ЕстьПараметрыGDrive() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ФайлыGDrive.FileID
		|ИЗ
		|	РегистрСведений.ФайлыGDrive КАК ФайлыGDrive";
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выгрузить().ВыгрузитьКолонку("FileID");
		
		//очищаем записи регистра
		УдаленныеФайлы = ОчисткаФайловGDrive(Выборка);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ФайлыGDrive.Etag,
		|	ФайлыGDrive.FileID
		|ИЗ
		|	РегистрСведений.ФайлыGDrive КАК ФайлыGDrive
		|ГДЕ
		|	ФайлыGDrive.FileID В(&FileID)";
		
		Запрос.УстановитьПараметр("FileID", УдаленныеФайлы);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Запись = РегистрыСведений.ФайлыGDrive.СоздатьНаборЗаписей();
			Запись.Отбор.Etag.Установить(Выборка.Etag);
			Запись.Записать();
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры

Функция ОчисткаФайловGDrive(IDs)
	
	ПараметрыСоединения = Константы.сабGDriveParameters.Получить().Получить();
	
	client_id = ПараметрыСоединения.client_id;
	client_secret = ПараметрыСоединения.client_secret;
	access_token = ПараметрыСоединения.access_token;
	
	МассивУдаленныхID = Новый Массив;
	Для каждого File_ID Из IDs Цикл
		ХТТПЗапрос = Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
		ХТТПЗапрос.Open("DELETE", "https://www.googleapis.com/drive/v2/files/" + File_ID, 0);
		
		ХТТПЗапрос.setRequestHeader("Authorization", "Bearer " + access_token);
		ХТТПЗапрос.Send(); 
		Результат	= ХТТПЗапрос.ResponseText();
		Ответ		= РаботаСGDrive.UnJSON(Результат);
		
		Если НЕ ЗначениеЗаполнено(Ответ) Тогда //ответ пустая строка = успешно
			МассивУдаленныхID.Добавить(File_ID);		
		КонецЕсли;
	КонецЦикла; 
	Возврат МассивУдаленныхID;

КонецФункции


// ОБРАБОТКА МАССИВОВ JSON

//Функция имеет недостаток, она не проводит валидацию JSON-строки,
//поэтому если строка "битая" или неправильная, то результат непредсказуем. :-)
//В смысле — в результате работы парсинга будет возвращена какая-нибудь лабуда.
Функция UnJSON(СтрJSON) Экспорт
	Перем Значение;
	Если ПолучитьЗначениеJSON(СтрJSON,Значение)=0 Тогда
		Возврат Значение
	КонецЕсли;
	Возврат Неопределено
КонецФункции

Функция ПолучитьЗначениеJSON(СтрJSON,Значение,Позиция=1,Ключ="")
	Перем Кавычка;
	
	ЗначениеВСтроке="";
	Кавычек=0;
	Комментарий=Ложь;
	Строка=Ложь;
	
	Пока Позиция<=СтрДлина(СтрJSON) Цикл
		ХХ=Сред(СтрJSON,Позиция,2);
		Х=Лев(ХХ,1);
		Позиция=Позиция+1;
		
		Если Х>" " ИЛИ Строка Тогда //Отсекаем всякий хлам
			
			Если Комментарий Тогда
				//Это комментарий. Крутимся в цикле пока не встретится конец комментария
				Если ХХ="*/" Тогда
					//Комментарий закончился
					Комментарий=Ложь;
					Позиция=Позиция+1;
				КонецЕсли;
				
			ИначеЕсли Х="\" Тогда
				Позиция=Позиция+1;
				ХХ=ВРег(ХХ);
				Если ХХ="\""" Тогда ЗначениеВСтроке=ЗначениеВСтроке+""""
				ИначеЕсли ХХ="\\" Тогда ЗначениеВСтроке=ЗначениеВСтроке+"\"
				ИначеЕсли ХХ="\/" Тогда ЗначениеВСтроке=ЗначениеВСтроке+"/"
				ИначеЕсли ХХ="\B" Тогда ЗначениеВСтроке=ЗначениеВСтроке+Символ(8)
				ИначеЕсли ХХ="\F" Тогда ЗначениеВСтроке=ЗначениеВСтроке+Символы.ПФ //перевод формы (страницы)
				ИначеЕсли ХХ="\N" Тогда ЗначениеВСтроке=ЗначениеВСтроке+Символы.ПС //перевод строки
				ИначеЕсли ХХ="\R" Тогда ЗначениеВСтроке=ЗначениеВСтроке+Символы.ВК //возврат каретки
				ИначеЕсли ХХ="\T" Тогда ЗначениеВСтроке=ЗначениеВСтроке+Символы.ВТаб //символ вертикальной табуляции
				ИначеЕсли ХХ="\U" Тогда
					ЗначениеВСтроке=ЗначениеВСтроке+Символ(Hex2Число(Сред(СтрJSON,Позиция,4))); //шестнадцатиричное число
					Позиция=Позиция+4
				КонецЕсли;
				
			ИначеЕсли Строка Тогда
				//Если строка не закончилась - то пропускаем управляющие символы
				Если Х=Кавычка Тогда
					//Закончилась строка
					Строка=Ложь;
					Кавычек=Кавычек+1;
				Иначе
					ЗначениеВСтроке=ЗначениеВСтроке+Х;
				КонецЕсли;
				
			ИначеЕсли ХХ="/*" Тогда
				//Начался комментарий
				Комментарий=Истина;
				Позиция=Позиция+1;
				
			ИначеЕсли Найти("""'{}[]:,",Х)>0 Тогда
				Если Х="""" ИЛИ Х="'" Тогда
					//Началась строка
					//Строка - коллекция нуля или больше символов Unicode, заключенная в
					//двойные кавычки, используя "\" в качестве символа экранирования.
					//Символ представляется как односимвольная строка.
					//Похожий синтаксис используется в C и Java.
					Строка=Истина;
					Кавычка=Х;
					Кавычек=Кавычек+1;
					
				ИначеЕсли Х="{" Тогда
					//Начался объект
					//Объект - неупорядоченный набор пар ключ/значение.
					//Объект начинается с "{" и заканчивается "}".
					//Каждое имя сопровождается ":", пары ключ/значение разделяются ",".
					ОбъектКалендарь = Новый Соответствие;
					//Объект=Новый Структура;
					Пока Истина Цикл
						//Получим ключ и значение
						Ключ="";
						Режим=ПолучитьЗначениеJSON(СтрJSON,Значение,Позиция,Ключ);
						//0 - есть значение и не конец объекта (запятая)
						//1 - есть значение и конец объекта
						//2 - нет значения и не конец объекта (запятая)
						//3 - нет значения и конец объекта
						Если Режим=0 Тогда
							ОбъектКалендарь.Вставить(Ключ,Значение);
						ИначеЕсли Режим=1 Тогда
							ОбъектКалендарь.Вставить(Ключ,Значение);
							Прервать
						ИначеЕсли Режим=3 Тогда
							Прервать
						КонецЕсли;
					КонецЦикла;
					Значение=ОбъектКалендарь;
					Возврат 0
					
				ИначеЕсли Х="[" Тогда
					//Начался массив
					//Массив - упорядоченная коллекция значений.
					//Массив начинается с "[" и заканчивается "]".
					//Значения разделены ",".
					Массив=Новый Массив;
					Пока Истина Цикл
						Режим=ПолучитьЗначениеJSON(СтрJSON,Значение,Позиция);
						//0 - есть значение и не конец массива (запятая)
						//1 - есть значение и конец массива
						//2 - нет значения и не конец массива (запятая)
						//3 - нет значения и конец массива
						Если Режим=0 Тогда
							Массив.Добавить(Значение);
						ИначеЕсли Режим=1 Тогда
							Массив.Добавить(Значение);
							Прервать
						ИначеЕсли Режим=3 Тогда
							Прервать
						КонецЕсли;
					КонецЦикла;
					Значение=Массив;
					Возврат 0
					
				ИначеЕсли Х="]" ИЛИ Х="}" Тогда
					//Закончился массив/объект
					Если ЗначениеВСтроке="" И Кавычек=0 Тогда
						Возврат 3 //нет значения и конец массива/объекта
					Иначе
						Значение=ПолучитьЗначениеИзСтроки(ЗначениеВСтроке,Кавычек);
						Возврат 1 //есть значение и конец массива/объекта
					КонецЕсли;
					
				ИначеЕсли Х=":" Тогда
					Ключ=ЗначениеВСтроке;
					Возврат ПолучитьЗначениеJSON(СтрJSON,Значение,Позиция);
					
				Иначе
					// запятая
					Прервать
				КонецЕсли;
				
			Иначе
				ЗначениеВСтроке=ЗначениеВСтроке+Х;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Кавычек>0 Тогда
		Значение=ЗначениеВКавычках(ЗначениеВСтроке);
	Иначе
		Если ЗначениеВСтроке="" Тогда
			Возврат 2
		Иначе
			Значение=ЗначениеБезКавычек(ЗначениеВСтроке)
		КонецЕсли;
	КонецЕсли;
	Возврат 0
КонецФункции

Функция Hex2Число(Hex) Экспорт
	Стр=ВРег(СокрЛП(Hex));
	Dec=0;
	Для Х=1 По СтрДлина(Стр) Цикл
		Dec=Dec+Найти("123456789ABCDEF",Сред(Стр,Х,1))*Pow(16,СтрДлина(Стр)-Х)
	КонецЦикла;
	Возврат Dec
КонецФункции

Функция ПолучитьЗначениеИзСтроки(ЗначениеВСтроке,Кавычек)
	Если Кавычек>0 Тогда
		Возврат ЗначениеВКавычках(ЗначениеВСтроке)
	ИначеЕсли ЗначениеВСтроке="" Тогда
		Возврат Неопределено
	КонецЕсли;
	Возврат ЗначениеБезКавычек(ЗначениеВСтроке)
КонецФункции

Функция ЗначениеВКавычках(ЗначениеВСтроке)
	//Это или строка или дата.
	//Дата пока не обрабатывается (потом надо дописать)
	//Пока всегда возвращаем просто строку
	Возврат ЗначениеВСтроке
КонецФункции

Функция ЗначениеБезКавычек(ЗначениеВСтроке)
	//Это число, булево или null.
	//Хотя здесь могут быть и строки. Например: {Code:123}
	Стр=ВРег(ЗначениеВСтроке);
	Если Стр="TRUE" Тогда Возврат Истина
	ИначеЕсли Стр="FALSE" Тогда Возврат Ложь
	ИначеЕсли Стр="NULL" Тогда Возврат Неопределено
	КонецЕсли;
	
	//Пробежимся по предполагаемому "числу"
	Экспонента=Ложь;
	ХХ=" ";
	Для Индекс=1 По СтрДлина(Стр) Цикл
		Х=Сред(Стр,Индекс,1);
		Если Найти("0123456789.+-",Х) Тогда
			ХХ=ХХ+Х
		ИначеЕсли Х="E" Тогда
			Экспонента=Истина;
			УУ=XMLЗначение(Тип("Число"),ХХ);
			ХХ=" ";
		Иначе
			Возврат ЗначениеВСтроке //Это точно не число, а строка
		КонецЕсли;
	КонецЦикла;
	
	ХХ=XMLЗначение(Тип("Число"),ХХ);
	Если Экспонента Тогда
		ХХ=УУ*Pow(10,ХХ)
	КонецЕсли;
	
	Возврат ХХ
КонецФункции

Функция ПолучитьIDФайла(ETag) Экспорт
	
	ПараметрыСоединения = Константы.сабGDriveParameters.Получить().Получить();
	
	client_id = ПараметрыСоединения.client_id;
	client_secret = ПараметрыСоединения.client_secret;
	access_token = ПараметрыСоединения.access_token;
	
	ХТТПЗапрос = Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
	ХТТПЗапрос.Open("GET", "https://www.googleapis.com/drive/v2/files", 0);
	
	ХТТПЗапрос.setRequestHeader("Authorization", "Bearer " + access_token);
	ХТТПЗапрос.Send(); 
	Результат	= ХТТПЗапрос.ResponseText();
	Ответ		= РаботаСGDrive.UnJSON(Результат);
	
	File_ID = Неопределено;
	
	Для каждого ТекСоответствие Из Ответ["items"] Цикл
		Если UnJSON(ТекСоответствие["etag"]) = ETag Тогда
			File_ID = UnJSON(ТекСоответствие["id"]);
		КонецЕсли;
		
	КонецЦикла; 	
	
	Возврат File_ID;
	
КонецФункции // ()


Процедура ОбновитьToketDDrive() Экспорт
	Если РаботаСGDrive.ЕстьПараметрыGDrive() Тогда
		
		Хран = Константы.сабGDriveParameters.Получить();		
		СтруктураПараметров = Хран.Получить();
		
		
		ХТТПЗапрос = Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
		ХТТПЗапрос.Open("POST", "https://accounts.google.com/o/oauth2/token", 0);
		ХТТПЗапрос.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
		
		ПараметрыПОСТ =	"grant_type=refresh_token&client_id=" + СтруктураПараметров.client_id + "&client_secret=" + СтруктураПараметров.client_secret + "&refresh_token=" + СтруктураПараметров.refresh_token;	// предопределенный в документации
		ХТТПЗапрос.Send(ПараметрыПОСТ); 
		
		Результат	= ХТТПЗапрос.ResponseText();
		
		Ответ		= РаботаСGDrive.UnJSON(Результат);
		access_token		= Ответ.Получить("access_token");
		expires_in		= Ответ.Получить("expires_in");
		token_type		= Ответ.Получить("token_type");
		
		
		СтруктураПараметровНовая = Новый Структура;
		СтруктураПараметровНовая.Вставить("client_id", СтруктураПараметров.client_id);
		СтруктураПараметровНовая.Вставить("client_secret", СтруктураПараметров.client_secret);
		СтруктураПараметровНовая.Вставить("refresh_token", СтруктураПараметров.refresh_token);
		СтруктураПараметровНовая.Вставить("folder_id", СтруктураПараметров.folder_id);
		СтруктураПараметровНовая.Вставить("access_token", Ответ.Получить("access_token"));
		СтруктураПараметровНовая.Вставить("expires_in", Ответ.Получить("expires_in"));
		
		Хран = Новый ХранилищеЗначения(СтруктураПараметровНовая);;
		Константы.сабGDriveParameters.Установить(Хран);
	КонецЕсли;
	
	
КонецПроцедуры

