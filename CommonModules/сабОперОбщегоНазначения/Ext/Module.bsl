Функция ПодобратНоменклатуруПоШК(ШтрихКод) Экспорт
	
	Если СтрДлина(ШтрихКод) > 13 Тогда //гнит ЧЗ
		Если СтрНайти(ШтрихКод, "(") Тогда //полный гтин
			ШтрихКод = Сред(ШтрихКод, 6, 13);
		Иначе //гтин из вход эдо урезаннный
			ШтрихКод = Сред(ШтрихКод, 4, 13);		
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Номенклатура
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод В (&Штрихкод)";
	
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Номенклатура;
	КонецЦикла;
	
	Если Лев(ШтрихКод, 2) <> "21" Тогда //весовой код должен начинаться на 21
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Номенклатура
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод В (&Штрихкод)";
	
	Запрос.УстановитьПараметр("Штрихкод", Лев(ШтрихКод, 7));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//парсим вес
		КГ = Сред(ШтрихКод, 8, 2);
		Грамм = Сред(ШтрихКод, 10, 3);
		Попытка
			Количество = Число(КГ + "." + Грамм);
			Возврат Новый Структура("Номенклатура, Количество", ВыборкаДетальныеЗаписи.Номенклатура, Количество);
		Исключение
			Возврат Неопределено
		КонецПопытки;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции	

Функция ПолучитьДоговорКонтрагентаПоУмолчанию(Контрагент, ОрганизацияОтбор = Неопределено, ВидДоговора = Неопределено, Предприятие = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Контрагент) ИЛИ (НЕ ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") И НЕ ТипЗнч(Контрагент) = Тип("СправочникСсылка.Организации")) Тогда
		Возврат Новый Структура("Договор, Организация", Справочники.ДоговорыКонтрагентов.ПустаяСсылка(), Справочники.Организации.ПустаяСсылка());
	КонецЕсли;
	
	//Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
	//	Договор = Контрагент.ДоговорПоУмолчанию;
	//	Организация = Договор.Организация;
	//	Если НЕ ОрганизацияОтбор = Неопределено И НЕ ОрганизацияОтбор = Организация Тогда //неверный договор по-умолчанию
			Договор = Неопределено;
			Организация = Неопределено;	
	//	КонецЕсли; 
	//КонецЕсли;
	
	ВидДоговораМассив = Новый Массив;
	Если ТипЗнч(ВидДоговора) = Тип("Булево") Тогда
		Если ВидДоговора Тогда //договор покупателя
			ВидДоговораМассив.Добавить(Перечисления.ВидыДоговоровКонтрагентов.ПокупательОсновнойПродукции);
			ВидДоговораМассив.Добавить(Перечисления.ВидыДоговоровКонтрагентов.ПокупательПрочейПродукции);
			ВидДоговораМассив.Добавить(Перечисления.ВидыДоговоровКонтрагентов.ПрочиеПокупатели);
			ВидДоговораМассив.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаПродажу);
			ВидДоговораМассив.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаПродажу);
		Иначе
			ВидДоговораМассив.Добавить(Перечисления.ВидыДоговоровКонтрагентов.ПоставщикТоваров);
			ВидДоговораМассив.Добавить(Перечисления.ВидыДоговоровКонтрагентов.ПоставщикУслуг);
			ВидДоговораМассив.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
			ВидДоговораМассив.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
			ВидДоговораМассив.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
			ВидДоговораМассив.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СНеризедентом);
		КонецЕсли;
	Иначе
	    ВидДоговораМассив.Добавить(ВидДоговора);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Договор) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка КАК Договор,
		|	ДоговорыКонтрагентов.Организация КАК Организация,
		|	ДоговорыКонтрагентов.Статус КАК Статус,
		|	ДоговорыКонтрагентов.СтатьяДДС КАК СтатьяДДС,
		|	ДоговорыКонтрагентов.СрокДействия КАК ДатаОкончанияДоговора
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Владелец = &Владелец
		|	И ВЫБОР
		|			КОГДА &Организация = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ДоговорыКонтрагентов.Организация = &Организация
		|		КОНЕЦ
		|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
		|	И ВЫБОР
		|			КОГДА НЕОПРЕДЕЛЕНО В (&ВидДоговора)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ДоговорыКонтрагентов.ВидДоговора В (&ВидДоговора)
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &Предприятие = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ДоговорыКонтрагентов.Предприятие = &Предприятие
		|		КОНЕЦ";
		
		Запрос.УстановитьПараметр("Владелец", Контрагент);
		Запрос.УстановитьПараметр("Организация", ОрганизацияОтбор);
		Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыДоговоровКонтрагентов.Действует);
		Запрос.УстановитьПараметр("ВидДоговора", ВидДоговораМассив);
		Запрос.УстановитьПараметр("Предприятие", Предприятие);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Количество() = 1 Тогда
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Возврат Новый Структура("Договор, Организация, СтатьяДДС", ВыборкаДетальныеЗаписи.Договор, ВыборкаДетальныеЗаписи.Организация, ВыборкаДетальныеЗаписи.СтатьяДДС);
			КонецЦикла;
		КонецЕсли;
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		КоличествоНайденных = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ВыборкаДетальныеЗаписи.Статус = Перечисления.СтатусыДоговоровКонтрагентов.Действует И (ВыборкаДетальныеЗаписи.ДатаОкончанияДоговора = Дата('00010101') ИЛИ ВыборкаДетальныеЗаписи.ДатаОкончанияДоговора > ТекущаяДата()) Тогда
				КоличествоНайденных = КоличествоНайденных + 1;	
			КонецЕсли; 
		КонецЦикла;
		
		Если КоличествоНайденных = 1 Тогда
			Возврат Новый Структура("Договор, Организация, СтатьяДДС", ВыборкаДетальныеЗаписи.Договор, ВыборкаДетальныеЗаписи.Организация, ВыборкаДетальныеЗаписи.СтатьяДДС);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Новый Структура("Договор, Организация, СтатьяДДС", Договор, Организация, Неопределено);
	
	
КонецФункции

Функция ПолучитьСозданныеДокументыНаОСновании(ДокументОснование, СсылкаТекущего = Неопределено, ПроверяемыйТип = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПроверяемыйТип = Неопределено Тогда
		ПроверяемыйТип = Тип("Неопределено");
	КонецЕсли;
	
	//Проверим на уже созданные документы на основании
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УЧ_ВозвратТоваровПоставщику.Номер КАК Номер,
	|	УЧ_ВозвратТоваровПоставщику.Ссылка КАК Ссылка,
	|	NULL КАК Код
	|ИЗ
	|	Документ.УЧ_ВозвратТоваровПоставщику КАК УЧ_ВозвратТоваровПоставщику
	|ГДЕ
	|	УЧ_ВозвратТоваровПоставщику.ДокОснование = &ДокОснование
	|	И УЧ_ВозвратТоваровПоставщику.Проведен
	|	И ВЫБОР
	|			КОГДА &СсылкаТекущего = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ НЕ УЧ_ВозвратТоваровПоставщику.Ссылка = &СсылкаТекущего
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА НЕ &ПроверятьТип
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ТИПЗНАЧЕНИЯ(УЧ_ВозвратТоваровПоставщику.Ссылка) = &ПроверяемыйТип
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УЧ_ПоступлениеТоваров.Номер,
	|	УЧ_ПоступлениеТоваров.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.УЧ_ПоступлениеТоваров КАК УЧ_ПоступлениеТоваров
	|ГДЕ
	|	УЧ_ПоступлениеТоваров.ДокОснование = &ДокОснование
	|	И УЧ_ПоступлениеТоваров.Проведен
	|	И ВЫБОР
	|			КОГДА &СсылкаТекущего = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ НЕ УЧ_ПоступлениеТоваров.Ссылка = &СсылкаТекущего
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА НЕ &ПроверятьТип
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ТИПЗНАЧЕНИЯ(УЧ_ПоступлениеТоваров.Ссылка) = &ПроверяемыйТип
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УЧ_ПеремещениеТоваров.Номер,
	|	УЧ_ПеремещениеТоваров.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.УЧ_ПеремещениеТоваров КАК УЧ_ПеремещениеТоваров
	|ГДЕ
	|	УЧ_ПеремещениеТоваров.ДокОснование = &ДокОснование
	|	И УЧ_ПеремещениеТоваров.Проведен
	|	И ВЫБОР
	|			КОГДА &СсылкаТекущего = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ НЕ УЧ_ПеремещениеТоваров.Ссылка = &СсылкаТекущего
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА НЕ &ПроверятьТип
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ТИПЗНАЧЕНИЯ(УЧ_ПеремещениеТоваров.Ссылка) = &ПроверяемыйТип
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УЧ_ВыпускПродукции.Номер,
	|	УЧ_ВыпускПродукции.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.УЧ_ВыпускПродукции КАК УЧ_ВыпускПродукции
	|ГДЕ
	|	УЧ_ВыпускПродукции.ДокОснование = &ДокОснование
	|	И УЧ_ВыпускПродукции.Проведен
	|	И ВЫБОР
	|			КОГДА &СсылкаТекущего = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ НЕ УЧ_ВыпускПродукции.Ссылка = &СсылкаТекущего
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА НЕ &ПроверятьТип
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ТИПЗНАЧЕНИЯ(УЧ_ВыпускПродукции.Ссылка) = &ПроверяемыйТип
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УЧ_Реализация.Номер,
	|	УЧ_Реализация.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.УЧ_Реализация КАК УЧ_Реализация
	|ГДЕ
	|	УЧ_Реализация.ДокОснование = &ДокОснование
	|	И УЧ_Реализация.Проведен
	|	И ВЫБОР
	|			КОГДА &СсылкаТекущего = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ НЕ УЧ_Реализация.Ссылка = &СсылкаТекущего
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА НЕ &ПроверятьТип
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ТИПЗНАЧЕНИЯ(УЧ_Реализация.Ссылка) = &ПроверяемыйТип
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УЧ_СписаниеТоваров.Номер,
	|	УЧ_СписаниеТоваров.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.УЧ_СписаниеТоваров КАК УЧ_СписаниеТоваров
	|ГДЕ
	|	УЧ_СписаниеТоваров.ДокОснование = &ДокОснование
	|	И УЧ_СписаниеТоваров.Проведен
	|	И ВЫБОР
	|			КОГДА &СсылкаТекущего = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ НЕ УЧ_СписаниеТоваров.Ссылка = &СсылкаТекущего
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА НЕ &ПроверятьТип
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ТИПЗНАЧЕНИЯ(УЧ_СписаниеТоваров.Ссылка) = &ПроверяемыйТип
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	ДоговорыКонтрагентов.Ссылка,
	|	ДоговорыКонтрагентов.Код
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &СсылкаТекущего = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ НЕ ДоговорыКонтрагентов.Ссылка = &СсылкаТекущего
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА НЕ &ПроверятьТип
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ТИПЗНАЧЕНИЯ(ДоговорыКонтрагентов.Ссылка) = &ПроверяемыйТип
	|		КОНЕЦ
	|	И ДоговорыКонтрагентов.ДокументОснование = &ДокОснование
	|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	ДополнительныеСоглашенияДоговоров.Ссылка,
	|	ДополнительныеСоглашенияДоговоров.Код
	|ИЗ
	|	Справочник.ДополнительныеСоглашенияДоговоров КАК ДополнительныеСоглашенияДоговоров
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &СсылкаТекущего = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ НЕ ДополнительныеСоглашенияДоговоров.Ссылка = &СсылкаТекущего
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА НЕ &ПроверятьТип
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ТИПЗНАЧЕНИЯ(ДополнительныеСоглашенияДоговоров.Ссылка) = &ПроверяемыйТип
	|		КОНЕЦ
	|	И ДополнительныеСоглашенияДоговоров.ДокументОснование = &ДокОснование
	|	И ДополнительныеСоглашенияДоговоров.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПлатежноеПоручение.Номер,
	|	ПлатежноеПоручение.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|ГДЕ
	|	ПлатежноеПоручение.Проведен
	|	И ВЫБОР
	|			КОГДА &СсылкаТекущего = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ НЕ ПлатежноеПоручение.Ссылка = &СсылкаТекущего
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА НЕ &ПроверятьТип
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ТИПЗНАЧЕНИЯ(ПлатежноеПоручение.Ссылка) = &ПроверяемыйТип
	|		КОНЕЦ
	|	И ПлатежноеПоручение.Заявка = &ДокОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УЧ_ДвижениеДС.Номер,
	|	УЧ_ДвижениеДС.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.УЧ_ДвижениеДС КАК УЧ_ДвижениеДС
	|ГДЕ
	|	УЧ_ДвижениеДС.ДокОснование = &ДокОснование
	|	И УЧ_ДвижениеДС.Проведен
	|	И ВЫБОР
	|			КОГДА &СсылкаТекущего = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ НЕ УЧ_ДвижениеДС.Ссылка = &СсылкаТекущего
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА НЕ &ПроверятьТип
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ТИПЗНАЧЕНИЯ(УЧ_ДвижениеДС.Ссылка) = &ПроверяемыйТип
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Заказ = &ДокОснование
	|	И РеализацияТоваровУслуг.Проведен
	|	И ВЫБОР
	|			КОГДА &СсылкаТекущего = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ НЕ РеализацияТоваровУслуг.Ссылка = &СсылкаТекущего
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА НЕ &ПроверятьТип
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ТИПЗНАЧЕНИЯ(РеализацияТоваровУслуг.Ссылка) = &ПроверяемыйТип
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПередачаТоваров.Номер,
	|	ПередачаТоваров.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.ПередачаТоваров КАК ПередачаТоваров
	|ГДЕ
	|	ПередачаТоваров.Заказ = &ДокОснование
	|	И ПередачаТоваров.Проведен
	|	И ВЫБОР
	|			КОГДА &СсылкаТекущего = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ НЕ ПередачаТоваров.Ссылка = &СсылкаТекущего
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА НЕ &ПроверятьТип
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ТИПЗНАЧЕНИЯ(ПередачаТоваров.Ссылка) = &ПроверяемыйТип
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РозничнаяПродажа.Номер,
	|	РозничнаяПродажа.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.РозничнаяПродажа КАК РозничнаяПродажа
	|ГДЕ
	|	РозничнаяПродажа.Заказ = &ДокОснование
	|	И РозничнаяПродажа.Проведен
	|	И ВЫБОР
	|			КОГДА &СсылкаТекущего = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ НЕ РозничнаяПродажа.Ссылка = &СсылкаТекущего
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА НЕ &ПроверятьТип
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ТИПЗНАЧЕНИЯ(РозничнаяПродажа.Ссылка) = &ПроверяемыйТип
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетНаОплатуПокупателю.Номер,
	|	СчетНаОплатуПокупателю.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|ГДЕ
	|	СчетНаОплатуПокупателю.Заказ = &ДокОснование
	|	И СчетНаОплатуПокупателю.Проведен
	|	И ВЫБОР
	|			КОГДА &СсылкаТекущего = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ НЕ СчетНаОплатуПокупателю.Ссылка = &СсылкаТекущего
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА НЕ &ПроверятьТип
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ТИПЗНАЧЕНИЯ(СчетНаОплатуПокупателю.Ссылка) = &ПроверяемыйТип
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Д_ЗаявкаНаФинансирование.Номер,
	|	Д_ЗаявкаНаФинансирование.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.Д_ЗаявкаНаФинансирование КАК Д_ЗаявкаНаФинансирование
	|ГДЕ
	|	Д_ЗаявкаНаФинансирование.ДокОснование = &ДокОснование
	|	И ВЫБОР
	|			КОГДА &СсылкаТекущего = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ НЕ Д_ЗаявкаНаФинансирование.Ссылка = &СсылкаТекущего
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА НЕ &ПроверятьТип
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ТИПЗНАЧЕНИЯ(Д_ЗаявкаНаФинансирование.Ссылка) = &ПроверяемыйТип
	|		КОНЕЦ";
	Запрос.УстановитьПараметр("ДокОснование", ДокументОснование);
	Запрос.УстановитьПараметр("СсылкаТекущего", СсылкаТекущего);
	Запрос.УстановитьПараметр("ПроверятьТип", Не ПроверяемыйТип = Тип("Неопределено"));
	Запрос.УстановитьПараметр("ПроверяемыйТип", ПроверяемыйТип);
	
	Выборка = Запрос.Выполнить().Выгрузить();
	МассивСтруктур = Новый Массив;
	СтруктураДоков = Новый Структура;
	
	Для каждого ТекСтрока Из Выборка Цикл
		МассивСтруктур.Добавить(Новый Структура("Ссылка, Номер", ТекСтрока.Ссылка, ТекСтрока.Номер));
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат МассивСтруктур;	
	
	
КонецФункции

#Область РаботаСПочтойРасширенная

Процедура УстановитьСтатусыПредметов(ПисьмоОбъект) Экспорт
	ПредметПисьма = ПолучитьПредмет(ПисьмоОбъект);
	Для каждого ТекПредмет Из ПредметПисьма Цикл
		Если ТипЗнч(ТекПредмет.Предмет) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			Если Не ЗначениеЗаполнено(ТекПредмет.ПредметСтатус) ИЛИ ТекПредмет.ПредметСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.Создан") Тогда
				ПредметОбъект = ТекПредмет.Предмет.ПолучитьОбъект();
				ПредметОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.Отправлен");
				ПредметОбъект.Записать();
			КонецЕсли; 
		КонецЕсли; 	
	КонецЦикла;
КонецПроцедуры

Функция ПроверитьОтправкуПисьмаПоПредмету(Предмет) Экспорт
	
	СтатусыПисьмаОтправлено = Новый Массив;
	СтатусыПисьмаОтправлено.Добавить(Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее);
	СтатусыПисьмаОтправлено.Добавить(Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПредметыПапкиВзаимодействий.Взаимодействие,
	|	ПредметыПапкиВзаимодействий.Взаимодействие.СтатусПисьма КАК СтатусПисьма
	|ИЗ
	|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|ГДЕ
	|	ПредметыПапкиВзаимодействий.Предмет = &Предмет
	|	И ПредметыПапкиВзаимодействий.Взаимодействие.СтатусПисьма В (&СтатусыПисьмаОтправлено)";
	
	Запрос.УстановитьПараметр("Предмет", Предмет);
	Запрос.УстановитьПараметр("СтатусыПисьмаОтправлено", СтатусыПисьмаОтправлено);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Возврат Новый Структура("ПисьмоСсылка, СтатусПисьма", Выборка.Взаимодействие, Выборка.СтатусПисьма);
		
	КонецЦикла;
КонецФункции // ()

Функция ПолучитьПредмет(Письмо) Экспорт
	
	СтатусыПисьмаОтправлено = Новый Массив;
	СтатусыПисьмаОтправлено.Добавить(Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее);
	СтатусыПисьмаОтправлено.Добавить(Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПредметыПапкиВзаимодействий.Взаимодействие,
	|	ПредметыПапкиВзаимодействий.Взаимодействие.СтатусПисьма КАК СтатусПисьма,
	|	ПредметыПапкиВзаимодействий.Предмет,
	|	ПредметыПапкиВзаимодействий.Предмет.Статус
	|ИЗ
	|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|ГДЕ
	|	ПредметыПапкиВзаимодействий.Взаимодействие = &Письмо
	|	И ПредметыПапкиВзаимодействий.Взаимодействие.СтатусПисьма В(&СтатусыПисьмаОтправлено)";
	
	Запрос.УстановитьПараметр("Письмо", Письмо);
	Запрос.УстановитьПараметр("СтатусыПисьмаОтправлено", СтатусыПисьмаОтправлено);
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить();
	
	
КонецФункции // ()

#КонецОбласти 

#Область ЗагрузкаРеализацийИзУКМ
Процедура ЗагрузитьРеализацииИзУКМ() Экспорт
	
	
	
	//Дата вчера
	Дата = ТекущаяДата() - 24*60*60;
	
	//СтрокаСоединения = "DRIVER={MySQL ODBC 5.2 UNICODE Driver};SERVER=10.40.4.244;DATABASE=import;UID=root;PWD=CtHDbCGK.C;Option=3;";
	СтрокаСоединения = "DRIVER={MySQL ODBC 5.2 UNICODE Driver};SERVER=10.40.4.238;DATABASE=export_1c;UID=root;PWD=CtHDbCGK.C;Option=3;";
	
	Connection =Новый COMОбъект("ADODB.Connection");
	Connection.ConnectionString = СтрокаСоединения;
	Попытка
		Connection.Open();
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	//ТекстЗапроса = "SELECT 
	//			|    receipt_item.store,
	//			|    receipt_item.item,
	//			|    receipt_item.name,
	//			|    receipt_item.price,
	//			|    SUM(receipt_item.total_quantity * CASE WHEN receipt_item.type = 1 THEN 0 WHEN receipt_item.type = 2 THEN -1 ELSE 1 END * CASE WHEN receipt.type = 0 THEN 1 ELSE -1 END) as quantity_total,
	//			|    SUM(receipt_item.total          * CASE WHEN receipt_item.type = 1 THEN 0 WHEN receipt_item.type = 2 THEN -1 ELSE 1 END * CASE WHEN receipt.type = 0 THEN 1 ELSE -1 END) as sum_total,
	//			|    SUM(receipt_item.real_amount    * CASE WHEN receipt_item.type = 1 THEN 0 WHEN receipt_item.type = 2 THEN -1 ELSE 1 END * CASE WHEN receipt.type = 0 THEN 1 ELSE -1 END) as sum_real
	//			|FROM
	//			|    export_1c.receipt_item
	//			|    INNER JOIN export_1c.receipt 
	//			|        ON (receipt_item.receipt_header = receipt.id and receipt_item.cash_id = receipt.cash_id)   
	//			|WHERE
	//			|      receipt.date >= '&Date' and receipt.date <= '&Date 23-59-59'
	//			|      and receipt.result = 0
	//			|GROUP BY
	//			|     receipt_item.store,
	//			|     receipt_item.item,
	//			|     receipt_item.name,
	//			|     receipt_item.price
	//			| ORDER BY
	//			|     receipt_item.store";
	
	ТекстЗапроса = "SELECT 
	|    receipt_item.store,
	|    receipt_item.item,
	|    receipt_item.name,
	|    receipt_item.var,
	|    receipt_item.price,
	|    receipt.date AS date,
	|    receipt.id AS id,
	//|    receipt.type as receipt_type,
	//|    receipt.result,
	|    SUM(receipt_item.total_quantity * CASE WHEN receipt_item.type = 1 THEN 0 WHEN receipt_item.type = 2 THEN -1 ELSE 1 END * CASE WHEN receipt.type = 0 THEN 1 ELSE -1 END) as quantity_total,
	|    SUM(receipt_item.total          * CASE WHEN receipt_item.type = 1 THEN 0 WHEN receipt_item.type = 2 THEN -1 ELSE 1 END * CASE WHEN receipt.type = 0 THEN 1 ELSE -1 END) as sum_total,
	|    SUM(receipt_item.real_amount    * CASE WHEN receipt_item.type = 1 THEN 0 WHEN receipt_item.type = 2 THEN -1 ELSE 1 END * CASE WHEN receipt.type = 0 THEN 1 ELSE -1 END) as sum_real
	|FROM
	|    export_1c.receipt_item
	|    INNER JOIN export_1c.receipt 
	|        ON (receipt_item.receipt_header = receipt.id and receipt_item.cash_id = receipt.cash_id)   
	|WHERE
	|      receipt.date >= '&Date' and receipt.date <= '&Date 23-59-59'
	//|      and receipt_item.store = 'АГ-02'
	|      and receipt.result = 0
	|GROUP BY
	|     receipt.date,
	|     receipt.id,
	|     receipt_item.store,
	|     receipt_item.item,
	|     receipt_item.name,
	|     receipt_item.var,
	|     receipt_item.price
	| ORDER BY
	|     receipt.store,
	|     receipt.id,
	|     receipt.date";
	
	
	
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Date", Формат(Дата, "ДФ=гггг-ММ-дд"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Store", null);
	
	Попытка         
		RecordSet = Connection.Execute(ТекстЗапроса);
	Исключение 
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Продажи = Новый ТаблицаЗначений;
	Продажи.Колонки.Добавить("Магазин");
	Продажи.Колонки.Добавить("Артикул");
	Продажи.Колонки.Добавить("Наименование");
	Продажи.Колонки.Добавить("Цена");
	Продажи.Колонки.Добавить("Количество");
	Продажи.Колонки.Добавить("Сумма");
	Продажи.Колонки.Добавить("СуммаФакт");
	Продажи.Колонки.Добавить("ТипЧека");
	Продажи.Колонки.Добавить("ДатаЧека");
	Продажи.Колонки.Добавить("НомерЧека");
	Продажи.Колонки.Добавить("ШтрихКод");
	
	Пока RecordSet.EOF()=0 Цикл
		
		//Сообщить(RecordSet.Fields("rows_count").Value);
		
		НоваяСтрока = Продажи.Добавить();
		
		НоваяСтрока.ДатаЧека	= RecordSet.Fields("date").Value;
		НоваяСтрока.НомерЧека	= RecordSet.Fields("id").Value;
		НоваяСтрока.Магазин 	= RecordSet.Fields("store").Value;
		НоваяСтрока.Артикул 	= Формат(RecordSet.Fields("item").Value, "ЧГ=0");
		НоваяСтрока.Наименование= RecordSet.Fields("name").Value;
		НоваяСтрока.Цена 		= RecordSet.Fields("price").Value;
		НоваяСтрока.Количество 	= RecordSet.Fields("quantity_total").Value;
		НоваяСтрока.Сумма 		= RecordSet.Fields("sum_total").Value;
		НоваяСтрока.СуммаФакт 	= RecordSet.Fields("sum_real").Value;
		НоваяСтрока.ШтрихКод 	= RecordSet.Fields("var").Value;
		
		RecordSet.MoveNext();
	КонецЦикла;
	
	RecordSet.Close();
	Connection.Close();
	
	Продажи.Сортировать("Магазин, НомерЧека");
	ЗагрузитьЧекиНаСервере(Продажи, Дата);
	
	Продажи.Свернуть("Магазин, Артикул, Наименование, Цена, ШтрихКод", "Количество, Сумма, СуммаФакт");
	Продажи.Сортировать("Магазин, Артикул");
	ЗагрузитьДокументыНаСервере(Продажи, Дата);
	
	
КонецПроцедуры

Процедура ЗагрузитьЧекиНаСервере(Продажи, Дата)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ГруппаНеопознаннойНоменклатуры = Справочники.Номенклатура.НайтиПоКоду("601");
	//НачатьТранзакцию();
	ЧастноеЛицо = Справочники.Контрагенты.НайтиПоНаименованию("ЧАСТНОЕ ЛИЦО");
	
	Текдок_Магазин = "";
	Текдок_ТипЧека = "";
	Текдок_НомерЧека = Неопределено;
	ДокументОбъект = Неопределено;
	
	МассСоотв = НайтиНоменклатуруПоАртикулу();
	СоотвПоАртиулу = МассСоотв[0];
	СоотвНДС = МассСоотв[1];
	СоотвСтавокНДС = МассСоотв[2];
	СоотвПоДопСвойству = НайтиНоменклатуруДопСвойству("КОД КК УКМ (Номенклатура)");
	
	Для Каждого ТекСтрока Из Продажи Цикл
		
		//Шапка документа
		Если ТекСтрока.НомерЧека <> Текдок_НомерЧека Тогда
			Если ДокументОбъект <> Неопределено Тогда
				//Попытка
				//	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				//Исключение
				ДокументСоздан = ПроверитьСозданиеЧека(ДокументОбъект.Подразделение, ДокументОбъект.Дата, ДокументОбъект.НомерЧека);
				Если НЕ ДокументСоздан Тогда
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				КонецЕсли;
				
				//прервать;
				//КонецПопытки;
			КонецЕсли;
			Текдок_ТипЧека = ТекСтрока.ТипЧека;
			Текдок_Магазин = ТекСтрока.Магазин;
			Текдок_НомерЧека = ТекСтрока.НомерЧека;
			
			//Если ЗначениеЗаполнено(Реализация) Тогда
			//	ДокументОбъект = Реализация.ПолучитьОбъект();
			//Иначе	
			ДокументОбъект = Документы.сабЧек.СоздатьДокумент();
			//КонецЕсли; 
			
			ДокументОбъект.Дата = ТекСтрока.ДатаЧека;
			ДокументОбъект.НомерЧека = ТекСтрока.НомерЧека;
			ДокументОбъект.Подразделение = НайтиПодразделение(ТекСтрока.Магазин);
			Если Не ЗначениеЗаполнено(ДокументОбъект.Подразделение) Тогда
				ДокументОбъект.Подразделение = НайтиПодразделение(ТекСтрока.Магазин);			
			КонецЕсли;
			ДокументОбъект.Предприятие = ДокументОбъект.Подразделение.Владелец;
			ДокументОбъект.Организация = ДокументОбъект.Подразделение.Организация;
			ДокументОбъект.Склад = ДокументОбъект.Подразделение.Склад;
			//ДокументОбъект.Контрагент = ЧастноеЛицо;
			//ДокументОбъект.Счет = ПланыСчетов.Учетный.Счет6201();
			//ДокументОбъект.Комментарий = "#УКМ";
			
		КонецЕсли;
		
		//Заполнение ТЧ
		НоваяСтрокаТЧ = ДокументОбъект.Реализация.Добавить();
		НайденнаяНоменклатура = СоотвПоАртиулу.Получить(ТекСтрока.Артикул);
		Если Не ЗначениеЗаполнено(НайденнаяНоменклатура) Тогда
			НайденнаяНоменклатура = СоотвПоДопСвойству.Получить(СокрЛП(ТекСтрока.Артикул));
		КонецЕсли;
		//Если НЕ ЗначениеЗаполнено(НайденнаяНоменклатура) Тогда
		//	НовНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
		//	НовНоменклатура.Наименование = ТекСтрока.Наименование;
		//	НовНоменклатура.Код = ТекСтрока.Артикул;
		//	НовНоменклатура.Родитель = ГруппаНеопознаннойНоменклатуры;
		//	Попытка
		//		НовНоменклатура.Записать();
		//		НайденнаяНоменклатура = НовНоменклатура.Ссылка;
		//	Исключение
		//	КонецПопытки;
		//КонецЕсли;
		НоваяСтрокаТЧ.Наименование = НайденнаяНоменклатура;
		НоваяСтрокаТЧ.Количество = ТекСтрока.Количество;
		НоваяСтрокаТЧ.Цена = ТекСтрока.Цена;
		НоваяСтрокаТЧ.Сумма = ТекСтрока.Сумма;
		НоваяСтрокаТЧ.СуммаОтгрузки = ТекСтрока.СуммаФакт;
		НоваяСтрокаТЧ.АбсолютнаяСкидка = ТекСтрока.Сумма - ТекСтрока.СуммаФакт;
		//НоваяСтрокаТЧ.Склад = ДокументОбъект.Склад;
		
		Если ТипЗнч(НоваяСтрокаТЧ.Наименование) = Тип("СправочникСсылка.Номенклатура") Тогда
			НоваяСтрокаТЧ.СтавкаНДС = СоотвНДС.Получить(НоваяСтрокаТЧ.Наименование);
			Если ЗначениеЗаполнено(НоваяСтрокаТЧ.СтавкаНДС) Тогда
				Ставка = СоотвСтавокНДС.Получить(НоваяСтрокаТЧ.Наименование);
				НоваяСтрокаТЧ.СуммаНДС = (НоваяСтрокаТЧ.Количество * НоваяСтрокаТЧ.Цена) / (1 + Ставка/100) * (Ставка/100);
			КонецЕсли;
		КонецЕсли; 
		
		
		//НоваяСтрокаТЧ.
		
	КонецЦикла;
	
	Если НЕ ДокументОбъект = Неопределено Тогда
		ДокументСоздан = ПроверитьСозданиеЧека(ДокументОбъект.Подразделение, ДокументОбъект.Дата, ДокументОбъект.НомерЧека);
		Если НЕ ДокументСоздан Тогда //уже создан, не создавать, но может перезаписать стоит?
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

Процедура ЗагрузитьДокументыНаСервере(Продажи, Дата)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ГруппаНеопознаннойНоменклатуры = Справочники.Номенклатура.НайтиПоКоду("601");
	//НачатьТранзакцию();
	ЧастноеЛицо = Справочники.Контрагенты.НайтиПоНаименованию("ЧАСТНОЕ ЛИЦО");
	
	СчетТовары = ПланыСчетов.Учетный.Счет41();
	
	ЕдИзмШтуки = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоНаименованию("ШТ", Истина);
	
	Текдок_Магазин = "";
	Текдок_ТипЧека = "";
	ДокументОбъект = Неопределено;
	
	МассСоотв = НайтиНоменклатуруПоАртикулу();
	СоотвПоАртиулу = МассСоотв[0];
	СоотвНДС = МассСоотв[1];
	СоотвСтавокНДС = МассСоотв[2];
	СоотвСчетов = МассСоотв[3];
	
	СоотвПоДопСвойству = НайтиНоменклатуруДопСвойству("КОД КК УКМ (Номенклатура)");
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ПланыСчетов.Учетный.ПустаяСсылка());
	МассивТипов.Добавить(ПланыСчетов.Учетный.Счет43());
	Счет43 = ПланыСчетов.Учетный.Счет43();
	
	Для каждого ТекТип Из МассивТипов Цикл
		
		Для Каждого ТекСтрока Из Продажи Цикл
			
			
			НайденнаяНоменклатура = СоотвПоАртиулу.Получить(ТекСтрока.Артикул);
			Если Не ЗначениеЗаполнено(НайденнаяНоменклатура) Тогда
				НайденнаяНоменклатура = СоотвПоДопСвойству.Получить(СокрЛП(ТекСтрока.Артикул));
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(НайденнаяНоменклатура) Тогда
				НовНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
				НовНоменклатура.Наименование = ТекСтрока.Наименование;
				НовНоменклатура.Код = ТекСтрока.Артикул;
				НовНоменклатура.Родитель = ГруппаНеопознаннойНоменклатуры;
				НовНоменклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
				НовНоменклатура.Счет10 = СчетТовары;
				НовНоменклатура.ЕдиницаИзмерения = ЕдИзмШтуки;
				Попытка
					НовНоменклатура.Записать();
					НайденнаяНоменклатура = НовНоменклатура.Ссылка;
					СоотвПоДопСвойству.Вставить(ТекСтрока.Артикул, НовНоменклатура.Ссылка); 
					СоотвПоАртиулу.Вставить(ТекСтрока.Артикул, НовНоменклатура.Ссылка); 
				Исключение
				КонецПопытки;
			КонецЕсли;
			
			ТекСчетНом = СоотвСчетов.Получить(НайденнаяНоменклатура);
			
			Если ТекТип = Счет43 Тогда
				Если НЕ ТекТип = ТекСчетНом Тогда
					Продолжить;			
				КонецЕсли;
				Комментарий = "#УКМ -СП"
			Иначе
				Если ТекСчетНом = Счет43 Тогда
					Продолжить;				
				КонецЕсли;
				Комментарий = "#УКМ"
			КонецЕсли;
			
			//Шапка документа
			Если ТекСтрока.Магазин <> Текдок_Магазин Тогда
				Если ДокументОбъект <> Неопределено Тогда
					//Попытка
					//	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
					//Исключение
					ДокументСоздан = ПроверитьСозданиеРеализации(ДокументОбъект.ВидДеятельности, ДокументОбъект.Дата, Комментарий);
					Если НЕ ДокументСоздан Тогда
						ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
					КонецЕсли;
					
					//прервать;
					//КонецПопытки;
				КонецЕсли;
				//Текдок_ТипЧека = ТекСтрока.ТипЧека;
				Текдок_Магазин = ТекСтрока.Магазин;
				
				//Если ЗначениеЗаполнено(Реализация) Тогда
				//	ДокументОбъект = Реализация.ПолучитьОбъект();
				//Иначе	
				ДокументОбъект = Документы.УЧ_Реализация.СоздатьДокумент();
				//КонецЕсли; 
				
				ДокументОбъект.Дата = НачалоДня(Дата)+23*60*60;;
				ДокументОбъект.ВидДеятельности = НайтиПодразделение(ТекСтрока.Магазин);
				ДокументОбъект.Предприятие = ДокументОбъект.ВидДеятельности.Владелец;
				ДокументОбъект.Организация = ДокументОбъект.ВидДеятельности.Организация;
				ДокументОбъект.Склад = ДокументОбъект.ВидДеятельности.Склад;
				ДокументОбъект.Контрагент = ЧастноеЛицо;
				ДокументОбъект.Счет = ПланыСчетов.Учетный.Счет6201();
				ДокументОбъект.Комментарий = Комментарий;
				ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРеализация.ZОтчет;
				
			КонецЕсли;
			
			//Заполнение ТЧ
			НоваяСтрокаТЧ = ДокументОбъект.Реализация.Добавить();
			НоваяСтрокаТЧ.Наименование = НайденнаяНоменклатура;
			НоваяСтрокаТЧ.Количество = ТекСтрока.Количество;
			НоваяСтрокаТЧ.Цена = ТекСтрока.Цена;
			НоваяСтрокаТЧ.Сумма = ТекСтрока.Сумма;
			НоваяСтрокаТЧ.СуммаОтгрузки = ТекСтрока.СуммаФакт;
			НоваяСтрокаТЧ.АбсолютнаяСкидка = ТекСтрока.Сумма - ТекСтрока.СуммаФакт;
			НоваяСтрокаТЧ.Склад = ДокументОбъект.Склад;
			НоваяСтрокаТЧ.ШтрихКод = ТекСтрока.ШтрихКод;
			
			Если ТипЗнч(НоваяСтрокаТЧ.Наименование) = Тип("СправочникСсылка.Номенклатура") Тогда
				НоваяСтрокаТЧ.СтавкаНДС = СоотвНДС.Получить(НоваяСтрокаТЧ.Наименование);
				Если ЗначениеЗаполнено(НоваяСтрокаТЧ.СтавкаНДС) Тогда
					Ставка = СоотвСтавокНДС.Получить(НоваяСтрокаТЧ.Наименование);
					НоваяСтрокаТЧ.СуммаНДС = (НоваяСтрокаТЧ.Количество * НоваяСтрокаТЧ.Цена) / (1 + Ставка/100) * (Ставка/100);
				КонецЕсли;
			КонецЕсли; 
			
			
			//НоваяСтрокаТЧ.
			
		КонецЦикла;
	КонецЦикла; 
	
	
	//Попытка
	//	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	//Исключение
	Если НЕ ДокументОбъект = Неопределено Тогда
		ДокументСоздан = ПроверитьСозданиеРеализации(ДокументОбъект.ВидДеятельности, ДокументОбъект.Дата, Комментарий);
		Если НЕ ДокументСоздан Тогда //уже создан, не создавать, но может перезаписать стоит?
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	КонецЕсли;
	//КонецПопытки;
	//ЗафиксироватьТранзакцию();
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

Функция НайтиПодразделение(КодУКМ)
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СтруктураПредприятияДополнительныеРеквизиты.Ссылка
	|ИЗ
	|	Справочник.СтруктураПредприятия.ДополнительныеРеквизиты КАК СтруктураПредприятияДополнительныеРеквизиты
	|ГДЕ
	|	СтруктураПредприятияДополнительныеРеквизиты.Свойство = &Свойство
	|	И СтруктураПредприятияДополнительныеРеквизиты.Значение = &Значение";
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Код УКМ (Подразделение)"));
	Запрос.УстановитьПараметр("Значение", КодУКМ);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция НайтиНоменклатуруПоАртикулу() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.Код,
	|	Номенклатура.СтавкаНДС,
	|	Номенклатура.СтавкаНДС.Ставка КАК Ставка,
	|	Номенклатура.Счет10
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ЭтоГруппа = ЛОЖЬ";
	
	//Запрос.УстановитьПараметр("Артикул", Артикул);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Соотв = Новый Соответствие;
	Соотв2 = Новый Соответствие;
	Соотв3 = Новый Соответствие;
	Соотв4 = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		Соотв.Вставить(Выборка.Код, Выборка.Ссылка);	
		Соотв2.Вставить(Выборка.Ссылка, Выборка.СтавкаНДС);	
		Соотв3.Вставить(Выборка.Ссылка, Выборка.Ставка);	
		Соотв4.Вставить(Выборка.Ссылка, Выборка.Счет10);	
		
	КонецЦикла;
	Соотв.Вставить(Неопределено, Справочники.Номенклатура.ПустаяСсылка());
	Соотв.Вставить(NULL, Справочники.Номенклатура.ПустаяСсылка());
	Соотв.Вставить("", Справочники.Номенклатура.ПустаяСсылка());
	
	МассСоотв = Новый Массив;
	МассСоотв.Добавить(Соотв);
	МассСоотв.Добавить(Соотв2);
	МассСоотв.Добавить(Соотв3);
	МассСоотв.Добавить(Соотв4);
	
	Возврат МассСоотв;
	
КонецФункции // ()

Функция НайтиНоменклатуруДопСвойству(НаименованиеСвойства) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	ДополнительныеСведения.Значение КАК Код
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО ДополнительныеСведения.Объект = Номенклатура.Ссылка
	|ГДЕ
	|	Номенклатура.ЭтоГруппа = ЛОЖЬ
	|	И ДополнительныеСведения.Свойство.Наименование = &НаименованиеСвойства";
	
	Запрос.УстановитьПараметр("НаименованиеСвойства", НаименованиеСвойства);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Соотв = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		Соотв.Вставить(СокрЛП(Выборка.Код), Выборка.Ссылка);	
	КонецЦикла;
	
	Соотв.Вставить(Неопределено, Справочники.Номенклатура.ПустаяСсылка());
	Соотв.Вставить(NULL, Справочники.Номенклатура.ПустаяСсылка());
	Соотв.Вставить("", Справочники.Номенклатура.ПустаяСсылка());
	
	Возврат Соотв;
	
КонецФункции // ()

Функция ПроверитьСозданиеРеализации(Подразделение, ДатаДокумента, ВидДока)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	УЧ_Реализация.Ссылка
	|ИЗ
	|	Документ.УЧ_Реализация КАК УЧ_Реализация
	|ГДЕ
	|	УЧ_Реализация.ВидДеятельности = &ВидДеятельности
	|	И УЧ_Реализация.Дата МЕЖДУ &Дата1 И &Дата2
	|	И УЧ_Реализация.Комментарий = &ВидДока";
	
	Запрос.УстановитьПараметр("ВидДеятельности", Подразделение);
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ДатаДокумента));
	Запрос.УстановитьПараметр("Дата2", КонецДня(ДатаДокумента));
	Запрос.УстановитьПараметр("ВидДока", ВидДока);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Истина;
		
		
	КонецЦикла;
	
	Возврат Ложь;	
	
КонецФункции // ()

Функция ПроверитьСозданиеЧека(Подразделение, ДатаДокумента, НомерДока)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	сабЧек.Ссылка
	               |ИЗ
	               |	Документ.сабЧек КАК сабЧек
	               |ГДЕ
	               |	сабЧек.Дата = &Дата
	               |	И сабЧек.Подразделение = &Подразделение
	               |	И сабЧек.НомерЧека = &НомерЧека";
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Дата", ДатаДокумента);
	Запрос.УстановитьПараметр("НомерЧека", НомерДока);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Истина;
	КонецЦикла;
	
	Возврат Ложь;	
	
КонецФункции // ()

#КонецОбласти

Процедура РаспределитьПроводкиПоДокументамОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	Если Не Источник.Предприятие.УчетнаяПолитика.РаспределятьПроводкиПоДокументамТоварооборота Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_Реализация") Тогда
		Если Источник.ВидОперации = Перечисления.ВидыОперацийРеализация.ZОтчет Тогда
			ЕстьКонтрики = Ложь;
			Для каждого ТекСтрока Из Источник.Товары Цикл
				Если ЗначениеЗаполнено(ТекСтрока.Контрагент) И НЕ ТекСтрока.Контрагент = Источник.Контрагент Тогда
					ЕстьКонтрики = Истина;
				КонецЕсли;
			КонецЦикла;
			Если Не ЕстьКонтрики Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	Попытка
		СтруктураСчетовСубконто = Источник.СчетаДляРаспределения();	
	Исключение
		Возврат;
	КонецПопытки;
	
	Предприятия = Новый Массив;
	Предприятия.Добавить(Источник.Предприятие);
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_ДвижениеДС") Тогда
		Для каждого ТекСтрока Из Источник.Проводки Цикл
			Если ЗначениеЗаполнено(ТекСтрока.ФинЦФО) И Предприятия.Найти(ТекСтрока.ФинЦФО) = Неопределено Тогда
				Предприятия.Добавить(ТекСтрока.ФинЦФО);			
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	СчетаДляРаспределения = СтруктураСчетовСубконто.СчетаДляРаспределения;
	Субконто1Массив = СтруктураСчетовСубконто.Субконто1Массив;
	Субконто2Массив = СтруктураСчетовСубконто.Субконто2Массив;
	ЭтоСторно = ?(СтруктураСчетовСубконто.Свойство("ЭтоСторно"), СтруктураСчетовСубконто.ЭтоСторно, Ложь);
	СубконтоДокумент = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Документ", Истина);
	ЭтоОплата = ?(СтруктураСчетовСубконто.Свойство("ЭтоОплата"), СтруктураСчетовСубконто.ЭтоОплата, Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетныйОстатки.Счет КАК Счет,
	|	УчетныйОстатки.Субконто1 КАК Субконто1,
	|	УчетныйОстатки.Субконто2 КАК Субконто2,
	|	УчетныйОстатки.Субконто3 КАК Субконто3,
	|	УчетныйОстатки.Предприятия КАК Предприятия,
	|	УчетныйОстатки.Подразделение КАК Подразделение,
	|	УчетныйОстатки.СуммаОстатокКт КАК СуммаОстатокДт,
	|	УчетныйОстатки.СуммаОстатокДт КАК СуммаОстатокКт
	|ИЗ
	|	РегистрБухгалтерии.Учетный.Остатки(
	|			&Период,
	|			Счет В (&Счета),
	|			,
	|			Субконто1 В (&Субконто1)
	|				И Субконто2 В (&Субконто2)
	|				И Предприятия В (&Предприятие)) КАК УчетныйОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	УчетныйОстатки.Субконто3.Дата";
	Запрос.УстановитьПараметр("Период", Источник.МоментВремени());
	Запрос.УстановитьПараметр("Предприятие", Предприятия);
	Запрос.УстановитьПараметр("Счета", СчетаДляРаспределения);
	Запрос.УстановитьПараметр("Субконто1", Субконто1Массив);
	Запрос.УстановитьПараметр("Субконто2", Субконто2Массив);
	
	ВыборкаИсход = Запрос.Выполнить().Выгрузить();
	Выборка = ВыборкаИсход.Скопировать();
	
	ДвиженияВыгрузка = Источник.Движения.Учетный.Выгрузить();
	
	ВремТЧ = Источник.Движения.Учетный.Выгрузить();
	ВремТЧ.Очистить();
	
	НоваяТЧ = ВремТЧ.Скопировать();
	
	Для каждого ТекСтрока Из ДвиженияВыгрузка Цикл
		НоваяСтрока = ВремТЧ.Добавить();			
		//Если НЕ СчетаДляРаспределения.Найти(ТекСтрока.СчетДт) = Неопределено Тогда
		ДанныеСчета = УправленческийУчетПовтИсп.ПолучитьСвойстваСчета(ТекСтрока.СчетДт, ТекСтрока.Предприятия);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		Для Индекс1 = 1 По 3 Цикл // в выгружаемой таблице значениек кривые индексы субконто(
			Если ДанныеСчета["ВидСубконто" + Индекс1] = Неопределено Тогда
				Продолжить;						
			КонецЕсли;
			Для Индекс2 = 1 По 3 Цикл
				//Если ДанныеСчета["ВидСубконто" + Индекс1 + "ТипЗначения"].СодержитТип(ТипЗнч(ТекСтрока["СубконтоДт" + Индекс2])) И Не ТекСтрока["СубконтоДт" + Индекс2] = Неопределено Тогда
				Если ДанныеСчета["ВидСубконто" + Индекс1] = ТекСтрока["ВидСубконтоДт" + Индекс2] Тогда
					НоваяСтрока["СубконтоДт" + Индекс1] = ТекСтрока["СубконтоДт" + Индекс2];
					НоваяСтрока["ВидСубконтоДт" + Индекс1] = ТекСтрока["ВидСубконтоДт" + Индекс2];
				КонецЕсли;
			КонецЦикла; 
		КонецЦикла; 
		//ИначеЕсли НЕ СчетаДляРаспределения.Найти(ТекСтрока.СчетКт) = Неопределено Тогда
		ДанныеСчета = УправленческийУчетПовтИсп.ПолучитьСвойстваСчета(ТекСтрока.СчетКт, ТекСтрока.Предприятия);
		//НоваяСтрока = ВремТЧ.Добавить();			
		//ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		Для Индекс1 = 1 По 3 Цикл // в выгружаемой таблице значениек кривые индексы субконто(
			Если ДанныеСчета["ВидСубконто" + Индекс1] = Неопределено Тогда
				Продолжить;						
			КонецЕсли;
			Для Индекс2 = 1 По 3 Цикл
				//Если ДанныеСчета["ВидСубконто" + Индекс1 + "ТипЗначения"].СодержитТип(ТипЗнч(ТекСтрока["СубконтоКт" + Индекс2])) И Не ТекСтрока["СубконтоКт" + Индекс2] = Неопределено Тогда
				Если ДанныеСчета["ВидСубконто" + Индекс1] = ТекСтрока["ВидСубконтоКт" + Индекс2] Тогда
					НоваяСтрока["СубконтоКт" + Индекс1] = ТекСтрока["СубконтоКт" + Индекс2];
					НоваяСтрока["ВидСубконтоКт" + Индекс1] = ТекСтрока["ВидСубконтоКт" + Индекс2];
				КонецЕсли;
			КонецЦикла; 
		КонецЦикла; 
		//КонецЕсли;			
	КонецЦикла;

	
	Для каждого ТекСтрока Из ВремТЧ Цикл
		Если Не СчетаДляРаспределения.Найти(ТекСтрока.СчетДт) = Неопределено Тогда
			Префикс = "Дт";
			НужноПринудительноеРаспределение = Ложь;
		ИначеЕсли Не СчетаДляРаспределения.Найти(ТекСтрока.СчетКт) = Неопределено Тогда
			Префикс = "Кт";
			НужноПринудительноеРаспределение = ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_Реализация");
		Иначе
			Продолжить;
		КонецЕсли;
		//Если Не ЗначениеЗаполнено(ТекСтрока["Субконто" + Префикс + "3"]) Тогда
		СуммаОбщая = ТекСтрока.Сумма;
		НайденныеОстатки = Выборка.НайтиСтроки(Новый Структура("Предприятия, Субконто1, Субконто2", ТекСтрока.Предприятия, ТекСтрока["Субконто" + Префикс + "1"], ТекСтрока["Субконто" + Префикс + "2"]));
		
		Если (ЭтоОплата ИЛИ НужноПринудительноеРаспределение) И ЗначениеЗаполнено(ТекСтрока["Субконто" + Префикс + "3"]) Тогда //если принудительно субконто3 выбрано, тогда пропускаем
			//контролируем наличие задолженности по пустому субконто
			НайденныеОстаткиИсходСуб3 = Выборка.НайтиСтроки(Новый Структура("Предприятия, Субконто1, Субконто2, Субконто3", ТекСтрока.Предприятия, ТекСтрока["Субконто" + Префикс + "1"], ТекСтрока["Субконто" + Префикс + "2"], ТекСтрока["Субконто" + Префикс + "3"]));
			Если Не НайденныеОстаткиИсходСуб3.Количество() Тогда //если реально нет остатков
				Если НужноПринудительноеРаспределение И ТекСтрока["Субконто" + Префикс + "3"] = Источник.Ссылка Тогда
					Продолжить;
				Иначе
				    ТекСтрока["Субконто" + Префикс + "3"] = Неопределено;
				КонецЕсли;					
			Иначе	
				Для каждого ТекОстаток Из НайденныеОстаткиИсходСуб3 Цикл
					Если СуммаОбщая > ТекОстаток["СуммаОстаток" + Префикс] Тогда
						СуммаОбщая = СуммаОбщая - ТекОстаток["СуммаОстаток" + Префикс];
						ТекОстаток["СуммаОстаток" + Префикс] = 0;
					Иначе
						ТекОстаток["СуммаОстаток" + Префикс] = ТекОстаток["СуммаОстаток" + Префикс] - СуммаОбщая;
						СуммаОбщая = 0;	
					КонецЕсли;
				КонецЦикла; 
			КонецЕсли;
		КонецЕсли;
		
		Для каждого ТекОстаток Из НайденныеОстатки Цикл
			Если СуммаОбщая > ТекОстаток["СуммаОстаток" + Префикс] Тогда
				СуммаОбщая = СуммаОбщая - ТекОстаток["СуммаОстаток" + Префикс];
				ТекОстаток["СуммаОстаток" + Префикс] = 0;
			Иначе
				ТекОстаток["СуммаОстаток" + Префикс] = ТекОстаток["СуммаОстаток" + Префикс] - СуммаОбщая;
				СуммаОбщая = 0;	
			КонецЕсли;
		КонецЦикла; 
		
		НайденныеОстаткиИсход = ВыборкаИсход.НайтиСтроки(Новый Структура("Предприятия, Субконто1, Субконто2", ТекСтрока.Предприятия, ТекСтрока["Субконто" + Префикс + "1"], ТекСтрока["Субконто" + Префикс + "2"]));
		Для каждого ТекОстаток Из НайденныеОстаткиИсход Цикл
			ИндексСтроки = ВыборкаИсход.Индекс(ТекОстаток);
			Если НЕ ТекОстаток["СуммаОстаток" + Префикс] = Выборка[ИндексСтроки]["СуммаОстаток" + Префикс] И ((ЭтоОплата ИЛИ НужноПринудительноеРаспределение) ИЛИ Не ЗначениеЗаполнено(ТекОстаток.Субконто3)) Тогда
				НоваяСтрока = НоваяТЧ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				НоваяСтрока["ВидСубконто" + Префикс + "3"] = ?(НЕ (ЭтоОплата ИЛИ НужноПринудительноеРаспределение) Или ЭтоСторно, Неопределено, СубконтоДокумент);
				НоваяСтрока["Субконто" + Префикс + "3"] = ?(НЕ (ЭтоОплата ИЛИ НужноПринудительноеРаспределение) Или ЭтоСторно, Неопределено, ТекОстаток.Субконто3);
				Если ЭтоСторно Тогда
					НоваяСтрока["ВидСубконтоДт3"] = СубконтоДокумент;
					НоваяСтрока["СубконтоДт3"] = ТекОстаток.Субконто3;
				КонецЕсли;
				НоваяСтрока.Сумма = (ТекОстаток["СуммаОстаток" + Префикс] - Выборка[ИндексСтроки]["СуммаОстаток" + Префикс]);
				ТекСтрока.Сумма = ТекСтрока.Сумма - ?(НЕ (ЭтоОплата ИЛИ НужноПринудительноеРаспределение) Или ЭтоСторно, 0, НоваяСтрока.Сумма);
				ТекОстаток["СуммаОстаток" + Префикс] = Выборка[ИндексСтроки]["СуммаОстаток" + Префикс];
			КонецЕсли;
		КонецЦикла;
		
		Если (ЭтоОплата ИЛИ НужноПринудительноеРаспределение) И СуммаОбщая Тогда //сумма осталась, кидаем на аванс
			НоваяСтрока = НоваяТЧ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока["ВидСубконто" + Префикс + "3"] = Неопределено;
			НоваяСтрока["Субконто" + Префикс + "3"] = Неопределено;
			НоваяСтрока.Сумма = СуммаОбщая;
			ТекСтрока.Сумма = 0;
		КонецЕсли;
		//КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекСтрока Из НоваяТЧ Цикл
		НоваяСтрока = ВремТЧ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		
		Если Не СчетаДляРаспределения.Найти(ТекСтрока.СчетДт) = Неопределено Тогда
			Префикс = "Дт";
			НужноПринудительноеРаспределение = Ложь;
		ИначеЕсли Не СчетаДляРаспределения.Найти(ТекСтрока.СчетКт) = Неопределено Тогда
			Префикс = "Кт";
			НужноПринудительноеРаспределение = ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_Реализация");
       КонецЕсли;
		
		Если НЕ (ЭтоОплата ИЛИ НужноПринудительноеРаспределение) Или ЭтоСторно Тогда //тогда сторнируем
			НовыйПрефиксДт = ?(НЕ СчетаДляРаспределения.Найти(ТекСтрока.СчетДт) = Неопределено, "Кт", "Дт");
			НовыйПрефиксКт = ?(НЕ СчетаДляРаспределения.Найти(ТекСтрока.СчетДт) = Неопределено, "Дт", "Кт");
			НоваяСтрока["Счет" + НовыйПрефиксДт] = НоваяСтрока["Счет" + НовыйПрефиксКт];
			НоваяСтрока["ВидСубконто" + НовыйПрефиксДт + "1"] = НоваяСтрока["ВидСубконто" + НовыйПрефиксКт + "1"];
			НоваяСтрока["ВидСубконто" + НовыйПрефиксДт + "2"] = НоваяСтрока["ВидСубконто" + НовыйПрефиксКт + "2"];
			НоваяСтрока["ВидСубконто" + НовыйПрефиксДт + "3"] = СубконтоДокумент;
			НоваяСтрока["Подразделение" + НовыйПрефиксДт] = НоваяСтрока["Подразделение" + НовыйПрефиксКт];
			НоваяСтрока["Количество" + НовыйПрефиксДт] = НоваяСтрока["Количество" + НовыйПрефиксКт];
			НоваяСтрока["Валюта" + НовыйПрефиксДт] = НоваяСтрока["Валюта" + НовыйПрефиксКт];
			НоваяСтрока["ВалютнаяСумма" + НовыйПрефиксДт] = НоваяСтрока["ВалютнаяСумма" + НовыйПрефиксКт];
			НоваяСтрока["Субконто" + НовыйПрефиксДт + "1"] = НоваяСтрока["Субконто" + НовыйПрефиксКт + "1"];
			НоваяСтрока["Субконто" + НовыйПрефиксДт + "2"] = НоваяСтрока["Субконто" + НовыйПрефиксКт + "2"];
			НоваяСтрока["Субконто" + НовыйПрефиксДт + "3"] = ?(ЭтоСторно, Неопределено, Источник.Ссылка);
			НоваяСтрока.Содержание = ?(ЭтоСторно, "Зачет поставки", "Зачет аванса");
		КонецЕсли;
	КонецЦикла;
	
	
	Если ВремТЧ.Количество() Тогда
		Источник.Движения.Учетный.Загрузить(ВремТЧ);	
	КонецЕсли;
	
КонецПроцедуры

Функция РаспределятьПроводкиПоДокументам(ТекПредприятие)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПредприятияДополнительныеРеквизиты.Значение
	|ИЗ
	|	Справочник.Предприятия.ДополнительныеРеквизиты КАК ПредприятияДополнительныеРеквизиты
	|ГДЕ
	|	ПредприятияДополнительныеРеквизиты.Свойство.Заголовок = ""Распределять счета контрагентов по документам""
	|	И ПредприятияДополнительныеРеквизиты.Ссылка = &Ссылка";	
	Запрос.УстановитьПараметр("Ссылка", ТекПредприятие);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Значение;
	КонецЦикла;
	
	Возврат Ложь;
	
	
КонецФункции	

Функция ПроверкаСозданияНаОснованииНаСервере(ДанныеЗаполнения, Комментарий, СтандартнаяОбработка, ПроверяемыйТип = Неопределено) Экспорт
	
	Если ПроверяемыйТип = Неопределено Тогда
		ПроверяемыйТип = Тип("Неопределено");
	КонецЕсли;
	
	СозданныеДокументы = сабОперОбщегоНазначения.ПолучитьСозданныеДокументыНаОСновании(ДанныеЗаполнения,, ПроверяемыйТип);
	ДокОснование = ДанныеЗаполнения;
	Если СозданныеДокументы.Количество() Тогда
		СтандартнаяОбработка = Ложь;
		Признак = "##УжеСоздан";
		Комментарий = Признак + СозданныеДокументы[0].Ссылка;
		Возврат Новый Структура("Признак, Ссылка", Признак, СозданныеДокументы[0].Ссылка);		
	КонецЕсли;
	
	Если НЕ ДанныеЗаполнения.Проведен Тогда
		СтандартнаяОбработка = Ложь;
		Признак = "##НеПроведен"; 
		Комментарий = Признак;
		Возврат Новый Структура("Признак, Ссылка", Признак);			
	КонецЕсли;
	
	Возврат Новый Структура("Признак, Ссылка", "");
	
	
КонецФункции

Функция ПолучитьКоличественныеПоказателиПроводок(Ссылка) Экспорт
	//Если Не ЗначениеЗаполнено(Ссылка) Тогда
	//	Возврат Новый Структура("Сумма, КоличествоДт, КоличествоКт, КоличествоПроводок", -1, -1, -1, -1);
	//КонецЕсли;
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	СУММА(ЕСТЬNULL(Учетный.Сумма, 0)) КАК Сумма,
	//               |	СУММА(ЕСТЬNULL(Учетный.КоличествоДт, 0)) КАК КоличествоДт,
	//               |	СУММА(ЕСТЬNULL(Учетный.КоличествоКт, 0)) КАК КоличествоКт,
	//               |	КОЛИЧЕСТВО(ЕСТЬNULL(Учетный.НомерСтроки, 0)) КАК НомерСтроки
	//               |ИЗ
	//               |	РегистрБухгалтерии.Учетный КАК Учетный
	//               |ГДЕ
	//               |	Учетный.Регистратор = &Регистратор";
	//
	//Запрос.УстановитьПараметр("Регистратор", Ссылка);
	//
	//Результат = Запрос.Выполнить();
	//Выборка = Результат.Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//	Возврат Новый Структура("Сумма, КоличествоДт, КоличествоКт, КоличествоПроводок", Выборка.Сумма, Выборка.КоличествоДт, Выборка.КоличествоКт, Выборка.НомерСтроки) ;
	//КонецЦикла;
	Возврат Новый Структура("Сумма, КоличествоДт, КоличествоКт, КоличествоПроводок", -1, -1, -1, -1);
КонецФункции // ()

Процедура ПроверитьПроводкиНаИзменение(ДвиженияУчетный, ДополнительныеСвойстваКоличественныеПоказателиПроводокДляПроверки) Экспорт
	
	//КоличественныеПоказателиПроводокДляПроверки = ДополнительныеСвойстваКоличественныеПоказателиПроводокДляПроверки;
	//Если ТипЗнч(КоличественныеПоказателиПроводокДляПроверки) = Тип("Структура") Тогда
	//	Если НЕ КоличественныеПоказателиПроводокДляПроверки.Сумма = ДвиженияУчетный.Итог("Сумма") ИЛИ
	//		НЕ КоличественныеПоказателиПроводокДляПроверки.КоличествоДт = ДвиженияУчетный.Итог("КоличествоДт") ИЛИ
	//		НЕ КоличественныеПоказателиПроводокДляПроверки.КоличествоКт = ДвиженияУчетный.Итог("КоличествоКт") ИЛИ 
	//		НЕ КоличественныеПоказателиПроводокДляПроверки.КоличествоПроводок = ДвиженияУчетный.Количество() Тогда
	//		ДвиженияУчетный.Записывать = Истина;
	//	Иначе
	//		Возврат;
	//	КонецЕсли;
	//Иначе
	ДвиженияУчетный.Записывать = Истина;
	//КонецЕсли;
	
	
КонецПроцедуры

Функция ПолучитьСкладПоДопСвойству(ДопСвойство, Предприятие) Экспорт
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	СкладыДополнительныеРеквизиты.Ссылка
	//               |ИЗ
	//               |	Справочник.Склады.ДополнительныеРеквизиты КАК СкладыДополнительныеРеквизиты
	//               |ГДЕ
	//               |	СкладыДополнительныеРеквизиты.Свойство = &Свойство
	//               |	И СкладыДополнительныеРеквизиты.Значение = ИСТИНА
	//               |	И СкладыДополнительныеРеквизиты.Ссылка.Предприятие = &Предприятие";
	//
	//Запрос.УстановитьПараметр("Свойство", ДопСвойство);
	//Запрос.УстановитьПараметр("Предприятие", Предприятие);
	//
	//Результат = Запрос.Выполнить();
	//Выборка = Результат.Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//	Возврат Выборка.Ссылка;	
	//КонецЦикла;
	
КонецФункции

Функция ПолучитьРезультатыСканированияТСД(ИдДокументаТСД) Экспорт
	
	ТоварыФактТСД = новый ТаблицаЗначений;
	ТоварыФактТСД.Колонки.Добавить("Артикул", новый ОписаниеТипов("Строка",, новый КвалификаторыСтроки(13)));
	//ТоварыФактТСД.Колонки.Добавить("Номенклатура", новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТоварыФактТСД.Колонки.Добавить("Количество", новый ОписаниеТипов("Число", новый КвалификаторыЧисла(9, 3)));
	
	СтрокаСоединения = "DRIVER={MySQL ODBC 5.2 UNICODE Driver};SERVER=10.40.1.239;DATABASE=arm_shop;UID=1c_export;PWD=12345;Option=3;";	
	Connection =Новый COMОбъект("ADODB.Connection");
	Connection.ConnectionString = СтрокаСоединения;
	Попытка
		Connection.Open();
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	Сообщить("Соединение установлено");
	
	ТекстЗапроса = СтрЗаменить("call getInvDoc(&id)", "&id", Формат(ИдДокументаТСД, "ЧГ=0"));
	Попытка         
		RecordSet = Connection.Execute(ТекстЗапроса);
	Исключение 
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	Сообщить("Запрос отсканированных данных выполнен");
	
	//ТоварыФакт.Очистить();
	//ТоварыФактТолькоАртикулы = ТоварыФакт.Выгрузить();
	
	Пока RecordSet.EOF()=0 Цикл
		
		НоваяСтрока = ТоварыФактТСД.Добавить();
		НоваяСтрока.Артикул    = Формат(RecordSet.Fields("good_id").Value, "ЧГ=0");
		//НоваяСтрока.Номенклатура = Справочники.Номенклатура.НайтиПоКоду(НоваяСтрока.Артикул);
		НоваяСтрока.Количество = RecordSet.Fields("amount").Value;
		//НоваяСтрока.НомерТСД   = RecordSet.Fields("terminal_id").Value;
		
		RecordSet.MoveNext();
		
	КонецЦикла;
	
	RecordSet.Close();
	Connection.Close();
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("ВТ_ТоварыФактТСД", ТоварыФактТСД);
	Запрос.Текст = "ВЫБРАТЬ
	|	ВТ_ТоварыФактТСД.Артикул,
	|	ВТ_ТоварыФактТСД.Количество
	|ПОМЕСТИТЬ ВТ_ТоварыФактТСД
	|ИЗ
	|	&ВТ_ТоварыФактТСД КАК ВТ_ТоварыФактТСД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТоварыФактТСД.Артикул,
	|	НоменклатураСсылка.Ссылка КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА НоменклатураСсылка.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес)
	|			ТОГДА ВТ_ТоварыФактТСД.Количество / 1000
	|		ИНАЧЕ ВТ_ТоварыФактТСД.Количество
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	ВТ_ТоварыФактТСД КАК ВТ_ТоварыФактТСД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСсылка
	|		ПО ВТ_ТоварыФактТСД.Артикул = НоменклатураСсылка.Код
	|			И (НЕ НоменклатураСсылка.ЭтоГруппа)";
	ТоварыФакт = Запрос.Выполнить().Выгрузить();
	//ТоварыФакт.Загрузить(Выгрузка);
	
	Возврат ТоварыФакт;
	
КонецФункции


Процедура сабЗаказыОчисткаНезакрытыхПроводок() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 5000
	|	УчетныйОстатки.Субконто1 КАК ДокументПоступление
	|ИЗ
	|	РегистрБухгалтерии.Учетный.Остатки(, Счет = &ЗАК, , ) КАК УчетныйОстатки
	|ГДЕ
	|	ВЫРАЗИТЬ(УчетныйОстатки.Субконто1 КАК Документ.ЗаказПоставщику).Дата < &Дата
	|	И ВЫБОР
	|			КОГДА ВЫРАЗИТЬ(УчетныйОстатки.Субконто1 КАК Документ.ЗаказПоставщику).ДатаПоступления = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВЫРАЗИТЬ(УчетныйОстатки.Субконто1 КАК Документ.ЗаказПоставщику).ДатаПоступления < &Дата
	|		КОНЕЦ
	|	И ВЫРАЗИТЬ(УчетныйОстатки.Субконто1 КАК Документ.ЗаказПоставщику).СуммаДокумента = УчетныйОстатки.СуммаОстаток
	|
	|УПОРЯДОЧИТЬ ПО
	|	УчетныйОстатки.Субконто1.Дата";
	
	Запрос.УстановитьПараметр("ЗАК", ПланыСчетов.Учетный.СчетЗАК());
	Запрос.УстановитьПараметр("Дата", ТекущаяДата() - 3*24*60*60); //+3 дн от даты поставки
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокОб = Выборка.ДокументПоступление.ПолучитьОбъект();
		ДокОб.Статус = Перечисления.СтатусыЗаказовПоставщикам.Отменен;
		Попытка
			ДокОб.Записать(РежимЗаписиДокумента.Проведение);		
		Исключение
			
		КонецПопытки; 
	КонецЦикла;
	
	
	
КонецПроцедуры

Функция ПолучитьВидЦеныПоставщика(Номенклатура, Предприятие, Подразделение, Контрагент, Дата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.ВидЦены
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Период,
	|			ВидЦены.ЦенаПоставщика
	|				И ВидЦены.Поставщик = &Контрагент
	|				И Предприятие = &Предприятие
	|				И Номенклатура = &Номенклатура
	|				И Подразделение = &Подразделение) КАК ЦеныНоменклатурыСрезПоследних";
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.ВидЦены;
	КонецЦикла;
	
	Возврат Справочники.ВидыЦен.ПустаяСсылка();
	
КонецФункции

Функция РассчитатьЦенуПоВидуЦен(ВидЦены, Номенклатура, Предприятие, Подразделение, Контрагент, Дата, ДатаЗаказа) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МаркетинговыеМероприятия.ЦенаПоступления,
	|	МаркетинговыеМероприятия.Номенклатура,
	|	МаркетинговыеМероприятия.ДатаДокумента
	|ПОМЕСТИТЬ ВТ_МаркетинговыеМероприятия
	|ИЗ
	|	РегистрСведений.МаркетинговыеМероприятия КАК МаркетинговыеМероприятия
	|ГДЕ
	|	МаркетинговыеМероприятия.Предприятие = &Предприятие
	|	И МаркетинговыеМероприятия.Подразделение = &Подразделение
	|	И МаркетинговыеМероприятия.Номенклатура = &Номенклатура
	|	И МаркетинговыеМероприятия.ДатаЗаказовНач <= &Период
	|	И МаркетинговыеМероприятия.ДатаЗаказовКон >= &Период
	|	И МаркетинговыеМероприятия.ЦенаПоступления <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_МаркетинговыеМероприятия.Номенклатура,
	|	МАКСИМУМ(ВТ_МаркетинговыеМероприятия.ДатаДокумента) КАК ДатаДокумента
	|ПОМЕСТИТЬ ВТ_МаксДатаМаркетинговогоМероприятия
	|ИЗ
	|	ВТ_МаркетинговыеМероприятия КАК ВТ_МаркетинговыеМероприятия
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_МаркетинговыеМероприятия.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_МаркетинговыеМероприятия.ЦенаПоступления,
	|	ВТ_МаркетинговыеМероприятия.Номенклатура
	|ПОМЕСТИТЬ ВТ_МаркетинговыеМероприятияИтог
	|ИЗ
	|	ВТ_МаксДатаМаркетинговогоМероприятия КАК ВТ_МаксДатаМаркетинговогоМероприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаркетинговыеМероприятия КАК ВТ_МаркетинговыеМероприятия
	|		ПО ВТ_МаксДатаМаркетинговогоМероприятия.Номенклатура = ВТ_МаркетинговыеМероприятия.Номенклатура
	|			И ВТ_МаксДатаМаркетинговогоМероприятия.ДатаДокумента = ВТ_МаркетинговыеМероприятия.ДатаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВТ_МаркетинговыеМероприятияИтог.ЦенаПоступления, ЦеныНоменклатурыСрезПоследних.Цена) КАК Цена
	|ИЗ
	|	ВТ_МаркетинговыеМероприятияИтог КАК ВТ_МаркетинговыеМероприятияИтог
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Период,
	|				ВидЦены.ЦенаПоставщика
	|					И ВидЦены.Поставщик = &Контрагент
	|					И Предприятие = &Предприятие
	|					И Номенклатура = &Номенклатура
	|					И ВидЦены = &ВидЦены
	|					И Подразделение = &Подразделение) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО ВТ_МаркетинговыеМероприятияИтог.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура";
	Запрос.УстановитьПараметр("Период", ?(Контрагент.УсловияЦенПоставки = Перечисления.УсловияЦенПоставки.НаДатуПоставки, Дата, ДатаЗаказа));
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Цена;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

Функция РассчитатьЦенуВНХ(Номенклатура, Предприятие, Подразделение, Дата) Экспорт
	
	Если Номенклатура.Счет10 = ПланыСчетов.Учетный.Счет43() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&Период,
		|			Предприятие = &Предприятие
		|				И Подразделение = &Подразделение
		|				И Номенклатура = &Номенклатура
		|				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних";
		Запрос.УстановитьПараметр("Период", Дата);
		Запрос.УстановитьПараметр("Предприятие", Предприятие);
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("ВидЦены", Справочники.ВидыЦен.НайтиПоНаименованию("Производство ВН", Истина));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Цена;
		КонецЦикла;
		
		Возврат 0;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Цена
		|ИЗ
		|	РегистрСведений.НоменклатураПоставщика.СрезПоследних(
		|			&Период,
		|			Предприятие = &Предприятие
		|				И Подразделение = &Подразделение
		|				И Номенклатура = &Номенклатура) КАК НоменклатураПоставщикаСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				&Период,
		|				Предприятие = &Предприятие
		|					И Подразделение = &Подразделение
		|					И Номенклатура = &Номенклатура
		|					И ВидЦены.ЦенаПоставщика) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО НоменклатураПоставщикаСрезПоследних.Предприятие = ЦеныНоменклатурыСрезПоследних.Предприятие
		|			И НоменклатураПоставщикаСрезПоследних.Подразделение = ЦеныНоменклатурыСрезПоследних.Подразделение
		|			И НоменклатураПоставщикаСрезПоследних.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И НоменклатураПоставщикаСрезПоследних.Контрагент = ЦеныНоменклатурыСрезПоследних.ВидЦены.Поставщик";
		Запрос.УстановитьПараметр("Период", Дата);
		Запрос.УстановитьПараметр("Предприятие", Предприятие);
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Цена;
		КонецЦикла;
		
		Возврат 0;
	КонецЕсли;	
	
КонецФункции	



Функция ПолучитьПоследнийДокументОстатковТЗ(Перемещение) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МАКСИМУМ(ОстаткиЕГАИС.Дата) КАК Дата
	|ПОМЕСТИТЬ МаксДата
	|ИЗ
	|	Документ.ОстаткиЕГАИС КАК ОстаткиЕГАИС
	|ГДЕ
	|	ОстаткиЕГАИС.Проведен = ИСТИНА
	|	И ОстаткиЕГАИС.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.ВидыДокументовЕГАИС.ЗапросОстатковВТорговомЗале)
	|	И ОстаткиЕГАИС.Магазин = &Магазин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ОстаткиЕГАИС.Ссылка) КАК ОстаткиЕГАИС,
	|	МАКСИМУМ(МаксДата.Дата) КАК Дата
	|ИЗ
	|	Документ.ОстаткиЕГАИС КАК ОстаткиЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксДата КАК МаксДата
	|		ПО ОстаткиЕГАИС.Дата = МаксДата.Дата";
	
	
	
	Если ТипЗнч(Перемещение) = Тип("ДокументСсылка.УЧ_ПеремещениеТоваров") ИЛИ ТипЗнч(Перемещение) = Тип("ДокументСсылка.УЧ_ВозвратТоваровПоставщику") Тогда
		Подразделение = Перемещение.Подразделение;
	ИначеЕсли ТипЗнч(Перемещение) = Тип("ДокументСсылка.УЧ_СписаниеТоваров") Тогда
		Подразделение = Перемещение.ВидДеятельности;
	Иначе
		Подразделение = Перемещение;
	КонецЕсли;
	
	
	Запрос.УстановитьПараметр("Магазин", Подразделение);
	//Запрос.УстановитьПараметр("ОрганизацияЕГАИС", Перемещение.ОрганизацияЕГАИС);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Возврат Выборка.ОстаткиЕГАИС;
		
	КонецЦикла;
	
	
	
	
КонецФункции // ()

//регламентная процедура
Процедура СоздатьДокументыОстаткиВТЗ_ЕГАИС() Экспорт
	//УстановитьПривилегированныйРежим(Истина);
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//|	НастройкиОбменаЕГАИС.ИдентификаторФСРАР,
	//|	НастройкиОбменаЕГАИС.Организация,
	//|	НастройкиОбменаЕГАИС.Магазин,
	//|	КлассификаторОрганизацийЕГАИС.Ссылка,
	//|	КлассификаторОрганизацийЕГАИС.Ссылка КАК ОрганизацияЕГАИС
	//|ИЗ
	//|	РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	//|		ПО НастройкиОбменаЕГАИС.ИдентификаторФСРАР = КлассификаторОрганизацийЕГАИС.Код";
	//
	////Запрос.УстановитьПараметр("", );
	//
	//Результат = Запрос.Выполнить();
	//Выборка = Результат.Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//	НачатьТранзакцию();
	//	Попытка
	//		//создаем документ
	//		НовыйДок = Документы.ОстаткиЕГАИС.СоздатьДокумент();
	//		ЗаполнитьЗначенияСвойств(НовыйДок, Выборка);
	//		НовыйДок.Дата = ТекущаяДата();
	//		НовыйДок.СтатусОбработки = Перечисления.СтатусыОбработкиОстатковЕГАИС.Новый;
	//		НовыйДок.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросОстатковВТорговомЗале;
	//		НовыйДок.Записать(РежимЗаписиДокумента.Проведение);
	//		
	//		//отправляем запрос в ЕГАИС
	//		ДополнительныеПараметры = Новый Структура();
	//		
	//		ВидДокумента = НовыйДок.ВидДокумента;
	//		ВходныеПараметры = ИнтеграцияЕГАИСКлиентСервер.ПараметрыИсходящегоЗапроса(НовыйДок.ВидДокумента);
	//		ВходныеПараметры.ДокументСсылка = НовыйДок.Ссылка;
	//		
	//		Отбор = Новый Массив;
	//		Отбор.Добавить(Новый Структура("Поле, Значение", "ИдентификаторФСРАР", Выборка.ИдентификаторФСРАР));
	//		
	//		СписокДоступныхМодулей = ИнтеграцияЕГАИСВызовСервера.ДоступныеТранспортныеМодули(Отбор);
	//		
	//		Контекст = Новый Структура;
	//		Контекст.Вставить("ОповещениеПриЗавершении", Неопределено);
	//		Контекст.Вставить("ВходныеПараметры"       , ВходныеПараметры);
	//		Контекст.Вставить("ВидДокумента"           , ВидДокумента);
	//		Контекст.Вставить("ОтображатьСообщения"    , Ложь);
	//		
	//		Результат = ИнтеграцияЕГАИСВызовСервера.СформироватьЗапросВУТМ(
	//		СписокДоступныхМодулей[0],
	//		ВидДокумента,
	//		ВходныеПараметры,
	//		НовыйДок.Ссылка);
	//		
	//	Исключение
	//		
	//	КонецПопытки;
	//	ЗафиксироватьТранзакцию();
	//	//Прервать;
	//	
	//КонецЦикла;
	//
	//УстановитьПривилегированныйРежим(Ложь);	

КонецПроцедуры

Функция ПолучитьЭлементПоНаименованию(ИмяСправочника, Наименование) Экспорт

	 Возврат Справочники[ИмяСправочника].НайтиПоНаименованию(Наименование, Истина);

КонецФункции // ()

Функция ВернутьСклад(НаименованиеСклада, ПредприятиеСклада) Экспорт
	
	ВС = Справочники.Склады.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Склады.Ссылка
	               |ИЗ
	               |	Справочник.Склады КАК Склады
	               |ГДЕ
	               |	Склады.Наименование = &Наименование
	               |	И Склады.Предприятие = &Предприятие";
	Запрос.УстановитьПараметр("Наименование", НаименованиеСклада);
	Запрос.УстановитьПараметр("Предприятие", ПредприятиеСклада);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ВС = Выборка.Ссылка;
	КонецЦикла;
	
	Возврат ВС;
	
КонецФункции

#Область СабЗаполнениеКэшаТоваров

Процедура СабЗаполнениеКэшаТоваров() Экспорт
	
	//ДатаНачала = НачалоДня(ТекущаяДата() - (86400));  //на бэкап сервере не хватка оперативки
	ДатаНачала = НачалоДня(ТекущаяДата() - (86400 * 3));
	ДатаКонца  = КонецДня(ТекущаяДата() - (86400));
	Магазин = Справочники.СтруктураПредприятия.ПустаяСсылка();
	
	ОчиститьКеш(ДатаНачала, ДатаКонца, Магазин);
	Обработ = ЗаполнитьКешНаСервере(ДатаНачала, ДатаКонца, Магазин);
	счСтроки = 0;

	ТекДата = Неопределено;
	
	НовыйМассив = Новый Массив;
	Для каждого ТекОбр Из Обработ Цикл
		счСтроки = счСтроки + 1;
		НовыйМассив.Добавить(ТекОбр);
		Если счСтроки / 10000 = окр(счСтроки / 10000, 0) ИЛИ НЕ ТекДата = ТекОбр.Период Тогда
			НовыйМассив.Удалить(НовыйМассив.Количество()-1);
			ЗаписатьОстатки(НовыйМассив);
			НовыйМассив = Новый Массив;
			ТекДата = ТекОбр.Период;
			НовыйМассив.Добавить(ТекОбр);
		КонецЕсли;
	КонецЦикла;
	
	Если НовыйМассив.Количество() Тогда
		ЗаписатьОстатки(НовыйМассив);
	КонецЕсли;
	
КонецПроцедуры	

Процедура  ОчиститьКеш(ДатаНачала, ДатаКонца, Магазин) Экспорт
	
	ТекДата = ДатаНачала;
	Пока ТекДата <= ДатаКонца Цикл		
		
		НаборЗаписей = РегистрыСведений.сабКешОстатков.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ТекДата);
		НаборЗаписей.Записать();				
		
		ТекДата = ТекДата + 24*60*60;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполнитьКешНаСервере(ДатаНачала, ДатаКонца, Магазин)
	МассивСтруктур = Новый Массив;	
	
	ТекДата = ДатаНачала;
	Пока ТекДата <= ДатаКонца Цикл
			
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	УчетныйОстатки.Счет КАК Счет,
		               |	УчетныйОстатки.Субконто1 КАК Номенклатура,
		               |	УчетныйОстатки.Субконто2 КАК Склад,
		               |	УчетныйОстатки.Предприятия КАК Предприятие,
		               |	УчетныйОстатки.Подразделение КАК Подразделение,
		               |	СУММА(УчетныйОстатки.СуммаОстаток) КАК Сумма,
		               |	СУММА(УчетныйОстатки.КоличествоОстаток) КАК Количество
		               |ИЗ
		               |	РегистрБухгалтерии.Учетный.Остатки(
		               |			&Дата,
		               |			Счет = ЗНАЧЕНИЕ(ПланСчетов.Учетный.Товары)
		               |				ИЛИ Счет = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ГотоваяПродукция),
		               |			,
		               |			ВЫБОР
		               |				КОГДА &Магазин = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		               |					ТОГДА ИСТИНА
		               |				ИНАЧЕ Подразделение В ИЕРАРХИИ (&Магазин)
		               |			КОНЕЦ) КАК УчетныйОстатки
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	УчетныйОстатки.Счет,
		               |	УчетныйОстатки.Субконто1,
		               |	УчетныйОстатки.Субконто2,
		               |	УчетныйОстатки.Предприятия,
		               |	УчетныйОстатки.Подразделение
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Подразделение,
		               |	Счет,
		               |	Номенклатура";
		
		Запрос.УстановитьПараметр("Дата", ТекДата);
		Запрос.УстановитьПараметр("Магазин", Магазин);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МассивСтруктур.Добавить(Новый Структура("Счет, Номенклатура, Склад, Предприятие, Подразделение, Сумма, Количество, Период",
			Выборка.Счет, Выборка.Номенклатура, Выборка.Склад, Выборка.Предприятие, Выборка.Подразделение, Выборка.Сумма, Выборка.Количество, ТекДата));  
		КонецЦикла;
				
		ТекДата = ТекДата + 24*60*60;
		
	КонецЦикла;
	
	Возврат МассивСтруктур;
	
КонецФункции

Процедура ЗаписатьОстатки(Выборка)
	
	Если НЕ Выборка.Количество() Тогда
		Возврат;	
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.сабКешОстатков.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Выборка[0].Период);
	Для Каждого СтрокаСрСуточных Из Выборка Цикл
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаСрСуточных);
		Запись.Цена = ?(Запись.Количество, Запись.Сумма / Запись.Количество, 0);
		//Запись.Период = Дата;
	КонецЦикла;
	НаборЗаписей.Записать(Ложь);
			
КонецПроцедуры

#КонецОбласти
