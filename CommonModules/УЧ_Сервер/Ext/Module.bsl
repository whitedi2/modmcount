
// Процедура устанавливает субконто на счете. Если такое субконто на счете
// отсутствует, то ничего не делается.
//
// Параметры:
//		Счет - Счет, к которому относится субконто
//      Субконто - набор субконто
//		Номер или имя устанавливаемого субконто
//      Значение субконто - значение устанавливаемого субконто
//
Процедура УстановитьСубконто(СубконтоРегистр, Счет, ИмяСубконто, ЗначениеСубконто) Экспорт
	
	Если Счет = Неопределено ИЛИ Счет.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ВидыСубконтоСчета = Счет.ВидыСубконто;
	
	Если ТипЗнч(ИмяСубконто) = Тип("Число") Тогда
		
		Если ИмяСубконто > ВидыСубконтоСчета.Количество() Тогда
			Возврат;
		КонецЕсли;
		
		ВидСубк = ВидыСубконтоСчета[ИмяСубконто - 1].ВидСубконто;
		
	Иначе
		
		ВидСубк = ПланыВидовХарактеристик.ВидыСубконто[ИмяСубконто];
		
		Если ВидыСубконтоСчета.Найти(ВидСубк) = Неопределено Тогда
			Сообщить("Вид субконто <" + ВидСубк + "> для счета """+Счет.Код +" ("+Счет.Наименование+")"" не определен.");
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
		СубконтоРегистр.Вставить(ВидСубк, ЗначениеСубконто);
		
	Иначе
		//Сообщить("Неверное значение """ + ЗначениеСубконто + """ для вида субконто <" + ВидСубк + ">");
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьСубконто()

Функция ФинансовыеСчета()  Экспорт
	
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	УчетныйВидыСубконто.Ссылка КАК Ссылка,
	                |	УчетныйВидыСубконто.Ссылка.Код КАК Код
	                |ИЗ
	                |	ПланСчетов.Учетный.ВидыСубконто КАК УчетныйВидыСубконто
	                |ГДЕ
	                |	УчетныйВидыСубконто.Ссылка.ЗапретитьИспользоватьВПроводках = ЛОЖЬ
	                |	И УчетныйВидыСубконто.ВидСубконто = &ВидСубконто
	                |	И УчетныйВидыСубконто.НомерСтроки = 1
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	УчетныйВидыСубконто.Ссылка,
	                |	УчетныйВидыСубконто.Ссылка.Код
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	Код";
	 
	 Запрос.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Статьи ДДС", Истина));
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Список = Новый Массив;
	 Пока Выборка.Следующий() Цикл
	     Список.Добавить(Выборка.Ссылка);
	 КонецЦикла;
	Возврат Список;
КонецФункции // ФинансовыеСчета()


Функция ЭтоСтройка()  Экспорт
	//Направление = ПараметрыСеанса.ТекущийПользователь.НаправлениеДеятельности;
	//Если Не ОбщегоНазначенияПовтИсп.ЭтоБазаСпирт() И Направление = Справочники.НаправленияДеятельности.НайтиПоНаименованию("Строительное", Истина) Или Направление = Справочники.НаправленияДеятельности.НайтиПоНаименованию("Туристическое", Истина) Тогда
	//	Возврат Истина;
	//Иначе
	//	Возврат Ложь;	
	//КонецЕсли;
	Возврат Ложь;
КонецФункции 

Функция ДатаГлобальногоЗапрета()  Экспорт
	Возврат Дата('00010101');
КонецФункции 


Функция ДатаЗапретаКазна()  Экспорт
	Возврат Дата('00010101');
КонецФункции 

Функция ДатаЛокальногоЗапрета(Предприятие)  Экспорт
	Возврат КонецДня(Предприятие.ДатаЗакрытияУчет);
КонецФункции 

// Функция ИнформационнаяБазаФайловая определяет режим эксплуатации
// информационной базы файловый (Истина) или Серверный (Ложь).
//  При проверке используется СтрокаСоединенияИнформационнойБазы, которую
// можно указать явно.
//
// Параметры:
//  СтрокаСоединенияИнформационнойБазы - Строка - параметр используется, если
//                 нужно проверить строку соединения не текущей информационной базы.
//
// Возвращаемое значение:
//  Булево.
//
Функция ИнформационнаяБазаФайловая(Знач СтрокаСоединенияИнформационнойБазы = "") Экспорт
	
	Если ПустаяСтрока(СтрокаСоединенияИнформационнойБазы) Тогда
		СтрокаСоединенияИнформационнойБазы =  СтрокаСоединенияИнформационнойБазы();
	КонецЕсли;
	Возврат Найти(Врег(СтрокаСоединенияИнформационнойБазы), "FILE=") = 1;
	
КонецФункции 

// Отключить все активные соединения ИБ (кроме текущего сеанса).
//
// Параметры
//  ПараметрыАдминистрированияИБ  – Структура – параметры администрирования ИБ.  
//
// Возвращаемое значение:
//   Булево   – результат отключения соединений.
//
Функция ОтключитьСоединениеИБ(ПараметрыАдминистрированияИБ, НомерСоединения, Сообщение) Экспорт
	
	Если ПолучитьСоединенияИнформационнойБазы().Количество() <= 1 Тогда
		Возврат Истина;	// Отключены все пользователи, кроме текущего сеанса
	КонецЕсли;
	
	Если УЧ_Сервер.ИнформационнаяБазаФайловая() Тогда
		Сообщение = ПолучитьНазванияСоединенийИБ(ТекстНеУдалосьЗавершитьРаботуПользователей());
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Предупреждение, , , Сообщение);
		Возврат Ложь; // Невозможно принудительно отсоединить подключения в файловом режиме работы
	КонецЕсли;
	
	Попытка
		Возврат РазорватьСоединение(ПараметрыАдминистрированияИБ, НомерСоединения);
	Исключение
		Сообщение = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , Сообщение);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьНазванияСоединенийИБ(Знач Сообщение) Экспорт
	
	Результат = Сообщение;
	Для каждого Соединение Из ПолучитьСоединенияИнформационнойБазы() Цикл
		Если Соединение.НомерСоединения <> НомерСоединенияИнформационнойБазы() Тогда
			Результат = Результат + Символы.ПС + " - " + Соединение;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

// Возвращает текстовую константу для формирования сообщений.
// Используется в целях локализации.
//
Функция ТекстНеУдалосьЗавершитьРаботуПользователей() Экспорт
	
	Возврат НСтр("ru = 'Не удалось завершить работу пользователей:'");
	
КонецФункции

// Возвращает текстовую константу для формирования сообщений.
//
Функция СобытиеЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Завершение работы пользователей'");
	
КонецФункции

Функция РазорватьСоединение(ПараметрыСоединенияССервером1СПредприятие,
	знач НомерСоединениеДляРазрыва)
	
	Результат = Новый Структура("СоединениеСРабочимПроцессом, Соединения", Неопределено, Новый Массив);
	
	Если ИнформационнаяБазаФайловая() Тогда
		ВызватьИсключение НСтр("ru = 'Невозможно получить список активных соединения в Файловом варианте системы'");
	КонецЕсли;
	
	ПодстрокиСтрокиСоединения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
	СтрокаСоединенияИнформационнойБазы(), ";");
	
	ИмяСервера = СтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(Сред(ПодстрокиСтрокиСоединения[0], 7));
	ИмяИБ      = СтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(Сред(ПодстрокиСтрокиСоединения[1], 6));
	
	COMСоединитель = Новый COMОбъект(ИмяCOMСоединителя());
	
	РазделительПорта = Найти(ИмяСервера, ":");
	Если РазделительПорта > 0 Тогда
		ИмяИПортСервера = ИмяСервера;
		ИмяСервера = Сред(ИмяИПортСервера, 1, РазделительПорта - 1);
		НомерПортаКластера = Число(Сред(ИмяИПортСервера, РазделительПорта + 1));
	ИначеЕсли ПараметрыСоединенияССервером1СПредприятие.ПортКластераСерверов <> 0 Тогда
		НомерПортаКластера = ПараметрыСоединенияССервером1СПредприятие.ПортКластераСерверов;
	Иначе
		НомерПортаКластера = COMСоединитель.RMngrPortDefault;
	КонецЕсли;
	
	ИдентификаторАгентаСервера = ИмяСервера;
	Если ПараметрыСоединенияССервером1СПредприятие.ПортАгентаСервера <> 0 Тогда
		ИдентификаторАгентаСервера = ИдентификаторАгентаСервера + ":" + 
		Формат(ПараметрыСоединенияССервером1СПредприятие.ПортАгентаСервера, "ЧГ=0");
	КонецЕсли;
	
	// Подключение к агенту сервера
	АгентСервера = COMСоединитель.ConnectAgent(ИдентификаторАгентаСервера);
	
	// Найдем необходимый нам кластер
	Для каждого Кластер Из АгентСервера.GetClusters() Цикл
		
		Если Кластер.MainPort <> НомерПортаКластера Тогда
			Продолжить;
		КонецЕсли;
		
		АгентСервера.Authenticate(Кластер, ПараметрыСоединенияССервером1СПредприятие.ИмяАдминистратораКластера, 
		ПараметрыСоединенияССервером1СПредприятие.ПарольАдминистратораКластера);
		
		// Получаем список рабочих процессов
		WorkingProcesses = АгентСервера.GetWorkingProcesses(Кластер);
		Для каждого WorkingProcess Из WorkingProcesses Цикл
			
			Если WorkingProcess.Running <> 1 Тогда
				Продолжить;
			КонецЕсли;
			
			// Для каждого рабочего процесса создаем соединение с рабочим процессом
			ConnectToWorkProcess = COMСоединитель.ConnectWorkingProcess("tcp://" + WorkingProcess.HostName + 
			":" + Формат(WorkingProcess.MainPort, "ЧГ=0"));
			ConnectToWorkProcess.AddAuthentication(ПараметрыСоединенияССервером1СПредприятие.ИмяАдминистратораИБ, 
			ПараметрыСоединенияССервером1СПредприятие.ПарольАдминистратораИБ);
			// Получаем список ИБ рабочего процесса
			InfoBases = ConnectToWorkProcess.GetInfoBases();
			
			Для каждого InfoBase Из InfoBases Цикл
				// Ищем нужную базу
				Если ВРег(InfoBase.Name) <> ВРег(ИмяИБ) Тогда
					Продолжить;
				КонецЕсли;
				
				// Получаем массив соединений с ИБ
				Connections = ConnectToWorkProcess.GetInfoBaseConnections(InfoBase);
				Для каждого Connection Из Connections Цикл
					Если НомерСоединениеДляРазрыва = Connection.ConnID Тогда
						ConnectToWorkProcess.Disconnect(Connection);
						СтрСообщение =
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Разорвано соединение: Пользователь %1, компьютер %2, установлено %3, режим %4'"),
						Connection.UserName,
						Connection.HostName,
						Connection.ConnectedAt,
						Connection.AppID);
						ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация, , , СтрСообщение);
						Возврат Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции
// Возвращает имя COM-класса для работы с 1С:Предприятием 8 через COM-соединение.
//
Функция ИмяCOMСоединителя() Экспорт
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	ПодстрокиВерсии = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
	СистемнаяИнфо.ВерсияПриложения, ".");
	Возврат "v" + ПодстрокиВерсии[0] + ПодстрокиВерсии[1] + ".COMConnector";
	
КонецФункции	

//Получает описание проводки из представления для карточки по последней строке
Функция ПолучитьСтр(Значение)Экспорт
	Возврат СтрПолучитьСтроку(Значение,СтрЧислоСтрок(Значение))
КонецФункции

//Получает уровень справочника
Функция УровеньСпр(Значение)Экспорт
	Возврат Значение.Уровень()
КонецФункции

Процедура ОтменаПроведенияУч(ДокументСсылка) Экспорт
	Отказ = Ложь;
	ПроверяемыеРеквизиты = Новый Массив;
	ПроверяемыеРеквизиты.Добавить("Дата");
	
	Для каждого ТекДокумент Из ДокументСсылка Цикл
		БюджетныйНаСервере.ЗаполнениеДоковГДУчетОбработкаПроверкиЗаполнения(ТекДокумент.ПолучитьОбъект(), Отказ, ПроверяемыеРеквизиты);
		Если Отказ Тогда
			Возврат;	
		КонецЕсли;
	КонецЦикла; 
	
	Если НЕ ТипЗнч(ДокументСсылка) = Тип("Массив") Тогда
		МассивДоков = Новый Массив;
		МассивДоков.Добавить(ДокументСсылка);
	Иначе
		МассивДоков = ДокументСсылка;
	КонецЕсли;
	Для каждого ТекДокумент Из МассивДоков Цикл
		ДокОбъект = ТекДокумент.ПолучитьОбъект();	
		ДокОбъект.Движения.Учетный.Очистить();
		ДокОбъект.Движения.Учетный.Записать();
	КонецЦикла; 
	
	
КонецПроцедуры

Процедура ОтменаПроведенияГД(ДокументСсылка) Экспорт
	Отказ = Ложь;
	ПроверяемыеРеквизиты = Новый Массив;
	ПроверяемыеРеквизиты.Добавить("Дата");
	
	Для каждого ТекДокумент Из ДокументСсылка Цикл
		БюджетныйНаСервере.ЗаполнениеДоковГДУчетОбработкаПроверкиЗаполнения(ТекДокумент.ПолучитьОбъект(), Отказ, ПроверяемыеРеквизиты);
		Если Отказ Тогда
			Возврат;	
		КонецЕсли;
	КонецЦикла; 
	
	
	
	Если НЕ ТипЗнч(ДокументСсылка) = Тип("Массив") Тогда
		МассивДоков = Новый Массив;
		МассивДоков.Добавить(ДокументСсылка);
	Иначе
		МассивДоков = ДокументСсылка;
	КонецЕсли;
	Для каждого ТекДокумент Из МассивДоков Цикл
		ДокОбъект = ТекДокумент.ПолучитьОбъект();	
		ДокОбъект.Движения.ВнутренниеДвижения.Очистить();
		ДокОбъект.Движения.ДвижениеДС.Очистить();
		ДокОбъект.Движения.Остатки.Очистить();
		ДокОбъект.Движения.ЦенныеБумаги.Очистить();
		//ДокОбъект.Движения.Учетный.Очистить();
		ДокОбъект.Движения.ВнутренниеДвижения.Записать();
		ДокОбъект.Движения.ДвижениеДС.Записать();
		ДокОбъект.Движения.Остатки.Записать();
		ДокОбъект.Движения.ЦенныеБумаги.Записать();
	КонецЦикла;
	//ДокОбъект.Движения.Учетный.Записать();
КонецПроцедуры

Функция ПроверкаДвижений(ТекДок) Экспорт
	Отказ = Ложь;
	РегДвижения = РегистрыНакопления.ДвижениеДС;
	ВыборкаДвижения = РегДвижения.ВыбратьПоРегистратору(ТекДок);
	Если ВыборкаДвижения.Следующий() Тогда
		Сообщить("У документа существуют движения по регистру ДвиженияДС!");
		Отказ = Истина;
	КонецЕсли;
	РегОстатки = РегистрыНакопления.Остатки;
	ВыборкаОстатки = РегОстатки.ВыбратьПоРегистратору(ТекДок);
	Если ВыборкаОстатки.Следующий() Тогда
		Сообщить("У документа существуют движения по регистру Остатки!");
		Отказ = Истина;
	КонецЕсли;
	РегВнутренние = РегистрыНакопления.ВнутренниеДвижения;
	ВыборкаВнутренние = РегВнутренние.ВыбратьПоРегистратору(ТекДок);
	Если ВыборкаВнутренние.Следующий() Тогда
		Сообщить("У документа существуют движения по регистру ВнутренниеДвижения!");
		Отказ = Истина;
	КонецЕсли;
	РегЦБ = РегистрыНакопления.ЦенныеБумаги;
	ВыборкаЦБ = РегЦБ.ВыбратьПоРегистратору(ТекДок);
	Если ВыборкаЦБ.Следующий() Тогда
		Сообщить("У документа существуют движения по регистру ЦенныеБумаги!");
		Отказ = Истина;
	КонецЕсли;
	РегБух = РегистрыБухгалтерии.Учетный;
	ВыборкаБух = РегБух.ВыбратьПоРегистратору(ТекДок);
	Если ВыборкаБух.Следующий() Тогда
		Сообщить("У документа существуют движения по учетному регистру!");
		Отказ = Истина;
	КонецЕсли;
	Возврат Отказ;
КонецФункции


Функция СредневзвешенныйКурсГД(Дата, Источник, Валюта) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ОстаткиОстатки.ВалСуммаОстаток = 0
	|			ТОГДА 0
	|		ИНАЧЕ ОстаткиОстатки.СуммаОстаток / ОстаткиОстатки.ВалСуммаОстаток
	|	КОНЕЦ КАК Курс
	|ИЗ
	|	РегистрНакопления.Остатки.Остатки(
	|			&Дата1,
	|			Источник = &ВыбИсточник
	|				И Валюта = &Валюта) КАК ОстаткиОстатки";
	
	
	Запрос.УстановитьПараметр("Дата1", Дата);
	Запрос.УстановитьПараметр("ВыбИсточник", Источник);
	Запрос.УстановитьПараметр("Валюта", Валюта);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Курс;
	Иначе
		Возврат 0;		
	КонецЕсли;
КонецФункции

Функция ГраницаВключительно(Поз) Экспорт
	Возврат Новый Граница(Поз,ВидГраницы.Включая);	
КонецФункции

Функция ПолучитьРелизОбновленияНаСервере() Экспорт
	Возврат ""
КонецФункции

процедура  ПроверитьРелизПлатформыТекущегоПользоваетляНаНезаполненность(ТекущийРелизПлатформы, СтруктураНайденного) Экспорт
	СтруктураНайденного = ПараметрыСеанса.ДопПараметры;
	ПользовательСсылка = СтруктураНайденного.Пользователь;
	СисИнфо = Новый СистемнаяИнформация;
	ТекущийРелизПлатформы = СисИнфо.ВерсияПриложения;
	//Если НЕ ЗначениеЗаполнено(СтруктураНайденного.РелизПлатформы) ИЛИ РелизНовее(СтруктураНайденного.РелизПлатформы,ТекущийРелизПлатформы) Тогда		
	//	СпрТекСотрудник = ПользовательСсылка.ПолучитьОбъект();
	//	СпрТекСотрудник.РелизПлатформы = ТекущийРелизПлатформы;
	//	СпрТекСотрудник.Записать();
	//КонецЕсли;
	ТекущийРелизПлатформы = СтруктураНайденного.РелизПлатформы;
КонецПроцедуры


//дубль, а что делать... на сервере нужна, а с клиента на сервер лишний раз тоже бегать неохота
Функция РелизНовее(РелизПлатформы, РелизОбновления) Экспорт
	
	НачСтр = 1;
	МассивЧисел1 = Новый Массив;
	Для Сим = 1  по СтрДлина(РелизПлатформы)  Цикл
		Если Сред(РелизПлатформы, Сим, 1) = "." Тогда
			МассивЧисел1.Добавить(Число(Сред(РелизПлатформы, НачСтр, Сим - НачСтр)));
			НачСтр = Сим + 1;	
		КонецЕсли;
	КонецЦикла;
	МассивЧисел1.Добавить(Число(Сред(РелизПлатформы, НачСтр, Сим - НачСтр)));
	
	НачСтр = 1;
	МассивЧисел2 = Новый Массив;
	Для Сим = 1  по СтрДлина(РелизОбновления)  Цикл
		Если Сред(РелизОбновления, Сим, 1) = "." Тогда
			МассивЧисел2.Добавить(Число(Сред(РелизОбновления, НачСтр, Сим - НачСтр)));
			НачСтр = Сим + 1;	
		КонецЕсли;
	КонецЦикла;
	МассивЧисел2.Добавить(Число(Сред(РелизОбновления, НачСтр, Сим - НачСтр)));
	
	Для Т = 0 По МассивЧисел1.Количество() - 1 Цикл
		Если МассивЧисел1[Т] < МассивЧисел2[Т] Тогда
			Возврат Истина;
		ИначеЕсли МассивЧисел1[Т] > МассивЧисел2[Т] Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат Ложь;

	

КонецФункции // ()


Процедура ВыполнитьПерерасчетВалютныхОстатков() Экспорт
	ВыборкаПодразделений = Справочники.Предприятия.Выбрать();
	Пока ВыборкаПодразделений.Следующий() Цикл
		Если ВыборкаПодразделений.ВедетсяВалютныйУчет Тогда
			ДокументПереоценки = Документы.УЧ_ПереоценкаВалютныхОстатков.СоздатьДокумент();
			ДокументПереоценки.Предприятие = ВыборкаПодразделений.Ссылка;
			ДокументПереоценки.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);			
		КонецЕсли;                                                                                              		
	КонецЦикла; 
КонецПроцедуры


Функция РассчитатьДЗСервер(ПараметрыОтчета, ТабДок = Неопределено, НужныГруппы = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаВводаОстатков = Дата('00010101');
	ПараметрГруппаКомпаний = Ложь;
	ВыборкаКонтрагентов = ПараметрыОтчета.Контрагент;
	Если НужныГруппы Тогда
		
		Если ТипЗнч(ПараметрыОтчета.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			ТекРодитель = ПараметрыОтчета.Контрагент.Родитель;
			Если ЗначениеЗаполнено(ТекРодитель.Родитель) И ТекРодитель.ГруппаКлиентов Тогда
				ПараметрГруппаКомпаний = Истина;
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	Контрагенты.Ссылка
				|ИЗ
				|	Справочник.Контрагенты КАК Контрагенты
				|ГДЕ
				|	Контрагенты.Родитель = &ГруппаКомпаний";
				
				Запрос.УстановитьПараметр("ГруппаКомпаний", ТекРодитель);
				
				Результат = Запрос.Выполнить();
				ВыборкаКонтрагентов = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Учетный.НайтиПоКоду("62.01"));
	
	// счет 62.3 только для ОТК
	МассивСчетовОТК = Новый Массив;
	МассивСчетовОТК.Добавить(ПланыСчетов.Учетный.НайтиПоКоду("62.04"));
	
	МассивПредприятий = Новый Массив;
	МассивПредприятийОТК = Новый Массив;
	МассивПредприятийОТК.Добавить(Справочники.Предприятия.НайтиПоНаименованию("ОТК"));
	
	//Если ТипЗнч(ПараметрыОтчета.Предприятия) = Тип("СписокЗначений") Тогда
	//	
	//	Для Каждого Эл Из ПараметрыОтчета.Предприятия Цикл
	//	
	//		Если Эл.Значение = Справочники.Предприятия.НайтиПоНаименованию("ОТК") Тогда
	//			МассивПредприятийОТК.Добавить(Эл.Значение);
	//		Иначе
	//			МассивПредприятий.Добавить(Эл.Значение);
	//		КонецЕсли;
	//	
	//	КонецЦикла;
	//	
	//Иначе
	//	
	//	Если ПараметрыОтчета.Предприятия = Справочники.Предприятия.НайтиПоНаименованию("ОТК") Тогда
	//		МассивПредприятийОТК.Добавить(ПараметрыОтчета.Предприятия);
	//	Иначе
	//		МассивПредприятий.Добавить(ПараметрыОтчета.Предприятия);	
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
	//запрос на остатки
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УчетныйОстатки.Субконто1 КАК Контрагент,
	               |	ЕСТЬNULL(УчетныйОстатки.СуммаОстатокДт, 0) КАК ДЗИтого,
	               |	ЕСТЬNULL(УчетныйОстатки.СуммаОстатокКт, 0) КАК КЗ,
	               |	ОтветственныеСрезПоследних.Ответственный,
	               |	КоммерческиеДиректорыСрезПоследних.КоммерческийДиректор,
	               |	УчетныйОстатки.Субконто1.Родитель КАК Родитель
	               |ПОМЕСТИТЬ vr
	               |ИЗ
	               |	РегистрБухгалтерии.Учетный.Остатки(
	               |			&Дата2,
	               |			Счет В (&Счета),
	               |			,
	               |			СценарийПлана = &Сценарий
	               |				И Субконто1 В (&Контрагент)
	               |				И НЕ Предприятия В ИЕРАРХИИ (&ПредприятияОТК)) КАК УчетныйОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Ответственные.СрезПоследних(&Дата2, ) КАК ОтветственныеСрезПоследних
	               |		ПО УчетныйОстатки.Субконто1 = ОтветственныеСрезПоследних.Контрагент
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоммерческиеДиректоры.СрезПоследних(&Дата2, ) КАК КоммерческиеДиректорыСрезПоследних
	               |		ПО УчетныйОстатки.Субконто1 = КоммерческиеДиректорыСрезПоследних.Контрагент
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	УчетныйОстатки.Субконто1,
	               |	ЕСТЬNULL(УчетныйОстатки.СуммаОстатокДт, 0),
	               |	ЕСТЬNULL(УчетныйОстатки.СуммаОстатокКт, 0),
	               |	ОтветственныеСрезПоследних.Ответственный,
	               |	КоммерческиеДиректорыСрезПоследних.КоммерческийДиректор,
	               |	УчетныйОстатки.Субконто1.Родитель
	               |ИЗ
	               |	РегистрБухгалтерии.Учетный.Остатки(
	               |			&Дата2,
	               |			Счет В (&СчетаОТК),
	               |			,
	               |			СценарийПлана = &Сценарий
	               |				И Субконто1 В (&Контрагент)
	               |				И Предприятия В ИЕРАРХИИ (&ПредприятияОТК)) КАК УчетныйОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Ответственные.СрезПоследних(&Дата2, ) КАК ОтветственныеСрезПоследних
	               |		ПО УчетныйОстатки.Субконто1 = ОтветственныеСрезПоследних.Контрагент
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоммерческиеДиректоры.СрезПоследних(&Дата2, ) КАК КоммерческиеДиректорыСрезПоследних
	               |		ПО УчетныйОстатки.Субконто1 = КоммерческиеДиректорыСрезПоследних.Контрагент
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	vr.Контрагент,
	               |	СУММА(vr.ДЗИтого) КАК ДЗИтого,
	               |	СУММА(vr.КЗ) КАК КЗ,
	               |	vr.Ответственный,
	               |	vr.КоммерческийДиректор,
	               |	vr.Родитель
	               |ИЗ
	               |	vr КАК vr
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	vr.Контрагент,
	               |	vr.Ответственный,
	               |	vr.КоммерческийДиректор,
	               |	vr.Родитель";
	
	
	
	//раскладка фильтра
	
	//Запрос.УстановитьПараметр("Дата1", Дата('20090101'));
	
	МоментКонца = Новый Граница(КонецДня(Дата(ПараметрыОтчета.Дата1)), ВидГраницы.Включая);
	
	Запрос.УстановитьПараметр("Дата2", МоментКонца);
	Запрос.УстановитьПараметр("Счета", МассивСчетов);
	Запрос.УстановитьПараметр("СчетаОТК", МассивСчетовОТК);
	Запрос.УстановитьПараметр("Сценарий", Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина));
	//Запрос.УстановитьПараметр("Предприятия", МассивПредприятий);
	Запрос.УстановитьПараметр("ПредприятияОТК", МассивПредприятийОТК);
	Запрос.УстановитьПараметр("Контрагент", ВыборкаКонтрагентов);
	
	//Запрос.УстановитьПараметр("СЭПТ", Справочники.Контрагенты.НайтиПоНаименованию("СЭПТ"));
	РезультатОстатки = Запрос.Выполнить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ЭтоГруппа = ИСТИНА
	|	И Контрагенты.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", "СЭПТ");
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		СЭПТ = Выборка.Ссылка; 
	Иначе
		СЭПТ = Неопределено;
	КонецЕсли;
	
	
	//запрос по операциям(записям)
	НаДату = КонецДня(ПараметрыОтчета.Дата1);
	
	Если НаДату > ДобавитьМесяц(ДатаВводаОстатков, 3) Тогда //более 3-х месяцев не бывает условий (спорно конечно)
		НужныЛиЗвездочки = Ложь;
	Иначе
		НужныЛиЗвездочки = Истина;
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	
	Если НужныЛиЗвездочки Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВЫБОР
		               |		КОГДА ТИПЗНАЧЕНИЯ(УчетныйОборотыДтКт.Регистратор) = ТИП(Документ.УЧ_Сторно)
		               |			ТОГДА УчетныйОборотыДтКт.Регистратор.ДокОснование.Дата
		               |		ИНАЧЕ ВЫБОР
		               |				КОГДА ТИПЗНАЧЕНИЯ(УчетныйОборотыДтКт.Регистратор) = ТИП(Документ.УЧ_Реализация)
		               |					ТОГДА ВЫБОР
		               |							КОГДА УчетныйОборотыДтКт.Регистратор.ДатыНеСовпадают = ИСТИНА
		               |								ТОГДА УчетныйОборотыДтКт.Регистратор.ДатаОтгрузки
		               |							ИНАЧЕ УчетныйОборотыДтКт.Период
		               |						КОНЕЦ
		               |				ИНАЧЕ УчетныйОборотыДтКт.Период
		               |			КОНЕЦ
		               |	КОНЕЦ КАК ДатаОтгрузки,
		               |	УчетныйОборотыДтКт.СубконтоДт1 КАК Контрагент,
		               |	УчетныйОборотыДтКт.СубконтоДт2 КАК Договор,
		               |	ЕСТЬNULL(УчетныйОборотыДтКт.СуммаОборот, 0) КАК СуммаОтгрузки,
		               |	ВЫБОР
		               |		КОГДА УчетныйОборотыДтКт.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ВыручкаОтРеал)
		               |			ТОГДА ""Реализация""
		               |		ИНАЧЕ ВЫБОР
		               |				КОГДА УчетныйОборотыДтКт.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Учетный.РасходыПоРеал)
		               |					ТОГДА ""Транспорт""
		               |				ИНАЧЕ ВЫБОР
		               |						КОГДА УчетныйОборотыДтКт.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Учетный.Вспомогательный)
		               |							ТОГДА ""Ввод остатков""
		               |						ИНАЧЕ ""Прочее""
		               |					КОНЕЦ
		               |			КОНЕЦ
		               |	КОНЕЦ КАК ВидСуммы,
		               |	УчетныйОборотыДтКт.Регистратор,
		               |	УчетныйОборотыДтКт.Регистратор.Номер КАК Номер,
		               |	ВЫБОР
		               |		КОГДА ТИПЗНАЧЕНИЯ(УчетныйОборотыДтКт.Регистратор) = ТИП(Документ.УЧ_Сторно)
		               |			ТОГДА УчетныйОборотыДтКт.Регистратор.ДокОснование.Дата
		               |		ИНАЧЕ ВЫБОР
		               |				КОГДА ТИПЗНАЧЕНИЯ(УчетныйОборотыДтКт.Регистратор) = ТИП(Документ.УЧ_Реализация)
		               |					ТОГДА ВЫБОР
		               |							КОГДА УчетныйОборотыДтКт.Регистратор.ДатыНеСовпадают = ИСТИНА
		               |								ТОГДА УчетныйОборотыДтКт.Регистратор.ДатаОтгрузки
		               |							ИНАЧЕ УчетныйОборотыДтКт.Регистратор.Дата
		               |						КОНЕЦ
		               |				ИНАЧЕ УчетныйОборотыДтКт.Регистратор.Дата
		               |			КОНЕЦ
		               |	КОНЕЦ КАК Дата,
		               |	УчетныйОборотыДтКт.Регистратор.Комментарий КАК Комментарий,
		               |	0 КАК Нормальная,
		               |	0 КАК Просроченная,
		               |	РегУчетный.Содержание,
		               |	ОтветственныеСрезПоследних.Ответственный,
		               |	КоммерческиеДиректорыСрезПоследних.КоммерческийДиректор,
		               |	УчетныйОборотыДтКт.СубконтоДт1.Родитель КАК Родитель,
		               |	УчетныйОборотыДтКт.НомерСтроки
		               |ПОМЕСТИТЬ ВТ_УчетныеДанные
		               |ИЗ
		               |	РегистрБухгалтерии.Учетный.ОборотыДтКт(
		               |			&Дата1,
		               |			&Дата2,
		               |			Запись,
		               |			СчетДт В (&Счета),
		               |			,
		               |			,
		               |			,
		               |			СубконтоДт1 В (&Контрагент)
		               |				И НЕ Предприятия В ИЕРАРХИИ (&ПредприятияОТК)) КАК УчетныйОборотыДтКт
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Учетный КАК РегУчетный
		               |		ПО УчетныйОборотыДтКт.Регистратор = РегУчетный.Регистратор
		               |			И УчетныйОборотыДтКт.НомерСтроки = РегУчетный.НомерСтроки
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Ответственные.СрезПоследних(&Дата2, ) КАК ОтветственныеСрезПоследних
		               |		ПО УчетныйОборотыДтКт.СубконтоДт1 = ОтветственныеСрезПоследних.Контрагент
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоммерческиеДиректоры.СрезПоследних(&Дата2, ) КАК КоммерческиеДиректорыСрезПоследних
		               |		ПО УчетныйОборотыДтКт.СубконтоДт1 = КоммерческиеДиректорыСрезПоследних.Контрагент
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ВЫБОР
		               |		КОГДА ТИПЗНАЧЕНИЯ(УчетныйОборотыДтКт.Регистратор) = ТИП(Документ.УЧ_Сторно)
		               |			ТОГДА УчетныйОборотыДтКт.Регистратор.ДокОснование.Дата
		               |		ИНАЧЕ ВЫБОР
		               |				КОГДА ТИПЗНАЧЕНИЯ(УчетныйОборотыДтКт.Регистратор) = ТИП(Документ.УЧ_Реализация)
		               |					ТОГДА ВЫБОР
		               |							КОГДА УчетныйОборотыДтКт.Регистратор.ДатыНеСовпадают = ИСТИНА
		               |								ТОГДА УчетныйОборотыДтКт.Регистратор.ДатаОтгрузки
		               |							ИНАЧЕ УчетныйОборотыДтКт.Период
		               |						КОНЕЦ
		               |				ИНАЧЕ УчетныйОборотыДтКт.Период
		               |			КОНЕЦ
		               |	КОНЕЦ,
		               |	УчетныйОборотыДтКт.СубконтоДт1,
		               |	УчетныйОборотыДтКт.СубконтоДт2,
		               |	ЕСТЬNULL(УчетныйОборотыДтКт.СуммаОборот, 0),
		               |	ВЫБОР
		               |		КОГДА УчетныйОборотыДтКт.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ВыручкаОтРеал)
		               |			ТОГДА ""Транспорт""
		               |		ИНАЧЕ ВЫБОР
		               |				КОГДА УчетныйОборотыДтКт.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Учетный.РасходыПоРеал)
		               |					ТОГДА ""Транспорт""
		               |				ИНАЧЕ ВЫБОР
		               |						КОГДА УчетныйОборотыДтКт.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Учетный.Вспомогательный)
		               |							ТОГДА ""Ввод остатков""
		               |						ИНАЧЕ ""Прочее""
		               |					КОНЕЦ
		               |			КОНЕЦ
		               |	КОНЕЦ,
		               |	УчетныйОборотыДтКт.Регистратор,
		               |	УчетныйОборотыДтКт.Регистратор.Номер,
		               |	ВЫБОР
		               |		КОГДА ТИПЗНАЧЕНИЯ(УчетныйОборотыДтКт.Регистратор) = ТИП(Документ.УЧ_Сторно)
		               |			ТОГДА УчетныйОборотыДтКт.Регистратор.ДокОснование.Дата
		               |		ИНАЧЕ ВЫБОР
		               |				КОГДА ТИПЗНАЧЕНИЯ(УчетныйОборотыДтКт.Регистратор) = ТИП(Документ.УЧ_Реализация)
		               |					ТОГДА ВЫБОР
		               |							КОГДА УчетныйОборотыДтКт.Регистратор.ДатыНеСовпадают = ИСТИНА
		               |								ТОГДА УчетныйОборотыДтКт.Регистратор.ДатаОтгрузки
		               |							ИНАЧЕ УчетныйОборотыДтКт.Регистратор.Дата
		               |						КОНЕЦ
		               |				ИНАЧЕ УчетныйОборотыДтКт.Регистратор.Дата
		               |			КОНЕЦ
		               |	КОНЕЦ,
		               |	УчетныйОборотыДтКт.Регистратор.Комментарий,
		               |	0,
		               |	0,
		               |	РегУчетный.Содержание,
		               |	ОтветственныеСрезПоследних.Ответственный,
		               |	КоммерческиеДиректорыСрезПоследних.КоммерческийДиректор,
		               |	УчетныйОборотыДтКт.СубконтоДт1.Родитель,
		               |	УчетныйОборотыДтКт.НомерСтроки
		               |ИЗ
		               |	РегистрБухгалтерии.Учетный.ОборотыДтКт(
		               |			&Дата1,
		               |			&Дата2,
		               |			Запись,
		               |			СчетДт В (&СчетаОТК),
		               |			,
		               |			,
		               |			,
		               |			СубконтоДт1 В (&Контрагент)
		               |				И Предприятия В ИЕРАРХИИ (&ПредприятияОТК)) КАК УчетныйОборотыДтКт
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Учетный КАК РегУчетный
		               |		ПО УчетныйОборотыДтКт.Регистратор = РегУчетный.Регистратор
		               |			И УчетныйОборотыДтКт.НомерСтроки = РегУчетный.НомерСтроки
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Ответственные.СрезПоследних(&Дата2, ) КАК ОтветственныеСрезПоследних
		               |		ПО УчетныйОборотыДтКт.СубконтоДт1 = ОтветственныеСрезПоследних.Контрагент
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоммерческиеДиректоры.СрезПоследних(&Дата2, ) КАК КоммерческиеДиректорыСрезПоследних
		               |		ПО УчетныйОборотыДтКт.СубконтоДт1 = КоммерческиеДиректорыСрезПоследних.Контрагент
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_УчетныеДанные.ДатаОтгрузки,
		               |	ВТ_УчетныеДанные.Контрагент,
		               |	ВТ_УчетныеДанные.Договор,
		               |	ВТ_УчетныеДанные.СуммаОтгрузки,
		               |	ВТ_УчетныеДанные.ВидСуммы,
		               |	ВТ_УчетныеДанные.Регистратор,
		               |	ВТ_УчетныеДанные.Номер,
		               |	ВТ_УчетныеДанные.Дата,
		               |	ВТ_УчетныеДанные.Комментарий,
		               |	ВТ_УчетныеДанные.Нормальная,
		               |	ВТ_УчетныеДанные.Просроченная,
		               |	ВТ_УчетныеДанные.Содержание,
		               |	ВТ_УчетныеДанные.Ответственный,
		               |	ВТ_УчетныеДанные.КоммерческийДиректор,
		               |	ВТ_УчетныеДанные.Родитель,
		               |	ВТ_УчетныеДанные.НомерСтроки,
		               |	МАКСИМУМ(ОтсрочкаПоДоговорам.Период) КАК ПериодПоОтсрочке
		               |ПОМЕСТИТЬ ВТ_ДанныеСПериодомПоОтсрочке
		               |ИЗ
		               |	ВТ_УчетныеДанные КАК ВТ_УчетныеДанные
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтсрочкаПоДоговорам КАК ОтсрочкаПоДоговорам
		               |		ПО ВТ_УчетныеДанные.ДатаОтгрузки >= ОтсрочкаПоДоговорам.Период
		               |			И ВТ_УчетныеДанные.Договор = ОтсрочкаПоДоговорам.Договор
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВТ_УчетныеДанные.ДатаОтгрузки,
		               |	ВТ_УчетныеДанные.Контрагент,
		               |	ВТ_УчетныеДанные.Договор,
		               |	ВТ_УчетныеДанные.ВидСуммы,
		               |	ВТ_УчетныеДанные.Регистратор,
		               |	ВТ_УчетныеДанные.Номер,
		               |	ВТ_УчетныеДанные.Дата,
		               |	ВТ_УчетныеДанные.Комментарий,
		               |	ВТ_УчетныеДанные.Содержание,
		               |	ВТ_УчетныеДанные.Ответственный,
		               |	ВТ_УчетныеДанные.КоммерческийДиректор,
		               |	ВТ_УчетныеДанные.Родитель,
		               |	ВТ_УчетныеДанные.СуммаОтгрузки,
		               |	ВТ_УчетныеДанные.Нормальная,
		               |	ВТ_УчетныеДанные.Просроченная,
		               |	ВТ_УчетныеДанные.НомерСтроки
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_ДанныеСПериодомПоОтсрочке.ДатаОтгрузки КАК ДатаОтгрузки,
		               |	ВТ_ДанныеСПериодомПоОтсрочке.Контрагент,
		               |	ВТ_ДанныеСПериодомПоОтсрочке.Договор,
		               |	ВТ_ДанныеСПериодомПоОтсрочке.СуммаОтгрузки,
		               |	ВТ_ДанныеСПериодомПоОтсрочке.ВидСуммы,
		               |	ВТ_ДанныеСПериодомПоОтсрочке.Регистратор,
		               |	ВТ_ДанныеСПериодомПоОтсрочке.Номер,
		               |	ВТ_ДанныеСПериодомПоОтсрочке.Дата,
		               |	ВТ_ДанныеСПериодомПоОтсрочке.Комментарий,
		               |	ВТ_ДанныеСПериодомПоОтсрочке.Нормальная,
		               |	ВТ_ДанныеСПериодомПоОтсрочке.Просроченная,
		               |	ВТ_ДанныеСПериодомПоОтсрочке.Содержание,
		               |	ВТ_ДанныеСПериодомПоОтсрочке.Ответственный,
		               |	ВТ_ДанныеСПериодомПоОтсрочке.КоммерческийДиректор,
		               |	ВТ_ДанныеСПериодомПоОтсрочке.Родитель,
		               |	ВТ_ДанныеСПериодомПоОтсрочке.НомерСтроки,
		               |	ВТ_ДанныеСПериодомПоОтсрочке.ПериодПоОтсрочке,
		               |	ЕСТЬNULL(ОтсрочкаПоДоговорам.Отсрочка, 0) КАК Отсрочка,
		               |	ЕСТЬNULL(ОтсрочкаПоДоговорам.Предоплата, 0) КАК Предоплата,
		               |	ДоговорыКонтрагентов.ОтсрочкаДоКонцаМесяца,
		               |	ДоговорыКонтрагентов.УсловияКонтрагента.(
		               |		Ссылка,
		               |		НомерСтроки,
		               |		ДоляСуммы,
		               |		ПроцентПредоплаты,
		               |		Отсрочка
		               |	)
		               |ИЗ
		               |	ВТ_ДанныеСПериодомПоОтсрочке КАК ВТ_ДанныеСПериодомПоОтсрочке
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтсрочкаПоДоговорам КАК ОтсрочкаПоДоговорам
		               |		ПО ВТ_ДанныеСПериодомПоОтсрочке.ПериодПоОтсрочке = ОтсрочкаПоДоговорам.Период
		               |			И ВТ_ДанныеСПериодомПоОтсрочке.Договор = ОтсрочкаПоДоговорам.Договор
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		               |		ПО ВТ_ДанныеСПериодомПоОтсрочке.Договор = ДоговорыКонтрагентов.Ссылка
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ДатаОтгрузки УБЫВ";
	Иначе
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВЫБОР
		               |		КОГДА ТИПЗНАЧЕНИЯ(УчетныйОборотыДтКт.Регистратор) = ТИП(Документ.УЧ_Сторно)
		               |			ТОГДА УчетныйОборотыДтКт.Регистратор.ДокОснование.Дата
		               |		ИНАЧЕ ВЫБОР
		               |				КОГДА ТИПЗНАЧЕНИЯ(УчетныйОборотыДтКт.Регистратор) = ТИП(Документ.УЧ_Реализация)
		               |					ТОГДА ВЫБОР
		               |							КОГДА УчетныйОборотыДтКт.Регистратор.ДатыНеСовпадают = ИСТИНА
		               |								ТОГДА УчетныйОборотыДтКт.Регистратор.ДатаОтгрузки
		               |							ИНАЧЕ УчетныйОборотыДтКт.Период
		               |						КОНЕЦ
		               |				ИНАЧЕ УчетныйОборотыДтКт.Период
		               |			КОНЕЦ
		               |	КОНЕЦ КАК ДатаОтгрузки,
		               |	УчетныйОборотыДтКт.СубконтоДт1 КАК Контрагент,
		               |	УчетныйОборотыДтКт.СубконтоДт2 КАК Договор,
		               |	ЕСТЬNULL(УчетныйОборотыДтКт.СуммаОборот, 0) КАК СуммаОтгрузки,
		               |	ВЫБОР
		               |		КОГДА УчетныйОборотыДтКт.СчетКт = &ВыручкаОтРеал
		               |			ТОГДА ""Реализация""
		               |		ИНАЧЕ ВЫБОР
		               |				КОГДА УчетныйОборотыДтКт.СчетКт = &РасходыПоРеал
		               |					ТОГДА ""Транспорт""
		               |				ИНАЧЕ ВЫБОР
		               |						КОГДА УчетныйОборотыДтКт.СчетКт = &Вспомогательный
		               |							ТОГДА ""Ввод остатков""
		               |						ИНАЧЕ ""Прочее""
		               |					КОНЕЦ
		               |			КОНЕЦ
		               |	КОНЕЦ КАК ВидСуммы,
		               |	УчетныйОборотыДтКт.Регистратор,
		               |	УчетныйОборотыДтКт.Регистратор.Номер КАК Номер,
		               |	ВЫБОР
		               |		КОГДА ТИПЗНАЧЕНИЯ(УчетныйОборотыДтКт.Регистратор) = ТИП(Документ.УЧ_Сторно)
		               |			ТОГДА УчетныйОборотыДтКт.Регистратор.ДокОснование.Дата
		               |		ИНАЧЕ ВЫБОР
		               |				КОГДА ТИПЗНАЧЕНИЯ(УчетныйОборотыДтКт.Регистратор) = ТИП(Документ.УЧ_Реализация)
		               |					ТОГДА ВЫБОР
		               |							КОГДА УчетныйОборотыДтКт.Регистратор.ДатыНеСовпадают = ИСТИНА
		               |								ТОГДА УчетныйОборотыДтКт.Регистратор.ДатаОтгрузки
		               |							ИНАЧЕ УчетныйОборотыДтКт.Регистратор.Дата
		               |						КОНЕЦ
		               |				ИНАЧЕ УчетныйОборотыДтКт.Регистратор.Дата
		               |			КОНЕЦ
		               |	КОНЕЦ КАК Дата,
		               |	УчетныйОборотыДтКт.Регистратор.Комментарий КАК Комментарий,
		               |	0 КАК Нормальная,
		               |	0 КАК Просроченная,
		               |	"""" КАК Содержание,
		               |	ОтветственныеСрезПоследних.Ответственный,
		               |	КоммерческиеДиректорыСрезПоследних.КоммерческийДиректор,
		               |	УчетныйОборотыДтКт.СубконтоДт1.Родитель КАК Родитель,
		               |	УчетныйОборотыДтКт.СубконтоДт1 КАК Контрагент2,
		               |	УчетныйОборотыДтКт.НомерСтроки
		               |ПОМЕСТИТЬ ВТ_УчетныеДанные
		               |ИЗ
		               |	РегистрБухгалтерии.Учетный.ОборотыДтКт(
		               |			&Дата1,
		               |			&Дата2,
		               |			Запись,
		               |			СчетДт В (&Счета),
		               |			,
		               |			,
		               |			,
		               |			СубконтоДт1 В (&Контрагент)
		               |				И НЕ Предприятия В ИЕРАРХИИ (&ПредприятияОТК)) КАК УчетныйОборотыДтКт
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Ответственные.СрезПоследних(&Дата2, ) КАК ОтветственныеСрезПоследних
		               |		ПО УчетныйОборотыДтКт.СубконтоДт1 = ОтветственныеСрезПоследних.Контрагент
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоммерческиеДиректоры.СрезПоследних(&Дата2, ) КАК КоммерческиеДиректорыСрезПоследних
		               |		ПО УчетныйОборотыДтКт.СубконтоДт1 = КоммерческиеДиректорыСрезПоследних.Контрагент
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ВЫБОР
		               |		КОГДА ТИПЗНАЧЕНИЯ(УчетныйОборотыДтКт.Регистратор) = ТИП(Документ.УЧ_Сторно)
		               |			ТОГДА УчетныйОборотыДтКт.Регистратор.ДокОснование.Дата
		               |		ИНАЧЕ ВЫБОР
		               |				КОГДА ТИПЗНАЧЕНИЯ(УчетныйОборотыДтКт.Регистратор) = ТИП(Документ.УЧ_Реализация)
		               |					ТОГДА ВЫБОР
		               |							КОГДА УчетныйОборотыДтКт.Регистратор.ДатыНеСовпадают = ИСТИНА
		               |								ТОГДА УчетныйОборотыДтКт.Регистратор.ДатаОтгрузки
		               |							ИНАЧЕ УчетныйОборотыДтКт.Период
		               |						КОНЕЦ
		               |				ИНАЧЕ УчетныйОборотыДтКт.Период
		               |			КОНЕЦ
		               |	КОНЕЦ,
		               |	УчетныйОборотыДтКт.СубконтоДт1,
		               |	УчетныйОборотыДтКт.СубконтоДт2,
		               |	ЕСТЬNULL(УчетныйОборотыДтКт.СуммаОборот, 0),
		               |	ВЫБОР
		               |		КОГДА УчетныйОборотыДтКт.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ВыручкаОтРеал)
		               |			ТОГДА ""Транспорт""
		               |		ИНАЧЕ ВЫБОР
		               |				КОГДА УчетныйОборотыДтКт.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Учетный.РасходыПоРеал)
		               |					ТОГДА ""Транспорт""
		               |				ИНАЧЕ ВЫБОР
		               |						КОГДА УчетныйОборотыДтКт.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Учетный.Вспомогательный)
		               |							ТОГДА ""Ввод остатков""
		               |						ИНАЧЕ ""Прочее""
		               |					КОНЕЦ
		               |			КОНЕЦ
		               |	КОНЕЦ,
		               |	УчетныйОборотыДтКт.Регистратор,
		               |	УчетныйОборотыДтКт.Регистратор.Номер,
		               |	ВЫБОР
		               |		КОГДА ТИПЗНАЧЕНИЯ(УчетныйОборотыДтКт.Регистратор) = ТИП(Документ.УЧ_Сторно)
		               |			ТОГДА УчетныйОборотыДтКт.Регистратор.ДокОснование.Дата
		               |		ИНАЧЕ ВЫБОР
		               |				КОГДА ТИПЗНАЧЕНИЯ(УчетныйОборотыДтКт.Регистратор) = ТИП(Документ.УЧ_Реализация)
		               |					ТОГДА ВЫБОР
		               |							КОГДА УчетныйОборотыДтКт.Регистратор.ДатыНеСовпадают = ИСТИНА
		               |								ТОГДА УчетныйОборотыДтКт.Регистратор.ДатаОтгрузки
		               |							ИНАЧЕ УчетныйОборотыДтКт.Регистратор.Дата
		               |						КОНЕЦ
		               |				ИНАЧЕ УчетныйОборотыДтКт.Регистратор.Дата
		               |			КОНЕЦ
		               |	КОНЕЦ,
		               |	УчетныйОборотыДтКт.Регистратор.Комментарий,
		               |	0,
		               |	0,
		               |	"""",
		               |	ОтветственныеСрезПоследних.Ответственный,
		               |	КоммерческиеДиректорыСрезПоследних.КоммерческийДиректор,
		               |	УчетныйОборотыДтКт.СубконтоДт1.Родитель,
		               |	УчетныйОборотыДтКт.СубконтоДт1,
		               |	УчетныйОборотыДтКт.НомерСтроки
		               |ИЗ
		               |	РегистрБухгалтерии.Учетный.ОборотыДтКт(
		               |			&Дата1,
		               |			&Дата2,
		               |			Запись,
		               |			СчетДт В (&СчетаОТК),
		               |			,
		               |			,
		               |			,
		               |			СубконтоДт1 В (&Контрагент)
		               |				И Предприятия В ИЕРАРХИИ (&ПредприятияОТК)) КАК УчетныйОборотыДтКт
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Ответственные.СрезПоследних(&Дата2, ) КАК ОтветственныеСрезПоследних
		               |		ПО УчетныйОборотыДтКт.СубконтоДт1 = ОтветственныеСрезПоследних.Контрагент
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоммерческиеДиректоры.СрезПоследних(&Дата2, ) КАК КоммерческиеДиректорыСрезПоследних
		               |		ПО УчетныйОборотыДтКт.СубконтоДт1 = КоммерческиеДиректорыСрезПоследних.Контрагент
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_УчетныеДанные.ДатаОтгрузки,
		               |	ВТ_УчетныеДанные.Контрагент,
		               |	ВТ_УчетныеДанные.Договор,
		               |	ВТ_УчетныеДанные.СуммаОтгрузки,
		               |	ВТ_УчетныеДанные.ВидСуммы,
		               |	ВТ_УчетныеДанные.Регистратор,
		               |	ВТ_УчетныеДанные.Номер,
		               |	ВТ_УчетныеДанные.Дата,
		               |	ВТ_УчетныеДанные.Комментарий,
		               |	ВТ_УчетныеДанные.Нормальная,
		               |	ВТ_УчетныеДанные.Просроченная,
		               |	ВТ_УчетныеДанные.Содержание,
		               |	ВТ_УчетныеДанные.Ответственный,
		               |	ВТ_УчетныеДанные.КоммерческийДиректор,
		               |	ВТ_УчетныеДанные.Родитель,
		               |	ВТ_УчетныеДанные.Контрагент2,
		               |	ВТ_УчетныеДанные.НомерСтроки,
		               |	МАКСИМУМ(ОтсрочкаПоДоговорам.Период) КАК ПериодПоОтсрочке
		               |ПОМЕСТИТЬ ВТ_ДанныеСПериодомПоОтсрочке
		               |ИЗ
		               |	ВТ_УчетныеДанные КАК ВТ_УчетныеДанные
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтсрочкаПоДоговорам КАК ОтсрочкаПоДоговорам
		               |		ПО ВТ_УчетныеДанные.ДатаОтгрузки >= ОтсрочкаПоДоговорам.Период
		               |			И ВТ_УчетныеДанные.Договор = ОтсрочкаПоДоговорам.Договор
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВТ_УчетныеДанные.Ответственный,
		               |	ВТ_УчетныеДанные.КоммерческийДиректор,
		               |	ВТ_УчетныеДанные.Родитель,
		               |	ВТ_УчетныеДанные.Контрагент2,
		               |	ВТ_УчетныеДанные.ДатаОтгрузки,
		               |	ВТ_УчетныеДанные.Контрагент,
		               |	ВТ_УчетныеДанные.Договор,
		               |	ВТ_УчетныеДанные.ВидСуммы,
		               |	ВТ_УчетныеДанные.Регистратор,
		               |	ВТ_УчетныеДанные.Номер,
		               |	ВТ_УчетныеДанные.Дата,
		               |	ВТ_УчетныеДанные.Комментарий,
		               |	ВТ_УчетныеДанные.Содержание,
		               |	ВТ_УчетныеДанные.СуммаОтгрузки,
		               |	ВТ_УчетныеДанные.Нормальная,
		               |	ВТ_УчетныеДанные.Просроченная,
		               |	ВТ_УчетныеДанные.НомерСтроки
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_ДанныеСПериодомПоОтсрочке.ДатаОтгрузки КАК ДатаОтгрузки,
		               |	ВТ_ДанныеСПериодомПоОтсрочке.Контрагент,
		               |	ВТ_ДанныеСПериодомПоОтсрочке.Договор,
		               |	ВТ_ДанныеСПериодомПоОтсрочке.СуммаОтгрузки,
		               |	ВТ_ДанныеСПериодомПоОтсрочке.ВидСуммы,
		               |	ВТ_ДанныеСПериодомПоОтсрочке.Регистратор,
		               |	ВТ_ДанныеСПериодомПоОтсрочке.Номер,
		               |	ВТ_ДанныеСПериодомПоОтсрочке.Дата,
		               |	ВТ_ДанныеСПериодомПоОтсрочке.Комментарий,
		               |	ВТ_ДанныеСПериодомПоОтсрочке.Нормальная,
		               |	ВТ_ДанныеСПериодомПоОтсрочке.Просроченная,
		               |	ВТ_ДанныеСПериодомПоОтсрочке.Содержание,
		               |	ВТ_ДанныеСПериодомПоОтсрочке.Ответственный,
		               |	ВТ_ДанныеСПериодомПоОтсрочке.КоммерческийДиректор,
		               |	ВТ_ДанныеСПериодомПоОтсрочке.Родитель,
		               |	ВТ_ДанныеСПериодомПоОтсрочке.Контрагент2,
		               |	ВТ_ДанныеСПериодомПоОтсрочке.НомерСтроки,
		               |	ВТ_ДанныеСПериодомПоОтсрочке.ПериодПоОтсрочке,
		               |	ЕСТЬNULL(ОтсрочкаПоДоговорам.Отсрочка, 0) КАК Отсрочка,
		               |	ЕСТЬNULL(ОтсрочкаПоДоговорам.Предоплата, 0) КАК Предоплата,
		               |	ДоговорыКонтрагентов.ОтсрочкаДоКонцаМесяца,
		               |	ДоговорыКонтрагентов.УсловияКонтрагента.(
		               |		Ссылка,
		               |		НомерСтроки,
		               |		ДоляСуммы,
		               |		ПроцентПредоплаты,
		               |		Отсрочка
		               |	)
		               |ИЗ
		               |	ВТ_ДанныеСПериодомПоОтсрочке КАК ВТ_ДанныеСПериодомПоОтсрочке
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтсрочкаПоДоговорам КАК ОтсрочкаПоДоговорам
		               |		ПО ВТ_ДанныеСПериодомПоОтсрочке.ПериодПоОтсрочке = ОтсрочкаПоДоговорам.Период
		               |			И ВТ_ДанныеСПериодомПоОтсрочке.Договор = ОтсрочкаПоДоговорам.Договор
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		               |		ПО ВТ_ДанныеСПериодомПоОтсрочке.Договор = ДоговорыКонтрагентов.Ссылка
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ДатаОтгрузки УБЫВ";
		
		
	КонецЕсли;
	
	
	
	//раскладка фильтра
	
	Запрос.УстановитьПараметр("Дата1", ДобавитьМесяц(Дата(ПараметрыОтчета.Дата1), -12));
	Запрос.УстановитьПараметр("Дата2", КонецДня(Дата(ПараметрыОтчета.Дата1)));
	Запрос.УстановитьПараметр("Счета", МассивСчетов);
	Запрос.УстановитьПараметр("СчетаОТК", МассивСчетовОТК);
	Запрос.УстановитьПараметр("Сценарий", Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина));
	//Запрос.УстановитьПараметр("Предприятия", МассивПредприятий);
	Запрос.УстановитьПараметр("ПредприятияОТК", МассивПредприятийОТК);
	Запрос.УстановитьПараметр("Контрагент", ВыборкаКонтрагентов);
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Дата"));
	ОписаниеТиповДата = Новый ОписаниеТипов(Массив);
	
	РезультатДвижения = Запрос.Выполнить();
	ВыборкаОтгрузки = РезультатДвижения.Выгрузить();
	
	ДвиженияОтгрузки = ВыборкаОтгрузки.СкопироватьКолонки();
	ДвиженияОтгрузки.Колонки.Добавить("ДатаПросрочки", ОписаниеТиповДата);
	//ДвиженияОтгрузки.Колонки.Добавить("Нормальная");
	//ДвиженияОтгрузки.Колонки.Добавить("Просроченная");
	ДвиженияОтгрузки.Колонки.Добавить("ДЗИтого");
	ДвиженияОтгрузки.Колонки.Добавить("КЗ");
	ДвиженияОтгрузки.Колонки.Добавить("Сегодня");
	ДвиженияОтгрузки.Колонки.Добавить("Дни3");
	ДвиженияОтгрузки.Колонки.Добавить("Дни5");
	ДвиженияОтгрузки.Колонки.Добавить("ТрансНормальная");
	ДвиженияОтгрузки.Колонки.Добавить("ТрансПросроченная");
	ДвиженияОтгрузки.Колонки.Добавить("ТрансВсего");
	ДвиженияОтгрузки.Колонки.Добавить("ДатаПервойОплата");
	ДвиженияОтгрузки.Колонки.Добавить("РеализацияДатаПервойОплата");
	ДвиженияОтгрузки.Колонки.Добавить("ДатаПервойОтгрузка");
	ДвиженияОтгрузки.Колонки.Добавить("ТрансДатаПервойОплата");
	ДвиженияОтгрузки.Колонки.Добавить("ТрансДатаПервойОтгрузка");
	ДвиженияОтгрузки.Колонки.Добавить("ДалВПроср");
	ДвиженияОтгрузки.Колонки.Добавить("СредняяЦена");
	//ДвиженияОтгрузки.Колонки.Добавить("Ответственный");
	//ДвиженияОтгрузки.Очистить();
	
	
	ВыборкаОстатки = РезультатОстатки.Выгрузить();
	
	
	//обрабатываем условия и дозаполняем таблицу
	Для каждого ТекСтрокаКонтрагент Из ВыборкаОстатки Цикл
		//	
		//СтруктураПоиска = Новый Структура("Контрагент, Предприятия, Подразделение", ТекСтрокаКонтрагент.Контрагент, ТекСтрокаКонтрагент.Предприятия, ТекСтрокаКонтрагент.Подразделение);
		СтруктураПоиска = Новый Структура("Контрагент", ТекСтрокаКонтрагент.Контрагент);
		ОтобранныеСтроки = ВыборкаОтгрузки.НайтиСтроки(СтруктураПоиска);
		
		
		Для каждого ТекСтрокаДвижения Из ОтобранныеСтроки Цикл
			УсловияКонтрагента = ТекСтрокаДвижения.УсловияКонтрагента;
			СуммаОтгрузки = ТекСтрокаДвижения.СуммаОтгрузки;
			
			СимволНайден = Ложь;
			Если НужныЛиЗвездочки Тогда
				ПозицияПризнака = 0; 
				Пока ПозицияПризнака + 1 <= СтрДлина(ТекСтрокаДвижения.Содержание) Цикл
					Если Сред(ТекСтрокаДвижения.Содержание, ПозицияПризнака, 2) = "**" Тогда
						СимволНайден = Истина;
						Прервать;			
					КонецЕсли;
					ПозицияПризнака = ПозицияПризнака + 1;	
				КонецЦикла;
			КонецЕсли;
			Если СимволНайден Тогда //если найден признак **
				Попытка
					Отсрочка = Число(Сред(ТекСтрокаДвижения.Содержание, ?(ПозицияПризнака, ПозицияПризнака + 2, ПозицияПризнака + 3), СтрДлина(ТекСтрокаДвижения.Содержание) - ПозицияПризнака));									
				Исключение
					Отсрочка = 0;
				КонецПопытки;
				
				НоваяСтрокаОтгрузки = ДвиженияОтгрузки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаОтгрузки, ТекСтрокаДвижения);
				НоваяСтрокаОтгрузки.СуммаОтгрузки = СуммаОтгрузки;
				НоваяСтрокаОтгрузки.ДатаПросрочки = ТекСтрокаДвижения.ДатаОтгрузки + Отсрочка * 60 * 60 * 24;
				НоваяСтрокаОтгрузки.Комментарий = Отсрочка;
				
				
			Иначе //если обычные условия
				
				ДатаВСодержании = Найти(ТекСтрокаДвижения.Содержание, "##Дата отгрузки:");
				Если ДатаВСодержании Тогда
					ДатаИзСодержания = Сред(ТекСтрокаДвижения.Содержание, ДатаВСодержании + 16, СтрДлина(ТекСтрокаДвижения.Содержание) - ДатаВСодержании - 15);	
					Если ЗначениеЗаполнено(ДатаИзСодержания) Тогда
						ТекСтрокаДвижения.ДатаОтгрузки = Дата(Число(Сред(ДатаИзСодержания, 7, 4)), Число(Сред(ДатаИзСодержания, 4, 2)), Число(Сред(ДатаИзСодержания, 1, 2)));		
						ТекСтрокаДвижения.Дата = Дата(Число(Сред(ДатаИзСодержания, 7, 4)), Число(Сред(ДатаИзСодержания, 4, 2)), Число(Сред(ДатаИзСодержания, 1, 2)));		
					Иначе
						ТекСтрокаДвижения.ДатаОтгрузки = ДатаВводаОстатков;
						ТекСтрокаДвижения.Дата = ДатаВводаОстатков;
					КонецЕсли;
					СтруктураУсловий = УЧ_Сервер.ВернутьОтсрочкуПоДоговору(ТекСтрокаДвижения.Договор, ТекСтрокаДвижения.ДатаОтгрузки);
					ЗаполнитьЗначенияСвойств(ТекСтрокаДвижения, СтруктураУсловий);				
				КонецЕсли;
				
				
				
				Если Формат(ТекСтрокаДвижения.ДатаОтгрузки, "ДФ=dd.MM.yyyy") = Формат(Дата('20110430000000'), "ДФ=dd.MM.yyyy")  Тогда
					НоваяСтрокаОтгрузки = ДвиженияОтгрузки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаОтгрузки, ТекСтрокаДвижения);
					НоваяСтрокаОтгрузки.ДатаПросрочки = ТекСтрокаДвижения.ДатаОтгрузки;
					НоваяСтрокаОтгрузки.Комментарий = "Просрочка на начало";	
					
				Иначе
					Если УсловияКонтрагента.Количество() Тогда //если есть условия
						Если ТекСтрокаДвижения.ВидСуммы = "Прочее" Тогда //прочие начисления на 62.1. условия не нужны
							НоваяСтрокаОтгрузки = ДвиженияОтгрузки.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрокаОтгрузки, ТекСтрокаДвижения);
							НоваяСтрокаОтгрузки.СуммаОтгрузки = СуммаОтгрузки;
							НоваяСтрокаОтгрузки.ДатаПросрочки = ТекСтрокаДвижения.ДатаОтгрузки;
							НоваяСтрокаОтгрузки.Комментарий = "Прочее";
						Иначе
							
							
							Для каждого СтрокаУсловия Из УсловияКонтрагента Цикл
								
								НоваяСтрокаОтгрузки = ДвиженияОтгрузки.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрокаОтгрузки, ТекСтрокаДвижения);
								НоваяСтрокаОтгрузки.СуммаОтгрузки = (СтрокаУсловия.ДоляСуммы / 100) * 
								СуммаОтгрузки * (1 - ТекСтрокаДвижения.Предоплата / 100);
								
								Если ТекСтрокаДвижения.ОтсрочкаДоКонцаМесяца Тогда //если динамическая отсрочка до конца месяца
									НоваяСтрокаОтгрузки.ДатаПросрочки = КонецМесяца(ТекСтрокаДвижения.ДатаОтгрузки);
								Иначе	
									НоваяСтрокаОтгрузки.ДатаПросрочки = ТекСтрокаДвижения.ДатаОтгрузки + ТекСтрокаДвижения.Отсрочка * 60 * 60 * 24;
								КонецЕсли;
								НоваяСтрокаОтгрузки.Комментарий = ТекСтрокаДвижения.Отсрочка;
								
								
								Если ТекСтрокаДвижения.Предоплата Тогда //если есть процент предоплаты
									НоваяСтрокаОтгрузки = ДвиженияОтгрузки.Добавить();
									ЗаполнитьЗначенияСвойств(НоваяСтрокаОтгрузки, ТекСтрокаДвижения);
									НоваяСтрокаОтгрузки.СуммаОтгрузки = (СтрокаУсловия.ДоляСуммы / 100) * 
									СуммаОтгрузки * (ТекСтрокаДвижения.Предоплата / 100);
									НоваяСтрокаОтгрузки.ДатаПросрочки = ТекСтрокаДвижения.ДатаОтгрузки;
									НоваяСтрокаОтгрузки.Комментарий = 0;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					Иначе //если нет условий
						НоваяСтрокаОтгрузки = ДвиженияОтгрузки.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаОтгрузки, ТекСтрокаДвижения);
						НоваяСтрокаОтгрузки.СуммаОтгрузки = СуммаОтгрузки;
						НоваяСтрокаОтгрузки.ДатаПросрочки = ТекСтрокаДвижения.ДатаОтгрузки;
						НоваяСтрокаОтгрузки.Комментарий = "нет условий";
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	
	//упорядочиваем по ДатеПросрочки
	ДвиженияОтгрузки.Сортировать("ДатаПросрочки Убыв, НомерСтроки Возр");
	
	
	Для каждого ТекСтрокаКонтрагент Из ВыборкаОстатки Цикл
		ДЗВсего = ТекСтрокаКонтрагент.ДЗИтого;
		//ДЗВсего2 = ТекСтрокаКонтрагент.КЗ;
		//СтруктураПоиска = Новый Структура("Контрагент, Предприятия, Подразделение", ТекСтрокаКонтрагент.Контрагент, ТекСтрокаКонтрагент.Предприятия, ТекСтрокаКонтрагент.Подразделение);
		СтруктураПоиска = Новый Структура("Контрагент", ТекСтрокаКонтрагент.Контрагент);
		ОтобранныеСтроки = ДвиженияОтгрузки.НайтиСтроки(СтруктураПоиска);
		//Если ПараметрыОтчета.Расшифровка Тогда
		//	ТабДок.Вывести(ОбластьРасшифровкаШапка);
		//КонецЕсли;
		Если НЕ ДЗВсего Тогда  //если Кредиторка
			НоваяСтрока = ДвиженияОтгрузки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаКонтрагент);
			
			Если ТекСтрокаКонтрагент.Родитель = СЭПТ Тогда
				НоваяСтрока.Контрагент = СЭПТ;
			КонецЕсли;
			
			Если ПараметрГруппаКомпаний Тогда
				НоваяСтрока.Контрагент = ТекСтрокаКонтрагент.Родитель;
			КонецЕсли;
			
			Для каждого ТекСтрокаДвижения Из ОтобранныеСтроки Цикл
				ДвиженияОтгрузки.Удалить(ТекСтрокаДвижения);			
			КонецЦикла;
		Иначе
			Если ОтобранныеСтроки.Количество() Тогда
				ТекПросрДата = Неопределено;
				Для каждого ТекСтрокаДвижения Из ОтобранныеСтроки Цикл
					Если ТекСтрокаДвижения.СуммаОтгрузки = Неопределено Тогда //хз что это
						Продолжить;				
					КонецЕсли;
					//считаем просроченную и нормальную ДЗ
					Если ДЗВсего Тогда
						Если ТекСтрокаДвижения.СуммаОтгрузки > ДЗВсего Тогда
							ТекСтрокаДвижения.СуммаОтгрузки = ДЗВсего;
							ДЗВсего = 0;
							ТекСтрокаДвижения.ДЗИтого = ТекСтрокаДвижения.СуммаОтгрузки;
						Иначе
							ДЗВсего = ДЗВсего - ТекСтрокаДвижения.СуммаОтгрузки;
							ТекСтрокаДвижения.ДЗИтого = ТекСтрокаДвижения.СуммаОтгрузки;
						КонецЕсли;
						
						//нормальная/просроченная
						Если ТекСтрокаДвижения.ДатаПросрочки > НаДату Тогда
							ТекСтрокаДвижения.Нормальная = ТекСтрокаДвижения.СуммаОтгрузки;
							
							Если ТекСтрокаДвижения.ВидСуммы = "Транспорт" Тогда
								ТекСтрокаДвижения.ТрансНормальная = ТекСтрокаДвижения.СуммаОтгрузки;
							КонецЕсли;
						Иначе
							ТекСтрокаДвижения.Просроченная = ТекСтрокаДвижения.СуммаОтгрузки;
							ОтобранныеСтроки[0].ДатаПервойОплата = ТекСтрокаДвижения.ДатаПросрочки;
							ОтобранныеСтроки[0].ДатаПервойОтгрузка = ТекСтрокаДвижения.Дата;
							
							Если ТекСтрокаДвижения.ВидСуммы = "Транспорт" Тогда
								ТекСтрокаДвижения.ТрансПросроченная = ТекСтрокаДвижения.СуммаОтгрузки;
								ОтобранныеСтроки[0].ТрансДатаПервойОплата = ТекСтрокаДвижения.ДатаПросрочки;
								ОтобранныеСтроки[0].ТрансДатаПервойОтгрузка = ТекСтрокаДвижения.Дата;
							Иначе
								ОтобранныеСтроки[0].РеализацияДатаПервойОплата = ТекСтрокаДвижения.ДатаПросрочки;
							КонецЕсли;
						КонецЕсли;
						
						//сегодня
						Если Формат(ТекСтрокаДвижения.ДатаПросрочки - 24 * 60 * 60, "ДФ=dd.MM.yyyy") =  Формат(НаДату, "ДФ=dd.MM.yyyy") Тогда
							ТекСтрокаДвижения.Сегодня = ТекСтрокаДвижения.СуммаОтгрузки;				
						КонецЕсли;
						
						//3 дня
						Если КонецДня(ТекСтрокаДвижения.ДатаПросрочки) - 24 * 60 * 60 >=  НаДату И
							КонецДня(ТекСтрокаДвижения.ДатаПросрочки) - 24 * 60 * 60 <=  НаДату + 3 * 24 * 60 * 60 Тогда
							ТекСтрокаДвижения.Дни3 = ТекСтрокаДвижения.СуммаОтгрузки;				
						КонецЕсли;
						
						
						//5 дня
						Если КонецДня(ТекСтрокаДвижения.ДатаПросрочки) - 24 * 60 * 60 >=  НаДату И
							КонецДня(ТекСтрокаДвижения.ДатаПросрочки) - 24 * 60 * 60 <=  НаДату + 5 * 24 * 60 * 60 Тогда
							ТекСтрокаДвижения.Дни5 = ТекСтрокаДвижения.СуммаОтгрузки;				
						КонецЕсли;
						
						Если ТекСтрокаДвижения.Родитель = СЭПТ Тогда
							ТекСтрокаДвижения.Контрагент = СЭПТ;
						КонецЕсли;
						
						Если ПараметрГруппаКомпаний Тогда
							ТекСтрокаДвижения.Контрагент = ТекСтрокаКонтрагент.Родитель;
						КонецЕсли;
						
						
					Иначе
						ДвиженияОтгрузки.Удалить(ТекСтрокаДвижения);
					КонецЕсли;
					
					
				КонецЦикла;
				
				//если дата отчета > 30.04 + 12 мес
				Если ДЗВсего Тогда
					НоваяСтрока = ДвиженияОтгрузки.Добавить();
					//Если ТекСтрокаКонтрагент.ДЗИтого Тогда
					НоваяСтрока.Комментарий = "> 12 мес. назад";
					//КонецЕсли;
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаКонтрагент);
					НоваяСтрока.ДатаПервойОплата = ДобавитьМесяц(ПараметрыОтчета.Дата1, -12);
					НоваяСтрока.ДатаПервойОтгрузка = ДобавитьМесяц(ПараметрыОтчета.Дата1, -12);
					НоваяСтрока.Просроченная = ДЗВсего;
					НоваяСтрока.ДЗИтого = ДЗВсего;
					НоваяСтрока.ВидСуммы = "Прочее";
					Если ТекСтрокаКонтрагент.Родитель = СЭПТ Тогда
						НоваяСтрока.Контрагент = СЭПТ;			
					КонецЕсли;
					Если ПараметрГруппаКомпаний Тогда
						НоваяСтрока.Контрагент = ТекСтрокаКонтрагент.Родитель;
					КонецЕсли;
					ДЗВсего = 0;	
				КонецЕсли;
				
				
			Иначе
				НоваяСтрока = ДвиженияОтгрузки.Добавить();
				Если ТекСтрокаКонтрагент.ДЗИтого Тогда
					НоваяСтрока.Комментарий = "Последняя отгрузка > 12 мес. назад";
					НоваяСтрока.ДатаПервойОплата = Дата('20110430000000');
					НоваяСтрока.ДатаПервойОтгрузка = Дата('20110430000000');
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаКонтрагент);
				НоваяСтрока.Просроченная = ТекСтрокаКонтрагент.ДЗИтого;
				Если ТекСтрокаКонтрагент.Родитель = СЭПТ Тогда
					НоваяСтрока.Контрагент = СЭПТ;			
				КонецЕсли;
				Если ПараметрГруппаКомпаний Тогда
					НоваяСтрока.Контрагент = ТекСтрокаКонтрагент.Родитель;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураСЭПТ = ДвиженияОтгрузки.НайтиСтроки(Новый Структура("Контрагент", СЭПТ));
	Если СтруктураСЭПТ.Количество() Тогда
		РанняяДатаОтгрузка = ТекущаяДата();
		РанняяДатаОплата = ТекущаяДата();
		Для каждого ТекСтрока Из СтруктураСЭПТ Цикл
			Если ТипЗнч(ТекСтрока.ДатаПервойОтгрузка) = Тип("Дата") Тогда
				Если ТекСтрока.ДатаПервойОтгрузка < РанняяДатаОтгрузка Тогда
					РанняяДатаОтгрузка = ТекСтрока.ДатаПервойОтгрузка;
				КонецЕсли;
			КонецЕсли;
			Если ТипЗнч(ТекСтрока.ДатаПервойОплата) = Тип("Дата") Тогда
				Если ТекСтрока.ДатаПервойОплата < РанняяДатаОплата Тогда
					РанняяДатаОплата = ТекСтрока.ДатаПервойОплата;
				КонецЕсли;
			КонецЕсли;
			ТекСтрока.ДатаПервойОплата = '00010101000000';
			ТекСтрока.ДатаПервойОтгрузка = '00010101000000';
		КонецЦикла;
		СтруктураСЭПТ[0].ДатаПервойОтгрузка = РанняяДатаОтгрузка;
		СтруктураСЭПТ[0].ДатаПервойОплата = РанняяДатаОплата;
	КонецЕсли;
	
	Если ПараметрГруппаКомпаний Тогда
		СтруктураСЭПТ = ДвиженияОтгрузки.НайтиСтроки(Новый Структура("Контрагент", ПараметрыОтчета.Контрагент.Родитель));
		Если СтруктураСЭПТ.Количество() Тогда
			РанняяДатаОтгрузка = ТекущаяДата();
			РанняяДатаОплата = ТекущаяДата();
			Для каждого ТекСтрока Из СтруктураСЭПТ Цикл
				Если ТипЗнч(ТекСтрока.ДатаПервойОтгрузка) = Тип("Дата") Тогда
					Если ТекСтрока.ДатаПервойОтгрузка < РанняяДатаОтгрузка Тогда
						РанняяДатаОтгрузка = ТекСтрока.ДатаПервойОтгрузка;
					КонецЕсли;
				КонецЕсли;
				Если ТипЗнч(ТекСтрока.ДатаПервойОплата) = Тип("Дата") Тогда
					Если ТекСтрока.ДатаПервойОплата < РанняяДатаОплата Тогда
						РанняяДатаОплата = ТекСтрока.ДатаПервойОплата;
					КонецЕсли;
				КонецЕсли;
				ТекСтрока.ДатаПервойОплата = '00010101000000';
				ТекСтрока.ДатаПервойОтгрузка = '00010101000000';
			КонецЦикла;
			СтруктураСЭПТ[0].ДатаПервойОтгрузка = РанняяДатаОтгрузка;
			СтруктураСЭПТ[0].ДатаПервойОплата = РанняяДатаОплата;
		КонецЕсли;
	КонецЕсли;
	
	
	
	//ДвиженияОтгрузки.Сортировать("ДатаОтгрузки Убыв");
	Если НЕ ТабДок = Неопределено Тогда
		постр=новый построительотчета;
		постр.источникданных=новый описаниеисточникаданных(ДвиженияОтгрузки);
		постр.заполнитьнастройки();
		постр.вывести(ТабДок);
	КонецЕсли;
	
	
	СтруктураВозврата = Новый Структура("ДЗИтого, ДЗПросроченная, ДЗПросроченная2, ДатаПросрочки, ДатаПросрочки2",
	0, 0, 0, ПараметрыОтчета.Дата1, ПараметрыОтчета.Дата1);
	Если ДвиженияОтгрузки.Количество() Тогда
		ПромТЗ = ДвиженияОтгрузки.Скопировать();
		ПромТЗ.Сортировать("РеализацияДатаПервойОплата Возр"); 
		ТекДата1 = ПромТЗ[ПромТЗ.Количество() - 1].РеализацияДатаПервойОплата;

		ПромТЗ = ДвиженияОтгрузки.Скопировать();
		ПромТЗ.Сортировать("ТрансДатаПервойОплата Возр");
		ТекДата2 = ПромТЗ[ПромТЗ.Количество() - 1].ТрансДатаПервойОплата;
		
		Для каждого ТекСтрока Из ДвиженияОтгрузки Цикл
			Если ЗначениеЗаполнено(ТекСтрока.РеализацияДатаПервойОплата) Тогда
				Если ТекСтрока.РеализацияДатаПервойОплата < ТекДата1 Тогда
					ТекДата1 = ТекСтрока.РеализацияДатаПервойОплата;				
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекСтрока.ТрансДатаПервойОплата) Тогда
				Если ТекСтрока.ТрансДатаПервойОплата < ТекДата2 Тогда
					ТекДата2 = ТекСтрока.ТрансДатаПервойОплата;				
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
		СтруктураВозврата.ДатаПросрочки = ТекДата1;
		СтруктураВозврата.ДатаПросрочки2 = ТекДата2;
	КонецЕсли;
	ДвиженияОтгрузки.Свернуть("Контрагент", "ДЗИтого, Просроченная, ТрансПросроченная");
	
	Если ДвиженияОтгрузки.Количество() Тогда
		СтруктураВозврата.ДЗИтого = ДвиженияОтгрузки[0].ДЗИтого;	
		СтруктураВозврата.ДЗПросроченная = ДвиженияОтгрузки[0].Просроченная;
		СтруктураВозврата.ДЗПросроченная2 = ДвиженияОтгрузки[0].ТрансПросроченная;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СтруктураВозврата;
	
	
КонецФункции // ()


//Процедура осуществляет контроль отрицательных остатков по счету 10
Процедура ПроверитьОтрицательныеОстатки(ПараметрСсылка,ПараметрСчет10,параметрОтказ) Экспорт
	
	РеквизитыПредприятия = БюджетныйНаСервере.ВернутьРеквизиты(ПараметрСсылка.Предприятие, "НеКонтролировать10, НеКонтролировать41, НеКонтролировать43");
	Если НЕ РеквизитыПредприятия = Неопределено Тогда
		Если РеквизитыПредприятия.НеКонтролировать10 И РеквизитыПредприятия.НеКонтролировать41 И РеквизитыПредприятия.НеКонтролировать43 Тогда
			Возврат;		
		КонецЕсли; 
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УЧ_ПеремещениеМатериаловВПроизводствоТабличнаяЧасть.Материал,
	               |	УЧ_ПеремещениеМатериаловВПроизводствоТабличнаяЧасть.Склад,
	               |	УЧ_ПеремещениеМатериаловВПроизводствоТабличнаяЧасть.Количество,
	               |	УЧ_ПеремещениеМатериаловВПроизводствоТабличнаяЧасть.Ссылка.Предприятие,
	               |	УЧ_ПеремещениеМатериаловВПроизводствоТабличнаяЧасть.Мол,
	               |	УЧ_ПеремещениеМатериаловВПроизводствоТабличнаяЧасть.ВидДеятельности
	               |ПОМЕСТИТЬ Документ
	               |ИЗ
	               |	Документ.УЧ_ПеремещениеМатериаловВПроизводство.ТабличнаяЧасть КАК УЧ_ПеремещениеМатериаловВПроизводствоТабличнаяЧасть
	               |ГДЕ
	               |	УЧ_ПеремещениеМатериаловВПроизводствоТабличнаяЧасть.Ссылка = &Ссылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	УЧ_РеализацияРеализация.Наименование.Ссылка,
	               |	УЧ_РеализацияРеализация.Склад,
	               |	УЧ_РеализацияРеализация.Количество,
	               |	УЧ_РеализацияРеализация.Ссылка.Предприятие,
	               |	NULL,
	               |	УЧ_РеализацияРеализация.ВидДеятельности
	               |ИЗ
	               |	Документ.УЧ_Реализация.Реализация КАК УЧ_РеализацияРеализация
	               |ГДЕ
	               |	УЧ_РеализацияРеализация.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УчетныйОстатки.Счет,
	               |	УчетныйОстатки.Субконто1,
	               |	УчетныйОстатки.Субконто2,
	               |	УчетныйОстатки.Предприятия,
	               |	ЕСТЬNULL(УчетныйОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
	               |	Документ.Количество КАК СписываемоеКоличество,
	               |	УчетныйОстатки.Субконто3,
	               |	УчетныйОстатки.Подразделение КАК Подразделение
	               |ИЗ
	               |	РегистрБухгалтерии.Учетный.Остатки(
	               |			&Момент,
	               |			Счет В (&Счета),
	               |			,
	               |			Субконто1 В
	               |					(ВЫБРАТЬ
	               |						Документ.Материал
	               |					ИЗ
	               |						Документ КАК Документ)
	               |				И Предприятия В
	               |					(ВЫБРАТЬ
	               |						Документ.Предприятие
	               |					ИЗ
	               |						Документ КАК Документ)
	               |				И Субконто2 В
	               |					(ВЫБРАТЬ
	               |						Документ.Склад
	               |					ИЗ
	               |						Документ КАК Документ)
	               |				И СценарийПлана = &СценарийФакт
	               |				И ВЫБОР
	               |					КОГДА ТИПЗНАЧЕНИЯ(Субконто3) = ТИП(Справочник.Сотрудники)
	               |						ТОГДА Субконто3 В
	               |								(ВЫБРАТЬ
	               |									Документ.Мол
	               |								ИЗ
	               |									Документ КАК Документ)
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ) КАК УчетныйОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ КАК Документ
	               |		ПО УчетныйОстатки.Субконто1 = Документ.Материал
	               |			И УчетныйОстатки.Субконто2 = Документ.Склад
	               |			И (ВЫБОР
	               |				КОГДА ТИПЗНАЧЕНИЯ(УчетныйОстатки.Субконто3) = ТИП(Справочник.Сотрудники)
	               |					ТОГДА УчетныйОстатки.Субконто3 = Документ.Мол
	               |				ИНАЧЕ ИСТИНА
	               |			КОНЕЦ)
	               |			И (ВЫБОР
	               |				КОГДА УчетныйОстатки.Предприятия.УчетПоПодразделениям
	               |					ТОГДА УчетныйОстатки.Подразделение = Документ.ВидДеятельности
	               |				ИНАЧЕ ИСТИНА
	               |			КОНЕЦ)
	               |ГДЕ
	               |	УчетныйОстатки.КоличествоОстаток < 0
	               |	И НЕ(УчетныйОстатки.Предприятия.НеКонтролировать10
	               |				И УчетныйОстатки.Счет В ИЕРАРХИИ (&Счет10))
	               |	И НЕ(УчетныйОстатки.Предприятия.НеКонтролировать41
	               |				И УчетныйОстатки.Счет В ИЕРАРХИИ (&Счет41))
	               |	И НЕ(УчетныйОстатки.Предприятия.НеКонтролировать43
	               |				И УчетныйОстатки.Счет В ИЕРАРХИИ (&Счет43))";
	
				   
	Если ТипЗнч(ПараметрСчет10) = Тип("Соответствие") Тогда
		ПараметрСчет10Массив = Новый Массив;
		Для каждого ТекСоотв Из ПараметрСчет10 Цикл
			ПараметрСчет10Массив.Добавить(ТекСоотв.Значение);		
		КонецЦикла; 
	Иначе
		ПараметрСчет10Массив = ПараметрСчет10;
	КонецЕсли; 			   
	Запрос.УстановитьПараметр("Счета", ПараметрСчет10Массив);
	Запрос.УстановитьПараметр("Счет10", ПланыСчетов.Учетный.НайтиПоКоду("10"));
	Запрос.УстановитьПараметр("Счет41", ПланыСчетов.Учетный.НайтиПоКоду("41"));
	Запрос.УстановитьПараметр("Счет43", ПланыСчетов.Учетный.НайтиПоКоду("43"));
	Запрос.УстановитьПараметр("ССылка", ПараметрСсылка);
	Запрос.УстановитьПараметр("Момент", ПараметрСсылка.Дата + 1);
	Запрос.УстановитьПараметр("СценарийФакт", Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПараметрОтказ = истина;
		Сообщить(?(Выборка.Предприятия.УчетПоПодразделениям, "По Подразделению " + Строка(Выборка.Подразделение) + " ", "") + "На Складе """ + Строка(Выборка.Субконто2) + """ материала """ + Строка(Выборка.Субконто1) + """ из необходимых " + Строка(Выборка.СписываемоеКоличество) + " присутствует только "  + Строка(Выборка.СписываемоеКоличество + Выборка.КоличествоОстаток) );
	КонецЦикла; 
КонецПроцедуры

Функция ПолучитьСубконто(НомерСубконто, ОбСчет) Экспорт
	Если НомерСубконто > ОбСчет.ВидыСубконто.Количество() Тогда
		Возврат "";
	Иначе
		Возврат ОбСчет.ВидыСубконто[НомерСубконто - 1].ВидСубконто.Наименование;			
	КонецЕсли;
КонецФункции // ()


Функция СредневзвешенныйКурсУчет(Дата, Источник, Валюта) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УчетныйОстатки.СуммаОстаток КАК Сумма,
	               |	УчетныйОстатки.ВалютнаяСуммаОстаток КАК ВалютнаяСумма,
	               |	ВЫБОР
	               |		КОГДА УчетныйОстатки.ВалютнаяСуммаОстаток = 0
	               |			ТОГДА 0
	               |		ИНАЧЕ УчетныйОстатки.СуммаОстаток / УчетныйОстатки.ВалютнаяСуммаОстаток
	               |	КОНЕЦ КАК Курс
	               |ИЗ
	               |	РегистрБухгалтерии.Учетный.Остатки(
	               |			&Дата1,
	               |			Счет.Родитель.Код = ""50""
	               |				ИЛИ Счет.Родитель.Код = ""51"",
	               |			,
	               |			Валюта = &Валюта
	               |				И Субконто2 = &Источник) КАК УчетныйОстатки";
	
	
	Запрос.УстановитьПараметр("Дата1", ?(ТипЗнч(Дата) = Тип("Дата"), Дата, Дата.МоментВремени()));
	Запрос.УстановитьПараметр("Источник", Источник);
	Запрос.УстановитьПараметр("Валюта", Валюта);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("Курс, Сумма, ВалютнаяСумма", Выборка.Курс, Выборка.Сумма, Выборка.ВалютнаяСумма);
	Иначе
		Возврат Новый Структура("Курс, Сумма, ВалютнаяСумма", 0, 0, 0) ;		
	КонецЕсли;
КонецФункции

Функция ДенежныйСчет(Счет) Экспорт
	
	Возврат Счет.ДенежныйСчет;
	
КонецФункции // ()

Функция ДенежныеБезналичныеСчета(Счет = Неопределено) Экспорт
	МассивДенСчетов = Новый Массив;
	МассивДенСчетов.Добавить(ПланыСчетов.Учетный.НайтиПоКоду("51.02"));
	МассивДенСчетов.Добавить(ПланыСчетов.Учетный.НайтиПоКоду("51.01"));
	//МассивДенСчетов.Добавить(ПланыСчетов.Учетный.ДепозитныеСчета);
	//МассивДенСчетов.Добавить(ПланыСчетов.Учетный.НайтиПоКоду("55.01"));
	//МассивДенСчетов.Добавить(ПланыСчетов.Учетный.ЛицевыеСчета);
	//МассивДенСчетов.Добавить(ПланыСчетов.Учетный.ЛицевыеСчетаВал);
	//МассивДенСчетов.Добавить(ПланыСчетов.Учетный._51_10);
	Возврат ?(Счет = Неопределено, МассивДенСчетов, НЕ МассивДенСчетов.Найти(Счет) = Неопределено);
КонецФункции // ()

Функция ДенежныеНаличныеСчета(Счет = Неопределено) Экспорт
	МассивДенСчетов = Новый Массив;
	МассивДенСчетов.Добавить(ПланыСчетов.Учетный.НайтиПоКоду("50.01"));
	МассивДенСчетов.Добавить(ПланыСчетов.Учетный.НайтиПоКоду("50.02"));
	Возврат ?(Счет = Неопределено, МассивДенСчетов, НЕ МассивДенСчетов.Найти(Счет) = Неопределено);
КонецФункции // ()

Функция Счета5051() Экспорт
	МассивДенСчетов = Новый Массив;
	МассивДенСчетов.Добавить(ПланыСчетов.Учетный.НайтиПоКоду("50"));
	МассивДенСчетов.Добавить(ПланыСчетов.Учетный.НайтиПоКоду("51"));
	Возврат МассивДенСчетов;
КонецФункции // ()

Функция Счет5501() Экспорт
	Возврат ПланыСчетов.Учетный.НайтиПоКоду("55.01");
КонецФункции // ()

Функция СценарийФакт() Экспорт
	Возврат Справочники.СценарииПланирования.НайтиПоНаименованию("Факт", Истина);	
КонецФункции // ()

Функция ПроводкиКассовыхОрдеровПоУчетуВключены() Экспорт
	Возврат Истина;
КонецФункции // ()

Функция ДенежныйСчетБезКазны(Счет) Экспорт
	МассивДенСчетов = Новый Массив;
	МассивДенСчетов.Добавить(ПланыСчетов.Учетный.НайтиПоКоду("50.01"));
	МассивДенСчетов.Добавить(ПланыСчетов.Учетный.НайтиПоКоду("50.02"));
	МассивДенСчетов.Добавить(ПланыСчетов.Учетный.НайтиПоКоду("51.01"));
	МассивДенСчетов.Добавить(ПланыСчетов.Учетный.НайтиПоКоду("51.02"));
	МассивДенСчетов.Добавить(ПланыСчетов.Учетный.НайтиПоКоду("50"));
	МассивДенСчетов.Добавить(ПланыСчетов.Учетный.НайтиПоКоду("51"));
	Возврат НЕ МассивДенСчетов.Найти(Счет) = Неопределено;
КонецФункции // ()

// возвращает дату, включая последнюю секунду 23:59:59
Функция ПолучитьДатуОкончания(Дата) Экспорт
	
	ДатаКон = Новый Граница(КонецДня(Дата), ВидГраницы.Включая);
	
	Возврат ДатаКон;
	
КонецФункции

// возвращает дату, исключая последние 3 секунды 23:59:58
Функция ДатаОкончанияГрафикОтгрузок(Дата) Экспорт
	
	Возврат (Дата - 1);
	
КонецФункции

Функция ПолучитьРазностьДат(ДатаНач, ДатаКон) Экспорт
	
	Возврат (НачалоДня(ДатаКон) - НачалоДня(ДатаНач))/(60*60*24); 
	
КонецФункции

Функция ВНХСчет(Счет) Экспорт
	МассивДенСчетов = Новый Массив;
	МассивДенСчетов.Добавить(ПланыСчетов.Учетный.НайтиПоКоду("79"));
	МассивДенСчетов.Добавить(ПланыСчетов.Учетный.НайтиПоКоду("79.01"));
	//МассивДенСчетов.Добавить(ПланыСчетов.Учетный.Счет79()Доки);
	МассивДенСчетов.Добавить(ПланыСчетов.Учетный.НайтиПоКоду("79.02"));
	//МассивДенСчетов.Добавить(ПланыСчетов.Учетный.УсловеноВнутренниеВзаиморасчеты);
	//МассивДенСчетов.Добавить(ПланыСчетов.Учетный.Счет79()МС);
	//МассивДенСчетов.Добавить(ПланыСчетов.Учетный._76_10);
	//МассивДенСчетов.Добавить(ПланыСчетов.Учетный.Дивизион3);
	Возврат НЕ МассивДенСчетов.Найти(Счет) = Неопределено;
КонецФункции // ()

Функция ЗапретДенСчетов() Экспорт
	Возврат Истина;
КонецФункции // ()

Процедура СоздатьЛогИстории(Объект) Экспорт
	//Примечание = "Документ записан.";
	//Если Объект.Ссылка.Пустая() Тогда
	//	Примечание = "Документ создан.";
	//Иначе
	//	Если НЕ Объект.Ссылка.ПометкаУдаления = Объект.ПометкаУдаления Тогда
	//		Если Объект.ПометкаУдаления Тогда
	//			Примечание = "Документ помечен на удаление.";
	//		Иначе
	//			Примечание = "Снята пометка на удаление.";
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	//НоваяСтрока = Объект.ИсторияДокумента.Добавить();
	//НоваяСтрока.Дата = ТекущаяДата();
	//НоваяСтрока.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	//НоваяСтрока.Примечание = Примечание;
	
КонецПроцедуры

Функция ВернутьСчетПоИсточнику(Источник) Экспорт
	
	Если Не ЗначениеЗаполнено(Источник) Тогда
		Возврат ПланыСчетов.Учетный.ПустаяСсылка();
	КонецЕсли;
	
	СчетУчета = Источник.СчетУчета;
	Если ЗначениеЗаполнено(СчетУчета) Тогда
		Возврат СчетУчета;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.Кассы") Тогда
		Возврат ПланыСчетов.Учетный.НайтиПоКоду("50.01");
	ИначеЕсли Источник.Валютный Тогда
		Возврат ПланыСчетов.Учетный.НайтиПоКоду("51.02");
	Иначе
		Возврат ПланыСчетов.Учетный.НайтиПоКоду("51.01");
	КонецЕсли;
	
	Если Источник = сабОбщегоНазначенияПовтИсп.ПолучитьПредопределенныйИсточник() Тогда
		Возврат ПланыСчетов.Учетный.НайтиПоКоду("55.01");	
	КонецЕсли;
	
	Возврат ПланыСчетов.Учетный.ПустаяСсылка();

КонецФункции // ()

Процедура ЗаполнитьОтборыВСтандартныхОтчетах(Отчет, КоличествоСубконто) Экспорт
		//устанавливаем отборы по источникам
	Для Индекс = 1 По КоличествоСубконто Цикл
		Если Отчет.Счет.ВидыСубконто[Индекс - 1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Кассы", Истина) Тогда
			
			ДоступныеИсточники = БюджетныйНаСервере.ПолучитьДоступныеИточники();
			Если ДоступныеИсточники.Ограничение Тогда
				СписокИсточников = Новый СписокЗначений;
				СписокИсточников.ЗагрузитьЗначения(ДоступныеИсточники.ДоступныеИсточники);
				НовыйЭлементОтбора = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Субконто" + Индекс);
				НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				НовыйЭлементОтбора.ПравоеЗначение = СписокИсточников;
				НовыйЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			КонецЕсли;
			
		КонецЕсли;
		

		//СтандартныеОтчетыКлиентСервер.ДобавитьОтбор(Отчет.КомпоновщикНастроек, ИмяПоляПрефикс + Индекс, Отчет.Счет.ВидыСубконто[Индекс - 1].ВидСубконто.ТипЗначения.ПривестиЗначение(Неопределено), , Ложь);	
	КонецЦикла;
	
	//устанавливаем отборы по номенклатуре
	Для Индекс = 1 По КоличествоСубконто Цикл
		Если Отчет.Счет.ВидыСубконто[Индекс - 1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Номенклатура", Истина) Тогда
			
			ДоступнаяНоменклатура = БюджетныйНаСервере.ПолучитьДоступнуюНоменклатуру();
			Если ДоступнаяНоменклатура.Ограничение Тогда
				СписокНоменклатуры = Новый СписокЗначений;
				СписокНоменклатуры.ЗагрузитьЗначения(ДоступнаяНоменклатура.ДоступнаяНоменклатура);
				СписокТиповНоменклатуры = Новый СписокЗначений;
				СписокТиповНоменклатуры.ЗагрузитьЗначения(ДоступнаяНоменклатура.ДоступныеТипы);
				
				НоваяГруппа = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				НоваяГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
				НоваяГруппа.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
				
				НовыйЭлементОтбора = НоваяГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Субконто" + Индекс);
				НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				НовыйЭлементОтбора.ПравоеЗначение = СписокНоменклатуры;
				НовыйЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
				
				НовыйЭлементОтбора = НоваяГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Субконто" + Индекс + ".ТипНоменклатуры");
				НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				НовыйЭлементОтбора.ПравоеЗначение = СписокТиповНоменклатуры;
				НовыйЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
				
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;


	

КонецПроцедуры

Функция ПолучитьСтрокуСпискаКонтрагентов(Дата, Предприятие, Подразделение, Номенклатура) Экспорт
	
	СтрокаК = "";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Предприятие", Предприятие);	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПР_Отгрузка.Контрагент
	               |ИЗ
	               |	Документ.ПР_Отгрузка КАК ПР_Отгрузка
	               |ГДЕ
	               |	ПР_Отгрузка.Дата >= НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
	               |	И ПР_Отгрузка.Дата <= КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
	               |	И ПР_Отгрузка.Проведен = ИСТИНА
	               |	И ПР_Отгрузка.Предприятие = &Предприятие
	               |	И ПР_Отгрузка.Подразделение = &Подразделение
	               |	И ПР_Отгрузка.Номенклатура = &Номенклатура";
				   
	ТЗ_Отгр = Запрос.Выполнить().Выгрузить();	
	ДобавленныеКонтрагенты = Новый Массив;
	
	Для ИндСтр = 0 По ТЗ_Отгр.Количество() - 1 Цикл
		
		Если ИндСтр = ТЗ_Отгр.Количество() - 1 Тогда
			
			Если ДобавленныеКонтрагенты.Найти(ТЗ_Отгр[ИндСтр].Контрагент) = Неопределено Тогда
				СтрокаК = СтрокаК + ТЗ_Отгр[ИндСтр].Контрагент.Наименование;
				ДобавленныеКонтрагенты.Добавить(ТЗ_Отгр[ИндСтр].Контрагент);
			КонецЕсли;	
				
		Иначе	
			
			Если ДобавленныеКонтрагенты.Найти(ТЗ_Отгр[ИндСтр].Контрагент) = Неопределено Тогда
				СтрокаК = СтрокаК + ТЗ_Отгр[ИндСтр].Контрагент.Наименование + ", ";
			    ДобавленныеКонтрагенты.Добавить(ТЗ_Отгр[ИндСтр].Контрагент);				
			КонецЕсли;

		КонецЕсли;
			
	КонецЦикла;
	
	Возврат(СтрокаК);
	
КонецФункции

Процедура ДокументыЛогированиеИзмененийПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Возврат; //д1 04.12.18
	
	Если НЕ Источник.Ссылка.Пустая() Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокОснование", Источник.Ссылка);
		Запрос.Текст = "ВЫБРАТЬ
		|	УЧ_ДвижениеДС.Ссылка
		|ИЗ
		|	Документ.УЧ_ДвижениеДС КАК УЧ_ДвижениеДС
		|ГДЕ
		|	УЧ_ДвижениеДС.ДокОснование = &ДокОснование";
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда	
			
			ДатаНачалаРедактирования = БПСервер.СерверноеВремя();
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	*
			|ИЗ
			|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
			|ГДЕ
			|	ПлатежноеПоручение.Ссылка В(&Ссылка)";
			
			Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
			
			ТекстОповещения = "Пользователь " + ПараметрыСеанса.ТекущийПользователь + " изменил значение следующих реквизитов: ";
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выгрузить();
			
			Для каждого ТекРеквизит Из Источник.Ссылка.Метаданные().Реквизиты Цикл
				Если НЕ Источник[ТекРеквизит.Имя] = Выборка[0][ТекРеквизит.Имя] Тогда
					
					ТекЗапись = Строка(ТекЗапись) + ?(ПустаяСтрока(ТекЗапись), "", "
					|
					|") + ТекРеквизит.Имя + " Было """ + Строка(Выборка[0][ТекРеквизит.Имя]) 
					+ """" + ", Стало """ + Строка(Источник[ТекРеквизит.Имя]) + """";
					
					ТекстОповещения = ТекстОповещения + ТекРеквизит.Имя + " с "+ Строка(Выборка[0][ТекРеквизит.Имя]) + " на " + Строка(Источник[ТекРеквизит.Имя]) + "; ";
					
				КонецЕсли;
			КонецЦикла;	
			
			Если НЕ ПустаяСтрока(ТекЗапись) И ЗначениеЗаполнено(Источник.Автор) Тогда
				
				//ТекДата = ТекущаяДата();
				//НаборЗаписей = РегистрыСведений.ЛогиДокумента.СоздатьНаборЗаписей();
				//НаборЗаписей.Отбор.Документ.Установить(Источник.Ссылка);
				//НаборЗаписей.Отбор.Период.Установить(ТекДата);
				//НаборЗаписей.Прочитать();
				//
				//Если НаборЗаписей.Количество() Тогда //если есть записи в регистре
				//	НаборЗаписей[0].ЗаписьЛога = ТекЗапись;	
				//Иначе //если нет записей в регистре
				//	НоваяЗапись = НаборЗаписей.Добавить();
				//	НоваяЗапись.Документ = Источник.Ссылка;
				//	НоваяЗапись.ЗаписьЛога = ТекЗапись;
				//	НоваяЗапись.Автор = ПараметрыСеанса.ТекущийПользователь;
				//	НоваяЗапись.Период = ТекДата;
				//	НоваяЗапись.ДатаНачалаРедактирования = ДатаНачалаРедактирования;
				//	НоваяЗапись.ДатаОкончанияРедактирования = ТекДата;
				//	НоваяЗапись.ЗаписьНовогоДокумента = ПризнакНового;
				//КонецЕсли;                                                                                                     
				//
				//НаборЗаписей.Записать();
				
				Если ПараметрыСеанса.ТекущийПользователь <> Источник.Автор Тогда
					БПСервер.СоздатьОповещение(Источник.Автор, ТекстОповещения, "Изменение реквизитов в документе " + Строка(Источник.Ссылка), Источник.Ссылка, Ложь, ПараметрыСеанса.ТекущийПользователь);
				КонецЕсли;	
					
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
				
КонецПроцедуры

// 31.01.13 di рег сведений подчиненные документы заявок
Процедура ЗаписатьПодчиненныеДокументыЗаявки(Док, ДокОснование, НомерСтрокиТЧ) Экспорт
	
	Если НомерСтрокиТЧ <> Неопределено Тогда 
		
		// записываем подчиненный документ
		НаборЗаписей = РегистрыСведений.Д_ПодчиненныеДокументыЗаявок.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументОснование.Установить(ДокОснование);
		НаборЗаписей.Отбор.НомерСтрокиОснования.Установить(НомерСтрокиТЧ);
		НаборЗаписей.Прочитать();
	
		Если НаборЗаписей.Количество() Тогда  
		
			НаборЗаписей[0].ПодчиненныйДокумент = Док;
		
		Иначе
		
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ДокументОснование = ДокОснование;
			НоваяЗапись.ПодчиненныйДокумент = Док;
			НоваяЗапись.НомерСтрокиОснования = НомерСтрокиТЧ;
		
		КонецЕсли;
	
		НаборЗаписей.Записать();
		
	Иначе
		
		НаборЗаписей = РегистрыСведений.Д_ПодчиненныеДокументыЗаявок.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументОснование.Установить(ДокОснование);
		НаборЗаписей.Прочитать();
	
		Если НаборЗаписей.Количество() Тогда  
			
			Для Каждого ТекЗапись Из НаборЗаписей Цикл
				
				Если ТекЗапись.ПодчиненныйДокумент = Док Тогда
					НаборЗаписей.Удалить(ТекЗапись);
				КонецЕсли;
				
			КонецЦикла;
		
		КонецЕсли;
	
		НаборЗаписей.Записать();
				
	КонецЕсли;	
	
КонецПроцедуры	


Процедура ОбработкаПроведенияПланФактСтроительствоОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	Если ЭтоСтройка() Тогда
		Если ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_АвансовыйОтчет") Тогда
			//Проводки = Источник.Движения.Стр_ФактПоОбъекту;
			//Проводки.Записывать = Истина;
			//Для Каждого СтрокаТЧ Из Источник.ТабличнаяЧасть Цикл 
			//	Если СтрокаТЧ.КорСчет = ПланыСчетов.Учетный.СтроительствоОбъектовОсновныхСредств Тогда
			//		Проводка 				= Проводки.Добавить();
			//		Проводка.Проект 		= Источник.Предприятие;
			//		Проводка.Объект 		= СтрокаТЧ.КорСубконто1;
			//		Проводка.Задача 		= СтрокаТЧ.КорСубконто2; 
			//		Проводка.Сумма		 	= СтрокаТЧ.Сумма;
			//		Проводка.Период 		= Источник.Дата;
			//		Проводка.Регистратор 	= Источник.Ссылка;
			//	КонецЕсли;
			//КонецЦикла;
		ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.УЧ_ПеремещениеМатериаловВПроизводство") Тогда
			Если Источник.ДокументОснование = Неопределено Тогда
				Возврат;
			ИначеЕсли НЕ ЗначениеЗаполнено(Источник.ДокументОснование) Тогда
				Возврат;
			КонецЕсли;	
			Для Каждого СтрокаТЧ Из Источник.ТабличнаяЧасть Цикл 
				Проводки = Источник.Движения.Стр_ФактПоОбъекту;
				Проводки.Записывать = Истина;
				Проводка 				= Проводки.Добавить();
				Проводка.Проект 		= Источник.Предприятие;
				Проводка.Объект 		= Источник.ДокументОснование.Объект;
				Проводка.Очередь 		= Источник.ДокументОснование.Очередь;  
				Проводка.Задача 		= Источник.ДокументОснование.Задача; 
				Проводка.Сумма		 	= Источник.ТабличнаяЧасть.Итог("Сумма");
				Проводка.Период 		= Источник.Дата;
				Проводка.Регистратор 	= Источник.Ссылка;		
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

//Процедура для отчета КАК
Функция  ПолучитьПоручителей(Кредит) Экспорт
	ПредставлениеПоручителей = "";
	
	Для Каждого Поручитель Из Кредит.Поручители Цикл
		ПредставлениеПоручителей = ПредставлениеПоручителей + Строка(Поручитель.Поручитель) + "; " ;
	КонецЦикла;
	
	Возврат ПредставлениеПоручителей
	
КонецФункции

Функция  СчетНаСервере(Счёт) Экспорт
	Возврат ПланыСчетов.Учетный.НайтиПоКоду(Счёт).Код;
КонецФункции

Функция  СчетПоКоду(Код) Экспорт
	Возврат ПланыСчетов.Учетный.НайтиПоКоду(Код);
КонецФункции

Процедура ЗачетАвансаОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	РучнаяКорректировка = сабОбщегоНазначения.ЕстьРеквизитИлиОбщийРеквизитДокумента("РучнаяКорректировка", Источник.Метаданные())
		И Источник.РучнаяКорректировка;
	Если РучнаяКорректировка тогда
		Возврат
	КонецЕсли;
	
	//Счет = Источник.Счет;
	//ДатаКон = Источник.МоментВремени();
	//Дата = Источник.Дата;
	//Предприятие = Источник.Предприятие;
	//Подразделение = Источник.ВидДеятельности;
	//Контрагент = Источник.Контрагент;
	//Договор = Источник.Договор;
	//Документ = Источник.ССылка;
	//
	//Если Счет = ПланыСчетов.Учетный.Счет6201() Тогда
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = "ВЫБРАТЬ
	//	               |	УчетныйОстатки.СуммаОстатокКт
	//	               |ИЗ
	//	               |	РегистрБухгалтерии.Учетный.Остатки(
	//	               |			&ДатаКон,
	//	               |			Счет = &ВыбСчет,
	//	               |			,
	//	               |			Предприятия = &ВыбПредприятие
	//	               |				И Подразделение = &ВыбПодразделение
	//	               |				И Субконто1 = &ВыбКонтрагент
	//	               |				И Субконто2 = &ВыбДоговор
	//	               |				И Субконто3 = НЕОПРЕДЕЛЕНО) КАК УчетныйОстатки
	//	               |ГДЕ
	//	               |	НЕ УчетныйОстатки.СуммаОстатокКт = 0";
	//	
	//	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	//	Запрос.УстановитьПараметр("ВыбПредприятие", Предприятие);
	//	Запрос.УстановитьПараметр("ВыбПодразделение", Подразделение);
	//	Запрос.УстановитьПараметр("ВыбСчет", Счет);
	//	Запрос.УстановитьПараметр("ВыбКонтрагент", Контрагент);
	//	Запрос.УстановитьПараметр("ВыбДоговор", Договор);
	//	
	//	РезультатАванс = Запрос.Выполнить();
	//	ВыборкаАванс = РезультатАванс.Выбрать();
	//	СуммаОстатка = 0;
	//	Пока ВыборкаАванс.Следующий() Цикл
	//		СуммаОстатка = ВыборкаАванс.СуммаОстатокКт;
	//	КонецЦикла;
	//	
	//	Источник.Движения.Записать();
	//	Источник.Движения.Учетный.Записывать = Истина; 
		
		//Запрос = Новый Запрос;
		//Запрос.Текст = "ВЫБРАТЬ
		//               |	УчетныйОбороты.СуммаОборот
		//               |ИЗ
		//               |	РегистрБухгалтерии.Учетный.Обороты(
		//               |			&ДатаНач,
		//               |			&ДатаКон,
		//               |			Регистратор,
		//               |			Счет = &ВыбСчет,
		//               |			,
		//               |			Предприятия = &ВыбПредприятие
		//               |				И Подразделение = &ВыбПодразделение
		//               |				И Субконто1 = &ВыбКонтрагент
		//               |				И Субконто2 = &ВыбДоговор
		//               |				И Субконто3 = &ВыбДокумент,
		//               |			,
		//               |			) КАК УчетныйОбороты";
		//
		//Запрос.УстановитьПараметр("ДатаНач", Дата);
		//Запрос.УстановитьПараметр("ДатаКон", Дата);
		//Запрос.УстановитьПараметр("ВыбПредприятие", Предприятие);
		//Запрос.УстановитьПараметр("ВыбПодразделение", Подразделение);
		//Запрос.УстановитьПараметр("ВыбСчет", Счет);
		//Запрос.УстановитьПараметр("ВыбКонтрагент", Контрагент);
		//Запрос.УстановитьПараметр("ВыбДоговор", Договор);
		//Запрос.УстановитьПараметр("ВыбДокумент", Документ);
		//
		//РезультатДвижение = Запрос.Выполнить();
		//
		//Выборка = РезультатДвижение.Выбрать();
		//Пока Выборка.Следующий() Цикл
		//	СуммаЗачета = Мин(СуммаОстатка,Выборка.СуммаОборот);
		//	Если СуммаЗачета Тогда
		//		
		//		Движение = Источник.Движения.Учетный.Добавить();
		//		Движение.Период = Дата;
		//		Движение.Предприятия = Предприятие;
		//		Движение.СценарийПлана = Справочники.СценарииПланирования.Факт;
		//		
		//		Движение.СчетДт = Счет;
		//		Движение.ПодразделениеДт = Подразделение;
		//		Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина)] = Контрагент;
		//		Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Договоры", Истина)] = Договор;
		//		
		//		Движение.СчетКт = Счет;
		//		Движение.ПодразделениеКт = Подразделение;
		//		Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Контрагенты", Истина)] = Контрагент;
		//		Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию("Договоры", Истина)] = Договор;
		//		Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Документы] = Документ;
		//		
		//		Движение.Сумма = СуммаЗачета;
		//		Движение.Содержание = "Зачтен аванс на сумму " + СуммаЗачета + " руб.";
		//	КонецЕсли;
		//	
		//КонецЦикла;
	//КонецЕсли;
	
КонецПроцедуры

Функция ЕстьВидСубконто(Счет,ВидСубконто) Экспорт
	Если Счет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконто.НайтиПоНаименованию(ВидСубконто, Истина)) = Неопределено Тогда	
		Возврат Ложь
	Иначе
		Возврат Истина
	КонецЕсли;
КонецФункции

Функция ПолучитьСубконтоМассив(Счет) Экспорт
	
	МассивСубконто = Новый Массив;
	Для каждого ТекСубконто Из Счет.ВидыСубконто Цикл
		МассивСубконто.Добавить(ТекСубконто.ВидСубконто.ТипЗначения);
	КонецЦикла;
	
	Возврат МассивСубконто;

КонецФункции

Функция ПолучитьПараметрыВыбораСтатьиЗатрат(Предприятие, ТекущиеПараметрыВыбора) Экспорт
	Возврат ТекущиеПараметрыВыбора; //д1
	
	ЛюбаяСтатья = (сабОбщегоНазначения.ПолучитьЗначениеСвойства(Предприятие, ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ЛюбаяСтатьяЗатратНаСчете90) = Истина);	
	ЕстьОтборПоРодителю = Ложь;
	МассивПараметровВыбора = Новый Массив;
	Для Каждого Элемент Из ТекущиеПараметрыВыбора Цикл
		Если Элемент.Значение = Справочники.СтатьиЗатрат.ЗатратыРеализация Тогда
			ЕстьОтборПоРодителю = Истина;
			Если ЛюбаяСтатья Тогда
				Продолжить
			КонецЕсли
		КонецЕсли;
		МассивПараметровВыбора.Добавить(Элемент);
	КонецЦикла;
	Если ЛюбаяСтатья И ЕстьОтборПоРодителю Тогда
		НовыеСвязи = Новый ФиксированныйМассив(МассивПараметровВыбора);
		ТекущиеПараметрыВыбора = НовыеСвязи
	ИначеЕсли Не ЛюбаяСтатья И Не ЕстьОтборПоРодителю Тогда
		А = Новый ПараметрВыбора("Отбор.Родитель", Справочники.СтатьиЗатрат.ЗатратыРеализация);
		МассивПараметровВыбора.Добавить(А);
		НовыеСвязи = Новый ФиксированныйМассив(МассивПараметровВыбора);
		ТекущиеПараметрыВыбора = НовыеСвязи;
	КонецЕсли;	
	Возврат ТекущиеПараметрыВыбора;
КонецФункции	

Функция ПолучитьОстатокНаДату(ТекДата, Контрагенты, ВыбСчета) Экспорт
 ТекущийОстаток = 0;		
 ДатаОстатка = Новый Граница(ТекДата, ВидГраницы.Включая);
 Запрос = Новый Запрос;
 Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
                |	УчетныйОстатки.СуммаОстаток КАК СуммаОстатокНаДату
                |ИЗ
                |	РегистрБухгалтерии.Учетный.Остатки(&ДатаОстатка, Счет В ИЕРАРХИИ (&Выбсчета), , Субконто1 В (&Контрагенты)) КАК УчетныйОстатки";
 Запрос.УстановитьПараметр("ДатаОстатка", ДатаОстатка);
 Запрос.УстановитьПараметр("Контрагенты", Контрагенты);
 Запрос.УстановитьПараметр("ВыбСчета", ВыбСчета);
 Результат = Запрос.Выполнить();
 Выборка = Результат.Выбрать();
 Пока Выборка.Следующий() Цикл
	 ТекущийОстаток = ТекущийОстаток + Выборка.СуммаОстатокНаДату;
 КонецЦикла;
 Возврат ТекущийОстаток
КонецФункции

Процедура УстановитьСвязиМеждуСубконтоСчета(ДанныеФормы, Счет, Индекс, ПутьСвязиПоВладельцу, ТекущийЭлементТаблицы) Экспорт
	
	СвязыватьПоВладельцу = Ложь;
	НетВладельца = Ложь;
	СубконтоВладелец = Счет.ВидыСубконто[Индекс];
	СубконтоПроверяемое = Счет.ВидыСубконто[Индекс + 1];
	
	Для Каждого ТипВладельца Из СубконтоВладелец.ВидСубконто.ТипЗначения.Типы() Цикл
		Для Каждого ТипПроверяемого Из СубконтоПроверяемое.ВидСубконто.ТипЗначения.Типы() Цикл
			Попытка 
				Если Метаданные.НайтиПоТипу(ТипПроверяемого).Владельцы.Содержит(Метаданные.НайтиПоТипу(ТипВладельца)) Тогда
					СвязыватьПоВладельцу = Истина;
					Прервать
				КонецЕсли;
			Исключение
				НетВладельца = Истина
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
	Если Не СвязыватьПоВладельцу Тогда 
		ЭлементСвязываемогоСубконто = ДанныеФормы.Элементы.Найти(ТекущийЭлементТаблицы);
		МассивБезСвязиПоВладельцу = Новый Массив;
		Для Каждого ЭлементСвязи Из ЭлементСвязываемогоСубконто.СвязиПараметровВыбора Цикл 
			Если ЭлементСвязи.Имя = "Отбор.Владелец" Тогда
				Продолжить
			КонецЕсли;
			МассивБезСвязиПоВладельцу.Добавить(ЭлементСвязи);
		КонецЦикла;
		ЭлементСвязываемогоСубконто.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивБезСвязиПоВладельцу);
	Иначе
		Если Не НетВладельца Тогда
			НоваяСвязьПоВладельцу = Новый СвязьПараметраВыбора("Отбор.Владелец", ПутьСвязиПоВладельцу, РежимИзмененияСвязанногоЗначения.Очищать);
			ЭлементСвязываемогоСубконто = ДанныеФормы.Элементы.Найти(ТекущийЭлементТаблицы);
			МассивСвязиПоВладельцу = Новый Массив;
			Для Каждого ЭлементСвязи Из ЭлементСвязываемогоСубконто.СвязиПараметровВыбора Цикл 
				МассивСвязиПоВладельцу.Добавить(ЭлементСвязи);
			КонецЦикла;
			Если МассивСвязиПоВладельцу.Найти(НоваяСвязьПоВладельцу) = Неопределено Тогда
				МассивСвязиПоВладельцу.Добавить(НоваяСвязьПоВладельцу);
			КонецЕсли;
			ЭлементСвязываемогоСубконто.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязиПоВладельцу);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Функция ПоискК(ВыбМенеджер,СуммаОплаты) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Стр_КоэффициентыМенеджеровСрезПоследних.География
		|ИЗ
		|	РегистрСведений.Стр_КоэффициентыМенеджеров.СрезПоследних(, Менеджер = &ВыбМенеджер) КАК Стр_КоэффициентыМенеджеровСрезПоследних";

	Запрос.УстановитьПараметр("ВыбМенеджер", ВыбМенеджер);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		География = ВыборкаДетальныеЗаписи.География;
	КонецЦикла;

	КоэффМенеджера = 0;
	Если СуммаОплаты > 0 Тогда
		Если География = "Воронеж" Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Стр_КоэффициентыДляБонусовВоронеж.СуммаПродажи,
			|	Стр_КоэффициентыДляБонусовВоронеж.СуммаБонуса,
			|	Стр_КоэффициентыДляБонусовВоронеж.Коэффициент
			|ИЗ
			|	РегистрСведений.Стр_КоэффициентыМенеджеров.СрезПоследних(, Менеджер = &ВыбМенеджер) КАК Стр_КоэффициентыМенеджеровСрезПоследних
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Стр_КоэффициентыДляБонусов.Воронеж КАК Стр_КоэффициентыДляБонусовВоронеж
			|		ПО Стр_КоэффициентыМенеджеровСрезПоследних.Коэффициент = Стр_КоэффициентыДляБонусовВоронеж.Ссылка";
			
			Запрос.УстановитьПараметр("ВыбМенеджер", ВыбМенеджер);
			
			Результат = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СуммаПродажи = ВыборкаДетальныеЗаписи.СуммаПродажи;
				Если СуммаПродажи > СуммаОплаты Тогда 
					КоэффМенеджера = ВыборкаДетальныеЗаписи.Коэффициент;
					БонусМенеджера = ВыборкаДетальныеЗаписи.СуммаБонуса;
					ПродажаМенеджера = ВыборкаДетальныеЗаписи.СуммаПродажи;
					Прервать 
				КонецЕсли;
				ПредыдущийКоэффициент = ВыборкаДетальныеЗаписи.Коэффициент;
				ПредыдущийБонус = ВыборкаДетальныеЗаписи.СуммаБонуса;
				ПредыдущаяПродажа = ВыборкаДетальныеЗаписи.СуммаПродажи;
			КонецЦикла;
		ИначеЕсли География = "Москва" Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Стр_КоэффициентыДляБонусовМосква.СуммаПродажи,
			|	Стр_КоэффициентыДляБонусовМосква.СуммаБонуса,
			|	Стр_КоэффициентыДляБонусовМосква.Коэффициент
			|ИЗ
			|	РегистрСведений.Стр_КоэффициентыМенеджеров.СрезПоследних(, Менеджер = &ВыбМенеджер) КАК Стр_КоэффициентыМенеджеровСрезПоследних
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Стр_КоэффициентыДляБонусов.Москва КАК Стр_КоэффициентыДляБонусовМосква
			|		ПО Стр_КоэффициентыМенеджеровСрезПоследних.Коэффициент = Стр_КоэффициентыДляБонусовМосква.Ссылка";
			
			Запрос.УстановитьПараметр("ВыбМенеджер", ВыбМенеджер);
			
			Результат = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СуммаПродажи = ВыборкаДетальныеЗаписи.СуммаПродажи;
				Если СуммаПродажи > СуммаОплаты Тогда 
					КоэффМенеджера = ВыборкаДетальныеЗаписи.Коэффициент;
					Прервать 
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Если ПредыдущийКоэффициент = Неопределено Тогда
		Если КоэффМенеджера = Неопределено Тогда
			Возврат СуммаОплаты;
		Иначе
			Возврат КоэффМенеджера * СуммаОплаты;		
		КонецЕсли;
	Иначе
		ВтораяСумма = СуммаОплаты - ПредыдущаяПродажа;
		ПерваяЧасть = ПредыдущийБонус;
		ВтораяЧасть = ВтораяСумма * КоэффМенеджера;
		Возврат ПерваяЧасть + ВтораяЧасть;
	КонецЕсли;
КонецФункции

Функция ВернутьОтсрочкуПоДоговору(Договор, Дата) Экспорт
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ОтсрочкаПоДоговорамСрезПоследних.Договор КАК Договор,
	                |	ОтсрочкаПоДоговорамСрезПоследних.Отсрочка КАК Отсрочка,
	                |	ОтсрочкаПоДоговорамСрезПоследних.Предоплата КАК Предоплата
	                |ИЗ
	                |	РегистрСведений.ОтсрочкаПоДоговорам.СрезПоследних(&Период, Договор = &Договор) КАК ОтсрочкаПоДоговорамСрезПоследних";
	 
	 Запрос.УстановитьПараметр("Договор", Договор);
	 Запрос.УстановитьПараметр("Период", Дата);
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Пока Выборка.Следующий() Цикл
		 Возврат Новый Структура("Договор, Отсрочка, Предоплата, НеУстановлена", Выборка.Договор, Выборка.Отсрочка, Выборка.Предоплата, Ложь);	
	 КонецЦикла;
	 Возврат Новый Структура("Договор, Отсрочка, Предоплата, НеУстановлена", Договор, 0, 0, Истина);	
	 

КонецФункции // ()

Функция ПолучитьКурсВалют(Валюта, знач ЭквивалентнаяВалюта = Неопределено, знач Дата = Неопределено, СообщатьОбОтсутвииКурса = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ЭквивалентнаяВалюта) Тогда
		ЭквивалентнаяВалюта = УЧ_Сервер.НациональнаяВалюта();
	КонецЕсли;
	
	Если Валюта = ЭквивалентнаяВалюта Тогда
		Возврат 1;	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
	
	ПараметрыОтбора = новый Структура("Валюта, ЭквивалентнаяВалюта", Валюта, ЭквивалентнаяВалюта);
	ВсеКурсыВалют = ПолучитьВсеКурсыВалют(Дата);
	НайденныеСтроки = ВсеКурсыВалют.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() <> 0 Тогда		
		ДНКурса = ДеньНедели(Дата);
		Если НЕ НайденныеСтроки[0].Курс = 1 И (НачалоДня(НайденныеСтроки[0].Период) <> НачалоДня(Дата)) и (ДНКурса <=5 или (ДНКурса=6 и НачалоДня(НайденныеСтроки[0].Период)<НачалоДня(Дата-86400)) или (ДНКурса=7 и НачалоДня(НайденныеСтроки[0].Период)<НачалоДня(Дата-2*86400))) Тогда
			Сообщить("Внимание! Курс для пары " + Валюта + "-" + ЭквивалентнаяВалюта + " расчитан на " + Формат(НайденныеСтроки[0].Период,"ДФ=dd.MM.yyyy") + "."); 
		КонецЕсли;
		Возврат НайденныеСтроки[0].Курс;
	Иначе
		Если СообщатьОбОтсутвииКурса Тогда
			Сообщить("Не найден курс валют по паре " + Валюта + "-" + ЭквивалентнаяВалюта + ". Курс приравнен к 0.");
		КонецЕсли;
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьВсеКурсыВалют(Дата = Неопределено) Экспорт
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	               |	&НациональнаяВалюта КАК ЭквивалентнаяВалюта,
	               |	КурсыВалютСрезПоследних.Курс КАК Курс,
	               |	КурсыВалютСрезПоследних.Период КАК Период
	               |ИЗ
	               |	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютСрезПоследних
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	&НациональнаяВалюта,
	               |	КурсыВалютСрезПоследних.Валюта,
	               |	ВЫБОР
	               |		КОГДА КурсыВалютСрезПоследних.Курс <> 0
	               |			ТОГДА 1 / КурсыВалютСрезПоследних.Курс
	               |		ИНАЧЕ 0
	               |	КОНЕЦ,
	               |	КурсыВалютСрезПоследних.Период
	               |ИЗ
	               |	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютСрезПоследних
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Валюты.Ссылка,
	               |	Валюты.Ссылка,
	               |	1,
	               |	&Дата
	               |ИЗ
	               |	Справочник.Валюты КАК Валюты
	               |ГДЕ
	               |	Валюты.Ссылка <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата()));
	Запрос.УстановитьПараметр("НациональнаяВалюта", УЧ_Сервер.НациональнаяВалюта());
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Возврат Выгрузка;
	
КонецФункции

Функция ПересчитатьИзВалютыВВалюту(ВалютаИсходная, ЭквивалентнаяВалюта, СуммаВИсходнойВалюте, ДатаПолучения = Неопределено) Экспорт
	
	СтруктураВозврата = Новый Структура("СуммаВЭквивалентнойВалюте, КурсВал", 0, 0);
	
	Если Не ЭквивалентнаяВалюта = ВалютаИсходная Тогда
		
		Если ЭквивалентнаяВалюта = УЧ_Сервер.НациональнаяВалюта() Тогда
			СтруктураВозврата.КурсВал = ПолучитьКурсВалют(ВалютаИсходная, УЧ_Сервер.НациональнаяВалюта(), ДатаПолучения); 
			СтруктураВозврата.СуммаВЭквивалентнойВалюте = СуммаВИсходнойВалюте * СтруктураВозврата.КурсВал;
		ИначеЕсли ВалютаИсходная = УЧ_Сервер.НациональнаяВалюта() Тогда
			СтруктураВозврата.КурсВал = ПолучитьКурсВалют(ЭквивалентнаяВалюта, УЧ_Сервер.НациональнаяВалюта(), ДатаПолучения); 
			
			Если Не СтруктураВозврата.КурсВал = 0 Тогда
				СтруктураВозврата.СуммаВЭквивалентнойВалюте = СуммаВИсходнойВалюте / СтруктураВозврата.КурсВал;
			КонецЕсли;
			
		Иначе
			СтруктураВозврата.КурсВал = ПолучитьКурсВалют(ВалютаИсходная, ЭквивалентнаяВалюта, ДатаПолучения);
			СтруктураВозврата.СуммаВЭквивалентнойВалюте = СуммаВИсходнойВалюте * СтруктураВозврата.КурсВал;
		КонецЕсли;
		
	Иначе
		СтруктураВозврата.КурсВал = 1;
		СтруктураВозврата.СуммаВЭквивалентнойВалюте = СуммаВИсходнойВалюте;
	КонецЕсли;
	
	Возврат СтруктураВозврата;

КонецФункции

Функция ПолучитьПараметрыВыбораСчета(КодСчета) Экспорт
	
	МассивПараметровВыбора = Новый Массив;
	А = Новый ПараметрВыбора("Отбор.Родитель", ПланыСчетов.Учетный.НайтиПоКоду(КодСчета));
	МассивПараметровВыбора.Добавить(А);
	НовыеСвязи = Новый ФиксированныйМассив(МассивПараметровВыбора);
	ТекущиеПараметрыВыбора = НовыеСвязи;
	
	Возврат ТекущиеПараметрыВыбора;
	
КонецФункции

#Область НовыйАлгоритмВалютнойПереоценки

Функция СреднийКурсУчет(ДатаОст, Счет, Валюта, Предприятие, Подразделение, Источник = Неопределено, ВидОстатка = "Курс")
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА УчетныйОстатки.ВалютнаяСуммаОстаток = 0
	               |			ТОГДА 0
	               |		ИНАЧЕ УчетныйОстатки.СуммаОстаток / УчетныйОстатки.ВалютнаяСуммаОстаток
	               |	КОНЕЦ КАК Курс,
	               |	СУММА(УчетныйОстатки.ВалютнаяСуммаОстаток) КАК ВалютнаяСуммаОстаток,
	               |	СУММА(УчетныйОстатки.СуммаОстаток) КАК СуммаОстаток
	               |ИЗ
	               |	РегистрБухгалтерии.Учетный.Остатки(
	               |			&ДатаОст,
	               |			Счет = &Счет,
	               |			,
	               |			Предприятия = &Предприятие
	               |				И ВЫБОР
	               |					КОГДА &УчетПоПодразделениям = ИСТИНА
	               |						ТОГДА Подразделение = &Подразделение
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ
	               |				И Валюта = &Валюта
	               |				И ВЫБОР
	               |					КОГДА &Источник = НЕОПРЕДЕЛЕНО
	               |						ТОГДА ИСТИНА
	               |					ИНАЧЕ Субконто2 = &Источник
	               |				КОНЕЦ) КАК УчетныйОстатки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВЫБОР
	               |		КОГДА УчетныйОстатки.ВалютнаяСуммаОстаток = 0
	               |			ТОГДА 0
	               |		ИНАЧЕ УчетныйОстатки.СуммаОстаток / УчетныйОстатки.ВалютнаяСуммаОстаток
	               |	КОНЕЦ";
	
	Запрос.УстановитьПараметр("ДатаОст", ДатаОст);
	Запрос.УстановитьПараметр("Счет", Счет);
	Запрос.УстановитьПараметр("Валюта", Валюта);
	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	Запрос.УстановитьПараметр("УчетПоПодразделениям", Предприятие.УчетПоПодразделениям И Счет.УчетПоПодразделениям);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Источник", Источник);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		СтруктураОстатка = Новый Структура("Курс, ВалютнаяСумма, Сумма", Выборка.Курс, Выборка.ВалютнаяСуммаОстаток, Выборка.СуммаОстаток);
		Возврат СтруктураОстатка;
	Иначе
		Возврат Новый Структура("Курс, ВалютнаяСумма, Сумма", 0, 0, 0);
	КонецЕсли;
		
КонецФункции // ()

Процедура КурсовыеРазницыУчетОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт     
	
	Если Истина Тогда
		Возврат;	
	КонецЕсли;
	
	ПодсистемаКазна = Ложь;
	
	ТекПредприятие = Источник.Предприятие;
	ТекПодразделение = Источник.Подразделение;
	ТекСчет = Источник.Счет;
	ТекИсточник = ?(ПодсистемаКазна, Источник.Источник, Источник.Субконто2);
	ТекВид = ?(ПодсистемаКазна, Источник.ВидОперации, Источник.ПриходРасход);
	ТекДата = Источник.Дата;
	ПереоцениватьТекСчет = КЗСервер.СчетДляТекущейПереоценки(ТекСчет);
	
	Если ПереоцениватьТекСчет Тогда
		
		Попытка
			ТекВалюта = ТекИсточник.ВалютаДенежныхСредств;
		Исключение
			ТекВалюта = ?(ПодсистемаКазна, Источник.Валюта, Источник.Валюта1);
		КонецПопытки;
		
	Иначе
		ТекВалюта = ?(ПодсистемаКазна, Источник.Валюта, Источник.Валюта1)
	КонецЕсли;
	
	ПереоцениватьТекСчетКр = Ложь;
	ТекСчетКр = Неопределено;
	ТекВалютаКр = Справочники.Валюты.ПустаяСсылка();
	ТекИсточникКр = Неопределено;
	СтруктураРеквизитовТЧ = Неопределено;
	СозданоДвижениеПеремещенияМеждуИсточникамиПоРегистру98 = Ложь;
	
	Если Источник.Метаданные().ТабличныеЧасти.Количество() > 0 Тогда
		
		Попытка
			ИсточникТаб = Источник.Проводки[0];
			ТекСчетКр = ИсточникТаб.КорСчет;
			ТекИсточникКр = ИсточникТаб.КорСубконто2;
			ПереоцениватьТекСчетКр = КЗСервер.СчетДляТекущейПереоценки(ТекСчетКр);
			
			Если ТекСчетКр.Валютный Тогда
				
				Если ПереоцениватьТекСчетКр Тогда
					
					Попытка
						ТекВалютаКр = ТекИсточникКр.ВалютаДенежныхСредств;
					Исключение
						ТекВалютаКр = ИсточникТаб.Валюта;
					КонецПопытки;
					
				Иначе
					ТекВалютаКр = ИсточникТаб.Валюта
				КонецЕсли;
				
			КонецЕсли;
			
			СтруктураРеквизитовТЧ = Новый Структура();
			СтруктураРеквизитовТЧ.Вставить("Счет", ТекСчетКр);
			СтруктураРеквизитовТЧ.Вставить("Валюта", ТекВалютаКр);
			СтруктураРеквизитовТЧ.Вставить("Источник", ТекИсточникКр);
			СтруктураРеквизитовТЧ.Вставить("ВалютнаяСумма", ИсточникТаб.ВалСумма);
			СтруктураРеквизитовТЧ.Вставить("Курс", ИсточникТаб.Курс);
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
	Если ТекСчет.Валютный И ПереоцениватьТекСчет Тогда
		Источник.Движения.Записать();
		Источник.Движения.Учетный.Записывать = Истина;

		//ДатаКон = Новый Граница(Источник.Дата,ВидГраницы.Включая);
		ДатаКон = Новый Граница(Источник.Дата,ВидГраницы.Исключая);
		СтруктураКурса = СреднийКурсУчет(ДатаКон,ТекСчет,ТекВалюта,Источник.Предприятие,Источник.Подразделение,ТекИсточник);
		СрКурс = СтруктураКурса.Курс;
		СрСумма = СтруктураКурса.Сумма;
		СрВалютнаяСумма = СтруктураКурса.ВалютнаяСумма;
		
		// новый алгоритм
		КурсЦБ = сабРаботаСКурсамиВалют.ЗаполнитьДанныеЛокальногоКурсаДляВалюты(ТекВалюта, ТекПредприятие.ОсновнаяВалютаУчета, ДатаКон).Курс;
		ЛокальныйКурс = сабРаботаСКурсамиВалют.ЗаполнитьДанныеЛокальногоКурсаДляВалюты(ТекВалюта, ТекПредприятие.ОсновнаяВалютаУчета, ДатаКон).ЛокальныйКурс;
		
		Если Не ТипЗнч(ТекИсточник) = Тип("СправочникСсылка.Кассы") ИЛИ НЕ (ТекИсточник.ВидИсточника = Перечисления.ГД_ВидыИсточников.ВалютнаяКасса Или ТекИсточник.ВидИсточника = Перечисления.ГД_ВидыИсточников.ВалютнаяКассаУчет) Тогда
			ЛокальныйКурс = КурсЦБ;		
		КонецЕсли;

		ОстатокПоСчету98 = ПолучитьОстатокПоИсточникуСоСчета98(Источник.Дата, ТекИсточник);		
		ДатаКон = Новый Граница(Источник.Дата,ВидГраницы.Включая);
		СтруктураКурсаН = СреднийКурсУчет(ДатаКон,ТекСчет,ТекВалюта,Источник.Предприятие,Источник.Подразделение,ТекИсточник);
		
		Если СтруктураКурсаН.ВалютнаяСумма = 0 Тогда
			НулевойВалютныйОстаток = Истина;
			СрВалютнаяСуммаН = СрВалютнаяСумма;
		Иначе
			НулевойВалютныйОстаток = Ложь;
			СрВалютнаяСуммаН = СтруктураКурсаН.ВалютнаяСумма;
		КонецЕсли;
		
		Если Не ОстатокПоСчету98 = 0 И ПП_Сервер.ЭтоРасходнаяОперация(Источник.ПриходРасход) Тогда
			СрКурсН = ?(СтруктураКурсаН.ВалютнаяСумма = 0, СрКурс, СтруктураКурсаН.Сумма / СтруктураКурсаН.ВалютнаяСумма);
			// 26.05.16 если две денежных счета и одна и та же валюта, делаем только перемещение по регистру98, без проводки с 910 счетом
			//Если ЗначениеЗаполнено(ТекИсточникКр) Тогда // закомментированно 31.05.16, в доке может не быть табличной части
			
				Если ПереоцениватьТекСчетКр Тогда // два денежных счета
															
					Если ТекВалюта = ТекВалютаКр Тогда // в случае одной и той же валюты делаем 1) Перемещение фонда 2) Переоценку остатка
						// только движения по регистру98
						КЗСервер.СформироватьДвиженияСписанияС98Счета(Источник, ОстатокПоСчету98, СрВалютнаяСумма, СтруктураРеквизитовТЧ, Истина); // 1)
						СозданоДвижениеПеремещенияМеждуИсточникамиПоРегистру98 = Истина;
						КЗСервер.СформироватьДвиженияПоПереоценке98Счета(Источник, КурсЦБ, СрКурсН, СрВалютнаяСуммаН,, НулевойВалютныйОстаток); // 2)
					Иначе // в случае разных валют 1) Курсовая разница на 91 2) Списание фонда 3) Переоценка остатка						
						СуммаПереоценки91 = КЗСервер.ПолучитьСуммуПереоценки91(Источник, ЛокальныйКурс, СрКурс, СрВалютнаяСумма, СтруктураКурсаН.Сумма); 
						КЗСервер.СформироватьДвиженияПоПереоценке91Счета(Источник, ЛокальныйКурс, СрКурс, СрВалютнаяСумма, СтруктураКурсаН.Сумма); // 1)
						
						Если СуммаПереоценки91.ЭтоОстатокПоДенежномуСчету Тогда
							СрКурсН = 0;
						Иначе					
							СрСуммаН = СтруктураКурсаН.Сумма + СуммаПереоценки91.Сумма;
							СрКурсН = ?(СтруктураКурсаН.ВалютнаяСумма = 0, СрКурс, СрСуммаН / СтруктураКурсаН.ВалютнаяСумма);
						КонецЕсли;
												
						// движение по регистру98 и проводка со счетом 910
						КЗСервер.СформироватьДвиженияСписанияС98Счета(Источник, ОстатокПоСчету98, СрВалютнаяСумма, СтруктураРеквизитовТЧ); // 2)
						
						Если Не НулевойВалютныйОстаток Тогда
							КЗСервер.СформироватьДвиженияПоПереоценке98Счета(Источник, КурсЦБ, СрКурсН, СрВалютнаяСуммаН); // 3)
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе	// одни денежный счет
					
					Если ТекВалюта = ТекВалютаКр Тогда // 1) Списание фонда	2) Переоценка остатка					
						КЗСервер.СформироватьДвиженияСписанияС98Счета(Источник, ОстатокПоСчету98, СрВалютнаяСумма, СтруктураРеквизитовТЧ); // 1)
						КЗСервер.СформироватьДвиженияПоПереоценке98Счета(Источник, КурсЦБ, СрКурсН, СрВалютнаяСуммаН,, НулевойВалютныйОстаток); // 2)	
					Иначе // 1) Курсовая разница на 91 2) Списание фонда 3) Переоценка остатка
						СуммаПереоценки91 = КЗСервер.ПолучитьСуммуПереоценки91(Источник, ЛокальныйКурс, СрКурс, СрВалютнаяСумма, СтруктураКурсаН.Сумма); 
						КЗСервер.СформироватьДвиженияПоПереоценке91Счета(Источник, ЛокальныйКурс, СрКурс, СрВалютнаяСумма, СтруктураКурсаН.Сумма); // 1)
						
						Если СуммаПереоценки91.ЭтоОстатокПоДенежномуСчету Тогда
							СрКурсН = 0;
						Иначе					
							СрСуммаН = СтруктураКурсаН.Сумма + СуммаПереоценки91.Сумма;
							СрКурсН = ?(СтруктураКурсаН.ВалютнаяСумма = 0, СрКурс, СрСуммаН / СтруктураКурсаН.ВалютнаяСумма);
						КонецЕсли;
						
						КЗСервер.СформироватьДвиженияСписанияС98Счета(Источник, ОстатокПоСчету98, СрВалютнаяСумма, СтруктураРеквизитовТЧ); // 2)
						
						Если Не НулевойВалютныйОстаток Тогда
							КЗСервер.СформироватьДвиженияПоПереоценке98Счета(Источник, КурсЦБ, СрКурсН, СрВалютнаяСуммаН); // 3)
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
								
			//КонецЕсли;
			
		Иначе // только переоценка 98
			СрКурсН = СтруктураКурсаН.Курс;
			КЗСервер.СформироватьДвиженияПоПереоценке98Счета(Источник, КурсЦБ, СрКурсН, СрВалютнаяСуммаН);
		КонецЕсли;	
		// конец новый алгоритм
		
	КонецЕсли; 
	
	Если Источник.Метаданные().ТабличныеЧасти.Количество() > 0 Тогда
		
		Попытка
			
			Если ТекСчетКр.Валютный И ПереоцениватьТекСчетКр Тогда
				//ТекСтатья = Источник.Статья;
				ТекСтатьяКр = ИсточникТаб.КорСубконто2;
				
				Источник.Движения.Записать();
				Источник.Движения.Учетный.Записывать = Истина;           
				
				//ДатаКон = Новый Граница(Источник.Дата,ВидГраницы.Включая);
				ДатаКон = Новый Граница(Источник.Дата,ВидГраницы.Исключая);
				СтруктураКурса = СреднийКурсУчет(ДатаКон,ТекСчетКр,ТекВалютаКр,Источник.Предприятие,Источник.Подразделение,ТекИсточникКр);
				СрКурс = СтруктураКурса.Курс;
				СрСумма = СтруктураКурса.Сумма;
				СрВалютнаяСумма = СтруктураКурса.ВалютнаяСумма;
				
				// новый алгоритм			
				КурсЦБ = сабРаботаСКурсамиВалют.ЗаполнитьДанныеЛокальногоКурсаДляВалюты(ТекВалютаКр,ДатаКон).Курс;
				ЛокальныйКурс = сабРаботаСКурсамиВалют.ЗаполнитьДанныеЛокальногоКурсаДляВалюты(ТекВалютаКр,ДатаКон).ЛокальныйКурс;
				
				Если Не ТипЗнч(ТекИсточникКр) = Тип("СправочникСсылка.Кассы") ИЛИ НЕ (ТекИсточникКр.ВидИсточника = Перечисления.ГД_ВидыИсточников.ВалютнаяКасса Или ТекИсточникКр.ВидИсточника = Перечисления.ГД_ВидыИсточников.ВалютнаяКассаУчет) Тогда
					ЛокальныйКурс = КурсЦБ;		
				КонецЕсли;
				
				ОстатокПоСчету98 = ?(Не ЗначениеЗаполнено(ТекИсточникКр), 0, ПолучитьОстатокПоИсточникуСоСчета98(Источник.Дата, ТекИсточникКр));
				ДатаКон = Новый Граница(Источник.Дата,ВидГраницы.Включая);
				СтруктураКурсаН = СреднийКурсУчет(ДатаКон,ТекСчетКр,ТекВалютаКр,Источник.Предприятие,Источник.Подразделение,ТекИсточникКр);
				
				Если СтруктураКурсаН.ВалютнаяСумма = 0 Тогда				
					НулевойВалютныйОстаток = Истина;
					СрВалютнаяСуммаН = СрВалютнаяСумма; 
				Иначе
					НулевойВалютныйОстаток = Ложь;
					СрВалютнаяСуммаН = СтруктураКурсаН.ВалютнаяСумма ;
				КонецЕсли;
				
				Если Не ОстатокПоСчету98 = 0 И ТекСтатьяКр.Наименование = "Расходы в рамках перемещения между источниками" Тогда
					
					// 26.05.16 если две денежных счета и одна и та же валюта, делаем только перемещение по регистру98, без проводки с 910 счетом
					Если ЗначениеЗаполнено(ТекИсточникКр) Тогда					
						СрКурсН = ?(СтруктураКурсаН.ВалютнаяСумма = 0, СрКурс, СтруктураКурсаН.Сумма / СтруктураКурсаН.ВалютнаяСумма);
						
						Если ПереоцениватьТекСчет Тогда // два денежных счета
							
							Если ТекВалюта = ТекВалютаКр Тогда // в случае одной и той же валюты делаем 1) Перемещение фонда 2) Переоценку остатка
								
								Если Не СозданоДвижениеПеремещенияМеждуИсточникамиПоРегистру98 Тогда
									КЗСервер.СформироватьДвиженияСписанияС98Счета(Источник, ОстатокПоСчету98, СрВалютнаяСумма, СтруктураРеквизитовТЧ, Истина, Истина); // 1)								
								КонецЕсли;
								
								КЗСервер.СформироватьДвиженияПоПереоценке98Счета(Источник, КурсЦБ, СрКурсН, СрВалютнаяСуммаН, СтруктураРеквизитовТЧ, НулевойВалютныйОстаток); // 2)	
							Иначе // в случае разных валют 1) Курсовая разница на 91 2) Списание фонда 3) Переоценка остатка								
								СуммаПереоценки91 = КЗСервер.ПолучитьСуммуПереоценки91(Источник, ЛокальныйКурс, СрКурс, СрВалютнаяСумма, СтруктураКурсаН.Сумма, СтруктураРеквизитовТЧ);
								КЗСервер.СформироватьДвиженияПоПереоценке91Счета(Источник, ЛокальныйКурс, СрКурс, СрВалютнаяСумма, СтруктураКурсаН.Сумма, СтруктураРеквизитовТЧ); // 1)
								
								Если СуммаПереоценки91.ЭтоОстатокПоДенежномуСчету Тогда
									СрКурсН = 0;
								Иначе					
									СрСуммаН = СтруктураКурсаН.Сумма + СуммаПереоценки91.Сумма;
									СрКурсН = ?(СтруктураКурсаН.ВалютнаяСумма = 0, СрКурс, СрСуммаН / СтруктураКурсаН.ВалютнаяСумма);
								КонецЕсли;
								
								КЗСервер.СформироватьДвиженияСписанияС98Счета(Источник, ОстатокПоСчету98, СрВалютнаяСумма, СтруктураРеквизитовТЧ, Ложь, Истина); // 2)
								
								Если Не НулевойВалютныйОстаток Тогда
									КЗСервер.СформироватьДвиженияПоПереоценке98Счета(Источник, КурсЦБ, СрКурсН, СрВалютнаяСуммаН, СтруктураРеквизитовТЧ); // 3)
								КонецЕсли;
								
							КонецЕсли;
							
						Иначе // одни денежный счет						
							
							Если ТекВалюта = ТекВалютаКр Тогда // 1) Списание фонда	2) Переоценка остатка
								КЗСервер.СформироватьДвиженияСписанияС98Счета(Источник, ОстатокПоСчету98, СрВалютнаяСумма, СтруктураРеквизитовТЧ, Ложь, Истина); // 1)
								КЗСервер.СформироватьДвиженияПоПереоценке98Счета(Источник, КурсЦБ, СрКурсН, СрВалютнаяСуммаН, СтруктураРеквизитовТЧ, НулевойВалютныйОстаток); // 2)
							Иначе // 1) Курсовая разница на 91 2) Списание фонда 3) Переоценка остатка	
								
								СуммаПереоценки91 = КЗСервер.ПолучитьСуммуПереоценки91(Источник, ЛокальныйКурс, СрКурс, СрВалютнаяСумма, СтруктураКурсаН.Сумма, СтруктураРеквизитовТЧ); 
								КЗСервер.СформироватьДвиженияПоПереоценке91Счета(Источник, ЛокальныйКурс, СрКурс, СрВалютнаяСумма, СтруктураКурсаН.Сумма, СтруктураРеквизитовТЧ); // 1)
								
								Если СуммаПереоценки91.ЭтоОстатокПоДенежномуСчету Тогда
									СрКурсН = 0;
								Иначе					
									СрСуммаН = СтруктураКурсаН.Сумма + СуммаПереоценки91.Сумма;
									СрКурсН = ?(СтруктураКурсаН.ВалютнаяСумма = 0, СрКурс, СрСуммаН / СтруктураКурсаН.ВалютнаяСумма);
								КонецЕсли;
								
								КЗСервер.СформироватьДвиженияСписанияС98Счета(Источник, ОстатокПоСчету98, СрВалютнаяСумма, СтруктураРеквизитовТЧ, Ложь, Истина); // 2)
								
								Если Не НулевойВалютныйОстаток Тогда
									КЗСервер.СформироватьДвиженияПоПереоценке98Счета(Источник, КурсЦБ, СрКурсН, СрВалютнаяСуммаН, СтруктураРеквизитовТЧ); // 3)
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				ИначеЕсли ТекСтатьяКр.Наименование = "Поступления в рамках перемещения между источниками" Тогда // только переоценка 98
					СрКурсН = СтруктураКурсаН.Курс;
					КЗСервер.СформироватьДвиженияПоПереоценке98Счета(Источник, КурсЦБ, СрКурсН, СрВалютнаяСуммаН, СтруктураРеквизитовТЧ);
				КонецЕсли;	
				
				// конец новый алгоритм
				
			КонецЕсли;
			
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
	Если ТекСчет.Валютный И ПереоцениватьТекСчет Тогда
		Источник.Движения.Записать();
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетныйОбороты.Регистратор
		|ИЗ
		|	РегистрБухгалтерии.Учетный.Обороты(
		|			&ДатаНачала,
		|			&ДатаКонца,
		|			Регистратор,
		|			Счет = &ВыбСчет,
		|			,
		|			Валюта = &ВыбВалюта
		|				И Предприятия = &ВыбПредприятия
		|				И Субконто1 = &ВыбИсточник
		|				И ВЫБОР
		|					КОГДА &УчетПоПодразделениям = ИСТИНА
		|						ТОГДА Подразделение = &Подразделение
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ,
		|			,
		|			) КАК УчетныйОбороты";
		
		Запрос.УстановитьПараметр("ВыбПредприятия", ТекПредприятие);
		Запрос.УстановитьПараметр("ДатаНачала", ТекДата);
		Запрос.УстановитьПараметр("ДатаКонца", КонецДня(ТекДата));
		Запрос.УстановитьПараметр("ВыбСчет", ТекСчет);
		Запрос.УстановитьПараметр("ВыбВалюта", ТекВалюта);
		Запрос.УстановитьПараметр("ВыбИсточник", ТекИсточник);
		Запрос.УстановитьПараметр("УчетПоПодразделениям", ТекПредприятие.УчетПоПодразделениям);
		Запрос.УстановитьПараметр("Подразделение", ТекПодразделение);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ДокСсылка = ВыборкаДетальныеЗаписи.Регистратор;
			
			Если НЕ ДокСсылка = Источник.Ссылка Тогда
				ДокОбъект = ДокСсылка.ПолучитьОбъект();
				ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьОстатокПоИсточникуСоСчета98(ДатаПолучения, Источник) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(УчетныйОстатки.СуммаОстатокКт, 0) - ЕСТЬNULL(УчетныйОстатки.СуммаОстатокДт, 0) КАК СуммаОстаток
	               |ИЗ
	               |	РегистрБухгалтерии.Учетный.Остатки(&ДатаОст, Счет = &Счет, , Субконто2 = &Источник) КАК УчетныйОстатки";
	Запрос.УстановитьПараметр("ДатаОст", ДатаПолучения);
	Запрос.УстановитьПараметр("Счет", ПланыСчетов.Учетный._98_03);
	Запрос.УстановитьПараметр("Источник", Источник.Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		СуммаОст = Выборка.СуммаОстаток
	Иначе
		СуммаОст = 0
	КонецЕсли;
	
	Возврат СуммаОст;
	
КонецФункции

#КонецОбласти

Функция ПолучитьНормативНоменклатуры(Номенклатура, Предприятие, Период, Норматив, Сценарий = Неопределено) Экспорт
	
	Если ТипЗнч(Норматив) = Тип("Строка") Тогда
		Норматив = Справочники.НормативыНоменклатуры.НайтиПоНаименованию(Норматив, Истина);
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Д_ПараметрыНоменклатурыСрезПоследних.Значение,
	|	Д_ПараметрыНоменклатурыСрезПоследних.Номенклатура
	|ИЗ
	|	РегистрСведений.Д_ПараметрыНоменклатуры.СрезПоследних(
	|			&Период,
	|			(&Сценарий = НЕОПРЕДЕЛЕНО
	|				ИЛИ СценарийПлана = &Сценарий)
	|				И Предприятие = &Предприятие
	|				И Норматив = &Норматив
	|				И Номенклатура = &Номенклатура) КАК Д_ПараметрыНоменклатурыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Д_ПараметрыНоменклатурыСрезПоследних.Значение,
	|	Д_ПараметрыНоменклатурыСрезПоследних.Номенклатура
	|ИЗ
	|	РегистрСведений.Д_ПараметрыНоменклатуры.СрезПоследних(
	|			&Период,
	|			(&Сценарий = НЕОПРЕДЕЛЕНО
	|				ИЛИ СценарийПлана = &Сценарий)
	|				И Предприятие = &Предприятие
	|				И Норматив = &Норматив
	|				И Номенклатура = &НомГруппа) КАК Д_ПараметрыНоменклатурыСрезПоследних";
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	Запрос.УстановитьПараметр("Норматив", Норматив);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("НомГруппа", Номенклатура.Родитель);
	МассивЗапросов = Запрос.ВыполнитьПакет();
	
	РезультатПоНоменклатуре = МассивЗапросов[0].Выгрузить();
	Если РезультатПоНоменклатуре.Количество() = 0 Тогда
		РезультатПоГруппе = МассивЗапросов[1].Выгрузить();
		Если РезультатПоГруппе.Количество() = 0 Тогда
			Возврат Неопределено;
		Иначе
			Возврат РезультатПоГруппе[0].Значение;
		КонецЕсли;
	Иначе
		Возврат РезультатПоНоменклатуре[0].Значение;
	КонецЕсли;	
	
КонецФункции

Функция НеЗаполненностьКоличестваИЦеныВТЧДок(СтрокаТЧ) Экспорт
		
	Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Количество) И  Не ЗначениеЗаполнено(СтрокаТЧ.Цена) Тогда	
		
		Возврат Истина;
		
	КонецЕсли;
		
КонецФункции	

Функция ОпределитьВидСтатьи(ТекСтатья) Экспорт
	
	Если Строка(ТекСтатья) = "Актив" Или Строка(ТекСтатья.Родитель) = "Актив" Тогда
		Возврат "Актив"
	ИначеЕсли Строка(ТекСтатья) = "Пассив" Или Строка(ТекСтатья.Родитель) = "Пассив" Тогда
		Возврат "Пассив"
	Иначе
		Возврат ОпределитьВидСтатьи(ТекСтатья.Родитель)
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТаблицуОстатков(Объект, СтруктураИмен, СтруктураСоответствий, ДатаОстатков = Неопределено) Экспорт
	
	СоответствиеСчета = СтруктураСоответствий.Соответствия;
	СоответствиеУчетаПоПодразделениям = СтруктураСоответствий.СоответствияУчетаПодразделений;
	
	Предприятие = СтруктураИмен.Предприятие;
	Подразделение = СтруктураИмен.Подразделение;
	Товары = СтруктураИмен.Товары;
	Склад = СтруктураИмен.Склад;
	Номенклатура = СтруктураИмен.Номенклатура;
	Количество = СтруктураИмен.Количество;
	Счет10 = СтруктураИмен.Счет10;
	СчетНовый = СтруктураИмен.СчетНовый;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧДокумента.Товар КАК Товар,
	|	ТЧДокумента.Количество КАК Количество,
	|	ТЧДокумента.Предприятие КАК Предприятие,
	|	ТЧДокумента.Склад КАК Склад,
	|	ТЧДокумента.Подразделение КАК Подразделение,
	|	ТЧДокумента.УчетПоПодразделениям КАК УчетПоПодразделениям,
	|	ТЧДокумента.Счет10 КАК ТоварСчет10,
	|	ТЧДокумента.НеКонтролировать10 КАК ПредприятиеНеКонтролировать10,
	|	ТЧДокумента.НеКонтролировать41 КАК ПредприятиеНеКонтролировать41,
	|	ТЧДокумента.НеКонтролировать43 КАК ПредприятиеНеКонтролировать43
	|ПОМЕСТИТЬ ВТ_ТЧДокумента
	|ИЗ
	|	&ТЧДокумента КАК ТЧДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТЧДокумента.Товар КАК Номенклатура,
	|	СУММА(ВТ_ТЧДокумента.Количество) КАК Количество,
	|	ВТ_ТЧДокумента.Предприятие КАК Предприятие,
	|	ВТ_ТЧДокумента.Склад КАК Склад,
	|	ВТ_ТЧДокумента.Подразделение КАК Подразделение,
	|	ВТ_ТЧДокумента.УчетПоПодразделениям КАК УчетПоПодразделениям,
	|	ВТ_ТЧДокумента.ТоварСчет10 КАК ТоварСчет10,
	|	ВТ_ТЧДокумента.ПредприятиеНеКонтролировать10 КАК ПредприятиеНеКонтролировать10,
	|	ВТ_ТЧДокумента.ПредприятиеНеКонтролировать41 КАК ПредприятиеНеКонтролировать41,
	|	ВТ_ТЧДокумента.ПредприятиеНеКонтролировать43 КАК ПредприятиеНеКонтролировать43
	|ПОМЕСТИТЬ ТЧДока
	|ИЗ
	|	ВТ_ТЧДокумента КАК ВТ_ТЧДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТЧДокумента.Товар,
	|	ВТ_ТЧДокумента.Предприятие,
	|	ВТ_ТЧДокумента.Склад,
	|	ВТ_ТЧДокумента.УчетПоПодразделениям,
	|	ВТ_ТЧДокумента.Подразделение,
	|	ВТ_ТЧДокумента.ТоварСчет10,
	|	ВТ_ТЧДокумента.ПредприятиеНеКонтролировать10,
	|	ВТ_ТЧДокумента.ПредприятиеНеКонтролировать41,
	|	ВТ_ТЧДокумента.ПредприятиеНеКонтролировать43
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетныйОстатки.Субконто1 КАК Номенклатура,
	|	УчетныйОстатки.Субконто2 КАК Склад,
	|	ЕСТЬNULL(УчетныйОстатки.СуммаОстаток, 0) КАК Сумма,
	|	ЕСТЬNULL(УчетныйОстатки.КоличествоОстаток, 0) КАК Количество,
	|	ВЫБОР
	|		КОГДА УчетныйОстатки.КоличествоОстаток = 0
	|			ТОГДА 0
	|		ИНАЧЕ УчетныйОстатки.СуммаОстаток / УчетныйОстатки.КоличествоОстаток
	|	КОНЕЦ КАК Цена,
	|	УчетныйОстатки.Счет КАК Счет,
	|	УчетныйОстатки.Предприятия КАК Предприятия,
	|	УчетныйОстатки.Подразделение КАК Подразделение
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрБухгалтерии.Учетный.Остатки(
	|			&ПозицияДокумента,
	|			Счет В (&ВыбСчет),
	|			,
	|			Предприятия = &ВыбПредприятие
	|				И Субконто1 В (&ВыбТовары)
	|				И Субконто2 В (&ВыбСклад)) КАК УчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧДока.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(Остатки.Количество, 0) - ТЧДока.Количество КАК КоличествоМинус,
	|	ТЧДока.Предприятие КАК Предприятие,
	|	ТЧДока.Подразделение КАК Подразделение,
	|	ТЧДока.УчетПоПодразделениям КАК УчетПоПодразделениям,
	|	ТЧДока.Склад КАК Склад,
	|	ТЧДока.Количество КАК КоличествоНужно,
	|	ЕСТЬNULL(Остатки.Количество, 0) КАК КоличествоОстаток
	|ИЗ
	|	ТЧДока КАК ТЧДока
	|		ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	|		ПО ТЧДока.Номенклатура = Остатки.Номенклатура
	|			И ТЧДока.Предприятие = Остатки.Предприятия
	|			И ТЧДока.Склад = Остатки.Склад
	|			И (ВЫБОР
	|				КОГДА Остатки.Подразделение ЕСТЬ NULL
	|						ИЛИ ТЧДока.УчетПоПодразделениям = ЛОЖЬ
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ТЧДока.Подразделение = Остатки.Подразделение
	|			КОНЕЦ)
	|ГДЕ
	|	ЕСТЬNULL(Остатки.Количество, 0) - ТЧДока.Количество < 0
	|	И (ТЧДока.ТоварСчет10 В ИЕРАРХИИ (&Счет41)
	|				И ТЧДока.ПредприятиеНеКонтролировать41 = ЛОЖЬ
	|			ИЛИ ТЧДока.ТоварСчет10 В ИЕРАРХИИ (&Счет10)
	|				И ТЧДока.ПредприятиеНеКонтролировать10 = ЛОЖЬ
	|			ИЛИ ТЧДока.ТоварСчет10 В ИЕРАРХИИ (&Счет43)
	|				И ТЧДока.ПредприятиеНеКонтролировать43 = ЛОЖЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧДока.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(Остатки.Количество, 0) + ТЧДока.Количество КАК КоличествоКонечное,
	|	ТЧДока.Предприятие КАК Предприятие,
	|	ТЧДока.Подразделение КАК Подразделение,
	|	Остатки.Склад КАК Склад,
	|	ТЧДока.Количество КАК КоличествоНужно,
	|	ЕСТЬNULL(Остатки.Количество, 0) КАК КоличествоОстаток,
	|	ЕСТЬNULL(Остатки.Сумма, 0) КАК СуммаКонечное,
	|	ТЧДока.Склад КАК СкладПолучатель,
	|	ТЧДока.ТоварСчет10 КАК Счет,
	|	ТЧДока.Подразделение КАК ПодразделениеПолучатель,
	|	ТЧДока.УчетПоПодразделениям КАК УчетПоПодразделениям
	|ИЗ
	|	ТЧДока КАК ТЧДока
	|		ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	|		ПО ТЧДока.Номенклатура = Остатки.Номенклатура
	|			И ТЧДока.Предприятие = Остатки.Предприятия
	|			И ТЧДока.Склад = Остатки.Склад
	|			И (ВЫБОР
	|				КОГДА Остатки.Подразделение ЕСТЬ NULL
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ТЧДока.Подразделение = Остатки.Подразделение
	|			КОНЕЦ)
	|ГДЕ
	|	ЕСТЬNULL(Остатки.Количество, 0) < 0";
	
	ВыбСчет = Новый Массив;
	ВыбТовары = Новый Массив;
	Для каждого ТекСтрока Из СоответствиеСчета Цикл
		Если ЗначениеЗаполнено(ТекСтрока.Ключ) Тогда
			ВыбТовары.Добавить(ТекСтрока.Ключ);
			Если ВыбСчет.Найти(ТекСтрока.Значение) = Неопределено Тогда
				ВыбСчет.Добавить(ТекСтрока.Значение);
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
	
	ЕстьРеквСклад = Не Объект.Метаданные().Реквизиты.Найти(Склад) = Неопределено;
	ЕстьРеквТЧСклад = Не Объект.Метаданные().ТабличныеЧасти[Товары].Реквизиты.Найти(Склад) = Неопределено;
	ВыбСклад = Новый Массив;
	
	МоментКонца = Объект.МоментВремени();
	
	ТЧДокумента = Новый ТаблицаЗначений;
	ТЧДокумента.Колонки.Добавить("Товар", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЧДокумента.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
	ТЧДокумента.Колонки.Добавить("Предприятие", Новый ОписаниеТипов("СправочникСсылка.Предприятия"));
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Склады"));
	МассивТипов.Добавить(Тип("СправочникСсылка.Контрагенты"));
	ТЧДокумента.Колонки.Добавить("Склад", Новый ОписаниеТипов(МассивТипов));
	ТЧДокумента.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	ТЧДокумента.Колонки.Добавить("УчетПоПодразделениям", Новый ОписаниеТипов("Булево",,,,, Новый КвалификаторыДвоичныхДанных()));
	ТЧДокумента.Колонки.Добавить("Счет10", Новый ОписаниеТипов("ПланСчетовСсылка.Учетный"));
	ТЧДокумента.Колонки.Добавить("НеКонтролировать10", Новый ОписаниеТипов("Булево",,,,, Новый КвалификаторыДвоичныхДанных()));
	ТЧДокумента.Колонки.Добавить("НеКонтролировать41", Новый ОписаниеТипов("Булево",,,,, Новый КвалификаторыДвоичныхДанных()));
	ТЧДокумента.Колонки.Добавить("НеКонтролировать43", Новый ОписаниеТипов("Булево",,,,, Новый КвалификаторыДвоичныхДанных()));
	УчетПоПодразделениям = Объект[Предприятие].УчетПоПодразделениям;
	НеКонтролировать10 = Объект[Предприятие].НеКонтролировать10;
	НеКонтролировать41 = Объект[Предприятие].НеКонтролировать41;
	НеКонтролировать43 = Объект[Предприятие].НеКонтролировать43;
	ПустойСклад = Справочники.Склады.ПустаяСсылка();
	Для Каждого СтрокаТЧ Из Объект[Товары] Цикл
		Если СтрокаТЧ[Номенклатура] = Неопределено Тогда
			Продолжить;		
		КонецЕсли;
		СтрокаТЧДокумента = ТЧДокумента.Добавить();
		СтрокаТЧДокумента.Товар = СтрокаТЧ[Номенклатура];
		СтрокаТЧДокумента.Количество = СтрокаТЧ[Количество];
		СтрокаТЧДокумента.Предприятие = Объект[Предприятие];
		СтрокаТЧДокумента.Подразделение = Объект[Подразделение];
		СтрокаТЧДокумента.УчетПоПодразделениям = УчетПоПодразделениям И СоответствиеУчетаПоПодразделениям.Получить((СоответствиеСчета.Получить(СтрокаТЧ[Номенклатура])));
		СтрокаТЧДокумента.Счет10 = СоответствиеСчета.Получить(СтрокаТЧ[Номенклатура]);
		СтрокаТЧДокумента.НеКонтролировать10 = НеКонтролировать10;
		СтрокаТЧДокумента.НеКонтролировать41 = НеКонтролировать41;
		СтрокаТЧДокумента.НеКонтролировать43 = НеКонтролировать43;
		Если ЕстьРеквТЧСклад И (ЗначениеЗаполнено(СтрокаТЧ[Склад]) ИЛИ Не ЕстьРеквСклад) Тогда
			ВыбСклад.Добавить(СтрокаТЧ[Склад]);
			СтрокаТЧДокумента.Склад = СтрокаТЧ[Склад]; 
		Иначе
			СтрокаТЧДокумента.Склад = Объект[Склад];
			ВыбСклад.Добавить(Объект[Склад]);
		КонецЕсли;
		
		Если НЕ Счет10 = СчетНовый Тогда //пока только для Переработки
			СтрокаТЧДокумента = ТЧДокумента.Добавить();
			СтрокаТЧДокумента.Товар = СтрокаТЧ[Номенклатура];
			СтрокаТЧДокумента.Количество = СтрокаТЧ[Количество];
			СтрокаТЧДокумента.Предприятие = Объект[Предприятие];
			СтрокаТЧДокумента.Подразделение = Объект[Подразделение];
			СтрокаТЧДокумента.УчетПоПодразделениям = УчетПоПодразделениям И СоответствиеУчетаПоПодразделениям.Получить((СоответствиеСчета.Получить(СтрокаТЧ[Номенклатура])));
			СтрокаТЧДокумента.Счет10 = СтрокаТЧ[СчетНовый];
			СтрокаТЧДокумента.НеКонтролировать10 = НеКонтролировать10;
			СтрокаТЧДокумента.НеКонтролировать41 = НеКонтролировать41;
			СтрокаТЧДокумента.НеКонтролировать43 = НеКонтролировать43;
			//Если ЕстьРеквТЧСклад И (ЗначениеЗаполнено(СтрокаТЧ[Склад]) ИЛИ Не ЕстьРеквСклад) Тогда
			//	ВыбСклад.Добавить(СтрокаТЧ[Склад]);
			//	СтрокаТЧДокумента.Склад = СтрокаТЧ[Склад]; 
			//Иначе
				СтрокаТЧДокумента.Склад = Объект.Субконто2;
				ВыбСклад.Добавить(СтрокаТЧДокумента.Склад);
			//КонецЕсли;
			ВыбСчет.Добавить(СтрокаТЧДокумента.Счет10);
		КонецЕсли;
		
	КонецЦикла;	
	
	Запрос.УстановитьПараметр("ВыбТовары", ВыбТовары);
	Запрос.УстановитьПараметр("ВыбПредприятие", Объект[Предприятие]);
	Запрос.УстановитьПараметр("Подразделение", Объект[Подразделение]);
	Запрос.УстановитьПараметр("ВыбСклад", ВыбСклад);
	Запрос.УстановитьПараметр("ВыбСчет", ВыбСчет);
	Запрос.УстановитьПараметр("ПозицияДокумента", ?(ДатаОстатков = Неопределено, МоментКонца, ДатаОстатков));
	Запрос.УстановитьПараметр("ТЧДокумента", ТЧДокумента);
	Запрос.УстановитьПараметр("Счет10", ПланыСчетов.Учетный.Счет10());
	Запрос.УстановитьПараметр("Счет41", ПланыСчетов.Учетный.Счет41());
	Запрос.УстановитьПараметр("Счет43", ПланыСчетов.Учетный.Счет43());
	
	МассивЗапросов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	РезультатОстатки = МассивЗапросов[2].Выгрузить();
	
	ПустойСклад = Справочники.Склады.ПустаяСсылка();
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.УЧ_Операция") Тогда //считаем приход сразу в операции
		Для Каждого ТекСтрока Из Объект.Проводки Цикл
			Если ТипЗнч(ТекСтрока.Субконто1Дебет) = Тип("СправочникСсылка.Номенклатура") И Не ВыбСчет.Найти(ТекСтрока.СчетДебет) = Неопределено Тогда
				НоваяСтрока = РезультатОстатки.Добавить();
				НоваяСтрока.Номенклатура = ТекСтрока.Субконто1Дебет;	
		        НоваяСтрока.Склад = ?(ЗначениеЗаполнено(ТекСтрока.Субконто2Дебет), ТекСтрока.Субконто2Дебет, ПустойСклад);
				НоваяСтрока.Сумма =  ТекСтрока.Сумма;
				НоваяСтрока.Количество =  ТекСтрока.КоличествоДт;
				НоваяСтрока.Счет =  ТекСтрока.СчетДебет;
				НоваяСтрока.Предприятия =  Объект[Предприятие];
				НоваяСтрока.Подразделение =  ?(Не СоответствиеУчетаПоПодразделениям.Получить(ТекСтрока.СчетДебет), NULL, Объект[Подразделение]);
			КонецЕсли;
		КонецЦикла;
		РезультатОстатки.Свернуть("Номенклатура, Склад, Счет, Предприятия, Подразделение", "Сумма, Количество, Цена");
		Для Каждого ТекСтрока Из РезультатОстатки Цикл
			ТекСтрока.Цена = ?(ТекСтрока.Количество, ТекСтрока.Сумма / ТекСтрока.Количество, 0); 
		КонецЦикла;
	КонецЕсли;	
		
	РезультатКонтроль = МассивЗапросов[3].Выгрузить();
	РезультатКонтрольМинусов  = МассивЗапросов[4].Выгрузить();

	Возврат Новый Структура("РезультатОстатки, РезультатКонтроль, РезультатКонтрольМинусов", РезультатОстатки, РезультатКонтроль, РезультатКонтрольМинусов);

КонецФункции // ()

Функция СформироватьСтруктуруИмен(Объект) Экспорт
	СтруктураИмен = Новый Структура;
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.УЧ_СписаниеТоваров") Тогда
		СтруктураИмен.Вставить("Предприятие", "Предприятие");
		СтруктураИмен.Вставить("Подразделение", "Подразделение");
		СтруктураИмен.Вставить("Склад", "Склад");
		СтруктураИмен.Вставить("Номенклатура", "Товар");
	    СтруктураИмен.Вставить("Количество", "Количество");
	    СтруктураИмен.Вставить("Товары", "ТабличнаяЧасть");
		СтруктураИмен.Вставить("Счет10", "СчетУчета");
		СтруктураИмен.Вставить("СчетНовый", "СчетУчета");
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.УЧ_Реализация") Тогда
		СтруктураИмен.Вставить("Предприятие", "Предприятие");
		СтруктураИмен.Вставить("Подразделение", "Подразделение");
		СтруктураИмен.Вставить("Склад", "Склад");
		СтруктураИмен.Вставить("Номенклатура", "Номенклатура");
	    СтруктураИмен.Вставить("Количество", "Количество");
	    СтруктураИмен.Вставить("Товары", "Товары");
		СтруктураИмен.Вставить("Счет10", "Счет");
		СтруктураИмен.Вставить("СчетНовый", "Счет");
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.УЧ_ВыпускПродукции") Тогда
		СтруктураИмен.Вставить("Предприятие", "Предприятие");
		СтруктураИмен.Вставить("Подразделение", "Подразделение");
		СтруктураИмен.Вставить("Склад", "Склад");
		СтруктураИмен.Вставить("Номенклатура", "Материал");
	    СтруктураИмен.Вставить("Количество", "Количество");
	    СтруктураИмен.Вставить("Товары", "Материалы");
		//СтруктураИмен.Вставить("Счет10", "Счет");
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.УЧ_ВозвратТоваровПоставщику") Тогда
		СтруктураИмен.Вставить("Предприятие", "Предприятие");
		СтруктураИмен.Вставить("Подразделение", "Подразделение");
		СтруктураИмен.Вставить("Склад", "Склад");
		СтруктураИмен.Вставить("Номенклатура", "Номенклатура");
	    СтруктураИмен.Вставить("Количество", "Количество");
	    СтруктураИмен.Вставить("Товары", "Товары");
		СтруктураИмен.Вставить("Счет10", "СчетУчета");
		СтруктураИмен.Вставить("СчетНовый", "СчетУчета");
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.УЧ_ПеремещениеМатериаловВПроизводство") Тогда
		СтруктураИмен.Вставить("Предприятие", "Предприятие");
		СтруктураИмен.Вставить("Подразделение", "Подразделение");
		СтруктураИмен.Вставить("Склад", "Склад");
		СтруктураИмен.Вставить("Номенклатура", "Номенклатура");
	    СтруктураИмен.Вставить("Количество", "Количество");
	    СтруктураИмен.Вставить("Товары", "ТабличнаяЧасть");
		СтруктураИмен.Вставить("Счет10", "СчетУчета");
		СтруктураИмен.Вставить("СчетНовый", "КорСчет");
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.УЧ_КорректировкаРеализации") Тогда
		СтруктураИмен.Вставить("Предприятие", "Предприятие");
		СтруктураИмен.Вставить("Подразделение", "Подразделение");
		СтруктураИмен.Вставить("Склад", "Склад");
		СтруктураИмен.Вставить("Номенклатура", "Номенклатура");
	    СтруктураИмен.Вставить("Количество", "Количество");
	    СтруктураИмен.Вставить("Товары", "Товары");
		СтруктураИмен.Вставить("Счет10", "Счет");
		СтруктураИмен.Вставить("СчетНовый", "Счет");
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.УЧ_ПереводТМЦ") Тогда
		СтруктураИмен.Вставить("Предприятие", "Предприятие");
		СтруктураИмен.Вставить("Подразделение", "Подразделение");
		СтруктураИмен.Вставить("Склад", "Склад");
		СтруктураИмен.Вставить("Номенклатура", "Номенклатура");
	    СтруктураИмен.Вставить("Количество", "Количество");
	    СтруктураИмен.Вставить("Товары", "ТабличнаяЧасть");
		СтруктураИмен.Вставить("Счет10", "СчетУчетаБУ");
		СтруктураИмен.Вставить("СчетНовый", "СчетУчетаБУ");
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ЗаказКлиента") Тогда
		СтруктураИмен.Вставить("Предприятие", "Предприятие");
		СтруктураИмен.Вставить("Подразделение", "Подразделение");
		СтруктураИмен.Вставить("Склад", "Склад");
		СтруктураИмен.Вставить("Номенклатура", "Номенклатура");
	    СтруктураИмен.Вставить("Количество", "Количество");
	    СтруктураИмен.Вставить("Товары", "ТабличнаяЧасть");
		СтруктураИмен.Вставить("Счет10", "СчетУчета");
		СтруктураИмен.Вставить("СчетНовый", "СчетУчета");
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ЗаказНаВозвратОтКлиента") Тогда
		СтруктураИмен.Вставить("Предприятие", "Предприятие");
		СтруктураИмен.Вставить("Подразделение", "Подразделение");
		СтруктураИмен.Вставить("Склад", "Склад");
		СтруктураИмен.Вставить("Номенклатура", "Номенклатура");
	    СтруктураИмен.Вставить("Количество", "Количество");
	    СтруктураИмен.Вставить("Товары", "ТабличнаяЧасть");
		СтруктураИмен.Вставить("Счет10", "СчетУчета");
		СтруктураИмен.Вставить("СчетНовый", "СчетУчета");
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ЗаказНаПроизводство") Тогда
		СтруктураИмен.Вставить("Предприятие", "Предприятие");
		СтруктураИмен.Вставить("Подразделение", "Подразделение");
		СтруктураИмен.Вставить("Склад", "Склад");
		СтруктураИмен.Вставить("Номенклатура", "Материал");
	    СтруктураИмен.Вставить("Количество", "Количество");
	    СтруктураИмен.Вставить("Товары", "Материалы");
		СтруктураИмен.Вставить("Счет10", "СчетУчета");
		СтруктураИмен.Вставить("СчетНовый", "СчетУчета");
	КонецЕсли;
	
	Возврат СтруктураИмен; 
КонецФункции // ()

Функция ПоучитьСоответствияСчетовНоменклатуры(Объект, СтруктураИмен, СчетПоУмолчанию = Неопределено) Экспорт
	Если СчетПоУмолчанию = Неопределено Тогда
		СчетПоУмолчанию = ПланыСчетов.Учетный.НайтиПоКоду("41");	
	КонецЕсли;
	
	Товары = СтруктураИмен.Товары;
	Номенклатура = СтруктураИмен.Номенклатура;
	Счет10 = СтруктураИмен.Счет10;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЧДокумента." + Номенклатура + " КАК Товар,
	|	ТЧДокумента." + Счет10 + " КАК СчетУчета
	|ПОМЕСТИТЬ ВТ_ТЧДокумента
	|ИЗ
	|	&ТЧДокумента КАК ТЧДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТЧДокумента.Товар КАК Товар,
	|	ВЫБОР
	|		КОГДА ВТ_ТЧДокумента.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ПустаяСсылка)
	|			ТОГДА Номенклатура.Счет10
	|		ИНАЧЕ ВТ_ТЧДокумента.СчетУчета
	|	КОНЕЦ КАК ТоварСчет10
	|ПОМЕСТИТЬ ВТ_ТЧДокументаСоСчетами
	|ИЗ
	|	ВТ_ТЧДокумента КАК ВТ_ТЧДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО ВТ_ТЧДокумента.Товар = Номенклатура.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТЧДокументаСоСчетами.Товар КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ВТ_ТЧДокументаСоСчетами.ТоварСчет10 = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ПустаяСсылка)
	|			ТОГДА &Счет41
	|		ИНАЧЕ ВТ_ТЧДокументаСоСчетами.ТоварСчет10
	|	КОНЕЦ КАК Счет,
	|	(ВЫБОР
	|		КОГДА ВТ_ТЧДокументаСоСчетами.ТоварСчет10 = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ПустаяСсылка)
	|			ТОГДА &Счет41
	|		ИНАЧЕ ВТ_ТЧДокументаСоСчетами.ТоварСчет10
	|	КОНЕЦ).УчетПоПодразделениям КАК УчетПоПодразделениям
	|ИЗ
	|	ВТ_ТЧДокументаСоСчетами КАК ВТ_ТЧДокументаСоСчетами
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТЧДокументаСоСчетами.Товар,
	|	ВЫБОР
	|		КОГДА ВТ_ТЧДокументаСоСчетами.ТоварСчет10 = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ПустаяСсылка)
	|			ТОГДА &Счет41
	|		ИНАЧЕ ВТ_ТЧДокументаСоСчетами.ТоварСчет10
	|	КОНЕЦ,
	|	(ВЫБОР
	|		КОГДА ВТ_ТЧДокументаСоСчетами.ТоварСчет10 = ЗНАЧЕНИЕ(ПланСчетов.Учетный.ПустаяСсылка)
	|			ТОГДА &Счет41
	|		ИНАЧЕ ВТ_ТЧДокументаСоСчетами.ТоварСчет10
	|	КОНЕЦ).УчетПоПодразделениям";
	//ТЧДокумента = Новый ТаблицаЗначений;
	//ТЧДокумента.Колонки.Добавить("Товар", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	//ТЧДокумента.Колонки.Добавить("СчетУчета", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	//Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
	//	СтрокаТЧДокумента = ТЧДокумента.Добавить();
	//	СтрокаТЧДокумента.Товар = СтрокаТЧ.Товар;
	//КонецЦикла;	
	
	Запрос.УстановитьПараметр("Счет41", ПланыСчетов.Учетный.Счет41());
	Запрос.УстановитьПараметр("ТЧДокумента", Объект[Товары].Выгрузить(,Номенклатура + ", " + Счет10));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ЭтоДокументДвиженияТМЦИОпцияВыключена = сабОбщегоНазначенияКлиентСервер.ЭтоДокументДвиженияТМЦИОпцияВыключена(Объект.Ссылка);
	
	Соответствия = Новый Соответствие;
	СоответствияУчетаПодразделений = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		Если Выборка.Номенклатура = Неопределено Тогда
			Продолжить;		
		КонецЕсли;
		Соответствия.Вставить(Выборка.Номенклатура, Выборка.Счет);
		СоответствияУчетаПодразделений.Вставить(Выборка.Счет, МИН(НЕ ЭтоДокументДвиженияТМЦИОпцияВыключена, Выборка.УчетПоПодразделениям));
	КонецЦикла;
	Соответствия.Вставить(Неопределено, СчетПоУмолчанию);
	Соответствия.Вставить(Null, СчетПоУмолчанию);
	Если Соответствия.Получить(Справочники.Номенклатура.ПустаяСсылка()) = Неопределено Тогда
		Соответствия.Вставить(Справочники.Номенклатура.ПустаяСсылка(), СчетПоУмолчанию);
	КонецЕсли;
	
	МассивМатериаловБезСчета = Новый Массив;
	Для каждого ТекСтрока Из Объект[Товары] Цикл
		Если Не ЗначениеЗаполнено(ТекСтрока[Счет10]) И МассивМатериаловБезСчета.Найти(ТекСтрока[Номенклатура]) = Неопределено Тогда
			МассивМатериаловБезСчета.Добавить(ТекСтрока[Номенклатура]);	
		КонецЕсли;
	КонецЦикла;
	
	НовоеСоответствие = сабОбщегоНазначения.ПолучитьСчетУчетаНоменклатуры(МассивМатериаловБезСчета, Объект.Организация, Неопределено);
	Для каждого ТекСоотв Из НовоеСоответствие Цикл
		Если ЗначениеЗаполнено(ТекСоотв.Значение.СчетУчетаУУ) Тогда
			Соответствия.Вставить(ТекСоотв.Ключ, ТекСоотв.Значение.СчетУчетаУУ);
			СоответствияУчетаПодразделений.Вставить(ТекСоотв.Значение.СчетУчетаУУ, ТекСоотв.Значение.СчетУчетаУУ.УчетПоПодразделениям);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("Соответствия, СоответствияУчетаПодразделений", Соответствия, СоответствияУчетаПодразделений);	
	
КонецФункции // ()

Процедура ДобавитьОграничениеВыбораСчета(ЭтаФорма, ИмяЭлемента) Экспорт
	
	ДоступныеСчета = ПараметрыСеанса.ДоступныеСчета;
	
	Если ДоступныеСчета.Количество() Тогда
		
		ЭтаФорма.Элементы[ИмяЭлемента].РежимВыбораИзСписка = Истина;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Учетный.Ссылка КАК Ссылка,
		|	Учетный.Наименование КАК Наименование,
		|	Учетный.Код КАК Код
		|ИЗ
		|	ПланСчетов.Учетный КАК Учетный
		|ГДЕ
		|	Учетный.Ссылка В(&ДоступныеСчета)";
		
		Запрос.УстановитьПараметр("ДоступныеСчета", ДоступныеСчета);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЭтаФорма.Элементы[ИмяЭлемента].СписокВыбора.Добавить(Выборка.Ссылка, Выборка.Код + " " + Выборка.Наименование);		
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Функция НациональнаяВалюта() Экспорт

	Возврат Справочники.Валюты.НайтиПоКоду("643");	

КонецФункции // ()

Функция ПолучитьСоотвСчетовБУУУ() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	сабСоответствиеСчетовИСубконто.СчетБУ КАК СчетБУ,
	|	сабСоответствиеСчетовИСубконто.СубконтоБУ1 КАК СубконтоБУ1,
	|	сабСоответствиеСчетовИСубконто.СубконтоБУ2 КАК СубконтоБУ2,
	|	сабСоответствиеСчетовИСубконто.СубконтоБУ3 КАК СубконтоБУ3,
	|	сабСоответствиеСчетовИСубконто.СчетУУ КАК СчетУУ,
	|	сабСоответствиеСчетовИСубконто.СубконтоУУ1 КАК СубконтоУУ1,
	|	сабСоответствиеСчетовИСубконто.СубконтоУУ2 КАК СубконтоУУ2,
	|	сабСоответствиеСчетовИСубконто.СубконтоУУ3 КАК СубконтоУУ3,
	|	сабСоответствиеСчетовИСубконто.Комментарии КАК Комментарии,
	|	сабСоответствиеСчетовИСубконто.ЗначениеСубконтоУУ1 КАК ЗначениеСубконтоУУ1,
	|	сабСоответствиеСчетовИСубконто.ЗначениеСубконтоУУ2 КАК ЗначениеСубконтоУУ2,
	|	сабСоответствиеСчетовИСубконто.ЗначениеСубконтоУУ3 КАК ЗначениеСубконтоУУ3
	|ИЗ
	|	РегистрСведений.сабСоответствиеСчетовИСубконто КАК сабСоответствиеСчетовИСубконто";
	
	Результат = Запрос.Выполнить();
	ВыборкаСоотв = Результат.Выгрузить();

    Возврат ВыборкаСоотв;

КонецФункции // ()
